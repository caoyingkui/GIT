0: This issue explores adding a new feature to BKDReader/Writer that enables users to select a fewer number of dimensions to be used for creating the BKD index than the total number of dimensions specified for field encoding .
1: This is useful for encoding dimensional data that is used for interpreting the encoded field data but unnecessary -LRB- or not efficient -RRB- for creating the index structure .
2: One such example is LatLonShape encoding .
3: The first 4 dimensions may be used to to efficiently search/index the triangle using its precomputed bounding box as a 4D point , and the remaining dimensions can be used to encode the vertices of the tessellated triangle .
4: This causes BKD to act much like an R-Tree for shape data where search is distilled into a 4D point -LRB- instead of a more expensive 6D point -RRB- and the triangle is encoded using a portion of the remaining -LRB- non-indexed -RRB- dimensions .
5: Fields that use the full data range for indexing are not impacted and behave as they normally would .
6: Initial patch provided : The lionshare of the changes are made to FieldType , BKDWriter , and BKDReader .
7: FieldType - split pointDimensionCount into two new integers that define pointDataDimensionCount and pointIndexDimensionCount .
8: pointIndexDimensionCount must be < = pointDataDimensionCount and defines the first n dimensions that will be used to build the index .
9: The remaining pointDataDimensionCount - pointIndexDimensionCount dimensions are ignored while building -LRB- e.g. , split/merge -RRB- the index .
10: Getter and Setter utility methods are added .
11: BKDWriter - change writeIndex to encode and write numIndexDims in the 2 most significant bytes of the integer that formerly stored numDims this provides simple backwards compatability without requiring a change to FieldInfoFormat .
12: Indexing methods are updated to only use the first numIndexDims while building the tree .
13: Leaf nodes still use numDataDims for efficiently packing and compressing the leaf level data -LRB- data nodes -RRB- .
14: BKDReader - add version checking in the constructor to decode numIndexDims and numDataDims from the packed dimension integer .
15: Update index reading methods to only look at the first numIndexDims while traversing the tree .
16: numDataDims are still used for decoding leaf level data .
17: API Changes - all instances of pointDimensionCount have been updated to pointDataDimensionCount and pointIndexDimensionCount to reflect total number of dimensions , and number of dimensions used for creating the index , respectively .
18: All POINT Tests and POINT based Fields have been updated to use the API changes .
19: Benchmarking -- To benchmark the changes I update LatLonShape -LRB- not included in this patch -RRB- and ran benchmark tests both with and without selective indexing .
20: The results are below : 6 dimension encoded LatLonShape w/o selective indexing ------ INDEX SIZE : 1.2795778876170516 GB READER MB : 1.7928361892700195 BEST M hits/sec : 11.67378231920028 BEST QPS : 6.8635445274291715 for 225 queries , totHits = 382688713 7 dimension LatLonShape encoding w / 4 dimension selective indexing ------- INDEX SIZE : 2.1509012933820486 GB READER MB : 1.8154268264770508 BEST M hits/sec : 17.018094815004627 BEST QPS : 10.005707519719927 for 225 queries , totHits = 382688713 The gains are a little better than the differences between searching a 4d range vs a 6d range .
21: The index size increased due to using 7 dimensions instead of 6 , but I also switched over to a bit bigger encoding size .
22: It is a pity that the patch is so large given that the change is actually simple .
23: I like the idea and the patch looks very clean overall , I see you added validation for corner-cases like rejecting dataDimensionCount > 0 but indexDimensionCount == 0 .
24: Out of curiosity , did your working copy already have LUCENE-7862 when you ran the benchmark ?
25: I have some minor comments on the patch , could you maybe set up a pull request or use Apache reviewboard to make it easier to comment on your changes and iterate ?
26: It is a pity that the patch is so large Yeah .
27: Refactoring pointDimensionCount touched a lot of files so the patch is rather busy .
28: I could change it to leave pointDimensionCount as is and just add a new indexDimensionCount ?
29: Out of curiosity , did your working copy already have LUCENE-7862 when you ran the benchmark ?
30: My benchmark numbers include the latest change to store min/max packed values .
31: The only difference is using LatLonShape without and with the selective indexing approach .
32: ... could you maybe set up a pull request or use Apache reviewboard Sure thing !
33: I went ahead and opened a PR here
34: I 've attached an updated patch that is consistent with the latest PR updates .
35: Additionally , I 've attached a WIP patch that modifies LatLonShape encoding to take advantage of the selective indexing changes to boost QPS per the table listed above .
36: I 'll ultimately create a separate issue but wanted to provide it now for anyone that wants it to review the application of this feature or benchmark performance .
37: Attaching latest patch consistent with recent PR updates .
38: I ran two new benchmarks using 20M documents from the PlanetOSM corpus of data .
39: The first is without selective indexing and using LatLonShape currently in master , the second is with selective indexing and using 7 dimension long encoding for LatLonShape .
40: The first 4 index dimensions are the bounding box of the triangle -LRB- compressed to Integer size -RRB- and the remaining 3 data dimensions are the three vertices of the triangle .
41: What 's nice about this is we can arrange the three triangle vertices so that the first two represent the edge of the shape .
42: I think this will provide a path forward for implementing the CONTAINS query .
43: Nevertheless , this is a great benchmark because it uses real world shape data .
44: -LRB- LineStrings , MultiLineStrings , Polygons , and MultiPolygons - with and without holes -RRB- .
45: The geometries are quite complex and the results are looking good .
46: 6 dimension LatLonShape w/o selective indexing : -- INDEX SIZE : 4.944349942728877 GB READER MB : 2.7018051147460938 maxDoc = 20000000 BEST M hits/sec : 0.9616386761834046 BEST QPS : 5.816462716249435 7 dimension LatLonShape w / selective indexing : -- INDEX SIZE : 8.462444095872343 GB READER MB : 2.5924673080444336 maxDoc = 20000000 BEST M hits/sec : 1.5636273064182318 BEST QPS : 9.457585426978618
47: Updated patch that 's consistent with the PR changes and feedback .
48: Will commit this to master and 7.x pending a final QA check .
49: -1 overall Vote Subsystem Runtime Comment Prechecks +1 test4tests 0m 0s The patch appears to include 10 new or modified test files .
50: master Compile Tests +1 compile 5m 57s master passed Patch Compile Tests +1 compile 6m 31s the patch passed +1 javac 6m 31s the patch passed +1 Release audit -LRB- RAT -RRB- 1m 44s the patch passed +1 Check forbidden APIs 0m 17s the patch passed +1 Validate source patterns 0m 17s the patch passed Other Tests -1 unit 7m 11s codecs in the patch failed .
51: +1 unit 31m 26s core in the patch passed .
52: +1 unit 2m 16s highlighter in the patch passed .
53: +1 unit 1m 15s join in the patch passed .
54: +1 unit 0m 17s memory in the patch passed .
55: +1 unit 4m 56s sandbox in the patch passed .
56: +1 unit 2m 45s spatial-extras in the patch passed .
57: +1 unit 5m 53s test-framework in the patch passed .
58: -1 unit 87m 35s core in the patch failed .
59: 163m 16s Reason Tests Failed junit tests lucene.codecs.simpletext.TestSimpleTextPointsFormat solr.cloud.autoscaling.IndexSizeTriggerTest solr.cloud.autoscaling.sim.TestSimTriggerIntegration Subsystem Report/Notes JIRA Issue LUCENE-8496 JIRA Patch URL https://issues.apache.org/jira/secure/attachment/12942299/LUCENE-8496.patch Optional Tests compile javac unit ratsources checkforbiddenapis validatesourcepatterns uname Linux lucene2-us-west .
60: apache.org 4.4.0-112-generic # 135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux Build tool ant Personality / home/jenkins/jenkins-slave / workspace/PreCommit-LUCENE-Build/sourcedir / dev-tools/test-patch/lucene-solr-yetus - personality.sh git revision master / 46f753d ant version : Apache Ant -LRB- TM -RRB- version 1.9.6 compiled on July 20 2018 Default Java 1.8.0 _ 172 unit https://builds.apache.org/job/PreCommit-LUCENE-Build/99/artifact/out/patch-unit-lucene_codecs.txt unit https://builds.apache.org/job/PreCommit-LUCENE-Build/99/artifact/out/patch-unit-solr_core.txt Test Results https://builds.apache.org/job/PreCommit-LUCENE-Build/99/testReport/ modules C : lucene lucene/codecs lucene/core lucene/highlighter lucene/join lucene/memory lucene/sandbox lucene/spatial-extras lucene/test-framework solr/core U : .
61: Console output https://builds.apache.org/job/PreCommit-LUCENE-Build/99/console Powered by Apache Yetus 0.7.0 http://yetus.apache.org This message was automatically generated .
62: Updated patch to make SimpleTextBKDWriter consistent w / BKDWriter .
63: -1 overall Vote Subsystem Runtime Comment -1 patch 0m 6s LUCENE-8496 does not apply to master .
64: See https://wiki.apache.org/lucene-java/HowToContribute#Contributing_your_work for help .
65: Subsystem Report/Notes JIRA Issue LUCENE-8496 JIRA Patch URL https://issues.apache.org/jira/secure/attachment/12942614/LUCENE-8496.patch Console output https://builds.apache.org/job/PreCommit-LUCENE-Build/102/console Powered by Apache Yetus 0.7.0 http://yetus.apache.org This message was automatically generated .
66: -1 overall Vote Subsystem Runtime Comment Prechecks +1 test4tests 0m 0s The patch appears to include 10 new or modified test files .
67: master Compile Tests +1 compile 7m 5s master passed Patch Compile Tests +1 compile 5m 39s the patch passed +1 javac 5m 39s the patch passed +1 Release audit -LRB- RAT -RRB- 0m 59s the patch passed +1 Check forbidden APIs 0m 30s the patch passed +1 Validate source patterns 0m 30s the patch passed Other Tests +1 unit 9m 5s codecs in the patch passed .
68: +1 unit 30m 31s core in the patch passed .
69: +1 unit 1m 18s highlighter in the patch passed .
70: +1 unit 1m 58s join in the patch passed .
71: +1 unit 1m 11s memory in the patch passed .
72: +1 unit 4m 35s sandbox in the patch passed .
73: +1 unit 1m 18s spatial-extras in the patch passed .
74: +1 unit 4m 44s test-framework in the patch passed .
75: -1 unit 90m 55s core in the patch failed .
76: 165m 2s Reason Tests Failed junit tests solr.cloud.autoscaling.sim.TestSimPolicyCloud Subsystem Report/Notes JIRA Issue LUCENE-8496 JIRA Patch URL https://issues.apache.org/jira/secure/attachment/12942690/LUCENE-8496.patch Optional Tests compile javac unit ratsources checkforbiddenapis validatesourcepatterns uname Linux lucene2-us-west .
77: apache.org 4.4.0-112-generic # 135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux Build tool ant Personality / home/jenkins/jenkins-slave / workspace/PreCommit-LUCENE-Build/sourcedir / dev-tools/test-patch/lucene-solr-yetus - personality.sh git revision master / 367bdf7 ant version : Apache Ant -LRB- TM -RRB- version 1.9.6 compiled on July 20 2018 Default Java 1.8.0 _ 172 unit https://builds.apache.org/job/PreCommit-LUCENE-Build/103/artifact/out/patch-unit-solr_core.txt Test Results https://builds.apache.org/job/PreCommit-LUCENE-Build/103/testReport/ modules C : lucene lucene/codecs lucene/core lucene/highlighter lucene/join lucene/memory lucene/sandbox lucene/spatial-extras lucene/test-framework solr/core U : .
78: Console output https://builds.apache.org/job/PreCommit-LUCENE-Build/103/console Powered by Apache Yetus 0.7.0 http://yetus.apache.org This message was automatically generated .
79: Failure on branch_7x : ant test - Dtestcase = TestBKD - Dtests.seed = 3A807E1398CE4499 - Dtests.slow = true - Dtests.badapples = true - Dtests.locale = sr-Latn-BA - Dtests.timezone = Africa/Malabo - Dtests.asserts = true - Dtests.file.encoding = US-ASCII Muting test until fix is pushed .
80: I went ahead and reverted this feature from branch_7x until the backport can be cleaned up .
81: FYI two other failing tests on branch_7x from https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-Linux/2891/ -LRB- before the commit was reverted -RRB- : ant test - Dtestcase = TestLucene60PointsFormat - Dtests.seed = B5A28E6677965A99 - Dtests.multiplier = 3 - Dtests.slow = true - Dtests.locale = fr-CA - Dtests.timezone = Asia/Irkutsk - Dtests.asserts = true - Dtests.file.encoding = UTF-8 ant test - Dtestcase = TestAssertingPointsFormat - Dtests.seed = F280908F18AE1657 - Dtests.multiplier = 3 - Dtests.slow = true - Dtests.locale = dz - Dtests.timezone = Etc/GMT -10 - Dtests.asserts = true - Dtests.file.encoding = US-ASCII
82: Commit 804afbfd47cc8d86ceda6ea66f0afe304af1ad1b in lucene-solr 's branch refs/heads/branch _ 7x from Nicholas Knize -LSB- https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=804afbf -RSB- LUCENE-8496 : Selective indexing - modify BKDReader/BKDWriter to allow users to select a fewer number of dimensions to be used for creating the index than the total number of dimensions used for field encoding .
83: i.e. , dimensions 0 to N may be used to determine how to split the inner nodes , and dimensions N +1 to D are ignored and stored as data dimensions at the leaves .
84: Closing ; pushed to master and branch_7x
