{
    "id": "LUCENE-6845",
    "title": "Merge Spans and SpanScorer",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "SpanScorer and Spans currently share the burden of scoring span queries, with SpanScorer delegating to Spans for most operations.  Spans is essentially a Scorer, just with the ability to iterate through positions as well, and no SimScorer to use for scoring.  This seems overly complicated.  We should merge the two classes into one.",
    "attachments": {
        "LUCENE-6845_norenames.patch": "https://issues.apache.org/jira/secure/attachment/12767610/LUCENE-6845_norenames.patch",
        "LUCENE-6845_norenames.patch.txt": "https://issues.apache.org/jira/secure/attachment/12767782/LUCENE-6845_norenames.patch.txt",
        "LUCENE-6845.patch": "https://issues.apache.org/jira/secure/attachment/12767476/LUCENE-6845.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14964013",
            "author": "Alan Woodward",
            "date": "2015-10-19T20:38:38+0000",
            "content": "Patch.\n\nSpans is merged entirely into SpanScorer, various classes get renamed, and SpanWeight.getSpans() becomes SpanWeight.getSpanScorer().  The only slightly messy part concerns how to pass SimScorers around, as SpanScorer now takes one in its constructor.\n\nSpan tests pass, but I still need to run the whole test suite, so health warnings apply. "
        },
        {
            "id": "comment-14964027",
            "author": "David Smiley",
            "date": "2015-10-19T20:47:35+0000",
            "content": "Sounds great.  But as I started to look at the patch; it became clear that it's hard to review with the renames to have the Scorer Suffix.  Perhaps, temporarily, you could not do that to make it more reviewable?\n\nI'm anticipating I'm going to see stuff that suggests this should wait for 6.0.  What do you think? "
        },
        {
            "id": "comment-14965292",
            "author": "Alan Woodward",
            "date": "2015-10-20T15:59:04+0000",
            "content": "Patch without the renames, which should make changes easier to see.\n\nI don't think there's anything in here that needs to wait for 6.0?  People creating their own Spans implementations are highly-expert users, and shouldn't have a problem with changing things to extend SpanScorer instead. "
        },
        {
            "id": "comment-14965473",
            "author": "David Smiley",
            "date": "2015-10-20T17:55:57+0000",
            "content": "I looked it over; I like the conceptual simplification this bring.  One thing confused me though:  What is the purpose of SpanNotQuery\u2019s getSpanScorer wrapping the includeSpans with a FilterSpans that has an accept that always returns YES?  I see this in SpanOrQuery too and perhaps others.\n\nThe rename of Spans -> SpanScorer affects anyone consuming Spans, not just implementers of custom Spans.  This is seen in your patch in WeightedSpanTermExtractor, for example.  I'm on the fence if this is acceptable or not in a point release; I wonder what others think.  Even if we decide to keep backward compatibility, I think the substance of your patch could still land in 5x by having Spans not be renamed to SpanScorer, and keep the existing method names as-is. "
        },
        {
            "id": "comment-14966707",
            "author": "Alan Woodward",
            "date": "2015-10-21T12:07:23+0000",
            "content": "What is the purpose of SpanNotQuery\u2019s getSpanScorer wrapping the includeSpans with a FilterSpans that has an accept that always returns YES? \n\nThis is a slightly hacky workaround for the fact that only the top-level Spans implementation actually does any scoring.  This means that degenerate cases like single-clause SpanOrQueries or SpanNotQueries with null exclusion clauses can't just return the relevant child Spans, because it won't have a SimScorer set on it.  Instead, we need to wrap it with a Spans containing a SimScorer.  This is an abuse of FilterSpans though - I'll create a specialised ScoringWrapperSpans instead to use here.\n\nIf we're really worried about backwards compatibility, we could keep Spans as an empty subclass of SpanScorer.  But I really don't think it's necessary - we already changed the Spans interface in 5.3 by adding Spans.collect(), so users upgrading from 5.2 from 5.3 would have had to recompile. "
        },
        {
            "id": "comment-14966786",
            "author": "Alan Woodward",
            "date": "2015-10-21T13:14:40+0000",
            "content": "Updated patch, with ScoringWrapperSpans.  I also renamed SpanWeight.getSpanScorer() to SpanWeight.spanScorer(), by analogy with scorer() and bulkScorer().\n\nAll tests and precommit pass. "
        },
        {
            "id": "comment-14967275",
            "author": "David Smiley",
            "date": "2015-10-21T15:02:11+0000",
            "content": "we already changed the Spans interface in 5.3 by adding Spans.collect(), so users upgrading from 5.2 from 5.3 would have had to recompile\n\nI don't see why recompiling would be needed if you merely consume a Spans (don't have a custom implementation) and don't call the newly added method.\n\nAny way, I'm +1 to all this. "
        },
        {
            "id": "comment-14967485",
            "author": "Alan Woodward",
            "date": "2015-10-21T17:13:00+0000",
            "content": "Ah, I see what you mean now.\n\nI've changed the patch to be as least invasive as I can make it - SpanScorer is merged into Spans, rather than the other way around, and SpanWeight.getSpans() stays the same. "
        },
        {
            "id": "comment-14967736",
            "author": "David Smiley",
            "date": "2015-10-21T19:40:35+0000",
            "content": "And the patch is now half the size   (thus low-impact on consumers).  I do very much like your rename proposals; it's just that those should be on trunk-only, I think.  Perhaps in a follow-up commit that doesn't get back-ported. "
        },
        {
            "id": "comment-14968845",
            "author": "ASF subversion and git services",
            "date": "2015-10-22T09:16:04+0000",
            "content": "Commit 1709964 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1709964 ]\n\nLUCENE-6845: Merge SpanScorer into Spans "
        },
        {
            "id": "comment-14968990",
            "author": "ASF subversion and git services",
            "date": "2015-10-22T11:30:52+0000",
            "content": "Commit 1709993 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1709993 ]\n\nLUCENE-6845: Merge SpanScorer into Spans "
        }
    ]
}