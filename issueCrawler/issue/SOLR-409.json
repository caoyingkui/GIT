{
    "id": "SOLR-409",
    "title": "Allow configurable class loader sharing between cores",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "WHAT:\nThis patch allows to configure in the multicore.xml the parent class loader of all core class loaders used to dynamically create instances.\n\nWHY:\nCurrent behavior allocates one class loader per config & thus per core.\nHowever, there are cases where one would like different cores to share some objects that are dynamically instantiated (ie, where the class name is used to find the class through the class loader and instantiate). In the current form; since each core possesses its own class loader, static members are indeed different objects. For instance, there is no way of implementing a singleton shared between 2 request handlers.\n\nOriginally from http://www.nabble.com/Post-SOLR215-SOLR350-singleton-issue-tf4776980.html\n\nHOW:\nThe sharedLib attribute is extracted from the XML (multicore.xml) configuration file and parsed in the MultiCore load method. The directory path is used to create an URL class loader that will become the parent class loader of all core class loaders; since class resolution if performed on a parent-first basis, this allows sharing instances between different cores.\n\nSTATUS:\noperational in conjunction with solr-350",
    "attachments": {
        "solr-350_409_414.patch": "https://issues.apache.org/jira/secure/attachment/12371042/solr-350_409_414.patch",
        "solr-409.patch": "https://issues.apache.org/jira/secure/attachment/12369365/solr-409.patch",
        "solr-350_409.patch": "https://issues.apache.org/jira/secure/attachment/12369372/solr-350_409.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Henri Biestro",
            "id": "comment-12541749",
            "date": "2007-11-12T11:41:58+0000",
            "content": "initial drop "
        },
        {
            "author": "Walter Ferrara",
            "id": "comment-12541762",
            "date": "2007-11-12T12:44:10+0000",
            "content": "Thanks very much!\na) In order to apply the patch, I've locally modified it to look for Config.java in src/java/org/apache/solr/core/Config.java\nb) Don't seems to work with SOLR-350. (I understand it just depends on solr-215, which is in trunk, but what about SOLR-350? It could be interesting to apply it over solr-350, for a future join maybe)\n\nIf I apply solr-409.patch before SOLR-350-MultiCore.patch, the 409 goes well and 350 produce errors, otherwise the 350 goes well, and then:\npatching file src/java/org/apache/solr/core/Config.java\nHunk #2 FAILED at 54.\nHunk #3 succeeded at 91 (offset 1 line).\nHunk #4 succeeded at 178 (offset 1 line).\nHunk #5 succeeded at 344 (offset 10 lines).\nHunk #6 succeeded at 364 (offset 10 lines).\nHunk #7 succeeded at 405 (offset 10 lines).\nHunk #8 succeeded at 424 (offset 10 lines).\n1 out of 8 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/core/Config.java.rej\n\nALSO:\n\nWe should choose where is the best place to put the info about the shared lib dir. \nIn this patch I can choose if to share or not to share, which is ok for me, but an user could be so lazy that wants to share just something, not every jars of his core  \nAnother approach could be to use SOLR-350 and put the info about the share directory info in multicore.xml, like:\n\n<multicore enabled=\"true\" adminpath=\"/admin/multicore\" persistent=\"true\" sharedLibDir=\"lib\">\n <core name=\"core0\" instanceDir=\"core0\" default=\"true\"/>\n <core name=\"core1\" instanceDir=\"core1\" />\n</multicore>\n\nWhere sharedLibDir indicate where to locate shared libraries - this way it could be the same of a core, but it could be a totally different one too.\nAny thoughts?\n\u2013\nWalter "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12541771",
            "date": "2007-11-12T13:36:39+0000",
            "content": "Sorry about the non-regular patch, my bad, I should've documented that.\nI like the idea of being able to specify a default shared lib directory for all cores in the multicore configuration.\nI've thus modified Config.java to allow overriding how to solve the default shared library (I'm producing the patch the same way as the first one, so to apply it on a trunk, you may want to 'cd src/java/org/.apache/solr/core' first).\nFrom a solr-350 base, I've updated MultiCore to look for a 'libDir' attribute that serves as the default shared library.\nTo ease testing, I'm thus also uploading the solr-350 + solr-409 patch here. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12541773",
            "date": "2007-11-12T13:37:53+0000",
            "content": "solr 350 & solr 409 mixed together "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12541876",
            "date": "2007-11-12T18:16:55+0000",
            "content": "lib dir is now relative to multicore dir;\nstarted servlet update for solr-350 enhancements (core as http parameter) "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12542515",
            "date": "2007-11-14T17:26:28+0000",
            "content": "admin webapp is core aware "
        },
        {
            "author": "Walter Ferrara",
            "id": "comment-12542562",
            "date": "2007-11-14T19:41:58+0000",
            "content": "I ran some test, it seems to work really fine.\nI like the way you choose to show admin pages for each cores.\nI noticed that when I click on \"SCHEMA\" I get:\n\n<ERROR>\nPermission denied for file solr\\core0//conf/schema.xml\n</ERROR>\n\n\"SCHEMA\" link point to http://localhost:8983/solr/admin/get-file.jsp?core=core0&file=solr\\core0//conf/schema.xml\nInteresting \"CONFIG\" links works fine (http://localhost:8983/solr/admin/get-file.jsp?core=core0&file=solrconfig.xml)\ntaking a look at index.jsp in admin seems that core.getSchemaFile() add paths, while core.getConfigFile() don't.\n\nI had an idea:\nSolr currently log info to the \"console\", this info have no track of which core executed the action, e.g.\n\n14-nov-2007 20.33.51 org.apache.solr.core.SolrCore execute\nINFO: /select/ indent=on&start=0&q=solr&version=2.2&rows=10 0 0\n14-nov-2007 20.33.54 org.apache.solr.core.SolrCore execute\nINFO: /select/ indent=on&start=0&q=solr&version=2.2&rows=10 0 0\n\nThe first one was executed on \"core0\", while the latter on \"core1\" - no way to determine it from those log lines.\nI was wondering, what are your thoughts about putting core name somewhere in logging info, ie.\n\n14-nov-2007 20.33.51 org.apache.solr.core.SolrCore execute\nINFO: [core0] /select/ indent=on&start=0&q=solr&version=2.2&rows=10 0 0\n14-nov-2007 20.33.54 org.apache.solr.core.SolrCore execute\nINFO: [core1] /select/ indent=on&start=0&q=solr&version=2.2&rows=10 0 0\n\n\u2013\nWalter "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12543693",
            "date": "2007-11-19T21:08:37+0000",
            "content": "as i mentioned on the mailing list a while back, it's not clear to me how multicore stuff is expected to be used by people in the solr webapp (still hoping to see some use cases / hypothetical-howtos on the wiki) but based on the description/comments in this issue it seems that there are two ways a libDir can be shared...\n\n  1) by specifying a libDir in some file i've never seen before called \"multicore.xml\"\n  2) by declaring it shared in the solrconfig.xml files of 2 or more cores\n\n#1 makes sense to me ... the correct thing to do seems to be to let whatever new object exists to manage cores (CoreManager?) have it's own ClassLoader that is used when initializing cores (this will then become the parent loader for the class loaders created by each core) ... this \"multicore parent classloader\" would be configured in the CoreManager's config file (multicore.xml?)\n\n#2 seems scary ... particularly because it allows \"sister\" cores, initialized by the same classloader to share instances of a class that their own classloader doesn't know about.  there's also the issues of how things should behave if two different cores refer to the same physical jar/classfile but do so using different paths (which might be symlinks or hardlinks and won't even have the same canonical path); as well as the question of what happens when we dynamically \"unload/reload all of the cores that were sharing a lib \u2013 depending on the order of events, and garbage collection, classes might be completely reloaded (or not)\n\nlet's keep the classloader semantics simple, and hierarchical:\n  1) every core has a plugin classloader.\n  2) every plugin classloader has a common parent classloader\n  3) the common parent classloader may contain shared libraries "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12543787",
            "date": "2007-11-20T06:06:45+0000",
            "content": "Yes #1, not #2\n\n\n<multicore enabled=\"true\" adminpath=\"/admin/multicore\" persistent=\"true\" sharedLib=\"shared\">\n  <core name=\"core0\" instanceDir=\"core0\" default=\"true\"/>\n  <core name=\"core1\" instanceDir=\"core1\" />\n</multicore>\n\n\n\nI don't see a need to have 'hierarchical' classloaders - a single global shared library should be sufficient:\n1) every core has a plugin classloader.\n2) MultiCore may have a shared classloader\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12543970",
            "date": "2007-11-20T18:02:31+0000",
            "content": "i'm not sure how to interpret \"Yes #1, not #2\" ... are you saying my understanding about case #2 is wrong, or that you agree with me we shouldn't do it? (i was basing that comment on the original issue description)\n\n>> I don't see a need to have 'hierarchical' classloaders - a single global shared library should be sufficient:\n\nby hierarchical i'm referring to the normal way java classloaders work: every classloader has a parent, which it delegates to automaticly.  if we're going to have a shared class loader available for all cores, then it should be the parent of each core specific plugin classloader.\n\n(currently the plugin ClassLoader uses the context classloader as it's parent ... that can still work as long as whatever \"MultiCoreManager\" object that deals with multicore.xml uses the new \"shared code classloader\" as the context when instantiating each SolrCore ... or we can be more explicit about it.) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12544016",
            "date": "2007-11-20T19:23:03+0000",
            "content": "I agree with everything you say above.\n\nLets take the approach in #1 and avoid anything resembling #2 "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12548699",
            "date": "2007-12-05T15:51:13+0000",
            "content": "experimental; merges solr-350 + 414 + 409 (feature matches comments made) "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12548753",
            "date": "2007-12-05T18:26:13+0000",
            "content": "cleaned up, less noisy version on trunk 601457;\nupdated syntax for shared dir in multicore config; "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12548927",
            "date": "2007-12-06T05:48:22+0000",
            "content": "This adds solrj support for multicore and uses it to run a bunch of tests.  The tests work via jetty and embedded.\n\nCurrently the supported \"actions\" are \"status\", \" SetAsDefault\", and \"reload\".  Persistence and dynamic core creation are still down the line.\n\nThis patch should have no impact on standard single core access.  This adds the multicore functionality to setups that have a 'multicore.xml' file in the 'solr.solr.home' directory.\n\nWithout objection, I will commit this in the next day or two. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12549006",
            "date": "2007-12-06T11:53:45+0000",
            "content": "updated description to reflect decisions & match implementation "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12549044",
            "date": "2007-12-06T14:02:53+0000",
            "content": "updated to fix typos noted by Walter;\nadded core name in logging operation where possible (Walter's suggestion);\nmoved startTime initialization of core after schema parsing (fast machine on reload core was failing test...);\n\nUnified patch from Solaris10 box -\ncreated with:  svn diff --diff-cmd /usr/local/bin/diff -x \"-w -B -b -E -d -N -u\" > ~/solr-350_409.patch\napplied with:  /usr/local/bin/patch -u -p 0 < ~/solr-350_409.patch  "
        },
        {
            "author": "Walter Ferrara",
            "id": "comment-12550002",
            "date": "2007-12-10T10:32:38+0000",
            "content": "Thanks for committing this patch.\nI noticed that when you have just one core (with no multicore.xml), logging says \"null\", i.e.\nINFO: [null] Registered new searcher ....\nThis could be fixed in several ways:\n\n\tby giving a (meaningful) name to the core, when multicore is not used. (like schema.getName())\n\tby not adding the name of the core when logging is off (which maybe means reuse logStr function, and check if Multicore is enabled)\nThis is present also in stats.jsp where a null is printed before the uppercase bold \"CORE\" string.\nIMHO, we should set the name of single core when multicore is not set - this may make thing easier; set it as the name of its schema could be a solution.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12554602",
            "date": "2007-12-27T19:33:11+0000",
            "content": "This was committed along with SOLR-350 "
        }
    ]
}