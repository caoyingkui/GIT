{
    "id": "LUCENE-5931",
    "title": "DirectoryReader.openIfChanged(oldReader, commit) incorrectly assumes given commit point has deletes/field updates",
    "details": {
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index"
        ],
        "affect_versions": "4.6.1",
        "status": "Closed",
        "fix_versions": [
            "6.2",
            "7.0"
        ]
    },
    "description": "StandardDirectoryReader assumes that the segments from commit point have deletes, when they may not, yet the original SegmentReader for the segment that we are trying to reuse does. This is evident when running attached JUnit test case with asserts enabled (default): \n\n\njava.lang.AssertionError\n\tat org.apache.lucene.index.StandardDirectoryReader.open(StandardDirectoryReader.java:188)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:326)\n\tat org.apache.lucene.index.StandardDirectoryReader$2.doBody(StandardDirectoryReader.java:320)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:702)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenFromCommit(StandardDirectoryReader.java:315)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenNoWriter(StandardDirectoryReader.java:311)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:262)\n\tat org.apache.lucene.index.DirectoryReader.openIfChanged(DirectoryReader.java:183)\n\n\n\nor, if asserts are disabled then it falls through into NPE:\n\n\njava.lang.NullPointerException\n\tat java.io.File.<init>(File.java:305)\n\tat org.apache.lucene.store.NIOFSDirectory.openInput(NIOFSDirectory.java:80)\n\tat org.apache.lucene.codecs.lucene40.BitVector.<init>(BitVector.java:327)\n\tat org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.readLiveDocs(Lucene40LiveDocsFormat.java:90)\n\tat org.apache.lucene.index.SegmentReader.<init>(SegmentReader.java:131)\n\tat org.apache.lucene.index.StandardDirectoryReader.open(StandardDirectoryReader.java:194)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:326)\n\tat org.apache.lucene.index.StandardDirectoryReader$2.doBody(StandardDirectoryReader.java:320)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:702)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenFromCommit(StandardDirectoryReader.java:315)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenNoWriter(StandardDirectoryReader.java:311)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:262)\n\tat org.apache.lucene.index.DirectoryReader.openIfChanged(DirectoryReader.java:183)",
    "attachments": {
        "CommitReuseTest.java": "https://issues.apache.org/jira/secure/attachment/12667562/CommitReuseTest.java",
        "LUCENE-5931.patch": "https://issues.apache.org/jira/secure/attachment/12667875/LUCENE-5931.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14129247",
            "author": "Michael McCandless",
            "content": "Patch, starting from Vitaly's test case (thank you!) and folding into Lucene's tests ... it fails with this on trunk:\n\n\n1) testReopenReaderToOlderCommit(org.apache.lucene.index.TestDirectoryReaderReopen)\njava.lang.IllegalStateException: same segment _0 has invalid changes; likely you are re-opening a reader after illegally removing index files yourself and building a new index in their place.  Use IndexWriter.deleteAll or OpenMode.CREATE instead\n\tat __randomizedtesting.SeedInfo.seed([D3F22B13D5839643:931C8A9673D003F4]:0)\n\tat org.apache.lucene.index.StandardDirectoryReader.open(StandardDirectoryReader.java:190)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:323)\n\tat org.apache.lucene.index.StandardDirectoryReader$2.doBody(StandardDirectoryReader.java:317)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:649)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenFromCommit(StandardDirectoryReader.java:312)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenNoWriter(StandardDirectoryReader.java:308)\n\tat org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:259)\n\tat org.apache.lucene.index.DirectoryReader.openIfChanged(DirectoryReader.java:137)\n\tat org.apache.lucene.index.TestDirectoryReaderReopen.testReopenReaderToOlderCommit(TestDirectoryReaderReopen.java:824)\n\n ",
            "date": "2014-09-10T22:24:19+0000"
        },
        {
            "id": "comment-14129463",
            "author": "Robert Muir",
            "content": "Patch: I think the use-case is cool and it should be supported: its just adding an 'if' and removing the current exception (which is geared at protecting some user who manually rm -rf's files from their index.)\n\nI improved the test a bit to ensure that cores are shared and also tested the dv updates case. ",
            "date": "2014-09-11T01:04:27+0000"
        },
        {
            "id": "comment-14129776",
            "author": "Michael McCandless",
            "content": "Thanks Rob, patch looks great, except: I think we can keep the illegalDocCountChange safety?  I think I could make a test case to trip that ... ",
            "date": "2014-09-11T08:11:54+0000"
        },
        {
            "id": "comment-14129873",
            "author": "Robert Muir",
            "content": "Can you make a test change to trip it without manually removing files from your index? ",
            "date": "2014-09-11T10:51:50+0000"
        },
        {
            "id": "comment-14133664",
            "author": "Michael McCandless",
            "content": "Can you make a test change to trip it without manually removing files from your index?\n\nI don' t think so ... the only way I know of this happening is if an app has a reader open, then removes the index, rebuilds it, then tries to openIfChanged the reader.\n\nWe can remove the defensive safety if you really want to, but we put it in last time when this happened and it sure looked like index corruption... it's nice not to have false scares even if the app is doing something it shouldn't... ",
            "date": "2014-09-15T07:46:06+0000"
        },
        {
            "id": "comment-14133766",
            "author": "Robert Muir",
            "content": "Yes, I really want to. We can't let such abuse prevent real features, thats just wrong.\n\nIf you want safety against deleting files, maybe look at NIO.2 WatchService. This is general and would give you notification when such things happen rather than having a hack for one particular user's mistake. ",
            "date": "2014-09-15T10:23:23+0000"
        },
        {
            "id": "comment-14133770",
            "author": "Robert Muir",
            "content": "\nWe can remove the defensive safety if you really want to, but we put it in last time when this happened and it sure looked like index corruption\n\nIt is index corruption though. The user went and manually corrupted their index. Why hide that Mike? ",
            "date": "2014-09-15T10:24:54+0000"
        },
        {
            "id": "comment-14135183",
            "author": "Michael McCandless",
            "content": "I think we can do both (keep our best effort check, and allow reopening to \"older\" commit point) ... here's a patch. ",
            "date": "2014-09-16T09:21:04+0000"
        },
        {
            "id": "comment-14138564",
            "author": "Vitaly Funstein",
            "content": "Mike/Robert,\n\nI have a follow-up question. I have backported the fix to 4.6 and now I believe I am seeing another serious issue here. \n\nIf the old reader passed in to DirectoryReader.openIfChanged(DirectoryReader, IndexCommit) is actually an NRT reader, then it seems that if there is unflushed/uncommitted data in the associated writer's buffers, in particular deletes, the returned reader will see those changes - thus violating the intent of opening the index at just the commit point we wanted, frozen in time. Here's my original test case modified to show the problem:\n\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field.Store;\nimport org.apache.lucene.document.StringField;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexCommit;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy;\nimport org.apache.lucene.index.ReaderManager;\nimport org.apache.lucene.index.SnapshotDeletionPolicy;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.TermQuery;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport org.apache.lucene.util.Version;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.File;\n\npublic class CommitReuseTest {\n\n  private final File path = new File(\"indexDir\");\n  private IndexWriter writer;\n  private final SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n \n  @Before\n  public void initIndex() throws Exception {\n    path.mkdirs();\n    IndexWriterConfig idxWriterCfg = new IndexWriterConfig(Version.LUCENE_46, null);\n    idxWriterCfg.setIndexDeletionPolicy(snapshotter);\n    idxWriterCfg.setInfoStream(System.out);\n   \n    Directory dir = FSDirectory.open(path);\n    writer = new IndexWriter(dir, idxWriterCfg);\n   \n    writer.commit(); // make sure all index metadata is written out\n  }\n \n  @After\n  public void stop() throws Exception {\n    writer.close();\n  }\n\n  @Test\n  public void test() throws Exception {\n    Document doc;\n    ReaderManager rm = new ReaderManager(writer, true);\n   \n    // Index some data\n    for (int i = 0; i < 100; i++) {\n      doc = new Document();\n      doc.add(new StringField(\"key-\" + i, \"ABC\", Store.YES));\n      writer.addDocument(doc);\n    }\n   \n    writer.commit();\n   \n    IndexCommit ic1 = snapshotter.snapshot();\n   \n    doc = new Document();\n    doc.add(new StringField(\"key-\" + 0, \"AAA\", Store.YES));\n    writer.updateDocument(new Term(\"key-\" + 0, \"ABC\"), doc);\n\n    rm.maybeRefreshBlocking();\n    DirectoryReader latest = rm.acquire();\n    assertTrue(latest.hasDeletions());\n   \n    // This reader will be used for searching against commit point 1\n    DirectoryReader searchReader = DirectoryReader.openIfChanged(latest, ic1);\n//    assertFalse(searchReader.hasDeletions()); // XXX - this fails too!\n    rm.release(latest);\n   \n    IndexSearcher s = new IndexSearcher(searchReader);\n    Query q = new TermQuery(new Term(\"key-0\", \"ABC\"));\n    TopDocs td = s.search(q, 10);\n    assertEquals(1, td.totalHits);\n       \n    searchReader.close();\n    rm.close();\n    snapshotter.release(ic1);\n  }\n}\n\n\n\nNote, that if I comment out the updateDocument() call, the test passes. Also, if you only have one entry in the index, then it appears that while refreshing the NRT reader, the segment containing just the single delete will be removed, making it look like the test passes:\n\n\nIW 0 [Wed Sep 17 22:32:47 PDT 2014; main]: drop 100% deleted segments: _4(4.6):c1/1\n\n\n\nThis output does not appear when running the code above, unchanged. Hope this helps... I can't make further headway myself though. ",
            "date": "2014-09-18T06:06:19+0000"
        },
        {
            "id": "comment-14140264",
            "author": "Michael McCandless",
            "content": "OK, here's another iteration on the patch ...\n\nI have backported the fix to 4.6 and now I believe I am seeing another serious issue here. \n\nThanks Vitaly, that's a good catch (opening to an older commit point\nfrom an NRT reader that's carrying deletes in RAM), and we don't\nproperly handle that case because SegmentReader doesn't know whether\nits liveDocs came from disk (matching the delGen from the\nSegmentCommitInfo) or were carried in RAM from IndexWriter.\n\nI fixed this in this new patch by recording whether the\nSegmentReader is NRT, and then fixing the reopen logic to load\nliveDocs from disk in that case.  I folded in your example as another\ntest case (failed at first but now passes).\n\nAlso I moved the \"best-effort detection of rm -rf index\" up\nhigher... it's currently too low now, i.e. will fail to detect some\ncases that it should. ",
            "date": "2014-09-19T09:56:13+0000"
        },
        {
            "id": "comment-14143710",
            "author": "Vitaly Funstein",
            "content": "Michael,\n\nYour updated patch definitely fixes the issue. But I just wanted to understand why deletes are so special, in that - if I don't have any buffered deletes for the segment, but new documents only, the reused reader instance won't pick them up, even without the fix in place. This is because liveDocs won't capture unflushed doc ids? ",
            "date": "2014-09-22T20:06:44+0000"
        },
        {
            "id": "comment-14144569",
            "author": "Michael McCandless",
            "content": "Hi Vitaly Funstein, I'm glad the patched fixed your issue ... thanks for\ntesting.\n\nDeletes are special because 1) they are allowed to change after a\nsegment is written, and 2) IndexWriter carries them in RAM, rather\nthan writing to / reading from the filesystem, so the only\n\"point-in-time-ness\" is maintained by IW being careful to not change a\nliveDocs already paired up with a SegmentReader. ",
            "date": "2014-09-23T08:56:21+0000"
        },
        {
            "id": "comment-15325213",
            "author": "Michael McCandless",
            "content": "Woops, this almost dropped past the event horizon of my TODO list.\n\nI modernized the patch, and was able to improve how effective its check is, by switching to comparing segment IDs (a very good check that the segments changed on disk) vs what the patch used to do, comparing maxDoc. ",
            "date": "2016-06-10T20:14:13+0000"
        },
        {
            "id": "comment-15326627",
            "author": "ASF subversion and git services",
            "content": "Commit 664e39292bd0a90ed6f20debc872ab74a1d7294f in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=664e392 ]\n\nLUCENE-5931: detect when segments were (illegally) replaced when re-opening an IndexReader ",
            "date": "2016-06-12T20:57:08+0000"
        },
        {
            "id": "comment-15326630",
            "author": "ASF subversion and git services",
            "content": "Commit 6b0b119074f4cd32adc2388fbcc01f2aa70c7d5d in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b0b119 ]\n\nLUCENE-5931: detect when segments were (illegally) replaced when re-opening an IndexReader ",
            "date": "2016-06-12T21:01:41+0000"
        },
        {
            "id": "comment-15326632",
            "author": "Michael McCandless",
            "content": "Thanks Adrien Grand for pinging me about this almost lost issue! ",
            "date": "2016-06-12T21:02:04+0000"
        },
        {
            "id": "comment-15439046",
            "author": "Michael McCandless",
            "content": "Bulk close resolved issues after 6.2.0 release. ",
            "date": "2016-08-26T14:00:36+0000"
        }
    ]
}