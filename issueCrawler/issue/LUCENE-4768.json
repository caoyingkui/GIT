{
    "id": "LUCENE-4768",
    "title": "Child Traversable To Parent Block Join Query",
    "details": {
        "components": [
            "core/query/scoring"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Hi everyone!\n\nLet me describe what i am trying to do:\nI have hierarchical documents ('car model' as parent, 'trim' as child) and use block join queries to retrieve them. However, i am not happy with current behavior of ToParentBlockJoinQuery which goes through all parent childs during nextDoc call (accumulating scores and freqs).\n\nConsider the following example, you have a query with a custom post condition on top of such bjq: and during post condition you traverse scorers tree (doc-at-time) and want to manually push child scorers of bjq one by one until condition passes or current parent have no more childs.\n\nI am attaching the patch with query(and some tests) similar to ToParentBlockJoin but with an ability to traverse childs. (i have to do weird instance of check and cast inside my code) This is a draft only and i will be glad to hear if someone need it or to hear how we can improve it. \n\nP.s i believe that proposed query is more generic (low level) than ToParentBJQ and ToParentBJQ can be extended from it and call nextChild() internally during nextDoc().\n\nAlso, i think that the problem of traversing hierarchical documents is more complex as lucene have only nextDoc API. What do you think about making api more hierarchy aware? One level document is a special case of multi level document but not vice versa. WDYT?\n\nThanks in advance.",
    "attachments": {
        "LUCENE-4768-draft.patch": "https://issues.apache.org/jira/secure/attachment/12568767/LUCENE-4768-draft.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-11T08:56:15+0000",
            "content": "Hi Vadim, what kind of custom post conditions you have here in mind? The general approach with the TPBJQ is to wrap the child query with for example a filtered query, that filters out the child docs you're not interested in.  ",
            "author": "Martijn van Groningen",
            "id": "comment-13575683"
        },
        {
            "date": "2013-02-11T09:10:57+0000",
            "content": "Hi, it's a very long story, but in a few words i have query like\nTPBQJ(type:parent;\n    +type:child +(f1:A or f1:B or f2:A or f2:B)\n)\nand then i want to have both A and B in my match, so when i hit a doc i traverse matched scorers and execute AB coverage check. And if i find such children, i skip other childs and go to the next parent doc. It's very tricky, i know.\n\nBut the general idea i talking about is that traversing all childs in nextDoc sometimes can be a waste of time. Moreover i don't see any problems to have low level child traversable query as a base and regular tpbjq as a special case. \n ",
            "author": "Vadim Kirilchuk",
            "id": "comment-13575689"
        },
        {
            "date": "2013-02-11T10:01:18+0000",
            "content": "I don't really follow what you are trying to achieve with the attached patch. Why wouldn't the following be sufficient?\n\nTPBQJ(type:parent;\n  +type:child +(f1:A or f1:B or f2:A or f2:B) +(A AND B)\n)\n\n\nThis way only child docs with A and B are processed in the TPBJQ.  ",
            "author": "Martijn van Groningen",
            "id": "comment-13575713"
        },
        {
            "date": "2013-02-11T10:33:00+0000",
            "content": "Because when i have more fields and values - query becomes a real huge mess tree which is slow and has duplicate leafs. Also i have cases like (f1: AB or f1:A or f1:B or f2: AB or f2:A or f2:B), where AB is compound. So, i need to have 'clever' post constraint instead of playing around with the query itself.\n\nAnyway, let's come back to what i am trying to achieve by attached patch. If i use ToParentBJQ i have no chance to traverse childs manually and i have to go through all childs in nextDoc, but if i have many-many childs for single parent and first child is enough for my post condition i can get a speedup. And as i said this query is more low level and current TPBJQ behavior can easily be implemented with it. I already said in description that i want to know if anyone needs this too... ",
            "author": "Vadim Kirilchuk",
            "id": "comment-13575719"
        },
        {
            "date": "2013-02-11T11:33:25+0000",
            "content": "As with any discussion about nested queries you need to be very clear about the required logic. When you talk about matching f1:A or f1:B - are we talking about matches on the same child doc or possibly matches on different child docs of the same parent? The examples don't make this clear.\nIf we assume your child-based criteria is focused on examining the contents of single children (as opposed to combining f1:A on one child doc with f1:B on a different child doc) then a BooleanQuery that combines these child query elements will already be sufficient for skipping through children.\n\nNot really sure what you are trying to optimize anyway with skipping - parent-child combos are limited to what fits into a single segment which is in turn limited by RAM. You don't generally get parents with \"many many\" children because of these constraints. The \"nextDoc\" calls you are trying to skip are related to a compressed block of child doc IDs (gap encoded varints) that are read off disk in 1K chunks (if I recall default Directory settings correctly). The chances are high that the limited number of child docIDs that belong to each parent are already in RAM as part of normal disk access patterns so there is no real saving in disk IO. Are you sure this is a performance bottleneck?\n\n ",
            "author": "Mark Harwood",
            "id": "comment-13575740"
        },
        {
            "date": "2013-02-11T12:05:10+0000",
            "content": "Right, ORs are about matches on same child doc. Agree that example miss this important thing.\nI also agree that child query will skip non-matching childs, but it's worth to mention that my query is full of ORs and it will hit many childrens.\n\nWhat am i trying to optimize...it is not about speed:\nMy post constraint code have to traverse matched scorers tree and gather information about current hit - i need to know field and text for each matched leaf scorer (i mean TermQuery). Current ToParent BlockJoinScorer doesn't provide me with such information, to do so it have to accumulate leaf scorers info internally during nextDoc for each matched child. But with ChildTraversable query i am able to check child scorers directly when i got a match. I just need more control over scorers. What do you think? \n\nAnd thanks for the detailed explanation, Mark!\n\n\n\n ",
            "author": "Vadim Kirilchuk",
            "id": "comment-13575749"
        },
        {
            "date": "2013-02-11T15:14:22+0000",
            "content": "Still not sure what problem you are trying to solve. \ni need to know field and text for each matched leaf scorer \n\nWhy? For scoring purposes? ToParentBJQ has a configurable ScoreMode to control if you want the max, avg or sum of the child matches rolled into the combined parent score. Is that insufficient control for your needs? ",
            "author": "Mark Harwood",
            "id": "comment-13575825"
        },
        {
            "date": "2013-02-11T15:36:01+0000",
            "content": "Ok, let me tell you: \ni have a search phrase \"Saturn Sky Blue Sedan\"\ni have model \"Saturn Sky\" with trim color:\"Blue\", bodyStyle:\"Sedan\"\nalso i have model \"Saturn Astra\" with trim color:\"Sky Blue\", bodyStyle: \"Sedan\"\n\nThe result that i expect is result of following query \nresult = Saturn AND ((Sky AND ((Blue AND Sedan) OR 'Blue Sedan')) OR ('Sky Blue' AND Sedan) OR 'Sky Blue Sedan' ) \n    OR ('Saturn Sky' AND ((Blue AND Sedan) OR 'Blue Sedan') OR ('Saturn Sky Blue' AND Sedan) OR ('Saturn Sky Blue Sedan')\nwow..this query tree grows very fast =)\n\ni am trying to achieve the same result but without using complex query with a post constraint that can verify that matched terms can cover my phrase.\nSo, if i have matched 'Sky Blue' and 'Sedan' in my child or if i have matched 'Sky' and 'Blue' and 'Sedan' in my child i can check with my post constraint that i actually got a match for the phrase. \n\nTo accomplish this task i need to know field and text of each matched leaf scorer. This is not about scoring.. ",
            "author": "Vadim Kirilchuk",
            "id": "comment-13575841"
        },
        {
            "date": "2013-02-11T16:11:06+0000",
            "content": "OK - this problem seems to be about an ill-defined user query (\"Saturn sky blue Sedan\" with no explicit fields) being executed against a well-defined schema (cars with manufacturers, model names and bodyStyles that also have trims with colours).\n\nIf that's the case you have a heap of problems here which aren't necessarily related to the \"block join\" implementation. One example - IDF ranking being what it is, if a manufacturer like Ford create a model called the \"Blue\" or you have bad data entry that has an example of this value stored in the wrong field then Lucene will naturally rank model:blue higher than color:blue because of the scarcity of the token \"blue\" in that field context. That's almost the inverse of what you want.\n\nA couple of suggestions for \"field-less\" queries like your example of \"Saturn sky blue sedan\"\n1) Target the query on an unstructured \"onebox\" field that holds indexed content from all fields to achieve a more balanced IDF score.\n2) Tokenize each item in the query string and find a \"most likely\" field for each search term by examining doc frequencies e.g. color:blue vs modelName:blue etc. Augment the \"onebox\" query in 1) with the most-likely-field interpretation for each word in the query string if it has sufficient doc frequency.\n\n\n\n ",
            "author": "Mark Harwood",
            "id": "comment-13575864"
        },
        {
            "date": "2013-02-11T18:01:30+0000",
            "content": "Thanks for suggestions, Mark!\n\nI know about the problems you mentioned and there are several solutions for them, however it is topic for another discussion. I just wanted to show you, where i faced the problem related to \"block-join\". \n\nMaybe it is not a problem at all (at least i solved it for myself), it seems that i need to find more common case when you need to traverse childs manually..\n\nThanks again and let me think about such case.  ",
            "author": "Vadim Kirilchuk",
            "id": "comment-13575939"
        },
        {
            "date": "2013-09-11T10:37:16+0000",
            "content": "As i didn't came up with a more meaningful example, i am closing the issue. Thanks for your attention. ",
            "author": "Vadim Kirilchuk",
            "id": "comment-13764193"
        }
    ]
}