{
    "id": "LUCENE-2140",
    "title": "TopTermsScoringBooleanQueryRewrite minscore",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "when using the TopTermsScoringBooleanQueryRewrite (LUCENE-2123), it would be nice if MultiTermQuery could set an attribute specifying the minimum required score once the Priority Queue is filled. \n\nThis way, FilteredTermsEnums could adjust their behavior accordingly based on the minimal score needed to actually be a useful term (i.e. not just pass thru the pq)\n\nAn example is FuzzyTermsEnum: at some point the bottom of the priority queue contains words with edit distance of 1 and enumerating any further terms is simply a waste of time.\nThis is because terms are compared by score, then termtext. So in this case FuzzyTermsEnum could simply seek to the exact match, then end.\n\nThis behavior could be also generalized for all n, for a different impl of fuzzyquery where it is only looking in the term dictionary for words within edit distance of n' which is the lowest scoring term in the pq (they adjust their behavior during enumeration of the terms depending upon this attribute).\n\nOther FilteredTermsEnums could make use of this minimal score in their own way, to drive the most efficient behavior so that they do not waste time enumerating useless terms.",
    "attachments": {
        "LUCENE-2140.patch": "https://issues.apache.org/jira/secure/attachment/12427823/LUCENE-2140.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-10T07:00:23+0000",
            "content": "I would add this extra seeting to BoostAttribute itsself, because it correlates with the retunred boost. This way the attribute is used in two directions. The only thing:\n\n\tclear() should leave this setting untouched\n\tequals and hashcode maybe should also ignore this, too\n\tthe default will be Float.NEGATIVE_INFINITY\n\n\n\nThe code to support this is added into the newest patch of LUCENE-2123 with few lines, as it now also did not even try to insert uncompetitive hits into the PQ. The TermCollector would be changed from interface to abstract class that has a protected final accessor to the boostAttr. But for now, we should wait with adding this to BoostAttr. ",
            "author": "Uwe Schindler",
            "id": "comment-12788547"
        },
        {
            "date": "2009-12-10T10:28:51+0000",
            "content": "I would add this extra seeting to BoostAttribute itsself,\n\n+1\n\nSo BoostAttr would have something like set/getMinCompetiveValue or something?\n ",
            "author": "Michael McCandless",
            "id": "comment-12788652"
        },
        {
            "date": "2009-12-10T10:35:30+0000",
            "content": "This same sort of optimization would be interesting to explore for Lucene's sorting, btw.\n\nEG, say I'm sorting by an int field, keeping top 10 resuls, and, I'm collecting alot of hits.  I see at some point that the \"bottom\" of the queue has int value 7.  At this point, because the int[] from FieldCache is RAM resident, it'd likely be faster, possibly much faster for complex queries, to jump into the field cache, skip forward until you find a doc that has < 7 as its value, and ask the Scorer to advance to that doc.\n\nIe, there comes a time in the search where the int value of that field is a more performant way to drive the scoring.\n\nI wonder if sorting by relevance could do something similar... eg if we know at some point the worst (bottom) relevance in our queue is 2.0, can any Scorer out there somehow use that info to efficiently skip forward.  Maybe only TermScorer, when norms aren't in use, though... ",
            "author": "Michael McCandless",
            "id": "comment-12788656"
        },
        {
            "date": "2009-12-12T14:56:40+0000",
            "content": "Here the patch.\n\nRobert: Is this what you need? Any better method names? ",
            "author": "Uwe Schindler",
            "id": "comment-12789749"
        },
        {
            "date": "2009-12-12T15:04:34+0000",
            "content": "Maybe the method should have a better name instead of minXXXX: This is not the minimum possible boost, that would go into the PQ, it is the largest boost that would not go into the PQ (so the check in the enum should be: accept term only if its boost is > boost hint). ",
            "author": "Uwe Schindler",
            "id": "comment-12789751"
        },
        {
            "date": "2009-12-12T15:37:38+0000",
            "content": "minCompetitiveBoost?  minRequiredBoost? ",
            "author": "Michael McCandless",
            "id": "comment-12789754"
        },
        {
            "date": "2009-12-12T15:47:05+0000",
            "content": "The problem with minCompetitiveBoost/minRequiredBoost is, that exactly that boost is not competitive, it must be slightly larger... ",
            "author": "Uwe Schindler",
            "id": "comment-12789755"
        },
        {
            "date": "2009-12-12T16:40:33+0000",
            "content": "get/setMaxNonCompetitiveBoost() ? ",
            "author": "Uwe Schindler",
            "id": "comment-12789762"
        },
        {
            "date": "2009-12-12T16:43:59+0000",
            "content": "... get/setYouMustBeTallerThanThisToRide() ",
            "author": "Robert Muir",
            "id": "comment-12789764"
        },
        {
            "date": "2009-12-12T17:47:51+0000",
            "content": "get/setMaxNonCompetitiveBoost() ?\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-12789772"
        },
        {
            "date": "2009-12-12T18:03:40+0000",
            "content": "Patch with further access modifier changes and new method name & javadocs. ",
            "author": "Uwe Schindler",
            "id": "comment-12789774"
        },
        {
            "date": "2009-12-14T10:38:05+0000",
            "content": "I will commit this patch later today. ",
            "author": "Uwe Schindler",
            "id": "comment-12790084"
        },
        {
            "date": "2009-12-14T13:27:21+0000",
            "content": "Committed revision: 890308\n\nThanks all! ",
            "author": "Uwe Schindler",
            "id": "comment-12790141"
        }
    ]
}