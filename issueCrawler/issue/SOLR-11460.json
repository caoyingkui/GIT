{
    "id": "SOLR-11460",
    "title": "review <luceneMatchVersion> values used in test-files",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Noticed that different test files use (unexpectedly) different <luceneMatchVersion> values. Details to follow.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-10T17:00:37+0000",
            "content": "\ngit grep -n \"<luceneMatchVersion>.*</luceneMatchVersion>\" | grep /test-files/ | sed 's/.*\\(<luceneMatchVersion.*luceneMatchVersion>\\).*/\\1/g' | sort | uniq -c\n140 <luceneMatchVersion>${tests.luceneMatchVersion:LATEST}</luceneMatchVersion>\n  9 <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>\n  5 <luceneMatchVersion>6.0.0</luceneMatchVersion>\n  1 <luceneMatchVersion>8.0.0</luceneMatchVersion>\n  1 <luceneMatchVersion>LUCENE_4_1</luceneMatchVersion>\n\n\n\n\n\n\tThe three <luceneMatchVersion>6.0.0</luceneMatchVersion> usages in solr/contrib/ltr are unintended - SOLR-11461 to change away from 6.0.0 to LATEST instead.\n\n\n\n\n\tThe two <luceneMatchVersion>6.0.0</luceneMatchVersion> usages in solr/solrj surprised me - not sure if they are intended and/or required?\n\n\n\n\n\tThe <luceneMatchVersion>LUCENE_4_1</luceneMatchVersion> in solrconfig-implicitproperties.xml - could it be changed to <luceneMatchVersion>${tests.luceneMatchVersion:LATEST}</luceneMatchVersion> instead?\n\n\n\n\n\tIs there a difference between tests.luceneMatchVersion:LATEST and tests.luceneMatchVersion:LUCENE_CURRENT or could we standardise on the former? Based on LUCENE-5901 I think the answers are \"no\" and \"yes\".\n\t\n\t\tstep 1: replace the remaining nine LUCENE_CURRENT usages\n\t\tstep 2: change ant -validate-source-patterns (or similar) to disallow tests.luceneMatchVersion:LUCENE_CURRENT or even to allow only tests.luceneMatchVersion:LATEST and 8.0.0 (on master) or 7.0.0 (on branch_7x) etc.\n\t\n\t\n\n\n\nAdditional thoughts on this and/or help making changes welcome. Thanks! ",
            "author": "Christine Poerschke",
            "id": "comment-16198966"
        },
        {
            "date": "2017-10-10T17:06:31+0000",
            "content": "We probably want some testing of backwards compatibility using a previous match version, but that should be explicitly called out as such. ",
            "author": "Mike Drob",
            "id": "comment-16198979"
        },
        {
            "date": "2017-10-10T17:15:48+0000",
            "content": "FYI the dev-tools/scripts/addVersion.py script, which is run by L/S release managers, updates the <luceneMatchVersion> in example configs - maybe it should do the same in test configs too?:\n\n\ndef update_example_solrconfigs(new_version):\n  print('  updating example solrconfig.xml files')\n  matcher = re.compile('<luceneMatchVersion>')\n\n  paths = ['solr/server/solr/configsets', 'solr/example', 'solr/core/src/test-files/solr/configsets/_default']\n  for path in paths:\n    if not os.path.isdir(path):\n      raise RuntimeError(\"Can't locate configset dir (layout change?) : \" + path)\n    for root,dirs,files in os.walk(path, onerror=onerror):\n      for f in files:\n        if f == 'solrconfig.xml':\n          update_solrconfig(os.path.join(root, f), matcher, new_version)\n\n\n\nFor test files it could be more sophisticated than the above, e.g. to only update numeric versions and leave expressions involving LATEST as-is. ",
            "author": "Steve Rowe",
            "id": "comment-16198995"
        },
        {
            "date": "2017-10-10T17:30:41+0000",
            "content": "... dev-tools/scripts/addVersion.py ... updates the <luceneMatchVersion> in example configs - maybe it should do the same in test configs too? ... For test files it could be more sophisticated ... to only update numeric versions and leave expressions involving LATEST as-is.\n\n+1 ",
            "author": "Christine Poerschke",
            "id": "comment-16199033"
        },
        {
            "date": "2017-10-10T17:52:23+0000",
            "content": "step 2: change ant -validate-source-patterns (or similar) to disallow tests.luceneMatchVersion:LUCENE_CURRENT or even to allow only tests.luceneMatchVersion:LATEST and 8.0.0 (on master) or 7.0.0 (on branch_7x) etc.\n\nSolr's validate target invokes check-example-lucene-match-version, which looks for valid values in example configs - this could be broadened or copied/modified to address test configs. ",
            "author": "Steve Rowe",
            "id": "comment-16199074"
        },
        {
            "date": "2017-10-10T18:06:10+0000",
            "content": "FYI the dev-tools/scripts/addVersion.py script, ... maybe it should do the same in test configs too?:\n\nWhy wouldn't we just use LATEST in all cases in that situation?\n\nthe only reason i can think of for not having LATEST in all our test configs is \u2013 as Mike alluded to \u2013 explicit tests that we can correctly parse an (older) numeric value into a costant. That sort of testing can be done with a single-purpose config that uses a sysprop set by the test itself dynamically based on the available values in the Version class\n\nSolr's validate target invokes ... this could be broadened or copied/modified to address test configs.\n\n+1 ",
            "author": "Hoss Man",
            "id": "comment-16199109"
        }
    ]
}