{
    "id": "LUCENE-4463",
    "title": "Add support for running the same test method/class many times with different class seeds",
    "details": {
        "components": [
            "general/build"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Wish",
        "resolution": "Incomplete",
        "status": "Resolved"
    },
    "description": "I have a shell script for this, mike has a python script, its annoying \n\nI want to do something like this:\n\nant beast -Dtestcase=XXXX -Dtestmethod=YYYY -Diterations=100\n\nI would be happy with a simple loop that just invokes 'test' somehow: getting a fresh new JVM to each iteration is desirable anyway (so you get fresh codecs, etc). \n\nthe -Dtests.iters is not really useful for this because it does not allow -Dtestmethod and it does not give a fresh jvm.\n\nbonus points if it can use multiple jvms at the same time though",
    "attachments": {
        "LUCENE-4463.patch": "https://issues.apache.org/jira/secure/attachment/12548059/LUCENE-4463.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-05T21:23:26+0000",
            "content": "As discussed in GTalk, we can do this with a simple groovy script again. I will think about it, should be 6 lines of code. ",
            "author": "Uwe Schindler",
            "id": "comment-13470672"
        },
        {
            "date": "2012-10-05T21:27:52+0000",
            "content": "Here is my current script, just so you see:\n\n\n#!/bin/bash\n> /home/rmuir/log.txt\nx=0\nwhile [ $x -lt 1000 ]\ndo\n  echo \"test iteration number $x\"\n  ant test -Dtestcase=TestFoo -Dtests.method=testBar >> /home/rmuir/log.txt 2>&1 \n  x=$(( $x + 1 ))\ndone\n\n\n\nI edit this every time i need to use it and then just use 'grep -i failed log.txt' to look for failures.\none problem is it fires up ant, calls resolve,compile,compile-tests all this stuff each time. this makes it really slow.\nso if it could work from ant directly i think it would be much more efficient. ",
            "author": "Robert Muir",
            "id": "comment-13470678"
        },
        {
            "date": "2012-10-05T21:30:12+0000",
            "content": "you can do:\n\nant test -Dtests.dups=100 -Dtestcase=XXXX -Dtestmethod=YYYY\n\nIt will respin the suite/test 100 times. The global starting seed will be identical for each suite though (because they have exactly the same name). If you want different seeds each time there is no way to do this other than re-running the task (junit4) 100 times using a script or something. ",
            "author": "Dawid Weiss",
            "id": "comment-13470681"
        },
        {
            "date": "2012-10-05T21:35:38+0000",
            "content": "There are two use cases:\n1. you have a seed: CAFE0000:DEADBEEF from the \"reproduce-with\" but it doesnt reproduce well. so you want to run that method like 1000 times.\n2. you want a new seed each time, because you sense there might be bugs out there that you don't yet know about.\n\nI think in this case i had #2 in mind, but maybe this test.dups works for #1? I havent tried this yet. ",
            "author": "Robert Muir",
            "id": "comment-13470690"
        },
        {
            "date": "2012-10-05T21:44:05+0000",
            "content": "Just to be clear...\n\nthe -Dtests.iters is not really useful for this because it does not allow -Dtestmethod and it does not give a fresh jvm.\n\n-Dtests.iters definitely works with -Dtestmethod.\n\nfrom test-help...\n\n\n     [echo] # Repeats a given test N times (note the filters - individual test\n     [echo] # repetitions are given suffixes, ie: testFoo[0], testFoo[1], etc...\n     [echo] # so using testmethod or tests.method ending in a glob is necessary\n     [echo] # to ensure iterations are run).\n     [echo] ant test -Dtests.iters=N -Dtestcase=ClassName -Dtestmethod=mytest\n     [echo] ant test -Dtests.iters=N -Dtestcase=ClassName -Dtests.method=mytest*\n     [echo] \n     [echo] # Repeats N times but skips any tests after the first failure or M\n     [echo] # initial failures.\n     [echo] ant test -Dtests.iters=N -Dtests.failfast=yes -Dtestcase=...\n     [echo] ant test -Dtests.iters=N -Dtests.maxfailures=M -Dtestcase=...\n\n ",
            "author": "Hoss Man",
            "id": "comment-13470694"
        },
        {
            "date": "2012-10-05T22:24:38+0000",
            "content": "Just to be clear...\n\nIt really doesnt.\n\nI'll take the (hard to reproduce seed) from http://sierranevada.servebeer.com/job/lucene40-beaster/1327/consoleText, and add -Dtests.iters=100 to it:\n\n\nBUILD FAILED\n/home/rmuir/workspace/lucene_solr_4_0/lucene/build.xml:49: The following error occurred while executing this line:\n/home/rmuir/workspace/lucene_solr_4_0/lucene/common-build.xml:1142: The following error occurred while executing this line:\n/home/rmuir/workspace/lucene_solr_4_0/lucene/common-build.xml:756: You are attempting to use 'tests.iters' in combination with a 'tests.method' value with does not end in a '*' -- This combination makes no sense, because the 'tests.method' filter will be unable to match the synthetic test names generated by the multiple iterations.\n\nTotal time: 2 seconds\n\n ",
            "author": "Robert Muir",
            "id": "comment-13470725"
        },
        {
            "date": "2012-10-05T22:26:54+0000",
            "content": "Here is a trivial patch doing this (it uses a for-loop of <antcall/>). The reason why doing this is:\n\n\tThe naive approach is to simple use project.executeTarget(), but on the second run of the same target, junit4 complains about properties set from the previous run.\n\tThis approach unfortunately runs all dependencies over and over, as <antcall/> internally creates a \"sub-project\", inherits all properties currently set and then executes the target in this isolated environment. No way around that \n\tThis patch works everywhere where you can call \"ant test\" (except top-level as it does not import common-build.xml.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13470730"
        },
        {
            "date": "2012-10-05T22:31:07+0000",
            "content": "I'll take the (hard to reproduce seed) from http://sierranevada.servebeer.com/job/lucene40-beaster/1327/consoleText, and add -Dtests.iters=100 to it:\n\nThis is the same I get with the simple script using project.executeTarget() ",
            "author": "Uwe Schindler",
            "id": "comment-13470736"
        },
        {
            "date": "2012-10-05T22:33:06+0000",
            "content": "Oh patch seems obsolete, tests.dups is enough... ",
            "author": "Uwe Schindler",
            "id": "comment-13470738"
        },
        {
            "date": "2012-10-05T22:34:18+0000",
            "content": "\nyou can do:\n\nant test -Dtests.dups=100 -Dtestcase=XXXX -Dtestmethod=YYYY\n\nIt will respin the suite/test 100 times. The global starting seed will be identical for each suite though (because they have exactly the same name). If you want different seeds each time there is no way to do this other than re-running the task (junit4) 100 times using a script or something.\n\n\ntest:\n[junit4:junit4] <JUnit4> says cze\u015b\u0107! Master seed: 968CB4DA24E595DE\n[junit4:junit4] Executing 10 suites with 4 JVMs.\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.lucene.TestDemo\n[junit4:junit4] OK      0.54s J3 | TestDemo.testDemo\n[junit4:junit4] Completed on J3 in 1.09s, 1 test\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.lucene.TestDemo\n[junit4:junit4] OK      0.50s J2 | TestDemo.testDemo\n[junit4:junit4] Completed on J2 in 1.05s, 1 test\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.lucene.TestDemo\n[junit4:junit4] OK      0.46s J0 | TestDemo.testDemo\n[junit4:junit4] Completed on J0 in 0.98s, 1 test\n...\n\n\n\nThis is really cool and fast especially since it gets multiple threads. I wish there was a way to get different seeds each time: \nwhat do you mean when you say each suite has exactly the same name? Could there be an option that somehow wraps each suite\nwith a \"fake name\" (e.g. TestDemo-1, TestDemo-2) to trick it into getting different ones?\n ",
            "author": "Robert Muir",
            "id": "comment-13470739"
        },
        {
            "date": "2012-10-05T22:35:18+0000",
            "content": "\nOh patch seems obsolete, tests.dups is enough...\n\nIts not enough yet: because as Dawid says, each time you run it, it currently gets the same seed.\n\nThis is what i want to see if we can workaround  ",
            "author": "Robert Muir",
            "id": "comment-13470741"
        },
        {
            "date": "2012-10-05T22:42:32+0000",
            "content": "I'll take the (hard to reproduce seed) from http://sierranevada.servebeer.com/job/lucene40-beaster/1327/consoleText, and add -Dtests.iters=100 to it:\n\nyou said \"because it does not allow -Dtestmethod\" i said \"-Dtests.iters definitely works with -Dtestmethod.\" ... the reproduce line noted in the url you mentioned doesn't use \"-Dtestmethod\" \u2013 it uses \"-Dtests.method\" which is why you get the helpful error that you need to add a \"*\" to that in order to use tests.iters (which is also what it said in the test-help output i pasted)\n\nif you can settle for reusing the same JVM, tests.iters combined with testmethod (or tests.method=...*) will give you different test seeds everytime \u2013 only the global seed will be the same \n\n\nhossman@frisbee:~/lucene/dev/lucene/core$ ant test -Dtestcase=TestDemo -Dtestmethod=testDemo -Dtests.iters=100\n...\ntest:\n    [mkdir] Created dir: /home/hossman/lucene/dev/lucene/build/core/test\n[junit4:junit4] <JUnit4> says \u00a1Hola! Master seed: 22F7073C01E2726A\n[junit4:junit4] Executing 1 suite with 1 JVM.\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.lucene.TestDemo\n[junit4:junit4] OK      0.26s | TestDemo.testDemo {#0 seed=[22F7073C01E2726A:5D5BBB89303F587A]}\n[junit4:junit4] OK      0.02s | TestDemo.testDemo {#1 seed=[22F7073C01E2726A:E90D077504FD9356]}\n[junit4:junit4] OK      0.02s | TestDemo.testDemo {#2 seed=[22F7073C01E2726A:67E491A95539DB9D]}\n[junit4:junit4] OK      0.02s | TestDemo.testDemo {#3 seed=[22F7073C01E2726A:560A3A4C39C780B4]}\n...\n[junit4:junit4] OK      0.01s | TestDemo.testDemo {#97 seed=[22F7073C01E2726A:350464D9D520F10D]}\n[junit4:junit4] OK      0.06s | TestDemo.testDemo {#98 seed=[22F7073C01E2726A:F13956B54576EE0E]}\n[junit4:junit4] OK      0.01s | TestDemo.testDemo {#99 seed=[22F7073C01E2726A:3BAD13CC4232331D]}\n[junit4:junit4] Completed in 3.28s, 100 tests\n[junit4:junit4] \n[junit4:junit4] JVM J0:     0.49 ..     4.34 =     3.85s\n[junit4:junit4] Execution time total: 4.34 sec.\n[junit4:junit4] Tests summary: 1 suite, 100 tests\n\n ",
            "author": "Hoss Man",
            "id": "comment-13470746"
        },
        {
            "date": "2012-10-06T07:01:55+0000",
            "content": "\nif you can settle for reusing the same JVM, tests.iters combined with testmethod (or tests.method=...*) will give you different test seeds everytime \u2013 only the global seed will be the same \n\nRight, we can't really settle for that for Lucene's tests. Thats because things like Codec are set at class level, so i could run this 100000000000000 times and press commit and watch it fail because jenkins gets a different codec. And we have a lot of these, and only more being added.\n\nIts a tradeoff, sure we could set Codec per-writer e.g. in our newIndexWriterConfig instead of per-test-class, but I think it makes debugging much simpler to look at it as a \"parameterized-test-class\" at this level of Codec apis maturity so we can easily see which one the test got when it failed.\n\nSo really we need a different per-class seed too: same as you would get when doing 'ant test' in a loop with an inefficient shell script. ",
            "author": "Robert Muir",
            "id": "comment-13470936"
        },
        {
            "date": "2012-10-06T07:06:55+0000",
            "content": "Let me start from the beginning. I talked about it once but I can't find it now. \n\n1. testmethod vs. \"tests.method\"\n\nThe reason for the complication in \"testmethod\" vs. \"tests.method\" is stemming from how JUnit works. A \"test description\" must (in practice) be unique, otherwise tools just go crazy. So to make a test repeat, its name must be made unique. That's why if you do tests.iters=X every repetition of a single test method will in fact be named uniquely as:\n\ntestMethod \n{#seq seed=[...]}\n\nThese are not things just added to the report, this is a \"method name\" as JUnit Description object sees it. It's odd but it's a workaround that works and that is (as far as I'm concerned) the only one possible.\n\nSo when you use \"-Dtestname=X\" this is an alias for \"-Dtests.method=X\" which will filter out all these repeated tests (because effectively they don't match the mattern). In order to include them, you need to add a glob like: \"-Dtests.method=X*\". Hoss and I added this to the test-help to make it clear(er) a while back. \n\n2. Seeds and tests.dup\n\nThe \"master\" test seed is passed to <junit4> task once and it just stays there. Everything else is derived from it. The \"duplication\" you see is a simple trick \u2013 we just duplicate the file name on input. Because every suite gets the same random seed (mixed with its class name to make it more random across a single run), a duplicated identical suite will still get the same master seed every time. \n\nThis option was meant for accelerating a test scenario in which we want to repeat a single suite/seed combination many times and want to do it using multiple parallel JVMs.\n\n3. What Robert wants (across-jvm repetition of a single suite with a different seed each time).\n\nIs effectively impossible right now without re-spinning <junit4> with a different seed each time. \n\nI don't see I could marry all this into working with both the scenario above and with Robert wants although I admit both are useful. A script (loop) doing an antcall would work but this seems like an overkill. Fixing this at JUnit4 level isn't trivial either because the seed is currently picked even before junit4 is started (to select the target charset).\n ",
            "author": "Dawid Weiss",
            "id": "comment-13470937"
        },
        {
            "date": "2012-10-06T07:15:05+0000",
            "content": "I have two ideas but they both have shortcomings \u2013 I could make tests.dups run with different seed for each suite but they'd be the same sequence on each forked JVM (add a static field to the current class-name-mixer and just mix with the repetition of the same suite name). An alternative is to modify junit4 and do the same, but then to allow both the same seed and different seed each (different scenarios) we'd need... yet another -D option  ",
            "author": "Dawid Weiss",
            "id": "comment-13470940"
        },
        {
            "date": "2012-10-06T07:24:45+0000",
            "content": "I know its not easy: thats why its a \"wish\" task \n\nI guess I'm just basically listing what could be seen as an expert feature here, but arguably necessary if you are trying to do randomized tests.\n\nThe fact is that things dont always reproduce 100%, and you know this is definitely a failure in our tests (e.g. the current situation motivated\nme to open LUCENE-4460). But really part of random testing is you know, you dont have to try to write targeted tests but just throw hardware\nat the problem (which I'm doing... my office is really hot right now!).\n\nThe frustrating part is I think ideally you want to basically treat this whole randomized test situation like a normal deterministic unit test, you know\nlike a normal developer would have, so you know you fixed the bug, even if the test isn't great and doesnt reproduce 100%, you want to know its really\nfixed rather than taking blind stabs, waiting to see if all the computers in your house running full throttle will trip a bug in 24 hours to declare success \n\nSo I'm just basically opening this \"wish\" task to try to think of ways to make this easier and more efficient.\n\nI'd actually go so far to say the tests.iters is really outdated for lucene's tests these days (since we have so much class-level \"parameterization\"\nand we should be focusing on this tests.dups (and maybe removing the tests.iters totally). Maybe thats just particular to us though, but as I mentioned\nabove I think we show some real use cases for parameterizing the entire test class with certain things because it simplifies debugging. ",
            "author": "Robert Muir",
            "id": "comment-13470943"
        },
        {
            "date": "2012-10-06T07:37:23+0000",
            "content": "And just to give a little more background, I mean the stuff we are dealing with is really crazy in some sense.\n\nYou don't see the normal jenkins servers emitting failures: what happened is we realized we weren't really testing XYZ\nthat we thought we were testing for months: I'm trying to help make up for lost time \n\nSo all these failures you have seen this week have been typically nasty-to-debug hard-to-reproduce long-tail failures\nthat would normally take a ton of time to show up: Its just been Mike debugging and fixing and me trying to figure\nout more ways to provoke these failures in a more efficient way, like good-cop/bad-cop ",
            "author": "Robert Muir",
            "id": "comment-13470946"
        },
        {
            "date": "2012-10-06T11:20:03+0000",
            "content": "I absolutely understand. There seem to be a few recurring scenarios:\n\n\trandom test (exploring the combinations space; typically jenkins)\n\trandom test, many repetitions of a single test method, constant seed (-Dtestcase=... -Dtests.iters=... -Dtests.seed=XXX:YYY)\n\trandom test, many repetitions of a single test method, variable seed starting from a single master (-Dtestcase=... -Dtests.iters=... -Dtests.seed=XXX)\n\trandom test, many repetitions of a single suite, constant seed (-Dtestcase=... -Dtests.dups=... -Dtests.seed=...); this also applies for repeating a single test method within a suite but accelerated to run on multiple cores if one has many.\n\trandom test, many repetitions of a single suite, random seed (-Dtestcase=... -Dtests.dups=...).\n\n\n\nWe currently seem to have all these except for the last one. I have a working patch in my head, I'll attach shortly.\n\nBtw. I don't think there's anything I can do to make Mike NOT run his Python/SSH magic because he scatters tests across a farm of machines... I plan to do this for junit4 around year 2020, he, he. Not that it's very complicated technically but it'd require a lot of refactorings and then testing for potential infrastructure problems, detecting hung processes/sockets/jvms, etc.\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13470975"
        },
        {
            "date": "2012-10-06T11:32:37+0000",
            "content": "Btw. I don't think there's anything I can do to make Mike NOT run his Python/SSH magic because he scatters tests across a farm of machines... I plan to do this for junit4 around year 2020, he, he. Not that it's very complicated technically but it'd require a lot of refactorings and then testing for potential infrastructure problems, detecting hung processes/sockets/jvms, etc.\n\nI dont think you need to do that: He should install Jenkins on his farmhouse machine and then setup a slave in the GUI for every combine harvester operated by his slaves. He can then create a job, not bound to a specific node and run it on all slaves in parallel. Very easy to setup, the SSH-Magic is included in Jenkins (\"dumb slave \"): Jenkins connects via SSH to the slave, copies the slave.jar via scp and starts the jenkins cows. On the dairies you don\u2019t need to setup anything beyond a VM in $PATH. ",
            "author": "Uwe Schindler",
            "id": "comment-13470976"
        },
        {
            "date": "2012-10-06T12:08:46+0000",
            "content": "Yeah, I'm sure Mike will stick to his SSH scripts though \n\nAnyway, my first idea won't work. The seed decorator has to have a constant mix function for a given class \u2013 it cannot change over time for the same time because then you wouldn't know the actual seed (and be able to repeat it) if a failure happened at iteration > 1.\n\nI'll try with my second idea which requires modification to the runner. The problem again is that this involves a longer cycle of releasing via maven, etc.  ",
            "author": "Dawid Weiss",
            "id": "comment-13470980"
        },
        {
            "date": "2012-10-06T12:53:49+0000",
            "content": "The \"scatter tests across a bunch of networked machines\" script is here: http://code.google.com/a/apache-extras.org/p/luceneutil/source/browse/runRemoteTests.py ... it just uses randomizedrunner to execute the tests, but ssh to distribute each test case to the N machines.  All JVMs (N per remote machine) pull from a single shared tasks queue, in order of slowest test to fastest test ... it communicates with randomizedrunner using its nice stdin/.events \"API\" \n\nIt runs [nearly!] all Lucene/Solr tests across N machines and reports any failures ... the source code is scary and has hardwired constants for my env ... but it makes running all tests wicked fast.\n\nBut that's a very different use case than \"beasting a single test\" (this issue).  For that I use http://code.google.com/a/apache-extras.org/p/luceneutil/source/browse/repeatLuceneTest.py ... however, it's single threaded, and does not run on remote machines ... would be fun to fix that!\n\nHe should install Jenkins on his farmhouse machine and then setup a slave\n\nWell I think we need to solve this issue first (how to run many iters of a single testcase & testmethod, each w/ a different seed)?  Then I agree Jenkins could be used for distribution instead of ssh + scripts. ",
            "author": "Michael McCandless",
            "id": "comment-13470991"
        },
        {
            "date": "2012-10-06T12:58:04+0000",
            "content": "Yeah, I'm sure Mike will stick to his SSH scripts though\n\nNot if we had an efficient way to distribute tests across N JVMs running on M machines from a single queue.\n\nOne big problem w/ runRemoteTests.py is it does CLASSPATH pollution, ie the CLASSPATH it runs with is the union of all CLASSPATHs for all tests ... this is bad because then it fails to catch dependency problems, or cases when module X shouldn't use module Y but does.  This also causes certain tests to false fail ... ",
            "author": "Michael McCandless",
            "id": "comment-13470993"
        },
        {
            "date": "2012-10-06T13:45:30+0000",
            "content": "Not if we had an efficient way to distribute tests across N JVMs running on M machines from a single queue.\n\nYeah... I'll try to fix this issue so that you can run across N JVMs, but still locally. I don't think I'll have the time in the nearest future to work on truly distributed mode. ",
            "author": "Dawid Weiss",
            "id": "comment-13471005"
        },
        {
            "date": "2012-10-06T20:13:39+0000",
            "content": "I thought about it for a bit longer and exercised a few scenarios. The problem is that I designed everything (and I mean everything) with two ideas in mind:\n\n\tevery random element (be it a selection of components, shuffling of order or whatever) is a derivative of a single \"master\" seed. This seed is picked by <junit4> task and is then used to sort suites to be executed, pick parameters, then is passed to suites to log messages, stack traces, etc.\n\texecution of a test suite (in the sense of a single class) is isolated from anything else \u2013 any other class running before or after. So you can provide the same master seed for a single class and it should execute identically, even if it's detached from the entire sequence of suites than ran during the full test. The \"seed decorators\" that we currently use alter the master seed with a hash of the test class's name to make it different for each class running under the same master seed, but this is an independent operation \u2013 whether something ran before or after doesn't matter.\n\n\n\nThe idea of running the same suite many times with a different master seed each time conflicts with these assumptions because then every subsequent execution of the same class will not be a derivative of the master seed anymore (and will most likely depend on how many classes executed before or even be random). \n\nLet me illustrate this on an example. Let's say the master seed is XXX; we use this seed to pick file.encoding and for this seed it becomes UTF-8. If we now pick a random master seed (say, YYY) for concrete class and it fails, it'll report YYY back to the console. But if you ant -Dtests.seed=YYY then the selection of file.encoding will be different because, ehm, it's not XXX anymore. file.encoding has to be picked before the JVM is started so it cannot be done from within the running test runner, etc.\n\nThis is just one of the problem scenarios, there are more but I hope you get the picture.\n\nA \"clean\" solution to the problem would be to make a loop inside ant, around the contents of the test-macro (so that the entire sequence of picking the master seed, picking parameters, spawning JVMs, etc. is repeated). This isn't really going to make matters much faster because it'll fork new JVMs etc.\n\nA \"dirty\" solution is to screw the above idealistic point of view and have a seed decorator which affects the master seed before it is propagated to each suite. This will cause all the headaches mentioned above PLUS you'll have to get the failing seed directly from the failing test (stack trace or whatever other message is printed) because it won't be the master seed JUnit4 greets you with. Then you could indeed run as many concurrent instances of the same suite with random seeds as you like (JVMs reused). This does sound like super-advanced and convoluted piece of functionality for something that will be probably used pretty frequently (which means lots of wtfs on the mailing list).\n\nDon't know, really.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13471090"
        },
        {
            "date": "2016-09-29T10:02:45+0000",
            "content": "Partial workaround exists (ant beast). ",
            "author": "Dawid Weiss",
            "id": "comment-15532361"
        }
    ]
}