{
    "id": "SOLR-835",
    "title": "reduce Object creation in SearchHandler",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "CommonsHttpSolrServer is threadsafe . why create one for every request?",
    "attachments": {
        "SOLR-835.patch": "https://issues.apache.org/jira/secure/attachment/12393356/SOLR-835.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12645163",
            "date": "2008-11-05T07:48:15+0000",
            "content": "keep sa small cache of shard vs SolrServer and reuse Objects.\n\nBinaryResponseparser is default . no need to set it explicitly "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12645230",
            "date": "2008-11-05T14:40:43+0000",
            "content": "Thanks, I just removed the now-redundant setResponseParser.\n\nCommonsHttpSolrServer is a small stateless object (since we pass in the HttpClient).  Attempting to save that allocation in the context of a complete request/response over the network perhaps isn't worth it? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12645390",
            "date": "2008-11-06T03:25:55+0000",
            "content": "Attempting to save that allocation in the context of a complete request/response over the network perhaps isn't worth it?\n\nYes , it is cheap but the point is we can avoid it. \nIt creates a new Object of CommonsHttpSolrServer, BinaryResponseParser, URL, String concatenation and if a take a look at the constructor of  \n\npublic CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n\n\nit is doing so many string operations etc.\n\nConsidering the fact that the shards are always going to be few and constant over the life of a server this looked bad to me. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12650267",
            "date": "2008-11-24T18:29:17+0000",
            "content": "The previous patch had an unbounded cache. Now we have our own ConcurrentLRUCache that problem is eliminated "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12699562",
            "date": "2009-04-16T07:31:52+0000",
            "content": "it may be a micro optimization which may not be worth it "
        }
    ]
}