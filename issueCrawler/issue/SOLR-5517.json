{
    "id": "SOLR-5517",
    "title": "Return HTTP error on POST requests with no Content-Type",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "While the http spec states requests without a content-type should be treated as application/octet-stream, the html spec says instead that post requests without a content-type should be treated as a form (http://www.w3.org/MarkUp/html-spec/html-spec_8.html#SEC8.2.1).  It would be nice to allow large search requests from html forms, and not have to rely on the browser to set the content type (since the spec says it doesn't have to).",
    "attachments": {
        "SOLR-5517.patch": "https://issues.apache.org/jira/secure/attachment/12616436/SOLR-5517.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13835759",
            "date": "2013-11-30T14:26:37+0000",
            "content": "+1 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835776",
            "date": "2013-11-30T16:41:10+0000",
            "content": "-1, I don't like this automatisms. Especially as the specs don't agree (HTML vs. HTTP).\nJust the question: Which browser, not older than 15 years, still does ot send a content type?\n\nUwe "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13835779",
            "date": "2013-11-30T16:50:57+0000",
            "content": "I disagree that the http spec says unknown content-type should be application/octet stream. It does not really say this, you have to read it all in context.\n\nHTTP: (discussing content-type in general, and not POST in particular)\n\nIf and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URL used to identify the resource. If the media type remains unknown, the recipient SHOULD treat it as type \"application/octet-stream\" "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835783",
            "date": "2013-11-30T16:59:35+0000",
            "content": "As said, I disagree with this change for the same reasons why something like guessing the charset is wrong, too. This is my personal opinion, you may or may not share it. I just add: Browsers still not sending the content type, for sure also send the stuff ISO-8859-1 URL-encoded, which would be not accepted by Solr, too.\n\nMy question was: Which browsers don't support this? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13835838",
            "date": "2013-11-30T17:09:35+0000",
            "content": "What about curl commands? It is kind of an annoyance that you have to explicitly enter a Content-type. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835839",
            "date": "2013-11-30T17:10:05+0000",
            "content": "In my opinion, we should for this case not fallback to something like the crazy RAW parser (I agree, this is wrong and leads to confusion). Instead we should return a better HTTP status like:\n\n\n415 Unsupported Media Type\nThe request entity has a media type which the server or resource does not support.[2] For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n\nThis can be done by throwing SolrException with 415 as status code. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13835840",
            "date": "2013-11-30T17:10:17+0000",
            "content": "The problem can happen when users write HTTP code themselves, for example if they are using httpclient and use StringEntity(URLEncodedUtils(...)) versus URLEncodedFormEntity. They are the same, except the latter sets Content-Type to form data.\n\nThe current \"default\" when content-type is not specified returns xml with no results, which can be confusing. All the solr POST examples (e.g. upload) on the wiki tell you that you should send this header. If its missing, returning 415 Unsupported Media Type or some similar error would be another option: returning no results is hard to debug. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13835843",
            "date": "2013-11-30T17:24:08+0000",
            "content": "\nWhat about curl commands? It is kind of an annoyance that you have to explicitly enter a Content-type.\n\nCurl automatically populates this header itself (unless you change it explicitly to something else), so its no problem. Again: the problem is someone writing their own client code, they can send exact same URL/params as curl, but instead just get no results: which is really confusing. All of their parameters are silently ignored. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835845",
            "date": "2013-11-30T17:27:48+0000",
            "content": "Hi,\n\nI looked up what Jetty by default is doing, here is it: https://github.com/eclipse/jetty.project/blob/e92f44ed73453d6107a30ba42600787963c6243d/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java#L288\n\nActually it only parses the stuff if a content-type is set and the method is POST/PUT. So our code is doing the same (because we dont use Jetty's parameter decoding, as its not felxible enough with charsets). "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13835982",
            "date": "2013-12-01T08:34:49+0000",
            "content": "\nIn my opinion, we should for this case not fallback to something like the crazy RAW parser (I agree, this is wrong and leads to confusion). Instead we should return a better HTTP status like:\n415 Unsupported Media Type\n\nI like this idea.  I only want to make sure the example Robert Muir gave does not result in a confusing 200 with empty results.\n\nHere is a new patch returning 415 for a post missing content type. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835997",
            "date": "2013-12-01T10:40:14+0000",
            "content": "That looks perfect. I have not yet tested it, but from what I see: the RAW parser will no longer automatically invoked with missing content type.\n\nThere may be another bug in the raw parser, but that is another issue: The raw parser seems to ignore request parameters given in the URL query string. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836018",
            "date": "2013-12-01T12:46:51+0000",
            "content": "I checked the rawrequest parser: It adds the query string to the content. I think the bigger problem why the whole request posted by Robert did not work is the fact that by using the raw request parser, the /select handler cannot handle that. The raw request parser is only useful for update request handlers.\n\nOn the other hand: if you send some crazy non-null content type to something else than the update request handlers, they may produce the same strange results (maybe if you have a typo in the \"application/x-formdata-foo-bar\" stuff). The /select request handler should (in my opinion) check some request properties and throw an error if they don't fit the actual request. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836021",
            "date": "2013-12-01T12:58:21+0000",
            "content": "We should not allow empty content-type for any of the request parsers. The current patch only changes the StandardRequestParser. But also RawRequestParser should complain about null content type. Also stuff like MultiPart should require a Content-Type. The FormDataRequestParser is the only one correctly complaining. The MultiPart one only complains if the whole request is not a MultiPart one. But if one of the file items has no content type, it lets this through. This would also prevent possible NPEs in the RequestHandlers, because not all of them correctly check for non-null. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836029",
            "date": "2013-12-01T13:49:36+0000",
            "content": "I looked around in the RequestHandlers:\n\n\tSearchRequestHandler is the bad guy, which does not throw SolrException, if the request does not fit a \"search\". The SearchHandler should throw SolrException, if request.streams.length>0. For a search request, there should be not passed any streams. If you then have a typo in your content-type, the request handler has to throw the exception, as no streams are expected (the stream comes from the following: because the FormData parser is not invoked, the RawRequestParser then sets a single ContentStream for any remaining content type - in that case the one with typo).\n\tUpdateRequestHandler should use the new HTTP status constant here to be consistent:\n\n      if( type == null ) { // Normal requests will not get here.\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Missing ContentType\");\n      }\n      int idx = type.indexOf(';');\n      if(idx>0) {\n        type = type.substring(0,idx);\n      }\n      ContentStreamLoader loader = loaders.get(type);\n      if(loader==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported ContentType: \"\n            +type+ \"  Not in: \"+loaders.keySet());\n      }\n      if(loader.getDefaultWT()!=null) {\n        setDefaultWT(req,loader);\n      }\n      loader.load(req, rsp, stream, processor);\n\n\nWe should change that code to send the correct HTTP status (or change the status in the current patch to be BAD_REQUEST).\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836042",
            "date": "2013-12-01T15:09:12+0000",
            "content": "Here is a new patch that adds:\n\n\tUpdateRequestHandler now throws consistent HTTP status code 415 on unknown content type\n\tSearchHandler throws BAD_REQUEST, if the incomming request has content streams. Currently one test is failing because of this check, I have to figure out why this happens, maybe a test bug - the failing test TestRemoteStreams seems to do some fake requests to default select handler and passes some remote streams. Of course SearchHandler now fails on this; this is incorrect usage.\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836045",
            "date": "2013-12-01T15:14:32+0000",
            "content": "This patch removes the failing test. This one is just bogus! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836047",
            "date": "2013-12-01T15:31:51+0000",
            "content": "Instead of deleting the test, I changed it to pass if the correct error code is sent. "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13837436",
            "date": "2013-12-03T07:59:45+0000",
            "content": "Thanks for the additional checks Uwe.  I'll commit shortly. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13837438",
            "date": "2013-12-03T08:12:58+0000",
            "content": "+1 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13837479",
            "date": "2013-12-03T09:19:32+0000",
            "content": "Commit 1547322 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1547322 ]\n\nSOLR-5517: Return HTTP error on POST requests with no Content-Type "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13837867",
            "date": "2013-12-03T16:38:26+0000",
            "content": "Commit 1547467 from Ryan Ernst in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1547467 ]\n\nSOLR-5517: Return HTTP error on POST requests with no Content-Type "
        },
        {
            "author": "Paco Garcia",
            "id": "comment-13925641",
            "date": "2014-03-10T10:50:50+0000",
            "content": "Hi, \nmaybe that with this change you can\u00b4t abort anymore a dataimport  from the Admin UI?\n\nI allways get a response of  415 HTTP Code to the internal jquery invocation to abort\nPOST http://xxxx:7070/solr/collection1/dataimport?command=abort&wt=json  \n\n415 (Tipo de Medio No Soportado) \n\nrequire.js?_=4.7.0:10185\nsend require.js?_=4.7.0:10185\njQuery.extend.ajax require.js?_=4.7.0:9663\n(anonymous function) dataimport.js?_=4.7.0:348\njQuery.event.dispatch require.js?_=4.7.0:5336\nelemData.handle.eventHandle\n\nIt works with the abort command directly in the browser URL.\n\nRegards "
        },
        {
            "author": "Paco Garcia",
            "id": "comment-13925849",
            "date": "2014-03-10T16:21:00+0000",
            "content": "Quick hack:\ngo to:\n webapps\\solr\\js\\scripts\\dataimport.js \nand change POST by GET :\n\n              $.ajax\n              (\n                {\n                  url : handler_url + '?command=abort&wt=json',\n                  dataType : 'json',\n                  type: 'GET',            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n                  context: $( this ),\n                  beforeSend : function( xhr, settings )\n                  \n{\n                    span_element\n                      .addClass( 'loader' );\n                  }\n,\n OR put something inside the data like:\n\n            $.ajax\n              (\n                {\n                  url : handler_url + '?command=abort&wt=json',\n                  data : \n{\n\t\t        indent : 'true'\n\t\t  }\n,\n                  dataType : 'json',\n                  type: 'POST',\n                  context: $( this ),\n                  beforeSend : function( xhr, settings )\n\n\nRegards "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13925869",
            "date": "2014-03-10T16:36:36+0000",
            "content": "Hi,\ncan you open a new issue to fix the Admin UI? The admin UI may use POST, but it must send content-type. I think Stefan Matheis (steffkes) should fix this, by passing the \"application/json\" content type.\nIdeally this should (as you tell) send something in the body, otherwise POST is not the right HTTP method to use. "
        },
        {
            "author": "Paco Garcia",
            "id": "comment-13930065",
            "date": "2014-03-11T07:47:16+0000",
            "content": "OK SOLR-5847 "
        },
        {
            "author": "Dominik Geelen",
            "id": "comment-14117934",
            "date": "2014-09-02T06:25:21+0000",
            "content": "Hi,\n\nthis update seems to have broken the automatic mime-type detection of the ExtractingRequestHandler (Tika), which needs you to sumbit an empty (or simply none at all) content-type with your request, to trigger the detection. Even the Solr-WIKI states that explicitly specifying a content-type (stream.type) is optional, so this cannot be the intended behavior of this patch.\nThis completely broke the indexing application in our company, which heavily relies on the auto-detect feature for document indexing, and we need a workaround for this bug as soon as possible.\nDoes anyone have any suggestions on what to do until this has been fixed?\n\nRegards,\nDominik "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14223111",
            "date": "2014-11-24T16:33:47+0000",
            "content": "For a search request, there should be not passed any streams. \nI don't see why this should be the case . It makes sense to send a json payload for really complex queries than just sending GET parameters\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14223115",
            "date": "2014-11-24T16:38:33+0000",
            "content": "Hi noble, with streams we mean content streams. This does not apply to POSTed form data, whcih is decoded in a completely separate handler. But SearchRequestHandler cannot parse \"uploads\", and thats fine. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14223338",
            "date": "2014-11-24T19:17:12+0000",
            "content": "See SOLR-6658, which plans on enabling content streams for SearchRequestHandler. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14223606",
            "date": "2014-11-24T22:02:44+0000",
            "content": "Hi Yonik,\nthats fine and does not apply here. The bug handled in this issue was that SearchRequestHandler did not handle those requests, but never retruned a correct error message. If you add support for POST and content streams to SearchRequestHandler it will of course work!\nUwe "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14224634",
            "date": "2014-11-25T14:54:39+0000",
            "content": "This does not apply to POSTed form data, whcih is decoded in a completely separate handler. \n\nI'm not referring to POST form data either . \n\nBut SearchRequestHandler cannot parse \"uploads\", and thats fine.\n\nIt used to be, but we can (and we should) totally change this.  "
        },
        {
            "author": "Mark Peng",
            "id": "comment-14224664",
            "date": "2014-11-25T15:18:10+0000",
            "content": "Hi Committers,\n\nWe had confirmed that posted JSON data are rejected due to the content stream constraint (\"Search requests cannot accept content streams\") added in SearchHandler. \n\nTo clarify the related part in this patch:\n\nIndex: solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java\n===================================================================\n--- solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java\t(revision 1546817)\n+++ solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java\t(working copy)\n@@ -22,9 +22,11 @@\n import java.util.List;\n \n import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.SolrException.ErrorCode;\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.ModifiableSolrParams;\n import org.apache.solr.common.params.ShardParams;\n+import org.apache.solr.common.util.ContentStream;\n import org.apache.solr.core.CloseHook;\n import org.apache.solr.core.PluginInfo;\n import org.apache.solr.core.SolrCore;\n@@ -165,6 +167,10 @@\n   {\n     // int sleep = req.getParams().getInt(\"sleep\",0);\n     // if (sleep > 0) {log.error(\"SLEEPING for \" + sleep);  Thread.sleep(sleep);}\n+    if (req.getContentStreams() != null && req.getContentStreams().iterator().hasNext()) {\n+      throw new SolrException(ErrorCode.BAD_REQUEST, \"Search requests cannot accept content streams\");\n+    }\n+    \n     ResponseBuilder rb = new ResponseBuilder(req, rsp, components);\n     if (rb.requestInfo != null) {\n       rb.requestInfo.setResponseBuilder(rb);\n\n\n\nSuppose that the \"SearchRequestHandler\" mentioned by Uwe Schindler is the same as \"SearchHandler.java,\" we would suggest to add content type check before determining if it is reasonable to accept content streams. For example, if the incoming request is a POST with Content-Type: application/json, then it is necessary to accept the forwarding of its payload data (stored as content streams) to other search components.\n\nThank you.\n\nBest regards,\nMark Peng\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14224750",
            "date": "2014-11-25T16:19:34+0000",
            "content": "That's perfectly fine. It is just that the patch attached here is correct, because up to now SearchHandler does not accept content streams. If we change this, this is a completely separate issue. There is no bug in this patch. "
        },
        {
            "author": "Mark Peng",
            "id": "comment-14224772",
            "date": "2014-11-25T16:31:31+0000",
            "content": "Hi Uwe Schindler,\n\nGreat thanks for the clarification.\nI think it is reasonable if SearchHandler used not to consider accepting content streams. In my own opinion, changing the rule to accept content streams would allow more flexibility to handle complex queries. In our case, we designed dynamically adjust the behavior of our custom search component based on received predefined JSON data, and it works like a charm in previous version 4.5.1. But we got stuck while trying to upgrade to newer versions after 4.7. .\n\nBest regards,\nMark "
        },
        {
            "author": "Mark Peng",
            "id": "comment-14225869",
            "date": "2014-11-26T07:47:14+0000",
            "content": "Hi Uwe Schindler,\n\nI added constraint check for accepting JSON data in search requests in SOLR-6658.\nPlease kindly give your comments, thanks!\n\nBest regards,\nMark "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14227093",
            "date": "2014-11-27T01:19:13+0000",
            "content": "Uwe Schindler If a user wants to provide has own SearchHandler extending SearchHandler , he needs to completely rewrite the handleRequestBody() method. \nThis check is not really helpful to anyone. Let's remove this.  "
        }
    ]
}