{
    "id": "SOLR-9577",
    "title": "SolrConfig edit operations should not need to reload core",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Every single change done to solrconfig.xml/configoverlay.json leads to a core reload. This is very bad for performance. \n\nIdeally , If I update/add/delete a component only that one component needs to get reloaded.\n\nHow to do this?\n\nEvery component in  Solr should be able to implement an interface \n\ninterface Reloadable {\n/** When the configuration of this component is changed the core invokes this method, with the new configuration\n*/\nvoid reload(PluginInfo info);\n\n/** After a reload() is called on any component in that core , this is invoked\n*/\ndefault void postConfigChange(SolrCore core){}\n}\n\n\n\nif the component implements this interface, any change to its configuration will result in a callback to this method.\n\nif the component does not implement this interface, we should unload and the component and call any close hooks registered from the inform() method . To make this work, we will have to disable registering close hooks from anywhere else. After unloading the component, a new one created with  the new configuration",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-28T07:24:55+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "if the component does not implement this interface, we should unload and the component and call any close hooks registered from the inform() method . To make this work, we will have to disable registering close hooks from anywhere else. After unloading the component, a new one created with the new configuration\n\nIf a component does not implement Reloadable then we should just reload the core as we do today. It is much safer. Over time, people will cut over their custom plugins to be Reloadable.\n\nClose hooks are a problem with reload. IMO, the close hooks are a workaround for the fact that our plugins such as SearchComponent and RequestHandler do not have a proper close method. Let's introduce that and have Solr call them at the right time. ",
            "id": "comment-15528708"
        },
        {
            "date": "2016-09-28T10:25:04+0000",
            "author": "Noble Paul",
            "content": "IMO, the close hooks are a workaround for the fact that our plugins such as SearchComponent and RequestHandler do not have a proper close method.\n\nActually, close() is supported even today. Any component that implements java.lang.AutoCloseable is automatically given a callback when the core is shut down. Most components don't use it ",
            "id": "comment-15529198"
        },
        {
            "date": "2016-09-28T13:50:33+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "In that case, let us deprecate close hooks from 6.x and remove them completely from master. If this \"reloadable\" feature is to be added to 6.x then we should throw a UnsupportedOperationException if a plugin implementing Reloadable tries to register a close hook. ",
            "id": "comment-15529682"
        },
        {
            "date": "2016-09-29T05:55:54+0000",
            "author": "Noble Paul",
            "content": "Let's review our internal components that use closehooks and reimplement them with the close() method. ",
            "id": "comment-15531885"
        },
        {
            "date": "2016-09-30T08:37:47+0000",
            "author": "Noble Paul",
            "content": "There is another issue with reload. component 1 may rely on component 3 and 4.  So, component 1 should be notified of changes happened in other components.\n\nfor example, a searchhandler instance refers to SearchComponents. If the config api  modifies a searchcomponent, every Reloadable component must be notified after the reload is complete. I'm adding another the method to the interface ",
            "id": "comment-15535425"
        },
        {
            "date": "2016-09-30T09:56:57+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "for example, a searchhandler instance refers to SearchComponents.\n\nAre there other such examples? Should SearchHandler be changed to deal with this better e.g. currently, it keeps a list of SearchComponents objects around but the actual SearchComponent instance is looked up from the SolrCore.\n\n\n/** After a reload() is called on any component in that core , this is invoked\n*/\ndefault void postConfigChange(SolrCore core){}\n\n\n\nThis is too coarse? If we do this, maybe we can listen to changes on specific named components or by plugin class name? ",
            "id": "comment-15535584"
        },
        {
            "date": "2016-09-30T10:02:13+0000",
            "author": "Noble Paul",
            "content": "It's always better to not hold references of other components  . Ideally, It should all be looked up just in time  ",
            "id": "comment-15535596"
        },
        {
            "date": "2016-09-30T20:35:07+0000",
            "author": "Erick Erickson",
            "content": "I have to ask, \"Is this worth the effort\"? I'd expect people to be changing the config mostly at the beginning of a project, especially during development with a \"long tail\" during maintenance windows.\n\nIs the complexity/risk-of-getting-it-wrong really worth the benefit?\n\nIt certainly may be, but just askin'......\n\nProbably a distinct question from how well-behaved components should, well, behave.... ",
            "id": "comment-15537000"
        }
    ]
}