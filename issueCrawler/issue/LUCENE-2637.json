{
    "id": "LUCENE-2637",
    "title": "FSDirectory.copyBytes isn't safe for SimpleFSDirectory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/test"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.1,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "the copyBytes optimization from LUCENE-2574 is not safe for SimpleFSDirectory, but works fine for NIOFSDirectory.\n\nWith SimpleFSDirectory, the copyBytes optimization causes index corruption.\n\nsee http://www.lucidimagination.com/search/document/36d2dbfc691909d5/bug_triggered_by_testindexwriter_testrandomstoredfields for background\n\nhere are my steps to reproduce (most of the time, at least on windows):\n\n1. edit line 87 of TestIndexWriter to plugin the seed:\n    random = newRandom(3312389322103990899L);\n2. edit line 5138 of TestIndexWriter to force SimpleFSDirectory:\n    Directory dir = new SimpleFSDirectory(index);\n3. run this command:\n    ant clean test-core -Dtestcase=TestIndexWriter\n-Dtestmethod=testRandomStoredFields -Dtests.iter=10\n-Dtests.codec=\"MockVariableIntBlock(29)\"",
    "attachments": {
        "LUCENE-2637.patch": "https://issues.apache.org/jira/secure/attachment/12454113/LUCENE-2637.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-08T13:42:57+0000",
            "content": "As mentioned on the list, i think this only fails on hudson because the test uses FSDirectory.open, and somehow the issue only occurs with SimpleFSDirectory, but not NIOFSDirectory\n\nIf i comment out FSDirectory's optimized copyBytes (LUCENE-2574), the test passes every time.\nSo I think this is the root of the problem. ",
            "author": "Robert Muir",
            "id": "comment-12907212"
        },
        {
            "date": "2010-09-08T14:10:45+0000",
            "content": "Here's one suggested patch:\n\nSo the problem is that the optimized FSDirectory.copyBytes() LUCENE-2574 produces corrupt indexes with SimpleFSDirectory.\n\nI fixed the test to use newDirectory, so it won't fail just on windows with this bug.. the problem was the test used FSDirectory.open, so no unix users ever saw this.\n\nI pushed the optimized copyBytes up into NIOFSDirectory, where its safe, and restored FSDirectory's simple implementation. ",
            "author": "Robert Muir",
            "id": "comment-12907223"
        },
        {
            "date": "2010-09-08T15:16:18+0000",
            "content": "editing the issue title/description now that we understand the problem. ",
            "author": "Robert Muir",
            "id": "comment-12907246"
        },
        {
            "date": "2010-09-08T15:21:28+0000",
            "content": "related to this issue, I want to question if we should really be using FileChannel.transferFrom in FSDirectory at all.\n\nCouldn't this make SimpleFSDirectory susceptible to LUCENE-2239?\n\nWe documented on that issue that users should use SimpleFSDirectory to prevent the ClosedByInterruptException.\n\nI guess its worth considering if SimpleFSDirectory's copyBytes should simply copy byte[] and not use any NIOFS semantics. ",
            "author": "Robert Muir",
            "id": "comment-12907248"
        },
        {
            "date": "2010-09-08T15:41:59+0000",
            "content": "After testing this a lot for backing up indexes in Solr, I never found a super compelling speed benefit to NIO byte copying (and I think its actually a hit on some Windows systems).\n\nIn the end, after trying to get an NIO win for too long, we gave up and went back to straight old stream copying. ",
            "author": "Mark Miller",
            "id": "comment-12907263"
        },
        {
            "date": "2010-09-08T17:01:23+0000",
            "content": "Strange, I remember I did see performance gains using FileChannel API on Windows and Linux, especially when the copy chunk was large (>1 MB). Is this the only place where SimpleFSDir uses FileChannel? If so, then I guess not using it at all makes sense. ",
            "author": "Shai Erera",
            "id": "comment-12907312"
        },
        {
            "date": "2010-09-08T17:29:05+0000",
            "content": "I think, given LUCENE-2239, we really should not be using any NIO apis in SimpleFSDir...\n\nWe also tested .transferTo in LUCENE-1121 and had very mixed results (Windows was sometimes much slower). ",
            "author": "Michael McCandless",
            "id": "comment-12907327"
        },
        {
            "date": "2010-09-08T20:54:16+0000",
            "content": "OK, here is my updated patch.\n\nAfter thinking about this a lot:\n\n\tI removed all copyBytes optimizations completely.\n\tI don't care if the performance improves with NIO, if it causes corrupt indexes, its not worth it.\n\tI spent a ton of time debugging this, and although i can't make the previous patch i uploaded to this issue fail (that shoves the opto only into NIOFSDirectory), I feel given the issues from LUCENE-2239, given the fact this optimization causes index corruption (and has before), that the best thing to do is remove it entirely.\n\n\n\nI'd like to commit this soon, and notify the lists that any windows users of trunk/3x should reindex since they might have index corruption.\n\nI don't give the wrong impression, we should welcome optimizations to things like this, but only with solid tests, and I don't feel our suite of tests is mature enough to support this yet. ",
            "author": "Robert Muir",
            "id": "comment-12907427"
        },
        {
            "date": "2010-09-08T21:01:42+0000",
            "content": "+1, looks good! ",
            "author": "Yonik Seeley",
            "id": "comment-12907429"
        },
        {
            "date": "2010-09-08T21:28:31+0000",
            "content": "+1, this is in my opinion the only right solution. SimpleFSDir should never use NIO, to use NIO, use NIOFSDir, so transferTo and this NIO copy should only be there! ",
            "author": "Uwe Schindler",
            "id": "comment-12907440"
        },
        {
            "date": "2010-09-09T07:35:30+0000",
            "content": "Robert, you've removed copyBytes from FSDirectory entirely. I thought, and it looks like Uwe thought so too, that it should be moved to NIOFSDirectory, no? What's the point of having NIOFSDir if it cannot use NIO API? ",
            "author": "Shai Erera",
            "id": "comment-12907550"
        },
        {
            "date": "2010-09-09T07:48:51+0000",
            "content": "Robert, you've removed copyBytes from FSDirectory entirely\n\nYes, thats exactly what i did, as mentioned in my jira comment, with rationale.\n\nI thought, and it looks like Uwe thought so too, that it should be moved to NIOFSDirectory, no? What's the point of having NIOFSDir if it cannot use NIO API?\n\nWe had NIOFSDirectory in lucene 2.9/3.0 and it didnt have this optimization.\n\nI think we should take the conservative approach at the moment, as mentioned in my JIRA comment.\n\nOptimizations like this need solid tests before being committed, above and beyond this testRandomStoredFields \nthat only fails 1% of the time if the implementation is incorrect. ",
            "author": "Robert Muir",
            "id": "comment-12907553"
        },
        {
            "date": "2010-09-09T08:22:50+0000",
            "content": "I think, we should remove it completely for now to solve the bug.\n\nIf somebody is able to fix the NIO code to work in all cases (with rock-solid tests), we can reenable it again (but only in NIOFSDir). ",
            "author": "Uwe Schindler",
            "id": "comment-12907558"
        },
        {
            "date": "2010-09-09T08:31:16+0000",
            "content": "If somebody is able to fix the NIO code to work in all cases (with rock-solid tests), we can reenable it again (but only in NIOFSDir).\n\nI completely agree. \n\nI would also propose that if we go this route (we should open a separate issue if we want to do this!), \nthat we only target trunk, and not 3.x. \n\nthe backport could always happen later after we feel comfortable that the optimization is safe, \nbut i don't like that this will be the second time we have to inform users about index corruption \non our \"stable\" branch from this  ",
            "author": "Robert Muir",
            "id": "comment-12907559"
        },
        {
            "date": "2010-09-09T09:37:03+0000",
            "content": "For the record, the problem w/ the opto is that it pulls the \"unique\" FileChannel from the RandomAccessFile, positions it, and does non-positional reads.  This is not safe, because SimpleFSDir also does non-positional reads.  So eg if a BG merge is running, invoking .copyBytes when merging the fields, and at the same time another thread is eg loading a stored doc from the same open file w/ SimpleFSDIr, they conflict because they are both relying on the stateful position of RAF.\n\nNIOFSDir always does positional reads so it doesn't hit this.\n\nBut I agree we should pull the opto from 3x & trunk, open new issue to re-add it, only add it back to trunk once we have solid tests.  EG the new TestCopyBytes I added does not catch this thread-safety issue (but I think, though I didn't test, should catch the original corruption issue w/ the opto).\n\nAnd, yes, we must now notify 3x/trunk users, who uses SimpleFSDir (because they are on windows or because they explicitly instantiated it) that they may have latent index corruption and should run CheckIndex. ",
            "author": "Michael McCandless",
            "id": "comment-12907569"
        },
        {
            "date": "2010-09-09T09:55:36+0000",
            "content": "I have still the question, why do we do NIO-based optimizations in FSDir and only if both the given DataInput and this both are NIOFSIndexInput/NIOFSIndexOutput, so limit it only to the case when both involved directories are NIO. So I would move the optmization (in another issue) to NIOFSDir, and do a check \"if input instanceof NIOFSIndexInput\", in all other cases call super?\n\nI was also against the original Directory.copy() method using NIO. NIO should only be used in NIOFSDir, nowhere else. I am not sure what happens with MMapDirectory when used that way, mixed together with possibly other IndexInput types. ",
            "author": "Uwe Schindler",
            "id": "comment-12907573"
        },
        {
            "date": "2010-09-09T10:15:26+0000",
            "content": "also for any future issue: even if an optimized copyBytes is put in NIOFSDir, \nwe should be careful if it only works depending on NIOFSDir's internals.\n\nat the least: instead of setting a trap: we should make NIOFSIO and maybe NIOFS itself final.\n\ni think in general there is a lot involved and we should just open an issue if we want to go \nthis route, but there is a lot of complexity involved: personally I would like to see what the gain is. ",
            "author": "Robert Muir",
            "id": "comment-12907583"
        },
        {
            "date": "2010-09-09T11:01:15+0000",
            "content": "Committed revision 995376, 995379 (3x) ",
            "author": "Robert Muir",
            "id": "comment-12907592"
        }
    ]
}