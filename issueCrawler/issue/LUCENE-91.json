{
    "id": "LUCENE-91",
    "title": "IndexWriter ctor does not release lock on exception",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.2",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "If IndexWriter construction fails with an exception, the write.lock lock is not\nreleased.\n\nFor example, this happens if one tries to open an IndexWriter on an FSDirectory\nwhich does not contain an Lucene index. FileNotFoundException will be thrown by\norg.apache.lucene.store.FSInputStream, after which the write lock will remain in\nthe directory, and nobody can open the index.\n\nI have been using this pattern \u2013 doing IndexWriter(..., false), catching\nFileNotFoundException and doing IndexWriter(..., true) \u2013 in my code to\ninitialize the index on demand, because the app never know if the index already\nexists.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-03-20T11:06:03+0000",
            "content": "Take a look at the nice static methods in IndexReader that will allow your\napplication to see if an index in a specific dir exists or not instead of\ncatching that exception.\n\nhttp://jakarta.apache.org/lucene/docs/api/org/apache/lucene/index/IndexReader.html ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321225"
        },
        {
            "date": "2003-03-20T11:11:51+0000",
            "content": "Thank you, that will at least work if there is a single processing controlling the directory.\n\nI still think the bug is a bug, though. If the constructor fails, the lock is not cleaned up. It's sloppy coding. The constructor may fail for other reasons \u2013 out of memory, file permission failure etc., all of which will botch up the index directory state by leaving a dead lock. Fixing it is as simple is as simple as wrapping the latter part of the ctor in a try..catch block and releasing the lock on exception. ",
            "author": "Alex Staubo",
            "id": "comment-12321226"
        },
        {
            "date": "2003-03-21T01:23:29+0000",
            "content": "If you really feel strongly that this should be fixed, then the appropriate\nthing to do is not to keep insisting that someone else fix it, but rather to\nsubmit a patch that fixes it. ",
            "author": "cutting@apache.org",
            "id": "comment-12321227"
        },
        {
            "date": "2011-06-08T05:38:18+0000",
            "content": "Please note that this also happens when Lock.obtain times out.  As far as I can tell, the only way to avoid that possibility is to LOCK_OBTAIN_WAIT_FOREVER, and \"forever\" generally sounds like a bad idea.  I would say that is a bug, and more clearly so than exceptions due to the index not existing. ",
            "author": "Adam Ahmed",
            "id": "comment-13045794"
        },
        {
            "date": "2011-06-08T05:55:27+0000",
            "content": "The better place for the timeout fix would probably be in Lock.obtain(), where it should attempt something similar to Lock.release() if a timeout occurs. ",
            "author": "Adam Ahmed",
            "id": "comment-13045800"
        },
        {
            "date": "2011-06-08T07:20:17+0000",
            "content": "A colleague just noticed that the timeout isn't native.  That is, by default Lucene will attempt to create the lock once, but won't actually \"timeout\" because it uses tryLock().  So the problem is not Lucene (since it's guaranteed to give you at least one fair shot, even on a slow FS), but that the lock is already held.\n\nSo this goes back to being decidedly not-a-bug.  Apologies. ",
            "author": "Adam Ahmed",
            "id": "comment-13045819"
        }
    ]
}