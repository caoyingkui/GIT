{
    "id": "LUCENE-2801",
    "title": "getOffsetGap should not be called for non-anaylyzed fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "from: LUCENE-2235\n\nSince Lucene 3.0.3, when a PerFieldAnalyzerWrapper is constructed with a null defaultAnalyzer it will NPE when DocInverterPerField calls:\n\n fieldState.offset += docState.analyzer.getOffsetGap(field);\n\n\nThis block should first check that the field is analyzed, or the javadoc on PerFieldAnalyzerWrapper could mention that a null defaultAnalyzer is disallowed.\n\nAlso, the main reason for checking for isAnalyzed, from Uwe Schindler in LUCENE-2235\n\nOne problem coming from not checking for \"analyzed\" is this:\nYou add a field indexed and it gets analyzed by PFAW - After that you add the same field name stored-only (which is perfectly legal and often used, e.g. when the stored value is binary or in some other format and does not correspond to the indexed text), the positionIncrement is increased. After that you again add another instance of the same field as indexed-only, which also increases posIncr. So you have 2 times the gap between both indexed sub-fields. This is definitely wrong.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}