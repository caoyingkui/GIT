{
    "id": "SOLR-536",
    "title": "Automatic binding of results to Beans (for solrj)",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - java"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "as we are using java5 .we can use annotations to bind SolrDocument to java beans directly.\n\nThis can make the usage of solrj a  bit simpler\n\nThe QueryResponse class in solrj can have an extra method as follows\n\npublic <T> List<T> getResultBeans(Class<T> klass)\n\nand the bean can have annotations as\n\nclass MyBean{\n@Field(\"id\") //name is optional\nString id;\n\n@Field(\"category\")\nList<String> categories\n}",
    "attachments": {
        "SOLR-DocObjBinder.patch": "https://issues.apache.org/jira/secure/attachment/12386478/SOLR-DocObjBinder.patch",
        "SOLR-536.patch": "https://issues.apache.org/jira/secure/attachment/12380267/SOLR-536.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12589495",
            "date": "2008-04-16T10:56:56+0000",
            "content": "First cut . \nThere is a Class DocumentObjectBinder used by QueryResponse.\n\nThe testcase demonstrates the usage.\nThe annotation can be applied on a setter method also.\n\nQuestions:\nDo we need binding for dynamic fields like\n\n@Field(\"*_t\")\nString a_t: \n\nShould it do automatic type conversion.?\n i.e solr gives the field as say int and the bean has the field as String\n\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12599836",
            "date": "2008-05-26T13:04:45+0000",
            "content": "looks good \u2013 i would leave out the function in QueryResponse.java \u2013 it seems just as easy for whoever is calling this to keep the static DocumentObjectBinder (and keeps the static out of our maintenance)\n\n\n\n\nShould it do automatic type conversion.?\ni.e solr gives the field as say int and the bean has the field as String\n\n\nSounds good. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12599846",
            "date": "2008-05-26T14:27:18+0000",
            "content": "Leaving out the function is fine.  Let the users manage that static instance\nLet us not have automatic conversion as of now. If people ask for it we can add it later. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12602189",
            "date": "2008-06-04T06:29:01+0000",
            "content": "Incorporated the changes suggested by Ryan "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12602451",
            "date": "2008-06-04T20:48:06+0000",
            "content": "Here is an updated version of the patch that also lets you use the same annotation to convert from an object to a SolrInputDocument.\n\nI still wonder if we should have the utility function in QueryResponse.java:\n\npublic <T> List<T> getBeans(Class<T> klass){\n  return new DocumentObjectBinder().getBeans(klass, getResults());\n}\n\n\nit seems like hanging on to a DocumentObjectBinder outside of the response will be more efficient.  (Though perhaps not a big deal) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12602539",
            "date": "2008-06-05T04:46:04+0000",
            "content": "The objective was to mask people from DocumentObjectBinder altogether .\n\nThe process of reading the annotations and caching the information is expensive.\n If we make the cache field  static in DocumentIObjectBinder this should be fine. Otherwise we must remove this method. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12602647",
            "date": "2008-06-05T13:43:51+0000",
            "content": "I think we should remove it from QueryResponce.  After SOLR-215, I'm reluctant to bake in static variables unless absolutely necessary.  In this case, I don't think using DocumentObjectBinder directly is a big deal \u2013 it also lets the user decide if access needs to be synchronized or not.\n\nWe can always add the function (and static cache) later if it is necessary. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12602658",
            "date": "2008-06-05T14:23:53+0000",
            "content": "Let us remove that method . without static cache it might lead to incorrect usage\n\nThe cache cant grow much.  One instance of DocField per class. Unless creates classes during runtime it may not cause a problem.  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12602688",
            "date": "2008-06-05T15:50:50+0000",
            "content": "This was commited with some minor changes \u2013 it was moved out of the 'response' package (since it also handles object construction) and put into a \"beans\" package.\n\nthanks Noble "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12602723",
            "date": "2008-06-05T17:42:28+0000",
            "content": "Ryan: \nThis is expensive\n\n private final Map<Class, List<DocField>> infocache = \n    Collections.synchronizedMap( new HashMap<Class, List<DocField>>() );\n\n\n\nLet us make it\n\n private final Map<Class, List<DocField>> infocache = \n    new ConcurrentHashMap<Class, List<DocField>>() ;\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12602733",
            "date": "2008-06-05T18:03:50+0000",
            "content": "done.  thanks "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12602744",
            "date": "2008-06-05T18:43:26+0000",
            "content": "> This is expensive\n> private final Map<Class, List<DocField>> infocache = \n>    Collections.synchronizedMap( new HashMap<Class, List<DocField>>() );\n\n> Let us make it\n> private final Map<Class, List<DocField>> infocache = \n>    new ConcurrentHashMap<Class, List<DocField>>() ;\n\nExpensive?  I'd expect the synchronizedMap to be faster and more memory compact.  The ConcurrentHashMap is definitely more concurrent, though.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12602919",
            "date": "2008-06-06T05:23:45+0000",
            "content": "yes concurrency is impotant. The cache.get() is called by too many threads in a webapp . Collections.synchronizedMap() has the get() synchronized so more contention. cost per operation is less but waiting time can be longer for Collections..synchronizedMap() "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12604130",
            "date": "2008-06-11T06:12:03+0000",
            "content": "Adds methods to SolrServer to directly add beans to Solr\nall add() has a corresponding addBean method\n\nThis can help mask people from SolrinputDocument, DocumentObjectBinder etc .a non-static field is added to SolrServer \n\nprivate DocumentObjectBinder binder;\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12607475",
            "date": "2008-06-24T05:47:08+0000",
            "content": "hymmm, after using this for a bit, i'm not sure we should have the utility funcion:\n\npublic <T> List<T> getBeans(Class<T> type)\n\n\nin QueryResponse.  My problem with it now is that if I use the response in a context where it needs to be serialized (wicket), then the SolrServer also needs to get serialized... that is a problem.  I think its better to keep that functionality outside of the QueryResponse class. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12607477",
            "date": "2008-06-24T05:55:30+0000",
            "content": "i removed it in rev671034 \u2013 with SolrServer in the response, the response is not serializable... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12607478",
            "date": "2008-06-24T05:55:34+0000",
            "content": "let us make the field transient. \n\n  private transient SolrServer solrServer;\n\n\nEven if the field is absent it still works\n\nThis method is very useful because this is a client API and the user should be exposed to minimal classes/interfaces "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12607484",
            "date": "2008-06-24T06:13:43+0000",
            "content": "ok, I put it back in rev 671037 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12615033",
            "date": "2008-07-19T18:25:46+0000",
            "content": "user reported bug\nI have a multivalued Solr text field, called 'categories', which is mapped\nto a String[] in my java bean. I am directly converting the search results\nto this bean.\nThis works absolutely fine if the field has two or more values, but If the\nfield has exactly one value, I get the following exception -\n\n*Caused by: java.lang.RuntimeException: Exception while setting value\n: [Ljava.lang.Object;@15b48b2 on private java.lang.String[]\ncom.app.model.Unit.categories\n       at org.apache.solr.client.solrj.beans.DocumentObjectBinder$DocField.set(DocumentObjectBinder.java:230)\n       at org.apache.solr.client.solrj.beans.DocumentObjectBinder$DocField.inject(DocumentObjectBinder.java:199)\n       at org.apache.solr.client.solrj.beans.DocumentObjectBinder.getBeans(DocumentObjectBinder.java:57)\n       at org.apache.solr.client.solrj.response.QueryResponse.getBeans(QueryResponse.java:256)\n\nFixed "
        }
    ]
}