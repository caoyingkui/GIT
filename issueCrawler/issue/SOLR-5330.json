{
    "id": "SOLR-5330",
    "title": "PerSegmentSingleValuedFaceting overwrites facet values",
    "details": {
        "affect_versions": "4.2.1",
        "status": "Resolved",
        "fix_versions": [
            "4.5.1",
            "4.6",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I recently tried enabling facet.method=fcs for one of my indexes and found a significant performance improvement (with a large index, many facet values, and near-realtime updates). Unfortunately, the results were also wrong. Specifically, some facet values were being partially overwritten by other facet values. (That is, if I expected facet values like \"abcdef\" and \"123\", I would get a value like \"123def\".)\n\nDebugging through the code, it looks like the problem was in PerSegmentSingleValuedFaceting, specifically in the getFacetCounts method, when BytesRef val is shallow-copied from the temporary per-segment BytesRef. The byte array assigned to val is shared with the byte array for seg.tempBR, and is overwritten a few lines down by the call to seg.tenum.next().\n\nI managed to fix it locally by replacing the shallow copy with a deep copy.\n\nWhile I encountered this problem on Solr 4.2.1, I see that the code is identical in 4.5. Unless the behavior of TermsEnum.next() has changed, I believe this bug still exists.",
    "attachments": {
        "solr-5330.patch": "https://issues.apache.org/jira/secure/attachment/12607822/solr-5330.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13791394",
            "date": "2013-10-10T11:07:53+0000",
            "content": "Michael:\n\nThanks for the detailed explanation! Could I trouble you to go ahead and attach a patch? Don't worry about \"polish\", having your code change as a place to at least start (if not use entire) makes things easier for whoever picks this up... "
        },
        {
            "author": "Michael Froh",
            "id": "comment-13791580",
            "date": "2013-10-10T15:17:59+0000",
            "content": "Patch attached "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13791612",
            "date": "2013-10-10T16:02:17+0000",
            "content": "Yikes, looks like this bug has been around a while.  I'll take it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13791896",
            "date": "2013-10-10T19:30:44+0000",
            "content": "It's unfortunate that even the random faceting testing didn't catch this... I'm trying to fix that now. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13793213",
            "date": "2013-10-12T02:28:28+0000",
            "content": "So I instrumented the faceting code like so:\n\n          seg.tempBR = seg.tenum.next();\nif (seg.tempBR.bytes == val.bytes) {\nSystem.err.println(\"##########SHARING DETECTED: val.offset=\"+val.offset + \" val.length=\"+val.length + \" new.offset=\"+seg.tempBR.offset + \" new.length=\"+seg.tempBR.length);\nif (val.offset == seg.tempBR.offset) {\n  System.err.println(\"!!!!!!SHARING USING SAME OFFSET\");\n}\n\n\n\nAnd it detects tons of sharing (the returned bytesref still pointing to the same byte[]) of course... but the thing is, it never generates an invalid result.  calling next() on the term enum never changes the bytes that were previously pointed to... it simply points to a different part of the same byte array.  I can never detect a case where the original bytes are changed, thus invalidating the shallow copy.\n\nExample output:\n\n##########SHARING DETECTED: val.offset=1 val.length=4 new.offset=6 new.length=4\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13797235",
            "date": "2013-10-16T20:45:49+0000",
            "content": "Commit 1532900 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1532900 ]\n\nSOLR-5330: make copy of term bytes before calling next "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13797237",
            "date": "2013-10-16T20:49:00+0000",
            "content": "Commit 1532903 from Yonik Seeley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1532903 ]\n\nSOLR-5330: make copy of term bytes before calling next "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13797240",
            "date": "2013-10-16T20:51:41+0000",
            "content": "Commit 1532905 from Yonik Seeley in branch 'dev/branches/lucene_solr_4_5'\n[ https://svn.apache.org/r1532905 ]\n\nSOLR-5330: make copy of term bytes before calling next "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13797244",
            "date": "2013-10-16T20:55:21+0000",
            "content": "I never was able to reproduce... so I just fixed the issue anyway, making a copy of the bytes only instead of cloning the complete BytesRef. "
        }
    ]
}