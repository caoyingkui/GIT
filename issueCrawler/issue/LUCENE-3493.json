{
    "id": "LUCENE-3493",
    "title": "Solr reopen on a custom reader doesn't work",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.4",
        "resolution": "Unresolved",
        "status": "Resolved"
    },
    "description": "When a custom index reader is used with Solr and reopen, the custom reader vanishes after the reopen.  It's a bug.",
    "attachments": {
        "LUCENE-3493.patch": "https://issues.apache.org/jira/secure/attachment/12497997/LUCENE-3493.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-06T14:44:17+0000",
            "content": "Patch with unit test demonstrating the bug.  \n\nThe fix required in Lucene is randomly in the patch as well.\n\nI'll post another patch showing the Lucene fix, allows fixing the bug on the Solr side. ",
            "author": "Jason Rutherglen",
            "id": "comment-13121981"
        },
        {
            "date": "2011-10-06T15:42:12+0000",
            "content": "I have a couple questions:\n\nIf the bug is in Lucene, shouldn't we write a test at the Lucene level?\n\nWhat exactly is the bug? That when you subclass DirectoryReader, it doesn't return that subclass from reopen? If this is the desired behavior, isn't it up to the subclass to override reopen?\n\nAlso, you say the required lucene fix is randomly in the patch, but also that you will post another patch showing the lucene fix - I don't see it in the patch, so I assume its coming, but the only change I see is making some Lucene constructors public - we shouldn't likely do that just for this Solr test I think. ",
            "author": "Mark Miller",
            "id": "comment-13122011"
        },
        {
            "date": "2011-10-06T15:51:43+0000",
            "content": "The patch shows the bug only.  Which needs a test in Solr.  The next patch will show the fix etc.  A Lucene test makes sense as well.   ",
            "author": "Jason Rutherglen",
            "id": "comment-13122019"
        },
        {
            "date": "2011-10-06T15:58:30+0000",
            "content": "This is not a bug at all: Your custom IndexReader has to override reopen() and return your own implementation. ",
            "author": "Uwe Schindler",
            "id": "comment-13122021"
        },
        {
            "date": "2011-10-06T16:09:25+0000",
            "content": "Uwe, I'd like to agree with you, however I cannot (because then I wouldn't have had to create an issue!).  Look at DR.doOpen* methods.  They're private.  There's no reason for them to be.  They need to be protected, that's in the next patch.  Fairly simple.  The follow on to this is overriding IW to return custom readers.  I had an issue and patch for that a while back.  It's best to implement both here, as Lucene 4.x Solr's NRT will show the same problem!\n\nI think you're right, looks like this could be done be overriding doOpenIfChanged* however, it doesn't make sense to duplicate code! ",
            "author": "Jason Rutherglen",
            "id": "comment-13122033"
        },
        {
            "date": "2011-10-06T16:11:53+0000",
            "content": "Implementing your own IndexReader has always been a very tricky endeavor, esp wrt maintainability... super-expert only.  One of the reasons I was glad to get rid of SolrIndexReader (the fragile base class problem). ",
            "author": "Yonik Seeley",
            "id": "comment-13122036"
        },
        {
            "date": "2011-10-06T16:15:03+0000",
            "content": "That clears things up a bit Jason. The title and patch don't really explain the issue.\n\nas Lucene 4.x Solr's NRT will show the same problem!\n\nHow is that? Solr's NRT does not rely on a custom IndexReader (and if it did, I imagine we would make that properly override doOpenIfChanged, else it would be a bug)? ",
            "author": "Mark Miller",
            "id": "comment-13122040"
        },
        {
            "date": "2011-10-06T16:21:32+0000",
            "content": "Solr's NRT does not rely on a custom IndexReader\n\nYikes, logically the custom reader functionality should!\n\nproperly override doOpenIfChanged, else it would be a bug\n\nIt's a bug because there's no way to implement that today.  The DirectoryReader is created deep inside of IW.getReader (there's no way to re-implement it's functionality either because of private variable access).  \n\nI think we need a protected method for creating reader in IW.  I think though this becomes almost endless because I don't think there's a way to implement a custom IW in Solr. ",
            "author": "Jason Rutherglen",
            "id": "comment-13122050"
        },
        {
            "date": "2011-10-06T16:35:43+0000",
            "content": "Yikes, logically the custom reader functionality should!\n\nOkay, I see - you also want your Reader impl to be pulled from IW when using NRT. But as you allude to below, you would need a custom IndexWriter to do that - that is where we get the IndexReader from for NRT.\n\nThat's a scary road to start down currently (or as you say, endless).\n\nI don't think there's a way to implement a custom IW in Solr.\n\nWould be pretty advanced stuff, but what we would likely have to do is allow users to provide alternate SolrCoreState impls (currently the DefaultSolrCoreState impl is simply used). This would let you manage what IndexWriter impl was used. ",
            "author": "Mark Miller",
            "id": "comment-13122056"
        },
        {
            "date": "2011-10-06T17:33:05+0000",
            "content": "Uwe, I tried your idea.  It doesn't work!  Here's why: DR.writeLock and DR.segmentInfos are private.  Meaning the re-duplicated code because the useful methods aren't protected, cannot access these private variables.  Of course one can use reflection but that's just 'atrocious'.   ",
            "author": "Jason Rutherglen",
            "id": "comment-13122089"
        },
        {
            "date": "2011-10-06T17:41:24+0000",
            "content": "One way to solve all of this without subclassing, is to move the IndexReaderFactory to Lucene, integrate it into IW and DR.  \n\nThat will be much cleaner than forcing users to subclass, which is a monstrous pain, and will generate excessive unnecessary code in the end. ",
            "author": "Jason Rutherglen",
            "id": "comment-13122095"
        },
        {
            "date": "2011-10-07T03:16:56+0000",
            "content": "Uwe, check this out on the 3.3 version, what do you think? \n\n\n@Override\npublic final IndexReader reopen() throws CorruptIndexException, IOException {\n  // Preserve current readOnly\n  return doReopen(readOnly, null);\n}\n\n@Override\npublic final IndexReader reopen(boolean openReadOnly) throws CorruptIndexException, IOException {\n  return doReopen(openReadOnly, null);\n}\n\n@Override\npublic final IndexReader reopen(final IndexCommit commit) throws CorruptIndexException, IOException {\n  return doReopen(true, commit);\n}\n\n ",
            "author": "Jason Rutherglen",
            "id": "comment-13122506"
        },
        {
            "date": "2011-10-09T15:23:57+0000",
            "content": "LUCENE-3498 supercedes this issue as a 100% workable solution. ",
            "author": "Jason Rutherglen",
            "id": "comment-13123705"
        }
    ]
}