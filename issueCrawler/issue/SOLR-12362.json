{
    "id": "SOLR-12362",
    "title": "JSON loader should save the relationship of children",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Once _childDocuments in SolrInputDocument is changed to a Map, JsonLoader should add the child document to the map while saving its key name, to maintain the child's relationship to its parent.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-16T11:53:30+0000",
            "content": "\n\n { \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" } } \n\nThe biggest hold back i foresee working on this issue is to find a way to parse childDocuments such as the one above(quoted from SOLR-12298) while keeping the extendedField capability, implemented in JsonLoader. ",
            "author": "mosh",
            "id": "comment-16477290"
        },
        {
            "date": "2018-06-05T20:40:01+0000",
            "content": "To be clear, this patch thus far seems to be focused on \"Solr-Style JSON\" https://lucene.apache.org/solr/guide/7_3/uploading-data-with-index-handlers.html#uploading-data-with-index-handlers  (alas I don't like that name)  and not custom JSON.   Will this issue address both or do you think Custom JSON warrants a separate issue?\n\nFor Solr-Style JSON: Unfortunately the Solr Ref Guide doesn't show the atomic/partial update syntax.  Here's an excerpt:\n\n[{'id':'1', 'val_s':{'add':'foo'}}]\n\n\n\nAssuming that all documents must have the uniqueKey field, I think we can simply look for the presence of that key in the child JSON object?  Technically uniqueKey is optional but if it's undefined then child documents (and many/most Solr features) don't work any way.  I think it's more complicated to go the path you did by trying to know the atomic update verbs and other special keys.  There would be issues if someone oddly chooses a uniqueKey matching \"value\" or one of these update verbs but that'd be a pretty weird choice.  Perhaps long term Solr ought to lock down \"id\" for the official uniqueKey as a simplifying decision.\n\nFor custom JSON, I think we can explicitly call out these child documents by having the path show up in the split param.  It seems this is already supported though we need to retain the semantic key and decide when we add this semantic key or when not (make anonymous).  If we view anonymous children as old/deprecated to be removed, then we can just have a flag for this, one that is boolean one way in 7x but the other in master (8x). ",
            "author": "David Smiley",
            "id": "comment-16502456"
        },
        {
            "date": "2018-06-06T01:02:07+0000",
            "content": "The unique key solution seems like a better way to determine if the JSON is indeed a child document.\n However, I did not quite grasp your idea for custom JSON:\nFor custom JSON, I think we can explicitly call out these child documents by having the path show up in the split param. It seems this is already supported though we need to retain the semantic key\nDo you refer to childDocuments as the semantic key?\nIf so, the conditional: \n\nif (fieldName.equals(JsonLoader.CHILD_DOC_KEY))\n\n could be changed to: \n\nif (anonChildDocFlag && fieldName.equals(JsonLoader.CHILD_DOC_KEY)) \n ",
            "author": "mosh",
            "id": "comment-16502712"
        },
        {
            "date": "2018-06-06T13:04:21+0000",
            "content": "Do you refer to childDocuments as the semantic key?\n\nOnly child documents that are labelled; not the anonymous ones we have today.  I'm referring to the label (virtual field name pointing to the child doc) as the \"semantic key\".  I think this would be best exemplified via a test.  See JsonLoaderTest.testFewParentsJsonDoc.  Right now it's putting the children into getChildDocuments() (which is henceforth for annoymous child docs only).  If anonChildDocFlag==false, there should be no anonymous child docs; instead these docs should show up under the fields \"children\", and \"grandchildren\" depending on which depth. ",
            "author": "David Smiley",
            "id": "comment-16503260"
        },
        {
            "date": "2018-06-06T13:48:25+0000",
            "content": "anonChildDocFlag==false\nForgive my lack of knowledge, where would such flags get placed?\nWould it fit inside SolrConfig? ",
            "author": "mosh",
            "id": "comment-16503313"
        },
        {
            "date": "2018-06-06T16:35:29+0000",
            "content": "Here's my thought-process:  If we use a request param it provides maximum flexibility.  Lets think of the name more; naming is hard.  \"addChildDocsAnon\"?  Maybe \"legacyChildDocs\" to convey it's old?  This assumes the current \"anonymous\" nature is going to go away eventually.  I suspect the majority of current apps could add docs with the new labelled form and everything would work fine.  In the end, we're just going to add some fields and eventually leverage that information in search.  If this really is legacy and if it's probably harmless to clients to use the new way, then this suggests to use luceneMatchVersion instead of a parameter.  e.g. getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_4_0) ",
            "author": "David Smiley",
            "id": "comment-16503557"
        },
        {
            "date": "2018-06-06T16:55:32+0000",
            "content": "I seem to prefer the latter approach(luceneMatchVersion).\nI'll start tackling this, hopefully the tests will pass easily.\nI'll keep you updated. ",
            "author": "mosh",
            "id": "comment-16503571"
        },
        {
            "date": "2018-06-06T17:19:56+0000",
            "content": "After giving it some thought, it seems to break some methods, such as getChildDoucments.\nPerhaps having it as a param request might be wiser, at least until the previous way of indexing child documents is considered truly legacy.\nDavid Smiley, what do you think? ",
            "author": "mosh",
            "id": "comment-16503616"
        },
        {
            "date": "2018-06-06T17:21:15+0000",
            "content": "Perhaps having it as a param request might be wiser, at least until the previous way of indexing child documents is considered truly legacy.\n+1 ",
            "author": "David Smiley",
            "id": "comment-16503618"
        },
        {
            "date": "2018-06-06T19:16:14+0000",
            "content": "Just pushed a new commit which addresses the anonChildDocsFlag ",
            "author": "mosh",
            "id": "comment-16503771"
        },
        {
            "date": "2018-06-07T12:17:54+0000",
            "content": "I was not able to foresee the amount of work that will have to go into making the JsonRecordReader compatible with labeled child documents.\nI just pushed a commit which includes tests for the splitMode JSON reader.\nHopefully it'll be able to make it in time for the forthcoming feature freeze. ",
            "author": "mosh",
            "id": "comment-16504588"
        },
        {
            "date": "2018-06-13T16:01:25+0000",
            "content": "The issue summary references JSON & XML but the PR has only addresses JSON.  You could edit the title and file a new issue for XML... or do you intend to address XML here as well?  I think the JSON side of the PR is done. ",
            "author": "David Smiley",
            "id": "comment-16511361"
        },
        {
            "date": "2018-06-14T04:18:01+0000",
            "content": "I think it's a better idea to separate the two. I'll open a new sub-task.\nIt's easier to prioritize smaller packages. ",
            "author": "mosh",
            "id": "comment-16511968"
        },
        {
            "date": "2018-06-14T16:23:22+0000",
            "content": "Committed. \u00a0Thanks mosh! ",
            "author": "David Smiley",
            "id": "comment-16512707"
        },
        {
            "date": "2018-06-14T19:48:14+0000",
            "content": "Reproducing TestJsonRecordReader failures, from Yetus on SOLR-12395 https://builds.apache.org/job/PreCommit-SOLR-Build/123/artifact/out/patch-unit-solr_solrj.txt, which git bisect blames on the 21fe416 master commit on this issue:\n\n\n   [junit4] Suite: org.apache.solr.common.util.TestJsonRecordReader\n   [junit4]   2> Creating dataDir: /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/solr/build/solr-solrj/test/J1/temp/solr.common.util.TestJsonRecordReader_9BC2BA48D076310E-001/init-core-data-001\n   [junit4]   2> 783465 INFO  (SUITE-TestJsonRecordReader-seed#[9BC2BA48D076310E]-worker) [    ] o.a.s.SolrTestCaseJ4 Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=false\n   [junit4]   2> 783466 INFO  (SUITE-TestJsonRecordReader-seed#[9BC2BA48D076310E]-worker) [    ] o.a.s.SolrTestCaseJ4 Randomized ssl (false) and clientAuth (false) via: @org.apache.solr.util.RandomizeSSL(reason=, ssl=NaN, value=NaN, clientAuth=NaN)\n   [junit4]   2> 783466 INFO  (SUITE-TestJsonRecordReader-seed#[9BC2BA48D076310E]-worker) [    ] o.a.s.SolrTestCaseJ4 SecureRandom sanity checks: test.solr.allowed.securerandom=null & java.security.egd=file:/dev/./urandom\n   [junit4]   2> 783517 INFO  (TEST-TestJsonRecordReader.testOneLevelSplit-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testOneLevelSplit\n   [junit4]   2> 783555 INFO  (TEST-TestJsonRecordReader.testOneLevelSplit-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testOneLevelSplit\n   [junit4]   2> 783556 INFO  (TEST-TestJsonRecordReader.testRecursiveWildcard2-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testRecursiveWildcard2\n   [junit4]   2> 783557 INFO  (TEST-TestJsonRecordReader.testRecursiveWildcard2-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testRecursiveWildcard2\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestJsonRecordReader -Dtests.method=testRecursiveWildcard2 -Dtests.seed=9BC2BA48D076310E -Dtests.multiplier=2 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=mt -Dtests.timezone=America/Jujuy -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.06s J1 | TestJsonRecordReader.testRecursiveWildcard2 <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<6> but was:<7>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9BC2BA48D076310E:CA96D19E65F5AA5B]:0)\n   [junit4]    > \tat org.apache.solr.common.util.TestJsonRecordReader.testRecursiveWildcard2(TestJsonRecordReader.java:253)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> 783612 INFO  (TEST-TestJsonRecordReader.testNestedJsonWithFloats-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testNestedJsonWithFloats\n   [junit4]   2> 783612 INFO  (TEST-TestJsonRecordReader.testNestedJsonWithFloats-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testNestedJsonWithFloats\n   [junit4]   2> 783613 INFO  (TEST-TestJsonRecordReader.testRecursiveWildCard-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testRecursiveWildCard\n   [junit4]   2> 783614 INFO  (TEST-TestJsonRecordReader.testRecursiveWildCard-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testRecursiveWildCard\n   [junit4]   2> 783700 INFO  (TEST-TestJsonRecordReader.testSrcField-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testSrcField\n   [junit4]   2> 783759 INFO  (TEST-TestJsonRecordReader.testSrcField-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testSrcField\n   [junit4]   2> 783846 INFO  (TEST-TestJsonRecordReader.testArrayOfRootObjects-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testArrayOfRootObjects\n   [junit4]   2> 786590 INFO  (TEST-TestJsonRecordReader.testArrayOfRootObjects-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testArrayOfRootObjects\n   [junit4]   2> 786676 INFO  (TEST-TestJsonRecordReader.testClearPreviousRecordFields-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testClearPreviousRecordFields\n   [junit4]   2> 786677 INFO  (TEST-TestJsonRecordReader.testClearPreviousRecordFields-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testClearPreviousRecordFields\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestJsonRecordReader -Dtests.method=testClearPreviousRecordFields -Dtests.seed=9BC2BA48D076310E -Dtests.multiplier=2 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=mt -Dtests.timezone=America/Jujuy -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.09s J1 | TestJsonRecordReader.testClearPreviousRecordFields <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9BC2BA48D076310E:A51705718E0A9F18]:0)\n   [junit4]    > \tat org.apache.solr.common.util.TestJsonRecordReader.testClearPreviousRecordFields(TestJsonRecordReader.java:364)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> 786678 INFO  (TEST-TestJsonRecordReader.testAIOOBE-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testAIOOBE\n   [junit4]   2> 786718 INFO  (TEST-TestJsonRecordReader.testAIOOBE-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testAIOOBE\n   [junit4]   2> 786720 INFO  (TEST-TestJsonRecordReader.testNestedDocs-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testNestedDocs\n   [junit4]   2> 786721 INFO  (TEST-TestJsonRecordReader.testNestedDocs-seed#[9BC2BA48D076310E]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testNestedDocs\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestJsonRecordReader -Dtests.method=testNestedDocs -Dtests.seed=9BC2BA48D076310E -Dtests.multiplier=2 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=mt -Dtests.timezone=America/Jujuy -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J1 | TestJsonRecordReader.testNestedDocs <<<\n   [junit4]    > Throwable #1: java.lang.NullPointerException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9BC2BA48D076310E:D96EA7A37187345E]:0)\n   [junit4]    > \tat org.apache.solr.common.util.TestJsonRecordReader.lambda$testNestedDocs$0(TestJsonRecordReader.java:284)\n   [junit4]    > \tat org.apache.solr.common.util.JsonRecordReader$Node.handleObjectStart(JsonRecordReader.java:383)\n   [junit4]    > \tat org.apache.solr.common.util.JsonRecordReader$Node.parse(JsonRecordReader.java:291)\n   [junit4]    > \tat org.apache.solr.common.util.JsonRecordReader$Node.access$200(JsonRecordReader.java:155)\n   [junit4]    > \tat org.apache.solr.common.util.JsonRecordReader.streamRecords(JsonRecordReader.java:140)\n   [junit4]    > \tat org.apache.solr.common.util.JsonRecordReader.streamRecords(JsonRecordReader.java:136)\n   [junit4]    > \tat org.apache.solr.common.util.TestJsonRecordReader.testNestedDocs(TestJsonRecordReader.java:282)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/solr/build/solr-solrj/test/J1/temp/solr.common.util.TestJsonRecordReader_9BC2BA48D076310E-001\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {}, docValues:{}, maxPointsInLeafNode=381, maxMBSortInHeap=6.536094904375801, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@3f50c672), locale=mt, timezone=America/Jujuy\n   [junit4]   2> NOTE: Linux 4.4.0-112-generic amd64/Oracle Corporation 1.8.0_172 (64-bit)/cpus=4,threads=1,free=427902360,total=492306432\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16512909"
        },
        {
            "date": "2018-06-14T20:13:29+0000",
            "content": "The tests Steve reported area also failing for me 4/4 times (without specifying any seed):\n   [junit4]   - org.apache.solr.common.util.TestJsonRecordReader.testClearPreviousRecordFields\n   [junit4]   - org.apache.solr.common.util.TestJsonRecordReader.testRecursiveWildcard2\n   [junit4]   - org.apache.solr.common.util.TestJsonRecordReader.testNestedDocs ",
            "author": "Erick Erickson",
            "id": "comment-16512930"
        },
        {
            "date": "2018-06-14T20:20:13+0000",
            "content": "Eek, sorry! \u00a0I did run tests before but strangely didn't hit these errors. \u00a0I'll look and try to get a fix in by midnight. ",
            "author": "David Smiley",
            "id": "comment-16512936"
        },
        {
            "date": "2018-06-15T13:04:44+0000",
            "content": "BTW I pushed a fix last night \u2013 https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=commit;h=4799bc5a4a36d4b550f69f8e2a233b857b6b0340\n\nI have no idea why I didn't see the error before... I think I was simply mistaken. ",
            "author": "David Smiley",
            "id": "comment-16513785"
        },
        {
            "date": "2018-06-28T13:41:46+0000",
            "content": "Un-resolving to potentially improve further based on off-topic comments in SOLR-12441 in which we think we don't want to force child documents to have a uniqueKey at the UpdateHandler layer (e.g. JSON syntax) to differentiate them from \"extended field value syntax\" for partial updates.  So the question then is how do we differentiate? ",
            "author": "David Smiley",
            "id": "comment-16526315"
        },
        {
            "date": "2018-06-28T14:13:30+0000",
            "content": "Jan H\u00f8ydahl mentioned that it would be brittle if we differentiated a sub-json structure as a child doc if we were to do it by looking for the special values \"add\" or \"set\" (partial update commands) since child doc could conceivably want fields named as-such.\n\nSee JsonLoader's parseExtendedFieldValue().  Today, line 597, it calls isChildDoc to differentiate, where we check for uniqueKey field.\n\nProposal: look at the SolrInputField parameter to look at the field we're adding this to (i.e. what key is this sub-json structure associated with?).  Is that a field in the schema?  If it is, then we have an \"extended field value (partial update most likely).  If it is not, then we have a child document.  This proposal of course requires that the field already exist, and in a \"data driven mode\", that might not be the case.  But in a \"data driven mode\", we shouldn't see \"extended field values\" at all until at least there is some data to partially update? ",
            "author": "David Smiley",
            "id": "comment-16526338"
        },
        {
            "date": "2018-06-28T15:13:57+0000",
            "content": "Thanks for showing this Jira issue.\n\nIs the\u00a0existence of the pseudo field for children recorded in the schema?\n\nWhat if \"data driven mode\" is in use and someone tries to index a document with \"child\" : \"foo\" after that key has been used to index sub docs. Then the auto-add-fields-to-schema logic would record \"child\" as a string field in the schema and the next attempt to use it as a sub-doc key would fail.\n\nSo I still think that perhaps we should be explicit and add a (pseudo) NestedFieldType to the schema, but that nested field type would either be implicitly defined or just a NOP class that does nothing, just a way to reserve the field name for nested use.??\n\n<field name=\"child\" type=\"nested\" />\n<fieldType name=\"nested\" class=\"solr.NestedFieldType\" indexed=\"false\" stored=\"false\" docValues=\"false\" />\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16526410"
        },
        {
            "date": "2018-06-28T15:29:47+0000",
            "content": "Is the existence of the pseudo field for children recorded in the schema?\n\nNot yet but I have proposed this within this umbrella issue.\n\nWhat if \"data driven mode\" is in use and someone tries to index a document with \"child\" : \"foo\" after that key has been used to index sub docs. Then the auto-add-fields-to-schema logic would record \"child\" as a string field in the schema and the next attempt to use it as a sub-doc key would fail.\n\nHow does that situation makes sense?  Implementation details aside, that scenario seems flawed on the part of the user and/or their data. ",
            "author": "David Smiley",
            "id": "comment-16526431"
        },
        {
            "date": "2018-07-01T09:29:25+0000",
            "content": "look at the SolrInputField parameter to look at the field we're adding this to (i.e. what key is this sub-json structure associated with?). Is that a field in the schema? If it is, then we have an \"extended field value (partial update most likely). If it is not, then we have a child document.\nThis works for partial updates fine, but seems to fail on index time boosts, as the fields can be indexed using a boost without being indexed beforehand.\n I have pushed a commit showcasing the problem.\n The tests JsonLoaderTest.testParsing and JsonLoaderTest.testFieldValueOrdering both seem to fail because of the problem described above. ",
            "author": "mosh",
            "id": "comment-16529024"
        },
        {
            "date": "2018-07-01T13:15:29+0000",
            "content": "After reading the code for index-time boosts, it seems like it is completely ignored and deprecated...\nWill this still be around when Solr 8 comes? ",
            "author": "mosh",
            "id": "comment-16529094"
        },
        {
            "date": "2018-07-01T14:49:23+0000",
            "content": "Good point Mosh.\n\nIMO We ought to outright remove the syntax to specify\u00a0\"boost\" for 8.0\u00a0and not let it get in our way in thinking about how to differentiate a child doc from a partial update for the JSON syntax in 8.0. \u00a0Thus in 8.0, the logic can be simplified \u2013 it's either a partial update (thus we convert the value to a Map), or it's a child doc. \u00a0There will be no extended field syntax that isn't either of those. \u00a0The code would be simpler; we wouldn't even use the terminology \"extended value\" \u2013 it's either a child doc or it's a partial update.\u00a0 This task, removing the extended value yet not partial-update for 8.0 would be a separate issue. \u00a0WDYT? ",
            "author": "David Smiley",
            "id": "comment-16529119"
        },
        {
            "date": "2018-07-01T15:16:39+0000",
            "content": "it's either a child doc or it's a partial update\nSounds swell.\nHopefully we will be able to get on with this issue, as this feature is really crucial for us.\nWill it be possible to continue work on this issue and open a separate one for the boost removal?\nI can open a pull from the branch I mentioned earlier.\nFingers crossed. ",
            "author": "mosh",
            "id": "comment-16529129"
        },
        {
            "date": "2018-07-01T15:44:08+0000",
            "content": "This issue (SOLR-12362) is only re-openned to improve/tweak the logic differentiating a child doc from something else. \u00a0We could table this until \"boost\" is removed? \u00a0Maybe you meant \"continue\" on another issue, like SOLR-12441 which is pending further action from you? ",
            "author": "David Smiley",
            "id": "comment-16529138"
        },
        {
            "date": "2018-07-01T16:20:09+0000",
            "content": "I figure we'll just keep this issue closed. \u00a0When another issue is created to remove the \"boost\"/extended-value (8.0 only) that same issue could easily tweak the isChild logic to not consider the presence of a uniqueKey field. \u00a0Since that could only happen on master branch, it would be confusing to do that change under this issue which is 7.5. ",
            "author": "David Smiley",
            "id": "comment-16529148"
        },
        {
            "date": "2018-07-03T21:30:32+0000",
            "content": "Filed related issue:\u00a0SOLR-12535 ",
            "author": "David Smiley",
            "id": "comment-16531949"
        },
        {
            "date": "2018-09-12T16:22:56+0000",
            "content": "While working on a bit of documentation, I can't figure out why we need the \"anonChildDocs\" param flag here, yet not for XML. \u00a0I know there were some syntax ambiguities but I thought we solved them by looking for the unique key in a child map to differentiate an atomic update from a child doc. \u00a0The code makes it seem it's a mere matter of placing the doc on the SolrInputDocument ananonymously vs as a field; but it can't be jus that or we wouldn't of\u00a0needed this in the first place (we didn't for XML). \u00a0Maybe it was only an issue when the document is not solr-update JSON but sliced with \"split\" param? \u00a0Can you help remind me mosh? \u00a0I'm hoping that regardless of what the reason\u00a0is, we can outright remove it in Solr 8. ",
            "author": "David Smiley",
            "id": "comment-16612419"
        },
        {
            "date": "2018-09-13T03:40:38+0000",
            "content": "I know there were some syntax ambiguities but I thought we solved them by looking for the unique key in a child map to differentiate an atomic update from a child doc.\nIf I recall correctly, we used this to allow a grace period before child documents are stored inside SolrInputField.\n\n@link CommonParams#ANONYMOUS_CHILD_DOCS} Defaults to true.\n\n\nThis seemed like a major change at the time, so we decided to set it to true by default, to give it time until we get this up to scratch. ",
            "author": "mosh",
            "id": "comment-16612972"
        },
        {
            "date": "2018-09-13T14:00:00+0000",
            "content": "Oh I think I remember more clearly, and I think it is related to the \"split\" param used for JSON that doesn't conform to Solr-update-JSON.  For Solr-update-JSON. the sender of the data can choose to send the child doc as a field (new way) or use the _childDocument_ key (old way) \u2013 no need for some new param.  But if some 3rd party JSON is submitted and we split it, there is no way to choose how you want the child document to be attached.  So we have this param.  The XML side doesn't have this feature.  It does have XSLT but that transformation is very expressive, allowing the writer of the XSLT to choose how to associate the child doc, and thus there's no similar concern on the XML side. ",
            "author": "David Smiley",
            "id": "comment-16613538"
        },
        {
            "date": "2018-09-13T15:36:05+0000",
            "content": "well, the custom JSON parser knows the relationship between the parent and child. for instance , if split=/|/child1|/child2 . It actually means , for each document at / there are 2 possible child docs at /child1 and /child2 . Now the parser knows whether the child was found at child1 or  child2 . if the SolrInputDocument has a way to express the relationship, then that data can be used  ",
            "author": "Noble Paul",
            "id": "comment-16613662"
        },
        {
            "date": "2018-09-13T18:35:14+0000",
            "content": "Understood Noble Paul. \u00a0Yes the relationship is there. \u00a0What's not known is if the sender desires for the child doc to be attached as a field (new way) or anonymous. ",
            "author": "David Smiley",
            "id": "comment-16613890"
        }
    ]
}