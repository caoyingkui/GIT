{
    "id": "LUCENE-2642",
    "title": "merge LuceneTestCase and LuceneTestCaseJ4",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/test"
        ],
        "type": "Test",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We added Junit4 support, but as a separate test class.\n\nSo unfortunately, we have two separate base classes to maintain: LuceneTestCase and LuceneTestCaseJ4.\nThis creates a mess and is difficult to manage.\n\nInstead, I propose a single base test class that works both junit3 and junit4 style.\n\nI modified our LuceneTestCaseJ4 in the following way:\n\n\tthe methods to run are not limited to the ones annotated with @Test, but also any void no-arg methods that start with \"test\", like junit3. this means you dont have to sprinkle @Test everywhere.\n\tof course, @Ignore works as expected everywhere.\n\tLuceneTestCaseJ4 extends TestCase so you dont have to import static Assert.* to get all the asserts.\n\n\n\nfor most tests, no changes are required. but a few very minor things had to be changed:\n\n\tsetUp() and tearDown() must be public, not protected.\n\tuseless ctors must be removed, such as TestFoo(String name) \n{ super(name); }\n\tLocalizedTestCase is gone, instead of\n\npublic class TestQueryParser extends LocalizedTestCase {\n\n\nit is now\n\n@RunWith(LuceneTestCase.LocalizedTestCaseRunner.class)\npublic class TestQueryParser extends LuceneTestCase {\n\n\n\tSame with MultiCodecTestCase: (LuceneTestCase.MultiCodecTestCaseRunner.class}\n\n\n\nI only did the core tests in the patch as a start, and i just made an empty LuceneTestCase extends LuceneTestCaseJ4.\n\nI'd like to do contrib and solr and rename this LuceneTestCaseJ4 to only a single class: LuceneTestCase.",
    "attachments": {
        "LUCENE-2642.patch": "https://issues.apache.org/jira/secure/attachment/12454445/LUCENE-2642.patch",
        "LUCENE-2642-extendAssert.patch": "https://issues.apache.org/jira/secure/attachment/12454447/LUCENE-2642-extendAssert.patch",
        "LUCENE-2642-fixes.patch": "https://issues.apache.org/jira/secure/attachment/12454462/LUCENE-2642-fixes.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-13T11:18:53+0000",
            "content": "patch for core tests only, all tests pass. ",
            "author": "Robert Muir",
            "id": "comment-12908725"
        },
        {
            "date": "2010-09-13T11:59:57+0000",
            "content": "Why not simply extend the org.junit.Assert class? This would remove use of deprecated old JUnit3 Framework completely? ",
            "author": "Uwe Schindler",
            "id": "comment-12908733"
        },
        {
            "date": "2010-09-13T12:02:06+0000",
            "content": "Why not simply extend the Assert abstract class? This would remove use of deprecated old JUnit3 Framework completely?\n\nI would like to do this under a different issue.\n\nWe cannot do this, until all assertEquals(float, float) are changed to use epsilons, for example.\n\nBy extending Assert, we can catch all the places we don't use epsilons and fix them, which\nis a great improvement, but out of scope of this issue. ",
            "author": "Robert Muir",
            "id": "comment-12908735"
        },
        {
            "date": "2010-09-13T12:04:10+0000",
            "content": "I am just afraid of extending form the old JUnit Testcase. We can simply add @Deprecated methods to asser floats without epsilon, that we can then remove.\n\nSo extend Assert and the add missing static methods for compatibility. ",
            "author": "Uwe Schindler",
            "id": "comment-12908736"
        },
        {
            "date": "2010-09-13T12:12:33+0000",
            "content": "I am just afraid of extending form the old JUnit Testcase.\n\nwe already extend this! Have you looked at LuceneTestCase lately?\n\nSo extend Assert and the add missing static methods for compatibility.\n\nPlease, i would like to keep the epsilon stuff out of this issue. All tests pass the way it is now, there is no\nproblem.\n\nWe can fix epsilons in a followup issue, and then use no junit3 code at all... as I said its a great improvement, but not necessary to mix in with this change.\n\nBy doing both at once, if somethign goes wrong, it will be more difficult to debug. Lets keep the scope under control. ",
            "author": "Robert Muir",
            "id": "comment-12908739"
        },
        {
            "date": "2010-09-13T12:59:50+0000",
            "content": "Here the patch, so LuceneTestCaseJ4 only extends Assert without importing extra crap. The double/float API of old Junit3 is emulated using static overrides. After applying patch do a ant clean, else you will get lining errors. ",
            "author": "Uwe Schindler",
            "id": "comment-12908770"
        },
        {
            "date": "2010-09-13T13:55:20+0000",
            "content": "updated patch, with all of lucene/solr and including uwe's stuff.\n\nall tests pass. ",
            "author": "Robert Muir",
            "id": "comment-12908786"
        },
        {
            "date": "2010-09-13T16:43:30+0000",
            "content": "This is great Robert!  Patch works for me (except for bizarre hang in Solr's TestSolrCoreProperties, apparently only on my machine, that's pre-existing). ",
            "author": "Michael McCandless",
            "id": "comment-12908856"
        },
        {
            "date": "2010-09-13T17:03:01+0000",
            "content": "Looks good, this is a really good step forwards. We can write old-style tests, butuse JUnit4 and can optionally add the @BeforeClass and so on  ",
            "author": "Uwe Schindler",
            "id": "comment-12908861"
        },
        {
            "date": "2010-09-13T17:11:05+0000",
            "content": "We can write old-style tests, butuse JUnit4 and can optionally add the @BeforeClass and so on \n\nYeah i've never understood why Junit4 requires all these static imports and annotations... i just care about @BeforeClass! ",
            "author": "Robert Muir",
            "id": "comment-12908866"
        },
        {
            "date": "2010-09-13T18:08:22+0000",
            "content": "Some small fixes in reflection inspection:\n\n\texclude static and abstract methods\n\tcheck native return type\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12908888"
        },
        {
            "date": "2010-09-13T18:12:38+0000",
            "content": "thanks Uwe, i can merge this into the 3x backport too. ",
            "author": "Robert Muir",
            "id": "comment-12908890"
        },
        {
            "date": "2010-09-13T18:24:19+0000",
            "content": "OK, i didnt merge the reflection fixes yet, but i backported the patch to 3x.\n\nCommitted revision 996611, 996630 (3x).\n\nWill mark the issue resolved when Uwe is out of reflection hell  ",
            "author": "Robert Muir",
            "id": "comment-12908896"
        },
        {
            "date": "2010-09-13T20:08:55+0000",
            "content": "OK i merged back all of Uwe's improvements. Thanks for the help Uwe.\n\nI think now in future issues we can clean up and improve this test case a lot.\nI felt discouraged from doing so with the previous duplication... ",
            "author": "Robert Muir",
            "id": "comment-12908979"
        },
        {
            "date": "2011-03-30T15:50:10+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013388"
        }
    ]
}