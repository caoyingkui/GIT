{
    "id": "SOLR-10059",
    "title": "In SolrCloud, every fq added via <lst name=\"appends\"> is computed twice.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.4",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "While researching another issue, I noticed that parameters appended to a query via SearchHandler's <lst name=\"appends\"> are added to the query twice in SolrCloud: once on the aggregator and again on the shard.\n\nThe FacetComponent corrects this automatically by removing duplicates. Field queries added in this fashion are however computed twice and that hinders performance on filter queries that aren't simple bitsets such as those produced by the CollapsingQueryParser.\n\nTo reproduce the issue, simply test this handler on a large enough collection, then replace \"appends\" with \"defaults\". You'll notice significant performance improvements.\n\n<requestHandler name=\"/myHandler\" class=\"solr.SearchHandler\">\n    <lst name=\"appends\">\n        <str name=\"fq\">{!collapse field=routingKey hint=top_fc}</str>\n    </lst>\n</requestHandler>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-31T04:56:49+0000",
            "content": "I am willing to work on a patch but I'd like some guidance. I see two ways to solve this:\n\n\n\tEliminate duplicate filter queries. Other parameters might however suffer from the same duplication issue so it seems like too narrow a solution.\n\tDisable RequestHandler \"appends\" when ShardParams.IS_SHARD is true. This seems like the better solution since the appended parameters should already have been added to the query by the aggregating node. I don't know if there are some corner cases that I haven't considered though.\n\n\n\nI'd appreciate some feedback. ",
            "author": "Marc Morissette",
            "id": "comment-15846394"
        },
        {
            "date": "2017-03-01T18:17:46+0000",
            "content": "SOme historical context here is that when \"distributed search\" was first added, before there was any native \"cloud support\" the want to trigger a distributed search was to specify a list of shard URLs (as a request param) for the coordinator node to query & aggregate the responses from.  A common configuration pattern was for people to put the shards (URLS) in their handler defaults in solrconfig.xml \u2013 but also have a \"shards.qt\" param that pointed at a different handler name. (to some other handler registration w/o the shards list) ... alternatively, some people deployed one solrconfig.xml file to the nodes that had data one them (and included things like defaults/appends fqs), and had completely diff solrconfig.xml for their coordinator nodes that only know about the shards param and the list of nodes to aggregate from.\n\nyou're definitely correct \u2013 as things evolved into solr cloud, the fact that things like appends fqs are being computed multiple times because they come from both the coordinator node's init params and the individual shard's (identical) init params.\n\nI think the the general approach #2 you suggested makes the most sense ... the bit of code (in RequestHandlerBase i believe?) where the defaults/invariants/appends are wrapped around/under the request params should be skipped in (some) solr cloud shard requests \u2013 but i think checking IS_SHARD is really only 1 piece of the puzzle? for completeness we should probably also check that the SolrCore says we are in solrcloud mode (to ensure the user isn't rolling their own distributed search via pre-solrcloud shard requests like i described above)\n\nthe only other thing to worry about i guess is what should happen when multi-collection requests are issued? \u2013 such as when a collection alias points to multiple collections.  Shouldn't the \"appends\" FQ params from collection1 be applied anytime a query includes collection1, and the appends FQ params from collection1 be applied any time a query includes collection2; even if those are both a single query that originated via a request to \"both_collections\" (which is an alias for \"collection1,collection2\") ?\n\nI suppose the coordinating node could include the \"source collection (alias)\" of the request as a param that the individual shards could compare with themselves to decide when they need to wrap the params?\n\n(just thinking outloud \u2013 probably a better solution)\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-15890736"
        },
        {
            "date": "2017-03-07T23:20:11+0000",
            "content": "Hoss Man It might be that existing parameters are not descriptive enough to handle every use case. We could add a new parameter to CommonParams: \"handler.chain\" or \"distrib.call.stack\" or something similar. It would be a comma delimited list of all the handlers that were involved in a distributed operation and that have forwarded their parameters to the current RequestHandler. A handler would be identified by Collection or Core Name followed by /RequestHandler. e.g. distrib.call.stack=MyCollection/MyHandler,MyCollection2/MyHandler2,... RequestHandlerBase could use this parameter to determine whether defaults, appends and initParams were already applied by the same handler up the chain.\n\nIt would not handle the case of appends in initParams that apply to different handlers in the same call chain but I would assume this rarely occurs in practice.\n\nI'd rather not add more parameters to Solr given how messy the current parameter namespace already is but I don't see a better solution. What do you think?  ",
            "author": "Marc Morissette",
            "id": "comment-15900371"
        }
    ]
}