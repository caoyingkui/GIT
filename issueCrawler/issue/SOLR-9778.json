{
    "id": "SOLR-9778",
    "title": "Make luceneMatchVersion handling easy/automatic",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I was thinking about luceneMatchVersion and how it's annoying to both explain and get right, and maintain.  I think there's a way in Solr we can do this way better:\n\nWhen an index is initialized, record the luceneMatchVersion in effect into a file in the data directory, like luceneMatchVersion.txt.  It's a file that will never be modified.\n\nThe luceneMatchVersion in effect is the first of these that are specified:\n\n\t<luceneMatchVersion> in solrconfig.xml\n\tdata/luceneMatchVersion.txt\n\torg.apache.lucene.util.Version.LATEST\n\n\n\nWith this approach, we can eliminate putting <luceneMatchVersion> into solrconfig.xml by default.  Most users will have no need to bother setting it, even during an upgrade of either an existing index, or when they re-index.  Of course there are cases where the user knows what they are doing and insists on a different luceneMatchVersion, and they can specify that still.\n\nPerhaps instead of a new file (data/luceneMatchVersion.txt), it might go into core.properties.  I dunno.\n\n(disclaimer: as I write this, I have no plans to work on this at the moment)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-11-16T18:06:56+0000",
            "author": "Erick Erickson",
            "content": "Maybe put a new file into conf? If put in core.properties it would be easy to miss one.\n\nNo strong feelings here though, just FWIW. ",
            "id": "comment-15671166"
        },
        {
            "date": "2016-11-16T18:26:42+0000",
            "author": "David Smiley",
            "content": "Maybe put a new file into conf?\n\nIf it were initialized at the time a configSet is first used, then I think that might be okay.  It could interfere with configSet sharing and read-only configSets though.  My main concern with conf for this purpose is semantics; I don't view this as configuration; it's metadata for the index.  You shouldn't go in and change this file; you would instead edit the config to override it.  But few would have a desire to do that, I think. ",
            "id": "comment-15671217"
        },
        {
            "date": "2016-11-18T15:49:59+0000",
            "author": "David Smiley",
            "content": "Further notes:\nThe initial recording of luceneMatchVersion might be named \"initialLuceneMatchVersion\" (wherever it's placed) to underscore it's the version at the time the index was created.  It's supposed to never be modified, but would potentially be reset if the index is ever re-created, or if replication pulls an index from somewhere \u2013 the initialLuceneMatchVersion should follow the index.  Same thing for restoration from a backup.  It's metadata for the index.  \n\nPerhaps it could be reset in the event of a core being loaded (or re-loaded) when there are no docs yet; that could be convenient to avoid a full-blown re-creation of the core/collection just to upgrade. You'd just need to delete all docs, commit, and issue a reload.  Users wouldn't have to know about luceneMatchVersion to update easily.\n\nI wonder if it could be placed in Lucene segment commit metadata.  It would move with the index transparently without touching various parts of Solr that would otherwise be affected. ",
            "id": "comment-15676997"
        },
        {
            "date": "2016-11-18T19:32:19+0000",
            "author": "Shawn Heisey",
            "content": "Devil's advocate comment ... although I suppose this isn't a whole lot different than many upgrade scenarios:\n\nSay this is added to 6.4.  What happens in the luceneMatchVersion.txt file if I create an index with 6.4 (with luceneMatchVersion NOT in the config), upgrade to 6.6, configure luceneMatchVersion to 6.6 in solrconfig.xml, and then double the index size by indexing new documents?  I do know that the index will consist of some segments where the terms are the result of the 6.4 analyzer settings, some segments that may have different terms (from similar input) because of the 6.6 settings, and there's a good chance that some segments will have both \u2013 where a 6.4 segment and a 6.6 segment were merged.  This situation cannot be described by a single txt file.\n\nJust like other upgrade scenarios where luceneMatchVersion is involved, if a significant bug is addressed by the analyzer changes from 6.4 to 6.6, my queries may not work right until I fully reindex. ",
            "id": "comment-15677547"
        },
        {
            "date": "2016-11-18T20:01:33+0000",
            "author": "David Smiley",
            "content": "It's still possible to shoot yourself in the foot   The main objective of this issue is to do the right thing automatically \u2013 wherein the user never specifies luceneMatchVersion.  I believe the plan above does that.\n\nOne reason to specify luceneMatchVersion in solrconfig.xml is to ensure you benefit from some analysis bug fixes after upgrading Solr without having to re-index \u2013 provided you know or have tested it's safe.  This is true with or without the protocol specified in this issue.  If luceneMatchVersion is set in solrconfig.xml to some value that differs from whatever the version was used to analyze data in the existing indexes, and you index more data, then it's true some segments with some of the same original text fragments might analyze differently.  Again, this is true with or without the protocol specified in this issue.  \n\nI suppose the ideal spot to record the luceneMatchVersion would be on the segment somehow, but I'm not sure that's possible and I don't think there's much value in that fidelity vs. the commit point metadata. ",
            "id": "comment-15677601"
        },
        {
            "date": "2016-11-18T20:38:01+0000",
            "author": "Shawn Heisey",
            "content": "I suppose the ideal spot to record the luceneMatchVersion would be on the segment somehow, but I'm not sure that's possible and I don't think there's much value in that fidelity vs. the commit point metadata.\n\nSegment merging, and the fact that query analysis happens before the index is ever examined, makes per-segment versions meaningless.\n\nThe plan sounds good to me, and you're right that the problems I described will be unaffected by whether we do it or not.  I was mostly curious about what would happen to the .txt file if those steps were taken.  Would it be updated to 6.6? ",
            "id": "comment-15677694"
        },
        {
            "date": "2016-11-18T20:49:40+0000",
            "author": "David Smiley",
            "content": "Would it be updated to 6.6?\n\nYes it would. ",
            "id": "comment-15677719"
        }
    ]
}