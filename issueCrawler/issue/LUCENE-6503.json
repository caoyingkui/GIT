{
    "id": "LUCENE-6503",
    "title": "QueryWrapperFilter discards the IndexReaderContext when delegating to the wrapped query",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.4",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Suppose I have a working Filter which depends on the context within the composite reader, e.g., one which has a global BitSet of the docs which match but needs to know the docBase and maxDoc for the individual reader in order to return the correct set to the caller.\n\nThis is wrapped into a ConstantScoreQuery in order to become part of a BooleanQuery tree.\n\nAt some other layer, the entire query tree is wrapped back into a QueryWrapperFilter by some other code which wants to cache the results as a Filter.\n\nQueryWrapperFilter has code like this:\n\n\n  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n\n\nThe call to reader().getContext() returns an AtomicReaderContext whose parent is not correctly set.\n\nThis is then passed to Weight#scorer which eventually arrives at ConstantScoreQuery#scorer, which calls Filter#getDocIdSet.\n\nSo our innermost Filter receives an AtomicReaderContext whose top-level IndexReader is not the actual top-level reader. This was detected in our code because we use a special subclass of DirectoryReader for our top-level reader and thus the filter failed. (Had it not failed, it would have silently returned the wrong results.)\n\nThe fix I have applied locally is to change the call to:\n\n\n        return weight.scorer(context, acceptDocs);\n\n\n\nThis does appear to be working, but I'm not really sure if it's OK to build the IndexSearcher using one context while passing another context to the scorer.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}