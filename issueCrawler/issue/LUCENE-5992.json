{
    "id": "LUCENE-5992",
    "title": "Version should not be encoded as a String in the index",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "The version is really \"just\" 3 (maybe 4) ints under-the-hood, but today we write it as a String which then requires spooky string tokenization/parsing when we open the index.  I think it should be encoded directly as ints.\n\nIn LUCENE-5952 I had tried to make this change, but it was controversial, and got booted.\n\nThen in LUCENE-5969, I tried again, but that issue has morphed (nicely!) into fixing all sorts of things except these three ints.\n\nMaybe 3rd time's a charm",
    "attachments": {
        "LUCENE-5992_tests.patch": "https://issues.apache.org/jira/secure/attachment/12673207/LUCENE-5992_tests.patch",
        "LUCENE-5992.patch": "https://issues.apache.org/jira/secure/attachment/12673071/LUCENE-5992.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14160140",
            "author": "Michael McCandless",
            "content": "Here's a starting patch so the factions can start duking it out:\n\nI put the readVersion/writeVersion methods inside CodecUtil.java.\nYes, it's not great that this means Version's ctor is public, but in\nCodecUtil it's at least more apparent that these methods are\ncommitting to a particular format, and that format is really \"scoped\"\nby the caller (meaning if ever we change what ints we write / how we\nencode them, the caller's own format tracking must handle that\nchange).  I put spooky javadocs and comments to convey this\nsituation.\n\nI'm also defensively writing 4 (not 3) ints since it seems at least\npossible we may once again release alpha/beta releases and it seems\nsafest to at least not preclude the possibility ... but some factions\nwant 3 ints instead.\n\nFinally, I'm encoding using vInt, not unsigned byte.  I know this is\nridiculously defensive, and surely Lucene will never get to major or\nminor or bugfix version 256 (it would be a strange world), but the\nfact is that we are using java's \"int\" for these instance vars in\nVersion.java... I can't remember whether there were factions\nupset by this.\n\nBut as is I (my faction) think the patch is ready! ",
            "date": "2014-10-06T09:37:49+0000"
        },
        {
            "id": "comment-14160155",
            "author": "Uwe Schindler",
            "content": "About the \"fixed format\" issue (if we for example in future remove add components): We could theoretically write another prefix byte as marker for the version format? Not sure if this is really good, it would just be a possibility to change the encoding format.\n\nAbout the public version ctor: I don't like this. Initially I thougth CodecUtil is part of util package, too, so it could be pkg-protected, but this is not the case  In general I would instead prefer to have the ctor hidden again, but add some static method with good comment not to use it. A ctor always makes people try to use it, especially because of Eclipse autocomplete. So better use Version.buildFromComponents(major, minor,...). This would also be consistent with parse* API. ",
            "date": "2014-10-06T10:14:14+0000"
        },
        {
            "id": "comment-14160167",
            "author": "Michael McCandless",
            "content": "If we add the format byte then we could move read/write back into Version.java and keep the ctor private ... I think I like that option. ",
            "date": "2014-10-06T10:35:17+0000"
        },
        {
            "id": "comment-14160202",
            "author": "Uwe Schindler",
            "content": "I am fine with both options. For me it is important that Version has no public ctor (under no circumstances), so people using Eclipse autocomplete do not \"naturally\" use the ctor to pass version constants to analyzers or other stuff in other public APIs. This will cause endless bug reports. A separate static method should be preferred here, because it has a \"method name\" that explains what it does. The eclipse user has to choose carefully and cannot automatically use the worst option. ",
            "date": "2014-10-06T11:28:30+0000"
        },
        {
            "id": "comment-14160240",
            "author": "Robert Muir",
            "content": "What are you defending against? In LUCENE-5969: we fixed addIndexes(Dir) to just copy the .si file too, so old SI writers are read-only, instead files() is just always stripped like CFS.\n\nSo if we need to write 4 ints, we just make a new SI that does that? But no longer must an SI \"write for versions in the future\"  ",
            "date": "2014-10-06T12:20:11+0000"
        },
        {
            "id": "comment-14160283",
            "author": "Jack Krupansky",
            "content": "What about \"versions\" of an index during the development process, like each time a change to the index format is committed? Such as the alpha and beta stages in 4.0?\n\nI'd be happier with four version ints: major, minor, patch, \"change\".\n\nAlthough, in theory, we shouldn't be changing the index format in either minor or patch releases, but bug fixes for indexing can be valid changes as well.\n\nNow, the question is whether \"change\" should reset to zero each time we branch, or should really just be an ever-increasing \"index format version number.\" The latter may make sense, but either is fine. The latter also makes sense from the perspective of the potential of successive releases which don't introduce index incompatibilities. I lean towards the latter, but still makes sense to defensively record which release wrote an index. ",
            "date": "2014-10-06T13:29:43+0000"
        },
        {
            "id": "comment-14160339",
            "author": "Michael McCandless",
            "content": "What about \"versions\" of an index during the development process, like each time a change to the index format is committed? \n\nWe are freely allowed to completely break the index format within one release.\n\nSo it's only on releasing, that we commit to a published version of the format ... I don't think we should add the 4th \"change\" int, at least not on this issue.  It's hard enough just writing and reading the 3 ints! ",
            "date": "2014-10-06T14:26:56+0000"
        },
        {
            "id": "comment-14160342",
            "author": "Michael McCandless",
            "content": "New patch.\n\nI moved write/read into Version.java, made its ctor private again, added a single-byte format header, only write 3 ints (and throw an exc if anyone ever tries to write a version whose prerelease != 0), switched to unsigned byte from vInt, and added some tests.\n\nI think it's ready. ",
            "date": "2014-10-06T14:28:25+0000"
        },
        {
            "id": "comment-14160373",
            "author": "Ryan Ernst",
            "content": "Patch LGTM. ",
            "date": "2014-10-06T15:04:51+0000"
        },
        {
            "id": "comment-14160398",
            "author": "Uwe Schindler",
            "content": "The documentation of Version#write is now incorrect. It still says \"vint\". Also this comment is now obsolete (I think): \"// NOTE: do not change this format!  If you do, you must fix all callers of this API, everywhere in the world to handle the format change:\"\nIn fact we can change it now, because of the marker byte.\n\nI had another idea: the first byte could also be the \"number of version components\" (like when writing a string). If we write version with 3 components, it is 3, 4 otherwise. Then we have full flexibility, too. ",
            "date": "2014-10-06T15:33:01+0000"
        },
        {
            "id": "comment-14160461",
            "author": "Robert Muir",
            "content": "Here is my patch. I dont want to sound like a complainer, so i just offer another solution.\n\nWhen i see version encoding itself being versioned, thats a clear sign this is going in a worse direction, not better. Keep it simple please! ",
            "date": "2014-10-06T16:30:51+0000"
        },
        {
            "id": "comment-14160515",
            "author": "Robert Muir",
            "content": "Simpler iteration. Since major/minor/bugfix etc are 'public' in Version (its clearly a thin wrapper around these and they are not an internal detail), then we don't need the toArray method.\n\nAgain, the important stuff is this: if we want to do something crazy like write massive numbers, or write alpha/beta, just make a new SIFormat. We don't need to future proof things inside the codec API. ",
            "date": "2014-10-06T17:09:29+0000"
        },
        {
            "id": "comment-14160551",
            "author": "Michael McCandless",
            "content": "+1 for this patch: it's much simpler, and takes away the whole \"versioning of the version\" problem! ",
            "date": "2014-10-06T17:33:42+0000"
        },
        {
            "id": "comment-14160574",
            "author": "Uwe Schindler",
            "content": "+1, I like the static method name! ",
            "date": "2014-10-06T17:51:00+0000"
        },
        {
            "id": "comment-14160611",
            "author": "Ryan Ernst",
            "content": "+1 to the latest patch.  Can we add @lucene.internal to docs for Version.fromBits method? ",
            "date": "2014-10-06T18:17:11+0000"
        },
        {
            "id": "comment-14160983",
            "author": "Michael McCandless",
            "content": "I'll commit Rob's last patch, and add @lucene.internal... ",
            "date": "2014-10-06T21:27:24+0000"
        },
        {
            "id": "comment-14161009",
            "author": "ASF subversion and git services",
            "content": "Commit 1629769 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1629769 ]\n\nLUCENE-5992: encode version using 3 ints, not String, for Lucene 5.x indices ",
            "date": "2014-10-06T21:37:14+0000"
        },
        {
            "id": "comment-14161016",
            "author": "Robert Muir",
            "content": "Thanks Mike (i am intermittent), i just wanted to add tests and so on too.\n\nI also hate that we pass FIS to SIWriter (it just made tests hard and seems bogus??? so i removed that too).\n\nsee patch ",
            "date": "2014-10-06T21:42:45+0000"
        },
        {
            "id": "comment-14161032",
            "author": "Michael McCandless",
            "content": "Thanks Rob, those tests and the removal of FIS from SIWriter look great ... I'll commit shortly & backport to 5.x ",
            "date": "2014-10-06T21:51:03+0000"
        },
        {
            "id": "comment-14161084",
            "author": "ASF subversion and git services",
            "content": "Commit 1629774 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1629774 ]\n\nLUCENE-5992: add SI tests; remove FieldInfos from SegmentInfosWrite.write ",
            "date": "2014-10-06T22:01:52+0000"
        },
        {
            "id": "comment-14161101",
            "author": "ASF subversion and git services",
            "content": "Commit 1629775 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1629775 ]\n\nLUCENE-5992: encode version using 3 ints, not String, for Lucene 5.x indices; add SI tests; remove FieldInfos from SegmentInfosWrite.write ",
            "date": "2014-10-06T22:11:07+0000"
        },
        {
            "id": "comment-14332686",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:01:20+0000"
        }
    ]
}