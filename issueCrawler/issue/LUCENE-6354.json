{
    "id": "LUCENE-6354",
    "title": "Add minChildren and maxChildren options to ToParentBlockJoinQuery",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "This effectively allows to ignore parent documents with too few children documents via the minChildren option or too many matching children documents via the maxChildren option.",
    "attachments": {
        "LUCENE-6354.patch": "https://issues.apache.org/jira/secure/attachment/12703465/LUCENE-6354.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14353378",
            "author": "Martijn van Groningen",
            "date": "2015-03-09T18:46:38+0000",
            "content": "Attached a draft patch implementing minChildren / maxChildren. "
        },
        {
            "id": "comment-14353439",
            "author": "Mikhail Khludnev",
            "date": "2015-03-09T19:27:33+0000",
            "content": "can we keep nextDoc() unchanged and keep this predicate in TwoPhase.matches() eg.\n\n    public TwoPhaseIterator asTwoPhaseIterator() {\n      // suppress check on default values\n      if(minChildren==1 && maxChildren==Integer.MAX_VALUE){\n        return null;\n      }else{\n        return new TwoPhaseIterator() {\n          \n          @Override\n          public boolean matches() throws IOException {\n            return (getChildCount() >= minChildren && getChildCount() <= maxChildren);\n          }\n          \n          @Override\n          public DocIdSetIterator approximation() {\n            return BlockJoinScorer.this;\n          }\n        };\n      }\n    }\n\n\n? "
        },
        {
            "id": "comment-14355324",
            "author": "Martijn van Groningen",
            "date": "2015-03-10T17:59:20+0000",
            "content": "I think just adding the check in TwoPhaseIterator doesn't work? The TwoPhaseIterator and the scorer need to be in sync. Also if just the ToParentBlockJoinQuery is used in a search then the TwoPhaseIterator isn't used. So I think the check does need to be in the nextDoc() method.\n\nI do think it makes sense the let ToParentBlockJoinQuery implement asTwoPhaseIterator(), since that this query get faster. Maybe the TwoPhaseIterator being returned, can be based on the parentBits? Maybe this should be done in a different issue? "
        },
        {
            "id": "comment-14355718",
            "author": "Mikhail Khludnev",
            "date": "2015-03-10T21:10:33+0000",
            "content": "I added a primitive test into the patch. \nMartijn van Groningen you are right, but it makes me worry, because such conditional logic \n\nAlso if just the ToParentBlockJoinQuery is used in a search then the TwoPhaseIterator isn't used.\n\n is not obvious to me. \n\nAdrien Grand isn't it a way convenient to make TwoPhaseIterator flow work always i.e. make it mandatory? \nin this case I don't need ugly wrapper in my test (it's not a proposal, but just a workaround, to enforce TwoPhaseIterator magic)\n\n\ns.search(\n        // I wonder why not just bjq?\n        new FilteredQuery( bjq, parentsFilter,FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY)\n    , expect.size()*2+1);\n\n  "
        },
        {
            "id": "comment-14356076",
            "author": "Adrien Grand",
            "date": "2015-03-11T01:29:41+0000",
            "content": "Adrien Grand isn't it a way convenient to make TwoPhaseIterator flow work always i.e. make it mandatory?\n\nYou could throw an exception in the nextDoc()/advance() methods from the scorer, but I'm not sure how well it would work in practice. For instance the default BulkScorer always uses the scorer regardless of whether it supports approximations or not. So a query implemented this way would fail when it is used as the top-level query or under a combination of constant-score or disjunction queries (since these queries delegate the bulk scorer).\n\nEven though I get the performance trap that you want to avoid, I think it would be quite bad in terms of API to require to not use the scorer directly if an approximation is available? I don't have any better ideas for it though.  Maybe a good compromise would be to have a small test that approximations from block joins are propagated through other queries that we are about for block joins (eg. conjunctions?). "
        },
        {
            "id": "comment-14356805",
            "author": "Mikhail Khludnev",
            "date": "2015-03-11T12:23:48+0000",
            "content": "ok. I still consider composition and OO-blah-blah as a holy cow. It make the last patch is really scary: \n\n\tI extracted public abstract class BlockJoinScorer extends Scorer because their methods are exposed to ToParentBlockJoinCollector and other.\n\texisting bjq scorer is moved into DefaultBlockJoinScorer extends BlockJoinScorer w/o min/maxChildren support.\n\tthen TwoPhaseBlockJoinScorer wraps DefaultBlockJoinScorer when needed in BlockJoinWeight.scorer()\n\tTwoPhaseBlockJoinScorer is a delegate and literally mimics TwoPhaseIterator.asDocIdSetIterator(), which is necessary because of Java language limitation.\n\tnow bjq works as a top level and as a filter leg, and doesn't break bjqcollector.\n\n\n\nPerhaps it's too cumbersome for particular jira, I just want to emphasize the importance of generic TwoPhaseIterator scorers. \n\n "
        },
        {
            "id": "comment-14375642",
            "author": "Martijn van Groningen",
            "date": "2015-03-23T09:56:35+0000",
            "content": "I think it is better to just have different Scorer implementations than introducing BlockJoinScorer?\n\nIn the initial patch the minChildren / maxChildren functionality just adds two additional checks in the Scorer and there are many if checks already in the Scorer. The scorer should just override asTwoPhaseIterator(), which should make it better. I don't think it is worth to introduce a whole new concept just for minChildren/maxChildren, especially if it uses two phase iterator.\n\nIn general I think that for each score mode a dedicated Scorer should be implemented. Also the fact the ToParentBlockJoinQuery has \"private\" methods for ToParentBlockJoinCollector also prohibits  certain optimizations. I think that ToParentBlockJoinCollector should have its own Scorer to somehow, then many checks can be removed too.\n\nTo get back to the issue here, for now I think that the minChildren/maxChildren check should be added to the existing scorer and this query should use the two phase iterator. "
        },
        {
            "id": "comment-14385981",
            "author": "Martijn van Groningen",
            "date": "2015-03-29T22:04:06+0000",
            "content": "Attached new version:\n\n\tadded hascode/equals and extractTerms() to query impls.\n\tadded optimization for in the case an index has only 1 segment\n\tupdated to the latest two phase iterator changes.\n\n "
        },
        {
            "id": "comment-14386236",
            "author": "Martijn van Groningen",
            "date": "2015-03-30T06:00:10+0000",
            "content": "oops, I added the last patch to the wrong issue... "
        },
        {
            "id": "comment-16664223",
            "author": "Ben Weisburd",
            "date": "2018-10-25T19:48:56+0000",
            "content": "It would be great if this could be merged to unblock https://github.com/elastic/elasticsearch/issues/10043 "
        }
    ]
}