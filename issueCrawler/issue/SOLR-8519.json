{
    "id": "SOLR-8519",
    "title": "Implement ResultSetMetaDataImpl.getColumnCount()",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "DBVisualizer uses getColumnCount to determine how many columns to try to display from the result.",
    "attachments": {
        "SOLR-8519.patch": "https://issues.apache.org/jira/secure/attachment/12783873/SOLR-8519.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-07T21:03:05+0000",
            "author": "Kevin Risden",
            "content": "Requires ResultSetMetaDataImpl class from SOLR-8513 to be merged first. ",
            "id": "comment-15088105"
        },
        {
            "date": "2016-01-22T18:28:12+0000",
            "author": "Kevin Risden",
            "content": "This patch adds some framework to get information about a tuples fields which will be used for type information as well. The fields List will be in a random order until Tuple.fields returns a Map that is backed by LinkedHashMap for the keys.\n\nJoel Bernstein It might make sense to add to the Tuple instead of trying to do this all directly in the ResultSet metadata. This would make the Tuple more usable without the JDBC driver component. Thoughts on this approach? ",
            "id": "comment-15112822"
        },
        {
            "date": "2016-01-22T19:23:08+0000",
            "author": "Kevin Risden",
            "content": "Improve patch to not create ResultSetMetaData on each call to ResultSet#getMetadata.  ",
            "id": "comment-15112913"
        },
        {
            "date": "2016-01-24T05:07:31+0000",
            "author": "Joel Bernstein",
            "content": "I was thinking about about having the SQLHandler populate the meta-data in the first tuple. The approach would be to wrap a MetaDataStream around the TupleStream compiled from the SQL statement. The MetaDataStream would then inject the meta-data into the first tuple in the read() method, and simply pass through all the other tuples. This would also allow us to pass an ordered list of fields in the meta-data. ",
            "id": "comment-15114204"
        },
        {
            "date": "2016-01-24T15:39:21+0000",
            "author": "Joel Bernstein",
            "content": "We can use this ticket to workout the git workflow. How does this sound?:\n\n1) Create a pull request on apache lucene-solr repo. \n2) I'll pull to my local repo.\n3) I can either make changes locally or comment on the pull request.\n4) When it's ready to commit I'll push to the lucene-solr repo. We can probably squash all the commits into a one commit for the push. I need to figure out the commands for this.\n ",
            "id": "comment-15114353"
        },
        {
            "date": "2016-01-24T15:54:27+0000",
            "author": "Kevin Risden",
            "content": "Hmmm I think that adding metadata to the first tuple could work. The other thought I had was why not pass it back as part of the context? Currently the context is being stripped out by the JSONTupleStream and only looking for the tuples. This would basically act as the header which could hold any metadata necessary. ",
            "id": "comment-15114363"
        },
        {
            "date": "2016-01-24T15:59:34+0000",
            "author": "Kevin Risden",
            "content": "I've been using git and creating patches previous to the git migration. I can create PRs as well no problem. I'm migrating my local copy over to the new Git currently.\n\nJust for reference here is the flow I was using before the git migration with git locally:\n\nnew work on JIRA\n1. git checkout -b JIRA#\n2. work work work\n3. git add .\n4. git commit -m \"STUFF\"\n5. git format-patch --stdout -p --no-prefix trunk > ~/Downloads/$(git rev-parse --abbrev-ref HEAD).patch\n6. attach patch to JIRA\n\nupdating local work based on comments\n1. git checkout JIRA#\n2. work work work\n3. git add .\n4. git commit --amend\n5. git format-patch --stdout -p --no-prefix trunk > ~/Downloads/$(git rev-parse --abbrev-ref HEAD).patch\nattach patch to JIRA\n\napplying someones patch\n1. git checkout -b JIRA#\n2. git apply -p0 PATCH_FILE\n3. git diff ",
            "id": "comment-15114366"
        },
        {
            "date": "2016-01-24T18:32:23+0000",
            "author": "Joel Bernstein",
            "content": "That's another option. If we add a header from the SQLHandler that would work as well. Or we could make the first tuple from the SQLHandler be the header tuple. In all three scenarios we would want a flag to turn this header off and on. The JDBC driver would always have the header on. Clients using the HTTP interface could turn it off or on.\n\nSo here are the three options:\n\n1) Add the meta-data to first real tuple in the result set.\n2) Have the first tuple in the result set be a meta-data tuple.\n3) Add a header to the json with meta-data. \n\nI think #1 is the easiest path forward. ",
            "id": "comment-15114428"
        },
        {
            "date": "2016-01-24T18:36:41+0000",
            "author": "Joel Bernstein",
            "content": "Only thing about #1 is that if there is an empty result set there is no first tuple. ",
            "id": "comment-15114432"
        },
        {
            "date": "2016-01-24T18:38:54+0000",
            "author": "Kevin Risden",
            "content": "I like #2 since then don't have to worry about conflicting field names with field names that could come back from a result set. #2 is a nice compromise between #1 and #3. ",
            "id": "comment-15114437"
        },
        {
            "date": "2016-01-24T18:44:49+0000",
            "author": "Joel Bernstein",
            "content": "Ok let's go with #2 with an option to turn it off and on, the JDBC Driver always has it on. This also solves the problem of the empty result set. ",
            "id": "comment-15114439"
        },
        {
            "date": "2016-01-24T18:59:15+0000",
            "author": "Joel Bernstein",
            "content": "We can still use the approach of wrapping a MetaDataStream around the final TupleStream. The last step in SQLTupleStreamParser can wrap the MetaDataStream. We have access to the SQLVisitor at this step.\n\nAll the JdbcTests will need to be adjusted for this, which is fine because it will become a standard part of the JdbcTest cases to assert the result meta data.\n\nWe don't want to have to touch TestSQLHandler though, so by default the MetaDataTuple should be turned off. ",
            "id": "comment-15114459"
        },
        {
            "date": "2016-01-24T19:03:18+0000",
            "author": "Kevin Risden",
            "content": "Yea that sounds reasonable to me. The JdbcTests might not have to change very much since the DriverImpl can force a property to be set like how aggregationMode is done now. ",
            "id": "comment-15114462"
        },
        {
            "date": "2016-01-24T20:13:07+0000",
            "author": "Kevin Risden",
            "content": "Here is an initial patch based on Joel Bernstein's outline. It needs to be cleaned up a bit with comments and some more tests. I passed fields and aliases back as just a starting point. ",
            "id": "comment-15114509"
        },
        {
            "date": "2016-01-25T02:20:08+0000",
            "author": "Joel Bernstein",
            "content": "Patch looks good. What other tests were you thinking of adding? ",
            "id": "comment-15114655"
        },
        {
            "date": "2016-01-25T14:06:42+0000",
            "author": "Kevin Risden",
            "content": "Added some comments to explain the added MetadataStream and includeMetadata parameter. No new tests since existing tests should cover this.\n\nThe only thing I don't like about this approach is \"fields\" and \"aliases\" are hardcoded in the tuple.fields map. \n\nJoel Bernstein - I think this should be good to go. ",
            "id": "comment-15115233"
        },
        {
            "date": "2016-01-25T14:33:22+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I'll take a look at this today. ",
            "id": "comment-15115289"
        },
        {
            "date": "2016-01-25T18:10:51+0000",
            "author": "Joel Bernstein",
            "content": "The latest patch looks great! I don't plan on making any changes to it. Running precommit now.\n\nAs we start implementing the column type methods I think it makes sense to read the first data Tuple and interpret the types. We can wrap the internal SolrStream in Pushback stream an push the first Tuple back after reading it. ",
            "id": "comment-15115680"
        },
        {
            "date": "2016-01-25T18:11:24+0000",
            "author": "Kevin Risden",
            "content": "Joel Bernstein - I opened a PR for this which has the same changes as the latest patch. https://github.com/apache/lucene-solr/pull/2 Let me know if PRs are easier and I can do them instead of patches moving forward. ",
            "id": "comment-15115681"
        },
        {
            "date": "2016-01-25T18:14:17+0000",
            "author": "Kevin Risden",
            "content": "\nAs we start implementing the column type methods I think it makes sense to read the first data Tuple and interpret the types. We can wrap the internal SolrStream in Pushback stream an push the first Tuple back after reading it.\n\nYea I was thinking about types and this seems reasonable to me. I didn't realize Pushback was an option.\n\nPS - My comment about PR above just crossed paths with your comment. Didn't realize you were already looking at this. I can put up PRs for the other JIRAs moving forward if that helps. ",
            "id": "comment-15115684"
        },
        {
            "date": "2016-01-25T18:34:56+0000",
            "author": "Joel Bernstein",
            "content": "Actually that patches are working out well. Let's keep going with them. ",
            "id": "comment-15115717"
        },
        {
            "date": "2016-01-25T18:57:23+0000",
            "author": "Joel Bernstein",
            "content": "Committed: https://github.com/apache/lucene-solr/commit/c99698b6dd4754b0742409feae90c833e2cfa60a ",
            "id": "comment-15115765"
        }
    ]
}