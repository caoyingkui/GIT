{
    "id": "LUCENE-2272",
    "title": "PayloadNearQuery has hardwired explanation for 'AveragePayloadFunction'",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The 'explain' method in PayloadNearSpanScorer assumes the AveragePayloadFunction was used. This patch adds the 'explain' method to the 'PayloadFunction' interface, where the Scorer can call it. Added unit tests for 'explain' and for \n{Min,Max}\nPayloadFunction.",
    "attachments": {
        "PNQ-patch2.txt": "https://issues.apache.org/jira/secure/attachment/12453456/PNQ-patch2.txt",
        "payloadfunctin-patch.txt": "https://issues.apache.org/jira/secure/attachment/12436326/payloadfunctin-patch.txt",
        "PNQ-patch.txt": "https://issues.apache.org/jira/secure/attachment/12439571/PNQ-patch.txt",
        "PNQ-patch1.txt": "https://issues.apache.org/jira/secure/attachment/12444936/PNQ-patch1.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-02-19T14:51:32+0000",
            "content": "This patch adds the 'explain' method to the 'PayloadFunction' interface, where the Scorer can call it. Added unit tests for 'explain' and for \n{Min,Max}\nPayloadFunction. ",
            "author": "Peter Keegan",
            "id": "comment-12835764"
        },
        {
            "date": "2010-02-24T13:54:00+0000",
            "content": "Peter,\n\nCouple of comments:\n\n\tThe base explain method can't be abstract.   Something like:\n\npublic Explanation explain(int docId){\n    Explanation result = new Explanation();\n    result.setDescription(\"Unimpl Payload Function Explain\");\n    result.setValue(1);\n    return result;\n  };\n\n\nshould do the trick\n\tThe changes don't seem thread safe any more since there are now member variables.  It may still be all right, but have you looked at this aspect?\n\n ",
            "author": "Grant Ingersoll",
            "id": "comment-12837788"
        },
        {
            "date": "2010-03-23T14:36:42+0000",
            "content": "There is a bug in PayloadNearQuery. If there are multiple top level spans that match the query, only the payloads of the first one are retrieved. This patch fixes this bug by iterating over all the top level spans to get the payloads (see 'setFreqCurrentDoc')\n\n> The base explain method can't be abstract. Something like\nAh, right. This is included in the patch\n\n>The changes don't seem thread safe any more since there are now member variables. It may still be all right, but have you looked at this aspect?\n\nI guess that could be said about PayloadTermSpanScorer and PayloadNearSpanScorer, too (payloadScore, payloadsSeen). As for the PayloadFunction classes, they seem lightweight enough to be created with each query. Is there a better pattern?\n\nPeter\n\n ",
            "author": "Peter Keegan",
            "id": "comment-12848726"
        },
        {
            "date": "2010-05-19T14:20:22+0000",
            "content": "Revisiting this because the PayloadFunction 'explain' methods return the wrong value and aren't thread safe, as Grant points out. A new patch is attached which eliminates the member variables. ",
            "author": "Peter Keegan",
            "id": "comment-12869142"
        },
        {
            "date": "2010-05-24T10:14:55+0000",
            "content": "Thanks Peter \u2013 this looks important to fix.\n\nThe patch, confusingly, seems to recursively include itself!  Ie I see PNQ-patch1.txt in the patch with its own diff lines.  Strange.\n\nAlso, how  come your patch removes generics / @Override / @lucene.experimental, etc.? ",
            "author": "Michael McCandless",
            "id": "comment-12870551"
        },
        {
            "date": "2010-08-30T20:16:50+0000",
            "content": "Well, this is embarrassing. \n\nI used Eclipse to generate the patch, and didn't exclude an existing text file in the project that already contained the patch. I have regenerated the patch against the trunk, which also restored the generics and missing annotations. Sorry for the confusion.\n\nI also changed my JIRA e-mail so I don't miss updates on issues sent to me vs. the java-dev list. ",
            "author": "Peter Keegan",
            "id": "comment-12904315"
        },
        {
            "date": "2010-08-30T20:19:21+0000",
            "content": "Wow, weird timing, Peter.  I was just looking at this today, hoping to finish it and up you put a patch. ",
            "author": "Grant Ingersoll",
            "id": "comment-12904317"
        },
        {
            "date": "2010-08-30T20:32:13+0000",
            "content": "That is wierd! I hope you didn't spend too much time on it.\n\nThanks,\nPeter\n ",
            "author": "Peter Keegan",
            "id": "comment-12904328"
        },
        {
            "date": "2010-08-30T21:10:55+0000",
            "content": "Committed to trunk and 3.x ",
            "author": "Grant Ingersoll",
            "id": "comment-12904335"
        },
        {
            "date": "2010-10-29T13:08:03+0000",
            "content": "reopening for possible 2.9.4/3.0.3 backport. ",
            "author": "Robert Muir",
            "id": "comment-12926267"
        },
        {
            "date": "2010-11-27T23:25:34+0000",
            "content": "Resolving again as this issue will not be backported to 2.9/3.0 branches. ",
            "author": "Uwe Schindler",
            "id": "comment-12964470"
        },
        {
            "date": "2011-03-30T15:50:15+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013413"
        }
    ]
}