{
    "id": "LUCENE-8123",
    "title": "Question about how to retrieve by TFIDFSimilarity query on lucene",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Invalid",
        "affect_versions": "7.2",
        "status": "Resolved",
        "type": "Bug",
        "components": [
            "core/query/scoring"
        ],
        "fix_versions": []
    },
    "description": "Hi, all.\n     Recently, we were performing experiment on Lucene based on TFIDF.\n     We want to get the similar documents from the corpus, of which the similarity between each document  (d) and the given query (q) is no less than a threshold. We use the following scoring function.\n    sum(tf(t,d) * idf(t) * tf(t,q) * idf(t))/(norm(d) * norm(q))\n    where norm is defined as sqrt( sum(tf(t,d) * idf(t) * tf(t,d) * idf(t)) ).\n\n    We perform this query by scanning the related docIds of all terms in the query, and the related docIds are derived from function  PostingsEnum docEnum = MultiFields.getTermDocsEnum(indexReader, \"text\", term.bytes()) . After the inner products of these related documents have been computed, the final similarities are computed by dividing these inner products by their norms.\n\n    However, when the documents scale up, e.g., more than ten million titles of twitter's text filed each on average has 10 terms, the runtime is unacceptable (more than ten seconds) since we always need to merge 0.5~2 million documents to generate the inner products. Does Lucene provide more efficient interface to generate ranked results based on TFIDF, or directly filter out the dissimilar documents (in lucene core) for a given threshold in the range of (0, 1)?\n\nBest\nWenhai",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16315241",
            "date": "2018-01-07T12:51:04+0000",
            "content": "Please use the mailing list for questions. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16315285",
            "date": "2018-01-07T13:59:00+0000",
            "content": "Got it, thanks.\n\n ",
            "author": "Wenhai"
        }
    ]
}