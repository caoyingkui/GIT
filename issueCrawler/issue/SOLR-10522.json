{
    "id": "SOLR-10522",
    "title": "Duplicate keys in \"collations\" object with JSON response format",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "spellchecker"
        ],
        "type": "Bug",
        "fix_versions": [
            "6.6"
        ],
        "affect_versions": "6.5",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "After upgrading Solr 6.3 -> 6.5 I've noticed a change in how json response writer outputs \"collations\" response key when spellchecking is enabled (wt=json&json.nl=arrarr)\n\nSolr 6.3:\n\n\"collations\":\n    [\n      [\"collation\",\n{\n          \"collationQuery\":\"the\",\n          \"hits\":48,\n          \"maxScore\":\"30.282\",\n          \"misspellingsAndCorrections\":\n          [\n            [\"thea\",\"the\"]]}\n],\n      [\"collation\",\n{\n          \"collationQuery\":\"tea\",\n          \"hits\":3,\n          \"maxScore\":\"2.936\",\n          \"misspellingsAndCorrections\":\n          [\n            [\"thea\",\"tea\"]]}\n],\n      ...\n\nSolr 6.5:\n\n\"collations\":{\n      \"collation\":\n{\n        \"collationQuery\":\"the\",\n        \"hits\":43,\n        \"misspellingsAndCorrections\":\n        [\n          [\"thea\",\"the\"]]}\n,\n      \"collation\":\n{\n        \"collationQuery\":\"tea\",\n        \"hits\":3,\n        \"misspellingsAndCorrections\":\n        [\n          [\"thea\",\"tea\"]]}\n,\n        ...\n\nSolr 6.5 outputs object instead of an array, and it has duplicate keys which is not valid for JSON format.\n\nAny help is appreciated.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-19T17:01:02+0000",
            "content": "It seems that https://issues.apache.org/jira/browse/SOLR-9972 introduced this change ",
            "author": "Nikita Pchelintsev",
            "id": "comment-15975087"
        },
        {
            "date": "2017-04-26T15:04:21+0000",
            "content": "I haven't looked at the code, but if I had to guess, I would imagine that the internal representation is NamedList, which doesn't have a problem with multiple mappings where the key is the same.\n\nDo we need to deal with backward compatiblity at all, or do we consider the new format to be completely broken?  Were XML and Javabin responses also affected by SOLR-9972? ",
            "author": "Shawn Heisey",
            "id": "comment-15984960"
        },
        {
            "date": "2017-04-26T23:57:16+0000",
            "content": "The XML response works because of the way XML is processed. But the tags are still incorrectly identified as lst as opposed to the correct arr.\n\nAs you point out changing from a NamedList to an ArrayList will do the trick. The changes need to occur on the org.apache.solr.handler.component.SpellCheckComponent.java object at lines : 302, 437 and 516\n\nIf you change the type to ArrayList and the associated add element code the issue appears to be resolved (with my limited testing) ",
            "author": "Zoran Avtarovski",
            "id": "comment-15985771"
        },
        {
            "date": "2017-05-01T16:51:13+0000",
            "content": "We might need to re-think our work with SOLR-9972.  My apologizes Christine Poerschke in that when I reviewed SOLR-9972, I hadn't realized we had more than 1 json format and that fixing one might break the others. \n\nprior to SOLR-9972, our \"flat\" (default) json looked like this for the collation section:\n\n\"collations\":[\n    \"collation\",{\n        \"collationQuery\":\"lowerfilt:(+faith +hope +loaves)\",\n        \"hits\":1,\n        \"misspellingsAndCorrections\":[\n        \"fauth\",\"faith\",\n        \"home\",\"hope\",\n        \"loane\",\"loaves\"]},\n    \"collation\",{\n        \"collationQuery\":\"lowerfilt:(+faith +hope +love)\",\n        \"hits\":1,\n        \"misspellingsAndCorrections\":[\n        \"fauth\",\"faith\",\n        \"home\",\"hope\",\n        \"loane\",\"love\"]}]\n\n\n\n...by having \"collations\" as a NamedList, we avoid having duplicate keys with \"collation\".  But the \"arrntv\" format chokes around the \"collationQuery\":\n\n\n\"collations\":\n[\n    {\"name\":\"collation\",{\n    \"type\":\"str\",\"value\":\"collationQuery\":\"lowerfilt:(+faith +hope +loaves)\",\n    \"hits\":1,\n    \"misspellingsAndCorrections\":\n    [\n        {\"name\":\"fauth\",\"type\":\"str\",\"value\":\"faith\"},\n        {\"name\":\"home\",\"type\":\"str\",\"value\":\"hope\"},\n        {\"name\":\"loane\",\"type\":\"str\",\"value\":\"loaves\"}]}},\n    {\"name\":\"collation\",{\n    \"type\":\"str\",\"value\":\"collationQuery\":\"lowerfilt:(+faith +hope +love)\",\n    \"hits\":1,\n    \"misspellingsAndCorrections\":\n    [\n        {\"name\":\"fauth\",\"type\":\"str\",\"value\":\"faith\"},\n        {\"name\":\"home\",\"type\":\"str\",\"value\":\"hope\"},\n        {\"name\":\"loane\",\"type\":\"str\",\"value\":\"love\"}]}}]\n\n\n\n...So SOLR-9972 changed \"collations\" to be a SimpleOrderedMap.  Now we get this for \"arrntv\":\n\n\"collations\":{\n    \"collation\":{\n    \"collationQuery\":\"lowerfilt:(+faith +hope +loaves)\",\n    \"hits\":1,\n    \"misspellingsAndCorrections\":\n    [\n        {\"name\":\"fauth\",\"type\":\"str\",\"value\":\"faith\"},\n        {\"name\":\"home\",\"type\":\"str\",\"value\":\"hope\"},\n        {\"name\":\"loane\",\"type\":\"str\",\"value\":\"loaves\"}]},\n    \"collation\":{\n    \"collationQuery\":\"lowerfilt:(+faith +hope +love)\",\n    \"hits\":1,\n    \"misspellingsAndCorrections\":\n    [\n        {\"name\":\"fauth\",\"type\":\"str\",\"value\":\"faith\"},\n        {\"name\":\"home\",\"type\":\"str\",\"value\":\"hope\"},\n        {\"name\":\"loane\",\"type\":\"str\",\"value\":\"love\"}]}}\n\n\n\n...so now it renders valid json.  But under \"collations\", we have duplicate keys, right?  If there is more than 1 collation, the \"collation\" key keeps getting overwritten.  \n\nSo then, it seems that SOLR-9972 is only a partial fix for \"arrntv\" because while we have valid json, there are duplicate keys.  But worse, SOLR-9972 broke the default json format, both from a backwards-compatibility standpoint, and also from a correctness standpoint as this is also subject to duplicate keys.\n\nI'd think reverting SOLR-9972 would leave us in a better situation than the current one.  But can someone suggest a solution that would result in:\n\n\tvalid json for all the various json formats we support\n\tno duplicate keys when there are multiple collations\n\tno breaking backwards compatibility until 7.0, except for the completely-broken \"arrntv\" case ? (6.5 changes notwithstanding, breaking backwards here was a bug in my opinion).\n\n\n\n??\n\n ",
            "author": "James Dyer",
            "id": "comment-15991076"
        },
        {
            "date": "2017-05-01T22:51:49+0000",
            "content": "I thought about this when I ran into the issue and one solution which might work and still accomodate legacy use is to name the first collation key \"collation\" and then append a numeric value to each subsequent key. eg\n        \"collations\":[\n            \"collation\",\n{...},\n            \"collation1\",{...}\n,\n            \"collation2\",\n{...},\n            \"collation3\",{...}\n,\n            \"collation4\",\n{...}\n        ]\n\nThis way, legacy applications looking for the \"collation\" key would be fine but the json format would also be valid and enable parsers to parse through all the collations.\n\nJust a suggestion.  ",
            "author": "Zoran Avtarovski",
            "id": "comment-15991702"
        },
        {
            "date": "2017-05-04T17:43:57+0000",
            "content": "Hi. A little late joining the conversation here.\n\nSo SOLR-9972 intended to fix JSON output for json.nl=arrntv and other things got inadvertently broken in the process, oops. Might one way forward be to do the following three things:\n1. revert the SOLR-9972 change\n2. add logic (in SpellCheckComponent) to reject json.nl=arrntv as not-yet-supported\n3. from 7.0 onwards support json.nl=arrntv for the SpellCheckComponent (and this may entail non-backcompat changes) ",
            "author": "Christine Poerschke",
            "id": "comment-15997129"
        },
        {
            "date": "2017-05-05T13:00:18+0000",
            "content": "I do not think SpellCheckComponent (or any other part of Solr) should have to do anything special to cater to the various json formats we now support.  In my opinion, the response writer should never output invalid json, and it should be its responsibility to complain when it encounters something it cannot support.  If it was fixed centrally, it would make the output more consistent as similar scenarios would be handled the same way throughout the application.  This would also be a bit more future-proof because it isn't exactly clear that the Solr objects that hold response data can product invalid responses, and it doesn't seem likely every new output would be tested against all of these formats.  \n\nI think a better move forward would be:\n1. revert SOLR-9972.\n2. open a ticket that arrntv can sometimes product invalid json, using this as an example use-case.  Having it reject unsupportable objects would be a valid first step.\n3. Maybe in 7.x revamp the response objects to be more response-writer-friendly, less xml-centric ? ",
            "author": "James Dyer",
            "id": "comment-15998296"
        },
        {
            "date": "2017-05-08T18:28:17+0000",
            "content": "Commit 571264bcc007a3d853f678dd7ac5b529644e938d in lucene-solr's branch refs/heads/master from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=571264b ]\n\nSOLR-10522: Revert \"SOLR-9972: SpellCheckComponent collations and suggestions returned as a JSON object rather than a list\"\n\nThis reverts commit 4cd3d15da8ef77ef50e2bda91ed6d3c6e87b5426. ",
            "author": "ASF subversion and git services",
            "id": "comment-16001263"
        },
        {
            "date": "2017-05-08T18:29:17+0000",
            "content": "Commit 82b78bd95e95b95b9e7527d9396be24a0dc221df in lucene-solr's branch refs/heads/master from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=82b78bd ]\n\nSOLR-10522: Revert \"SOLR-9972: SpellCheckComponent collations and suggestions returned as a JSON object rather than a list\" ",
            "author": "ASF subversion and git services",
            "id": "comment-16001266"
        },
        {
            "date": "2017-05-08T18:30:45+0000",
            "content": "Commit 68f51e6a128e0d56ae37b070834bb36e00ceca50 in lucene-solr's branch refs/heads/branch_6x from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=68f51e6 ]\n\nSOLR-10522: Revert \"SOLR-9972: SpellCheckComponent collations and suggestions returned as a JSON object rather than a list\"\n\nThis reverts commit 4cd3d15da8ef77ef50e2bda91ed6d3c6e87b5426. ",
            "author": "ASF subversion and git services",
            "id": "comment-16001272"
        },
        {
            "date": "2017-05-08T18:30:52+0000",
            "content": "Commit 854347d5e09ea92f1d738458a05fc2224ca3d7aa in lucene-solr's branch refs/heads/branch_6x from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=854347d ]\n\nSOLR-10522: Revert \"SOLR-9972: SpellCheckComponent collations and suggestions returned as a JSON object rather than a list\" ",
            "author": "ASF subversion and git services",
            "id": "comment-16001274"
        },
        {
            "date": "2017-05-08T18:33:47+0000",
            "content": "fixed for 6.6 by reverting SOLR-9972. ",
            "author": "James Dyer",
            "id": "comment-16001283"
        }
    ]
}