{
    "id": "SOLR-12974",
    "title": "RandomSort not consistent in SolrCloud Mode",
    "details": {
        "type": "Bug",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "6.5.1"
    },
    "description": "Expected behaviour of RandomSort\u00a0is that given the same random field name (random_<seed>) which acts a seed, the sorting order will remain consistent with the same version of Solr Index.\n\nFrom schema.xml:\n\n<!-- The \"RandomSortField\" is not used to store or search any data. You can declare fields of this type it in your schema to generate pseudo-random orderings of your docs for sorting or function purposes. The ordering is generated based on the field name and the version of the index. As long as the index version remains unchanged, and the same field name is reused, the ordering of the docs will be consistent. If you want different psuedo-random orderings of documents, for the same version of the index, use a dynamicField and change the field name in the request. -->\n\n\u00a0\n\nIn master slave mode, replication happens based on index version. If version number of slave is\u00a0different than that of master, replication is done by slaves and the index number is updated to match the index version of master.\n\nHowever in SolrCloud mode, observation has been that replicas of the same shard do not\u00a0maintain the same version number at all times even though the documents are same\u00a0and consistent.\u00a0\n\nThis has been previously discussed in mailing list as well.\nSolrCloud works very differently than the old master-slave replication.\n\nThe index is NOT copied from the leader to the other replicas, except\n in extreme recovery circumstances.\n\nEach replica builds its own copy of the index independently from the\n others. Due to slight timing differences in the indexing operations,\n and possible actions related to transaction log replay on node restart,\n each replica may end up with a different index layout. There also could\n be differences in the number of deleted documents. Unless something\n goes really wrong, all replicas should contain the same live documents.\n\u00a0\n\nWhen a query to a shard is made which has 2 or more replicas, any replica is chosen to respond to the query. Now, if all replicas do not have the same index number, RandomSort will generate random hash seed differently for the same\u00a0random_<seed> field name.\n\nIn the source code of RandomSort class, in line 86, it mentions the use of index version (of shard) to create random hash seed.\n\nHence when querying a Solr Collection, for the same query, Solr is giving different results depending on version mismatch in replicas as well as based on which replica is serving request each time.\n\n\u00a0\n\nExample of Solr Query where random field is being used:\n\nhttps://solr-stage.mydomain.com:8983/solr/mycollection/select?wt=json&q=*:*&defType=edismax&fl=id&boost=if(query({!v='documentDate:[2018-11-07 TO *]'}),sum(div(scale(random_SW84gaDAf3RynhOyGQDZlgAAAYc1,0,1),1),sub(1,div(1,1))),if(or(exists(query({!v='documentType:sponsored'})),exists(query({!v='documentType:featured'}))),sum(div(scale(random_SW84gaDAf3RynhOyGQDZlgAAAYc1,0,1),4),sub(1,div(1,4))), if(or(exists(query({!v='documentType:listing'})),exists(query({!v='documentType:promotional'}))),sum(div(scale(random_SW84gaDAf3RynhOyGQDZlgAAAYc1,0,1),2),sub(1,div(1,2))),scale(random_SW84gaDAf3RynhOyGQDZlgAAAYc1,0,1))))",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16679921",
            "content": "I'd guess that the number is generated when the doc arrives at the replica and that it would need to be assigned\u00a0by the leader before the document was sent to the followers.\n\nIt wouldn't do to have it assigned before it got to the leader, that wouldn't handle the case of the document being sent to the leader directly via HTTP.\n\nI don't know how much extra\u00a0work this would\u00a0require on\u00a0the leader's part.\n\n\u00a0 ",
            "author": "Erick Erickson",
            "date": "2018-11-08T15:43:36+0000"
        },
        {
            "id": "comment-16680981",
            "content": "One thing you can do for a workaround is to upgrade to 7.x and use the new TLOG or PULL replica types.  Downside to this is that it requires upgrading to a new major version.  If you have a test environment, that may not be a major problem.\n\nI suspect that it would be very difficult to guarantee the same index version when using NRT replicas, which was the only type before 7.x.  I could be wrong about that. ",
            "author": "Shawn Heisey",
            "date": "2018-11-09T07:21:25+0000"
        }
    ]
}