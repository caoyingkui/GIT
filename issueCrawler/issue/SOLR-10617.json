{
    "id": "SOLR-10617",
    "title": "JDBCStream: support more data types",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "It would be nice if JDBCStream could support Decimal types as well as Timestamp-related types, and CLOBs.",
    "attachments": {
        "SOLR-10617.patch": "https://issues.apache.org/jira/secure/attachment/12866681/SOLR-10617.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-05T21:49:30+0000",
            "content": "This adds support for Date, Time, Timestamp, Number (BigDecimal, etc) and Clob.  The doc comment was changed to indicate more accurately the distinction between a JDBC type and a Java type, and to include these new ones.\n\nThis upgrades the hsqldb version we use for tests so that the test could have CLOB support.  One of the DIH tests needed a small adjustment to cope with this upgrade.\n\nDennis Gove, Could you review? ",
            "author": "James Dyer",
            "id": "comment-15999007"
        },
        {
            "date": "2017-05-09T00:26:21+0000",
            "content": "I've only taken a quick look at this point, but I do want to point this out.\n\n\n} else if (jdbcType == Types.DATE || jdbcType == Types.TIME || jdbcType == Types.TIMESTAMP) {\n  valueSelectors[columnIdx] = new ResultSetValueSelector() {\n    public Object selectValue(ResultSet resultSet) throws SQLException {\n      if (jdbcType == Types.TIME) {\n        Time sqlTime = resultSet.getTime(columnNumber);\n        return resultSet.wasNull() ? null : sqlTime.toString();\n      } else if (jdbcType == Types.DATE) {\n        Date sqlDate = resultSet.getDate(columnNumber);\n        return resultSet.wasNull() ? null : sqlDate.toString();\n      } else {\n        Timestamp sqlTimestamp = resultSet.getTimestamp(columnNumber);\n        return resultSet.wasNull() ? null : sqlTimestamp.toInstant().toString();\n      }\n    }\n\n    public String getColumnName() {\n      return columnName;\n    }\n  };\n}\n\n\n\nThe value selectors are constructed on open so that we can avoid executing the same conditional check on each row in the result set. By putting the jdbc type check inside of selectValue it is now repeating the same conditional for each row, even though every row will end up going down the same path.\n\nWhile splitting these checks up does result in repeated code, the performance saving is well worth it. ",
            "author": "Dennis Gove",
            "id": "comment-16001842"
        },
        {
            "date": "2017-05-09T15:21:06+0000",
            "content": "Thanks Dennis Gove for your initial feedback.  I think it'd be useful to have support for more types, so once you're happy, I'd like to commit this.  A new patch is attached.\n\nI was also wondering...\n\n\tDoes the Interface at the bottom need to be in its own source file per our guidelines?\n\tHow does the java.sql.Array bit work?  I haven't encountered sql ARRAY type before, and I'm not seeing anything on it in the docs/tests/etc.\n\n ",
            "author": "James Dyer",
            "id": "comment-16002859"
        },
        {
            "date": "2017-05-09T15:42:17+0000",
            "content": "I agree. I think adding support for additional types is a great thing. I'll take a closer look tonight. ",
            "author": "Dennis Gove",
            "id": "comment-16002906"
        },
        {
            "date": "2017-05-11T02:38:08+0000",
            "content": "This all looks good. I've just added a new patch with some additional comments on why in open() we switch from using the Java class type to the SQL data type. ",
            "author": "Dennis Gove",
            "id": "comment-16005813"
        },
        {
            "date": "2017-05-11T02:41:43+0000",
            "content": "Does the Interface at the bottom need to be in its own source file per our guidelines?\nThe interface is only used internally. I've moved it inside the class body so it's a clear part of the JDBCStream class.\n\nHow does the java.sql.Array bit work? I haven't encountered sql ARRAY type before, and I'm not seeing anything on it in the docs/tests/etc.\nSome databases are able to return Array objects. For example, Postgres's jsonb function jsonb_build_array (https://www.postgresql.org/docs/9.5/static/functions-json.html) can result in an array existing in the resultset. The idea here is that an object array would be placed in the Tuple under the field name. ",
            "author": "Dennis Gove",
            "id": "comment-16005815"
        },
        {
            "date": "2017-05-11T13:06:33+0000",
            "content": "The idea here is that an object array would be placed in the Tuple under the field name.\n\nHow about type conversion?  In this class we're going to pains to convert all the sql types to the 4 supported tuple types?  Wouldn't the elements of the Array be subject to type conversion also?  My concern here is the Array functionality might not work as intended.  I do not see where it is documented or tested. ",
            "author": "James Dyer",
            "id": "comment-16006376"
        },
        {
            "date": "2017-05-11T14:08:23+0000",
            "content": "The JdbcStream is also used as part of the Apache Calcite integration. As part of that work there was some code added to support Arrays. We have some time before the 7.0 release,  so I think it makes sense to take a little time and review how the JdbcStream is hooked into Calcite. ",
            "author": "Joel Bernstein",
            "id": "comment-16006472"
        },
        {
            "date": "2017-05-11T14:18:23+0000",
            "content": "Because the JdbcStream in now part of the Parallel SQL structure, does it make sense to wrap this ticket into a bigger piece of work that is coming around expanding SQL and JDBC functionality. Here is what's on the table:\n\n1) Hooking in the Avatica Jdbc driver SOLR-9963.\n2) Expanding the general functionality of Parallel SQL. No ticket yet but this will be a big push in the coming months.\n3) The addition of the sql Streaming Expression SOLR-10623.\n\nOr we could create a separate internal JdbcStream just for the Calcite integration in case we need to do something Calcite specific. Then we can continue to make progress on the JdbcStream to external sources.\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-16006490"
        },
        {
            "date": "2017-05-11T14:40:02+0000",
            "content": "Joel Bernstein I would rather not expand the scope of this issue to address additional concerns, but we can follow up with more tickets as needed.  I only bring up the Array support because it is in the same part of the code, yet the spirit of the implementation didn't match the rest of the class.  If its intended as an internal-only feature, that is fine to me.  I only wish there were a comment in there saying as much.  In the future, it might be nice to (better) support Array types from external sources, but this could be a lot of work for what might prove to be a niche use-case.\n\nDo you see anything done here that blocks the efforts on the 3 items you mention?  Any reason why this can't be committed now?  Without BigDecimal support, its very difficult to work with numeric types from db2 and Oracle.  The date/time/clob types would also be very helpful if we could support these near-term. ",
            "author": "James Dyer",
            "id": "comment-16006544"
        },
        {
            "date": "2017-05-11T14:48:55+0000",
            "content": "I agree this is a useful ticket and we shouldn't block it's progress. \n\nI think the best approach is to have an internal JdbcStream for the Calcite Integration that supports specific Calcite needs.\n\nWe could simply copy the existing JdbcStream and rename it CalciteJdbcStream and use it in the SQLHandler. Then this ticket can progress without worrying about the larger Parallel SQL structure.\n\nJames Dyer, would you be OK with doing this as part of this commit? ",
            "author": "Joel Bernstein",
            "id": "comment-16006562"
        },
        {
            "date": "2017-05-11T15:46:47+0000",
            "content": "Joel Bernstein  Please review the updated patch.  With a small refactoring we can avoid all the copy/paste.  If this is in line with what you'd want, do you think it would make sense to go one step further and combine CalciteJDBCStream with SqlHandler#SqlHandlerStream and locate this in solr-core? ",
            "author": "James Dyer",
            "id": "comment-16006657"
        },
        {
            "date": "2017-05-11T15:56:41+0000",
            "content": "Looks good. From a standpoint of separating the Parallel SQL logic I think this patch is ready to go. And yes I think CalciteJDBCStream belongs in core.  ",
            "author": "Joel Bernstein",
            "id": "comment-16006672"
        },
        {
            "date": "2017-05-11T16:54:58+0000",
            "content": "ok, here's another patch that moves CalciteJDBCStream into oas.Handler in solr-core.  Also, the sha1, licence & notice are updated for the newer version of hsqldb, in an effort to get precommit to pass.  My aim is to commit this tomorrow. ",
            "author": "James Dyer",
            "id": "comment-16006772"
        },
        {
            "date": "2017-05-11T21:00:27+0000",
            "content": "Another patch. Tests & precommit pass.  Javadoc for JDBCStream renders ok.  I plan to commit this tomorrow. ",
            "author": "James Dyer",
            "id": "comment-16007186"
        },
        {
            "date": "2017-05-12T13:45:10+0000",
            "content": "Commit e61b5b34bf14b9addd98eeafdad43b92e6208d5f in lucene-solr's branch refs/heads/master from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e61b5b3 ]\n\nSOLR-10617: JDBCStream to support additional types, minor refactoring to separate out CalciteJDBCStream, upgrade hsqldb for JDBCStream & DIH tests. ",
            "author": "ASF subversion and git services",
            "id": "comment-16008141"
        },
        {
            "date": "2017-05-12T13:55:16+0000",
            "content": "Commit 7fe57aded128a60f64d8482ec13a56ad8d00feac in lucene-solr's branch refs/heads/branch_6x from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7fe57ad ]\n\nSOLR-10617: JDBCStream to support additional types, minor refactoring to separate out CalciteJDBCStream, upgrade hsqldb for JDBCStream & DIH tests. ",
            "author": "ASF subversion and git services",
            "id": "comment-16008149"
        },
        {
            "date": "2017-05-12T19:38:24+0000",
            "content": "Commit 6e68e9ea8d94232d7e3aef8f7d33c1bcf058f4cc in lucene-solr's branch refs/heads/master from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6e68e9e ]\n\nSOLR-10617: run \"ant jar-checksums\" to correct the hsqldb.jar.sha1 file ",
            "author": "ASF subversion and git services",
            "id": "comment-16008614"
        },
        {
            "date": "2017-05-12T19:38:57+0000",
            "content": "Commit 6de364045bae5f90c05b9e7680186fdac0ad3d79 in lucene-solr's branch refs/heads/branch_6x from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6de3640 ]\n\nSOLR-10617: run \"ant jar-checksums\" to correct the hsqldb.jar.sha1 file ",
            "author": "ASF subversion and git services",
            "id": "comment-16008615"
        },
        {
            "date": "2017-11-27T22:57:58+0000",
            "content": "Changed the Fix Version to 7.0 as that's the version it's currently listed in the CHANGES.txt file ",
            "author": "Varun Thacker",
            "id": "comment-16267744"
        }
    ]
}