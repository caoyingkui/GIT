{
    "id": "LUCENE-4750",
    "title": "Convert DrillDown to DrillDownQuery",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "DrillDown is a utility class for creating drill-down queries over a base query and a bunch of categories. We've been asked to support AND, OR and AND of ORs. The latter is not so simple as a static utility method though, so instead we have some sample code ...\n\nRather, I think that we can just create a DrillDownQuery (extends Query) which takes a baseQuery in its ctor and exposes add(CategoryPath...), such that every such group of categories is AND'ed with other groups, and internally they are OR'ed. It's very similar to how you would construct a BooleanQuery, only simpler and specific to facets.\n\nInternally, it would build a BooleanQuery and delegate rewrite, createWeight etc to it.\n\nThat will remove the need for the static utility methods .. or we can keep static term() for convenience.",
    "attachments": {
        "LUCENE-4750.patch": "https://issues.apache.org/jira/secure/attachment/12568483/LUCENE-4750.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-04T15:00:40+0000",
            "content": "+1, this would make the API simpler.\n\nI think we should be able to do all work in rewrite?  And then throw UOE from createWeight? ",
            "author": "Michael McCandless",
            "id": "comment-13570316"
        },
        {
            "date": "2013-02-04T15:06:01+0000",
            "content": "I think we should be able to do all work in rewrite? And then throw UOE from createWeight?\n\nMaybe. I was just thinking of a 'complete' Query impl, just in case someone doesn't call rewrite before any other methods. ",
            "author": "Shai Erera",
            "id": "comment-13570318"
        },
        {
            "date": "2013-02-04T15:18:20+0000",
            "content": "Well it's guaranteed that IndexSearcher will call Query.rewrite ... so it should be fine to only implement rewrite (well, and .toString, etc.) ",
            "author": "Michael McCandless",
            "id": "comment-13570321"
        },
        {
            "date": "2013-02-04T16:21:36+0000",
            "content": "Mike: Yes, you dont need to implement createWeiggt. That was always like this, there are lots of queries shipped with Lucene that have no weight (e.g. MTQ). The Query base class handles all of this. ",
            "author": "Uwe Schindler",
            "id": "comment-13570360"
        },
        {
            "date": "2013-02-07T22:42:45+0000",
            "content": "Initial patch, still w/ nocommits, but the basic idea seems to work.\n\nBut: I had to disable 2 tests, because the new DDQ requires that OR'd paths share the same dim (CP.components[0]) and these 2 tests didn't ... but that makes me wonder: is there ever a \"real\" use case when we shouldn't enforce this? ",
            "author": "Michael McCandless",
            "id": "comment-13574010"
        },
        {
            "date": "2013-02-07T22:43:09+0000",
            "content": "I think we should get this done before drill sideways (LUCENE-4748). ",
            "author": "Michael McCandless",
            "id": "comment-13574011"
        },
        {
            "date": "2013-02-08T05:00:12+0000",
            "content": "About the two tests. This:\n\nQuery q3 = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n\nShould be converted to two add()}?\n\nThe second test, instead of nuking it, make it testAndOfOrs? Not sure if we have any such test, so it would be a good idea anyway.\n\nAnd yes, I think that we should just prevent across dimension ORs. It is still a helper class, someone can build his own such query if he wishes to. Unlike \"OR between CPs of the same dim\", I think that \"OR between different dims\" is not so common...\n\nAbout the patch:\n\n\n\tI've wanted to do it for a long time \u2013 can we have just one ctor with FSP? DDQ should be called from a search context, so passing FIP is odd. Can you check if there's any real code that needs to pass FIP?\n\t\n\t\tSame goes for the static term() method.\n\t\n\t\n\n\n\n\n\tThis check in add() if (paths[0].length == 0) is odd, since you check it again for every CP later. Maybe move it to inside the paths.length==1?\n\n\n\n\n\tRegarding baseQuery, while reviewing LUCENE-4748 I wrote that DDQ should probably not take a baseQuery, but rather let the user wrap from the outside (while DDQ can have a static helper class). Do you not need it there?\n\t\n\t\tOr ... such users (like DrillSideways) can pass baseQuery=null in that case and do the final wrapping themselves? If that would work for sideways, then I think taking a baseQuery is good as it simplifies usage for apps.\n\t\n\t\n\n\n\nThat looks good, thanks for taking care of this! ",
            "author": "Shai Erera",
            "id": "comment-13574250"
        },
        {
            "date": "2013-02-09T18:04:05+0000",
            "content": "Mike, I'm migrating the patch to after the packages reorg, and I want to handle the nocommits. In the process I thought about two things:\n\n\n\tShouldn't rewrite() call res.rewrite()? We don't know what baseQuery will rewrite too...\n\tPerhaps instead of keeping a List<Query> drillDownQueries, we can build the BQ on-the-fly in .add()? We can then use it in toString and rewrite directly, vs now that rewrite always creates a new BQ.\n\t\n\t\tBTW, is that an error to not create a new BQ on every rewrite? I don't think so, but want to verify...\n\t\n\t\n\n\n\nIf we do the 2nd, then we can check in the ctor already if baseQuery is a BQ and just use it to add the drill-down clauses to? If we need to know what baseQuery was, we can clone() it? Is it perhaps too much? ",
            "author": "Shai Erera",
            "id": "comment-13575216"
        },
        {
            "date": "2013-02-09T18:11:46+0000",
            "content": "Oh, and if we do build the result BQ on the fly, it will make implementing equals() and hashCode() very simple ... ",
            "author": "Shai Erera",
            "id": "comment-13575219"
        },
        {
            "date": "2013-02-09T18:35:54+0000",
            "content": "Mike, I'm migrating the patch to after the packages reorg, and I want to handle the nocommits.\n\nThanks Shai!\n\nShouldn't rewrite() call res.rewrite()? We don't know what baseQuery will rewrite too...\n\nThis isn't actually necessary: IndexSearcher will call rewrite on whatever we return.\n\nPerhaps instead of keeping a List<Query> drillDownQueries, we can build the BQ on-the-fly in .add()? We can then use it in toString and rewrite directly, vs now that rewrite always creates a new BQ.\n\nI think that's good?\n\nBTW, is that an error to not create a new BQ on every rewrite? I don't think so, but want to verify...\n\nI don't think it's an error to not make a new Query on every rewrite.  I suppose there is some risk that an app might run the query while continuing to add drill downs in another thread ... but apps just shouldn't do that ...\n\nThat said ... I don't really like how toString shows impl details (eg, the $facet field name), vs eg just the CP/s of each drill-down, but I think that's pretty minor ...\n\nOh, and if we do build the result BQ on the fly, it will make implementing equals() and hashCode() very simple ...\n\nGood! ",
            "author": "Michael McCandless",
            "id": "comment-13575228"
        },
        {
            "date": "2013-02-09T20:38:28+0000",
            "content": "If we do the 2nd, then we can check in the ctor already if baseQuery is a BQ and just use it to add the drill-down clauses to? If we need to know what baseQuery was, we can clone() it? Is it perhaps too much?\n\nI thought more about this ... while this is a tempting optimization ... I think it will mess up scoring in general, because if the original query was using coord, then adding those clauses will mess this up?  Maybe we could do this if the original query isn't using coord?  But maybe leave this as future TODO optimization ... it seems dangerous  ",
            "author": "Michael McCandless",
            "id": "comment-13575259"
        },
        {
            "date": "2013-02-09T20:49:33+0000",
            "content": "I don't really like how toString shows impl details (eg, the $facet field name), vs eg just the CP/s of each drill-down, but I think that's pretty minor ...\n\nThat's the current state of the patch anyway. Creating a BQ on-the-fly won't change it. And I'm not sure if it's bad .. that way, toString shows you the query that is executed, so e.g. if you indexed into multiple category lists, you see that right-away. Although, I agree it may be redundant information for those who index into one category list...\n\nMaybe we could do this if the original query isn't using coord? But maybe leave this as future TODO optimization\n\nOk. ",
            "author": "Shai Erera",
            "id": "comment-13575260"
        },
        {
            "date": "2013-02-09T21:29:39+0000",
            "content": "Patch updated to trunk + handles all nocommit. I moved to create a BQ on-the-fly, and implemented hashCode() / equals(). Also implemented clone() (there's a test showing what would happen if we don't).\n\n.rewrite() throws exception if no baseQuery is given AND no drill-down categories too. However, if BQ has at least one clause (either baseQuery was given, or at least one drill-down category added), it permits it. If only baseQuery was given, it will rewrite to it, so I see no reason to throw an exception. ",
            "author": "Shai Erera",
            "id": "comment-13575271"
        },
        {
            "date": "2013-02-09T22:22:26+0000",
            "content": "+1, patch looks great, thanks Shai!\n\nCan we strengthen the javadocs to call out that baseQuery can be null,\nand this means \"pure browse\"?  Or maybe a ctor that doesn't take a\nbaseQuery?  I feel like it's non-obvious / not advertised now ... ",
            "author": "Michael McCandless",
            "id": "comment-13575289"
        },
        {
            "date": "2013-02-10T06:13:57+0000",
            "content": "Thanks Mike, I added another ctor which doesn't take a base query and noted the \"pure browsing\" behavior if you pass null to the 2nd ctor.\n\nI think that's ready, I'll commit shortly. ",
            "author": "Shai Erera",
            "id": "comment-13575354"
        },
        {
            "date": "2013-02-10T07:00:11+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1444482\n\nLUCENE-4750: convert DrillDown to DrillDownQuery ",
            "author": "Commit Tag Bot",
            "id": "comment-13575362"
        },
        {
            "date": "2013-02-10T07:15:56+0000",
            "content": "Committed to trunk and 4x. Thanks Mike! ",
            "author": "Shai Erera",
            "id": "comment-13575366"
        },
        {
            "date": "2013-02-10T07:22:11+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1444484\n\nLUCENE-4750: convert DrillDown to DrillDownQuery ",
            "author": "Commit Tag Bot",
            "id": "comment-13575368"
        },
        {
            "date": "2013-05-10T10:34:43+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654308"
        }
    ]
}