{
    "id": "LUCENE-7521",
    "title": "Simplify PackedInts",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Task"
    },
    "description": "We have a lot of specialization in PackedInts about how to keep packed arrays of longs in memory. However, most use-cases have slowly moved to DirectWriter and DirectMonotonicWriter and most specializations we have are barely used for performance-sensitive operations, so I'd like to clean this up a bit.",
    "attachments": {
        "LUCENE-7521.patch": "https://issues.apache.org/jira/secure/attachment/12835109/LUCENE-7521.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15605115",
            "author": "Adrien Grand",
            "date": "2016-10-25T12:04:17+0000",
            "content": "Here is a patch. It removes the Direct* and Packed*ThreeBlocks impls which were just specializations of Packed64 for given numbers of bits per value. It also makes sure that PackedInts.fastestFormatAndBits doesn't use the PACKED_SINGLE_BLOCK format anymore so that we can remove it in Lucene 8. "
        },
        {
            "id": "comment-15605337",
            "author": "Michael McCandless",
            "date": "2016-10-25T13:34:08+0000",
            "content": "+1!\n\nLook at all that removed code  "
        },
        {
            "id": "comment-15605358",
            "author": "Yonik Seeley",
            "date": "2016-10-25T13:44:50+0000",
            "content": "Are any of these formats used by FieldCacheImpl (that was moved to Solr?)\nIt's hard to tell at first blush, I may have to resort to prints... "
        },
        {
            "id": "comment-15605482",
            "author": "Adrien Grand",
            "date": "2016-10-25T14:36:06+0000",
            "content": "Yes they are.  "
        },
        {
            "id": "comment-15605644",
            "author": "Yonik Seeley",
            "date": "2016-10-25T15:40:52+0000",
            "content": "OK, so to avoid slowdowns (or more memory usage) in the FieldCache, some options include:\n\n\tMake PackedInts extensible and move the unwanted-by-lucene implementations to Solr\n\tSince PackedInts is so tied to the FieldCache, simply copy the whole \"packed\" package to Solr, like was done with the \"uninverted\" package\n\n\n "
        },
        {
            "id": "comment-15606537",
            "author": "Adrien Grand",
            "date": "2016-10-25T21:29:16+0000",
            "content": "Option 2 sounds easier so I can look into it if you think it is necessary. "
        },
        {
            "id": "comment-15608318",
            "author": "Yonik Seeley",
            "date": "2016-10-26T12:32:54+0000",
            "content": "I assume these specializations were added because they made a difference (and hence still do make a difference in Solr when using the FieldCache).  I'd certainly want to do a bunch of performance testing to try and quantify worst-case slowdowns before making any decision to ditch them or not.  Seems easier just to keep them (in lucene or solr).   "
        },
        {
            "id": "comment-15689447",
            "author": "Toke Eskildsen",
            "date": "2016-11-23T09:03:28+0000",
            "content": "I was involved in the original PackedInts implementation, where I did quite a bit of performance testing of the two different approaches: Optimal memory packing (Packed64) and word-aligned packing (Packed64SingleBlock). They were named different back then, but the principles and the performance-relevant code parts were about the same. The JIRA is LUCENE-1990. The conclusion then was that aligned won in a few cases but added quite a lot of complexity, so it was scrapped.\n\nTwo years later the aligned version was re-introduced in LUCENE-4062. Again there were some performance testing. Performance characteristics differed depending on CPU structure and in-memory array size (cache utilization really). Overall it seemed that aligned packing was faster, but not by much on the i7 (desktop & Xeon). \n\nOne important observation from the JIRA is that only the BPVs (Bits Per Value) 3, 5, 6, 7, 9, 10, 12 and 21 that differ in representation (and get/set algorithm) between packed and aligned. There's some poor graphs from an old comparison of those values on http://ekot.dk/misc/packedints/padding.html where contiguous=packed and padding=aligned. This was for a small (10M values, AFAIR) set. Note how the performance difference between the implementation varies a lot, depending on CPU type.\n\nLong story longer, I still favour having only 1 underlying format (\"optimal\" packed): Too little gain in too few cases for a high code complexity cost with aligned. On a related node, a high-quality micro-benchmark for structures like these would be great. "
        },
        {
            "id": "comment-15690132",
            "author": "Adrien Grand",
            "date": "2016-11-23T13:43:05+0000",
            "content": "Thanks Toke for pointing to these benchmarks. I agree the gain is not worth the complexity. "
        },
        {
            "id": "comment-15690275",
            "author": "Yonik Seeley",
            "date": "2016-11-23T14:41:16+0000",
            "content": "The rational for this patch looked to be \"most specializations we have are barely used for performance-sensitive operations\".\nI would definitely categorize FieldCache usage in Solr as performance-sensitive, so I thought maybe you were only talking about usage in Lucene (since the FieldCache was recently moved from Solr to Lucene).  Is this the case?\n\nIn the interests of being data-driven, it seemed like the approach should be to either:\n1) benchmark solr's fieldcache usage w/o Direct* and Packed*ThreeBlocks impls and see what the impact is\n2) make a copy of PackedInts in Solr (and use it in the FieldCache) so Lucene can immediately simplify PackedInts w/o regard for FieldCache (#1 could still be done at a later time)\n "
        },
        {
            "id": "comment-15691118",
            "author": "Toke Eskildsen",
            "date": "2016-11-23T19:24:47+0000",
            "content": "Just to be clear, I was only talking about the bit structures optimal-packed vs. word-aligned. Whether or not the performance/complexity trade-off is good enough for keeping the Direct*- and Packed*ThreeBlocks-implementations (which are both optimal-packed and word-aligned by nature) is harder to judge from the old performance tests: They differ a lot more across CPU architectures. "
        }
    ]
}