{
    "id": "SOLR-7570",
    "title": "Config APIs should not modify the ConfigSet",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Originally discussed here: http://mail-archives.apache.org/mod_mbox/lucene-dev/201505.mbox/%3CCAMJgJxSXCHxDzJs5-C-pKFDEBQD6JbgxB=-Xp7u143eKmgp61w@mail.gmail.com%3E\n\nThe ConfigSet used to create a collection should be read-only. Changes made via any of the Config APIs should only be applied to the collection where the operation is done and no to other collections that may be using the same ConfigSet. As discussed in the dev list: \n\nWhen a collection is created we should have two things, an immutable part (the ConfigSet) and a mutable part (configoverlay, generated schema, etc). The ConfigSet will still be placed in ZooKeeper under \"/configs\" but the mutable part should be placed under \"/collections/$COLLECTION_NAME/\u2026\"\n\nAlan Woodward suggested: \n\nA nice way of doing it would be to make it part of the SolrResourceLoader interface.  The ZK resource loader could check in the collection-specific zknode first, and then under configs/, and we could add a writeResource() method that writes to the collection-specific node as well.  Then all config I/O goes via the resource loader, and we have a way of keeping certain parts immutable.",
    "attachments": {
        "SOLR-7570.patch": "https://issues.apache.org/jira/secure/attachment/12735673/SOLR-7570.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-27T20:03:39+0000",
            "author": "Alan Woodward",
            "content": "Here's the first cut of an idea.\n\n\n\tAdds a writeResource(String, byte[], Location) method to SolrResourceLoader (Location can be LOCAL, COLLECTION, CONFIGSET)\n\tSolrResourceLoader takes both a local instance dir and a shared config dir.  These can be the same if you're not using a configset.\n\tThe standard resource loader looks in three places for resources:\n\t\n\t\tcore instance dir\n\t\tconfigset\n\t\tclasspath\n\t\n\t\n\tThe ZK resource loader looks in four places:\n\t\n\t\tcore instance dir\n\t\tcollection-specific config\n\t\tzk config\n\t\tclasspath\n\t\n\t\n\n\n\nYou can write to either the local core instance dir, or to the collection-specific config (I added CONFIG as a location in case we want to use that later for things like specifying where a particular resource was found, but that can be taken out if it's not adding anything now).\n\nWriting to the collection-specific config uses version-tracking to implement optimistic concurrency.\n\nThere are tests for the standard resource loader and the ZK resource loader.\n\nThis is still pretty rough around the edges, and I haven't run the full test suite or started cutting over existing code to using the new API, but it's a start.  What do people think? ",
            "id": "comment-14561614"
        },
        {
            "date": "2015-05-28T16:15:53+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I like the patch, the changes in ZkSolrResourceLoader look great. One question in my mind is, will the LOCAL changes make sense for SolrCloud mode? when would one want to change a single core? Also, looks like the collection-specific znode is /$COLLECTION_NAME/config, we currently have \"/collections/$COLLECTION_NAME/...\" for stuff like state.json, would it make more sense for the collection specific config to be in /collections/$COLLECTION_NAME/config/ ?\n\nI do think that this may conflict with the discussions going on in SOLR-5955 and email list about mutable/immutable configsets and collection specific changes... I think we should make a decision before committing any more code related to this. ",
            "id": "comment-14563190"
        },
        {
            "date": "2015-05-28T17:06:26+0000",
            "author": "Noble Paul",
            "content": "\n\tDo we have a plan on the backcompat ? What happens to the existing configoverlay.json etc ?\n\tWhat happens if I really wish to store the config changes shared between collections. It is a common usecase\n\n ",
            "id": "comment-14563258"
        },
        {
            "date": "2015-05-29T08:19:29+0000",
            "author": "Alan Woodward",
            "content": "will the LOCAL changes make sense for SolrCloud mode?\n\nI was thinking it might come in useful for things like PeerSync, or possibly per-core roles.\n\nI'll change the collection-specific znode to conform with the existing setup.\n\nBack-compatibility shouldn't be a problem, as existing installations will have their overlays read from the shared config, up until they make a change, at which point an overlay will be written to the collection config, which takes precedence.  I still need to work out how this works with ConfListeners though.\n\nChanges shared between collections should be done through a different API, I think.  Something like the configset API being discussed on SOLR-5955 would be more appropriate for that. ",
            "id": "comment-14564398"
        },
        {
            "date": "2015-05-29T10:19:51+0000",
            "author": "Noble Paul",
            "content": "Changes shared between collections should be done through a different API, I think. Something like the configset API being discussed on SOLR-5955 would be more appropriate for that.\n\nThose changes will be rare and I would say let them upload full files using a config upload API\n\nChanges shared between collections should be done through a different API, I think\n\nCan we make it a property of the configset called \"shareable\". We should use an extra empty node in the conf dir called SHAREABLE , which signifies that this configset is shareable and overlay extra can be written there . Which will ensure that the overlay etc will be written to the configset dir itself.  ",
            "id": "comment-14564527"
        },
        {
            "date": "2015-06-01T12:31:24+0000",
            "author": "Alan Woodward",
            "content": "I think that's making things overcomplicated.  Whether or not a specific config setting is updated via overlay or via XML file changes is an implementation detail.  I'd rather we just made configs immutable (at least through this API), and overlays always written to the collection-specific config.  If you want to update the overlay for multiple collections, you could use aliases, or set collection=coll1,coll2 etc on the query? ",
            "id": "comment-14567249"
        },
        {
            "date": "2015-06-02T04:58:15+0000",
            "author": "Noble Paul",
            "content": "I think that's making things overcomplicated.\n\nI agree with you . But we have to find a sane way to share mutable configs and it is an extremely common usecase\n\nHere is another suggestion\n\nEvery collection , by default, stores the mutable stuff at /collections/$COLLECTION_NAME/conf . Alternately, it should be possible to specify the ZNODE where you would store the mutable stuff during collection creation. This enables the user to specify a common ZNODE for multiple collections \n ",
            "id": "comment-14568523"
        },
        {
            "date": "2015-06-02T07:37:01+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "But we have to find a sane way to share mutable configs and it is an extremely common usecase\nI agree with what I think Alan is saying here. In summary: \n\n\tConfigSets are all shareable meaning, you create a collection using a configset, it doesn't matter if there are other collections already using it or not.\n\tChanges made via config APIs to a collection are specific to the collection where the request was done. Changes are stored in /collections/$COLLECTION_NAME/conf.\n\tChanges to configsets need a different API, or file upload. If I remember correctly, collections are watching the configset znode, and may be reloaded after a watch is triggered. We should keep this as a way to edit shared configsets, users would for example, upload a new solrconfig.xml and then touch the configset. This should reload all collections using that configset as we do now.\n\n ",
            "id": "comment-14568707"
        },
        {
            "date": "2015-06-02T11:27:42+0000",
            "author": "Noble Paul",
            "content": "I guess you guys are missing the point here. What I'm suggesting is make the mutable conf location configurable on a per collection basis. By default (if no extra param is passed) it will be /collections/$COLLECTION_NAME/conf . This will enable users to reuse mutable conf too. For example , when I create a collection I can specify mutableconfdir=/collections/commonConfDir/conf and every collection which has the same property will share the same node for mutable configs\n\nThis is common where you have one collection per user. You expect the config to be exactly identical for each user. I wish to use the schema API to change schema for all users at once . \n\nWe are in agreement reagarding everything else.\n\nChanges to configsets need a different API, or file upload. If I remember correctly, collections are watching the configset znode, and may be reloaded after a watch is triggered.\n\nNot yet, \nIIRC It only check for the mutable stuff . But, adding that check is trivial\n\nThe idea is to discourage users from editing files. They are error prone and dangerous and we want everyone to use the config APIs as much as possible\n ",
            "id": "comment-14568970"
        },
        {
            "date": "2015-06-03T12:01:42+0000",
            "author": "Alan Woodward",
            "content": "What I'm suggesting is make the mutable conf location configurable on a per collection basis\n\nOK, that seems reasonable.\n\nThere are a few moving parts here, so what I'd like to do is commit the current patch with its changes to SolrResourceLoader, and then open new issues for moving individual features to the new API:\n\n\tConfig overlays\n\tMutable schema\n\tManaged resources in general (I think this may supersede the StorageIO interface)\n\n\n\nNoble's idea for configurable config locations can be in a followup issue as well. ",
            "id": "comment-14570723"
        },
        {
            "date": "2015-06-03T17:13:58+0000",
            "author": "Mark Miller",
            "content": "But we have to find a sane way to share mutable configs and it is an extremely common usecase\n\n+1 to that sentiment. ",
            "id": "comment-14571347"
        },
        {
            "date": "2015-06-09T20:58:51+0000",
            "author": "Gregory Chanan",
            "content": "I guess you guys are missing the point here. What I'm suggesting is make the mutable conf location configurable on a per collection basis. By default (if no extra param is passed) it will be /collections/$COLLECTION_NAME/conf . This will enable users to reuse mutable conf too. For example , when I create a collection I can specify mutableconfdir=/collections/commonConfDir/conf and every collection which has the same property will share the same node for mutable configs\n\nas far as I understand it, this suggestion is addressing tomas' bullet above:\n\nChanges to configsets need a different API, or file upload. If I remember correctly, collections are watching the configset znode, and may be reloaded after a watch is triggered. We should keep this as a way to edit shared configsets, users would for example, upload a new solrconfig.xml and then touch the configset. This should reload all collections using that configset as we do now.\n\n\ni.e. you need a place to share mutable configs.  It seems cleaner to have a separate ConfigSet API, i.e. REST calls to, say, /configs/MySharedConfig rather than to alias collection-specific APIs.  The later just gets us back to the case we are in now, where collection-specific APIs can result in changes outside the collection.  That is confusing IMO.\n\nedit: and the configs under /configs/xxx can be mutable or not, as described in SOLR-5955. ",
            "id": "comment-14579558"
        }
    ]
}