{
    "id": "LUCENE-3041",
    "title": "Support Query Visting / Walking",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Out of the discussion in LUCENE-2868, it could be useful to add a generic Query Visitor / Walker that could be used for more advanced rewriting, optimizations or anything that requires state to be stored as each Query is visited.\n\nWe could keep the interface very simple:\n\n\npublic interface QueryVisitor {\n  Query visit(Query query);\n}\n\n\n\nand then use a reflection based visitor like Earwin suggested, which would allow implementators to provide visit methods for just Querys that they are interested in.",
    "attachments": {
        "LUCENE-3041.patch": "https://issues.apache.org/jira/secure/attachment/12477376/LUCENE-3041.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-04-23T08:16:03+0000",
            "content": "I like the simple interface but the name is somewhat misleading here I think. Either we make this a 'real' visitor pattern and add accept methods to Query which I don't think is necessary or we should make the name specific for the task. Since this is really for walking the Query 'AST' during the rewrite process we should make this very clean in the IF name. QueryRewriter or something like that would make more sense and it would justify the Query return value, no? ",
            "author": "Simon Willnauer",
            "id": "comment-13023526"
        },
        {
            "date": "2011-04-23T09:11:31+0000",
            "content": "I remain weary of calling it QueryRewriter since there is already Query rewriting support through Query#rewrite, but I take your point.  What about QueryOptimizer? ",
            "author": "Chris Male",
            "id": "comment-13023536"
        },
        {
            "date": "2011-04-23T13:58:08+0000",
            "content": "What about QueryOptimizer?\nQueryProcessor or QueryPreProcessor? ",
            "author": "Simon Willnauer",
            "id": "comment-13023558"
        },
        {
            "date": "2011-04-23T14:00:53+0000",
            "content": "I'm happy to settle with QueryProcessor#process ",
            "author": "Chris Male",
            "id": "comment-13023560"
        },
        {
            "date": "2011-04-23T14:20:10+0000",
            "content": "I'm happy to settle with QueryProcessor#process\n\n+1 - Chris are you cranking out a patch for this?\n\nI think if we have a QueryProcessor we should somehow make it possible to optionally hook it into IndexSearcher to essentially replace the direct call to Query#rewrite\nEventually it should be the QueryProcessor's responsibility to rewrite the query and pass the actual 'primitive' query to the searcher once done. I think its good to keep that interface super lean and let more fancy impl. follow up on it. Stuff like automatic dispatch for certain query types might need some cglib magic or at least req. java 6 to perform so they might need to go to contrib/misc. ",
            "author": "Simon Willnauer",
            "id": "comment-13023561"
        },
        {
            "date": "2011-04-23T14:25:29+0000",
            "content": "Yup I have a patch cooking.  \n\nStuff like automatic dispatch for certain query types might need some cglib magic or at least req. java 6 to perform so they might need to go to contrib/misc.\n\nI don't think this will be the case.  I am striving to use Java 5 reflection classes and that seems to be working fine. ",
            "author": "Chris Male",
            "id": "comment-13023562"
        },
        {
            "date": "2011-04-26T09:31:52+0000",
            "content": "Working patch, minus tests at the moment.\n\nIntroduces the QueryProcessor interface like that described above.\n\nAlso introduces a generic InvocationDispatcher that can be used for visitor like multi-dispatch. ",
            "author": "Chris Male",
            "id": "comment-13025146"
        },
        {
            "date": "2011-04-26T10:02:45+0000",
            "content": "Hey chris,\n\nI have some comments on your patch:\n\n\ts/visitorClass/processorClass/\n\ts/visitor/processor/\n\tin InvocationDispatcher you might wanna check if the single parameter is Query subclass\n\tI am worried about checking which method to dispatch for every query type once per segment as well as that we create an processor instance per segment and not per search. There are actually two problems here. 1. We create a new instance per segment. 2. We can not share the dispatch map, not even across segments. I think we should create one instance per search and pass the IR down together with the query or even better follow the pattern that Collector et al. uses and pass it with a setReader(IR) method. that way we also have a clear way how to tell the processor that we just moved on to a new segment. Regarding sharing the map, I think you should use a prototype pattern that creates a new Processor from an existing one maybe via clone()? In the InvocationDispatcher case we should maybe use a concurrent hash map and share the map across instances for the same dispatcher class.\n\n\n\n\n\tThe process implementation in DefaultQueryProcessor executes query.rewrite before passing the query to the\ndispatcher which is no good since some QueryProcessor impls might not want to rewrite that query at all. In LUCENE-2868 karl tries to find a way to prevent lucene to rewrite one and the same FuzzyQuery since he has them in multiple clauses somewhere down the BQ tree. This is a super expensive operation in his case to rewriting it only once makes sense. I think this should be left to the actual implementation. \n\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-13025155"
        },
        {
            "date": "2011-04-26T11:02:09+0000",
            "content": "Regarding sharing the map, I think you should use a prototype pattern that creates a new Processor from an existing one maybe via clone()? In the InvocationDispatcher case we should maybe use a concurrent hash map and share the map across instances for the same dispatcher class.\n\nI don't quite follow you.  Currently DispatchingQueryProcessor caches InvocationDispatchers by concrete impl type.  So we only create a new InvocationDispatcher when we have a new implementation (which means InvocationDispatchers are shared between segments, searches, everything).  In that regard DispatchingQueryProcessor#dispatcherByClass should be a ConcurrentHashMap.  But otherwise, I think we're okay?\n\nThe process implementation in DefaultQueryProcessor executes query.rewrite before passing the query to the dispatcher which is no good since some QueryProcessor impls might not want to rewrite that query at all. In LUCENE-2868 karl tries to find a way to prevent lucene to rewrite one and the same FuzzyQuery since he has them in multiple clauses somewhere down the BQ tree. This is a super expensive operation in his case to rewriting it only once makes sense. I think this should be left to the actual implementation.\n\nThis is super tricky.  The question is how to define a base case in #process(Query).  Lets assume DefaultQueryProcessor#process(Query) just dispatched immediately.  It might be a receiver of the same dispatch (perhaps the query is a TermQuery and no #process(TermQuery) is provided, so #process(Query) is chosen).  It then just dispatches again, receives again.. and we're in a loop.\n\nAny thoughts on how to avoid that? ",
            "author": "Chris Male",
            "id": "comment-13025173"
        },
        {
            "date": "2011-04-26T15:38:22+0000",
            "content": "\nI don't quite follow you. Currently DispatchingQueryProcessor caches InvocationDispatchers by concrete impl type. So we only create a new InvocationDispatcher when we have a new implementation (which means InvocationDispatchers are shared between segments, searches, everything). In that regard DispatchingQueryProcessor#dispatcherByClass should be a ConcurrentHashMap. But otherwise, I think we're okay?\n\nmy bad.. I didn't look close enough  Yet, I was proposing something like what you did though  the problem here could be that it is static but for now ConcurrentHashMap would do.\n\n\nAny thoughts on how to avoid that?\n\nhmm, I think we should try to dispatch first. If there is not specialized method to dispatch we should rewrite and continue.\n\nI still wonder how this would walk down the query tree so I am happily waiting for the next patch. ",
            "author": "Simon Willnauer",
            "id": "comment-13025283"
        },
        {
            "date": "2011-04-27T07:12:48+0000",
            "content": "Updated patch.\n\nThis simplifies the hierarchy a lot.  DispatchingQueryProcessor is merged into QueryProcessor, which then becomes an abstract class.  QueryProcessor now has #dispatchProcessing(Query) which is the entry point to the dispatching process.  \n\nDefaultQueryProcessor is changed to RewriteCachingQueryProcessor which caches the rewriting of querys.  This could be extended further to provide special support for BooleanQuery.\n\nRemaining to do is to provide a test which illustrates walking through a complex class. ",
            "author": "Chris Male",
            "id": "comment-13025647"
        },
        {
            "date": "2011-04-27T08:37:11+0000",
            "content": "Chris, nice simplification. I have one question, lets say we have a boolean query OR(AND(Fuzzy:A, Fuzzy:B), AND(Fuzzy A, Fuzzy:C)) how would it be possible with the current patch to reuse the rewrite for Fuzzy:A? As far as I can see If I don't rewrite the boolean query myself the current patch will rewrite the top level query and returns right? So somehow it must be possible to walk down the query ast.\n\nor do I miss something? ",
            "author": "Simon Willnauer",
            "id": "comment-13025669"
        },
        {
            "date": "2011-04-27T09:03:09+0000",
            "content": "No, you didn't miss something.  The RewriteCachingQueryProcessor currently only rewrites the top level query.  It needs to be extended to handle BooleanQuerys and any other composite query (BoostingQuery for example).  I might actually add a DefaultQueryProcessor again which walks the full Query AST by default.  Then get RewritingCachingQueryProcessor to extend and cache.\n\nI'll iterate a new patch. ",
            "author": "Chris Male",
            "id": "comment-13025677"
        },
        {
            "date": "2011-04-28T03:38:51+0000",
            "content": "A much larger patch that implements full query AST walking.\n\nThe problem with having the QueryProcessor fully external to Query#rewrite, is that composite Querys would need to expose their children.  This is a little messy and could be hard with more exotic user-made Querys.  \n\nSo this patch basically expands Query#rewrite to include the QueryProcessor.  Composite queries can then pass their children to the processor during their rewrite.\n\nFor backwards compat, and simplicity, I've created a SimpleQueryProcessor which directly calls rewrite.  This means casual users do not need to concern themselves with processing.\n\nOvertime we can expose the QueryProcessor API through IndexSearcher and other situations. ",
            "author": "Chris Male",
            "id": "comment-13026097"
        },
        {
            "date": "2011-04-28T05:02:53+0000",
            "content": "Updated patch which removes the stupid test I'd included ",
            "author": "Chris Male",
            "id": "comment-13026119"
        },
        {
            "date": "2011-04-28T05:44:17+0000",
            "content": "This is an excellent opportunity to redefine Queries as immutable, which would make query rewriting an order of magnitude safer. ",
            "author": "Lance Norskog",
            "id": "comment-13026129"
        },
        {
            "date": "2011-04-28T07:37:33+0000",
            "content": "This is an excellent opportunity to redefine Queries as immutable\n\nWhat do you envisage this involving? Although not required by the API, most rewriting implementations make a new Query and add changes there, leaving themselves untouched.  Are you wanting to require this somehow? ",
            "author": "Chris Male",
            "id": "comment-13026175"
        },
        {
            "date": "2011-04-29T16:06:56+0000",
            "content": "Yes! I enthusiastically support introducing the visitor design pattern into the Query api.  I've polled the community on this before and got positive responses from a few committers but I haven't yet had the time to do anything.  It's great to see you've gotten the ball rolling Chris.  \n\nI haven't looked at your patch yet.  Query.rewrite() is definitely a candidate for reworking in terms of this new pattern. ",
            "author": "David Smiley",
            "id": "comment-13027054"
        },
        {
            "date": "2011-04-29T17:07:29+0000",
            "content": "I vehemently oppose introducing the \"visitor design pattern\" (classic double-dispatch version) into the Query API. It is a badly broken replacement (ie, cannot be easily extended) for multiple dispatch.\n\nAlso, from the looks of it (short IRC discussion), user-written visitors and rewrite() API have totally different aims.\n\n\trewrite() is very specific (it is a pre-search preparation that produces runnable query, eg expands multi-term queries into OR sequences or wrapped filters), but should work over any kinds of user-written Queries with possibly exotic behaviours (eg, take rewrite from the cache). Consequently, the logic is tightly coupled to each Query-impl innards.\n\tuser-written visitors on the other hand, may have a multitude of purporses (wildly varying logic for node handling + navigation - eg, some may want to see MTQs expanded, and some may not) over relatively fixed number of possible node types.\n\n\n\nSo the best possible solution so far is to keep rewrite() asis - it serves its purporse quite well.\nAnd introduce generic reflection-based multiple-dispatch visitor that can walk any kind of hierarchies (eg, in my project I rewrite ASTs to ASTs, ASTs to Queries, and Queries to bags of Terms) so people can transform their query trees.\nThe current patch contains a derivative of my original version. And here's a test/example\nThis visitor keeps all logic on itself and thus cannot replace rewrite(). ",
            "author": "Earwin Burrfoot",
            "id": "comment-13027080"
        },
        {
            "date": "2011-04-30T03:39:48+0000",
            "content": "To follow up on Earwin's comments, I'm going to do the following:\n\n\n\tLeave Query#rewrite out of the walking process.  As Earwin said, rewrite provides vital query optimization / conversion to primitive runnable queries.  Having this method on Query is a good idea since user Queries can simply implement this method and move on.\n\tIn a separate issue, add a RewriteState like concept which can be used for caching rewrites like that suggested by Simon.  This will have a considerable performance improvement for people doing lots of repeated FuzzyQuerys for example.\n\tChange my processing concept into a generic Walker<I, O> system, which can be used for lots of things in Lucene.  Users can implement this Walker to do whatever they want (maybe we can pry Earwin's walker based highlighter from him? )\n\tOverload IndexSearcher's methods to support passing in a Walker.  We need this, instead of simply having the Walker external, because we really want to support per-segment Walking.\n\n\n\nI'll make a patch for the stuff related to this issue shortly, and spin off the RewriteState stuff. ",
            "author": "Chris Male",
            "id": "comment-13027279"
        },
        {
            "date": "2011-04-30T08:10:49+0000",
            "content": "New patch that implements what I said in the previous comments (except for the IS changes).\n\nAlso a test is now included. ",
            "author": "Chris Male",
            "id": "comment-13027299"
        },
        {
            "date": "2011-05-02T07:46:11+0000",
            "content": "New patch that implements what I said in the previous comments (except for the IS changes).\nChris, patch looks good! Are you going to add the IS changes here too? I wonder if we could move the MethodDispatchException into InvocationDispatcher as a nested class I don't think we need an extra file for this class. ",
            "author": "Simon Willnauer",
            "id": "comment-13027575"
        },
        {
            "date": "2011-05-02T08:47:45+0000",
            "content": "Are you going to add the IS changes here too?\n\nYup, I'm just working through the best way to expose the API in the IS while supporting per segment walking.  I'll have something together in the next day or two.\n\nI wonder if we could move the MethodDispatchException into InvocationDispatcher as a nested class \n\nGood call.  I'll make the change and upload something immediately. ",
            "author": "Chris Male",
            "id": "comment-13027589"
        },
        {
            "date": "2011-05-02T10:26:07+0000",
            "content": "The static cache is now not threadsafe.\nAnd original had nice diagnostics for ambigous dispatches. Why not just take it and cut over to JDK reflection and CHM?\nSame can be said for tests.\n\nWhat about throwing original invocation exception instead of the wrapper? Since we're emulating a language feature, a simple method call, it's logical to only throw custom exceptions in .. well .. exceptional cases, like ambiguity/no matching method. If client code throws Errors/RuntimeExceptions, they should be transparently rethrown. ",
            "author": "Earwin Burrfoot",
            "id": "comment-13027612"
        },
        {
            "date": "2011-07-13T17:20:58+0000",
            "content": "chris are you going to revisite this? I think we can make good use of this though.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13064708"
        },
        {
            "date": "2011-07-14T01:24:21+0000",
            "content": "Simon,\n\nYes I definitely am going to revisit this.  I'm still unsure how best to incorporate this into IndexSearcher so that it can work per-segment.  But we can commit the functionality and then deal with the integration separately.\n\nWhat plans do you have? ",
            "author": "Chris Male",
            "id": "comment-13064998"
        },
        {
            "date": "2011-07-14T15:20:03+0000",
            "content": "Yes I definitely am going to revisit this. I'm still unsure how best to incorporate this into IndexSearcher so that it can work per-segment. But we can commit the functionality and then deal with the integration separately.\n\nactually this already works per segment in a way it should. If you look at rewriting this is done based on the IS anyway for a query so we only rewrite once. If you are inside a MTQ and you want to do the rewrite caching or other things you can do this based on the IS. The question is if we should really commit this without any specific usecase or other code using it :/\n\nare you going to address earwins issue still?\n ",
            "author": "Simon Willnauer",
            "id": "comment-13065320"
        },
        {
            "date": "2013-07-23T18:44:51+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717079"
        },
        {
            "date": "2013-10-24T17:42:02+0000",
            "content": "Hi I found a bug in the InvocationDispatcher when used with Java 7: the manual ordering of methods to visit is broken, because Class#getDeclaredMethods() returns the methods in random order (on same JVM, too). The ordering is not enough to prevent choosing the wrong method, so AmbiguousMethodException occurs (\"Multiple methods resolved for parameter type, cannot disambiguate\"). In the current code, because older JVMs return methods in declaration order and as Collections.sort() is stable, the methods declared earlier take precendence. But this does no longer work with Java 7.\n\nIf I have time, I will upload a fix I found for that (I have one locally in another package, because this visitor was used for some internal code). The new approach groups the visit methods by parameter types with same superclass and also sorts by class hierarchy distance (more far superclasses get lower score than direct superclasses). The approch uses the lowest distance from parameter type to method type.\n\nThis makes InvocationDispatcher randomization proof (just add Collections.sort() in the InvocationDispatcher ctor to test...) ",
            "author": "Uwe Schindler",
            "id": "comment-13804446"
        },
        {
            "date": "2014-04-16T12:54:54+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970920"
        },
        {
            "date": "2014-07-24T20:06:41+0000",
            "content": "I just read through all the comments to get up to speed on the history and issues involved.\n\nThere is definitely more complexity for generic per-segment visiting, and trying to support nifty multiple-dispatch by visitor method argument type.\n\nFor per-segment rewriting, arguably Query's existing rewrite method is fine.  Not complicating this issue with per-segment support would help \u2013 no changes to IndexSearcher.  I think (but am not certain) the use-case of rewriting the query for caching identical sub-clauses could be done by a wrapping query that implements rewrite() to then call the API we're talking about here to share some state and then propagate the rewrite() call.\n\nSimon asked:\nThe question is if we should really commit this without any specific usecase or other code using it :/\n\nI expect that a good query visitor (or query \"processor\" as you all seem to want to call it, despite the \"visit\" method terminology) would eliminate the ugly massive query branching logic found in these classes:\n\n\tMultiTermHighlighting (org.apache.lucene.search.postingshighlight)\n\tFieldQuery (org.apache.lucene.search.vectorhighlight)\n\tWeightedSpanTermExtractor (org.apache.lucene.search.highlight)\n\t\n\t\textract()\n\t\tmustRewriteQuery()\n\t\n\t\n\n\n\nIt's no surprise to me that all of those points are in the highlighting code.  I too want to rewrite a query to make it highlightable. My query has custom span query subclasses that the branches listed above do not know about.  The custom query wraps another query (or queries) that these branches do know about.  There is no per-segment concern here.\n\nI've also once wrote a query rewriter that was not related to highlighting \u2013 it rewrote a wildcard query to use an ngram tokenized field.  That code was annoying, verbose, and didn't support Queries I had never seen before.  There is no per-segment concern here either.\n\nAs a separate issue, I think making Query immutable (and demanding subclasses do the same) is a good idea for Lucene 5.\n\nDoes anyone have any opinions on what I had to say?  I may have some time soon to continue where Chris left off.  According to the last comment, Uwe hoped to produce a fix for the sortability of generic methods.  If that doesn't materialize, I think it's far simpler to have a generic Query argument to the visit interface as was originally proposed.  In summary I think we can make this simple. ",
            "author": "David Smiley",
            "id": "comment-14073581"
        },
        {
            "date": "2014-07-24T22:22:37+0000",
            "content": "Another case for visitor:\n\n\tPayloadSpanUtil.queryToSpanQuery (org.apache.lucene.search.payloads)\nI found it while finding usages of Query.extractTerms(Set<Term>) which is visitor-like.\n\n ",
            "author": "David Smiley",
            "id": "comment-14073749"
        }
    ]
}