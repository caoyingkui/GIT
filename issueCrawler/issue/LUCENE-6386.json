{
    "id": "LUCENE-6386",
    "title": "TestIndexWriterForceMerge still unreliable in NIGHTLY",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Discovered by ryan beasting (trunk):\n\nant test -Dtestcase=TestIndexWriterForceMerge -Dtests.method=testForceMergeTempSpaceUsage -Dtests.seed=DC9ADB74850A581B -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.locale=sr__#Latn -Dtests.timezone=Indian/Chagos -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\n\n  [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestIndexWriterForceMerge -Dtests.method=testForceMergeTempSpaceUsage -Dtests.seed=DC9ADB74850A581B -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.locale=sr__#Latn -Dtests.timezone=Indian/Chagos -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 1.20s | TestIndexWriterForceMerge.testForceMergeTempSpaceUsage <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: forceMerge used too much temporary space: starting usage was 291570 bytes; final usage was 262469 bytes; max temp usage was 1079501 but should have been 874710 (= 3X starting usage), BEFORE=\n   [junit4]    > _u.scf              146329\n   [junit4]    > _u.si               635\n   [junit4]    >  |- (inside compound file) _u.fld              2214\n   [junit4]    >  |- (inside compound file) _u.inf              392\n   [junit4]    >  |- (inside compound file) _u.len              2381\n   [junit4]    >  |- (inside compound file) _u.pst              36758\n   [junit4]    >  |- (inside compound file) _u.vec              104144\n   [junit4]    > _s.pst              1338\n   [junit4]    > _s.inf              392\n   [junit4]    > _s.fld              94\n   [junit4]    > _s.len              221\n   [junit4]    > _s.vec              3744\n   [junit4]    > _s.si               624\n   [junit4]    > _t.fld              94\n   [junit4]    > _t.len              221\n   [junit4]    > _t.pst              1338\n   [junit4]    > _t.inf              392\n   [junit4]    > _t.vec              3744\n   [junit4]    > _t.si               624\n   [junit4]    > _v.fld              94\n   [junit4]    > _v.pst              1338\n   [junit4]    > _v.inf              392\n   [junit4]    > _v.vec              3744\n   [junit4]    > _v.si               624\n   [junit4]    > _v.len              221\n   [junit4]    > _w.len              221\n   [junit4]    > _w.pst              1338\n   [junit4]    > _w.inf              392\n   [junit4]    > _w.fld              94\n   [junit4]    > _w.si               624\n   [junit4]    > _w.vec              3744\n   [junit4]    > _x.vec              3744\n   [junit4]    > _x.inf              392\n   [junit4]    > _x.pst              1338\n   [junit4]    > _x.fld              94\n   [junit4]    > _x.si               624\n   [junit4]    > _x.len              221\n   [junit4]    > _y.fld              94\n   [junit4]    > _y.pst              1338\n   [junit4]    > _y.inf              392\n   [junit4]    > _y.si               624\n   [junit4]    > _y.vec              3744\n   [junit4]    > _y.len              221\n   [junit4]    > _z.fld              94\n   [junit4]    > _z.pst              1338\n   [junit4]    > _z.inf              392\n   [junit4]    > _z.len              221\n   [junit4]    > _z.vec              3744\n   [junit4]    > _z.si               624\n   [junit4]    > _10.si              630\n   [junit4]    > _10.fld             94\n   [junit4]    > _10.pst             1338\n   [junit4]    > _10.inf             392\n   [junit4]    > _10.vec             3744\n   [junit4]    > _10.len             221\n   [junit4]    > _11.len             221\n   [junit4]    > _11.si              630\n   [junit4]    > _11.vec             3744\n   [junit4]    > _11.pst             1338\n   [junit4]    > _11.inf             392\n   [junit4]    > _11.fld             94\n   [junit4]    > _12.vec             3744\n   [junit4]    > _12.si              630\n   [junit4]    > _12.len             221\n   [junit4]    > _12.fld             94\n   [junit4]    > _12.pst             1338\n   [junit4]    > _12.inf             392\n   [junit4]    > _13.fld             94\n   [junit4]    > _13.vec             3744\n   [junit4]    > _13.si              630\n   [junit4]    > _13.pst             1338\n   [junit4]    > _13.inf             392\n   [junit4]    > _13.len             221\n   [junit4]    > _14.fld             94\n   [junit4]    > _14.pst             1338\n   [junit4]    > _14.inf             392\n   [junit4]    > _14.si              630\n   [junit4]    > _14.vec             3744\n   [junit4]    > _14.len             221\n   [junit4]    > _15.len             221\n   [junit4]    > _15.vec             3744\n   [junit4]    > _15.si              630\n   [junit4]    > _15.pst             1338\n   [junit4]    > _15.inf             392\n   [junit4]    > _15.fld             94\n   [junit4]    > _16.vec             3744\n   [junit4]    > _16.len             221\n   [junit4]    > _16.fld             94\n   [junit4]    > _16.si              630\n   [junit4]    > _16.pst             1338\n   [junit4]    > _16.inf             392\n   [junit4]    > _17.vec             3744\n   [junit4]    > _17.pst             1338\n   [junit4]    > _17.inf             392\n   [junit4]    > _17.len             221\n   [junit4]    > _17.si              630\n   [junit4]    > _17.fld             94\n   [junit4]    > _18.pst             1338\n   [junit4]    > _18.inf             392\n   [junit4]    > _18.len             221\n   [junit4]    > _18.vec             3744\n   [junit4]    > _18.si              630\n   [junit4]    > _18.fld             94\n   [junit4]    > _19.fld             94\n   [junit4]    > _19.si              630\n   [junit4]    > _19.len             221\n   [junit4]    > _19.vec             3744\n   [junit4]    > _19.pst             1338\n   [junit4]    > _19.inf             392\n   [junit4]    > _1a.fld             94\n   [junit4]    > _1a.pst             1338\n   [junit4]    > _1a.inf             392\n   [junit4]    > _1a.len             221\n   [junit4]    > _1a.vec             3744\n   [junit4]    > _1a.si              630\n   [junit4]    > _1b.fld             94\n   [junit4]    > _1b.si              630\n   [junit4]    > _1b.pst             1338\n   [junit4]    > _1b.inf             392\n   [junit4]    > _1b.vec             3744\n   [junit4]    > _1b.len             221\n   [junit4]    > _1c.vec             3744\n   [junit4]    > _1c.pst             1338\n   [junit4]    > _1c.inf             392\n   [junit4]    > _1c.fld             94\n   [junit4]    > _1c.len             221\n   [junit4]    > _1c.si              630\n   [junit4]    > _1d.pst             1338\n   [junit4]    > _1d.inf             392\n   [junit4]    > _1d.fld             94\n   [junit4]    > _1d.len             221\n   [junit4]    > _1d.vec             3744\n   [junit4]    > _1d.si              630\n   [junit4]    > _1e.fld             94\n   [junit4]    > _1e.pst             1338\n   [junit4]    > _1e.inf             392\n   [junit4]    > _1e.len             221\n   [junit4]    > _1e.vec             3744\n   [junit4]    > _1e.si              630\n   [junit4]    > _1f.fld             40\n   [junit4]    > _1f.pst             195\n   [junit4]    > _1f.inf             392\n   [junit4]    > _1f.len             149\n   [junit4]    > _1f.vec             405\n   [junit4]    > _1f.si              629\n   [junit4]    > AFTER=\n   [junit4]    > _1j.si              635\n   [junit4]    > _1j.scf             261701\n   [junit4]    >  |- (inside compound file) _1j.fld             3982\n   [junit4]    >  |- (inside compound file) _1j.inf             392\n   [junit4]    >  |- (inside compound file) _1j.len             4149\n   [junit4]    >  |- (inside compound file) _1j.pst             66151\n   [junit4]    >  |- (inside compound file) _1j.vec             186577\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([DC9ADB74850A581B:C6581887EB1ABBDC]:0)\n   [junit4]    > \tat org.apache.lucene.index.TestIndexWriterForceMerge.testForceMergeTempSpaceUsage(TestIndexWriterForceMerge.java:199)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=SimpleText, sim=RandomSimilarityProvider(queryNorm=false,coord=no): {id=IB SPL-D2, content=DFR I(F)B1}, locale=sr__#Latn, timezone=Indian/Chagos\n   [junit4]   2> NOTE: Linux 3.13.0-45-generic amd64/Oracle Corporation 1.8.0_40-ea (64-bit)/cpus=8,threads=1,free=208092000,total=253231104\n   [junit4]   2> NOTE: All tests run in this JVM: [TestIndexWriterForceMerge]\n   [junit4] Completed in 1.54s, 1 test, 1 failure <<< FAILURES!",
    "attachments": {
        "LUCENE-6386.patch": "https://issues.apache.org/jira/secure/attachment/12708847/LUCENE-6386.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14390743",
            "author": "Robert Muir",
            "date": "2015-04-01T15:00:50+0000",
            "content": "See attached log in the description. When i fought with this test last night, i tried to make it easier to debug (print inner CFS content sizes etc).\n\nBut its still hard, maybe someone else should have a look at the test. We could try to summarize bytes by extension, that might help.\n\nIn this case its not the ending size after forceMerge that is the problem, but the peak disk usage as tracked by MDW.\n\nMaybe it only happens in NIGHTLY because both of the two fields involved randomly got term vector options set (which is rare):\n[junit4]   1> NOTE: LuceneTestCase: upgrade name=content type=indexed,tokenized,termVector,termVectorPosition,termVectorPayloads\n[junit4]   1> NOTE: LuceneTestCase: upgrade name=id type=stored,indexed,tokenized,termVector,termVectorOffsets "
        },
        {
            "id": "comment-14391031",
            "author": "Michael McCandless",
            "date": "2015-04-01T17:26:43+0000",
            "content": "I'm digging here... "
        },
        {
            "id": "comment-14391162",
            "author": "Michael McCandless",
            "date": "2015-04-01T18:29:37+0000",
            "content": "I think this was caused by LUCENE-5941, where we managed to reason to ourselves that forceMerge only requires up to 2X your index size in additional free space, but I think in fact it requires up to 3X in the worst case (as was documented/tested before LUCENE-5941), which this seed hits.\n\nThe worst case is CFS is enabled, forceMerge to 1 segment, there are enough segments that a first pass of N merges must be done first, followed by a final merge to produce the 1 segment, no deletes.\n\nIn this case the first round of level 1 merges use up 1X spare space, then the level 2 merge down to 1 segment uses up another 1X, then to build the CFS for that segment uses another 1X = total 3X, like we documented/enforced before LUCENE-5941.\n\nAm I missing something....? "
        },
        {
            "id": "comment-14391698",
            "author": "Michael McCandless",
            "date": "2015-04-01T23:06:15+0000",
            "content": "Patch, I think it's ready. "
        },
        {
            "id": "comment-14391755",
            "author": "Robert Muir",
            "date": "2015-04-01T23:35:36+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14392117",
            "author": "Shai Erera",
            "date": "2015-04-02T04:24:20+0000",
            "content": "So if we have the index in the following state, according to what you describe we will use additional 3X space:\n\n\nsource:               [s1 s2 s3]  [s4 s5 s6]  [s7 s8 s9]\nlevel1 (not CFS'd):      [s10]       [s11]      [s12]\nlevel2 (non CFS'd):                 [s13]\nresult (CFS'd):                     [s14]\n\n\n\nWhen we create level2, we indeed use additional 2X space. But is there a reason why when that's done we don't delete level1's intermediate files? Nobody references them correct?\n\nIf we don't, then what happens when that forceMerge() hits 10 levels of merges? Will all the intermediate files be kept in the index? If so, then during forceMerge the additional space required can be much higher than just 3X. "
        },
        {
            "id": "comment-14392125",
            "author": "Robert Muir",
            "date": "2015-04-02T04:30:26+0000",
            "content": "\nWhen we create level2, we indeed use additional 2X space. But is there a reason why when that's done we don't delete level1's intermediate files? Nobody references them correct?\n\nIFD will delete level1 files after level2 is finally done. So if it proceeded to level3, it would still be 3x. its always 3x because at some time you can have N, N cfs packing, and N-1. "
        },
        {
            "id": "comment-14392282",
            "author": "Shai Erera",
            "date": "2015-04-02T07:21:09+0000",
            "content": "Right, therefore I still think we consume up to 2X additional space? When we build level2, we have source + level1 + level2. When level2 is complete, we delete level1, and so we have source + level2. When we build level3 (the CFS), we have source + level2 + level3. No? "
        },
        {
            "id": "comment-14392344",
            "author": "Michael McCandless",
            "date": "2015-04-02T08:09:23+0000",
            "content": "This is hard to think about \n\nIn your example I'm assuming \"result\" is just the same as \"level2\", but converted into CFS (ie, s14 really should have been s13.cfs, but I'll just call it s14 here to try not to lose my sanity).\n\nSo, at the exact moment when IW finishes building the final (level3) CFS [s14], you have:\n\n\n\toriginal source segments -> 1X\n\n\n\n\n\tlevel 1 segments -> 1X\n\n\n\n\n\tlevel 2 segment [s13] non-CFS -> 1X\n\n\n\n\n\tresult segment [s14] CFS -> 1X\n\n\n\nWe do NOT delete level 1 segments after merging to the level 2 non-CFS segment before creating the result s14 (we used to do this, but it caused complexity/problems because a non-CFS file can unexpectedly \"sneak into\" an IW commit or an NRT reader even when you demanded CFS).\n\nSo at that moment, the peak temp disk usage is 3X? "
        },
        {
            "id": "comment-14392380",
            "author": "Shai Erera",
            "date": "2015-04-02T08:33:58+0000",
            "content": "s14 really should have been s13.cfs\n\nYou're right, my mistake. The example should have listed s13.cfs.\n\nWe do NOT delete level 1 segments after merging to the level 2 non-CFS segment before creating the result s14\n\nI see. That explains the 4X. But then what happens if there are multi-level merges? Do we delete any of these files? Let me give a concrete example:\n\n\nsource: [s1,s2] [s3,s4] [s5,s6] [s7,s8]\nlevel1: [s9,s10], [s11,s12]\nlevel2: [s13,s14]\nlevel3: [s15]\nfinal:  [s15.cfs]\n\n\n\nWould we take 5X disk space in that case?? "
        },
        {
            "id": "comment-14392688",
            "author": "Michael McCandless",
            "date": "2015-04-02T13:21:56+0000",
            "content": "If there are more levels we don't use any more space, because we will fully delete the intermediate levels after they are merged.\n\nSo in your example, once s13 is done (and made into .cfs if necessary) we delete s9 and s10, as long as no NRT reader was opened holding a reference to them (or, a commit). "
        },
        {
            "id": "comment-14392855",
            "author": "Shai Erera",
            "date": "2015-04-02T15:41:48+0000",
            "content": "I thought we only write the final segments as .cfs if needed? Does what you say mean the following happens:\n\n\nsource: [s1,s2] [s3,s4] [s5,s6] [s7,s8]\nlevel1: [s9,s10], [s11,s12]\nlevel1: [s9.cfs,s10.cfs], [s11.cfs,s12.cfs]\nlevel2: [s13,s14]\nlevel2: [s13.cfs,s14.cfs]\nlevel3: [s15]\nfinal:  [s15.cfs]\n\n\n\nSo when it gets to create level3, with the level2.cfs written, the index contains source (1X), level2.cfs (1X), level3 (1X) and level3.cfs (1X) \u2013 that's 4X indeed.\n\nIs there a reason why we don't delete level2.cfs after creating level3? If not, can we fix that and reduce 1X here? "
        },
        {
            "id": "comment-14392859",
            "author": "Robert Muir",
            "date": "2015-04-02T15:48:36+0000",
            "content": "Looking at the code, I think that is too aggressive/complicated to do right now. The CFS interaction with merging is already absolutely horrible.\n\nWe should fix the documentation bug at the moment. But IMO we should not do this optimization until this stuff is cleaned up (LUCENE-5988) "
        },
        {
            "id": "comment-14392876",
            "author": "Michael McCandless",
            "date": "2015-04-02T15:53:35+0000",
            "content": "I thought we only write the final segments as .cfs if needed? \n\nNo: every segment that's written (flush or merge) decides whether to be cfs or not and then builds the cfs immediately after writing...\n\nIs there a reason why we don't delete level2.cfs after creating level3? If not, can we fix that and reduce 1X here?\n\nIn the past we did that, by exposing level3 (not yet a CFS) into IW's SIS, and then deleting level2.cfs before building level3.cfs ... but this proved tricky (I think we had ref count bugs around this, and it also allowed commit / NRT readers to see a non-CFS segment when such external usage expected the segments to be CFS). "
        },
        {
            "id": "comment-14392917",
            "author": "Shai Erera",
            "date": "2015-04-02T16:32:29+0000",
            "content": "OK, I understand. So in theory we could reduce it back to 3X (which is good!), but we'd need to do it carefully and make sure we don't reintroduce bugs. I'm fine if it's done one day and not here. "
        },
        {
            "id": "comment-14393315",
            "author": "ASF subversion and git services",
            "date": "2015-04-02T20:23:06+0000",
            "content": "Commit 1670959 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1670959 ]\n\nLUCENE-6386: correct javadocs about temp disk space required for forceMerge(1) "
        },
        {
            "id": "comment-14393318",
            "author": "ASF subversion and git services",
            "date": "2015-04-02T20:25:25+0000",
            "content": "Commit 1670960 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1670960 ]\n\nLUCENE-6386: correct javadocs about temp disk space required for forceMerge(1) "
        },
        {
            "id": "comment-14393339",
            "author": "ASF subversion and git services",
            "date": "2015-04-02T20:42:07+0000",
            "content": "Commit 1670963 from Michael McCandless in branch 'dev/branches/lucene_solr_5_1'\n[ https://svn.apache.org/r1670963 ]\n\nLUCENE-6386: correct javadocs about temp disk space required for forceMerge(1) "
        },
        {
            "id": "comment-14495289",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:26+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}