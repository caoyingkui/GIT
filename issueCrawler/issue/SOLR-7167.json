{
    "id": "SOLR-7167",
    "title": "ANY operator synax - score only top matching term",
    "details": {
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "When we query\n\n(<term A> OR <term B> OR <term C> OR <term D>)\n\nand in case a document contains 2 or more of these terms: only the highest scoring term should contribute to the final relevancy score; possibly lower scoring  terms should be discarded from the scoring algorithm.\n\nIdeally I'd like an operator like ANY:\n\n(<term A> ANY <term B> ANY <term C> ANY <term D>)\n\nthat has the purpose: return documents, sorted by the score of the highest scoring term.",
    "attachments": {
        "EPMCSRCH-269.patch": "https://issues.apache.org/jira/secure/attachment/12701308/EPMCSRCH-269.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-26T15:04:41+0000",
            "author": "Alexey Kozhemiakin",
            "content": "\nSo we called it edismaxplus:\n\n1. This is a initial version which implements ANY operator logic and does not brake other query parsers.\n2. This is an implementation of the approach described in previous email. We have choosen approach number 3:\n\nLet\u2019s still parse queries from left to right, but remove BooleanQueries when we have ANY-operator and introduce DisjunctionMaxQueries in it\u2019s place.\nQuery is parsed from left to right.\n\u2022         NOT sets the Occurs flag of the clause to it\u2019s right to MUST_NOT\n\u2022         AND will change the Occurs flag of the clause to it\u2019s left to MUST unless it has already been set to MUST_NOT\n\u2022         AND sets the Occurs flag of the clause to it\u2019s right to MUST\n\u2022         If the default operator of the query parser has been set to \u201cAnd\u201d: OR will change the Occurs flag of the clause to it\u2019s left to SHOULD unless it has already been set to MUST_NOT\n\u2022         OR sets the Occurs flag of the clause to it\u2019s right to SHOULD\n\u2022         ANY will not change the Occurs flag of the clause to it\u2019s left, but it needs to remove the Boolean query and create a DisjunctionMaxQuery in it\u2019s place.\nIn the previous approach, things got quickly to complicated. The current grammar does not in fact represent a Boolean logic. There is no Boolean logic grammar tree. It is read more like a stream of tokens, left to right, and when you have AND \u2013 you change the Occurs flag of the clause to it\u2019s left to MUST unless it has already been set to MUST_NOT. And sets the Occurs flag of the clause to it\u2019s right to MUST.\nYou can read more about it here https://lucidworks.com/blog/why-not-and-or-and-not/\nTo make it all work, we would need to define that grammar in such a way, that OR takes two operands, AND takes two operands, that there is a real tree structure in it. Then we can introduce another operator \u2013 ANY :\n<AnyOp> ::> \n<Clause (<field>)> <ANY> <Clause(<field>)> (<ANY> <Clause(<field>)>)*\nThis might introduce quite a few surprises though. We would need to make sure, that even though, parsing is different, the end result stays the same for operators AND, OR. This can also take simply too much time to implement correctly.\nThe current patch seems to solve all addressed issues like different values of mm parameter, many query fields in edismax's qf, incorrect query syntax. We also don't have to deal with different cord factors, as we will be extending edismax query parser.\n\nWith this Jar we have addressed all the issues mentioned above. No other parsers are broken etc. The behaviour of ANY operator is consistent with the behaviour of AND and OR operators in existing parser; it is parsed from left to right and has similar possessive behavior as AND operator - the left value is captured and packed into DisjunctionMaxQuery like on the following example:\n\n{!edismaxplus}\ndisk ANY cd ANY dvd\n\nbecomes\n\n(+(DisjunctionMaxQuery((((text:disk) | (text:cd)) | (text:dvd)))))/no_coord\n\n\nNote that when there are multiple ANY operators in chain the lvalue with DisjunctionMaxQuery will be treated as subquery (such behavior is desired for compatibility with various subqueries that can occur as R or L value and the scoring will work as designed because\n\nmax(max(a,b),c) = max(a,b,c)\n\n3. To make future maintenance easier (eg. solr version upgrade) the parser plugin would require some additional work. For now it is directly based on existing edismax parser codebase with minimal modification to make it work with our code - the result is that we have many functionalities extracted from mainline and injected into plugin (the base edismax implementation, the whole query parser, etc.). To improve it we need to create extension points (as there are none) in existing edismax parser and pass them as a patch to community, the whole implementation of ANY operator should be based solely on such extension points with only stub parser plugin on top to distinguish between base edismax and edismaxplus. ",
            "id": "comment-14338498"
        },
        {
            "date": "2015-02-26T16:25:16+0000",
            "author": "Mikhail Khludnev",
            "content": "This is not Solr, but didn't you check https://lucene.apache.org/core/4_1_0/queries/org/apache/lucene/queries/CommonTermsQuery.html ? ",
            "id": "comment-14338640"
        },
        {
            "date": "2015-02-26T16:35:38+0000",
            "author": "Alexey Kozhemiakin",
            "content": "Mikhail, it's not about term frequency or performance, it's about relevancy and about avoid over-boosting of documents if several synonyms matched the query.\n\nfor example if we had synonyms for TV: \n{television, tvset, youtube, player}\n, only top-scoring synonym should affect scoring (it's how our users create synonym dicitonaries).\n\nActually ANY is an operator from FAST from which a transition is happening and it's pain without it.\n\n ",
            "id": "comment-14338662"
        },
        {
            "date": "2015-02-27T09:34:01+0000",
            "author": "Adam Glinianowicz",
            "content": "Attached our initial version of the working ANY operator support for edismax (EPMCSRCH-269.patch) for 4.10.3 - this is a proof-of-concept version which might break the other parsers. We have it also in a form of external jar with edismaxplus parser plugin (in a form metioned by Alexey in the first post - which for maintainability reasons requires introducing some extension points in the edismax source). ",
            "id": "comment-14339936"
        }
    ]
}