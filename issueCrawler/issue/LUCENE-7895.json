{
    "id": "LUCENE-7895",
    "title": "Add hooks to QueryBuilder to allow for the construction of MultiTermQueries in phrases",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "New Feature",
        "components": [],
        "fix_versions": []
    },
    "description": "QueryBuilder currently allows subclasses to override simple term query construction, which lets you support wildcard querying.  However, there is currently no easy way to override phrase query construction to support wildcards.",
    "attachments": {
        "LUCENE-7895.patch": "https://issues.apache.org/jira/secure/attachment/12875607/LUCENE-7895.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16073422",
            "date": "2017-07-04T10:01:58+0000",
            "content": "Patch, adding two new protected methods to QueryBuilder:\n\n\tisMultiTerm(CharTermAttribute) is called for each analyzed term, with a default implementation that always returns false\n\tnewSpanTermQuery(Term) is analogous to newTermQuery(Term)\n\n\n\nIf a query phrase has multiple tokens, one of which returns true from isMultiTerm, then QueryBuilder constructs a SpanQuery, rather than a PhraseQuery or MultiPhraseQuery. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16073514",
            "date": "2017-07-04T11:43:53+0000",
            "content": "Should we really add hooks for such inefficient queries?\n\nI don't think we should take wildcards and expand them into potentially massive spanqueries. I know there is code that does this today, but this is hugely trappy, I think it should be deprecated and removed. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16073519",
            "date": "2017-07-04T11:48:01+0000",
            "content": "Do we have a better way of running such queries though?  In patent search queries of the form \"term1 term2* term3\" are pretty common, and as far as I know SpanMultiTermQueryWrapper is the only way we have of running them. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16073706",
            "date": "2017-07-04T14:23:44+0000",
            "content": "I'm also reluctant to giving first-class support to such slow queries in QueryBuilder. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16074433",
            "date": "2017-07-05T08:46:41+0000",
            "content": "I'd contest that it's giving first-class support.  None of the standard query parsers will actually use this hook, but it will be there for users who need it.  It's all very well saying that these queries are slow, but it still should be possible to run them if there's no alternative. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16074530",
            "date": "2017-07-05T10:14:55+0000",
            "content": "It's all very well saying that these queries are slow, but it still should be possible to run them if there's no alternative.\n\nActually I wish we never added SpanMultiTermQueryWrapper. It creates a SpanTermQuery for every matching term without enforcing any limit, which makes it very trappy: you can easily end up with very slow queries or ever out-of-memory errors at rewrite time. Can this prefix-inside-phrase problem be solved at index-time instead with something like edge-ngrams? I'd be ok with adding hooks to QueryBuilder that make it easier to handle an index-time solution of this problem, but if the main use-case is to make it easier to create a SpanMultiTermQueryWrapper, then it feels like adding an API only to enable usage of a trappy query to me. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16074583",
            "date": "2017-07-05T11:02:59+0000",
            "content": "I opened LUCENE-6513 a while back to try and stop the memory blowup caused by SpanMTQWrapper, maybe that's worth revisiting?\n\nPrefix ngrams will work for prefix queries, but doesn't generalize, unfortunately. ",
            "author": "Alan Woodward"
        }
    ]
}