{
    "id": "SOLR-6398",
    "title": "Add IterativeMergeStrategy to support running Parallel Iterative Algorithms inside of Solr",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This ticket builds on the existing AnalyticsQuery / MergeStrategy framework by adding the abstract class IterativeMergeStrategy,  which has built-in support for call-backs to the shards. The IterativeMergeStrategy is designed to support the execution of Parallel iterative Algorithms, such as Gradient Descent, inside of Solr.\n\nTo use the IterativeMergeStrategy you extend it and implement process(). This gives you access to the callback() method which makes it easy to make repeated calls to all the shards and run algorithms that require iteration.\n\nBelow is an example of a class that extends IterativeMergeStrategy. In this example it collects the count from the shards and then calls back to shards executing the !count AnalyticsQuery and sending it merged counts from all the shards. \n\n\nclass TestIterative extends IterativeMergeStrategy  {\n\n    public void process(ResponseBuilder rb, ShardRequest sreq) throws Exception {\n      int count = 0;\n      for(ShardResponse shardResponse : sreq.responses) {\n        NamedList response = shardResponse.getSolrResponse().getResponse();\n        NamedList analytics = (NamedList)response.get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        count += c.intValue();\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!count base=\"+count+\"}\");\n      params.add(\"q\",\"*:*\");\n\n\n      /*\n      *  Call back to all the shards in the response and process the result.\n       */\n\n      QueryRequest request = new QueryRequest(params);\n      List<Future<CallBack>> futures = callBack(sreq.responses, request);\n\n      int nextCount = 0;\n\n      for(Future<CallBack> future : futures) {\n        QueryResponse response = future.get().getResponse();\n        NamedList analytics = (NamedList)response.getResponse().get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        nextCount += c.intValue();\n      }\n\n      NamedList merged = new NamedList();\n      merged.add(\"mycount\", nextCount);\n      rb.rsp.add(\"analytics\", merged);\n    }\n  }",
    "attachments": {
        "SOLR-6398.patch": "https://issues.apache.org/jira/secure/attachment/12663229/SOLR-6398.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Joel Bernstein",
            "id": "comment-14104657",
            "date": "2014-08-20T21:46:14+0000",
            "content": "Initial implementation. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-14105872",
            "date": "2014-08-21T20:10:37+0000",
            "content": "New patch with a simplified callBack mechanism. Will also provide more granular callBack support. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-15060280",
            "date": "2015-12-16T16:46:35+0000",
            "content": "Updated patch that works with latest trunk. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-15060463",
            "date": "2015-12-16T18:25:26+0000",
            "content": "This is looking ready to commit to trunk I believe. I'll be experimenting with this framework in next couples weeks with gradient descent and logisitic regression modeling. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15060664",
            "date": "2015-12-16T19:44:44+0000",
            "content": "Commit 1720422 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1720422 ]\n\nSOLR-6398: Add IterativeMergeStrategy to support running Parallel Iterative Algorithms inside of Solr "
        }
    ]
}