{
    "id": "LUCENE-8583",
    "title": "Make GeoUtils#orientation method more stable",
    "details": {
        "components": [
            "core/other"
        ],
        "status": "Resolved",
        "resolution": "Not A Problem",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "The method GeoUtils#orient is problematic when called with points that are almost collinear but not quite. In that case the sign of the determinant is not reliable, so for example calling the method with points (a, b, c) and with (c, b, a) gives the same orientation. \n\nThere is a complex implementation described here (https://www.cs.cmu.edu/~quake/robust.html) where the method becomes more reliable. I have been playing with such implementation and still is not 100% reliable.\n\nMy proposal is not to be fully precise and define a precision constant for this method. Therefore whenever the value of determinant is small to that precision, we consider the points to be collinear. In this case the results of the method are reliable.",
    "attachments": {
        "LUCENE-8583.patch": "https://issues.apache.org/jira/secure/attachment/12950309/LUCENE-8583.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16706265",
            "author": "Robert Muir",
            "content": "Is the new formula really more precise? (substraction etc). \n\nI'm confused why its necessary: this method was added for the points case (LatLonPoint) where it only runs on quantized values, so it just doesn't need that much precision. And its called in inner loops of points methods that are performance sensitive, so why make it more complex when that much precision isn't being used?\n\nIf this is being used for some other reason, maybe that use case should be separate, or just have its own method? It is a problem with trying to make \"Utils\" methods that are generally useable. Since we aren't a geo library that's not a goal we have to strive for  ",
            "date": "2018-12-02T13:01:29+0000"
        },
        {
            "id": "comment-16706270",
            "author": "Robert Muir",
            "content": "And maybe it should be moved back to a private method in Polygon2D where it was originally? I think there is a danger in making such methods public, then we feel the need to cater to every use-case and stuff gets slow. I'd like for the Polygon2D stuff to stay fast for finding points within a polygon. ",
            "date": "2018-12-02T13:05:36+0000"
        },
        {
            "id": "comment-16707620",
            "author": "Nicholas Knize",
            "content": "Since we aren't a geo library that's not a goal we have to strive for\n+1\u00a0\nAnd maybe it should be moved back to a private method in Polygon2D where it was originally?\nI agree. I'd also like to point out that we shouldn't need this\u00a0to be super accurate in LatLonShape either. It looks like this is a byproduct of adding a dependency on orientation in\u00a0LatLonShape.Triangle#encodeTriangle we should remove that dependency and just ensure order of the triangle vertices are preserved. \n ",
            "date": "2018-12-03T18:19:25+0000"
        },
        {
            "id": "comment-16708397",
            "author": "Ignacio Vera",
            "content": "Thanks for the comments Robert Muir & Nicholas Knize. \n\nNow that I have looked again into the problem, I see that my bias has been looking into the method with unquantize values. When looking to the encoded values things behave properly. \n\nI agree this is not needed so I will close the issue. ",
            "date": "2018-12-04T08:43:15+0000"
        }
    ]
}