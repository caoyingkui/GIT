{
    "id": "SOLR-8577",
    "title": "Add AlertStream and ModelStream to the Streaming API",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "The AlertStream will return the top N \"new\" documents for a query from a SolrCloud collection. The AlertStream will track the highest version numbers from each shard and use these as checkpoints to determine new content.\n\nThe DaemonStream (SOLR-8550) can be used to create \"live\" alerts that run at intervals. Sample syntax:\n\n\ndaemon(alert(collection1, q=\"hello\", n=\"20\"), runInterval=\"2000\")\n\n\n\nThe DaemonStream can be installed in a SolrCloud worker node where it can llive and send out alerts.\n\nAI Models\n\nThe AlertStream will also accept an optional ModelStream which will apply a machine learning model to the alert. For example:\n\nalert(collection1, q=\"hello\", n=\"20\", model(collection2, id=\"model1\"))\n\n\nThe ModelStream will return a machine learning model saved in a SolrCloud collection. Function queries for different model types will be developed so the models can be applied in the re-ranker or as a sort.\n\nTaking action\n\nCustom decorator streams can be developed that take actions based on the AI driven alerts. For example the pseudo code below would run the function someAction on the Tuples emitted by the AlertStream.\n\n\ndaemon(someAction(alert(...)))\n\n \n\nLearning\n\nWhile some SolrCloud worker collections are alerting and taking action, other worker collections can be learning models which can be applied for alerting. For example:\n\n\ndaemon(update(logit()))\n\n\n\nThe pseudo code above calls the LogitStream (SOLR-8492)  which would learn a Logistic Regression model and flow the model into a SolrCloud collection. The model can then be used for alerting and taking action on new data as it enters the system.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}