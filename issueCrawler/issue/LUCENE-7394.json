{
    "id": "LUCENE-7394",
    "title": "Make MemoryIndex immutable",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "The MemoryIndex itself should just be a builder that constructs an IndexReader instance. The whole notion of freezing a memory index should be removed.\n\nWhile we change this we should also clean this class up. There are many methods to add a field, we should just have a single method that accepts a `IndexableField`.\n\nThe `keywordTokenStream(...)` method is unused and untested and should be removed and it doesn't belong with the memory index.\n\nThe `setSimilarity(...)`, `createSearcher(...)` and `search(...)` methods should be removed, because the MemoryIndex should just be responsible for creating an IndexReader instance.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15391512",
            "author": "Alan Woodward",
            "date": "2016-07-25T08:09:17+0000",
            "content": "We'd still need a way to set a Similarity so that we can encode norms, I think?\n\nThe tricky part here is going to be untangling the various shared block pools.  We need to make sure that calling .addField() doesn't change the data referenced by a previously created IndexReader, which is where I got stuck last time I tried playing around with this idea.\n\nAnother nice cleanup would be to remove the global storeOffsets and storePayloads settings and instead set them per-field. "
        },
        {
            "id": "comment-15392121",
            "author": "Martijn van Groningen",
            "date": "2016-07-25T15:38:30+0000",
            "content": "We'd still need a way to set a Similarity so that we can encode norms, I think?\n\nYes, but that should be set before adding fields as a constructor parameter.\n\nThe tricky part here is going to be untangling the various shared block pools. We need to make sure that calling .addField() doesn't change the data referenced by a previously created IndexReader, which is where I got stuck last time I tried playing around with this idea.\n\nI think we should avoid sharing shared block pools between IndexReader instances, this makes it hard (impossible?) to make MemoryIndex immutable and cleanup this class. To be clear about this we should from an usage / api perspective MemoryIndex should be renamed to MemoryIndexBuilder (that has constructor that accepts a Similarity) and has two methods (addField(...) and build(), after build has been invoked calling addField(...) will fail).\n\nLater on we can investigate some kind of a reuse by adding an extra constructor to MemoryIndexBuilder that accepts an IndexReader. This would make copy of the previous create MemoryIndex and where possible shallow copies / clones of the previous created data structures. "
        },
        {
            "id": "comment-15393061",
            "author": "David Smiley",
            "date": "2016-07-26T02:09:16+0000",
            "content": "I have to wonder if the design elegance goal you're after here is worth the price.  MemoryIndex is used in cases where it needs to be cheap to use/re-use for high-throughput.  Just keep this in mind please. "
        },
        {
            "id": "comment-16646482",
            "author": "Tim Owen",
            "date": "2018-10-11T14:21:06+0000",
            "content": "Related to this (although I am happy to raise a separate Jira as a bug report) is that mutating a MemoryIndex by calling addField you can end up with a corrupt internal state (and\u00a0ArrayIndexOutOfBoundsException) if you've done a search on the index beforehand e.g. call addField, then search, then addField again, then search. This appears to be because the\u00a0sortedTerms internal state gets built when the first search happens, and isn't invalidated/null'd when the next addField happens. So the second search sees a state where sortedTerms and terms are out of sync, and fails.\n\nThe documentation doesn't say this is a bad sequence of usage (or prevent it) so making it immutable with a Builder would fix that situation. Alternatively, calling search could implicitly call freeze, or addField could null out sortedTerms. "
        }
    ]
}