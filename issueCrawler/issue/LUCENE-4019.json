{
    "id": "LUCENE-4019",
    "title": "Parsing Hunspell affix rules without regexp condition",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "3.6",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We found out that some recent Dutch hunspell dictionaries contain suffix or prefix rules like the following:\n\n\n \nSFX Na N 1\nSFX Na 0 ste\n\n\n\nThe rule on the second line doesn't contain the 5th parameter, which should be the condition (a regexp usually). You can usually see a '.' as condition, meaning always (for every character). As explained in LUCENE-3976 the readAffix method throws error. I wonder if we should treat the missing value as a kind of default value, like '.'.  On the other hand I haven't found any information about this within the spec. Any thoughts?",
    "attachments": {
        "LUCENE-4019.patch": "https://issues.apache.org/jira/secure/attachment/12525830/LUCENE-4019.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-24T13:59:42+0000",
            "content": "I dont know if there is a real spec, more just what hunspell allows.\n\nFurthermore i think some of these dictionaries are actually in ispell/myspell format\nand hunspell is actually backwards compatible with them?\n\nas far as a \"spec\" for all of these, good luck \n\nwhen i was looking at this I looked at stuff like:\n\n\thttp://pwet.fr/man/linux/fichiers_speciaux/hunspell\n\thttp://www.openoffice.org/lingucomponent/affix.readme\n\n ",
            "author": "Robert Muir",
            "id": "comment-13260566"
        },
        {
            "date": "2012-04-24T14:30:35+0000",
            "content": "Robert, with \"spec\" I meant exactly your links \nActually it's clear that the affix header has 4 elements while each rule has at least 5 elements. I don't really know what hunspell does with that kind of malformed rules. Lucene just throws an error while loading the dictionary. Looking at the hunspell source code, I might be wrong but I suspect it just skips that specific rule with some warning. But honestly it's hard to believe that at least 4 dictionaries I tried contain mistaken rules, isn't it? I'll investigate more, thanks! ",
            "author": "Luca Cavanna",
            "id": "comment-13260612"
        },
        {
            "date": "2012-04-24T15:04:48+0000",
            "content": "its tough to know for sure. in general a lot of hunspell dictionaries cannot be parsed.\nThere are a ton of these, under many strange licenses and they are very large.\n\nA \"Test scaffolding\" of sorts could probably be done to hunt out problems:\n\n\tdownload all dictionaries you can find\n\tfor each one, use hunspell command-line tools like munch, unmunch (which applies all the rules), etc\n  to generate some sort of expected output in .txt format.\n\tfor each one, do the same using the hunspell parsing here.\n\tcompare results: when things differ, try to boil it down to a compact .aff/.dic, with a test case and fix and commit.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13260638"
        },
        {
            "date": "2012-05-07T10:57:10+0000",
            "content": "Thank you Robert for the explanation!\nIn this specific case it's hard to understand the differences between hunspell and Lucene, since Lucene doesn't even parse the affix file.\nI've been in contact with the authors of those Ducth dictionaries, as well as with the hunspell author. It turned out that those affix rules are wrong and hunspell actually ignores them. I think it's better to ignore them in Lucene too, rather than throwing an exception, which makes impossible to use those dictionaries at all. ",
            "author": "Luca Cavanna",
            "id": "comment-13269516"
        },
        {
            "date": "2012-05-07T11:00:18+0000",
            "content": "Small patch: affix rules with less than 5 elements are now ignored. I added a specific test with a new affix file containing an example of rule shorter than it should be. Let me know if you prefer to add a warning when a rule is skipped. Hunspell does that only with a specific command line option. ",
            "author": "Luca Cavanna",
            "id": "comment-13269519"
        },
        {
            "date": "2012-05-28T13:02:23+0000",
            "content": "Hi Luca,\n\nSorry for taking so long to get to this.  Patch looks good and seems to fix the problem.  I think we do need some way to force 'strict' parsing of the files.  Do you think you can add a option for that? When strict parsing is enabled, lines without the expected number of elements cause an error.  \n\nWe can even have this enabled by default so users have to explicitly say that they know the dictionary doesn't conform to our standard and are okay with us silently ignoring bad rules. ",
            "author": "Chris Male",
            "id": "comment-13284393"
        },
        {
            "date": "2012-05-31T10:09:32+0000",
            "content": "Hi Chris, \nthanks for your feedback. Here is a new patch containing a new option in order to enable/disable the affix strict parsing, by default it is enabled. I updated the HunspellStemFilterFactory too in order to expose the new option to Solr. ",
            "author": "Luca Cavanna",
            "id": "comment-13286454"
        },
        {
            "date": "2012-05-31T10:55:32+0000",
            "content": "Hi Luca,\n\nThanks for taking a shot at this.\n\nI wonder whether we can do improve the ParseException message? At the very least it should include the line that is causing the problem so people can find it.  What would be even better is if we also included the line number.  The latter is probably not so urgent, but it would be handy to have for other parsing errors too.\n\nAlso I think the changes to the Factory are wrong:\n\n\n+      if(strictAffixParsing.equalsIgnoreCase(TRUE)) ignoreCase = true;\n+      else if(strictAffixParsing.equalsIgnoreCase(FALSE)) ignoreCase = false;\n\n\n ",
            "author": "Chris Male",
            "id": "comment-13286474"
        },
        {
            "date": "2012-05-31T11:39:18+0000",
            "content": "Yeah, sorry for my mistakes, I corrected them.\nAnd I added the line number to the ParseException.\nLet me know if there's something more I can do! ",
            "author": "Luca Cavanna",
            "id": "comment-13286491"
        },
        {
            "date": "2012-06-01T05:21:54+0000",
            "content": "Thanks Luca! ",
            "author": "Chris Male",
            "id": "comment-13287154"
        }
    ]
}