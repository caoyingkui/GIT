{
    "id": "LUCENE-1497",
    "title": "Minor changes to SimpleHTMLFormatter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/highlighter"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I'd like to make few minor changes to SimpleHTMLFormatter.\n\n1. Define DEFAULT_PRE_TAG and DEFAULT_POST_TAG and use them in the default constructor. This will not trigger String lookups by the JVM whenever the highlighter is instantiated.\n\n2. Create the StringBuffer in highlightTerm with the right number of characters from the beginning. Even though StringBuffer's default constructor allocates 16 chars, which will probably be enough for most highlighted terms (pre + post tags are 7 chars, which leaves 9 chars for terms), I think it's better to allocate SB with the right # of chars in advance, to avoid char[] allocations in the middle.",
    "attachments": {
        "LUCENE-1497.patch": "https://issues.apache.org/jira/secure/attachment/12396557/LUCENE-1497.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-12-21T07:09:10+0000",
            "content": "All highlighter tests pass ",
            "author": "Shai Erera",
            "id": "comment-12658358"
        },
        {
            "date": "2009-01-08T15:14:38+0000",
            "content": "In fact I think it may be faster to not even use StringBuffer in highlightTerm?  Since we know we are concatenating 3 strings can we just + them?  I suspect that'd give better net performance (pure speculation!). ",
            "author": "Michael McCandless",
            "id": "comment-12661992"
        },
        {
            "date": "2009-01-08T15:33:01+0000",
            "content": "If I understand you correctly, you propose to change the code to:\npreTag + originalText + postTag.\nThat creates 2 (or 3) StringBuffers actually. Java implements + by allocating a StringBuffer and appending both Strings to it.\nWhat I propose is to create the StringBuffer large enough from the beginning such that there won't be additional allocations.  ",
            "author": "Shai Erera",
            "id": "comment-12662004"
        },
        {
            "date": "2009-01-08T16:07:47+0000",
            "content": "Ahh, OK, then let's leave your approach (dedicated single StringBuffer).  I'll commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12662020"
        },
        {
            "date": "2009-01-08T16:11:36+0000",
            "content": "Committed revision 732739.\n\nThanks Shai! ",
            "author": "Michael McCandless",
            "id": "comment-12662022"
        }
    ]
}