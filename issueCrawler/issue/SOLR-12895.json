{
    "id": "SOLR-12895",
    "title": "SurroundQParserPlugin support for UnifiedHighlighter",
    "details": {
        "type": "Bug",
        "status": "Patch Available",
        "labels": "",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "The \"surround\" QParser doesn't work with the UnififedHighlighter \u2013 LUCENE-8492.  However I think we can overcome this by having Solr's QParser extend getHighlightQuery and rewrite itself.",
    "attachments": {
        "SOLR-12895.patch": "https://issues.apache.org/jira/secure/attachment/12945255/SOLR-12895.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16661076",
            "content": "Patch attached.  Hmmm; I see TestSurroundQueryParser tests highlighting.  I should enhance the test there instead of adding ones to highlighter tests.  Both places are reasonable but the parser's test makes more sense to me. ",
            "author": "David Smiley",
            "date": "2018-10-23T18:07:20+0000"
        },
        {
            "id": "comment-16661683",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 2 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 48s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 37s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 37s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 37s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 37s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 37s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  47m 55s \n  core in the patch failed.  \n\n\n  \n   \n  53m 59s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.search.QueryEqualityTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12895 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12945256/SOLR-12895.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / e083b15 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/210/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/210/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/210/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "date": "2018-10-24T03:35:25+0000"
        },
        {
            "id": "comment-16662371",
            "content": "While I think this solution is okay... it may introduce a performance hit if the query contains a MTQ \u2013 and this parser can produce a PrefixQuery (an MTQ), though it appears nothing else.  But at least the solution is easy and will make the highlighting work out of the box.\n\nAnother solution path is to insist that someone using this query parser should set hl.offsetSource= (whatever) and furthermore we make changes in UnifiedSolrHighlighter that make this value stick instead of getting optimized away to NONE_NEEDED.  That, together with the new hl.weightMatches, should make this work reasonably efficiently.  Granted if say you have offsets in postings but no term vectors, we'll always assume you need to do analysis since we're not certain what the query contains (wether it has an MTQ or not).\n\nI don't really like it when query parsers produce Query subclasses internal to the workings of the query parser.  ComplexPhraseQParserPlugin also does this and is similarly affected.  I'm not certain if these parsers need to do this or not.  That could be another avenue to fix the problem. ",
            "author": "David Smiley",
            "date": "2018-10-24T14:39:52+0000"
        },
        {
            "id": "comment-16662396",
            "content": "Another solution path is to insist that someone using this query parser should set hl.offsetSource= (whatever) and furthermore we make changes in UnifiedSolrHighlighter that make this value stick instead of getting optimized away to NONE_NEEDED\n\nI did a quick experiment. That won't always work since, for example, MemoryIndexOffsetStrategy is too smart for its own good as it pre-filters the tokens based on the extracted terms & automata which are both erroneously empty as already established.  But the other offset strategies ought to work.  Any way, I'm not going to pursue that further. ",
            "author": "David Smiley",
            "date": "2018-10-24T15:01:29+0000"
        }
    ]
}