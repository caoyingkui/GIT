{
    "id": "LUCENE-4109",
    "title": "BooleanQueries are not parsed correctly with the flexible query parser",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-BETA",
            "3.6.2",
            "6.0"
        ],
        "affect_versions": "3.5,                                            3.6",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Hi,\n\nI just found another bug in the flexible query parser (together with Robert Muir, yay!).\n\nThe following query string works in the standard query parser:\n\n\n(field:[1 TO *] AND field:[* TO 2]) AND field2:z\n\n\n\nyields\n\n\n+(+field:[1 TO *] +field:[* TO 2]) +field2:z\n\n\n\nThe flexible query parser though yields:\n\n\n+(field:[1 TO *] field:[* TO 2]) +field2:z\n\n\n\nTest patch is attached (from Robert actually).\n\nI don't know if it affects earlier versions than 3.5.",
    "attachments": {
        "LUCENE-4109_branches_lucene_solr_3_6_rev1367055.patch": "https://issues.apache.org/jira/secure/attachment/12538330/LUCENE-4109_branches_lucene_solr_3_6_rev1367055.patch",
        "test-patch.txt": "https://issues.apache.org/jira/secure/attachment/12530798/test-patch.txt",
        "LUCENE-4109.patch": "https://issues.apache.org/jira/secure/attachment/12537323/LUCENE-4109.patch",
        "LUCENE-4109_trunk_rev1366771.patch": "https://issues.apache.org/jira/secure/attachment/12538258/LUCENE-4109_trunk_rev1366771.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-11T23:03:47+0000",
            "content": "bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment ",
            "author": "Hoss Man",
            "id": "comment-13412316"
        },
        {
            "date": "2012-07-16T11:26:04+0000",
            "content": "other differences between classic QueryParser and flexible StandardQueryParser can be seen, if we run QueryParserTestBase against StandardQueryParser: \n\n\n\tassertQueryEquals(\"\\\\* TO \\\"*\\\"\",null,\"\\\\* TO \\\\*\");\n  \u2192 result is {{ \"\\\\* TO *\" }} instead\n\t{{\n{ assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\"); }\n}}\n  \u2192 result is {{\n{ \"a:b-?c\" }\n}} instead\n\tassertQueryEquals(\"a - b\", a, \"a \u2013 b\"); }}\n  \u2192 LUCENE-2566\n\n\n\nIs it possible to backport a solution to 3.x? I have a customer with this exact problem on 3.6... ",
            "author": "Karsten R.",
            "id": "comment-13415011"
        },
        {
            "date": "2012-07-16T11:59:45+0000",
            "content": "Karsten, porting LUCENE-2566 to the QP is not really related to this issue. Maybe leave a comment over there?\n\nThis issue is a straight up bug. If someone can figure out whats broken, I'll fix it. But I dont know where\nthe bug is! ",
            "author": "Robert Muir",
            "id": "comment-13415043"
        },
        {
            "date": "2012-07-16T16:08:19+0000",
            "content": "Robert, the bug is in GroupQueryNodeProcessor:\n\nStandardQueryTreeBuilder does not care about AndQueryNode or OrQueryNode, it expects to find the correct ModifierQueryNode-children.\nGroupQueryNodeProcessor is responsible to insert this children (BooleanModifiersQueryNodeProcessor is not used in StandardQueryNodeProcessorPipeline).\nBut GroupQueryNodeProcessor does not support a proper recursion: You can hide a GroupQueryNode as child of AndQueryNodes or NOT-Nodes or Boost-Nodes.\nSo all in all this tests failed because \"(a AND b)\" is treated like \"(a b)\":\n\n\tassertQueryEquals(\"!(a AND b) OR c\", null, \"-(+a +b) c\");\n\tassertQueryEquals(\"!(a AND b) AND c\", null, \"-(+a +b) +c\");\n\tassertQueryEquals(\"((a AND b) AND c)\", null, \"(+a +b) +c\");\n\tassertQueryEquals(\"(a AND b) AND c\", null, \"(+a +b) +c\");\n\t{{\n{assertQueryEquals(\"!(a AND b)\", null, \"!(+a +b)\");}\n}}\n\tassertQueryEquals(\"(a AND b)^4 OR c\", null, \"(+a +b)^4 c\");\n\n\n\nimho GroupQueryNodeProcessor should be divided in two processors. On processor to remove all GroupQueryNodes and one like BooleanModifiersQueryNodeProcessor to add ModifiersQueryNodes.\nbtw: If GroupQueryNodeProcessor would extends QueryNodeProcessorImpl we could be sure about the recursion. ",
            "author": "Karsten R.",
            "id": "comment-13415341"
        },
        {
            "date": "2012-07-16T16:11:03+0000",
            "content": "Karsten, do you think you can make a patch to fix this? ",
            "author": "Robert Muir",
            "id": "comment-13415342"
        },
        {
            "date": "2012-07-16T16:55:10+0000",
            "content": "Robert, the current GroupQueryNodeProcessor minimize the amount of nodes in the SyntaxTree (via defaultOperator).\nI think this screw me up. I could make a patch without this optimization which passes TestQPHelper. \nBut possible we need more TestCases. I would like to test against QueryParserTestBase, but this can not be extended for StandardQueryParser because of the defaultField, which moves from constructor to the parse-method and because there is no common interface for classic QP and StandardQP with e.g. the setAllowLeadingWildcard-Method.\nWould it be OK, if I also patch QueryParserTestBase? ",
            "author": "Karsten R.",
            "id": "comment-13415381"
        },
        {
            "date": "2012-07-16T17:48:23+0000",
            "content": "\nWould it be OK, if I also patch QueryParserTestBase?\n\nYes! ",
            "author": "Robert Muir",
            "id": "comment-13415442"
        },
        {
            "date": "2012-07-20T10:27:53+0000",
            "content": "Patch for lucene/contrib against http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_3_6\nThe patch adds the Processor BooleanQuery2ModifierNodeProcessor.\nThe patch also changes ParametricRangeQueryNodeProcessor as hotfix for LUCENE-3338 (this change is not for 4.X because LUCENE-3338 is already fixed in 4.X). \nThe patch passes most tests from QueryParserTestBase e.g. except  \n{{\n{assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");}\n}}\nand LUCENE-2566 related tests.\nPatch for trunk will coming soon. ",
            "author": "Karsten R.",
            "id": "comment-13419042"
        },
        {
            "date": "2012-07-20T12:36:49+0000",
            "content": "Patch looks good to me!\n\nI also added Daniels test from buzzwords.\n\nThanks for fixing this, and adding additional tests! Once 3.6 branch is open I'll get it in. ",
            "author": "Robert Muir",
            "id": "comment-13419090"
        },
        {
            "date": "2012-07-20T13:27:27+0000",
            "content": "Hmm, with the patch some tests for TestMultiFieldQPHelper fail.\nI didn't look into it further, but we should figure out whats going on there if we can. ",
            "author": "Robert Muir",
            "id": "comment-13419122"
        },
        {
            "date": "2012-07-20T16:15:51+0000",
            "content": "Robert, I forgot to run all tests \nThe patch must also include MultiFieldQueryNodeProcessor (new OrQueryNode(children) instead of new BooleanQueryNode(children)) and PrecedenceQueryNodeProcessorPipeline (BooleanQuery2ModifierNodeProcessor.class instead of GroupQueryNodeProcessor.class). I will fix this on monday.\nbtw. I hope ((b:one +b:more) t:two) is equal to ((b:one +b:more) (+t:two)) ",
            "author": "Karsten R.",
            "id": "comment-13419311"
        },
        {
            "date": "2012-07-28T23:01:07+0000",
            "content": "Patch against http://svn.apache.org/repos/asf/lucene/dev/trunk (rev1366771)\nThe patch adds the processor BooleanQuery2ModifierNodeProcessor and a test-class TestStandardQP which extends QueryParserTestBase.\nThere is also a new interface CommonQueryParserConfiguration to configure flexible and classic parser in QueryParserTestBase. \nIn TestStandardQP some tests from QueryParserTestBase are hidden by a \"do-nothing\" overriding method.\n\nThe patch passes all tests from /lucene/queryparser/src. It passes because some tests are changed (without changing any meaning). In particular TestMultiFieldQPHelper is changed.\n\nStill \"\\\\* TO \\\"*\\\"\" is parsed as \"\\\\* TO *\" and not as \"\\\\* TO \\\\*\".\n\nIf this patch is OK I will provide a Version 3.6.X patch. ",
            "author": "Karsten R.",
            "id": "comment-13424454"
        },
        {
            "date": "2012-07-29T14:03:43+0000",
            "content": "queryparser tests doing instanceof on MockAnalyzer and doing different things depending upon whether\nposition increments are enabled in its stopfilter is wrong.\n ",
            "author": "Robert Muir",
            "id": "comment-13424551"
        },
        {
            "date": "2012-07-29T14:18:22+0000",
            "content": "updated patch. i removed the instanceof and getter from mockanalyzer.\n\nthe bug is simply that the flexible queryparser didnt enable position increments by default. ",
            "author": "Robert Muir",
            "id": "comment-13424554"
        },
        {
            "date": "2012-07-29T14:24:56+0000",
            "content": "This is a great test refactoring. I think its ready for trunk and 4.x\n\nI'll list in CHANGES that we defaulted positionIncrements=on like ClassicQueryParser.\n\nFor 3.6.x i am not sure we should do this, so maybe we should use your hack \n\nI'll think about it. ",
            "author": "Robert Muir",
            "id": "comment-13424556"
        },
        {
            "date": "2012-07-29T15:07:33+0000",
            "content": "Thank you!\n\nFor 3.6.2 I omitted the test refactoring, and just the fixes, only backporting a few individual tests. I think this would be too much for the bugfix branch. ",
            "author": "Robert Muir",
            "id": "comment-13424564"
        },
        {
            "date": "2012-07-30T11:40:26+0000",
            "content": "Robert, thank you for backporting the patch to 3.6.2\nPlease also commit this patch with a change of ParametricRangeQueryNodeProcessor because [1 TO *] is treated like [1 TO //*] (was not in trunk-patch because of LUCENE-3338) ",
            "author": "Karsten R.",
            "id": "comment-13424801"
        },
        {
            "date": "2012-07-30T13:51:59+0000",
            "content": "Karsten: can you please open a new issue for adding open range query feature?\n\nI don't want to mix that up with this bug. ",
            "author": "Robert Muir",
            "id": "comment-13424864"
        },
        {
            "date": "2012-07-30T15:58:40+0000",
            "content": "Robert: the patch solves the \"Flexible query parser does not support open ranges\"-part of LUCENE-3338, it is not a new issue.\nPossible best \"fix\" is the backporting of LUCENE-3338 (because even with the patch the query [include TO exclude} throws a syntax error) ",
            "author": "Karsten R.",
            "id": "comment-13424940"
        },
        {
            "date": "2012-07-30T16:01:58+0000",
            "content": "But its not related to this issue at all. ",
            "author": "Robert Muir",
            "id": "comment-13424944"
        },
        {
            "date": "2013-05-10T10:34:48+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654331"
        }
    ]
}