{
    "id": "LUCENE-6425",
    "title": "Move extractTerms to Weight",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Task"
    },
    "description": "Today we have extractTerms on Query, but it is supposed to only be called after the query has been specialized to a given IndexReader using Query.rewrite(IndexReader) to allow some complex queries to replace terms \"matchers\" with actual terms (eg. WildcardQuery).\n\nHowever, we already have an abstraction for indexreader-specialized queries: Weight. So I think it would make more sense to have extractTerms on Weight. This would also remove the trap of calling extractTerms on a query which is not rewritten yet.\n\nSince Weights know about whether scores are needed or not, I also hope this would help improve the extractTerms semantics. We currently have 2 use-cases for extractTerms: distributed IDF and highlighting. While the former only cares about terms which are used for scoring, it could make sense to highlight terms that were used for matching, even if they did not contribute to the score (eg. if wrapped in a ConstantScoreQuery or a BooleanQuery FILTER clause). So highlighters could do searcher.createNormalizedWeight(query, false).extractTerms(termSet) to get all terms that were used for matching the query while distributed IDF would instead do searcher.createNormalizedWeight(query, true).extractTerms(termSet) to get scoring terms only.",
    "attachments": {
        "LUCENE-6425.patch": "https://issues.apache.org/jira/secure/attachment/12725564/LUCENE-6425.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14496132",
            "author": "Adrien Grand",
            "date": "2015-04-15T12:48:46+0000",
            "content": "Here is a patch: highlighters extract terms on a Weight that does not need scores (as mentionned in the description) while ShardSearchingTestBase and Solr's ExactStatsCache (used for distributed IDF) use a Weight with needsScores=true. "
        },
        {
            "id": "comment-14496144",
            "author": "Yonik Seeley",
            "date": "2015-04-15T13:05:33+0000",
            "content": "However, we already have an abstraction for indexreader-specialized queries: Weight. \n\nYeah, it makes sense to have a call to get the matching terms there.\n\nsearcher.createNormalizedWeight(query, true).extractTerms(termSet) to get scoring terms only.\n\n+1\n\nIt might still make sense to have an extractTerms on query to get explicit terms (those that do not depend any specific index?) "
        },
        {
            "id": "comment-14496158",
            "author": "Adrien Grand",
            "date": "2015-04-15T13:22:23+0000",
            "content": "It might still make sense to have an extractTerms on query to get explicit terms (those that do not depend any specific index?)\n\nIn that case, I think it would be as easy to rewrite against an empty index? This is what PostingsHighlighter does in order to avoid costly rewrites:\n\n\nIndexReader emptyReader = new MultiReader();\nSet<Term> termSet = new HashSet<>();\nnew IndexSearcher(emptyReader).createNormalizedWeight(query, false).extractTerms(termSet);\n\n "
        },
        {
            "id": "comment-14496159",
            "author": "Robert Muir",
            "date": "2015-04-15T13:23:35+0000",
            "content": "-1 to maintain two extractTerms method, or make the API confusing in that way.\n\nWeight or Query, choose one. "
        },
        {
            "id": "comment-14496176",
            "author": "Robert Muir",
            "date": "2015-04-15T13:32:38+0000",
            "content": "Can we please cleanup the postingshighlighter changes?\n\n\tDon't leave the now-unused rewrite() method as dead code.\n\tDon't have a constant EMPTY_INDEXREADER, instead EMPTY_SEARCHER, and have it explicitly disable caching.\n\n "
        },
        {
            "id": "comment-14496243",
            "author": "Adrien Grand",
            "date": "2015-04-15T14:30:32+0000",
            "content": "Here is a cleaned-up patch as requested by Robert. "
        },
        {
            "id": "comment-14496391",
            "author": "Robert Muir",
            "date": "2015-04-15T15:38:11+0000",
            "content": "I am +1 but concerned about the change to TermContext. the plumbing involved there should only happen from FuzzyLikeThisQuery... And i agree, the way it lies about docFreq, totalTermFreq should be unsupported, but i don't understand how this change discovered/required it. "
        },
        {
            "id": "comment-14496484",
            "author": "Adrien Grand",
            "date": "2015-04-15T16:40:26+0000",
            "content": "the plumbing involved there should only happen from FuzzyLikeThisQuery... \n\nI have tests failing that do not use FuzzyLikeThisQuery. If you apply this patch and comment out the reset of totalTermFreq then eg. HighlighterSearchTests.testGetFuzzyFragments will fail. If I understand the issue correctly what happens is that the FuzzyQuery is rewritten against the main index using SCORING_BOOLEAN_REWRITE which in-turn creates a TermQuery using the `TermQuery(Term t, TermContext states)` (which sets the docFreq explicitely to 3) and then for highlighting purposes, the query is executed against the memory index which has a ttf and a df of 1. So the following line of TermQuery.createWeight is called if (docFreq != -1) termState.setDocFreq(docFreq); and then it breaks an assertion in TermStatistics' constructor: assert totalTermFreq == -1 || totalTermFreq >= docFreq; // #positions must be >= #postings because we overrode the doc freq but did not care to update the total term freq to a consistent value. "
        },
        {
            "id": "comment-14497033",
            "author": "Robert Muir",
            "date": "2015-04-15T21:21:25+0000",
            "content": "Then there are bugs here. \n\nApparently there are 3 ways to use termquery, one avoids reseeking the terms dict, another lies about docfreq, and other is normal usage. The first two are mixing each other up and we have broken statistics... that should only be the case for FuzzyLikeThis. so something is really wrong. "
        },
        {
            "id": "comment-14498144",
            "author": "ASF subversion and git services",
            "date": "2015-04-16T15:14:37+0000",
            "content": "Commit 1674091 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1674091 ]\n\nLUCENE-6425: Replaced Query.extractTerms with Weight.extractTerms. "
        },
        {
            "id": "comment-14498205",
            "author": "ASF subversion and git services",
            "date": "2015-04-16T15:56:15+0000",
            "content": "Commit 1674100 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1674100 ]\n\nLUCENE-6425: Replaced Query.extractTerms with Weight.extractTerms. "
        },
        {
            "id": "comment-14586856",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:43:31+0000",
            "content": "Bulk close for 5.2.0. "
        },
        {
            "id": "comment-16405244",
            "author": "Dean Gurvitz",
            "date": "2018-03-19T18:42:03+0000",
            "content": "I was wondering how an explicit API change took place in a minor Lucene version? With no deprecation warnings or anything of that kind coming first. I recently upgraded a minor version of Lucene and was very surprised when things stopped compiling.\n\nPlus, it seems to me that the solution offered by Adrien for getting non\u00a0index dependent terms is very messy and inelegant compared to the previous situation. Is there no way to change this? "
        },
        {
            "id": "comment-16406145",
            "author": "Adrien Grand",
            "date": "2018-03-20T11:07:42+0000",
            "content": "If I were to make this change again today, I would probably have tried to make the migration easier indeed, and kept the bigger changes for a major release. It was not a good idea to make such a change in a minor release. However I still think it was a good change. The main use-cases for this method are highlighting and distributed index statistics. I'm on the fence about also making the extraction of reader-independent terms supported, since we do not have this need internally. "
        },
        {
            "id": "comment-16416011",
            "author": "Dean Gurvitz",
            "date": "2018-03-27T17:59:57+0000",
            "content": "I get that. However,\u00a0Lucene is also designed for external use, and\u00a0at my company we actually needed an index neutral extraction. This isn't a huge deal or anything, but I just think these issues can sometimes be addressed with a little more care. "
        }
    ]
}