{
    "id": "LUCENE-1597",
    "title": "New Document and Field API",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "This is a super rough prototype of how a new document API could look like. It's basically what I came up with during a long flight across the Atlantic \n\nIt is not integrated with anything yet (like IndexWriter, DocumentsWriter, etc.) and heavily uses Java 1.5 features, such as generics and annotations.\nThe general idea sounds similar to what Marvin is doing in KS, which I found out by reading Mike's comments on LUCENE-831, I haven't looked at the KS API myself yet. \n\nMain ideas:\n\n\tseparate a field's value from its configuration; therefore this patch introduces two classes: FieldDescriptor and FieldValue\n\tI was thinking that in most cases the documents people add to a Lucene index look alike, i.e. they contain mostly the same fields with the same settings. Yet, for every field instance the DocumentsWriter checks the settings and calls the right consumers, which themselves check settings and return true or false, indicating whether or not they want to do something with that field or not. So I was thinking we could design the document API similar to the Class<->Object concept of OO-languages. There a class is a blueprint (as everyone knows  ), and an object is one instance of it. So in this patch I introduced a class called DocumentDescriptor, which contains all FieldDescriptors with the field settings. This descriptor is given to the consumer (IndexWriter) once in the constructor. Then the Document \"instances\" are created and added via addDocument().\n\tA Document instance allows adding \"variable fields\" in addition to the \"fixed fields\" the DocumentDescriptor contains. For these fields the consumers have to check the field settings for every document instance (like with the old document API). This is for maintaining Lucene's flexibility that everyone loves.\n\tDisregard the changes to AttributeSource for now. The code that's worth looking at is contained in a new package \"newdoc\".\n\n\n\nAgain, this is not a \"real\" patch, but rather a demo of how a new API could roughly work.",
    "attachments": {
        "lucene-new-doc-api.patch": "https://issues.apache.org/jira/secure/attachment/12405289/lucene-new-doc-api.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-12T22:53:08+0000",
            "content": "You should start with looking at newdoc/demo/DocumentProducer.java. This class shows how a user of Lucene would add documents to a Lucene index with the new API. ",
            "author": "Michael Busch",
            "id": "comment-12698294"
        },
        {
            "date": "2009-04-13T17:17:49+0000",
            "content": "Separating FieldDescriptor and FieldValue sounds interesting... but I don't see the need for DocumentDescriptor, or the need to set it on the IndexWriter (and then have to have the distinction between fixed and variable fields).\n\nWhat about something along the lines of\n\nclass Field {\n  FieldDescriptor descriptor;\n  String fieldName;  // or alternately, the descriptor could contain the name\n  FieldValue[] fieldValues;\n  float boost;\n}\n\nclass InputDocument {\n  Map<String fieldName, Field>  OR List<Field> fields;\n}\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-12698443"
        },
        {
            "date": "2009-04-13T21:45:02+0000",
            "content": "\nThis looks great!  Many random thoughts...\n\nThis is largely a cleaner restructuring of what's already held in\n*Field, cutting over to AttributeSource so that we gain extensibility\nto other attrs people would want to store.  It also decouples type\nfrom value, which is great.\n\nIt's also quite different from Lucy/KS's approach which is to use\ncarefully thought out subclasses to represent the type hierarchy.  Ie\nLucy/KS uses \"the language\" (classes/subclasses) to express things,\nand this approach uses AttributeSource (which is sort of our\nworkaround for Java not allowing multiple inheritance).\n\nThis approach subdivides a type into N fully orthogonal attributes, so\na type is some combination of configured instances of these\nattributes.  This actually mirrors what Field does today (in that we\nhave Field.Store.X, Field.Index.X, Field.TermVector.X).\n\nThis can sometimes be awkward because attributes are \"flat\", eg\nTermVectorAttribute only makes sense for indexed fields, or for a\nBinaryFieldValue most attributes are not allowed.  We don't get strong\ntype checking of such \"mistakes\", vs KS/Lucy's approach.\n\nHow would you turn on/off [future] CSF storage?  A separate attr?  A\nboolean on StoreAttribute?\n\nNumericFieldAttribute seems awkward (one shouldn't have to turn on/off\nzero padding, trie; or rather it's better to operate in \"use cases\"\nlike \"I want to do range filtering\" or \"I want to sort\").  Seems like\nmaybe we need a SortAttribute and RangeFilterAttribute\n(or... something).\n\nPresumably would could make an \"iterate over all fields\" utility so\nthat a consumer of document wouldn't have to differentiate b/w fixed &\nvariable fields.\n\nIn this model, can one re-use FieldValue for maximizing indexing\nthroughput?  Seems like yes?\n\nStoredFieldsWriter is needing to do instanceof checks & casting,\nwhich'd be nice to [somehow] avoid.\n\nIt'd be great to land this before 2.9 (and cut back to Java 1.4) but\nmaybe that's too ambitious.\n\nShould we make \"get me your TokenStream\" (get/setAnalyzer) a part of\nIndexAttribute?\n\nCan a single FieldDescriptor be shared among many fields?  Seems like\nwe'd have to take name out of FieldDescriptor (I don't think the name\nshould be in FieldDescriptor, anyway).\n\nAlso how would we correspondingly fix FieldInfos to \"generically\"\nstore & merge attribute values?  (EG TermVectorAttribute's\nisStoreOffsets/Positions get \"merged\" and changed whenever segments\nare merged, or docs are added to RAM buffer).  Seems like each\nattribute needs a write/read/merge?\n\nOne thing I like about DocumentDescriptor is it can be the basis for\napp-level schema... we could eventually allows serialize/deserialize\n(eg XML or JSON) of the doc DocumentDescriptor.  In fact wouldn't\nFieldInfos simply store a DocumentDescriptor (having been merged from\nall the docs in that segment)?  It also may enable some speedups\nduring indexing eg I can imagine (future) having an indexing chain\nthat's provided the DocumentDescriptor it will handle, up front.\n\nCan we maybe rename Descriptor -> Type?  Eg FieldDescriptor ->\nFieldType? ",
            "author": "Michael McCandless",
            "id": "comment-12698560"
        },
        {
            "date": "2009-04-27T20:59:26+0000",
            "content": "Thanks for the thorough review, Mike. Reading your response made me really excited, because you exactly understood most of the thoughts I put into this code, without me even mentioning them  Thanks for writing them down!\n\nI started including your suggestions into my patch and will reply with more detail to your individual points as I'm working on them. ",
            "author": "Michael Busch",
            "id": "comment-12703367"
        },
        {
            "date": "2009-04-27T21:30:13+0000",
            "content": "\nHow would you turn on/off [future] CSF storage? A separate attr? A\nboolean on StoreAttribute?\n\nI was thinking about adding a separate attribute. But here is one\nthing I haven't figured out yet: it should actually be perfectly fine\nto store a value in a CSF and also in the 'normal' store. The\nproblem is that the type of data input is the limiting factor here: if\nthe user provides the data as a byte array, then everything works\nfine. However, if the data is provide as a Reader, then it's not\nguaranteed that the reader can be read more than once. To implement\nreset() is optional, as the javadocs say.\n\nSo maybe we should state in our javadocs that a reader must support\nreset(), otherwise writing the data into more than one data structures\nwill result in an undefined behavior? Alternatively we could introduce\na new class called ResetableReader, where reset() is abstract, and\nchange the API in 3.0 to only accept that type of reader?\n\nBtw. the same is true for fields that provide the data as a\nTokenStream.  ",
            "author": "Michael Busch",
            "id": "comment-12703391"
        },
        {
            "date": "2009-04-27T21:47:00+0000",
            "content": "\nCan we maybe rename Descriptor -> Type? Eg FieldDescriptor ->\nFieldType?\n\nDone.\n\n\nCan a single FieldDescriptor be shared among many fields? Seems like\nwe'd have to take name out of FieldDescriptor (I don't think the name\nshould be in FieldDescriptor, anyway).\n\nI agree, this should be possible. I removed the name.\n\n\nNumericFieldAttribute seems awkward (one shouldn't have to turn on/off\nzero padding, trie; or rather it's better to operate in \"use cases\"\nlike \"I want to do range filtering\" or \"I want to sort\"). Seems like\nmaybe we need a SortAttribute and RangeFilterAttribute\n(or... something).\n\nYep I agree. Some things in this prototype are quite goofy, because I \nwanted to mainly demonstrate the main ideas. The attributes you suggest\nmake sense to me. ",
            "author": "Michael Busch",
            "id": "comment-12703407"
        },
        {
            "date": "2012-09-19T19:13:32+0000",
            "content": "Can this be resolved (maybe as duplicate?), since o.a.l.document.FieldType was introduced by LUCENE-2308?\n\nOr maybe there are other not-already-implemented ideas here that could be refactored to work with the current status quo?  (I didn't study the patch.) ",
            "author": "Steve Rowe",
            "id": "comment-13458992"
        },
        {
            "date": "2012-09-19T20:01:36+0000",
            "content": "I think it's more or less dup'd w/ LUCENE-2308 ... we can open new issues for any differences. ",
            "author": "Michael McCandless",
            "id": "comment-13459030"
        },
        {
            "date": "2013-05-10T10:33:01+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653797"
        }
    ]
}