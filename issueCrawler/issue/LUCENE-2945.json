{
    "id": "LUCENE-2945",
    "title": "Surround Query doesn't properly handle equals/hashcode",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0.3,                                            3.1,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In looking at using the surround queries with Solr, I am hitting issues caused by collisions due to equals/hashcode not being implemented on the anonymous inner classes that are created by things like DistanceQuery (branch 3.x, near line 76)",
    "attachments": {
        "LUCENE-2945d.patch": "https://issues.apache.org/jira/secure/attachment/12473771/LUCENE-2945d.patch",
        "LUCENE-2945e.patch": "https://issues.apache.org/jira/secure/attachment/12489895/LUCENE-2945e.patch",
        "LUCENE-2945.patch": "https://issues.apache.org/jira/secure/attachment/12472458/LUCENE-2945.patch",
        "LUCENE-2945-partial1.patch": "https://issues.apache.org/jira/secure/attachment/12472358/LUCENE-2945-partial1.patch",
        "LUCENE-2945c.patch": "https://issues.apache.org/jira/secure/attachment/12473208/LUCENE-2945c.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-03-01T19:36:32+0000",
            "content": "This one is in the category oversights that will come back to haunt \n\nI found 15 occurrences in the Surround source code of this regex for method definitions:\nQuery .*makeLucene.*Query\n\nOf these, the following actually lack equals/hash:\nDistanceQuery line 76 (as above) and SimpleTerm line 78.\nTaking a closer look at both, the underlying reason why hash/equals is needed is the implementation of Query.rewrite().\nThese are the only ones in Surround that do that, so they should indeed be the only culprits here.\n\nI\u00b4ll provide a patch to implement hash/equals for them.\n ",
            "author": "Paul Elschot",
            "id": "comment-13001049"
        },
        {
            "date": "2011-03-01T21:52:57+0000",
            "content": "It turns out that 14 or 15 classes in o.a.l.queryParser.surround.query need hashCode() and equals() for this.\nThat is also probably the reason why I did not add these methods initially. ",
            "author": "Paul Elschot",
            "id": "comment-13001137"
        },
        {
            "date": "2011-03-01T22:00:43+0000",
            "content": "The -partial1 patch is about half way through the files in the surround.query package, and it is not even compiled yet.\n\nI don't know how much time I have for this for the rest of the week, so Grant, if you are in a hurry you can take it from here.\n\nThe patch also removes some internally unused code, I suppose no one has used that yet. ",
            "author": "Paul Elschot",
            "id": "comment-13001141"
        },
        {
            "date": "2011-03-02T08:20:05+0000",
            "content": "A quick fix would be to implement hashCode() and equals() in SrndQuery, the basis of the class hierarchy in surround.query, by using the actual class of the object and by delegating to toString().\nThis will work because I implemented toString() all over this class hierarchy to verify the parsing results during development.\n\nFor use in a query results cache, this might be somewhat too restrictive because there is no need to distinguish between the infix and prefix forms. Anyway, that issue would be the same for an implementation of equals() and hashCode() all over the class hierarchy. ",
            "author": "Paul Elschot",
            "id": "comment-13001331"
        },
        {
            "date": "2011-03-02T16:53:24+0000",
            "content": "What about the anonymous inner classes that actually construct the Query?  I think those are the primary cause of the problem. ",
            "author": "Grant Ingersoll",
            "id": "comment-13001485"
        },
        {
            "date": "2011-03-02T17:15:55+0000",
            "content": "Ok, I forgot that inner classes can use the enclosing object, but they do not expose it.\nThat means that for the quick fix above the inner classes need to delegate to their enclosing objects.\n\nI'll try this quick fix next. It could be good enough. ",
            "author": "Paul Elschot",
            "id": "comment-13001495"
        },
        {
            "date": "2011-03-02T20:11:03+0000",
            "content": "The patch of 2 March 2011 contains the quick fix as indicated, and a deprecation for an unused method.\nAll contrib tests pass and the javadocs build correctly, but there is no test added for the added hashCode() and equals(). ",
            "author": "Paul Elschot",
            "id": "comment-13001591"
        },
        {
            "date": "2011-03-02T20:12:47+0000",
            "content": "Grant, could you review the patch? ",
            "author": "Paul Elschot",
            "id": "comment-13001593"
        },
        {
            "date": "2011-03-02T20:16:14+0000",
            "content": "but there is no test added for the added hashCode() and equals().\n\nNote, QueryUtils has methods for that.\n\nI will review soon. ",
            "author": "Grant Ingersoll",
            "id": "comment-13001596"
        },
        {
            "date": "2011-03-04T18:15:05+0000",
            "content": "Here's a patch that has a test using QueryUtil that fails.  I don't think the getClass() approach is quite right for the base class equals.   ",
            "author": "Grant Ingersoll",
            "id": "comment-13002760"
        },
        {
            "date": "2011-03-05T12:36:10+0000",
            "content": "OK, here's a patch with a test that passes.  I'm not entirely thrilled about the implementation of equals/hash on the two inner classes (used to be anonymous) but I do think it works.  Namely, I use the syntax of the original query as a string, per Paul's original suggestion as part of the hash/equals.  It just seems awkward to have to pass that in solely for this purpose, but I didn't see what other information I had around that would make the object unique from an equals/hash standpoint.  I suppose the underlying queries list on the ComposedQuery might work and I can try that if others think it makes more sense. ",
            "author": "Grant Ingersoll",
            "id": "comment-13002968"
        },
        {
            "date": "2011-03-09T16:55:44+0000",
            "content": "As to the patch of 5 March, QueryUtils uses clone() to test hashCode() and I'd rather not support clone() because of the presence of the basic query factory and because I don't expect reparsing to be a problem to start a clone.\nAlso implementing equals() on an anonymous inner class is not easily possible when hashCode() uses a \"qualified this\", because equals() would need the same qualification on the other object and I don't see a way to have that. An explicit reference from an object of a named static inner class gets around that, and I am curious to know whether equals() could be implemented without an explicit reference in this case.\n\nI have started coding in these directions, once some tests pass I'll post a patch. ",
            "author": "Paul Elschot",
            "id": "comment-13004646"
        },
        {
            "date": "2011-03-09T17:04:50+0000",
            "content": "The Query class already is cloneable so it needs to support what the QueryUtils is doing.  I think it is the anonymous inner class (or in my case, just the inner class) that is the one that matters for all of this.  It is an instance of Query and thus needs a proper equals/hashcode.  I don't really care about the outer containing classes other than I think it is a misnomer to call them Query classes when they really are factory classes for creating Lucene Queries. ",
            "author": "Grant Ingersoll",
            "id": "comment-13004655"
        },
        {
            "date": "2011-03-09T18:37:35+0000",
            "content": "The Query class already is cloneable so it needs to support what the QueryUtils is doing.\n\nWould that include throwing a CloneNotSupportedException?\n\n\nFor these classes I could not find a better name in their package when I wrote this.\nAlso I wanted the possibility to generate a query for another engine,\nso I needed an (factory) layer between the parser and the final query.\nThere is already a BasicQueryFactory in there that generates Lucene TermQuery and SpanTermQuery leaf objects,\nso perhaps the other Lucene Query objects could also be made there.\nThese others are objects of the inner classes that need hashCode() and equals() here, and Lucene BooleanQuery objects.\nThis could be a spin off issue. ",
            "author": "Paul Elschot",
            "id": "comment-13004714"
        },
        {
            "date": "2011-03-09T22:08:10+0000",
            "content": "The LUCENE-2945c.patch starts from the patch of 5 March. It adds static inner classes to with hashCode() and equals() as needed here.\nFor now, these classes throw a RuntimeException created from a CloneNotSupportedException in their clone() methods. This leaves clone() not correctly implemented, but at least now a RuntimeException is thrown instead of previously returning an incorrect result.\n\nThe patch also includes a single passing test in SrndQueryTest for equal queries when parsed from strings that only differ in whitespace. The other tests there have been commented out because they use clone() via QueryUtils\n\nMore tests are still needed, also  for inequality. The earlier tests all pass.\n ",
            "author": "Paul Elschot",
            "id": "comment-13004825"
        },
        {
            "date": "2011-03-16T08:25:37+0000",
            "content": "Basically the 2945d patch of 16 March 2011 is a refactoring of the 2945c patch. The static inner classes have been moved to package private classes, and their common function was moved to a new super class.\n\nAlso a few more test cases were added. Test cases for testing not equals might be still be added, but I don't see a real need to do that.\n\nAs this adds handling equals/hashcode and has hardly any redundancy, I think this is close to committable. The patch also deprecates a compare..() method, I don't know whether the comments there are to the point. ",
            "author": "Paul Elschot",
            "id": "comment-13007381"
        },
        {
            "date": "2011-03-23T16:57:37+0000",
            "content": "New -2945d patch that also has the changes to SpanNearClauseFactory. ",
            "author": "Paul Elschot",
            "id": "comment-13010218"
        },
        {
            "date": "2011-05-02T18:25:01+0000",
            "content": "Does the latest patch solve the original problem as expected? ",
            "author": "Paul Elschot",
            "id": "comment-13027755"
        },
        {
            "date": "2011-08-09T20:26:14+0000",
            "content": "Paul -\ncan you refactor the 2945d patch so that it will apply cleanly to the reorganized source tree, as the surround parser is now under modules/ ? ",
            "author": "Simon Rosenthal",
            "id": "comment-13081893"
        },
        {
            "date": "2011-08-09T20:46:40+0000",
            "content": "I noticed the local conflict when the move was done, and I resolved it by reverting the changes in my working copy.\nThat means I would be starting from the patch here and that would not be less work for me than for anyone else.\nMy first try would be to rename the directories in the patch to the new situation. ",
            "author": "Paul Elschot",
            "id": "comment-13081910"
        },
        {
            "date": "2011-08-09T21:00:19+0000",
            "content": "LUCENE-29453.patch uploaded.\n\nmodified from 2945d as you suggested, and it applied cleanly to 08/08 nightly build ",
            "author": "Simon Rosenthal",
            "id": "comment-13081924"
        },
        {
            "date": "2011-08-09T21:19:01+0000",
            "content": "revised patch \u2013 needed changes package statements for few files. Applies and compiles cleanly now. ",
            "author": "Simon Rosenthal",
            "id": "comment-13081936"
        },
        {
            "date": "2011-09-07T12:31:09+0000",
            "content": "The current patch is for trunk only.  I'll go ahead apply, test, and commit there.  \n\nSimon, et al - if there is a desire to have this on 3.x, can someone create a patch for that branch? ",
            "author": "Erik Hatcher",
            "id": "comment-13098882"
        },
        {
            "date": "2011-09-07T13:06:47+0000",
            "content": "Committed patch to trunk.  Slight modified - caught a couple of queryParser -> queryparser changes (one caused compilation issue). ",
            "author": "Erik Hatcher",
            "id": "comment-13098919"
        },
        {
            "date": "2011-10-27T19:32:26+0000",
            "content": "noticed this was still unresolved.  closing, fixed on trunk a while ago. ",
            "author": "Erik Hatcher",
            "id": "comment-13137424"
        }
    ]
}