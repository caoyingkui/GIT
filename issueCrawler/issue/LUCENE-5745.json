{
    "id": "LUCENE-5745",
    "title": "Refactoring AbstractVisitingPrefixTreeFilter code using cellIterator.",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/spatial"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "6.0"
        ]
    },
    "description": "The AbstractVisitingPrefixTreeFilter (used by RPT's Intersects, Within, Disjoint) really should be refactored to use the new CellIterator API as it will reduce the amount of code and should make the code easier to follow since it would be based on a well-known design-pattern (an iterator). It currently uses a VNode and VNode Iterator.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14027188",
            "author": "Varun  V Shenoy",
            "content": "https://github.com/shenoyvvarun/lucene-solr/tree/lucene-5745\nMy interim work. It does not work. ",
            "date": "2014-06-10T23:12:59+0000"
        },
        {
            "id": "comment-14031789",
            "author": "David Smiley",
            "content": "I took a look at this today.  Your code was good in that it was how I thought it would be.  When I debugged why it didn't work, I made a couple realizations:\n\n\tcell.remove() wasn't implemented on the CellIterator implementation returned from LegacyPrefixTree when the query shape is a Point (FilteredCellIterator). I had LPT augment it via an anonymous class.\n\tfindSubCellsToVisit() wasn't quite right; I changed the abstraction so up-front IsWithin could customize the shape that is used for getTreeCellIterator(shape).\n\tIt may not have mattered to get the tests to pass but I realized cell.remove() needed to be invoked in a few other cases as well.\n\n\n\nI also made some basic refactorings like inlining addIntersectingChildren().  The lines of code in AVPTF went from 390 to 277 (most of which you already did), which is pretty darned sweet.  This refactoring also means a reduction in allocated objects \u2013 AVPT introduces no new allocation on a per-cell or per-term basis.\n\nBUT, I couldn't get the IsWithin predicate to work.  I debugged further and found out why.  Essentially, IsWithin wants to have more control over descending down the SPT, even when the current cell is a leaf.  But TreeCellIterator can't be told to go down, only to not go down.  And it won't go down when the current cell is a leaf.  I think I need to monkey with the APIs a bit to make this work.  I'm currently leaning towards TreeCellIterator being an interface (current code moving to an \"Impl\" suffix) that gives the caller control over descending, independent of wether the cell is a leaf.  Then, SPT.getTreeCellIterator would return an actual TreeCellIterator. ",
            "date": "2014-06-15T05:38:21+0000"
        }
    ]
}