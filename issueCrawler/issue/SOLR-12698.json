{
    "id": "SOLR-12698",
    "title": "SolrFeature: no-fq optimisation",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "contrib - LTR"
        ],
        "type": "Sub-task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Patch Available"
    },
    "description": "Stanislav Livotov wrote in SOLR-12688:\n\n... SolrFeature was not optimally implemented for the case when no fq parameter was passed. I'm not absolutely sure what was the intention to introduce both q(which is supposed to be a function query) and fq parameter for the same SolrFeature at all(Is there a case when they will be used together ? ), so I decided not to change behavior but just optimize described case ...\n\n(Please see SOLR-12688 description for overall context and analysis results.)",
    "attachments": {
        "SOLR-12698.patch": "https://issues.apache.org/jira/secure/attachment/12937795/SOLR-12698.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-11-05T20:51:36+0000",
            "content": "... the intention to introduce both q(which is supposed to be a function query) and fq parameter for the same SolrFeature at all(Is there a case when they will be used together ? ), ...\n\nA fair question. We could probably document this better, somehow. The SolrFeature javadocs currently only say \"... The value of the feature will be the score of the given query for the current document. ...\" and although the example configurations have both fq and q (individually) it's unstated when one might wish to use which or both. In essence (as far as a i recall) like with the fq query parameter itself the fq in SolrFeature can be used to restrict which documents score non-zero but without influencing the document score itself. ",
            "author": "Christine Poerschke",
            "id": "comment-16675742"
        },
        {
            "date": "2018-11-05T20:53:18+0000",
            "content": "Started to look at the initial SOLR-12698.patch in conjunction with the existing code; this is how far i got so far for today:\n\n\tSolrFeatureWeight.scorer is the method being changed.\n\texisting code:\n\t\n\t\thttps://github.com/apache/lucene-solr/blob/releases/lucene-solr/7.5.0/solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.java#L175-L184 illustrates when/why SolrFeatureWeight.solrQueryWeight might be null.\n\t\tIf SolrFeatureWeight.queryAndFilters is empty (because there was no fq and q (if present) resulted in a null solrQueryWeight) then getDocIdSetIteratorFromQueries will return null and SolrFeatureWeight.scorer will return null.\n\t\tIf SolrFeatureWeight.queryAndFilters contains one element (because there was no fq but there was a q which resulted in a non-null solrQueryWeight) then ... [to be continued]\n\t\n\t\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16675743"
        },
        {
            "date": "2018-12-06T01:35:00+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 14s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m  8s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m  8s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m  8s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m  8s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m  8s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n   1m 19s \n  ltr in the patch passed.  \n\n\n  \n   \n   6m 18s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12698 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12937795/SOLR-12698.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / b0e6a92 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/241/testReport/ \n\n\n modules \n C: solr/contrib/ltr U: solr/contrib/ltr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/241/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16710861"
        }
    ]
}