{
    "id": "LUCENE-7537",
    "title": "Add multi valued field support to index sorting",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Today index sorting can be done on single valued field through the NumericDocValues (for numerics) and SortedDocValues (for strings).\nI'd like to add the ability to sort on multi valued fields. Since index sorting does not accept custom comparator we could just take the minimum value of each document for an ascending sort and the maximum value for a descending sort.\nThis way we could handle all cases instead of throwing an exception during a merge when we encounter a multi valued DVs.",
    "attachments": {
        "LUCENE-7537.patch": "https://issues.apache.org/jira/secure/attachment/12837947/LUCENE-7537.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15634242",
            "author": "Michael McCandless",
            "date": "2016-11-03T20:55:13+0000",
            "content": "I think this makes sense.\n\nIt seems like we just need to handle serializing of SortedSetSortField and SortedNumericSortField, with their selectors, as well? "
        },
        {
            "id": "comment-15636240",
            "author": "Michael McCandless",
            "date": "2016-11-04T12:44:48+0000",
            "content": "I'll work on this ... "
        },
        {
            "id": "comment-15636366",
            "author": "Jim Ferenczi",
            "date": "2016-11-04T13:42:52+0000",
            "content": "Oh I've already started to work on a patch with the logic described above \nI'll post it shortly. Thanks Michael McCandless. "
        },
        {
            "id": "comment-15636511",
            "author": "Michael McCandless",
            "date": "2016-11-04T14:31:18+0000",
            "content": "Oh, no worries Jim Ferenczi!  Thank you for tackling this. "
        },
        {
            "id": "comment-15647164",
            "author": "Jim Ferenczi",
            "date": "2016-11-08T10:28:08+0000",
            "content": "Here is a simple patch that adds the support for multi valued sort directly in SortField. It defines 5 new sort types: sorted_string, sorted_long, sorted_double, sorted_float, sorted_int and uses the Sorted\n{Set|Numeric}\nSelector for sorting. The natural order picks the minimum value of the list for each document and the reverse order picks the maximum.\n\nThis patch also fixes a small bug which showed up in unit tests when using an index sorting with reverse sort and a missing value. "
        },
        {
            "id": "comment-15647298",
            "author": "Michael McCandless",
            "date": "2016-11-08T11:33:05+0000",
            "content": "Thanks Jim Ferenczi, I'll have a look. "
        },
        {
            "id": "comment-15647767",
            "author": "Adrien Grand",
            "date": "2016-11-08T14:55:19+0000",
            "content": "It defines 5 new sort types: sorted_string, sorted_long, sorted_double, sorted_float, sorted_int and uses the Sorted{Set|Numeric}Selector for sorting.\n\nThe new types do not look useful to me? For instance, DocValues.getSortedSet falls back to LeafReader.getSortedDocValues if the reader does not have SORTED_SET doc values, so all the code that you protected under eg. if (sortField.getType() == SortField.Type.SORTED_STRING) would also work with single-valued (SORTED) doc values (same for SORTED_NUMERIC and NUMERIC doc values). "
        },
        {
            "id": "comment-15647779",
            "author": "Michael McCandless",
            "date": "2016-11-08T15:00:23+0000",
            "content": "Hmm, I think we can take an alternate approach that does not add need to add new SortField.Type enum values, by extending IWC.setIndexSort]} to also allow {{SortedSetSortField and SortedNumericSortField?\n\nWhen serializing, we would need to check for those specific classes, and also serialize/deserialize their selectors. "
        },
        {
            "id": "comment-15647858",
            "author": "Jim Ferenczi",
            "date": "2016-11-08T15:32:40+0000",
            "content": "> The new types do not look useful to me? \n\nIt's to differentiate the underlying DVs and also because I didn't want to change the expectation of the native sort. Though I am totally for a single type that accepts both DVs if changing the SortField native types is ok. \n\n>  For instance, DocValues.getSortedSet falls back to LeafReader.getSortedDocValues if the reader does not have SORTED_SET doc values, so all the code that you protected under eg. if (sortField.getType() == SortField.Type.SORTED_STRING) would also work with single-valued (SORTED) doc values (same for SORTED_NUMERIC and NUMERIC doc values).\n\nThe leniency is here to catch SortedSetDocValues that ends up with a single value per field. But yes it's another point for the merged type.\n\n\n "
        },
        {
            "id": "comment-15647978",
            "author": "Jim Ferenczi",
            "date": "2016-11-08T16:07:00+0000",
            "content": "Thanks Michael McCandless. I tried this approach and then added the types to clean up the serialization and the index sorting check  I can totally revert to the first version which does what you say.  "
        },
        {
            "id": "comment-15648084",
            "author": "Michael McCandless",
            "date": "2016-11-08T16:52:21+0000",
            "content": "Thanks Jim Ferenczi, I think it's better to have the codec take on a bit more complexity for the serialization in exchange for keeping our public sorting APIs simpler... "
        },
        {
            "id": "comment-15653755",
            "author": "Jim Ferenczi",
            "date": "2016-11-10T10:58:52+0000",
            "content": "I published a new patch which adds index sort support for SortedSetSortField and SortedNumericSortField. \nMichael McCandless can you take a look ? "
        },
        {
            "id": "comment-15656881",
            "author": "Michael McCandless",
            "date": "2016-11-11T11:52:06+0000",
            "content": "Thank Jim Ferenczi, I'll have a look. "
        },
        {
            "id": "comment-15657742",
            "author": "Michael McCandless",
            "date": "2016-11-11T18:30:33+0000",
            "content": "Thanks Jim Ferenczi this looks cleaner!\n\nIn Lucene62SegmentInfoFormat.java, when we throw\nIllegalArgumentException, can we change it to include the sortField,\nnot just its .getType()?\n\nI think you need to fix SimpleTextCodec too?  I hit this failure:\n\n\n   [junit4] Suite: org.apache.lucene.codecs.simpletext.TestSimpleTextSegmentInfoFormat\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSimpleTextSegmentInfoFormat -Dtests.method=testSort -Dtests.seed=61D2298FBC9DEB3E -Dtests.locale=el-CY -Dtests.timezone=America/Indiana/Petersburg -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J0 | TestSimpleTextSegmentInfoFormat.testSort <<<\n   [junit4]    > Throwable #1: java.lang.IllegalStateException: Unexpected sort type: CUSTOM\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([61D2298FBC9DEB3E:303701A677D0F12E]:0)\n   [junit4]    > \tat org.apache.lucene.codecs.simpletext.SimpleTextSegmentInfoFormat.write(SimpleTextSegmentInfoFormat.java:373)\n   [junit4]    > \tat org.apache.lucene.index.BaseSegmentInfoFormatTestCase.testSort(BaseSegmentInfoFormatTestCase.java:268)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /l/jim/lucene/build/codecs/test/J0/temp/lucene.codecs.simpletext.TestSimpleTextSegmentInfoFormat_61D22\n\n\n\nThe new CorruptIndexException s thrown in\nLucene62SegmentInfoFormat.java have the wrong message I think?\nShouldn't it be something like \"invalid SortedSetSelector type: \" + type ?\n\nCan you bump the version value in Lucene62SegmentInfoFormat.java,\nand set VERSION_CURRENT to the new version?  We need to do this\nwhen we make any index format change so that if e.g. and old Lucene\nversion tries to read a newer index (written with this change) they\nsee an IndexFormatTooNewException and not\nCorruptIndexException.\n "
        },
        {
            "id": "comment-15663364",
            "author": "Jim Ferenczi",
            "date": "2016-11-14T10:09:34+0000",
            "content": "Thanks Michael McCandless. Sorry I didn't ran the full tests for the last patch. \nI've attached a new one which passes all the tests. I fixed the exceptions and the SimpleText codec. Could you take another look ?  "
        },
        {
            "id": "comment-15666821",
            "author": "Michael McCandless",
            "date": "2016-11-15T10:50:21+0000",
            "content": "Thanks Jim Ferenczi, this looks very close!\n\nFor SimpleText, could we use \"multi_valued_string\" instead of \"sorted_string\" to describe it in the segment info format?\n\nCan we also name the new tests with \"multi valued\" instead of \"sorted\", e.g. testBasicSortedLong --> testMultiValuedLong?\n\nCan we change this:\n\nthrow new IllegalStateException(\"Unexpected SortedNumericSortField type: \" + sortField.getType());\n\n\n\nto this?:\n\nthrow new IllegalStateException(\"Unexpected SortedNumericSortField \" + sortField);\n\n\n\nJust so we get more information if we ever do hit these exceptions...\n\nInstead of:\n\n\n  static final int VERSION_CURRENT = 1;\n\n\n\nCan you introduce a separate constant for the value 1?  E.g.:\n\n\n  static final int VERSION_MULTI_VALUED_SORT = 1;\n  static final int VERSION_CURRENT = VERSION_MULTI_VALUED_SORT;\n\n\n\nIt just gives us a bit more info about why the format change happened.\n\nHmm, I see we have no back-compat testing of sorted indices ... I'll\nopen an issue to fix that.  Once this change is released to the wild\n(6.4.0), we have to improve that to include multi-valued sort ... I'll\ndo that too. "
        },
        {
            "id": "comment-15667292",
            "author": "Jim Ferenczi",
            "date": "2016-11-15T14:32:54+0000",
            "content": "Thanks Michael McCandless, I attached a new patch that addresses your comments. \nI can also make another path for 6.4 if needed. "
        },
        {
            "id": "comment-15667660",
            "author": "Michael McCandless",
            "date": "2016-11-15T17:02:00+0000",
            "content": "Thanks Jim Ferenczi; I still see e.g.:\n\n\n+          case \"sorted_string\":\n+            type = SortField.Type.STRING;\n+            selectorSet = readSetSelector(input, scratch);\n+            break;\n\n\n\nin SimpleText ... can we maybe rename that to:\n\n\n      case \"multi_valued_string\":\n        ...\n\n\n\nOtherwise I think this is ready! "
        },
        {
            "id": "comment-15667698",
            "author": "Jim Ferenczi",
            "date": "2016-11-15T17:16:30+0000",
            "content": "Oh right \"sorted_string\" is ambiguous. Here is another patch with the renaming  to \"multi_valued\" for string and numerics.\nThanks Michael McCandless "
        },
        {
            "id": "comment-15668337",
            "author": "Michael McCandless",
            "date": "2016-11-15T21:09:51+0000",
            "content": "Jim Ferenczi thanks, this looks awesome ... I'll run tests and push soon. "
        },
        {
            "id": "comment-15668388",
            "author": "ASF subversion and git services",
            "date": "2016-11-15T21:23:08+0000",
            "content": "Commit 6c3c6bc3797307efa13cae06778d41f24a26bccb in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6c3c6bc ]\n\nLUCENE-7537: Index time sorting now supports multi-valued sorts using selectors (MIN, MAX, etc.) "
        },
        {
            "id": "comment-15670746",
            "author": "ASF subversion and git services",
            "date": "2016-11-16T15:37:59+0000",
            "content": "Commit e357f957f3059add5582b9695f838794c386dcad in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e357f95 ]\n\nLUCENE-7537: Index time sorting now supports multi-valued sorts using selectors (MIN, MAX, etc.) "
        },
        {
            "id": "comment-15670747",
            "author": "ASF subversion and git services",
            "date": "2016-11-16T15:38:01+0000",
            "content": "Commit 64b9eefaa931b4fc8b2345e2307eff4a317e3450 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=64b9eef ]\n\nLUCENE-7537: fix some 6.x backport issues "
        },
        {
            "id": "comment-15670748",
            "author": "Michael McCandless",
            "date": "2016-11-16T15:38:21+0000",
            "content": "Thanks Jim Ferenczi! "
        }
    ]
}