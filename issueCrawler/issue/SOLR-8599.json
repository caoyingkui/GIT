{
    "id": "SOLR-8599",
    "title": "Errors in construction of SolrZooKeeper cause Solr to go into an inconsistent state",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "We originally saw this happen due to a DNS exception (see stack trace below). Although any exception thrown in the constructor of SolrZooKeeper or the parent class, ZooKeeper, will cause DefaultConnectionStrategy to fail to update the zookeeper client. Once it gets into this state, it will not try to connect again until the process is restarted. The node itself will also respond successfully to query requests, but not to update requests.\n\nTwo things should be address here:\n1) Fix the error handling and issue some number of retries\n2) If we are stuck in a state like this stop responding to all requests \n\n\n2016-01-23 13:49:20.222 ERROR ConnectionManager [main-EventThread] - :java.net.UnknownHostException: HOSTNAME: unknown error\nat java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\nat java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)\nat java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)\nat java.net.InetAddress.getAllByName0(InetAddress.java:1276)\nat java.net.InetAddress.getAllByName(InetAddress.java:1192)\nat java.net.InetAddress.getAllByName(InetAddress.java:1126)\nat org.apache.zookeeper.client.StaticHostProvider.<init>(StaticHostProvider.java:61)\nat org.apache.zookeeper.ZooKeeper.<init>(ZooKeeper.java:445)\nat org.apache.zookeeper.ZooKeeper.<init>(ZooKeeper.java:380)\nat org.apache.solr.common.cloud.SolrZooKeeper.<init>(SolrZooKeeper.java:41)\nat org.apache.solr.common.cloud.DefaultConnectionStrategy.reconnect(DefaultConnectionStrategy.java:53)\nat org.apache.solr.common.cloud.ConnectionManager.process(ConnectionManager.java:132)\nat org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:522)\nat org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:498)\n2016-01-23 13:49:20.222 INFO ConnectionManager [main-EventThread] - Connected:false\n2016-01-23 13:49:20.222 INFO ClientCnxn [main-EventThread] - EventThread shut down",
    "attachments": {
        "SOLR-8599.patch": "https://issues.apache.org/jira/secure/attachment/12784776/SOLR-8599.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-27T23:45:28+0000",
            "author": "Keith Laban",
            "content": "Added a patch to address issue #1. In this patch I had to remove final clause for ZkServerAddress and add a public setter method in order to test the issue ",
            "id": "comment-15120426"
        },
        {
            "date": "2016-02-10T18:14:48+0000",
            "author": "Dennis Gove",
            "content": "This fails the forbidden api precommit check.\n\n[forbidden-apis] Forbidden method invocation: java.util.concurrent.Executors#newSingleThreadScheduledExecutor() [Spawns threads with vague names; use a custom thread factory (Lucene's NamedThreadFactory, Solr's DefaultSolrThreadFactory) and name threads so that you can tell (by its name) which executor it is associated with]\n[forbidden-apis]   in org.apache.solr.cloud.ConnectionManagerTest (ConnectionManagerTest.java:119)\n\n ",
            "id": "comment-15141360"
        },
        {
            "date": "2016-02-11T22:37:19+0000",
            "author": "Keith Laban",
            "content": "added usage of DefaultSolrThreadFactory to test ",
            "id": "comment-15143635"
        },
        {
            "date": "2016-02-22T20:26:15+0000",
            "author": "Dennis Gove",
            "content": "I have somewhat of an interesting situation at hand here.\n\nAs part of this patch a test is added to ConnectionManagerTest which forces a DNS failure on the zookeeper connection by attempting to connect to \"BADADDRESS\" and then fixing it after 5 seconds. This shows that the change Keith put in ConnectionManager will continually try to make a connection until it can. It's a good test and it exercises the bug and fix perfectly.\n\nHowever, the test depends on my ISP. I've run the test under 5 scenarios and only 3 of them pass. \n\n1. Connected to my corporate network\nIn this scenario the test passes perfectly as it should.\n\n2. Connected to no network (ie, wifi card turned off)\nIn this scenario the test passes perfectly as it should.\n\n3. Connected to my home network backed by Verizon FIOS\nIn this scenario the test hangs and upon further investigation I found that it is in an \"infinite\" loop in ConnectionManager::waitForConnected. This appears to be an infinite loop because while there is a timeout the timeout is Long.MAX_VALUE. The problem here is that the loop waits until it is either connected or closed. Neither of those conditions are ever hit. But why? We're trying to hit http://BADADDRESS and clearly that is a DNS lookup failure. Oh no no no, not according to Verizon. See, Verizon instead says \"Oh, you must've typed something in wrong so instead of returning to you a DNS failure let me return to you a redirect to a search page - you clearly want this search page\". It appears that because of this redirection a connection is never made nor is it ever closed. Hence, loop forever. \n\n4. Connected to my personal wifi hotspot backed by T-Mobile\nSame issue as seen with Verizon FIOS, though a T-Mobile specific search page. \n\n5. Connected to a hotspot through my iPhone backed by Verizon Wireless\nIn this scenario the test passes perfectly as it should.\n\nNote that this difference is only seen when a DNS lookup failure is in play. If I change the bad address to \"http://BADADDRESS\" then it fails instead because \"//BADADDRESSIS\" is said to be an invalid path string. Technically this is testing a slightly different case but I'm comfortable calling it the same test because the issue being corrected is a failure to make a connection during the construction of SolrZooKeeper and a malformed url fails just the same. ",
            "id": "comment-15157644"
        },
        {
            "date": "2016-02-22T22:10:04+0000",
            "author": "Mark Miller",
            "content": "Yeah, we try to avoid that in tests due to dns hijacking. I think there is an ip6 address that works for this? Uwe Schindler, am I remembering right? ",
            "id": "comment-15157810"
        },
        {
            "date": "2016-02-22T22:24:52+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nplease don't write tests that rely on DNS failures. Every local provider does something else, but not all return a correct \"not found\". Unless we have a \"mock DNS server\", we cannot use any DNS in Solr tests. For similar reasons we also do not use \"localhost\" as hostname, but instead use 127.0.0.1 as IP address.\n\nTo have some broken address that always fails to connect to, use an IPv6 address that is standardized to be routed nowhere and already refused by the Hosts's IPv6 stack. According to spec one possible address is: http://[ff01::114]:anyport/\n\nAs example look at SolrExceptionTest.java\n\nFYI, ff01:: is the address range for local Multicast addresses, but only ff01::1 (all local nodes) and ff01::2 (all routers) are allowed in IPv6 networks. ff01::114 is plain invalid and refused by host's TCP stack for using in TCP connections. So it is guaranteed to fail. ",
            "id": "comment-15157834"
        },
        {
            "date": "2016-02-23T00:26:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2c0a5e30364d83dc82383075a5f7c65200022494 in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2c0a5e3 ]\n\nSOLR-8599: After a failed connection during construction of SolrZkClient attempt to retry until a connection can be made ",
            "id": "comment-15158011"
        },
        {
            "date": "2016-02-23T00:32:05+0000",
            "author": "Dennis Gove",
            "content": "Thanks. I'll keep that in mind going forward - and I agree, depending on a DNS failure was ripe for issues down the road. As the test was changed to instead rely on an invalid url I think what's in there will be good. New attachment forthcoming. ",
            "id": "comment-15158017"
        },
        {
            "date": "2016-02-23T00:35:26+0000",
            "author": "Dennis Gove",
            "content": "New patch with slightly updated test. This now causes an exception due to an invalid url instead of a DNS failure. It exposes the same issue being fixed and the test shows that the patch does in fact resolve it. This patch is what was committed in 2c0a5e30364d83dc82383075a5f7c65200022494. ",
            "id": "comment-15158022"
        },
        {
            "date": "2016-02-23T07:30:38+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nwhy not make the setter of the zkAddress package private? Test is in same package, so it does not need to be fully public! ",
            "id": "comment-15158459"
        },
        {
            "date": "2016-02-23T07:37:20+0000",
            "author": "Uwe Schindler",
            "content": "In addition there is a bug in the test: It sets the \"correct\" server address in another thread but there is no synchronization. This may work many times but fails easily, especially on highly parallel CPU architectures! Making the zkServerAddress volatile would be a fix, but as its for testing only, it is not a good idea. ",
            "id": "comment-15158473"
        },
        {
            "date": "2016-02-23T08:01:44+0000",
            "author": "Uwe Schindler",
            "content": "Hi, I would go a completely other route to test this:\n\n\tmake the zkAddress final again. The change here will not work correctly in Multi-CPU environments. Also it is always a bad idea to \"suddenly\" change accessibility of fields\n\tinstead of trying to connect to a wronmg address, we should emulate what is really the issue: the same address does not resolve or work. The correct way to \"emulate\" this failure is to intercept the connection to zookeeper. All socket connections in Java are handled through a SocketFactory. During the test you can exchange the default SocketFactory by a custom one that throws IOException, if the connect address is the one in the test and delegate otherwise (to not break other stuff like HTTP connections,...). After a few seconds restore the original socket factory (and also in finally!!!). By this we emulate the real failure and we dont need to use \"bad\"/\"invalid\" adresses. You can also throw the real execption like java.net.UnknownHostException.\n\n\n\nBeware: This may not work, if Zookeeper caches the socketfactory internally, but that is unlikely. ",
            "id": "comment-15158506"
        },
        {
            "date": "2016-02-23T08:07:03+0000",
            "author": "Uwe Schindler",
            "content": "2nd: Do we really need to wait 5 !!! seconds in this test? This is horrible for people running the test! At least you should mark it with @Slow so it only runs nightly. ",
            "id": "comment-15158511"
        },
        {
            "date": "2016-02-23T08:15:44+0000",
            "author": "Uwe Schindler",
            "content": "Ah, the whole test is marked as slow. ",
            "id": "comment-15158520"
        },
        {
            "date": "2016-03-10T17:24:36+0000",
            "author": "Keith Laban",
            "content": "uploaded a new patch against master addressing Uwes concerns. I see that this was already merged in master, but that seems to be the only branch its currently on so hopefully its ok to put this out there.\n\nInstead of scheduling a thread to change the address I was able to mock the DefaultConnectionStrategy to throw an exception in the reconnect call the first time its called to verify that it is being retried. With this change I also changed the server address to be final again and removed the public setter method seeing how they were no longer needed\n\nNote: The new patch doesn't have the changes which introduced the retry logic in ConnectionManager since that part is already merged in on the master branch and branch_6x/branch_6_0. I can put in a separate patch containing both for backport to branch_5x if needed ",
            "id": "comment-15189585"
        },
        {
            "date": "2016-03-20T17:33:08+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e3b785a906d6f93e04f2cb45c436516158af0425 in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e3b785a ]\n\nSOLR-8599: Improved the tests for this issue to avoid changing a variable to non-final ",
            "id": "comment-15203380"
        },
        {
            "date": "2016-04-21T20:47:38+0000",
            "author": "Anshum Gupta",
            "content": "I see this in the CHANGE log for 6.0 but there's no Fix version. I guess this was just a mistake. Please correct me if I'm missing something here.\nI'm also back porting this for 5.5.1. ",
            "id": "comment-15252692"
        },
        {
            "date": "2016-04-21T21:00:50+0000",
            "author": "Keith Laban",
            "content": "Anshum Gupta There were two separate commits for this ticket, but they didn't all land on 6x or 6.0 but are both on master:\n\n\ncommit e3b785a906d6f93e04f2cb45c436516158af0425\nAuthor: Dennis Gove <dpgove@gmail.com>\nDate:   Sun Mar 20 11:13:56 2016 -0400\n\n    SOLR-8599: Improved the tests for this issue to avoid changing a variable to non-final\n\ncommit 2c0a5e30364d83dc82383075a5f7c65200022494\nAuthor: Dennis Gove <dpgove@gmail.com>\nDate:   Wed Feb 10 15:02:18 2016 -0500\n\n    SOLR-8599: After a failed connection during construction of SolrZkClient attempt to retry until a connection can be made\n\n\n\n\nhowever only the first commit found its way to 6x and 6.0 so please port that second commit and remember to port both for 5.5.1, thanks ",
            "id": "comment-15252720"
        },
        {
            "date": "2016-04-21T21:49:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d9875832f4798e5f732f4ae5627c7b306ccafa9c in lucene-solr's branch refs/heads/branch_5x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d987583 ]\n\nSOLR-8599: After a failed connection during construction of SolrZkClient attempt to retry until a connection can be made ",
            "id": "comment-15252814"
        },
        {
            "date": "2016-04-21T21:49:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 20e2caba9615e19f84fbcc59a950fb197385592e in lucene-solr's branch refs/heads/branch_5x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=20e2cab ]\n\nSOLR-8599: Improved the tests for this issue to avoid changing a variable to non-final ",
            "id": "comment-15252815"
        },
        {
            "date": "2016-04-21T22:13:11+0000",
            "author": "Anshum Gupta",
            "content": "Thanks Keith. We need to track these better \nI'll commit the other one to 6x too. I got both of them to 5x and I'm about to commit these to 5.5. ",
            "id": "comment-15252863"
        },
        {
            "date": "2016-04-21T22:14:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 853e1b99b10ccce4029fd77ba88df17dbc77ce3d in lucene-solr's branch refs/heads/branch_5_5 from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=853e1b9 ]\n\nSOLR-8599: After a failed connection during construction of SolrZkClient attempt to retry until a connection can be made ",
            "id": "comment-15252867"
        },
        {
            "date": "2016-04-21T22:14:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 983abb1ca14f7ee42678a03f9d754af8e05e8288 in lucene-solr's branch refs/heads/branch_5_5 from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=983abb1 ]\n\nSOLR-8599: Improved the tests for this issue to avoid changing a variable to non-final ",
            "id": "comment-15252868"
        },
        {
            "date": "2016-04-21T22:54:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 78176e23bcac5c6e4accd8989dc931ec6cedb188 in lucene-solr's branch refs/heads/branch_6x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=78176e2 ]\n\nSOLR-8599: Improved the tests for this issue to avoid changing a variable to non-final ",
            "id": "comment-15252953"
        },
        {
            "date": "2016-04-21T22:56:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8d24d72ab64d435a5e6bdca11b5e79c22f0057ef in lucene-solr's branch refs/heads/branch_6_0 from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8d24d72 ]\n\nSOLR-8599: Improved the tests for this issue to avoid changing a variable to non-final ",
            "id": "comment-15252955"
        },
        {
            "date": "2017-11-02T22:48:47+0000",
            "author": "Varun Thacker",
            "content": "Hi Dennis,\n\nIn ConnectionManager do we intend to wait for 1 or 5 seconds? Just wanted to clarify and maybe fix it in another Jira \n\n          log.info(\"Could not connect due to error, sleeping for 5s and trying agian\");\n          waitSleep(1000);\n\n ",
            "id": "comment-16236750"
        }
    ]
}