{
    "id": "LUCENE-390",
    "title": "Contribution: LuceneIndexAccessor",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "As per this post:\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-java-dev/200505.mbox/%3c200505182152.07489@danielnaber.de%3e\n\nI'm attaching the LuceneIndexAccessor source here. Copyright is now 2005 The\nApache Software Foundation.\n\nPlease note that it won't compile out of the box, but that should be fairly easy\nto fix using a CVS version of Lucene. Also it makes use of Log4J.\n\nI'm fine with moving the classes to any package you like.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--lucene-indexaccess-0.2.0.zip": "https://issues.apache.org/jira/secure/attachment/12312627/ASF.LICENSE.NOT.GRANTED--lucene-indexaccess-0.2.0.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-05-21T06:40:47+0000",
            "content": "Created an attachment (id=15098)\nLuceneIndexAccessor source ",
            "author": "Maik Schreiber",
            "id": "comment-12322396"
        },
        {
            "date": "2005-05-21T07:54:13+0000",
            "content": "Thanks. I think there's a bug in getWriter: it always creates the IndexWriter \nwith create=false. This way you cannot create a new index, and you also cannot \ntest the index accessor with a RAMDirectory (you'll get a NullPointerException \nsomewhere deep in Lucene). \n ",
            "author": "Daniel Naber",
            "id": "comment-12322397"
        },
        {
            "date": "2005-05-21T08:19:48+0000",
            "content": "Not really a bug. We didn't need something like that \"feature\" at the time. But\nI can't see why it should be impossible to test with a RAMDirectory:\n\npublic void testGetWriter() throws IOException {\n\tDirectory directory = new RAMDirectory();\n\tAnalyzer analyzer = new StandardAnalyzer();\n\n\t// create initial index\n\t{\n\t\tIndexWriter writer = new IndexWriter(directory, analyzer, true);\n\t\twriter.close();\n\t}\n\n\tIndexAccessProvider accessProvider = new IndexAccessProvider(directory, analyzer);\n\tLuceneIndexAccessor accessor = new LuceneIndexAccessor(accessProvider);\n\taccessor.open();\n\n\tIndexWriter writer = accessor.getWriter();\n\tassertNotNull(writer);\n\taccessor.release(writer);\n\n\taccessor.close();\n} ",
            "author": "Maik Schreiber",
            "id": "comment-12322398"
        },
        {
            "date": "2005-05-21T08:38:39+0000",
            "content": "This code leads to a NullPointerException for me: \n\n    Directory directory = new RAMDirectory();  \n    IIndexAccessProvider accessProvider = \n            new IndexAccessProvider(directory, new StandardAnalyzer()); \n    ILuceneIndexAccessor accessor = new LuceneIndexAccessor(accessProvider); \n    accessor.open(); \n    IndexWriter writer = accessor.getWriter(); \n\nAs the IndexAccessProvider takes a Directory users will expect that it works \nwith any kind of Directory... \n ",
            "author": "Daniel Naber",
            "id": "comment-12322399"
        },
        {
            "date": "2005-05-21T08:41:50+0000",
            "content": "Point taken, perhaps that should be documented somewhere. Actually it's just an\nimplementation of IIndexAccessProvider, so other implementations might do it\nquite differently (eg. not taking a Directory as constructor argument etc.) ",
            "author": "Maik Schreiber",
            "id": "comment-12322400"
        },
        {
            "date": "2005-05-21T08:43:01+0000",
            "content": "The thing is, we can't always initialize the Directory because it has to work\nfor existing Directories (and existing indices, for that matter), too. ",
            "author": "Maik Schreiber",
            "id": "comment-12322401"
        },
        {
            "date": "2005-05-22T03:26:19+0000",
            "content": "Another boolean parameter 'create' is probably needed.   \n\nOne more question: can calls to indexreader.delete() freely be mixed with   \nIndexWriter.add() using this class? When I tried that it seems my test program   \nwas stuck \u2013 so do I need to call accessor.release() when switching from \nreader to writer and vice versa? \n ",
            "author": "Daniel Naber",
            "id": "comment-12322402"
        },
        {
            "date": "2005-05-22T21:47:43+0000",
            "content": "Any thread can either concurrently get an IndexWriter or an IndexReader with\nwrite=true, not both at the same time. The component will block in the get()\nmethods when you try to do that. After all, that's the whole purpose of it  ",
            "author": "Maik Schreiber",
            "id": "comment-12322403"
        },
        {
            "date": "2005-05-22T21:52:16+0000",
            "content": "So having said that, the component's purpose can be summarized as enforcing the\nIndexReader/IndexWriter/Searcher/Directory usage matrix (you cannot delete while\nadding documents etc.) ",
            "author": "Maik Schreiber",
            "id": "comment-12322404"
        },
        {
            "date": "2006-07-09T21:44:09+0000",
            "content": "I'm not using IndexModifier, but doesn't IndexModifier provide the same functionality?\nIf so, should we resolve/close this issue? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12419911"
        },
        {
            "date": "2007-01-13T14:26:41+0000",
            "content": "I think that this provides more than IndexModifier does. For one it uses reference counting, (IndexModifier does not, correct?) which makes it easy to add Searcher warming. Second, it allows for more than just IndexWriter/IndexReader concurrency.\n\nThere does appear to be a problem with the MultiSearcher support. The only way I got it to work was to first get an IndexSearcher from each accessor and then provide those searchers to get the MultiSearcher. After releasing the MultiSearcher, it will correctly close the child IndexSearchers, but not release them in respect to reference counting. I got around this by keeping the IndexSearchers and the accessor they came from around in a hashmap and releasing them myself...this required returning a multisearcher from the accessor that had an overridden close method that does nothing (or else the IndexSearchers are closed twice). \n\nOther than that, this has been invaluable to me, and I don't believe IndexModifier could duplicate what I am using it for. I have created a full search server type app with this, similar to Solr (much less ambitious of course <g>). ",
            "author": "Mark Miller",
            "id": "comment-12464464"
        },
        {
            "date": "2008-01-16T22:32:49+0000",
            "content": "Is there any plan to incorporate this IndexAccessor package in Lucene 2.3? I see this library has been updated since last comments in this Jira,\n\n     http://www.gossamer-threads.com/lists/lucene/java-user/53117?search_string=LuceneIndexAccessor%20;#53251\n\n(the package last updated 09/2007: http://myhardshadow.com/indexaccessorapi/ )\n\nWe have a quite a similar requirement:\n\n1) We have two writer threads (they come at the same time every 5 minutes) and write to temporary index\n2) The two temporary indexes are then merged into a master index - using another IndexWriter\n3) Currently, we open searcher for every new search, but we want to be able to cache the searcher and get a new one only if there is a change in the indexes (like every 5 minutes).\n\nI think IndexAccessor is a good addition, unless there already exists something similar in Lucene package, which I'm not aware of. ",
            "author": "vivek",
            "id": "comment-12559694"
        }
    ]
}