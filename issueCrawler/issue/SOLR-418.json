{
    "id": "SOLR-418",
    "title": "Editorial Query Boosting Component",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "For a given query string, a human editor can say what documents should be important.  This is related to a lucene discussion:\nhttp://www.nabble.com/Forced-Top-Document-tf4682070.html#a13408965\n\nIdeally, the position could be determined explicitly by the editor - otherwise increasing the boost is probably sufficient.\n\nThis patch uses the Search Component framework to inject custom document boosting into the standard SearchHandler.",
    "attachments": {
        "SOLR-418-QueryBoosting.patch": "https://issues.apache.org/jira/secure/attachment/12370327/SOLR-418-QueryBoosting.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12545939",
            "date": "2007-11-27T17:45:38+0000",
            "content": "Here is a first draft that includes recent changes to SOLR-281.  This is incomplete and is posted to get early feedback and advice.\n\nThis component loads a file and builds a map of queries to special documents.  The format is:\n\n<boost>\n <query text=\"XXXX\">\n  <doc id=\"1\" priority=\"1\" />\n </query>\n <query text=\"YYYY\">\n  <doc id=\"1\" priority=\"1\" />\n  <doc id=\"2\" priority=\"3\" />\n </query>\n <query text=\"ZZZZ\">\n  <doc id=\"1\" priority=\"1\" />\n  <doc id=\"2\" priority=\"3\" />\n  <doc id=\"3\" priority=\"5\" />\n </query>\n</boost>\n\n\n\nfor the query \"YYYY\", document 1 should be in position 1, document 2 in position 3.\nI considered a .csv style format: \n id,priority,phrase\nor\n phrase,[id,priority]+\nbut I think the XML equivalent will be easier to edit/maintain.\n\nThe search handler is configured with:\n\n\n<searchComponent name=\"boost\" class=\"org.apache.solr.handler.component.QueryBoostingComponent\" >\n    <str name=\"analyzer\">string</str>\n    <str name=\"boosts\">boost.xml</str>\n  </searchComponent>\n \n  <requestHandler name=\"/boost\" class=\"solr.SearchHandler\">\n    <arr name=\"last-components\">\n      <str>boost</str>\n    </arr>\n  </requestHandler>\n\n\n\nThe <str name=\"analyzer\">string</str> bit chooses a fieldType (from schema.xml) and uses that to normalize input strings.  This lets us reuse existing lowercase/trim/pattern/etc filters.\n\nFor sorting, I think the best approach is to use a custom sort when sorting by score.  (This isn't implemented yet)\n\nCurrently for a matching query, this converts the query using:\n\n      // Build a query to match the forced documents:\n      // (id:1 id:2 id:3 id:4 id:5)^0\n      BooleanQuery boosted = new BooleanQuery( true );\n      for( Booster b : booster ) {\n        TermQuery tq = new TermQuery( new Term( idField, b.id ) );\n        boosted.add( tq, BooleanClause.Occur.SHOULD );\n      }\n      boosted.setBoost( 0 ); // don't affect the score\n      \n      // Change the query to insert forced documents\n      BooleanQuery newq = new BooleanQuery( true );\n      newq.add( query, BooleanClause.Occur.SHOULD );\n      newq.add( boosted, BooleanClause.Occur.SHOULD );\n      builder.setQuery( newq );\n\n\n\nFor debugging, check:\nhttp://localhost:8983/solr/boost?q=ZZZZ&debugQuery=true\n\nAny feedback would be great!\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12546787",
            "date": "2007-11-29T16:33:58+0000",
            "content": "Here is an updated patch that implements sorting.  Rather then try to mix boosted and normal results, this uses a custom sort to put the boosted results at the top.  The boost.xml format is now:\n\n\n <query text=\"ZZZZ\">\n  <doc id=\"1\" />\n  <doc id=\"2\" />\n  <doc id=\"3\" />\n </query>\n\n\n\nFor the query \"ZZZZ\" documents 1,2,3 will be the first docs returned followed by anything normally matching \"ZZZZ\"\n\nIf the query specifies a sort, it will be respected.  Only SCORE sorts are modified to boost \nthe configured documents. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12547633",
            "date": "2007-12-02T15:09:30+0000",
            "content": "It seems like even this last bit would be great to make configurable:\n\n\"If the query specifies a sort, it will be respected. Only SCORE sorts are modified to boost the configured documents.\"\n\nIn other words, make it possible to force docs in boost.xml to show up in appropriate positions regardless of the sort type.\n\nAlso, perhaps references to 'boost(s)' should now be renamed, so there is no confusion?  Isn't the \"industry standard\" for this type of stuff  \"one box\"? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12548049",
            "date": "2007-12-03T23:32:14+0000",
            "content": "I agree with changing the name from \"boosts\" to something else...  what is \"one box\"? (Google points me to their new search appliance \n\nre always putting the 'boosted' docs first...  I'm not against making this configurable, but is seems wrong.\n\nIf you want to force the sort to have the boosted docs first, isn't that:\n\n    <lst name=\"invariants\">\n      <str name=\"sort\">score desc</str>\n   </lst>\n\n\n\nIs there a real use case to have 'sort=date desc' put the boosted docs first? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12548054",
            "date": "2007-12-03T23:47:37+0000",
            "content": "It seems like the user should be in control of if these docs are added & sorted first, regardless of what the regular sort is. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12548065",
            "date": "2007-12-04T00:05:48+0000",
            "content": "I think this makes a lot of sense, though I wonder if it might make sense to uniquify queries based on more than the query string.  Certainly the results for a given query would depend greatly on the match-affecting parameters, f.i., fq= of dismax.  This seems part of the \"intrinsic query\" to me.  Sort does too, but I don't use it much so I'm not sure if my intuition is to be trusted there. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12548337",
            "date": "2007-12-04T18:32:36+0000",
            "content": "To be clear, this respects filter queries.  For:\nhttp://localhost:8983/solr/boost?q=ZZZZ&debugQuery=true&fq=id:2\nonly id:2 is returned even though 1&3 are boosted.\n\nI suppose we could do something to make the intrinsic query include other fields.  Perhaps\n\n\n<boost>\n <query>\n  <param name=\"q\">string</param>\n  <param name=\"fq\">another</param>\n </query>\n <docs>\n  <doc id=\"1\" />\n  <doc id=\"2\" />\n  <doc id=\"3\" />\n </docs>\n</boost>\n\n\nor \n\n<query params=\"q=string&fq=another\">          \n  <doc id=\"1\" />\n</query>                    \n\n\n\nbut I think this gets more complicated then necessary.  For the cases I can think of where you would want different docs boosted, you could just register a different handler with different boosted docs / invariants.  This kind of functionality only really makes sense with dismax style user queries rather then standard lucene query syntax.  That is \"dog\" rather then \"name:dog^3 content:dog^1\"\n\n\n\nre terminology.  Maybe using the word \"boost\" will get too confusing.  Perhaps \"elevate\", \"promote\", \"force top documents\"?  \n\nrather then the 'QueryBoostingComponent', this could be the DocumentElevationComponent\n\n\n<elevate>\n <query phrase=\"XXXX\">\n  <doc id=\"1\"/>\n </query>\n <query text=\"YYYY\">\n  <doc id=\"1\" />\n  <doc id=\"2\" />\n </query>\n</elevate>\n\n\n\nThe fastsearch glossary has a few terms that may be relevant?\n\nAbsolute boosting\n\nAbsolute boosting enables a document to be consistently displayed at a given position in the result set when a user searches with a specific query.  It also prevents individual documents from being displayed when a user searches with a specific query.\n\n\nUnder boosting, they have:\n\nBoosting may be applied in two ways:\n\n\tQuery independent (document boosting). This is used to boost high quality pages for all queries that match the document\n\tQuery dependant (query boosting). In this case specific documents may be boosted for given queries\n\n\n\nTheir \"Absolute boosting\" description makes me wonder if we should add a flag to \"burry\" or \"hide\" a document for a given query.  maybe:\n\n <doc id=\"2\" hide=\"true\"/>\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12548339",
            "date": "2007-12-04T18:33:36+0000",
            "content": "Is there a way to specify that the file is in the index directory (so it can be replicated out like the rest of the index?) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12548347",
            "date": "2007-12-04T18:49:53+0000",
            "content": "> \n> Is there a way to specify that the file is in the index directory (so it can be replicated out like the rest of the index?)\n> \n\nDo we do that anywhere else?  Is there / should there be a standard way to do this?  I remember you discussing this elsewhere, but I don't know where.  external value sources?\n\nIf you put config files in the index directory, how do you handle the empty new index case?  \n\nYou get a FileNotFoundException if you have\n /data/index/boosts.xml without an index in that directory "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12548505",
            "date": "2007-12-05T01:58:13+0000",
            "content": "> Is there a way to specify that the file is in the index directory (so it can be replicated \n> out like the rest of the index?)\n\nthat definitely seems like a separate issue that we should attempt to solve on the whole for all type of config files down the road ... it also assumes that this component will reread the file on every newSearcher (i haven't read the patch, but i'm assuming it doesn't) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12549332",
            "date": "2007-12-07T08:20:39+0000",
            "content": "updated to work with trunk.  added 'forceBoosting=\"true\" argument to force boosting regardless of the requested sort.\n\nUnless we figure out a way to do absolute positionaing, I think this component should be renamed 'DocumentElevationComponent' "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12549538",
            "date": "2007-12-07T20:00:09+0000",
            "content": "I would like to commit most of this patch under SOLR-281.  I will leave out the QueryBoostingComponent stuff and just commit the changes to the component framework that make it possible to configure. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12549677",
            "date": "2007-12-08T09:04:05+0000",
            "content": "Updated patch for trunk.  This also\n1. renames the component 'QueryElevationComponent' and uses the term 'elevate' rather then 'boost'\n\n2. Implements 'exclude' function\n\n\n <query text=\"ipod\">\n  <doc id=\"1\" />\n  <doc id=\"MA147LL/A\" exclude=\"true\" />\n </query>\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12553506",
            "date": "2007-12-19T21:39:31+0000",
            "content": "Here is an updated patch that allows you to put the configuration in the data directory and have it reload for each IndexReader.\n\nAssuming the component is initalized with:\n<str name=\"config-file\">elevate.xml</str>\n\nIf elevate.xml exists within the conf directory it will be loaded once at startup.  If it exists within the 'data' directory, it will be reloaded after <commit/>\n\nCheck http://wiki.apache.org/solr/QueryElevationComponent for tentative docs.\n\nThis also refactored the '''getLatestFile'' logic out of o.a.s.search.function.FileFloatSource and put it in a new class: o.a.s.util.VersionedFile "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12553526",
            "date": "2007-12-19T22:47:07+0000",
            "content": "Updated to accept a runtime query param \"enableElevation\" \u2013 this can disable elevation. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12554212",
            "date": "2007-12-24T02:44:13+0000",
            "content": "I'm interested in this feature and have few comments:\n\n1. I was bit confused \"analyzer\" in solrconfig.xml. I thought \"fieldType\" would be straightforward to me.\n2. Pardon me if I'm wrong, but does elevationCache need to be synchronized in getElevationMap() as it is called from prepare()? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12554640",
            "date": "2007-12-28T02:16:25+0000",
            "content": "Thanks Koji \u2013 here is an updated patch\n\n#1 - I change, \"analyzer\" to \"queryFieldType\" \u2013 this is the fieldType used to analyze the incoming query.\n\n#2 - I changed it to call synchronized( elevationCache ) when it checks a non-null entry.  It does not need to be synchronized with a null key because in this case, the cache is only built on startup.\n\nTo be safe, we could just use:\n\nfinal Map<IndexReader,Map<String, ElevationObj>> elevationCache = \n    Collections.synchronizedMap( new WeakHashMap<IndexReader, Map<String,ElevationObj>>() );\n\n\n\nbut I'm not sure which is better. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12560199",
            "date": "2008-01-18T02:22:57+0000",
            "content": "Looks good Ryan!\nI reviewed, and changed a few minor things (new patch attached)\n\n\tfixed a concurrency bug (access of map outside of sync can lead to concurrent modification exception or other errors, even if that key/value pair will never change)\n\tchanged the example example.xml a little, and switched the /elevate handler to load lazily\n\tupdated code/configs to reflect SearchHandler move\n\tfixed (pre-existing) bugs in code moved to VersionedFile (multiple opens of same file)\n\tdropped the seemingly  unrelated changes in SolrServlet (part of another patch?)\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12560228",
            "date": "2008-01-18T05:35:46+0000",
            "content": "Thanks for looking at this - and fixing it up\n\ndropped the seemingly unrelated changes in SolrServlet (part of another patch?)\n\nnot sure how that got in there.... it was part of an issue I had with resin loading servlets before filters and SOLR-350 initialization. "
        }
    ]
}