{
    "id": "SOLR-1878",
    "title": "RelaxQueryComponent - A new SearchComponent that relaxes the main query in a semiautomatic way",
    "details": {
        "affect_versions": "1.4",
        "status": "Reopened",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I have the following use case:\n\nImagine that you visit a web page for searching an apartment for rent. You choose parameters, usually mark check boxes and this makes AND queries:\n\n\nrent:[* TO 1500] AND bedroom:[2 TO *] AND floor:[100 TO *]\n\n\n\nIf the conditions are too tight, Solr may return few or zero leasehold properties. Because the things is not good for the site visitors and also owners, the owner may want to recommend the visitors to relax the conditions something like:\n\n\nrent:[* TO 1700] AND bedroom:[2 TO *] AND floor:[100 TO *]\n\n\n\nor:\n\n\nrent:[* TO 1500] AND bedroom:[2 TO *] AND floor:[90 TO *]\n\n\n\nAnd if the relaxed query get more numFound than original, the web page can provide a link with a comment \"if you can pay additional $100, ${numFound} properties will be found!\".\n\nToday, I need to implement Solr client for this scenario, but this way makes two round trips for showing one page and consistency problem (and laborious of course!).\n\nI'm thinking a new SearchComponent that can be used with QueryComponent. It does search when numFound of the main query is less than a threshold. Clients can specify via request parameters how the query can be relaxed.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-12855827",
            "date": "2010-04-12T03:42:34+0000",
            "content": "I've implemented what I call my \"FallbackRequestHandler\" which tries a series of requests until results are found.  The differentiating factor is the query parser used for which I made several, all extending dismax but modifies the query to be a starts-with style (last word gets an asterisk appended) or if a single word then a fuzzy search is performed.  I'm not sure how a search component could do the fallback but I see how a request handler could (since that's what I did). "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12856289",
            "date": "2010-04-13T03:58:05+0000",
            "content": "It would be great to program the fallback strategies in Javascript. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12856415",
            "date": "2010-04-13T12:56:37+0000",
            "content": "Why would the need to be Javascript?  You could just have q= for the main param and then q_1, q_2, etc. or some variation on that.\n\nAt any rate, I think this is a great idea.  It likely could just be part of the current QueryComponent, so maybe no new component is needed at all. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13036790",
            "date": "2011-05-20T11:56:05+0000",
            "content": "Today I met a consultant and he told me the interesting idea about executing the relax query. His idea is quite simple, using \n{!tag}\n and \n{!ex}\n. For example:\n\n\nq=*:*\n&fq={!tag=re}rent:[* TO 1500]     # condition set by user\n&fq={!tag=fl}floor:[100 TO *]     # condition set by user\n&facet.query={!ex=re}rent:[* TO 1700]   # expanded condition\n&facet.query={!ex=re}rent:[* TO 2000]   # expanded condition\n&facet.query={!ex=fl}floor:[90 TO *]    # expanded condition\n&facet.query={!ex=fl}floor:[80 TO *]    # expanded condition\n\n\n\nClient should set the expanded (relaxed) condition. Client should also see the response and decide whether display the relaxed facet count or not.\n\nIn the original description of this issue, I'd say semiautomatic, but no automatic here. But I like it because of no need additional implementation. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13036835",
            "date": "2011-05-20T13:50:44+0000",
            "content": "Cool tip Koji! I'll have to remember that. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835736",
            "date": "2013-11-30T13:29:02+0000",
            "content": "2013 Old JIRA cleanup "
        }
    ]
}