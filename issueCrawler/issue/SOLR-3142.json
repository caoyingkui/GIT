{
    "id": "SOLR-3142",
    "title": "remove O(n^2) slow slow indexing defaults in DataImportHandler",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "By default, dataimporthandler optimizes the entire index when it commits.\n\nThis is bad for performance, because it means by default its doing a very\nheavy index-wide operation even for an incremental update... essentially \nO(n^2) indexing.\n\nAll that is needed is to set optimize=false by default. If someone wants\nto optimize, they can either set optimize=true or explicitly optimize themselves.",
    "attachments": {
        "SOLR-3142.patch": "https://issues.apache.org/jira/secure/attachment/12515173/SOLR-3142.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13211373",
            "date": "2012-02-19T14:50:44+0000",
            "content": "+1\n\nMight even make sense for it to be a \"soft\" commit. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211377",
            "date": "2012-02-19T15:01:38+0000",
            "content": "patch for the optimize.\n\nI agree about the soft commit, if not even the default it should at least be allowable/configurable... but I just didn't implement this in the patch.\n\nIn general whatever options are available for commit should be consistent with what DIH allows, maybe we should open a separate issue to ensure this is the case. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211380",
            "date": "2012-02-19T15:06:34+0000",
            "content": "+1, are there any config files/parsing to edit? I somwhere have in my mind, that in DIH config there are also settings regading optimize? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211382",
            "date": "2012-02-19T15:09:44+0000",
            "content": "I think it might be possible to configure this via files (versus the actual command), but i \nsearched for 'optimize' in the example-dih and found nothing  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211494",
            "date": "2012-02-19T19:24:30+0000",
            "content": "Unless there are objections I'd like to commit this to \nmake some progress. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13212752",
            "date": "2012-02-21T17:28:37+0000",
            "content": "FWIW: I'm pretty sure the original assumption here was that in the (relatively common) usecase of doing a full-import rebuild on a regular basis (ie: nightly) that it can be handy to have it auto-optimize when you are done.   I think the real problem is that that assumption was never challeneged regarding things like delta import.\n\nso an argument could be made the the default should still be to optimze=true on full-import, and optimize=false on delta import ... but i'm not going to make that argument, i think this it's silly to assume true in either case.  (particularly since a parameterized full import might actually be a rapidly repeating incremental) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13212759",
            "date": "2012-02-21T17:34:34+0000",
            "content": "\n(ie: nightly) that it can be handy to have it auto-optimize when you are done.\n\nYou can still do this, by specifying 'optimize=true' to your full-import.\nIts just no longer the default. So we haven't taken away any capabilities here. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13212760",
            "date": "2012-02-21T17:38:06+0000",
            "content": "any optimizing after a full import over a non-empty index is no longer really needed in Lucene (even if you do a IndexWriter.deleteAll() before as the fullimport does). Once IndexWriter merges (or on close or commit) and detects a segment only contains of deleted documents it will drop it. This was indeed not true in the past, but since Lucene 3.1 or like that it is. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13212761",
            "date": "2012-02-21T17:38:32+0000",
            "content": "agreed, was just noting why i think the original default was true.. "
        }
    ]
}