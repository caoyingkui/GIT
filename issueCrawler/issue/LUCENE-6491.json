{
    "id": "LUCENE-6491",
    "title": "Failure in TestTermRangeQuery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "ant test  -Dtestcase=TestTermRangeQuery -Dtests.method=testAutoPrefixTermsKickIn -Dtests.seed=1970E47D58D0CF50 -Dtests.locale=uk -Dtests.timezone=Canada/Newfoundland -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\nReproduces for me",
    "attachments": {
        "LUCENE-6491.patch": "https://issues.apache.org/jira/secure/attachment/12734269/LUCENE-6491.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14552072",
            "author": "Alan Woodward",
            "date": "2015-05-20T09:44:06+0000",
            "content": "\n[10:37:03.803] FAILURE 2.19s J0 | TestTermRangeQuery.testAutoPrefixTermsKickIn <<<\n   > Throwable #1: java.lang.AssertionError: expected:<1> but was:<121>\n   > \tat __randomizedtesting.SeedInfo.seed([1970E47D58D0CF50:3D6443D83137B394]:0)\n   > \tat org.junit.Assert.fail(Assert.java:93)\n   > \tat org.junit.Assert.failNotEquals(Assert.java:647)\n   > \tat org.junit.Assert.assertEquals(Assert.java:128)\n   > \tat org.junit.Assert.assertEquals(Assert.java:472)\n   > \tat org.junit.Assert.assertEquals(Assert.java:456)\n   > \tat org.apache.lucene.search.TestTermRangeQuery.testAutoPrefixTermsKickIn(TestTermRangeQuery.java:495)\n   > \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   > \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   > \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   > \tat java.lang.reflect.Method.invoke(Method.java:483)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1627)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:836)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:872)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:886)\n   > \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n   > \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   > \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n   > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n   > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n   > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:798)\n   > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:458)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:845)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:747)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:781)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:792)\n   > \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   > \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n   > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   > \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n   > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n   > \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n   > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n   > \tat java.lang.Thread.run(Thread.java:745)\n  2> NOTE: test params are: codec=Lucene50, sim=RandomSimilarityProvider(queryNorm=false,coord=yes): {content=DFR I(ne)2}, locale=uk, timezone=Canada/Newfoundland\n  2> NOTE: Mac OS X 10.7.5 x86_64/Oracle Corporation 1.8.0_25 (64-bit)/cpus=8,threads=1,free=96435912,total=358088704\n  2> NOTE: All tests run in this JVM: [TestAddIndexes, TestShardSearching, TestElevationComparator, TestBlockPostingsFormat3, TestIntsRef, Test2BPostings, TestLockFactory, TestToken, TestAutomatonQuery, TestIndexWriterMergePolicy, TestTermRangeQuery]\n\n "
        },
        {
            "id": "comment-14552080",
            "author": "Michael McCandless",
            "date": "2015-05-20T09:53:48+0000",
            "content": "Thanks Alan Woodward, I'll dig ... "
        },
        {
            "id": "comment-14552466",
            "author": "Adrien Grand",
            "date": "2015-05-20T15:17:53+0000",
            "content": "This is due to a bad interaction between auto-prefixes and query caching. This test generates term queries which, depending on whether the term is an actual term or as a prefix term, do not match the same documents. Yet they share the same cache entries. "
        },
        {
            "id": "comment-14553301",
            "author": "Adrien Grand",
            "date": "2015-05-20T23:10:35+0000",
            "content": "Here is a patch that tries to avoid this issue for now:\n\n\tTermQuery refuses fake terms\n\tboolean rewrites fail if they encounter fake terms\n\tconstant-score rewrite does not rewrite to a boolean query per segment if any of the terms is a fake term\n\tmoves auto-prefix tests for range and prefix queries to lucene/codecs\n\n\n\nWhile testing this, I found a bug in BlockTermState which had isRealTerm initially set to false so you could end up with real terms having a term state with isRealTerm=false.\n\nIn the longer term we need to find a way for fake terms to not compare equal to real terms... "
        },
        {
            "id": "comment-14553906",
            "author": "Michael McCandless",
            "date": "2015-05-21T08:52:11+0000",
            "content": "+1, thanks Adrien Grand. "
        },
        {
            "id": "comment-14554203",
            "author": "ASF subversion and git services",
            "date": "2015-05-21T12:30:05+0000",
            "content": "Commit 1680856 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1680856 ]\n\nLUCENE-6491: Forbid term queries on fake terms for now. "
        },
        {
            "id": "comment-14554246",
            "author": "ASF subversion and git services",
            "date": "2015-05-21T13:06:56+0000",
            "content": "Commit 1680864 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680864 ]\n\nLUCENE-6491: Forbid term queries on fake terms for now. "
        },
        {
            "id": "comment-14554249",
            "author": "Adrien Grand",
            "date": "2015-05-21T13:08:36+0000",
            "content": "Thanks Mike for the review! "
        },
        {
            "id": "comment-14586847",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:43:23+0000",
            "content": "Bulk close for 5.2.0. "
        }
    ]
}