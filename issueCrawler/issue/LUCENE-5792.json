{
    "id": "LUCENE-5792",
    "title": "Improve our packed *AppendingLongBuffer",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "Since these classes are writeteable, they need a buffer in order to stage pending changes for efficiency reasons. The issue is that at read-time, the code then needs, for every call to get to check whether the requested value is in the buffer of pending values or has been packed into main storage, which is inefficient.\n\nI would like to fix these APIs to separate the writer from the reader, the latter being immutable.",
    "attachments": {
        "LUCENE-5792.patch": "https://issues.apache.org/jira/secure/attachment/12653133/LUCENE-5792.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14047553",
            "author": "Adrien Grand",
            "content": "Here is a patch:\n\n\tThe former Appending(Delta)PackedLongBuffer and MonotonicAppendingLongBuffer are now exposed under a single API, see PackedLongValues in the patch\n\twrites are down through a Builder class that doesn't support reads, you need to call build() first\n\treads don't have a branch to decide on whether to read in the buffer of pending changes anymore\n\tremoved the bulk read API that wasn't used anywhere\n\tthe ramBytesUsed method has been optimized to just return a private member (there used to be a TODO to improve it since this method is called per-doc-per-norms/dv-field at indexing time), which is updated upon resize of the builder\n\n ",
            "date": "2014-06-30T11:04:09+0000"
        },
        {
            "id": "comment-14047781",
            "author": "Adrien Grand",
            "content": "Updated patch that fixes a bug in case no bit per value is required (test included). The previous patch allocated at least one bit per value in all cases. ",
            "date": "2014-06-30T15:54:48+0000"
        },
        {
            "id": "comment-14047975",
            "author": "Robert Muir",
            "content": "Overall looks great. I like the API change as well. From my benchmarking, OrdinalMap is a little faster and uses a little bit less RAM.\n\nHowever, I think in XXXDocValuesWriter we should build() these things only once in flush() rather than have each iterator call build() ? Lots of codecs process the stream more than once. ",
            "date": "2014-06-30T18:54:05+0000"
        },
        {
            "id": "comment-14048603",
            "author": "Adrien Grand",
            "content": "Good point, here is an updated patch. ",
            "date": "2014-07-01T07:46:33+0000"
        },
        {
            "id": "comment-14048711",
            "author": "Robert Muir",
            "content": "Thanks Adrien!\n\n+1 to commit.\n\nMaybe when committing, you can see if those same iterators can now be static? I'm not sure they refer to anything in the parent class anymore. ",
            "date": "2014-07-01T09:53:09+0000"
        },
        {
            "id": "comment-14048931",
            "author": "ASF subversion and git services",
            "content": "Commit 1607103 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1607103 ]\n\nLUCENE-5792: Simplified *AppendingBuffer APIs. ",
            "date": "2014-07-01T14:55:47+0000"
        },
        {
            "id": "comment-14048934",
            "author": "ASF subversion and git services",
            "content": "Commit 1607105 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1607105 ]\n\nLUCENE-5792: Simplified *AppendingBuffer APIs. ",
            "date": "2014-07-01T14:59:53+0000"
        }
    ]
}