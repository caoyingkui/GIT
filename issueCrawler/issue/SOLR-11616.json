{
    "id": "SOLR-11616",
    "title": "Backup failing on a constantly changing index with NoSuchFileException",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "As reported by several users on SOLR-9120 , Solr backups fail with NoSuchFileException on a constantly changing index. \n\nUsers linked SOLR-9120 to the root cause as the stack trace is the same , but the fix proposed there won't fix backups to stop failing.\n\nWe need to implement a similar fix in SnapShooter#createSnapshot to fix the problem",
    "attachments": {
        "solr-6.3.log": "https://issues.apache.org/jira/secure/attachment/12896526/solr-6.3.log",
        "SOLR-11616.patch": "https://issues.apache.org/jira/secure/attachment/12896473/SOLR-11616.patch",
        "solr-7.1.log": "https://issues.apache.org/jira/secure/attachment/12896531/solr-7.1.log"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-07T18:32:30+0000",
            "content": "Completely untested patch copying the solution that was used in SOLR-9120 . \n\nI will test it out later in the week but wanted to put the fix out there  ",
            "author": "Varun Thacker",
            "id": "comment-16242588"
        },
        {
            "date": "2017-11-07T21:57:36+0000",
            "content": "1) Repeating here some key comments i just made in SOLR-9120 since there are very relevant...\n\n\nAnd FWIW: The more i read up on all of these issues: No one has ever actually posted any explicit logs, or steps to reproduce, of any failures with backup (or ReplicationHandler) to this (SOLR-9120) issue (or for that matter: to SOLR-8587, or to SOLR-8793, OR to SOLR-11616) ... AFAICT there is only anecdotal information claiming that these exceptions (logged by LukeRequestHandler) are also a \"similar problem\" to doing backups/replication.\n\nIf anyone has can provide Actual logs from an error occuring during backup/replication \u2013 along with configs / steps to reproduce: SOLR-11616 is the place to post them.\n\nAFAIK there is NO code in LukeRequestHandler that is used by any backup/replication based code \u2013 it is purely for status purposes.\n\n2) specifically in regards to the current SOLR-11616.patch ...\n\nCompletely untested patch copying the solution that was used in SOLR-9120\n\nTo be very clear: there is no indication/evidence that this is a \"solution\" to anything \u2013 the patch that this \"copies\" from very much does not address the fundmental source of the NoSuchFileExceptions in SOLR-9120\n\n3) Before we go considering changes to which IndexCommit point the backup code looks at, it would be nice to have:\n\n\n\tsome actual logs w/stack traces showing an actual problem\n\tsome details of how to reproduce (even if vague or not 100% reproducible) the problem that manifested those logs/exceptions\n\tan explanation \u2013 in words \u2013 as to why folks feel like changing the source of the IndexCommit used by SnapShooter is \"more correct\" then the current code\n\t\n\t\tideally i'd love to see a formal proof (w/junit test) that proves the patch is \"correct\" but i'll settle for an explanation of a feeling\n\t\n\t\n\n ",
            "author": "Hoss Man",
            "id": "comment-16242983"
        },
        {
            "date": "2017-11-07T22:55:33+0000",
            "content": "I was able to reproduce it very easily on Solr 6.3\n\nJust kept continuous index running with commits and open searchers and then ran the backup command. \n\nResponse from the API call\n\n\n<response>\n<lst name=\"responseHeader\">\n<int name=\"status\">500</int>\n<int name=\"QTime\">636</int>\n</lst>\n<lst name=\"failure\">\n<str name=\"172.16.0.83:8983_solr\">org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException:Error from server at http://172.16.0.83:8983/solr: Failed to backup core=gettingstarted_shard1_replica1 because java.nio.file.NoSuchFileException: /Users/varunthacker/Downloads/search-downloads/solr-6.3.0/example/cloud/node1/solr/gettingstarted_shard1_replica1/data/index/segments_32</str>\n</lst>\n<str name=\"Operation backup caused exception:\">org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not backup all replicas</str>\n<lst name=\"exception\">\n<str name=\"msg\">Could not backup all replicas</str>\n<int name=\"rspCode\">500</int>\n</lst>\n<lst name=\"error\">\n<lst name=\"metadata\">\n<str name=\"error-class\">org.apache.solr.common.SolrException</str>\n<str name=\"root-error-class\">org.apache.solr.common.SolrException</str>\n</lst>\n<str name=\"msg\">Could not backup all replicas</str>\n<str name=\"trace\">org.apache.solr.common.SolrException: Could not backup all replicas\tat org.apache.solr.handler.admin.CollectionsHandler.handleResponse(CollectionsHandler.java:287)\tat org.apache.solr.handler.admin.CollectionsHandler.handleRequestBody(CollectionsHandler.java:218)\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:153)\tat org.apache.solr.servlet.HttpSolrCall.handleAdminRequest(HttpSolrCall.java:660)\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:441)\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:303)\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:254)\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\tat org.eclipse.jetty.server.Server.handle(Server.java:518)\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)\tat java.lang.Thread.run(Thread.java:745)</str>\n<int name=\"code\">500</int>\n</lst>\n</response>\n\n\n\n\n\nI wasn't able to reproduce this on Solr 7.1 . As soon as I issue a backup command I see updates come to a grinding halt i.e the backup took 2 minutes and i only saw 4 update requests come in . Before the after the backup docs were being added every 200 milliseconds. So something was blocking updates during the backup command and hence the call succeeded? Very strange . I'll dig into this more ",
            "author": "Varun Thacker",
            "id": "comment-16243062"
        },
        {
            "date": "2017-11-07T23:06:15+0000",
            "content": "Before the after the backup docs were being added every 200 milliseconds. So something was blocking updates during the backup command and hence the call succeeded? Very strange . I'll dig into this more\n\nThat's not true. I think the log file might have rotated or something. I do see updates coming in.\n\nBut I've been able to successfully backup in Solr 7.1 several times but with Solr 6.3 it failed on my first attempt ",
            "author": "Varun Thacker",
            "id": "comment-16243069"
        },
        {
            "date": "2017-11-07T23:17:06+0000",
            "content": "Okay I kept trying and after a few attempts in reproduced on Solr 7.1 as well . I played around with the soft commit time and reduced it to 100ms and then ran into the error\n\n\n{\nresponseHeader: {\nstatus: 500,\nQTime: 23019\n},\nfailure: {\n172.16.0.83:8983_solr: \"org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException:Error from server at http://172.16.0.83:8983/solr: Failed to backup core=gettingstarted_shard2_replica_n6 because java.nio.file.NoSuchFileException: /Users/varunthacker/solr-7.1.0/example/cloud/node1/solr/gettingstarted_shard2_replica_n6/data/index/_i9_Lucene50_0.tip\"\n},\nOperation backup caused exception:: \"org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not backup all replicas\",\nexception: {\nmsg: \"Could not backup all replicas\",\nrspCode: 500\n},\nerror: {\nmetadata: [\n\"error-class\",\n\"org.apache.solr.common.SolrException\",\n\"root-error-class\",\n\"org.apache.solr.common.SolrException\"\n],\nmsg: \"Could not backup all replicas\",\ntrace: \"org.apache.solr.common.SolrException: Could not backup all replicas at org.apache.solr.handler.admin.CollectionsHandler.handleResponse(CollectionsHandler.java:306) at org.apache.solr.handler.admin.CollectionsHandler.invokeAction(CollectionsHandler.java:243) at org.apache.solr.handler.admin.CollectionsHandler.handleRequestBody(CollectionsHandler.java:221) at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:177) at org.apache.solr.servlet.HttpSolrCall.handleAdmin(HttpSolrCall.java:745) at org.apache.solr.servlet.HttpSolrCall.handleAdminRequest(HttpSolrCall.java:726) at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:507) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:382) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:326) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1751) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.server.Server.handle(Server.java:534) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.base/java.lang.Thread.run(Thread.java:844) \",\ncode: 500\n}\n}\n\n ",
            "author": "Varun Thacker",
            "id": "comment-16243078"
        },
        {
            "date": "2017-11-07T23:19:28+0000",
            "content": "Looking at the logs although you see NoSuchFileException it has nothing to do with SOLR-9120 . The snapshot code needs to reserve the commit point on which it's copying files over  ",
            "author": "Varun Thacker",
            "id": "comment-16243079"
        },
        {
            "date": "2017-11-08T15:30:02+0000",
            "content": "Another issue - Not sure if you want to track it separately but the `async` call will report the backup process to be `completed` but I think it should be in `failed` state.\n\nIf `completed` in `async` mode refers to the task being complete (either failed or success does not matter) then we should have a way to find out about the status of the task (either completed successfully or completed but failed) with different status or a different lookup.  ",
            "author": "ilamgumaran karunanithi",
            "id": "comment-16244152"
        },
        {
            "date": "2017-11-11T20:17:39+0000",
            "content": "Patch with a test case which will fail all the time if we don't fold the SnapShooter changes.\n\nFor the test I am invoking the backup-core directly . It makes the BACKUPCORE API available to standalone solr users. SolrCloud users could always access it .\n\nI think it's not a big deal. It's a much cleaner API and we maybe this pushes us to implement SOLR-9239 sooner ",
            "author": "Varun Thacker",
            "id": "comment-16248645"
        },
        {
            "date": "2017-12-02T03:39:26+0000",
            "content": "Commit 864ce90d2cd9bfae66506f38823278738afe6c4a in lucene-solr's branch refs/heads/master from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=864ce90 ]\n\nSOLR-11616: Snapshot the segments more robustly such that segments created during a backup does does not fail the\noperation ",
            "author": "ASF subversion and git services",
            "id": "comment-16275394"
        },
        {
            "date": "2017-12-02T03:41:05+0000",
            "content": "Commit 62b35006780009758376d9e22b2c1a08e25b83a6 in lucene-solr's branch refs/heads/branch_7x from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=62b3500 ]\n\nSOLR-11616: Snapshot the segments more robustly such that segments created during a backup does does not fail the operation\n\n(cherry picked from commit 864ce90) ",
            "author": "ASF subversion and git services",
            "id": "comment-16275395"
        },
        {
            "date": "2018-05-16T16:52:26+0000",
            "content": "Looking at the code for SnapShooter.getIndexCommit, I see we are getting the refcounted searcher but forgetting to decref it. \u00a0This looks like a bug and if it isn't then definitely deserves a comment:\n\nhttps://github.com/apache/lucene-solr/blob/864ce90d2cd9bfae66506f38823278738afe6c4a/solr/core/src/java/org/apache/solr/handler/SnapShooter.java#L173\n\nAs an aside, this incref, decref business is error-prone. \u00a0I propose the following new method on SolrCore:\n\n  /**\n   * Executes the lambda with the {@link SolrIndexSearcher}.  This is more convenient than using\n   * {@link #getSearcher()} since there is no ref-counting business to worry about.\n   * Example:\n   * <pre class=\"prettyprint\">\n   *   IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n   * </pre>\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <R> R withSearcher(Function<SolrIndexSearcher,R> lambda) {\n    final RefCounted<SolrIndexSearcher> refCounted = getSearcher();\n    try {\n      return lambda.apply(refCounted.get());\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n\n\u00a0 ",
            "author": "David Smiley",
            "id": "comment-16477719"
        },
        {
            "date": "2018-05-22T19:09:32+0000",
            "content": "+1\u00a0 . Curious how you ran into this?\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16484430"
        },
        {
            "date": "2018-05-22T19:48:31+0000",
            "content": "I simply found by code inspection/reviewing all callers of getSearcher.  See SOLR-12374.  We can continue this discussion there. ",
            "author": "David Smiley",
            "id": "comment-16484468"
        },
        {
            "date": "2018-06-25T15:39:49+0000",
            "content": "Hello,\u00a0Varun Thacker, can\u00a0SOLR-11616 cause \"incomplete\" backups as well?\u00a0 ",
            "author": "Mikhail Khludnev",
            "id": "comment-16522445"
        },
        {
            "date": "2018-06-25T15:44:04+0000",
            "content": "Hi Mikhail,\n\nI don't believe so. This would lead to a leaking SolrIndexSearcher under a condition which I am not sure when can it happen. ",
            "author": "Varun Thacker",
            "id": "comment-16522450"
        }
    ]
}