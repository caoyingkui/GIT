{
    "id": "LUCENE-5314",
    "title": "Decide on whether the central class of the sorting API should be a sorter or a comparator",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Robert made a good point on LUCENE-5312 that the API currently feels half baked since it exposes Sorter as a central point of the API while all the useful impls are based on a comparator.\n\nInitially, I wanted a Sorter to be the central class because it would allow to compute a DocMap eg. to revert the order of the documents in the index without having to actually sort the documents. If you look at Sorter.REVERSE_DOCS, it returns the DocMap that reverts index order in constant time.\n\nHowever, this Sorter-based API doesn't allow for composability although a comparator-based API could. For example, we would like to be able to compose a sorter for block joins based on a sorter for parents and another for children.\n\nSo maybe the use-cases that are not based on an actual sort are not really important and we could enforce sorting so that sorters could be composable?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-03-10T08:14:09+0000",
            "content": "Superseded by LUCENE-5493. ",
            "author": "Adrien Grand",
            "id": "comment-13925541"
        }
    ]
}