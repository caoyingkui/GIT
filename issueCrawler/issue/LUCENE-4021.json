{
    "id": "LUCENE-4021",
    "title": "Locale representations don't round trip from toString->new Locale.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "The script and extensions are not currently parsed. Seems like they were added in 1.7 only too so it'll probably require Java-version-specific workarounds. \n\n\n  public void testLocaleRoundTrip() {\n    for (Locale locale : Locale.getAvailableLocales()) {\n      String s = locale.toString();\n      try {\n        Locale back = LuceneTestCase.localeForName(s);\n        assertEquals(locale, back);\n      } catch (Exception e) {\n        System.err.println(\"Failed roundtrip: \" + s + \" (\" + e.toString() + \")\");\n      } catch (AssertionError e) {\n        System.err.println(\"Not equals: \" + s + \" (\" + e.toString() + \")\");\n      }\n    }\n  }\n\n\n\nExample locales that don't pass.\n\nth_TH_TH_#u-nu-thai\nja_JP_JP_#u-ca-japanese\n\n\n\nInterestingly, some that do pass the reverse trip are not .equal to their originals:\n\nNot equals: sr_ME_#Latn (java.lang.AssertionError: expected: java.util.Locale<sr_ME_#Latn> but was: java.util.Locale<sr_ME_#Latn>)\nNot equals: sr_BA_#Latn (java.lang.AssertionError: expected: java.util.Locale<sr_BA_#Latn> but was: java.util.Locale<sr_BA_#Latn>)\nNot equals: sr__#Latn (java.lang.AssertionError: expected: java.util.Locale<sr__#Latn> but was: java.util.Locale<sr__#Latn>)\nNot equals: sr_RS_#Latn (java.lang.AssertionError: expected: java.util.Locale<sr_RS_#Latn> but was: java.util.Locale<sr_RS_#Latn>)",
    "attachments": {
        "LUCENE-4021.patch": "https://issues.apache.org/jira/secure/attachment/12524369/LUCENE-4021.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-25T22:00:52+0000",
            "content": "yeah we have to fix that Locale code i added.\n\nThe general problem is that java7 locales really shouldnt be parsed this way (imo) but\nwith forLanguageTag.\n\nAny way i can guarantee you this is gonna be messy even if you know what you are doing\n(e.g. http://bugs.icu-project.org/trac/ticket/8734).\n\nAnd reproducibility between java6 and 7 is just out of the question. ",
            "author": "Robert Muir",
            "id": "comment-13262175"
        },
        {
            "date": "2012-04-25T22:18:52+0000",
            "content": "I'm just pointing out the fact, I don't plan to fix it. I realize it's going to be messy (there is not even a way to create a locale with script with regular constructors and Locale.Builder is only 1.7+). I'm not going to touch it. ",
            "author": "Dawid Weiss",
            "id": "comment-13262194"
        },
        {
            "date": "2012-04-25T22:20:44+0000",
            "content": "Heavy reflection only  ",
            "author": "Uwe Schindler",
            "id": "comment-13262197"
        },
        {
            "date": "2012-04-25T22:25:47+0000",
            "content": "Heavy reflection or test ivy dependency on beanshell or some other simple scripting language... then you'd just write different snippets of code for different JVMs and execute them as scripts. This is a heavy beast for this but... ",
            "author": "Dawid Weiss",
            "id": "comment-13262201"
        },
        {
            "date": "2012-04-25T23:27:29+0000",
            "content": "Here's the patch: now they round-trip.\nProblem 1 was our switch statement on the number of elements:\n\n\"For compatibility reasons, two non-conforming locales are treated as special cases. These are ja_JP_JP and th_TH_TH. These are ill-formed in BCP 47 since the variants are too short. To ease migration to BCP 47, these are treated specially during construction. These two cases (and only these) cause a constructor to generate an extension, all other values behave exactly as they did prior to Java 7.\n\nJava has used ja_JP_JP to represent Japanese as used in Japan together with the Japanese Imperial calendar. This is now representable using a Unicode locale extension, by specifying the Unicode locale key ca (for \"calendar\") and type japanese. When the Locale constructor is called with the arguments \"ja\", \"JP\", \"JP\", the extension \"u-ca-japanese\" is automatically added.\n\nJava has used th_TH_TH to represent Thai as used in Thailand together with Thai digits. This is also now representable using a Unicode locale extension, by specifying the Unicode locale key nu (for \"number\") and value thai. When the Locale constructor is called with the arguments \"th\", \"TH\", \"TH\", the extension \"u-nu-thai\" is automatically added.\"\n\nhttp://docs.oracle.com/javase/7/docs/api/java/util/Locale.html\n\nProblem 2 was the assertEquals, I think like TimeZone we cannot guarantee this. So simply change the test to use toString(), which is well-defined too: http://docs.oracle.com/javase/7/docs/api/java/util/Locale.html#toString%28%29 ",
            "author": "Robert Muir",
            "id": "comment-13262237"
        },
        {
            "date": "2012-04-26T08:30:10+0000",
            "content": "Thanks Robert. Funny, I looked at that Javadoc but somehow skipped that special cases paragraph! ",
            "author": "Dawid Weiss",
            "id": "comment-13262464"
        }
    ]
}