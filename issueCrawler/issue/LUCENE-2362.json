{
    "id": "LUCENE-2362",
    "title": "Add support for slow filters with batch processing",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.0.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Internal implementation of IndexSearch assumes that Filter and scorer has almost equal perfomance. But in our environment we have Filter implementation that is very expensive (in compare to scorer).\n\nif we have, let's say, 2k of termdocs selected by scorer (each ~250 docs) and 2k selected by filter, then 250k docs will be fastly checked (and filtered out) by scorer, and 250k docs will be slowly checked by our filter.\n\nUsing straigthforward implementation makes search out of 60 seconds per query boundary, because each next() or advance() requires N queries to database PER CHECKED DOC. Using read ahead technique allows us to optimze it to 35 seconds per query. Still too slow.\n\nThe solution to problem is firstly select all documents by scorer and filter them in batch by our filter. Example of implementation (with BitSet) in attachement. Currently it takes only ~300 millseconds per query.",
    "attachments": {
        "IndexSearcherImpl.java": "https://issues.apache.org/jira/secure/attachment/12440686/IndexSearcherImpl.java",
        "BatchFilter.java": "https://issues.apache.org/jira/secure/attachment/12440645/BatchFilter.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-02T19:36:19+0000",
            "content": "Example of batch slow filter interface and IndexSearch implementation.\n\nMay be it is possible to split Filter to several interfaces and allow user to select concrete way to implement it. Like:\n\n\n\tFilter (interface)\n\t\n\t\tFast Filter (current one)\n\t\tSlow Filter (new one, like the one in attachment)\n\t\n\t\n\n ",
            "author": "Sergey Vladimirov",
            "id": "comment-12852931"
        },
        {
            "date": "2010-04-03T09:46:29+0000",
            "content": "I think in general Lucene should do a better job managing whether the filter is cheap or expensive, random access or not (LUCENE-1536), and tune the matching/scoring appropriately.\n\nBut one issue with this patch: how is scoring done?  It looks like in first pass you gather bit set, then you filter it w/ batch filter, then you iterate again in 2nd pass to collect the docs.  But that 2nd pass won't in general have enough info to do scoring? ",
            "author": "Michael McCandless",
            "id": "comment-12853111"
        },
        {
            "date": "2010-04-03T10:17:09+0000",
            "content": "Michael,\n\nI'm sorry, i don't understand the question/problem.\n\nScoring is done exactly the same way as it done in IndexSearcher with standard filter, the only difference - it's done after filtering, not in the same time. ",
            "author": "Sergey Vladimirov",
            "id": "comment-12853114"
        },
        {
            "date": "2010-04-03T11:19:38+0000",
            "content": "But that's a big problem \u2013 most scorers can't score \"after the fact\".  They need to access things they have loaded for the one document being scored.\n\nEG try running a TermQuery and compare the scores you get for docs with Lucene's normal search vs with your patch. ",
            "author": "Michael McCandless",
            "id": "comment-12853119"
        },
        {
            "date": "2010-04-03T11:35:31+0000",
            "content": "Michael,\n\nI got it, thanks for notice! Right now i'll prepare another version. Too bad DocIdIterator doesn't have reset() method - it would help a lot. ",
            "author": "Sergey Vladimirov",
            "id": "comment-12853122"
        },
        {
            "date": "2010-04-03T11:44:46+0000",
            "content": "Update the example ",
            "author": "Sergey Vladimirov",
            "id": "comment-12853123"
        },
        {
            "date": "2010-04-03T12:03:41+0000",
            "content": "We can't reset Scorer, but we can obtain a new one. Update the example. ",
            "author": "Sergey Vladimirov",
            "id": "comment-12853124"
        }
    ]
}