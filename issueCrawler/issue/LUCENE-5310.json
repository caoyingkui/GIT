{
    "id": "LUCENE-5310",
    "title": "Merge Threads unnecessarily block on SerialMergeScheduler",
    "details": {
        "components": [
            "core/index"
        ],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.5,                                            6.0",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I have been working on a high level merge multiplexer that shares threads across different IW instances and I came across the fact that SerialMergeScheduler actually blocks incoming thread is a merge in going on. Yet this blocks threads unnecessarily since we pull the merges in a loop anyway. We should use a tryLock operation instead of syncing the entire method?",
    "attachments": {
        "LUCENE-5310.patch": "https://issues.apache.org/jira/secure/attachment/12610554/LUCENE-5310.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-28T13:18:59+0000",
            "content": "here is a patch ",
            "author": "Simon Willnauer",
            "id": "comment-13806752"
        },
        {
            "date": "2013-10-28T14:08:08+0000",
            "content": "next iteration - I actually figured out that all of our MSC have this problem. I added a more general solution and implemented a slightly smarter solution for this in the MergeScheduler base class. ",
            "author": "Simon Willnauer",
            "id": "comment-13806783"
        },
        {
            "date": "2013-10-28T17:28:43+0000",
            "content": "Hmm, I don't think we should do this.\n\nThis blocking in SMS is by design: SMS stalls any indexing threads while merges are running; if you want concurrency you should use CMS?\n\nCMS, also, needs to see all threads, because it (by design) stalls incoming index threads when there are too many merges running. ",
            "author": "Michael McCandless",
            "id": "comment-13806961"
        },
        {
            "date": "2013-10-29T17:28:10+0000",
            "content": "This blocking in SMS is by design: SMS stalls any indexing threads while merges are running; if you want concurrency you should use CMS?\n\nReally, I mean this makes no sense at all. Ie. you have a merge running and you index that means you will block all threads that might trigger a merge until all pending merges are done? I think this is a bug! Really this interface says only that is will do no merges concurrently that's it. You wanna use calling threads for merging use SMS you don't wanna do that use CMS.\n\n\nCMS, also, needs to see all threads, because it (by design) stalls incoming index threads when there are too many merges running.\n\nthat is another bug IMO. It's not the concern of the MS to block threads since it might not even see all of them? The MS should take care of when merges need to be scheduled stalling indexing threads it the DocWriters concern? ",
            "author": "Simon Willnauer",
            "id": "comment-13808196"
        },
        {
            "date": "2013-10-30T11:18:42+0000",
            "content": "\nCMS, also, needs to see all threads, because it (by design) stalls incoming index threads when there are too many merges running.\n\nthat is another bug IMO. It's not the concern of the MS to block threads since it might not even see all of them? \n\nI think that's an important feature, not a bug: it prevents merge\nstarvation.\n\nIe, if the indexing threads are producing segments faster than merging\ncan merge them then those indexing threads should be stalled so\nmerging can catch up.\n\nIt's true it won't see all threads that enter IW, but it will see the\nthreads that are responsible for making new segments, and those are\nthe ones that need to be paused when merging is falling behind.\n\n\nReally, I mean this makes no sense at all. Ie. you have a merge running and you index that means you will block all threads that might trigger a merge until all pending merges are done? I think this is a bug! Really this interface says only that is will do no merges concurrently that's it. You wanna use calling threads for merging use SMS you don't wanna do that use CMS.\n\nMaybe we could improve SMS so that it wouldn't block the\nsegment-producing threads until a 2nd merge is queued?  (Today, it\nblocks the producing threads as soon as another segment is written and\na merge is still running). ",
            "author": "Michael McCandless",
            "id": "comment-13808981"
        },
        {
            "date": "2014-04-16T12:54:34+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970803"
        },
        {
            "date": "2014-04-22T12:22:24+0000",
            "content": "here is an updated version of this patch. I moved the functionality in to a new abstract base class AbstractLockedMergeScheduler that allows to override the default blocking behavior but by default blocks if there is a thread already calling merge. ",
            "author": "Simon Willnauer",
            "id": "comment-13976681"
        },
        {
            "date": "2014-04-22T16:24:02+0000",
            "content": "New patch, fixing compilation and a javadocs typo.\n\nDo we still need CMS.mergeInternal to be sync'd?  Actually we do,\nbecause its other sync'd methods rely on this.\n\nI think we also should fix CMS's low-level denial-of-service\nprotection (forcefully stalling the incoming indexing threads\n\"responsible\" for making too many segments, until merges can catch up)\nto use this base class too, somehow? ",
            "author": "Michael McCandless",
            "id": "comment-13976996"
        },
        {
            "date": "2014-04-26T22:35:44+0000",
            "content": "Another iteration ... this patch moves the \"stall indexing threads if\nnecessary\" logic to the base class (MergeScheduler) and fixes both SMS\nand CMS to use it.\n\nIt also enables an app to subclass either SMS or CMS and override the\ndefault adversary/denial-of-service protection, i.e. hard stall of\nindexing threads \"responsible\" for making segments when too many\nmerges are running/scheduled.  If an app has a gentler way of reducing\nthe merge load (opening NRT readers less frequently, removing merge IO\nrate throttling, etc.) then it can subclass and do that instead.\n\nThe behavior of CMS is unchanged, i.e. it blocks indexing threads when\nthe max number of merges are running and another merge wants to kick\noff.  SMS is a bit improved: its merge method is no longer sync'd, and\nit now only blocks if there is already a merge running and another\nwants to kick off; previously it blocked if a merge was already\nrunning regardless of whether another merge needed to run.\n\nI think there are further simplifications we can make to CMS but we\nshould take those up separately. ",
            "author": "Michael McCandless",
            "id": "comment-13982123"
        },
        {
            "date": "2014-04-27T06:55:39+0000",
            "content": "hey mike, thanks for taking a look at this but your patch doesn't implement what I tried to achieve here and has some problems in SMS. In SMS there is a chance for 2 or more threads to pick a merge since the critical section between maybeStall() and writer.merge(merge); is not synced so if 2 threads check if they need to stall they can both make progress and pass the check before the first one is picked up? There is also no chance to simply return if stalling is required and notify some other component to handle the merge-falling-behind situation. You still block the incoming thread no matter what or you continue to pick a merge. I also really don't like that we rely on #notify & #wait since they can be triggered from outside of the class and from subclasses. I think in our case we should use a private condition here instead. yet  if we move to a condition and maybe signal with a boolean returned from maybeStall() if we should continue merging we can merge the two approaches and make them safe.  ",
            "author": "Simon Willnauer",
            "id": "comment-13982208"
        },
        {
            "date": "2014-04-27T13:17:09+0000",
            "content": "Arrrgh, you're right Simon.  I added an TestSerialMergeScheduler to\nshow this...\n\nNew patch, with another iteration, and a number of cleanups to CMS.\nE.g. its merge method is no longer sync'd, its MergeThread class now\nonly runs one merge.  I use a semaphore to restrict running merges.\n\nI also think CMS can deadlock (stall all merges) if you ever try to\ndecrease the maxMergeCount when too many merges were already running,\nbecause the stall logic would get to a point where no thread would\never be allowed to unstall.  So I changed it (and MergeScheduler) to\nrequire the maxMergeCount up front.\n\nAn app that wants to do its own throttling can just set a high\nmaxMergeCount to CMS, and then throttle itself when\nIW.getRunningMergeCount() is too high... ",
            "author": "Michael McCandless",
            "id": "comment-13982312"
        },
        {
            "date": "2014-04-27T15:33:54+0000",
            "content": "mike I like the patch a lot albeit I didn't look long enough yet... one thing that jumps out is that you still have no way to just return if the scheduler is busy or the stall limit is reached. Maybe we should just do something like this:\n\n\nif (maybeStall() {\n   \n// pick the merge etc.\n}  else {\n  return; // do nothing if maybeStall() returns false\n}\n\n\n\nthat way we can fully control the behavior.... I also think you should put the logging into the try / finally block unless there is a slight chance to deadlock if logging is buggy? ",
            "author": "Simon Willnauer",
            "id": "comment-13982358"
        },
        {
            "date": "2014-04-27T15:38:10+0000",
            "content": "\nI also think CMS can deadlock (stall all merges) if you ever try to\ndecrease the maxMergeCount when too many merges were already running,\nbecause the stall logic would get to a point where no thread would\never be allowed to unstall. So I changed it (and MergeScheduler) to\nrequire the maxMergeCount up front.\n\nI proposed this on LUCENE-5080 a while back, but it didnt take then. ",
            "author": "Robert Muir",
            "id": "comment-13982360"
        },
        {
            "date": "2014-04-27T15:46:28+0000",
            "content": "one thing that jumps out is that you still have no way to just return if the scheduler is busy or the stall limit is reached. Maybe we should just do something like this:\n\nOK I'll try to get that working ... basically, if too many merges are running, don't pull a new one from IW and optionally don't stall (we'll still stall by default).  It's a bit tricky because you don't want to try to stall unless there is another merge wanting to run.  Ie, when maxMergeCount=2, if there are 2 merges already running but no new merge is pending, we shouldn't try to stall.  But I think I can make something work ... I'll give it a shot. ",
            "author": "Michael McCandless",
            "id": "comment-13982363"
        },
        {
            "date": "2014-04-27T18:07:07+0000",
            "content": "Another iteration ... MS.getNextMerge now invokes maybeStall only when the max number of merges is already running, and another merge is pending.  E.g. this enables a CMS subclass to override maybeStall and return false to return right away.  I think it's close. ",
            "author": "Michael McCandless",
            "id": "comment-13982410"
        }
    ]
}