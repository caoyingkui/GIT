{
    "id": "LUCENE-1343",
    "title": "A replacement for AsciiFoldingFilter that does a more thorough job of removing diacritical marks or non-spacing modifiers.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The ISOLatin1AccentFilter takes Unicode characters that have diacritical marks and replaces them with a version of that character with the diacritical mark removed.  For example \u00e9 becomes e.  However another equally valid way of representing an accented character in Unicode is to have the unaccented character followed by a non-spacing modifier character (like this:  \u00e9  )    The ISOLatin1AccentFilter doesn't handle the accents in decomposed unicode characters at all.    Additionally there are some instances where a word will contain what looks like an accented character, that is actually considered to be a separate unaccented character  such as  \u0141  but which to make searching easier you want to fold onto the latin1  lookalike  version   L  .   \n\nThe UnicodeNormalizationFilter can filter out accents and diacritical marks whether they occur as composed characters or decomposed characters, it can also handle cases where as described above characters that look like they have diacritics (but don't) are to be folded onto the letter that they look like ( \u0141  -> L )",
    "attachments": {
        "UnicodeNormalizationFilter.java": "https://issues.apache.org/jira/secure/attachment/12386657/UnicodeNormalizationFilter.java",
        "UnicodeCharUtil.java": "https://issues.apache.org/jira/secure/attachment/12386658/UnicodeCharUtil.java",
        "utr30.nrm": "https://issues.apache.org/jira/secure/attachment/12442148/utr30.nrm",
        "LUCENE-1343.patch": "https://issues.apache.org/jira/secure/attachment/12442147/LUCENE-1343.patch",
        "normalizer.jar": "https://issues.apache.org/jira/secure/attachment/12386659/normalizer.jar",
        "UnicodeNormalizationFilterFactory.java": "https://issues.apache.org/jira/secure/attachment/12386656/UnicodeNormalizationFilterFactory.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-07-22T19:33:01+0000",
            "content": "Source code for UnicodeNormalizationFilter ",
            "author": "Robert Haschart",
            "id": "comment-12615753"
        },
        {
            "date": "2008-07-22T19:41:32+0000",
            "content": "Java 6 contains a class named java.text.Normalizer that is able to perform Unicode normalization, earlier versions of java do not have that class, and therefore need the code in this jar (which is a subset of the icu4j library) to be able to perform Unicode normalization.    The UnicodeNormalizationFilter can work with either the java 6 class java.text.Normalizer or the class com.ibm.icu.text.Normalizer in the jar here. ",
            "author": "Robert Haschart",
            "id": "comment-12615757"
        },
        {
            "date": "2008-07-22T20:13:48+0000",
            "content": "Random related comment (just because this issue seemed like a good place to put it)\n\nPeople may also want to consider constructing a Filter based on the substitution tables from the perl Text::Unidecode module...\n\nhttp://search.cpan.org/~sburke/Text-Unidecode/\nhttp://interglacial.com/~sburke/tpj/as_html/tpj22.html\n\n...i have no idea how it's behavior compares to the UnicodeNormalizationFilter, just that it seems to have similar goals. ",
            "author": "Hoss Man",
            "id": "comment-12615770"
        },
        {
            "date": "2008-07-22T20:20:39+0000",
            "content": "Hi Robert,\n\nMy comments below assume you're intrestested in having this code hosted in the Lucene source repository - please disregard if that's not the case.\n\nHave you seen the HowToContribute page on the Lucene wiki?  It outlines some of the basics concerning code submissions.\n\nA couple of things I noticed that need to be addressed before the code will be accepted:\n\n\n\tTab characters should be converted to spaces\n\tIndentation increment should be two spaces\n\tTest(s) should be moved from the UnicodeNormalizationFilterFactory.main() method into standalone class(es) that extend LuceneTestCase\n\tMore/more explicit javadocs - for example, you should describe the set of provided transformations (e.g. Cyrillic diacritic stripping is included).\n\tSolr is a separate code base, so the UnicodeNormalizationFilterFactory should be moved to a Solr JIRA issue\n\tBecause it has a dependency on the ICU jar, this contribution will have to live in the contrib/ area \u2013 the Java packages name should be adjusted accordingly.\n\tThe submission should be repackaged as a patch (instructions available on the above-linked wiki page).\n\n ",
            "author": "Steve Rowe",
            "id": "comment-12615775"
        },
        {
            "date": "2008-08-13T20:31:18+0000",
            "content": "Some languages like Cyrillic have a standard latin-1 transliteration, and deserve their own filters. \n\nCyrillic is one case of this. It is based on three alphabets: 1/3 latin, 1/3 greek, and 1/3 new characters for 'ya/ye', 'ts', 'sh', 'ch', 'zh', and 'sh-ch' (fiSH CHips!).\n\nUnit tests are the best way to document the many ways this thing can work.\n\n\n ",
            "author": "Lance Norskog",
            "id": "comment-12622345"
        },
        {
            "date": "2008-08-14T03:49:15+0000",
            "content": "Hi Robert,\n\nFWIW, the issues being discussed here are very similar to those covered by the Unicode Security Considerations technical report #36, and associated data found in the Unicode Security Mechanisms technical report #39.\n\nThe fundamental issue for int'l domain name spoofing is detecting when two sequences of Unicode code points will render as similar glyphs...which is basically the same issue you're trying to address here, so that when you search for something you'll find all terms that \"look\" similar.\n\nSo for a more complete (though undoubtedly slower & bigger) solution, I'd suggest using ICU4J to do a NFKD normalization, then toss any combining/spacing marks, lower-case the result, and finally apply mappings using the data tables found in the technical report #39 referenced above.\n\n\u2013 Ken ",
            "author": "Ken Krugler",
            "id": "comment-12622432"
        },
        {
            "date": "2008-08-14T08:42:31+0000",
            "content": "\nUnit tests are the best way to document the many ways this thing can work.\n\ngets a judges score of 11 from me.  Gold for Lance for Quote of the Day. ",
            "author": "Erik Hatcher",
            "id": "comment-12622476"
        },
        {
            "date": "2008-08-14T17:10:45+0000",
            "content": "The UnicodeNormalizationFilter does use the decompose normalization \nportion of the icu4j library as a starting point.  However even with \nthat there are several instances where the normalizer code does not \ndecompose a character into an unaccented character and a accent mark, a \nnotable one being   ( \u0141 -> L )  so the UnicodeNormalizationFilter start \nwith the approach you outlined, perform a decompose normalization \nfollowed by discarding all non-spacing modifier characters, and then can \ngo on from there to further normalize the data by folding the additional \ncharacters that aren't handled by the decompose normalization onto their \nLatin1 lookalikes.\n\n-Robert\n\n\n\n ",
            "author": "Robert Haschart",
            "id": "comment-12622607"
        },
        {
            "date": "2008-08-14T23:41:00+0000",
            "content": "Hi Robert,\n\nSo given that you and the Unicode consortium seem to be working on the same problem (normalizing visually similar characters), how similar are your tables to the ones that have been developed to deter spoofing of int'l domain names?\n\n\u2013 Ken ",
            "author": "Ken Krugler",
            "id": "comment-12622746"
        },
        {
            "date": "2009-12-06T20:09:19+0000",
            "content": "Mr Muir, can you take a look at this? Offer anything over the ASCIIFoldingFilter? If not, we should close, if so, what do you recommend? ",
            "author": "Mark Miller",
            "id": "comment-12786689"
        },
        {
            "date": "2009-12-06T20:54:49+0000",
            "content": "The big picture here and all these other duplicated normalization issues across jira is related to the outdated unicode support in the JDK. \n\nThis issue speaks of removing diacritical marks / NSM's, but the underlying issue is missing unicode normalization, duplicated here (incorrectly named): LUCENE-1215 and also here: LUCENE-1488 (disclaimer: my impl)\n\nSpeaking for the accent removal: In truth I do not think we should be simply removing NSMs because in most cases, they are there for a reason. For example, they are diacritics in a lot of european languages, but for many eastern languages they are the actual vowels. (i.e. all the indic scripts)\n\nWe need to separate the issue of missing unicode normalization (which is clearly something lucene needs), from the issue of removing diacritics (which is language-specific and doing it based on unicode properties is inappropriate).\n\nFinally just normalizing unicode in Lucene by itself is not very useful, because there is a careful interaction with other processes and attention needs to be paid to the order in which filters are run. For example, its interaction with case folding can be a bit tricky. If you are interested in this issue I urge you to read the javadocs writeup I placed in the ICUNormalizationFilter in LUCENE-1488. ",
            "author": "Robert Muir",
            "id": "comment-12786701"
        },
        {
            "date": "2009-12-06T21:44:23+0000",
            "content": "Just to make sure this point doesn't get lost in the discussion over normalization - the issue of \"visual normalization\" is one that I think ISOLatin1AccentFilter originally was trying to address. Specifically how to fold together forms of letters that a user, when typing, might consider equivalent.\n\nThis is indeed language specific, and re-implementing support that's already in ICU4J is clearly a Bad Idea.\n\nI think there's value in a general normalizer that implements the Unicode Consortium's algorithm/data for normalization of int'l domain names, as this is intended to avoid visual spoofing of domain names.\n\nDon't know/haven't tracked if or when this is going into ICU4J. But (similar to ICU generic sorting) it provides a useful locale-agnostic approach that would work well-enough for most Lucene use cases. ",
            "author": "Ken Krugler",
            "id": "comment-12786712"
        },
        {
            "date": "2009-12-06T22:24:26+0000",
            "content": "Hi Ken, such functionality does exist, although it is new and I think still changing (you are talking about StringPrep/IDN/etc?).\n\nIf a filter for this is desired, we can do it with ICU, though I think its relatively new (probably not optimized, only works on String, etc etc)\n\nI still think even this is stupid, because unicode encodes characters, not glyphs. ",
            "author": "Robert Muir",
            "id": "comment-12786724"
        },
        {
            "date": "2009-12-07T15:20:14+0000",
            "content": "I also am dubious about a general purpose folding filter that maps letters to their ASCII look-alike and agree that folding is language dependent.\n\nMay Americans are illiterate when it comes to text with diacritics and NSM. Personally I'm nearly illiterate. I think having prominent folding filters without adequate explanation about their pitfalls or usefulness may lead illiterates into a false sense of sufficiency.\n\nIf it makes sense to have a filter for TR39 I think that should be a separate issue. If that's what this issue is all about then it's description should be modified.\n\nI think this should otherwise be closed as a bad idea.\n\nRobert Muir, Would it make sense to have a Greek filter that strips diacritics? My thought is that if the letter is Greek then the diacritics would be removed, but otherwise it would not.\n\nSimilar question for Hebrew, I see value in two filters: one would strip cantillation and the other, vowel points. Or would it be better to have one that can do both depending on flags? ",
            "author": "DM Smith",
            "id": "comment-12786941"
        },
        {
            "date": "2009-12-07T15:29:45+0000",
            "content": "Robert Muir, Would it make sense to have a Greek filter that strips diacritics? My thought is that if the letter is Greek then the diacritics would be removed, but otherwise it would not.\n\nThe GreekLowerCaseFilter (incorrectly named) does this also, somewhat. it removes tone marks... but this might not be what you \"want\" (depending on what that is), if you are dealing with polytonic Greek (sorry for my ignorance of the biblical test you are looking at, but I think it is ancient Greek?)\n\nSimilar question for Hebrew, I see value in two filters: one would strip cantillation and the other, vowel points. Or would it be better to have one that can do both depending on flags?\n\nThis depends on your use case, and then you have dagesh,shin dot, too... These are all NSMs. But this is going to depend on the user, and I think every person will need their own, they can use CharFilter or other ways of defining these tables. ",
            "author": "Robert Muir",
            "id": "comment-12786946"
        },
        {
            "date": "2009-12-07T16:07:47+0000",
            "content": "\nRobert Muir, Would it make sense to have a Greek filter that strips diacritics? My thought is that if the letter is Greek then the diacritics would be removed, but otherwise it would not.\n\nThe GreekLowerCaseFilter (incorrectly named) does this also, somewhat. it removes tone marks... but this might not be what you \"want\" (depending on what that is), if you are dealing with polytonic Greek (sorry for my ignorance of the biblical test you are looking at, but I think it is ancient Greek?)\n\nYes, I'm referring to ancient Greek (grc, not el) and they are tone and breathing marks. Most ancient texts did not have these marks but modern do. Even some modern representations of the ancient. While I have several semesters of koine Greek under my belt and might be wrong, there may be ambiguities where two words have the same letters but differ on marks, but they are infrequent (I don't know of any).\n\nThe GreekLowerCaseFilter appears to only do some of the work and only works on composed characters.\n\nMy question is not whether I'd find the filter useful, but whether it'd be a useful addition to Lucene.\n\n\nSimilar question for Hebrew, I see value in two filters: one would strip cantillation and the other, vowel points. Or would it be better to have one that can do both depending on flags?\n\nThis depends on your use case, and then you have dagesh,shin dot, too... These are all NSMs.\nI have a terrible habit of not being exact or using the proper terms. Shame on me. I meant that the latter strip all other marks.\n\nBut this is going to depend on the user, and I think every person will need their own, they can use CharFilter or other ways of defining these tables.\n\nIf there is no general purpose contribution, then it should not be part of Lucene and I'll have my own.\n\nWhen I do work them up, I'll create an issue or two and attach the results. If they are deemed useful then they can be added to Lucene, otherwise ignored. ",
            "author": "DM Smith",
            "id": "comment-12786968"
        },
        {
            "date": "2009-12-07T16:18:45+0000",
            "content": "\nYes, I'm referring to ancient Greek (grc, not el) and they are tone and breathing marks. Most ancient texts did not have these marks but modern do. Even some modern representations of the ancient. While I have several semesters of koine Greek under my belt and might be wrong, there may be ambiguities where two words have the same letters but differ on marks, but they are infrequent (I don't know of any).\n\nI guess I brought this up because this is where you have several situations where case folding and normalization interact, eg. applying FC_NFKC set when case folding so that later NFK[CD] normalization will be closed, I know this is supposed to solve various ways the YPOGEGRAMMENI can be implemented but I forget the details...\n\nThis is why I think, the general purpose contribution should be case folding, normalization, and the stuff like this (FC_NFKC set) to make sure they work together...\n\nIf you later want to apply something more specialized like StringPrep, you need this logic anyway, see http://www.ietf.org/rfc/rfc3454.txt (especially section 3.2)  ",
            "author": "Robert Muir",
            "id": "comment-12786971"
        },
        {
            "date": "2010-04-17T14:34:18+0000",
            "content": "OK! I think we have a good solution here!.\n\nWe can use ICU's Normalizer2 to implement this, by simply creating a custom normalization mapping.\nThis way we can meet multiple use-cases, e.g. someone wants to remove diacritics, someone else doesn't.\n\nAnd we get solid unicode behavior and high performance to boot.\n\nSo I will keep this issue open, I think the best solution is to take the accent-folding mappings here (or use the ones in AsciiFoldingFilter?) and create a .txt file of mappings, passing it to gennorm2 along with NFKC case fold mappings.\n\nThis way we can implement this on top of LUCENE-2399, all compiled to an efficient binary form with no code.\nI'll take a shot at this once LUCENE-2399 is resolved. ",
            "author": "Robert Muir",
            "id": "comment-12858144"
        },
        {
            "date": "2010-04-19T08:35:48+0000",
            "content": "Attached is a patch that implements UTR#30 as a tailored unicode normalization form.\n\nEssentially it acts as a combined \"Internationalized AsciiFoldingFilter\" + NFKC_CaseFold (Unicode Case Folding, Default Ignorable removal, and NFKC normalization).\n\nThis is a nice alternative to just using ICUNormalizer2Filter in the case that you want \"fuzzy matching\" (e.g. ignore diacritical marks). \n\nThe patch is large because it contains all the source data files necessary for gennorm2 to regenerate the 41KB binary trie file... the java implementation is trivial. ",
            "author": "Robert Muir",
            "id": "comment-12858420"
        },
        {
            "date": "2010-04-19T08:37:36+0000",
            "content": "attached is the binary file that goes in the resources/ directory.\n\nAlthough I provide the ant logic to regenerate this, its kind of a pain because\n\n\tyou must download/compile ICU4c (version 4.4), there is no java gennorm2\n\tyou must run this on a big-endian machine.\n\n ",
            "author": "Robert Muir",
            "id": "comment-12858421"
        },
        {
            "date": "2010-04-20T13:51:22+0000",
            "content": "By the way, I have been running this with the ASCIIFoldingFilter tests and ensuring its a superset (e.g. we have at least all their mappings).\n\nBut there are some bugs in ASCIIFoldingFilter that should be fixed:\n\nFor example, U+1E9B (LATIN SMALL LETTER LONG S WITH DOT ABOVE)\nBut in unicode. this is canonically equivalent to U+017F (LONG S) U+0307 (COMBINING DOT ABOVE)\nAsciiFoldingFilter folds U+1E9B (LONG S WITH DOT) to an F\nbut it folds U+017F (LONG S) to an S\n\nUnicode defines this character as a compatibility equivalent to S anyway, but its worse that ASCIIFoldingFilter is canonically inconsistent with itself. ",
            "author": "Robert Muir",
            "id": "comment-12858891"
        },
        {
            "date": "2010-04-20T14:35:15+0000",
            "content": "attached is a modified patch (i will upload the new datafile too).\n\n\tapplied ICU or Unicode copyright headers to any datafiles where I sourced from their data, and added a mention to NOTICE.txt to that effect.\n\tadded some additional punctuation mappings to ensure it contains all ASCIIFoldingFilter foldings\n\n\n\nAs noted previously, there are 5 places where this disagrees with ASCIIFoldingFilter:\nU+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE (should be s)\nU+2033: DOUBLE PRIME (should be two single quotes)\nU+2036: REVERSED DOUBLE PRIME (same as above)\nU+2038: CARET (folds to CIRCUMFLEX ACCENT, which should be deleted as its [:Diacritic:]\nU+FF3E: FULLWIDTH CIRCUMFLEX ACCENT (same as above)\n\nI plan to commit in a few days if no one objects. ",
            "author": "Robert Muir",
            "id": "comment-12858907"
        },
        {
            "date": "2010-04-20T14:36:06+0000",
            "content": "updated datafile. ",
            "author": "Robert Muir",
            "id": "comment-12858908"
        },
        {
            "date": "2010-04-22T08:48:46+0000",
            "content": "Committed revision 936657. ",
            "author": "Robert Muir",
            "id": "comment-12859746"
        },
        {
            "date": "2010-04-27T07:17:39+0000",
            "content": "Very useful for unicode normalization/folding.  But after trying this package in the nightly build I looked back at the patch and realized that it has a dependency on IBM ICU.\n\nimport com.ibm.icu.text.Normalizer2;\n\nIs this intentional?  Will it remain dependent? ",
            "author": "Jamie",
            "id": "comment-12861275"
        },
        {
            "date": "2010-04-27T07:47:31+0000",
            "content": "Yes, as this contrib package is called \"ICU\". If you dont want to use ICU, dont use this contrib. You can alway use ASCIIFoldingFilter, it will not get removed. ",
            "author": "Uwe Schindler",
            "id": "comment-12861290"
        },
        {
            "date": "2010-05-06T12:28:45+0000",
            "content": "backported to 3x, revision 941694. ",
            "author": "Robert Muir",
            "id": "comment-12864748"
        },
        {
            "date": "2011-03-30T15:49:53+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013289"
        }
    ]
}