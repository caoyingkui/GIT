{
    "id": "SOLR-9858",
    "title": "Collect aggregated metrics from nodes and shard leaders in overseer",
    "details": {
        "components": [
            "metrics"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Overseer can collect metrics from Solr nodes and shard leaders in order to have a notion of the indexing / query / replication / system load on each node, shard and its replicas. This information then can be used for cluster (auto)scaling.",
    "attachments": {
        "SOLR-9858.patch": "https://issues.apache.org/jira/secure/attachment/12853052/SOLR-9858.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-16T13:54:45+0000",
            "author": "Andrzej Bialecki",
            "content": "Cumulative patch for this issue and SOLR-9857. I'd appreciate review.\n\nA few notes on the design:\n\n\tfor each replica a SolrReplicaReporter is created, which periodically sends selected metrics to MetricsCollectorHandler running on shard leader. These metrics are sent as regular SolrInputDocument-s, and they contain fields that indicate the source reporter and the target registry where they are to be collected and aggregated.\n\tfor each node a SolrOverseerReporter is created, which periodically sends selected metrics from selected registries to a node where Overseer leader is located. MetricsColelctorHandler running on that node collects and aggregates these metrics in \"solr.overseer\" registry.\nPlease consult javadoc for these classes for examples of configurations, as well as SolrCloudReportersTest that shows what kind of reports are expected.\n\n ",
            "id": "comment-15869959"
        },
        {
            "date": "2017-03-01T14:01:28+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I reviewed the combined patch and I have a few comments:\n\n\tnit-pick typo Mtrics in MetricsCollectorHandler class javadocs\n\tThere should be some protection inside MetricsCollectorHandler in case receiving node is neither leader nor overseer? And when the /admin/metrics/collector replies that it is not in the right role, then we should refresh the overseer/leader url?\n\tUnrelated changes in SolrClientCache?\n\tA bunch of tests inside SolrCoreMetricManagerTest.testRegistryName are commented out in the patch\n\tA new group for replica has been created. If it is to contain the aggregated metrics on the leader, should we call it shard instead?\n\tCan we extract the default 60s used in SolrMetricManager replica and overseer reporters into a static final constant? Same for SolrOverseerReporter class\n\tOn a related node, we need to add and aggregate disk free stats\n\tThere is no default read or connect timeout specified on http clients created from SolrClientCache. I think we should use the UpdateShardHandler's http client instead.\n\tI couldn't find anything that prevents the leader itself from instantiating the SolrReplicaReporter to report its own stats to itself?\n\tI built and ran solr with this patch using bin/solr -e cloud -noprompt which starts 2 nodes and creates a \"gettingstarted\" collection with 2 shards and 2 replicas. I can't find the \"leader\" stats for this collection in the /admin/metrics output on either nodes. Then I created a new collection using ./bin/solr create -c xyz -shards 1 -replicationFactor 1 \u2013 for this collection I could find the leader stats under the \"overseer\" group which is not what I expected. What am I missing?\n\n ",
            "id": "comment-15890212"
        },
        {
            "date": "2017-03-01T16:38:46+0000",
            "author": "Andrzej Bialecki",
            "content": "Comments to your comments:\n1. Fixing.\n2. We can make this handler smarter. I thought it would be less complicated to allow any updates to be processed, especially since we're not sure yet what we want to aggregate where, and also to allow for future extensibility of this mechanism. We can lock it down later. The issue of sending reports to the node that recently changed its role (eg. stopped being Overseer) - I don't think it's a big deal, in the worst case we lose just one report, because the next report will go to the right node.\n3.  (and 8) I've modified SolrClientCache to use the provided instance of HttpClient and both SolrOverseerReporter and SolrReplicaReporter use the one obtained from UpdateShardHandler.\n4. After refactoring the way to construct these names stopped being so simple - I'm moving these tests now to SolrCloudReportersTest.\n5. Good point - fixing.\n6. Fixing.\n7. I'll make a separate issue for this.\n9. This is on purpose. Imagine a collection with replication 1 - the only replica is also a shard leader. If we prevented the leader from reporting its state we wouldn't get any data in the \"leader\" registry.\n10. Indeed, there seems to be a bug somewhere - investigating...\n\nUpdated patch will follow.  ",
            "id": "comment-15890512"
        },
        {
            "date": "2017-03-03T21:38:21+0000",
            "author": "Andrzej Bialecki",
            "content": "Latest patch that includes the fixes. ",
            "id": "comment-15895070"
        },
        {
            "date": "2017-03-06T14:49:47+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I tried the patch again Andrzej but I found another bug. Instead of core name, now the core node name is used for the core-specific registry e.g. I see solr.core.gettingstarted.shard1.core_node1 in the output of /admin/metrics.\n\nI have a few more requests:\n\n\tIn this patch, the leader metrics are exposed at e.g. solr.core.gettingstarted.shard2.leader and solr.core.gettingstarted.shard2.leader \u2013 there is no reason to have \"core\" in this name. Can we rename it to e.g. solr.collection.gettingstarted.shard1.leader?\n\tThe aggregated cluster level metrics are exposed at solr.overseer. Can we rename it to solr.cluster to make its purpose explicit? Another reason to do this is that in future when we have overseer specific metrics such as the ones from the Overseer Status collection API, they will have to be shoehorned into the same registry and for users it will be difficult to distinguish between what is aggregated from the cluster and what is overseer specific.\n\tCan we disable the aggregation by default? Users should be able to enable/disable this aggregation via the CLUSTERPROP API for the cluster level metrics and using modify collection API for the leader level metrics. If you want, we can have just one switch for both and separate them out later.\n\n ",
            "id": "comment-15897427"
        },
        {
            "date": "2017-03-07T13:24:11+0000",
            "author": "Andrzej Bialecki",
            "content": "Final patch. This fixes all issues pointed out in the last review. If there are no objections I'd like to commit this shortly. ",
            "id": "comment-15899426"
        },
        {
            "date": "2017-03-07T21:02:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4d7bc9477144937335e997ad630c4b89f558ddc5 in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4d7bc94 ]\n\nSOLR-9858: Collect aggregated metrics from nodes and shard leaders in overseer. ",
            "id": "comment-15900151"
        }
    ]
}