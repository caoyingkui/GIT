{
    "id": "SOLR-7888",
    "title": "Make Lucene's AnalyzingInfixSuggester.lookup() method that takes a BooleanQuery filter parameter available in Solr",
    "details": {
        "components": [
            "Suggester"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "5.2.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "LUCENE-6464 has introduced a very flexible lookup method that takes as parameter a BooleanQuery that is used for filtering results.\n\nThis ticket is to expose that method to Solr.\n\nThis would allow user to do:\n\n\n/suggest?suggest=true&suggest.build=true&suggest.q=term&suggest.contextFilterQuery=contexts:tennis\n\n/suggest?suggest=true&suggest.build=true&suggest.q=term&suggest.contextFilterQuery=contexts:golf AND contexts:football\n\n\netc\n\nGiven that the context filtering in currently only implemented by the \n\nAnalyzingInfixSuggester\n\n and by the \n\nBlendedInfixSuggester\n\n, this initial implementation will support only these 2 lookup implementations.",
    "attachments": {
        "SOLR-7888.patch": "https://issues.apache.org/jira/secure/attachment/12755729/SOLR-7888.patch",
        "SOLR-7888-7963.patch": "https://issues.apache.org/jira/secure/attachment/12755577/SOLR-7888-7963.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-06T23:43:18+0000",
            "author": "Arcadius Ahouansou",
            "content": "Initial patch with a few todo:\n\n\tFix highlighting\n\tmerge tests after SOLR-6246 is fixed\n\t..\n\n ",
            "id": "comment-14660996"
        },
        {
            "date": "2015-08-06T23:47:25+0000",
            "author": "Arcadius Ahouansou",
            "content": "Please Michael McCandless, when you have the chance, could you have a look and let me know whether all this makes any sense? \nThanks.\nArcadius ",
            "id": "comment-14661000"
        },
        {
            "date": "2015-08-07T13:39:31+0000",
            "author": "Michael McCandless",
            "content": "Hi Arcadius Ahouansou, I agree we should add this to Solr, but I'm not familiar enough with this part of Solr to help here ... ",
            "id": "comment-14661834"
        },
        {
            "date": "2015-08-07T13:52:13+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks for the contribution, looks promising. Just browsed the code, have not tested or looked thoroughly. What analysis is applied to the new contextfield? Do we need it to be configurable?\n\nI can probably help next week if I find some time... ",
            "id": "comment-14661849"
        },
        {
            "date": "2015-08-07T21:37:33+0000",
            "author": "Arcadius Ahouansou",
            "content": "Thank you Michael McCandless ",
            "id": "comment-14662504"
        },
        {
            "date": "2015-08-07T22:00:26+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl\n\nThe contextField used in the tests is defined as a simple string in the schema.\nWe could make things more flexible by defining the type of the field ... similar to the suggestAnalyzerFieldType config.\n\nI have added this to my todo list.\n\nIs it OK to have the basic usable functionality out and then, create more tickets to implement further enhancements?\n\nThank you very much.\n\nArcadius. ",
            "id": "comment-14662524"
        },
        {
            "date": "2015-08-07T22:35:31+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Let's see if it's a an easy one by copying existing code, if not we can do it step wise. Should probably handle multi valued input too.. ",
            "id": "comment-14662578"
        },
        {
            "date": "2015-08-08T06:34:27+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hi Jan H\u00f8ydahl.\nI will update the patch this weekend and add a \n\ncontextAnalyzerFieldType\n\n configuration with tests. Should be quite easy.\n\nBy multi-input, you meant\n\nsuggest.contextFilterQuery=contexts:golf&suggest.contextFilterQuery=contexts:football\n\n\n\nI will add that as well this weekend.\n\nIn the meanwhile, let me know if there is anything else that I need to add.\n\nThank you very much for picking up this.\n\nArcadius. ",
            "id": "comment-14662835"
        },
        {
            "date": "2015-08-08T20:41:16+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "By multivalue I mean that the Solr source field could be MV and all values should match against the query. You only need one &suggest.contextFilterQuery=. Is it possible to shorten the param name, to e.g. &suggest.contextQ= or something? And if you only ever can query on \"context\" (? ), then perhaps that can be defaultField, and the query itself can be simply golf OR football? ",
            "id": "comment-14663165"
        },
        {
            "date": "2015-08-09T15:59:59+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl\n\n\n\tThe defaultField thing is an excellent idea! Will add that\n\n\n\n\n\tI will change the param to suggest.contextQ\n\n\n\n\n\tAbout the contextAnalyzerFieldType config, it seems we may not need that because as we know the contextField, I was able to do  something like \n\nAnalyzer queryAnalyzer = core.getLatestSchema().getFieldType(contextsField).getQueryAnalyzer()\n\n\n\n\n\n\n\nAbout multivalue: the source field in the current test is defined as \n\n<field name=\"contexts\" type=\"text\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n\n\nand we have tests where we index data with multiple contexts\n\n    assertU(adoc(\"id\", \"8\", \"cat\", \"example inputdata\", \"price\", \"45\", \"weight\", \"30\", \"contexts\", \"ctx2\", \"contexts\", \"ctx3\"));\n\n\nand we check both contexts with an AND\n\n    //AND BooleanQuery\n    assertQ(req(\"qt\", rh,\n            SuggesterParams.SUGGEST_BUILD, \"true\",\n            SuggesterParams.SUGGEST_DICT, \"suggest_blended_infix_suggester\",\n            SuggesterParams.SUGGEST_CONTEXT_FILER_QUERY, \"contexts:ctx2 AND contexts:ctx3\",\n            SuggesterParams.SUGGEST_Q, \"examp\",\n            SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='suggest_blended_infix_suggester']/lst[@name='examp']/int[@name='numFound'][.='1']\"\n    );\n\n\nI hope this satisfies your requirement? ",
            "id": "comment-14679187"
        },
        {
            "date": "2015-08-09T19:59:01+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "This all starts to look good. Auto Analyzer choice for ctx field was a smart move, but should still be overridable I guess. ",
            "id": "comment-14679308"
        },
        {
            "date": "2015-08-10T03:08:16+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hi Jan H\u00f8ydahl.\nI am away for a couple of days but will upload the updated patch ASAP. ..\nThanks. ",
            "id": "comment-14679503"
        },
        {
            "date": "2015-08-10T08:19:34+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Will let others chime in on the param names too. Which one do you like the best?\n\n\tsuggest.contextFilterQuery\n\tsuggest.contextQ\n\tsuggest.fq\n\tsuggest.context.fq\n\n\n\nThe suggest.fq variant would be in line with filters for main query, but does not indicate that it is for context field only, so people could misunderstand and try filter for other fields.\n\nAnother issue is this line in the patch\n\nthrow new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Context Filtering Query not yet supported by \"+lookup.getClass());\n\n\nSolr supports running multiple suggesters in parallel on one call. Should we require that if you want to use the context filtering, all suggesters must support it (like in current patch) or should we fallback to not filtering for the other suggesters. I guess there are use cases that would want both behaviors... ",
            "id": "comment-14679779"
        },
        {
            "date": "2015-08-18T18:18:38+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl.\nSorry I have been away for quite a while.\n\nI have just uploaded an updated version of the patch.\nChanges dones are as follow:\n\n\n\tNo need to pass the query field anymore. the internal AnalyzingInfixSuggester.CONTEXTS_FIELD_NAME is used as query field i.e. the recommended way to filter is just \"ctx2 AND ctx3\" instead of the old way \"contexts:ctx2 AND contexts:ctx3\"\n\n\n\n\n\tMost of the logic for parsing queries has been moved from SuggestComponent.java into SolrSuggester.java\n\n\n\n\n\tMultiple suggester can be configured, each one having a different analyzer for the context field as the query parsing in now done in the SolrSuggester.\n\n\n\n\n\tThe contextAnalyzerFieldType config is optional and by default, the analyzer of the context field will be used\n\n\n\n\n\tThere is a test testContextFilterParamIsIgnoredWhenContextIsNotImplemented() to test that if you send context filtering query to a suggester that does not support context, the filtering is just ignored and suggest return result.\nAlong the same line, there is also a test testContextFilteringIsIgnoredWhenContextIsImplementedButNotConfigured()\nSo, the implementation is more friendly now.\n\n\n\n\n\tSuggester build will throw exception only if you configure context in solrconfig.xml on a suggester that does not support context. But queries still return normally, just the build operation for the concerned suggester fails.\nThere is a test testBuildThrowsIllegalArgumentExceptionWhenContextIsConfiguredButNotImplemented() to cover that\n\n\n\n\n\tbuildAll will fail for all (not just the concerned suggester) if you configure context in solrconfig.xml on a suggester that does not support context\n\n\n\n\n\tRegarding the parameter name. The initial implementation if did used the name suggest.cfq for ContextFilterQuery. Then I looked at suggest.dictionary, suggest.reloadAll etc which are plain English. For now, I have not yet changed the name. I will change it as soon as we agreed on that.\n\n\n\n\nPlease let me know in case I have missed anything you mentioned.\n\nThank you very much.\n\nArcadius ",
            "id": "comment-14701722"
        },
        {
            "date": "2015-08-19T11:05:55+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Somehow, it feels odd to have suggester-agnostic code in relying on SolrSuggester relying on AnalyzingInfixSuggester.CONTEXTS_FIELD_NAME, even if this property is used also by BlendedInfixSuggester. Perhaps this property should be moved to some other Lucene class as a common global name for context field for all analyzers that supports context filtering, even if they don't subclass any of the existing ones? Perhaps the \"Lucene guys\" see a broader picture here? Hard to know what comes in the future...\n\nRegarding a request including suggesters that do not support filtering, I think it depends on its data whether the correct thing is to return an unfiltered response (open data) or to return nothing (sensitive data). Of course, the application has the power to pass suggest.dictionary accordingly if it knows that filtering is done. Alternatively, some suggest.returnUnFilteredSuggestionsIfFilteringIsNotSupported param to control it, I don't know...\n\nIn SolrSuggester#initContextFilterQueryAnalyzer, I think that if CONTEXT_ANALYZER_FIELD_TYPE is explicitly given and wrong, we should fail-fast and throw exception instead of falling back to DocumentDictionaryFactory.CONTEXT_FIELD ",
            "id": "comment-14702856"
        },
        {
            "date": "2015-08-20T22:51:32+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl\n\nThank you very much for your comments.\n\nHave uploaded new version of the patch.\n\nPerhaps this property should be moved to some other Lucene class as a common global name for context field for all analyzers that supports context filtering,...\nI agree and I moved CONTEXTS_FIELD_NAME into Lucene's Lookup.java, meaning that it is now available to all Lookup implemetations.\n\nRegarding a request including suggesters that do not support filtering, I think it depends on its data whether the correct thing is to return an unfiltered response (open data) or to return nothing (sensitive data). Of course, the application has the power to pass suggest.dictionary accordingly if it knows that filtering is done. Alternatively, some suggest.returnUnFilteredSuggestionsIfFilteringIsNotSupported param to control it, I don't know...\nNot quite sure about this:\nLet's take the current solr 5.2.1: \npassing suggest.q=term&suggest.contestFilterQuery=ctx1 will return all suggestions matching the term ignoring ctx1 as context filtering is not yet implemented.\n\nI believe that keeping that behaviour for Lucene Suggesters that have not yet implemented context makes more sense to me.\n\nIn case a user need context filtering to happen on a Lucene suggester not yet supporting filtering, they just need to implement it.\n\nIdeally and eventually, we will have context support for all Lucene suggesters, so I am not quite sure whether  suggest.returnUnFilteredSuggestionsIfFilteringIsNotSupported is the way we should go. \n\n\nI think that if CONTEXT_ANALYZER_FIELD_TYPE is explicitly given and wrong, we should fail-fast and throw exception instead of falling back to DocumentDictionaryFactory.CONTEXT_FIELD\nI had thought a bit more about this.\nI believe that we do not really need the CONTEXT_ANALYZER_FIELD_TYPE config. \nOne just needs to configure the context field in schema.xml with the needed query and index analyzers and all should work.\nIn case one needs different context analyzers for different suggesters, we just need to configure different context fields in schema.xml.\nThis has several advantages:\n\n\tSimpler/less configuration.\n\tCleaner/more readable/less code to maintain.\n\n\n\nIn case I am missing any use-case, please let me know\n\n\nWill let others chime in on the param names too. Which one do you like the best?\nsuggest.contextFilterQuery\nsuggest.contextQ\nsuggest.fq\nsuggest.context.fq\nThe param name is this latest patch is still suggest.contextFilterQuery as we have not agreed yet on the right name to adopt.\nMaybe Robert Muir or Shalin Shekhar Mangar or Varun Thacker  could help here ",
            "id": "comment-14705925"
        },
        {
            "date": "2015-08-21T09:16:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Lucene guys (Michael McCandless et.al) are you happy with moving the constant from AnalyzingInfixSuggester to Lookup and make it public, i.e:?\n\nIndex: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java\n-  protected final static String CONTEXTS_FIELD_NAME = \"contexts\";\nIndex: lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java\n+  public static final String CONTEXTS_FIELD_NAME = \"contexts\";\n\n\nIf you don't want to make the constant part of the public Lucene API, an alternative is to duplicate the constant into org.apache.solr.spelling.suggest.LookupFactory for Solr's use case.\n\nThe param name is this latest patch is still suggest.contextFilterQuery as we have not agreed yet on the right name to adopt\nPerhaps suggest.cfq? \n\nCONTEXT_ANALYZER_FIELD_TYPE\nI'm ok to delay such a param until there is a use case for it.\n\nAnother question is choice of query parser for the context filter query: StandardQueryParser. Does it make sense to parse the context query using Solr's LuceneQParser, to fully support e.g. localParams, or is this just confusing here since we're not querying a Solr index? A use case would be ACLs, where the filter query could be hundreds of ACL terms, where you would be better off doing something like this:\n\n&suggest.cfq={!terms f=contexts}abc,def,ghi\n\n ",
            "id": "comment-14706443"
        },
        {
            "date": "2015-08-24T01:01:26+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl\n\n\n\tI have changed the param name to suggest.cfq\n\n\n\n\n\tthe constant CONTEXTS_FIELD_NAME is still in Lookup.java awaiting confirmation from Michael McCandless\n\n\n\n\n\tRegarding the local params \n\n{!terms f=contexts}abc,def,ghi\n\nI had a look and the local parameter parsing happens in QParser.getParser(String qstr, String defaultParser, SolrQueryRequest req).\nThe current query parser framework relies on the solr schema for the query field and the analyzer.\nIn our case, the analyzer is in the schema but the query/filter field is not.\nI have started implementing this and some reworking is required to reuse the existing  QParser/QParserPlugin\nNote that in the specified case, TermsQParserPlugin generates a ConstantScoreQuery. We will have to wrap this into a BooleanQuery to send it to Lucene as the context filtering supports only BooleanQuery at the moment.\nI would suggest we add the local param feature as an enhancement later if that is OK.\n\n\n\nPlease let me know if there is any other change to be done.\n\nThank you.\n\nArcadius ",
            "id": "comment-14708614"
        },
        {
            "date": "2015-08-24T07:15:54+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Sure, localparams can be a followup ",
            "id": "comment-14708883"
        },
        {
            "date": "2015-08-24T14:28:16+0000",
            "author": "Arcadius Ahouansou",
            "content": "Adding in the test a reference to SOLR-7963 and SOLR-7964 ",
            "id": "comment-14709374"
        },
        {
            "date": "2015-08-26T13:04:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I think this is close to committable. If there are no objections to moving CONTEXTS_FIELD_NAME to Lookup.java by tomorrow, I'll do a round of final reviews & manual testing before committing. ",
            "id": "comment-14713078"
        },
        {
            "date": "2015-08-26T16:18:56+0000",
            "author": "Arcadius Ahouansou",
            "content": "Updated from trunk and added testContextFilterIsTrimmed() ",
            "id": "comment-14714432"
        },
        {
            "date": "2015-09-01T08:26:08+0000",
            "author": "Arcadius Ahouansou",
            "content": "Is there anything (maybe add more tests or do some specified manual testing ) I could do to help get this through ?\nThank you very much.\n\nArcadius. ",
            "id": "comment-14724969"
        },
        {
            "date": "2015-09-09T17:45:58+0000",
            "author": "David Smiley",
            "content": "Looks cool.  IMO Can't we just incorporate SOLR-7963 (support local-params) now?  Solr makes supporting this easy; like a one-liner I think.\n\nPersonally I like the \"suggest.fq\" name best, even considering your rationale as to why not.  No big deal though. ",
            "id": "comment-14737279"
        },
        {
            "date": "2015-09-09T21:38:33+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello David Smiley \nThank you very much for your comment.\n\n\n\tI could change the parameter to suggest.fq if Jan H\u00f8ydahl and others are OK with that. For now, filtering is happening only on the context field, that is why cfq was chosen. But maybe in the future, we may have filtering on any arbitrary field in which case suggest.fq may make more sense? Are you OK Jan H\u00f8ydahl for me to change to fq?\n\n\n\n\n\tAbout SOLR-7963 , yes it could be included here. From first glance, it looks like a 1-liner, but it's not. Please look at my comment above. Or maybe am I missing something? Any contribution would be well appreciated. Note that there is an ignored failing test testLocalTermsQuery() for SOLR-7963 in the current patch\nI found it easier and more manageable to have it as an additional feature in a separate ticket. I wanted to start working on that as soon as this one is committed so that they could go into the very same release.\nI would be more than happy if  David Smiley  wants to help with SOLR-7963\nThanks.\n\n ",
            "id": "comment-14737621"
        },
        {
            "date": "2015-09-09T23:04:24+0000",
            "author": "Arcadius Ahouansou",
            "content": "I have just started work on SOLR-7963 as part of SOLR-7888. I will upload a new patch here when done.\nThanks. ",
            "id": "comment-14737770"
        },
        {
            "date": "2015-09-12T23:26:00+0000",
            "author": "Arcadius Ahouansou",
            "content": "\n\tPatch now includes both SOLR-7888 and SOLR-7963.\n\tThe parameter has been changed to suggest.fq\n\n ",
            "id": "comment-14742261"
        },
        {
            "date": "2015-09-14T13:33:01+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Please don't delete attachments when uploading new ones.\nI think it makes sense to commit a version without localParams support first, as there are still some unresolved issues with that integration:\n\n\tSolr's Qparsers assume that you query the index specified in schema.xml, but we don't\n\tIt is kind of a hack to force Lucene's AnalyzingSuggester to use same contexts field name as the source schema field name we pull data from - it satisfies QParser's need for a DF which exists in schema, but there are more problems:\n\tIf the source fieldType in schema.xml is e.g. text, then that Analyser is used for query, with lowercasing etc. Problem is that the contexts field for the Suggester is always indexed as String, meaning that a source string \"ABC\" will not match a query \"ABC\" since it will be lowercased and match only \"abc\"\n\n\n\nOne solution is to extend Lucene's suggesters to be able to index contexts field with a custom analyzer, given in constructor. Then we could match things up and get it working. However, I don't like the hack of accidentally naming the two fields the same to get QParser working, so ideally we should then create a SuggesterQParser or something which accepts DF not in schema and is explicit about Analysers. But then letting people switch parser with localParam will bring them trouble again since that parser will require the field to exist in schema etc...\n\nSo for now let's analyze the context query as String, using Lucene's query parser, and leave to a future jira to add more flexibility. I'll upload a patch shortly. ",
            "id": "comment-14743511"
        },
        {
            "date": "2015-09-14T13:44:21+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Some details on this patch:\n\n\tChanged back to suggest.cfq\n\tAvoid test-schema changes, use my_contexts_t and my_contexts_s instead\n\tSkip (for now) the configurable contexts field name in Lucene classes\n\tAdd the CONTEXTS_FIELD_NAME constant to AnalyzingInfixLookupFactory to avoid making the Lucene constant public\n\tNow we don't get Solr error code when searching with invalid field names, so I changed the test to instead verify that we get 0 hits.\n\n\n\nQuery analyser is now always created as\n\ncontextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\nIt seems to work well, however not sure if there are use cases where it don't align with the index-analyzer of the Suggester index. ",
            "id": "comment-14743524"
        },
        {
            "date": "2015-09-15T06:39:55+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl\n\nThank you for uploading the updated version.\nI am pretty happy with your changes and I would suggest we go ahead with that.\nThere are few minor changes that are needed:\n\n\t\n-        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n+        SuggesterResult suggesterResult = suggester.getSuggestions(options, rb.req);\n\nThe additional param rb.req was needed only for SOLR-7963, so it can be removed here and in all subsequent methods.\n\tAs we no longer rely on the schema, maybe we should review/rename the test testContextFilterUsesAnalyzerFromSchema()?\n\n\n\nI am not quite sure whether the * Clone of CONTEXTS_FIELD_NAME in AnalyzingInfixSuggester is an excellent idea, but that it very minor.\n\nSo, please let's go ahead with this.\nThank you very much.\n\nI will address your comments regarding SOLR-7963 later on. ",
            "id": "comment-14744939"
        },
        {
            "date": "2015-09-16T06:20:55+0000",
            "author": "Arcadius Ahouansou",
            "content": "Did minor changes suggested earlier:\n\n\tremoved rb.req from methods calls\n\trenamed testContextFilterUsesAnalyzerFromSchema() -> testContextFilterUsesAnalyzer()\n\n ",
            "id": "comment-14746957"
        },
        {
            "date": "2015-10-10T19:02:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1707907 from janhoy@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1707907 ]\n\nSOLR-7888: Analyzing suggesters can now filter suggestions by a context field ",
            "id": "comment-14951992"
        },
        {
            "date": "2015-10-10T19:02:59+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Committed current state to trunk. Let it bake for some time before backport... ",
            "id": "comment-14951993"
        },
        {
            "date": "2015-10-10T22:25:57+0000",
            "author": "Arcadius Ahouansou",
            "content": "Thank you very much Jan H\u00f8ydahl ",
            "id": "comment-14952070"
        },
        {
            "date": "2015-10-12T12:46:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1708103 from janhoy@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1708103 ]\n\nSOLR-7888: Analyzing suggesters can now filter suggestions by a context field (backport) ",
            "id": "comment-14953074"
        },
        {
            "date": "2015-10-12T13:39:48+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Added documentation to refguide: https://cwiki.apache.org/confluence/display/solr/Suggester ",
            "id": "comment-14953126"
        },
        {
            "date": "2015-10-12T20:46:30+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Arcadius Ahouansou and Cassandra Targett, I'd appreciate a review of my changes to the refguide page above. ",
            "id": "comment-14953694"
        },
        {
            "date": "2015-10-13T13:57:36+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl.\n\nThe Wiki looks OK to me.\nI was just wondering whether it is worth adding that the build command will throw an exception if context configuration is added to a suggester that does not support context.\n\nThank you very much. ",
            "id": "comment-14954960"
        },
        {
            "date": "2015-10-13T14:11:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks for the review. It's good to know that you'll get an exception instead of silence, but I don't think it is relevant for the refGuide.. ",
            "id": "comment-14954992"
        },
        {
            "date": "2015-10-15T09:39:38+0000",
            "author": "Arcadius Ahouansou",
            "content": "Thank you very much Jan H\u00f8ydahl for your very valuable help, support and contribution on this issue. ",
            "id": "comment-14958586"
        },
        {
            "date": "2016-07-07T15:24:33+0000",
            "author": "Rajesh Kapur",
            "content": "Hi,\n\nCan we pass multiple fields to be filtered out in ContextField parameter? If yes, please give me example.  ",
            "id": "comment-15366267"
        }
    ]
}