{
    "id": "LUCENE-4080",
    "title": "SegmentReader.numDeletedDocs() sometimes gives an incorrect numDeletedDocs",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA,                                            4.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "At merge time, SegmentReader sometimes gives an incorrect value for numDeletedDocs.\n\nFrom LUCENE-2357:\nAs far as I know, [SegmenterReader.numDeletedDocs() is] only unreliable in this context (SegmentReader passed to SegmentMerger for merging); this is because we allow newly marked deleted docs to happen concurrently up until the moment we need to pass the SR instance to the merger (search for \"// Must sync to ensure BufferedDeletesStream\" in IndexWriter.java) ... but it would be nice to fix that, so I think open a new issue (it won't block this one)? We should be able to make a new SR instance, sharing the same core as the current one but using the correct delCount...\n\nIt would be cleaner (but I think hairier) to create a new SR for merging that holds the correct delCount, but let's do that under the separate issue.\n\nit would be best if the SegmentReader's numDeletedDocs were always correct, but, fixing that in IndexWriter is somewhat tricky. Ie, the fix could be hairy but the end result (\"SegmentReader.numDeletedDocs can always be trusted\") would be cleaner...",
    "attachments": {
        "LUCENE-4080.patch": "https://issues.apache.org/jira/secure/attachment/12533670/LUCENE-4080.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-27T16:29:53+0000",
            "content": "Patch. The SegmentReader returned by getMergeReader now has a correct numDeletedDocuments() and getLiveDocs(). Could someone familiar with Lucene merging internals review this patch?\n ",
            "author": "Adrien Grand",
            "id": "comment-13402332"
        },
        {
            "date": "2012-06-27T16:55:44+0000",
            "content": "I think its cleaner not to have the 'if numDocs >= 0' in SegmentReader ctor#2\nInstead i think ctor #1 should just forward docCount - delCount like ctor#3 ",
            "author": "Robert Muir",
            "id": "comment-13402353"
        },
        {
            "date": "2012-06-27T17:15:50+0000",
            "content": "Also is it ok in mergeMiddle that we call rld.getMergeReader inside the sync?\n\nPreviously, we never did actual i/o here... ",
            "author": "Robert Muir",
            "id": "comment-13402365"
        },
        {
            "date": "2012-06-27T21:19:26+0000",
            "content": "New patch.\n\nOnly the liveDocs/numDeletedDocs copy needs to be protected by the IndexWriter lock. However, the whole method needs to be protected by the ReadersAndLiveDocs lock but we can't nest the former into the latter since other pieces of code do the opposite (potential deadlock). So I replaced the ReadersAndLiveDocs lock with a ReentrantLock so that it can overlap with the IndexWriter lock. Does it look better? ",
            "author": "Adrien Grand",
            "id": "comment-13402561"
        },
        {
            "date": "2012-06-28T11:05:45+0000",
            "content": "I only looked briefly at the patch ... but: could we do the liveDocs/numDeletedDocs copy up above, in IW (syncd), and pass them to RLD.getMergeReader?  Then we don't need to cutover to ReentrantLock? ",
            "author": "Michael McCandless",
            "id": "comment-13403007"
        },
        {
            "date": "2012-06-28T11:14:27+0000",
            "content": "I don't understand the concurrency here but thats what I read from the issue description: my concern was just that its not obvious in the first patch if we are actually just opening an SR with an existing core inside this sync or not, and I dont even know if its a problem  ",
            "author": "Robert Muir",
            "id": "comment-13403011"
        },
        {
            "date": "2012-06-28T11:33:09+0000",
            "content": "@Robert I think this is an issue since one must hold the IndexWriter lock to perform deletes on any segment (cf. assert Thread.holdsLock(writer); in ReadersAndLiveDocs.delete).\n\n@Michael Oh right, I think I understand what you mean. I'll try to produce a better patch. ",
            "author": "Adrien Grand",
            "id": "comment-13403017"
        },
        {
            "date": "2012-06-29T12:20:34+0000",
            "content": "New patch (simpler than the previous ones). This time, I only removed MergeState.IndexReaderAndLiveDocs and modified IndexWriter.mergeMiddle so that it fixes the merge reader in case its del count doesn't match the ReadersAndLiveDocs del count. There shouldn't be more contention as with the current trunk version. ",
            "author": "Adrien Grand",
            "id": "comment-13403867"
        },
        {
            "date": "2012-07-03T23:30:32+0000",
            "content": "New patch looks great!  I like this solution: much simpler.  Maybe just add a comment explaining why we must sometimes make a new reader?  (Ie, that deletes could have snuck in after we pulled the merge reader but before the sync block where we get the live docs)?\n\nIt's nice to simply pass around the reader and not the pair of liveDocs + reader...\n\nWe can remove liveDocs and delCount args to SegmentMerger.add now?\n\n+1, thanks Adrien! ",
            "author": "Michael McCandless",
            "id": "comment-13406168"
        },
        {
            "date": "2012-07-04T10:23:52+0000",
            "content": "Thanks for your feedback, Mike. I just committed (r1357195 on trunk and r1357212 on branch 4.x). ",
            "author": "Adrien Grand",
            "id": "comment-13406422"
        }
    ]
}