{
    "id": "LUCENE-3360",
    "title": "Move FieldCache to IndexReader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Move the static FieldCache.DEFAULT field instance to atomic IndexReaders, so that FieldCache insanity caused by the WeakHashMap no longer occurs.\n\n\tAdd a new method to IndexReader that by default throws an UOE:\n\npublic FieldCache getFieldCache()\n\n\tThe SegmentReader implements this method and returns its own internal FieldCache implementation. This implementation just uses a HashMap<Entry<T>,Object>> to store entries.\n\tThe SlowMultiReaderWrapper implements this method as well and basically behaves the same as the current FieldCacheImpl.\n\n\n\nThis issue won't solve the insanity that comes from inconsistent usage of a single field (for example retrieve both int[] and DocTermIndex for the same field).",
    "attachments": {
        "LUCENE-3360.patch": "https://issues.apache.org/jira/secure/attachment/12489344/LUCENE-3360.patch",
        "LUCENE-3360-3x.patch": "https://issues.apache.org/jira/secure/attachment/12492145/LUCENE-3360-3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-04T08:52:10+0000",
            "content": "Most of the work will be changing the code that is using FieldCache.DEFAULT field to use the IndexReader.getFieldCache() method.I found 92 usages of the FieldCache.DEFAULT field in both production and test code. ",
            "author": "Martijn van Groningen",
            "id": "comment-13079279"
        },
        {
            "date": "2011-08-04T08:56:39+0000",
            "content": "That sounds great.\n\nWe could even backport this to Lucene 3.x and simply make a backwards fake FieldCache.DEFAULT impl that delegates to the IndexReader that is passed in to getInts() & others. ",
            "author": "Uwe Schindler",
            "id": "comment-13079283"
        },
        {
            "date": "2011-08-04T08:58:57+0000",
            "content": "Of course we should check the SegmentReader code to reuse FieldCache instances on reopen, when just the deleted docs changed by reopening. Also clone should simply reuse the fieldcache in the SegmentReader clone (that is what reopen does in this case). ",
            "author": "Uwe Schindler",
            "id": "comment-13079286"
        },
        {
            "date": "2011-08-04T09:08:21+0000",
            "content": "Good idea. Backporting this to Lucene 3.x seems like a good plan if we make a fake FieldCache.DEFAULT impl that delgates to IR.\nYes, we should reuse the fieldcache in case of a reopen. I see that reopenSegement just instantiates a new SegmentReader instance, so we can just pass the existing FieldCache instance to the new SegementReader instance. ",
            "author": "Martijn van Groningen",
            "id": "comment-13079290"
        },
        {
            "date": "2011-08-04T13:08:05+0000",
            "content": "Attached initial draft patch. This is untested code and is just to see if the plan pans out.\n\nMaybe we should move FieldCache and FieldCacheImpl to the cache package inside the search package. Also maybe ToplevelFieldCache is a better name for FieldCacheImpl. ",
            "author": "Martijn van Groningen",
            "id": "comment-13079368"
        },
        {
            "date": "2011-08-04T13:25:37+0000",
            "content": "Tiny, nice! I most like the readerFinishedListeners that purge the cache!\n\nI would suggest to add a new interface/abstract class for the per-Reader FieldCaches, as we currently have the stupid extra IndexReader param in the interface. The current FieldCacheImpl/FieldCache interface in the search package should be removed. The new one could have same name in the index package.\n\nI would move the current FieldCacheImpl code to the SlowMultiReaderWrapper (with the new interface) and leave the deprecated FieldCache/FieldCacheImpl in search with just delegating like this, but no actual impls:\n\n\nint[] FieldCacheImpl#getInts(IndexReader reader, String field) throws IOException {\n  return new SlowMultiReaderWrapper(reader).getFieldCache().getInts(field);\n}\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13079373"
        },
        {
            "date": "2011-08-05T03:02:34+0000",
            "content": "See also...\n\n\n\tLUCENE-831 - the first issue (i know of) to discuss flipping the relationship between FieldCache and IndexReader (but got hung up on other things, particularly how reopen would affect this)\n\tLUCENE-1785 - where thought was put into how to merge FieldCaches when Segments are merged\n\tLUCENE-2665 - where a lot of work was already done to think about the \"right\" FieldCache API\n\n ",
            "author": "Hoss Man",
            "id": "comment-13079771"
        },
        {
            "date": "2011-08-05T05:14:20+0000",
            "content": "Also this discussion http://search.lucidimagination.com/search/document/d158b489c71f31d1/indexreader_cache_a_different_angle about a general cache hooks as part of IndexReader, where FieldCache is just one type of Cache.\n\nI think that the distance between putting FieldCache in IndexReader to allow plugging-in any Cache is very small, and does not require much more efforts.\n\nFor some reason though, I have a feeling that on all the issues / discussions, we don't seem to get to a resolution about how best to do it. Is it just a matter of putting up a patch with a proposed impl and proceed from there? ",
            "author": "Shai Erera",
            "id": "comment-13079793"
        },
        {
            "date": "2011-08-05T09:05:42+0000",
            "content": "Thanks Hoss - Lots of issues related to the FieldCache! I got some reading to do \n\nI think that the distance between putting FieldCache in IndexReader to allow plugging-in any Cache is very small, and does not require much \nmore efforts.\nI like the idea of a general cache. However I think we should do very small steps at the time. All these issues / proposals include a lot of changes and I think we have a bigger chance to commit something if we take small steps. So we could add the cache infrastructure to the IndexReader in a separate issue after this issue has been resolved. \n\n(but got hung up on other things, particularly how reopen would affect this)\nIn this draft patch in case of a reopen / clone the new SegmentIndexReader just gets the FieldCache instance from the previous SegmentIndexReader.\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13079860"
        },
        {
            "date": "2011-08-05T11:37:06+0000",
            "content": "I agree that small steps are better, and that the general Cache infrastructure does not depend nor block this issue. Was just pointing it out as another reference for the IR -> Caching issues. ",
            "author": "Shai Erera",
            "id": "comment-13079915"
        },
        {
            "date": "2011-08-05T21:45:36+0000",
            "content": "I agree we should proceed with amoeba-steps here: FieldCache has been a tar pit in the past!! ",
            "author": "Michael McCandless",
            "id": "comment-13080249"
        },
        {
            "date": "2011-08-09T23:34:32+0000",
            "content": "Updated the patch with Uwe's suggestions. There is still a lot to be done. \n\nJust a few things:\n\n\tFieldCache contains a number of public inner classes. Since the FieldCache is now deprecated I'm not sure where to put these classes.\n\tI named the per segment FieldCache interface AtomicFieldCache for now.\n\tI think that lucene.search.cache is a better place for this AtomicFieldCache and its implementation than lucene.index package.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13081997"
        },
        {
            "date": "2011-08-10T04:36:33+0000",
            "content": "I named the per segment FieldCache interface AtomicFieldCache for now.\n\nPerhaps SegmentFieldCache?\n\nI think that lucene.search.cache is a better place for this AtomicFieldCache and its implementation than lucene.index package.\n\nI agree. FieldCache is used mostly for search purposes. ",
            "author": "Shai Erera",
            "id": "comment-13082132"
        },
        {
            "date": "2011-08-10T09:24:14+0000",
            "content": "SegmentFieldCache seems like a better name. ",
            "author": "Martijn van Groningen",
            "id": "comment-13082248"
        },
        {
            "date": "2011-08-16T19:00:20+0000",
            "content": "Attached an updated patch.\n\n\tRenamed AtomicFieldCache to SegmentFieldCache\n\tUpdated to the latest changes in trunk. (FieldCache was changed)\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13085903"
        },
        {
            "date": "2011-08-17T12:20:08+0000",
            "content": "I actually prefer the name AtomicFieldCache, since this matches other\nplaces (eg. AtomicReaderContext), and because it's not necessarily a\nsegment (SlowMultiReaderWrapper returns an instance).\n\nThe name SegmentFieldCacheImpl seems OK, but can't this class be\npackage private?\n\nI love the name InsaneFieldCache!\n\nFor the new IR.getFieldCache() instead of a \"generic\" UOE can we throw\nsomething like MR.fields() throws?  Ie the exc message should explain\nthat you should use the SlowMRWrapper instead.\n\nI'm nervous about how the [deprecated] FC makes a new SlowMRWrapper()\nfor each getXXX call \u2013 I think this class uses \"this\" as the\ngetFieldCacheKey?  Won't this mean each lookup will build a new cache\nentry?  (Hmm... but then why don't tests fail... I think we have at\nleast one test verifying same instance is returned for 2 calls in a\nrow). ",
            "author": "Michael McCandless",
            "id": "comment-13086258"
        },
        {
            "date": "2011-08-17T12:24:33+0000",
            "content": "\nFor the new IR.getFieldCache() instead of a \"generic\" UOE can we throw\nsomething like MR.fields() throws? Ie the exc message should explain\nthat you should use the SlowMRWrapper instead.\n\nYeah, can we force the user to make their own SlowMultiReaderWrapper? I don't think we should ever create such things, even for deprecated stuff in 4.0\n\nIn 4.0 we just change the API and make you create it yourself. ",
            "author": "Robert Muir",
            "id": "comment-13086260"
        },
        {
            "date": "2011-08-17T12:46:29+0000",
            "content": "In 4.0 we just change the API and make you create it yourself. ",
            "author": "Michael McCandless",
            "id": "comment-13086275"
        },
        {
            "date": "2011-08-17T12:46:36+0000",
            "content": "In 4.0 we just change the API and make you create it yourself.\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-13086276"
        },
        {
            "date": "2011-08-17T12:51:11+0000",
            "content": "\nI actually prefer the name AtomicFieldCache, since this matches other\nplaces (eg. AtomicReaderContext), and because it's not necessarily a\nsegment (SlowMultiReaderWrapper returns an instance).\nFor naming consistency I agree with you there. I will make the SegmentFieldCacheImpl package private. I kept it in the patch it public, b/c FieldCacheImpl was public too.\n\n\nI'm nervous about how the [deprecated] FC makes a new SlowMRWrapper()\nfor each getXXX call \u2013 I think this class uses \"this\" as the\ngetFieldCacheKey? Won't this mean each lookup will build a new cache\nentry? (Hmm... but then why don't tests fail... I think we have at\nleast one test verifying same instance is returned for 2 calls in a\nrow).\nThe current FielCache api requires a reader to be specified. That specified reader is used as key.\n\nI love the name InsaneFieldCache!\nI love the name too \n\nIn 4.0 we just change the API and make you create it yourself.\nSo remove [deprecated] FieldCache completely? When back porting to 3x we obviously need to keep FieldCache classes...\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13086278"
        },
        {
            "date": "2011-08-17T13:09:55+0000",
            "content": "The current FielCache api requires a reader to be specified. That specified reader is used as key.\n\nAhh I see \u2013 the SlowMRWrapper's FC impl uses the \"in\" (wrapped IndexReader, from FilterIndexReader) as the key.  So we should only see one cache entry created.  Phew!\n\nWhen back porting to 3x we obviously need to keep FieldCache classes...\n\nTrue... so maybe do this patch in 2 steps?  First, for 3.x.  Then, merge to trunk, remove deprecated FC and fix all usages? ",
            "author": "Michael McCandless",
            "id": "comment-13086291"
        },
        {
            "date": "2011-08-17T13:20:54+0000",
            "content": "Thanks, for taking care! I am a little bit over-crowded with summer-holidays  ",
            "author": "Uwe Schindler",
            "id": "comment-13086295"
        },
        {
            "date": "2011-08-17T18:26:46+0000",
            "content": "True... so maybe do this patch in 2 steps? First, for 3.x. Then, merge to trunk, remove deprecated FC and fix all usages?\nProposal: Get everything to work with the current deprecated FieldCache. Port to working code to 3x. Remove deprecated FieldCache from trunk and move its inner classes (like DocTermsIndex) to search.cache. \n\nFieldCache has also some static *_PARSER fields that are used in the *ValuesCreator classes. I think these fields should move to *ValuesCreator classes as private fields. Besides the tests these fields are only used in *ValuesCreator classes. ",
            "author": "Martijn van Groningen",
            "id": "comment-13086494"
        },
        {
            "date": "2011-08-17T18:31:54+0000",
            "content": "FieldCache has also some static *_PARSER fields that are used in the *ValuesCreator classes. I think these fields should move to *ValuesCreator classes as private fields. Besides the tests these fields are only used in *ValuesCreator classes.\n\nThey should only be public available... If ValueCreate classes are package private then its not good. The parsers are oftenh used when the field type is know before. E.g. to circumvent problems where the autodetection of old-style toString() numeric fields vs. NumericField is needed. So I always specify the NF parser explicitely on FieldCache.getLong(IR, Parser). Or is this no longer the case? ",
            "author": "Uwe Schindler",
            "id": "comment-13086497"
        },
        {
            "date": "2011-08-17T20:32:09+0000",
            "content": "E.g. to circumvent problems where the autodetection of old-style toString() numeric fields vs. NumericField is needed.\nYou mean this problem in LongValuesCreator#fillLongValues:\n\n  if( parser == null ) {\n      try {\n        parser = FieldCache.DEFAULT_LONG_PARSER;\n        fillLongValues( vals, reader, field );\n        return;\n      }\n      catch (NumberFormatException ne) {\n        vals.parserHashCode = null; // wipe the previous one\n        parser = FieldCache.NUMERIC_UTILS_LONG_PARSER;\n        fillLongValues( vals, reader, field );\n        return;\n      }\n    }\n\n\n\nAnyway we can make these *_PARSER fields publicly available. Would the search.cache.parsers package be a good location? ",
            "author": "Martijn van Groningen",
            "id": "comment-13086570"
        },
        {
            "date": "2011-08-17T20:32:48+0000",
            "content": "Added a new version of patch.\n\n\tRenamed SegmentFieldCache to AtomicFieldCache.\n\tSegementFieldCacheImpl is now package protected. This class has been moved to lucene.index package.\n\tAdded TestSegmentFieldCacheImpl test.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13086571"
        },
        {
            "date": "2011-08-17T20:44:04+0000",
            "content": "You mean this problem in LongValuesCreator#fillLongValues:\n\nYes, same for the other types! ",
            "author": "Uwe Schindler",
            "id": "comment-13086580"
        },
        {
            "date": "2011-08-28T21:18:00+0000",
            "content": "Updated patch to latest changes in trunk.\nI'm busy with the 3x backport, but since the FieldCacheImpl versions between trunk and 3x it took me longer than I expected.\n\nI think once the 3x version is ready (coming days or so) we can commit this patch also. \nAfter that we can work towards removing the current FC from trunk and moving the classes inside FieldCache class to proper locations (like search.cache package). ",
            "author": "Martijn van Groningen",
            "id": "comment-13092551"
        },
        {
            "date": "2011-08-29T21:41:08+0000",
            "content": "Attached patch for 3x branch.\nThe major difference between 3x and trunk:\n\n\tDocTerms is String[] and DocTermsIndex is StringIndex in 3x branch.\n\tIn 3x SlowMultiReaderWrapper is only available for tests. I moved it to core. In 3x SlowMultiReaderWrapper extends MultiReader whereas in trunk SlowMultiReaderWrapper extends FilterIndexReader.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13093233"
        },
        {
            "date": "2011-09-12T20:18:34+0000",
            "content": "Small update. During testing SOLR-2066 I noticed that unnecessary ReaderFinishedListener instances were created in SlowMultiReaderWrapper (I had a OOME). This is fixed now.   ",
            "author": "Martijn van Groningen",
            "id": "comment-13102997"
        },
        {
            "date": "2011-09-25T19:49:49+0000",
            "content": "Attached an updated version for trunk. \n\n\tFieldCache and FieldCacheImpl have been removed completely from the source code.\n\tDocTerms and DocTermsIndex have been moved to o.a.l.search.cache\n\tParsers have been moved to o.a.l.search.cache.parser\n\tFunctionality that relies on top level caches (e.g. faceting and some functions) now uses SlowMultiReaderWrapper: \n\nnew SlowMultiReaderWrapper(topReader).getFieldCache()\n\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13114343"
        },
        {
            "date": "2011-09-25T20:36:49+0000",
            "content": "Hi Martijn,\n\nnice work! But I would recommend to wait with commiting those changes. We redo FieldCache for 3.x and wanted to forward-port that to trunk, as the FieldCache implementation is very complicated there: LUCENE-3443\n\nI think we should work together and solve the stuff identical like in 3.x, but bound to IndexReader. ",
            "author": "Uwe Schindler",
            "id": "comment-13114358"
        },
        {
            "date": "2011-09-25T21:40:50+0000",
            "content": "Makes sense to wait to commit this change for trunk. I've updated the 3x version of the patch with latest changes in 3x. This version only deprecates FC. ",
            "author": "Martijn van Groningen",
            "id": "comment-13114375"
        },
        {
            "date": "2011-09-30T12:09:42+0000",
            "content": "Updated patch for 3x. All tests pass on my machine. Most references to FieldCache.DEFAULT are removed and replaced by IR.getFieldCache() or new SlowMultiReader(r).getFieldCache ",
            "author": "Martijn van Groningen",
            "id": "comment-13118008"
        },
        {
            "date": "2011-09-30T12:42:20+0000",
            "content": "Looks great Martijn!\n\nOn waiting for trunk, why not land this first and then do LUCENE-3443 after?  Or is there a patch for LUCENE-3443?  Seems like we shouldn't hold off committing this to trunk just because LUCENE-3443 is pending unless we actually have a patch for it... ",
            "author": "Michael McCandless",
            "id": "comment-13118026"
        },
        {
            "date": "2011-09-30T13:14:56+0000",
            "content": "I don't see a patch for LUCENE-3443 yet. Maybe we can forward port this issue including FieldCache.getDocsWithField() to trunk?  ",
            "author": "Martijn van Groningen",
            "id": "comment-13118043"
        },
        {
            "date": "2011-09-30T13:26:20+0000",
            "content": "Maybe we can forward port this issue including FieldCache.getDocsWithField() to trunk?\n\nThat was the plan. But first we need to revert the current impl in trunk  ",
            "author": "Uwe Schindler",
            "id": "comment-13118048"
        },
        {
            "date": "2011-09-30T17:02:24+0000",
            "content": "That was the plan. But first we need to revert the current impl in trunk \nI think I missed that. Can you point to the code and svn revision in trunk? ",
            "author": "Martijn van Groningen",
            "id": "comment-13118192"
        },
        {
            "date": "2011-11-13T18:26:39+0000",
            "content": "I think this can proceed, now that LUCENE-3443 is done! ",
            "author": "Michael McCandless",
            "id": "comment-13149326"
        },
        {
            "date": "2012-02-23T08:30:10+0000",
            "content": "wow, lots has changed since the last patch!  I think all the reader/cache refactoring has settled down, so this would be good to get sorted soon.\n\nI ran it through the LUCENE-3753.patch.hack.pl but there are enough changes, that it is significant work to resurrect from the patch; it may be more effective to refactor the code.\n\nMartijn, you interested in picking this up again?  If no, i may give it a try. ",
            "author": "Ryan McKinley",
            "id": "comment-13214451"
        },
        {
            "date": "2012-02-23T08:59:42+0000",
            "content": "Hi Ryan! Yeah, a lot has changed since the last patch. This issue is on my task list, however so are other issues. I was planning to pick this in the coming weeks. If you have time now it would be great to continue the work on this issue now. To sooner we get rid of the FieldCache#DEFAULT the better! ",
            "author": "Martijn van Groningen",
            "id": "comment-13214473"
        },
        {
            "date": "2012-02-23T11:48:35+0000",
            "content": "FieldCache only takes AtomicReader now... so the insanity trap is already removed in trunk.\n\nWe have alternative ways to 'fieldcache' at index-time, by using SortedBytes docvalues field.\nI was originally skeptical of SortedBytes (especially given its initial impl problems), but its\nbeen cleaned up a lot recently, I think its the direction should really move forwards to.\n\nThere is also progress on more efficient implementations by doing more at indexing time: e.g. \nLUCENE-3729\n\nAs an \"index\" the idea is to compute things up-front so that searches are faster: I don't\nthink lucene core needs to support 'uninverting at runtime' ?!\n\nSo I think we should start a plan for how FieldCache can be moved to contrib or deprecated instead. ",
            "author": "Robert Muir",
            "id": "comment-13214565"
        },
        {
            "date": "2012-02-23T13:05:22+0000",
            "content": "Hi,\nin my opinion, the whole FieldCache is obsolete somehow, since we have DocValues in trunk. If we still want some \"on-the-fly uninverting\", we can simply expose that as another \"DocValues\" impl. Why does FieldCache needs to be separate? DocValues is the API and FieldCache can simply be another impl of that, not materialized on disk.\n\nOne cool thing about a separate \"FieldCache DocValues\" impl would be that you could merge... Means: A 3.x index without DocValues could on the next merge be a 4.x segment with DocValues that were merged on the fly from the 3.x index by uninverting  For trunk indexes we require docvalues to facet, group, sort,... The 3.x codec would simply simulate that by doing uninversion. Once those old 3.x segments are merged to new 4.x segments, docvalues materialize from the \"on-they-fly 3.x fieldcache docvalues\". ",
            "author": "Uwe Schindler",
            "id": "comment-13214609"
        },
        {
            "date": "2012-02-26T17:12:12+0000",
            "content": "+1 for FieldCache being an impl of DocValues. ",
            "author": "Bill Bell",
            "id": "comment-13216794"
        },
        {
            "date": "2012-02-28T20:24:47+0000",
            "content": "Closing this issue since it would only couple the FieldCache and IndexReader instead to decouple this for the new direction that is being explored in LUCENE-3729. ",
            "author": "Martijn van Groningen",
            "id": "comment-13218578"
        }
    ]
}