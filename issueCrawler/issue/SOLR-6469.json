{
    "id": "SOLR-6469",
    "title": "Solr search with multicore + grouping + highlighting cause NPE",
    "details": {
        "affect_versions": "4.8.1",
        "status": "Reopened",
        "fix_versions": [],
        "components": [
            "highlighter",
            "multicore",
            "SearchComponents - other"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Integration of Grouping + shards + highlighting cause NullPointerException.\n\nQuery: localhost:8983/solr/Global_A/select?q=%2Btext%3A%28shay*%29+&rows=100&fl=id%2CobjId%2Cnull&shards=http%3A%2F%2F127.0.0.1%3A8983%2Fsolr%2F0_A%2Chttp%3A%2F%2F127.0.0.1%3A8983%2Fsolr%2FGlobal_A&group=true&group.query=name_s%3Ashay&sort=name_s_sort+asc&hl=true\n\nresults:\njava.lang.NullPointerException\n at org.apache.solr.handler.component.HighlightComponent.finishStage(HighlightComponent.java:189)\n at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:330)\n at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n at org.apache.solr.core.SolrCore.execute(SolrCore.java:1952)\n at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:774)\n at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\n at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\n at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\n at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\n at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\n at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\n at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n at org.eclipse.jetty.server.Server.handle(Server.java:368)\n at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\n at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)\n at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)\n at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)\n at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\n at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\n at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n at java.lang.Thread.run(Thread.java:722)",
    "attachments": {
        "SOLR-6469.patch": "https://issues.apache.org/jira/secure/attachment/12677099/SOLR-6469.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Anurag Sharma",
            "id": "comment-14176074",
            "date": "2014-10-18T18:16:45+0000",
            "content": "A failing unit test describing the scenario could speed up the fix "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14176275",
            "date": "2014-10-19T10:59:11+0000",
            "content": "Shay:\nCan you upload the configuration files and steps to reproduce the NPE "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14184053",
            "date": "2014-10-25T10:51:14+0000",
            "content": "Highlighter component assumes that rb.resultIds has a valid data and is not null. When query is formed in shard+grouping+highlight case rb.resultIds is coming as null because in groupedFinishStage  after merging groups resultIds becomes reinitialized and old ids are lost. So at the time of highlighting it throw NPE.\n\nAttaching the patch that fixes the issue but it's without a unit test. Tested the fix directly on server and it doesn't show NPE any more. While writing the Unit test facing issue of running the shard. Here is the unit test code snippet:\n\n+      assertQ(\"Shards+highlight+Grouping\", \n+          req(CommonParams.Q, \"text:(AAA)\", \n+              CommonParams.QT, \"/elevate\",\n+              CommonParams.SORT, \"id asc\",\n+              GroupParams.GROUP_SORT, \"id asc\", \n+              GroupParams.GROUP_QUERY,\"text:AAA\",\n+              GroupParams.GROUP, \"true\",\n+              CommonParams.FL, \"id\",\n+              HighlightParams.HIGHLIGHT,\"true\",\n+              ShardParams.SHARDS,\"localhost/solr/elevated\")\n+          ,\"//lst[@name='highlighting']\"\n+          );\n\n\n\nPlease suggest if anyone knows how to write unit test for this case. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14226171",
            "date": "2014-11-26T13:25:06+0000",
            "content": "I don't think this bug is valid anymore or the fix is wrong\nreplacing \n\nrb.resultIds = new HashMap<>();\n\n\n with\n\n if(rb.resultIds == null) {\n        rb.resultIds = new HashMap<>();\n  }\n\n\n\n\ncannot fix an NPE\n\nIs there a way to reproduce this ? "
        },
        {
            "author": "Michael Ryan",
            "id": "comment-14233501",
            "date": "2014-12-03T20:45:38+0000",
            "content": "We ran into this exception today on Solr 4.9.0, though for a slightly different reason. Simplified request looks like this:\nq=*:*&fl=articleId&rows=1&hl=true&shards=foo1,foo2\n\nThe workaround in this case is to either request additional fields besides the unique key field, or to not request highlighting.\n\nThis hits the same NPE at HighlightComponent.java:189. It throws an NPE because more highlighting data is returned from the shards than are in resultIds. This happens because onePassDistributedQuery is set to true in QueryComponent, and so the highlight data is requested from the shards on the first (single) pass.\n\nThe NPE is easy enough to fix for my issue - just add a null check before sdoc is used, and skip it if null. But there is still an underlying inefficiency - many more docs are highlighted on the shards than are actually necessary. If you have a lot of shards, this highlighting becomes non-trivial (e.g., highlighting thousands of docs instead of hundreds). I don't see any way to fix this without doing a second pass. Maybe ignore onePassDistributedQuery if highlights are requested? (That'll make the distributed logic in QueryComponent/HighlightComponent even more fun.)\n\nShould I create another Jira for my issue since it doesn't involve grouping? "
        },
        {
            "author": "Dean Gurvitz",
            "id": "comment-15681727",
            "date": "2016-11-20T19:50:47+0000",
            "content": "This problem was fixed in SOLR-8340, as also described in the issue SOLR-8060 - 5.3.2 & 5.4 fix versions can be added here.\nWe ran into the same  problem as Michael Ryan described using a Solr 4.10.1 cluster: only when we requested solely the unique key field and highlighting was true did we get the error. After some research, we found the bug was in the finishStage() method of HighlightComponent, in the following part:\nBar.java\nShardDoc sdoc = rb.resultIds.get(id);\nint idx = sdoc.positionInResponse;\n\n\nas sdoc can sometimes be null. SOLR-8340 changed this bit of code appropriately. "
        }
    ]
}