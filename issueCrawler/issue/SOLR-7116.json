{
    "id": "SOLR-7116",
    "title": "Facet refinement shard request should disable other faceting types",
    "details": {
        "components": [
            "faceting"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.1"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "While examining FacetComponent in the process of adding the new facet.heatmap faceting type, I observed that distributed shard refinement requests were built by copying the existing parameters and then modifying ones pertinent to facet.field or facet.pivot depending on the type of refinement requests (which in turn only happens some of the time, not too often).  Those are the only types of faceting that have a refinement phase.  These refinement requests should not have facet.query, facet.date, facet.range, facet.interval, or facet.heatpmap since they don't participate in refinement... and furthermore, facet.field and facet.pivot have their own dedicated refinement requests and so a facet.field request should not have options for facet.pivot.  But this isn't taken care of, just facet.query is removed.",
    "attachments": {
        "SOLR-7116__facet_refinement_opt.patch": "https://issues.apache.org/jira/secure/attachment/12698943/SOLR-7116__facet_refinement_opt.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-15T02:16:03+0000",
            "author": "David Smiley",
            "content": "The attached patch fixes the problem.  When a refinement request is being created for facet.field or facet.pivot, it removes the main facet types first now with a little utility method, before subsequently adding the parameters it needs.  I also saw that in the event there is a need to do a facet.pivot refinement but not a facet.field refinement, it seems to create and add a new shard request for facet.field anyway (with essentially no search options), so I fixed that.\n\nTo observe the problem, I locally hacked TestDistributedSearch and added debug=track to observe what happens when I combine a facet.field request that needs refinement with range faceting. And indeed the refinement request did the range faceting pointlessly.  I guess I could add a proper test for this by examining debug=track.\n\nAs an aside, I can't help but feel FacetComponent needs a re-architecture, along with its tests such that these things can be combined without the code for each being intertwined, and to enable random testing of different types of faceting together instead of testing these purely in isolation.\n\nChris Hostetter (Unused) would you mind looking at the patch?  It's small. ",
            "id": "comment-14321783"
        },
        {
            "date": "2015-02-17T23:53:42+0000",
            "author": "Hoss Man",
            "content": "skimming the patch looks ok to me ... one point to clarify...\n\n... furthermore, facet.field and facet.pivot have their own dedicated refinement requests and so a facet.field request should not have options for facet.pivot. ...\n\nthat's not entirely true.  The point behind a lot of the shard request logic is to try and share requests to the shards whenever possible.  just like we piggy back facet facet refinement on PURPOSE_GET_FIELDS if we can find one, we also try to combine facet.field refinement with facet.pivot refinement if both are in use.\n\nso for example, if you have a request with facet.field=XX&facet.pivot=YY,ZZ then you should see one request each shard with both facet.field=XX and facet.pivot=YY refinements requested at the same time \u2013 then once YY has been refined, a second request to every shard with facet.pivot=YY,ZZ refinements. (ie: only 2 total refinement request to each shard, not 3)\n\nI think from looking at your patch, this should still be true? did you try this in your manual tests?\n\nI guess I could add a proper test for this by examining debug=track.\n\nI've thought about trying to do whitebox tests to verify that a single cloud request triggers the expected shard requests, but i could never figure out a decent idea for how to do it w/o a lot of complex \"mocking\" up of solr ... if you've got an idea in mind, please open an issue with your thoughts. ",
            "id": "comment-14325154"
        },
        {
            "date": "2015-02-20T08:19:19+0000",
            "author": "David Smiley",
            "content": "I think from looking at your patch, this should still be true? did you try this in your manual tests?\n\nI did not; and I don't believe it will do what you say for the refinement phase because (a) the code declared that it doesn't do this for refinement requests \u2013 see handleResponses() \u2013 an excerpt is below.  and (b) my reading of the code for distributedProcess() shows new ShardRequest happening and it's only used for facet.field refinement, and enqueuePivotFacetShardRequests() creates its own as well just for pivot refinement.  My patch doesn't change that.\n\n\n      // at present PURPOSE_REFINE_FACETS and PURPOSE_REFINE_PIVOT_FACETS\n      // don't co-exist in individual requests, but don't assume that\n      // will always be the case\n\n\n\nThat said; I'm sure you know this confusing code more than I do and I would not be too surprised to find out my understanding is wrong.\n\np.s. I'm on vacation this week so sorry for any delayed replies ",
            "id": "comment-14328670"
        },
        {
            "date": "2015-02-20T21:16:52+0000",
            "author": "Hoss Man",
            "content": "I'm almost certainly wrong.\n\n(I have much more faith in the correctness of comments i put in the code when i wrote it, then in my own memory of the code) ",
            "id": "comment-14329564"
        },
        {
            "date": "2015-02-21T07:09:55+0000",
            "author": "David Smiley",
            "content": "Okay.  Then I plan to commit this ~Tuesday unless you have feelings to the contrary (e.g. it's not ready, needs more testing).\n\nCHANGES.txt proposed text:\n\nSOLR-7116: Distributed facet refinement requests would needlessly compute other types of faceting that have already been computed. (David Smiley, Hossman) ",
            "id": "comment-14330051"
        },
        {
            "date": "2015-02-25T04:42:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662167 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1662167 ]\n\nSOLR-7116: Distrib facet refinement shouldn't re-compute other facet types ",
            "id": "comment-14335992"
        },
        {
            "date": "2015-02-25T04:45:16+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662168 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662168 ]\n\nSOLR-7116: Distrib facet refinement shouldn't re-compute other facet types ",
            "id": "comment-14335993"
        },
        {
            "date": "2015-02-25T04:47:17+0000",
            "author": "David Smiley",
            "content": "FYI the committed version contains some small refactoring for code clarity; there is no real change. ",
            "id": "comment-14335996"
        },
        {
            "date": "2015-02-25T08:58:41+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "FYI David, I'm working on SOLR-7147 where you can track individual shard requests to assert in your tests. ",
            "id": "comment-14336251"
        },
        {
            "date": "2015-02-25T15:28:33+0000",
            "author": "David Smiley",
            "content": "Thanks for the FYI Shalin.  I'll look into adding a test for this issue at some point. ",
            "id": "comment-14336627"
        },
        {
            "date": "2015-04-15T00:30:34+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495316"
        }
    ]
}