{
    "id": "LUCENE-7381",
    "title": "Add new RangeField",
    "details": {
        "resolution": "Done",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "New Feature"
    },
    "description": "I've been tinkering with a new Point-based RangeField for indexing numeric ranges that could be useful for a number of applications.\nFor example, a single dimension represents a span along a single axis such as indexing calendar entries start and end time, 2d range could represent bounding boxes for geometric applications (e.g., supporting Point based geo shapes), 3d ranges bounding cubes for 3d geometric applications (collision detection, 3d geospatial), and 4d ranges for space time applications. I'm sure there's applicability for 5d+ ranges but a first incarnation should likely limit for performance.",
    "attachments": {
        "LUCENE-7381.patch": "https://issues.apache.org/jira/secure/attachment/12817959/LUCENE-7381.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15377120",
            "author": "Nicholas Knize",
            "date": "2016-07-14T15:32:46+0000",
            "content": "Initial patch for adding a new RangeField to sandbox that indexes ranges up to 4 dimensions representing:\n\n\n\t1d : single axis\n\t2d : bounding box\n\t3d : bounding cube\n\t4d : tesseract\n\n\n\nA new RangeFieldQuery class is also added that supports intersects, within, and contains query.\n\nMultiple range values per document is supported, as well as indexing and querying open ended ranges using Double.NEGATIVE_INFINITY and Double.POSITIVE_INFINITY. \n\nRandom testing (inspired by the rigorous testing in BaseGeoPointTestCase) is also provided. It currently tests only 2 dimensions so support for random dimension testing still needs to be added.\n\nNearly all of the Point based fields end with Point but I thought RangePoint and RangePointQuery might be a bit too confusing with PointRangeQuery. (naming is hard. the field type can always be refactored) "
        },
        {
            "id": "comment-15378066",
            "author": "Michael McCandless",
            "date": "2016-07-14T18:27:09+0000",
            "content": "Hmm do we really need to add the new enum value CELL_CONTAINS_QUERY to PointValues.Relation?  This is dangerous: it means the numerous places that now switch on this enum value must handle it.  Can we make a new enum used only by this new query instead?\n\nAlso, its javadoc has a typo. "
        },
        {
            "id": "comment-15379943",
            "author": "Nicholas Knize",
            "date": "2016-07-15T19:12:49+0000",
            "content": "Thanks Michael McCandless!\n\nCan we make a new enum used only by this new query instead?\n\nSure thing. Done. I also added random dimension testing to TestRangeFieldQueries.\n\nThis should be ready. "
        },
        {
            "id": "comment-15383614",
            "author": "Nicholas Knize",
            "date": "2016-07-19T05:55:58+0000",
            "content": "Updated patch:\n\n\n\tFixes a bug found in the RangeFieldQuery relation logic where equal ranges were not being returned with intersects, contains, and within queries (adds explicit test for equals in testBasics)\n\tSimplifies RangeFieldQuery relation logic\n\tUpdates TestRangeFieldQueries to derive from a new BaseRangeFieldQueryTestCase class allowing for testing new RangeField types built on top of RangeField (e.g., date ranges, geo ranges)\n\tFixes the test verification step to explicitly check intersect, contain, and within while computing expected results. (The old patch was using the same buggy logic in the RangeFieldQuery class.)\n\n "
        },
        {
            "id": "comment-15384486",
            "author": "Adrien Grand",
            "date": "2016-07-19T16:48:42+0000",
            "content": "This is an exciting feature! I looked at the patch and have some questions:\n\n\tShould the field be called something like DoubleRange rather than RangeField so that we still have namespace to have similar fields for other data types? I think this would also be more consistent with the names of other fields like StringField or DoublePoint?\n\tThe reuse of fieldsData in setRangeValues worries me a bit, is it safe? Other fields do not seem to do that?\n\tQueryType does not need to be public?\n\tWhy do you replace infinities with +/-MAX_VALUE?\n\n "
        },
        {
            "id": "comment-15384579",
            "author": "David Smiley",
            "date": "2016-07-19T17:47:39+0000",
            "content": "Very cool Nick! "
        },
        {
            "id": "comment-15385223",
            "author": "Nicholas Knize",
            "date": "2016-07-20T02:54:16+0000",
            "content": "Thanks Adrien Grand! \n\nShould the field be called something like DoubleRange\n\n+1. I was on the fence about this but I think its the right way to go. Not only does it make it sense for consistency but it reduces index size for ints and floats.\n\nThe reuse of fieldsData in setRangeValues worries me a bit, is it safe?\n\nWe did this in LatLonPoint. I don't think its any less safe than creating a new BytesRef (but more efficient?) Maybe Michael McCandless has a better answer?\n\nQueryType does not need to be public?\n\n+1\n\nWhy do you replace infinities with +/-MAX_VALUE?\n\nGood catch, I think that was in there from unrelated debugging funzies.\n\nUpdated patch is attached. "
        },
        {
            "id": "comment-15385240",
            "author": "Nicholas Knize",
            "date": "2016-07-20T03:08:41+0000",
            "content": "Minor clean up of some exception messages and javadocs. "
        },
        {
            "id": "comment-15385420",
            "author": "Adrien Grand",
            "date": "2016-07-20T06:08:53+0000",
            "content": "The bounds checks for getMin and getMax apply to type.pointDimensionCount() but it really should be type.pointDimensionCount()/2?\nI think I would find it a bit easier to read if each query type had a different RangeFieldComparator impl, the fact that all cases are handled in a single method makes it a bit hard to follow for me. "
        },
        {
            "id": "comment-15386736",
            "author": "Nicholas Knize",
            "date": "2016-07-20T22:27:50+0000",
            "content": "Instead of having to create a new impl for each query I just simplified the RangeFieldComparator. Now its only responsibility is to provide the range relation logic. I then moved the relation handling up into the IntersectsVisitor. I think this is better and more properly organized and should be easier to follow. "
        },
        {
            "id": "comment-15386742",
            "author": "Nicholas Knize",
            "date": "2016-07-20T22:36:26+0000",
            "content": "Attached wrong patch. Proper one now attached. "
        },
        {
            "id": "comment-15386801",
            "author": "Adrien Grand",
            "date": "2016-07-20T23:27:45+0000",
            "content": "+1\n\nI suspect we can make things faster by reorganizing how the visitor computes the relation between the cell and the range but this is sandbox so maybe we should get this in and iterate from there? "
        },
        {
            "id": "comment-15387049",
            "author": "ASF subversion and git services",
            "date": "2016-07-21T02:57:35+0000",
            "content": "Commit f5964ec6e45adc8fc7644bbe60d9e5966bf11ab7 in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f5964ec ]\n\nLUCENE-7381: add point based DoubleRangeField and RangeFieldQuery for indexing and querying on Ranges up to 4 dimensions "
        },
        {
            "id": "comment-15387069",
            "author": "ASF subversion and git services",
            "date": "2016-07-21T03:20:48+0000",
            "content": "Commit 7dfcfcc71851abe114d5db716bc5d099b540e3fe in lucene-solr's branch refs/heads/branch_6x from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7dfcfcc ]\n\nLUCENE-7381: add point based DoubleRangeField and RangeFieldQuery for indexing and querying on Ranges up to 4 dimensions "
        },
        {
            "id": "comment-15387072",
            "author": "Nicholas Knize",
            "date": "2016-07-21T03:23:32+0000",
            "content": "+1 to iterate in sandbox. I'll also add IntRangeField, DoubleRangeField, and LongRangeField in a separate issue. And GeoBBoxField also in another issue. "
        },
        {
            "id": "comment-15388455",
            "author": "Steve Rowe",
            "date": "2016-07-21T21:23:27+0000",
            "content": "Couple reproducing nightly test failures on branch_6x, from https://builds.apache.org/job/Lucene-Solr-NightlyTests-6.x/125/:\n\n\n   [junit4] Suite: org.apache.lucene.search.TestDoubleRangeFieldQueries\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestDoubleRangeFieldQueries -Dtests.method=testMultiValued -Dtests.seed=AE24BFDDECD216AC -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/x1/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=hu -Dtests.timezone=Europe/San_Marino -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 4.20s J0 | TestDoubleRangeFieldQueries.testMultiValued <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: wrong hit (first of possibly more):\n   [junit4]    > FAIL: id=204 should not match but did\n   [junit4]    >  queryBox=Box(Infinity TO Infinity)\n   [junit4]    >  box=Box(Infinity TO Infinity)\n   [junit4]    >  queryType=CONTAINS\n   [junit4]    >  deleted?=false\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([AE24BFDDECD216AC:7A04DBEF221056E4]:0)\n   [junit4]    > \tat org.apache.lucene.search.BaseRangeFieldQueryTestCase.verify(BaseRangeFieldQueryTestCase.java:278)\n   [junit4]    > \tat org.apache.lucene.search.BaseRangeFieldQueryTestCase.doTestRandom(BaseRangeFieldQueryTestCase.java:154)\n   [junit4]    > \tat org.apache.lucene.search.BaseRangeFieldQueryTestCase.testMultiValued(BaseRangeFieldQueryTestCase.java:73)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestDoubleRangeFieldQueries -Dtests.method=testRandomBig -Dtests.seed=AE24BFDDECD216AC -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/x1/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=hu -Dtests.timezone=Europe/San_Marino -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 35.1s J0 | TestDoubleRangeFieldQueries.testRandomBig <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: wrong hit (first of possibly more):\n   [junit4]    > FAIL: id=49 should not match but did\n   [junit4]    >  queryBox=Box(Infinity TO Infinity)\n   [junit4]    >  box=Box(Infinity TO Infinity)\n   [junit4]    >  queryType=CONTAINS\n   [junit4]    >  deleted?=false\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([AE24BFDDECD216AC:2973C2527D8B6A2C]:0)\n   [junit4]    > \tat org.apache.lucene.search.BaseRangeFieldQueryTestCase.verify(BaseRangeFieldQueryTestCase.java:278)\n   [junit4]    > \tat org.apache.lucene.search.BaseRangeFieldQueryTestCase.doTestRandom(BaseRangeFieldQueryTestCase.java:154)\n   [junit4]    > \tat org.apache.lucene.search.BaseRangeFieldQueryTestCase.testRandomBig(BaseRangeFieldQueryTestCase.java:69)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /x1/jenkins/jenkins-slave/workspace/Lucene-Solr-NightlyTests-6.x/lucene/build/sandbox/test/J0/temp/lucene.search.TestDoubleRangeFieldQueries_AE24BFDDECD216AC-001\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene62): {id=PostingsFormat(name=Memory doPackFST= false)}, docValues:{id=DocValuesFormat(name=Memory)}, maxPointsInLeafNode=1844, maxMBSortInHeap=6.78445457997637, sim=ClassicSimilarity, locale=hu, timezone=Europe/San_Marino\n   [junit4]   2> NOTE: Linux 3.13.0-85-generic amd64/Oracle Corporation 1.8.0_74 (64-bit)/cpus=4,threads=1,free=179129064,total=341311488\n   [junit4]   2> NOTE: All tests run in this JVM: [FuzzyLikeThisQueryTest, TestDocValuesTermsQuery, TestTermAutomatonQuery, TestLatLonPoint, TestBigIntegerPoint, TestDoubleRangeField, TestHalfFloatPoint, TestInetAddressPoint, TestLatLonDocValuesField, TestPayloadSpanUtil, TestDoubleRangeFieldQueries]\n   [junit4] Completed [18/20 (1!)] on J0 in 42.60s, 5 tests, 2 failures <<< FAILURES!\n\n "
        },
        {
            "id": "comment-15389548",
            "author": "Steve Rowe",
            "date": "2016-07-22T14:02:14+0000",
            "content": "Another reproducing nightly branch_6x failing test seed found by my Jenkins:\n\n\n   [junit4] Suite: org.apache.lucene.search.TestDoubleRangeFieldQueries\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene direct\nory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestDoubleRangeFieldQueries -Dtests.method=testMultiValued -Dtests.seed=49E2D2BA84C4DB27 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=de-CH -Dtests.timezone=America/Costa_Rica -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 5.22s J5 | TestDoubleRangeFieldQueries.testMultiValued <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: wrong hit (first of possibly more):\n   [junit4]    > FAIL: id=18102 should not match but did\n   [junit4]    >  queryBox=Box(Infinity TO Infinity)\n   [junit4]    >  box=Box(Infinity TO Infinity)\n   [junit4]    >  queryType=CONTAINS\n   [junit4]    >  deleted?=false\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([49E2D2BA84C4DB27:9DC2B6884A069B6F]:0)\n   [junit4]    >        at org.apache.lucene.search.BaseRangeFieldQueryTestCase.verify(BaseRangeFieldQueryTestCase.java:278)\n   [junit4]    >        at org.apache.lucene.search.BaseRangeFieldQueryTestCase.doTestRandom(BaseRangeFieldQueryTestCase.java:154)\n   [junit4]    >        at org.apache.lucene.search.BaseRangeFieldQueryTestCase.testMultiValued(BaseRangeFieldQueryTestCase.java:73)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /var/lib/jenkins/jobs/Lucene-Solr-Nightly-6.x/workspace/lucene/build/sandbox/test/J5/temp/lucene.search.TestDoubleRangeFieldQueries_49E2D2BA84C4DB27-001\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene62): {id=PostingsFormat(name=LuceneFixedGap)}, docValues:{id=DocValuesFormat(name=Asserting)}, maxPointsInLeafNode=735, maxMBSortInHeap=7.540860061709994, sim=ClassicSimilarity, locale=de-CH, timezone=America/Costa_Rica\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_77 (64-bit)/cpus=16,threads=1,free=210135672,total=520093696\n   [junit4]   2> NOTE: All tests run in this JVM: [TestLatLonDocValuesField, FuzzyLikeThisQueryTest, TestSlowFuzzyQuery, TestDocValuesRangeQuery, TestDoubleRangeFieldQueries]\n   [junit4] Completed [19/20 (1!)] on J5 in 61.33s, 5 tests, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-15389765",
            "author": "ASF subversion and git services",
            "date": "2016-07-22T16:22:12+0000",
            "content": "Commit 7f1db8a047818da337b27fe9dce0824cb5a02b96 in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7f1db8a ]\n\nLUCENE-7381: Fix equals relation in RangeFieldQuery. Fix relation logic in BaseRangeFieldQueryTestCase. "
        },
        {
            "id": "comment-15389769",
            "author": "ASF subversion and git services",
            "date": "2016-07-22T16:23:28+0000",
            "content": "Commit 1a94c25a04b1de80f8ae6e9c35f60ff97e9ec190 in lucene-solr's branch refs/heads/branch_6x from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1a94c25 ]\n\nLUCENE-7381: Fix equals relation in RangeFieldQuery. Fix relation logic in BaseRangeFieldQueryTestCase. "
        },
        {
            "id": "comment-15389773",
            "author": "Nicholas Knize",
            "date": "2016-07-22T16:26:17+0000",
            "content": "Thanks Steve Rowe! I saw a nightly failure for the same thing. I pushed a fix. "
        }
    ]
}