{
    "id": "LUCENE-5887",
    "title": "Remove horrible WeakIdentityMap caching in AttributeFactory, AttributeSource and VirtualMethod",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "Especially the use case in AttributeFactory is horrible:\nBecause of ClassLoader issues we cannot hold strong references (see LUCENE-5640 for explanation), we need WeakIdentityMap<Class, WeakReference<someVal>>. You could say: let's use a strong value for stuff like MethodHandles (used in AttributeFactory), but because those have a strong reference to the class, our reference to key would be strong, so garbage collector can no longer unload the class. This is why we use the WeakReference also on the value.\n\nThe problem is if the value is something like a MethodHandle, which itsself has hard reference to (so it gets garbage collected). Then the cache is useless.\n\nIn DefaultAttributeFactory I decided, to make methodhandles strong references, but then I needed to restrict it to our own classloader, otherwise we would have strong references to foreign classloaders.\n\nSince Java 7 there is java.lang.ClassValue, that fixes the following JVM bug: http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6389107\n\nSee also: http://stackoverflow.com/questions/7444420/classvalue-in-java-7\n\nIn fact internally, there is a also a WeakReference/WeakHashMap used, but only as fallback - and its only one globally, used by many other JVM internals, too. By default it has a very fast path and the call to ClassValue.get() is incredibly fast. This should therefore also improve AttributeFactory alltogether.\n\nNext to AttributeFactory, I also improved the Interfaces cache of AttributeSource (this one assigns an array of Attribute interfaces to an AttributeImpl). The other one is VirtualMethod (assigns its own implementationDistance for every seen subclass).\n\nThis also removes almost all uses of WeakIdentityMap, the remaining one is the ByteBuffer stuff in MMapDirectory. Unfortunately I have still no idea how to remove that one...",
    "attachments": {
        "LUCENE-5887.patch": "https://issues.apache.org/jira/secure/attachment/12661732/LUCENE-5887.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14097138",
            "author": "Uwe Schindler",
            "content": "Patch removing most of the code... Very nice cleanup! ",
            "date": "2014-08-14T16:01:04+0000"
        },
        {
            "id": "comment-14098433",
            "author": "Uwe Schindler",
            "content": "New patch with some cleanups (renames of fields,...). Also made sure that the collected interfaces for a given AttributeImpl dont have duplicae interfaces. This was not guaranteed before, but was possible, if superclass defined same interfaces as class. This happened with the Token class...\n\nWill commit this now. ",
            "date": "2014-08-15T10:43:29+0000"
        },
        {
            "id": "comment-14098455",
            "author": "ASF subversion and git services",
            "content": "Commit 1618148 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1618148 ]\n\nLUCENE-5887: Remove WeakIdentityMap caching in AttributeFactory, AttributeSource, and VirtualMethod in favour of Java 7's ClassValue. Always use MethodHandles to create AttributeImpl classes. ",
            "date": "2014-08-15T10:50:16+0000"
        },
        {
            "id": "comment-14098456",
            "author": "ASF subversion and git services",
            "content": "Commit 1618149 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1618149 ]\n\nMerged revision(s) 1618148 from lucene/dev/trunk:\nLUCENE-5887: Remove WeakIdentityMap caching in AttributeFactory, AttributeSource, and VirtualMethod in favour of Java 7's ClassValue. Always use MethodHandles to create AttributeImpl classes. ",
            "date": "2014-08-15T10:58:23+0000"
        }
    ]
}