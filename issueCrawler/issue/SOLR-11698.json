{
    "id": "SOLR-11698",
    "title": "Query-time per-field query settings (ie analyzers, autoGeneratePhraseQueries, etc)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This is an issue wrt to [this email chain](http://lucene.472066.n3.nabble.com/Multiple-Query-Time-Analyzers-in-Solr-td4364540.html) created to discuss the ability to change the query time analyzer in Solr, with input from Trey Grainger, David Smiley, Steve Rowe, and Mikhail Khludnev\n\nSpecifically, we ended up with the following\n_\nit seems like there's some consensus around\n\n\n\tCreating multiple named analyzers per field\n\tReferencing those analyzers by name at query time somehow\n\n\n\nI would advocate for refactoring edismax (or making a new query parser) that would allow you to specify per-field query configuration. Then I would advocate refactoring some of the flags autoGeneratePhraseQueries, etc to this query-time config. Then we could follow suit using the same syntax to specify the analyzer to use at query time.\n\nPerhaps more generally these configuration items can stay on the fieldType, but a syntax could allow them to be overriden per field at query time?\n\nFinally, another requirement I would add would be the ability to specify the same field twice in qf, but configured to be queries two different ways. Perhaps a syntax like qf=title:config1  title:config2? Where config1 and config2 modify fieldType query flags? Like fieldConfig.config1.autoGeneratePhraseQuerise=false&ieldConfig.config1.queryAnalyzer=no_synonyms\n\nThis sort of thing would in my opinion help both enhance the power of Solr, but with a more consistent vision around how field-specific query settings could be organized\n_",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-02T20:32:03+0000",
            "content": "I'm considering adding query time config to field aliases for this functionality. It builds on an existing feature, and seems to be the least error-prone to implement as edismax's query parser is already alias aware. This seems to be simpler than adding a whole new \"config\" idea.\n\nAs an example, to override autoGeneratePhraseQueries for a field \"text\" one would write\n\n\n&qf=text text_autophrase^10&f.text_autophrase.qf=text&f.text_autophrase.autoGeneratePhraseQueries=true\n\n\n\nSimilarly, if we had a query-overridable field type setting for analyzer we could write\n\n\n&qf=text text_synonym_autophrase^10\n&f.text_synonym_autophrase.qf=text\n&f.text_synonym_autophrase.autoGeneratePhraseQueries=true\n&f.text_synonym_autophrase.queryAnalyzer=with_synonyms\n\n ",
            "author": "Doug Turnbull",
            "id": "comment-16275741"
        },
        {
            "date": "2017-12-04T04:02:33+0000",
            "content": "Nice; I think the approach is a nice balance of using Solr's existing mechanisms and being sufficient to get the job done.  It's quite plausible to imagine this working for not just edismax but the default lucene parser as well.   Perhaps above, f.text_synonym_autophrase.qf=text should be f.text_synonym_autophrase.f=text so that it's not edismax specific?  Many of the query parsers use 'f' for field.  And 'qf' suggests we could have a list with boosts which is not intended here (right?).\n\nFor a moment I toyed with a hypothetical syntax of using local-params within qf but it seemed not right since we strictly use local-params for query parsing, which is not for this context (field list with options). ",
            "author": "David Smiley",
            "id": "comment-16276265"
        }
    ]
}