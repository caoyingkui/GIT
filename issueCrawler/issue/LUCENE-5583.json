{
    "id": "LUCENE-5583",
    "title": "Add DataInput.skipBytes",
    "details": {
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "4.8",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ]
    },
    "description": "I was playing with on-the-fly checksum verification and this made me stumble upon an issue with BufferedChecksumIndexInput.\n\nI have some code that skips over a DataInput by reading bytes into /dev/null, eg.\n\n  private static final byte[] SKIP_BUFFER = new byte[1024];\n\n  private static void skipBytes(DataInput in, long numBytes) throws IOException {\n    assert numBytes >= 0;\n    for (long skipped = 0; skipped < numBytes; ) {\n      final int toRead = (int) Math.min(numBytes - skipped, SKIP_BUFFER.length);\n      in.readBytes(SKIP_BUFFER, 0, toRead);\n      skipped += toRead;\n    }\n  }\n\n\n\nIt is fine to read into this static buffer, even from multiple threads, since the content that is read doesn't matter here. However, it breaks with BufferedChecksumIndexInput because of the way that it updates the checksum:\n\n\n  @Override\n  public void readBytes(byte[] b, int offset, int len)\n    throws IOException {\n    main.readBytes(b, offset, len);\n    digest.update(b, offset, len);\n  }\n\n\n\nIf you are unlucky enough so that a concurrent call to skipBytes started modifying the content of b before the call to digest.update(b, offset, len) finished, then your checksum will be wrong.\n\nI think we should make BufferedChecksumIndexInput read into a private buffer first instead of relying on the user-provided buffer.",
    "attachments": {
        "LUCENE-5583.patch": "https://issues.apache.org/jira/secure/attachment/12639407/LUCENE-5583.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13964082",
            "author": "Simon Willnauer",
            "content": "I personally think you shouldn't pass this shared buffer to readBytes() it can break all delegates. I wonder if we want to add a skipBytes method to DataInput that we can impl. efficienly on the lower levels and that just calls readByte() in a loop as a default impl? ",
            "date": "2014-04-09T12:23:20+0000"
        },
        {
            "id": "comment-13964131",
            "author": "Adrien Grand",
            "content": "I personally think you shouldn't pass this shared buffer to readBytes() it can break all delegates.\n\nWe already have code that does it for stored fields (the piece of code I pasted in the issue description comes from CompressingStoredFieldsReader.skipBytes`). But indeed, this is the other option: either this way of skipping over bytes using a write-only buffer is considered wrong, or DataInput implementations should never read in the user-provided buffer.\n\n+1 on having skipBytes on DataInput although I would rather like the default impl to do bulk reads instead of reading bytes one by one. ",
            "date": "2014-04-09T13:30:11+0000"
        },
        {
            "id": "comment-13964154",
            "author": "Uwe Schindler",
            "content": "+1 on having SkipBytes.\n\nOne other thing: Currently ChecksumIndexInput throws UnsupportedEx if you try to seek, but in a subclass we suddenly allow it again (only forward). Maybe we should move the code up to ChecksumIndexinput and document that seeking only works forward and may be costly (because it has to read)? In that case we implement that with skipBytes(), too. This would allow to use ChecksumIndexinput also for other codec parts while merging. ",
            "date": "2014-04-09T13:47:06+0000"
        },
        {
            "id": "comment-13964155",
            "author": "Adrien Grand",
            "content": "Thanks for the feedback, I'll work on a patch. ",
            "date": "2014-04-09T13:50:18+0000"
        },
        {
            "id": "comment-13964201",
            "author": "Adrien Grand",
            "content": "Here is a patch. ",
            "date": "2014-04-09T14:29:39+0000"
        },
        {
            "id": "comment-13964227",
            "author": "Uwe Schindler",
            "content": "Do we really need the skipBuffer thread local? I would remove this and instantiate the skipbuffer with correct size, max 1024. We had some similar code in copyBytes() of DataOutput/DataInput and removed that because it is stupid with newer JVMs.\n\nJVMs are very good for those short-lived objects, no need to cache them. They are also quite small. In any case we should only allocate as much bytes we really need (new byte[Math.min(toSkip, 1024)]. ",
            "date": "2014-04-09T14:52:08+0000"
        },
        {
            "id": "comment-13964233",
            "author": "Uwe Schindler",
            "content": "An alternative would be to use a non-static buffer (like in IndexOutput#copyBytes()). Because a single IndexInput or Indexoutput cannot be used by more than one thread without cloning, there is no need for a thread local. It is just a problem, if its static for all instances. ",
            "date": "2014-04-09T14:57:07+0000"
        },
        {
            "id": "comment-13964245",
            "author": "Adrien Grand",
            "content": "I didn't think much about the thread-local, I just thought it would be nice to minimize the number of buffer instances. I will make it work like copyBytes for consistency. ",
            "date": "2014-04-09T15:05:42+0000"
        },
        {
            "id": "comment-13964258",
            "author": "Uwe Schindler",
            "content": "Thanks! Static thread locals are horrible for the garbage collector, so I would really don't use them. ",
            "date": "2014-04-09T15:12:56+0000"
        },
        {
            "id": "comment-13964272",
            "author": "Adrien Grand",
            "content": "Here is an updated patch that stores the skip buffer as an instance member. ",
            "date": "2014-04-09T15:21:59+0000"
        },
        {
            "id": "comment-13964292",
            "author": "Uwe Schindler",
            "content": "Looks fine! ",
            "date": "2014-04-09T15:39:34+0000"
        },
        {
            "id": "comment-13964343",
            "author": "Michael McCandless",
            "content": "+1, patch looks nice.\n\nHmm, should ByteArrayDataInput.skipBytes should be marked @Override (and I guess change its param to long)? ",
            "date": "2014-04-09T16:26:28+0000"
        },
        {
            "id": "comment-13964650",
            "author": "Adrien Grand",
            "content": "Good point, I'll fix it! ",
            "date": "2014-04-09T20:43:56+0000"
        },
        {
            "id": "comment-13965080",
            "author": "ASF subversion and git services",
            "content": "Commit 1586231 from jpountz@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1586231 ]\n\nLUCENE-5583: Add DataInput.skipBytes, ChecksumIndexInput can now seek forward. ",
            "date": "2014-04-10T07:12:39+0000"
        },
        {
            "id": "comment-13965083",
            "author": "Uwe Schindler",
            "content": "Thanks! After hopefully getting some comments on LUCENE-5588, I will branch 4.8! ",
            "date": "2014-04-10T07:17:57+0000"
        },
        {
            "id": "comment-13965086",
            "author": "ASF subversion and git services",
            "content": "Commit 1586232 from jpountz@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1586232 ]\n\nLUCENE-5583: Add DataInput.skipBytes, ChecksumIndexInput can now seek forward. ",
            "date": "2014-04-10T07:25:45+0000"
        },
        {
            "id": "comment-13965087",
            "author": "Adrien Grand",
            "content": "Committed to both branches, thanks Simon, Uwe and Mike! ",
            "date": "2014-04-10T07:26:23+0000"
        },
        {
            "id": "comment-13982585",
            "author": "Uwe Schindler",
            "content": "Close issue after release of 4.8.0 ",
            "date": "2014-04-27T23:25:49+0000"
        }
    ]
}