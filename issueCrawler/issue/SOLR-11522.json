{
    "id": "SOLR-11522",
    "title": "Suggestions/recommendations to rebalance replicas",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "AutoScaling"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.6"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "It is possible that a cluster is unbalanced even if it is not breaking any of the policy rules. Some nodes may have very little load while some others may be heavily loaded. So, it is possible to move replicas around so that the load is more evenly distributed. This is going to be driven by preferences. The way we arrive at these suggestions is going to be as follows\n\n\tSort the nodes according to the given preferences\n\tChoose\u00a0a replica from the most loaded node (source-node)\u00a0\n\ttry adding them to the least loaded node (target-node)\n\tSee if it breaks any policy rules.\u00a0If yes , try another target-node (go to #3)\n\tIf no policy rules are being broken, present this as a suggestion . The suggestion contains the following information\n\t\n\t\tThe source-node and target-node names\n\t\tThe actual v2 command that can be run to effect the operation\n\t\n\t\n\tGo to step #1\n\tDo this until the\u00a0a replicas can be moved in such a way that the target node is more loaded than the source-node",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-09-24T14:34:37+0000",
            "content": "Commit 3f2975c27c520ed7543779cd731a7cd525243479 in lucene-solr's branch refs/heads/master from noble\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3f2975c ]\n\nSOLR-11522: /autoscaling/suggestions now include rebalance options as well even if there are no violations ",
            "author": "ASF subversion and git services",
            "id": "comment-16625903"
        },
        {
            "date": "2018-09-24T14:39:07+0000",
            "content": "Commit 4fa893304ae07db9fc229690cc0481f242e4053a in lucene-solr's branch refs/heads/branch_7x from noble\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4fa8933 ]\n\nSOLR-11522: /autoscaling/suggestions now include rebalance options as well even if there are no violations ",
            "author": "ASF subversion and git services",
            "id": "comment-16625908"
        },
        {
            "date": "2018-09-24T14:39:09+0000",
            "content": "Commit 0f9a8a818a3cd07b10fbec9f279538e828d816c8 in lucene-solr's branch refs/heads/branch_7x from noble\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0f9a8a8 ]\n\nSOLR-11522: /autoscaling/suggestions now include rebalance options as well even if there are no violations ",
            "author": "ASF subversion and git services",
            "id": "comment-16625909"
        },
        {
            "date": "2018-09-25T14:47:22+0000",
            "content": "Commit e16d7d69935030d69abcf414b8ae5866465a9c08 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e16d7d6 ]\n\nSOLR-11522: /autoscaling/suggestions now include rebalance options as well even if there are no violations ",
            "author": "ASF subversion and git services",
            "id": "comment-16627459"
        },
        {
            "date": "2018-09-25T14:48:24+0000",
            "content": "Commit a514392ccfa39c54d745be1dce1a1febdc92bae6 in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a514392 ]\n\nSOLR-11522: /autoscaling/suggestions now include rebalance options as well even if there are no violations ",
            "author": "ASF subversion and git services",
            "id": "comment-16627461"
        },
        {
            "date": "2018-10-12T04:17:26+0000",
            "content": "In this and in other commits like SOLR-12792, SOLR-12824 you've introduced default methods to MapWriter that seem fishy to me.  In particular the underscore methods like _get(...).  This approach doesn't sit well with me.  I can understand why you might have added the underscore but I think the desire to do this should be a sign to reconsider the approach altogether.  I think methods should be added to MapWriter with care (same for SolrParams and NamedList).  Noble Paul can you please explain your thought process for this?  What's the next best alternative? ",
            "author": "David Smiley",
            "id": "comment-16647414"
        },
        {
            "date": "2018-10-12T04:40:17+0000",
            "content": "Ideally, it should just be get(..). \n but as this class is implemented by a million other classes there is likely to be a conflict. so I went with _get(..).\n\nThe broad philosophy is that Solr has embraced JSON for everything (even some of the JUnit tests are driven by JSON). \n We need to have an in-memory representation of JSON which is\n\n\tmemory efficient and as little overhead as possible\n\tstreaming . Use as little memory as possible\n\tcan be serialized to any of the supported outputs with ease .(supports Javabin etc\u00a0 too)\n\tNo concrete classes . hence MapWriter, IteratorWriter interfaces\n\n\n\nIf a class implements MapWriter, most likely it is a deeply nested Object. . The most common operation that you can perform is to query that object with a proper path like a/b/c[4]/d . Looking up a\u00a0MapWriter is usually an operation with a complexity of O and no new Objects are created in the process. So, it is pretty fast. The best part is the readability it offers to our tests\n\nUsing a string path is OK for JUnit tests but it leads to creation of unnecessary objects. If we use it in other places, we can't afford to create new String objects. That's why I created an equivalent method get(List<String>) which doesn't create new Objects.\n\nThe alternative was to use a Utils#getObjectByPath() method . It was definitely ugly. ",
            "author": "Noble Paul",
            "id": "comment-16647457"
        },
        {
            "date": "2018-10-12T12:50:27+0000",
            "content": "Memory efficiency and streaming and serialization and interfaces is all well and good \u2013 I think those goals were already met prior to these get methods.\n\nHere's one specific reason why I feel the design is off:  MapWriter is fundamentally about something that can write itself to a Map \u2013 and it's javadocs confirm this obvious point.  But \"get\" methods are not in line with that; get methods suggest the current object is a Map.  Yet how could these get methods even work at all right now?  (as I asked myself in disbelief)  It's very non-obvious but after chasing through the rabbit, hole I'm led to Utils.getVal(Object obj, String key, int idx)  (line 491) which does a MapWriter instanceof check then proceeds to call writeMap in order to find the particular key that matches.  Yuck!  And of course this is O(N).\n\nHoss Man do you have any opinions here? ",
            "author": "David Smiley",
            "id": "comment-16647877"
        },
        {
            "date": "2018-10-12T13:10:12+0000",
            "content": "I don't even understand your concern here. Are you worried at the cost of the _get() operation or are you worried about the suitability of the method in that interface. BTW, the purpose of MapWriter is not too write and object to a Map. It's to efficiently serialize it to a JSON like structure. If you are worried about O operations, we should nuke the NamedList first. ",
            "author": "Noble Paul",
            "id": "comment-16647890"
        },
        {
            "date": "2018-10-12T15:44:02+0000",
            "content": "the purpose of MapWriter is not too write and object to a Map\n\nWoops; yes that's right, I said it wrong.  We agree it's to efficiently serialize to a JSON-like structure.  BTW I think it helps readers to see the non-default methods first \u2013 here that's just \"writeMap\" and should draw the reader's attention to it first.  I am mostly worried about the suitability of \"get\" declared on this interface, and I think the costly lookup is symptomatic of this misalignment.  This interface should be limited to writing IMO.  If theoretically MapWriter subclassed something else with a Map-like get method then that would be fine.  I'm not necessarily saying overall that's what we should do, only that it's better than this. ",
            "author": "David Smiley",
            "id": "comment-16648052"
        },
        {
            "date": "2018-10-22T22:51:02+0000",
            "content": "I am mostly worried about the suitability of \"get\" declared on this interface, and I think the costly lookup is symptomatic of this misalignment. This interface should be limited to writing IMO.\nI'm having trouble understanding the purpose/use of these _get methods (they seem to be purely for use in tests???) but in general I'm with david that they seem very confusing and badly suited for this interface/name.\n\nIf these are purely \"utility\" methods intended for special case situation where tests want to do a \"lookup\" of a value in one of these \"Map like\" MapWriter instances, why do they need to be in the interface itself? Since the bulk of the work to do the \"pretend we are writting out the map but really just look for one key\" is in Utils.getVal \u2013 hidden away as an implementation detail behind Utils.getObjectByPath which already does a lot of instanceof checks \u2013 why does MapWriter._get need to exist at all? why can't the caller just use Utils.getObjectByPath directly?\n\nIf the answer is: \"Because we want impls of MapWriter to be able to provide a more efficient impl.\" then why have such a terrible inefficient default impl at all?\n\nAt the very least, this method should have a more descriptive name and better javadocs (as should Utils.getObjectByPath that makes it clear what the performance tradeoffs are here.\n\nfrankly, looking at the actual uses of _get in the tests makes me question the entire \"value add\" of these methods \u2013 why aren't all the callers of _get just using toMap (or Utils.getObjectByPath) and then making multiple assertions about the resulting map? AFAICT the way Utils.getVal works means that in the case of a test that does a single assert on a single entry, converting hte entire object to a Map would be just as efficient as only \"writing\" that single entry, but in many cases tests are calling _get on several sub-elements in a row, which should be much faster if the test just dumped the whole map and then called get on they keys it wants to assert.\n\nSpecifically, isn't this existing test snippet...\n\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      assertEquals(collectionName, status._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n\n\n...at least 3 times slower then if the test just did something like...\n\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      Map coreMap = Utils.getObjectByPath(status, false, asList(\"status\", corename, \"cloud\");\n      assertEquals(collectionName, coreMap.get(\"collection\"));\n      assertNotNull(coreMap.get(\"shard\"));\n      assertNotNull(coreMap.get(\"replica\"));\n\n\n...?\n\nI don't see how the existing test code is any better/faster/more-readable then the 2nd (which seems like a much simpler approach, w/o the need to pollute the MapWriter API with a confusing default method) ",
            "author": "Hoss Man",
            "id": "comment-16659780"
        },
        {
            "date": "2018-10-22T23:54:48+0000",
            "content": "why aren't all the callers of _get just using toMap ...\n\ntoMap() is extremely expensive and must be avoided if possible\n\nconverting hte entire object to a Map would be just as efficient as only \"writing\" that single entry,\n\nNO. \nA Map is a very expensive object . The writeMap() is just multiple method calls (no Objects  are created). it doesn't necessarily \"write\" to anything. Essentially, the cost of a MapWriter._get(\"key\") is same as a NamedList#get(\"key\")\n\n..at least 3 times slower then if the test just did something like...\n\nYes. But the cost is negligible. get operations are pretty cheap (they are only as costly as a NamedList.get() ) .there are no new Objects created . It was done for readability of tests. \n\nIf the answer is: \"Because we want impls of MapWriter to be able to provide a more efficient impl.\" then why have such a terrible inefficient default impl at all?\n\nThe default impl is generic .(it is not \"inefficient\", it is actually quite performant.) . If the MapWriter is backed by a Map, the lookup is slightly faster . O(log(n)) vs O(n)\n\nAt the very least, this method should have a more descriptive name and better javadocs (as should Utils.getObjectByPath that makes it clear what the performance tradeoffs are here.\n\nThe better solution is to move the _get* methods to another interface and MapWriter implement that . Yes, better javadocs are definitely required ",
            "author": "Noble Paul",
            "id": "comment-16659852"
        },
        {
            "date": "2018-10-23T01:31:01+0000",
            "content": "Commit e28cd0cad15f378ebfcdc85c7ff40009fb21cd2d in lucene-solr's branch refs/heads/branch_7x from noble\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e28cd0c ]\n\nSOLR-11522: Moved the _get methods to a separate interafce and keep MapWriter clean ",
            "author": "ASF subversion and git services",
            "id": "comment-16659911"
        },
        {
            "date": "2018-10-23T01:35:42+0000",
            "content": "Commit 576d28f643a89de832b59a783ce729402d70fb9f in lucene-solr's branch refs/heads/master from noble\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=576d28f ]\n\nSOLR-11522: Moved the _get methods to a separate interafce and keep MapWriter clean ",
            "author": "ASF subversion and git services",
            "id": "comment-16659917"
        },
        {
            "date": "2018-10-24T01:58:56+0000",
            "content": "Commit 576d28f643a89de832b59a783ce729402d70fb9f in lucene-solr's branch refs/heads/jira/http2 from noble\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=576d28f ]\n\nSOLR-11522: Moved the _get methods to a separate interafce and keep MapWriter clean ",
            "author": "ASF subversion and git services",
            "id": "comment-16661597"
        }
    ]
}