{
    "id": "LUCENE-8444",
    "title": "Geo3D Test Failure: Test Point is Contained by shape but outside the XYZBounds",
    "details": {
        "components": [
            "modules/spatial3d"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "6.6.6",
            "7.5",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "Reproduces for me on branch_7x.\u00a0 /cc Karl Wright\u00a0 Ignacio Vera\n\nreproduce with: ant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=252B55C41A78F987 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=th -Dtests.timezone=America/Virgin -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\n[junit4] Suite: org.apache.lucene.spatial3d.TestGeo3DPoint\n   [junit4]   1>     doc=639 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-1.077431832267001, lon=3.141592653589793([X=-0.47288721079787505, Y=5.791198090613375E-17, Z=-0.8794340737031547])]\n   [junit4]   1>       quantized=[X=-0.47288721059145067, Y=2.3309121299774915E-10, Z=-0.8794340734858216]\n   [junit4]   1>     doc=1079 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-1.074298280522397, lon=-3.141592653589793([X=-0.4756448135017662, Y=-5.824968983859777E-17, Z=-0.8779556514050441])]\n   [junit4]   1>       quantized=[X=-0.4756448134355703, Y=-2.3309121299774915E-10, Z=-0.8779556514433299]\n   [junit4]   1>   shape=GeoComplexPolygon: {planetmodel=PlanetModel.WGS84, number of shapes=1, address=5b34ab34, testPoint=[lat=-0.9074319066955279, lon=2.1047077826887393E-11([X=0.6151745825332513, Y=1.2947627315700302E-11, Z=-0.7871615107396388])], testPointInSet=true, shapes={ {[lat=0.12234154783984401, lon=2.9773900430735544E-11([X=0.9935862314832985, Y=2.9582937525533484E-11, Z=0.12216699617265761])], [lat=-1.1812619187738946, lon=0.0([X=0.3790909950565304, Y=0.0, Z=-0.9234617794363308])], [lat=-1.5378336326638269, lon=-2.1777686687777411E-97([X=0.03288309726634029, Y=-7.161177895900688E-99, Z=-0.9972239126272725])]}}\n   [junit4]   1>   bounds=XYZBounds: [xmin=0.03288309626634029 xmax=1.0011188549924792 ymin=-1.0E-9 ymax=1.029686850221785E-9 zmin=-0.9972239136272725 zmax=0.12216699717265761]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=252B55C41A78F987 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=th -Dtests.timezone=America/Virgin -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.16s | TestGeo3DPoint.testGeo3DRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid bounds for shape=GeoComplexPolygon: {planetmodel=PlanetModel.WGS84, number of shapes=1, address=5b34ab34, testPoint=[lat=-0.9074319066955279, lon=2.1047077826887393E-11([X=0.6151745825332513, Y=1.2947627315700302E-11, Z=-0.7871615107396388])], testPointInSet=true, shapes={ {[lat=0.12234154783984401, lon=2.9773900430735544E-11([X=0.9935862314832985, Y=2.9582937525533484E-11, Z=0.12216699617265761])], [lat=-1.1812619187738946, lon=0.0([X=0.3790909950565304, Y=0.0, Z=-0.9234617794363308])], [lat=-1.5378336326638269, lon=-2.1777686687777411E-97([X=0.03288309726634029, Y=-7.161177895900688E-99, Z=-0.9972239126272725])]}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([252B55C41A78F987:955428509535571B]:0)\n   [junit4]    > \tat org.apache.lucene.spatial3d.TestGeo3DPoint.testGeo3DRelations(TestGeo3DPoint.java:259)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70), sim=RandomSimilarity(queryNorm=false): {}, locale=th, timezone=America/Virgin\n   [junit4]   2> NOTE: Linux 4.15.0-29-generic amd64/Oracle Corporation 1.8.0_161 (64-bit)/cpus=4,threads=1,free=298939008,total=313524224\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeo3DPoint]\n   [junit4] Completed [1/1 (1!)] in 0.62s, 1 test, 1 failure <<< FAILURES!",
    "attachments": {
        "LUCENE-8444.patch": "https://issues.apache.org/jira/secure/attachment/12934448/LUCENE-8444.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16569940",
            "author": "Ignacio Vera",
            "content": "Attached a test reproducing the problem.\n\nThe actual problem is a bad computation of within() for a complex polygon. What I see is the following:\n\n1) SectorLinearCrossingEdgeIterator fails to compute within() because the intersection point is on one polygon edge. This seems correct.\n\n2)DualCrossingEdgeIterator jumps in under this circumstances but it computes wrongly the membership.\n\nThe only suspicious condition I have found is that one of the plane bounds are composed by identically functional planes (We do check for numerically equals)\n\ncheckPointCutoffPlane.isFunctionallyIdentical(checkPointOtherCutoffPlane) == true\n\n\u00a0\n\nMaybe we need to be more restrictive in how we build the bounding planes. ",
            "date": "2018-08-06T09:32:10+0000"
        },
        {
            "id": "comment-16569976",
            "author": "Karl Wright",
            "content": "Ignacio Vera, identical cutoff planes are bad news.\n\nIf we detect such a condition we should throw the appropriate exception and let it look for another DualCrossing arrangement where that doesn't happen.  There are typically a half-dozen possibilities to choose from.  Can you be more specific about where the check is done? ",
            "date": "2018-08-06T09:58:20+0000"
        },
        {
            "id": "comment-16569999",
            "author": "Ignacio Vera",
            "content": "In the constructor of DualCrossingEdgeIterator we\u00a0 have:\n\nfinal SidedPlane testPointBound1 = new SidedPlane(intersectionPoint, testPointPlane, testPoint);\nfinal SidedPlane testPointBound2 = new SidedPlane(testPoint, testPointPlane, intersectionPoint);\nif (testPointBound1.isNumericallyIdentical(testPointBound2)) {\n  throw new IllegalArgumentException(\"Dual iterator unreliable when bounds planes are numerically identical\");\n}\nthis.testPointCutoffPlane = testPointBound1;\nthis.testPointOtherCutoffPlane = testPointBound2;\n\nfinal SidedPlane checkPointBound1 = new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);\nfinal SidedPlane checkPointBound2 = new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);\nif (checkPointBound1.isNumericallyIdentical(checkPointBound2)) {\n  throw new IllegalArgumentException(\"Dual iterator unreliable when bounds planes are numerically identical\");\n}\nthis.checkPointCutoffPlane = checkPointBound1;\nthis.checkPointOtherCutoffPlane = checkPointBound2;\n\n\u00a0\n\nI have tried to change those checks to functionally identical and it seems to fix this error and all the test pass.\n\n\u00a0 ",
            "date": "2018-08-06T10:11:15+0000"
        },
        {
            "id": "comment-16570011",
            "author": "Karl Wright",
            "content": "Ignacio Vera That sounds like the proper fix then.  It's exactly what functionally identical was meant to capture.  I'll assign the ticket to you and you can commit the test and the fix. ",
            "date": "2018-08-06T10:26:39+0000"
        },
        {
            "id": "comment-16570025",
            "author": "ASF subversion and git services",
            "content": "Commit ea2e564dad694af50bb8dd022ddb2d7f94cb7a2e in lucene-solr's branch refs/heads/master from Ignacio Vera\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ea2e564 ]\n\nLUCENE-8444: Prevent building functionally identical plane bounds when constructing DualCrossingEdgeIterator ",
            "date": "2018-08-06T10:43:41+0000"
        },
        {
            "id": "comment-16570026",
            "author": "ASF subversion and git services",
            "content": "Commit 3918b7d0a9ee3897816000e1e36cea9c18a83cc2 in lucene-solr's branch refs/heads/branch_7x from Ignacio Vera\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3918b7d ]\n\nLUCENE-8444: Prevent building functionally identical plane bounds when constructing DualCrossingEdgeIterator ",
            "date": "2018-08-06T10:44:05+0000"
        },
        {
            "id": "comment-16570027",
            "author": "ASF subversion and git services",
            "content": "Commit 4f940793d7447f287074f98490dc6de7042aa8bf in lucene-solr's branch refs/heads/branch_6x from Ignacio Vera\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4f94079 ]\n\nLUCENE-8444: Prevent building functionally identical plane bounds when constructing DualCrossingEdgeIterator ",
            "date": "2018-08-06T10:44:42+0000"
        }
    ]
}