{
    "id": "LUCENE-7177",
    "title": "adapt LUCENE-7159 to geopointfield too",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "LUCENE-7159 adds a precomputation to speed up complex polygon queries. We should adapt this to GeoPoint too.",
    "attachments": {
        "LUCENE-7177.patch": "https://issues.apache.org/jira/secure/attachment/12797020/LUCENE-7177.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15225875",
            "author": "Robert Muir",
            "date": "2016-04-05T08:17:50+0000",
            "content": "Here is a patch. The grid here also accelerates relational operations (somewhat: very coarse). I switched GeoPoint over to use BKD relation methods, to only compute them once, and to support working in integer space. I tried to also optimize some of its other logic like distance and bounding box (e.g. two-phase) too, in case we hit unbalanced subtrees and have to do lots of two-phase checks.\n\nI think we should go with grid size=32x32 just like LatLonPoint, even though larger sizes see large speedups. maybe we can see those same speedups by using a proper 2D tree instead of suffering a high fixed cost? it all has to do with avoiding expensive relation computations...\n\n\nDistance bench\n14.3 QPS -> 14.6 QPS\n\nGrid efficiency: (% of cells with definitive answer)\n  32x32: 88.08594%\n  64x64: 93.87207%\n128x128: 96.90552%\n\nPolygons\nvertices=5\n  32x32: 19.0 QPS -> 19.3 QPS (fixed cost: < 1ms)\n  64x64: 19.0 QPS -> 19.5 QPS (fixed cost: < 1ms)\n128x128: 19.0 QPS -> 19.5 QPS (fixed cost: < 1ms)\n\nvertices=50\n  32x32: 12.4 QPS -> 13.2 QPS (fixed cost: < 1ms)\n  64x64: 12.4 QPS -> 13.9 QPS (fixed cost: 1ms)\n128x128: 12.4 QPS -> 15.0 QPS (fixed cost: 2ms)\n\nvertices=500\n  32x32:  4.2 QPS ->  5.9 QPS (fixed cost: 5ms)\n  64x64:  4.2 QPS ->  7.4 QPS (fixed cost: 11ms)\n128x128:  4.2 QPS ->  8.5 QPS (fixed cost: 25ms)\n\nvertices=1000\n  32x32:  2.5 QPS ->  3.6 QPS (fixed cost: 9ms)\n  64x64:  2.5 QPS ->  4.2 QPS (fixed cost: 23ms)\n128x128:  2.5 QPS ->  5.3 QPS (fixed cost: 50ms)\n\n "
        }
    ]
}