{
    "id": "LUCENE-6459",
    "title": "[suggest] Query Interface for suggest API",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.1",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "This patch factors out common indexing/search API used by the recently introduced NRTSuggester.\u00a0\nThe motivation is to provide a query interface for FST-based fields (SuggestField and ContextSuggestField) \nto enable suggestion scoring and more powerful automaton queries. \n\nPreviously, only prefix \u2018queries\u2019 with index-time weights were supported but we can also support:\n\n\n\tPrefix queries expressed as regular expressions:  get suggestions that match multiple prefixes\n\t\n\t\tExample: star[wa|tr] matches starwars and startrek\n\t\n\t\n\tFuzzy Prefix queries supporting scoring: get typo tolerant suggestions scored by how close they are to the query prefix\n\t\n\t\tExample: querying for seper will score separate higher then superstitious\n\t\n\t\n\tContext Queries: get suggestions boosted and/or filtered based on their indexed contexts (meta data)\n\t\n\t\tBoost example: get typo tolerant suggestions on song names with prefix like a roling boosting songs with\ngenre rock and indie\n\t\tFilter example: get suggestion on all file names starting with finan only for user1 and user2\n\t\n\t\n\n\n\nSuggest API\n\n\nSuggestIndexSearcher searcher = new SuggestIndexSearcher(reader);\nCompletionQuery query = ...\nTopSuggestDocs suggest = searcher.suggest(query, num);\n\n\n\nCompletionQuery\n\nCompletionQuery is used to query SuggestField and ContextSuggestField. A CompletionQuery produces a CompletionWeight, \nwhich allows CompletionQuery implementations to pass in an automaton that will be intersected with a FST and allows boosting and \nmeta data extraction from the intersected partial paths. A CompletionWeight produces a CompletionScorer. A CompletionScorer \nexecutes a Top N search against the FST with the provided automaton, scoring and filtering all matched paths. \n\nPrefixCompletionQuery\nReturn documents with values that match the prefix of an analyzed term text \nDocuments are sorted according to their suggest field weight. \n\nPrefixCompletionQuery(Analyzer analyzer, Term term)\n\n\n\nRegexCompletionQuery\nReturn documents with values that match the prefix of a regular expression\nDocuments are sorted according to their suggest field weight.\n\nRegexCompletionQuery(Term term)\n\n\n\nFuzzyCompletionQuery\nReturn documents with values that has prefixes within a specified edit distance of an analyzed term text.\nDocuments are \u2018boosted\u2019 by the number of matching prefix letters of the suggestion with respect to the original term text.\n\n\nFuzzyCompletionQuery(Analyzer analyzer, Term term)\n\n\n\nScoring\nsuggestion_weight * boost\nwhere suggestion_weight and boost are all integers. \nboost = # of prefix characters matched\n\nContextQuery\nReturn documents that match a CompletionQuery filtered and/or boosted by provided context(s). \n\nContextQuery(CompletionQuery query)\ncontextQuery.addContext(CharSequence context, int boost, boolean exact)\n\n\n\nNOTE: ContextQuery should be used with ContextSuggestField to query suggestions boosted and/or filtered by contexts.\nRunning ContextQuery against a SuggestField will error out.\n\n\nScoring\nsuggestion_weight  * context_boost\nwhere suggestion_weight and context_boost are all integers\n\nWhen used with FuzzyCompletionQuery,\nsuggestion_weight * (context_boost + fuzzy_boost)\n\n\nContext Suggest Field\nTo use ContextQuery, use ContextSuggestField instead of SuggestField. Any CompletionQuery can be used with \nContextSuggestField, the default behaviour is to return suggestions from all contexts. Context for every completion hit \ncan be accessed through SuggestScoreDoc#context.\n\nContextSuggestField(String name, Collection<CharSequence> contexts, String value, int weight)",
    "attachments": {
        "LUCENE-6459.patch": "https://issues.apache.org/jira/secure/attachment/12729214/LUCENE-6459.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14519666",
            "author": "Areek Zillur",
            "date": "2015-04-29T16:26:51+0000",
            "content": "Initial patch. It would be awesome to get some feedback on this! "
        },
        {
            "id": "comment-14530916",
            "author": "Areek Zillur",
            "date": "2015-05-06T17:00:15+0000",
            "content": "Updated Patch:\n\n\tadded documentation\n\tminor cleanup\n\tadded more tests\n\n "
        },
        {
            "id": "comment-14535011",
            "author": "Areek Zillur",
            "date": "2015-05-08T17:22:32+0000",
            "content": "Updated Patch:\n\n\tminor cleanup\n\tadded tests\n\n "
        },
        {
            "id": "comment-14535556",
            "author": "Michael McCandless",
            "date": "2015-05-08T21:18:13+0000",
            "content": "Thanks Areek Zillur, this is a big patch!  I'm trying to wrap my brain around it... it will\ntake some iterations \n\nThe filled-out javadocs are nice.\n\nIt seems like the overall idea is to make a generic index-time and\nsearch-time API that other suggesters could use, but for now it's just\nNRTSuggester using it?  Do we expect the non-document based suggesters\nto also eventually be able to use this API?\n\nOne thing we are struggling with on AnalyzingInfixSuggester is how to\nallow arbitrary context filters (LUCENE-6464) ... I wonder if this API\nwould make that easier.\n\nThis patch also adds new capabilities to NRTSuggester, like fuzzy and\nregexp suggestions?  What other new functions are exposed?  What\nuse-cases do you see for RegexCompletionQuery?\n\nShould FSTPath.toString also include the context?\n\nThe search side largely mirrors/subclasses Lucene's normal search\nclasses (CompletionQuery, CompletionWeight, SuggestIndexSearcher,\netc.) but there are some differences, e.g. we pass an Analyzer to the\ncompletion queries (so they can build the automaton).\n\nIf you try to use ContextQuery against a field that you had not\nindexed contexts with (using ContextSuggestField) do you see any\nerror?  Maybe this is too hard.\n\nAre you allowed to mix ContextSuggestField and SuggestField even for\nthe same field name, within one suggester? "
        },
        {
            "id": "comment-14536908",
            "author": "Areek Zillur",
            "date": "2015-05-09T21:40:18+0000",
            "content": "Thanks Michael McCandless for taking a look!\n\nIt seems like the overall idea is to make a generic index-time and\nsearch-time API that other suggesters could use, but for now it's just\nNRTSuggester using it? Do we expect the non-document based suggesters\nto also eventually be able to use this API?\n\nAt the moment, only NRTSuggester is using it. We should use this API for other suggesters, \nbut maybe in a separate issue . For LUCENE-6464, the existing ContextQuery needs \nto add support for BooleanClause.Occur.\n\n\nThis patch also adds new capabilities to NRTSuggester, like fuzzy and\nregexp suggestions? What other new functions are exposed? What\nuse-cases do you see for RegexCompletionQuery? \n\nIn terms of new functionality, fuzzy, regex and context queries are added. One thing to\nnote, for fuzzy and context queries, the suggestion scores are influenced by their common \nprefix length (w.r.t. query term) and query-time context boosts respectively, \nalong with index-time suggestion weights. IMO, the way a suggestion is scored currently\nneeds some thought. As we only allow integer index-time weights, one possibility would\nbe to use index-weight + (Int.MAX * boost) instead of using MaxWeight of suggestions?\n\nIMO RegexCompletionQuery can be used to query multiple prefixes at one go. This can allow \nfor simpler query analyzer, but still give the power to query for synonyms, domain-specific typos etc. \nIn the future, we can also add boosting  (like in ContextQuery) where query-time boosts can be \nspecified for some matched prefixes of the regex pattern.\n\n\nShould FSTPath.toString also include the context?\nIt should, will change.\n\n\nbut there are some differences, e.g. we pass an Analyzer to the\ncompletion queries (so they can build the automaton)\n\nopen to suggestions on improving this \n\n\nIf you try to use ContextQuery against a field that you had not\nindexed contexts with (using ContextSuggestField) do you see any\nerror? Maybe this is too hard.\n\nThere should not be any error. A ContextQuery will never be run on a SuggestField, \nCompletionQuery rewrites appropriately given the type of the field (context-enabled or not). \nThis also makes non-context queries work as expected when run against ContextSuggestField \n(as in the query is wrapped as a ContextQuery with no context filtering/boosting).\n\nIf a ContextSuggestField is indexed with no context, then a null context is extracted at query \ntime for the entry. Fields with no context will only be returned, if a wildcard context '*' is \nspecified (default behaviour of ContextQuery). \n\n\nAre you allowed to mix ContextSuggestField and SuggestField even for\nthe same field name, within one suggester?\n\nNo you are not. If mixed, CompletionFieldsConsumer will throw IllegalArgumentException\nupon indexing. "
        },
        {
            "id": "comment-14536921",
            "author": "Areek Zillur",
            "date": "2015-05-09T21:56:19+0000",
            "content": "Updated patch:\n\n\tadded test querying empty contexts with boosts\n\tadd context to FSTPath.toString\n\n "
        },
        {
            "id": "comment-14539324",
            "author": "Areek Zillur",
            "date": "2015-05-12T06:12:55+0000",
            "content": "Added test for mixing field types for same field. "
        },
        {
            "id": "comment-14542941",
            "author": "Areek Zillur",
            "date": "2015-05-13T23:58:09+0000",
            "content": "Updated Patch:\n\n\tdon't allow zero length suggestion values\n\timprove docs\n\tadded tests\n\n "
        },
        {
            "id": "comment-14543434",
            "author": "Michael McCandless",
            "date": "2015-05-14T09:36:36+0000",
            "content": "\nWe should use this API for other suggesters, but maybe in a separate issue \n\nYes, definitely separate!\n\nIn terms of new functionality, fuzzy, regex and context queries are added. \n\nOK, cool, these are nice additions.\n\nquery-time context boosts\n\nCool: so you boost some contexts more than others, using ContextQuery.\n\nAs we only allow integer index-time weights\n\nI thought we accept long (not int) as index-time weight?  (But, I\nthink that really is overkill... maybe they should just floats, like\nper-field boosting at index time).  But we can worry about this\nlater...\n\none possibility would be to use index-weight + (Int.MAX * boost) instead of using MaxWeight of suggestions\n\nSorry I don't understand the idea here?\n\n\nIf you try to use ContextQuery against a field that you had not indexed contexts with (using ContextSuggestField) do you see any error? Maybe this is too hard.\n\nThere should not be any error. A ContextQuery will never be run on a SuggestField\n\nIt seems like we could detect this mis-use, since CompletionTerms seems to know whether the field was indexed with contexts or not?  I.e, if I accidentally try to run a ContextQuery against a field indexed with only SuggestField, it seems like I should get an exception saying I screwed up ... (similar to trying to run a PhraseQuery on a field that did not index positions)?  Maybe add a simple test case?\n\n\nA ContextQuery will never be run on a SuggestField, \nCompletionQuery rewrites appropriately given the type of the field (context-enabled or not). \n\nOK maybe at that rewrite is the time to throw the exc?\n\n\nThis also makes non-context queries work as expected when run against ContextSuggestField \n(as in the query is wrapped as a ContextQuery with no context filtering/boosting).\n\nOK, for that direction it makes sense allow ... good.\n\n\nAre you allowed to mix ContextSuggestField and SuggestField even for the same field name, within one suggester?\n\nNo you are not. If mixed, CompletionFieldsConsumer will throw IllegalArgumentException upon indexing.\n\nOK, excellent.\n\nCan we rename TopSuggestDocsCollector.num() to maybe .getCountToCollect or something a bit more verbose?\n\nNet/net this is a nice change, thanks Areek Zillur! "
        },
        {
            "id": "comment-14544044",
            "author": "Areek Zillur",
            "date": "2015-05-14T17:13:18+0000",
            "content": "Thanks Michael McCandless for the feedback \n\n\nI thought we accept long (not int) as index-time weight? (But, I\nthink that really is overkill... maybe they should just floats, like\nper-field boosting at index time)\nIMO, a suggestion weight is just an index-time boost for the\nassociated entry.\n\n\none possibility would be to use index-weight + (Int.MAX * boost) instead of using MaxWeight of suggestions\n\nSorry I don't understand the idea here?\n\nAfter a query automaton has been intersected with the FST in NRTSuggester, \nboosts and/or context is computed/extracted from each of the partial matched paths\nby the CompletionWeight before performing a TopN search.\nFor example, FuzzyCompletionWeight would count the number of prefix characters\na matched input has w.r.t. the analyzed query prefix and set the boost for it to the\nnumber of common prefix length.\nCalculating a suggestion score of weight + (maxWeight * boost) makes sure that \nentries with a higher boost (longer common prefix w.r.t. query prefix) will always be \nscored higher regardless of the index-time weight of suggestion entries. The \nsegment-level maxWeight is stored in CompletionPostingsFormat (CompletionIndex),\nand the maxWeight is computed across all segments at query-time.\nSince, the maximum weight for any suggestion entry will be <= Integer.MAX_VALUE, we\ncan just replace the maxWeight for a suggestField with Integer.MAX_VALUE? One problem\nmight be the loss of precision when converting the long score to a float?\n\n\nIt seems like we could detect this mis-use, since CompletionTerms seems to know whether the field was indexed with contexts or not? I.e, if I accidentally try to run a ContextQuery against a field indexed with only SuggestField, it seems like I should get an exception saying I screwed up ... (similar to trying to run a PhraseQuery on a field that did not index positions)? Maybe add a simple test case?\nI updated the patch to error out when using a ContextQuery against a SuggestField at rewrite with test.\n\n\nCan we rename TopSuggestDocsCollector.num() to maybe .getCountToCollect or something a bit more verbose?\n\nChanged TopSuggestDocsCollector.num() to getCountToCollect() "
        },
        {
            "id": "comment-14544320",
            "author": "Areek Zillur",
            "date": "2015-05-14T20:36:18+0000",
            "content": "Updated Patch:\n\n\tpre-sort context length in ContextQuery\n\tadded test to ensure longer context takes precedence for boosting\n\n "
        },
        {
            "id": "comment-14552580",
            "author": "Michael McCandless",
            "date": "2015-05-20T16:16:57+0000",
            "content": "IMO, a suggestion weight is just an index-time boost for the associated entry.\n\n+1\n\nShouldn't we switch to float (later, separate issue!)?\n\n\nCalculating a suggestion score of weight + (maxWeight * boost) makes sure that \nentries with a higher boost (longer common prefix w.r.t. query prefix) will always be \nscored higher regardless of the index-time weight of suggestion entries. The \nsegment-level maxWeight is stored in CompletionPostingsFormat (CompletionIndex),\nand the maxWeight is computed across all segments at query-time.\nSince, the maximum weight for any suggestion entry will be <= Integer.MAX_VALUE, we\ncan just replace the maxWeight for a suggestField with Integer.MAX_VALUE? One problem\nmight be the loss of precision when converting the long score to a float?\n\nOK I think I understand!  It's a scoring model that guarantees that\nthe search-time score ranking comes first and index time ranking is\nused only for tie-breaking the search-time score.\n\nBut, I'm not sure that's a good goal?  E.g I may not want a very low\nindex-time boosted suggestion that has more shared prefix to score\nhigher than a highly index-time boosted suggestion that matched a bit\nsmaller prefix?\n\nE.g. when I type \"pyh\" into google, the top suggestion is \"python\"\n(prefix=2) and after that is \"pyhs2\" (prefix=3).\n\nAnyway, I think scoring will forever be a challenging topic and we\njust have to keep it pluggable (CompletionScorer.score).\n\nHmm ant precommit is failing for me:\n\n\n-documentation-lint:\n     [echo] checking for broken html...\n    [jtidy] Checking for broken html (such as invalid tags)...\n   [delete] Deleting directory /l/areek/lucene/build/jtidy_tmp\n     [echo] Checking for broken links...\n     [exec] \n     [exec] Crawl/parse...\n     [exec] \n     [exec] Verify...\n     [exec] \n     [exec] file:///build/docs/suggest/org/apache/lucene/search/suggest/document/CompletionTerms.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.CompletionFieldsProducer.CompletionsTermsReader.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.CompletionFieldsProducer.CompletionsTermsReader.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec] \n     [exec] file:///build/docs/suggest/org/apache/lucene/search/suggest/document/SuggestField.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.CompletionTokenStream.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.CompletionTokenStream.html\n     [exec] \n     [exec] file:///build/docs/suggest/org/apache/lucene/search/suggest/document/class-use/CompletionWeight.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec] \n     [exec] file:///build/docs/suggest/org/apache/lucene/search/suggest/document/CompletionScorer.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.NRTSuggester.html\n     [exec] \n     [exec] file:///build/docs/suggest/org/apache/lucene/search/suggest/document/ContextSuggestField.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.CompletionTokenStream.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/search/suggest.document.CompletionTokenStream.html\n     [exec] \n     [exec] Broken javadocs links were found!\n\n "
        },
        {
            "id": "comment-14558629",
            "author": "Areek Zillur",
            "date": "2015-05-26T02:38:51+0000",
            "content": "Thanks Michael McCandless for the feedback!\n\n\nAnyway, I think scoring will forever be a challenging topic and we\njust have to keep it pluggable (CompletionScorer.score).\n\nI have made the CompletionScorer.score pluggable by extracting a ScoreMode interface, which \ncomputes a score for a suggestion using its weight and boost (along with min/max weight stats). \n\npublic interface ScoreMode {\n  float score(float weight, float boost, float minWeight, float maxWeight);\n}\n\n\n\nCurrently there are three implementations: \n\n\tBOOST (weight * boost),\n\tIGNORE_BOOST (weight)\n\tBOOST_FIRST (weight + (maxWeight * boost))\n\n\n\nNow any CompletionQuery can plug in one of the score modes (or custom implementation) \nthrough CompletionQuery.setScoreMode.\nDefault score mode for existing queries:\n\n\tPrefixCompletionQuery & RegexCompletionQuery - IGNORE_BOOST\n\tFuzzyCompletionQuery - BOOST_FIRST\n\tContextQuery - BOOST\n\n\n\nScoreMode is also used in the comparator for the TopNSearcher queue.\n\nIt would be good to know your thoughts on how the TopNSearcher queue size is calculated here. \nNow that every intersected prefix path might have a different boost and this boost influences the top N, \nthe topN for the queue has been changed to n * num_prefix_paths from just n to allow for n path \nexpansions per intersected prefix path. In reality, search execution will early terminate as soon as the \noriginal topN results have been collected. \n\nUpdated Patch:\n\n\tAdded ScoreMode for pluggable scoring\n\tIncrease test coverage\n\tAdded dedicated tests for PrefixCompletionQuery, RegexCompletionQuery,\n   FuzzyCompletionQuery and ContextQuery\n\tFixed javadocs, making ant precommit happy\n\n "
        },
        {
            "id": "comment-14560047",
            "author": "Areek Zillur",
            "date": "2015-05-26T22:56:49+0000",
            "content": "Updated patch:\n\n\tremoved ScoreMode interface (will add it in a separate issue)\n\tadded more tests\n\n "
        },
        {
            "id": "comment-14561616",
            "author": "Michael McCandless",
            "date": "2015-05-27T20:04:36+0000",
            "content": "Thanks Areek Zillur, new patch looks great, passes ant precommit ... I'll commit soon. "
        },
        {
            "id": "comment-14561674",
            "author": "Areek Zillur",
            "date": "2015-05-27T20:38:20+0000",
            "content": "Added changes entry "
        },
        {
            "id": "comment-14561680",
            "author": "Areek Zillur",
            "date": "2015-05-27T20:39:28+0000",
            "content": "Added changes entry "
        },
        {
            "id": "comment-14561856",
            "author": "Areek Zillur",
            "date": "2015-05-27T22:23:51+0000",
            "content": "minor cleanup (don't throw redundant IOException in CompletionQuery ctor) "
        },
        {
            "id": "comment-14562444",
            "author": "ASF subversion and git services",
            "date": "2015-05-28T07:53:11+0000",
            "content": "Commit 1682158 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1682158 ]\n\nLUCENE-6459: add common suggest API for document based NRT suggester "
        },
        {
            "id": "comment-14562500",
            "author": "ASF subversion and git services",
            "date": "2015-05-28T08:31:47+0000",
            "content": "Commit 1682170 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1682170 ]\n\nLUCENE-6459: add common suggest API for document based NRT suggester "
        },
        {
            "id": "comment-14562515",
            "author": "ASF subversion and git services",
            "date": "2015-05-28T08:38:41+0000",
            "content": "Commit 1682172 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1682172 ]\n\nLUCENE-6459: carry forward changes from backport "
        },
        {
            "id": "comment-14562520",
            "author": "Michael McCandless",
            "date": "2015-05-28T08:40:33+0000",
            "content": "Thanks Areek Zillur, I committed the last patch!\n\nI ran PMD linter and it spotted a few issues:\n\n\nlucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight.java:52:\tAvoid unused private fields such as 'maxWeight'.\nlucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight.java:53:\tAvoid unused private fields such as 'minWeight'.\n\nlucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester.java:97:\tAvoid unused private fields such as 'endByte'.\nlucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester.java:173:\tAvoid unused local variables such as 'search'.\n\n\n\nCan you look into them?\n\nAlso, the API to add ContextSuggestField is somewhat annnoying with\nJava 7, e.g.:\n\n\n    document.add(new ContextSuggestField(\"context_suggest_field\", Collections.<CharSequence>singletonList(\"type1\"), \"suggestion1\", 4));\n\n\n\nMaybe we can improve this to take a varargs? "
        },
        {
            "id": "comment-14713165",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:58+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}