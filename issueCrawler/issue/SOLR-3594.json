{
    "id": "SOLR-3594",
    "title": "SolrCore() doesn't wait SolrCore.getSearcher() to register _searcher",
    "details": {
        "affect_versions": "3.4",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "SolrCore() executes SolrCore.getSearcher(...) and returns without checking if getSearcher(...) already registered _searcher. As result: if we have SolrEventListener with slow newSearcher(), we can end test before _searcher registered and get then searcher closes and searcher opens doesn't match.",
    "attachments": {
        "SOLR-3594.patch": "https://issues.apache.org/jira/secure/attachment/12535642/SOLR-3594.patch",
        "testSearchersManagement.patch": "https://issues.apache.org/jira/secure/attachment/12535072/testSearchersManagement.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Egor Pahomov",
            "id": "comment-13406456",
            "date": "2012-07-04T11:39:34+0000",
            "content": "test reproducing the problem "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13406556",
            "date": "2012-07-04T14:33:49+0000",
            "content": "The test could just do a simple search and that would ensure that the searcher was registered before proceeding.\n\nThe real question here is unrelated to tests: should the SolrCore constructor should wait for a searcher to be registered before returning? "
        },
        {
            "author": "Egor Pahomov",
            "id": "comment-13406601",
            "date": "2012-07-04T15:53:34+0000",
            "content": "Is there any reason why we shouldn't? Constructor of SolrCore guarantees us to return correct Core. I can't say about core, which still trying to register something and fails my \"without commits\" tests, that it's correct.    "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13407416",
            "date": "2012-07-05T19:34:46+0000",
            "content": "The real question here is unrelated to tests: should the SolrCore constructor should wait for a searcher to be registered before returning?\n\ni don't think so. Just because a searcher isn't available yet, doesn't mean the SolrCore is unusable - we shouldn't block other uses of the SolrCore just because a searcher isn't available yet. the first thread that attempts to use getSearcher() is what should block on the listeners (depending on the setting of useColdSearcher)\n\nThe test failure suggests to me that something is wonky with how were are tracking the searcher opens and doing cleanup \u2013 either in SolrCore.close() or in the test framework itself. "
        },
        {
            "author": "Egor Pahomov",
            "id": "comment-13407806",
            "date": "2012-07-06T08:32:02+0000",
            "content": "I'll tell you the reason. We create Core. It's create Searcher. Usually it registers it, and when we close core, core closes the searcher. But if we couldn't(because of data race) register searcher, we wouldn't able to find it and close. So we would have 1 search opening and 0 closing. So test would fail. I really can't understand, why we wouldn't wait for searcher to register. It's so natural. We do it in commit, why we shouldn't do it in SolrCore()? It's quite easy - my patch proves it. and we have predictable state of core. other case we just looses one searcher and saying it's not even a problem. May be in this case we shouldn't count searcher closers and  openings. \n\nIt reminds me of an old soviet joke:\nOn nude beach:\"comrade Rabinovich, or take of your cross, or put on your pants\".     "
        }
    ]
}