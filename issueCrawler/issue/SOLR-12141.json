{
    "id": "SOLR-12141",
    "title": "Solr does not start on Windows and Linux/Mac with Java 10 or later",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "scripts and tools"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.3"
        ],
        "affect_versions": "7.0,                                            7.1,                                            7.2,                                            7.3",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If you try to start Solr on Windows with Java 10, it fails with the following message:\n\n\nC:\\Users\\Uwe Schindler\\Desktop\\solr-7.3.0\\bin>solr start -e techproducts\n\nERROR: Java 1.8 or later is required to run Solr. Current Java version is: 10\n\n\n\nJava 8 and Java 9 works. I did not try Linux, but the version parsing on Windows is so braindead (i tried to fix it for Java 9 already). Windows CMD shell does not know any numerical comparisons, so it fails as \"10\" is alphabetically smaller \"9\".\n\nI hope this is better on Linux.\n\nWhy do we have the version check at all? Wouldn't it be better to simply wait for a useful message by the Java VM on startup because of wrong class file format? This is too simply to break, especially as the output of \"java -version\" is not standardized (and changes with Java 10 to also have a date code,...). It also may contain \"openjdk\" instead of \"java\".\n\nSo please please, let's get rid of the version check!",
    "attachments": {
        "SOLR-12141.patch": "https://issues.apache.org/jira/secure/attachment/12916253/SOLR-12141.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-26T20:12:33+0000",
            "content": "Here is the fix for Windows:  SOLR-12141.patch \nThe reason for borkenness was the quotes around the comparison. If windows detects a plain number, then it compares it as number. But the quotes caused it to use alphabetical comparison.\n\nI will quickly test linux, but the WIndows fix should be ready to commit. ",
            "author": "Uwe Schindler",
            "id": "comment-16414462"
        },
        {
            "date": "2018-03-26T20:42:35+0000",
            "content": "I added a slightly improved patch that also works with EA versions. ",
            "author": "Uwe Schindler",
            "id": "comment-16414489"
        },
        {
            "date": "2018-03-26T21:38:56+0000",
            "content": "There is a nother problem (this also affects Linux). Java 10 no longer has -XX:+UseParNewGC, it was removed. ConcMarkSweepGC is still there but may get removed soon. ",
            "author": "Uwe Schindler",
            "id": "comment-16414601"
        },
        {
            "date": "2018-03-26T21:40:40+0000",
            "content": "In addition it prints a warning, as it thinks it's 32 bit (although Java 10 is always 64 bits). The reason is a check using -d64 which is no longer accepted in Java 10 (it fails, so it thinks that it's not 64 bits). ",
            "author": "Uwe Schindler",
            "id": "comment-16414604"
        },
        {
            "date": "2018-03-26T21:57:15+0000",
            "content": "There is a nother problem (this also affects Linux). Java 10 no longer has -XX:+UseParNewGC, it was removed\n\nThis flag was already obsolete in Java 8, as ConcMarkSweepGC automatically enables it (see http://openjdk.java.net/jeps/173). So I will simply remove it in both Windows and Linux. ",
            "author": "Uwe Schindler",
            "id": "comment-16414627"
        },
        {
            "date": "2018-03-26T22:04:25+0000",
            "content": "New patch fixes GC issues by removing obsolete flag. ",
            "author": "Uwe Schindler",
            "id": "comment-16414639"
        },
        {
            "date": "2018-03-26T22:20:16+0000",
            "content": "New patch fixes 64 bit test (will only be executed on Java 8). Linux is not affected as it does not have this check. ",
            "author": "Uwe Schindler",
            "id": "comment-16414658"
        },
        {
            "date": "2018-03-26T22:35:04+0000",
            "content": "I tested Linux - Same issue (alphabetic comparison, not numeric):\n\n\nthetaphi@serv1:~/solr-7.3.0/bin$ ./solr start -e techproducts\nYour current version of Java is too old to run this version of Solr\nWe found version 10, using command '/home/jenkins/tools/java/64bit/jdk-10/bin/java -version', with response:\nopenjdk version \"10\" 2018-03-20\nOpenJDK Runtime Environment 18.3 (build 10+46)\nOpenJDK 64-Bit Server VM 18.3 (build 10+46, mixed mode)\n\nPlease install latest version of Java 1.8 or set JAVA_HOME properly.\n\nDebug information:\nJAVA_HOME: /home/jenkins/tools/java/64bit/jdk-10\nActive Path:\n/home/jenkins/tools/java/64bit/jdk-10/bin/:/home/thetaphi/apache-ant-1.8.4/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-16414692"
        },
        {
            "date": "2018-03-26T22:37:12+0000",
            "content": "Actually on Linux it's even worse, it compares the full version string, so \"10\" < \"1.8\" is always true. BUMMER. ",
            "author": "Uwe Schindler",
            "id": "comment-16414697"
        },
        {
            "date": "2018-03-26T23:27:15+0000",
            "content": "maybe add a simple \"no-op\" main method class and run it? If it fails with non-zero exit code, just print an error like \"unsupported or broken java: `java -version`\" or whatever. i think it would be a lot less fragile than parsing version strings which may change in format etc. ",
            "author": "Robert Muir",
            "id": "comment-16414772"
        },
        {
            "date": "2018-03-26T23:28:44+0000",
            "content": "+1, I'd do the same on windows. Maybe it should also simply return the major version number, so the later stuff enabling switches for java 9 and java 10 GC logging can be simplified. ",
            "author": "Uwe Schindler",
            "id": "comment-16414775"
        },
        {
            "date": "2018-03-27T00:12:44+0000",
            "content": "Alternatively this shell command would work to get \"major\" java version:\n\n\nthetaphi@serv1:~$ /home/jenkins/tools/java/64bit/jdk1.8.0_162/bin/java -version 2>&1 | head -1 | sed -Ee's/^.*version \"(1\\.)?([0-9]+)?.*$/\\2/'\n8\nthetaphi@serv1:~$ /home/jenkins/tools/java/64bit/jdk-9/bin/java -version 2>&1 | head -1 | sed -Ee's/^.*version \"(1\\.)?([0-9]+)?.*$/\\2/'\n9\nthetaphi@serv1:~$ /home/jenkins/tools/java/64bit/jdk-9.0.4/bin/java -version 2>&1 | head -1 | sed -Ee's/^.*version \"(1\\.)?([0-9]+)?.*$/\\2/'\n9\nthetaphi@serv1:~$ /home/jenkins/tools/java/64bit/jdk-10/bin/java -version 2>&1 | head -1 | sed -Ee's/^.*version \"(1\\.)?([0-9]+)?.*$/\\2/'\n10\nthetaphi@serv1:~$ /home/jenkins/tools/java/64bit/jdk-11-ea+5/bin/java -version 2>&1 | head -1 | sed -Ee's/^.*version \"(1\\.)?([0-9]+)?.*$/\\2/'\n11\n\n\n\nWorks on Linux and Macintosh, on Solaris it would need \"gsed\". ",
            "author": "Uwe Schindler",
            "id": "comment-16414804"
        },
        {
            "date": "2018-03-27T07:14:19+0000",
            "content": "Actually, the current AWK script does not even work with Solaris, this has to be fixed anyways. ",
            "author": "Uwe Schindler",
            "id": "comment-16415132"
        },
        {
            "date": "2018-03-27T08:38:45+0000",
            "content": "My \"simple suggestion \"to fix Linux script:\n\n\njava -version 2>&1 | head -1 | awk -F '\"' '/version/ {print $2}' | sed -e's/^1\\.//' | sed -e's/[.-].*$//'\n\n\n\nThis is just an extension of the current code (the AWK). After that it just strips \"1.\" from beginning of version (for Java 8 compatibility) and then it removes everything after first \".\" or \"-\". The remaining stuff should be the major version as integer. I will post patch soon.\n\nI was also talking with Dawid Weiss and Robert said the same: We should really replace the version parsing in later Solr versions and repalce by a simple call to a precompiled class file. ",
            "author": "Uwe Schindler",
            "id": "comment-16415235"
        },
        {
            "date": "2018-03-27T09:03:13+0000",
            "content": "Here is the patch. I tested it on Windows and Linux with Java 7, Java 8, Java 9, Java 9.0.4, Java 10 and Java 11-ea. It successfully starts for all versions, except Java 7 (as expected), printing the following error:\n\n\nthetaphi@serv1:~/solr-7.3.0/bin$ ./solr start -e techproducts\nYour current version of Java is too old to run this version of Solr.\nWe found major version 7, using command '/home/jenkins/tools/java/64bit/jdk1.7.0_80/bin/java -version', with response:\njava version \"1.7.0_80\"\nJava(TM) SE Runtime Environment (build 1.7.0_80-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)\n\nPlease install latest version of Java 8 or set JAVA_HOME properly.\n\nDebug information:\nJAVA_HOME: /home/jenkins/tools/java/64bit/jdk1.7.0_80\n\n\n\nI will commit this later so we can respin the 7.3 release. Any comments or suggestions.\n\nIn future issues we should really get rid of the version parsing with shell magic, as this is likely to break. I will open a separate issue. ",
            "author": "Uwe Schindler",
            "id": "comment-16415273"
        },
        {
            "date": "2018-03-27T09:04:18+0000",
            "content": "By the way: On Solaris the whole script does not work anyways. At least it would need to use \"gawk\". So I don't take care here: SOLR-7708 ",
            "author": "Uwe Schindler",
            "id": "comment-16415274"
        },
        {
            "date": "2018-03-27T20:49:50+0000",
            "content": "Commit ade2cf2e742fc4f2c312064df9e1ac78159bb23a in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ade2cf2 ]\n\nSOLR-12141: Fix \"bin/solr\" shell scripts (Windows/Linux/Mac) to correctly detect major Java version and use numerical version comparison to enforce minimum requirements. Also remove obsolete \"UseParNewGC\" option. This allows to start Solr with Java 10 or later. ",
            "author": "ASF subversion and git services",
            "id": "comment-16416214"
        },
        {
            "date": "2018-03-27T20:51:06+0000",
            "content": "Commit f8b8ac71904c96a1fd43acc1a129e45ff83597b9 in lucene-solr's branch refs/heads/branch_7x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f8b8ac7 ]\n\nSOLR-12141: Fix \"bin/solr\" shell scripts (Windows/Linux/Mac) to correctly detect major Java version and use numerical version comparison to enforce minimum requirements. Also remove obsolete \"UseParNewGC\" option. This allows to start Solr with Java 10 or later. ",
            "author": "ASF subversion and git services",
            "id": "comment-16416221"
        },
        {
            "date": "2018-03-27T20:51:58+0000",
            "content": "Commit 98a6b3d642928b1ac9076c6c5a369472581f7633 in lucene-solr's branch refs/heads/branch_7_3 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=98a6b3d ]\n\nSOLR-12141: Fix \"bin/solr\" shell scripts (Windows/Linux/Mac) to correctly detect major Java version and use numerical version comparison to enforce minimum requirements. Also remove obsolete \"UseParNewGC\" option. This allows to start Solr with Java 10 or later. ",
            "author": "ASF subversion and git services",
            "id": "comment-16416223"
        },
        {
            "date": "2018-03-27T20:52:40+0000",
            "content": "I fixed the issue and pushed to 7.3, 7.x and master branches. ",
            "author": "Uwe Schindler",
            "id": "comment-16416224"
        }
    ]
}