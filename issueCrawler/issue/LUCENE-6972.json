{
    "id": "LUCENE-6972",
    "title": "QueryBuilder should not differentiate single position and multiple positions queries when the analyzer produces synonyms.",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.4,                                            5.5",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.7",
            "7.0"
        ],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "When synonyms are involved the querybuilder differentiate two cases. When there is only one position the query is composed of one BooleanQuery which contains multiple should clauses. This does not interact well when trying to apply a minimum_should_match to the query. For instance if a field has a synonym rule like \"foo,bar\" the query \"foo\" will produce:\n(foo bar)\n... two optional clauses at the root level. If we apply a minimum should match of 50% then the query becomes:\n(foo bar)~1 \nThis seems wrong, the terms are at the same position.\nIMO the querybuilder should produce the following query:\n((foo bar))\n... and a minimum should match of 50% should be not applicable to a query with only one optional clause at the root level.\nThe case with multiple positions works as expected. \nThe user query \"test foo\" generates:\n(test (foo bar)) \n... and if we apply a minimum should match of 50%:\n(test (foo bar))~1",
    "attachments": {
        "LUCENE-6972.patch": "https://issues.apache.org/jira/secure/attachment/12781675/LUCENE-6972.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15096437",
            "author": "Adrien Grand",
            "date": "2016-01-13T16:10:04+0000",
            "content": "Thanks Jim, the change looks good to me. I'll merge it soon. "
        },
        {
            "id": "comment-15096648",
            "author": "Adrien Grand",
            "date": "2016-01-13T17:38:13+0000",
            "content": "Hmm actually I'm seeing failures in the queryparser module with these changes on trunk (patch attached, I had to do some changes due to the new SynonymQuery):\n\n   [junit4] Tests with failures [seed: 551E3E67CB732A19]:\n   [junit4]   - org.apache.lucene.queryparser.classic.TestMultiAnalyzer.testMultiAnalyzer\n   [junit4]   - org.apache.lucene.queryparser.ext.TestExtendableQueryParser.testSynonyms\n   [junit4]   - org.apache.lucene.queryparser.classic.TestQueryParser.testSynonyms\n   [junit4]   - org.apache.lucene.queryparser.ext.TestExtendableQueryParser.testNewFieldQuery\n   [junit4]   - org.apache.lucene.queryparser.ext.TestExtendableQueryParser.testCJKSynonym\n   [junit4]   - org.apache.lucene.queryparser.classic.TestQueryParser.testCJKSynonym\n   [junit4]   - org.apache.lucene.queryparser.classic.TestQueryParser.testNewFieldQuery\n\n "
        },
        {
            "id": "comment-15096811",
            "author": "Jim Ferenczi",
            "date": "2016-01-13T19:04:53+0000",
            "content": "Sorry I forgot to add a comment about merging into trunk. I don't think it is needed because the new SynonymQuery packs all the synonyms in the same query so minimum should match is not affected. Though there would be things to do (not in this issue) to handle single word synonyms that appear in a multi position query with a SynonymQuery (the analyzeMultiBoolean does not use the SynonymQuery). "
        },
        {
            "id": "comment-15097072",
            "author": "Adrien Grand",
            "date": "2016-01-13T21:53:55+0000",
            "content": "OK I see! Maybe we should still add your new test to trunk? "
        },
        {
            "id": "comment-15097152",
            "author": "Robert Muir",
            "date": "2016-01-13T22:30:55+0000",
            "content": "I got confused by the patch being converted to trunk. I agree, the fix should be for 5.x only.\n\nThe reason it happens, createMinShouldMatch does this:\n\n if (query instanceof BooleanQuery) {\n ...\n\n\n\nAnd this gets confused by the 5.x \"SynonymQuery\" (which is a BooleanQuery with coord disabled).\n\nI think rather than change the structure of the queries we generate here, we should just check for enabled coordination factor in that instanceof instead. It contains the change better, to just the minShouldMatch logic, vs adding additional unnecessary boxing / changing the shape of many queries. "
        },
        {
            "id": "comment-15105807",
            "author": "Adrien Grand",
            "date": "2016-01-18T20:43:41+0000",
            "content": "Jim Ferenczi How do you feel about changing the patch to check the coord factor as suggested by Robert? "
        },
        {
            "id": "comment-15105867",
            "author": "Jim Ferenczi",
            "date": "2016-01-18T21:58:27+0000",
            "content": "Rewrote the patch after Robert Muir suggestion about checking coordination factor instead. Adrien Grand can you check ?   "
        },
        {
            "id": "comment-15105888",
            "author": "Robert Muir",
            "date": "2016-01-18T22:20:38+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15439089",
            "author": "Michael McCandless",
            "date": "2016-08-26T14:06:23+0000",
            "content": "Bulk move of still open issues from 6.2 to 6.3. "
        }
    ]
}