{
    "id": "SOLR-2849",
    "title": "Solr maven dependencies: logging",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "components": [
            "Build"
        ],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I was looking at my maven based project's Solr-core dependencies (trunk), and observed some issues that I think should be fixed in Solr's maven poms. I ran mvn dependency:tree \u2013 the output is further below.  There are two changes I see needed, related to logging:\n\n\tslf4j-jdk14 should be runtime scope, and optional.\n\thttpclient depends on commons-logging.  Exclude this dependency from the httpclient dependency, and add a dependency on jcl-over-slf4j with compile scope.\n\tZookeeper depends on Log4j, unfortunately. There is an issue to change this to SLF4J: ZOOKEEPER-850. In the mean time we should exclude it and use log4j-over-slf4j with compile scope, at the solrj pom.\n\n\n\nAs an aside, it's unfortunate to see all those velocity dependencies.  It even depends on struts \u2013 seriously?!  I hope solritas gets put back into a contrib sometime: SOLR-2588\n\nSteve, if you'd like to me to create the patch, I will.\n\n\n[INFO] +- org.apache.solr:solr-core:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.solr:solr-solrj:jar:4.0-SNAPSHOT:compile\n[INFO] |  |  \\- org.apache.zookeeper:zookeeper:jar:3.3.3:compile\n[INFO] |  |     +- log4j:log4j:jar:1.2.15:compile\n[INFO] |  |     |  \\- javax.mail:mail:jar:1.4:compile\n[INFO] |  |     |     \\- javax.activation:activation:jar:1.1:compile\n[INFO] |  |     \\- jline:jline:jar:0.9.94:compile\n[INFO] |  +- org.apache.solr:solr-noggit:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-analyzers-phonetic:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-highlighter:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-memory:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-misc:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-queryparser:jar:4.0-SNAPSHOT:compile\n[INFO] |  |  \\- org.apache.lucene:lucene-sandbox:jar:4.0-SNAPSHOT:compile\n[INFO] |  |     \\- jakarta-regexp:jakarta-regexp:jar:1.4:compile\n[INFO] |  +- org.apache.lucene:lucene-spatial:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-suggest:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.lucene:lucene-grouping:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- org.apache.solr:solr-commons-csv:jar:4.0-SNAPSHOT:compile\n[INFO] |  +- commons-codec:commons-codec:jar:1.4:compile\n[INFO] |  +- commons-fileupload:commons-fileupload:jar:1.2.1:compile\n[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile\n[INFO] |  |  \\- commons-logging:commons-logging:jar:1.0.4:compile\n[INFO] |  +- commons-io:commons-io:jar:1.4:compile\n[INFO] |  +- org.apache.velocity:velocity:jar:1.6.4:compile\n[INFO] |  |  +- commons-collections:commons-collections:jar:3.2.1:compile\n[INFO] |  |  \\- oro:oro:jar:2.0.8:compile\n[INFO] |  +- org.apache.velocity:velocity-tools:jar:2.0:compile\n[INFO] |  |  +- commons-beanutils:commons-beanutils:jar:1.7.0:compile\n[INFO] |  |  +- commons-digester:commons-digester:jar:1.8:compile\n[INFO] |  |  +- commons-chain:commons-chain:jar:1.1:compile\n[INFO] |  |  +- commons-validator:commons-validator:jar:1.3.1:compile\n[INFO] |  |  +- dom4j:dom4j:jar:1.1:compile\n[INFO] |  |  +- sslext:sslext:jar:1.2-0:compile\n[INFO] |  |  +- org.apache.struts:struts-core:jar:1.3.8:compile\n[INFO] |  |  |  \\- antlr:antlr:jar:2.7.2:compile\n[INFO] |  |  +- org.apache.struts:struts-taglib:jar:1.3.8:compile\n[INFO] |  |  \\- org.apache.struts:struts-tiles:jar:1.3.8:compile\n[INFO] |  +- org.slf4j:slf4j-jdk14:jar:1.6.1:compile\n[INFO] |  \\- org.codehaus.woodstox:wstx-asl:jar:3.2.7:runtime",
    "attachments": {
        "SOLR-2849_maven_dependencies.patch": "https://issues.apache.org/jira/secure/attachment/12500720/SOLR-2849_maven_dependencies.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jason Rutherglen",
            "id": "comment-13134357",
            "date": "2011-10-24T18:57:19+0000",
            "content": "As an aside, it's unfortunate to see all those velocity dependencies.  It even depends on struts \u2013 seriously?!  I hope solritas gets put back into a contrib sometime: SOLR-2588\n\n+1, move it out! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13134359",
            "date": "2011-10-24T18:59:32+0000",
            "content": "Steve, if you'd like to me to create the patch, I will.\n\nSure, please do. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13134361",
            "date": "2011-10-24T19:01:32+0000",
            "content": "As an aside, it's unfortunate to see all those velocity dependencies. It even depends on struts \u2013 seriously?! I hope solritas gets put back into a contrib sometime: SOLR-2588\n\nI hear ya loud and clear.  I'll aim to move it out over the next week or so.  There's some test hiccup in moving it out, IIRC, let me dust it off and get it relocated.\n\nAs far as the Struts dependency, that's just some transitive POM listing, not some run (or compile)-time dependency.   We certainly don't ship any Struts JARs from Solr and it all works fine. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13135239",
            "date": "2011-10-25T17:11:52+0000",
            "content": "Attached is a patch making a fair amount of changes to dependencies in the maven poms. One of the biggest changes to the poms was shifting dependency exclusions at the solr war level down to the origins of where those dependencies were introduced.  Below is a summary of the changes I made, including notes on changes I did not make.\n\n\n\t/modules/queryparser\n\t\n\t\tmake lucene-sandbox an optional dependency. The dependency is isolated to the XML builder CorePlusExtensionsParser subclass, so it is quite optional.\n\t\n\t\n\t/solr/core\n\t\n\t\tadded direct dependency on lucene-core, instead of leaving it to transitive resolution (a matter of taste)\n\t\texclude commons-logging from commons-httpclient dependency\n\t\tdepend on jcl-over-sfl4j\n\t\texclude many unused dependencies from velocity\n\t\tremove slf4j-jdk14 (moved to war pom)\n\t\tI noticed the ant build depends on guava, but we still don't actually use it, so I opted to not add this dependency.\n\t\n\t\n\t/solr/solrj\n\t\n\t\texclude log4j and jline from zookeeper\n\t\tdepend on log4j-over-slf4j\n\t\texclude commons-logging from commons-httpclient dependency\n\t\tdepend on jcl-over-sfl4j\n\t\tI noticed the ant distribution suggests woodstox is a solrj dependency. I opted to not include it here.  The client doesn't actually depend on it, and SolrJ is usually going to use the efficient binary format any way.\n\t\n\t\n\t/solr/webapp\n\t\n\t\tremoved numerous exclusions from the solr-core dependency, since these were effectively moved\n\t\tdepend on slf4j-jdk scope=runtime optional=true (actually moved it from solr-core)\n\t\n\t\n\n\n\nI reviewed the built war for consistency with the ant build, as well as the solrj dependencies. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13135363",
            "date": "2011-10-25T19:42:31+0000",
            "content": "I updated the patch to account for another problem I noticed.  It turns out that a provided scoped dependency is not transitive. solr-core has a provided dependency on the servlet api. As a consequence, dependencies on solr-core (such as solr-test-framework) didn't pick up this dependency, and so my project using solr-test-framework otherwise had to add this explicit dependency.  So I made it this dependency compile scope in solr-core, and then in the webapp I added the dependency to specify provided, so it doesn't end up in the war. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13135372",
            "date": "2011-10-25T19:58:33+0000",
            "content": "I noticed the ant distribution suggests woodstox is a solrj dependency. I opted to not include it here. The client doesn't actually depend on it, and SolrJ is usually going to use the efficient binary format any way.\n\nWhile it's true that Solr's dist target doesn't insist that woodstox is a solrj dependency (hence your \"suggests\"), there is no mechanism for insistence; all Solr modules' dependencies under the Ant build are \"suggestions\".\n\nDavid, as you may recall, we've previously had this discussion on SOLR-2756 and on #lucene-dev IRC.\n\nThis February 2010 Apache CXF email message from Daniel Kulp that Yonik linked to on SOLR-2042 provides decent rationale for keeping woodstox as a runtime dependency: it's a lot faster than the JVM implementation.  The CXF project's Common Utilities module still has this dependency (see the parent POM for the definition of the stax implementation groupId and artifactId).\n\nAs I said in the previous version of this argument, getting rid of the woodstox dependency should be done project wide, if it is to happen, not just in the Maven build.  My position is essentially that the Maven build should track the Ant build as closely as possible.\n\nAs I'm sure you're aware, all you have to do to not use the woodstox dependency when you depend on solrj is add an exclusion.  This is no great hardship. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13135375",
            "date": "2011-10-25T20:04:35+0000",
            "content": "Ok.  FWIW, I didn't introduce the woodstox or guava discrepancies in the build between maven and ant; I just opted to let them be.  I completely understand that it is better to be consistent.  I will update the patch to fix these two discrepancies.  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13135392",
            "date": "2011-10-25T20:18:37+0000",
            "content": "I didn't introduce the woodstox or guava discrepancies in the build between maven and ant; I just opted to let them be.\n\nWow, I have been totally missing the fact that solrj's POM has never had a woodstox dependency.\n\nI will update the patch to fix these two discrepancies. \n\nThanks. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13136230",
            "date": "2011-10-26T19:07:19+0000",
            "content": "SOLR-2588 - Velocity moved back to contrib/velocity has been done on trunk.  Is there a strong desire to do so on 3.x as well?  (no motivation from me on that) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136243",
            "date": "2011-10-26T19:18:51+0000",
            "content": "I'll handle the backport to branch_3x. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136536",
            "date": "2011-10-26T22:38:39+0000",
            "content": "The Velocity contrib retrograde advancement (SOLR-2588) has been backported to branch_3x. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13137359",
            "date": "2011-10-27T18:25:02+0000",
            "content": "I updated the patch with more extensive changes.  These changes assume the latest trunk in which Velocity was moved back to a contrib.\n\nIn order to make the dependencies more consistent with the ant build, I added woodstox to solrj, and guava to solr-core.  \n\nOne new problem that popped up since velocity moved is the fact that the ant build erroneously builds a WAR with commons-beanutils and commons-collections in it.  These were velocity dependencies that aren't used by Solr otherwise. They should be removed from the ant build. I didn't add them to maven because I think the ant side is in error.\n\nBeyond that I found numerous places to consolidate and simplify certain dependencies:\n\nsolr-parent\nsolr-parent is the parent pom of all of Solr.  It had no dependencies but this is a prime place to put several, which I did:\n\n\tslf4j-api\n\tlucene-test-framework (test)\n\tjunit (test)\n\tslf4j-jdk14 (test)\n\n\n\nI was then able to remove various declarations of these in various other poms, since it became redundant.\n\nsolr-contrib-aggregator\nsolr-contrib-aggregator is a pom referring to all of Solr's contrib modules. However strangely, each of the contrib modules references solr-parent as their parent pom, not solr-contrib-aggregator. I changed them all to do this so that I could add dependencies common to all contribs:\n\n\tsolr-core\n\tsolr-test-framework (test)\n\n\n\nAnd then I was able to remove a good number of explicit dependency declarations from contrib poms, including transitive ones (e.g. the servlet api).\n\nI re-verified the solrj dependencies and solr war contents for accuracy. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13137376",
            "date": "2011-10-27T18:37:05+0000",
            "content": "solr-contrib-aggregator is a pom referring to all of Solr's contrib modules. However strangely, each of the contrib modules references solr-parent as their parent pom, not solr-contrib-aggregator.\n\nAs you must already know, aggregation and parent relationships are separate under Maven.  There are standard Maven usage patterns that take advantage of this fact, e.g. parent POM as sibling module (see e.g. the Apache CXF project which uses this pattern) - in this pattern, aggregation is separate from parent relationship.\n\nI did it this way so that we didn't have to publish solr-contrib-aggregator POM (it is not now published), since it seemed like an unnecessary complication.  Aggregation is important only for the purposes of the build, and not for purposes of artifact consumption.\n\nSo if we change solr-contrib-aggregator POM to also be parent, then we have to publish it (this happens via 'ant generate-maven-artifacts').  Also, this POM will no longer simply be an aggregator, so it should be renamed to 'solr-contrib', removing the '-aggregator'. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13137384",
            "date": "2011-10-27T18:47:05+0000",
            "content": "Good point that the aggregator pom would end up getting published now.  No harm; right?\n\nAny other comments or is this committable? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13137401",
            "date": "2011-10-27T19:04:46+0000",
            "content": "One new problem that popped up since velocity moved is the fact that the ant build erroneously builds a WAR with commons-beanutils and commons-collections in it. These were velocity dependencies that aren't used by Solr otherwise. They should be removed from the ant build.\n\nDone. These have been moved to contrib/velocity/lib, and do not end up in solr.war. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13137428",
            "date": "2011-10-27T19:34:47+0000",
            "content": "Chris Male, can you please render your opinion on wether or not solr-contrib-aggregator should stay as-is pre-patch or with the patch's approach?  Keeping as-is means that each contrib needs to declare solr-core & solr-test-framework as dependencies.  The patch moves those dependencies down to a new parent in-between a contrib module and the solr-parent pom which means an extra pom to deploy and potentially understand by an end user.  FYI mvn dependency:tree would be the same either way.  See Steve's comment.  \n\nSteve is barely +1, I am +1. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13137608",
            "date": "2011-10-27T22:07:12+0000",
            "content": "/modules/queryparser: make lucene-sandbox an optional dependency. The dependency is isolated to the XML builder CorePlusExtensionsParser subclass, so it is quite optional.\n\nI don't agree about it being \"quite\" optional.  The lucene-sandbox dependency is there for FuzzyLikeThisQuery and DuplicateFilter.  Making the lucene-sandbox dependency optional means Maven users will have to know that their own project has to depend on lucene-sandbox-X.X.jar if they want to use the builders for any of queries supported by CorePlusExtensionsParser (since a ClassNotFoundException will be thrown when the CorePlusExtensionsParser ctor is invoked): \n\n\n\tTermsFilter\n\tBooleanFilter\n\tDuplicateFilter\n\tMoreLikeThisQuery\n\tBoostingQuery\n\tFuzzyLikeThisQuery\n\n\n\nI think your motivation for making the dependency optional is that most people won't use any of these?  But I don't think this is an appropriate distinction to make for a library.  The queryparser library exposes certain functionality, and we should indicate the dependencies required to enable all of that functionality, not just the subset we think most people will use.  \n\nI think we should only declare dependencies optional when their exclusion will not limit usage.  Right now on trunk, only two deps in one POM (solr core) are declared optional, and the reason is that there really are no transitive dependencies on them. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13137629",
            "date": "2011-10-27T22:16:28+0000",
            "content": "David, I have a question about your use of provided scope.\n\nIn your patch for the solr core POM, you remove a provided scope usage, saying that solr-core is a jar not a war, but then you leave in a provided scope usage and add a comment about its function; your message is decidedly mixed.  Here are the patch excerpts I'm talking about:\n\n\nIndex: dev-tools/maven/solr/core/pom.xml.template\n===================================================================\n--- dev-tools/maven/solr/core/pom.xml.template  (revision 1189433)\n+++ dev-tools/maven/solr/core/pom.xml.template  (revision )\n@@ -138,17 +151,9 @@\n     <dependency>\n       <groupId>org.mortbay.jetty</groupId>\n       <artifactId>jsp-2.1-jetty</artifactId>\n-      <scope>provided</scope>\n+      <scope>provided</scope><!-- FYI provided is non-transitive -->\n     </dependency>\n@@ -162,14 +167,9 @@\n     <dependency>\n       <groupId>javax.servlet</groupId>\n       <artifactId>servlet-api</artifactId>\n-      <scope>provided</scope>\n+      <!-- compile scope; solr-core is a jar not a war -->\n     </dependency>\n\n\n\nShouldn't the same rationale apply to both of these?  If so, we need to pick one and be consistent, right? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13137679",
            "date": "2011-10-27T22:47:34+0000",
            "content": "Any other comments or is this committable?\n\nAll tests pass under Maven for me with your patch.\n\nI don't have any other comments, so I'm +1 to commit, assuming we come to a resolution on the three open issues:\n\n\n\tmoving shared solr contribs' dependency declarations to a renamed solr-contrib-aggregator POM, and publishing this POM\n\tmaking lucene-sandbox an optional dependency in the queryparser module\n\tuse of provided scope in the solr core POM).\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13137979",
            "date": "2011-10-28T03:51:10+0000",
            "content": "Regarding lucene-sandbox; I tend to have a more minimalistic perspective but I don't feel strongly about lucene-sandbox being optional so I will put it back to a full-fledged dependency, and then add an exclusion at the Solr level, in solr-core.\n\nRegarding the servlet-api:  Solr-core genuinely has a dependency on the servlet-api and someone using solr-core had better have it on its class path. Provided scope is incorrect because it is non-transitive (something new I learned).  It needs to be a normal compile scope at solr-core so that if some project, (mine) uses solr-core then it gets pulled in.  In order for it to not wind up in the web app, which is sort of a special rule about the servlet-api in particular, it is redeclared at that pom with provided scope. \n\nRegarding jetty-jsp: I find the jetty-jsp dependency curious as I'm not sure exactly why it is depended on; please enlighten me. I chose to add a comment to its existing declaration rather than change it since I'm not sure what's going on there.  There are two other jetty dependencies; should they all be depended upon in the same way? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13138427",
            "date": "2011-10-28T15:14:00+0000",
            "content": "I don't feel strongly about lucene-sandbox being optional so I will put it back to a full-fledged dependency, and then add an exclusion at the Solr level, in solr-core.\n\n+1\n\nRegarding the servlet-api: Solr-core genuinely has a dependency on the servlet-api and someone using solr-core had better have it on its class path. Provided scope is incorrect because it is non-transitive (something new I learned). It needs to be a normal compile scope at solr-core so that if some project, (mine) uses solr-core then it gets pulled in. In order for it to not wind up in the web app, which is sort of a special rule about the servlet-api in particular, it is redeclared at that pom with provided scope. \n\nSounds good.\n\nRegarding jetty-jsp: I find the jetty-jsp dependency curious as I'm not sure exactly why it is depended on; please enlighten me.\n\nThe Jasper compiler from the jetty-jsp jar is used to validate Solr's JSP files in the Ant build in the Solr webapp module's test target.  The Maven build doesn't perform this validation.  The dependency can be removed from the solr core POM; when I removed the dependency, all tests passed under Maven.\n\nThere are two other jetty dependencies; should they all be depended upon in the same way?\n\nI think the other two, which are required for tests to compile, should remain optional, so that they are not transitive. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140131",
            "date": "2011-10-31T13:12:29+0000",
            "content": "I didn't see my call back to comment on this issue till now.\n\n\nChris Male, can you please render your opinion on wether or not solr-contrib-aggregator should stay as-is pre-patch or with the patch's approach? Keeping as-is means that each contrib needs to declare solr-core & solr-test-framework as dependencies. The patch moves those dependencies down to a new parent in-between a contrib module and the solr-parent pom which means an extra pom to deploy and potentially understand by an end user. FYI mvn dependency:tree would be the same either way. See Steve's comment.\n\nI'm really torn I have to say.  Normally I'd be all for having a proper contrib pom but I understand Steven's comments that it seems like another complication.  With that said, I feel the biggest issue is that we should be consistent.  If we have a proper lucene contrib pom, then we should have one for Solr's contribs and for modules too.  I'll happily go +1 if you're prepared to do all the leg work. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13140439",
            "date": "2011-10-31T18:52:48+0000",
            "content": "I attached an updated patch. Changes:\n\n\n\tAfter some thought about Steve & Chris's comments, I backed out the intermediate parent contrib pom.  So the solr-core and solr-test-framework deps went to back to the solr contribs.\n\tThe jetty-jsp dependency in solr-core was changed to test.\n\tI backed-out making lucene-sandbox an optional dependency on lucene-queryparser. In solr-core I made an exclusion.\n\n\n\nTests pass.  It's a good idea to do a \"mvn clean\" first. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13140545",
            "date": "2011-10-31T20:55:15+0000",
            "content": "Attached is an updated patch with minor changes to use ${project.groupId} in some more places, and to remove some unneeded dependency declarations that were already transitively pulled in. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13140623",
            "date": "2011-10-31T22:16:33+0000",
            "content": "New version of the patch, based on David's most recent patch.\n\nThe changes:\n\n\n\tRemoved the junit dependency from all Lucene POMs that depend on the lucene-test-framework.\n\tSwitched the solr-cell xercesImpl dependency to v2.8.1, the version used in the Ant build.\n\tRemoved the DIH-extras xercesImpl dependency, since the Ant build doesn't include xercesImpl on the classpath.\n\tRemoved the lucene-specific xercesImpl version from the grandfather POM's dependencyManagement section, for two reasons:\n\t\n\t\tNo other dependency with groupId org.apache.lucene is listed in the grandfather POM's dependencyManagement section; and\n\t\tOnly one module actually depends on this artifact: the benchmark module.\n\t\n\t\n\n\n\nCommitting shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13140721",
            "date": "2011-11-01T00:22:01+0000",
            "content": "Committed to trunk and branch_3x.\n\nThanks David! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157853",
            "date": "2011-11-27T12:36:05+0000",
            "content": "Bulk close after 3.5 is released "
        },
        {
            "author": "David Smiley",
            "id": "comment-13679934",
            "date": "2013-06-10T21:28:41+0000",
            "content": "This is an old issue that was resolved but I want to re-assess one thing:\n\nThe slf4j-log4j12 (formerly slf4j-jdk14) is still not marked as optional. But if you're using maven to depend on solrj, wouldn't you want the consumer to pick the target logger?  Maybe they like jdk14, maybe they like log4j, maybe logback.  So rather than force them to exclude slf4j-jdk14 (which is annoying), it could be marked as optional. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13680602",
            "date": "2013-06-11T20:02:09+0000",
            "content": "So rather than force them to exclude slf4j-jdk14 (which is annoying), it could be marked as optional.\n\nI see ant dist under solr/ still puts the slf4j-log4j12 jar into dist/solrj-lib/.  As I've said previously on this issue, I think the Maven config should mirror the Ant config: until we stop distributing the slf4j-log4j12 jar as a solrj dependency, I don't think we should mark it as optional in the Maven config. "
        }
    ]
}