{
    "id": "SOLR-772",
    "title": "malformed XML updates w/Resin's Stax parser doesn't trigger errors",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "Originally noted by yonik on the mailing list...\n\nThen I tried Resin 3.1.1 and 3.1.6....\nThings seem to mostly work... until you get to updating:\n   ...\nNow here is another really weird thing... post any garbage to the\nupdate URL, and you still get a success!  It successfully fails on\njetty.  Mangled query requests correctly fail.  This perhaps initially\npoints to something specific to the XML config in jetty?\n\nFollowup from Hoss...\n\n\nSkimming the code in XmlUpdateRequestHandler, and testing out various inputs, this seems like a bug in com.caucho.xml.stream.XMLStreamReaderImpl.\n\nUsing curl as yonik described...\n\ncurl -i http://localhost:8080/solr/update --data-binary 'crap' -H 'Content-type:text/xml; charset=utf-8'\n\n...resin-3.1.6 (on Linux) returns a success (incorrectly) but the request \nhandler doesn't log any action taken. if we alter they payload ('crap') \nabove we can see some different behaviors...\n\n1) 'crap<add><doc><field name=\"id\">hoss</field></doc></add>'\n\nSolr adds the doc, ignorant of the crap before the add command\n\n2) 'crap<add><doc></doc></add>'\n\nSolr correctly complains about the missing id field (example configs require it)\n\n3) 'crap<add>'\n\nSolr returns success even though it's not legal XML\n\n4) 'crap<add'\n\nGet the following exception...\n\n\njavax.xml.stream.XMLStreamException: :1:7 Expected > at 0xffffffff\n        at com.caucho.xml.stream.XMLStreamReaderImpl.error(XMLStreamReaderImpl.java:1268)\n        at com.caucho.xml.stream.XMLStreamReaderImpl.readElementBegin(XMLStreamReaderImpl.java:689)\n        at com.caucho.xml.stream.XMLStreamReaderImpl.readNext(XMLStreamReaderImpl.java:653)\n        at com.caucho.xml.stream.XMLStreamReaderImpl.next(XMLStreamReaderImpl.java:594)\n        at org.apache.solr.handler.XmlUpdateRequestHandler.processUpdate(XmlUpdateRequestHandler.java:148)\n\n\n\n5) '<add><doc>'\n\nThis appears to hang ... the connection seems to be left open as if it's waiting for more data.\n\n...\nNone of these 5 things happen when testing with Jetty.\n\nI'm not really very familiar with this StaX stuff \u2013 but I suspect what's happening here is that on \"wacky\" input Caucho's XMLStreamReaderImpl.next() is returning values we're not expecting instead of throwing exceptions ... and depending on the input, this is either causing the XmlUpdateRequestHandler.processUpdate loop/switch to ignore the garbage data, or get stuck in an infinite loop (when there is no END_DOCUMENT)\n\nThe question is: Are we doing the right thing, and com.caucho.xml.stream.XMLStreamReaderImpl is broken; or is XMLStreamReaderImpl producing a legal sequence of parse events for those bad inputs and we're not dealing with it properly?\n\nFWIW: adding the following line to our web.xml seems to make everything \"work\" (by which i mean: \"fail\") as expected...\n\n<system-property javax.xml.stream.XMLInputFactory=\"com.ctc.wstx.stax.WstxInputFactory\" />\n\n...do we want commit this?  \n\n(It wouldn't be the first time we've had to put in settings to force Resin to use the XML Library we want because something doesn't work with theirs.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12630932",
            "date": "2008-09-15T01:58:26+0000",
            "content": "2 New questions for the Stax experts:\n\n1) We're including a Stax implementation in the Solr libs.  Is there any reason not to explicitly call XMLInputFactory.getInstance(\"com.ctc.wstx.stax.WstxInputFactory,...) instead of letting the servlet container pick? (or using a system property that might affect other things)\n\n2) Looking at the javadocs for XMLStreamReader, would it make more sense for us to explicitly use methods like nextTag() and require(type,ns,name) instead of the while (true) loop and case statement we currently have?  It seems like XMLStreamReader Impls should throw exceptions on malformed XML, but is there any reason why we shouldn't be more paranoid and explicit in testing our assumptions? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13589530",
            "date": "2013-02-28T13:25:04+0000",
            "content": "Anyone running Solr in Resin who can do a quick test and (un)confirm this ancient bug running one of the curl commands above? "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15566562",
            "date": "2016-10-11T20:50:56+0000",
            "content": "Ancient question about no-longer supported deployment method (to Resin).  "
        }
    ]
}