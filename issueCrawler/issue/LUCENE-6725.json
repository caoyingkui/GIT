{
    "id": "LUCENE-6725",
    "title": "Reindex crashes the JVM",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "3.5",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "We're using Liferay which uses Lucene behind the screens to index things like documents, web content, users, etc... . When we trigger a full reindex via the Liferay Control Panel, which uses IndexWriter.deleteAll(), the JVM crashes and generates a dump with the following message: \n\n#\n\n\tA fatal error has been detected by the Java Runtime Environment:\n#\n\tSIGSEGV (0xb) at pc=0xffffffff78de94a8, pid=18938, tid=2478\n#\n\tJRE version: Java(TM) SE Runtime Environment (7.0_75-b13) (build 1.7.0_75-b13)\n\tJava VM: Java HotSpot(TM) 64-Bit Server VM (24.75-b04 mixed mode solaris-sparc compressed oops)\n\tProblematic frame:\n\tJ 5227 C2 org.apache.lucene.index.IndexFileNames.segmentFileName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (44 bytes) @ 0xffffffff78de94a8 [0xffffffff78de9480+0x28]",
    "attachments": {
        "branch5-jdk7u75-results.txt": "https://issues.apache.org/jira/secure/attachment/12749791/branch5-jdk7u75-results.txt",
        "hs_err_pid18938.log": "https://issues.apache.org/jira/secure/attachment/12749039/hs_err_pid18938.log",
        "lucene-3.5-ant-test-results.txt": "https://issues.apache.org/jira/secure/attachment/12749224/lucene-3.5-ant-test-results.txt",
        "branch5-jdk8u51-results.txt": "https://issues.apache.org/jira/secure/attachment/12749792/branch5-jdk8u51-results.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14659774",
            "author": "Jan Eerdekens",
            "date": "2015-08-06T09:58:28+0000",
            "content": "Currently reproducing this behaviour is difficult as we're seeing the following:\n\n\n\tthe problem seemed to occur consistently on our production environment (but we can't tried it a lot there for obvious reasons)\n\tafter installing a monitoring tool today (a Java agent) the next reindex didn't crash the JVM\n\tthe problem (at first) didn't happen on our pre-production environment (which is the most similar with regards to CPU/memory/... to production)\n\tin the weeks after discovering the problem, it also happened once on the pre-production environment, but on retrying the reindex afterwards it didn't happen again\n\tthe problem isn't reproducible on our test environment or local machines (Apple MacBook Pro's)\n\n\n\nWe also created a small standalone Java tool that is also able to do the IndexWriter.deleteAll() call on a copy of the index, but that doesn't trigger the same JVM crash on our production and pre-production environments (using in the same JVM version). "
        },
        {
            "id": "comment-14659794",
            "author": "Jan Eerdekens",
            "date": "2015-08-06T10:11:04+0000",
            "content": "Problem seems (very) similar to what this guy reported in the mailing list: http://mail-archives.apache.org/mod_mbox/lucene-java-user/201306.mbox/%3CCA+9jHe=H9-wun5FedByRr5GuKKt1O7f=xH3NVgbikkb8wt1iqQ@mail.gmail.com%3E "
        },
        {
            "id": "comment-14659807",
            "author": "Dawid Weiss",
            "date": "2015-08-06T10:24:09+0000",
            "content": "It looks like a JVM issue, not Lucene issue. We don't test against Solaris because we don't have access to a test machine running this OS.\nCould you try running a full suite of Lucene test on those (test) machines running Solaris? Do the test pass (run it 10 times, they're randomized).\n\nIf you can reproduce the problem (more or less reliably) than the hotspot-dev mailing list would be more appropriate to report this issue, but you can also post it here, we'll pass the information along. "
        },
        {
            "id": "comment-14659855",
            "author": "Jan Eerdekens",
            "date": "2015-08-06T11:29:31+0000",
            "content": "Dawid Weiss: we also contacted Liferay support and their conclusion was also that it'll probably be some sort of JVM issue, but I just wanted to see if you guys thought the same. Running the Lucene test suite is a great idea that I didn't think of. I'll try to get someone of the admin team to run it on the production server and see what result (and hopefully crashes) that gives. Is it enough to download the Lucene 3.5.0 sources and run 'ant test' or are you referring to other tests? "
        },
        {
            "id": "comment-14659862",
            "author": "Dawid Weiss",
            "date": "2015-08-06T11:36:27+0000",
            "content": "Yeah... 3.5.0 is fairly ancient.  It'd be great if you could try with the latest 4.x; if it's a JVM/ hardware issue then it should manifest itself with a newer Lucene too. For example:\n\n\nsvn checkout https://svn.apache.org/repos/asf/lucene/dev/tags/lucene_solr_4_10_4\ncd lucene_solr_4_10_4/lucene\nant test-core\n\n\n\nYou can try with 3.5 as well though:\n\nsvn checkout https://svn.apache.org/repos/asf/lucene/dev/tags/lucene_solr_3_5_0\ncd lucene_solr_3_5_0/\ncd lucene/\nant test\n\n "
        },
        {
            "id": "comment-14659867",
            "author": "Jan Eerdekens",
            "date": "2015-08-06T11:41:13+0000",
            "content": "Yup, but sadly we're stuck with that version as it is bundled with our Liferay version (which is a recent one... but uses an ancient Lucene version). I think we'll have to switch to a separate SOLR server to also solve some performance issues and that would allow us to use newer SOLR/Lucene versions.\n\nTo be sure I'll have them run the tests for both versions so we gather the most data. "
        },
        {
            "id": "comment-14659877",
            "author": "Dawid Weiss",
            "date": "2015-08-06T11:46:14+0000",
            "content": "If you have access to a Solaris/Sparc box then the results of your tests would be interesting regardless of the JVM issue (like I said, we don't have access to such a machine). You could also try the 5.x branch (which is the newest) and trunk (bleeding edge) if you have time/ resources.\n\n\nhttps://svn.apache.org/repos/asf/lucene/dev/trunk\nhttps://svn.apache.org/repos/asf/lucene/dev/branches/branch_5x\n\n\n\nJVM hiccups are actually fairly common with Lucene. Search the JIRA and you'll find a lot of references. "
        },
        {
            "id": "comment-14659954",
            "author": "Jan Eerdekens",
            "date": "2015-08-06T12:46:27+0000",
            "content": "I have only direct machine access to the test environment and will run the tests the next time I'm at the client. I've asked them to do at least the Lucene 3.5 and Lucene 4 tests on the pre-production and production environments and send me the results. I don't know what the timing will be for that as they'll need to schedule someone to do this during what is currently a vacation period over here. Also the fact that the tests try to download stuff from the internet will possibly complicate the installation and running a bit.\n\nThx for the help already and hopefully I'll be able to get back to you soon with some results. "
        },
        {
            "id": "comment-14659962",
            "author": "Dawid Weiss",
            "date": "2015-08-06T12:53:02+0000",
            "content": "> Also the fact that the tests try to download stuff from the internet will possibly complicate the installation and running a bit.\n\nExternal JARs are downloaded, nothing else. You could prefetch everything with:\n\nant resolve\n\n\n\nThen all JARs should be present and no network connection should be needed. "
        },
        {
            "id": "comment-14660006",
            "author": "Uwe Schindler",
            "date": "2015-08-06T13:32:17+0000",
            "content": "One thing to mention: Although Lucene 3.5 works with Java 7 or Java 8, some tests may fail because of some bug in the tests that relied on order of execution which got random on Java 7. I am not sure when this was fixed. You may search JIRA for the Java7 label.\n\nif you see test failures it should therefore still be fine, unless you get JVM crashes. "
        },
        {
            "id": "comment-14661529",
            "author": "Jan Eerdekens",
            "date": "2015-08-07T09:06:17+0000",
            "content": "My first test run, for Lucene 3.5 on our test environment, already causes the same JVM crashes (SIGSEGV on IndexFileNames.segmentFileName) as we saw when triggering a reindex in Liferay on production. What files should I provide: just the console output of the test, all the hs_err_pid files or even the whole test subdirectory? "
        },
        {
            "id": "comment-14661537",
            "author": "Dawid Weiss",
            "date": "2015-08-07T09:12:21+0000",
            "content": "Can you try with a newer Lucene first? It contains better error reporting so that maybe we can isolate it (perhaps we can just run a single class instead of the entire suite of tests). We can't really throw the entire build at the JVM folks \u2013 it's too much work narrowing it down.\n\nIf this doesn't work, we'll try to narrow it down with 3.5. "
        },
        {
            "id": "comment-14661540",
            "author": "Dawid Weiss",
            "date": "2015-08-07T09:13:37+0000",
            "content": "Also, if possible, I'd re-run the tests with the newest JVM from Oracle \u2013 7u80... this may be something already resolved. "
        },
        {
            "id": "comment-14661559",
            "author": "Uwe Schindler",
            "date": "2015-08-07T09:39:10+0000",
            "content": "I would suggest to update to Java 8u51. I have an instance of Liferay (recent version) running in production with Java 8. This performs much better (faster), maybe that also solves the issue.\n\nAlternatively use Java 7u80.\n\nIn General, I am thinking about installing a VM with OpenSolaris on Policeman Jenkins (http://jenkins.thetaphi.de), but this bug may also be related to SPARC platform... SPARC is much more sensible to unaligned accesses to memory and SIGSEGV/SIGBUS earlier. But this is a problem with Oracle's JDK. "
        },
        {
            "id": "comment-14661564",
            "author": "Dawid Weiss",
            "date": "2015-08-07T09:45:56+0000",
            "content": "Yeah, I think it's the processor/ hardware (and the associated assembly generation) that is the cause here. "
        },
        {
            "id": "comment-14661573",
            "author": "Jan Eerdekens",
            "date": "2015-08-07T09:58:09+0000",
            "content": "A next batch of results, still for 3.5 (newer is next): on 7u80 I still get the same crashes, but on 8u51 all the tests succeed and I see no crashes. It is really starting to look like a JVM issue (and probably really specific to Solaris/SPARC). A JVM upgrade is an option, albeit that JDK8 is only 'supported' by Liferay EE, but not 'certified' yet.\n\nI'll try to do some tests with Lucene 4.10 and maybe also already try to start Liferay with the JDK8 version and see how it behaves. "
        },
        {
            "id": "comment-14661820",
            "author": "Jan Eerdekens",
            "date": "2015-08-07T13:18:42+0000",
            "content": "The tests for Lucene 4.10.4 for the 3 JVM versions don't seem to cause JVM crashes. "
        },
        {
            "id": "comment-14679713",
            "author": "Jan Eerdekens",
            "date": "2015-08-10T07:33:11+0000",
            "content": "Dawid Weiss: today and maybe Thursday too I have access to the Solaris machine so I can run the testsuites for 5 and trunk if that can help you for other things than my issue (as that seems to be purely a JVM + Lucene 3.5 related issue, which we can work around by upgrading the JVM)? If they can help you, what results/files should I gather and send to you? "
        },
        {
            "id": "comment-14679724",
            "author": "Dawid Weiss",
            "date": "2015-08-10T07:40:11+0000",
            "content": "Hi Jan. Well, if you can run Lucene tests from the 5.x branch (and trunk) it'd be nice to know they pass (or fail). Should the tests fail, try to re-run them with the same \"randomization seed\" \u2013 the full repro line is typically printed when a failure happens (not in Lucene 3.5 though).\n\nIf something is reproducible, we'd definitely want to know about it (and so would probably the JVM folks). hotspot logs and test output logs would be very handy (so tee them to a file, if you can). \n\nIf you have time, a full run is great:\n\nant test\n\n\n\nIf you don't, then just the core tests should also do:\n\ncd core\nant test\n\n "
        },
        {
            "id": "comment-14679731",
            "author": "Jan Eerdekens",
            "date": "2015-08-10T07:49:31+0000",
            "content": "Dawid Weiss: I can spare a couple of hours today on the machine when I don't need it for testing. What's the difference in running time between the full set and the core tests alone? "
        },
        {
            "id": "comment-14679767",
            "author": "Dawid Weiss",
            "date": "2015-08-10T08:15:21+0000",
            "content": "Depends on the hardware (number of CPUs, disk drives, memory) and on randomized seed selection (because iteration loops, codecs, etc. vary). On my modest desktop the results are (trunk):\n\n> cd lucene\n> time ant test-core\nTotal time: 3 minutes 6 seconds\nreal    3m7.098s\nuser    21m5.092s\nsys     0m24.440s\n\n> time ant test\nTotal time: 7 minutes 5 seconds\n\nreal    7m5.494s\nuser    57m0.224s\nsys     1m36.848s\n\n\n\nSo not that long. Repeating a few times makes sense though (again: randomization). If you wish to run longer tests, you need to enable nightly/ slow too:\n\n\n> ant test -Dtests.nightly=true -Dtests.slow=true\n\n\n\nIf you wish to experiment with 3.5, then you could try to narrow down the offending/ crashing test by running a single suite, for example:\n\nant test-core -Dtestcase=TestDocumentWriter\n\n\n\nNote the test runner (and command line options) have changed quite a lot since 3.5. "
        },
        {
            "id": "comment-14681437",
            "author": "Jan Eerdekens",
            "date": "2015-08-11T08:33:42+0000",
            "content": "I've been only able to run 2 tests, using different JVMs, for the 5 branch. I first tried to run all tests with all the params you gave, but those took very long 30+ minutes and eventually the machine ran out of disk space. The DEV machine is a bit memory and disk constraint, so I re-ran the tests, but this time only test-core without the params which took about 10 minutes to run each time. Just let me know if this is sufficient. If so I should also be able to run to same for trunk on Thursday. "
        },
        {
            "id": "comment-14681633",
            "author": "Dawid Weiss",
            "date": "2015-08-11T11:16:06+0000",
            "content": "The nightlies indeed may consume a lot of disk space and CPU. Thanks for running the tests on those two JVMs though!\n\nThe segfault is really difficult to explain \u2013 there is nothing special in:\n\nJ 5227 C2 org.apache.lucene.index.IndexFileNames.segmentFileName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (44 bytes) @ 0xffffffff78de94a8 [0xffffffff78de9480+0x28]\n\n\nto justify a seg fault. \n\nI think you should move to a newer JVM, as suggested by Uwe. "
        },
        {
            "id": "comment-14681637",
            "author": "Dawid Weiss",
            "date": "2015-08-11T11:17:38+0000",
            "content": "Closing as won't fix since it only happens on a very old Lucene version (3.5.0). Newer Lucene versions seem to pass just fine. A workaround is to upgrade the JVM to a modern release of 1.8.x line. "
        }
    ]
}