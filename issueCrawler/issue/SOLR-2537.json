{
    "id": "SOLR-2537",
    "title": "Refactor Solr modules structure",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "3.1.1"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Solr modules are nested in a non-standard archeotype (e.g. Solr Core module is in the src dir of Solr parent).\nAlso, a workaround for avoiding maven dependencies between Solr Core and Testframework makes it impossible to add a depenency on Solr-3.2-SNAPHOST (Solr Search Server) since it's packaged as a war, to import EmbeddedSolrServer.java, for example. It has been discussed on the mailing list[1].\n\nI've, in the mlist, suggested to \"create yet one more module for Tests which depend on Solr Core and on the Test Framework. The org burden of that extra module, versus the ease of building configuration, I believe, outweights.\"\n\nHowever I realize there's a major drawback in that, i.e. that Solr Core will build without passing the tests in the other module. There're 2 solutions:\n1. Make Solr Core a parent module that encompasses a thin Solr Core, the TestFramework module, and the Tests-only module;\n2. 'Downgrade' Testframework from being a fully-fledged module by moving the packages under Solr Core. \n2a. Move them under Solr Core test packages.\n2b. move them under Solr Core src\n\nTo me 2a is most intuitive. Those that want a dependency on Solr TestFramework declare it with <classifier>tests</classifier>, which packages only the tests, and the Solr Core classes those require.[2][3]\n\nThe same refactoring applies to lucuene.\n\n[1] http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201105.mbox/%3c2D127F11DC79714E9B6A43AC9458147FBAD42EAD@suex07-mbx-03.ad.syr.edu%3e\n\n[2] http://maven.apache.org/guides/mini/guide-attached-tests.html\n[3] I've successfully used it before. https://code.google.com/p/memorizeasy/source/browse/MemoPlatform/persistenceui/pom.xml",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13037814",
            "date": "2011-05-23T09:15:28+0000",
            "content": "svn diff would complain about missing directories. \nI've uploaded the stripped project here[1]. Essentially there's no more test-framework under both lucene and solr (classes moved under the cores packages), Solr Core has been moved out of solr/src into a solr/core, and webapp has been moved to solr/webapp a la par with core.\n\nFrom the core's pom.xml I've commented:\n<!--      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>add-test-source</id>\n            <phase>generate-test-sources</phase>\n            <goals>\n              <goal>add-test-source</goal>\n            </goals>\n            <configuration>\n              <sources>\n                <source>test-framework</source>\n              </sources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>-->\nand replaced it with:\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <executions>\n          <execution>\n            <goals>\n              <goal>test-jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\nI've run the tests of solr core and lucene core they passed (some had errors but they had them even before, expecting Jetty).\n\nI hope you consider this refactoring.\n\n[1] http://dp4j.sf.net/debug/SOLR-2537 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13037918",
            "date": "2011-05-23T12:50:36+0000",
            "content": "I get a 403 error code when I follow this link: http://dp4j.sourceforge.net/debug/SOLR-2537/ "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13037922",
            "date": "2011-05-23T12:59:01+0000",
            "content": "Also, a workaround for avoiding maven dependencies between Solr Core and Testframework makes it impossible to add a depenency on Solr-3.2-SNAPHOST (Solr Search Server) since it's packaged as a war, to import EmbeddedSolrServer.java, for example. It has been discussed on the mailing list[1].\n\nTwo issues with this:\n\n\n\tCan you explain why the workaround makes it impossible to add a dependency on the Solr war?  This makes no sense to me.\n\tEmbeddedSolrServer.java is included in the solr-core jar - why not depend on this smaller jar instead of the war?\n\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13037929",
            "date": "2011-05-23T13:13:06+0000",
            "content": "The test-framework was pulled out of the tests in SOLR-2061, to make them re-usable in external projects.  I don't think it makes sense to roll that back - let's try to figure out how to make the Maven stuff work without changing the official Ant build.\n\nGabriele, can you take a step back and describe more fully why the current setup is a problem?\n\nThose that want a dependency on Solr TestFramework declare it with <classifier>tests</classifier>, which packages only the tests, and the Solr Core classes those require.\n\nBut this would expose a bunch of Solr tests, which aren't usable outside of Solr, to consumers of the test-jar.  The solr test framework classes need to be separate from the other solr test classes. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13037930",
            "date": "2011-05-23T13:16:12+0000",
            "content": "\nI get a 403 error code when I follow this link: http://dp4j.sourceforge.net/debug/SOLR-2537/ \ntry http://dp4j.sourceforge.net/debug/SOLR-2537.zip\n\n   1. Can you explain why the workaround makes it impossible to add a dependency on the Solr war? This makes no sense to me.\nSorry, I meant 'jar'. The project Solr Search Server (the one in solr/src/webapp which contains EmbeddedSolrServer) is packaged as a war. But in a Solr plugin I need to depend on the class files packaged in a jar. How do I do that? Attempts were mentioned here[1].\n\n\n   2. EmbeddedSolrServer.java is included in the solr-core jar - why not depend on this smaller jar instead of the war?\n\nWhen building it locally it won't work, probably because it's under the webapp project. Steps to reproduce mentioned in the mlist[1]:\n\n\nsvn co -r 1104120 http://svn.apache.org/repos/asf/lucene/dev/branches/branch_3x/ solr\ncd solr; ant get-maven-poms; mvn -N -Pbootstrap install; mvn -DskipTests install\nwget http://dp4j.sf.net/debug/embeddedServerTest.zip\nunzip embeddedServerTest.zip\ncd embeddedServerTest; mvn -X test\n\n\n\n[1] http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201105.mbox/%3cBANLkTinhw3vM9dJGPvMSRwXhS8MwJOYZEg@mail.gmail.com%3e\n\n "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13037937",
            "date": "2011-05-23T13:31:37+0000",
            "content": "\nI don't think it makes sense to roll that back - let's try to figure out how to make the Maven stuff work without changing the official Ant build.\nThe issue is that we increase complexity trying with complex maven configuration (and then people say that maven is complicated), unless we go for option 1 (parent solr-core with solr-core-src module, tesframework module, solr-core-tests-src).\n\nThe good of SOLR-2061 was to define the Testframework (content); I've had problems with its delivery.\nThe TestFramework module on its own is a pretty 'lazy module'/interface. It reminds me of the 'lazy class' refactoring.\n\ncan you take a step back and describe more fully why the current setup is a problem?\nA maven project is not expected to contain other maven projects inside it, unless a parent. Solr-core (solr/src) has 'webapp' inside it (under src?). This is non-standard complying, but most importantly very confusing for new-comers. Then the copy-paste trick (done by the maven-helper?) adds to the complication.\nBeside, the issues mentioned in the previous comment.\n\n\nBut this would expose a bunch of Solr tests, which aren't usable outside of Solr, to consumers of the test-jar. The solr test framework classes need to be separate from the other solr test classes.\nAgreed. I've not come across any other 'maven design' approach. I hope it's possible to <exclude> unwanted packages. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13037944",
            "date": "2011-05-23T13:40:46+0000",
            "content": "and those things in poms:\n\n<parent>\n<relativePath>../../pom.xml</relativePath>\n  </parent>\n\n\n\n   <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <!-- Solrj tests are run from the solr-core build; -->\n          <!-- otherwise there would be a cyclic dependency, -->\n          <!-- since Solrj's tests depend on solr-core, and  -->\n          <!-- solr-core depends on Solrj.                   -->\n          <skipTests>true</skipTests>\n        </configuration>\n      </plugin>\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13037950",
            "date": "2011-05-23T13:45:12+0000",
            "content": "My take-away from your problem description here is that the Lucene/Solr Maven setup is complicated and non-standard, and this causes problems for users.  While I agree and sympathize, the Maven build is not an official build; correctness of the POMs for the purpose of describing the release artifacts is the primary goal.  The fact that they can be used to drive a build is a bonus.\n\nThat said, if we can find a way to simplify the project structure, and even make it closer to Maven convention, without negatively impacting the official Ant build, that would be great.  Along those lines, Robert Muir has started an issue to clean up the Solr Ant build: SOLR-2537.\n\nA maven project is not expected to contain other maven projects inside it, unless a parent.\n\nThis is false.  Maven explicitly separates the parent-child relationship from the aggregation relationship.  Aggregation-only POMs are run-of-the-mill. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13037959",
            "date": "2011-05-23T14:08:34+0000",
            "content": " without negatively impacting the official Ant build \nThat's the issue. Complicating the poms not to move folders is the status quo, and doesn't seem to work (war/jar issue); But as you mention, we could impact/influence SOLR-2537 so that the project lends itself to both ant and maven builders.\n\nThe fact that they can be used to drive a build is a bonus.\nMy +1 for escalating to more than a bonus. The I've praised the exemplarey work on dev-tools in NUTCH-892[1], essentially making it easier to build Solr allows for easier adoption, contribution, and provides newbie documentation.\n\nWhere is this issue going to? I've provided re-producable steps to a build (bonus!) issue, and recommended a simplyfing (bonus!) solution.\n\n\n[1] https://issues.apache.org/jira/browse/NUTCH-892?focusedCommentId=13037537&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13037537 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13037972",
            "date": "2011-05-23T14:38:13+0000",
            "content": "Where is this issue going to?\n\nI see two issues:\n\n\n\tAFAICT, you have a problem consuming Maven artifacts.\n\tYou object to Solr's non-conventional project layout.\n\n\n\nThese are completely separate in my mind.  I think #2 is much, much harder to do than #1.  Let's work through #1.\n\nI tried to reproduce your build problem, except I used the (default) HEAD revision of the branch_3x branch:\n\n\nsvn co http://svn.apache.org/repos/asf/lucene/dev/branches/branch_3x/\ncd branch_3x; ant get-maven-poms; mvn -N -Pbootstrap install; mvn -DskipTests install\nwget http://dp4j.sf.net/debug/embeddedServerTest.zip\nunzip embeddedServerTest.zip\ncd embeddedServerTest; mvn -X test\n\nI looked over your POM and everything looks okay, with the exception that the solr test framework dependency should be declared as <scope>test</scope>.  I left it as-is, though, to see if it might be the source of problems.\n\nThe first problem I encountered is that Maven (v2.2.1) doesn't like annotations with the default Java 1.3 compiler setting.  So I added a maven-compiler-plugin configuration to your POM, with source and target set to 1.6.  This allowed everything to compile.\n\nBut you apparently don't have any real tests in your SolrConfigTest?  I don't see any @Test annotations, or methods named \"test...\" in SolrConfigTest.  This is the test output I get:\n\n\n-------------------------------------------------------------------------------\nTest set: SolrConfigTest\n-------------------------------------------------------------------------------\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.062 sec <<< FAILURE!\ninitializationError(SolrConfigTest)  Time elapsed: 0.006 sec  <<< ERROR!\njava.lang.RuntimeException: No runnable methods!\n        at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.computeTestMethods(LuceneTestCase.java:1040)\n\nWhat happens for you? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13037979",
            "date": "2011-05-23T14:52:37+0000",
            "content": "Where is this issue going to?  I've provided re-producable steps to a build (bonus!) issue, and recommended a simplyfing (bonus!) solution.\n\nGabriele, I downloaded the .zip file you pointed to, and unpacked it, and it's a full Lucene/Solr source tree, apparently with the changes you want.\n\nWhen I saw this, I didn't look any further.  I don't want to spend the time it will take to figure out the differences between what you propose and what currently exists.  The problem is that performing these comparisons is really time-consuming without tool support.\n\nPlease attach a patch to this issue with your changes, along with whatever \"svn move\", \"svn delete\", etc. instructions are required to transform the source, as well as the revision you're basing it on, so that I can look at the patch, and use my IDE to help me understand what you are proposing.\n\nAttaching a patch also allows you to indicate acceptance of the Apache Software License for your contributions.  This is very important. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13038085",
            "date": "2011-05-23T17:37:34+0000",
            "content": " What happens for you? \n\nRunning SolrConfigTest\nTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.28 sec <<< FAILURE!\n\nResults :\n\nFailed tests: \n  test(SolrConfigTest): ensure your setUp() calls super.setUp()!!!\n\nTests run: 1, Failures: 1, Errors: 0, Skipped: 0\n\n\n\nThis is after adding an empty body dummy test method (sorry missed that, but maven 3.0.3 doesn't complain about annotations) and checking the head (1126606).\nThe issue I had was that it used to complain about something with the classpath. After svn -r 1104120 update and mvn test again:\n\n\nResults :\n\nTests in error: \n  test(SolrConfigTest): javax/servlet/ServletRequest\n\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n\nNetBeans doesn't recognize super.setUp().\n\nI'm okay solving the issue against the latest revision of course. Also, I'd solved my test problem w/o EmbeddedSolrServer which seems redundant to SolrTestCaseJ4, or is there an extra layer being tested in the EmbeddedSolrServer? "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13038108",
            "date": "2011-05-23T18:20:11+0000",
            "content": "Regarding the .zip it's indeed time-consuming to explore. I had summarized the the differences (essentially putting all children at the same level and changing the core pom.xml), and meant the zip just for extra reference.\n\nBTW solution 1. could be implemented w/o changing dirs structure. Solr core becomes an aggregator, the tests/src becomes a child module, and there we have the 3 modules w/o circular dependency as described above. I think this is a more 'maven-friendly' solution to the maven-helper copy-paste workaround. What do you think?\nI could try and patch that perhaps.\n\nBTW, thank you for dedicating time to look into my issue. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13038114",
            "date": "2011-05-23T18:25:12+0000",
            "content": "NetBeans doesn't recognize super.setUp().\n\nIn the .zip file containing your project, SolrConfigTest#setUp() does call super.setUp(), so I guess you removed it in your local version?  I've never used NetBeans.  By contrast, IntelliJ recognizes super.setUp() - since you're extending AbstractSolrTestCase, it should resolve to that class's setUp().  (BTW, did you know that the IntelliJ Community edition is free now?)\n\nSo I still don't understand exactly what the issue is with Solr Maven artifact consumption?\n\nAlso, I'd solved my test problem w/o EmbeddedSolrServer which seems redundant to SolrTestCaseJ4, or is there an extra layer being tested in the EmbeddedSolrServer?\n\nI don't understand any part of that sentence - can someone else chime in here if they understand it? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13038125",
            "date": "2011-05-23T18:35:43+0000",
            "content": "\nRegarding the .zip it's indeed time-consuming to explore. I had summarized the the differences (essentially putting all children at the same level and changing the core pom.xml), and meant the zip just for extra reference.\n\nBTW solution 1. could be implemented w/o changing dirs structure. Solr core becomes an aggregator, the tests/src becomes a child module, and there we have the 3 modules w/o circular dependency as described above. I think this is a more 'maven-friendly' solution to the maven-helper copy-paste workaround. What do you think?\nI could try and patch that perhaps.\n\nPatches welcome!\n\nYou've proposed several different things.  While some of them sound \"essentially\" reasonable, getting a restructured build to work in all the ways it needs to is non-trivial.  While you may think that an actual implementation is \"just for extra reference\", I strongly disagree.  Show me the code!   (In patch form, please.)\n\nSee Robert Muir's example on LUCENE-2995 for how to specify things that don't fit into patches - he gives a series of Subversion commands to be run before the patch can apply.  Restructuring requires this because Subversion's patch format does not represent moves, deletes, etc. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13038248",
            "date": "2011-05-23T21:35:07+0000",
            "content": "\nFailed tests: \n  test(SolrConfigTest): ensure your setUp() calls super.setUp()!!!\n\nPlease see LUCENE-3111, there probably is another bug. I've again posted reproducable steps. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13038251",
            "date": "2011-05-23T21:40:38+0000",
            "content": "Gabriele, I was able to reproduce, with both Maven 3.0.3 and 2.2.1, but I don't know enough about Solr testing to be able to help.\n\nIf I were you, I would copy/paste a similar test from Solr's source tree, get that to succeed in your context, then tweak it to get to what you want to test. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13038264",
            "date": "2011-05-23T21:54:44+0000",
            "content": "I was able to reproduce\nCould you please let it be know there?!\n\nIf I were you, I would copy/paste a similar test from Solr's source tree, get that to succeed in your context, then tweak it to get to what you want to test.\n\nThat's always the way to do! What I even try to do is modify the test write there, because otherwise more often than not copy-pasting a method I end-up needing to copy-paste the whole package, but then there's a dependency on X-Y-Z, etc..\n\nLooking at SolrBasicFunctionalityTest I was able to test what I want against r 1104120 + my structural refactoring. Now checking out without the refactoring one of them complains about java.lang.NoSuchFieldError: core at org.apache.lucene.index.SegmentTermDocs.<init>(SegmentTermDocs.java:48).\nI find it difficult to believe that the structural refactorings were responsible for avoiding this though! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13038272",
            "date": "2011-05-23T22:14:45+0000",
            "content": "\nI was able to reproduce\n\nCould you please let it be know there?!\n\nDone.\n\n\nLooking at SolrBasicFunctionalityTest I was able to test what I want against r 1104120 + my structural refactoring. Now checking out without the refactoring one of them complains about java.lang.NoSuchFieldError: core at org.apache.lucene.index.SegmentTermDocs.<init>(SegmentTermDocs.java:48).\nI find it difficult to believe that the structural refactorings were responsible for avoiding this though!\n\nYour build/test problems should have been a mailing list thread rather than tacked onto this issue, which is about something completely different: build restructuring.  In the future, please bear in mind that it's much simpler (and thus more likely) for people to help you if you keep issues focused. "
        }
    ]
}