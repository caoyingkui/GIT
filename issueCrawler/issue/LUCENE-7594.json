{
    "id": "LUCENE-7594",
    "title": "Float/DoublePoint should not recommend using Math.nextUp/nextDown for exclusive ranges",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "6.4",
            "7.0"
        ]
    },
    "description": "Float/Double points are supposed to be consistent with Double/Float.compare, so +0 is supposed to compare greater than -0. However Math.nextUp/nextDown is not consistent with Double/Float.compare and returns MIN_VALUE for nextUp(-0).",
    "attachments": {
        "LUCENE-7594.patch": "https://issues.apache.org/jira/secure/attachment/12843438/LUCENE-7594.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15751921",
            "date": "2016-12-15T17:18:26+0000",
            "content": "Here is a patch that adds an alternative nextUp/nextDown impl that treats -0 and +0 as different values. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15751994",
            "date": "2016-12-15T17:45:23+0000",
            "content": "Ah, that is trappy... In a way it makes sense as -0.0f is 8000_0000 and min value is 0000_0001, so if you disregard the sign bit there's some logic there. \n\nPatch looks good. I don't know if the compiler will be smart enough to avoid recomputing the static Float.floatToIntBits(-0f). An alternative would be to:\n\nif (Float.compare(f, -0.0) == 0)\n\n\nor simply compare the int representation (Float.toIntBits(f) == 0x8000_0000). Either way, looks good to me. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15752009",
            "date": "2016-12-15T17:48:04+0000",
            "content": "Thanks for having a look Dawid. I'll apply your suggestion when pushing. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15752029",
            "date": "2016-12-15T17:56:04+0000",
            "content": "I checked and javac doesn't recognize it as a static expression, for example:\n\n      10: ldc           #31                 // float -0.0f\n      12: invokestatic  #27                 // Method java/lang/Float.floatToIntBits:(F)I\n\n\nvery likely it'd be optimized away later in hotspot, but any of the alternatives I mentioned are just as good. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15767977",
            "date": "2016-12-21T19:44:32+0000",
            "content": "Commit 10f19641942716ed9de804d43dd3c21898a1e890 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=10f1964 ]\n\nLUCENE-7594: Fixed point range queries on floating-point types to recommend using helpers for exclusive bounds that are consistent with Double.compare. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15767983",
            "date": "2016-12-21T19:45:19+0000",
            "content": "Commit 18d53a43f7b4536572ef98a94ec1d9b529084d1b in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=18d53a4 ]\n\nLUCENE-7594: Fixed point range queries on floating-point types to recommend using helpers for exclusive bounds that are consistent with Double.compare. ",
            "author": "ASF subversion and git services"
        }
    ]
}