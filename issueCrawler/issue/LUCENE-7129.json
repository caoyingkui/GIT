{
    "id": "LUCENE-7129",
    "title": "Prevent @lucene.internal annotated classes from being in Javadocs",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [
            "general/javadocs"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Task"
    },
    "description": "It would be cool if we could prevent @lucene.internal classes from appearing in Javadocs we publish.  This would further discourage use of internal Lucene/Solr classes that are public not for public consumption but only  public so that the code can be accessed across Lucene/Solr's packages.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15206514",
            "author": "Uwe Schindler",
            "date": "2016-03-22T15:11:00+0000",
            "content": "There are two ways to do this:\n\n\n\tQuick'n'dirty: We have to change our filesets (for sources parameter) before invoking the javadocs macro. As Javadocs processes all java files one by one, we may use a fileset instead of the generic packageset element inside the javadoc, excluding those java files we don't want to have. The fileset with tha java files we pass to javadoc would just need  to filter on the contents (file contains \"@lucene.internal\" as an additional selector in the fileset defintion). Of course this slows down a bit, because Ant has to read all files while building the fileset.\n\n\n\n\n\tMore sophisticated: Use our own Doclet that delegates everything to standard doclet, but handles the tags we want to eclude. Somebody coded this; we could add to our tools folder: http://sixlegs.com/blog/java/exclude-javadoc-tag.html (maybe its somewehere in Maven). The issue with doclets is the API hell with interfaces, but this guy has a good way around that (he dynamically creates a proxy for every interface and uses it to delegate).\n\n "
        },
        {
            "id": "comment-15206530",
            "author": "Steve Rowe",
            "date": "2016-03-22T15:22:06+0000",
            "content": "Uwe, your \"Quick'n'dirty\" method would only work for entire classes that have the @lucene.internal annotation - there are places where the annotation is on individual methods.  This method would either over-exclude (annotation occurs anywhere in file) or under-exclude (testing only for class annotation). "
        },
        {
            "id": "comment-15206543",
            "author": "Uwe Schindler",
            "date": "2016-03-22T15:25:55+0000",
            "content": "Nevertheless, the whole \"filtering\" javadocs approach is not useful to prevent people from using the APIs. Nothing can forbid people or their stupid Eclipse autocompleter to use the classes we marked as experimental.\n\nThe correct fix for this is coming with Java 9, but we can start implementing it before:\n\n\tMove all internal APIs to a separate package (this is what Robert wants to do anyways), e.g., org.apache.lucene.internal.\n\tDon't export this package in module-info.java, so it gets completely invisible to anybody using the JAR file as a module (-modulepath instead of -classpath). Only lucene's own modules are allowed to refer to those packages through explicit export \"to\".\n\tJavadoc would work automatically, because Java 9 Javadocs does not document non-exported packages.\n\n\n\nThis approach should be done at some point anyways, but it needs some refactoring of package names. Most is fine, but some JAR files share packages with others. This is no longer possible with Java 9 modules! E.g., Misc modules oal.index package would need to be renamed, because it conflicts with the module exported by lucene-core.jar. "
        },
        {
            "id": "comment-15206555",
            "author": "Uwe Schindler",
            "date": "2016-03-22T15:30:11+0000",
            "content": "Uwe, your \"Quick'n'dirty\" method would only work for entire classes that have the @lucene.internal annotation - there are places where the annotation is on individual methods.\n\nI know, because of that I gave also the 2nd way (\"clean approach\"). This is documented like that on Javadoc's documentation FAQ page at Oracle. They refer to a \"custom doclet\" to do more filtering, but don't give an example. The example above is a possible \"cheap & elegant\" implementation - of course violating forbiddenapis (internal packages, we have to exclude). "
        },
        {
            "id": "comment-15206579",
            "author": "Robert Muir",
            "date": "2016-03-22T15:38:45+0000",
            "content": "I think this is all too complex. people will link to the internal classes, then we will have broken links.\n\nI would prefer an internal package: we could choose not to export it with the java 9 module system, etc. this has already been done before and is easier to reason about. also you look at classes full name and you know instantly its internal, just like the jdk. "
        }
    ]
}