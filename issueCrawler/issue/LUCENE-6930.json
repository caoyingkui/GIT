{
    "id": "LUCENE-6930",
    "title": "Decouple GeoPointField from NumericType",
    "details": {
        "resolution": "Done",
        "affect_versions": "None",
        "components": [
            "modules/spatial"
        ],
        "labels": "",
        "fix_versions": [
            "trunk",
            "5.5"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "GeoPointField currently relies on NumericTokenStream to create prefix terms for a GeoPoint using the precision step defined in GeoPointField. At search time GeoPointTermsEnum recurses to a max precision that is computed by the Query parameters. This max precision is never the full precision, so creating and indexing the full precision terms is useless and wasteful (it was always a side effect of just using indexing logic from the Numeric type). \n\nFurthermore, since the numerical logic always stored high precision terms first, the recursion in GeoPointTermsEnum required transient memory for storing ranges. By moving the trie logic to its own GeoPointTokenStream and reversing the term order (such that lower resolution terms are first), the GeoPointTermsEnum can naturally traverse, enabling on-demand creation of PrefixTerms. This will be done in a separate issue.",
    "attachments": {
        "LUCENE-6930.patch": "https://issues.apache.org/jira/secure/attachment/12782947/LUCENE-6930.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15057865",
            "author": "Michael McCandless",
            "date": "2015-12-15T11:06:43+0000",
            "content": "+1, LegacyNumericType is now deprecated in trunk (to be removed in 7.0), so we should migrate away from it ...\n\nBut we should maybe take this further, once we get all dimensional values based geo queries working well in trunk (e.g. at least DimensionalDistanceQuery and DimensionalDistanceRangeQuery are still missing?) and deprecate the postings based geo queries as well? "
        },
        {
            "id": "comment-15105885",
            "author": "Nicholas Knize",
            "date": "2016-01-18T22:18:40+0000",
            "content": "Attached patch adds the following changes:\n\n\n\tAdds a new GeoPointTokenStream that encodes GeoPointField type into a maximum of 5 \"prefix only\" terms. Full precision post filtering uses DocValues.\n\tAdds a GeoPointTermQuery.TermEncoding enum to choose between existing NUMERIC encoding or new PREFIX encoding\n\tRefactors GeoPointTermsEnum into a base class with two derived classes:\n\t\n\t\tGeoPointNumericTermsEnum - Uses existing NumericTokenStream logic\n\t\tGeoPointPrefixTermsEnum - Uses new GeoPointTokenStream logic\n\t\n\t\n\tRefactors term encoding logic out of GeoUtils into a dedicated GeoEncodingUtils class\n\tAdds randomTermEncoding to TestGeoPointQuery to randomly test both encoding approaches\n\n\n\nQuick luceneutil benchmarks: 76% reduction in index size, 81% boost in indexing performance, 19% average boost in query performance.\n\n\n\n "
        },
        {
            "id": "comment-15105986",
            "author": "Michael McCandless",
            "date": "2016-01-18T23:52:32+0000",
            "content": "Hmm I get compilation errors because things still reference GeoUtils but it was moved?  Maybe run \"ant clean\" first and then you should see the errors? "
        },
        {
            "id": "comment-15106018",
            "author": "Nicholas Knize",
            "date": "2016-01-19T00:19:11+0000",
            "content": "Try again with the new patch. I guess diff didn't like the way I refactored GeoUtils and added another new GeoUtils class. "
        },
        {
            "id": "comment-15106031",
            "author": "Michael McCandless",
            "date": "2016-01-19T00:31:08+0000",
            "content": "Thanks Nicholas Knize\n\nIf you pass --show-copies-as-adds to svn it will make a more easily applied patch ... "
        },
        {
            "id": "comment-15106127",
            "author": "Nicholas Knize",
            "date": "2016-01-19T02:08:45+0000",
            "content": "Nice!!! Thanks for that protip! That certainly would have come in handy in this situation.  "
        },
        {
            "id": "comment-15106856",
            "author": "Michael McCandless",
            "date": "2016-01-19T15:12:35+0000",
            "content": "Hmm, the tests pass for me with this patch, but when I went to benchmark it, I'm seeing a different number of hits on trunk:\n\n\nITER: 5 5.861972507 sec; totHits=221120357; 225 queries\n\n\n\nvs with the patch:\n\n\nITER: 5 5.754698705 sec; totHits=221120418; 225 queries\n\n\n\nThe results should not have changed, because we use doc values for precise matching, right?  Why are tests not catching this  "
        },
        {
            "id": "comment-15109247",
            "author": "Michael McCandless",
            "date": "2016-01-20T19:35:06+0000",
            "content": "It's odd that we pass GeoPointTermQuery down to GeoPointTermsEnum\nctor which then goes and secretly sets a field:\n\n\n  query.cellComparator.termEnum = this;\n\n\n\nCan we make GeoPointTermQuery package private again, and do this\n\"up above\"?  And put TermEncoding somewhere else to be public?\n\nCan we rename GeoPointTermQuery to GeoPointMultiTermQuery?\n\nIn the javadocs for TermEncoding's two options can you explain\nthat one is newer and smaller/faster than the other, which is now\n\"legacy\" (NUMERIC)?  Can we deprecate the NUMERIC one?\n\nIn GeoPointTermsEnum.newInstance can we change:\n\n\n    if (query.termEncoding == GeoPointTermQuery.TermEncoding.PREFIX) {\n      return new GeoPointPrefixTermsEnum(terms, query);\n    }\n    return new GeoPointNumericTermsEnum(terms, query);\n\n\n\nto e.g.:\n\n    if (query.termEncoding == GeoPointTermQuery.TermEncoding.PREFIX) {\n      return new GeoPointPrefixTermsEnum(terms, query);\n    } else if (query.termEncoding == GeoPointTermQuery.TermEncoding.NUMERIC) {\n      return new GeoPointNumericTermsEnum(terms, query);\n    } else {\n      throw new IllegalArgumentException(...);\n    }\n\n "
        },
        {
            "id": "comment-15111323",
            "author": "Nicholas Knize",
            "date": "2016-01-21T21:27:00+0000",
            "content": "Thanks for the great feedback Michael McCandless  Patch updated with recommendations.  "
        },
        {
            "id": "comment-15111345",
            "author": "Nicholas Knize",
            "date": "2016-01-21T21:42:13+0000",
            "content": "It's related to TOLERANCE and that computeMaxShift in this patch is reused for all query types. So the depth of traversal for distanceQueries may vary slightly. The effect is that trunk has a handful of false negatives that this patch has picked up. The tests don't report them as failures because the deltas are within the TOLERANCE. "
        },
        {
            "id": "comment-15112468",
            "author": "Michael McCandless",
            "date": "2016-01-22T14:35:55+0000",
            "content": "Hmm I'm seeing this test failure with this patch:\n\n\n[junit4:pickseed] Seed property 'tests.seed' already defined: 3B2C0D9EBF6EC99D\n   [junit4] <JUnit4> says hello! Master seed: 3B2C0D9EBF6EC99D\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(30297@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   1> T4: id=7224 should not match but did\n   [junit4]   1>   small=true query=GeoPointInBBoxQuery: field=point: Lower Left: [85.35664315745854,-41.59146759172397] Upper Right: [86.66116425340478,-40.74649261518726] docID=7060\n   [junit4]   1>   lat=-40.74649160581509 lon=86.53170426878272\n   [junit4]   1>   deleted?=false\n   [junit4]   2> jan 22, 2016 2:35:24 PM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T4,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: some hits were wrong\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([3B2C0D9EBF6EC99D]:0)\n   [junit4]   2> \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2> \tat org.apache.lucene.util.BaseGeoPointTestCase$VerifyHits.test(BaseGeoPointTestCase.java:552)\n   [junit4]   2> \tat org.apache.lucene.util.BaseGeoPointTestCase$2._run(BaseGeoPointTestCase.java:756)\n   [junit4]   2> \tat org.apache.lucene.util.BaseGeoPointTestCase$2.run(BaseGeoPointTestCase.java:623)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testAllLonEqual -Dtests.seed=3B2C0D9EBF6EC99D -Dtests.multiplier=2 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=no -Dtests.timezone=Europe/Jersey -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   2.46s | TestGeoPointQuery.testAllLonEqual <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat org.apache.lucene.util.BaseGeoPointTestCase.verify(BaseGeoPointTestCase.java:770)\n   [junit4]    > \tat org.apache.lucene.util.BaseGeoPointTestCase.testAllLonEqual(BaseGeoPointTestCase.java:203)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)Throwable #2: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=19, name=T4, state=RUNNABLE, group=TGRP-TestGeoPointQuery]\n   [junit4]    > Caused by: java.lang.AssertionError: some hits were wrong\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([3B2C0D9EBF6EC99D]:0)\n   [junit4]    > \tat org.apache.lucene.util.BaseGeoPointTestCase$VerifyHits.test(BaseGeoPointTestCase.java:552)\n   [junit4]    > \tat org.apache.lucene.util.BaseGeoPointTestCase$2._run(BaseGeoPointTestCase.java:756)\n   [junit4]    > \tat org.apache.lucene.util.BaseGeoPointTestCase$2.run(BaseGeoPointTestCase.java:623)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene60): {id=FSTOrd50, point=PostingsFormat(name=MockRandom)}, docValues:{id=DocValuesFormat(name=Direct), point=DocValuesFormat(name=Memory)}, sim=ClassicSimilarity, locale=no, timezone=Europe/Jersey\n   [junit4]   2> NOTE: Linux 3.13.0-71-generic amd64/Oracle Corporation 1.8.0_60 (64-bit)/cpus=8,threads=1,free=417685072,total=493355008\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoPointQuery]\n   [junit4] Completed [1/1 (1!)] in 2.87s, 1 test, 1 error <<< FAILURES!\n   [junit4] \n   [junit4] \n   [junit4] Tests with failures [seed: 3B2C0D9EBF6EC99D]:\n   [junit4]   - org.apache.lucene.search.TestGeoPointQuery.testAllLonEqual\n\n "
        },
        {
            "id": "comment-15112478",
            "author": "Michael McCandless",
            "date": "2016-01-22T14:47:35+0000",
            "content": "I think you can attach javadoc to each enum constant value\n(PREFIX, NUMERIC)?  And then add @deprecated for\nNUMERIC's javadoc.\n\nCan you add braces even if the body is a single line?  E.g.:\n\n\n+    if (isInit == false)\n+      throw new IllegalStateException(\"call setGeoCode() before usage\");\n\n "
        },
        {
            "id": "comment-15112630",
            "author": "Nicholas Knize",
            "date": "2016-01-22T16:30:50+0000",
            "content": "That's unrelated to this patch. Its from nuking the pre-quantization in the tests and is being fixed by LUCENE-6956. "
        },
        {
            "id": "comment-15112774",
            "author": "Michael McCandless",
            "date": "2016-01-22T17:50:42+0000",
            "content": "OK, phew! "
        },
        {
            "id": "comment-15116002",
            "author": "Nicholas Knize",
            "date": "2016-01-25T20:49:14+0000",
            "content": "Updated patch to include the following:\n\n\n\tincorporate review feedback\n\toverride GeoPointPrefixTermsEnum.accept to \"seek\" to the  \"floor\" range of the candidate term. This boosts query performance by eliminating superfluous range visits.\n\tfixed bug in GeoEncodingUtils.geoCodedToPrefixCodedBytes and .getPrefixCodedLongShift that was ignoring the BytesRef.offset variable\n\n\n\nI'm going to open up another query performance improvement issue that switches from comparing BytesRefs to directly comparing the long encoded range values. This will instead convert candidate terms to their encoded range values and eliminate the need for constantly converting ranges to BytesRefs for comparisons.\n\nNOTE: Beast testing this may result in some accuracy failures that are being fixed separately by LUCENE-6956 "
        },
        {
            "id": "comment-15118217",
            "author": "Michael McCandless",
            "date": "2016-01-26T22:42:41+0000",
            "content": "Thanks Nicholas Knize ... the last patch is a bit odd, e.g. removing the entire GeoUtils.java and adding it back again ... can you fix it?  Maybe there is some magical git option to git diff? "
        },
        {
            "id": "comment-15118227",
            "author": "Michael McCandless",
            "date": "2016-01-26T22:45:58+0000",
            "content": "Hmm, also a few compilation errors, e.g.:\n\n\n    [javac] /l/nick/lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java:373: error: cannot find symbol\n    [javac]       long enc = GeoUtils.mortonHash(lon, lat);\n    [javac]                          ^\n    [javac]   symbol:   method mortonHash(double,double)\n    [javac]   location: class GeoUtils\n    [javac] /l/nick/lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java:374: error: cannot find symbol\n    [javac]       double latEnc = GeoUtils.mortonUnhashLat(enc);\n    [javac]                               ^\n    [javac]   symbol:   method mortonUnhashLat(long)\n    [javac]   location: class GeoUtils\n\n "
        },
        {
            "id": "comment-15118233",
            "author": "Nicholas Knize",
            "date": "2016-01-26T22:53:20+0000",
            "content": "argghh.. guessed the fancy --show-copies-as-adds didn't work this time. I'll prep a new patch shortly. Thx Michael McCandless! "
        },
        {
            "id": "comment-15119262",
            "author": "Nicholas Knize",
            "date": "2016-01-27T14:02:51+0000",
            "content": "Corrected patch "
        },
        {
            "id": "comment-15119397",
            "author": "Michael McCandless",
            "date": "2016-01-27T15:05:41+0000",
            "content": "Thanks Nicholas Knize, this is a nice (and large!) change.\n\nThe sole \"R\" in this javadoc left me hanging a bit \n\n\n  /**\n   * GeoTerms are coded as the following:\n   *\n   * R\n   */\n\n\n\n\nCan you update GeoPointDistanceQuery javadocs explaining the max\nradius limit?  I.e. that the circle projected on the earth's surface\ncannot wrap around and touch itself again (if I understand that\nright!)?\n\nCan we move GeoPointTokenStream under o.a.l.document and make\nit package private?  (And make TermEncoding public elsewhere.)\n\nCan all other ctors of GeoPointField just forward to the primary\n(\"takes everything\") ctor call, i.e. call this(...) instead of\nsuper(...)?  Also, can we break this compound ternary operator\ninto a static helper method?:\n\n\n    super(name, stored == Store.YES ?\n        termEncoding == GeoPointTokenStream.TermEncoding.PREFIX ? PREFIX_TYPE_STORED : NUMERIC_TYPE_STORED :\n        termEncoding == GeoPointTokenStream.TermEncoding.PREFIX ? PREFIX_TYPE_NOT_STORED : NUMERIC_TYPE_NOT_STORED);\n\n\n\nE.g. maybe getFieldType.\n\nShould it be an error if you pass a custom FieldType to\nGeoPointField that disabled indexing?  I.e. catch that up front,\nwhere we check DV type and numeric type, and then remove this:\n\n\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n\n\nfrom the tokenStream method?\n\nCan we deprecate the GeoPointField ctors that take\nTermEncoding?  (You should use/migrate to the default ctor that\nuses the better PREFIX encoding).\n\nGeoUtils.longToByteArray and .fromByteArray and\nGeoEncodingUtils.geoTermToString look dead?\n\nThis comment confuses me:\n\n\n  // start shift at 61\n  private short shift;\n\n\n\nDoes it really start at 61?  Seems like (computeMaxShift) it's\neither 45 (for a large bbox) or 36 (for a not-large bbox)?  Can we\nmove the comment down to where we actually do assign to shift?\n "
        },
        {
            "id": "comment-15120345",
            "author": "Nicholas Knize",
            "date": "2016-01-27T22:55:28+0000",
            "content": "Thanks for the feedback Michael McCandless! I'll post an updated patch shortly. In the meantime I think this will be blocked by LUCENE-6997 so I may put this in a feature branch. "
        },
        {
            "id": "comment-15122255",
            "author": "Nicholas Knize",
            "date": "2016-01-28T20:15:26+0000",
            "content": "Updated patch to include review feedback. "
        },
        {
            "id": "comment-15133089",
            "author": "Michael McCandless",
            "date": "2016-02-04T21:41:03+0000",
            "content": "Patch looks good!\n\nIf a user accidentally indexes with the legacy (NUMERIC) encoding\nbut searches with PREFIX it won't be detected right?  Like they\nwill just get 0 results?  I don't think we must fix this... seems like\nit's not easy since there is no \"schema\" for this.\n\nHmm I didn't see this added?\n\n\nCan you update GeoPointDistanceQuery javadocs explaining the max\nradius limit? I.e. that the circle projected on the earth's surface\ncannot wrap around and touch itself again (if I understand that\nright!)?\n\n+1 to commit!  Thanks Nicholas Knize ... I'm curious to see how this improves\nthe metrics (indexing time, index size, heap used by IndexReader,\nsearch time). "
        },
        {
            "id": "comment-15135558",
            "author": "ASF subversion and git services",
            "date": "2016-02-06T04:06:29+0000",
            "content": "Commit ae3b388e974960091594aee7e1b39d3d3a090520 in lucene-solr's branch refs/heads/master from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ae3b388 ]\n\nLUCENE-6930: Decouples GeoPointField from NumericType by using a custom GeoPointTokenStream and TermEnum designed for GeoPoint prefix terms "
        },
        {
            "id": "comment-15136136",
            "author": "ASF subversion and git services",
            "date": "2016-02-07T04:27:26+0000",
            "content": "Commit 74a08c08006941b74eda585b86b57fbe0ff341b2 in lucene-solr's branch refs/heads/branch_5x from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=74a08c0 ]\n\nLUCENE-6930: Decouples GeoPointField from NumericType by using a custom GeoPointTokenStream and TermEnum designed for GeoPoint prefix terms "
        }
    ]
}