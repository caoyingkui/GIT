{
    "id": "LUCENE-6580",
    "title": "Allow defined-width gaps in SpanNearQuery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "SpanNearQuery is not quite an exact Spans replacement for PhraseQuery at the moment, because while you can ask for an overall slop in an ordered match, you can't specify exactly where the gaps should appear.",
    "attachments": {
        "LUCENE-6580.patch": "https://issues.apache.org/jira/secure/attachment/12740346/LUCENE-6580.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14591500",
            "author": "Alan Woodward",
            "date": "2015-06-18T08:48:55+0000",
            "content": "Patch adding a SpanGapQuery that can be added as part of SpanNearQuery's constructor.\n\nThis also adds a Spans.skipToPosition(int) method which GapSpans overrides to make seeking forward more efficient.\n\nOne thing I don't like here is that SpanGapQuery is a top-level SpanQuery, when it only really makes sense to be used within SpanNearQuery.  An alternative could be to add a builder to SpanNearQuery with an .addGap(int) method, and make SpanGapQuery a private class. "
        },
        {
            "id": "comment-14591538",
            "author": "Robert Muir",
            "date": "2015-06-18T09:26:32+0000",
            "content": "Can we please not name any more methods skipToXXXX that are linear time?\n\nThat is such a trap. "
        },
        {
            "id": "comment-14591551",
            "author": "Alan Woodward",
            "date": "2015-06-18T09:30:59+0000",
            "content": "Fair enough.  How about advanceToPosition? "
        },
        {
            "id": "comment-14591556",
            "author": "Michael McCandless",
            "date": "2015-06-18T09:33:10+0000",
            "content": "scanToPosition? "
        },
        {
            "id": "comment-14591617",
            "author": "Alan Woodward",
            "date": "2015-06-18T10:34:28+0000",
            "content": "New patch:\n\n\tskipToPosition is now scanToPosition()\n\tSpanNearQuery has a Builder, and SpanGapQuery is a private subclass\n\n "
        },
        {
            "id": "comment-14592504",
            "author": "Adrien Grand",
            "date": "2015-06-18T21:06:54+0000",
            "content": "When I read the issue description, I thought this would make SpanNearQuery more similar to PhraseQuery but it seems to work differently?\n\nFor instance if you search for the \"quick ? ? fox\" phrase query with a slop of 2, a document containing \"quick fox\" will match thanks to the slop. However in this Spans implementation, it looks like the gap is required regardless of the slop since NearSpansOrdered ensures that the start position of a spans is greater than the position of the previous span? "
        },
        {
            "id": "comment-14593173",
            "author": "Alan Woodward",
            "date": "2015-06-19T08:13:33+0000",
            "content": "This is because slops mean different things between the two queries.  In PhraseQuery, a slop of greater than 0 means we end up with a SloppyPhraseScorer that relaxes the ordering constraint (so you can have, in effect, the 'gap' appearing after the end of the match).  An ordered SpanNearQuery with a slop, however, still requires its clauses to be in order, but allows them to be spaced out.\n\nSo this issue makes an ordered SpanNearQuery more like a PhraseQuery only in the case that the PQ has defined gaps, but zero slop. "
        },
        {
            "id": "comment-14644465",
            "author": "Alan Woodward",
            "date": "2015-07-28T14:44:14+0000",
            "content": "Patch updated to trunk.  I'd like to get this in for 5.3 if nobody objects. "
        },
        {
            "id": "comment-14644668",
            "author": "Adrien Grand",
            "date": "2015-07-28T17:12:27+0000",
            "content": "I think we should try not to add a new method to the Spans class. Could we instead keep it contained to SpanNear? For instance maybe we could have a static utility method that either calls next until the desired position is reached, or directly jumps if the Spans are an instance of GapSpans? "
        },
        {
            "id": "comment-14653782",
            "author": "Alan Woodward",
            "date": "2015-08-04T15:13:04+0000",
            "content": "Patch, taking into account Adrien's suggestion. "
        },
        {
            "id": "comment-14653805",
            "author": "Adrien Grand",
            "date": "2015-08-04T15:34:17+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14653892",
            "author": "ASF subversion and git services",
            "date": "2015-08-04T16:15:07+0000",
            "content": "Commit 1694082 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1694082 ]\n\nLUCENE-6580: Allow defined-width gaps in SpanNearQuery "
        },
        {
            "id": "comment-14653945",
            "author": "ASF subversion and git services",
            "date": "2015-08-04T16:42:41+0000",
            "content": "Commit 1694086 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694086 ]\n\nLUCENE-6580: Allow defined-width gaps in SpanNearQuery "
        },
        {
            "id": "comment-14713330",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:27+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}