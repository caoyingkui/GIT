{
    "id": "SOLR-12057",
    "title": "CDCR does not replicate to Collections with TLOG Replicas",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "CDCR"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We created a collection using TLOG replicas in our QA clouds.\nWe have a locally hosted solrcloud with 2 nodes, all our collections have 2 shards. We use CDCR to replicate the collections from this environment to 2 data centers hosted in Google cloud. This seems to work fairly well for our collections with NRT replicas. However the new TLOG collection has problems.\n\u00a0\nThe google cloud solrclusters have 4 nodes each (3 separate Zookeepers). 2 shards per collection with 2 replicas per shard.\n\u00a0\nWe never see data show up in the cloud collections, but we do see tlog files show up on the cloud servers. I can see that all of the servers have cdcr started, buffers are disabled.\nThe cdcr source configuration is:\n\u00a0\n\"requestHandler\":{\"/cdcr\":{\n\u00a0 \u00a0 \u00a0 \"name\":\"/cdcr\",\n\u00a0 \u00a0 \u00a0 \"class\":\"solr.CdcrRequestHandler\",\n\u00a0 \u00a0 \u00a0 \"replica\":[\n\u00a0 \u00a0 \u00a0 \u00a0 \n{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"zkHost\":\"[xxx-mzk01.sial.com:2181|http://xxx-mzk01.sial.com:2181/],[xxx-mzk02.sial.com:2181|http://xxx-mzk02.sial.com:2181/],[xxx-mzk03.sial.com:2181/solr|http://xxx-mzk03.sial.com:2181/solr]\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"source\":\"b2b-catalog-material-180124T\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"target\":\"b2b-catalog-material-180124T\"}\n,\n\u00a0 \u00a0 \u00a0 \u00a0 \n{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"zkHost\":\"[yyyy-mzk01.sial.com:2181|http://yyyy-mzk01.sial.com:2181/],[yyyy-mzk02.sial.com:2181|http://yyyy-mzk02.sial.com:2181/],[yyyy-mzk03.sial.com:2181/solr|http://yyyy-mzk03.sial.com:2181/solr]\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"source\":\"b2b-catalog-material-180124T\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"target\":\"b2b-catalog-material-180124T\"}\n],\n\u00a0 \u00a0 \u00a0 \"replicator\":\n{\n\u00a0 \u00a0 \u00a0 \u00a0 \"threadPoolSize\":4,\n\u00a0 \u00a0 \u00a0 \u00a0 \"schedule\":500,\n\u00a0 \u00a0 \u00a0 \u00a0 \"batchSize\":250}\n,\n\u00a0 \u00a0 \u00a0 \"updateLogSynchronizer\":{\"schedule\":60000}}}}\n\u00a0\nThe target configurations in the 2 clouds are the same:\n\"requestHandler\":{\"/cdcr\":{ \"name\":\"/cdcr\", \"class\":\"solr.CdcrRequestHandler\", \"buffer\":\n{\"defaultState\":\"disabled\"}\n}}\u00a0\n\u00a0\nAll of our collections have a timestamp field, index_date. In the source collection all the records have a date of 2/28/2018 but the target collections have a latest date of 1/26/2018\n\u00a0\nI don't see cdcr errors in the logs, but we use logstash to search them, and we're still perfecting that.\u00a0\n\u00a0\nWe have a number of similar collections that behave correctly. This is the only collection that is a TLOG collection. It appears that CDCR doesn't support TLOG collections.\n\u00a0\nIt looks like the data is getting to the target servers. I see tlog files with the right timestamps. Looking at the timestamps on the documents in the collection none of the data appears to have been loaded.In the solr.log I see lots of /cdcr messages\u00a0\u00a0action=LASTPROCESSEDVERSION, \u00a0action=COLLECTIONCHECKPOINT, and \u00a0action=SHARDCHECKPOINT\u00a0\n\u00a0\nno errors\n\u00a0\nTarget collections autoCommit is set to\u00a0 60000 I tried sending a commit explicitly no difference. cdcr is uploading data, but no new data appears in the collection.",
    "attachments": {
        "SOLR-12057.patch": "https://issues.apache.org/jira/secure/attachment/12913401/SOLR-12057.patch",
        "cdcr-fail-with-tlog-pull.patch": "https://issues.apache.org/jira/secure/attachment/12913190/cdcr-fail-with-tlog-pull.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-05T21:59:51+0000",
            "content": "I noticed that the cdcr action=queues returns different results for the target clouds.\n{\"responseHeader\":\u00a0\n{\"status\":\u00a00,\"QTime\":\u00a00}\n,\"queues\":\u00a0[],\"tlogTotalSize\":\u00a00,\"tlogTotalCount\":\u00a00,\"updateLogSynchronizer\":\u00a0\"stopped\"}\n\nand the other\n\n{\"responseHeader\":\u00a0\n{\"status\":\u00a00,\"QTime\":\u00a00}\n,\"queues\":\u00a0[],\"tlogTotalSize\":\u00a022254206389,\"tlogTotalCount\":\u00a02,\"updateLogSynchronizer\":\u00a0\"started\"}\n\nThe source is as follows:\n{\n\"responseHeader\": \n{\n\"status\": 0,\n\"QTime\": 5\n}\n,\n\"queues\": [\n\"xxx-mzk01.sial.com:2181,xxx-mzk02.sial.com:2181,xxx-mzk03.sial.com:2181/solr\",\n[\n\"b2b-catalog-material-180124T\",\n[\n\"queueSize\",\n0,\n\"lastTimestamp\",\n\"2018-02-28T18:34:39.704Z\"\n]\n],\n\"yyy-mzk01.sial.com:2181,yyy-mzk02.sial.com:2181,yyy-mzk03.sial.com:2181/solr\",\n[\n\"b2b-catalog-material-180124T\",\n[\n\"queueSize\",\n0,\n\"lastTimestamp\",\n\"2018-02-28T18:34:39.704Z\"\n]\n]\n],\n\"tlogTotalSize\": 1970848,\n\"tlogTotalCount\": 1,\n\"updateLogSynchronizer\": \"stopped\"\n} ",
            "author": "Webster Homer",
            "id": "comment-16386822"
        },
        {
            "date": "2018-03-06T11:26:34+0000",
            "content": "Thank you Webster Homer, this is very useful information. I will try to cook a tests-patch proving CDCR doesn't work with tlogs. ",
            "author": "Amrit Sarkar",
            "id": "comment-16387646"
        },
        {
            "date": "2018-03-06T11:59:29+0000",
            "content": "More bad news, but it seems CDCR doesn't work with Pull replicas either. I didn't tried the combination of 'one type of replicas on source' and 'another type of replica on target' but Tlogs and Pull replicas on both clusters doesn't end up being replicated via CDCR.\n\nTest attached and following failures are noticed:\n\n   [junit4] Tests with failures [seed: 2F962848ABDB5226]:\n   [junit4]   - org.apache.solr.cloud.cdcr.CdcrFailWithTlog.testPullWithSingleReplica\n   [junit4]   - org.apache.solr.cloud.cdcr.CdcrFailWithTlog.testTlogsWithMoreThanOneReplica\n   [junit4]   - org.apache.solr.cloud.cdcr.CdcrFailWithTlog.testTlogsWithSingleReplica\n   [junit4]   - org.apache.solr.cloud.cdcr.CdcrFailWithTlog.testPullWithMoreThanOneReplica\n\n ",
            "author": "Amrit Sarkar",
            "id": "comment-16387665"
        },
        {
            "date": "2018-03-06T16:34:04+0000",
            "content": "Our setup would likely have either Tlog or NRT replicas. Any setup would have at least one of those, I wouldn't expect that you'd want to send to a PULL replica since they cannot be masters.\n\n\u00a0\n\nWe would like to favor TLOG replicas since they always give consistent search results while NRT do not ",
            "author": "Webster Homer",
            "id": "comment-16388058"
        },
        {
            "date": "2018-03-06T17:03:43+0000",
            "content": "Webster Homer, yeah, pull replicas cannot be leaders. Improved the patch, failures are consistent. I will try to understand why this is happening since TLog replica behave as NRT when leader, and CDCR only concerns with leader nodes of both collection-clusters.  ",
            "author": "Amrit Sarkar",
            "id": "comment-16388100"
        },
        {
            "date": "2018-03-07T09:28:30+0000",
            "content": "I will post regular update here about the observations to get feedback and inputs:\n\n1. The CDC replication is happening successfully, that documents are getting forwarded to the target collection, all of them, but are not visible despite committing explicitly.\n2. As stated above Webster, tlogs on the target are getting filled up, fat tlogs but segments are not getting created.\n3. I verified the behavior on 7.1 and on master branch, concluding the anomaly is not introduced by CDCR Bidirectional approach.\n4. With hardcommits, softcommits, explicit commits, the documents are not getting visible on target with all tlog replicas.\n5. While a normal update from SolrJ / client is generating segments and behaving as expected.\n\nWill report when I have more. ",
            "author": "Amrit Sarkar",
            "id": "comment-16389301"
        },
        {
            "date": "2018-03-07T14:55:43+0000",
            "content": "Figured out. CdcrUpdateProcessor has a hack, it enable PEER_SYNC to bypass the leader logic in DistributedUpdateProcessor.versionAdd which eventually ends up in segments not getting created. I wrote a very basic patch which fixes the problem with basic tests to prove it works. Need to polish it a lot before commit. I will work this week to get it right. ",
            "author": "Amrit Sarkar",
            "id": "comment-16389654"
        },
        {
            "date": "2018-03-08T12:34:44+0000",
            "content": "Cleaned the code, added tests, tested combination of replica types. \n\nPULL type replicas doesn't get initialised at with CDCR enabled as no transaction log or update log being created. I can bypass the CdcrRequestHandler inform(core) method but if I bypass them in Cdcr API function, any request directed to PULL replicas will error out or do nothing. From SolrJ standpoint, where we provide ZkHost string and collection name to get CloudSolrClient, how can we make sure the request goes to the NRT or TLog type replicas. I will work on this next.  ",
            "author": "Amrit Sarkar",
            "id": "comment-16391180"
        },
        {
            "date": "2018-03-08T17:15:08+0000",
            "content": "My understanding is that if you have PULL replicas you will also have at least one NRT or TLOG replica type in the cloud as well. PULL replicas don't do their own indexing. I wouldn't expect that PULL replicas would need deal with cdcr, instead they would get any updates from cdcr via their master replica e.g. the NRT or TLOG replica ",
            "author": "Webster Homer",
            "id": "comment-16391544"
        },
        {
            "date": "2018-03-08T17:19:46+0000",
            "content": "Webster Homer, when I say collection with PULL type replicas, I mean mixture of replicas including PULL replicas, yes it won't be leader and take part in CDCR, BUT it would initialise the CdcrRequestHandler at the time of core creation and fails. In short, PULL replica cannot be part of collection which is CDCR enabled. ",
            "author": "Amrit Sarkar",
            "id": "comment-16391558"
        },
        {
            "date": "2018-10-24T16:20:49+0000",
            "content": "Uploaded fresh patch, which can be applied against master branch. Running beast tests to see if the solution is intact.\nWith the current solution, CdcrUpdateProcessorFactory is unnecessary; as we can check at DistributedUpdateProcessor level whether the incoming update is from CDCR or not. ",
            "author": "Amrit Sarkar",
            "id": "comment-16662483"
        },
        {
            "date": "2018-10-24T17:43:43+0000",
            "content": "Hi Amrit,\n\nThanks for the patch!\u00a0 Here's some feedback from just the test case\u00a0\u00a0\n\n\tCdcrWithDiffReplicaTypesTest -> CdcrReplicaTypeTest - Maybe this is enough to convey the test intention?\n\tSome unused imports would need to be removed\n\tAny reason we're hardcoding StandardDirectoryFactory instead of using of letting the test framework pick one?\n\tAfter CdcrTestsUtil.cdcrStart(cluster1SolrClient); do we need to sleep for 2 seconds? When I see the usage of cdcrStart , I see that some usage has a 2s sleep and some don't .\n\tCan we simply the variable naming in this loop. It's adding a batch of docs right? \"docs\" is esentially how many batches of 100 docs will we index? Maybe numBatches?\n\t\nint docs = (TEST_NIGHTLY ? 100 : 10);\nint numDocs_c1 = 0;\nfor (int k = 0; k < docs; k++) {\nreq = new UpdateRequest();\nfor (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\nSolrInputDocument doc = new SolrInputDocument();\ndoc.addField(\"id\", \"cluster1_\" + numDocs_c1);\ndoc.addField(\"xyz\", numDocs_c1);\nreq.add(doc);\n}\nreq.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\nlog.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\nreq.process(cluster1SolrClient);\n}\n\n\n\n\n\n\tIt would be really cool if we pulled the meat of the test into a separate method. The method would take two cloud solr client objects ( for the two clusters ). That way we could test all 3 replica types in the same place by calling this method. Perhaps consolidate\u00a0CdcrBidirectionalTest as well?\n\tI really like how this test checks for all operations to make sure they work correctly. perhaps we could expand it to add a parent-child document and an in-place update as well?\n\n ",
            "author": "Varun Thacker",
            "id": "comment-16662607"
        },
        {
            "date": "2018-10-24T18:23:24+0000",
            "content": "Thanks Varun for the detailed feedback, \n\nThe entire test CdcrBidirectionalTest has been a copy of the CdcrBidirectionalTest, which gets its framework from CdcrBootstrapTest, keeping the uniformity in place. All the points mentioned above are essentially framework snippets from CdcrBootstrapTest.\n\nI strongly agree with consolidating CdcrBidirectinalTest with the test in this patch, and potentially for Cdcr support for pull replicas fix too. Seeking advice on whether we should do it under this Jira or create new one.\n\nOther points;\nAfter CdcrTestsUtil.cdcrStart(cluster1SolrClient); do we need to sleep for 2 seconds? \nNot really, we can remove this safely, from, all tests; 2 sec sleep is for loading the Cdcr components and avoiding potentially few retries.\nI really like how this test checks for all operations to make sure they work correctly. perhaps we could expand it to add a parent-child document and an in-place update as well?\nSure, I will include the parent-child doc; though in-place updates are not supported for forwarding in CDCR. I can see how much effort is required for that. Jira: SOLR-12105. ",
            "author": "Amrit Sarkar",
            "id": "comment-16662648"
        },
        {
            "date": "2018-10-24T18:35:55+0000",
            "content": "I strongly agree with consolidating CdcrBidirectinalTest with the test in this patch, and potentially for Cdcr support for pull replicas fix too. Seeking advice on whether we should do it under this Jira or create new one.\nI'll leave it up to you since you're putting in the work. If you think this will derail the main goal of the Jira by all means create a separate Jira to tackle it separately.\n\n\u00a0\nNot really, we can remove this safely, from, all tests; 2 sec sleep is for loading the Cdcr components and avoiding potentially few retries.\nAgain feel free to incorporate that in the next iteration or create a separate jira.\n\n\u00a0\nSure, I will include the parent-child doc;\n+1 ",
            "author": "Varun Thacker",
            "id": "comment-16662659"
        },
        {
            "date": "2018-10-25T19:57:11+0000",
            "content": "Thanks Varun; polished the patch as per feedback and created SOLR-12917 to create a framework for related CDCR tests and avoid redundancy. ",
            "author": "Amrit Sarkar",
            "id": "comment-16664231"
        },
        {
            "date": "2018-10-25T21:59:10+0000",
            "content": "Hi Amrit,\n\n\u00a0\n\nSome feedback on \n\nCdcrUpdateProcessor \n\n\tCan we add some javadocs as to what this update processor wants to achieve?\n\tDo we still need to override versionAdd / versionDelete versionDeleteByQuery\u00a0 ?\n\tIt would be nice to add some basic docs to the filterParams method to indicate what it's trying to filter etc.\n\n\n\nOn CdcrReplicaTypesTest\n\n\t//.withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\") - Can we remove this comment?\n\tIs testTlogReplica meant to only have tlog replicas? The create collection uses a combination of nrtReplicas and tlogReplicas so I'm trying to understand the motivation here\n\t\"Not really, we can remove this safely, from, all tests; 2 sec sleep is for loading the Cdcr components and avoiding potentially few retries.\"\u00a0 - You mentioned this but the patch still has a 2s delay\n\tint batchSize = (TEST_NIGHTLY ? 100 : 10); - does batchSize represent numBatches? 100 seems to be the batch size in the inner loop\n\n\n\nFrom a design perspective :\n\nGiven the improvements you've made with the patch , are we in a position to roll up this block from CdcrUpdateProcessor into DistributedUpdateProcessor ? If yes then we would get CDCR to work even without them having to add an UpdateProcessor ? We coiuld keep CdcrUpdateProcessor as is for backward compat but remove references of it from the docs\n\nif (params.get(CDCR_UPDATE) != null) {\n  result.set(CDCR_UPDATE, \"\");\n  result.set(CommonParams.VERSION_FIELD, params.get(CommonParams.VERSION_FIELD));\n}\n ",
            "author": "Varun Thacker",
            "id": "comment-16664330"
        },
        {
            "date": "2018-11-04T12:27:01+0000",
            "content": "Again huge thanks Varun for the feedback;\n\nCdcrUpdateProcessor\nCan we add some javadocs as to what this update processor wants to achieve?\nSure added in current patch.\nDo we still need to override versionAdd / versionDelete versionDeleteByQuery  ?\nNo. Removed in current patch.\nIt would be nice to add some basic docs to the filterParams method to indicate what it's trying to filter etc.\nSure. added in current patch.\n\nCdcrReplicaTypesTest\n//.withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\") - Can we remove this comment?\nThe last one was an incomplete patch, I had to add back the above-stated line as the patch is failing with corrupt index otherwise. I need to investigate in what condition the patch is failing.\nIs testTlogReplica meant to only have tlog replicas? The create collection uses a combination of nrtReplicas and tlogReplicas so I'm trying to understand the motivation here.\nThe combinations we want to test are [0-1] NRT and [1-2] Tlog replicas. TLOG Replicas should work both when they are leader and followers. Hence the randomization at the collection's creation. \n\"Not really, we can remove this safely, from, all tests; 2 sec sleep is for loading the Cdcr components and avoiding potentially few retries.\"  - You mentioned this but the patch still has a 2s delay\nYes. Opened jira: SOLR-12957 to track at the bi-directional approach we have a race around condition where without sleep, first few batches are missed for forwarding. More details on the respective jira.\nint batchSize = (TEST_NIGHTLY ? 100 : 10); - does batchSize represent numBatches? 100 seems to be the batch size in the inner loop\nChanged the variable name to totalBatches.\n\nThis final patch looks great. Obviously, we have some separate issues for which respective JIRAs I have opened (SOLR-12957) and need to open (failure without StandardDirectoryFactory). ",
            "author": "Amrit Sarkar",
            "id": "comment-16674394"
        },
        {
            "date": "2018-11-04T12:52:38+0000",
            "content": "Uploaded another patch with;\n\nReplacing CdcrUpdateProcessorFactory with DistributedUpdateProcessorFactory at:\n1. Tests: CdcrBidirectionalTest and CdcrReplicaTypesTest.\n2. Cdcr Configuration documentation. ",
            "author": "Amrit Sarkar",
            "id": "comment-16674401"
        }
    ]
}