{
    "id": "LUCENE-3609",
    "title": "BooleanFilter changed behavior in 3.5, no longer acts as if \"minimum should match\" set to 1",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.5",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The change LUCENE-3446 causes a change in behavior in BooleanFilter. It used to work as if minimum should match clauses is 1 (compared to BQ lingo), but now, if no should clauses match, then the should clauses are ignored, and for example, if there is a must clause, only that one will be used and returned.\n\nFor example, a single must clause and should clause, with the should clause not matching anything, should not match anything, but, it will match whatever the must clause matches.\n\nThe fix is simple, after iterating over the should clauses, if the aggregated bitset is null, return null.",
    "attachments": {
        "LUCENE-3609.patch": "https://issues.apache.org/jira/secure/attachment/12505533/LUCENE-3609.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-29T19:26:07+0000",
            "content": "I will look into this. ",
            "author": "Uwe Schindler",
            "id": "comment-13159474"
        },
        {
            "date": "2011-11-29T19:38:44+0000",
            "content": "\nFor example, a single must clause and should clause, with the should clause not matching anything, should not match anything, but, it will match whatever the must clause matches.\n\nWait, this sounds correct.\n\nIf you have a MUST clause and a SHOULD clause, then the SHOULD clause is totally irrelevant (from boolean logic). ",
            "author": "Robert Muir",
            "id": "comment-13159480"
        },
        {
            "date": "2011-11-29T19:44:44+0000",
            "content": "Shay,\n\nthere was no real change caused by LUCENE-3446 or LUCENE-3458, the logic is identical before and after. To be sure I will write a test but if you look at the patch it will not change behaviour. The minShouldMatch logic was never implemented in BooleanFilter.\n\nThere was one small \"bug\" in the filter before. It handled the case that a filter clause returned null different than the case if the clause returned an empty bitset/DocIdSet.EMPTY_DOCIDSET. So the whole thing was broken before as it was not consistent. Now it behaves exactly as Robert told. \n\nThe minShouldMatch logic was caused by different behaviour on clauses returning null instead DocIdSet.EMPTY_DOCIDSET. ",
            "author": "Uwe Schindler",
            "id": "comment-13159485"
        },
        {
            "date": "2011-11-29T20:20:35+0000",
            "content": "What I am saying is that BooleanFilter used to act in a way that at least one should clause should match, and it is no longer the case. Here is the logic that was before:\n\n\nif (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n\n\n\nAssuming the getDISI returns EMTY iterator for a filter that does not match (and not null, as it will fail) for a single should clause, then the result of this will be a \"res\" all \"zeroed\" out (the first check on res==null). Then, if it went ahead and executed a must clause, it would and on a \"zeroed\" out bitset and the result is no matches.\n\nNow, with the change, we have this code:\n\n\nfor (final FilterClause fc : clauses) {\n  if (fc.getOccur() == Occur.SHOULD) {\n    final DocIdSetIterator disi = getDISI(fc.getFilter(), reader);\n    if (disi == null) continue;\n    if (res == null) {\n      res = new FixedBitSet(reader.maxDoc());\n    }\n    res.or(disi);\n  }\n}\n\n\n\nThe result of a single should clause that does not match anything is a res still set to null, and then, when it gets to the must clause, it will or it with the result of the must clause, and return the docs that match the must clause. You can see this is different compared to the previous behavior and actually, different than the expected behavior.\n\n[Update]: And the fix should be to return null only if res is null and should clauses count is higher than 0 after the check for should clause count. ",
            "author": "Shay Banon",
            "id": "comment-13159512"
        },
        {
            "date": "2011-11-29T20:32:35+0000",
            "content": "I agree there is something wrong. The filter logic should change to return DocIdSet.EMPTY_DOCIDSET.iterator() in getDISI. The null check can then go and the behaviour is correct again.\nThe problem here only occurs if a filter returns the emoty instance or null. If it returns an empty BitSet it behaves as before. ",
            "author": "Uwe Schindler",
            "id": "comment-13159524"
        },
        {
            "date": "2011-11-29T20:35:28+0000",
            "content": "I don't think this is the best fix, since null values for empty values allows for early exit and less processing (not sure why the bool filter does not return null if it match nothing). Why not just implement the fix I suggested? ",
            "author": "Shay Banon",
            "id": "comment-13159526"
        },
        {
            "date": "2011-11-29T20:46:36+0000",
            "content": "This is the easy patch. We still need a test, but it fixes the behaviour change. ",
            "author": "Uwe Schindler",
            "id": "comment-13159535"
        },
        {
            "date": "2011-11-29T21:07:47+0000",
            "content": "not sure why the bool filter does not return null if it match nothing\n\nThis does not matter, processing is the same. DocIdSet.EMPTY_DOCIDSET has same effect like null in Lucene's internals (there are checks handling those special values). In my opinion we should disallow null as return value in filters completely.\n\nThe attached patch is the easy fix that does exactly the same like before, but it's indeed less efficient as it would return an empty FixedBitSet. So a shortcut would be nice.\n\nIt can of course still happen that a clause returns an empty BitSet, but then the code would still work correct (but without short circuit). ",
            "author": "Uwe Schindler",
            "id": "comment-13159543"
        },
        {
            "date": "2011-11-29T21:10:27+0000",
            "content": "Here the fix with short-circuit. ",
            "author": "Uwe Schindler",
            "id": "comment-13159546"
        },
        {
            "date": "2011-11-29T22:08:31+0000",
            "content": "Path with testcase testing all special cases (all patches for 3.x) ",
            "author": "Uwe Schindler",
            "id": "comment-13159573"
        },
        {
            "date": "2011-11-30T10:55:29+0000",
            "content": "Committed 3.x revision: 1208375\n\nNow forward-porting ",
            "author": "Uwe Schindler",
            "id": "comment-13159970"
        },
        {
            "date": "2011-11-30T11:09:15+0000",
            "content": "Committed trunk revision: 1208381 ",
            "author": "Uwe Schindler",
            "id": "comment-13159977"
        }
    ]
}