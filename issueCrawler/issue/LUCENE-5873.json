{
    "id": "LUCENE-5873",
    "title": "AssertionError in ToChildBlockJoinScorer.advance",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "When using ToChildBJQ and searching via IndexSearcher.search(Query query, Filter filter, int n) if we provide a filter which matches both parent and child documents we get this error \n\n\njava.lang.AssertionError\n\tat __randomizedtesting.SeedInfo.seed([C346722DC1E4810C:A08F176AE828FA1D]:0)\n\tat org.apache.lucene.search.join.ToChildBlockJoinQuery$ToChildBlockJoinScorer.advance(ToChildBlockJoinQuery.java:286)\n\tat org.apache.lucene.search.FilteredQuery$LeapFrogScorer.advanceToNextCommonDoc(FilteredQuery.java:274)\n\tat org.apache.lucene.search.FilteredQuery$LeapFrogScorer.nextDoc(FilteredQuery.java:286)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:192)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:163)\n\tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:35)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:614)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:483)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:440)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:273)\n\tat org.apache.lucene.search.join.TestBlockJoinValidation.testValidationForToChildBjqWithChildFilterQuery(TestBlockJoinValidation.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1618)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:827)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:863)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:877)\n\tat org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:110)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:798)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:458)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:836)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:738)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:772)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:783)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\nThis was caught by test failures recored in SOLR-6295 . The reason why we send a filter is if the user would like to limit the child documents being matched.",
    "attachments": {
        "LUCENE-5873.patch": "https://issues.apache.org/jira/secure/attachment/12660147/LUCENE-5873.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14087741",
            "author": "Varun Thacker",
            "content": "Patch which causes the test to fail because of the AssertionError. ",
            "date": "2014-08-06T14:54:25+0000"
        },
        {
            "id": "comment-14230114",
            "author": "Mikhail Khludnev",
            "content": "here is the patch changes assert to explicit if/throw.\nVarun Thacker, your test is awersome! Appreciate!\nShalin Shekhar Mangar, constants might be not ideal, I rely on your sense of beauty.\nThanks in advance.  ",
            "date": "2014-12-01T17:50:29+0000"
        },
        {
            "id": "comment-14231210",
            "author": "Adrien Grand",
            "content": "The contract of advance is to return the next matching doc ID on or after the target, so it feels wrong to restrict the values that are legal as targets?\n\nWhat about advancing to the next block by doing something like the code below?\n\n\nif (parentBits.get(childTarget)) {\n  childTarget += 1;\n}\n\n ",
            "date": "2014-12-02T09:33:41+0000"
        },
        {
            "id": "comment-14231212",
            "author": "Adrien Grand",
            "content": "(Just realized that some parents might not have children, so we would probably rather require something like nextClearBit) ",
            "date": "2014-12-02T09:36:16+0000"
        },
        {
            "id": "comment-14231221",
            "author": "Michael McCandless",
            "content": "Note that this is a violation of the contract of ToChildBJQ, i.e. that top-level Filter must only match parent docs.\n\nStill, I think we should make a best effort to detect mis-use and throw a reasonable exception instead of AssertionError. ",
            "date": "2014-12-02T09:49:16+0000"
        },
        {
            "id": "comment-14231270",
            "author": "Mikhail Khludnev",
            "content": "The contract of advance is to return the next matching doc ID on or after the target, so it feels wrong to restrict the values that are legal as targets?\nnote: the assert was introduced long ago, see commit. \nthe reasoning is that parents are orthogonal to children (until LUCENE-5816). here the advance() contact contradicts with ToChildBJQ ones. eg if we have parent with doc num 10, and call toChildBJQ.advance(10). What it needs to return? \n\n\tit can't return parent doc 10 - that violates the ToChildBJQ contract,\n\tit can't return any child docs because they are <10, however it's expected that DISI.advance(10) > 10\n\tit can't return anything from the next block, because it leads to undetermined behavior (mind that \"10\" is not a literally 10, but q=foo:bar, which yields 10)\nobviously if we can't resolve contradiction, we throw exception. \n\n ",
            "date": "2014-12-02T10:21:00+0000"
        },
        {
            "id": "comment-14231276",
            "author": "Adrien Grand",
            "content": "But isn't it relying too much on the way that intersections with filters are implemented? For instance if we suddenly replace the initial advance after a match to use advance(docId() + 1) instead if nextDoc() then it would fail for this query? This example is a bit trivial, but I believe similar things could happen if we start having more sophisticated intersections with filters (and eg. decide to split the filter in two, first intersect with the fast part of the filter and then only use the (slow) 2nd part of the filter to \"confirm\" matches).\n\nWhat it needs to return? \n\nWhy can't it return the first child from the next block that the parent scorer matches? It is already something that can happen if you advance to the last child of a block that happens to not match the acceptDocs.\n\nI think it's also a bit confusing that this query can be used alone on its own (nextDoc works fine and will make sure to skip parent documents), but if you want to filter it then the filter needs to match child docs only? ",
            "date": "2014-12-02T10:31:55+0000"
        },
        {
            "id": "comment-14231284",
            "author": "Mikhail Khludnev",
            "content": "Why can't it return the first child from the next block that the parent scorer matches? \n\nlet's we have two parents matches foo:bar with numbers 10 and 20. the suggestion implies that we return child 11. but if these blocks will be rearranged at the next pass, this logic returns different docs. random tests will fail. ",
            "date": "2014-12-02T10:39:55+0000"
        },
        {
            "id": "comment-14231289",
            "author": "Adrien Grand",
            "content": "Then maybe the issue is within the test? I mean this would be an issue with any query, right? So either the test needs to not rely on index order, or it needs to explicitely use a LogMergePolicy? ",
            "date": "2014-12-02T10:44:04+0000"
        },
        {
            "id": "comment-14231313",
            "author": "Mikhail Khludnev",
            "content": "in this case i'd rather blame an undetermined query behavior, which is confirmed by test. I suppose all queries are agnostic to the document order with a fairly limited number of explicit exclusions: parent and children in BJQs and EarlyTermination ones. Giving this, depending on blocks order seems wrong to me. ",
            "date": "2014-12-02T11:09:48+0000"
        },
        {
            "id": "comment-14231316",
            "author": "Michael McCandless",
            "content": "I think it's also a bit confusing that this query can be used alone on its own (nextDoc works fine and will make sure to skip parent documents), but if you want to filter it then the filter needs to match child docs only?\n\nI think this is fine: the purpose of ToChildBJQ is to wrap a parent query and provide a query that iterates over the child documents.\n\nSo it should do .nextDoc() properly (returning only child docs).\n\nBut it should not be expected to .advance(parentDoc): that's invalid usage.  And likewise you cannot AND such a query with a filter that matches parent docs.\n\nIt's the app's job to make sure the provided filter is only in \"child space\". ",
            "date": "2014-12-02T11:12:58+0000"
        },
        {
            "id": "comment-14231324",
            "author": "Adrien Grand",
            "content": "ok ",
            "date": "2014-12-02T11:19:58+0000"
        },
        {
            "id": "comment-14231331",
            "author": "Michael McCandless",
            "content": "Giving this, depending on blocks order seems wrong to me.\n\nI'm confused here: who is depending on block order? ",
            "date": "2014-12-02T11:27:59+0000"
        },
        {
            "id": "comment-14231336",
            "author": "Mikhail Khludnev",
            "content": "I'm confused here: who is depending on block order?\nthe proposed behaviour\nI think we come to the agreement. Thanks, gentlemen!   ",
            "date": "2014-12-02T11:33:04+0000"
        },
        {
            "id": "comment-14231947",
            "author": "Mikhail Khludnev",
            "content": "ok\nAdrien Grand, so what's about the carrier commit?  ",
            "date": "2014-12-02T19:16:26+0000"
        },
        {
            "id": "comment-14255666",
            "author": "Mikhail Khludnev",
            "content": "Dear @Santa,\nThis year I've been good enough. I'd like to get this patch committed for Christmas. Would you mind to do this for me? I promise to be even better next year, send patches regularly with even better test coverage!  \nThank you, my dear @Santa!\n--Mike ",
            "date": "2014-12-22T11:49:02+0000"
        },
        {
            "id": "comment-14262977",
            "author": "ASF subversion and git services",
            "content": "Commit 1649071 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1649071 ]\n\nLUCENE-5873: BJQ: Throw an error if the top-level filter is not in the child space instead of just asserting. ",
            "date": "2015-01-02T16:10:46+0000"
        },
        {
            "id": "comment-14262981",
            "author": "ASF subversion and git services",
            "content": "Commit 1649073 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1649073 ]\n\nLUCENE-5873: BJQ: Throw an error if the top-level filter is not in the child space instead of just asserting. ",
            "date": "2015-01-02T16:17:28+0000"
        },
        {
            "id": "comment-14263174",
            "author": "Adrien Grand",
            "content": "Merged, sorry for the delay Mikhail! ",
            "date": "2015-01-02T19:42:26+0000"
        },
        {
            "id": "comment-14263370",
            "author": "Mikhail Khludnev",
            "content": "Merci! ",
            "date": "2015-01-03T01:32:32+0000"
        },
        {
            "id": "comment-14332599",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:53+0000"
        }
    ]
}