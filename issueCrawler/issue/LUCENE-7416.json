{
    "id": "LUCENE-7416",
    "title": "BooleanQuery rewrite optimizations",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "7.0",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "A couple of BooleanQuery rewrites / optimizations. \n\nFirst, as discussed on the user group, a BooleanQuery with a query that is both a SHOULD and a FILTER can be rewritten as a single MUST query, but care must be taken to decrement minShouldMatch by 1.\n\nAnother case is if a query is both required (MUST or FILTER) and MUST_NOT at the same time, it can be converted to a MatchNoDocsQuery (although I haven't discussed this yet so hopefully I'm not missing something!).",
    "attachments": {
        "LUCENE-7146-MatchAllMustNot.patch": "https://issues.apache.org/jira/secure/attachment/12825500/LUCENE-7146-MatchAllMustNot.patch",
        "LUCENE-7146-simplific1.patch": "https://issues.apache.org/jira/secure/attachment/12825481/LUCENE-7146-simplific1.patch",
        "LUCENE-7146.patch": "https://issues.apache.org/jira/secure/attachment/12824200/LUCENE-7146.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15425079",
            "author": "Spyros Kapnissis",
            "date": "2016-08-17T18:09:18+0000",
            "content": "A patch for review, with corresponding tests. "
        },
        {
            "id": "comment-15436879",
            "author": "ASF subversion and git services",
            "date": "2016-08-25T13:47:21+0000",
            "content": "Commit 1ac9609caedbf739379bdabdac909f77fee2f5c6 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ac9609 ]\n\nLUCENE-7416: Rewrite optimizations for BooleanQuery. "
        },
        {
            "id": "comment-15436881",
            "author": "ASF subversion and git services",
            "date": "2016-08-25T13:49:10+0000",
            "content": "Commit 81c796a1fa30a9bec77712a8f8e188b347dc490a in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81c796a ]\n\nLUCENE-7416: Rewrite optimizations for BooleanQuery. "
        },
        {
            "id": "comment-15436883",
            "author": "Adrien Grand",
            "date": "2016-08-25T13:50:01+0000",
            "content": "Merged, thanks! "
        },
        {
            "id": "comment-15436906",
            "author": "Robert Muir",
            "date": "2016-08-25T13:59:53+0000",
            "content": "This seems to break testrandom? \n\nI am concerned about us making the wrong tradeoff here and breaking common cases by optimizing rare cases . "
        },
        {
            "id": "comment-15436926",
            "author": "Robert Muir",
            "date": "2016-08-25T14:07:33+0000",
            "content": "Here is the fail I see on 6.x:\n\n   [junit4] Started J0 PID(10069@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestBooleanRewrites\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBooleanRewrites -Dtests.method=testRandom -Dtests.seed=506700689E36A59D -Dtests.slow=true -Dtests.locale=sr-ME -Dtests.timezone=Africa/Kinshasa -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.39s | TestBooleanRewrites.testRandom <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<1.5392522811889648> but was:<1.4700312614440918>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([506700689E36A59D:222B25672F5613EE]:0)\n   [junit4]    > \tat org.apache.lucene.search.TestBooleanRewrites.assertEquals(TestBooleanRewrites.java:404)\n   [junit4]    > \tat org.apache.lucene.search.TestBooleanRewrites.testRandom(TestBooleanRewrites.java:348)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene62): {body=PostingsFormat(name=LuceneVarGapFixedInterval)}, docValues:{}, maxPointsInLeafNode=1393, maxMBSortInHeap=5.498728834322439, sim=ClassicSimilarity, locale=sr-ME, timezone=Africa/Kinshasa\n   [junit4]   2> NOTE: Linux 4.4.0-31-generic amd64/Oracle Corporation 1.8.0_45 (64-bit)/cpus=8,threads=1,free=225724712,total=239075328\n   [junit4]   2> NOTE: All tests run in this JVM: [TestBooleanRewrites]\n   [junit4] Completed [1/1 (1!)] in 0.61s, 1 test, 1 failure <<< FAILURES!\n\n\n\nI suspect the change is safe for master branch but requires more work if we want it to not break scoring with stuff like coord() at play. Additionally given the optimization is fairly complicated, maybe we can have a few targeted tests if we really want to push it to 6.x, that would help alleviate some concerns. "
        },
        {
            "id": "comment-15436951",
            "author": "Uwe Schindler",
            "date": "2016-08-25T14:16:28+0000",
            "content": "I suspect the change is safe for master branch but requires more work if we want it to not break scoring with stuff like coord() at play. Additionally given the optimization is fairly complicated, maybe we can have a few targeted tests if we really want to push it to 6.x, that would help alleviate some concerns.\n\n+1 I had the same issues in mind with 6.x (coord factor), although filter clauses should not affect coord at all - maybe another bug\n\nI'd also like to see special targeted tests on those complicated scoring differences. In general the patch is fine:\n\n\tThe part that return MatchNoDocs is safe, because it does not affect score at all (no results). It is just a bit of \"set\" logic, although I have the feeling the whole thing might be easier with Java 8 streams, because no coping of sets is needed - you just use a simple lambda/method reference expression to find the set's overlap\n\tThe tricky part is the other optimization. I'd would like to see more thorough tests here!\n\n\n\nShould I rewrite the first part to a stream/lambda? "
        },
        {
            "id": "comment-15437000",
            "author": "Uwe Schindler",
            "date": "2016-08-25T14:37:26+0000",
            "content": "Here my simplification for the first part without crazy hash set copying. This just joins both sets, uses distict (its just top optimze) and then anyOf(Predicate) with a predicate that does a set.contains() on the mustnot. "
        },
        {
            "id": "comment-15437023",
            "author": "David Smiley",
            "date": "2016-08-25T14:50:45+0000",
            "content": "Nice bit of Java Streams API there Uwe.  But I think it can be more efficient \u2013 no need to combine to a common set (via distinct) when ultimately we want to know if either the FILTER or MUST set has a MUST_NOT clause.  They can be checked separately. "
        },
        {
            "id": "comment-15437029",
            "author": "Uwe Schindler",
            "date": "2016-08-25T14:57:02+0000",
            "content": "Yeah. Remove the distinct() and done. "
        },
        {
            "id": "comment-15437057",
            "author": "Uwe Schindler",
            "date": "2016-08-25T15:14:22+0000",
            "content": "I'd also think we should inverse the check. Must Not clauses are generally seldom. So do 2 checks here with anyOf, which is linear. "
        },
        {
            "id": "comment-15437115",
            "author": "Uwe Schindler",
            "date": "2016-08-25T15:53:33+0000",
            "content": "Patch that inverses the check. "
        },
        {
            "id": "comment-15437120",
            "author": "Adrien Grand",
            "date": "2016-08-25T15:54:38+0000",
            "content": "The part that rewrites boolean queries into a MatchNoDocsQuery if some clauses are bothe excluded and required is indeed broken on 6.x because of queryNorm. I'm leaning towards not having this rewrite rule on 6.x to keep things simple rather than checking the coord values. This is already complicated enough. I'll do that for now to get the tests passing again.\n\nUwe Schindler +1 to your patch "
        },
        {
            "id": "comment-15437122",
            "author": "ASF subversion and git services",
            "date": "2016-08-25T15:55:40+0000",
            "content": "Commit da6a502f261ab1e482eb6709cbd8f26cd77c7fb5 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=da6a502 ]\n\nLUCENE-7416: Rewriting `BooleanQuery` to a `MatchNoDocsQuery` is not safe because of `queryNorm`. "
        },
        {
            "id": "comment-15437152",
            "author": "Adrien Grand",
            "date": "2016-08-25T16:14:46+0000",
            "content": "I am concerned about us making the wrong tradeoff here and breaking common cases by optimizing rare cases .\n\nI'm not sure about these rules in particular, but I know some existing rules are useful, such as the one that rewrites to a CSQ around the filters when the single MUST clause is a MatchAllDocsQuery. I think one reason why this happens is that apps have a fixed filter and then a configurable query that depends on the user and that defaults to a MatchAllDocsQuery.\n\nI can't think of one reason why someone would put a clause both is MUST and MUST_NOT, or both SHOULD and FILTER but I wouldn't be surprised that this happens sometimes. I think the testRandom test should be quite good at finding cases that we did not think about, but otherwise another approach I'd be fine with would be to back this change out and wait until we have concrete examples of users building such queries before adding rewrite rules for them. "
        },
        {
            "id": "comment-15437161",
            "author": "Robert Muir",
            "date": "2016-08-25T16:20:15+0000",
            "content": "Well my primary concern is on 6.x (where the test failed). 6.x is our stable branch but also its more complex due to coord() and queryNorm(). Without those two bad guys around, then these kinds of optimizations are less risky. Still, we should be careful with testing. "
        },
        {
            "id": "comment-15437186",
            "author": "Uwe Schindler",
            "date": "2016-08-25T16:38:42+0000",
            "content": "The part that rewrites boolean queries into a MatchNoDocsQuery if some clauses are bothe excluded and required is indeed broken on 6.x because of queryNorm. \n\nThat was my second guess  But I agree with your question that checking the query norm for a query that does not match anything is not needed (even on 6.x), because something that does not match anything does not produce any score that could have wrongly normalized \n Although it is a should clause in a top-level BQ, then it affects norm (I think that's the issue, right?)\nI will commit the simplification patch on master later on. "
        },
        {
            "id": "comment-15437246",
            "author": "Uwe Schindler",
            "date": "2016-08-25T17:09:00+0000",
            "content": "I'm not sure about these rules in particular, but I know some existing rules are useful, such as the one that rewrites to a CSQ around the filters when the single MUST clause is a MatchAllDocsQuery. I think one reason why this happens is that apps have a fixed filter and then a configurable query that depends on the user and that defaults to a MatchAllDocsQuery.\n\nThis was a huge issue for Solr where people used q=*:* as query and only applied filter claused (fq), the common case for faceted navigation without query.\n\nAnyways, we can add another consition to the above set: If any MUST_NOT clause is a MatchAllDocs() we can return MatchNoDocs, too  "
        },
        {
            "id": "comment-15437262",
            "author": "Uwe Schindler",
            "date": "2016-08-25T17:19:38+0000",
            "content": "Here the patch adding the MatchAllDocs must not query. What do you think? Maybe its not needed because there is a shortcut otherwhere "
        },
        {
            "id": "comment-15437290",
            "author": "Uwe Schindler",
            "date": "2016-08-25T17:31:34+0000",
            "content": "The inverse (any required clause is a MatchNoDocsQuery) is not needed, because that's already shortcutted when building scorers (socrer == null for any required clause shortcuts). "
        },
        {
            "id": "comment-15438580",
            "author": "ASF subversion and git services",
            "date": "2016-08-26T07:11:13+0000",
            "content": "Commit 35382a815566f8f64e7b26dd4c0ac1129d860887 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=35382a8 ]\n\nRevert \"LUCENE-7416: Rewrite optimizations for BooleanQuery.\"\n\nThis reverts commit 1ac9609caedbf739379bdabdac909f77fee2f5c6. "
        },
        {
            "id": "comment-15438583",
            "author": "ASF subversion and git services",
            "date": "2016-08-26T07:13:22+0000",
            "content": "Commit 63b2e8052f4f8bdb28e04d026e8388a0a77fd970 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=63b2e80 ]\n\nLUCENE-7416: Make 7.0 only. "
        },
        {
            "id": "comment-15438585",
            "author": "Adrien Grand",
            "date": "2016-08-26T07:14:00+0000",
            "content": "Well my primary concern is on 6.x (where the test failed). 6.x is our stable branch but also its more complex due to coord() and queryNorm(). Without those two bad guys around, then these kinds of optimizations are less risky. Still, we should be careful with testing.\n\nAgreed. I backed it out on the 6.x branch. "
        },
        {
            "id": "comment-15438601",
            "author": "Uwe Schindler",
            "date": "2016-08-26T07:24:57+0000",
            "content": "Adrien Grand: did you see my latest patch? Should I add this optimization in master, too? "
        },
        {
            "id": "comment-15438602",
            "author": "Adrien Grand",
            "date": "2016-08-26T07:24:59+0000",
            "content": "Uwe Schindler Your change makes sense to me! "
        },
        {
            "id": "comment-15438604",
            "author": "Uwe Schindler",
            "date": "2016-08-26T07:25:44+0000",
            "content": "OK  I will commit in a minute. "
        },
        {
            "id": "comment-15438608",
            "author": "ASF subversion and git services",
            "date": "2016-08-26T07:29:08+0000",
            "content": "Commit 646b6bfd2c23df36f911a99fd2807b85a961a36b in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=646b6bf ]\n\nLUCENE-7416: Simplify MatchNoDocs rewrite in BQ (using Java 8 streams); add another special case: MUST_NOT with MatchAllDocsQuery also produces no results "
        }
    ]
}