{
    "id": "LUCENE-3322",
    "title": "Disable cross-matches on multi-valued fields",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When searching against a multi-valued field it is often advantageous to disable cross-matches.  For instance, if a book contains two authors:  \"john smith\" and \"brian jones\", a search for \"john jones\" should not match.  \n\nCurrently the best workaround is to search using a sloppy phrase query.  The drawback is that phrases are incompatible with other features such as wildcards and ranges.  Additionally, it is left up to the user to know to formulate the query differently if searching a multi-valued field.",
    "attachments": {
        "LUCENE-3322.patch": "https://issues.apache.org/jira/secure/attachment/12486683/LUCENE-3322.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-15T21:06:19+0000",
            "content": "Here is an initial patch.  Creating this was an adventure for me in learning some of Lucene's internals!  \n\nIn this approach, ConjunctionScorer verifies that all of the matches' positions fall within the range of a user-supplied positionIncrementGap.  Supported query types are: TermQuery, TermRangeQuery, PrefixQuery, PhraseQuery, WidlcardQuery, FuzzyQuery & BooleanQuery.  A unit test is included demonstrating use with each of these query types.\n\nAll unit tests pass.  However, there are some glaring inefficiencies in this initial impl attempt.  Perhaps LUCENE-2878 will ultimately provide much of the functionality otherwise implemented here (??).  Also, should LUCENE-2308 be implemented, there might be an opportunity to store a Field Type's PositionIncrementGap in the index, further lessening the burden on the user to correctly issue these types of queries.\n ",
            "author": "James Dyer",
            "id": "comment-13066205"
        }
    ]
}