{
    "id": "SOLR-8845",
    "title": "SolrJ JDBC - Ensure that Spark works with SolrJ JDBC",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Ensure that Spark is able work with SolrJ JDBC.  \nCurrently, in Spark 1.6 and 2.x there are 3 known issues:\n1. SparkSQL query via a \"select *\" query - SOLR-8847\n2. SparkSQL query via a select query with a 1=0 where clause - SOLR-10171\n3. SparkSQL query via a prepared statement - SOLR-9017",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-15T12:20:35+0000",
            "author": "Kevin Risden",
            "content": "Timothy Potter - Just wanted to bring this to your attention since you did a bunch of work with Spark and Solr.  ",
            "id": "comment-15195189"
        },
        {
            "date": "2016-03-15T13:05:32+0000",
            "author": "Joel Bernstein",
            "content": "I was thinking that the SparkSQL would be better off accessing Solr directly through the Streaming API.  ",
            "id": "comment-15195262"
        },
        {
            "date": "2016-03-15T13:06:37+0000",
            "author": "Kevin Risden",
            "content": "That could very well be true for performance. Just wanted to point out that JDBC is an option for SparkSQL so might as well test it. ",
            "id": "comment-15195265"
        },
        {
            "date": "2016-04-20T15:52:53+0000",
            "author": "Kevin Risden",
            "content": "After SOLR-8809 was committed, the next issue is an error on the server from connecting with Spark.\n\n\njava.lang.ClassCastException: com.facebook.presto.sql.tree.LongLiteral cannot be cast to com.facebook.presto.sql.tree.StringLiteral\n\tat org.apache.solr.handler.SQLHandler.getPredicateField(SQLHandler.java:1240)\n\tat org.apache.solr.handler.SQLHandler.access$800(SQLHandler.java:79)\n\tat org.apache.solr.handler.SQLHandler$ExpressionVisitor.visitComparisonExpression(SQLHandler.java:920)\n\tat org.apache.solr.handler.SQLHandler$ExpressionVisitor.visitComparisonExpression(SQLHandler.java:902)\n\tat com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:77)\n\tat com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)\n\tat org.apache.solr.handler.SQLHandler$SQLVisitor.visitQuerySpecification(SQLHandler.java:1025)\n\tat org.apache.solr.handler.SQLHandler$SQLVisitor.visitQuerySpecification(SQLHandler.java:934)\n\tat com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)\n\tat com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)\n\tat org.apache.solr.handler.SQLHandler$SQLVisitor.processRelation(SQLHandler.java:1154)\n\tat org.apache.solr.handler.SQLHandler$SQLVisitor.visitQuery(SQLHandler.java:1000)\n\tat org.apache.solr.handler.SQLHandler$SQLVisitor.visitQuery(SQLHandler.java:934)\n\tat com.facebook.presto.sql.tree.Query.accept(Query.java:80)\n\tat com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)\n\tat org.apache.solr.handler.SQLHandler$SQLTupleStreamParser.parse(SQLHandler.java:174)\n\tat org.apache.solr.handler.SQLHandler.handleRequestBody(SQLHandler.java:129)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2015)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:653)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:461)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:229)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:518)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)\n\tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-15250130"
        },
        {
            "date": "2016-04-20T15:54:20+0000",
            "author": "Joel Bernstein",
            "content": "Interesting. I wonder what query generated this error. ",
            "id": "comment-15250133"
        },
        {
            "date": "2016-04-20T15:56:05+0000",
            "author": "Kevin Risden",
            "content": "Trey Cahill I think has some more insight. \"Select *\" is called by Spark when it first connects to get information about the field names. Could be related to that. I'll keep digging. ",
            "id": "comment-15250136"
        },
        {
            "date": "2016-04-20T16:58:33+0000",
            "author": "Joel Bernstein",
            "content": "Yeah, that would cause an exception of some sort. ",
            "id": "comment-15250259"
        },
        {
            "date": "2016-04-20T20:42:18+0000",
            "author": "Kevin Risden",
            "content": "The query is:\n\n\nSELECT * FROM test WHERE 1=0\n\n\n\nWhat is happening is the where clause is being processed and since the 1 is a LongLiteral you get the class cast exception in the SQLHandler. ",
            "id": "comment-15250673"
        },
        {
            "date": "2016-04-20T20:48:16+0000",
            "author": "Joel Bernstein",
            "content": "That's a weird query ",
            "id": "comment-15250685"
        },
        {
            "date": "2016-04-20T20:50:54+0000",
            "author": "Joel Bernstein",
            "content": "Where 1=0 assumes a lot about what a SQL engine supports. ",
            "id": "comment-15250695"
        },
        {
            "date": "2016-04-20T20:52:33+0000",
            "author": "Kevin Risden",
            "content": "Yea well here is the Apache Spark source for JDBCRDD for that method:\n\nhttps://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/jdbc/JDBCRDD.scala#L109 ",
            "id": "comment-15250699"
        },
        {
            "date": "2016-04-20T20:53:03+0000",
            "author": "Joel Bernstein",
            "content": "Why not just use the JDBC meta data queries anyway? Why this weirdness? ",
            "id": "comment-15250701"
        },
        {
            "date": "2016-04-20T20:55:13+0000",
            "author": "Kevin Risden",
            "content": "Explanation via Stackoverflow http://stackoverflow.com/questions/9140606/why-would-you-use-where-1-0-statement-in-sql\n\nMakes sure that no rows are sent back. ",
            "id": "comment-15250706"
        },
        {
            "date": "2016-04-20T21:00:02+0000",
            "author": "Joel Bernstein",
            "content": "I can take a look and see what needs to be done to support the 1=0 query.  ",
            "id": "comment-15250710"
        },
        {
            "date": "2017-02-16T17:55:09+0000",
            "author": "Kevin Risden",
            "content": "Joel Bernstein - Just an FYI with the calcite piece merged I did a test of this against master. It still fails for the 1=0 part. \n\n\njava.lang.AssertionError: cannot translate call =(1, 0)\n\n ",
            "id": "comment-15870371"
        },
        {
            "date": "2017-02-20T03:18:49+0000",
            "author": "Kevin Risden",
            "content": "So the way to work through this with Calcite is to enable the constant reduction rules so that 1 = 0 is treated as FALSE and then that is removed from the plan. Thanks to Julian Hyde on the Calcite mailing list for the tip. I'll post a patch here in a few minutes. ",
            "id": "comment-15873984"
        },
        {
            "date": "2017-02-20T03:37:26+0000",
            "author": "Kevin Risden",
            "content": "I opened a new issue SOLR-10171 that details adding the constant reduction rules. This way this issue can be specific for checking Spark with JDBC works. ",
            "id": "comment-15873994"
        },
        {
            "date": "2017-03-05T18:34:39+0000",
            "author": "Kevin Risden",
            "content": "I tested this is the latest nightly and hitting a prepared statement not supported error. This needs to be addressed. ",
            "id": "comment-15896481"
        },
        {
            "date": "2017-03-05T18:37:13+0000",
            "author": "Kevin Risden",
            "content": "Added links to SOLR-9017 and SOLR-9963 ",
            "id": "comment-15896484"
        }
    ]
}