{
    "id": "SOLR-4722",
    "title": "Highlighter which generates a list of query term position(s) for each item in a list of documents, or returns null if highlighting is disabled.",
    "details": {
        "affect_versions": "4.3,                                            6.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "As an alternative to returning snippets, this highlighter provides the (term) position for query matches.  One usecase for this is to reconcile the term position from the Solr index with 'word' coordinates provided by an OCR process.  In this way we are able to 'highlight' an image, like a page from a book or an article from a newspaper, in the locations that match the user's query.\n\nThis is based on the FastVectorHighlighter and requires that termVectors, termOffsets and termPositions be stored.",
    "attachments": {
        "solr-positionshighlighter.jar": "https://issues.apache.org/jira/secure/attachment/12579026/solr-positionshighlighter.jar",
        "SOLR-4722.patch": "https://issues.apache.org/jira/secure/attachment/12579017/SOLR-4722.patch",
        "PositionsSolrHighlighter.java": "https://issues.apache.org/jira/secure/attachment/12869193/PositionsSolrHighlighter.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tricia Jenkins",
            "id": "comment-13633305",
            "date": "2013-04-16T20:27:53+0000",
            "content": "Loosely related to SOLR-1954 and SOLR-1397.  SOLR-1954 is looking at exposing offsets and score in addition to snippets.  SOLR-1397 is looking to highlight external fields, say from a database, with a Solr highlighter (and analysis). "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13633307",
            "date": "2013-04-16T20:30:25+0000",
            "content": "Stems from the same usecase as SOLR-380. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13633393",
            "date": "2013-04-16T21:31:13+0000",
            "content": "This patch applies against trunk and includes a unit test.  4.x would require a slight modification because StoredDocument was introduced more recently.  Formerly  org.apache.solr.search.SolrIndexSearcher.doc(...) returned Document. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13633426",
            "date": "2013-04-16T21:50:13+0000",
            "content": "Solr plug-in jar compiled against 4.1.0.  Place this into your solr.home/collection/lib directory and configure conf/solrconfig.xml\n\n<searchComponent class=\"solr.HighlightComponent\" name=\"highlight\">\n  <highlighting class=\"org.apache.solr.highlight.PositionsSolrHighlighter\" summarizeEmpty=\"false\"/>\n</searchComponent>\n\n \n to use. "
        },
        {
            "author": "Karol Sikora",
            "id": "comment-13633530",
            "date": "2013-04-16T23:05:41+0000",
            "content": "Very usefull feature, thanks Tricia! "
        },
        {
            "author": "Simon Rosenthal",
            "id": "comment-13822537",
            "date": "2013-11-14T15:54:23+0000",
            "content": "Great patch !\n\nI'd like to use the code as the basis for a component which will simply return term positions for each query term - no need for having highlighting enabled as a prerequisite, or to return term offsets - this is a text mining project where we'll be running queries in batch mode and storing this information externally. \n\nCan you think of any gotchas I might encounter ? "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13822636",
            "date": "2013-11-14T17:21:12+0000",
            "content": "Thanks for your interest.  This code/jar could be used as is for your purposes.\n\nIf you don't want to specify highlighting enabled in each query just move it to conf/solrconfig.xml:\n\n  <requestHandler name=\"standard\" class=\"solr.StandardRequestHandler\">\n    <lst name=\"defaults\">\n      <str name=\"hl\">true</str>\n    </lst>\n  </requestHandler>\n\n\n\nThis highlighter only returns the term positions.  The term offsets are stored because they're used by the FastVectorHighlighter.  You won't get any useful information from this highlighter if you disable termOffsets in your schema.xml.\n\nI just ran this patch against trunk.  Still works! "
        },
        {
            "author": "Simon Rosenthal",
            "id": "comment-13822893",
            "date": "2013-11-14T20:51:19+0000",
            "content": "Just one oddity - there are references to the StoredDocument class in getUniqueKeys() which (as far as I can see) is only in trunk - and I'm using Lucene/Solr 4.5.1. I replaced that with Document =\u00a0 which compiles OK, but I haven't had a chance to try it out yet. Do you think it should work ?\u00a0 \n\n-Simon\n\n\n\n\nOn Thursday, November 14, 2013 12:21 PM, Tricia Jenkins (JIRA) <jira@apache.org> wrote:\n\n\n\u00a0 \u00a0 [ https://issues.apache.org/jira/browse/SOLR-4722?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13822636#comment-13822636 ] \n\nTricia Jenkins commented on SOLR-4722:\n--------------------------------------\n\nThanks for your interest.\u00a0 This code/jar could be used as is for your purposes.\n\nIf you don't want to specify highlighting enabled in each query just move it to conf/solrconfig.xml:\n\n\u00a0 <requestHandler name=\"standard\" class=\"solr.StandardRequestHandler\">\n\u00a0 \u00a0 <lst name=\"defaults\">\n\u00a0 \u00a0 \u00a0 <str name=\"hl\">true</str>\n\u00a0 \u00a0 </lst>\n\u00a0 </requestHandler>\n\n\n\nThis highlighter only returns the term positions.\u00a0 The term offsets are stored because they're used by the FastVectorHighlighter.\u00a0 You won't get any useful information from this highlighter if you disable termOffsets in your schema.xml.\n\nI just ran this patch against trunk.\u00a0 Still works!\n\n\n\n\n\u2013\nThis message was sent by Atlassian JIRA\n(v6.1#6144) "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13823063",
            "date": "2013-11-14T22:45:17+0000",
            "content": "Hi Simon,\n\nYou shouldn't need to build a custom Solr to get this to work for you.  Just put the jar file provided in your lib directory and adjust your solrconfig.xml file acordingly.  I just tried it out with the solr-4.5.1.zip binary and worked just fine to get term positions for the includes field in the example.\n\nYou did bring to my attention that the getUniqueKeys isn't necessary. It looks like a copy/paste error from the PostingsSolrHighlighter.  New patch to follow.  I'm just running all the steps suggested in the HowToContribute wiki.\n\nThanks,\nTricia "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13825888",
            "date": "2013-11-18T22:50:05+0000",
            "content": "Applied against revision 1542971.  Removed unnecessary code. "
        },
        {
            "author": "Simon Rosenthal",
            "id": "comment-13840622",
            "date": "2013-12-05T22:00:35+0000",
            "content": "I also needed to remove the line for the unnecessary import\n\nimport org.apache.lucene.index.StoredDocument\n\nas that class is not in Solr 4.4. After that, it worked like a charm. "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-14487389",
            "date": "2015-04-09T14:01:43+0000",
            "content": "Thanks for the great patch. I confirm it works in solr 4.10.3, although recompilation was necessary. "
        },
        {
            "author": "Lee Wheless",
            "id": "comment-15121645",
            "date": "2016-01-28T15:09:07+0000",
            "content": "Has anyone tried this in version 5.4.0? "
        },
        {
            "author": "Forest Soup",
            "id": "comment-16019101",
            "date": "2017-05-22T03:00:55+0000",
            "content": "Thanks a lot for the patch!\nI did some modification based on the original patch to meet our project special needs. This modification reveals each term's text as well as its position and offsets.  \nWe do not need solr to do the highlighting but just return the positions and offsets. So in schema.xml, our field does not stored and only have termVectors=\"true\" termPositions=\"true\" termOffsets=\"true\". \nJust share it. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16019114",
            "date": "2017-05-22T03:28:45+0000",
            "content": "BTW to anyone wishing to do this with the UnifiedSolrHighlighter (Solr 6.4+), you override getBreakIterator to always return WholeBreakIterator, and return getFormatter to return a custom PassageFormatter that encodes the data in Passage however you want.  If you return something other than a String (e.g. Solr NamedList which seems likely) then you'll need to also override UnifiedSolrHighlighter.doHighlighting to not call highlighter.highlightFields; instead call highlightFieldsAsObjects.\n\nThis will ultimately end up loading the stored value from Solr and it'll insist it be able to do so.  However it won't be used if your PassageFormatter doesn't do anything with it and if the offsets are already in term vectors or postings.  In this circumstance, you may be able to get away with not loading the stored value by overriding loadFieldValues to return empty strings.  However I think there are some assumptions in FieldHighlighter.highlightOffsetsEnums in which it gets the content length via breakIterator.getText().getEndIndex();, and it furthermore stops looping once a retrieved offset exceeds that value.  So you probably can't simply use an empty string substitute.  But you nonetheless might be able to hack up a workaround such as via a custom variation of WholeBreakIterator that lies about the end index.  It'd be nice if working around this were a bit easier but it's very advanced. "
        },
        {
            "author": "Tamer Boz",
            "id": "comment-16323833",
            "date": "2018-01-12T11:13:07+0000",
            "content": "I want to use the PositionsSolrHighlighter with solr version 6.6.2. I managed to compile PositionsSolrHighlighter.java in version 6.6.2  without errors.\nAfter that I put the snippet below in in Solrconfig.xml, als I used these settings termVectors=\"true\" termPositions=\"true\" termOffsets=\"true\"\nUnfortunate I do not get any results about each term's text.\nCan someone explain all the steps that are necessary to get results?\n\n<searchComponent class=\"solr.HighlightComponent\" name=\"highlight\">\n<highlighting class=\"org.apache.solr.highlight.PositionsSolrHighlighter\"> \n</highlighting>\n</searchComponent> "
        },
        {
            "author": "Bram Vereertbrugghen",
            "id": "comment-16404826",
            "date": "2018-03-19T13:49:37+0000",
            "content": "As a response to Tamer Boz:\n\nWhat I did was the following:\n 1. place the solr-positionshighlighter.jar into /opt/solr/server/solr/lib, where Solr could find it. (Note: I'm running Solr in a docker container, so our paths will be different).\n\nThen in mycore/conf/solrconfig.xml:\n\n2. Create the searchComponent using the above snippets and name it 'highlighter' (I didn't want to deal with duplicate naming or overwritten issues, so I played it safe).\n\n <searchComponent class=\"solr.HighlightComponent\" name=\"highlighter\">\n\u00a0\u00a0\u00a0 <highlighting class=\"org.apache.solr.highlight.PositionsSolrHighlighter\"/>\n\u00a0</searchComponent>\n\n3. Either create a new requestHandler for testing, or append it to an existing one using <arr>...</arr>. This is a new endpoint where the highlighting will be the new highlighter:\n\n\u00a0 <requestHandler name=\"/test-point\" class=\"solr.SearchHandler\">\n\u00a0\u00a0\u00a0 <lst name=\"defaults\">\n\u00a0\u00a0\u00a0\u00a0\u00a0 <str name=\"omitHeader\">true</str>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <str name=\"wt\">json</str>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <str name=\"indent\">true</str>\n\u00a0\u00a0\u00a0 </lst>\n\u00a0\u00a0\u00a0 <arr name=\"last-components\">\n\u00a0\u00a0\u00a0\u00a0\u00a0 <str>highlighter</str>\n\u00a0\u00a0\u00a0 </arr>\n\u00a0 </requestHandler>\n\n\n4. Make the following call (change the url so it points to your core and solr instance):\n\nhttp://localhost:8002/solr/mycore/test-point?hl.fl=tm_field_test&hl=on&indent=on&q=tm_field_test:test&wt=json\n\nThis will output a highlighting array containing a number, and this number contains the position of the word in the document.\nNOTE: I found very strange results when using this .jar on documents where the values were arrays. If this is your case, be prepared to rewrite some stuff (or find the correct interpretation of the results).\n\n\u00a0\n\n\u00a0 "
        }
    ]
}