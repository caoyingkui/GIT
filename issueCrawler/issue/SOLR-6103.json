{
    "id": "SOLR-6103",
    "title": "Add DateRangeField",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "spatial"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "LUCENE-5648 introduced a date range index & search capability in the spatial module. This issue is for a corresponding Solr FieldType to be named \"DateRangeField\". LUCENE-5648 includes a parseCalendar(String) method that parses a superset of Solr's strict date format.  It also parses partial dates (e.g.: 2014-10  has month specificity), and the trailing 'Z' is optional, and a leading +/- may be present (minus indicates BC era), and \"*\" means all-time.  The proposed field type would use it to parse a string and also both ends of a range query, but furthermore it will also allow an arbitrary range query of the form <calspec> TO <calspec> such as:\n\n2000 TO 2014-05-21T10\n\nWhich parses as the year 2000 thru 2014 May 21st 10am (GMT). \nI suggest this syntax because it is aligned with Lucene's range query syntax.",
    "attachments": {
        "SOLR-6103.patch": "https://issues.apache.org/jira/secure/attachment/12646105/SOLR-6103.patch",
        "SOLR-6103_more_tests.patch": "https://issues.apache.org/jira/secure/attachment/12659900/SOLR-6103_more_tests.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-14004709",
            "date": "2014-05-21T14:34:50+0000",
            "content": "It just occurred to me that \n\n* TO 2014\n\n ought to be supported but it doesn't work \u2013 I'll fix that in LUCENE-5648.\n\nPerhaps the range syntax should include matching '[' and ']'?  It's only pertinent for indexing ranges; at query time you might as well use the normal range query syntax.  One aspect I haven't considered is exclusive boundaries, but I think it's generally a non-issue because of the rounding this field supports.\n\nNote that LUCENE-5648 is still only v5/trunk for the moment. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14005247",
            "date": "2014-05-21T21:15:02+0000",
            "content": "I updated LUCENE-5608 with the date range parsing, and now I added the DateRangeField here with tests.  Examples on how to index ranges are below. Note that they aren't necessarily explicit ranges, it can be implied by referring specifying a date instance to a desired granularity.  It includes the same syntax Solr supports, though doesn't do \"DateMath\".\n\n[* TO *]\n2014-05-21T12:00:00.000Z\n[2000 TO 2014-05-21]\n\n\n\nBy default, at search time the predicate is intersects, which means it'll match any overlap with an indexed date range.  It can be specified with \"op\" as a local-param.\n\nq=dateRange:\"2014-05-21\"\nq={!field f=dateRange op=Contains v=\"[1999 TO 2001]\"}\n\n\nI opted for this new \"op\" local-param instead of using Lucene-spatial's awkward SpatialArgsParser format which looks like \"Intersects(foo)\". "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-14017886",
            "date": "2014-06-04T17:16:31+0000",
            "content": "+1 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14018416",
            "date": "2014-06-05T02:04:37+0000",
            "content": "Commit 1600556 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1600556 ]\n\nSOLR-6103: Add QParser arg to AbstractSpatialFieldType.parseSpatialArgs(). Make getQueryFromSpatialArgs protected no private. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14018418",
            "date": "2014-06-05T02:05:28+0000",
            "content": "Commit 1600557 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1600557 ]\n\nSOLR-6103: DateRangeField "
        },
        {
            "author": "David Smiley",
            "id": "comment-14018419",
            "date": "2014-06-05T02:07:20+0000",
            "content": "Committed to 5x for now; intend to move to 4x soon-ish.\n\nPlease try it out folks!\n\nFaceting to come... "
        },
        {
            "author": "Adrien Brault",
            "id": "comment-14082535",
            "date": "2014-08-01T17:17:22+0000",
            "content": "David Smiley Are you still planning to get that change into 4.x ?\n\nIt would allow us to solve a lot of problems that are way too hard to implement without the DateRangeField. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14082557",
            "date": "2014-08-01T17:22:48+0000",
            "content": "I am; I'm waiting to port some related API improvements once I figure out one last issue.  Have you tried the feature on 5x?  It's very easy to. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-14082978",
            "date": "2014-08-01T21:20:33+0000",
            "content": "You might want to take a peek at the LucidWorks Search query parser support of date queries. It would be so nice to have comparable date support in Solr itself.\n\nIt includes the ability to auto-expand a simple partial date/time term into a full range, as well as using partial date/time in explicit range queries.\n\nSee:\nhttp://docs.lucidworks.com/display/lweug/Date+Queries "
        },
        {
            "author": "David Smiley",
            "id": "comment-14082991",
            "date": "2014-08-01T21:29:28+0000",
            "content": "Thanks Jack; although I feel that's a separate issue.  But at least this field does let you specify convenient prefixes of Solr's date syntax, and then get the range equivalent for that unit of time. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-14083031",
            "date": "2014-08-01T22:03:13+0000",
            "content": "One nuance is for the end of the range - [2010 TO 2012] should expand the starting date to the beginning of that period, but expand the ending date to the end of that period (2012-12-31T23:59:59.999Z). And [2010 TO 2012} would expand the ending date to the beginning (rather than the ending) of the period (2012-01-01T00:00:00Z), with the \"exclusive\" flag set as well. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14083071",
            "date": "2014-08-01T22:25:10+0000",
            "content": "I like that idea; it's only inclusive right now ']'. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14086186",
            "date": "2014-08-05T12:23:51+0000",
            "content": "Hi David,\n\nCool feature!\n\nI wanted to add some tests when the 'dateRange' field has multiple ranges but wanted to clear out a doubt before I put up the patch - \n\nWhat is the difference when I search with \n\n[2000 TO 2014]\n\n instead of \n\n[2000-00 TO 2014-12]\n\nI can see that the Filter query being formed for the later has NRShape \n\n[1999-12 TO 2014]\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-14086312",
            "date": "2014-08-05T14:30:18+0000",
            "content": "I'm glad you like it.\n\n2000-00 is wrong because the displayed and toString January is 01, not 00.  It's true that internally 0 is used.  Arguably this should throw an exception but I suppose the current behavior is not unexpected.\n\n[2000 TO 2014] and [2000-01 to 2014-12] should be equivalent.  FYI there are 3 tests at multiple levels but the one that is easiest to see these things is DateRangePrefixTreeTest.java "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14086399",
            "date": "2014-08-05T15:48:52+0000",
            "content": "Thanks David for clearing it out my doubts.\n\nI added a patch which adds tests around 'dateRange' having multiple ranges. \nFor this I made 'dateRange' field multiValued in the solrconfig.  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14086490",
            "date": "2014-08-05T17:05:27+0000",
            "content": "Commit 1615961 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1615961 ]\n\nSOLR-6103: Test mult-valued DateRangeField (thanks Varun Thacker) "
        },
        {
            "author": "David Smiley",
            "id": "comment-14086492",
            "date": "2014-08-05T17:07:13+0000",
            "content": "Thanks Varun; committed now.\nFYI the tests at the Lucene level are very thorough and use the randomized testing mindset.  So at the Solr level the Solr test may suggest it's not tested well but it's not the case at all. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14086569",
            "date": "2014-08-05T18:11:27+0000",
            "content": "Indeed. Just went through DateNRStrategyTest.\n\nOne use case which came to my mind - Specify recurring date ranges. Say summer vacations every year . Then one could boost certain type of documents in that period. Although I would wait till someone actually has a use case like this  "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332934",
            "date": "2015-02-23T05:02:41+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}