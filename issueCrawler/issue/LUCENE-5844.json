{
    "id": "LUCENE-5844",
    "title": "ArrayUtil.grow should not pretend you can actually allocate array[Integer.MAX_VALUE]",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/other"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.9.1",
            "4.10",
            "6.0"
        ]
    },
    "description": "Today if the growth it wants would exceed Integer.MAX_VALUE, it returns Integer.MAX_VALUE, but you can't actually allocate arrays this large; the actual limit is JVM dependent and varies across JVMs ...\n\nIt would be nice if we could somehow \"introspect\" the JVM to find out what its  actual limit is and use that.  http://stackoverflow.com/questions/3038392/do-java-arrays-have-a-maximum-size seems to imply that using Integer.MAX_VALUE - 8 may be \"safe\" (it's what ArrayList.java apparently uses).",
    "attachments": {
        "LUCENE-5844.patch": "https://issues.apache.org/jira/secure/attachment/12657417/LUCENE-5844.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14072099",
            "author": "Robert Muir",
            "content": "+1, i hit this today when trying to corrupt my stored fields: I can't make a document with 2^31 - 2^14 + 1 bytes, because it tries to overallocate to a bigger array that java cant actually make. so today grow() limts you to Integer.MAX_VALUE - (Integer.MAX_VALUE/8) or something in practice. ",
            "date": "2014-07-23T18:32:50+0000"
        },
        {
            "id": "comment-14072157",
            "author": "Michael McCandless",
            "content": "Simple patch, I used Integer.MAX_VALUE-8, and added a couple tests. ",
            "date": "2014-07-23T19:03:15+0000"
        },
        {
            "id": "comment-14072165",
            "author": "Michael McCandless",
            "content": "New patch, just simplifying / fixing confusing comment in PriorityQueue.java... ",
            "date": "2014-07-23T19:05:50+0000"
        },
        {
            "id": "comment-14072196",
            "author": "Robert Muir",
            "content": "+1 ",
            "date": "2014-07-23T19:27:24+0000"
        },
        {
            "id": "comment-14072238",
            "author": "ASF subversion and git services",
            "content": "Commit 1612935 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1612935 ]\n\nLUCENE-5844: ArrayUtil.grow/oversize now returns at most Integer.MAX_VALUE - 8 ",
            "date": "2014-07-23T19:56:43+0000"
        },
        {
            "id": "comment-14072242",
            "author": "ASF subversion and git services",
            "content": "Commit 1612936 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1612936 ]\n\nLUCENE-5844: ArrayUtil.grow/oversize now returns at most Integer.MAX_VALUE - 8 ",
            "date": "2014-07-23T19:58:36+0000"
        },
        {
            "id": "comment-14072919",
            "author": "Dawid Weiss",
            "content": "Why a constant 8 in:\n\n Integer.MAX_VALUE - 8\n\n\n\nCouldn't this be somehow linked up to array header overhead in RUE? I didn't check the impl. in openjdk, but I think it probably is related to that (so that max. offset from object start is at most 2^32-1)? ",
            "date": "2014-07-24T07:10:50+0000"
        },
        {
            "id": "comment-14072998",
            "author": "Michael McCandless",
            "content": "Couldn't this be somehow linked up to array header overhead in RUE?\n\n+1, the comment in ArrayList.java (OpenJDK 7) is:\n\n\n  190       /**\n  191        * The maximum size of array to allocate.\n  192        * Some VMs reserve some header words in an array.\n  193        * Attempts to allocate larger arrays may result in\n  194        * OutOfMemoryError: Requested array size exceeds VM limit\n  195        */\n  196       private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\nSo we could just change the 8 to RUE.NUM_BYTES_ARRAY_HEADER?  Or maybe we can sneak in and try to access this private MAX_ARRAY_SIZE...? ",
            "date": "2014-07-24T08:42:31+0000"
        },
        {
            "id": "comment-14073009",
            "author": "Dawid Weiss",
            "content": "I'd say we could just use RUE.NUM_BYTES_ARRAY_HEADER as the default, explaining the rationale and pointing at ArrayList#MAX_ARRAY_SIZE? It seems more elegant to me to actually explain how the max number is reached. ",
            "date": "2014-07-24T08:59:45+0000"
        },
        {
            "id": "comment-14073010",
            "author": "Michael McCandless",
            "content": "OK will do! ",
            "date": "2014-07-24T09:01:36+0000"
        },
        {
            "id": "comment-14073017",
            "author": "ASF subversion and git services",
            "content": "Commit 1613043 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1613043 ]\n\nLUCENE-5844: use RUE.NUM_BYTES_ARRAY_HEADER instead of 8 ",
            "date": "2014-07-24T09:08:05+0000"
        },
        {
            "id": "comment-14073018",
            "author": "ASF subversion and git services",
            "content": "Commit 1613044 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1613044 ]\n\nLUCENE-5844: use RUE.NUM_BYTES_ARRAY_HEADER instead of 8 ",
            "date": "2014-07-24T09:09:06+0000"
        },
        {
            "id": "comment-14136349",
            "author": "Michael McCandless",
            "content": "Reopen for backport to 4.9.1... ",
            "date": "2014-09-16T22:14:24+0000"
        },
        {
            "id": "comment-14136358",
            "author": "ASF subversion and git services",
            "content": "Commit 1625417 from Michael McCandless in branch 'dev/branches/lucene_solr_4_9'\n[ https://svn.apache.org/r1625417 ]\n\nLUCENE-5844: backport to 4.9.1 ",
            "date": "2014-09-16T22:18:20+0000"
        },
        {
            "id": "comment-14151049",
            "author": "Michael McCandless",
            "content": "Bulk close for Lucene/Solr 4.9.1 release ",
            "date": "2014-09-28T09:05:50+0000"
        }
    ]
}