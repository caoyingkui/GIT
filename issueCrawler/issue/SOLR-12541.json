{
    "id": "SOLR-12541",
    "title": "Metrics handler throws an error if there are transient cores",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "metrics"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "7.2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "My environment is as follows\n\n\tSolr 7.2.1 in standalone mode.\n\t32GB heap\n\t150 cores with data getting continuously ingested to ~10 cores and all of the cores queried.\n\ttransient cache size is set to 30.\n\n\n\nThe solr.xml is as follows\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<solr>\n\n  <int name=\"transientCacheSize\">32</int>\n  <str name=\"shareSchema\">true</str>\n  <str name=\"configSetBaseDir\">${configSetBaseDir:configsets}</str>\n\n  <shardHandlerFactory name=\"shardHandlerFactory\"\n                       class=\"HttpShardHandlerFactory\">\n    <int name=\"socketTimeout\">${socketTimeout:600000}</int>\n    <int name=\"connTimeout\">${connTimeout:60000}</int>\n  </shardHandlerFactory>\n</solr>\n\n\nI get the following error when I request for \"/solr/admin/metrics\".\n\n{\n    \"responseHeader\": {\n        \"status\": 500,\n        \"QTime\": 31\n    },\n    \"error\": {\n        \"msg\": \"Already closed\",\n        \"trace\": \"org.apache.lucene.store.AlreadyClosedException: Already closed\\n\\tat org.apache.solr.core.CachingDirectoryFactory.get(CachingDirectoryFactory.java:337)\\n\\tat org.apache.solr.core.SolrCore.getNewIndexDir(SolrCore.java:351)\\n\\tat org.apache.solr.core.SolrCore.getIndexDir(SolrCore.java:330)\\n\\tat org.apache.solr.handler.ReplicationHandler.lambda$initializeMetrics$5(ReplicationHandler.java:849)\\n\\tat org.apache.solr.util.stats.MetricUtils.convertGauge(MetricUtils.java:488)\\n\\tat org.apache.solr.util.stats.MetricUtils.convertMetric(MetricUtils.java:274)\\n\\tat org.apache.solr.util.stats.MetricUtils.lambda$toMaps$4(MetricUtils.java:213)\\n\\tat java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\\n\\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)\\n\\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)\\n\\tat java.util.TreeMap$KeySpliterator.forEachRemaining(TreeMap.java:2746)\\n\\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\\n\\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\\n\\tat java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\\n\\tat java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\\n\\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\\n\\tat java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)\\n\\tat org.apache.solr.util.stats.MetricUtils.toMaps(MetricUtils.java:211)\\n\\tat org.apache.solr.handler.admin.MetricsHandler.handleRequestBody(MetricsHandler.java:108)\\n\\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:177)\\n\\tat org.apache.solr.servlet.HttpSolrCall.handleAdmin(HttpSolrCall.java:735)\\n\\tat org.apache.solr.servlet.HttpSolrCall.handleAdminRequest(HttpSolrCall.java:716)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:497)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:382)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:326)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1751)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\\n\\tat org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:534)\\n\\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\\n\\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\\n\\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283)\\n\\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108)\\n\\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\",\n        \"code\": 500\n    }\n}\n\n\n\u00a0\n\nI validated that this problem happens on the default configset as well (no changes other than transientCacheSize).\n\nDebugger shows that the getIndexDir()\u00a0fails on a core which is unloaded. I confirmed that by checking \"isLoaded\" property in STATUS output for the core.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-07-10T18:41:34+0000",
            "content": "I have set the priority as blocker, since we are unable to export metrics over http in production. ",
            "author": "Nandakishore Krishna",
            "id": "comment-16539078"
        },
        {
            "date": "2018-07-10T20:24:18+0000",
            "content": "Patches welcome! ",
            "author": "Erick Erickson",
            "id": "comment-16539185"
        },
        {
            "date": "2018-07-16T17:19:05+0000",
            "content": " Blockers are reserved for issues that will hold up a release of Solr. Metrics development was focused on SolrCloud and transient cores were never really considered. Therefore I'm changing the priority. That would probably be a good enhancement if you (or anyone else) can come up with a solution that would be a good thing. ",
            "author": "Erick Erickson",
            "id": "comment-16545513"
        },
        {
            "date": "2018-08-07T11:21:56+0000",
            "content": "Commit 208d59b5e3dbc5207d9b150d56d70e53f81c0e3f in lucene-solr's branch refs/heads/master from Andrzej Bialecki\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=208d59b ]\n\nSOLR-12541: Metrics handler throws an error if there are transient cores. ",
            "author": "ASF subversion and git services",
            "id": "comment-16571472"
        },
        {
            "date": "2018-08-07T12:08:26+0000",
            "content": "Commit 4d035a7461733f765e9f0dc091028d5d5376f33e in lucene-solr's branch refs/heads/branch_7x from Andrzej Bialecki\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4d035a7 ]\n\nSOLR-12541: Metrics handler throws an error if there are transient cores. ",
            "author": "ASF subversion and git services",
            "id": "comment-16571542"
        }
    ]
}