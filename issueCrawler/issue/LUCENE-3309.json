{
    "id": "LUCENE-3309",
    "title": "Add narrow API for loading stored fields, to replace FieldSelector",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "Field Type branch"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "I think we should \"invert\" the FieldSelector API, with a \"push\" API\nwhereby FieldsReader invokes this API once per field in the document\nbeing visited.\n\nImplementations of the API can then do arbitrary things like save away\nthe field's size, load the field, clone the IndexInput for later lazy\nloading, etc.\n\nThis very thin API would be a mirror image of the very thin index time\nAPI we now have (IndexableField) and, importantly, it would have no\ndependence on our \"user space\" Document/Field/FieldType impl, so apps\nare free to do something totally custom.\n\nAfter we have this, we should build the \"sugar\" API that rebuilds a\nDocument instance (ie IR.document(int docID)) on top of this new thin\nAPI.  This'll also be a good test that the API is sufficient.\n\nRelevant discussions from IRC this morning at\nhttp://colabti.org/irclogger/irclogger_log/lucene-dev?date=2011-07-13#l76",
    "attachments": {
        "LUCENE-3309.patch": "https://issues.apache.org/jira/secure/attachment/12486359/LUCENE-3309.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-13T19:59:33+0000",
            "content": "Initial patch:\n\n\n\tAdds IndexReader.FieldVisitor and abstract\n    IndexReader.document(int docID, FieldVisitor visitor).  IR\n    subclasses and FieldsReader implement this.\n\n\n\n\n\tStop storing tokenized bit in stored fields \u2013 the fast vector\n    highlighter was actually using this metadata; I change it to\n    always insert the separator char (even for not-analyzed fields)\n    and changed the keyword analyzer in the tests to set offset gap\n    to 1.  We need to do this anyway for LUCENE-2309, and since we are\n    making an API here we may as well remove it now...\n\n\n\n\n\tImplement IndexReader.document(int) using only the new\n    FieldVisitor API.\n\n\n\nAll tests pass.\n\nI think next up is to cutover the various FieldSelector impls to\nFieldVisitor impls, move them to contrib, and then remove\nFieldSelector from core. ",
            "author": "Michael McCandless",
            "id": "comment-13064810"
        },
        {
            "date": "2011-07-13T23:46:27+0000",
            "content": "New patch, this time moving *FieldSelector (including LazyField) to\ncontrib/misc, and adding a \"bridge class\" (FieldSelectorVisitor) that\nimplements the new FieldVisitor, wrapping a FieldSelector.\n\nFieldsReader is now very simple \u2013 the only API it supports for\nreading a doc is visitDocument (taking FieldsVisitor).  It now knows\nnothing about Document/Field (same w/ the IR impls; only IR base class\nknows about Document/Field since it impls the sugar API).\n\nTests pass; I think it's ready to commit! ",
            "author": "Michael McCandless",
            "id": "comment-13064961"
        },
        {
            "date": "2011-07-14T04:39:27+0000",
            "content": "Hey Mike,\n\nWow you're fast! I love the ideas in this.  Just a few things:\n\n\n\tApplied your patch and theres something not quite right.  It doesn't contain FieldSelectorVisitor and FieldSelector hasn't been moved to contrib/misc (in fact, there are imports of document.FieldSelector when its actually in document2.FieldSelector).\n\tCan we rename FieldVisitor to StoredFieldVisitor? FieldVisitor sounds really general and like it visits all fields, not just stored ones.\n\tWhat do you think about popping FieldVisitor and the standard impl out of IndexReader? I'm envisaging situations where people may want to extend the standard impl in some way.\n\tI saw a few javadoc errors floating round but they may just be intellij lying to me.\n\n ",
            "author": "Chris Male",
            "id": "comment-13065046"
        },
        {
            "date": "2011-07-14T09:59:03+0000",
            "content": "Thanks Chris \u2013 great feedback!  I agree with all your suggestions...\n\nNew patch:\n\n\n\tRemoved oal.documen2.FieldSelector*\n\n\n\n\n\tRenamed & moved to standalone StoredFieldVisitor.java\n\n\n\n\n\tMade the default/sugar visitor first class, as\n    DocumentStoredFieldVisitor.java, also allowing it to optionally\n    accept Set<String> fieldsToLoad.\n\n\n\n\n\tFix javadoc errors I think I caused, but we [separately] have\n    pre-existing javadoc errors that need fixing (Nikola: can you\n    address these?  Thanks!).\n\n\n\nSorry, my changes have some svn mvs, and my last patch was from \"svn\ndiff\".  New patch should be fully applyable... (to field type\nbranch). ",
            "author": "Michael McCandless",
            "id": "comment-13065154"
        },
        {
            "date": "2011-07-14T10:14:29+0000",
            "content": "Super, +1 to committing. ",
            "author": "Chris Male",
            "id": "comment-13065165"
        },
        {
            "date": "2011-07-14T11:21:02+0000",
            "content": "ah man I am to late \n\nI only looked at the StoredFieldVisitor briefly, what I always missed is a String... fieldsToLoad ctor for convenience which simply passes an array that is used to create a set. in several environments this would be helpful for example when you get the fields to load from a request or something like that.\n\nI also don't understand why the set is null in the default ctors, can't we use the empty set here. If we want to prevent the method call if no fields should be loaded there should be a LoadNoFieldsVisitor I think, no? ",
            "author": "Simon Willnauer",
            "id": "comment-13065188"
        },
        {
            "date": "2011-07-14T12:47:55+0000",
            "content": "ah man I am to late \n\nNo you're not!  It's just software   The iterations go on and on and on...\n\nI only looked at the StoredFieldVisitor briefly, what I always missed is a String... fieldsToLoad ctor for convenience which simply passes an array that is used to create a set\n\nYou mean DocumentStoredFieldVisitor, right?  Ie the default/sugar visitor that makes a Document.  I agree we should add a sugar ctor taking String... I'll do that.\n\nI also don't understand why the set is null in the default ctors, can't we use the empty set here.\n\nHmm but the default ctor means all fields are accepted (empty set would mean none).\n\nIf we want to prevent the method call if no fields should be loaded there should be a LoadNoFieldsVisitor I think, no?\n\nWait, shouldn't the app just not call IR.document() if it wants no fields? ",
            "author": "Michael McCandless",
            "id": "comment-13065223"
        },
        {
            "date": "2011-07-14T14:23:48+0000",
            "content": "Wait, shouldn't the app just not call IR.document() if it wants no fields?\nnevermind I was confused about the null set.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13065289"
        }
    ]
}