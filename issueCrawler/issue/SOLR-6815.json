{
    "id": "SOLR-6815",
    "title": "Issue with Collections in field value while indexing a document.",
    "details": {
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.9",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Issue with SolrInputDocument.addField() method.\n\nIf this method is called for the first time for a field, it will call setField method, which calls SolrInputField.setValue.\nAssume that the value is a Collection in this flow. The value's reference is added to the field in the doc. If we add another value to the same field (using addField), it will be added to the original collection.\n\nThis is incorrect because we are modifying user's original collection.\n\nThis will break in the following cases:\n1. If the original collection is unmodifiable. This will throw UnsupportedOperationException while adding 2nd value.\n2. If the user wants to add the same value (Collection) to different fields, those fields may get corrupted. Adding more values to one fields will add them to other fields as well. (This is how I found the issue).\n\nOne solution:\nIn SolrInputField.setValue we can always create a new Collection (ArrayList) if the incoming value is a Collection.",
    "attachments": {
        "SolrIndexingTest.java": "https://issues.apache.org/jira/secure/attachment/12684945/SolrIndexingTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-03T18:56:56+0000",
            "author": "Kiran Kumar Dontam",
            "content": "Attached a simple testcase to reproduce the issue. ",
            "id": "comment-14233343"
        },
        {
            "date": "2015-02-28T08:57:08+0000",
            "author": "Vamsee Yarlagadda",
            "content": "2. If the user wants to add the same value (Collection) to different fields, those fields may get corrupted. Adding more values to one fields will add them to other fields as well. (This is how I found the issue).\nI agree. This is certainly a problem. I don't understand why this case was not included in the first place. \n\nhttps://github.com/apache/lucene-solr/blob/trunk/solr/solrj/src/java/org/apache/solr/common/SolrInputField.java#L60\nThis issue can be solved by creating a copy of the collection in setValue method. In fact, we can move this section from addValue() itself.\nLet me know if this makes sense. I can help putting up a patch.\n\n ",
            "id": "comment-14341428"
        },
        {
            "date": "2015-02-28T09:46:38+0000",
            "author": "Vamsee Yarlagadda",
            "content": "Well thinking about this case more, it looks like may be it is intentional to have setValue() simply take the object passed without making a copy of it (as an optimization instead of redoing all the work to create a copy) and at the same time we have addValue() which basically follows the typical way of creates a copy. Thoughts? ",
            "id": "comment-14341445"
        },
        {
            "date": "2015-02-28T13:24:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "it looks like may be it is intentional to have setValue() simply take the object passed without making a copy of it (as an optimization instead of redoing all the work to create a copy)\n\nYes, this is to avoid copying objects. We should add some javadocs to warn users not to not re-use the collection passed in to this method. ",
            "id": "comment-14341520"
        }
    ]
}