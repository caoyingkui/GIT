{
    "id": "LUCENE-7275",
    "title": "Consider removing LUCENE JIRA versions 5.x and 6.x and fixing issues to refer to the correct version",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Task"
    },
    "description": "The LUCENE JIRA project (but not the SOLR one) has versions 6.x and 5.x - there are 38 issues with these as fixVersion-s: https://issues.apache.org/jira/issues/?jql=project+in+(LUCENE,SOLR)+AND+(fixVersion=6.x+OR+fixVersion=5.x).\n\nShould we even have 6.x and 5.x versions at all?\n\nIf we get rid of them, all affected issues (which may be a larger number than those retrieved with the above query, since these versions could also have been used in JIRA's \"Affects Version/s\" field) will need to be relabeled with the appropriate version.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15274314",
            "author": "Steve Rowe",
            "date": "2016-05-06T16:33:54+0000",
            "content": "LUCENE-7271 covers similar ground for master->6.0 "
        },
        {
            "id": "comment-15274412",
            "author": "Hoss Man",
            "date": "2016-05-06T17:33:58+0000",
            "content": "Should we even have 6.x and 5.x versions at all?\n\nPhilosophically: Either we should only have 6.x and no \"6.1\" (and then \"6.x\" gets renamed to \"6.1\" on release) or we should only have 6.1 (since we know that is what the next version released from the 6x branch will be called).\n\n(Either way we definitely shouldn't have a \"5.x\" version at this point)\n\n6.1 seems like the better choice given that: it's really the only sane option for what will be released off of branch_6x, it fits peoples mental models better, and for \"things that are going to be released relatively soon\" it probably makes more sense to end users looking at issues (as opposed to just labeling it \"6.x\" and a user of 6.0 might wonder \"is that in my release then? my release is a 6.x release)\n\nI think \"master\" is a special case in that, until we actually fork of a development branch (\"branch_7x\") there's a lot more uncertainty to that branch \u2013 as we saw with the creation of branch_5x.  \n\n(But i do think a name like master (7.0) \u2013 as in \"committed to master, which will probably be 7.0\" is a better choice and a better reminder to all devs in the future to rename it once a branch_7x does get created, so we don't have another cluster fuck like LUCENE-7271, which is why it's the name i'm planning to use when i add back \"master\" in that issue ... but i digress)\n\nIf we get rid of them, all affected issues (which may be a larger number than those retrieved with the above query, since these versions could also have been used in JIRA's \"Affects Version/s\" field) will need to be relabeled with the appropriate version.\n\nI think getting rid of them (5.x and 6.x) is probably the right call - any information value to be had from issues that list them as \"affects versions\" is probably non existent, and there's not going to be any clear cut and obvious \"easy win\" in merging those versions into any other concrete versions  \u2013 we just need to run a report on that query first, and then have the handful of devs assigned to those ~40 issues to take a few minutes to review the list  and make sure the accurate fixVersion(s) is recorded. "
        },
        {
            "id": "comment-15274460",
            "author": "Steve Rowe",
            "date": "2016-05-06T17:56:11+0000",
            "content": "Only 5 issues with afftectedVersion of 5.x or 6.x: https://issues.apache.org/jira/issues/?jql=project+in+(LUCENE,SOLR)+AND+affectedVersion+in+(6.x,5.x) "
        }
    ]
}