{
    "id": "SOLR-8819",
    "title": "Implement DatabaseMetaDataImpl getTables() and fix getSchemas()",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "DbVisualizer NPE when clicking on DB References tab. After connecting, NPE if double click on \"DB\" under connection name then click on References tab.",
    "attachments": {
        "SOLR-8819.patch": "https://issues.apache.org/jira/secure/attachment/12792597/SOLR-8819.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-10T22:41:44+0000",
            "author": "Trey Cahill",
            "content": "Added a patch that fixes the NPE caused by clicking on the DB References tab by implementing the getTables() method in DatabaseMetaDataImpl.  Removed restriction of requiring the field \"TABLE_CAT\" when querying CATALOGS by wrapping CatalogsStream in SelectStream.  Removed restriction of requiring the both the fields \"TABLE_SCHEM\" and \"TABLE_CATALOG\" when querying SCHEMAS by wrapping SchemasStream in SelectStream.  Added tests as needed. ",
            "id": "comment-15190101"
        },
        {
            "date": "2016-03-11T14:27:01+0000",
            "author": "Kevin Risden",
            "content": "Since DatabaseMetaDataImpl.getTables isn't fully implemented, it looks like it causes the following errors in DbVisualizer when clicking on the table looking icon under the table name. We should probably implement all of the return columns for DatabaseMetaDataImpl.getTables instead of just the two currently in the patch.\n\n\n2016-03-11 08:24:34.821 FINE   870 [pool-3-thread-2 - E.\uffc4\uff81] RootConnection: DatabaseMetaDataImpl.getTables(\"localhost:9983\", \"test\", \"%\", null)\n2016-03-11 08:24:34.843 FINE   870 [ExecutorRunner-pool-2-thread-1 - E.\uffc4\uff82] getting column 1 (java.lang.String) 'TABLE_SCHEM' using getString()\n2016-03-11 08:24:34.843 FINE   870 [ExecutorRunner-pool-2-thread-1 - E.\uffc4\uff82] getting column 2 (java.lang.String) 'TABLE_CATALOG' using getString()\n2016-03-11 08:24:34.844 FINE   870 [ExecutorRunner-pool-2-thread-1 - Z.processResultSet] Fetched Rows: 1 Columns: 2 Exec: 0.022 Fetch: 0.000 sec\n2016-03-11 08:24:34.847 WARN   870 [ExecutorRunner-pool-2-thread-1 - C.getValueAt] IndexOutOfBoundsException: row=0 column=2 rowCount=1 columnCount=2\njava.lang.IndexOutOfBoundsException: Index: 2, Size: 2\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\n\tat java.util.ArrayList.get(ArrayList.java:429)\n\tat com.onseven.dbvis.K.A.C.getValueAt(Z:2606)\n\tat com.onseven.dbvis.K.B.B.\uffc6\uff88(Z:61)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2413)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:240)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2852)\n\tat com.onseven.dbvis.n.I.K.execute(Z:659)\n\tat com.onseven.dbvis.K.B.Z.\uffc4\uff81(Z:2285)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff82(Z:1374)\n\tat com.onseven.dbvis.K.B.L.doInBackground(Z:1521)\n\tat javax.swing.SwingWorker$1.call(SwingWorker.java:295)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat javax.swing.SwingWorker.run(SwingWorker.java:334)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n2016-03-11 08:24:34.850 WARN   870 [ExecutorRunner-pool-2-thread-1 - C.getValueAt] IndexOutOfBoundsException: row=0 column=3 rowCount=1 columnCount=2\njava.lang.IndexOutOfBoundsException: Index: 3, Size: 2\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\n\tat java.util.ArrayList.get(ArrayList.java:429)\n\tat com.onseven.dbvis.K.A.C.getValueAt(Z:2606)\n\tat com.onseven.dbvis.K.B.B.\uffc6\uff88(Z:61)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2413)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:240)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2852)\n\tat com.onseven.dbvis.n.I.K.execute(Z:659)\n\tat com.onseven.dbvis.K.B.Z.\uffc4\uff81(Z:2285)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff82(Z:1374)\n\tat com.onseven.dbvis.K.B.L.doInBackground(Z:1521)\n\tat javax.swing.SwingWorker$1.call(SwingWorker.java:295)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat javax.swing.SwingWorker.run(SwingWorker.java:334)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n2016-03-11 08:24:34.853 WARN   870 [ExecutorRunner-pool-2-thread-1 - C.getValueAt] IndexOutOfBoundsException: row=0 column=4 rowCount=1 columnCount=2\njava.lang.IndexOutOfBoundsException: Index: 4, Size: 2\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\n\tat java.util.ArrayList.get(ArrayList.java:429)\n\tat com.onseven.dbvis.K.A.C.getValueAt(Z:2606)\n\tat com.onseven.dbvis.K.B.B.\uffc6\uff88(Z:61)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2413)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:240)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2852)\n\tat com.onseven.dbvis.n.I.K.execute(Z:659)\n\tat com.onseven.dbvis.K.B.Z.\uffc4\uff81(Z:2285)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff82(Z:1374)\n\tat com.onseven.dbvis.K.B.L.doInBackground(Z:1521)\n\tat javax.swing.SwingWorker$1.call(SwingWorker.java:295)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat javax.swing.SwingWorker.run(SwingWorker.java:334)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n2016-03-11 08:24:34.855 WARN   870 [ExecutorRunner-pool-2-thread-1 - C.getValueAt] IndexOutOfBoundsException: row=0 column=3 rowCount=1 columnCount=3\njava.lang.IndexOutOfBoundsException: Index: 3, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\n\tat java.util.ArrayList.get(ArrayList.java:429)\n\tat com.onseven.dbvis.K.A.C.getValueAt(Z:2606)\n\tat com.jidesoft.grid.TableModelWrapperImpl.getValueAt(Unknown Source)\n\tat com.jidesoft.grid.DefaultTableModelWrapper.getValueAt(Unknown Source)\n\tat com.onseven.dbvis.K.B._.\uffc4\uff81(Z:292)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:679)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:240)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2852)\n\tat com.onseven.dbvis.n.I.K.execute(Z:659)\n\tat com.onseven.dbvis.K.B.Z.\uffc4\uff81(Z:2285)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff82(Z:1374)\n\tat com.onseven.dbvis.K.B.L.doInBackground(Z:1521)\n\tat javax.swing.SwingWorker$1.call(SwingWorker.java:295)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat javax.swing.SwingWorker.run(SwingWorker.java:334)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n2016-03-11 08:24:34.856 WARN   870 [ExecutorRunner-pool-2-thread-1 - C.getValueAt] IndexOutOfBoundsException: row=0 column=4 rowCount=1 columnCount=3\njava.lang.IndexOutOfBoundsException: Index: 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\n\tat java.util.ArrayList.get(ArrayList.java:429)\n\tat com.onseven.dbvis.K.A.C.getValueAt(Z:2606)\n\tat com.jidesoft.grid.TableModelWrapperImpl.getValueAt(Unknown Source)\n\tat com.jidesoft.grid.DefaultTableModelWrapper.getValueAt(Unknown Source)\n\tat com.onseven.dbvis.K.B._.\uffc4\uff81(Z:292)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:679)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:240)\n\tat com.onseven.dbvis.n.I.K.\uffc4\uff81(Z:2852)\n\tat com.onseven.dbvis.n.I.K.execute(Z:659)\n\tat com.onseven.dbvis.K.B.Z.\uffc4\uff81(Z:2285)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff82(Z:1374)\n\tat com.onseven.dbvis.K.B.L.doInBackground(Z:1521)\n\tat javax.swing.SwingWorker$1.call(SwingWorker.java:295)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat javax.swing.SwingWorker.run(SwingWorker.java:334)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-15190990"
        },
        {
            "date": "2016-03-11T16:15:56+0000",
            "author": "Kevin Risden",
            "content": "Improves on Trey Cahill's patch. His patch and subsequent manual testing with DbVisualizer uncovered an issue with getSchemas. We shouldn't be returning any schema information since we don't have the concept of schemas. getTables is really what we want and this is now implemented in a TablesStream.\n\nThis is a change to what is returned is returned by the JDBC driver. This should be put into Solr 6 before the release so we don't have to deal with backwards compatibility issues. ",
            "id": "comment-15191105"
        },
        {
            "date": "2016-03-14T17:49:50+0000",
            "author": "Kevin Risden",
            "content": "Fix usage of get/set Schema in ConnectionImpl. ",
            "id": "comment-15193741"
        },
        {
            "date": "2016-03-14T17:52:38+0000",
            "author": "Kevin Risden",
            "content": "Add test file that was missed on previous patch. ",
            "id": "comment-15193747"
        },
        {
            "date": "2016-03-15T17:04:03+0000",
            "author": "Trey Cahill",
            "content": "Added the ability for Collection Aliases to be considered their own databases and added tests as needed. ",
            "id": "comment-15195676"
        },
        {
            "date": "2016-03-16T13:23:43+0000",
            "author": "Trey Cahill",
            "content": "Was seeing NPE's at times when using DBVisualizer made calls to getTables().  Was able to trace the issue back to a null ZKStateReader in the cloudSolrClient.  Calling cloudSolrClient.connect() prevents this from happening. ",
            "id": "comment-15197303"
        },
        {
            "date": "2016-03-16T13:41:12+0000",
            "author": "Joel Bernstein",
            "content": "Just read the patch but haven't applied it yet. I think it looks pretty good I'll try to make some time to apply it today and test it out.\n\nWe should probably hold off on collection alias support because the streaming API doesn't yet support aliases. So I don't believe SolrCloud aliases are queryable in the SQLHandler.\n\nOne other very small thing is the TablesStream might make more sense as the TableStream, where each Tuple returns a single Table. ",
            "id": "comment-15197326"
        },
        {
            "date": "2016-03-17T19:41:27+0000",
            "author": "Trey Cahill",
            "content": "Joel Bernstein I removed alias support and renamed TablesStreams to TableStream.  Also updated the get on cloudSolrClient.getZKStateReader() to only get once instead of twice. ",
            "id": "comment-15200226"
        },
        {
            "date": "2016-03-17T20:42:08+0000",
            "author": "Joel Bernstein",
            "content": "Ok things are looking pretty good to me. ",
            "id": "comment-15200334"
        },
        {
            "date": "2016-03-23T20:49:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dbee6591741ab5aecf3a75326a9db126aa8cd0c4 in lucene-solr's branch refs/heads/master from Kevin Risden\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dbee659 ]\n\nSOLR-8819: Implement DatabaseMetaDataImpl getTables() and fix getSchemas(). (Trey Cahill, Joel Bernstein, Kevin Risden) ",
            "id": "comment-15209141"
        },
        {
            "date": "2016-03-23T20:54:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 39270d9df8959067a18edfe7c1e3cdb24adce543 in lucene-solr's branch refs/heads/branch_6x from Kevin Risden\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=39270d9 ]\n\nSOLR-8819: Implement DatabaseMetaDataImpl getTables() and fix getSchemas(). (Trey Cahill, Joel Bernstein, Kevin Risden) ",
            "id": "comment-15209150"
        },
        {
            "date": "2016-03-23T20:55:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 658b2a4a925ed694a2c11add8c1bb81de1525294 in lucene-solr's branch refs/heads/branch_6_0 from Kevin Risden\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=658b2a4 ]\n\nSOLR-8819: Implement DatabaseMetaDataImpl getTables() and fix getSchemas(). (Trey Cahill, Joel Bernstein, Kevin Risden) ",
            "id": "comment-15209152"
        }
    ]
}