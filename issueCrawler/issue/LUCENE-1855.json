{
    "id": "LUCENE-1855",
    "title": "Change AttributeSource API to use generics",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The AttributeSource API will be easier to use with JDK 1.5 generics.\n\nUwe, if you started working on a patch for this already feel free to assign this to you.",
    "attachments": {
        "LUCENE-1855.patch": "https://issues.apache.org/jira/secure/attachment/12418091/LUCENE-1855.patch",
        "LUCENE-1855_contrib.patch": "https://issues.apache.org/jira/secure/attachment/12420976/LUCENE-1855_contrib.patch",
        "LUCENE-1855_contrib_queryparser.patch": "https://issues.apache.org/jira/secure/attachment/12420985/LUCENE-1855_contrib_queryparser.patch",
        "AttributeSource.jad": "https://issues.apache.org/jira/secure/attachment/12418140/AttributeSource.jad",
        "LUCENE-1855_precedence_queryparser.patch": "https://issues.apache.org/jira/secure/attachment/12420987/LUCENE-1855_precedence_queryparser.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-25T23:16:21+0000",
            "content": "OK, will do. Most work is removing the casts from all TokenStream ctors \nCurrently I just tried out with two classes. ",
            "author": "Uwe Schindler",
            "id": "comment-12747705"
        },
        {
            "date": "2009-08-30T15:23:51+0000",
            "content": "Here is the patch that implements generics for the Attributes API. The test shows, how simple now usage of addAttribute() and so on is (no casts needed anymore).\n\nThe code compiles without any unchecked warnings. To test this, I enabled the warnings about unchecked operations globally (emitting about 350 warnings on whole lucene). Two places inside private code needs to add @SuppressWarnings, because the compiler does not know if one AttributeImpl really implements the questioned interface. ",
            "author": "Uwe Schindler",
            "id": "comment-12749274"
        },
        {
            "date": "2009-08-30T17:42:09+0000",
            "content": "As I already started to move Lucene to Java 1.5, here an idea, how to get the generics in:\n\nI would propose to switch on all \"unchecked\" warnings (as in the supplied patch) by the <compilerarg/> in ant. The problem is then, that there are hundreds of warnings printed out. I would like to then add a @SuppressWarnings(\"unchecked\") to all classes, that are not yet rewritten to generics for collections and other generified java things (like Class<?> in AttributeSource). The warnings should then disappear. We could then start to search for SuppressWarnings annotations in the source and start the classes one-by-one and add generics. By this it is simplier, because you only get warnings for the class you are working on.\n\nWhat do you think? ",
            "author": "Uwe Schindler",
            "id": "comment-12749292"
        },
        {
            "date": "2009-08-30T17:48:15+0000",
            "content": "About the backwards compatibility: After adding generics, the backwards test should run all tests from 2.9 (compiled with 1.4) against the generified trunk jar. After branching I would start to manage this.\n\nNormally generics do not bring backwards incompatibility, because they are simple removed. You only have probloems at places, where the the erased generics should not be replaced by java.lang.Object. Eg in the AttributeSource.addAttribute() call, it should return a Attribute (subclass) as in 2.9 and not Object (because of this you need to generify the whole method by the generics prefix, defining \"A\" as subclass of \"Attribute\"). If you use an naive approach to add generics, it could lead to addAttribute returns Object (and so a link error would occur). To prevent this, the backwards tests against 2.9 are a good solution.\n\nBy the way, the generics for AttributeSource were copied from j.l.Class and its methods to get annotations  ",
            "author": "Uwe Schindler",
            "id": "comment-12749294"
        },
        {
            "date": "2009-08-30T18:35:46+0000",
            "content": "By the way, the generics for AttributeSource were copied from j.l.Class and its methods to get annotations \n\nFrom the apache harmony project I hope  ",
            "author": "Mark Miller",
            "id": "comment-12749302"
        },
        {
            "date": "2009-08-30T19:03:29+0000",
            "content": "\nFrom the apache harmony project I hope \n\nNo worries... the original patch (LUCENE-1422) had the 1.5 version attached as comments all the time and wasn't copied from anywhere. I originally designed the API with 1.5 generics and ported it back to 1.4 to be able to commit it.\n\nWe just removed those comments with some patch from trunk (probably LUCENE-1693) and Uwe brought it back now. ",
            "author": "Michael Busch",
            "id": "comment-12749305"
        },
        {
            "date": "2009-08-30T19:07:31+0000",
            "content": "From the apache harmony project I hope \n\nNo problem at all, it was more only this public API line that inspired me... I did not copy any code, only the public API:\n\n\npublic <A extends Annotation> A getAnnotation(Class<A> annotationClass)\n\n\n\nfrom http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Class.html#getAnnotation(java.lang.Class).\n\nMichael: This was not in the comments (at least not in the comments from the latest Lucene code before our rewrite). ",
            "author": "Uwe Schindler",
            "id": "comment-12749306"
        },
        {
            "date": "2009-08-30T19:09:58+0000",
            "content": "no worries here either guys - far from the copyright police here - just a wink comment.  ",
            "author": "Mark Miller",
            "id": "comment-12749307"
        },
        {
            "date": "2009-08-30T19:52:14+0000",
            "content": "\nMichael: This was not in the comments (at least not in the comments from the latest Lucene code before our rewrite).\n\nIt was. The LUCENE-1693 commit removed it. And my first 1693 patch left it in, so either me or you removed it in the subsequent 1693 patches.\nIt's not really important I guess  As you and Mark said: it's just public API stuff that we could have gotten from the javadocs anyway. ",
            "author": "Michael Busch",
            "id": "comment-12749312"
        },
        {
            "date": "2009-08-30T20:46:44+0000",
            "content": "It was.\n\nOK. I found it  - in the first version after checkin.\n\nAttached is a new patch, now also making TokenStream generics activated. The next step is to convert all Tokenizers (as always...). Michael: Is this patch, how you want to have it? ",
            "author": "Uwe Schindler",
            "id": "comment-12749327"
        },
        {
            "date": "2009-08-30T21:01:04+0000",
            "content": "Uwe, I'm not home right now, will look tonight! Thanks for writing the patch! ",
            "author": "Michael Busch",
            "id": "comment-12749328"
        },
        {
            "date": "2009-08-31T12:40:56+0000",
            "content": "For all developers that want to see, that the generics-enabled class AttributeSource is binary compatible (so addAttribute still return Attribute in the erasured class) to the 2.9 version, here is the de-compiled version of the class file (using JAD). This is not really full featured java code, but shows, how the erasured class looks like (and how javac generates the advanced FOR statements) and the covariant overriding of iterator's next(). Really interesting.\n\nJAD is always good, to look, how a class with generic looks like for code compiled agains 1.4. ",
            "author": "Uwe Schindler",
            "id": "comment-12749479"
        },
        {
            "date": "2009-09-01T00:31:25+0000",
            "content": "Patch looks great, Uwe!  ",
            "author": "Michael Busch",
            "id": "comment-12749706"
        },
        {
            "date": "2009-09-30T12:31:04+0000",
            "content": "As we are now on Java 1.5, I would like to go forward with this issue as the first real patch using generics.\n\nDuring development of generics, it is really important that you see all unchecked warnings, so this patch also adds <compilerarg line=\"-Xlint:unchecked\"/> to the javac task. The problem is now, that all non-generics classes in Lucene generate tons of warnings. I would like to proceed like the following:\n\n\tOpen a new issue that adds this compilerarg.\n\tAdd a @SuppressWarnings(\"unchecked\") in front of each class, that (currently) produces warnings (should not be so many, hopefully).\n\n\n\nAfter that the compilation should run without warnings about unchecked casts and so on. When starting to add generics to some of the classes, the developer would remove the SuppressWarnings for the class he works on and start fixing the warnngs and adding generics.\n\nWhat do you think? Without that, it is hard to add the generics 100% safe and consistent without be lost in tons of warnings and so on.\n\nI will also update this patch to also remove the now unneeded casts in all addAttribute calls in Lucene (low priority). ",
            "author": "Uwe Schindler",
            "id": "comment-12760897"
        },
        {
            "date": "2009-09-30T16:13:46+0000",
            "content": "Here the master patch prepared in the train from Berlin to Bremen. It converts everything TokenStream related to generics.\n\nTo be sure, that non-generics 2.9 tests are binary compatible, I will first create a new backwards branch and modify build.xml to compile the backwards test withs -source and -target 1.4\n\nI will commit soon and go forward with NumericRange generification. The question about the SuppressWarnings-TODO is still open!\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-12760945"
        },
        {
            "date": "2009-09-30T16:49:44+0000",
            "content": "Sorry, last patch had an error in hasReusableNext backwards layer initialization. ",
            "author": "Uwe Schindler",
            "id": "comment-12760953"
        },
        {
            "date": "2009-09-30T21:31:51+0000",
            "content": "Some Javadoc additions, also change QueryParser.jj file.\n\nContrib and contrib queryparser was not converted. The new Queryparser would also get cleaner without the unneeded casts.\n\nI will commit this tomorrow, when JIRA hopefully works better.\n\nRobert Muir: Do you have time to remove the casts from contrib?\nLuis Alves: You can also update the new Queryparser to not cas the return of getAttribute/addAttribute ",
            "author": "Uwe Schindler",
            "id": "comment-12761012"
        },
        {
            "date": "2009-10-01T02:30:40+0000",
            "content": "patch for contrib (except for the new queryparser) ",
            "author": "Robert Muir",
            "id": "comment-12761080"
        },
        {
            "date": "2009-10-01T06:19:01+0000",
            "content": "Here is the patch for contrib/queryparser ",
            "author": "Adriano Crestani",
            "id": "comment-12761105"
        },
        {
            "date": "2009-10-01T06:22:24+0000",
            "content": "A small update to my core patch, it now needs no @SuppressWarnings anymore in addAttribute/getAttribute impl\n\nI will commit soon.\n\nThanks Robert for the contrib patch. I will do the new QueryParser later. The PrecedenceParser must be fixed or removed, when the old TokenStream API gets removed. ",
            "author": "Uwe Schindler",
            "id": "comment-12761107"
        },
        {
            "date": "2009-10-01T06:23:54+0000",
            "content": "Oh thanks Adriano, I haven't seen your patch! I will add it!\n\nThank you very much! ",
            "author": "Uwe Schindler",
            "id": "comment-12761108"
        },
        {
            "date": "2009-10-01T07:17:41+0000",
            "content": "This patch updates the PQP to use the new TokenStream API...all tests still pass.\n\nI hope this helps to keep the PQP  ",
            "author": "Adriano Crestani",
            "id": "comment-12761115"
        },
        {
            "date": "2009-10-01T07:43:17+0000",
            "content": "Thanks Adriano, I will open another issue about that, as it has not really something to do with this issue! ",
            "author": "Uwe Schindler",
            "id": "comment-12761119"
        },
        {
            "date": "2009-10-01T07:58:04+0000",
            "content": "Added CHANGES.txt and committed revision: 820553 ",
            "author": "Uwe Schindler",
            "id": "comment-12761125"
        }
    ]
}