{
    "id": "SOLR-9202",
    "title": "UninvertingReader needs multi-valued points support",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "It now supports the single valued case (deprecating the legacy encoding), but the multi-valued stuff does not yet have a replacement.\n\nideally we add a FC.getSortedNumeric(Parser..) that works from points. Unlike postings, points never lose frequency within a field, so its the best fit. \n\nwhen getDocCount() == size(), the field is single-valued, so this should call getNumeric and box that in SortedNumeric, similar to the String case.",
    "attachments": {
        "LUCENE-7096.patch": "https://issues.apache.org/jira/secure/attachment/12796063/LUCENE-7096.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15217864",
            "author": "Robert Muir",
            "date": "2016-03-30T12:07:57+0000",
            "content": "Here is a patch simply deprecating this stuff.\n\nWe don't need to tell someone to reindex with points, only to then uninvert with some other API. They can just add docvalues, too.\n\nMaybe we should revert the single-valued points support as well? "
        },
        {
            "id": "comment-15217954",
            "author": "Michael McCandless",
            "date": "2016-03-30T13:21:49+0000",
            "content": "Here is a patch simply deprecating this stuff.\n\n+1\n\nMaybe we should revert the single-valued points support as well?\n\n+1 "
        },
        {
            "id": "comment-15218778",
            "author": "Ishan Chattopadhyaya",
            "date": "2016-03-30T20:23:51+0000",
            "content": "Maybe we should revert the single-valued points support as well?\nRobert Muir & Michael McCandless, do you have some thoughts, please, on how we could leverage points fields in Solr if single valued and multi valued support is not available through UninvertingReader? (fyi, SOLR-8396) "
        },
        {
            "id": "comment-15218797",
            "author": "Uwe Schindler",
            "date": "2016-03-30T20:32:41+0000",
            "content": "Users must enable DocValues for facetting or sorting. As point values are a new field type in Solr, you can document that those fields must have DocValues to support facetting and sorting. "
        },
        {
            "id": "comment-15219063",
            "author": "Robert Muir",
            "date": "2016-03-30T23:34:27+0000",
            "content": "exactly. I looked at this and I think its too trappy especially with multiple values, you gotta either use offlinesorter or a lot of RAM.\n\nThe issue is really unnecessary: if you are reindexing to change over to points, then you can add docvalues too while you are there, if you want to facet/sort.  "
        },
        {
            "id": "comment-15219098",
            "author": "Robert Muir",
            "date": "2016-03-31T00:10:46+0000",
            "content": "Ishan, I don't think it really impacts solr honestly. The thing about points is that they can do a lot more than old numerics. Not only do you expand to 128 bits per value, but you can have up to 8 dimensions.\n\nSo really you have to decide what makes sense based on what you are trying to do. If you just want to cover single-dimensional primitive types, SortedNumeric is an obvious choice (it will not \"lose\" frequency in a doc, which points does not \"lose\" either). If its a float or double, vs an int or a long, you may want to handle it a little differently, e.g. use NumericUtils.sortableDoubleBits so that \"sortedness\" within a document has true meaning. This can make sort comparators based on min/max/median work in constant time. But if you go that way, I think e.g. faceting/grouping/etc code in solr would need to be modified to support that.\n\nOn the other hand, for InetAddressPoint (128-bit ipv6), SortedSet is a much better choice. Prefix compression basically maps to \"compress by network\" and is not just important for ipv6, but also important for mapped ipv4 data or mixed ipv4/ipv6 data (Points/BKD tree has this compression too). Otherwise its really using 128-bits storage per value. Sure, you pay a cost for ordinals, but ordinals are only 32-bit and will speed up both sorting and faceting (to me: a variant of range faceting like \"facet-by-network\" would be the obvious use case there, so ordinals work for that too).\n\nWith multidimensional data there is no clear answer. Currently LatLonPoint uses 2 dimensions of 32-bits each for searching, and shoves them into a single 64-bit SortedNumeric for sorting and two-phase iteration support. This works well because e.g. the typical hotspot in its sort comparator only works on the integer value most of the time anyway, and two-phase support is only needed for edge cases. \n\nFor Geo3DPoint, who knows? I don't yet have a good understanding of how expensive its single-doc verification methods are (i think distance is cheaper than 2D, but polygon? dunno), how rare they are, or what would be the best way to represent them yet. Maybe its still better to store it in 2D (SortedNumeric), reuse that one's same sort comparator if the distance metrics are compatible  If two-phase support is not needed this may work. If its only needed in very rare cases we could even convert 2D->3D on the fly or optimize it so that conversion is very rare. But maybe this is too complex and a binary encoding would be better. \n\nSo I'm hesitant to add new types to UninvertingReader for this reason, especially when values are larger and so on. If you really think its the right way to go anyway, feel free to pick up my branch (https://github.com/rmuir/lucene-solr/tree/fc2) but it only contains API changes, no actual uninverting. I'm not really against it for primitive 1D numeric types, I'd just rather work on other things, and I feel like its not the best direction. "
        },
        {
            "id": "comment-15322214",
            "author": "Adrien Grand",
            "date": "2016-06-09T09:18:15+0000",
            "content": "+1 to not adding multi-valued uninverting support for points and removing the existing single-valued support "
        },
        {
            "id": "comment-15322501",
            "author": "David Smiley",
            "date": "2016-06-09T13:35:04+0000",
            "content": "If I'm not mistaken; this is moot now?  Lucene effectively divested itself of UninvertingReader (marked deprecated on 6x, removed on master) and Solr has a private copy.  So perhaps this issue can be closed, and if Ishan or whoever feels they want to modify Solr's copy then that would be a separate Solr issue? "
        },
        {
            "id": "comment-15322688",
            "author": "Michael McCandless",
            "date": "2016-06-09T15:21:20+0000",
            "content": "I think we should just move this issue to a Solr issue ... maybe this patch is helpful for Solr?\n\nI'll move it. "
        }
    ]
}