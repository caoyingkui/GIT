{
    "id": "LUCENE-4083",
    "title": "RateLimited.pause() throws unchecked exception",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Cannot Reproduce",
        "status": "Closed"
    },
    "description": "The while() loop in RateLimiter.pause() invokes Thread.sleep() with potentially large values, which occasionally results in InterruptedException being thrown from Thread.sleep(). This is wrapped in an unchecked ThreadInterruptedException and re-thrown, and results in high-level errors like this:\n\n    [junit] 2012-05-29 15:50:15,464 ERROR core.SolrCore - org.apache.lucene.util.ThreadInterruptedException: java.lang.InterruptedException: sleep interrupted\n    [junit] \tat org.apache.lucene.store.RateLimiter.pause(RateLimiter.java:82)\n    [junit] \tat org.apache.lucene.store.MockIndexOutputWrapper.writeBytes(MockIndexOutputWrapper.java:82)\n    [junit] \tat org.apache.lucene.store.MockIndexOutputWrapper.writeByte(MockIndexOutputWrapper.java:73)\n    [junit] \tat org.apache.lucene.store.DataOutput.writeVInt(DataOutput.java:191)\n    [junit] \tat org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.addPosition(Lucene40PostingsWriter.java:237)\n    [junit] \tat org.apache.lucene.index.FreqProxTermsWriterPerField.flush(FreqProxTermsWriterPerField.java:519)\n    [junit] \tat org.apache.lucene.index.FreqProxTermsWriter.flush(FreqProxTermsWriter.java:92)\n    [junit] \tat org.apache.lucene.index.TermsHash.flush(TermsHash.java:117)\n    [junit] \tat org.apache.lucene.index.DocInverter.flush(DocInverter.java:53)\n    [junit] \tat org.apache.lucene.index.DocFieldProcessor.flush(DocFieldProcessor.java:81)\n    [junit] \tat org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:475)\n    [junit] \tat org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:422)\n    [junit] \tat org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:553)\n    [junit] \tat org.apache.lucene.index.IndexWriter.prepareCommit(IndexWriter.java:2416)\n    [junit] \tat org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:2548)\n    [junit] \tat org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:2530)\n    [junit] \tat org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:414)\n    [junit] \tat org.apache.solr.update.processor.RunUpdateProcessor.processCommit(RunUpdateProcessorFactory.java:82)\n\n\n\nI believe this is a bug - the while() loop already ensures that the total time spent in pause() is correct even if InterruptedException-s are thrown, so they should not be re-thrown.\n\nThe patch is trivial - simply don't re-throw.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-29T16:23:45+0000",
            "content": "But, shouldn't we re-throw?  Ie, you interrupt so that the thread stops sleeping and throws an exception?\n\nSomething somewhere higher up must catch the ThreadInterruptedException I think? ",
            "author": "Michael McCandless",
            "id": "comment-13284911"
        },
        {
            "date": "2012-05-29T17:53:01+0000",
            "content": "Thread.sleep() with potentially large values, which occasionally results in InterruptedException being thrown from Thread.sleep()\n\nThere are no \"spurious interrupts\" from sleep... something has interrupted that thread so just not re-throwing is probably not a good idea? ",
            "author": "Dawid Weiss",
            "id": "comment-13284967"
        },
        {
            "date": "2012-05-30T10:01:08+0000",
            "content": "Hmm, right ... something interrupted here, so it shouldn't be ignored. Still, I think this exception should have been caught somewhere higher and dealt with e.g. at the level of IndexWriter or in Solr. Reporting this to user doesn't seem friendly or useful. Since it results in a failed commit, why not catch it and say so (and re-throw as a checked exception). ",
            "author": "Andrzej Bialecki",
            "id": "comment-13285538"
        },
        {
            "date": "2012-05-30T10:18:53+0000",
            "content": "Andrzej can you include the full stack trace? Did this happen when testing (I guess)?  ",
            "author": "Dawid Weiss",
            "id": "comment-13285546"
        },
        {
            "date": "2012-05-30T11:45:49+0000",
            "content": "Yes, it happened during testing, at a high CPU load. Unfortunately I ran the tests again, so the original log is not available anymore, and the problem didn't occur ... I'll add the full stack trace when this appears again. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13285599"
        },
        {
            "date": "2012-05-30T16:35:11+0000",
            "content": "Still, I think this exception should have been caught somewhere higher and dealt with e.g. at the level of IndexWriter or in Solr. \n\nI agree: I think in general whoever does the interrupting (test framework in this case?) should somehow handle the resulting thrown interrupted exc... ",
            "author": "Michael McCandless",
            "id": "comment-13285799"
        },
        {
            "date": "2012-05-30T19:15:15+0000",
            "content": "I agree: I think in general whoever does the interrupting (test framework in this case?) should somehow handle the resulting thrown interrupted exc...\n\nAs far as I remember the test framework does not report exceptions after any of the following happens:\n1) the test thread timeouts,\n2) the test thread terminates but a thread leak has been detected (this is an error on its own).\n\nI'll verify if these conditions hold. ",
            "author": "Dawid Weiss",
            "id": "comment-13285930"
        },
        {
            "date": "2012-06-01T08:18:41+0000",
            "content": "I can't reproduce this, and anyway very likely it was just a test framework trying to interrupt all leftover threads. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13287259"
        },
        {
            "date": "2012-07-03T11:13:34+0000",
            "content": "Just a comment on the belated follow-up check that I did. If the main test's thread times out, any forked threads will also be interrupted/ terminated as a consequence of this. Any exceptions that happen after the main thread is terminated will be wrapped as in here (note \"after termination attempt\").\n\njava.lang.RuntimeException: Thread threw an uncaught exception (after termination attempt), thread: Thread[spinning,5,]\n\tat com.carrotsearch.randomizedtesting.RunnerThreadGroup.processUncaught(RunnerThreadGroup.java:97)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:857)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$7(RandomizedRunner.java:804)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3$1.run(RandomizedRunner.java:671)\n\tat java.lang.Thread.run(Thread.java:662)\nCaused by: java.lang.RuntimeException: foobar\n\tat __randomizedtesting.SeedInfo.seed([54B0307E3EA5B518]:0)\n\tat com.carrotsearch.randomizedtesting.TestTestTimeoutAndRunawayThreadException$Nested$1.run(TestTestTimeoutAndRunawayThreadException.java:22)\n\n\n\nSo I don't think the above exception was a result of after-the-timeout exception, rather something else.  ",
            "author": "Dawid Weiss",
            "id": "comment-13405810"
        },
        {
            "date": "2012-07-04T19:16:56+0000",
            "content": "I think I must back off the above \u2013 I think there is a possibility in which a leaked background thread would slip through. I've simulated this behavior but I'll need a refactoring to clean this up; thread leak management has become very hairy.\n\nI'm letting this issue go away for now, I'll get back to leaked threads though (soon) and I'm sure the problem will resurface then if it really is a problem. ",
            "author": "Dawid Weiss",
            "id": "comment-13406670"
        }
    ]
}