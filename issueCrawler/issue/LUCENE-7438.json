{
    "id": "LUCENE-7438",
    "title": "UnifiedHighlighter",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.2",
        "components": [
            "modules/highlighter"
        ],
        "labels": "",
        "fix_versions": [
            "6.3"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "The UnifiedHighlighter is an evolution of the PostingsHighlighter that is able to highlight using offsets in either postings, term vectors, or from analysis (a TokenStream). Lucene\u2019s existing highlighters are mostly demarcated along offset source lines, whereas here it is unified \u2013 hence this proposed name. In this highlighter, the offset source strategy is separated from the core highlighting functionalty. The UnifiedHighlighter further improves on the PostingsHighlighter\u2019s design by supporting accurate phrase highlighting using an approach similar to the standard highlighter\u2019s WeightedSpanTermExtractor. The next major improvement is a hybrid offset source strategythat utilizes postings and \u201clight\u201d term vectors (i.e. just the terms) for highlighting multi-term queries (wildcards) without resorting to analysis. Phrase highlighting and wildcard highlighting can both be disabled if you\u2019d rather highlight a little faster albeit not as accurately reflecting the query.\nWe\u2019ve benchmarked an earlier version of this highlighter comparing it to the other highlighters and the results were exciting! It\u2019s tempting to share those results but it\u2019s definitely due for another benchmark, so we\u2019ll work on that. Performance was the main motivator for creating the UnifiedHighlighter, as the standard Highlighter (the only one meeting Bloomberg Law\u2019s accuracy requirements) wasn\u2019t fast enough, even with term vectors along with several improvements we contributed back, and even after we forked it to highlight in multiple threads.",
    "attachments": {
        "LUCENE_7438_UH_small_changes.patch": "https://issues.apache.org/jira/secure/attachment/12831226/LUCENE_7438_UH_small_changes.patch",
        "LUCENE_7438_UH_benchmark.patch": "https://issues.apache.org/jira/secure/attachment/12829323/LUCENE_7438_UH_benchmark.patch",
        "LUCENE-7438.patch": "https://issues.apache.org/jira/secure/attachment/12831208/LUCENE-7438.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15470848",
            "author": "Timothy M. Rodriguez",
            "date": "2016-09-07T14:58:23+0000",
            "content": "(dsmiley: edited formatting only)\n\nSome additional information:\n\nMissing features & possible future improvements:\nDespite the offset source flexibility and accuracy options of this highlighter, it continues to be the case that some highlighters have unique features.  The following features are in the standard Highlighter (and possibly FastVectorHighlighter) but are not in the UnifiedHighlighter (and thus not PostingsHighlighter either since UH is derived from PH):\n\n\tBeing able to disable \u201crequireFieldMatch\u201d to thus highlight a query insensitive to whatever fields are mentioned in the query.\n\tUsing boosts in the query to weight passages.\n\tRegex pased passage delineation. Though I\u2019m unsure if anyone cares given the existing BreakIterator options available.\n\n\n\nAside from addressing the feature gaps listed above, there are a couple known things that would be nice to add:\n\n\tThe phrase highlighting (implemented by PhraseHelper) could be made more accurate, and probably faster too, by using techniques in Alan Woodward's Luwak system that uses the Lucene SpanCollector API introduced in Lucene 5.3. It wasn\u2019t done this way to begin with because this highlighter was developed originally for Lucene 4.10.\n\tWildcard queries usually use TokenStreamFromTermVector, which uninverts the terms out of a Terms index.  Instead, we now think it would be better to create a bunch of PostingsEnum for each matching term. This would bring about some simplifications and efficiencies, and can lead to better passage relevancy. A bonus would be aggregating terms matching the same automata into a merged PostingsEnum that has a freq() based on the sum of the underlying matching terms.\n\n\n\nChanges from the PostingsHighlighter \n\n\tThe UH is more stateful\n\t\n\t\tHolds the IndexSearcher instead of asking most methods to pass it through.\n\t\tOptions now have simple setters, and the per-field getters return these. This means the common case of a setting being non-specific to a field doesn\u2019t require subclassing.\n\t\n\t\n\tMulti-valued field handling is improved to ensure that a passage will never span across values, plus it honors the positionIncrementGap for an analyzed offset source. See MultiValueTokenStream and SplittingBreakIterator.\n\tThe PH caches all content to be highlighted for all docs and then highlights it all.  The UH has a limit on this which led to a batching approach.  But if all fields use an Analyzer or if more than one use term vectors, then instead highlighting happens one doc at a time since the up-front content caching is not helpful.\n\tNo longer tries to re-use PostingsEnums (or TermsEnum or LeafReader) from one doc to the next. This really simplified some code; it didn\u2019t seem worth it.\n\tMultiTermHighlighting\u2019s fake PostingsEnum was made Closeable and we close it to guard against ramifications of exceptions being thrown during highlighting (e.g. a BreakIterator bug or TokenStream bug). Nasty to debug!\n\t(from standard Highlighter) TokenStreamFromTermVector: optimizations to uninvert filtered (thus sparse) Terms.\n\n\n\nNon-Core Dependencies\n\n\tMemoryIndex: For Analyzer based highlighting when phrases need to be highlighted accurately.\n\tStandard Highlighter things:\n\t\n\t\tTokenStreamFromTermVector: For most multi-term queries. The UH actually has its own derived copy that has been optimized to handle filtered (thus sparse) Terms. With further work, we could switch to a different approach and remove it (as indicated earlier).  For as long as it stays, it\u2019s also possible to replace the existing one with this if we want to do that.\n\t\tWeightedSpanTermExtractor: For highlighting phrases accurately to re-use it\u2019s SpanQuery conversion and rewrite detecting abilities.  Perhaps these parts of WSTE could move to general SpanQuery utilities.\n\t\tTermVectorLeafReader: When highlighting offsets from term vectors.\n\t\n\t\n\tPostingHighlighter things:\n\t\n\t\tTechnically, Nothing however it has multiple copies of some things that have not been modified: Passage, PassageScorer, PassageFormatter, DefaultPassageFormatter.\n\t\tNote: Utility BreakIterators are of use to the PH, UH, and even the FVH: WholeBreakIterator, CustomSeparatorBreakIterator.  Maybe they should move to a utils package that isn\u2019t in any of these highlighters?\n\t\n\t\n\n "
        },
        {
            "id": "comment-15470875",
            "author": "ASF GitHub Bot",
            "date": "2016-09-07T15:10:53+0000",
            "content": "GitHub user Timothy055 opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/79\n\n    LUCENE-7438 UnifiedHighlighter\n\n    Initial pull request for LUCENE-7438(https://issues.apache.org/jira/browse/LUCENE-7438)\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/Timothy055/lucene-solr master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/79.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #79\n\n\ncommit 02e932c4a6146363680b88f4947a693c6697c955\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-09-01T19:23:50Z\n\n    Initial fork of PostingsHighlighter for UnifiedHighlighter\n\ncommit 9d88411b3985a98851384d78d681431dba710e89\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-09-01T23:17:06Z\n\n    Initial commit of the UnifiedHighlighter for OSS contribution\n\ncommit e45e39bc4b07ea33e4423b264c2fefb9aa08777a\nAuthor: David Smiley <david.w.smiley@gmail.com>\nDate:   2016-09-02T12:45:49Z\n\n    Fix misc issues; \"ant test\" now works. (#1)\n\ncommit 046a28ef31acf4cea7d255bbbb4b827e6a714e3d\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-09-02T20:58:31Z\n\n    Minor refactoring of the AnalysisFieldHighlighter\n\ncommit ccd1a2280abd4b48cfef8122696e5d9cfd12920f\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-03T12:55:20Z\n\n    AbstractFieldHighlighter: order methods more sensibly; renamed a couple.\n\ncommit d4714a04a3e41d5e95bbe942b275c32ed69b9c2e\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T01:03:29Z\n\n    Improve javadocs and @lucene.external/internal labeling & scope.\n    \"ant precommit\" now passes.\n\ncommit e0659f18a59bf2893076da6d7643ff30f2fa5a52\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T01:25:55Z\n\n    Analysis: remove dubious filter() method\n\ncommit ccd7ce707bff2c06da89b31853cca9aecea72008\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T01:44:01Z\n\n    getStrictPhraseHelper -> rm \"Strict\", getHighlightAccuracy -> getFlags, and only call filterExtractedTerms once.\n\ncommit ffc2a22c700b8abcbf87673d5d05bb3659d177c9\nAuthor: David Smiley <david.w.smiley@gmail.com>\nDate:   2016-09-04T15:21:08Z\n\n    UnifiedHighlighter round 2 (#2)\n\n\n\tAbstractFieldHighlighter: order methods more sensibly; renamed a couple.\n\n\n\n\n\tImprove javadocs and @lucene.external/internal labeling & scope.\n    \"ant precommit\" now passes.\n\n\n\n\n\tAnalysis: remove dubious filter() method\n\n\n\n\n\tgetStrictPhraseHelper -> rm \"Strict\", getHighlightAccuracy -> getFlags, and only call filterExtractedTerms once.\n\n\n\ncommit 5f95e05595db462d3ab5bffc68c2c92f70875072\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T16:12:33Z\n\n    Refactor: FieldOffsetStrategy\n\ncommit 86fb6265fbbdb955ead6d4baf944bf708175715e\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T16:21:32Z\n\n    stop passing maxPassages into highlightFieldForDoc()\n\ncommit f6fd80544eae9fab953b94b1e9346c0883f956eb\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T16:12:33Z\n\n    Refactor: FieldOffsetStrategy\n\ncommit b335a673c2ce45904890c1e9af7cbfda2bd27b0f\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T16:21:32Z\n\n    stop passing maxPassages into highlightFieldForDoc()\n\ncommit 478db9437b92214cbf459f82ba2e3a67c966a150\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T18:29:44Z\n\n    Rename subclasses of FieldOffsetStrategy.\n\ncommit dbf4280755c11420a5032445cd618fadb7444b61\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T18:31:34Z\n\n    Re-order and harmonize params on methods called by UH.getFieldHighlighter()\n\ncommit f0340e27e61dcda2e11992f08ec07a72fad6c24c\nAuthor: David Smiley <dsmiley@apache.org>\nDate:   2016-09-04T18:53:51Z\n\n    FieldHighlighter: harmonize field/param order. And don't apply maxNoHighlightPasses twice.\n\ncommit 817f63c1d48fd523c13b9c40a2ae9b8a4047209a\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-09-06T20:43:20Z\n\n    Merge of renaming changes\n\ncommit 0f644a4f53c1ed4d41d562848f6fe51a87442a75\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-09-06T20:54:13Z\n\n    add visibility tests\n\ncommit 9171f49e117085e7d086267bb73836831ff07f8e\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-09-07T14:26:59Z\n\n    ADd additional extensibility test\n\n "
        },
        {
            "id": "comment-15470904",
            "author": "Timothy M. Rodriguez",
            "date": "2016-09-07T15:21:16+0000",
            "content": "Pull request here: https://github.com/apache/lucene-solr/pull/79\n\nI'd also like to specially acknowledge David Smiley who has worked with us closely.  He did the lion's share of the work represented here. (Including the genesis of the idea for unifying the disparate highlighters.) "
        },
        {
            "id": "comment-15473810",
            "author": "David Smiley",
            "date": "2016-09-08T13:02:49+0000",
            "content": "I think we can avoid some duplication confusion as follows:\n\nFor the internal classes that user's don't normally use:\n\n\n\tMultiTermHighlighting: transfer most of the changes I did in MultiTermHighlighting to the copy in the postingshighlight package \u2013 particularly to anything that already existed there. Then make that public and lucene.internal so it can be accessed.  That is very low-impact on the PH. For the couple methods added \u2013 uninvertAndFilterTerms and makeStringMatchAutomata I think we can add these to FieldOffsetStrategy and AnalysisOffsetStrategy respectively.  And add comments mentioning it would logically go in MTH but since that's in a different highlighter, we don't.\n\tTokenStreamFromTermVector: I think we can replace the one in the highlighter with this one, as the sparseness ratio is configurable in the constructor.\n\n\n\nFor the surface classes users use: Passage, PassageScorer, PassageFormatter, DefaultPassageFormatter.  \u2013 I don't think it good to have users use parts of another highlighter (postingshighlight), which is weird for users.  I propose copying these with a leading 'U', i.e. UPassage etc.  That said if others think that's a worse trade-off, it's no big deal to me.  Once o.a.l.s.ph.Passage's constructor is public, it's possible to do that.\n\nRE benchmarks... not sure when we'll have those ready but I would hope by the end of this month.  I figure using our benchmark module on wikipedia is a fine way to go.  I've used that to benchmark enhancements to the standard highlighter before.\n\nThoughts (esp. from other committers)?  Robert Muir, I figure you'll have some valuable feedback as you did most (all?) of the herculean work on the PostingsHighlighter which was an ideal starting point for this UH.   I know some folks are on vacation or at another conference right now who I know want to provide feedback so I'm in no hurry to commit anything. "
        },
        {
            "id": "comment-15473896",
            "author": "Timothy M. Rodriguez",
            "date": "2016-09-08T13:41:12+0000",
            "content": "I'm not a fan of forking classes with Uxyz naming scheme.  I think it'd be better to make the existing classes re-usable or keep the current naming scheme.  That being said, if we make the existing classes re-usable, it might be better to plan on moving them into some common package later on so it's clearer that they are re-used. "
        },
        {
            "id": "comment-15473933",
            "author": "Robert Muir",
            "date": "2016-09-08T13:57:46+0000",
            "content": "I think there are room for plenty of new highlighters in lucene, so its great to have another one. I do get the feeling from some issues etc, that some feel there \"can be only one\", but I don't see any good reasons for that. On the other hand, like codecs and other things in lucene, we should explore different approaches that give the user more choices (like this new highlighter here). \n\nI think this is especially important because of how \"personal\" highlighting is to the app, and the fact that performance/relevance is tricky stuff here depending on how the app works! For example about the reuse note: this highlighter discards reuse of some internal lucene structures, but under some circumstances (e.g. certain query structures/Directory impl/doc sizes/top-N sizes/stopwords or lack thereof) this could indeed matter a lot. For PH it does this simply because it tries to maximize perf everywhere (possibly to the extreme: perhaps it really is the wrong tradeoff, but that was a \"different\" direction to explore). There are lots of ways these things can perform or be very slow, and a lot of it is hard to generalize across all use-cases!\n\nAs far as the duplication of classes, I'd be a little careful before refactoring too much of it, because of that very reason. Maybe UH needs to ultimately go in different directions than PH and we should just let it do that.\n\nFor example ranking: PH disregards query structure and tries to use a bag-of-words approach with something similar to traditional ranking for that, the idea is that hopefully that stuff works well on a small scale too.\n\nBut UH might need something else: if it attempts to use more query structure than bag-of-words, then UH might need to do something else. I haven't looked to see how things like IDF are computed there, that's just an example.\n\nAnd maybe the right direction for PH, given what it tries to do, is to do something like LUCENE-4909... that sorta sits out there because we don't have a good way of measuring quality? \n\nI also do worry a bit about making internal-only classes like MultitermHighlighting public to the user, I think this has a real heavy API cost. Maybe for that one in particular its the right way to go, given how hacky/hairy it is especially. Maybe it can be renamed to something better to limit the confusion  This problem isn't really unique to highlighters though, its something that should be addressed better in general, e.g. with internal-only packages that are hidden or something like that.\n\nAnyway, these are just some general thoughts. Glad to see we will have more choices. "
        },
        {
            "id": "comment-15474118",
            "author": "David Smiley",
            "date": "2016-09-08T15:13:15+0000",
            "content": "Thanks for chiming in Rob.\n\nFor the present while there are feature gaps (see \"Missing features\" above), I don't think we can suggest that there be only one highlighter.  I admit I see that as potential eventuality that I think is desirable, but it's a moot discussion right now.  That being said, the UH, being based on the PH, does everything it does and more.  It scores/ranks and formats using the same code.  The very kernel of the highlighter that produces the Passages[] (now in FieldHighlighter.highlightOffsetsEnums) is essentially the same.  Still, I don't think we should do any removing of highlighters at this time.  Eventually, we can ask ourselves, what is highlighter XYZ giving us over the UnifiedHighlighter?  And then we can see if we (and other users) think it's worth keeping it.\n\nRE PostingsHighlighter perf trade-offs:\n\nYeah I know it's possible to craft an extreme case that would exercise the PostingsEnum reuse \u2013  loads of terms in the query and an optimized index.  Once we have some benchmarking, we can see how much of a hit was lost by not re-using.  That feature was retained in the UH for many months until just recently when it underwent a large refactor to simplify things.  Other than this, I don't believe there are any tricks in the PH that we removed in the UH.\n\nRE ranking/scoring \"needs\":\n\nI'm not aware that the UH might have different passing scoring \"needs\" than the PH.  The PH's algorithm seems really nice to me; I didn't put any thought into this aspect.  But yeah maybe there might be improvements for phrase/span queries in particular.  By the way, PhraseHelper, simply filters out certain occurrences of certain terms.  Perhaps the frequency of the span might be used in scoring?  But to know that, you must iterate them, and then you lose lazy iteration.  Perhaps someone wanting to trade-off performance for possibly better passage relevance would make this trade-off?  We/BLAW have no plans to do that.  If someone comes along with such a requirement, I hope we can accommodate that interesting direction.\n\nRE moving / renaming / visibility\n\nIf you have specific suggestions (e.g. w.r.t. MultiTermHighlighting) on how they might be renamed and re-shuffled to different packages than I'd love to hear your thoughts on that.  Some things of the UH are expressly public because we/BLAW are using those endpoints but we/BLAW don't use MultiTermHighlighting at this time.  But I could imagine some custom wildcard query coming into existence and it would be a PITA if we couldn't help MTH understand some new query.  Similar for WSTE.\n\nBTW there is a visibility test expressly for ensuring certain things are public. "
        },
        {
            "id": "comment-15474731",
            "author": "Timothy M. Rodriguez",
            "date": "2016-09-08T19:08:11+0000",
            "content": "Actually, I think passage relevancy might be something we'd look into in more details down the line.  Definitely, some of the things in LUCENE-4909 could be useful.   I see merit in keeping things separate to allow for flexibility. "
        },
        {
            "id": "comment-15505536",
            "author": "David Smiley",
            "date": "2016-09-20T04:31:36+0000",
            "content": "I developed a benchmark using Lucene's benchmark module; it's attached as a patch.  I made some changes to some existing classes there and it's debatable if those changes are readily committable.  The benchmark is on 200k documents from the wikipedia/enwiki data set.  While poking through the data and running some queries through Luke, I developed a few lists of queries: terms, phrases, and wildcards.  There are some boolean operators in there, and both phrase and wildcard query lists have some occasional TermQuery clauses intermixed too.  I had planned to add another query list but this takes awhile.  Due to the differences in index data, I have two similar .alg files, one for full term vectors, and the other for postings. I used the postings one to test analysis as well but it could have been on either.  It should be the same document data.  Since I have multiple query lists, I did a total of 6 benchmark executions, and each time tweaking the file.query.maker.file param and switching to the other .alg once.  In the table below, the first (search) row is the time it takes to search and retrieve the data to highlight but not to actually do any highlighting.  It's a baseline.  The other numbers are over and above that time.  In other words, I subtracted the output from the benchmark for the highlighter modes from the baseline so I could measure highlighting time.\n\nI tested the standard Highlighter (SH), PostingsHighlighter (PH), FastVectorHighlighter (FVH), and UnifiedHighlighter (UH).  The suffix stands for the analysis mode: analysis (A), term vectors (V), postings (P), and postings with light term vectors (PV) \u2013 a mode unique to the UH.  The code I wrote to test these, where possible, tried to configure them similarly.  \n\n\n\n\nImpl\nterms\nphrases\nwildcards\n\n\n(search)\n 1.08 \n 1.22 \n 1.46 \n\n\nSH_A\t\n3.92\t\n4.53\t\n9.33\n\n\nUH_A\t\n1.91\t\n1.70\t\n3.93\n\n\nSH_V\t\n1.83\t\n1.59\t\n3.93\n\n\nFVH_V\t\n0.85\t\n1.36\t\n2.40\n\n\nUH_V\t\n0.80\t\n1.00\t\n1.94\n\n\nPH_P\t\n0.91\t\n0.57\t\n4.02\n\n\nUH_P\t\n0.61\t\n0.36\t\n4.03\n\n\nUH_PV\t\n0.52\t\n0.35\t\n1.76\n\n\n\n\n\nI ranked it by offset mode so you can see things working off the same offset source.  Judging from all the runs I did and as I tweaked what was being measured, there seems to be a large % err on these numbers, maybe 15%; I'm not sure.  Nevertheless the numbers above seem about right after I have done them a bunch of times and tweaked the benchmark.\n\nConclusions:  The UH is faster in each offset mode than the others.  It is a lot faster in Analysis mode than the standard Highlighter is.  In some runs I've also seen the FVH beat out the UH.  Note that months ago I ascertained that the FVH is not as sensitive to the performance of an underlying BreakIterator as UH & PH are \u2013 so \"cheap\" BI's like the char separator one make for a UH that handily beats FVH but expensive BI's (like the default JDK provided) make these two more competitive.  \n\nOne cool observation that surprised me is the phrase query difference between PH & UH.  Despite the accuracy mode of UH (set to true for these benchmarks), it's still faster than PH.  I temporarily disabled it and re-ran and found that the UH got slower when it treated them like PH does (bag of terms).  I believe that is because the filtering of these terms positions the UH does, while it intrinsically has some cost, seems to be cheaper than the main highlighting loop seeing more occurrences of terms that result in more Passages (which also needs to invoke the BreakIterator).  Accuracy & speed \u2013 Cool!\n\nOf course this benchmark could be improved... and it could be modified to measure highlighting shorter text or longer text.  And maybe try that case of an optimized index and lots of terms in the query.  Maybe benchmark queries with SpanMultiTermQuery in them, or ones with phrases & wildcards. And I was going to measure memory allocation but against this large matrix I changed my mind as I've got other things to get to.  I had done so months ago and the results looked great. "
        },
        {
            "id": "comment-15509898",
            "author": "David Smiley",
            "date": "2016-09-21T13:26:36+0000",
            "content": "BTW just to re-inforce the wide precision in the numbers, note that UH_P & UH_PV should theoretically highlight term queries with identical code (PV gets internally optimized to P when there are no wildcards) yet it differed 0.61 to 0.52 (17%).\n\nQuoting myself earlier:\nFor the surface classes users use: Passage, PassageScorer, PassageFormatter, DefaultPassageFormatter. \u2013 I don't think it good to have users use parts of another highlighter (postingshighlight), which is weird for users. I propose copying these with a leading 'U', i.e. UPassage etc. That said if others think that's a worse trade-off, it's no big deal to me. Once o.a.l.s.ph.Passage's constructor is public, it's possible to do that.\n\nReconsidering... I think it's fine to use these classes from the PostingsHighlighter... after all, these classes are only actually seen by users when they want to customize them.  A user can simply call public methods on UH and reference zero other classes (getting back strings based on default impls of those classes).  If there are no objections to this path, Tim/I can update the PR along with the other changes listed in the same comment I just referenced.\n\nBTW this highlighter has been in production for about 6 months.  It rooted out a couple bugs. "
        },
        {
            "id": "comment-15524080",
            "author": "Ryan Pedela",
            "date": "2016-09-26T20:26:06+0000",
            "content": "I am very happy to see this. I use Elasticsearch, and I currently use the experimental highlighter plugin for three reasons.\n\n1. It uses either term vectors or postings to increase performance.\n2. It has fragment and sentence modes.\n3. The sentence mode produces significantly better highlights than the postings highlighter in my experience.\n\nI would prefer to use an official highlighter and happy to see that the UnifiedHighlighter will take care of #1 and #2. Now I would like to talk about #3.\n\nI don't know the specifics of the algorithm, but the experimental highlighter appears to take proximity and a keyword's document position into account. One example from memory, I had a medical research paper about warfarin and the highlight returned by the postings highlighter for the search \"warfarin\" came from the references. However the experimental highlighter returned a highlight near the beginning of the paper and it was a pretty good summary of the paper.\n\nThere is also room for improvement for both the experimental and postings highlighters. They both appear to use the same sentence fragmenter which does not do a good job with abbreviations and decimal points. Would something like Stanford CoreNLP help?\n\nAlso I would like a highlighter that tries to get as many keywords as possible into the highlight, at least as a config option. That is hard if only returning a single sentence or fragment. However I often want three fragments and I would like the union of the three fragments to contain all the keywords or as many as possible. For example, I am working on a search engine for SEC filings and a user searched \"BPL hedgings\" during a user test. BPL is the stock ticker for Buckeye Partners, and stock tickers are pretty unique within the SEC filings. The experimental highlighter returned three fragments with \"BPL\" but no \"hedgings\" (fast vector highlighter produced similar fragments). The user was very confused because they didn't see the word \"hedgings\" in the highlight and thought it wasn't found even though it was. To fix this, I retrieve the top 100 fragments and post-process them to find the best 3 fragments which contain the most keywords collectively. The post processing is quite naive since it does not understand proximity, stemming, etc. I would prefer if Lucene or ES did it because it can be much smarter. "
        },
        {
            "id": "comment-15524120",
            "author": "David Smiley",
            "date": "2016-09-26T20:44:51+0000",
            "content": "Thanks for your input Ryan!  I have not heard of Wikimedia's \"experimental highlighter\"; maybe I'll go poke around there to see what it's doing.\n\nRE snippet delineation: This is customizable in the PH & UH & FVH via supplying a java.text.BreakIterator.\n\nRE snippets with multiple keywords: Yes!  I've had that thought as well and some months ago I filed a TODO in my wish list of highlighter features to add a \"coordination factor\" to the UH algorithm (which at the moment is identical to the PH).  A simple coord factor would help a lot, but even better would be one that also considered term diversity across the multiple passages you ask for rather than scoring each separately.  To do this, it might internally track it's the leading candidate passage per term, in addition to the PriorityQueue it has now.  This would be very low overhead. "
        },
        {
            "id": "comment-15526474",
            "author": "David Smiley",
            "date": "2016-09-27T15:31:25+0000",
            "content": "BTW I reviewed the W.E.H. and posted a comparison: https://github.com/wikimedia/search-highlighter/issues/19 "
        },
        {
            "id": "comment-15537117",
            "author": "Timothy M. Rodriguez",
            "date": "2016-09-30T21:24:53+0000",
            "content": "After further consideration, it seems best to leave some of the classes common between Postings and the Unified highlighters separate.  If we were to use the same classes they'd ideally move to a common sub-package that both could share and this would introduce unneeded change and hurt potential compatibility for any users of those classes.  Keeping them separate also allows for a possible improvement to the method highlightFieldsAsObjects which internally creates a Map that is promptly thrown away again in the highlight methods.  I briefly investigated changing this to return the internal Object[][] array and avoid the extra Map allocation, but this creates some awkwardness since the Object[][] array sorts the input fields before filling the arrays, which would make the API somewhat of a trap for callers.  This undesired behavior is likely why the map is being created.  One way to fix this is to generify PassageFormatter over it's output type which would allow for a PassageFormatter<String> in the case of the DefaultPassageFormatter.  However, changing this is a rather involved change that could ultimately result in the UnifiedHighlighter itself having a generic type and it was not clear that muddying the waters with that right now was a good idea.  However, keeping these classes separate will allow for an attempt at that in the future.\n\nIn the meantime, I've also pushed a commit to reduce the visibility of the MultiTermHighlighting to package protected.  As it stands, I think this patch is ready. "
        },
        {
            "id": "comment-15537695",
            "author": "David Smiley",
            "date": "2016-10-01T02:22:41+0000",
            "content": "(I'm attaching the patch)\nAll new files; no changes to anything existing.\n\nI plan to commit Tuesday to give even more time for review.\n\nI'd also like to commit the patch for the benchmark module (but without the query files polluting the file listing?).  However I think for it to be okay, it needs to go further and remove the way highlighters were benchmarked before this, since it's too hacky/weird to see both, particularly since the existing mechanism has hooks into ReadTask (getBenchmarkHighlighter()). I figure the entire benchmark module can change at our will without back-compat concern.  \n\nWhile looking at the FVH and WEH I noticed a feature in which term vecs from multiple fields can be used to highlight one field \u2013 useful when you analyze the text in different ways into different fields (e.g. stemming vs not).  We're actually doing that with the UH in Bloomberg (offset source agnostic of course) but I didn't think to add it as a first-class feature to the UH.  Now I think we should in a follow-up issue.  I think that requirement is causing us to want things like StrictPhraseHelper to be public but it could be moved to package protected then, I think. "
        },
        {
            "id": "comment-15538769",
            "author": "David Smiley",
            "date": "2016-10-01T16:25:04+0000",
            "content": "Attached is a small update to the UH \u2013 the patch will apply on top of the main patch.\n\n\tfixed ant precommit issue \u2013 just TestUnifiedHighlighterExtensibility was affected\n\tTestUnifiedHighlighterExtensibility was actually referring to some methods that should not be tested for extensibility. I think Tim forgot to remove them as we already discussed it.\n\tMoved some logic from UH.getFieldHighlighter into UH.getOffsetStrategy which I think makes sense since that setup was only applicable to getOffsetStrategy, and furthermore it paves the way to making a multi-field offset strategy more obvious (to be done in a follow-up issue, which I'm looking forward to). I adjusted the method declaration order to read top-down.\n\n "
        },
        {
            "id": "comment-15546521",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T20:12:07+0000",
            "content": "Commit 722e82712435ecf46c9868137d885484152f749b in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=722e827 ]\n\nLUCENE-7438: New UnifiedHighlighter "
        },
        {
            "id": "comment-15547461",
            "author": "ASF subversion and git services",
            "date": "2016-10-05T03:13:01+0000",
            "content": "Commit 4b6794368df373df1f68ccf27f7556914efeb95e in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4b67943 ]\n\nLUCENE-7438: New UnifiedHighlighter\n\n(cherry picked from commit 722e827) "
        },
        {
            "id": "comment-15548582",
            "author": "David Smiley",
            "date": "2016-10-05T12:39:36+0000",
            "content": "This is an update to the benchmark patch.  I removed the existing benchmark highlighting abstraction (that I felt was a bit obsolete), and with it the existing two highlighting benchmark classes: SearchTravRetHighlightTask, SearchTravRetVectorHighlightTask.  The patch actually replaces SearchTravRetHighlightTask with the one from the previous patch, and so by class name it still exists, but is internally very different as it tests all highlighters in all offset modes.  It has the 2 highlighters-*.alg added in the last patch, and I kept the 3 query-*.txt files too.  I removed the existing highlight .alg files except for one which I updated \u2013 standard-highlights-notv.alg -> highlights.alg.  I also added a \"UH\" highlight mode to the benchmark, which is the UH's default mode operation in which it detects the offset source based on FieldInfo.\n\nI tweaked the build.xml & .gitignore to avoid work/ and temp/ and to allow them to be symbolic links.\n\nThe only thing I feel bad about was outright removing some tests related to the old highlight abstraction... meanwhile there are no new tests for this new one.  I rationalize this as it's better to finally have a more up-to-date way to highlight all highlighters in all modes (and in a consistent way) than it is to have something incomplete that is nevertheless tested.\n\nI'll commit this in a couple days. "
        },
        {
            "id": "comment-15555142",
            "author": "ASF subversion and git services",
            "date": "2016-10-07T13:57:20+0000",
            "content": "Commit 5ef60af9c18624a317d5f3e8e331b2bb83c569db in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5ef60af ]\n\nLUCENE-7438: Renovate benchmark module's support for highlighting "
        },
        {
            "id": "comment-15555146",
            "author": "ASF subversion and git services",
            "date": "2016-10-07T13:59:04+0000",
            "content": "Commit 3497a2902c198b8092b4b0352650e58543b296b5 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3497a29 ]\n\nLUCENE-7438: Renovate benchmark module's support for highlighting\n\n(cherry picked from commit 5ef60af) "
        },
        {
            "id": "comment-15557693",
            "author": "ASF subversion and git services",
            "date": "2016-10-08T10:17:47+0000",
            "content": "Commit 0414570348e5b8c8c3da8b1ad491b1b418a3756a in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0414570 ]\n\nLUCENE-7438: fix broken build "
        },
        {
            "id": "comment-15557694",
            "author": "ASF subversion and git services",
            "date": "2016-10-08T10:18:35+0000",
            "content": "Commit f247acfab17a5363166eb601cb26243e74ca108c in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f247acf ]\n\nLUCENE-7438: fix broken build "
        },
        {
            "id": "comment-15558079",
            "author": "David Smiley",
            "date": "2016-10-08T14:35:05+0000",
            "content": "Thanks for fixing the build Mike!  My bad. "
        },
        {
            "id": "comment-15616233",
            "author": "ASF GitHub Bot",
            "date": "2016-10-28T19:00:53+0000",
            "content": "Github user Timothy055 closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/79 "
        },
        {
            "id": "comment-15622882",
            "author": "Yonik Seeley",
            "date": "2016-10-31T18:02:58+0000",
            "content": "Is this usable from Solr yet, or should a new issue be opened for that?\nA quick grep suggests there's nothing yet:\n\nfind solr -type f | xargs grep -i UnifiedHighlighter\n\n "
        },
        {
            "id": "comment-15623451",
            "author": "Timothy M. Rodriguez",
            "date": "2016-10-31T21:19:15+0000",
            "content": "Not yet, we have an initial general implementation, but it's lacking tests.  (We have a customized extension internally that does have tests.)  I've created a new ticket https://issues.apache.org/jira/browse/SOLR-9708 with a PR containing the initial impl so folks can follow or help the work towards finishing it up.  Thanks for asking though, hopefully this gets the ball rolling faster. "
        },
        {
            "id": "comment-15650223",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-11-09T08:37:20+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}