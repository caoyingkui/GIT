{
    "id": "LUCENE-6650",
    "title": "Remove dependency of lucene/spatial on oal.search.Filter",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Task"
    },
    "description": "We should try to remove usage of oal.search.Filter in lucene/spatial. I gave it a try but this module makes non-trivial use of filters so I wouldn't mind some help here.",
    "attachments": {
        "LUCENE-6650.patch": "https://issues.apache.org/jira/secure/attachment/12754645/LUCENE-6650.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14610698",
            "author": "David Smiley",
            "date": "2015-07-01T17:42:29+0000",
            "content": "I'll help.  One of the nights in the next few days I'll take a stab at it.  I presume this is just trunk; on 5x SpatialStrategy.makeFilter can be deprecated (for back-compat). "
        },
        {
            "id": "comment-14610941",
            "author": "Adrien Grand",
            "date": "2015-07-01T20:18:19+0000",
            "content": "Thanks David! This issue is mostly important for trunk indeed, but backporting to 5.x and deprecating the old stuff would be nice too.\n\non 5x SpatialStrategy.makeFilter can be deprecated (for back-compat)\n\n+1 Maybe we could even make this method final and return a QueryWrapperFilter around the result of makeQuery? Since QueryWrapperFilter rewrites to the wrapped query and FilteredQuery rewrites to a BooleanQuery, this means that running a FilteredQuery with the result of makeFilter or a BooleanQuery with a FILTER clause with the result of makeQuery would do exactly the same thing.\n\nI know that some spatial filters throw an exception when someone tries to pull an iterator. I don't think a similar behaviour would be necessary anymore given that we have tests that BooleanQuery takes advantage of approximations when they are available, while FilteredQuery could still use an inefficient iterator if you did not configure the appropriate FilterStrategy? "
        },
        {
            "id": "comment-14614534",
            "author": "David Smiley",
            "date": "2015-07-06T04:42:18+0000",
            "content": "Maybe we could even make this method final and return a QueryWrapperFilter around the result of makeQuery? \n\n+1\n\nI know that some spatial filters throw an exception when someone tries to pull an iterator. I don't think a similar behaviour would be necessary anymore given that we have tests that BooleanQuery takes advantage of approximations when they are available, while FilteredQuery could still use an inefficient iterator if you did not configure the appropriate FilterStrategy?\n\nRight; not necessary.  The only spatial filter that applies here is via SerializedDVStrategy.  In the patch I post I may even enhance SerializedDVStrategy to use TwoPhaseIterator. "
        },
        {
            "id": "comment-14617469",
            "author": "David Smiley",
            "date": "2015-07-07T21:33:56+0000",
            "content": "Removing SpatialStrategy.makeFilter was pretty easy, but 3-4 SpatialStrategy impls use or have Filters that will take a bit to triage.  I worked on LUCENE-6720 today \u2013 a FunctionRangeQuery. "
        },
        {
            "id": "comment-14734859",
            "author": "Adrien Grand",
            "date": "2015-09-08T14:12:29+0000",
            "content": "David, do you think you will have time to work on this again soon? I would like to deprecate Filter, but it is a bit weird if Filter is still part of the public API of some of our modules? "
        },
        {
            "id": "comment-14734907",
            "author": "David Smiley",
            "date": "2015-09-08T14:39:16+0000",
            "content": "Hi Adrien.\nI'm attaching my patch in progress from when I last touched it a month ago.  Probably the main thing left to do is to change the Filters in the org.apache.lucene.spatial.prefix package to be Queries.  I'll try and resume working on it in a week. "
        },
        {
            "id": "comment-14935376",
            "author": "David Smiley",
            "date": "2015-09-29T16:10:44+0000",
            "content": "Finally I finished.  Filters were used a lot here, particularly in the \"prefix\" package.  A summary of changes:\n\n\n\tThe main high-level API change to put in CHANGES.txt is that SpatialStrategy.makeFilter doesn't exist any more; people should call makeQuery which already existed.  FYI this abstraction is a facade to details most users won't see.  It's still marked lucene.experimental but arguably it isn't.\n\tThe PrefixTreeStrategy.calcFacets() method (and the internal collaborators that take the same parameters) doesn't take a Filter now, it has a Bits topAcceptDocs instead.\n\tAny subclasses of Filter had their names changed to reflect Query.  These queries are all lucene.experimental or internal.\n\tThe removal of acceptDocs in LUCENE-6553 meant I could follow-suit in most places.  But the PrefixTreeFacetCounter (used in e.g. heatmap) needs to be aware of acceptDocs since it's not a Query so just there did I need to keep that.  It worked out fine.\n\tSerializedDVStrategy's makeQuery no longer throws an exception if you try to iterate on it versus access it via a matches() on TwoPhaseIterator because it would be hard/impossible and basically not worthwhile.  There's less code there to implement now any way, thanks to RandomAccessWeight.\n\t(Not strictly related?) In BBoxStrategy's boolean queries, I substituted BooleanClause.Occur.FILTER instead of MUST through I'm not sure if it matters?  (score doesn't matter; the whole thing is wrapped in a ConstantScoreQuery).\n\n "
        },
        {
            "id": "comment-14936669",
            "author": "Adrien Grand",
            "date": "2015-09-30T10:13:37+0000",
            "content": "I substituted BooleanClause.Occur.FILTER instead of MUST through I'm not sure if it matters?\n\nIt should be equivalent.\n\nThe patch looks good to me overall, it feels cleaner to me that makeQuery and makeFilter were merged to a single method that has a two-phase iterator. The one thing that feels awkward to me is this topAcceptDocs which is top-level to the reader, while everywhere else we work with per-segment data-structures? "
        },
        {
            "id": "comment-14936739",
            "author": "David Smiley",
            "date": "2015-09-30T11:37:53+0000",
            "content": "Thanks for the review Adrien.\n\nI'll change the BooleanClause.Occur.FILTER back to MUST only because it feels more orthogonal to intermixed use with SHOULD in some of those boolean queries.\n\nThe one thing that feels awkward to me is this topAcceptDocs which is top-level to the reader, while everywhere else we work with per-segment data-structures?\n\nI felt the same, but we don't have a class/abstraction that yields a Bits (or similar) when given a LeafReaderContext as a parameter.  Filter was fairly close, but it wasn't even perfect since bits() could return null so I had to have code to build a Bits from the iterator.  In the end \u2013 the code here really wants a Bits \u2013 which is a very simple 2-method interface.  So my feeling is that this is okay, and it's not worthwhile coming up with some new abstraction to return the Bits per-segment. "
        },
        {
            "id": "comment-14936794",
            "author": "Adrien Grand",
            "date": "2015-09-30T12:42:47+0000",
            "content": "Fair enough. "
        },
        {
            "id": "comment-14936810",
            "author": "David Smiley",
            "date": "2015-09-30T13:06:03+0000",
            "content": "I was just thinking \u2013 maybe a Java 8 Function<LeafReaderContext,Bits> ?  On the 5x side I'd probably have a little interface for it. "
        },
        {
            "id": "comment-14939218",
            "author": "ASF subversion and git services",
            "date": "2015-10-01T03:26:01+0000",
            "content": "Commit 1706181 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1706181 ]\n\nLUCENE-6650: Spatial module no longer uses Filter. "
        },
        {
            "id": "comment-14939305",
            "author": "ASF subversion and git services",
            "date": "2015-10-01T04:21:04+0000",
            "content": "Commit 1706184 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1706184 ]\n\nLUCENE-6650: Spatial module no longer uses Filter. "
        },
        {
            "id": "comment-14939772",
            "author": "David Smiley",
            "date": "2015-10-01T12:57:24+0000",
            "content": "(I didn't bother going with the Function) "
        }
    ]
}