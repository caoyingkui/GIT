{
    "id": "LUCENE-1496",
    "title": "Move solr NumberUtils to lucene",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "solr includes a NumberUtils class with some general utilities for dealing with tokens and numbers.\n\nThis should be in lucene rather then solr.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-12-27T10:06:27+0000",
            "content": "I looked into the code of NumberUtils:\n\nThe encoding is very similar to the one of TrieUtils (used in TrieRangeQuery, see LUCENE-1470, http://hudson.zones.apache.org/hudson/job/Lucene-trunk/javadoc//org/apache/lucene/search/trie/TrieUtils.html). The only difference between TrieUtils and NumberUtils is the more compact encoding in NumberUtils (because in TrieUtils.VARIANT_8BIT uses one character per byte, NumberUtils uses 14 bits per character). TrieUtils works also correct with String.compareTo() (it was the intention behind TrieUtils).\n\nIn my opinion, TrieUtils has some more advantages:\n\n\tDoubles are encoded in a correctly sortable way (even Double.XXX_INFINITY!), using the IEEE binary representation of doubles with some bit alignments.\n\tDirect support for Dates and longs\n\tBuiltin comparator for the new SortField constructor (LUCENE-1478)  and a nice SortField factory. This maps all encoded values to a FieldCache with long values (even for dates or doubles because there is no difference, longs have the fastest encoding/decoding speed - for sorting, the real values are not interesting).\n\n\n\nThe only problem is, that indexes, encoded with the old NumberUtils are not readable by TrieUtils. But if we include such things into Lucene, we should not duplicate code and create again new encodings.\n\nFor the more compact encoding, TrieUtils could be extended, to also support a \"14bit\" Trie variant (which would not work for real trie encoding), but may be used for simply store longs very compact. On the other hand, if somebody uses NumberUtils, he may be also interested in TrieRangeQuery, so he should use TrieUtils.VARIANT_8BIT.\n\nSo I think, we should perhaps leave NumberUtils at solr and use TrieUtils in Lucene. LocalLucene should then also use TrieUtils. And solr may in future switch to Trie encoding with the next major version, too. ",
            "author": "Uwe Schindler",
            "id": "comment-12659319"
        },
        {
            "date": "2008-12-27T17:02:56+0000",
            "content": "should the number functions from TrieUtils be moved to a lucene NumberUtils?\n\nAPI wise, if i were looking for ways to encode numbers, i doubt i would look at \"TrieUtils.java\"\n\nwhat about the non-long/double functions in NumberUtils? ",
            "author": "Ryan McKinley",
            "id": "comment-12659355"
        },
        {
            "date": "2008-12-28T16:47:52+0000",
            "content": "I am thinking about extending TrieUtils and TrieRangeQuery for 32bit values (ints and floats). Doing this, the other methods in NumberUtils would be obsolete, too. This was just a suggestion, maybe we should talk a little bit more about this.\n\nOn my first look through the code, I had not seen, that NumberUtils also supports doubles like TrieUtils, the only difference is the use of doubleToLongBits() vs. doubleToRawLongBits(). I am not sure what is better , does anybody know more about this? Im my opinion the version with/without raw also normalizes doubles, so NaN compares with ==, anything other?\n\nTo my changes in TrieUtils for support of 32bit: I am currently not sure how to do this elegant. Esp. the auto detection of trie encoding is not so happy on changing this  As 2.9 is not yet released, I have time to change the classes and signatures without worry about deprecation and format changes. So a good point to unify TrieUtils and NumberUtils. Maybe TrieRangeQuery will make it into the core, when flexible indexing is available.\n\nSo my questions: Is anybody interested in TrieUtils also support 32bit? Why not unify NumberUtils and TrieUtils? Any ideas? ",
            "author": "Uwe Schindler",
            "id": "comment-12659445"
        },
        {
            "date": "2009-03-18T20:20:33+0000",
            "content": "If we move trie/* into core, what do we need/want to fold in from Solr's NumberUtils? ",
            "author": "Michael McCandless",
            "id": "comment-12683149"
        },
        {
            "date": "2009-06-11T14:25:06+0000",
            "content": "Uwe, with trie now handling 32 bit values, and coming into core, does Lucene need Solr's NumberUtils?  Are there compelling things that Solr's NumberUtils do over TrieUtil? ",
            "author": "Michael McCandless",
            "id": "comment-12718473"
        },
        {
            "date": "2009-06-11T14:37:07+0000",
            "content": "I think we can close this now. I originally wanted to make this issue dependent on the move-to-core issue and close it together with trie.\n\nThere is now a private copy of number utils inside LocalLucene, but this should be removed soonly and replaced by TrieUtils.\n\nBut yonik said: NumberUtils is also only for compatibility reasons in solr. The binary format used by NumberUtils is not very index-friendly (because of using the full UTF-16 range and so it has the UTF-8 decoding overhead), so it should not be used for new deleopments. I suggest to use TrieUtils (or NumberUtils to do the same). TrieUtils only uses 7 bits per char and so don't touch the UTF-8 encoding (it is simply ASCII-only). ",
            "author": "Uwe Schindler",
            "id": "comment-12718476"
        },
        {
            "date": "2009-06-11T14:53:56+0000",
            "content": "OK, I'm resolving as \"won't fix\".  It sounds like Lucene only needs TrieUtils... ",
            "author": "Michael McCandless",
            "id": "comment-12718484"
        }
    ]
}