{
    "id": "LUCENE-4946",
    "title": "Refactor SorterTemplate",
    "details": {
        "components": [],
        "fix_versions": [
            "4.4"
        ],
        "affect_versions": "None",
        "priority": "Trivial",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "When working on TimSort (LUCENE-4839), I was a little frustrated of not being able to add galloping support because it would have required to add new primitive operations in addition to compare and swap.\n\nI started working on a prototype that uses inheritance to allow some sorting algorithms to rely on additional primitive operations. You can have a look at https://github.com/jpountz/sorts/tree/master/src/java/net/jpountz/sorts (but beware it is a prototype and still misses proper documentation and good tests).\n\nI think it would offer several advantages:\n\n\tno more need to implement setPivot and comparePivot when using in-place merge sort or insertion sort,\n\tthe ability to use faster stable sorting algorithms at the cost of some memory overhead (our in-place merge sort is very slow),\n\tthe ability to implement properly algorithms that are useful on specific datasets but require different primitive operations (such as TimSort for partially-sorted data).\n\n\n\nIf you are interested in comparing these implementations with Arrays.sort, there is a Benchmark class in src/examples.\n\nWhat do you think?",
    "attachments": {
        "LUCENE-4946.patch": "https://issues.apache.org/jira/secure/attachment/12581611/LUCENE-4946.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-21T21:15:19+0000",
            "content": "Looks cool to me! ",
            "author": "Dawid Weiss",
            "id": "comment-13637646"
        },
        {
            "date": "2013-05-02T21:45:45+0000",
            "content": "This patch contains one base class Sorter and 3 implementations:\n\n\tIntroSorter (improved quicksort like we had before but I think the name is better since it makes it clear that the worst case complexity is O(n ln) instead of O(n^2) as with traditional quicksort\n\tInPlaceMergeSort, the merge sort we had before.\n\tTimSort, an improved version of the previous implementation that can gallop to make sorting even faster on partially-sorted data.\n\n\n\nOne major difference is that the end offsets are now exclusive. I tend to find it less confusing since you would now call sort(0, array.length) instead of sort(0, array.length - 1).\n\nPlease let me know if you would like to review the patch! ",
            "author": "Adrien Grand",
            "id": "comment-13647931"
        },
        {
            "date": "2013-05-02T21:58:21+0000",
            "content": "Add missing @lucene.internal. ",
            "author": "Adrien Grand",
            "id": "comment-13647953"
        },
        {
            "date": "2013-05-02T22:55:30+0000",
            "content": "Hi Adrien,\nthansk for the refactoring. The history of the SorterTemplate class going back to CGLIB is long and this is a really good idea. Its also useful for other projects, so its maybe a good idea to make a Apache Commons projects out of it \n\nI scanned the patch, looks good. The from...to semantics are better now for the user. I think the original implementation used inclusive end because most implementations on the web were based on this. For me it always looked wrong, but I did not want to change it.\n\nI found some code duplication: To me it looks like ArrayUtil has a private re-implementation of ArrayIntroSorter which is a top-level class in oal.util. Could ArrayUtil not simply use that public impl instead? I know there are 2 implementations with Comparators and without comparators, just an idea! Maybe add a static final singleton NaturalComparator<T extends Comparable<? super T>> that calls compareTo, so we dont need 2 implementations.\n\nI also like that you used timsort at places were the lists are already sorted in the common case (like Automatons). ",
            "author": "Uwe Schindler",
            "id": "comment-13648001"
        },
        {
            "date": "2013-05-02T22:57:48+0000",
            "content": "We should remove the following from NOTICE.txt:\n\n\nThe class org.apache.lucene.util.SorterTemplate was inspired by CGLIB's class\nwith the same name. The implementation part is mainly done using pre-existing\nLucene sorting code. In-place stable mergesort was borrowed from CGLIB,\nwhich is Apache-licensed.\n\nThe new code has no similarity anymore to the original code - its a complete reimplementation. Only the \"pattern\" stayed alive (you have abstract class, where you have to implement the compare and swap ops). ",
            "author": "Uwe Schindler",
            "id": "comment-13648005"
        },
        {
            "date": "2013-05-03T06:49:31+0000",
            "content": "I think the original implementation used inclusive end because most implementations on the web were based on this. For me it always looked wrong, but I did not want to change it.\n\nI admit I am on the 'inclusive' side of things. To me sort(0..5) means sort elements between indexes 0 and 5, simple. There is also a side-effect of making it exclusive \u2013 you can't sort the full array because an exclusive index on any end would overflow into negative values. I guess it's really a matter of taste in most cases. Perhaps the best way to change it would be to give (startIndex, elementsCount) which still reads (0, array.length) in most cases and does not have the problems mentioned above... ",
            "author": "Dawid Weiss",
            "id": "comment-13648227"
        },
        {
            "date": "2013-05-03T08:55:03+0000",
            "content": "Its also useful for other projects, so its maybe a good idea to make a Apache Commons projects out of it.\n\nWhy not. Or maybe use an already existing commons project such as commons collections? I'll dig that...\n\nI found some code duplication\n\nI'll fix that. The reason is that I modified ArrayUtil and CollectionUtil which have their own private Sorter implementations and then I added tests which required me to have concrete implementations in src/test. I'll merge them.\n\nWe should remove the following from NOTICE.txt\n\nI'll fix that too.\n\nPerhaps the best way to change it would be to give (startIndex, elementsCount) which still reads (0, array.length) in most cases and does not have the problems mentioned above...\n\nI have no strong opinion about that. I think the reason I like the (from,to) option better is that List.subList and Arrays.copyOfRange have the same arguments. For example someone who wants to sort a sub-list with the JDK would do Collections.sort(list.subList(from,to)). So I think it'd be nice to make directly translatable to new InPlaceMergeSorter() { compare/swap }.sort(from, to). ",
            "author": "Adrien Grand",
            "id": "comment-13648271"
        },
        {
            "date": "2013-05-03T12:19:52+0000",
            "content": "New Patch:\n\n\n\tno more code duplication between ArrayUtil and the test classes\n\n\n\n\n\tArrayUtil exposes a NATURAL_COMPARATOR to sort arrays based on the natural order (for objects that implement Comparable)\n\n\n\n\n\tRemoved references to CGlib in the NOTICE.\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13648358"
        },
        {
            "date": "2013-05-03T12:49:37+0000",
            "content": "+1, looks good.\n\nAbout the from/to issue: The whole JDK collections API used from and exclusive to, so I agree with Adrien, we should do it in the same way. The overflow issue is no real issue as the meximum array size is limited, too  new byte[Integer.MAX_VALUE] does not work on most JDKs. ",
            "author": "Uwe Schindler",
            "id": "comment-13648373"
        },
        {
            "date": "2013-05-03T12:56:50+0000",
            "content": "I still think inclusive ranges are more logical . For JDK subList and others the argument probably was that specifying inclusive zero-elements range becomes problematic with inclusive values.... so there's always something. I'm not objecting to choosing the \"exclusive\" option either, I'm just saying both options have their pros and cons. ",
            "author": "Dawid Weiss",
            "id": "comment-13648378"
        },
        {
            "date": "2013-05-03T13:32:31+0000",
            "content": "make a Apache Commons projects out of it\n\nI just left an email on their dev@ mailing-list to get their opinion about it: http://markmail.org/message/if5cgarhavzuy45j. ",
            "author": "Adrien Grand",
            "id": "comment-13648403"
        },
        {
            "date": "2013-05-03T13:37:49+0000",
            "content": "[trunk commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1478785\n\nLUCENE-4946: Refactor SorterTemplate (now Sorter). ",
            "author": "Commit Tag Bot",
            "id": "comment-13648405"
        },
        {
            "date": "2013-05-03T14:11:17+0000",
            "content": "[trunk commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1478801\n\nLUCENE-4946: Re-add the random-access checks that have been lost during refactoring. ",
            "author": "Commit Tag Bot",
            "id": "comment-13648433"
        },
        {
            "date": "2013-05-03T14:15:19+0000",
            "content": "[branch_4x commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1478802\n\nLUCENE-4946: Refactor SorterTemplate (now Sorter) (merged from r1478785 and r1478801). ",
            "author": "Commit Tag Bot",
            "id": "comment-13648436"
        },
        {
            "date": "2013-07-23T18:37:12+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716783"
        },
        {
            "date": "2013-07-31T07:51:44+0000",
            "content": "Commit 1508757 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1508757 ]\n\nLUCENE-5140: Fixed performance regression of span queries caused by LUCENE-4946. ",
            "author": "ASF subversion and git services",
            "id": "comment-13724987"
        }
    ]
}