{
    "id": "SOLR-10286",
    "title": "Declare a field as \"large\", don't keep value in the document cache",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "(part of umbrella issue SOLR-10117)\nThis adds a field to be declared as \"large\" in the schema.  In the SolrIndexSearcher.doc(...) handling, these fields are lazily fetched from Lucene.  Unlike LazyDocument.LazyField, it's not cached after first-use unless the value is \"small\" < 512KB by default.  \"large\" can only be used when its stored=\"true\" and multiValued=\"false\" and the field is otherwise compatible (basically not a numeric field) \u2013 you'll get a helpful exception if it's unsupported. BinaryField is not yet supported at this time; it could be in the future.",
    "attachments": {
        "SOLR-10286_large_fields.patch": "https://issues.apache.org/jira/secure/attachment/12858842/SOLR-10286_large_fields.patch",
        "tests-failures.txt": "https://issues.apache.org/jira/secure/attachment/12859319/tests-failures.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-15T07:24:39+0000",
            "content": "Here's a patch.  The whole test suite has passed twice now.\n\nNocommits:\n\n\tSchemaField.isLarge will default to true for the purposes of testing during development of this feature.  This was extremely useful.  It should of course be false.\n\tSolrIndexSearcher: I want to refactor/move all the Lucene Document related code and docValuesAsStored type code out of here into a new companion class named SolrDocumentFetcher.  I didn't do that yet as I want the patch to show what's changed more clearly.\n\tBaseEditorialTransformer (related to query elevation): This made bad instanceof assumptions that I fixed, but I found the code to be too loosy goosey to my liking on toString'ing whatever it didn't understand (I hate that in general; leads to hard-to-find bugs).  I don't think it could happen so I added an \"assert false\".  Now that I see all tests pass, I'm inclined to make it fail hard.\n\n\n\nSchema package:\n\n\tFieldProperties: converted the bit masks from hex to instead use Java 8's boolean literal.  Much clearer!\n\tQuestion: Yonik Seeley what is BINARY for?  This isn't used anywhere and the line of code dates back to Solr's initial Apache contribution. For a moment I thought I could use it as the same as a BinaryField check but apparently not.\n\tFieldType.checkSchemaField only used to test for docValues compatibility and subclasses would override this to add a no-op.  I think that design was poor as it's too all-encompassing, so I made it call a new checkSupportsDocValues() and had the applicable subclasses override that instead.\n\tFieldType.checkSchemaField now checks for \"large\" compatibility \u2013 multiValued, stored, not-a-number.  BinaryField overrides to throw as well as that hasn't been implemented yet.\n\n\n\nSolrIndexSearcher:\n\n\tI refactored the doc() handling to always use a custom StoredFieldVisitor, which I think makes it clearer.  This may also make it easier to add a Status.STOP optimization for single-valued fields but I didn't get to that.\n\tWhen the Unified/Postings highlighters supply their custom StoredFieldVisitor and match an already cached document's large field, this code will avoid a double-string conversion, reducing heap memory pressure.\n\n\n\nTests:\n\n\tThe test is pretty basic; good enough?  It'd be nice to add a test to the Solr UnifiedHighlighter related stuff to randomly use this field.  It's at least an opt-in feature so I'm not too worried... not to mention I ran this with a default large'ness to tease out bugs. I wonder if the default large'ness could/should be flipped randomly by Solr's test infrastructure?\n\n\n\nBugs found/fixed:\n\n\tIn a couple places in Solr, there was an assumption that the Lucene IndexableField was actually an instance of Field.  Two cases are seen as fixed in this patch:\n\t\n\t\tDocumentBuilder.addField. It appears in-place updates might not have worked in some cases involving lazy fields, depending on the usage pattern.\n\t\tBaseEditorialTransformer (query elevation).\n\t\n\t\n\tRealTimeGetComponent: RTG can internally grab a ref-counted realtime searcher, lookup a document, then dec-ref the searcher.  If the searcher is subsequently closed, the lazy field can't get the value anymore.  Theoretically this problem could happen with Solr's standard lazy fields too but a \"large\" field is better at provoking it. I fixed this by essentially copying the IndexableField.  It'd be nice if Lucene Field had a copy-constructor of an IndexableField; I was forced to subclass to accomplish the same.\n\n\n\nAlthough not a strict requirement, ideally SOLR-10273 (largest field last) is also done. ",
            "author": "David Smiley",
            "id": "comment-15925665"
        },
        {
            "date": "2017-03-15T13:04:06+0000",
            "content": "One small change I should do is to have the SolrIndexSearcher.doc code only do it's large field handling if either there is a DocumentCache, or if lazy field loading is enabled.  If neither are true, there's no point to the special LargeLazyField.\n\nOne idea I rejected early (in parent issue SOLR-10117) I should mention here is that it's not realistic to use the LargeLazyField dynamically based on the actual value size.  If the value is huge, then it's effectively too late \u2013 you've already born the cost of fetching it (to observe its size) and putting it on the heap.  So we have to say we're going to do this always for certain fields.  SOLR-10255 included an idea of putting a special marker stored value to give this code a heads-up that certain values on a particular document are large, thus allowing the decision to be made dynamically.  That could be added in the future still. ",
            "author": "David Smiley",
            "id": "comment-15926119"
        },
        {
            "date": "2017-03-16T03:03:59+0000",
            "content": "I filed SOLR-10304 for refactoring out a SolrDocumentFetcher from SolrIndexSearcher.  A large-ish refactoring like that should really should be it's own commit separate from the changes here.\n\nNew patch.  Resolves the nocommits. I enhanced TestUnifiedSolrHighlighter to test a \"large\" field, which I verified by setting a breakpoint and I watched it get hit. I added the check to skip large field processing when there is no document cache.\n\nI plan to commit this tomorrow ~ noon EST. ",
            "author": "David Smiley",
            "id": "comment-15927395"
        },
        {
            "date": "2017-03-16T18:59:06+0000",
            "content": "Commit 2502af9f3fa25a1b724400af61bf74102f2475dd in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2502af9 ]\n\nSOLR-10286: large fields.\nAnd refactored FieldType.checkSchemaField to call a new checkSupportsDocValues() ",
            "author": "ASF subversion and git services",
            "id": "comment-15928651"
        },
        {
            "date": "2017-03-16T20:32:09+0000",
            "content": "Commit 99fc669f8f17846a20b74e09212fb9c02bc69581 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=99fc669 ]\n\nSOLR-10286: large fields.\nAnd refactored FieldType.checkSchemaField to call a new checkSupportsDocValues()\n\n(cherry picked from commit 2502af9) ",
            "author": "ASF subversion and git services",
            "id": "comment-15928838"
        },
        {
            "date": "2017-03-16T22:31:07+0000",
            "content": "Commit 4ee7fc38907a94f025785ebd388dd372b260913d in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4ee7fc3 ]\n\nSOLR-10286: fix test; we were writing to read-only dir.\nExpand solrconfig-managed-schema.xml to have toggle-able elements vis system property flags ",
            "author": "ASF subversion and git services",
            "id": "comment-15929049"
        },
        {
            "date": "2017-03-16T22:32:08+0000",
            "content": "Commit 4628cf478373faa6116bf6e41e04337d71db2e9d in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4628cf4 ]\n\nSOLR-10286: fix test; we were writing to read-only dir.\nExpand solrconfig-managed-schema.xml to have toggle-able elements vis system property flags\n\n(cherry picked from commit 4ee7fc3) ",
            "author": "ASF subversion and git services",
            "id": "comment-15929055"
        },
        {
            "date": "2017-03-17T00:09:46+0000",
            "content": "Commit 65c163c3e3b9664c7309085b7d2271888bb6d163 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=65c163c ]\n\nSOLR-10286: fix precommit ",
            "author": "ASF subversion and git services",
            "id": "comment-15929215"
        },
        {
            "date": "2017-03-17T01:11:44+0000",
            "content": "Commit 4a55bc4e0f7a5b227f774fa3d7bbf4f1a4767eb1 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4a55bc4 ]\n\nSOLR-10286: fix precommit (unused imports) ",
            "author": "ASF subversion and git services",
            "id": "comment-15929282"
        },
        {
            "date": "2017-03-17T16:22:18+0000",
            "content": "This test just failed for me.\nSeems like it fails for jenkins sometimes also:\nhttps://jenkins.thetaphi.de/job/Lucene-Solr-6.x-Windows/785/testReport/junit.framework/TestSuite/org_apache_solr_search_LargeFieldTest/ ",
            "author": "Yonik Seeley",
            "id": "comment-15930243"
        },
        {
            "date": "2017-03-17T16:29:57+0000",
            "content": "Thanks for bringing this to my attention.  Hmm.... a quick try from my IDE on my Mac with this seed failed to reproduce.  I'll try from the CLI.  This failure on Jenkins was a Windows machine and that seems relevant.  Is your machine also Windows Yonik?  Judging from the stack trace, it appears the solution could be as simple as removing the '?' in the 2nd argument to initCore.... I'm investigating. ",
            "author": "David Smiley",
            "id": "comment-15930252"
        },
        {
            "date": "2017-03-17T16:41:36+0000",
            "content": "Is your machine also Windows Yonik?\n\nNope, it was Ubuntu 16.04\nI'll see if the logs for that failure are still around... ",
            "author": "Yonik Seeley",
            "id": "comment-15930270"
        },
        {
            "date": "2017-03-18T14:42:40+0000",
            "content": "Commit e7d9db9d6c4dccc158b52d53584ead93b7f55c38 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e7d9db9 ]\n\nSOLR-10286: fix test for Windows ",
            "author": "ASF subversion and git services",
            "id": "comment-15931236"
        },
        {
            "date": "2017-03-18T14:43:23+0000",
            "content": "Commit 94a3066dcda0a236a761c28930fbade62b55e561 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=94a3066 ]\n\nSOLR-10286: fix test for Windows\n\n(cherry picked from commit e7d9db9) ",
            "author": "ASF subversion and git services",
            "id": "comment-15931238"
        },
        {
            "date": "2017-04-21T15:39:59+0000",
            "content": "Marking closed towards v6.5.  If there are bugs/tests that show a problem then new issue(s) need to be filed. ",
            "author": "David Smiley",
            "id": "comment-15978940"
        }
    ]
}