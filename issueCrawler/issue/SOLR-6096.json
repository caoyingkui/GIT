{
    "id": "SOLR-6096",
    "title": "Support Update and Delete on nested documents",
    "details": {
        "affect_versions": "4.7.2",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When using nested or child document. Update and delete operation on the root document should also affect the nested documents, as no child can exist without its parent \n\nExample\n\nFirst Import\n<doc>\n  <field name=\"id\">1</field>\n  <field name=\"title\">Article with author</field>\n  <doc>\n    <field name=\"name\">Smith, John</field>\n    <field name=\"role\">author</field>\n  </doc>\n</doc>\n\n\n\nIf I change my mind and the author was not named John but Jane:\n\nChanged name of author of '1'\n<doc>\n  <field name=\"id\">1</field>\n  <field name=\"title\">Article with author</field>\n  <doc>\n    <field name=\"name\">Smith, Jane</field>\n    <field name=\"role\">author</field>\n  </doc>\n</doc>\n\n\n\nI would expect that John is not in the index anymore. Currently he is. There might also be the case that any subdocument is removed by an update:\n\nRemove author\n<doc>\n  <field name=\"id\">1</field>\n  <field name=\"title\">Article without author</field>\n</doc>\n\n\n\nThis should affect a delete on all nested documents, too. The same way all nested documents should be deleted if I delete the root document:\n\nDeletion of '1'\n<delete>\n  <id>1</id>\n  <!-- implying also\n    <query>_root_:1</query>\n   -->\n</delete>\n\n\n\nThis is currently possible to do all this stuff on client side by issuing additional request to delete document before every update. It would be more efficient if this could be handled on SOLR side. One would benefit on atomic update. The biggest plus shows when using \"delete-by-query\". \n\nDeletion of '1' by query\n<delete>\n  <query>title:*</query>\n  <!-- implying also\n    <query>_root_:1</query>\n   -->\n</delete>\n\n\n\n\n\nIn that case one would not have to first query all documents and issue deletes by those id and every document that are nested.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14003745",
            "date": "2014-05-20T18:00:41+0000",
            "content": "I would expect that John is not in the index anymore. Currently he is.\nGiving the test I suppose that update with children works fine if you specify  \n\n<add overwrite = \"true\"><doc>...</doc> </add>\n\n To make it work you need to have uniqueKey defined. \nhmm.. I just checked it manually myself, with the tiny data from the blog. It works fine as expected - overwrite = \"true\" is implied by default. My guess is you either dont have uniqueKey defined, or you forget to commit, after update. \n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14003767",
            "date": "2014-05-20T18:18:41+0000",
            "content": "There might also be the case that any subdocument is removed by an update:\nright. that's what I raised in SOLR-5211. \nThe problem is backward compatibility - that update wasn't treat as block update before, and now Solr can just imply that every update is the block update. However, we can introduce the special purposed /blockupdate/ handler with explicit block semantics for all case above .\nSo far it can be healed but in an ugly way eg. it need to support children nuke update eg:\n\n<doc>\n  <field name=\"id\">1</field>\n  <field name=\"title\">Article without author</field>\n  <nodocs/>\n</doc>\n<doc>\n  <field name=\"id\">1</field>\n  <field name=\"title\">Article without author</field>\n  <docs></docs>\n</doc>\n<doc childfree=\"true\">\n  <field name=\"id\">1</field>\n  <field name=\"title\">Article without author</field>\n</doc>\n\n \npick your favorite one! and more than that SolrJ's SolrInputDocument amendments are expected even more weird.    "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14003804",
            "date": "2014-05-20T18:39:47+0000",
            "content": "please get me right, but I don't feel like sending <query>_root_:1</query> is a much problem at comparison to <id>1</id>\n\n<delete><query>title:*</query></delete> can be fixed by nuking children right before removing parents explicitly\n\n<delete>\n<query>{!child of=type_s:parent}title:*</query>\n<query>title:*</query>\n</delete>\n\n\n\nI share your concern that it not so cute as it could be. \n\nI've got one thought. what if you configure that darn _root_ field as a\u0442 uniqueKey? if it will work fine in all cases, but you wouldn't happy to specify such odd uniqueKey, we can create special DirectUpdateHandler2 which can use uniqueKey instead of _root_. WDYT? "
        },
        {
            "author": "Thomas Scheffler",
            "id": "comment-14015235",
            "date": "2014-06-02T07:55:34+0000",
            "content": "I would prefer a solrconfig.xml that all updates should be handled as block updates. Currently I don't get it why that's not the default. Are there performance issues that come with this? It would even help be to turn on block updates on client side via SOLRJ. But as I saw in the code, block updates depend on nested documents. There are no nested documents on delete and may not be on updates. So this heuristic to guess if it is a block update is definitely no good enough.  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14015291",
            "date": "2014-06-02T09:54:47+0000",
            "content": "Currently I don't get it why that's not the default.\n\n1. because it might be a backward incompatible behavior.\n2. it's not really possible because right now Solr is unaware about parents filter, and obtain it on every request.\n\nto support what you need we need to add an ability to specify the schema of nesting docs, somewhere in schema.xml. "
        },
        {
            "author": "Ali Nzm",
            "id": "comment-14161800",
            "date": "2014-10-07T11:48:48+0000",
            "content": "I think this hypothesis is not right for documents unless you think about that in a human way! One can change some field of parent document without affecting the parent child relationship! If you change the document main fields probably it is true both for other fields i dont think so. For example think that you are going to index web pages in Solr. Suppose you consider web page comments as a child of the corresponding page. In this situation some secondary parts of page might change during time but comments are still valid. In this condition the main parts of page such as title, description and contents are same but some secondary parts might change that do not affect the validity of comments!\nIn my opinion there should be two different types of field. One might be called primary can break the parent child relationship and the other one might called secondary does not affect parent child relationship.  "
        },
        {
            "author": "jefferyyuan",
            "id": "comment-16009519",
            "date": "2017-05-13T22:02:28+0000",
            "content": "Mikhail Khludnev\nHow can we specify childfree=true when use solrJ?\n\n\tSeems there is no childfree in solr's code at all.\nhttps://github.com/apache/lucene-solr/search?utf8=%E2%9C%93&q=childfree&type=\n\n\n\nHow can we define the special purposed /blockupdate/ handler with explicit block semantics for all case above ?\n\nThanks a lot. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-16009630",
            "date": "2017-05-14T07:34:23+0000",
            "content": "I don't think we will have it ever. Mixing parents and standalones should be considered in SOLR-10144. So, far the workaround is to nest empty child w/o fields or with id only field.  "
        },
        {
            "author": "Lorenzo Speranzoni",
            "id": "comment-16510205",
            "date": "2018-06-12T21:04:36+0000",
            "content": "I'm using HBASE-INDEXER and our use case requires us to generate a parent + children set of documents per HBASE row. When it comes to deleting a record in HBASE the only option is to delete by ID which results in the deletion of the parent document only.\n\nI was wondering if there's a way to \"trigger\" the deletion of the orphaned children via configuration or with a specific delete by query\u00a0\"delete all orphaned children\" (that I can't figure out) that could be scheduled in a cron script?\n\nOr do you have see any better strategy to keep the index clean?\n\nThank you very much in advance,\n\nLorenzo "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-16510226",
            "date": "2018-06-12T21:23:51+0000",
            "content": "Lorenzo Speranzoni, I hope SOLR-5211 makes an improvement for this case. \nif in delete by ID you mean deleting by <uniqueKey> field I can suggest a deleteByQuery(_root_:ID), however it might have performance implication.  "
        },
        {
            "author": "Lorenzo Speranzoni",
            "id": "comment-16510236",
            "date": "2018-06-12T21:34:31+0000",
            "content": "Many thanks for your fast reply Mikhail Khludnev .\u00a0\n\nYes, I saw SOLR-5211 ... and deleteByQuery(root:ID) was indeed my candidate solution but unfortunately hbase-indexer doesn't let you create and submit such a statement.\n\nI would need to trigger it from SOLR side as soon as you the parent is cancelled or something like that... don't think postCommit is ideal for that?\n\nThanks again. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-16533449",
            "date": "2018-07-05T09:39:02+0000",
            "content": "No. Operations are handled in-order: late deletion cleans new docs as well. You may think about UpdateRequestProcessors. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16603072",
            "date": "2018-09-04T13:48:42+0000",
            "content": "I just want to point out SOLR-12638 duplicating this issue but using metadata in the schema/documents to implement this cleanly. "
        }
    ]
}