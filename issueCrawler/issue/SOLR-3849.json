{
    "id": "SOLR-3849",
    "title": "ScriptEngineTest failure RE system properties and ThreadLeakError",
    "details": {
        "affect_versions": "6.0",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "100% reproducible for me:\nsolr$ ant test  -Dtestcase=ScriptEngineTest\n\n\n[junit4:junit4] <JUnit4> says hi! Master seed: E62CC5FBAC2CEFA4\n[junit4:junit4] Executing 1 suite with 1 JVM.\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.solr.update.processor.ScriptEngineTest\n[junit4:junit4] OK      0.17s | ScriptEngineTest.testPut\n[junit4:junit4] OK      0.02s | ScriptEngineTest.testEvalReader\n[junit4:junit4] IGNOR/A 0.10s | ScriptEngineTest.testJRuby\n[junit4:junit4]    > Assumption #1: got: <[null]>, expected: each not null\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testEvalText\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testGetEngineByExtension\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testGetEngineByName\n[junit4:junit4]   2> -9 T9 ccr.ThreadLeakControl.checkThreadLeaks WARNING Will linger awaiting termination of 2 leaked thread(s).\n[junit4:junit4]   2> 20163 T9 ccr.ThreadLeakControl.checkThreadLeaks SEVERE 1 thread leaked from SUITE scope at org.apache.solr.update.processor.ScriptEngineTest: \n[junit4:junit4]   2> \t   1) Thread[id=11, name=AppKit Thread, state=RUNNABLE, group=main]\n[junit4:junit4]   2> \t        at (empty stack)\n[junit4:junit4]   2> 20164 T9 ccr.ThreadLeakControl.tryToInterruptAll Starting to interrupt leaked threads:\n[junit4:junit4]   2> \t   1) Thread[id=11, name=AppKit Thread, state=RUNNABLE, group=main]\n[junit4:junit4]   2> 23172 T9 ccr.ThreadLeakControl.tryToInterruptAll SEVERE There are still zombie threads that couldn't be terminated:\n[junit4:junit4]   2> \t   1) Thread[id=11, name=AppKit Thread, state=RUNNABLE, group=main]\n[junit4:junit4]   2> \t        at (empty stack)\n[junit4:junit4]   2> NOTE: test params are: codec=SimpleText, sim=RandomSimilarityProvider(queryNorm=true,coord=yes): {}, locale=es_PR, timezone=America/Edmonton\n[junit4:junit4]   2> NOTE: Mac OS X 10.8.1 x86_64/Oracle Corporation 1.7.0_07 (64-bit)/cpus=4,threads=1,free=65764312,total=85065728\n[junit4:junit4]   2> NOTE: All tests run in this JVM: [ScriptEngineTest]\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=ScriptEngineTest -Dtests.seed=E62CC5FBAC2CEFA4 -Dtests.slow=true -Dtests.locale=es_PR -Dtests.timezone=America/Edmonton -Dtests.file.encoding=UTF-8\n[junit4:junit4] ERROR   0.00s | ScriptEngineTest (suite) <<<\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: System properties invariant violated.\n[junit4:junit4]    > New keys:\n[junit4:junit4]    >   sun.awt.enableExtraMouseButtons=true\n[junit4:junit4]    >   sun.font.fontmanager=sun.font.CFontManager\n[junit4:junit4]    > \n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:66)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    > \tat java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]    > Throwable #2: com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from SUITE scope at org.apache.solr.update.processor.ScriptEngineTest: \n[junit4:junit4]    >    1) Thread[id=11, name=AppKit Thread, state=RUNNABLE, group=main]\n[junit4:junit4]    >         at (empty stack)\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([E62CC5FBAC2CEFA4]:0)\n[junit4:junit4]    > Throwable #3: com.carrotsearch.randomizedtesting.ThreadLeakError: There are still zombie threads that couldn't be terminated:\n[junit4:junit4]    >    1) Thread[id=11, name=AppKit Thread, state=RUNNABLE, group=main]\n[junit4:junit4]    >         at (empty stack)\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([E62CC5FBAC2CEFA4]:0)\n[junit4:junit4] Completed in 24.29s, 6 tests, 1 failure, 2 errors, 1 skipped <<< FAILURES!\n[junit4:junit4] \n[junit4:junit4] JVM J0:     1.38 ..    26.54 =    25.16s\n[junit4:junit4] Execution time total: 26 seconds\n[junit4:junit4] Tests summary: 1 suite, 6 tests, 3 suite-level errors, 1 ignored (1 assumption)",
    "attachments": {
        "SOLR-3849.patch": "https://issues.apache.org/jira/secure/attachment/12545533/SOLR-3849.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Dawid Weiss",
            "id": "comment-13457651",
            "date": "2012-09-18T07:02:14+0000",
            "content": "I'll take over, this seems like an unknown system thread (AppKit Thread) probably forked by AWT. Why is AWT forked with this test, I'll have to take a look. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457665",
            "date": "2012-09-18T07:26:54+0000",
            "content": "To fix this we should maybe use \"-Djava.awt.headless=true\" as sysprop in our test runner. This causes AWT to be disabled and should always be used on servers.\n\nThe cause of this issue maybe related by a scripting engine that is on your classpath in addition to JavaScirpt? Maybe introduced by Apache ANT/lib folder? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457668",
            "date": "2012-09-18T07:30:56+0000",
            "content": "Simple patch to enable headless mode (this makes sense for tests as we dont need window toolkit).\n\nDoes this solve the issue? I have no MacOSX with Cocoa...\n\nSee http://docs.oracle.com/javase/1.4.2/docs/guide/awt/AWTChanges.html#headless for more infor about headless "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13457676",
            "date": "2012-09-18T07:54:44+0000",
            "content": "David can you see if Uwe's patch solves the problem? I agree this is probably AWT starting up for some reason. We can ignore those properties (and threads) but it's probably better that we caught them \u2013 they shouldn't be running or starting up. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457680",
            "date": "2012-09-18T08:02:35+0000",
            "content": "Setting this proerty is a real-world use-case: -Djava.awt.headless=true is e.g. set by the startup scripts of Tomcat or Jetty, as servlet containers are software to be run on a server and nothing ever should start up AWT there. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13457761",
            "date": "2012-09-18T12:01:18+0000",
            "content": "There used to be at least some solr contrib test that would fire up AWT on my mac.\n\nI think we should set headless too. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457765",
            "date": "2012-09-18T12:17:17+0000",
            "content": "+1, we should do this in all cases (unrelated to this issue) "
        },
        {
            "author": "David Smiley",
            "id": "comment-13457869",
            "date": "2012-09-18T14:57:09+0000",
            "content": "Patch worked! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457877",
            "date": "2012-09-18T15:06:23+0000",
            "content": "OK, I commit that one! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457881",
            "date": "2012-09-18T15:10:36+0000",
            "content": "Committed trunk revision: 1387212\nCommitted 4.x revision: 1387213\n\nThanks for trying out! "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13458010",
            "date": "2012-09-18T18:08:07+0000",
            "content": "Good to see these assertions are actually useful for spotting things like this. Thanks for testing, guys. "
        },
        {
            "author": "Aaron Daubman",
            "id": "comment-13481696",
            "date": "2012-10-22T19:28:55+0000",
            "content": "This appears to still be affecting me in 4_0_0 (1400746)\nRunning under OS X 10.8.2 with $ java -version              \njava version \"1.7.0_09\"\nJava(TM) SE Runtime Environment (build 1.7.0_09-b05)\nJava HotSpot(TM) 64-Bit Server VM (build 23.5-b02, mixed mode)\n\n--snip--\n$ ant test -Dtestcase=ScriptEngineTest\n...\ncommon.test:\n[junit4:junit4] <JUnit4> says \u0645\u0631\u062d\u0628\u0627! Master seed: 4050036B906720D2\n[junit4:junit4] Executing 1 suite with 1 JVM.\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.solr.update.processor.ScriptEngineTest\n[junit4:junit4] IGNOR/A 0.10s | ScriptEngineTest.testJRuby\n[junit4:junit4]    > Assumption #1: got: <[null]>, expected: each not null\n[junit4:junit4] OK      0.11s | ScriptEngineTest.testPut\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testEvalReader\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testEvalText\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testGetEngineByExtension\n[junit4:junit4] OK      0.01s | ScriptEngineTest.testGetEngineByName\n[junit4:junit4]   2> NOTE: test params are: codec=Lucene3x, sim=RandomSimilarityProvider(queryNorm=true,coord=crazy): {}, locale=es_DO, timezone=America/Godthab\n[junit4:junit4]   2> NOTE: Mac OS X 10.8.2 x86_64/Oracle Corporation 1.7.0_09 (64-bit)/cpus=8,threads=1,free=2966056,total=12320768\n[junit4:junit4]   2> NOTE: All tests run in this JVM: [ScriptEngineTest]\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=ScriptEngineTest -Dtests.seed=4050036B906720D2 -Dtests.slow=true -Dtests.locale=es_DO -Dtests.timezone=America/Godthab -Dtests.file.encoding=US-ASCII\n[junit4:junit4] ERROR   0.00s | ScriptEngineTest (suite) <<<\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: System properties invariant violated.\n[junit4:junit4]    > New keys:\n[junit4:junit4]    >   sun.awt.enableExtraMouseButtons=true\n[junit4:junit4]    >   sun.font.fontmanager=sun.font.CFontManager\n[junit4:junit4]    > \n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([4050036B906720D2]:0)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:66)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    > \tat java.lang.Thread.run(Thread.java:722)\n[junit4:junit4] Completed in 1.14s, 6 tests, 1 failure, 1 skipped <<< FAILURES!\n[junit4:junit4] \n[junit4:junit4] \n[junit4:junit4] Tests with failures:\n[junit4:junit4]   - org.apache.solr.update.processor.ScriptEngineTest (suite)\n[junit4:junit4] \n[junit4:junit4] \n[junit4:junit4] JVM J0:     0.92 ..     2.86 =     1.94s\n[junit4:junit4] Execution time total: 2.96 sec.\n[junit4:junit4] Tests summary: 1 suite, 6 tests, 1 suite-level error, 1 ignored (1 assumption)\n\nBUILD FAILED\n/Users/adaubman/Projects/lucene_solr_4_0_0/build.xml:40: The following error occurred while executing this line:\n/Users/adaubman/Projects/lucene_solr_4_0_0/solr/build.xml:179: The following error occurred while executing this line:\n/Users/adaubman/Projects/lucene_solr_4_0_0/lucene/module-build.xml:63: The following error occurred while executing this line:\n/Users/adaubman/Projects/lucene_solr_4_0_0/lucene/common-build.xml:1142: The following error occurred while executing this line:\n/Users/adaubman/Projects/lucene_solr_4_0_0/lucene/common-build.xml:815: There were test failures: 1 suite, 6 tests, 1 suite-level error, 1 ignored (1 assumption)\n\nTotal time: 24 seconds\n--snip-- "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13481716",
            "date": "2012-10-22T19:44:23+0000",
            "content": "I see the exact same failure on OS X 10.8.2 w/ Java 1.7.0_07.  However, this test succeeds w/ Java 1.6.0_37. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13481721",
            "date": "2012-10-22T19:48:24+0000",
            "content": "Interesting. We could ignore those properties but they indicate that an AWT daemon was for some reason startup up and messed up system properties. Uwe may want to kill it rather than just ignoring these props. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13481722",
            "date": "2012-10-22T19:49:01+0000",
            "content": "Do anybody of you maybe have a custom scriptng engine in classpath? This could cause some bootup of some non-JDK script environment bootup that modifies those system variables. Maybe Apple/Macintosh has some CrazyUselessAsAlwaysM\u00e4cintrashEngine shipped by default. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13481727",
            "date": "2012-10-22T19:51:55+0000",
            "content": "The way to check is to substitute system properties with a custom implementation of Properties, override setProperty and dump a stack trace when these are actually set to see who the offender is. I'll take a look unless somebody beats me to it. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13481741",
            "date": "2012-10-22T20:08:15+0000",
            "content": "The strange thing about this issue is still the fact that we have:\n\n<sysproperty key=\"java.awt.headless\" value=\"true\"/>\n\n\nWhy is AWT booted up at all? This seems to be some OS-X Java bug. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13481744",
            "date": "2012-10-22T20:12:58+0000",
            "content": "Do anybody of you maybe have a custom scriptng engine in classpath?\n\nMy CLASSPATH env. var. is undefined.\n\nMaybe Apple/Macintosh has some CrazyUselessAsAlwaysM\u00e4cintrashEngine shipped by default.\n\nOracle produces 1.7 JDK for OS X, and the 1.6 JDK comes from Apple. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13481745",
            "date": "2012-10-22T20:15:20+0000",
            "content": "when I run 'ant check-svn-working-copy' (even on 1.6) on my apple it boots up AWT as well.\n\nI thought we were passing headless to all this stuff now? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13481762",
            "date": "2012-10-22T20:40:55+0000",
            "content": "Digging around the source code of OpenJDK i found the following horrible class:\nhttp://cr.openjdk.java.net/~michaelm/7113349/7u4/1/jdk/new/raw_files/new/src/macosx/classes/apple/applescript/AppleScriptEngineFactory.java\n\nIn fact this one is the factory class for (as I said before) Apple's custom \u00c4ppleScript engine. If you look at the static ctor, you know what's happening: As soon as the scripting engine manager is loading the factory class via SPI from rt.jar, this code is executed and boots up AWT. The question is, why \"java.awt.headless=true\" does not prevent this, but I assume the \"if\" statement for that is missing. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13481766",
            "date": "2012-10-22T20:45:04+0000",
            "content": "We should file a bug at Oracle telling them that this scripting engine does not respect \"headless\" setting. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13481774",
            "date": "2012-10-22T20:50:36+0000",
            "content": "Thanks for digging, Uwe. So these property invariants are actually useful  Since this breaks the tests we should add these two to the ignore set (at least until Oracle fixes this?). LuceneTestCase:\n\n\n  /**\n   * These property keys will be ignored in verification of altered properties.\n   * @see SystemPropertiesInvariantRule\n   * @see #ruleChain\n   * @see #classRules\n   */\n  private static final String [] IGNORED_INVARIANT_PROPERTIES = {\n    \"user.timezone\", \"java.rmi.server.randomIDs\"\n  };\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13481783",
            "date": "2012-10-22T20:53:26+0000",
            "content": "Can we ignore those only for this test? "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13481786",
            "date": "2012-10-22T20:57:01+0000",
            "content": "I think you'd have to redefine the entire rule chain by shadowing the field. It's JUnit, not me \u2013 sorry. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13506860",
            "date": "2012-11-29T22:06:25+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1415402\n\nSOLR-3849: Maven configuration += -Djava.awt.headless=true; also, upgrade maven-surefire-plugin to 2.12.4\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13506878",
            "date": "2012-11-29T22:18:18+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1415410\n\nSOLR-3849: Maven configuration += -Djava.awt.headless=true; also, upgrade maven-surefire-plugin to 2.12.4 (merge trunk r1415402)\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610484",
            "date": "2013-03-22T16:12:50+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1415410\n\nSOLR-3849: Maven configuration += -Djava.awt.headless=true; also, upgrade maven-surefire-plugin to 2.12.4 (merge trunk r1415402) "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610812",
            "date": "2013-03-22T16:36:56+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1387213\n\nMerged revision(s) 1387212 from lucene/dev/trunk:\nSOLR-3849: Pass \"-Djava.awt.headless=true\" to test runner to prevent enabling AWT, spawning threads and modifying sysprops. Tests need no GUI and this also mimics the behaviour of the default startup scripts of Tomcat and Jetty. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654062",
            "date": "2013-05-10T10:33:54+0000",
            "content": "Closed after release. "
        }
    ]
}