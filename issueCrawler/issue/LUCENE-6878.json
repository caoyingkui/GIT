{
    "id": "LUCENE-6878",
    "title": "TopDocs.merge should use updateTop instead of pop / add",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Trivial",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "The function TopDocs.merge uses PriorityQueue in a pattern: pop, update value (ref.hitIndex++), add. JavaDocs for PriorityQueue.updateTop say that using this function instead should be at least twice as fast.",
    "attachments": {
        "LUCENE-6878.patch": "https://issues.apache.org/jira/secure/attachment/12770175/LUCENE-6878.patch",
        "speedtest.tar.gz": "https://issues.apache.org/jira/secure/attachment/12770450/speedtest.tar.gz"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14987082",
            "author": "Michael McCandless",
            "date": "2015-11-03T10:59:23+0000",
            "content": "+1\n\nI know we are discussing how to benchmark this change but I don't think that's needed before committing ... this is a good change ... it's only needed to satisfy curiosity  "
        },
        {
            "id": "comment-14987149",
            "author": "Toke Eskildsen",
            "date": "2015-11-03T11:53:24+0000",
            "content": "In light of my own recent experiments with PriorityQueue (SOLR-6828), I'll note that microbenchmarks are exceedingly simple to screw up, especially in Java. I ended up doing comparative testing with pre-generated test inputs, multiple runs, discarding the first runs, alternating between the implementation multiple times and removing outliers. And the results are still not very stable. "
        },
        {
            "id": "comment-14987328",
            "author": "ASF subversion and git services",
            "date": "2015-11-03T14:18:21+0000",
            "content": "Commit 1712298 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1712298 ]\n\nLUCENE-6878: Speed up TopDocs.merge. "
        },
        {
            "id": "comment-14987350",
            "author": "ASF subversion and git services",
            "date": "2015-11-03T14:30:15+0000",
            "content": "Commit 1712299 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1712299 ]\n\nLUCENE-6878: Speed up TopDocs.merge. "
        },
        {
            "id": "comment-14987368",
            "author": "Adrien Grand",
            "date": "2015-11-03T14:35:01+0000",
            "content": "I know we are discussing how to benchmark this change but I don't think that's needed before committing\n\nAgreed, I just committed the change.\n\nDaniel: I am marking the issue resolved since it was committed, but feel free to comment on it about your findings about potential performance improvements. "
        },
        {
            "id": "comment-14988471",
            "author": "Daniel Jelinski",
            "date": "2015-11-03T23:32:55+0000",
            "content": "I merged 64 ScoreDoc lists, 100k docs each, and took top 100k results, in 3 different score distributions. For time calculations, each test was repeated 60 times, and I averaged the results of 10 subsequent runs, discarding any outliers. For the number of lessThan calls in random case, I run the test 3 times and took an average. The number of lessThan calls for case 1 and 2 is constant.\nI tested score lists generated using 3 different methods.\n1) All scores equal to 1. This is the case where the patch made a greatest difference, mostly because of tie breaks in lessThan methods. Results:\nWithout the patch - 2.66 msec per merge call, 1600057 calls to lessThan\nWith the patch - 0.32 msec per merge call, 200071 calls to lessThan. \nOverall, ~88% savings on time and lessThan calls\n2) Each list contains scores 100000,99999,....,1\nWithout the patch - 3.5 msec per merge call, 1100063 calls to lessThan\nWith the patch - 2.6 msec per merge call, 1005390 calls to lessThan\nOverall, ~25% savings on time, 9% savings on lessThan calls\n3) Each list starts with doc with score 100000, score of other docs is calculated as score of previous doc minus Math.random()\nWithout the patch - 3.5 msec per merge call, ~1156500 calls to lessThan\nWith the patch, 2.7 msec per merge call, ~960500 calls to lessThan\nOverall, ~23% savings on time, 17% savings on lessThan calls.\n\nIn the random case the gain is much less than the advertised double speed, but it's still a net improvement.\nI attached the code I used to measure the speed, in case anyone is interested. Fair warning, it's not pretty. "
        },
        {
            "id": "comment-14989501",
            "author": "Adrien Grand",
            "date": "2015-11-04T13:01:03+0000",
            "content": "These results make sense to me given the change. Thank you Daniel! "
        }
    ]
}