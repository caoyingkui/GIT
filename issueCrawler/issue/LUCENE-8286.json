{
    "id": "LUCENE-8286",
    "title": "UnifiedHighlighter should support the new Weight.matches API for better match accuracy",
    "details": {
        "components": [
            "modules/highlighter"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "The new Weight.matches() API should allow the UnifiedHighlighter to more accurately highlight some BooleanQuery patterns correctly \u2013 see LUCENE-7903.\n\nIn addition, this API should make the job of highlighting easier, reducing the LOC and related complexities, especially the UH's PhraseHelper.  Note: reducing/removing PhraseHelper is not a near-term goal since Weight.matches is experimental and incomplete, and perhaps we'll discover some gaps in flexibility/functionality.\n\nThis issue should introduce a new UnifiedHighlighter.HighlightFlag enum option for this method of highlighting.   Perhaps call it WEIGHT_MATCHES?  Longer term it could go away and it'll be implied if you specify enum values for PHRASES & MULTI_TERM_QUERY?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16459899",
            "author": "David Smiley",
            "content": "Per chance do you have any WIP code for this or do any concerns come to your mind Alan Woodward?\nPerhaps I'll get around to this issue in a couple weeks. ",
            "date": "2018-05-01T17:36:32+0000"
        },
        {
            "id": "comment-16461105",
            "author": "Jim Ferenczi",
            "content": "I also think that it would greatly simplify the code (especially PhraseHelper  ) but matches require some changes to allow this replacement. First of all there is no way to retrieve the term/query in the matches iterator so it's not possible to count the number of occurrences of a specific query or the total frequency in the document. These informations are needed to compute the score of a passage so we need to add something in matches.\nThe matches iterator can return duplicates (if the same term is present in multiple clauses) and will soon be able to return matches from phrases (rather than individual terms), this means that we'll need to detect overlapping intervals when the passages are built. I see this as an improvement since it would allow to highlight entire phrases but for spans we'll need an option to split matches interval since a span near (or any other span query) can have big gaps so it would not make sense to highlight the entire match in a single highlight.\nOne thing we could do to simplify the transition is to remove OffsetsEnum entirely and replace it with the MatchesIterator, appart from the missing bits I described above this should be easy to do. ",
            "date": "2018-05-02T14:36:35+0000"
        },
        {
            "id": "comment-16461226",
            "author": "Alan Woodward",
            "content": "There's an API mismatch in how offsets are retrieved, per-field in the UnifiedHighlighter and per-leafreader in the Matches API, which means that (for example) we can't easily use term vectors for a single field with Matches.  So that will need to be resolved somehow. ",
            "date": "2018-05-02T16:01:05+0000"
        },
        {
            "id": "comment-16461646",
            "author": "David Smiley",
            "content": "there is no way to retrieve the term/query in the matches iterator\nOh I see \u2013\u00a0this was removed in\u00a0LUCENE-8270! \u00a0I was loosely following the\u00a0related issues but overlooked that. \u00a0\u00a0 Alan Woodward\u00a0the statement\u00a0in the description \"we don't have a clear use-case for this yet\"\u00a0surprises me; it's clearly\u00a0highlighting; no? \u00a0Despite this blocker, maybe I could put together a patch here, one that has poor scoring because we don't know the term, and that\u00a0will help identify how a matchesIterator.term() could be used?\nOne thing we could do to simplify the transition is to remove OffsetsEnum entirely and replace it with the MatchesIterator, appart from the missing bits I described above this should be easy to do.\nOr make OE extend MatchesIterator? \u00a0It has things we need \u2013 term(), freq(). \u00a0MI has things we don't need \u2013 position spans, but these can be ignored.\nwe can't easily use term vectors for a single field with Matches.\nInteresting; I'll take a closer look. ",
            "date": "2018-05-02T21:34:11+0000"
        },
        {
            "id": "comment-16462361",
            "author": "Adrien Grand",
            "content": "MI has things we don't need \u2013 position spans\n\nI don't know the unified highlighter well, but I would expect this information to be important to score passages? For instance if you run a sloppy phrase query, matches that have a smaller width should get a higher weight, shouldn't they? ",
            "date": "2018-05-03T12:33:34+0000"
        },
        {
            "id": "comment-16462466",
            "author": "David Smiley",
            "content": "The \"span\" width could be used for passage\u00a0relevancy, and perhaps ought to be \u2013 sure. \u00a0I just meant to convey that today the UH doesn't have or use this info.\n\nBTW I did a quick hack integration last night of Weight.getMatches into the UH and ran some tests. \u00a0I had no issue with term vectors. \u00a0 The fieldMatcher (aka requireFieldMatch option) will require some work. \u00a0And if the query\u00a0references non-highlighted\u00a0fields in a way that will constraint the results (i.e. MUST otherfield:foo), for the Analysis offset strategy, we'll need to combine an aggregate index view of\u00a0analysis with\u00a0the underlying real index\u00a0for other fields\u00a0because the\u00a0MemoryIndex alone only has one field \u2013 the field being highlighted. ",
            "date": "2018-05-03T13:49:41+0000"
        },
        {
            "id": "comment-16507691",
            "author": "David Smiley",
            "content": "The first patch here is my working WIP.  Everything compiles and the results are generally reasonable, notwithstanding some known issues already pointed out from my previous comment.  I enabled it by default and then looked to see what tests broke and why:\n\n\n\tTestUnifiedHighlighter: all failures are for the testFieldMatcher methods since the fieldMatcher mechanism doesn't yet work with this (mentioned in prev comment)\n\tTestUnifiedHighlighterMTQ.testWhichMTQMatched: because MatchesIterator doesn't yet expose which term matched.\n\tTestUnifiedHighlighterRanking: failed because the scoring isn't the same\n\tTestUnifiedHighlighterTermVec.testFetchTermVecsOncePerDoc: randomly fails because sometimes the underlying fields don't have a real index.  The UH highlights one field at a time and that field being highlighted will be made to appear as indexed if it wasn't already (e.g. re-analysis into MemoryIndex or TV LeafReader wrapper) but no other fields will be.  I think once a solution to fieldMatcher works, it may solve the situation here.\n\tTestUnifiedHighlighterStrictPhrases: i haven't reviewed each failure yet but it all seems to be due to the distinction between highlighting words in phrases by themselves or highlighting the phrase span.  All the assertions assume words by themselves.\n\n\n\nWhat's cool is that this wasn't a big change, and it can be intermixed with SpanQueries.  I need to look at the scoring options more \u2013 loss of freq() is a shame. ",
            "date": "2018-06-11T05:19:41+0000"
        },
        {
            "id": "comment-16521825",
            "author": "David Smiley",
            "content": "I pushed the patch to GitHub as a linked PR. \u00a0The only change is reverting the choice of having OffsetsEnum implement MatchesIterator as it turned out to be\u00a0rather pointless. ",
            "date": "2018-06-25T03:53:25+0000"
        },
        {
            "id": "comment-16540745",
            "author": "David Smiley",
            "content": "I updated the PR significantly.  It addresses requireFieldMatch/fieldMatcher and some other cases.  Alan Woodward you might find it worthwhile to see the changes as some are applicable to the highlighter you're working on.  See OverlaySingleDocTermsLeafReader in particular.  The different aspects of the changes were reasonably separated out to separate commits.  There are a couple nocommits.  There are a few failing tests but before I can make substantive progress at this point, it's dependent on getting access to the matching terms for passage scoring. ",
            "date": "2018-07-11T22:15:18+0000"
        },
        {
            "id": "comment-16578802",
            "author": "David Smiley",
            "content": "Made substantial progress to the PR:\n\nLUCENE-8286 UH: Use MI.getSubMatches().\u00a0 Removed PhraseHelper changes; not necessary anymore.\nUpdated based on MI improvements in master.\nWith subMatches, we have better fidelity on span queries.\nAnd since MI can handle span queries now, no need to touch PhraseHelper.\n* added to UHComponents: query, and highlightFlags\n* updated tests to handle with/without WEIGHT_MATCHES\n* TestUnifiedHighlighterStrictPhrases uses more randomization.\n\u00a0 Removed brittle score calculation dependence.\n* Test Passage matches data is in order\nTODO: OE freq & term()\n\n\nIt was nice to see that UH's PhraseHelper can be circumvented now.  Handling mi.getSubMatches proved to be difficult, but I ultimately got it working.  See https://github.com/dsmiley/lucene-solr/blob/LUCENE-8286/lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/OffsetsEnum.java#L168\n\nNext up is handling OffsetsEnum.getTerm().  I could change the API so that getTerm() returns getQuery() and consequently update Passage & PassageScorer.  Callers of getTerm() were all internal or considered experimental any way (definitely not in common use) so I think it could change in a minor release.  I hope multi-term query types will be retained as such but I fear MatchesIterator expands before retaining the original, and thus the results here won't be as ideal but adequate.\n\nThen, OffsetsEnum.freq().  This one is hard.  We could make \"-1\" an unsupported value.  Then, a new PassageScorer design that is created per highlighted field value could be given access to the IndexReader in org.apache.lucene.search.uhighlight.FieldHighlighter#highlightOffsetsEnums.  When it sees -1 at scoring time, it could calculate the in-doc freq and cache it.  Or similarly... maybe we don't care that much about the in-doc freq; it may be expensive to calculate any way.  Maybe we want the associated Query's score for this document (which will consider global stats like IDF), but again will need access to the IndexReader.  It'd be nice if boosts wrapped around the query could be considered but it's just not there (also true without MI mode). ",
            "date": "2018-08-13T19:08:16+0000"
        },
        {
            "id": "comment-16578835",
            "author": "David Smiley",
            "content": "Actually before continuing with any of that, I think the PR is almost good enough for this new mode.  It's not on by default so you have to opt-in.  If you do opt-in, you get\n\n\tBetter matching accuracy, particularly with nested conjunction/disjunction (solving LUCENE-7903).\n\tPhrase queries will have highlights spanning more naturally instead of per-term.  Cosmetic but nice.  SpanQuery nested stuff is as-before in this regard, though.\n\tPassage scoring won't be as good due to a constant freq().  Some users won't care; arguably diversity of terms is more important, particularly in a snippet.  Note that consideration of freq() can be dialed down to nothing by setting the \"k1\" BM25 param of DefaultPassageScorer to 0, and this is in fact tested as having such an effect.\n\n\n\nThe only thing needed that isn't too disruptive is implementing OffsetsEnum.getTerm().  The current nocommit of an empty term is bad because it's also used in DefaultPassageScorer to calculate per-term stats.  So this ought to return the actual term, although it'd be fine if it was actually a query.toString() in truth.  So in the interest of getting an experimental feature out the door, I think I'll do the latter.  Only someone customizing the scorer or formatter in a way to depend on the nature of the term would be impacted by that. ",
            "date": "2018-08-13T19:50:54+0000"
        },
        {
            "id": "comment-16593692",
            "author": "David Smiley",
            "content": "The PR is ready to go I think.  I'll commit in a couple days.\n\nOE.getTerm is implemented consistent with how the others work.\n\nI also tracked down a curious observation in one of the tests ( not for MatchesIterator) that revealed that sloppy phrase queries sometimes won't highlight faithfully to the original because WeightedSpanTermExtractor's conversion of a PhraseQuery to a SpanQuery will set inOrder=false when there is slop.  This just goes to show that MatchesIterator based highlighting is more accurate in multiple ways.\n\nSuggested CHANGES.txt:\nThe UnifiedHighlighter now has a new experimental HighlightFlag.WEIGHT_MATCHES flag that causes it to use Lucene's new Weight.getMatches API.  This will more accurately and strictly highlight, solving issues like LUCENE-7903.  Phrases will be formatted with a single span per occurrence instead of its words separately.  Passage relevancy might be degraded, however, since \"freq\" isn't calculated.  The flag is disabled by default.  There were some API changes that are public but internal to the UH, including a new UHComponents class. ",
            "date": "2018-08-27T13:54:46+0000"
        },
        {
            "id": "comment-16597019",
            "author": "ASF subversion and git services",
            "content": "Commit b19ae942f154924b9108c4e0409865128f2a07d4 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b19ae94 ]\n\nLUCENE-8286: UnifiedHighlighter: new HighlightFlag.WEIGHT_MATCHES for MatchesIterator API.\nOther API changes: New UHComponents, and FieldOffsetStrategy takes a LeafReader not IndexReader now.\nCloses #409 ",
            "date": "2018-08-30T03:30:16+0000"
        },
        {
            "id": "comment-16597034",
            "author": "ASF subversion and git services",
            "content": "Commit bf7d1078e4ef6c99abaf5c76eccf56ed0f09f553 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bf7d107 ]\n\nLUCENE-8286: UnifiedHighlighter: new HighlightFlag.WEIGHT_MATCHES for MatchesIterator API.\nOther API changes: New UHComponents, and FieldOffsetStrategy takes a LeafReader not IndexReader now.\nCloses #409\n\n(cherry picked from commit b19ae942f154924b9108c4e0409865128f2a07d4) ",
            "date": "2018-08-30T03:58:37+0000"
        }
    ]
}