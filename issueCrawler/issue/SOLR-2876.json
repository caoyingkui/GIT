{
    "id": "SOLR-2876",
    "title": "Precedence operator in conditionals with ternary operator needs to be examined.",
    "details": {
        "affect_versions": "3.5,                                            4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "This is an offshoot of 2829 where the root of the bug was that precedence in the ternary operator along with && without appropriate parentheses was a problem.\n\n&& this.parser == null ? other.parser == null : this.parser.getClass() == other.parser.getClass() (from ShortFieldSource.java).\n\nSo that got me curious whether this pattern was repeated. A quick grep with the following REs produced one hit I wasn't related to 2829 with && and more with || (3x code base). I'll try to get to it over the weekend. Please don't grab it just yet, I'm fixing this partially for 2829, but if anyone wants to try the grep and see if I'm hallucinating, I'd appreciate it. I'd really appreciate any tests for things people see...\n\nSome of the returns are false hits, but not others. See \nSolrIndexSearcher.getDocListAndSetNC() \nthe last line is: return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null; \n\nREs (using them in IntelliJ)\n||[\\sa-z\\.0-9A-Z]+==.*?\n&&[\\sa-z\\.0-9A-Z]+==.*?\n\nI got some hits with the above and didn't pursue it any further, but if anyone wants to suggest more comprehensive REs, please attach. I'm trying for \"&& or || followed by anything without an open parentheses followed by == followed by anything followed by ?\" I'd rather get a manageable number of false positives than miss things.",
    "attachments": {
        "SOLR-2876.patch": "https://issues.apache.org/jira/secure/attachment/12502679/SOLR-2876.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13143946",
            "date": "2011-11-04T12:15:19+0000",
            "content": "I love it when a better solution occurs to me the instant I post something.....\n||[^\\(]+==.*? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13143948",
            "date": "2011-11-04T12:16:36+0000",
            "content": "Sorry for the spam, but there are backslashes in front of the pipe symbols in all the REs, silly website doesn't let them through\n| "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13144152",
            "date": "2011-11-04T16:50:39+0000",
            "content": "the last line is: return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n\nThis is correct, but feel free to add parens to clarify. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13144197",
            "date": "2011-11-04T17:37:59+0000",
            "content": "Dear God! You mean the intent here is:\n\nreturn (pf.filter==null && pf.postFilter==null) ? qr.getDocSet() : null;\n\n??? gotta confess I just saw the pattern and jumped to conclusions, hadn't examined the code at all. But you've just made the job tougher... Wait, I know! I'll just write something in awk to convert everything in the source tree.\n\nThe ternary operator really annoys me for this very reason... rant, rant, rant..... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13145070",
            "date": "2011-11-06T18:55:22+0000",
            "content": "I went ahead and looked at the ternary operator (those I could find with grep) and here's the results. Not sure it's worth doing, anyone want to chime in?\n\nAlthough this construct is \"exciting\"...\nluceneSort || sortMissingFirst && !reverse || sortMissingLast && reverse ? \"\" : \"zzz\"; "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13145072",
            "date": "2011-11-06T18:56:28+0000",
            "content": "I don't see anything else that looks wrong, so what do people think about doing this? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13162252",
            "date": "2011-12-04T01:31:37+0000",
            "content": "The other precedences are OK, as far as I can tell... not worth messing around in the code for no demonstrable benefit. "
        }
    ]
}