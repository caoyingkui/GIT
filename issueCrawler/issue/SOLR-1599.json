{
    "id": "SOLR-1599",
    "title": "Improve IDF and relevance by separately indexing different entity types sharing a common schema",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "In Solr 1.4, the IDF (Inverse Document Frequency) is calculated on all of the documents in an index.  This introduces relevance problems when using a single schema to store multiple entity types, for example to support \"search for tracks\" and \"search for artists\".   The ranking for search on the name field of track entities will be (much?) more accurate if the IDF for the name field does not include counts from artist entities.  The effect on ranking would be most pronounced for query terms that have a low document frequency for track entities but a high frequency for artist entities, or visa versa.\n\nThe current work-around to make the IDF be entity-specific is to use a separate Solr core for each entity type sharing the schema - and repeating the process of copying solrconfig.xml and schema.xml to all the cores.  This would be more complicated with replication, and more so with sharding, to maintain a core for artists and a core for tracks on each node.\n\nDavid Smiley, author of \"Solr 1.4 Enterprise Search Server\", has filed SOLR-1158, where he suggests calculating numDocs after the application of filters.  He recognises however that the document frequency (DF_t) for each query term in a track search would also needs to exclude artist entities from the DF_t total to get the correct IDF_t=log(N/DF_t).   DF_t must be calculated at index time, when Solr does not know what filters will be applied.\n\nI suggest having a metadata field entitytype specified on submitting a batch of documents. The the schema would specify a list of allowed entity types and a default entity type. For example, document could say either entitytype=\"track\" or entitytype=\"artist\".  Each each entity type has an independent set of document frequencies, so the term \"foo\" will have a DF for entitytype=\"artist\" and a different DF for entitytype=\"track\".   This might be implemented by instantiating a separate Lucene index for each configured entity type.  Filtering on entitytype=\"artist\" would be implemented by searching only the artist index, analogous to searching only on the artist core in the multi-core workaround.\n\nWith this solution (entity type metadata field implemented with separate Lucene indeces) a single Solr core can support many different entity types that share a common schema but use partially overlapping subsets of fields, instead of configuring, replicating and sharding a Solr core for every entity type.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Graham P",
            "id": "comment-12782322",
            "date": "2009-11-25T06:36:02+0000",
            "content": "SOLR-1158 is where David Smiley points out that IDF being calculated on the whole index is bad for ranking when indexing multiple \"types\" of things using the same schema. "
        },
        {
            "author": "Graham P",
            "id": "comment-12782388",
            "date": "2009-11-25T12:27:25+0000",
            "content": "This is what could happen when indexing multiple entity types in the same core. For instance, indexing artists and tracks and using a filter to \"search for artists\". You then search for artists, with two dismax terms A or B on the name field.  Term A is rare amongst artist name, so it should have a low docFreq and a relatively high weight compared to term B.   However, term A happens to be common in track name, so its docFreq is higher, making the IDF weight for A lower than it should be relative to term B.  The track entities are invisibly altering the term weights in a query for artist entities, which would not happen if they had separate indeces and thus separate docFreq's. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14661697",
            "date": "2015-08-07T11:42:01+0000",
            "content": "Closing very old issue that appears to not be a real problem any more. Please feel free to re-open should anyone feel this issue needs a resolution.\n\nWith SolrCloud it is a no-brainer to create multiple collections for this particular use case. "
        }
    ]
}