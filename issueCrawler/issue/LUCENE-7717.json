{
    "id": "LUCENE-7717",
    "title": "UnifiedHighlighter doesn't highlight PrefixQuery with multi-byte chars",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "5.1,                                            6.3,                                            6.4.1",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "6.4.2"
        ]
    },
    "description": "UnifiedHighlighter highlighter = new UnifiedHighlighter(null, new StandardAnalyzer());\nQuery query = new PrefixQuery(new Term(\"title\", \"\u044f\"));\nString testData = \"\u044f\";\nObject snippet = highlighter.highlightWithoutSearcher(fieldName, query, testData, 1);\nSystem.out.printf(\"testData=[%s] Query=%s snippet=[%s]\\n\", testData, query, snippet==null?null:snippet.toString());",
    "attachments": {
        "LUCENE-7717.patch": "https://issues.apache.org/jira/secure/attachment/12855177/LUCENE-7717.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15887968",
            "date": "2017-02-28T13:11:04+0000",
            "content": "I think that in org.apache.lucene.search.uhighlight.MultiTermHighlighting.extractAutomata()\ncondition \"if (query instanceof AutomatonQuery)\" should be the last in \"if\" chain ",
            "author": "Dmitry Malinin"
        },
        {
            "id": "comment-15888457",
            "date": "2017-02-28T17:06:57+0000",
            "content": "Hello Dmitry. - I am attaching potential test case adapted from your code snippet (no pun intended) in the description. The test passes locally for me though. Could you perhaps try running it locally too and adapt/adjust it and with/without the MultiTermHighlighting change you mention? Thanks. - Christine ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-15888464",
            "date": "2017-02-28T17:09:20+0000",
            "content": "At some point after MultiTermHighlighting.java was first written, PrefixQuery was altered to be a subclass of AutomatonQuery.  So PrefixQuery detection could simply be removed now, I think, since it's handled via AutomatonQuery condition.\n\nI'm working on debugging to see why this fails & a proper test.  (the test would go in TestUnifiedHighlighterMTQ by the way) ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15888807",
            "date": "2017-02-28T20:22:05+0000",
            "content": "Here's my take on it:  The UnifiedHighlighter (and PostingsHighlighter from which it derives) processes the MultiTermQueries (e.g. wildcards) in the query and creates multiple CharacterRunAutomaton intended to match the same things.  CharacterRunAutomaton takes a Automaton as input, and when it does it's processing, it matches the Character code points (integers from 0 to 0x10FFFF) against the integers in the Automaton.  However, this strategy assumes that the Automaton was constructed based on character code points.  But AutomatonQuery.getAutomaton is intended to match byte by byte (integers 0 to 255).  PrefixQuery.toAutomaton will get 2 bytes for the the \"\u044f\" in BytesRef form, and add 2 states.  This does not line up with the assumptions of CharacterRunAutomaton.\n\nA short term immediate \"fix\" is simply to put AutomatonQuery last in the if-else list as Dmitry indicated.  As such, PrefixQuery will work again.  This was broken by LUCENE-6367 (Lucene 5.1).  TermRangeQuery, which also now extends AutomatonQuery, will likewise work \u2013 broken by LUCENE-5879 (Lucene 5.2).  Again, back when MultiTermHighlighting was first written, neither of those queries extended AutomatonQuery.  But there will be bugs for other types of AutomatonQuery (namely WildcardQuery and RegexpQuery) that have yet to be reported.\n\nRobert Muir or Michael McCandless I wonder if you have any thoughts on how to fix this.  An idea I have is to not use a CharacterRunAutomaton in the UnifiedHighlighter; use a ByteRunAutomaton instead.  Then, add ByteRunAutomaton.run(char[] ...etc) that converts each character to the equivalent UTF8 bytes to match.  Even with that, I wonder if this points to areas to improve the automata API so that people don't bump into this trap in the future.  For example, maybe have the Automata self-report if it's byte oriented, Unicode codepoint oriented, or something custom.  Then, RunAutomaton could throw an exception if there is a mis-match.  However that would be a runtime error; maybe the Automata could be typed.\n\nAny way, what I'd like to do is do a short term fix that addresses many common cases and the title of this issue.  And then do a more thorough fix in a follow-on issue.  Ishan Chattopadhyaya do you think this could go into 6.4.2 or are you only looking for \"critical\" issues?  It's debatable what's critical and not.  This bug has been around since 5.1 so perhaps it isn't.\n\n(a patch will follow shortly) ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15888833",
            "date": "2017-02-28T20:41:51+0000",
            "content": "Here's a patch. It fixed the MultiTermHighlighting class in both the postingshighlight package as well as uhighlight.  It adds a test method to TestUnifiedHighlighterMTQ.  I also beefed up the test for a related method testWhichMTQMatched to avoid potential inadvertent changes to the CharRunAutomata toString that people might depend on.  It appears there was no breakage in this case but until I added more query types, wether it did or didn't break wasn't apparent. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15888849",
            "date": "2017-02-28T20:54:14+0000",
            "content": "IntelliJ IDEA has clued me into this else-if having dead code paths for a long while now here and I'm kicking myself for putting it off \u2013 LOL. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15888945",
            "date": "2017-02-28T22:02:49+0000",
            "content": "David Smiley, I don't mind including this fix, if you think this is a low risk fix and should be included. Feel free to backport this one to the release branch. I'm anyway waiting for SOLR-10215 as of now. ",
            "author": "Ishan Chattopadhyaya"
        },
        {
            "id": "comment-15889604",
            "date": "2017-03-01T06:39:05+0000",
            "content": "Commit ec13032a948a29f69d50d41e4859fd38ed5ca377 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ec13032 ]\n\nLUCENE-7717: UnifiedHighlighter and PostingsHighlighter bug in PrefixQuery and TermRangeQuery for multi-byte text ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15889607",
            "date": "2017-03-01T06:41:07+0000",
            "content": "Commit d9a2c64041067acf4f1d967e13ab7a045502ce1c in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d9a2c64 ]\n\nLUCENE-7717: UnifiedHighlighter and PostingsHighlighter bug in PrefixQuery and TermRangeQuery for multi-byte text\n\n(cherry picked from commit ec13032) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15889612",
            "date": "2017-03-01T06:42:32+0000",
            "content": "Commit 7467c369aaae5c17584360d57a3e6226ac57d817 in lucene-solr's branch refs/heads/branch_6_4 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7467c36 ]\n\nLUCENE-7717: UnifiedHighlighter and PostingsHighlighter bug in PrefixQuery and TermRangeQuery for multi-byte text\n\n(cherry picked from commit d9a2c64) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15889638",
            "date": "2017-03-01T06:51:35+0000",
            "content": "Closing.  I'll create a linked follow-up bug issue for WildcardQuery (also applies to Regexp) where we can discuss how to deal with that \u2013 the more overall fix.  I don't think that one should hold up a 6.4.2.  It'll likely result in removing the PrefixQuery and TermRangeQuery sections in MultiTermHighlighting. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15891753",
            "date": "2017-03-02T07:38:38+0000",
            "content": "Hello Christine\nI saw your test. I think that \n\n\t\"I\" is not suitable data for test, because StandardAnalyzer converts data to lower case (but PrefixQuery doesn't)\n\twhy \"random\"? \u0421ould be better make text array String[] texts = \n{\"i\", \"\u044f\", }\n and run for each?\n\tand I mean that result should be, for example, \"<b>q</b>\" for data \"q\" and query \"q*\" and so on for multi-byte data (assertEquals(\"<b>\"text\"</b>\", snippetString)\nBest regards\n\n ",
            "author": "Dmitry Malinin"
        }
    ]
}