{
    "id": "SOLR-5849",
    "title": "write.lock is not removed by LogReplayer",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "In my application I am using SolrEmbeddedServer inside tomcat. I have below configuration for my core:-\n\n<lockType>simple</lockType>\n<unlockOnStartup>true</unlockOnStartup>\n\n<updateLog>\n      <str name=\"dir\">${solr.ulog.dir:}</str>\n</updateLog>\n\n <autoCommit> \n       <maxTime>15000</maxTime> \n       <openSearcher>false</openSearcher> \n </autoCommit>\n\n<autoSoftCommit> \n         <maxTime>1000</maxTime> \n</autoSoftCommit>\n\nThe issue I am facing is when I restart tocmat and in case there is any uncommitted data  in tlog, then I am getting below exception:-\n\norg.apache.lucene.store.LockObtainFailedException: Lock obtain timed out: SimpleFSLock@F:\\mydir\\Install\\solr\\conf\\alerts\\data\\index\\write.lock\n\tat org.apache.lucene.store.Lock.obtain(Lock.java:84)\n\tat org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:644)\n\tat org.apache.solr.update.SolrIndexWriter.<init>(SolrIndexWriter.java:77)\n\tat org.apache.solr.update.SolrIndexWriter.create(SolrIndexWriter.java:64)\n\tat org.apache.solr.update.DefaultSolrCoreState.createMainIndexWriter(DefaultSolrCoreState.java:197)\n\tat org.apache.solr.update.DefaultSolrCoreState.getIndexWriter(DefaultSolrCoreState.java:110)\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:148)\n\tat org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:69)\n\tat org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalAdd(DistributedUpdateProcessor.java:504)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.versionAdd(DistributedUpdateProcessor.java:640)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:396)\n\tat org.apache.solr.update.processor.LogUpdateProcessor.processAdd(LogUpdateProcessorFactory.java:100)\n\tat org.apache.solr.handler.loader.XMLLoader.processUpdate(XMLLoader.java:246)\n\tat org.apache.solr.handler.loader.XMLLoader.load(XMLLoader.java:173)\n\tat org.apache.solr.handler.UpdateRequestHandler$1.load(UpdateRequestHandler.java:92)\n\tat org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:74)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1816)\n\tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:150)\n\tat org.apache.solr.client.solrj.request.AbstractUpdateRequest.process(AbstractUpdateRequest.java:117)\n\tat org.apache.solr.client.solrj.SolrServer.add(SolrServer.java:68)\n\tat org.apache.solr.client.solrj.SolrServer.add(SolrServer.java:54)\n\nAfter restart I am not able to index anything into the solr. I debug the code and found out that LogReplayer during start up creates the SolrIndexWriter on core and that creates the write.lock file. Once all the leftover tlog's are indexed, the write.lock remains there, its not getting deleted. So when my application tries to add document the SolrIndexWriter is not able to create the lock because write.lock already exists.\n\nThis seems to be a bug in Solr 4.3.0, because I believe SolrIndexWriter created during  LogReplayer is not closed, and that is causing the write.lock leftover in data directory.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "pavan patel",
            "id": "comment-13937564",
            "date": "2014-03-17T08:54:04+0000",
            "content": "Marking this bug invalid as this is not a solr issue.\n\nIn my application we had two cores and we were initializing the SolrCoreContainer twice in our factory class. Because of that the write.lock issue was coming. "
        }
    ]
}