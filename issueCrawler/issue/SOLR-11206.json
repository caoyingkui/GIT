{
    "id": "SOLR-11206",
    "title": "Migrate logic from bin/solr scripts to SolrCLI",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "scripts and tools"
        ],
        "type": "Improvement",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The bin/solr and bin/solr.cmd scripts have taken on a lot of logic that would be easier to maintain if it was instead written in Java code, for a handful of reasons\n\n\n\tAny logic in the control scripts is duplicated in two places by definition.\n\tIncreasing test coverage of this logic would be much easier if it was written in Java.\n\tFew developers are conversant in both bash and Windows-shell, making editing difficult.\n\n\n\nSome sections in these scripts make good candidates for migration to Java.  This issue should examine any of these that are brought up.  However the biggest and most obvious candidate for migration is the argument parsing, validation, usage/help text, etc. for the commands that don't directly start/stop Solr processes (i.e. the \"create\", \"delete\", \"zk\", \"auth\", \"assert\" commands).",
    "attachments": {
        "ctrl-script-output-benchmark.sh": "https://issues.apache.org/jira/secure/attachment/12881275/ctrl-script-output-benchmark.sh",
        "windows-initial-output.txt": "https://issues.apache.org/jira/secure/attachment/12882488/windows-initial-output.txt",
        "SOLR-11206.patch": "https://issues.apache.org/jira/secure/attachment/12882251/SOLR-11206.patch",
        "ctrl-script-output-benchmark.cmd": "https://issues.apache.org/jira/secure/attachment/12882489/ctrl-script-output-benchmark.cmd",
        "linux-initial-output.txt": "https://issues.apache.org/jira/secure/attachment/12881276/linux-initial-output.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-07T18:28:59+0000",
            "content": "Adding link to, there might be some prior art there and/or we can close them when this JIRA gets committed. ",
            "author": "Erick Erickson",
            "id": "comment-16116996"
        },
        {
            "date": "2017-08-08T03:52:03+0000",
            "content": "Questions/Concerns/Thoughts\n\nMost of these are just some notes I wanted to jot down for my own benefit.  Though they may provide helpful for others to catch my mistakes/misconceptions...\n\n\n\tAFAIK, there are no tests for the bin/solr scripts themselves, are there?  I'm concerned about inadvertently introducing bugs that will cause user issues down the road.  Looks like a Catch-22 of sorts: moving the logic to Java will allow it to be better tested, but it's difficult to refactor with confidence because of the current test situation.  With that in mind, one of my first steps here might be to put together a script which exercises the bin/solr commands in many ways.  It's obviously not feasible to capture all (or even most) cases, but a gap/hole-ridden benchmark is better than none at all.\n\tA \"benchmark\" script like the one suggested above could be used to diff the output before and after this refactor, to ensure that the output isn't changing in any ways we don't expect/anticipate/want.  Do the backcompat guarantees made elsewhere in Solr extend to the output of these scripts as well?  Or is there not a rigid expectation around the Solr control scripts?\n\tI suspect I might run into some discrepancies in behavior between the two bin/solr implementations.  I suppose these will just have to be handled on a case by case basis (as far as determining which behavior should be taken forward.)\n\n ",
            "author": "Jason Gerlowski",
            "id": "comment-16117815"
        },
        {
            "date": "2017-08-10T17:24:06+0000",
            "content": "In a previous comment I mentioned that it'd be nice to have some sort of tests or benchmarks for how bin/solr currently behaviors under \"normal\" usage, before we migrate any bits of the logic to Java.  I've taken the first crack at this here.\n\nThe ctrl-script-output-benchmark.sh script runs most of the bin/solr commands, with a handful of correct and incorrect argument sets.  It's by no means comprehensive, but at least it's something to start with.  It takes no arguments, and is meant to be run from the lucene-solr/solr directory.\n\nAlso attached is the output of running the script on Linux.\n\nMy plan is to upload similar artifacts from running on Windows, and then start on the first pass of the actual change. ",
            "author": "Jason Gerlowski",
            "id": "comment-16121936"
        },
        {
            "date": "2017-08-17T02:39:06+0000",
            "content": "My access to Windows is spotty, and so I haven't been able to get an output-benchmark from a Windows machine yet, though I should have access and time to do so tomorrow.\n\nIn the meantime, I'm uploading a proof-of-concept patch for one of the commands supported by the control-scripts (\"create\").\n\nNotes/caveats on the patch:\n\n\tI chose \"create\" because it had enough arguments to demonstrate the value in the change.\n\tAs I mentioned above, I haven't had Windows access recently, so there might be issues with the bin/solr.cmd changes.  Though the changes are accurate enough to show the approach.\n\tAs-is, the patch matches command output on success, but error messages about missing/invalid arguments don't line up exactly with the pre-patch code.  The argument parsing in Java-land uses the commons-cli library, which makes the parsing concise/convenient, but ties us to the error-message format dictated by the library.  I'm curious what the backward-compatibility expectations are around the output of the bin/solr scripts.  I've heard guidelines for the Java code, and for API output, but not for the control scripts.  We can match all stdout output if we eschew commons-cli, but the library is so standard and makes the code so maintainable that I'd like to lobby for using it if it doesn't stretch/break our backward-compatibility promises/expectations.  Could use some guidance here.\n\n ",
            "author": "Jason Gerlowski",
            "id": "comment-16129789"
        },
        {
            "date": "2017-08-18T02:24:27+0000",
            "content": "Attaching the \"benchmark\" I was putting together on Windows. ",
            "author": "Jason Gerlowski",
            "id": "comment-16131620"
        },
        {
            "date": "2017-08-18T03:29:59+0000",
            "content": "Patch didn't apply cleanly to the latest master.  Updating it.\nStill needs a lot of work. ",
            "author": "Jason Gerlowski",
            "id": "comment-16131663"
        }
    ]
}