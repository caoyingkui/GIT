{
    "id": "LUCENE-7936",
    "title": "Extend Geoshape interfaces so objects can be copied/serialized",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.1",
            "master (8.0)"
        ]
    },
    "description": "Hi David Wright,\n\nI would like to propose to extends the GeoShape interfaces to be able to copy/serialized the objects. The current status and  propose change is as following:\n\nGeoPoint: It can be serialized by using x, y, z\nGeoCircle:  It can be serialized by using getCenter() and getRadius() and getPlanetModel()\nGeoCompositeShape: It can be serialized by accesing shapes using size() and GetShape(int index)\nGeoPath: add methods to the interface getPoints() and getCutoffAngle()\nGeoPolygon: This is the most complicated one as we have different types:\n   1.- GeoCompositePolygon is just a composite\n   2.- GeoConcavePolygon and GeoConvexPolygon: Create a new interface for those polygons which exposes the points, holes, internaledges and concavity/convexity\n   3.- GeoComplexPolygons: Do nothing, they are too complex to be serialize??\n\nI am intersested in accesing the discreatization of the polygons into convex and concave ones for other reasons as well. I think this should be expose as they end result can be used for other use cases.\n\nCheers,\n\nI.",
    "attachments": {
        "factory.patch": "https://issues.apache.org/jira/secure/attachment/12884190/factory.patch",
        "Spatial4j.patch": "https://issues.apache.org/jira/secure/attachment/12883100/Spatial4j.patch",
        "GeoBinaryCodec.patch": "https://issues.apache.org/jira/secure/attachment/12883098/GeoBinaryCodec.patch",
        "LUCENE-7936-test.patch": "https://issues.apache.org/jira/secure/attachment/12883667/LUCENE-7936-test.patch",
        "LUCENE-7936-code.patch": "https://issues.apache.org/jira/secure/attachment/12884422/LUCENE-7936-code.patch",
        "LUCENE-7936-GeoComplexPolygon.patch": "https://issues.apache.org/jira/secure/attachment/12883722/LUCENE-7936-GeoComplexPolygon.patch",
        "LUCENE-7936.patch": "https://issues.apache.org/jira/secure/attachment/12882844/LUCENE-7936.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16134950",
            "date": "2017-08-21T09:31:07+0000",
            "content": "Attached the proposed patch.\n\nNote that I have called the new GeoPolygon interface GeoBasicPolygon which I do not particullary like but I could not come up with a better name.\n\nGeoPolygonFactory has been extended to accept internalEdgesFlag.\n\nA random test is added for copying GeoShapes. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16135047",
            "date": "2017-08-21T11:22:58+0000",
            "content": "Hi Ignacio Vera, I'm not happy with exposing internal representational information everywhere.\n\nFor copying, I greatly prefer that objects know how to copy themselves.  Implementing Cloneable is one standard way to do that, rather than make lots of public accessors.  Same goes for serialization \u2013 you can either implement Serializable, which has a lot of problems, or you can use one of the java serialization frameworks.\n\nThe issue is that I don't know what standards Lucene uses elsewhere.  I will do some asking around and get back to you on that.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16135074",
            "date": "2017-08-21T11:54:03+0000",
            "content": "Copying objects is not the main use case, what I want to achieve is what Spatial4j does with the binarycodec:\n\nhttps://github.com/locationtech/spatial4j/blob/master/src/main/java/org/locationtech/spatial4j/io/BinaryCodec.java\n\nThis class is used to generate docValues which at the same time is used by the SerializedDVStrategy to check the relationship between indexed and query shapes. If we achieve this, we can pass through the interfaces the Geo3dShapes and use it with Lucene (I have already done it with very promising results). \n\nIt is true that the objects can provide the methods to searialize/ deserialize but I thought Geoshapes should not need to know how to do this.\n\nThe second use case is the following: I am using healpix (http://healpix.jpl.nasa.gov) to pixelate polygons on the sphere. The library requires polygons to be convex  therefore for concave polygons I need to break them into the equivalent convex ones, which is what the GeoPolygonFactory actually does. This is very powerful but the information is not available.\n\nCheers,\n\nI. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16135119",
            "date": "2017-08-21T12:49:02+0000",
            "content": "Hi Ignacio Vera, according to Mike McCandless, the Lucene Core approach to serialization and duplication is that there is none.  This was because they couldn't figure out a way to do it that maintained backwards compatibility adequately, and also because Lucene Core cannot have any external dependencies (for instance, on any external serialization frameworks).\n\nI have a very busy few days coming up but by next weekend I may have some time to do some research into how best to implement duplication and serialization.  The goal would be to do it in a way that could be used as a model for the rest of Lucene core.\n\nThanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16135134",
            "date": "2017-08-21T12:58:24+0000",
            "content": "Understood & Cheers! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16135460",
            "date": "2017-08-21T17:19:17+0000",
            "content": "\nThis class is used to generate docValues which at the same time is used by the SerializedDVStrategy to check the relationship between indexed and query shapes. If we achieve this, we can pass through the interfaces the Geo3dShapes and use it with Lucene (I have already done it with very promising results).\n\nIgnacio Vera, the conversion to docvalues actually should live in the package org.apache.lucene.spatial3d.  There are classes in there already that implement doc values fields, distance comparators, and DV logic.  If these are insufficient for what you're trying to do, please let me know why.\n\nAs for the polygon pixelation, there are two considerations.  First, this statement is not correct:\n\n\nThe library requires polygons to be convex therefore for concave polygons I need to break them into the equivalent convex ones, which is what the GeoPolygonFactory actually does.\n\nGeoPolygonFactory generates concave polygons in the case where that's the best representation.  It either generates ONE concave polygon or potentially MULTIPLE convex polygons.  So perhaps you are going to need to do something different anyway?\n\nIn fact, I'm not certain that it's always possible to tile a concave polygon with convex polygons without adding vertices by interpolation.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16136367",
            "date": "2017-08-22T06:13:34+0000",
            "content": "\"If these are insufficient for what you're trying to do, please let me know why.\"\n\nFor what I see there, the classes in the package only handle points in Planet model WGS84. I am interested in the SPHERE, indexing polygons as well as points. My approach is more similar to the class in spatial-extras Geo3DShape but creating my custom spatial context which wraps the Geo3dArea shapes. \n\n\"So perhaps you are going to need to do something different anyway?\"\n\nThis is true for generic polygons but the polygons I am working with expand as much as a few degrees. I made an experiment tonight creating random polygons that expand less than Math.PI with many points. It was never decomposed using concave polygons. I do think the library does what I need for my use case. \n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16136470",
            "date": "2017-08-22T07:47:11+0000",
            "content": "\nFor what I see there, the classes in the package only handle points in Planet model WGS84. I am interested in the SPHERE, indexing polygons as well as points. My approach is more similar to the class in spatial-extras Geo3DShape but creating my custom spatial context which wraps the Geo3dArea shapes.\n\nAdding planet model as an enum selector to the existing Lucene integration, or even as a set of parallel classes, would be a reasonable approach.  Robert Muir wanted to \"keep things simple\" and very much limit the public API of the integration. It might be worth looking at the current spatial3d integration as a model.  We certainly do not want users to have to understand details of the PlanetModel class, though.  Hope this makes sense.\n\nThe spatial-extras module cannot be the way we do this because of the dependency on spatial-4j.  We cannot include that dependency and remain in lucene-core.  You might be able to use it as a model only but for reasons of API consistency it would be better to look at the integration in spatial3d as the model.\n\nAs for indexing polygons \u2013 adding that is OK to, but please do note that, for the Lucene integration, the way we specify polygons for the integration uses Robert's Polygon class, which has no relation at all to GeoPolygon as it is defined in spatial3d.geom.\n\n\nThis is true for generic polygons but the polygons I am working with expand as much as a few degrees. I made an experiment tonight creating random polygons that expand less than Math.PI with many points. It was never decomposed using concave polygons. I do think the library does what I need for my use case.\n\nYou are correct to state that, for any polygon less that Math.PI in extent, it will be decomposed solely as GeoConvexPolygon objects.  So let's presume that if you had the right iterator you could inspect the GeoComposite and do the right thing.  Unfortunately, the variants of GeoPolygon are all package-local, and that's not going to change, so you would need to add something to GeoPolygon itself to allow you to walk over the individual components in a way that does not reference any package-private classes in geom.  This hints at a specialized iterator that you'd need to add to GeoPolygon.  It's OK to add it at that level since all polygons are defined by points, and MAY be tiled.  For example:\n\n\nTileIterator decompose();\n\ninterface TileIterator {\n  Tile next();\n}\n\ninterface Tile {\n  boolean isConvex();\n  ComponentIterator points();\n}\n\ninterface ComponentIterator {\n  GeoPoint next();\n}\n\n\n\nThat way you can iterate over everything within and not know anything about how it is put together from the outside.\nWhat do you think? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16136638",
            "date": "2017-08-22T10:58:52+0000",
            "content": "I am focusing on re-using the RecursiveTreePrefixStrategy on Lucene + serialized strategy which requires Geo3dShapes to be wrapped into Spatial4j shapes. I attach what it is now needed to have a basic implementation. I have created a GeoBinaryCodec and then the implementation is trivial (attached as well with test). \n\nI understand that this is not the ideal implementation and it would be good to have a proper integration where the model for shapes is the Geo3d model.\n\nI like your idea of the iterators and I beleive this is something we should expose as it can be valuable for other people. I will try to implement it.\n\nThanks!\n\nI.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16136663",
            "date": "2017-08-22T11:32:01+0000",
            "content": "Ignacio Vera, thanks for the code patches.\n\nI think we need to involve David Smiley if you want to extend what's in spatial-extras; he's the primary author of that module.  David, what is your opinion as to the spatial4j patch proposed?\n\nAs for the binary codec, I'll have to think about how best to structure this.  Usually, as I've indicated, it's better for packages structured as interfaces with multiple implementations to have each object know how to pack itself and unpack itself, rather than supporting deep inspection and writing a wrapper.  Too much internal information has to be exposed to do the latter.\n\nI can see adding basic methods to all Geo3D objects for encoding to, and decoding from, a codec binary stream.  As long as these methods can be written efficiently, and the streams they read from/write to are standard in Lucene core or in the Java util package, I see no reason not to make this a standard feature of Geo3d.  A typical pattern would look something like this:\n\n\npublic MyObject(final InputStream is) throws IOException {\n  ...\n}\n\n...\n\n@Override\npublic void write(final OutputStream os) throws IOException {\n  ...\n}\n\n\n\n\nTo be fully general, the interface-implementing class name would need to be included in the stream, and instantiated by reflection when the stream is read back.  This uses a fair bit of space but for your purposes might well be OK.  Please let me know.  I'll think on this further. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16136774",
            "date": "2017-08-22T13:14:30+0000",
            "content": "It sounds great! We only need to keep an eye in performance.\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16137529",
            "date": "2017-08-22T22:37:51+0000",
            "content": "Hello Ignacio Vera and Karl Wright.  BTW I'm on travel and on vacation so I'm not as responsive as I'd like.\n\nIt's exciting to see some progress in this area.  Having Geo3D shapes be able to serialize and deserialize themselves using core Java APIs (only) in particular would be great.  This would allow their internal details to be less exposed.  I have a strong preference for not using Lucene APIs here since it allows 3rd parties to use the jewel that is Spatial3D by itself without having to bring in Lucene-core.  For example perhaps someone is doing pure in-memory calculations without Lucene in the picture.  Any way, speaking of the format... would this theoretically write 3 doubles per vertex?  :-/  Though if we write lat-lon then there's math to do at read-time.\n\nAdditions to the lucene-spatial-extras module \u2013 Geo3D SpatialContext impl, with BinaryCodec impl seems like a separate issue to me. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16137582",
            "date": "2017-08-22T23:15:03+0000",
            "content": "David Smiley, I don't think we'd thought much about the representation; more interested right now in how we do it than the exact details.  We'd clearly want a minimal representation for a GeoPoint and I think that would be a lat and a lon and we'd take the hit on deserialization.\n\nIgnacio Vera, I think David's suggestion is a good one: maybe create a new ticket to handle the spatial-extras contributions?  The codec should become much simpler and I'd hope that David's interfaces could be extended to allow spatial4j objects to be similarly encoded/decoded.  Once again, I'll be looking at the geo3d serialization design later in the week when I actually have time \u2013 or, Ignacio Vera, if you have time before then you could propose an implementation.  But this is separate entirely from the TileIterator stuff.  We should do one thing at a time I think. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16138025",
            "date": "2017-08-23T07:52:05+0000",
            "content": "Hi  Karl Wright,\n\nI agree we should separate the different tasks. O leave this ticket for  encoded/decoded of geoShapes and open one more ticket for the TileIterator stuff. \n\nI see if I can propose something by the end of the week. One thing is clear is that you already open a can of worms with the GeoPoint stuff. The reason I used x/y/z instead of Lat/Lon is because of the Planet Model as you would need to encode it as well and for generic cases you will need two doubles to encode it.\n\nThinking more in depth, there is something I am doing wrong and it is trying to use GeoPoint as a GeoShape. There is one shape missig which is a GeoPointShape which is actually a GeoShape containing a point. GeoPoint should never extend GeoShape! So my first proposal is:\n\n\n\tAdd GeoPointShape Interface\n\tChange GeoDegeneratePoint to contain a GeoPoint and not extend it and implement the GeoPointShape interface. Probably rename it to GeoStandardPointShape.\n\tAdd a GeoPointshapeFactory\n\n\n\nWhat do you think?\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16138177",
            "date": "2017-08-23T10:05:14+0000",
            "content": "Ignacio Vera, I took the tack of not serializing the planetmodel, but requiring it on deserialization.  This will give a much more compact representation.  The attached patch is not complete, and still needs much work (including actual implementations for most objects except GeoPoint). ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16138190",
            "date": "2017-08-23T10:11:57+0000",
            "content": "My thought is that we can explicitly choose to serialize the planet model exactly ONCE, should we want to do that, rather than inside of every point and shape.  We also don't have to serialize class names EXCEPT when they can be ambiguous.  To GeoPoint, I will be adding read/write methods for strings and for SerializedObjects.  I think we still need a separate place for static methods to support serialization/deserialization to live \u2013 maybe in the SerializedObject interface itself, rather than in GeoPoint?  We can supposedly do that now with Java 8 \u2013 although I'd really not want them to be visible outside the package if possible.\n\nI have zero time today and most of tomorrow but if this looks promising please wait on implementing serialization until I'm ready.  Tile iteration you can go ahead with.  Thanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16138247",
            "date": "2017-08-23T11:44:34+0000",
            "content": "Ok I will wait until you are ready, it looking promising. I like what I see in the patch but I would like to have a thought about how we are using GeoPoint. My point is the following:\n\nThere are basically two type of Objects for building shapes:\n\nGeoShape components: Everything that is extending the Vector class, GeoPoint and Planes. These do not need to be serialized.\nGeoshape objects: Everything that  implements PlanetObject and hence extends GeoBasePanetObject. The interface PlanetObject should be implementing the SerializeObject.\n\nThere should be no Geoshape extending GeoPoint as that is like trying to build a shape by extending a Plane. A GeoShapePoint object should be a GeoShapeObject with one component, being that component a GeoPoint.\n\nIn addition, your  static methods to support serialization/deserialization  should live in GeoBasePanetObject. Then you can have them protected in the package.\n\nCheers,\n\nI.\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16138268",
            "date": "2017-08-23T12:10:47+0000",
            "content": "GeoDegeneratePoint extends GeoPoint.  This is necessary for a number of reasons and should not blow us up.\n\nI thought of putting serialization/deserialization methods in BasePlanetObject but that did not seem like it matched up well with the serialization abstraction. I would like to have a framework for serialization that is more flexible.\n\nI do not think it is necessary to add classes in the derivation hierarchy simply to support serialization.  I'd rather that that functionality was more or less universal.\n\nI'll be attaching a revised patch for review shortly, but then I really have to do other things today. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16138269",
            "date": "2017-08-23T12:14:06+0000",
            "content": "This patch moves everything of import into SerializedObject. That's nice because a wide variety of objects can then be serializable in this framework.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16138422",
            "date": "2017-08-23T14:29:50+0000",
            "content": "Commit 6b8f98db93689370a6df47a8645c80b1b0b39480 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b8f98d ]\n\nLUCENE-7936: Add Geo3d framework for serialization and deserialization. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16138424",
            "date": "2017-08-23T14:31:30+0000",
            "content": "Commit 8fc72d4a0fbe852813bc183bcc29f7c998f4c44e in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8fc72d4 ]\n\nLUCENE-7936: Add Geo3d framework for serialization and deserialization. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16138426",
            "date": "2017-08-23T14:32:32+0000",
            "content": "Commit 4ff396427120b343954de8f66873f2c807088729 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4ff3964 ]\n\nLUCENE-7936: Add Geo3d framework for serialization and deserialization. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16138428",
            "date": "2017-08-23T14:34:01+0000",
            "content": "Ignacio Vera, I've committed the framework.  Implementing the framework on an object-by-object basis is the next task, which I'll try to look at on Saturday. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16140376",
            "date": "2017-08-24T17:41:47+0000",
            "content": "Commit fd11646af2da0302a315e77e3caa3e254681a2f9 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fd11646 ]\n\nLUCENE-7936: Implement serialization/deserialization for all objects except GeoComplexPolygon and composites. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16140378",
            "date": "2017-08-24T17:43:08+0000",
            "content": "Commit 15a06dfcae966bd32ec2b7f100b875ebcefafdc7 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=15a06df ]\n\nLUCENE-7936: Implement serialization/deserialization for all objects except GeoComplexPolygon and composites. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16140383",
            "date": "2017-08-24T17:44:05+0000",
            "content": "Commit 42d7b30dfbae45580165aa7284677d67263e9974 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=42d7b30 ]\n\nLUCENE-7936: Implement serialization/deserialization for all objects except GeoComplexPolygon and composites. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141288",
            "date": "2017-08-25T06:52:41+0000",
            "content": "Commit 693db3fe38aa1d9a1e76766cac900df9e22252fe in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=693db3f ]\n\nLUCENE-7936: Complete the work to support serialization and deserialization of individual Geo3D objects.  This adds support for GeoComplexPolygon and the composites. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141290",
            "date": "2017-08-25T06:53:52+0000",
            "content": "Commit abc76f7f2852d9da4a54764321c2386dfb48d8c8 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=abc76f7 ]\n\nLUCENE-7936: Complete the work to support serialization and deserialization of individual Geo3D objects.  This adds support for GeoComplexPolygon and the composites. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141292",
            "date": "2017-08-25T06:54:43+0000",
            "content": "Commit 5e8890ae1c751fdf285a1593f597716453e61bad in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5e8890a ]\n\nLUCENE-7936: Complete the work to support serialization and deserialization of individual Geo3D objects.  This adds support for GeoComplexPolygon and the composites. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141297",
            "date": "2017-08-25T06:59:50+0000",
            "content": "Ignacio Vera, the basic code is in place now.  There still needs to be tests \u2013 and also serialization/deserialization methods in SerializableObject that includes the planet model in the serialization.  I will try to get that done today at some point.\n\nThe main method you'd want to call for serializing an object is SerializableObject.writeObject().  For deserialization, you would use SerializableObject.readObject().  These do not record the planet model.  I will be introducing writeObjectWithPlanetModel() and readObjectWithPlanetModel() to do that.  Please let me know what you think. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16141385",
            "date": "2017-08-25T08:54:45+0000",
            "content": "Thanks Karl Wright,\n\nI attached a patch with a test for serialization. It showed few issues:\n\n1) Holes can be null and need to be dealt with.\n2) Java does not allow to cast one type of array to another type of array. \n\nRegarding the current implementation, I think we should not serialize GeoPoint as an object and make it more compact. Objects should just serialize GeoPoints as two doubles. For example for a polygon with 6 points would save 6 GeoPoint strings. And in fact I think points should not be serializable at all, only classes that implement PlanetObject. what do you think?\n\nCheers,\n\nI.\n\nBy the way, should not  writeObject and readObject be public?\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16141458",
            "date": "2017-08-25T10:23:34+0000",
            "content": "Ignacio Vera, thanks for the patch.\n\n(1) GeoPoints serialize as two doubles.  They do not include the planet model.  In fact, no serialization yet includes the planet model; it is implied and included as an argument.  So there is no benefit in not allowing a GeoPoint to be serialized.\n\n(2) I have not yet made public the statics that need to be public in SerializableObject.  But you are correct that readObject and writeObject should be made so.\n\nThanks!\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16141517",
            "date": "2017-08-25T11:58:49+0000",
            "content": "Commit 26b7644d00ccbb01b82a7ecb456e36e7680a0e2d in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=26b7644 ]\n\nLUCENE-7936: Committing a randomized serialization test on behalf of Ignacio Vera, along with fixes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141518",
            "date": "2017-08-25T12:00:07+0000",
            "content": "Commit f4b3f55b9de15bca5595adb63f0e266380efd739 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f4b3f55 ]\n\nLUCENE-7936: Committing a randomized serialization test on behalf of Ignacio Vera, along with fixes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141520",
            "date": "2017-08-25T12:00:57+0000",
            "content": "Commit bdb3c253d8dbbc703d409201ae46297e6bab0c15 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bdb3c25 ]\n\nLUCENE-7936: Committing a randomized serialization test on behalf of Ignacio Vera, along with fixes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141522",
            "date": "2017-08-25T12:02:15+0000",
            "content": "Ignacio Vera, I've committed your test along with fixes so that it succeeds.  Also made readObject() and writeObject() public.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16141538",
            "date": "2017-08-25T12:24:05+0000",
            "content": "Thanks Karl Wright, I hope the test where useful.\n\nI wonder if it is not worthy to implement the equals method of GeoComplexPolygon now. Because we keep the original point list on the object, the implementation should not be difficult. Then we can add those polygons to the test.\n\nThe other thing I have on my head is the support to \"user defined\" GeoShapes.  How would users align their shapes in the current format when they want to serialize them? I might be implementing my own very domain specific shapes and I am wondering how to make serialization work.\n\nCheers,\n\nI. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16141547",
            "date": "2017-08-25T12:32:33+0000",
            "content": "Hi Ignacio Vera, yes please submit a patch for equals() and hashCode() for GeoComplexPolygon.\n\nAs far as the contract for serialization/deserialization goes, this is the way I have it set up:\n\n(1) If you created your own shape before this change, you will simply get a \"Unsupported operation exception\" thrown if you try to serialize it.  This is done in BasePlanetObject.\n\n(2) If you want to support serialization, you need to implement the write(OutputStream) method, and you need a constructor with the following signature: MyClass(PlanetModel, InputStream) throws IOException\n\nThat's it; everything else should work for you.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16141587",
            "date": "2017-08-25T13:07:25+0000",
            "content": "Attached implementation of equals and hashcode in GeoComplexPolygons and added this type o shape to RandomBinaryCodecTest. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16141665",
            "date": "2017-08-25T14:07:40+0000",
            "content": "Commit 554f0d5f2009a69389d4dd5d5d3907fa3a4727f5 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=554f0d5 ]\n\nLUCENE-7936: Complete the serialization/deserialization implementation of Geo3d. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141667",
            "date": "2017-08-25T14:08:51+0000",
            "content": "Commit 665d223c6e059626de568aee166708d6721f80aa in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=665d223 ]\n\nLUCENE-7936: Complete the serialization/deserialization implementation of Geo3d. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141668",
            "date": "2017-08-25T14:09:37+0000",
            "content": "Commit 1e0b062ca7ba1344d03fb3dd2bed1b529f1d081b in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1e0b062 ]\n\nLUCENE-7936: Complete the serialization/deserialization implementation of Geo3d. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141671",
            "date": "2017-08-25T14:12:37+0000",
            "content": "Ignacio Vera, I have committed the remainder of what I think we need for this ticket, including your implementation of equals/hashCode for GeoComplexPolygon.  The SerializationObject methods that include planet model are: writePlanetObject() and readPlanetObject().  Please let me know of any issues you encounter.  Thanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16141793",
            "date": "2017-08-25T15:48:37+0000",
            "content": "My Jenkins found a couple reproducing failures for RandomBinaryCodecTest:\n\nOn branch_7x:\n\n\nant test  -Dtestcase=RandomBinaryCodecTest  -Dtests.seed=AA9F2C61D6F622BD -Dtests.slow=true -Dtests.locale=hr-HR -Dtests.timezone=America/Argentina/La_Rioja -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\nOn master:\n\n\nant test  -Dtestcase=RandomBinaryCodecTest  -Dtests.seed=A97EB454B3179214 -Dtests.slow=true -Dtests.locale=fr-LU -Dtests.timezone=WET -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16141813",
            "date": "2017-08-25T16:06:43+0000",
            "content": "Commit 287ab9dc40fd8abf1a6910e35052634b165b26d9 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=287ab9d ]\n\nLUCENE-7936: Fix broken GeoComplexPolygon serialization. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141815",
            "date": "2017-08-25T16:07:44+0000",
            "content": "Commit 00c8d446277e80fe0ca42d8a19c1c45028e86cd7 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=00c8d44 ]\n\nLUCENE-7936: Fix broken GeoComplexPolygon serialization. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141816",
            "date": "2017-08-25T16:08:27+0000",
            "content": "Commit 83a32ff132c3e3d15878fca56ce6bfc201840450 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=83a32ff ]\n\nLUCENE-7936: Fix broken GeoComplexPolygon serialization. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141818",
            "date": "2017-08-25T16:08:55+0000",
            "content": "Steve Rowe: should be fixed now. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16144799",
            "date": "2017-08-29T06:10:43+0000",
            "content": "Hi Karl Wright,\n\nIt have noticed that the serialization constructor is missing in GeoCompositeMembershipShape class.\n\nI have been checking as the performance and I noticed that if we codify the class name into a byte, deserialization of objects can be up to 5 times faster. I think we should explore that option.\n\nI am attaching a factory that codifies the class into a byte. 0 to 127 is reserve for internal classes and -128 to -1 to user define classes. To make this work for objects that serialize other objects we would need to pass the factory into the constructor. \n\nAnyway before going to details I want to check if you are ok to explore other solutions. I really like the simplicity of the current implementation but when I saw that reading GeoPoints can be 5 time faster, I though it is worthy at least a thought. \n\nLet me know what you think. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16145018",
            "date": "2017-08-29T09:50:56+0000",
            "content": "Commit 8fc61e56288b6058a007ea651b0e2897039726da in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8fc61e5 ]\n\nLUCENE-7936: Missed a constructor for deserialization support. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16145019",
            "date": "2017-08-29T09:51:58+0000",
            "content": "Commit 7cb70ada29e18ba6c98c8efa4a6a2fbb703cabe8 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7cb70ad ]\n\nLUCENE-7936: Missed a constructor for deserialization support. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16145020",
            "date": "2017-08-29T09:52:53+0000",
            "content": "Commit 79097bf12e11517933da2187cd23a183611f52a0 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79097bf ]\n\nLUCENE-7936: Missed a constructor for deserialization support. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16145047",
            "date": "2017-08-29T10:09:30+0000",
            "content": "Ignacio Vera, I committed the missing constructor.\n\nI had thought that we eventually could improve the packing of class names.  However, to be a correct implementation, this needs to be built into SerializableObject fully, since there are a number of objects which decompose heterogeneously into subobjects.  I would therefore want to see the patch restructured to modify SerializableObject in that way.  The problem, of course, is that you need an object that you instantiate somehow that drives the serialization and deserialization, and the SerializableObject API is not set up to use such a thing.\n\nInstead, these are your options:\n\n(1) Have a static table of standard classes and a class-name encoding that starts with a byte.  If the byte is not 0xff, then look up the standard class from the table.  If not, follow the byte with the string encoding we do right now.  Works fine in a static environment, but custom classes are more expensive to serialize.\n\n(2) Have a non-static \"SerializationContext\" class that you initialize before you serialize or deserialize.  Then, every write() or deserialization construct must get the SerializationContext passed as an argument.  SerializationObject.readObject() and SerializationObject.writeObject() must also receive this parameter.  This is a major bit of work, of course, but might be worth it if you intend to do lots of custom geo classes.\n\nOne other comment on code: I notice you throw some RuntimeExceptions.  Those are inappropriate for bad arguments or a bad object state.  Use IllegalArgumentException or IllegalStateException instead in those cases.\n\nPlease let me know what you want to do. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16145129",
            "date": "2017-08-29T11:21:33+0000",
            "content": "Hi Karl Wright,\n\nHer eis my view of pros and cons for both solutions:\n\n(1) Static table for standard classes:\n\n\tpros: Easy to implement and it will work for any shape that implements SerializableObject API.\n\tcons: needs extra byte and custom classes  are expensive to serialize.\n\n\n\n(2) Non-static \"SerializationContext\":\n\n\tpros: Serialization is even between all geo classes.\n\tcons: Major work on implementation and limits the number of supported shapes (It will break when custom or standard shapes are bigger than 128 if we use one byte).\n\n\n\nI think the use case for supporting custom  geo classes is important so I would prefer the second option.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16145268",
            "date": "2017-08-29T13:20:21+0000",
            "content": "I have actually changed my mind. The first option is so much cleaner to implement and it is totally generic and the extra byte does not generate noticable difference in performance (as expected). \n\nI do not like so much the complexity added by option 2. \n\nWhat do you think?\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16145287",
            "date": "2017-08-29T13:28:48+0000",
            "content": "Ignacio Vera, I'm good with option (1) as well.  I think it will be unlikely that most users extend classes in geo3D since it already provides a pretty rich set of shapes.\n\nIf you want to propose a patch along these lines, I'd be happy to commit it.  Otherwise I will not likely get to it today. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16145435",
            "date": "2017-08-29T15:01:10+0000",
            "content": "Attached the patch. I could not run precommit locally because some errors in some other classes but I want to check if the apporoach I am taking is OK with you.\n\nI cannot add the lookup table for supported classes in the interface so I created a protected class to contain it. I am actually using a List to hold the classes. Is that ok with you?\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16147136",
            "date": "2017-08-30T12:15:00+0000",
            "content": "Hi Ignacio Vera, the latest patch looks good except for one thing: you are using an arraylist as a registry.  I strongly suggest a HashMap<Class<?>, Integer> instead.  Can you update your patch accordingly? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16147254",
            "date": "2017-08-30T13:52:08+0000",
            "content": "Attached a new patch using hashmaps for the lookup. I am creating two as I need to do it in both directions.\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16147334",
            "date": "2017-08-30T14:41:07+0000",
            "content": "Commit faad8ae6a873785b9f32bc28f3f4a17805868b2b in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=faad8ae ]\n\nLUCENE-7936: Improve serialization by using a shortcut way of describing classes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16147342",
            "date": "2017-08-30T14:42:12+0000",
            "content": "Commit d87d973376f73a6334a76ffda071a06a0c6ce7c1 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d87d973 ]\n\nLUCENE-7936: Improve serialization by using a shortcut way of describing classes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16147343",
            "date": "2017-08-30T14:42:59+0000",
            "content": "Commit 6df86df4e0eb77848a9adaab5cebf09a8091d605 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6df86df ]\n\nLUCENE-7936: Improve serialization by using a shortcut way of describing classes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16207386",
            "date": "2017-10-17T11:03:52+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar"
        }
    ]
}