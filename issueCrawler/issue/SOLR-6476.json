{
    "id": "SOLR-6476",
    "title": "Create a bulk mode for schema API",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The current schema API does one operation at a time and the normal usecase is that users add multiple fields/fieldtypes/copyFields etc in one shot.\n\n\nexample \n\ncurl http://localhost:8983/solr/collection1/schema -H 'Content-type:application/json'  -d '{\n    \"add-field\": {\n        \"name\":\"sell-by\",\n        \"type\":\"tdate\",\n        \"stored\":true\n    },\n    \"add-field\":{\n        \"name\":\"catchall\",\n        \"type\":\"text_general\",\n        \"stored\":false\n    }\n}\n\n\nor \n\ncurl http://localhost:8983/solr/collection1/schema -H 'Content-type:application/json'  -d '{\n    \"add-field\":[ {\n        \"name\":\"sell-by\",\n        \"type\":\"tdate\",\n        \"stored\":true\n    },\n    {\n        \"name\":\"catchall\",\n        \"type\":\"text_general\",\n        \"stored\":false\n    }]\n}",
    "attachments": {
        "SOLR-6476.patch": "https://issues.apache.org/jira/secure/attachment/12669094/SOLR-6476.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-14135682",
            "date": "2014-09-16T16:33:24+0000",
            "content": "A first cut of working patch. No testcases , "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14137387",
            "date": "2014-09-17T15:29:20+0000",
            "content": "This time with testcases and support for add-copy-field and add-type "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14140272",
            "date": "2014-09-19T10:07:28+0000",
            "content": "I plan to commit this soon "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14144491",
            "date": "2014-09-23T07:17:41+0000",
            "content": "Noble, I looked at your latest patch and I found a few issues:\n\n\n\tThe bulk schema api should be added to TestCloudManagedSchemaConcurrent\n\tTestBulkSchemaAPI has lots of backslash-double-quotes in JSON strings - those are way easier to look at if you convert the backslash-double-quotes to single-quotes and pass the string to the json() method.\n\tOne of the tests should have a non-trivial fieldtype definition, like at least one analyzer.\n\tIn SchemaManager.doOperation(), you limit retries to MAX_TRIES when there is a SchemaChangedInZkException, but none of the other schema APIs do that - why not let it continue until success?\n\tSchemaManager.ADD_FIELD_TYPE should be \"add-field-type\" instead of \"add-type\".  (Solr could introduce a non-field type at some point in the future; even with \"-field-\" added, it's still not the longest command.)\n\tSchemaManager has lots of non-generic collections - I looked at a couple, and they could be generified - maybe they all could?\n\tIndexSchema.addDynamicFields() is missing the persist param you added to all the other add*() methods; also, it always persists, even when called from the bulk mode schema api.\n\tMost of the add*() javadocs in IndexSchema say that persistence always happens, but it doesn't if persist=false\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14144498",
            "date": "2014-09-23T07:25:09+0000",
            "content": "The bulk schema api should be added to TestCloudManagedSchemaConcurrent\n\nWhy can't it be in a new class?\n\nTestBulkSchemaAPI has lots of backslash-double-quotes in JSON strings\n\nThat was deliberate. Most JSON writers use double quotes. \n\nIn SchemaManager.doOperation(), you limit retries to MAX_TRIES\n\nI can make the variable bigger , but I somehow hate infinite loops\n\nSchemaManager.ADD_FIELD_TYPE should be \"add-field-type\" \n\nsure\n\nSchemaManager has lots of non-generic collections \n\nwill fix them\n\nIndexSchema.addDynamicFields() is missing the persist param you added to all the other add*() methods; \n\nwill fix\n\nMost of the add*() javadocs in IndexSchema say that persistence always happens, but it doesn't if persist=false\n\nWe need to remove those methods without persist option\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14144500",
            "date": "2014-09-23T07:26:04+0000",
            "content": "I also want to ask the preference of \"add-field\" Vs \"addField\" in the command names  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14144724",
            "date": "2014-09-23T12:11:02+0000",
            "content": "New patch posted with changes incorporated "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14147819",
            "date": "2014-09-25T14:52:52+0000",
            "content": "\nThe bulk schema api should be added to TestCloudManagedSchemaConcurrent\n\nWhy can't it be in a new class?\n\nIt can, but you don't have any distributed tests at all.  All existing schema API modification functionality gets distributed testing via TestCloudManagedSchemaConcurrent at this point.\n\n\nTestBulkSchemaAPI has lots of backslash-double-quotes in JSON strings\n\nThat was deliberate. Most JSON writers use double quotes.\n\nYou misunderstand me: SolrTestCaseJ4.json(String) converts single-quotes to double-quotes.  Several Solr tests use it to get most-JSON-writer-compatible output without causing backslash-eye-bleed.  I'm suggesting you do the same.\n\n\nIn SchemaManager.doOperation(), you limit retries to MAX_TRIES\n\nI can make the variable bigger , but I somehow hate infinite loops\n\nIt keeps retrying when another schema modification request gets in first.  Please fix this - you didn't change anything at all here.  There is no way we should be giving up here just because other modifications are happening.\n\n\nSchemaManager.ADD_FIELD_TYPE should be \"add-field-type\"\n\nsure\nI also want to ask the preference of \"add-field\" Vs \"addField\" in the command names\n\nThanks - I like \"add-field\" better, but either would be fine.\n\n\nSchemaManager has lots of non-generic collections\n\nwill fix them\n\nI only see one modification here (you added <String> on the left hand side but forgot to put in the diamond operator on the right side), still lots of non-generic collection usages - is there a problem with fixing the others?\n\n\nMost of the add*() javadocs in IndexSchema say that persistence always happens, but it doesn't if persist=false\n\nWe need to remove those methods without persist option\n\nYou removed some sugar methods, specifically for adding a single dynamic field, but left other sugar methods intact, e.g. addField() - why the inconsistency?  I personally think sugar methods are fine - that's why I put them there - but if you're going to remove them, please be consistent.\n\nAnd the javadocs are still wrong:\n\n\tthe persist param isn't listed on addFieldTypes() and addDynamicFields()\n\tthe javadocs for all the methods say the methods will always persist.  This is wrong.\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14147824",
            "date": "2014-09-25T14:55:18+0000",
            "content": "FYI Noble Paul, I have create a review request on ReviewBoard to compare the previous patch I reviewed with your latest: https://reviews.apache.org/r/26037/ "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14147935",
            "date": "2014-09-25T16:32:50+0000",
            "content": "It can, but you don't have any distributed tests at all.\n\nI should fix that. May be separately\n\n\nYou removed some sugar methods,\n\nYeah, the class was getting very hard to read with all the sugar methods and I prefer them removed\n\n\n\nYou misunderstand me: SolrTestCaseJ4.json(String) \n\nok , I got it . I'll fix it\n\nI'll fix the javadocs , in the next patch.\n\n\n\nIt keeps retrying when another schema modification request gets in first. Please fix this - you didn't change anything at all here. There is no way we should be giving up here just because other modifications are happening.\n\nI disagree with this idea. It is not necessary that every command has to succeed. Whatever sucseeds , will have to do so with the given time/resources. Otherwise , it should just fail "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14150045",
            "date": "2014-09-26T21:44:45+0000",
            "content": "It keeps retrying when another schema modification request gets in first. Please fix this - you didn't change anything at all here. There is no way we should be giving up here just because other modifications are happening.\n\n+1\n\nThe closest analogy is something like AtomicLong.incrementAndGet()\nThose implementations try forever.  It would be exceedingly rare for starvation for any amount of time... but if we say it can fail then clients need to implement their own try-until-success loop (which won't succeed any faster!) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14150364",
            "date": "2014-09-27T03:23:50+0000",
            "content": "Yonik Seeley\n\nLet us look at it this way. This command is issued most likely by a user over http. Normally people expect a command to succeed or fail within a few seconds. They would be more than glad to be presented with an error message than waiting forever. HTTP may timeout after some time too\n\nThe closest analogy is something like AtomicLong.incrementAndGet()\n\nyes, they are similar . But, that is just doing a CAS inside a CPU which can do a zillion ops per second. Here we are talking about a distributed operation where each try can take a a few 100 ms.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14151124",
            "date": "2014-09-28T15:19:28+0000",
            "content": "This is complete tangential, but I wanted to get other's thinking about it....\n\nA while ago, Stefan and I tried to allow schema.xml to be edited from the admin UI. \nSee: https://issues.apache.org/jira/browse/SOLR-5287\n\nUwe pointed out that writing arbitrary XML to a server is a security problem so we pulled things out. It's actually in limbo in trunk currently marked as a blocker.\n\nIs there any way the managed schema functionality could be warped in the Admin UI to allow editing for the schema file? I'm forever wishing that I could do that.... I suppose it would require that the managed schema is used though...\n\nAnyway, feel free to ignore this entirely or open a new JIRA if it sparks some ideas. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14151128",
            "date": "2014-09-28T15:35:24+0000",
            "content": "A while ago, Stefan and I tried to allow schema.xml to be edited from the admin UI. \n\nI want to move to a system where the users are not aware of schema.xml . It should be an internal detail. Exactly the same way I deal with my RDBMS/Cassandra (or whatever) . The way a user thinks of my RDBMS is as follows\n\n\n\tStartup the server first\n\tuse A DDL to create a schema\n\tDuring the lifecycle of the system I use more DDL to add/remove fields\n\tI use a command like \"describe table' to know the current schema. (We have  a REST API )\n\tI don't really care about how the server stores the schema/config or whatever\n\n\n\nTo achieve tis goal , we must stop thinking about the system in terms of xmls and we should start thinking about the APIs as the DDL for Solr. \n\nThe term 'managed schema' will have no relevance. schema will always be 'managed' and the the adjective 'managed' must go away  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14151134",
            "date": "2014-09-28T16:04:40+0000",
            "content": "Works for me. The only thing I'll strongly weigh in on here is that the admin UI must be able to access at least the \"describe table\" functionality, and ideally the ability to change the schema definition from the admin UI. Ditto with accessing the rest of the configuration information. There are just waaay too many situations \"in the field\" where actually seeing what the server is working with (as opposed to what the ops person thinks they've configured) on a running instance is critical to troubleshooting.\n\nCurrently this is all done via the admin UI and the \"files\" link, although you can't edit there of course.\n\nNot quite sure how all this applies to, say, solrconfig.xml though. I guess we'll see as things develop. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14151137",
            "date": "2014-09-28T16:15:50+0000",
            "content": "the \"files link\" is a problem. Instead we should just have a prominent way to access \"schema\" which should display what is the current list of fields , types etc.\n we need to eventually de-prioritize the raw file view.   "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14151790",
            "date": "2014-09-29T15:27:57+0000",
            "content": "The only outstanding issue AFAIK is the no:of reties. whether it should be finite or infinite. I believe all user interacting APIs should be coded to fail gracefully. If we can resolve that I can commit this "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14151974",
            "date": "2014-09-29T18:09:38+0000",
            "content": "The only outstanding issue AFAIK is the no:of reties. whether it should be finite or infinite.\n\n(There are other outstanding issues - I'll list them in another comment after this one.)\n\nI still think continuous retrying when there are competing updates is the right thing to do.\n\nHow about this: in SOLR-6249, Timothy Potter added request param updateTimeoutSecs to fail Schema API requests unless they succeed within the given time.  We could add checking of this timeout to the update-retry loop if it's provided, but when it's not, we allow the update-retry loop to continue ad infinitum.\n\nIn any case, the patch on this issue needs to be changed to make bulk Schema API requests aware of the new updateTimeoutSecs param and perform the same all-replicas-in-sync check that the other Schema API methods now have. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14152025",
            "date": "2014-09-29T18:33:38+0000",
            "content": "Previously mentioned outstanding issues:\n\n\n\tOne of the tests should have a non-trivial fieldtype definition, like at least one analyzer.\n\tSchemaManager has lots of non-generic collections - I looked at a couple, and they could be generified - maybe they all could?\n\tMost of the add*() javadocs in IndexSchema say that persistence always happens, but it doesn't if persist=false\n\n\n\nNew things I noticed today:\n\n\n\tSchemaManager has zero javadocs.  More would be good.\n\tAFAICT, a bulk Schema API request with a new field using a new field type in the same request can fail depending on the order of the specified operations, e.g. this will fail because \"newtype\" won't exist when SchemaManager tries to add \"newfield\" (caveat: untested):\n\n\n{\n  \"add-field\" : { \"name\":\"newfield\", \"type\":\"newtype\" }, \n  \"add-field-type\" : { \"name\":\"newtype\", \"class\":\"solr.StrField\" }\n}\n\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14152063",
            "date": "2014-09-29T18:54:28+0000",
            "content": "AFAICT, a bulk Schema API request with a new field using a new field type in the same request can fail depending on the order of the specified operations\n\nYes it fails. Works as designed. This is exactly the same behavior you will see in an RDBMS as well. Order is important "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14152117",
            "date": "2014-09-29T19:21:48+0000",
            "content": "One of the tests should have a non-trivial fieldtype definition, like at least one analyzer.\n\nIt is not supported yet. Pls correct me if I am wrong. does the current REST API support it? \n\nMost of the add*() javadocs in IndexSchema say that persistence always happens, but it doesn't if persist=false\n\nIt says \"* @param persist to persist or not\" . Isn't it right?\n\n\nSchemaManager has zero javadocs. More would be good.\n\nIt is not a class for others to use . But , it will be added "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14152339",
            "date": "2014-09-29T21:38:24+0000",
            "content": "\nOne of the tests should have a non-trivial fieldtype definition, like at least one analyzer.\n\nIt is not supported yet. Pls correct me if I am wrong. does the current REST API support it?\n\nYes.  See TestManagedSchemaFieldTypeResource.\n\n\nMost of the add*() javadocs in IndexSchema say that persistence always happens, but it doesn't if persist=false\n\nIt says \"* @param persist to persist or not\" . Isn't it right?\n\nThis is what I'm talking about: \"Copies this schema, adds the given fields to the copy, then persists the new schema.\"\n\n\nSchemaManager has zero javadocs. More would be good.\n\nIt is not a class for others to use . But , it will be added\n\nThanks.  Javadocs (or rather comments of any kind) are for maintainers too, not just users.  Here's an example where javadocs/comments would help a maintainer: SchemaManager.Operation.getMetaWithout().  What does that thing do?  (Hint: the name of the method doesn't tell you.) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14152356",
            "date": "2014-09-29T21:51:01+0000",
            "content": "\nAFAICT, a bulk Schema API request with a new field using a new field type in the same request can fail depending on the order of the specified operations\n\nYes it fails. Works as designed. This is exactly the same behavior you will see in an RDBMS as well. Order is important\n\nOrder is not important in schema.xml, and in plenty of other contexts.  This order dependence will need to be explicitly documented. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14153356",
            "date": "2014-09-30T16:29:17+0000",
            "content": " SOLR-6249 features applied.\n\nAdded javadocs and added complex field types in tests\n\nOrder is not important in schema.xml, and in plenty of other contexts. This order dependence will need to be explicitly documented.\n\nThis will have to be documented in the API documentation in reference guide "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14153438",
            "date": "2014-09-30T17:35:41+0000",
            "content": "Thanks for the changes, Noble, those look fine - two new issues:\n\n(edit: System.getCurrentTimeMillis() -> currentTimeMillis())\n\n\n\tDidn't Mark Miller convert all timing stuff in Solr to use nanoTime() instead of currentTimeMillis()?  If so, shouldn't we use nanoTime() here too?  (This applies to Timothy Potter's SOLR-6249 work as well.)\n\tIn SchemaManager.waitForOtherReplicasToUpdate(), called from doOperations(), you send -1 in as maxWaitSecs to ManagedIndexSchema.waitForSchemaZkVersionAgreement() when the timeout has been exceeded, but AFAICT negative values aren't handled appropriately there, e.g. it gets sent in unexamined to ExecutorService.invokeAll():\n\n\n\n\n  private List<String> doOperations(List<Operation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.currentTimeMillis();\n    [...]\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        [...]\n  }\n\n  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && [...]){\n        [...]\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement([...],\n            getTimeLeftInSecs(timeout, startTime));\n      }\n    }\n  }\n  private int getTimeLeftInSecs(int timeout, long startTime) {\n    long timeLeftSecs = timeout -  ((System.currentTimeMillis() - startTime) /1000);\n    return (int) (timeLeftSecs > 0 ?timeLeftSecs: -1);\n  }\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14154760",
            "date": "2014-10-01T12:52:22+0000",
            "content": "actually System.currentTimeMillis() is fine if used in the same thread . And if it is used in different threads it can give wrong values. However , for uniformity I shall change it  to System.nanoTime() "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14154925",
            "date": "2014-10-01T15:20:49+0000",
            "content": "Commit 1628734 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1628734 ]\n\nSOLR-6476 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14154971",
            "date": "2014-10-01T15:46:51+0000",
            "content": "Noble, you apparently ignored this comment I made earlier when you committed - it's still a problem:\n\n\nIn SchemaManager.waitForOtherReplicasToUpdate(), called from doOperations(), you send -1 in as maxWaitSecs to ManagedIndexSchema.waitForSchemaZkVersionAgreement() when the timeout has been exceeded, but AFAICT negative values aren't handled appropriately there, e.g. it gets sent in unexamined to ExecutorService.invokeAll():\n\nTwo more issues:\n\n1. It's better form to use the conversion function for nanoseconds->milliseconds rather than having constant conversion factors - you have (starting at line #159 in SchemaManager):\n\n\nlong timeLeftSecs1 = timeout -  ((System.nanoTime() - startTime) /1000000);\n[...]\nlong timeLeftSecs = timeout -  ((System.nanoTime() - startTime) /1000000);\n\n\n\nBut everywhere else in Solr, e.g. line #178 in HttpShardHandler:\n\n\nssr.elapsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n\n\n\n2. Aren't you going to backport this to branch_5x? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14154984",
            "date": "2014-10-01T15:58:16+0000",
            "content": "Commit 1628747 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1628747 ]\n\nSOLR-6476 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14154985",
            "date": "2014-10-01T15:58:53+0000",
            "content": "Aren't you going to backport this to branch_5x? \n\nyes but I am waiting for Timothy Potter to port the changes from SOLR-6249 tobe ported first "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14154989",
            "date": "2014-10-01T16:07:12+0000",
            "content": "Thanks Noble, your last commit fixed the two issues I mentioned.  +1 to resolve once you've backported. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14155455",
            "date": "2014-10-01T20:34:53+0000",
            "content": "actually System.currentTimeMillis() is fine if used in the same thread . And if it is used in different threads it can give wrong values.\n\nIt's nothing to do with the number of threads. currentTimeMillis uses the wall time and is not guaranteed to be monotonic. So if the sysadmin or ntp for example changes time (or horror, if your system time uses local time and you cross a DST transition), the difference in value between two measurements is not guaranteed to reflect the actual duration of time. So in this case for example you might end up violating the timeout altogether. nanoTime essentially exposes a counter which keeps increasing, so while it has no bearing on the system time (so a value by itself is meaningless), differences are guaranteed to be accurate.  (Well, as long as the platform supports it, which is almost everywhere except for some random old versions of Windows). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14155458",
            "date": "2014-10-01T20:37:56+0000",
            "content": "+1. If measuring elapsed time, please use nanoTime and not currentTimeMillis. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14158446",
            "date": "2014-10-03T20:00:34+0000",
            "content": "Commit 1629301 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1629301 ]\n\nSOLR-6476 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169317",
            "date": "2014-10-13T14:01:26+0000",
            "content": "Commit 1631397 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1631397 ]\n\nSOLR-6476 refactored to get the Operation class outside "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169321",
            "date": "2014-10-13T14:04:42+0000",
            "content": "Commit 1631400 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1631400 ]\n\nSOLR-6476 refactored to get the Operation class outside "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169349",
            "date": "2014-10-13T14:37:56+0000",
            "content": "Commit 1631420 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1631420 ]\n\nSOLR-6476 change the error message "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169350",
            "date": "2014-10-13T14:39:08+0000",
            "content": "Commit 1631421 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1631421 ]\n\nSOLR-6476 change the error message "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14171305",
            "date": "2014-10-14T18:20:00+0000",
            "content": "People hate repeated keys in JSON... we should avoid adding more of that if possible.\nInstead of:\n\n{\n  \"add-field\": {...},  // field1\n  \"add-field\":{...}    // field2\n}\n\n\nHow about:\n\n{\n  \"add-field\": [ \n     {...},    // field1\n     {...}     // field2\n   ]\n}\n\n\n\nAnd you can continue to still offer a simple form for a single field:\n\n{\n  \"add-field\": {...}    // field1\n}\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14171320",
            "date": "2014-10-14T18:25:32+0000",
            "content": "actually both formats are supported.I will ensure that the documentation carries both examples\n\nBut it is useful when order is important. \n\nFor the /update path it was a not a great choice because they are usually written down by libraries which don't know how to write it . schema is mostly written by hand. and humans are fine writing the repeated stuff if it helps readability "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14174891",
            "date": "2014-10-17T09:35:36+0000",
            "content": "Commit 1632525 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1632525 ]\n\nSOLR-6476 error message fixed "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14174893",
            "date": "2014-10-17T09:37:51+0000",
            "content": "Commit 1632526 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1632526 ]\n\nSOLR-6476 error message fixed "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14229513",
            "date": "2014-12-01T08:02:11+0000",
            "content": "Commit 1642641 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1642641 ]\n\nSOLR-6476 refactored bulk schema APIs and other read REST APIs to use standard RequestHandler mechanism "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14229617",
            "date": "2014-12-01T09:59:20+0000",
            "content": "Commit 1642660 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1642660 ]\n\nSOLR-6476 removing othe vestiges of config REST APIs "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14229879",
            "date": "2014-12-01T14:58:19+0000",
            "content": "This issue seems to have broken the trunk build. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14229933",
            "date": "2014-12-01T15:58:01+0000",
            "content": "hmm...perhaps I needed a clean - JettyWebappTest was failing, but it passes for me on a new checkout. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14229961",
            "date": "2014-12-01T16:18:44+0000",
            "content": "Commit 1642705 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1642705 ]\n\nSOLR-6476 reference to a deleted servlet cleaned up "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14231432",
            "date": "2014-12-02T12:58:12+0000",
            "content": "Commit 1642862 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1642862 ]\n\nSOLR-6476 refactored bulk schema APIs and other read REST APIs to use standard RequestHandler mechanism "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332808",
            "date": "2015-02-23T05:02:01+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}