{
    "id": "LUCENE-2672",
    "title": "speed up automaton seeking in nextString",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "While testing, i found there are some queries (e.g. wildcard ?????????) that do quite a lot of backtracking.\n\nnextString doesn't handle this particularly well, when it walks the DFA, if it hits a dead-end and needs to backtrack, it increments the bytes, and starts over completely.\n\nalternatively it could save the path information in an int[], and backtrack() could return a position to restart from, instead of just a boolean.",
    "attachments": {
        "LUCENE-2672.patch": "https://issues.apache.org/jira/secure/attachment/12455634/LUCENE-2672.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-27T04:47:53+0000",
            "content": "here is a prototype patch, needs more testing and benchmarking. ",
            "author": "Robert Muir",
            "id": "comment-12915116"
        },
        {
            "date": "2010-09-27T06:06:52+0000",
            "content": "here's another iteration, now that we have saved state, turns a run() into a single step() ",
            "author": "Robert Muir",
            "id": "comment-12915136"
        },
        {
            "date": "2010-09-27T09:25:17+0000",
            "content": "ok, heres a committable patch.\n\ni put a safety in here to address my own concerns. so the optimization doesnt apply to infinite dfas \n(but these typically dont backtrack anyway)\n\ni found a little perf problem with Standard's terms dict cache, we should avoid clone() on these deep hierarchies\nif theres a chance it will get called a lot. since the class in question is private static, i changed how clone() was impled.\n\nand i turned off terms dict cache for automaton, it doesnt seem to help in any query i test, and for some\nworst-case ones it slows things down (even with the cloning fix)... and queries like this \"trash\" the cache anyway. ",
            "author": "Robert Muir",
            "id": "comment-12915247"
        },
        {
            "date": "2010-09-27T17:17:47+0000",
            "content": "Committed revision 1001781.\n\nI left out the terms dict cache clone() thing, its something we can revisit if we ever need to... \nnot sure its a big deal especially if we can use it smarter (such as LUCENE-2674) ",
            "author": "Robert Muir",
            "id": "comment-12915371"
        }
    ]
}