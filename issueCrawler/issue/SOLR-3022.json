{
    "id": "SOLR-3022",
    "title": "AbstractPluginLoader does not log caught exceptions",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I was setting up a new 4.x environment but forgot to put a custom Analyzer in the classpath.  Unfortunately AbstractPluginLoader didn't log the exception and it took a long time for me to figure out why \"No cores were created\".",
    "attachments": {
        "SOLR-3022.patch": "https://issues.apache.org/jira/secure/attachment/12510087/SOLR-3022.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "James Dyer",
            "id": "comment-13183506",
            "date": "2012-01-10T19:37:43+0000",
            "content": "AbstractPluginLoader (Trunk Only) is using the wrong constructor to create SolrExceptions, causing \"alreadyLogged\" to be set to true just prior to calling \"logOnce\".  This patch fixes the problem. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13183791",
            "date": "2012-01-11T02:00:14+0000",
            "content": "Hmmm, this didn't fix the problem for me in trunk. I defined a bogus requestHandler like this:\n<requestHandler name=\"/eoe\" class=\"eoe.solr.XmlUpdateRequestHandler\"> </requestHandler>\nand got the same annoying \"No cores were created\" error message with no clue why.\n\nBut if I put similar logic in RequestHandlers, around line 175 (the catch block in initHandlersFromConfig) I get useful traces. Or even just use SolrException.log rather than logOnce.\n\nBut this behavior is different than 3x and I'm wondering if anyone has a clue why things were changed and whether the change was intentional. I looked over some back copies of these files, and they haven't changed in a looong time with the one caveat that the error is getting re-thrown in 4x but just falls out in 3x. \n\nSo I'm looking for someone to weigh in on what the right thing to do is. I'm well aware that logging everything makes logging almost useless, but this behavior is suppressing useful information.\n\nBTW, I ran into this same problem with a plugin I was fooling around with a while ago, I'm glad you're pursuing it, thanks.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13184262",
            "date": "2012-01-11T18:34:58+0000",
            "content": "Looking at this a bit more, there are a couple of issues:\nIt looks like the change in behavior is a results of deprecating SolrConfig.severeErrors. Specifically, there is a bit of code in SolrDispatchFilter that prints out the severeErrors if:\n\nif( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ){\nprint stuff\n}\n\nWell, aborgOnConfigurationError is also deprecated with the comment:\n@deprecated all cores now abort on configuration error regardless of configuration\n\nBut apparently they no longer print out the stack trace that is helpful. And the line in 3x solrconfig.xml that set abortOnConfigurationError=true has been removed so it defaults to false. But even when true, printStackTrace doesn't print out on trunk, I don't quite know why. I hacked some stuff and going into that loop and printing out getMessage() from every Throwable in that collection does print a message. But I'm not going to worry about that now...\n\n\nI wonder it this is related to this deprecation comment in SolrConfig.xml for severeErrors:\n\"@deprecated All exceptions encountered during config parsing are now thrown by the respective constructors, preventing initialization.\"\n\n\n*********\nThe other issue is that two SolrException c'tors hard code \"logged=true\", which puzzles me:\n\n  public SolrException(ErrorCode code, Throwable th) \n{\n    super(th);\n    this.code=code.code;\n    logged=true;  <== what?\n  }\n\nWould it make more sense to do something like:\n   if (th instanceof SolrException) \n{\n      logged = ((SolrExcption)th).logged;\n    }\n else \n{\n      logged = true;\n    }\n\nAnd something similar for the other constructor that hard-codes true that has this signature:\npublic SolrException(ErrorCode code, String msg, Throwable th)\n\nand let the default value of false stand otherwise? I could easily be persuaded that the else clause should be removed......\n\nAlthough this code hasn't changed since 3.x days, it still seems questionable to hard-code this to true.\n\nAnyway, the net-net of this is that we've lost some useful information. I'm not entirely comfortable with changing the constructors for SolrException to remove the hard-coded \"true\" without running it by folks. I would argue that doing what I outlined above makes sense, and if that results in more stack traces than we want people should use the c'tor that sets the logged value. What do you think? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13184279",
            "date": "2012-01-11T18:53:16+0000",
            "content": "I had noticed that problem constructor in SolrException also.  I think it needs to be changed.  Its used all over the place and in most cases, its a \"new SolrException\" being created and subsequently not being logged.  But why should a developer have to dig through the constructors to check for gotchas like this?\n\nHere's a patch that adds a new constructor so developers can specify their intentions:\n\n\npublic SolrException(ErrorCode code, Throwable th, boolean alreadyLogged) \n\n\n\nAnd also changes the problem constructor to:\n\npublic SolrException(ErrorCode code, Throwable th) {\n\tsuper(th);\n\tthis.code=code.code;\n\tif(th instanceof SolrException) {\n\t\tthis.logged=((SolrException) th).logged;\n\t} else {\n\t\tthis.logged = false;\n\t}\n}\n\n\n\nReviewing all the places this is used, I left most of them alone but changed a few to suppress logging (with the new constructor) in cases where the problem is obviously being logged already.  I also kept the suppressed logging for caught&wrapped \"InterrupedException\"s.\n\nDoing this will make the app a bit nosier but then again, each of these exceptions will log only once (right?).  If we apply this, I wouldn't be surprised if there might be a case or two we will find it needs to be changed back to suppress the log message.  But these should be easy to handle after-the-fact, right?\n\nProblem is, I'm not sure if this handles the issue you've discovered, when you have a bad RequestHandler in solrconfig.xml.  I tried this with this new patch applied and I still didn't get a meaningful message logged.  I'm now trying to get the latest trunk to deploy properly in my ide so I can debug... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13184298",
            "date": "2012-01-11T19:18:33+0000",
            "content": "looks like this is related to SOLR-2191 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13184359",
            "date": "2012-01-11T20:30:40+0000",
            "content": "Mark:\n\nYou're right, this is totally related. I think it would be better to conditionally set the logged value based on the current value when passing in a throwable. How about if James and I handle the SolrException bit? Or are you about to check in 2191? and we can close this one?\n\nJames:\n\nI had the same problem. There's another c'tor just above that one that looks like this:\n\n  public SolrException(ErrorCode code, String msg, Throwable th) {\n    this(code,msg,th,true);\n  }\n\n\n\nThat's the actual one being called in the RequestHandler case.\n\nI'm not a huge fan of zillion c'tors, perhaps all we really need is a comment for this c'tor\n\n public SolrException(ErrorCode code, String msg, Throwable th, boolean alreadyLogged) \n\n\nthat the msg can be null? In fact, it looks like both the msg and th parameters can all be null as far as the base java classes are concerned, so I wonder if we wouldn't be better off just making those c'tors all use the same one, like:\n\n\n  public SolrException(ErrorCode code, String msg) {\n    this(code, msg, null, false);\n  }\n\n  public SolrException(ErrorCode code, String msg, boolean alreadyLogged) {\n    this(code, msg, null, alreadyLogged);\n  }\n\n  public SolrException(ErrorCode code, String msg, Throwable th, boolean alreadyLogged) {\n    super(msg, th);\n    this.code = code.code;\n    logged = alreadyLogged;\n  }\n\n  public SolrException(ErrorCode code, String msg, Throwable th) {\n    this(code, msg, th, (th instanceof SolrException) ? ((SolrException) th).logged : false);\n  }\n\n  public SolrException(ErrorCode code, Throwable th) {\n    this(code, null, th, (th instanceof SolrException) ? ((SolrException) th).logged : false);\n  }\n\n\n\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13184391",
            "date": "2012-01-11T20:59:57+0000",
            "content": "Here's a patch that changes both of the \"problem constructors\" by leaving \"alreadyLogged\" as false unless the passed-in Throwable happens to be a SolrException, in which case \"alreadyLogged\" is inherited.\n\nI also quickly reviewed each place this is used and manually switched to suppress logging in places it made sense.  By the way, going through this revealed a lot of places where developers took pains to create nice loggable messages, but the SolrException constructor is making it so they'll never see the light of day.\n\nAs for the duplication of SOLR-2191, it would be nice if we can maybe apply something simple like this patch first and see if it seems to meet everyone's need.  Then if its not enough or if there still seems to be a reason to completely eliminate \"logOnce\", that could be done as a second step?  This way we can fix the lost logging messages now and still have the option to do more (or less) later.\n\nI agree having lots of constructors is not usually a good idea.  In an Exception class it might be nice though to retain them, giving developers added convenience.  (and besides, its a lot of grunt work to get rid of the extra ones  ).   \n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13184632",
            "date": "2012-01-12T01:21:43+0000",
            "content": "James:\n\nI wasn't advocating going through and replacing all the current constructors in the code, I was advocating just causing all the current constructors to funnel through the \"one true constructor\", more for aesthetics I suppose than function, although it does allow less room for fixing something up in one place and forgetting the other. And not introducing yet another constructor, I think we have enough already .\n\nYeah, I think it'll be a bit of a phased approach. I'll see what I can do to get this patch and SOLR-2191 committed by next week, and maybe start up a patch for deprecating logOnce & etc. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13184997",
            "date": "2012-01-12T14:58:01+0000",
            "content": "r: 1230573\n\nJames:\nThanks. As part of this whole shootin' match, I decided to just do the SolrException part of it, which fixes the original problem. All the rest of the work will go into 3022 which I'll start on shortly. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13184999",
            "date": "2012-01-12T15:00:17+0000",
            "content": "Last comment. No CHANGES.txt entries for this as 3022 will encompass it and will also be the real set of changes. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13185005",
            "date": "2012-01-12T15:02:26+0000",
            "content": "Final version of patch. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13185021",
            "date": "2012-01-12T15:42:44+0000",
            "content": "Committed to 3x, r: 1230599 "
        }
    ]
}