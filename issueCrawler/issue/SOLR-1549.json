{
    "id": "SOLR-1549",
    "title": "SqlEntityProcessor does not recognize onError attribute",
    "details": {
        "affect_versions": "1.4,                                            1.5",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Unfortunately, the SqlEntityProcessor does not recognize the value of an entity's onError attribute in DIH's data config file. Therefore, in cases where SQL exceptions are thrown somewhere inside the constructor of ResultSetIterators (which is an inner class of JdbcDataSource), Solr's import exits immediately, even though onError is set to continue or skip.\n\nIn my opinion, use cases exist that will profit from database related exception handling inside of Solr (e.g., in cases where the existence of certain database tables or views is not predictable).",
    "attachments": {
        "SOLR-1549.patch": "https://issues.apache.org/jira/secure/attachment/12444026/SOLR-1549.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alexander Kanarsky",
            "id": "comment-12865378",
            "date": "2010-05-08T01:53:59+0000",
            "content": "Attached is the patch for JdbcDataSource to use the onError value properly and handle SQLException thrown when the actual data does not match the column type. This is the patch for DIH version included in Solr 1.4 distribution.   "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872626",
            "date": "2010-05-27T22:09:28+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043617",
            "date": "2011-06-03T16:46:08+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106424",
            "date": "2011-09-16T14:51:03+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412078",
            "date": "2012-07-11T22:25:56+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429869",
            "date": "2012-08-07T03:43:50+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13445554",
            "date": "2012-08-31T01:26:24+0000",
            "content": "\n\tThere is no indication that anyone is actively working on this issue, so removing 4.0 from the fixVersion\n\tassigning to James to assess the existing patch for reconsideration\n\n\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13445986",
            "date": "2012-08-31T14:26:49+0000",
            "content": "The patch looks simple and straightforward but I question the wisdom of allowing anything else but \"abort\" in the case of an SqlException.  You can't simply continue and read the next row of the query when this happens.  My thinking is \"onAbort\" is more for handling whole text documents that for some reason don't parse correctly.\n\nI guess if it was a child entity doing n+1 selects it could just go do the next select with the following document.  Perhaps if the parent entity sometimes passes it a wrongly-typed join value this would happen and it would be ok to go on, assuming the next doc would have a correct join value?  But then again, you could just craft your sql to handle this contingency in these cases.\n\nSo if Sascha, Alexander or anyone can explain better why this is a good idea, and possibly contribute a unit test then perhaps we can commit this.  Otherwise I think its a \"won't fix\". "
        },
        {
            "author": "James Dyer",
            "id": "comment-13447720",
            "date": "2012-09-04T14:30:27+0000",
            "content": "Closing for now as this issue has not generated interest.  It doesn't seem wise to try to continue if there is an SqlException. "
        },
        {
            "author": "Alexander Kanarsky",
            "id": "comment-13449018",
            "date": "2012-09-05T19:08:54+0000",
            "content": "James, just to clarify the ratio behind the patch - in my case it was a MySQL problem of 'zero' timestamps, when the TIMESTAMP field with zero value was causing this exception:\n\nSQLException: Cannot convert value '0000-00-00 00:00:00' from column 5 to TIMESTAMP.\n\nClearly a data data issue with valid SQL; so I did the patch to skip a few documents with such timestamps rather than fail the whole full import. However, I learned later that MySQL connector has a 'zeroDateTimeBehavior' connection option that could be set to 'convertToNull' rater than default 'exception' so this solved the problem as well. \n\nBut I agree that there are very few cases like that when you might want to continue in case of SqlException. "
        }
    ]
}