{
    "id": "SOLR-606",
    "title": "spellcheck.colate doesn't handle multiple tokens properly",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "originally posted as part of SOLR-572:\n\n  https://issues.apache.org/jira/browse/SOLR-572?focusedCommentId=12608487#action_12608487\n\nthe new spellcheck.collate feature seems to exhibit some strange behaviors when handed a query with multiple tokens.\n\n\n{\n \"responseHeader\":{\n  \"params\":{\n\t\"q\":\"redbull air show\"}},\n  \"spellcheck\":{\n   \"suggestions\":[\n\t\"redbull\",[\n\t \"suggestion\",[\"redbelly\"]],\n\t\"show\",[\n\t \"suggestion\",[\"shot\"]],\n\t\"collation\",\"redbelly airshotw\"]}}\n\n\n\nin this case, note the fields are incorrectly concatenated (no space between tokens, left over 'w' from input string)\n\n\n{\n \"responseHeader\":{\n  \"params\":{\n\t\"q\":\"redbull air show\",\n\t\"spellcheck.q\":\"redbull air show\"}},\n \"spellcheck\":{\n  \"suggestions\":[\n\t\"redbull air show\",[\n\t \"suggestion\",[\"redbull singers\"]],\n\t\"collation\",\"redbull singersredbull air show\"]}}\n\n\n\nthis is slightly different - the suggestions are still concatenated without a space, but the collation is way off.\n\n--Geoff",
    "attachments": {
        "SOLR-606.patch": "https://issues.apache.org/jira/secure/attachment/12384802/SOLR-606.patch",
        "handler.component.SpellCheckComponent-collate-patch.txt": "https://issues.apache.org/jira/secure/attachment/12388218/handler.component.SpellCheckComponent-collate-patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12608604",
            "date": "2008-06-26T22:13:26+0000",
            "content": "Can you try this patch and post the results?  It doesn't fix the problem, but I'm having a hard time reproducing it and it adds some more output to the spellcheck.extendedResults=true option.\n\nThus, you will need to add extendedResults to your flags. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12608605",
            "date": "2008-06-26T22:14:55+0000",
            "content": "Also, can you post your spell check configuration? "
        },
        {
            "author": "Geoffrey Young",
            "id": "comment-12608614",
            "date": "2008-06-26T22:22:46+0000",
            "content": "I'm not in charge of any of the environments, so it might take me some time to apply the patch.  hopefully I'll be able to report back tomorrow.\n\nif it matters, my spelling field is defined as so:\n\n    <fieldType name=\"spell\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\nmy spellcheck component configuration was straight from the docs, save changing the queryAnalyzerFieldType to match the above. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12608758",
            "date": "2008-06-27T12:44:10+0000",
            "content": "Hmmm, I suspect the issue is in the type of tokens created.  Let me try that out. "
        },
        {
            "author": "Geoffrey Young",
            "id": "comment-12608770",
            "date": "2008-06-27T13:40:13+0000",
            "content": "results with your patch applied:\n\n\n{\n \"responseHeader\":{\n  \"status\":0,\n  \"QTime\":24283},\n \"command\":\"build\",\n \"response\":{\"numFound\":0,\"start\":0,\"docs\":[]\n },\n \"spellcheck\":{\n  \"suggestions\":[\n\t\"queryConversion\",[\n\t \"token\",[\n\t  \"text\",\"redbull\",\n\t  \"start\",0,\n\t  \"end\",7],\n\t \"token\",[\n\t  \"text\",\"air\",\n\t  \"start\",8,\n\t  \"end\",11],\n\t \"token\",[\n\t  \"text\",\"show\",\n\t  \"start\",12,\n\t  \"end\",16]],\n\t\"redbull\",[\n\t \"numFound\",1,\n\t \"startOffset\",0,\n\t \"endOffset\",7,\n\t \"origFreq\",0,\n\t \"suggestion\",{\n\t  \"frequency\":1,\n\t  \"word\":\"redbelly\"}],\n\t\"show\",[\n\t \"numFound\",1,\n\t \"startOffset\",12,\n\t \"endOffset\",16,\n\t \"origFreq\",0,\n\t \"suggestion\",{\n\t  \"frequency\":1,\n\t  \"word\":\"shot\"}],\n\t\"correctlySpelled\",false,\n\t\"collation\",\"redbelly airshotw\"]}}\n\n\n\nand with spellcheck.q defined it's\n\n\n{\n \"responseHeader\":{\n  \"status\":0,\n  \"QTime\":20,\n  \"params\":{\n\t\"echoParams\":\"all\",\n\t\"indent\":\"on\",\n\t\"echoParams\":\"all\",\n\t\"indent\":\"on\",\n\t\"spellcheck.extendedResults\":\"true\",\n\t\"q\":\"redbull air show\",\n\t\"spellcheck.q\":\"redbull air show\",\n\t\"spellcheck.collate\":\"true\",\n\t\"spellcheck\":\"true\",\n\t\"wt\":\"json\"}},\n \"response\":{\"numFound\":0,\"start\":0,\"docs\":[]\n },\n \"spellcheck\":{\n  \"suggestions\":[\n\t\"queryConversion\",[\n\t \"token\",[\n\t  \"text\",\"redbull air show\",\n\t  \"start\",0,\n\t  \"end\",0]],\n\t\"redbull air show\",[\n\t \"numFound\",1,\n\t \"startOffset\",0,\n\t \"endOffset\",0,\n\t \"origFreq\",0,\n\t \"suggestion\",{\n\t  \"frequency\":1,\n\t  \"word\":\"redbull singers\"}],\n\t\"correctlySpelled\",false,\n\t\"collation\",\"redbull singersredbull air show\"]}}\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12609600",
            "date": "2008-07-01T14:05:56+0000",
            "content": "Hi Geoff,\n\nCan you comment on the use of the KeywordTokenizer for spelling?  I'm not saying it's not a bug, but my guess is it is why I'm not seeing the issue w/ my setup.  http://wiki.apache.org/solr/SpellCheckerRequestHandler has some recommendations on setup of the spell field that are still applicable.\n\nI'll try to figure something out for KeywordTokenizer at some point this week or next. "
        },
        {
            "author": "Geoffrey Young",
            "id": "comment-12609607",
            "date": "2008-07-01T14:33:54+0000",
            "content": "sure \n\nthe choice of keywords is intentional.  I don't want word suggestions but rather phrase suggestions.\n\nI'm searching almost exclusively over proper names - band names (\"celine dion\"), event names (\"wicked: a new musical\"), venue names (\"staples center\"), etc.\n\nin my case, it does me zero good to suggest a phrase that doesn't exist, even if the word parts do exist independently in my data.\n\nfor example...\n\n  o \"hannah montana\" is an \"artist\"\n  o a user mis-types \"hanna montanna\"\n  o spellchecker thinks \"hanna\"  is spelled correctly (based on the presence of \"Jake Hanna\" among other artists), and suggests \"montana\" (based on \"Montana Rangers\", etc)\n  o spellchecker gives me \"hanna montana\" as a suggestion... which then also misses since it doesn't exist (and the stemmer doesn't seem to catch the trailing 'h', but even if it did, there are other examples I can give)\n\nnot surprisingly, using keywords instead of raw tokens for the dictionary gives me back only \"things\" that have exact matches, like \"hannah montana\", or \"aerosmith\" for \"arrow smith\", \"boston red sox\" for \"boston red socks\", etc.\n\nI know I'm not doing what most people are interested in, but it's very important for us to match phrases instead of raw words due to the crazy kinds of ways bands name themselves.\n\nfwiw,  I found this bug as I was playing around with the new component - for the reasons mentioned above I'm not at all interested in the collation feature, so I don't consider this a priority for me.  others may stumble upon it, though, which is why I reported it.\n\nHTH, and thanks for working out the spelling component in general - it's most excellent.\n "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622508",
            "date": "2008-08-14T10:38:41+0000",
            "content": "I recently ran into this exact issue and I found the problem.\nThe collation is created by replacing the misspelled tokens with the suggestions using a StringBuilder:\n\n\nfor (Iterator<Map.Entry<Token, String>> bestIter = best.entrySet().iterator(); bestIter.hasNext();) {\n        Map.Entry<Token, String> entry = bestIter.next();\n        Token tok = entry.getKey();\n        collation.replace(tok.startOffset(), tok.endOffset(), entry.getValue());\n}\n\n\n\nAs you can see it's just replacing the relevant tokens in the original query. However, if the length of a suggestion doesn't equal the length of the original token, all offsets used after that replacement are no longer valid thus randomly yielding incorrect results.\nI fixed that by keeping track of that difference and adding it to the token offsets. For this to work I had to change the HashMap to a LinkedHashMap since this solution depends on the iteration order of the Tokens to correspond to their occurrence in the string.\nI attached a patch reflecting those changes: handler.component.SpellCheckComponent-collate-patch.txt "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12622630",
            "date": "2008-08-14T18:18:40+0000",
            "content": "Committed  revision 685983.  Also added in a unit test that caused it to fail w/o the patch. "
        }
    ]
}