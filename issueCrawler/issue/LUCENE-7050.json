{
    "id": "LUCENE-7050",
    "title": "Improve the query cache heuristic to detect costly queries",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Term queries, phrase queries and their combinations through boolean queries should not be cached too agressively since they can efficiently make use of skip lists. However we also have a number of queries that in practice need to visit all matches anyway like PrefixQuery, TermsQuery, PointInSetQuery, PointRangeQuery, so caching them more agressively can help avoid computing all documents that match in the whole index again and again.",
    "attachments": {
        "LUCENE-7050.patch": "https://issues.apache.org/jira/secure/attachment/12790166/LUCENE-7050.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15169337",
            "author": "Adrien Grand",
            "date": "2016-02-26T17:10:48+0000",
            "content": "One problem is that some of these queries, like TermsQuery and PointInPolygonQuery are in different modules (queries and sandbox respectively) so we can't refer to them from the caching policy. We could add a new API but it does't feel right to me to add one only for the caching use-case. So maybe we could rely on the class name for popular costly queries that are in other modules? Here is a patch that demonstrates the idea. It is a bit hacky but maybe that's not too bad since the hack is very contained? "
        },
        {
            "id": "comment-15169355",
            "author": "Robert Muir",
            "date": "2016-02-26T17:20:50+0000",
            "content": "On the idea of a method or interface, are we sure caching is the only use case? What about eg reordering clauses for more efficiency and other potential uses?\n\nIm not opposed to the hacky solution since its just a default impl... But if we can come up with a very nice name... Then i think it would be cleaner for queries to confess that processing just a few docs is just as costly as processing all docs. "
        },
        {
            "id": "comment-15169437",
            "author": "Adrien Grand",
            "date": "2016-02-26T18:03:09+0000",
            "content": "Thanks for the feedback. Then I suggest to push this change and separately explore whether such a flag on queries (or maybe weights) could be used to better execute queries. "
        },
        {
            "id": "comment-15171651",
            "author": "Adrien Grand",
            "date": "2016-02-29T09:41:50+0000",
            "content": "What about eg reordering clauses for more efficiency and other potential uses? [...]  it would be cleaner for queries to confess that processing just a few docs is just as costly as processing all docs.\n\nI opened LUCENE-7055. "
        },
        {
            "id": "comment-15171684",
            "author": "ASF subversion and git services",
            "date": "2016-02-29T10:05:50+0000",
            "content": "Commit 44324d3dfe34fb436595f8c15bfc97eb39564b1f in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=44324d3 ]\n\nLUCENE-7050: Cache TermsQuery and point queries more aggressively. "
        }
    ]
}