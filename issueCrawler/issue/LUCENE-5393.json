{
    "id": "LUCENE-5393",
    "title": "remove codec byte[] cloning in BinaryDocValues api",
    "details": {
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "I can attack this (at least in trunk/5.0, we can discuss if/when it should happen for 4.x).\n\nSee the mailing list for more discussion. this was done intentionally, to prevent lots of reuse bugs.\n\nThe issue is very simple, lots of old fieldcache-type logic has it because things used to be immutable Strings or because they rely on things being in a large array:\n\n\nbyte[] b1 = get(doc1);\nbyte[] b2 = get(doc2);\n// some code that expects b1 to be unchanged.\n\n\n\nCurrently each get() internally is cloning the bytes, for safety. but this is really bad for code like faceting (which is going to decompress integers and never needs to save bytes), and its even stupid for things like fieldcomparator (where in general its doing comparisons, and only rarely needs to save a copy of the bytes for later).\n\nI can address it with lots of tests (i added a lot in general anyway since the time of adding this TODO, but more would make me feel safer).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13869442",
            "author": "Mikhail Khludnev",
            "content": "Robert Muir can you briefly describe testing approach? I guess it should be something like AssertingDocValuesProducer which can wrap any DVP and assert that callers doesn't modify bytes[]. Then we need to cover all DV clients by these asserts. Do I get you right or what you have in mind? ",
            "date": "2014-01-13T12:01:22+0000"
        },
        {
            "id": "comment-13870219",
            "author": "Robert Muir",
            "content": "Mikhail, I think its fairly involved, there are two issues:\n\n\n\tensuring client calls clone() when it has to save for later\n\tensuring no lucene code tries to change any codec-private bytes\n\n\n\nThese are two different things, currently the clone() stuff is never a problem, but some work to ensure everything is functional:\n\n\trelaxation of some current tests (the current behavior is actually tested, see BaseDocValuesFormatTestCase.testCodecUsesOwnBytes etc).\n\tfixing/testing the behavior of Sorted/SortedSet enums, as in some codecs these are backed by BinaryDocValues api as well\n\tadding tests for all consumers of these things.\n\n\n\nThe second part (changing bytes) is unrelated actually, and some user of Direct or Memory or whatever can probably cause big trouble today already. But your idea is really cool, e.g. on init the Asserting could take some checksum or something and verify it on close. To fix that, we should probably fix Asserting to be able to wrap any codec (currently: it is hardcoded). Or maybe Asserting isnt the best place to do it, but i like the idea.\n\nIn general before i did this, i want to just do a hack patch with luceneutil faceting to have a more formal version of the benchmark you ran, so we know the benefits. ",
            "date": "2014-01-14T01:02:31+0000"
        },
        {
            "id": "comment-14017669",
            "author": "Robert Muir",
            "content": "see LUCENE-5703 ",
            "date": "2014-06-04T12:53:05+0000"
        }
    ]
}