{
    "id": "SOLR-3962",
    "title": "For the match-all-docs query *:*, (e)dismax parser passes \"*:*\" to tokenizer, sub-optimal (<1.0) hit scores",
    "details": {
        "affect_versions": "3.5,                                            3.6,                                            4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "My understanding is that the special match-all-docs query \"*:*\" shouldn't call tokenizers and all hits should have score 1.0.  In fact, this is usually the case.\n\nBut, when all of these conditions are met, suboptimal (<1.0) hit scores are reported:\n\n\tdismax or edismax parser is used\n\ta tokenizer that splits \"*:*\" into multiple tokens is used\n\tpf parameter is specified for a field that uses the above tokenizer\n\n\n\n\nUse case:\n\n\tWe created a Japanese tokenizer which happens to break \"*:*\" into three tokens representing each symbols.\n\tOur client uses this tokenizer for Japanese with edismax on Solr 3.6.\n\tThey have pf=text^0.5 in the default section in solrconfig.xml.\n\tWhen search is done with the query string \"*:*\", all the hits from Japanese has the score much less than 1.0.\n\n\n\nBelow is how to simulate this situation with a NGramTokenizer.  (It is not realistic.)\n\n1. Run Solr with the default setting.  Post all *.xml docs in examples/exampledocs.\n2. Stop the Solr.\n3. Add this fieldType:\n\n    <fieldtype name=\"text_fake\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n       <analyzer type=\"index\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.NGramTokenizerFactory\"\n           maxGramSize=\"1\"\n           minGramSize=\"1\" />\n      </analyzer>\n    </fieldtype>\n\n\n4. Change the field definition of \"name\" to use \"text_fake\".\n5. Restart Solr\n6. GET this URL:\nhttp://localhost:8983/solr/select?indent=on&version=2.2&q=*%3A*&fq=&start=0&rows=10&fl=*%2Cscore&qt=&wt=&debugQuery=on&defType=edismax&pf=name\n\nBelow is an excerpt of query debug output.  Notice that \"*:*\" is expanded with spaces to \"* : *\":\n\n...\n<doc>\n<str name=\"id\">ati</str>\n<str name=\"compName_s\">ATI Technologies</str>\n<str name=\"address_s\">\n33 Commerce Valley Drive East Thornhill, ON L3T 7N6 Canada\n</str>\n<long name=\"_version_\">1415830106362871808</long>\n<float name=\"score\">0.07443535</float>\n</doc>\n</result>\n<lst name=\"debug\">\n<str name=\"rawquerystring\">*:*</str>\n<str name=\"querystring\">*:*</str>\n<str name=\"parsedquery\">\n(+MatchAllDocsQuery(*:*) DisjunctionMaxQuery((name:\"* : *\")))/no_coord\n</str>\n\n\n\nAnd here is a partial stack trace at the time the tokenizer is called from the query parser:\n\nNGramTokenizer.incrementToken() line: 112\t\nCachingTokenFilter.fillCache() line: 90\t\nCachingTokenFilter.incrementToken() line: 55\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParserBase).newFieldQuery(Analyzer, String, String, boolean) line: 513\t\nExtendedDismaxQParser$ExtendedSolrQueryParser.newFieldQuery(Analyzer, String, String, boolean) line: 1018\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParserBase).getFieldQuery(String, String, boolean) line: 474\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(SolrQueryParser).getFieldQuery(String, String, boolean) line: 169\t\nExtendedDismaxQParser$ExtendedSolrQueryParser.getQuery() line: 1163\t\nExtendedDismaxQParser$ExtendedSolrQueryParser.getAliasedQuery() line: 1105\t\nExtendedDismaxQParser$ExtendedSolrQueryParser.getQueries(Alias) line: 1145\t\nExtendedDismaxQParser$ExtendedSolrQueryParser.getAliasedQuery() line: 1073\t\nExtendedDismaxQParser$ExtendedSolrQueryParser.getFieldQuery(String, String, int) line: 989\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParserBase).handleQuotedTerm(String, Token, Token) line: 1082\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParser).Term(String) line: 462\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParser).Clause(String) line: 257\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParser).Query(String) line: 181\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParser).TopLevelQuery(String) line: 170\t\nExtendedDismaxQParser$ExtendedSolrQueryParser(QueryParserBase).parse(String) line: 120\t\nExtendedDismaxQParser.addShingledPhraseQueries(BooleanQuery, List<Clause>, Map<String,Float>, int, float, int) line: 506\t\nExtendedDismaxQParser.parse() line: 338\t\nExtendedDismaxQParser(QParser).getQuery() line: 143\t\nQueryComponent.prepare(ResponseBuilder) line: 118\t\nSearchHandler.handleRequestBody(SolrQueryRequest, SolrQueryResponse) line: 192\t\nSearchHandler(RequestHandlerBase).handleRequest(SolrQueryRequest, SolrQueryResponse) line: 129\t\n...",
    "attachments": {},
    "issue_links": {},
    "comments": []
}