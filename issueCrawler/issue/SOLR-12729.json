{
    "id": "SOLR-12729",
    "title": "SplitShardCmd should lock the parent shard to prevent parallel splitting requests",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "AutoScaling"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "This scenario was discovered by the simulation framework, but it exists also in the non-simulated code.\n\nWhen IndexSizeTrigger requests SPLITSHARD, which is then successfully started and \u201ccompleted\u201d from the point of view of ExecutePlanAction, the reality is that it still can take significant amount of time until the moment when the new replicas fully recover and cause the switch of shard states (parent to INACTIVE, child from RECOVERY to ACTIVE).\n\nIf this time is longer than the trigger's waitFor the trigger will issue the same SPLITSHARD request again. SplitShardCmd doesn't prevent this new request from being processed because the parent shard is still ACTIVE. However, a section of the code in SplitShardCmd will realize that sub-slices with the target names already exist and they are not active, at which point it will delete the new sub-slices (SplitShardCmd:182).\n\nThe end result is an infinite loop, where IndexSizeTrigger will keep generating SPLITSHARD, and SplitShardCmd will keep deleting the recovering sub-slices created by the previous command.\n\nA simple solution is for the parent shard to be marked to indicate that it\u2019s in a process of splitting, so that no other split is attempted on the same shard. Furthermore, IndexSizeTrigger could temporarily exclude such shards from monitoring.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-09-03T12:07:58+0000",
            "content": "Shalin suggested that we could use an ephemeral znode to signal that a shard is in the process of being split. This way the lock would be automatically released on Overseer crash.\n\nWe should also check for stale locks, if eg. a sub-shard is permanently stuck in RECOVERY. This can be implemented in InactiveShardPlanAction, which is periodically invoked from the maintenance trigger. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16602080"
        },
        {
            "date": "2018-10-22T09:28:20+0000",
            "content": "Commit 8c70811f3a2a4deab8186b187909ac5c3615e6fb in lucene-solr's branch refs/heads/master from Andrzej Bialecki\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8c70811 ]\n\nSOLR-12729: Unlock the shard on error. ",
            "author": "ASF subversion and git services",
            "id": "comment-16658773"
        },
        {
            "date": "2018-10-22T10:39:19+0000",
            "content": "Commit f47acc4588346843f3a20d1e973fcfe3fdbe10c2 in lucene-solr's branch refs/heads/branch_7x from Andrzej Bialecki\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f47acc4 ]\n\nSOLR-12729: SplitShardCmd should lock the parent shard to prevent parallel splitting requests. ",
            "author": "ASF subversion and git services",
            "id": "comment-16658864"
        },
        {
            "date": "2018-10-22T10:39:20+0000",
            "content": "Commit 90c1804131108091c06dc50ccc3e4ed72c2a854d in lucene-solr's branch refs/heads/branch_7x from Andrzej Bialecki\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=90c1804 ]\n\nSOLR-12729: Unlock the shard on error. ",
            "author": "ASF subversion and git services",
            "id": "comment-16658865"
        }
    ]
}