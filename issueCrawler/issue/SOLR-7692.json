{
    "id": "SOLR-7692",
    "title": "Implement BasicAuth based impl for the new Authentication/Authorization APIs",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "This involves various components\nAuthentication\n\nA basic auth based authentication filter. This should retrieve the user credentials from ZK.  The user name and sha1 hash of password should be stored in ZK\n\nsample authentication json \n\n{\n  \"authentication\":{\n\n    \"class\": \"solr.BasicAuthPlugin\",\n    \"users\" :{\n      \"john\" :\"09fljnklnoiuy98 buygujkjnlk\",\n      \"david\":\"f678njfgfjnklno iuy9865ty\",\n      \"pete\": \"87ykjnklndfhjh8 98uyiy98\",\n       }\n  }\n}\n\n\n\nauthorization plugin\n\nThis would store the roles of various users and their privileges in ZK\n\nsample authorization.json\n\n\n{\n  \"authorization\": {\n    \"class\": \"solr.ZKAuthorization\",\n   \"user-role\" :{\n  \"john\" : [\"admin\", \"guest\"]\n  \"tom\" : 'dev'\n   }\n    \"permissions\": [\n       {\"name\":\"collection-edit\",\n         \"role\": \"admin\" \n       },\n       {\"name\":\"coreadmin\",\n         \"role\":\"admin\"\n       },\n       {\"name\": \"mycoll_update\",\n        \"collection\": \"mycoll\",\n        \"path\":[\"/update/*\"],\n        \"role\": [\"guest\",\"admin\"]\n      }]\n    }\n  }\n}\n\n \n\nWe will also need to provide APIs to create users and assign them roles",
    "attachments": {
        "SOLR-7692.patch": "https://issues.apache.org/jira/secure/attachment/12743341/SOLR-7692.patch",
        "SOLR-7757.patch": "https://issues.apache.org/jira/secure/attachment/12747308/SOLR-7757.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-02T16:30:36+0000",
            "author": "Noble Paul",
            "content": "first patch with basic tests ",
            "id": "comment-14612162"
        },
        {
            "date": "2015-07-02T17:24:19+0000",
            "author": "Mike Drob",
            "content": "\n+  public static AuthorizationResponse OK = new AuthorizationResponse(200);\n+  public static AuthorizationResponse FORBIDDEN = new AuthorizationResponse(403);\n+  public static AuthorizationResponse PROMPT = new AuthorizationResponse(401);\n\n\nPlease make these final.\n\n\n+  private static Set<String> EMPTY_NULL_SET;\n\n\nAlso final.\n\n\n+  @Override\n+  public void init(Map<String, Object> initInfo) {\n+    mapping.put(null, new WildCardSupportMap());\n+    Map map = (Map) initInfo.get(\"roles\");\n+    for (Object o : map.entrySet()) {\n+      Map.Entry e = (Map.Entry) o;\n+      String roleName = (String) e.getKey();\n+      usersVsRoles.put(roleName, readSet(map, roleName));\n+    }\n+    map = (Map) initInfo.get(\"permissions\");\n+    for (Object o : map.entrySet()) {\n+      Map.Entry e = (Map.Entry) o;\n+      Permission p = new Permission((String) e.getKey(), (Map) e.getValue());\n+      permissions.add(p);\n+      add2Mapping(p);\n+    }\n+  }\n\n\nIs it possible to use generic types instead of doing a bunch of casts? There's a bunch of other places with raw Map as well.\n\n\n+  //check permissions for a collection\n+  //return true = allowed, false=not allowed, null= resource requires a principal but none available\n+  private MatchStatus checkCollPerm(Map<String, List<Permission>> pathVsPerms,\n+                                AuthorizationContext context) {\n\n\nThis comment is misleading - probably left over from an earlier iteration.\n\n\nPlease add a test case that uses the salt when authenticating.\n\n\nDo you think it would be reasonable to split out the dependency between BasicAuthPlugin and ZkAuthentication? I could imagine somebody wanting to do BasicAuth backed by a different store, were it available.\n\n\nWill continue to dive deeper in a bit. ",
            "id": "comment-14612251"
        },
        {
            "date": "2015-07-02T17:28:14+0000",
            "author": "Anshum Gupta",
            "content": "Thanks Noble! this is much needed!\n\nI am yet to look at this, but can you separate out the 2 issues i.e. an authentication and an authorization?\n\nAlso, let's not call it zkAuth* plugins as they don't authenticate zk, but just use zk for implementation. The name might mislead users.\n\nI'll take a look at the actual code over the weekend. ",
            "id": "comment-14612259"
        },
        {
            "date": "2015-07-03T04:59:07+0000",
            "author": "Noble Paul",
            "content": "Thanks for your comments\n\nThis comment is misleading - probably left over from an earlier iteration.\n\nThe patch is Work in Progress . So the comments are from a former iteration\n\nPlease add a test case that uses the salt when authenticating.\nThe test case indeed checks with salt. There will be a test w/o salt as well\n\nDo you think it would be reasonable to split out the dependency between BasicAuthPlugin and ZkAuthentication\nYes, That is the plan . I've extracted separated the HTTP part and authentication part to two distinct classes. You should be able to extend the BasicAuthPlugin to provide your own Authentication impl\n\nThe name might mislead users.\n\nThe names are subject to change. Suggestions are welcome\n\n\ncan you separate out the 2 issues i.e. an authentication and an authorization?\n\nThere are a bunch of sub-tasks required\n1) Authentication\n2) Authorization\n3) API to manage the users/roles/permissions\n\n ",
            "id": "comment-14612838"
        },
        {
            "date": "2015-07-03T12:27:00+0000",
            "author": "Noble Paul",
            "content": "more features, support for http method, request parameters in  permissions etc \n\nwell known permissions such as collection-admin-read , collection-admin ",
            "id": "comment-14613164"
        },
        {
            "date": "2015-07-08T14:14:13+0000",
            "author": "Noble Paul",
            "content": "added APIs to edit BasicAuth/ZkBasedAuthorization ",
            "id": "comment-14618659"
        },
        {
            "date": "2015-07-13T00:02:14+0000",
            "author": "Anshum Gupta",
            "content": "Noble, can you split this out into 2 issues that can be committed and used independently? e.g. a user might just want to use basic auth e.g. if I know a person, I'll let him in but if I don't I won't and that shouldn't require an authorization plugin at all. Or use a different authorization mechanism with the simple auth. ",
            "id": "comment-14624073"
        },
        {
            "date": "2015-07-13T06:40:35+0000",
            "author": "Noble Paul",
            "content": "These are totally independent. So, users can mix and match these plugins as they wish ",
            "id": "comment-14624270"
        },
        {
            "date": "2015-07-15T14:21:37+0000",
            "author": "Noble Paul",
            "content": "watch added to /security.json . The plugins are reloaded when the content is modified ",
            "id": "comment-14628123"
        },
        {
            "date": "2015-07-15T16:05:58+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Would it make sense to split out the authc/authz framework changes and the plugins themselves into two separate issues? I think doing so will make it easier to follow the patches.\n\nCan we rename TestZkAuthentication to something more appropriate? It gives an impression that this is a test for ZK authentication, whereas it is actually a test suite for an authentication plugin that uses ZK as backing store.\n\nI haven't looked into the patch in great detail, but is it possible to drop the \"ZK\" part from the naming of the plugins and make ZK as one of many possible (and configurable) sources for credential stores for these plugins based on basicauth? ",
            "id": "comment-14628287"
        },
        {
            "date": "2015-07-15T16:50:17+0000",
            "author": "Noble Paul",
            "content": "Would it make sense to split out the authc/authz framework changes and the plugins themselves into two separate issues?\n\nI'm thinking of doing that..\n\nCan we rename TestZkAuthentication to something more appropriate?\n\nsure\n\nmake ZK as one of many possible (and configurable) sources for credential stores for these plugins based on basicauth?\n\nThe most common use case would be to use basic auth plugin and store the credentials elsewhere. The code is organized so that the credentials check is done in a separate class.  \nZkBasedAuthorizationPlugin cannot have another option . You can either use that or use something else altogether . Say, RangerAuthorizationPlugin ? ",
            "id": "comment-14628347"
        },
        {
            "date": "2015-07-16T12:03:05+0000",
            "author": "Noble Paul",
            "content": "more tests and some bug fixes.\n\nIshan Chattopadhyaya I have renamed some classes as you suggested ",
            "id": "comment-14629629"
        },
        {
            "date": "2015-07-17T12:55:33+0000",
            "author": "Noble Paul",
            "content": "more tests . renamed The ZkBasedAuthorizationPlugin to RulesBased AuthorizationPlugin ",
            "id": "comment-14631273"
        },
        {
            "date": "2015-07-20T12:06:19+0000",
            "author": "Noble Paul",
            "content": "I plan to commit this pretty soon. All inputs/comments are welcome ",
            "id": "comment-14633477"
        },
        {
            "date": "2015-07-21T14:25:42+0000",
            "author": "Noble Paul",
            "content": "some cleanup ",
            "id": "comment-14635176"
        },
        {
            "date": "2015-07-22T07:40:18+0000",
            "author": "Anshum Gupta",
            "content": "Noble, can you please split this into 2 sub-tasks -> 2 patches so we finally have 2 independent commits for 2 independent features?\nI plan to look at it later tonight/tomorrow. ",
            "id": "comment-14636445"
        },
        {
            "date": "2015-07-23T12:51:12+0000",
            "author": "Noble Paul",
            "content": "standard permissions names are streamlined ",
            "id": "comment-14638753"
        },
        {
            "date": "2015-07-23T17:40:32+0000",
            "author": "Don Bosco Durai",
            "content": "Noble Paul, sorry if this was discussed before in any other thread. Seems the user/password is now stored in ZK. Were there any consideration to support users from LDAP/AD?\n\nAssuming it is out of scope for this JIRA, what would it take to implement a configurable user repository? E.g. Use basic auth, but user can get authenticated against LDAP/AD or custom auth provider?\n\nThanks  ",
            "id": "comment-14639238"
        },
        {
            "date": "2015-07-23T17:46:20+0000",
            "author": "Noble Paul",
            "content": "Don Bosco Durai extend the class BasicAuthPlugin and override the method \n\n\n protected AuthenticationProvider getAuthenticationProvider(Map<String, Object> pluginConfig) }}\n\n\nwhich means , you will need to implement the AuthenticationProvider interface ",
            "id": "comment-14639250"
        },
        {
            "date": "2015-07-23T18:03:55+0000",
            "author": "Don Bosco Durai",
            "content": "Noble Paul, thanks. ",
            "id": "comment-14639287"
        },
        {
            "date": "2015-07-27T20:42:33+0000",
            "author": "Anshum Gupta",
            "content": "Noble Paul The last patch you uploaded fails compilation. To be clear, I'm talking about SOLR-7692.patch in isolation. ",
            "id": "comment-14643344"
        },
        {
            "date": "2015-07-27T20:46:15+0000",
            "author": "Noble Paul",
            "content": "sorry , you have to apply https://issues.apache.org/jira/secure/attachment/12747308/SOLR-7757.patch this first\nand then \nhttps://issues.apache.org/jira/secure/attachment/12747309/SOLR-7692.patch ",
            "id": "comment-14643348"
        },
        {
            "date": "2015-07-27T21:00:04+0000",
            "author": "Anshum Gupta",
            "content": "I'm getting the following compilation error on applying SOLR-7757.patch independently so breaking up wouldn't make sense unless at least one of them can compile/runs independently. Once that happens, it'd make sense for the second patch to depend on the first.\n\n    [mkdir] Created dir: /Users/anshumgupta/workspace/lucene-trunk3/solr/build/solr-core/classes/java\n    [javac] Compiling 854 source files to /Users/anshumgupta/workspace/lucene-trunk3/solr/build/solr-core/classes/java\n    [javac] /Users/anshumgupta/workspace/lucene-trunk3/solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.java:36: error: cannot find symbol\n    [javac] import org.apache.solr.security.RuleBasedAuthorizationPlugin;\n    [javac]                                ^\n    [javac]   symbol:   class RuleBasedAuthorizationPlugin\n    [javac]   location: package org.apache.solr.security\n    [javac] /Users/anshumgupta/workspace/lucene-trunk3/solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.java:101: error: cannot find symbol\n    [javac]         Map meta = RuleBasedAuthorizationPlugin.getMapValue(out, \"\");\n    [javac]                    ^\n    [javac]   symbol:   variable RuleBasedAuthorizationPlugin\n    [javac]   location: class SecurityConfHandler\n    [javac] Note: Some input files use or override a deprecated API.\n    [javac] Note: Recompile with -Xlint:deprecation for details.\n    [javac] Note: Some input files use unchecked or unsafe operations.\n    [javac] Note: Recompile with -Xlint:unchecked for details.\n    [javac] 2 errors\n\n ",
            "id": "comment-14643380"
        },
        {
            "date": "2015-07-28T00:46:12+0000",
            "author": "Anshum Gupta",
            "content": "Updated patch with some cleanup. I'm still hitting a test failure consistently with both the patches applied:\n\nant test  -Dtestcase=BasicAuthIntegrationTest -Dtests.method=testBasics -Dtests.seed=ADE11563338421BA -Dtests.slow=true -Dtests.locale=hi_IN -Dtests.timezone=America/Mazatlan -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\nAlso, does BasicAuthPlugin need to implement javax.servlet.Filter? ",
            "id": "comment-14643681"
        },
        {
            "date": "2015-07-28T07:36:09+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The SOLR-7757 patch still had compilation errors, since it depended on getValueMap() of RuleBasedAuthorizationPlugin, which is present in SOLR-7692.\n\nFixed that, and added patches based on the latest patches by Anshum. SOLR-7757 patch compiles fine now, in isolation. ",
            "id": "comment-14643994"
        },
        {
            "date": "2015-07-28T08:05:42+0000",
            "author": "Anshum Gupta",
            "content": "BasicAuthPlugin no longer extends javax.servlet.Filter. ",
            "id": "comment-14644035"
        },
        {
            "date": "2015-07-28T08:08:49+0000",
            "author": "Anshum Gupta",
            "content": "I've also moved the patch for SOLR-7757 to it's own issue.\n\nLet's separate out the authentication and authorization patches into different issues. As they are orthogonal, we should commit them separately.\n\nP.S: The unit test still fails consistently for me. ",
            "id": "comment-14644041"
        },
        {
            "date": "2015-07-28T10:54:27+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated the patch, fixing the test failure for BasicAuthIntegrationTest. ",
            "id": "comment-14644232"
        },
        {
            "date": "2015-07-28T10:57:47+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Let's separate out the authentication and authorization patches into different issues. As they are orthogonal, we should commit them separately.\n\n+1. However, although I agree that we should separate out the authc and authz parts into different issues, the current integration test (BasicAuthIntegrationTest) would need to be rewritten as it is using both the plugins together.  ",
            "id": "comment-14644236"
        },
        {
            "date": "2015-07-28T14:09:37+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "1. In Sha256AuthenticationProvider, line 106\n\n    try {\n      digest = MessageDigest.getInstance(\"SHA-256\");\n    } catch (NoSuchAlgorithmException e) {\n      BasicAuthPlugin.log.error(e.getMessage(), e);\n      return null;//should not happen\n    }\n\n\nShouldn't this be an exception, e.g. SolrException, thrown?\n\n2. In the sha256() method (same place as above), \n\npublic static String sha256(String password, String saltKey) {\n    MessageDigest digest;\n    try {\n      digest = MessageDigest.getInstance(\"SHA-256\");\n    } catch (NoSuchAlgorithmException e) {\n      BasicAuthPlugin.log.error(e.getMessage(), e);\n      return null;//should not happen\n   }\n    if (saltKey != null) {\n      digest.reset();\n      digest.update(Base64.decodeBase64(saltKey));\n    }\n\n    byte[] btPass = digest.digest(password.getBytes(StandardCharsets.UTF_8));\n    digest.reset();\n    btPass = digest.digest(btPass);\n    return Base64.encodeBase64String(btPass);\n  }\n\n\n\nI think we should reuse a digest instance, instead of creating one using the factory method for every request, as there are significant overheads to creating a new digest algorithm instance.\nReference: https://books.google.co.in/books?id=42etT_9-_9MC&pg=PT254&lpg=PT254\n\n3. For SolrJ support, I've added SOLR-7839.\n\n4. For internode communication, I think (please correct me if I'm wrong) the ThreadLocal approach won't work for cases when the internode request is made from a threadpool, from where the headers of the original request thread's ThreadLocal won't be accessible. I think we need something like SOLR-6625, where the request object can store the user principal / headers etc. and pass it along to the request interceptor as a context.\n\n5. As per our discussion offline, the internode request which are originated from a Solr node (not a subrequest of a main user request) cannot be secured this way. Either each node uses its own principal/credentials to send internode requests in such cases, or there's another secure mechanism of internode requests internal to Solr (e.g. asymmetric cryptographic mechanism, e.g. PKI), irrespective of the authc plugins used for user requests. ",
            "id": "comment-14644404"
        },
        {
            "date": "2015-08-26T13:06:03+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713200"
        }
    ]
}