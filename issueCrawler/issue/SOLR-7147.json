{
    "id": "SOLR-7147",
    "title": "Introduce new TrackingShardHandlerFactory for monitoring what requests are sent to shards during tests",
    "details": {
        "components": [
            "SolrCloud",
            "Tests"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "4.10.4",
            "5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "this is an idea shalin proposed as part of the testing for SOLR-7128...\n\nI created a TrackingShardHandlerFactory which can record shard requests sent from any node. There are a few helper methods to get requests by shard and by purpose.\n...\nI will likely move the TrackingShardHandlerFactory into its own issue because it is helpful for other distributed tests as well. I also need to decouple it from the MiniSolrCloudCluster abstraction.",
    "attachments": {
        "SOLR-7147.patch": "https://issues.apache.org/jira/secure/attachment/12700499/SOLR-7147.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-24T00:42:28+0000",
            "author": "Hoss Man",
            "content": "I created a TrackingShardHandlerFactory which can record shard requests sent from any node. There are a few helper methods to get requests by shard and by purpose.\n\nI like the idea ... hooking into the ShardHandlerFactory seems like a good solution to these types of problems...\n\nI will likely move the TrackingShardHandlerFactory into its own issue because it is helpful for other distributed tests as well.\n\nYeah, a top level class in the test-framework would be good, but...\n\nI'm not sure if a Map<String, List<ShardRequestAndParams>> is really the best solution here?\n\nIt's good enough for this small test case, but as a general solution ...  consider Test Classes were folks want to setup their distrib cluster, do a handfull of specific queries to monitor what gets sent to each shard, and then in other test methods crank out thousands of distrib queries.  the way this is setup, that's either going to eat up a ton of ram, or the test is going to eat up a ton of ram, or the test is going to need to be sprinkled with tons of calls to some clearOutShardHandlerTrackers() utility method\n\nperhaps instead, the TrackingShardHandlerFactory should have a setTrackingQueue/getTrackingQueue methods for a Queue<ShardRequestAndParams> (and ShardRequestAndParams should also have a String shard property - although isn't this already in the ShardRequest?).\n\nBy default, the Queue is null and TrackingShardHandlerFactory doesn't track anything \u2013 but if it's non-null, then the ShardHandler calls add(new ShardRequestAndParams(...) just before passing executing it.\n\nthis way, there is almost no overhead to using TrackingShardHandlerFactory unless/until a test explicitly specifies a Queue.  Test classes, for the portions of the test when they want to monitor shard requests, could call setTrackingQueue on a custom subclass of AbstractQueue that directly asserts things like...\n\nif (req.sreq.purpose & PURPOSE_GET_TOP_IDS) {\n  assertEquals(expected, req.sreq.getParams(FL));\n}\n\n\n .. alternatively, a LinkedBlockingQueue could be specified, and the test class could spin up an Executor that was would poll that Queue continuously inspecting them & recording info for processing/assert at the end of the test.\n\nat any point when the test case no longer cares about tracking, setTrackingQueue(null) again.\n\nThe simplier use case of what you're doing here could still pretty easily be supported, just by providing a simple special case Queue class that has a Map<String, List<ShardRequestAndParams>> getAll() method on it, and tests could do something like...\n\n\n  TrackAllQueue myQueue = TrackingShardHandlerFactory.setupTrackAllQueue(myMiniSolrCloudCluster, collectionName);\n  // .. do test stuff ..\n  TrackingShardHandlerFactory.setAllTrackingQueues(myMiniSolrCloudCluster, null)\n  List<ShardRequestAndParams> list = myQueye.getAll().get(coreUrl);\n  // ...\n\n\n\nI will likely move the TrackingShardHandlerFactory into its own issue because it is helpful for other distributed tests as well. I also need to decouple it from the MiniSolrCloudCluster abstraction.\n\nI think the main thing would be some static methods in TrackingShardHandlerFactory to get/set the TrackingQueue for all JettySolrRunners in a list, or on a MiniSolrCloudCluster (in which case it just pulls out the JettySolrRunners from there)\n\nwhat do you think? ",
            "id": "comment-14334171"
        },
        {
            "date": "2015-02-24T14:00:56+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Here's a patch which implements the ideas that Hoss outlined:\n\nTrackingShardHandlerFactory has the following API:\n\npublic synchronized void setTrackingQueue(Queue<ShardRequestAndParams> queue) {\n    this.queue = queue;\n  }\n\n  public synchronized Queue<ShardRequestAndParams> getTrackingQueue() {\n    return queue;\n  }\n\n  public synchronized boolean isTracking() {\n    return queue != null;\n  }\n\n\n\nThen there's a RequestTrackingQueue which has the following:\n\npublic ShardRequestAndParams getShardRequestByPurpose(ZkStateReader zkStateReader, String collectionName, String shardId, int purpose);\n\npublic List<ShardRequestAndParams> getShardRequests(ZkStateReader zkStateReader, String collectionName, String shardId);\n\npublic Map<String, List<ShardRequestAndParams>> getAllRequests();\n\npublic List<ShardRequestAndParams> getCollectionAdminRequests();\n\npublic List<ShardRequestAndParams> getCoreAdminRequests();\n\n\n\nThe getCollectionAdminRequests() and getCoreAdminRequests() methods are not implemented in this patch. ",
            "id": "comment-14334890"
        },
        {
            "date": "2015-02-24T16:52:24+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Patch which adds following static helper methods in TrackingShardHandlerFactory to enable tracking on all nodes:\n\npublic static void setTrackingQueue(MiniSolrCloudCluster cluster, Queue<ShardRequestAndParams> queue);\n\npublic static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue);\n\n\n\nI removed the proposed methods for tracking core admin and collection APIs. We can't track them with a shard handler factory and it is out of scope for this issue.\n\nI'm working on a test. ",
            "id": "comment-14335078"
        },
        {
            "date": "2015-02-25T07:13:22+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "\n\tAdded tests and javadocs\n\tAdded a method to return all core admin requests invoked by the Collection API\n\n\n\nI think this is ready. ",
            "id": "comment-14336132"
        },
        {
            "date": "2015-02-25T08:51:17+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I fixed some javadocs so that precommit could pass. ",
            "id": "comment-14336240"
        },
        {
            "date": "2015-02-25T13:14:25+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Added another test TestTrackingShardHandler2 which uses Solr's test harness instead of MiniSolrCloudCluster. The test is mostly a duplicate of TestTrackingShardHandler but I wanted to make sure it works with both MiniSolrCloudCluster and our test harness. ",
            "id": "comment-14336464"
        },
        {
            "date": "2015-02-25T13:29:18+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I thought about the tests more and finally decided to remove the MiniSolrCloudCluster based test. We're not really doing anything more than testing the setTrackingQueue method that accepts MiniSolrCloudCluster which internally delegates to setTrackingQueue(List<JettySolrRunner>).\n\nThis is ready. All tests pass. ant precommit passes. I'll commit this shortly. ",
            "id": "comment-14336476"
        },
        {
            "date": "2015-02-25T13:36:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662209 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1662209 ]\n\nSOLR-7147: Introduce new TrackingShardHandlerFactory for monitoring what requests are sent to shards during tests ",
            "id": "comment-14336477"
        },
        {
            "date": "2015-02-25T13:38:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662210 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662210 ]\n\nSOLR-7147: Introduce new TrackingShardHandlerFactory for monitoring what requests are sent to shards during tests ",
            "id": "comment-14336478"
        },
        {
            "date": "2015-02-25T20:20:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662300 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1662300 ]\n\nSOLR-7147: Handle multiple replicas correctly in getShardRequests ",
            "id": "comment-14337109"
        },
        {
            "date": "2015-02-25T20:22:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662301 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662301 ]\n\nSOLR-7147: Handle multiple replicas correctly in getShardRequests ",
            "id": "comment-14337115"
        },
        {
            "date": "2015-02-26T02:25:06+0000",
            "author": "Otis Gospodnetic",
            "content": "Is this TrackingShardHandlerFactory really useful only for tests?  Wouldn't this be a useful debugging tool in general? ",
            "id": "comment-14337723"
        },
        {
            "date": "2015-02-26T06:11:04+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Is this TrackingShardHandlerFactory really useful only for tests? Wouldn't this be a useful debugging tool in general?\n\nYeah, it is horrible for any non-test usage. Once you set the tracking queue, it will hold all shard requests including their parameter and the responses in memory. So I don't see it being generally useful in it's current form. ",
            "id": "comment-14337953"
        },
        {
            "date": "2015-02-27T18:34:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662777 from shalin@apache.org in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1662777 ]\n\nSOLR-7147: Introduce new TrackingShardHandlerFactory for monitoring what requests are sent to shards during tests ",
            "id": "comment-14340526"
        },
        {
            "date": "2015-03-05T15:36:30+0000",
            "author": "Michael McCandless",
            "content": "Bulk close for 4.10.4 release ",
            "id": "comment-14348919"
        }
    ]
}