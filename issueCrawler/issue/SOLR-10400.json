{
    "id": "SOLR-10400",
    "title": "refactor \"instanceof TrieFooField || instanceof FooPointsField\" to use \"FooValueFieldType\" marker interface",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "6.7",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "See previous comment from smiley in SOLR-9994...\n\nhttps://issues.apache.org/jira/browse/SOLR-9994?focusedCommentId=15875390&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15875390\n\n...we already have the NumericValueFieldType marker interface and children.",
    "attachments": {
        "SOLR-10400.patch": "https://issues.apache.org/jira/secure/attachment/12861792/SOLR-10400.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-04T01:16:56+0000",
            "content": "\n...we already have the NumericValueFieldType marker interface and children.\n\nActually, even better then using that marker interface we should just be using FieldType.getNumberType which saves us the need for reflection calls \u2013 particularly the repeated calls currently done in several \"if else if else if else\" contexts where ultimately the code was trying to do a \"switch\" like statement over the types of numerics \u2013 and now (in the attached patch) using FieldType.getNumberType: it can.\n\nThe attached patch fixes up the 3 places i found the \"instanceof TrieFooField || instanceof FooPointsField\" pattern...\n\n\n\tCollapsingQParserPlugin\n\tExpandComponent\n\tDocumentExpressionDictionaryFactory\n\t\n\t\tthis last one had an even simpler fix then using \"getNumberType\" \u2013 ultimately it just wanted \"getSortField()\"\n\t\n\t\n\n\n\nAs things stand, there are a few nocommits in the patch because I'm concerned about some edge cases that were ignored in the \"instanceof\" code that should probably throw errors.\n\nA bigger concern I have however is that i don't think there is enough test coverage of these code paths (particularly using points fields) for me to feel comfortable committing these changes until i have a chance to write some more tests. (I don't think they break anything not currently broken, but i'd like to be more confident that the current code isn't broken before i refactor it)\n ",
            "author": "Hoss Man",
            "id": "comment-15954446"
        },
        {
            "date": "2017-04-04T02:54:03+0000",
            "content": "Looks very nice Hoss!\n\nIn a couple cases I see you're throwing IOException if the type isn't supported but I think it should be SolrException with BAD_REQUEST? ",
            "author": "David Smiley",
            "id": "comment-15954498"
        },
        {
            "date": "2017-04-04T17:05:26+0000",
            "content": "In a couple cases I see you're throwing IOException if the type isn't supported but I think it should be SolrException with BAD_REQUEST?\n\nThat was a straight refactoring of the existing collapse code which throws IOException (which are later caught & rewrapped in SolrException)\n\nin general cleaning up collapse components error reporting/messages would probably be a good idea \u2013 but that's an orthoginal scope to this issue. ",
            "author": "Hoss Man",
            "id": "comment-15955433"
        },
        {
            "date": "2017-05-12T22:39:20+0000",
            "content": "Updated patch to ensure all modified components test points fields.\n\nAs things stand, there are a few nocommits in the patch because I'm concerned about some edge cases that were ignored in the \"instanceof\" code that should probably throw errors.\n\nThe nocommits were all in the expand component, concerning field types that weren't handled.  I actually simplified this code to only handle 32-bit numeric field types, and not worry about/throw erros for other field types, because the collapse qparser, which is required before the expand component runs, already validates the fields used; I added a collapse qparser test that explicitly tests that using 64-bit numeric fields causes exceptions to be thrown.\n\nI think it's ready to go.  I'll commit once precommit and Solr tests pass. ",
            "author": "Steve Rowe",
            "id": "comment-16008842"
        },
        {
            "date": "2017-05-12T23:39:20+0000",
            "content": "Commit cbc32130caec4e1d64d1b10dba2a0486b2263418 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cbc3213 ]\n\nSOLR-10400: Replace (instanceof TrieFooField || instanceof FooPointField) constructs with FieldType.getNumberType() or SchemaField.getSortField() where appropriate.\n\nConflicts:\n\tsolr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java ",
            "author": "ASF subversion and git services",
            "id": "comment-16008911"
        },
        {
            "date": "2017-05-12T23:39:24+0000",
            "content": "Commit b3eccb35eaa5fee4d0d6e9470c05f426f8d9035e in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b3eccb3 ]\n\nSOLR-10400: Replace (instanceof TrieFooField || instanceof FooPointField) constructs with FieldType.getNumberType() or SchemaField.getSortField() where appropriate. ",
            "author": "ASF subversion and git services",
            "id": "comment-16008912"
        }
    ]
}