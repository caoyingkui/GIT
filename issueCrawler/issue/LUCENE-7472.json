{
    "id": "LUCENE-7472",
    "title": "MultiFieldQueryParser.getFieldQuery() drops queries that are neither BooleanQuery nor TermQuery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.2.2",
            "6.3",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "From http://mail-archives.apache.org/mod_mbox/lucene-java-user/201609.mbox/%3c944985a6ac27425681bd27abe9d90602@ska-wn-e132.ptvag.ptv.de%3e, Oliver Kaleske reports:\n\n\nHi,\n\nin updating Lucene from 6.1.0 to 6.2.0 I came across the following:\n\nWe have a subclass of MultiFieldQueryParser (MFQP) for creating a custom type of Query, which calls getFieldQuery() on its base class (MFQP).\nFor each of its search fields, this method has a Query created by calling getFieldQuery() on QueryParserBase.\nUltimately, we wind up in QueryBuilder's createFieldQuery() method, which depending on the number of tokens (etc.) decides what type of Query to return: a TermQuery, BooleanQuery, PhraseQuery, or MultiPhraseQuery.\n\nBack in MFQP.getFieldQuery(), a variable maxTerms is determined depending on the type of Query returned: for a TermQuery or a BooleanQuery, its value will in general be nonzero, clauses are created, and a non-null Query is returned.\nHowever, other Query subclasses result in maxTerms=0, an empty list of clauses, and finally null is returned.\n\nTo me, this seems like a bug, but I might as well be missing something. The comment \"// happens for stopwords\" on the return null statement, however, seems to suggest that Query types other than TermQuery and BooleanQuery were not considered properly here.\nI should point out that our custom MFQP subclass so far does some rather unsophisticated tokenization before calling getFieldQuery() on each token, so characters like '*' may still slip through. So perhaps with proper tokenization, it is guaranteed that only TermQuery and BooleanQuery can come out of the chain of getFieldQuery() calls, and not handling (Multi)PhraseQuery in MFQP.getFieldQuery() can never cause trouble?\n\nThe code in MFQP.getFieldQuery dates back to\nLUCENE-2605: Add classic QueryParser option setSplitOnWhitespace() to control whether to split on whitespace prior to text analysis.  Default behavior remains unchanged: split-on-whitespace=true.\n(06 Jul 2016), when it was substantially expanded.\n\nBest regards,\nOliver",
    "attachments": {
        "LUCENE-7472.patch": "https://issues.apache.org/jira/secure/attachment/12831157/LUCENE-7472.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15536862",
            "author": "Steve Rowe",
            "date": "2016-09-30T19:45:33+0000",
            "content": "Patch with a fix that treats all non-BooleanQuery queries opaquely (like TermQuery), and adds a test for the SynonymQuery case that fails without the patch and succeeds with it. "
        },
        {
            "id": "comment-15543328",
            "author": "Adrien Grand",
            "date": "2016-10-03T20:27:31+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15545597",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T15:08:59+0000",
            "content": "Commit 4ecc9d8eeac781ecb5f141491057a57226f61c6a in lucene-solr's branch refs/heads/branch_6_2 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4ecc9d8 ]\n\nLUCENE-7472: move CHANGES.txt entry under 6.2.2 section "
        },
        {
            "id": "comment-15545598",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T15:09:03+0000",
            "content": "Commit 12e7384b35a92a366e74af5fd4aed4f555ffd2da in lucene-solr's branch refs/heads/branch_6_2 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=12e7384 ]\n\nLUCENE-7472: switch TestMultiFieldQueryParser.testSynonyms default split-on-whitespace to true (it's false on master/7.0) "
        },
        {
            "id": "comment-15545599",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T15:09:04+0000",
            "content": "Commit c398949d3788676bbf8b3f1ae7e819f851d20767 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c398949 ]\n\nLUCENE-7472: MultiFieldQueryParser.getFieldQuery() drops queries that are neither BooleanQuery nor TermQuery. "
        },
        {
            "id": "comment-15545600",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T15:09:06+0000",
            "content": "Commit 1963b1701d2c331daa452ae6d16fc754c3e84bc4 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1963b17 ]\n\nLUCENE-7472: switch TestMultiFieldQueryParser.testSynonyms default split-on-whitespace to true (it's false on master/7.0) "
        },
        {
            "id": "comment-15545601",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T15:09:08+0000",
            "content": "Commit 6739e075b4c1dedab3b49b1d299cd713135c1ec3 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6739e07 ]\n\nLUCENE-7472: MultiFieldQueryParser.getFieldQuery() drops queries that are neither BooleanQuery nor TermQuery. "
        },
        {
            "id": "comment-15545621",
            "author": "Steve Rowe",
            "date": "2016-10-04T15:16:13+0000",
            "content": "Pushed to master, branch_6x and branch_6_2, with slightly different testing on master versus the other two branches, since the default split-on-whitespace query parser option, which affects multi-term synonyms used in the added test, will change on master/7.0.\n\nOn java-user mailing list, Oliver Kaleske reported:\n\n\nI locally applied the patch on branch_6_2 (because that is closest to my current 6.2.1 dependency) and built Lucene from there.\nUsing the outcome in my application, the problem observed there is fixed. "
        },
        {
            "id": "comment-15546561",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T20:28:12+0000",
            "content": "Commit 64ed2b6492f9d9218ab26550127c5c206f3e25b1 in lucene-solr's branch refs/heads/branch_6_2 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=64ed2b6 ]\n\nLUCENE-7472: remove unused import "
        },
        {
            "id": "comment-15546562",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T20:28:15+0000",
            "content": "Commit 09e03c47c2c1842cbbd2b35bb698248737ba330d in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=09e03c4 ]\n\nLUCENE-7472: remove unused import "
        },
        {
            "id": "comment-15546588",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T20:38:38+0000",
            "content": "Commit 4e7c6141a2afaff454cfc364dd02c8abb838c218 in lucene-solr's branch refs/heads/branch_6_2 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4e7c614 ]\n\nLUCENE-7472: remove unused import "
        },
        {
            "id": "comment-15546589",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T20:38:40+0000",
            "content": "Commit f9e915b3dac62b101ae7b4be343dbf918ccd0389 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f9e915b ]\n\nLUCENE-7472: remove unused import "
        },
        {
            "id": "comment-15650242",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-11-09T08:37:40+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}