{
    "id": "LUCENE-1584",
    "title": "Callback for intercepting merging segments in IndexWriter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.4.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "For things like merging field caches or bitsets, it's useful to\nknow which segments were merged to create a new segment.",
    "attachments": {
        "LUCENE-1584.patch": "https://issues.apache.org/jira/secure/attachment/12404494/LUCENE-1584.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-03T01:12:16+0000",
            "content": "Patch is combined with LUCENE-1516. \n\nIndexWriter has a setSegmentMergerCallback method that is called\nin IW.mergeMiddle where the readers being merged and the newly\nmerged reader are passed to the SMC.mergedSegments method.\n\nI think we need to expose the SegmentReader segment name somehow\neither via IndexReader.getSegmentName or an interface on top of\nSegmentReader?   ",
            "author": "Jason Rutherglen",
            "id": "comment-12695204"
        },
        {
            "date": "2009-04-03T10:38:05+0000",
            "content": "I think this can be achieved, today, by making your own MergeScheduler wrapper, or by subclassing ConcurrentMergeScheduler and eg overriding the doMerge method?  If so, I'd prefer not to add a callback to IW. ",
            "author": "Michael McCandless",
            "id": "comment-12695318"
        },
        {
            "date": "2009-04-03T20:13:40+0000",
            "content": "I would like to move away from our current position of somewhat\nclosed APIs that require user classes be a part of the Lucene\npackages. \n\nIt's always best to reuse existing APIs, however we've migrated\nto OSGi which means anytime we need to place new classes in\nLucene packages, we need to rollout specific JARs (I think,\nperhaps it's more complex) for the few classes outside of our\nmain package classes. This makes deployment of search\napplications a bit more difficult and time consuming. \n\nA related thread regarding MergePolicy is at:\nhttp://markmail.org/thread/h5bxjflpcyejrcqg  ",
            "author": "Jason Rutherglen",
            "id": "comment-12695557"
        },
        {
            "date": "2009-04-04T13:53:37+0000",
            "content": "I'd like to step back and understand the wider use case / context that's driving this need (to know precisely when segments got merged).  EG if we fix Lucene's field cache, and Lucene's near real-time search manages CSF's efficiently in memory, does that address the use case behind this?\n\nIt's possible that we should simply make SegmentInfo(s) public, so that MergePolicy/Scheduler can be fully created external to Lucene, and track all specifics of why/when merges are happening.  But those APIs have a high surface area, and we do make changes over time. ",
            "author": "Michael McCandless",
            "id": "comment-12695742"
        },
        {
            "date": "2009-04-06T17:16:25+0000",
            "content": "I think it's good to take a step back, \"if we fix Lucene's field\ncache, and Lucene's near real-time search manages CSF's\nefficiently in memory\" fixes the use case. Relying on CSF coming\nin probably won't help this the case if it doesn't make it into\nthe 2.9 release. I like the callback method because it does not\nrely on passing segment infos around and instead uses the\nalready public IndexReader classes. ",
            "author": "Jason Rutherglen",
            "id": "comment-12696184"
        },
        {
            "date": "2009-04-07T09:08:46+0000",
            "content": "Jason once LUCENE-1516 is in, can you repost this patch?  It's hard to see what's new, here. ",
            "author": "Michael McCandless",
            "id": "comment-12696445"
        },
        {
            "date": "2009-04-07T12:58:30+0000",
            "content": ".bq I'd like to step back and understand the wider use case / context that's driving this need (to know precisely when segments got merged)\nThis is required in one form or another for any kinds of segment-aware caches.\nWe're currently using our own field cache (I doubt we'll ever switch back to lucene's native, fixed one or not) and filter cache. Both caches are warmed up on reopen, asynchronously from search requests and both would warm up considerably faster if we have data on how segments have changed. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12696511"
        },
        {
            "date": "2009-04-07T14:37:51+0000",
            "content": "This is required in one form or another for any kinds of segment-aware caches.\n\nThe problem is you need more information than simply \"these segments got merged\" to actually do something interesting with your caches.\n\nEG you'd need to know which deleted docs got zapped, right?\n\nWe're currently using our own field cache (I doubt we'll ever switch back to lucene's native, fixed one or not)\n\nCan you explain what's missing in Lucene's FieldCache?  (Since we are going to build a new one for LUCENE-831 it'd be great to address all known limitations...). ",
            "author": "Michael McCandless",
            "id": "comment-12696550"
        },
        {
            "date": "2009-04-07T15:50:41+0000",
            "content": "The problem is you need more information than simply \"these segments got merged\" to actually do something interesting with your caches.\nOkay, now I've thought a bit. What we need is a notification on which segments remained, which are new and which got toasted, plus docid ranges for them. Their ancestry is irrelevant, because you're right, to exploit it we also need deleted docs, and then replicate some of the merging logic and it gets really messy from here. Dropping parts of the cache related to dead segments, rebasing survivors and doing a fair-and-square load/uninversion/whatever for new ones is enough.\n\nCan you explain what's missing in Lucene's FieldCache?\nIt's not that easy to say. Our version was initially used only for sorting, but without concurrency issues and with async warmup. But then we used it to load docs (way better than storing fields and using IndexReader.document), tied up with our strongly-typed-fields code, added handling for multi-valued fields, used it for faceted searches.\nSo now it is essentially just something different from Lucene field cache. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12696583"
        },
        {
            "date": "2009-06-10T20:10:46+0000",
            "content": "Moving out. ",
            "author": "Michael McCandless",
            "id": "comment-12718177"
        },
        {
            "date": "2009-06-10T20:19:27+0000",
            "content": "Can we put this one in 2.9?  It seems like a fairly straightfoward change.  Or make it a protected method? ",
            "author": "Jason Rutherglen",
            "id": "comment-12718185"
        },
        {
            "date": "2009-06-10T22:10:41+0000",
            "content": "Well, I'm worried about how much [now package private] info you're gonna need about the merging segments \u2013 it doesn't seem like a simple change to me. ",
            "author": "Michael McCandless",
            "id": "comment-12718228"
        },
        {
            "date": "2009-06-10T22:18:35+0000",
            "content": "We can make it protected that way it's expert level and a user\nneeds to inherit from IndexWriter to use it. I don't think today\nit's possible to simply inherit from IW to get the merge\ninformation because IW.merge is final, and there needs to be a\nway to know the merge was successful.  ",
            "author": "Jason Rutherglen",
            "id": "comment-12718231"
        },
        {
            "date": "2009-06-10T22:24:26+0000",
            "content": "But you'll still need access to package-private stuff, eg MergePolicy.OneMerge? ",
            "author": "Michael McCandless",
            "id": "comment-12718235"
        },
        {
            "date": "2009-06-10T22:59:47+0000",
            "content": "Added a protected IW.mergeSuccess method.  We can't really do much more right now until we wrap SegmentInfo with a public class or make it public. ",
            "author": "Jason Rutherglen",
            "id": "comment-12718243"
        },
        {
            "date": "2009-06-11T00:10:18+0000",
            "content": "Shouldn't we make that method package private?  (Since it's arg (MergePolicy.OneMerge.*) is package private). ",
            "author": "Michael McCandless",
            "id": "comment-12718258"
        },
        {
            "date": "2009-06-11T00:13:09+0000",
            "content": "Yep! ",
            "author": "Jason Rutherglen",
            "id": "comment-12718259"
        },
        {
            "date": "2009-06-11T00:22:05+0000",
            "content": "OK I committed it!  Thanks Jason! ",
            "author": "Michael McCandless",
            "id": "comment-12718261"
        }
    ]
}