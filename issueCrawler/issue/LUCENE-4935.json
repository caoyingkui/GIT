{
    "id": "LUCENE-4935",
    "title": "CustomScoreQuery has broken boosting",
    "details": {
        "components": [
            "core/query/scoring"
        ],
        "fix_versions": [
            "4.3.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "CustomScoreQuery wrongly applies boost^2 instead of boost.\n\nIt wrongly incorporates its boost into the normalization factor passed down to subquery (like booleanquery does) and also multiplies it directly in its scorer.\n\nThe only reason the test passes today is because it compares raw score magnitudes when querynorm is on, which normalizes this away.\n\nChanging the test to use newSearcher() demonstrates the brokenness.",
    "attachments": {
        "LUCENE-4935.patch": "https://issues.apache.org/jira/secure/attachment/12578822/LUCENE-4935.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-15T21:59:07+0000",
            "content": "Oh oh! Thanks for investigating this! Is this new in 4.x? I used CustomScoreQuery in the past in 3.6 and did not recognize that bug. ",
            "author": "Uwe Schindler",
            "id": "comment-13632264"
        },
        {
            "date": "2013-04-15T22:10:42+0000",
            "content": "Uwe: yes the bug is in 3.6 too: see CustomWeight's normalize (boost1)\n\n\n    @Override\n    public void normalize(float norm) {\n      norm *= getBoost(); // incorporate boost\n      subQueryWeight.normalize(norm);\n\n\n\nand CustomScorer.score (boost2)\n\n\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n\n ",
            "author": "Robert Muir",
            "id": "comment-13632273"
        },
        {
            "date": "2013-04-15T22:51:05+0000",
            "content": "Here is an updated patch thats more correct in my opinion (but the first one fixes the bug).\n\nIn my opinion this query should not 'distribute' any boosts down to subQuery, because an arbitrary function will be executed on that score that might not adhere to the distributive law.\n\nSo if someone has a BooleanQuery(CustomScoreQuery(TermQuery)))^5, but their CustomScoreProvider scores with log(subQueryScore) + valSrcScore, they might wonder what happened to their boost of 5 on the outer booleanquery.\n\nThis is more of a corner case, but i think it simplifies the thing so it acts more like ConstantScoreQuery. ",
            "author": "Robert Muir",
            "id": "comment-13632331"
        },
        {
            "date": "2013-04-16T21:56:59+0000",
            "content": "+1 for the 2nd approach. ",
            "author": "Michael McCandless",
            "id": "comment-13633441"
        },
        {
            "date": "2013-05-10T22:54:01+0000",
            "content": "If there are no objections, I'd like to backport this to 4.3.1. ",
            "author": "Steve Rowe",
            "id": "comment-13654985"
        },
        {
            "date": "2013-06-18T16:55:15+0000",
            "content": "Bulk closing after 4.3.1 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13686956"
        }
    ]
}