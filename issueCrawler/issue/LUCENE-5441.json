{
    "id": "LUCENE-5441",
    "title": "Decouple DocIdSet from OpenBitSet and FixedBitSet",
    "details": {
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/other"
        ],
        "affect_versions": "4.6.1",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "Back from the times of Lucene 2.4 when DocIdSet was introduced, we somehow kept the stupid \"filters can return a BitSet directly\" in the code. So lots of Filters return just FixedBitSet, because this is the superclass (ideally interface) of FixedBitSet.\n\nWe should decouple that and not implement that abstract interface directly by FixedBitSet. This leads to bugs e.g. in BlockJoin, because it used Filters in a wrong way, just because it was always returning Bitsets. But some filters actually don't do this.\n\nI propose to let FixedBitSet (only in trunk, because that a major backwards break) just have a method asDocIdSet(), that returns an anonymous instance of DocIdSet: bits() returns the FixedBitSet itsself, iterator() returns a new Iterator (like it always did) and the cost/cacheable methods return static values.\n\nFilters in trunk would need to be changed like that:\n\n\nFixedBitSet bits = ....\n...\nreturn bits;\n\n\n\ngets:\n\n\nFixedBitSet bits = ....\n...\nreturn bits.asDocIdSet();\n\n\n\nAs this methods returns an anonymous DocIdSet, calling code can no longer rely or check if the implementation behind is a FixedBitSet.",
    "attachments": {
        "LUCENE-5441.patch": "https://issues.apache.org/jira/secure/attachment/12627876/LUCENE-5441.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13895937",
            "author": "Shai Erera",
            "content": "+1 to make the separation, I was thinking exactly that while working on LUCENE-5440. I wish also that DocIdSet (or some other interface) allowed you to do set operations, e.g. like Solr's DocSet. This then makes optimization-checking if (bits instanceof FixedBitSet) moot, you just call docs.intersect(otherDocIdSet) and let the implementation decide if it can optimize or not. It should then be pretty easy to implement a DocSet/DocIdSet backed by a FixedBitSet? ",
            "date": "2014-02-09T17:47:07+0000"
        },
        {
            "id": "comment-13895951",
            "author": "Uwe Schindler",
            "content": "Attached is a quick patch (only lucene/core compiles successfully), to show how it could look like.\n\nThe bigger problems are (as expected) in the join and grouping modules. Solr is mostly unaffected, because it does not really use or implement Lucene filters. ",
            "date": "2014-02-09T18:09:31+0000"
        },
        {
            "id": "comment-13895952",
            "author": "Uwe Schindler",
            "content": "It should then be pretty easy to implement a DocSet/DocIdSet backed by a FixedBitSet?\n\nVery easy, see the last patch  I am at the moment not really happy about the and/or/xor(DocIdSetIterator) methods... ",
            "date": "2014-02-09T18:10:34+0000"
        },
        {
            "id": "comment-13895957",
            "author": "Uwe Schindler",
            "content": "Another option to do this would be to create a separate class instead of the anonymous DocIdSet implementation: FixedBitSetDocIdSet. The asDocIdSet() method is just for easy-use. It could simply wrap using that class. In this case, the crazy generics in my patch (see TestFixedBitSet extends-clause) could use the FixedBitSetDocIdSet in its generics. ",
            "date": "2014-02-09T18:18:21+0000"
        },
        {
            "id": "comment-13895960",
            "author": "Uwe Schindler",
            "content": "New patch, that makes everything compile and pass tests. ",
            "date": "2014-02-09T18:24:05+0000"
        },
        {
            "id": "comment-13895972",
            "author": "Shai Erera",
            "content": "Yes, a dedicated class, I would call it maybe BitsDocIdSet, is better. And then we don't need to sugar FBS.asDocIdSet, as it's the same as someone doing DocIdSet docsSet = new BitsDocIdSet(bitset);. Then FixedBitSet becomes, hopefully, fully decoupled from DocIdSet. I will review the patch. ",
            "date": "2014-02-09T18:35:14+0000"
        },
        {
            "id": "comment-13896366",
            "author": "Adrien Grand",
            "content": "+1 on decoupling DocIdSet from our bit sets. The current patch looks good to me but I would also be happy with a dedicated class instead of the anonymous wrapper.\n\nI would call it maybe BitsDocIdSet\n\nWe have a Bits interface that provides random access to boolean values. Since this class would only work with FixedBitSet, I think Uwe's proposition would be more appropriate? ",
            "date": "2014-02-10T09:47:14+0000"
        },
        {
            "id": "comment-13896393",
            "author": "Shai Erera",
            "content": "OK, but I prefer a shorter name. I see that we have DocIdBitSet, which works on top of Java's BitSet. But looks like it's used only in tests today, so maybe we hijack it to use FixedBitSet? Why do we need to offer something on top of Java's when we have our own? ",
            "date": "2014-02-10T11:01:15+0000"
        },
        {
            "id": "comment-13896880",
            "author": "Uwe Schindler",
            "content": "New patch after LUCENE-5440 was committed. This includes the following extra features:\n\n\tFixedBitDocIdSet was added instead of the asDocIdSet() method.\n\tremoved the OpenBitSetDISI optimizations.\n\tThe and/or/andNot/xor(DISI) methods are no longer available in FixedBitSet. Those are only available in FixedBitDocIdSet. This leads t some additional wrapping or less wrapping depending where it was used before. I did not review all the automatic changes I did, surely there could be some private method signatures changed in ChainedFilter/BooleanFilter to reduce wrapping.\n\tI also optimized FixedBitDocIdSet.xor(DISI) to use bitwise XOR, if the iterator is a FixedBitSet one. This was missing in Shai's patch.\n\n\n\nThe current code does not change the DocIdSet abstract interface to support inplace and/or/... (especially as this is only supported by bitsets, but not the other DIS impls?!). I am also not yet happy with the current state of this DIS wrapping. In any case - FixedBitSet is now clean from any DocIdSet uses! It's just a BitSet, nothing more - like the Long one. ",
            "date": "2014-02-10T19:14:35+0000"
        },
        {
            "id": "comment-13896944",
            "author": "Shai Erera",
            "content": "Uwe, just a wild thought \u2013 since you already break back-compat by making FBS not extend DocIdSet, can we also rename it to IntBitSet? Migrating your code following those two changes is equally trivial... if not, then how about we keep FBS as-is, deprecated, and do all this work on a new IntBitSet? I prefer the first approach since it means less work (and also I think that writing a Filter is quite expert). ",
            "date": "2014-02-10T20:04:13+0000"
        },
        {
            "id": "comment-13897947",
            "author": "Michael McCandless",
            "content": "I think we should put the @lucene.internal back onto FixedBitSet; I don't think it should have been removed in LUCENE-5440 (see my comment there: https://issues.apache.org/jira/browse/LUCENE-5440?focusedCommentId=13897826&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13897826 )\n\n+1 to rename FBS to IntBitSet. ",
            "date": "2014-02-11T15:53:49+0000"
        },
        {
            "id": "comment-13902865",
            "author": "ASF GitHub Bot",
            "content": "GitHub user PaulElschot opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/33\n\n    LUCENE-5092, 2nd try\n\n    In core introduce DocBlocksIterator.\n    Use this in FixedBitSet, in EliasFanoDocIdSet and in join module ToChild... and ToParent...\n    Also change BaseDocIdSetTestCase to test DocBlocksIterator.advanceToJustBefore.\n\n    This was simplified a lot by LUCENE-5441 and LUCENE-5440.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/apache/lucene-solr LUCENE-5092-pull-2\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/33.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #33\n\n\ncommit 4f8eae48ff0441b86a0fdb130e564f646dffcc43\nAuthor: Paul Elschot <paul.j.elschot@gmail.com>\nDate:   2014-02-16T22:31:58Z\n\n    Squashed commit for LUCENE-5092\n\n ",
            "date": "2014-02-16T22:45:10+0000"
        },
        {
            "id": "comment-13902866",
            "author": "Paul Elschot",
            "content": "I'm sorry that pull request #33 ended up here, I think I should have mentioned LUCENE-5092 as the first issue in the comment body at the pull request. ",
            "date": "2014-02-16T22:49:49+0000"
        },
        {
            "id": "comment-14178555",
            "author": "Adrien Grand",
            "content": "I think this is an important change so I tried to iterate on Shai and Uwe's work. A few things changed since the last patch with OpenBitSet removed and FixedBitSet's new thiner brother SparseFixedBitSet. Here is a summary of what this new patch changes:\n\n\tFixedBitSet renamed to IntBitSet\n\tSparseFixedBitSet renamed to SparseIntBitSet\n\tIntBitSet and SparseIntBitSet do not extend DocIdSet anymore, you need to wrap the bit set with (Sparse)IntBitDocIdSet\n\tIntBitDocIdSet and SparseBitDocIdSet require the cost to be provided explicitely, so that you can use the actual set cardinality if you already know it, or use cardinality() if it makes sense. This should help make better decisions when there are bitsets involved.\n\n\n\nThe major difference compared to the previous patch is that the or/and/andNot/xor methods are still on FixedBitSet. The reasoning here is that by having the IntBitDocIdSet not exposing mutators, it makes sense to cache the cost. I think these mutator methods would make more sense on something like oal.util.DocIdSetBuilder. ",
            "date": "2014-10-21T15:59:29+0000"
        },
        {
            "id": "comment-14178639",
            "author": "Yonik Seeley",
            "content": "We should really try and pick good names and then stick to them!\n\nFixedBitSet renamed to IntBitSet\n\nThe IntBitSet name actually may be more confusing and thus likely to be renamed in the future yet again.  It suggests that it's a bitset implementation backed by ints... but the implementation actually uses longs. ",
            "date": "2014-10-21T17:02:51+0000"
        },
        {
            "id": "comment-14178653",
            "author": "Robert Muir",
            "content": "\nrequire the cost to be provided explicitely, so that you can use the actual set cardinality if you already know it, or use cardinality() if it makes sense. This should help make better decisions when there are bitsets involved.\n\n+1 to fixing this. I would even make a default/sugar ctor that just forwards cardinality(). \n\nCurrently, people are making the wrong tradeoffs. they are so afraid to call cardinality up-front a single time, and instead pay the price with bad execution over and over again for e.g. cached filters. ",
            "date": "2014-10-21T17:15:23+0000"
        },
        {
            "id": "comment-14178965",
            "author": "Adrien Grand",
            "content": "The IntBitSet name actually may be more confusing\n\nI tried to fold in feedback from previous comments, but since it's controversial, I'll remove this change from the patch.\n\nI would even make a default/sugar ctor that just forwards cardinality(). \n\nDone in the new patch. ",
            "date": "2014-10-21T20:05:45+0000"
        },
        {
            "id": "comment-14178983",
            "author": "Yonik Seeley",
            "content": "> The IntBitSet name actually may be more confusing\nI tried to fold in feedback from previous comments, but since it's controversial, I'll remove this change from the patch.\n\nHmmm, I had missed the earlier comments about that.  Perhaps a poll of a larger audience might be in order? ",
            "date": "2014-10-21T20:11:44+0000"
        },
        {
            "id": "comment-14179942",
            "author": "ASF subversion and git services",
            "content": "Commit 1633628 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1633628 ]\n\nLUCENE-5441: Decouple (Sparse)FixedBitSet from DocIdSet. ",
            "date": "2014-10-22T14:19:21+0000"
        },
        {
            "id": "comment-14180018",
            "author": "Uwe Schindler",
            "content": "Just one general question: Is it really needed that the iterator also have cost()? In my opinion, it should be fine when you call cost() on the DocIdSet. If you already have an iterator, why call cost - it returns the same as the DocIdSet (in general)? This would make the extra ctor parameter for the FixedBitSetIterator obsolete. ",
            "date": "2014-10-22T15:13:28+0000"
        },
        {
            "id": "comment-14180020",
            "author": "Uwe Schindler",
            "content": "BTW: Thanks for committing! Very nice. I hope my original patch was still useable as base! ",
            "date": "2014-10-22T15:13:55+0000"
        },
        {
            "id": "comment-14180023",
            "author": "Robert Muir",
            "content": "\nJust one general question: Is it really needed that the iterator also have cost()? In my opinion, it should be fine when you call cost() on the DocIdSet. If you already have an iterator, why call cost - it returns the same as the DocIdSet (in general)? This would make the extra ctor parameter for the FixedBitSetIterator obsolete.\n\nCurrently, cost() is defined on DocumentIDSetIterator and of course subclasses: docsenum & co: implemented as docFreq by postings lists, e.g. termscorer as its docsEnum.cost().\n\nThis is used by conjunctionscorer/minshouldmatch/filteredquery etc to do conjunctions and so on. ",
            "date": "2014-10-22T15:17:35+0000"
        },
        {
            "id": "comment-14180025",
            "author": "Adrien Grand",
            "content": "I'm not too happy either with having the cost on the iterator instead of DocIdSet (it would be like having size() on j.u.Iterator instead of j.u.Collection), but it currently needs to be this way because of Scorer: Scorers are created by Weight, but the cost cannot be on Weight since costs are a per-segment thing while Weight is an index-level thing. I agree it would be awesome if we could clean this up though. ",
            "date": "2014-10-22T15:18:10+0000"
        },
        {
            "id": "comment-14180036",
            "author": "Adrien Grand",
            "content": "BTW: Thanks for committing! Very nice. I hope my original patch was still useable as base!\n\nYes! Thanks Uwe! ",
            "date": "2014-10-22T15:25:12+0000"
        },
        {
            "id": "comment-14180038",
            "author": "ASF subversion and git services",
            "content": "Commit 1633637 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1633637 ]\n\nLUCENE-5441: Decouple (Sparse)FixedBitSet from DocIdSet. ",
            "date": "2014-10-22T15:26:00+0000"
        },
        {
            "id": "comment-14332905",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:32+0000"
        }
    ]
}