{
    "id": "LUCENE-6607",
    "title": "Move geo3d to Lucene's sandbox module",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Geo3d is a powerful low-level geo API, recording places on the earth's surface in the index in three dimensions (as 3 separate numbers) and offering fast shape intersection/distance testing at search time.\n\nKarl Wright originally contributed this in LUCENE-6196, and we put it in spatial module, but I think a more natural place for it, for now anyway, is Lucene's sandbox module: it's very new, its APIs/abstractions are very much in flux (and the higher standards for abstractions in the spatial module cause disagreements: LUCENE-6578), Karl Wright and others could iterate faster on changes in sandbox, etc.\n\nThis would also un-block issues like LUCENE-6480, allowing GeoPointField and BKD trees to also use geo3d.",
    "attachments": {
        "LUCENE.6607.patch": "https://issues.apache.org/jira/secure/attachment/12744893/LUCENE.6607.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14601684",
            "author": "Karl Wright",
            "date": "2015-06-25T18:31:39+0000",
            "content": "Dependencies are as follows:\n\n\n\ttests in the geo3d folder: only GeoPointTest has any spatial4j deps\n\tmain code in the geo3d folder: no dependencies\n\tmain code in the spatial4j folder: spatial4j deps\n\ttests in spatial4j folder: spatial4j deps\n\n\n\nMy suggestion is to move the geo3d folders to sandbox, and leave the other code right where it is, with appropriate referential changes. "
        },
        {
            "id": "comment-14603399",
            "author": "David Smiley",
            "date": "2015-06-26T18:43:26+0000",
            "content": "Mike, why in your view is it not sufficient to mark APIs that are particularly subject to change with @lucene.experimental ?  IMO it is sufficient.  I'm not really a fan of the sandbox module... or at least I'm cool with it if it's limited in scope to things that would otherwise go in Lucene-core because it is central and a large body of code. "
        },
        {
            "id": "comment-14604617",
            "author": "Michael McCandless",
            "date": "2015-06-28T10:16:46+0000",
            "content": "Mike, why in your view is it not sufficient to mark APIs that are particularly subject to change with @lucene.experimental ?\n\nI think there are several compelling reasons to have large, new features in sandbox first, regardless of whether their eventual destination is core or misc or spatial or wherever.\n\nFirst, it sends a message to users that this is very new functionality, very subject to change, much more strongly than @lucene.experimental.\n\nSecond, we are free to make drastic changes / iterations, and to have a lower bar that the API/abstractions are \"correct\".  When I see discussions like LUCENE-6578, where the standards for contributing new features to the spatial module are too high (in my opinion), sandbox is the perfect answer: we can't and shouldn't try get all abstractions right from the get-go.\n\nThird, it keeps our modules/functions better separated.  If geo3d were in sandbox from the start, it would not need the external dependencies in the spatial module (spatial4j).\n\nForth, for this particular case, I think it's interesting to explore integration of BKD tree and GeoPointField with Geo3d, which are also already in sandbox.\n\nNet/net I think it's a big win if we move geo3d to sandbox. "
        },
        {
            "id": "comment-14604666",
            "author": "Karl Wright",
            "date": "2015-06-28T12:57:20+0000",
            "content": "My 2 cents: I would love to get geo3d in Mike's hands so he can do BKD tree development on it.  But I don't want to sacrifice the functional spatial4j integration either.  I don't know whether lucene modules have the capability for cross-dependency or not.  If not, maybe we have to think of another way.\n "
        },
        {
            "id": "comment-14604900",
            "author": "Michael McCandless",
            "date": "2015-06-28T20:39:50+0000",
            "content": "But I don't want to sacrifice the functional spatial4j integration either. \n\nThe spatial module can depend on sandbox and use geo3d from there? "
        },
        {
            "id": "comment-14604903",
            "author": "Karl Wright",
            "date": "2015-06-28T20:42:39+0000",
            "content": "Fine; I just wasn't sure that was allowed. "
        },
        {
            "id": "comment-14606953",
            "author": "David Smiley",
            "date": "2015-06-30T04:03:49+0000",
            "content": "I get the \"First\" reason (signals subject-to-change in a bigger way).  \"Second\" seems like the first.  BTW I've used trunk in the past for this, which is another alternative.\n\n\"Third\" I disagree with; and I'm surprised to hear you say it keeps modules better separated because a sandbox module (in my view) does the opposite thing you purport it to do \u2013 it fragments them.  It raises the question as to wether to put something in sandbox vs the module it actually is related to by subject area. Your rationale for the \"fourth\" shows that.  If the spatial code stays in the spatial module, there would be no need to raise this issue!  \n\nIf geo3d were in sandbox from the start, it would not need the external dependencies in the spatial module (spatial4j).\n\nI fundamentally believe that if we add new code to Lucene (in whatever module), a user should be able to use that code with Lucene without developing any glue/adapters.  This simply amounted to Geo3dShape.java (quite the bare minimum; see for yourself), which Karl provided early-on.  Furthermore he & I re-used shape testing utilities in Spatial4j that surfaced bugs \u2013 they heavily use a randomized-testing philosophy which I hope you can appreciate.  All other tests in Geo3D are standard static input/output unit tests.  So this was very much worthwhile.  But even putting aside how worthwhile it is (which you may contend no matter what I say), and putting aside my contention that it needed to integrate from the start, you seem to disagree with your own claim that Geo3d needed to go to the spatial module in order to use Spatial4j.  You just told Karl that the spatial module could depend on sandbox.\n\nMy vote is -0 because at least one of your reasons made some sense to me, but really I don't think our modules should be fragmented except for core.  And I have a high bar for a -1 vote too.\n\nSeparately, kind of a related aside, I'd like to state again that I don't think it makes sense for Geo3D to be here long term.  It's an awesome computational geometry package that other projects (pick any information-retrieval / database / NoSQL store / anything really) could benefit greatly from.  It's a gem, but a hidden gem as long as it's here.  I hope we can improve it while it has a nice stay here, but that you could understand that one day it ought to have a home elsewhere (yet we'd still use it), be it on it's own or a part of another computational geometry lib. "
        },
        {
            "id": "comment-14607559",
            "author": "Karl Wright",
            "date": "2015-06-30T06:03:56+0000",
            "content": "David Smiley: The main question is whether or not it's reasonable to develop a geo3d equivalent of GeoPointField, and subsequent BKD, in sandbox if a dependency lives in the spatial module and/or will eventually migrate away entirely.  There's no question that random testing has been helpful and will continue to be helpful, so I don't think anyone is advocating removing that.\n\nI don't know how the dependency structure works between lucene modules; I would presume you can have one direction of dependency, but maybe not another, and certainly not both?\n\nPutting geo3d in sandbox, and having module spatial depend on module sandbox, would seem to work.  All the module tests (including the randomizer ones) still would do their job, except against code that lives in sandbox.  The spatial4j integration stays in the spatial module too.  If it's just as easy to make the dependency go the other way, I frankly don't know enough about Lucene conventions to say which is better for now. "
        },
        {
            "id": "comment-14609469",
            "author": "David Smiley",
            "date": "2015-07-01T02:30:14+0000",
            "content": "Oh I definitely welcome BKD / GeoPointField using Geo3D.  No qualms there!\n\nI don't believe there's an issue with module inter-dependencies \u2013 at least Mike said so and I don't have a problem with that either from a policy perspective.  Another possible option is to add a Spatial4j dependency on sandbox.  If the sandbox is to get code from potentially any module, it stands to reason it should inherit their dependencies too.  If users want to use only a piece of sandbox; it's on them to figure out what dependencies they actually need. "
        },
        {
            "id": "comment-14609482",
            "author": "Nicholas Knize",
            "date": "2015-07-01T02:47:40+0000",
            "content": "Except it's intended that BKD and GeoPointField will (eventually) graduate to core to provide a dependency free geo option. Won't introducing a spatial4j dependency pose a problem at that point? "
        },
        {
            "id": "comment-14609496",
            "author": "David Smiley",
            "date": "2015-07-01T03:15:21+0000",
            "content": "I'm not a fan of putting spatial in Lucene-core any more than I am a fan of putting a highlighter or suggester there (for example).  I'd -1 that; sorry. "
        },
        {
            "id": "comment-14609503",
            "author": "Karl Wright",
            "date": "2015-07-01T03:24:28+0000",
            "content": "As I understand it, the idea is to construct a field type that represents a geo3d point.  In order to be able to use BKD to search for objects in geo3d shapes, you'd obviously need geo3d math.\n\nNicholas has gone to some lengths to, in essence, create a minimal 2-D geo implementation sufficient to support GeoPoint field types and BKD.  Mike has built the support intended for this.  It seemed reasonable to do the same thing with geo3d as well.\n\nSo either: (1) we build true geo types into core, and accept modest new core dependencies to achieve that, or (2) we add geo field types to modules/spatial.  I don't know if (2) is in fact a reasonable thing to do, however. "
        },
        {
            "id": "comment-14609511",
            "author": "Nicholas Knize",
            "date": "2015-07-01T03:30:19+0000",
            "content": "Wait. Core is where GeoPointField started and it's intended target. To provide a native GeoPointField to the core/*.lucene.document package.  It only moved to sandbox because of its immaturity and volatile API. If you look at the field type and supported queries it's no different than Numerics and NumericRange queries.  "
        },
        {
            "id": "comment-14609516",
            "author": "Karl Wright",
            "date": "2015-07-01T03:38:11+0000",
            "content": "It was never clear to me why a spatial feature would automatically be targeted at core.  I have been assuming that adding field types with full query support, it's necessary to be in core.  If this is not in fact true, then maybe there should be more careful consideration of where all of these spatial-type fields live. "
        },
        {
            "id": "comment-14609528",
            "author": "Nicholas Knize",
            "date": "2015-07-01T03:53:58+0000",
            "content": "Not sure I understand what you mean by automatically? Did you mean deliberately? It was intended to provide a dependency free, lightweight, GeoPointField type for the 90% use-case where people want simple geopoint search using nothing other than the Core library.  More advanced GIS'ish capabilities? You'd bring on the spatial module, spatial4j, jts, ejml, sis, etc. it's really that simple. Not sure what the problem is having a simple geo API in core? Doesn't it just make core that much more applicable to different application use cases? It's not a highlighter, not a suggester, it's a data type. BKD is another simple type, but requires a different codec.  I really want to make both of these 3D capable. Unless I'm mistaken core is to have no dependencies? If I'm wrong then this issue is moot anyway.  "
        },
        {
            "id": "comment-14609731",
            "author": "Karl Wright",
            "date": "2015-07-01T08:28:29+0000",
            "content": "Hi Nicholas Knize,\n\nWe agree that this is all about dependencies, right?  And we agree that, for lucene core, there are certain criteria for dependencies.  I'm, first of all, trying to determine what those criteria are.  The reason I am asking is because I think geo3d is not eventually going to be integrated into lucene-core.jar.  It will remain a separate dependency somewhere, so that other people can use just the geo functionality outside of Lucene.  It will not, however, bring in expensive and massive dependencies downstream, so I guess it satisfies the criteria?  Or maybe it doesn't? \n\nAnd then I began to realize that spatial4j, which modules/spatial depends upon, is also lightweight, and provides many of the same basic abilities (minus the polygons) that you've been implementing, such as rectangles that cross date line boundaries.  It also has no massive required downstream dependencies.  But including this as a core dependency was apparently unacceptable, so I'm trying to figure out why, precisely?  Is this a legal/management issue rather than a code issue?\n\nFinally, I don't know whether I am correct in assuming that introducing a new field type into lucene-core has significant benefits integration-wise over creating a new field type in modules/spatial.  If there isn't any huge benefit, then maybe everyone's work here, including Michael McCandless's BKD implementation, might just as well live in modules/spatial.  Mike, please clarify...\n "
        },
        {
            "id": "comment-14609978",
            "author": "Robert Muir",
            "date": "2015-07-01T11:44:31+0000",
            "content": "Karl: To me its about providing spatial capabilities under the apache 2.0 license.\n\nI don't give a fuck what spatial4j can do, its tainted with LGPL.  "
        },
        {
            "id": "comment-14610015",
            "author": "Karl Wright",
            "date": "2015-07-01T11:58:50+0000",
            "content": "Hmm, it looked to me like it was apache 2.0 licensed?  Where's the LGPL taint?  Didn't see it in the source code, at any rate... "
        },
        {
            "id": "comment-14610039",
            "author": "Michael McCandless",
            "date": "2015-07-01T12:36:47+0000",
            "content": "Where's the LGPL taint? \n\nspatial4j (optionally?) wraps the LGPL JTS library, I think. "
        },
        {
            "id": "comment-14610055",
            "author": "Karl Wright",
            "date": "2015-07-01T12:49:00+0000",
            "content": "Ah, ok.  So I agree that spatial4j for the moment cannot be a core dependency, and may be too heavyweight in any case.  (FWIW, earlier versions of spatial4j did not depend on JTS, so that was the disconnect.)  That answers one of my questions.  I take it, then, that the lucene spatial module is therefore also tarnished?  And that is the reason why GeoPointField isn't going to live there?\n\nI'd rather not have geo3d wind up in a library that everyone is afraid to use in any case, so if everything above is correct, I'd vote strongly for moving geo3d to sandbox (for now) and eventually to its own place. "
        },
        {
            "id": "comment-14610056",
            "author": "Nicholas Knize",
            "date": "2015-07-01T12:49:32+0000",
            "content": "(I'm not a lawyer so this is added purely for discussion purposes)\n\ncom.spatial4j.core.shape.jts.*  imports com.vividsolutions.jts.geom.*\n\nThe POM marks JTS as optional, the code comment notes: \n\n\n /** \n *  Wraps a JTS {@link Geometry} (i.e. may be a polygon or basically anything).\n *  JTS does a great deal of the hard work, but there is work here in handling\n *  dateline wrap.\n **/\n\n\n\nAnd effectively uses JTS for all DE9IM spatial relation computations (which is quite expensive anyway).\n\nThe good news is, while JTS is still currently LGPL its my understanding that Martin Davis is close to having this converted to dual EPL/BSD licensed under the LocationTech umbrella.  What very little I do know about the legal issues for LGPL is from the license:\n\nApplications which link to LGPL libraries need not be released under the LGPL. Applications need only follow the requirements in section 6 of the LGPL: allow new versions of the library to be linked with the application; and allow reverse engineering to debug this.\n\nFrom the early incubation site: http://incubator.apache.org/ip-clearance/local-lucene-solr.html \nThere is a dependency on LGPL code that will be removed before release \n\nSomeone much more knowledgeable than me in the licensing area could provide better insight. I'm under the impression wonky licensing issues and \"wrapping tricks\" like this is one (of many reasons) core avoids dependencies altogether. "
        },
        {
            "id": "comment-14610380",
            "author": "Karl Wright",
            "date": "2015-07-01T14:35:08+0000",
            "content": "David Smiley, Michael McCandless: One proposal might be to set up a whole new module, e.g. spatial-3d, and have both sandbox and modules/spatial depend on it.  Thoughts?\n "
        },
        {
            "id": "comment-14610389",
            "author": "Michael McCandless",
            "date": "2015-07-01T14:37:38+0000",
            "content": "One proposal might be to set up a whole new module, e.g. spatial-3d, and have both sandbox and modules/spatial depend on it. Thoughts?\n\n+1, I think that's a good solution! "
        },
        {
            "id": "comment-14610485",
            "author": "Nicholas Knize",
            "date": "2015-07-01T15:40:00+0000",
            "content": "I'm not opposed that idea, I just don't know what it solves for simple Geo field types in core if core should have no dependencies? Isn't that the same as just moving Geo3d to sandbox and having the spatial module depend on sandbox?  Are there 2 separate issues here? "
        },
        {
            "id": "comment-14614204",
            "author": "Karl Wright",
            "date": "2015-07-05T10:37:35+0000",
            "content": "I think I'm still expecting any GeoPoint3dField types to be part of modules/spatial3d.  Either that, or the \"no-dependencies\" rule gets relaxed.  But in any case I don't know enough about Lucene's rules and/or field type limitations to be able to recommend something meeting all requirements.  Leaving that up to Michael McCandless "
        },
        {
            "id": "comment-14622768",
            "author": "Michael McCandless",
            "date": "2015-07-10T19:05:58+0000",
            "content": "I think I'm still expecting any GeoPoint3dField types to be part of modules/spatial3d.\n\nI like the separate module idea, and I like the proposed name spatial3d ... but I am no good with ant build files and pom.xml's and ivy.xml's and such, but I'll try pulling it out and see how far I get.  Now seems like a good time since there are no outstanding issues/patches for geo3d? "
        },
        {
            "id": "comment-14623041",
            "author": "Karl Wright",
            "date": "2015-07-10T23:15:26+0000",
            "content": "Hi Mike,\nNothing is outstanding at this time. "
        },
        {
            "id": "comment-14623471",
            "author": "Michael McCandless",
            "date": "2015-07-11T16:24:48+0000",
            "content": "Turns out this was basically trivial: I followed Karl Wright's instructions up above.\n\nI tried to enable javadoc linter but there are failures... we can do that separately. "
        },
        {
            "id": "comment-14623722",
            "author": "Karl Wright",
            "date": "2015-07-12T09:28:33+0000",
            "content": "Looks good from what I can see!\nIf you let me know what's wrong with the javadoc I can submit a patch for that. "
        },
        {
            "id": "comment-14623896",
            "author": "Michael McCandless",
            "date": "2015-07-12T17:02:38+0000",
            "content": "Thanks Karl Wright, I'll commit and open a followon issue for the javadocs... "
        },
        {
            "id": "comment-14623926",
            "author": "ASF subversion and git services",
            "date": "2015-07-12T18:04:14+0000",
            "content": "Commit 1690496 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1690496 ]\n\nLUCENE-6607: factor geo3d out to its own spatial3d module "
        },
        {
            "id": "comment-14623936",
            "author": "ASF subversion and git services",
            "date": "2015-07-12T18:37:36+0000",
            "content": "Commit 1690505 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1690505 ]\n\nLUCENE-6607: factor geo3d out to its own spatial3d module "
        },
        {
            "id": "comment-14623939",
            "author": "Michael McCandless",
            "date": "2015-07-12T18:43:26+0000",
            "content": "I opened LUCENE-6675 for the javadocs linting issues... "
        },
        {
            "id": "comment-14624464",
            "author": "ASF subversion and git services",
            "date": "2015-07-13T09:52:51+0000",
            "content": "Commit 1690614 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1690614 ]\n\nLUCENE-6607: attempt to add pom.xml for new spatial3d module "
        },
        {
            "id": "comment-14624467",
            "author": "ASF subversion and git services",
            "date": "2015-07-13T09:53:10+0000",
            "content": "Commit 1690615 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1690615 ]\n\nLUCENE-6607: attempt to add pom.xml for new spatial3d module "
        },
        {
            "id": "comment-14624729",
            "author": "ASF subversion and git services",
            "date": "2015-07-13T14:40:44+0000",
            "content": "Commit 1690681 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1690681 ]\n\nLUCENE-6607: spatial3d IntelliJ config "
        },
        {
            "id": "comment-14624737",
            "author": "ASF subversion and git services",
            "date": "2015-07-13T14:46:23+0000",
            "content": "Commit 1690682 from Steve Rowe in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1690682 ]\n\nLUCENE-6607: spatial3d IntelliJ config (merged trunk r1690681) "
        },
        {
            "id": "comment-14625582",
            "author": "ASF subversion and git services",
            "date": "2015-07-13T23:45:22+0000",
            "content": "Commit 1690842 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1690842 ]\n\nLUCENE-6607: Fix spatial3d module's Maven config - include dependency interpolation sites, make packaging jar instead of pom, don't skip deploy phase, etc.; and fix GetMavenDependenciesTask to exclude a module's build artifacts only if the build dir fully matches, rather than a prefix (this bug caused lucene-spatial's test dependency on the lucene-spatial3d jar to be left out of the generated POM, because lucene/build/spatial3d matched the regex for lucene-spatial's build output dir: 'lucene/build/spatial', i.e. with no dir separator) "
        },
        {
            "id": "comment-14625679",
            "author": "ASF subversion and git services",
            "date": "2015-07-14T01:52:32+0000",
            "content": "Commit 1690848 from Steve Rowe in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1690848 ]\n\nLUCENE-6607: Fix spatial3d module's Maven config - include dependency interpolation sites, make packaging jar instead of pom, don't skip deploy phase, etc.; and fix GetMavenDependenciesTask to exclude a module's build artifacts only if the build dir fully matches, rather than a prefix (this bug caused lucene-spatial's test dependency on the lucene-spatial3d jar to be left out of the generated POM, because lucene/build/spatial3d matched the regex for lucene-spatial's build output dir: 'lucene/build/spatial', i.e. with no dir separator) (merged trunk r1690842) "
        },
        {
            "id": "comment-14625915",
            "author": "David Smiley",
            "date": "2015-07-14T06:31:33+0000",
            "content": "One thing I wanted to mention but is now kinda too-late is the name of this module.  When people see the \"3d\" I think they get the wrong impression of what's here; ditto for \"Geo3d\" but at least \"geo3d\" is actually the package and name of this body of code \u2013 not spatial3d. So my recommendation would have been \"spatial-geo3d\" but it's not a big deal.  Maybe one day the intention is to add all manner of 3d stuff here?  But my impression of Geo3d is that only a few classes if that would be re-used in an un-constrainted 3d space (not constrained to the surface of a sphere or ellipsoid).  When I tell people what's going on here, I feel the need to start with a disclaimer about what it isn't. "
        },
        {
            "id": "comment-14625957",
            "author": "Karl Wright",
            "date": "2015-07-14T07:11:42+0000",
            "content": "You are partly correct, but I think the same could be said of lucene/spatial, in that most of the classes (and indeed most of the code) is really intended for world-surface.  It's not really clear what 3d applications one would want to use with Lucene, either, but let's say this at least: geo3d classes Vector, Plane, and SidedPlane are available for general 3d usage, and right now I can't think of other shapes we'd want to throw in there, but nothing stops us from doing that.  Maybe we should move those classes to a base package, to make it clear?  It's only clarified by naming right now.\n\nSo my opinion: spatial3d is actually a pretty reasonable name, and is comparable to spatial in most ways... "
        },
        {
            "id": "comment-14626120",
            "author": "Michael McCandless",
            "date": "2015-07-14T09:40:18+0000",
            "content": "Phew, thanks for fixing the shadow Maven build Steve Rowe! "
        },
        {
            "id": "comment-14626302",
            "author": "Karl Wright",
            "date": "2015-07-14T12:51:25+0000",
            "content": "Thanks to everyone for getting this done!\nAnd now I hope Mike has some fun with this.  "
        },
        {
            "id": "comment-14713115",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:48+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}