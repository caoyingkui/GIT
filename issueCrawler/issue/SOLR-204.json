{
    "id": "SOLR-204",
    "title": "Let solrconfig.xml configure the SolrDispatchFilter to handle /select",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The major reason to make everythign use the SolrDispatchFilter is that we would have consistent error handling.  Currently, \n\nSolrServlet spits back errors using:\n PrintWriter writer = response.getWriter();\n writer.write(msg);\n\nand the SolrDispatchFilter spits them back using:\n res.sendError( code, ex.getMessage() );\n\nUsing \"sendError\" lets the servlet container format the code so it shows up ok in a browser.  Without it, you may have to view source to see the error.\n\nAditionaly, SolrDispatchFilter is more decerning about including stack trace.  It only includes a stack trace of 500 or an unknown response code.\n\nEventually, the error should probably be formatted in the requested format - SOLR-141.",
    "attachments": {
        "SOLR-204-HandleSelect.patch": "https://issues.apache.org/jira/secure/attachment/12355047/SOLR-204-HandleSelect.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12487111",
            "date": "2007-04-05T21:50:18+0000",
            "content": "this removes the \"handle-select\" init param from web.xml and adds:\n\n  <requestDispatcher handleSelect=\"true\" />\n\nto solrconfig.xml\n\nThe one thing I would maybe change is to make the config more of a tree then a list, maybe we should have:\n\n  <requestDispatcher handleSelect=\"true\" >\n    <requestParsers enableRemoteStreaming=\"false\" multipartUploadLimitInKB=\"2048\" />\n  </requestDispatcher>\n\nrather then:\n\n<requestDispatcher handleSelect=\"true\" />\n<requestParsers enableRemoteStreaming=\"false\" multipartUploadLimitInKB=\"2048\" />\n\nThis would change a configuration that has been added since 1.1\n\n\n\t- - - - -\n\n\n\nThis patch also cleans up reading enableRemoteStreaming and multipartUploadLimitInKB, when i wrote it i did not know about the much cleaner:\n\nthis.enableRemoteStreams = SolrConfig.config.getBool( \n        \"requestParsers/@enableRemoteStreaming\", false ); \n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492147",
            "date": "2007-04-26T23:01:51+0000",
            "content": "Updated version.  This modifies solrconfig so it has a \"requestDispatcher\" section and moves requestParsers into that group.\n\n  <requestDispatcher handleSelect=\"true\" >\n    <Unable to render embedded object: File (--Make sure your system has some authentication before enabling remote streaming) not found.  -->\n    <requestParsers enableRemoteStreaming=\"false\" multipartUploadLimitInKB=\"2048\" />\n  </requestDispatcher>\n\nthis means anyone using 'enableRemoteStreaming' since solr1.1 will need to modify solrconfig.xml.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12492505",
            "date": "2007-04-28T18:17:30+0000",
            "content": "I wanted to try this out to see what sendError() output looks like, but the patch isn't applying cleanly.\n\n$ patch -p0 < c:/dl/SOLR-204*\n(Stripping trailing CRs from patch.)\npatching file src/test/test-files/solr/conf/solrconfig.xml\n(Stripping trailing CRs from patch.)\npatching file src/webapp/WEB-INF/web.xml\n(Stripping trailing CRs from patch.)\npatching file src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java\nHunk #1 FAILED at 56.\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/webapp/src/org/apache/solr/\nservlet/SolrDispatchFilter.java.rej\n(Stripping trailing CRs from patch.)\npatching file src/webapp/src/org/apache/solr/servlet/SolrRequestParsers.java\n(Stripping trailing CRs from patch.)\npatching file example/solr/conf/solrconfig.xml\nHunk #1 succeeded at 231 (offset 8 lines). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492507",
            "date": "2007-04-28T18:33:25+0000",
            "content": "applies cleanly with trunk "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492508",
            "date": "2007-04-28T18:37:08+0000",
            "content": "sendError lets the web app decide how to format the response body.  Typically they put HTML with the status code, with a footer saying the \"Jetty\" or \"Resin\"\n\nThis is what you get to configure with:\n\n  <error-page>\n    <exception-type>java.lang.Exception</exception-type>\n    <location>/error</location>\n  </error-page>\n  <error-page><error-code>404</error-code><location>/error</location></error-page>\netc "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12492511",
            "date": "2007-04-28T19:40:58+0000",
            "content": "OK cool, for something like an undefined field, it looks fine:\n\"undefined field catdsfgsdg\"\n\nBut for something like a query parsing error, the only pointer to what the error is is in the stack trace, and you don't get that back.  You just get: \"Error parsing Lucene query\"\n\nThe logs show:\nSEVERE: org.apache.lucene.queryParser.ParseException: Cannot parse 'foo:': '' or '?' not allowed as first character in WildcardQuery\n        at org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:149)\n        at org.apache.solr.search.QueryParsing.parseQuery(QueryParsing.java:94)\n        at org.apache.solr.request.StandardRequestHandler.handleRequestBody(StandardRequestHandler.java:85)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:77)\n\nHmmm, but I think this is an exception issue:\n\nIn QueryParsing.java:\n    } catch (ParseException e) \n{\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n\nshould probably be something more like:\n  throw new SolrException(400,\"Query parsing error: \" + e.getMessage() ,e); "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492512",
            "date": "2007-04-28T19:48:15+0000",
            "content": "\n> \n> should probably be something more like:\n>   throw new SolrException(400,\"Query parsing error: \" + e.getMessage() ,e);\n> \n\nYes, the other change is that errors for RequestDispatcher only print the stack trace if it is >=500, 400 (bad request) assumes the message will contain a user useful response.  \n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492600",
            "date": "2007-04-29T20:55:21+0000",
            "content": "added in:\nhttp://svn.apache.org/viewvc?view=rev&revision=533558 "
        }
    ]
}