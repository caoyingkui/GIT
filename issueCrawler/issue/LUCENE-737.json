{
    "id": "LUCENE-737",
    "title": "Provision of encryption/decryption services API to support Field.Store.Encrypted",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index",
            "core/search",
            "core/store"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "2.0.0,                                            2.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Attached are proposed modifications to Lucene 2.0 to support Field.Store.Encrypted.\nThe rational behind this proposal is simple. Since Lucene can store data in the index, it effectively makes the data portable. It is conceivable that some of the data may be sensitive in nature, hence the option to encrypt it. Both the data and its index are encrypted in this implementation.\nThis is only an initial implementation. It has the following several restrictions, all of which can be resolved if required, albeit with some effort and more changes to Lucene:\n1) binary and compressed fields cannot be encrypted as well (a plaintext once encrypted becomes binary).\n2) Field.Store.Encrypted implies Field.Store.Yes\nThis makes sense but it forces one to store the data in the same index where the tokens are stored. It may be preferable at times to have two indeces, one for tokens, the other for the data.\n3) As implemented, it uses RC4 encryption from BouncyCastle. This is an open source package, very simple to use which has the advantage of guaranteeing that the length of the encrypted field is the same as the original plaintext. As of Java 1.5 (5.0) Sun provides an RC4 equivalent in its Java Cryptography Extension, but unfortunately not in Java 1.4.\nThe BouncyCastle RC4 is not the only algorythm available, others not depending on third party code can be used, but it was just the simplest to implement for this first attempt.\n4) The attachements are modifications in diff form based on an early (I think August or September '06) repository snapshot of Lucene 2.0 subsequently updated from the Lucene repository on 29/11/06. They may need some additional work to merge with the latest version in the Lucene repository. They also include a couple of JUnit test programs which explain, as well as test, the usage. You will need the BouncyCastle .jar (bcprov-jdk14-134.jar) to run them. I did not attach it to minimize the size of the attachements, but it can be downloaded free from:\n http://www.bouncycastle.org/latest_releases.html\n\n5) Searching an encrypted field is restricted to single terms, no phrase or boolean searches allowed yet, and the term has to be encrypted by the application before searching it. (ref. attached JUnit test programs)\n\nTo the extent that I have tested it, the code works as intended and does not appear to introduce any regression problems, but more testing by others would be desirable.\nI don't propose at this stage to do any further work with this API extensions unless there is some expression of interest and direction from the Lucene Developers team. I have an application ready to roll which uses the proposed Lucene encryption API additions (please see http://www.kbforge.com/index.html). The application is not yet available for downloading simply because I am not sure if the Lucene licence allows me to do so. I would appreciate your advice in this regard. My application is free but its source code is not available (yet). I should add that encryption does not have to be an integral part of Lucene, it can be just part of the end application, but somehow it seems to me that Field.Store.Encrypted belongs in the same category as compression and binary values.\nI would be happy to receive your feedback.\n\nvictor negrin",
    "attachments": {
        "bcprov-jdk14-133.jar": "https://issues.apache.org/jira/secure/attachment/12346269/bcprov-jdk14-133.jar",
        "BouncyCastle Licence & disclaimer": "https://issues.apache.org/jira/secure/attachment/12346270/BouncyCastle%20Licence%20%26%20disclaimer",
        "LuceneEncryptionMods.zip": "https://issues.apache.org/jira/secure/attachment/12346258/LuceneEncryptionMods.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-12-02T02:12:07+0000",
            "content": "deleted encryption provider jar which mistakenly had apache liscene \"ok\" info set on it per the request of the issue submitter ",
            "author": "Hoss Man",
            "id": "comment-12455070"
        },
        {
            "date": "2006-12-02T05:43:52+0000",
            "content": "BouncyCastle Licence, to be read before using the BouncyCastle .jar file ",
            "author": "victor negrin",
            "id": "comment-12455077"
        },
        {
            "date": "2006-12-08T04:10:42+0000",
            "content": "for future ref: copious discussion on this issue was discussed in the orriginal email thread...\n\nhttp://www.nabble.com/Attached-proposed-modifications-to-Lucene-2.0-to-support-Field.Store.Encrypted-tf2727614.html#a7607415 ",
            "author": "Hoss Man",
            "id": "comment-12456687"
        },
        {
            "date": "2008-01-12T23:28:22+0000",
            "content": "I think the general feeling from the discussion is that this won't be added to the core.  A separate issue can be opened if a contrib module is ever developed. ",
            "author": "Grant Ingersoll",
            "id": "comment-12558314"
        }
    ]
}