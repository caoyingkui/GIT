{
    "id": "LUCENE-6086",
    "title": "Minor optimizations to the encoding of numerics in stored fields",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "LUCENE-5914 explored minor optimizations for numeric encoding in stored fields, I think we should try to push them to the default format.",
    "attachments": {
        "LUCENE-6086.patch": "https://issues.apache.org/jira/secure/attachment/12684602/LUCENE-6086.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14231198",
            "author": "Adrien Grand",
            "date": "2014-12-02T09:16:45+0000",
            "content": "The idea behing this encoding is that longs are often used to store timestamps, and that floats and doubles often store simple integral values. Here is a patch and a quick summary of the improvements.\n\nFloat value representing an integer in -63..63:\n\n\ttrunk: 4 bytes\n\tpatch: 1 byte\n\n\n\nOther positive float values:\n\n\ttrunk: 4 bytes\n\tpatch: 4 bytes\n\n\n\nOther negative float values:\n\n\ttrunk: 4 bytes\n\tpatch: 5 bytes\n\n\n\nDouble value representing an integer in -63..62:\n\n\ttrunk: 8 bytes\n\tpatch: 1 byte\n\n\n\nDouble value that can be represented exactly with a float (eg. 1000, 0.25)\n\n\ttrunk: 8 bytes\n\tpatch: 5 bytes\n\n\n\nOther positive double values:\n\n\ttrunk: 8 bytes\n\tpatch: 8 bytes\n\n\n\nOther negative double values:\n\n\ttrunk: 8 bytes\n\tpatch: 9 bytes\n\n\n\nLong values use zig-zag encoding with some optimizations for timestamps. So for instance a number in -16..15:\n\n\ttrunk: 8 bytes\n\tpatch: 1 byte\n\n\n\nNow with second-level precision:\n\n\ttrunk: 8 bytes\n\tpatch: 5 bytes\n\n\n\nNow with hour-level precision:\n\n\ttrunk: 8 bytes\n\tpatch: 4 bytes\n\n\n\nToday (day precision):\n\n\ttrunk: 8 bytes\n\tpatch: 3 bytes\n\n "
        },
        {
            "id": "comment-14232406",
            "author": "Ryan Ernst",
            "date": "2014-12-03T00:56:00+0000",
            "content": "Very cool!\n\nSome thoughts:\n\n\tDo we really need to zigzag encode the special case of ints [-63,63] in floats/doubles? Since we have the 7 bits there, could we just offset by 63? ie 0x80 == -63\n\tThe comments in readZDouble and writeZDouble about the range for short int values don't match? I think the one in the write method is correct?\n\tI think reading code with masks is easier with constants, so maybe change header & (1 << 5) in readZLong to header & 0x10?\n\n "
        },
        {
            "id": "comment-14232714",
            "author": "Robert Muir",
            "date": "2014-12-03T07:32:23+0000",
            "content": "+1, but i dont like the name zlong for the integral encoding. Its confusing with datainput.read/writezlong. "
        },
        {
            "id": "comment-14232743",
            "author": "Dawid Weiss",
            "date": "2014-12-03T08:08:57+0000",
            "content": "You are officially knighted as a bit-fiddler champ \nhttp://goo.gl/oYKqQC\n "
        },
        {
            "id": "comment-14232841",
            "author": "Adrien Grand",
            "date": "2014-12-03T10:08:27+0000",
            "content": "Here is an updated patch:\n\n\trenamed ZLong to TLong ('T' for 'timestamp')\n\treplaced 1 << 5 with 0x20 when applied as a mask\n\tswitch floats and doubles from zig-zag encoding to an offset. I took this change as an opportunity to change the range to start at -1 since I think negative floating point values are less common than positive values? I just kept -1 as I believe this number can sometimes be used to encode for \"unset\". (the encoding is already biased towards positive values since random negative values take one more byte than random positive values)\n\n\n\nYou are officially knighted as a bit-fiddler champ http://goo.gl/oYKqQC\n\nThank you Dawid, I'm honored.  "
        },
        {
            "id": "comment-14233350",
            "author": "Robert Muir",
            "date": "2014-12-03T19:03:49+0000",
            "content": "+1, this is good.\n\nThanks for adding eof checks to the tests (i just noticed that when reviewing).\ns/mumtiple/multiple/ in the TLong javadocs. "
        },
        {
            "id": "comment-14234391",
            "author": "Ryan Ernst",
            "date": "2014-12-04T17:36:39+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14242645",
            "author": "ASF subversion and git services",
            "date": "2014-12-11T15:01:01+0000",
            "content": "Commit 1644661 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1644661 ]\n\nLUCENE-6086: Space optimizations for numeric stored fields. "
        },
        {
            "id": "comment-14242648",
            "author": "ASF subversion and git services",
            "date": "2014-12-11T15:02:59+0000",
            "content": "Commit 1644663 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1644663 ]\n\nLUCENE-6086: Space optimizations for numeric stored fields. "
        },
        {
            "id": "comment-14332843",
            "author": "Anshum Gupta",
            "date": "2015-02-23T05:02:13+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}