{
    "id": "LUCENE-3449",
    "title": "Fix FixedBitSet.nextSetBit/prevSetBit to support the common usage pattern in every programming book",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The usage pattern for nextSetBit/prevSetBit is the following:\n\n\nfor(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {\n // operate on index i here\n}\n\n\n\nThe problem is that the i+1 at the end can be bs.length(), but the code in nextSetBit does not allow this (same applies to prevSetBit(0)). The above usage pattern is in every programming book, so it should really be supported. The check has to be done in all cases (with the current impl in the calling code).\n\nIf the check is done inside xxxSetBit() it can also be optimized to be only called seldom and not all the time, like in the ugly looking replacement, thats currently needed:\n\n\nfor(int i=bs.nextSetBit(0); i>=0; i=(i<bs.length()-1) ? bs.nextSetBit(i+1) : -1) {\n // operate on index i here\n}\n\n\n\nWe should change this and allow out-of bounds indexes for those two methods (they already do some checks in that direction). Enforcing this with an assert is unuseable on the client side.\n\nThe test code for FixedBitSet also uses this, horrible. Please support the common usage pattern for BitSets.",
    "attachments": {
        "LUCENE-3449.patch": "https://issues.apache.org/jira/secure/attachment/12496125/LUCENE-3449.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-22T14:49:33+0000",
            "content": "Patch also fixing the ugly test code. ",
            "author": "Uwe Schindler",
            "id": "comment-13112631"
        },
        {
            "date": "2011-09-22T18:02:52+0000",
            "content": "I don't like that this adds an additional if inside next/prevSetBit\nthat for some cases is not needed (eg BlockJoinQuery's usage).\n\nI think performance trumps convenience here for these low level APIs.\n\nWhy not use a simple while loop?\n\n\nint idx = 0;\nwhile (idx < length) {\n  idx = bits.nextSetBit(idx);\n  if (idx == -1) {\n    break;\n  }\n  // do something with idx\n  idx++;\n}\n\n\n\nNomatter what, this loop needs 2 ifs per cycle; I just think that 2nd\nif belongs in the loop itself and not inside next/prevSetBit, since\nnot all use cases require it. ",
            "author": "Michael McCandless",
            "id": "comment-13112766"
        },
        {
            "date": "2011-09-22T18:36:26+0000",
            "content": "Can you check if this actually slows down things, Mike? I agree with Uwe that the idiom is frequently used and if Lucene's bitset behaves differently, this may lead to hard-to-trace issues. On the other hand the idiom is screwed up because it overflows into negative index values fairly fast. A nicer one would be:\n\n\nfor (int i = bs.firstSetBit(); i >= 0; i = bs.nextSetBit(i)) {\n\n\n\nBut this would confuse people familiar with the contract of juc.BitSet#nextSetBit even more... ",
            "author": "Dawid Weiss",
            "id": "comment-13112809"
        },
        {
            "date": "2011-09-22T18:49:44+0000",
            "content": "I agree with both of you, so we should first check if it really slows anything down.\n\nI agree with Uwe that the idiom is frequently used and if Lucene's bitset behaves differently, this may lead to hard-to-trace issues.\n\nThis was exactly my problem in LUCENE-3448. The bug in the code was only found because the testcase had the last bit set in the filter. I will for now change the code in 3448 to the pattern suggested by Mike.\n\nThe overflow is less problematic as MAX_VALUE is not a valid docId (it's NO_MORE_DOCS for DISIs). ",
            "author": "Uwe Schindler",
            "id": "comment-13112820"
        },
        {
            "date": "2011-09-22T20:39:41+0000",
            "content": "Can you check if this actually slows down things, Mike? \n\nWell... I doubt this is easily measured empirically?\n\nBut I don't think measuring it is necessary to make a decision here,\nsince it's an if statement that must find its way down to the CPU.  It\ncan only add unecessary cost for those callers that will never pass an\nout-of-bounds index.\n\nI also don't like the API inconsistency that this would introduce to\nFixedBitSet: currently all methods require index be in-bounds.  This\nis one of the improvements over OpenBitSet, which had some methods\nrequiring in-bounds and some not.\n\nI don't think we should in any way feel compelled to replicate the\nmistakes of Java's BitSet just because it's a common idiom / some\nnamed pattern / taught in textbooks.  Rather, it's Lucene that is\nusing this bit set impl, and so we should do what's best for Lucene. ",
            "author": "Michael McCandless",
            "id": "comment-13112885"
        },
        {
            "date": "2011-09-22T20:47:59+0000",
            "content": "We could allocate an extra bit on construction (round up if the last word is full) to avoid the extra if statement. ",
            "author": "Yonik Seeley",
            "id": "comment-13112894"
        },
        {
            "date": "2011-09-23T06:27:16+0000",
            "content": "Exactly. Overallocate a bit and allow reaching the +1. I agree \"repeating the same mistakes\" is not a good idea, but in this case it may be misleading because the API is already mirroring juc.BitSet (naming convention), so the contract comes as an assumption. I'm not that fond of juc API myself (vide a simplified container API in HPPC), so my opinion has nothing to do with supporting juc.\n\nWell... I doubt this is easily measured empirically?\n\nExactly. I think the difference will be minor, if statistically significant at all (when running inside a larger program and not in a microbenchmark). ",
            "author": "Dawid Weiss",
            "id": "comment-13113184"
        },
        {
            "date": "2011-09-23T12:37:01+0000",
            "content": "\nWe could allocate an extra bit on construction (round up if the last word is full) to avoid the extra if statement.\n\n+1 for adding a bit guard at the end; that's a great idea!\n\nBut this only works for the nextSetBit case right?  So I don't think\nprevSetBit should accept -1.\n\nLet's clearly jdoc that nextSetBit is an exception to the other\nmethods (ie it allows for exactly 1 (= length()) out-of-bounds index).\n\nbut in this case it may be misleading because the API is already mirroring juc.BitSet (naming convention), so the contract comes as an assumption.\n\nWell, still we shouldn't let BitSet's mistakes live on through the\nmethod names it had chosen.  I mean at some point someone has to stand\nup to BitSet's mistakes   It may as well be us.\n\nI suppose we could also change our names if necessary.\n\n\nWell... I doubt this is easily measured empirically?\n\nExactly. I think the difference will be minor, if statistically significant at all (when running inside a larger program and not in a microbenchmark).\n\nYet the cost is non-zero.\n\nWhy add a some cost, any cost, even if it's small, when you don't have\nto?\n\nOver time such minor slowdowns can eventually add up, and only by\nbeing vigilant to changes in Lucene's hotspots can we all keep Lucene\nfast and lean.\n\nThis logic only applies to potential \"hotspots\", like these methods.\nFor non-hotpots I fully agree that convenience, readability,\nconvention, etc., are more important.  But \"down low\", performance\ntrumps these other concerns.\n\nDifferent rules apply down low.  Just like quantum mechanics! ",
            "author": "Michael McCandless",
            "id": "comment-13113371"
        },
        {
            "date": "2011-09-23T12:40:41+0000",
            "content": "Let's clearly jdoc that nextSetBit is an exception to the other methods (ie it allows for exactly 1 (= length()) out-of-bounds index).\n\nWe must then always overallocate one bit (which is easy to do in the ctor). ",
            "author": "Uwe Schindler",
            "id": "comment-13113373"
        },
        {
            "date": "2011-09-24T12:27:48+0000",
            "content": "Nomatter what, this loop needs 2 ifs per cycle\n\nDuh, I was wrong about this!\n\nWe just need to change the sentinel value returned by nextSetBit when\nthere is no next set bit, from -1 to MAX_INT.  In fact we did this for\nDISI.nextDoc, for the same reason (saves an if per cycle).\n\nThen you just rotate the loop:\n\n\n  if (bits.length() != 0) {\n    int bit = bits.nextSetBit(0);\n    final int limit = bits.length()-1;\n    while (bit < limit) {\n      // ...do something with bit...\n      bit = bits.nextSetBit(1+bit);\n    }\n\n    if (bit == bits.length()-1) {\n      // ...do something with bit...\n    }\n  }\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13113957"
        },
        {
            "date": "2011-09-24T12:42:00+0000",
            "content": "Sorry, but my gut feeling says no to this loop logic. It just seems strangely complicated. If adherence to BitSet is not an issue why not:\n\n\nfor (int i = bs.firstSetBit(); i >= 0; i = bs.nextSetBitAfter(i)) {\n\n\n\nthis seems clearer on method naming, has a single if... and I think could be implemented nearly identically to what's already in the code. We can run microbenchmarks for fun and see what comes out better an by what margin.  ",
            "author": "Dawid Weiss",
            "id": "comment-13113961"
        },
        {
            "date": "2011-09-24T14:33:39+0000",
            "content": "\nIf adherence to BitSet is not an issue why not:\n\nfor (int i = bs.firstSetBit(); i >= 0; i = bs.nextSetBitAfter) {\nthis seems clearer on method naming, has a single if... and I think could be implemented nearly identically to what's already in the code. We can run microbenchmarks for fun and see what comes out better an by what margin.\n\nOoh I love that!\n\nIf in fact we can achieve such clean code (above), a clean API ( all\nmethods require in-bounds index), and not incur added cost in\nnextSetBitAfter (vs the nextSetBit we have today) then I agree this\nwould be the best of all worlds.\n\nI think we should give the sentinal a name (eg FBS.END)?  Then the end\ncondition can be i != FBS.END. ",
            "author": "Michael McCandless",
            "id": "comment-13113988"
        },
        {
            "date": "2011-09-24T17:54:15+0000",
            "content": "Eh... I shouldn't be throwing suggestions not backed up by patches... ) I'm working on something else tonight, but I'll add it to my queue. If anybody (Uwe, Uwe, Uwe! ) wants to give it a go, go ahead. ",
            "author": "Dawid Weiss",
            "id": "comment-13114025"
        },
        {
            "date": "2011-09-24T19:45:06+0000",
            "content": "(Uwe, Uwe, Uwe! )\n\nYes, but today is/was freetime  ",
            "author": "Uwe Schindler",
            "id": "comment-13114055"
        },
        {
            "date": "2011-09-24T19:48:16+0000",
            "content": "I was just teasing you, enjoy your weekend  ",
            "author": "Dawid Weiss",
            "id": "comment-13114057"
        },
        {
            "date": "2015-05-01T00:45:05+0000",
            "content": "Well, I was just bit by this.  My fault of course, but it wouldn't have happened if I hadn't needed 2 checks in the loop instead of one:\n1. check if nextSetBit() returned NO_MORE_DOCS\n2. check that the value returned by step #1 isn't the last bit\n\nIf we just had a single sentinel bit, both checks could be combined into one. ",
            "author": "Yonik Seeley",
            "id": "comment-14522563"
        }
    ]
}