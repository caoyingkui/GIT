{
    "id": "LUCENE-3186",
    "title": "DocValues type should be recored in FNX file to early fail if user specifies incompatible type",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently segment merger fails if the docvalues type is not compatible across segments. We already catch this problem if somebody changes the values type for a field within one segment but not across segments. in order to do that we should record the type in the fnx fiel alone with the field numbers.\n\nI marked this 4.0 since it should not block the landing on trunk",
    "attachments": {
        "LUCENE-3186.patch": "https://issues.apache.org/jira/secure/attachment/12496889/LUCENE-3186.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-09T11:15:38+0000",
            "content": "do we really need to do this? I guess also looking at LUCENE-3187, I think I'm against this trend.\n\nShall we put analyzer classnames in there too? If we are going to put docvalues type and precision step, well then i want the stopwords file in the fnx file too!\n\nAt some point, if a user is going to shoot themselves in the foot, we simply cannot stop them, and I don't think its our job to. ",
            "author": "Robert Muir",
            "id": "comment-13046467"
        },
        {
            "date": "2011-06-09T11:39:45+0000",
            "content": "Hi Robert,\n\nI am also not really happy with this trend. I just opened LUCENE-3187 to start a discussion. In my opinion we should improve documentation instead. ",
            "author": "Uwe Schindler",
            "id": "comment-13046479"
        },
        {
            "date": "2011-06-09T11:43:28+0000",
            "content": "I think for this issue we can compute that info at IW open time. we can simply run through the FIs and prepopulate the info. I think this is better than redundantly store this info. ",
            "author": "Simon Willnauer",
            "id": "comment-13046481"
        },
        {
            "date": "2011-06-09T15:06:43+0000",
            "content": "I think there are a few separate questions here...\n\nToday, on doc values branch, if you mix up your doc values, ie a field\n\"foo\" is at first indexed as a FLOAT_32 and then later you change your\nmind and later docs are index field \"foo\" as BYTES_FIXED_STRAIGHT,\nthen this is bad news right now because everything will index fine,\nyou can close your IW, etc., but at some later time merges will hit\nunrecoverable exceptions.  You'll have no choice but to fully rebuild\nthe index, which is rather awful.\n\nHowever, this is true even for cases you would expect to work, eg say\n\"foo\" was BYTES_FIXED_STRAIGHT but then later you decided you will\nwant to sort on this field and so you use BYTES_FIXED_SORTED.  (Simon:\nthis also results in exception I think...?).  Ideally we should do the\nright thing here and \"upgrade\" the BYTES_FIXED_STRAIGHT to\nBYTES_FIXED_SORTED (I think) \u2013 Simon is there an issue open for this?\n\nSo, I think the first question here is: which cases should be merged\n\"properly\" and which should be considered \"an error\"?  Probably we have\nto work out the full matrix...\n\nThen the second question is, for the \"error\" cases (if any!),\ncan/should we detect this up front, as you're indexing?\n\nThen third question is, if we want to detect up front, do we do that\nw/ fnx file or do we do that on init of IW (= no index change). ",
            "author": "Michael McCandless",
            "id": "comment-13046602"
        },
        {
            "date": "2011-06-09T15:14:20+0000",
            "content": "\nSo, I think the first question here is: which cases should be merged\n\"properly\" and which should be considered \"an error\"? Probably we have\nto work out the full matrix...\n\nthis is all implementation details of docvalues, that it must deal with during merging.\nI think it should work out the \"LCD\" and merge to that.\n\nThis is no different than if i have a field with all 8 character terms and then i add a 10-character term,\nsure my impl/codec's encoding could internally rely upon the the fact all terms are 8 chars, but it must transparently change\nits encoding to then support both 8 and 10 character terms and not throw an error.\n\nIf you mix up your doc values with ints and floats and bytes, isnt the least common denominator always bytes?\n(just encode the int as 4 bytes or whatever).\n\nSo in other words, i think its up to docvalues to change its encoding to support the LCD, which might mean\ndowngrading ints to bytes or whatever, my only opinion is that it should never 'create' data (this was my issue with fake norms,\nlets not do that). ",
            "author": "Robert Muir",
            "id": "comment-13046604"
        },
        {
            "date": "2011-09-28T10:37:51+0000",
            "content": "This issue still remains and we need to solve this in order to move forward towards 4.0. Yet, I am still banging my head against the wall about how to really fix this.\nPromoting up values that are compatible should be doable like Int_32 and Int_8 should be promoted to Int_32 likewise for float & double. Regarding byte values this is kind of tricky. Var length vs Fixed length is still doable but what if something is sorted. I don't think we should promote something to sorted in any case. The problem here is not just merging but also reading, I can not pull a sorted source from a non-sorted DV field which would cause confusion on the user level.\n\nI think we should compromise here and try to promote what we can like Ints, Floats and unsorted bytes (incompatible can go to variable length simply) and for Sorted if something is not sorted we should just drop the entire field. SortedVar & SortedFixed can be promoted to SortedVar and everything should be fine IMO. \n\nOne other idea would be removing the flexibility to set the actual type on the user level and decide at indexing time to use var vs. fixed and straight vs. deref and move the sorting decision to the codec ie. if you want to sort then your codec needs to provide sorting otherwise its not sorted. We could then treat everything as bytes and convert at load time. Like you say getSource(Int | Float | Bytes) and the codec decides how to convert each value to a float / int / byte and fails if not possible? ",
            "author": "Simon Willnauer",
            "id": "comment-13116330"
        },
        {
            "date": "2011-09-28T10:50:03+0000",
            "content": "Remember we are talking about the exception case here (app mis-uses\nthe API by mixing up types).\n\nSo I think a best-effort approach is fine: we \"cast up\" when we can,\nbut when we cannot we should silently drop the inconsistent values\n(better, I think, than getting an unrecoverable exception on merge).\n\nHaving indexer/searcher decide what's best is an interesting\noption... though, I think sorted or not should be specified in the\nField and not codec?  Ie, I think that's higher up than the codec (all\ncodecs should be able to sort, or not, my byte[] DV field). ",
            "author": "Michael McCandless",
            "id": "comment-13116334"
        },
        {
            "date": "2011-09-28T15:38:47+0000",
            "content": "here is an initial patch that promotes the following types:\n\n\tall permutations of int8, int16, int32, int64 and packed ints\n\tall permutations of float32 and float 64\n\tall permutations of var_deref_bytes, var_straight_bytes, fixed_deref_bytes, fixed_straight_bytes\n\tall permuations of sorted_fixed_bytes and sorted_var_bytes\n\n\n\ngeneral rule here is that var wins over fixed and straight wins over deref. For int types variable ints wins over all other fixed types (according to var wins over fixed). \n\nif those types are mixed up like float32 and int32 this patch drops the docvalues field. \n\nthis patch is still very rough and has one rather critical nocommit in SegmentMerger since I am changeing the FieldInfo for a field if I promote the type or drop the dv field which essentially means that I need to write the FI after this has been done. ",
            "author": "Simon Willnauer",
            "id": "comment-13116544"
        },
        {
            "date": "2011-09-30T22:01:30+0000",
            "content": "any comments on this? ",
            "author": "Simon Willnauer",
            "id": "comment-13118497"
        },
        {
            "date": "2011-10-05T09:49:28+0000",
            "content": "I hit several test failures w/ the patch, all from same exc, eg:\n\n\n  ant test-core -Dtestcase=TestIndexWriterDelete -Dtestmethod=testDeleteAllSlowly -Dtests.seed=-8b03171493c8e71:-20c60f02979a36ec:-485ea5dac6836e33\n\n\n\nI didn't dig...\n\nNet/net this approach looks good!  Though I have to say it's hard to\nfollow all the numerous tied-together classes we now have for\nDocValues... I find myself getting \"lost\" but I don't know how to\nsimplify it.\n\nRandom feedback:\n\n\n\tAbout the nocommit in SegmentMerger: I think writing FIS after\n    merge is OK?  In theory nothing should care?  Anything that needs\n    FIS during merging should receive the object, not load it from\n    the directory...\n\n\n\n\n\tYou can remove the TODO in DocValuesConsumer.merge \n\n\n\n\n\tMake sure we mark TypePromoter as @lucene.internal.\n\n\n\n\n\tIf we hit exc inside FixedStraightBytesImpl.merge, we are still\n    setting merge=true; is finish then called, up above?  (At which\n    point we are going to try to write to the closed file).\n\n\n\n\n\tMaybe rename that bool to \"merged\" or \"didMerge\" or something?\n    \"merge\" sounds like it's an imperative command.\n\n\n\n\n\tThe jdocs for DocValuesConsumer.merge say \"Merging segments out of\n    order is not supported\", but you just mean segments must arrive in\n    sorted order right?  (Ie, TieredMP merges non-sequential segments,\n    which we have been calling out-of-order merge).\n\n\n\n\n\tSince DocValuesConsumer.merge ignores the incoming IndexDocValues\n    (a MultiIndexDocValues), do we even need to pass that in...?\n\n\n\n\n\tIt's sort of confusing how we have a DocValuesConsumer.MergeState\n    (holds one segment's reader) and the oal.index.codecs.MergeState\n    (references all segments); maybe rename the former to\n    SingleReaderMergeState?  SubMergeState?  (Something to indicate it\n    just covers one sub reader at a time).\n\n\n\n\n\tIt looks like we don't handle the case of merging segs when a\n    given field is always FixedStraightBytes but the size had changed\n    from one seg to another?  (We throw IAE in\n    FixedStraightBytesImpl.merge).  Are there other cases that will\n    lead to \"late binding\" exc during merge?\n\n\n\n\n\tIn TypePromoter, instead of \"promoted.flags & ~(1 << 3)\" can you\n    name that constant bit mask?  EG IS_BYTES or NOT_NUMERIC\n    or something? \n\n\n\n\n\tWith this patch, does this mean we can type-promote on the fly?\n    Ie, if I make a SlowMRWrapper, and pull its perDocValues, we will\n    present the promoted type (across all segments) correctly?  And\n    when the user looks up the value for a certain docID, we promote\n    it as needed?\n\n\n\n\n\tTypo in comment in Floats.java: \"only bulk merge is value type is\n    the same otherwise size differs\": change \"is\" to \"if\"\n\n\n\n\n\tCan we rename Writer.setNextEnum -> Writer.setNextMergeEnum?\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13120782"
        },
        {
            "date": "2011-10-08T20:50:07+0000",
            "content": "attaching current state. I updated the latest patch to trunk and fixed several issues...\n\n\nYou can remove the TODO in DocValuesConsumer.merge \n\ndone\n\nMake sure we mark TypePromoter as @lucene.internal.\n\ndone\n\nf we hit exc inside FixedStraightBytesImpl.merge, we are still\nsetting merge=true; is finish then called, up above? (At which\npoint we are going to try to write to the closed file).\nno, this merge only is taken into account if the merge is successful. in the case of an exception we don't call finish. I renamed it to hasMerged.\n\nThe jdocs for DocValuesConsumer.merge say \"Merging segments out of\norder is not supported\", but you just mean segments must arrive in\nsorted order right? (Ie, TieredMP merges non-sequential segments,\nwhich we have been calling out-of-order merge).\n\nthis is bogus (leftover from branch) I removed it\n\nSince DocValuesConsumer.merge ignores the incoming IndexDocValues\n(a MultiIndexDocValues), do we even need to pass that in...? \nI fixed this too. I don't create this MIDV anymore and use the readers directly which I need anyway for type promotion.\n\n\nIt looks like we don't handle the case of merging segs when a\ngiven field is always FixedStraightBytes but the size had changed\nfrom one seg to another? (We throw IAE in\nFixedStraightBytesImpl.merge). Are there other cases that will\nlead to \"late binding\" exc during merge?\n\nFixedStraightBytes with different sizes are promoted to VarStraightBytes so this is not an issue.\n\nWith this patch, does this mean we can type-promote on the fly?\nIe, if I make a SlowMRWrapper, and pull its perDocValues, we will\npresent the promoted type (across all segments) correctly? And\nwhen the user looks up the value for a certain docID, we promote\nit as needed?\n\nactually yes! I implemented this in the patch but need to test it though.\n\nthe current patch has one problem, if you add three incompatible types A,B,C and Segs with A & B get merged (and dropped) but segs containing C are not in that merge those the type will be C eventually. but this seems ok to me though.\n\nstill some nocommits left but I think we are getting close  ",
            "author": "Simon Willnauer",
            "id": "comment-13123562"
        },
        {
            "date": "2011-10-10T10:14:40+0000",
            "content": "next iteration. Added JavaDoc, removed all nocommits and fixed all tests.\n\nThis version of the patch promotes incompatible variants to BYTES_VAR_STRAIGHT instead of dropping the data entirely. this looses at least no data if somebody messes up their types. I think this is ready - if nobody objects I am going to commit this tomorrow... ",
            "author": "Simon Willnauer",
            "id": "comment-13123985"
        },
        {
            "date": "2011-10-10T13:05:20+0000",
            "content": "Patch looks good Simon!  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-13124061"
        },
        {
            "date": "2011-10-10T15:28:50+0000",
            "content": "committed to trunk in rev. 1181020\n\nthanks ",
            "author": "Simon Willnauer",
            "id": "comment-13124170"
        }
    ]
}