{
    "id": "SOLR-1149",
    "title": "Make QParserPlugin and related classes extendible",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In a recent attempt to create a QParserPlugin which extends DisMaxQParser/FunctionQParser functionality, \nit became apparent that in the current state of these classes, it is not straight forward and in fact impossible to seriously build\nupon the existing code. \nTo this end, I've refactored some of the involved classes which enabled me to reuse existing logic to great results.\nI thought I will share these changes and comment on their nature in the hope these will make sense to other solr developers/users, and\nat the very least cultivate a fruitful discussion about this particular area of the solr codebase.\n\nThe relevant changes are as follows:\n\n\n\tRenamed DismaxQParser class to DisMaxQParser ( in accordance with the apparent naming convention, e.g DisMaxQParserPlugin )\n\n\n\n\n\tMoved DisMaxQParser to its own .java file, making it a public class rather than its previous package-private visibility. This makes\n  it possible for users to build upon its logic, which is considerable, and to my mind is a good place to start alot of custom\n  QParser implementations.\n\n\n\n\n\tChanged access modifiers for the QParser abstract base class to protected (were package-private). Again as above, it makes this\n  object usable by user-defined classes that wish to define custom QParser classes. More generally, and on the philosophy-of-code \n  side of things, it seems misleading to define some class members as having the default access modifier (package-private) and then\n  letting other package-scope derived classes use these while not explicitly allowing user-defined derived classes to make use of these members.\n\n\n\n  In specific i'm thinking of how DisMaxQParser makes use of these members: **not because it is derived from QParser, but because it\n  simply resides in the same namespace**\n\n\n\tChanged access modifier for the QueryParsing.StrParser inner class and its constructors to public. Again as in above, same issue\n  of having same-package classes enjoy the benefit of being in the same namespace (FunctionQParser.parse() uses it like so), \n  while user defined classes cannot. Particulary in this case it is pretty bad since this class advertises itself as a collection of utilities\n  for query parsing in general - great resource, should probably even live elsewhere (common.utils?)\n\n\n\n\n\tChanged Function.FunctionWeight inner class data member modifiers to protected (were default - package-private). This allowed me\n  to inherit from FunctionQuery as well as make use of its original FunctionWeight inner class while overriding some of the latter's\n  methods. This is in the same spirit of the changes above. Please also note this follows the common Query/Weight implementation pattern\n  in the lucene codebase, see for example the BooleanQuery/BooleanWeight code.\n\n\n\nAll in all these are relatively minor changes which unlock a great deal of functionality to 3rd party developers, which i think is\nultimately a big part of what solr is all about - extendability. It is also perhaps a cue for a more serious refactoring of the\nQParserPlugin hierarchy, although i will leave such bold exclamations to another occasion.\n\nAttached is a patch file, having passed the usual coding-style/unit testing cycle.\n\n-Chak",
    "attachments": {
        "SOLR-1149.patch": "https://issues.apache.org/jira/secure/attachment/12407437/SOLR-1149.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Kaktu Chakarabati",
            "id": "comment-12706752",
            "date": "2009-05-07T07:56:49+0000",
            "content": "patch file implementing the mentioned changes. "
        },
        {
            "author": "Kaktu Chakarabati",
            "id": "comment-12709048",
            "date": "2009-05-13T18:21:56+0000",
            "content": "Guys,\nAny chance this will make it into the 1.4/1.5 roadmaps?\nI think its a pretty minor change and can prove pretty useful ( for me and my company the alternative\nwould be to move to a roll-your-own solr war file mode which I'd really hate..  )\n\n-Chak "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12709104",
            "date": "2009-05-13T20:29:13+0000",
            "content": "It's set for release in 1.4, but subject to more review.\n+1 from me. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12711559",
            "date": "2009-05-21T10:33:30+0000",
            "content": "Added an experimental API note to all the changed classes.\n\nI'll commit in a day or two. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12712213",
            "date": "2009-05-22T18:59:05+0000",
            "content": "Committed revision 777656.\n\nThanks Kaktu! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775732",
            "date": "2009-11-10T15:52:05+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}