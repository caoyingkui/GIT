{
    "id": "SOLR-2783",
    "title": "Please make DocSet extend Serializable",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Wish",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "We have built a custom EHCache backed implementation of SolrCache that allows us to spill over the cache to disk and have it persistent across Solr restarts. To allow disk spillover we need the key and value of the cache to be Serializable. So our SolrCache implementation signature is like this:\n\n\npublic class EhCacheSolrCache implements SolrCache<Serializable,Serializable> {\n...\n}\n\n\n\nOne of the things we are caching are DocSets (specifically BitDocSets). Currently we are wrapping it into a Serializable class of our own:\n\n\npublic class SerializableBitDocSet extends BitDocSet implements Serializable {\n\n  private static final long serialVersionUID = 3723685897599896159L;\n\n  public SerializableBitDocSet() {\n    super();\n  }\n  \n  public SerializableBitDocSet(OpenBitSet obs) {\n    super(obs);\n  }\n\n\n\nand when getting or putting into the cache, we convert to the Serializable version using the deprecated method getBits().\n\n\nSerializableBitDocSet docset = new SerializableBitDocSet(newSearcher.getDocSet(q).getBits());\nnewSearcher.getCache(CACHED_FACETS_BITSETS_CACHENAME).put(facetQuery, docset);\n\n\n\nOn the get, since a SerializableBitDocSet is a BitDocSet there is no extra work.\n\nTwo issues:\n1) we are using a deprecated getBits() call to make the conversion - this is likely to disappear in a later version.\n2) the approach is hacky, since we have to potentially subclass other bitset like structures to make them Serializable as well.\n\nIt would be nice if DocSet (the parent interface) can be made Serializable. This would allow Solr users to use this as a cache value for disk-persistent caches without any hackery.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13163818",
            "date": "2011-12-06T20:41:32+0000",
            "content": "It would be nice if DocSet (the parent interface) can be made Serializable\n\nIn general I feel like this would be a bad idea.\n\nDocSets are inherently transient - they contain information that is tied not only to a specific index, but a specific commit point because the docIds in the set are invalid if the index is merged or appended to in anyway.  Marking them as Serializable could easily mislead people into thinking that in general the type of serialization you are doing is \"safe\"\n\nIn your specific case, you might be constraining the usage of your cache, and the usage of this serialization to ensure that you never attempt to use a deserialized DocSet in a way that no longer makes sense (ie: against a diff version of the index) but i really don't think we want to encourage that in the general case.\n\n\u2014\n\nTo work around this w/o relying on the deprecated method, you can always check the implementation of the DocSet and call BitDocSet.getBits() or DocSet.iterator() as the case may be. "
        },
        {
            "author": "Sujit Pal",
            "id": "comment-13252009",
            "date": "2012-04-11T22:49:37+0000",
            "content": "Thanks Hoss, missed your comment, came across this while searching for something else. You point out a valid concern, and we have encountered it in our implementation , so now we recycle our caches after every commit (the cache key contains the last committed timestamp). Thanks for the workarounds, I will try them out.\n\nClosing the bug. "
        },
        {
            "author": "Sujit Pal",
            "id": "comment-13252010",
            "date": "2012-04-11T22:50:21+0000",
            "content": "Closing per previous comment. "
        }
    ]
}