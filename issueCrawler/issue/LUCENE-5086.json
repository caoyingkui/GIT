{
    "id": "LUCENE-5086",
    "title": "RamUsageEstimator causes AWT classes to be loaded by calling ManagementFactory#getPlatformMBeanServer",
    "details": {
        "components": [],
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Yea, that type of day and that type of title .\n\nSince the last update of Java 6 on OS X, I started to see an annoying icon pop up at the doc whenever running elasticsearch. By default, all of our scripts add headless AWT flag so people will probably not encounter it, but, it was strange that I saw it when before I didn't.\n\nI started to dig around, and saw that when RamUsageEstimator was being loaded, it was causing AWT classes to be loaded. Further investigation showed that actually for some reason, calling ManagementFactory#getPlatformMBeanServer now with the new Java version causes AWT classes to be loaded (at least on the mac, haven't tested on other platforms yet). \n\nThere are several ways to try and solve it, for example, by identifying the bug in the JVM itself, but I think that there should be a fix for it in Lucene itself, specifically since there is no need to call #getPlatformMBeanServer to get the hotspot diagnostics one (its a heavy call...).\n\nHere is a simple call that will allow to get the hotspot mxbean without using the #getPlatformMBeanServer method, and not causing it to be loaded and loading all those nasty AWT classes:\n\n\n    Object getHotSpotMXBean() {\n        try {\n            // Java 6\n            Class sunMF = Class.forName(\"sun.management.ManagementFactory\");\n            return sunMF.getMethod(\"getDiagnosticMXBean\").invoke(null);\n        } catch (Throwable t) {\n            // ignore\n        }\n        // potentially Java 7\n        try {\n            return ManagementFactory.class.getMethod(\"getPlatformMXBean\", Class.class).invoke(null, Class.forName(\"com.sun.management.HotSpotDiagnosticMXBean\"));\n        } catch (Throwable t) {\n            // ignore\n        }\n        return null;\n    }",
    "attachments": {
        "LUCENE-5086-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12590946/LUCENE-5086-trunk.patch",
        "LUCENE-5086-branch4x.patch": "https://issues.apache.org/jira/secure/attachment/12590964/LUCENE-5086-branch4x.patch",
        "LUCENE-5086.patch": "https://issues.apache.org/jira/secure/attachment/12590938/LUCENE-5086.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-01T17:17:28+0000",
            "content": "LOL ",
            "author": "Robert Muir",
            "id": "comment-13696972"
        },
        {
            "date": "2013-07-03T13:05:28+0000",
            "content": "This would be normally handled by the test framework as a thread leak, but it's explicitly excluded in default randomizedtesting filters:\n\n      // Explicit check for MacOSX AWT-AppKit\n      if (t.getName().equals(\"AWT-AppKit\")) {\n        return true;\n      }\n\n\n\nI believe ManagementFactory#getPlatformMBeanServer was not the only call that could have started that AWT daemon, very odd. ",
            "author": "Dawid Weiss",
            "id": "comment-13698926"
        },
        {
            "date": "2013-07-03T13:12:00+0000",
            "content": "Shay, can you say which version of Java (macosx) is causing this to happen? I'll try to reproduce tonight on my mac and see what the possible workarounds are (yours included). ",
            "author": "Dawid Weiss",
            "id": "comment-13698932"
        },
        {
            "date": "2013-07-03T13:30:11+0000",
            "content": "I updated MacOSX to 1.6.0_51 a few days ago on the Jenkins Server, but no popups \n\nApple's MacOSX Java also starts the AWT thread when loading the Java scripting framework, because there is one scripting language in the SPI list (something like \u00c4ppleFooBarScriptingEngine which also initializes AWT, also ignoring awt.headless=true)... It's all horrible. ",
            "author": "Uwe Schindler",
            "id": "comment-13698956"
        },
        {
            "date": "2013-07-03T14:18:13+0000",
            "content": "We can use the above code fragment to load the MXBean, if it can fall back to the official code when the direct instantiation does not work. And it should never ever catch Throwable, please specify the exact Exceptions and handle accordingly. On Trunk you can use the multi-catch as Lucene trunk is Java 7. ",
            "author": "Uwe Schindler",
            "id": "comment-13699014"
        },
        {
            "date": "2013-07-04T10:06:38+0000",
            "content": "The Java version on the Mac is the latest one:\n\njava version \"1.6.0_51\"\nJava(TM) SE Runtime Environment (build 1.6.0_51-b11-457-11M4509)\nJava HotSpot(TM) 64-Bit Server VM (build 20.51-b01-457, mixed mode)\n\nRegarding the catch, I think Throwable is the right exceptions to catch here. Catch all, who cares, you don't want a bug in the JVM that throws an unexpected runtime exception to cause Lucene to break the APP completely because its a static block, and I have been right there a few times. But if you feel differently, go ahead and change it to explicitly catch whats needed. ",
            "author": "Shay Banon",
            "id": "comment-13699892"
        },
        {
            "date": "2013-07-04T10:31:55+0000",
            "content": "I agree, the other code in RAMUsageEstimator catches Exception, but not Throwable. I would use a similar chain of calls in RamUsageEstimator.\n\nThe Lucene tests use headless=true by default so are not affected by this.\n\nI will provide a patch later. ",
            "author": "Uwe Schindler",
            "id": "comment-13699983"
        },
        {
            "date": "2013-07-04T10:45:25+0000",
            "content": "I remember about it but our mac died yesterday and my wife left the charger at work. I'll look into it tonight, unless Uwe is faster. ",
            "author": "Dawid Weiss",
            "id": "comment-13699989"
        },
        {
            "date": "2013-07-04T20:33:40+0000",
            "content": "Yeah, I confirm the problem  Instead of applying the patch mentioned by Shay I'd like to spend some time and see what Alex Shipilev did in his tool.\n\nHe's guessing the size of the alignment here:\n\nhttps://github.com/shipilev/java-object-layout/blob/master/src/main/java/org/openjdk/tools/objectlayout/VMSupport.java#L240\n\nbut also reading it directly here (hotspot and jrockit separately):\n\nhttps://github.com/shipilev/java-object-layout/blob/master/src/main/java/org/openjdk/tools/objectlayout/VMSupport.java#L138\n\nI'll dig what he actually does and whether the results are in sync with what we have. He still calls getPlatformMBeanServer directly so there'll have to be a workaround for that anyway.\n\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13700331"
        },
        {
            "date": "2013-07-04T20:51:38+0000",
            "content": "Just so that it doesn't escape: this patch does not bring up the AWT icon in the dock for me. I checked on a Mac with the default java (1.6).\n\nI will still look into Alex's estimation of the alignment property but if you want to commit this in then I can file another issue. ",
            "author": "Dawid Weiss",
            "id": "comment-13700337"
        },
        {
            "date": "2013-07-04T21:04:41+0000",
            "content": "+1\n\nLooks like the code I started this afternoon. In Lucene trunk (Java 7) we can remove the first check. We should check the code with all kniwn jvms and check which part is the source of yhe info (maybe using some printlns). ",
            "author": "Uwe Schindler",
            "id": "comment-13700339"
        },
        {
            "date": "2013-07-04T21:08:57+0000",
            "content": "Yep, I'll add a table to the issue. Going to bed now but will test tomorrow. ",
            "author": "Dawid Weiss",
            "id": "comment-13700342"
        },
        {
            "date": "2013-07-04T22:14:23+0000",
            "content": "You can move: final Class<?> beanClazz = Class.forName(\"com.sun.management.HotSpotDiagnosticMXBean\"); before the second try-block because when this fails its also too late for the \"official way\". ",
            "author": "Uwe Schindler",
            "id": "comment-13700359"
        },
        {
            "date": "2013-07-04T22:24:23+0000",
            "content": "Simplified patch for 4.x ",
            "author": "Uwe Schindler",
            "id": "comment-13700361"
        },
        {
            "date": "2013-07-04T22:24:43+0000",
            "content": "On Lucene trunk (Java 7) we can remove all try-catch blocks and only use to return the bean:\n\n\nfinal Class<?> beanClazz = Class.forName(\"com.sun.management.HotSpotDiagnosticMXBean\");\nreturn ManagementFactory.getPlatformMXBean(beanClazz);\n\n\n\nThe only one that needs to be reflected is the beanClazz, if it fails we are not on Hotspot (or something that does not emulate it). ",
            "author": "Uwe Schindler",
            "id": "comment-13700362"
        },
        {
            "date": "2013-07-04T22:31:48+0000",
            "content": "This is the patch for Java 7+ (using public API in ManagementFactory to get platform bean) ",
            "author": "Uwe Schindler",
            "id": "comment-13700364"
        },
        {
            "date": "2013-07-05T07:12:22+0000",
            "content": "Patch for branch4x (Lucene 4.x) ",
            "author": "Uwe Schindler",
            "id": "comment-13700492"
        },
        {
            "date": "2013-07-05T07:15:30+0000",
            "content": "The given patches for trunk and 4.x seem to work correctly. I changed the 4.x patch a little bit and removed extra Class.forName's and reordered the catch clauses. It now first tries to use the \"official\" java 7 API and only if not on Java 7 falls back to the Java 6 thing. Maybe we can use Constants to detect the JDK earlier without trying.\n\nFrom my perspective the 2 patches fix the issue perfectly, the trunk code is the official Java7 way to get this bean without a RPC server/proxy overhead and now AWT  ",
            "author": "Uwe Schindler",
            "id": "comment-13700494"
        },
        {
            "date": "2013-07-05T08:16:19+0000",
            "content": "Some restructuring and preventing a useless NPE that needs to be catched on non-Hotspot JVMs.\nI also removed the separate private method and made the whole thing with nested catches like at the other places in the static {} initializer (I don't like class' methods called from a static initializer). Also this one is easier to debug, as you can add printlns without working around the \"return\" escape of the original method!\n\nI tested on Windows:\n\n\tOracle JDK 6u32 and 6u45 (64 bit) work, proprietary sunMF API used\n\tOracle JDK 6u32, 32 bit is unsupported as before (the object alignment JVM option does not exist at all, but also the sunMF API is used)\n\tOracle JDK 7u25 and Oracle JDK 8 preview (64 bit) works, new public Java 7 API is used (via reflection) or statically typed in trunk\n\tAll other JVMs are unsupported, but they don't have obejct alignment available\n\n\n\nBy the way: Our code looks better and more universal, because it does not rely on the management bean to detect compressed oops. We \"measure\" them! So it also works with J9! ",
            "author": "Uwe Schindler",
            "id": "comment-13700513"
        },
        {
            "date": "2013-07-05T08:23:43+0000",
            "content": "This looks good, thanks Uwe. ",
            "author": "Dawid Weiss",
            "id": "comment-13700520"
        },
        {
            "date": "2013-07-05T08:28:56+0000",
            "content": "Commit 1499935 from Uwe Schindler\n[ https://svn.apache.org/r1499935 ]\n\nLUCENE-5086: RamUsageEstimator now uses official Java 7 API or a proprietary Oracle Java 6 API to get Hotspot MX bean, preventing AWT classes to be loaded on MacOSX ",
            "author": "ASF subversion and git services",
            "id": "comment-13700522"
        },
        {
            "date": "2013-07-05T08:31:43+0000",
            "content": "Commit 1499936 from Uwe Schindler\n[ https://svn.apache.org/r1499936 ]\n\nMerged revision(s) 1499935 from lucene/dev/trunk:\nLUCENE-5086: RamUsageEstimator now uses official Java 7 API or a proprietary Oracle Java 6 API to get Hotspot MX bean, preventing AWT classes to be loaded on MacOSX ",
            "author": "ASF subversion and git services",
            "id": "comment-13700528"
        },
        {
            "date": "2013-07-05T08:32:19+0000",
            "content": "Thanks Shay and Dawid! ",
            "author": "Uwe Schindler",
            "id": "comment-13700529"
        },
        {
            "date": "2013-07-23T18:37:04+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716736"
        }
    ]
}