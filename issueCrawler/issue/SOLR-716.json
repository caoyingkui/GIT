{
    "id": "SOLR-716",
    "title": "Support properties in configuration files",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Initially suggested by Hoss at https://issues.apache.org/jira/browse/SOLR-350?focusedCommentId=12562834#action_12562834 and taken forward by Henri in SOLR-646\n\n\n\tAllows users to define global as well as core-specific properties in solr.xml which can be used in solrconfig.xml and schema.xml\n\n<solr persistent=\"false\">\n\n  <property name=\"var\" value=\"value\" />\n\n  <cores adminPath=\"/admin/cores\">\n    <core name=\"core0\" instanceDir=\"core0\">\n      <property name=\"var\" value=\"value\" />\n    </core>\n    <core name=\"core1\" instanceDir=\"core1\" />\n  </cores>\n</solr>\n\n\n\tThe following core-specific properties will be added automatically:\n\t\n\t\tsolr.core.instanceDir\n\t\tsolr.core.name\n\t\tsolr.core.configName\n\t\tsolr.core.schemaName\n\t\n\t\n\tThe variable substitution will be done in this fall-back order \u2013 core-specific, implicit, global, system properties.\n\tThe properties defined in solr.xml should also be persisted back as is (without evaluation).",
    "attachments": {
        "solr-716.patch": "https://issues.apache.org/jira/secure/attachment/12388790/solr-716.patch",
        "SOLR-716.patch": "https://issues.apache.org/jira/secure/attachment/12388777/SOLR-716.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624997",
            "date": "2008-08-22T23:11:41+0000",
            "content": "Changes\n\n\n\tSolrResourceLoader keeps a reference to the CoreDescriptor to get access to the core specific properties without breaking API compatibility.\n\tCoreContainer and CoreDescriptor keep a Properties instance each for global and core-specific properties respectively\n\tDOMUtil#substituteSystemProperties has been refactored (without breaking compatibility) to another method which accepts a Properties instance. This instance is checked for a value failing which, System#getProperty is used.\n\tTestSolrProperties is a test for this borrowed from Henri's patch in SOLR-646. It is actually in SolrJ test sources rather than main sources for ease of testing.\n\n\n\nThe only thing not supported is that users cannot specify a variable inside solr.xml itself. Variables can only be used in the solrconfig.xml and schema.xml files (actually they can be used in any instance of Config class).\n\nReviews and comments are invited. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625028",
            "date": "2008-08-23T07:06:59+0000",
            "content": "\nSolrResourceLoader keeps a reference to the CoreDescriptor\nIt would seem preferable & possible to only store the properties (versus the CoreDescriptor) in the SolrResourceLoader; this is the only piece needed for evaluation.\nIMHO, the CoreDescriptor giving potential access to everything (through the CoreContainer), it should not be shared/stored outside of the SolrCore without careful impact consideration.\n\nusers cannot specify a variable inside solr.xml \nYou could do a second evaluation pass to expand the property values (if they are property expressions) created for the CoreContainer and for each CoreDescriptor.\nIf you were though, you'd need to keep the property expression map & the property value map separated. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625031",
            "date": "2008-08-23T08:03:42+0000",
            "content": "Changes\n\n\tPer Henri's comment, SolrResourceLoader now keeps a reference to the Properties instance instead of keeping a reference to CoreDescriptor\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625032",
            "date": "2008-08-23T08:07:34+0000",
            "content": "It would seem preferable & possible to only store the properties (versus the CoreDescriptor) in the SolrResourceLoader; this is the only piece needed for evaluation.\nCoreDescriptor can be easily obtained from SolrCore anyway and SolrCore is available to every single class in Solr . SolrResourceLoader is our own class and it does not expose the object (it is private and there is no getter). This enables the resourceloader to get access to any other property from CodeDescriptor (in future) if needed . \n\nusers cannot specify a variable inside solr.xml \n\nIs it very useful ? considering that it can only substitute system properties? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625033",
            "date": "2008-08-23T08:10:33+0000",
            "content": "You could do a second evaluation pass to expand the property values (if they are property expressions) created for the CoreContainer and for each CoreDescriptor.\n\nWe can do that but that will require modifying the Config constructor to pass in a boolean parameter \"substituteProperties\". If set to false, Config should not try to substitute properties on the given node. When creating the Config object for solr.xml itself, we don't know the properties because we haven't got that point yet so we must suppress substitution. Later when we have read the global properties and we start reading the \"core\" node, we can substitute global+system properties on the \"core\" sub-tree. We can do that but I'm not sure if that's necessary. Is it very useful?\n\nIf you were though, you'd need to keep the property expression map & the property value map separated.\nI didn't understand what you meant. Can you elaborate? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625036",
            "date": "2008-08-23T08:38:32+0000",
            "content": "I guess what is already there meets  most of the requirements . May be more enhancements can come in Solr1.4.  "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625040",
            "date": "2008-08-23T09:41:20+0000",
            "content": "property expressions can be used in solr.xml & are preserved during solr.xml persistence (solr-716.patch).\n\nIf you were though, you'd need to keep the property expression map & the property value map separated\nCoreDescriptor members can be property expressions - thus a map of expressions in both CoreDescriptor & CoreContainer to keep them around so we can reevaluate & persist them.\n.\nsubstituteProperties is made explicit so we can choose when to run it (instead of a ctor modification) and the substituteProperties() method would have been necessary anyway in that case. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625041",
            "date": "2008-08-23T10:56:22+0000",
            "content": "Henri \u2013 I'd like some help in understanding how having expressions in solr.xml itself help make multi cores easier to use. Can we see a use-case? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625046",
            "date": "2008-08-23T12:27:52+0000",
            "content": "\nSo I can define properties in a core scope based on properties defined in the core-container scope.\nSeems like a natural & expected feature.\nMost of the code to allow idem-potent persistence allows it almost for free.\nI did not expect that getting back all the solr-646 feature set (beside include) with very little modifications to your code would re-create a problem.\nSorry, I wont interfere again.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625047",
            "date": "2008-08-23T12:39:40+0000",
            "content": "Oh no, no problem here. Interfere is the wrong word \u2013 more eyes and hands can only help \n\nI only wanted to understand how it helps since I haven't used multiple cores a lot.\n\nThe patch looks good, some comments:\n\n\tWhy is the public constructor of CoreContainer made package private?\n\tCan we remove the properties parameter in CoreContainer#evalExpressions. It is confusing to call this method with two properties instances.\n\tNote that the way you create coreProperties in CoreContainer#create(SolrCore) method, the implicit properties are set after SolrConfig is created. Unless I'm misunderstanding something, you will not be able to use the implicit/automatic properties in your solrconfig.xml.\n\tCan you please help me understand what this bit of code in CoreContainer#persist is doing?\n\n// restore the core expr name if it was one and has not changed\n    String cname = StrUtils.join(aliases, ',');\n    Map<String,String> pcore = dcore.getCoreExpressions();\n    if (pcore != null) {\n      String namex = pcore.get(null);\n      if (namex != null) {\n        String namev = DOMUtil.substituteProperty(namex, loader.getProperties());\n        if (namev != null && namev.equals(cname))\n          cname = namex;\n      }\n    }\n\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625075",
            "date": "2008-08-23T15:38:20+0000",
            "content": "So I can define properties in a core scope based on properties defined in the core-container scope. Seems like a natural & expected feature.\nI've been thinking more on this. The core scope already inherits all properties defined in container scope. You can also override them. The only thing which is not possible is having expressions in the attributes of the <core> node such as name, instanceDir etc. Is that really necessary? If you enable expressions in a file whose information can be modified at run-time then it becomes a bit more complicated to persist back. You'd need to track both expressions and keep their evaluated values separately instead of just one object.\n\nI feel that this discussion should not hold up the 1.3 release any more. Let us go ahead with the patch I posted and handle enhancements as part of SOLR-646 with 1.3.1 or 1.4 which ever comes first. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625077",
            "date": "2008-08-23T15:43:51+0000",
            "content": "No changes in functionality. A bit of javadocs added.\n\nI shall commit this shortly. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625080",
            "date": "2008-08-23T16:26:40+0000",
            "content": "Might be post-commit but this will give a base to solr-646.\nFixed all issues raised by Shalin in previous version.\nAdded the persistence verification test. (thus the size bloat). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625081",
            "date": "2008-08-23T16:28:25+0000",
            "content": "Committed revision 688359.\n\nThank you Henri for your support and flexibility! Let us work towards all required enhancements in the next release.\n\nThanks to everybody who helped out in the related issue. "
        }
    ]
}