{
    "id": "LUCENE-7789",
    "title": "replace & forbid \"new FileInputStream\" and \"new FileOutputStream\" with Files.newInputStream & Files.newOutputStream",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "I haven't looked into the details of this much, but saw these links today and thought it would be worth opening a jira for discussion...\n\n\n\thttps://dzone.com/articles/fileinputstream-fileoutputstream-considered-harmful\n\thttps://issues.jenkins-ci.org/browse/JENKINS-42934\n\thttps://bugs.openjdk.java.net/browse/JDK-8080225\n\n\n\nThe crux of the issue being that the \"FileInputStream\" and \"FileOutputStream\" classes have finalizer methods with GC overhead that can be avoided using Files.newInputStream and Files.newOutputStream in their place.\n\nThis seems like it would make these methods good candidates for forbidding in lucene/solr (if possible).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15975069",
            "date": "2017-04-19T16:49:37+0000",
            "content": " NOTE: I have not audited our own code to see how much of an impact the finalizers are likely to have in actual lucene/solr application instances, nor done any investigation into how feasible doing this sort of replacement would be given that in some cases I know we're using FileInputStream and FileOutputStream specific methods like \"getChannel\" ... not sure if there are related improvements in the \"Files\" class for dealing with those usecases w/o involving a finalizer. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15978840",
            "date": "2017-04-21T14:41:42+0000",
            "content": "+1 We could still use the @SuppressForbidden annotation if there are rare cases that actually need a FileInputStream or a FileOutputStream. ",
            "author": "Adrien Grand"
        }
    ]
}