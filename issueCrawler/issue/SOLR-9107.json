{
    "id": "SOLR-9107",
    "title": "add annotation for more fine grained control of SSL per test-class",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Spinning off this idea from my earlier comment in SOLR-5776...\n\nAt some point in the future, after all this soaks, we should consider increasing the odds of using SSL \u2013 perhaps even add a new annotation (or replace @SupressSSL) with a param to help control the odds of using SSL / clientAuth on a per-class basis, ie...\n\n\n  @UseSSL(false) // same as @SupressSSL\n  @UseSSL() //  same as default if no annotation: SolrTestCaseJ4 picks SSL / clientAuth using LuceneTestCase.rarely\n  @UseSSL(ssl=0.75,clientAuth=0.25) // fine control of odds of using ssl & clientauth\n\n\n\n...some tests, like TestSSLRandomization should ideally have much higher odds of using SSL then other tests, and if we had an easy way to say \"these handful of simple cloud tests should use SSL very frequently\" then it wouldn't matter so much if the odds of other really 'expensive' tests only use SSL once in a blue moon.",
    "attachments": {
        "SOLR-9107.patch": "https://issues.apache.org/jira/secure/attachment/12803783/SOLR-9107.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-13T01:30:11+0000",
            "author": "Hoss Man",
            "content": "i've tweaked the syntax a bit from my original comment (@RandomizeSSL(0.0) instead of @RandomizeSSL(false) so it plays more nicely with things like @RandomizeSSL(1.0)) but here's a patch that is pretty close to what i described before.\n\nyou can still use @SuppressSSL of course, or provide a single double value to control the odds of both SSL and clientAuth \u2013 ie: @RandomizeSSL(0.5) for 50% chance (clientAuth still calculated independently) or go whole hog and say things like \"I want SSL to always be used, but clientAuth should never be used\" via @RandomizeSSL(ssl=1.0,clientAuth=0.0)\n\nThis also increases the \"effective odds\" of both SSL and clientAuth based on test.nightly and the value of the test.multiplier (starting with the \"configured odds\")\n\nat present, the \"sensible default\" when no odds are explicitly configured is still 20% of the time (which can wind up being higher with nightly/multiplier), but i think we could easily decrease that default to 10% or even 5% (to speed up typical test runs) if we move forward with adding this annotation (using high configured values) to some of the more critical (and short) cloud tests that we really want to use SSL frequently.  LIkewise, some of the existing @SuppressSSL tests could probably be switched to something like @RandomizeSSL(0.01) so they can still get tested with SSL occasionally\n\n\nMark Miller \u2013 what do you think? ",
            "id": "comment-15282327"
        },
        {
            "date": "2016-05-18T21:33:09+0000",
            "author": "Steve Rowe",
            "content": "+1 overall, all Solr tests passed for me on Linux and OS X (modulo a couple that fail intermittently without this patch too).\n\nOn SSL usage probabilities: nice folding in of tests.nightly (though the ~10% greater likelihood in your patch seems a little low) and tests.multiplier (taking the log means the default multiplier of 1 won't change the declared odds, since ln(1)=0).\n\n\n\nSince the method below is only ever called from SolrTestCaseJ4.beforeClass(), and all SolrTestCaseJ4 subclasses will inherit its @RandomizeSSL (or override it with their own), annotation in the code below will never be null, I think?  I guess this handles the case of third-party usage when not extending SolrTestCaseJ4? \n\nFrom RandomizeSSL.getSSLRandomizerForClass(Class)\n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n\n\nI see TestSSLRandomization.testSSLRandomizer() mostly tests classes that don't inherit from an annotated class, but that's zero actual Solr test cases, right?  I think more testing of the inheriting cases is warranted.\n\n\n\nFrom RandomizeSSL.getSSLRandomizerForClass(Class):\n      // nocommit: WTF won't this compile w/o casting???\n      //final RandomizeSSL annotation = clazz.getAnnotation(RandomizeSSL.class);\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n\n\n\nType erasure is a runtime thing, so I'm not sure why the compiler doesn't like it.\n\nThe following works, and is maybe a clue about what's happening, but isn't really better than casting (from one of the answers here: http://stackoverflow.com/questions/450807/how-do-i-make-the-method-return-type-generic):\n\n\n      final RandomizeSSL annotation = clazz.<RandomizeSSL>getAnnotation(RandomizeSSL.class);\n\n ",
            "id": "comment-15289889"
        },
        {
            "date": "2016-05-28T01:11:32+0000",
            "author": "Hoss Man",
            "content": "\n(though the ~10% greater likelihood in your patch seems a little low)\n\nI'm trying to keep things a bit conservative for now ... i don't want to cause the runtime of jenkins nightly builds to explode.  It can always be increased later. \n\n... I guess this handles the case of third-party usage when not extending SolrTestCaseJ4?\n\nyeah, i'm mainly just trying to be paranoid here \u2013 like \"what if someone (solr committer or third party dev) writes a new test baseclass that doesn't subclass SolrTestCaseJ4 and tries to use getSSLRandomizerForClass w/o realizing it's only for classes w/that annotation?\" or \"what if we decide not all tests should use SSL implicitly and remove the anotation from SolrTestCaseJ4 in the future?\"\n\nI see TestSSLRandomization.testSSLRandomizer() ... I think more testing of the inheriting cases is warranted.\n\nGood point.\n\nThe following works, ...\n\nNot for me it didn't...\n\n\n    [javac] /home/hossman/lucene/dev/solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.java:153: error: incompatible types: Annotation cannot be converted to RandomizeSSL\n    [javac]       final RandomizeSSL annotation = clazz.<RandomizeSSL>getAnnotation(RandomizeSSL.class);\n\n\n\n...but like you said, not really any cleaner then casting, and i don't really care enough to waste more time on figuring out why it doesn't work.\n\n\n\nUpdated patch:\n\n\n\tfixes the last few nocommits (SuppressSSL now reports the bugUrl in the logs)\n\timproves testing of the various inheritence situations\n\tadd a comment clarifying to future devs readng the code why an inherited SuppressSSL should override a direct RandomzeSSL annotation.\n\tat some multiplier randomization to the \"always\" and \"never ever\" checks in testSSLRandomizerEffectiveOdds to ensure we always do the right thing no matter how crazy the test runner might be\n\n\n\n\nI'm pretty happy with how things are, and would like to commit soon \u2013 but as things stand with this patch, precommit currently complains about malformed javadocs...\n\n\n     [echo] Checking for malformed docs...\n     [exec] \n     [exec] /home/hossman/lucene/dev/solr/build/docs/solr-test-framework/org/apache/solr/util/RandomizeSSL.html\n     [exec]   broken details HTML: Field Detail: reason: saw closing \"</ul>\" without opening <ul...>\n     [exec]   broken details HTML: Field Detail: ssl: saw closing \"</ul>\" without opening <ul...>\n     [exec]   broken details HTML: Field Detail: clientAuth: saw closing \"</ul>\" without opening <ul...>\n\n\n\n...but i can't really understand why. The <ul> tags look balanced to me, and tidy -output /dev/null .../RandomizeSSL.html concurs that \"No warnings or errors were found.\"  I thought maybe the problem was related to some of the @see tags in the docs for these attributes, but even if i completley remove the javadocs the same validation errors occur.\n\nAnybody have any idea what's going on here? Steve Rowe? Uwe Schindler?\n ",
            "id": "comment-15305069"
        },
        {
            "date": "2016-06-01T05:21:23+0000",
            "author": "Steve Rowe",
            "content": "precommit currently complains about malformed javadocs... [...] Anybody have any idea what's going on here? Steve Rowe? Uwe Schindler?\n\nSee LUCENE-7308 ",
            "id": "comment-15309284"
        },
        {
            "date": "2016-06-01T21:34:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 09372acb660d21b6da01f6ea65f00493126ee32b in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=09372ac ]\n\nSOLR-9107: new @RandomizeSSL annotation for more fine grained control of SSL testing ",
            "id": "comment-15311164"
        },
        {
            "date": "2016-06-01T21:35:05+0000",
            "author": "Hoss Man",
            "content": "ill let this sit on master for at least a day before pushing to 6x ",
            "id": "comment-15311168"
        },
        {
            "date": "2016-06-02T18:35:21+0000",
            "author": "Hoss Man",
            "content": "FYI: the increased odds ot using SSL in nightly / with tests.multiplier have helped uncover some OOM issues in tests when using SSL, see SOLR-9182\n\n(edit: typo in linked issue #) ",
            "id": "comment-15312843"
        },
        {
            "date": "2016-06-03T13:32:05+0000",
            "author": "ASF subversion and git services",
            "content": "\nEDIT: Typo Commit Msg for SOLR-9081 ",
            "id": "comment-15314110"
        },
        {
            "date": "2016-06-03T18:36:08+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8481d6f47fdcbbae049d07aa810c9632f44c201b in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8481d6f ]\n\nSOLR-9107: new @RandomizeSSL annotation for more fine grained control of SSL testing\n\n(cherry picked from commit 09372acb660d21b6da01f6ea65f00493126ee32b)\n\nConflicts:\n\tsolr/CHANGES.txt ",
            "id": "comment-15314565"
        },
        {
            "date": "2016-06-08T17:29:26+0000",
            "author": "Steve Rowe",
            "content": "My Jenkins found a reproducing seed for a TestSSLRandomization.testSslRandomizer() failure:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSSLRandomization -Dtests.method=testSSLRandomizer -Dtests.seed=2E775F0292A463C2 -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=en-PH -Dtests.timezone=Africa/Blantyre -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 0.05s J1  | TestSSLRandomization.testSSLRandomizer <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<true> but was:<false>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([2E775F0292A463C2:84FFA6FD36CC78D6]:0)\n   [junit4]    > \tat org.apache.solr.cloud.TestSSLRandomization.testSSLRandomizer(TestSSLRandomization.java:199)\n\n\n\nTestSSLRandomization.testSSLRandomizer()\n195: r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n196: assertEquals(1.0D, r.ssl, 0.0D);\n197: assertEquals(1.0D, r.clientAuth, 0.0D);\n198: conf = r.createSSLTestConfig();\n199: assertEquals(true, conf.isSSLMode());\n200: assertEquals(true, conf.isClientAuthMode());\n\n\n\nRandomizeSSL.SSLRandomizer\npublic SSLTestConfig createSSLTestConfig() {\n  // even if we know SSL is disabled, always consume the same amount of randomness\n  // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n  final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n    (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n  final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n    (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n  return new SSLTestConfig(useSSL, useClientAuth);\n}\n\n\nWith the above seed TestUtil.nextInt() produces the top of the range (1000), and so useSSL is set to false, since 1000 is not less than 1000 * the effective odds (1.0).\n\nOne way to fix this is to reduce the top of the range of random ints from 1000 to 999, so that effective 100% odds are never randomly trumped.\n\nI believe that the inverse is not a problem currently or with my proposed fix: when the effective odds are 0.0, if the next random int happens to be 0, 0 < 0 will evaluate to false.\n\nThe useClientAuth calculation will also need the same fix. ",
            "id": "comment-15321012"
        },
        {
            "date": "2016-06-08T18:33:20+0000",
            "author": "Steve Rowe",
            "content": "Hoss told me offline that my proposed fix sounds fine on cursory inspection, so I'll commit it shortly. ",
            "id": "comment-15321157"
        },
        {
            "date": "2016-06-08T18:43:03+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 86c053dd1055c5b2b4cfe3c8e6b573d3d1272b24 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=86c053d ]\n\nSOLR-9107: When creating a randomized SSL test config, 100% effective odds of using SSL and/or client auth should never be trumped by chance. ",
            "id": "comment-15321178"
        },
        {
            "date": "2016-06-08T18:44:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit eebce4a406716c1e1f31dd77a8d184d6e910df96 in lucene-solr's branch refs/heads/branch_6_1 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eebce4a ]\n\nSOLR-9107: When creating a randomized SSL test config, 100% effective odds of using SSL and/or client auth should never be trumped by chance. ",
            "id": "comment-15321182"
        },
        {
            "date": "2016-06-08T18:45:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ded16f8f182c6527df1ea15830d65815227aed25 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ded16f8 ]\n\nSOLR-9107: When creating a randomized SSL test config, 100% effective odds of using SSL and/or client auth should never be trumped by chance. ",
            "id": "comment-15321184"
        },
        {
            "date": "2016-06-09T04:59:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 86c053dd1055c5b2b4cfe3c8e6b573d3d1272b24 in lucene-solr's branch refs/heads/SOLR-9191 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=86c053d ]\n\nSOLR-9107: When creating a randomized SSL test config, 100% effective odds of using SSL and/or client auth should never be trumped by chance. ",
            "id": "comment-15321886"
        }
    ]
}