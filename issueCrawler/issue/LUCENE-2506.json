{
    "id": "LUCENE-2506",
    "title": "A Stateful Filter That Works Across Index Segments",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.0.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "By design, Lucene's Filter abstraction is applied once for every segment in the index during searching. In particular, the reader provided to its #getDocIdSet method does not represent the whole underlying index. In other words, if the index has more than one segment the given reader only represents a single segment.  As a result, that definition of the filter suffers the limitation of not having the ability to permit/prohibit documents in the search results based on the terms that reside in segments that precede the current one.\n\nTo address this limitation, we introduce here a StatefulFilter which specifically builds on the Filter class so as to make it capable of remembering terms in segments spanning the whole underlying index. To reiterate, the need for making filters stateful stems from the fact that some, although not most, filters care about the terms that they may have come across in prior segments. It does so by keeping track of the past terms from prior segments in a cache that is maintained in a StatefulTermsEnum instance on a per-thread basis. \n\nAdditionally, to address the case where a filter might want to accept the last matching term, we keep track of the TermsEnum#docFreq of the terms in the segments filtered thus far. By comparing the sum of such TermsEnum#docFreq with that of the top-level reader, we can tell if the current segment is the last segment in which the current term appears. Ideally, for this to work correctly, we require the user to explicitly set the top-level reader on the StatefulFilter. Knowing what the top-level reader is also helps the StatefulFilter to clean up after itself once the search has concluded.\n\nNote that we leave it up to each concrete sub-class of the stateful filter to decide what to remember in its state and what not to. In other words, it can choose to remember as much or as little from prior segments as it deems necessary. In keeping with the TermsEnum interface, which the StatefulTermsEnum class extends, the filter must decide which terms to accept or not, based on the holistic state of the search.",
    "attachments": {
        "LUCENE-2506.patch": "https://issues.apache.org/jira/secure/attachment/12448085/LUCENE-2506.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-11-25T13:16:10+0000",
            "content": "Putting my vote on this one.\n\nAbout 80% of our filters were broken by the change to making filters work only over a single segment, and our hack to make it work in the meantime is not particularly great as it makes our filters only work  with a single reader.  Some better Filter API is required, which lets us know of the context. ",
            "author": "Trejkaz",
            "id": "comment-12935750"
        },
        {
            "date": "2010-11-25T13:45:26+0000",
            "content": "Some better Filter API is required, which lets us know of the context.\n\nThere's an opposite opinion. The way Lucene traverses segments one-by-one during searching is by no means the only possible one.\nI'm working on parallel searches, when segments are traversed in parallel by different threads. This robs you of any context possible.\nSo, I think it would be nice for the core API to be context-less. If you require context - build it on top. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12935755"
        },
        {
            "date": "2010-11-25T13:55:22+0000",
            "content": "Unfortunately, on first glance, this solution sound too heavyweight, in general (eg it seems to have an unbounded cache of seg -> term -> docFreq).\n\nWhat if Filter.getDocIDSet also received the top reader and the docBase of this sub reader within that top reader?\n\nBut, note that the Filter should not assume any order in which the the sub readers are visited.  EG in the future we may have multiple threads visiting even the same sub at once, and different subs in different orders.\n\nOr.. is it possible to require that these stateful filters are always \"caching\" filters?  Ie, up front they build bitsets for all subs.  Then the Filter API can remain unchanged... and we'd probably make a CachingStatefulFilter that holds the cache so the particular filter can just focus on building the bit sets. ",
            "author": "Michael McCandless",
            "id": "comment-12935763"
        },
        {
            "date": "2010-11-25T22:19:15+0000",
            "content": "What if Filter.getDocIDSet also received the top reader and the docBase of this sub reader within that top reader?\n\nThat would be enough for us, would still allow for the parallel case, and would even be efficient in the parallel case for the majority of our filters.  The bulk of our context-sensitive filters are actually only sensitive to the docBase - we are doing an SQL query, get back the doc IDs relative to the root reader and only have to offset them to the local one.\n\nThere are still filters where we would have to stop the world and go back to build up a filter over the whole reader (e.g. filtering out non-current copies of a document), but we only have one or two filters like that, it can be done easily using a Future, and it would impact only the speed of our own code.  (Of course, if Lucene ever allowed modifying existing documents in-place, it would remove a lot of that sort of hack, since we could have a 'current-version' field and remove it from the non-current copies...) ",
            "author": "Trejkaz",
            "id": "comment-12935891"
        },
        {
            "date": "2010-11-25T22:43:38+0000",
            "content": "we are doing an SQL query, get back the doc IDs relative to the root reader and only have to offset them to the local one\n\nWhat do you do when segments merge and these very-very transient doc IDs change? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12935899"
        },
        {
            "date": "2010-11-25T23:18:05+0000",
            "content": "For the same reasons like Darwin said, I strongly discourage any state. In prior versions of Lucene that might have worked, but it was never documented to work on any special type of IR. Like queries, filters must be tasteless. any state is useless when you reopen readers e.g. with near real time. and only IndexSearcher but perhaps no other Subclass of Searcher might work with a docBase. Because ParallelMultiSearcher is broken, I currently plan a Replacement that does a parallel search on the sequential sub readers in a similar way like PMS does currently. Only that it does not work on several Searchers but instead takes one IndexReader and uses its subs as parallel threads. ",
            "author": "Uwe Schindler",
            "id": "comment-12935906"
        },
        {
            "date": "2010-11-26T02:39:00+0000",
            "content": "What do you do when segments merge and these very-very transient doc IDs change?\n\nWe are not deleting documents, and have not witnessed merges changing doc IDs in any other situation.  We have already heard all these lines about not using the doc ID as an ID, but the reality was that building filters takes a lot longer if you have to additionally perform a search for every row you get back from the database, so using an alternative ID was not an option. ",
            "author": "Trejkaz",
            "id": "comment-12935925"
        },
        {
            "date": "2010-11-26T03:09:22+0000",
            "content": "We are not deleting documents, and have not witnessed merges changing doc IDs in any other situation.\nThat assumption's gonna break very soon. Very very soon, when IndexWriter learns how to merge non-sequential segments.\n\nYou can do it same way Zoie authors did. They have a special per-segment cache that maps external ID <-> docID.\nThe cache is pre-loaded when opening the segment from a field. It costs some memory, but nothing frightening.\nThey found it optimal to add the same Term(\"ID\", \"ID\") to all the docs and then store external ID in that term's payload -> no TermsIndex pressure + gets read fast.\nThen you can convert between IDs at a cost of simple array lookup.\n\nNow, this IS reality. Bulletproof, fast lookups by external ID, and no broken cheats.\n\nP.S. Not sure it was exactly Zoie, but definetly some of LinkedIn's opensourced Lucene stuff. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12935927"
        },
        {
            "date": "2010-11-26T03:21:12+0000",
            "content": "That sounds like it would cost a fair bit of memory if you had hundreds of millions of documents.  The worst thing is that people actually load this much in, all the time using a desktop computer with only a few gigs of RAM.  Because it's a desktop app, \"why don't you get another gig of RAM for the cache\" probably won't fly if it suddenly happened in a new release of our software.  If it were a server app, maybe that would fly... maybe.\n\nBut yeah, some variant on this which only reads some of it from disk instead of all of it, might speed things up a bit.  A giant IntBuffer over a memory mapped file would probably be cached by the OS anyway. ",
            "author": "Trejkaz",
            "id": "comment-12935928"
        },
        {
            "date": "2010-11-26T11:07:41+0000",
            "content": "That assumption's gonna break very soon. Very very soon, when IndexWriter learns how to merge non-sequential segments.\n\nEven if we break this assumption on the ootb config we will still have\nto provide a way to get it back.  EG in this case, a merge policy\nwhich only selects contiguous segments (like the LogMergePolicy\ntoday). ",
            "author": "Michael McCandless",
            "id": "comment-12935973"
        }
    ]
}