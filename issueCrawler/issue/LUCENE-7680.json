{
    "id": "LUCENE-7680",
    "title": "Never cache term filters",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "6.5",
            "7.0"
        ]
    },
    "description": "Currently we just require term filters to be used a lot in order to cache them. Maybe instead we should look into never caching them. This should not hurt performance since term filters are plenty fast, and would make other filters more likely to be cached since we would not \"pollute\" the history with filters that are not worth caching.",
    "attachments": {
        "LUCENE-7680.patch": "https://issues.apache.org/jira/secure/attachment/12851359/LUCENE-7680.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15855713",
            "date": "2017-02-07T10:37:00+0000",
            "content": "Here is a patch. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15855719",
            "date": "2017-02-07T10:40:54+0000",
            "content": "For the record, this would still allow compound filters that wrap term filters to be cached (eg. a BooleanQuery or a ToParentBlockJoinQuery). ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15855838",
            "date": "2017-02-07T11:59:22+0000",
            "content": "+1 ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15856450",
            "date": "2017-02-07T18:09:41+0000",
            "content": "The hard coded rules here (and others) concern me.  If I override shouldCache I should hopefully be able to have my own different rules.  I see that this method invokes a frequency(...) method and minFrequencyToCache(...) pair of methods; the former is package level.  It should be protected?   Granted I could implement minFrequencyToCache and return Integer.MAX_VALUE.\n\nCurious; did you consider marking TermFilter as \"cheap\"? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15856493",
            "date": "2017-02-07T18:23:55+0000",
            "content": "I see this class as a default set of heuristics that should work well for most use-cases. If someone wants something more specific, I think the way to go should be to write a new impl, the API should be pretty simple to implement? As it stands, the class is indeed not designed for inheritance: in addition to those pkg-private methods, it is final.\n\nGranted I could implement minFrequencyToCache and return Integer.MAX_VALUE.\n\nRequiring that a filter has been seen Integer.MAX_VALUE times would indeed make it never cached. However this change goes a bit further in the case of term filters: it also does not add them to the history, which makes other filters more likely of being cached than they are today. To take an extreme example, say you have a query with 100 term filters and 1 other filter (which is not a term). Even if that other filter was the same in every query, it would never get cached because term queries \"pollute\" the history (we only keep track of the last 256 used filters) and that other filter would only occur at most twice in the history. By not putting term filters in the history of recently used filters, then Lucene would be more likely to notice that that other filter gets reused all the time.\n\nCurious; did you consider marking TermFilter as \"cheap\"?\n\nWhat do you mean? Maybe it is the cause of the confusion, but when I say term filter, I mean a TermQuery that is consumed with needsScores=false. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15856504",
            "date": "2017-02-07T18:32:55+0000",
            "content": "Thanks; for a moment there I confused this with the old TermsFilter now called TermInSetQuery.  And I am aware of that using a high integer frequency to avoid caching will nonetheless pollute the cache, which is bad.  I guess it'd be easy to write an implementation that delegates to a UsageTrackingQueryCachingPolicy.  What do you think about making UsageTrackingQueryCachingPolicy non-final so that it could be easily overridden and minFrequencyToCache might be customized by users? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15858075",
            "date": "2017-02-08T14:42:14+0000",
            "content": "Here is an updated patch. David, does it work better for you? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15858153",
            "date": "2017-02-08T15:57:48+0000",
            "content": "+1 Nice documentation too. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15869964",
            "date": "2017-02-16T13:59:21+0000",
            "content": "Commit 063954ce79f1e4babd22cc177b619c48136766d6 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=063954c ]\n\nLUCENE-7680: Never cache term filters. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15870023",
            "date": "2017-02-16T14:30:20+0000",
            "content": "Commit 5682c33b5c3444905e2638d735f935d198c4cea6 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5682c33 ]\n\nLUCENE-7680: Never cache term filters. ",
            "author": "ASF subversion and git services"
        }
    ]
}