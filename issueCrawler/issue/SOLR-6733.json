{
    "id": "SOLR-6733",
    "title": "Umbrella issue - Solr as a standalone application",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Reopened",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Umbrella issue.\n\nSolr should be a standalone application, where the main method is provided by Solr source code.\n\nHere are the major tasks I envision, if we choose to embed Jetty:\n\n\n\tCreate org.apache.solr.start.Main (and possibly other classes in the same package), to be placed in solr-start.jar.  The Main class will contain the main method that starts the embedded Jetty and Solr.  I do not know how to adjust the build system to do this successfully.\n\tHandle central configurations in code \u2013 TCP port, SSL, and things like web.xml.\n\tFor each of these steps, clean up any test fallout.\n\tHandle cloud-related configurations in code \u2013 port, hostname, protocol, etc.  Use the same information as the central configurations.\n\tConsider whether things like authentication need changes.\n\tHandle any remaining container configurations.\n\n\n\nI am currently imagining this work happening in a new branch and ultimately being applied only to master, not the stable branch.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-13T02:47:40+0000",
            "author": "Shawn Heisey",
            "content": "SOLR-4792 was the first salvo.  5.x versions will still need to retain the .war target, probably as the default, with standalone as an alternate. ",
            "id": "comment-14209145"
        },
        {
            "date": "2014-11-14T04:59:35+0000",
            "author": "Shawn Heisey",
            "content": "Should I convert SOLR-4792 to a subtask? ",
            "id": "comment-14211831"
        },
        {
            "date": "2015-12-13T11:44:42+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This can be closed now. ",
            "id": "comment-15054920"
        },
        {
            "date": "2015-12-13T17:04:34+0000",
            "author": "Erick Erickson",
            "content": "We can reopen if necessary. ",
            "id": "comment-15055049"
        },
        {
            "date": "2016-03-24T04:37:03+0000",
            "author": "Shawn Heisey",
            "content": "While discussing a warning emitted by Jetty during Solr startup on the jetty-user mailing list, the idea of embedding Jetty into Solr was mentioned.\n\nLet's assume for a moment that I'm insane enough to actually try tackling this.  One idea for the package name is org.apache.solr.start \u2013 modelled after what I can see in jetty's start.jar.\n\nWould that be a reason to re-open this issue?    Should the new package go in solr/core, or would it be better to create a solr/start module directory?  I haven't delved into it at all, but I'm guessing packaging would be easier if it's a separate directory. ",
            "id": "comment-15209734"
        },
        {
            "date": "2016-03-24T04:43:04+0000",
            "author": "Mike Drob",
            "content": "Shawn Heisey - I've embedded Jetty into a web app before, it wasn't nearly as bad as you might think it to be. o.a.s.start is a fine package name. Deciding whether it should be a module or package depends on how invasive you want the coupling to be. Once you have an embedded Jetty, you can start adding all sorts of start hooks to handle interesting upgrade scenarios. ",
            "id": "comment-15209741"
        },
        {
            "date": "2016-03-24T05:20:49+0000",
            "author": "Shawn Heisey",
            "content": "It would be a new package name either way, but as I consider how to handle the build, I think a separate directory is easier to package into something with a name like \"solr-start.jar\".\n\nI'm encouraged to learn that the insanity level will be less than I feared. ",
            "id": "comment-15209786"
        },
        {
            "date": "2018-05-15T17:15:39+0000",
            "author": "Shawn Heisey",
            "content": "I'm not sure why this issue was closed.  No work was ever done, Solr is still a webapp that requires a container.\n\nShould I open a new issue, or re-open this one? ",
            "id": "comment-16476204"
        },
        {
            "date": "2018-05-15T17:37:21+0000",
            "author": "Uwe Schindler",
            "content": "I think this issue is fine, we should reopen it. Not sure why it was closed. ",
            "id": "comment-16476234"
        },
        {
            "date": "2018-05-15T19:50:56+0000",
            "author": "Shawn Heisey",
            "content": "I think that embedding Jetty is the path of least resistance, and least likely to cause heartburn.  If there is any desire to switch to some other way of providing http services, it would be best to decide that before doing any work on this.\n\nPluses to embedding Jetty:  A lot of the code is already written, and more importantly, debugged.  The Jetty community has been really awesome.  They respond quickly to requests on their mailing list and IRC channel, with helpful answers. ",
            "id": "comment-16476392"
        },
        {
            "date": "2018-05-15T20:19:48+0000",
            "author": "Alexandre Rafalovitch",
            "content": "What about that Undertow work already done before? https://github.com/kohesive/solr-undertow\u00a0\n\nSeems like worth at least a fresh look to see if there were lessons learned in the parallel 2.5 years. Jayson Minard? ",
            "id": "comment-16476422"
        },
        {
            "date": "2018-05-15T23:24:50+0000",
            "author": "David Smiley",
            "content": "What is the point of this issue? (Why) What positive benefit?   ",
            "id": "comment-16476607"
        },
        {
            "date": "2018-05-16T01:47:44+0000",
            "author": "Shawn Heisey",
            "content": "David Smiley, most of that is covered in the discussion on the WhyNoWar wiki page:\n\nhttps://wiki.apache.org/solr/WhyNoWar\n\nThe more of the server config that we can control in our own code and not leave up to other people's code and configuration, the better off we'll be.\n\nAt the moment, we can't implement much of anything at the server/container level, because Solr is self-contained within its webapp.  With an embedded container, we would be able to do almost anything.\n\nI'm still very enamored by the idea in the subtask on this issue \u2013 SOLR-6734.  I think it would be a lot easier to implement that idea if Solr were its own self-contained application, instead of being started as a stripped-down but otherwise unmodified Jetty.\n\nI'm aware that there's a significant amount of work required to implement this issue.  It is my hope that a lot of the work would fall on my shoulders, but I also know that I will need help, and might find myself very much out of my depth.\n\nAlexandre Rafalovitch, Solr's code, especially the tests, is already pretty well attached to Jetty.  Switching to another container (undertow, tomcat, etc) or a completely different framework (Netty, Spring Boot, etc) would require a lot more work than embedding Jetty.  If there are tangible and easily-realized benefits to a switch, then I'm not opposed to it ... but those benefits would have to be pretty significant and difficult/impossible with Jetty. ",
            "id": "comment-16476715"
        },
        {
            "date": "2018-05-17T15:46:05+0000",
            "author": "David Smiley",
            "content": "I think this comes down to the distinction of what do we want to \"officially support\", vs. allow something to be possible for those that know what they are doing (and forgo support).  And not producing a war does not mean we need to hide jetty configs; there's plenty of middle-round from early days of 'war only' to a total black box.  Perhaps the current jetty config in plain sight makes it too easy to tempt people to modify it; I dunno.  For me; I have zero motivation to make things harder to configure, and this would be more annoying to users.  It would annoy me.  I've seen stackoverflow tips on, for example, adding CORS to Solr this way, and some additional things that I forget as well but have found useful.  I've modified Solr's jetty configs before, and it'd be nice to continue to do so with the same ease.\n\nAs a side note, I think it would be helpful to rename server/lib to server/jetty-lib so as it's less confusing/tempting to put libs there when that's almost always the wrong thing to do.  Someone recently made this mistake and I helped them.  I suppose we'd need an internal/jetty lib dir wether we have jetty config files or not, so this may not actually relate to this issue. ",
            "id": "comment-16479242"
        },
        {
            "date": "2018-05-17T18:08:15+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "It can be a good thing too - if we had all jetty config in Solr Java code then we\u2019d probably have a standard way of configuring CORS already, since there would be no workaround, like we have with SSL \n\nMoving to embedded jetty we\u2019d of course need to do a thorough review of what config options we need to make configurable in Solr\u2019s config and what extensions to include. I\u2019d love for more jetty-level config to live in Zookeeper too, such as SSL config and CORS config instead of having it all in solr.in.sh ",
            "id": "comment-16479481"
        },
        {
            "date": "2018-05-18T00:03:05+0000",
            "author": "Shawn Heisey",
            "content": "This comment is really long, and I've made a lot of edits before posting it.  Hopefully it's all coherent!\n\nYou both make good points.  The overall intent would be to make things easier to configure, not harder.  Mostly by having all the configuration for the server centralized, with reasonable defaults for anything that's not mentioned.  Starting up with an entirely missing config would be a highly desired secondary goal.  Users would not be able to configure Jetty settings that are not explicitly handled by our code.  I think that's a plus for stability, but I acknowledge that flexibility does take a hit.  If embedded Jetty has a facility for reading and processing configs similar to the jetty.xml used by the full server, that could be an answer.\n\nThere will be plenty of opportunity for bikeshedding about the precise location and format (json, xml, properties, etc) of the new config file(s).  I have some ideas for a starting point, discussed below.\n\nJan H\u00f8ydahl, your comments do bring up a notion that I've mentioned elsewhere: Always using ZK and eliminating the cloud mode distinction.  After some thought I decided to offer this solution instead, which i think has a lot of the same code simplification without the additional administrative overhead for users who don't want cloud:\n\nIn some cases the primary config file might only contain the TCP port, or it could be missing/empty.  Other typical settings for that config file would be things that may differ from node to node, and might include heap size, network interfaces to listen on, SSL config, and possibly a few more.  For cloud mode, ZK information (equivalents to zkRun and/or zkHost) would be required, and it might have hostname information for use when registering in live_nodes.  Everything else (mostly handled by solr.in.sh, jetty config files, and solr.xml currently) would be loaded (if found) from a conf directory or a secondary config file that could exist in the filesystem or in ZK.  Leaning more towards a secondary config file, but if all properly named files in conf (or maybe conf.d) were loaded, it could be a way for a user to split their config up into logical pieces.  I'm torn on whether to support per-node secondary configs in ZK, but leaning away from it.\n\nThe startup could also look for an optional properties file and load that.  For backwards compatibility, environment variables could be checked and used when an explicit configuration doesn't exist.\n\nFor flexibility in what a user can do, I think that all possible settings should be honored whether they are in the primary config or the secondary, with the exception of things that only make sense in the primary config file, such as ZK settings and java options like heap size.  If somebody puts the same setting in different files (and it's not a setting where multiple mentions make sense), I think the one encountered first should take precedence, and a warning should be logged for any further occurrences.\n\nCores and their configs would be handled much as they are now, with improvements handled in other issues.\n\nFor SolrCloud, SSL config could be loaded from ZK instead of a config file.  Mostly I imagine that being useful for users who create one certificate good for all nodes, but an idea that I'm leaning away from is per-node SSL configs in ZK.\n\nFor service installations, we can create /etc/solr/servicename, where the primary config for the service would live.  If the secondary config is not in ZK, it would also live there. ",
            "id": "comment-16479920"
        },
        {
            "date": "2018-05-18T00:03:52+0000",
            "author": "Shawn Heisey",
            "content": "An idea for a safety valve when running cloud mode: If the hostname is not specified in the config AND a special parameter is not set, starting SolrCloud should fail, displaying a message with the detected hostname/address and a note detailing the need to define either the hostname or the special parameter.  This would ensure that unworkable hostnames like 127.1.0.1 will only end up in zookeeper with explicit user action.  A possible name for the parameter: useDetectedHost ",
            "id": "comment-16479922"
        },
        {
            "date": "2018-05-18T06:07:19+0000",
            "author": "Shawn Heisey",
            "content": "An alternative and smarter safety valve idea, which I like better than the previous one:\n\nWhen the hostname is not defined, Solr should check what kind of address is detected.  Certain types (loopback, link-local, and the range reserved for carrier-grade NAT come to mind) should require a special parameter (maybe forceDetectedHost, open to suggestions) to allow startup. An address on a private network would start up with no trouble.  So would a public address, though I think it might be useful to log a warning for public addresses about the dangers of allowing the open Internet to reach a Solr server.  If the forceDetectedHost special parameter previously mentioned is configured, the public address warning would be suppressed. ",
            "id": "comment-16480210"
        },
        {
            "date": "2018-05-18T14:38:25+0000",
            "author": "Shawn Heisey",
            "content": "Solr's install directory layout will be altered significantly with these changes.  The new service installer script is going to need an upgrade option, which can optionally take an old service name.  The script would then find the old service, read its config, and duplicate as much of that config as it can for the new service.\n\nI've been having a discussion with docker-solr on how to benefit both projects.\n\nhttps://github.com/docker-solr/docker-solr/issues/173 ",
            "id": "comment-16480740"
        },
        {
            "date": "2018-05-23T02:16:57+0000",
            "author": "Shawn Heisey",
            "content": "Is there anyone out there with significant Ant experience, and possibly a significant understanding of Solr's build system in particular, that could help me write a build.xml for a \"start\" module, and integrate it into the overall build system? ",
            "id": "comment-16486608"
        },
        {
            "date": "2018-06-06T01:26:29+0000",
            "author": "Steve Rowe",
            "content": "Is there anyone out there with significant Ant experience, and possibly a significant understanding of Solr's build system in particular, that could help me write a build.xml for a \"start\" module, and integrate it into the overall build system?\n\nI could help.  How would this differ from the existing server/ module? ",
            "id": "comment-16502723"
        },
        {
            "date": "2018-06-06T05:49:58+0000",
            "author": "Shawn Heisey",
            "content": "I created a new branch.  And then discovered that I'd named it incorrectly after I'd already pushed it.  Now there's a correctly named \"solr-6733\" branch.\n\nMost of the work I've done is on scripts, but I have created new modules.  The Main.java for the start module is taken straight from an http2 embedded example and is likely nowhere near usable.  The Main.java for the agent module is untested and so far only implements one command. ",
            "id": "comment-16502839"
        },
        {
            "date": "2018-06-11T18:36:20+0000",
            "author": "Shawn Heisey",
            "content": "I can't seem to get the branch to work right, so I've gone another way.  I've forked it on github.\n\nhttps://github.com/elyograg/solr-6733\n\nAs soon as I get it checked out, I will apply my patch and push the change.  Give it an hour, should be done by then. ",
            "id": "comment-16508512"
        }
    ]
}