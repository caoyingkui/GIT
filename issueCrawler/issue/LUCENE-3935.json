{
    "id": "LUCENE-3935",
    "title": "Optimize Kuromoji inner loop - rewrite ConnectionCosts.get() method",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I've been profiling Kuromoji, and not very surprisingly, method ConnectionCosts.get(int forwardId, int backwardId) that looks up costs in the Viterbi is called many many times and contributes to more processing time than I had expected.\n\nThis method is currently backed by a short[][].  This data stored here structure is a two dimensional array with both dimensions being fixed with 1316 elements in each dimension.  (The data is matrix.def in MeCab-IPADIC.)\n\nWe can rewrite this to use a single one-dimensional array instead, and we will at least save one bounds check, a pointer reference, and we should also get much better cache utilization since this structure is likely to be in very local CPU cache.\n\nI think this will be a nice optimization.  Working on it...",
    "attachments": {
        "LUCENE-3935.patch": "https://issues.apache.org/jira/secure/attachment/12520442/LUCENE-3935.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-29T10:08:14+0000",
            "content": "I agree, this should also help on RAM? currently this is 1316 short[1316]'s i think?\n\nI feel like there is a TODO in here somewhere about this: especially since\nthe connectioncosts.dat we write is \"1 dimensional\", we just write forwardSize\nand backwardSize first and force it to a 2D array in RAM. But it could just\nas well make a single array of forwardSize*backwardSize... ",
            "author": "Robert Muir",
            "id": "comment-13241129"
        },
        {
            "date": "2012-03-29T11:58:49+0000",
            "content": "Ah, this brings back a small project that kind of lies in a dormant state for some time \u2013 I've written an annotation processor that generated classes for handling arrays of struct-like types (objects with fields only), including flattened multi-dimensional arrays. The code is on a branch here \u2013\n\nhttps://github.com/carrotsearch/hppc/blob/structs/hppc-examples/src/main/java/com/carrotsearch/hppc/examples/BattleshipsCell.java\n\nBut it's been a while, I need to get back to it, it may be useful. ",
            "author": "Dawid Weiss",
            "id": "comment-13241166"
        },
        {
            "date": "2012-03-29T15:49:30+0000",
            "content": "Thanks.\n\nRobert has done a great job making the binary version of matrix.def tiny with fancy encoding of data.  Very impressive!\n\nI've attached a patch and and verified that segmentation (surface forms only) match exactly those with the two-dimensional array based on approx. 100,000 Wikipedia articles with XML markup and all, totaling 880MB of data.\n\nProfiling tells me we get a 13% increase in performance on ConnectionCosts.get() after the change.  The method is called very, very frequently on indexing, and it's total CPU contribution is ~7-8% after the change, so the net improvement here is not more than a couple of percent.\n\nI was expecting more than a 13% increase in this method's performance after the change, hoping that all the connection costs would be in very local cache, but this number looks correct to me.  Would be great to get your feedback if this is in line with expectations, Dawid and Robert.\n\nDo we still want to apply this? ",
            "author": "Christian Moen",
            "id": "comment-13241324"
        },
        {
            "date": "2012-03-29T15:52:10+0000",
            "content": "+1, Robert and I already discussed about making one array out of it. It was at the time when I rewrote the hairy targetMap to be much more memory effective and not a huuuuuuge array of arrays with 1 entry each  ",
            "author": "Uwe Schindler",
            "id": "comment-13241327"
        },
        {
            "date": "2012-03-29T15:56:00+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13241328"
        },
        {
            "date": "2012-03-29T16:07:27+0000",
            "content": "+1. If this is called very frequently and you can affort storing ints instead of shorts then an int[] will have better alignment properties (and will not require extending to an int). May or may not play a difference depending on architecture (cpu cache sizes also matter here).  ",
            "author": "Dawid Weiss",
            "id": "comment-13241343"
        },
        {
            "date": "2012-03-30T09:14:13+0000",
            "content": "Thanks, Mike, Uwe and Dawid.\n\nIt's a good idea to do testing using int \u2013 thanks for that.  I did this hastily last night and results suggested that there wasn't a lot to be gained on Mac OS X, but I will look more into this and do a better test.\n\nKuromoji has a low memory footprint (uses FST instead of double-array trie, does Viterbi in a streaming fashion, etc.), which is a nice characteristic I'd like to keep.  Hence, I'm reluctant to trade 3MB of memory unless int really gives us a lot in terms of additional speed.  (Kuromoji currently segments ~2.5-3MB/sec per CPU core on my system.)\n\nI'll do some additional testing, have a think, but I'm likely to commit the short version in the attached patch tomorrow. ",
            "author": "Christian Moen",
            "id": "comment-13242177"
        },
        {
            "date": "2012-03-30T09:22:32+0000",
            "content": "I did this hastily last night and results suggested that there wasn't a lot to be gained on Mac OS X\n\nI agree it may not be noticeable because there are so many factors kicking in here (smaller structure - better cpu cache utilization vs. larger structure - potentially faster access to each value but potential cache misses). \n\nMakes sense to keep short[] in place, ignore my comment. ",
            "author": "Dawid Weiss",
            "id": "comment-13242183"
        }
    ]
}