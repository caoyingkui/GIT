{
    "id": "LUCENE-6218",
    "title": "don't decode freqs or enumerate all positions, when scores are not needed",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Today if you don't call score() some things are faster, we won't invoke similarity or read the norm for the document or other things.\n\nOn the other hand, its sad in this case that we are decompressing twice as many packed integers as we need (freqs can be skipped over, and our postings lists supports that) and walking all positions in phrase matching to determine the number of times the phrase matched (1 is enough, then we can stop).\n\nWhen scoring is not needed, things can be optimized in other cases too (e.g. thats the whole concept of filters).",
    "attachments": {
        "LUCENE-6218.patch": "https://issues.apache.org/jira/secure/attachment/12696499/LUCENE-6218.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14305504",
            "author": "Robert Muir",
            "date": "2015-02-04T16:59:13+0000",
            "content": "Here is a prototype patch: we pass a boolean to Weight.scorer(). Its initial value is set by IndexSearcher, based on the collector. E.g. you are sorting by price, or just counting the number of this, then its false.\n\nWe also pass false from QueryWrapperFilter, ConstantScoreQuery, and MUST_NOT clauses in BooleanQuery. "
        },
        {
            "id": "comment-14305566",
            "author": "Alan Woodward",
            "date": "2015-02-04T17:35:50+0000",
            "content": "This is part of what I was trying to do in LUCENE-2878: Weight.scorer() has an extra flag that describes what postings should be decoded.  So you can say if you just want docs only, or freqs, or positions, or whatever. "
        },
        {
            "id": "comment-14305572",
            "author": "Adrien Grand",
            "date": "2015-02-04T17:37:26+0000",
            "content": "+1 This has the potential to simplify/improve lots of things, eg. remove TermFilter which does not being any improvement anymore compared to TermQuery, or run prohibited clauses through BooleanScorer. "
        },
        {
            "id": "comment-14305573",
            "author": "Alan Woodward",
            "date": "2015-02-04T17:38:00+0000",
            "content": "Which is to say that I think this is a great idea, but it would be nice if the extra value passed to scorer() is an int, rather than a boolean, as that allows for more extensibility.  But that might need LUCENE-4524 to be committed first, as that unifies the flags on DocsEnum and DocsAndPositionsEnum, without which the simple integer flag doesn't make sense. "
        },
        {
            "id": "comment-14305583",
            "author": "Robert Muir",
            "date": "2015-02-04T17:41:02+0000",
            "content": "Alan, yes i saw that.\n\nBut I think we should design for today, I dont think we should make elaborate apis extensible to the future. If we want it to be an integer flag later, we can just change it. "
        },
        {
            "id": "comment-14305593",
            "author": "Alan Woodward",
            "date": "2015-02-04T17:45:06+0000",
            "content": "Oh, sure.  I'm sort of hoping that the future in this case means this week, though .  Just want to make sure we're not stepping on each other's toes. "
        },
        {
            "id": "comment-14305594",
            "author": "Michael McCandless",
            "date": "2015-02-04T17:46:08+0000",
            "content": "+1, awesome "
        },
        {
            "id": "comment-14305609",
            "author": "Robert Muir",
            "date": "2015-02-04T17:54:17+0000",
            "content": "Well, i'm not sure merging docsenum and docsandpositionsenum is related. The scoring api still has no concept of positions with that change, and there is no optimization to implement in any of the scorers (yet), so I think we can defer whether the boolean needs to be upgraded to an int, in other issues, when we have real use cases to use it?\n\nIn this case we are just saying up-front that we don't need the score to speed up queries we have today.\n\nAnd we have a few use cases right now that can be sped up by the change, e.g. sorting by something other than score, boolean MUST_NOT, constant score queries, filters, etc. I only implemented the optimization for terms and exact phrases, but we could do it for sloppy phrases, spans, etc too.\n "
        },
        {
            "id": "comment-14305615",
            "author": "Alan Woodward",
            "date": "2015-02-04T17:56:56+0000",
            "content": "yeah, that'll be in later issues.  +1 to commit this one then. "
        },
        {
            "id": "comment-14305637",
            "author": "Robert Muir",
            "date": "2015-02-04T18:08:32+0000",
            "content": "Here is the standard benchmark. You can see the optimization happening for the MUST_NOT clauses:\n\n                    Task   QPS trunk      StdDev   QPS patch      StdDev                Pct diff\n            OrHighNotLow      108.19      (4.1%)      105.11      (6.7%)   -2.8% ( -13% -    8%)\n            OrHighNotMed       89.28      (3.7%)       87.15      (6.3%)   -2.4% ( -11% -    7%)\n                HighTerm      120.82      (5.1%)      118.25      (6.1%)   -2.1% ( -12% -    9%)\n                 MedTerm      177.26      (4.8%)      173.98      (5.8%)   -1.9% ( -11% -    9%)\n                 LowTerm      950.16      (4.4%)      934.26      (4.6%)   -1.7% ( -10% -    7%)\n           OrHighNotHigh       29.55      (3.2%)       29.14      (5.7%)   -1.4% (  -9% -    7%)\n             MedSpanNear      144.83      (3.7%)      143.30      (4.5%)   -1.1% (  -8% -    7%)\n                Wildcard       45.54      (5.3%)       45.17      (6.1%)   -0.8% ( -11% -   11%)\n                 Prefix3      214.45      (5.5%)      213.06      (7.6%)   -0.6% ( -13% -   13%)\n             LowSpanNear       28.04      (2.7%)       27.86      (3.3%)   -0.6% (  -6% -    5%)\n              AndHighLow     1171.37      (2.4%)     1165.20      (3.0%)   -0.5% (  -5% -    5%)\n            HighSpanNear      144.44      (3.9%)      143.73      (5.0%)   -0.5% (  -9% -    8%)\n           OrNotHighHigh       49.49      (3.2%)       49.25      (5.8%)   -0.5% (  -9% -    8%)\n                  IntNRQ        8.45      (7.7%)        8.41     (10.3%)   -0.5% ( -17% -   19%)\n             AndHighHigh       88.18      (1.6%)       87.78      (1.9%)   -0.5% (  -3% -    3%)\n              AndHighMed      123.35      (1.7%)      123.11      (1.8%)   -0.2% (  -3% -    3%)\n                 Respell       89.47      (1.9%)       89.44      (1.4%)   -0.0% (  -3% -    3%)\n                  Fuzzy1      109.20      (1.8%)      109.63      (1.3%)    0.4% (  -2% -    3%)\n                  Fuzzy2       67.56      (2.1%)       67.85      (1.5%)    0.4% (  -3% -    4%)\n               LowPhrase       34.54      (2.0%)       34.76      (1.9%)    0.6% (  -3% -    4%)\n         LowSloppyPhrase      119.91      (2.6%)      120.75      (2.4%)    0.7% (  -4% -    5%)\n              OrHighHigh       27.37      (9.3%)       27.71      (8.6%)    1.2% ( -15% -   21%)\n               OrHighMed       58.23      (8.7%)       58.97      (8.0%)    1.3% ( -14% -   19%)\n               OrHighLow       56.42      (8.7%)       57.23      (7.9%)    1.4% ( -13% -   19%)\n         MedSloppyPhrase       15.92      (4.0%)       16.19      (4.3%)    1.7% (  -6% -   10%)\n        HighSloppyPhrase       13.52     (12.1%)       13.77      (8.6%)    1.9% ( -16% -   25%)\n              HighPhrase       17.50      (4.5%)       17.99      (4.2%)    2.8% (  -5% -   12%)\n               MedPhrase      253.02      (5.7%)      261.32      (6.1%)    3.3% (  -8% -   15%)\n            OrNotHighMed      185.01      (1.9%)      205.45      (3.6%)   11.0% (   5% -   16%)\n            OrNotHighLow      959.96      (2.2%)     1144.49      (3.5%)   19.2% (  13% -   25%)\n\n "
        },
        {
            "id": "comment-14306054",
            "author": "Robert Muir",
            "date": "2015-02-04T21:57:10+0000",
            "content": "complete patch. I also added simple tests. "
        },
        {
            "id": "comment-14306212",
            "author": "Robert Muir",
            "date": "2015-02-04T23:33:02+0000",
            "content": "Hooked into more tests so we can be sure docids are correct with flag on/off.\n\nBooleanQuery discards optional clauses when MSM=0 and scoring isn't required. Added early-exit logic to SloppyPhraseScorer, like ExactPhraseScorer. Fixed a case where Lucene50PF would return 0 here (since things already rely on it returning 1).\n\nI think its ready. "
        },
        {
            "id": "comment-14306247",
            "author": "Michael McCandless",
            "date": "2015-02-04T23:52:43+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14306273",
            "author": "Ryan Ernst",
            "date": "2015-02-05T00:10:55+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14306920",
            "author": "Adrien Grand",
            "date": "2015-02-05T09:39:23+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14307140",
            "author": "ASF subversion and git services",
            "date": "2015-02-05T12:34:31+0000",
            "content": "Commit 1657554 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1657554 ]\n\nLUCENE-6218: don't decode freqs or enumerate all positions when scoring is not needed "
        },
        {
            "id": "comment-14307243",
            "author": "ASF subversion and git services",
            "date": "2015-02-05T14:11:59+0000",
            "content": "Commit 1657571 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1657571 ]\n\nLUCENE-6218: don't decode freqs or enumerate all positions when scoring is not needed "
        },
        {
            "id": "comment-14495260",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:19+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}