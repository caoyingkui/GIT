{
    "id": "LUCENE-6821",
    "title": "TermQuery's constructors should clone the incoming term",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Task"
    },
    "description": "This is a follow-up of LUCENE-6435: the bug stems from the fact that you can build term queries out of shared BytesRef objects (such as the ones returned by TermsEnum.next), which is a bit trappy. If TermQuery's constructors would clone the incoming term, we wouldn't have this trap.",
    "attachments": {
        "LUCENE-6821.2.patch": "https://issues.apache.org/jira/secure/attachment/12766545/LUCENE-6821.2.patch",
        "LUCENE-6821.patch": "https://issues.apache.org/jira/secure/attachment/12764907/LUCENE-6821.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14936541",
            "author": "Paul Elschot",
            "date": "2015-09-30T08:27:39+0000",
            "content": "See (also?) LUCENE-4483. "
        },
        {
            "id": "comment-14942191",
            "author": "Paul Elschot",
            "date": "2015-10-03T08:52:59+0000",
            "content": "I had a look at the core code for the use of the TermQuery constructors, and I agree that it would be better to do the clone in the constructor.\nShall I give this a try? "
        },
        {
            "id": "comment-14942295",
            "author": "Paul Elschot",
            "date": "2015-10-03T13:46:34+0000",
            "content": "Patch of 3 Oct 2015. This\n\n\tadds a call to BytesRef.deepCopyOf in the Term constructor,\n\tremoves such calls where the Term constructor is used, and\n\tdocuments that the result of Term.bytes() should not be modified.\n\n "
        },
        {
            "id": "comment-14942304",
            "author": "Paul Elschot",
            "date": "2015-10-03T13:54:37+0000",
            "content": "The patch also removes a call to the term constructor in BlendedTermQuery, which was actually making a clone.\nThis might have gone too far, but I think it should work because the boost is in BoostQuery now. "
        },
        {
            "id": "comment-14942310",
            "author": "Jack Krupansky",
            "date": "2015-10-03T14:04:49+0000",
            "content": "Won't this change have the prospect of increasing the amount of GC due to all these extra objects?\n\nMaybe might it be advisable to have an alternative constructor that doesn't clone so that users like Solr can exploit the fact that their code won't be making any further use of the input term? "
        },
        {
            "id": "comment-14942325",
            "author": "Adrien Grand",
            "date": "2015-10-03T14:29:11+0000",
            "content": "I don't think we should bother at all: executing a term query already performs I/O operations and allocates several objects per segment to create terms enums, scorers, iterators, leaf collectors, etc. so adding two extra object allocations to clone the incoming term is very unlikely to have noticeable impact on gc activity. "
        },
        {
            "id": "comment-14942337",
            "author": "Paul Elschot",
            "date": "2015-10-03T14:54:41+0000",
            "content": "There is another Term constructor call that is a clone at PhraseQuery line 104, this could also be removed.\n\nWon't this change have the prospect of increasing the amount of GC due to all these extra objects?\n\nThe patch also removes some calls to BytesRef.deepCopyOf, so I'm not sure here.\n\nhave an alternative constructor that doesn't clone\n\nThis has bitten a few people at least, including me, and I'd rather have it work correctly in the case when the BytesRef comes directly from a TermsEnum.\n\nThe Term(String field, String text) constructor makes a new BytesRef anyway.\n\nso that users like Solr can exploit the fact that their code won't be making any further use of the input term?\n\nThere are at least a few places in Solr with a BytesRef.deepCopyOf result directly passed to a Term constructor, for example in FacetField and SolrIndexSearcher. There this call could be removed also.\nI'm not familiar with Solr code, so in case there is another impact there, please holler.\n "
        },
        {
            "id": "comment-14942449",
            "author": "Paul Elschot",
            "date": "2015-10-03T20:49:03+0000",
            "content": "2nd patch of 3 October 2015.\nIn addition to the previous patch, this also\n\n\tdeletes the Term cloning in PhraseQuery,\n\tadds a Term constructor from a BytesRefBuilder, and\n\tremoves BytesRef copying at Term construction from Solr's FieldType, SolrIndexSearcher, FacetField and SimpleMLTQParser.\n\n "
        },
        {
            "id": "comment-14950213",
            "author": "Adrien Grand",
            "date": "2015-10-09T11:04:48+0000",
            "content": "I like how the patch makes things simpler. I'll wait a bit before committing to give other people a chance to comment. Can you also remove the explicit cloning that we added in LUCENE-6435? "
        },
        {
            "id": "comment-14950780",
            "author": "Paul Elschot",
            "date": "2015-10-09T17:08:05+0000",
            "content": "Can you also remove the explicit cloning that we added in LUCENE-6435?\nI tried, but then a test fails.\nPerhaps this is because a BytesRef is passed ClassificationResult there. "
        },
        {
            "id": "comment-14953138",
            "author": "Tommaso Teofili",
            "date": "2015-10-12T13:52:26+0000",
            "content": "do you mean the BytesRef.deepCopyOf\u00a0at https://github.com/apache/lucene-solr/blob/trunk/lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java#L154 ?\n\nIf yes, that's because the reference is updated and used in the ClassificationResult. I'll see if I can simplify that. "
        },
        {
            "id": "comment-14953160",
            "author": "Tommaso Teofili",
            "date": "2015-10-12T14:08:05+0000",
            "content": "after a quick look it doesn't seem removing the deep copy in favour of creating new BytesRef would improve anything, actually it'd be slightly worse. I would say let's keep that. "
        },
        {
            "id": "comment-14953479",
            "author": "Paul Elschot",
            "date": "2015-10-12T17:55:58+0000",
            "content": "One could also create the Term in the loop and pass that, or its Term.bytes(), around to the other methods.\nTerm.bytes() can also be passed to the ClassificationResult.\n\nThe patch here has this javadoc at Term.bytes():\n/** Returns the bytes of this term, these should not be modified. */ "
        },
        {
            "id": "comment-14956971",
            "author": "Tommaso Teofili",
            "date": "2015-10-14T13:47:36+0000",
            "content": "One could also create the Term in the loop and pass that\n\ngood point indeed, in the end the underlying methods all create a new Term from the same BytesRef\u00a0and field name, so that should be better than the current solution, so we should pass the Term\u00a0created from within the loop to the methods to calculate prior and likelihood in SimpleNaiveBayesClassifier. "
        },
        {
            "id": "comment-14956973",
            "author": "Tommaso Teofili",
            "date": "2015-10-14T13:49:34+0000",
            "content": "attached the Paul Elschot's patch modified to pass the Term\u00a0instead of the BytesRef\u00a0in SimpleNaiveBayesClassifier. "
        },
        {
            "id": "comment-14961776",
            "author": "Tommaso Teofili",
            "date": "2015-10-17T06:27:21+0000",
            "content": "from my perspective we can proceed committing this patch. Adrien, Paul what do you think? "
        },
        {
            "id": "comment-14961845",
            "author": "Paul Elschot",
            "date": "2015-10-17T10:57:10+0000",
            "content": "The patch of 14 October LGTM, and tests pass here. "
        },
        {
            "id": "comment-14963041",
            "author": "Adrien Grand",
            "date": "2015-10-19T09:21:22+0000",
            "content": "+1 on my end as well "
        },
        {
            "id": "comment-14964899",
            "author": "Tommaso Teofili",
            "date": "2015-10-20T09:56:57+0000",
            "content": "I will run another round of testing and inspections and commit the latest patch if no issues come up. "
        },
        {
            "id": "comment-14965008",
            "author": "ASF subversion and git services",
            "date": "2015-10-20T11:57:38+0000",
            "content": "Commit 1709576 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1709576 ]\n\nLUCENE-6821 - TermQuery's constructors should clone the incoming term "
        },
        {
            "id": "comment-14965009",
            "author": "Tommaso Teofili",
            "date": "2015-10-20T11:58:45+0000",
            "content": "committed and resolved, thanks Paul Elschot for your patch and Adrien Grand for your help. "
        },
        {
            "id": "comment-14965340",
            "author": "Adrien Grand",
            "date": "2015-10-20T16:26:00+0000",
            "content": "Do we want to backport it to 5.x? I don't have a strong opinion but I like to get changes into the hands of our users as soon as possible, and I don't see how this one could break existing applications, it might just perform a few extra copies? "
        },
        {
            "id": "comment-14965344",
            "author": "Michael McCandless",
            "date": "2015-10-20T16:30:14+0000",
            "content": "Do we want to backport it to 5.x?\n\n+1, I consider this a bug fix, which should certainly go back to 5.x. "
        },
        {
            "id": "comment-14965362",
            "author": "Tommaso Teofili",
            "date": "2015-10-20T16:39:17+0000",
            "content": "agreed, I've reopened and will backport it. "
        },
        {
            "id": "comment-14965765",
            "author": "ASF subversion and git services",
            "date": "2015-10-20T21:05:40+0000",
            "content": "Commit 1709683 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1709683 ]\n\nLUCENE-6821: remove unnecessary term clones "
        },
        {
            "id": "comment-14966553",
            "author": "ASF subversion and git services",
            "date": "2015-10-21T09:42:39+0000",
            "content": "Commit 1709780 from Tommaso Teofili in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1709780 ]\n\nLUCENE-6821 - TermQuery's constructors should clone the incoming term (backport branch 5.x) "
        },
        {
            "id": "comment-14966555",
            "author": "Tommaso Teofili",
            "date": "2015-10-21T09:43:39+0000",
            "content": "backported to branch 5.x "
        }
    ]
}