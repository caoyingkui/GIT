{
    "id": "LUCENE-2471",
    "title": "Supporting bulk copies in Directory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "A method can be added to IndexOutput that accepts IndexInput, and writes bytes using it as a source.\nThis should be used for bulk-merge cases (offhand - norms, docstores?). Some Directories can then override default impl and skip intermediate buffers (NIO, MMap, RAM?).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-05-20T04:28:24+0000",
            "content": "On LUCENE-1585 I'm already introducing a copy(Dir, File, File) which is overridden in FSDirectory to implement using ByteBuffers (like you did on copyTo(Dir). So which directories would benefit from that? RAM only (because NIO and MMap already use FSDir's impl)?\n\nI'm generally +1 for adding such API, just wandering who's the immediate consumer of it. ",
            "author": "Shai Erera",
            "id": "comment-12869470"
        },
        {
            "date": "2010-05-20T07:03:09+0000",
            "content": "Bad link? The issue is closed already and no mentions of Directory in the patches.\n\nImmediate consumer, just as I said - is all bulk-merging code. I.e. - instead of loading norms to a byte array and then writing them out, you do, roughly:\n\nIndexInput normFile = ...;\nIndexOutput newNormFile = ...;\nnewNormFile.write(normFile, offset, length);\n\n\n\nI looked at FSDir and refreshed my memory. copyTo is implemented with channels and transferTo, I think new method will look quite similar. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12869504"
        },
        {
            "date": "2010-05-20T08:17:22+0000",
            "content": "Sorry, too many issue these days. I meant LUCENE-2455. I've removed FSDir.copyTo mehods and instead created Dir.copy(Dir, File, File). Still need to upload the patch, with those changes.\n\nBut aside from that, I think the API you're talking about is good. ",
            "author": "Shai Erera",
            "id": "comment-12869516"
        },
        {
            "date": "2010-05-20T08:24:25+0000",
            "content": "Ahem. Why did you remove them? \nThe point was to have default impl on Directory and transferTo-optimized one on FSDirectory.\n\nOk, let's wait for your patch. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12869522"
        },
        {
            "date": "2010-05-20T08:59:39+0000",
            "content": "The default impl still exist, only in the form of a single file copy instead of an entire directory. There were a couple of reasons to replace them:\n\n\tThey didn't take a target-name API. when I'm copying the segments in addIndexes over on LUCENE-2455, I need to rename then in the process (to reflect their new segment name), and the API did not exist.\n\tThe API was very dangerous as it overwrote thr target files, no questions asked. So you could very easily overwrite one of the segments.\n\n\n\nYou can still accomplish that by iterating on the dir yourself and copy the files that you want, only you can do that selectively, leas risky and rename them in the process. ",
            "author": "Shai Erera",
            "id": "comment-12869524"
        },
        {
            "date": "2010-05-20T09:29:59+0000",
            "content": "Ah. Actually there was two methods, one that copies entire directory, and another - selected files.\nThe former is a legacy  Only there for back-compat-loving folk to accept the patch. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12869537"
        },
        {
            "date": "2010-05-20T10:44:54+0000",
            "content": "Yes, I'm aware of the two methods. The one which accepts a Collection of files is better, but it still didn't allow you to rename them in the process. And adding another Collection argument, and require that the two will align seemed unnecessary. So src.copy(dest, from, to) seemed to be enough.\n\nCopying an entire Directory is used by Lucene code only in RAMDir when it's init'ed w/ a Directory. Besides that, the scenario of copying an entire Dir is not really clear when it's useful. So the single file copy gives you as much flexibility as you need, and less chances of making crucial mistakes. ",
            "author": "Shai Erera",
            "id": "comment-12869556"
        },
        {
            "date": "2010-05-20T10:49:12+0000",
            "content": "I agree: we should only expose the per-file copyTo, ie, the Directory shouldn't \"own\" the iteration through a collection of files; the caller can do that. ",
            "author": "Michael McCandless",
            "id": "comment-12869558"
        },
        {
            "date": "2010-05-20T12:04:14+0000",
            "content": "The only reason for keeping that iteration within Directory was to reuse the buffer. The savings are neglectable, I think. \n\nCopying an entire Directory is used by Lucene code only in RAMDir when it's init'ed w/ a Directory.\nSo what?  I used copying an entire Directory for backup purporses, then switched to copyTo(collection), to cherry-pick a single commit.\n\nStill I agree with switching to single file copy+rename. Back-compat luckily went out of the window, so we can design better APIs \nCan we do this in a separate issue from LUCENE-2455 ? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12869579"
        },
        {
            "date": "2010-05-20T12:33:56+0000",
            "content": "LUCENE-2455 depends on this, and the changes are very minor. If we do this in a separate issue, it will block my progress on LUCENE-2455. Let me post a patch there today or tomorrow, and if we won't have consensus on the change, I'll open a separate issue, or reopen LUCENE-2339? ",
            "author": "Shai Erera",
            "id": "comment-12869586"
        },
        {
            "date": "2010-05-20T12:48:50+0000",
            "content": "I actually suggested separating so this minor patch goes in without being blocked by your progress on LUCENE-2455  ",
            "author": "Earwin Burrfoot",
            "id": "comment-12869595"
        },
        {
            "date": "2010-05-24T10:32:24+0000",
            "content": "I think this issue makes sense, separate from LUCENE-2455?  Ie this issue is for bulk copying when you have IndexInput/Output already open (I don't think LUCENE-2455 covers this?).  Whereas LUCENE-2455 is operating on file names... ",
            "author": "Michael McCandless",
            "id": "comment-12870560"
        },
        {
            "date": "2010-12-03T00:02:13+0000",
            "content": "Hmmm. Are we going to do this?\n\nOptimized bulk copies IndexInput -> IndexOutput for merges.\n\nI currently see II.copyBytes(IndexOutput out, long numBytes) method in trunk,\nbut it's a little bit of a mess (II.copyBytes calls IO.copyBytes, strange overrides doing the same thing in various ways),\nno optimizations for FSDirectory (or at least NIOFSdirectory) case,\nno offset parameter?\nnot used when bulk-merging? (well, DataOutput.copyBytes is used, but there's a single inefficient version of it) ",
            "author": "Earwin Burrfoot",
            "id": "comment-12966358"
        },
        {
            "date": "2010-12-06T06:40:49+0000",
            "content": "At some point IndexInput/Output.copyBytes did use FileChannel optimization in FSDirectory, but that caused troubles I think when the copying thread was interrupted. So it was removed and we were left w/ the default impl. ",
            "author": "Shai Erera",
            "id": "comment-12967100"
        },
        {
            "date": "2010-12-06T14:50:52+0000",
            "content": "I think the problem actually wasn't interrupting but some sort of race condition?\n\nEither way, I think its sad we had to disable the optimization, and it would be nice if we put it back (safely). But some notes:\n\n\n\tan NIO-based optimization shouldnt be in FSDirectory, instead in NIOFSDirectory! I don't think SimpleFS should use NIO methods.\n\tthe real problem is our tests. we unfortunately don't have many tests that search with multiple threads. This is why it was so hard to reproduce the bug.\n\twe should make sure we benchmark any change to ensure its faster because there is unfortunately a lot of risk in optimizing this method.\n\n ",
            "author": "Robert Muir",
            "id": "comment-12967205"
        },
        {
            "date": "2010-12-06T15:02:21+0000",
            "content": "I think the problem actually wasn't interrupting but some sort of race condition? \n\nCould be, I don't remember the exact details.\n\nI totally agree with you, though it's like a \"hen and egg\" situation - we cannot develop anything safe until we have good threaded unit tests, and we can never know we have those until we have any implementation that might break. So I personally don't mind if we pursue implementation of FileChannel copying, in NIOFSDirectory only, and then investigate the current threaded indexing/search tests and add some if we think something's missing. But currently we're in sort of a limbo .\n\nAnyway, I don't think it's related to that issue and can be handled in a separate issue. If you agree, and assuming nothing more should be done here, we can close this one. ",
            "author": "Shai Erera",
            "id": "comment-12967210"
        },
        {
            "date": "2010-12-06T15:55:07+0000",
            "content": "OK I opened LUCENE-2804, this will improve our tests by ensuring they use different implementations and are completely reproducable\nacross different operating systems. Hopefully there aren't many tests left to fix. ",
            "author": "Robert Muir",
            "id": "comment-12967232"
        },
        {
            "date": "2013-07-23T18:44:33+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716984"
        },
        {
            "date": "2014-04-16T12:54:50+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970899"
        }
    ]
}