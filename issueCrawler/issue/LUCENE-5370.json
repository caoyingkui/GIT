{
    "id": "LUCENE-5370",
    "title": "Sorting Facets on CategoryPath (Label)",
    "details": {
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/facet"
        ],
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": []
    },
    "description": "Facet support sorting through FacetRequest.SortOrder. This is used in the ResultSortUtils. For my application it would be very nice if the facets can also be sorted on their label. \n\nI think this could be accomplished by altering FacetRequest with an extra enum SortType, and two extra Heap  in ResultSortUtils which instead of comparing the double value, compare the CategoryPath.\n\nWhat do you think of this idea? Or could the same behaviour be accomplished in a different way already?\n\n(btw: I tried building this patch on the trunk of lucene5.0; but I couldn't get the maven build to build correctly. I will try again lateron on the 4.6 branch.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13915602",
            "author": "Rob Audenaerde",
            "content": "I have implemented sorting on label based on the 4.7 branch. The cost in terms of speed is not really that high compared to retrieving  values. \n\nI have an index with 999.999 random documents. To retrieve a top-ten facet list based on value takes +- 510 ms. Retrieving labels takes +- 580 ms. \n\nSo it looks like there is only increase in time of about 15%.    ",
            "date": "2014-02-28T09:38:57+0000"
        },
        {
            "id": "comment-13917309",
            "author": "Shai Erera",
            "content": "What does sort by label mean? Do you ignore the counts/weights and just want to show the top-10 label-sorted facets? Or after you compute the top-10 facets (by weight), you want to sort their labels?\n\nNote that sorting by label is greatly affected by the size of the taxonomy, less by the number of documents. Asking the taxonomy to label each ordinal will be very costly if the taxonomy is huge (e.g. not all labels can be cached in memory) vs if it's small. ",
            "date": "2014-03-02T07:06:18+0000"
        },
        {
            "id": "comment-13942934",
            "author": "Massimo Ferrario",
            "content": "HI,\nI'm also interested in this thread.\nFor my purpose, it's sufficient to sort facet after  compute the top-n facets by weigth\n(as suggest by  Shai Erera)\n\nThank in advance for any suggestion. ",
            "date": "2014-03-21T10:10:57+0000"
        },
        {
            "id": "comment-13942986",
            "author": "Rob Audenaerde",
            "content": "I currently use the code below:\n\n\n\tprivate FacetResult getTopValueChildren( int topN, final SortDir sortDir, String dim, String... path ) throws IOException\n\t{\n\t\tif ( topN <= 0 )\n\t\t{\n\t\t\tthrow new IllegalArgumentException( \"topN must be > 0 (got: \" + topN + \")\" );\n\t\t}\n\n\t\tDimConfig dimConfig = this.verifyDim( dim );\n\t\tFacetLabel cp = new FacetLabel( dim, path );\n\t\tint dimOrd = this.taxoReader.getOrdinal( cp );\n\t\tif ( dimOrd == -1 )\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tTopOrdAndLabelQueue q = new TopOrdAndLabelQueue( Math.min( this.taxoReader.getSize(), topN ) )\n\t\t{\n\t\t\t@Override\n\t\t\tprotected boolean lessThan( OrdAndLabel a, OrdAndLabel b )\n\t\t\t{\n\t\t\t\tif ( sortDir == SortDir.DESC )\n\t\t\t\t{\n\t\t\t\t\treturn super.lessThan( a, b );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn !super.lessThan( a, b );\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tint ord = this.children[dimOrd];\n\t\tint totValue = 0;\n\t\tint childCount = 0;\n\n\t\tTopOrdAndLabelQueue.OrdAndLabel reuse = null;\n\t\twhile ( ord != TaxonomyReader.INVALID_ORDINAL )\n\t\t{\n\t\t\tif ( this.values[ord] > 0 )\n\t\t\t{\n\t\t\t\ttotValue += this.values[ord];\n\t\t\t\tchildCount++;\n\t\t\t\tif ( reuse == null )\n\t\t\t\t{\n\t\t\t\t\treuse = new TopOrdAndLabelQueue.OrdAndLabel();\n\t\t\t\t}\n\t\t\t\treuse.ord = ord;\n\t\t\t\treuse.value = this.values[ord];\n\t\t\t\treuse.label = this.taxoReader.getPath( ord ).components[cp.length];\n\t\t\t\treuse = q.insertWithOverflow( reuse );\n\t\t\t}\n\n\t\t\tord = this.siblings[ord];\n\t\t}\n\n\t\tif ( totValue == 0 )\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( dimConfig.multiValued )\n\t\t{\n\t\t\tif ( dimConfig.requireDimCount )\n\t\t\t{\n\t\t\t\ttotValue = this.values[dimOrd];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Our sum'd value is not correct, in general:\n\t\t\t\ttotValue = -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Our sum'd dim value is accurate, so we keep it\n\t\t}\n\n\t\tLabelAndValue[] labelValues = new LabelAndValue[q.size()];\n\t\tfor ( int i = labelValues.length - 1; i >= 0; i-- )\n\t\t{\n\t\t\tTopOrdAndLabelQueue.OrdAndLabel ordAndValue = q.pop();\n\t\t\tlabelValues[i] = new LabelAndValue( ordAndValue.label, ordAndValue.value );\n\t\t}\n\n\t\treturn new FacetResult( dim, path, totValue, labelValues, childCount );\n\t}\n\n\n\nI use the same approach as sorting on counts, except that I sort on the label instead. It costs some in terms of retrieving the labels from the taxonomyreader.\n\nSo I ignore the counts in terms of sorting; but I do use them because the user is interesed in the counts fo the sorted facet labels. \n\nBtw. I'm currently experimenting with a similar approach where we have facetlabels  that are effectively numbers (like currency).  Because I do not know on beforehand what will be in the facets, I put the String representation in the FacetLabel and store the numberic value in the Float part of a FloatAssociatedFacetField. Facets then can be sorted on the FloatAssociated value, which should be faster than retrieving labels from the reader. ",
            "date": "2014-03-21T11:32:55+0000"
        },
        {
            "id": "comment-13943938",
            "author": "Shai Erera",
            "content": "For my purpose, it's sufficient to sort facet after compute the top-n facets by weigth\n\nYou can then sort the LabelAndValues[] by their label part.\n\n\nBtw. I'm currently experimenting with a similar approach where we have facetlabels that are effectively numbers (like currency). Because I do not know on beforehand what will be in the facets, I put the String representation in the FacetLabel and store the numberic value in the Float part of a FloatAssociatedFacetField. Facets then can be sorted on the FloatAssociated value, which should be faster than retrieving labels from the reader.\n\nDo you have a unique value per document? If so, you should consider indexing the values in a NumericDocValues field (not go through the taxonomy at all and FacetsConfig) and then you can use the facet module's range faceting for example. ",
            "date": "2014-03-22T05:59:18+0000"
        },
        {
            "id": "comment-13944890",
            "author": "Massimo Ferrario",
            "content": "Yes, I did exaclty what you suggested: I created a simple comparator for FacetResultNode so I can re-order list using string label, after computed the top-n facet.\n\nYes, I have d unique value per document, but my facet are strings (for example Company Name) not number.\nThanks for suggestions. ",
            "date": "2014-03-24T10:21:31+0000"
        }
    ]
}