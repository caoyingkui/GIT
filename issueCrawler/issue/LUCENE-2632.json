{
    "id": "LUCENE-2632",
    "title": "FilteringCodec, TeeCodec, TeeDirectory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This issue adds two new Codec implementations:\n\n\n\tTeeCodec: there have been attempts in the past to implement parallel writing to multiple indexes so that they are all synchronized. This was however complicated due to the complexity of IndexWriter/SegmentMerger logic. The solution presented here offers a similar functionality but working on a different level - as the name suggests, the TeeCodec duplicates index data into multiple output Directories.\n\n\n\n\n\tTeeDirectory (used also in TeeCodec) is a simple abstraction to perform Directory operations on several directories in parallel (effectively mirroring their data). Optionally it's possible to specify a set of suffixes of files that should be mirrored so that non-matching files are skipped.\n\n\n\n\n\tFilteringCodec is related in a remote way to the ideas of index pruning presented in LUCENE-1812 and the concept of tiered search. Since we can use TeeCodec to write to multiple output Directories in a synchronized way, we could also filter out or modify some of the data that is being written. The FilteringCodec provides this functionality, so that you can use like this:\n\nIndexWriter --> TeeCodec\n                 |  |\n                 |  +--> StandardCodec --> Directory1\n                 +--> FilteringCodec --> StandardCodec --> Directory2\n\n\n\n\n\nThe end result of this chain is two indexes that are kept in sync - one is the full regular index, and the other one is a filtered index.",
    "attachments": {
        "LUCENE-2632-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12546862/LUCENE-2632-trunk.patch",
        "LUCENE-2632-filtering.patch": "https://issues.apache.org/jira/secure/attachment/12546914/LUCENE-2632-filtering.patch",
        "LUCENE-2632.patch": "https://issues.apache.org/jira/secure/attachment/12453689/LUCENE-2632.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-02T15:35:19+0000",
            "content": "Initial implementation. TeeSinkCodec was only tested for writing - for reading it always uses Directory at position 0 on the list, so if it's not a full index (e.g. passed through FilteringCodec) funny things may happen during segment merging... ",
            "author": "Andrzej Bialecki",
            "id": "comment-12905548"
        },
        {
            "date": "2010-09-03T10:29:20+0000",
            "content": "This looks very cool Andrzej! ",
            "author": "Michael McCandless",
            "id": "comment-12905846"
        },
        {
            "date": "2012-02-14T01:40:53+0000",
            "content": "Patch updated to the latest trunk.\n\nA few notes:\n\n\tFilteringCodec tests pass\n\tTeeDirectory tests pass\n\tTeeCodec tests pass only partially, failures occur during merge operations.\n\n ",
            "author": "Andrzej Bialecki",
            "id": "comment-13207449"
        },
        {
            "date": "2012-02-14T07:44:20+0000",
            "content": "Hey cool, sounds like this unmaintainable ParallelReaders obsolete by doing the splitting to several directories/parallel fields in the codec - so merging automtically works correct with every MP? ",
            "author": "Uwe Schindler",
            "id": "comment-13207566"
        },
        {
            "date": "2012-02-14T09:50:34+0000",
            "content": "That's one potential application, I'm sure there are dozen other things you can do with this (e.g. hot backup).\n\nMerges don't work well in this patch yet, which is a problem  and also the handling of compound files is hackish (I didn't even try to handle the main CFS ones, but I added a workaround for the nrm.cfs / cfe files). I'd appreciate review and help in debugging/fixing. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13207613"
        },
        {
            "date": "2012-02-14T12:48:41+0000",
            "content": "just some ideas taking a very quick glance\n\n\n\tI like the idea of separate impl packages you used here...\n\tthe TODO/etc in term vectors makes me wish our codec consumer APIs for Fields/TermVectors were more consistent...\n\tlots of methods have 'synchronized' where I think its not needed? e.g. TeeTermVectorsWriter\n\tclose() in Tee* should probably add all closeables to a list and then IOUtils.close() that.\n\tTeeCodec.files() i think should call mainCodec.files, so that it doesn't rely upon mainCodec having the default implementation in Codec.java (some dont).\n\n\n\nSorry, none of this fixes the merging test, which i think is somehow related to files(), but I didn't spot the bug yet at a glance.\n ",
            "author": "Robert Muir",
            "id": "comment-13207679"
        },
        {
            "date": "2012-02-14T12:52:36+0000",
            "content": "Hmm actually another thing to investigate is Directory's CFS-related methods with things that delegate like TeeDirectory?\n\nWe had problems around here before with FileSwitchDirectory... LUCENE-3380, maybe you just found another one. ",
            "author": "Robert Muir",
            "id": "comment-13207682"
        },
        {
            "date": "2012-02-14T13:04:07+0000",
            "content": "the TODO/etc in term vectors makes me wish our codec consumer APIs for Fields/TermVectors were more consistent...\n\nAlso, the handling of segments.gen and compound files that bypasses codec actually forced me to implement TeeDirectory.\n\nRe. synchronization - yes, many of these should be removed. I synced everything for now to narrow down the source of merge problems. TeeCodec.files() - well spotted, this should be fixed. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13207686"
        },
        {
            "date": "2012-02-14T13:11:48+0000",
            "content": "\nAlso, the handling of segments.gen and compound files that bypasses codec actually forced me to implement TeeDirectory.\n\nTrue, though I don't know of any simple solutions to either of these \n\nfor CFS, we made some tiny steps in LUCENE-3728, but the codec only has limited control here (e.g. it can store certain things\noutside of CFS, this is how preflex codec reads separate norms). But it cannot yet customize the CFS filenames nor the actual\nformat/packing process. ",
            "author": "Robert Muir",
            "id": "comment-13207690"
        },
        {
            "date": "2012-02-14T18:00:02+0000",
            "content": "Updated patch from andrzej's fixing the FNFE in merge (though it fails for other reasons, one step at a time).\n\nThe problem is due to the strange way in which Norms-writers extend PerDocConsumer... they override canMerge/getDocValuesForMerge/getDocValuesType completely differently.\n\nFurthermore you could not delegate these, as they are protected.\n\nas a temporary hack i made them public and delegated in Tee's impl... but I'm going to instead open a separate issue to clean this up. ",
            "author": "Robert Muir",
            "id": "comment-13207869"
        },
        {
            "date": "2012-02-28T18:39:04+0000",
            "content": "Updated patch, based on Robert's version:\n\n\tcatch up with trunk,\n\ttweak WriteFilter api to be more convenient and useful,\n\tadd javadocs,\n\tadd \"initialSync\" functionality to TeeDirectory to sync existing files on open, and add a corresponding test.\n\n\n\nAll tests pass. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13218445"
        },
        {
            "date": "2012-02-29T16:15:17+0000",
            "content": "Some modifications in WriteFilter API, and a better accounting of numDocs / term stats.\n\nAlso, a bonus: a single-pass TeeIndexSplitter that uses a combination of TeeCodec/FilteringCodec.\n\nAll tests pass. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13219314"
        },
        {
            "date": "2012-06-20T09:54:05+0000",
            "content": "Hey Andrzej, this is so cool !\n\nI was interested in using MultiPassIndexSplitter, and while chatting with Mike about the need to process the input directory a couple of times, he pointed me to this issue (i.e. TeeIndexSplitter). I was wondering what's the state of the issue? Are there still pending tasks to complete or can it be committed? ",
            "author": "Shai Erera",
            "id": "comment-13397394"
        },
        {
            "date": "2012-06-20T12:40:32+0000",
            "content": "There have been some changes in 4x since the last patch, so I don't expect it would apply cleanly - but that last patch was working well, so it should be easy to bring it up to date. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13397464"
        },
        {
            "date": "2012-06-20T13:41:56+0000",
            "content": "I tried \"patch --dry-run\" and here are the results:\n\n\n\tOn 4x, all seem to be well except:\n\t\n\t\tLucene40NormsFormat.java and PreFlexRWNormsConsumer.java (some hunk failed)\n\t\tSimpleTextNormsConsumer.java does not exist on 4x\n\t\n\t\n\n\n\n\n\tOn trunk, all seem to be well except:\n\t\n\t\tLucene40NormsFormat.java (hunk failure)\n\t\tSimpleTextNormsConsumer.java not found\n\t\tPreFlexRWNormsConsumer.java not found, but that's expected as 5.0 won't need to support pre-flex (3x) indexes\n\t\n\t\n\n\n\nI think then what needs to be done is make the patch apply-able against 4x, and then we'll 'svn merge' to trunk? I haven't looked at what doesn't apply in Lucene40NormsFormat though \u2013 will you check it? ",
            "author": "Shai Erera",
            "id": "comment-13397501"
        },
        {
            "date": "2012-09-27T13:32:17+0000",
            "content": "Patch brings the latest patch upto trunk. There have been many changes to the API, and currently TestTeeCodec fails. I still didn't dig deep into it, but sometimes it succeeds to call IW.close(), only to fail on a missing segments_1 later on.\n\nI don't know if the test passed before, to judge if it's something that broke following the migration to trunk API. I'll try to dig deeper later.\n\nAlso, I noticed that the patch includes a FilteringCodec. I thought that TeeCodec will extend it, but it doesn't. Also, LUCENE-4391 added FilterCodec, so I think FilteringCodec can be removed from this issue. And potentially we should make TeeCodec extend FilterCodec.\n\nI've kept FilteringCodec in this patch though. ",
            "author": "Shai Erera",
            "id": "comment-13464720"
        },
        {
            "date": "2012-09-27T20:41:24+0000",
            "content": "Reviewed the issue's description and patch again \u2013 FilteringCodec has nothing to do with FilterCodec. The latter is used if you want to override a specific Codec's behavior. FilteringCodec is about not filtering data that is written to a Directory, as Andrzej explains in the issue's description.\n\nTherefore FilteringCodec should remain. Maybe we can split this issue .. FilteringCodec is unrelated to TeeCodec/Directory/IndexSplitter as far as I could tell?\n\nAnyway, still need to make TestTeeCodec work. ",
            "author": "Shai Erera",
            "id": "comment-13465065"
        },
        {
            "date": "2012-09-27T21:38:04+0000",
            "content": "Patch includes FilteringCodec only files. I've fixed some minor issues such as license docs.\n\nAbout the *.impl package, I think that if all classes were under *.filtering, we could make all but FilteringCodec, WriteFilter and Noop* classes package-private, as everything seems to be controlled by WriteFilter. What do you think?\n\nAnyway, this isolated patch is cleaner and so now perhaps we can think of a different design, such as move WriteFilter functionality to the different Formats/Consumers and let users override that by using FilterCodec over FilteringCodec and providing their own Consumer/Formats. After all, WriteFilter by default doesn't filter anything ...\n\nAnd now that we have FilterCodec, perhaps we should rename FilteringCodec to something else, like IndexFilteringCodec, or DataFilteringCodec ... make it more distinguishable than FilterCodec.\n\nComments are welcome. ",
            "author": "Shai Erera",
            "id": "comment-13465131"
        },
        {
            "date": "2012-09-27T21:45:27+0000",
            "content": "First glance, i wonder if this should go in misc/ or instead the codecs/ module?\n\nWe should address the nocommits I put in here as well: I feel like they relate to LUCENE-3787 but I don't remember to be honest. ",
            "author": "Robert Muir",
            "id": "comment-13465137"
        },
        {
            "date": "2012-09-27T21:48:52+0000",
            "content": "Sorry, most of my comment is useless. I clicked on the wrong patch (the sort order is screwy because the filename was different) ",
            "author": "Robert Muir",
            "id": "comment-13465139"
        },
        {
            "date": "2012-09-28T12:26:44+0000",
            "content": "the sort order is screwy because the filename was different\n\nSorry about that, I wanted to emphasize that this patch covers only FilteringCodec. And I've put it under the codec module too.\n\nWe should address the nocommits I put in here as well\n\nI checked and they are not related to FilteringCodec. I'll remove them from the filtering patch. And yes, it seems that it's related to LUCENE-3787 and that TeeCodec needed them. ",
            "author": "Shai Erera",
            "id": "comment-13465564"
        },
        {
            "date": "2012-09-28T12:37:41+0000",
            "content": "Right but it still makes the change here to PerDocConsumer etc. I wasn't happy with this solution, I'll revisit\nand try to remember exactly why. ",
            "author": "Robert Muir",
            "id": "comment-13465570"
        }
    ]
}