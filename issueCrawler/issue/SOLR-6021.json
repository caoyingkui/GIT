{
    "id": "SOLR-6021",
    "title": "Always persist router.field in cluster state so CloudSolrServer can route documents correctly",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "CloudSolrServer has idField as \"id\" which is used for hashing and distributing documents. There is a setter to change it as well.\n\nIMO, we should use the correct uniqueKey automatically. I propose that we start storing router.field always in cluster state and set it to the uniqueKey field name by default. Then CloudSolrServer would not need to assume an \"id\" field by default.",
    "attachments": {
        "SOLR-6021.patch": "https://issues.apache.org/jira/secure/attachment/12647159/SOLR-6021.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13981592",
            "date": "2014-04-25T20:59:26+0000",
            "content": "+1 - I had been thinking about working on this not long ago. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14011272",
            "date": "2014-05-28T16:30:03+0000",
            "content": "Changes\n\n\tAdded a getter for coreConfigService in CoreContainer\n\tOverseer reads config/schema to get the unique key field name if router is not implicit and router.field is not specified.\n\tAdded a test in TestCollection API\n\n\n\nI initially wanted to do this in OverseerCollectionProcessor but then you can skip that completely if you're creating collections through the core admin API.\n\nSolrJ doesn't need any changes because if a router.field is configured, the \"idField\" and it's value is not used at all. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14011403",
            "date": "2014-05-28T18:13:11+0000",
            "content": "\n          CoreContainer coreContainer = zkController.getCoreContainer();\n          ConfigSetService configService = coreContainer.getCoreConfigService();\n          CoreDescriptor dummy = new CoreDescriptor(coreContainer, collectionName, collectionName);\n          ConfigSet configSet = configService.getConfig(dummy);\n\n\n\nThis seems like a lot of ceremony just to get the ConfigSet for a collection - maybe it should be a method on zkController itself? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14011411",
            "date": "2014-05-28T18:22:55+0000",
            "content": "Yeah, I don't like that as well. I'll refactor it into a method in ZkController. Thanks Alan. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14012160",
            "date": "2014-05-29T07:35:08+0000",
            "content": "This patch adds a method getConfigSetForCollection in ZkController. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14014730",
            "date": "2014-05-31T18:06:35+0000",
            "content": "The OverseerTest fails with this patch because the test passes a null ZkController to the Overseer under test. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-15197987",
            "date": "2016-03-16T19:34:46+0000",
            "content": "router.field is not same as uniquekey. You could use an alternate field to route your docs. Imagine I have houses as docs and I choose to route docs based on zip codes "
        }
    ]
}