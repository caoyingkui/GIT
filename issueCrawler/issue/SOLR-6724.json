{
    "id": "SOLR-6724",
    "title": "HttpServer maxRetries attributes seems like not being used as expected",
    "details": {
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10.2",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Looks like maxRetries is being misused in the org.apache.solr.client.solrj.impl.HttpSolrServer.createMethod(SolrRequest) instead of being used in the executeMethod(HttpRequestBase,ResponseParser).\n\nIn the current implementation the maxRetries is used in a loop that only instantiates the HttpRequestBase but it doesn't effectively make any HTTP request. Also the retries are made even in a successful instantiation  of the HttpRequestBase as there's no break too.\nI notice there's also a catch for NoHttpResponseException but as no HTTP request is made I guess it will never happen.",
    "attachments": {
        "SOLR-6724.patch": "https://issues.apache.org/jira/secure/attachment/12703091/SOLR-6724.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-06T18:18:50+0000",
            "author": "Greg Solovyev",
            "content": "I just added a straightforward patch moving retries logic from createMethod to executeMethod and a unit test to confirm that it works ",
            "id": "comment-14350661"
        },
        {
            "date": "2015-03-08T18:10:02+0000",
            "author": "Mark Miller",
            "content": "Just to make sure this doesnt go in without looking at SOLR-7203 - I've got to -1 any change that turns on an auto retry on NoHttpResponseException - it breaks SolrCloud. ",
            "id": "comment-14352176"
        },
        {
            "date": "2015-03-08T18:41:21+0000",
            "author": "Mark Miller",
            "content": "Some notes on this:\n\n\n\tThe client has to make a decision about what to do when a request is full sent and there is no response (at least in SolrCloud world - non cloud mode doesn't make a lot of promises anyway, though similar issues exist with multiple uncoordinated clients). The system can't decide for the client unless we are okay with getting things wrong sometimes. Anyone trying to write a good distributed system is not okay with that.\n\n\n\n\n\tThe best thing we can do is lower the possibility of these no response issues. It's mostly related to connection pooling and httpclient and jetty and http. The best thing we can do is work on improving those issues. I've worked a lot on that in SOLR-4509. In the end, I spun a lot of improvements out of that issue and just left doing something better than a stale check. Unfortunately, in our tests, NoHttpResponseException almost appeared to randomly pop up more and so I dont have a lot of trust in it yet. I have not looked at things since we moved 6x to Jetty 9.\n\n\n\n\n\tIn our tests this pops up fairly frequently. In production, in the real world, in my experience, this is ultra rare. A good client will always have to think about and deal with a fully sent update that gets no response though. It's just part of the game. It's not a great idea for our client code to guess the right solution though. If it get's it wrong, you have data loss issues. Also, our client code plays a dual role - it's client code the user takes advantage of, and it's also used for system internode communication.\n\n ",
            "id": "comment-14352193"
        },
        {
            "date": "2015-03-08T22:09:00+0000",
            "author": "Greg Solovyev",
            "content": "This problem pops up in our environment fairly frequently when Solr server and client app run on the same machine, which is why I started looking into this. After reading the thread on https://issues.apache.org/jira/browse/SOLR-7203 think that the patch I submitted is rather useless.  IMHO, it makes more sense to let the parent application handle all IOExceptions thrown by HttpClient when HttpSolrServer uses an external instance of HttpClient. Also, when HttpSolrServer is using internal HttpClient, it shouldn't blindly retry the request, but should try to clean up dead connections first and perhaps use a timeout before retrying. ",
            "id": "comment-14352302"
        },
        {
            "date": "2015-03-09T00:25:54+0000",
            "author": "Mark Miller",
            "content": "This problem pops up in our environment fairly frequently when Solr server and client app run on the same machine\n\nThat sounds unusual - I wonder why / what makes this happen more frequently with your setup. Normally, with the current code, it's quite hard to hit under normal circumstances, because the stale connection check will hit it and retry (stale connection check happens before the request, and so it's safe). There is a race with the stale connection check, so it's not perfect, but I've supported a lot of SolrCloud setups, and I've yet to see this happen very frequently on a normally operating system. Usually, a reset connection is the more common thing to fall through that race (I've seen HttpNoResponseException, but like 1/20th as much as connection reset). ",
            "id": "comment-14352372"
        },
        {
            "date": "2015-03-09T00:27:12+0000",
            "author": "Mark Miller",
            "content": "Oh, and with recent releases we do retry on the connection reset - there was a couple mid to late 4.x  releases where we didn't. ",
            "id": "comment-14352373"
        },
        {
            "date": "2015-03-09T01:09:41+0000",
            "author": "Greg Solovyev",
            "content": "This happens in the set up where Solr is running in non-cloud mode under\nthe same jetty instance as the client app (Zimbra) on a small VM (2GB RAM,\n2 VCPU). Currently on version 4.10.2.\n\n ",
            "id": "comment-14352397"
        }
    ]
}