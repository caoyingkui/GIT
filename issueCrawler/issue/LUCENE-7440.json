{
    "id": "LUCENE-7440",
    "title": "Document skipping on large indexes is broken",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "2.2",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.5.4",
            "6.2.1",
            "6.3",
            "7.0"
        ],
        "priority": "Critical",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "Large skips on large indexes fail.\nAnything that uses skips (such as a boolean query, filtered queries, faceted queries, join queries, etc) can trigger this bug on a sufficiently large index.\n\nThe bug is a numeric overflow in MultiLevelSkipList that has been present since inception (Lucene 2.2).  It may not manifest until one has a single segment with more than ~1.8B documents, and a large skip is performed on that segment.\n\nTypical stack trace on Lucene7-dev:\n\njava.lang.ArrayIndexOutOfBoundsException: 110\n\tat org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readByte(MultiLevelSkipListReader.java:297)\n\tat org.apache.lucene.store.DataInput.readVInt(DataInput.java:125)\n\tat org.apache.lucene.codecs.lucene50.Lucene50SkipReader.readSkipData(Lucene50SkipReader.java:180)\n\tat org.apache.lucene.codecs.MultiLevelSkipListReader.loadNextSkip(MultiLevelSkipListReader.java:163)\n\tat org.apache.lucene.codecs.MultiLevelSkipListReader.skipTo(MultiLevelSkipListReader.java:133)\n\tat org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.advance(Lucene50PostingsReader.java:421)\n\tat YCS_skip7$1.testSkip(YCS_skip7.java:307)\n\n\n\nTypical stack trace on Lucene4.10.3:\n\n6-08-31 18:57:17,460 ERROR org.apache.solr.servlet.SolrDispatchFilter: null:java.lang.ArrayIndexOutOfBoundsException: 75\n at org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readByte(MultiLevelSkipListReader.java:301)\n at org.apache.lucene.store.DataInput.readVInt(DataInput.java:122)\n at org.apache.lucene.codecs.lucene41.Lucene41SkipReader.readSkipData(Lucene41SkipReader.java:194)\n at org.apache.lucene.codecs.MultiLevelSkipListReader.loadNextSkip(MultiLevelSkipListReader.java:168)\n at org.apache.lucene.codecs.MultiLevelSkipListReader.skipTo(MultiLevelSkipListReader.java:138)\n at org.apache.lucene.codecs.lucene41.Lucene41PostingsReader$BlockDocsEnum.advance(Lucene41PostingsReader.java:506)\n at org.apache.lucene.search.TermScorer.advance(TermScorer.java:85)\n[...]\n at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:621)\n[...]\n at org.apache.solr.core.SolrCore.execute(SolrCore.java:2004)",
    "attachments": {
        "LUCENE-7440.patch": "https://issues.apache.org/jira/secure/attachment/12827752/LUCENE-7440.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15476155",
            "author": "Dawid Weiss",
            "date": "2016-09-09T07:04:03+0000",
            "content": "Yonik, what exactly is broken? Do you have a stack trace or repro code? "
        },
        {
            "id": "comment-15477039",
            "author": "Yonik Seeley",
            "date": "2016-09-09T13:16:52+0000",
            "content": "Patch coming... was waiting for tests to pass. "
        },
        {
            "id": "comment-15477108",
            "author": "Yonik Seeley",
            "date": "2016-09-09T13:52:30+0000",
            "content": "Here's a patch, and a test that fails w/o the patch (takes 30min on my old linux box).\n\nThere are two obvious ways to fix:\n\n\tuse long[] instead of int[] for numSkipped\n\tcheck numSkipped for overflow and compensate where used\n\n\n\nI used the latter in this patch since it avoids increasing the memory footprint and there was only a single place to check for overflow.  Subsequent uses of the overflowed value were already automatically corrected by subtracting the same value that caused the overflow in the first place. "
        },
        {
            "id": "comment-15477131",
            "author": "Uwe Schindler",
            "date": "2016-09-09T14:06:15+0000",
            "content": "Nice findings. A really old bug! "
        },
        {
            "id": "comment-15477144",
            "author": "Yonik Seeley",
            "date": "2016-09-09T14:12:31+0000",
            "content": "Regarding the 1.8B docs number... at least in my tests I saw the top-level skip distance of ~268M w/ the default codec.  Subtracting this from MAX_INT gives around 1.8B, which is around the number I saw prior to the overflow.  To hit the bug, one also needs to be doing large skips toward the end of the index as well, in order to use the top level(s) of the multi-level skip list.  Having a conjunction query of a highly unique term (or clause) in conjunction with a common term has a good chance of triggering (example:  +timestamp:39520928456494 +doctype:common) "
        },
        {
            "id": "comment-15477238",
            "author": "Uwe Schindler",
            "date": "2016-09-09T14:55:01+0000",
            "content": "Fix with negative check looks fine to me, this should be cheap. I'd suggest that Michael McCandless also looks into it, he knows this code better. "
        },
        {
            "id": "comment-15477613",
            "author": "Michael McCandless",
            "date": "2016-09-09T17:07:47+0000",
            "content": "What a nice find!\n\nI would rather we just use long[] here?  The added memory cost is minor, and I think understandable code is more important. "
        },
        {
            "id": "comment-15477628",
            "author": "Robert Muir",
            "date": "2016-09-09T17:15:06+0000",
            "content": "Another alternative would be to use Integer.compareUnsigned() "
        },
        {
            "id": "comment-15477697",
            "author": "Michael McCandless",
            "date": "2016-09-09T17:40:07+0000",
            "content": "Another alternative would be to use Integer.compareUnsigned()\n\n+1\n\nThese values should never overflow 2^32 "
        },
        {
            "id": "comment-15478450",
            "author": "Uwe Schindler",
            "date": "2016-09-09T22:25:01+0000",
            "content": "+1 compareUnsigned is the way to go! It's an intrinsic, too. "
        },
        {
            "id": "comment-15480071",
            "author": "Yonik Seeley",
            "date": "2016-09-10T16:51:53+0000",
            "content": "Ok, I did a quick review to ensure that the other operand in the comparison, docCount, would never legitimately be negative and then switched to compareUnsigned. "
        },
        {
            "id": "comment-15480081",
            "author": "Uwe Schindler",
            "date": "2016-09-10T16:59:19+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15480355",
            "author": "ASF subversion and git services",
            "date": "2016-09-10T19:58:41+0000",
            "content": "Commit c929d0595c0ad2ef311054746dc24aa8704f55e6 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c929d05 ]\n\nLUCENE-7440: fix MultiLevelSkipListReader overflow "
        },
        {
            "id": "comment-15480369",
            "author": "ASF subversion and git services",
            "date": "2016-09-10T20:05:23+0000",
            "content": "Commit cf72eebf75bb3c5c3bdd8ef2ee288e67f89b5538 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cf72eeb ]\n\nLUCENE-7440: fix MultiLevelSkipListReader overflow "
        },
        {
            "id": "comment-15482917",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-09-12T03:22:39+0000",
            "content": "Re-opened to back-port to 6.2.1 "
        },
        {
            "id": "comment-15483925",
            "author": "ASF subversion and git services",
            "date": "2016-09-12T12:02:49+0000",
            "content": "Commit c7b3e9ae3695a13dacb81312db0d470ada273808 in lucene-solr's branch refs/heads/branch_6_2 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c7b3e9a ]\n\nLUCENE-7440: fix MultiLevelSkipListReader overflow\n\n(cherry picked from commit cf72eeb) "
        },
        {
            "id": "comment-15484634",
            "author": "Mike Drob",
            "date": "2016-09-12T16:59:04+0000",
            "content": "Regarding the 1.8B docs number... at least in my tests I saw the top-level skip distance of ~268M w/ the default codec. Subtracting this from MAX_INT gives around 1.8B, which is around the number I saw prior to the overflow. To hit the bug, one also needs to be doing large skips toward the end of the index as well, in order to use the top level(s) of the multi-level skip list. Having a conjunction query of a highly unique term (or clause) in conjunction with a common term has a good chance of triggering (example: +timestamp:39520928456494 +doctype:common)\nWould this be faster to test if we configure a larger top-level skip distance? i.e. set up a skip distance of ~1B and then we'd only need to get to ~1.1B docs indexed (40% fewer docs, theoretically 40% faster?) or even set up a skip distance of ~2B to only need to index very few documents?\n\nMaybe this idea should be split into a separate issue to focus on improving the test? "
        },
        {
            "id": "comment-15484994",
            "author": "Yonik Seeley",
            "date": "2016-09-12T19:04:37+0000",
            "content": "Would this be faster to test if we configure a larger top-level skip distance?\n\nThe top-level skip distance sort of falls out from other factors, rather than being explicitly configured.\nFor a quicker, more thorough test, It would probably be good to somehow test the skip list logic itself w/o having it backed by an actual index.  Even with that, I think it's a good idea to also test real indexes. "
        },
        {
            "id": "comment-15508539",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-09-21T03:03:20+0000",
            "content": "Closing after 6.2.1 release "
        },
        {
            "id": "comment-15857788",
            "author": "ASF subversion and git services",
            "date": "2017-02-08T10:22:21+0000",
            "content": "Commit 1c219d2da692d8b41c02d8a52ffacd813cd44a7b in lucene-solr's branch refs/heads/branch_5_5 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1c219d2 ]\n\nLUCENE-7440: fix MultiLevelSkipListReader overflow "
        },
        {
            "id": "comment-15857802",
            "author": "Adrien Grand",
            "date": "2017-02-08T10:27:04+0000",
            "content": "Reopen for backport to 5.5.4. "
        },
        {
            "id": "comment-15857817",
            "author": "Adrien Grand",
            "date": "2017-02-08T10:41:28+0000",
            "content": "For the record, I verified that Test2BPostings passes on the 5.5 branch. "
        }
    ]
}