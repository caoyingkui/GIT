{
    "id": "LUCENE-5098",
    "title": "Broadword bit selection",
    "details": {
        "components": [
            "core/other"
        ],
        "fix_versions": [
            "4.5"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "",
    "attachments": {
        "LUCENE-5098.patch": "https://issues.apache.org/jira/secure/attachment/12591493/LUCENE-5098.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-09T19:00:27+0000",
            "content": "This has some methods and constants inspired by the article\n\"Broadword Implementation of Rank/Select Queries\" by Sebastiano Vigna, January 30, 2012,\ncurrently retrievable from http://vigna.di.unimi.it/ftp/papers/Broadword.pdf .\n\nI'd expect this to become really useful in the Elias-Fano sequence of LUCENE-5084 after an index is added to that. ",
            "author": "Paul Elschot",
            "id": "comment-13703649"
        },
        {
            "date": "2013-07-11T10:41:35+0000",
            "content": "The patch looks good to me. I'm looking forward to seeing the impact these methods will have on the EliasFanoDocIdSet performance!\n\nSome minor comments about the patch:\n\n\tMaybe these utility methods could be moved to oal.util.BitUtil where we already have some utility methods to count or find bits?\n\tI ran quick benchmarks for select and select9 seemed to quickly outperform selectNaive, even for non-dense longs. Do you have the same experience with selectNaive vs. select9? If yes, maybe selectNaive could be moved to the test case.\n\tSince the main goal of rank9 is code documentation, maybe it should be made package-private?\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13705674"
        },
        {
            "date": "2013-07-11T13:19:25+0000",
            "content": "\nTestBroadWord extends TestCase\n\n\n\nCould we extend LuceneTestCase for tests, please? I know it doesn't have any impact here but if it's good to have a single superclass for all tests in case we need to tweak/ alter something.\n\nAs for longHex \u2013 I always liked the \"assembly\" version better:\n\n    final static char [] HEX = \"0123456789abcdef\".toCharArray();\n    private static String longHex(long x)\n    {\n        char [] asHex = new char [16];\n        for (int i = 16; --i >= 0; x >>>= 4) {\n            asHex[i] = HEX[(int) x & 0x0F];\n        }\n        return \"0x\" + new String(asHex);\n    }\n\n\n\nbut if you strive for simplicity this should do too:\n\n    private static String longHex(long x)\n    {\n        return String.format(Locale.ENGLISH, \"%016x\", x);\n    }\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13705808"
        },
        {
            "date": "2013-07-11T13:35:46+0000",
            "content": "Could we extend LuceneTestCase for tests, please?\n\nI think forbidden checker should catch this  ",
            "author": "Uwe Schindler",
            "id": "comment-13705822"
        },
        {
            "date": "2013-07-11T13:40:01+0000",
            "content": "It does. ",
            "author": "Adrien Grand",
            "id": "comment-13705827"
        },
        {
            "date": "2013-07-11T19:59:47+0000",
            "content": "Maybe these utility methods could be moved to oal.util.BitUtil where we already have some utility methods to count or find bits?\n\nI kept them separate to have a clear reference to the Vigna broadword article.\n\nThe class javadoc already refers to all methods and constants from there, so that could be easily merged into BitUtil's class javadoc when merging the two classes.\nAlso both classes have only static attributes.\n\nSo merging is no problem at all, but I'm still in two minds about this.\nAny opinions either way, i.e. merging class BroadWord here into the existing BitUtil or not?\n\nI ran quick benchmarks for select and select9 seemed to quickly outperform selectNaive, even for non-dense longs. Do you have the same experience with selectNaive vs. select9?  If yes, maybe selectNaive could be moved to the test case.\n\nIn the Quasi Succinct Indices article (EliasFanoDocIdSet, LUCENE-5084), in Section 9 under Reading Unary Codes, Vigna mentions that within the right longword:\nOur experiments show that broadword bit search is extremely effective, unless the number of reads is very small, as in that case computing iteratively the least significant bit becomes competitive. Indeed, when skipping a very small number of position (e.g., less then eight) we simply resort to iterating through the list.\n\nIn the test code there is a comment that select9 is about 7 times faster than selectNaive, 45ns against 295 ns for a very dense case on my old 32 bit home machine. Since the machine is 32 bits, that is no more than a rough indication that the selectNaive here (that iterates) might indeed preferable over the select9 here when selecting before the 8th set bit.\nA safe conclusion is that moving selectNaive to the test cases now would be premature.\n\nSince the main goal of rank9 is code documentation, maybe it should be made package-private?\nI have not actually benchmarked rank9 it against Long.bitCount, but I think we should do that just to be sure that rank9 is slower, and than it can be made package-private.\n\nAs for longHex \u2013 I always liked the \"assembly\" version better.\nI have used that mostly during debugging, and it ended up also in toString in EliasFanoEncoder iirc.\nHow about putting the assembly version in BitUtil?\n\nCould we extend LuceneTestCase for tests, please?\nI don't really like it, but my next patch here will have that.\nShould LuceneTestCase also be mentioned in the wiki at \"How to contribute\"?\n\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13706160"
        },
        {
            "date": "2013-07-11T20:13:43+0000",
            "content": "I don't really like it, but my next patch here will have that.\n\nIs there any reason why you don't like it? Voices of criticism are always welcome, especially those constructive ones \n\nThe only change for you should be that it'll require JVM assertions to be enabled and that the method order will be randomized (which you can fix by putting a Seed annotation on the class).\n\nThere are a few test classes that in fact do not extend LuceneTestCase but they do it for a reason (they \"test the tester\" and LuceneTestCase is not really reentrant). ",
            "author": "Dawid Weiss",
            "id": "comment-13706175"
        },
        {
            "date": "2013-07-11T20:51:47+0000",
            "content": "I don't really like using LuceneTestCase here because the tests here pass when extending TestCase and they do not use anything that LuceneTestCase provides, at least not in the way that I use them:\n\n ant -Dtestcase=TestBroadWord test\n\n.\nAlso I prefer to try and avoid having that discussion here.\n\nIs the forbidden checker a precommit check? ",
            "author": "Paul Elschot",
            "id": "comment-13706215"
        },
        {
            "date": "2013-07-11T21:14:15+0000",
            "content": "You can call ant check-forbidden-apis from the lucene or solr root directory. And yes, it's also a precommit check.\n\nLuceneTestCase does more checks on your test case, so we require every test in Lucene extends this class. ",
            "author": "Uwe Schindler",
            "id": "comment-13706235"
        },
        {
            "date": "2013-07-11T22:41:40+0000",
            "content": "A safe conclusion is that moving selectNaive to the test cases now would be premature.\n\nOK.\n\nI have not actually benchmarked rank9 it against Long.bitCount, but I think we should do that just to be sure that rank9 is slower, and than it can be made package-private.\n\nI played a bit with it and rank9 was always between 15% and 20% slower than bitCount no matter what the input was (which is still impressing since bitCount is supposed to be an intrinsic). We used to have a utility method in BitUtil to compute pop counts on longs but we removed it in LUCENE-2221 in favor of Long.bitCount.\n\nHow about putting the assembly version in BitUtil?\n\nOr ToStringUtils?\n\nShould LuceneTestCase also be mentioned in the wiki at \"How to contribute\"?\n\nWe try to keep this page as concise as possible so I added a mention to it in https://wiki.apache.org/lucene-java/DeveloperTips. ",
            "author": "Adrien Grand",
            "id": "comment-13706372"
        },
        {
            "date": "2013-07-12T06:34:50+0000",
            "content": "I don't really like using LuceneTestCase here because the tests here pass when extending TestCase and they do not use anything that LuceneTestCase provides\n\nIf you prefer not to have that discussion here I will shut up. I just wanted to clarify that LTC does checks on your test that you bypass when you extend from TestCase. Randomization of method order (catches order dependencies that shouldn't be there), ensuring your tests run with assertions enabled, checking if your tests don't spawn extra threads \u2013 all these (and more) may not matter to you because you're a seasoned engineer but they do matter in general when contributions come from various sources (or are refactored later by people other than the original author). Randomization isn't the only goal of LTC.\n\nIn short: it's not a remark to you personally, it's a remark to everyone in general that extending LTC should be a priority because it will catch faulty tests faster. ",
            "author": "Dawid Weiss",
            "id": "comment-13706697"
        },
        {
            "date": "2013-07-12T07:30:45+0000",
            "content": "I played a bit with it and rank9 was always between 15% and 20% slower than bitCount no matter what the input was (which is still impressing since bitCount is supposed to be an intrinsic)\n\nI also toyed with this a bit. Interesting because rank9 is essentially Hacker's delight implementation, but with a multiplication at the end rather than shifts/ additions (which I think originated from the fact that multiplication used to be much slower than additions/shifts back in the day). \n\nI ran a few caliper bechmarks on a million longs, different distributions (Intel I7, JDK17) just to see what the output will be.\n\n   benchmark distribution     us linear runtime\n    HdPopCnd        ZEROS   2333 =\n    HdPopCnd         FULL   2334 =\n    HdPopCnd       RANDOM   2329 =\n    HdPopCnd       ONEBIT   2334 =\n       Rank9        ZEROS   1651 =\n       Rank9         FULL   1652 =\n       Rank9       RANDOM   1651 =\n       Rank9       ONEBIT   1651 =\nLongBitCount        ZEROS    411 =\nLongBitCount         FULL    394 =\nLongBitCount       RANDOM    391 =\nLongBitCount       ONEBIT    404 =\n NaivePopCnt        ZEROS    585 =\n NaivePopCnt         FULL  39019 ======\n NaivePopCnt       RANDOM 171365 ==============================\n NaivePopCnt       ONEBIT  28155 ====\n\n\n\nThe naive loop was:\n\n        int cnt = 0;\n        while (x != 0) {\n            if (((x >>>= 1) & 1) != 0L) {\n                cnt++;\n            }\n        }\n        return cnt;\n\n\n\nand you can see that even for all zeros (when in fact there is no counting at all) it's still slower than the intrinsified popcnt. Note full-ones is not the worst case (I believe due to constant branch misprediction in a random input).\n\nA zoomed-in benchmark without the naive impl.:\n\n   benchmark distribution   us linear runtime\n    HdPopCnd        ZEROS 2331 =============================\n    HdPopCnd         FULL 2329 =============================\n    HdPopCnd       RANDOM 2333 =============================\n    HdPopCnd       ONEBIT 2333 =============================\n       Rank9        ZEROS 1650 =====================\n       Rank9         FULL 1650 =====================\n       Rank9       RANDOM 1652 =====================\n       Rank9       ONEBIT 1650 =====================\nLongBitCount        ZEROS  400 =====\nLongBitCount         FULL  402 =====\nLongBitCount       RANDOM  401 =====\nLongBitCount       ONEBIT  391 =====\n\n\n\nYou can see when popcnt isn't intrinsified by running with IBM's J9, for example:\n\n   benchmark distribution   ms linear runtime\nLongBitCount        ZEROS 2.25 =============================\nLongBitCount         FULL 2.22 =============================\nLongBitCount       RANDOM 2.25 =============================\nLongBitCount       ONEBIT 2.25 =============================\n    HdPopCnd        ZEROS 2.25 =============================\n    HdPopCnd         FULL 2.25 =============================\n    HdPopCnd       RANDOM 2.22 =============================\n    HdPopCnd       ONEBIT 2.22 =============================\n       Rank9        ZEROS 1.62 =====================\n       Rank9         FULL 1.62 =====================\n       Rank9       RANDOM 1.62 =====================\n       Rank9       ONEBIT 1.62 =====================\n\n\n\nBut I think they'll eventually catch up with modern cpus too so I'd stick with Long.bitCount. ",
            "author": "Dawid Weiss",
            "id": "comment-13706750"
        },
        {
            "date": "2013-07-12T15:59:55+0000",
            "content": "In the naive implementation above the first shift is before the first masked test. Does this miss the lowest bit? Not that it matters much...\n\nI'll provide a new patch with:\n\n\trank9 package private, users of IBM's J9 will know what to do,\n\tlongHex in ToStringUtils, and\n\textends LuceneTestCase.\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13707037"
        },
        {
            "date": "2013-07-12T18:15:45+0000",
            "content": "Indeed, it's a regression from an earlier implementation where I used Long.rotateRight. It won't play a difference but well spotted. ",
            "author": "Dawid Weiss",
            "id": "comment-13707191"
        },
        {
            "date": "2013-07-12T19:04:34+0000",
            "content": "Looks good to me (there's a likely unused import but it can be fixed later). Very cool, btw. ",
            "author": "Dawid Weiss",
            "id": "comment-13707253"
        },
        {
            "date": "2013-07-12T21:05:21+0000",
            "content": "Commit 1502690 from Adrien Grand\n[ https://svn.apache.org/r1502690 ]\n\nLUCENE-5098: Broadword utility methods. ",
            "author": "ASF subversion and git services",
            "id": "comment-13707372"
        },
        {
            "date": "2013-07-12T21:07:33+0000",
            "content": "Commit 1502691 from Adrien Grand\n[ https://svn.apache.org/r1502691 ]\n\nLUCENE-5098: Broadword utility methods (merged from r1502690). ",
            "author": "ASF subversion and git services",
            "id": "comment-13707375"
        },
        {
            "date": "2013-07-12T21:11:52+0000",
            "content": "Committed. Thanks Paul and Dawid! ",
            "author": "Adrien Grand",
            "id": "comment-13707384"
        },
        {
            "date": "2013-10-05T10:18:46+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787021"
        },
        {
            "date": "2013-10-13T12:03:39+0000",
            "content": "On reviewing the article I found that the method names I chose for algorithms 1 and 2 in the VIgna article were wrong. I used rank9 and select9 because of the titles of sections 3 and 5 in the article, but the method names do less than what is described in these sections.\nThe method names should have been bitCount and select.\nI'll add a correction for this at LUCENE-5236, there is no need to reopen this issue. ",
            "author": "Paul Elschot",
            "id": "comment-13793626"
        }
    ]
}