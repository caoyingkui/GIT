{
    "id": "LUCENE-3266",
    "title": "Improve FileLocking based on Java 1.6",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Snippet from NativeFSLockFactory:\n\n\n/*\n* The javadocs for FileChannel state that you should have\n* a single instance of a FileChannel (per JVM) for all\n* locking against a given file (locks are tracked per \n* FileChannel instance in Java 1.4/1.5). Even using the same \n* FileChannel instance is not completely thread-safe with Java \n* 1.4/1.5 though. To work around this, we have a single (static) \n* HashSet that contains the file paths of all currently \n* locked locks.  This protects against possible cases \n* where different Directory instances in one JVM (each \n* with their own NativeFSLockFactory instance) have set \n* the same lock dir and lock prefix. However, this will not \n* work when LockFactorys are created by different \n* classloaders (eg multiple webapps). \n* \n* TODO: Java 1.6 tracks system wide locks in a thread safe manner \n* (same FileChannel instance or not), so we may want to \n* change this when Lucene moves to Java 1.6.\n*/\n\n\n\nsince we are on 1.6 we should improve this if possible.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-23T18:44:32+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716977"
        },
        {
            "date": "2014-04-16T12:54:43+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970856"
        }
    ]
}