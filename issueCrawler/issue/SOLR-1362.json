{
    "id": "SOLR-1362",
    "title": "WordDelimiterFilter position increment bug",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "WordDelimiterFilter sometimes assigns high position increment values, which inhibits phrase matches.\n\nIf this is a feature and not a bug please change the issue type, and I will change the patch to propose this as an option...",
    "attachments": {
        "SOLR-1362.patch": "https://issues.apache.org/jira/secure/attachment/12416459/SOLR-1362.patch",
        "SOLR-1362_tests.txt": "https://issues.apache.org/jira/secure/attachment/12417217/SOLR-1362_tests.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12742895",
            "date": "2009-08-13T17:17:33+0000",
            "content": "Hmmm, at first blush, it seems like we're just trying to preserve the positioning of the original tokens... so \n\"foo !@# bar\" will index to \"foo (blank) bar\"\n\nIs that the issue? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12742983",
            "date": "2009-08-13T21:31:32+0000",
            "content": "yonik, maybe: i am unable to tell from docs/tests if it is a bug or not. from the code (especially the variable name) it looks suspicious.\n\nbut this is what i mean, i guess it could be desirable for some folks? So I could make it another option...? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12742995",
            "date": "2009-08-13T22:02:38+0000",
            "content": "fyi this line of code was changed from = to += in SOLR-14, which in general appears to be an unrelated issue \n\nthere is one comment about wdf doing the \"wrong thing\" with positions, but i cannot tell if it was intentional or not. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12745113",
            "date": "2009-08-19T16:37:05+0000",
            "content": "I could see perhaps wanting WDF to not create new gaps, but it should normally preserve existing gaps, right?  In which case, a patch would be more complex than conditionally changing \"+=\" to \"=\" "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12745186",
            "date": "2009-08-19T20:29:23+0000",
            "content": "Yonik, in this case I think existing gaps would be preserved with the =\nthe question is what should the behavior be for tokens that are all delimiters, currently these are discarded and posInc is incremented for future tokens.\n\nwith the current behavior, if you have \"LUCENE / SOLR\" (all with posInc=1), this becomes LUCENE (posInc=1), SOLR (posInc=2)\nif you change it to =, if you have \"LUCENE / SOLR\" (pretend SOLR has posInc=3), the posInc=3 would still be preserved, it would just not become 4.\n\nits clear to me looking at history its been like this for a long time, so maybe I am incorrect to categorize it as a bug?\nBut I found this behavior to be a little unexpected, especially for phrase queries, and given the way the code reads, I wasn't certain if it was intentional. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12745516",
            "date": "2009-08-20T17:33:00+0000",
            "content": "Yonik, in this case I think existing gaps would be preserved with the =\n\nWhat if the big position increment was on a token that was all delimiters?\n\nI agree that it makes more sense for \"LUCENE / SOLR\" to be translated to LUCENE SOLR without a gap though (provided that there are no gaps to start with).\n\nShould the rule be, subtract 1 from the cumulative position increment if the increment of the current token being added is >=1 ? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12745520",
            "date": "2009-08-20T17:39:58+0000",
            "content": "ah, i see your point... \n\nsounds right to me. i can reformulate the patch/tests in this direction.\n\nI assume it should be as an option for back compat? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12745541",
            "date": "2009-08-20T18:21:48+0000",
            "content": "I assume it should be as an option for back compat?\n\nI guess so, yes... there may be configurations where it makes sense. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12745791",
            "date": "2009-08-21T04:57:33+0000",
            "content": "I started working on a patch, but found the existing behavior to be more strange than I originally thought.\n\nthere are some bugs in the existing behavior as well, completely separate but along the same lines of this issue.\n\nSo here are some tests, let me know what you think... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12747476",
            "date": "2009-08-25T16:18:58+0000",
            "content": "Thanks Robert... looking into it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12747482",
            "date": "2009-08-25T16:50:47+0000",
            "content": "OK, here's a patch that increases the consistency.\n\nFrom here I think we should subtract 1 for every skipped token that had a position increment of 1.  It's not possible to fix these bugs and keep back compatibility, so I don't think we need a config option for this. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12747655",
            "date": "2009-08-25T21:23:07+0000",
            "content": "Yonik, thanks! I will work on the skipped token subtraction tonight, but your patch has restored order  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12747730",
            "date": "2009-08-26T01:21:55+0000",
            "content": "I had implemented the \"remove normal posIncr\" this morning - just got around to adding a test though.  Seems to work - can you see if this matches your expectations?\n\nI think about it like this:  position increments serve two purposes... to signify the normal case of tokens being adjacent to each other, and to separate groups of tokens.  In the former case, it makes sense to completely consume the delimiter and keep the resulting tokens next to eachother.  In the later case, we want to preserve the logical separation. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12747752",
            "date": "2009-08-26T03:46:45+0000",
            "content": "I had implemented the \"remove normal posIncr\" this morning - just got around to adding a test though. Seems to work - can you see if this matches your expectations? \n\nI tested some with this patch some and I like this behavior.\n\nI think about it like this: position increments serve two purposes... to signify the normal case of tokens being adjacent to each other, and to separate groups of tokens. In the former case, it makes sense to completely consume the delimiter and keep the resulting tokens next to eachother. In the later case, we want to preserve the logical separation.\n\nYes, I think this fixes the behavior for both purposes. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12747754",
            "date": "2009-08-26T03:52:06+0000",
            "content": "actually one last thing Yonik, at the beginning of the processing loop (now i am just nitpicking)\n\n\n     //skip protected tokens\n      if (protWords != null && protWords.contains(termBuffer, 0, len)) {\n        return t;\n      }\n\n      int posInc = t.getPositionIncrement();\n      origPosIncrement += posInc;\n      ...\n\n\n\nI should have written testcase, but don't you think if you have a LUCENE / SOLR where \"/\" has a huge gap, and SOLR is in 'protWords' that this might result in strange behavior? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12747757",
            "date": "2009-08-26T04:09:33+0000",
            "content": "patch that moves the protWords check below the posInc calculation, and sets it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12747940",
            "date": "2009-08-26T13:34:06+0000",
            "content": "Committed, thanks Robert! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775843",
            "date": "2009-11-10T15:52:13+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}