{
    "id": "LUCENE-1654",
    "title": "Include diagnostics per-segment when writing a new segment",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It would be very helpful if each segment in an index included\ndiagnostic information, such as the current version of Lucene.\n\nEG, in LUCENE-1474 this would be very helpful to see if certain\nsegments were written under 2.4.0.\n\nWe can start with just the current version.\n\nWe could also consider making this extensible, so you could provide\nyour own arbitrary diagnostics, but SegmentInfo/s is not public so I\nthink such an API would be \"one-way\" in that you'd have to use\nCheckIndex to check on it later.  Or we could wait on such extensibility\nuntil we provide some consistent way to access per-segment details\nin the index.",
    "attachments": {
        "LUCENE-1654.patch": "https://issues.apache.org/jira/secure/attachment/12408884/LUCENE-1654.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-05-22T21:24:16+0000",
            "content": "Let's have string key-value pairs per-segment, per-commit, per-index?\nLucene can store debugging data there, user can add something if he needs.\n\nWe can design some unified metadata interface available through IndexReader and won't expose SegmentInfo (doing this with our current back-compat policies is akin to suicide) ",
            "author": "Earwin Burrfoot",
            "id": "comment-12712269"
        },
        {
            "date": "2009-05-23T11:47:59+0000",
            "content": "Let's have string key-value pairs per-segment, per-commit, per-index?\n\nThis would be great, but it's quite a bit more work than having IW include its own diagnostics per-segment.\n\nCan you open a separate issue for that? ",
            "author": "Michael McCandless",
            "id": "comment-12712412"
        },
        {
            "date": "2009-05-23T12:03:07+0000",
            "content": "We can start with string key-value pairs per-segment that are created only from inside Lucene and leave everything else for the latter.\n\nWhat I'm trying to avoid is writing a partial solution, then a more generic one (with different implementation) and having to keep that partial solution around because it was already released. I.e. you're going to extend segment file format, right? Let it be key-value pairs from the start, instead of a single Int that is predetermined to be Lucene's version. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12712413"
        },
        {
            "date": "2009-05-23T13:43:33+0000",
            "content": "OK I'll start with that. ",
            "author": "Michael McCandless",
            "id": "comment-12712424"
        },
        {
            "date": "2009-05-23T16:28:00+0000",
            "content": "OK I added per-segment private storage of diagnostics within IW.  It\nrecords the current Lucene version plus OS & Java version details, and\nthe reason for the segment (flush or merge) as a Map<String, String>.\n\nI also changed the commitUserData to be a Map<String,String> too.\nThis API has not yet been released so we are free to change it.\n\nCheckIndex now prints both the commit level and per-segment level\nmaps.\n\nI added Constants.LUCENE_VERSION to record the current version.  I try\nto look up the impl version from the manifest and use that, else I\nfallback to a String constant (now 2.9-dev).  I also added a unit test\nthat asserts this value matches what's in common-build.xml.\n\nWhen I commit I'll update ReleaseTodo on the wiki to remember to\nupdate this value.\n\nI plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12712441"
        },
        {
            "date": "2009-05-24T23:09:01+0000",
            "content": "Let's use Collections.EMPTY_MAP instead of new HashMap() for empty maps?\nIf I correctly read the patch, you retained HasUserData/CommitUserData in file format description, while it was totally removed from the code (except for back-compat read). ",
            "author": "Earwin Burrfoot",
            "id": "comment-12712616"
        },
        {
            "date": "2009-05-25T10:03:56+0000",
            "content": "Excellent catches Earwin, thanks!  New patch attached. ",
            "author": "Michael McCandless",
            "id": "comment-12712678"
        },
        {
            "date": "2009-05-26T15:32:05+0000",
            "content": "This seems useful for including debug info? ",
            "author": "Jason Rutherglen",
            "id": "comment-12713056"
        },
        {
            "date": "2009-05-26T16:22:11+0000",
            "content": "This seems useful for including debug info?\n\nYou mean making the API public?\n\nIt's the reading side of that API that makes me nervous (SegmentInfo/s is not public).\n\nOr do you think it'd be useful to allow one to \"setDiagnostics(Map<String,String>)\" in IW, but only see such diagnostics on running CheckIndex?  That'd be a much smaller change. ",
            "author": "Michael McCandless",
            "id": "comment-12713081"
        },
        {
            "date": "2009-05-26T16:30:52+0000",
            "content": "It's the reading side of that API that makes me nervous (SegmentInfo/s is not public).\nNo-no-no, don't open it up, it's suicidal \n\nWe can theoretically allow access to per-segment data from segment readers, as they have 1-1 relation.\nSo, when I finish always-use-MSR patch, you should be able to get per-commit data from MSR and per-segment from SR using the same API. Sounds somewhat dirty, but would work well... needs more thought. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12713086"
        },
        {
            "date": "2009-05-26T16:45:51+0000",
            "content": "You mean making the API public?\n\nI was thinking it could be (not sure) useful for debugging or\nassertions in LUCENE-1313. I wasn't sure if this was an intended\nuse or would simply be extra noise? ",
            "author": "Jason Rutherglen",
            "id": "comment-12713100"
        },
        {
            "date": "2009-05-26T18:08:44+0000",
            "content": "OK let's hold off on the public API.\n\nJason can you give an example of how you'd use this in LUCENE-1313?  I don't see the connection.  The initial intention was exactly cases like LUCENE-1474 where I'd really like to know which Lucene version wrote a given segment, in helping to debug. ",
            "author": "Michael McCandless",
            "id": "comment-12713169"
        },
        {
            "date": "2009-05-28T17:22:10+0000",
            "content": "I found a bug for indexes with the string-based userdata:\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else {\n          userData = Collections.EMPTY_MAP;\n          if (0 != input.readByte()) {\n            userData.put(\"userData\", input.readString());\n          }\n        }\n      } else {\n        userData = Collections.EMPTY_MAP;\n      }\n\n\n\nBut the empty maps of Collections are read-only, so put() throws UOE.\n\nI fix this and commit: userData should be a singleton map, if 0!=readByte(), otherwise EMPTY_MAP.  ",
            "author": "Uwe Schindler",
            "id": "comment-12714068"
        },
        {
            "date": "2009-05-28T17:52:58+0000",
            "content": "Woops \u2013 thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12714087"
        }
    ]
}