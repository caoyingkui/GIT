{
    "id": "SOLR-2762",
    "title": "FSTLookup returns one less suggestion than it should when onlyMorePopular=true",
    "details": {
        "affect_versions": "3.3,                                            3.4",
        "status": "Closed",
        "fix_versions": [
            "3.5"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I'm using the Suggester.  When I switched from TSTLookup to FSTLookup, I noticed that it returned one fewer suggestion than what I asked for. I have spellcheck.onlyMorePopular=true; when I set it to false, I see the correct count. Another aspect of the bug is that this off-by-one bug only seems to occur when my suggestion has an exact match.",
    "attachments": {
        "SOLR-2762_FSTLookup_off_by_one.patch": "https://issues.apache.org/jira/secure/attachment/12494754/SOLR-2762_FSTLookup_off_by_one.patch",
        "SOLR-2762.patch": "https://issues.apache.org/jira/secure/attachment/12494764/SOLR-2762.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Dawid Weiss",
            "id": "comment-13104313",
            "date": "2011-09-14T07:01:55+0000",
            "content": "David, can you add a test case for this? I'll be happy to fix it, probably something trivial, but a failing test case would be a great start. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13104503",
            "date": "2011-09-14T13:48:20+0000",
            "content": "Maybe some day; sorry. I'm trying to push out the 2nd edition of my Solr book and I ran into this when kicking the tires on the Suggester. I thought it best to at least report the problem instead of do nothing. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13104582",
            "date": "2011-09-14T15:43:24+0000",
            "content": "I thought it best to at least report the problem instead of do nothing.\n\n+1 "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13104708",
            "date": "2011-09-14T17:38:36+0000",
            "content": "Ok, I'll try to reproduce on my own, thanks. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105289",
            "date": "2011-09-15T11:55:50+0000",
            "content": "I've been looking at this code for a longer while but I don't see how it can be off-by-one... Can you send me the snippet of code/ data you used while testing this? "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105291",
            "date": "2011-09-15T12:12:33+0000",
            "content": "The relevant snippet for the scenario you described (exactMatchFirst, onlyMorePopular, input match is exactly represented in the suggestions list) is here:\n\n        if (collect(res, num, weight, output, arc) && greedy) {\n          // We have enough suggestions to return immediately. Keep on looking for an\n          // exact match, if requested.\n          if (exactMatchFirst) {\n            Float exactMatchWeight = getExactMatchStartingFromRootArc(i, key);\n            if (exactMatchWeight != null) {\n              res.add(0, new LookupResult(key, exactMatchWeight));\n              while (res.size() > num) {\n                res.remove(res.size() - 1);\n              }\n            }\n          }\n          break;\n        }\n\n\nthe only place where elements are removed from the suggestion list is in the while loop... but the condition is correct so I've no idea. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13105406",
            "date": "2011-09-15T14:57:41+0000",
            "content": "I will try and debug this tonight or within a few days against my data and point out what the problem is. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105409",
            "date": "2011-09-15T15:00:28+0000",
            "content": "Thanks a lot. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13105869",
            "date": "2011-09-16T05:40:06+0000",
            "content": "The bug is that the \"if (exactMatchFirst) {\" condition fails to consider the fact that an exact match is already in the results. As I was fooling around with my data, it was usually already there.\n\nI added code to check to see if the key is already present and if so to shift it to the top. I also made a trivial change to the existing code you wrote that was in this condition that changed the order of shrinking the result array before inserting a new LookupResult into the first position. This will avoid ArrayList needlessly growing its array.  As an aside, it's not clear to me why you did a min(10,num) when initializing the ArrayList capacity.\n\nI have to admit that this code seems overall tricky to test due to all the branch conditions.  And this method probably has a high cyclomatic complexity. It would be nice to move the \"if (exactMatchFirst) {\" branch outside the loops. At a glance it seems doable but then I noticed getExactMatchStartingFromRootArc(i,key) took the loop index 'i' and I'm not sure what the implications are there. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105887",
            "date": "2011-09-16T06:18:20+0000",
            "content": "I will review it later today. The code is based on several assumptions to speed things up (for example it assumes the fst yields sorted output). I will try to write a failing test case first. \n\n@cyclomatic complexity: the conditions inside loops are meant to early-interrupt the search. That's where the gain is and it'll be hard to get rid of in a clean way.\n\n@min(10, num): I typically try to avoid overallocating buffers; if somebody requests > 10 matches (unlikely?) then we will gracefully expand the buffers as we go. Also: the point of doing this is so that somebody could request all matches by passing Integer.MAX_VALUE which would otherwise cause an OOM. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13105891",
            "date": "2011-09-16T06:25:14+0000",
            "content": "Here is a trivial update to my patch. I forgot to add a \"break\". Without the break the code worked but needlessly checked for alreadyFoundIt after it was already true. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105901",
            "date": "2011-09-16T06:34:50+0000",
            "content": "The patch is fine and I think I now know the circumstances in which the off by one could happen (or more specifically: when the exact match could be on the list at the point of getting to that snippet). I'll try to write a failing test case and then apply your patch. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105910",
            "date": "2011-09-16T06:55:03+0000",
            "content": "I realize when this could happen, indeed \u2013 trivial. Thanks David. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105914",
            "date": "2011-09-16T07:07:48+0000",
            "content": "This is my take at fixing this issue. Took David's suggestion about complexity into account and moved the checks into a separate method. A previously failing test case added and passing. David, feel free to check now, should be fine. I plan to commit in a few hours. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13105937",
            "date": "2011-09-16T08:06:38+0000",
            "content": "Please don't commit in only a few hours.  That is too soon for something being put together now and it's 4am in my time zone \u2013 I haven't gone to bed yet.\n\nI looked at your patch. Your code will only swap the existing match with the first entry, but doesn't that hurt any existing ordering?  My code shifted them down to preserve ordering.  Hey by the way, you did your own swap code when the JDK already has Collections.swap(). "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105958",
            "date": "2011-09-16T09:15:02+0000",
            "content": "4am, you say? You should watch this one: http://www.ted.com/talks/rives_on_4_a_m.html\n\nAnyway, I didn't commit mostly because I'm in and out of office today too. You're right about the ordering \u2013 it will change with the swap() that I used. I'm thinking it'll be easier code-wise to shift by removing and then re-adding the matching element. I'll prepare a patch, won't commit. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13105962",
            "date": "2011-09-16T09:36:08+0000",
            "content": "Corrected swap() (preserve score order if pushing exact match to the front). "
        },
        {
            "author": "David Smiley",
            "id": "comment-13106088",
            "date": "2011-09-16T14:19:37+0000",
            "content": "That TED 4am video was entertaining but weird. Normally I think of TED video as educational / inspiring but that was a bit random.\n\nI like your rename of \"greedy\" to \"collectAll\".\n\nThe code is definitely easier to read with a remove and then an add, even if it internally does more work than my loop did.  I actually considered that approach but I know how performance-contious the developers here are so I didn't do that.  I hoped ArrayList had some sort of shift method but it doesn't. \n\nBy the way, you forgot to copy the code improvement I put in my patch to your existing logic that I told you about.  At your comment: \"// Insert as the first result and truncate at num.\", you did an add then a remove, when you should do a remove then an add in order to avoid potentially needlessly expanding ArrayList's internal array. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13106522",
            "date": "2011-09-16T15:26:46+0000",
            "content": "That TED 4am video was entertaining but weird. Normally I think of TED video as educational / inspiring but that was a bit random.\n\nIt's \"Technology Entertainment and Design\", there's actually plenty of pure entertainers there (musicians, comedians). That 4am was quite funny to me, so I couldn't resist.\n\nI will update to remove before insert, thanks. I didn't think of that. All your other remarks hold, but they're super-minor improvements compared to iterating over the fsa or sorting scores (which we will need to do to make the bucketing proportional), so I'd sacrifice them for code clarity this time. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13106699",
            "date": "2011-09-16T18:54:26+0000",
            "content": "Hope I didn't screw up anything. Commit please, I'm done for the day  "
        },
        {
            "author": "David Smiley",
            "id": "comment-13107029",
            "date": "2011-09-17T05:20:24+0000",
            "content": "The patch looks good to me, Dawid. You tease me with asking me to commit it; I can't :-/ "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13107050",
            "date": "2011-09-17T06:44:44+0000",
            "content": "Ugh... David, you're a machine (5:20am). No, I wasn't teasing, I was really done for the day yesterday. I will commit today, thanks for your help again! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157860",
            "date": "2011-11-27T12:36:07+0000",
            "content": "Bulk close after 3.5 is released "
        }
    ]
}