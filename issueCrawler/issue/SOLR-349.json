{
    "id": "SOLR-349",
    "title": "new functions for FunctionQuery",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "User should be able to boost a query by a function of other fields\nSome background: http://www.nabble.com/boosting-a-query-by-a-function-of-other-fields-tf4387856.html#a12510092",
    "attachments": {
        "linear_combination.patch": "https://issues.apache.org/jira/secure/attachment/12365406/linear_combination.patch",
        "FunctionQuery.patch": "https://issues.apache.org/jira/secure/attachment/12365440/FunctionQuery.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12525935",
            "date": "2007-09-08T18:18:01+0000",
            "content": "This issue is more for a top-down approach (less concerned with underlying implementation, more with just making it possible via http get).\n\n\n\tWe need ways to add multiple fields together, multiply fields together, etc.\n\n\n\n\n\tWe need a scaling function... for example, the range of all the components may not be known, but one may want the final value to be between 1 and 2.  For something like this to be done efficiently, it seems like a min and max would be needed on ValueSource?  Barring that, this value source would need to iterate over all documents and scale appropriately.  Perhaps do the latter for the first implementation and we could always optimize later?\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12525937",
            "date": "2007-09-08T18:29:32+0000",
            "content": "This patch extends the linear function to include other value sources.\nso instead of\n  linear(a,2,3)  // a*2+3\nyou can do\n  linear(a,2,3,b,4,c,5)  // a*2+3+b*4+c*5\n\nEveryone OK with extending LinearFloatFunction this way?  It seemed like the simplest way to get this capability. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12525938",
            "date": "2007-09-08T18:30:48+0000",
            "content": "And yes, the syntax is less than ideal.... it would be nice to extend the parser to accept infix, but that's a different issue for another day. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12525940",
            "date": "2007-09-08T19:09:26+0000",
            "content": "\nthe idea that funcname(a,b,c,d,e,f,g,....) maps to a*b + 1*c + d*e + f*g + ... seems a little weird, even weirder that funcname is \"linear\" which in theory only has 3 inputs.\n\nwouldn't a new \"sum(....)\" function make more sense? ...\n\nsum(linear(a,2,3), linear(b,4,0), linear(c,5,0))\n\n(the key being that \"sum\" takes in a list of other ValueSources, while linear still takes only 1 and some constants)\n\nwe'd also need a \"mult\" function right? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12525945",
            "date": "2007-09-08T20:00:01+0000",
            "content": "Yes, I suppose that sum() makes more sense... and ValueSources are so light weight it shouldn't really cause a performance difference.  Although I think perhaps a constant should be allowed in sum(), otherwise people will be trying the very reasonable sum(a,1) and it won't work.  Of course we could make a ConstantValueSource, so constants and value-sources would be interchangeable...\n\nFor \"mult\", I was thinking \"product\".\n\nAlso perhaps a map() to pseudo-handle default values.\nproduct(x, map(y,0,1))  // map all zeros to 1 before multiplying "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12526042",
            "date": "2007-09-10T02:40:23+0000",
            "content": "Attaching functionquery.patch... adding many new functions:\n\nlog, sqrt, abs, sum, product, const\nscale(source, min, max)    // scale values from source to fall between min and max\nmap(source,min,max,target)   // change any values that fall between min&max to target\nquery(lucene_query, defaultVal)   // use relevancy score, w/ defaultVal when doc doesn't match\n\nI also changed the function parser to use a hash lookup on function name since the list was getting long.  The parser will now also accept a float constant as a value source, allowing things like add(a,2)\n\nThis is just a snapshot for feedback... no tests yet. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12526340",
            "date": "2007-09-11T03:42:46+0000",
            "content": "OK, my next step is to do tests for all these new functions provided no one sees an issue with the general approach.\nI chose to stick with VaueSource as the basis for new functions rather than CustomScoreQuery because of greater complexities with weights, scorers, explanations, etc, and performance issues wrt scorers (skipTo, next needing to know deleted docs). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12526808",
            "date": "2007-09-12T14:36:28+0000",
            "content": "Attatching a new version of the patch with tests. "
        },
        {
            "author": "Tom Hill",
            "id": "comment-12527205",
            "date": "2007-09-13T18:06:13+0000",
            "content": "It looks like you are removing the hard coded parsing of the functions in QueryParsing.java. \n\nHow hard would it be to allow user configured functions? We use several of our own functions, and currently have to hack up QueryParsing.java. \n\nI'd much prefer to be able to add the classname to the config file, and have it just be picked up and added to vsParsers.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12527649",
            "date": "2007-09-14T22:15:24+0000",
            "content": "Being able to add new functions to the parser is probably useful to people... I opened SOLR-356 for this. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12528237",
            "date": "2007-09-18T04:05:55+0000",
            "content": "Added pow(a,b) and div(a,b) and committed.\nStill open for discussion+changes of course. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12579149",
            "date": "2008-03-16T03:23:52+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked \"Resolved\" and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.3 as of today 2008-03-15\n\n\n\nThe Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1\n "
        }
    ]
}