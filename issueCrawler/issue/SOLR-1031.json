{
    "id": "SOLR-1031",
    "title": "XSS vulnerability in schema.jsp (patch included)",
    "details": {
        "affect_versions": "1.2,                                            1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "Admin UI"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "If javascript is embedded in any of the fields, it is possible for that javascript to be executed when viewing the schema.\n\nThe javascript will appear in the \"Top Terms\" part of the UI.\n\nI have created a simple patch to prevent this problem from occurring.",
    "attachments": {
        "SOLR-1031.patch": "https://issues.apache.org/jira/secure/attachment/12400647/SOLR-1031.patch",
        "SchemaXSS.patch": "https://issues.apache.org/jira/secure/attachment/12400638/SchemaXSS.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Paul Lovvik",
            "id": "comment-12675509",
            "date": "2009-02-20T23:28:19+0000",
            "content": "Here is the patch. "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-12675524",
            "date": "2009-02-21T01:48:43+0000",
            "content": "To add a little more background - I ran into this bug while doing work on our Drupal integration module.  It's easy to demonstrate, and basically happens if a script is indexed in an unprocessed or untokenized field (e.g. a string field) and shows up as one of the top terms on the schema browser page (schema.jsp) when one goes to examine a particular field.\n\nThe risk of allowing such script to execute could include modification or deletion of the index, as well as other XSS attacks, and the danger of a small JS payload is potentially enhanced by the fact that is could probably use jQuery functions like jQuery.post(). \n\nFor the Drupal module we are mitigating this risk by using the PHP strip_tags() function prior to indexing content, but it seems liek this is something Solr should handle more generally.\n\nI first observed the bug in Solr 1.3, and it's still present in trunk (1.4)\n\nRe-posting Paul's patch with the preferred naming. "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-12675526",
            "date": "2009-02-21T02:04:04+0000",
            "content": "Drupal ships with a little JS function for sanitizing output (works like the PHP function htmlspecialchars($text, ENT_QUOTES) ).  Possibly you could add something similar if the text() function doesn't give the desired output:\n\n\n\n/**\n * Encode special characters in a plain-text string for display as HTML.\n */\nDrupal.checkPlain = function(str) {\n  str = String(str);\n  var replace = { '&': '&amp;', '\"': '&quot;', '<': '&lt;', '>': '&gt;' };\n  for (var character in replace) {\n    var regex = new RegExp(character, 'g');\n    str = str.replace(regex, replace[character]);\n  }\n  return str;\n};\n\n\n\nhttp://php.net/htmlspecialchars\n\nhttp://cvs.drupal.org/viewvc.py/drupal/drupal/misc/drupal.js?revision=1.50&view=markup "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12675548",
            "date": "2009-02-21T10:46:39+0000",
            "content": "patch applied, tested, and committed.  thanks, Paul and Peter! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775667",
            "date": "2009-11-10T15:51:57+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}