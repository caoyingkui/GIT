{
    "id": "LUCENE-2863",
    "title": "Updating a documenting looses its fields that only indexed, also NumericField tries are completely lost",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0.2,                                            3.0.3",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "I have a code snippet (see below) which creates a new document with standard (stored, indexed), not-stored, indexed-only and some NumericFields. Then it updates the document via adding a new string field. The result is that all the fields that are not stored but indexed-only and especially NumericFields the trie tokens are completly lost from index after update or delete/add.\n\nDirectory ramDir = new RamDirectory();\nIndexWriter writer = new IndexWriter(ramDir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\nDocument doc = new Document();\ndoc.add(new Field(\"ID\", \"HO1234\", Store.YES, Index.NOT_ANALYZED_NO_NORMS));\ndoc.add(new Field(\"PATTERN\", \"HELLO\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\ndoc.add(new NumericField(\"LAT\", Store.YES, true).setDoubleValue(51.488266037777066d));\ndoc.add(new NumericField(\"LNG\", Store.YES, true).setDoubleValue(-0.08913399651646614d));\nwriter.addDocument(doc);\ndoc = new Document();\ndoc.add(new Field(\"ID\", \"HO2222\", Store.YES, Index.NOT_ANALYZED_NO_NORMS));\ndoc.add(new Field(\"PATTERN\", \"BELLO\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\ndoc.add(new NumericField(\"LAT\", Store.YES, true).setDoubleValue(101.488266037777066d));\ndoc.add(new NumericField(\"LNG\", Store.YES, true).setDoubleValue(-100.08913399651646614d));\nwriter.addDocument(doc);\n\nTerm t = new Term(\"ID\", \"HO1234\");\nQuery q = new TermQuery(t);\nIndexSearcher seacher = new IndexSearcher(writer.getReader());\nTopDocs hits = seacher.search(q, 1);\nif (hits.scoreDocs.length > 0) {\n      Document ndoc = seacher.doc(hits.scoreDocs[0].doc);\n      ndoc.add(new Field(\"FINAL\", \"FINAL\", Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n      writer.updateDocument(t, ndoc);\n//      writer.deleteDocuments(q);\n//      writer.addDocument(ndoc);\n} else {\n      LOG.info(\"Couldn't find the document via the query\");\n}\n\nseacher = new IndexSearcher(writer.getReader());\nhits = seacher.search(new TermQuery(new Term(\"PATTERN\", \"HELLO\")), 1);\nLOG.info(\"_____hits HELLO:\" + hits.totalHits); // should be 1 but it's 0\n\nwriter.close();\n\n\n\nAnd I have a boundingbox query based on NumericRangeQuery. After the document update it doesn't return any hit.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-12T22:17:03+0000",
            "content": "updateDocument() is an atomic version of deleteDocument() + addDocument(), nothing more\n\nand there's nothing surprising you lose your fields if you delete the doc and don't add them back later. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12980965"
        },
        {
            "date": "2011-01-13T07:08:56+0000",
            "content": "Yeah, but how can I add the indexed fields back (tries of LAT, LNG and the PATTERN field)?\ndocument.getFields() would give my old fields back in the form on List<Fieldable> but the comment says:\n\nNote that fields which are not stored are not available in documents retrieved from the index, e.g. Searcher.doc(int) or IndexReader.document(int).\nSo this won't work either:\n\ndoc = searcher.doc(hits.scoreDocs[0].doc);\nDocument ndoc = new Document();\nfor (Fieldable field : doc.getFields()) {\n    ndoc.add(field);\n}\nndoc.add(new Field(\"FINAL\", \"FINAL\", Store.YES, Index.NOT_ANALYZED_NO_NORMS));\nwriter.updateDocument(t, ndoc);\n\n ",
            "author": "Tamas Sandor",
            "id": "comment-12981154"
        },
        {
            "date": "2011-01-13T07:28:56+0000",
            "content": "If you want to update documents, you should store them in their entirety somewhere (either in a Lucene index as stored fields, all of them), a DB or someplace else. This is how updateDocument currently works. ",
            "author": "Shai Erera",
            "id": "comment-12981160"
        },
        {
            "date": "2011-01-13T07:29:39+0000",
            "content": "This is not the sort of discussions we should be having in JIRA - that's why we have the user list. Closing as it's not a bug, nor a feature/enhancement proposal. ",
            "author": "Shai Erera",
            "id": "comment-12981161"
        }
    ]
}