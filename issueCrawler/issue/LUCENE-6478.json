{
    "id": "LUCENE-6478",
    "title": "Test execution can hang with java.security.debug",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "As reported by Robert:\n\n# clone trunk\ncd lucene/core/\nant test -Dargs=\"-Djava.security.debug=access:failure\" -Dtestcase=TestDemo\n\n\n\nHangs the test runner. The same problem appears to be present in ES builds too. It seems like some kind of weird stream buffer problem, the security framework seems to be writing to the native descriptors directly. Will have to dig (deep...).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14543480",
            "author": "Dawid Weiss",
            "date": "2015-05-14T10:56:19+0000",
            "content": "I know what's causing this problem. I don't know if I can fix it, but I'll try. "
        },
        {
            "id": "comment-14543500",
            "author": "Dawid Weiss",
            "date": "2015-05-14T11:33:02+0000",
            "content": "Note how recursive interaction between the security framework and gson is the problem here:\n\nWARN: Unhandled exception in event serialization. -> java.lang.IllegalStateException\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:897)\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.Gson.toJson(Gson.java:600)\n        at com.carrotsearch.ant.tasks.junit4.events.Serializer.flushQueue(Serializer.java:100)\n        at com.carrotsearch.ant.tasks.junit4.events.Serializer.serialize(Serializer.java:81)\n        at com.carrotsearch.ant.tasks.junit4.slave.SlaveMain$4.write(SlaveMain.java:434)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126)\n        at java.io.PrintStream.write(PrintStream.java:480)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\n        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)\n        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)\n        at java.io.PrintStream.write(PrintStream.java:527)\n        at java.io.PrintStream.print(PrintStream.java:669)\n        at java.io.PrintStream.println(PrintStream.java:806)\n        at sun.security.util.Debug.println(Debug.java:162)\n        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:463)\n        at java.security.AccessController.checkPermission(AccessController.java:884)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n        at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:128)\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.ConstructorConstructor.newDefaultCons\ntructor(ConstructorConstructor.java:97)\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.ConstructorConstructor.get(Constructo\nrConstructor.java:79)\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.cre\nate(ReflectiveTypeAdapterFactory.java:82)\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.Gson.getAdapter(Gson.java:359)\n        at com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.Gson.toJson(Gson.java:592)\n        at com.carrotsearch.ant.tasks.junit4.events.Serializer.flushQueue(Serializer.java:100)\n        at com.carrotsearch.ant.tasks.junit4.events.Serializer.serialize(Serializer.java:81)\n        at com.carrotsearch.ant.tasks.junit4.slave.SlaveMain$4.write(SlaveMain.java:434)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126)\n        at java.io.PrintStream.write(PrintStream.java:480)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\n        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)\n        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)\n        at java.io.PrintStream.write(PrintStream.java:527)\n        at java.io.PrintStream.print(PrintStream.java:669)\n        at java.io.PrintStream.println(PrintStream.java:806)\n        at sun.security.util.Debug.println(Debug.java:162)\n        at java.security.AccessController.checkPermission(AccessController.java:878)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n        at java.lang.SecurityManager.checkRead(SecurityManager.java:888)\n        at java.io.File.exists(File.java:814)\n        at java.io.WinNTFileSystem.canonicalize(WinNTFileSystem.java:434)\n        at java.io.File.getCanonicalPath(File.java:618)\n        at java.io.FilePermission$1.run(FilePermission.java:215)\n        at java.io.FilePermission$1.run(FilePermission.java:203)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.io.FilePermission.init(FilePermission.java:203)\n        at java.io.FilePermission.<init>(FilePermission.java:277)\n        at java.lang.SecurityManager.checkRead(SecurityManager.java:888)\n        at java.io.File.exists(File.java:814)\n        at sun.misc.URLClassPath$FileLoader.getResource(URLClassPath.java:1081)\n        at sun.misc.URLClassPath.getResource(URLClassPath.java:199)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:364)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:360)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n        at com.carrotsearch.ant.tasks.junit4.slave.SlaveMain.main(SlaveMain.java:330)\n        at com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe.main(SlaveMainSafe.java:14)\n\n\n\nJust about any option I can think of is using plain manual serialization (sigh) of events and/or disabling sysout capture. "
        },
        {
            "id": "comment-14976162",
            "author": "Dawid Weiss",
            "date": "2015-10-27T10:21:03+0000",
            "content": "Good news, Robert (Robert Muir). I think I fixed it in the RR \u2013 I was successfull at running tests with full security policy dump.\n\ncd lucene\nant test-core -Dtests.useSecurityManager=true  \"-Dtests.class=*FuzzyTermOnShortTermsTest*\" -Dtests.seed=deadbeef -Dtests.jvms=1 -Dtests.verbose=true -Dargs=\"-Djava.security.debug=all\"\n\n\nYou need -Dtests.verbose \u2013 there's tons of output from policy debug and it max sysout limit rule complains otherwise. I attach a patch that I used against trunk. Note it uses a snapshot version of RR, you need to fetch it from sonatype snapshots repo (or install it manually in your .m2).\n\n\nIndex: ivy-settings.xml\n===================================================================\n--- ivy-settings.xml    (revision 1710751)\n+++ ivy-settings.xml    (working copy)\n@@ -50,7 +50,7 @@\n\n     <chain name=\"default\" returnFirst=\"true\" checkmodified=\"true\" changingPattern=\".*SNAPSHOT\">\n       <resolver ref=\"local\"/>\n-      <!-- <resolver ref=\"local-maven-2\" /> -->\n+      <resolver ref=\"local-maven-2\" />\n       <resolver ref=\"main\"/>\n       <resolver ref=\"maven.restlet.org\" />\n       <resolver ref=\"sonatype-releases\" />\nIndex: ivy-versions.properties\n===================================================================\n--- ivy-versions.properties     (revision 1710751)\n+++ ivy-versions.properties     (working copy)\n@@ -7,7 +7,7 @@\n /cglib/cglib-nodep = 2.2\n /com.adobe.xmp/xmpcore = 5.1.2\n\n-com.carrotsearch.randomizedtesting.version = 2.1.17\n+com.carrotsearch.randomizedtesting.version = 2.2.0-SNAPSHOT\n /com.carrotsearch.randomizedtesting/junit4-ant = ${com.carrotsearch.randomizedtesting.version}\n /com.carrotsearch.randomizedtesting/randomizedtesting-runner = ${com.carrotsearch.randomizedtesting.version}\n\n "
        },
        {
            "id": "comment-14976218",
            "author": "Robert Muir",
            "date": "2015-10-27T10:58:53+0000",
            "content": "this is really great: I tested it and it works.\n\nwithout this fix, if you have an issue then debugging has to be....creatively done. "
        },
        {
            "id": "comment-14976220",
            "author": "Dawid Weiss",
            "date": "2015-10-27T11:01:15+0000",
            "content": "There will be a few more changes to RR 2.2.0, but I plan to release soon-ish. Hopefully nothing will break. "
        }
    ]
}