{
    "id": "LUCENE-6564",
    "title": "Fix thread safety in PrintStreamInfoStream, unify logging format with tests",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/index",
            "general/test"
        ],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Noticed while debugging some IW output in an unit test that milliseconds were not output in the date, changed this to reuse the date format used by PrintStreamInfoStream.",
    "attachments": {
        "LUCENE-6564.patch": "https://issues.apache.org/jira/secure/attachment/12739484/LUCENE-6564.patch",
        "LUCENE-6564-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12739666/LUCENE-6564-trunk.patch",
        "LUCENE-6564-5x.patch": "https://issues.apache.org/jira/secure/attachment/12739665/LUCENE-6564-5x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14585035",
            "author": "Ramkumar Aiyengar",
            "date": "2015-06-14T10:47:01+0000",
            "content": "Trivial patch to change this.. "
        },
        {
            "id": "comment-14585166",
            "author": "ASF subversion and git services",
            "date": "2015-06-14T18:11:27+0000",
            "content": "Commit 1685431 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1685431 ]\n\nLUCENE-6564: Add milliseconds to timestamp in IW output for tests "
        },
        {
            "id": "comment-14585167",
            "author": "ASF subversion and git services",
            "date": "2015-06-14T18:12:35+0000",
            "content": "Commit 1685432 from Ramkumar Aiyengar in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685432 ]\n\nLUCENE-6564: Add milliseconds to timestamp in IW output for tests "
        },
        {
            "id": "comment-14585229",
            "author": "Robert Muir",
            "date": "2015-06-14T19:57:02+0000",
            "content": "I don't think we should make this change. SimpleDateFormat is not thread safe. "
        },
        {
            "id": "comment-14585232",
            "author": "Ramkumar Aiyengar",
            "date": "2015-06-14T20:05:19+0000",
            "content": "Will revert. PrintStreamInfoStream does the same, it's not required to be thread safe? I can just instantiate this with every message, is that fine? This is used only with tests.. "
        },
        {
            "id": "comment-14585234",
            "author": "Robert Muir",
            "date": "2015-06-14T20:07:53+0000",
            "content": "What was the problem with 'new Date()'. To me that is the simplest. In general this is just a diagnostics mechanism for IW. we shouldnt be writing tests where you have to read massive amounts of logs. "
        },
        {
            "id": "comment-14585238",
            "author": "Ramkumar Aiyengar",
            "date": "2015-06-14T20:11:52+0000",
            "content": "In this particular case, `new Date()` in my locale at least was not showing milliseconds, and that was hindering investigation. "
        },
        {
            "id": "comment-14585241",
            "author": "Robert Muir",
            "date": "2015-06-14T20:12:29+0000",
            "content": "The bug was introduced here: LUCENE-6119\n\nIt should be 'new Date' in all cases, and avoid any sync or use of simpledateformat. I really really really really do not want this logging shit hiding bugs. "
        },
        {
            "id": "comment-14585245",
            "author": "Robert Muir",
            "date": "2015-06-14T20:17:36+0000",
            "content": "I am also fine with removing any time information entirely: it doesnt really seem necessary to print times here. Its just a diagnostics thing and a sequential order of events. "
        },
        {
            "id": "comment-14585251",
            "author": "Ramkumar Aiyengar",
            "date": "2015-06-14T20:24:55+0000",
            "content": "Frankly, removing date information seems better, either we should have something with a reasonable accuracy, or not have it at all.. Second resolution is not reasonable IMO..\n\nThe other option here is to use a threadlocal, but you could argue that adds complexity as well.. "
        },
        {
            "id": "comment-14585252",
            "author": "ASF subversion and git services",
            "date": "2015-06-14T20:26:14+0000",
            "content": "Commit 1685461 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1685461 ]\n\nRevert r1685431: LUCENE-6564: Add milliseconds to timestamp in IW output for tests "
        },
        {
            "id": "comment-14585254",
            "author": "ASF subversion and git services",
            "date": "2015-06-14T20:27:37+0000",
            "content": "Commit 1685462 from Ramkumar Aiyengar in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685462 ]\n\nRevert r1685432: LUCENE-6564: Add milliseconds to timestamp in IW output for tests "
        },
        {
            "id": "comment-14585635",
            "author": "Michael McCandless",
            "date": "2015-06-15T08:34:32+0000",
            "content": "Oh that's bad bad bad that SimpleDateFormat is not thread safe.\n\nBut I do find msec time to be helpful when debugging tests ... I don't think we should make tests even harder to debug.\n\nWhat if we switch to a simple \"seconds since start\"?  E.g.:\n\n\nIW 2 [0.0327s; main]: now flush at close\nIW 2 [0.0328s; main]:   start flush: applyAllDeletes=true\nIW 2 [0.0329s; main]:   index before flush\nDW 2 [0.0330s; main]: startFullFlush\nDW 2 [0.0331s; main]: anyChanges? numDocsInRam=1 deletes=false hasTickets:false pendingChangesInFullFlush: false\nDWFC 2 [0.0333s; main]: addFlushableState DocumentsWriterPerThread [pendingDeletes=gen=0, segment=_0, aborted=false, numDocsInRAM=1, deleteQueue=DWDQ: [ generation: 0 ]]\nDWPT 2 [0.0351s; main]: flush postings as segment _0 numDocs=1\nDWPT 2 [0.0604s; main]: new segment has 0 deleted docs\nDWPT 2 [0.0606s; main]: new segment has no vectors; norms; no docValues; prox; freqs\nDWPT 2 [0.0607s; main]: flushedFiles=[_0.nvd, _0.fdx, _0_Memory_0.ram, _0.fdt, _0.nvm, _0.fnm]\n\n "
        },
        {
            "id": "comment-14585703",
            "author": "Michael McCandless",
            "date": "2015-06-15T09:32:29+0000",
            "content": "How about this?  I just do elapsed time since the info stream was created, using System.nanoTime, and I cutover to String.format. "
        },
        {
            "id": "comment-14585705",
            "author": "Michael McCandless",
            "date": "2015-06-15T09:32:51+0000",
            "content": "Probably doesn't matter but the patch is against 5.x... "
        },
        {
            "id": "comment-14585810",
            "author": "Uwe Schindler",
            "date": "2015-06-15T11:34:30+0000",
            "content": "There is also another possibility to get milliseconds without a date format: http://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/FileTime.html#toString():\n\n\nFileTime.fromMillies(...).toString()\n\n\n\n(this is new since Java 7 and somehow \"misuses\" the FileTime API, but it might be useful here. It also uses UTC and uses the generic ISO8601 format!\n\nThe other possibility is using a ThreadLocal:\n\n\nstatic final ThreadLocal<DateFormat> FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(..., Locale, Timezone));\n\n "
        },
        {
            "id": "comment-14586140",
            "author": "Mark Miller",
            "date": "2015-06-15T14:52:52+0000",
            "content": "The other possibility is using a ThreadLocal:\n\nThat seems to be a fairly std practice for SimpleDateFormat usage - kind of silly though. "
        },
        {
            "id": "comment-14586247",
            "author": "Uwe Schindler",
            "date": "2015-06-15T16:08:47+0000",
            "content": "Because of this, I would suggest to keep everything like it is and just \"misuse\" java.nio.file.attribute.FileTime for formatting as ISO-8601 timestamp. So patch is quite easy... "
        },
        {
            "id": "comment-14586264",
            "author": "Ramkumar Aiyengar",
            "date": "2015-06-15T16:24:29+0000",
            "content": "+1 for Uwe's suggestion, even though it's misuse, it perfectly fits our use. And even if Java changes this, we can always remove or go to something more complicated.. "
        },
        {
            "id": "comment-14586308",
            "author": "Uwe Schindler",
            "date": "2015-06-15T16:53:13+0000",
            "content": "And even if Java changes this, we can always remove or go to something more complicated..\n\nIt won't change as the behaviour is specified in the Javadocs, so the format of FileTime#toString() cannot change without breaking backwards! \n\nI will provide a patch in a minute! "
        },
        {
            "id": "comment-14586323",
            "author": "Uwe Schindler",
            "date": "2015-06-15T17:08:41+0000",
            "content": "Here my patch.\n\nThe output looks like this:\n\n\n$ ant test -Dtestcase=TestIndexWriter -Dtests.verbose=true\n...\n   [junit4]   1> DW 108 [2015-06-15T17:06:45.2Z; main]: publishFlushedSegment seg-private updates=null\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.201Z; main]: publishFlushedSegment\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.201Z; main]: publish sets newSegment delGen=3 seg=_1(6.0.0):C1\n   [junit4]   1> IFD 108 [2015-06-15T17:06:45.201Z; main]: now checkpoint \"_0(6.0.0):C1 _1(6.0.0):C1\" [2 segments ; isCommit = false]\n   [junit4]   1> IFD 108 [2015-06-15T17:06:45.202Z; main]: 0 msec to checkpoint\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.202Z; main]: apply all deletes during flush\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.203Z; main]: now apply all deletes for all segments maxDoc=2\n   [junit4]   1> BD 108 [2015-06-15T17:06:45.203Z; main]: applyDeletes: open segment readers took 0 msec\n   [junit4]   1> BD 108 [2015-06-15T17:06:45.203Z; main]: applyDeletes: no segments; skipping\n   [junit4]   1> BD 108 [2015-06-15T17:06:45.203Z; main]: prune sis=segments_1: _0(6.0.0):C1 _1(6.0.0):C1 minGen=1 packetCount=0\n   [junit4]   1> DW 108 [2015-06-15T17:06:45.204Z; main]: TEST-TestIndexWriter.testDeleteUnusedFiles2-seed#[4A62A887A4681DB2] finishFullFlush success=true\n   [junit4]   1> TMP 108 [2015-06-15T17:06:45.204Z; main]: findMerges: 2 segments\n   [junit4]   1> TMP 108 [2015-06-15T17:06:45.205Z; main]:   seg=_0(6.0.0):C1 size=0.001 MB [floored]\n   [junit4]   1> TMP 108 [2015-06-15T17:06:45.205Z; main]:   seg=_1(6.0.0):C1 size=0.001 MB [floored]\n   [junit4]   1> TMP 108 [2015-06-15T17:06:45.206Z; main]:   allowedSegmentCount=1 vs count=2 (eligible count=2) tooBigCount=0\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.206Z; main]: startCommit(): start\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.206Z; main]: startCommit index=_0(6.0.0):C1 _1(6.0.0):C1 changeCount=7\n   [junit4]   1> IW 108 [2015-06-15T17:06:45.208Z; main]: startCommit: wrote pending segments file \"pending_segments_2\"\n\n "
        },
        {
            "id": "comment-14586352",
            "author": "Uwe Schindler",
            "date": "2015-06-15T17:28:35+0000",
            "content": "By the way: In Lucene Trunk we can use the new Java 8 Datetime API (Jodatime fork) to get an ISO datestamp without misusing an API. We should maybe use the new API in Java 8 to implement getTimeStamp(): LocalDateTime.now().toString() (in local time), or by giving a timezone. "
        },
        {
            "id": "comment-14586397",
            "author": "Mark Miller",
            "date": "2015-06-15T17:58:07+0000",
            "content": "I would love to calculate the developer time / cost ratio of this ticket  Gotta love Open Source. "
        },
        {
            "id": "comment-14586421",
            "author": "Michael McCandless",
            "date": "2015-06-15T18:11:20+0000",
            "content": "+1 to Uwe Schindler's patch!  But can you add a comment explaining why we abuse the FileTime API?\n\nSeparately it's kinda cool that TestIndexWriter makes at least 108 IW instances... "
        },
        {
            "id": "comment-14586431",
            "author": "Uwe Schindler",
            "date": "2015-06-15T18:17:44+0000",
            "content": "I would love to calculate the developer time / cost ratio of this ticket  Gotta love Open Source.\n\nLOL. Yes, oh yes!  But we also fixed a bug. Because the SImpleDateFormat used in the PrintStreamInfoStream was not thread safe at all! So we also fixed a bug. Thanks to Robert for pointing this out (unfortunately ForbiddenApis cannot detect multithreaded use of SimpleDateFormat....)\n\nBut can you add a comment explaining why we abuse the FileTime API?\n\nWill do. I am out of office, will prepare this later. "
        },
        {
            "id": "comment-14586479",
            "author": "Uwe Schindler",
            "date": "2015-06-15T18:49:06+0000",
            "content": "Here patch for 5.x and trunk. In trunk I use the Java 8 Datetime API with Instant.now().toString(), in 5.x I added a comment why misusing FileTime.\n\nPlease have in mind that the output is always in UTC. In Java 8 we could use local time, too, but this would make it identical for both cases. In addition, while running tests, we randomize the timezone, so the \"local\" date is bit useless...\n\nAny comments? "
        },
        {
            "id": "comment-14586517",
            "author": "Erick Erickson",
            "date": "2015-06-15T19:13:24+0000",
            "content": "Never, never, never use local time ... Since I'm always running the log file through a program to figure things out, I'll put any conversions I need there.\n\nFWIW "
        },
        {
            "id": "comment-14586755",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T21:34:44+0000",
            "content": "Commit 1685675 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1685675 ]\n\nLUCENE-6564: Change PrintStreamInfoStream to use thread safe Java 8 ISO-8601 date formatting (in Lucene 5.x use Java 7 FileTime#toString as workaround); fix output of tests to use same format "
        },
        {
            "id": "comment-14586757",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T21:36:43+0000",
            "content": "Commit 1685676 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685676 ]\n\nMerged revision(s) 1685675 from lucene/dev/trunk:\nLUCENE-6564: Change PrintStreamInfoStream to use thread safe Java 8 ISO-8601 date formatting (in Lucene 5.x use Java 7 FileTime#toString as workaround); fix output of tests to use same format "
        },
        {
            "id": "comment-14586758",
            "author": "Uwe Schindler",
            "date": "2015-06-15T21:37:15+0000",
            "content": "I committed the Java 8 and Java 7 variants to Trunk and 5.x "
        },
        {
            "id": "comment-14713183",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:01+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}