{
    "id": "SOLR-12352",
    "title": "Solr mod function query does not yield correct results",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "It seems mod operation in function query is not working correctly for large numbers.\n\n\n\"_version_\": 1600463487761383425,\n\"ms(NOW)\": 1526324140364,\n\"mod(_version_,ms(NOW))\": 1280437520000\n\n\n\u00a0\nHowever, mod(1600463487761383425,1526324140364) is 1204927482853.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-14T20:23:13+0000",
            "content": "Problem confirmed on 6.6.2-SNAPSHOT and 7.3.0.  Added the following parameter to a query:\n\n\nfl=*,foo:mod(1600463487761383425,1526324140364)\n\n\n\nThat added the following to each document in the result (wt=json):\n\n\n\"foo\":1.28043752E12\n\n\n\nI found it irritating that I got exponential notation (and the associated loss of precision) instead of a true number, but as the issue indicates, the value is completely wrong.  The correct value of 1204927482853 was confirmed both in a test Java program and with the scientific calculator built into Windows 7. ",
            "author": "Shawn Heisey",
            "id": "comment-16474752"
        },
        {
            "date": "2018-05-14T20:41:19+0000",
            "content": "Longs are casted to floats\u00a0in \"mod\" function, thats the problem:\u00a0\n\n    long version = 1600463487761383425L;\n    long ms = 1526324140364L;\n    System.out.println(version % ms); // 1204927482853\n    System.out.println((float)version % (float)ms); // 1.28043752E12 i.e. 1280437520000\n\n ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16474771"
        },
        {
            "date": "2018-05-14T20:47:28+0000",
            "content": "If I add a line where the cast is to double, I get an ALMOST correct number.  It's off by one.\n\n\n\t    long version = 1600463487761383425L;\n\t    long ms = 1526324140364L;\n\t    System.out.println(version % ms); // 1204927482853\n\t    System.out.println((float)version % (float)ms); // 1.28043752E12 i.e. 1280437520000\n\t    System.out.println((double)version % (double)ms); // 1.204927482852E12\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-16474781"
        },
        {
            "date": "2018-05-14T20:52:13+0000",
            "content": "Solr's functions operate on floats - maybe\u00a0this problem follows from that? ",
            "author": "Steve Rowe",
            "id": "comment-16474786"
        },
        {
            "date": "2018-05-14T21:02:57+0000",
            "content": "Casting to double is a \"better\" approach (i.e. it will\u00a0give correct\u00a0answers in more cases) but in general it is still broken :\n\n \n    long version1 = 1600463487761383425L;\n    long version2 = 1600463487761383424L;\n    System.out.println((double)version1 == (double) version2); //true\n\n\nProbably there should be more complex logic behind that user function\u00a0 ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16474798"
        },
        {
            "date": "2018-05-14T22:48:01+0000",
            "content": "Is the mod function actually useful for floating point numbers?  I did a simple test in Java code which shows that it sort of works, but suffers from precision problems:\n\n\n  double dv = 5.7;\n  double dms = 2.2;\n  System.out.println(dv % dms); // 1.2999999999999998\n\n\n\nI wouldn't have imagined any use for mod with anything other than whole numbers, but maybe that's a failure of imagination on my part. ",
            "author": "Shawn Heisey",
            "id": "comment-16474989"
        },
        {
            "date": "2018-05-15T00:15:11+0000",
            "content": "Solr's functions operate on floats - maybe this problem follows from that?\n\nYep.  IIRC there's a JIRA for adding types to value sources / functions (it's needed in quite a few places). ",
            "author": "Yonik Seeley",
            "id": "comment-16475093"
        }
    ]
}