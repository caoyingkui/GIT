{
    "id": "LUCENE-8042",
    "title": "Add SegmentCachable interface",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [],
        "fix_versions": [
            "7.2"
        ]
    },
    "description": "Following LUCENE-8017, I tried to add a getCacheHelper(LeafReaderContext) method to DoubleValuesSource so that Weights that use DVS can delegate on.  This ended up with the same method being added to LongValuesSource, and some of the similar objects in spatial-extras.  I think it makes sense to abstract this out into a separate SegmentCachable interface.",
    "attachments": {
        "LUCENE-8042.patch": "https://issues.apache.org/jira/secure/attachment/12896377/LUCENE-8042.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16241761",
            "date": "2017-11-07T09:53:20+0000",
            "content": "Here is a patch adding the interface, and amending FunctionMatchQuery and FunctionScoreQuery to delegate their getCacheHelper() methods to their wrapped DoubleValuesSource.  It also moves the static helper methods for DV queries and combining multiple CacheHelpers away from Weight and onto SegmentCachable. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16241882",
            "date": "2017-11-07T11:53:22+0000",
            "content": "Can we reconsider the latter?\n\nThis is a bit too much indirection and abstractions IMO for something that's essentially a boolean method returning fi.dvGen == -1:\n\n\n       @Override\n       public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return SegmentCachable.getDocValuesCacheHelper(field, context);\n       }\n\n\n\nGiven that this is an abstract method (required) on Weight, and given that we can only cache per-segment, can we please simplify it? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16242046",
            "date": "2017-11-07T14:06:33+0000",
            "content": "This patch should simplify things a bit for implementers.  Instead of directly exposing IndexReader.CacheHelper, getCacheHelper(LeafReaderContext) is now moved to an inner CacheLevel class.  SegmentCachable declares a single getCacheLevel() method, and implementers can return one of the following:\n\n\n\tCacheLevel.SEGMENT for stuff that's always cachable\n\tCacheLevel.DOCVALUES(field) for things using docvalues\n\tCacheLevel.NEVER for stuff that's never cachable\n\n\n\nRetrieving CacheHelpers and comparing different levels of cache is all done within the CacheHelper class itself. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16243557",
            "date": "2017-11-08T09:04:53+0000",
            "content": "For reference, the method quoted above would now look like this:\n\n @Override\n    public CacheLevel getCacheLevel() {\n      return SegmentCachable.DOCVALUES(field);\n    }\n\n ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16243797",
            "date": "2017-11-08T12:08:57+0000",
            "content": "Here's an updated patch with better testing for handling multiple nested docvalues SegmentCachable objects.  The multiple-DV stuff in the previous patch was fairly comprehensively broken. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16244024",
            "date": "2017-11-08T14:29:09+0000",
            "content": "some of the code in this patch still uses SegmentCacheable, so i have trouble reviewing. I think these are just leftovers? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16244028",
            "date": "2017-11-08T14:31:56+0000",
            "content": "Also i would still like to see if we can make this simply a boolean method, isCacheable.\n\nI am concerned that API decisions are being made on broken assumptions (eg. LUCENE-8017).  Such function queries that depend on the documents score can never be cached, ever, because they users can override *statistics methods in IndexSearcher and implement distributed search, or feed numbers from a random number generator, or whatever the hell they want. So it is actually false that such queries depend on the whole index, they are simply unsafe to cache.\n\nSo, I'd like to put an end to the theoretical discussion of top-level caching here, right now, and make the api minimal and something we can live with. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16244220",
            "date": "2017-11-08T16:04:27+0000",
            "content": "Also i would still like to see if we can make this simply a boolean method, isCacheable\n\nHere's a patch that does just that, and it does indeed simplify a whole bunch of code.  I moved the method checking whether or not DV fields are cacheable to DocValues.isCacheable() - maybe it should be called isUpdated() or something instead? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16247328",
            "date": "2017-11-10T10:28:58+0000",
            "content": "Robert Muir are you happy with the last patch? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16247602",
            "date": "2017-11-10T14:56:30+0000",
            "content": "+1, this really looks a lot better to me. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16247807",
            "date": "2017-11-10T17:35:39+0000",
            "content": "Commit 6e4f9a62e7cc221dcb49788ab683c87f764f2f4a in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6e4f9a6 ]\n\nLUCENE-8042: Add SegmentCachable interface ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16247808",
            "date": "2017-11-10T17:35:41+0000",
            "content": "Commit 317c9f359f3779725324fdb546fbb2ebe7fcf54c in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=317c9f3 ]\n\nLUCENE-8042: Fix precommit and CHANGES ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16247809",
            "date": "2017-11-10T17:35:44+0000",
            "content": "Commit 276e317e9424252d89df7596851c7cd3559d79b1 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=276e317 ]\n\nLUCENE-8042: Add SegmentCachable interface ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16247810",
            "date": "2017-11-10T17:35:47+0000",
            "content": "Commit b5571031cab9199d7a74370f69d821f4676e2caa in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b557103 ]\n\nLUCENE-8042: Fix precommit and CHANGES ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16247811",
            "date": "2017-11-10T17:36:35+0000",
            "content": "Thanks for the reviews Robert! ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16247995",
            "date": "2017-11-10T20:07:30+0000",
            "content": "Really nice! ",
            "author": "David Smiley"
        }
    ]
}