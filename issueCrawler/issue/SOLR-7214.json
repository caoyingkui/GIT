{
    "id": "SOLR-7214",
    "title": "JSON Facet API",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.1"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Overview is here: http://yonik.com/json-facet-api/\n\nThe structured nature of nested sub-facets are more naturally expressed in a nested structure like JSON rather than the flat structure that normal query parameters provide.\n\nGoals:\n\n\tFirst class JSON support\n\tEasier programmatic construction of complex nested facet commands\n\tSupport a much more canonical response format that is easier for clients to parse\n\tFirst class analytics support\n\tSupport a cleaner way to do distributed faceting\n\tSupport better integration with other search features",
    "attachments": {
        "SOLR-7214.patch": "https://issues.apache.org/jira/secure/attachment/12704633/SOLR-7214.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-15T02:58:09+0000",
            "author": "Yonik Seeley",
            "content": "Patch attached.  It actually contains most of the JSON request api and parameter substitution because they overlapped and had dependencies. ",
            "id": "comment-14362160"
        },
        {
            "date": "2015-03-15T02:59:21+0000",
            "author": "Yonik Seeley",
            "content": "Here's a message I sent to the Heliosearch forum last year:\n\n\nFacet functions and subfacets (nested facets) have added a lot of \nanalytic power, but using separate query parameters for nested facets \nhas the downside of being very hard to construct / read for complex \nnested facets.  Specifying deeply nested facets with a naturally \nnested structure (JSON) makes a lot of sense and can also make \nprogramatic generation of requests easier. \n\nThe kitchen sink that is SimpleFacets has outlived it's usefulness, so \nI'm developing a new faceting module for Heliosearch with the \nfollowing goals: \n - first class JSON support \n - support a much more canonical response format that is easier for \nclients to parse \n - first class analytics support \n - support a cleaner way to do distributed faceting \n - support better integration with other search features such as \ngrouping, joins, cross-core features \n\nThe JSON API: \nNote that the JSON parser we use now supports comments, unquoted \nsimple strings, and single quoted strings, making the DSL much more \nsuited to hand-typing. \n\nThe top-level \"bucket\" is implicitly defined by the set of documents \nmatching the main query and filters (same as old faceting, but just \nmore explicit). \nGiven that we start out with a bucket, we can ask for stats at the top-level. \n\nEXAMPLE: \njson.facet={ x:'avg(price)', y:'unique(manufacturer)' } \n\nRESPONSE: { count:17, x:37.5, y:7 } \n// The top level facet bucket is just like any query facet and always \nincludes \"count\" \n\nEXAMPLE: simple field facet \njson.facet={genres:{terms:genre_field}} \n// this is a short-form since no other params are desired \n\nEXAMPLE: field facet with other params \njson.facet={genres:{terms:{ \n   field:genre_field, \n   offset:100, \n   limit:20, \n   mincount:5 \n}} \n\nNotes  - I switched to using \"terms\" for a field facet because of the \nawkwardness of having \"field\" appear twice in a row (i.e. \nmylabel:{field:{field:myfield, offset:... ) \n\nEXAMPLE: field facet with sub facets and stats \njson.facet={genres:{terms:{ \n   field:genre_field, \n   offset:100, \n   limit:20, \n   mincount:5, \n   facet : {    // these facet commands will be done per-bucket of parent facet \n     x : 'avg(price)' ,   // a stat per-bucket \n     y : { query : 'popularity[5 TO 10]' } ,  // query sub-facet \n     z : { terms : manufacturer }   // field/terms sub-facet \n   } \n}}} \n\nThe output looks pretty much identical to the existing facet function \nand sub-facet code: \nhttp://heliosearch.org/solr-subfacets/ \nhttp://heliosearch.org/solr-facet-functions/ \nYou can check out the tests so far too in TestJsonFacets.java \n\nImplementation Notes: \n- Agg (aggregations are currently a subclass of ValueSource and \npiggyback off of the ability of users to plug in their own custom \nvalue source parsers). \n- a FacetRequestParser creates a FacetRequest, and then to execute \nthat request, a FacetProcessor is created. \n- Much of the code is in a single file (FacetRequest.java), but this \nis just temporary... it eases changes early on while things are in \nflux. \n\nOverall, I think this will end up striking a good balance between \nreadability, ad-hoc human generated requests, and programmatically \ngenerated queries. \n\nYou can try it out (but it's early... faceting multivalued fields are \nnot supported yet). \nFor convenience, here's the \"example\" server you can try: \n[dead link]\n\n-Yonik \n\n ",
            "id": "comment-14362162"
        },
        {
            "date": "2015-03-15T03:08:22+0000",
            "author": "Yonik Seeley",
            "content": "Really high level implementation notes:\n\nFacetRequestParser takes in JSON and creates FacetRequest objects.\nFacetRequest objects create FacetProcessor objects on specific shards that are responsible for doing the faceting.\nFacetRequest objects can also create a FacetMerger, which is responsible for merging responses from multiple shards.\n\nTo the degree possible, we push smarts down to the leaves rather than making them dumb.\nFor example, instead of modifying things like \"offset\" or \"limit\" at the top level, the shards are aware that they are in a distributed search and know how to do that themselves.  This is much less error prone as we can avoid modifying the original facet request.\n\nThings are designed to be fully pluggable as well.  For example, someone can design their own aggregation and it has the right methods to handle both low level implementation as well as high level distributed search merging. ",
            "id": "comment-14362164"
        },
        {
            "date": "2015-03-16T04:40:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1666856 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1666856 ]\n\nSOLR-7214: JSON Facet API ",
            "id": "comment-14362730"
        },
        {
            "date": "2015-03-16T05:48:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1666876 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1666876 ]\n\nSOLR-7214: JSON Facet API ",
            "id": "comment-14362776"
        },
        {
            "date": "2015-03-16T20:52:03+0000",
            "author": "Crawdaddy",
            "content": "Thank you, Yonik, for your generosity in bringing this back into Solr!!  Hope to see this in a near-term 5.x release.\n ",
            "id": "comment-14363910"
        },
        {
            "date": "2015-03-16T22:04:30+0000",
            "author": "Grant Ingersoll",
            "content": "How does this all fit with the work many have been doing on stats, facets, etc?  Is there a way we can merge these features/functionality such that users don't have completely separate APIs for this stuff?\n\ne.g. SOLR-6348 and its children?   ",
            "id": "comment-14364060"
        },
        {
            "date": "2015-03-16T22:08:10+0000",
            "author": "Timothy Potter",
            "content": "I added a TODO to the Ref guide page for this to be documented for the 5.1 release. ",
            "id": "comment-14364063"
        },
        {
            "date": "2015-03-19T19:55:27+0000",
            "author": "Yonik Seeley",
            "content": "How does this all fit with the work many have been doing on stats, facets, etc?\n\nGood question.\nI added facet functions and sub facets (prior to the JSON API version) at the beginning of 2014.  I hacked the functionality into SimpleFacets.  That experience convinced me that we need more of a fresh start for faceting in general, so when I added JSON API support, I created a new faceting module.  I think it will more cleanly support a lot of stuff we want to do with faceting / analytics and other search functionality in the future.\n\nOf course then SOLR-6351 was later created in the summer of 2014 that hangs stats off of pivots, which sort of duplicates some of the functionality I had been working on. Fair enough though, I had been doing my work in the heliosearch fork and Solr needed something.\n\nAs far as APIs (and having more than one API), I've ran into a lot of people that wanted a more structured API that's easier to create programmatically.  I'm also not sure if just continually expanding the use of localParams for this stuff is the way to go.  So how would one merge these APIs?\n\nThen there's the analytics component, which is not yet distributed.  It probably still has more functionality than either my stuff here, or the new pivot-stat stuff.  But some have privately shared that they are not so keen on it's API.\n\nSo yeah... it looks like we have at least 3 analytics solutions in various states of development.  Not sure what to do about that.  Suggestions welcome.\nWe can look at sharing more implementation over time.   I was going to do percentiles, but then I saw it in SOLR-6350 as well, so I'll prob hold off and see how much of that can be shared. ",
            "id": "comment-14369993"
        },
        {
            "date": "2015-03-20T12:46:12+0000",
            "author": "Steve Molloy",
            "content": "I think the underlying implementations should be shared. While I agree that SimpleFacets got to the point of being anything but simple... I don't think having completely separate implementations will help at all. Haven't looked at the new code yet, but how hard would it be to roll in pivot stats (and everything under SOLR-6350) into this implementation? I'm thinking that while this new way of passing parameters to facetting is good, we'll still need to support the old way to avoid any pains for users currently doing it the old way. And this should be perfectly fine as after all, we're talking about how to pass parameters, not what to do about them. So, whatever underlying implementation is more solid, easier to maintain, evolve, etc. We should use that and have all functionality work with it. If this new implementation supports all Solr needs, then let's simply have a layer that can parse parameters into a JSON format that will be provided to it. If it's the other way around, let's parse the JSON into parameters for the facet processing. Either way, we should decouple the way to provide parameters from the actual processing, and we should have a single way of performing that processing for facets... ",
            "id": "comment-14371242"
        },
        {
            "date": "2015-03-20T14:59:58+0000",
            "author": "Grant Ingersoll",
            "content": "Yeah, I'm not a big fan of local params, so I'm all for a new approach to the API.  We should work to consolidate and deprecate, while leveraging what we can under the hood. ",
            "id": "comment-14371421"
        },
        {
            "date": "2015-03-20T15:16:19+0000",
            "author": "Grant Ingersoll",
            "content": "I should add, however, I think the \"hanging of off\" approach brings some interesting things to the table in terms of slicing and dicing things, but I admittedly haven't looked deeply at this new stuff.  My main concern here isn't the implementation or any one approach, it's the we now have 2 approaches.  That's not going to make for a good user experience.  I would prefer we resolve the user experience before we commit and release this. ",
            "id": "comment-14371443"
        },
        {
            "date": "2015-03-20T15:32:17+0000",
            "author": "Yonik Seeley",
            "content": "it's the we now have 2 approaches. \n\n3 approaches... you're forgetting the analytics component  ",
            "id": "comment-14371487"
        },
        {
            "date": "2015-03-24T13:06:04+0000",
            "author": "Steve Molloy",
            "content": "I've created SOLR-7296 to deal with this multitude of implementations. Feel free to comment, contribute, insult, etc.  ",
            "id": "comment-14377811"
        },
        {
            "date": "2015-03-24T16:34:51+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "let's simply have a layer that can parse parameters into a JSON format that will be provided to it\nWhen I read this Jira I thought this was the idea, it looks like it's much more than just the JSON API. I do think this is a great feature, but I agree that duplicating so much code (and current effort tracked in SOLR-6348) is not good.\nI would prefer we resolve the user experience before we commit and release this.\n+1, Once this gets released it's going to be much more difficult to refactor and do changes that could break backward compatibility or stability.\n\nA random/unrelated thought, I think for patches like these (like 10k lines, including moved classes!) would be great candidates to use the review tool, it gets very difficult to review otherwise.\nAlso, it seems like the description of the FacetModule is \"Heliosearch Faceting\", is this intended? ",
            "id": "comment-14378107"
        },
        {
            "date": "2015-03-25T00:50:32+0000",
            "author": "Yonik Seeley",
            "content": "I'm thinking that while this new way of passing parameters to facetting is good, we'll still need to support the old way to avoid any pains for users currently doing it the old way. \n\nAgree.  I think we need to support the facet.field=myfield pretty much forever.\n\nIf this new implementation supports all Solr needs, then let's simply have a layer that can parse parameters into a JSON format that will be provided to it. \n\nInternally, there's not much JSON... for flexibility we parse it as soon as we can and then it lives in SolrQueryRequest:\n  public Map<String,Object> getJSON();\nSo it's a map of string to Obect, where Object can be another Map, a List, or a primitive such as Long, Double, Boolean, etc.\n\nSo a FacetFieldParser class looks at the generic Map<String,Object> and creates a FacetField instance:\n\npublic class FacetField extends FacetRequest {\n  String field;\n  long offset;\n  long limit = 10;\n  long mincount = 1;\n  boolean missing;\n  boolean numBuckets;\n  String prefix;\n  String sortVariable;\n  SortDirection sortDirection;\n  FacetMethod method;\n  boolean allBuckets;   // show cumulative stats across all buckets (this can be different than non-bucketed stats across all docs because of multi-valued docs)\n  [...]\n\n\n\nThe FacetField instance can create a FacetProcessor to actually do the faceting work on an actual index.\n\nFor those familiar with how Queries work in Lucene/Solr:\n\nFacetParser == QueryParser   // FacetFieldParser, FacetRangeParser, FacetQueryParser are subclasses\nFacetRequest == Query        // FacetField, FacetRange, FacetQuery are subclasses\nFacetProcessor == Scorer   // FacetFieldProcessor, FacetRangeProcessor, FacetQueryProcessor are subclasses\n\n\nAt the top level of a distributed search, a FaceRequest (like FacetField), can create a FacetMerger to handle merging responses from shards.\n\nIf this new implementation supports all Solr needs, then let's simply have a layer that can parse parameters into a JSON format that will be provided to it.\n\nSee the LegacyFacet class as an example of something that does conversions between styles.  It convers to the Map<String,Object>\n\nAlso, it seems like the description of the FacetModule is \"Heliosearch Faceting\", is this intended?\n\nOversight.  I just committed a rename.\nWe still need to handle SolrTestCaseHS as well (HS stands for HelioSearch).  Some of that class should prob just go back into SolrTestCaseJ4, but some of it (the client stuff) might make sense somewhere else. ",
            "id": "comment-14379043"
        },
        {
            "date": "2015-03-28T00:02:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1669712 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1669712 ]\n\nSOLR-7214: optimize multi-valued counts-only case ",
            "id": "comment-14384933"
        },
        {
            "date": "2015-03-28T00:10:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1669713 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1669713 ]\n\nSOLR-7214: optimize multi-valued counts-only case ",
            "id": "comment-14384941"
        },
        {
            "date": "2015-03-30T18:43:48+0000",
            "author": "Crawdaddy",
            "content": "I encountered a bug/incompatibility with JSON faceting on (multi-valued) fields w/DocValues.  Multi-valued in parentheses since I don't know if the bug is exclusive to that or not.  Issue seems similar to SOLR-6024.\n\nMy use case requires the Facet API/Analytics capabilities, and I both require and desire DocValues due to the high cardinality of the values I store, and the associated performance increase I get when faceting on them.  Without DocValues, I get the dreaded \"Too many values for UnInvertedField faceting on field\" error.\n\nPossible there's a quick fix you could propose, Yonik Seeley, that I could back-port into Heliosearch until this stuff is available in Solr?\n\nExample schema field:\n<field name=\"keywords\"  type=\"string\"  indexed=\"true\"  stored=\"true\" multiValued=\"true\" docValues=\"true\"/>\n\nTraditional Solr faceting on this field works:\n[...]/select?rows=0&q=toyota&facet=true&facet.field=keywords\n\nJSON faceting returns \"Type mismatch: keywords was indexed as SORTED_SET\":\n[...]/select?rows=0&q=toyota&json.facet={keywords:{terms:\n{field:keywords}\n}}\n\nERROR - 2015-03-30 10:52:05.806; org.apache.solr.common.SolrException; org.apache.solr.common.SolrException: Type mismatch: keywords was indexed as SORTED_SET\nat org.apache.solr.search.facet.UnInvertedField.<init>(UnInvertedField.java:201)\nat org.apache.solr.search.facet.UnInvertedField.getUnInvertedField(UnInvertedField.java:964)\nat org.apache.solr.search.facet.FacetFieldProcessorUIF.findStartAndEndOrds(FacetField.java:463)\nat org.apache.solr.search.facet.FacetFieldProcessorFCBase.getFieldCacheCounts(FacetField.java:203)\nat org.apache.solr.search.facet.FacetFieldProcessorFCBase.process(FacetField.java:186)\nat org.apache.solr.search.facet.FacetProcessor.fillBucketSubs(FacetRequest.java:176)\nat org.apache.solr.search.facet.FacetProcessor.processSubs(FacetRequest.java:288)\nat org.apache.solr.search.facet.FacetProcessor.fillBucket(FacetRequest.java:266)\nat org.apache.solr.search.facet.FacetQueryProcessor.process(FacetQuery.java:56)\nat org.apache.solr.search.facet.FacetModule.process(FacetModule.java:87)\nat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:218)\nat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\nat org.apache.solr.core.SolrCore.execute(SolrCore.java:1966)\nat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:777)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\nat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\nat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\nat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\nat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\nat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\nat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\nat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\nat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\nat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\nat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\nat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\nat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\nat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\nat org.eclipse.jetty.server.Server.handle(Server.java:368)\nat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\nat org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\nat org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:953)\nat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1014)\nat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)\nat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\nat org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\nat org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\nat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\nat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\nat java.lang.Thread.run(Thread.java:745) ",
            "id": "comment-14387176"
        },
        {
            "date": "2015-04-06T03:26:01+0000",
            "author": "Yonik Seeley",
            "content": "\nThanks for the report, this should now be fixed in SOLR-7350 ",
            "id": "comment-14480891"
        },
        {
            "date": "2015-04-08T02:33:17+0000",
            "author": "Eric Falcao",
            "content": "Hi Yonik, loving this feature so far!\n\nOne thing I'm seeing is that TrieIntField, TrieDateField and possibly others don't show any buckets when I attempt to facet on them using this new API. It doesn't throw an exception - I just see an empty array of buckets.\n\nI don't know if that's by design or not, but faceting on those field types does work using old facets. Our use case is to show a timeseries that shows count of docs per minute over some time range range. Hope that makes sense. ",
            "id": "comment-14484590"
        },
        {
            "date": "2015-04-08T02:55:53+0000",
            "author": "Yonik Seeley",
            "content": "Hmmm, thanks for the report Eric, I'll look into it. ",
            "id": "comment-14484617"
        },
        {
            "date": "2015-04-15T00:30:29+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495301"
        },
        {
            "date": "2015-04-21T21:08:01+0000",
            "author": "Harry Yoo",
            "content": "I have a same issue with Eric Falcao. When I try json facet on the TrieDateField, I've got\n```\n Unable to range facet on tried field of unexpected type\nat org.apache.solr.search.facet.FacetRangeProcessor.getRangeCountsIndexed(FacetRange.java:97)\n```\n\nIt seems like xxxRangeEndpointCaculator is not implemented for date type. Tested on Solr 5.1. ",
            "id": "comment-14505765"
        },
        {
            "date": "2015-04-22T02:13:03+0000",
            "author": "Yonik Seeley",
            "content": "Thanks for the report about range faceting on date fields... I've opened SOLR-7443 for this.  Should be able to fix it soon. ",
            "id": "comment-14506253"
        },
        {
            "date": "2015-04-30T20:16:37+0000",
            "author": "Crawdaddy",
            "content": "Yonik, I think I found a JSON faceting bug when sub-faceting a field on unique(another_field).  As part of the upgrade from HS to Solr 5.1, I wanted to A/B test my queries between the two. I setup two identical 5-shard Solr installs, 35M docs each - one running HS 0.09 and and the other Solr 5.1.  Issuing my facet query, I noticed that the unique counts were different between the two.  \n\nThis query, issued to my Solr 5.1 instance, demonstrates the inconsistency between native facets and JSON facets (limits set low enough to repro the issue):\n\nrows=0&q=\"John Lennon\"&fq=keywords:[* TO *]&facet=true&facet.pivot=keywords,top_private_domain_s&facet.limit=10&\njson.facet={\n  keywords:{\n    terms:{\n      field:keywords,\n      limit: 2,\n      facet:\n{       \n           unique_domains: 'unique(top_private_domain_s)'\n      }\n    }\n  }\n}\n\nA snippet of the results shows that the native facets return at least 10 unique values (there are more) for the keyword \"Paul McCartney\":\n\n   \"facet_pivot\":{\n      \"keywords,top_private_domain_s\":[{\n          \"field\":\"keywords\",\n          \"value\":\"Paul McCartney\",\n          \"count\":602,\n          \"pivot\":[\n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"taringa.net\",\n              \"count\":35}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"dailymail.co.uk\",\n              \"count\":34}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"beatlesbible.com\",\n              \"count\":33}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"examiner.com\",\n              \"count\":22}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"blogspot.com\",\n              \"count\":14}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"musicradar.com\",\n              \"count\":13}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"liverpoolecho.co.uk\",\n              \"count\":11}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"rollingstone.com\",\n              \"count\":11}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"about.com\",\n              \"count\":9}\n,\n            \n{\n              \"field\":\"top_private_domain_s\",\n              \"value\":\"answers.com\",\n              \"count\":8}\n]},\n\n...\n\nBut the JSON facets say there's only 4 unique values:\n\n \"facets\":{\n    \"count\":11859,\n    \"keywords\":{\n      \"buckets\":[\n{\n          \"val\":\"Paul McCartney\",\n          \"count\":602,\n          \"unique_domains\":4}\n]}}}\n\nThe results are correct when issuing the same search in Heliosearch:\n\n\"facets\":{\n    \"count\":11859,\n    \"keywords\":{\n      \"buckets\":[\n{\n          \"val\":\"Paul McCartney\",\n          \"count\":602,\n          \"unique_domains\":228}\n]}}}\n\nIn all cases the doc count (602) is the same so I know it's hitting the same documents.\n\nAny advice you can offer as to whether you think this is a bug, or if the behavior is intentionally different between the two systems, would be much appreciated.  If it is a bug but you think there's a workaround, that'd be great to know too.\n\n ",
            "id": "comment-14522177"
        },
        {
            "date": "2015-04-30T21:22:21+0000",
            "author": "Yonik Seeley",
            "content": "Hmmm, something weird is going on.  Lots of code changed between lucene/solr 4 and 5, so it wasn't necessarily a straightforward port.  You probably hit a bug I introduced.  What's the field type of keywords (single or multiValued?)  I assume top_private_domain_s is a standard single valued string.\n\nAlso, what happens if you add distrib=false (a non-distributed request on a single shard)? ",
            "id": "comment-14522291"
        },
        {
            "date": "2015-04-30T21:43:12+0000",
            "author": "Crawdaddy",
            "content": "keywords is multi-valued and top_private_domain_s is a standard single valued string.\n\nLooks like it is a distrib problem - the numbers do look more realistic on a per-shard basis.  Both HS and Solr 5.1 report the same per-shard numbers for Paul McCartney across my 5 shards:\n70 + 76 + 90 + 78 + 48 = 362\n\nI would assume then that 362 goes to the 228 number I saw above, once the list is uniq'd.\n ",
            "id": "comment-14522327"
        },
        {
            "date": "2015-04-30T22:01:40+0000",
            "author": "Yonik Seeley",
            "content": "Ok, thanks for narrowing the issue down! ",
            "id": "comment-14522355"
        },
        {
            "date": "2015-04-30T22:12:02+0000",
            "author": "Crawdaddy",
            "content": "Absolutely - let me know if there's anything else I can do Yonik. ",
            "id": "comment-14522374"
        },
        {
            "date": "2015-04-30T23:31:39+0000",
            "author": "Yonik Seeley",
            "content": "OK, I don't yet know what's behind it, but I have reproduced it.  I'll open another issue. ",
            "id": "comment-14522476"
        },
        {
            "date": "2015-04-30T23:35:16+0000",
            "author": "Yonik Seeley",
            "content": "Opened SOLR-7494 ",
            "id": "comment-14522481"
        },
        {
            "date": "2015-05-01T14:02:30+0000",
            "author": "Crawdaddy",
            "content": "Wow, that was fast. Thanks Yonik. ",
            "id": "comment-14523224"
        },
        {
            "date": "2015-05-08T16:34:08+0000",
            "author": "Crawdaddy",
            "content": "Ran into a bug in the Facet Module around shards tolerant behavior.  If a shard is down, a 500 error is thrown with an NPE.  If we specify shards.tolerant=true in our Solr config, I would expect partial responses in the faceting module as well I think, right?\n\n   \"error\":\n{\n    \"trace\":\"java.lang.NullPointerException\\n\\tat org.apache.solr.search.facet.FacetModule.handleResponses(FacetModule.java:172)\\n\\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:355)\\n\\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\\n\\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1984)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:829)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:446)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:220)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:368)\\n\\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\\n\\tat org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\\n\\tat org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:953)\\n\\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1014)\\n\\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)\\n\\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\\n\\tat org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\\n\\tat org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\\n\\tat java.lang.Thread.run(Thread.java:745)\\n\",\n    \"code\":500}\n} ",
            "id": "comment-14534841"
        },
        {
            "date": "2015-05-09T14:50:38+0000",
            "author": "Yonik Seeley",
            "content": "Thanks, I opened SOLR-7518 for this. ",
            "id": "comment-14536621"
        }
    ]
}