{
    "id": "SOLR-3136",
    "title": "FacetField and Count : Override equals() and hashCode()",
    "details": {
        "affect_versions": "3.5",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Overriding equals() and hashCode() of FacetField and Count to provide equality based on content (on their properties) would allow using these classes in sets and as keys in maps.\n\nImplementation via commons-lang (which is already a dependency) should be fairly straight forward?\n\n\nFor FacetFields, compare name, gap and end but not the list of counts:\n\n\npublic boolean equals(Object o) {\n  if (o != null && o instanceof FacetField) {\n    FacetField ff = (FacetField)o;\n    return new EqualsBuilder().append(_name, ff._name).append(_gap, ff._gap).append(_end, ff._end).isEquals();\n  }\n  return false;\n}\n\npublic int hashCode() {\n  return new HashCodeBuilder(33,11).append(_name).append(_gap).append(_end).toHashCode();\n}\n\n\n\n\nFor Count compare FacetField, name and count:\n\n\npublic boolean equals(Object o) {\n  if (o != null && o instanceof Count) {\n    Count c = (Count)o;\n    return new EqualsBuilder().append(_ff, c._ff).append(_name, c._name).append(_count, c._count).isEquals();\n  }\n  return false;\n}\n\npublic int hashCode() {\n  return new HashCodeBuilder(35,17).append(_ff).append(_name).append(_count).toHashCode();\n}",
    "attachments": {},
    "issue_links": {},
    "comments": []
}