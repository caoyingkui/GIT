{
    "id": "SOLR-10009",
    "title": "Explore removing CoreDescriptor from SolrCore",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Resolved",
        "status": "Resolved"
    },
    "description": "There should be one place where the CoreDescriptor resides, not a copy in CoreContainer and one in SolrCore. Changing and persisting these from one place or the other leads to inconsistencies.\n\nThis JIRA is partly to get the discussion going of how to untangle these.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-20T21:39:43+0000",
            "content": "This may not totally depend on SOLR-10008, but I'm sequencing them that way and much of the same code will be touched I think. ",
            "author": "Erick Erickson",
            "id": "comment-15832448"
        },
        {
            "date": "2017-01-26T23:20:08+0000",
            "content": "I've been digging into this and I think the approach should be to break out the core descriptors into better list keeping. Currently we have SolrCore.coreDescriptor and dynamicDescriptors. The dynamicDescriptors is a map that handles transient cores and cores with loadOnStartup=false.\n\nSo what that means is that for \"dynamicDescriptors\", there's a copy in a list in SolrCores and there's a copy in the SolrCore itself. Meanwhile for \"regular\" cores there's only the copy in SolrCore. This leads to confusion about where the real CoreDescriptor is, which gave us headaches for persisting.\n\nThen we have a \"name\" in the CoreDescriptor and a \"name\" in the SolrCore that both need to be kept in sync. See SolrCore.setName in the current code. I don't think we reference the core name often enough to make an extra level of indirection be noticeable so I'm also thinking of moving the \"name\" var from SolrCore. \n\nSo what I'm looking at is\n1> pull coreDescriptor out of SolrCore (done for PoC, testing now)\n2> pull \"name\" out of SolrCore and go get the name from CoreDescriptor (not done yet).\n3> rename a few variables in SolrCore. I was about to go overboard and propose that the ulogDir and dataDir be kept in the CoreDescriptor only, but then realized they are actually something quite different than a simple String. But something like resolvedUlogDir might be clearer.\n\nWhat I'm dithering about is whether there really should be a CoreDescriptors class (note the 's') whose job is to keep track of just CoreDescriptors analogous to SolrCore/SolrCores. Having the CoreDescriptors scattered about the SolrCores in two lists seems rife for error.\n\nI considered enhancing CoresLocator, but that seems inappropriate. Alan Woodward do you have an opinion? about this or anything else for that matter? ",
            "author": "Erick Erickson",
            "id": "comment-15840646"
        },
        {
            "date": "2017-02-03T05:21:34+0000",
            "content": "What you're saying makes sense though I confess not being that familiar with these internals.  BTW I suggest not naming a class CoreDescriptors and instead do almost anything else as it's too confusing \u2013 just one letter from what it manages.  I'm not entirely clear why a CoreDescriptors or SolrCores (which I just observed in the code base) needs to exist when we already have the CoreContainer which one would think is going to handle that itself.  Maybe it's grown in complexity that this stuff is factored out? ",
            "author": "David Smiley",
            "id": "comment-15851085"
        },
        {
            "date": "2017-03-16T16:29:37+0000",
            "content": "Given that both SOLR-10009 and SOLR-10008 depend on SOLR-8906, it's easier to do both at once. ",
            "author": "Erick Erickson",
            "id": "comment-15928378"
        },
        {
            "date": "2017-03-16T17:10:31+0000",
            "content": "David Smiley Point taken about CoreDescriptors, although it would follow the model of SolrCore/SolrCores. I'm still not sure I even want to, I'll figure that out Real Soon Now though.\n\nAs far as why it's not all just in CoreContainer. I didn't do that bit of code, but CoreContainer is a big class with duties for coordinating locks and all that. It does contain a SolrCores member variable so I believe it's just about tidiness.\n\n\nOn a different topic, removing the \"name\" parameter from SolrCore I've poked around in this a bit more. I can't pull it out completely and still remove the copy of the CoreDescriptor as we have to have some key to get the CoreDescriptor associated with this core. The motivation for removing the CoreDescriptor from SolrCore is that we have two copies of it: one in the various CoreDescriptor lists and one in the SolrCore itself, leading to race conditions.\n\nThe copy serves one purpose that I can tell: allows core swapping. We replace the CoreDescriptor that was in SolrCore with a new copy with a different name at the same time we do the swap. We do the swap in two separate SolrCore.setName calls, depending on having copies laying around to keep these accurate. I'll change the code to no longer require a setName with side effects and swap the CoreDescriptors in the swap method. There should be no need at that point for a setName method.\n\nAll subject to change as I dig further. ",
            "author": "Erick Erickson",
            "id": "comment-15928446"
        },
        {
            "date": "2017-04-03T22:52:43+0000",
            "content": "Since SOLR-10007 has SOLR-10008 and SOLR-10009 as related, and since I'm doing both 10008 and 10009 at once, I'm moving all the code and patch to 10007 ",
            "author": "Erick Erickson",
            "id": "comment-15954283"
        },
        {
            "date": "2017-04-05T15:38:03+0000",
            "content": "Incorporated in SOLR-10007 ",
            "author": "Erick Erickson",
            "id": "comment-15957047"
        }
    ]
}