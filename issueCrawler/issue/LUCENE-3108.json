{
    "id": "LUCENE-3108",
    "title": "Land DocValues on trunk",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index",
            "core/search",
            "core/store"
        ],
        "type": "Task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA,                                            CSF branch",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Its time to move another feature from branch to trunk. I want to start this process now while still a couple of issues remain on the branch. Currently I am down to a single nocommit (javadocs on DocValues.java) and a couple of testing TODOs (explicit multithreaded tests and unoptimized with deletions) but I think those are not worth separate issues so we can resolve them as we go. \nThe already created issues (LUCENE-3075 and LUCENE-3074) should not block this process here IMO, we can fix them once we are on trunk. \n\nHere is a quick feature overview of what has been implemented:\n\n\tDocValues implementations for Ints (based on PackedInts), Float 32 / 64, Bytes (fixed / variable size each in sorted, straight and deref variations)\n\tIntegration into Flex-API, Codec provides a PerDocConsumer->DocValuesConsumer (write) / PerDocValues->DocValues (read)\n\tBy-Default enabled in all codecs except of PreFlex\n\tFollows other flex-API patterns like non-segment reader throw UOE forcing MultiPerDocValues if on DirReader etc.\n\tIntegration into IndexWriter, FieldInfos etc.\n\tRandom-testing enabled via RandomIW - injecting random DocValues into documents\n\tBasic checks in CheckIndex (which runs after each test)\n\tFieldComparator for int and float variants (Sorting, currently directly integrated into SortField, this might go into a separate DocValuesSortField eventually)\n\tExtended TestSort for DocValues\n\tRAM-Resident random access API plus on-disk DocValuesEnum (currently only sequential access) -> Source.java / DocValuesEnum.java\n\tExtensible Cache implementation for RAM-Resident DocValues (by-default loaded into RAM only once and freed once IR is closed) -> SourceCache.java\n\n\n\nPS: Currently the RAM resident API is named Source (Source.java) which seems too generic. I think we should rename it into RamDocValues or something like that, suggestion welcome!   \n\n\nAny comments, questions (rants ) are very much appreciated.",
    "attachments": {
        "LUCENE-3108.patch": "https://issues.apache.org/jira/secure/attachment/12479767/LUCENE-3108.patch",
        "LUCENE-3108_CHANGES.patch": "https://issues.apache.org/jira/secure/attachment/12481914/LUCENE-3108_CHANGES.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-17T09:35:52+0000",
            "content": "+1, excellent! ",
            "author": "Michael McCandless",
            "id": "comment-13034645"
        },
        {
            "date": "2011-05-17T20:05:52+0000",
            "content": "This is an awesome change!\n\nPhew been a long time since I looked at this branch!\n\nSome questions on a quick pass \u2013 still need to iterate/dig deeper:\n\n\n\tWe have some stale jdocs that reference .setIntValue methods (they\n    are now .setInt)\n\n\n\n\n\tHmm do we have byte ordering problems?  Ie, if I write index on\n    machine with little-endian but then try to load values on\n    big-endian...?  I think we're OK (we seem to always use\n    IndexOutput.writeInt, and we convert float-to-raw-int-bits using\n    java's APIs)?\n\n\n\n\n\tSince we dynamically reserve a value to mean \"unset\", does that\n    mean there are some datasets we cannot index?  Or... do we tap\n    into the unused bit of a long, ie the sentinel value can be\n    negative?  But if the data set spans Long.MIN_VALUE to\n    Long.MAX_VALUE, what do we do...?\n\n\n\n\n\tHow come codecID changed from String to int on the branch?\n\n\n\n\n\tWhat are oal.util.Pair and ParallelArray for?\n\n\n\n\n\tFloatsRef should state in the jdocs that it's really slicing a\n    double[]?\n\n\n\n\n\tCan SortField somehow detect whether the needed field was stored\n    in FC vs DV and pick the right comparator accordingly...?  Kind of\n    like how NumericField can detect whether the ints are encoded as\n    \"plain text\" or as NF?  We can open a new issue for this,\n    post-landing...\n\n\n\n\n\tIt looks like we can sort by int/long/float/double pulled from DV,\n    but not by terms?  This is fine for landing... but I think we\n    should open a post-landing issue to also make FieldComparators for\n    the Terms cases?\n\n\n\n\n\tShould we rename oal.index.values.Type -> .ValueType?  Just\n    because... it looks so generic when its imported & used as \"Type\"\n    somewhere?\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13035017"
        },
        {
            "date": "2011-05-18T08:18:39+0000",
            "content": "Mike thanks for the review!!!!!\n\nPhew been a long time since I looked at this branch!\n\nits been changing  \n\n We have some stale jdocs that reference .setIntValue methods (they\nare now .setInt)\nTrue - thanks I will fix.\n\n Hmm do we have byte ordering problems? Ie, if I write index on\nmachine with little-endian but then try to load values on\nbig-endian...? I think we're OK (we seem to always use\nIndexOutput.writeInt, and we convert float-to-raw-int-bits using\njava's APIs)?\n\nWe are ok here since we write big-endian (enforced by DataOutput) and read it back in as plain bytes. The created ByteBuffer will always use BIG_ENDIAN as the default order. I added a comment for this.\n\nHow come codecID changed from String to int on the branch?\ndue to DocValues I need to compare the ID to certain fields to see for what field I stored and need to open docValues. I always had to parse the given string which is kind of odd. I think its more natural to have the same datatype on FieldInfo, SegmentCodecs and eventually in the Codec#files() method. Making a string out of it is way simpler / less risky than parsing IMO.\n\n What are oal.util.Pair and ParallelArray for?\nlegacy I will remove\n\n FloatsRef should state in the jdocs that it's really slicing a\ndouble[]?\n\nyep done!\n\n Can SortField somehow detect whether the needed field was stored\nin FC vs DV and pick the right comparator accordingly...? Kind of\nlike how NumericField can detect whether the ints are encoded as\n\"plain text\" or as NF? We can open a new issue for this,\npost-landing...\n\nThis is tricky though. You can have a DV field that is indexed too so its hard to tell if we can reliably do it. If we can't make it reliable I think we should not do it at all.\n\n\nIt looks like we can sort by int/long/float/double pulled from DV,\nbut not by terms? This is fine for landing... but I think we\nshould open a post-landing issue to also make FieldComparators for\nthe Terms cases?\n\nYeah true. I didn't add a FieldComparator for bytes yet. I think this is post landing!\n\n Should we rename oal.index.values.Type -> .ValueType? Just\nbecause... it looks so generic when its imported & used as \"Type\"\nsomewhere?\n\nagreed. I also think we should rename Source but I don't have a good name yet. Any idea?\n\n Since we dynamically reserve a value to mean \"unset\", does that\nmean there are some datasets we cannot index? Or... do we tap\ninto the unused bit of a long, ie the sentinel value can be\nnegative? But if the data set spans Long.MIN_VALUE to\nLong.MAX_VALUE, what do we do...?\n\nAgain, tricky! The quick answer is yes, but we can't do that anyway since I have not normalize the range to be 0 based since PackedInts doesn't allow negative values. so the range we can store is (2^63) -1. So essentially with the current impl we can store (2^63)-2 and the max value is Long#MAX_VALUE-1. Currently there is no assert for this which is needed I think but to get around this we need to have a different impl I think or do I miss something? \n\nI will make the changes once SVN is writeable again.\n ",
            "author": "Simon Willnauer",
            "id": "comment-13035234"
        },
        {
            "date": "2011-05-18T13:55:54+0000",
            "content": "FYI. I ran indexing benchmarks trunk vs. branch and they are super close together. its like 3 sec difference while branch was faster so its in the noise. I also indexed one docvalues field (floats) which was also about the same 2 sec. slower including merges etc. So we are on the save side that this feature does not influence indexing performance. I didn't expect anything else really since the only difference is a single condition in DocFieldProcessor. ",
            "author": "Simon Willnauer",
            "id": "comment-13035386"
        },
        {
            "date": "2011-05-19T12:59:44+0000",
            "content": "I found some problems with tracking the used bytes during indexing. The AtomicLong was passed only to BytesRefHash but not to the block Allocator. I moved the tracking direct block allocator from DWPT into ByteBlockPool and use it in each of the Bytes Writers now.\n\nI also made some minor cleanups here and there and added more try / finally around Closeables.\n\nI plan to commit soon since this is really work in progress.\n ",
            "author": "Simon Willnauer",
            "id": "comment-13036165"
        },
        {
            "date": "2011-05-19T16:37:08+0000",
            "content": "\nHow come codecID changed from String to int on the branch?\n\ndue to DocValues I need to compare the ID to certain fields to see for\nwhat field I stored and need to open docValues. I always had to parse\nthe given string which is kind of odd. I think its more natural to\nhave the same datatype on FieldInfo, SegmentCodecs and eventually in\nthe Codec#files() method. Making a string out of it is way simpler /\nless risky than parsing IMO.\n\nOK that sounds great.\n\n\nCan SortField somehow detect whether the needed field was stored in FC vs DV\n\nThis is tricky though. You can have a DV field that is indexed too so its hard to tell if we can reliably do it. If we can't make it reliable I think we should not do it at all.\n\nIt is tricky... but, eg, when someone does SortField(\"title\",\nSortField.STRING), which cache (DV or FC) should we populate?\n\n\nShould we rename oal.index.values.Type -> .ValueType?\n\nagreed. I also think we should rename Source but I don't have a good name yet. Any idea?\n\nValueSource?  (conflicts w/ FQs though) Though, maybe we can just\nrefer to it as DocValues.Source, then it's clear?\n\n\nSince we dynamically reserve a value to mean \"unset\", does that mean there are some datasets we cannot index?\n\nAgain, tricky! The quick answer is yes, but we can't do that anyway since I have not normalize the range to be 0 based since PackedInts doesn't allow negative values. so the range we can store is (2^63) -1. So essentially with the current impl we can store (2^63)-2 and the max value is Long#MAX_VALUE-1. Currently there is no assert for this which is needed I think but to get around this we need to have a different impl I think or do I miss something?\n\nOK, but I think if we make a \"straight longs\" impl (ie no packed ints at all) then we can handle all long values?  But in that case we'd require the app to pick a sentinel to mean \"unset\"? ",
            "author": "Michael McCandless",
            "id": "comment-13036284"
        },
        {
            "date": "2011-05-19T16:47:31+0000",
            "content": "ValueSource? (conflicts w/ FQs though) Though, maybe we can just refer to it as DocValues.Source, then it's clear?\n\nBoth ValueSource and DocValues have long been used by function queries. ",
            "author": "Yonik Seeley",
            "id": "comment-13036290"
        },
        {
            "date": "2011-05-20T12:32:08+0000",
            "content": "It is tricky... but, eg, when someone does SortField(\"title\", SortField.STRING), which cache (DV or FC) should we populate?\n\nI think we should have a specialized sort field eventually. FCSortField / DVSortField?\n\nBoth ValueSource and DocValues have long been used by function queries.\n\nSuggestions welcome - nothing is fixed yet so we should find non-conflicting names. Maybe we can call it o.a.l.index.columns.Columns and o.a.l.index.columns.ColumnsEnum / ColumnsArray (instead of source) \n\n\nOK, but I think if we make a \"straight longs\" impl (ie no packed ints at all) then we can handle all long values? But in that case we'd require the app to pick a sentinel to mean \"unset\"?\n\nyes, I will open an issue. ",
            "author": "Simon Willnauer",
            "id": "comment-13036798"
        },
        {
            "date": "2011-06-03T16:25:28+0000",
            "content": "Hey folks,\nwe are ready for the final review rounds here, I resolved the naming conflict by renaming DocValues to IndexDocValues, fixed all the outstanding documentation issues and added a fixed ints impl that automatically switches over to fixed int/long if packed ints can not handle the range of the values in a field.\n\nI am preparing a review patch now. ",
            "author": "Simon Willnauer",
            "id": "comment-13043446"
        },
        {
            "date": "2011-06-03T16:43:27+0000",
            "content": "here is a first patch for review. Any comments very much appreciated!\n\nI know its big but what can I say  ",
            "author": "Simon Willnauer",
            "id": "comment-13043565"
        },
        {
            "date": "2011-06-03T22:58:44+0000",
            "content": "here is a smaller version that doesn't contain all the solr svn attribute changes etc. ",
            "author": "Simon Willnauer",
            "id": "comment-13044112"
        },
        {
            "date": "2011-06-09T10:23:15+0000",
            "content": "I did another review here \u2013 I think it's ready to land on trunk!  Nice work Simon! ",
            "author": "Michael McCandless",
            "id": "comment-13046451"
        },
        {
            "date": "2011-06-09T11:19:51+0000",
            "content": "here is a changes entry for docvalues - comments welcome ",
            "author": "Simon Willnauer",
            "id": "comment-13046472"
        },
        {
            "date": "2011-06-09T11:21:09+0000",
            "content": "One small issue:\n\nThere seems to be a merge missing in file TestIndexSplitter, the changes in there are unrelated, so this reverts a commit on trunk for improving tests.\n\nThe problem with the README.txt is already fixed.\n\n...still digging ",
            "author": "Uwe Schindler",
            "id": "comment-13046473"
        },
        {
            "date": "2011-06-09T11:25:14+0000",
            "content": "There seems to be a merge missing in file TestIndexSplitter, the changes in there are unrelated, so this reverts a commit on trunk for improving tests.\nfixed revision 1133794\n\nthanks uwe! ",
            "author": "Simon Willnauer",
            "id": "comment-13046474"
        },
        {
            "date": "2011-06-09T12:32:00+0000",
            "content": "here is the latest diff for docvalues I will now reintegrate the branch and post diffs later. ",
            "author": "Simon Willnauer",
            "id": "comment-13046506"
        },
        {
            "date": "2011-06-09T13:15:55+0000",
            "content": "Patch that reflects the last changes to sync with trunk after I ran svn merge -reintegrate \nThe reintegrated branch looks good, no unchanged additions etc. \n\nI think we are ready to land this on trunk... I will wait a day or two if somebody has objections. \n\nhere is my +1 to commit ",
            "author": "Simon Willnauer",
            "id": "comment-13046524"
        },
        {
            "date": "2011-06-09T13:38:26+0000",
            "content": "+1   This looks great.  \n\nTo avoid more svn work, I think committing soon is better then later. ",
            "author": "Ryan McKinley",
            "id": "comment-13046537"
        },
        {
            "date": "2011-06-10T13:21:36+0000",
            "content": "Reintegrated, Tested, Committed to trunk in revision  1134311\n\nthanks guys, its in eventually! ",
            "author": "Simon Willnauer",
            "id": "comment-13047175"
        },
        {
            "date": "2012-06-05T12:10:42+0000",
            "content": "Hi, Simon. Can doc values be optional? I am looking into org.apache.lucene.codecs.DocValuesConsumer#merge and see that the logic assumes that for every docId we have a existing value. Or we use the default value instead?    ",
            "author": "Aliaksandr Zhuhrou",
            "id": "comment-13289361"
        },
        {
            "date": "2012-06-05T13:28:32+0000",
            "content": "Hi, Simon. Can doc values be optional? I am looking into org.apache.lucene.codecs.DocValuesConsumer#merge and see that the logic assumes that for every docId we have a existing value. Or we use the default value instead?\n\nhey, DocValues are dense and assume a value for each document. Yet, if you don't enable DocValues on a fields its not stored so you only store it for certain fields. If you have just a small set of repeated values DocValues can store them efficiently and dedupliate if you are concerned about that.\n\nin general you should rather ask these kind of questions on the main dev mailing list.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13289401"
        },
        {
            "date": "2012-06-05T19:52:13+0000",
            "content": "Thank you. The thing that make me ask this question is that in the org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl.FixedBytesWriterBase#add we have logic that handles cases when => (lastDocID+1 < docID) so I assumed that docId may have gap greater than 1.\n\n\"in general you should rather ask these kind of questions on the main dev mailing list.\"\nSure.  ",
            "author": "Aliaksandr Zhuhrou",
            "id": "comment-13289667"
        }
    ]
}