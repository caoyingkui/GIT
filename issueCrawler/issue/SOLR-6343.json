{
    "id": "SOLR-6343",
    "title": "add a new end point /update/json/txt to index json for full text search",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I should be able to just put in any random json to an index to the end point /json/txt and all the terms can just get indexed to the default search field. There should be a way to store the entire JSON as well by adding an extra param target=fieldName and it can store the whole payload to that field",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-14090873",
            "date": "2014-08-08T15:28:43+0000",
            "content": "maybe /update/text instead?  If the goal is to pull text out and ignore structure, the input could be XML, or JSON, or whatever. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14091214",
            "date": "2014-08-08T19:56:35+0000",
            "content": "That is not true. It is content sensitive. We plan to index only the field values and not names. it would work differently for xml or json or CSV "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14091224",
            "date": "2014-08-08T20:06:08+0000",
            "content": "I'm confused - if it's \"any random json\", then there won't necessarily be field names.  \n\nAre you saying that \"raw\" means to ignore all \"object\" keys and only index \"object\" values?  What about other structures/types? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14091231",
            "date": "2014-08-08T20:12:30+0000",
            "content": "Are you saying that \"raw\" means to ignore all \"object\" keys and only index \"object\" values? What about other structures/types?\n\nyes. There is nothing else in JSON other than keys and values.  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14091275",
            "date": "2014-08-08T20:46:21+0000",
            "content": "There is nothing else in JSON other than keys and values.\n\n... arrays, numbers, booleans, and nulls?\n\nDo you plan on ignoring all keys in all nested arrays/objects? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14091281",
            "date": "2014-08-08T20:50:06+0000",
            "content": "... arrays, numbers, booleans, and nulls?\n\narrays will in turn have some of the primitives inside them. yes , we can index numbers and booleans (nulls  can be omitted, they are not real values)\n\n\nDo you plan on ignoring all keys in all nested arrays/objects?\nyes "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14091296",
            "date": "2014-08-08T21:00:00+0000",
            "content": "\nDo you plan on ignoring all keys in all nested arrays/objects?\nyes\n\nI suspect this may be problematic for some structures, e.g.:\n\n\n{ \"John Q. Public\": { \"phone\": \"XXX-XXX-XXXX\", \"location\": \"...\", ... },\n \"Jane S. Private\": { \"phone\": ... },\n...\n}\n\n\n\nThose names are keys, and would not be indexed according to your plan.\n\nMaybe you want to ignore keys because they can be repeated many times, like \"phone\" above?  (if that's not the reason why, then: why?)  If so, an alternative to ignoring keys might be to only index each unique key once. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14091704",
            "date": "2014-08-09T08:44:52+0000",
            "content": "If this is the requirement why can't we index this as plain text ? it is already supported "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14110025",
            "date": "2014-08-26T00:08:27+0000",
            "content": "I'll just piggyback on the df param for the default field and just commit this "
        }
    ]
}