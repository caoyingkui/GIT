{
    "id": "LUCENE-3153",
    "title": "Adding field w/ norms should fail if same field was added w/o norms already",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "A spinoff from LUCENE-3146. Consider the following two scenarios, according to how 4.0 currently works:\n\n\n\tField \"a\" is added w/ norms. Sometime later field \"a\" is added to a document w/o norms \u2013 norms are disabled for field \"a\", for all docs.\n\tField \"a\" is added w/o norms - norms are disabled for field \"a\". Sometime later field \"a\" is added to a document w/ norms \u2013 app thinks norms were added, while in fact they are dropped.\n\n\n\nThis is a bug and case #2 should fail on add/updateDocument - app should know norms were not added. While case #1 isn't great either, it's the only way an app can choose to disable norms for field \"a\", after instances of it already contain norms, so we should support that scenario.\n\nIn order to detect that early, we should track norms info in .fnx, as Mike describes at LUCENE-3146. Since this changes the index format, we should also update the \"file format\" page after we do it.\n\nNot sure what's the deal w/ 3.x indexes that are read by 4.0 code. Initially they won't have .fnx file, so no central norms information exist to detect the cases I've described above. Over time, as segments are merged, .fnx will include information from more and more segments, but there's always a chance few segments will still contain the norms for field \"a\". I'm not very familiar w/ that part of the code, but I think that:\n\n\n\tIf .fnx says \"no norms for field a\", the we ignore any norms information that may or may not exist in segments.\n\tIf .fnx says \"norms for field a\", then we need to make up some norms values for (old) segments w/ no norms? We need to make up values during segment merge and search?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-31T04:05:16+0000",
            "content": "Can this be checked before any commit (/flush)?\n\nAssume 10 docs were added without norms to a fresh index, now, without a commit or even a flush, a document is added with norms. Is the info required for checking the \"configuration\" for that field available at that time?\n\nIf it is not, this is still just a best effort check. ",
            "author": "Doron Cohen",
            "id": "comment-13041403"
        },
        {
            "date": "2011-05-31T06:01:00+0000",
            "content": "The difference between the two is that on add/UpdateDocument, we can fail fast. Upon commit, it's a failure that happens too late.\n\nSo I'm not at all convinced now that we should fail on this. Really, apps shouldn't be fiddling w/ norms, at least the apps I know of always index a field the same way. I don't know how common it is for apps to flip the norms bit, and clearly they can only do it one way. So maybe what we should be doing is:\n\n\n\tConsolidate norms info in .fnx \u2013 that's a good idea irregardless of the issue.\n\tHave javadocs sort out any confusion \u2013 we don't fail add/updateDoc attempts, just follow javadocs semantics\n\tProvide API for apps to disable norms for a field, since that practically the only direction we want to allow a/ the aforementioned changed.\n\n\n\nHmm ... another scenario hit me as I wrote the above lines:\n\n\tApp adds a field w/o norms.\n\tApp deletes the document w/ the field\n\tApp adds a field w/ norms \u2013 now what? norms are marked disabled for that field, but the only document that caused that is deleted.\n\n\n\ncommit() can be called in between and several documents can be added w/ and w/o norms \u2013 point is, this just gets complicated. This is another reason IMO to let apps manage norms and trust that they don't do fiddle w/ norms. The 'disableNorms' API may still be useful for an app that does not fiddle w/ norms, but decides it does not need norms for a field anymore. ",
            "author": "Shai Erera",
            "id": "comment-13041448"
        },
        {
            "date": "2011-05-31T07:02:32+0000",
            "content": "I was not clear enough.\n\nI meant that when deciding on consistency of requested NORMS state, if relying only on committed data, then the handling of add/update requests is in a best effort manner, while the handling at commit is complete.\n\nSo, for this example:\n\n\n\tIndex does not contain field F\n\tdoc1 is added with F set to NO NORMS\n\tdoc2 is added with F set to WITH NORMS\n\n\n\nI was not sure about the ability to tell that F in doc2 is inconsistent, because of relying on committed data, and, perhaps, especially with DWPT.\n\nAt commit, it is def possible to check this.\n\nSimilarly this scenario has same problem:\n\n\n\tIndex contains (committed) field F WITH NORMS\n\tdoc1 is added with F set to NO NORMS\n\tdoc2 is added with F set to WITH NORMS\n\n\n\nAgain, F in doc2, while consistent with F as committed in the index, is inconsistent with previously added F in doc1.\n\nIn this situation, throwing the exception due to inconsistencies might have to be late in some scenarios (at commit) and hence unacceptable IMO. At the least, such a behavior should be specifically requested by application, e.g. by setting a STRICT_NORMS mode or something like that in iwcfg. \n\nI am not convinced going that far is justified. ",
            "author": "Doron Cohen",
            "id": "comment-13041461"
        },
        {
            "date": "2011-05-31T14:56:32+0000",
            "content": "This is quickly getting scary hairy \n\nMaybe we should not move \"omits norms\" bit into fnx and continue leaving the checking as \"best effort\"? ",
            "author": "Michael McCandless",
            "id": "comment-13041608"
        },
        {
            "date": "2011-05-31T15:02:29+0000",
            "content": "Maybe we should not move \"omits norms\" bit into fnx and continue leaving the checking as \"best effort\"?\nthe .fnx file is the way to go here. We can even move hasProx there too eventually.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13041611"
        },
        {
            "date": "2012-07-11T23:03:45+0000",
            "content": "bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment ",
            "author": "Hoss Man",
            "id": "comment-13412302"
        },
        {
            "date": "2012-08-07T03:41:31+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429717"
        },
        {
            "date": "2013-07-23T18:44:21+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716924"
        },
        {
            "date": "2014-04-16T12:54:23+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970738"
        }
    ]
}