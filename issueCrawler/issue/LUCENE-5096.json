{
    "id": "LUCENE-5096",
    "title": "WhitespaceTokenizer supports Java whitespace, should also support Unicode whitespace",
    "details": {
        "components": [
            "modules/analysis"
        ],
        "fix_versions": [],
        "affect_versions": "4.3.1",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "The whitespace tokenizer supports only Java whitespace as defined in http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)\n\nA useful improvement would be to support also Unicode whitespace as defined in the Unicode property list http://www.unicode.org/Public/UCD/latest/ucd/PropList.txt",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-08T00:11:41+0000",
            "content": "\nThe whitespace tokenizer supports only Java whitespace as defined in http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)\n\nNot exactly: it uses isWhitespace(int)\n\n\nA useful improvement would be to support also Unicode whitespace as defined in the Unicode property list http://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\nThere are only 4 codepoints listed in there that are not java whitespace:\nU+0085\nU+00A0\nU+2007\nU+202F\n\nbreaking on the last 3 would violate the intentions of isWhitespace (\"but is not also a non-breaking space ('\\u00A0', '\\u2007', '\\u202F'). \")\nU+0085 is not a whitespace character (despite having this strange White_Space property, its category is a control character).\n\ni personally think we are doing the right thing...\n ",
            "author": "Robert Muir",
            "id": "comment-13701706"
        },
        {
            "date": "2013-07-08T07:32:10+0000",
            "content": "Hi,\nLucene is flexible enough to make this configureable. Just subclass CharTokenizer and provide your own list of \"whitespace\".\n\nI had several people that wanted to use a WhitespaceTokenizer where also things like \"-\" are treated as whitespace, so this was the way to go: A fast approach for many tokenchars is to make it flexible is to use a java.util.BitSet, mark all chars that are \"whitespace\" and then query in isTokenChar(int) the bitset. Alternatively use a chain of ifs.\n\nAn alternative way (if you are on solr) is to inject a CharFilter before the tokenizer, that maps any \"special\" whitespace to one of the standard ones WhitespaceTokenizer detects. ",
            "author": "Uwe Schindler",
            "id": "comment-13701843"
        }
    ]
}