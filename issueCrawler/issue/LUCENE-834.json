{
    "id": "LUCENE-834",
    "title": "Payload Queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [
            "2.2"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Now that payloads have been implemented, it will be good to make them searchable via one or more Query mechanisms.  See http://wiki.apache.org/lucene-java/Payload_Planning for some background information and https://issues.apache.org/jira/browse/LUCENE-755 for the issue that started it all.",
    "attachments": {
        "btq.fix.patch": "https://issues.apache.org/jira/secure/attachment/12355983/btq.fix.patch",
        "boosting.term.query.patch": "https://issues.apache.org/jira/secure/attachment/12353577/boosting.term.query.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-03-17T21:41:23+0000",
            "content": "First draft at a BoostingTermQuery, which is based on the SpanTermQuery and can be used for boosting the score of a term based on what is in the payload (for things like weighting terms higher according to their font size or part of speech).  \n\nA couple of classes that were previously package level are now public and have been marked as Public and for derivational purposes only.\n\n\nSee the CHANGES.xml for some more details.\n\nI believe all tests still pass. ",
            "author": "Grant Ingersoll",
            "id": "comment-12481892"
        },
        {
            "date": "2007-03-17T23:01:56+0000",
            "content": "I should add, one open question is how big the array in the BoostingSpanScorer should be preallocated to.  I set it to 256, but I would imagine it could be smaller???? but I'm not sure.  Probably should be configurable, but I didn't go that route.  I would think, for practical purposes, that payloads should be kept small for the most part, otherwise performance will most likely suffer.  What do others think?  Have you seen papers/applications where the engine is storing large amounts of data on a per term basis?\n\nI could see where it might be useful to write VInts, etc. to the payload.  Perhaps a refactoring of some of the writing/reading methods to allow for usage of them may be useful.  Just thinking out loud... ",
            "author": "Grant Ingersoll",
            "id": "comment-12481896"
        },
        {
            "date": "2007-03-28T12:59:04+0000",
            "content": "I committed this patch, plus added in some more documentation.  Everything is still marked experimental.\n\nSVN revision: 523302. ",
            "author": "Grant Ingersoll",
            "id": "comment-12484859"
        },
        {
            "date": "2007-04-17T19:31:44+0000",
            "content": "Hi Grant,\n\ncool that you started implementing queries that use of payloads! I have a question about this one: BoostingTermQuery only takes the payload of the first term position into account for scoring. Could you explain why you implemented it this way? Shouldn't we rather compute the average of the payload values of all positions? ",
            "author": "Michael Busch",
            "id": "comment-12489519"
        },
        {
            "date": "2007-04-17T19:47:39+0000",
            "content": "Uh, because I always forget about multiple terms per position?    Mea culpa.\n\nAverage sounds good, or, would it be better to deliver all the payloads at a given term and let the implementation decide? ",
            "author": "Grant Ingersoll",
            "id": "comment-12489523"
        },
        {
            "date": "2007-04-17T20:20:10+0000",
            "content": "I think averaging should be the default, but you are right, it would be nice if it was possible to alter this, maybe via subclassing?. I wouldn't recommend to gather all payloads and send them to Similarity. Memory consumption would be proportional to posting list size then. ",
            "author": "Michael Busch",
            "id": "comment-12489534"
        },
        {
            "date": "2007-04-17T21:06:54+0000",
            "content": "Would it be so bad if memory consumption was proportional to posting list size?  True, special consideration might be necessary for large documents if payloads were large, and if you have any Query subclasses that rewrite themselves to a zillion subqueries, each of which maintains its own TermPositions subclass instance, that could pose difficulties. What are some other problematic scenarios? ",
            "author": "Marvin Humphrey",
            "id": "comment-12489540"
        },
        {
            "date": "2007-04-17T22:12:29+0000",
            "content": "Yes, I was mainly thinking about large documents. I think in general memory consumption during search should depend on query complexity, not on the actual index.\nBesides, I don't see much benefits in gathering all payloads up front and processing them thereafter (maybe I overlook some?). What about having a method in BoostingTermScorer like:\n\nprotected float calculateTermBoost(TermPostions tp);\n\nwhich implements averaging per default but can be overwritten by subclasses? An optimized implementation might e. g. consider just to read the first x% position payloads for large docs and estimate the boost for performance reasons. ",
            "author": "Michael Busch",
            "id": "comment-12489562"
        },
        {
            "date": "2007-04-17T22:48:29+0000",
            "content": "Averaging is how I've got this implemented by default in KS.  However, all positions and boosts get read in at once.  TermDocs/TermPositions has been replaced by PostingList, which goes doc by doc.  The type of Posting assigned to each field (MatchPosting, ScorePosting, RichPosting, eventually PayloadPosting) determines how much gets read in. (KS doesn't have any queries that rewrite(), so it's only large docs that are an issue.)\n\nI haven't yet worked out the mechanics of per-position boosts and phrase queries. ",
            "author": "Marvin Humphrey",
            "id": "comment-12489570"
        },
        {
            "date": "2007-04-21T16:54:58+0000",
            "content": "Fixed the issue with only loading one payload per term and added unit test for it.  The unit test uses the multiField field that contains a repeat of each set of terms per document. \n\nUpdated the docs on the Similarity to indicate what offset and length are used for.   ",
            "author": "Grant Ingersoll",
            "id": "comment-12490633"
        },
        {
            "date": "2007-04-24T18:13:11+0000",
            "content": "I applied and committed this patch ",
            "author": "Grant Ingersoll",
            "id": "comment-12491386"
        }
    ]
}