{
    "id": "SOLR-10717",
    "title": "Learning to rank: a query will fail if the feature vector is requested without providing external feature information parameters",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.5.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In ltr some features can depend on External Feature Informations that have to be provided at query time. If we query solr only to retrieve the feature vectors for the documents (without doing reranking), and without providing all the external feature informations used in the feature store the query will fail.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-19T16:55:39+0000",
            "content": "I can see different ways to fix this:\n\n1) Return only the features for which it was possible to compute the value (ignore, or set to NaN features for which we had errors)\n2) Return a proper response error\n3) Add a parameter (ignoreEfiErrors) that the user can set to true if s/he wants 1) otherwise 2). \n\nChristine Poerschke, Alessandro Benedetti, Michael Nilsson comments?  ",
            "author": "Diego Ceccarelli",
            "id": "comment-16017651"
        },
        {
            "date": "2017-05-19T17:44:46+0000",
            "content": "2) Return a proper response error\n\nThis would seem the most logical to me, assuming that any actual re-ranking also fails if required External Feature Info is missing.\n\n1) Return only the features for which it was possible to compute the value (ignore, or set to NaN features for which we had errors)\n\nThis could be a possibility too, though I'd be concerned about\n\n\tincreased complexity for the consumer of the feature vector since we'd be turning a number into a possibly-missing-number\n\tfeature extraction vs. feature use consistency i.e. if the feature vector contains possibly-missing feature values then to be consistent would the models also need to support possibly-missing feature values presumably\n\n\n\n3) Add a parameter (ignoreEfiErrors) that the user can set to true if s/he wants 1) otherwise 2).\nThis would be my least favourite choice, not so much in an 'ignoring errors is bad' philosophical sense but mainly because ignoreEfiErrors would be another parameter to be decided upon by the user.\n\nHere's a fourth option:\n4) The ValueFeature class already takes a required parameter. Perhaps an alternative to ignoreEfiErrors could be to add a requireEfi parameter (defaulted to true) to features that use External Feature Info. ",
            "author": "Christine Poerschke",
            "id": "comment-16017738"
        },
        {
            "date": "2017-05-22T15:08:15+0000",
            "content": "\nwe'd be turning a number into a possibly-missing-number\n\nThis is actually an interesting point. And we need to go back to the training library ( and related algorithms) to make a comprehensive analysis.\nAt the moment, training a model with a sparse training vector ( where some feature values is missing in some feature vector) will vary from implementation to implementation.\nIf we introduce a \"Nan missing feature value\", I agree we would need to consider this in the models ( and consequentially the training algorithms must manage missing values coherently to be compatible).\nTo be consistent we should investigate how many training algorithms support missing values and how this is rendered in the models.\nThis could be a rough path, that of course could be simplified to consider Nan as zeros ( which will be incorrect but it is often the default for some libraries)\n\n\n3) Add a parameter (ignoreEfiErrors) that the user can set to true if s/he wants 1) otherwise 2).\n\nI agree we will add a little bit of configuration complexity, but probably we will gain some flexibility as well.\nIf i remember well we already allow users to set a default value for a value feature that takes an EFI in input.\nWe could extend this to allow the admin to configure a default also for other kinds of features.\nSo in case the EFI is missing the default value is assigned.\nI think having a requireEfi configuration ( default to true) will imply :\n\nrequireEfi = true ( default)\n1) take the EFI in input\n2) if EFI is missing but default is defined, let's use the default\n3) f EFI is missing and default is missing, return an error\n\nrequireEfi = false\n1) take the EFI in input\n2) if EFI is missing but default is defined, let's use the default\n3) f EFI is missing and default is missing, assign 0 as a feature value ( or NaN if we manage to have a full stack training-model supporting NaN) ",
            "author": "Alessandro Benedetti",
            "id": "comment-16019678"
        }
    ]
}