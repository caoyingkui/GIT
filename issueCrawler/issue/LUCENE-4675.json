{
    "id": "LUCENE-4675",
    "title": "remove *Ref.copy/append/grow",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "These methods are dangerous:\n\nIn general if we want a StringBuilder type class, then it should own the array, and it can freely do allocation stuff etc. this is the only way to make it safe.\n\nOtherwise if we want a ByteBuffer type class, then its reference should be immutable (the byte[]/offset/length should be final), and it should not have allocation stuff.\n\nBytesRef is none of these, its like a C pointer. Unfortunately lucene puts these unsafe, dangerous, trappy APIs directly in front of the user.\n\nWhat happens if i have a bug in my application and it accidentally mucks with the term bytes returned by TermsEnum or the payloads from DocsAndPositionsEnum? Will this get merged into a corrupt index?\n\nI think as a start we should remove these copy/append/grow to minimize this closer to a ref class (e.g. more like java.lang.ref and less like stringbuilder). Nobody needs this stuff on bytesref, they can already operate on the bytes directly.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-10T13:07:53+0000",
            "content": "I kinda like grow(). Will I be able to grow() the buffer from the outside if you remove it? I.e. will the byte[] not be final? ",
            "author": "Shai Erera",
            "id": "comment-13549589"
        },
        {
            "date": "2013-01-10T13:10:31+0000",
            "content": "I'm proposing removing these 3 methods from BytesRef itself, thats all.\n\nThe guy from the outside knows what he can do: he knows if the bytes actually point to a slice of a PagedBytes\n(grow is actually senseless here!), or just a simple byte[], or whatever. He doesn't need BytesRef itself to do these things.\n\nSo he can then change the ref to point at a different slice, or different byte[] alltogether, or whatever. ",
            "author": "Robert Muir",
            "id": "comment-13549590"
        },
        {
            "date": "2013-01-10T13:18:23+0000",
            "content": "ok. While you're at it, what do you think about adding an 'upto' member for easier iteration on the bytes/ints/chars? (see my comment on LUCENE-4674) ",
            "author": "Shai Erera",
            "id": "comment-13549598"
        },
        {
            "date": "2013-01-10T13:22:57+0000",
            "content": "i dont think we need any additional members in this thing. what more does it need other than byte[], offset, length?!\n\ni want to remove the extraneous stuff. if you want to make an iterator, you can separately make your own BytesRefIterator class? ",
            "author": "Robert Muir",
            "id": "comment-13549611"
        },
        {
            "date": "2013-01-10T13:32:41+0000",
            "content": "you can separately make your own BytesRefIterator class\n\nI can. I wanted to avoid additional object allocations, but such an Iterator class can have a reset(BytesRef) method which will update pos and upto members accordingly. I was thinking that an 'upto' index might be useful for others. For my purposes (see LUCENE-4620) I just use bytes.offset as 'pos' and compute an 'upto' and passes it along. I will think about the Iterator class though, perhaps it's not a bad idea. And maybe *Ref can have an iterator() method which returns the proper one ... or not. ",
            "author": "Shai Erera",
            "id": "comment-13549632"
        },
        {
            "date": "2013-01-10T13:40:28+0000",
            "content": "I dont think we should add more functionality to these *Ref classes: they have too many traps and bugs already.\n\nLess is more here. ",
            "author": "Robert Muir",
            "id": "comment-13549637"
        },
        {
            "date": "2013-01-10T14:06:37+0000",
            "content": "Strong +1 to make BytesRef a byte[] reference only. BytesRef is unfortunately a user-facing class in Lucene 4.x, so we have to look into this. I was also planning to fix this before 4.0, but we had no time. This was one of the last classes, Robert and I did not fix in the final cleanup before release, which is a pity. ",
            "author": "Uwe Schindler",
            "id": "comment-13549654"
        }
    ]
}