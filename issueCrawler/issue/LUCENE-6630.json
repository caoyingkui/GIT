{
    "id": "LUCENE-6630",
    "title": "Further improve memory of FieldInfos",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "In LUCENE-6325, FieldInfos were improved to use an array except in very sparse cases. In the sparse cases, a TreeMap is still used. However, even in the sparse case, we can still use an array, and then use binary search. The perf will be equivalent, but memory use should be much less.",
    "attachments": {
        "LUCENE-6630.patch": "https://issues.apache.org/jira/secure/attachment/12742404/LUCENE-6630.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14604796",
            "author": "Ryan Ernst",
            "date": "2015-06-28T17:31:55+0000",
            "content": "Patch. "
        },
        {
            "id": "comment-14604810",
            "author": "Michael McCandless",
            "date": "2015-06-28T18:00:52+0000",
            "content": "+1, this looks nice!\n\nMaybe add a comment above {{ return o1.number - o2.number;}} that this is safe (can't overflow int) because number is non-negative?\n\nWe can increase the 1/16th heuristic now?  We picked that because that was the cutover to minimize RAM, but with this change it suddenly becomes a time/space tradeoff because the sparse representation is now always <= the non-sparse one.  Maybe we should always just be sparse, unless it's complete dense? "
        },
        {
            "id": "comment-14604864",
            "author": "Robert Muir",
            "date": "2015-06-28T19:57:34+0000",
            "content": "\nMaybe we should always just be sparse, unless it's complete dense?\n\n-1\n\nDon't even think about it.\n\nWhen I said I wouldn't let abuse cases hurt real use cases, did you think I was joking? I'm not going to let real users have shitty performance here.  "
        },
        {
            "id": "comment-14604884",
            "author": "Robert Muir",
            "date": "2015-06-28T20:15:42+0000",
            "content": "Also, the patch should:\n\n\tJust use Integer's compare method to sort the array, no custom comparator needed.\n\tUse arrays.binarysearch, not a handcoded binarysearch with overflow bugs.\n\n\n\nUse of the ternary operator is confusing here. Can the logic be simplified? "
        }
    ]
}