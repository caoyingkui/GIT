{
    "id": "LUCENE-8220",
    "title": "GeoPolygon factory still shows problems with coplanar points",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.4",
            "master (8.0)"
        ]
    },
    "description": "The attached patch contains two polygons that still shows problems with co-planar points. To better explain the issue I attached some images:\n\n1) concave.jpg:\u00a0 This is the polygon we want to build. Note that we want to build the concave part, therefore the blue part is actually not part of the shape and the white part is the area cover by the shape.\n\n2) concaveWithTiling.jpg: The algorithm of the polygon factory tries to tile the polygon using convex polygons. In our case it creates the three colored polygons on the image. What it remains is a concave polygon.\n\nThe problem with this polygon is that the right edge of the concave polygon contains co-planar points. These points cannot be merged into a single plane because they have different properties (internal edges or shape edges).\n\nBecause GeoConvexPolygon and GeoConcavePolygon cannot handle polygons with co-planar points, the polygon cannot be built.\n\nKarl Wright, Is it possible to make this polygons support such an extreme case?",
    "attachments": {
        "factory.patch": "https://issues.apache.org/jira/secure/attachment/12916070/factory.patch",
        "concaveWithTiling.jpg": "https://issues.apache.org/jira/secure/attachment/12915918/concaveWithTiling.jpg",
        "coplanarity-test2.patch": "https://issues.apache.org/jira/secure/attachment/12916136/coplanarity-test2.patch",
        "concave.jpg": "https://issues.apache.org/jira/secure/attachment/12915917/concave.jpg",
        "coplanarity-test.patch": "https://issues.apache.org/jira/secure/attachment/12915916/coplanarity-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16411587",
            "date": "2018-03-23T15:41:57+0000",
            "content": "I will look at this tomorrow. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16411989",
            "date": "2018-03-23T20:13:57+0000",
            "content": "It should be easy to fix this.  Instead of putting the logic in the concave polygon constructor, it should go in the factory, because (a) it's already there, and (b) it only happens for the concave polygon at the end, since there are N convex poly's and 1 concave one.  I'll implement something early tomorrow, when I'm fresh. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412459",
            "date": "2018-03-24T06:50:16+0000",
            "content": "Note that this can happen for convex polygons as well. There is a failing test for convex polygons in the patch with the same issue.\n\nThe co-planarity is added when the edges of a convex tile are replaced in the edge buffer with a return edge. Because the return edge is internal and the edges in the buffer are most likely edges of the shape, they cannot be merged without losing information.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16412462",
            "date": "2018-03-24T06:56:18+0000",
            "content": "Ok, this is the actual test case that is failing:\n\n\n  @Test\n  public void testCoplanarityTileConvex() throws Exception {\n    //POLYGON((24.39398 65.77519,24.3941 65.77498,24.394024 65.77497,24.393976 65.77495,24.393963 65.77493,24.394068 65.774925,24.394156 65.77495,24.394201 65.77495,24.394234 65.77496,24.394266 65.77498,24.394318 65.77498,24.39434 65.774956,24.394377 65.77495,24.394451 65.77494,24.394476 65.77495,24.394457 65.77498,24.39398 65.77519))\"\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77519), Geo3DUtil.fromDegrees(24.39398)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77498), Geo3DUtil.fromDegrees(24.3941)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77497), Geo3DUtil.fromDegrees(24.394024)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77495), Geo3DUtil.fromDegrees(24.393976)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77493), Geo3DUtil.fromDegrees(24.393963)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.774925), Geo3DUtil.fromDegrees(24.394068)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77495), Geo3DUtil.fromDegrees(24.394156)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77495), Geo3DUtil.fromDegrees(24.394201)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77496), Geo3DUtil.fromDegrees(24.394234)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77498), Geo3DUtil.fromDegrees(24.394266)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77498), Geo3DUtil.fromDegrees(24.394318)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.774956), Geo3DUtil.fromDegrees(24.39434)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77495), Geo3DUtil.fromDegrees(24.394377)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77494), Geo3DUtil.fromDegrees(24.394451)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77495), Geo3DUtil.fromDegrees(24.394476)));\n    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(65.77498), Geo3DUtil.fromDegrees(24.394457)));\n    GeoCompositePolygon polygon = (GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    assertTrue(polygon != null);\n  }\n\n\n\nIt's trying, in fact, to tile the whole world EXCEPT for a small piece.  It slices some pieces off but then it's left with a piece that still spans, in at least one direction, more than 180 degrees.  That means it cannot use GeoConcavePolygon.  So instead, it tries to break it down further by slicing across, and even comes up with a way to do that, but the slice it identifies turns out to have colinear points.\n\nSo it's not the GeoConcavePolygon invocation where this can happen.  But, theoretically, it can happen any time we drop a chord across the polygon.\n\nThe easy solution is to change the algorithm so that whenever it introduces such a chord, it checks to see whether it's colinear with the next point in either direction.  If it is, it must do a further split, right there, so that there are two pieces built, rather than one, and thus colinearity is not possible.  Looking into that now. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412464",
            "date": "2018-03-24T07:25:04+0000",
            "content": "Looking elsewhere, I find that the code for colinearity has been changed, and I don't fully understand it anymore.  But since that's not a current problem, and since that code seems to be going to great lengths to find chords that aren't colinear, I'm going to concentrate on the failure case.  Once that's understood, we may want to revisit the other parts of the code to see if there's a more general solution.\n\nThe code that fails is this:\n\n\n          // thePoint is on the wrong side of the complementary plane.  That means we cannot build a concave polygon, because the complement would not\n          // be a legal convex polygon.\n          // But we can take advantage of the fact that the distance between the edge and thePoint is less than 180 degrees, and so we can split the\n          // would-be concave polygon into three segments.  The first segment includes the edge and thePoint, and uses the sense of the edge to determine the sense\n          // of the polygon.\n          \n          // This should be the only problematic part of the polygon.\n          // We know that thePoint is on the \"wrong\" side of the edge -- that is, it's on the side that the\n          // edge is pointing at.\n          final List<GeoPoint> thirdPartPoints = new ArrayList<>(3);\n          final BitSet thirdPartInternal = new BitSet();\n          thirdPartPoints.add(checkEdge.startPoint);\n          thirdPartInternal.set(0, checkEdge.isInternal);\n          thirdPartPoints.add(checkEdge.endPoint);\n          thirdPartInternal.set(1, true);\n          thirdPartPoints.add(thePoint);\n          assert checkEdge.plane.isWithin(thePoint) : \"Point was on wrong side of complementary plane, so must be on the right side of the non-complementary plane!\";\n          final GeoPolygon convexPart = new GeoConvexPolygon(planetModel, thirdPartPoints, holes, thirdPartInternal, true);\n...\n\n\n\nIt is building a polygon with only three points, and the three points are coplanar.  So the polygon obviously cannot be built.  In fact, the problem must be in the logic that leads to the decision to build it at all.\n\nThe simplest thing to do is not generate this triangle if it's coplanar, and just keep going.  That's easy to detect and trivial to code.  Things may blow up in the subsequent steps, however.  Trying this now. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412469",
            "date": "2018-03-24T07:34:45+0000",
            "content": "Indeed, suppressing the creation of that triangle leads to a further failure:\n\n\n   [junit4] ERROR   0.01s J1 | GeoPolygonTest.testCoplanarityTileConvex <<<\n   [junit4]    > Throwable #1: java.lang.IllegalArgumentException: Cannot determine sidedness because check point is on plane.\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.SidedPlane.<init>(SidedPlane.java:113)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory$EdgeBuffer.<init>(GeoPolygonFactory.java:1494)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.buildPolygonShape(GeoPolygonFactory.java:757)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.buildPolygonShape(GeoPolygonFactory.java:934)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.buildPolygonShape(GeoPolygonFactory.java:934)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.generateGeoPolygon(GeoPolygonFactory.java:379)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:171)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:96)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:50)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonTest.testCoplanarityTileConvex(GeoPolygonTest.java:1123)\n\n\n\nSo, basically, the logic upstream needs to change to perform the shape breakdown differently.  I'll have to think through how. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412476",
            "date": "2018-03-24T08:00:30+0000",
            "content": "I think we cannot avoid this colinearity. In the example provided it is clear there is no alternative on how the polygon can be tiled. The colinear points must be added.\n\nI think the definition of an edge can be changed. Currently it is a sided plane with a start and end point and an internal flag. It can be changed to a sided plane with two or more points with corresponding internal flags.\n\nWhen replacing edges we can add the new edge or add the point to an existing edge if colinear.\n\nBUT then you build convex and concave polygons with co-planar points\u00a0 where it breaks.\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16412545",
            "date": "2018-03-24T11:31:42+0000",
            "content": "Ignacio Vera, I disagree on the approach; I fear it would make the math in GeoConvexPolygon complex and unstable.\n\nIt is quite possible to avoid colinearity.  In fact, it's straightforward.  It's a question of detection, and of generating two polygons instead of one in some cases.\n\nAlso, FWIW, only one of the two newly added tests fails \u2013 the other succeeds fine. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412583",
            "date": "2018-03-24T12:26:56+0000",
            "content": "I solved the tiling issue successfully, but then we wind up with the attempted construction of a concave polygon with all colinear points.  That's essentially saying that it wants to include either half of, or all of, the world \u2013 which in this case may make sense.  I have to analyze the situation more completely later today to see what it's trying to do.\n\nFor the record, the tiling fix is simple.  The code in question looks for edge sidedness violations that would preclude use of a GeoConcavePolygon.  It used to take the first such detection and generate a triangle and two other sections from that.  Now, it attempts to do that, but if it fails, it just continues looking for another violation.  Only if it finds violations and can't find a way to address them does it throw an IllegalArgumentException.  I believe this will always work because violations always come in pairs.  We'll see. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412642",
            "date": "2018-03-24T14:48:58+0000",
            "content": "I've augmented the output for this kind of failure to print the GeoConcavePolygon points attempted:\n\n\n   [junit4] ERROR   0.02s J2 | GeoPolygonTest.testCoplanarityTileConvex <<<\n   [junit4]    > Throwable #1: java.lang.IllegalArgumentException: Could not construct GeoConcavePolygon due to colinearity of points:  [lat=1.1479899664334199, lon=0.425760260307307([X=0.3736898659162658, Y=0.1694681499562862, Z=0.9119410234559455])] [lat=1.1479899664334199, lon=0.42576359388617835([X=0.37368930097874536, Y=0.169469395679986, Z=0.9119410234559455])] [lat=1.1479899664334199, lon=0.4257611678785181([X=0.37368971211169777, Y=0.16946848910638057, Z=0.9119410234559455])]\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeConcavePolygon(GeoPolygonFactory.java:1087)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.buildPolygonShape(GeoPolygonFactory.java:999)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.buildPolygonShape(GeoPolygonFactory.java:948)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.generateGeoPolygon(GeoPolygonFactory.java:379)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:171)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:96)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:50)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonTest.testCoplanarityTileConvex(GeoPolygonTest.java:1123)\n   [junit4]    > Caused by: java.lang.IllegalArgumentException: Polygon points are all coplanar\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoConcavePolygon.done(GeoConcavePolygon.java:221)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoConcavePolygon.<init>(GeoConcavePolygon.java:127)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeConcavePolygon(GeoPolygonFactory.java:1073)\n   [junit4]    >        ... 27 more\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412645",
            "date": "2018-03-24T14:57:21+0000",
            "content": "The points it is winding up with imply it's decided to include the whole world:\n\n\n   [lat=1.1479899664334199, lon=0.425760260307307([X=0.3736898659162658, Y=0.1694681499562862, Z=0.9119410234559455])] \n   [lat=1.1479899664334199, lon=0.42576359388617835([X=0.37368930097874536, Y=0.169469395679986, Z=0.9119410234559455])] \n   [lat=1.1479899664334199, lon=0.4257611678785181([X=0.37368971211169777, Y=0.16946848910638057, Z=0.9119410234559455])]\n\n\n\nIgnacio Vera, this is obviously incorrect.  It makes me wonder if the original polygon crosses itself?  Yes, I know you have a 2D graphic for it, but given the far northerly latitude, I doubt that the planar rendering is meaningful. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412648",
            "date": "2018-03-24T15:03:46+0000",
            "content": "Commit 086682bc335e2e7fd6c70e5a6be9117ac8c40581 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=086682b ]\n\nLUCENE-8220: Handle polygon tiling issues in a more robust way. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412649",
            "date": "2018-03-24T15:04:44+0000",
            "content": "Commit e88066ab7848d74d1da9d67f53fd5e3aff1a3412 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e88066a ]\n\nLUCENE-8220: Handle polygon tiling issues in a more robust way. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412650",
            "date": "2018-03-24T15:05:16+0000",
            "content": "Commit d5eb1088cd79fd915016c7ad9a7a6b3e53fc354c in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d5eb108 ]\n\nLUCENE-8220: Handle polygon tiling issues in a more robust way. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412652",
            "date": "2018-03-24T15:08:48+0000",
            "content": "Ignacio Vera I committed the changes I made, with the questionable test @Ignored.  There's commented-out logic in the class to determine if an intersecting polygon has been provided; I hope it still works. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412703",
            "date": "2018-03-24T17:44:59+0000",
            "content": "Attached my approach changing the definition of Edge class and replace method in edgeBuffer. The patch needs a bit of work as it ignores the co-planar points but the tiling is successful. It should not be difficult to divide into two (or more) polygons when there are co-planar points for convex polygons.\n\n\nThe big thingy here is with concave polygons as you cannot divide into two (or more)\u00a0 polygons when there are co-planar points.\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16412729",
            "date": "2018-03-24T18:40:00+0000",
            "content": "Ignacio Vera Was this second patch made against what is currently committed on master? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412735",
            "date": "2018-03-24T18:44:50+0000",
            "content": "Ignacio Vera, when I apply the patch and un-ignore the test, that test passes, but other tests fail, e.g.:\n\n\n   [junit4] Suite: org.apache.lucene.spatial3d.geom.RandomGeoPolygonTest\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=RandomGeoPolygonTest -Dtests.method=testCoplanarityTilePolygon -Dtests.seed=A69C6E2335E509EF -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=is-IS -Dtests.tim\nezone=Pacific/Galapagos -Dtests.asserts=true -Dtests.file.encoding=Cp1252\n   [junit4] FAILURE 0.15s J1 | RandomGeoPolygonTest.testCoplanarityTilePolygon <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([A69C6E2335E509EF:DF4889912003CEF6]:0)\n   [junit4]    >        at org.apache.lucene.spatial3d.geom.RandomGeoPolygonTest.testCoplanarityTilePolygon(RandomGeoPolygonTest.java:85)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {}, docValues:{}, maxPointsInLeafNode=1050, maxMBSortInHeap=7.671874176950007, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@580819b1\n), locale=is-IS, timezone=Pacific/Galapagos\n   [junit4]   2> NOTE: Windows 8.1 6.3 amd64/Oracle Corporation 1.8.0_45 (64-bit)/cpus=4,threads=1,free=119276696,total=128974848\n   [junit4]   2> NOTE: All tests run in this JVM: [RandomGeoPolygonTest]\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412739",
            "date": "2018-03-24T18:53:38+0000",
            "content": "It fails because it expects three tiles but only gets two because it ignores co-planar points.\n\nThe patch was intended to share my approach and see if it is worthy pursuing this path.\n\nThere is one step missing, when collecting points and internal edges for convex polygons we need to check if there are co-planar points, if so divide them into two (or more) polygons.\u00a0 Then we will get three tiles (correct answer) and test will pass.\n\nI don't know what to do in that case for concave polygons.\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16412819",
            "date": "2018-03-24T22:25:23+0000",
            "content": "Ignacio Vera, can you explain to me why the construction of the GeoConcavePolygon in the test case with this change no longer fails?  I'm having a hard time seeing why this approach fixes anything, frankly. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412923",
            "date": "2018-03-25T07:44:02+0000",
            "content": "Ignacio Vera, I now understand why the GeoConcavePolygon construction failed: my check for whether a usable tiling had been found or not was in the wrong place.  So that mystery is cleared up, and I'll commit new code right now to address that.  But the tiling does not complete still with the right change, because the only choices for edges to split the (non-concave) polygon all indeed yield effectively colinear edges in this example.  Indeed, I agree this is theoretically possible during the tiling process whenever a new edge is created.\n\nPolygons with very-close-together edge points that nevertheless cover significant area are susceptible to this issue.  In order for the tiling to work, edges that are created for tiling must be labeled \"internal\", and we must use exactly the same edge for both tiles that the edge is involved with.  It looks like your earlier patches achieve that by just making sure we don't pick a tiling that doesn't work.  Am I correct in this?\n\nI'm beginning to at least understand the philosophy behind keeping \"extended edges\" around.  I'm still unsure that has the potential to solve the general problem, though.\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412924",
            "date": "2018-03-25T07:46:34+0000",
            "content": "Commit d49ba5c333d06953b323ba18b133e706d9d06fc3 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d49ba5c ]\n\nLUCENE-8220: Refine how handle tiling coplanarities further. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412926",
            "date": "2018-03-25T07:47:35+0000",
            "content": "Commit fbeb3a4b682fdf290a3de4e865ce089f5657b4e8 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fbeb3a4 ]\n\nLUCENE-8220: Refine how handle tiling coplanarities further. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412927",
            "date": "2018-03-25T07:48:12+0000",
            "content": "Commit 87feabaee2fff063692ceb9a1e108c6e9e41b9d0 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=87feaba ]\n\nLUCENE-8220: Refine how handle tiling coplanarities further. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412929",
            "date": "2018-03-25T07:55:32+0000",
            "content": "The patch proves that problems arise when co-planar points are added into the edge buffer. The replace method of the edge buffer merges those situations into one single edge. The problem is that the merged edges can have different internal flags. In the patch the value for the merged edge is false if any of the edges is not internal.\n\nIn the concave case, the polygon can be built but it is not fully correct as the edge of one convex tile has been merged and it has wrong internal flag (right vertical edge in concaveWithtiling.jpg).\u00a0 This is a generic problem whenever edges are merged this way, that is the reason one of the test is failing now, because of a merged edge.\n\nWhen collecting points prior to build the final GeoConcavePolygon or GeoConvexPolygon, we can detect those situations and do something about it. In the convex case, further divide the edges, not sure in the concave case.\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16412932",
            "date": "2018-03-25T07:59:08+0000",
            "content": "Commit 9e5468adcd156f6ff2592d8607afd83f7303a860 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9e5468a ]\n\nLUCENE-8220: need a continue, not a break ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412933",
            "date": "2018-03-25T08:00:03+0000",
            "content": "Commit 67572cf6d3127df3e749019bfcdcef97c738c6b1 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=67572cf ]\n\nLUCENE-8220: need a continue, not a break ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412935",
            "date": "2018-03-25T08:00:39+0000",
            "content": "Commit 9bd84fccd6af3a1ecf586acebfa5c0dd8a33755e in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9bd84fc ]\n\nLUCENE-8220: need a continue, not a break ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412936",
            "date": "2018-03-25T08:14:36+0000",
            "content": "I think some of the communication disconnect we have been having is due to the fact that I'm thinking that tiling of GeoConvexPolygon and GeoConcavePolygon is really only applicable to polygons whose edges are fairly long to start with.  Polygons whose edge points are very close together is not the expected use case of this approach; that is what GeoComplexPolygon is for.\n\nThe problem you demonstrate can still occur in a larger-scale polygon, but only if there's a chance alignment between one edge and a point on the other side of the polygon.  My thinking, and the code I've committed is meant to deal with that specific failure case, and not the case where the tinyness of the polygon prevents all possible new edges from being created.  I still have no idea how to solve that problem.\n\nIt may be worth having the exception that is currently thrown recommend using GeoComplexPolygon instead.  Or, maybe the factory should automatically choose that representation if we see that situation arise. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412992",
            "date": "2018-03-25T11:41:35+0000",
            "content": "Commit 5e1d6f36f71b693096c687cd4753847c2a8c107c in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5e1d6f3 ]\n\nLUCENE-8220: Code cleanup in preparation for returning GeoComplexPolygon as an alternative instead of tiling. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412993",
            "date": "2018-03-25T11:42:29+0000",
            "content": "Commit f8b7399bb68e3fad4f2748db3e3633e040f9d6cc in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f8b7399 ]\n\nLUCENE-8220: Code cleanup in preparation for returning GeoComplexPolygon as an alternative instead of tiling. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412994",
            "date": "2018-03-25T11:42:54+0000",
            "content": "Commit 88b057025024521be21c3c32b32fc1cd14b141f2 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=88b0570 ]\n\nLUCENE-8220: Code cleanup in preparation for returning GeoComplexPolygon as an alternative instead of tiling. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16412997",
            "date": "2018-03-25T11:45:40+0000",
            "content": "The more I look at this, the more I think having a \"use GeoComplexPolygon as a backoff\" strategy is the right thing to do.\n\nI've committed some code cleanup designed to simplify the process of implementing that.  I'll be doing more such cleanup as I implement. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16412999",
            "date": "2018-03-25T11:52:57+0000",
            "content": "For the concave issue I have already thought about that as there is no obvious solution with tiling. Even more, tiling is expected to have limitations when points are very close together. Checks for problematic polygons look good, so +1 for a backoff strategy. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16413005",
            "date": "2018-03-25T12:17:22+0000",
            "content": "Commit 273a829c465a539de66049713ffb5ea58dd2278a in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=273a829 ]\n\nLUCENE-8220: Switch over to using GeoComplexPolygon if we can't tile a polygon. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413007",
            "date": "2018-03-25T12:18:50+0000",
            "content": "Commit 9b0721be32eea98f8d32fd1d0e5c26e7af1201b0 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9b0721b ]\n\nLUCENE-8220: Switch over to using GeoComplexPolygon if we can't tile a polygon. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413008",
            "date": "2018-03-25T12:19:23+0000",
            "content": "Commit 81ac4d28fb9eacfe80a9ce9e880b5592ea51e363 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81ac4d2 ]\n\nLUCENE-8220: Switch over to using GeoComplexPolygon if we can't tile a polygon. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413012",
            "date": "2018-03-25T12:25:48+0000",
            "content": "Ignacio Vera Switchover code has been implemented and committed, and the tests enabled.\n\nThe only remaining concerns are as follows:\n\n(1) The API for makeGeoPolygon() accepts holes as other GeoPolygons.  This is incompatible with GeoComplexPolygon, so I've disabled the cutover in the case where holes are present.  The right thing to do in any case is create a new variant of the makeGeoPolygon() method that accepts holes as a list of PolygonDescription objects, and builds them itself.  We'd want to deprecate the old method also.\n\n(2) It's also plausible now to automatically decide, based on number of points, whether we want to cut over to GeoComplexPolygon based on polygon complexity.  We may want to implement a cutover automatically at (say) 100 points, just for performance reasons.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16413021",
            "date": "2018-03-25T13:00:02+0000",
            "content": "I wanted to file a Jira ticket to add such a factory method, something like makeBestGeoPolygon and even offer the user to input the cut over if they want to do so.\n\nThis would be great as it could be used is the Geo3d wrapper!\n\nI wonder if to avoid changing too much existing API, we might want to allow the current factory method makeGeoPolygon to fail in case of a tile exception and move the failover to the new factory method that does what you explain above.\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16413091",
            "date": "2018-03-25T16:21:04+0000",
            "content": "Commit 85c182607b5bf233d6eda3ac3fbe4d122ac99cd7 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85c1826 ]\n\nLUCENE-8220: Add general makeGeoPolygon variant that decides the best technology for you. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413092",
            "date": "2018-03-25T16:21:58+0000",
            "content": "Commit 93140c0c21d2b4bea9be4ddf00629f23bc936667 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=93140c0 ]\n\nLUCENE-8220: Add general makeGeoPolygon variant that decides the best technology for you. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413093",
            "date": "2018-03-25T16:22:22+0000",
            "content": "Commit a13befe7580c93b8721a4680b8208de3b8c49d5e in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a13befe ]\n\nLUCENE-8220: Add general makeGeoPolygon variant that decides the best technology for you. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413409",
            "date": "2018-03-26T06:04:47+0000",
            "content": "I reopen the issue as I found another coplanarity that has not been addressed. I think the fix is easy: when the points are assembled to create a concave polygon, a check should be put in place to test that there are no coplanar points. if there are, then throw a TileException as that is not legal.\n\nIn addition my test shows that building polygons with many points can be slow with the new factory method. The reason is that it always filter points and edges although that is only necessary when we tile the given polygon. Those methods should be moved inside the if condition.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16413648",
            "date": "2018-03-26T10:21:14+0000",
            "content": "Commit 26ba705a4f2537505fd75a326a751a627694bd32 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=26ba705 ]\n\nLUCENE-8220: Fix yet another case where we cannot tile. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413651",
            "date": "2018-03-26T10:22:14+0000",
            "content": "Commit 13fdd07e24a3a6f5201ad28b828b1b034608b2b7 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=13fdd07 ]\n\nLUCENE-8220: Fix yet another case where we cannot tile. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413654",
            "date": "2018-03-26T10:23:16+0000",
            "content": "Commit 6b42cf38647c7187d23148b78b25a88bb2c1faee in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b42cf3 ]\n\nLUCENE-8220: Fix yet another case where we cannot tile. ",
            "author": "ASF subversion and git services"
        }
    ]
}