{
    "id": "LUCENE-1645",
    "title": "Deleted documents are visible across reopened MSRs",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "",
    "attachments": {
        "LUCENE-1645.patch": "https://issues.apache.org/jira/secure/attachment/12408503/LUCENE-1645.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-05-19T19:19:50+0000",
            "content": "If you reopen() MSR with unchanged segments, the resulting MSR will share SR instances for these segments.\nConsequently, when you delete a doc in one of said segments through new MSR, deletion will be visible in original MSR, as no checks for shared SRs are done in delete().\n\nThe patch illustrates the bug by altering existing test to reopen MSR->MSR instead of SR->MSR. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12710836"
        },
        {
            "date": "2009-05-19T20:39:10+0000",
            "content": "Good catch!\n\nSo we are missing a clone() on the old subreaders, when referencing them from the new MultiSegmentReader? ",
            "author": "Michael McCandless",
            "id": "comment-12710872"
        },
        {
            "date": "2009-05-19T21:46:04+0000",
            "content": "Either that. Or having boolean readerShared[] as a property of MSR, and check it on each modification attempt -> lazy clone().\n\nrant on\nOr make readers immutable  I already have a patch that removes norm updates, lazy loading and synchronization. Then we only need to do deletes in IndexWriter without resorting to its reader pool.\nBy the way, do we need public IR cloneability? Not for Lucene internals, but for actual users? That really looks like one more feature that can be safely removed. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12710894"
        },
        {
            "date": "2009-05-20T05:01:09+0000",
            "content": "Lazy clone() is a bad idea, since it has to be synced. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12711006"
        },
        {
            "date": "2009-05-20T10:13:20+0000",
            "content": "Lazy clone() is a bad idea, since it has to be synced.\n\nRight; I think we should simply clone shared subreaders on reopen.\n\nOr make readers immutable\n\nI think it's too soon to do this.  In theory, NRT should enable us to deprecate deletions from IW, but 1) we need NRT released and some real experience before doing so, and 2) we still need to get setNorm working from IW.\n\nBy the way, do we need public IR cloneability?\n\nI think we do?  Eg it enables you to clone a readOnly reader to a read/write one in order to do deletes/setNorm. ",
            "author": "Michael McCandless",
            "id": "comment-12711086"
        },
        {
            "date": "2009-05-20T13:37:46+0000",
            "content": "Right; I think we should simply clone shared subreaders on reopen.\nIFF the subreader being cloned is not readonly!\n\nI think it's too soon to do this.\nHey, let's reverse readonly/writeable reader inheritance? WriteableSegmentReader extends SegmentReader.\nSegmentReader is readonly by behaviour and in code - there are no syncs and mutator methods throw UOE. WriteableSegmentReader adds a writeability layer over SegmentReader and all the gory syncs.\n\nI think we do? Eg it enables you to clone a readOnly reader to a read/write one in order to do deletes/setNorm.\nHey, open a new IR if you want to write. Cloning/reopening an IR while simultaneously switching readonly flag is a feature that gives user zero new functionality, absolutely nothing he can't accomplish using a new IR, but makes reopening/cloning code more complex.  ",
            "author": "Earwin Burrfoot",
            "id": "comment-12711139"
        },
        {
            "date": "2009-05-20T15:15:30+0000",
            "content": "IFF the subreader being cloned is not readonly!\n\nOK.\n\n\nHey, let's reverse readonly/writeable reader inheritance? WriteableSegmentReader extends SegmentReader.\nSegmentReader is readonly by behaviour and in code - there are no syncs and mutator methods throw UOE. WriteableSegmentReader adds a writeability layer over SegmentReader and all the gory syncs.\n\nThat sounds right, but let's do this as a separate issue?  And leave this issue on fixing this particular bug.\n\n\nHey, open a new IR if you want to write. Cloning/reopening an IR while simultaneously switching readonly flag is a feature that gives user zero new functionality, absolutely nothing he can't accomplish using a new IR, but makes reopening/cloning code more complex.\n\nOpening a new IR is quite a bit more costly than cloning/reopening.\n\nPlus the reopen/cloning code will still need the complexity because internal to Lucene we still need to do this.  We are only discussing whether the functionality should remain public, which I think it should. ",
            "author": "Michael McCandless",
            "id": "comment-12711185"
        },
        {
            "date": "2009-05-20T19:06:37+0000",
            "content": "Here's the fix. Plus slightly modified test that fails without the fix. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12711297"
        },
        {
            "date": "2009-05-20T19:37:45+0000",
            "content": "Looks good... I'll commit shortly.  Thanks Earwin! ",
            "author": "Michael McCandless",
            "id": "comment-12711305"
        }
    ]
}