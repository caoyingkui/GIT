{
    "id": "SOLR-5850",
    "title": "Race condition in ConcurrentUpdateSolrServer",
    "details": {
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java",
            "search",
            "SolrCloud",
            "update"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Possibly related to SOLR-2308, we are seeing a Queue Full error message when issuing writes to Solr Cloud\n\nEach Update has 200 documents, and a commit is issued after 2000 documents have been added. \n\nThe writes are spread out to all the servers in the cloud (2 in this case) and following is the stack trace from Solr: \n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">500</int><int name=\"QTime\">101</int></lst><lst name=\"error\"><str name=\"msg\">Queue full</str><str name=\"t\nrace\">java.lang.IllegalStateException: Queue full\n        at java.util.AbstractQueue.add(Unknown Source)\n        at org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer$Runner$1.writeTo(ConcurrentUpdateSolrServer.java:181)\n        at org.apache.http.entity.EntityTemplate.writeTo(EntityTemplate.java:72)\n        at org.apache.http.entity.HttpEntityWrapper.writeTo(HttpEntityWrapper.java:98)\n        at org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper.writeTo(EntityEnclosingRequestWrapper.java:108)\n        at org.apache.http.impl.entity.EntitySerializer.serialize(EntitySerializer.java:122)\n        at org.apache.http.impl.AbstractHttpClientConnection.sendRequestEntity(AbstractHttpClientConnection.java:271)\n        at org.apache.http.impl.conn.ManagedClientConnectionImpl.sendRequestEntity(ManagedClientConnectionImpl.java:197)\n        at org.apache.http.protocol.HttpRequestExecutor.doSendRequest(HttpRequestExecutor.java:257)\n        at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)\n        at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:715)\n        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:520)\n        at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906)\n        at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:805)\n        at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:784)\n        at org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer$Runner.run(ConcurrentUpdateSolrServer.java:232)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n        at java.lang.Thread.run(Unknown Source)\n</str><int name=\"code\">500</int></lst>\n</response>",
    "attachments": {
        "SOLR-5850.patch": "https://issues.apache.org/jira/secure/attachment/12678494/SOLR-5850.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13930751",
            "date": "2014-03-11T18:41:31+0000",
            "content": "Interesting - have not seen this before. I'll try and take a look before long. "
        },
        {
            "author": "Devansh Dhutia",
            "id": "comment-13932308",
            "date": "2014-03-12T20:28:23+0000",
            "content": "\nSolrParams currentParams = new ModifiableSolrParams(req.getParams());\nif (!origParams.toNamedList().equals(currentParams.toNamedList())) {\n    queue.add(req); // params are different, push back to queue\n    break;\n}\n\n\n\nShouldn't that be a blocking operation? or even an offer with retry logic? further down, the queue is polled, and by the time the params are compared, another request may have already been added to the queue.  "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14192061",
            "date": "2014-10-31T16:54:37+0000",
            "content": "Added a patch for this. Basically changing queue.add() to queue.offer(), which will wait till a timeout (configurable) for inserting into the queue, if it is full.  "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14239836",
            "date": "2014-12-09T18:54:24+0000",
            "content": "Ishan Chattopadhyaya I'm wondering if this needs to raise an exception vs. just logging the error?  "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14263588",
            "date": "2015-01-03T18:09:37+0000",
            "content": "Timothy Potter Indeed, an exception seems better here. I've updated the patch with the same. Please review. Thanks  "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14294449",
            "date": "2015-01-28T00:06:20+0000",
            "content": "This looks like a good change.  I'd argue that it's even safe for 5.0, but I'm guessing that ship has sailed and we'd need to put it in for 5.1. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14294450",
            "date": "2015-01-28T00:08:32+0000",
            "content": "I haven't checked all the intricacies ... but would we need to add a config knob to HttpShardHandler for this new timeout? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14295681",
            "date": "2015-01-28T19:31:38+0000",
            "content": "Vijay Sekhri on the user's list has this comment about this patch:\n\n************\n We will continue to do more testing and confirm .\nPlease note that the patch is BUGGY.\n\nIt removed the break statement within while loop because of which, whenever\nwe send a list of docs it would hang (API CloudSolrServer.add) , but it\nwould work if send one doc at a time.\n\nIt took a while to figure out why that is happening. Once we put the break\nstatement back it worked like a charm.\nFurthermore the patch has\nsolr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient.java\nwhich should be\nsolr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java\n*********** "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14295833",
            "date": "2015-01-28T20:48:49+0000",
            "content": "Thanks Erick Erickson & Vijay Sekhri. It was an oversight indeed, and even the CUSCTest didn't catch it  Updated the patch with the fix. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14295850",
            "date": "2015-01-28T21:01:10+0000",
            "content": "Ishan:\n\nThanks! I guess it's up to Timothy Potter from here. "
        },
        {
            "author": "Vijay Sekhri",
            "id": "comment-14566209",
            "date": "2015-05-30T21:35:11+0000",
            "content": "One more observation here is if we increase the poll time to 10 second and also add a rertry logic (to retry 3 times before finally giving up)  that the leaders some times ends up having around 4k live threads and results in JVM error or unable to create more threads. https://plumbr.eu/outofmemoryerror/unable-to-create-new-native-thread "
        }
    ]
}