{
    "id": "LUCENE-8229",
    "title": "Add a method to Weight to retrieve matches for a single document",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [],
        "fix_versions": [
            "7.4"
        ]
    },
    "description": "The ability to find out exactly what a query has matched on is a fairly frequent feature request, and would also make highlighters much easier to implement.\u00a0 There have been a few attempts at doing this, including adding positions to Scorers, or re-writing queries as Spans, but these all either compromise general performance or involve up-front knowledge of all queries.\n\nInstead, I propose adding a method to Weight that exposes an iterator over matches in a particular document and field.\u00a0 It should be used in a similar manner to explain() - ie, just for TopDocs, not as part of the scoring loop, which relieves some of the pressure on performance.",
    "attachments": {
        "LUCENE-8229_small_improvements.patch": "https://issues.apache.org/jira/secure/attachment/12918676/LUCENE-8229_small_improvements.patch",
        "LUCENE-8229.patch": "https://issues.apache.org/jira/secure/attachment/12917538/LUCENE-8229.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16417443",
            "date": "2018-03-28T14:47:23+0000",
            "content": "The PR linked above illustrates the idea.\u00a0 There are still some TODOs (I haven't added anything to PhraseWeight yet, for example).\u00a0 Comments welcome! ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16417849",
            "date": "2018-03-28T18:02:39+0000",
            "content": "This is really interesting Alan Woodward!\n\nHere's your proposed signature: public MatchesIterator matches(LeafReaderContext context, int doc, String field) throws IOException\n\n\n\tI'm unsure about this new matches method requiring a field reference, thus insisting all fields in the query match the field in this argument.  A caller might want all fields, or perhaps just some.  This could easily be converted to a Predicate<String> to match the field.\n\tAdd payloads to MatchesIterator\n\tPerhaps matches should take an int for the PostingsEnum flags.  This way it could choose to ask for offsets and/or payloads.  Or maybe just always get both to keep the API simpler, assuming the perf difference is negligible for practical uses of this feature (which sounds plausible to me).  It could be added later if desired.  Yeah, lets not now then.\n\n\n\nHave you considered a very different approach of modifying Scorer to expose more information about the matches in a document?  I'm just thinking out-loud here; might be a bad idea .  Maybe I'm saying the same thing as \"adding positions to Scorers\" as you reference in the description, but maybe it could hang off indirectly using the MatchesIterator you developed here.  Your proposed Weight.matches(...) is a visitor-like thing and we already have Scorer doing that.  Lots of Weight classes to be modified; I wonder if it's less invasive at the Scorer?  Hmm. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16417909",
            "date": "2018-03-28T18:44:25+0000",
            "content": "The ability to find out exactly what a query has matched on is a fairly frequent feature request\n\nI confirm the need for this \u2013 we have custom highlighters and they're way too complex because of the need to decompose each and every query into match ranges. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16418007",
            "date": "2018-03-28T19:46:36+0000",
            "content": "A caller might want all fields, or perhaps just some\nI've done it this way to keep the API as simple as possible.\u00a0 If we start iterating over multiple fields then MatchesIterator becomes a lot more complicated, and I don't think it gains us anything?\u00a0 If consumers want to get the matches on multiple fields, then they can call Weight.matches() multiple times.\n\nRe payloads, I think of them as a search-time feature, and not really relevant here.\u00a0 Let's keep this API focussed.\n\nI have tried putting something similar to the MatchesIterator on Scorer, but it doesn't really fit.\u00a0 Scorers are designed to iterate over matching documents very efficiently, and\u00a0lots of them have\u00a0optimizations which mean that positions and/or offsets aren't actually available - for example, things like TermInSet or AutomatonQuery get rewritten to bitsets, or disjunctions can use bulk scorers, or the query cache can intercept things.\u00a0 Whereas Weight already has explain(), which\u00a0has similar semantics to this - useful information that you might sometimes want for your TopDocs, but not something you want to be running against every matching document.\u00a0 And if anything, there are more Scorer implementations than Weights, so it would be more invasive a change. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16418708",
            "date": "2018-03-29T10:30:30+0000",
            "content": "I like the proposal here. For simple queries it makes the extraction of matched positions trivial. Though I wonder how the complex queries would handle this, for instance the AutomatonQuery cannot just return an enum over all matching terms, we have a special handling of this query in highlighters to avoid the explosion for instance. What is your current plan to handle this query ? Should it return null for simplicity or should it try to expand the automaton with a limit on the number of terms ? I prefer the former which is safe and if users want to check the matching of a complex automaton they can use use a MemoryIndex for each TopDocument and change the query to use the rewrite method that builds a boolean query. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16418770",
            "date": "2018-03-29T11:06:19+0000",
            "content": "Having slept on it, I've come round to David Smiley's suggestion of returning matches from all fields.\u00a0 I've pushed some changes which add an intermediate Matches object, which holds iterators for all fields with matches.\u00a0 So the method signature on Weight now looks like this:\n\npublic abstract Matches getMatches(LeafReaderContext ctx, int doc)\n\n\nYou can then get a MatchesIterator for a given field by calling \n\nMatches.getFieldMatches(String field}\n\n, or get the set of all fields containing matches by calling \n\nMatches.getMatchFields()\n\n.  This has the nice side-effect of making BooleanWeight.matches() much more efficient.\n\nRe AutomatonQuery, we have a lot more leeway here because it's only working on a single document at a time.  The way I've done things so far is to pull postings for all the matching terms, but only create a MatchesIterator if the postings can be advanced to the document we're interested in.  Otherwise, the PostingsEnum gets re-used.  This should have similar performance characteristics to the creation of a scorer over a single segment. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16422822",
            "date": "2018-04-02T17:28:44+0000",
            "content": "I've pushed a few more changes - IndexOrDocValuesQuery should use the dvWeight to check if it matches, I've added a term() method so that the iterator can report which term it's currently positioned on, and I've removed the iteration for SpanQueries.  I want to think more about how we iterate over composite queries like Span or phrase (or interval, soon), as I can see situations where we'd both want to iterate over the whole thing, or where we'd want iterate over the sub parts as well, and I'd like to leave that to a follow-up issue. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16425406",
            "date": "2018-04-04T12:22:49+0000",
            "content": "Patch up to date with master, precommit and tests pass.  I think this is ready? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16427185",
            "date": "2018-04-05T16:16:24+0000",
            "content": "It's really looking great Alan.  I looked over your patch a bit more....\n\n\n\tI wonder if \"Matches\" sounds too generic; perhaps \"PositionMatches\" to emphasize it has position information and not simply matching document IDs?\n\tIt's a shame that every Weight must implement this (no default impl) because even a no-match response requires knowledge of the field.  Is the distinction important to know the field?  I suppose it might be useful for figuring out generically which fields a query references... but no not really because you have to execute it on a matching document first to even figure that out with this API.\n\tMatcher.EMPTY (a empty version of MatchesIterator) should perhaps be moved to MatchesIterator?  Come to think of it, maybe MatchesIterator could be Matches.Iterator (inner class of Matches)?  (avoids polluting the busy .search namespace).\n\tRE payloads: I appreciate you want to keep things simple for now.  I've heard of putting OCR document offset information in them, for example, and a highlighter might want this.  A highlighter might want whatever metadata is being put in a payload, even if it is relevancy oriented \u2013 consider a relevancy debugger tool that could show you what's in the payload.  This might not even be a \"highlighter\" per-se.\n\n ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16427422",
            "date": "2018-04-05T18:37:29+0000",
            "content": "because even a no-match response requires knowledge of the field\n\nThinking about it, this is unnecessary, isn't it.  We can have a specialised Matches object which just means 'a match in this doc, but no term hits', which would be returned by default if the scorer matched.  Which would allow a default implementation.  I'll work on a new patch. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16428112",
            "date": "2018-04-06T08:41:03+0000",
            "content": "OK, the latest iteration moves the notion of a match containing no hits up to the Matches object, and has a default implementation on Weight.  This makes the patch much smaller - thanks for the suggestion David Smiley!\n\nI think I'd like to keep the name Matches - we might at some point in the future want to add the ability to return matches from DocValues fields, for example, so we wouldn't necessarily be returning positions.\n\nRe payloads, that's a convincing use-case.  I have some concerns as to how to implement them over composite matches, such as Phrases or Spans, which aren't dealt with yet, so let's do that in a follow-up issue. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16433640",
            "date": "2018-04-11T09:47:31+0000",
            "content": "Commit 502fd4bf12b8860b8eea504a96ad1b49dd52938c in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=502fd4b ]\n\nLUCENE-8229: Add Weight.matches() to iterate over match positions ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16433641",
            "date": "2018-04-11T09:47:32+0000",
            "content": "Commit 040a9601b1b346391ad37e5a0a4f2f598e72d26e in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=040a960 ]\n\nLUCENE-8229: Add Weight.matches() to iterate over match positions ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16433644",
            "date": "2018-04-11T09:49:36+0000",
            "content": "Thanks everyone.  I'm really excited about this feature! ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16434924",
            "date": "2018-04-12T04:52:58+0000",
            "content": "I'm excited about this too \n\nI made some small tweaks, such as adding lucene.experimental annotations (at least until 8.0), and using java 8 streams in one place.  What do you think? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16435020",
            "date": "2018-04-12T07:00:17+0000",
            "content": "+1 ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16435716",
            "date": "2018-04-12T15:00:04+0000",
            "content": "Commit e6b65151b6f4aec66376b3d4acc1a057167f62f6 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e6b6515 ]\n\nLUCENE-8229: add lucene.experimental, plus small changes ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16435723",
            "date": "2018-04-12T15:01:54+0000",
            "content": "Commit dc7f841e361ad9f29dc54a638856d6becc8c99d3 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dc7f841 ]\n\nLUCENE-8229: add lucene.experimental, plus small changes\n\n(cherry picked from commit e6b6515) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16534937",
            "date": "2018-07-06T14:55:00+0000",
            "content": "I was just looking at Matches.MatchesIteratorSupplier.  It's a shame to need mirror images of existing java.util.function interfaces that only differ in that it throws IOException.  See org.apache.lucene.util.IOUtils.IOConsumer added by Simon Willnauer recently.  I propose that we add an IOSupplier here and get rid of MatchesIteratorSupplier (in a new issue of course).  WDYT?  We ought to have a consistent approach in Lucene to this scenario.  I've wanted an IOSupplier in Solr for something recently and saw it hadn't been added yet. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16536633",
            "date": "2018-07-09T07:51:54+0000",
            "content": "Simon added IOSupplier rather than IOConsumer, which would already work for this I think - I'll open an issue. ",
            "author": "Alan Woodward"
        }
    ]
}