{
    "id": "LUCENE-6228",
    "title": "Do not expose full-fledged scorers in LeafCollector.setScorer",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "master (8.0)"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Currently LeafCollector.setScorer takes a Scorer, which I don't like because several methods should never be called in the context of a Collector (like nextDoc or advance).\n\nI think it's even more trappy for methods that might seem to work in some particular cases but will not work in the general case, like getChildren which will not work if you have a specialized BulkScorer or iterating over positions which will not work if you are in a MultiCollector and another leaf collector consumes positions too.\n\nSo I think we should restrict what can be seen from a collector to avoid such traps.",
    "attachments": {
        "LUCENE-6228.patch": "https://issues.apache.org/jira/secure/attachment/12697483/LUCENE-6228.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14312273",
            "author": "Adrien Grand",
            "date": "2015-02-09T14:27:16+0000",
            "content": "Simple patch that adds a new Score interface with only two methods freq() and score(). This interface is extended by Scorer and FakeScore (previously FakeScorer) and is exposed in collectors instead of Scorer. I think it's better? "
        },
        {
            "id": "comment-14312551",
            "author": "Ryan Ernst",
            "date": "2015-02-09T18:09:59+0000",
            "content": "Having both Score and Scorer is really confusing...can we have the interface still be Scorer and the abstract class be something else...maybe ScoringEnum? "
        },
        {
            "id": "comment-14313950",
            "author": "Adrien Grand",
            "date": "2015-02-10T10:14:46+0000",
            "content": "This is a great suggestion as it makes collectors easier to migrate and is also consistent with the fact that Scorer(ScoringEnum in the patch) extends PostingsEnum. Here is a new patch. "
        },
        {
            "id": "comment-14313970",
            "author": "Alan Woodward",
            "date": "2015-02-10T10:34:32+0000",
            "content": "I like this, particularly if I'm about to start adding more position-aware methods to ScoringEnum.\n\nI think FilterScorer should be FilterScoringEnum now?  Similarly with AssertingScorer.\n\nThe javadocs on LeafCollector should still refer to Scorer, not ScoringEnum\n\nCan we get rid of the FakeScorers in the taxonomy and expression modules, and in the index Sorter now? "
        },
        {
            "id": "comment-14314257",
            "author": "Adrien Grand",
            "date": "2015-02-10T14:53:31+0000",
            "content": "Thanks Alan, I applied your suggestions: here is a new patch. "
        },
        {
            "id": "comment-14314263",
            "author": "Robert Muir",
            "date": "2015-02-10T14:58:11+0000",
            "content": "another maybe more intuitive option is Scorable (interface) and keep Scorer as is, just implementing the interface.  "
        },
        {
            "id": "comment-14314302",
            "author": "Ryan Ernst",
            "date": "2015-02-10T15:21:01+0000",
            "content": "another maybe more intuitive option is Scorable (interface) and keep Scorer as is, just implementing the interface.\n\nI like that idea also.  I was only trying to suggest something that would have some larger difference in name between the two. "
        },
        {
            "id": "comment-16255202",
            "author": "Alan Woodward",
            "date": "2017-11-16T12:07:45+0000",
            "content": "Here's a patch implementing Robert Muir's idea of a Scorable interface.  This seems like the least intrusive way of doing this?\n\nAs this changes LeafCollector, which is a fairly heavily-used part of the API, I think this should only apply to master "
        },
        {
            "id": "comment-16255251",
            "author": "Robert Muir",
            "date": "2017-11-16T12:57:58+0000",
            "content": "The casts back to Scorer in some of the tests are concerning, because if code just does this then i'm not certain how much this abstraction is helping.\n\nCan we try something like moving getChildren from Scorer to this interface (it can still have default empty implementation with a default method)? Then maybe the casts would be removed but also ChildScorer would be restricted (like mentioned in the description of the issue) from doing illegal stuff.\n\nWe should also check performance, its a bit scary to add interfaces here (maybe an abstract class is an alternative) and we should ensure that this patch isn't causing hotspot to go crazy because of FakeScorer and Scorer impls. "
        },
        {
            "id": "comment-16255332",
            "author": "Alan Woodward",
            "date": "2017-11-16T13:46:35+0000",
            "content": "Can we try something like moving getChildren from Scorer to this interface\n\nThis just moves the existing problem with getChildren() to the new interface though?  I think I'd rather leave it on Scorer and make it accessible through IndexSearcher or something similar in a follow-up issue.  I can change the tests in question to not use Collectors.\n\nWe should also check performance\n\nWill run it through luceneutil and see what happens "
        },
        {
            "id": "comment-16255444",
            "author": "Robert Muir",
            "date": "2017-11-16T14:50:34+0000",
            "content": "\nThis just moves the existing problem with getChildren() to the new interface though? I think I'd rather leave it on Scorer and make it accessible through IndexSearcher or something similar in a follow-up issue. I can change the tests in question to not use Collectors.\n\nI don't think it does, i think it fixes the API? Instead of the following on Scorer:\n\n  Collection<ChildScorer> getChildren();\n  class ChildScorer {\n    Scorer child;\n    relationship;\n }\n\n\n\nwe should have on Scorable:\n\n  Collection<ChildScorer> getChildren();\n  class ChildScorer {\n    Scorable child;\n    relationship;\n }\n\n\n\nThis means that getChildren becomes \"safe\" and you can't call methods on Scorer that you shouldnt be invoking. As far as I understand, its part of the motivation behind this whole issue. "
        },
        {
            "id": "comment-16255460",
            "author": "Alan Woodward",
            "date": "2017-11-16T15:03:03+0000",
            "content": "The issue with getChildren() is that you can't access it if a BulkScorer is being used - it's a separate problem to this issue, which is preventing people calling iterator() from a Collector.  Or rather, it's the same sort of problem, in that we should prevent people from calling getChildren() from a Collector, because they might be holding a FakeScorer which can't support it. "
        },
        {
            "id": "comment-16255483",
            "author": "Robert Muir",
            "date": "2017-11-16T15:35:25+0000",
            "content": "I don't agree, sorry. We don't need to prevent anyone from calling getChildren() on a FakeScorer, it can just return empty which is the default implementation.\n\nWhat we need to prevent is someone calling advance() based on the results of getChildren, that is key: and honestly if we can't prevent that with this issue, then the abstraction isn't right, its the whole point of doing this \n\nStuff like what getChildren() on a FakeScorer or BulkScorer does, that stuff is harmless, and those things are the separate issues that we shouldnt worry about. "
        },
        {
            "id": "comment-16255640",
            "author": "Alan Woodward",
            "date": "2017-11-16T17:26:49+0000",
            "content": "What we need to prevent is someone calling advance() based on the results of getChildren\n\nBut the current patch does that by just not having getChildren() on Scorable.  And just as you can get round that by casting, you could cast ChildScorer.child to a Scorer as well if you wanted to.\n\nI guess the disagreement is over what the getChildren() API is actually for.  The tests are using it to check that constant score wrappers and the like are still giving us the correct root scorer, so I think casting is OK there?\n\nAnother idea I had was to replace getChildren() entirely with a visitor API, and have a method like IndexSearcher.explain().  So you call searcher.visitScorers(Query q, int doc, ScorerVisitor visitor) and it will then visit all the scorers that are positioned on that doc.  Maybe I should open another issue to deal with that first? "
        },
        {
            "id": "comment-16259387",
            "author": "Adrien Grand",
            "date": "2017-11-20T15:46:17+0000",
            "content": "I think this Scorable interface (or base class) is already great progress as it hides advance and other methods that collectors should never call. I tend to agree with Alan that Scorable should not have getChildren either but since this proves controversial, maybe we can keep it on Scorable for now and discuss it in a separate issue?\n\nAnother idea I had was to replace getChildren() entirely with a visitor API\n\nFor the record, this used to be a visitor API before, see LUCENE-3330. As far as I'm concerned, I tend to like exposing well-known java collections better than a custom visitor API. Visitors also introduce some challenges in that case due to the tree nature of scorers. For instance should it only expose leaves or internal nodes as well? And what relationship should it assign to a Scorer that is a SHOULD clause of a BooleanQuery which is itself a MUST clause of another BooleanQuery? "
        },
        {
            "id": "comment-16259541",
            "author": "Michael McCandless",
            "date": "2017-11-20T17:44:28+0000",
            "content": " Can we access the Query from this new interface?\n\nAnd I think we do need getChildren here?  How else would a collector find all child scorers? "
        },
        {
            "id": "comment-16259721",
            "author": "Alan Woodward",
            "date": "2017-11-20T19:28:23+0000",
            "content": "Can we access the Query from this new interface?\n\nNot without casting back to Scorer.  But this should let us clean up the hack that lets Scorers take null for their Weights, by making the various FakeScorer implementations extend Scorable instead.  That way, if you want to get the parent Query, you check to see if the Scorable is a Scorer instance, and if so, cast and call getWeight().getQuery().  Right now you can get NPE if you've been passed a bulk scorer. "
        },
        {
            "id": "comment-16261737",
            "author": "Michael McCandless",
            "date": "2017-11-22T00:20:33+0000",
            "content": "Thanks Alan Woodward; that makes sense. "
        },
        {
            "id": "comment-16262897",
            "author": "Alan Woodward",
            "date": "2017-11-22T16:41:32+0000",
            "content": "Here's an updated patch:\n\n\tgetChildren() is now on Scorable\n\tScorable is an abstract class rather than an interface\n\tAdded AssertingScorable for checking scores via AssertingLeafCollector\n\n\n\nWill try and run a luceneutil benchmark against this "
        },
        {
            "id": "comment-16602097",
            "author": "Adrien Grand",
            "date": "2018-09-03T12:16:20+0000",
            "content": "+1 to this patch, let's also make sure we add a note about this to the MIGRATE.txt? It would be a nice addition to Lucene 8 since we added more methods that shouldn't get called from a collector, like advanceShallow and getMaxScore. However we'd need to put setMinCompetitiveScore on Scorable. "
        },
        {
            "id": "comment-16602352",
            "author": "Alan Woodward",
            "date": "2018-09-03T17:04:23+0000",
            "content": "Patch updated to latest master.\n\nAs a follow-up, we can remove FakeScorer and enforce Scorer.getWeight() to never be null, but this patch is big enough already. "
        },
        {
            "id": "comment-16602731",
            "author": "Alan Woodward",
            "date": "2018-09-04T08:19:42+0000",
            "content": "Here's the benchmark results:\n\nTaskQPS baseline      StdDevQPS my_modified_version      StdDev                Pct diff\n              AndHighMed      917.55      (4.4%)      873.99      (7.0%)   -4.7% ( -15% -    6%)\n              HighPhrase     1045.07      (8.3%)     1009.68      (8.2%)   -3.4% ( -18% -   14%)\n             AndHighHigh      937.55      (5.9%)      909.34      (6.1%)   -3.0% ( -14% -    9%)\n               LowPhrase     1286.87      (5.6%)     1250.09      (5.8%)   -2.9% ( -13% -    8%)\n                 Prefix3      350.81     (11.8%)      341.21     (11.9%)   -2.7% ( -23% -   23%)\n                  Fuzzy1      413.16      (4.2%)      402.44      (7.1%)   -2.6% ( -13% -    9%)\n        HighSloppyPhrase     1385.38      (6.3%)     1356.77      (8.8%)   -2.1% ( -16% -   13%)\n                Wildcard      984.38      (5.2%)      967.81      (3.4%)   -1.7% (  -9% -    7%)\n               OrHighMed      884.32      (5.2%)      870.05      (7.3%)   -1.6% ( -13% -   11%)\n       HighTermMonthSort     3629.00      (5.4%)     3579.19      (5.3%)   -1.4% ( -11% -    9%)\n               MedPhrase     1021.25      (5.7%)     1007.93      (5.1%)   -1.3% ( -11% -   10%)\n                 MedTerm     5695.18     (11.1%)     5631.21      (9.8%)   -1.1% ( -19% -   22%)\n                  IntNRQ     1679.89      (3.5%)     1661.20      (2.9%)   -1.1% (  -7% -    5%)\n                 LowTerm     7382.84      (9.0%)     7327.15     (10.5%)   -0.8% ( -18% -   20%)\n         LowSloppyPhrase     1641.31      (7.8%)     1630.47      (6.2%)   -0.7% ( -13% -   14%)\n              AndHighLow     3016.41     (11.5%)     3001.77     (12.5%)   -0.5% ( -21% -   26%)\n                PKLookup      216.00      (2.0%)      215.21      (2.7%)   -0.4% (  -4% -    4%)\n                 Respell      391.05      (6.2%)      390.08      (9.3%)   -0.2% ( -14% -   16%)\n             LowSpanNear     1536.24      (7.1%)     1539.79      (5.6%)    0.2% ( -11% -   13%)\n            HighSpanNear      722.00      (4.4%)      723.73      (5.5%)    0.2% (  -9% -   10%)\n   HighTermDayOfYearSort     1217.56      (7.7%)     1224.19     (10.5%)    0.5% ( -16% -   20%)\n              OrHighHigh      529.66      (8.8%)      532.79      (5.6%)    0.6% ( -12% -   16%)\n                HighTerm     4502.17      (8.6%)     4535.50      (7.3%)    0.7% ( -13% -   18%)\n             MedSpanNear     1194.29      (7.2%)     1206.77      (6.5%)    1.0% ( -11% -   15%)\n               OrHighLow     1261.48      (9.2%)     1285.74      (6.7%)    1.9% ( -12% -   19%)\n                  Fuzzy2       83.02     (12.8%)       84.71     (15.4%)    2.0% ( -23% -   34%)\n         MedSloppyPhrase     1006.45     (11.2%)     1049.12     (11.2%)    4.2% ( -16% -   29%)\n\n "
        },
        {
            "id": "comment-16602771",
            "author": "Adrien Grand",
            "date": "2018-09-04T08:48:36+0000",
            "content": "I think FilterScorable should not delegate setMinCompetitiveScore and keep the default impl (like FilterScorer). Otherwise if you have a FilterScorable that overrides score() but not setMinCompetitiveScore() this would be a bug? +1 otherwise, and +1 to prevent null weights in the Scorer constructor as a follow-up. "
        },
        {
            "id": "comment-16602842",
            "author": "ASF subversion and git services",
            "date": "2018-09-04T10:02:41+0000",
            "content": "Commit 910a0231f6fc668426056e31d43e293248ff5ce1 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=910a023 ]\n\nLUCENE-6228: Add Scorable class and make LeafCollector.setScorer() take Scorable "
        },
        {
            "id": "comment-16602844",
            "author": "Alan Woodward",
            "date": "2018-09-04T10:03:45+0000",
            "content": "I changed FilterScorable accordingly.\u00a0 Thanks for the reviews! "
        },
        {
            "id": "comment-16603588",
            "author": "Steve Rowe",
            "date": "2018-09-04T20:47:50+0000",
            "content": "git bisect says that the first failing commit for the below reproducing failures from https://jenkins.thetaphi.de/job/Lucene-Solr-master-MacOSX/4813/ is 910a0231f on this issue:\n\n\nChecking out Revision d997e8b4a2717e000437953c9d66ad1f84229afd (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCollapseQParserPlugin -Dtests.method=testFieldValueCollapseWithNegativeMinMax -Dtests.seed=D4530DFC3968CF99 -Dtests.slow=true -Dtests.locale=my -Dtests.timezone=Europe/Vilnius -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.04s J0 | TestCollapseQParserPlugin.testFieldValueCollapseWithNegativeMinMax <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([D4530DFC3968CF99:F8DDBC49F4316038]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:917)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:877)\n   [junit4]    > \tat org.apache.solr.search.TestCollapseQParserPlugin.testFieldValueCollapseWithNegativeMinMax(TestCollapseQParserPlugin.java:255)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n   [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n   [junit4]    > Caused by: java.lang.NullPointerException\n   [junit4]    > \tat org.apache.solr.search.CollapsingQParserPlugin$IntFloatStrategy.collapse(CollapsingQParserPlugin.java:2312)\n   [junit4]    > \tat org.apache.solr.search.CollapsingQParserPlugin$IntFieldValueCollector.collect(CollapsingQParserPlugin.java:1170)\n   [junit4]    > \tat org.apache.lucene.search.MatchAllDocsQuery$1$1.score(MatchAllDocsQuery.java:62)\n   [junit4]    > \tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:652)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:443)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:217)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1622)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1438)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:585)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.doProcessUngroupedSearch(QueryComponent.java:1436)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:375)\n   [junit4]    > \tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:298)\n   [junit4]    > \tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:199)\n   [junit4]    > \tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2541)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.query(TestHarness.java:338)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.query(TestHarness.java:320)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:891)\n   [junit4]    > \t... 40 more\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestRandomCollapseQParserPlugin -Dtests.method=testRandomCollpaseWithSort -Dtests.seed=D4530DFC3968CF99 -Dtests.slow=true -Dtests.locale=ru -Dtests.timezone=America/Jujuy -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.16s J0 | TestRandomCollapseQParserPlugin.testRandomCollpaseWithSort <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: BUG using params: sort=enum_dv+asc,+collation_en_primary_last+asc,+id+desc&rows=200&fq={!collapse+size%3D7162+nullPolicy%3Dexpand+field%3Dfloat_dv_first+sort%3D'score+desc,+enum_last+asc,+id+asc'} + q=*:*&fl=id,float_dv_first\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([D4530DFC3968CF99:D1EE7E3512C0FC6A]:0)\n   [junit4]    > \tat org.apache.solr.search.TestRandomCollapseQParserPlugin.testRandomCollpaseWithSort(TestRandomCollapseQParserPlugin.java:202)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n   [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n   [junit4]    > Caused by: org.apache.solr.client.solrj.SolrServerException: org.apache.solr.client.solrj.SolrServerException: java.lang.NullPointerException\n   [junit4]    > \tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:233)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:194)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrClient.query(SolrClient.java:942)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrClient.query(SolrClient.java:957)\n   [junit4]    > \tat org.apache.solr.search.TestRandomCollapseQParserPlugin.testRandomCollpaseWithSort(TestRandomCollapseQParserPlugin.java:158)\n   [junit4]    > \t... 38 more\n   [junit4]    > Caused by: org.apache.solr.client.solrj.SolrServerException: java.lang.NullPointerException\n   [junit4]    > \tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.checkForExceptions(EmbeddedSolrServer.java:301)\n   [junit4]    > \tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:192)\n   [junit4]    > \t... 42 more\n   [junit4]    > Caused by: java.lang.NullPointerException\n   [junit4]    > \tat org.apache.solr.search.CollapsingQParserPlugin$IntSortSpecStrategy.collapse(CollapsingQParserPlugin.java:2513)\n   [junit4]    > \tat org.apache.solr.search.CollapsingQParserPlugin$IntFieldValueCollector.collect(CollapsingQParserPlugin.java:1170)\n   [junit4]    > \tat org.apache.lucene.search.MatchAllDocsQuery$1$1.score(MatchAllDocsQuery.java:62)\n   [junit4]    > \tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:652)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:443)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:217)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1622)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1438)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:585)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.doProcessUngroupedSearch(QueryComponent.java:1436)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:375)\n   [junit4]    > \tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:298)\n   [junit4]    > \tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:199)\n   [junit4]    > \tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2541)\n   [junit4]    > \tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:191)\n   [junit4]    > \t... 42 more\n\n "
        },
        {
            "id": "comment-16603669",
            "author": "Alan Woodward",
            "date": "2018-09-04T22:23:02+0000",
            "content": "Thanks Steve, I'll take a look tomorrow.\u00a0 I think I know what this is already. "
        },
        {
            "id": "comment-16604037",
            "author": "ASF subversion and git services",
            "date": "2018-09-05T07:25:55+0000",
            "content": "Commit 3b1a335fb3dfc9d4f085740d30095ff07f48f25c in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b1a335 ]\n\nLUCENE-6228: Missed refactoring of CollapsingQParserPlugin delegating collector "
        },
        {
            "id": "comment-16604039",
            "author": "Alan Woodward",
            "date": "2018-09-05T07:26:10+0000",
            "content": "This should be fixed now, sorry for the noise. "
        }
    ]
}