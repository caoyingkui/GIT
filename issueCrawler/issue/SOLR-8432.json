{
    "id": "SOLR-8432",
    "title": "Split StreamExpressionTest into separate tests",
    "details": {
        "components": [],
        "type": "Test",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Closed",
        "resolution": "Duplicate",
        "priority": "Trivial"
    },
    "description": "Currently, StreamExpressionTest consists of a single JUnit test that calls 10 or 15 methods, each targeting a particular type of stream or scenario.\n\nEach of these scenario's would benefit being split into its own separate JUnit test.  This would allow each scenario to pass/fail independently.",
    "attachments": {
        "SOLR-8432.patch": "https://issues.apache.org/jira/secure/attachment/12778239/SOLR-8432.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-17T12:21:22+0000",
            "author": "Jason Gerlowski",
            "content": "Attached patch splits StreamExpressionTest into 20 independently runnable test cases. ",
            "id": "comment-15061971"
        },
        {
            "date": "2016-01-03T04:17:18+0000",
            "author": "Jason Gerlowski",
            "content": "Can someone take a look at this when they get a chance please?\n\nI'm fine with this not going in if people aren't a fan of this; just want to make sure it doesn't get lost by accident. ",
            "id": "comment-15076757"
        },
        {
            "date": "2016-01-03T13:27:26+0000",
            "author": "Dennis Gove",
            "content": "The reason for the single @test calling out to multiple functions has to do with the test setup code in AbstractFullDistribZkTestBase. Each test method will go through realitively expensive test setup / teardown. By only having a single test method with calls out to individual methods we can avoid that repeated setup/teardown code. \n\nI ran both the original test class and these changes and the runtime difference is significant. The original version completes in 36s while the separated version completes in 490s. \n\nI think for this change to be accepted it would have to include changes in the base classes to move some of the setup work from test method setup to test class setup. (might actually require new base classes so as not to impact other tests using these base test classes). ",
            "id": "comment-15080429"
        },
        {
            "date": "2016-01-03T15:49:44+0000",
            "author": "Jason Gerlowski",
            "content": "Oh, hmm.  I hadn't bothered to time this.  But that does make sense.  I'll look into it.  Thanks Dennis. ",
            "id": "comment-15080457"
        },
        {
            "date": "2016-01-03T16:29:16+0000",
            "author": "Joel Bernstein",
            "content": "I agree that work needs to be done on the tests. We have a few open Streaming issues (UpdateStream, JDBCStream, Intersect/Complement) and a few bugs to clear. I'd like to get these issues committed, adding the new tests to StreamingTest and StreamExpressionTests.\n\nThen I think it makes sense to focus on inventorying, beefing up and re-organizing the Streaming tests before the 6.0 release.\n\nWe can use this ticket to discuss how the tests could be re-organized and also agree on a standard set of tests that should be present for each Stream Implementation. ",
            "id": "comment-15080466"
        },
        {
            "date": "2016-05-06T13:25:33+0000",
            "author": "Kevin Risden",
            "content": "SOLR-9065 fixed up a bunch of the streaming tests. StreamExpressionTest was one of them. ",
            "id": "comment-15274020"
        }
    ]
}