{
    "id": "SOLR-10888",
    "title": "almost self-generating python script(s) to access V2 APIs",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "v2 API"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The V2 API supports introspection and the results of such introspection(s) can be used to automatically on-the-fly generate a (nested) argparse.ArgumentParser in a python script and then to again automatically transform the script arguments into a url and http call to the V2 API.\n\nIllustrative patch and sample output to follow.",
    "attachments": {
        "SOLR-10888.patch": "https://issues.apache.org/jira/secure/attachment/12872984/SOLR-10888.patch",
        "solr_cli.py": "https://issues.apache.org/jira/secure/attachment/12890856/solr_cli.py"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-14T14:19:08+0000",
            "content": "Attaching illustrative patch, sample output below.\n\ntop-level usage\n\nprompt:solr$ bin/v2-collections-api.py\nusage: v2-collections-api.py [-h]\n                             {restore-collection,create,create-alias,backup-collection,delete-alias}\n                             ...\nv2-collections-api.py: error: too few arguments\n\n\n\nper-command usage\n\nprompt:solr$ bin/v2-collections-api.py create\nusage: v2-collections-api.py create [-h]\n                                    [--replicationFactor REPLICATIONFACTOR]\n                                    [--async ASYNC]\n                                    [--tlogReplicas TLOGREPLICAS]\n                                    [--maxShardsPerNode MAXSHARDSPERNODE]\n                                    [--shards SHARDS]\n                                    [--shuffleNodes SHUFFLENODES]\n                                    [--nrtReplicas NRTREPLICAS]\n                                    [--numShards NUMSHARDS]\n                                    [--autoAddReplicas AUTOADDREPLICAS]\n                                    [--config CONFIG]\n                                    [--pullReplicas PULLREPLICAS]\n                                    name\nv2-collections-api.py create: error: too few arguments\n\n\n\ndetailed per-command usage\n\nprompt:solr$ bin/v2-collections-api.py create -h\nusage: v2-collections-api.py create [-h]\n                                    [--replicationFactor REPLICATIONFACTOR]\n                                    [--async ASYNC]\n                                    [--tlogReplicas TLOGREPLICAS]\n                                    [--maxShardsPerNode MAXSHARDSPERNODE]\n                                    [--shards SHARDS]\n                                    [--shuffleNodes SHUFFLENODES]\n                                    [--nrtReplicas NRTREPLICAS]\n                                    [--numShards NUMSHARDS]\n                                    [--autoAddReplicas AUTOADDREPLICAS]\n                                    [--config CONFIG]\n                                    [--pullReplicas PULLREPLICAS]\n                                    name\n\npositional arguments:\n  name                  The name of the collection to be created.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --replicationFactor REPLICATIONFACTOR\n                        The number of NRT replicas to be created for each\n                        shard. Replicas are physical copies of each shard,\n                        acting as failover for the shard.\n  --async ASYNC         Defines a request ID that can be used to track this\n                        action after it's submitted. The action will be\n                        processed asynchronously.\n  --tlogReplicas TLOGREPLICAS\n                        ...\n\n\n\nillustrative run:\n\nprompot:solr$ bin/v2-collections-api.py create myDemoCollection --shards=42\nurl = http://localhost:8983/v2/collections/create?name=myDemoCollection&shards=42\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16049224"
        },
        {
            "date": "2017-06-16T08:16:06+0000",
            "content": "Very very cool! ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16051574"
        },
        {
            "date": "2017-10-07T11:47:54+0000",
            "content": "I've made some changes to the base script to:\n\n\tUse URL + body instead of passing the arguments in the URL (that did not work, commands and parameters are part of the body)\n\tAdd type documentation\n\tAbility to add new types and the mapping between them\n\tDefaults for unmappable types/commands.\n\n\n\nAt the moment the script just prints a curl command to shoot and get the desired output but it can be just executed if we want to.\n\nIf this looks interesting there are still a bunch of \"TODO\" like:\n\n\tSupporting non-command actions (just retrieve the list of collections for example)\n\tSupport other endpoints \"cores\", etc.\n\tAutomagically discover sub-URLs (Specific operations on a collection for example)\n\tAdd more types like array\n\n\n\nThis is how using it looks like:\n\n\n$ ./solr_cli.py --help\nusage: solr_cli.py [-h]\n                   {collection:create,collection:create-alias,collection:delete-alias,backup-collection,restore-collection}\n                   ...\n\nCLI tool to interact with Solr Admin REST API.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncollections:\n  List of commands to manipulate collections\n\n  {collection:create,collection:create-alias,collection:delete-alias,backup-collection,restore-collection}\n    collection:create   Create a collection.\n                        https://lucene.apache.org/solr/guide/collections-\n                        api.html#create\n    collection:create-alias\n                        Allows one or more collections to be known by another\n                        name. If this command is used on an existing alias,\n                        the existing alias will be replaced with the new\n                        collection details.\n                        https://lucene.apache.org/solr/guide/collections-\n                        api.html#createalias\n    collection:delete-alias\n                        Deletes a collection alias\n                        https://lucene.apache.org/solr/guide/collections-\n                        api.html#deletealias\n    backup-collection   Backup Solr indexes and configurations for a specific\n                        collection. One copy of the indexes will be taken from\n                        each shard, and the config set for the collection will\n                        also be copied.\n                        https://lucene.apache.org/solr/guide/collections-\n                        api.html#backup\n    restore-collection  Restore Solr indexes and configurations from a backup.\n                        You cannot restore into the same collection you took\n                        the backup from. The target collection must not exist\n                        before calling this command, as it will be created by\n                        the restore action. The new collection will have the\n                        same number of shards and replicas as the original\n                        collection, and all routing strategies will be\n                        retained.\n                        https://lucene.apache.org/solr/guide/collections-\n                        api.html#restore\n\nAll options and parameters are generated dynamically. Check the Solr Reference\nguide for further documentation on the API.\n\n$ ./solr_cli.py collection:create -h\nusage: solr_cli.py collection:create [-h] [--config str]\n                                     [--router json-object] [--numShards int]\n                                     [--shards str] [--replicationFactor int]\n                                     [--nrtReplicas int] [--tlogReplicas int]\n                                     [--pullReplicas int]\n                                     [--nodeSet solr-array]\n                                     [--shuffleNodes bool]\n                                     [--maxShardsPerNode int]\n                                     [--autoAddReplicas bool]\n                                     [--rule solr-array] [--snitch solr-array]\n                                     [--properties json-object] [--async str]\n                                     [--http_method {POST}]\n                                     str\n\npositional arguments:\n  str                   The name of the collection to be created.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config str          The name of the configuration set (which must already\n                        be stored in ZooKeeper) to use for this collection. If\n                        not provided, Solr will default to the collection name\n                        as the configuration set name.\n  --router json-object  These properties define how to distribute documents\n                        across a collection's shards.\n  --numShards int       The number of shards to be created as part of the\n                        collection. Shards are logical partitions of a single\n                        collection. Each shard has at least one replica, but\n                        more replicas for each shard can be defined with the\n                        replicationFactor property. This is a required\n                        parameter when using the 'compositeId' router.\n  --shards str          A comma-separated list of shard names, e.g.,\n                        shard-x,shard-y,shard-z. This is a required parameter\n                        when using the 'implicit' router.\n  --replicationFactor int\n                        The number of NRT replicas to be created for each\n                        shard. Replicas are physical copies of each shard,\n                        acting as failover for the shard.\n  --nrtReplicas int     The number of NRT replicas to be created for each\n                        shard. Replicas are physical copies of each shard,\n                        acting as failover for the shard. Replicas of type NRT\n                        will be updated with each document that is added to\n                        the cluster, and can use \"softCommits\" to get a new\n                        view of the index in Near Real Time. This parameter\n                        works in the same way as 'replicationFactor'\n  --tlogReplicas int    The number of TLOG replicas to be created for each\n                        shard. TLOG replicas update their transaction log for\n                        every update to the cluster, but only the shard leader\n                        updates the local index, other TLOG replicas will use\n                        segment replication and copy the latest index files\n                        from the leader.\n  --pullReplicas int    The number of PULL replicas to be created for each\n                        shard. PULL replicas don't receive copies of the\n                        documents on update requests, they just replicate the\n                        latest segments periodically from the shard leader.\n                        PULL replicas can't become shard leaders, and need at\n                        least one active TLOG(recommended) or NRT replicas in\n                        the shard to replicate from.\n  --nodeSet solr-array  Defines nodes to spread the new collection across. If\n                        not provided, the collection will be spread across all\n                        live Solr nodes. The names to use are the 'node_name',\n                        which can be found by a request to the cluster/nodes\n                        endpoint. A special value of EMPTY will create no\n                        shards or replicas for the new collection. In this\n                        case, shards and replicas can be added later with the\n                        add-replica command available on the\n                        /collections/{collection}/shards endpoint.\n  --shuffleNodes bool   Controls whether or not the shard-replicas created for\n                        this collection will be assigned to the nodes\n                        specified by the nodeSet property in a sequential\n                        manner, or if the list of nodes should be shuffled\n                        prior to creating individual replicas. A 'false' value\n                        makes the results of a collection creation predictable\n                        and gives more exact control over the location of the\n                        individual shard-replicas, but 'true' can be a better\n                        choice for ensuring replicas are distributed evenly\n                        across nodes. This property is ignored if nodeSet is\n                        not also specified.\n  --maxShardsPerNode int\n                        When creating collections, the shards and/or replicas\n                        are spread across all available, live, nodes, and two\n                        replicas of the same shard will never be on the same\n                        node. If a node is not live when the collection is\n                        created, it will not get any parts of the new\n                        collection, which could lead to too many replicas\n                        being created on a single live node. Defining\n                        maxShardsPerNode sets a limit on the number of\n                        replicas can be spread to each node. If the entire\n                        collection can not be fit into the live nodes, no\n                        collection will be created at all.\n  --autoAddReplicas bool\n                        When set to true, enables auto addition of replicas on\n                        shared file systems (such as HDFS). See\n                        https://lucene.apache.org/solr/guide/running-solr-on-\n                        hdfs.html for more details on settings and overrides.\n  --rule solr-array     Defines rules for where replicas should be located in\n                        a cluster.\n  --snitch solr-array\n  --properties json-object\n                        Allows adding core.properties for the collection. Some\n                        examples of core properties you may want to modify\n                        include the config set, the node name, the data\n                        directory, among others.\n  --async str           Defines a request ID that can be used to track this\n                        action after it's submitted. The action will be\n                        processed asynchronously.\n  --http_method {POST}  HTTP Method to use.\n\n$ ./solr_cli.py collection:create example_collection --numShards=1\ncurl http://localhost:8983/v2/collections/collection:create -X POST -d '{'collection:create': {'name': 'example_collection', 'numShards': 1}}'\n\n\n\nAll \"known\" types are validated. Even complex ones. Example:\n\n\n$ ./solr_cli.py collection:create example_collection --numShards=1 --properties=\"not_an_object\"\nusage: solr_cli.py collection:create [-h] [--config str]\n                                     [--router json-object] [--numShards int]\n                                     [--shards str] [--replicationFactor int]\n                                     [--nrtReplicas int] [--tlogReplicas int]\n                                     [--pullReplicas int]\n                                     [--nodeSet solr-array]\n                                     [--shuffleNodes bool]\n                                     [--maxShardsPerNode int]\n                                     [--autoAddReplicas bool]\n                                     [--rule solr-array] [--snitch solr-array]\n                                     [--properties json-object] [--async str]\n                                     [--http_method {POST}]\n                                     str\nsolr_cli.py collection:create: error: argument --properties: 'not_an_object' is not valid JSON\n\n$ ./solr_cli.py collection:create example_collection --numShards=1 --properties=\"{}\"\ncurl http://localhost:8983/v2/collections/collection:create -X POST -d '{'collection:create': {'name': 'example_collection', 'numShards': 1, 'properties': '{}'}}'\n\n$ ./solr_cli.py collection:create example_collection --numShards=1 --properties=\"{}\"\n\n\n\nIf it sounds interesting I can refine them and send a PR to the GitHub mirror. But not sure where would this script live or whether we want this just as documentation.\n\nI'll attach the current script ",
            "author": "Mario Corchero",
            "id": "comment-16195659"
        },
        {
            "date": "2017-10-07T12:00:55+0000",
            "content": "GitHub user mariocj89 opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/260\n\n    SOLR-10888: Python script to access V2 APIs\n\n    Python script that uses _introspect to dynamically create a CLI to perform actions which target the v2 API.\n\n    This is still in discussion in SOLR-10888(https://issues.apache.org/jira/browse/SOLR-10888) but thought having the PR will probably help the review/discussion better than just the attachment.\n\n    Idea by @cpoerschke \ud83d\ude04 \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/mariocj89/lucene-solr v2-api-cli\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/260.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #260\n\n\ncommit 7a95e1be0ed8330bafe6ad78fb2c63bd43293057\nAuthor: Mario Corchero-jimenez <mcorcherojim@bloomberg.net>\nDate:   2017-10-07T11:53:38Z\n\n    Add CLI for v2 API\n\n    Python scripts that uses _introspect to dinamically create a CLI to\n    perform actions which target the v2 API.\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16195661"
        }
    ]
}