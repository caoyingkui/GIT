{
    "id": "LUCENE-1637",
    "title": "Getting an IndexReader from a committed IndexWriter",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.9",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "I just had a look at the job done in IndexWriter in order to get an IndexReader with all the current ongoing changes done using the IndexWriter. This feature is very useful, and I was wondering if another feature, which (I think) is simple to implement (compared to the previous one) might make sense. \n\n   Many times, an application opens an IndexWriter, does whatever changes it does, and then commits the changes. It would be nice to get an IndexReader (read only one is fine) that corresponds to the committed (or even closed) IndexWriter. This will allow for a cache of IndexReader that is already used to be updated with a fresh IndexReader, without the need to reopen one (which should be slower than opening one based on the IndexWriter information). The main difference is the fact that the mentioned IndexReader could still be reopened without the need to throw an AlreadyClosedException. \n\n   More information can be found here: http://www.nabble.com/Getting-an-IndexReader-from-a-committed-IndexWriter-td23551978.html",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-05-21T17:16:31+0000",
            "content": "Couldn't you simply call IW.getReader() just after calling IW.commit()?\n\nOr just IndexReader.reopen?  (The extra work that reopen does vs IndexWriter.getReader is fairly minor \u2013 the former must find & open the segments_N file; after that it's the same). ",
            "author": "Michael McCandless",
            "id": "comment-12711701"
        },
        {
            "date": "2011-01-26T11:46:02+0000",
            "content": "No response was sent on this issue, so I close it! ",
            "author": "Uwe Schindler",
            "id": "comment-12986953"
        }
    ]
}