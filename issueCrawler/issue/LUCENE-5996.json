{
    "id": "LUCENE-5996",
    "title": "Add Collections.shuffle(List) to the forbidden APIs",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0"
        ]
    },
    "description": "I hit a non-reproducible failure that was due to the use of Collections.shuffle(List). I think we should forbid it and advise to use Collections.shuffle(List, Random) instead to make test failures reproducible?",
    "attachments": {
        "LUCENE-5996.patch": "https://issues.apache.org/jira/secure/attachment/12673322/LUCENE-5996.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14161650",
            "author": "Michael McCandless",
            "content": "+1 ",
            "date": "2014-10-07T08:52:07+0000"
        },
        {
            "id": "comment-14161668",
            "author": "Adrien Grand",
            "content": "Here is a patch. I did some reflection in Solr's OverseerCollectionProcessor in order to initialize the random instance from the current test seed whenever possible. If someone could review that part, that would be great! ",
            "date": "2014-10-07T09:15:02+0000"
        },
        {
            "id": "comment-14161736",
            "author": "Varun Thacker",
            "content": "Hi Adrien,\n\nSmall suggestion - \n\n\n+    } catch (Throwable t) {\n+      // ignore\n+    }\n+    if (r == null) {\n+      r = new Random();\n+    }\n\n\n\nInstead of having an explicit if condition can we move creating \n\nr = new Random() \n\n inside the catch ? ",
            "date": "2014-10-07T10:28:55+0000"
        },
        {
            "id": "comment-14161738",
            "author": "Dawid Weiss",
            "content": "Instead of this:\n\n+  private static final Random RANDOM;\n+  static final boolean RANDOM_INITIALIZED_FROM_TEST_SEED; // for testing\n+  static {\n+    // We try to make things reproducible in the context of our tests by initializing the random instance\n+    // based on the current seed\n+    // Since randomized-testing is only a test dependency, we use reflection to access the seed\n+    Random r = null;\n+    boolean initializedFromSeed = false;\n+    try {\n+      Class<?> randomizedContextClass = Class.forName(\"com.carrotsearch.randomizedtesting.RandomizedContext\");\n+      Method getCurrent = randomizedContextClass.getMethod(\"current\");\n+      Object currentContext = getCurrent.invoke(null);\n+      Method getRunnerSeedAsString = randomizedContextClass.getMethod(\"getRunnerSeedAsString\");\n+      Object seed = getRunnerSeedAsString.invoke(currentContext);\n+      r = new Random(seed.hashCode());\n+      initializedFromSeed = true;\n+    } catch (Throwable t) {\n+      // ignore\n+    }\n+    if (r == null) {\n+      r = new Random();\n+    }\n+    RANDOM = r;\n+    RANDOM_INITIALIZED_FROM_TEST_SEED = initializedFromSeed;\n+  }\n+\n\n\n\nYou may just as well get a hash of System.getProperty(\"tests.seed\"). The above code is not right anyway because randomized context should not be used from final static blocks (<clinit> may be executed before the test runner has a chance to see the class). Randomized context is only available once the class is under testing (generally between BeforeClass...AfterClass hooks or a class rule).\n ",
            "date": "2014-10-07T10:37:38+0000"
        },
        {
            "id": "comment-14161739",
            "author": "Dawid Weiss",
            "content": "StringHelper has a similar hack which you may copy from:\n\n  static {\n    String prop = System.getProperty(\"tests.seed\");\n    if (prop != null) {\n      // So if there is a test failure that relied on hash\n      // order, we remain reproducible based on the test seed:\n      if (prop.length() > 8) {\n        prop = prop.substring(prop.length()-8);\n      }\n      GOOD_FAST_HASH_SEED = (int) Long.parseLong(prop, 16);\n    } else {\n      GOOD_FAST_HASH_SEED = (int) System.currentTimeMillis();\n    }\n  }\n\n ",
            "date": "2014-10-07T10:38:25+0000"
        },
        {
            "id": "comment-14161741",
            "author": "Adrien Grand",
            "content": "Thanks Dawid, this is exactly what I need! ",
            "date": "2014-10-07T10:40:00+0000"
        },
        {
            "id": "comment-14161743",
            "author": "Dawid Weiss",
            "content": "I think the StringHelper hack is actually trying to do too much anyway \u2013 it'd be sufficient to do prop.hashCode() if it's available, regardless of its content (the prop.length() > 8 is not really needed). String.hashCode should be identical on all platforms, so it'll be consistent. The interpretation of what the seed is is irrelevant here.\n\nIf you have a minute you can fix StringHelper as well, thanks Adrien! ",
            "date": "2014-10-07T10:44:17+0000"
        },
        {
            "id": "comment-14161919",
            "author": "Adrien Grand",
            "content": "Here is a new patch that just uses the hashCode of the \"tests.seed\" property as a random seed and includes Dawid's suggestion about StringHelper. ",
            "date": "2014-10-07T14:18:19+0000"
        },
        {
            "id": "comment-14162062",
            "author": "ASF subversion and git services",
            "content": "Commit 1629920 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1629920 ]\n\nLUCENE-5996: Collections.shuffle(List) is now a forbidden API. ",
            "date": "2014-10-07T16:22:40+0000"
        },
        {
            "id": "comment-14162071",
            "author": "ASF subversion and git services",
            "content": "Commit 1629922 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1629922 ]\n\nLUCENE-5996: Collections.shuffle(List) is now a forbidden API. ",
            "date": "2014-10-07T16:26:17+0000"
        },
        {
            "id": "comment-14332806",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:00+0000"
        }
    ]
}