{
    "id": "SOLR-12833",
    "title": "Use timed-out lock in DistributedUpdateProcessor",
    "details": {
        "type": "Improvement",
        "status": "Open",
        "labels": "",
        "fix_versions": [
            "master (8.0)"
        ],
        "components": [
            "update",
            "UpdateRequestProcessors"
        ],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "7.5,                                            master (8.0)"
    },
    "description": "There is a synchronize block that blocks other update requests whose IDs fall in the same hash bucket.\u00a0The update\u00a0waits forever until it gets the lock at the\u00a0synchronize block, this can be a problem in some cases.\n\n\u00a0\n\nSome add/update requests (for example updates with spatial/shape analysis) like may take time (30+ seconds or even more), this would the request time out and fail.\n\nClient may retry the same requests multiple times or several minutes, this would make things worse.\n\nThe server side receives all the update requests but all except one can do nothing, have to wait there. This wastes precious memory and cpu resource.\n\nWe have seen the case 2000+ threads are blocking at the\u00a0synchronize lock, and only a few\u00a0updates are making progress. Each thread takes 3+ mb memory which causes OOM.\n\nAlso if the update can't get the lock in expected time range, its better to fail fast.\n\n\u00a0\n\nWe can have one configuration in solrconfig.xml:\u00a0updateHandler/versionLock/timeInMill, so users can specify how long they want to wait the version bucket lock.\n\nThe default value can be -1, so it behaves same - wait forever until it gets the lock.",
    "attachments": {
        "SOLR-12833.patch": "https://issues.apache.org/jira/secure/attachment/12950572/SOLR-12833.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16639043",
            "content": "Here is the PR:\u00a0\n\nhttps://github.com/apache/lucene-solr/pull/463/files\n\n\u00a0 ",
            "author": "jefferyyuan",
            "date": "2018-10-04T23:37:19+0000"
        },
        {
            "id": "comment-16663804",
            "content": "The default value can be -1, so it behaves same - wait forever until it gets the lock.\n\nI wonder if we should just use a default timeout? It seems unlikely most users will end up adjusting this, so we should consider what the best default behavior is. For example, we know a single update shouldn't take 10 minutes, so it seems like some default here makes sense? ",
            "author": "Mark Miller",
            "date": "2018-10-25T14:23:22+0000"
        },
        {
            "id": "comment-16665771",
            "content": "Thanks Mark Miller, changed default timeout to 10mins: same as default client read timeout. ",
            "author": "jefferyyuan",
            "date": "2018-10-26T23:44:42+0000"
        },
        {
            "id": "comment-16684131",
            "content": "Cool, I'll try and get this in soon. ",
            "author": "Mark Miller",
            "date": "2018-11-12T17:24:44+0000"
        },
        {
            "id": "comment-16687573",
            "content": "Hey jefferyyuan, I was looking through the patch and I have some thoughts on some slight renaming, but I can handle that, otherwise it's looking okay.\n\nOne question I had was when try lock fails - don't we still go down the logic as if we had gotten the lock?\n\n     vBucketLocked = tryGetVersionBucketLock(bucket);\n      bucket.wakeUpAll();\n      //just in case anyone is waiting let them know that we have a new update\n      // we obtain the version when synchronized and then do the add so we can ensure that\n      // if version1 < version2 then version1 is actually added before version2.\n\n      // even if we don't store the version field, synchronizing on the bucket\n      // will enable us to know what version happened first, and thus enable\n      // realtime-get to work reliably.\n      // TODO: if versions aren't stored, do we need to set on the cmd anyway for some reason?\n      // there may be other reasons in the future for a version on the commands\n\n      if (versionsStored) {\n\n\n ",
            "author": "Mark Miller",
            "date": "2018-11-15T07:09:17+0000"
        },
        {
            "id": "comment-16688670",
            "content": "Hi, Mark Miller, the\u00a0tryGetVersionBucketLock will throw exception if not able to get the lock.\n\n\tit's kind of confusing, as it returns true if able to get lock, else throw exception.\n\tThe reason I am doing is:\n\t\n\t\tI want it to return a value(true or false), so we can unlock it at the finally if its true\n\t\tI don't want to put another if else.\n\t\n\t\n\tI changed the method name to tryGetLockElseThrow to be a little bit more readable.\n\n ",
            "author": "jefferyyuan",
            "date": "2018-11-15T21:21:03+0000"
        },
        {
            "id": "comment-16688695",
            "content": "Yeah, it's confusing because Java already has the ida of tryLock basically and this doesn't match those semantics.\n\nIt's also confusing that it returns vBucketLocked. If it throws an exception, you don't expect it to return true or false. Even now, the semantics of this method seem confusing.\n\n\u00a0\n\nMaybe this bucket object should work more like a Lock object - you have a getLock method and a releaseLock method and you always eventually get the lock or it throws a timeout exception. ",
            "author": "Mark Miller",
            "date": "2018-11-15T21:47:36+0000"
        },
        {
            "id": "comment-16698416",
            "content": "Let me mess with this a bit and put up a patch building on yours as a proposed way forward. ",
            "author": "Mark Miller",
            "date": "2018-11-26T02:15:13+0000"
        },
        {
            "id": "comment-16708910",
            "content": "Hey jefferyyuan, how does this approach look to you?\n\nIt keeps the api more like the good practice use of a tryLock pattern.\n\nWe can also just make a timeout the main path -\u00a0 those that want to mimic unlimited can set it to max int - so I don't know that we need as much additional testing - by pretty much just passing on calls to the underlying lock, we can count on that working as advertised. ",
            "author": "Mark Miller",
            "date": "2018-12-04T15:56:07+0000"
        },
        {
            "id": "comment-16709103",
            "content": "It looks great for me and thanks, Mark Miller. ",
            "author": "jefferyyuan",
            "date": "2018-12-04T18:55:07+0000"
        },
        {
            "id": "comment-16711586",
            "content": "Commit b9a966e5f75b77944f61e88a30c002dbc22c504e in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b9a966e ]\n\nSOLR-12833: Add configurable timeout to VersionBucket lock. ",
            "author": "ASF subversion and git services",
            "date": "2018-12-06T15:26:54+0000"
        },
        {
            "id": "comment-16711589",
            "content": "Commit e5329f27c036b1017feb15651aca6dd374584308 in lucene-solr's branch refs/heads/branch_7x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e5329f2 ]\n\nSOLR-12833: Add configurable timeout to VersionBucket lock. ",
            "author": "ASF subversion and git services",
            "date": "2018-12-06T15:28:50+0000"
        },
        {
            "id": "comment-16712579",
            "content": "Commit b9a966e5f75b77944f61e88a30c002dbc22c504e in lucene-solr's branch refs/heads/jira/http2 from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b9a966e ]\n\nSOLR-12833: Add configurable timeout to VersionBucket lock. ",
            "author": "ASF subversion and git services",
            "date": "2018-12-07T09:57:25+0000"
        }
    ]
}