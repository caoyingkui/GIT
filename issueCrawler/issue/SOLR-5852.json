{
    "id": "SOLR-5852",
    "title": "Add CloudSolrServer helper method to connect to a ZK ensemble",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We should have a CloudSolrServer constructor which takes a list of ZK servers to connect to.\n\nSomething Like \n\npublic CloudSolrServer(String... zkHost);\n\n\n\n\n\tDocument the current constructor better to mention that to connect to a ZK ensemble you can pass a comma-delimited list of ZK servers like\nzk1:2181,zk2:2181,zk3:2181\n\n\n\n\n\tThirdly should getLbServer() and getZKStatereader() be public?",
    "attachments": {
        "SOLR-5852.patch": "https://issues.apache.org/jira/secure/attachment/12634168/SOLR-5852.patch",
        "SOLR-5852-SH.patch": "https://issues.apache.org/jira/secure/attachment/12635742/SOLR-5852-SH.patch",
        "SOLR-5852_FK.patch": "https://issues.apache.org/jira/secure/attachment/12634235/SOLR-5852_FK.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Varun Thacker",
            "id": "comment-13931782",
            "date": "2014-03-12T13:55:55+0000",
            "content": "Simple Patch.\n\n\n\tAdds Javadocs to the current constructor to detail on how to connect to a ZK ensemble\n\tAdds another constructor which takes an list of servers and converts them into a comma separated list of servers.\n\n "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13932233",
            "date": "2014-03-12T19:23:25+0000",
            "content": "Varun Thacker I think that getLbServer() may be restricted (if errors are resolved at test classes) but getZKStatereader() can be used to access cluster state for client APIs. "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13932265",
            "date": "2014-03-12T19:46:58+0000",
            "content": "Varun Thacker I've improved your patched and attached. You can check it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13937054",
            "date": "2014-03-16T09:47:54+0000",
            "content": "Varun Thacker has proposed that we include the javadoc changes for SOLR-4620 on this issue.  Before proceeding with this plan, I would like to hear from committers with more seniority as to whether this change is a good idea.\n\nMy own gut reaction is that we should just stick with the format already provided by zookeeper, especially since that's the only format that Solr itself accepts when starting SolrCloud.\n\nThe current patch does not allow you to specify a chroot.  You could check the starting character and assume it's a chroot if it starts with a forward slash.  Unless you limited this check to the last argument, you'd need to throw an exception if there were multiple chroots found and they were not all identical.\n\nWhen I looked into whether it was possible to have two methods, here's what I found: Eclipse does allow me to have foo(String,String...) as well as foo(String...).  This surprised me, because Java would likely ignore one of them.  Makes me wonder whether this is an oversight in the JDK, Eclipse, or both.  It wasn't even flagged by a FindBugs run. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13937059",
            "date": "2014-03-16T09:54:55+0000",
            "content": "Scratch what I just said about Eclipse allowing multiple ambiguous methods.  It actually does flag the problem, but it does it when you try to USE the method, not at the actual method definitions. "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13937060",
            "date": "2014-03-16T10:01:48+0000",
            "content": "Shawn Heisey I'will improve the patch as you said. "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13937853",
            "date": "2014-03-17T14:24:00+0000",
            "content": "Shawn Heisey ConnectStringParser at Zookeeper checks chroot and other invalid situations. We can give that checking responsibility to Zookeeper. If anything changes within Zookeeper check condition our CloudSolrServer will not be affected from it because we will pass that check to Zookeeper and it will handle it.\n\nI think that we can handle chroot with current situation too. Zookeeper.java works like that: 127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a so I can improve the javadoc and include that: if there is a chroot add it to the end of the last host string (this is how original Zookeeper code works). All in all if anybody sends multiple chroot definitions or anything else Zookeeper will return an error.\n\nAnother approach is accepting like that: 127.0.0.1:3000/app/a,127.0.0.1:3001/app/a,127.0.0.1:3002/app/a so parsing if there any chroot and valid for all hosts etc. "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13937882",
            "date": "2014-03-17T14:57:50+0000",
            "content": "I've improved the javadoc. We can use whether SOLR-4620 or this. On the other hand I can implement another patch according to second approach at my previous comment. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13941505",
            "date": "2014-03-20T08:04:04+0000",
            "content": "The patches already submitted didn't have the kind of flexibility and error reporting that I hoped for.  I've built a new patch for this issue.  This patch also addresses SOLR-4620, eliminates all but one warning in CloudSolrServer, and includes tests for the new constructor.\n\nThere are probably at least two additional test cases that need to be created. "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13941576",
            "date": "2014-03-20T10:03:05+0000",
            "content": "Shawn Heisey Actually I tried to mention different approaches at my comment I and attached a patch for first style. User can pass chroot as a parameter at constructor and so there will be no need to pass chroot at the end of ever Host:Port pair and need to check it at constructor. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13941760",
            "date": "2014-03-20T14:12:35+0000",
            "content": "Hey Shawn:\n\nI tried to apply your patch to a new checkout for trunk and had merge conflicts. It looks like the test code changed. Could you regenerate the patch?\n\nThanks! "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13941852",
            "date": "2014-03-20T15:41:10+0000",
            "content": "I just made that patch a few hours ago!\n\nNew patch coming up as soon as I work my way through the conflicts. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13941912",
            "date": "2014-03-20T16:31:01+0000",
            "content": "Yeah, I saw that. Was it against trunk or 4x? That might account for the difference.\n\nBTW, I thought I'd mention that sleep is a good thing . "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13941930",
            "date": "2014-03-20T16:41:12+0000",
            "content": "New patch against trunk.  Previous patch was against trunk too, but a couple of hours after I went to bed, a conflicting patch was committed.\n\nThis does make a change to CloudSolrServerTest bits that just got added, but only to eliminate warnings.  It does not change the function. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13941974",
            "date": "2014-03-20T17:09:54+0000",
            "content": "As I read this, I don't quite see the utility of offering all the different ways\nof specifying the ensemble.\n\n1> (\"host1:2181\", \"/mychroot\")\n2> (\"127.0.0.1:3000\", \"127.0.0.1:3001\", \"127.0.0.1:3002\")\n3> (\"localhost:2181\", \"localhost:2181\", \"localhost:2181/solrtwo\")\n4> (\"zoo1:2181\", \"zoo2:2181\", \"zoo3:2181\", \"/solr-three\")\n5> (\"zoo1.example.com:2181\", \"zoo2.example.com:2181\",\"zoo3.example/com:2181\",\"/solr-three\")\n6> (\"zoo1:2181/root\", \"zoo2:2181/root\", \"zoo3:2181/root\")\n\nAren't these all handled by the \"typical\" ZK ensemble connection string? I.e.\n1> \"host1:2101/mychroot\"\n2> \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\"\n3> \"localhost:2181,localhost:2181,localhost:2181/solrtwo\"\n4> like 3\n5> like 3\n6> like 3\n\nI confess I'm just looking at it from a rather ignorant level, but it seems\nlike this would add complexity for no added functionality. Of course I may be \nmissing a lot, if there are places where this kind of processing is\nalready being done and this moves things to a c'tor that would\nbe a reason.\n\nI'd rather have a single form than multiple forms, unless the multiple\nforms give me added functionality. Otherwise, one adds maintenance\nwithout adding value..\n\nLet me know if I've missed the boat here.\n "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13942046",
            "date": "2014-03-20T17:54:10+0000",
            "content": "Erick Erickson could you check my comments and my patch? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13942057",
            "date": "2014-03-20T17:56:05+0000",
            "content": "As I read this, I don't quite see the utility of offering all the different ways of specifying the ensemble.\nAren't these all handled by the \"typical\" ZK ensemble connection string?\n\nI actually agree.  But if a method like this is created, that's how I would want to do it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13942112",
            "date": "2014-03-20T18:42:49+0000",
            "content": "The inclusion of my patch should not be taken as an endorsement on this issue.  I had these ideas floating around in my head that wanted to be put into actual code, so I acquiesced and wrote it.\n\nI don't believe we need this at all.  If there's consensus that disagrees, then I think it requires the robustness that I put into my patch. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13943332",
            "date": "2014-03-21T18:11:05+0000",
            "content": "We should have a CloudSolrServer constructor which takes a list of ZK servers to connect to.\n\n+1\n\nDocument the current constructor better to mention that to connect to a ZK ensemble you can pass a comma-delimited list of ZK servers like zk1:2181,zk2:2181,zk3:2181\n\n+1 \n\nThirdly should getLbServer() and getZKStatereader() be public?\n\nI think so - we could mark them @lucene.experimental though. Or really, we just need an expert tag. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13943346",
            "date": "2014-03-21T18:25:03+0000",
            "content": "Mark Miller Hmmm, see my comment 20-Mar at 13:09. Do you really think that supporting all those variants is worthwhile when they can all be satisfied via the current code?\n\nOr are you just saying that we need to doc that the current connection string would handle all those case? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13943358",
            "date": "2014-03-21T18:34:03+0000",
            "content": "I think having a list option is nice.\n\nPersonally, I'd probably look at implementing it as something like (String chroot, List<String> hosts) though. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13943386",
            "date": "2014-03-21T18:51:47+0000",
            "content": "Yeah, I can live with that 'cause it doesn't require regexes, or really any complex logic.\n\nSomething like this?\nif (! isGoodRoot(chroot)) throw error\nif (! allHostsWellFormed(hosts)) throw an error\n\nthis.zkHost = StringUtils.join(hosts, ',') +  normalized(chroot); "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13943400",
            "date": "2014-03-21T19:03:14+0000",
            "content": "Sometimes you can't see the forest because you're so busy looking at trees.  That is an awesome method signature! "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13943460",
            "date": "2014-03-21T19:47:03+0000",
            "content": "Personally, I'd probably look at implementing it as something like (String chroot, List<String> hosts) though.\n\nThis looks like a perfect solution.  "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13943613",
            "date": "2014-03-21T21:53:35+0000",
            "content": "Yeah, I can live with that 'cause it doesn't require regexes, or really any complex logic.\n\nI think so. I tried to explain same idea that we should pass it to Zookeeper class. Because if any logic changes within Zookeeper class we have to change our constructor too. \n\n(String chroot, List<String> hosts) \n\nthis is a nice signature for us.\n\nIt is not important but:  (List<String> hosts, String chroot) maybe good because of chroot is not mandatory and it seems me more human readeble not to pass a null value at first paramater. Also there may be a signature as like (List<String> hosts) too for whom does not use a chroot parameter.\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13943633",
            "date": "2014-03-21T22:07:17+0000",
            "content": "New patch.  Will throw IAE if the chroot doesn't start with a forward slash, but no other error checking.  It uses Furkan's order change and Collection in the signature. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13943641",
            "date": "2014-03-21T22:12:27+0000",
            "content": "Forgot  to change the parameter order in the javadocs.  Fixed. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14072773",
            "date": "2014-07-24T04:17:13+0000",
            "content": "\n\tUpdated Shawn Heisey's patch to trunk\n\tModified CloudSolrServerMultiConstructorTest to make the tests random.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14166523",
            "date": "2014-10-10T07:33:02+0000",
            "content": "Updating Varun's patch to trunk.\n\nMy +1 to commit. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14166900",
            "date": "2014-10-10T14:16:40+0000",
            "content": "My last patch had messed up javadocs because of a bad merge. This patch fixes it. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169332",
            "date": "2014-10-13T14:23:25+0000",
            "content": "Commit 1631409 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1631409 ]\n\nSOLR-5852: Add CloudSolrServer helper method to connect to a ZK ensemble "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169334",
            "date": "2014-10-13T14:24:48+0000",
            "content": "Commit 1631411 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1631411 ]\n\nSOLR-5852: Add CloudSolrServer helper method to connect to a ZK ensemble "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14169336",
            "date": "2014-10-13T14:25:38+0000",
            "content": "Thanks everyone! "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332528",
            "date": "2015-02-23T05:00:30+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}