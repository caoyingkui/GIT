{
    "id": "LUCENE-4628",
    "title": "Add common terms query to gracefully handle very high frequent terms dynamically",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I had this problem quite a couple of times the last couple of month that searches very often contained super high frequent terms and disjunction queries became way too slow. The main problem was that stopword filtering wasn't really an option since in the domain those high-freq terms where not really stopwords though. So for instance searching for a song title \"this is it\" or for a band \"A\" didn't really fly with stopwords. I thought about that for a while and came up with a query based solution that decides based on a threshold if something is considered a stopword or not and if so it moves the term in two boolean queries one for high-frequent and one for low-frequent such that those high frequent terms are only matched if the low-frequent sub-query produces a match. Yet if all terms are high frequent it makes the entire thing a Conjunction which gave me reasonable results as well as performance.",
    "attachments": {
        "LUCENE-4628.patch": "https://issues.apache.org/jira/secure/attachment/12560795/LUCENE-4628.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-13T16:16:38+0000",
            "content": "here is a patch as a start. this query does a lot of things right now maybe we can break something out of it. ",
            "author": "Simon Willnauer",
            "id": "comment-13531140"
        },
        {
            "date": "2012-12-13T16:24:58+0000",
            "content": "+1, nice. ",
            "author": "Mark Miller",
            "id": "comment-13531145"
        },
        {
            "date": "2012-12-13T17:14:28+0000",
            "content": "I like the idea too.\n\nMaybe add a QueryUtils.check to the test since its a new query (just for equals/hashcode checking)\nShould we throw IAE in the ctor if the Occur is MUST_NOT?\nMaybe make lowFreqBoost and highFreqBoost protected in case someone wants to subclass and override just buildQuery to customize what it makes? ",
            "author": "Robert Muir",
            "id": "comment-13531195"
        },
        {
            "date": "2012-12-13T20:01:44+0000",
            "content": "next iteration...\n\n\n\tadded more tests including QueryUtils.check (thanks rob good point)\n\tthrow IAE if MUST_NOT is passed and added javadocs for it\n\tmade low/highFreqBoost protected and removed setters & getters for it.\n\tadded changes entry.\n\n\n\nThis lives now in the query module and I think that fine for that query we can still move it into core if needed.  ",
            "author": "Simon Willnauer",
            "id": "comment-13531415"
        },
        {
            "date": "2012-12-14T08:58:14+0000",
            "content": "[trunk commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1421743\n\nLUCENE-4628: Added CommonTermsQuery ",
            "author": "Commit Tag Bot",
            "id": "comment-13532168"
        },
        {
            "date": "2012-12-14T09:34:10+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1421763\n\nLUCENE-4628: Added CommonTermsQuery ",
            "author": "Commit Tag Bot",
            "id": "comment-13532189"
        },
        {
            "date": "2012-12-20T21:09:58+0000",
            "content": "Why not just use CommonGrams? ",
            "author": "David Smiley",
            "id": "comment-13537379"
        },
        {
            "date": "2012-12-21T10:59:26+0000",
            "content": "hey david, I suggest you look a bit closer at the code. This serves a similar usecase but it's way more powerful. here are some differences:\n\n\n\tCommonGrams need to be build at index and query time - CommonTermsQuery can be used on any index\n\tCommonGrams need a prebuild dictionary of high freq terms - CommonTermsQuery can efficiently detect high freq terms at query time and \"rewrite\" the query\n\tCommonGrams can not search for high freq terms in conjunction - CommonTermsQuery can do stuff like \"this is it\" or \"to be or not to be\" in a conjunction query and still be reasonable in terms of performance.\n\n\n\nmakes sense? ",
            "author": "Simon Willnauer",
            "id": "comment-13537797"
        },
        {
            "date": "2012-12-21T19:52:42+0000",
            "content": "I did look at the code, and I understand that this makes its decisions dynamically at search time without needing any index changes.  But from what I can tell, there is no positional information and so a search for \"this is it\" would erroneously match \"this is NOT it\" in indexed text.  Ouch.  CommonGrams doesn't have this problem.  And CommonTermsQuery can sometimes change the intended AND/OR semantics, right?  At least CTQ can be used when a phrase query is not used, and the AND/OR issue is maybe not a big deal.  I guess these two techniques are complementary and can be used at the same time. ",
            "author": "David Smiley",
            "id": "comment-13538352"
        },
        {
            "date": "2012-12-21T20:39:40+0000",
            "content": "I think there is some confusion here:\n\n\tCommonGrams is for speeding up PHRASE queries.\n\tThis feature is for speeding up BOOLEAN queries.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13538391"
        },
        {
            "date": "2013-01-03T14:31:52+0000",
            "content": "This is nice.\n\nWould it make sense, perhaps, to base the cut-off on the cumulative document frequency \u2013 so sort terms by DF, then add terms into the MUST subquery one at a time until a limit is exceeded on the total DF of all terms added. Then the remaining terms get added into a SHOULD subquery.\n\nThis seems like it would set an upper bound on the total number of documents scored, or the total number of postings list entries which need to be inspected to select documents for scoring. (Good chance I'm missing something here mind...)\n\nWhereas a cut-off based on per-term doc frequency, you could have arbitrarily many terms introduced into the MUST subquery, provided they all slip under the per-term DF threshold. And hence arbitrarily many documents scored. ",
            "author": "Matthew Willson",
            "id": "comment-13542954"
        }
    ]
}