{
    "id": "SOLR-2689",
    "title": "!frange with query($qq) sets score=1.0f for all returned documents",
    "details": {
        "affect_versions": "3.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "Consider the following queries, both query the default field for 'test' and return the document digest and score (i don't seem to be able get only score, fl=score returns all fields):\n\nThis is a normal query and yields normal results with proper scores:\n\n\nq=test&fl=digest,score\n\n\n\n\n<result name=\"response\" numFound=\"227763\" start=\"0\" maxScore=\"4.952673\">\n\u2212\n<doc>\n<float name=\"score\">4.952673</float>\n<str name=\"digest\">c48e784f06a051d89f20b72194b0dcf0</str>\n</doc>\n\u2212\n<doc>\n<float name=\"score\">4.952673</float>\n<str name=\"digest\">7f78a504b8cbd86c6cdbf2aa2c4ae5e3</str>\n</doc>\n\u2212\n<doc>\n<float name=\"score\">4.952673</float>\n<str name=\"digest\">0f7fefa6586ceda42fc1f095d460aa17</str>\n</doc>\n\n\n\nThis query uses frange with query() to limit the number of returned documents. When using multiple search terms i can indeed cut-off the result set but in the end all returned documents have score=1.0f. The final result set cannot be sorted by score anymore. The result set seems to be returned in the order of Lucene docId's.\n\n\nq={!frange l=1.23}query($qq)&qq=test&fl=digest,score\n\n\n\n\n<result name=\"response\" numFound=\"227763\" start=\"0\" maxScore=\"1.0\">\n\u2212\n<doc>\n<float name=\"score\">1.0</float>\n<str name=\"digest\">c48e784f06a051d89f20b72194b0dcf0</str>\n</doc>\n\u2212\n<doc>\n<float name=\"score\">1.0</float>\n<str name=\"digest\">7f78a504b8cbd86c6cdbf2aa2c4ae5e3</str>\n</doc>\n\u2212\n<doc>\n<float name=\"score\">1.0</float>\n<str name=\"digest\">0f7fefa6586ceda42fc1f095d460aa17</str>\n</doc>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13078451",
            "date": "2011-08-02T21:34:31+0000",
            "content": "Markus - I can't even tell this frange call cuts-off any of the hits - you have numFound=\"227763\" in both examples above.  Am I missing something?  "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13078467",
            "date": "2011-08-02T22:15:13+0000",
            "content": "You are right, it's because both examples use one search term and thus all have the same score. It shows when not all scores are identical when you use multiple terms. I'll provide a better description and example next week when i'll get back. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13078522",
            "date": "2011-08-03T00:09:23+0000",
            "content": "I don't really understand why this is a bug?\n\n\"frange\" is the FunctionRangeQParserPlugin which produces ConstantScoreRangeQueries \u2013 it doesn't matter when/how/why it's used (or that the function it's wrapping comes from an arbitrary query), it always produces range queries that generate constant scores. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13078530",
            "date": "2011-08-03T00:26:51+0000",
            "content": "Hmmm, ok ... it looks like maybe this bug was spured on by a recent mailing list thread about score filtering where someone referred to this even older thread with msg from Yonik...\n\nhttp://search-lucene.com/m/4AHNF17wIJW1/\n\n...based on his wording (\"frange could possible help ... perhaps something like...\", i don't think yonik really thought that answer through very hard, so it shouldn't be taken as gospel that he was advocating that solution would work (even though strictly speaking it does filter by score) let alone \"will work and will still give you meaningful scores that you can sort on\"\n\nIf you want to filter by arbitrary score (and i won't bother to list all the reasons i think that is a bad idea) and still get those score back and be able to sort on them, then you still need the \"q\" to be a query that produces scores, and leave the filtering to an \"fq\"...\n\n\n?q=ipod&fl=*,score&fq={!frange+l=0.72}query($q)\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106369",
            "date": "2011-09-16T14:50:47+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13152278",
            "date": "2011-11-17T19:52:29+0000",
            "content": "resolving as a non-issue ... things are working as advertised, and there is an alternate query structure that will produce the same scoring + filtering that seems to be desired. "
        },
        {
            "author": "Mariusz Dro\u017adziel",
            "id": "comment-13205359",
            "date": "2012-02-10T10:58:50+0000",
            "content": "I tried this alternative notation but it doesn't produce any expected results for me either. I can specify arbitrary \"u\" and I will still get the same results. If I specify \"l\" (regardless which value) I will get zero results. Am I running into another issue I am not aware of? If I use the notation with query($) I am getting scores at 1.0f, just like the original poster... "
        }
    ]
}