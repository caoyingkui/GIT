{
    "id": "SOLR-7176",
    "title": "allow zkcli to modify JSON",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "To enable SSL, we have instructions like the following:\n\nserver/scripts/cloud-scripts/zkcli.sh -zkhost localhost:2181 -cmd put /clusterprops.json '{\"urlScheme\":\"https\"}'\n\n\n\nOverwriting the value won't work well when we have more properties to put in clusterprops.  We should be able to change individual values or perhaps merge values.",
    "attachments": {
        "SOLR-7176.patch": "https://issues.apache.org/jira/secure/attachment/12726317/SOLR-7176.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-27T23:45:56+0000",
            "author": "Hoss Man",
            "content": "supporting arbitrary JSON editing could be dangerous (hello clusterstate.json !) \n\nperhaps it would be best to just have a simple \"clusterprop\" command?\n\nalternatively: if the only real concern here for normal users is the urlSchema clusterprop, couldn't we make bin/solr smart enough to set that property for you if it detects that SOLR_SSL_OPTS is set and the property isn't already set? ",
            "id": "comment-14341037"
        },
        {
            "date": "2015-02-28T22:09:27+0000",
            "author": "Ramkumar Aiyengar",
            "content": "perhaps it would be best to just have a simple \"clusterprop\" command?\n\nSolr seems a better place to add this logic than the independent zkcli \u2013 perhaps as a separate admin kind of API like collection API. zkcli should stay as agnostic of Solr as possible \u2013 and from that perspective it would be nice to do modifications like what's suggested here \u2013 but it should be what it looks like, a sharp dumb tool to deal with cases which need ZK needs to be modified, and I have modified cluster state on occasion when the overseer throws a fit. But if we are improving on it and making it look like a real targeted API for something in Solr, it should be in Solr. ",
            "id": "comment-14341801"
        },
        {
            "date": "2015-03-01T00:11:12+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Solr seems a better place to add this logic than the independent zkcli\nI don't like the idea of requiring a running Solr cluster for basic cluster installation tasks.\nPerhaps if we deem SSL on/off to be a fundamentally important flag, perhaps it deserves a dedicated ZK node? ",
            "id": "comment-14341845"
        },
        {
            "date": "2015-03-01T02:38:51+0000",
            "author": "Mark Miller",
            "content": "Isn't this just old? As far as I remember there is a cluster properties rest api now. ",
            "id": "comment-14341903"
        },
        {
            "date": "2015-03-01T03:04:11+0000",
            "author": "Hrishikesh Gadre",
            "content": "[~markrmiller] Ramkumar Aiyengar  There is a cluster management API to support this functionality. \n\nsolr/admin/collections?action=CLUSTERPROP&name=urlScheme&val=https\n\nThe problem with using this API is that it requires that Solr server need to be up and running. This could be problematic if Solr cluster is being managed by an external tool (e.g. Cloudera Manager). e.g. assume following workflow,\n\n1. User shuts down Solr cluster.\n2. Users configures Solr service to use SSL (via. Cloudera Manager)\n3. User restart the Solr cluster\n\nHere you can see that the Solr servers would be down during step (3). Instead if we expose this functionality through zkcli, then we would be able to bypass the requirement for Solr servers to be up and running. Obviously we don't have to add this option to zkcli. Any other option (which would not depend upon Solr server to be up) should be fine. ",
            "id": "comment-14341906"
        },
        {
            "date": "2015-03-01T03:18:00+0000",
            "author": "Hrishikesh Gadre",
            "content": "+ Mark Miller ",
            "id": "comment-14341911"
        },
        {
            "date": "2015-03-01T11:46:43+0000",
            "author": "Ramkumar Aiyengar",
            "content": "I understand the need now, this would be in support of the clusterprop command Hoss mentioned. The trouble still is in branding something specific such as this as part of zkCli. Changing cluster props might involve us changing something else in ZK or even doing something else apart from modifying ZK, this looks like it is making use of an implementation detail. May be this calls for a tool which shares implementation with Solr to provide limited 'offline' access to such functionality. I know there has been this long standing discussion of moving solr.xml to ZK, some such tool might also help us long term with that.. ",
            "id": "comment-14342159"
        },
        {
            "date": "2015-03-02T04:04:04+0000",
            "author": "Yonik Seeley",
            "content": "this looks like it is making use of an implementation detail.\n\nOnly if one considers the contents of clusterprops.json to be an implementation detail.\nIt looks/feels like configuration to me, which is more interface than implementation detail. ",
            "id": "comment-14342695"
        },
        {
            "date": "2015-03-02T05:22:50+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Only if one considers the contents of clusterprops.json to be an implementation detail. It looks/feels like configuration to me, which is more interface than implementation detail.\n\nIt is certainly configuration and there will likely be more of the same in future. But I agree with Hoss that there should be a clusterproperty (clusterprop!??) command in zkcli and not something which can add/remove values from arbitrary Json objects. ",
            "id": "comment-14342771"
        },
        {
            "date": "2015-03-02T05:31:42+0000",
            "author": "Yonik Seeley",
            "content": "I guess I see those as orthogonal questions.  Even if there is some sort of clusterprop command for zkcli, the ability to change an arbitrary file seems to fit right into the feature set of being able to upload arbitrary files (which zkcli can do today). ",
            "id": "comment-14342778"
        },
        {
            "date": "2015-03-02T06:38:03+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Fair enough, if we do see and intend to use clusterprops.json as an interface, I withdraw my objection.\n\nI guess I see those as orthogonal questions. Even if there is some sort of clusterprop command for zkcli, the ability to change an arbitrary file seems to fit right into the feature set of being able to upload arbitrary files (which zkcli can do today).\n\n+1, if we are adding a clusterprop command as a safety mechanism, it seems better to add it to a \"solr config tool\" even if it just wraps zkcli. The feature Yonik currently is proposing is a suitable feature to add to what zkcli does today, being a sharp tool with the ability to modify/damage ZK arbitrarily as it stands today. Having people moving away from it in favour of a nicer wrapper tool which does specific things seems like a separate, good feature to have.. ",
            "id": "comment-14342833"
        },
        {
            "date": "2015-03-02T15:33:41+0000",
            "author": "Per Steffensen",
            "content": "I think we should not make ZkCLI a Swiss Army Knife. ZkCLI should deal with ZK operations, like uploading and downloading. Changing then content of a json-file is not a ZK operation. Why not see it as different things. So what you need to do if you want to make arbitrary changes to json-content of a znode in ZK is\n\nzkcli getfile thefile.json\n<use another tool for modifying thefile.json>\nzkcli putfile thefile.json\n\n\n\nIt would be nice to make different tools that can make operations on the different types of jsons we have in a safe way - ensuring e.g. consistency, integrity, validity etc. But I think those tools should use the classes already handling those jsons, and not have anything to do with ZkCLI. E.g. a tool for manipulating clusterstate.json should use classes from org.apache.solr.common.cloud in solrj project, like ZkStateReader, ClusterState, ClusterStateUpdater etc. Then it is always those classes that are used to operate on a specific type of json, and we only have to build consistency, integrity, validity etc into those classes (separation of concern). The new thing should be that those classes can be used via an external tool also when no Solr nodes are running.\n\nAt least make sure to use those existing classes for actually reading/writing/verifying the jsons, and make separate tool-classes. Changing ZkCLI to be able to trigger operations in those tool-classes is less important, but personally I do not like - actually, if it has to be, I would rather see e.g. an ClusterPropCLI-tool support a \"do-in-zk\"-flag making it use ZkCLI tool to download first, do its manipulations and then use ZkCLI to upload again. That is, new tools that use ZkCLI (if you are too lazy doing the download/upload using ZkCLI yourself), instead of the other way around, where ZkCLI uses other tools or even just does json-manipulation itself. Please do not try to implement rules about what can and cannot be in a specific type of json, what operations you can do on it etc two places in the code-base - use what we already have.\n\nWould like to see clean definitions of which classes own responsibilities. E.g.\n\n\tClusterState.java own the responsibility of a clusterstate.json always being consistent, valid etc. You never do changes to clusterstate.json with using ClusterState.java\n\tClusterStateUpdater own the set of allowed operations on clusterstate.json. You never manipulate a clusterstate.json without going through ClusterStateUpdater. The new off-line ClusterStateCLI-tool should use ClusterStateUpdater to do its operations - just change ClusterStateUpdater, so that it support receiving jobs not coming from other sources than overseer queue.\n\n\n\nYes, I know you primarily talk about ClusterProps, but the principle will be the same. It is just that I know more about which classes handle cluster-state than which handle cluster-props.\n\nThat said, maybe you can live with using e.g. http://trentm.com/json/ (or one of the million other command-line json tools available) in <use another tool for modifying thefile.json> above? ",
            "id": "comment-14343271"
        },
        {
            "date": "2015-03-03T10:56:45+0000",
            "author": "Noble Paul",
            "content": "There is already a clusterprop command why do we need a zkCli command\n\nI'm against zkCli command to arbitrarily edit content in ZK ",
            "id": "comment-14344924"
        },
        {
            "date": "2015-03-03T16:53:19+0000",
            "author": "Mark Miller",
            "content": "There is already a clusterprop command why do we need a zkCli command\n\nThere is already a response to this question above ? ",
            "id": "comment-14345323"
        },
        {
            "date": "2015-03-03T17:32:20+0000",
            "author": "Noble Paul",
            "content": "I missed that. \nHowever , I agree with the recommendation given by Per Steffensen \n\nzkCli can update the whole file after doing an offline edit ",
            "id": "comment-14345378"
        },
        {
            "date": "2015-03-30T05:27:27+0000",
            "author": "Noble Paul",
            "content": "I propose a new command in zkcli\n\n\nzkcli.sh -zkhost 127.0.0.1:9983 -cmd clusterprops clusterprops.json\n\n\n\nIt is not a generic command to upload json. But , it should be doing all the regular validations done by the CLUSTERPROP API before uploading the file\n ",
            "id": "comment-14386215"
        },
        {
            "date": "2015-04-16T20:35:05+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ramkumar Aiyengar [~nobel.paul]Yonik SeeleyPer Steffensen\n\nI think the problem with the latest proposal (from Nobel) is that the user is expected to download the clusterprops.json file and update it correctly. Shouldn't this logic be part of Solr itself (to ensure backward compatibility w.r.t. schema changes etc.) ?\n\nHow about just adding a separate class in Solr which would provide this functionality viz.\n\n\tDownload the ZK config\n\tUpdate it correctly\n\tUpload the ZK config\n\n\n\nWe can potentially refactor the current collections API implementation to use this class (so as to avoid code duplication). We can optionally provide a separate script to invoke this class (or leave it for consumers to implement). This will address the concerns with respect to adding this functionality to zkcli.sh. \n\nThoughts?\n\n ",
            "id": "comment-14498684"
        },
        {
            "date": "2015-04-17T07:31:21+0000",
            "author": "Noble Paul",
            "content": "I would like to make another proposal\n\n\nzkcli.sh -zkhost 127.0.0.1:9983 -collection-action CLUSTERPROP -name urlScheme -val https \n\n\n\nThis should behave exactly like the collections API . All the params and behavior will be same as CLUSTERPROP API but will work directly on the command line\n\nThe advantage is that the user does not need to learn new param names and their semantics, Moreover  we can extend the same pattern to all our other collection APIs as required ",
            "id": "comment-14499397"
        },
        {
            "date": "2015-04-17T07:37:57+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>The advantage is that the user does not need to learn new param names and their semantics, Moreover we can extend the same pattern to all our other collection APIs as required\n\nSure. I like this idea. But can we define it as a separate script (in line with the earlier reasoning for not adding in the zkcli.sh) ? ",
            "id": "comment-14499407"
        },
        {
            "date": "2015-04-17T09:02:03+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Yea, I even wonder if we should have a Cluster API /admin/cluster/ and move commands like CLUSTERPROP, ADDROLE, REMOVEROLE, OVERSEERSTATUS, CLUSTERSTATUS away from collections API? Then we could have a cluster.sh which aids in calling these from cmdline. Of course some cmds may require Solr to be running while others can work with ZK only? ",
            "id": "comment-14499507"
        },
        {
            "date": "2015-04-17T09:25:21+0000",
            "author": "Noble Paul",
            "content": "A lot of commands will need a running cluster. What good is an OVERSEERSTATUS without overseer. \n\nThe only relevant one I see now is CLUSTERPROP . Andd there is an immediate need for that as well.  ",
            "id": "comment-14499527"
        },
        {
            "date": "2015-04-17T10:54:54+0000",
            "author": "Per Steffensen",
            "content": "\n\nzkcli.sh -zkhost 127.0.0.1:9983 -collection-action CLUSTERPROP -name urlScheme -val https\n\n\nI agree, except that it should not be the zkcli.sh tool that is extended. Since it is the collections API you make a CLI for, so to speak, make a collectionscli.sh script\n\ncollectionscli.sh -zkhost 127.0.0.1:9983 -action CLUSTERPROP -name urlScheme -val https\n\n\nAnd later maybe\n\ncollectionscli.sh -zkhost 127.0.0.1:9983 -action ADDROLE -role overseer -val ...\n\n\netc\n\nIt think also, that it needs to be considered how and if this is an extension/modification to the SolrCLI-tool (used from solr/bin/solr and solr/bin/solr.cmd)\n\nsolr.sh CLUSTERPROP -zkhost 127.0.0.1:9983 -name urlScheme -val https\n\n\nJust saying, even though I do not like the current state of it, because of the enormous amounts of redundant code. But we do not want to end up with a million different cli-tools either.\nBTW, I think solr/bin/solr should be renamed to solr.sh, so I pretended above ",
            "id": "comment-14499632"
        },
        {
            "date": "2015-04-17T13:19:50+0000",
            "author": "Shawn Heisey",
            "content": "BTW, I think solr/bin/solr should be renamed to solr.sh, so I pretended above\n\nRenaming the script would be a bad idea, IMHO.  With the current setup, you can use \"bin/solr\" at the commandline on *NIX and \"bin\\solr\" on Windows, the only difference is the path separator, which will not be a surprise to most admins.\n\nIf we rename solr to solr.sh, then the command will be different on *NIX and unified documentation becomes more difficult.\n\nIf there is going to be any renaming, I believe it should be to remove .sh from the other scripts, so zkCli.sh becomes zkCli ... and it should be handled in a separate issue. ",
            "id": "comment-14499807"
        },
        {
            "date": "2015-04-17T13:33:59+0000",
            "author": "Noble Paul",
            "content": "I don't expect a lot of commands to be exposed with this. This will be used when you can't use the command because the solr cliuster is not up and running . It will be an expert thing  Having  a dedicated script for this seems overklll.\n\nI would still prefer to overload the zkCli command  ",
            "id": "comment-14499827"
        },
        {
            "date": "2015-04-17T14:27:07+0000",
            "author": "Mark Miller",
            "content": "I would like to make another proposal, zkcli.sh -zkhost 127.0.0.1:9983 -collection-action CLUSTERPROP -name urlScheme -val https\n\nSomething along these lines seems like the best current proposal to me. I don't think it really calls for anything more expansive.\n\nIf we rename solr to solr.sh, then the command will be different on *NIX and unified documentation becomes more difficult.\n\nFWIW, I think dropping the accepted and normal usage of file extensions to aid in unified doc is a terrible idea. ",
            "id": "comment-14499895"
        },
        {
            "date": "2015-04-17T15:26:33+0000",
            "author": "Per Steffensen",
            "content": "I agree, but from time to time I want to add a (async) command to the overseer while the cluster is not running, expecting the overseer to pick it up and execute it when I start my cluster. If you would enable this tool to do this kind of stuff, then suddenly most of the cluster-commands become relevant for this tool - if it is able to both execute the command directly (if supported - e.g. the CLUSTERPROP command) or to leave the command for execution by the overseer.\nAnd, if you have numerous machines that might or might not currently run a Solr-node, maybe you actually want to be able to run the OVERSEERSTATUS command as a command-line just to get a \"not running\" response. ",
            "id": "comment-14500028"
        },
        {
            "date": "2015-04-17T15:34:27+0000",
            "author": "Per Steffensen",
            "content": "With the current setup, you can use \"bin/solr\" at the commandline on *NIX and \"bin\\solr\" on Windows, the only difference is the path separator, which will not be a surprise to most admins\n\nWell I think it might come as a surprise to most *NIX admins that the script is just called \"solr\" - and not e.g. solr.sh. But never mind, this JIRA is not about that. I just had a hard time writing solr CLUSTERPROP ..., because I would have to think twice to understand it myself\n\nand it should be handled in a separate issue\n\nYes, definitely, no one talked about doing the renaming in this issue ",
            "id": "comment-14500039"
        },
        {
            "date": "2015-04-17T15:47:45+0000",
            "author": "Hrishikesh Gadre",
            "content": "Mark Miller [~nobel.paul] Thanks a lot for clarification. I will submit a patch shortly. ",
            "id": "comment-14500074"
        },
        {
            "date": "2015-04-17T16:02:18+0000",
            "author": "Shawn Heisey",
            "content": "FWIW, I think dropping the accepted and normal usage of file extensions to aid in unified doc is a terrible idea.\n\nFair enough, and you carry a lot more weight around here than I do. ",
            "id": "comment-14500087"
        },
        {
            "date": "2015-04-18T01:05:42+0000",
            "author": "Hrishikesh Gadre",
            "content": "Here is a patch as per our earlier discussion. The only difference is I have added 'CLUSTERPROP' as a regular command instead of 'collection-action' suggested since the commons options library does not accept option name embedded with '' (in between collection and action). I thought of other alternatives, but couldn't come up with a concise name. I think it should be OK to use 'cmd' instead. Let me know if you have other suggestions. ",
            "id": "comment-14500991"
        },
        {
            "date": "2015-04-18T14:06:09+0000",
            "author": "Noble Paul",
            "content": "Hrishikesh Gadre Looks good. Why can't we just eliminate the overseer from the picture completely? As you are doing a compare and set , there is no need to send it to Overseer. This can be completely handled at CollectionsHandler ",
            "id": "comment-14501373"
        },
        {
            "date": "2015-04-18T17:05:21+0000",
            "author": "Hrishikesh Gadre",
            "content": "Sure it can be done. I didn't want to alter the existing design (just refactor the common code). Let me make that change and resubmit the patch. ",
            "id": "comment-14501473"
        },
        {
            "date": "2015-04-20T06:19:43+0000",
            "author": "Hrishikesh Gadre",
            "content": "Updated patch which removes the Overseer interaction for CLUSTERPROP API ",
            "id": "comment-14502402"
        },
        {
            "date": "2015-04-20T06:40:58+0000",
            "author": "Noble Paul",
            "content": "the patch does not seem to be in sync with the trunk ",
            "id": "comment-14502419"
        },
        {
            "date": "2015-04-20T14:19:27+0000",
            "author": "Per Steffensen",
            "content": "Why can't we just eliminate the overseer from the picture completely?\n\nNot that it is very important in this case, but there is a problem in general with having several threads doing fetch -> update-locally -> store on state concurrently without locking (pessimistically or optimistically). Example, two threads running concurrently\n\n\tThread#1 wants to do the task of setting \"urlScheme\" to \"http\":\n\t\n\t\tfetches \n{\"urlScheme\":\"https\", \"autoAddReplicas\": \"true\"}\n\t\tchanges it to \n{\"urlScheme\":\"http\", \"autoAddReplicas\": \"true\"}\n and stores it\n\t\n\t\n\tThread#2 wants to do the task of setting \"autoAddReplicas\" to \"false\":\n\t\n\t\tfetches \n{\"urlScheme\":\"https\", \"autoAddReplicas\": \"true\"}\n\t\tchanges it to \n{\"urlScheme\":\"https\", \"autoAddReplicas\": \"false\"}\n and stores it\n\t\n\t\n\n\n\nWithout locking they can run concurrently and you will end up with a wrong state\n\n\t{\"urlScheme\":\"http\", \"autoAddReplicas\": \"true\"}\n\tor \n{\"urlScheme\":\"https\", \"autoAddReplicas\": \"false\"}\n\n\n\nBut you actually expected \n{\"urlScheme\":\"http\", \"autoAddReplicas\": \"false\"}\nI do not know what the initial thought was about the Overseer, but I think of it as a simple way to get around this locking - making sure that there is never more than one thread updating state.\n\nWhen that is said, if the above was the intention with the Overseer, it does not work today, because CollectionsHandler.handleProp is doing the fetch and update, and only leaves the storing to Overseer. I would like to see the entire job handed over to the Overseer, so that it does both fetch, update and store - so that you can avoid the concurrency scenario above. In general Overseer should execute entire admin-jobs and not only parts of them.\n\nAnyway, it is a reason not to do this kind of updates without taking locks, and Overseer is a primitive way of \"taking lock\", and maybe therefore \"do not eliminate the Overseer\". I am not sure it is especially important here. ",
            "id": "comment-14502904"
        },
        {
            "date": "2015-04-20T14:32:37+0000",
            "author": "Noble Paul",
            "content": "Without locking they can run concurrently and you will end up with a wrong state\n\nNo\n\nThat is called compare and set in Zookeeper ",
            "id": "comment-14502920"
        },
        {
            "date": "2015-04-20T17:17:51+0000",
            "author": "Hrishikesh Gadre",
            "content": "Please find the attached patch working with latest trunk code. ",
            "id": "comment-14503231"
        },
        {
            "date": "2015-04-20T19:00:53+0000",
            "author": "Per Steffensen",
            "content": "Believe it is referred to as compare-and-swap, but anyway Overseer.handleProp does not use that feature (it always uses version=-1 when calling zk.setData). But actually I just realized that it is not true that CollectionsHandler.handleProp does the fetch-update and only leaves update to Overseer (as I claimed above) - it actually does forward the entire operation to Overseer so that the Overseer does fetch, update and store (just at I wanted it to). So you are right, that the problem I sketched above is not a problem in todays code, but it is not due to usage of compare-and-swap - it is because two threads will never try to do updates at the same time - they will ask the Overseer to do the updates (single-threaded = primitive pessimistic lock).\n\nSo we cannot \"just eliminate the overseer from the picture completely\", if we still want to avoid the (more or less \"theoretical\") problem I sketched above.\n\nSo the bullet-safe command-line solution should take this into consideration - e.g.\n\n\t1) Take the overseer-lock before performing the operation\n\t2) Use compare-and-swap (and make sure Overseer also does)\n\n\n\nI believe I would prefer 1) because it is the most generally useable solution to the problem. Compare-and-swap (even combined with ZK multi-op feature) will not always be sufficient for operations that want to update several znodes atomically - and who knows, maybe some day we also want to that kind of stuff using command-line. Taking a pessimistic lock (like the Overseer-lock) always will be sufficient. ",
            "id": "comment-14503430"
        },
        {
            "date": "2015-04-20T20:11:16+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>I believe I would prefer 1) because it is the most generally useable solution to the problem. Compare-and-swap (even combined with ZK multi-op feature) will not always be sufficient for operations that want to update several znodes atomically - and who knows, maybe some day we also want to that kind of stuff using command-line. Taking a pessimistic lock (like the Overseer-lock) always will be sufficient.\n\nThe original use-case for this feature is to have an ability to update the cluster properties even when Solr cluster is offline. Hence the fix for this use-case can not really depend upon the overseer lock. Also as others mentioned in the JIRA above, we are trying to address a very specific problem (i.e. ability to update contents of /clusterprops.json ZNODE). Typically these updates should be very infrequent (e.g. why would user flip between SSL/non-SSL mode frequently ?). So I believe using optimistic locking should be fine. \n\nThoughts?\n\n ",
            "id": "comment-14503533"
        },
        {
            "date": "2015-04-21T02:54:42+0000",
            "author": "Noble Paul",
            "content": "optimistic locking is fine. \nBut you can do  a retry loop if an attempt to write fails  ",
            "id": "comment-14504203"
        },
        {
            "date": "2015-04-21T05:24:49+0000",
            "author": "Hrishikesh Gadre",
            "content": "Are you suggesting that CLI should run a retry loop? I would prefer not to retry automatically since it could overwrite some other directive of some other CLI invocation. In my current patch, I have added a check to see if the value is set correctly (after receiving an error). If it is, then the invocation is successful. If not, we fail the invocation. This also works in scenarios where two invocations attempt to set the same value.\n\nAdding retries would also raise questions like - how many retries are sufficient? Is there an exponential backoff policy? What is the time interval between two retries etc. All of this can be implemented outside Solr very easily if required (e.g. a script can run the zkcli command in a loop until it succeeds). ",
            "id": "comment-14504356"
        },
        {
            "date": "2015-04-21T07:23:29+0000",
            "author": "Per Steffensen",
            "content": "Hence the fix for this use-case can not really depend upon the overseer lock\n\nSure you can. You can say that you have to own the Overseer-lock, in order to be able to perform this kind of admin-tasks. The CLI job can try to take the lock and then perform the operation. If it cannot get the lock (maybe retry for a period of time), ask the Overseer to do it (either by doing the corresponding HTTP request or by leaving it directly on the Overseer-queue) and wait synchronously for the Overseer to handle it (it must be running since it the lock is taken).\nBut optimistic locking (compare-and-swap) is probably the best in this case. Only thing I fear is that if that approach is established as \"the way it is done\" it will be repeated in upcoming cases where it might not be sufficient. Sometime it is worth the effort to establish the best platform to build upon from the beginning. ",
            "id": "comment-14504498"
        },
        {
            "date": "2015-04-21T09:20:58+0000",
            "author": "Per Steffensen",
            "content": "New patch\n\nI would prefer not to retry automatically\nAdding \"Try again\" to error-msg from ZkCLI if KeeperException.BadVersionException (to hint the user that it will probably go well if he just tries again).\n\nBesides that\n\n\tAlso \"// Don't update ZK unless absolutely necessary\" in the remove-case\n\tSharing constants instead of introducing new similar ones. Because IMHO we shouldnt keep adding the same constants again and again, but more important: If HTTP is /admin/collections?action=CLUSTERPROP&name=<prop-name>&val=<prop-value>, then the command-line should be zkcli.sh \u2026 -cmd CLUSTERPROP -name <prop-name> -val <prop-value>, AND if the HTTP ever changes (e.g. using \u201cclusterprop.set\u201d instead of \u201cCLUSTERPROP\u201d) so should the command-line\n\tAdding test of remove\n\tClosing ZkStateReader in CollectionsHandler, ZkCLI and ZkCLITest\n\n ",
            "id": "comment-14504657"
        },
        {
            "date": "2015-04-21T16:50:29+0000",
            "author": "Hrishikesh Gadre",
            "content": "OK I see your point now. Yes this make sense. ",
            "id": "comment-14505252"
        },
        {
            "date": "2015-04-21T16:55:01+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>Adding \"Try again\" to error-msg from ZkCLI if KeeperException.BadVersionException (to hint the user that it will probably go well if he just tries again).\n\nThis would also be valid for NodeExistsException (would happen first time when the ZNODE is not yet created and two clients attempt to create it).\n\n>>Closing ZkStateReader in CollectionsHandler, ZkCLI and ZkCLITest\n\nI also thought about it. But it seems like when ZkStateReader does not own the ZK client (e.g. in CollectionsHandler), it shouldn't close it? Any thoughts? ",
            "id": "comment-14505260"
        },
        {
            "date": "2015-04-22T07:18:55+0000",
            "author": "Per Steffensen",
            "content": "This would also be valid for NodeExistsException\n\nHmmm, believe you are right\n\nI also thought about it. But it seems like when ZkStateReader does not own the ZK client (e.g. in CollectionsHandler), it shouldn't close it? Any thoughts?\n\nZkStateReader does not own the ZK client if you use the ZkStateReader(SolrZkClient zkClient) constructor - and we do in all the mentioned caces. And it does not close the ZK client on close, when it does not own it. Hence in the mentioned cases calling close really does not do much, except setting closed=true. I just thought it was the right thing to do - call close when you create and finished using a closable component. ",
            "id": "comment-14506567"
        },
        {
            "date": "2015-04-22T07:19:57+0000",
            "author": "Per Steffensen",
            "content": "Added \"Try again\" in error-msg, also on NodeExistsException ",
            "id": "comment-14506568"
        },
        {
            "date": "2015-04-22T11:12:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1675331 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1675331 ]\n\nSOLR-7176: zkcli script can perfrom the CLUSTERPROP command without a running Solr cluster ",
            "id": "comment-14506835"
        },
        {
            "date": "2015-04-22T11:19:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1675335 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1675335 ]\n\nSOLR-7176: zkcli script can perfrom the CLUSTERPROP command without a running Solr cluster ",
            "id": "comment-14506841"
        },
        {
            "date": "2015-06-15T21:43:47+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586875"
        }
    ]
}