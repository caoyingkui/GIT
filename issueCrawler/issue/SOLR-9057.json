{
    "id": "SOLR-9057",
    "title": "CloudSolrClient should be able to work w/o ZK url",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "It should be possible to pass one or more Solr urls to Solrj and it should be able to get started from there. Exposing ZK to users should not be required. it is a security vulnerability",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-03T07:22:50+0000",
            "author": "Alan Woodward",
            "content": "Doesn't this rather defeat the point of CSC?  If you want to communicate without exposing ZK, you can just use HttpSolrClient instead. ",
            "id": "comment-15268268"
        },
        {
            "date": "2016-05-03T07:44:33+0000",
            "author": "Noble Paul",
            "content": "No, it doesn't. The behavior or efficiency wouldn't change . Even now CSC doesn't watch any ZK state. It does smart caching. It would continue to send the requests to the right node  ",
            "id": "comment-15268303"
        },
        {
            "date": "2016-05-03T07:49:02+0000",
            "author": "Shai Erera",
            "content": "How will it initiate ZkStateReader without getting the ZK host? Or do you mean it will extract the ZK info from one of the Solr URLs, by submitting a call like /admin/info/system? ",
            "id": "comment-15268315"
        },
        {
            "date": "2016-05-03T07:54:12+0000",
            "author": "Noble Paul",
            "content": "If you pass solr urls , CSC will not use ZKStateReader. It will use the REST endpoints to fetch collection states ",
            "id": "comment-15268318"
        },
        {
            "date": "2016-05-03T08:04:47+0000",
            "author": "Shai Erera",
            "content": "I thought that the whole idea of CSC is to use ZkStateReader so that it can react to state changes quickly, because ZkStateReader does create a watch on the cluster state. If it doesn't use ZkStateReader anymore, will it periodically poll CLUSTERSTATUS? Isn't that less efficient and maybe even doing a lot of redundant CLUSTERSTATUS checks when the cluster state doesn't change?\n\nI always viewed CSC and its use of ZkStateReader as an advantage. I do understand though that it currently plays two roles, which I believe you propose to separate: (1) understanding the distributed topology of the Solr nodes, so that it forwards requests to leaders etc. and (2) getting notified on cluster state changes rather than querying for it repeatedly.\n\nI personally think that CSC should continue to use ZkStateReader and be tied to it. Users who don't want to expose/get-exposed to ZK can use a regular HttpSolrClient. True, their requests may get routed to the right node (so that adds an extra hop), but perhaps it's not that bad?\n\nAlternatively, you could have CSC take a ClusterStateProvider with two impls: one that uses HTTP CLUSTERSTATUS and another that uses ZkStateReader. Then users can enjoy the best of both worlds: CSC does the \"right\" thing and the user can choose whether to work w/ the HTTP end-point or the ZK one. ",
            "id": "comment-15268329"
        },
        {
            "date": "2016-05-03T08:11:54+0000",
            "author": "Noble Paul",
            "content": "Shai Erera This ticket is not taking away your ability to pass the zk url to CSC. It is just offering an alternative.\n\nYour understanding of how CSC works today is wrong. Please refer to SOLR-5474 for details. ",
            "id": "comment-15268338"
        },
        {
            "date": "2016-05-03T08:28:44+0000",
            "author": "Alan Woodward",
            "content": "Even now CSC doesn't watch any ZK state\n\nI don't think this is correct?  It calls createClusterStateWatchersAndUpdate() at line 467 in master.  And the collection cache doesn't deal with aliases.\n\nI like the idea of a ClusterStateProvider though. ",
            "id": "comment-15268362"
        },
        {
            "date": "2016-05-03T08:32:33+0000",
            "author": "Shai Erera",
            "content": "In CSC code I see that connect() is called from several places, one of which is sendRequest and another is requestWithRetryOnStaleState. And in connect() I see that a watcher is created both by calling new ZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout) and immediately after zk.createClusterStateWatchersAndUpdate().\n\nI don't reject your statement about my understanding of how CSC works, but could you please explain how it does not create a watcher today? Or if that's case today and this issue is about changing it, what are you proposing to change?\n\nIf you prefer to wait with answering these questions until you have a patch, I'm OK with that too. ",
            "id": "comment-15268367"
        },
        {
            "date": "2016-05-03T09:07:28+0000",
            "author": "Noble Paul",
            "content": "The watcher is only applied to clusterstate.json .Currently, this is just to support the old monolithic clusterstate .. For all the per collection state.json files there are no watches. it does some smart caching. Please refer this https://issues.apache.org/jira/browse/SOLR-8327?focusedCommentId=15207115&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15207115 ",
            "id": "comment-15268399"
        },
        {
            "date": "2016-05-03T11:44:16+0000",
            "author": "Joel Bernstein",
            "content": "Does CloudSolrClient still know the cluster state? If not then it's my highest priority to build a client that does. ",
            "id": "comment-15268568"
        },
        {
            "date": "2016-05-03T11:46:32+0000",
            "author": "Noble Paul",
            "content": "It does. It's just that it doesn't watch it all the time ",
            "id": "comment-15268569"
        },
        {
            "date": "2016-05-03T11:59:04+0000",
            "author": "Joel Bernstein",
            "content": "OK, I just saw the description of smart caching on SOLR-8327 (below). I hadn't realized that this approach replaced watches either. \n\n\n\ta request for a collection comes to solrj\n\tlook up in local cache . If not available read from ZK and populate local cache\n\tmake a request to the server optimistically assuming that the data in cache is latest. But\nsend extra information as a request parameter (_stateVer_=<coll-name>:<zk-version-of-state.json-in-cache>)\n\tat server. if this parameter is present, check locally if the version is correct . If this\nnode serves this collection, it always has the latest state. So no ZK lookup is necessary\n\tIf the version at server is newer send the latest version of the state as a part of the\npayload\n\tsolrj looks for this  extra info in the payload. If there is no extra info, the state it\nhas is the latest. nothing needs to be done. If the payload contains versions of the state,\nit means that the local version is stale, invalidate the cache\n\n ",
            "id": "comment-15268582"
        },
        {
            "date": "2016-05-03T15:53:21+0000",
            "author": "Shawn Heisey",
            "content": "I would think that simply using LBHttpSolrClient with the list of URLs would accomplish the goal of this Jira.  There's probably a good chance that I'm missing something, though. ",
            "id": "comment-15268933"
        },
        {
            "date": "2016-05-03T17:11:48+0000",
            "author": "Noble Paul",
            "content": "It's not the same. The initial set of nodes is just a seed. After bootstrap it will fetch the whole cluster state and node list from the seed nodes.  ",
            "id": "comment-15269111"
        },
        {
            "date": "2016-05-03T23:38:44+0000",
            "author": "Shawn Heisey",
            "content": "I assume you would use /solr/zookeeper for this.  With that handler, you can read the entire ZK chroot used for Solr.\n\nDepending on how zkHost was passed to Solr, it may be visible to users who can access Solr.  If you prevent an attacker from knowing where zookeeper lives, which I think you can only do if you put it in solr.xml and don't put solr.xml in zookeeper, any other application besides Solr using that zookeeper will have some protection.  But ... if you're allowing access to Solr itself, the attacker can do just as much damage within SolrCloud with the collections API as they could with knowledge of zookeeper's location.\n\nRegarding the actual change being discussed:  Unless the solution can put the info received one way into the same data structure as info received the other way, implementing this issue means that there will be two code paths for identical functionality \u2013 one using ZK directly, the other using the HTTP ZK endpoint.  It might be easy to utilize the same data structure either way.  I do not know.  If not, then both code paths will need updating whenever related code evolves.\n\nIf you still think it's a good idea, I'm not going to get in your way. ",
            "id": "comment-15269848"
        },
        {
            "date": "2016-05-04T02:44:12+0000",
            "author": "Noble Paul",
            "content": "The design is not finalized. The ticket is a requirement. We can choose to implement it in anyway. BTW I don't plan to use the the zk handler. In fact we should get rid of that ",
            "id": "comment-15270044"
        },
        {
            "date": "2017-04-17T22:06:46+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "HttpClusterStateProvider is implemented in SOLR-10446. ",
            "id": "comment-15971729"
        }
    ]
}