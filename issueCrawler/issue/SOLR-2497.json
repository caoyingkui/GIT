{
    "id": "SOLR-2497",
    "title": "Move Solr to new NumericField stored field impl of LUCENE-3065",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.2",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This implements the changes to NumericField (LUCENE-3065) in Solr. TrieField & Co would use NumericField for indexing and reading stored fields. To enable this some missing changes in Solr's internals (Field -> Fieldable) need to be done. Also some backwards compatible stored fields parsing is needed to read pre-3.2 indexes without reindexing (as the format changed a little bit and Document.getFieldable returns NumericField instances now).",
    "attachments": {
        "SOLR-2497-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12478508/SOLR-2497-trunk.patch",
        "SOLR-2497.patch": "https://issues.apache.org/jira/secure/attachment/12478223/SOLR-2497.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13029010",
            "date": "2011-05-04T22:19:05+0000",
            "content": "Patch applies to 3.2 branch only and needs the patch from LUCENE-3065 applied before:\n\nHere a first step in cutover of Solr to NumericField. Most tests work, except:\n\n\tTestDistributedSearch, fails with a strange date problem - I have no idea what goes wrong\n\tTestMoreLikeThis: fails because the returned documents are different than expected. The reason for this is simple: As TrieField's underlying Lucene fields now are NumericField, stringValue() returns something (in contrast, solr's old fields returned null because they were binary). This confuses maybe MoreLikeThis (needs maybe fixed in Lucene, I havent looked into the code). Maybe we should simply exclude those fields or fix the test (I prefer latter one, because the numerics should also taken into account).\n\n\n\nThe following changes had to be made:\n\n\tCut over all places in Solr where Field instead of abstract Fieldable is used to Fieldable. This affects some leftover parts in various components (calling Document.getField instead of Document.getFieldable), but mainly SchemaField/FieldType: createField() now returns Fieldable\n\tTrieDateField code duplication was removed, all methods delegate to a wrapped TrieField. There was also an inconsitency between TrieField and TrieDateField's toExternal(). This was fixed to work correct (the date format was wrong, now it uses dateField.toExternal())\n\n\n\nIf somebody could help with the rest of the solr stuff and maybe test test test! Yonik? Ryan? There may be some itches not covered by tests.\n\nThanks for help from Solr specialists (I am definitely not one, I am more afraid of the code than I can help)!!! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13029407",
            "date": "2011-05-05T16:12:21+0000",
            "content": "MoreLikeThis problem solved, it was as I said. The test included a TrieInt field into the \"similarity fields\", so it was used to calculate similarity. As with previous Solr the TrieField was invisible to MLT this had no effect.\nBy the way: There is a commented out part with explicitely the MLT field, but I dont understand it. It seems that it was never understood/supported.\nNow, all numeric fields should work with MLT.\n\nNow only the TestDistributedSearch is still failing with a strange date failure. I'll dig. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13029643",
            "date": "2011-05-05T23:09:59+0000",
            "content": "Updated patch (some improvements in TrieField converter methods).\n\nStill distributed numeric facetting (TestDistributedSearch) fails for trie dates - i have no idea why!\n\nI need help! "
        },
        {
            "author": "Chris Male",
            "id": "comment-13029722",
            "date": "2011-05-06T04:03:58+0000",
            "content": "Hey Uwe,\n\nI spent quite some time tracking this down.  The problem is that the dates cannot be parsed because they are lacking the compulsory 'Z' on the end (its required by the date parser).\n\nYou need to change TrieDateField#indexedToReadable to:\n\nreturn wrappedField.indexedToReadable(indexedForm) + Z;\n\nwith that change, the test now passes for me.\n\nYou can see in DateField#indexedToReadable it does the same thing. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13029763",
            "date": "2011-05-06T05:57:30+0000",
            "content": "Hi Chris,\nyou are the best! Only your soliution was not correct, the change must be made in TrieField (wrappedField). The problem here was a bug in the original code (as of Lucene 1.4 / 3.1) [the same I already mentioned above]: If you created in your Schema a TrieField with type attribute set to DATE, it behaved differently than if you used a TrieDateField (same issue had been fixed before in toExternal:\n\n\nTrieDateField code duplication was removed, all methods delegate to a wrapped TrieField. There was also an inconsistency between TrieField and TrieDateField's toExternal(). This was fixed to work correct (the date format was wrong, now it uses dateField.toExternal())\n\nThe correct fix is to make TrieField.indexedToReadable call DateField's toExternal internally (like toExternal now does). "
        },
        {
            "author": "Chris Male",
            "id": "comment-13029765",
            "date": "2011-05-06T06:04:05+0000",
            "content": "Ah I didn't read the rest of the issue.  Fair enough.  I'm glad its now fixed. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13029768",
            "date": "2011-05-06T06:07:35+0000",
            "content": "Huper duper patch that passes all tests!\n\nIn general the design of TrieField and its subclasses and the delegation in TrieDateField are somehow crazy. We should maybe remove the superclass TrieField completely and copy all code inside the imense switch statements to the subclasses/TrieDateField. I think the whole thing was done initially because the original committer (before 1.4) did not want to add lots of extra classes but shortly before release Yonik changed that to the current state.\n\nThere was also inconsistency between TrieDateField and TrieField (with type=DATE), thats now solved. My problem came from the refactoring I did to get rid of this. TrieField implemented toExternal() and indexedToReadable() incorrect, I only fixed toExternal() but missed indexedToReadable(); thanks @ Chris Male. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13029797",
            "date": "2011-05-06T07:06:06+0000",
            "content": "I think this is now ready to commit. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13030295",
            "date": "2011-05-07T08:38:23+0000",
            "content": "Committed 3.x revision: 1100480\n\nNow forward-porting to trunk... "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13030337",
            "date": "2011-05-07T12:26:24+0000",
            "content": "This is the patch for trunk, including the hack for LUCENE-3080. Will commit soon! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13030347",
            "date": "2011-05-07T13:14:55+0000",
            "content": "Committed trunk revision: 1100526 "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13030349",
            "date": "2011-05-07T13:21:27+0000",
            "content": "Nice work Uwe!  This is a great example of the refactoring made possible by the merger. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043572",
            "date": "2011-06-03T16:44:51+0000",
            "content": "Bulk close for 3.2 "
        },
        {
            "author": "Pawel Rog",
            "id": "comment-14244044",
            "date": "2014-12-12T12:07:24+0000",
            "content": "Hi,\nThis issue contains information that it is blocked by LUCENE-3080. From other side LUCENE-3080 was not resolved.  So SOLR-2497 don't essentially need LUCENE-3080?\nI'm asking because of \"https://issues.apache.org/jira/browse/LUCENE-3080?focusedCommentId=13734900&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13734900\".\n\nWhen I removed lines mentioned in LUCENE-3080  from DefaultSolrHighlighter highlighting of Trie* fields seems to work. I'd be glad if you can provide me with any feedback. "
        },
        {
            "author": "Pawel Rog",
            "id": "comment-14244298",
            "date": "2014-12-12T15:52:30+0000",
            "content": "After removing lines mentioned in https://issues.apache.org/jira/browse/LUCENE-3080?focusedCommentId=13734900&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13734900 I built Solr with tests. All unit tests passed. So I'm wondering if those lines are still needed. Any information? "
        }
    ]
}