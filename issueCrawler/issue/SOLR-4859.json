{
    "id": "SOLR-4859",
    "title": "MinFieldValueUpdateProcessorFactory and MaxFieldValueUpdateProcessorFactory don't do numeric comparison for numeric fields",
    "details": {
        "affect_versions": "4.3",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "MinFieldValueUpdateProcessorFactory and MaxFieldValueUpdateProcessorFactory are advertised as supporting numeric comparisons, but this doesn't work - only string comparison is available - and doesn't seem possible, although the unit tests show it is possible at the unit test level.\n\nThe problem is that numeric processing is dependent on the SolrInputDocument containing a list of numeric values, but at least with both the current XML and JSON loaders, only string values can be loaded.\n\nTest scenario.\n\n1. Use Solr 4.3 example.\n2. Add following update processor chain to solrconfig:\n\n\n  <updateRequestProcessorChain name=\"max-only-num\">\n    <processor class=\"solr.MaxFieldValueUpdateProcessorFactory\">\n      <str name=\"fieldName\">sizes_i</str>\n    </processor>\n    <processor class=\"solr.LogUpdateProcessorFactory\" />\n    <processor class=\"solr.RunUpdateProcessorFactory\" />\n  </updateRequestProcessorChain>\n\n\n\n3. Perform this update request:\n\n\n  curl \"http://localhost:8983/solr/update?commit=true&update.chain=max-only-num\" \\\n  -H 'Content-type:application/json' -d '\n  [{\"id\": \"doc-1\",\n    \"title_s\": \"Hello World\",\n    \"sizes_i\": [200, 999, 101, 199, 1000]}]'\n\n\n\nNote that the values are JSON integer values.\n\n4. Perform this query:\n\n\ncurl \"http://localhost:8983/solr/select/?q=*:*&indent=true&wt=json\"\n\n\n\nShows this result:\n\n\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n      {\n        \"id\":\"doc-1\",\n        \"title_s\":\"Hello World\",\n        \"sizes_i\":999,\n        \"_version_\":1436094187405574144}]\n  }}\n\n\n\nsizes_i should be 1000, not 999.\n\nAlternative update tests:\n\n\n  curl \"http://localhost:8983/solr/update?commit=true&update.chain=max-only-num\" \\\n  -H 'Content-type:application/json' -d '\n  [{\"id\": \"doc-1\",\n    \"title_s\": \"Hello World\",\n    \"sizes_i\": 200,\n    \"sizes_i\": 999,\n    \"sizes_i\": 101,\n    \"sizes_i\": 199,\n    \"sizes_i\": 1000}]'\n\n\n\nand\n\n\n  curl \"http://localhost:8983/solr/update?commit=true&update.chain=max-only-num\" \\\n  -H 'Content-type:application/xml' -d '\n  <add>\n    <doc>\n      <field name=\"id\">doc-1</field>\n      <field name=\"title_s\">Hello World</field>\n      <field name=\"sizes_i\">42</field>\n      <field name=\"sizes_i\">128</field>\n      <field name=\"sizes_i\">-3</field>\n    </doc>\n  </add>'\n\n\n\nIn XML, of course, there is no way for the input values to be anything other than strings (\"text\".)\n\nThe JSON loader does parse the values with their type, but immediately converts the values to strings:\n\n\n    private Object parseSingleFieldValue(int ev) throws IOException {\n      switch (ev) {\n        case JSONParser.STRING:\n          return parser.getString();\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          return parser.getNumberChars().toString();\n        case JSONParser.BOOLEAN:\n          return Boolean.toString(parser.getBoolean()); // for legacy reasons, single values s are expected to be strings\n        case JSONParser.NULL:\n          parser.getNull();\n          return null;\n        case JSONParser.ARRAY_START:\n          return parseArrayFieldValue(ev);\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing JSON field value. Unexpected \"+JSONParser.getEventString(ev) );\n      }\n    }\n\n    private List<Object> parseArrayFieldValue(int ev) throws IOException {\n      assert ev == JSONParser.ARRAY_START;\n  \n      ArrayList lst = new ArrayList(2);\n      for (;;) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.ARRAY_END) {\n          return lst;\n        }\n        Object val = parseSingleFieldValue(ev);\n        lst.add(val);\n      }\n    }\n  }\n\n\n\nOriginally, I had hoped/expected that the schema type of the field would determine the type of min/max comparison - integer for a *_i field in my case.\n\nThe comparison logic for min:\n\n\npublic final class MinFieldValueUpdateProcessorFactory extends FieldValueSubsetUpdateProcessorFactory {\n\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.min(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n\n\nWhich seems to be completely dependent only on the type of the input values, not the field type itself.\n\nIt would be nice to at least have a comparison override: compareNumeric=\"true\".",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13668491",
            "date": "2013-05-28T17:55:51+0000",
            "content": "The processors are deliberately agnostic to the fieldType associated with the field name of the input values because there is no requirement that the field name be in the schema at all \u2013 it might be a purely \"virtual\" field that exists only during input/processing of the document, and the resulting values may later be used in some other field.\n\nthe crux of the problem here seems to simply be in the JSonLoader forcing everything to be a string.  (If, for example, you use SolrJ to send Numeric objects instead that should work fine).\n\nIt would be nice to at least have a comparison override: compareNumeric=\"true\".\n\nthat type of option shouldn't exist on these processors \u2013 they do one thing, and one thing only.  An alternative solution (for people who want to configure processor chains that act on numeric values even if the client sends strings) there should be things like \"ParseIntegerUpdateProcessors\"\n\nFYI: i a conversation with Use account \"steve_rowe\" instead recently where we talked about some of these ideas ... i think he's planning on working on this soon actually.\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13668545",
            "date": "2013-05-28T18:46:21+0000",
            "content": "FYI: i a conversation with Steve Rowe recently where we talked about some of these ideas ... i think he's planning on working on this soon actually.\n\nYes, as part of SOLR-3250, I plan on fixing JsonLoader to not force everything to be a String, and adding date/numeric/boolean field update processor factories that will convert String values to the field's type (\"typeClass\" in field update processor selector lingo), if the field matches a schema field.  (Hoss mentioned String->Foo parsing field update processor factories as useful possibilities in the first comment on SOLR-2802.) "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13668596",
            "date": "2013-05-28T19:51:34+0000",
            "content": "I would note that the Javadoc for MinFieldValueUpdateProcessorFactory says:\n\n\nIn the example configuration below, if a document contains multiple integer values (ie: 64, 128, 1024) in the field smallestFileSize then only the smallest value (ie: 64) will be kept in that field.\n\n\n  <processor class=\"solr.MinFieldValueUpdateProcessorFactory\">\n    <str name=\"fieldName\">smallestFileSize</str>\n  </processor>\n\n\n\nEven if the JSON loader is fixed, we still have the XML loader. So, I think the Javadoc needs to heavily caveat that example claim. CSV loading would also have this issue. SolrCell as well.\n\nAlso, should fixing this issue be 100% gated on completion of SOLR-3250? If so, at least update the Javadoc to indicate that min/max for integer field values is currently not supported, or indicate that it is supported only by Solr 4.4 or/and later. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13668728",
            "date": "2013-05-28T22:02:56+0000",
            "content": "Also, should fixing this issue be 100% gated on completion of SOLR-3250? \n\nNo, definitely not, I'm going to make separate issues. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13673219",
            "date": "2013-06-03T15:42:21+0000",
            "content": "I have a patch to fix JsonLoader on SOLR-4891. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13673289",
            "date": "2013-06-03T16:34:10+0000",
            "content": "I have a patch to fix JsonLoader \n\nI'm glad to hear that, but we still have the XML loader, CSV loader, and SolrCell.\n\nI would prefer a fix to the mutating field processor code itself. I mean, how un-obvious is it that a processor labeled \"Min/Max Field Value\" should be able to handle numeric string values when (if) the type of the field is known? Clearly a bad design was chosen. Why can't we correct that bad design decision and eliminate the need for workaround approaches like requiring users to explicitly convert types?\n\nBut... if this really bad design decision really is cast in concrete... any ETA on the explicit conversion processors? As well as an update to the Javadoc to highlight the pitfalls of min/max for non-JSON field values. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13673303",
            "date": "2013-06-03T16:47:01+0000",
            "content": "Clearly a bad design was chosen. Why can't we correct that bad design decision and eliminate the need for workaround approaches like requiring users to explicitly convert types?\n\nI disagree.  it was a very concious choice for all of these processors to operate based on the types of values they encountered, not the types of the field names according to the schema.  i tried to make the docs as explicit about this as possible: there is no mention of schema types at all, only the types of the values.\n\nIf you have a concrete suggestion for improving the documentation to make it more clear that the comparison is based on the types of objects in the document, i'm all ears \u2013 but i think it would be a big mistake to convolute the documentation of small, modular, toolkit type processors like this these with caveats based on specific loaders. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13673311",
            "date": "2013-06-03T16:56:05+0000",
            "content": "any ETA on the explicit conversion processors?\n\nSoon: SOLR-4892 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13673917",
            "date": "2013-06-04T01:36:58+0000",
            "content": "Jack Krupansky, you wrote:\n\nany ETA on the explicit conversion processors? As well as an update to the Javadoc to highlight the pitfalls of min/max for non-JSON field values.\n\nJavadoc patches are welcome! "
        }
    ]
}