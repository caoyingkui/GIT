{
    "id": "SOLR-10786",
    "title": "Add DBSCAN clustering Streaming Evaluator",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The DBSCAN clustering Stream Evaluator will cluster numeric vectors using the DBSCAN clustering algorithm.\n\nClustering implementation will be provided by Apache Commons Math.",
    "attachments": {
        "SOLR-10786.patch": "https://issues.apache.org/jira/secure/attachment/12878826/SOLR-10786.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-25T16:01:24+0000",
            "content": "Initial patch, tests to come. ",
            "author": "Joel Bernstein",
            "id": "comment-16100270"
        },
        {
            "date": "2017-07-25T20:13:00+0000",
            "content": "Added a test case for the nodeVectors. Will add a test case for the dbscan clustering shortly. ",
            "author": "Joel Bernstein",
            "id": "comment-16100690"
        },
        {
            "date": "2017-07-26T18:34:00+0000",
            "content": "Added a testcase for dbscan clustering. Will do some manual testing on larger data sets now. ",
            "author": "Joel Bernstein",
            "id": "comment-16102080"
        },
        {
            "date": "2018-01-29T21:12:23+0000",
            "content": "Solr 7.3 has kmeans++ and fuzzyKmeans clustering. But DBSCAN clustering was just too slow, I thought, to be useful for Solr users. I will try it again sometime to see if it was just how I put things together, but it was painfully slow compared to kmeans++.\n\neigen and singular value decompositions are planned for Solr 7.4, so other clustering techniques such as PCA and LSA are on the way.\n\n\u00a0 ",
            "author": "Joel Bernstein",
            "id": "comment-16344035"
        },
        {
            "date": "2018-01-29T21:21:30+0000",
            "content": "Can one of them suit for DBSCAN usecase when we want to spatial clustering given lon and lat? ",
            "author": "dan v",
            "id": "comment-16344043"
        },
        {
            "date": "2018-01-30T00:44:46+0000",
            "content": "That's a good question. I think DBSCAN would have been better for this. And also since lat/long are very small records I suspect it would be fast enough. But I think we would need a distance measure that is specific for this purpose. I think this use case is interesting enough that we should investigate. ",
            "author": "Joel Bernstein",
            "id": "comment-16344284"
        },
        {
            "date": "2018-01-30T00:49:22+0000",
            "content": "David Smiley, do you think you put together a lat/long distance measure that we could cluster lat/long coordinates with?\n\nWe would need to follow this interface to plug into Apache Commons Math DBSCAN clustering:\n\nhttps://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/ml/distance/DistanceMeasure.html ",
            "author": "Joel Bernstein",
            "id": "comment-16344301"
        },
        {
            "date": "2018-01-30T03:13:01+0000",
            "content": "I assume the pair of arguments, double[] a and double[] b for longitude and latitude respectively would both be of length 1?  Sure; it's trivial as you just need to call out to something like org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double).  Yeah I could add something like this.... or maybe this comment is all you were looking for from me since it amounts to a one-liner. ",
            "author": "David Smiley",
            "id": "comment-16344435"
        },
        {
            "date": "2018-01-30T12:03:43+0000",
            "content": "There would be a lat/long pair in each double array. The distance function will return the distance between the lat/long pair. I'll take a look at the SloppyMath class and take the first shot at an implementation. ",
            "author": "Joel Bernstein",
            "id": "comment-16344955"
        },
        {
            "date": "2018-01-30T12:06:25+0000",
            "content": "The SloppyMath method looks like exactly what I need. I'll take it from here.\u00a0\n\n\u00a0 ",
            "author": "Joel Bernstein",
            "id": "comment-16344959"
        },
        {
            "date": "2018-01-31T02:37:56+0000",
            "content": "I did some benchmarking and DBSCAN is very fast with 2 dimensional vectors. So, lat/long DBSCAN clustering is looking like a very promising use case. I'll also add haversinMeter and haversinKilometer distance to the distance() function, to support the creation of distance matrices. This will open the door to other machine learning algorithms such as spectral clustering. ",
            "author": "Joel Bernstein",
            "id": "comment-16346164"
        },
        {
            "date": "2018-08-09T01:01:23+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "author": "Gavin",
            "id": "comment-16574102"
        }
    ]
}