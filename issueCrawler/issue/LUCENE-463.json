{
    "id": "LUCENE-463",
    "title": "Sorting does not work correcly on \"String Date\"",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "I am doing a simple query with a sort on a date field already put on a string format (YYYYmmDDHHMMSS). I am presenting 10 results per pages. The results I have is not correctly sort. On a page \"4 october\" is before \"5 october\", on another page I got the same kind of error.\n\nThese are logs of the sorting I get:\n\n20051006102501 DATE: 06 oct. 2005\n20051004130501 DATE: 04 oct. 2005 <-- PROBLEM!\n20051005120200 DATE: 05 oct. 2005\n20050928094805 DATE: 28 sept. 2005\n20050928114901 DATE: 28 sept. 2005\n20050928114901 DATE: 28 sept. 2005\n20050928101901 DATE: 28 sept. 2005\n20050928142601 DATE: 28 sept. 2005\n20050928142601 DATE: 28 sept. 2005\n20050929094100 DATE: 29 sept. 2005 <-- PROBLEM!\n\n20050928132931 DATE: 28 sept. 2005\n20050929090002 DATE: 29 sept. 2005 <-- PROBLEM!\n20050927203403 DATE: 27 sept. 2005\n20050927203402 DATE: 27 sept. 2005\n20050927131901 DATE: 27 sept. 2005\n20050927131901 DATE: 27 sept. 2005\n20050927132501 DATE: 27 sept. 2005\n20050927132500 DATE: 27 sept. 2005\n20050927133101 DATE: 27 sept. 2005\n20050927133100 DATE: 27 sept. 2005\n\n\n20050926115001 DATE: 26 sept. 2005\n20050927112301 DATE: 27 sept. 2005\n20050926091200 DATE: 26 sept. 2005 <-- PROBLEM!\n20050927085701 DATE: 27 sept. 2005\n20050923111558 DATE: 23 sept. 2005\n20050923103700 DATE: 23 sept. 2005\n20050923144300 DATE: 23 sept. 2005\n20050922102200 DATE: 22 sept. 2005\n20050922082701 DATE: 22 sept. 2005\n20050923085601 DATE: 23 sept. 2005 <-- PROBLEM!\n\n\n20050815102204 DATE: 15 august 2005\n20050815102201 DATE: 15 august 2005\n20050816102200 DATE: 16 august 2005  <-- PROBLEM!\n20050815110400 DATE: 15 august 2005 \n20050816124500 DATE: 16 august 2005 <-- PROBLEM!\n20050812163334 DATE: 12 august 2005\n20050812163331 DATE: 12 august 2005\n20050812161840 DATE: 12 august 2005\n20050812161935 DATE: 12 ao\u00fbt 2005\n20050812113442 DATE: 12 ao\u00fbt 2005",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-11-10T06:33:20+0000",
            "content": "without providing any any explanation of how you are building the index, or how exactly you are executing your searches, I'm not sure that there is any way to understand the problem you are seeing\n\nPlease attach some code that demonstrates the probem.  \n\nIdeally this should be in the form of a JUnit Test, so it can easily be incorperated into the existing unit tests \u2013 but at a minimum people will need to see code for a standalone program with a main function that requires no input and builds up an index in either a RAMDirectory or in the current working directory and does a search/sort using the same method you are using in order to figure out what the problem might be. ",
            "author": "Hoss Man",
            "id": "comment-12357145"
        },
        {
            "date": "2005-11-25T12:13:37+0000",
            "content": "I've resolved the same problem today, and think it's the problem caused by Integer.parseInt(). For example, at the second line, Integer.parseInt( \"20051004130501\" ) gives an NumberFormatException with contained message \"For input string: \"20051004130501\"\".\n\nSo, I've made some changes of using Long.parseLong() rather than Integer.parseInt() to the classes related like FieldCache.java, FieldCacheImpl.java, and FieldSortedHitQueue.java.\n\nAnd now it sorts date values in yyyymmddhhmmsszzz like a charm!\n\nI can make some patches to address this issue right away, if there is anyone who needs it.\n\nAnd of course, the performance and memory issue should be tested thoroughly.\n\nAnd also, does anybody have a problem with sorting values in double, not float? ",
            "author": "Cheolgoo Kang",
            "id": "comment-12358478"
        },
        {
            "date": "2005-11-25T12:50:19+0000",
            "content": "Why not just use a string sort rather than an integer (or long) sort? ",
            "author": "Yonik Seeley",
            "id": "comment-12358479"
        },
        {
            "date": "2005-11-25T13:07:46+0000",
            "content": "AFAIK, sorting as number is far more faster than string. And friendly with memory issue also.\n\nSome developers want to use the value they've inserted in database, and thinks it's wasting disk space to save another 'same' field just for sorting to the database or lucene index while they can sort it with existing values. ",
            "author": "Cheolgoo Kang",
            "id": "comment-12358480"
        },
        {
            "date": "2005-11-25T22:27:34+0000",
            "content": "Thanks for resolving it. I didn't get your first note asking me to send you the Junit test. Sorry, if I didn't respond. I still can build the unit test, for my use, and send it here. Could you make a patch (a lucene.jar)? I will work on it this week, and test it. \n\nThanks.\n\nEtienne. ",
            "author": "Etienne",
            "id": "comment-12358509"
        },
        {
            "date": "2005-11-26T00:12:39+0000",
            "content": "Etienne, how are you specifying the sort?  A string sort should work for this.\n\nCheolgoo, string sorting with no locale is faster than numeric sorting the first time you sort on a particular field.  After the first time, string sorting will be the same speed as integer sorting, but faster than float sorting.   The reason is that the strings are already sorted in the lucene index, so their index-order (ordinals) are compared.  The string values themselves are never compared unless you are using MultiSearcher or if you specify a different Locale to sort by.\n\nString sorting does use more memory, since an additional array of the unique terms is kept.  See FieldCache.StringIndex.  Unless a significant amount of documents have unique values, a long[] in the fieldcache could take more room. ",
            "author": "Yonik Seeley",
            "id": "comment-12358511"
        },
        {
            "date": "2005-11-26T02:56:44+0000",
            "content": "Hi, \n\nthe way I do the sort is something like this :\n\nString sortingField = \"date\";\nboolean sorder = (vo.getSorder().equals(LuceneConstants.ASCENDING))?true:false;\nsorting = new Sort(sortingField, sorder); // where sorting field == \"dateToBeSort\" \nHits h = s.search(finalQuery, sorting);\n\nAnd the field is stored like this in the Index:\n\npublic static void addFieldDate(Document luceneDoc, Date date, String field){\n\t\tif(date!=null)\n{\n\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(MetaDataConstants.DATE_FORMAT);\n\t\t\tString  dateStr = formatter.format(date);\n\t\t\tluceneDoc.add(Field.Keyword(field,dateStr)); // where field is \"dateToBeSort\" \n\n\t\t}\n\t\n\t}\n\nSo it seems it is already a String that I stored?\n\nEtienne. ",
            "author": "Etienne",
            "id": "comment-12358519"
        },
        {
            "date": "2005-11-26T03:41:51+0000",
            "content": "> sorting = new Sort(sortingField, sorder);\n\nAhhh, that could be the problem.  You aren't specifying what type to treat the field as, so it defaults to AUTO, meaning that lucene tries to figure out the field type at sort time by the first term for that field in the index.\n\nUse the Sort constructor that takes a SortField, and specify string sorting. ",
            "author": "Yonik Seeley",
            "id": "comment-12358522"
        },
        {
            "date": "2005-11-26T03:50:39+0000",
            "content": "Yep, I verified that AUTO sorting is your problem.\nIn FieldCacheImpl for an AUTO type, first Integer.parseInt() is tried, and if that fails,\nFloat.parseFloat() is tried.  \nFor your case, parseInt() will fail because it's too big, but parseFloat() will work (but not with enough precision).\n\nFloat.parseFloat(\"20051004130501\")=2.00510045E13\nFloat.parseFloat(\"20051006102501\")=2.00510066E13\nFloat.parseFloat(\"20051005102501\")=2.00510045E13\n\nNotice how two of the strings map to the same float when parsed as such. ",
            "author": "Yonik Seeley",
            "id": "comment-12358524"
        },
        {
            "date": "2005-11-26T10:06:04+0000",
            "content": "Closing. You can reopen if string sorting doesn't solve the problem for you. ",
            "author": "Yonik Seeley",
            "id": "comment-12358540"
        },
        {
            "date": "2005-12-01T01:51:04+0000",
            "content": "Hi, \nThanks all, \n\nI think everything works well now. This way to make a sort is not mention in the Lucene In Action book. Maybe it should be a bit more detailled there.\n\npublic Sort createSorting(ILuceneFilterParameterVO vo){\n\t\tString fieldToSort = vo.getSort();\n\t\tSort sorting = null;\n\t\tif(fieldToSort!=null&&!fieldToSort.equals(LuceneConstants.NOSORT))\n{\n\t\t\t// descending is the default setting for our requierements.\n\t\t\tboolean reverse = (vo.getSorder().equals(LuceneConstants.ASCENDING))?false:true;\n\t\t\tSortField sortField = new SortField(fieldToSort, SortField.STRING, reverse);\n\t\t\tsorting = new Sort(sortField);\n\t\t}\n\t\treturn sorting;\n\t}\n\nThanks all.\n\nEtienne. ",
            "author": "Etienne",
            "id": "comment-12358929"
        }
    ]
}