{
    "id": "LUCENE-5570",
    "title": "FSDirectory's fsync() is lenient",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/store"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7.2",
            "4.8",
            "6.0"
        ]
    },
    "description": "This method has a lot of problems:\n1. it tracks 'stale files' as it writes (this seems pointless), and only actually fsyncs the intersection of that 'stale files' and the filenames passed as argument to sync(). So any bogus names passed to sync() are just silently ignored\n2. if \"something bad happens\" (e.g. two indexwriters/dirs on the same path, or some other shenanigans), and the file is actually in stale files, but was say actually deleted on the filesystem, the underlying fsync() call will create a new 0-byte file and fsync that.\n\nIn my opinion we should do none of this. we should throw exceptions when this stuff is wrong.",
    "attachments": {
        "LUCENE-5570_java6.patch": "https://issues.apache.org/jira/secure/attachment/12638742/LUCENE-5570_java6.patch",
        "LUCENE-5570_zerobyte.patch": "https://issues.apache.org/jira/secure/attachment/12638566/LUCENE-5570_zerobyte.patch",
        "LUCENE-5570.patch": "https://issues.apache.org/jira/secure/attachment/12638538/LUCENE-5570.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13959104",
            "author": "Robert Muir",
            "content": "here's a patch and a prototype solution for discussion. ",
            "date": "2014-04-03T19:15:30+0000"
        },
        {
            "id": "comment-13959108",
            "author": "Robert Muir",
            "content": "As far as this staleFiles, we can keep it if we need. but it should not be this silly retainAll() call. \nwe should record syncedFiles or something like that and be more careful. ",
            "date": "2014-04-03T19:21:34+0000"
        },
        {
            "id": "comment-13959110",
            "author": "Michael McCandless",
            "content": "if \"something bad happens\" (e.g. two indexwriters/dirs on the same path, or some other shenanigans), and the file is actually in stale files, but was say actually deleted on the filesystem, the underlying fsync() call will create a new 0-byte file and fsync that.\n\nThis is truly awful: sync of a non-existent file should not bring a 0-byte file into existence!\n\nit tracks 'stale files' as it writes (this seems pointless), and only actually fsyncs the intersection of that 'stale files' and the filenames passed as argument to sync(). So any bogus names passed to sync() are just silently ignored\n\nThis is because IW passes all files referenced by all segments when it commits(), i.e. we push the responsibility of remembering which files are written but not sync'd down to Directory.  This used to be IW's responsibility, but we changed that in LUCENE-2328 I think. ",
            "date": "2014-04-03T19:22:25+0000"
        },
        {
            "id": "comment-13959112",
            "author": "Robert Muir",
            "content": "\nThis is because IW passes all files referenced by all segments when it commits(), i.e. we push the responsibility of remembering which files are written but not sync'd down to Directory. This used to be IW's responsibility, but we changed that in LUCENE-2328 I think.\n\nI cant see this method being correct unless we also track syncedFiles, which implies an unbounded list!\n\nI think we should move this stuff back into IW... ",
            "date": "2014-04-03T19:24:30+0000"
        },
        {
            "id": "comment-13959115",
            "author": "Robert Muir",
            "content": "By the way i think we can go back to RAF actually, its fine to just open the file only for read to sync it. This is described in the javadocs for force().\n\nI just want an exception if the file is bogus  ",
            "date": "2014-04-03T19:29:56+0000"
        },
        {
            "id": "comment-13959217",
            "author": "Simon Willnauer",
            "content": "after looking on the bug that lead to this issue I'd have appreciated to get a FNF exception rather than 0-byte files to begin with. The trappieness of sync and the stale files map is one thing which we can fix in a different issue IMO. But the 0-byte files we should get fixed right away. I also thinkg that it might be ok to throw an exception if you wanna sync a file that was not written through this directory? ",
            "date": "2014-04-03T21:04:09+0000"
        },
        {
            "id": "comment-13959247",
            "author": "Robert Muir",
            "content": "Thats a good point Simon, i think its going to be a pain to deal with this stupid stale files map (to really fix the stupid leniency)\n\nBut as a start, we should fix fsync to not create new zero byte files under any condition. Here is a patch for that. ",
            "date": "2014-04-03T21:28:03+0000"
        },
        {
            "id": "comment-13959258",
            "author": "Michael McCandless",
            "content": "+1, new patch looks great; I agree we can decouple the two issues. ",
            "date": "2014-04-03T21:34:01+0000"
        },
        {
            "id": "comment-13959262",
            "author": "Robert Muir",
            "content": "I'll make a followup issue for the stale files map: I think its bogus for a number of reasons, and IW should track this efficiently. But its somewhat unrelated. ",
            "date": "2014-04-03T21:37:40+0000"
        },
        {
            "id": "comment-13959263",
            "author": "Uwe Schindler",
            "content": "after looking on the bug that lead to this issue I'd have appreciated to get a FNF exception rather than 0-byte files to begin with\n\nWhich bug?\n\nAbout the patch: Looks fine. I am just a little bit sceptical if a sync() on a readonly file really does what the javadocs say (on all operating systems...). Can we test this somehow without using the power-switches of our computers? Maybe write a large file, sync it and while doing that check some /proc or /sys file to monitor how many unwritten buffers are there? ",
            "date": "2014-04-03T21:38:02+0000"
        },
        {
            "id": "comment-13959268",
            "author": "Robert Muir",
            "content": "\nI am just a little bit sceptical if a sync() on a readonly file really does what the javadocs say (on all operating systems...).\n\nI don't think thats an issue i need to test for: thats a jvm bug if it doesnt happen according to the javadocs. ",
            "date": "2014-04-03T21:42:04+0000"
        },
        {
            "id": "comment-13959949",
            "author": "Simon Willnauer",
            "content": "seems like we prepare for 4.7.2   I think this one should be there as well at least for the RW part? ",
            "date": "2014-04-04T13:31:44+0000"
        },
        {
            "id": "comment-13959999",
            "author": "Robert Muir",
            "content": "Upon researching, I think we should address Uwe's concern. So I think we should change the patch to do:\n\n\nfFileChannel.open(f, StandardOpenOption.WRITE, StandardOpenOption.APPEND);\n\n\n\nBut we cannot do this in 4.7.x (needs java7 apis). So if we want to backport we should do something else there. ",
            "date": "2014-04-04T14:26:54+0000"
        },
        {
            "id": "comment-13960194",
            "author": "Robert Muir",
            "content": "here is the updated patch. its unclear to me if we can do anything for 4.7.x (because of java6), but i think we should fix this for 4.8/5.0 ",
            "date": "2014-04-04T17:56:19+0000"
        },
        {
            "id": "comment-13960206",
            "author": "Uwe Schindler",
            "content": "Patch looks fine, only the APPEND is not needed:\n\nFileChannel.open(fullFile.toPath(), StandardOpenOption.WRITE);\n\n\n\nWRITE does not zero the file, to empty it you need to use TRUNCATE_EXISTING or CREATE.\nAPPEND is just there to initially set the file pointer.\n\nBut in any case, +1 to commit.\n\nWe can only use this with Lucene 4.7.x if we use crazy reflection and detect Java 7. Another approach for Java 6 (4.7.x) would be to use a \"non-atomic\" check to first try to open the file for read and if that works, close and reopen RW - both as RandomAccessFile). ",
            "date": "2014-04-04T18:05:48+0000"
        },
        {
            "id": "comment-13960215",
            "author": "Michael McCandless",
            "content": "Patch looks good.\n\nAnother approach for Java 6 (4.7.x) would be to use a \"non-atomic\" check to first try to open the file for read and if that works, close and reopen RW - both as RandomAccessFile).\n\n+1\n\nI think the non-atomicness is fine here. ",
            "date": "2014-04-04T18:14:06+0000"
        },
        {
            "id": "comment-13960218",
            "author": "Uwe Schindler",
            "content": "One more addition: I am not sure if the whole workflow, Lucene uses to force syncing are actually working on all operating systems like we have them. The javadocs of FleChannel and FileDescriptor only say that all changes made with this file descriptor resp. this FileChannel are written to disk:\n\n\nIf this channel's file resides on a local storage device then when this method returns it is guaranteed that all changes made to the file since this channel was created, or since this method was last invoked, will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash.\n\nThis method is only guaranteed to force changes that were made to this channel's file via the methods defined in this class. It may or may not force changes that were made by modifying the content of a mapped byte buffer obtained by invoking the map method. Invoking the force method of the mapped byte buffer will force changes made to the buffer's content to be written.\n\nIn my opinion, the sync() should be done by the IndexOutput (e.g. before closing). But thats another issue to solve. ",
            "date": "2014-04-04T18:14:48+0000"
        },
        {
            "id": "comment-13960228",
            "author": "ASF subversion and git services",
            "content": "Commit 1584860 from rmuir@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1584860 ]\n\nLUCENE-5570: don't let fsync create new zero-byte files ",
            "date": "2014-04-04T18:21:12+0000"
        },
        {
            "id": "comment-13960231",
            "author": "Michael McCandless",
            "content": "In my opinion, the sync() should be done by the IndexOutput (e.g. before closing). But thats another issue to solve.\n\n+1, we are on thin ice today.  See LUCENE-3237 for some earlier discussion about this.\n\nAlso, we should sync the directory as well... ",
            "date": "2014-04-04T18:22:04+0000"
        },
        {
            "id": "comment-13960236",
            "author": "Robert Muir",
            "content": "\nI think the non-atomicness is fine here.\n\nOk ill make a 4.7.2 patch. The whole method isnt atomic anyway, it takes Collection of files and must do them one by one  ",
            "date": "2014-04-04T18:23:19+0000"
        },
        {
            "id": "comment-13960238",
            "author": "ASF subversion and git services",
            "content": "Commit 1584861 from rmuir@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1584861 ]\n\nLUCENE-5570: don't let fsync create new zero-byte files ",
            "date": "2014-04-04T18:24:09+0000"
        },
        {
            "id": "comment-13960250",
            "author": "Robert Muir",
            "content": "here is the java6 backport ",
            "date": "2014-04-04T18:30:25+0000"
        },
        {
            "id": "comment-13960260",
            "author": "Michael McCandless",
            "content": "+1 for java6 version. ",
            "date": "2014-04-04T18:36:37+0000"
        },
        {
            "id": "comment-13960448",
            "author": "Simon Willnauer",
            "content": "+1 LGTM ",
            "date": "2014-04-04T21:31:12+0000"
        },
        {
            "id": "comment-13960486",
            "author": "Uwe Schindler",
            "content": "The whole method isnt atomic anyway, it takes Collection of files and must do them one by one \n\nThis was not meant to be atomic for al files. The issue here is: It is still possible to create an empty file: if the RAF readonly open is done successfully, then another thread deletes the file, before the RandomAccessFile is opened for write.\n\nI am not sure if we should backport this hack to 4.7 branch. We should better release Lucene 4.8 on Java 7 and leave 4.7 as it is. The bug is not causing data corrumption, it just confuses if you are debugging strange things like issue LUCENE-5574. ",
            "date": "2014-04-04T22:08:46+0000"
        },
        {
            "id": "comment-13960523",
            "author": "Robert Muir",
            "content": "Ok, I am fine with waiting for 4.8 . But this best effort patch is fine imo for the record. I don't want to do any sneakiness to meet some theoretical perfection for java 6. This is just a very practical thing, especially if you are the one scratching your head at said zero byte files.\n\nLets leave 4.7 branch totally broken instead. Fine by me. ",
            "date": "2014-04-04T22:42:13+0000"
        },
        {
            "id": "comment-13960542",
            "author": "Michael McCandless",
            "content": "I think this is worth fixing for 4.7.2; that esoteric case that could bring an empty file into existence won't matter in practice, and the confusion when IW unexpectedly brings 0 byte files into existence is really confusing. ",
            "date": "2014-04-04T22:57:18+0000"
        },
        {
            "id": "comment-13964623",
            "author": "Uwe Schindler",
            "content": "Hi, because Simon Willnauer asked me: The javadocs of FileChannel#force(boolean) are not so nice, because they only garant that the changes made by this FileDescriptor are written to disk. In fact this is correct and also affects RandomAccessFile, although the javadocs are not so explicit (Javadocs of FileDescriptor class only talk about buffers owned by \"this FD\", but this is equivalent).\n\nIn fact, if you check the native C++ source code of OpenJDK, in fact, FileDescriptor#sync() and FileChannel#force(true) call exactly the same sycall: http://linux.die.net/man/2/fsync\n\n\nfsync() transfers (\"flushes\") all modified in-core data of (i.e., modified buffer cache pages for) the file referred to by the file descriptor fd to the disk device (or other permanent storage device) so that all changed information can be retrieved even after the system crashed or was rebooted. This includes writing through or flushing a disk cache if present. The call blocks until the device reports that the transfer has completed. It also flushes metadata information associated with the file (see stat(2)).\n\nCalling fsync() does not necessarily ensure that the entry in the directory containing the file has also reached disk. For that an explicit fsync() on a file descriptor for the directory is also needed.\n\nFileChannel#force(false) just calls fdatasync(), also explained on this man page. On Windows, it does the same like FileChannel#force(true).\n\nUnless other JVMs implement this is a completely different way, both code paths are identical. In addition, the man page of fsync also states:\n\nOn some UNIX systems (but not Linux), fd must be a writable file descriptor.\n\nThis is why we need to open for write and because of that we can only create 0 byte files in Java 6, unless we check for existence before.\n\nPlease also note the following statement:\n\nCalling fsync() does not necessarily ensure that the entry in the directory containing the file has also reached disk. For that an explicit fsync() on a file descriptor for the directory is also needed.\n\nAs far as I remember, in Java 7 we can also flush the directory, we should try this - if it works!\n\nAddition: On Windows, all code in JNI impls for java.io and java.nio is finally delegated to FlushFileBuffers(HANDLE): http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439(v=vs.85).aspx. The windows kernel32.dll syscall also requires that the file is open for write. ",
            "date": "2014-04-09T20:16:28+0000"
        },
        {
            "id": "comment-13964757",
            "author": "ASF subversion and git services",
            "content": "Commit 1586165 from mikemccand@apache.org in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1586165 ]\n\nLUCENE-5570: don't let Directory.fsync create new 0-byte files ",
            "date": "2014-04-09T22:43:25+0000"
        },
        {
            "id": "comment-13964759",
            "author": "Michael McCandless",
            "content": "OK I committed Rob's last patch to 4.7.x branch, so if we spin a new RC / do another bug fix release, this bug will be fixed. ",
            "date": "2014-04-09T22:43:55+0000"
        },
        {
            "id": "comment-13964794",
            "author": "Uwe Schindler",
            "content": "I reopened that issue to correctly close it with right status and add the correct fix version (it was closed as \"Won't fix\"!?) ",
            "date": "2014-04-09T23:16:58+0000"
        },
        {
            "id": "comment-13982511",
            "author": "Uwe Schindler",
            "content": "Close issue after release of 4.8.0 ",
            "date": "2014-04-27T23:25:34+0000"
        }
    ]
}