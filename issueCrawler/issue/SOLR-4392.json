{
    "id": "SOLR-4392",
    "title": "DIH - Need to externalize or encrypt username/password stored within data-config.xml",
    "details": {
        "affect_versions": "4.0,                                            4.1",
        "status": "Closed",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Today, the connection (database or otherwise) credentials is wide open in data-config.xml.  Not really an issue until someone sends out the config file outside of the server.\n\nWe should look into externalizing the database lookup or providing a way to encrypt the username and password.\n\nThe needs are:\n\n1/  Some projects want to enable multi-tenancy where data for each core is situated in different database servers w/ their own credentials.  We need a way to expose hooks that will allow implementations to be plugged in.  It can be done though the \"type\" attribute on the dataSource, but providing a factory might work better.\n\n2/  Most orgs are very protective of their credentials and weary of plain-text settings.\n\n\n<dataSource name=\"jdbc\" driver=\"oracle.jdbc.driver.OracleDriver\" url=\"jdbc:oracle:thin:@//hostname:port/SID\" user=\"db_username\" \n<!-- This database password is encrypted using AES using the command. pwd.txt contains the actual DB password -->\n<!-- openssl enc -aes-128-cbc -a -salt -in pwd.txt -->\npassword=\"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\" \n<!-- Password to decrypt is stored in this file-->\nencryptKeyFile=\"/location/of/encryptionkey\"\n/>",
    "attachments": {
        "SOLR-4392.patch": "https://issues.apache.org/jira/secure/attachment/12567379/SOLR-4392.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Senthuran Sivananthan",
            "id": "comment-13567761",
            "date": "2013-01-31T16:19:14+0000",
            "content": "Initial patch that adds a jdbc data source factory.\n\nWe now just need to implement the various encryption algorithms.\n\nI'll work on a quick DES and AES impls, next. "
        },
        {
            "author": "Ken Geis",
            "id": "comment-13580403",
            "date": "2013-02-18T04:22:18+0000",
            "content": "I think that the ability to use a JNDI data source makes this a non-issue. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14483394",
            "date": "2015-04-07T15:47:24+0000",
            "content": "What is stopping the user from extending JdbcDataSource and  use it directly and plug in a way to read your passwords "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14483399",
            "date": "2015-04-07T15:52:01+0000",
            "content": "Ideally I would like it as follows\n\n\n<dataSource type=\"JdbcDataSource\" user=\"x\" passwordEncrpt=\"MIIBOgIBAAJBALsT+DLgE4qGfYc3K7JRnbPS2dlpRvC6v8j\" encryptkey=\"/location/to/my/key\"/>\n\n\n\ninstead of giving too many options I would like to just use AES256  for encryption . And you can store the encryption key somewhere in the file systrem "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14509370",
            "date": "2015-04-23T17:08:18+0000",
            "content": "Another solution is to do a two pass request. Using a PKI solution\n\n\n\tSend a GET request to DIH and it would give back a public key of a key pair it generated internally and stored in-memory\n\tsend the password, encrypted with the public key as a param .\n\n\n\nThis assumes that , the Solr server did not get restarted in between "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14530703",
            "date": "2015-05-06T15:22:08+0000",
            "content": "Use aes-128 to encrypt password "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14532613",
            "date": "2015-05-07T13:33:25+0000",
            "content": "Commit 1678195 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1678195 ]\n\nSOLR-4392: Make it possible to specify AES encrypted password in dataconfig.xml "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14533071",
            "date": "2015-05-07T17:44:46+0000",
            "content": "Commit 1678242 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1678242 ]\n\nSOLR-4392: revert r1678195 which breaks forbidden-api "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14533150",
            "date": "2015-05-07T18:31:37+0000",
            "content": "Commit 1678250 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1678250 ]\n\nSOLR-4392: Make it possible to specify AES encrypted password in dataconfig.xml "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14534441",
            "date": "2015-05-08T12:47:38+0000",
            "content": "Commit 1678342 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1678342 ]\n\nSOLR-4392: Make it possible to specify AES encrypted password in dataconfig.xml "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14586904",
            "date": "2015-06-15T21:44:17+0000",
            "content": "Bulk close for 5.2.0. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14741097",
            "date": "2015-09-11T16:36:10+0000",
            "content": "There is some minimal documentation here in the issue for how to modify the DIH config, but no information in the reference guide at all that I can find.  The information here does not explain how to properly encrypt the password or create the encryptKeyFile.  The example encryptKeyFile location is absolute, so it is not clear what happens with a relative path. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14741423",
            "date": "2015-09-11T19:30:44+0000",
            "content": "I've been trying everything I can think of and what I can find on the Internet about encrypting strings with aes256, and nothing has worked so far.  Should I open a new issue? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14741439",
            "date": "2015-09-11T19:43:31+0000",
            "content": "Finally, success, using aes-128-cbc, and most critically, the key file must NOT have eol (LF in Linux). "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14741462",
            "date": "2015-09-11T19:59:26+0000",
            "content": "If you create a key file with vi from scratch, you will get the EOL character, and that will break the encrypted password.  Would it be difficult to get this working with a standard text file, where the line might be terminated with either LF or CRLF? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14742040",
            "date": "2015-09-12T12:36:26+0000",
            "content": "we can fix that. Just open a  new ticket "
        },
        {
            "author": "Pedro Mendes",
            "id": "comment-14966621",
            "date": "2015-10-21T10:42:31+0000",
            "content": "Hi,\n\nBesides the documentation here in the issue for how to modify the DIH config, where can I find additional information on how to encrypt the password or create the encryptKeyFile? \n\nDoes anybody have a working example?\n\nI'd be very gratefull, thanks "
        },
        {
            "author": "Alessandro Benedetti",
            "id": "comment-15006917",
            "date": "2015-11-16T16:55:47+0000",
            "content": "+1 , is it possible to add the documentation related in the solr wiki  ? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-15006939",
            "date": "2015-11-16T17:10:59+0000",
            "content": "Will do "
        },
        {
            "author": "Alessandro Benedetti",
            "id": "comment-15006944",
            "date": "2015-11-16T17:16:13+0000",
            "content": "Thanks Paul, anyway , it is clear how it works.\nIt is easy to configure it, but would be great to have it in the official documentation only to officially show this feature ( in this way will be easier for a user to understand that the password externalisation is something possible, without even accessing lira).\n\nThanks ! "
        },
        {
            "author": "Aniket Khare",
            "id": "comment-15382745",
            "date": "2016-07-18T18:10:29+0000",
            "content": "Could you please share the working example or the documentation for the data config encryption? "
        },
        {
            "author": "Jamie Jackson",
            "id": "comment-15552385",
            "date": "2016-10-06T16:19:52+0000",
            "content": "As far as I know, the only place where encrypted passwords are documented is in https://cwiki.apache.org/confluence/display/solr/Uploading+Structured+Data+Store+Data+with+the+Data+Import+Handler, under the \"Configuring the DIH Configuration File\", in a comment of a sample XML file:\n\n\n<!--\nAlternately the password can be encrypted as follows. This is the value obtained as a result of the command\nopenssl enc -aes-128-cbc -a -salt -in pwd.txt\npassword=\"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\" \nWHen the password is encrypted, you must provide an extra attribute\nencryptKeyFile=\"/location/of/encryptionkey\"\nThis file should a text file with a single line containing the encrypt/decrypt password\n-->\n\n\n\nUnfortunately, I can't get it to work. "
        },
        {
            "author": "Nicholas DiPiazza",
            "id": "comment-16216884",
            "date": "2017-10-24T13:14:41+0000",
            "content": "I'm quoting an OpenSSL mailing list:\n\n\n\"The  openssl enc  command appears to be (I'm looking at version 2.4.2) a very poor way to hash passwords and something you should only use if you desperately need to maintain backwards compatibility with some ancient software you cannot change. It only does one iteration which means brute forcing short passwords would be trivial.\"\n\nIs it possible to use a more secure algorithm? \n'PBKDF2' 'bcrypt' or 'scrypt' "
        },
        {
            "author": "Gerald Kanapathy",
            "id": "comment-16217017",
            "date": "2017-10-24T14:39:17+0000",
            "content": "Nicholas, I think the OpenSSL user has misunderstood your use case. One-way hashing to prevent offline attacks on a stolen password database is what the OpenSSL user is advising you against using AES-128 for. The use case here is to be able to encrypt and decrypt information using a secret key. \"bcrypt\" etc can't satisfy this because they are one-way irreversible hash functions. For the purpose of encrypting and decrypting content with a secret key, I believe that AES-128 is just about the most secure algorithm available in the (export) JDK. "
        },
        {
            "author": "Nicholas DiPiazza",
            "id": "comment-16218863",
            "date": "2017-10-25T15:10:51+0000",
            "content": "Gerald is correct. Got confirmation from the openssl mailing list as well: \n\n\nUse long strong passwords and you will be OK.\nThis is good because people with access to the XML document can be denied access to the file containing password2 and therefore cannot decrypt the database password1 or access the database.\nIf this is the case then your password2 must be long and complex - it must have high entropy. If you make it 30 random characters long it will not matter that  openssl enc  only uses one iteration. (If you have several databases which Solr accesses you should write an automated script to create and install a long random password2 to stop anybody using secret123 as their password2 or accidentally forgetting to chmod the file.)\nNote that you can see the length of password1 in the XML document and you will therefore need a strong password1 for the database too because it is easier to guess a password when you know the length. "
        }
    ]
}