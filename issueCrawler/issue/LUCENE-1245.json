{
    "id": "LUCENE-1245",
    "title": "MultiFieldQueryParser is not friendly for overriding getFieldQuery(String,String,int)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.3.2",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "LUCENE-1213 fixed an issue in MultiFieldQueryParser where the slop parameter wasn't being properly applied.  Problem is, the fix which eventually got committed is calling super.getFieldQuery(String,String), bypassing any possibility of customising the query behaviour.\n\nThis should be relatively simply fixable by modifying getFieldQuery(String,String,int) to, if field is null, recursively call getFieldQuery(String,String,int) instead of setting the slop itself.  This gives subclasses which override either getFieldQuery method a chance to do something different.",
    "attachments": {
        "multifield.patch": "https://issues.apache.org/jira/secure/attachment/12378672/multifield.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-26T23:47:31+0000",
            "content": "(Updating title to be more specific about what wasn't friendly.) ",
            "author": "Trejkaz",
            "id": "comment-12582482"
        },
        {
            "date": "2008-03-26T23:49:39+0000",
            "content": "Fix makes getFieldQuery(String,String) and getFieldQuery(String,String,int) work more or less the same.  Neither calls methods on super and thus overriding the methods will work (and does.  Although I have no unit test for this yet.)\n\nCommon boosting logic is extracted to an applyBoost method.  Also the check for the clauses being empty, I have removed... as getBooleanQuery appears to be doing that already. ",
            "author": "Trejkaz",
            "id": "comment-12582483"
        },
        {
            "date": "2008-03-27T00:12:25+0000",
            "content": "Here's an example illustrating the way we were using it, although instead of changing the query text we're actually returning a different query class \u2013 that class isn't in Lucene Core and also it's easier to build up an expected query if it's just a TermQuery.\n\n\n    public void testOverrideGetFieldQuery() throws Exception {\n        String[] fields = { \"a\", \"b\" };\n        QueryParser parser = new MultiFieldQueryParser(fields, new StandardAnalyzer()) {\n            protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n                if (field != null && slop == 1) {\n                    queryText = \"z\" + queryText;\n                }\n                return super.getFieldQuery(field, queryText, slop);\n            }\n        };\n\n        BooleanQuery expected = new BooleanQuery();\n        expected.add(new TermQuery(new Term(\"a\", \"zabc\")), BooleanClause.Occur.SHOULD);\n        expected.add(new TermQuery(new Term(\"b\", \"zabc\")), BooleanClause.Occur.SHOULD);\n        assertEquals(\"Expected a mangled query\", expected, parser.parse(\"\\\"abc\\\"~1\"));\n    }\n\n ",
            "author": "Trejkaz",
            "id": "comment-12582490"
        },
        {
            "date": "2013-02-28T13:03:55+0000",
            "content": "This issue has been inactive for more than 4 years. Please close if it's no longer relevant/needed, or bring it up to date if you intend to work on it. SPRING_CLEANING_2013 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13589508"
        },
        {
            "date": "2013-03-02T06:51:07+0000",
            "content": "I guess this resolution is correct. We have stopped using the basic query parser and now use the flexible one precisely because of this sort of issue, so the issue itself is no longer an issue for us. ",
            "author": "Trejkaz",
            "id": "comment-13591333"
        }
    ]
}