{
    "id": "LUCENE-609",
    "title": "Lazy field loading breaks backward compat",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Document.getField() and Document.getFields() have changed in a non backward compatible manner.\nSimple code like the following no longer compiles:\n Field x = mydoc.getField(\"x\");",
    "attachments": {
        "fieldable_patch.diff": "https://issues.apache.org/jira/secure/attachment/12335732/fieldable_patch.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-06-22T01:49:36+0000",
            "content": "I'll work up a quick patch to revert those APIs and add new ones for Fieldable. ",
            "author": "Yonik Seeley",
            "id": "comment-12417158"
        },
        {
            "date": "2006-06-22T02:20:39+0000",
            "content": "OK, here's the quick'n'dirty version that passes lucene unit tests.\n\n\n\tThe new getFieldable methods can be considered temporary until we decide if that's really the best way to provide access to the new functionallity.\n\n\n\n\n\tAt least some of the Fieldable instances in all of the unit tests should be reverted back to Field so we get some test coverage (that is what everyone still uses).\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-12417163"
        },
        {
            "date": "2006-06-22T02:27:35+0000",
            "content": "I just verified that Solr now compiles/works correctly again with this patch.\nAny objections to committing it? ",
            "author": "Yonik Seeley",
            "id": "comment-12417164"
        },
        {
            "date": "2006-06-22T02:34:31+0000",
            "content": "I think there is a typo of getFielables on Document.java, other than that looks good. ",
            "author": "Grant Ingersoll",
            "id": "comment-12417166"
        },
        {
            "date": "2006-06-22T02:50:45+0000",
            "content": "Committed (with typo fixes \n\nThe main point for me was to return backward compatibility of getField(s)\nOther committers should feel free to change/remove the getFieldable methods... they are still new enough to be considered temporary IMO. ",
            "author": "Yonik Seeley",
            "id": "comment-12417168"
        },
        {
            "date": "2006-06-22T04:13:18+0000",
            "content": "I'm late to the discussion and have only read the patch file, but it seems invalid to me.  Won't getField() get a class cast exception when it encounters a Fieldable that is not a Field?  The semantics of getField() would have to be something like, \"only get this field if it is a Field rather than some other kind of Fieldable\", which means it would have to do type testing on the members of fields.\n\nI think it is much better to remove this patch and leave Fieldable as is.  Searchable was the same kind of thing.  IndexReader is an abstract super class for the different types of readers.  When I did ParallelWriter, I had the same problem and had to introduce Writable since IndexWriter is not an abstract class and ParallelWriter is a different implementation.  I think it is best to introduce all the abstract classes now for fundamental types that have multiple implementations.\n\nChuck\n\n ",
            "author": "Chuck Williams",
            "id": "comment-12417188"
        },
        {
            "date": "2006-06-22T04:26:15+0000",
            "content": "> I'm late to the discussion\nYes, I didn't leave much time for debate   I really wanted to get back to something backward compatible so I could update Solr to use the latest Lucene.\n\n> but it seems invalid to me. Won't getField() get a class cast exception\n\nYes, as I noted here:\nhttp://www.nabble.com/Fieldable-breaks-backward-compatibility-t1825407.html#a4979233\nBut only if you are using the new Field options.  That's the price to pay for backward compatibility,  but it's a much better alternative than breaking everyones code when it's not necessary.\n\n> it would have to do type testing on the members of fields. \n\nThe JVM does this for us \n\n> Searchable was the same kind of thing.\n\nI don't recall if it did breack backward compatibility, but even so... how many people write their own Searchers/IndexReaders vs how many people call Document.getField()? ",
            "author": "Yonik Seeley",
            "id": "comment-12417193"
        }
    ]
}