{
    "id": "LUCENE-3508",
    "title": "Decompounders based on CompoundWordTokenFilterBase cannot be used with custom attributes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The CompoundWordTokenFilterBase.setToken method will call clearAttributes() and then will reset only the default Token attributes (term, position, flags, etc) resulting in any custom attributes losing their value. Commenting out clearAttributes() seems to do the trick, but will fail the TestCompoundWordTokenFilter tests..",
    "attachments": {
        "LUCENE-3508.patch": "https://issues.apache.org/jira/secure/attachment/12500346/LUCENE-3508.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-23T00:40:18+0000",
            "content": "I am attaching a patch that uses the TokenStream API instead of Token for the decompounders (CompoundWordTokenFilterBase, DictionaryCompoundWordTokenFilter, HyphenationCompoundWordTokenFilter).Non-common attributes are now being passed on correctly through the analyzer chain.  unit test of the functionality is included.\n\nHope it helps..any improvements are of course welcome. ",
            "author": "Spyros Kapnissis",
            "id": "comment-13133529"
        },
        {
            "date": "2011-10-23T11:20:21+0000",
            "content": "Hi Spyros,\nthanks for taking care. The patch looks correct, I have some minor recommendations (I will post them later).\nI will report back soon. ",
            "author": "Uwe Schindler",
            "id": "comment-13133613"
        },
        {
            "date": "2011-10-23T15:52:01+0000",
            "content": "I agree, lets fix this! \n\nAre there any other tokenstreams that don't yet work correctly with the attributes API? \nI was surprised there was no warning in the javadocs for this one.\nI thought I remembered us adding a warning, maybe that was ShingleMatrix though. ",
            "author": "Robert Muir",
            "id": "comment-13133674"
        },
        {
            "date": "2011-10-23T17:26:49+0000",
            "content": "ShingleMatrix is gone in 4.0 and deprecated in 3.x. There may be other filters with the same problem, maybe we should look for uses of Token class (which MUST DIE DIE DIE!) in the analyzers. ",
            "author": "Uwe Schindler",
            "id": "comment-13133694"
        },
        {
            "date": "2011-10-24T20:38:57+0000",
            "content": "Attached you will find a new patch for trunk. I made some improvements to the copy operations and CompoundTokenClass:\n\n\tcopy operations no longer create useless String objects or clones of String's internal char[] (this slows down indexing a lot)\n\tthe algorithmic hyphenator uses CTA's char[] directly as it did for Token before (see above) and uses optimized append()\n\tthe broken non-unicode-conform lowercasing was removed, instead, the CharArraySet is created case insensitive. If you pass in an own CharArraySet, it has to be case insensitive, if not, filter will fail (what to do? Robert, how do we handle that otherwise?)\n\tAs all tokens are again CTAs, the CAS lookup is fast again.\n\tSome whitespace cleanup in the test and relicts in base source file (Lucene requires 2 spaces, no tabs)\n\n\n\nRobert, if you could look into it, it would be great. I did not test it with Solr, but for me it looks correct.\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-13134463"
        },
        {
            "date": "2011-10-24T21:13:44+0000",
            "content": "More cleanup:\n\n\tAs original token is always preserved, is not put into the list at all and returned without modifying (no extra copy operations)\n\tremoved deprecated makeDictionary method and corrected matchVersion usage.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13134492"
        },
        {
            "date": "2011-10-24T21:30:36+0000",
            "content": "One more time the filter was revisited and partly rewritten:\n\n\tit no longer clones the orginal token, as decompounding is done when TokenStream is on this token, which does not change. The decompounder simply takes termAtt/offsetAtt and produces new CompoundToken instances out of it, added to the LinkedList. The original is returned unmodified by a simple \"return true\". This filter actually only creates new opjects when compounds are found, all other tokens are passed as is.\n\tCompoundToken is now a simple wrapper around the characters and the offsets, copied out of the unmodified original termAtt.\n\n\n\nI think thats the most effective implementation of this filters. I think it's ready to commit. ",
            "author": "Uwe Schindler",
            "id": "comment-13134515"
        },
        {
            "date": "2011-10-25T01:08:00+0000",
            "content": "Just one idea: if the base has makeDictionary(String[]), then maybe deprecate-3x-remove-trunk the stupid string[] ctors and just take the CharArraySet?\n\nI think this would remove about half the ctors in both base and subclasses, and I think these ctors are stupid myself.\n\nOtherwise, looks great! ",
            "author": "Robert Muir",
            "id": "comment-13134676"
        },
        {
            "date": "2011-10-25T06:49:33+0000",
            "content": "Robert: I agree. I think, I will do this in a separate issue, to get those changes first into 3.x (by merging) and then deprecate/remove all this later. Do we have other StopFilters and similar classes that have those String[] ctors?\n\nI will also add a javadocs info to the ctor: \"This filter does many lookups on the dictionary, so it is recommended for optimal performance to add a LowercaseFilter before this filter and make the CharArraySet passed as dictionary case insensitive.\"\n\nI would like to add this as a hint, as this filter does per term lots of lookups in the Set. ",
            "author": "Uwe Schindler",
            "id": "comment-13134786"
        },
        {
            "date": "2011-10-25T10:40:55+0000",
            "content": "Final trunk patch, which gets committed now:\n\n\tChanged the CompoundToken class to use CharSequence for holding the slices.\n\tAdded javadocs with recommendations for performance.\n\tDeprecated all String[] methods.\n\n\n\nOnce this is committed, I will backport and then in a second step remove the deprecated methods in trunk. ",
            "author": "Uwe Schindler",
            "id": "comment-13134924"
        },
        {
            "date": "2011-10-25T10:43:09+0000",
            "content": "Committed trunk revision: 1188597 ",
            "author": "Uwe Schindler",
            "id": "comment-13134926"
        },
        {
            "date": "2011-10-25T11:10:36+0000",
            "content": "Committed 3.x revision: 1188604 ",
            "author": "Uwe Schindler",
            "id": "comment-13134936"
        },
        {
            "date": "2011-10-25T11:30:59+0000",
            "content": "Finally also removed deprecations, so this issue is resolved.\n\nThanks Spyros for reporting this and making the initial patch! ",
            "author": "Uwe Schindler",
            "id": "comment-13134946"
        },
        {
            "date": "2011-10-25T14:40:09+0000",
            "content": "Looks great now, thanks a lot guys! ",
            "author": "Spyros Kapnissis",
            "id": "comment-13135103"
        },
        {
            "date": "2011-11-27T12:29:27+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157765"
        }
    ]
}