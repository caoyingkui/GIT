{
    "id": "LUCENE-2600",
    "title": "don't try to cache a composite reader's MultiBits deletedDocs",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "MultiFields.getDeletedDocs now builds up a MultiBits instance (so that one can check if a top-level docID is deleted), but it now stuffs it into a private cache on IndexReader.\n\nThis is invalid when the composite reader is read/write, and can result in a MultiReader falsely claiming a doc was not deleted.",
    "attachments": {
        "LUCENE-2600.patch": "https://issues.apache.org/jira/secure/attachment/12451889/LUCENE-2600.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-08-12T10:55:24+0000",
            "content": "Attached patch, removing the caching altogether. ",
            "author": "Michael McCandless",
            "id": "comment-12897691"
        },
        {
            "date": "2010-08-14T13:33:36+0000",
            "content": "Another iteration of the patch.\n\nThis one removes IndexReader.isDeleted, in favor of IndexReader.getDeletedDocs.  This then enabled removing ReadOnlySegment/DirReader classes, which is a nice simplificaton.\n\nI also fixed MultiFields.getDeletedDocs to re-ask the underlying readers for their .getDeletedDocs() when they previously returned null, to handle the non-readonly composite reader case. ",
            "author": "Michael McCandless",
            "id": "comment-12898588"
        }
    ]
}