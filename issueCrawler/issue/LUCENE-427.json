{
    "id": "LUCENE-427",
    "title": "PrefixQuery.extractTerms() missing",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "RC1.9 on 2005-08-21. I will attach a patch to add my version of extractTerms().",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--PrefixQuery.diff": "https://issues.apache.org/jira/secure/attachment/12312711/ASF.LICENSE.NOT.GRANTED--PrefixQuery.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-08-22T02:55:11+0000",
            "content": "Created an attachment (id=16137)\nProposed patch to add PrefixQuery.extractTerms()\n\nI needed extractTerms() only after a query has been executed, so rewrite() was\nalways called first. If needed, someone may want to move rewrite()\nfunctionality to be done inside extractTerms() as well. In this case, the\nrewritten query should probably be preserved in rewrite(). ",
            "author": "Mikko Noromaa",
            "id": "comment-12322570"
        },
        {
            "date": "2005-10-24T03:57:40+0000",
            "content": "MultiTermQuery (and thus WildcardQuery) are also missing the extractTerms() functions.\nAdded the same way as in PrefixQuery by assuming that rewrite() is always called first. ",
            "author": "Mikko Noromaa",
            "id": "comment-12332911"
        },
        {
            "date": "2008-09-19T11:53:47+0000",
            "content": "I just discovered this bug and I wonder if it will ever be resolved. If not, is there a workaround available? ",
            "author": "Jay Es",
            "id": "comment-12632648"
        },
        {
            "date": "2008-09-19T21:34:42+0000",
            "content": "Jay, does the attached patch solve your problem?\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12632833"
        },
        {
            "date": "2008-09-19T21:51:40+0000",
            "content": "Yes, the patch works for the PrefixQuery class. I guess there could be other classes without this functionality. I don't have the resources to check them atm, but I could look into it tomorrow. This is of course unless you already know what classes are influenced by this bug. Thanks for the quick reply. ",
            "author": "Jay Es",
            "id": "comment-12632837"
        },
        {
            "date": "2008-11-10T15:35:02+0000",
            "content": "Tempted to close this. Seems to me you are better off just calling rewrite and caching the booleanquery yourself rather than holding on it in the query. It could be quite big, and generally you wouldn't want to pay to keep it around, especially if queries where used in a cache or something. ",
            "author": "Mark Miller",
            "id": "comment-12646280"
        },
        {
            "date": "2008-11-15T00:12:05+0000",
            "content": "beyond the space overhead of maintaining a reference to the rewritten query, you would run into problems with extractTerms returning the terms based on whatever IndexReader was used the last time the query was rewritten ... which in a multi threaded environment may not be the last time you think it was rewritten.\n\nand as mark said: if you're going to assume rewrite has been called, why not just hang on to the output of hte rewrite call yourself?\n\nLast but not least, is the javadocs for Query.extractTerms() ...\n\nExpert: adds all terms occuring in this query to the terms set. Only works if this query is in its rewritten form.\n\nas noted: the method shouldn't be called on any query unless it was the result of a previous rewrite() call. per that \"spec\" the default implementation (which throws UnsupportedOperationException) is the correct behavior for any concrete subclass of Query that doesn't \"return this;\" in it's rewrite() method. ",
            "author": "Hoss Man",
            "id": "comment-12647763"
        }
    ]
}