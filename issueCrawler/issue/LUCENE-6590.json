{
    "id": "LUCENE-6590",
    "title": "Explore different ways to apply boosts",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Wish"
    },
    "description": "Follow-up from LUCENE-6570: the fact that all queries are mutable in order to allow for applying a boost raises issues since it makes queries bad cache keys since their hashcode can change anytime. We could just document that queries should never be modified after they have gone through IndexSearcher but it would be even better if the API made queries impossible to mutate at all.\n\nI think there are two main options:\n\n\teither replace \"void setBoost(boost)\" with something like \"Query withBoost(boost)\" which would return a clone that has a different boost\n\tor move boost handling outside of Query, for instance we could have a (immutable) query impl that would be dedicated to applying boosts, that queries that need to change boosts at rewrite time (such as BooleanQuery) would use as a wrapper.\n\n\n\nThe latter idea is from Robert and I like it a lot given how often I either introduced or found a bug which was due to the boost parameter being ignored. Maybe there are other options, but I think this is worth exploring.",
    "attachments": {
        "LUCENE-6590.patch": "https://issues.apache.org/jira/secure/attachment/12741842/LUCENE-6590.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14593578",
            "author": "Yonik Seeley",
            "date": "2015-06-19T16:19:03+0000",
            "content": "Removing boost from Query and having a dedicated BoostQuery makes the most sense if one were starting from scratch.\nWe're not starting from scratch though (messing with boost would change a lot of code), so I'm not sure where that leaves us. "
        },
        {
            "id": "comment-14593583",
            "author": "Robert Muir",
            "date": "2015-06-19T16:21:03+0000",
            "content": "If we just removed Query.get/setBoost and replaced with something like BoostQuery(Query q, float boost) then it could simplify some APIs in scoring as well.\n\nToday we already have to handle the case of 2 different boosts (boosts coming from parent queries in Weight.normalize, and also the leaf's own Query.boost). It makes things confusing in Weight/Similarity.normalize() where they must deal with these 2 separate boosts and combine them to one.\n\nSo this could all be removed and reduced to boosts handled via one codepath in Weight:\n\n\n  /** Assigns the query normalization factor and boost to this. */\n  public abstract void normalize(float norm, float boost);\n\n\n\nThat is in addition to reducing the possibility of bugs like forgetting to use boost higher up the stack, which I think is very common. "
        },
        {
            "id": "comment-14593590",
            "author": "Michael McCandless",
            "date": "2015-06-19T16:26:26+0000",
            "content": "+1 to relegate boosting to a new BoostQuery, nomatter the pain! "
        },
        {
            "id": "comment-14594309",
            "author": "David Smiley",
            "date": "2015-06-20T03:05:32+0000",
            "content": "RE BoostQuery\n\n+1 what a great idea Rob!  I too have found bugs related to improper boost handling from time to time (just yesterday in fact).   Heh, lets face it; every one of us have.  It's so easy to overlook.  I get that we're not starting from scratch (Yonik's point) but I'd hate to see such reasoning blocking Lucene from being the Lucene we want it to be.  Pragmatically that means, I think, doing this in 6.0 and having a transition to this from 5.0.  It's a pain but if someone is stepping up to do the work then great. "
        },
        {
            "id": "comment-14601116",
            "author": "Adrien Grand",
            "date": "2015-06-25T12:56:13+0000",
            "content": "I started playing with this idea and here is a first step (only lucene/core and would deserve better docs but tests are passing) if someone would like to have a look. Clone, setBoost and getBoost are removed from the Query API in favour of a new BoostQuery, and query boosts are propagated through Query.createWeight. Next step is to figure out if we can remove this queryBoost parameter from createWeight (to get back to today's trunk signature) and handle everything through Weight.normalize like Robert suggested. "
        },
        {
            "id": "comment-14601932",
            "author": "Adrien Grand",
            "date": "2015-06-25T20:59:43+0000",
            "content": "New iteration that removes queryBoost from createWeight and applies both the query and the parent boost through Weight.normalize. Here is how it works:\n\n  1. Weight.normalize is called a query norm of 1 and the query boost\n  2. Weight.getValueForNormalization (which may take the query boost into account) is called to compute queryNorm\n  3. Weight.normalize is called again with queryNorm and a boost which is equal to the query boost multiplied by the boost which is propagated by parent queries.\n\nThe patch still only touches lucene/core. There is some documentation that needs to be updated, etc. but if someone could look at the API and how boosts are applied, that would be great. When we are happy with the approach then I can spend time fixing modules as well. "
        },
        {
            "id": "comment-14637191",
            "author": "Adrien Grand",
            "date": "2015-07-22T16:59:57+0000",
            "content": "Here is a patch that iterates over the previous one but for the entire code base. Overall, I think I like this change for several reasons:\n\n\tQuery rewriting is much easier as you don't need to care about boosts (I'm pretty sure the patch fixes some boost handling)\n\tQueries don't need to incorporate the boost in their toString() representation\n\tit removed the queryBoost parameter from Similarities and the top level boost and query boost are now applied the same way\n\tit removed several APIs: Query.setBoost, Query.getBoost, Query.clone without adding new ones, we just have two additional query implementations: BoostQuery and SpanBoostQuery\n\tIt allows queries to be fully immutable, ie. we don't need to clone anymore when planning to use a Query as a cache key.\n\n\n\nThe only downside I see is for the highlighting module: it has to deconstruct queries to understand how they are formed, and this new additional BoostQuery required to add a bit more unwrapping. However, I think the benefits outweight this slight inconvenience.\n\nAny opinions? "
        },
        {
            "id": "comment-14639166",
            "author": "Terry Smith",
            "date": "2015-07-23T17:22:17+0000",
            "content": "I think this looks great and will certainly make the boost handling more robust in my custom queries. Especially looking forward to fully immutable queries.\n\nWhat do you think is possible in terms of updating 5.x to make the transition easier? "
        },
        {
            "id": "comment-14639317",
            "author": "Yonik Seeley",
            "date": "2015-07-23T18:25:02+0000",
            "content": "Another thought...  boosts really only make sense for boosting one clause over another.\nso another approach that might be less invasive (and won't break \"instanceof\" checks and current unwrapping code) is to just add boost to BooleanClause.\n\nIn any case, it's certainly great to remove all the boost related stuff from most queries that don't care about it. "
        },
        {
            "id": "comment-14639465",
            "author": "Paul Elschot",
            "date": "2015-07-23T20:43:49+0000",
            "content": "This might have some influence on weighting in the surround (span) queries, but that can be fixed later if it is needed at all. "
        },
        {
            "id": "comment-14640288",
            "author": "Adrien Grand",
            "date": "2015-07-24T10:48:15+0000",
            "content": "What do you think is possible in terms of updating 5.x to make the transition easier?\n\nMy plan was to backport the change, make Query.clone/setBoost/getBoost deprecated, change the default rewrite implementation to something like:\n\n\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (boost != 1f) {\n      Query rewritten = clone();\n      rewritten.setBoost(1f);\n      rewritten = new BoostQuery(rewritten, boost);\n      return rewritten;\n    }\n    return this;\n  }\n\n\nand then review our existing queries to make sure they always end up delegating to super.rewrite (I know some of them, like DisjunctionMaxQuery, end up just returning \"this\", so that would have to be fixed to return super.rewrite() instead.)\nI think that should work?\n\nAnother thought... boosts really only make sense for boosting one clause over another. so another approach that might be less invasive (and won't break \"instanceof\" checks and current unwrapping code) is to just add boost to BooleanClause.\n\nThat's an interesting idea but I think this only applies to DefaultSimilarity? Other Similarities tend to handle boosts as multiplicative factors to the scores (because they return 1 in queryNorm instead of 1/sqrt(sumOfSquaredWeights))? Also this might be an issue for DisjunctionMaxQuery which could not have different boosts per sub query anymore?\n\nThis might have some influence on weighting in the surround (span) queries, but that can be fixed later if it is needed at all.\n\nI'm curious what issues you are foreseeing? (I'm not very familiar with surround queries...) "
        },
        {
            "id": "comment-14640729",
            "author": "Yonik Seeley",
            "date": "2015-07-24T16:50:33+0000",
            "content": "That's an interesting idea but I think this only applies to DefaultSimilarity? Other Similarities tend to handle boosts as multiplicative factors to the scores (because they return 1 in queryNorm instead of 1/sqrt(sumOfSquaredWeights))?\n\nIf you're talking about a single query being boosted?  That edge case could be handled via a boolean query with a single clause (with that clause holding the boost).\n\nAlso this might be an issue for DisjunctionMaxQuery which could not have different boosts per sub query anymore?\n\nYeah, that would also need clauses (and boosts on those clauses.)\nJust throwing the idea out there... you're the one doing the work! "
        },
        {
            "id": "comment-14641960",
            "author": "Paul Elschot",
            "date": "2015-07-26T13:01:59+0000",
            "content": "The surround query language allows to add a boost value to sub queries of OR and of proximity. For OR boolean queries, the given boosts are passed to the generated boolean query clauses and they are used there as expected. For proximity and for OR within proximity, these boosts are passed to the generated span queries, but lucene ignores these boosts at the moment so there is no influence from the changes here.\n\nThis weighting is done in the SrndQuery.makeLuceneQueryField method which is nicely patched here.\nHowever there are no tests for expected score values of surround queries. "
        },
        {
            "id": "comment-14641965",
            "author": "Paul Elschot",
            "date": "2015-07-26T13:20:44+0000",
            "content": "I overlooked that the patch also removes setting the boost of the span query generated from the surround sub query, see SpanNearClauseFactory in the patch. For now this will not have any influence because span query boosts in sub queries are ignored anyway. "
        },
        {
            "id": "comment-14642779",
            "author": "Adrien Grand",
            "date": "2015-07-27T14:26:17+0000",
            "content": "Good catch Paul, I added this logic back. "
        },
        {
            "id": "comment-14643207",
            "author": "Paul Elschot",
            "date": "2015-07-27T18:46:05+0000",
            "content": "The new SpanBoostQuery, thanks "
        },
        {
            "id": "comment-14644145",
            "author": "Adrien Grand",
            "date": "2015-07-28T09:49:30+0000",
            "content": "Sorry Paul, I don't understand your last comment? "
        },
        {
            "id": "comment-14644171",
            "author": "Adrien Grand",
            "date": "2015-07-28T10:06:47+0000",
            "content": "Iterated on the patch to make our queries return `super.rewrite` instead of `this` when they exhausted their rewrite rules to prepare for the backport. This way we could nicely handle backward compatibility by fixing the base Query.rewrite to return a BoostQuery around itself when the boost is not 1. "
        },
        {
            "id": "comment-14644678",
            "author": "Adrien Grand",
            "date": "2015-07-28T17:17:16+0000",
            "content": "Are there any objections to committing this? "
        },
        {
            "id": "comment-14644927",
            "author": "Paul Elschot",
            "date": "2015-07-28T19:48:05+0000",
            "content": "Quite the contrary.\n\nI meant that the patch now uses SpanBoostQuery to contain any weights given to the surround proximity subqueries. "
        },
        {
            "id": "comment-14727572",
            "author": "Adrien Grand",
            "date": "2015-09-02T16:22:03+0000",
            "content": "Patch updated to trunk. The patch is large and a bit painful to maintain so if you would like to review it, please let me know. Otherwise I will commit soon. "
        },
        {
            "id": "comment-14728097",
            "author": "Paul Elschot",
            "date": "2015-09-02T21:54:57+0000",
            "content": "LGTM. "
        },
        {
            "id": "comment-14732020",
            "author": "Alan Woodward",
            "date": "2015-09-05T16:01:43+0000",
            "content": "This looks great.\n\nI think there's a bug in BoostQuery.rewrite().  If the boost is set to 1, then rewrite() just returns the inner query, without rewriting it.  It should return query.rewrite() instead. "
        },
        {
            "id": "comment-14732088",
            "author": "Uwe Schindler",
            "date": "2015-09-05T19:55:50+0000",
            "content": "Rewrite works iterative until the query no longer rewrites. See IndexSearcher's rewrite/create weight for the corresponding while loop.\nSo this still works, it just needs one iteration more. "
        },
        {
            "id": "comment-14732095",
            "author": "Yonik Seeley",
            "date": "2015-09-05T20:16:41+0000",
            "content": "Rewrite works iterative until the query no longer rewrites. See IndexSearcher's rewrite/create weight for the corresponding while loop. So this still works, it just needs one iteration more.\n\nWhich causes a clone of the entire query tree again?  Seems like in general we should try to minimize that.\n "
        },
        {
            "id": "comment-14733544",
            "author": "Adrien Grand",
            "date": "2015-09-07T11:04:56+0000",
            "content": "I don't mind refactoring BoostQuery.rewrite so that query rewriting converges a bit faster, here is an updated patch. "
        },
        {
            "id": "comment-14733717",
            "author": "ASF subversion and git services",
            "date": "2015-09-07T13:34:48+0000",
            "content": "Commit 1701621 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1701621 ]\n\nLUCENE-6590: Replace Query.getBoost, setBoost and clone with a new BoostQuery. "
        },
        {
            "id": "comment-14734409",
            "author": "ASF subversion and git services",
            "date": "2015-09-08T08:24:17+0000",
            "content": "Commit 1701742 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1701742 ]\n\nLUCENE-6590: Fix BooleanQuery to not propagate query boosts twice. "
        },
        {
            "id": "comment-14734711",
            "author": "ASF subversion and git services",
            "date": "2015-09-08T12:16:09+0000",
            "content": "Commit 1701783 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1701783 ]\n\nLUCENE-6590,LUCENE-6783: Replace Query.getBoost, setBoost and clone with a new BoostQuery. "
        },
        {
            "id": "comment-14737078",
            "author": "ASF subversion and git services",
            "date": "2015-09-09T15:56:39+0000",
            "content": "Commit 1702042 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702042 ]\n\nLUCENE-6590: Add back ToStringUtils.boost, which should not have been removed while merging. "
        },
        {
            "id": "comment-14737424",
            "author": "ASF subversion and git services",
            "date": "2015-09-09T19:09:07+0000",
            "content": "Commit 1702088 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702088 ]\n\nLUCENE-6590: Fix boost handling. "
        },
        {
            "id": "comment-14737433",
            "author": "ASF subversion and git services",
            "date": "2015-09-09T19:19:00+0000",
            "content": "Commit 1702090 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702090 ]\n\nLUCENE-6590: More missing calls to ToStringUtils.boost. "
        },
        {
            "id": "comment-14738817",
            "author": "ASF subversion and git services",
            "date": "2015-09-10T14:24:40+0000",
            "content": "Commit 1702263 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702263 ]\n\nLUCENE-6590: Make sure the fast-vector-highlighter also handles boosts set via Query.setBoost. "
        },
        {
            "id": "comment-14745623",
            "author": "Terry Smith",
            "date": "2015-09-15T15:45:13+0000",
            "content": "Adrien Grand: PhraseQuery is missing a call to ToStringUtils.boost in it's toString method on the 5.x branch. "
        },
        {
            "id": "comment-14745653",
            "author": "Terry Smith",
            "date": "2015-09-15T16:09:27+0000",
            "content": "Hmm, so is NumericRangeQuery. "
        },
        {
            "id": "comment-14745675",
            "author": "Terry Smith",
            "date": "2015-09-15T16:22:39+0000",
            "content": "Also FunctionQuery.\n\n\n\n "
        },
        {
            "id": "comment-14933362",
            "author": "Adrien Grand",
            "date": "2015-09-28T14:30:26+0000",
            "content": "Thanks Terry, I'll fix. "
        },
        {
            "id": "comment-14933375",
            "author": "Terry Smith",
            "date": "2015-09-28T14:37:44+0000",
            "content": "Cheers Adrien. Sorry for the spammy replies before \u2013 I wasn't expecting to see more than one discrepancy!\n\nWhile you are looking at the Query.toString() behavior with respect to boosting, how would you feel about adding MatchAllDocsQuery.class to BoostQuery.NO_PARENS_REQUIRED_QUERIES so it's toString() doesn't change across releases?\n\n\nQuery q = new MatchAllDocsQuery();\nq.setBoost(0);\nq.toString() -> *:*^0.0\n\nnew BoostQuery(new MatchAllDocsQuery(), 0).toString() -> (*:*)^0.0\n\n "
        },
        {
            "id": "comment-14943302",
            "author": "ASF subversion and git services",
            "date": "2015-10-05T12:28:18+0000",
            "content": "Commit 1706827 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1706827 ]\n\nLUCENE-6590: Fix toString() representations of queries to include the boost.\n\nSome of them were lost in the merge, others were just missing. "
        },
        {
            "id": "comment-14947239",
            "author": "Terry Smith",
            "date": "2015-10-07T17:26:31+0000",
            "content": "Thanks Adrien.\n\nMy nightly regressions just picked this up from the published maven snapshots and I see that BoostQuery now includes MatchAllDocsQuery in it's NO_PARENS_REQUIRED_QUERIES list on branch_5x (this is awesome!). However this change is not available on trunk.\n\nI've confirmed by checked the SVN repo directly (the github mirror tends to lag).\n\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/BoostQuery.java\n\nhttp://svn.apache.org/repos/asf/lucene/dev/branches/branch_5x/lucene/core/src/java/org/apache/lucene/search/BoostQuery.java\n\n--Terry "
        },
        {
            "id": "comment-14948634",
            "author": "Adrien Grand",
            "date": "2015-10-08T13:19:50+0000",
            "content": "Thanks for confirming it works for you now. Regarding trunk, I think we should remove the hack entirely instead of adding more exceptions to this hack? I opened LUCENE-6834. "
        },
        {
            "id": "comment-15076190",
            "author": "ASF subversion and git services",
            "date": "2015-12-31T23:31:29+0000",
            "content": "Commit 1722478 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1722478 ]\n\nSOLR-8418: Adapt to changes in LUCENE-6590 for use of boosts with MLTHandler and Simple/CloudMLTQParser "
        },
        {
            "id": "comment-15076268",
            "author": "ASF subversion and git services",
            "date": "2016-01-01T10:39:19+0000",
            "content": "Commit 1722488 from Ramkumar Aiyengar in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1722488 ]\n\nSOLR-8418: Adapt to changes in LUCENE-6590 for use of boosts with MLTHandler and Simple/CloudMLTQParser "
        },
        {
            "id": "comment-15103960",
            "author": "ASF subversion and git services",
            "date": "2016-01-17T22:39:02+0000",
            "content": "Commit 1725144 from Ramkumar Aiyengar in branch 'dev/branches/lucene_solr_5_4'\n[ https://svn.apache.org/r1725144 ]\n\nSOLR-8418: Adapt to changes in LUCENE-6590 for use of boosts with MLTHandler and Simple/CloudMLTQParser "
        },
        {
            "id": "comment-15137885",
            "author": "ASF subversion and git services",
            "date": "2016-02-08T22:35:52+0000",
            "content": "Commit 340dc9ca5039244b2a78e284dd707e4466b3f3d4 in lucene-solr's branch refs/heads/branch_5_4 from Ramkumar Aiyengar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=340dc9c ]\n\nSOLR-8418: Adapt to changes in LUCENE-6590 for use of boosts with MLTHandler and Simple/CloudMLTQParser\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_5_4@1725144 13f79535-47bb-0310-9956-ffa450edef68 "
        },
        {
            "id": "comment-15324070",
            "author": "Upayavira",
            "date": "2016-06-10T08:27:22+0000",
            "content": "Adrien Grand this commit made this change:\n{{\n     @Override\n\n\tpublic void normalize(float queryNorm, float topLevelBoost) {\n\tthis.queryNorm = queryNorm * topLevelBoost;\n\tqueryWeight *= this.queryNorm;              // normalize query weight\n+    public void normalize(float queryNorm, float boost) \n{\n+      this.boost = boost;\n+      this.queryNorm = queryNorm;\n+      queryWeight = queryNorm * boost * idf.getValue();\n       value = queryWeight * idf.getValue();         // idf for document\n     }\n}}\n\n\n\nLooking at this, before, the queryWeight was just the queryNorm* boost. Now, it is qeueryNorm* boost * IDF.\n\nThis means I'm seeing scores which instead of being TF * IDF are now TF * IDF * IDF.\n\nWas this an intentional change? "
        },
        {
            "id": "comment-15324102",
            "author": "Adrien Grand",
            "date": "2016-06-10T08:58:26+0000",
            "content": "The code was reorganized a bit, but it should work the same way as before. In short, one of the idf factors should be counter balanced by the query norm. Here is what happens in sequence for a term query with a boost of 1 (default):\n\n\tupon initialization, IDFStats calls normalize(1,1), which cause queryWeight to be equal to the idf\n\tthen IndexSearcher calls getValueForNormalization, which return queryWeight*queryWeight=idf^2\n\tthen IndexSearcher calls norm=ClassicSimilarity.queryNorm(valueForNormalization) which is 1/sqrt(valueForNormalization) = 1/idf\n\tthen IndexSearcher calls normalize(norm, 1), which gives value = norm * 1 * idf * idf = 1/idf * 1 * idf * idf = idf\n\n\n\nMaybe your code forgot to normalize based on the value of getValueForNormalization somehow? "
        },
        {
            "id": "comment-15324150",
            "author": "Upayavira",
            "date": "2016-06-10T09:46:27+0000",
            "content": "My code in this case is just Solr, so it seems that in this change, the \"normalize based on the value of getvalueForNormalization\" wasn't done in Solr.\n\nI've looked briefly at the SolrIndexSearcher, which subclasses IndexSearcher, but it doesn't seem to mess with normalization. Any chance you could take a look at SolrIndexSearcher and see if something was missed there? I'm definitely seeing scores which are tf*tf*idf in Solr results.\n "
        },
        {
            "id": "comment-15324174",
            "author": "Adrien Grand",
            "date": "2016-06-10T10:12:52+0000",
            "content": "Sure I can have a look. Do you have the similarity explicitly set in your schema? If not, what is the Lucene match version of your schema? (Solr picks the default similarity based on this version.) "
        },
        {
            "id": "comment-15324190",
            "author": "Adrien Grand",
            "date": "2016-06-10T10:19:51+0000",
            "content": "Maybe you can write a simple test case so that I can dig into it? "
        },
        {
            "id": "comment-15324317",
            "author": "Upayavira",
            "date": "2016-06-10T11:38:41+0000",
            "content": "My schema explicitly specifies the ClassicSimilarity. My Lucene match version was 4.6. I increased it to 5.5 and the behaviour was the same (this is using a Solr 5.5 system).\n\nI could try and knock up a test case, but to-date I've avoided coding in Java on Solr/Lucene, so not yet familiar with the various test frameworks. "
        },
        {
            "id": "comment-15324427",
            "author": "Adrien Grand",
            "date": "2016-06-10T13:14:40+0000",
            "content": "I just downloaded Solr 5.5 and indexed a couple documents with a \"foo\" field, then ran a query on \"foo:bar\", the explanation shows that the idf is taken into account only once:\n\n\n1.4519851 = weight(foo:bar in 0) [ClassicSimilarity], result of:\n  1.4519851 = fieldWeight in 0, product of:\n    1.0 = tf(freq=1.0), with freq of:\n      1.0 = termFreq=1.0\n    1.4519851 = idf(docFreq=6, maxDocs=11)\n    1.0 = fieldNorm(doc=0)\n\n "
        },
        {
            "id": "comment-15324433",
            "author": "Adrien Grand",
            "date": "2016-06-10T13:16:51+0000",
            "content": "What does the explanation look like in your case? "
        },
        {
            "id": "comment-15324676",
            "author": "Upayavira",
            "date": "2016-06-10T15:57:14+0000",
            "content": "Here's an example for 4.10 and the same query against 5.5 - note, it is a different doc though:\n\n\n4.10 score ========================================================\n      \"2937439\": {\n        \"match\": true,\n        \"value\": 5.5993805,\n        \"description\": \"weight(description:obama in 394012)\n        [DefaultSimilarity], result of:\",\n        \"details\": [\n          {\n            \"match\": true,\n            \"value\": 5.5993805,\n            \"description\": \"fieldWeight in 394012, product of:\",\n            \"details\": [\n              {\n                \"match\": true,\n                \"value\": 1,\n                \"description\": \"tf(freq=1.0), with freq of:\",\n                \"details\": [\n                  {\n                    \"match\": true,\n                    \"value\": 1,\n                    \"description\": \"termFreq=1.0\"\n                  }\n                ]\n              },\n              {\n                \"match\": true,\n                \"value\": 5.5993805,\n                \"description\": \"idf(docFreq=56010, maxDocs=5568765)\"\n              },\n              {\n                \"match\": true,\n                \"value\": 1,\n                \"description\": \"fieldNorm(doc=394012)\"\n              }\n            ]\n          }\n        ]\n5.5 score ========================================================\n      \"2502281\":{\n        \"match\":true,\n        \"value\":28.51136,\n        \"description\":\"weight(description:obama in 43472) [], result\n        of:\",\n        \"details\":[{\n            \"match\":true,\n            \"value\":28.51136,\n            \"description\":\"score(doc=43472,freq=1.0), product of:\",\n            \"details\":[{\n                \"match\":true,\n                \"value\":5.339603,\n                \"description\":\"queryWeight, product of:\",\n                \"details\":[{\n                    \"match\":true,\n                    \"value\":5.339603,\n                    \"description\":\"idf(docFreq=31905,\n                    maxDocs=2446459)\"},\n                  {\n                    \"match\":true,\n                    \"value\":1.0,\n                    \"description\":\"queryNorm\"}]},\n              {\n                \"match\":true,\n                \"value\":5.339603,\n                \"description\":\"fieldWeight in 43472, product of:\",\n                \"details\":[{\n                    \"match\":true,\n                    \"value\":1.0,\n                    \"description\":\"tf(freq=1.0), with freq of:\",\n                    \"details\":[{\n                        \"match\":true,\n                        \"value\":1.0,\n                        \"description\":\"termFreq=1.0\"}]},\n                  {\n                    \"match\":true,\n                    \"value\":5.339603,\n                    \"description\":\"idf(docFreq=31905,\n                    maxDocs=2446459)\"},\n                  {\n                    \"match\":true,\n                    \"value\":1.0,\n                    \"description\":\"fieldNorm(doc=43472)\"}]}]}]},\n\n "
        },
        {
            "id": "comment-15328207",
            "author": "Upayavira",
            "date": "2016-06-13T20:33:56+0000",
            "content": "Any ideas Adrien Grand "
        },
        {
            "id": "comment-15328281",
            "author": "Adrien Grand",
            "date": "2016-06-13T21:13:54+0000",
            "content": "Thanks for the ping, I had missed your previous message. The bug is that queryNorm should not be 1.0 in the 5.5 explanation. There must be something that by-passes query normalization somewhere. I believe your query was a simple term query for description:obama, is it correct? Since I had run something similar and did not reproduce the bug, I believe there must be something specific to your setup that triggers this problem. Could you try to build a reproducible test case so that I can dig what is happening, either an actual test case or a sequence of commands that I can run against Solr to reproduce the problem? "
        },
        {
            "id": "comment-15328413",
            "author": "Upayavira",
            "date": "2016-06-13T22:12:13+0000",
            "content": "It is quite possibly something in my setup. I figured because someone else reported the same issue it might be more global, but I think now it is time for me to assume I've done something stupid. Apologies and thanks. "
        },
        {
            "id": "comment-15328467",
            "author": "Upayavira",
            "date": "2016-06-13T22:45:48+0000",
            "content": "It seems a previous test I did was flawed (I thought I was pushing updated configs, but suspect that I was actually pushing old ones). Scoring is now working correctly, the main change being an update of the Lucene match version from 4.6 to 5.5. "
        },
        {
            "id": "comment-15329028",
            "author": "Adrien Grand",
            "date": "2016-06-14T07:43:00+0000",
            "content": "I tried dowgrading the lucene match version to 4.6 on my local Solr installation but this does not help reproduce the problem. I am still interested in getting to the bottom of this, especially if other users are hitting the same problem, so if you manage to narrow it down to some specific configuration changes that would be helpful. "
        },
        {
            "id": "comment-15383180",
            "author": "Upayavira",
            "date": "2016-07-18T22:16:06+0000",
            "content": "I upgraded my Solr configs to match the 5.5, and the issue was still there. I eventually tracked down this snippet in Solr's SchemaSimilarityFactory.java:\n\n{{\n\n\t<p>\n\t<b>NOTE:</b> Users should be aware that even when this factory uses a single default\n\t<code>Similarity</code> for some or all fields in a Query, the behavior can be inconsistent\n\twith the behavior of explicitly configuring that same <code>Similarity</code> globally, because\n\tof differences in how some multi-field / multi-clause behavior is defined in\n\t<code>PerFieldSimilarityWrapper</code>.  In particular please consider carefully the documentation\n\t& implementation of \n{@link Similarity#coord}\n and \n{@link Similarity#queryNorm}\n in\n\t{@link ClassicSimilarity}\n compared to \n{@link PerFieldSimilarityWrapper}\n\t</p>\n}}\n\n\n\nwhich suggests that adding a SchemaSimilarityFactory will change the scoring, even if you continue to use the ClassicSimilarityFactory. "
        },
        {
            "id": "comment-15383671",
            "author": "Adrien Grand",
            "date": "2016-07-19T06:47:04+0000",
            "content": "Upayavira I see... the normalization factor is computed by the per-field similarity but then it is the responsibility of the PerFieldSimilarityWrapper to normalize and the default implementation does not normalize. I opened SOLR-9315. "
        },
        {
            "id": "comment-15384402",
            "author": "Upayavira",
            "date": "2016-07-19T15:53:00+0000",
            "content": "I applied your patch and my problems went away. Many thanks!! "
        },
        {
            "id": "comment-15766752",
            "author": "Artem Lukanin",
            "date": "2016-12-21T10:57:09+0000",
            "content": "Now it is impossible to extend `SpanOrQuery` to make custom queries. Had it been done on purpose? "
        },
        {
            "id": "comment-15767118",
            "author": "Adrien Grand",
            "date": "2016-12-21T14:01:49+0000",
            "content": "The way the query API works, it is less trappy to wrap than to extend. Many queries create concrete instances of the same class in rewrite or createWeight, which typically causes bugs when extending since a SpanSomethingQuery that extends SpanOrQuery would rewrite to a SpanOrQuery if rewrite() is not overridden too. Would it work for you? If not would it be enough for you if we removed the final modifier? "
        },
        {
            "id": "comment-15769633",
            "author": "Artem Lukanin",
            "date": "2016-12-22T09:50:57+0000",
            "content": "Actually, we need SpanOrWeight. It was possible to create an instance of this class if we extended SpanOrQuery. So if you can remove final from SpanOrQuery we can do it again. But if SpanOrWeight is made static we can use it without extending SpanOrQuery. "
        },
        {
            "id": "comment-15769746",
            "author": "Adrien Grand",
            "date": "2016-12-22T10:47:32+0000",
            "content": "Reusing the weight with another query does not sound good to me, as you will have to pass a SpanQuery anyway (weights require a query to be constructed) and this weight is used for things like caching, so reusing the weight outside of a SpanOrQuery could cause weird bugs. I actually think it would be better for you to fork SpanWeight in your own code base. "
        }
    ]
}