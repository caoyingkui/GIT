{
    "id": "SOLR-553",
    "title": "Highlighter does not match phrase queries correctly",
    "details": {
        "affect_versions": "1.2",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "highlighter"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "http://www.nabble.com/highlighting-pt2%3A-returning-tokens-out-of-order-from-PhraseQuery-to16156718.html\n\nSay we search for the band \"I Love You But I've Chosen Darkness\"\n.../selectrows=100&q=%22I%20Love%20You%20But%20I\\'ve%20Chosen%20Darkness%22&fq=type:html&hl=true&hl.fl=content&hl.fragsize=500&hl.snippets=5&hl.simple.pre=%3Cspan%3E&hl.simple.post=%3C/span%3E\n\nThe highlight returns a snippet that does have the name altogether:\n\nLights (Live) : <span>I</span> <span>Love</span> <span>You</span> But <span>I've</span> <span>Chosen</span> <span>Darkness</span> :\n\nBut also returns unrelated snips from the same page:\n\nBlack Francis Shop \"<span>I</span> Think <span>I</span> <span>Love</span> <span>You</span>\"\n\nA correct highlighter should not return snippets that do not match the phrase exactly.\n\nLUCENE-794 (not yet committed, but seems to be ready) fixes up the problem from the Lucene end. Solr should get it too.\n\nRelated: SOLR-575",
    "attachments": {
        "Solr-553.patch": "https://issues.apache.org/jira/secure/attachment/12382045/Solr-553.patch",
        "SOLR-553-SC.patch": "https://issues.apache.org/jira/secure/attachment/12382718/SOLR-553-SC.patch",
        "highlighttest.xml": "https://issues.apache.org/jira/secure/attachment/12381143/highlighttest.xml"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Klaas",
            "id": "comment-12592932",
            "date": "2008-04-29T00:31:35+0000",
            "content": "Changed to feature request, since the current behaviour is expected.  I'd be happy to review a patch to use SpanScorer in Solr, though. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12593137",
            "date": "2008-04-29T21:51:10+0000",
            "content": "Attaching a base test case document xml to post to the trunk solr example to see the problem. \n\nSteps to reproduce:\n1) checkout solr-trunk\n2) ant example\n3) java -jar start.jar\n4) post.sh highlighttest.xml\n5) query: http://localhost:8983/solr/select?q=features:%22ax%20bx%20cx%22&hl=on&hl.fl=features&hl.fragsize=20&hl.snippets=10\n\nExpected results: the only highlight snip results returned should be <em>ax bx cx</em> and nothing else.  "
        },
        {
            "author": "Bojan Smid",
            "id": "comment-12596350",
            "date": "2008-05-13T10:43:47+0000",
            "content": "I am playing around with LUCENE-794 integration into Solr. I have two options:\n\n1) add LUCENE-794 code to current implementation in DefaultSolrHighlighter where client would provide request parameter (say useSpanScorer) if he wants to use new functionality. In case he didn't provide the parameter, he would get old functionality.\n\nor\n\n2) to provide LUCENE-794 highlighting in new SolrHighlighter, for instance in class PhraseQuerySolrHighlighter\n\nI would appreciate any comments on this.\n\nAlso, since I already test some of this code, I noticed that we still wouldn't get exact behavior from description. For instance, in text  ax bx cx dx ax bx\n\nfor phrase query \"ax bx cx\"\n\nthe result is : <span>ax</span><span>bx</span><span>cx</span> dx ax bx\n\nWhich means that we got a fix for part of the problem (words from unrelated snippets are no longer highlighted), but we still wouldn't get whole phrase highlighted inside single tag. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12596402",
            "date": "2008-05-13T14:28:25+0000",
            "content": "Probably best to create a new ticket (if necessary) about the <span>ax</span> <span>bx</span> instead of <span>ax bx</span> problem. That highlights have incorrect matches is far worse. I'll adjust the problem description.\n "
        },
        {
            "author": "Bojan Smid",
            "id": "comment-12596793",
            "date": "2008-05-14T15:32:26+0000",
            "content": "I made a fix, patch is uploaded. LUCENE-794 is now incorporated into default Solr highlighter.\n\nOld way of highlighting is still retained and will be used in case requests to Solr Highlighter remain the same as they were (same request parameters). New functionality is invoked by adding another request parameter to URL, hl.usePhraseHighlighter=true.\n\nSo, for URL:\nhttp://localhost:8983/solr/select?q=features:%22ax%20bx%20cx%22&hl=on&hl.fl=features&hl.fragsize=20&hl.snippets=10\n\nresults will be the same as they were, but in case you want to use this fix (and have correct phrase highlighting), the URL would look like this:\n\nhttp://localhost:8983/solr/select?q=features:%22ax%20bx%20cx%22&hl=on&hl.fl=features&hl.fragsize=20&hl.snippets=10&hl.usePhraseHighlighter=true\n\nThis patch needs latest lucene-highlighter-.jar and lucene-memory-.jar from trunk (since LUCENE-794 fix is committed there). "
        },
        {
            "author": "Bojan Smid",
            "id": "comment-12596794",
            "date": "2008-05-14T15:34:26+0000",
            "content": "Patch for Solr-553 (uses Lucene-794 highlighting fix) "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12596882",
            "date": "2008-05-14T18:35:24+0000",
            "content": "Patch works for me on the highlighttest.xml. thanks Bojan!!\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12596914",
            "date": "2008-05-14T19:33:13+0000",
            "content": "What do people think of making span highlighting the default behaviour if the query contains phrases?  It might be better to have the default behaviour that which people expect, even if it is technically different output from 1.2. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12596915",
            "date": "2008-05-14T19:37:55+0000",
            "content": "+1 on making it default if there was a phrasequery. The \"old\" way comes across as a bad bug if you're displaying the highlights for your search results.\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12596924",
            "date": "2008-05-14T20:15:27+0000",
            "content": "+1 for making it the default - it makes more sense than the old HL that highlighted other matching tokens\nthat were not a part of the given phrase. "
        },
        {
            "author": "Bojan Smid",
            "id": "comment-12597091",
            "date": "2008-05-15T11:35:54+0000",
            "content": "Added unit test for this fix to the patch. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12597611",
            "date": "2008-05-16T20:56:30+0000",
            "content": "Added explicit check for usePhraseHighlighter=true to avoid things like usePhraseHighlighter=false to turn it on.\n\nI'll commit shortly, along with a fresh lucene-highlighter-2.4-dev.jar built from from Lucene trunk. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12597647",
            "date": "2008-05-16T22:58:51+0000",
            "content": "just FYI, I've tested this on a much larger/realworld index and it works great. \n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12597657",
            "date": "2008-05-16T23:41:04+0000",
            "content": "[quote]Added explicit check for usePhraseHighlighter=true to avoid things like usePhraseHighlighter=false to turn it on.[/quote]\n\nI'm not sure I follow you here.  Just to verify:\n\n\n\tthe default is to use SpanScorer when the query is a \"pure\" phrase query\n\tyou can force SS with usePhraseHighlighting\n\tqueries that are mixed queries with keywords and phrases are still problematic.\n\n\n\nIf this is correct, is there any point in the usePhraseHighlighter parameter?  I don't see where it would entail different behaviour.  Also, what are the consequences for dismax queries (pure or mixed)? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12597680",
            "date": "2008-05-17T01:39:51+0000",
            "content": "I think there are no pure vs. mixed situation any more.  If usePH=true we use SpanScorer otherwise we use QueryScorer, or at least that's how I read the patch.\n\n\nDefaultSolrHighlighter.java:295-304\n          if (Boolean.valueOf(req.getParams().get(HighlightParams.USE_PHRASE_HIGHLIGHTER))) {\n            // wrap CachingTokenFilter around TokenStream for reuse\n            tstream = new CachingTokenFilter(tstream);\n            \n            // get highlighter\n            highlighter = getPhraseHighlighter(query, fieldName, req, (CachingTokenFilter) tstream);\n            \n            // after highlighter initialization, reset tstream since construction of highlighter already used it\n            tstream.reset();\n          }\n          else {\n            // use \"the old way\"\n            highlighter = getHighlighter(query, fieldName, req);\n          }\n\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12597681",
            "date": "2008-05-17T01:43:08+0000",
            "content": "I'll wait for LUCENE-1285 to get committed first. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12598494",
            "date": "2008-05-20T21:49:20+0000",
            "content": ">Probably best to create a new ticket (if necessary) about the <span>ax</span> <span>bx</span> instead of <span>ax bx</span> problem. That >highlights have incorrect matches is far worse. I'll adjust the problem description.\n\nIf I remember correctly, this was an ease of implementation issue. Part of it was fitting into the current Highlighter framework (individual tokens are scored and highlighted) and part of it was ease in general I think. I am not sure that it would be too easy to alter.\n\nIt's very easy to do with the new Highlighter I have been working on, the LargeDocHighlighter. It breaks from the current API, and makes this type of highlight markup quite easy. It may never see the light of day though...to do what I want, all parts of the query need to be located with the MemoryIndex, and the time this takes on non position sensitive queries clauses is almost equal to the savings I get from not iterating through and scoring each token in a TokenStream. I do still have hopes I can pull something off though, and it may end up being useful for something else.\n\nFor now though, Highlighting each each token seems a small inconvenience to retain all the old Highlighters tests, corner cases, and speed in non position sensitive scoring. Thats not to say there will not be a way if you take a look at the code though. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12599513",
            "date": "2008-05-23T21:23:46+0000",
            "content": "Thanks Bojan.\n\nCommitted revision 659664. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12599534",
            "date": "2008-05-23T22:51:07+0000",
            "content": "Needs new Lucene jars, per the earlier comments.  Build is currently broken. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12599595",
            "date": "2008-05-24T13:34:41+0000",
            "content": "Otis,\n\nHere's a patch that fixes the Spell Checker test that gets broken when you upgrade the Lucene jars. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12599669",
            "date": "2008-05-25T10:37:12+0000",
            "content": "Just to point out, as I am not sure its clear, the SpanScorer is just as fast as the old Scorer when no Phrase's, or Span's are in the query. Mark H actually tested it as slightly faster, though thats a bit odd.\n\nWhen there is a Span or Phrase, none Span/Phrase clauses of the Query are still highlighted the same and at the same speed as the original Scorer...it is just the Span/Phrase clauses that fire up a MemoryIndex and have getSpans called against it.\n\nSo you really only pay for the extra position sensitive part where actually needed. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12599823",
            "date": "2008-05-26T12:08:13+0000",
            "content": "I committed the new JARs and fixed the SpellChecker test "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12599825",
            "date": "2008-05-26T12:21:19+0000",
            "content": "If I understood Mark correctly, he is saying we can just have usePhraseHighlighter=true\nbe the default and it won't hurt performance.  Should we do that, and allow one to get the\nold behaviour with usePhraseHighlighter=false if they really prefer the old highlighting? "
        }
    ]
}