{
    "id": "SOLR-9240",
    "title": "Support parallel ETL with the topic expression",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.2"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Resolved",
        "priority": "Major"
    },
    "description": "It would be useful for SolrCloud to support large scale Extract, Transform and Load work loads with streaming expressions. Instead of using MapReduce for ETL, the topic expression can be used which allows SolrCloud to be treated like a distributed message queue filled with data to be processed. The topic expression works in batches and supports retrieval of stored fields, so large scale text ETL will work well with this approach.\n\nThis ticket makes two changes to the topic() expression that makes parallel ETL possible:\n\n1) Changes the topic expression so it can operate in parallel.\n2) Adds the initialCheckpoint parameter to the topic expression so a topic can start pulling records from anywhere in the queue.\n\nDaemons can be sent to worker nodes that each work on processing a partition of the data from the same topic. The daemon() function's natural behavior is perfect for iteratively calling a topic until all records in the topic have been processed.\n\nThe sample code below pulls all records from one collection and indexes them into another collection. A Transform function could be wrapped around the topic() to transform the records before loading. Custom functions can also be built to load the data in parallel to any outside system. \n\n\nparallel(\n         workerCollection, \n         workers=\"2\", \n         sort=\"DaemonOp desc\", \n         daemon(\n                update(\n                      updateCollection, \n                      batchSize=200, \n                      topic(\n                            checkpointCollection,\n                            topicCollection, \n                            q=*:*, \n                            id=\"topic1\",\n                            fl=\"id, to , from, body\", \n                            partitionKeys=\"id\",\n                            initialCheckpoint=\"0\")), \n                runInterval=\"1000\", \n                id=\"daemon1\"))",
    "attachments": {
        "SOLR-9240.patch": "https://issues.apache.org/jira/secure/attachment/12817196/SOLR-9240.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-24T14:30:45+0000",
            "author": "Joel Bernstein",
            "content": "After reviewing the TopicStream I found that it already supports the partitionKeys parameter because it's using the SolrStream under the covers, where the partitioning logic resides. \n\nSo all that needs to be done on this ticket is to add parallel(topic()) test cases and fix any issues that arise. ",
            "id": "comment-15348347"
        },
        {
            "date": "2016-06-25T02:14:26+0000",
            "author": "Joel Bernstein",
            "content": "While working on the test case for this I found that there is small change that needs to be made to support the topic() function in parallel. Each worker needs to maintain it's own set of checkpoints, so each worker needs a separate topic ID. This is easily solved by appending the worker ID to the topic() ID. \n\nI'll update the ticket accordingly. ",
            "id": "comment-15349015"
        },
        {
            "date": "2016-07-11T16:50:21+0000",
            "author": "Joel Bernstein",
            "content": "Initial patch. ",
            "id": "comment-15371143"
        },
        {
            "date": "2016-07-11T17:59:28+0000",
            "author": "Joel Bernstein",
            "content": "New patch that fixes some tests that were broken in the initial patch. ",
            "id": "comment-15371290"
        },
        {
            "date": "2016-07-12T00:20:39+0000",
            "author": "Joel Bernstein",
            "content": "This ticket is looking fairly good. I did a round of manual testing with the expression below which worked as expected.\n\n\nparallel(\n         workerCollection, \n         workers=\"2\", \n         sort=\"DaemonOp desc\", \n         daemon(\n                  update(\n                        updateCollection, \n                        batchSize=200, \n                        topic(\n                            checkpointCollection,\n                            topicCollection, \n                            q=*:*, \n                             id=\"topic40\",\n                             fl=\"id, to , from\", \n                             partitionKeys=\"id\",\n                             initialCheckpoint=\"0\")), \n               runInterval=\"1000\", \n               id=\"test3\"))\n\n\n\nThis expression sends a daemon expression to two worker nodes. The daemon is wrapping an update expression which is wrapping a topic() expression. The topic has the new  initialCheckpoint parameter so it starts pulling records from checkpoint 0, which includes every record that matches the topic query in the index. The topic also has the partitionKeys parameter so each worker pulls a partition of records that match the topic query.\n\nThe daemon function will run the update() function iteratively. Each run will update the topic checkpoints for each worker.\n\nThe effect of this is that each worker will iterate though it's partition of the topic query, reindexing all the records that match the topic in another collection. ",
            "id": "comment-15371958"
        },
        {
            "date": "2016-07-17T03:18:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fc3894e837701b78a4704cf27529c34c15666586 in lucene-solr's branch refs/heads/master from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fc3894e ]\n\nSOLR-9240:Support running the topic() Streaming Expression in parallel mode. ",
            "id": "comment-15381066"
        },
        {
            "date": "2016-07-17T03:18:11+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c3c1f8d6e6cb57cb30e736d5ff0387400729d216 in lucene-solr's branch refs/heads/master from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c3c1f8d ]\n\nSOLR-9240: Added testcase with text field in the fl for topic ",
            "id": "comment-15381067"
        },
        {
            "date": "2016-07-17T05:34:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c6df1868a0cdf79b4d4f8b8cd5fc58cf9794d6dc in lucene-solr's branch refs/heads/branch_6x from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c6df186 ]\n\nSOLR-9240:Support running the topic() Streaming Expression in parallel mode. ",
            "id": "comment-15381109"
        },
        {
            "date": "2016-07-18T01:49:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 10f3700e725edb9793c76ad367edfb70f97b34a8 in lucene-solr's branch refs/heads/master from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=10f3700 ]\n\nSOLR-9240: Update CHANGES.txt ",
            "id": "comment-15381621"
        },
        {
            "date": "2016-07-18T01:55:11+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 75d3243647923c462a345205d08e0fbb6dbe73f3 in lucene-solr's branch refs/heads/branch_6x from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=75d3243 ]\n\nSOLR-9240: Update CHANGES.txt\n\nConflicts:\n\tsolr/CHANGES.txt ",
            "id": "comment-15381624"
        },
        {
            "date": "2016-08-26T13:59:21+0000",
            "author": "Michael McCandless",
            "content": "Bulk close resolved issues after 6.2.0 release. ",
            "id": "comment-15438986"
        }
    ]
}