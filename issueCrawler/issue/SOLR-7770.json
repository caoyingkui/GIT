{
    "id": "LUCENE-6723",
    "title": "Date field problems using ExtractingRequestHandler and java 9 (b71)",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Tracking bug to note that the (Tika based) ExtractingRequestHandler will not work properly with jdk9 starting with build71.\n\nThis first manifested itself with failures like this from the tests...\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=ExtractingRequestHandlerTest\n-Dtests.method=testArabicPDF -Dtests.seed=232D0A5404C2ADED -Dtests.multiplier=3 -Dtests.slow=true\n-Dtests.locale=en_JM -Dtests.timezone=Etc/GMT-7 -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.58s | ExtractingRequestHandlerTest.testArabicPDF <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Invalid Date String:'Tue Mar 09 13:44:49\nGMT+07:00 2010'\n\n\n\nWorkarround noted by Uwe...\n\n\nThe test passes on JDK 9 b71 with:\n-Dargs=\"-Djava.locale.providers=JRE,SPI\"\n\nThis reenabled the old Locale data. I will add this to the build parameters of policeman Jenkins to stop this from\nfailing. To me it looks like the locale data somehow is not able to correctly parse weekdays and/or timezones. I\nwill check this out tomorrow and report a bug to the OpenJDK people. There is something fishy with CLDR locale data.\nThere are already some bugs open, so work is not yet finished (e.g. sometimes it uses wrong timezone shortcuts,...)",
    "attachments": {
        "SOLR-7770.patch": "https://issues.apache.org/jira/secure/attachment/12748821/SOLR-7770.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-09T18:19:37+0000",
            "author": "Hoss Man",
            "content": "Full details of an example failure...\n\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-5.x-Linux/13200/\nJava: 64bit/jdk1.9.0-ea-b71 -XX:-UseCompressedOops -XX:+UseG1GC\nr1689849\n\n\n   [junit4]   2> log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=ExtractingRequestHandlerTest\n-Dtests.method=testArabicPDF -Dtests.seed=232D0A5404C2ADED -Dtests.multiplier=3 -Dtests.slow=true\n-Dtests.locale=en_JM -Dtests.timezone=Etc/GMT-7 -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.58s | ExtractingRequestHandlerTest.testArabicPDF <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Invalid Date String:'Tue Mar 09 13:44:49\nGMT+07:00 2010'\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([232D0A5404C2ADED:4DEB715B070706B8]:0)\n   [junit4]    >        at org.apache.solr.schema.TrieDateField.parseMath(TrieDateField.java:150)\n   [junit4]    >        at org.apache.solr.schema.TrieField.createField(TrieField.java:657)\n   [junit4]    >        at org.apache.solr.schema.TrieField.createFields(TrieField.java:694)\n   [junit4]    >        at org.apache.solr.update.DocumentBuilder.addField(DocumentBuilder.java:48)\n   [junit4]    >        at org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:123)\n   [junit4]    >        at org.apache.solr.update.AddUpdateCommand.getLuceneDocument(AddUpdateCommand.java:83)\n   [junit4]    >        at org.apache.solr.update.DirectUpdateHandler2.addDoc0(DirectUpdateHandler2.java:237)\n   [junit4]    >        at org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:163)\n   [junit4]    >        at\norg.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:69)\n   [junit4]    >        at\norg.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n   [junit4]    >        at\norg.apache.solr.update.processor.DistributedUpdateProcessor.versionAdd(DistributedUpdateProcessor.java:981)\n   [junit4]    >        at\norg.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:706)\n   [junit4]    >        at\norg.apache.solr.update.processor.LogUpdateProcessor.processAdd(LogUpdateProcessorFactory.java:104)\n   [junit4]    >        at\norg.apache.solr.handler.extraction.ExtractingDocumentLoader.doAdd(ExtractingDocumentLoader.java:122)\n   [junit4]    >        at\norg.apache.solr.handler.extraction.ExtractingDocumentLoader.addDoc(ExtractingDocumentLoader.java:127)\n   [junit4]    >        at\norg.apache.solr.handler.extraction.ExtractingDocumentLoader.load(ExtractingDocumentLoader.java:230)\n   [junit4]    >        at\norg.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:74)\n   [junit4]    >        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n   [junit4]    >        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2058)\n   [junit4]    >        at org.apache.solr.util.TestHarness.queryAndResponse(TestHarness.java:339)\n   [junit4]    >        at\norg.apache.solr.handler.extraction.ExtractingRequestHandlerTest.loadLocalFromHandler(ExtractingRequestHandlerTest.ja\nva:737)\n   [junit4]    >        at\norg.apache.solr.handler.extraction.ExtractingRequestHandlerTest.loadLocal(ExtractingRequestHandlerTest.java:744)\n   [junit4]    >        at\norg.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testArabicPDF(ExtractingRequestHandlerTest.java:526)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-14620979"
        },
        {
            "date": "2015-07-09T18:21:39+0000",
            "author": "Hoss Man",
            "content": "Misc comments from uwe on the mailing list regarding this...\n\n\nI debugged the date parsing problems with a new test (TestDateUtil in solrj).\n\nThe reason for this failing is the following 2 things, but they are related (if not even the same bug):\n\n\thttps://bugs.openjdk.java.net/browse/JDK-8129881 is triggered: TIKA uses Date#toString() which inserts a broken\ntimezone shortcut into the resulting date. This cannot be parsed anymore! This happens all the timein ROOT Locale\n(see below).\n\tSolr uses Locale.ROOT to parse the date (of course, because it's language independent). This locale is missing all\ntext representations of weekdays or timezones in OpenJDK's CLDR locale data, so it cannot parse the weekday or the\ntime zones. If I change DateUtil to use Locale.ENGLISH, it works as expected.\n\n\n\nI will open a bug report at Oracle.\n\n...\n\nI opened Report (Review ID: JI-9022158) - Change to CLDR Locale data in JDK 9 b71 causes SimpleDateFormat parsing errors\n\n...\n\n\nI think the real issue here is the following (Rory can you add this to issue?):\n\nAccording to Unicode, all locales should fall back to the ROOT locale, if the specific Locale does not have data\n(e.g., http://cldr.unicode.org/development/development-process/design-proposals/generic-calendar-data). The problem\nis now that the CLDR Java implementation seems to fall back to the root locale, but the root locale does not have\nweekdays and time zone short names - our test verifies this: ROOT locale is missing all this information.\n\nThis causes all the bugs, also the one in https://bugs.openjdk.java.net/browse/JDK-8129881. The root locale should\nhave the default English weekday and timezone names (see\nhttp://cldr.unicode.org/development/development-process/design-proposals/generic-calendar-data).\n\nI think the ROOT locale and the fallback mechanism should be revisited in JDK's CLDR impl, there seems to be a bug\nwith that (either missing data or the fallback to defaults does not work correctly).\n\nfrom Balchandra...\n\nHere is the JBS id: https://bugs.openjdk.java.net/browse/JDK-8130845\n ",
            "id": "comment-14620999"
        },
        {
            "date": "2015-07-09T18:22:57+0000",
            "author": "Hoss Man",
            "content": "Uwe Also added some specific DateUtil tests of this w/o depending on tika to produce the date values...\n\nhttp://svn.apache.org/r1690031\nhttp://svn.apache.org/r1690032 ",
            "id": "comment-14621004"
        },
        {
            "date": "2015-07-09T18:32:36+0000",
            "author": "Uwe Schindler",
            "content": "Hi, i keep this issue open for a while. There is nothing we can do at Solr side, this is really a bug. The only thing we could do is to use Locale.ENGLISH instead of Locale.ROOT for date parsing. But this is just a workaround and not really a good one. ",
            "id": "comment-14621026"
        },
        {
            "date": "2015-07-09T18:36:02+0000",
            "author": "Hoss Man",
            "content": "There is nothing we can do at Solr side, ...\n\ncorrect.  my main concern is having an open issue here to track the known problem and the workarround \u2013 once there is a jdk9 that doesn't have this problem we can resolve SOLR-7770 and note which JDK versions are known to work (vs known to be broken) ",
            "id": "comment-14621039"
        },
        {
            "date": "2015-08-05T09:42:03+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nhttps://bugs.openjdk.java.net/browse/JDK-8130845 gives the following:\n\nIn fact the parsing of weekday or month names in the root locale was a bug in earlier Java versions. The root locale has accoring to unicode Month names like \"M01\", \"M02\",... - but no english month names. Same with weekdays.\n\nUsing the root locale is fine for parsing ISO formatted dates, but some of the formats are clearly \"english\" e.g. the \"Cookie\" or java.util.Date#toString() format. In Solr we should therefore change those SimpleDateFormats using english names while parsing to use Locale.ENGLISH.\n\nIn JDK 9, they fixed the problem, but we are still not 100% correct. I checked the CLDR locale data, in fact it has no month names, only those \"pseudo names\". Otherwise this may break again in later versions or for people using ICU SPIs for timezones or locales.\n\nI will provide a patch for those date formats, which use english names later (I am currently on vacation, so don't hurry!). We should fix this in 5.3. ",
            "id": "comment-14655084"
        },
        {
            "date": "2015-08-05T09:57:12+0000",
            "author": "Uwe Schindler",
            "content": "Here the patch. I will review Lucene/Solr a second time later, but this should be all \"english\" date formats, that should not use ROOT. ",
            "id": "comment-14655108"
        },
        {
            "date": "2015-08-05T18:21:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694276 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1694276 ]\n\nLUCENE-6723: Fix date parsing problems in Java 9 with date formats using English weekday/month names. ",
            "id": "comment-14658633"
        },
        {
            "date": "2015-08-05T18:24:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694277 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694277 ]\n\nMerged revision(s) 1694276 from lucene/dev/trunk:\nLUCENE-6723: Fix date parsing problems in Java 9 with date formats using English weekday/month names. ",
            "id": "comment-14658638"
        },
        {
            "date": "2015-08-05T18:34:40+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694278 from Uwe Schindler in branch 'dev/branches/lucene_solr_5_3'\n[ https://svn.apache.org/r1694278 ]\n\nMerged revision(s) 1694277 from lucene/dev/branches/branch_5x:\nMerged revision(s) 1694276 from lucene/dev/trunk:\nLUCENE-6723: Fix date parsing problems in Java 9 with date formats using English weekday/month names. ",
            "id": "comment-14658655"
        },
        {
            "date": "2015-08-05T18:35:22+0000",
            "author": "Uwe Schindler",
            "content": "I also committed to 5.3. ",
            "id": "comment-14658657"
        },
        {
            "date": "2015-08-23T20:36:44+0000",
            "author": "Uwe Schindler",
            "content": "I reopen this issue, because with Java 9 build 78 there are still problems (which are bugs in the JDK). This time the timezones cannot be parsed correctly. ",
            "id": "comment-14708531"
        },
        {
            "date": "2015-08-23T20:38:13+0000",
            "author": "Uwe Schindler",
            "content": "Hi Rory, hi Balchandra,\n\nI set up a quick round trip test (it iterates all available timezones in the JDK, sets them as default, creates a String out of new Date().toString() and tried to parse that afterwards with ENGLISH, US and ROOT locale.\n\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\npublic final class Test {\n  \n  private static void testParse(Locale locale, String date) {\n    try {\n      new SimpleDateFormat(\"EEE MMM d hh:mm:ss z yyyy\", locale).parse(date);\n      System.out.println(String.format(Locale.ENGLISH, \"OK parsing '%s' in locale '%s'\", date, locale));\n    } catch (ParseException pe) {\n      System.out.println(String.format(Locale.ENGLISH, \"ERROR parsing '%s' in locale '%s': %s\", date, locale, pe.toString()));\n    }\n  }\n  \n  public static void main(String[] args) {\n    for (String id : TimeZone.getAvailableIDs()) {\n      System.out.println(\"Testing time zone: \" + id);\n      TimeZone.setDefault(TimeZone.getTimeZone(id));\n      \n      // some date today:\n      String date1 = new Date(1440358930504L).toString();\n      testParse(Locale.ENGLISH, date1);\n      testParse(Locale.US, date1);\n      testParse(Locale.ROOT, date1);\n      // half a year back to hit DST difference:\n      String date2 = new Date(1440358930504L - 86400000L * 180).toString();\n      testParse(Locale.ENGLISH, date2);\n      testParse(Locale.US, date2);\n      testParse(Locale.ROOT, date2);\n    }\n  } \n   \n}\n\n\n\nWith Java 8 this passes, with Java 9 build 78 it fails for several timezones. The funny thing is: SimpleDateFormat is not even able to parse \"UTC\" - LOL.\n\nCould you pass this to the issue after reopening? It\u2019s a good test! ",
            "id": "comment-14708532"
        },
        {
            "date": "2015-08-23T20:38:55+0000",
            "author": "Uwe Schindler",
            "content": "Specifically, this time this date failed to parse: \"Sat Jun 23 02:57:58 XJT 2012\" ",
            "id": "comment-14708533"
        },
        {
            "date": "2015-08-25T07:16:01+0000",
            "author": "Uwe Schindler",
            "content": "New issue to get hold on this problem: https://bugs.openjdk.java.net/browse/JDK-8134384 ",
            "id": "comment-14710759"
        },
        {
            "date": "2015-11-25T14:15:15+0000",
            "author": "Uwe Schindler",
            "content": "The OpenJDK bug was fixed. ",
            "id": "comment-15026827"
        }
    ]
}