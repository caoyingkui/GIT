{
    "id": "SOLR-9751",
    "title": "PreAnalyzedField can cause managed schema corruption",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "6.2,                                            6.3",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "The exception as follows:\nCaused by: org.apache.solr.common.SolrException: Could not load conf for core test_shard1_replica1: Can't load schema managed-schema: Plugin init failure for [schema.xml] fieldType \"preanalyzed\": Cannot load analyzer: org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\n        at org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:85)\n        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:1031)\n        ... 6 more\nCaused by: org.apache.solr.common.SolrException: Can't load schema managed-schema: Plugin init failure for [schema.xml] fieldType \"preanalyzed\": Cannot load analyzer: org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\n        at org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:600)\n        at org.apache.solr.schema.IndexSchema.<init>(IndexSchema.java:183)\n        at org.apache.solr.schema.ManagedIndexSchema.<init>(ManagedIndexSchema.java:104)\n        at org.apache.solr.schema.ManagedIndexSchemaFactory.create(ManagedIndexSchemaFactory.java:172)\n        at org.apache.solr.schema.ManagedIndexSchemaFactory.create(ManagedIndexSchemaFactory.java:45)\n        at org.apache.solr.schema.IndexSchemaFactory.buildIndexSchema(IndexSchemaFactory.java:75)\n        at org.apache.solr.core.ConfigSetService.createIndexSchema(ConfigSetService.java:107)\n        at org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:78)\n        ... 7 more\n\nTest procedure:\n1.create collection using sample_techproducts_configs;\n2.add field in Solr web view;\n3.add field again in Solr web view.\nmanage-schema is modifyed as follows:\n<fieldType name=\"preanalyzed\" class=\"solr.PreAnalyzedField\">\n      <analyzer class=\" org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\">\n      </analyzer>\n</fieldType>",
    "attachments": {
        "SOLR-9751.patch": "https://issues.apache.org/jira/secure/attachment/12838624/SOLR-9751.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-11-11T17:08:48+0000",
            "author": "Steve Rowe",
            "content": "I can reproduce on master.  I'm looking into it. ",
            "id": "comment-15657546"
        },
        {
            "date": "2016-11-11T18:22:35+0000",
            "author": "Steve Rowe",
            "content": "The admin UI is not the problem - I can reproduce by cmdline only.\n\nThe original preanalyzed fieldtype is:\n\n\n<fieldType name=\"preanalyzed\" class=\"solr.PreAnalyzedField\">\n  <!-- PreAnalyzedField's builtin index analyzer just decodes the pre-analyzed token stream. -->\n  <analyzer type=\"query\">\n    <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n  </analyzer>\n</fieldType>\n\n\n\nAfter one field (any field type will do) is added, it becomes:\n\n\n<fieldType name=\"preanalyzed\" class=\"solr.PreAnalyzedField\">\n  <analyzer>\n    <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n  </analyzer>\n</fieldType>\n\n\n\nand after the second field is added:\n\n\n<fieldType name=\"preanalyzed\" class=\"solr.PreAnalyzedField\">\n  <analyzer class=\"org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\"/>\n</fieldType>\n\n ",
            "id": "comment-15657718"
        },
        {
            "date": "2016-11-11T18:36:17+0000",
            "author": "Steve Rowe",
            "content": "More complete stack trace:\n\n\nCaused by: org.apache.solr.common.SolrException: Plugin init failure for [schema.xml] fieldType \"preanalyzed\": Cannot load analyzer: org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\n        at org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:182)\n        at org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:491)\n        ... 36 more\nCaused by: org.apache.solr.common.SolrException: Cannot load analyzer: org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\n        at org.apache.solr.schema.FieldTypePluginLoader.readAnalyzer(FieldTypePluginLoader.java:287)\n        at org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:104)\n        at org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:53)\n        at org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:152)\n        ... 37 more\nCaused by: java.lang.InstantiationException: org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer\n        at java.lang.Class.newInstance(Class.java:427)\n        at org.apache.solr.schema.FieldTypePluginLoader.readAnalyzer(FieldTypePluginLoader.java:271)\n        ... 40 more\nCaused by: java.lang.NoSuchMethodException: org.apache.solr.schema.PreAnalyzedField$PreAnalyzedAnalyzer.<init>()\n        at java.lang.Class.getConstructor0(Class.java:3082)\n        at java.lang.Class.newInstance(Class.java:412)\n        ... 41 more\n\n\n\nThe (private) PreAnalyzedAnalyzer doesn't have a default ctor - its only ctor requires a parser param.\n\nNote that this ^^ is not really the problem - the problem is that serialization is losing information (the query-time analysis chain) and instead including a built-in non-substitutable analyzer: PreAnalyzedField doesn't allow re-configuration of its index-time analysis chain. ",
            "id": "comment-15657761"
        },
        {
            "date": "2016-11-11T19:39:27+0000",
            "author": "Steve Rowe",
            "content": "Seems to only reproduce in cloud setups - I can repro with bin/solr -e cloud but not bin/solr -e techproducts. ",
            "id": "comment-15657957"
        },
        {
            "date": "2016-11-11T22:39:28+0000",
            "author": "Steve Rowe",
            "content": "Patch with failing test, no fix yet.\n\nIn a 2-node cluster with a 2-shard, rf=1 collection, the cluster enters a failure loop where it can't read the schema - my IDE ran out of memory trying to store the log output.  In this test, the schema for which includes three types of PreAnalyzedField config, only 1 field has to be added before this condition occurs. ",
            "id": "comment-15658385"
        },
        {
            "date": "2016-11-14T23:19:21+0000",
            "author": "Steve Rowe",
            "content": "Patch with a fix.\n\nThe problem results from a combination of lenient schema parsing and the lack of a concept for non-user-specifiable index-time analyzers.\n\nThis patch adds a new interface HasImplicitIndexAnalyzer, implemented by PreAnalyzedField, and schema parsing and serialization now properly handle this case.  As a result, when a field type implements HasImplicitIndexAnalyzer, regardless of the original specified analyzer type, an analyzer (if any) will always be specified as a query-time analyzer, even if it was originally specified as a non-specific or index-time analyzer. \n\nI've also adding logged warnings for cases where analyzers are specified in the schema for field types that don't support analyzers (currently non-TextField-s).\n\nI'll commit once all tests and precommit pass. ",
            "id": "comment-15665353"
        },
        {
            "date": "2016-11-14T23:24:09+0000",
            "author": "Steve Rowe",
            "content": "Manual testing of the Schema API in the standalone Solr case shows the same problem as in the SolrCloud case, even though it didn't trigger system failure, so the problem is not confined to SolrCloud. ",
            "id": "comment-15665359"
        },
        {
            "date": "2016-11-15T00:27:41+0000",
            "author": "Steve Rowe",
            "content": "Patch, fixes a precommit issue in the last patch (unused imports), and removes the warnings I added for analyzers specified on non-TextField-s, since FieldType.set{Index,Query}Analyzer() already handles this case as a severe error.\n\nPrecommit and all tests pass.  Committing shortly. ",
            "id": "comment-15665512"
        },
        {
            "date": "2016-11-15T00:30:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8989c774783a80cab6902e45f111cfe60ed15d49 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8989c77 ]\n\nSOLR-9751: PreAnalyzedField can cause managed schema corruption ",
            "id": "comment-15665520"
        },
        {
            "date": "2016-11-15T00:30:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 76b439a0bdf8a3e74f53130571535bbfdec5c771 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=76b439a ]\n\nSOLR-9751: PreAnalyzedField can cause managed schema corruption ",
            "id": "comment-15665521"
        },
        {
            "date": "2016-11-15T00:55:33+0000",
            "author": "Steve Rowe",
            "content": "I opened SOLR-9765 to explore dealing with the general case of mixed schema modification request success/failure.  (On this issue, modification requests succeeded on the coordinating replica, but failed on other replicas.) ",
            "id": "comment-15665591"
        },
        {
            "date": "2016-11-23T13:59:27+0000",
            "author": "Steve Rowe",
            "content": "The test I added on this issue has been failing regularly, e.g. from https://jenkins.thetaphi.de/job/Lucene-Solr-6.x-Linux/2247/:\n\n\n  [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=PreAnalyzedFieldManagedSchemaCloudTest -Dtests.method=testAdd2Fields -Dtests.seed=CD72F125201C0C76 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=is -Dtests.timezone=Antarctica/McMurdo -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n  [junit4] ERROR   0.09s J0 | PreAnalyzedFieldManagedSchemaCloudTest.testAdd2Fields <<<\n  [junit4]    > Throwable #1: org.apache.solr.client.solrj.SolrServerException: No live SolrServers available to handle this request:[https://127.0.0.1:39011/solr/managed-preanalyzed, https://127.0.0.1:33343/solr/managed-preanalyzed]\n  [junit4]    > \tat __randomizedtesting.SeedInfo.seed([CD72F125201C0C76:656743CEFC1A9F80]:0)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.LBHttpSolrClient.request(LBHttpSolrClient.java:414)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.sendRequest(CloudSolrClient.java:1292)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.requestWithRetryOnStaleState(CloudSolrClient.java:1062)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.request(CloudSolrClient.java:1004)\n  [junit4]    > \tat org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:149)\n  [junit4]    > \tat org.apache.solr.schema.PreAnalyzedFieldManagedSchemaCloudTest.addField(PreAnalyzedFieldManagedSchemaCloudTest.java:61)\n  [junit4]    > \tat org.apache.solr.schema.PreAnalyzedFieldManagedSchemaCloudTest.testAdd2Fields(PreAnalyzedFieldManagedSchemaCloudTest.java:52)\n  [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n  [junit4]    > Caused by: org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at https://127.0.0.1:39011/solr/managed-preanalyzed: No such path /schema/fields/field2\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:593)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:262)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:251)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.LBHttpSolrClient.doRequest(LBHttpSolrClient.java:435)\n  [junit4]    > \tat org.apache.solr.client.solrj.impl.LBHttpSolrClient.request(LBHttpSolrClient.java:387)\n\n\n\nThe test failed only 1/100 beasting iterations on my Jenkins box.  The problem appears to be that the test doesn't wait long enough for schema changes to propogate to all replicas before attempting to access a newly created field through a replica that hasn't yet gotten the changes.  I'm testing a patch that adds updateTimeoutSecs=15 to the SchemaRequest.AddField requests used by the test. ",
            "id": "comment-15690175"
        },
        {
            "date": "2016-12-06T18:19:53+0000",
            "author": "Steve Rowe",
            "content": "The test and fix in SOLR-9832 don't involve PreAnalyzedField, so this issue can be resolved. ",
            "id": "comment-15726274"
        }
    ]
}