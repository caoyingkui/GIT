{
    "id": "LUCENE-3058",
    "title": "FST should allow more than one output for the same input",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "For the block tree terms dict, it turns out I need this case.",
    "attachments": {
        "LUCENE-3058.patch": "https://issues.apache.org/jira/secure/attachment/12477885/LUCENE-3058.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-04-30T21:00:31+0000",
            "content": "Patch.\n\nIt was a small change to Builder, to accept same input multiple times in a row.  I added an optional \"merge\" method to Outputs, and made a new UpToTwoIntOutputs class that handles one or two ints per input. ",
            "author": "Michael McCandless",
            "id": "comment-13027378"
        },
        {
            "date": "2011-04-30T22:08:29+0000",
            "content": "New patch; no change \u2013 just more friendly for \"patch\" (looks like svn diff not hg diff). ",
            "author": "Michael McCandless",
            "id": "comment-13027386"
        },
        {
            "date": "2011-05-03T08:17:33+0000",
            "content": "Looks good to me. One note: possible NPE here (null passes all instanceofs):\n\n+    @Override\n+    public boolean equals(Object _other) {\n+      if (_other instanceof TwoLongs) {\n+        final TwoLongs other = (TwoLongs) _other;\n+        return first == other.first && second == other.second;\n+      } else {\n+        return false;\n+      }\n+    }\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13028104"
        },
        {
            "date": "2011-05-03T08:23:55+0000",
            "content": "null passes all instanceofs\n\nDefinitely NOT! http://stackoverflow.com/questions/2950319/is-null-check-needed-before-calling-instanceof ",
            "author": "Uwe Schindler",
            "id": "comment-13028105"
        },
        {
            "date": "2011-05-03T08:34:37+0000",
            "content": "Handslap! And this is why you should always refresh your memory before posting something that lasts for millenia... Crawling back to my cave right now. ",
            "author": "Dawid Weiss",
            "id": "comment-13028108"
        },
        {
            "date": "2011-05-03T08:40:21+0000",
            "content": " It always confuses me, too. But if you think more about it, it makes sense to return false. But it's the same always for me: Whenever I write equals() methods, this question pops up. But now I mostly copy code like the one above from other classes. But you have to note: The above equals() code is only 100% suitable for final classes, else it could happen that a subclass that extends some fields is equal. But thats more a theoretical discussion. E.g. Lucene's Queries always check this.getClass()==other.getClass(). ",
            "author": "Uwe Schindler",
            "id": "comment-13028109"
        },
        {
            "date": "2011-05-13T20:36:47+0000",
            "content": "Reopening \u2013 this commit has generics violations in TestFSTs. ",
            "author": "Michael McCandless",
            "id": "comment-13033265"
        },
        {
            "date": "2011-05-13T20:42:21+0000",
            "content": "I think we should just suppress the warning?   ",
            "author": "Michael McCandless",
            "id": "comment-13033272"
        },
        {
            "date": "2011-05-13T21:23:44+0000",
            "content": "After reviewing, this seems the only solution. The cast is guarded by the instanceof check, but compiler does not know this.\n\nOnly the (Object) cast in second param is not needed:\n\n\n@SuppressWarnings(\"unchecked\") final Builder<Object> b = (Builder<Object>) builder;\nb.add(pair.input, _outputs.get(twoLongs.first));\nb.add(pair.input, _outputs.get(twoLongs.second));\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13033309"
        },
        {
            "date": "2011-05-13T21:27:45+0000",
            "content": "OK thanks Uwe... I'll commit. ",
            "author": "Michael McCandless",
            "id": "comment-13033314"
        }
    ]
}