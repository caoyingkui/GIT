{
    "id": "LUCENE-7647",
    "title": "CompressingStoredFieldsFormat should reclaim memory more aggressively",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "5.5.4",
            "6.4.1",
            "6.5",
            "7.0"
        ]
    },
    "description": "When stored fields are configured with BEST_COMPRESSION, we rely on garbage collection to reclaim Deflater/Inflater instances. However these classes use little JVM memory but may use significant native memory, so if may happen that the OS runs out of native memory before the JVM collects these unreachable Deflater/Inflater instances. We should look into reclaiming native memory more aggressively.",
    "attachments": {
        "LUCENE-7647.patch": "https://issues.apache.org/jira/secure/attachment/12848559/LUCENE-7647.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15831883",
            "date": "2017-01-20T15:02:50+0000",
            "content": "Here is a patch. On the writing side, things are easy since there is a single instance that is used from a single thread and for a short amount of time, so I just made the compressor implement Closeable. However things are a bit more complicated on the reading side because of clones and the fact that we do not close them all. So to keep things simple, I just changed the codec to create Inflater instances on demand. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15831953",
            "date": "2017-01-20T15:33:04+0000",
            "content": "What does it do to performance to create a deflater instance every time? This seems very inefficient. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15831960",
            "date": "2017-01-20T15:38:29+0000",
            "content": "s/deflater/inflater of course  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15831984",
            "date": "2017-01-20T15:47:23+0000",
            "content": " For fetching the top hits I think it is fine anyway, if there is an issue I suspect it would be more with merging. I can try to run luceneutil with this change next week. Do you have ideas to make it more efficient maybe? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15831997",
            "date": "2017-01-20T15:55:39+0000",
            "content": "I think its first important to understand how it impacts performance, including worst cases. That means merging with deletes and lots of results and stuff too: not just best-cases like top hits only.\n\nAlternative solutions are possible depending on the impact: e.g. pool managed by the top Decompressor and passed via clone(), and decompress could simply release back to the pool. This is kind of a standard pattern, but of course it adds complexity. We should avoid it if its really not necessary. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15834748",
            "date": "2017-01-23T15:29:51+0000",
            "content": "I ran a merge that cantains 1M documents from the wikipedia benchmark including deleted docs, in order to test the worst case. Here is what the info stream reports about stored fields before/after the change:\n\nBefore:\n\nSM 0 [2017-01-23T15:03:34.956Z; Lucene Merge Thread #0]: 41827 msec to merge stored fields [996093 docs]\nSM 0 [2017-01-23T15:06:49.785Z; Lucene Merge Thread #0]: 41722 msec to merge stored fields [996093 docs]\nSM 0 [2017-01-23T15:14:09.943Z; Lucene Merge Thread #0]: 42138 msec to merge stored fields [996093 docs]\n\n\n\nAfter:\n\nSM 0 [2017-01-23T15:17:33.241Z; Lucene Merge Thread #0]: 42050 msec to merge stored fields [996093 docs]\nSM 0 [2017-01-23T15:20:00.656Z; Lucene Merge Thread #0]: 42320 msec to merge stored fields [996093 docs]\nSM 0 [2017-01-23T15:22:04.047Z; Lucene Merge Thread #0]: 42520 msec to merge stored fields [996093 docs]\n\n\n\nI think this is either noise a an acceptable slow down. That makes sense since we always decompress about 16K of data. Initialization of the Inflater is likely much less costly than decompressing that amount of data. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15836347",
            "date": "2017-01-24T17:35:55+0000",
            "content": "+1 ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15837924",
            "date": "2017-01-25T15:40:41+0000",
            "content": "Commit 94530940e4de8b476a5886f284578c933a8f33ef in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9453094 ]\n\nLUCENE-7647: CompressingStoredFieldsFormat should reclaim memory more aggressively. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15837950",
            "date": "2017-01-25T15:51:08+0000",
            "content": "Thanks for running the benchmark! ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15837985",
            "date": "2017-01-25T16:06:21+0000",
            "content": "Commit 03448807a1b14657bdb8eb568f84df3d6ef09e01 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0344880 ]\n\nLUCENE-7647: CompressingStoredFieldsFormat should reclaim memory more aggressively. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15838000",
            "date": "2017-01-25T16:14:43+0000",
            "content": "Commit ff9cc1d8090c8e8cbc7ec22b50c156fafad8e6f3 in lucene-solr's branch refs/heads/branch_6_4 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff9cc1d ]\n\nLUCENE-7647: CompressingStoredFieldsFormat should reclaim memory more aggressively. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15839371",
            "date": "2017-01-26T07:34:30+0000",
            "content": "Commit 94530940e4de8b476a5886f284578c933a8f33ef in lucene-solr's branch refs/heads/apiv2 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9453094 ]\n\nLUCENE-7647: CompressingStoredFieldsFormat should reclaim memory more aggressively. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15853834",
            "date": "2017-02-06T10:58:06+0000",
            "content": "Commit 129624e5fbfdd6fa4a9904189caf416dbf6412ad in lucene-solr's branch refs/heads/branch_5_5 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=129624e ]\n\nLUCENE-7647: CompressingStoredFieldsFormat should reclaim memory more aggressively. ",
            "author": "ASF subversion and git services"
        }
    ]
}