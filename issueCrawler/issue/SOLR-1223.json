{
    "id": "SOLR-1223",
    "title": "Query Filter fq with OR operator",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "See this issue for some background. Today, all of the Query filters specified with the fq parameter are AND'd together.\n\nThis issue is about allowing a set of filters to be OR'd together (in addition to having another set of filters that are AND'd). The OR'd filters would of course be applied before any scoring is done.\n\nThe advantage of this feature is that you will be able to break up complex filters into simple, more cacheable filters, which should improve performance.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12720349",
            "date": "2009-06-16T21:02:30+0000",
            "content": "The hardest part to this is passing the information through the Solr APIs to tell Solr to cache the clauses of a particular boolean query separately.\n\n2 approaches:\n\n\ta SolrQuery that wrapps a normal Query and adds extra metadata like \"cache separately\" or \"don't cache\"\n\treplace Query with SolrFilter (that contains a Query as well as the extra metadata)... involves many deprecations.\n\n "
        },
        {
            "author": "Brian Pearson",
            "id": "comment-12720710",
            "date": "2009-06-17T15:24:17+0000",
            "content": "Just putting my thoughts out .. obviously don't have the same understanding as Yonik \n\nFeels like specifying which filter's are cached doesn't need to be part of this issue.  This issue could just be about specifying the boolean logic that gets applied to the Doc Maps that are created by the filters.  So today you have a number of filters .. F1, F2, ... FN and the boolean logic is F1 & F2 & .. &FN\n\nWhat I'm hoping for is something simple where you have 2 groups, the AND group and the OR group.   \nAND group: A1, A2\nOR group: O1, O2\n\nSo the filter you end up with is (A1 & A2) & (O1 | O2).  The caching logic doesn't need to change then, there are still 4 filter queries.  \n\nReal example:\n\nCurrent method\nfq=popularity:[10 TO *] OR section:0 \nfq=type:2\n\nNew method (assuming we added ofq for the OR'd filter query group, probably there is a better way to make the API )\nofq=popularity:[10 TO *] \nofq=section:0\nfq=type:2\n\nI realize I'm probably missing some important implementation details that Yonik alludes to, just wanted to get my thoughts down.  I wish I was in a position to actually work on this .. if someone takes this on, I can help with beta testing and documentation.\n\nIf anyone cares, the reason I want this is because my apps have extremely complicated authorization logic.   I can do what I need using fq's, but the filters get large and are very specific to the user that did the search.  If I had OR logic, then I could break the filters down into smaller pieces, which would be much more reusable from the cache, and performance would be much better\n\nThanks for listening  "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12724781",
            "date": "2009-06-27T01:10:33+0000",
            "content": "The problem with BP's suggestion is that (fq1 & fq2) OR (fq3 & fq4) is not possible. One ends up wanting to do everything with NAND. Or postfix notation.\n\nTo have a tree-structured AND/OR/NOT expression we need to name the individual filter queries and then reference them in a tree.\n\n    fq1=query\n    fq2=query\n    fq3=query\n    fq4=query\n\n    fq=(fq1 AND fq2) OR (fq3 & fq4)\n\nThis can be done without naming filters if we just have something that finds filter queries as subtrees in a given query. If \"field:3\" is a cached filter query, this tree-walker would find that cached filter in fq=\"+a +field:3\". It would then do a search of \"+a\" applying the existing filter \"field:3\". \n\nI vote for named filters as the most transparent system for dynamically compositing filters. "
        },
        {
            "author": "Brian Pearson",
            "id": "comment-12727526",
            "date": "2009-07-06T13:48:58+0000",
            "content": "Hey Lance, that solution would be perfect and certainly more powerful than what I suggested.  Again, if anyone takes this up, I can help with testing and docs "
        },
        {
            "author": "Brian Pearson",
            "id": "comment-12736855",
            "date": "2009-07-29T21:48:20+0000",
            "content": "Hey folks,\n\nAs I've mentioned above, this issue is very important to me, or rather to my employer.  If there was a way to accelerate the development, we'd be interested to talk about it.  Perhaps a substantial donation, or some other deal could be worked out.  Of course, the feature would need to be implemented properly with the intention of integrating it into the main codeline.   I think it would be a valuable addition to Solr especially for anyone doing complex authorization, not to mention the other uses and performance benefits this would have.   \n\nThanks all "
        },
        {
            "author": "Frederik Kraus",
            "id": "comment-12999820",
            "date": "2011-02-26T19:12:51+0000",
            "content": "I'd rather see a new filterQuery type like ofq than being stuck with the current options. Nested filterQueries including variables would obviously be the most flexible solution, but imho having two different filter types would add enough benefit in the meantime. Just my 2 cent ... "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13073611",
            "date": "2011-08-01T16:57:30+0000",
            "content": "I'd rather see a new filterQuery type like ofq than being stuck with the current options. Nested filterQueries including variables would obviously be the most flexible solution, but imho having two different filter types would add enough benefit in the meantime.\n\nI see that someone else had the same idea a long time before I did.  I just brought this up on the solr-user list a few days ago, but I couldn't think of a good parameter name.  The parameter name I came up with (fqu, filter query union) is not as good as ofq.\n\nI like Brian and Frederik's idea. "
        },
        {
            "author": "Brian Pearson",
            "id": "comment-13144346",
            "date": "2011-11-04T21:13:23+0000",
            "content": "Any chance this will make it into Solr 4?  I see there are 8 votes now, is that enough to bump the priority?  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13148341",
            "date": "2011-11-11T08:17:19+0000",
            "content": "Brian, if you'd like to get the ball rolling, one way is do an initial patch, and then hope for involvement.\nAnother way is to hire someone (see http://wiki.apache.org/solr/Support) for the programming.\n\nPersonally I like the Lance's approach with individually cached sub-filters referenced by variables. Perhaps using $ syntax as we do for query substitution? fq=($fq1 AND $fq2) OR ($fq3 & $fq4). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13450929",
            "date": "2012-09-07T20:04:02+0000",
            "content": "I had an idea about this a while back that i thought i posted as a comment but apparently i forgot.\n\nwhat if we implemented a very simple \"or\" (and for parity: \"and\") QParser that took as it's input the name of another (multivalued) param, which it then iterated over, parsing each one according to the (possibly local) defType and built up a BooleanQuery containing all of the resulting clauses.  ie...\n\n\n...\n&fq={!or tag=model}models\n&models=model:ford\n&models=model:toyota\n&models=model:gm\n&fq={!or tag=color defType=field f=color}colors\n&colors=Cherry Red\n&colors=Green\n...\n\n\n\nAs alluded to in this example, it would greatly simplify the input handling needed when doing multi-select faceting\n\nA possible later optimization would be for this OrQParser to actually return a subclass of BooleanQuery implementing a special interface so that the SOlrIndexSearcher would know if/when it could pull out the BooleanClauses to cache them individually.\n\n(The one concern i have about this idea is the unusualness of the input to this parser being the name of another (multivalued) param \u2013 people might be confused with the more common convention of passing as input a dereferenced param \u2013 ie: '$param'))\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453498",
            "date": "2012-09-11T22:38:23+0000",
            "content": "Ugh ... undo Jira's new ridiculous \"you hit a key while focus was on your browser so we're going to edit the text undre your mouse behavior\" "
        },
        {
            "author": "Ron Buchanan",
            "id": "comment-13454135",
            "date": "2012-09-12T17:13:40+0000",
            "content": "If you care for input from a nobody that's fairly new to Solr, I like Hoss Man's idea - and I very, very much want this   \n\nThough my thought was that it would make sense to use the \"v=$paramName\" facility and just add multiple instances of \"paramName\" "
        },
        {
            "author": "Manuel Lenormand",
            "id": "comment-13906857",
            "date": "2014-02-20T11:05:35+0000",
            "content": "For simplification let's assume we have all the clauses cached as filterQueries, namely bitsSets. Let's say they were warmed in a new-searcher. All we need now is creating a new bitSet merged out of the logical OR/AND between the cached queryFilters. \n\nLooking at QueryComponent.prepare (line 167) we add a new queryParsed filter to the responseBuilder, so before this stage we need to retrieve the cachedFilters (from SolrIndexSearcher) and put a new cachedFilter out of the merged bitSet. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13907257",
            "date": "2014-02-20T18:07:08+0000",
            "content": "you can check the workaround mentioned in \"OR Filters\" in http://blog.griddynamics.com/2014/01/segmented-filter-cache-in-solr.html  "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15547435",
            "date": "2016-10-05T02:52:18+0000",
            "content": "This is now implemented as a query syntax in SOLR-7219\n\nIs there anything else left to do here? "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15557102",
            "date": "2016-10-08T04:02:53+0000",
            "content": "The work was done in another issue. This one is safe to close. "
        }
    ]
}