{
    "id": "LUCENE-3866",
    "title": "Make CompositeReader.getSequentialSubReaders() and the corresponding IndexReaderContext methods return unmodifiable List<R extends IndexReader>",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Since Lucene 2.9 we have the method getSequentialSubReader() returning IndexReader[]. Based on hardly-to-debug errors in user's code, Robert and me realized that returning an array from a public API is an anti-pattern. If the array is intended to be modifiable (like byte[] in terms,...), it is fine to use arrays in public APIs, but not, if the array must be protected from modification. As IndexReaders are 100% unmodifiable in trunk code (no deletions,...), the only possibility to corrumpt the reader is by modifying the array returned by getSequentialSubReaders(). We should prevent this.\n\nThe same theoretically applies to FieldCache, too - but the party that is afraid of performance problems is too big to fight against that \n\nFor getSequentialSubReaders there is no performance problem at all. The binary search of reader-ids inside BaseCompositeReader can still be done with the internal protected array, but public APIs should expose only a unmodifiable List. The same applies to leaves() and children() in IndexReaderContext. This change to list would also allow to make CompositeReader and CompositeReaderContext Iterable<R extends IndexReader>, so some loops would look nice.",
    "attachments": {
        "LUCENE-3866-step2.patch": "https://issues.apache.org/jira/secure/attachment/12532390/LUCENE-3866-step2.patch",
        "LUCENE-3866-step1.patch": "https://issues.apache.org/jira/secure/attachment/12532349/LUCENE-3866-step1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-13T09:28:05+0000",
            "content": "In revision 1300016 I already committed some JavaDocs warnings about this. But the issue should be solved and discussed before Lucene 4.0 is released. ",
            "author": "Uwe Schindler",
            "id": "comment-13228291"
        },
        {
            "date": "2012-03-13T11:50:21+0000",
            "content": "Thanks for opening!\n\n\nThe binary search of reader-ids inside BaseCompositeReader can still be done with the internal protected array,\n\nThat's unaffected here right? Because starts[] is a separate problem. Why isnt this private? I made it private,\nonly MultiPassIndexSplitter.FakeDeleteIndexReader is affected. In my opinion we should fix this too, the fix would\nbe to just have a protected method in BaseComposite: int getDocStart(int readerIndex). Between this and readerIndex(),\nsubclasses then have all they need. ",
            "author": "Robert Muir",
            "id": "comment-13228335"
        },
        {
            "date": "2012-03-13T11:54:40+0000",
            "content": "Yeah, its both cases: The protected inner reader[] is of course a problem. But in general we should protect anybody outside (except subclasses) to do harm here. So it should be a simple List<R extends IndexReader>. ",
            "author": "Uwe Schindler",
            "id": "comment-13228339"
        },
        {
            "date": "2012-03-13T14:54:15+0000",
            "content": "I think we should allow users to access in the most low-level efficient manner, just as lucene can.\nRemember, this is expert level stuff!  Seems like at most we would need a javadoc comment saying \"don't modify this\". ",
            "author": "Yonik Seeley",
            "id": "comment-13228415"
        },
        {
            "date": "2012-06-17T23:38:09+0000",
            "content": "Here the first step of this refactoring (affects only few core classes):\n\n\n\tgetSequentialSubReaders() returns a List<? extends IndexReader> (unmodifiable)\n\tNuked ReaderUtil.Gather completely (this one is ineffective and slow because of useless recursion). We can use ReaderContext.leaves() to get all atomic sub readers including their docStarts\n\tImproved MultiFields and MultiDocValues by usage of ReaderContext.leaves(). Code much easier to read!\n\tMoved ReaderUtil.Slice to separate class (it's somehow unrelated), but has nothing to do with ReaderUtil anymore -> Should move to index package + hidden\n\n\n\nThere is still one (slow) nocommit, because step 2 will refactor the ReaderContexts to use Collections, too.\n\nYonik:\n\nI think we should allow users to access in the most low-level efficient manner, just as lucene can. Remember, this is expert level stuff!  Seems like at most we would need a javadoc comment saying \"don't modify this\".\n\nActually it's more efficient than before. And the collection views are still backed by arrays and are never used in inner loops (it's just when IndexSearcher initializes or executes searches on all segments). Without any real benchmark showing a slowness (please do this after step 2 -> nocommit) I don't think we should risk corrumpt readers. ",
            "author": "Uwe Schindler",
            "id": "comment-13393639"
        },
        {
            "date": "2012-06-18T10:15:44+0000",
            "content": "This is the final patch, now also moving IndexReaderContext to collections and make them unmodifiable.\n\nFor safety, IRC.leaves() now throws UnsupportedOperationException, if the context is not top-level (returned null before), this helps to find bugs.\n\nAll tests pass, JavaDocs are updated.\n\nRobert suggested to me yesterday, to maybe make getSequentialSubReaders() protected, as it is no longer used by user code (only tests). All code should use the topReaderContext returned by the IndexReader to get all atomic IRC.leaves(), or IRC.children() to get the sub-contexts/readers.\n\nFor easy use it might be a good idea to add some \"easy-use methods\" in ReaderUtil to get a view on all AtomicReader leaves (without docBase, so returns List<AtomicReader>). Some code not needing the whole info would get simplier. This is stuff for a new issue.\n\nIn my opinion we should also move and hide ReaderSlice and BitSlice to index package, those classes are solely privately used from there.\n\nI think this is ready to commit to trunk and for backport to 4.x. I will not wait too long (max 24hrs), as the patch may get outdated very quickly. Maybe Mike can do some perf benchmarks with beast to show that it does not affect performance (some parts like creating Multi* should be much more effective now). ",
            "author": "Uwe Schindler",
            "id": "comment-13395788"
        },
        {
            "date": "2012-06-18T10:26:45+0000",
            "content": "Samll update with JavaDocs (remove the \"don't modify returned array\" @ getSequentialSubReaders) ",
            "author": "Uwe Schindler",
            "id": "comment-13395795"
        },
        {
            "date": "2012-06-18T12:12:50+0000",
            "content": "I will later also upgrade MIGRATE.txt markdown. ",
            "author": "Uwe Schindler",
            "id": "comment-13395847"
        },
        {
            "date": "2012-06-18T15:46:34+0000",
            "content": "I ran quick perf test:\n\n                Task    QPS base StdDev base   QPS patchStdDev patch      Pct diff\n             Respell       92.15        1.40       90.30        2.70   -6% -    2%\n            PKLookup      130.68        4.16      128.24        2.28   -6% -    3%\n              Fuzzy2       41.79        0.40       41.14        1.11   -5% -    2%\n              Fuzzy1      108.97        2.40      107.33        2.87   -6% -    3%\n         AndHighHigh       16.19        0.48       15.97        0.31   -6% -    3%\n              Phrase       12.90        0.32       12.74        0.36   -6% -    4%\n          AndHighMed       64.18        1.81       63.46        1.83   -6% -    4%\n        SloppyPhrase        8.37        0.29        8.29        0.11   -5% -    3%\n            SpanNear        5.51        0.12        5.46        0.18   -6% -    4%\n         TermGroup1M       36.19        0.60       35.89        0.74   -4% -    2%\n        TermBGroup1M       70.64        0.49       70.74        0.57   -1% -    1%\n             Prefix3       61.07        3.58       61.25        1.35   -7% -    8%\n            Wildcard       40.84        2.20       41.00        0.98   -7% -    8%\n                Term      147.32        3.85      149.65        4.87   -4% -    7%\n      TermBGroup1M1P       50.32        1.58       51.29        0.88   -2% -    7%\n              IntNRQ        9.96        1.40       10.18        0.56  -15% -   25%\n          OrHighHigh       10.31        0.74       10.56        0.57   -9% -   16%\n           OrHighMed       12.95        1.01       13.26        0.79  -10% -   17%\n\n\n\nBasically no real change ... good! ",
            "author": "Michael McCandless",
            "id": "comment-13395968"
        },
        {
            "date": "2012-06-18T15:53:29+0000",
            "content": "Thanks, I was not expecting a change - otherwise all my believes would have been devastated...  ",
            "author": "Uwe Schindler",
            "id": "comment-13395975"
        },
        {
            "date": "2012-06-18T16:12:57+0000",
            "content": "+1, patch looks good!  Thanks Uwe. ",
            "author": "Michael McCandless",
            "id": "comment-13395995"
        },
        {
            "date": "2012-06-18T20:45:50+0000",
            "content": "I checked CHANGES.txt and MIGRATE.txt, there are no explicit mentions of the datatypes. No need to change anything. But MIGRATE.txt is missing the documentation about how to get atomic leaves from a reader. We should do this in the followup issue, when we simplify some names.\n\nI will commit this patch tomorrow morning to trunk and 4.x. ",
            "author": "Uwe Schindler",
            "id": "comment-13396237"
        },
        {
            "date": "2012-06-19T07:39:50+0000",
            "content": "Committed trunk revision: 1351590\nCommitted 4.x revision: 1351591 ",
            "author": "Uwe Schindler",
            "id": "comment-13396581"
        }
    ]
}