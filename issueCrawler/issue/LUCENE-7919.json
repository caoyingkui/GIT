{
    "id": "LUCENE-7919",
    "title": "excessive use of notifyAll",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "6.6",
        "status": "Resolved",
        "type": "Bug",
        "components": [
            "core/index"
        ],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "I am using Elasticsearch and have a write heavy scene. When tuning with jstack, I found a significant proportion of thread stacks similar to the followings:\n\n\n\"elasticsearch[test][bulk][T#23]\" #126 daemon prio=5 os_prio=0 tid=0x00007f68f8040000 nid=0x6b1 runnable [0x00007f6918ce9000]\n   java.lang.Thread.State: RUNNABLE\n        at java.lang.Object.notifyAll(Native Method)\n        at org.apache.lucene.index.DocumentsWriterPerThreadPool.release(DocumentsWriterPerThreadPool.java:213)\n        - locked <0x00000000ea02b6d0> (a org.apache.lucene.index.DocumentsWriterPerThreadPool)\n        at org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:496)\n        at org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1571)\n        at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1316)\n        at org.elasticsearch.index.engine.InternalEngine.index(InternalEngine.java:663)\n        at org.elasticsearch.index.engine.InternalEngine.indexIntoLucene(InternalEngine.java:607)\n        at org.elasticsearch.index.engine.InternalEngine.index(InternalEngine.java:505)\n        at org.elasticsearch.index.shard.IndexShard.index(IndexShard.java:556)\n        at org.elasticsearch.index.shard.IndexShard.index(IndexShard.java:545)\n        at org.elasticsearch.action.bulk.TransportShardBulkAction.executeIndexRequestOnPrimary(TransportShardBulkAction.java:484)\n        at org.elasticsearch.action.bulk.TransportShardBulkAction.executeBulkItemRequest(TransportShardBulkAction.java:143)\n        at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:113)\n        at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:69)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:939)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:908)\n        at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:113)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.onResponse(TransportReplicationAction.java:322)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.onResponse(TransportReplicationAction.java:264)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$1.onResponse(TransportReplicationAction.java:888)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$1.onResponse(TransportReplicationAction.java:885)\n        at org.elasticsearch.index.shard.IndexShardOperationsLock.acquire(IndexShardOperationsLock.java:147)\n        at org.elasticsearch.index.shard.IndexShard.acquirePrimaryOperationLock(IndexShard.java:1657)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction.acquirePrimaryShardReference(TransportReplicationAction.java:897)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction.access$400(TransportReplicationAction.java:93)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.doRun(TransportReplicationAction.java:281)\n        at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:260)\n        at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:252)\n        at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:69)\n        at org.elasticsearch.transport.TransportService$7.doRun(TransportService.java:644)\n        at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:638)\n        at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\n\n\nAfter reading the code related with DocumentsWriterPerThreadPool, I think the notifyAll is useless. This is a relatively expensive operation, and should be avoided if possible.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16115349",
            "date": "2017-08-05T09:28:54+0000",
            "content": "I agree notifyAll was not necessary here; we've already replaced that with a notify in LUCENE-7868, which will be released in 7.0. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16116000",
            "date": "2017-08-07T01:39:52+0000",
            "content": "why not just remove it? ",
            "author": "Guoqiang Jiang"
        },
        {
            "id": "comment-16117244",
            "date": "2017-08-07T20:50:24+0000",
            "content": "Oh indeed, it can be removed!\n\nWe used to have threads .wait() in the past, but we don't do that anymore except in the aborting case and we already have a .notifyAll for that.\n\nI'll remove it; thanks Guoqiang Jiang. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16117501",
            "date": "2017-08-07T22:53:54+0000",
            "content": "Commit b531fbc5fd91d5fabf90a552b809727d68fd1c9f in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b531fbc ]\n\nLUCENE-7919: remove useless notify ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16117504",
            "date": "2017-08-07T22:54:47+0000",
            "content": "Commit fe1b75d99448ebfa668a2bab00a462e8e2ded19b in lucene-solr's branch refs/heads/branch_7x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fe1b75d ]\n\nLUCENE-7919: remove useless notify ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16117506",
            "date": "2017-08-07T22:56:19+0000",
            "content": "Commit a128fcb8444271d73f36744018b5261b3bff0606 in lucene-solr's branch refs/heads/branch_7_0 from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a128fcb ]\n\nLUCENE-7919: remove useless notify ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16117507",
            "date": "2017-08-07T22:56:54+0000",
            "content": "Thanks Guoqiang Jiang! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16117633",
            "date": "2017-08-08T00:48:11+0000",
            "content": "My pleasure. ",
            "author": "Guoqiang Jiang"
        },
        {
            "id": "comment-16143231",
            "date": "2017-08-27T21:48:35+0000",
            "content": "+1 LGTM!  \nThis patch will improve the performance much better for single doc indexing. There is another part of need to be improved as well. The getAndLock() , which in the same time only one thread could enter in.  I'd like file another jira for the improvement. ",
            "author": "Min Zhou"
        }
    ]
}