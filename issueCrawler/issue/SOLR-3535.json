{
    "id": "SOLR-3535",
    "title": "Add block support for XMLLoader",
    "details": {
        "affect_versions": "4.1,                                            6.0",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Sub-task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I'd like to add the following update xml message:\n\n<add-block>\n    <doc>....</doc>\n    <doc>....</doc>\n</add-block>\n\nout of scope for now: \n\n\tother update formats\n\tupdate log support (NRT), should not be a big deal\n\toverwrite feature support for block updates - it's more complicated, I'll tell you why\n\n\n\nAlt\n\n\twdyt about adding attribute to the current tag \n{pre}<add block=\"true\">{pre}\n\tor we can establish RunBlockUpdateProcessor which treat every <add> ....</add> as a block.\n\n\n\nTest is included!!\nHow you'd suggest to improve the patch?",
    "attachments": {
        "SOLR-3535.patch": "https://issues.apache.org/jira/secure/attachment/12531721/SOLR-3535.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-13293101",
            "date": "2012-06-11T21:25:59+0000",
            "content": "wdyt about adding attribute to the current tag {pre}<add block=\"true\">{pre}\n\nI like this better than coming up with a new <add-block> element, personally. "
        },
        {
            "author": "Simon Rosenthal",
            "id": "comment-13293761",
            "date": "2012-06-12T16:50:02+0000",
            "content": "Mikhail:\nnot clear to me from the code/comments exactly what this issue/patch is meant to accomplish. I'm assuming that the intention is to be able to add atomically every document in the block at once ?\n\nThat is a use case which I have encountered  (a batch update of a set of records with new product price information, where you want to commit them only when the complete set has been indexed, regardless of autocommits being fired off or other processes issuing commits). If that's the intention, this patch is great !\n\nI attempted to address the problem of undesired autocommits  in SOLR-2664 - enable/disable autocommit on the fly, but that patch is very out of date.\n\nI do think it should be extended to updates in CSV/JSON and updates using the SolrJ API.\n\n+1 for Erik's suggestion on the syntax.\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13293858",
            "date": "2012-06-12T19:14:32+0000",
            "content": "@Simon,\nthe intention of this patch is index support for the parent ticket SOLR-3076. BJQ magic is explained at http://blog.mikemccandless.com/2012/01/searching-relational-content-with.html\n\nI'm going to rework the patch by this week.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13293867",
            "date": "2012-06-12T19:26:01+0000",
            "content": "It seems like what we really want to express here is nested documents.  Directly expressing that in the transfer syntax (XML, JSON, or binary) would seem more natural and also allow us to handle/express multiple levels of nesting.  This also frees the user from having to think about details such as where the parent document goes (at the beginning or the end?).\n\nInternally representing a parent and it's child documents as a single SolrInputDocument also has a lot of benefits and seems like it's the easiest path to get this working with all of the existing code (like transaction logging, forwarding docs based on ID in cloud mode, etc).\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13293924",
            "date": "2012-06-12T21:11:10+0000",
            "content": "It seems like what we really want to express here is nested documents.\n\nGreat point, and totally concur that the input should be hierarchical for the block join queries.  But do we also need a little bit lower level direct (non-hierarchical) way call IndexWriter#addDocuments()?  Or is the Solr need here purely on hierarchy modeling? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13294293",
            "date": "2012-06-13T09:36:05+0000",
            "content": "Yonik,\n\ndo you mean XMLLoader (as well as other ones) should produce some form of hierarchical document and some update processor will linearize such hierarchy into the sequence and pass it into AddBlockCommand?\n\nalso how do you suggest to model doc hierarchy: as a SolrInputDoc subclass with explicit relations collections or some magic collections values in the current SolrInputDocument? \n\nI'd like to emphasize the overall complexity - parent doc can have several subdocs relations like SKUs/UPCs and Discounts, etc   \n\nPS pls check the parent issue SOLR-3076. there is a dilemma which feature set to provide, your proposal is closer to \"magic-knows-everything\" schema approach. I don't have strong disagreement about it, but just want to start from pretty neat ability first. Anyway, looking forward to hear your suggestions.  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13294313",
            "date": "2012-06-13T10:05:05+0000",
            "content": "I think the suggestion is to make nestable SolrInputDocuments.  In XML this would be something like:\n\n<add>\n\n<doc>\n  <field name=\"id\">1</field>\n  <field name=\"name\">Parent</field>\n  <doc>\n    <field name=\"id\">2</field>\n    <field name=\"name\">Child 1</field>\n  </doc>\n  <doc>\n    <field name=\"id\">2</field>\n    <field name=\"name\">Child 2</field>\n  </doc>\n</doc>\n\n</add>\n\n\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13294348",
            "date": "2012-06-13T11:07:12+0000",
            "content": "off hand, the big complication I see is how to deal with UpdateProcesssorChains \u2013 should processors expect the nested SolrInputDoc or a flattened version? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13294466",
            "date": "2012-06-13T14:07:21+0000",
            "content": "off hand, the big complication I see is how to deal with UpdateProcesssorChains \u2013 should processors expect the nested SolrInputDoc or a flattened version?\n\nAt first blush, I think we'd want a single SolrInputDocument passing through the update processor chain AddUpdateCommand, and that document would be nested.  You'd need to keep that entire nested structure as a single unit for as long as possible I think.  \n\nBut of course there are cons.... update processors would need to coded to handle nested documents explicitly, as currently something like a language detection would only operate on the outer parent document automatically.  Hmmm.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13294500",
            "date": "2012-06-13T14:39:03+0000",
            "content": "At first blush, I think we'd want a single SolrInputDocument passing through the update processor chain AddUpdateCommand, and that document would be nested.  You'd need to keep that entire nested structure as a single unit for as long as possible I think.\n\nYes, exactly.  That also gives the most power... update processors that care about the structure of the nested documents can get to it.\n\nBut of course there are cons.... update processors would need to coded to handle nested documents explicitly,\n\nThe necessity to treat multiple docs as a single update introduce complexity into the update processor chain regardless.  If not a nested SolrInputDocument, then we'd need to pass along a List<SolrInputDocument> to keep them together anyway, and document mutating processors would need to change to iterate over this list.  For simple mutating processors, we can have a utility class that visits each document.\n\nOf course the biggest benefit of treating as a single document means that all the solr cloud stuff we've done (transaction log recovery, peer sync, update forwarding, per-doc replication, etc, should all just work) "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13294504",
            "date": "2012-06-13T14:48:56+0000",
            "content": "Maybe there should be a \"block-doc-aware\" interface/base class that update processors can implement or extend. If an update processor does implement that interface then it can be passed the new hierarchical doc/list in one shot. But for \"legacy\" update processors (that don't implement \"block-doc-aware\") each of the sub-documents and the parent document would get passed one at a time. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13294569",
            "date": "2012-06-13T17:14:29+0000",
            "content": "The necessity to treat multiple docs as a single update introduce complexity into the update processor chain regardless.\n\nExactly.  No matter how we deal with this sort of thing in the external (xml/json/etc) APIs, or in the internal (SolrInputDocument) APIs, the UpdateRequestProcessors are going to need to be changed to explicitly understand the relationsihps of these docs \u2013 so let's model things in the way that makes the most sense and work from there \u2013 with the added bonus that modeling things the way they make the most sense should also be the easiest way to make it work with SolrCloud.\n\nMy suggestion for an order of iterative implementation:\n\n1) add \"List<SolrInputDocument> getChildDocuments()\" to SOlrInputDocument\n2) make RunUpdateProcessor do the right thing with child docs\n3) make the JavaBinCodec aware of getChildDocuments() so solrj can serialize/deserialize (which should means SolrCloud can propogate them transparently)\n4) get basic tests of hierarchical doc updates/deletes working in both standalone and solrcloud mode\n\nThen lots of other stuff can be done in parallel and doesn't gate each other...\n\n\n\tsyntax in various loaders\n\t\n\t\tXML\n\t\tjson\n\t\tDIH entities\n\t\n\t\n\tchange simple update processors to know about nested docs (ie: field mutators)\n\tadd new options/processors for more complex update processor use cases (ie: we'll probably want SignatureUpdateProcessor to be able to do smething with the nested docs, etc...)\n\n\n\n...but the bottom line is all of that stuff \u2013 even the XML syntax \u2013 is really secondary to understanding the right way to deal with it in the internal APIs, and in my opinion that's modeling as a true hierarchy in the SolrInputDocument class. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13294650",
            "date": "2012-06-13T20:46:01+0000",
            "content": "assuming that at the hight level of abstraction app deal with multiple levels of nesting with multiple relations: model has several SKUs/UPCs and several Discounts with regional and temporal attributes. \n\n\tI don't feel that this rich model is covered with single level parent-child well.\n\tDon't you want to provide two ways to deal with relation content: index time block join and traditional join/grouping with FK fields and denormalization?\n\tPK field is a blocker for transparent handling scoped docs by the current processors. i.e. I don't think it's mandatory to provide PK field for every child document (most time it's useless and redundant info)\n\tfield update processors can work wrong if the same field name is present in several scopes - name clash between different relations/scopes\n\twhy new api/property is necessary? is solrInputDoc.addField(\"skus\", new Object[]\n{sku1, sku2, sku3}\n) not enough?\n\n\n\nI propose the following design: \n\n\tthere is a *pre*processors chain which deal with scoped documents and flatten them - there should be two of them: block-join (bjq counterpart); denormalizer (grouping counterpart); fk-copier for query-time join;\n\tupdate processors can handle AddUpdateCommand and AddBlockCommand as well (kind of default loop behaviour can be supplied in abstract class)\n\tfor distributed processor AddBlockCommand should have PK - it's preprocessors' duty\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13294678",
            "date": "2012-06-13T21:55:23+0000",
            "content": "I don't feel that this rich model is covered with single level parent-child well.\n\nwho said anything about a \"single level\" ? .. if SolrInputDocument can have a List<SolrInputDocument> of children, then those children can have other children, etc..\n\nPK field is a blocker for transparent handling scoped docs by the current processors. i.e. I don't think it's mandatory to provide PK field for every child document (most time it's useless and redundant info)\n\nAgreed, but i don't see how it's a blocker - if the the children hang off of the top most parent, then as long as that parent has a uniqueKey, all of the distributed stuff (and any update processors that care about uniqueKey) should be fine ... processors that want to be aware of sub-documents might have to worry about it, and we have to think through how deletes by id should work (so that children are automaticly removed and not inherited by the ajacent parent doc) but those are going to issues that need thought through/solved regardless of how we model the nested docs in the processor chain API.\n\nfield update processors can work wrong if the same field name is present in several scopes - name clash between different relations/scopes\n\na) that seems like an argument in favor of continuing to give the processors a single top level SolrInputDocument with all of it's children hanging off of it in a hierarchy, instead of adding a new AddBlockCommand that contains an flatened list of documents \u2013 because the processors won't have any way of knowing if/when to treat some docs differently.\n\nb) like other things i mentioned earlier, that really seems like a secondary concern \u2013 for many use cases either the fields names will be distinct, or can be made distinct for the purposes of using this feature.  Update processors can (eventually) be made smarter to know to only operate on certain documents by \"type\" but any solution like that that would work on a sequential list of documents like in your \"AddBlockCommand\" suggestion could also work on a true hierarchy of SOlrInputDocuments (where it would have the acutal hierarchy to help inform it's behavior)\n\nwhy new api/property is necessary? is solrInputDoc.addField(\"skus\", new Object[]{sku1, sku2, sku3}) not enough?\n\nAre you suggesting we model child documents as objects (SolrInputDocuments i guess?) in a special field? ... what if i put child documents in multiple fields? would that signify the different types of child?  how would solr model that in the (lucene) Documents when giving them to the InddexWriter?  How would solr know how to order the children in from multiple fields/lists when creating the block?  Wouldn't the \"type of child\" information be better living in the child documents itself?  (particularly since that \"type\" information needs to be in the child documents anyway so that the filter query for a BJQ can be specified.)  \n\nIt also seems like it would require code that wants to know what children exist in a document to do a lot of work to find that out (need to iterate ever field in the SolrInputDocument and do reflection to see if they are child-documents or not)\n\nAnother concern off the top of my head is that a lot of existing code (including any custom update processors people might have) would assume those child documents are multivaluved field values and would probably break \u2013 hence a new method on SolrInputDocument seems wiser (code that doens't know about may not do what you want, but at least it won't break it)\n\nthere is a *pre*processors chain which deal with scoped documents and flatten them - there should be two of them: block-join (bjq counterpart); denormalizer (grouping counterpart); fk-copier for query-time join;\n\ni don't really understand the need for this.  i'm at a complete loss as what you mean by \"fk-copier for query-time join\", but your suggestion for a new type of processor chain that can flatten/denormalize documents seems like it could easily be implemented using the existing UpdateProcessorChain code \u2013 assuming we let SolrInputDocuments have other SolrInputDocuments as children.  Couldn't you just write a new \"FlattenDocumentUpdateProcessor\" such that anytime it gets a SolrInputDocument with children, it creates new AddDocCommands containing those children (adding whatever flattened fields from the parent that it wants) and executes them?\n\nfor distributed processor AddBlockCommand should have PK - it's preprocessors' duty\n\nbut that doesn't address the issues yonik and i raised about all of the distributed update & transaction log code that already exists revolving around forwarding documents and recording their unique key.  What is the advantage of introducing a new AddBlockCommand that also has to have a unique key, and would need to be forwarded around atomically when we could just use the top level parent document with all of the existing distributed update code as is? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13295049",
            "date": "2012-06-14T14:16:55+0000",
            "content": "1) add \"List<SolrInputDocument> getChildDocuments()\" to SOlrInputDocument\n\nOr simply allow SolrInputDocument as a normal value and existing APIs could be used to add them.\nThis would also be slightly more powerful, allowing more than one child list for the same parent. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13295189",
            "date": "2012-06-14T17:48:16+0000",
            "content": "Or simply allow SolrInputDocument as a normal value and existing APIs could be used to add them.  This would also be slightly more powerful, allowing more than one child list for the same parent.\n\n\"allow SolrInputDocument as a normal value\" ... a normal value to what? where? ... are you describing he same thing as Mikhail in modeling \"children\" SolrInputDocuments as field values of the parent SOlrInputDOcument?\n\nIf so then i ask you the same questions i asked him above...\n\n\nwhy new api/property is necessary? is solrInputDoc.addField(\"skus\", new Object[]{sku1, sku2, sku3}) not enough?\n\nAre you suggesting we model child documents as objects (SolrInputDocuments i guess?) in a special field? ... what if i put child documents in multiple fields? would that signify the different types of child? how would solr model that in the (lucene) Documents when giving them to the InddexWriter? How would solr know how to order the children in from multiple fields/lists when creating the block? Wouldn't the \"type of child\" information be better living in the child documents itself? (particularly since that \"type\" information needs to be in the child documents anyway so that the filter query for a BJQ can be specified.)\n\nIt also seems like it would require code that wants to know what children exist in a document to do a lot of work to find that out (need to iterate ever field in the SolrInputDocument and do reflection to see if they are child-documents or not)\n\nAnother concern off the top of my head is that a lot of existing code (including any custom update processors people might have) would assume those child documents are multivaluved field values and would probably break \u2013 hence a new method on SolrInputDocument seems wiser (code that doens't know about may not do what you want, but at least it won't break it) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13295680",
            "date": "2012-06-15T14:12:27+0000",
            "content": "If so then i ask you the same questions i asked him above...\n\nWe don't necessarily need to have all the answers today (about how modeling in the index would work)... we just need to realize that we may want that extra power / generality in the future.  Don't think just in terms of BJQ - there will be other ways to use the fact that we know a sequence of related docs are contiguous.\n\nwhat if i put child documents in multiple fields?\n\nThis is what I think we should support to future-proof this.\n\nwould that signify the different types of child?\n\nYes.\n\nhow would solr model that in the (lucene) Documents when giving them to the InddexWriter?\n\nWe could index a \"type\" field based on the field name (among other possibilities including allowing the user to specify type).\n\nHow would solr know how to order the children in from multiple fields/lists when creating the block?\n\nIt hopefully shouldn't matter.  child_list1, child_list2, parent\n\nWouldn't the \"type of child\" information be better living in the child documents itself? (particularly since that \"type\" information needs to be in the child documents anyway so that the filter query for a BJQ can be specified.)\n\nYes, but it's not that clear to me how this is related to allowing documents as field values.\n\nIt also seems like it would require code that wants to know what children exist in a document to do a lot of work to find that out (need to iterate ever field in the SolrInputDocument and do reflection to see if they are child-documents or not)\n\nYeah, this is what bothers me the most.\nThe code complexity part shouldn't be an issue - that can be wrapped up into a utility class that visits all child documents.  But I don't particularly like the fact that we need to go through looking at every field value each time.  On the other hand, I also wouldn't like to duplicate the get/set API for child documents on SolrInputDocument.\n\nAnother concern off the top of my head is that a lot of existing code (including any custom update processors people might have) would assume those child documents are multivaluved field values and would probably break\n\nI don't think we should worry too much about custom update processors - it's (IMO) more of an expert-level thing, this is 4.0, and most document mutating processors I can think of probably also want to operate on child docs too.\n\nRelated: see SOLR-139\nI used a Map to represent an \"extended value\" for a field, and then go through and check for any of those to see if it's an \"update\" and what type it is.\nIt has the same downsides you describe above.  The upsides were that everything pretty much just worked w/o modification (update forwarding, javabin serialization, etc). "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13396270",
            "date": "2012-06-18T21:23:48+0000",
            "content": "new attach highlights:\n\n\tUpdReqProc.processAdd() become protected\n\tFlattenerUpdateProcessorFactory has been introduced.\n\tit transforms the given SolrInputDocument with nested subdocs into block of SIDs\n\ti.e. it transforms AddUpdCmd to AddBlockUpdCmd\n\tnested subdocs are placed as collection of SID fields. Hoss, excuse me. It's not really my point - we can later switch to getChildrenDocs(). it just seems to me easier for now. Let's polish it later.\n\tyou can see that Flattener is placed between Distributed and Log/Run. i.e. I addressed your guys point - make it compatible with distributed update magic.\n\tforgot to cover tree levels of nesting, my falut. it's trivial transitive closure via recursion. I'll switch to iteration further.\n\tXMLLoader supports <field name=\"skills\"><doc>..</doc><doc>..</doc><doc>..</doc><doc>..</doc></field> it's a nested docs.\n\tthere are tests, puzzling a little. test harness is harmed a little.\n\n\n\nPlease have a look, and raise your concerns! \nbtw it might be easier https://github.com/m-khl/solr-patches/commits/blockupdate\n\n\n\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13403367",
            "date": "2012-06-28T18:57:13+0000",
            "content": "Could somebody review the last patch? if introducing getChildrenDocs() is the only a blocker i'll move on it "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13415655",
            "date": "2012-07-16T21:23:16+0000",
            "content": "FWIW, I included this one to the parent issue SOLR-3076 patch. pls check https://issues.apache.org/jira/browse/SOLR-3076?focusedCommentId=13415644&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13415644 or grab https://github.com/m-khl/solr-patches/tree/6611   "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13437084",
            "date": "2012-08-17T21:27:38+0000",
            "content": "as well I merged this patch with SOLR-3076. further work will be done there.  "
        }
    ]
}