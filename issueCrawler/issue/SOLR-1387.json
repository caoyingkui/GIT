{
    "id": "SOLR-1387",
    "title": "Add more search options for filtering field facets.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently for filtering the facets, we have to use prefix (which use String.startsWith() in java). \nWe can add some parameters like\n\n\tfacet.iPrefix : this would act like case-insensitive search. (or --->  facet.prefix=a&facet.caseinsense=on)\n\tfacet.regex : this is pure regular expression search (which obviously would be expensive if issued).\n\n\n\nMoreover, allowing multiple filtering for same field would be great like\nfacet.prefix=a OR facet.prefix=A ... sth like this.\n\nAll above concepts could be equally applicable to TermsComponent.",
    "attachments": {
        "SOLR-1387-contains.patch": "https://issues.apache.org/jira/secure/attachment/12723888/SOLR-1387-contains.patch",
        "SOLR-1387.patch": "https://issues.apache.org/jira/secure/attachment/12680789/SOLR-1387.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Avlesh Singh",
            "id": "comment-12748061",
            "date": "2009-08-26T18:15:43+0000",
            "content": "\nfacet.iPrefix : this would act like case-insensitive search. (or ---> facet.prefix=a&facet.caseinsense=on)\nI don't see a reason as to why the case filter be there. you can always apply a lower case filter to you field while indexing and searching. \n\n\nfacet.regex : this is pure regular expression search (which obviously would be expensive if issued).\nYou mean wildcards. Right?\n\n\nMoreover, allowing multiple filtering for same field would be great like facet.prefix=a OR facet.prefix=A ... sth like this.\nThis has been recently discussed on the dev mailing list here - http://www.lucidimagination.com/search/document/f954dbb323746ed1/multiple_facet_prefix \nThe syntax that was agreed upon was local params in this manner - facet.field=\n{!prefix=foo prefix=bar}\nmyfield "
        },
        {
            "author": "Anil Khadka",
            "id": "comment-12748087",
            "date": "2009-08-26T19:01:37+0000",
            "content": "> I don't see a reason as to why the case filter be there. you can always apply a lower case filter to you field while indexing and searching.\nsuppose i indexed a field called \"placename\" having name like California, Nevada, San Jose... \nIf I use LowerCaseFilterFactory it will be stored in lowered case and when retrieving as FACET (or TermsComponent) it is also in lowered case. --> (california, nevada, san jose)\nAnd this will mess thing up (at least for me). I know there are others who want this too.\n\n> You mean wildcards. Right?\nYes, it would be the first step towards it... [ again i don't mean A* or abc*.., i would rather want *a or a*bc]\n\n> This has been recently discussed on the dev mailing list here - http://www.lucidimagination.com/search/document/f954dbb323746ed1/multiple_facet_prefix\nThe syntax that was agreed upon was local params in this manner - facet.field=\n{!prefix=foo prefix=bar}\nmyfield\nYes this is what i'm talking about, having an option to get both the individual list and merge list for each query (here 'foo' and 'bar') would be better. "
        },
        {
            "author": "Anil Khadka",
            "id": "comment-12751032",
            "date": "2009-09-03T13:59:47+0000",
            "content": "I've come up with following code. Any suggestions?? \n[This is just a code snippet]\n\nExtension of SimpleFacet.java\n/*** SEARCHING ***/\n// HashSet is choosen to avoid duplicate entry\n    HashSet<String> termsDump = new HashSet<String>();\n      for (String term: terms ) { //<------ terms[] from FieldCache.DEFAULT ... StringIndex.loopup\n        if (term == null ) continue;\n        for (String p : iprefixList) { //<--- list of prefix to be search case insensitively.\n          // doing iprefix\n          if (term.toUpperCase().startsWith(p.toUpperCase())) { //<---- Is this the best way to do??\n            termsDump.add(term);\n          }\n        }\n        for (String re: regexList) { // <--- list of regular expression\n          if (term.matches(re)) {\n            //equivalent to Pattern.compile(re).matcher(term).matches()\n            termsDump.add(term);\n          }\n        }\n      }\n     // Just add the list of input terms without searching :)\n     termsDump.addAll(inputTermsList);\n      \n/*** COUNTING ***/ // <-- this counting method is different from regular prefix (finding spectrum in an array)\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> res = new NamedList();\n    Term t = new Term(field);\n    for (String term : termList) { // <---- termList = termsDump from above\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base); // <--- Do we loose performance on this??\n      res.add(term, count);\n    }\n    \n/*** SORTING ***/ // <-- regular CountPair<String,Integer> thing.\n    for (int i = 0, n= nList.size(); i <n; i++){\n          queue.add(new CountPair<String,Integer>(res.getName(i), res.getVal(i)));\n        }\n\n\n\nThe syntax would look like (localParams style) this:\n\n  &facet.field={!XFilter=on prefix=A,B,C iPrefix=a,b,c,d termsList=e,f,g,h regex=^a[a-z0-9]+g$,z*}field_name\n\n\nXFilter: i called this eXtended Filter for facet!! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12789506",
            "date": "2009-12-11T20:18:22+0000",
            "content": "linking issues so we ensure they are considered in conjunction "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872497",
            "date": "2010-05-27T22:06:35+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043761",
            "date": "2011-06-03T16:46:55+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106291",
            "date": "2011-09-16T14:50:25+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Nicholas Jakobsen",
            "id": "comment-13185307",
            "date": "2012-01-12T22:34:38+0000",
            "content": "I like the idea, as I haven't found any solutions to this problem that are compatible with Sunspot (ruby solr interface). Just looking at your code, you may want to move some of the loop invariant stuff out of the loops. e.g. the downcasing of prefixes is the same every iteration, but you downcase it each time through. Same goes for term.uppercase, you could move it out one loop as it doesn't change within the prefix loop.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234753",
            "date": "2012-03-21T18:09:11+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Joe Osowski",
            "id": "comment-13649261",
            "date": "2013-05-05T04:07:40+0000",
            "content": "Is there any way to advocate for this feature more?   "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13697473",
            "date": "2013-07-02T03:47:11+0000",
            "content": "Joe Osowski - vote for it if you haven't.\n\nIf I use LowerCaseFilterFactory it will be stored in lowered case and when retrieving as FACET (or TermsComponent) it is also in lowered case. --> (california, nevada, san jose)\n\nIs this really true? Won't the original string be preserved if stored=\"true\"?  Or is the indexed/lowercased value used?\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717177",
            "date": "2013-07-23T18:47:22+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Linas Ju\u0161kevi\u010dius",
            "id": "comment-13765901",
            "date": "2013-09-12T21:14:34+0000",
            "content": "I don't see a reason as to why the case filter be there. you can always apply a lower case filter to you field while indexing and searching.\n\nThe reason is very well explained in SolrFacetingOverview - faceting is performed on the indexed values and they are returned. I can't show lowercased values to my users.\n\nA use case - we facet a multivalued field after an \"fq\" and get thousands of values. The user gets an infinite scrollable list through the values but we also want to let him search. Ideally a search for \"states\" should match \"United States\" which is not supported for two reasons:\n\n\n\tterm is not at the beginning of the indexed string,\n\tterm and indexed string cases do not match thus prefix filter does not help.\n\n\n\nA wildcard search (*states*) would help a lot. Regexp may be better but less performant. Any other ideas? "
        },
        {
            "author": "Nicholas Jakobsen",
            "id": "comment-13938006",
            "date": "2014-03-17T16:41:12+0000",
            "content": "Linas Ju\u0161kevi\u010dius, we had the same problems as you describe, can't show users downcased results, \"prefix\" must match any word, not just anchored at the beginning of the token. What we ended up doing is encoding more information in the tokenized values than just the result. We included the downcased search term and the term to display, but delimited them with a tab, e.g. \"star wars Star Wars\". Then in our app we grabbed the last half and showed it to the user. As for getting a matching prefix on different words, e.g. \"wars\", we created multiple tokens where we chomped a word off each time. e.g. \"star wars Star Wars\", \"wars Star Wars\". Each has the same \"display portion\", but we now have full control over the \"matching portion\". "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971350",
            "date": "2014-04-16T12:57:51+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Tom Winch",
            "id": "comment-14206492",
            "date": "2014-11-11T14:45:55+0000",
            "content": "I've been looking at this issue from the use-case of autocompletion, and in this case it's very desirable to include completions from the middle of a word. I've developed a patch which adds the following faceting parameters:\n\nfacet.contains - similar to facet.prefix, but the string supplied may appear anywhere in the term\nfacet.contains.ignoreCase - a Boolean value; if true, the comparison is case insensitive\n\nThe implementation for facet.contains has been done for the enum, fc, fcs and grouped faceting methods. The memory usage and performance is likely to be as 'bad' as for the same query without the facet.contains restriction (you lose the advantage of sorted values that can be leveraged in facet.prefix).\n\nThe ignore-case is implemented in terms of UTF-8 case insensitivity so is also potentially computationally expensive. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14207873",
            "date": "2014-11-12T09:40:47+0000",
            "content": "This looks great.\n\nRather than using BytesRef.utf8ToString() in StringUtils.contains() (which can be expensive), can we use CharacterUtils.toLowerCase() instead? Have a look at LowercaseFilterFactory to see how that works.\n\nIt would be nice to make ignoreCase more general, rather than only applying to facet.contains, but I guess it won't really apply cleanly to things like facet.prefix. "
        },
        {
            "author": "Tom Winch",
            "id": "comment-14216072",
            "date": "2014-11-18T11:18:50+0000",
            "content": "As the name suggests, CharacterUtils works on a char[] whereas we have a BytesRef (essentially a byte[]). But I think CharacterUtils.toLowerCase() is doing essentially the same as I'm doing in StringHelper.contains() in that it converts using Unicode case mapping information (via Character.toLowerCase(int)).\n\nYes, sadly making ignoreCase more general would spoil the efficiency of facet.prefix so I thought safest to leave as a sub-parameter of facet.contains, which spoils that efficiency already. "
        },
        {
            "author": "Will Butler",
            "id": "comment-14266728",
            "date": "2015-01-06T20:47:01+0000",
            "content": "facet.contains would be great to have. Any general comments on the worst case performance? Does it approach the cost of reading all possible facet values for a field? "
        },
        {
            "author": "Tomjon",
            "id": "comment-14269497",
            "date": "2015-01-08T16:18:14+0000",
            "content": "Indeed, using facet.contains without facet.prefix means examining every value for a facet, and using ignoreCase in addition makes it even worse. "
        },
        {
            "author": "Will Butler",
            "id": "comment-14273648",
            "date": "2015-01-12T14:38:40+0000",
            "content": "Initial testing using this patch against the 5.x branch looks pretty promising. Using facet.contains and facet.contains.ignoreCase on a multi-value field with tens of millions of unique values in an index of roughly 100 million documents isn't super fast (~3s), but is usable. Our other attempted solution was to pull back all facet values for filtering in the client, but that caused the cluster to hang. Other than vote this issue up, is there anything else we can do to help move this issue along? "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14273653",
            "date": "2015-01-12T14:42:53+0000",
            "content": "I'll try and get it in for 5.0 (which is approaching rapidly). "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14381786",
            "date": "2015-03-26T12:22:51+0000",
            "content": "Commit 1669335 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1669335 ]\n\nSOLR-1387: Add facet.contains and facet.contains.ignoreCase "
        },
        {
            "author": "Tomjon",
            "id": "comment-14381790",
            "date": "2015-03-26T12:25:49+0000",
            "content": "Excellent, thanks for your work Will "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14381805",
            "date": "2015-03-26T12:38:24+0000",
            "content": "Commit 1669336 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1669336 ]\n\nSOLR-1387: Add facet.contains and facet.contains.ignoreCase "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14381892",
            "date": "2015-03-26T13:46:35+0000",
            "content": "Closing this for now - I have some ideas for extending faceting using Automata which would mean we could add support for filtering facets by arbitrary regexes, but that can go in a separate issue, I think. "
        },
        {
            "author": "Tom Winch",
            "id": "comment-14381919",
            "date": "2015-03-26T14:12:52+0000",
            "content": "Thanks Alan! "
        },
        {
            "author": "Anil Khadka",
            "id": "comment-14383209",
            "date": "2015-03-27T02:05:55+0000",
            "content": "Thanks for finally pushing it into the code.\nThe 'contain' and 'contains.IgnoreCase' will cover most of the use-cases.\nI remember during that time, the code I wrote performed just fine (not terrible) for regular expression case. But mostly it was used for auto-completion that didn't use regex and worked pretty good.\n\nDirectly using FSA (or FST), like in Lucene would be great for regex (and interesting project!)\n\nThanks again guys.  "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-14384060",
            "date": "2015-03-27T16:11:56+0000",
            "content": "I'm concerned about the StringHelper.contains that was added for this issue:\n\n\n\tIts signature implies it operates on BytesRef, but under the hood it secretly assumes the bytes are valid UTF-8 (only for the ignoreCase=true case)\n\n\n\n\n\tIt also secretly assumes Locale.ENGLISH for downcasing but the incoming UTF-8 bytes may not be English\n\n\n\n\n\tIt has potentially poor performance compared to known algos e.g. http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\n\n\n\nCan we move this method out for now, e.g. not put it in the shared StringHelper utility class? "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14384068",
            "date": "2015-03-27T16:16:50+0000",
            "content": "Can we move this method out for now, e.g. not put it in the shared StringHelper utility class?\n\nSure, we could move it into the Solr faceting code.  I'm away from a svn-accessible machine for 10 days or so now, I can do it when I get back or feel free to move it yourself. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14485019",
            "date": "2015-04-08T10:05:16+0000",
            "content": "Patch moving the 'contains' method to SimpleFacets, and refactoring it a bit to just use Strings.  I'll commit this later today. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-14485262",
            "date": "2015-04-08T13:58:30+0000",
            "content": "Thank you Alan Woodward\n\nBut the patch doesn't seem to actually remove the method from StringHelper?\n\nOr maybe you ran \"svn diff\" from inside solr subdir, so the patch is missing the lucene/ changes? "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14485266",
            "date": "2015-04-08T14:03:13+0000",
            "content": "Oops, yes, that's exactly what I did.  Here's the correct version... "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14485385",
            "date": "2015-04-08T15:28:15+0000",
            "content": "Commit 1672106 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1672106 ]\n\nSOLR-1387: Move contains() method to SimpleFacets "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14485447",
            "date": "2015-04-08T16:06:55+0000",
            "content": "Commit 1672112 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1672112 ]\n\nSOLR-1387: Move contains() method to SimpleFacets "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14485448",
            "date": "2015-04-08T16:07:04+0000",
            "content": "Commit 1672113 from Alan Woodward in branch 'dev/branches/lucene_solr_5_1'\n[ https://svn.apache.org/r1672113 ]\n\nSOLR-1387: Move contains() method to SimpleFacets "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14495290",
            "date": "2015-04-15T00:30:26+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}