{
    "id": "LUCENE-7262",
    "title": "Add back the \"estimate match count\" optimization",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Follow-up to my last message on LUCENE-7051: I removed this optimization a while ago because it made things a bit more complicated but did not seem to help with point queries. However the reason why it did not seem to help was that the benchmark only runs queries that match 25% of the dataset. This makes the run time completely dominated by calls to FixedBitSet.set so the call to FixedBitSet.cardinality() looks free. However with slightly sparser queries like the geo benchmark generates (dense enough to trigger the creation of a FixedBitSet but sparse enough so that FixedBitSet.set does not dominate the run time), one can notice speed-ups when this call is skipped.",
    "attachments": {
        "LUCENE-7262.patch": "https://issues.apache.org/jira/secure/attachment/12801264/LUCENE-7262.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15262392",
            "author": "Adrien Grand",
            "date": "2016-04-28T16:00:15+0000",
            "content": "Here is a patch. It adds back the optimization in a similar way ta what MatchingPoints does, and adds som assertions to AssertingPointsFormat to make sure that there are no more calls to add() than what grow() reserved. "
        },
        {
            "id": "comment-15262817",
            "author": "Robert Muir",
            "date": "2016-04-28T19:46:16+0000",
            "content": "So this means postings still calls cardinality()? Why wouldn't it do the same? I'm a bit concerned with each query tracking its own estimate (and having the formula/stats pulling etc duplicated everywhere). \n\nThis is why when looking at MatchingPoints, it pulls the stats it needs. but alternatively DocIDSetBuilder could take parameters of sumDocFreq, maxDoc, docCount and do this itself. Points would pass size() for sumDocFreq, its the equivalent there.\n\nIn other words, i see providing a good cost() as the responsibility of DocIDSetBuilder. The only thing impl-specific is how to get sumDocFreq and docCount (e.g. Terms.sumDocFreq/docCount vs PointValues.size/docCount). "
        },
        {
            "id": "comment-15262848",
            "author": "Adrien Grand",
            "date": "2016-04-28T19:57:52+0000",
            "content": "Good ideas. I added it as close as it was before LUCENE-7051 but I will give these ideas a try. "
        },
        {
            "id": "comment-15263029",
            "author": "Robert Muir",
            "date": "2016-04-28T21:18:24+0000",
            "content": "I think the problem at LUCENE-7051 time was, that points didnt have any statistics. Now they do, so i think our job is easier. "
        },
        {
            "id": "comment-15264139",
            "author": "Adrien Grand",
            "date": "2016-04-29T14:46:47+0000",
            "content": "Here is a new patch. It also uses statistics to figure out whether the int[] needs to remove duplicates in the sparse case. When I patch the LatLon queries to use DocIdSetBuilder instead of MatchingPoints and run the geo benchmark, I get the following QPS:\n\n\n\n\nbenchmark\nDocIdSetBuilder\nDocIdSetBuilder + patch\n\n\ndistance\n47.3\n48.7\n\n\npoly 5\n35.2\n35.6\n\n\n\n\n\nSo there is a noticeable speedup. "
        },
        {
            "id": "comment-15264150",
            "author": "Robert Muir",
            "date": "2016-04-29T14:52:36+0000",
            "content": "nice to remove that dedup a lot of the time too. "
        },
        {
            "id": "comment-15264162",
            "author": "David Smiley",
            "date": "2016-04-29T15:00:34+0000",
            "content": "+1 and nice testing.  I think you can use the new constructor accepting Terms for stats in more places (judging from a find-usages on DocIdSetBuilder). "
        },
        {
            "id": "comment-15266217",
            "author": "Adrien Grand",
            "date": "2016-05-02T08:18:13+0000",
            "content": "I updated the patch to cutover a bit more classes to the constructor that takes a Terms instance. Now all users of DocIdSetBuilder use the constructor that takes a Terms/PointValues instance except one case: TermsQuery in the case of multiple fields. I'll commit soon. "
        },
        {
            "id": "comment-15266616",
            "author": "ASF subversion and git services",
            "date": "2016-05-02T13:33:33+0000",
            "content": "Commit 4fa2b29b200b2a92157396af3f485d38a4954e7a in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4fa2b29 ]\n\nLUCENE-7262: Leverage index statistics to make DocIdSetBuilder more efficient. "
        },
        {
            "id": "comment-15266662",
            "author": "ASF subversion and git services",
            "date": "2016-05-02T14:16:08+0000",
            "content": "Commit e9f2ac0021e004593599706f4e2db1bd1f724248 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e9f2ac0 ]\n\nLUCENE-7262: Leverage index statistics to make DocIdSetBuilder more efficient. "
        },
        {
            "id": "comment-15267727",
            "author": "Steve Rowe",
            "date": "2016-05-02T23:29:40+0000",
            "content": "TestPointQueries failures reported on LUCENE-7269 appear to be related to this issue. "
        },
        {
            "id": "comment-15267967",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T02:39:42+0000",
            "content": "Commit 91153b9627d7bd9e17dcb4762ebbaf26bc3410f4 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=91153b9 ]\n\nLUCENE-7262: Fix NPE, this should lazy-init in start() "
        },
        {
            "id": "comment-15267972",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T02:44:01+0000",
            "content": "Commit 5b51479b69ec3c52e42c9b95418ee285080311f7 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5b51479 ]\n\nLUCENE-7262: Fix NPE, this should lazy-init in start()\n(cherry picked from commit 91153b9) "
        },
        {
            "id": "comment-15277157",
            "author": "Hoss Man",
            "date": "2016-05-09T22:07:23+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}