{
    "id": "SOLR-1782",
    "title": "stats.facet assumes FieldCache.StringIndex - fails horribly on multivalued fields",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "5.0"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "the StatsComponent assumes any field specified in the stats.facet param can be faceted using FieldCache.DEFAULT.getStringIndex.  This can cause problems with a variety of field types, but in the case of multivalued fields it can either cause erroneous false stats when the number of distinct values is small, or it can cause ArrayIndexOutOfBoundsException when the number of distinct values is greater then the number of documents.\n\u2014\nNew users interested in mixing stats & facets are encouraged to ignore the stats.facet param and instead combine stats.field with facet.pivot to achieve similar results more efficiently...\n\nhttps://cwiki.apache.org/confluence/display/solr/The+Stats+Component#TheStatsComponent-TheStatsComponentandFaceting",
    "attachments": {
        "SOLR-1782.patch": "https://issues.apache.org/jira/secure/attachment/12447500/SOLR-1782.patch",
        "index.rar": "https://issues.apache.org/jira/secure/attachment/12436336/index.rar",
        "SOLR-1782.solr-4.2.1.patch": "https://issues.apache.org/jira/secure/attachment/12654153/SOLR-1782.solr-4.2.1.patch",
        "SOLR-1782.test.patch": "https://issues.apache.org/jira/secure/attachment/12444168/SOLR-1782.test.patch",
        "SOLR-1782.2013-01-07.patch": "https://issues.apache.org/jira/secure/attachment/12563630/SOLR-1782.2013-01-07.patch",
        "SOLR-1782.2.patch": "https://issues.apache.org/jira/secure/attachment/12447630/SOLR-1782.2.patch",
        "SOLR-1782.2013-04-10.patch": "https://issues.apache.org/jira/secure/attachment/12578232/SOLR-1782.2013-04-10.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Gerald DeConto",
            "id": "comment-12835821",
            "date": "2010-02-19T17:04:01+0000",
            "content": "file contains readme.txt, sample data, solrconfig.xml, data-config.xml and schema.xml\n\naddtional info (ie results from running test can be found at http://old.nabble.com/getting-unexpected-statscomponent-values-td27599248.html "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12865973",
            "date": "2010-05-10T23:10:29+0000",
            "content": "I'm pokign around the attached RAR file now, and two interesting things jump out at me:\n\nFirst: StatsFacetField is multivalied.  every doc has exactly 3 values, but on some cases the value is repeated...\n\n\n<doc>\n <arr name=\"StatsFacetField\">\n  <int>2</int>\n  <int>3</int>\n  <int>1</int>\n </arr>\n <int name=\"ValueOfOneField\">1</int>\n <int name=\"id\">7631</int>\n</doc>\n<doc>\n <arr name=\"StatsFacetField\">\n  <int>3</int>\n  <int>3</int>\n  <int>1</int>\n </arr>\n <int name=\"ValueOfOneField\">1</int>\n <int name=\"id\">7453</int>\n</doc>\n\n\n\nSecond: the stat facet counts produced by this sample index have the (conicidental?) property that the sum of all the \"counts\" from each value of the StatsFacetField equals the total number of docs \u2013 which should not be the case since each doc contains multiple values.  (Note: the output from Gerald's initial email didn't demonstrate this, but the index included in the rar file is inconsistent with his initial email in other ways, so i believe this one was generated with slightly differnet configs)\n\nI think this suggests that the the bug in StatsComponent is triggered when the stats.facet field refers to a multivalued field.  I'm going to see if i can create a simple JUnit test.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12866009",
            "date": "2010-05-11T00:58:04+0000",
            "content": "Updating issue summary and description based on the root cause "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12866010",
            "date": "2010-05-11T01:02:30+0000",
            "content": "patch containing two new test methods that demonstrate this bug \u2013 one creates an index with a single document (and two values) to trigger the AIOOBE, the second adds many docs with a small number of distinct values, and demonstrates the incorrect stats facet values.\n\nOff the top of my head i don't know a simple way to fix this ... if no one else has any better suggestions, we should consider adding Schema based error checking to fail fast if the user attempts to facet on fields which are not single valued string fields \u2013 some other field types might work, but i'd rather fail more often then we have to then return bogus statistics.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12866012",
            "date": "2010-05-11T01:09:46+0000",
            "content": "Crux of the problem is in FieldFacetStats's dependency on using StringIndex ... at least two different code paths use this in the same (broken) way: Stats.Component.getFieldCacheStats and UnInvertedField.getStats "
        },
        {
            "author": "Wojtek Piaseczny",
            "id": "comment-12877865",
            "date": "2010-06-11T17:24:14+0000",
            "content": "I'd like to contribute to solving this issue, but I'm not sure if I'm going down the right path. Here are the possible solutions I see:\n\n1. Use UninvertedField for multi-valued facets in the StatsComponent. This would require a new method in UninvertedField: something like getValues(int docID). The problem with this is the big terms collection in UninvertedField... getting all values for a single document via big terms is expensive (have to iterate entire collection). \n2. Get facet values for the result set in the StatsComponent, then iterate through each value and get a new document set for each value, then iterate through each document in this new set and calculate stats. Sounds expensive.\n\nAre there better options?  "
        },
        {
            "author": "Wojtek Piaseczny",
            "id": "comment-12880348",
            "date": "2010-06-18T22:34:45+0000",
            "content": "Added getValues method to UninvertedField class. Might be very slow with many big terms (I happen to have 0 big terms on the fields I'll be using this on).\n\nBoth code paths that use StringIndex now use UnivertedField is multi-valued fields are detected. "
        },
        {
            "author": "Wojtek Piaseczny",
            "id": "comment-12880964",
            "date": "2010-06-22T00:14:42+0000",
            "content": "First patch was unusably slow with ~1M documents. New patch uses both UninvertedField and FieldCache.DocTermsIndex for multi-valued facet fields in StatsComponent. getValues renamed to getTermNumbers to reflect the change. "
        },
        {
            "author": "Anarkii",
            "id": "comment-12964706",
            "date": "2010-11-29T11:46:04+0000",
            "content": "Is there any update on this issue? Or if Wojtek's fix would be merged into the trunk? I'm trying to do a stats.facet on a field which contains multiple tokens, and have the same issue resulting out of getStringIndex. Say, I'm doing a stats.facet on a field \"tags\", which can contain multiple tokens...only one of the tags is being considered. "
        },
        {
            "author": "biofox",
            "id": "comment-12976902",
            "date": "2011-01-03T19:34:18+0000",
            "content": "Wojtek and Hoss Man - are you planning to release the changes as part of 1.4.2  or 4.0 ?\n "
        },
        {
            "author": "biofox",
            "id": "comment-12977359",
            "date": "2011-01-04T17:23:44+0000",
            "content": "I have applied patch SOLR-1782.2.patch to the latest trunk version (revision 1055053). I have loaded test data and compared the stats results with 1.4.1 release version results. The new stat facet counts and sum match the expected counts for multi-valued fields.  "
        },
        {
            "author": "David Christianson",
            "id": "comment-13019600",
            "date": "2011-04-13T23:31:54+0000",
            "content": "Is a fix anticipated? Already in the next version which we should just download? Other issues?\n\nWe are currently running 1.4.1 (955469) and are seeing this problem for some applications. The patch given does not apply out of the box to 1.4.1 (955469) without a few tweaks but so far appears to work. "
        },
        {
            "author": "David Christianson",
            "id": "comment-13533566",
            "date": "2012-12-16T23:38:24+0000",
            "content": "I have a real need for this functionality and had been using the supplied patch on older distributions. However in more recent builds several classes changed and there was an exception added if you tried to write a stats query using a multivalued facet. So I've taken the code in the original patch and updated it for Solr 4.0, removing the exception and adding a couple of unit tests. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13533572",
            "date": "2012-12-17T00:00:21+0000",
            "content": "Assigned to hossman in case he has forgotten this issue. He can unassign himself if he doesnt have time. "
        },
        {
            "author": "David Christianson",
            "id": "comment-13546293",
            "date": "2013-01-07T21:39:48+0000",
            "content": "New patch, found bug using Solr 4 patch in practice where calculating statistics over missing values caused an exception to be thrown. Expanded test case to cover this + also check multiple value types. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13564965",
            "date": "2013-01-29T01:31:28+0000",
            "content": "Wojtek & David...\n\nI spent some time today trying to look over the latest patch ( SOLR-1782.2013-01-07.patch ) and had some trouble wrapping my head arround it.\n\nIn particular i think the crux of my confusion stems from this comment from Wojtek...\n\nNew patch uses both UninvertedField and FieldCache.DocTermsIndex for multi-valued facet fields\n\n...which doens't really make sense to me.  \n\nIf a field is multivalued, then (unless i'm missunderstanding something) a DocTermsIndex won't make sense for that field at all.  At best it's wasted RAM to build up the DocTermsIndex when UnInvertedField is going to be used instead \u2013 but in this patch, as part of the \"if (null == uif)\" sprinkled throughout FieldFacetStats, it looks like term ordinals from the UnInvertedField.getTermNumbers method are then being used to look Term values from the DocTermsIndex ... i don't understand that at all.\n\nHopefully this is just a minor bug in the patch, and the call to \"si.lookup\" in the UIF block(s) of FieldFacetStats.facet & FieldFacetStats.facetTermNum are ment to be calls to some similar method in UnivertedField, but it's not entirely clear.\n\nIf that is the case, then it suggests to me that a better way to organize this code so that it's more clear what's going on (and to save all that wasted RAM used by the DocTermsIndex when going down the UIF code path!) would be to refactor an abstract base class out of FieldFacetStats defining the API contract and then have two concrete impls: one using DocTermsIndex provided in teh constructor, and one using an UnInvertedField provided in it's constructor.\n\nI'm also a little perplexed by the \"UnInvertedField.getStats\" method which is modified in this patch, but seemingly only as an aside so it will still compile because of the new param added to the FieldFacetStats constructor.  At a glance, I'm not clear on wether this method is even used anywhere, but that makes it seem all the more suspicious: it appears that a lot of the logic in getTermNumbers was cut/paste from this method \u2013 should these methods be refactored to eliminate that duplication? can UIF.getStats just be deprecated & removed?  Would be make more sense instead of adding some of these new methods to just \"fix\" UIF.getStats so that it recognizes when another UIF instance is needed for the facet field(s)?\n\nLastly: I noticed that while the patch did include tests, it didn't include the original tests I wrote when this issue was filled (see SOLR-1782.test.patch).  When I attempted to merge those tests in, I got a failure in testMicroStatsWithMultiValuedFacetField (even after i fixed the obvious case sensitivity problem in the original test) \u2013 hopefully this is just a demonstration of the problem i mentioned above about mixing ords from the DocTermsIndex and the UnInvertedField, but it may be a symptom of a diff problem.\n\nunified patch will all tests attached\n "
        },
        {
            "author": "David Christianson",
            "id": "comment-13565220",
            "date": "2013-01-29T09:34:07+0000",
            "content": "Thanks for looking at this! I'll look at the tests in the unified patch.\n\nTwo questions, then my understanding of what's going on in the patch.\n\n 1. Pure ignorance of the codebase prevents me from understanding perf issues with these objects - just that UnInvertedField got used for statistics collection with multivalued facets - how is it possible to get the term values without the DocTermsIndex?\n 2. Should DocTermsIndex be used at all?\n\nMy understanding:\n\nI can see there is definitely a code dup issue (or at least a lot of branching logic) not only in the patch but in the current code.\n\n 1. the original StatsComponent used a DocTermsIndex to look up facet values to be accumulated using DTI.getOrd().\n 2. In the patch UnInvertedField is used in FieldFacetStats to deal with multivalued facet fields, which mainly included modifying UnInvertedField to provide the getTermNumbers method that listed term ordinals. As an aside, I don't understand whether this is reasonable to do or not, why there wouldn't already be a way to get at all the values of a field.\n 3. Within FieldFacetStats the if (null == uif) is added. The code on both branches is more or less duplicate, only the multivalued branch (null != uif) iterates over multiple ordinals using the UnInverted Field whereas the single valued branch only reads one ordingal. But both branches use DocTermsIndex. \n 4. UIF.getStats is used in getStatsInfo in the current code base. It looks to me it is specifically used when the value being computed is multivalued and in the patch gets modified to handle the case of a multivalued facet field accumulating stats on a multivalued value field.\n 5. There is another facet accumulation method in FieldFacetStats used in the current code base when accumulating stats over multivalued value fields. This winds up getting the if (null == uif) treatment as well. So code duplication is multiplied\n 6. Even though there is this code dup in the current code base wrt UIF.getStats it still seems like FieldFacetStats is the core - maybe there's a way to fix it all?\n "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13629035",
            "date": "2013-04-11T15:51:08+0000",
            "content": "Attached is a patch that I believe fixes the issues found in the latest unified patch from (2013.01.28)... The previous patch was interchangably using term nums from an UninvertedField with a FieldCache... this failed in cases where there were multiple values in the facet field.\n\nI updated to use uif.lookupTerm() and a TermsEnum generated from uif.getOrdTermsEnum()..\n\nAll the tests now pass, but I am uncertain of the performance/memory footprint of the GetOrdTermsEnum() and/or whether it would be possible to hold onto this enum for longer than I am now. "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13653039",
            "date": "2013-05-09T16:19:05+0000",
            "content": "Hi,\n\nI tried to apply the latest patch to 4.2.1 and it doesn't seem to be compatible.\nDo you plan a patch compatible to this version?\n\nThanks. "
        },
        {
            "author": "Nelson Gonzalez Gonzalez",
            "id": "comment-13816993",
            "date": "2013-11-08T04:47:26+0000",
            "content": "Hi,\n\nIs there any patch to apply on solr version 4.4 or 4.5 to fix this issue? "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13826558",
            "date": "2013-11-19T14:53:11+0000",
            "content": "As much of this functionality is replaced by the Analytics component I don't intent to work much more on this patch.  "
        },
        {
            "author": "Patanachai Tangchaisin",
            "id": "comment-14052731",
            "date": "2014-07-04T23:57:48+0000",
            "content": "Here is patch for Solr 4.2.1. I copied a test cases from latest previous patch (SOLR-1782.2013-04-10.patch).\nInstead of modify UnInvertedField.java (it is too complex to modify), I used DocValues to get a value from a field to aggregate stats.  \n\nWe've used it in our production for some time now since we stuck on version 4.2.1 due to some of our requirement. However, our fields that need stats.facet is DocValues field. So, I hope the previous patch test case cover a case where multi-value field is not a DocValue. "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-14267497",
            "date": "2015-01-07T10:39:45+0000",
            "content": "Hi Patanachai,\n\nI am using your patch for stats.facet for multivalue fields above Solr 4.8.\nIt works perfectly for most cases.\nI found a case in which it doesn't work. When the field we facet on is a numeric field but is not multivalue.\nThe code fails on:\nif (topLevelSortedValues == null) {\n        topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);\nand this the exception I get:\n(SolrException.java:120) - null:java.lang.IllegalStateException: Type mismatch:time was indexed as NUMERIC\n\tat org.apache.lucene.search.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:1161)\n\tat org.apache.lucene.search.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:1145)\n\tat org.apache.solr.handler.component.FieldFacetStats.facetTermNum(FieldFacetStats.java:152)\n\tat org.apache.solr.request.UnInvertedField.getStats(UnInvertedField.java:587)\n\tat org.apache.solr.handler.component.SimpleStats.getStatsFields(StatsComponent.java:514)\n\tat org.apache.solr.handler.component.StatsComponent.process(StatsComponent.java:64)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:218)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1953)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:774)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1474)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:370)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:960)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1021)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n\tat org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n\tat org.eclipse.jetty.io.nio.SslConnection.handle(SslConnection.java:196)\n\tat org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:668)\n\tat org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n\tat java.lang.Thread.run(Thread.java:804)\n\nSo which field cache should I be using for numeric field?\n\nThanks.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14303461",
            "date": "2015-02-03T15:41:31+0000",
            "content": "I'm marking this as resolved:won't fix since SOLR-6351 has provided an alternative solution that works better and supports more options then stats.facet ever did. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332551",
            "date": "2015-02-23T05:00:37+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}