{
    "id": "SOLR-5065",
    "title": "ParseDoubleFieldUpdateProcessorFactory is unable to parse \"+\" in exponent",
    "details": {
        "affect_versions": "4.4",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The ParseDoubleFieldUpdateProcessorFactory is unable to parse the full syntax of Java/JSON scientific notation. Parse fails for \"4.5E+10\", but does succeed for \"4.5E10\" and \"4.5E-10\".\n\nUsing the schema and config from example-schemaless, I added this data:\n\n\n  curl \"http://localhost:8983/solr/update?commit=true\" \\\n  -H 'Content-type:application/json' -d '\n  [{\"id\": \"doc-1\",\n    \"a1\": \"Hello World\",\n    \"a2\": 123,\n    \"a3\": 123.0,\n    \"a4\": 1.23,\n    \"a5\": 4.5E+10,\n    \"a6\": \"123\",\n    \"a7\": true,\n    \"a8\": false,\n    \"a9\": \"true\",\n    \"a10\": \"2013-07-22\",\n    \"a11\": 4.5E10,\n    \"a12\": 4.5E-10,\n    \"a13\": \"4.5E+10\",\n    \"a14\": \"4.5E10\",\n    \"a15\": \"4.5E-10\"}]'\n\n\n\nA query returns:\n\n  <doc>\n    <str name=\"id\">doc-1</str>\n    <arr name=\"a1\">\n      <str>Hello World</str>\n    </arr>\n    <arr name=\"a2\">\n      <long>123</long>\n    </arr>\n    <arr name=\"a3\">\n      <double>123.0</double>\n    </arr>\n    <arr name=\"a4\">\n      <double>1.23</double>\n    </arr>\n    <arr name=\"a5\">\n      <double>4.5E10</double>\n    </arr>\n    <arr name=\"a6\">\n      <long>123</long>\n    </arr>\n    <arr name=\"a7\">\n      <bool>true</bool>\n    </arr>\n    <arr name=\"a8\">\n      <bool>false</bool>\n    </arr>\n    <arr name=\"a9\">\n      <bool>true</bool>\n    </arr>\n    <arr name=\"a10\">\n      <date>2013-07-22T00:00:00Z</date>\n    </arr>\n    <arr name=\"a11\">\n      <double>4.5E10</double>\n    </arr>\n    <arr name=\"a12\">\n      <double>4.5E-10</double>\n    </arr>\n    <arr name=\"a13\">\n      <str>4.5E+10</str>\n    </arr>\n    <arr name=\"a14\">\n      <double>4.5E10</double>\n    </arr>\n    <arr name=\"a15\">\n      <double>4.5E-10</double>\n    </arr>\n    <long name=\"_version_\">1441308941516537856</long></doc>\n\n\n\nThe input value of a13 was the same as a5, but was treated as a string, rather than parsed as a double. So, JSON/Java was able to parse \"4.5E+10\", but this update processor was not.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13716148",
            "date": "2013-07-23T06:34:40+0000",
            "content": "The \"programming\" parser of Double.parseDouble is different than the locale-sensitive stuff in NumberFormat... it will parse your number there, as well as hex formats and other things like Infinity, and I think won't throw exception if the value ends with d or f.\n\nalternatively, there is also NumberFormat.getScientificInstance in ICU. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716194",
            "date": "2013-07-23T07:21:43+0000",
            "content": "Another alternative: apply a regex in front of the NumberFormat parser to strip out the (superfluous, obvi) plus sign: \n\ns/E\\+(\\d+)$/E$1/\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13717835",
            "date": "2013-07-24T00:45:33+0000",
            "content": "would it be worthwhile to add a \"java-mode\" init param to all of the Parse[NumberClass]FieldUpdateProcessorFactories that was mutually exclusive to the \"locale\" and generated UpdateProcessors that used the appropriate NumberClass.valueOf(String) instead of a NumberFormat?\n\nAnd assuming that would be worthwhile ... would it also make sense to change the default behavior of <processor class=\"solr.ParseDoubleFieldUpdateProcessorFactory\" /> from assuming locale=\"ROOT\" to java-mode=\"true\" ? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13718025",
            "date": "2013-07-24T06:00:54+0000",
            "content": "would it be worthwhile to add a \"java-mode\" init param\n\nI guess by \"java-mode\" you mean \"supporting the same set of numeric expressions as the Java programming language\"?  Seems like a weirdly narrow (though accurate) label.  It makes me think: will most consumers of this functionality care about conformity with the Java language spec?  (I kinda doubt it.)\n\nMaybe the init param could be named \"provider\" or \"parser\", with supported values \"Number.valueOf\" and \"NumberFormat\"?  That would allow for future extensibility, perhaps to include the ICU implementation (which looks to me like a more evolved version of Java's NumberFormat stuff).\n\nwould it also make sense to change the default behavior of <processor class=\"solr.ParseDoubleFieldUpdateProcessorFactory\" /> from assuming locale=\"ROOT\" to java-mode=\"true\" ?\n\nOne way to think about this: is it more likely that users will have documents with numbers that have plus signs in the exponent than it is that they will have documents with numbers that have grouping separators, e.g. \"10,123\"?\n\nAll that said, I still think the plus-sign-stripping regex would fix the immediate problem without making the implementations more complicated. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13718379",
            "date": "2013-07-24T13:54:53+0000",
            "content": "My main point was really that it was a shocking surprise to find out that this processor did not accept a number that was acceptable to both Java and JSON as well as Solr itself for \"double\" and \"float\" fields. I would also note that Python and JavaScript allow optional plus for exponents as well. Many other languages as well.\n\nTo put it more simply, how would a user, reading the Javadoc for this processor have any F'in clue that a plus is not acceptable in an exponent?\n\nI'd be willing to chalk this up to a bug/limitation in NumberFormat - IFF the limitation gets documented for this processor. I read through the NumberFormat Javadoc as carefully as I could and could find no hint that it had such a limitation. I mean, I just assumed it would accept Java numbers. Obviously my assumption was wrong. Sigh.\n\nAnd my real bottom line is that if a double syntax is acceptable by Solr itself for a double/trie double field, it should be acceptable by this processor... or, that any limitation that is different from Solr double field should be clearly documented. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13718459",
            "date": "2013-07-24T15:10:32+0000",
            "content": "\nI'd be willing to chalk this up to a bug/limitation in NumberFormat\n\nThis isn't the case at all. see my previous comment on this issue.\n\nThe purpose of this class is entirely different, and the instance being used is not geared at parsing scientific or programming language formats, instead localized ones. This is clear from the javadocs. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13718511",
            "date": "2013-07-24T15:55:18+0000",
            "content": "I guess by \"java-mode\" you mean \"supporting the same set of numeric expressions as the Java programming language\"? Seems like a weirdly narrow (though accurate) label. \n\nit's a terrible name i agree \u2013 but i was thinking of it more from the standpoint of \"how the values will be parsed by the underlying Solr FieldType if this update processor wasn't used\"\n\nOne way to think about this: is it more likely that users will have documents with numbers that have plus signs in the exponent than it is that they will have documents with numbers that have grouping separators, e.g. \"10,123\"?\n\nBut in the later case, they should have to think about what \"locale\" they want to ues to deal with grouping separators, and make a conscious choice .... for the \"default\" behavior, using hte exact same parsing rules as the TrieField would if you didn't have the processor, or as what you'd get if you added the number via SolrJ \u2013 using either JavaBin or xml \u2013 seems like a better default (evidently) then Locale.ROOT.\n\nAnd my real bottom line is that if a double syntax is acceptable by Solr itself for a double/trie double field, it should be acceptable by this processor.\n\n+1 ... with the obvious caveat if the user explicitly configures a locale, we should use the parser of their choosen locale and the acceptable syntax obviously changes\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13718535",
            "date": "2013-07-24T16:21:24+0000",
            "content": "I'll suggest one simple hack:\n\n1. Attempt to parse using NumberFormat, to get full locale support.\n2. On failure, attempt to parse using Java number format. No locale support, but better than what happens now.\n\nAnother hack option:\n\n1. Attempt to parse using NumberFormat, to get full locale support.\n2. On failed parse, check for \"[eE]+\" in input value. If found, remove the plus and attempt parse with NumberFormat again.\n\nThat would support both Java/JSON/Solr numbers and locale as well (as long as the locale used e/E for exponent.) I think the locale-independent Java/JSON exponent patten check/fix should be fine, since it is really only trying to add Java/JSON/Solr number support, which is not locale-specific. "
        }
    ]
}