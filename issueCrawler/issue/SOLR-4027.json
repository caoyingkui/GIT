{
    "id": "SOLR-4027",
    "title": "Parse exception with geofilt in parens",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "In the sample index that comes with the distro, this works fine:\n\nhttp://localhost:8983/solr/collection1/select?q=*%3A*&fq=%7B!geofilt%20sfield%3Dstore%20pt%3D26%2C-80%20d%3D30%7D\n\nBut if you add parens around the geofilt it throws a ParseException:\n\nhttp://localhost:8983/solr/collection1/select?q=*%3A*&fq=%28%7B!geofilt%20sfield%3Dstore%20pt%3D26%2C-80%20d%3D30%7D%29\n\nThis is of course the simplest possible case. My particular query involves a much more complex query.\n\nHere's the stack trace:\n\n\nSEVERE: org.apache.solr.common.SolrException: org.apache.lucene.queryparser.clas\nsic.ParseException: Cannot parse '({!type=geofilt pt=26,-80 sfield=store d=30})'\n: Encountered \" <RANGE_GOOP> \"sfield=store \"\" at line 1, column 26.\nWas expecting one of:\n    \"]\" ...\n    \"}\" ...\n\n        at org.apache.solr.handler.component.QueryComponent.prepare(QueryCompone\nnt.java:148)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(Sea\nrchHandler.java:185)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandl\nerBase.java:129)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1699)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter\n.java:455)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilte\nr.java:276)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(Servlet\nHandler.java:1337)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java\n:484)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.j\nava:119)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.jav\na:524)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandl\ner.java:233)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandl\ner.java:1065)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:\n413)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandle\nr.java:192)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandle\nr.java:999)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.j\nava:117)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(Cont\nextHandlerCollection.java:250)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerColl\nection.java:149)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper\n.java:111)\n        at org.eclipse.jetty.server.Server.handle(Server.java:351)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(Abstrac\ntHttpConnection.java:454)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(Blockin\ngHttpConnection.java:47)\n        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(Abstra\nctHttpConnection.java:890)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.header\nComplete(AbstractHttpConnection.java:944)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:634)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)\n\n        at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpCo\nnnection.java:66)\n        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(So\ncketConnector.java:254)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPoo\nl.java:599)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool\n.java:534)\n        at java.lang.Thread.run(Unknown Source)\nCaused by: org.apache.lucene.queryparser.classic.ParseException: Cannot parse '(\n{!type=geofilt pt=26,-80 sfield=store d=30})': Encountered \" <RANGE_GOOP> \"sfiel\nd=store \"\" at line 1, column 26.\nWas expecting one of:\n    \"]\" ...\n    \"}\" ...\n\n        at org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryPars\nerBase.java:125)\n        at org.apache.solr.search.LuceneQParser.parse(LuceneQParserPlugin.java:7\n2)\n        at org.apache.solr.search.QParser.getQuery(QParser.java:143)\n        at org.apache.solr.handler.component.QueryComponent.prepare(QueryCompone\nnt.java:137)\n        ... 30 more\nCaused by: org.apache.lucene.queryparser.classic.ParseException: Encountered \" <\nRANGE_GOOP> \"sfield=store \"\" at line 1, column 26.\nWas expecting one of:\n    \"]\" ...\n    \"}\" ...\n\n        at org.apache.lucene.queryparser.classic.QueryParser.generateParseExcept\nion(QueryParser.java:708)\n        at org.apache.lucene.queryparser.classic.QueryParser.jj_consume_token(Qu\neryParser.java:590)\n        at org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.ja\nva:417)\n        at org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.\njava:257)\n        at org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.j\nava:181)\n        at org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.\njava:261)\n        at org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.j\nava:181)\n        at org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(Query\nParser.java:170)\n        at org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryPars\nerBase.java:120)\n        ... 33 more",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13495782",
            "date": "2012-11-13T00:22:19+0000",
            "content": "This is working as designed.\nCurrently \n{!foo}\n type queries cannot be directly embedded in lucene queries without the use of the magic _query_ field (and starting things off with a paren instead of {! makes the query syntax default to lucene). "
        }
    ]
}