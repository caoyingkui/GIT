{
    "id": "LUCENE-6959",
    "title": "Remove ToParentBlockJoinCollector",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Task"
    },
    "description": "This collector uses the getWeight() and getChildren() methods from the passed in Scorer, which are not always available (eg. disjunctions expose fake scorers) hence the need for a dedicated IndexSearcher (ToParentBlockJoinIndexSearcher). Given that this is the only collector in this case, I would like to remove it.",
    "attachments": {
        "LUCENE-6959.patch": "https://issues.apache.org/jira/secure/attachment/12849130/LUCENE-6959.patch",
        "LUCENE_6959.patch": "https://issues.apache.org/jira/secure/attachment/12849288/LUCENE_6959.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15082571",
            "author": "Mikhail Khludnev",
            "date": "2016-01-05T07:29:15+0000",
            "content": "Here is the recently arrived BlockJoinFacetCollector also calls getChildren(). It seems it works under SolrIndexSearcher, and it's not easy to use a dedicated searcher in Solr. "
        },
        {
            "id": "comment-15432496",
            "author": "Mikhail Khludnev",
            "date": "2016-08-23T09:36:57+0000",
            "content": "Note. SOLR-8643 removed BlockJoinFacetCollector which calls scorer getChildren() "
        },
        {
            "id": "comment-15836221",
            "author": "Adrien Grand",
            "date": "2017-01-24T15:19:26+0000",
            "content": "This collector is also blocking improvements to block-join queries since it prevents them from using two-phase iteration: LUCENE-7654. "
        },
        {
            "id": "comment-15836241",
            "author": "Adrien Grand",
            "date": "2017-01-24T15:46:00+0000",
            "content": "Here is a patch that removes it. The class was exprimental, so I think it is fine to remove in 6.x, but if there are concerns, I am ok with waiting for 7.0. "
        },
        {
            "id": "comment-15836779",
            "author": "Martijn van Groningen",
            "date": "2017-01-24T22:45:44+0000",
            "content": "+1 To remove this collector in the master and 6x branches.\n\nAs a follow up issue we can add back to ability to include child docs, but in a different way than is done today. A subsequent search after the main search, that selects child docs for specific parents. For example like is done here: https://github.com/elastic/elasticsearch/blob/master/core/src/main/java/org/elasticsearch/search/fetch/subphase/InnerHitsContext.java#L160 "
        },
        {
            "id": "comment-15837606",
            "author": "Michael McCandless",
            "date": "2017-01-25T11:49:27+0000",
            "content": "I agree it's messy that one must use a special IndexSearcher to use this collector, and that it's overly invasive that it needs access to child scorers, and we should find a better way.\n\nThis collector enables you to get the matching child hits when running a joined search against child hits up to parent documents.  This is very important for people \"joining up\" with document blocks, e.g. I use this in http://jirasearch.mikemccandless.com, where child documents are each jira comment, and parent documents are the whole jira issue.\n\nI'd like to understand a bit better how exactly we can re-implement this functionality once we remove the collector.  That ES query class seems to be created for each parent doc that made the top N hits, right?  And then you search with that query, which is very quick since it will hone in on just the children of that one parent, and build up your child hits that way ... I think this is indeed a better approach!\n\nIt's sort of weird to remove this class without first making the cleaner implementation available, but since neither Solr nor ES use it, I think it's OK (and it is experimental).  Can we at least open an issue to add the cleaner option?  I can try to tackle it, certainly when I next upgrade jirasearch   Thanks, +1 to remove in 6.x and 7.0. "
        },
        {
            "id": "comment-15837714",
            "author": "Martijn van Groningen",
            "date": "2017-01-25T13:18:57+0000",
            "content": "I've modified Adrien's patch and ported the ES query mentioned in my previous comment to Lucene join module.\n\nI'd like to understand a bit better how exactly we can re-implement this functionality once we remove the collector. That ES query class seems to be created for each parent doc that made the top N hits, right?\n\nYes, that is what it is doing. "
        },
        {
            "id": "comment-15838173",
            "author": "Michael McCandless",
            "date": "2017-01-25T17:21:10+0000",
            "content": "Oooh, thank you Martijn van Groningen!  I'll review the patch... "
        },
        {
            "id": "comment-15838793",
            "author": "Michael McCandless",
            "date": "2017-01-25T23:24:03+0000",
            "content": "Thanks Martijn van Groningen.\n\nI think it's dangerous that we hold onto a LeafReader in the new ParentChildrenBlockJoinQuery?\n\nCan we maybe change the new query to instead hold the parent's docID in the top-level reader's space, and then in the scorer method, check the incoming reader context to see if this is the segment that holds the parent?  This would also simplify usage, so users wouldn't have to create their own weights?  Then I think you don't need the LeafReader reference.\n\nAlso, the TestBlockJoin tests got a little over decimated I think   Can we restore at least some of the places that were verifying children?  Or maybe we could make a simple sugar API that returns TopGroups again, and then we wouldn't need to change the tests (except to switch to this sugar API)? "
        },
        {
            "id": "comment-15838956",
            "author": "Adrien Grand",
            "date": "2017-01-26T01:09:58+0000",
            "content": "I think I'm the one responsible for the decimated tests. Agreed it would be nice to restore them using an API that is able to compute top groups. "
        },
        {
            "id": "comment-15839408",
            "author": "Martijn van Groningen",
            "date": "2017-01-26T08:13:56+0000",
            "content": "Can we maybe change the new query to instead hold the parent's docID in the top-level reader's space, and then in the scorer method, check the incoming reader context to see if this is the segment that holds the parent? This would also simplify usage, so users wouldn't have to create their own weights? Then I think you don't need the LeafReader reference.\n\n+1 That is much better. "
        },
        {
            "id": "comment-15839426",
            "author": "Martijn van Groningen",
            "date": "2017-01-26T08:45:31+0000",
            "content": "I've changed the ParentChildrenBlockJoinQuery query, so that it no longer requires to accept a LeafReader and it figures out by itself which leaf reader the parent doc is in. "
        },
        {
            "id": "comment-15839436",
            "author": "Martijn van Groningen",
            "date": "2017-01-26T09:00:39+0000",
            "content": "I wonder if we should continue using TopGroups in the TestBlockJoin test case? If we stop using it then we can remove the the dependency on the grouping module the join module has.\n\nThe `TopGroups` has logic for merging other groups, but in case for block join there should be no need for that as the parent and its children are always in the same Lucene index. That makes sense, because in grouping arbitrary document can belong to a group.\n\nMike, would just using a ScoreDoc with TopDocs be sufficient to represent a jira issue with comments in jirasearch? "
        },
        {
            "id": "comment-15839570",
            "author": "Michael McCandless",
            "date": "2017-01-26T11:10:20+0000",
            "content": "Mike, would just using a ScoreDoc with TopDocs be sufficient to represent a jira issue with comments in jirasearch?\n\nI think that's fine?  I agree it would be nice to remove the dependency.\n\nI'll have a look at the patch!  Thanks for iterating. "
        },
        {
            "id": "comment-15839575",
            "author": "Michael McCandless",
            "date": "2017-01-26T11:13:51+0000",
            "content": "The new ParentChildrenBlockJoinQuery looks great!  Much easier to use.\n\nDo we really need the origChildQuery anymore? "
        },
        {
            "id": "comment-15839635",
            "author": "Martijn van Groningen",
            "date": "2017-01-26T12:25:49+0000",
            "content": "Do we really need the origChildQuery anymore?\n\nIn case the query gets rewritten and if the query happens to get cached? "
        },
        {
            "id": "comment-15839694",
            "author": "Martijn van Groningen",
            "date": "2017-01-26T13:50:44+0000",
            "content": "I was wrong, `origChildQuery` can be removed as rewritten queries are used as cache key in query cache. "
        },
        {
            "id": "comment-15839887",
            "author": "Martijn van Groningen",
            "date": "2017-01-26T15:44:01+0000",
            "content": "Removed `origChildQuery ` field. "
        },
        {
            "id": "comment-15840277",
            "author": "Adrien Grand",
            "date": "2017-01-26T19:30:15+0000",
            "content": "I think the new query should take childQuery into account for equals/hashcode? This makes me wonder whether we really need to wrap the child query: we could just provide a query that matches all children for a given parent and then users could build conjunctions using BooleanQuery to decide what particular child documents should match? "
        },
        {
            "id": "comment-15840436",
            "author": "Adrien Grand",
            "date": "2017-01-26T20:54:19+0000",
            "content": "Actually scratch that last comment, that would probably make the feature too hard to use, I think a wrapper query like you propose is better. Some questions/comments:\n\n\tshould it take the childQuery into account for equals/hashcode?\n\tit looks buggy to me that we do not convert parentDocId to parentDocId-context.docBase in the scorer?\n\tyou use ConstantScoreWeight but then return a Scorer that actually scores, you should extend Weight directly instead.\n\n\n\n\n// If parentDocId == 0 then we a parent doc doesn't have child docs\n\n\nLet's remove the \"we\"?\n "
        },
        {
            "id": "comment-15842557",
            "author": "Martijn van Groningen",
            "date": "2017-01-27T10:54:30+0000",
            "content": "I've updated the patch. Thanks for reviewing!\n\nshould it take the childQuery into account for equals/hashcode?\n\nOops, I forgot to add that back when removing `origChildQuery `.\n\nit looks buggy to me that we do not convert parentDocId to parentDocId-context.docBase in the scorer?\n\nGood catch. I didn't catch this in the initially, but after running the provided test in the patch a 100 times it did fail, because the `parentDocId` wasn't converted.\n\nyou use ConstantScoreWeight but then return a Scorer that actually scores, you should extend Weight directly instead.\n\nGood point, I've changed that.\n\nLet's remove the \"we\"?\n\nDone. "
        },
        {
            "id": "comment-15842606",
            "author": "Michael McCandless",
            "date": "2017-01-27T11:42:38+0000",
            "content": "New patch looks great, except for the TestBlockJoin tests ... I can take a crack at putting back some of the child hit checking there, if you all haven't started on that yet? "
        },
        {
            "id": "comment-15842806",
            "author": "Martijn van Groningen",
            "date": "2017-01-27T12:55:36+0000",
            "content": "I can take a crack at putting back some of the child hit checking there, if you all haven't started on that yet?\n\nI can add that back. "
        },
        {
            "id": "comment-15842885",
            "author": "Michael McCandless",
            "date": "2017-01-27T13:43:41+0000",
            "content": "I can add that back.\n\nThanks Martijn van Groningen! "
        },
        {
            "id": "comment-15844093",
            "author": "Martijn van Groningen",
            "date": "2017-01-28T15:29:38+0000",
            "content": "Michael McCandless I added back the child hit checking in TestBlockJoin test suite. "
        },
        {
            "id": "comment-15844141",
            "author": "Adrien Grand",
            "date": "2017-01-28T18:06:20+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15844366",
            "author": "Michael McCandless",
            "date": "2017-01-29T11:41:14+0000",
            "content": "+1, thank you Martijn van Groningen! "
        },
        {
            "id": "comment-15844695",
            "author": "ASF subversion and git services",
            "date": "2017-01-29T21:44:36+0000",
            "content": "Commit 91a620793731ba1ae50d730df5381867bf2fdf3f in lucene-solr's branch refs/heads/branch_6x from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=91a6207 ]\n\nLUCENE-6959: Removed ToParentBlockJoinCollector in favour of ParentChildrenBlockJoinQuery, that can return the matching children documents per parent document.\nThis query should be executed for each matching parent document after the main query has been executed. "
        },
        {
            "id": "comment-15844696",
            "author": "ASF subversion and git services",
            "date": "2017-01-29T21:44:38+0000",
            "content": "Commit e327efb676e04f72c39e902f08c0d11497b4c57d in lucene-solr's branch refs/heads/master from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e327efb ]\n\nLUCENE-6959: Removed ToParentBlockJoinCollector in favour of ParentChildrenBlockJoinQuery, that can return the matching children documents per parent document.\nThis query should be executed for each matching parent document after the main query has been executed. "
        }
    ]
}