{
    "id": "SOLR-7199",
    "title": "core loading should succeed irrespective of errors in loading certain components",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "If a certain component has some error , the core fails to load completely. This was fine in standalone mode. We could always restart the node after making corrections. In SolrCloud, the collection is totally gone and there is no way to resurrect it using any commands . If the core is loaded , I can at least use config commands to correct those mistakes .\n\nIn short, Solr should try to make the best effort to make the core available with whatever components available.",
    "attachments": {
        "SOLR-7199.patch": "https://issues.apache.org/jira/secure/attachment/12704676/SOLR-7199.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-15T03:16:01+0000",
            "author": "Noble Paul",
            "content": "modified searchhandler ",
            "id": "comment-14362166"
        },
        {
            "date": "2015-03-15T18:11:57+0000",
            "author": "Noble Paul",
            "content": "Even if any component fails to load , the core loading will succeed , but the requests involving those components would fail ",
            "id": "comment-14362481"
        },
        {
            "date": "2015-03-16T16:53:21+0000",
            "author": "Hoss Man",
            "content": "\nI got 1 line into this patch and it already scares the shit out of me...\n\n\n-      assertTrue(hasInitException(\"QueryElevationComponent\"));\n+      LocalSolrQueryRequest req = lrf.makeRequest(\"qt\", \"/elevate\");\n+      try {\n+        h.query(req);\n+        fail(\"Error expected\");\n+      } catch (Exception e) {\n+        assertTrue(e.getMessage().contains(\"Error initializing plugin of type\"));\n+      }\n+\n\n\n\n...so now, instead of a broken configuration giving a clera & monitorable error, and the core preventing users from trying to do things while it's in a broken state, the only way to know that a handler isn't available is to hit it with a query and get a run time error from the request?\n\nso if i have a dozen handlers, i have to query each one with a real query to find out that they had an init error?  this is a terrible idea.\n\nSolr use to work this way, way way back in the day \u2013 and it was terrible.\nWe worked REALLY hard to put pandora back in the box with SOLR-179.  We should not go back down this road again.\n\nIn SolrCloud, the collection is totally gone and there is no way to resurrect it using any commands .\n\nthis is not true \u2013 in solr cloud, the user can fix the configs and do an entire collection reload.\n\n\nIf the core is loaded , I can at least use config commands to correct those mistakes .\n\nif an API broke the configs so that the core can't load and needs to be \"fixed\", then we should harden those APIs so that they can't break the configs \u2013 the API request itself should fail.  Alternatively: if there are other ways things can fail, but we want config APIs to be available to fix them, then those APIs should be (re)designed so that they can be used even if the core is down.\n\nIn short, Solr should try to make the best effort to make the core available with whatever components available. \n\nI strongly disagree \u2013 you are assuming you know what is \"best\" for all users when they have already said \"this is hte config i want to run\" \u2013 if Solr can't run the config they have said they want to run, then Solr should fail fast and hard.\n\nthe ONLY possible way i could remotely get on board with  an idea like this is if it wasn't the default behavior, and users had to go out of their way to say \"if this handler/component/plugin doesn't load, please be graceful and still startup the rest of my plugins\" ... and we already have a convention like this with lazy=\"true\" ... if you want to make more things support lazy=true as an option, that's a decent idea worth discussing, but i'm a huge -1 to this patch as written.\n ",
            "id": "comment-14363480"
        },
        {
            "date": "2015-03-16T18:21:31+0000",
            "author": "Mark Miller",
            "content": "On the face of it, this seems like a terrible idea. ",
            "id": "comment-14363647"
        },
        {
            "date": "2015-03-16T19:01:25+0000",
            "author": "Erick Erickson",
            "content": "-1 as well. \"fail early fail often\" is a good motto here. Now for any one of a number of errors I don't know anything's wrong until a query happens to hit. Which may not happen for hours/days/whatever. Now I have to go back to the logs and try to figure out what went wrong... which may have rolled over.\n\n I could deal with letting people specify they don't care whether a particular component loads or not, but I'm lukewarm to that as well for the most part. \n\nThis seems like a cure worse than the disease. Rather than have the core come up anyway, what about some kind of supervisory code that will come up independent of cores to handle this use-case (I admit I really haven't looked into the details though, possibly this is a nonsensical idea). ",
            "id": "comment-14363717"
        },
        {
            "date": "2015-03-16T19:08:03+0000",
            "author": "Noble Paul",
            "content": "OK , hold your horses. We discussed the problem and I'll put up a new description and proposed solution and why we need this ",
            "id": "comment-14363727"
        }
    ]
}