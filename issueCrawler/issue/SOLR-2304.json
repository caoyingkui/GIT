{
    "id": "SOLR-2304",
    "title": "MoreLikeThis: Apply field level boosts before query terms are selected",
    "details": {
        "affect_versions": "1.4.2",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "MoreLikeThis"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "MoreLikeThis provides the ability to set field level boosts to weight the importance of fields in selecting similar documents. Currently, in trunk, these field level boosts are applied after the query terms have been selected from the priority queue of interesting terms in MoreLIkeThis. This can give unexpected results when used in combination with mlt.maxqt to limit the number of query terms. For example, if you use fields fieldA and fieldB and boost them \"fieldA^0.5 fieldB^2.0\" with a maxqt parameter of 20, if the terms in fieldA have relatively higher tf-idf scores than fieldB, only 20 fieldA terms will be selected as the basis for the MoreLikeThis query... even if after boosting, there are terms in fieldB with a higher overall score. \n\nI encountered this while using document descriptive text and document tags (comedy, action, etc) as the basis for MoreLIkeThis. I wanted to boost the tags higher, however the less common document text terms were always selected as the query terms while the more common tag terms were eliminated by the maxqt parameter before their scores were boosted. \n\nI believe the code was originally written as it was so that the bulk of the work could be done in the MoreLikeThisHandler without modifying the MoreLikeThis class in the lucene project. Now that the projects are merged, I think this modification makes sense. I will be attaching a simple patch to trunk.",
    "attachments": {
        "SOLR-2304.patch": "https://issues.apache.org/jira/secure/attachment/12467231/SOLR-2304.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Mattozzi",
            "id": "comment-12976325",
            "date": "2010-12-31T18:39:50+0000",
            "content": "Patch to lucene trunk to apply field level boosts before query terms are selected in MoreLikeThis.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043828",
            "date": "2011-06-03T16:47:16+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106345",
            "date": "2011-09-16T14:50:41+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234630",
            "date": "2012-03-21T18:08:39+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717303",
            "date": "2013-07-23T18:47:48+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971056",
            "date": "2014-04-16T12:57:01+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Brian",
            "id": "comment-14085012",
            "date": "2014-08-04T18:12:03+0000",
            "content": "I'm not sure this should be changed - I think the current behavior is expected.  That is, \"qf\" with its dismax origins implies only query-time boosting - making it change which terms are selected I think would be more surprising and unexpected than it's current behavior.  I think that instead another parameter should be added giving the option of applying the field boosts prior to building the query as well.\n\nI.e., I think the following use case could be common.  We want to get interesting terms for building the MoreLikeThis query from across the whole document (across multiple fields) - we don't want terms showing up in specific fields to be weighted higher than others.  We then use these interesting terms to build a query.  However, at query time we do want to weight different fields more highly - which is what the qf parameter is used for in dismax - but using the same set of terms.  (I realize in this case this also would require changing how MoreLikeThis builds a query since it does not currently support cross-field queries but I wouldn't want this change to prevent that possibility).\n\n I think it would be better to allow keeping the old behavior by either:\n-Adding a single boolean parameter specifying whether or not to apply \"qf\" field boost prior to selecting terms as well\n-Creating a new parameter specifically for interesting term field boost\n--This arguably is easier to understand, plus provides the most flexibility, because then we could have different boosts for generating the terms and then using those terms in the query.  However it introduces greater complexity. "
        }
    ]
}