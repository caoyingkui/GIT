{
    "id": "LUCENE-1337",
    "title": "[PATCH] improve searching under high concurrancy",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.3.1",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "I was trying to load test my web server and kept running into a condition were the web server would become unresponsive even though the load was below one.  Turns out Lucene has synchronization blocks around reading the index.  It appears this was only necassary to synchronize access to a descriptor which contains a RandomAccessFile and information about the state of this file.  My solution was to use a pool of descriptors so that they could be reused on subsequent reads.  During periods of low contention only one or a few Descriptors will be created, but under heavy loads many Descriptors can be created to avoid synchronization.  After creating and applying my patch, I was able to triple my searching throughput and fully utilize the resources, the CPU's becoming the new bottleneck.   My patch modifies FSDirectory directly, but I'm not entirely sure that's the proper implementation.  I'd like to help resolve this synchronization issue for other lucene users, so please let me know how I can help.",
    "attachments": {
        "lucene.patch": "https://issues.apache.org/jira/secure/attachment/12386197/lucene.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-07-16T17:32:06+0000",
            "content": "This patch applies to version 2.3.1 ",
            "author": "Brian Gardner",
            "id": "comment-12614028"
        },
        {
            "date": "2008-07-16T17:37:29+0000",
            "content": "Thanks Brian, also see LUCENE-753 for more history and a bunch of options. ",
            "author": "Yonik Seeley",
            "id": "comment-12614031"
        },
        {
            "date": "2008-07-17T17:40:19+0000",
            "content": "Duplicate of LUCENE-753. ",
            "author": "Michael McCandless",
            "id": "comment-12614460"
        },
        {
            "date": "2008-07-17T18:13:17+0000",
            "content": "The problem is the same but the solution is not.  Do they each need separate patches listing more specifically how they solved the problem?  Each solution has pluses and minuses.  The NIOFSDirectory doesn't work on Windows.  DescriptorsFSDirectory will on many Lucene installations quickly max out the file descriptors.  \n\nI would like to see both committed to trunk.  MMapDirectory is in the trunk and it has limitations as well, mainly that (at least how I understand it) loads the all the files into ram.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12614475"
        },
        {
            "date": "2008-07-17T18:41:02+0000",
            "content": "Jason are you thinking of LUCENE-414 (NIOFSDirectory)? ",
            "author": "Michael McCandless",
            "id": "comment-12614483"
        },
        {
            "date": "2008-07-17T20:09:41+0000",
            "content": "Yonik checked in a modification of FSDirectory into LUCENE-753.  I took that code and made NIOFSDirectory which is standalone so that it can be committed.  It is checked into LUCENE-753 as lucene-753.patch.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12614519"
        },
        {
            "date": "2008-07-19T09:58:23+0000",
            "content": "Yonik checked in a modification of FSDirectory into LUCENE-753. I took that code and made NIOFSDirectory which is standalone so that it can be committed. It is checked into LUCENE-753 as lucene-753.patch. \n\nOK.  I think  it's a good idea to separately offer an FSDirectory implementation that uses positional reads (via FileChannel) to avoid synchronization.\n\nI'd also like to somehow make that implementation the default on those platforms (all except windows?) where there are clear concurrency gains.  Ie, maybe change FSDirectory.getDirectory to return NIOFSDirectory if it's not on windows, but also offer a getDirectory that takes the IMPL so you can force it to pick a different IMPL.  In general I think Lucene should default to good out of the box performance, ie, without requiring special knowledge/tuning on the user's part, so long as there's no difficult tradeoff.\n\nThough we probably should change the name to something less generic than \"nio\", though I can't think of an alternative offhand.\n\nBut one question: it looks like NIOFSIndexInput copies most of BufferedIndexInput source rather than subclassing \u2013 why was that?  Can we change that back to a subclass, perhaps opening up members of BufferedIndexInput a bit if necessary? ",
            "author": "Michael McCandless",
            "id": "comment-12614971"
        }
    ]
}