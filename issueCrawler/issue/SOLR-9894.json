{
    "id": "SOLR-9894",
    "title": "Tokenizer work randomly",
    "details": {
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.2.1",
        "status": "Reopened",
        "resolution": "Unresolved",
        "priority": "Critical"
    },
    "description": "my schema.xml has a fieldType as folow:\n<fieldType name=\"my_ik\" class=\"solr.TextField\">\n\t\t<analyzer type=\"index\">\n\t\t\t<tokenizer class=\"org.wltea.analyzer.lucene.IKTokenizerFactory\" useSmart=\"false\"/>\n\t\t\t\t<filter class=\"org.wltea.pinyin.solr5.PinyinTokenFilterFactory\" pinyinAll=\"true\" minTermLength=\"2\"/> \n\t\t\t\t<filter class=\"solr.LowerCaseFilterFactory\"/>\n\t\t\t</analyzer>\n\t\t<analyzer type=\"query\">\n\t\t\t<tokenizer class=\"org.wltea.analyzer.lucene.IKTokenizerFactory\" useSmart=\"true\"/>\n\t\t   <filter class=\"solr.LowerCaseFilterFactory\"/>\n\t\t</analyzer>\n\t</fieldType>\n\nAttention:\n  index tokenzier useSmart is false\n  query tokenzier useSmart is true\n\nBut when I send query request with parameter q ,\nthe query tokenziner sometimes useSmart equals true\nsometimes useSmart equal false.\nThat is so terrible!\nI guess the problem may be caught by tokenizer cache.\nwhen I query ,the tokenizer should use true as the useSmart's value,\nbut it had cache the wrong tokenizer result which created by indexWriter who use false as useSmart's value.",
    "attachments": {
        "step1.png": "https://issues.apache.org/jira/secure/attachment/12844747/step1.png",
        "step3.png": "https://issues.apache.org/jira/secure/attachment/12844749/step3.png",
        "step4.png": "https://issues.apache.org/jira/secure/attachment/12844750/step4.png",
        "step2.png": "https://issues.apache.org/jira/secure/attachment/12844748/step2.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-27T08:46:53+0000",
            "author": "Alexandre Rafalovitch",
            "content": "The tokenizers used are not part of the Lucene/Solr code base. They seem to come from https://github.com/EugenePig/ik-analyzer-solr5 . A bug report should be opened against that repository with a specific example.\n\nI would recommend being very clear on what example showcases the issue and perhaps even annotate and recompile the code to confirm this. It is unlikely to be something random, but might be a strange combination of factors that triggers whatever you are observing. ",
            "id": "comment-15779952"
        },
        {
            "date": "2016-12-27T11:30:55+0000",
            "author": "\u738b\u6d77\u6d9b",
            "content": "I add 4 attachments which show the case clearly.\nI made a lot of test about this problem and sure it caught by solr not by IKTokenizer.\nPlease check it again.\nVery Thankyou! ",
            "id": "comment-15780213"
        },
        {
            "date": "2016-12-27T11:32:14+0000",
            "author": "\u738b\u6d77\u6d9b",
            "content": "The issue have not be resolved. ",
            "id": "comment-15780217"
        },
        {
            "date": "2016-12-27T16:01:36+0000",
            "author": "Erick Erickson",
            "content": "If you think this should really be opened, you need to provide reasons why you think this is a Solr bug. The Solr devs are not responsible for someone else's code. In this case your complaint is about org.wltea.analyzer.lucene.IKTokenizerFactory. Which is not part of Solr so why do you think this should be recorded against Solr? ",
            "id": "comment-15780676"
        },
        {
            "date": "2016-12-27T16:35:35+0000",
            "author": "Steve Rowe",
            "content": "Hi \u738b\u6d77\u6d9b, please provide the schema definition for your xf_name field.\n\nIt looks to me like step2 and step4 should produce the same result, since they are the same query against the same collection with the same schema; however, the analysis results are different.\n\nHave you figured out how to make this happen?  For example, if you see step2, then index some docs, do you then see step4? ",
            "id": "comment-15780735"
        },
        {
            "date": "2016-12-27T20:47:33+0000",
            "author": "Alexandre Rafalovitch",
            "content": "The search does *not* happen against xf_name, it happens against default_search_field as the debug shows. So, the question is what is the type of the default_search_field. xf_name (parameter value for fl) is the name of the field to be return in the document list, not the field to search against. ",
            "id": "comment-15781229"
        },
        {
            "date": "2016-12-28T01:33:46+0000",
            "author": "\u738b\u6d77\u6d9b",
            "content": "The schema definition as fowlow\uff1a\n      <field name=\"xf_name\" type=\"my_ik\" indexed=\"true\" stored=\"true\" />\n      <field name=\"default_search_field\" type=\"my_ik\" indexed=\"true\" stored=\"false\" multiValued=\"true\" />\n      <copyField source=\"xf_name\" dest=\"default_search_field\" />\n      <fieldType name=\"my_ik\" class=\"solr.TextField\">\n\t\t<analyzer type=\"index\">\n\t\t\t<tokenizer class=\"org.wltea.analyzer.lucene.IKTokenizerFactory\" useSmart=\"false\"/>\n\t\t\t\t<filter class=\"org.wltea.pinyin.solr5.PinyinTokenFilterFactory\" pinyinAll=\"true\" minTermLength=\"2\"/> \n\t\t\t\t<filter class=\"solr.LowerCaseFilterFactory\"/>\n\t\t\t</analyzer>\n\t\t<analyzer type=\"query\">\n\t\t<tokenizer class=\"org.wltea.analyzer.lucene.IKTokenizerFactory\" useSmart=\"true\"/>\n\t\t   <filter class=\"solr.LowerCaseFilterFactory\"/>\n\t\t</analyzer>\n\t</fieldType> ",
            "id": "comment-15781748"
        },
        {
            "date": "2016-12-28T02:09:50+0000",
            "author": "\u738b\u6d77\u6d9b",
            "content": "I operate this 4 steps one by one. setp1 ---> step2 ---> step3 ---> step4.\n\nIt guess that the step1 made solr cache the tokenizer's index result not tokenizer's query result, \nso that step2 use tokenizer's index result but the query should use tokenzier's query result.\n\nwhen step1 then step2;   98%  possibility\nwhen step3 then step4;   98%  possibility ",
            "id": "comment-15781805"
        },
        {
            "date": "2016-12-30T01:24:19+0000",
            "author": "\u738b\u6d77\u6d9b",
            "content": "Does anyone can resolve this bug? I will very appreciate you, because this bug make my company's search result so bad bad bad... ",
            "id": "comment-15786574"
        },
        {
            "date": "2016-12-30T03:22:54+0000",
            "author": "Erick Erickson",
            "content": "We've mentioned several times that this involves a tokenizer that is not supported by Apache Solr, specifically: org.wltea.pinyin.solr5.PinyinTokenFilterFactory. You have yet to show that the problem isn't in this custom class.\n\nPlus, the class mentions Solr 5, yet you're logging this against Solr 6.\n\nUnless and until you can show that this issue is a problem with Solr and not this non-solr tokenizer there is little that we can do. If you would like to retain consulting services to debug this custom code, please contact one of the many consulting services. ",
            "id": "comment-15786758"
        }
    ]
}