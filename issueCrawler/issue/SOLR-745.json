{
    "id": "SOLR-745",
    "title": "CoreAdminHandler in bad state after UNLOADing core",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "using 1.3-rc1...\n\n\tStart up the multicore example...\n\ncd example\njava -Dsolr.solr.home=multicore -jar start.jar\n\n\n\tHit the status URL repeatedly: http://localhost:8983/solr/admin/cores?action=STATUS\n\tNote: no problems in the log\n\tunload core0: http://localhost:8983/solr/admin/cores?action=UNLOAD&core=core0\n\tshift-reload on the status URL: http://localhost:8983/solr/admin/cores?action=STATUS\n\tNote the following exception each time...\n\nSEVERE: java.util.concurrent.RejectedExecutionException\n        at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1477)\n        at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:384)\n        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:856)\n        at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:45)\n        at java.util.concurrent.Executors$DelegatedExecutorService.submit(Executors.java:606)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1062)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:821)\n        at org.apache.solr.request.SolrQueryRequestBase.getSearcher(SolrQueryRequestBase.java:208)\n        at org.apache.solr.servlet.cache.HttpCacheHeaderUtil.calcLastModified(HttpCacheHeaderUtil.java:146)\n        at org.apache.solr.servlet.cache.HttpCacheHeaderUtil.doCacheHeaderValidation(HttpCacheHeaderUtil.java:220)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:224)\n        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)\n        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)\n        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)\n        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)\n        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)\n        at org.mortbay.jetty.Server.handle(Server.java:285)\n        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:502)\n        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:821)\n        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:513)\n        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:208)\n        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:378)\n        at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:226)\n        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)\n\n\n\tNote that the exception doesn't just happen the first time you reload the status URL, but everytime.\n\n\n\n\nMarking \"Fix in 1.3\" until someone smarter then me about CoreAdminHandler says it's no big deal.",
    "attachments": {
        "solr-745.patch": "https://issues.apache.org/jira/secure/attachment/12389305/solr-745.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12627364",
            "date": "2008-09-01T01:27:10+0000",
            "content": "On the surface, part of the problem is that CoreAdminHandler should probably be calling SolrQueryResponse.setHttpCaching(false) ... but since it isn't, HttpCacheHeaderUtil is attempting to get a searcher to determine some headers \u2013 this should be done relative the \"adminCore\" picked by CoreContainer (at least as far as i can and something seems to get wonky about coreAdmin when a core is UNLOADed.\n\nIn this specific example, it's just affecting the cache headers, but this seems like it could be simptomatic of a larger more generic problem relating to the \"adminCore\" ... and i'm not sure how bad that is. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12627419",
            "date": "2008-09-01T09:08:40+0000",
            "content": "Part of it might be in 'CoreContainer.getAdminHandler()' which should check that the (previous) admin core is not closed before attempting to (re)use it.\nAdding a check for isClosed() seems necessary.\nSomething like:\n\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null && !core.isClosed()) {\n        core.open();\n      } else {\n....\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12627502",
            "date": "2008-09-01T16:34:50+0000",
            "content": "The uploaded patch fixes it (Linux/Ubuntu 8.04/Java 1.6) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12627577",
            "date": "2008-09-02T05:07:51+0000",
            "content": "Maybe i'm missing something but haven't i seen some docs saying that SolrCores are now ref counted?  \n\nif CoreContainer is setting the adminCore properly, then shouldn't it be impossible for anyone else to completely close it?\n\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12627610",
            "date": "2008-09-02T09:03:31+0000",
            "content": "You are correct, refcounting on cores was introduced in SOLR-647. Before this, it was possible to close a core whilst it was serving requests.\n\nThe admin core is \"any\" core that is used so admin requests can be served (request handling assumes a core exists); it is kept around  through a weak reference to avoid looking for a new one each time an admin request is handled and is only maintained \"opened\" during execution of the request (like any other request wrt refcounting for that matter; incref - aka open - when we acquire the core, execute the query, decref - aka close - as release). \n\nThe side effect is that the reference can point to a core that is closed but not yet GC-ed thus the bug & the fix.\n\nAs a side note, the java.util.concurrent.RejectedExecutionException is the typical symptom when trying to execute a query on a closed core. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12627708",
            "date": "2008-09-02T15:15:48+0000",
            "content": "Thanks, I just committed the patch.\n\nIt seems like the admin core thing is a weakness of the current design... a core must remain open at all times in order to serve more core requests - definitely not ideal.  I'm not sure I see an easy fix right now though. "
        }
    ]
}