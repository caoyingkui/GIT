{
    "id": "LUCENE-1889",
    "title": "FastVectorHighlighter: support for additional queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/highlighter"
        ],
        "type": "Wish",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I am using fastvectorhighlighter for some strange languages and it is working well! \n\nOne thing i noticed immediately is that many query types are not highlighted (multitermquery, multiphrasequery, etc)\nHere is one thing Michael M posted in the original ticket:\n\n\nI think a nice [eventual] model would be if we could simply re-run the\nscorer on the single document (using InstantiatedIndex maybe, or\nsimply some sort of wrapper on the term vectors which are already a\nmini-inverted-index for a single doc), but extend the scorer API to\ntell us the exact term occurrences that participated in a match (which\nI don't think is exposed today).\n\nDue to strange requirements I am using something similar to this (but specialized to our case).\nI am doing strange things like forcing multitermqueries to rewrite into boolean queries so they will be highlighted,\nand flattening multiphrasequeries into boolean or'ed phrasequeries.\nI do not think these things would be 'fast', but i had a few ideas that might help:\n\n\n\tlooking at contrib/highlighter, you can support FilteredQuery in flatten() by calling getQuery() right?\n\tmaybe as a last resort, try Query.extractTerms() ?",
    "attachments": {
        "LUCENE-1889_reader.patch": "https://issues.apache.org/jira/secure/attachment/12493731/LUCENE-1889_reader.patch",
        "LUCENE-1889-solr.patch": "https://issues.apache.org/jira/secure/attachment/12493764/LUCENE-1889-solr.patch",
        "LUCENE-1889.patch": "https://issues.apache.org/jira/secure/attachment/12483830/LUCENE-1889.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-09-05T11:53:22+0000",
            "content": "Robert, you've implemented extending scorer to return the exact term occurrences? ",
            "author": "Jason Rutherglen",
            "id": "comment-12751752"
        },
        {
            "date": "2009-09-05T12:45:47+0000",
            "content": "Jason, no but the high-level idea in concept is similar: re-run the query on single doc \"mini-index\" to work a bit differently (specialized for highlighting)\n\nif i had done it in a nice way I would have contributed something  ",
            "author": "Robert Muir",
            "id": "comment-12751753"
        },
        {
            "date": "2009-09-05T21:38:15+0000",
            "content": "I think we \"just\" need to merge Span*Query into their \"nomal\" counterparts, making sure there's no performance penalty when you don't use the spans.  Then we get the exact occurrence of every match \"for free\"  ",
            "author": "Michael McCandless",
            "id": "comment-12751795"
        },
        {
            "date": "2010-03-09T19:43:33+0000",
            "content": "One thing i noticed immediately is that many query types are not highlighted (multitermquery, multiphrasequery, etc)\n\nI am using queryParser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE)\nbefore query.rewrite, and it works well.\n\nDIGY ",
            "author": "Digy",
            "id": "comment-12843261"
        },
        {
            "date": "2011-06-25T15:29:51+0000",
            "content": "I made an incremental change to FVH to support WildcardQuery, PrefixQuery and RegexpQuery.  Just uses Java regexes to match.  It is faster than HighlightQuery (4-5x in enwiki benchmark) although not as much faster as the comparison w/TermQuery.  \n\nA possible issue is that regex support will differ from RegexpQuery, but I think? that Java's is a superset, so should be ok, but I'm not sure about this one.\n\nThis doesn't take you to nirvana, but does add support for a common case. If there's interest I'll post. ",
            "author": "Mike Sokolov",
            "id": "comment-13054923"
        },
        {
            "date": "2011-06-25T23:18:05+0000",
            "content": "Sounds great!\n\nThis doesn't take you to nirvana, but does add support for a common case. If there's interest I'll post.\n\nSure, please post. Does it cover range queries? ",
            "author": "Koji Sekiguchi",
            "id": "comment-13054984"
        },
        {
            "date": "2011-06-25T23:54:53+0000",
            "content": "No, no range queries, sorry.  I don't think that's easily expressible as a regex? So it would add probably require yet another data structure in FieldQuery - right now we have Map<String,QueryPhraseMap> for TermQuery; I've added a List<QueryPhraseMap> and QPM.Pattern for matching wildcards and regexes.  To handle RangeQuery, you'd need to add another such data structure: it would probably be best to introduce some new abstraction to represent all of these query-proxies.\n\nIt seemed a less useful case to me anyway since we don't usually use range queries in the context of full text; more often they come up in structured metadata?  Curious if  you have requests for that?\n\nAnyway I will clean up a bit and post. ",
            "author": "Mike Sokolov",
            "id": "comment-13054985"
        },
        {
            "date": "2011-06-26T00:11:01+0000",
            "content": "Patch includes FVH support for Wildcard-, Regexp- and PrefixQuery.  Change to Enwiki benchmark (to generate wildcard queries) should maybe not be committed; just providing this as a validation of this approach. ",
            "author": "Mike Sokolov",
            "id": "comment-13054986"
        },
        {
            "date": "2011-06-27T07:03:37+0000",
            "content": "Patch looks really good!\n\nTo handle RangeQuery, you'd need to add another such data structure: it would probably be best to introduce some new abstraction to represent all of these query-proxies.\n\nWould you like to try this one? \n\nIt seemed a less useful case to me anyway since we don't usually use range queries in the context of full text; more often they come up in structured metadata? Curious if you have requests for that?\n\nI don't have the requirement for highlighting range queries, even wildcard, prefix and regexp either. Because I'm using FVH to highlight terms in N-gram fields, and these MultiTermQueries are not ideal for N-gram. But if FVH could cover range queries, it should be nicer for users. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13055364"
        },
        {
            "date": "2011-06-27T10:22:21+0000",
            "content": "\nA possible issue is that regex support will differ from RegexpQuery, but I think? that Java's is a superset, so should be ok, but I'm not sure about this one.\n\nActually, these are totally different syntaxes!\n\nAn alternative way to flatten these multitermqueries could be to implement o.a.l.index.Terms with what is in the term vector... then you could rewrite them with their own code.\n\ntrying to generate an equivalent string pattern could be a little problematic, for example wildcard supports escaped terms (and could contain other characters that are java.util.regex syntax characters but not wildcard syntax characters), the regex syntax is different, etc.\n\nif you still decide you want to do it this way though, i would use o.a.l.util.automaton instead of java.util.regex? Besides being faster, this is internally what these queries are using anyway, so you can convert them with for example WildcardQuery.toAutomaton(). Then, union these and match against the union'ed machine instead of a List.\n\nBut personally i would look at going the Terms/rewriteMethod route if possible, this way all multitermqueries will \"just work\". ",
            "author": "Robert Muir",
            "id": "comment-13055452"
        },
        {
            "date": "2011-06-27T13:41:32+0000",
            "content": "Robert: Thanks that sounds like good advice. I wasn't completely happy with that Pattern list anyway; really still just feeling my way around Lucene and trying random things at this point a bit.  I wonder if you could comment on this possible other idea, following up on Mike M's quote above:\n\nI tried hacking up SpanScorer to see if I could get positions out of it using a custom Collector, but found that by the time a doc was reported, SpanScorer had already iterated over and dropped the positions.  I was thinking of adding a Collector.collectSpans(int start, int end), and having SpanScorer call it (it would be an empty function in Collector proper) or something like that.  At this point I'm wondering if it might be possible to rewrite many queries as some kind of SpanQuery (using a visitor), without the need to actually alter all the Query implementations.  Is there a better way?\n\nI was also thinking it might be possible to capture and re-use positions gathered during the initial scoring episode rather than having to re-score during highlighting, but I guess that's a separate issue.\n\nKoji: Thanks for the review, but it sounds like some more iteration is needed here; for sure on RegExpQuery.  I probably should have tested that a bit more carefully, although the one thing I tried (character classes) seems to work the same. ",
            "author": "Mike Sokolov",
            "id": "comment-13055546"
        },
        {
            "date": "2011-06-27T14:31:22+0000",
            "content": "Hi Mike, Simon has an issue open to make a lot of what you are talking about wrt positions easier:\nLUCENE-2878\n\nIn my opinion once LUCENE-2878 is resolved, we may want to then consider adding the capability for a codec to encode the offset deltas in parallel with the positions (so its just a stream of delta-encoded integers you read in parallel with the positions for things like highlighting). \n\nThen, highlighting would not require term vectors anymore right? I think this would be much faster and more efficient without the space waste of term vectors, and we could prototype such a thing by encoding these ourselves into the payloads... which is close to the same, but I think ultimately optionally supporting offsets this way will be better especially with block-oriented compression algorithms.\n ",
            "author": "Robert Muir",
            "id": "comment-13055580"
        },
        {
            "date": "2011-06-27T15:21:01+0000",
            "content": "Ah, I see - that's awesome, thanks, had no idea.  Yeah - I had been thinking about matching positions->offsets using the existing term vectors, which was going to be kind of unpleasant; you have to iterate by term, which you don't care about, and scan for a matching position. ",
            "author": "Mike Sokolov",
            "id": "comment-13055599"
        },
        {
            "date": "2011-06-27T15:31:46+0000",
            "content": "well I think Simon might be looking for feedback on LUCENE-2878, which would allow you to get at the positions and corresponding payloads.\n\nSo as an experiment close to what you describe, you could play with his patch, make a TokenFilter that copies whatever offset info highlighting needs into the payload (OffsetAsPayloadFilter or something), and try to make a quick-n-dirty highlighter that uses it?\n\nIt would be interesting to see what the performance is like from this versus the term vectors, besides working with all queries  ",
            "author": "Robert Muir",
            "id": "comment-13055603"
        },
        {
            "date": "2011-09-04T19:08:10+0000",
            "content": "This patch adds support for highlighting MultiTermQuery in FastVectorHighlighter via Query.rewrite().  I left one FIXME (should that be nocommit?) that should be fairly easy to resolve: we currently rewrite() the same MTQ query twice in some circumstances - if it's in a phrase I think.  I'd be happy to sort that out if y'all decide to commit this. ",
            "author": "Mike Sokolov",
            "id": "comment-13096918"
        },
        {
            "date": "2011-09-08T02:38:18+0000",
            "content": "Koji - back in June, you expressed some interest in this; are you still interested / do you have time to review the patch?  I think it is as good a solution as one can wish for in the context of FVH.  Possibly LUCENE-2878 will end up as something better, but it is a longer-term project I think with a lot of work left to be done; in the meantime this would offer a good way to extend FVH support to a broader range of queries.  This'll be my last nudge  ",
            "author": "Mike Sokolov",
            "id": "comment-13099715"
        },
        {
            "date": "2011-09-08T02:46:35+0000",
            "content": "Thank you for the wake-up call, Mike! I'd like to review the patch tomorrow. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13099718"
        },
        {
            "date": "2011-09-08T14:42:14+0000",
            "content": "Patch looks good!\n\nPossibly LUCENE-2878 will end up as something better, but it is a longer-term project I think with a lot of work left to be done; in the meantime this would offer a good way to extend FVH support to a broader range of queries.\n\n+1. I think this is close to commit. Mike, can you sort out FIXME part? ",
            "author": "Koji Sekiguchi",
            "id": "comment-13100357"
        },
        {
            "date": "2011-09-09T00:47:14+0000",
            "content": "updated patch resolves issue w/possibly rewriting MTQs multiple times ",
            "author": "Mike Sokolov",
            "id": "comment-13100825"
        },
        {
            "date": "2011-09-09T00:48:17+0000",
            "content": "here you go, Koji - thanks for the quick review ",
            "author": "Mike Sokolov",
            "id": "comment-13100826"
        },
        {
            "date": "2011-09-09T01:58:22+0000",
            "content": "Committed revision 1166954 in trunk.\n\nNow I'm trying to port 3x, but I got \"no such method\" issue in FieldQuery:\n\n\nelse if (query instanceof MultiTermQuery) {\n  return ((MultiTermQuery)query).getField();\n}\n\n\n\nDo you have an idea to solve this? ",
            "author": "Koji Sekiguchi",
            "id": "comment-13100859"
        },
        {
            "date": "2011-09-09T02:33:13+0000",
            "content": "I'm a little out of my depth here, but it appears from poking around in svn history that the field name got pulled up in to MTQ from its subclasses when the \"flex_1458\" branch was merged in, and I guess that hasn't happened in 3.x?\n\nSo it looks to me that the only way to get this change into 3.x is either to do the same kind of refactoring that was done in that branch, or to go back to special-casing all the different MTQs. (ie something like:\n\n\nelse if (query instanceof WildcardQuery) {\n  return ((WildcardQuery)query).getField();\n}\nelse if (query instanceof PrefixQuery) {\n  return ((PrefixQuery)query).getField();\n}\netc...\n\n\n\nsorry - I didn't realize the patch relied on something only in trunk.  That branch was merged in a year and a half ago now, but I guess it must include enough major changes that it's difficult to back-port. ",
            "author": "Mike Sokolov",
            "id": "comment-13100888"
        },
        {
            "date": "2011-09-09T02:56:40+0000",
            "content": "Ok, I took the latter way in this issue. committed 3x. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13100897"
        },
        {
            "date": "2011-09-09T02:57:18+0000",
            "content": "Thanks Mike! ",
            "author": "Koji Sekiguchi",
            "id": "comment-13100898"
        },
        {
            "date": "2011-09-09T05:02:00+0000",
            "content": "Solr's build is broken by these changes it seems. ",
            "author": "Chris Male",
            "id": "comment-13100985"
        },
        {
            "date": "2011-09-09T05:47:17+0000",
            "content": "here is the patch I applied, might not be the best or whatever, and see the TODO/note in the code. ",
            "author": "Robert Muir",
            "id": "comment-13101004"
        },
        {
            "date": "2011-09-09T11:21:20+0000",
            "content": "Sorry, forgot to include changes to DefaultSolrHighlighter as well (it gets confusing maintaining multiple patches in the same build).\n\nI do think the non-reader method should be derprecated as in Robert's comment. ",
            "author": "Mike Sokolov",
            "id": "comment-13101127"
        },
        {
            "date": "2011-10-13T12:11:39+0000",
            "content": "The fix of the broken solr build had been committed in last month. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13126510"
        },
        {
            "date": "2011-11-27T12:29:26+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157758"
        },
        {
            "date": "2012-01-23T04:45:13+0000",
            "content": "It looks like this will automatically be used in SOLR ? OR do we need to add support for this ? ",
            "author": "Bill Bell",
            "id": "comment-13190872"
        }
    ]
}