{
    "id": "LUCENE-4832",
    "title": "Unbounded getTopGroups for ToParentBlockJoinCollector",
    "details": {
        "components": [
            "modules/join"
        ],
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "ToParentBlockJoinCollector#getTopGroups method takes several arguments:\n\npublic TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, \n                                       Sort withinGroupSort,\n                                       int offset,\n                                       int maxDocsPerGroup,\n                                       int withinGroupOffset,\n                                       boolean fillSortFields)\n\n\nand one of them is maxDocsPerGroup which specifies upper bound of child documents number returned within each group. \nToParentBlockJoinCollector collects and caches all child documents matched by given ToParentBlockJoinQuery in OneGroup objects during search so it is possible to create GroupDocs with all matched child documents instead of part of them bounded by maxDocsPerGroup.\n\nWhen you specify maxDocsPerGroup new queues(I mean TopScoreDocCollector/TopFieldCollector) will be created for each group with maxDocsPerGroup objects created within each queue which could lead to redundant memory allocation in case of child documents number within group is less than maxDocsPerGroup.\n\nI suppose that there are many cases where you need to get all child documents matched by query so it could be nice to have ability to get top groups with all matched child documents without unnecessary memory allocation. \n\nPossible solution is to pass negative maxDocsPerGroup in case when you need to get all matched child documents within each group and check maxDocsPerGroup value: if it is negative then we need to create queue with size of matched child documents number; otherwise create queue with size equals to maxDocsPerGroup.",
    "attachments": {
        "LUCENE-4832.patch": "https://issues.apache.org/jira/secure/attachment/12573710/LUCENE-4832.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-14T12:20:36+0000",
            "content": "Patch with proposed solution attached. ",
            "author": "Aleksey Aleev",
            "id": "comment-13602213"
        },
        {
            "date": "2013-03-14T17:56:34+0000",
            "content": "Could we just fix it so passing in Integer.MAX_VALUE for maxDocsPerGroup works?  I.e., we'd need to do the min(numDocsInGroup, maxDocsPerGroup) when we create the collector for the group.  And I think we don't need to create this separate Accumulator class... ",
            "author": "Michael McCandless",
            "id": "comment-13602498"
        },
        {
            "date": "2013-03-15T11:48:31+0000",
            "content": "Michael, thank you for replying!\nI agree with you about Integer.MAX_VALUE, it looks much better in this way.\nThe reason why I introduced GroupDocsAccumulator class is that I wanted to reduce the size of getTopGroups(...) method and make it more readable.\nCould you please tell me you don't like introducing new class and creating an instance of it at all or you think that it's not clear what accumulate() method should do?\nMaybe it will be more clear if the loop by groups will remain in getTopGroups() and the loop's body will be extracted in accumulate() method? So we'll have:\n\nfor(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n  groupDocsAccumulator.accumulate(groupIDX);\n}\n\n\n\nPlease tell WDYT about it and I'll update the patch. ",
            "author": "Aleksey Aleev",
            "id": "comment-13603313"
        },
        {
            "date": "2013-03-15T19:51:04+0000",
            "content": "Hi Aleksey, reducing that method size would be nice!  Can we just make it a new method (accumulate is good), instead of a new class?  (And also the Integer.MAX_VALUE fix).  I think this will be a good improvement... ",
            "author": "Michael McCandless",
            "id": "comment-13603763"
        },
        {
            "date": "2013-03-18T13:55:46+0000",
            "content": "Hi Michael! I've updated the patch with introducing a method instead of class and Integer.MAX_VALUE fix. Please have a look and tell what do you think about it. Thank you. ",
            "author": "Aleksey Aleev",
            "id": "comment-13605134"
        },
        {
            "date": "2013-03-18T16:00:01+0000",
            "content": "The Integer.MAX_VALUE change looks great!\n\nBut one thing I don't like about the accumulateGroups is there's now a separate (second) loop to sum up the totalGroupedHitCount.\n\nMaybe accumulateGroups should do this itself, and then return TopGroups instead of GroupDocs<Integer>()? ",
            "author": "Michael McCandless",
            "id": "comment-13605237"
        },
        {
            "date": "2013-03-18T16:34:05+0000",
            "content": "The patch is updated. It looks better, thanks. ",
            "author": "Aleksey Aleev",
            "id": "comment-13605328"
        },
        {
            "date": "2013-03-18T17:30:39+0000",
            "content": "OK, I committed the last patch (plus some small unrelated cleanup to a pre-existing test case); thanks Aleksey! ",
            "author": "Michael McCandless",
            "id": "comment-13605378"
        },
        {
            "date": "2013-05-10T10:34:01+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654100"
        }
    ]
}