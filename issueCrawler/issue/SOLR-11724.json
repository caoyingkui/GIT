{
    "id": "SOLR-11724",
    "title": "Cdcr Bootstrapping does not cause \"index copying\" to follower nodes on Target",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "CDCR"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.3.1",
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Please find the discussion on:\nhttp://lucene.472066.n3.nabble.com/Issue-with-CDCR-bootstrapping-in-Solr-7-1-td4365258.html\n\nIf we index significant documents in to Source, stop indexing and then start CDCR; bootstrapping only copies the index to leader node of shards of the collection, and followers never receive the documents / index until and unless atleast one document is inserted again on source; which propels to target and target collection trigger index replication to followers.\n\nThis behavior needs to be addressed in proper manner, either at target collection or while bootstrapping.",
    "attachments": {
        "SOLR-11724.patch": "https://issues.apache.org/jira/secure/attachment/12916913/SOLR-11724.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-05T13:23:45+0000",
            "content": "Shalin Shekhar Mangar wanted to check with you whether this is the intended behavior. ",
            "author": "Amrit Sarkar",
            "id": "comment-16278527"
        },
        {
            "date": "2018-01-05T10:54:36+0000",
            "content": "Shalin Shekhar Mangar: checking in again to understand if the above is intended behavior and we can trigger Index Replication by follower nodes in Target collection once BS is done. ",
            "author": "Amrit Sarkar",
            "id": "comment-16312939"
        },
        {
            "date": "2018-02-01T11:07:42+0000",
            "content": "Attached patch replicating the issue on Bootstrap stated above. To trigger the index replication in followers, can we initial LIR manually? Requesting thoughts and feedback on solution design. ",
            "author": "Amrit Sarkar",
            "id": "comment-16348409"
        },
        {
            "date": "2018-02-01T15:40:55+0000",
            "content": "We are seeing this behavior in 7.2.0. Sometimes the data shows up in a search, but when I look there are no index segments. It appears to be searching just tlogs.\u00a0\u00a0\n\n\u00a0\n\nThis looks like a critical issue to me.\u00a0\n\nWe observed the same behavior when we deleted all the data from a collection. On;y tlogs show up and only half are searchable.\u00a0 The configuration worked with Solr 6.1 but doesn't with Solr 7.2. We don't see any errors. We see logs of calls to /cdcr LASTPROCESSEDVERSION in the logs\n\n\u00a0\n\nWe don't just see this as a bootstrap issue either, we only see about half the data get replicated. I don't know if tlogs are present on the targets, as I don't have access to those file systems ",
            "author": "Webster Homer",
            "id": "comment-16348769"
        },
        {
            "date": "2018-02-02T05:37:59+0000",
            "content": "Webster Homer,\n\nCan you elaborate you cluster details, number of shards, number of replicas. I am not able to comprehend the above statement of half data being searchable. If something use to work for 6.1 and not working for 7.2 is a concern. If the replicators are started successfully (CDCR=START), there is no reason whatsoever the data won't get replicated to target to either shards and won't be searchable after commit.\n\nHere, if not a single document is indexed in source after bootstrapping done on target. The replicas of the target collections which are non-leader will have empty index. To ignore this issue, having 1 replica each on target is the immediate fix, as one will not see empty indexes on either cores, let me know if the above doesn't make sense. ",
            "author": "Amrit Sarkar",
            "id": "comment-16349816"
        },
        {
            "date": "2018-02-20T14:10:39+0000",
            "content": "First patch uploaded with tests and effective solution, using RequestRecovery. Feedback will be appreciated. WIP. ",
            "author": "Amrit Sarkar",
            "id": "comment-16370084"
        },
        {
            "date": "2018-03-02T20:02:48+0000",
            "content": "This may be a different issue, but I see similar behavior with some replicas in 7.2.0\n\nWe have a number of replicas which have identical schemas. We found that TLOG replicas give much more consistent search results.\n\u00a0\nWe created a collection using TLOG replicas in our QA clouds.\nWe have a locally hosted solrcloud with 2 nodes, all our collections have 2 shards. We use CDCR to replicate the collections from this environment to 2 data centers hosted in Google cloud. This seems to work fairly well for our collections with NRT replicas. However the new TLOG collection has problems.\n\u00a0\nThe google cloud solrclusters have 4 nodes each (3 separate Zookeepers). 2 shards per collection with 2 replicas per shard.\n\u00a0\nWe never see data show up in the tlog replica cloud collections, but we do see tlog files show up on the cloud servers. I can see that all of the servers have cdcr started, buffers are disabled.\nThe cdcr source configuration is:\n\u00a0\n\"requestHandler\":{\"/cdcr\":{\n\u00a0 \u00a0 \u00a0 \"name\":\"/cdcr\",\n\u00a0 \u00a0 \u00a0 \"class\":\"solr.CdcrRequestHandler\",\n\u00a0 \u00a0 \u00a0 \"replica\":[\n\u00a0 \u00a0 \u00a0 \u00a0 \n{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"zkHost\":\"[xxx-mzk01.sial.com:2181|http://xxx-mzk01.sial.com:2181/],[xxx-mzk02.sial.com:2181|http://xxx-mzk02.sial.com:2181/],[xxx-mzk03.sial.com:2181/solr|http://xxx-mzk03.sial.com:2181/solr]\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"source\":\"b2b-catalog-material-180124T\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"target\":\"b2b-catalog-material-180124T\"}\n,\n\u00a0 \u00a0 \u00a0 \u00a0 \n{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"zkHost\":\"[yyyy-mzk01.sial.com:2181|http://yyyy-mzk01.sial.com:2181/],[yyyy-mzk02.sial.com:2181|http://yyyy-mzk02.sial.com:2181/],[yyyy-mzk03.sial.com:2181/solr|http://yyyy-mzk03.sial.com:2181/solr]\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"source\":\"b2b-catalog-material-180124T\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"target\":\"b2b-catalog-material-180124T\"}\n],\n\u00a0 \u00a0 \u00a0 \"replicator\":\n{\n\u00a0 \u00a0 \u00a0 \u00a0 \"threadPoolSize\":4,\n\u00a0 \u00a0 \u00a0 \u00a0 \"schedule\":500,\n\u00a0 \u00a0 \u00a0 \u00a0 \"batchSize\":250}\n,\n\u00a0 \u00a0 \u00a0 \"updateLogSynchronizer\":{\"schedule\":60000}}}}\n\u00a0\nThe target configurations in the 2 clouds are the same:\n\"requestHandler\":{\"/cdcr\":{ \"name\":\"/cdcr\", \"class\":\"solr.CdcrRequestHandler\", \"buffer\":\n{\"defaultState\":\"disabled\"}\n}}\u00a0\n\u00a0\nrw-rr- 1 apache apache 596517718 Feb 28 20:19 tlog.0000000000000000029.1593653529934823424\nrw-rr- 1 apache apache 647 Feb 28 22:18 tlog.0000000000000000030.1593670744554864641\n[apache@uc1b-ecomqa-msc01 tlog]$ pwd\n/var/solr/data/b2b-catalog-material-180124T_shard1_replica_t2/data/tlog\n\u00a0\nAll of our collections have a timestamp field, index_date. In the source collection all the records have a date of 2/28/2018 but the target collections have a latest date of 1/26/2018\n\u00a0\nI don't see cdcr errors in the logs.\u00a0\n\u00a0\nWe have a number of similar collections that behave correctly. This is the only collection that is a TLOG collection. It appears that CDCR doesn't support TLOG collections.\nWe also see the same behavior in our production solrclouds. The collections that use NRT replicas replicate fine with CDCR, the collection that uses TLOG replicas do not. Several of the NRT collections have the same configurations as the tlog colletion, so that seems to be the only difference between them\n\u00a0 ",
            "author": "Webster Homer",
            "id": "comment-16384089"
        },
        {
            "date": "2018-04-13T00:51:47+0000",
            "content": "Hi Amrit,\n\nThanks for working on the patch! I like the solution here , seems like the right way to solve the problem.\n\nHere's some feedback on the patch:\n\n\tIn CdcrReplicatorManager#sendRequestRecoveryToFollowers , the following line looks dangerous ( https://docs.oracle.com/javase/7/docs/api/java/util/Map.html#values()\u00a0)\n\t\n\t\t\nreplicas.remove(slice.getLeader());\n\n\t\n\t\n\n\n\n\n\t\n\t\n\t\tMaybe we could add something like this in the inner for loop instead?\n\nif (slice.getLeader().getCoreName().equals(replica.getCoreName())) {\n  continue;\n}\n\n\t\n\t\n\n\n\n\n\t\n\t\n\t\tDo we really need a separate test for this? Maybe in one of the existing tests we could increase the target replicationFactor ?\n\t\tTo assert doc counts , we have CdcrTestsUtil#waitForCoresToSync . How about something like this instead?\n\nprotected static boolean assertShardInSync(String collection, String shard, CloudSolrClient client) throws IOException, SolrServerException {\n  TimeOut waitTimeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n  DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collection);\n  Slice correctSlice = null;\n  for (Slice slice : docCollection.getSlices()) {\n    if (shard.equals(slice.getName())) {\n      correctSlice = slice;\n      break;\n    }\n  }\n  assertNotNull(correctSlice);\n\n  long leaderDocCount;\n  try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(correctSlice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n    leaderDocCount = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\")).getResults().getNumFound();\n  }\n\n  while (!waitTimeOut.hasTimedOut()) {\n    int replicasInSync = 0;\n    for (Replica replica : correctSlice.getReplicas()) {\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(replica.getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long replicaDocCount = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\")).getResults().getNumFound();\n        if (replicaDocCount == leaderDocCount) replicasInSync++;\n      }\n    }\n    if (replicasInSync == correctSlice.getReplicas().size()) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\t\n\t\n\n ",
            "author": "Varun Thacker",
            "id": "comment-16436609"
        },
        {
            "date": "2018-04-13T08:32:08+0000",
            "content": "Thanks Varun for the valuable review and feedback.\n\n1. Yeah, I always resist using Map.functions, as they are not thread-safe, should have done the same here, thanks for pin-pointing.\n2. The test method was written for the review and specifically for SOLR-11724, moved the test check to testConvertClusterToCdcrAndBootstrap.\n3. I like using distrib=false instead of core API, huge +1 to the same.\n\nI have incorporated all the necessary recommendations in the current patch, thanks again. ",
            "author": "Amrit Sarkar",
            "id": "comment-16437010"
        },
        {
            "date": "2018-04-13T22:38:36+0000",
            "content": "Commit 93f9a65b1c8aa460489fdce50ed84d18168b53ef in lucene-solr's branch refs/heads/master from Varun Saxena\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=93f9a65 ]\n\nSOLR-11724: Cdcr bootstrapping should ensure that non-leader replicas should sync with the leader ",
            "author": "ASF subversion and git services",
            "id": "comment-16438022"
        },
        {
            "date": "2018-04-13T22:45:41+0000",
            "content": "Commit b0c095c1804149bf558064d7f7df76f318a5c5ee in lucene-solr's branch refs/heads/branch_7x from Varun Saxena\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b0c095c ]\n\nSOLR-11724: Cdcr bootstrapping should ensure that non-leader replicas should sync with the leader\n\n(cherry picked from commit 93f9a65) ",
            "author": "ASF subversion and git services",
            "id": "comment-16438032"
        },
        {
            "date": "2018-04-16T17:27:53+0000",
            "content": "Keeping it open. I want to backport this for 7.3.1\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16439757"
        },
        {
            "date": "2018-04-25T05:39:25+0000",
            "content": "Commit 8fa7687413558b3bc65cbbbeb722a21314187e6a in lucene-solr's branch refs/heads/branch_7_3 from Varun Saxena\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8fa7687 ]\n\nSOLR-11724: Cdcr bootstrapping should ensure that non-leader replicas should sync with the leader ",
            "author": "ASF subversion and git services",
            "id": "comment-16451682"
        },
        {
            "date": "2018-04-25T05:44:19+0000",
            "content": "Thanks Amrit ",
            "author": "Varun Thacker",
            "id": "comment-16451686"
        }
    ]
}