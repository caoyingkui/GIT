{
    "id": "LUCENE-8415",
    "title": "Clean up Directory contracts (write-once, no reads-before-write-completed)",
    "details": {
        "components": [],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "Created a PR here for early review.\n\nhttps://github.com/apache/lucene-solr/pull/424\n\nI changed:\n\n\tthe wording in Directory documentation to be a bit more formalized about what rules a Directory should obey (and users expect).\n\tmodified the test framework to verify the above in mock classes.\n\n\n\nCurrently a number of Directory implementations fail the testReadFileOpenForWrites test that I added, so I'll keep working on that.",
    "attachments": {
        "LUCENE-8415.patch": "https://issues.apache.org/jira/secure/attachment/12932689/LUCENE-8415.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16550614",
            "author": "Dawid Weiss",
            "content": "Ensuring testReadFileOpenForWrites works would require moving some bookkeeping to Directory classes (and IndexOutput implementations). A concurrent hash map of open outputs and an update on IndexOutput.close(), essentially.\n\nWe have a few options.\n\nMake it a contractual requirement (then we have to implement this bookkeeping for true filesystems since they allow readers over a writer for the same process). Make this an assertion-mode only check (implement book keeping, but don't run it except for assertion-enabled runs). Finally, don't make any checks at all, but give the contractual liberty for Directory implementations to throw AccessDeniedException in openInput if a file is still open.\n\nThe offending directory implementations right now are:\n\n- org.apache.lucene.store.TestTrackingDirectoryWrapper.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestMmapDirectory.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestSimpleFSDirectory.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestNRTCachingDirectory.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestFileSwitchDirectory.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestRAMDirectory.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestNIOFSDirectory.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestMultiMMap.testReadFileOpenForWrites\n   [junit4]   - org.apache.lucene.store.TestFilterDirectory.testReadFileOpenForWrites\n\n ",
            "date": "2018-07-20T10:14:25+0000"
        },
        {
            "id": "comment-16550740",
            "author": "Robert Muir",
            "content": "you could also do no bookkeeping and simply pay the cost of more renames, right? Currently only the segments_N is written atomically like this. But writing to a temp file and then renaming at the end is pretty easy to understand, lots of applications do it. ",
            "date": "2018-07-20T12:49:59+0000"
        },
        {
            "id": "comment-16551141",
            "author": "Dawid Weiss",
            "content": "you could also do no bookkeeping and simply pay the cost of more renames, right?\n\nErr, I don't follow? My idea was to ensure a file open for output cannot be open for input (until the output is closed). This proves quite extensive code-wise to enforce, so I think it'll be better to leave it up to the implementation to decide (Directory.openInput may throw an exception on an input that is still being written to). I'll update the patch and submit for review (on Monday, unfortunately \u2013 I'm away for the weekend).\n\nOn a positive note, removing segment* exceptions from the mock classes didn't break anything after beasting overnight.  ",
            "date": "2018-07-20T18:58:28+0000"
        },
        {
            "id": "comment-16551147",
            "author": "Robert Muir",
            "content": "by this i mean, use atomic rename for all index files not just segments_N. then nobody can be reading from them until they are complete. ",
            "date": "2018-07-20T19:05:01+0000"
        },
        {
            "id": "comment-16551188",
            "author": "Dawid Weiss",
            "content": "Oh, I absolutely agree. The thing is should we try to enforce it at runtime, in the code of each directory, or only verify that we don't do it in the tests (in MockDirectoryWrapper)? ",
            "date": "2018-07-20T19:51:52+0000"
        },
        {
            "id": "comment-16551224",
            "author": "Robert Muir",
            "content": "I don't think such stuff belongs in the directory. We should be leaning on the operating system for such guarantees. \n\nI know you've been looking at RAMDirectory, but its really an atypical case/wildcard.\n\nMockDirectoryWrapper/mockfs stuff should have all the assertions we can throw at it. ",
            "date": "2018-07-20T20:23:07+0000"
        },
        {
            "id": "comment-16551227",
            "author": "Dawid Weiss",
            "content": "Yep, I agree. Doesn't make sense to make FS impls. slower just to enforce it, it's enough that we run tests that capture it early. I'll work on it. ",
            "date": "2018-07-20T20:25:43+0000"
        },
        {
            "id": "comment-16551298",
            "author": "Robert Muir",
            "content": "I guess what I mean is, RAMDirectory is different because it lives in a bubble. On the other hand FSDirectory shares a world with other applications (maybe java, maybe not) and maybe even other computers in more ridiculous setups. So java code in the Directory isn't really up for the task of enforcing, we need OS help. ",
            "date": "2018-07-20T21:08:07+0000"
        },
        {
            "id": "comment-16552710",
            "author": "Dawid Weiss",
            "content": "I think it's ready. Passes precommit and tests (repeated 20 times). The patch contains minor changes to tests \u2013 I cleaned up a few places bringing them to Java 8 (try-with-resources to close test directories, streams here and there, hardcoded ExtraFS file checks).\n\nI'll follow-up with ram directory cleanups in a separate patch. ",
            "date": "2018-07-23T11:50:33+0000"
        },
        {
            "id": "comment-16553887",
            "author": "ASF subversion and git services",
            "content": "Commit 8892c0d9aff9e8b7a6722a50a18908ef575276da in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8892c0d ]\n\nLUCENE-8415: Clean up Directory contracts (write-once, no reads-before-write-completed). Minor test improvements and cleanups. ",
            "date": "2018-07-24T06:55:16+0000"
        },
        {
            "id": "comment-16553889",
            "author": "ASF subversion and git services",
            "content": "Commit 9dc6cff38a2de26a249659d1dc8240aa716b674c in lucene-solr's branch refs/heads/branch_7x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9dc6cff ]\n\nLUCENE-8415: Clean up Directory contracts (write-once, no reads-before-write-completed). Minor test improvements and cleanups. ",
            "date": "2018-07-24T06:55:58+0000"
        },
        {
            "id": "comment-16555364",
            "author": "ASF subversion and git services",
            "content": "Commit 8892c0d9aff9e8b7a6722a50a18908ef575276da in lucene-solr's branch refs/heads/jira/http2 from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8892c0d ]\n\nLUCENE-8415: Clean up Directory contracts (write-once, no reads-before-write-completed). Minor test improvements and cleanups. ",
            "date": "2018-07-25T08:33:48+0000"
        },
        {
            "id": "comment-16555438",
            "author": "ASF subversion and git services",
            "content": "Commit d25f62634b95e49df739a5a2612f9b719ef3a77d in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d25f626 ]\n\nLUCENE-8415: test quirk follow up. MockDirectoryWriter uses AccessDeniedException (a subclass of IOException) to signal files still open for writing when read access is requested. ",
            "date": "2018-07-25T09:34:38+0000"
        },
        {
            "id": "comment-16555440",
            "author": "ASF subversion and git services",
            "content": "Commit 608f0277b07c73218e5dc1d8ce3a264020c50f36 in lucene-solr's branch refs/heads/branch_7x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=608f027 ]\n\nLUCENE-8415: test quirk follow up. MockDirectoryWriter uses AccessDeniedException (a subclass of IOException) to signal files still open for writing when read access is requested. ",
            "date": "2018-07-25T09:35:14+0000"
        }
    ]
}