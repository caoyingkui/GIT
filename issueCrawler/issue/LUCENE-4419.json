{
    "id": "LUCENE-4419",
    "title": "Test RecursivePrefixTree indexing non-point data",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "RecursivePrefixTreeFilter was modified in ~July 2011 to support spatial filtering of non-point indexed shapes.  It seems to work when playing with the capability but it isn't tested.  It really needs to be as this is a major feature.\n\nI imagine an approach in which some randomly generated rectangles are indexed and then a randomly generated rectangle is queried.  The right answer can be calculated brute-force and then compared with the filter.  In order to deal with shape imprecision, the randomly generated shapes could be generated to fit a course grid (e.g. round everything to a 1 degree interval).",
    "attachments": {
        "LUCENE-4419_Test_indexing_non-point_shapes.patch": "https://issues.apache.org/jira/secure/attachment/12555995/LUCENE-4419_Test_indexing_non-point_shapes.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-24T00:30:24+0000",
            "content": "I really don't see the benefit of randomly generating Shapes.  There isn't much to be revealed with a rectangle that say covers one small part of the pacific ocean and another rectangle which covers another small part.  The number of possible Shapes is just too massive to ever reveal anything.\n\nWhat I feel would be better is if we defined Shapes that test particularly troublesome areas.  Datelines, equators, poles.  We can also include massive Shapes and tiny Shapes, circles, points, and whatever else we end up supporting.\n\nHaving this standardized Shape suite would be a big benefit to testing all the Strategys.  I don't think it would be particularly difficult to create and once created, it wouldn't require much maintenance at all. ",
            "author": "Chris Male",
            "id": "comment-13461548"
        },
        {
            "date": "2012-09-24T01:43:21+0000",
            "content": "I'm all for what you suggest \u2013 a test that could be used by multiple strategies.  We're doing that already in fact in PortedSolr3Test.  And the StrategyTestCase has methods that facilitate using test files of sample data, which is used by several tests such as TestPointVectorStrategy.\n\nI really don't see the benefit of randomly generating Shapes.\n\nI could have sworn you told me we should add that to the Spatial4j todo list.\n\nI like randomized tests because it can catch errors that a static test simply didn't test for.  This helped out tremendously when I worked out the bugs in Circle-Rectangle intersection in Spatial4j. ",
            "author": "David Smiley",
            "id": "comment-13461561"
        },
        {
            "date": "2012-09-24T01:55:18+0000",
            "content": "I'm all for what you suggest \u2013 a test that could be used by multiple strategies\n\nI didn't suggest that.  I suggested a common suite of Shapes.  I don't like the idea of having a single test for all Strategys since they work in different ways and support different things.\n\nI like randomized tests because it can catch errors that a static test simply didn't test for\n\nTheres a difference between randomized tests and randomized Shape generation (again I didn't suggest we stopped randomized testing).  The world is massive, much of it isn't remotely interesting or challenging to our spatial implementations.  Just generating arbitrary Shapes somewhere on the globe seems a total waste of time.  \n\nIf we have a standard set of Shapes then we can use randomized testing to handle the permutations between them, but we shouldn't waste days waiting for tests to hit an interesting Shape. ",
            "author": "Chris Male",
            "id": "comment-13461564"
        },
        {
            "date": "2012-12-04T22:14:38+0000",
            "content": "The attached test SpatialOpRecursivePrefixTreeTest tests the RecursivePrefixTree extensively.  It yielded the bugs in LUCENE-4585.  It uses the QuadPrefixTree with random levels and random scan threshold for RecursivePrefixTreeFilter.  Some randomly generated rectangles are asserted as a MUST match, and some are optional depending on the grid approximation.\n\nQuadPrefixTree was chosen because it supports non-geo, and this test has some simplistic logic in going from shape -> grid-snapped shape that would be more complicated in geospatial that ultimately RecursivePrefixTree doesn't care about any way \u2013 it's Spatial4j + GeohashPrefixTree that deal with that.\n\nThis test added an evaluate() method to SpatialOperation which I found quite handy.  With this in place and this test as a template, it should be easy to test for operations other than intersect once they are supported. ",
            "author": "David Smiley",
            "id": "comment-13510064"
        },
        {
            "date": "2012-12-04T22:27:45+0000",
            "content": "Whoops; there's a stupid \"if (i != 5) continue;\" on line ~68 which I should have labelled with a NOCOMMIT that's in the patch. ",
            "author": "David Smiley",
            "id": "comment-13510077"
        },
        {
            "date": "2012-12-08T05:27:43+0000",
            "content": "[branch_4x commit] David Wayne Smiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1418011\n\nLUCENE-4419: Test indexing non-point shapes; and add SpatialOperation.evaluate(s1,s2)\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13527044"
        },
        {
            "date": "2012-12-08T05:27:54+0000",
            "content": "[trunk commit] David Wayne Smiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1418007\n\nLUCENE-4419: Test indexing non-point shapes; and add SpatialOperation.evaluate(s1,s2)\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13527061"
        },
        {
            "date": "2013-03-22T16:11:26+0000",
            "content": "[branch_4x commit] David Wayne Smiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1418011\n\nLUCENE-4419: Test indexing non-point shapes; and add SpatialOperation.evaluate(s1,s2) ",
            "author": "Commit Tag Bot",
            "id": "comment-13610458"
        },
        {
            "date": "2013-05-10T10:32:57+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653774"
        }
    ]
}