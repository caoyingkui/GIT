{
    "id": "LUCENE-6139",
    "title": "TokenGroup.getStart|EndOffset should return matchStart|EndOffset not start|endOffset",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/highlighter"
        ],
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "The default highlighter has a TokenGroup class that is passed to Formatter.highlightTerm().  TokenGroup also has getStartOffset() and getEndOffset() methods that ostensibly return the start and end offsets into the original text of the current term.  These getters aren't called by Lucene or Solr but they are made available and are useful to me.  The problem is that they return the wrong offsets when there are tokens at the same position.  I believe this was an oversight of LUCENE-627 in which these getters should have been updated but weren't.  The fix is simple: return matchStartOffset and matchEndOffset from these getters, not startOffset and endOffset.  I think this oversight would not have occurred if Highlighter didn't have package-access to TokenGroup's fields.",
    "attachments": {
        "LUCENE-6139_TokenGroup_offsets.patch": "https://issues.apache.org/jira/secure/attachment/12689722/LUCENE-6139_TokenGroup_offsets.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14258931",
            "author": "David Smiley",
            "date": "2014-12-26T05:15:54+0000",
            "content": "I propose that TokenGroup's fields become private and Highlighter access them via it's getters \u2013 the ones it already has, actually, no need for more.\n\nThis begs the question if the distinction of a \"matchStartOffset\" vs. \"startOffset\" (and \"end\" variants) serves any purpose.  That is, toss startOffset (& endOffset) then rename matchStartOffset (& matchEndOffset) to startOffset (& endOffset). They aren't used, and I doubt others are because I think the offset info, when needed, is accessed at the end via TextFragment (populated from TokenGroup.matchStartOffset & matchEndOffset).  FYI I didn't go that route because I want all matches and I found the custom Formatter approach to be more appealing than passing a very large numFragments, from an efficiency standpoint.\n\nUnrelated questions about Highlighter\nNot directly related to this is a couple burning questions I have in Highlighter:\n\n\tWhy oh why does Highlighter call formatter.highlightTerm for essentially every token?  If TokenGroup.getTotalScore() is 0, I argue it shouldn't. All the built-in Fragmenters (and one I just wrote) start with a zero score short-circuit.\n\tWhy does a 0-score fragment remains a part of the fragments priority queue; why it isn't tossed out when the fragment closes out?  One might argue it's needless when numFragments is small, which is the size of the PQ but it'd be nice to ask for 'all' fragments/matches without a huge PQ even if there is just one real match.\n\tWhy is all text run through the encoder and appended to a \"newText\" StringBuilder, even when the fragment has no score?  If there's no point then it's a waste to do it and then not use it as it won't be a part of a returned fragment.  Again, I think 0-score fragments should be immediately dropped, and newText should only be for the current fragment.\n\n "
        },
        {
            "id": "comment-14260443",
            "author": "David Smiley",
            "date": "2014-12-29T21:07:03+0000",
            "content": "Any opinions Mark Harwood? You were involved in LUCENE-627 and seemingly some of the development of this highlighter, back in the day.  \n\np.s. it's difficult to figure out which of your three JIRA accounts one should use when referencing you. I wish JIRA had a means of consolidating or indicating which are defunct. I've got 2. "
        },
        {
            "id": "comment-14262466",
            "author": "David Smiley",
            "date": "2014-12-31T22:18:17+0000",
            "content": "The attached patch makes TokenGroup's fields private to force Highlighter to use the getters, and I made getStartOffset return matchStartOffset (likewise for 'end'). And I added docs.\n\nI experimented with not having the match vs. not distinction on the internal state in terms of getter and field.  The moment a matching token (score > 0) was added to the group, the semantics of the start & end offset were constrained to be limited to just the matching token(s).  But a boolean query for \"hi\" and \"speed\" failed in testOverlapAnalyzer2 to match what the test was told it should be. IMO the new behavior was totally acceptable, but I'm weary of introducing anything that would change the results without peer review.  So I'll commit this instead in a couple days if there are no further comments. "
        },
        {
            "id": "comment-14263669",
            "author": "ASF subversion and git services",
            "date": "2015-01-03T23:23:12+0000",
            "content": "Commit 1649263 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1649263 ]\n\nLUCENE-6139: TokenGroup start/end offset getters should have been returning offsets of matching tokens when there are some.\n\nAlso made the Highlighter use the getters instead of direct field access. "
        },
        {
            "id": "comment-14263670",
            "author": "ASF subversion and git services",
            "date": "2015-01-03T23:25:31+0000",
            "content": "Commit 1649264 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1649264 ]\n\nLUCENE-6139: TokenGroup start/end offset getters should have been returning offsets of matching tokens when there are some.\n\nAlso made the Highlighter use the getters instead of direct field access. "
        },
        {
            "id": "comment-14332739",
            "author": "Anshum Gupta",
            "date": "2015-02-23T05:01:39+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}