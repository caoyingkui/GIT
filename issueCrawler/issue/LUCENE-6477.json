{
    "id": "LUCENE-6477",
    "title": "Add BKD tree for spatial shape query intersecting indexed points",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "I'd like to explore using dedicated spatial trees for faster shape\nintersection filters than postings-based implementations.\n\nI implemented the tree data structure from\nhttps://www.cs.duke.edu/~pankaj/publications/papers/bkd-sstd.pdf\n\nThe idea is simple: it builds a full binary tree, partitioning 2D\nspace, alternately on lat and then lon, into smaller and smaller\nrectangles until a leaf has <= N (default 1024) points.\n\nIt cannot index shapes (just points), and can then do fast shape\nintersection queries.  Multi-valued fields are supported.\n\nI only implemented the \"point is contained in this bounding box\" query\nfor now, but I think polygon shape querying should be easy to\nimplement using the same approach from LUCENE-6450.\n\nFor indexing, you add BKDPointField (takes lat, lon) to your doc, and\nmust set up your Codec use BKDTreeDocValuesFormat for that field.\nThis DV format wraps Lucene50DVFormat, but then builds the disk-based\nBKD tree structure on the side.  BKDPointInBBoxQuery then requires this\nDVFormat, and casts it to gain access to the tree.\n\nI quantize each incoming double lat/lon to 32 bits precision (so 64\nbits per point) = ~9 milli-meter lon precision at the equator, I\nthink.",
    "attachments": {
        "LUCENE-6477.patch": "https://issues.apache.org/jira/secure/attachment/12731940/LUCENE-6477.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14538016",
            "author": "Michael McCandless",
            "date": "2015-05-11T15:11:34+0000",
            "content": "Work-in-progress patch, with quite a few nocommits still, but the core\nidea is working. "
        },
        {
            "id": "comment-14538079",
            "author": "Michael McCandless",
            "date": "2015-05-11T15:49:25+0000",
            "content": "I tested performance with the same \"bounding boxes around London, UK\"\non 60.8M points test from LUCENE-6450:\n\n\n  Index size disk: 1.2 GB\n  Index size heap: 0.75 MB\n  Index time: 636.0 seconds (incl. forceMerge)\n  Mean query time: .0068 sec\n\n\n\nIndexing time is a bit slower (makes heavy use of OfflineSorter, but\nshould be O(N*log(N) overall).\n\nIt's very fast at search time: ~5.7X faster than GeoHashPrefixTree.\n\nIt also uses very little heap (0.75 MB) at search time for the inner\nnodes of the tree.\n\nIt currently allocates FixedBitSet(maxDoc) per query & segment at\nsearch time (like spatial does with RecursivePrefixTreeStrategy, I\nthink?).  Really it should use BitDocIdSet.Builder, to start sparse\nand upgrade to FixedBitSet only if result set will be \"big-ish\", but\nwhen I do that the query is 2.4X slower, which is frustrating.  I think\nwe could try using SentinelIntSet for the sparse case, like spatial\ndoes in some cases. "
        },
        {
            "id": "comment-14547117",
            "author": "Michael McCandless",
            "date": "2015-05-17T10:27:23+0000",
            "content": "New patch, fixing the last nocommits.  I think it's ready. "
        },
        {
            "id": "comment-14547918",
            "author": "David Smiley",
            "date": "2015-05-18T11:57:14+0000",
            "content": "Mike,\nThis looks cool; it's been on my backlog of interesting patches to look at.  But I noticed it's not in the spatial module and doesn't have \"spatial\" in the package.  Can you please explain to me your rationale why this is so?  We have 3 highlighters that have no APIs in common in the highlighter module, we've got lots of suggesters in the suggest module... why wouldn't all spatial capabilities be in the spatial module?  It needn't fit any interface or have the same dependencies as anything else in the spatial module.  The modules are both an organizational construct and it reduces the total 'jar' weight for those that don't need what's in any one module.  I could imagine \"sandbox\" being an alternative destination if you feel that's appropriate. "
        },
        {
            "id": "comment-14549504",
            "author": "Robert Muir",
            "date": "2015-05-18T23:26:17+0000",
            "content": "It looks like Mike's patch targets the sandbox entirely already... except for some BitDocIdSet changes that need a little explanation \n\nPersonally, I think this is a good approach when things aren't fully baked. Especially in this case where it has not-fully-baked fileformats, nothing anyone wants to infer backwards compatibility for at the very least.\n\nI am a bit worried about OfflineSorter, it seems it will use java.io.tmpdir, which a lot of people probably don't configure for \"serious\" big files like this? And it is not as robust if things can't get cleaned up on windows and so on. But OfflineSorter has some ByteSequenceReader/Writer abstractions, i wonder if long-term we can plug those into our Directory api. Maybe its good to think about a documented way for codecs to freely and easily use scratch files like this, where IndexFileDeleter could help out. For another issue, it shouldn't hold this one up... "
        },
        {
            "id": "comment-14549747",
            "author": "David Smiley",
            "date": "2015-05-19T04:03:30+0000",
            "content": "It looks like Mike's patch targets the sandbox entirely already\n\nDoh! Why yes it is; I overlooked that.  I'll raise my concern at a later time when it's stable and ready to leave the sandbox.  If it were me, it might as well be in an appropriate package even in the sandbox but it's not important. "
        },
        {
            "id": "comment-14552042",
            "author": "Michael McCandless",
            "date": "2015-05-20T09:14:55+0000",
            "content": "I made a fun video animation, to visualize how the BKD tree partitions space and then visits cells at search time, described here: https://plus.google.com/+MichaelMcCandless/posts/6QveLQs7RW6 "
        },
        {
            "id": "comment-14552070",
            "author": "Michael McCandless",
            "date": "2015-05-20T09:42:58+0000",
            "content": "It looks like Mike's patch targets the sandbox entirely already...\n\nRight, I think this really must start in sandbox... it's completely new and quite complex, likely has exciting bugs, writes its own index files and there's no guarantee of back compat, etc.\n\nLonger term, when/if it graduates, I don't think it should go into lucene/spatial: I don't like how \"heavy\" lucene/spatial is, with external libs bleeding into the public APIs (spatial4j, JTS), too-many-abstractions causing barriers for new contributions, test case base classes strangely forked from external libraries and thus failing to print \"reproduce with\" lines, etc.\n\nI think we need competing/alternative approaches that are much more lightweight, and focus on the common case (index points, search shapes), like LUCENE-6450 and this patch... and I think such support really could/should be in Lucene's core, or \"spatial2\" or \"spatiallight\" or something.  And then I think that leaves lucene/spatial supporting the exotic/difficult cases that require (?) all the abstractions?\n\nexcept for some BitDocIdSet changes that need a little explanation\n\nWoops, that was a leftover from struggling ... I'll revert it.\n\nMaybe its good to think about a documented way for codecs to freely and easily use scratch files like this, where IndexFileDeleter could help out.\n\nThat's a good idea ... it's true this is a heavy user of OfflineSorter, because it needs to recursively partition all points, separately in lat and lon.\n\nI'll post a new patch soon, adding missing javadocs, marking things experimental, adding polygon support. "
        },
        {
            "id": "comment-14552074",
            "author": "Michael McCandless",
            "date": "2015-05-20T09:46:43+0000",
            "content": "I haven't explored this yet, but talking to Karl Wright it sounds like integrating geo3d into the BKD tree would be quite simple, and would \"solve\" the inefficiency now of visiting leaf cells outside the shape but inside its bounding box, probably giving a good speedup over the simple polygon filtering we do in LUCENE-6450. "
        },
        {
            "id": "comment-14552250",
            "author": "David Smiley",
            "date": "2015-05-20T12:36:06+0000",
            "content": "Longer term, when/if it graduates, I don't think it should go into lucene/spatial: I don't like how \"heavy\" lucene/spatial is, with external libs bleeding into the public APIs (spatial4j, JTS), too-many-abstractions causing barriers for new contributions, test case base classes strangely forked from external libraries and thus failing to print \"reproduce with\" lines, etc.\nI think we need competing/alternative approaches that are much more lightweight, and focus on the common case (index points, search shapes), like LUCENE-6450 and this patch... and I think such support really could/should be in Lucene's core, or \"spatial2\" or \"spatiallight\" or something. And then I think that leaves lucene/spatial supporting the exotic/difficult cases that require  all the abstractions?\n\nIn a nutshell, you don't like the code in the spatial module for a variety of reasons, but nonetheless that doesn't prevent any other code from being there too that meets your satisfaction.\n\nSeparately from the topic of spatial code belonging in the spatial module, I definitely think it's worth re-looking at the (only) core/base abstraction in the spatial module \u2013 SpatialStrategy, to come up with a new design that is not dependent on external libs.  p.s. JTS is most definitely not part of the public API of Lucene spatial \u2013 preventing that was half the reason for Spatial4j's existence.  The other half is about potential re-use for shape/geometry calculations that otherwise has nothing to do with Lucene. "
        },
        {
            "id": "comment-14553028",
            "author": "Michael McCandless",
            "date": "2015-05-20T20:15:47+0000",
            "content": "New patch, removing the BitDocIdSet changes, adding javadocs (ant precommit passes).\n\nI also added BKDPointInPolygonQuery, using same approach as LUCENE-6450, and folded it simplistically into the test by sometimes randomly using it to make the rect bounding box.\n\nCuriously, I had to use 5 points (first and last point repeated) to fully close the polygon myself ... is this expected (Nicholas Knize?).\n\nI'll remove IndexAndSearchOpenStreetMaps.java before committing ... "
        },
        {
            "id": "comment-14553090",
            "author": "David Smiley",
            "date": "2015-05-20T20:55:02+0000",
            "content": "Curiously, I had to use 5 points (first and last point repeated) to fully close the polygon myself ... is this expected (Nicholas Knize?).\nYes.\n\nMight you try a 360x360 world like I mentioned on your G+ post? "
        },
        {
            "id": "comment-14553259",
            "author": "Nicholas Knize",
            "date": "2015-05-20T22:35:59+0000",
            "content": "Curiously, I had to use 5 points (first and last point repeated) to fully close the polygon myself ... is this expected \n\nYes, in order to create the closed edge.  To keep everything simple and fast there is no polygon validation. So that vanilla method obviously doesn't work for OGC compliant polys. It would need to be passed an array of vertex coordinates translated \"correctly\".  "
        },
        {
            "id": "comment-14553953",
            "author": "Michael McCandless",
            "date": "2015-05-21T09:17:07+0000",
            "content": "Yes, in order to create the closed edge.\n\nOK thanks for confirming ... I'll try to add some simple validation. "
        },
        {
            "id": "comment-14557248",
            "author": "Michael McCandless",
            "date": "2015-05-23T09:54:41+0000",
            "content": "Another iteration, adding validation for the polygon query (just checking that it's \"closed\").\n\nI also stopped redundantly storing the 32 bit lat, 32 bit lon in the BKD tree, and instead look it up from the wrapped DVs ... I had thought the loss of locality would hurt but it turns out it's only ~8% slower on the \"bbox around London\" test, and it saves 66% of the size of the BKD tree. "
        },
        {
            "id": "comment-14557249",
            "author": "Michael McCandless",
            "date": "2015-05-23T09:56:28+0000",
            "content": "Might you try a 360x360 world like I mentioned on your G+ post?\n\nSorry, I haven't tried this yet ... I'd like to instead try doing a better job picking the pivot dimension: right now I just alternate lat and lon on each recursion, but in reading up on KD trees, it's (maybe) better to pick the dimension that has the most variance so you tend to get more square leaf cells ... I'll try exploring this. "
        },
        {
            "id": "comment-14557694",
            "author": "Michael McCandless",
            "date": "2015-05-24T10:03:08+0000",
            "content": "Another iteration, improving the pivot selection on each recursion to try to make closer-to-square-shaped leaf cells.  All I do is pick the longer dimension to slice, instead of just alternating lat/lon like before.\n\nThis gives a ~7% speedup on the \"bboxes around London over OpenStreetMap points\" benchmark.\n\nThe same number of leaf cells must be visited as before (since it's a fixed 512-1024 points per leaf cell), but because the cells are more square shaped, there are fewer cells that cross the boundary and those cells are slower because we must pull the lat/lon for each point and check it against the query shape (vs cells we know are fully enclosed, where we just blindly add all docIDs).\n\nI made another video, and you can definitely see that the cells are \"less slivery\": https://plus.google.com/+MichaelMcCandless/posts/Daj9FgYPdtv "
        },
        {
            "id": "comment-14568848",
            "author": "Michael McCandless",
            "date": "2015-06-02T09:41:26+0000",
            "content": "Bump fix version to 5.3 "
        },
        {
            "id": "comment-14568869",
            "author": "Michael McCandless",
            "date": "2015-06-02T09:59:20+0000",
            "content": "New patch, removing nocommits, adding javadocs.  The random test seems to survive beasting ... I think it's ready.  I'll commit soon... "
        },
        {
            "id": "comment-14570892",
            "author": "ASF subversion and git services",
            "date": "2015-06-03T14:16:41+0000",
            "content": "Commit 1683340 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1683340 ]\n\nLUCENE-6477: add experimental but very fast BKD tree for geo-spatial 'bbox/poly contains indexed lat/lon points' queries "
        },
        {
            "id": "comment-14570931",
            "author": "ASF subversion and git services",
            "date": "2015-06-03T14:41:01+0000",
            "content": "Commit 1683348 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1683348 ]\n\nLUCENE-6477: add experimental but very fast BKD tree for geo-spatial 'bbox/poly contains indexed lat/lon points' queries "
        },
        {
            "id": "comment-14571856",
            "author": "ASF subversion and git services",
            "date": "2015-06-03T23:56:15+0000",
            "content": "Commit 1683446 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1683446 ]\n\nLUCENE-6477: make nightly test less evil "
        },
        {
            "id": "comment-14571858",
            "author": "ASF subversion and git services",
            "date": "2015-06-03T23:56:35+0000",
            "content": "Commit 1683447 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1683447 ]\n\nLUCENE-6477: make nightly test less evil "
        },
        {
            "id": "comment-14571892",
            "author": "ASF subversion and git services",
            "date": "2015-06-04T00:28:53+0000",
            "content": "Commit 1683448 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1683448 ]\n\nLUCENE-6477: allow boundary tolerance for poly query verify; fail test fast if one thread fails "
        },
        {
            "id": "comment-14571893",
            "author": "ASF subversion and git services",
            "date": "2015-06-04T00:30:06+0000",
            "content": "Commit 1683449 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1683449 ]\n\nLUCENE-6477: allow boundary tolerance for poly query verify; fail test fast if one thread fails "
        },
        {
            "id": "comment-14576499",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T23:26:35+0000",
            "content": "Commit 1684084 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1684084 ]\n\nLUCENE-6477: tweak TODOs/javadocs/comments "
        },
        {
            "id": "comment-14576500",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T23:27:15+0000",
            "content": "Commit 1684085 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684085 ]\n\nLUCENE-6477: tweak TODOs/javadocs/comments "
        },
        {
            "id": "comment-14576508",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T23:39:51+0000",
            "content": "Commit 1684086 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1684086 ]\n\nLUCENE-6477: include delegate heap usage in Accountable; fix javadocs "
        },
        {
            "id": "comment-14576509",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T23:40:43+0000",
            "content": "Commit 1684087 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684087 ]\n\nLUCENE-6477: include delegate heap usage in Accountable; fix javadocs "
        },
        {
            "id": "comment-14713127",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:50+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}