{
    "id": "SOLR-551",
    "title": "Solr replication should include the schema also",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "replication (java)"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The current Solr replication just copy the data directory . So if the\nschema changes and I do a re-index it will blissfully copy the index\nand the slaves will fail because of incompatible schema.\n\nSo the steps we follow are\n\n\tStop rsync on slaves\n\tUpdate the master with new schema\n\tre-index data\n\tforEach slave\n\t\n\t\tKill the slave\n\t\tclean the data directory\n\t\tinstall the new schema\n\t\trestart\n\t\tdo a manual snappull\n\t\n\t\n\n\n\nThe amount of work the admin needs to do is quite significant\n(depending on the no:of slaves). These are manual steps and very error\nprone\n\nThe solution :\nMake the replication mechanism handle the schema replication also. So\nall I need to do is to just change the master and the slaves synch\nautomatically\n\nWhat is a good way to implement this?\n\nWe have an idea along the following lines\n\nThis should involve changes to the snapshooter and snappuller scripts\nand the snapinstaller components\n\nEverytime the snapshooter takes a snapshot it must keep the timestamps\nof schema.xml and elevate.xml (all the files which might affect the\nruntime behavior in slaves)\nFor subsequent snapshots if the timestamps of any of them is changed\nit must copy the all of them also for replication.\n\nThe snappuller copies the new directory as usual\n\nThe snapinstaller checks if these config files are present ,\n\nif yes,\n\n\tIt can create a temporary core\n\tinstall the changed index and configuration\n\tload it completely and swap it out with the original core",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12593638",
            "date": "2008-05-01T20:56:37+0000",
            "content": "I agree with the goals, and this does seem doable now that we have multi-core. "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12598476",
            "date": "2008-05-20T21:16:44+0000",
            "content": "Why is the schema stored outside of the index?  Is another possible option to store it in a magic record within the index?  That allows anyone to retrieve it that wants to see the schema, for example the UI might want to know the static fields quickly and can use the schema to determine that information.  \n\nBasically, can some meta-data about the index be stored in the index which solves the replication problem, and makes it more easily accessible to the outside world? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12598498",
            "date": "2008-05-20T21:55:56+0000",
            "content": "The Hadoop -user group has a recent thread about synchronizing config distribution and it looks like people really like the idea of retrieving the configs from a well known URL.  Perhaps that's the thing to do here, too (a la admin pages). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12641328",
            "date": "2008-10-21T09:58:19+0000",
            "content": "Resolved as part of SOLR-561 "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12769585",
            "date": "2009-10-24T04:54:39+0000",
            "content": "change component from scripts to java "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775509",
            "date": "2009-11-10T15:51:42+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}