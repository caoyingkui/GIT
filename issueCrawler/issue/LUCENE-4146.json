{
    "id": "LUCENE-4146",
    "title": "-Dtests.iters combined with -Dtestmethod never fails?",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "a test that is hardcoded to fail will report succes if you run it with -Dtests.iters",
    "attachments": {
        "TEST-org.apache.lucene.TestSearch.iters-no-fail.xml": "https://issues.apache.org/jira/secure/attachment/12532149/TEST-org.apache.lucene.TestSearch.iters-no-fail.xml",
        "TEST-org.apache.lucene.TestSearch.no-iters-fail.xml": "https://issues.apache.org/jira/secure/attachment/12532150/TEST-org.apache.lucene.TestSearch.no-iters-fail.xml",
        "LUCENE-4146.fail.patch": "https://issues.apache.org/jira/secure/attachment/12532148/LUCENE-4146.fail.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-15T00:57:06+0000",
            "content": "trivial patch adding a test that is guaranteed to fail.\n\nWhen run simply, it fails as expected...\n\n\nhossman@bester:~/lucene/4x_dev/lucene/core$ ant test -Dtestcase=TestSearch -Dtestmethod=testFailure\nBuildfile: /home/hossman/lucene/4x_dev/lucene/core/build.xml\n...\ntest:\n   [junit4] <JUnit4> says \u00a1Hola! Master seed: E9EE2618BEEE855E\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] Suite: org.apache.lucene.TestSearch\n   [junit4] FAILURE 0.14s | TestSearch.testFailure\n   [junit4]    > Throwable #1: java.lang.AssertionError: This statement is false\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([E9EE2618BEEE855E:8153D5F484DEE7F1]:0)\n   [junit4]    > \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]    > \tat org.junit.Assert.assertTrue(Assert.java:43)\n   [junit4]    > \tat org.apache.lucene.TestSearch.testFailure(TestSearch.java:39)\n...\n   [junit4]    > \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSearch -Dtests.method=testFailure -Dtests.seed=E9EE2618BEEE855E -Dtests.locale=es_PA -Dtests.timezone=Pacific/Chatham -Dargs=\"-Dfile.encoding=UTF-8\"\n   [junit4]   2>\n   [junit4]    > (@AfterClass output)\n   [junit4]   2> NOTE: test params are: codec=Lucene40: {}, sim=RandomSimilarityProvider(queryNorm=false,coord=false): {}, locale=es_PA, timezone=Pacific/Chatham\n   [junit4]   2> NOTE: Linux 2.6.31-23-generic amd64/Sun Microsystems Inc. 1.6.0_24 (64-bit)/cpus=2,threads=1,free=105287320,total=124125184\n   [junit4]   2> NOTE: All tests run in this JVM: [TestSearch]\n   [junit4]   2> \n   [junit4] Completed in 0.37s, 1 test, 1 failure <<< FAILURES!\n   [junit4]  \n   [junit4] JVM J0:     0.53 ..     1.50 =     0.97s\n   [junit4] Execution time total: 1.55 sec.\n   [junit4] Tests summary: 1 suite, 1 test, 1 failure\n\nBUILD FAILED\n/home/hossman/lucene/4x_dev/lucene/common-build.xml:1019: The following error occurred while executing this line:\n/home/hossman/lucene/4x_dev/lucene/common-build.xml:745: There were test failures: 1 suite, 1 test, 1 failure\n\nTotal time: 5 seconds\nhossman@bester:~/lucene/4x_dev/lucene/core$ cp ../build/core/test/TEST-org.apache.lucene.TestSearch.xml ~/tmp/TEST-org.apache.lucene.TestSearch.no-iters-fail.xml\n\n\n\nHowever, when using -Dtests.iters, the test \"passes\" - but there's obvious record that it even ran...\n\n\nhossman@bester:~/lucene/4x_dev/lucene/core$ ant test -Dtests.iters=2 -Dtestcase=TestSearch -Dtestmethod=testFailureBuildfile: /home/hossman/lucene/4x_dev/lucene/core/build.xml\n...\ntest:\n   [junit4] <JUnit4> says cze\u015b\u0107. Master seed: 9BA05DE6F296F7C4\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] Suite: org.apache.lucene.TestSearch\n   [junit4] Completed in 0.07s, 0 tests\n   [junit4]  \n   [junit4] JVM J0:     0.73 ..     1.45 =     0.71s\n   [junit4] Execution time total: 1.47 sec.\n   [junit4] Tests summary: 1 suite, 0 tests\n     [echo] 5 slowest tests:\n [tophints]   0.15s | org.apache.lucene.TestSearch\n\nBUILD SUCCESSFUL\nTotal time: 5 seconds\nhossman@bester:~/lucene/4x_dev/lucene/core$ cp ../build/core/test/TEST-org.apache.lucene.TestSearch.xml ~/tmp/TEST-org.apache.lucene.TestSearch.iters-no-fail.xml\n\n\n\n(note in the XML file that it says no tests were run) ",
            "author": "Hoss Man",
            "id": "comment-13295409"
        },
        {
            "date": "2012-06-15T06:45:42+0000",
            "content": "This isn't a bug, Hoss. This is an unfortunate API shortcoming of JUnit that I had to accomodate somehow. So what happens is that:\n\n1) no two junit tests can have the same \"description\" (which in realistic terms means no two junit tests can have an identical method name); this confuses the hell out of all IDE clients and other clients (like ant, maven, etc.).\n2) because of the above (and wanting to have separate tests for repetitions), repeated test names are created so that they contain a sequential number and a seed (to make then unique).\n3) because of the above a method filter no longer works because that exact string doesn't match the generated pseudo-method name.\n\nA workaround is to add globs around method name as in:\n\nant test -Dtests.iters=2 -Dtestcase=TestSearch -Dtestmethod=*testFailureBuildfile*\n\n\n\nYeah, I realize this sucks but I have no better ideas for the moment (that would work with existing JUnit infrastructure). ",
            "author": "Dawid Weiss",
            "id": "comment-13295485"
        },
        {
            "date": "2012-06-15T06:49:11+0000",
            "content": "Also, completing the above answer \u2013 this issue also affects things like \"re-running\" a test from Eclipse and other IDEs. If you run your suite with -Dtests.iters=5 you'll get a tree of tests that executed, with their \"unique\" names that include a seed. If you click on a given test and re-run it Eclipse will try to filter execution to that particular test (that name) and if the seed is random (and not fixed) the chances of such a test occurring again are nearly zero, so you'll get an empty result (no executed test).\n\nI've tried a number of workarounds/ hacks but none of them worked well. This is really the best of what I've tried. ",
            "author": "Dawid Weiss",
            "id": "comment-13295489"
        },
        {
            "date": "2012-06-15T15:57:27+0000",
            "content": "I can't comment on how anything works in any IDEs, so I'll take your word for it \u2013 but from a command line standpoint it's really confusing, particularly since \"test-help\" actually says this combo should work...\n\n\n     [echo] # Repeats a given test N times (note filters).\n     [echo] ant test -Dtests.iters=N -Dtestcase=ClassName -Dtestmethod=mytest\n\n\n\nIt seems like we should do the following...\n\n\n\tchange the code path that reads the system properties used to pick the tests to fail if this combination (tests.iters + a non-globed \"test method\") is used (rather then silently lying and saying (0) tests passed)\n\tchange \"-Dtestmethod=XXX\" so that instead of being an alias for \"-Dtests.method=XXX\" it becomes an alias for \"-Dtests.method=XXX*\" (similar to how \"-D=testcase=XXX\" is an alias for \"-Dtests.class=*.XXX\")\n\n\n\nOr at the very least...\n\n\n\tfix test-help to not suggest something guaranteed to not work \n\n\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-13295735"
        },
        {
            "date": "2012-06-15T16:53:29+0000",
            "content": "As for test-help \u2013 everybody makes mistakes, sorry. Can you correct it, please?\n\nOther than that all your suggestions are fine by me. I like testmethod to be an alias of method* best (even if it causes more than one test to be included).\n\nI realize this is confusing but this really doesn't stem from my code and is a non-fixable JUnit API (because of how many things depend on it I doubt it'll ever be corrected). ",
            "author": "Dawid Weiss",
            "id": "comment-13295761"
        },
        {
            "date": "2012-06-19T01:16:32+0000",
            "content": "I realize this is confusing but this really doesn't stem from my code and is a non-fixable JUnit API (because of how many things depend on it I doubt it'll ever be corrected).\n\nI totally understand ... the missing piece for me was not realizing that the \"filtering\" happens after the \"paramaterizing\" so a filter on \"testFoo\" won't match \"testFoo[0]\" etc...\n\nOther than that all your suggestions are fine by me. \n\nI'll fix test-help and make the change to our \"testmethod\" alias, but i'm not sure about this one...\n\nchange the code path that reads the system properties used to pick the tests to fail if this combination (tests.iters + a non-globed \"test method\") is used (rather then silently lying and saying (0) tests passed)\n\n...unless i'm missing something, lucene's build xml files & test base class don't have anything to do with parsing these system properties correct?  should i file this as a feature request in the randomizedtesting tracker? ",
            "author": "Hoss Man",
            "id": "comment-13396438"
        },
        {
            "date": "2012-06-19T07:52:51+0000",
            "content": "...not realizing that the \"filtering\" happens after the \"paramaterizing\" so a filter on \"testFoo\" won't match \"testFoo[0]\" etc...\n\nThis is hairy in JUnit. I mean design wise it's very pretty because filtering is completely separated from the structure of tests but in practice the test runner knows nothing about the filter. It would all work if test Description class had a separate notion of \"test class, test method and test name\". Instead, these things are derivatives of each other in an ugly-to-fix way. Even creating a test with a custom name is challenging...\n\nhttp://grepcode.com/file_/repo1.maven.org/maven2/junit/junit/4.10/org/junit/runner/Description.java/?v=source\n\n> ...unless i'm missing something, lucene's build xml files & test base class don't have anything to do with parsing these system properties correct? should i file this as a feature request in the randomizedtesting tracker?\n\nThis combination is valid in some cases \u2013 for example if you want to filter down to a particular repetition of a repeated test (which has a particular seed) you still can do it, so I wouldn't want to ban it at the runner level. What I was thinking about was to use ANT's condition and check a compound statement that would fail if both properties are non-empty and method filter doesn't contain \"*\". ANT's conditions are screwy but I'm sure it can be done.\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13396587"
        },
        {
            "date": "2012-06-20T18:00:59+0000",
            "content": "What I was thinking about was to use ANT's condition and check a compound statement that would fail if both properties are non-empty and method filter doesn't contain \"*\". ANT's conditions are screwy but I'm sure it can be done.\n\ndone and done.\n\nThanks for helping me work through this Dawid.\n\nCommitted revision 1352238. trunk\nCommitted revision 1352240. 4x ",
            "author": "Hoss Man",
            "id": "comment-13397697"
        },
        {
            "date": "2012-06-20T19:42:49+0000",
            "content": "Thanks Hoss, I've been too busy to tackle these issues but I see the light at the end of the tunnel. Interestingly, this problem has been partially addressed by me before here:\n\nhttps://github.com/carrotsearch/randomizedtesting/issues/89\n\nThis will print a warning when the filter name contains a seed but the seed hasn't been fixed, so a new run has totally different set of test names. This happens when you try to narrow down to a particular test repetition in Eclipse, for example. I print a warning then:\n\n\nWARNING: Empty set of tests for suite class TestSearch after filters applied. This can be caused by an attempt to filter tests with a random seed. Use constant seed (-Dtests.seed=deadbeef) to get a reproducible (and filterable) set of tests.\n\n\n\nI filed an issue to do the same in the case above (filtering by fixed method name, but all method names are expanded with tests.iters:\n\nhttps://github.com/carrotsearch/randomizedtesting/issues/111\n\nThis should help if anybody encounters this in the future (or from an IDE). ",
            "author": "Dawid Weiss",
            "id": "comment-13397807"
        }
    ]
}