{
    "id": "SOLR-10915",
    "title": "Make SolrClient classes extendable without code duplication",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "SolrClient used to be easily extendable but our move to Builder pattern has made it impossible to extend those classes without code duplication. \nAs an example, if we wanted to extend HttpSolrClient we would also want to extend the Builder. The problem is that the constructor of the main class, does not accept the builder object but explicit parameters, and the inherited class doesn't have access to any of those values from the Builder object as they are all private. \n\nGenerally, we'd want to have the client object constructor accept the Builder, instead of explicit values, and also make the Builder values protected so the inherited classes could use them.\n\nI'm marking this as a blocker for 7.0 as this is an important piece that needs to be fixed before the major release, specially now that we know that this problem exists.",
    "attachments": {
        "SOLR-10915.patch.without-deprecations": "https://issues.apache.org/jira/secure/attachment/12873675/SOLR-10915.patch.without-deprecations",
        "SOLR-10915.patch": "https://issues.apache.org/jira/secure/attachment/12873848/SOLR-10915.patch",
        "SOLR-10915.patch.with-deprecations": "https://issues.apache.org/jira/secure/attachment/12873676/SOLR-10915.patch.with-deprecations"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-19T17:13:33+0000",
            "content": "Yes, this is true.  Most (see below) of the SolrClient implementations have their constructors at protected visibility, so this is less of a problem with extending the SolrClients and more of a problem of being able to re-use the Builder code/pattern when you do so?  (I ask this not in an attempt to minimize the issue, but purely for clarification).\n\n(Related to this issue in my mind is the fact that CloudSolrClient doesn't have a protected constructor.  This was raised on the mailing list, and a patch was put forward in SOLR-9535 .  Might be a good time to give that a little attention too, though it's not as important as the concerns you raise in this JIRA)\n\nGetting back to this issue, I plan to push a patch for this tonight, unless you've already started on it Anshum Gupta? ",
            "author": "Jason Gerlowski",
            "id": "comment-16054373"
        },
        {
            "date": "2017-06-19T17:40:34+0000",
            "content": "Jason Gerlowski, ideally I'd want to build my extended client with something like:\n\nMyClient client = new MyBuilder().withBaseSolrUrl(\"http://myBaseUrl/solr\").build();\n\n\n\nbut MyBuilder wouldn't have access to anything from the parent Builder class. The constructor for the client would need the object and so we'd have a deadlock.\n\nI could just add a setter and get things taken care of there but I wouldn't be able to do anything at construction time. \nAlso, adding everything to the client itself instead of through the builder breaks how it should be extended in my opinion and shouldn't be recommended. \n\nI haven't started working on this but I know what to do. If you want to take a shot at it, go for it and I can review it and get this in. ",
            "author": "Anshum Gupta",
            "id": "comment-16054432"
        },
        {
            "date": "2017-06-19T17:43:11+0000",
            "content": "Also, SOLR-9535 seems to overlap with this to a reasonable extent. We could either commit this together as we're trying to solve the common problem of being able to extend the clients in a meaningful manner without duplicating code. ",
            "author": "Anshum Gupta",
            "id": "comment-16054443"
        },
        {
            "date": "2017-06-19T17:46:45+0000",
            "content": "That all makes sense; I'll do this later today (folding in the SOLR-9535 changes as you suggested above). ",
            "author": "Jason Gerlowski",
            "id": "comment-16054452"
        },
        {
            "date": "2017-06-20T13:01:32+0000",
            "content": "I made the changes pretty much exactly as you requested above Anshum.\n\nOne question I had when making the changes was whether we also wanted to deprecate the existing constructors and remove any uses of them.  You didn't explicitly call for that in the issue description, but since one of the main goals of the builders was to cut down on constructor duplication/sprawl, it would make sense.\n\nAnyway, I've uploaded two patches, one that leaves the existing constructors as-is, and another that deprecates the existing ctors and changes any calls to go to the builder-based constructor.\n\nBoth pass tests on master. ",
            "author": "Jason Gerlowski",
            "id": "comment-16055711"
        },
        {
            "date": "2017-06-20T13:02:21+0000",
            "content": "(Both patches contain the CloudSolrClient visibility change from SOLR-9535 that we said we'd fold into this JIRA) ",
            "author": "Jason Gerlowski",
            "id": "comment-16055713"
        },
        {
            "date": "2017-06-20T16:00:29+0000",
            "content": "If I'm understanding what's going on here, I really like it.  I hadn't thought of using the builder in the constructor ... that's a really good idea.\n\nIt sounds like this would make both the client itself and its builder user-extendable.\n\nI did notice a couple of things in the patch, not sure if these are actual problems or a lack of understanding on my part:\n\n\n\tWhere a Builder class has been added, it doesn't have any explicit visibility, while the existing Builder classes are explicitly marked public.\n\tThe new Builder classes do not have any fluent \"with*\" methods, only a multiple-argument constructor.  The existing ones have simple constructors (no-arg and in some cases one-arg) and fluent methods for configuration.\n\n\n\nAs for how to handle removal and deprecation ... are we at a point where we can simply remove the other constructors in master/branch_7x?  They should have already been deprecated when the Builder pattern was implemented.  The remaining non-deprecated constructor (before this patch) is likely private or protected, and I don't think we have any reason to worry about deprecating it before we change it to one that accepts a Builder. ",
            "author": "Shawn Heisey",
            "id": "comment-16056009"
        },
        {
            "date": "2017-06-20T16:38:59+0000",
            "content": "A few responses:\n\nWhere a Builder class has been added, it doesn't have any explicit visibility, while the existing Builder classes are explicitly marked public.\n\nThat's a good point/question.  Most of the builders added in this patch were for trivial SolrClient subclasses that were only used in that same Java file. Because of that I didn't give visibility a ton of thought- I just left them as package-scoped.  But we could probably do something more thoughtful on a case-by-case basis here if it's worth it.\n\nThe new Builder classes do not have any fluent \"with*\" methods, only a multiple-argument constructor.\n\nThe convention I've been trying to follow is that truly required arguments should go in the Builder() ctor, to force users to provide them.  Optional ones I've been creating fluent withFoo methods for.  The lack of added withFoo methods in this patch is (I think) just a coincidence related to the sort of SolrClient subclasses I ran into with this patch (created with a very directed purpose, with limited visibility, for 1 or 2 Java files).  If I made any mistakes following that convention, or you would prefer deviating from the convention for other reasons, I'd be fine with that too.\n\nThe remaining non-deprecated constructor (before this patch) is likely private or protected, and I don't think we have any reason to worry about deprecating it before we change it to one that accepts a Builder.\n\nThat seems reasonable to me, but I also see an argument that methods marked as protected are a part of our API and we'd need to give more warning.  Either way would be fine with me. ",
            "author": "Jason Gerlowski",
            "id": "comment-16056053"
        },
        {
            "date": "2017-06-20T17:57:14+0000",
            "content": "Thanks Jason. The patch looks good overall but I think we should only have client constructors that accept the builder, and nothing else - even private constructors. Everything that is needed is a part of the builder object, and so can be extracted. That certainly means more work, but I think it is worth it. e.g.\n\n// L209 in the patch\n  protected CloudSolrClient(Builder builder) {\n    this(builder.zkHosts, builder.zkChroot, builder.solrUrls, builder.httpClient, builder.loadBalancedSolrClient,\n        builder.lbClientBuilder, builder.shardLeadersOnly, builder.directUpdatesToLeadersOnly, builder.stateProvider);\n}\n\n\n\nWe should just move the implementation of that private constructor in here.\n\nI don't personally have a strong opinion around withFoo methods Vs those being a part of the constructor. As long as that list is restricted to < 3 params (almost an arbitrary number that's not too high), I don't have a problem.\n\nThat seems reasonable to me, but I also see an argument that methods marked as protected are a part of our API and we'd need to give more warning. Either way would be fine with me.\nWe aren't 'removing' anything here but just deprecating so we should be fine. ",
            "author": "Anshum Gupta",
            "id": "comment-16056177"
        },
        {
            "date": "2017-06-20T18:08:22+0000",
            "content": "I think I'm reading you wrong.\n\nwe should only have client constructors that accept the builder, and nothing else - even private constructors.\n\nand\n\nWe aren't 'removing' anything here but just deprecating so we should be fine\n\nseem to conflict a little bit.  The first implies removing all constructors except the ones created by this patch.  The second (as I read it) says that we should be deprecating but not removing any constructors here.\n\nI'm fine with either approach, just wanted to clarify before updating the patch.  Sorry for the confusion on my part. ",
            "author": "Jason Gerlowski",
            "id": "comment-16056201"
        },
        {
            "date": "2017-06-20T18:12:50+0000",
            "content": "Sorry about that confusion, should've read what I wrote . \n\nI do intend to have only constructors that accept a builder object. Everything else that has never been released i.e. was added after the last release OR is private can be completely removed, and constructors that are protected/public should be marked as deprecated.\n\nDoes this make sense? ",
            "author": "Anshum Gupta",
            "id": "comment-16056210"
        },
        {
            "date": "2017-06-20T21:28:41+0000",
            "content": "Jason Gerlowski one more thing, can you have the extension of the patch be .patch so my browser doesn't auto-download the file?  ",
            "author": "Anshum Gupta",
            "id": "comment-16056496"
        },
        {
            "date": "2017-06-20T22:16:39+0000",
            "content": "There's existing constructors that were released in 6.6, which need to be handled and either removed, or deprecated with our move to the single format constructor for SolrClients. \n\nJason Gerlowski, Shawn Heisey, and I had a discussion on irc and decided that we shouldn't be going crazy with the code removal, and instead should just happily deprecate stuff. It does mean working around with the current code and leaving it unclean but considering this is publicly released code, it doesn't make sense to just remove it.\n\nHere's the approach that Jason suggested, which I think makes sense to handle existing constructors. This routes everything through the new Builder implementation.\n\n\npublic HttpSolrClient(String url, ResponseParser parser, Foo foo, Bar bar) {\n    final HttpSolrClient.Builder builder = new HttpSolrClient.Builder(url).withResponseParser(parser).withFoo(foo)...;\n    this(builder);\n}\n\npublic HttpSolrClient(Builder builder) {\n  /* actual constructor implementation/logic */\n}\n\n ",
            "author": "Anshum Gupta",
            "id": "comment-16056564"
        },
        {
            "date": "2017-06-21T10:47:56+0000",
            "content": "Updated patch.  The only constructor I was able to remove outright was a private one in CloudSolrClient.  The others have been deprecated, with their implementations changed to call out to the Builder-based ctor.\n\nAll tests pass. ",
            "author": "Jason Gerlowski",
            "id": "comment-16057321"
        },
        {
            "date": "2017-06-22T22:25:55+0000",
            "content": "Thanks Jason. Patch looks good. I've fixed a typo here and there and removed SolrExampleTests.java as it didn't really have any changes but just import reordering.\n\nHere's the updated patch.\n\nI'm running the tests and I'll commit once the tests pass. ",
            "author": "Anshum Gupta",
            "id": "comment-16060113"
        },
        {
            "date": "2017-06-23T16:17:57+0000",
            "content": "I'm seeing some pre-commit failures. I've fixed a couple of them, but there are more. Will commit once I fix them. ",
            "author": "Anshum Gupta",
            "id": "comment-16061165"
        },
        {
            "date": "2017-06-23T18:31:05+0000",
            "content": "Commit e46d39bd5a571522bb2b9ffe97e7e0bca5d9836c in lucene-solr's branch refs/heads/master from Anshum Gupta\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e46d39b ]\n\nSOLR-10915: Make builder based SolrClient constructors to be the only valid way to construct client objects and increase the visibility of builder elements to be protected so extending the builder, and the clients is possible. ",
            "author": "ASF subversion and git services",
            "id": "comment-16061355"
        },
        {
            "date": "2017-06-24T16:21:39+0000",
            "content": "I want to commit on top of \n\ncommit e43253312f965ba838d80c2000dee761df1f25f5\nAuthor: Uwe Schindler <uschindler@apache.org>\nDate:   Sat Jun 24 15:35:00 2017 +0200\n\n\nand having precommit errors \n\n\n\ncommon.compile-test:\n    [javac] Compiling 3 source files to /lucene-solr/solr/build/solr-solrj/classes/test\n    [javac] /lucene-solr/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest.java:143: error: non-static variable this cannot be referenced from a static context\n    [javac]         return new ErrorTrackingConcurrentUpdateSolrClient(this);\n    [javac]                ^\n{qoute}\nis ok to push anyway? \n ",
            "author": "Mikhail Khludnev",
            "id": "comment-16062048"
        },
        {
            "date": "2017-06-24T16:47:56+0000",
            "content": "Mikhail Khludnev did you intend to comment on this JIRA?\n\nOn a side note, if you are seeing pre-commit errors, you shouldn't be committing as it would break the build. Is this something you changed? ",
            "author": "Anshum Gupta",
            "id": "comment-16062058"
        },
        {
            "date": "2017-06-24T20:52:02+0000",
            "content": "ok. Sorry for buzz, Anshum Gupta. ant clean fixed it. ",
            "author": "Mikhail Khludnev",
            "id": "comment-16062125"
        }
    ]
}