{
    "id": "LUCENE-4047",
    "title": "Cleanup of LuceneTestCase",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "general/build",
            "general/test"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "functionally split large blocks of code that do logically different things, organize and order them into rules. Use RandomizedRunner facilities for ensuring scope resources (Directory, temporary folders) are properly disposed of. Use RandomizedRunner facilities for reporting reproduce message.\n\nI have a working branch for this at github. Polishing off the rough edges.",
    "attachments": {
        "LUCENE-4047.patch": "https://issues.apache.org/jira/secure/attachment/12526744/LUCENE-4047.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-13T08:17:22+0000",
            "content": "Incorporated in refactoring. ",
            "author": "Dawid Weiss",
            "id": "comment-13274231"
        },
        {
            "date": "2012-05-14T11:56:54+0000",
            "content": "A patch with cleanups to LuceneTestCase. Most of the previous code blobs from before-after methods have been refactored into rules that have a single concern (there are exceptions).\n\nI'd appreciate if folks could test against temporarily introduced bugs to check that the output indeed catches them and is consistent. It can be more verbose than previously (that is: more errors can be printed than before) because with rules you can push more than a single failure. ",
            "author": "Dawid Weiss",
            "id": "comment-13274568"
        },
        {
            "date": "2012-05-14T12:02:25+0000",
            "content": "A patch with cleanups to LuceneTestCase. Most of the previous code blobs from before-after methods have been refactored into rules that have a single concern (there are exceptions).\n\nI'd appreciate if folks could test against temporarily introduced bugs to check that the output indeed catches them and is consistent. It can be more verbose than previously (that is: more errors can be printed than before) because with rules you can push more than a single failure. ",
            "author": "Dawid Weiss",
            "id": "comment-13274573"
        },
        {
            "date": "2012-05-14T13:51:13+0000",
            "content": "Apologies for the noise \u2013 jira issues (very long lags) and apparently no cookie token for submitting forms. ",
            "author": "Dawid Weiss",
            "id": "comment-13274596"
        },
        {
            "date": "2012-05-14T14:32:57+0000",
            "content": "The DirectoryCloseable won't work: MockDirectoryWrapper checks for index corruption on close(),\nwe cannot just silently ignore Throwable from here. ",
            "author": "Robert Muir",
            "id": "comment-13274615"
        },
        {
            "date": "2012-05-14T14:38:47+0000",
            "content": "At a glance, the rest of the patch looks great! I think just whenever we close an MDW, we should not be hiding  any exceptions it throws, worst case we should wrap in runtime exception. ",
            "author": "Robert Muir",
            "id": "comment-13274618"
        },
        {
            "date": "2012-05-14T15:27:52+0000",
            "content": "The DirectoryCloseable won't work: MockDirectoryWrapper checks for index corruption on close(),\nwe cannot just silently ignore Throwable from here\n\nThis only happens if the directory is not closed \u2013 it should always be closed so appropriate exception would be thrown at that time. I assume the \"unclosed directory\" exception indicates more serious flaw in the test and this should be fixed first?\n\nWe can change it to propagate both unclosed and any potential other exception but this will only increase the amount of logs to be reviewed.\n\nAlso note that prior to this patch directories were not closed at all if anything failed \u2013\n\n      if (!testsFailed) {\n        checkResourcesAfterClass(); \n\n\n\nI think this is already better in that resources are always closed, regardless of any previous errors?\n ",
            "author": "Dawid Weiss",
            "id": "comment-13274680"
        },
        {
            "date": "2012-05-14T18:00:32+0000",
            "content": "\nI assume the \"unclosed directory\" exception indicates more serious flaw in the test and this should be fixed first?\n\nI don't think thats the case here. I guess its unclear to me if this close-hide-throwable is only used\nwhen the test is already going to fail anyway, and I see your point that today no closing happens, but\nfrom my POV i just think we should not mask any exceptions coming from MDW.close().\n\nIf MDW.close() throws an exception because checkindex failed, this is really serious, and I don't\ncare what happened elsewhere in the test.\n ",
            "author": "Robert Muir",
            "id": "comment-13274806"
        },
        {
            "date": "2012-05-14T18:06:03+0000",
            "content": "And if you start to close MDW when tests have already failed, I'm not sure this\nwill provide a lot of benefits because MDW itself is really nothing at all but\na wrapper.\n\nChances are when a test has failed, closing the MDW will just immediately throw\nan exception and not really accomplish anything, because MDW close() throws exception\nif there are still open files in the directory it wraps. So nothing will really get\nclosed.\n ",
            "author": "Robert Muir",
            "id": "comment-13274811"
        },
        {
            "date": "2012-05-14T21:34:29+0000",
            "content": "I had private communication with Robert while Jira was offline. I'll reiterate with a new patch that will preserve the previous behavior \u2013 that is: no close() calls if any of the tests failed. ",
            "author": "Dawid Weiss",
            "id": "comment-13274990"
        },
        {
            "date": "2012-05-14T22:20:57+0000",
            "content": "Summary of concerns:\n\n\tif we close the mdw and ignore exceptions, its not any better than today as in general the MDW will still have files open against it and will simply throw an exception and not actually close anything.\n\tif we don't fix MDW etc to actually close (even when ugly stuff happens), then failed tests will cause leaks (imagine RAM directories piling up in the JVM)\n\n\n\nSo my opinion is, since the rest of this patch is a nice cleanup, we should commit it without the MDW.close() change... for now. We should separately open a issue to fix MDW and anything like it to always actually close() its delegate in a finally block, ensuring it doesn't lose any real exceptions from any of its openfiles/checkindex/crash/unrefed fields checks.\n ",
            "author": "Robert Muir",
            "id": "comment-13275009"
        },
        {
            "date": "2012-05-14T22:36:08+0000",
            "content": "I opened LUCENE-4058 as a followup task to clean this up. We should investigate any other mock-wrappers and fix them the same way. ",
            "author": "Robert Muir",
            "id": "comment-13275018"
        },
        {
            "date": "2012-05-15T08:18:40+0000",
            "content": "Ok, so I'll commit this patch in as-is and then we'll fix things from there on? ",
            "author": "Dawid Weiss",
            "id": "comment-13275261"
        }
    ]
}