{
    "id": "LUCENE-741",
    "title": "Field norm modifier (CLI tool)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "I took Chris' LengthNormModifier (contrib/misc) and modified it slightly, to allow us to set fake norms on an existing fields, effectively making it equivalent to Field.Index.NO_NORMS.\n\nThis is related to LUCENE-448 (NO_NORMS patch) and LUCENE-496 (LengthNormModifier contrib from Chris).",
    "attachments": {
        "for.nrm.patch": "https://issues.apache.org/jira/secure/attachment/12348790/for.nrm.patch",
        "LUCENE-741.patch": "https://issues.apache.org/jira/secure/attachment/12346942/LUCENE-741.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-12-20T22:33:57+0000",
            "content": "Committed.  I'll also remove the old version of this code (+ its unit test), the one that still lives in contrib/miscellaneous/src/java/org/apache/lucene/misc/ . ",
            "author": "Otis Gospodnetic",
            "id": "comment-12460078"
        },
        {
            "date": "2007-01-11T05:02:53+0000",
            "content": "The norm-removing functionality was bogus - it simply \"normalized the norms\" to be 1 for the given field, but did not completely remove norms for a field, and did not flip the omitNorms bit for the given field, so it was never a true NO_NORMS field.\n\nI'll upload a new patch that does this, but it does it only for Lucene 2.0.0 and Lucene 2.1-dev before the new .nrm changes from LUCENE-756 were committed. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12463801"
        },
        {
            "date": "2007-01-12T06:39:17+0000",
            "content": "I was looking at what it would take to make this work with .nrm file as well. \nI expected there will be a test that fails currently, but there is none.\nSo I looked into the tests and the implementation and have a few questions:\n\n(1) under contrib, FieldNormModifier and LengthNormModifier seem quite similar, right? \nThe first one sets with:\n\n\treader.setNorm(d, fieldName,\n\tsim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d])));\nThe latter with:\n\tbyte norm = sim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n\treader.setNorm(d, fieldName, norm);\nDo we need to keep both?\n\n\n\n(2) TestFieldNormModifier.testFieldWithNoNorm() calls resetNorms() for a field that does not exist. Some work is done by the modifier to collect the term frequencies, and then reader.setNorm is called but it does nothing, because there are no norms. And indeed the test verifies that there are still no norms for this field. Confusing I think. For some reason I assumed that calling resetNorms() for a field that has none, would implicitly set omitNorms to false for that field and compute it - the inverse of killNorms(). Since this is not the case, perhaps resetNorms should throw an exception in this case?\n\n(3) I would feel safer about this feature if the test was more strict - something like TestNorms - have several fields, modify some, each in a unique way, remove some others, then at the end verify that all the values of each field norms are exactly as expected. \n\n(4) For killNorms to work, you can first revert the index to not use .nrm, and then \"kill\" as before. The code knows to read .fN files, for both backwards compatibility, and for reading segments created be DocumentWriter. The following steps will do this:\n\n\tread the norms using reader.norm(field)\n\twrite into .fN files\n\tremove .nrm file\n\tmodify segmentInfo to know that it has no .nrm file.\n\n\n\n(5) It would have been more efficient to optimize (and remove the .nrm file) once in the application, so perhaps modify the public API to take an array of fields and operate on all? ",
            "author": "Doron Cohen",
            "id": "comment-12464105"
        },
        {
            "date": "2007-01-12T07:19:16+0000",
            "content": "Attached for.nrm.patch was very noisy - so I replaced it with one created with \n   svn diff -x --ignore-eol-style  contrib/miscellaneous\nIt is relative to trunk.\n\nA test is added to TestFieldNormModifier.java - testModifiedNormValuesCombinedWithKill - that verifies exactly what are the values of norms after modification.\n\nFieldNormModifier modified to handle .nrm file as outlined above. ",
            "author": "Doron Cohen",
            "id": "comment-12464109"
        }
    ]
}