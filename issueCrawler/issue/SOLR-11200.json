{
    "id": "SOLR-11200",
    "title": "provide a config to enable disable ConcurrentMergeSchedule.doAutoIOThrottle",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This config can be useful while bulk indexing. Lucene introduced it https://issues.apache.org/jira/browse/LUCENE-6119 .",
    "attachments": {
        "SOLR-11200.patch": "https://issues.apache.org/jira/secure/attachment/12880514/SOLR-11200.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-04T21:11:50+0000",
            "content": "Hi Nawab,\n\nI would start by looking at SolrIndexConfig#buildMergeScheduler\n\nWe can provide an argument like \"mergeThrottle\"  boolean variable and use that to create the merge policy \n\nIt will be also nice if Solr can INFO log when merges are being throttled. Currently it's only available via infostream logging but that prints a lot more information.  ",
            "author": "Varun Thacker",
            "id": "comment-16114972"
        },
        {
            "date": "2017-08-05T06:15:33+0000",
            "content": "Varun Thacker Nawab Zada Asad iqbal,\n\nisAutoIOThrottle will be a suitable name? Patch attached. I will finish the tests too if we agree on the param  name. ",
            "author": "Amrit Sarkar",
            "id": "comment-16115296"
        },
        {
            "date": "2017-08-05T08:38:36+0000",
            "content": "Patch attached ::\n\n\tmodified:   solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java\n\tnew file:   solr/core/src/test-files/solr/collection1/conf/solrconfig-concurrentmergescheduler.xml\n\tmodified:   solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest.java\n\n\n\nHad to create solrconfig-concurrentmergescheduler.xml as other solr-configs in test are getting used in other tests. ",
            "author": "Amrit Sarkar",
            "id": "comment-16115334"
        },
        {
            "date": "2017-08-05T09:22:48+0000",
            "content": "Ah! I don't think this will serve our purpose in bulk indexing, logs :: \n\n\nmergeScheduler=ConcurrentMergeScheduler: maxThreadCount=5, maxMergeCount=15, ioThrottle=false\n2017-08-05 09:14:03.005 INFO  (qtp1205044462-19) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][qtp1205044462-19]: updateMergeThreads ioThrottle=false targetMBPerSec=10240.0 MB/sec\nmergeScheduler=ConcurrentMergeScheduler: maxThreadCount=5, maxMergeCount=15, ioThrottle=false\n2017-08-05 09:15:51.196 INFO  (qtp1205044462-69) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][qtp1205044462-69]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:15:56.711 INFO  (Lucene Merge Thread #0) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][Lucene Merge Thread #0]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:10.752 INFO  (qtp1205044462-17) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][qtp1205044462-17]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:18.229 INFO  (Lucene Merge Thread #1) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][Lucene Merge Thread #1]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:26.516 INFO  (qtp1205044462-69) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][qtp1205044462-69]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:35.551 INFO  (Lucene Merge Thread #2) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][Lucene Merge Thread #2]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:38.580 INFO  (qtp1205044462-18) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][qtp1205044462-18]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:49.397 INFO  (Lucene Merge Thread #3) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][Lucene Merge Thread #3]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n2017-08-05 09:16:56.630 INFO  (qtp1205044462-15) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][qtp1205044462-15]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\n\n\n\nSee the targetMBPerSec is initialised to 10gbps, but then it falls back to default 20mbps, instead of maintaining at 10gbps. Maybe SolrIndexConfig#buildMergeSchedule is not the right place to do it. I will look more. ",
            "author": "Amrit Sarkar",
            "id": "comment-16115348"
        },
        {
            "date": "2017-08-07T19:46:38+0000",
            "content": "The above patch works just fine, the logging isn't obvious which created significant confusion ::\n\n2017-08-07 17:18:18.203 INFO  (Lucene Merge Thread #1) [c:collection1 s:shard1 r:core_node2 x:collection1_shard1_replica_n1] o.a.s.u.LoggingInfoStream [MergeScheduler][Lucene Merge Thread #1]: updateMergeThreads ioThrottle=false targetMBPerSec=20.0 MB/sec\nmerge thread Lucene Merge Thread #0 estSize=3.2 MB (written=2.0 MB) runTime=156.3s (stopped=0.0s, paused=0.0s) rate=unlimited\n  leave running at Infinity MB/sec\n\n\nEven if the targetMBPersec=20, the merges are happening at rate=unlimited, maximum possible disk write speed.\n\nmerge thread Lucene Merge Thread #0 estSize=29.4 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #1 estSize=77.6 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #2 estSize=86.6 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #1 estSize=77.6 MB (written=76.1 MB) runTime=10.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #2 estSize=86.6 MB (written=1.0 MB) runTime=-0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #3 estSize=133.9 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #3 estSize=133.9 MB (written=132.3 MB) runTime=12.8s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #4 estSize=71.9 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #4 estSize=71.9 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #5 estSize=82.0 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #6 estSize=92.5 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #7 estSize=128.2 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #7 estSize=128.2 MB (written=117.2 MB) runTime=12.2s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #8 estSize=66.7 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #8 estSize=66.7 MB (written=21.1 MB) runTime=0.8s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #9 estSize=206.2 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #8 estSize=66.7 MB (written=65.1 MB) runTime=9.2s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #9 estSize=206.2 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #9 estSize=206.2 MB (written=191.5 MB) runTime=15.3s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #10 estSize=146.7 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #10 estSize=146.7 MB (written=47.3 MB) runTime=1.9s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #11 estSize=280.9 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #10 estSize=146.7 MB (written=143.3 MB) runTime=17.2s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #11 estSize=280.9 MB (written=1.0 MB) runTime=0.3s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #11 estSize=280.9 MB (written=143.3 MB) runTime=12.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #12 estSize=100.8 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #11 estSize=280.9 MB (written=208.3 MB) runTime=24.4s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #11 estSize=280.9 MB (written=235.3 MB) runTime=28.2s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #13 estSize=193.6 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #13 estSize=193.6 MB (written=79.3 MB) runTime=4.7s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #13 estSize=193.6 MB (written=155.4 MB) runTime=16.1s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #14 estSize=35.5 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #13 estSize=193.6 MB (written=190.4 MB) runTime=20.3s (stopped=0.0s, paused=0.0s) rate=unlimited\nmerge thread Lucene Merge Thread #15 estSize=94.2 MB (written=0.0 MB) runTime=0.0s (stopped=0.0s, paused=0.0s) rate=unlimited\n\n\n\nI am running some tests, to benchmark and see if we this or altering factors increase the indexing speed. I will post when I have something substantial. ",
            "author": "Amrit Sarkar",
            "id": "comment-16117144"
        },
        {
            "date": "2017-08-09T16:31:18+0000",
            "content": "Amrit Sarkar \nI just reviewed your patch, it looks good. For the name, what about `enableAutoIOThrottle` ? \n\nI will test it now and report if I see any issues. \n\nPS: I edited it after realizing that the long config name is initiating from LUCENE code. My previous suggestion was `enableIOThrottle` ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16120198"
        },
        {
            "date": "2017-08-09T16:42:00+0000",
            "content": "Amrit Sarkar\nwhich branch are you working from 6.6 or 7? \nI am getting an error while applying the patch.  ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16120220"
        },
        {
            "date": "2017-08-10T12:46:39+0000",
            "content": "Nawab Zada Asad iqbal\n\nI am working on master branch. I verified the patch is in sync. Regarding the name, enableAutoIOThrottle is better. I picked the name from ConcurrentMergeSchedular code, we can do: doAutoIOThrottle use the actual param's name itself, so it relates obvious? ",
            "author": "Amrit Sarkar",
            "id": "comment-16121558"
        },
        {
            "date": "2017-08-10T17:25:46+0000",
            "content": "Why not just call it autoThrottle and the setting be a boolean ? ",
            "author": "Varun Thacker",
            "id": "comment-16121943"
        },
        {
            "date": "2017-08-10T18:28:00+0000",
            "content": "`autoThrottle` also looks good! ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16122043"
        },
        {
            "date": "2017-09-03T14:17:55+0000",
            "content": "Uploaded updated patch with \"ioThrottle\", that's what CMS is printing in its logs. Though I am not very sure whether we should expose this parameter as the numbers says otherwise.\n\nMerging happens in seperate threads and doesn't interfere with the threads which creates and writes segments. So even if we provide this option to the users, they STRICTLY shouldn't expect much improvement. ",
            "author": "Amrit Sarkar",
            "id": "comment-16151822"
        },
        {
            "date": "2018-04-17T18:23:38+0000",
            "content": "I'd like to commit this patch in \u2013 this seems important. I have just talked to a company where they have a large index (not sharded, monolithic) and do nightly merges. The time to perform those merges is important and IO-throttling essentially caps the bandwidth of an otherwise very fast drive to 5MB/s, which means the whole merge ends with a trailing single merge thread that lasts over an hour longer than anything else out there (searches are performed on different machines). ",
            "author": "Dawid Weiss",
            "id": "comment-16441298"
        },
        {
            "date": "2018-04-19T18:10:25+0000",
            "content": "It would be nice if somehow Solr could be smart enough to know when this setting is appropriate vs not. \u00a0Otherwise we have yet another magic setting that expert users may or may not eventually find. \u00a0For example if there are no searches going on then don't throttle. \u00a0Perhaps Solr could wrap the merge scheduler so that when a merge is about to happen that it looks at the SolrIndexSearcher to get some stats. \u00a0Just a straw-man; I dunno. \u00a0Perhaps another similar direction is to enhance SolrIndexSearcher to close lazily if it's not actually getting used (I've heard of this strategy used in a forked Solr to reduce memory for massive # cores). \u00a0And then what we detect in this Merge Scheduler is quite simply if there is an active SolrIndexSearcher or not. \u00a0Today we always have one. \u00a0Any way, something to consider. ",
            "author": "David Smiley",
            "id": "comment-16444514"
        },
        {
            "date": "2018-04-19T22:21:56+0000",
            "content": "we could potentially do that with an autoscalling trigger \u2013 but that doesn't really negate the value of having an explicit setting for this.\u00a0\n\n\u00a0\n\nIf the settings is true/false then force the underlying CMS value to true/false ... down the road, if someone wants to try writting a trigger that monitors disk IO and the search rate, that trigger could be designed to respect the explicit setting if set (and be a NoopTrigger) \u2013 but if the setting is unspecified,\u00a0 then dynmaically toggle the underlying value on the CMS directly as the trigger condition happens. ",
            "author": "Hoss Man",
            "id": "comment-16444900"
        },
        {
            "date": "2018-04-20T01:56:21+0000",
            "content": "+1 sounds great Hoss.\n\nI don't mean to suggest we shouldn't\u00a0have a toggle; it's useful to\u00a0have the ability. ",
            "author": "David Smiley",
            "id": "comment-16445122"
        },
        {
            "date": "2018-04-20T08:09:47+0000",
            "content": "The io throttling in CMS should already auto-adjust... But there will always be corner cases when enforcing manually can be a better idea (like in the use case I demonstrated where searches happen on different machines from indexing). ",
            "author": "Dawid Weiss",
            "id": "comment-16445470"
        },
        {
            "date": "2018-04-20T09:34:39+0000",
            "content": "Commit b5cee67ba3f824e71e0d0128f29784594e8cdd55 in lucene-solr's branch refs/heads/branch_7x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b5cee67 ]\n\nSOLR-11200: A new CMS config option 'ioThrottle' to manually enable/disable ConcurrentMergeSchedule.doAutoIOThrottle. (Amrit Sarkar, Nawab Zada Asad iqbal) ",
            "author": "ASF subversion and git services",
            "id": "comment-16445541"
        },
        {
            "date": "2018-04-20T09:34:41+0000",
            "content": "Commit 4eead83a83235b235145f07f0a625055b860ad65 in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4eead83 ]\n\nSOLR-11200: A new CMS config option 'ioThrottle' to manually enable/disable ConcurrentMergeSchedule.doAutoIOThrottle. (Amrit Sarkar, Nawab Zada Asad iqbal) ",
            "author": "ASF subversion and git services",
            "id": "comment-16445542"
        },
        {
            "date": "2018-04-20T09:35:39+0000",
            "content": "I've ran precommit and tests and committed in in to 7x and master. Thanks for feedback, guys. ",
            "author": "Dawid Weiss",
            "id": "comment-16445543"
        },
        {
            "date": "2018-04-20T20:29:48+0000",
            "content": "Can we reuse the solrconfig-tieredmergepolicy.xml file instead of creating a new one?\u00a0If we can reuse that it avoids the need to add yet another solrconfig file to the test setup ",
            "author": "Varun Thacker",
            "id": "comment-16446315"
        },
        {
            "date": "2018-04-20T20:41:22+0000",
            "content": "Hmm... sure, I guess? Please feel free to commit a follow-up, Varun (under the same issue number)? ",
            "author": "Dawid Weiss",
            "id": "comment-16446341"
        },
        {
            "date": "2018-06-11T14:29:28+0000",
            "content": "Amrit Sarkar, Dawid Weiss - Seems this should be in the Solr Ref Guide for 7.4, but I don't see it? ",
            "author": "Cassandra Targett",
            "id": "comment-16508137"
        },
        {
            "date": "2018-06-15T07:01:39+0000",
            "content": "Dawid WeissAmrit Sarkar Should this issue be marked as resolved? ",
            "author": "Adrien Grand",
            "id": "comment-16513453"
        },
        {
            "date": "2018-06-15T07:22:00+0000",
            "content": "Hmm... I missed Cassandra's comment somehow (and indeed, this isn't covered in Solr Ref Guide). Let me correct this quickly, should be a trivial patch.  ",
            "author": "Dawid Weiss",
            "id": "comment-16513474"
        },
        {
            "date": "2018-06-15T08:01:51+0000",
            "content": "I see this in precommit:\n\nbare-bones-html-validation:\n    [mkdir] Created dir: /home/dweiss/work-ssd/lucene-solr/solr/build/solr-ref-guide/bare-bones-html\n[asciidoctor:convert] Render asciidoc files from /home/dweiss/work-ssd/lucene-solr/solr/build/solr-ref-guide/content to /home/dweiss/work-ssd/lucene-solr/solr/build/solr-ref-guide/bare-bones-html with backend=html5\n[asciidoctor:convert] asciidoctor: ERROR: about-this-guide.adoc: line 1: invalid part, must have at least one section (e.g., chapter, appendix, etc.)\n[asciidoctor:convert] asciidoctor: ERROR: solr-glossary.adoc: line 1: invalid part, must have at least one section (e.g., chapter, appendix, etc.)\n\n\n\nbut the build succeeds. Cassandra Targett is this something that should be addressed? ",
            "author": "Dawid Weiss",
            "id": "comment-16513504"
        },
        {
            "date": "2018-06-15T08:03:58+0000",
            "content": "I committed parameter documentation to branch_7_4, branch_7x and master (thanks Adrien for pointing this out). ",
            "author": "Dawid Weiss",
            "id": "comment-16513505"
        },
        {
            "date": "2018-06-15T14:09:57+0000",
            "content": "Yes, you can ignore those errors, they happen in every single build. It's hard to explain without getting deep into the weeds with Asciidoctor, but they only mean we picked a document type (because it's the best of the few available options) to structure the output document but our content doesn't 100% conform to the rules for that type. In a perfect world we'd be able to say \"Yeah, I know but I don't care so don't tell me about it\". Any errors we really care about we've told the validation job to fail the build, so if it succeeds, you're fine. ",
            "author": "Cassandra Targett",
            "id": "comment-16513862"
        }
    ]
}