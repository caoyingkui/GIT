{
    "id": "LUCENE-8202",
    "title": "Add a FixedShingleFilter",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [],
        "fix_versions": [
            "7.4"
        ]
    },
    "description": "In LUCENE-3475 I tried to make a ShingleGraphFilter that could accept and emit arbitrary graphs, while duplicating all the functionality of the existing ShingleFilter.\u00a0 This ends up being extremely hairy, and doesn't play well with query parsers.\n\nI'd like to step back and try and create a simpler shingle filter that can be used for index-time phrase tokenization only.\u00a0 It will have a single fixed shingle size, can deal with single-token synonyms, and won't emit unigrams.",
    "attachments": {
        "LUCENE-8202-fixes.patch": "https://issues.apache.org/jira/secure/attachment/12916093/LUCENE-8202-fixes.patch",
        "LUCENE-8202.patch": "https://issues.apache.org/jira/secure/attachment/12914166/LUCENE-8202.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16396431",
            "date": "2018-03-13T02:37:14+0000",
            "content": "I suppose this is for fields that one might use in Solr \"pf2\" \"pf3\" etc ?\nCan ShingleGraphFilter do what this does too, albeit slower and with greater chance of bugs? It appears so.  Maybe we only need one Factory, and the Factory can produce the Filter most appropriate based on the configuration? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16400746",
            "date": "2018-03-15T17:08:38+0000",
            "content": "Thanks Alan, I agree this issue looks easier to address if we don't have to support all the features that ShingleFilter accumulated over the years and focus on index-time phrase tokenization. Some comments about the patch:\n\u00a0- Can you make this filter experimental, ideally it would get merged with ShingleFilter eventually?\n\u00a0- Can you clarify in the sentence about stacked shingles that this is how this filter differs from ShingleFilter. I think it's important for users to realize when it makes sense to use this one.\n\n\tLet's not use upper case for variables that are not static? (GAP_TOKEN and END_TOKEN)\n\tLet's make tokenPool an ArrayDeque instead for efficiency?\n\tToken doesn't need the type attribute, does it?\n\tadvanceStack runs in quadratic time with shingleSize, is it something we can fix? If not then let's put an upper bound on the value that shingleSize may take (which might be a good move regardless).\n\tToken.reset should use AttributeSource.copyTo rather than captureState+restoreState? This would save a lot of cloning.\n\tIf it only cares about index-time I'm confused why it tries to work on graph inputs, I think it's safe to assume and document that the FlattenGraphFilter must be applied prior to the FixedShingleFilter? Said otherwise, say you have an existing analyzer. I think we should have the goal that wrapping this analyzer (AnalyzerWrapper) with a FixedShingleFilter should emit exactly all the exact phrases of length `shingleSize` that you could search if you indexed with the wrapped analyzer directly? For instance if I look at the testMultiLengthPathShingles test, it indexes the shingle \"the usa is\". But this is not a phrase that you can search if you create the same analysis chain without the shingle filter in the end (\"the\" and \"usa\" are at position 0 and 1, but \"is\" is at position 6).\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16406135",
            "date": "2018-03-20T11:01:51+0000",
            "content": "Updated patch, which I think should address all of Adrien's concerns.\nadvanceStack runs in quadratic time with shingleSize\nI don't think it does? The inner loop just continues the outer loop, so it should be linear.\nMaybe we only need one Factory\nI'm really seeing these as two separate filters, one for query time that handles graphs, and one for index time that assumes a linear stream (or sausage ), so I think a single factory would confuse things.\u00a0 But we can discuss that on the other issue, I think this is a simpler thing to get in first. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16407674",
            "date": "2018-03-21T09:39:18+0000",
            "content": "The inner loop just continues the outer loop, so it should be linear.\n\nI had read too quickly, thanks for clarifying.\n\nYour reasoning about the dedicated factory also makes sense to me.\n\nThe latest patch looks good to me, I'd just like testing to be done on canned token streams rather than using other analysis components like the whitespace tokenizer or the synonym token filter. Other than that +1 to push. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16407711",
            "date": "2018-03-21T10:10:52+0000",
            "content": "Updated patch using CannedTokenStream for tests.\u00a0 Will commit shortly. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16407715",
            "date": "2018-03-21T10:17:00+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16407723",
            "date": "2018-03-21T10:21:23+0000",
            "content": "+1, thanks Alan.  ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16408055",
            "date": "2018-03-21T15:07:07+0000",
            "content": "Commit 230a77ce38ebe6294a06aebf23d85b68223b6ec2 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=230a77c ]\n\nLUCENE-8202: Add FixedShingleFilter ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16408056",
            "date": "2018-03-21T15:07:09+0000",
            "content": "Commit fac84c01c84b3693a8c1251ae77f349c38497e06 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fac84c0 ]\n\nLUCENE-8202: Add FixedShingleFilter ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16408313",
            "date": "2018-03-21T17:38:58+0000",
            "content": "Commit bd6cf168e0e129fa22545a7f614b2b146bd5f202 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bd6cf16 ]\n\nLUCENE-8202: Add checks for shingle size ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16408314",
            "date": "2018-03-21T17:39:00+0000",
            "content": "Commit 2c4b78c43fe2e30ef748af34a1daa174d66e29cc in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2c4b78c ]\n\nLUCENE-8202: Add checks for shingle size ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16409358",
            "date": "2018-03-22T10:42:22+0000",
            "content": "Reopening to address a couple of test failures ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16409361",
            "date": "2018-03-22T10:48:26+0000",
            "content": "TestRandomChains has found two issues:\n\n\tpositionLength should be 1, rather than the shingle length.\u00a0 We don't have any intermediary tokens, only shingles, so we're not building graphs.\u00a0 TRC found this by feeding the output into FlattenGraphFilter, which then complained.\n\twe need somehow limit either the length of the shingle, or the number of stacked positions we iterate through, as we can otherwise get a combinatorial explosion of terms.\u00a0 TRC found this by feeding long strings into a decompounding filter, and then building shingles of length 11.\u00a0 The decompounding filter was producing up to 50 tokens in the same position, which lead to 50^11 shingles being generated, resulting in OOM.\u00a0 I'm not sure of the best way of dealing with this one though - we could just limit shingle length to a maximum of 3 or 4, but that seems like\u00a0too harsh a restriction for this.\u00a0 The other possibility would be to have a (configurable) maximum number of shingles emitted at a single position, and throw IllegalStateException if this is hit.\n\n ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16409382",
            "date": "2018-03-22T11:11:31+0000",
            "content": "+1 to set position length to 1, this is a fixed size shingle filter so there's no additional information in this attribute.\nRegarding the explosion of the number of terms can you track the total number of tokens that need to produce a shingle at the next position and ignore new tokens with posIncr=0 if the number is too high (1000 ?) ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16409389",
            "date": "2018-03-22T11:16:40+0000",
            "content": "I don't like to silently drop tokens though.\u00a0 I think throwing an exception is the way to go, with a clear message saying 'either prune your synonym tree, reduce the shingle size, or up the soft limit' ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16409390",
            "date": "2018-03-22T11:20:16+0000",
            "content": "sure +1 for the exception, I don't think that this limit should be configurable though, 1000 seems more than enough to handle normal cases ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16411066",
            "date": "2018-03-23T09:24:49+0000",
            "content": "The decompounding filter was producing up to 50 tokens in the same position, which lead to 50^11 shingles being generated, resulting in OOM.\n\nI agree that 50 tokens per position and a shingle length of 11 would create 50^11 shingles, but the filter would only keep 50*11 tokens in memory and generate shingles on the fly. So I would expect it to be slow, but not to use lots of memory? So maybe we have a bug?\n\nI'm not sure of the best way of dealing with this one though - we could just limit shingle length to a maximum of 3 or 4, but that seems like too harsh a restriction for this.  The other possibility would be to have a (configurable) maximum number of shingles emitted at a single position, and throw IllegalStateException if this is hit.\n\nI would add both. I don't think restricting the shingle size would be too harsh, I don't remember of someone using a max shingle size that was greater than 3? Also limits are always easier to increase than decrease. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16411106",
            "date": "2018-03-23T09:51:26+0000",
            "content": "So I would expect it to be slow, but not to use lots of memory?\nBaseTokenStreamTestCase.checkAnalysisConsistency() stores all incoming tokens in a list so that it can then compare them against a second run, so it's a test issue rather than anything else.\nI would add both\n+1 - I'll add a max shingle size of four and a max number of stacks of 1000. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16413006",
            "date": "2018-03-25T12:18:16+0000",
            "content": "I've attached the bugfix patch for reference. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16413010",
            "date": "2018-03-25T12:24:56+0000",
            "content": "Commit 7e4358046eaf9c887ef3037f9ba3460b6bae5f06 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7e43580 ]\n\nLUCENE-8202: Fix positionlength for FixedShingleFilter and add limits to shingle size and count ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16413011",
            "date": "2018-03-25T12:24:58+0000",
            "content": "Commit bbf8306615aa87d12f52113587140fb792d93cd5 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bbf8306 ]\n\nLUCENE-8202: Fix positionlength for FixedShingleFilter and add limits to shingle size and count ",
            "author": "ASF subversion and git services"
        }
    ]
}