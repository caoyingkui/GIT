{
    "id": "LUCENE-6780",
    "title": "GeoPointDistanceQuery doesn't work with a large radius?",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "I'm working on LUCENE-6698 but struggling with test failures ...\n\nThen I noticed that TestGeoPointQuery's test never tests on large distances, so I modified the test to sometimes do so (like TestBKDTree) and hit test failures.",
    "attachments": {
        "LUCENE-6780.patch": "https://issues.apache.org/jira/secure/attachment/12754102/LUCENE-6780.patch",
        "LUCENE-6780-heap-used-hack.patch": "https://issues.apache.org/jira/secure/attachment/12762362/LUCENE-6780-heap-used-hack.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14729946",
            "author": "Michael McCandless",
            "date": "2015-09-03T22:41:17+0000",
            "content": "Patch, putting back the smallBBox boolean ...\n\nFirst problem is the test runs very slowly sometimes.  I thought LUCENE-6712 was supposed to fix this (so we don't need to do LUCENE-6685)?\n\nSecond problem is it then hits failures:\n\n[junit4:pickseed] Seed property 'tests.seed' already defined: EE938F778B784339\n   [junit4] <JUnit4> says hallo! Master seed: EE938F778B784339\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(7661@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   1> T0: id=9 docID=9 lat=-76.34720742943381 lon=-36.15344492760056 deleted?=false expected=true but got false query=GeoPointDistanceQuery: field=geoField: Center: [-91.32459786462451,-62.68808104026591] Distance: 2652065.508673892 m Lower Left: [-135.1399256521194,-86.45202902120825] Upper Right: [-47.50927007712964,-38.847306191642886]\n   [junit4]   2> 9\u6708 03, 2015 11:39:46 \u4e0b\u5348 com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T0,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: wrong hit\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([EE938F778B784339]:0)\n   [junit4]   2> \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$VerifyHits.test(TestGeoPointQuery.java:570)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:511)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:402)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomTiny -Dtests.seed=EE938F778B784339 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=zh_HK -Dtests.timezone=Portugal -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   63.4s | TestGeoPointQuery.testRandomTiny <<<\n\n\n\nIs it known/expected that the math doesn't work for large distance queries?\n\nFinally, I noticed the randomized test is not testing \"crosses dateline\" cases .. is this supposed to work / known not to work?  I can open a separate issue for that. "
        },
        {
            "id": "comment-14739138",
            "author": "Nicholas Knize",
            "date": "2015-09-10T17:07:12+0000",
            "content": "There's a small change to GeoPointTermsEnum in LUCENE-6777 that this depends upon. \n\nApply LUCENE-6777.patch then LUCENE-6780.patch\n\nThis patch also fixes an issue noted in LUCENE-6698 (a side effect of simplifying the cellCrossesCircle logic) "
        },
        {
            "id": "comment-14739391",
            "author": "Michael McCandless",
            "date": "2015-09-10T19:10:40+0000",
            "content": "Can we fix closestPointOnBBox to return void, and requiring incoming arg is non-null?  I think it makes the API confusing to both take as an argument, and return, the result.\n\nCan we expand this out to a full if statement?:\n\n\n     @Override\n+    protected short computeMaxShift() {\n+      return (short)(GeoPointField.PRECISION_STEP * ((query.radius > 2000000) ? 5 : 4));\n+    }\n\n\n\nMaybe add javadoc to the new closestPointOnBBox and computeMaxShift?\n\nIn closestPointOnBBox should you maybe use Double.NaN as the marker value instead of 0.0 since 0.0 can legitimately occur?\n\nA general geo API question: why do we sometimes use x/y (rMinX, rMinY) and other times use lon/lat (centerLon, centerLat)?\n\nIt looks like your new patch lost my original patch (that just made the test more evil) ... when I apply both, I still see test failures, e.g.:\n\n\n   [junit4] Started J0 PID(390@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   1> T0: id=3454 docID=3389 lat=16.958122319434622 lon=91.51666186085828 deleted?=false expected=true but got false query=GeoPointDistanceQuery: field=geoField: Center: [28.3906677508417,9.349277744701268] Distance: 6883636.144942287 m Lower Left: [-33.7590864185931,-52.77655846609843] Upper Right: [90.5404219202765,71.33132841950409]\n   [junit4]   2> sep 10, 2015 4:07:41 PM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T0,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: wrong hit\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([94245EC72F3A129]:0)\n   [junit4]   2> \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$VerifyHits.test(TestGeoPointQuery.java:572)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:513)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:406)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandom -Dtests.seed=94245EC72F3A129 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=es_MX -Dtests.timezone=Canada/Atlantic -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.78s | TestGeoPointQuery.testRandom <<<\n\n\n\nI'll attach the combined patch ...\n\nI think a simple random test could ferret out self-consistency bugs in these new geo APIs (similar to what we did on LUCENE-6699): make a random circle and random bbox, then ask the GeoUtil APIs what their relationship is, then randomly sample points from each and confirm no point ever violates the relationship ... I'll try to code this up. "
        },
        {
            "id": "comment-14739393",
            "author": "Michael McCandless",
            "date": "2015-09-10T19:11:38+0000",
            "content": "Patch combining Nicholas Knize's last patch and the original \"make test more evil\" patch. "
        },
        {
            "id": "comment-14739519",
            "author": "Nicholas Knize",
            "date": "2015-09-10T20:14:03+0000",
            "content": "Looks like one of my patches stepped on the evil test (blame -> git apply  ).  I'll start with the failure first: \n\nwhen I apply both, I still see test failures,\n\nA quick investigation reveals the bounding box for the point-distance slightly off (as in upwards of a degree in both directions). At present there are 2 approaches to computing that bbox: \n\n1. use vincenty distance to compute a location along a range (distance) bearing (azimuth).  Since vincenty can fail to converge on nearly anti-podal points (hence the need for iteration thresholds and the  fudge factor whack-a-mole game as seen before) this can obviously be problematic for large distance queries. \n2. inverse haversine. USGS claims an average error of 22km over large distances, and this error certainly falls within that threshold (its 15km if interested).\n\nThis fix can come in a few ways, 1. dynamically expand the computed bbox based on computed error (using distance as the independent variable). Maybe overkill?  2. add a static \"fudge factor\" of 1 degree to min/max lon/lat. This would probably need to be verified through some beasting.  \n\nIn closestPointOnBBox should you maybe use Double.NaN as the marker value instead of 0.0 since 0.0 can legitimately occur?\n\nThe logic handles it. 0, 0 means closest point is the same as centerLon, centerLat - which is what it gets set to in the method.  Though thanks for getting me to look at that closer.  There's a superfluous logic block.\n\nA general geo API question: why do we sometimes use x/y (rMinX, rMinY) and other times use lon/lat (centerLon, centerLat)?\n\nShort answer: lazy inconsistencies. Longer answer: I like to use x/y when I'm either going to swap out with cartesian logic or I'm lazy typing.  Since neither are good answers I agree it would be a good idea to refactor to lon/lat for geodesic and x/y cartesian. \n\nGood comments on the code cleanup.\n\n "
        },
        {
            "id": "comment-14740102",
            "author": "Nicholas Knize",
            "date": "2015-09-11T03:30:49+0000",
            "content": "New patch that computes the BBox given the WGS84 ellipsoid. This skips all haversine and vincenty issues at the expense of a few extra trig functions (only used to compute bbox once).\n\nThe patch also addresses other comments (e.g., exploding ternary operator, adding java doc).  nocommits are left alone for time being. "
        },
        {
            "id": "comment-14740819",
            "author": "Michael McCandless",
            "date": "2015-09-11T13:40:17+0000",
            "content": "Thanks Nicholas Knize, but I'm having trouble applying the patch:\n\n\npatching file lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum.java\nHunk #1 FAILED at 42.\nHunk #2 FAILED at 102.\nHunk #3 FAILED at 146.\nHunk #4 FAILED at 157.\nHunk #5 FAILED at 185.\nHunk #6 FAILED at 206.\n6 out of 6 hunks FAILED -- saving rejects to file lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum.java.rej\n\n\n\nIt looks like your dev area isn't up to date?  (Missing LUCENE-6777 that I committed yesterday...) "
        },
        {
            "id": "comment-14740843",
            "author": "ASF subversion and git services",
            "date": "2015-09-11T13:55:12+0000",
            "content": "Commit 1702470 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1702470 ]\n\nLUCENE-6780: make branch "
        },
        {
            "id": "comment-14740845",
            "author": "ASF subversion and git services",
            "date": "2015-09-11T13:55:37+0000",
            "content": "Commit 1702471 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1702471 ]\n\nLUCENE-6780: commit current patch "
        },
        {
            "id": "comment-14740848",
            "author": "Michael McCandless",
            "date": "2015-09-11T13:56:36+0000",
            "content": "OK I attempted to sync up the patch (parts of the GeoPointTermsEnum.java changes were new, others were old) and made some other small test changes, and then committed to a branch here: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene6780\n\nLet's iterate on this branch?\n\nI'll work on the new randomized test ... "
        },
        {
            "id": "comment-14740856",
            "author": "Michael McCandless",
            "date": "2015-09-11T14:04:16+0000",
            "content": "I'm seeing very slow query execution times, e.g. ant test -Dtestcase=TestGeoPointQuery -Dtestmethod=testRandomMedium -Dtests.seed=A48E30E0280A6CAF takes ~60 seconds on my box, when the test normally takes 1-2 seconds with other seeds... "
        },
        {
            "id": "comment-14740880",
            "author": "ASF subversion and git services",
            "date": "2015-09-11T14:16:38+0000",
            "content": "Commit 1702476 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1702476 ]\n\nLUCENE-6780: remove wasted annots; add failing test "
        },
        {
            "id": "comment-14740884",
            "author": "Michael McCandless",
            "date": "2015-09-11T14:18:08+0000",
            "content": "\nIn closestPointOnBBox should you maybe use Double.NaN as the marker value instead of 0.0 since 0.0 can legitimately occur?\n\nThe logic handles it.\n\nI still think there's really a bug here   I committed a failing test on the branch to TestGeoUtils.java showing it ... maybe my test case is buggy, but all I did was translate the bbox so that it's upper right corner landed on 0, 0 ... "
        },
        {
            "id": "comment-14740940",
            "author": "ASF subversion and git services",
            "date": "2015-09-11T14:58:22+0000",
            "content": "Commit 1702490 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1702490 ]\n\nLUCENE-6780: add randomized test; remove more annots; add some nocommits; rename some radius -> radiusMeters "
        },
        {
            "id": "comment-14740949",
            "author": "Michael McCandless",
            "date": "2015-09-11T15:02:06+0000",
            "content": "OK I committed a new randomized test TestGeoUtils.testRandomRectsAndCircles ...\n\nIt's a simple test: make a random rect and circle, use the GeoUtils API to see if they are disjoint or if the circle fully contains the rect (else, skip it), and then randomly pick points inside the rect and confirm they are either within or not within the circle.\n\nIt sometimes fails, e.g.:\n\n\nant test  -Dtestcase=TestGeoUtils -Dtests.method=testRandomRectsAndCircles -Dtests.seed=D4C2F5423D90BDD8 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=mt_MT -Dtests.timezone=Australia/Yancowinna -Dtests.asserts=true -Dtests.file.encoding=UTF-8 -Dtests.verbose=true\n\n\n\nBut it's entirely possible we need to relax the test for boundary conditions, however when I look at the GeoUtils impls, we seem to consistently use haversine for all the checks ... but maybe even so the math can produce false errors? "
        },
        {
            "id": "comment-14743693",
            "author": "Nicholas Knize",
            "date": "2015-09-14T15:44:24+0000",
            "content": "Next iteration patch off the feature branch.\n\nOK I committed a new randomized test \n\nThe test was buggy using maxLon where it expected minLon.  I also updated it to handle the case where the circle is fully contained by the rectangle.  All beasting passed.\n\nI'm seeing very slow query execution times\n\nI had noticed this before posting the initial patch and isolated one test that took ~45 secs to complete. The slow times were related to recomputing the bbox and high resolution ranges for every segment on very large distance queries. The new patch relaxes the distance criteria for the range resolution.  There are still some boundary outliers that take ~15 seconds (instead of 60+) to complete.  I can further improve this by optimizing the GeoPointDistanceQuery.computeBBox method... or, what are your thoughts on computing the BBox and reusing across segments??\n\nI still think there's really a bug here  I committed a failing test on the branch\n\nbleh...indeed!! Fixed it up. "
        },
        {
            "id": "comment-14744288",
            "author": "ASF subversion and git services",
            "date": "2015-09-14T21:21:17+0000",
            "content": "Commit 1703062 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703062 ]\n\nLUCENE-6780: fix test bug; fix bug in closestPoinOnBBox; add some nocommits "
        },
        {
            "id": "comment-14744297",
            "author": "Michael McCandless",
            "date": "2015-09-14T21:23:07+0000",
            "content": "The test was buggy using maxLon where it expected minLon\n\nDuh!  Thanks for fixing \n\nI committed the patch w/ some minor code style changes, but added some nocommits, e.g. I'm not sure how circleFullInside testing helps since it seems to always assert to true in that case.\n\nI'll beast the new test! "
        },
        {
            "id": "comment-14745474",
            "author": "Michael McCandless",
            "date": "2015-09-15T13:45:39+0000",
            "content": "The slow times were related to recomputing the bbox \n\nWait: we only compute this (call GeoPointDistanceQuery.computeBBox) once for the query, on init, right? "
        },
        {
            "id": "comment-14746046",
            "author": "ASF subversion and git services",
            "date": "2015-09-15T19:57:48+0000",
            "content": "Commit 1703281 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703281 ]\n\nLUCENE-6780: let random radius be big "
        },
        {
            "id": "comment-14746052",
            "author": "Michael McCandless",
            "date": "2015-09-15T20:01:00+0000",
            "content": "I was working on getting BKDDistanceQuery working again, but hit failures with a large radius, so I also fixed TestGeoPointQuery to use a large radius (just committed) and it causes test failures, e.g.:\n\n\n[junit4:pickseed] Seed property 'tests.seed' already defined: 651AF6100346C910\n   [junit4] <JUnit4> says g'day! Master seed: 651AF6100346C910\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(28673@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   1> T0: id=5 docID=5 lat=-30.70619555695309 lon=-119.07908745059306 deleted?=false expected=false but got true query=GeoPointDistanceQuery: field=geoField: Center: [119.51155579512795,-29.46313019984308] Distance: 9353340.676650032 meters]\n   [junit4]   2> Z\u00e1\u0159 15, 2015 10:00:15 ODP. com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T0,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: wrong hit\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([651AF6100346C910]:0)\n   [junit4]   2> \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$VerifyHits.test(TestGeoPointQuery.java:560)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:501)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:396)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomTiny -Dtests.seed=651AF6100346C910 -Dtests.multiplier=5 -Dtests.locale=cs -Dtests.timezone=Africa/Windhoek -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.24s | TestGeoPointQuery.testRandomTiny <<<\n   [junit4]    > Throwable #1: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=14, name=T0, state=RUNNABLE, group=TGRP-TestGeoPointQuery]\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([651AF6100346C910:2C5D28565D67F1BC]:0)\n   [junit4]    > Caused by: java.lang.AssertionError: wrong hit\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([651AF6100346C910]:0)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery$VerifyHits.test(TestGeoPointQuery.java:560)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:501)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:396)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene53): {id=PostingsFormat(name=LuceneVarGapFixedInterval), geoField=FST50}, docValues:{id=DocValuesFormat(name=Direct), geoField=DocValuesFormat(name=Lucene50)}, sim=RandomSimilarityProvider(queryNorm=false,coord=yes): {}, locale=cs, timezone=Africa/Windhoek\n   [junit4]   2> NOTE: Linux 3.13.0-61-generic amd64/Oracle Corporation 1.8.0_40 (64-bit)/cpus=8,threads=1,free=383358232,total=504889344\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoPointQuery]\n   [junit4] Completed [1/1] in 0.57s, 1 test, 1 error <<< FAILURES!\n   [junit4] \n   [junit4] \n   [junit4] Tests with failures:\n   [junit4]   - org.apache.lucene.search.TestGeoPointQuery.testRandomTiny\n\n\n\nA very large radius (such that it can span the entire earth) should work?\n\nI'll also commit how far I got with the BKDDistanceQuery to the branch ... "
        },
        {
            "id": "comment-14746056",
            "author": "ASF subversion and git services",
            "date": "2015-09-15T20:02:00+0000",
            "content": "Commit 1703282 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703282 ]\n\nLUCENE-6698, LUCENE-6780: add BKDDistanceQuery "
        },
        {
            "id": "comment-14805295",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T09:36:19+0000",
            "content": "Commit 1703791 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703791 ]\n\nLUCENE-6780: BKDDistanceQuery must take min/maxLon/Lat into account in hashCode and equals else we get illegal collisions in caching "
        },
        {
            "id": "comment-14805297",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T09:36:42+0000",
            "content": "Commit 1703792 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703792 ]\n\nLUCENE-6780: make tests more evil "
        },
        {
            "id": "comment-14805298",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T09:37:10+0000",
            "content": "Commit 1703793 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703793 ]\n\nLUCENE-6780: code style / nocommits "
        },
        {
            "id": "comment-14805307",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T09:40:08+0000",
            "content": "Commit 1703794 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703794 ]\n\nLUCENE-6780: remove log line "
        },
        {
            "id": "comment-14805324",
            "author": "Michael McCandless",
            "date": "2015-09-18T09:48:33+0000",
            "content": "I'm still struggling to get BKDDistanceQuery working here, even with the good GeoUtil fixes on this branch.\n\nSo I switched back to making the GeoUtilsTest more evil:\n\nFirst, I noticed that TestGeoUtils was always using a tiny lat/lon area (1-3 degrees) and fixed that to sometimes be the full range, and then I improved the \"self consistency\" test (TestGeoUtils.testGeoRelations) to stress the GeoUtils APIs like BKD does, and now there are some fun failures, e.g.:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=48F4A913CBA1095 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=es_NI -Dtests.timezone=America/Argentina/Salta -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.14s | TestGeoUtils.testGeoRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: 243 incorrect hits (see above)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([48F4A913CBA1095:C6AC5E24484D662B]:0)\n   [junit4]    > \tat org.apache.lucene.util.TestGeoUtils.testGeoRelations(TestGeoUtils.java:509)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nIf you run with -Dtests.verbose=true you see lots of diagnostics explaining which GeoUtils API went wrong... in this case, GeoUtils.rectWithinCircle returned true when it should have returned false.  Now I need Nicholas Knize's help! "
        },
        {
            "id": "comment-14805325",
            "author": "Michael McCandless",
            "date": "2015-09-18T09:49:50+0000",
            "content": "Also, the failures all seem related to using a big lon/lat area: if I hardwire the useSmallRanges to true, the test seems to pass for quite a while under beasting ... "
        },
        {
            "id": "comment-14875724",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T14:53:41+0000",
            "content": "Commit 1703876 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703876 ]\n\nLUCENE-6780: remove dup code, cleanup nocommits "
        },
        {
            "id": "comment-14875742",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T15:09:54+0000",
            "content": "Commit 1703879 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703879 ]\n\nLUCENE-6780: move GeoBBox -> GeoRect; turn off BKD verbosity "
        },
        {
            "id": "comment-14875749",
            "author": "ASF subversion and git services",
            "date": "2015-09-18T15:13:52+0000",
            "content": "Commit 1703881 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1703881 ]\n\nLUCENE-6780: merge trunk "
        },
        {
            "id": "comment-14902304",
            "author": "ASF subversion and git services",
            "date": "2015-09-22T09:46:59+0000",
            "content": "Commit 1704496 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1704496 ]\n\nLUCENE-6780: factor out base geo point test class "
        },
        {
            "id": "comment-14902313",
            "author": "Michael McCandless",
            "date": "2015-09-22T09:52:55+0000",
            "content": "I factored out a common test base class, for TestBKDTree and TestGeoPointQuery, and in the process found a test bug in TestGeoPointQuery.bboxQueryCanBeWrong where it was being way too lenient in returning true.\n\nI fixed that to instead check whether GeoUtils.compare returns 0.0 for any of the rect's boundaries, but now there are new test failures, e.g.:\n\n\n   [junit4] Started J0 PID(11346@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   1> TEST-TestGeoPointQuery.testMultiValued-seed#[880EAE9C08D4DB54]: id=4591 docID=4591 should not match but did\n   [junit4]   1>   rect=GeoRect(lon=-153.18749899012866 TO -152.61749242472143 lat=33.44312055800268 TO 33.95438073558091)\n   [junit4]   1>   lat=32.553960682161375 lon=-154.2675789624302\n   [junit4]   1>   lat=33.95438025524065 lon=-152.86846841320704\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testMultiValued -Dtests.seed=880EAE9C08D4DB54 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=nl_BE -Dtests.timezone=Europe/Tallinn -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 10.7s | TestGeoPointQuery.testMultiValued <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: some hits were wrong\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([880EAE9C08D4DB54:5C2ECAAEC6169B1C]:0)\n   [junit4]    > \tat org.apache.lucene.util.BaseGeoPointTestCase.testMultiValued(BaseGeoPointTestCase.java:280)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene53): {id=PostingsFormat(name=LuceneVarGapFixedInterval), point=PostingsFormat(name=Asserting)}, docValues:{point=DocValuesFormat(name=Asserting)}, sim=ClassicSimilarity, locale=nl_BE, timezone=Europe/Tallinn\n   [junit4]   2> NOTE: Linux 3.13.0-61-generic amd64/Oracle Corporation 1.8.0_40 (64-bit)/cpus=8,threads=1,free=366930072,total=501219328\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoPointQuery]\n   [junit4] Completed [1/1] in 11.10s, 1 test, 1 failure <<< FAILURES!\n\n\n\nThe failure is clearly a boundary case, so maybe we just need a better \"is boundary case\" check?\n\nIt's also entirely possible I created new exciting test bugs in the refactoring \n\nAnd we still have the test failures for both BKD and GeoPoint distance queries when distance is biggish... "
        },
        {
            "id": "comment-14907884",
            "author": "Michael McCandless",
            "date": "2015-09-25T10:06:09+0000",
            "content": "I was concerned about the peak heap used for \"worst case\" queries here, so I hacked up a quick patch (attached) to test this:\n\n\nGeoPointInBBoxQuery: field=point: Lower Left: [-170.79577068315723,-88.3524701239041] Upper Right: [115.75692731020496,51.78004322487766]\n  --> 940,015 terms = 34,065,696 bytes\n\nGeoPointDistanceQuery: field=point: Center: [-95.87683480747508,-83.99672364681616] Distance: 826889.911703281 meters]\n  --> 179,562 terms = 12,446,344 bytes\n\n\n\nThe patch just records over time the largest number of terms created by the query, and then I ran the test for many iterations.\n\nI think this is too high, e.g. too many of these queries in flight at once can mean an unexpected OOME.\n\nBut I think before we address this we should address the correctness issues (the failing seeds for TestGeoUtils.testGeoRelations).\n\nIt could be that to fix these, we place soft limits on how large each query is allowed to be?  Meaning, a user who's willing to have more error, willing to use more heap, can increase the limit if they want, but by default the limit protects the more common use case with smaller shapes. "
        },
        {
            "id": "comment-14940382",
            "author": "Nicholas Knize",
            "date": "2015-10-01T20:46:59+0000",
            "content": "The failure is clearly a boundary case, so maybe we just need a better \"is boundary case\" check?\n\nDefinitely the situation with this failure. The new GeoUtils.compare method was returning null for these boundary points so the test was always setting expected = false. I've changed it to ignore those boundary test points that are within the accepted error tolerance. "
        },
        {
            "id": "comment-14961204",
            "author": "ASF subversion and git services",
            "date": "2015-10-16T18:58:34+0000",
            "content": "Commit 1709065 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1709065 ]\n\nLUCENE-6780: fix a couple test bugs, remove nocommits, improve javadocs, cut all tests back to small==true "
        },
        {
            "id": "comment-14961224",
            "author": "Michael McCandless",
            "date": "2015-10-16T19:13:26+0000",
            "content": "OK I found a couple test bugs, which explained some of the failures.\n\nI also cut all \"small\" booleans back to true always, so we are only testing a region b/w 1-3 degrees in lat and lon.\n\nThere is still a lurking boundary case failure, where a doc's lat/lon is on the edge of the bbox rect we query.\n\nAnd then things are still sometimes very very slow, even when restricting queries to small shapes, e.g. when I run ant test -Dtestcase=TestGeoPointQuery -Dtests.seed=0, I get these times:\n\n\n-test:\n[junit4:pickseed] Seed property 'tests.seed' already defined: 0\n   [junit4] <JUnit4> says hello! Master seed: 0\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(30211@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4] OK      0.01s | TestGeoPointQuery.testInvalidGeoDistanceQuery\n   [junit4] OK      0.02s | TestGeoPointQuery.testBBoxQuery\n   [junit4] OK      9.10s | TestGeoPointQuery.testMultiValued\n   [junit4] OK      2.07s | TestGeoPointQuery.testRandomMedium\n   [junit4] OK      0.01s | TestGeoPointQuery.testGeoDistanceQueryHuge\n   [junit4] OK      1.05s | TestGeoPointQuery.testRandomTiny\n   [junit4] OK      0.27s | TestGeoPointQuery.testWholeMap\n   [junit4] OK      0.00s | TestGeoPointQuery.testRectCrossesCircle\n   [junit4] OK      2.48s | TestGeoPointQuery.testAllLonEqual\n   [junit4] OK      0.00s | TestGeoPointQuery.testMortonEncoding\n   [junit4] OK      13.2s | TestGeoPointQuery.testSamePointManyTimes\n   [junit4] OK      0.01s | TestGeoPointQuery.testGeoDistanceQueryCrossDateline\n   [junit4] IGNOR/A 0.03s | TestGeoPointQuery.testRandomBig\n   [junit4]    > Assumption #1: 'nightly' test group is disabled (@Nightly())\n   [junit4] OK      0.00s | TestGeoPointQuery.testPacManPolyQuery\n   [junit4] OK      0.01s | TestGeoPointQuery.testMultiValuedQuery\n   [junit4] OK      0.00s | TestGeoPointQuery.testPolyQuery\n   [junit4] OK      0.00s | TestGeoPointQuery.testGeoDistanceQuery\n   [junit4] HEARTBEAT J0 PID(30211@localhost): 2015-10-16T15:07:46, stalled for 66.9s at: TestGeoPointQuery.testAllLatEqual\n   [junit4] OK      78.3s | TestGeoPointQuery.testAllLatEqual\n   [junit4] OK      0.00s | TestGeoPointQuery.testInvalidBBox\n   [junit4] OK      0.00s | TestGeoPointQuery.testBBoxCrossDateline\n   [junit4] Completed [1/1] in 106.94s, 20 tests, 1 skipped\n   [junit4] \n   [junit4] JVM J0:     0.36 ..   107.82 =   107.47s\n   [junit4] Execution time total: 1 minute 47 seconds\n   [junit4] Tests summary: 1 suite, 20 tests, 1 ignored (1 assumption)\n     [echo] 5 slowest tests:\n\n\n\nWhy is testAllLatEqual so slow?  This test case came from BKD's test (since we refactored to a common base test class) ... I just don't understand why it's so slow for geo point query. "
        },
        {
            "id": "comment-14962075",
            "author": "Nicholas Knize",
            "date": "2015-10-17T20:00:32+0000",
            "content": "Next WIP patch...\n\nThis patch includes the following:\n\n1. Throws an IllegalArgumentException for PointDistanceQuery when the radius exceeds the maximum allowable distance (based on location on the earth)  \n2. Reduces resolution for extreme GeoPointInBBoxQuery cases (based on diagonal distance of the bbox).\n\nPerformance is much better (need to quantify through benchmarks) but there are still a few Test bugs that need to be ironed out (PointInPolygon tolerance, and catching illegal radius values for PointDistanceQuery)  "
        },
        {
            "id": "comment-14962265",
            "author": "ASF subversion and git services",
            "date": "2015-10-18T10:21:13+0000",
            "content": "Commit 1709253 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1709253 ]\n\nLUCENE-6780: don't allow too-large radius in distance query (depending on origin); reduce resolution for large bbox "
        },
        {
            "id": "comment-14962284",
            "author": "ASF subversion and git services",
            "date": "2015-10-18T10:49:42+0000",
            "content": "Commit 1709257 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1709257 ]\n\nLUCENE-6780: fix bug in midLat/midLon; don't test dateline crossing when small == true "
        },
        {
            "id": "comment-14962286",
            "author": "Michael McCandless",
            "date": "2015-10-18T10:52:54+0000",
            "content": "Thanks Nicholas Knize, I committed the patch, but put a nocommit on the AwaitsFix (we plan to fix that before landing this right?).\n\nI also found a bug in how midLat/Lon was computed, that was causing us to almost always use shiftFactor=5 even when the bbox was smallish ... I fix that, and also fixed the test not to do dateline crossing when small==true.\n\nHowever ant test -Dtestcase=TestGeoPointQuery -Dtestmethod=testAllLatEqual -Dtests.seed=0 is still quite slow (~5.6 seconds on my fastish haswell box), even though it's always using a small bbox .... "
        },
        {
            "id": "comment-14963675",
            "author": "Nicholas Knize",
            "date": "2015-10-19T17:44:56+0000",
            "content": "Updated patch.  \n\n\n\tAdds Nightly to a few of the tests that still seem to run slow during range creation (particularly on PointInPolygon queries). IMHO this shouldn't preclude the fixes and improvements added by this patch. Will open separate issues to a. investigate performance of range/polygon intersection (probably needs to be handled under the dateline crossing feature) and b. create ranges on-demand instead of using transient memory (improve overall performance)\n\n\n\n\n\tAdded consistency to rectContainsPoint to use same method as GeoUtils.bboxContains\n\n "
        },
        {
            "id": "comment-14964066",
            "author": "Nicholas Knize",
            "date": "2015-10-19T21:17:16+0000",
            "content": "git svn is behind by 3 days... here's the patch against the latest svn repo. "
        },
        {
            "id": "comment-14964081",
            "author": "ASF subversion and git services",
            "date": "2015-10-19T21:28:07+0000",
            "content": "Commit 1709483 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1709483 ]\n\nLUCENE-6780: mark slow tests nightly, turn back on some big bbox/distances in tests, use GeoUtils.bboxContains "
        },
        {
            "id": "comment-14964092",
            "author": "Michael McCandless",
            "date": "2015-10-19T21:30:03+0000",
            "content": "git svn is behind by 3 days.\n\nNot good!\n\nThanks Nicholas Knize, I committed the last patch, but I hit this test failure in the new \"geo API self-consistency\" test:\n\n\n   [junit4] Started J0 PID(17316@localhost).\n   [junit4] Suite: org.apache.lucene.util.TestGeoUtils\n   [junit4]   1> doc=113 did not match but should\n   [junit4]   1>   lon=19.101526554407 lat=-85.2135864567328 distanceMeters=220459.12109877667 vs radiusMeters=220827.9418903528\n   [junit4]   1> doc=814 did not match but should\n   [junit4]   1>   lon=18.946167779153978 lat=-85.21667574378826 distanceMeters=220122.387740399 vs radiusMeters=220827.9418903528\n   [junit4]   1> doc=1340 did not match but should\n   [junit4]   1>   lon=19.231482133213458 lat=-85.21195787282232 distanceMeters=220639.0006665368 vs radiusMeters=220827.9418903528\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=A1A8548928708420 -Dtests.locale=en_PH -Dtests.timezone=Africa/Mogadishu -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.09s | TestGeoUtils.testGeoRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: 3 incorrect hits (see above)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([A1A8548928708420:638B403C5C87F29E]:0)\n   [junit4]    > \tat org.apache.lucene.util.TestGeoUtils.testGeoRelations(TestGeoUtils.java:506)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=FastCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=FAST, chunkSize=25153, maxDocsPerChunk=7, blockSize=932), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=FAST, chunkSize=25153, blockSize=932)), sim=ClassicSimilarity, locale=en_PH, timezone=Africa/Mogadishu\n   [junit4]   2> NOTE: Linux 3.13.0-61-generic amd64/Oracle Corporation 1.8.0_60 (64-bit)/cpus=8,threads=1,free=422996528,total=504889344\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoUtils]\n   [junit4] Completed [1/1] in 0.24s, 1 test, 1 failure <<< FAILURES!\n\n\n\nSeems like boundary cases because the actual distance vs query distance are pretty close? "
        },
        {
            "id": "comment-14964128",
            "author": "ASF subversion and git services",
            "date": "2015-10-19T21:56:21+0000",
            "content": "Commit 1709485 from Michael McCandless in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1709485 ]\n\nLUCENE-6780: disable test until we can fix pole crossing correctly "
        },
        {
            "id": "comment-14964148",
            "author": "Michael McCandless",
            "date": "2015-10-19T22:07:31+0000",
            "content": "OK I disabled the new test case until we can fix pole crossing.\n\nBut I hit a new failure:\n\n\n....I.I.......T2: id=2929 should not match but did\n  small=true query=GeoPointInBBoxQuery: field=point: Lower Left: [-96.30716303968933,35.304955180599926] Upper Right: [-95.78797371671509,35.55537284046483] docID=2929\n  lat=35.30495325717168 lon=-95.95683785493188\n  deleted?=false\nokt 19, 2015 5:00:44 PM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\nWARNING: Uncaught exception in thread: Thread[T2,5,TGRP-TestGeoPointQuery]\njava.lang.AssertionError: some hits were wrong\n\tat __randomizedtesting.SeedInfo.seed([F82368891A1F01C9]:0)\n\tat org.junit.Assert.fail(Assert.java:93)\n\tat org.apache.lucene.util.BaseGeoPointTestCase$VerifyHits.test(BaseGeoPointTestCase.java:509)\n\tat org.apache.lucene.util.BaseGeoPointTestCase$2._run(BaseGeoPointTestCase.java:697)\n\tat org.apache.lucene.util.BaseGeoPointTestCase$2.run(BaseGeoPointTestCase.java:580)\n\nENOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomMedium -Dtests.seed=F82368891A1F01C9 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=sk_SK -Dtests.timezone=America/Knox_IN -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n....I.....NOTE: test params are: codec=Asserting(Lucene53): {id=PostingsFormat(name=Memory doPackFST= true), point=PostingsFormat(name=Asserting)}, docValues:{id=DocValuesFormat(name=Lucene50), point=DocValuesFormat(name=Lucene50)}, sim=ClassicSimilarity, locale=sk_SK, timezone=America/Knox_IN\nNOTE: Linux 3.13.0-61-generic amd64/Oracle Corporation 1.8.0_60 (64-bit)/cpus=8,threads=1,free=488560232,total=514850816\nNOTE: All tests run in this JVM: [TestGeoPointQuery]\n\n\n\nLooks like a boundary case ... "
        },
        {
            "id": "comment-14967389",
            "author": "Nicholas Knize",
            "date": "2015-10-21T16:23:56+0000",
            "content": "Updated patch:\n\n\n\tQuantizes random generated lat/lon values to hash scale\n\tReverts overly complicated compare method\n\tAdds @Nightly to repeated adversarial tests\n\tPasses all beast tests\n\tPasses ant precommit\n\n\n\nI think this is ready and we can move on to fixing performance by removing some of these transient structures (e.g., rangeList) "
        },
        {
            "id": "comment-14967484",
            "author": "Michael McCandless",
            "date": "2015-10-21T17:12:25+0000",
            "content": "+1 to the last patch, thanks Nicholas Knize! "
        },
        {
            "id": "comment-14967510",
            "author": "ASF subversion and git services",
            "date": "2015-10-21T17:32:28+0000",
            "content": "Commit 1709892 from Nicholas Knize in branch 'dev/branches/lucene6780'\n[ https://svn.apache.org/r1709892 ]\n\nLUCENE-6780: fix quantization in random lat/lon generation, cut overly adversarial tests to @Nightly "
        },
        {
            "id": "comment-14967831",
            "author": "Nicholas Knize",
            "date": "2015-10-21T20:32:31+0000",
            "content": "Patch of lucene6780 feature branch against trunk.  I think its ready to merge. "
        },
        {
            "id": "comment-14967949",
            "author": "Nicholas Knize",
            "date": "2015-10-21T21:19:54+0000",
            "content": "Updated patch to remove BKDDistanceQuery and make randomLat/Lon non-static "
        },
        {
            "id": "comment-14968044",
            "author": "ASF subversion and git services",
            "date": "2015-10-21T21:59:10+0000",
            "content": "Commit 1709926 from Nicholas Knize in branch 'dev/trunk'\n[ https://svn.apache.org/r1709926 ]\n\nLUCENE-6780: Improves GeoPointDistanceQuery accuracy with large radius. Improves testing rigor to GeoPointField "
        },
        {
            "id": "comment-14968061",
            "author": "ASF subversion and git services",
            "date": "2015-10-21T22:07:11+0000",
            "content": "Commit 1709927 from Nicholas Knize in branch 'dev/trunk'\n[ https://svn.apache.org/r1709927 ]\n\nLUCENE-6780: add missing classes "
        },
        {
            "id": "comment-14968585",
            "author": "ASF subversion and git services",
            "date": "2015-10-22T05:32:02+0000",
            "content": "Commit 1709954 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1709954 ]\n\nLUCENE-6780: Fix svn:eol-style to make precommit happy "
        },
        {
            "id": "comment-14969238",
            "author": "ASF subversion and git services",
            "date": "2015-10-22T14:35:51+0000",
            "content": "Commit 1710027 from Nicholas Knize in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1710027 ]\n\nLUCENE-6780: Improves GeoPointDistanceQuery accuracy with large radius. Improves testing rigor to GeoPointField "
        },
        {
            "id": "comment-14971076",
            "author": "Michael McCandless",
            "date": "2015-10-23T14:29:49+0000",
            "content": "Nicholas Knize can this be resolved now? "
        },
        {
            "id": "comment-14971090",
            "author": "Nicholas Knize",
            "date": "2015-10-23T14:42:23+0000",
            "content": "++. Merged to trunk and 5.4 "
        }
    ]
}