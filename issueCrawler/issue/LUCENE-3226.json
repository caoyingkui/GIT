{
    "id": "LUCENE-3226",
    "title": "rename SegmentInfos.FORMAT_3_1 and improve description in CheckIndex",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.3",
            "3.4",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.1,                                            3.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "A 3.2 user recently asked if something was wrong because CheckIndex was reporting his (newly built) index version as...\n\n\nSegments file=segments_or numSegments=1 version=FORMAT_3_1 [Lucene 3.1]\n\n\n\nIt seems like there are two very confusing pieces of information here...\n\n1) the variable name of SegmentInfos.FORMAT_3_1 seems like poor choice.  All other FORMAT_* constants in SegmentInfos are descriptive of the actual change made, and not specific to the version when they were introduced.\n\n2) whatever the name of the FORMAT_* variable, CheckIndex is labeling it \"Lucene 3.1\", which is missleading since that format is alwasy used in 3.2 (and probably 3.3, etc...).  \n\nI suggest:\na) rename FORMAT_3_1 to something like \"FORMAT_SEGMENT_RECORDS_VERSION\"\nb) change CheckIndex so that the label for the \"newest\" format always ends with \" and later\" (ie: \"Lucene 3.1 and later\") so when we release versions w/o a format change we don't have to remember to manual list them in CheckIndex.  when we do make format changes and update CheckIndex \" and later\" can be replaced with \" to X.Y\" and the new format can be added",
    "attachments": {
        "LUCENE-3226.patch": "https://issues.apache.org/jira/secure/attachment/12483371/LUCENE-3226.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-21T23:10:47+0000",
            "content": "I'd like to commit this if nobody objects, its trivial and will reduce confusion. ",
            "author": "Robert Muir",
            "id": "comment-13052931"
        },
        {
            "date": "2011-06-21T23:56:18+0000",
            "content": "looks good to me.\n\nstrictly speaking when backporting we probably need to leave FORMAT_3_1 as a deprecated alias for FORMAT_SEGMENT_RECORDS_VERSION since it's currently public (but that doesn't need to affect trunk) ",
            "author": "Hoss Man",
            "id": "comment-13052950"
        },
        {
            "date": "2011-06-22T00:03:49+0000",
            "content": "strictly speaking when backporting we probably need to leave FORMAT_3_1 as a deprecated alias for FORMAT_SEGMENT_RECORDS_VERSION since it's currently public (but that doesn't need to affect trunk)\n\nWell, strictly strictly the class is @lucene.experimental... but I'll add the deprecated pointer just because it won't hurt. ",
            "author": "Robert Muir",
            "id": "comment-13052954"
        },
        {
            "date": "2011-06-22T00:11:04+0000",
            "content": "Thanks hossman ",
            "author": "Robert Muir",
            "id": "comment-13052960"
        },
        {
            "date": "2011-06-22T03:11:58+0000",
            "content": "I'd like to commit this if nobody objects, its trivial and will reduce confusion.\n\nI would have (objected), only it all happened so fast while I was asleep .\n\nI called the constant like that because I didn't like the other constant names (and don't like the new one either).  The problem is that when it comes to remove support for a certain format, it is very hard to understand from the constant name what index format it represents.\n\nInstead, I chose a meaningful constant name for the developer, with a documentation that explains what has changed. When we're on 5.0 and need to remove support for 3.x, it will be very easy to delete all the places in the code which reference FORMAT_3_1, rather than go ask Mike what version FORMAT_SEGMENT_RECORDS_VERSION relates to .\n\nAlso, in LUCENE-2921 I plan to get rid of all those ridiculous constant names and track the index version at the segment level only. It will be easier, IMO, to have an easy to understand constant name when it comes to supporting an older index (or remove support for). Perhaps it's only me, but when I read those format constant names, I only did that when removing support for older indexes. Other than that, they are not very interesting ...\n\nWhat Hoss reported about CheckIndex is the real problem we should handle here. SegmentInfo prints in its toString the code version which created it, which is better than seeing -9 IMO, and that should be \"3.1\" or \"3.2\". If it's a 3.2.0 newly created index, you shouldn't see \"3.1\" reported from SegmentInfos.toString. Perhaps CheckIndex needs to be fixed to refer to Constants.LUCENE_MAIN_VERSION instead?\n\nRobert, shall we reopen the issue to discuss? ",
            "author": "Shai Erera",
            "id": "comment-13053016"
        },
        {
            "date": "2011-06-22T08:09:12+0000",
            "content": "\nAlso, in LUCENE-2921 I plan to get rid of all those ridiculous constant names and track the index version at the segment level only. It will be easier, IMO, to have an easy to understand constant name when it comes to supporting an older index (or remove support for). Perhaps it's only me, but when I read those format constant names, I only did that when removing support for older indexes. Other than that, they are not very interesting ...\n\nWhat Hoss reported about CheckIndex is the real problem we should handle here. SegmentInfo prints in its toString the code version which created it, which is better than seeing -9 IMO, and that should be \"3.1\" or \"3.2\". If it's a 3.2.0 newly created index, you shouldn't see \"3.1\" reported from SegmentInfos.toString. Perhaps CheckIndex needs to be fixed to refer to Constants.LUCENE_MAIN_VERSION instead?\n\nRobert, shall we reopen the issue to discuss?\n\nWe can reopen... but the issue will always exist here, LUCENE-2921 can't solve this particular case since its the segments file... ",
            "author": "Robert Muir",
            "id": "comment-13053115"
        },
        {
            "date": "2011-06-22T08:31:12+0000",
            "content": "How does renaming a constant solve the CheckIndex issue? I commented on the constant name, and I think it should reflect the code version it applies to, not the feature. Because if e.g. in the same version you add two features, incrementally, you wouldn't change the format number twice right? And then the constant name becomes meaningless again, or too complicated. It happened to me a while ago (can't remember the exact feature though, perhaps it was in TermInfos).\n\nI mentioned LUCENE-2921 only because I intended to name the constants exactly that (X_Y).\n\nI see you've already reverted the changes you made. I think that the changes to CheckIndex could remain though, adding the \"3.1+\" to the string? ",
            "author": "Shai Erera",
            "id": "comment-13053123"
        },
        {
            "date": "2011-06-22T08:56:36+0000",
            "content": "I see you've already reverted the changes you made. I think that the changes to CheckIndex could remain though, adding the \"3.1+\" to the string?\n\nthis sounds good, but is it enough to reduce the confusion in checkindex?\n\nMaybe it has to do with how the System.out.println is formatted, currently its:\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments + \" version=\" + sFormat + userDataString);\n\n\n\nbut maybe instead of 'version=' it should say something more clear, like format=, or even segmentsFormat= ",
            "author": "Robert Muir",
            "id": "comment-13053135"
        },
        {
            "date": "2011-06-22T13:09:46+0000",
            "content": "how about printing the oldest and newest segment version? ",
            "author": "Shai Erera",
            "id": "comment-13053237"
        },
        {
            "date": "2011-06-22T13:14:31+0000",
            "content": "This would be good (as we can compute it from the segments file), but, we just have to think about how to display the case where this is null: we know its <= 3.0 in this case... but we don't know any more than that?\n\nStill we should do it, especially in 4.x when most indexes being checkIndexed will have this filled out (except 3.0 indexes) ",
            "author": "Robert Muir",
            "id": "comment-13053241"
        },
        {
            "date": "2011-06-22T13:29:08+0000",
            "content": "We can print \"pre-3.1\".\n\nBut, if somebody opened a 3.0 / 2.x index w/ 3.1+ and all segments were 'touched' by the 3.1+ code, then their version would be \"3.0\" or \"2.x\" (i.e., not null). So it could be that someone opens two indexes, and CheckIndex reports \"oldVersion=pre-3.1\" for one and \"oldVersion=2.x\" for the other. I think it's acceptable though. ",
            "author": "Shai Erera",
            "id": "comment-13053248"
        },
        {
            "date": "2011-06-23T10:43:44+0000",
            "content": "Can we have the constant name be descriptive (reflect what actually changed) and then add a comment expressing the version when that change was made to Lucene?\n\nI think we should name them primarily for the benefit of developers working with the source code going forward, and only secondarily for the future developer who will some day need to remove them... ",
            "author": "Michael McCandless",
            "id": "comment-13053784"
        },
        {
            "date": "2011-06-23T11:10:36+0000",
            "content": "What is the benefit of naming the constant according to what has changed? And what if two changes occur in the same release? These constants, IMO, are used only to detect code that is needed to support a certain version, and nothing more.\n\nAnd since the purpose of LUCENE-2921 is to move all index format tracking to be at the 'code'-level and not 'feature'-level, I'd assume the constants would be named accordingly. ",
            "author": "Shai Erera",
            "id": "comment-13053795"
        },
        {
            "date": "2011-06-23T12:20:12+0000",
            "content": "What is the benefit of naming the constant according to what has changed?\n\nBecause then devs trying to work w/ the code have some sense of what the change was?  EG for debugging maybe it's helpful, eg if something has gone wrong, later, in how SegmentInfos is handling that version or what not.\n\nAnd what if two changes occur in the same release?\n\nWell, we can handle that case by case?  I agree it's messy... maybe pick a name describing/subsuming both?  Or favor one name (maybe the \"bigger change\") and use comments to explain the other change? \nBut if there is a comment/comments above the constant containing this same information that's just as good...\n\nThese constants, IMO, are used only to detect code that is needed to support a certain version, and nothing more.\n\nRight, but for the devs that need to revisit such code, it's helpful to know what \"real\" change occurred within that version... else, during debugging they'd have to eg go do some svn archaeology to understand the change.\n\nAnd since the purpose of LUCENE-2921 is to move all index format tracking to be at the 'code'-level and not 'feature'-level, I'd assume the constants would be named accordingly.\n\nTrue... so maybe we take this up under that issue?  I would be OK with just having comments that describe what changed in each version...\n\nSo for this issue maybe re-commit just the CheckIndex fix, and leave the constant naming fixes to LUCENE-2921? ",
            "author": "Michael McCandless",
            "id": "comment-13053814"
        },
        {
            "date": "2011-06-23T13:02:40+0000",
            "content": "I would be OK with just having comments that describe what changed in each version...\n\nYeah, that's what I thought. Constant name denotes the code version, documentation denotes the actual changes.\n\nSo for this issue maybe re-commit just the CheckIndex fix\n\nI think that that's what Robert and I agreed to do, and we moved to discuss what should be the actual message printed, so it's less confusing to the users. ",
            "author": "Shai Erera",
            "id": "comment-13053830"
        },
        {
            "date": "2011-06-23T13:50:47+0000",
            "content": "OK I agree, I think \n\nWho will re-commit the CheckIndex fix here...? ",
            "author": "Michael McCandless",
            "id": "comment-13053859"
        },
        {
            "date": "2011-06-24T12:01:16+0000",
            "content": "Patch improves CheckIndex output (includes information about oldest/newest segments.\n\nOn the way I fixed a bug in StringHelper.versionComparator (could overflow if Integer.MIN/MAX_VAL were used.\n\nThe changes to TestDemo won't be committed. I just included them here so you can run the test and check the output. ",
            "author": "Shai Erera",
            "id": "comment-13054389"
        },
        {
            "date": "2011-06-24T12:15:12+0000",
            "content": "Patch looks good \u2013 I like how CheckIndex now tells you version range of your segments. ",
            "author": "Michael McCandless",
            "id": "comment-13054397"
        },
        {
            "date": "2011-06-24T12:33:23+0000",
            "content": "Changed the message format a bit (Thanks Robert for the feedback). Now it prints 'version=x.y' if all segments are on the same version, or 'versions=[a.b .. c.d]' if there is more than one version.\n\nI plan to commit this. ",
            "author": "Shai Erera",
            "id": "comment-13054401"
        },
        {
            "date": "2011-06-24T12:40:16+0000",
            "content": "+1 ",
            "author": "Robert Muir",
            "id": "comment-13054411"
        },
        {
            "date": "2011-06-24T12:46:27+0000",
            "content": "lets backport this to 3.3? a few issues have been found/fixed already, so i don't mind respinning with this one too, since i think it will eliminate confusion. ",
            "author": "Robert Muir",
            "id": "comment-13054413"
        },
        {
            "date": "2011-06-24T13:29:17+0000",
            "content": "Committed revision 1139284 (trunk).\nCommitted revision 1139286 (3x).\nCommitted revision 1139300 (3.3).\n\nThanks Robert and Mike for the review ! ",
            "author": "Shai Erera",
            "id": "comment-13054446"
        },
        {
            "date": "2011-07-02T02:40:11+0000",
            "content": "bulk close for 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13058903"
        }
    ]
}