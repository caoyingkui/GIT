{
    "id": "LUCENE-8536",
    "title": "The bytes parameter of the copy method is not carefully checked.",
    "details": {
        "components": [
            "-tools"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "trunk",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "The copy method of the\u00a0PagedBytes class is as follow:\n\n\u00a0\n\n\u00a0\n\npublic void copy(BytesRef bytes, BytesRef out) {\nint left = blockSize - upto;\nif (bytes.length > left || currentBlock==null) {\nif (currentBlock != null) {\naddBlock(currentBlock);\ndidSkipBytes = true;\n}\ncurrentBlock = new byte[blockSize];\nupto = 0;\nleft = blockSize;\nassert bytes.length <= blockSize;\n// TODO: we could also support variable block sizes\n}\n\nout.bytes = currentBlock;\nout.offset = upto;\nout.length = bytes.length;\n\nSystem.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\nupto += bytes.length;\n}\n\n\nThe method does not throw exceptions for illegal inputs. In the same class, the\u00a0copyUsingLengthPrefix method checks the input value\"\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\npublic long copyUsingLengthPrefix(BytesRef bytes) {\nif (bytes.length >= 32768) {\nthrow new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n}\n\nif (upto + bytes.length + 2 > blockSize) {\nif (bytes.length + 2 > blockSize) {\nthrow new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n}\nif (currentBlock != null) {\naddBlock(currentBlock); \n}\ncurrentBlock = new byte[blockSize];\nupto = 0;\n}\n\nfinal long pointer = getPointer();\n\nif (bytes.length < 128) {\ncurrentBlock[upto++] = (byte) bytes.length;\n} else {\ncurrentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\ncurrentBlock[upto++] = (byte) (bytes.length & 0xff);\n}\nSystem.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\nupto += bytes.length;\n\nreturn pointer;\n}\n\n\nI understand that in the first method,\u00a0\n\nassert bytes.length <= blockSize;\n\nchecks whether the length of the bytes is too large. However, \u00a0the method does not check blockSize either. As a result, the length of the bytes can still be overflowed, if blockSize is too large. \u00a0In addition, the second method also checks whether\u00a0\n\nbytes.length + 2 > blockSize\n\nShall the first method also checks the requirement?",
    "attachments": {},
    "issue_links": {},
    "comments": []
}