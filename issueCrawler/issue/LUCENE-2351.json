{
    "id": "LUCENE-2351",
    "title": "optimize automatonquery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Mike found a few cases in flex where we have some bad behavior with automatonquery.\nThe problem is similar to a database query planner, where sometimes simply doing a full table scan is faster than using an index.\n\nWe can optimize automatonquery a little bit, and get better performance for fuzzy,wildcard,regex queries.\n\nHere is a list of ideas:\n\n\tcreate commonSuffixRef for infinite automata, not just really-bad linear scan cases\n\tdo a null check rather than populating an empty commonSuffixRef\n\tlocalize the 'linear' case to not seek, but instead scan, when ping-ponging against loops in the state machine\n\tadd a mechanism to enable/disable the terms dict cache, e.g. we can disable it for infinite cases, and maybe fuzzy N>1 also.\n\tchange the use of BitSet to OpenBitSet or long[] gen for path-tracking\n\toptimize the backtracking code where it says /* String is good to go as-is */, this need not be a full run(), I think...",
    "attachments": {
        "LUCENE-2351.patch": "https://issues.apache.org/jira/secure/attachment/12439968/LUCENE-2351.patch",
        "LUCENE-2351_infinite.patch": "https://issues.apache.org/jira/secure/attachment/12439975/LUCENE-2351_infinite.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-27T16:15:30+0000",
            "content": "Patch to adress some of the optos:\n\n\n\tAdds optional \"boolean useCache\" to TermsEnum.seek\n\n\n\n\n\tAdds protected FilteredTermsEnum.set/getUseTermsCache, so each query type can choose (defaults to false)\n\n\n\n\n\tSwitches to long[] gen in AutomatonTermsEnum.nextString\n\n\n\n\n\tUse commonSuffixRef = null to mean there is no suffix\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12850542"
        },
        {
            "date": "2010-03-27T16:27:30+0000",
            "content": "The attached patch improves sneaky wildcard query \"un*t\" (on a 5M doc wikipedia index, matching 1058 terms --> 124623 docs) from 39.69 QPS -> 44.85 QPS (best of 5) on flex.  But trunk is at 63.19 QPS so we still have more to do... ",
            "author": "Michael McCandless",
            "id": "comment-12850545"
        },
        {
            "date": "2010-03-27T16:29:36+0000",
            "content": "This one should be final:\n\n+  public SeekStatus seek(BytesRef text) throws IOException {\n+    return seek(text, true);\n+  }\n\n\nAs codecs and other implementations should only override the other one. And it will get inlined. ",
            "author": "Uwe Schindler",
            "id": "comment-12850546"
        },
        {
            "date": "2010-03-27T19:25:24+0000",
            "content": "attached is a patch to optimize \"infinite transitions\"\n\nits extremely ugly, likely incorrect in some ways too  ",
            "author": "Robert Muir",
            "id": "comment-12850565"
        },
        {
            "date": "2010-03-28T17:54:01+0000",
            "content": "updated version of the previous patch. should be more correct, and faster in my benchmarks. ",
            "author": "Robert Muir",
            "id": "comment-12850705"
        },
        {
            "date": "2010-03-29T06:38:57+0000",
            "content": "attached is a new approach:\n\n\trids of linearmode\n\tadds real support for infinite automata, to prevent useless seeking.\n\n\n\nwhen any loop is encountered in the state machine, a portion of the term dictionary\nis calculated based on its transition ranges, and for this portion, the enumeration is \ninstead driven from the terms dictionary rather than the state machine.\n\nnot really 100% on how i feel about this yet, but it seems right. ",
            "author": "Robert Muir",
            "id": "comment-12850798"
        },
        {
            "date": "2010-03-29T08:59:17+0000",
            "content": "OOOH I like this approach!!  It makes the linear decision \"local\", and bounds (by linearUpperBound) the region so that we don't have to revisit the decision on every term.  And it enables efficiently using the suffix \n\nAnd.... it's FAST!  With this fix, the hard query (un*t) on flex is 105 QPS (best of 5, on 5 M doc wikipedia index), vs 62 QPS on trunk.  Yay  ",
            "author": "Michael McCandless",
            "id": "comment-12850844"
        },
        {
            "date": "2010-03-30T09:59:27+0000",
            "content": "attached is the same patch as before, except it includes a random test for Automaton.\nI stole the code from TestStressIndexing and create random unicode terms, and random regular expressions,\nand verify them against a brain-dead query that just brute forces every term.\n\nThis found two unrelated bugs:\n\n\tautomaton didnt handle the 'empty term' correctly.\n\tthere was a logic bug in UnicodeUtil.nextValidUTF16String\n\n\n\nthese are both also fixed in the patch... will commit soon. ",
            "author": "Robert Muir",
            "id": "comment-12851337"
        },
        {
            "date": "2010-03-30T10:07:11+0000",
            "content": "Committed revision 929065. ",
            "author": "Robert Muir",
            "id": "comment-12851339"
        }
    ]
}