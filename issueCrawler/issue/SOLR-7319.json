{
    "id": "SOLR-7319",
    "title": "Workaround the \"Four Month Bug\" causing GC pause problems",
    "details": {
        "components": [
            "scripts and tools"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0",
        "status": "Closed",
        "resolution": "Information Provided",
        "priority": "Major"
    },
    "description": "A twitter engineer found a bug in the JVM that contributes to GC pause problems:\n\nhttp://www.evanjones.ca/jvm-mmap-pause.html\n\nProblem summary (in case the blog post disappears):  The JVM calculates statistics on things like garbage collection and writes them to a file in the temp directory using MMAP.  If there is a lot of other MMAP write activity, which is precisely how Lucene accomplishes indexing and merging, it can result in a GC pause because the mmap write to the temp file is delayed.\n\nWe should implement the workaround in the solr start scripts (disable creation of the mmap statistics tempfile) and document the impact in CHANGES.txt.",
    "attachments": {
        "SOLR-7319.patch": "https://issues.apache.org/jira/secure/attachment/12707772/SOLR-7319.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-27T14:36:00+0000",
            "author": "Shawn Heisey",
            "content": "Attached patch implementing the workaround and documenting the impact in CHANGES.txt \u2013 tools like jstat will no longer function. ",
            "id": "comment-14383925"
        },
        {
            "date": "2015-03-27T14:39:36+0000",
            "author": "Shawn Heisey",
            "content": "Found a typo in the patch.  Fixed. ",
            "id": "comment-14383930"
        },
        {
            "date": "2015-03-27T15:40:30+0000",
            "author": "Timothy Potter",
            "content": "+1 ~ great find Shawn! ",
            "id": "comment-14384020"
        },
        {
            "date": "2015-03-27T16:48:20+0000",
            "author": "Shawn Heisey",
            "content": "New patch, this time against trunk, resolving a merge conflict on CHANGES.txt with another commit. ",
            "id": "comment-14384134"
        },
        {
            "date": "2015-03-28T04:07:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1669731 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1669731 ]\n\nSOLR-7319: Workaround for the \"Four Month Bug\" GC pause problem ",
            "id": "comment-14385108"
        },
        {
            "date": "2015-03-28T04:09:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1669732 from Shawn Heisey in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1669732 ]\n\nSOLR-7319: Workaround for the \"Four Month Bug\" GC pause problem (merge trunk r1669731) ",
            "id": "comment-14385109"
        },
        {
            "date": "2015-03-30T14:28:33+0000",
            "author": "Jim Ferenczi",
            "content": "\"If there is a lot of other MMAP write activity, which is precisely how Lucene accomplishes indexing and merging\" => Are you sure about this statement, MMapDirectory uses MMap for reads and a simple RandomAccessFile for writes. I don't know how the RandomAccessFile is implemented but I doubt it's using MMap at all.  ",
            "id": "comment-14386754"
        },
        {
            "date": "2015-03-30T14:47:39+0000",
            "author": "Jim Ferenczi",
            "content": "I am saying this because if we are not sure that Lucene is impacted we should not add this in the default options. Not being able to do a jstat on a running node is problematic and will break a lot of monitoring tools built on top of Solr. ",
            "id": "comment-14386786"
        },
        {
            "date": "2015-03-30T14:47:43+0000",
            "author": "Jim Ferenczi",
            "content": "I am saying this because if we are not sure that Lucene is impacted we should not add this in the default options. Not being able to do a jstat on a running node is problematic and will break a lot of monitoring tools built on top of Solr. ",
            "id": "comment-14386787"
        },
        {
            "date": "2015-03-30T15:12:21+0000",
            "author": "Shawn Heisey",
            "content": "Good questions, Jim Ferenczi.  The option does appear to have helped GC pauses times for me, although it's hard to quantify.  I know that the average GC pause time dropped from .10 sec to .06 sec with Java 7 and G1GC.  This isn't a lot, but when there are thousands of collections, even a small difference like that adds up.  I wish I had a way to gather median, 75th, 95th, and 99th percentile info on GC pauses.  I have some indexes running on Java 8, but they are not yet big enough or active enough to give me useful GC info.  They are growing, and will soon be pushed into production.\n\nI do not have any info on this problem with CMS, which is what the bin/solr script in 5.0 uses.\n\nIf you know something about how Lucene writes to disk that says it's not mmap when the directory is mmap, then you know more than I do.  I wonder whether heavy mmap reads might interfere with writing to the stats file. ",
            "id": "comment-14386834"
        },
        {
            "date": "2015-03-30T15:41:11+0000",
            "author": "Timothy Potter",
            "content": "That's correct - MMap is only for reading the index, so maybe instead of enabling this by default, we document it in bin/solr.in.(sh|cmd) and users can turn it on if they so choose. I've already been ding'd a few times on adding Java flags as defaults in those scripts because they helped my prod env. but weren't deemed generally applicable for all Solr users. So I vote for leaving it out by default, but documenting it as something for operators to enable if they experience this issue. ",
            "id": "comment-14386877"
        },
        {
            "date": "2015-03-30T16:48:07+0000",
            "author": "Shawn Heisey",
            "content": "Timothy Potter, I am not opposed to a solution based purely on documentation.  Let's get a few more opinions, and if that's the general feeling, can revert my patch. ",
            "id": "comment-14386961"
        },
        {
            "date": "2015-03-31T06:49:05+0000",
            "author": "Shawn Heisey",
            "content": "Does the bin/solr script offer a way to send an option directly to the java commandline?  Should we have the ability to have a local user config script (similar to /etc/default/solr but contained within the solr download, with both shell and windows versions) to provide additional config? ",
            "id": "comment-14388131"
        },
        {
            "date": "2015-03-31T07:06:27+0000",
            "author": "Jim Ferenczi",
            "content": "Most of the java options in the solr.in.cmd should not be activated by default. The tenuring threshold, the numbers of threads for the GC, ..., they all depend on the type of deployment you have, the size of the heap and the machine hosting the Solr node. In my company we are using a custom script full of java options that we added over the years. Most of the options are here because somebody added this with the assertion that the performance are better. Most of the time, we don't know what the option is for but nobody wants to remove it because the urban legend says it's useful. The solr startup script should be almost empty (at least for the java options), maybe one or two options to set up the garbage collector and that's it. ",
            "id": "comment-14388154"
        },
        {
            "date": "2015-03-31T15:54:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1670370 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1670370 ]\n\nSOLR-7319: Revert previous patch, return to discussion. ",
            "id": "comment-14388744"
        },
        {
            "date": "2015-03-31T15:55:41+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1670371 from Shawn Heisey in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1670371 ]\n\nSOLR-7319: Revert previous patch, return to discussion. (merge trunk r1670370) ",
            "id": "comment-14388745"
        },
        {
            "date": "2015-03-31T16:00:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1670373 from Shawn Heisey in branch 'dev/branches/lucene_solr_5_1'\n[ https://svn.apache.org/r1670373 ]\n\nSOLR-7319: Revert previous patch, return to discussion. (merge trunk r1670370) ",
            "id": "comment-14388747"
        },
        {
            "date": "2015-03-31T16:12:47+0000",
            "author": "Shawn Heisey",
            "content": "Reverted the commits, re-opening the issue for further discussion. ",
            "id": "comment-14388764"
        },
        {
            "date": "2015-04-01T03:11:41+0000",
            "author": "Shawn Heisey",
            "content": "Devolving into a general discussion about garbage collection tuning:\n\nJim Ferenczi, I've had really good luck with these GC tuning options, although I have now moved on to G1GC:\n\nhttps://wiki.apache.org/solr/ShawnHeisey#CMS_.28ConcurrentMarkSweep.29_Collector\n\nI tried really hard to make these options completely generic and not dependent on the number of CPUs, the size of the heap, the amount of system memory, or anything else that's site specific, but users with particularly small or large setups might need to adjust them.\n\nHere's the GC tuning options I ended up when I updated and compiled branch_5x and started the server with bin/solr:\n\n\n-XX:NewRatio=3\n-XX:SurvivorRatio=4\n-XX:TargetSurvivorRatio=90\n-XX:MaxTenuringThreshold=8\n-XX:+UseConcMarkSweepGC\n-XX:+UseParNewGC\n-XX:ConcGCThreads=4\n-XX:ParallelGCThreads=4\n-XX:+CMSScavengeBeforeRemark\n-XX:PretenureSizeThreshold=64m\n-XX:+UseCMSInitiatingOccupancyOnly\n-XX:CMSInitiatingOccupancyFraction=50\n-XX:CMSMaxAbortablePrecleanTime=6000\n-XX:+CMSParallelRemarkEnabled\n-XX:+ParallelRefProcEnabled\n\n\n\nThese are largely the same as what I came up with for my system.  Both sets have options that the other set doesn't.\n\nI know from experience and my discussions on the hotspot-gc-use mailing list that ParallelRefProcEnabled is critical for good GC performance with Solr.  Solr apparently creates a LOT of references, so processing them in parallel is a real help.  PretenureSizeThreshold is probably very important, to make sure that objects will not automatically end up in the old generation unless they're REALLY big - similar to the G1HeapRegionSize option for G1 that can control which objects are classified as humongous allocations.  The other options are a concerted effort to avoid full GCs.\n\nI don't like the fact that the number of GC threads is hard-coded.  For someone who's got 8 or more CPU cores (which I do), these are probably good options, but if you've got a low end system with one or two cores, it's too many threads.\n\nI have to wonder whether the 512MB default heap size is a problem.  It would be for me, but for a small-scale proof-of-concept, it is probably plenty.  Would it be easily possible to detect the total amount of system memory and set the max heap to a percentage? ",
            "id": "comment-14389924"
        },
        {
            "date": "2015-04-01T08:35:31+0000",
            "author": "Jim Ferenczi",
            "content": "Thanks Shawn Heisey. We are big fans of your pages about the settings for Solr regarding the Garbage Collector. We changed a lot of our settings after reading your page and we are know happy with the GC performance in our setup. I guess that providing good defaults values for all use cases is almost impossible and that each deployment/use cases would need a round of testing to find optimal values (especially for the tenuring threshold and the size of the heap). Anyway I think that most of the Solr users would be happy to have default values optimized by Solr expert. For those who think that they can have better performance with other settings nothing prevent them to change those defaults  My initial point was that the defaults options should not break any external tool accessing Solr especially if it prevents the user to monitor the GC with jstat. ",
            "id": "comment-14390220"
        },
        {
            "date": "2015-04-02T01:50:22+0000",
            "author": "Shawn Heisey",
            "content": "Would it be easily possible to detect the total amount of system memory and set the max heap to a percentage?\n\nWe have the JVM and extensive programming skills available to us.  IMHO there's no reason we can't leverage a very small commandline Java program (rolled into a jar like jetty uses start.jar) to gather detailed system information, calculate values and GC tuning options, write them to someplace relevant (the solr home maybe), and use them in the start script. ",
            "id": "comment-14391944"
        },
        {
            "date": "2016-10-02T03:22:12+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Was there a practical outcome of this discussion? I see the commits rolled in and rolled back. The last entry mentions a possible utility. Should that be span out with more explanations into its own improvement JIRA and this (bug) issue closed? ",
            "id": "comment-15539635"
        },
        {
            "date": "2016-10-03T15:00:35+0000",
            "author": "Shawn Heisey",
            "content": "AFAIK, nothing got resolved.  I think this is a potential problem for Solr, but I don't know that it's been explicitly documented anywhere.  The fundamental issue is something that probably needs a design change in Java itself.  I tried to work around the problem in my own installation by putting the temp files on a RAM-based disk partition, but it never quite worked like I wanted it to. ",
            "id": "comment-15542616"
        },
        {
            "date": "2016-10-03T15:24:27+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Should we close the issue then? If there is no next action and there is no consensus, there is no work we can do with it. Mark it as \"Information provided\" so people can find it if need be. ",
            "id": "comment-15542663"
        },
        {
            "date": "2016-10-03T15:42:11+0000",
            "author": "Shawn Heisey",
            "content": "Sounds like a good plan to me. ",
            "id": "comment-15542699"
        },
        {
            "date": "2016-10-03T15:44:26+0000",
            "author": "Alexandre Rafalovitch",
            "content": "No next action. ",
            "id": "comment-15542703"
        }
    ]
}