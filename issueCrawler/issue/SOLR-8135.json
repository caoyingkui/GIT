{
    "id": "SOLR-8135",
    "title": "SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection reproducible failure",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.0",
            "6.1",
            "7.0"
        ],
        "affect_versions": "6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "No idea what's going on here, noticed it while testing out an unrelated patch \u2013 seed reproduces against pristine trunk...\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=SolrCloudExampleTest -Dtests.method=testLoadDocsIntoGettingStartedCollection -Dtests.seed=59EA523FFF6CB60F -Dtests.slow=true -Dtests.locale=es_MX -Dtests.timezone=Africa/Porto-Novo -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 49.5s | SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: Delete action failed!\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([59EA523FFF6CB60F:4A896050CE030FA9]:0)\n   [junit4]    > \tat org.apache.solr.cloud.SolrCloudExampleTest.doTestDeleteAction(SolrCloudExampleTest.java:169)\n   [junit4]    > \tat org.apache.solr.cloud.SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection(SolrCloudExampleTest.java:145)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:963)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:938)",
    "attachments": {
        "SOLR-8135.failure.log": "https://issues.apache.org/jira/secure/attachment/12765283/SOLR-8135.failure.log",
        "SOLR-8135.patch": "https://issues.apache.org/jira/secure/attachment/12767506/SOLR-8135.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-06T23:27:37+0000",
            "author": "Hoss Man",
            "content": "attaching ant output testing against...\n\n\nhossman@tray:~/lucene/dev$ svnversion && svn info | grep URL\n1707150\nURL: https://svn.apache.org/repos/asf/lucene/dev/trunk\nRelative URL: ^/lucene/dev/trunk\n\n\n\nwith command...\n\n\nANT_ARGS=\"\" ant test -Dtestcase=SolrCloudExampleTest -Dtests.method=testLoadDocsIntoGettingStartedCollection -Dtests.seed=59EA523FFF6CB60F -Dtests.slow=true -Dtests.locale=es_MX -Dtests.timezone=Africa/Porto-Novo -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1 > SOLR-8135.failure.log\n\n ",
            "id": "comment-14945992"
        },
        {
            "date": "2015-10-17T12:00:57+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1709142 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1709142 ]\n\nSOLR-8135: Disable test until it can be fixed ",
            "id": "comment-14961867"
        },
        {
            "date": "2015-10-17T12:01:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1709143 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1709143 ]\n\nSOLR-8135: Disable test until it can be fixed ",
            "id": "comment-14961868"
        },
        {
            "date": "2015-10-17T12:29:21+0000",
            "author": "Uwe Schindler",
            "content": "failed also on almost any build on Jenkins (2 of 3 builds failed). Thanks for disabling. I was afraid to do this... ",
            "id": "comment-14961877"
        },
        {
            "date": "2015-10-18T20:15:54+0000",
            "author": "Gus Heck",
            "content": "also with \n\nant test  -Dtestcase=SolrCloudExampleTest -Dtests.method=testLoadDocsIntoGettingStartedCollection -Dtests.seed=D7797CB78640592B -Dtests.slow=true -Dtests.locale=mt_MT -Dtests.timezone=Jamaica -Dtests.asserts=true -Dtests.file.encoding=US-ASCII \n\non 5.x ",
            "id": "comment-14962604"
        },
        {
            "date": "2015-10-19T16:57:11+0000",
            "author": "Timothy Potter",
            "content": "Noble Paul Can you take a look at this failure? From the logs, it looks like something is breaking in the config overlay / refresh layer when a collection is being deleted. There's nothing wrong with this test. ",
            "id": "comment-14963604"
        },
        {
            "date": "2015-10-19T20:56:48+0000",
            "author": "Erick Erickson",
            "content": "I did notice that if I added any code that delayed for 15 seconds after the doTestConfigUpdate call in that test that it would succeed. Just hacking around for clues I tried looking at the ZK state to see if we were missing a state change and I didn't see any (looking at ZK state and seeing if any nodes weren't active). If I either looped for 15 seconds looking for not active states or just slept for 15 seconds, the test would consistently pass.\n\nI may have a bit of time to look at this on the flight home tonight.....\n\nAnd if I commented out the doUpdateConfig, it would succeed.\n\nNone of which helps pinpoint what's going on, but helps me get a clue where to start looking... ",
            "id": "comment-14964038"
        },
        {
            "date": "2015-10-20T00:44:39+0000",
            "author": "Erick Erickson",
            "content": "So far, this patch keeps the test from failing. I hacked this in on the hint that buried in the failure case was a message about \"could not reload core blah blah blah\" and the fact that if I commented out the update config bits the test succeeded.\n\nMaybe a race condition between multiple API calls modifying the configs and core reloading? This patch forces the collection to reload as part of updating the config...\n\nNoble Paul Mark Miller Yonik Seeley\nThis feels like a band-aid though. I see in the ref guide that listeners are registered on the zknode and reloads happen sometime although I'm unclear on what exactly triggers them. It seems like any modification of the config file should be atomic in the sense that as long as the updates are valid, any core reloads should get a config that loads successfully. How do we guarantee atomic reads/writes of the config files? Especially when the read path is different than the write path?\n\nI don't have the logs right now, so I don't have a good sense of what in core reload was really failing, I'll see if I can get some of that info.\n\nNOTE: I'm on a plane so I could only beast this lightly. Nevertheless, I never got 4 successful runs before this patch and got 16 with the patch so it certainly seems in the right neighborhood. I'll be able to give it a more thorough spin when I'm not on battery. Assuming we think this is the right fix. ",
            "id": "comment-14964325"
        },
        {
            "date": "2015-10-20T04:59:24+0000",
            "author": "Erick Erickson",
            "content": "\nHere's all the stack trace related to reloading the core I could find on a failure run.\n\n[junit4]   2> 50808 INFO  (SolrConfigHandler-refreshconf) [n:127.0.0.1:52555_cib c:gettingstarted s:shard2 r:core_node2 x:gettingstarted_shard2_replica2] o.a.s.c.ConfigSetProperties Did not find ConfigSet properties, assuming default properties: Can't find resource 'configsetprops.json' in classpath or '/configs/gettingstarted', cwd=/Users/Erick/apache/solr/beast-tmp/3/J0\n   [junit4]   2> 50808 INFO  (SolrConfigHandler-refreshconf) [n:127.0.0.1:52555_cib c:gettingstarted s:shard2 r:core_node2 x:gettingstarted_shard2_replica2] o.a.s.c.CoreContainer Reloading SolrCore 'gettingstarted_shard2_replica2' using configuration from collection gettingstarted\n   [junit4]   2> 50808 ERROR (SolrConfigHandler-refreshconf) [n:127.0.0.1:52555_cib c:gettingstarted s:shard2 r:core_node2 x:gettingstarted_shard2_replica2] o.a.s.h.SolrConfigHandler Unable to refresh conf \n   [junit4]   2> org.apache.solr.common.SolrException: Unable to reload core [gettingstarted_shard2_replica2]\n   [junit4]   2>  at org.apache.solr.core.CoreContainer.reload(CoreContainer.java:837)\n   [junit4]   2>  at org.apache.solr.core.SolrCore$11.run(SolrCore.java:2602)\n   [junit4]   2>  at org.apache.solr.handler.SolrConfigHandler$Command$1.run(SolrConfigHandler.java:212)\n   [junit4]   2> Caused by: java.lang.IllegalStateException: IndexWriter has been closed\n   [junit4]   2>  at org.apache.solr.update.SolrCoreState.increfSolrCoreState(SolrCoreState.java:53)\n   [junit4]   2>  at org.apache.solr.core.SolrCore.reload(SolrCore.java:462)\n   [junit4]   2>  at org.apache.solr.core.CoreContainer.reload(CoreContainer.java:832)\n\n ",
            "id": "comment-14964522"
        },
        {
            "date": "2015-10-20T14:21:42+0000",
            "author": "Mark Miller",
            "content": "Thanks Erick, looks like a reload is somehow triggering after the core is already closed? ",
            "id": "comment-14965162"
        },
        {
            "date": "2015-10-20T15:44:29+0000",
            "author": "Erick Erickson",
            "content": "An 80 iteration beast of the test ran fine last night with this patch. And yes, I did remove the badapple notation.\n\nI'm pretty convinced this is not the right fix though, it just helps identify the problem area. ",
            "id": "comment-14965275"
        },
        {
            "date": "2015-10-20T15:55:31+0000",
            "author": "Erick Erickson",
            "content": "Mark:\n\nThat's my assumption, got a full day today so can't do anything on it until at least this evening though. ",
            "id": "comment-14965288"
        },
        {
            "date": "2016-02-02T23:27:02+0000",
            "author": "Timothy Potter",
            "content": "I can fix the test to wait longer after it issues a config change but that will mask a race condition that the SolrConfigHandler refreshconf thread attempts to refresh a core that is being shutdown down.\n\n\n   [junit4]   2> 42606 INFO  (qtp1036148039-29) [n:127.0.0.1:58528_    ] o.a.s.c.SolrCore [gettingstarted_shard1_replica1]  CLOSING SolrCore org.apache.solr.core.SolrCore@53fda895\n\n\n\nand then later in the log, you have: \n\n\n   [junit4]   2> 42629 INFO  (SolrConfigHandler-refreshconf) [n:127.0.0.1:58528_ c:gettingstarted s:shard1 r:core_node4 x:gettingstarted_shard1_replica1] o.a.s.c.ConfigSetProperties Did not find ConfigSet properties, assuming default properties: Can't find resource 'configsetprops.json' in classpath or '/configs/gettingstarted', cwd=/home/hossman/lucene/dev/solr/build/solr-core/test/J0\n   [junit4]   2> 42629 INFO  (SolrConfigHandler-refreshconf) [n:127.0.0.1:58528_ c:gettingstarted s:shard1 r:core_node4 x:gettingstarted_shard1_replica1] o.a.s.c.CoreContainer Reloading SolrCore 'gettingstarted_shard1_replica1' using configuration from collection gettingstarted\n   [junit4]   2> 42630 ERROR (SolrConfigHandler-refreshconf) [n:127.0.0.1:58528_ c:gettingstarted s:shard1 r:core_node4 x:gettingstarted_shard1_replica1] o.a.s.h.SolrConfigHandler Unable to refresh conf\n   [junit4]   2> org.apache.solr.common.SolrException: Unable to reload core [gettingstarted_shard1_replica1]\n   [junit4]   2>        at org.apache.solr.core.CoreContainer.reload(CoreContainer.java:837)\n   [junit4]   2>        at org.apache.solr.core.SolrCore$11.run(SolrCore.java:2602)\n   [junit4]   2>        at org.apache.solr.handler.SolrConfigHandler$Command$1.run(SolrConfigHandler.java:212)\n\n\n\nI see some checks for whether the core is closed, so maybe there's nothing we can do better to detect this race condition, but would appreciate if Noble Paul could take a closer look at the checks? If not, the only fix here is to wait longer for the config changes to take effect before issuing the delete. ",
            "id": "comment-15129334"
        },
        {
            "date": "2016-02-02T23:57:33+0000",
            "author": "Timothy Potter",
            "content": "The other interesting thing to note is that the SolrConfigHandler does try to wait up to 30 seconds for agreement across all cores, but that does not mean the config has been applied on all cores, apparently. For instance, in the log you see:\n\n\n   [junit4]   2> 41864 INFO  (qtp1735783147-155) [n:127.0.0.1:35628_ c:gettingstarted s:shard2 r:core_node1 x:gettingstarted_shard2_replica2] o.a.s.h.SolrConfigHandler Took 905.0ms to set the property overlay to be of version 0 for collection gettingstarted\n\n\n\nBut there is still config loading activity going on in the cores after this point, so that wait is somewhat misleading. I still think the fix here is to have the test wait longer before issuing the delete, but we should also revisit whether the SolrConfigHandler can do better at detecting a core is shutting down? ",
            "id": "comment-15129380"
        },
        {
            "date": "2016-02-03T00:16:04+0000",
            "author": "Timothy Potter",
            "content": "Chatting with Chris Hostetter (Unused), it seems like the SolrConfigHandler should be able to leverage the CloseHook support in SolrCore to be able to detect a core is being closed and stop its attempts at refreshing config.\n\nMoreover, as I thought about the previous comment some more, I actually think the true bug here is the config handler returns before the config change has been applied (it seems from the log anyway) ... not sure why anyone would want a config update request to return to them before the change has been applied across the cluster? Seems hard for a client app to reason about whether a change is fully applied or not with the way things are w/o adding arbitrary waits, which would just be a bandaid in the SolrCloudExampleTest. ",
            "id": "comment-15129422"
        },
        {
            "date": "2016-02-03T07:57:42+0000",
            "author": "Noble Paul",
            "content": "Diagnosis: This happens because of a race condition. We have multiple threads in parallel that invoked an unload/or reload. Race condition caused one of the threads to fail. In our code any failure in reload() would put this core as a permanent failure. It is not a failure , it is just that two threads simultaneously tried to perform the reload/unload. \n\nSolution: We need to handle this Exception differently . So I just created a new Exception called CoreIsClosedException this wouldn't add the core to permanently failed cores as IndexWriter has been closed. \n\nFollow Question up for others : If I'm trying to perform a reload and it fails , should we retry? ",
            "id": "comment-15129987"
        },
        {
            "date": "2016-02-03T16:36:46+0000",
            "author": "Erick Erickson",
            "content": "I can reasonably reliably get this to fail over night (14 out of 1,000) with the following error, so let me know if there's a patch I can try:\n\n> Throwable #1: java.lang.AssertionError: Delete action failed!\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([ECD502B89BFAF991:FFB630D7AA954037]:0)\n   [junit4]    > \tat org.apache.solr.cloud.SolrCloudExampleTest.doTestDeleteAction(SolrCloudExampleTest.java:171)\n   [junit4]    > \tat org.apache.solr.cloud.SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection(SolrCloudExampleTest.java:147)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:965)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:940)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745) ",
            "id": "comment-15130645"
        },
        {
            "date": "2016-02-03T17:59:06+0000",
            "author": "Erick Erickson",
            "content": "This feels a little like a band-aid. If I'm reading this right, the sequence is this:\n\n1> the test changes the configs, kicking off reloads for the cores\n2> the test deletes the collection\n\n<2> happens before <1> is complete, thus the race as the reload doesn't get around to reloading the core after the delete happens and the core is closed. Is this about right?\n\nTim's comment about a delay suggests that if we waited for the config changes to complete reloading before continuing the test we'd be OK. It seems like a better option would be to have Solr not start the delete while reloads were pending. Or more generally not start carrying out one command while another potentially conflicting operation was being carried.\n\nNot sure how hard having Solr be smart enough to delay \"potentially conflicting\" operations would be though. ",
            "id": "comment-15130774"
        },
        {
            "date": "2016-02-04T03:23:32+0000",
            "author": "Noble Paul",
            "content": "This feels a little like a band-aid. \nErick, I'm not trying to make this test pass. This is a more serious issue. A race condition should not put a core in an unrecoverable error situation. This would cause SolrCloud to lose replicas randomly. I'm surprised users have not experienced it yet . So, this fix must be done anyway. \n\nTim's comment about a delay suggests that if we waited for the config changes to complete reloading before continuing the test we'd be OK\nThat is fine if you wish to just avoid hitting the race condition. But in this case we should be glad that this test has uncovered a race condition ",
            "id": "comment-15131652"
        },
        {
            "date": "2016-02-04T05:33:02+0000",
            "author": "Erick Erickson",
            "content": "Noble:\n\nWell, perhaps I phrased things poorly, so let's start over and not even consider the test.\n\nbq: A race condition should not put a core in an unrecoverable error situation\n\nTotally agree. If I understand the patch though, the reload operation and the delete operation are competing. In this particular case the reload was caused by changing the configs, but that's largely immaterial. The delete got in there before the reload operation and closed the core. What happens with throwing this new exception is that the reload operation still fails in the sense that the core is still unavailable right? I don't quite see how throwing a new exception and catching it but not adding it to the failures list changes the fact that the core failed to reload; it's still unavailable. How does it ever recover?\n\nOr are you saying that in this case, since the core is deleted it really doesn't need to recover? That still doesn't seem to cover the general case of the core being closed during a reload operation. There's a comment somewhere in the code that perhaps the reload should be retried. It'll still fail in this case, but are there others where reloading will succeed and thus we should retry?\n\nAll that said, it'll be at least tomorrow night before I can beast this patch....\n\n\n ",
            "id": "comment-15131762"
        },
        {
            "date": "2016-02-04T05:42:35+0000",
            "author": "Noble Paul",
            "content": "the CoreContainer.coreInitFailures is a map which is intended to track a core that  has failed to load, most likely due to unrecoverable errors (such as index corruption).  This prevents other operations as well (such as delete) because any operation involving that core would consult this map  .A race condition is not unrecoverable. Imagine the race condition didn't occur, the core would not have been entered into this unrecoverable list and that is the expected behavior  ",
            "id": "comment-15131772"
        },
        {
            "date": "2016-03-10T17:26:50+0000",
            "author": "Erick Erickson",
            "content": "Noble Paul Should we commit this? I just beasted this for 1,00 runs last night. I saw some failures, but they were either \"zombie threads\" or \"suite timeout exceeded\" which I don't think are relevant to this code. ",
            "id": "comment-15189592"
        },
        {
            "date": "2016-03-10T17:30:55+0000",
            "author": "Noble Paul",
            "content": "it surely would have avoided the failures. I was asking for a second opinion from others to review the code and confirm there are no unintended consequences.\n\nI guess we should commit this and get this into 6.0 anyway ",
            "id": "comment-15189597"
        },
        {
            "date": "2016-03-10T19:20:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8cc978b53b1299a27de492d7114cd2d4e353b6cb in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8cc978b ]\n\nSOLR-8135: SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection reproducible failure ",
            "id": "comment-15189786"
        },
        {
            "date": "2016-03-10T19:24:08+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6689e1c55a7efffadb18d25179d9d87c121af5d0 in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6689e1c ]\n\nSOLR-8135: SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection reproducible failure ",
            "id": "comment-15189794"
        },
        {
            "date": "2016-03-10T19:24:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 96b059c9dd67eef3a49da63d388fac7f4d3809f2 in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=96b059c ]\n\nSOLR-8135: SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection reproducible failure ",
            "id": "comment-15189795"
        },
        {
            "date": "2016-03-10T19:27:44+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4a795ee371c1bb19285cca0fb7336807f6e2840f in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4a795ee ]\n\nSOLR-8135: typo in comment ",
            "id": "comment-15189801"
        },
        {
            "date": "2016-03-10T19:29:31+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 72f6261f55b6d851d071c8358a05b52e019416c9 in lucene-solr's branch refs/heads/branch_6_0 from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=72f6261 ]\n\nSOLR-8135: SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection reproducible failure ",
            "id": "comment-15189807"
        },
        {
            "date": "2016-03-10T19:29:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d3f310a18d3c7787219515e82b76d18ef6a8e050 in lucene-solr's branch refs/heads/branch_6_0 from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3f310a ]\n\nSOLR-8135: SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection reproducible failure ",
            "id": "comment-15189808"
        },
        {
            "date": "2016-03-10T19:29:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a774273c641b7f95b09da9440ef43f24f5207584 in lucene-solr's branch refs/heads/branch_6_0 from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a774273 ]\n\nSOLR-8135: typo in comment ",
            "id": "comment-15189809"
        },
        {
            "date": "2016-05-10T23:44:26+0000",
            "author": "Hoss Man",
            "content": "Manually correcting fixVersion per Step #S6 of LUCENE-7271 ",
            "id": "comment-15279243"
        }
    ]
}