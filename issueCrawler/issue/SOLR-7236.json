{
    "id": "SOLR-7236",
    "title": "Securing Solr (umbrella issue)",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "This is an umbrella issue for adding security to Solr, and for high-level discussions.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-12T09:55:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Various enterprises have different security needs. The smallest just needs to enter a few users with permissions locally, others want to integrate with AD or LDAP instead of duplicating users. Some only need to secure the Admin UI and admin APIs, others need full update/query security on collection or even document level. As an enterprise product, Solr should not restrict this to only one or two implementations.\n\nThere are multiple existing frameworks to simplify the task of abstracting security implementations in Java apps, among them are JAAS , Spring Security and Apache Shiro. They are created to do the hard and scary stuff, provide simple APIs for developers and also provide out of the box integrations with all the various protocols. We really don't want to maintain support for Kerberos etc in Solr-code.\n\nAlthough any of these could probably do the job, I'm pitching Apache Shiro as the main API for all security related implementations in Solr. Without having used it, seems to be built just for this purpose. Solr users with some crazy legacy security system inhouse can write plugins for that to Shiro itself, instead of writing Solr code. http://shiro.apache.org/ ",
            "id": "comment-14358401"
        },
        {
            "date": "2015-03-23T09:46:12+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Looks like security is a hot topic for Solr these days, with five issues opened just the last few weeks.\n\nThe last two issues SOLR-7274 and SOLR-7275 suggest adding a series of Solr-specific classes to define an API for plugging in security. I'm trying to understand why this is necessary compared to choosing a standard framework that provides all of this for us, and let Solr code focus on search, not security APIs? ",
            "id": "comment-14375630"
        },
        {
            "date": "2015-03-27T10:21:43+0000",
            "author": "Per Steffensen",
            "content": "I am trying to understand why Solr wants to move away from being a web-app running in a servlet-container. A servlet-container can deal with all of the things you mention in a standardized way\n\nUser management (flat file, AD/LDAP etc)\n\nThat should really not be a Solr-concern. If you want your users/credentials in LDAP manage it through an LDAP management-interface, if you want them in flat files, let the admin change the files, etc\n\nAuthentication (Admin UI, Admin and data/query operations. Tons of auth protocols: basic, digest, oauth, pki..)\n\nImplement your own realm authenticating against whatever credentials-store you want with whatever protocol you want - and plug it into your servlet-container. Or use a 3party realm that authenticates against your preferred credentials-store and supporting your auth protocol. It is easy to find realms for Jetty (or Tomcat or ...) authenticating against flat files, LDAP or whatever. We wrote our own realm, authenticating against credentials-store in ZK - easy.\n\nAuthorization (who can do what with what API, collection, doc)\n\nLet your realm list roles that an authenticated user is allowed to play. Setup web.xml mapping roles to the url-paths they are allowed use. If limited flexibility (url-mapping with stupid limitations) of web.xml authentication is not good enough for you, implement it as a Filter yourself, or use some of the Filters already out there. E.g. I provided a reg-exp authorization filter with SOLR-4470 - it is very powerful.\n\nPluggability (no user's needs are equal)\n\nIt is all pluggable - realms, web.xml, filters etc ",
            "id": "comment-14383624"
        },
        {
            "date": "2015-03-27T20:16:31+0000",
            "author": "Shawn Heisey",
            "content": "I am trying to understand why Solr wants to move away from being a web-app running in a servlet-container. A servlet-container can deal with all of the things you mention in a standardized way\n\nBecause as long as the network and HTTP are handled by software that is outside of Solr, Solr has absolutely no ability to control it.  Ideally, you should be able to drop a configuration right in a handler definition (such as the one for /select) found in solrconfig.xml, listing security credentials (username/password, IP address, perhaps even certificate information) that you are willing to accept for that handler, along with exceptions or credentials that will allow SolrCloud inter-node communication to work.\n\nBringing the servlet container under our control as we did with 5.0 (with initial work in 4.10) allows us to tell people how to configure the servlet container for security in a predictable manner, but it is still not Solr and its configuration that's controlling it. ",
            "id": "comment-14384536"
        },
        {
            "date": "2015-03-30T08:33:29+0000",
            "author": "Per Steffensen",
            "content": "Thanks for a constructive answer!\n\nBecause as long as the network and HTTP are handled by software that is outside of Solr, Solr has absolutely no ability to control it.\n\nFirst of all, that is not true. Second, I am pretty sure that Solr does not have any ambition to deal with all the hard low-level network stuff itself. We will always use a 3rd party component for that - Netty, Spray or whatever. So it will always be a 3rd party component that connects with the network, receives requests, parses them etc before handing over control to Solr. So why not let Jetty (or any other web-container) do that - they do the job pretty well.\n\nIdeally, you should be able to drop a configuration right in a handler definition (such as the one for /select) found in solrconfig.xml, listing security credentials (username/password, IP address, perhaps even certificate information) that you are willing to accept for that handler, along with exceptions or credentials that will allow SolrCloud inter-node communication to work.\n\nYou can do that with a web-container, and I do believe that the way you would do it will not change much whether you want to do it with Jetty or Netty. The HttpServletRequest handed over by the web-container contains everything you need (maybe together with the web-container context), just as it probably would with any other network component. You can plug things into the web-container just as you probably can with any other network component.\nIf you give me an more exact example of what you want to achieve, that you believe cannot be achieved with a web-container, but you believe can be achieved with the other approach, I would love to make the code showing that you are wrong. If I can\u2019t, I will forever keep quiet - and that in itself is quit an achievement.\n\nBringing the servlet container under our control as we did with 5.0 (with initial work in 4.10) allows us to tell people how to configure the servlet container for security in a predictable manner\n\nYes, and if it was a web-container that had control, your could point to web-container documentation for info about how to configure.\nEven though I think it is an unnecessary move, it is an ok idea to say that Solr IS running in Jetty, making us able to tell exactly how to configure whatever you need to. If you want to use any other web-container, you are on your own. But leaving it a web-app behind the scenes would be great, so that advanced users can still take advantage of that. The problem, though, is that you lock with Jetty, and Jetty becomes an \u201cimplementation detail\u201d of Solr. Do not do that if it is not necessary, and I still have not seen very good reasons to do it. But at least I recognize that there might be good reasons.\n\nI am not sure about what you actually did in 5.0 (with initial work in 4.10). As far as I can see Solr still starts out by starting Jetty. Can you point me to some of the most important JIRAs for the remove-web-container initiative. Thanks!\n\nbut it is still not Solr and its configuration that's controlling it.\n\nBut it can be, without removing the web-container.\nThe thing I fear is spending a lot of resources and time removing Jetty and replacing it with lots of other 3rd party components (e.g. including Netty), and at best just reach status quo after a year or two. This entire umbrella-issue (SOLR-7236) is only/mainly necessary because of the moving-out-of-web-container initiative.\nThe fact that Solr is running in a web-container makes it very flexible - e.g. my projects have significant changes to both web.xml and jetty.xml. Other people might have similar setups just with Tomcat or whatever. Establishing the same kind of flexibility without a web-container will take years.\nIn my organization we started out using ElasticSearch, but for political reasons we moved to SolrCloud. The first thing that made me happy about that, was the fact that Solr(Cloud) is a web-app, because I know exactly how they work, they are standardized and flexible - believe a lot of people feel the same way\n\nAt least, if you insist on removing the web-container, make sure not to do it before all the flexibility it gives can somehow be achieved in another way. If you really wanted to do cool stuff in this area, making Solr(Cloud) based on dependency injection (configuration and/or annotation) would be great - e.g. using Spring or Guice. Both top-level Solr, but also sub-parts of Solr. E.g. the fact that solrconfig.xml is a self-invented configuration-structure that screams to be replaced by (de-facto) standardized dependency injection is a major problem.\n\nSorry for partly highjacking the issue, Jan H\u00f8ydahl - I did not manage to keep this about security only ",
            "id": "comment-14386392"
        },
        {
            "date": "2015-03-30T15:43:51+0000",
            "author": "Shawn Heisey",
            "content": "I admit that I do not know what is possible when the servlet container is external to Solr, but I've heard that there are many things that we cannot do.  One of the big ones is that we don't even know the port the container is listening on for our webapp, until we actually receive a request.  SolrCloud needs this information before requests are received, so we have overrides we can use if the port is not 8983, Java doesn't detect the correct IP address, etc ... but they are separate config items from what actually configures the servlet container, so it's possible to get the config wrong.\n\nJust taking the step of embedding Jetty into the application would give us far more capability and consistency than we currently have, but again I am ignorant of what kind of limitations we would face, and how that would compare to using Netty instead. ",
            "id": "comment-14386883"
        },
        {
            "date": "2015-03-30T21:55:19+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Let the topic of this JIRA be securing Solr. For the near future we can assume that will continue to be Jetty, but the security APIs we choose should not be tightly tied to Jetty or servlet containers. Feel free to find or create another JIRA to discuss container switch topics  ",
            "id": "comment-14387493"
        },
        {
            "date": "2015-03-31T08:24:06+0000",
            "author": "Per Steffensen",
            "content": "I am ok with embedding Jetty, and you are right, that there are probably lots of things that would be easier. Just make sure that you can still participate in configuring it from the outside - jetty.xml and web.xml. At least until an alternative solution gives the same flexibility. What I fear is that we remove all the flexibility of web-container - because we are using - including its ability to handle security.\n\nI checked out 5.0.0 code, but I am not able to see that Solr-node is not still just Jetty on top-level, and that Solr does not control anything before web.xml/SolrDispatchFilter. Can you please point me to some of the more important JIRAs around this \"hiding/removing web-container\" initiative. Thanks! Just want to understand what has been done/achieved until now. ",
            "id": "comment-14388227"
        },
        {
            "date": "2015-03-31T08:27:25+0000",
            "author": "Per Steffensen",
            "content": "Sorry Jan H\u00f8ydahl - will stop now. The discussion is related to security, but probably not enough to be discussed here. Guess this JIRA just deals with the fact that Solr-node is not necessarily web-container in the future - then what to do about security. Great initiative! ",
            "id": "comment-14388230"
        },
        {
            "date": "2015-03-31T11:44:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Yep, we need a container agnostic security API like Shiro. Or we could roll our own, but I'm not convinced that's necessary, I suspect it is such a thing that will grow out of hand, with constant requests for more bindings to framework X and thus give too wide an attack surface in Solr-specific code. ",
            "id": "comment-14388393"
        },
        {
            "date": "2016-09-28T11:30:42+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Closing this old umbrella. ",
            "id": "comment-15529330"
        }
    ]
}