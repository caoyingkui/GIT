{
    "id": "LUCENE-6006",
    "title": "Replace FieldInfo.normsType with FieldInfo.hasNorms boolean",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "I came across this precursor while working on LUCENE-6005:\n\nI think FieldInfo.normsType can only be null (field did not index\nnorms) or DocValuesType.NUMERIC (it did).  I'd like to simplify to\njust boolean hasNorms.\n\nThis is a strange boolean, though: in theory it should be derived from\nindexed && omitNorms == false, but we have it for the exceptions\ncase where every document in a segment hit an exception and never\nadded norms.  I think this is the only reason it exists?  (In theory,\nsuch cases should result in 100% deleted segments, which IW should\nthen drop ... but seems dangerous to \"rely\" on that).\n\nSo I changed the indexing chain to just fill in the default (0) norms\nfor all documents in such exceptional cases; this way going forward\n(starting with 5.0 indices) we really don't need this hasNorms.  But\nwe still need it for pre-5.0 indices...",
    "attachments": {
        "LUCENE-6006.patch": "https://issues.apache.org/jira/secure/attachment/12674623/LUCENE-6006.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14170114",
            "author": "Michael McCandless",
            "content": "Patch, I think it's ready.  I think it means that once I commit to 5.x, then for trunk I can remove this hasNorms since 5.x indices will never have hasNorms=false when indexed=true and omitNorms=false. ",
            "date": "2014-10-13T22:25:47+0000"
        },
        {
            "id": "comment-14170580",
            "author": "Robert Muir",
            "content": "\n but we have it for the exceptions\ncase where every document in a segment hit an exception and never\nadded norms. I think this is the only reason it exists?\n\nDon't think so. the main trouble is sparse fields actually. Add Doc with Field A, then go delete that doc... ",
            "date": "2014-10-14T06:39:05+0000"
        },
        {
            "id": "comment-14170712",
            "author": "Michael McCandless",
            "content": "Don't think so. the main trouble is sparse fields actually. Add Doc with Field A, then go delete that doc...\n\nHmm, and then go and merge that segment (with other segments just like it), right?  And then you have a segment that has not omitted norms, yet no documents in the segment actually have a norm.\n\nBut do we really need to track that separate state?  Why not just let all docs have the default (0) norm for such segments?  Default codec does sparse encoding now for norms... ",
            "date": "2014-10-14T09:21:35+0000"
        },
        {
            "id": "comment-14170717",
            "author": "Robert Muir",
            "content": "Right, thats a very legit decision now. But it wasnt the case before. Relying on the codec to do sparse compression in such a case is a little awkward. A .. much more difficult... alternative would be for merging to not set indexed=true unless it actually sees a posting. ",
            "date": "2014-10-14T09:32:32+0000"
        },
        {
            "id": "comment-14170764",
            "author": "Michael McCandless",
            "content": "I think that because 1) default codec now handles sparse norms well, and 2) this is an \"exotic\" case, we should in fact just drop the \"hasNorms\" in trunk.  We must keep it in 5.x because 4.x indices have such segments.\n\nRelying on the codec to do sparse compression in such a case is a little awkward.\n\nWell, we can't keep compromising Lucene's internal design for the \"least common denominator\" of codecs out there.  If you are one of the apps hitting this exotic use case, you'll need to use a codec that can sparse-encode your norms...\n\nA .. much more difficult... alternative would be for merging to not set indexed=true unless it actually sees a posting.\n\nHmm that's true ... but I think such an optimization is not worth the added code complexity for the exotic case where you indexed only some documents and then later deleted them all. ",
            "date": "2014-10-14T10:46:49+0000"
        },
        {
            "id": "comment-14170780",
            "author": "Robert Muir",
            "content": "\nWell, we can't keep compromising Lucene's internal design for the \"least common denominator\" of codecs out there. If you are one of the apps hitting this exotic use case, you'll need to use a codec that can sparse-encode your norms..\n\nI don't look at it as a design compromise, instead pushing the burden of all the \"crazy things users do\" into the codec: it makes one more difficult to write, because if it doesn't incorporate this optimization, users with 100,000 fields will complain.\n\nEven so, the patch might be the right way to go. I just am sad it does not actually go and clean this stuff up, instead waiting for it to \"age away\" in 6.x. I would instead nuke this boolean in 5.x. Just means 4.x fieldinfosreader needs to set a codec attribute for the \"old boolean\". 4.x norms readers need to look for such an attribute and if they see it, return DocValues.emptyNumeric() for the field.\n\nTo be able to safely do things like this, we must fix LUCENE-5990 first, and ensure that \"fieldinfos in\" == \"fieldinfos out\" for everything in the codec API. Otherwise they cannot rely upon things like attributes and we can't do such cleanups.\n ",
            "date": "2014-10-14T11:08:38+0000"
        },
        {
            "id": "comment-14170974",
            "author": "Michael McCandless",
            "content": "I just am sad it does not actually go and clean this stuff up, instead waiting for it to \"age away\" in 6.x. I would instead nuke this boolean in 5.x. Just means 4.x fieldinfosreader needs to set a codec attribute for the \"old boolean\". 4.x norms readers need to look for such an attribute and if they see it, return DocValues.emptyNumeric() for the field.\n\nOoh I like that idea, let me try it.  Then we can nuke this boolean on 5.x as well, and make these spooky \"undead norms\" codec private. ",
            "date": "2014-10-14T14:07:00+0000"
        },
        {
            "id": "comment-14171442",
            "author": "Michael McCandless",
            "content": "New patch, removing the hasNorms boolean (I still left FieldInfo/s.hasNorms, which return indexed && omitNorms == false) and making the \"undead norms\" case codec private, but I'm nervous about those changes ... seems a bit evil having the FieldInfos format from one codec (Lucene46) communicating to the Norms format from another (Lucene42).  And I have nocommits to somehow test that part ... ",
            "date": "2014-10-14T20:07:10+0000"
        },
        {
            "id": "comment-14171478",
            "author": "Michael McCandless",
            "content": "New patch, with cleaner private undead norms emulation in the legacy codecs ... I still need to work out a way to test this ... ",
            "date": "2014-10-14T20:35:13+0000"
        },
        {
            "id": "comment-14172260",
            "author": "Robert Muir",
            "content": "I like the latest patch. The back compat is contained, and the more I think about it, the more horrible I think this boolean is. ",
            "date": "2014-10-15T11:11:35+0000"
        },
        {
            "id": "comment-14172375",
            "author": "Michael McCandless",
            "content": "Another patch, improving javadocs and fixing the nocommits.\n\nTo test this, I just did \"the obvious thing\" and created undead\nindices for testing.\n\nThis then uncovered a corner case bug (now fixed!) in the previous\npatch when the entire index (not just one field) is undead.\n\nI think it's ready... ",
            "date": "2014-10-15T13:56:19+0000"
        },
        {
            "id": "comment-14172390",
            "author": "Robert Muir",
            "content": "In this \"undead army\" case, where every field is undead, instead of having lots of null checks in the NormsProducers, could we just make an all-empty producer, used by these backwards codecs? It will die with them (can sit in bakcwards-codecs package). I think it might be cleaner? ",
            "date": "2014-10-15T14:08:29+0000"
        },
        {
            "id": "comment-14172548",
            "author": "Michael McCandless",
            "content": "Good idea Rob ... I factored out the undead handling into a new UndeadNormsProducer, and added static methods that per-version formats invoke.\n\nI also added support & test for Lucene49NormsFormat, which can also be confronted by undead norms.\n\nI think it's ready.  This is the world's most difficult-to-eliminate \"useless\" boolean! ",
            "date": "2014-10-15T16:30:53+0000"
        },
        {
            "id": "comment-14172566",
            "author": "Robert Muir",
            "content": "+1, thank you! ",
            "date": "2014-10-15T16:42:41+0000"
        },
        {
            "id": "comment-14172595",
            "author": "ASF subversion and git services",
            "content": "Commit 1632120 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1632120 ]\n\nLUCENE-6006: remove unnecessary FieldInfo.normType ",
            "date": "2014-10-15T16:58:31+0000"
        },
        {
            "id": "comment-14172641",
            "author": "ASF subversion and git services",
            "content": "Commit 1632133 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1632133 ]\n\nLUCENE-6006: remove unnecessary FieldInfo.normType ",
            "date": "2014-10-15T17:32:36+0000"
        },
        {
            "id": "comment-14332570",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:43+0000"
        }
    ]
}