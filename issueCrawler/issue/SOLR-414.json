{
    "id": "SOLR-414",
    "title": "Coherent plugin initialization strategy",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We currently load many plugins with a Map or NamedList \u2013 since SOLR-215, the current core is not available through SolrCore.getSolrCore() and may need to be used for initialization.\n\nIdeally, we could change the init() methods from:\n\nvoid init( final Map<String,String> args );\n\nto\n\nvoid init( final SolrCore core, final Map<String,String> args );\n\n\nWithout breaking existing APIs, this change is difficult (some ugly options exist).  This patch offers a solution to keep existing 1.2 APIs, and allow access to the SolrConfig and SolrCore though ThreadLocal.  This should be removed in a future release.\n\n\n  DeprecatedPluginUtils.getCurrentCore();\n  DeprecatedPluginUtils.getCurrentConfig();\n\n\n\nThis patch removes the SolrConfig.Initalizable that was introduced in SOLR-215.\n\nFor background, see:\nhttp://www.nabble.com/Initializing---break-init%28%29-API-compatibility--tf4808463.html\n\nSee also: SOLR-260, SOLR-215,  SOLR-399",
    "attachments": {
        "SOLR-414-Initialization.patch": "https://issues.apache.org/jira/secure/attachment/12369752/SOLR-414-Initialization.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12543399",
            "date": "2007-11-18T20:00:03+0000",
            "content": "This patch maintains 1.2 API compatibility and gives access to core/config via ThreadLocal. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12543400",
            "date": "2007-11-18T20:01:02+0000",
            "content": "sorry, last patch was missing new files "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12543516",
            "date": "2007-11-19T10:41:09+0000",
            "content": "org.apache.solr.util.plugin.DeprecatedPluginUtils seems to be missing from patch. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12543558",
            "date": "2007-11-19T13:33:17+0000",
            "content": "sorry - I uploaded the wrong one "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12544101",
            "date": "2007-11-20T22:36:24+0000",
            "content": "Updated patch to reflect ideas discussed in:\nhttp://www.nabble.com/Initializing---break-init%28%29-API-compatibility--tf4808463.html\n\nThis sticks with 1.2 init APIs and abandons the previous ThreadLocal approach.  Instead, this\n\n1. Adds two interfaces: ResourceLoaderAware, SolrCoreAware\n2. The ResourceLoader keeps track of  \"Aware\" instances until it is told to \"Inform\" them\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12544592",
            "date": "2007-11-21T20:51:49+0000",
            "content": "it hadn't occurred to be that ResourceLoader could be a super class of Config ... i was assuming it would just be an object SolrConfig (or the SolrCore) held on to, and we'd deprecate those methods in Config.  is there an advantage i'm not thinking of to having it be superclass?\n\nIn theory \"ResourceLoader\" can be a very constrained interface for the plugins themselves that has no Solr dependencies...\n\n   public interface ResourceLoader \n{\n      /* a way to instantiate objects using an appropriate classloader */\n      public Object newInstance(String classname, String... subpackages);\n      /* a way to open config files, may check multiple directories in a set order */\n      public InputStream openResource(String name); \n      // ... getLines probably makes sense too.\n   }\n\n...and Solr has a concrete SolrResourceLoader class that knows about the instanceDir, config dir, default packages for plugins, etc.... \n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12544600",
            "date": "2007-11-21T21:18:28+0000",
            "content": "> \n> it hadn't occurred to be that ResourceLoader could be a super class of Config ... i was assuming it would just be an object SolrConfig (or the SolrCore) held on to, and we'd deprecate those methods in Config.  is there an advantage i'm not thinking of to having it be superclass?\n> \n\nThe only reason it is a super class is for easy API compatibility. Perhaps a better way is to have an independent ResourceLoader and add @deprecated getters to Config.java:\n\n@Deprecated\npublic String getConfigDir()\n{\n  return loader.getConfigDir()\n}\n\n\n> In theory \"ResourceLoader\" can be a very constrained interface for the plugins themselves that has no Solr dependencies...\n> \n\nI like that.  I'll put the 'ResourceLoader' class in o.a.s.util  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12544617",
            "date": "2007-11-21T22:27:13+0000",
            "content": "Here is an updated patch that:\n\n1. Makes ResourceLoader an independent interface and extracts SolrResourceLoader from Config (leaving depricated methods)\n\n2. Adds valid class checking for \"aware\" registration.  This is a simple check made to limit the scope of who can implement SolrCoreAware/ResourceLoaderAware if we want, we could easily remove this constraint:\n\n    awareCompatibility.put( \n      SolrCoreAware.class, new Class[] {\n        SolrRequestHandler.class,\n        QueryResponseWriter.class,\n        SearchComponent.class\n      }\n    );\n\n    awareCompatibility.put( \n      ResourceLoaderAware.class, new Class[] {\n        TokenFilterFactory.class,\n        TokenizerFactory.class,\n        FieldType.class\n      }\n    );\n\n\n\nIf things look good to you all, I will clean up some javadocs and the 'plugin' wiki page and commit. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12544834",
            "date": "2007-11-22T15:35:07+0000",
            "content": "Looks good to me; got a solr-350 + 409 patch (414 pre-integrated) ready to upload as soon as this gets committed. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12546526",
            "date": "2007-11-29T01:58:42+0000",
            "content": "Ryan,\n\nOn SOLR-319, I'd like SynonymFilterFactory to implement SolrCoreAware so that it can use \"fieldType\" instead of \"tokenFactory\"  to analyze synonyms.txt as Hoss suggested on that ticket. But due to above constraint, I got the following exception:\n\nFATAL: org.apache.solr.common.SolrException: Invalid 'Aware' object: org.apache.solr.analysis.SynonymFilterFactory@1e328e0 \u2013 org.apache.solr.util.plugin.SolrCoreAware must be an instance of: [org.apache.solr.request.SolrRequestHandler] [org.apache.solr.request.QueryResponseWriter] [org.apache.solr.handler.component.SearchComponent] \n\tat org.apache.solr.core.SolrResourceLoader.assertAwareCompatibility(SolrResourceLoader.java:341)\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:227)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.create(AbstractPluginLoader.java:83)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:140)\n\tat org.apache.solr.schema.IndexSchema.readAnalyzer(IndexSchema.java:652)\n\tat org.apache.solr.schema.IndexSchema.access$000(IndexSchema.java:57)\n\tat org.apache.solr.schema.IndexSchema$1.create(IndexSchema.java:338)\n\tat org.apache.solr.schema.IndexSchema$1.create(IndexSchema.java:356)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:140)\n\tat org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:365)\n\tat org.apache.solr.schema.IndexSchema.<init>(IndexSchema.java:73)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:286)\n\tat org.apache.solr.core.SolrCore.getSolrCore(SolrCore.java:254)\n\tat org.apache.solr.servlet.SolrDispatchFilter.init(SolrDispatchFilter.java:68)\n\tat org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:221)\n\tat org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(ApplicationFilterConfig.java:302)\n\tat org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:78)\n\tat org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:3635)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4222)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544)\n\tat org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)\n\tat org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553)\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488)\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138)\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1022)\n\tat org.apache.catalina.core.StandardHost.start(StandardHost.java:736)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014)\n\tat org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)\n\tat org.apache.catalina.core.StandardService.start(StandardService.java:448)\n\tat org.apache.catalina.core.StandardServer.start(StandardServer.java:700)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:552)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)\n\nCan the constraint be revised? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12546772",
            "date": "2007-11-29T15:51:49+0000",
            "content": "I am ok with relaxing the constraints. \n\nAs implemented, we could change the contract to say \"anything instantiated through the SolrResourceLoader that implements SolrCoreAware/ResourceLoaderAware will be informed\" \u2013 Alternatively we could add  TokenFilterFactory.class and TokenizerFactory.class to the list of valid components.\n\nHoss do you have thoughts on this? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12548304",
            "date": "2007-12-04T17:06:32+0000",
            "content": "Seems to me that relaxing by class will end up being very user-unfriendly if it is not easy to add a class to the list of \"really\" aware classes (would even seem counter-effective).\nThere are 2 approaches, one is to be explicit, the other is to relax the whole constraint and let the interface trigger the behavior.\nOn the explicit side, one solution could be an attribute in the schema (or alternatively a static block to register the class).\nOn the implicit side, relaxing by \"interface\" (versus per concrete instance) is almost a full-loop on the subject with the twist that we succeeded preserving the init signatures.\nWe might then want to reintroduce the solr-399 dependency graph feature since we are (back to) using Solr core objects before the core is fully initialized.\nThoughts ? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12548311",
            "date": "2007-12-04T17:17:51+0000",
            "content": "I lean towards the simple contract: \"if the SolrResourceLoader create the object, implementations of ResourceLoaderAware/SolrCoreAware will be informed about the ResourceLoader/SolrCore\"\n\n>\n> since we are (back to) using Solr core objects before the core is fully initialized.\n>\n\nnot true.  inform( SolrCore ) is the last thing that happens in the init process. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12548338",
            "date": "2007-12-04T18:32:40+0000",
            "content": "Simple contract is good.\n\n>> since we are (back to) using Solr core objects before the core is fully initialized.\n> not true. inform( SolrCore ) is the last thing that happens in the init process.\n\nYou are right; and this removes the cyclic and out-of-order dependency potential problems.\nTaking the example of using a field type in a token filter, the filter is (might be) made aware of the core before the field type but this is a non-issue since we are not actually using either of them before they are both informed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12548501",
            "date": "2007-12-05T01:50:56+0000",
            "content": "sorry i'm rejoining the party so late (i've been sick)\n\njust to clarify: one of the reasons analysis factories weren't on the SolrCoreAwareable list was to keep schema related things isolated from the core (it helps reduce complex dependencies, and leaves us more options for refactoring things later)\n\nIn the case of SOLR-319 there's really no reason why the entire SolrCore is needed right? \u2013 just the IndexSchema.  perhaps there should be an IndexSchemaAware interface?\n\nFWIW: rereading my earlier comments in SOLR-319, i think the best thing to do (for now at least) is to go with the simplest approach that achieves the goal: do what was done in the orriginal path, and just refer to the tokenizer factory class directly (which can be instantiated using the ResourceLoader) instead of refering to a fieldType name like i suggested.  \n\n...I'll put that last part in that issues as well.\n\n(NOTE: comment edited to fix issue number because i'm an idiot) "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12548659",
            "date": "2007-12-05T13:10:41+0000",
            "content": "Hoss,\nAre you suggesting dropping SolrCoreAware and replace it with IndexSchemaAware ?\nI'm under the impression that SolrCoreAware is not needed (and might not even be desirable) with ResourceLoaderAware & IndexSchemaAware available.\n\nMay I kindly suggest that if you Hoss & Ryan feel we can't close the topic yet, we at least commit it with an in-flux state? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12548925",
            "date": "2007-12-06T05:37:36+0000",
            "content": "Koji, are you able to get what you need working with hoss' suggestion?\n\nIf so, I am tempted to sit on this for a while and see how it feels as we try new things.  I am not against removing the artificial constraint, but I agree with the idea that keeping it gives us more wiggle room in the future.\n\nI suppose we could do an IndexSchemaAware interface, but I am not sure how much that gains.  I think the nice thing about the SolrCoreAware interface is that the class declares what its dependencies are.  This makes it possible for most analyzers/fields/tokenizers/etc to have no dependencies, a few to need ResourceLoader and a couple to need SolrCore/IndexSchema.  In my opinion, since the class defines its dependencies, it is not a problem to give it access to SolrCore.  Obviously it would not work outside solr, but the classes that don't depend on core could.\n\nBut, unless there is a real need, we can always relax the constraint in the future.\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12548929",
            "date": "2007-12-06T06:17:09+0000",
            "content": "Ryan,\nI'm happy with hoss' last comment regarding SOLR-319. So I don't need to implement SolrCoreAware (and IndexSchemaAware) any more in SOLR-319.\nThank you for your consideration. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12549232",
            "date": "2007-12-06T23:20:44+0000",
            "content": "I added some docs to the wiki and will resolve this issue.  If we need to relax the constraints later, lets do that in a new issue "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12549653",
            "date": "2007-12-08T05:40:06+0000",
            "content": "Henri: this comment concerns me...\n\n> May I kindly suggest that if you Hoss & Ryan feel we can't close the\n> topic yet, we at least commit it with an in-flux state?\n\n...as far as i can tell Ryan already commited all of the SolrCoreAware and ResourceLoader stuff back on Nov24 ... is there more to this issue that you feel is missing and still needs committed?\n\n\nAnd just to clarify one thing...\n\n> Hoss,   \n> Are you suggesting dropping SolrCoreAware and replace it with IndexSchemaAware ?\n\nNo, SolrCoreAware should serve a valuable purpose for plugins that historicaly might have accessed one of the singletons from an init() method \u2013 i was just suggesting that an IndexSchemaAware API might (someday) be handy analysis type plugins that want an equally tight \"call back\" coupling with the IndexSchema when it's initialized. "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13669561",
            "date": "2013-05-29T18:47:51+0000",
            "content": "I don't need access to the core: I just need to establish a CloseHook(). But I don't see how to do that based on Hoss Man's suggestion. "
        }
    ]
}