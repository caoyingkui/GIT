{
    "id": "LUCENE-6881",
    "title": "Cutover all BKD tree implementations to the codec",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "This is phase 4 for enabling indexing dimensional values in Lucene\n... follow-on from LUCENE-6861.\n\nThis issue removes the 3 pre-existing specialized experimental BKD\nimplementations (BKD* in sandbox module for 2D lat/lon geo, BKD3D* in\nspatial3d module for 3D x/y/z geo, and range tree in sandbox module)\nand instead switches over to having the codec index the dimensional\nvalues.",
    "attachments": {
        "LUCENE-6881.patch": "https://issues.apache.org/jira/secure/attachment/12770294/LUCENE-6881.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14987041",
            "author": "Michael McCandless",
            "date": "2015-11-03T10:33:04+0000",
            "content": "Initial patch, plenty of nocommits too, and some tests fail, but I think it's close ... "
        },
        {
            "id": "comment-14991464",
            "author": "Michael McCandless",
            "date": "2015-11-05T10:20:16+0000",
            "content": "New patch, fixing nocommits and improving tests and passing precommit.\n\nI think it's ready ... "
        },
        {
            "id": "comment-14995739",
            "author": "ASF subversion and git services",
            "date": "2015-11-08T18:18:21+0000",
            "content": "Commit 1713278 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1713278 ]\n\nLUCENE-6881: cutover all BKD implementations to the codec's implementation "
        },
        {
            "id": "comment-14995740",
            "author": "Michael McCandless",
            "date": "2015-11-08T18:20:09+0000",
            "content": "Fixed (6.0 only) ... I'll post some performance results here soon ... "
        },
        {
            "id": "comment-14996364",
            "author": "Michael McCandless",
            "date": "2015-11-09T10:54:42+0000",
            "content": "I re-ran the \"lat/lon points in rects around London, UK\" perf test from luceneutil (IndexOSM*.java and SearchOSM*.java sources).\n\nThis test indexes 60.8 M lat/lon points derived from Open Street Maps data and then runs varying regularly spaced rectangles (225 queries in all) around London, UK.\n\nI used SMS and LogDocsMP to get to a 5/5/5 segment structure for all three tests, and so only a single thread is used throughout for fair comparison of indexing times:\n\nSpatial module, using RecursivePrefixTreeStrategy with PackedQuadPrefixTree at 25 levels:\n\n\t1,464 sec to index\n\t7.8 GB index on disk\n\t239 MB in-heap (ramBytesUsed summed across all segments)\n\t3.98 sec to run 225 searches (best of 100 iters)\n\n\n\nGeoPointField (sandbox)\n\n\t497 sec to index\n\t3.2 GB index on disk\n\t86 MB heap (ramBytesUsed summed across all segments)\n\t4.48 sec to run 225 searches (best of 100 iters)\n\n\n\nDimensional values (this patch) using default codec's dimensional format\n\n\t744 sec to index\n\t704 MB index on disk\n\t2.3 MB heap (ramBytesUsed summed across all segments)\n\t2.85 sec to run 225 searches (best of 100 iters)\n\n\n\nThe spatial module is purely postings, geo point field is postings + doc values, and dimensional values is the new BKD tree.\n\nNet/net indexing time for dimensional values approach is in between geo point field and spatial, but the resulting index as well as heap required at search time is much smaller, and the searching is faster.\n\nThe search time for dimensional values is a bit slower than the specialized (to lat/lon) doc-values based BKD from LUCENE-6477 / LUCENE-6645 (2.32 sec to run 225 searches) but I think we can optimize things later.\n\nI haven't tested the 1D case, and I suspect there are important specializations we can make there, but I'll save that for a follow-on. "
        },
        {
            "id": "comment-14996568",
            "author": "David Smiley",
            "date": "2015-11-09T14:13:13+0000",
            "content": "These are incredible numbers Michael McCandless; bravo!\n\nCurious; do you imagine that BKD might one day be modified to differentiate the indexed cells by two types \u2013 what I call a \"leaf\" and a non-leaf\"?  So in this way, a document could have BKD cells that are leaves and non-leaves which refer to indexing non-point shapes in which the inner cells entirely contained by some indexed shape have leaf cells and the non-leaf cells are those at the edge? "
        },
        {
            "id": "comment-14998823",
            "author": "Michael McCandless",
            "date": "2015-11-10T16:09:33+0000",
            "content": "Curious; do you imagine that BKD might one day be modified to differentiate the indexed cells by two types \n\nI do think that's a natural (future!) generalization for DimensionalFormat, so we can index shapes.\n\nIt's useful in the 1D case as well: it would let us index numeric ranges, or even unions of disjoint ranges, in a single document/field.\n\nBut I think we should postpone this for now ... it would add quite a bit of complexity, and we need to see how dimensional values are used / hardened first. "
        },
        {
            "id": "comment-14998830",
            "author": "Michael McCandless",
            "date": "2015-11-10T16:12:26+0000",
            "content": "I tested the 1D case as well, just indexing \"lat\" from the London UK test as an int, and comparing NumericRangeQuery with DimensionalRangeQuery.\n\nSources are in luceneutil, look for IndexAndSearchOpenStreetMaps1D.java.\n\nIntField / NumericRangeQuery\n\n\t176 sec to index\n\t744 MB index on disk\n\t14.4 MB in-heap (ramBytesUsed summed across all segments)\n\t7.3 sec to run 225 searches (best of 100 iters)\n\n\n\nDimensionalField / DimensionalRangeQuery\n\n\t363 sec to index\n\t472 MB index on disk\n\t2.3 MB in-heap (ramBytesUsed summed across all segments)\n\t5.4 sec to run 225 searches (best of 100 iters)\n\n\n\nSo again a slower indexing time, but then a smaller (less so vs. the 2D case) index, much less heap used, and faster queries. "
        }
    ]
}