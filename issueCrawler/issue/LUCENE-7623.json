{
    "id": "LUCENE-7623",
    "title": "Add FunctionScoreQuery and FunctionMatchQuery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [],
        "fix_versions": [
            "6.5"
        ]
    },
    "description": "We should update the various function scoring queries to use the new DoubleValues API",
    "attachments": {
        "LUCENE-7623.patch": "https://issues.apache.org/jira/secure/attachment/12846307/LUCENE-7623.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15811522",
            "date": "2017-01-09T11:21:53+0000",
            "content": "Here is a patch with two new queries, FunctionScoreQuery and FunctionMatchQuery.\n\n\n\tFunctionScoreQuery takes a query to wrap and a DoubleValuesSource, and modifies the internal query's score using the per-document values.  This can act as a replacement for FunctionQuery using a constant or per-field DoubleValuesSource, or as a replacement for CustomScoreQuery or BoostedQuery using an expression.  The wrapped query's scores are passed to any DoubleValues created via getValues(LeafReaderContext, DoubleValues).\n\n\n\n\n\tFunctionMatchQuery takes a DoubleValuesSource and a Predicate<Double>, and returns any documents with a value that matches the predicate.  It works by linear scan, but uses two-phase iteration so it should be efficient when combined with a more restrictive query.  Unlike FunctionRangeQuery, it returns a constant score, so if you want to use the DoubleValues as scores, you will need to wrap it with a FunctionScoreQuery.\n\n\n\nThe patch also adds some more informative toString() implementations to expressions and field DoubleValues, to make the Explanations for FunctionScoreQuery more useful. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15811781",
            "date": "2017-01-09T13:32:25+0000",
            "content": "Updated patch, FunctionMatchQuery now uses ConstantScoreWeight. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15817100",
            "date": "2017-01-11T04:08:56+0000",
            "content": "Looks alright but I didn't review thoroughly. I noticed one problem: TwoPhaseIterator.matchCost as implemented here isn't right.  It's supposed to be the match cost for a single document, thus returning maxDocs is definitely not the right response.  See the javadocs.  Unfortunately since DoubleValueSource has no similar cost, you can't propagate... so might as well return some constant.  Judging from existing impls... anywhere between 10 and 100 is good to me. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15817833",
            "date": "2017-01-11T09:49:33+0000",
            "content": "Good catch, thanks David Smiley.  Here's an updated patch, including an updated build.xml so that ant runs the new tests properly. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15822952",
            "date": "2017-01-14T21:16:33+0000",
            "content": "I like this functionality, here are some comments:\n\n\n\tWhy did you add a new forSearcher method, there does not seem to be any useful implementation of it?\n\tI think it can be problematic to call doubleValue() from toString() since doubleValue() requires that the values source be positioned while toString() may be called anytime.\n\tWhy do the new tests depend on the expressions module? I would rather like to have custom values sources in the test class than adding this new dependency.\n\tLet's use DoublePredicate rather than Predicate<Double>?\n\tLet's maybe add a TODO around the cost impl of FunctionMatchQuery about whether values sources should be able to give this information.\n\tMaybe FunctionScoreWeight should cast to double after the multiplication with the boost in order to reduce the accuracy loss?\n\tCan we not use the @Test annotation, like in lucene/core?\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15823139",
            "date": "2017-01-15T14:11:14+0000",
            "content": "Thanks Adrien.  Here's an updated patch:\n\n\tRemoves forSearcher() - I'd put this in initially so that we could create sources for particular IndexSearchers (by analogy to Query/Weight), but it isn't necessary for this patch.\n\tNo more toString() impls on DoubleValues, explanations are now taken from their parent sources\n\tTests don't depend on expressions, instead I've added a couple of helper functions to DoubleValuesSource that will apply DoubleFunctions to a wrapped source.\n\tPredicate<Double> -> DoublePredicate\n\tTODO added\n\tChanged the casting\n\tannotations removed\n\n ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15823152",
            "date": "2017-01-15T14:31:21+0000",
            "content": "Did you upload an old patch? It does not seem to have the changes you mentioned. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15823184",
            "date": "2017-01-15T16:56:57+0000",
            "content": "I apparently did, yes, sorry... here's the correct patch ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15823660",
            "date": "2017-01-16T09:14:57+0000",
            "content": "Thanks Alan, I just have some minor comments now, +1 otherwise!\n\n\tLet's use DoubleUnaryOperator rather than DoubleFunction<Double> and ToDoubleBiFunction<Double,Double> rather tan BiFunction<Double, Double, Double>\n\tLet's make FunctionMatchQuery and FunctionScoreQuery final\n\tIn FunctionScoreQuery, I think we should only ask for scores on the wrapped weight if the values source needs scores, ie. Weight inner = in.createWeight(searcher, needsScores && valuesSource.needsScores(), 1f);\n\tI think the tests could be improved by checking TopDocs.totalHits too? Otherwise we might miss cases when the top docs are the same but one query yields more results?\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15823719",
            "date": "2017-01-16T10:14:30+0000",
            "content": "Final patch with Adrien's tweaks, will commit shortly (pending precommit) ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15823730",
            "date": "2017-01-16T10:24:25+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15823828",
            "date": "2017-01-16T11:55:03+0000",
            "content": "Commit 85ae5de7032ca4511d598a68961864bcfc75caa2 in lucene-solr's branch refs/heads/branch_6x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85ae5de ]\n\nLUCENE-7623: Add FunctionMatchQuery and FunctionScoreQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15823829",
            "date": "2017-01-16T11:55:05+0000",
            "content": "Commit fc2e0fd13324699fe1ddb15bb09960a8501f52f5 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fc2e0fd ]\n\nLUCENE-7623: Add FunctionMatchQuery and FunctionScoreQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15823988",
            "date": "2017-01-16T13:47:38+0000",
            "content": "Thanks for the reviews! ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16059551",
            "date": "2017-06-22T15:39:16+0000",
            "content": "I'm a little surprised to see these additions in the Lucene queries module because I thought there was an overarching intent to bring the functionality of ValueSource's into Lucene core.  \n\nRamification: Now in LUCENE-7737 I think I see a case where spatial-extras PointVectorStrategy is adding a bunch more code that could be avoided if FunctionMatchQuery were in core.  Note that the Solr legacy copy of PointVectorStrategy in LUCENE-7737 is able to simply use FunctionMatchQuery. ",
            "author": "David Smiley"
        }
    ]
}