{
    "id": "SOLR-11584",
    "title": "Ref Guide: support Bootstrap components like tabs and pills",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "documentation"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The theme I initially copied as the basis for the new Ref Guide included a Bootstrap integration, which has the potential to provide us with a number of options, such as organizing some content on a page into tabs (to present the same information in multiple ways - such as Windows vs Unix commands, or hand-editing schema.xml/managed-schema vs Schema API examples). \n\nHowever, the way AsciiDoctor content is inserted into a Jekyll template made it difficult to know how to use some of Bootstrap's features. Particularly since we have to make sure whatever we put into the content comes out right in the PDF.\n\nI had a bit of a breakthrough on this, and feel confident we can make straightforward instructions for anyone who might want to add this feature to their content. A patch will follow shortly with more details but the summary is:\n\n\n\tAdd an AsciiDoctor passthrough block that includes the Bootstrap HTML code to create the tabs.\n\t\n\t\tThis has an ifdef::backend-html5[] rule on it, so it will only be used if the output format is HTML. The PDF will ignore this section entirely.\n\t\n\t\n\tUse AsciiDoctor's \"role\" support to name the proper class names, which AsciiDoctor will convert into the right <div> elements in the HTML.\n\t\n\t\tThese will take multiple class names and a section ID, which is perfect for our needs.\n\t\tOne caveat is the divs need to be properly nested, and must be defined on blocks so all the content is inserted into the tab boxes appropriately. This gets a little complicated because you can't nest blocks of the same type (yet), but I found two block types we aren't using otherwise.\n\t\tThe PDF similarly ignores these classes and IDs because it doesn't know what to do with custom classes (but in the future these may be supported and we could define these in a special way if we want).\n\t\n\t\n\tModify some of the CSS to display the way we want since AsciiDoctor inserts some of its own classes between the defined classes and the inheritance needs to be set up right. Also the default styling for the blocks needs to be changed so it doesn't look strange.\n\n\n\nI'll include a patch with a sample file that has this working, plus detailed instructions in the metadocs. In the meantime, I've attached a screenshot that shows a small snippet from my testing. \n\nWhile the focus here is using tabs & pills, we will be able to use the same principles to support collapsing sections if that's preferred for presentation.",
    "attachments": {
        "SOLR-11584.patch": "https://issues.apache.org/jira/secure/attachment/12895264/SOLR-11584.patch",
        "SOLR-11584_customjs.patch": "https://issues.apache.org/jira/secure/attachment/12896225/SOLR-11584_customjs.patch",
        "refguide-tabs.png": "https://issues.apache.org/jira/secure/attachment/12895045/refguide-tabs.png",
        "tabbed_api_output_example.png": "https://issues.apache.org/jira/secure/attachment/12895323/tabbed_api_output_example.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-01T19:50:57+0000",
            "content": "The attached patch demonstrates how to do two types of content layout options: a) tabbed sections and b) content that's hidden behind a button. There are several things in this patch:\n\n\n\tAn updated stream-decorator-reference.adoc file that uses tabs for every \"Parameters\" and \"Syntax\" section. There are 25 decorators on that page, so this shows what it might look like if a full page used this.\n\t\n\t\tThis page also includes one example (in the section on the daemon stream decorator) of hiding content behind a button users need to click on to see the example - that specific example may not be the best use of that functionality, but I wanted to show another Bootstrap component that we could use relatively easily.\n\t\t(As a side note, I started this to try to find a new way to organize & display all the streaming expressions in an easier-to-consume way. I suspect this isn't it, but since I started there, I finished there to demonstrate all its complexity on a large page).\n\t\n\t\n\tUpdates to several CSS files to style tabs and buttons according to our style guidelines.\n\tAddition of documentation in meta-docs/jekyll.adoc to explain how to insert these types of sections in any page.\n\tAlso, since I was playing with stuff, I added in a way to make a column-based TOC at the top of pages, as another option besides a long single list at the top or on the right side (use :page-tocclass: column to use it). This could be committed completely separately.\n\n\n\nIf you take a look at the docs I wrote on how to implement this, it requires a bit of knowledge of how Jekyll consumes Asciidoctor-converted content, how Asciidoctor deals with what it calls roles (which become CSS classes in the HTML), and how to nest different content block types into one another. \n\nIOW, it's fiddly, as they say - if someone doesn't get all the parts exactly right, we could end up with a mess. Since most people don't run the HTML conversion locally before committing, they may not know if they got it wrong until after it's published. I chatted with Hoss Man offline about it, and he promised to take a look to see if there is a way to do this via a macro, or some other way that's less easy to mess up. ",
            "author": "Cassandra Targett",
            "id": "comment-16234635"
        },
        {
            "date": "2017-11-02T01:07:19+0000",
            "content": "Hey this is pretty cool.\n\nI think the tabbed stuff especially has a lot of potential to fit a lot more content into the ref-guide without making it more onerous to navigate/scroll through.  For example, Solr's API documentation could include output snippets for both XML and JSON in separate tabs. (screenshot example attached)\n\n(I poked around a bit to see if anything like this existed when working on SOLR-11530...excited to see it pop up as a possibility in the near future!) ",
            "author": "Jason Gerlowski",
            "id": "comment-16235040"
        },
        {
            "date": "2017-11-02T01:19:57+0000",
            "content": "As far as feedback, I'd second any effort to make it easier to for developers to use (macro, etc.) would be awesome.\n\nI also noticed that when the content on the tabs are very different sizes, switching between tabs can be a little jarring, as the reset of the page shifts up/down to accommodate the size of the newly-chosen tab.  Not sure what an improved experience would look like.  You could lock the size and have tabs with more content use a scroll-bar, but that would probably be equally jarring for some content.  I don't have a strong opinion either way.  Just wanted to mention it in case it strikes a chord with someone with more UI or CSS experience than myself. ",
            "author": "Jason Gerlowski",
            "id": "comment-16235050"
        },
        {
            "date": "2017-11-02T14:53:12+0000",
            "content": "For example, Solr's API documentation could include output snippets for both XML and JSON in separate tabs.\n\nYep, that's another great use for it.\n\nI also noticed that when the content on the tabs are very different sizes, switching between tabs can be a little jarring, as the reset of the page shifts up/down to accommodate the size of the newly-chosen tab.\n\nThat's one reason why I think the way I chose to demonstrate this is not the best solution for that content. I think the CSS solution is to make the tabbed content area a fixed height, but how do we know what the right height is? As you say, scrolling might not be better (but maybe?).\n\nA panel that expands on the user click might be a better way for that particular content - then the user would expect the page to shift up or down - but that requires even more nested div elements, and I have to think a little bit more on how to do that with Asciidoctor's current limitations (it can't nest content blocks of the same type). The tabbed case is probably better when the content is similarly sized - like when it's the same output in different forms. ",
            "author": "Cassandra Targett",
            "id": "comment-16235851"
        },
        {
            "date": "2017-11-06T18:19:12+0000",
            "content": "\n... Since most people don't run the HTML conversion locally before committing, they may not know if they got it wrong until after it's published. ...\n\nAs of SOLR-10934, we now have a tool box to help us reduce the risk of these types of \"structural\" mistakes, because \"build-pdf\" now also builds a barebones HTML5 version (w/o jekyll) that we can run anchor+link checking against.  We could also use it to run other forms of structural validation in the future (see more comments on this below) and ultimately hook it in to precommit if we don't trust people to run \"ant build-pdf\" after changing the ref-guide pages.\n\nIOW, it's fiddly, as they say - if someone doesn't get all the parts exactly right, we could end up with a mess.  ...  I chatted with Hoss Man offline about it, and he promised to take a look to see if there is a way to do this via a macro, or some other way that's less easy to mess up.\n\nThere's definitely some options for making these less error-prone.\n\nWhen cassandra first showed me what she had in mind, and her POC, my initial impression was that an asciidoctor macro of some kind would be the way to go \u2013 but the more i looked at the diff asciidoctor \"block types\" that already exist, and the way asciidoctor's html5 output will directly map user defined \"roles\" to CSS classes, i started realizing that the problem isn't really asciidoctor \u2013 it's bootstrap's lack of \"bootstrapping\" tabs/pills/buttons based on content.\n\nSo instead what i did was write some javascript to \"bootstrap bootstrap\" \u2013 automatically generating the pills we want based on the tab-panes and a new \"tab-label\" we define.  If/when we decide we want to take advantage of other dynamic bootstrap page features, similar custom javascript will be easy.\n\nIn a nutshell, instead of something like this...\n\n\nifdef::backend-html5[]\n++++\n<ul id=\"fooTabs\" class=\"nav nav-pills\">\n    <li class=\"active\"><a href=\"#fooXXX\" data-toggle=\"pill\">XXX Label</a></li>\n    <li><a href=\"#fooYYY\" data-toggle=\"pill\">YYY Label</a></li>\n</ul>\n++++\nendif::[]\n\n[.tab-content]\n--\n\n[example.tab-pane.active#fooXXX]\n====\n*XXX Label*\n\nblah blah blah blah blah blah blah blah ...\n====\n\n[example.tab-pane#fooYYY]\n====\n*YYY Label*\n\n[source,text]\n----\nblah blah blah blah blah blah blah blah ...\n----\n====\n\n--\n\n\n\n\nAll we have to do is write this...\n\n\n[.dynamic-tabs]\n--\n\n[example.tab-pane#fooXXX]\n====\n[.tab-label]*XXX Label*\n\nblah blah blah blah blah blah blah blah ...\n====\n\n[example.tab-pane#fooYYY]\n====\n[.tab-label]*YYY Label*\n\n[source,text]\n----\nblah blah blah blah blah blah blah blah ...\n----\n====\n\n--\n\n\n\n...and custom javascript takes care of building up the \"pill\" links and giving everything the CSS classes and data-* attributes that bootstrap expects.  Since this all runs in javascript, it means that if javascript is disabled, the html never includes the useless pill links.\n\n\nA few things to note about this javascript that are all easily tweakable based on the conventions we want:\n\n\n\tI used dynamic-tabs as the special CSS class the custom javascript looks for, and when it finds it it adds the tab-content class that bootstrap requires \u2013 2 reasons for this:\n\t\n\t\tthis way there's less risk that our custom javascript accidently breaks tab-content that exists in our jekyll header/footer\n\t\tthis means we could (if we want) style this stuff differently depending on wether javascript is disabled\n\t\n\t\n\tthe code currently assumes we always want the force the first tab-pane to be the active tab pane/pill\n\t\n\t\ti feel like as a matter of convention this is just a blanket good idea\n\t\tthis code could be tweaked so it checks if any tab pane has a user specified active class, then it automatically sets the corrisponding pill as active (to meet bootstraps preconditions)\n\t\t\n\t\t\tbut if we want to do this we have to decide what the rules should be if a user copy/pasts a tab-pane and there are 2 active ones (pick the first? pick the last?)\n\t\t\tthe custom html validation code we have could always fail if it detects this ... just a matter of writting that validation code\n\t\t\n\t\t\n\t\n\t\n\tthe custom javascript assumes that every tab-pane have a custom id defined\n\t\n\t\tno real way to avoid that in order for the pills to work \u2013 but we could make the HTML hide any tab that's missing it to draw attention to it\n\t\tagain: our custom html anchor+link checking code could start failing the build if a tab-pane exists w/o an id\n\t\n\t\n\tthe tab-label class is how the custom java code decides what text to put in the auto-generated pill\n\t\n\t\tcurrently the code removes the tab label from the tab-pane itself \u2013 so the text doesn't appear redundently when a tab is visible \u2013 but there's no reason we can't leave it in if people think it looks better\n\t\tthe code also currently uses the inner html of the label \u2013 so in the case if *Some _stuff_* the pill text won't be bold, but the word \"stuff\" will be italics\n\t\t\n\t\t\ti did this on the assmption that as a convention we'd want to use the bold tag for most of these \"labels\" in the PDF, but don't want all the pills to be bold\n\t\t\twe could use any asciidoctor markup that supports a role annotation for these labels, and copy the markup into the pill if we want \u2013 we just need to decide the convention\n\t\t\tagain: whatever convention we want, rules could be enforced by our custom validation code (ie: \"the tab-label role can only be assigned to bold tags which are the first element of a tab-pane\"\n\t\t\n\t\t\n\t\tthe custom javascript is currently forgiving about tab panes that don't have a tab-label in them anywhere and auto generates a label based on the \"number\" of the tab\n\t\t\n\t\t\tthere's a nocommit example of this in the attached patch (generating a pill with the text \"# 2\") just so folks can see what it looks like\n\t\t\tnot sure it's a good idea, but wanted to point out that it's possible\n\t\t\tagain: custom html validation could enforce every tab-pane has a tab-label if we want that.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\nNOTE: the attached patch \"overlaps\" cassandra's previous patch but is not a super set \u2013 notably it includes all of her CSS changes & equivilent content changes to stream-decorator-reference.adoc (although in my conversion i may have messed up some \u2013 there was some weirdness with a blurb of text inbtween the tab-panes for 'daemon' / contunious push streaming that i think was in the original patch?)  but it does not include changes to the meta-docs or any other source files (partly because a lot the meta-doc chaanges from cassandras patch don't really apply with this new approach, and partly because i had issues applying her patch because of the image file?)\n ",
            "author": "Hoss Man",
            "id": "comment-16240648"
        },
        {
            "date": "2017-11-06T18:21:51+0000",
            "content": "I forgot to mention...\n\n\nI also noticed that when the content on the tabs are very different sizes, switching between tabs can be a little jarring, as the reset of the page shifts up/down to accommodate the size of the newly-chosen tab.\n\nA panel that expands on the user click might be a better way for that particular content - then the user would expect the page to shift up or down - but that requires even more nested div elements, and I have to think a little bit more on how to do that with Asciidoctor's current limitations ...\n\n...i briefly looked into some of bootstraps \"transition\" options and i suspsect there should be a way to combine the \"expand/collapse\" transition that gradually resizes a div with the pill+tab show/hide logic \u2013 i just haven't figured out what hte magic combination of css+javascript is.\n\nIf we need new/extra/special divs/markup to make this work, we can almost certainly make the custom javascript add this markup (just like it currently generates the pills) ",
            "author": "Hoss Man",
            "id": "comment-16240652"
        },
        {
            "date": "2017-11-08T17:13:15+0000",
            "content": "I like this work so far - it makes it much more foolproof. The whole point was to make docs easier instead of making writers/editors worry about display issues and problems; this is a simpler convention that doesn't go too far away from that goal.\n\nIn response to a couple of your questions/comments:\n\nthe code currently assumes we always want the force the first tab-pane to be the active tab pane/pill\n\nI agree we should do this. It makes it simpler, and I think it would be an expected default for readers.\n\ncurrently the code removes the tab label from the tab-pane itself \u2013 so the text doesn't appear redundently when a tab is visible \u2013 but there's no reason we can't leave it in if people think it looks better\n\nI think a minor adjustment to the padding of the tabbed content box would make it look fine without the tab label (I experimented with this, but am not attaching a patch with it yet).\n\nthe custom javascript is currently forgiving about tab panes that don't have a tab-label in them anywhere and auto generates a label based on the \"number\" of the tab\n\nI think we should try to enforce that every tab-pane has a tab-label. We want to make sure this looks right in the PDF, and I think making sure the sections are labeled will help differentiate them.\n\nFrom your earlier comment, I think these were all the things that you said could be enforced with build-time validation:\n\n\n\tNo tab has a active class, that will be done by default by the JS\n\tEvery tab-pane has a unique ID\n\ttab-label's are defined for each tab\n\n\n\nOf those, the last 2 I think are most important. The JS could instead just ignore an active class? Although since active is a real thing with real rules in CSS not sure what else would break, so maybe better to just fail the validation. ",
            "author": "Cassandra Targett",
            "id": "comment-16244334"
        },
        {
            "date": "2017-11-08T17:20:57+0000",
            "content": "yep yep ... this is all easy to do \u2013 i'll try to get another quick patch with the html validation rules in place later today.\n\none question...\n\nI think we should try to enforce that every tab-pane has a tab-label. We want to make sure this looks right in the PDF, and I think making sure the sections are labeled will help differentiate them.\n\nDo we want to enforce that all tab-labels are use consistent markup?  ie: \"every tab-pane must contain an element with the tab-label class\" is given, but do we also want to enforce \"every element annotated w/the tab-label class must be a 'BOLD' element\" ?\n\nI'm assuming for consistency we want them all the same? (and you used bold in your example so i'm latching onto that precedent) ",
            "author": "Hoss Man",
            "id": "comment-16244349"
        },
        {
            "date": "2017-11-08T17:37:18+0000",
            "content": "Do we want to enforce that all tab-labels are use consistent markup? ... do we also want to enforce \"every element annotated w/the tab-label class must be a 'BOLD' element\" \n\nYeah, I think we should, and we can use bold. In the PDF those come out nicely, so I think it's a good convention. ",
            "author": "Cassandra Targett",
            "id": "comment-16244390"
        },
        {
            "date": "2017-11-09T01:26:43+0000",
            "content": "ok \u2013 here's a patch that:\n\n\n\tbeefs up the java validator code to check for everything we talked about and more (see below)\n\ttweaks the javascript so that when tab-panes are missing their id or label, the javascript draws your attention to it if/when you look at the generated pills\n\t\n\t\tthe validator will have already failed, but if you look at the HTML in a browser wondering what the deal is the dynamic DOM will draw your attention to it with pill text like \"BAD TAB-PANE HAS NO ID\" or \"BAD TAB-PANE HAS NO TAB-LABEL\"\n\t\n\t\n\n\n\nHere's an example of the types of failures that the validation code complains about with the \"nocommits\" i've sprinkled into stream-decorator-reference.adoc...\n\n\nbuild-site:\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains a 'dynamic-tabs' with 0 'tab-pane' decendents -- must be at least 2\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains a 'dynamic-tabs' with content outside of a 'tab-pane': nocommit: a 'dyna...\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains a 'dynamic-tabs' with content outside of a 'tab-pane': nocommit: some te...\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains a 'tab-pane' that does not have a (unique) '#id'\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane' with 0 'tab-label' decendents -- must be exactly 1\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#nocommit_id' with 0 'tab-label' decendents -- must be exactly 1\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#nocommit_id' with a 'tab-label' using <em> -- each 'tab-label' must be <strong> (example: '[.tab-label]*Text*')\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#nocommit_blank_label' with 0 'tab-label' decendents -- must be exactly 1\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#nocommit_id2' that is not a decendent of a 'dynamic-tabs'\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#cartesianParams' with 'active' defined -- this must be removed\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#cartesianSyntax' with 0 'tab-label' decendents -- must be exactly 1\n     [java] file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html contains 'tab-pane#daemoncommands' with text before the 'tab-label' ('Commands')\n     [java] ID occurs multiple times: nocommit_id\n     [java]  ... file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html\n     [java]  ... file:/home/hossman/lucene/dev/solr/build/solr-ref-guide/html-site/stream-decorator-reference.html\n     [java] Processed 2048 links (1416 relative) to 2615 anchors in 220 files\n     [java] Total of 13 problems found\n\nBUILD FAILED\n/home/hossman/lucene/dev/solr/solr-ref-guide/build.xml:263: Java returned: 255\n\n\n\n...note in particular the contains a 'dynamic-tabs' with content outside of a 'tab-pane' check.  This is a mistake i think cassandra's original patch had somewhere in the \"daemon\" section which i mentioned being confused by before (and think i fixed in a way that's sensical?).  I introduced this type of error deliberately in the \"classify\" tabs with a \"nocommit\" sentence so you can see how weird it looks to have content like this as you toggle back and forth between the tabs ",
            "author": "Hoss Man",
            "id": "comment-16245068"
        },
        {
            "date": "2017-11-13T18:13:59+0000",
            "content": "This is a mistake i think cassandra's original patch had somewhere in the \"daemon\" section which i mentioned being confused by before\n\nNo, it wasn't a mistake. As I said:\n\nThis page also includes one example (in the section on the daemon stream decorator) of hiding content behind a button users need to click on to see the example....\n\nIt's a Button instead of a Nav: https://getbootstrap.com/docs/4.0/components/collapse/ instead of https://getbootstrap.com/docs/4.0/components/navs/#pills\n\n(We're not on Bootstrap 4 yet, but it works the same between 3.3.x and 4.0)\n\nAs I said then and will say again - it wasn't a good use of a button in that context, and in thinking about it, I can't currently think of where we would use it so I don't think we need to try to support it right now. It just wasn't a mistake. ",
            "author": "Cassandra Targett",
            "id": "comment-16249919"
        },
        {
            "date": "2017-11-13T19:08:11+0000",
            "content": "It's a Button instead of a Nav: ...\n\nI'm sorry, i explained myself really poorly \u2013 I had already ruled out the \"Collapse\" button from my thinking and didn't even realize it was also in the same \"daemon\" section i was drawing attention to.\n\nThe pill/tab oddness i was refering to in your original patch was this sentence:\n\nPush streaming can also be used for continuous background aggregation scenarios where aggregates are rolled up in the background at intervals and pushed to other Solr collections. Another use case is continuous background machine learning model optimization, where the optimized model is pushed to another Solr collection where it can be integrated into queries.\n\n...which existed inside a .tab-content block, but is not part of any individual .tab-pane blocks \u2013 it was a free floating paragraph in betwen the #daemonSyntax tab-pane and the #daemoncommands tab-pane.  because of how Bootstrap shows/hides tab-panes, the result was that as you click back and forth on the respective pills, that text stayed on the screen the whole time, but jumped up/down on the screen from being \"above\" or \"below\" the (currently visible) tab-pane (below when \"Syntax\" was showing, above when \"Commands\" was showing)\n\nThis type of \"bouncing\" paragraph content is what I was thinking was probably unintentional when you added the tabs, and probably a bad idea for readability moving forward: All content should either come before the set of tabs, or be inside a single tab, or come after the set of tabs \u2013 not move around as the visible tab changes.  That's what i added a bit of validation for.\n\n(In my patch, i moved that legit sentence up above the .dynamic-tabs block in the \"daemon\" section \u2013 so it's part of the introduction before the syntax/command tabs \u2013 and added a more blatantly obvious nocommit: some text that exists inside of a '.dynamic-tabs' but is not inside of any '.tab-pane' paragraph to demonstrate the validation i added that had been inspired by that para.  If you apply my patch and search for that nocommit example you'll see what i mean as you toggle tabs, or you apply your original patch and search for the above mentioned sentence you can see the same jumping oddness)\n ",
            "author": "Hoss Man",
            "id": "comment-16250016"
        },
        {
            "date": "2017-11-13T19:25:55+0000",
            "content": "The new validator changes seem fine to me - is there more you want to do with this Hoss Man? Or could I go ahead with this to write new meta-docs, etc.? ",
            "author": "Cassandra Targett",
            "id": "comment-16250040"
        },
        {
            "date": "2017-11-13T19:36:49+0000",
            "content": "is there more you want to do with this Hoss Man?\n\nNo, i'm happy with it. \n\nIIUC i think the main things we still need are...\n\n\n\tremove all the nocommit's i put in the content to demo the validation features\n\t\n\t\ti can post an updated patch with this this later today/tomorow if you don't beat me to it\n\t\n\t\n\tdecide what we want to do with the content currently hidden by that \"collapse\" button if we don't think that makes sense (i agree with you)\n\trevise the meta-docs you already wrote with the tweaked instructions regarding the simplifications to the markup\n\tupdated image/diagram in the meta-docs\n\t\n\t\ti was never able to get this to work out of your orignal patch, so i think you'll ultimatley need to commit for this bit\n\t\n\t\n\n\n\nDid i miss anything? ",
            "author": "Hoss Man",
            "id": "comment-16250057"
        },
        {
            "date": "2017-11-13T21:34:19+0000",
            "content": "I've attached an updated patch that cleans up the nocommits (#1) & just removes the collapse button (#2) so that the long java code example is always visible.  (i didn't see any opportunity to use a \"tab\" for this content since there isn't really a longer \u2013 but perhaps some other bootstrap features may make sense down the road?) ",
            "author": "Hoss Man",
            "id": "comment-16250281"
        },
        {
            "date": "2017-11-14T22:47:50+0000",
            "content": "Commit df70e27d7dc8434825ddf4742b267fb5078bb326 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=df70e27 ]\n\nSOLR-11584: add JS and CSS to support tabbed content; add \"column\" style TOC support ",
            "author": "ASF subversion and git services",
            "id": "comment-16252622"
        },
        {
            "date": "2017-11-14T22:48:18+0000",
            "content": "Commit 8e19a1ac9994713b6f22739de3cf8c00f54f8967 in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8e19a1a ]\n\nSOLR-11584: add JS and CSS to support tabbed content; add \"column\" style TOC support ",
            "author": "ASF subversion and git services",
            "id": "comment-16252623"
        },
        {
            "date": "2017-11-15T03:35:28+0000",
            "content": "Commit bc69bdc6043cd7a620f9d68b6cb7e810cb84e237 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc69bdc ]\n\nSOLR-11584: remove zero-width space (U+200B) that causes compilation to fail on some platforms ",
            "author": "ASF subversion and git services",
            "id": "comment-16252890"
        },
        {
            "date": "2017-11-15T03:35:30+0000",
            "content": "Commit aef58a26a2dd2f1c997483307816d6fedb891825 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aef58a2 ]\n\nSOLR-11584: remove zero-width space (U+200B) that causes compilation to fail on some platforms ",
            "author": "ASF subversion and git services",
            "id": "comment-16252891"
        },
        {
            "date": "2017-11-21T15:16:12+0000",
            "content": "Commit 4ca6e77a02dca1de267c9ebad77ac44a6a97c25d in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4ca6e77 ]\n\nSOLR-11584: CSS changes for HTML tabs: change padding in tab panes; add space between tabs ",
            "author": "ASF subversion and git services",
            "id": "comment-16260887"
        },
        {
            "date": "2017-11-21T15:16:47+0000",
            "content": "Commit edf38e1a328ea03b9dbe783b8a0d5272ffa81ef4 in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edf38e1 ]\n\nSOLR-11584: CSS changes for HTML tabs: change padding in tab panes; add space between tabs ",
            "author": "ASF subversion and git services",
            "id": "comment-16260888"
        }
    ]
}