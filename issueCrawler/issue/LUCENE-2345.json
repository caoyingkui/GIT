{
    "id": "LUCENE-2345",
    "title": "Make it possible to subclass SegmentReader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Wish",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I would like the ability to subclass SegmentReader for numerous reasons:\n\n\tto capture initialization/close events\n\tattach custom objects to an instance of a segment reader (caches, statistics, so on and so forth)\n\toverride methods on segment reader as needed\n\n\n\ncurrently this isn't really possible\n\nI propose adding a SegmentReaderFactory that would allow creating custom subclasses of SegmentReader\n\ndefault implementation would be something like:\n\npublic class SegmentReaderFactory {\n  public SegmentReader get(boolean readOnly) {\n    return readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n  }\n\n  public SegmentReader reopen(SegmentReader reader, boolean readOnly) {\n    return newSegmentReader(readOnly);\n  }\n}\n\n\n\nIt would then be made possible to pass a SegmentReaderFactory to IndexWriter (for pooled readers) as well as to SegmentReader.get() (DirectoryReader.open, etc)\n\nI could prepare a patch if others think this has merit\n\nObviously, this API would be \"experimental/advanced/will change in future\"",
    "attachments": {
        "LUCENE-2345_3.0.patch": "https://issues.apache.org/jira/secure/attachment/12439777/LUCENE-2345_3.0.patch",
        "LUCENE-2345_3.0.plugins.patch": "https://issues.apache.org/jira/secure/attachment/12439879/LUCENE-2345_3.0.plugins.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-24T21:26:23+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-12849450"
        },
        {
            "date": "2010-03-24T21:28:51+0000",
            "content": "that's the reassurance i needed \n\nwill start working on a patch tomorrow \nwill take a few days as i'll start with a 3.0 patch (which i use), then will create a 3.1 patch once i've got that all flushed out ",
            "author": "Tim Smith",
            "id": "comment-12849455"
        },
        {
            "date": "2010-03-24T21:56:37+0000",
            "content": "Ahem, that directly clashes with my inflight patch?\n\nI'm going to land create/reopen/close refactoring pretty soon, and then finish plugins.\n(Which was an arduous task before, as initialization paths for SegmentReaders are really, really insane)\n\nI'm on this patch for quite some time, I understand that, so maybe we can settle on a deadline? Don't like to see the effort vaporate, also merging is gonna be hell with flex branch alone, don't want to double it  ",
            "author": "Earwin Burrfoot",
            "id": "comment-12849475"
        },
        {
            "date": "2010-03-24T22:20:31+0000",
            "content": "i'll do my initial work on 3.0 so i can absorb the changes now and will post that patch\n\nat which point, i can wait for you to finish whatever you need, or we can just incorporate the same ability into your patch for the other ticket\ni would just like to see the ability to subclass SegmentReader's on 3.1 so i don't have to port a patch when i absorb 3.1 (just use the \"finalized\" apis)\n ",
            "author": "Tim Smith",
            "id": "comment-12849497"
        },
        {
            "date": "2010-03-25T14:01:01+0000",
            "content": "Here's a patch against 3.0 that provides the SegmentReaderFactory ability\n(not tested yet, but i'll be doing that shortly as i integrate this functionality)\n\nIt adds a SegmentReaderFactory.\n\nThe IndexWriter now has a getter and setter for setting this\n\nSegmentReader has a new protected method init() which is called after the segment reader has been initialized (to allow subclasses to hook this action and do additional initialization, etc\n\nadded 2 new IndexReader.open() calls that allow specifying the SegmentReaderFactory\n ",
            "author": "Tim Smith",
            "id": "comment-12849703"
        },
        {
            "date": "2010-03-25T15:42:40+0000",
            "content": "The IndexWriter now has a getter and setter for setting this\n\nIf this is not expected to change during the lifetime of IW, I think it should be added to IWC when you upgrade the patch to 3.1. ",
            "author": "Shai Erera",
            "id": "comment-12849728"
        },
        {
            "date": "2010-03-25T15:44:09+0000",
            "content": "that was my plan ",
            "author": "Tim Smith",
            "id": "comment-12849731"
        },
        {
            "date": "2010-03-26T10:03:23+0000",
            "content": "I think we should only commit this only on 3.1 (new feature)?\n\nEarwin: will this change really conflict w/ your ongoing refactoring (to have DirReader subclass MultiReader)?  It seems somewhat orthogonal? ",
            "author": "Michael McCandless",
            "id": "comment-12850062"
        },
        {
            "date": "2010-03-26T10:29:00+0000",
            "content": "will this change really conflict w/ your ongoing refactoring (to have DirReader subclass MultiReader)? It seems somewhat orthogonal?\nOngoing contains a massive rework of how open/reopen/clone/close is done. Folding copypaste between DirReader and MultiReader is a byproduct.\nThe aim is to have clean initialization, get rid of of init/reinit/moreinit methods, moving the code to constructors.\nThis alone plays bad with factories.\n\nThe next step, plugins - conflicts ideologically. Plugins allow extension by composition, which is (in my view) much more clean than subclassing.\nLanding them without refactoring all this mess beforehand is dangerous, I already hit some places where reopen/clone were done wrong in respect to existing reader fields. Even more - NRT reader lifecycle is really messy - it beginnings as a reader aimed only for merging, and then being upgraded in two separate stages is finally wrapped in DirReader to be used for actual searching. The factory/init() approach ignores this, and each user of this API will be on his own to separate lightweight readers from full-fledged ones. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12850067"
        },
        {
            "date": "2010-03-26T10:47:52+0000",
            "content": "Earwin, w/o knowing too much about the details of your work, I wanted to comment on \"get rid of of init/reinit/moreinit methods, moving the code to constructors\". I work now on Parallel Index and one of the things I do is extend IW. Currently, IW's ctor code performs the initialization, however I'm thinking to move that code to an init method. The reason is to allow easy extensions of IW, such as LUCENE-2330. There I'm going to add a default ctor to IW, accompanied by an init method the extending class can call if needed. So what I'm trying to say is that init methods are not always bad, and sometimes ctors limit you. Perhaps it would make sense though in what you're trying to do ... ",
            "author": "Shai Erera",
            "id": "comment-12850075"
        },
        {
            "date": "2010-03-26T10:55:30+0000",
            "content": "Non-final/private method calls from ctors is discouraged, as it creates problems:\n\n\n\tIf you override such a init method, you can change the behaviour of the super class' ctor\n\tDuring the time the init() method is called, the fields are not yet initialized in the subclass and also the subclass' ctor was not yet called! This leads to unexspected behaviour (like final fields changing its contents during the lifetime of the class: during the overridden init() method they are null and suddenly change to non-null after the subclass' ctor was executed, which is after the init() method)\n\n\n\nBecause of this, such init() methods should be private or at least final and never public! ",
            "author": "Uwe Schindler",
            "id": "comment-12850079"
        },
        {
            "date": "2010-03-26T11:02:43+0000",
            "content": "Here a good explanation: http://www.informit.com/articles/article.aspx?p=20521 ",
            "author": "Uwe Schindler",
            "id": "comment-12850081"
        },
        {
            "date": "2010-03-26T11:08:46+0000",
            "content": "OK, I guess for now let's hold off on this issue while we iterate at least with Earwin's first refactoring effort...?\n\nEarwin, can you post a patch w/ your current state, even if it's \"rough\"?  There seems to be alot of interest/opinions on how to \"fix\" things here   Both IndexWriter & SegmentReader are \"needing\" extensibility... but this is a big change so I'm hoping we can first just get your refactoring done before adding extensibility.\n\nTim, do you think the plugin model (\"extension by composition\") would be workable for your use case?  Ie, instead of a factory enabling subclasses of SegmentReader? ",
            "author": "Michael McCandless",
            "id": "comment-12850082"
        },
        {
            "date": "2010-03-26T11:10:26+0000",
            "content": "Thanks Uwe, I know that ctor is the preferred way, and in the process of introducing IWC I delete IW.init which all ctors called and pulled all the code to IW ctor. I will make that init() on IW final. But sometimes putting code in init() is not bad (and it's used in Lucene elsewhere too (e.g. PQ and up until recently IW). ",
            "author": "Shai Erera",
            "id": "comment-12850083"
        },
        {
            "date": "2010-03-26T11:12:57+0000",
            "content": "More often than not init() methods are a sign of bad design.\nI.e. in your case extending IW is crazy.\nYou should have an interface capturing IW methods and two implementations - one writing to the index and another delegating to its subwriters. You don't do DirectoryReader extends SegmentReader, do you? They both extend lucene-style-interface IndexReader.\n\nLucene's back compat policy got people used to writing and digesting freaky code, and I'm not going to fight generally against it, that's a lost cause : )\nBut in this exact case (readers) stuffing everything in constructors, defining all fields I can final, replacing SR.openDocStores/loadTermsIndex with reopen()-like method allows me to tackle (at least somewhat) lifecycle complexity. Javac will force me to either initialize something or explicitly leave it null.\nBesides some real bugs in this code, I cleaned up cases where a field was inited twice, just in case! Poor developers got lost in init() methods : } ",
            "author": "Earwin Burrfoot",
            "id": "comment-12850084"
        },
        {
            "date": "2010-03-26T11:16:31+0000",
            "content": "Earwin, can you post a patch w/ your current state, even if it's \"rough\"?\nAhem. Right now it's more or less finished for Multi/Directory/MutableDirectory/WriterBackedDirectory-readers.\nBut the SegmentReader is in shambles (i.e. does not compile yet).\nShould I post asis? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12850088"
        },
        {
            "date": "2010-03-26T11:29:20+0000",
            "content": "Earwin, I wholeheartedly agree with what you wrote. If we could refactor IW and extract it to a set of interfaces, then I agree (and Michael B. has an issue open for that). I think though that IW's API is already that interface (give or take few methods). So perhaps this can be an easy refactoring - introduce an Indexer (a la Searcher) class (or interface) w/ all of IW public methods, and then let PW extend/impl that class/interface as well as IW. We can also consider making IW itself final this way (though bw police will prevent it ).\n\nThen when PW sets up the slices, it can create them as IW or any other IW-like implementation it needs them to impl. If it sounds good enough to become its own issue, I can open one and we can continue discussing it there (and leave that issue focused on extending SR). Then I'll hold off w/ LUCENE-2330, or simply rename it to reflect that Indexer API. ",
            "author": "Shai Erera",
            "id": "comment-12850094"
        },
        {
            "date": "2010-03-26T13:12:25+0000",
            "content": "I think we should only commit this only on 3.1 (new feature)? \n\n3.1 only of course (just posted a 3.0 patch now as that's what i'm using and i need the functionality now)\n\nTim, do you think the plugin model (\"extension by composition\") would be workable for your use case? Ie, instead of a factory enabling subclasses of SegmentReader?\n\nAs long as the plugin model allows the same capabilities, that could work just fine and could be the final solution for this ticket.\n\nI mainly need the ability to add data structures to a SegmentReader that will be shared for all SegmentReader's for a segment, and then add some extra meta information on a per instance basis\n\nIs there a ticket or wiki page that details the \"plugin\" architecture/design so i could take a look?\n\nHowever, would the plugins allow overriding specific IndexReader methods?\n\nI still would see the need to be able to override specific methods for a SegmentReader (in order to track statistics/provide changed/different/faster/more feature rich implementations)\nI don't have a direct need for this right now, however i could envision needing this in the future\n\nHere's a few requirements i would pose for the plugin model (maybe they are already though of):\n\n\tPlugins have hooks to \"reopen\" themselves (some plugins can be shared across all instances of a SegmentReader)\n\t\n\t\tThese reopen hooks would be called during SegmentReader.reopen()\n\t\n\t\n\tPlugins are initialized during \"SegmentReader.get/SegmentReader.reopen\"\n\t\n\t\tplugins should not have to be added after the fact, as this would not allow proper warming/initializing of plugins inside the NRT indexing\n\t\ti assume this would need be added as some list of PluginFactories added to the IndexWriter/IndexReader.open()?\n\t\n\t\n\tPlugins should have a \"close\" method that is called in SegmentReader.close()\n\t\n\t\tThis will allow proper release of any resources\n\t\n\t\n\tPlugins are passed an instance of the SegmentReader they are for\n\t\n\t\tPlugins should be able to access all methods on a SegmentReader\n\t\tThis would effectively allow overriding a SegmentReader by having a plugin provide the functionality instead (however only people explicitly calling the plugin would get this benefit)\n\t\n\t\n\n\n\n\n ",
            "author": "Tim Smith",
            "id": "comment-12850127"
        },
        {
            "date": "2010-03-26T13:58:33+0000",
            "content": "Here's a patch (again, against 3.0) showing the minimal API i would like to see from the plugin model ",
            "author": "Tim Smith",
            "id": "comment-12850140"
        },
        {
            "date": "2010-03-26T19:42:52+0000",
            "content": "found one issue with the plugins patch\n\nWith NRT indexing, if the SegmentReader is opened with no TermInfosReader (for merging), then the plugins will be initialized with a SegmentReader that has no ability to walk the TermsEnum.\n\nI guess SegmentPlugin initialization should wait until after the terms index is loaded or have another method for catching this event to the SegmentPlugin interface ",
            "author": "Tim Smith",
            "id": "comment-12850323"
        },
        {
            "date": "2010-03-26T21:01:35+0000",
            "content": "I mentioned this issue earlier. My patch removes loadTermsIndex method from SegmentReader and requires you to reopen it. At that moment you can stuff it with a set of plugins without leaving 'final' paradise.\n\nThere are still things to consider. Some SR guts could be converted to plugins themselves, so you can override them with your implementation if you wish. If that is so, there should be a way to decide which of the plugins should be loaded for current SR mode. My previous design loaded plugins only for full-fledged readers.\n\nIs there a ticket or wiki page that details the \"plugin\" architecture/design so i could take a look?\nThe design itself was never published, rather it was discussed several times on a mailing list, and simmered inside my head for some time. I have a first impl running at my workplace, but it is really fugly  I will flesh out a proper description after the refactoring, but it has all your points in one or another form. Biggest differences are - they are keyed by Class not by String, they declare multiple interfaces they provide, they declare dependencies, they don't have to implement/extend anything, as all the hooks are on the factory classes. Also, they extend not only SegmentReader, but the whole hierarchy - SR, MR, DR, whatever.\n\nThe problem of overriding SR methods is solved by delegating these methods to plugins, which can be either default or user-provided. (But remember the question of which subset should be initialized for which SR mode) ",
            "author": "Earwin Burrfoot",
            "id": "comment-12850348"
        },
        {
            "date": "2010-03-26T21:20:35+0000",
            "content": "> Is there a ticket or wiki page that details the \"plugin\" architecture/design\n> so i could take a look?\n\nFWIW, KinoSearch has a complete prototype implementation of this design, \nbased loosely on the mailing list conversations that Earwin referred to.\n\n\n\tSegReader and SegWriter are both composites with minimal APIs.\n\tAll subcomponents subclass either DataWriter or DataReader.\n\tThe Architecture class (under KinoSearch::Plan) determines which plugins\n    get loaded.\n\n\n\nhttp://www.rectangular.com/svn/kinosearch/trunk/core/ ",
            "author": "Marvin Humphrey",
            "id": "comment-12850356"
        },
        {
            "date": "2010-03-26T21:30:12+0000",
            "content": "My patch removes loadTermsIndex method from SegmentReader and requires you to reopen it. \n\nthat's definitely much cleaner and would solve the issue in my current patch (sadly i'm on 3.0 and want to keep my patch there at a minimum until i can port to all the goodness on 3.1).\n\nAlso, they extend not only SegmentReader, but the whole hierarchy - SR, MR, DR, whatever.\n\ni just wussed out and just did only the SegmentReader case as thats all i need right now\n\nas all the hooks are on the factory classes\n\ncould you post your factory class interface?\nIf i base my 3.0 patch off that i can reduce my 3.1 port overhead.\n\n\nare there any tickets tracking your reopen refactors or your plugin model?\nIf not, feel free to retool this ticket for your plugin model for Index Readers as that will solve my use cases (and then some) ",
            "author": "Tim Smith",
            "id": "comment-12850361"
        },
        {
            "date": "2010-03-28T19:42:59+0000",
            "content": "Just created LUCENE-2355 to track reopen stuff. No issue for plugin model yet, but I'll probably create it, can't edit this one, I'm no committer. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12850726"
        },
        {
            "date": "2013-07-23T18:44:42+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717033"
        },
        {
            "date": "2014-04-16T12:54:40+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970836"
        }
    ]
}