{
    "id": "SOLR-12502",
    "title": "Unify and reduce the number of SolrClient#add methods",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "On SOLR-11654 we noticed that SolrClient#add has 10 overloaded methods which can be very confusing to new users.\n\nAlso the UpdateRequest class is\u00a0public so that means if a user is looking for a custom combination they can always choose to do so by writing a couple of lines of code.\n\nFor 8.0 which might not be very far away we can improve this situation\n\n\u00a0\n\nQuoting David from SOLR-11654\nAny way I guess we'll leave SolrClient alone. \u00a0Thanks for your input Varun. \u00a0Yes it's a shame there are so many darned overloaded methods... I think it's a large part due to the optional \"collection\" parameter which like doubles the methods! \u00a0I've been bitten several times writing SolrJ code that doesn't use the right overloaded version (forgot to specify collection). \u00a0I think\u00a0for 8.0,\u00a0either\u00a0all SolrClient methods without \"collection\" can be removed in favor of insisting you use the overloaded variant accepting a collection,\u00a0or\u00a0SolrClient itself could be locked down to one collection at the time you create it\u00a0or\u00a0have a CollectionSolrClient interface retrieved from a SolrClient.withCollection(collection) in which all the operations that require a SolrClient are on that interface and not SolrClient proper. \u00a0Several ideas to consider.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-07-20T17:23:09+0000",
            "content": "The add methods are especially egregious, but it's worth pointing out that the problem is endemic to most of the bunches of SolrClient methods.  As of 7.4, we have:\n\n\n\t10 add methods (5 w/ collection, 5 w/o)\n\t4 addBean methods (2 w/ collection, 2 w/o)\n\t6 addBeans methods (3 w/ collection, 3 w/o)\n\t6 commit methods (3 w/ collection, 3 w/o)\n\t8 deleteById methods (4 w/ collection, 4 w/o)\n\t4 deleteByQuery methods (2 w/ collection, 2 w/o)\n\t8 getById methods (4 w/ collection, 4 w/o)\n\t6 {optimize}} methods (3 w/ collection, 3 w/o)\n\t4 query methods (2 w/ collection, 2 w/o)\n\n\n\nAny solution we decide on for 8.0 would ideally also be applied to those other method-groups as well.  That's more work unfortunately, but it'd keep the API coherent, which is probably best for our users.\n\nOf the options David suggested back on SOLR-11654, I don't have any strong opinions.  I like the idea of Option 2 (locking SolrClient to a collection at creation time)...it would clean up the interface, and we could remove some complexity internal to SolrClient impl's as well.  But I don't have a good feel for how common it is today for users to reuse a single client across collections.  Forcing users to go from 1 to numCollections clients could be expensive for CloudSolrClient too, with it connecting to ZK.  Maybe others with more experience could chime in on that?  If those are issues, option (1) or (3) is probably best. ",
            "author": "Jason Gerlowski",
            "id": "comment-16551015"
        },
        {
            "date": "2018-09-18T19:59:44+0000",
            "content": "I've been mulling this over a bit recently, and I wanted to throw a few other options out there and see what people think.\u00a0 Particularly, I think we can make a big improvement here without needing to change how the the current \"collection\" semantics.\u00a0 I'm gonna use add as an example.\u00a0 SolrClient has 10 ( ! ) different add methods.\u00a0 The variety comes from the (1) the collection parameter, (2) the different ways to specify the document(s) themselves, and (3) a commitWithin parameter.\u00a0 We could cut this in half by unifying the way that the documents themselves are provided.\u00a0 Rather than having separate methods for SolrInputDocument, Collection<SolrInputDocument>, and Iterable<SolrInputDocument> instances we could accept a wrapper type which has trivial methods to convert whatever underlying gathering of documents the user has.\n\nI'm imagining a \"SolrInputDocumentProvider\" class with the methods below:\n\nclass SolrInputDocumentProvider extends Iterator<SolrInputDocument> {\n    public static SolrInputDocumentProvider fromSingleDocument(SolrInputDocument doc);\n    public static SolrInputDocumentProvider fromDocuments(SolrInputDocument... docs);\n    public static SolrInputDocumentProvider fromDocuments(Collection<SolrInputDocument> docs);\n    public static SolrInputDocumentProvider fromDocuments(SolrInputDocument[] docs);\n    public boolean hasNext();\n    public SolrInputDocument next();\n}\n\nUsers could then use the Iterator version of the add method with their raw iterator, or could pass in SolrInputDocumentProvider to handle any other ways they have their docs gathered.\u00a0 You could take this idea further and make the \"document-wrapper\" class more builder-like by adding commitWithinMillis(long) and toCollection(String) methods.\u00a0 That would let us trim SolrClient down to a single add method without removing any functionality/capabilities that our users might be using. ",
            "author": "Jason Gerlowski",
            "id": "comment-16619637"
        },
        {
            "date": "2018-09-20T19:12:26+0000",
            "content": "Ehh; in common cases this adds complexity, I think.  Simply adding one document means you now need to use SolrInputDocumentProvider, which is also a new abstraction.  \n\nTowards the end of your suggestion, in terms of \"builder like\", you have me thinking we already have UpdateRequest which is to a degree builder like.  Perhaps it could be made to work with SolrClient even more easily.  Ideally, IMO, you could have some client code that only needs to import SolrClient in scope to then call methods on SolrClient that perhaps work with UpdateRequest and you finally submit it.  Today this is invisible with add() which is completely hiding it's use of UpdateRequest but imagine this:\nsolrClient.updateReq().add(myDoc).setCommitWithin(commitWithinMs).setCollection(collection).send()\n\nRE the collection: We could make the notion of a default collection built-in to each SolrClient.  And if you want to change it then you wrap one with a delegate SolrClient that changes settings like this.  HttpSolrClient would have to change a little to be more clear on wether it has a default collection or not; it's a bit ambiguous today leaving it up to whoever writes the URL. ",
            "author": "David Smiley",
            "id": "comment-16622549"
        },
        {
            "date": "2018-09-26T13:23:45+0000",
            "content": "\u00a0 Ehh; in common cases this adds complexity, I think. Simply adding one document means you now need to use SolrInputDocumentProvider\nTrue.\u00a0 Though it's worth mentioning that the \"common case\" itself disobeys the community advice to use document-batching, and the mere presence of a single-doc-add method steers people into misusing SolrJ.\u00a0 It may be the common case, and worth disincentivizing at the same time.\u00a0 I'm not arguing for that I guess, just mentioning the point.\n\nI like your suggestion of using UpdateRequest as this builder-like type, as opposed to inventing some new abstraction.\u00a0 If I get a few minutes, I'll take a stab at seeing how this looks in a larger snippet and upload it here as an example for discussion.\n\nLastly, re: the collection.\u00a0 I've noticed a few bug JIRAs crop up recently related to the ways collections can be specified in SolrJ.\u00a0 Specifically, SOLR-12415 and SOLR-12803.\u00a0 Some older bugs point to this being a problem historically too (SOLR-9362)\u00a0 Maybe those build a good argument for changing how SolrClient handles collections, totally independent of the too-many-similar-methods discussion here. ",
            "author": "Jason Gerlowski",
            "id": "comment-16628774"
        },
        {
            "date": "2018-09-26T15:09:51+0000",
            "content": "+1 to cleaning this up, this is a mess.\n\n+1 to making the add-a-single-document\u00a0less attractive. Discouraging it's use is all to the good.\n\nAre you thinking of deprecating then removing? If so, we're targeting removing in Solr 9 then?\n\nI\u00a0can\u00a0help clean up the tests if we change the interface, I suspect there'll be a lot of changes there. How to coordinate? ",
            "author": "Erick Erickson",
            "id": "comment-16628919"
        },
        {
            "date": "2018-09-26T18:42:10+0000",
            "content": "Thanks for looking at this Jason Gerlowski. Reading all the comments, I\u2019m a bit on the fence really. Yes, the SolrClient interface has many overloaded methods but on the other hand it\u2019s very clear what they do and they are clearly documented. I don\u2019t think this is a source of confusion for our users and I believe it helps the user keep a relatively clean code (like, if they have a list of docs they can just call the add(list) and not need to implement any interfaces for that). I don\u2019t want to block improvements in this, but at the same time, I want to make sure we think very well in the backward compatibility implication of any change to these classes. Any changes here can essentially break, not only all the users code but also any blogs/examples out the in the wild, that may cause much more confusion for users than the fact that SolrClient has many methods.\n\nusing UpdateRequest as this builder-like type\nI think this is a good idea, especially to prevent the proliferation of new methods in SolrClient\n\nthe mere presence of a single-doc-add method steers people into misusing SolrJ\nRight, but this is the first thing new users will see, I think we want to keep it very simple to not scare them away. I think some javadocs (or better docs in the Ref Guide) should be enough to guide people into batching. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16629253"
        },
        {
            "date": "2018-09-26T22:33:51+0000",
            "content": "But I don't have a good feel for how common it is today for users to reuse a single client across collections. \n\nI don't have a good feel for this either ... but I can say that I would strongly recommend the use of a minimal number of client objects.  For CloudSolrClient, I would use one object per cluster.  For HttpSolrClient, one object per Solr server or load balancer front end.\n\nI don't automatically consider the presence of a large number of overloaded methods to be a problem.  It might be something that indicates the class needs some scrutiny, though.  If we deprecated all the methods that don't take a collection, and interpret a \"null\" value in that parameter in the same way as the removed method, that would get rid of half the methods. ",
            "author": "Shawn Heisey",
            "id": "comment-16629486"
        },
        {
            "date": "2018-09-27T20:35:14+0000",
            "content": "If we deprecated all the methods that don't take a collection, and interpret a \"null\" value in that parameter in the same way as the removed method, that would get rid of half the methods.\nPerhaps that's the simplest thing and mostly addresses the pain-point of accidentally forgetting to specify the collection. \u00a0It's still possible but at least \"null\" is explicit.\n\nMy idea on SolrClient.updateReq() builder is still valid; perhaps a separate issue. ",
            "author": "David Smiley",
            "id": "comment-16631003"
        },
        {
            "date": "2018-09-28T00:40:48+0000",
            "content": "My thoughts echo what Tom\u00e1s Fern\u00e1ndez L\u00f6bbe thinks and I feel like we should not keep our APIs in a flux, something that we have done in the past. I am not opposed to changes but if at all we do that I would want to be sure that we 1. ensure back-compat and 2. make sure the path we're trying to move on is a long term thing. ",
            "author": "Anshum Gupta",
            "id": "comment-16631219"
        },
        {
            "date": "2018-09-28T12:37:26+0000",
            "content": "I don\u2019t think this is a source of confusion for our users \nAgreed.  I don't think anyone's confused when their method type-ahead shows 10 add variants.  They get it. \n\nI feel like we should not keep our APIs in a flux, something that we have done in the past\nAgain, I agree.  Your point about API churn, Anshum and Tomas, is well taken.  The bar is pretty high to make SolrClient changes worth the user confusion/work.  Purely cosmetic changes aren't worth it.\n\nBut there's more than cosmetic benefits to the brainstormed ideas above.  There are a lot of problems that are caused or exacerbated by the current SolrClient interface.  It makes it easy for users to do any number of behaviors that the community warns against in the strongest terms: non-batch indexing, client-invoked commits and rollbacks, etc.  The support in the SolrClient interface for multiple collections has also caused a lot of problems historically (see my last comment above).  And more cosmetically, the method overloading is only partially effective: I regularly see client code that needs to repackage a SolrInputDocument[] into a List to call add, for example.  These are all more or less related to the SolrClient interface's method overloading or the fixes proposed. \n\nIs the disruption of changing the interface worth it for the cosmetic improvements?  No.  Is the disruption worth it if the change also eases some of the nagging and painful problems SolrJ users run into?  Maybe.  The answer could still very well be \"no\", but if we're weighing tradeoffs now, it's worth pointing out the more concrete benefits. ",
            "author": "Jason Gerlowski",
            "id": "comment-16631779"
        }
    ]
}