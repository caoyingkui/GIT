{
    "id": "SOLR-267",
    "title": "log handler + query + hits",
    "details": {
        "affect_versions": "1.3",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "adds a logger to log handler, query string and hit counts for each query",
    "attachments": {
        "LogQueryHitCounts.patch": "https://issues.apache.org/jira/secure/attachment/12360224/LogQueryHitCounts.patch",
        "SOLR-267.patch": "https://issues.apache.org/jira/secure/attachment/12380327/SOLR-267.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Will Johnson",
            "id": "comment-12506650",
            "date": "2007-06-20T19:55:06+0000",
            "content": "hit a random key a little fast on the last post.  the attached patch adds a logger to the Standard and DisMax request handlers to log the hander name, query string and hit count for each query.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12506656",
            "date": "2007-06-20T20:09:26+0000",
            "content": "I think in the future we could handle this in a more generic manner, but for now I'd support a more generic version implemented in SolrCore.execute()\nIt could check for a DocList in element #1 and if so, use that.\nThat would be faster than a separate logging statement, and the query (and all other parameters passed in) are already logged in execute().\n\nI think we need a separate key=value section for results... and the number of results would appear as \"hits=941\" "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12506660",
            "date": "2007-06-20T20:35:58+0000",
            "content": "updated patch to work in SolrCore.execute() instead.  i annotated the msg with hits=## as requested however i left time unlabeled for backwards compatibility and i had no idea what the static '0' was but i left it there just to be safe as well.   i think i tmight be good to clean that up and i'm happy to but i don't know who or how those numbers are being used today. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12506684",
            "date": "2007-06-20T21:29:35+0000",
            "content": "The static \"0\" is return code... no exception was thrown if we are here, so it was a success.\n\nI think the last thing should remain the request time for back compatibility and easy scanning.\nThe result parameters should go after the input parameters, separated by some sort of delimiter\nto be nice to machine parsers. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12506763",
            "date": "2007-06-21T04:50:29+0000",
            "content": "Attaching version with small changes...\n\nThis produces log messages that look like this:\nINFO: /select q=solr&wt=python&indent=on hits=1 0 94\n\nIf there was no DocSet, it would look like this:\nINFO: /select q=solr&wt=python&indent=on - 0 94\n\nThe '-' is a placeholder so the number of fields will be the same for different requests.\n\nI checked, and partialUrlEncode does encode spaces, so a space separator in the log is sufficient. "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12506921",
            "date": "2007-06-21T14:42:52+0000",
            "content": "slight update to log the webapp name which is set in the SolrDispatchFilter.  this lets you distinguish between multiple solr instances for tracking purposes. \n\nlog output now looks like:\n\nJun 21, 2007 10:31:05 AM org.apache.solr.core.SolrCore execute\nINFO: /solr /select/ indent=on&start=0&q=:&version=2.2&rows=10 hits=5 0 62 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12507148",
            "date": "2007-06-22T07:06:49+0000",
            "content": "I'm really not a fan of this approach to logging the number of hits via SolrCore.execute ... this is request handler specific information, it should be logged by the request handler.\n\nif people really want this type of stuff to be logged by SolrCore execute so that there's only one log message with the timing info and status and such, then let's come up with a way for the RequestHandler to explicitly specify in the SolrQueryResponse the key-val pairs it wants logged (either via new methods on SOlrQueryResponse, or via apecific name at the top level of the response) and modify the out-of-the-box request handlers to take advantage of this\n\ninstead of...\n\n+    String resultLog = \" -\";\n+    if (rsp.getValues().size()>1 && rsp.getValues().getVal(1) instanceof DocList) \n{\n+       int hits = ((DocList) rsp.getValues().getVal(1)).size();\n+        resultLog = \" hits=\" + hits;\n+    }\n\n...something like...\n\n      StringBuffer resultLog = new StringBuffer(\" -\");\n      Map<String,Object> logables = rsp.getValues().get(\"loginfo\");\n      for (String k : logables.keySet()) \n{\n          resultLog.append(\" \" + k + \"=\" + logables.get(k));\n      } "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12507312",
            "date": "2007-06-22T13:43:28+0000",
            "content": "One thing that comes to mind is making the response header a standard\npart of the SolrQueryResponse object with get/set/add methods then the\nlog message can just print out what ever is in the response header. With\ntrunk, it already contains much of the same data (status, qtime,\nparams).  The only issue is that in order to keep things 'clean' the\noutput would change to being fully labeled:\n\nwebapp=/solr path=/select/ status=0 QTime=63\nparams=\n{indent=on,start=0,q=*:*,version=2.2,rows=10}\n myotherheader=foo\n\nIn general I think this makes things much cleaner and easier to read but\nit does break backwards compatibility for log parsing purposes.  Any\nother ideas?\n\n\n\twill\n\n\n\n\n\n\n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12507398",
            "date": "2007-06-22T14:41:45+0000",
            "content": "new patch to promote responseHeader from a defacto standard to an api standard in SolrQueryResponse.  this enables the SolrCore.execute() method to simply print out it's contents containing any info people want logged.  the format now is:\n\n Jun 22, 2007 10:37:25 AM org.apache.solr.core.SolrCore execute\nINFO: webapp=/solr path=/select/ hits=0 status=0 QTime=0 params=\n{indent=on,start=0,q=solr,version=2.2,rows=10}\n\nwhich is fully labeled but i think mkaes things much easier to read/parse as you can look for labels instead of positions which may or may not change. "
        },
        {
            "author": "Ian Holsman",
            "id": "comment-12507999",
            "date": "2007-06-25T21:21:08+0000",
            "content": "a couple of comments on this patch.\n\n1. how is this going to look when the query is ~200-1000 characters long? you might need/want to put in some quotes are the query.\n\n2. is it possible to put the metrics into the response header so that tomcat's logging will be able to grab it (similar to how SOLR-232 puts it in)\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508006",
            "date": "2007-06-25T22:16:55+0000",
            "content": "I liked the params that I could paste back into my browser... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508007",
            "date": "2007-06-25T22:21:48+0000",
            "content": "> I'm really not a fan of this approach to logging the number of hits via SolrCore.execute ... this is request handler specific information, it should be logged by the request handler.\n\nThere is something to be said for automatically logging certain things for all request handlers in a certain category (those that produce a \"base\" DocList or DocSet) rather than requiring each handler to worry about logging code also.\n\nThe implementation is slightly hackish at this point, but not too bad.  If/when we go to a QueryComponent chain, it would be cleaner to get \"hits\". "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12508163",
            "date": "2007-06-26T12:48:28+0000",
            "content": "A few response rolled up:\n\nYonik Seeley commented on SOLR-267:\n-----------------------------------\n\n\nAfter having used this for a ~week now I kind of do too.  I can work on\na patch that switches that log component back unless someone else (who\nwants it more) beats me to it.\n\n\"hits\".\n\nAgreed, I'd love to have query pipelines and indexing pipelines for\nprocessing logic but that's a much bigger effort.  At the moment it's\nonly 1 line extra in each of the 'real' query handlers which doesn't\nseem too bad.\n\n\nIan Holsman commented on SOLR-267:\n----------------------------------\n\nlong? >you might need/want to put in some quotes are the query.\n\nIt will look very long   As long as there are no spaces which the url\nencoding should handle I think things are ok (this assumes we're going\nto switch back to cgi params)\n\nit >in)\n\nNot that I know how to do.  Since the dispatch filter is a filter not a\nservlet it doesn't have access to an HttpServletResponse, only a\nServletResponse which means it can't set HttpHeaders.  This was my\noriginal idea for how to solve this problem and seems a bit more\n'standard' anyways but I hit a dead end without getting more hackish\nthan usual.\n\n\n\twill\n\n\n\n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12508548",
            "date": "2007-06-27T14:01:31+0000",
            "content": "new patch that writes out request params as cgi instead of NL.toString() for pasting into a browser.  i also figured out the HttpResponseHeader however i'm not sure how people feel about having that info duplicated in teh solr logs, the http headers/access logs and the actual solr response.  in any case the following logic would go into SolrDispatchFilter: (but is not in this patch)\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12510550",
            "date": "2007-07-06T01:53:53+0000",
            "content": "The double logging issue with the new update handler framework should be fixed with whatever mechanism is created here.\n\nUsing the responseHeader as logging info is clever, but I'm not sure if we want to be bound to return everything in the response that we want to be logged (for updates, some may want all of the ids logged but not returned, and if they are returned, not in the header).\n\nSo, what about either a \"NamedList toLog;\"on the SolrQueryResponse,  or SolrQueryRequest.getContext().get(\"log\") => NamedList ?\n\n> new patch to promote responseHeader from a defacto standard to an api standard in SolrQueryResponse.\n\nI think that's probably OK\n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12511812",
            "date": "2007-07-11T17:59:50+0000",
            "content": "new path produces the following output:\n\nJul 11, 2007 1:35:19 PM org.apache.solr.core.SolrCore execute\nINFO: webapp=/solr path=/select/ params=indent=on&start=0&q=solr&version=2.2&rows=10 hits=0 status=0 QTime=79\n\nand adds a NamedList toLog as yonik suggested.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12520633",
            "date": "2007-08-17T18:51:32+0000",
            "content": "So what do people think of the logging format?  Any objections? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12520691",
            "date": "2007-08-17T22:05:40+0000",
            "content": "format looks fine to me, some minor nits from a quick skim of the patch...\n\n1) \"protected NamedList toLog\" should have some javadocs.\n\n2) \"public NamedList getResponseHeader()\" seems to have incorrect javadocs\n\n3) I'm pretty sure the use HttpServletResponse.addHeader in SolrDispatchFilter requires that the header names not contains spaces ... that's not something currently guaranteed by solrRsp.getResponseHeader()\n\n4) although the odds of the ClassCastException in SolrDispatchFilter asymptotically approach zero, it should still be logged properly instead of using cce.printStackTrace()\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12589716",
            "date": "2008-04-16T20:04:49+0000",
            "content": "Updated the patch to run using the new SearchComponent infrastructure.  Also, made a slight change about how params are output so that it is more clear what the params are due to = being both the key/value separator for the log message and the key/value separator for the params.\n\nPlan to commit tonight or tomorrow. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12589717",
            "date": "2008-04-16T20:09:16+0000",
            "content": "> Also, made a slight change about how params are output so that it is more clear what the params are\n\nCan you give an example of what the output looks like now (and what impact multi-core has, if any)?\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12589728",
            "date": "2008-04-16T20:56:21+0000",
            "content": "\nCan you give an example of what the output looks like now (and what impact multi-core has, if any)?\nINFO: webapp=/solr path=/select/ params=\n{indent=on&rows=10&start=0&q=ipod&version=2.2}\n hits=3 status=0 QTime=8 \n\nI will have to try w/ MultiCore "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12589737",
            "date": "2008-04-16T21:38:47+0000",
            "content": "Here's what happens on multicore:\n\n\nApr 16, 2008 5:40:29 PM org.apache.solr.core.SolrCore execute\nINFO: webapp=/solr path=/select/ params={indent=on&rows=10&start=0&q=solr&version=2.2} hits=0 status=0 QTime=39 \nApr 16, 2008 5:40:29 PM org.apache.solr.core.SolrCore execute\nINFO: [core0] /select/ indent=on&rows=10&start=0&q=solr&version=2.2 0 39\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12589743",
            "date": "2008-04-16T22:02:07+0000",
            "content": "Update to remove double logging in SolrCore.  Should now properly handle multicore, etc. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12590014",
            "date": "2008-04-17T12:55:32+0000",
            "content": "Committed revision 649066. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12590066",
            "date": "2008-04-17T15:35:35+0000",
            "content": "Something isn't quite right with regards to the responseHeader. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12590088",
            "date": "2008-04-17T16:30:36+0000",
            "content": "OK, two things: \n\n1. The current commit adds responseHeader twice\n\n2. The changes to SolrDispatchFilter can screw up SolrJ when you have explicit=all.  \n\nI don't know enough about how headers work, so I'm going to fix #1 and comment out #2 and put a TODO: there and someone can address it on SOLR-232\n\nPatch shortly "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12590096",
            "date": "2008-04-17T16:49:41+0000",
            "content": "Will commit shortly "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12590097",
            "date": "2008-04-17T16:55:50+0000",
            "content": "Committed revision 649185. "
        }
    ]
}