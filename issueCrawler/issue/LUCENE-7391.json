{
    "id": "LUCENE-7391",
    "title": "MemoryIndexReader.fields() performance regression",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.2"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "While upgrading our codebase from Lucene 4 to Lucene 6 we found a significant performance regression - a 5x slowdown\n\nOn profiling the code, the method MemoryIndexReader.fields() shows up as one of the hottest methods\n\nLooking at the method, it just creates a copy of the inner fields Map before passing it to MemoryFields. It does this so that it can filter out fields with numTokens <= 0.\n\nThe simplest \"fix\" would be to just remove the copying of the map completely, and pass fields directly to MemoryFields.  It's simple and removes any slowdown caused by this method.  It does potentially change behaviour though, but none of the unit tests seem to test that behaviour so I wonder whether it's necessary (I looked at the original ticket LUCENE-7091 that introduced this code, I can't find much in way of an explanation). I'm going to attach a patch to this effect anyway and we can take things from there",
    "attachments": {
        "LUCENE-7391.patch": "https://issues.apache.org/jira/secure/attachment/12819624/LUCENE-7391.patch",
        "LUCENE-7391-test.patch": "https://issues.apache.org/jira/secure/attachment/12819643/LUCENE-7391-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15389540",
            "author": "Steve Mason",
            "date": "2016-07-22T13:58:28+0000",
            "content": "Patch attached. Note that all unit tests pass. I've also run it through our integration test suite (matching 1000 queries against 45000 documents) and verified that they pass as well\n\nIt would be good to know why the original code was like this, I wonder if Martijn van Groningen remembers - it seems to be tied to this comment: https://issues.apache.org/jira/browse/LUCENE-7091?focusedCommentId=15189525&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15189525\n\nIf the existing behaviour needs to be preserved then that's fine - if someone can provide me with a test case (or explain one to me) then I'll add it to the patch and formulate an alternative solution "
        },
        {
            "id": "comment-15389577",
            "author": "Martijn van Groningen",
            "date": "2016-07-22T14:17:36+0000",
            "content": "The reason it filters out field with numTokens <= 0 is that it would otherwise include non indexed fields (fields with just doc values or point values). However this slowdown is unintended. Maybe instead we could build `filteredFields` in the constructor of `MemoryIndexReader` and reuse it between `#fields()` invocations? "
        },
        {
            "id": "comment-15389614",
            "author": "David Smiley",
            "date": "2016-07-22T14:37:16+0000",
            "content": "A simple solution is for fields() to loop and count the number of fields that have numTerms > 0 (don't need to record which), and pass this to MemoryFields so that MemoryFields.size() is easy.  Then MemoryFields.terms() can simply check numTerms <= 0 and return null. "
        },
        {
            "id": "comment-15389623",
            "author": "Martijn van Groningen",
            "date": "2016-07-22T14:44:20+0000",
            "content": "+1 to count the number of fields with `numTerms > 0` and filter out fields with `numTerms <= 0` "
        },
        {
            "id": "comment-15389624",
            "author": "Steve Mason",
            "date": "2016-07-22T14:44:48+0000",
            "content": "OK, thanks Martijn - is it part of the contract that fields() should only return indexed fields then?\n\nThere are a couple of options we can think of:\n1. As you suggest - cache the filtered Map (or the whole MemoryIndexReader object?).  In that case, we'd need to make sure that the cache was invalidated after every mutation\n2. Make MemoryFields a \"view\" on the original that filters them out when each of its methods are called (there are only 3)\n3. Maybe maintain another Map of just the indexed fields?\n\nI'll have a go at some of these and see how I get on "
        },
        {
            "id": "comment-15389646",
            "author": "Martijn van Groningen",
            "date": "2016-07-22T15:04:03+0000",
            "content": ">  is it part of the contract that fields() should only return indexed fields then?\n\nYes.\n\nI think David's fix is the easiest here. Computing this count each time fields is invoked is less of an overhead compared what happens now when building MemoryFields. Since that count is computed each time, I think you shouldn't worry about caching or cache invalidation.\n\nThe concurrency aspect of the MemoryIndex is in my opinion a bit of a mess. It allows fields to be added to be made after a reader has been created, except when the freeze method is invoked (and then it should be able to be used from many threads). I think the MemoryIndex class itself should be kind of a builder that just returns an IndexReader and shouldn't be able to be used after an IndexReader instance has been made.\n\n "
        },
        {
            "id": "comment-15389651",
            "author": "Steve Mason",
            "date": "2016-07-22T15:07:33+0000",
            "content": "Sorry our posts must have crossed\n\nOK I'll try that as well - it's very much like the \"view\" option I think "
        },
        {
            "id": "comment-15389656",
            "author": "Steve Mason",
            "date": "2016-07-22T15:10:47+0000",
            "content": "Attaching a patch with a test for the current behaviour - my original patch causes this to fail when applied\n\nSuggestions for improvements appreciated (I'm very new to this codebase) "
        },
        {
            "id": "comment-15389705",
            "author": "David Smiley",
            "date": "2016-07-22T15:36:55+0000",
            "content": "The test is fine; I thought the perf fix would also be in the patch.  Let me know when you have that and I'll review and commit later.  Also... your .patch appears to not be a normal patch file.... see https://wiki.apache.org/lucene-java/HowToContribute#Creating_a_patch "
        },
        {
            "id": "comment-15389767",
            "author": "Steve Mason",
            "date": "2016-07-22T16:22:53+0000",
            "content": "Yeah it's still a work-in-progress, I'm still working on the full patch.  I'm actually on annual leave next week so the final patch might be a little while (though I'll add it if I get time)\n\nI'll follow those instructions for generating the patch - it's just the output of git format-patch right now - thanks for the advice "
        },
        {
            "id": "comment-15390012",
            "author": "Alan Woodward",
            "date": "2016-07-22T18:35:56+0000",
            "content": "The concurrency aspect of the MemoryIndex is in my opinion a bit of a mess\n\n+1 - freeze() was a hack, and I've been meaning to open an issue to make things properly immutable for ages. "
        },
        {
            "id": "comment-15391166",
            "author": "Steve Mason",
            "date": "2016-07-24T20:34:45+0000",
            "content": "I got some time and put together another patch\n\nThis one does the filtering for numTokens > 0 in the MemoryFields object itself when any of its methods are called. I couldn't simply pass the size as suggested because of the iterator() method.  As the MemoryField object is pretty much stateless I also cache it on the reader.\n\nThis patch also includes the unit tests from before\n\nPerformance-wise this is the same performance improvement as my original patch "
        },
        {
            "id": "comment-15391427",
            "author": "Martijn van Groningen",
            "date": "2016-07-25T06:52:43+0000",
            "content": "+1 The filtering cost is deferred to when someone really needs to know the size or the actual fields and I think that this is better then what happens now.\n\nSmall nit: Maybe rename the variable `ignored` to `field` in the `size()` method as it is actually not ignored?\n\nI'll let David commit this as he assigned himself to this issue. "
        },
        {
            "id": "comment-15391441",
            "author": "Martijn van Groningen",
            "date": "2016-07-25T07:01:14+0000",
            "content": "+1 - freeze() was a hack, and I've been meaning to open an issue to make things properly immutable for ages.\n\nAlan Woodward Then lets try to fix this in master  I've opened LUCENE-7394 to track this. "
        },
        {
            "id": "comment-15391932",
            "author": "ASF subversion and git services",
            "date": "2016-07-25T14:00:23+0000",
            "content": "Commit dcc9a4b9a411a0436e5cb21e7d6251691640f3db in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dcc9a4b ]\n\nLUCENE-7391: Fix MemoryIndex fields() perf regression "
        },
        {
            "id": "comment-15391936",
            "author": "ASF subversion and git services",
            "date": "2016-07-25T14:03:26+0000",
            "content": "Commit d85a9718564abf3dd33f66d057f8cfc835a56715 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d85a971 ]\n\nLUCENE-7391: Fix MemoryIndex fields() perf regression\n(cherry picked from commit dcc9a4b) "
        },
        {
            "id": "comment-15391944",
            "author": "David Smiley",
            "date": "2016-07-25T14:07:23+0000",
            "content": "Thanks for the patch Steve!  Committed and closing now. "
        },
        {
            "id": "comment-15439075",
            "author": "Michael McCandless",
            "date": "2016-08-26T14:01:12+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        }
    ]
}