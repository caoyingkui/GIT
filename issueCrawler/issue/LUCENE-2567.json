{
    "id": "LUCENE-2567",
    "title": "RT Terms Dictionary",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [
            "Realtime Branch"
        ],
        "affect_versions": "Realtime Branch",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Implement an in RAM terms dictionary for realtime search.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-07-26T18:08:51+0000",
            "content": "Further thinking about the RT terms dictionary, we probably do\nnot want to insert terms into the concurrent terms dictionary as\nwe're tokenizing due to the inherent insertion performance O(log n)\ndegradation. Also, I believe that implementing a flattened\nhttp://fuseyism.com/classpath/doc/java/util/concurrent/ConcurrentSkipListMap-source.html \nwill be fairly complex. \n\nInstead we may want to queue new terms and merge them into the\nterms dictionary on demand (ie, when a new terms enum is\ncreated). One way to achieve this could be to only periodically\nrecreate a new terms index (lets say after N new terms have been\nadded). Each term in the terms index array points to a position\nin the terms linked list (as today). The binary search of the\nterms index, then the linear scan of the terms dictionary would\nalso behave as usual. We need to figure out how we want to\nconcurrently grow the terms index arrays.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12892396"
        },
        {
            "date": "2010-07-27T18:08:57+0000",
            "content": "The terms index can be a sorted linked list (saving new array allocations) if we use the somewhat slower iterator (slower because of iterating to find the middle) based binary search method.  \n\nThe second issue is the merging of the queued new terms into the terms index and the terms dictionary.   Because we can first sort the new terms, there should be efficiencies gained by merging sorted linked lists (ala merge sort). ",
            "author": "Jason Rutherglen",
            "id": "comment-12892876"
        },
        {
            "date": "2010-07-28T04:54:00+0000",
            "content": "Perhaps we can use unchanging int arrays of the term ids sorted\nby term ascending as a primary terms dictionary, and place new\nterms/postings into a secondary realtime ConcurrentSkipListMap.\nThey can be iterated over like two segments are with\nMultiTermsEnum. The CSLM terms dict would still only be inserted\ninto on demand (rather than as tokenization occurs) as terms\nenums or IRs are instantiated.\n\nWith this method, we'd get the low memory usage of an int array\napproach, combined with the concurrency of Java's skip list\nimplementation (which uses more memory). We can then\nperiodically merge the CSLM terms dictionary into the int[]\nterms dictionary. \n\nI'm not immediately sure how we'd accurately estimate the memory\nusage of the ConcurrentSkipListMap. ",
            "author": "Jason Rutherglen",
            "id": "comment-12893063"
        },
        {
            "date": "2010-09-22T04:24:48+0000",
            "content": "The RT terms dict has been introduced in the LUCENE-2575 patches.  I may end up closing this issue, or if needed moving the terms dict code from LUCENE-2575. ",
            "author": "Jason Rutherglen",
            "id": "comment-12913385"
        },
        {
            "date": "2010-10-11T03:21:32+0000",
            "content": "This'll be subsumed by LUCENE-2312 ",
            "author": "Jason Rutherglen",
            "id": "comment-12919702"
        }
    ]
}