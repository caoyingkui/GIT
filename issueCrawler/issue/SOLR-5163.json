{
    "id": "SOLR-5163",
    "title": "edismax should throw exception when qf refers to nonexistent field",
    "details": {
        "affect_versions": "4.10.4",
        "status": "Resolved",
        "fix_versions": [
            "master (8.0)"
        ],
        "components": [
            "query parsers",
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "query:\n\nq=foo AND bar\nqf=field1\nqf=field2\ndefType=edismax\n\nWhere field1 exists and field2 doesn't..\n\nwill treat the AND as a term vs and operator",
    "attachments": {
        "SOLR-5163.patch": "https://issues.apache.org/jira/secure/attachment/12937454/SOLR-5163.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Cassandra Targett",
            "id": "comment-16322406",
            "date": "2018-01-11T15:22:11+0000",
            "content": "I can reproduce this with the techproducts example docs. Index them, then do a query like:\n\ndebugQuery=on&defType=edismax&q=storm%20AND%20sword&qf=name^2.0&qf=series^2.0\n\n(where the field \"series\" for the 2nd qf is the field that doesn't exist)\n\nThe parsedquery from the debug output is: \n\n+(DisjunctionMaxQuery(((name:storm)^2.0)) DisjunctionMaxQuery(((name:and)^2.0)) DisjunctionMaxQuery(((name:sword)^2.0)))\n\nIf you use a field that does exist, like \"series_t\", instead you get a parsedquery like:\n\n+(+DisjunctionMaxQuery(((name:storm)^2.0 | (series_t:storm)^2.0)) +DisjunctionMaxQuery(((name:sword)^2.0 | (series_t:sword)^2.0)))\n\nThe stranger thing is the query with the bad field name is the only one that returns the matching document. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16390114",
            "date": "2018-03-07T20:05:29+0000",
            "content": "I've been bitten by this a several times.  It can be nasty since a typo in your \"qf\" won't necessarily be noticed right away \u2013 no error, just bad search results for certain queries that use operators.  It might not even be a typo but the schema being out of sync.  I suspect the fix will need to be careful to throw an exception for \"qf\" errors only while not throwing an exception if the user's query appears it might refer to a field.  Probably the easiest/safest way to do this is validate \"qf\" up front.  Clearly needs a test. "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16595117",
            "date": "2018-08-28T15:08:32+0000",
            "content": "I'm new to the project and this is my first contribution, thank you for your patience.\n\nI have attached a patch file with code changes to address the issue.  It is not a candidate to commit in its current state.  The code changes satisfy the test case provided in Cassandrea's comment above.  Using the 'techproducts' example, an exception is throw when query fields (qf) contains field 'series'.  But passes when field 'series_t' is used.  If other invalid fields are used, such as foo_t, the exception is thrown.  An exception is thrown for any query field not persisted to the index or defined in the schema.\n\nHowever..... There are unit test failures when executing 'ant -Dtestcase=TestExtendedDismaxParser test'.  The error raised is <o.a.s.c.CachingDirectoryFactory Timeout waiting for all directory ref counts to be released>.  I believe this is due more to my lack of knowledge of the test framework than the actual code addition.  May need to add an @AfterClass method with some tear down code.  Not sure.  Maybe someone with more test framework knowledge can steer me in the right direction.\n\nPlease take a look at the patch and let me know if I have missed the boat completely.  Any help / instructions / advice greatly appreciated. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16595133",
            "date": "2018-08-28T15:25:08+0000",
            "content": "Thanks for contributing!\n\nI took a brief look at your patch.\n\n\tI think DisMaxQParser.parseQueryFields should include validation. \u00a0Note that this method is also used by ExtendedDismaxQParser. \u00a0This method already takes the schema so it has the necessary inputs.\n\tOnly use the Solr schema \"IndexSchema\", don't go down to the Lucene level \"FieldInfos\".\n\tIt's sufficient\u00a0to call IndesSchema.getField(name). \u00a0It'll throw an exception if it can't, and that exception will be marked as a BAD_REQUEST as it should be. \u00a0This method handles dynamic fields; the approach you took would not.\n\tMissing a test\n\n\n\nRE \"Timeout waiting for all directory ref counts to be released\", I suspect there was an exception reported prior to that point? \u00a0Any way this error surprises me. \u00a0If after doing the above and adding a test, even if you still get this error, post the patch any way and I'll take a look then. "
        },
        {
            "author": "Edward Ribeiro",
            "id": "comment-16595370",
            "date": "2018-08-28T17:54:04+0000",
            "content": "Hi Charles Sanders, a couple of questions about your patch (congrats for contributing, btw!):\n\nvalidateQueryFields(req);\n\nYou pass req, but req is only used to get the Schema, so why not pass the schema, i.e., validateQueryFields(req.getSchema())?\n\nprotected void validateQueryFields(SolrQueryRequest req) throws SyntaxError {\n     if (queryFields == null || queryFields.isEmpty()) {\n        throw new SyntaxError(\"No query fields given.\");\n     }\n\nIf df is not specified then the parser will resort to use df (or throw an exception if neither is specified). Therefore, even tough this if clause is a nice defensive guard I don't think it really is worth now, because if queryFields is empty the error will be thrown before reaching this method. And even if is empty then the result is that the for-loop is not traversed.\n\nFinally,\u00a0\n\nreq.getSchema().getFields().keySet()\n\ncould be extracted to a variable before entering the loop, instead of being called for each field.\n\n\u00a0\n\nBest regards! "
        },
        {
            "author": "Edward Ribeiro",
            "id": "comment-16615578",
            "date": "2018-09-15T03:10:32+0000",
            "content": "Hi Charles Sanders, are you still working on this issue? If not, can I provide another patch to it? "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16617834",
            "date": "2018-09-17T17:01:56+0000",
            "content": "Edward Ribeiro Yes I am planning to get back to this.\u00a0 Been busy and on vacation.\u00a0 I hope to get back to this within the next couple of weeks.\u00a0 Thanks. "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16620991",
            "date": "2018-09-19T18:17:54+0000",
            "content": "Attached a new patch file.\u00a0 The first attempt did not take into account field aliases.\u00a0 Had to take a slightly different approach.\u00a0 Added a unit test for the validation.\u00a0 All unit tests pass.\u00a0 I think I have addressed all previous comments.\u00a0 As always, feedback appreciated. "
        },
        {
            "author": "Edward Ribeiro",
            "id": "comment-16621372",
            "date": "2018-09-20T01:00:51+0000",
            "content": "Hey, Charles Sanders, you could simplify things a bit more. Like David Smiley\u00a0pointed out\u00a0https://jira.apache.org/jira/browse/SOLR-5163?focusedCommentId=16595133&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16595133\u00a0it is more interesting to validate the fields in DismaxQueryParser#parseQueryFields like below:\n\ntry {\n   for (String e : queryFields.keySet()){\n      indexSchema.getField(e);\n   }\n} catch (SolrException ex) {\n  throw new SyntaxError(ex.getMessage());\n}\n\nreturn queryFields;\n\nOr, even use Java8 style like below:\n\nqueryFields.keySet().forEach(indexSchema::getField);\n\nreturn queryFields;\n\nThe advantage is double fold: it gets checked for both DismaxParser and ExtendedDismaxParser and the logic is in a well defined place (besides being a tidy bit more simple).\n\nAs for the tests, relying too heavily on String comparisons makes the tests fragile (a unrelated change on the return string and the test can fail). IIRC, it is even an anti-pattern, but I know it can be difficult not to resort to this kind of check then why not make it more economic like below?\n\n/** SOLR-5163 */ \n@Test\npublic void testValidateQueryFields() throws Exception {\n\n  // test existent qf\n  assertJQ(req(\"defType\", \"edismax\", \"df\", \"text\", \"q\", \"olive AND other\", \"qf\", \"subject^3 title\")\n      , \"/response/numFound==0\"\n  );\n\n  // test nonexistent qf\n  try {\n      assertJQ(req(\"defType\", \"edismax\", \"df\", \"text\", \"q\", \"olive AND other\", \"qf\", \"subject^3 nosuchfield\")\n          , \"/response/numFound==0\"\n      );\n      fail(\"nosuchfield qf doesn't exists\");\n  } catch (Exception e) {\n     assertEquals(\"undefined field: \\\"nosuchfield\\\"\", e.getMessage());\n  }\n\n\u00a0\n\nCheers! "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16621903",
            "date": "2018-09-20T12:10:35+0000",
            "content": "Edward Ribeiro\u00a0 Initially I put the check in DismaxQueryParser#parseQueryFields, as seen in the first patch.  But existing unit tests for field aliases failed.  The method DismaxQueryParser#parseQueryFields does not know about field aliases.  That is why I moved the check to ExtendedDismaxQParser.\n\nAs for the unit test, I attempted to follow the pattern established in TestExtendedDismaxParser. There are many tests in the class that use the same string comparison pattern.  ???\n\nThis is a very large repository of code.  Still trying to get a foot hold.  I would be very interested to see and learn from a patch you create for this issue. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16621953",
            "date": "2018-09-20T12:47:12+0000",
            "content": "Ah; thanks for explaining why you placed the code here; makes sense.\n\nI like your test; I'm a fan of doing string comparisons for checking the structure of a Query.  It's a one-liner that is very easy to read.  Yes it's more fragile but I'll take the readability trade any day.\n\nLooks good to me.  I'll let the patch review bot take a look then commit it. "
        },
        {
            "author": "Edward Ribeiro",
            "id": "comment-16621982",
            "date": "2018-09-20T13:01:53+0000",
            "content": "If David Smiley agreed then it's hands down the solution. Go ahead!\u00a0 "
        },
        {
            "author": "David Smiley",
            "id": "comment-16621998",
            "date": "2018-09-20T13:08:14+0000",
            "content": "Aliases can refer to other aliases and it's resolved recursively.  Based on the patch here, if an alias refers to a bogus field, then the new checks wouldn't catch it.  It's not a blocker to mean but it is a shortcoming.  You might also want to see if the field is an alias first to avoid the throw of an exception that may be innocent.  FYI ExtendedSolrQueryParser validateCyclicAliasing does some checks vaguely similar to what might be needed. "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16623639",
            "date": "2018-09-21T13:45:14+0000",
            "content": "David Smiley\u00a0\u00a0Yes you are correct about aliases.  I should have caught than.  Totally my fault.  I am working on a new patch to work through aliases and test the underling source field(s).  New patch coming soon. "
        },
        {
            "author": "Lucene/Solr QA",
            "id": "comment-16624711",
            "date": "2018-09-22T15:26:11+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   4m 30s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   3m  2s \n  the patch passed  \n\n\n +1 \n  javac  \n   3m  2s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   3m  2s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   3m  2s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   3m  2s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  89m 27s \n  core in the patch passed.  \n\n\n  \n   \n 100m 28s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-5163 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12940463/SOLR-5163.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 4ccf0fb \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/183/testReport/ \n\n\n modules \n C: solr solr/core U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/183/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16627215",
            "date": "2018-09-25T11:53:54+0000",
            "content": "Added a new patch.  This one accounts for query field aliases.  During validation, when an alias is detected, it will loop through the alias until it finds the source field(s) and then validate those against the schema as well.  This was not properly addressed in the previous patch. "
        },
        {
            "author": "Lucene/Solr QA",
            "id": "comment-16628186",
            "date": "2018-09-26T02:47:06+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 24s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 15s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 15s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 15s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 15s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 15s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  55m 53s \n  core in the patch failed.  \n\n\n  \n   \n  60m 39s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.MoveReplicaHDFSTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-5163 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12941205/SOLR-5163.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 5816766 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/189/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/189/testReport/ \n\n\n modules \n C: solr solr/core U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/189/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-16628675",
            "date": "2018-09-26T12:22:38+0000",
            "content": "Looks pretty good. \u00a0Though I don't think you tested this change? \u00a0Also, if there's an infinite loop in aliasing, what will happen? \u00a0I believe this resulted in a failure before but I wonder if now, due to this new code, Solr will loop forever? \u00a0Perhaps you should in one shot both do the recursive aliasing detection (moving from where is now) and also validate the field? "
        },
        {
            "author": "Charles Sanders",
            "id": "comment-16628705",
            "date": "2018-09-26T12:51:12+0000",
            "content": "David Smiley  I ran 'ant clean test' on the code before creating the patch.  All the unit tests passed.  The code does check for an infinite alias loop using the existing check 'validateCyclicAliasing'.  I'm relying on that method to throw an exception and break the loop if one exists.\n\nSorry.  Maybe this is bigger than I am.  Maybe Edward Ribeiro should finish this.  He mentioned he had a patch candidate.  Thanks. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16630966",
            "date": "2018-09-27T19:53:45+0000",
            "content": "Commit 9481c1f623b77214a2a14ad18efc59fb406ed765 in lucene-solr's branch refs/heads/master from Charles Sanders\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9481c1f ]\n\nSOLR-5163: edismax now throws an exception when qf refers to a nonexistent field "
        },
        {
            "author": "David Smiley",
            "id": "comment-16630970",
            "date": "2018-09-27T19:55:33+0000",
            "content": "Oh I see, and I see the test too. \u00a0(I wrote my previous comment without checking if\u00a0cyclic aliasing\u00a0was tested).\n\nI committed to 8.0.\n\nThanks for contributing Charles! "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16631272",
            "date": "2018-09-28T02:18:48+0000",
            "content": "Commit 9481c1f623b77214a2a14ad18efc59fb406ed765 in lucene-solr's branch refs/heads/jira/http2 from Charles Sanders\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9481c1f ]\n\nSOLR-5163: edismax now throws an exception when qf refers to a nonexistent field "
        }
    ]
}