{
    "id": "SOLR-2129",
    "title": "Provide a Solr module for dynamic metadata extraction/indexing with Apache UIMA",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Provide components to enable Apache UIMA automatic metadata extraction to be exploited when indexing documents.\nThe purpose of this is to get unstructured information \"inside\" a document and create structured metadata (as fields) to enrich each document.\n\nBasically this can be done with a custom UpdateRequestProcessor which triggers UIMA while indexing documents.\nThe basic UIMA implementation of UpdateRequestProcessor extracts sentences (with a tokenizer and an hidden Markov model tagger), named entities, language, suggested category, keywords and concepts (exploiting external services from OpenCalais and AlchemyAPI). Such an implementation can be easily extended adding or selecting different UIMA analysis engines, both from UIMA repositories on the web or creating new ones from scratch.\n\nMore information can be found on the dedicated wiki page: http://wiki.apache.org/solr/SolrUIMA",
    "attachments": {
        "SOLR-2129.patch": "https://issues.apache.org/jira/secure/attachment/12455487/SOLR-2129.patch",
        "SOLR-2129-asf-headers.patch": "https://issues.apache.org/jira/secure/attachment/12455491/SOLR-2129-asf-headers.patch",
        "SOLR-2129-version-6.patch": "https://issues.apache.org/jira/secure/attachment/12467988/SOLR-2129-version-6.patch",
        "SOLR-2129-version2.patch": "https://issues.apache.org/jira/secure/attachment/12459551/SOLR-2129-version2.patch",
        "SOLR-2129-version-5.patch": "https://issues.apache.org/jira/secure/attachment/12467795/SOLR-2129-version-5.patch",
        "SOLR-2129-version3.patch": "https://issues.apache.org/jira/secure/attachment/12465815/SOLR-2129-version3.patch",
        "lib-jars.zip": "https://issues.apache.org/jira/secure/attachment/12455557/lib-jars.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tommaso Teofili",
            "id": "comment-12914442",
            "date": "2010-09-24T12:39:36+0000",
            "content": "Patch to port solr-uima GC project as a solr/contrib module "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12914461",
            "date": "2010-09-24T13:07:53+0000",
            "content": "Same patch plus required ASF headers on code and xml "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12914548",
            "date": "2010-09-24T17:25:38+0000",
            "content": "Hello, is it possible you could upload the jar files to this issue that it depends on?\n\nI tried to get them to test the patch, but i think there are problems in maven-land with Alchemy:\n\nhttp://repository.apache.org/snapshots/org/apache/uima/alchemy-annotator/2.3.1-SNAPSHOT/\n\nas you can see, the jar file is very out of date. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12914792",
            "date": "2010-09-25T09:18:03+0000",
            "content": "Hello Robert, in attachment you can find an archive containing all lib/*.jar files "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12914809",
            "date": "2010-09-25T11:55:55+0000",
            "content": "Thanks Tommaso!\n\nI applied the patch: the build and tests work correctly, there aren't any intl/localization issues, and the code looks clean.\n\nWould another committer more familiar with these parts of Solr take a look? It looks like a good feature. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12917634",
            "date": "2010-10-04T15:10:19+0000",
            "content": "Hello Robert, \nas it seems this patch hasn't been committed yet, I wonder if there is anything I should do or may help with.\nIf so, please let me know that  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12917957",
            "date": "2010-10-05T12:42:26+0000",
            "content": "Hi Tommaso: i was hoping to get another person to look at it, since it is not my area of expertise.\n\nBut no one is stepping up, so I will take it. It will take me longer to review it though (sorry)! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12917961",
            "date": "2010-10-05T13:04:36+0000",
            "content": "Tommaso: I noticed the following in the maven configuration:\n\n\n<source>1.6</source>\n<target>1.6</target>\n\n\n\nBut I took the patch and applied to branch_3x (java 5-only), and just removed 3 interface @Overrides and everything worked with java 5\nCan you confirm this is correct (that UIMA does not require java 6)?\n\nIf the patch only needs java 5, then it makes it possible to apply to our 3.x branch also. "
        },
        {
            "author": "Joern Kottmann",
            "id": "comment-12917981",
            "date": "2010-10-05T13:51:33+0000",
            "content": "I am also interested in using this patch. Is it possible to run custom UIMA analysis or only the pre-defined AlchemyAPI analysis ? "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12918037",
            "date": "2010-10-05T15:57:40+0000",
            "content": "Robert thanks for that, I confirm that UIMA doesn't require java 6, java 5 is fine so this is fine for branc_3x too.\n\nJ\u00f6rn, good to see you here too  you can run also custom UIMA Analysis.\nBy default the default AEs are WhitespaceTokenizer, Tagger, AlchemyAPIAnnotator, OpenCalaisAnnotator.\n\n\nTo customize the default behavior you should:\na) change the OverridingParamsExtServicesAEDescriptor and (eventually) eventually extend BaseUIMAUpdateRequestProcessor and its SolrUIMAConsumers\n\nor\n\nb) define a new AE descriptor and create for it a new class extending UIMAUpdateRequestProcessor (or extend BaseUIMAUpdateRequestProcessor) then modify the UIMAUpdateRequestProcessorFactory to initialize that class instead of the base one.\n\n\nIf you need any parameters to be set at runtime for a delegate AE, you must set, inside the aggregate AE, an overriding parameter that overrides some parameter in the delegate AE and then define its runtime value in solrconfig with:\n\n<uimaConfig>\n  <runtimeParameters>\n      <overriding_param_name>RUNTIMEVALUE</overriding_param_name>\n  </runtimeParameters>\n</uimaConfig>\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12918041",
            "date": "2010-10-05T16:06:28+0000",
            "content": "I'm going to take a look at this when i get a chance as well. This looks like solid stuff. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12924691",
            "date": "2010-10-25T19:42:07+0000",
            "content": "Cool stuff, Tommaso.  I'm starting to look at adding classifiers into Solr via Mahout, so thought I would look at this too.  \n\nCouple of early things, based on looking at the getting started instructions.\n\n\n\tI think we should do like we do with Tika and provide a way for users to map UIMA output to Solr fields as opposed to having to hardcode in specific fields.\n\tFor the Jars, have a look at how the clustering is setup.  We should be able to just point at the UIMA libs in solrconfig.xml under contrib/uima/lib instead of having to copy them around\n\n\n "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12924971",
            "date": "2010-10-26T14:02:35+0000",
            "content": "Hi Grant, I think it would be great to have Mahout classifiers inside Solr \n\nI like your suggestion at point 1. \nI can change the current hardcoded mapping mechanism using instead a simple mapping between UIMA extracted types/features and field names defined inside solrconfig.xml.\n\nA different option could be to develop a SolrCASConsumer component in UIMA (similar to Lucas [1], Lucene CAS Consumer) providing full control on how UIMA annotations and features can be mapped to Solr fields, but on UIMA side \n\nRegarding point 2 the jars are already under contrib/uima/lib so I can modify the sample solrconfig.xml adding the proper <lib> tag.\nThanks for your comments and suggestions.\n\n[1]\u00a0: https://svn.apache.org/repos/asf/uima/sandbox/trunk/Lucas "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12925068",
            "date": "2010-10-26T18:06:00+0000",
            "content": "I can change the current hardcoded mapping mechanism using instead a simple mapping between UIMA extracted types/features and field names defined inside solrconfig.xml\n\nTry to reuse the same syntax as the mapping in the ExtractingRequestHandler.\n\nA different option could be to develop a SolrCASConsumer component in UIMA (similar to Lucas [1], Lucene CAS Consumer) providing full control on how UIMA annotations and features can be mapped to Solr fields, but on UIMA side \n\nI've been struggling with these kinds of questions a lot lately.  That is, the marriage of two projects.  Where should the code go?  Setting up another ASF project is a pain in the amount of hoops to jump through.  Apache Labs doesn't cut it for a number of reasons.  Hosting on Github or Google Code is OK, but loses the ASF community aspect.  Sigh.\n\nRegarding point 2 the jars are already under contrib/uima/lib so I can modify the sample solrconfig.xml adding the proper <lib> tag.\n\nYep, exactly what I had in mind. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12925371",
            "date": "2010-10-27T13:52:12+0000",
            "content": "Try to reuse the same syntax as the mapping in the ExtractingRequestHandler.\n\nok, I added the <lib> tag and will commit a new patch when I'm finished with these changes\n\nI've been struggling with these kinds of questions a lot lately. That is, the marriage of two projects. Where should the code go? Setting up another ASF project is a pain in the amount of hoops to jump through. Apache Labs doesn't cut it for a number of reasons. Hosting on Github or Google Code is OK, but loses the ASF community aspect. Sigh.\n\nI agree with your point; I don't think it's easy to come with a final good and general answer for such situations.\n\nWhat comes to my mind to solve it generally is establishing a single wide-purpose ASF project which contains integrations between many different ASF projects, this could be good to prepare the base for two projects that want to \"marry\" but it could be too much general and maybe not easy to maintain from a community point of view (e.g.: should all the Lucene committers commit on \"integrations\" project too only because someone integrated it with UIMA?); another option could be to force two marrying projects to respect a standard (e.g. CMIS) so that developing a specialized \"connector\" wouldn't be needed anymore but I don't think it's always possible to do so since it could require a huge effort.\n\nIn this particular case, in my opinion, the code should go into the proper project depending on which \"pipeline\" is being changed/enhanced. Therefore since in this Solr-UIMA integration we're adding a step to the Solr indexing process via an UpdateRequestProcessor I think it should be part of Solr codebase whereas since in the SolrCASConsumer we'd be adding a (final) Consumer to the UIMA pipeline that should be part of UIMA codebase. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12928531",
            "date": "2010-11-05T07:53:17+0000",
            "content": "Try to reuse the same syntax as the mapping in the ExtractingRequestHandler.\n\nInside <uimaConfig> there are many possible ways that configuration can be defined.\nLet's say we want to map the feature 'text' of type 'ConceptFS' on the field 'concept', I thought 3 options, listed here\n\n1. exactly same syntax as ExtractingRequestHandler, though Solr-UIMA is not a RequestHandler but an UpdateRequestProcessor; could this create confusion?\n   <lst name=\"defaults\">\n      <str name=\"fmap.org.apache.uima.alchemy.ts.categorization.ConceptFS@text\">concept</str>\n    </lst>\n\n2. define the feature of a type to map over a field with one tag\n    <map field=\"concept\" feature=\"org.apache.uima.alchemy.ts.categorization.ConceptFS@text\"/>\n\n3. have  a more hierarchical and strict structure, though not so immediate to understand and maybe easier for UIMA experts\n    <type name=\"org.apache.uima.alchemy.ts.categorization.ConceptFS\">\n      <feature name=\"text\">concept</feature>\n    </type>\n\nWhat do you think?\nThanks for any advice,\nTommaso "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12930562",
            "date": "2010-11-10T09:57:43+0000",
            "content": "I think I found the following good compromise:\n\n\n   <type name=\"org.apache.uima.jcas.tcas.Annotation\">\n      <map feature=\"coveredText\" field=\"tag\"/>\n    </type>\n\nI've also made configurable (in solrconfig.xml) the fields to analyze and analysis engine path "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12931798",
            "date": "2010-11-14T09:37:20+0000",
            "content": "Huge Solr-UIMA refactoring, including injecting the following information from <uimaConfig> tag inside solrconfig:\n\n1. added dynamic field mapping with the following syntax:\n<fieldMapping>\n    <type name=\"org.apache.uima.jcas.tcas.Annotation\">\n      <map feature=\"coveredText\" field=\"tag\"/>\n    </type>\n    <type name=\"org.apache.uima.jcas.tcas.AnotherAnnotationType\">\n      <map feature=\"featureName\" field=\"anotherField\"/>\n    </type>\n</fieldMapping>\n\n2. added AnalysisEngine descriptor path (must be inside the classpath)\n<analysisEngine>/org/apache/uima/desc/OverridingParamsExtServicesAE.xml</analysisEngine>\n\n3. added fields' values to be analyzed, eventually merging their values to make UIMA run only once:\n <analyzeFields merge=\"false\">text,title</analyzeFields>\n\nRuntime parameters for defining overriding parameters for delegate AEs remains the same:\n<runtimeParameters>\n    <keyword_apikey>VALID_ALCHEMYAPI_KEY</keyword_apikey>\n    <concept_apikey>VALID_ALCHEMYAPI_KEY</concept_apikey>\n    <lang_apikey>VALID_ALCHEMYAPI_KEY</lang_apikey>\n    <cat_apikey>VALID_ALCHEMYAPI_KEY</cat_apikey>\n    <oc_licenseID>VALID_OPENCALAIS_KEY</oc_licenseID>\n</runtimeParameters>\n\nThese changes should make the use of such a module much easier and flexible.\nLooking forward for your feedback.\nTommaso "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12965175",
            "date": "2010-11-30T09:47:46+0000",
            "content": "Hi all, in case someone had a chance to try the latest patch please let me know your feedback. "
        },
        {
            "author": "Justinas Jaronis",
            "id": "comment-12968818",
            "date": "2010-12-07T16:52:12+0000",
            "content": "I tried Your latest patch however after compiling it doesn't include resources (./contrib/uima/src/resources/*) to the compiled project. So posting fails : \n\njava.lang.RuntimeException: org.apache.uima.resource.ResourceInitializationException\n    at org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.processAdd(UIMAUpdateRequestProcessor.java:81)\n    at org.apache.solr.handler.XMLLoader.processUpdate(XMLLoader.java:139)\n    at org.apache.solr.handler.XMLLoader.load(XMLLoader.java:69)\n    at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:54)\n    at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n    at org.apache.solr.core.SolrCore.execute(SolrCore.java:1359)\n    at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:337)\n    at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:240)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)\n    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)\n    at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n    at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n    at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\n    at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:450)\n    at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)\n    at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n    at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n    at org.mortbay.jetty.Server.handle(Server.java:326)\n    at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\n    at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:945)\n    at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756)\n    at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)\n    at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\n    at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\n    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\nCaused by: org.apache.uima.resource.ResourceInitializationException\n    at org.apache.solr.uima.processor.ae.OverridingParamsAEProvider.getAE(OverridingParamsAEProvider.java:85)\n    at org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.processText(UIMAUpdateRequestProcessor.java:115)\n    at org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.processAdd(UIMAUpdateRequestProcessor.java:68)\n    ... 24 more\nCaused by: java.lang.NullPointerException\n    at org.apache.uima.util.XMLInputSource.<init>(XMLInputSource.java:114)\n    at org.apache.solr.uima.processor.ae.OverridingParamsAEProvider.getAE(OverridingParamsAEProvider.java:64)\n    ... 26 more\n\nwhen OverridingParamsAEProvider tries to read  /org/apache/uima/desc/OverridingParamsExtServicesAE.xml . Where this file (and its fellow XMLs) should be located?\n\n\nThanks for the effort. Great project! "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12969076",
            "date": "2010-12-07T23:33:29+0000",
            "content": "Hi Justinas,\nyou should have each needed XML under solr/contrib/uima/src/main/resources/org/apache/uima/desc/.\nMaybe I need to fix the ant build.xml.\nI'll inspect it, thanks for your feedback  "
        },
        {
            "author": "Justinas Jaronis",
            "id": "comment-12969271",
            "date": "2010-12-08T10:50:33+0000",
            "content": "The file is present in source this place after Your patch, but it doesn't appear in any JARs / WARs (or maybe it doesn't have to appear? ). And I don't find any location for manual injection.  Tried to copy whole directory structure to example/, but no luck. Thank You for the fast response. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12969325",
            "date": "2010-12-08T14:26:45+0000",
            "content": "Thanks Justinas, I've found and fixed the problem, a new patch will come shortly. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12969387",
            "date": "2010-12-08T17:29:51+0000",
            "content": "Here is a new patch with updated contrib/uima/build.xml to include resources in the generated package.\nAlso there is small README inside to guide configuration. "
        },
        {
            "author": "Justinas Jaronis",
            "id": "comment-12969415",
            "date": "2010-12-08T18:39:30+0000",
            "content": "Woohoo! Works like a charm. One slight note, after trying to index some documents I added  multiValued=\"true\"  to the \"entity*\" field in schema.xml (I believe UIMA handles entities as array)\nThanks again. Very very much  Hope i'll also bring some resources into this project. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12969425",
            "date": "2010-12-08T19:02:12+0000",
            "content": "I'm glad you appreciated! And thanks for the hint  "
        },
        {
            "author": "kamil",
            "id": "comment-12972710",
            "date": "2010-12-18T00:32:59+0000",
            "content": "Hi Tommaso,\n\nI'm really curious to take a look at your work, unfortunately it doesn't compile after applying the patch:\n\nBUILD FAILED\n<your Solr trunk checkout dir>/trunk/solr/contrib/uima/build.xml:65: The following error occurred while executing this line:\n<your Solr trunk checkout dir>/trunk/solr/common-build.xml:267: /home/kamil/dev/solr/solr-old/trunk/solr/contrib/uima/lib does not exist.\n\nObviously it worked out for Justinas so I am wondering what is wrong. Any idea?\n\nGreat project, by the way!!! "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12974114",
            "date": "2010-12-22T08:55:25+0000",
            "content": "Hi Kamil,\ncan you please take a look at your trunk/solr/contrib/uima does the lib folder exist? Can you find the jars in there?\nLet me know and thanks for your feedback "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12974630",
            "date": "2010-12-23T14:34:19+0000",
            "content": "Maybe a dedicated page on the wiki could help on installing, testing, extending this patch.\nAny opinions? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12974809",
            "date": "2010-12-24T01:07:02+0000",
            "content": "+1. There is a lot of material behind UIMA, and a wiki page describing it and some sample use cases would go a long way. "
        },
        {
            "author": "kamil",
            "id": "comment-12975165",
            "date": "2010-12-26T21:04:29+0000",
            "content": "Hi Tomasso,\n\nthe trunk/solr/contrib/uima folder doesn't exist so I can't find any jars.\nBasically I follow the steps mentioned here: http://wiki.apache.org/solr/HowToContribute , i.e.\n\n\tcheckout trunk\n\tapply patch (after that trunk/solr/contrib/uima exists)\n\tant build\n\n\n\nThe build fails with above mentioned error. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12975185",
            "date": "2010-12-27T02:10:46+0000",
            "content": "The directory trunk/solr/contrib/uima does not exist because either the directory is not in the patch. The patch should include an empty \"marker\" file in trunk/solr/contrib/uima/lib so that the directory gets made.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12976809",
            "date": "2011-01-03T16:44:23+0000",
            "content": "patch synced to trunk.\n\ni also adjusted some minor things: doesn't rely on CWD for running tests, added an assume in tests in case you have no internet connection, with a set timeout, removed troublesome xml includes as this is dependent on CWD, etc.\n\nI reviewed the code, I have no problem committing this to contrib so future iterations can be from svn. any objections? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12976862",
            "date": "2011-01-03T18:34:51+0000",
            "content": "I have no problem committing this to contrib so future iterations can be from svn. any objections?\n\n+1 - getting into trunk will likely expand usage and feedback, and get things rolling much faster. Bar is much lower for Solr contrib as well.\n\n\nI've only started looking at the patch, but a few notes I jotted down:\n\nStringBuffer usage in UpdateRequestProcessor - should be StringBuilder right?\n\nThe below is a little odd, no (critical code I know  )?\n\n/* execute the AE on the given JCas */\nprivate void executeAE(AnalysisEngine ae, JCas jcas) throws AnalysisEngineProcessException \n{\n  ae.getLogger().log(Level.INFO, new StringBuffer(\"Analazying text\").toString());\n  ae.process(jcas);\n  ae.getLogger().log(Level.INFO, new StringBuffer(\"Text processing completed\").toString());\n}\n\n\nAEProviderFactory should be thread safe?? At a min, you have to consider multicore ... consider that you could be sharing AEProvider across threads because of this as well (static cache in AEProviderFactory). Perhaps the cache should not be static?\n\n\nDon't want to at least log this?\n\n}\n catch (AnalysisEngineProcessException e) {\n     // do nothing\n}\n "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12977177",
            "date": "2011-01-04T09:04:02+0000",
            "content": "StringBuffer usage in UpdateRequestProcessor - should be StringBuilder right?\n\nyes, right.\n\nprivate void executeAE(AnalysisEngine ae, JCas jcas) throws AnalysisEngineProcessException { ae.getLogger().log(Level.INFO, new StringBuffer(\"Analazying text\").toString()); ae.process(jcas); ae.getLogger().log(Level.INFO, new StringBuffer(\"Text processing completed\").toString()); }\n\nI wanted to logically isolate everything regarding actual processing of text, but I agree that this piece of code would look better inside the calling method ( processText(String) ).\n\nAEProviderFactory should be thread safe?? At a min, you have to consider multicore ... consider that you could be sharing AEProvider across threads because of this as well (static cache in AEProviderFactory). Perhaps the cache should not be static?\n\nThanks Mark for this, I agree the cache shouldn't be static especially in cases where each core has AEs with same classpaths but different runtime parameters.\nFor what concerns OverridingParamsAEProvider (the only AEProvider impl available at the moment) being processed by different threads we can make the getAE() method synchronized (or, perhaps, making cachedAE field volatile, but need to check better).\n\nDon't want to at least log this? } catch (AnalysisEngineProcessException e) { // do nothing }\n\nI wanted the UIMA enrichment pipeline to be error safe but I agree it'd be reasonable to log the error in this case (even if I don't like logging exceptions in general). "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12977226",
            "date": "2011-01-04T11:00:28+0000",
            "content": "Just forgot to say: I'll create a new patch from the above considerations  "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12979144",
            "date": "2011-01-08T16:07:30+0000",
            "content": "Changes are:\n\n\tDrop StringBuffer for StringBuilder in UIMAUpdateRequestProcessor.\n-\u00a0Make the getAE method in OverridingParamAEProvider synchronized to support concurrent requests to the provider.\n-\u00a0Make the getAEProvider method in AEProviderFactory synchronized and make the cache \"core aware\", each core has now an AEProvider for each analysis engine's path.\n-\u00a0The UIMAUpdateRequestProcessor constructor accepts SolrCore as a parameter instead of a SolrConfig object.\n\n\n\nI tested it with multiple cores and concurrent updates for each core. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12979264",
            "date": "2011-01-09T04:20:42+0000",
            "content": "Don't want to at least log this? } catch (AnalysisEngineProcessException e) { // do nothing }\n\nI wanted the UIMA enrichment pipeline to be error safe but I agree it'd be reasonable to log the error in this case (even if I don't like logging exceptions in general).\n\nPlease do not hide errors in any way. Nobody reads logs. If it fails in production, I want to know immediately and fix it. Please just throw all exceptions up the stack. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12980010",
            "date": "2011-01-11T09:06:18+0000",
            "content": "Please do not hide errors in any way. Nobody reads logs. If it fails in production, I want to know immediately and fix it. Please just throw all exceptions up the stack.\n\nI think your point is a good one Lance, when I started working on this patch I wanted to avoid breaking the indexing pipeline (as this was an \"add-on\") but now that it's more stable I agree that any exception should be thrown. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12980013",
            "date": "2011-01-11T09:15:06+0000",
            "content": "Each UIMAException (wrapping both ResourceInitializationException and AnalysisEngineProcessException) is now thrown, embedded in a RuntimeException (the processAdd method signature has to be aligned with the super class one so not declaring the UIMAException in the UIMAUpdateRequestProcessor method signature). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12985320",
            "date": "2011-01-23T13:35:45+0000",
            "content": "Tommaso, thanks for resolving all the items brought up in comments. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12985489",
            "date": "2011-01-24T02:22:05+0000",
            "content": "Committed revision 1062604 (trunk), 1062606 (branch_3x)\n\nThanks Tommaso! "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-12985537",
            "date": "2011-01-24T06:54:26+0000",
            "content": "Thanks Robert for taking care  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013130",
            "date": "2011-03-30T15:45:39+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}