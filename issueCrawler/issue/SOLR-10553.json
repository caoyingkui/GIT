{
    "id": "SOLR-10553",
    "title": "Caffeine causes SIGSEGV in Solr tests",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "While running the Solr tests, the JVM often crushes with SIGSEGV. The reason is Caffeine's usage of Unsafe. Please open an issue on this lib or remove this library.\n\nI looked at Caffeine's usage of Unsafe: IT IS TOTALLY USELESS!\n\nSee this log: https://jenkins.thetaphi.de/job/Lucene-Solr-6.x-Linux/3347/artifact/solr/build/solr-core/test/J2/hs_err_pid17108.log\n\n\nCurrent thread (0xbf7af000):  JavaThread \"Thread-4\" [_thread_in_Java, id=17265, stack(0xc342e000,0xc347f000)]\n\nStack: [0xc342e000,0xc347f000],  sp=0xc347dba0,  free space=318k\nNative frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)\nJ 5565% c1 com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueue.poll()Ljava/lang/Object; (108 bytes) @ 0xe7ae7848 [0xe7ae6e20+0x00000a28]\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.drainWriteBuffer()V+21\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.maintenance(Ljava/lang/Runnable;)V+10\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.performCleanUp(Ljava/lang/Runnable;)V+11\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache$PerformCleanupTask.run()V+5\nj  org.apache.solr.store.blockcache.BlockCache$$Lambda$278.execute(Ljava/lang/Runnable;)V+1\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.scheduleDrainBuffers()V+54\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.scheduleAfterWrite()V+44\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.afterWrite(Lcom/github/benmanes/caffeine/cache/Node;Ljava/lang/Runnable;J)V+47\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.put(Ljava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;+209\nj  com.github.benmanes.caffeine.cache.BoundedLocalCache.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+5\nj  com.github.benmanes.caffeine.cache.LocalManualCache.put(Ljava/lang/Object;Ljava/lang/Object;)V+8\nj  org.apache.solr.store.blockcache.BlockCache.store(Lorg/apache/solr/store/blockcache/BlockCacheKey;I[BII)Z+176\nj  org.apache.solr.store.blockcache.BlockCacheTest$1.test()V+331\nj  org.apache.solr.store.blockcache.BlockCacheTest$1.test(I)V+8\nj  org.apache.solr.store.blockcache.BlockCacheTest$1.run()V+47\nv  ~StubRoutines::call_stub\nV  [libjvm.so+0x65f759]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x319\nV  [libjvm.so+0x910889]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x19\nV  [libjvm.so+0x65e093]  JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*)+0x163\nV  [libjvm.so+0x6ee089]  thread_entry(JavaThread*, Thread*)+0x89\nV  [libjvm.so+0xa747d4]  JavaThread::thread_main_inner()+0xf4\nV  [libjvm.so+0x912e5c]  thread_native_entry(Thread*)+0x10c\nC  [libpthread.so.0+0x6f72]  start_thread+0xd2\nC  [libc.so.6+0xee2ae]  clone+0x5e\n\n\nsiginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x8d0ffbb0\n\nRegister to memory mapping:\n\nEAX=0x00000040 is an unknown value\nEBX=0x00000000 is pointing into the stack for thread: 0xbf7ddc00\nECX=0x00000000 is pointing into the stack for thread: 0xbf7ddc00\nEDX=0xc9a00918 is pointing into object: 0xc9a004f8\n\n[error occurred during error reporting (printing register info), id 0xb]\n\nRegisters:\nEAX=0x00000040, EBX=0x00000000, ECX=0x00000000, EDX=0xc9a00918\nESP=0xc347dba0, EBP=0xc347dcf0, ESI=0xc9c81ee8, EDI=0xc347dcc8\nEIP=0xe7ae7848, EFLAGS=0x00010246, CR2=0x000000008d0ffbb0\n\nTop of Stack: (sp=0xc347dba0)\n0xc347dba0:   00000038 bebd16c0 c347dbf8 f702a6f9\n0xc347dbb0:   e6c031c0 00000028 00000004 c347dc24 \n\nInstructions: (pc=0xe7ae7848)\n0xe7ae7828:   f0 58 0f be b6 e4 01 00 00 83 fe 00 8b bc 24 f8\n0xe7ae7838:   00 00 00 8b b4 24 98 00 00 00 0f 85 cc 06 00 00\n0xe7ae7848:   89 0c 3e 8d 34 3e 8b fe 33 f9 c1 ef 14 83 ff 00\n0xe7ae7858:   0f 85 cf 06 00 00 f0 83 44 24 c0 00 8b 8c 24 f4 \n\n\n\nThe reson for this crash is wrong integer calculations while calculating offsets.\n\nI have seen several Unsafe-related crashes the last weeks. All coming from Caffeine. So please, please, please: Remove that lib or ask them to remove Unsafe!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-06T17:40:16+0000",
            "content": "Ben Manes - I think you are the right person to ping on this. I saw you were pretty active w/ other Caffeine related items.  ",
            "author": "Kevin Risden",
            "id": "comment-16115867"
        },
        {
            "date": "2017-08-06T17:49:27+0000",
            "content": "In this case Caffeine is uses an embedded queue from JCTools, so Nitsan Wakart may have some insights. Both libraries are eagerly awaiting Java 9 to replace their usages. This is the first report that I've seen on invalid offsets, so perhaps details on the JVM & hardware would be helpful since I do not know how to reproduce. ",
            "author": "Ben Manes",
            "id": "comment-16115873"
        }
    ]
}