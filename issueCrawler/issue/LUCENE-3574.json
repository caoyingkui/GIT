{
    "id": "LUCENE-3574",
    "title": "Add some more constants for newer Java versions to Constants.class, remove outdated ones.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "New Feature",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Preparation for LUCENE-3235:\nThis adds constants to quickly detect Java6 and Java7 to Constants.java. It also deprecated and removes the outdated historical Java versions.",
    "attachments": {
        "LUCENE-3574-3x.patch": "https://issues.apache.org/jira/secure/attachment/12503625/LUCENE-3574-3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-14T15:01:07+0000",
            "content": "Patch for Lucene 3.x\n\nwill remove deprecations in trunk and make JRE_IS_MINIMUM_JRE6 = true (+ deprecate it there) ",
            "author": "Uwe Schindler",
            "id": "comment-13149663"
        },
        {
            "date": "2011-11-14T15:03:50+0000",
            "content": "Committed 3.x revision: 1201739 ",
            "author": "Uwe Schindler",
            "id": "comment-13149665"
        },
        {
            "date": "2011-11-14T15:09:18+0000",
            "content": "Committed trunk revision: 1201741 ",
            "author": "Uwe Schindler",
            "id": "comment-13149666"
        },
        {
            "date": "2011-11-14T15:10:31+0000",
            "content": "One typo: \"nsme\" -> \"name\"\n\nAlso, not sure if it's worth it, but perhaps instead of constants like MIMINUM_JAVA_X we can have a class JavaVersion that follows the same logic we have in Version and can compare itself to other JavaVersions? Then we can have constants for JAVA_6 = new JavaVersion(6) and similar for JAVA_7, and another CURRENT_JAVA_VER that is initialized with the code you wrote. And you can then compare CURRENT to JAVA_6/7?\n\nJust an idea. ",
            "author": "Shai Erera",
            "id": "comment-13149667"
        },
        {
            "date": "2011-11-14T15:15:26+0000",
            "content": "\nAlso, not sure if it's worth it, but perhaps instead of constants like MIMINUM_JAVA_X we can have a class JavaVersion that follows the same logic we have in Version\n\nI think the problem here would be that say we release 3.5 in a week.\n\nThen two years later Java 8 comes out... we can't know today how to detect it. So all we can do is say that we are 'at least' java 7 because we have XYZ. ",
            "author": "Robert Muir",
            "id": "comment-13149671"
        },
        {
            "date": "2011-11-14T15:19:26+0000",
            "content": "One typo: \"nsme\" -> \"name\"\n\nnsme -> NoSuchMethodException ",
            "author": "Uwe Schindler",
            "id": "comment-13149677"
        },
        {
            "date": "2011-11-14T15:21:08+0000",
            "content": "Exactly (I think that's what I meant) \u2013 we detect the Java version as best we can and store it in a constant JAVA_VERSION. It can be compared to JAVA_6/7 thru an atLeast() API, like JAVA_VERSION.atLeast(JAVA_7).\n\nThe code in 3.5 will only know to detect up to Java 7, while the code in 5.2 will know to detect Java 8.\n\nWouldn't that work? ",
            "author": "Shai Erera",
            "id": "comment-13149679"
        },
        {
            "date": "2011-11-14T15:22:38+0000",
            "content": "nsme -> NoSuchMethodException\n\nah, ok . ",
            "author": "Shai Erera",
            "id": "comment-13149682"
        },
        {
            "date": "2011-11-14T15:26:56+0000",
            "content": "\nThe code in 3.5 will only know to detect up to Java 7, while the code in 5.2 will know to detect Java 8.\n\nWouldn't that work?\n\nI would prefer not to, because it opens up the opportunity to wrongly record this somewhere (e.g. diagnostics map)\nor even just System.out.println or checkindex or something... it would be misleading. ",
            "author": "Robert Muir",
            "id": "comment-13149685"
        },
        {
            "date": "2011-11-14T15:47:16+0000",
            "content": "One example where it might be bad: If it's an enum, you can also do if (JAVA_VERSION==JAVA_7, so the enum constants are not named like the fact they represent.\n\nI think thats all too much logic for something simple. For one major version we will have mostly 2 or 3 constants. In trunk we currently only have Java7 and a deprecated one which is always true. New constants are only added on request, when we want to test for features/bugs. ",
            "author": "Uwe Schindler",
            "id": "comment-13149697"
        },
        {
            "date": "2011-11-14T16:42:21+0000",
            "content": "Ok I'm convinced . Was just a thought ",
            "author": "Shai Erera",
            "id": "comment-13149732"
        },
        {
            "date": "2011-11-27T12:29:22+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157738"
        }
    ]
}