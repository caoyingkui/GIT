{
    "id": "LUCENE-1570",
    "title": "QueryParser.setAllowLeadingWildcard could provide finer granularity",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.4.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "It's great that Lucene now allows support for leading wildcards to be turned on. However, leading wildcard searches are more expensive, so it would be useful to be able to turn it on only for certain search fields. I'm specifically thinking of wiki searches where it may be too expensive to allow leading wildcards in the 'content:' field, but it would still be very useful to be able to selectively turn on support for 'path:' and perhaps other fields such as 'title:'. Would this be possible?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-03-24T00:04:50+0000",
            "content": "This is pretty easy to implement by overriding QueryParser.getWildcardQuery(). ",
            "author": "Yonik Seeley",
            "id": "comment-12688482"
        },
        {
            "date": "2009-03-24T00:08:18+0000",
            "content": "I've wanted this in the past. Its certainly possible, but I am not sure how easy it would be to do with the current queryparser (been a long time since I have been there). There appears to be a new parser on the horizon though, and it sounds as if it will allow these types of additions much more elegantly (the current queryparser does not use a syntax tree representation, and its kind of hairy to build on).\n\nIf I remember right, the current QueryParser simply attaches semantic actions to grammar production rules - difficult to read, edit, and maintain - has not been super friendly for building upon.\n\nAlso if I remember right, I think this new parser will use abstract syntax trees, which lets you split up syntax and semantics, and also keep things a bit more modular - you can do things like have pluggable syntax reader that feeds pluggable query output writer. At least for the basics - it sounds like these guys have made something pretty cool, but I have not seen the code yet and have only a brief memory of its description.\n\nPoint being, it can be done, I think its useful, but it might make sense to see how much easier it can be done with this new parser. ",
            "author": "Mark Miller",
            "id": "comment-12688486"
        },
        {
            "date": "2009-03-24T00:14:11+0000",
            "content": "Yonik spit out a bit of a better answer while I typed - right, you do have access to the field in getWildcardQuery, and the leading check happens there, so you can override it. My brain always runs towards building the support in, but in this case it may be clear to leave it out anyway. Its somewhat of a niche concern. Just had the new QueryParser on my mind. ",
            "author": "Mark Miller",
            "id": "comment-12688494"
        },
        {
            "date": "2009-04-10T19:23:16+0000",
            "content": "Yoniks solution is the right call for this rather than any changes I think.\n\nAs I hoped, the new QueryParser just contributed will be able to handle this type of thing very elegantly  ",
            "author": "Mark Miller",
            "id": "comment-12697938"
        },
        {
            "date": "2009-04-11T01:19:59+0000",
            "content": "Okay. Thanks for your work on Deki guys. Looking forward to this new QueryParser. ",
            "author": "Jonathan Watt",
            "id": "comment-12698037"
        },
        {
            "date": "2009-04-11T16:10:26+0000",
            "content": "Err. s/Deki/Lucene/  ",
            "author": "Jonathan Watt",
            "id": "comment-12698103"
        }
    ]
}