{
    "id": "LUCENE-4948",
    "title": "Stink bug in PostingsHighlighter",
    "details": {
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "4.3.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This test fail reproduces on IBM J9:\n\n\nNOTE: reproduce with: ant test  -Dtestcase=TestPostingsHighlighter -Dtests.method=testCambridgeMA -Dtests.seed=2A9A93DAC39E0938 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=es_HN -Dtests.timezone=America/Yellowknife -Dtests.file.encoding=UTF-8\n\n\n\n\n\nStack Trace:\njava.lang.ArrayIndexOutOfBoundsException: Array index out of range: 37\n        at __randomizedtesting.SeedInfo.seed([2A9A93DAC39E0938:AB8FF071AD305139]:0)\n        at org.apache.lucene.search.postingshighlight.Passage.addMatch(Passage.java:53)\n        at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightDoc(PostingsHighlighter.java:547)\n        at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightField(PostingsHighlighter.java:425)\n        at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightFields(PostingsHighlighter.java:364)\n        at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightFields(PostingsHighlighter.java:268)\n        at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlight(PostingsHighlighter.java:198)\n        at org.apache.lucene.search.postingshighlight.TestPostingsHighlighter.testCambridgeMA(TestPostingsHighlighter.java:373)\n\n\n\nI think it's because J9 grows arrays in a different progression than other JVMs ... we should fix PostingsHighlighter to forcefully grow the arrays to the same length instead of this:\n\n\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      BytesRef newMatchTerms[] = new BytesRef[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }",
    "attachments": {
        "LUCENE-4948.patch": "https://issues.apache.org/jira/secure/attachment/12579862/LUCENE-4948.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-22T17:22:31+0000",
            "content": "Thanks for looking into this Mike! I agree the current code is wrong (stinky) ",
            "author": "Robert Muir",
            "id": "comment-13638186"
        },
        {
            "date": "2013-04-22T17:25:06+0000",
            "content": "This is easy to explain: J9 does not know compressed oops. On Oracle 64 bit JVMs the pointers are compressed, so a reference is 32 bits, which is identical to the size of ints. So they grow identical. In IBM J9 (64 bit, it only fails with 64 bits!) a reference is 8 bytes. So the reference array grows different than the int[] array.\n\nThis bug also affect useres with Oracle JDK, if they have > 32 Gig of heap...\n\nWhenever we use ArrayUtil.grow() we have to take care that the sizes may differ. Please don't change the growing pattern, the code should (when it requires that several arrays are sized in parallel) calculate the new size before and use a suitable type to do that.\n\nA good test would be: We make the growing pattern in ArrayUtil allow \"test mode\" maybe and make the factor random? Just an idea. Maybe we can do this before running tests using bytecode modification. ",
            "author": "Uwe Schindler",
            "id": "comment-13638191"
        },
        {
            "date": "2013-04-22T17:47:16+0000",
            "content": "Another idea: I can configure Policeman Jenkins to sometimes run test without compressed oops. Thats the quickest fix. Then J9 is not the only JVM that tests those bugs. And its good to have another random JVM param. ",
            "author": "Uwe Schindler",
            "id": "comment-13638215"
        },
        {
            "date": "2013-04-22T17:55:20+0000",
            "content": "FYI: The test fails always on Oracle, too, if you run your 64 bit Oracle JVM with:\n\n\n$ ant test -Dargs=\"-XX:-UseCompressedOops\" -Dtestcase=TestPostingsHighlighter\n[...]\n[junit4:junit4] Tests with failures:\n[junit4:junit4]   - org.apache.lucene.search.postingshighlight.TestPostingsHighlighter.testCambridgeMA\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13638226"
        },
        {
            "date": "2013-04-22T18:00:45+0000",
            "content": "+1 for committing the patch. It should pass with above ant-line on Oracle, if you don't have a IBM J9 installed. ",
            "author": "Uwe Schindler",
            "id": "comment-13638233"
        },
        {
            "date": "2013-04-22T18:02:31+0000",
            "content": "there was still a stinkbug in the patch, i wanted to make it clear all are the same size  ",
            "author": "Robert Muir",
            "id": "comment-13638236"
        },
        {
            "date": "2013-04-22T18:09:58+0000",
            "content": "[trunk commit] rmuir\nhttp://svn.apache.org/viewvc?view=revision&revision=1470642\n\nLUCENE-4948: Fix stinkbug in PostingsHighlighter (wrong array sizing on some jvms) ",
            "author": "Commit Tag Bot",
            "id": "comment-13638245"
        },
        {
            "date": "2013-04-22T18:11:37+0000",
            "content": "[branch_4x commit] rmuir\nhttp://svn.apache.org/viewvc?view=revision&revision=1470643\n\nLUCENE-4948: Fix stinkbug in PostingsHighlighter (wrong array sizing on some jvms) ",
            "author": "Commit Tag Bot",
            "id": "comment-13638249"
        },
        {
            "date": "2013-04-22T18:12:02+0000",
            "content": "Thanks guys.\n\n\nAnother idea: I can configure Policeman Jenkins to sometimes run test without compressed oops. Thats the quickest fix. Then J9 is not the only JVM that tests those bugs. And its good to have another random JVM param.\n\n+1 ",
            "author": "Robert Muir",
            "id": "comment-13638250"
        },
        {
            "date": "2013-04-22T18:19:25+0000",
            "content": "I changed the Policeman Jenkins configs to randomly also select (un)compressed oops on 64 bit JVMs. For 32 bit JVMs it only chooses -client and -server, so this is now similar. ",
            "author": "Uwe Schindler",
            "id": "comment-13638271"
        },
        {
            "date": "2013-05-10T22:51:52+0000",
            "content": "If there are no objections, I'd like to backport this to 4.3.1. ",
            "author": "Steve Rowe",
            "id": "comment-13654977"
        },
        {
            "date": "2013-05-16T09:02:14+0000",
            "content": "Backported to 4.3.1 r1483258 ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13659367"
        },
        {
            "date": "2013-06-18T16:55:13+0000",
            "content": "Bulk closing after 4.3.1 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13686945"
        }
    ]
}