{
    "id": "SOLR-9442",
    "title": "Add json.nl=arrnvp (array of NamedValuePair) style in JSONResponseWriter",
    "details": {
        "components": [
            "Response Writers"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "The JSONResponseWriter class currently supports several styles of NamedList output format, documented on the wiki at http://wiki.apache.org/solr/SolJSON and in the code at https://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java#L71-L76.\n\nFor example the 'arrmap' style:\n\n\nNamedList(\"a\"=1,\"b\"=2,null=3) => [{\"a\":1},{\"b\":2},3]\nNamedList(\"a\"=1,\"bar\u201d=\u201cfoo\",null=3.4f) => [{\"a\":1},{\"bar\u201d:\u201dfoo\"},{3.4}]\n\n\nThis patch creates a new style \u2018arrnvp\u2019 which is an array of named value pairs. For example:\n\n\nNamedList(\"a\"=1,\"b\"=2,null=3) => [{\"name\":\"a\",\"int\":1},{\"name\":\"b\",\"int\":2},{\"int\":3}]\nNamedList(\"a\"=1,\"bar\u201d=\u201cfoo\",null=3.4f) => [{\"name\":\"a\",\"int\":1},{\"name\":\"b\",\"str\":\"foo\"},{\"float\":3.4}]\n\n\nThis style maintains the type information of the values, similar to the xml format:\n\n\n<lst name=\u201csomeField\u201d>\n      <int name=\u201ca\u201d>1</int>\n      <str name=\u201cbar\u201d>foo</str>\n      <float>3.4</float>\n</lst>",
    "attachments": {
        "SOLR-9442.patch": "https://issues.apache.org/jira/secure/attachment/12825657/SOLR-9442.patch",
        "SOLR-9442-arrntv.patch": "https://issues.apache.org/jira/secure/attachment/12838997/SOLR-9442-arrntv.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-08-31T14:35:16+0000",
            "author": "Christine Poerschke",
            "content": "+1 to the idea and the partial patch so far. ",
            "id": "comment-15452395"
        },
        {
            "date": "2016-09-28T21:33:42+0000",
            "author": "Jonny Marks",
            "content": "Attaching full patch ",
            "id": "comment-15530944"
        },
        {
            "date": "2016-10-26T11:02:11+0000",
            "author": "Christine Poerschke",
            "content": "Hi Jonny, thanks for the full patch.\n\nPlease find attached a revised version of your patch with the following changes:\n\n\treduced duplication in new code: factored out ifNeededWriteTypeAsKey method\n\tcode clarity: couple of renames, extra comments, style tweaks\n\textended existing test: added JSONWriter.JSON_NL_ARROFNVP to testConstantsUnchanged\n\tstrengthened new test: removal of any of the 'methodsExpectedNotOverriden' methods will now cause a test failure\n\tadded new test: testArrnvpWriterLacksMethodsOfItsOwn\n\n\n\nLet me know what you think. If there are no further suggestions, comments, questions, etc. then i would proceed with committing early next week. ",
            "id": "comment-15608141"
        },
        {
            "date": "2016-10-31T11:02:01+0000",
            "author": "Jonny Marks",
            "content": "Thanks Christine, the changes are fine. ",
            "id": "comment-15621874"
        },
        {
            "date": "2016-10-31T12:14:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 87c6ec4cb0a91e1952e4dff31d6e1f92ed0806bf in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=87c6ec4 ]\n\nSOLR-9442: Adds Array of NamedValuePair (json.nl=arrnvp) style to JSONResponseWriter. (Jonny Marks, Christine Poerschke) ",
            "id": "comment-15621990"
        },
        {
            "date": "2016-10-31T12:31:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9b424454e381c4fb44ec5702a7351bac99c01ffe in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9b42445 ]\n\nSOLR-9442: Adds Array of NamedValuePair (json.nl=arrnvp) style to JSONResponseWriter. (Jonny Marks, Christine Poerschke) ",
            "id": "comment-15622025"
        },
        {
            "date": "2016-11-01T10:15:07+0000",
            "author": "Christine Poerschke",
            "content": "Patch committed to master and cherry-picked to branch_6x. Created SOLR-9709 sub-task for wiki update. ",
            "id": "comment-15625012"
        },
        {
            "date": "2016-11-14T19:07:35+0000",
            "author": "Hoss Man",
            "content": "I know i'm a little late to the party, but this new format seems overly cumbersome to parse \u2013 for a given \"NamedValuePair\" the only constant is that if the JSON \"name\" attribute exists, then it's value will be a String telling you the name of this Pair \u2013 if it does not exist, then you know this pair has no name. But in order to know either the type or the value of the Pair you have to either know beforehand what to expect, or iterate \u2013 either over the possibly type values (\"int\",\"str\",etc...), or over the list of attribute keys in the Pair (ignoring \"name\").\n\nIt seems like a better structure (that would still maintain the original goal of parity with the amount of data returned in the XML format) would be..\n\n\nNamedList(\"a\"=1,\"b\"=2,null=3) \n  => [{\"name\":\"a\",   \"type\":\"int\",    \"value\":1},\n      {\"name\":\"b\",   \"type\":\"int\",    \"value\":2},\n      {\"name\":null,  \"type\":\"int\",    \"value\":3}]\n\nNamedList(\"a\"=1,\"bar\u201d=\u201cfoo\",null=3.4f)\n  => [{\"name\":\"a\",   \"type\":\"int\",    \"value\":1},\n      {\"name\":\"b\",   \"type\":\"str\",    \"value\":\"foo\"},\n      {\"name\":null,  \"type\":\"float\",  \"value\":3.4}]\n\nNamedList(\"bar\u201d=null,null=true)\n  => [{\"name\":\"bar\", \"type\":\"null\",   \"value\":null},\n      {\"name\":null,  \"type\":\"bool\",   \"value\":true}]\n\n\n\n...the key improvement (in my mind) being:  The set of JSON attributes is fixed for all Pairs: \"name\", \"type\", and \"value\".  Clients can always look for those 3 attributes to learn everything they can learn from the equivalent XML output.\n\nChristine Poerschke & Jonny Marks - what do you think? better then what we have now? ",
            "id": "comment-15664719"
        },
        {
            "date": "2016-11-15T16:26:05+0000",
            "author": "Christine Poerschke",
            "content": "Hi Hoss Man, thanks for your input. Jonny and I discussed offline and here's what we think.\n\n... you have to either know beforehand what to expect, or iterate ...\n\nYes, with the json.nl=arrnvp {\"name\":\"a\",\"int\":1} representation it helps to know beforehand what to expect. Our (quite possibly unusual) use case is actually to parse-and-convert the JSON response into an object validated by a schema.\n\nWe agree that a {\"name\":\"a\", \"type\":\"int\", \"value\":1} representation would help avoid iterating since clients can rely on the existence of the exact 3 attributes.\n\nHow about supporting both json.nl=arrnvp (Named Value Pair) and json.nl=arrntv (Name Type Value) representations? Attached SOLR-9442-arrntv.patch shows how both can easily share most code. What do you think? ",
            "id": "comment-15667571"
        },
        {
            "date": "2016-11-15T18:28:53+0000",
            "author": "Hoss Man",
            "content": "What do you think?\n\nWell, I guess don't really see what usecases the \"arrnvp\" format (already committed) serves that aren't equally/better served with the \"arrntv\" format ... if you find it more useful then what I suggested then i guess it has a purpose as well ... i'm just not seeing it.\n\nI suppose my main concern with having both is making sure the tests/docs make it very clear how things behave with either the name or the value (or both) are null.\n\nEven after reading the original diff for this issue it's not clear to me what JSON attribute(s) will exist for the equivalents of things like <null name=\"bar\"/> or <null/> since there is no \"type\" to use as a JSON attribute name ... or does that just result in something like...\n\n\nNamedList(\"bar\u201d=null,null=true,null=null)\n  => [{\"name\":\"bar\"},\n      {\"bool\":true},\n      {}]\n\n\n\n...which seems really weird) ",
            "id": "comment-15667886"
        },
        {
            "date": "2016-11-21T15:46:50+0000",
            "author": "Christine Poerschke",
            "content": "Well, I guess don't really see what usecases the \"arrnvp\" format (already committed) serves that aren't equally/better served with the \"arrntv\" format ... if you find it more useful then what I suggested then i guess it has a purpose as well ... i'm just not seeing it.\n\nThe difference, as I see it, between \"arrnvp\" and \"arrntv\" format is very subtle, let's see if perhaps an example helps illustrate it.\n\nBoth \"arrnvp\" result\n\nNamedList(foo=42) => [ { \"name\":\"foo\", \"int\":42 } ]\n\n\nand \"arrntv\" result\n\nNamedList(foo=42) => [ { \"name\":\"foo\", \"type\":\"int\", \"value\":42 } ]\n\n\ncontain information equivalent to\n\n<lst name=\"someField\">\n  <int name=\u201cfoo\u201d>42</int>\n</lst>\n\n\nxml format.\n\nIn the \"know beforehand what to expect\" use case, let's say the expectation is \"int\" type and hence the client does\n\n  myName = asString(someField, \"name\")\n  myInt = asInt(someField, \"int\")\n\n\nfor the \"arrnvp\" format.\n\nFor the \"arrntv\" format\n\n  # option 1\n  myName = asString(someField, \"name\")\n  myInt = asInt(someField, \"value\")\n\n\nmeans that the \"type\" attribute is totally ignored or alternatively\n\n  # option 2\n  myName = asString(someField, \"name\")\n  assert \"int\" == asString(someField, \"type\")  \n  myInt = asInt(someField, \"value\")\n\n\nmeans \"int-ness\" checks happens twice since theoretically \"type\" and \"value\" could mismatch.\n\nI suppose my main concern with having both is making sure the tests/docs make it very clear how things behave with either the name or the value (or both) are null.\n\nI agree the tests and docs could have been clearer (not just for \"arrnvp\") as far as null name and/or null value go. SOLR-9782 has now improved them.\n\n... what JSON attribute(s) will exist for the equivalents of things like <null name=\"bar\"/> or <null/> since there is no \"type\" to use as a JSON attribute name ...\n\nTaking your NamedList(\"bar\u201d=null,null=true,null=null) example,\nwith \"arrnvp\" the result is\n\n[\n  { \"name\":\"bar\", \"null\":null },\n  { \"name\":null,  \"bool\":true },\n  { \"name\":null,  \"null\":null }\n]\n\n\nand with \"arrntv\" the result will be\n\n[\n  { \"name\":\"bar\", \"type\":\"null\", \"value\":null },\n  { \"name\":null,  \"type\":\"bool\", \"value\":true },\n  { \"name\":null,  \"type\":\"null\", \"value\":null }\n]\n\n\ni.e. the \"type\" for null values is called \"null\". ",
            "id": "comment-15683903"
        },
        {
            "date": "2016-11-21T15:54:38+0000",
            "author": "Christine Poerschke",
            "content": "Created separate SOLR-9787 ticket-with-patch for the addition of \"arrntv\" (array of Name Type Value) support. ",
            "id": "comment-15683919"
        },
        {
            "date": "2016-11-21T17:27:14+0000",
            "author": "Hoss Man",
            "content": "ok, well ... my main point is pretty clearly illustrated by what you said here...\n\n\nBoth \"arrnvp\" result\n...\nand \"arrntv\" result\n...\ncontain information equivalent to\n\n<lst name=\"someField\">\n  <int name=\u201cfoo\u201d>42</int>\n</lst>\n\n\nxml format.\n\nIn the \"know beforehand what to expect\" use case, let's say the expectation is \"int\" type and hence the client does\n\n  myName = asString(someField, \"name\")\n  myInt = asInt(someField, \"int\")\n\n\nfor the \"arrnvp\" format.\n\nFor the \"arrntv\" format\n\n  # option 1\n  myName = asString(someField, \"name\")\n  myInt = asInt(someField, \"value\")\n\n\n\n...if you are 100% confident in what the datatypes are, then both formats are equally useful to you \u2013 the amount of code you have to write is exactly the same.  but the arrntv alternative i suggested is also useful even if you don't know the types \u2013 to me arntv is strictly an improvement.\n\nIf you want to split arrntv out in SOLR-9787 that's fine, but i still ultimately question the value of this arrnvp for end users if we also have arrntv? \u2013 if SOLR-9787 gets committed to branch_6x before arrnvp is ever included in an official release, what's the point of leaving arrnvp in Solr?  why not remove it as part of SOLR-9787?\n\n\n\nAs for the null handling, your explanation of how arrnvp currently works when the value is null demonstrats what seems like a big gotcha in the current code \u2013 namely that if the the client is expecting an String but the actual value is null (something that seems plausable and should be accounted for in the list of semi-typical cases), then a lookup for the key \"str\" in the JSONObject (ie: myValue = asString(someField, \"str\") in your psuedocode) is going to \"fail\", because there won't be a key named \"str\" instead there is a key named \"null\" ... maybe for some clients that \"failure\" will be fine, because the failed lookup will result in returning null in the client language, which might be what the client expects, but in other cases/languages it might throw an exception of cause other problems.\n\nwith the arrntv variant, even if you ignore the type, the \"value\" key would still returning null and the client shouldn't suffer any sort of catastrophic/unexpected error.\n\n...which again leaves me questioning: isn't the discussed arrntv idea strictly better then the rrnvp format currently committed? if SOLR-9787 gets committed to branch_6x before arrnvp is ever included in an official release, what's the point of leaving arrnvp in Solr?  why not remove it as part of SOLR-9787? ",
            "id": "comment-15684162"
        },
        {
            "date": "2016-11-22T17:18:03+0000",
            "author": "Christine Poerschke",
            "content": "As for the null handling ...\n\nAlright, let's proceed with \"arrntv\" as the replacement for \"arrnvp\" to avoid the subtle differences between the formats and also to not unnecessarily pose the \"Should I use 'arrntv' or 'arrnvp'?\" question for users. ",
            "id": "comment-15687328"
        },
        {
            "date": "2016-12-28T13:59:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e4ef4239f1b23afb116868e8528f1cd947287bd9 in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e4ef423 ]\n\nSOLR-9787, SOLR-9442: Replace json.nl=arrnvp with json.nl=arrntv (array of Name Type Value) style in JSONResponseWriter ",
            "id": "comment-15782939"
        },
        {
            "date": "2016-12-28T14:57:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 73e50ceceb836421a176fe0fa2098a20b3c8a304 in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=73e50ce ]\n\nSOLR-9787, SOLR-9442: Replace json.nl=arrnvp with json.nl=arrntv (array of Name Type Value) style in JSONResponseWriter ",
            "id": "comment-15783042"
        },
        {
            "date": "2016-12-29T11:50:30+0000",
            "author": "Christine Poerschke",
            "content": "https://cwiki.apache.org/confluence/display/solr/Response+Writers#ResponseWriters-JSONResponseWriter updated to include example for json.nl=arrntv ",
            "id": "comment-15785175"
        }
    ]
}