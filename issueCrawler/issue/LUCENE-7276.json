{
    "id": "LUCENE-7276",
    "title": "Add an optional reason to the MatchNoDocsQuery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "It's sometimes difficult to debug a query that results in a MatchNoDocsQuery. The MatchNoDocsQuery is always rewritten in an empty boolean query.\nThis patch adds an optional reason and implements a weight in order to keep track of the reason why the query did not match any document. The reason is printed on toString and when an explanation for noMatch is asked.  \nFor instance the query:\nnew MatchNoDocsQuery(\"Field not found\").toString()\n=> 'MatchNoDocsQuery[\"field 'title' not found\"]'",
    "attachments": {
        "LUCENE-7276.patch": "https://issues.apache.org/jira/secure/attachment/12802943/LUCENE-7276.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15276062",
            "author": "Jim Ferenczi",
            "date": "2016-05-09T07:46:46+0000",
            "content": "Patch available. "
        },
        {
            "id": "comment-15312081",
            "author": "Martijn van Groningen",
            "date": "2016-06-02T10:08:24+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15312093",
            "author": "Christoph Buescher",
            "date": "2016-06-02T10:20:24+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15314145",
            "author": "Michael McCandless",
            "date": "2016-06-03T14:04:16+0000",
            "content": "Thanks Jim Ferenczi, this looks great, I'll commit this soon. "
        },
        {
            "id": "comment-15314243",
            "author": "Michael McCandless",
            "date": "2016-06-03T14:57:27+0000",
            "content": "I tweaked the patch a bit (fixed whitespace, fixed some failing test cases), but now I hit this curious failure:\n\n\n   [junit4]   1> query: (#*:* *:* (-*:*) -(#body:b #(()^4.0)^10.0)^2.0)~1\n   [junit4]   1>   after rewrite: (#*:* *:* MatchNoDocsQuery[\"\"] -(#body:b #()^40.0)^2.0)~1\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBooleanRewrites -Dtests.method=testRandom -Dtests.seed=FAE50D783718C6BE -Dtests.locale=sv -Dtests.timezone=Navajo -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.33s | TestBooleanRewrites.testRandom <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: doc=0 expected:<0.3535533845424652> but was:<0.5>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([FAE50D783718C6BE:88A92877867870CD]:0)\n   [junit4]    > \tat org.apache.lucene.search.TestBooleanRewrites.assertEquals(TestBooleanRewrites.java:346)\n   [junit4]    > \tat org.apache.lucene.search.TestBooleanRewrites.testRandom(TestBooleanRewrites.java:290)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene62): {body=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128)))}, docValues:{}, maxPointsInLeafNode=367, maxMBSortInHeap=6.926568898697452, sim=ClassicSimilarity, locale=sv, timezone=Navajo\n   [junit4]   2> NOTE: Linux 3.13.0-87-generic amd64/Oracle Corporation 1.8.0_60 (64-bit)/cpus=8,threads=1,free=399197264,total=504889344\n   [junit4]   2> NOTE: All tests run in this JVM: [TestBooleanRewrites]\n\n\n\nSomehow the test is angry that the rewritten query scores differently from the original ... so somehow the fact that we no longer rewrite to an empty BQ is changing something ... I'll dig. "
        },
        {
            "id": "comment-15315100",
            "author": "Michael McCandless",
            "date": "2016-06-03T23:35:35+0000",
            "content": "New patch, fixing the test failure by wrapping in a BoostQuery with boost 0.0 in BQ when it rewrites! "
        },
        {
            "id": "comment-15315459",
            "author": "Michael McCandless",
            "date": "2016-06-04T10:35:05+0000",
            "content": "Another iteration, fixing query parser test failures.  I also fixed BooleanQuery with no clauses to rewrite to MatchNoDocsQuery.\n\nWho knew so many places cared about MatchNoDocsQuery! "
        },
        {
            "id": "comment-15316164",
            "author": "David Smiley",
            "date": "2016-06-06T04:01:50+0000",
            "content": "Somehow the test is angry that the rewritten query scores differently from the original ... so somehow the fact that we no longer rewrite to an empty BQ is changing something\n\nNew patch, fixing the test failure by wrapping in a BoostQuery with boost 0.0 in BQ when it rewrites!\n\nHmm; this feels odd.  If it needs to stay then it would be helpful to add some comments where this occurs to explain; I don't really get it.  Do you think it might make sense to remove the wrapping BoostQuery for 7.0?\n\nThanks. And nice addition Jim! "
        },
        {
            "id": "comment-15316547",
            "author": "Michael McCandless",
            "date": "2016-06-06T14:26:41+0000",
            "content": "It definitely is odd, and I don't like it, but I don't know how else to make the test happy on this weird corner case.\n\nI will put a comment attempting to explain the situation. "
        },
        {
            "id": "comment-15318332",
            "author": "Michael McCandless",
            "date": "2016-06-07T11:43:08+0000",
            "content": "I'm going to break this up into separate steps ... the current patch combines too many things: changing MatchNoDocsQuery.toString, adding a reason to it, changing it to return its own Weight instead of rewriting to BQ, changing BQ to rewrite to it when there are no clauses.\n\nI'll start by fixing MatchNoDocsQuery.toString() to simply return \"MatchNoDocsQuery\".  But even that small change is not easy: it is something of a break in our normal policy for a Query.toString in that today queries try to have a .toString which when sent back through a query parser would parse back to an equivalent query instance.  E.g., a PhraseQuery instance's toString would be \"foo bar\", which most query parsers would parse back into an equivalent query.\n\nThe Python world handles this situation nicely, by having two separate functions: repr makes a string which when eval'd (parsed and executed by Python) turns back into the same object, whereas str makes a pretty thing that humans can understand.  But Lucene has no such separation ... and our Query.toString is more like repr now.\n\nIs anyone besides me worried about this?  Do we have other queries that return a \"human but not query-parser consumable\" string? "
        },
        {
            "id": "comment-15318528",
            "author": "Michael McCandless",
            "date": "2016-06-07T14:13:12+0000",
            "content": "OK here's the simple toString change, step 1 of 3 or 4.  I think it's ready.\n\nI fixed some query parser tests to more directly check that they got the MatchNoDocsQuery, or an empty BooleanQuery, instead of relying on toString to do the check. "
        },
        {
            "id": "comment-15318531",
            "author": "David Smiley",
            "date": "2016-06-07T14:13:30+0000",
            "content": "I can understand if you feel you want to break up the issue for whatever reason, and to be cautious about backwards-compatibility (thus delaying parts of this issue to 7.0?)\n\nI don't think we should have guarantees that a Query.toString() will be parseable by Lucene's classic QueryParser.  That is not the case today for many queries, but for the common core queries, it's probably true.  And good point that if some app out there depends on this behavior, we might not want to introduce the change in 6.x of BooleanQuery optimizing to MatchNoDocsQuery. "
        },
        {
            "id": "comment-15318751",
            "author": "Adrien Grand",
            "date": "2016-06-07T15:59:52+0000",
            "content": "Is anyone besides me worried about this? Do we have other queries that return a \"human but not query-parser consumable\" string?\n\nEven though this is something you should not rely on, I suspect many users do... I think David is right that changing the toString representation should probably be master-only. However, we should still be able to put the reason in the explanation in 6.x? "
        },
        {
            "id": "comment-15327946",
            "author": "Jim Ferenczi",
            "date": "2016-06-13T19:02:09+0000",
            "content": "Somehow the test is angry that the rewritten query scores differently from the original ... so somehow the fact that we no longer rewrite to an empty BQ is changing something ... I'll dig.\n\nI tried to find a reason and I think I found something interesting. The change is related to the normalization factor and the fact that those queries are boosted. When you use a boolean query with no clause the normalization factor is 0, when the matchnodocs query is used the normalization factor is 1 (BooleanWeight.getValueForNormalization and ConstantScoreWeight.getValueForNormalization).\nThis part of the query is supposed to return no documents so it should be ok to ignore it when the query norm is computed. Though for the distributed case where results are merged from different shards there is no guarantee that the rewrite will be the same among the shards. \nI think we can get rid of the matchnodocsquery vs empty boolean query difference if we change the return value of  BooleanWeight.getValueForNormalization to be 1 (instead of 0) when there is no clause.\n\nhttps://issues.apache.org/jira/browse/LUCENE-7337 "
        },
        {
            "id": "comment-15328347",
            "author": "Michael McCandless",
            "date": "2016-06-13T21:38:47+0000",
            "content": "Wow thank you for digging on this Jim Ferenczi ... I've been meaning to get back to this issue, and if we can fix that scoring issue (separately) that will make it much easier. "
        },
        {
            "id": "comment-15328351",
            "author": "Michael McCandless",
            "date": "2016-06-13T21:40:06+0000",
            "content": "I don't think we have ever, nor should we ever, make a guarantee that MatchNoDocsQuery.toString would somehow round-trip through a query parser back to itself, and so I think we are free to improve it here/now.\n\nA right not exercised is soon forgotten. "
        },
        {
            "id": "comment-15329065",
            "author": "Adrien Grand",
            "date": "2016-06-14T08:06:54+0000",
            "content": "I don't think we have ever, nor should we ever, make a guarantee that MatchNoDocsQuery.toString would somehow round-trip through a query parser back to itself, and so I think we are free to improve it here/now.\n\n+1 "
        },
        {
            "id": "comment-15329556",
            "author": "David Smiley",
            "date": "2016-06-14T14:08:21+0000",
            "content": "don't think we have ever, nor should we ever, make a guarantee that MatchNoDocsQuery.toString would somehow round-trip through a query parser back to itself, and so I think we are free to improve it here/now.\n\nYeah, +1 "
        },
        {
            "id": "comment-15344354",
            "author": "Michael McCandless",
            "date": "2016-06-22T14:09:16+0000",
            "content": "Another iteration ... the patch was much simpler now that LUCENE-7337 is done. "
        },
        {
            "id": "comment-15367995",
            "author": "ASF subversion and git services",
            "date": "2016-07-08T17:08:07+0000",
            "content": "Commit cbbc505268e8fa994fa21383ed49a91b2e923f66 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cbbc505 ]\n\nLUCENE-7276: MatchNoDocsQuery now inclues an optional reason for why it was used "
        },
        {
            "id": "comment-15367998",
            "author": "ASF subversion and git services",
            "date": "2016-07-08T17:12:37+0000",
            "content": "Commit df2207c5dcf379af25d12ef3b3cd7f44bad4fdff in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=df2207c ]\n\nLUCENE-7276: MatchNoDocsQuery now inclues an optional reason for why it was used "
        },
        {
            "id": "comment-15368002",
            "author": "Michael McCandless",
            "date": "2016-07-08T17:13:45+0000",
            "content": "Thanks Jim Ferenczi! "
        },
        {
            "id": "comment-15439068",
            "author": "Michael McCandless",
            "date": "2016-08-26T14:01:03+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        }
    ]
}