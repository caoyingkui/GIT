{
    "id": "SOLR-2538",
    "title": "Math overflow in LongRangeEndpointCalculator and DoubleRangeEndpointCalculator",
    "details": {
        "affect_versions": "3.1",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In the classes LongRangeEndpointCalculator and DoubleRangeEndpointCalculator, in the method \"parseAndAddGap\", there is a loss of precision:\n\n1318  private static class DoubleRangeEndpointCalculator\n1319\t    extends RangeEndpointCalculator {\n1320\t \n1321\t    public DoubleRangeEndpointCalculator(final SchemaField f) \n{ super(f); }\n1322\t    @Override\n1323\t    protected Double parseVal(String rawval) {\n1324\t      return Double.valueOf(rawval);\n1325\t    }\n1326\t    @Override\n1327\t    public Double parseAndAddGap(Double value, String gap) {\n1328 --->      return new Double(value.floatValue() + Double.valueOf(gap).floatValue()); <------\n1329\t    }\n1330\t\n\n[..]\n\n1344\t  private static class LongRangeEndpointCalculator\n1345\t    extends RangeEndpointCalculator {\n1346\t \n1347\t    public LongRangeEndpointCalculator(final SchemaField f) { super(f); }\n1348\t    @Override\n1349\t    protected Long parseVal(String rawval) \n{\n1350\t      return Long.valueOf(rawval);\n1351\t    }\n1352\t    @Override\n1353\t    public Long parseAndAddGap(Long value, String gap) \n{\n1354 ---->     return new Long(value.intValue() + Long.valueOf(gap).intValue()); <-------\n1355\t    }\n1356\t  }\n\nAs result, the following code is detecting a data overflow because the long number is being treated as an integer:\n\n1068\t    while (low.compareTo(end) < 0) {\n1069\t      T high = calc.addGap(low, gap);\n1070\t      if (end.compareTo(high) < 0) {\n1071\t        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) \n{\n1072\t          high = end;\n1073\t        }\n else \n{\n1074\t          end = high;\n1075\t        }\n1076\t      }\n1077\t      if (high.compareTo(low) < 0) \n{\n1078\t        throw new SolrException\n1079\t          (SolrException.ErrorCode.BAD_REQUEST,\n1080\t           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n1081\t      }\n1082\t       \n\nChanging the 'intValue()' by a 'longValue()' and  the 'floatValue()' by 'doubleValue()' should work. We have detected this bug when faceting a very long start and end values. We have tested edge values (the transition from 32 to 64 bits) and any value below the threshold works fine. Any value greater than 2^32 doesn't work. We have not tested the 'double' version, but seems that can suffer from the same problem.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13061568",
            "date": "2011-07-07T20:26:04+0000",
            "content": "Erbi: thanks for catching this.  looks like a cut/paste error, but i went ahead and added a test to reduce the risk of future regression.\n\nCommitted revision 1144014. - trunk\nCommitted revision 1144016. - 3x "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106226",
            "date": "2011-09-16T14:48:54+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}