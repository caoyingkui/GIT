{
    "id": "LUCENE-3607",
    "title": "Lucene Index files can not be reproduced faithfully (due to timestamps embedded)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.9.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Eclipse 3.7 uses Lucene 2.9.1 for indexing online help content. A pre-generated help index can be shipped together with online content. As per\n   [https://bugs.eclipse.org/bugs/show_bug.cgi?id=364979]\nit turns out that the help index can not be faithfully reproduced during a build, because there are timestamps embedded in the index files, and the \"NameCounter\" field in segments_2 contains different contents on every build.\n\nNot being able to faithfully reproduce the index from identical source bits undermines trust in the index (and software delivery) being correct.\n\nI'm wondering whether this is a known issue and/or has been addressed in a newer Lucene version already ?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-28T21:01:19+0000",
            "content": "This hasn't yet been fixed... when Lucene makes a new index, it sets the \"version\" field in SegmentInfos to System.currentTimeMillis().\n\nThe comment says this:\n\n  /**\n   * counts how often the index has been changed by adding or deleting docs.\n   * starting with the current time in milliseconds forces to create unique version numbers.\n   */\n\n\n\nBut... I don't see why we need unique version numbers across different indices.  I don't think we advertise (nor, should) that the version number you get out of IR is comparable across indices created anew... so I think we can change this to set initial version to 0 instead. ",
            "author": "Michael McCandless",
            "id": "comment-13158760"
        },
        {
            "date": "2011-11-28T21:07:42+0000",
            "content": "I think we should maintain the current behavior (at least Solr depends somewhat on it in the replication code), but allow one to override this behavior by specifying a version on new index creation somehow. ",
            "author": "Yonik Seeley",
            "id": "comment-13158769"
        },
        {
            "date": "2011-11-28T21:19:35+0000",
            "content": "If you really want to have a fully reproducable index (and not knowing the parameters of what that means, \nand not understanding what the use case here is doesn't help) it seems like you need to do a lot more work?\n\nWhat if we want to put something in the diagnostics map in the future to assist with debugging? its already going to change\ndependent upon your JVM and os settings (e.g. diagnostics = \n{os.version=3.0.0-12-generic, os=Linux, lucene.version=4.0-SNAPSHOT, source=flush, os.arch=amd64, java.version=1.7.0_01, java.vendor=Oracle Corporation}\n), and thats just one example.\n\nTo me thats totally fair game for us to do, if it helps debugging. So I dont think we should commit ourselves\nto this faithful reproduction.\n\nif you really really really are against this at the end of the day, in trunk you can implement your own \nsegments file reader/writer in a codec, and write 0 for version and no diagnostics maps and other things... ",
            "author": "Robert Muir",
            "id": "comment-13158785"
        },
        {
            "date": "2011-11-28T21:23:21+0000",
            "content": "if you really really really are against this at the end of the day, in trunk you can implement your own \nsegments file reader/writer in a codec, and write 0 for version and no diagnostics maps and other things...\n\n+1 to expose this via codec  ",
            "author": "Simon Willnauer",
            "id": "comment-13158790"
        },
        {
            "date": "2011-11-28T21:36:34+0000",
            "content": "+1 to use a codec in 4.0.\n\nIn general it's not enough to only make the Codec write the files without timestamps and versions and diagnostic data. It's also important that you use a MergeScheduler and MergePolicy that does predictable segment merges. To make an index that can be reproduced (except the version numbers and timestamps), you need to use SerialMergeScheduler (as ConcurrentMergeScheduler uses multiple threads and parallelization might change the order and how early merges occur) and also use a MergePolicy that does not merge depending on platform features. So use good old LogDocMergePolicy (its merges aacording to numer of docs). And finally your Analyzers must produce predictable results even when the underlying Java Runtime with its Unicode version changes (use ICU analyzers). ",
            "author": "Uwe Schindler",
            "id": "comment-13158804"
        },
        {
            "date": "2011-11-28T21:38:19+0000",
            "content": "What if we want to put something in the diagnostics map in the future to assist with debugging?\n\n+1\n\nI think we cannot realistically commit to \"if you index the same content you get identical index\", with the defaults.  Having to create/use a custom codec to do this seems like a good solution....\n\nI think we should maintain the current behavior (at least Solr depends somewhat on it in the replication code),\n\nWait, does Solr replication really rely on the IR.getVersion being seeded with a timestamp?  Does it somehow compare IR.getVersion across different indices?\n\nI think we should seed with 0 instead (all tests pass), ie, the version is still comparable across IRs opened at different times against the same index.\n\nI don't think we should make any promises about how IR.getVersion compares across unrelated indices, only within the same index. ",
            "author": "Michael McCandless",
            "id": "comment-13158808"
        },
        {
            "date": "2011-11-28T21:45:49+0000",
            "content": "Wait, does Solr replication really rely on the IR.getVersion being seeded with a timestamp?\n\nIIRC, it's used somewhere.\n\nDoes it somehow compare IR.getVersion across different indices?\n\n\"Different\" is rather subjective.  Someone can blow away an index and recreate the same logical index (even though it's a different index from Lucene's POV).\n\nI think we should seed with 0 instead\n\nI think we should keep the current behavior.  It has some nice properties, and isn't broken.  Index versions increase over time (unless you delete and recreate an index in less than a millisecond).\n\nI don't think we should make any promises about how IR.getVersion compares across unrelated indices, only within the same index.\n\nNot making any promises is different than purposely breaking it for no gain. ",
            "author": "Yonik Seeley",
            "id": "comment-13158813"
        },
        {
            "date": "2011-11-28T22:00:03+0000",
            "content": "Also, see CHANGES.txt... this has been advertised since Lucene 1.9:\n\n 6. The version of an IndexReader, as returned by getCurrentVersion()\n    and getVersion() doesn't start at 0 anymore for new indexes. Instead, it\n    is now initialized by the system time in milliseconds.\n    (Bernhard Messer via Daniel Naber) ",
            "author": "Yonik Seeley",
            "id": "comment-13158840"
        },
        {
            "date": "2011-11-28T22:01:41+0000",
            "content": "Since I was asked, here is my scenario / workflow:\n\n\n\twe're building an Eclipse based application, which contains online help.\n\tThe build process generates a lucene index and ships it with our application.\n\t2 builds before the final RTO we detect that a critical defect needs to be fixed. Of course that close before release we want to change as few binary bits as possible.\n\tBut even though we touched a single character in some unrelated configfile only, a large amount of our modules gets changed due to the modified Lucene index.\n\n\n\n==> This behavior makes it hard to create and deploy incremental patches since after a rebuild (with minimal change) it's unclear what output was valid to change.\n\nExplained in different terms, if I'm building on the same host, same OS, same JVM, same source files ... I expect getting the same output.\nVery much like re-building a C++ EXE from source, then stripping it is expected to produce identical binary bits.\nThat's a requirement in many safety critical areas.\n\nSo, regarding \"changing something that works for no gain\" ... I'd like to assert that there is tangible gain in an index that's binary reproducable.\nI'd rather claim that I don't see the advantage of an index that has the timestamp of its creation embedded. ",
            "author": "Martin Oberhuber",
            "id": "comment-13158842"
        },
        {
            "date": "2011-11-28T22:23:35+0000",
            "content": "\nThat's a requirement in many safety critical areas.\n\nKeep in mind this is a search engine library, the whole concept is based on heuristics. \nHonestly if someone wants to use lucene for something 'safety critical', I think this \ntimestamp field should be at the bottom of their priority list. But see below:\n\n\nI'd like to assert that there is tangible gain in an index that's binary reproducable.\nI'd rather claim that I don't see the advantage of an index that has the timestamp of its creation embedded.\n\nWell I don't think there is a big need to change the default here, and I also don't \nthink we need to find any consensus or one-size-fits-all here, we have a flexible \nindexing api in 4.0 so that you can customize things like this. ",
            "author": "Robert Muir",
            "id": "comment-13158860"
        },
        {
            "date": "2011-11-28T22:30:27+0000",
            "content": "Martin,\nwhen reading your Eclipse issue about the packaged Lucene indexes I imagine that I know the reason why you want to package pre-built indexes with Eclipse (as Robert and me are the persons behind the well-known Porter-Stemmer Java 7 bug...): You want your IDE not crashing is somebody uses Java 1.7.0 GA.\n\nThere are other problems with shipping pre-built indexes, which I also found out during preparation for a talk about the Java 7 bug, during which I was not able to make Eclipse crash on my Java 7 Germany-localized Windows machine. This is another bug in eclipse itsself, but it would heavily affect your prebuilt indexes. Any help system supporting full-text search does not ship with prebuilt indexes (e.g. Windows CHM  help builds the indexes on first use, like Eclipse did in the past).\n\nIf you really want to package pre-built indexes with the release you have to make sure:\n\n\n\tThe target platform of your index is exactly equal your platform where you indexed unless you're using only analyzers which do not depend on the underlying JVM (e.g. ICU analyzers with a fixed ICU4J version shipped together with the product). Otherwise it can happen that you index was built with JDK 6 (which uses Unicode 4.0) will not work correctly on a computer with JDK 7, as the character properties vary on the target platform (Java 7 uses Unicode 6.0). This especially affects Asian languages.\n\tYou also have to make sure that the target platform uses the same analyzer set like the indexing platform. The problem I had, trying to reproduce the famous crash on my German-localized O/S was caused by an ugly bug in your help system (you should open an issue at Eclipse as this is a real bug, I dont use Eclipse so I just wanted to have something crashing because of this bug in my talk at GotoCon Aarhus): The help system indexes the text using an analyzer that is created based on the locale of the operating system (in my case de_DE; as the analyzer you have choosen for de_DE does not use Porter Stemmer my Eclipse installation did not crash because of the Java 7 bug). In fact the help text itsself was English. So the Eclipse runtime indexed English help text with a German analyzer which is a bug. When I later changed the locale to English, my searches hit no results anymore as during searching suddenly a different analyzer was used that was used while indexing (after wiping the index, Eclipse of course crashed because of the Java 7 bug). The correct behaviour would be that the help file itsself ships with its own language as metadata that is then used for indexing! So an english help file should have a property saying \"I am english\". This must be fixed before releasing indexes with eclipse installers: The analyzer used for query analysis must be identical the one (including unicode version) used during indexing. If it depends on local its incorrect and would not fit the index on disk (shipped with the installation files).\n\n\n\nAnd as noted a few comments before: During indexing you have to use a predictable non-parallelized MergeScheduler/MergePolicy (I recommend SerialMergeScheduler and LogDocMergePolicy), otherwise the second non predictable factor is segment merging. Also maybe forceMerge the index to 1 segment (but dont use TieredMergePolicy as it may reorder segments during merging).\n\nAnd I agree with Yonik, we should keep the version numbers and index metadata time-dependent in the index. We also need information like the operating system used to build segments in our index file as metadata. If you want to have indexing be 100% predicatable write a custom codec in 4.0 that does not write \"random\" numbers and environment metaddata in headers + use SerialMergeScheduler with LogDocMergePolicy. ",
            "author": "Uwe Schindler",
            "id": "comment-13158866"
        },
        {
            "date": "2011-11-29T17:40:59+0000",
            "content": "\n\nWait, does Solr replication really rely on the IR.getVersion being seeded with a timestamp?\n\nIIRC, it's used somewhere.\n\nHmmm spooky that Solr replication would in fact rely on this.\n\nAnd then also spooky that no test fails if I change version to start\nat 0.\n\nAre you sure?\n\nWhat happens if time goes backwards (daylight savings, clock\ncorrection, user changes clock, etc.)?  Will it break Solr's\nreplication?\n\n\nDoes it somehow compare IR.getVersion across different indices?\n\n\"Different\" is rather subjective. Someone can blow away an index and recreate the same logical index (even though it's a different index from Lucene's POV).\n\nOK I see.  So... you could have an IR open on an index, do rm * from\nit (unix), build up a new index, and then call IR.isCurrent.  Seeding\nwith timestamp means the version will have gone up (if time didn't\nmove backwards) across those two indices.\n\n(Though really you should not rm * to delete all docs; better to use\nnew IW w/ create=true).\n\nI generally don't like things that rely strongly on timestamp since\ntime can and eventually will go backwards with computers, and you\nnever remember to properly test for that.\n\nBut I guess we can leave this be for now... ",
            "author": "Michael McCandless",
            "id": "comment-13159392"
        },
        {
            "date": "2011-11-30T11:20:20+0000",
            "content": "Hi all,\n\nthanks for the many comments. I understand that there's no desire changing behavior that's been working (and documented!) for years.\n\nWhat about a different approach ... would it be possible to write a small Java \"main\" that normalizes an index, very much like \"stripping\" an EXE ? That way I could postprocess my indexes (which are meant for distribution with our product), but at its core Lucene could continue working as today.\n\nRegarding some other comments,\n\n\n\tOur main reason for shipping a pre-built index is \"initial search\" performance. In a large eclipse based product, generating the docs index on initial search can take approx 4 minutes on a decent computer. With everything pre-indexed, initial search can proceed after 10 seconds. That's an important usability issue for our help system. Another reason is the desire to find any index building errors at build-time (where we can investigate them) rather than runtime.\n\n\n\n\n\tWe do have both the build environment and the deployment environment under full control (same lucene version, same JVM version, same ICU version, all our content is en_US).\n\n\n\n\n\tRegarding heuristics ... sure the search is heuristic at runtime, but that's a very different thing than having the build environment heuristic... having identical input produce identical output is still desirable.\n\n\n\n\n\tThe issue of different analyzes used at index generation time vs. runtime has indeed bitten us in the past (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=219928#c16]). In my personal opinion, the choice of analyzer should be bound to the content, and not to the search environment ... since in many cases the language of the search string will not be known, but the language of the documents / index is known. Right now, the best workaround for this at Eclipse is launching Eclipse with a \"-nl en_US\" argument to force US locale when I know all the docs are US... but that won't work at all in an environment where some docs are English and others are German, a very common scenario with software products on Eclipse (main product may be localized but some plugins are not).\n\n\n\nIs that \"analyzer binding to content vs. binding to search\" issue known and discussed at Lucene already ? I.e. is it possible to have parts of the index (the US one) searched with an US analyzer but other parts (the German one) with a German analyzer ? And, why does the German analyzer truncate words at \".\" while the US one does not (See [https://bugs.eclipse.org/bugs/show_bug.cgi?id=219928#c18]) ? ",
            "author": "Martin Oberhuber",
            "id": "comment-13159983"
        },
        {
            "date": "2011-11-30T12:44:04+0000",
            "content": "\nIs that \"analyzer binding to content vs. binding to search\" issue known and discussed at Lucene already ? \n\nNo, because its eclipses bug. you can set analyzers however you want in lucene, we don't enforce anything.\n\n\nAnd, why does the German analyzer truncate words at \".\" while the US one does not (See https://bugs.eclipse.org/bugs/show_bug.cgi?id=219928#c18) ?\n\nBecause you are using an ancient version of lucene. ",
            "author": "Robert Muir",
            "id": "comment-13159997"
        }
    ]
}