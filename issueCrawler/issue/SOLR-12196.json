{
    "id": "SOLR-12196",
    "title": "Prepare Admin UI for migrating to Angular.io",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Admin UI"
        ],
        "type": "Improvement",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "AngularJS is soon end of life, it enters LTS in july 2018, whereupon it will only receive fixes to serious bugs. Solr uses AngularJS 1.3 (the latest AngularJS will be 1.7).\n\nThis issue is not for upgrading to Angular5/6, but to start preparing the existing UI for easier migration later on. See https://angular.io/guide/upgrade.\n\nThis JIRA will likely get multiple sub tasks such as\n\n\tChange to Folders-by-Feature Structure, i.e. mix html, css, js in a folder based on feature\n\tUse a Module Loader like Webpack\n\tUse Component Directives (requires first move from AngularJS 1.3 to 1.5)\n\n\n\nThe rationale for this lira is recognising how central the Admin UI is to Solr, not letting it rot on top of a dying framework. Better to start moving step by step and perhaps write all new views in Angular 5, than to fall further and further behind.\n\nThis effort of course assumes that Angular.io is the path we want to go, and not React, VueJS or some other new kid on the block",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-06T13:41:11+0000",
            "content": "Not sure if this is realistic if we don't have a dedicated frontend committer who can lead the effort. I know enough of JS, HTML and Angular to find my way around Admin UI and do small stuff, but doing major restructuring would benefit from someone who have done it before...\u00a0Hope to get some input into this thinking from Upayavira, Stefan Matheis (steffkes), Erick Erickson. The ngUpgrade\u00a0approach looks attractive as we can migrate one view at a time, assuming that our app is large enough for it to be a major undertaking to do it all-in-one-step. So this Jira I guess is to take us to a position where it would be possible to\u00a0even think about such a move  ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16428335"
        },
        {
            "date": "2018-04-06T15:17:03+0000",
            "content": "I don't have a major investment in Solr at this time, but I am certainly game to follow on and add what bits I might. Whilst I am far from a front-end developer, I have recently played with Webpack and React with some success. The transition from the old JS UI to Angular was made simpler because of how Angular manages its (whole page) templates. React breaks things down into smaller components, and whilst this could be better in the long run in terms of component reuse, it means that a conversion could be a substantial piece of work. I like your idea of breaking the task down into smaller steps. ",
            "author": "Upayavira",
            "id": "comment-16428448"
        },
        {
            "date": "2018-04-13T15:32:47+0000",
            "content": "From all I have read, the migration from Angular 1 to later version is a real piece of re-engineering as well. In that sense, migrating to React or Vue are probably the projects of similar complexity.\n\nMy vote would probably be for React as there are still more integrations with it and more possibilities (native mobile UI with React Native!?!).\u00a0\n\nAnd given the amount of work, I wonder if that's also a good time to collect larger level ideas on what UI should look like, given the prominence of Javascript and availability of self-descriptive and management Solr APIs.\n\n\u00a0 ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16437447"
        },
        {
            "date": "2018-04-13T22:16:53+0000",
            "content": "It would be great with a re-imagined Admin and a brand new framework  But as I wrote initially, are we rigged for such a huge job now?\n\nIn my head it is more realistic with byte-size improvements as laid out in this Jira with the goal of getting to Angular5 (still much work but less than React?). Keep the same design. Even keep parts of the UI as-is using ngUpgrade? Then\u00a0do visual and logical re-design step by step after that.\n\nIf we have the will, skill and capacity to start from scratch with React and re-design then I won't vote against, but I don't see how/who? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16438005"
        },
        {
            "date": "2018-04-13T23:10:11+0000",
            "content": "My feeling is that \"if not now\" will be \"close to never\". Because it was a huge effort to move it to Angular 1 and some bits were not even finished for very long time (ever?). So, let's say another 3 years before anybody will raise this conversation with the same amount of \"sunk costs\" as right now.\n\nAs to how/who, yeah, that's the big issue. Has been, it seems for a long time. I am interested in learning React but I am not a frontend dev myself to take a lead. And certainly not a visual designer, which is the hairy part... But my feeling is that maybe it is worth asking on the dev list as a tradeoff discussion.\u00a0\n\n\u00a0 ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16438072"
        },
        {
            "date": "2018-04-14T14:57:28+0000",
            "content": "Ok makes sense. Could even be that some Solr users (companies) are willing to sponsor such an effort with some time from their own\u00a0UI\u00a0designers or frontend developers.\u00a0Feel free to check the temperature on the dev (and solr-user?) list and we can return to this Jira with whatever conclusion the discussion may give.\n\nOne wish from me, no matter what framework we choose, is that we do a component-based design which makes it possible for Solr plugins / contribs to provide Admin UI menus and\u00a0screens. One acid test for this could be to move all DIH UI code from webapp/ to contrib/dataimporthandler/.\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16438377"
        },
        {
            "date": "2018-04-14T15:11:36+0000",
            "content": "that we do a component-based design which makes it possible for Solr plugins / contribs to provide Admin UI menus and screens\n\nI really like that idea.  Allowing modules to handle their own UI will make maintaining the core UI easier and give module developers more capability.\n\nIf I had the knowledge, I'd be interested in helping with a rewrite.  I just don't know enough about javascript or css to tackle a job like that. ",
            "author": "Shawn Heisey",
            "id": "comment-16438382"
        },
        {
            "date": "2018-04-16T08:49:04+0000",
            "content": "If I had the knowledge, I'd be interested in helping with a rewrite. I just don't know enough about javascript or css to tackle a job like that.\nThen learn it  It is great fun! I'm not a front-end developer by any means, I just learned what a colleague pointed me at. And there is structure there in the JavaScript land that wasn't there before that lends itself to back-end developers.\n\nGo do a react tutorial or two. The CSS stuff we would defer to a graphic designer. In the end, it is just programming. I might be able to muster the time to put together a framework and build system onto which others can hang pages, especially if we already had a design put together. ",
            "author": "Upayavira",
            "id": "comment-16439138"
        }
    ]
}