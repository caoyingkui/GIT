{
    "id": "SOLR-10956",
    "title": "Document SolrClient use of RemoteSolrException",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.0",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently, SolrClient s Javadocs specify that it throws IOException, and SolrServerException.  However, these aren't the only exceptions that can trickle out of these classes.\n\nRemoteSolrException for example, is often thrown by HttpSolrClient on various error cases:\n\n\n[~/c/lucene-solr] $ grep -rI \"throw new RemoteSolrException\" . | grep SolrClient.java\n./solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java:            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n./solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java:            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n./solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java:          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n./solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java:        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n\n\n\n(LBHttpSolrClient, and CloudSolrClient also see these exception, since they wrap HttpSolrClient internally)\n\nWe should either restrict the exceptions we throw in our clients, or better document the full range of possible exceptions/error-cases so that users can better handle things themselves.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-27T02:23:32+0000",
            "content": "Based on some quick digging, it looks like SolrClient's make use of the following exceptions:\n\n\tRemoteSolrException - used when a HTTP request was successfully sent to Solr, but the response from Solr indicated an error.  Contains HTTP status code.  Lumping in some RemoteExecutionException uses here, as that exception is a descendant of this one.\n\tSolrServerException - used on connection/timeout/parsing or other errors related to communicating with Solr.  In almost all cases, a successful HTTP request was not made, or the response could not be parsed.\n\n ",
            "author": "Jason Gerlowski",
            "id": "comment-16064144"
        },
        {
            "date": "2017-06-27T02:23:44+0000",
            "content": "Currently, most SolrClient Javadocs say the following about potential error cases:\n\n   * @throws IOException         if there is a communication error with the server\n   * @throws SolrServerException if there is an error on the server\n\n\n\nThere are a few issues with this:\n1. It makes no mention of RemoteSolrException at all.\n2. SolrServerException is documented as having the role that RemoteSolrException has in practice.\n3. IOException is documented as having the role that SolrServerException has in practice.  (Some IOExceptions do leak out of SolrClient classes, but they're very often wrapped in a SolrServerException)\n\nTo take a stab at fixing these issues, I would suggest documentation like:\n\n    * @throws RemoteSolrException errors encountered executing the request on the remote server, such as invalid request rejection or internal server errors.  Check #code() for hints at retriability.\n   * @throws SolrServerException errors encountered attempting to communicate with Solr such as connection, timeout, or parsing errors.\n   * @throws IOException unexpected communication errors.\n\n\n\nAnyone have any thoughts? ",
            "author": "Jason Gerlowski",
            "id": "comment-16064145"
        }
    ]
}