{
    "id": "LUCENE-8165",
    "title": "ban Arrays.copyOfRange with forbidden APIs",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "7.5",
            "master (8.0)"
        ]
    },
    "description": "This method is no good, because instead of throwing AIOOBE for bad bounds, it will silently fill with zeros (essentially silent corruption). Unfortunately it is used in quite a few places so replacing it with e.g. arrayCopy may uncover some interesting surprises.\n\nSee LUCENE-8164 for motivation.",
    "attachments": {
        "LUCENE-8165_copy_of.patch": "https://issues.apache.org/jira/secure/attachment/12926410/LUCENE-8165_copy_of.patch",
        "LUCENE-8165.patch": "https://issues.apache.org/jira/secure/attachment/12926634/LUCENE-8165.patch",
        "LUCENE-8165_start.patch": "https://issues.apache.org/jira/secure/attachment/12909709/LUCENE-8165_start.patch",
        "LUCENE-8165_copy_of_range.patch": "https://issues.apache.org/jira/secure/attachment/12926029/LUCENE-8165_copy_of_range.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16356376",
            "date": "2018-02-08T02:17:09+0000",
            "content": "attached starter patch that fixes BytesRef/CharsRef/IntsRef/LongsRef to just use good old arraycopy and adds tests. There are a lot more usages to fix but it demonstrates the problem. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16356399",
            "date": "2018-02-08T02:37:15+0000",
            "content": "For the record copyOf does similar lenient filling, but will be even trickier to clean up since about half the uses i see are arguably \"valid\" (explicitly oversizing arrays for future growth) and the other half are definitely invalid... e.g. when you see it used in asserts in tests, etc, thats wrong.\n\nWe need to nuke it too: we should use the standard ArrayUtil.grow() for this stuff, so the code is clear, too. And those methods can use arraycopy under the hood. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16497476",
            "date": "2018-06-01T02:16:50+0000",
            "content": "Robert Muir\u00a0I continued your initial patch and completed the first round which removes all Arrays#copyOfRange usages. I will do another round for Arrays#copyOf.\u00a0Could you please have a look? Thank you! ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16497498",
            "date": "2018-06-01T03:15:24+0000",
            "content": "This looks good, thanks! I had forgotten about this issue, great to have more progress. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16497861",
            "date": "2018-06-01T11:21:15+0000",
            "content": "patch looks good to me. Robert Muir do you wanna go ahead and commit this and push a separate change for\u00a0\u00a0Arrays#copyOf? ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16497871",
            "date": "2018-06-01T11:31:12+0000",
            "content": "yeah, lets split it up. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16500444",
            "date": "2018-06-04T16:17:43+0000",
            "content": "Robert Muir and Simon Willnauer\n\nI've submitted a new patch which removes Arrays#copyOf. This patch is on top of the #copyOfRange patch.\n\nI considered introducing `ArrayUtils#growExact(array, newLength)` and `ArrayUtils#subArray(array, from, to)`. Method `ArrayUtils#growExact` will grow an array to the exact given length instead of an over-allocated length like ` ArrayUtils#grow`. I think our code will be more clear and less error-prone with these helper methods. I am open to suggestions.\n\nPlease have a look when you have time. Thank you! ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16500492",
            "date": "2018-06-04T16:39:18+0000",
            "content": "I think our code will be more clear and less error-prone with these helper methods.\n\n+1 I was going to suggest something like that too. I understand why someone would like the explicitness of System.arraycopy, but I miss the type safety and conciseness of Arrays.copyOf/copyOfRange. Maybe call the second method that you suggested something like copyOfSubArray to be more explicit about the fact that it is a copy? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16500497",
            "date": "2018-06-04T16:44:33+0000",
            "content": "+1:\u00a0copyOfSubArray to be more explicit about the fact that it is a copy ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16502419",
            "date": "2018-06-05T20:10:51+0000",
            "content": "I've attached a new patch which removes both `Arrays.copyOfRange` and `Arrays.copyOf` using two newly added helper methods in ArrayUtil. Please have a look. Thank you! ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16503508",
            "date": "2018-06-06T16:08:33+0000",
            "content": "+1 I like it. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16503521",
            "date": "2018-06-06T16:16:06+0000",
            "content": "+1 ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16504366",
            "date": "2018-06-07T07:54:08+0000",
            "content": "+1 ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16504387",
            "date": "2018-06-07T08:08:38+0000",
            "content": "Commit 8a6f1bf5ada407ce75ce7b12a88e8a681d529825 in lucene-solr's branch refs/heads/master from Nhat Nguyen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8a6f1bf ]\n\nLUCENE-8165: Ban copyOf and copyOfRange.\n\nThese methods are lenient with out-of-bounds indices.\n\nSigned-off-by: Adrien Grand <jpountz@gmail.com> ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16504442",
            "date": "2018-06-07T09:15:06+0000",
            "content": "Commit 42b69f39ea5e759f086f7106aea4de85ed4c7e18 in lucene-solr's branch refs/heads/branch_7x from Nhat Nguyen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=42b69f3 ]\n\nLUCENE-8165: Ban copyOf and copyOfRange.\n\nThese methods are lenient with out-of-bounds indices.\n\nSigned-off-by: Adrien Grand <jpountz@gmail.com> ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16504449",
            "date": "2018-06-07T09:24:38+0000",
            "content": "Merged. Thanks Nhat Nguyen. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16504595",
            "date": "2018-06-07T12:26:02+0000",
            "content": "Thanks everyone! ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16504639",
            "date": "2018-06-07T12:56:44+0000",
            "content": "Thanks Adrien: (also for branching first!). I'm sorry I was slow / holding up getting the fixes in: i was worried about the risks of the changes too. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16504647",
            "date": "2018-06-07T13:04:50+0000",
            "content": "You're welcome. I was also wondering about unexpected side effects, hence branching first. Hopefully this will be less risky in the long term than the leniency of copyOf(Range). ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16504650",
            "date": "2018-06-07T13:08:18+0000",
            "content": "I think these commits may also fix LUCENE-8164 too: I haven't yet tried re-running the test yet to see if it now hits exception. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16504656",
            "date": "2018-06-07T13:11:25+0000",
            "content": "Robert Muir I will look\u00a0at\u00a0LUCENE-8164\u00a0and post the output. ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16510771",
            "date": "2018-06-13T08:19:05+0000",
            "content": "Commit 9ea1fa5356ec3e5f619625a82856c7c235c08714 in lucene-solr's branch refs/heads/branch_7x from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9ea1fa5 ]\n\nLUCENE-8164: IndexWriter silently accepts broken payload.\n\nThis has been fixed via LUCENE-8165 since we are now checking\nfor offset+length going out of bounds.\n\nCo-authored-by: Nhat Nguyen <nhat.nguyen@elastic.co>\nCo-authored-by: Robert Muir <rmuir@apache.org> ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16510773",
            "date": "2018-06-13T08:19:13+0000",
            "content": "Commit 7eb74ac50f5e6e05389e834a1a2bf2543dfd64c9 in lucene-solr's branch refs/heads/master from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7eb74ac ]\n\nLUCENE-8164: IndexWriter silently accepts broken payload.\n\nThis has been fixed via LUCENE-8165 since we are now checking\nfor offset+length going out of bounds.\n\nCo-authored-by: Nhat Nguyen <nhat.nguyen@elastic.co>\nCo-authored-by: Robert Muir <rmuir@apache.org> ",
            "author": "ASF subversion and git services"
        }
    ]
}