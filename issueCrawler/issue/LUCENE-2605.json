{
    "id": "LUCENE-2605",
    "title": "queryparser parses on whitespace",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [
            "6.2"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The queryparser parses input on whitespace, and sends each whitespace separated term to its own independent token stream.\n\nThis breaks the following at query-time, because they can't see across whitespace boundaries:\n\n\tn-gram analysis\n\tshingles\n\tsynonyms (especially multi-word for whitespace-separated languages)\n\tlanguages where a 'word' can contain whitespace (e.g. vietnamese)\n\n\n\nIts also rather unexpected, as users think their charfilters/tokenizers/tokenfilters will do the same thing at index and querytime, but\nin many cases they can't. Instead, preferably the queryparser would parse around only real 'operators'.",
    "attachments": {
        "LUCENE-2605-dont-split-by-default.patch": "https://issues.apache.org/jira/secure/attachment/12816326/LUCENE-2605-dont-split-by-default.patch",
        "LUCENE-2605.patch": "https://issues.apache.org/jira/secure/attachment/12803365/LUCENE-2605.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-16T10:18:13+0000",
            "content": "subscribed  ",
            "author": "shenzhuxi",
            "id": "comment-13105979"
        },
        {
            "date": "2011-10-29T20:31:50+0000",
            "content": "since (unescaped, unquoted) whitespace characters is the syntax that QueryParser uses to indicate the transition between clauses in a BooleanQuery, changing this (either in QueryParser or in some new query parser) would require coming up with some new syntax.  (or in the case of a special case query parser like the FieldQParser in Solr, eliminating the possibility of expressing multi-clause queries) ",
            "author": "Hoss Man",
            "id": "comment-13139429"
        },
        {
            "date": "2012-06-11T02:44:48+0000",
            "content": "subscribed - Current client has index full of clothing - a search for \"dress shoes\" will return results containing womens' dresses and running shoes. That's not really acceptable. ",
            "author": "John Berryman",
            "id": "comment-13292620"
        },
        {
            "date": "2012-06-12T16:08:38+0000",
            "content": "There is somewhat of a workaround for this for defType=lucene. Just escape every whitespace with a slash. So instead of new dress shoes search for new\\ dress\\ shoes. Of course you lose the ability to use normal lucene syntax.\n\nI was hoping that this workaround would also work for defType=dismax, but with or without the escaped whitespace, queries get interpreted the same, incorrect way. For instance, assume I have the following line in my synonyms.txt: dress shoes => dress_shoes. Further assume that I have a field experiment that gets analysed with synonyms. A search for new dress shoes (with or without escaped spaces) will be interpreted as \n\n+((experiment:new)~0.01 (experiment:dress)~0.01 (experiment:shoes)~0.01) (experiment:\"new dress_shoes\"~3)~0.01\n\nThe first clause is manditory and contains independently analysed tokens, so this will only match documents that contain \"dress\", \"new\", or \"shoes\", but never \"dress shoes\" because analysis takes place as expected at index time. ",
            "author": "John Berryman",
            "id": "comment-13293722"
        },
        {
            "date": "2012-06-12T16:33:52+0000",
            "content": "My thought on the original issue is that most query parsers should accumulate adjacent terms without intervening operators as a \"term list\" (quoted phrases would be a second level of term list) and that there needs to be a \"list\" interface for query term analysis.\n\nRather than simply present a raw text stream for the sequence/list of terms, each term would be fed into the token stream with an attribute that indicates which source term it belongs to.\n\nThe synonym processor would see a clean flow of terms and do its processing, but would also need to associate an id with each term of a multi-term synonym phrase so that multiple multi-word synonym choices for the same input term(s) don't get mixed up (i.e., multiple tokens at the same position with no indication of which original synonym phrase they came from).\n\nBy having those ID's for each multi-term synonym phrase, the caller of the list analyzer could then recontruct the tree of \"OR\" expressions for the various multi-term synonym phrases. ",
            "author": "Jack Krupansky",
            "id": "comment-13293748"
        },
        {
            "date": "2012-06-12T21:41:21+0000",
            "content": "(How's it going Jack) Interesting idea, though I really need to crack into the QueryParser and play around a little bit before I have a strong opinion myself. ",
            "author": "John Berryman",
            "id": "comment-13293940"
        },
        {
            "date": "2013-07-23T18:44:49+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717067"
        },
        {
            "date": "2014-04-16T12:54:55+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970926"
        },
        {
            "date": "2016-03-09T21:15:16+0000",
            "content": "Is that resolved? Anyone working on it? Thanks ",
            "author": "Fuad Efendi",
            "id": "comment-15188046"
        },
        {
            "date": "2016-05-11T03:08:27+0000",
            "content": "Initial patch against the classic Lucene QueryParser grammar only.  Runs of whitespace-separated text with no operators are now sent as a single input to the analyzer, rather than first splitting on whitespace. \n\nThere are 10 failing tests in the queryparser module (didn't try anywhere else yet), mostly caused by the way getFieldQuery() produces a nested query when there are multiple terms.  I'll look into how to address that. ",
            "author": "Steve Rowe",
            "id": "comment-15279422"
        },
        {
            "date": "2016-05-13T04:19:09+0000",
            "content": "Patch fixing up two problems: \n\n\n\tMultiple whitespace-separated terms' TermQuery-s within a BooleanClause are now flattened directly into the output Query list, rather than inserting the BooleanClause.\n\tMultiFieldQuery's getFieldQuery() is modified to recombine multiple terms from each field's query, to produce a series of disjunctions of  term against each field.\n\n\n\nAll queryparser module tests now pass, with the exception of the flexible query parser's TestStandardQP run with QueryParserTestBase.testQPA().  Since this patch doesn't modify anything about the flexible query parser, this is not surprising. ",
            "author": "Steve Rowe",
            "id": "comment-15282380"
        },
        {
            "date": "2016-06-04T00:37:51+0000",
            "content": "Patch, I think it's ready.\n\nI've pulled MockSynonymFilter/Analyzer out into their own files in lucene-test-framework, and added tests for it, and added a fixed multi-term source synonym with one single-term target.\n\nI added tests to TestQueryParser using the modified MockSynonymAnalyzer ensuring operators block multi-term analysis when they should and don't when they shouldn't.\n\nI'll go make issues now for converting Solr's clone of this QueryParser, and the standard flexible query parser, to add the same capabilities. ",
            "author": "Steve Rowe",
            "id": "comment-15315179"
        },
        {
            "date": "2016-06-11T12:19:50+0000",
            "content": "+1. I did not think it would ever get fixed! ",
            "author": "Robert Muir",
            "id": "comment-15325840"
        },
        {
            "date": "2016-06-11T13:36:10+0000",
            "content": "Incredible! \n\nStrong +1 ",
            "author": "Uwe Schindler",
            "id": "comment-15325853"
        },
        {
            "date": "2016-06-11T13:58:49+0000",
            "content": "This one was really painful problem (unexpected \"tokenization\" by query parser!) \nThank you for fixing that! ",
            "author": "Fuad Efendi",
            "id": "comment-15325862"
        },
        {
            "date": "2016-06-14T17:49:00+0000",
            "content": "Steve Rowe you are about to become everyone's hero and a household name! \nIs this going to be in the upcoming 6.1? ",
            "author": "Otis Gospodnetic",
            "id": "comment-15330012"
        },
        {
            "date": "2016-06-14T18:34:23+0000",
            "content": "No, it will not be in 6.1, but I expect it will make 6.2. ",
            "author": "Steve Rowe",
            "id": "comment-15330114"
        },
        {
            "date": "2016-06-24T16:25:14+0000",
            "content": "Patch adding an option to preserve the old behavior: {set/get}SplitOnWhitespace(), defaulting to true (the current behavior).\n\nThough nobody said so here, on the Solr issue (SOLR-9185), a couple people mentioned that the old behavior should be preserved, and not be the default until a major release.\n\nThat's what this patch does. ",
            "author": "Steve Rowe",
            "id": "comment-15348523"
        },
        {
            "date": "2016-06-28T00:04:58+0000",
            "content": "Patch adds lucene-test-framework files missing from last version of the patch.  Also adds a CHANGES entry.\n\nI plan on committing in a couple days if there are no objections. ",
            "author": "Steve Rowe",
            "id": "comment-15352091"
        },
        {
            "date": "2016-07-01T01:39:41+0000",
            "content": "Okay, really final patch.  On SOLR-9185 I was having trouble integrating the Solr standard QP's comment support with the whitespace tokenization I introduced here, so I tried switching the Solr parser back to ignoring both whitespace and comments, and it worked.  The patch brings this grammar simplification back here too - in addition to many fewer whitespace mentions in the rules, fewer (and less complicated) lookaheads are required.\n\nI've included the generated files in the patch.\n\nNo tests changed from the last patch.\n\nAll Lucene tests pass, and precommit passes. ",
            "author": "Steve Rowe",
            "id": "comment-15358207"
        },
        {
            "date": "2016-07-05T22:06:03+0000",
            "content": "Commit 7d092fac4eabab42006e8e2b5c8a149cb266350c in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7d092fa ]\n\nLUCENE-2605: Add classic QueryParser option setSplitOnWhitespace() to control whether to split on whitespace prior to text analysis.  Default behavior remains unchanged: split-on-whitespace=true. ",
            "author": "ASF subversion and git services",
            "id": "comment-15363352"
        },
        {
            "date": "2016-07-05T22:06:05+0000",
            "content": "Commit 17d113dac1e6081a48144679234b00a556210160 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=17d113d ]\n\nLUCENE-2605: Add classic QueryParser option setSplitOnWhitespace() to control whether to split on whitespace prior to text analysis.  Default behavior remains unchanged: split-on-whitespace=true. ",
            "author": "ASF subversion and git services",
            "id": "comment-15363353"
        },
        {
            "date": "2016-07-05T22:58:09+0000",
            "content": "Patch for master only that switches the default split-on-whitespace behavior from do to don't.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-15363421"
        },
        {
            "date": "2016-07-05T22:58:37+0000",
            "content": "Commit 24e5c1c20581f115a2948a72a4cef82a232bb28d in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=24e5c1c ]\n\nLUCENE-2605: Classic QueryParser no longer splits on whitespace by default. ",
            "author": "ASF subversion and git services",
            "id": "comment-15363423"
        },
        {
            "date": "2016-07-06T08:52:42+0000",
            "content": "Removing the unused imports from QueryParserTokenManager.java makes precommit pass again. ",
            "author": "Varun Thacker",
            "id": "comment-15364011"
        },
        {
            "date": "2016-07-06T09:24:22+0000",
            "content": "Commit 032e31aea7ce5ea4d396302a1cbeab8a6c525f7d in lucene-solr's branch refs/heads/master from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=032e31a ]\n\nLUCENE-2605: Remove unused imports ",
            "author": "ASF subversion and git services",
            "id": "comment-15364042"
        },
        {
            "date": "2016-07-06T13:18:08+0000",
            "content": "Removing the unused imports from QueryParserTokenManager.java makes precommit pass again.\n\nThanks Varun Thacker!  I forgot to run precommit after I regenerated on master to change the default split-on-whitespace option. ",
            "author": "Steve Rowe",
            "id": "comment-15364287"
        },
        {
            "date": "2016-07-09T19:36:37+0000",
            "content": "Just adding a little note that SimpleQParser parses on whitespace and analyzes tokens separately.  Some day it'd be nice to see that one updated. ",
            "author": "David Smiley",
            "id": "comment-15369262"
        },
        {
            "date": "2016-07-12T06:59:32+0000",
            "content": "David Smiley I think you can already disable splitting on whitespace with the SimpleQueryParser by disabling the whitespace operator?  ",
            "author": "Adrien Grand",
            "id": "comment-15372289"
        },
        {
            "date": "2016-07-14T04:25:19+0000",
            "content": "Adrien Grand Indeed you are right!  I didn't think to look in the operator list, and didn't notice a test for it.  I just tried it out using Solr. ",
            "author": "David Smiley",
            "id": "comment-15376289"
        },
        {
            "date": "2016-08-26T13:59:31+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. ",
            "author": "Michael McCandless",
            "id": "comment-15438995"
        },
        {
            "date": "2016-09-30T18:31:25+0000",
            "content": "Hi, I just installed Solr 6.2.1 to see if this patch fixes the query-time analyzer filter for multi-word synonyms. \nBut unfortunately I can see no difference: still it seems that the queryparser sends each whitespace separated term. \nReading the discussion above, it seems that splitting on whitespace is disabled by default now.\n\nHow can I test if this works?\nAny example configuration would be very helpful! ",
            "author": "Dion Olsthoorn",
            "id": "comment-15536668"
        },
        {
            "date": "2016-09-30T19:15:51+0000",
            "content": "Hi Dion Olsthoorn\n\nReading the discussion above, it seems that splitting on whitespace is disabled by default now.\n\nNo, that's wrong - from the commit messages (which you can see in comments on this issue above):\n\nDefault behavior remains unchanged: split-on-whitespace=true\n\nIn Lucene 7.0, though, the default before will switch to split-on-whitespace=false\n\n\nHow can I test if this works?\nAny example configuration would be very helpful!\n\nHave you tried setting setSplitOnWhitespace(false) on the query parser before using it? ",
            "author": "Steve Rowe",
            "id": "comment-15536784"
        },
        {
            "date": "2016-09-30T20:45:48+0000",
            "content": "Thanks for quick response, Steve. I overlooked your last patch was for master only, not for 6.x.\nI'd like to try out the split-on-whitespace=false without coding, but by changing a configuration in solrconfig.xml.\n\nIs that possible? ",
            "author": "Dion Olsthoorn",
            "id": "comment-15537020"
        },
        {
            "date": "2016-09-30T21:36:58+0000",
            "content": "\nI'd like to try out the split-on-whitespace=false without coding, but by changing a configuration in solrconfig.xml.\n\nIs that possible?\n\nNot yet - Solr's \"Lucene\" aka standard query parser is a fork of the classic Lucene query parser that was modified on this issue to enable not splitting on whitespace - Solr doesn't have this support yet.  There is a separate issue to apply the same changes to Solr here: SOLR-9185.  I'm working on it. ",
            "author": "Steve Rowe",
            "id": "comment-15537149"
        },
        {
            "date": "2017-04-20T20:31:22+0000",
            "content": "What about SimpleQueryParser? Can it also be extended with setSplitOnWhitespace? ",
            "author": "Rustam Abdullaev",
            "id": "comment-15977457"
        },
        {
            "date": "2017-04-20T20:40:37+0000",
            "content": "What about SimpleQueryParser? Can it also be extended with setSplitOnWhitespace?\n\nSimpleQueryParser already has its own form of disabling whitespace splitting: just disable the WHITESPACE_OPERATOR, via the 3-arg ctor: http://lucene.apache.org/core/6_5_0/queryparser/org/apache/lucene/queryparser/simple/SimpleQueryParser.html#SimpleQueryParser-org.apache.lucene.analysis.Analyzer-java.util.Map-int-.\n\nE.g. to disable only the WHITESPACE_OPERATOR and leave all other operators enabled (caveat: untested):\n\n\nnew SimpleQueryParser(analyzer, Collections.singletonMap(\"myfield\", 1f), ~SimpleQueryParser.WHITESPACE_OPERATOR);\n\n ",
            "author": "Steve Rowe",
            "id": "comment-15977471"
        }
    ]
}