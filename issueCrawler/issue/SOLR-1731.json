{
    "id": "SOLR-1731",
    "title": "ArrayIndexOutOfBoundsException when highlighting",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "I'm seeing an java.lang.ArrayIndexOutOfBoundsException when trying to highlight for certain queries.  The error seems to be an issue with the combination of the ShingleFilterFactory, PositionFilterFactory and the LengthFilterFactory. \n\nHere's my fieldType definition:\n\n<fieldType name=\"textSku\" class=\"solr.TextField\" positionIncrementGap=\"100\" omitNorms=\"true\">\n  <analyzer type=\"index\">\n    <tokenizer class=\"solr.KeywordTokenizerFactory\" />\n    <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"0\" generateNumberParts=\"0\" catenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"1\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\"/>\n    <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n    <filter class=\"solr.LengthFilterFactory\" min=\"2\" max=\"100\"/>\n  </analyzer>\n  <analyzer type=\"query\">\n      <tokenizer class=\"solr.WhitespaceTokenizerFactory\" />\n      <filter class=\"solr.ShingleFilterFactory\" maxShingleSize=\"8\" outputUnigrams=\"true\"/>\n      <filter class=\"solr.PositionFilterFactory\" />\n      <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"0\" generateNumberParts=\"0\" catenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"1\"/>\n      <filter class=\"solr.LowerCaseFilterFactory\"/>\n      <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n      <filter class=\"solr.LengthFilterFactory\" min=\"2\" max=\"100\"/> <!-- works if this is commented out -->\n    </analyzer>\n</fieldType>\n\nHere's the field definition:\n\n<field name=\"sku_new\" type=\"textSku\" indexed=\"true\" stored=\"true\" omitNorms=\"true\"/>\n\nHere's a sample doc:\n\n<add>\n    <doc>\n      <field name=\"id\">1</field>\n      <field name=\"sku_new\">A 1280 C</field>\n    </doc>\n</add>\n\nDoing a query for sku_new:\"A 1280 C\" and requesting highlighting throws the exception (full stack trace below):  \n\nhttp://localhost:8983/solr/select/?q=sku_new%3A%22A+1280+C%22&version=2.2&start=0&rows=10&indent=on&&hl=on&hl.fl=sku_new&fl=*\n\nIf I comment out the LengthFilterFactory from my query analyzer section everything seems to work.  Commenting out just the PositionFilterFactory also makes the exception go away and seems to work for this specific query.\n\nFull stack trace:\n\njava.lang.ArrayIndexOutOfBoundsException: -1\n    at org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extract(WeightedSpanTermExtractor.java:202)\n    at org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(WeightedSpanTermExtractor.java:414)\n    at org.apache.lucene.search.highlight.QueryScorer.initExtractor(QueryScorer.java:216)\n    at org.apache.lucene.search.highlight.QueryScorer.init(QueryScorer.java:184)\n    at org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(Highlighter.java:226)\n    at org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DefaultSolrHighlighter.java:335)\n    at org.apache.solr.handler.component.HighlightComponent.process(HighlightComponent.java:89)\n    at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)\n    at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n    at org.apache.solr.core.SolrCore.execute(SolrCore.java:1316)\n    at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338)\n    at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:241)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)\n    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)\n    at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n    at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n    at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)\n    at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)\n    at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)\n    at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n    at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)\n    at org.mortbay.jetty.Server.handle(Server.java:285)\n    at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:502)\n    at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:821)\n    at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:513)\n    at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:208)\n    at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:378)\n    at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:226)\n    at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12803976",
            "date": "2010-01-23T00:58:23+0000",
            "content": "Can't you use WhitespaceTokenizer for index?  "
        },
        {
            "author": "Tim Underwood",
            "id": "comment-12803990",
            "date": "2010-01-23T01:39:47+0000",
            "content": "I don't think that gives me what I want.  I'm indexing skus that might be in various formats (I'll usually only know about 1 or 2 of the formats).  e.g.:\n\nA 1280 C\nA 12 80 C\nA12 80C\nA1280C\nA-1280-C\nA.1280.C\n\nAs far as my application cares, those are all equivalent and should just be indexed as:\n\na1280c\n\nOn the query side of things I want to match any of the formats listed above plus stuff like:\n\nFoo Bar A 12 80 C\nFoo Bar A 1280 C\nFoo Bar A1280C\n\nMy current setup seems to do a pretty good job of matching.  If I use the WhitespaceTokenizer for index (and disable the LengthFilterFactory) then I end up with different terms being indexed depending on the format of the sku:\n\nA 1280 C => a, 1280, c\nA12 80C => a12, 80c\nA 12 80 C => a, 12, 80, c "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12804087",
            "date": "2010-01-23T14:46:40+0000",
            "content": "So why don't you uni-gram on both index and query for sku field?\n\n\n<fieldType name=\"text_1g\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n    <analyzer type=\"index\">\n        <charFilter class=\"solr.MappingCharFilterFactory\" mapping=\"mapping.txt\"/>\n        <tokenizer class=\"solr.NGramTokenizerFactory\" minGramSize=\"1\" maxGramSize=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n    </analyzer>\n    <analyzer type=\"query\">\n        <tokenizer class=\"solr.NGramTokenizerFactory\" minGramSize=\"1\" maxGramSize=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n    </analyzer>\n</fieldType>\n\n\n\n\nAs far as my application cares, those are all equivalent and should just be indexed as:\n\na1280c\n\nTo eliminate space/period/hyphen, mapping.txt would look like:\n\n\n\" \" => \"\"\n\".\" => \"\"\n\"-\" => \"\"\n\n\n "
        },
        {
            "author": "Leonhard Maylein",
            "id": "comment-12891018",
            "date": "2010-07-22T06:21:10+0000",
            "content": "We have the same problem whenever we search for a word which has synonyms defined. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16019003",
            "date": "2017-05-21T22:19:40+0000",
            "content": "Closing ancient issue as cannot reproduce. If this was still a bug it would surface pretty fast. Please re-open if you believe work is needed on this. "
        }
    ]
}