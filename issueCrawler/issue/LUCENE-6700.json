{
    "id": "LUCENE-6700",
    "title": "FSDirectory can't open indexes that are symlinks, due to a deficiency in Files.createDirectories",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.0",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Lucene, using FSDirectory (via NIOFS directory) cannot open an index from a Path that is a symbolic link to an actual index directory.  Trying to do so generates an exception stack like:\n\nException in thread \"main\" java.nio.file.FileAlreadyExistsException: maildex.idx\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:88)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:384)\n\tat java.nio.file.Files.createDirectory(Files.java:674)\n\tat java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)\n\tat java.nio.file.Files.createDirectories(Files.java:727)\n\tat org.apache.lucene.store.FSDirectory.<init>(FSDirectory.java:128)\n\tat org.apache.lucene.store.NIOFSDirectory.<init>(NIOFSDirectory.java:64)\n\tat org.apache.lucene.store.NIOFSDirectory.<init>(NIOFSDirectory.java:74)\n\nThis problem occurs on both Linux and Solaris (which probably use the same SPI for Unix file systems at the bottom of the java.nio.file stack.)\n\nThis problem has been noted in the OpenJDK issue tracker at:\n\nhttps://bugs.openjdk.java.net/browse/JDK-8130464\n\nAnd closed as \"Not an Issue\" because Files.createDirectories is meant to operate on directories, and a symlink is not a directory.  This doesn't strike me as particularly helpful, but I guess is sort of makes sense in a broken-by-design way.\n\nThe work-around is simply to move or copy the index to the place where I want it, but this makes concurrent read-only development on the index difficult when the index is large.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}