{
    "id": "LUCENE-6032",
    "title": "Dealing with slow iterators",
    "details": {
        "type": "Wish",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "This is a recurring issue (for instance already discussed in LUCENE-5418) but queries can sometimes be super slow if they wrap a filter that provides linear-time nextDoc/advance.\n\nLUCENE-5418 has the following comment:\n\nNew patch, throwing UOE from DocIdSet.iterator() for the Filter returned by Range.getFilter(). I like this approach: it's safer for the user so they don't accidentally apply a super slow filter.\n\nI like this approach because doc id sets not providing efficient iteration should really be an exception rather than a common case. In addition, using an exception has the benefit of propagating the information through the call stack, which would not be the case if we used null or a sentinel value to say that the iterator is super slow. So if you write a filter that can wrap other filters and doesn't know how to deal with filters that don't support efficient iteration, you do not need to modify your code: it will work just fine with filters that support fast iteration and will fail on filters that don't.\n\nSomething I would like to explore is whether things like FilteredQuery could catch this exception in order to fall back automatically to a random-access strategy?\n\nThe general idea I have is that it is ok to apply a random filter as long as you have a fast iterator to drive iteration? So eg. a filtered query based on a slow iterator would make sense, but not a ConstantScoreQuery that would wrap a filter since it would need to evaluate the filter on all non-deleted documents (it would propagate the exception of the filter).",
    "attachments": {
        "LUCENE-6032.patch": "https://issues.apache.org/jira/secure/attachment/12677992/LUCENE-6032.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14188955",
            "author": "Adrien Grand",
            "content": "Here is a patch just to show the idea (it doesn't pass tests anyway since we have a couple of tests that wrap slow filters into a CSQ to test that they match the right docs). ",
            "date": "2014-10-29T20:37:31+0000"
        },
        {
            "id": "comment-14190008",
            "author": "Robert Muir",
            "content": "I dont think docidset.iterator() should be allowed to thru UOE like this.\n\nI don't like slow iterators: they are broken, but they should not so heavily impact the rest of the query api. this makes lucene too hard to use. ",
            "date": "2014-10-30T12:54:35+0000"
        },
        {
            "id": "comment-14323100",
            "author": "Adrien Grand",
            "content": "LUCENE-6198 provides a better alternative.  ",
            "date": "2015-02-16T18:14:18+0000"
        }
    ]
}