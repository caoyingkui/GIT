{
    "id": "SOLR-5722",
    "title": "Add catenateShingles option to WordDelimiterFilter",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Apologies if I put this in the wrong spot. I'm attaching a patch (against current trunk) that adds support for a 'catenateShingles' option to the WordDelimiterFilter. \n\nWe (National Library of Australia - NLA) are currently maintaining this as an internal modification to the Filter, but I believe it is generic enough to contribute upstream.\n\nDescription:\n=========\n\n/**\n * NLA Modification to the standard word delimiter to support various\n * hyphenation use cases. Primarily driven by requirements for\n * newspapers where words are often broken across line endings.\n *\n *  eg. \"hyphenated-surname\" is printed printed across a line ending and\n *         turns out like \"hyphen-ated-surname\" or \"hyphenated-sur-name\".\n *\n *  In this scenario the stock filter, with 'catenateAll' turned on, will\n *  generate individual tokens plus one combined token, but not\n *  sub-tokens like \"hyphenated surname\" and \"hyphenatedsur name\".\n *\n *  So we add a new 'catenateShingles' to achieve this.\n*/\n\n\n\nIncludes unit tests, and as is noted in one of them CATENATE_WORDS and CATENATE_SHINGLES are logically considered mutually exclusive for sensible usage and can cause duplicate tokens (although they should have the same positions etc).\n\nI'm happy to work on it more if anyone finds problems with it.",
    "attachments": {
        "WDFconcatShingles.patch": "https://issues.apache.org/jira/secure/attachment/12628674/WDFconcatShingles.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Greg Pendlebury",
            "id": "comment-13900006",
            "date": "2014-02-13T04:23:35+0000",
            "content": "Patch against trunk : http://svn.apache.org/repos/asf/lucene/dev/trunk (r1567824) "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13900154",
            "date": "2014-02-13T09:24:25+0000",
            "content": "Does the HyphenatedWordsFilter not help in this case?\n\nhttps://cwiki.apache.org/confluence/display/solr/Filter+Descriptions#FilterDescriptions-HyphenatedWordsFilter "
        },
        {
            "author": "Greg Pendlebury",
            "id": "comment-13902824",
            "date": "2014-02-16T20:36:56+0000",
            "content": "I don't think it does. It has been a while since we looked into it, and that link is currently returning 503 for me, but my understanding was that the HyphenatedWordsFilter put two tokens back together when a hyphen was found on the end of the first token. The catenateShingles options we are using addresses the scenario where multiple hyphens are found internal to a single token. "
        },
        {
            "author": "Greg Pendlebury",
            "id": "comment-13903781",
            "date": "2014-02-18T04:55:04+0000",
            "content": "The link to the doco is working for me today so I took a quick look. I think the other reason that the HyphenatedWordsFilter is not suitable is that it removes the hyphen from the material assuming that it can only have one meaning. The specific circumstances I am considering is when the hyphen is part of a legitimately hyphenated word that just happen to break across a line wrap. eg. 'up-{\\n}to-date'\n\nThe HyphenatedWordsFilter would turn this into 'upto-date', and cause user searches of 'up to date' to not match, since no filters later in the chain can really pull 'upto' apart again. Whereas the 'catenateShingles' option is intended to preserve the word delimiter and provide all the permutations a user might type to find that term: \"up to date\", \"upto date\", \"up todate\", \"uptodate\" "
        }
    ]
}