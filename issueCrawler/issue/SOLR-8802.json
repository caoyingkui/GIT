{
    "id": "SOLR-8802",
    "title": "Make remaining mutable Queries immutable",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "See LUCENE-6531\nMutable queries are an issue for automatic filter caching since modifying a query after it has been put into the cache will corrupt the cache. We should make all queries immutable (up to the boost) to avoid this issue.\n\nSince they are part of the public API I would suggest splitting them in an immutable class and a builder like was done for most other Queries before releasing an official 6.x version\n\nI did a quick scan through all derived classes of Query and I compiled the following list (ignoring sources in test or contrib folders)\nSome of them are already marked as experimental (but should perhaps receive the \"official\" @lucene.experimental tag ?)\nFor some it's possibly not an issue since they should never end up in a filter cache (like MoreLikeThisQuery ?), but then a comment specifying the exception to the rule should perhaps be added.\n\n\n\tsolr/core:\n\t\n\t\torg.apache.solr.search.ExtendedQueryBase: Several derived classes, among which:\n\t\torg.apache.solr.query.FilterQuery\n\t\torg.apache.solr.query.SolrRangeQuery (marked as @lucene.experimental)\n\t\torg.apache.solr.search.RankQuery (marked in comment as experimental, but not its derived classes)\n\t\torg.apache.solr.search.WrappedQuery\n\t\torg.apache.solr.search.join.GraphQuery (marked as @lucene.experimental)\n\t\torg.apache.solr.search.SolrConstantScoreQuery (marked in comment as experimental, but not the derived FunctionRangeQuery)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-08T15:35:56+0000",
            "author": "Yonik Seeley",
            "content": "This really isn't as much of an issue / requirement for Solr... we've never modified queries after we use them, and it would be an error to do so. ",
            "id": "comment-15185093"
        },
        {
            "date": "2016-03-08T19:47:48+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Would there be a problem with enforcing this in the code as this ticket suggests? ",
            "id": "comment-15185634"
        },
        {
            "date": "2016-03-08T20:33:49+0000",
            "author": "Yonik Seeley",
            "content": "\nI assume not (as long as it doesn't introduce extra inefficiencies, etc).  Just pointing out that it's not actually a requirement for us that queries be \"really\" immutable, so it's a practical decision on a case-by-case basis rather than \"we must do this at all costs\" type of thing. ",
            "id": "comment-15185736"
        },
        {
            "date": "2016-03-08T20:36:39+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I see. I just think this could protect people that writes plugins in Solr from bugs difficult to track. ",
            "id": "comment-15185738"
        },
        {
            "date": "2016-03-08T20:47:30+0000",
            "author": "Yonik Seeley",
            "content": "\nYeah, I understand, but it seems like low priority.  We've had mutable queries for the entirety of Solr's lifetime, and it really hasn't been an issue. \nI personally would not trade off performance (hypothetically) for safety here.   IMO, all java plugins are expert level. ",
            "id": "comment-15185756"
        }
    ]
}