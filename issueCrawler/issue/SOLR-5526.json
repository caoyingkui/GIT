{
    "id": "SOLR-5526",
    "title": "Query parser extends standard cause NPE on Solr startup",
    "details": {
        "affect_versions": "4.5.1,                                            4.6,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Adding any custom query parser extending standard one with non-final field NAME lead to messy NullPointerException during Solr startup.\n\nDefinition of standard parsers is located in  QParserPlugin.standardPlugins static array. The array contains names from static NAME fields and classes for each plugin.                       \n\nBut all of listed parsers are derived from QParserPlugin, so we have circular dependency of static fields.\n\nNormally, class loader start initializing QParserPlugin before all listed plugins in SolrCore.initQParsers, and array elements referenced to NAME plugins' fields are filled properly.\n\nCustom parsers are instantiated before standard parsers. And when we subclass plugin with non-final NAME field and add it to Solr via solrconfig.xml, class loader start loading our class before QParserPlugin. Because QParserPlugin is a superclass for plugin, it must be initialized before subclasses, and static dereferencing cause null elements in standardPlugins array because it filled before NAME field of loading plugin's superclass.\n\nHow to reproduce:\n\n\tCheckout Solr (trunk or stable)\n\tAdd the following line to solr/example/solr/collection1/conf/solrconfig.xml\n  <queryParser name=\"fail\" class=\"solr.search.LuceneQParserPlugin\"/>\n\tCall ant run-example in solr folder\n\n\n\nPossible workarounds:\n\n\tdev-workaround: add int workaround = QParserPlugin.standardPlugins.length; as a first line to\n  SolrCore.initQParsers\n\tuser-workaround: add plugin with final NAME field (edismax) to solrconfig.xml  before subclasses of standard plugins.\n  <queryParser name=\"workaround\" class=\"solr.search.ExtendedDismaxQParserPlugin\"/>\n\n\n\nPossible fix:\nMove standardPlugins to new final class to break circular dependency.",
    "attachments": {
        "SOLR-5526-tests.patch": "https://issues.apache.org/jira/secure/attachment/12624118/SOLR-5526-tests.patch",
        "SOLR-5526.patch": "https://issues.apache.org/jira/secure/attachment/12616764/SOLR-5526.patch",
        "NPE_load_trace": "https://issues.apache.org/jira/secure/attachment/12623856/NPE_load_trace",
        "SOLR-5526-final-names.patch": "https://issues.apache.org/jira/secure/attachment/12617138/SOLR-5526-final-names.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Nikolay Khitrin",
            "id": "comment-13837641",
            "date": "2013-12-03T12:43:01+0000",
            "content": "I've attached patch where all static variables from QParserPlugin were moved to inner static final class QParserPlugin.Defaults. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13837937",
            "date": "2013-12-03T17:42:35+0000",
            "content": "Ouch!\n\nNikolay: Nice diagnoses! thanks for digging into this.\n\nMaybe i'm missing something, but isn't the root level bug really that the standard parsers should all be declaring the static NAME as final? ... even with your proposed change, it seems dangerous to me that those NAME variables are mutable.\n\nIf we fix them all to be \"final\" then the problem goes away w/o needing the rest of your patch, correct?\n\nWe should also be able to whip up a simple test using reflection to fail the build if anyone ever adds a class to QParserPlugin.standardPlugins w/o static final NAME.\n\nYou mentioned discovering this problem because you have custom query parsers extending some standard one where NAME isn't final \u2013 \nIs there an aspect of this bug that you're seeing with your custom parser that wouldn't be fixed with the solution i'm suggesting? "
        },
        {
            "author": "Nikolay Khitrin",
            "id": "comment-13838764",
            "date": "2013-12-04T09:27:22+0000",
            "content": "I think making all NAMEs final will fix the issue.\n\nThere is extremely artificial case with non compile time constant final NAME field... \n(How to reproduce: \non edismax parser: public static final String NAME = QParserPlugin.DEFAULT_QTYPE + \"edismax\"; \nsolrconfig.xml: <queryParser name=\"fail\" class=\"solr.search.ExtendedDismaxQParserPlugin\"/> )\nBut I absolutely cannot imagine this in real life. \n\nSo I propose to apply your suggestion as a hotfix and do calmly think about plugins list structure and location. \nWill it be located in abstract supeclass field? Is it good? "
        },
        {
            "author": "Nikolay Khitrin",
            "id": "comment-13839979",
            "date": "2013-12-05T09:43:53+0000",
            "content": "Attached patch adding final modifiers to all names for standard parsers, as mentioned in your suggestion. "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13875868",
            "date": "2014-01-19T14:02:25+0000",
            "content": "NPE stacktrace during solr load "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13877426",
            "date": "2014-01-21T12:33:41+0000",
            "content": "Missed final NAME field in org.apache.solr.search.SimpleQParserPlugin. Fixed. "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13877427",
            "date": "2014-01-21T12:34:23+0000",
            "content": "Test reproducing NPE on Solr start-up\nTest checking final and static NAME field for all standard parsers "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13877476",
            "date": "2014-01-21T13:56:14+0000",
            "content": "Thanks Vitaliy. Can you please combine the two patches i.e. the test and making the NAME fields final?\n\nJust a tip for the future: Just have the same names for each iteration of the patch. Jira will automatically grey out old patches and keep the latest one highlighted. It also helps reviewers in figuring out which is the the latest patch. "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13877842",
            "date": "2014-01-21T20:51:45+0000",
            "content": "Combined:\nMissed final NAME field fixes. \nTest reproducing NPE on Solr start-up\nTest checking final and static NAME field for all standard parsers "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13877902",
            "date": "2014-01-21T21:58:40+0000",
            "content": "Hey Vitaliy,\n\nFor the most part, these tests look great \u2013 just a few minor things i think we should try to clean up...\n\n\n\tQParserPlugin.standardPlugins's javadoc needs to point out the importance of these names being static & final so people aren't surprised by these  tests when new parsers are added in the future.\n\tTestStandardQParsers is doing something sufficiently odd that it really needs some javadocs explaining why it exists (ie: mention the class loading problems associated if there is a standardPlugin that has a non-static, non-final name, with an @see this issue, @see QParserPlugin.standardPlugins, etc...)\n\twe should probably make TestStandardQParsers assert that the static & final name it finds in each class matches the name associated in QParserPlugin.standardPlugins.\n\tsolrconfig-query-parser-init.xml has a cut & paste comment referring to an unrelated test.\n\tTestInitQParser should have a javadoc comment explaining what the point of the test is\n\tTestInitQParser should actaully do a query using the \"fail\" parser registered in the config, to help future-proof us against someone unwittingly changing the test config in a way that defeats the point of the test.\n\n\n\n...if you want to take a crack at this that would be great, if not i'll try to make some time later this week. "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13878953",
            "date": "2014-01-22T18:21:02+0000",
            "content": "minor fixes:\n QParserPlugin.standardPlugins's javadoc needs to point out the importance of these names being static & final so people aren't surprised by these  tests when new parsers are added in the future.\nAdded relevant javadocs.\n\nTestStandardQParsers is doing something sufficiently odd that it really needs some javadocs explaining why it exists (ie: mention the class loading problems associated if there is a standardPlugin that has a non-static, non-final name, with an @see this issue, @see QParserPlugin.standardPlugins, etc...)\nAdded javadocs\n we should probably make TestStandardQParsers assert that the static & final name it finds in each class matches the name associated in QParserPlugin.standardPlugins.\nThats actually what TestStandardQParsers does. Unit test takes classes registered in QParserPlugin.standardPlugins and ensure that each class has final and static NAME field.\nAdded relevant javadocs to TestStandardQParsers.\n solrconfig-query-parser-init.xml has a cut & paste comment referring to an unrelated test.\nFixed, added relevant comments.\n\n TestInitQParser should have a javadoc comment explaining what the point of the test is\nFixed, added relevant comments.\n\nTestInitQParser should actaully do a query using the \"fail\" parser registered in the config, to help future-proof us against someone unwittingly changing the test config in a way that defeats the point of the test.\nThis test alerady does query using defType=fail, so i expect this registered QParser used and return result. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13891443",
            "date": "2014-02-04T23:44:05+0000",
            "content": "This test alerady does query using defType=fail, so i expect this registered QParser used and return result.\n\nYep yep ... i must have misread that, sorry.\n\nThats actually what TestStandardQParsers does. Unit test takes classes registered in QParserPlugin.standardPlugins and ensure that each class has final and static NAME field.\n\nCorrect, but that's not the point i was making in that bullet point \u2013 what i said was as long as we were doing that, we should also make sure the NAME field matches the registered name in QParserPlugin.standardPlugins.\n\nI'm attaching a patch that eliminates some existing duplication in your TestStandardQParsers and adds the type of check i was refering to ... running full tests & precommit now, and unless something weird pops up i'll commit. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13891529",
            "date": "2014-02-05T00:39:12+0000",
            "content": "fixed a javadoc mistake caught by \"ant precommit\"\n\nGoing to commit & backport now "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13891533",
            "date": "2014-02-05T00:41:26+0000",
            "content": "Commit 1564588 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1564588 ]\n\nSOLR-5526: Fixed NPE that could arrise when explicitly configuring some built in QParserPlugins "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13891588",
            "date": "2014-02-05T01:43:32+0000",
            "content": "Commit 1564606 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1564606 ]\n\nSOLR-5526: Fixed NPE that could arrise when explicitly configuring some built in QParserPlugins (merge r1564588) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13891589",
            "date": "2014-02-05T01:43:35+0000",
            "content": "Thanks Nikolay & Vitaliy! "
        }
    ]
}