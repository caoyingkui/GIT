{
    "id": "LUCENE-1203",
    "title": "[PATCH] Allow setting IndexReader to IndexSearcher",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.3.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "As I've received no counter-arguments for my Lucene Java-User mailing list (see http://mail-archives.apache.org/mod_mbox/lucene-java-user/200803.mbox/%3Ca4d7dcf50803050918h68defe83v66e657debb76d3f3@mail.gmail.com%3E), I would like to propose adding a setter to set new instance of IndexReader to IndexSearcher. \n\nWhy is this needed?\n\nThe FAQ (http://wiki.apache.org/lucene-java/LuceneFAQ#head-48921635adf2c968f7936dc07d51dfb40d638b82) says:\n\"Make sure you only open one IndexSearcher, and share it among all of the threads that are doing searches \u2013 this is safe, and it will minimize the number of files that are open concurently.\"\nSo does the JavaDoc (http://lucene.apache.org/java/2_3_1/api/core/org/apache/lucene/search/IndexSearcher.html).\n\nIn my application, I don't want to expose anything about IndexReader; all they need to know is Searcher - see my post to the mailing list how would I do this. However, if the index is updated, reopened reader cannot be set back to IndexSearcher, a new instance of IndexSearcher needs to be created (which contradicts FAQ and Javadoc).\n\nAt the moment, the only way to go around this is to create a surrogate subclass of IndexSearcher and set new instance of IndexReader. A simple setter would just do the job.",
    "attachments": {
        "IndexReaderSetter4IndexSearcher.patch": "https://issues.apache.org/jira/secure/attachment/12377243/IndexReaderSetter4IndexSearcher.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-06T16:14:28+0000",
            "content": "Constructing a new IndexSearcher is very lightweight, esp in comparison to creating an new IndexReader.\nThe Hits class also assumes a Searcher doesn't change, so I think best practice would be to create a new Searcher. ",
            "author": "Yonik Seeley",
            "id": "comment-12575754"
        },
        {
            "date": "2008-03-06T16:24:40+0000",
            "content": "In this case FAQ and IndexSearcher Javadoc needs updating as they're clearly misleading on this case.\n\nWhat would be your recommendation for minimizing the number of file descriptors used? We experience this problem and it's a real show stopper for us (see my post to the users mailing list).\n\nAlso, could you elaborate why is it harmful to add the setter? I was taught to avoid object creation if I can to save performance on garbage collection (regardless if the object is lightweight or not). Say, if I add 1000 new objects to the index, I potentially need to create 1000 object instances. Can't think of any reason of why can it be good.\n\nThanks! ",
            "author": "Mindaugas \u017dak\u0161auskas",
            "id": "comment-12575757"
        },
        {
            "date": "2008-03-06T16:38:24+0000",
            "content": "I should be more explicit... creating an IndexSearcher from an existing IndexReader is super lightweight.\nIt's the IndexReader that contains all the state.  If you use an IndexSearcher constructor that doesn't take an IndexReader, then the IndexSearcher creates one itself.\n\n\"Make sure you only open one IndexSearcher, and share it among all of the threads that are doing searches\"\nis correct advice.  It means for a particular view of the index.  A new IndexSearcher should be opened when a new view of the index is desired.  Make sense? ",
            "author": "Yonik Seeley",
            "id": "comment-12575764"
        },
        {
            "date": "2008-03-06T17:10:39+0000",
            "content": "... is correct advice. It means for a particular view of the index.\n\nExactly! IndexSearcher is only 100% correct until something new is added to the index. Your second part of comment (about new IndexSearcher) should definitely be added to the FAQ/Javadoc.\n\nWe tend to use Lucene in a very similar way databases are used: items are added very, very frequently and there's an immediate need to have the up-to-date Searcher; while processes that add the new data and poll the index are asynchronous.\nSuch a situation generates plenty of Searchers which I wanted to avoid. ",
            "author": "Mindaugas \u017dak\u0161auskas",
            "id": "comment-12575780"
        },
        {
            "date": "2008-03-06T17:44:17+0000",
            "content": "> there's an immediate need to have the up-to-date Searcher\n\nThat's the problem right there.\n\nAdding a setter on IndexSearcher is not practical because there is a lot of code that assumes that the reader is not changing out from under it.  It's the IndexReader anyway that contains all the resources, so reusing a single IndexSearcher w/o reusing the IndexReader saves nothing. ",
            "author": "Yonik Seeley",
            "id": "comment-12575802"
        },
        {
            "date": "2008-07-14T14:25:29+0000",
            "content": "I know I'm posting this after rather insane amount of time, but just wanted to get an opinion about another approach.\n\nAfter what has been done for LUCENE-743, would it not make sense to add refresh() method to the searcher which would reopen() the reader?\nMy understanding is that even if code bits would be referencing/relying on the old reader, they could still use it as Javadoc says the old one should remain unclosed although the new searches, etc. would carry on with the updated reader. Am I wrong? ",
            "author": "Mindaugas \u017dak\u0161auskas",
            "id": "comment-12613329"
        },
        {
            "date": "2008-07-14T14:38:34+0000",
            "content": "would it not make sense to add refresh() method to the searcher which would reopen() the reader?\n\nWhy not just call reopen() on the reader directly? ",
            "author": "Yonik Seeley",
            "id": "comment-12613332"
        },
        {
            "date": "2008-07-14T14:59:49+0000",
            "content": "Correct me if I'm wrong, but I thought the reopen() returns new instance of the refreshed reader (in a case if the index was modified), but the current instance remains unchanged. If this is true, how would I set the refreshed instance of IndexReader to existing IndexSearcher?\n\nWould be nice if you could confirm this is actually the case (and possibly add a small bit of clarification to the IndexReader Javadoc if my assumptions were wrong).\n\nThanks a lot! ",
            "author": "Mindaugas \u017dak\u0161auskas",
            "id": "comment-12613338"
        },
        {
            "date": "2008-07-14T15:17:59+0000",
            "content": ".bq If this is true, how would I set the refreshed instance of IndexReader to existing IndexSearcher?\n\nCreate a new IndexSearcher with the existing reader.  To put it in context, it's cheaper than creating a String. ",
            "author": "Yonik Seeley",
            "id": "comment-12613341"
        },
        {
            "date": "2008-07-26T13:31:36+0000",
            "content": "Closing as \"won't fix\" for now, since changing the underlying reader on the searcher would be problematic, and the correct way is to create another index searcher with the new reader. ",
            "author": "Yonik Seeley",
            "id": "comment-12617171"
        }
    ]
}