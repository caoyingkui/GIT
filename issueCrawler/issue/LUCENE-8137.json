{
    "id": "LUCENE-8137",
    "title": "GraphTokenStreamFiniteStrings does not handle position inc > 1 in multi-word synoyms",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "7.2.1,                                            master (8.0)",
        "status": "Open",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "The automaton built for graph queries that contain multiple multi-word synonyms does not handle gaps if they appear in the middle of a multi-word synonym. In such case the token next to the gap is considered as part of the multi-word synonym.\u00a0\n\nStop words that appear before or after multi-word synonyms are handled correctly in the current version but\u00a0the synonym rule \"part of speech, pos\" for instance does not create the expected query if \"of\" is removed by a filter that is set after the synonym_graph.\u00a0\u00a0One solution would be to reuse TokenStreamToAutomaton (with minor changes to add the ability to create token transitions rather than chars) which preserves gaps (as a transition) in the produced automaton.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16373058",
            "date": "2018-02-22T16:46:45+0000",
            "content": "A test showing the problem - MockSynonymFilter has synonym \"cavy\" for \"guinea pig\", and the anonymous analyzer below has \"pig\" on its stoplist. QueryBuilder produces a query for only \"cavy\", even though the token stream also contains \"guinea\":\n\nTestQueryBuilder.java\n  public void testGraphStop() {\n    Query syn1 = new TermQuery(new Term(\"field\", \"guinea\"));\n    Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    BooleanQuery synQuery = new BooleanQuery.Builder()\n        .add(syn1, BooleanClause.Occur.SHOULD)\n        .add(syn2, BooleanClause.Occur.SHOULD)\n        .build();\n    BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n        .add(synQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    QueryBuilder queryBuilder = new QueryBuilder(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer();\n        TokenStream stream = new MockSynonymFilter(tokenizer);\n        stream = new StopFilter(stream, CharArraySet.copy(Collections.singleton(\"pig\")));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    });\n    queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n    assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", BooleanClause.Occur.SHOULD));\n  }\n}\n\n ",
            "author": "Steve Rowe"
        }
    ]
}