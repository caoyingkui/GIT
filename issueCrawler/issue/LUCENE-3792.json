{
    "id": "LUCENE-3792",
    "title": "Remove StringField",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Often on the mailing list there is confusion about NOT_ANALYZED.\n\nBesides being useless (Just use KeywordAnalyzer instead), people trip up on this\nnot being consistent at query time (you really need to configure KeywordAnalyzer for the field \non your PerFieldAnalyzerWrapper so it will do the same thing at query time... oh wait\nonce you've done that, you dont need NOT_ANALYZED).\n\nSo I think StringField is a trap too for the same reasons, just under a \ndifferent name, lets remove it.",
    "attachments": {
        "LUCENE-3792_javadocs_3x.patch": "https://issues.apache.org/jira/secure/attachment/12514789/LUCENE-3792_javadocs_3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-16T10:25:57+0000",
            "content": "Setting this as blocker (sorry).\n\nIts a huge trap when someone sets the same Analyzer on IndexWriter and QueryParser\nbut the analysis isn't \"actually the same\". ",
            "author": "Robert Muir",
            "id": "comment-13209250"
        },
        {
            "date": "2012-02-16T10:33:19+0000",
            "content": "On 3.x, I'd like to deprecate NOT_ANALYZED for the same reasons. This at \nleast discourages people from running into that trap there and using\nKeywordAnalyzer instead. ",
            "author": "Robert Muir",
            "id": "comment-13209254"
        },
        {
            "date": "2012-02-16T10:44:43+0000",
            "content": "The backside of this is now, that you need to explicitely use a KeywordAnalyzer now for Primary Key fields. If you don't run those through a query analyzer (e.g. generally produce TermQuery directly) then you have lots of additional work. For simple \"lookup\" queries and indexing a PK key, this is a no go.\n\n-1 on removing that completely, it should simply called different. We should maybe add PKQuery (a ConstantScore TermQuery) and PKField to have a symmetry. ",
            "author": "Uwe Schindler",
            "id": "comment-13209256"
        },
        {
            "date": "2012-02-16T10:48:45+0000",
            "content": "Well we are at a standstill. We constantly get these problems on the users list from NOT_ANALYZED\nand I don't like reintroducing the trap again.\n\nSo I'm -1 to StringField in 4.0 ",
            "author": "Robert Muir",
            "id": "comment-13209258"
        },
        {
            "date": "2012-02-16T10:51:56+0000",
            "content": "I said call it different. ",
            "author": "Uwe Schindler",
            "id": "comment-13209260"
        },
        {
            "date": "2012-02-16T10:59:21+0000",
            "content": "\nIf you don't run those through a query analyzer (e.g. generally produce TermQuery directly) then you have lots of additional work. \n\nThats not true, because keywordanalyzer does nothing to the terms, you can continue to produce termquery directly and it will work.\nSo expert users are fine.\n\nThis issue isnt about expert users, its about how our API traps people that are not expert users. ",
            "author": "Robert Muir",
            "id": "comment-13209267"
        },
        {
            "date": "2012-02-16T10:59:34+0000",
            "content": "Well we are at a standstill. We constantly get these problems on the users list from NOT_ANALYZED\n\nYou cannot prevent users from doing the wrong thing. If you remove StringField completely, pleaese also remove NumericField and force users to use PerFieldAnalyzerWrapper with a NumericTokenStream. If you add a numeric field you cannot ask for it with query parser. If you add a StringField, you cann ask with QueryParser. Simple rule. It must just be clearly documented. And possible StringField renamed.\n\nPeople using primary keys or other untokenized values should simply not use QueryParser. Use a ComstantScoreTermyQuery and you are fine.\n\nThis is all just a documentation problem, so I am completely against removing that. Not everybody is using Lucene purely as a full-text engine. ",
            "author": "Uwe Schindler",
            "id": "comment-13209269"
        },
        {
            "date": "2012-02-16T11:03:51+0000",
            "content": "\nIf you remove StringField completely, pleaese also remove NumericField and force users to use PerFieldAnalyzerWrapper with a NumericTokenStream.\n\nI actually am not sure this is such a bad idea?\n\nIf we were to enforce such a thing, it would also be possible to add a modification to the queryparser (instanceof NumericTokenStream)\nso that numeric fields then work out of the box with the query parser nicely? ",
            "author": "Robert Muir",
            "id": "comment-13209272"
        },
        {
            "date": "2012-02-16T11:06:10+0000",
            "content": "\nNot everybody is using Lucene purely as a full-text engine.\n\nBut we cannot let \"non-fulltext\" uses break the design for the intended use case (full-text). ",
            "author": "Robert Muir",
            "id": "comment-13209273"
        },
        {
            "date": "2012-02-16T11:45:08+0000",
            "content": "Its obvious Uwe and I aren't going to agree here immediately, so here is a patch adding a big warning to 3.x javadocs.\n\nFor now I'd like to apply the same warning to StringField in trunk (I just made the patch against 3.x) ",
            "author": "Robert Muir",
            "id": "comment-13209287"
        },
        {
            "date": "2012-02-16T11:46:10+0000",
            "content": "Sorry, incomplete wording (I forgot to save before svn diff). ",
            "author": "Robert Muir",
            "id": "comment-13209288"
        },
        {
            "date": "2012-02-16T11:53:53+0000",
            "content": "I am fine with that. As I said: We need correct documentation to prevent traps. But removing traps by removing possibilities is the wrong way to go. It will force users to have crazy code for simple things, thats my problem. I don't use QueryParser, so I don't want solutions prefering QueryParser over anything else. QueryParser is just a convenience API around new BQ()...new TQ... E.g., I have my own query parser (and I suggest everybody else to have the same for user-facing queries) that simply analyzes the text and creates a BQ out of all anaylzed terms. No syntax, nothing. And I only execute that one on the field in question. Thats very simplistic but another way to look on things. ",
            "author": "Uwe Schindler",
            "id": "comment-13209290"
        },
        {
            "date": "2012-02-16T15:25:55+0000",
            "content": "OK, i think seriously it would take major work to do something here that would make everyone happy.\n\nI still don't like the situation, but unless there are serious objections, I'd like to commit the javadocs,\njust to hopefully reduce the amount of time this trap gets answered on the user list. ",
            "author": "Robert Muir",
            "id": "comment-13209430"
        },
        {
            "date": "2012-02-16T19:17:44+0000",
            "content": "StrawMan suggestion off the top of my head:\n\n\n\trename NOT_ANALYZED to something like KEYWORD_ANALYZED\n\tdocument KEYWORD_ANALYZED as being a convenience flag (and/or optimization?) for achieving equivalent behavior as using PerFieldAnalyzer with KeywordAnalyzer for this field, and keep using / re-word rmuir's patch warning to make it clear that if you use this at index time, any attempts to construct queries against it using the QueryParser will need KeywordAnalyzer.\n\n\n\n...would that flag name == analyzer name equivalence help people remember not to get trapped by this? ",
            "author": "Hoss Man",
            "id": "comment-13209630"
        },
        {
            "date": "2012-02-16T20:20:40+0000",
            "content": "Hossman I think KEYWORD_ANALYZED is the ideal name for 3.x actually. I think in combination with the javadocs it would be more clear.\n\nThis still leaves the question for trunk (currently StringField):\npositives are that its actually a \"nice\" name, concise and to the point.\nanother positive is that StringField omits things like positions, and in trunk we don't silently fail if you form a phrase from this.\n\none negative is that both StringField and TextField confusingly take String in their ctors, (I've chosen the wrong one myself before on accident).\n\nBasically to me, this is a combination of traps. Trunk is somewhat better because it throws exceptions for positional queries if\nyou actually excluded positions...\n\nin all cases in 3.x, the wrong 'configuration' here creates a situation where the user just 'does not get results' and they have\nno idea why... despite the fact they used the same Analyzer at query-time and index-time like a good user. thats what I find so frustrating. ",
            "author": "Robert Muir",
            "id": "comment-13209697"
        },
        {
            "date": "2012-02-17T01:43:17+0000",
            "content": "\none negative is that both StringField and TextField confusingly take String in their ctors, (I've chosen the wrong one myself before on accident).\n\nWould renaming StringField, as suggested earlier, alleviate this? KeywordAnalyzedField? ",
            "author": "Chris Male",
            "id": "comment-13209973"
        },
        {
            "date": "2012-02-17T05:19:12+0000",
            "content": "A couple of comments:\n\n\n\tNOT_ANALYZED has two variants - with and without norms. I always uses NOT_ANALYZED_NO_NORMS. Is the KWD_ANALYZED suggestion meant to create two variants too? If not, we should somehow let the user be able to express a KWD analyzed field with and without norms.\n\n\n\n\n\tHow about renaming StringField to KeywordField? Same as Chris's idea, but removing Analyzed ... shorter name and still captures the essence of it.\n\n\n\n\n\tAnd maybe TextField -> TokenizedField?\n\n ",
            "author": "Shai Erera",
            "id": "comment-13210062"
        },
        {
            "date": "2012-02-17T06:40:24+0000",
            "content": "\nNOT_ANALYZED has two variants - with and without norms.\n\nYou are right, I forgot about this. For NOT_ANALYZED with norms, we should probably just throw CoderMalfunctionError() ",
            "author": "Robert Muir",
            "id": "comment-13210105"
        },
        {
            "date": "2012-02-17T08:29:53+0000",
            "content": "+1 for KeywordField\n\nFor symmetry i would propose to add a KeywordQuery, too (that rewrites to new ConstantScoreQuery(new TermQuery())). ",
            "author": "Uwe Schindler",
            "id": "comment-13210135"
        },
        {
            "date": "2013-07-23T18:44:21+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716925"
        },
        {
            "date": "2014-04-16T12:54:47+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970882"
        }
    ]
}