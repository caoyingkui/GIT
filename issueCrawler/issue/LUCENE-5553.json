{
    "id": "LUCENE-5553",
    "title": "IndexReader#ReaderClosedListener is not always called on IndexReader#close()",
    "details": {
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index"
        ],
        "affect_versions": "4.7,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.7.1",
            "4.8",
            "6.0"
        ]
    },
    "description": "Today IndexReader#ReaderClosedListener might not be called if the last IndexReader#decRef() call runs into an exception on IndexReader#doClose(). Today we just reset the refCount and never go and call the listeners. There seem to be a bunch of problems here along the same lines but IMO if we close a reader it should close all resources no matter what exception it runs into. What this should do is call the close listeners in a finally block and then rethrow the exception. The real problem here for apps relying on the listener to release resources is that you might leak memory or file handles or whatnot which I think is a bug how we handle closing the IR. As a side-note I think we should never reset the reference here to be honest.  \n\nAlong the same lines I think we need to fix the loop in IndexReader#notifyReaderClosedListeners() to make sure we call all of them in the case any of them throws an exception. It also seems that SegmentCoreReaders#decRef() has a similar problem where for instance a fieldsReader can throw an exception on close and we never call the core listeners.\n\nIMO we need to fix this for 4.7.1",
    "attachments": {
        "LUCENE-5553.patch": "https://issues.apache.org/jira/secure/attachment/12636708/LUCENE-5553.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13946528",
            "author": "Robert Muir",
            "content": "This stuff essentially needs the pattern of IOUtils.close, close everything, deliver the first exception. ",
            "date": "2014-03-25T13:51:54+0000"
        },
        {
            "id": "comment-13946554",
            "author": "Shai Erera",
            "content": "if the last IndexReader#decRef() call runs into an exception on IndexReader#doClose(). Today we just reset the refCount and never go and call the listeners.\n\nAs I read the code, if doClose() hits an exception, we put the reference back, then the exception is thrown further and therefore closed isn't set to true. So the reader is in fact not closed, and therefore you can attempt to r.close() is again? And also that's probably why we don't notify the listeners?\n\nI think we need to fix the loop in IndexReader#notifyReaderClosedListeners() to make sure we call all of them\n\n+1!\n\nIt also seems that SegmentCoreReaders#decRef() has a similar problem where for instance a fieldsReader can throw an exception on close and we never call the core listeners.\n\nHmm ... this is trickier. Here, unlike IndexReader.close(), we don't put the reference back. So if that's a bug, we should put back the reference if any of the IOUtils.close() failed. But if that's ok, then +1 to notify the listeners irregardless if close hit an exception.\n\n\n\n ",
            "date": "2014-03-25T13:59:52+0000"
        },
        {
            "id": "comment-13946578",
            "author": "Shai Erera",
            "content": "As a side-note I think we should never reset the reference here to be honest. \n\nDidn't see that \u2013 if you say that close() should render the IR closed, no matter what exception it hit, then you're right \u2013 we should fix the code to notify the listeners but also mark closed=true. And I think that's not a bad idea!\n\nE.g., I looked at SegmentReader.doClose() and I think it too isn't exception-safe. If any of the CloseableThreadLocals throw an exception (very unlikely), we fail to decRef SegDocValues.\n\nBut what's worse is the whole chain \u2013 IR.close() -> SR.doClose() \u2013 if an exception is thrown from SegDocValues.decRef(), it happens after core.decRef() succeeded. IR.close() hits the exception and doesn't mark itself as closed. So it doesn't notify the listeners cause it thinks it isn't closed, but in fact I think if you try to use it you will hit an exception .. it's in a weird state? ",
            "date": "2014-03-25T14:08:32+0000"
        },
        {
            "id": "comment-13946638",
            "author": "Simon Willnauer",
            "content": "here is a patch that adds a tests for the index reader including faulty listeners etc. I tried to fix the entire chain down to SCR and I dropped putting the reference back since this should really just close everything and hand the exception back. Shai is right you can call it again but this might not help since in some cases the exception is thrown again and that means it leaves you with a half broken reader. It also feels completly odd to call decRef more than once and a close call should close and shouldn't leave a broken reader behind.\n ",
            "date": "2014-03-25T14:49:31+0000"
        },
        {
            "id": "comment-13946687",
            "author": "Simon Willnauer",
            "content": "next iteration. I cleaned up things a bit and got rid of the static helpers in IR. I think it's ready ",
            "date": "2014-03-25T15:39:29+0000"
        },
        {
            "id": "comment-13946693",
            "author": "Shai Erera",
            "content": "Looks good. I'd maybe rename reThrowSilent to reThrowUnchecked cause it's not silent - it sure will hit someone very loudly!  Otherwise, +1! ",
            "date": "2014-03-25T15:44:25+0000"
        },
        {
            "id": "comment-13946719",
            "author": "Simon Willnauer",
            "content": "next iter addressing shais comments and adds a changes entry.  ",
            "date": "2014-03-25T16:04:27+0000"
        },
        {
            "id": "comment-13946720",
            "author": "Michael McCandless",
            "content": "+1 for the patch and to change to \"close really closes and throws first exc\" behavior. ",
            "date": "2014-03-25T16:07:05+0000"
        },
        {
            "id": "comment-13946721",
            "author": "Robert Muir",
            "content": "+1 ",
            "date": "2014-03-25T16:08:21+0000"
        },
        {
            "id": "comment-13946730",
            "author": "ASF subversion and git services",
            "content": "Commit 1581400 from Simon Willnauer in branch 'dev/trunk'\n[ https://svn.apache.org/r1581400 ]\n\nLUCENE-5553: IndexReader#ReaderClosedListener is not always called on IndexReader#close() ",
            "date": "2014-03-25T16:12:29+0000"
        },
        {
            "id": "comment-13946743",
            "author": "ASF subversion and git services",
            "content": "Commit 1581404 from Simon Willnauer in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1581404 ]\n\nLUCENE-5553: IndexReader#ReaderClosedListener is not always called on IndexReader#close() ",
            "date": "2014-03-25T16:22:48+0000"
        },
        {
            "id": "comment-13946766",
            "author": "ASF subversion and git services",
            "content": "Commit 1581408 from Simon Willnauer in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1581408 ]\n\nLUCENE-5553: IndexReader#ReaderClosedListener is not always called on IndexReader#close() ",
            "date": "2014-03-25T16:39:10+0000"
        },
        {
            "id": "comment-13947080",
            "author": "Uwe Schindler",
            "content": "Thanks, cool.\nI knew about this problem, but I was not aware that it is so serious.\nThanks for adding suppressed Exceptions using Throwable#addSupressed(). ",
            "date": "2014-03-25T20:08:14+0000"
        },
        {
            "id": "comment-13957758",
            "author": "Steve Rowe",
            "content": "Bulk close 4.7.1 issues ",
            "date": "2014-04-02T15:04:52+0000"
        }
    ]
}