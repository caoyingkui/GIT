{
    "id": "SOLR-12231",
    "title": "/etc/init.d/solr problem",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "scripts and tools"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "I noticed that there are a couple of minor issues with the init.d script in pretty much every version.\u00a0\n\nBasically, a semicolon (or an escaped semicolon) is missing in the BLUE\u00a0lines blow:\n\n\u00a0\n\nif [ -n \"$RUNAS\" ]; then\n su -c \"SOLR_INCLUDE=\\\"$SOLR_ENV\\\" \\\"$SOLR_INSTALL_DIR/bin/solr\\\" $SOLR_CMD\" - \"$RUNAS\"\n else\n SOLR_INCLUDE=\"$SOLR_ENV\" \"$SOLR_INSTALL_DIR/bin/solr\" \"$SOLR_CMD\"\n fi\n\n\u00a0\n\nWith the added semicolons (escaped where necessary), the code would look like:\u00a0\n\nif [ -n \"$RUNAS\" ]; then\n su -c \"SOLR_INCLUDE=\\\"$SOLR_ENV\\\"\\; \\\"$SOLR_INSTALL_DIR/bin/solr\\\" $SOLR_CMD\" - \"$RUNAS\"*\n else\n *SOLR_INCLUDE=\"$SOLR_ENV\"; \"$SOLR_INSTALL_DIR/bin/solr\" \"$SOLR_CMD\"\n fi",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-17T20:01:11+0000",
            "content": "This is not a syntax error.  This syntax assigns a value to an environment variable in the process created for the following command.\n\nI couldn't find info on this capability in the Bash manual, but here is info from https://help.ubuntu.com/community/EnvironmentVariables:\n\n\nBash's quick assignment and inheritance trick\n\nThe bash shell has a trick to allow us to set one or more environment variables and run a child process with single command. For example, in order to set the \"LANGUAGE\" and \"FOO\" environment variables and then run \"gedit\", we would use the following command:\n\n\nLANGUAGE=he FOO=bar gedit\n\n\n\nNote: When using this command, the new values are only assigned to the environment variables of the child process (in this case gedit). The variables of the shell retain their original values. For instance, in the example above, the value of \"LANGUAGE\" will not change from its original value, as far as subsequent commands to the shell are concerned. ",
            "author": "Steve Rowe",
            "id": "comment-16441413"
        },
        {
            "date": "2018-04-18T04:16:19+0000",
            "content": "Other examples of the quick assignment can be found with this command on a Linux machine, and probably on other UNIX flavors that have an init.d directory:\n\n\ngrep \"[A-Z_][A-Z_]*=[A-Za-z0-9][A-Za-z0-9]* \" /etc/init.d/*\n\n\n\nThis also shows hits where that trick is NOT being used that happen to match the regex. ",
            "author": "Shawn Heisey",
            "id": "comment-16441872"
        },
        {
            "date": "2018-04-18T13:51:18+0000",
            "content": "For some reason, I had to add the semicolons in those lines for Solr to properly load a third party core. (SolrSearch for omeka). Without the semicolons, the omeka core of SolrSearch does not load. ",
            "author": "Lihua Wang",
            "id": "comment-16442528"
        },
        {
            "date": "2018-04-18T14:05:02+0000",
            "content": "I don't know anything about SolrSearch or Omeka, but: adding the semicolons means that the $SOLR_INCLUDE environment variable assignment is not available to bin/solr.  I wonder if the real issue is that the file pointed to by $SOLR_INCLUDE (/etc/default/solr.in.sh by default) is somehow missing/incorrect/malformed?  What do the logs say? ",
            "author": "Steve Rowe",
            "id": "comment-16442554"
        }
    ]
}