{
    "id": "LUCENE-3639",
    "title": "Add test case support for shard searching",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "New test case that helps stress test the APIs to support sharding....",
    "attachments": {
        "LUCENE-3639.patch": "https://issues.apache.org/jira/secure/attachment/12506910/LUCENE-3639.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-11T20:22:45+0000",
            "content": "Initial patch; I think it's close.\n\nIt only tests random TermQuery, verifying the hits match across a IS(MR) and searching as shards... we can improve over time.\n\nI also found a minor bug in TopDocs.merge, where it sets maxScore to Float.MIN_VALUE instead of Float.NaN when there are 0 hits. ",
            "author": "Michael McCandless",
            "id": "comment-13167190"
        },
        {
            "date": "2011-12-14T19:50:17+0000",
            "content": "New patch, beefing up the test some more.  I think it's ready.\n\nI improved SLM's age calculation to use double precision\nand to compute age by how long ago the searcher  was replaced with a\nnew searcher (not how long ago the searcher was first enrolled).\n\nI also fixed a bug TopDocs.merge when you use searchAfter with shards:\nit was incorrectly assuming that topDocs.scoreDocs.length == 0 meant\ntopDocs.totalHits == 0, which is not necessarily true if you use\nsearchAfter. ",
            "author": "Michael McCandless",
            "id": "comment-13169628"
        },
        {
            "date": "2011-12-14T20:22:04+0000",
            "content": "starting to look good, i like testing of the distributed stats!\n\nI think, looking at this test, that unfortunately that distributed scoring is still too difficult with lucene.\nIts nice how you dont do any extra rewrites or anything like that, but I don't like this:\n\n+    // TODO: nothing evicts from here!!!  Somehow, on searcher\n+    // expiration on remote nodes we must evict from our\n+    // local cache...?\n\n\n\nThere are two problems here we should separate:\n1. the searcher should be able to get the stats, and ensure that they are available for scorers. this is separate from:\n2. the searcher doing some caching of stats to prevent network traffic.\n\nCurrently your cache handles both 1 and 2, but i think a cache should be a cache.\n\nMaybe we can improve the scoring api, here is where the problem is:\n\n\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    // right here is where you want to extractTerms and get stats (from cache or remotely)\n    Weight weight = query.createWeight(this); // right here, in the weights ctor, is where its going to callback to your IS to ask for those stats\n\n\n\nI don't like the fact that you need to handle this crazy state here... there has to be somethign we can do to simplify this. ",
            "author": "Robert Muir",
            "id": "comment-13169662"
        },
        {
            "date": "2011-12-14T20:26:03+0000",
            "content": "By the way, the test is great... i actually think we should just commit it as-is.\n\nOtherwise, how can we improve this stuff? we need this test! ",
            "author": "Robert Muir",
            "id": "comment-13169664"
        }
    ]
}