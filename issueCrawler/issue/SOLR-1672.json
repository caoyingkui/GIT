{
    "id": "SOLR-1672",
    "title": "RFE: facet reverse sort count",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Workaround"
    },
    "description": "As suggested by Chris Hosstetter, I have added an optional Comparator to the BoundedTreeSet<Long> in the UnInvertedField class.\nThis optional comparator is used when a new (and also optional) field facet parameter called 'facet.sortorder' is set to the string 'dsc' \n(e.g. &f.<facetname>.facet.sortorder=dsc for per field, or &facet.sortorder=dsc for all facets).\nNote that this parameter has no effect if facet.method=enum.\nAny value other than 'dsc' (including no value) reverts the BoundedTreeSet to its default behaviour.\n\nThis change affects 2 source files:\n> UnInvertedField.java\n    [line 438] The getCounts() method signature is modified to add the 'facetSortOrder' parameter value to the end of the argument list.\n\nDIFF UnInvertedField.java:\n\n\tpublic NamedList getCounts(SolrIndexSearcher searcher, DocSet baseDocs, int offset, int limit, Integer mincount, boolean missing, String sort, String prefix) throws IOException {\n\n\n\n+ public NamedList getCounts(SolrIndexSearcher searcher, DocSet baseDocs, int offset, int limit, Integer mincount, boolean missing, String sort, String prefix, String facetSortOrder) throws IOException \n{\n\n    [line 556] The getCounts() method is modified to create an overridden BoundedTreeSet<Long>(int, Comparator) if the 'facetSortOrder' parameter equals 'dsc'.\nDIFF UnInvertedField.java:\n- final BoundedTreeSet<Long> queue = new BoundedTreeSet<Long>(maxsize);\n\n+ final BoundedTreeSet<Long> queue = (sort.equals(\"count\") || sort.equals(\"true\")) ? (facetSortOrder.equals(\"dsc\") ? new BoundedTreeSet<Long>(maxsize, new Comparator()\n{ @Override\npublic int compare(Object o1, Object o2)\n{\n  if (o1 == null || o2 == null)\n    return 0;\n  int result = ((Long) o1).compareTo((Long) o2);\n  return (result != 0 ? result > 0 ? -1 : 1 : 0); //lowest number first sort\n}}\n) : new BoundedTreeSet<Long>(maxsize)) : null;\n\n> SimpleFacets.java\n    [line 221] A getFieldParam(field, \"facet.sortorder\", \"asc\"); is added to retrieve the new parameter, if present. 'asc' used as a default value.\nDIFF SimpleFacets.java:\n\n+ String facetSortOrder = params.getFieldParam(field, \"facet.sortorder\", \"asc\");\n\n    [line 253] The call to uif.getCounts() in the getTermCounts() method is modified to pass the 'facetSortOrder' value string.\nDIFF SimpleFacets.java:\n\n\tcounts = uif.getCounts(searcher, base, offset, limit, mincount,missing,sort,prefix);\n+ counts = uif.getCounts(searcher, base, offset, limit, mincount,missing,sort,prefix, facetSortOrder);\n\n\n\nImplementation Notes:\nI have noted in testing that I was not able to retrieve any '0' counts as I had expected.\nI believe this could be because there appear to be some optimizations in SimpleFacets/count caching such that zero counts are not iterated (at least not by default)\nas a performance enhancement.\nI could be wrong about this, and zero counts may appear under some other as yet untested circumstances. Perhaps an expert familiar with this part of the code can clarify.\nIn fact, this is not such a bad thing (at least for my requirements), as a whole bunch of zero counts is not necessarily useful (for my requirements, starting at '1' is just right).\n\nThere may, however, be instances where someone will want zero counts - e.g. searching for zero product stock counts (e.g. 'what have we run out of'). I was envisioning the facet.mincount field\nbeing the preferred place to set where the 'lowest value' begins (e.g. 0 or 1 or possibly higher), but because of the caching/optimization, the behaviour is somewhat different than expected.",
    "attachments": {
        "SOLR-1672.patch": "https://issues.apache.org/jira/secure/attachment/12428422/SOLR-1672.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Peter Sturge",
            "id": "comment-12792423",
            "date": "2009-12-18T10:19:43+0000",
            "content": "Patch diff file for adding facet reverse sorting "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-12792424",
            "date": "2009-12-18T10:20:54+0000",
            "content": "Patch SOLR-1672.patch now included for review "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-12797828",
            "date": "2010-01-07T23:13:00+0000",
            "content": "Marking as resolved. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12803768",
            "date": "2010-01-22T17:34:12+0000",
            "content": "To be consistent with the main sort parameter, it should be \"desc\", not \"dsc\"\nUsing different keywords different places is bound to cause confusion\n\nIsn't there a Solr terminology dictionary somewhere that could make sure the same lingo is used throughout the source, config and docs? "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-12803858",
            "date": "2010-01-22T20:42:32+0000",
            "content": "Jan, you are absolutely correct that the parameter should (and will) be 'desc'.\n\nI have an update in my queue of things todo which changes this, but also removes the new 'facet.sortorder' parameter, and includes instead 'facet.sort desc' as a valid parameter for facet.sort. This keeps things nice and tidy and consistent.\n\nThe 'facet.sortorder' parameter was really as POC to try out the behaviour before changing the core parameter syntax of the existing 'facet.sort' parameter. Not that's done, the parameter will be rolled into 'facet.sort'.\n\nThanks,\nPeter "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12849755",
            "date": "2010-03-25T16:26:51+0000",
            "content": "Some old notes on this patch that i just found on my laptop (presumably from the last time i was on a plane) ...\n\n\n\tThe existing patch is in a weird format that i coulnd't apply\n\tre-reading the patch, and comparing to the SimpleFacets and UnInvertedField source, i'm noticing some that several code paths for facet counts aren't being accounted for\n\tI think what we should do conceptially is refactor all of the code that looks at the existing FacetParams.FACET_SORT param (or any of the constant values for it) into a helper function thta parses the new legal values we want to support and returns a Comparator, and then start passing that comparator arround to the various strategies (termenum, fieldcache, uninverted) for collecting facet constraints, instead of just passing arround the \"sort\" string value...\n\t\n\t\t\"true\",\"count\",\"count desc\" => a comparator that does descending count sort\n\t\t\"count asc\" => a comparator that does ascending count sort\n\t\t\"false\",\"index\",\"index asc\" => null (by returning a null comparator we would be signalling that no sorting or bounded collection is needed, terms can be processed in order)\n\t\t\"index desc\" => a comparater that does descendeing term sort (not requested in this Jira, but recently asked about on the mailing list)\n\t\n\t\n\tThe problem with that conceptual solution is that UnInvertedField doesn't maintain a BoundedTreeSet of CountPairs like all of hte other code paths, it uses a single Long to encode both the count and the index of the term, so it would need some special logic.\n\t\n\t\tSide question: I wonder if that Long encoded format would work for hte field cache based faceting as well?\n\t\n\t\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12849756",
            "date": "2010-03-25T16:27:20+0000",
            "content": "reopening ... not sure why it was marked resolved "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-12850159",
            "date": "2010-03-26T14:48:46+0000",
            "content": "I agree there's some refactoring to do to bring it in line with current FacetParams conventions. At the same time, it would be good to look at wrapping up the functionality into a method, and covering all the code paths in the way you describe.\n\nI've been wanting to get to finishing off this patch, but I'm in the throws of a product release myself, so I've not had many spare cycles.\n\nYou mention termenum, fieldcache, uninverted - presumably, these are among the code paths that need to cater for facet counts. If you know them, can you add a comment here that lists all the areas that need to be catered for, so that none are left out (if it's more than those 3).\n\nThanks!\nPeter "
        },
        {
            "author": "Antoine Le Floc'h",
            "id": "comment-13188373",
            "date": "2012-01-18T10:18:03+0000",
            "content": "I just wanted to know the status on this. Is there a way in 4.0 to specify asc or desc on the facet order when using &facet.sort=index for example. If not, what is the easier way to do it ? Thank you. "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-13188477",
            "date": "2012-01-18T14:45:59+0000",
            "content": "Some optimizations/changes to the faceting code have stopped this patch from working (I think it was in 3.2, but it was right when the version numbers were changing/merging). Definitely won't work out-of-the-box in 4.0. These changes mean that the forward-sorted facets are sorted in reverse order, rather than an 'idf-type' facet sort.\nIt's been something I've wanted to look at fixing for ages now - just don't have any spare cycles to devote to it.\nThe priniciple of this patch is still valid, it breaks because of some code changes in the same module(s) (can't remember what they are off the top of my head).\nBypassing the optimization bits if the facet operation is a reverse sort order request may be one option, but some care would need to be taken to be sure. "
        },
        {
            "author": "KIMI Takeo",
            "id": "comment-13420405",
            "date": "2012-07-23T03:02:31+0000",
            "content": "Thank you.\nThis patch really helped.\n\nI'm using 3.6. So, I added a comment out on UnInvertedField.\n> if (queue.size()>=maxsize) min=-(int)(queue.last().longValue() >>> 32) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14169061",
            "date": "2014-10-13T08:07:36+0000",
            "content": "Any interest in reviving this issue and add support for ascending facet sort? And I favor the index [asc|desc] / count [asc|desc] format over the facet.sortorder one "
        },
        {
            "author": "Charles Draper",
            "id": "comment-14189210",
            "date": "2014-10-29T23:02:40+0000",
            "content": "I would make heavy use of sort by index desc if it was available. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14189341",
            "date": "2014-10-30T00:03:29+0000",
            "content": "\n And I favor the index [asc|desc] / count [asc|desc] format\n \n+1, this is exactly the syntax that Heliosearch uses (well it actually accepts either \"index desc\" or \"index\":\"desc\") since the API is JSON:\nhttp://heliosearch.org/json-facet-api/#TermsFacet "
        },
        {
            "author": "David Smiley",
            "id": "comment-14192297",
            "date": "2014-10-31T19:23:54+0000",
            "content": "I ran into a need for \"index desc\" today too (for reverse chronological on a timestamp) with pivot faceting.  Maybe I'll flip the order of the data as an interim hack. "
        },
        {
            "author": "Romain MERESSE",
            "id": "comment-14555654",
            "date": "2015-05-22T06:22:53+0000",
            "content": "I need this feature too. Resorting to client-side sorting is not a good solution.\nAny news ? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14556143",
            "date": "2015-05-22T13:35:35+0000",
            "content": "The heliosearch stuff I previously mentioned is now in Solr:\n\nfacet.json={\n  lowfirst : {\n    type : terms,\n    field: myfield,\n    sort:\"count asc\",\n  }\n}\n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16017467",
            "date": "2017-05-19T14:29:04+0000",
            "content": "Now that facet.json supports this, can we close this, or is anyone planning to bring this to the old facet module? (This is the most popular open issue in Solr JIRA) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16067291",
            "date": "2017-06-28T21:45:23+0000",
            "content": "Implemented in JSON facet module, so closing this as \"Workaround\". Please re-open if anyone have a strong desire to also add this to the standard facet module. "
        }
    ]
}