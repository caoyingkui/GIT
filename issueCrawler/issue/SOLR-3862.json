{
    "id": "SOLR-3862",
    "title": "add \"remove\" as update option for atomically removing a value from a multivalued field",
    "details": {
        "affect_versions": "4.0-BETA",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently you can atomically \"add\" a value to a multivalued field. It would be useful to be able to \"remove\" a value from a multivalued field. \n\nWhen you \"set\" a multivalued field to null, it destroys all values.",
    "attachments": {
        "SOLR-3862-3.patch": "https://issues.apache.org/jira/secure/attachment/12589605/SOLR-3862-3.patch",
        "SOLR-3862-2.patch": "https://issues.apache.org/jira/secure/attachment/12589553/SOLR-3862-2.patch",
        "SOLR-3862.patch": "https://issues.apache.org/jira/secure/attachment/12555574/SOLR-3862.patch",
        "SOLR-3862-4.patch": "https://issues.apache.org/jira/secure/attachment/12637569/SOLR-3862-4.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13459912",
            "date": "2012-09-20T20:22:17+0000",
            "content": "I think Michael Garski and somebody else have a separate, existing JIRA issue for this... "
        },
        {
            "author": "Michael Garski",
            "id": "comment-13459915",
            "date": "2012-09-20T20:26:02+0000",
            "content": "I believe you may be thinking of someone else Otis - I have not done anything with updatable fields. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13460051",
            "date": "2012-09-20T23:31:37+0000",
            "content": "something to consider is the semantics: should it be \"remove by position\" in the list, or should it be \"remove by value\" and if it's \"remove by value\" then what happens if the value occurs multiple times in the list? "
        },
        {
            "author": "Jim Musil",
            "id": "comment-13461902",
            "date": "2012-09-24T16:44:24+0000",
            "content": "Personally, I'd like it to be remove by value. Even better, would be remove by regex. \n\nI think the most intuitive method would be to remove globally from the list. "
        },
        {
            "author": "Jim Musil",
            "id": "comment-13507703",
            "date": "2012-11-30T22:07:41+0000",
            "content": "So, I needed to hack this together to suit my needs. I'm not sure if anyone else would find this useful, but I've added a \"removeAll\" option for atomic updates. It just uses String.removeAll() on each value, so supplying regex as the value will work. I've never submitted a patch before, so please forgive me if I've done this wrong. "
        },
        {
            "author": "Jim Musil",
            "id": "comment-13507704",
            "date": "2012-11-30T22:08:39+0000",
            "content": "first stab "
        },
        {
            "author": "Andreas Kleiber",
            "id": "comment-13653660",
            "date": "2013-05-10T09:21:46+0000",
            "content": "I need this aswell. We have a message based system to generate / update our solr index. So an option to remove an entry of a multiValued field by value is very nice.\nI would appreciate if this will be merged. "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13692684",
            "date": "2013-06-25T02:05:35+0000",
            "content": "This is great... I think we should change the operation to \"remove\" instead of \"removeAll\" .. while removeAll is very java-esq i think it would be easier for more people to understand to just have it be \"remove\"... "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13692697",
            "date": "2013-06-25T02:42:33+0000",
            "content": "Actually maybe I'm understanding this feature slightly differently. Is the intent to be able to remove patterns from field values or is the goal to be able to remove entire values? This patch kind of does both, however I think that for the case where you might have many field values per field or a large list of values to remove it may be more efficient to forgo the regex stuff and do straight \"remove\". Additionally for the regex case maybe having a \"replaceAll\" type function that would let you replace a regex within a field value would be more generalized functionality (and then remove the value if the new string is empty).\n\nsome thoughts.. I will post a more tightened up \"remove\" patch tomorrow.. "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13692760",
            "date": "2013-06-25T05:23:25+0000",
            "content": "This patch works in a slightly more restrictive way. It requires an entire field value to match the pattern specified for it to be removed. Also uses a precompiled pattern in order to prevent recompilation for each field value (esp bad with lots of field values). It also renames the option \"remove\" per my previous comment.\n\nI think it would be useful to add a \"replace\" option that allows for arbitrary replacement of text in a field (or removal if it results in an empty string, like the initial patch here). The only issue is how would one specify the \"replacement\" text as part of the update. "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13692762",
            "date": "2013-06-25T05:24:45+0000",
            "content": "oh also the patch has a simple unit test now that exercises this new functionality plus the existing add/set functionality.   "
        },
        {
            "author": "Steven Bower",
            "id": "comment-13693042",
            "date": "2013-06-25T13:48:24+0000",
            "content": "Minor update removing a spurious println "
        },
        {
            "author": "Alaknantha",
            "id": "comment-13950693",
            "date": "2014-03-28T13:34:21+0000",
            "content": "The original patches have a bug when invoked in the zoo keeper mode. The input field value comes in as a list where as bypassing ZK and directly hitting Solr, it comes in as a String to the patch code seqment to handle the atomic updates. Fixed the bug in the patch to use Collection.removeAll to remove the list A from list B instead of using regular expression matching and it works correctly.  "
        },
        {
            "author": "Alaknantha",
            "id": "comment-13951469",
            "date": "2014-03-28T21:56:21+0000",
            "content": "SOLR-3862-4.patch is the patch with the fix.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13954494",
            "date": "2014-03-29T22:40:41+0000",
            "content": "Does anyone have any objections for committing this? I'm running precommit and tests this evening, if there are no objections I'll commit this early next week.\n\nI took a pretty quick look at the code and it seems OK, but I'd love to have someone who knows the code better take a look.\n\nI'll also put up a patch without the commented-out code that looks like a leftover.\n\nOne note. It's a bit easier if people always put up a patch with the same name, SOLR-3862.patch in this case. Only the most recent one will be blue, the rest will be gray. No big deal, just for future reference. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13954517",
            "date": "2014-03-30T00:00:59+0000",
            "content": "Does anyone have any objections for committing this?\n\nIs it finished?  It doesn't look like there are tests for all the functionality.  The debug logging statements should probably go as well.\nAlso, it's nice to know what is being committed (as in, what is the API?) to enable feedback without having to parse the code to figure it out. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13954526",
            "date": "2014-03-30T00:22:41+0000",
            "content": "Alaknantha Can you address Yonik's points please? "
        },
        {
            "author": "Alaknantha",
            "id": "comment-13954563",
            "date": "2014-03-30T03:59:32+0000",
            "content": "Since we are only interested in the \"remove\" functionality, I removed \"replace\" code segment from this patch. The JUnit Test case \"AtomicUpdatesTest.java\" tests the newly added \"remove\" functionality and the existing \"set\" and \"add\" also. \nCould you please let me know where to update the API documentation and I will do that? I am attaching the updated patch SOLR-3862.patch "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13954665",
            "date": "2014-03-30T13:01:12+0000",
            "content": "Could you please let me know where to update the API documentation and I will do that?\n\nUpdating actual documentation wouldn't be appropriate since nothing has been committed yet.\n\nMy API comment was because Erick indicated he was going to commit a patch, but I couldn't tell what the intent of the patch was.  It's hard to review a patch when you don't know what the patch is trying to do.  I took a quick look at the code, and was confused by seeing regular expressions, and apparently two commands: \"replace\" and \"remove\".\n\nFor something like this, implementation is easy to fix later, interface is much less so.  So lets take a minute to talk about what interface we want, and give examples.\n\nExample of interface as I understand it (in JSON).  It's just like the other \"atomic update\" field modifiers:\n\nA field like so will add a value (this is existing functionality):\n \"cat\"  : {\"add\":\"Cyberpunk\"}\nA field like so will remove all values that match the given pattern \"Cyberpunk\" (this patch implements):\n \"cat\"  : {\"remove\":\"Cyberpunk\"}\nNote that the specified value is a regular expression, so the following will remove all values starting with \"Cyber\"\n \"cat\"  : {\"remove\":\"Cyber.*\"}\nThe regular expression must match the whole value for that value to be removed.\n\nFull command:\ncurl http://localhost:8983/solr/update -H 'Content-type:application/json' -d '\n[\n {\"id\"    : \"book1\",\n  \"cat\"   : {\"remove\":\"Cyberpunk\"}\n }\n]'\n\n\n\n\nQuestions:\n\n\tDo we want a way to specify the removal of multiple values?\n  Perhaps \"remove\" : [ \"A\",\"B\",\"C\" ]\n\tWhat are the downsides to using regex?  Someone may not realize that the values being used are regular expressions until they are in production and values that accidentally have wildcards in them are used?  Or they may simply forget to do wildcard escaping code since everything would \"just work\" until they did encounter them?\n\tPerhaps we want a separate way to specify \"value\" vs \"regex\".  I assume \"value\" will  be a much more common usecase than regex (although I do like the power that regex brings).\n\n\n\n "
        },
        {
            "author": "Alaknantha",
            "id": "comment-13954701",
            "date": "2014-03-30T15:00:46+0000",
            "content": "Yonik, Are you looking at the older patch? https://issues.apache.org/jira/secure/attachment/12637687/SOLR-3862.patch is my latest patch where I got rid of the regular expression usage. \n\n\n\t\n\t\n\t\t1) Do we want a way to specify the removal of multiple values?\nPerhaps \"remove\" : [ \"A\",\"B\",\"C\" ]\n\t\t\n\t\t\tYes, this patch supports removal of multiple values.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\t\n\t\n\t\t2) What are the downsides to using regex? Someone may not realize that the values being used are regular expressions until they are in production and values that accidentally have wildcards in them are used? Or they may simply forget to do wildcard escaping code since everything would \"just work\" until they did encounter them?\n\t\t\n\t\t\tYes, I ran into this regular expression issue when I tried to use the field modifier \"remove\" provided by the older patch https://issues.apache.org/jira/secure/attachment/12589605/SOLR-3862-3.patch in my project. That's why I got rid of the usage of the regular expression and use the \"value\" comparisons. Here is the issue that I ran into:\n\t\t\n\t\t\n\t\n\t\n\n\n\nWhen invoked in the zoo keeper mode, the input field value comes in as a list whereas bypassing ZK and directly hitting Solr, it comes in as a String to the patch code segment to handle the atomic updates using field modifier \"remove\". \n\nThe original patch SOLR-3862-3.patch creates a regular expression pattern on the incoming field value to be removed. The pattern is used to create a matcher and iterate through the original list of values. If the incoming field value is a list, the matcher does not match correctly because of the additional parenthesis like below:\n\nIn the below example, \"CA\" is sent in as a input field value to be removed. Since the patch code was using the toString(), the list values are encapsulated within the parenthesis like [CA]. So, this pattern can match only to \"C\" or \"A\" and not to \"CA\". So, I had to get into the Solr code to troubleshoot this issue\n\nHitting Solr using Zoo Keeper:\nPattern p = Pattern.compile(\"[CA]\");\nMatcher m = p.matcher(\"CA\");\nboolean b = m.matches();  returns false and so the remove does not work if the incoming field value comes in a list.\n\nHitting Solr directly:\nPattern p = Pattern.compile(\"CA\");\nMatcher m = p.matcher(\"CA\");\nboolean b = m.matches();  returns true  and so the remove works if the incoming field value comes in as a String.\n\n\n\t\n\t\n\t\t3) Perhaps we want a separate way to specify \"value\" vs \"regex\". I assume \"value\" will be a much more common usecase than regex (although I do like the power that regex brings).\n\t\t\n\t\t\tI agree with you that \"value\" is a most common use case and that's the reason, I got rid of the \"regex\".\n\t\t\n\t\t\n\t\n\t\n\n\n\nPlease review this patch https://issues.apache.org/jira/secure/attachment/12637687/SOLR-3862.patch that has my fix. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13954705",
            "date": "2014-03-30T15:11:59+0000",
            "content": "Just though I should add that I'm in no great hurry to commit this, but I thought was some nice functionality. I happen to have some time this weekend so was getting around to it (finally). I'm trying to carve out some time to look at people's patches on a more regular basis...\n\nIt looks like sometime next week then to allow for some more refinements and I'll look more carefully.\n\nAlaknatha:\n\nIf you want to put the regex stuff back in I can help beef up the tests. I think Yonik's comment about the power of regex is a good one. What do you think about putting that back and calling it something like \"removeregex\"? I really like the idea of requiring the user to specify the intent, regexes can be dangerous...\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13954719",
            "date": "2014-03-30T15:41:20+0000",
            "content": "Yonik, Are you looking at the older patch? https://issues.apache.org/jira/secure/attachment/12637687/SOLR-3862.patch is my latest patch where I got rid of the regular expression usage.\n\nHeh.  This is exactly what I'm talking about.  It can be hard to reconstruct the current state of the API by going through all of the previous comments, or by reading a patch - both take unnecessary time/work and are error prone.\n\nThis is the current API (in JSON) currently being proposed:\n\nA field like so will remove all values that match the given value \"Cyberpunk\":\n \"cat\"  : {\"remove\":\"Cyberpunk\"}\nMultiple values can be specified for removal:\n \"numbers\"  : {\"remove\":[3,7]}\nIf the original field contained [8,3,3,5,7,1] then the remove specified above will result in [8,5,1]\n\nIt's not an error if no values are actually removed or if the field does not exist.\n\nFull command example:\ncurl http://localhost:8983/solr/update -H 'Content-type:application/json' -d '\n[\n {\"id\"    : \"book1\",\n  \"cat\"   : {\"remove\":\"Cyberpunk\"}\n }\n]'\n\n\n\nFWIW, I'm fine with this latest API. "
        },
        {
            "author": "Alaknantha",
            "id": "comment-13954721",
            "date": "2014-03-30T15:42:25+0000",
            "content": "Erick: \n\nSure, I will add back the original code to handle remove by regex and will call it \"removeregex\". Do you also want to add back \"replace\" functionality that was in the original patch? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13954736",
            "date": "2014-03-30T16:20:01+0000",
            "content": "Hmmm, I don't have  strong preferences. I'm always torn between \"adding this in while we're about it\" and waiting  for someone to chime in that they have a use-case for this functionality.\n\nI started out thinking that remove/add would satisfy replace, but that pair doesn't handle two use-cases that come to mind:\n1> you have multiple values that match the regex in remove that you want to update-but-preseve. Imagine your field has\nrun\nrunning\nrunners\nand you wanted the result to be\nrun\nrun$\nrun$\nI don't see how remove/add would accomplish this in the regex case (say run.*). The remove would delete \"running\" and \"runners\" and you wouldn't know how many values to re-add.\n\n2> Similarly, if you have two multiValued fields that are expected to be kept in parallel and wanted to update only one field. I'm assuming that the remove from one field and subsequent add would put the new value at the end rather then the original position.\n\nSo let's put it back and beef up the tests.   Yonik Seeley any  thoughts? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13954742",
            "date": "2014-03-30T16:43:41+0000",
            "content": "So let's put it back and beef up the tests. Yonik Seeley any thoughts?\n\nPerhaps I'm starting to sound monotonous, but I want to see a proposal, not a pointer to a patch  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13954853",
            "date": "2014-03-30T22:14:56+0000",
            "content": "Right, it would look something like this:\n\nRegular expressions can also be used to remove values by specifying removeregex, as:\n\n\"activity\" : {\"removeregex\" : \"run.+\"}\n\nGiven a document with a field having values\n\n[run, running, runs runner], the above would leave only [run].\n\nMultiple regexes can be specified, as\n\"activity\" : {\"removeregex\" : [\"run.+\", \"ran.*\"] }\n\nSo a document with field values [run runner ran ransack] would be reduced to\n[run]\n\nThere are two new commands, \"replace\" and \"replaceregex\"\n\n\"activity\" : {\"replace\" : {\"pat1\" : \"replacement1\"}  }\n\nA document with \"activity\" of [\"pat\", \"pat1\", \"pat1more\"] would result in\n\n[\"pat\", \"replacement1\", \"pat1more\"]\n\nNote that order is preserved. That is, if the pattern being replaced is the third value in a multivalued field with 6 values, the replacement will also be in the third position.\n\nMultiple patterns and replacements can be specified, as\n\"activity\" : {\"replace\" :  [ {\"pat1\" : \"replacement1\"}, {\"pat2\" : \"replacement2\"} ]  }\n\nreplaceregex is similar, but all the \"pat*\" examples above may be regular expressions, as\n\n\"activity\" : {\"replaceregex\" : {\"pat.+\" : \"replacement1\"}  }\nand\n\"activity\" : {\"replaceregex\" :   [ {\"pat.+\" : \"replacement1\"}, {\"part.*\" : \"replacement2\"} ]  }\n\nCurrently, back references are _not_ supported.\n\nPatterns and replacements are _not_ chained. That is, the following\n\n\"activity\" : {\"replaceregex\" :   [ {\"pat.+\" : \"replacement1\"}, {\"repl.+\" : \"replacement2\"} ]  }\napplied to a field containing\n[\"patterns\"]\nwould yield [\"replacement1\"] rather than [\"replacement2\"]\n\n\n\n\nHmmmm, altogether I'm not sure how I feel about allowing multiple replaceregex's to be specified, the syntax is kinda ugly.\n\nI'm not particularly wedded to the regex stuff but I can imagine it to be useful. I'd also be fine if the replace were left out. "
        },
        {
            "author": "Alaknantha",
            "id": "comment-13957268",
            "date": "2014-04-02T02:35:46+0000",
            "content": "Erick: None of the existing patches support multiple regex's to be specified for \"remove\" and \"replace\". Would you like me to code that along with Junits and provide a patch?   "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13957603",
            "date": "2014-04-02T12:45:38+0000",
            "content": "Don't quite know. In case you're wondering, I've been a bit under the weather so haven't been looking for a couple of days.\n\nEven though I mentioned that back references are not supported, I'd rank supporting that over multiple regexes. \n\nIts not clear to me how useful multiple regexes really would be though. I suppose if we're trying to get the interface in place it would be best to clarify that up front though. Straw-man. Let's put multiple regexes in as in my example.\n\nYonik Seeley got an opinion here? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13969028",
            "date": "2014-04-14T23:58:13+0000",
            "content": "New version of the patch, some minor refactoring moved the 'remove' and 'inc' operations to their own methods. Hardened the tests, they were failing randomly since the same document ID was being re-used without deleting docs between tests.\n\nUnless there are objections, I'll commit this sometime this coming week. All tests pass. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13973293",
            "date": "2014-04-17T19:10:01+0000",
            "content": "I'll add a slightly updated patch in a few. I added a bit more testing, and included CHANGES.txt.\n\nI think the regex question can be moved to another JIRA and I also think a new removeregex is the cleanest way to distinguish between the two, we can debate in a new JIRA...\n\nErick "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13973296",
            "date": "2014-04-17T19:12:57+0000",
            "content": "Promised patch, I'll commit after another set of test runs.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13973431",
            "date": "2014-04-17T21:25:23+0000",
            "content": "Same patch without a tab (failed precommit) "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13973547",
            "date": "2014-04-17T23:11:35+0000",
            "content": "Rats! Failed to mention the JIRA in the checkin\ntrunk revision - 1588385 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13973580",
            "date": "2014-04-17T23:53:33+0000",
            "content": "Commit 1588391 from erick@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1588391 ]\n\nSOLR-3862 add 'remove' as update option for atomically removing a value from a multivalued field. Note that revision 1588385 is for this patch on trunk "
        },
        {
            "author": "Steven Bower",
            "id": "comment-14220457",
            "date": "2014-11-21T03:19:00+0000",
            "content": "Added ticket for regex based removal SOLR-6772 "
        }
    ]
}