{
    "id": "SOLR-7475",
    "title": "Value of Heap Memory Usage display",
    "details": {
        "components": [
            "Admin UI"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "In the Solr-5.0 admin UI, select a collection, click on Overview. This will show the statistics of the collection. \nFor the Heap Memory Usage, it is showing the value -1 instead of the Heap Memory Usage for that collection. It was said to be working on the previous versions of Solr, and in version 5.0 it was showing -1.",
    "attachments": {
        "Heap Memory Usage.png": "https://issues.apache.org/jira/secure/attachment/12728681/Heap%20Memory%20Usage.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-21T02:35:43+0000",
            "author": "Dennis Gove",
            "content": "The value is being returned by LukeRequestHandler.java. The pertinent function is below\n\n\n  /** Returns the sum of RAM bytes used by each segment */\n  private static long getIndexHeapUsed(DirectoryReader reader) {\n    long indexHeapRamBytesUsed = 0;\n    for(LeafReaderContext leafReaderContext : reader.leaves()) {\n      LeafReader leafReader = leafReaderContext.reader();\n      if (leafReader instanceof SegmentReader) {\n        indexHeapRamBytesUsed += ((SegmentReader) leafReader).ramBytesUsed();\n      } else {\n        // Not supported for any reader that is not a SegmentReader\n        return -1;\n      }\n    }\n    return indexHeapRamBytesUsed;\n  }\n\n\n\nThis claims that returning the ram used is only supported by a SegmentReader but that function is actually implemented in CodecReader and is declared in the interface Accountable. I suspect this instanceof check can be changed to look for the Accountable interface.\n\nThat said, the reader in this case is an ExitableDirectoryReader which does not implement the Accountable interface.  ",
            "id": "comment-15020181"
        },
        {
            "date": "2016-04-28T01:00:37+0000",
            "author": "wei wang",
            "content": "Still seeing the issue in version 5.4.0.  ",
            "id": "comment-15261326"
        },
        {
            "date": "2016-05-02T22:20:33+0000",
            "author": "Shawn Heisey",
            "content": "Even when this was working, it was showing a very low number.  What exactly is this number intended to reflect?  It definitely isn't the total memory allocated for everything related to the core, which IMHO makes the number useless to most Solr users.\n\nI've got a Solr 4.7.2 server with four cores that show non-zero heap memory \u2013 all the other cores show zero.  Here are those numbers:\n\n51667601\n122208433\n97413812\n97369157\n\nThe jconsole memory graph for this server shows the heap allocation bouncing between 5GB and 7GB.  If I click the \"Perform GC\" button in jconsole, then the heap drops to a little over 3GB.  Adding up all the \"heap memory\" numbers on the core overview pages reaches less than 400MB ... definitely nowhere near the total heap usage, even with all garbage removed.\n\nIn my opinion there are three viable options:\n\n\tRename the statistic to reflect what's actually being counted (probably very low-level Lucene structures)\n\tRemove it entirely\n\tFix it so it counts all heap memory used by the core \u2013 including Solr caches and other large memory structures.\n\n ",
            "id": "comment-15267615"
        }
    ]
}