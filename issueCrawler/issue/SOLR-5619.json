{
    "id": "SOLR-5619",
    "title": "Improve BinaryField to make it Sortable and Indexable",
    "details": {
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Currently, BinaryField can neither be indexed nor sorted on.\nHaving them indexable and sortable should come in handy for a reasonable amount of use cases e.g. wanting to index binary data (could come from anything non-text).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13865447",
            "date": "2014-01-08T13:54:06+0000",
            "content": "Anshum:\n\nCould you flesh this out a little more, including use-cases? I'm guessing this would be fairly limited, it makes no sense to match on, say, the entire contents of a movie that you'd indexed. Or at least it would be very difficult.\n\nInclude what limitations you envision. How would queries be parsed? Binary data is just binary data that could happen to be query syntax. Base64 encode all the field values on the client side? What would the rules be for tokenizing input both at index and query time? Etc...\n\nI suspect that there are a bunch of details that make this less useful than one might think, but that's only a guess.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13865611",
            "date": "2014-01-08T16:40:34+0000",
            "content": "This came out of an idea i mentioned to Anshum offline when talking about his test for SOLR-5594, and some confusion i had based on what i remembered/imagined about some test code sarowe added in SOLR-5354.\n\nmy suggestion was that some of the things that existed in the test only FieldType in SOLR-5354, and in Anshum's SOLR-5594 patch, could/should probably just be improvements to BinaryField directly.\n\nIn SOLR-5354 a sortable subclass of BinaryField via docvalues \u2013 anshum and i were just discussing the idea of using something like the existing BinaryTokenStream functinality from the lucene core test utils to promote the indexable/sortable logic up into BinaryField itself.\n\nBinaryField already requires that external systems deal with it (the stored field part) via base64 encoded strings \u2013 so from a query standpoint, yes \u2013 you'd do term queries against it via base64, but the sorting of the indexed terms would be just like in SOLR-5354.\n\nI suspect that there are a bunch of details that make this less useful than one might think, but that's only a guess.\n\nit probably wouldn't be super useful to a lot of people, but it would be nice to have a FieldType that gives you some more direct access to doing things directly with BytesRef in lucene \u2013 if nothing else it would help act as a proof of concept/methodology for how people can write custom FieldTypes that do things with their specialized binary data.\n\nIf it doesn't make sense, it doesn't make sense \u2013 but it seemed like it might be worth while to investigate given the instances where it's made sense to create weird little subclasses in various tests. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13865640",
            "date": "2014-01-08T16:58:36+0000",
            "content": "Right, I'm not arguing that it never makes sense, just that we should be clear during implementation what the expectations/use-cases are. For instance, I can see defining a tokenizer that split the binary input into \"tokens\" based on a base64 encoding of some special characters that had meaning only to the specific app trying to index/search binary values.\n\nI suppose the real work will be coaching people on what \"searching binary values\" really means. It wouldn't be, for instance, something you'd do face recognition with ....\n "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13865787",
            "date": "2014-01-08T19:40:58+0000",
            "content": "Now that Hoss already mentioned the initial reason why I opened this issue, I'll just add a bit more to it.\nI think this would come in handy for people wanting to do that i.e. \"split the binary input into \"tokens\" based on a base64 encoding of some special characters\", thereby also enabling users to run stuff like prefix/range queries against the field. "
        }
    ]
}