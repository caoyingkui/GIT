{
    "id": "LUCENE-6061",
    "title": "Add Support for something different than Strings in Highlighting (FastVectorHighlighter)",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "6.0",
        "components": [
            "core/search",
            "modules/highlighter"
        ],
        "labels": "",
        "fix_versions": [
            "4.10.2",
            "5.0",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Open",
        "type": "Wish"
    },
    "description": "In my application I need Highlighting and I stumbled upon the really neat FastVectorHighlighter. One problem appeared though. It lacks a way to render the Highlights into something different than Strings, so I rearranged some of the code to support that:\n\nhttps://github.com/Hotware/Lucene-Extension/blob/master/src/main/java/com/github/hotware/lucene/extension/highlight/FVHighlighterUtil.java\n\nIs there a specific reason to only support String[] as a return type? If not, I would be happy to write a new class that supports rendering into a generic Type and rewire that into the existing class (or just do it as an addition and leave the current class be).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14212006",
            "author": "Michael McCandless",
            "date": "2014-11-14T08:36:14+0000",
            "content": "PostingsHighlighter can already render to arbitrary objects: LUCENE-4906 ... maybe look at how that was done / merge approaches. "
        },
        {
            "id": "comment-14212056",
            "author": "Martin Braun",
            "date": "2014-11-14T09:40:17+0000",
            "content": "I can definitely look into merging the approaches, that's right. \n\nAs far as I can see, PostingsHighlighter doesn't support a similar approach to the FastVectorHighlighter to enable matches in different fields than the actual highlighted part has to be, i.e. having 1 unanalyzed (or only marginally analyzed) field and some analyzed versions of it which kept all the attributes from the original field. Is that correct? "
        },
        {
            "id": "comment-14212760",
            "author": "Michael McCandless",
            "date": "2014-11-14T20:07:56+0000",
            "content": "PH is able to highlight arbitrary fields, even if that field did not in fact participate in the query.  It just extracts all terms from the query, and then loads the fields you asked for, finding all locations where those terms occur in those fields.  You can see it running at http://jirasearch.mikemccandless.com ... "
        },
        {
            "id": "comment-14212782",
            "author": "Martin Braun",
            "date": "2014-11-14T20:32:33+0000",
            "content": "Ok. Thanks for the input. That made it clear. PH can't highlight matches from what it found in one field in some other field (ergo the example above) . Did I unterstand that correctly? (I just realized that I didn't make my point clearly in the last comment)  "
        },
        {
            "id": "comment-14212787",
            "author": "Martin Braun",
            "date": "2014-11-14T20:35:16+0000",
            "content": "If the explanation is still lacking, I will provide you with my use case.  "
        },
        {
            "id": "comment-14214719",
            "author": "Michael McCandless",
            "date": "2014-11-17T15:10:51+0000",
            "content": "Sorry I don't understand the use case ... maybe you can clarify?  PH is quite customizable, e.g. you can plug in your own formatter, scorer, break iterator; maybe something there makes your use case possible. "
        },
        {
            "id": "comment-14214909",
            "author": "Martin Braun",
            "date": "2014-11-17T17:59:16+0000",
            "content": "Ok, here it goes:\n\nI do Part Of Speech Analysis on marked up texts like this:\n\nWords are marked up in the text with <prefix>P<stem>S<suffix>.\n\nI have the following fields:\n\n\n\tone field stores the original version of the text\n\tone field stores the text with only the prefixes of words\n\tone field stores the text with only the stems of words\n\tone field stores the text with only the suffix of words\n\n\n\nI keep all Attribute data present on the fields but remove all unnecessary tokens (i.e. words with no prefix in the prefix field)\n\nI want to be able to search on the prefix field and highlight the match in the original version because the prefix field is of not much help for the user.\n\nMy Utility version of the FastVectorHighlighter in the Github repo supports this behaviour as it uses the FastVectorHighlighter (the code doing the heavy lifting is currently copied from it) and adds the support for rendering Highlights into arbitrary objects via the ObjectEncoder<T> interface. "
        },
        {
            "id": "comment-14216536",
            "author": "Michael McCandless",
            "date": "2014-11-18T18:15:51+0000",
            "content": "I think you could do this with PH using an appropriate tokenizer.\n\nIe, you'd have a custom tokenizer that tokenizes your markup into the 4 different cases (so you are still indexing 4 different fields), but that tokenizer carefully sets the token offsets into the original text (which you'd store with no markup).\n\nAt search time, regardless of which of the 4 fields was used for searching, you'd then use the token offsets against the same original stored field.  You should be able to do this by overriding PostingsHighlighter.loadFieldValues... though maybe we could make this easier somehow, to say \"when I highlight field X, load its content from field Y\"... "
        },
        {
            "id": "comment-14217002",
            "author": "Martin Braun",
            "date": "2014-11-18T23:01:15+0000",
            "content": "Well I am doing the synonym approach for other parts of my analysis already, but I think the FastVectorHighlighter approach is better as it does exactly the part with \"when I highlight field X, load its content from field Y\", but I just want it to be able to render into arbitrary objects (or in my case I just want the plain offsets).\n\nI am currently working on a more sophisticated approach that lets me search for more information about one single token (I am reindexing the document's tokens into a new index with all it's occurences (offsets) by using the same analyzer chain that the complete documents use and extracting the attributes. (I think it's similar to the approach PH uses? But with storing the results into an index) Like that I can implement a cool way of handling synonym searching as well) and this enables me to do highlighting without the need of one of the Highlighters in Lucene so I am not that dependent on the Highlighting API anymore.\n\nBut I think I might need the Highlighter API some time in the near future so I am keeping my FastVectorHighlighterUtil\n\nGenerally I just want to make the Highlighter API (I am talking about FastVectorHighlighter here) easier to use and more intuitive than what I would need to do with the indexing trick. "
        },
        {
            "id": "comment-14274158",
            "author": "Anshum Gupta",
            "date": "2015-01-12T20:54:03+0000",
            "content": "As this issue doesn't have a patch or even a consensus for being an actual issue, I don't think it qualifies as a 'Critical' issue. I am not the best person to comment on that so perhaps Michael McCandless can comment about that. If it's not critical, I'll change the priority and also not consider this for 5.0. "
        },
        {
            "id": "comment-14274160",
            "author": "Michael McCandless",
            "date": "2015-01-12T20:56:28+0000",
            "content": "I agree it's not critical... "
        }
    ]
}