{
    "id": "SOLR-11034",
    "title": "Redundent/Unneccessary SolrCore reload when ManagedIndexSchema changes are made in cloud mode",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When using ManagedIndexSchema in cloud mode, there are 2 distinct code paths that create \"watchers\" looking for changes to the managed-schema resouce file in ZK...\n\n\n\tZkIndexSchemaReader.createSchemaWatcher\n\t\n\t\tsets a watcher on the managed-schema file\n\t\tif this watcher fires, it creates a new ManagedIndexSchema and sets it on the ManagedIndexSchemaFactory for future requests\n\t\n\t\n\tSolrCore.getConfListener + ZkController.registerConfListenerForCore\n\t\n\t\tsets a watcher on the configset dir\n\t\tif this watcher fires, it then checks the znode version for the solrconfig.xml, configoverlay.json, and managed-schema \u2013 if any are \"stale\" it triggers a core reload",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-08T01:39:08+0000",
            "content": "\nThe net result of these two watchers is that depending on the order of execution in the distinct threads that process them, there are (at least) 3 possible outcomes I can think of...\n\n\n\tZkIndexSchemaReader watcher fires, starts & finishes creating new IndexSchema and sets it before the SolrCore watche fires.  Then the SolrCore watcher fires and does nothing because it's znode version check shows the current IndexSchema is not stale.\n\tThe SolrCore watcher fires, starts & finishes reloading the core. Then the ZkIndexSchemaReader watcher fires and does nothing because the SolrCore is in the process of shutting down\n\t\n\t\tI've never actaully observed this happening in any logs, but AFAICT it's theoretically possible\n\t\n\t\n\tBoth the ZkIndexSchemaReader & SolrCore watchers fire at roughly the same time, While ZkIndexSchemaReader is in the process of creating a new IndexSchema, the SolrCore watcher checks the zknode version of the current IndexSchema object and decides it's stale.\n\n\n\nIt's not clear to me if/why both code paths are needed \u2013 it seems like either:\n\n\tZkIndexSchemaReader creating a new ManagedIndexSchema object and setting it on the \"live\" core's ManagedIndexSchemaFactory is sufficient\n\t\n\t\tin which case doing a core reload is completley unneccessary\n\t\n\t\n\n\n\n...OR...\n\n\n\tchanging the ManagedIndexSchema \"on the fly\" is not sufficient and doing a core reload is always neccessary\n\t\n\t\tin which case why do we bother having he ZkIndexSchemaReader watcher at all?\n\t\tis the existence of this watcher, and the fact that situation #1 (above) frequently happens causing bugs/corruption in the cores using the new schema w/o a full reload?\n\t\n\t\n\n\n\n\n\nEven if both code paths are useful/needed for some indepdent reasons i don't understand, situation #3 above seems redundent and wasteful of CPU \u2013 particularly since it seems more likely to happen when a system is under heavy load, and neither watcher can \"finish\" before the other starts.  Shouldn't the code in SolrCore.getConfListener's watcher to check if ManagedIndexSchema.getSchemaZkVersion() is stale be synchronized on the same getSchemaUpdateLock() that ZkIndexSchemaReader uses in order to prevent this?\n ",
            "author": "Hoss Man",
            "id": "comment-16078891"
        }
    ]
}