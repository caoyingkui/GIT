{
    "id": "LUCENE-7914",
    "title": "Add safeguards to RegExp.toAutomaton and Operations",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "7.0",
            "master (8.0)"
        ]
    },
    "description": "When creating an automaton from a regexp, some operators can create more states than maxDeterminizedStates:\n\n\na{10000}\n\n\n\nThe example above <b>creates</b> a single path with 10k states already determinized so maxDeterminizedStates is not checked. \nSome operations on automaton like Operations.isFinite or Operations.topoSortStates are recursive and the maximum level of recursion depends on the longest path in the automaton. So a large automaton like above can exceed java's stack.\nIn most of the cases we are covered by maxDeterminizedStates but there will always be adversarial cases where a large automaton is created from a small input so I think we should also have safeguards in the recursive methods. \n\nI've attached a patch that adds a max recursion level to Operations.isFinite and Operations.topoSortStates in order to limit stack overflows. The limit is set to 1000 so any automaton with a path bigger than 1000 would throw an IllegalStateException.\nThe patch also uses maxDeterminizedStates to limit the number of states that a repeat operator can create and throw a TooComplex..Exception when this limit is reached.\nFinally the patch adds the ability to skip Operations.isFinite on AutomatonQuery and uses this as an optimization for PrefixQuery that uses infinite automatons only.",
    "attachments": {
        "LUCENE-7914.patch": "https://issues.apache.org/jira/secure/attachment/12879805/LUCENE-7914.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16108729",
            "date": "2017-08-01T11:18:35+0000",
            "content": "Sorry, but prefixquery is definitely infinite. Besides this logic being wrong, I really don't like the \"trillean\" and additional ctor added to the public API. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16108772",
            "date": "2017-08-01T11:56:53+0000",
            "content": "Right sorry, a prefix query is indeed infinite. I reverted the logic in the patch. \nThis is just a very small optimization and I can remove it from the patch if it makes the constructor too complex.\nIt's just that setting a limit on a prefix query just because it might lead to StackOverflow is error prone. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16108784",
            "date": "2017-08-01T12:03:26+0000",
            "content": "I removed the new constructor in AutomatonQuery and the optim in PrefixQuery. This is useless if we have the max recursion in place and I agree that it makes the constructor ugly. \nSo here is a new patch. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16108799",
            "date": "2017-08-01T12:16:47+0000",
            "content": "I don't understand the serialization/deserialization stuff in the tests. Lucene queries no longer support this serialization for years, is this intentional? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16108811",
            "date": "2017-08-01T12:26:40+0000",
            "content": "It's not, it's just a copy/paste from another test in the class. I pushed another iteration that removes the serialization/deserialization from TestRegExp completely. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16108892",
            "date": "2017-08-01T13:34:42+0000",
            "content": "ok, thanks.\n\nAs far as finite stuff, we might be able to remove the requirement that this is provided to AutomatonTermsEnum at all (see https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum.java#L200-L202)\n\nIt is kind of a leftover from when its intersection was less efficient (it handled infinite and finite DFAs differently). Nowadays it handles the case where its actually in a looping portion and drives that part completely by the terms dictionary. \n\nI'm not sure if the current \"if finite\" guards to this loop detection really save us CPU for complex finite DFAs (e.g. fuzzy, spellcheck). That would be the thing to experiment with to see if this boolean could be removed... ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16108895",
            "date": "2017-08-01T13:35:38+0000",
            "content": "And these comments above are just for discussion and probably not something we should do on this one, we should split out a different issue probably if we want to get rid of the finite tracking. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16108918",
            "date": "2017-08-01T13:44:53+0000",
            "content": "+1 I like those safeguards, they are not invasive. I'd throw an IAE rather than an ISE when the recursion depth is exceeded since the problem is about the input? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16109020",
            "date": "2017-08-01T14:39:43+0000",
            "content": "Thanks for the great feedback Adrien Grand and Robert Muir\n\nI pushed another iteration that replaces the ISEs in IAEs and cleans up the unnecessary changes. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16110223",
            "date": "2017-08-02T03:31:59+0000",
            "content": "Patch looks good to me. I think there are some spurious imports (import org.apache.lucene.util.fst.Util) added in some of the tests that can be removed. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16110389",
            "date": "2017-08-02T06:26:29+0000",
            "content": "+1 FYI tests seem to still expect an ISE. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16114200",
            "date": "2017-08-04T10:03:06+0000",
            "content": "Commit 7dde798473d1a8640edafb41f28ad25d17f25a2d in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7dde798 ]\n\nLUCENE-7914: Add a maximum recursion level in automaton recursive functions (Operations.isFinite and Operations.topsortState) to prevent large automaton to overflow the stack. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16114209",
            "date": "2017-08-04T10:13:10+0000",
            "content": "Commit 3610c8d1b8927fdb61667ea4c49f983bbe13a404 in lucene-solr's branch refs/heads/branch_7x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3610c8d ]\n\nLUCENE-7914: Add a maximum recursion level in automaton recursive functions (Operations.isFinite and Operations.topsortState) to prevent large automaton to overflow the stack. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16114211",
            "date": "2017-08-04T10:13:47+0000",
            "content": "Thanks Robert Muir and Adrien Grand ! ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16116175",
            "date": "2017-08-07T07:12:47+0000",
            "content": "Commit 6b3ea4d0c24adad9a270e43a3b5e07aac8317bee in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b3ea4d ]\n\nLUCENE-7914: AnalyzingSuggesterTest#testRandomRealisticKeys: trim big titles to make sure that they can pass the max recursion level in Operations#topsortState. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16116178",
            "date": "2017-08-07T07:13:51+0000",
            "content": "Commit f059ad065553460412f247c61b887a0c80406c0e in lucene-solr's branch refs/heads/branch_7x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f059ad06 ]\n\nLUCENE-7914: AnalyzingSuggesterTest#testRandomRealisticKeys: trim big titles to make sure that they can pass the max recursion level in Operations#topsortState. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16118027",
            "date": "2017-08-08T08:19:33+0000",
            "content": "I've merged this to master and 7.x but since it's an internal change I'd also like to merge in 7.0. Are there any objections? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16118037",
            "date": "2017-08-08T08:25:40+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16118268",
            "date": "2017-08-08T12:25:33+0000",
            "content": "Commit 2a8930cf838b323eeadba240eb7141ec1f14ca6d in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2a8930c ]\n\n LUCENE-7914: Fix TestSuggestField#testRealisticKeys: trim big titles to make sure that they can pass the max recursion level in Operations#topsortState. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16118269",
            "date": "2017-08-08T12:26:26+0000",
            "content": "Commit 806a485576d20bb39781d1bd73cdc78f690c40e9 in lucene-solr's branch refs/heads/branch_7x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=806a485 ]\n\n LUCENE-7914: Fix TestSuggestField#testRealisticKeys: trim big titles to make sure that they can pass the max recursion level in Operations#topsortState. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16121362",
            "date": "2017-08-10T09:45:32+0000",
            "content": "Commit a0aa0a0d83168186a84d49ec811e098dbcc37076 in lucene-solr's branch refs/heads/branch_7_0 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a0aa0a0 ]\n\nLUCENE-7914: Add a maximum recursion level in automaton recursive functions (Operations.isFinite and Operations.topsortState) to prevent large automaton to overflow the stack. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16121363",
            "date": "2017-08-10T09:45:35+0000",
            "content": "Commit 25ee0141c19b7f6156c2c439a59fad97f383b8cc in lucene-solr's branch refs/heads/branch_7_0 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=25ee014 ]\n\nLUCENE-7914: AnalyzingSuggesterTest#testRandomRealisticKeys: trim big titles to make sure that they can pass the max recursion level in Operations#topsortState. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16121364",
            "date": "2017-08-10T09:45:36+0000",
            "content": "Commit e16df81cb9a1e687295237ce45339be2e7185519 in lucene-solr's branch refs/heads/branch_7_0 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e16df81 ]\n\n LUCENE-7914: Fix TestSuggestField#testRealisticKeys: trim big titles to make sure that they can pass the max recursion level in Operations#topsortState. ",
            "author": "ASF subversion and git services"
        }
    ]
}