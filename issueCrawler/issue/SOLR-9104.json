{
    "id": "SOLR-9104",
    "title": "NPE in CollapsingQParser when two fq={!collapse} and zero results",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "This is a very weird problem that is reproducible on a small production server, but not on the local machine although they run the same 6.0 version., and have an almost identical index. The only minor difference is that production is a SolrCloud with 1 shard and two replica's, just for a bit of redundancy.\n\nThe following query yields zero results and throws the NPE:\n\nselect?q=query:seis&fq={!collapse field=query_digest}&fq={!collapse field=result_digest}\n\n\n\nThe next query does yield results and does not throw anything, it just works as it should work:\n\nselect?q=query:seiz&fq={!collapse field=query_digest}&fq={!collapse field=result_digest}\n\n\n\nThe /select handler used does not add any fancy param other than rows.\n\nHere's the NPE:\n\n\n2016-05-11 14:10:27.666 ERROR (qtp1209271652-3338) [c:suggestions s:shard1 r:core_node1 x:suggestions_shard1_replica1] o.a.s.s.HttpSolrCall null:java.lang.NullPointerException\n        at org.apache.solr.search.CollapsingQParserPlugin$IntScoreCollector.finish(CollapsingQParserPlugin.java:814)\n        at org.apache.solr.search.CollapsingQParserPlugin$IntScoreCollector.finish(CollapsingQParserPlugin.java:851)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:272)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1794)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1611)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:634)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:529)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:287)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n\n\n\nEdit: for the sake of clarity. It really needs double fq={!collapse bla bla for the NPE to appear. If i remove either of the filters from the query, i get a nice zero resultset back. Both fields are defined as int.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-12T18:11:10+0000",
            "author": "Hoss Man",
            "content": "I haven't dug into this much, but here is line 814 in 6.0.0...\n\n\nint nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n\n\n\n\n\tcurrentContext is a primitive int that's set to 0, so it can't be the NPE\n\tcontexts must be non-null or we would have gotten an NPE earlier in this method\n\tthat leaves contexts[currentContext+1] as the only possible source of the NPE.\n\n\n\nSo at a glance, my best guess for what's happening here is that:\n\n\n\tyou have multiple secments and CollapsingQParserPlugin initializes contexts[] accordnly\n\tdoSetNextReader is, apparently, NOT getting called for every segment\n\tbecause doSetNextReader is not called for some segments, contexts[x] is null for some values of x, and code in the finish() method does not expect any null values in contexts[]\n\n\n\nBased on your statement that you can reproduce this only when there are zero results and when using multiple collapse components, my guess is: with multiple DelegatingCollectors in a chain, if one collector doesn't match anything in segementX then doSetNextReader(segmentX) isn't getting called on all the subsequent collectors.\n\nOff the top of my head, i don't know if that means there is a bug in the the code that calls DelegatingCollectors, or if the bug is in CollapsingQParserPlugin for assuing doSetNextReader will aways be called? ... IIRC CollapsingQParserPlugin plays fast an loose with the normal contracts, defering a lot of stuff that's normally done in collect(..) until the finish method ... maybe it's not doing what it needs to do to delegate properly to other nstances of itself when a segment matches no docs?\n\n\n\nIn any case, hopefully that gives you enough info to try and create a reproducible/debugable test case?  an index with mutiple segments where some segments match no docs in the query and multiple collapse fqs are used?\n\n ",
            "id": "comment-15281861"
        },
        {
            "date": "2016-05-12T18:16:34+0000",
            "author": "Joel Bernstein",
            "content": "There was an old ticket about NPE's with multiple collapses in the same request. I'll dig around for it. I believe there was something in the way the code was designed that made multiple collapse unreliable. But I don't remember whether the issue was fixed. ",
            "id": "comment-15281870"
        },
        {
            "date": "2016-05-12T18:17:56+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I think you've hit on the exact problem:\n\nOff the top of my head, i don't know if that means there is a bug in the the code that calls DelegatingCollectors, or if the bug is in CollapsingQParserPlugin for assuing doSetNextReader will aways be called? ... IIRC CollapsingQParserPlugin plays fast an loose with the normal contracts, defering a lot of stuff that's normally done in collect(..) until the finish method ... maybe it's not doing what it needs to do to delegate properly to other nstances of itself when a segment matches no docs? ",
            "id": "comment-15281873"
        },
        {
            "date": "2016-09-13T15:43:21+0000",
            "author": "Markus Jelsma",
            "content": "This are slightly different now, i don't know if this is important. This index functions as an autocompleter with EdgeNGram and it appears zero results is not key to the problem. \n\n\nselect?omitHeader=true&indent=true&wt=json&fl=query&fq={!collapse field=query_digest}&fq={!collapse field=result_digest}&q=query:organi\n\n\n\nYields:\n\n{\n  \"response\":{\"numFound\":5,\"start\":0,\"docs\":[\n      {\n        \"query\":\"organisatiestructuur\"},\n      {\n        \"query\":\"organigram\"},\n      {\n        \"query\":\"organisatieschema\"},\n      {\n        \"query\":\"organisatie\"},\n      {\n        \"query\":\"organisatiebureau\"}]\n  }}\n\n\n\nThe second result, organigram is the problem here. If i add a g to the query the result should yield organigram only.\n\n\nselect?omitHeader=true&indent=true&wt=json&fl=query&fq={!collapse field=query_digest}&fq={!collapse field=result_digest}&q=query:organig\n\n\n\nI now get the NPE again (on Solr 6.1)\n\n\n{\n  \"error\":{\n    \"trace\":\"java.lang.NullPointerException\\n\\tat org.apache.solr.search.CollapsingQParserPlugin$IntScoreCollector.finish(CollapsingQParserPlugin.java:813)\\n\\tat org.apache.solr.search.CollapsingQParserPlugin$IntScoreCollector.finish(CollapsingQParserPlugin.java:850)\\n\\tat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:275)\\n\\tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1810)\\n\\tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1627)\\n\\tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:643)\\n\\tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:529)\\n\\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:293)\\n\\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:156)\\n\\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2036)\\n\\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:657)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:464)\\n\\tat \n\n\n\nAny idea how not having zero results is changing the problem?\n ",
            "id": "comment-15487560"
        },
        {
            "date": "2017-04-19T14:42:00+0000",
            "author": "Markus Jelsma",
            "content": "NPE is still present, stack trace is slightly different today:\n\n\n2017-04-19 14:41:18.657 ERROR (qtp331844619-249) [c:logs s:shard2 r:core_node4 x:logs_shard2_replica2] o.a.s.s.HttpSolrCall null:java.lang.NullPointerException\n        at org.apache.solr.search.CollapsingQParserPlugin$OrdScoreCollector.finish(CollapsingQParserPlugin.java:617)\n        at org.apache.solr.search.CollapsingQParserPlugin$OrdScoreCollector.finish(CollapsingQParserPlugin.java:667)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:240)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:2027)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1844)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:609)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:547)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:295\n\n ",
            "id": "comment-15974805"
        },
        {
            "date": "2017-06-02T09:14:43+0000",
            "author": "Matthias Krueger",
            "content": "Markus Jelsma: See comment from Hoss Man here or mine on SOLR-8807. It seems that two Collapse-Filters just don't work if there are documents returned from less than all segments. A quick fix seems to be to call super.doSetNextReader(context) as first thing in all of CollapsingQParserPlugin's DelegatingCollectors' doSetNextReaders but I don't know if this has any undesired side effects. ",
            "id": "comment-16034358"
        },
        {
            "date": "2018-04-20T11:04:37+0000",
            "author": "Markus Jelsma",
            "content": "Thanks Matthias, it sounds great but we need some committers to chime in regarding side effects. Is there a patch available? ",
            "id": "comment-16445601"
        }
    ]
}