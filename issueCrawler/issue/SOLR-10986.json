{
    "id": "SOLR-10986",
    "title": "TestScoreJoinQPScore.testDeleteByScoreJoinQuery() failure: mismatch: '0'!='1' @ response/numFound",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "6.6",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Reproduces for me on branch_6x but not on master, from https://jenkins.thetaphi.de/job/Lucene-Solr-6.x-Linux/3861/ - git bisect blames commit c215c78 on SOLR-9217:\n\n\nChecking out Revision 9947a811e83cc0f848f9ddaa37a4137f19efff1a (refs/remotes/origin/branch_6x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestScoreJoinQPScore -Dtests.method=testDeleteByScoreJoinQuery -Dtests.seed=6DE98178CA5DE220 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=el-GR -Dtests.timezone=Asia/Vientiane -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.02s J1 | TestScoreJoinQPScore.testDeleteByScoreJoinQuery <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: mismatch: '0'!='1' @ response/numFound\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([6DE98178CA5DE220:7A8B1D8F401EA807]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:989)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:936)\n   [junit4]    > \tat org.apache.solr.search.join.TestScoreJoinQPScore.testDeleteByScoreJoinQuery(TestScoreJoinQPScore.java:125)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene62): {t_description=BlockTreeOrds(blocksize=128), title_stemmed=PostingsFormat(name=Memory doPackFST= false), price_s=BlockTreeOrds(blocksize=128), name=BlockTreeOrds(blocksize=128), id=BlockTreeOrds(blocksize=128), text=PostingsFormat(name=LuceneVarGapFixedInterval), movieId_s=BlockTreeOrds(blocksize=128), title=PostingsFormat(name=Memory doPackFST= false), title_lettertok=BlockTreeOrds(blocksize=128), productId_s=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128)))}, docValues:{}, maxPointsInLeafNode=166, maxMBSortInHeap=7.4808509338680995, sim=RandomSimilarity(queryNorm=false,coord=yes): {}, locale=el-GR, timezone=Asia/Vientiane\n   [junit4]   2> NOTE: Linux 4.10.0-21-generic i386/Oracle Corporation 1.8.0_131 (32-bit)/cpus=8,threads=1,free=159538432,total=510918656",
    "attachments": {
        "SOLR-10986.patch": "https://issues.apache.org/jira/secure/attachment/12875748/SOLR-10986.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-04T21:35:00+0000",
            "content": "\n\tit's nice.\n\tit occurs when there are two segments\n\tdeleteByQ starts to feed joinQ with segments one-by-one\n\tit makes 1st phase search on single segment only, missing terms from other segments.\nwe can\n\teither revert SOLR-9127 (assuming it fixes the problem) and further pursue its' aim separately\n\tor somehow detects leaf segment scorer in JoinQP and get the enclosing parent searcher for the 1st phase search that's a little bit inefficient.\n\n\n\nOpinions, proposals? \nThanks, Steve Rowe for headsup, and Timothy Potter for the test SOLR-6357 ",
            "author": "Mikhail Khludnev",
            "id": "comment-16074084"
        },
        {
            "date": "2017-07-05T11:06:08+0000",
            "content": "Despite the problem per se has no solution. Here is the band aid SOLR-10986.patch. \nIt looks like even deleteByQ can work with join query. However, it doesn't see uncommitted docs, which deleteByQ is supposed to see. \nI'm kindly asking for a brief review, we have an opportunity to bring this fix to 7.0.    \nPackage tests pass.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16074587"
        },
        {
            "date": "2017-07-05T13:46:54+0000",
            "content": "Same trick for OtherCoreJoinQuery ? ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16074773"
        },
        {
            "date": "2017-07-05T13:56:47+0000",
            "content": "It's either already there or it's not vulnerable to it.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16074795"
        },
        {
            "date": "2017-07-06T07:37:03+0000",
            "content": "Looks like the party is over. master and branch_7x (and branch_7_0 as well) already uses threadlocal searcher for fromQuery.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16076099"
        }
    ]
}