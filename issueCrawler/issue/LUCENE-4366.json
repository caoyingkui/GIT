{
    "id": "LUCENE-4366",
    "title": "Small speedups for BooleanScorer",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "",
    "attachments": {
        "LUCENE-4366.patch": "https://issues.apache.org/jira/secure/attachment/12544086/LUCENE-4366.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-06T18:31:48+0000",
            "content": "Initial patch... ",
            "author": "Michael McCandless",
            "id": "comment-13449907"
        },
        {
            "date": "2012-09-06T18:35:05+0000",
            "content": "The patch specializes the [private] collector BS uses to add docs to the bucket list, eg the first clause need not check if the bucket is stale because it always is.  It sorts the clauses first by prohibited clauses and second by smallest firstDocId (proxy for highest docFreq).  It uses an int[] instead of linked list to track live buckets ... ",
            "author": "Michael McCandless",
            "id": "comment-13449914"
        },
        {
            "date": "2012-09-06T18:36:42+0000",
            "content": "10M Wikipedia results:\n\n                Task    QPS base StdDev base      QPS bs   StdDev bs      Pct diff\n     MedSloppyPhrase        6.17        0.26        5.98        0.23  -10% -    5%\n    HighSloppyPhrase        0.88        0.05        0.86        0.05  -12% -    8%\n        HighSpanNear        2.29        0.02        2.25        0.03   -3% -    0%\n             Respell       71.95        1.53       70.98        2.87   -7% -    4%\n            PKLookup      199.32        1.69      196.73        4.17   -4% -    1%\n         MedSpanNear        3.91        0.07        3.89        0.07   -3% -    2%\n              Fuzzy1       81.83        1.27       81.59        1.04   -3% -    2%\n            HighTerm       30.77        2.15       30.80        2.08  -12% -   14%\n         LowSpanNear       10.73        0.09       10.76        0.13   -1% -    2%\n     LowSloppyPhrase       21.67        0.63       21.71        0.42   -4% -    5%\n             MedTerm      138.51       10.57      138.83       10.26  -13% -   16%\n              Fuzzy2       39.98        0.65       40.11        0.88   -3% -    4%\n             Prefix3       30.64        0.44       30.92        0.30   -1% -    3%\n            Wildcard       29.91        1.04       30.27        0.77   -4% -    7%\n             LowTerm      467.62       18.17      478.39       12.75   -4% -    9%\n           MedPhrase       13.82        0.40       14.17        0.32   -2% -    7%\n           LowPhrase       16.12        0.74       16.59        0.59   -5% -   11%\n         AndHighHigh       10.15        0.44       10.54        0.16   -2% -   10%\n          HighPhrase        1.79        0.07        1.86        0.05   -2% -   11%\n          AndHighLow     1046.18       38.67     1106.29       20.15    0% -   11%\n          AndHighMed       51.65        3.07       55.96        0.86    0% -   16%\n           OrHighMed       32.86        2.33       35.92        0.62    0% -   19%\n           OrHighLow       13.21        1.04       14.86        0.11    3% -   23%\n              IntNRQ       11.79        0.88       13.31        0.29    2% -   24%\n          OrHighHigh        6.68        0.47        7.61        0.11    4% -   24%\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13449920"
        },
        {
            "date": "2012-09-07T18:40:55+0000",
            "content": "New patch, removing the BucketTable class entirely (inlining all its\nmembers directly into BS, and making the private collectors non-static):\n\n\n10M docs new BS perf patch:\n\n                Task    QPS base StdDev base      QPS bs   StdDev bs      Pct diff\n              IntNRQ        7.94        0.83        7.78        0.83  -20% -   21%\n             Respell       76.57        3.32       75.11        1.92   -8% -    5%\n             Prefix3       32.59        0.19       32.02        0.38   -3% -    0%\n           MedPhrase       11.58        0.08       11.39        0.42   -5% -    2%\n            Wildcard       28.90        0.14       28.43        0.16   -2% -    0%\n         AndHighHigh       10.10        0.27        9.95        0.22   -6% -    3%\n           LowPhrase       15.34        0.09       15.15        0.45   -4% -    2%\n              Fuzzy2       77.20        3.74       76.52        1.64   -7% -    6%\n          AndHighMed       72.82        1.79       72.36        2.06   -5% -    4%\n     MedSloppyPhrase        7.32        0.15        7.29        0.23   -5% -    4%\n              Fuzzy1       85.81        3.61       85.69        2.01   -6% -    6%\n          HighPhrase        1.58        0.02        1.57        0.02   -2% -    2%\n             MedTerm      149.27        0.60      149.20       18.07  -12% -   12%\n            HighTerm       18.11        0.11       18.10        2.39  -13% -   13%\n             LowTerm      470.53        7.46      471.33       50.82  -12% -   12%\n          AndHighLow     1408.87       23.35     1418.47       19.00   -2% -    3%\n         MedSpanNear        5.04        0.16        5.08        0.13   -4% -    6%\n    HighSloppyPhrase        1.12        0.03        1.13        0.05   -6% -    9%\n         LowSpanNear       13.16        0.43       13.36        0.34   -4% -    7%\n            PKLookup      200.57        7.91      204.31        7.40   -5% -    9%\n        HighSpanNear        1.32        0.04        1.35        0.03   -2% -    6%\n     LowSloppyPhrase        6.80        0.17        6.99        0.09    0% -    6%\n          OrHighHigh       10.34        0.70       11.25        0.34   -1% -   20%\n           OrHighMed       14.79        1.05       16.94        0.11    6% -   24%\n           OrHighLow       13.27        1.02       15.29        0.13    6% -   25%\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13450873"
        },
        {
            "date": "2012-09-08T03:09:27+0000",
            "content": "I only barely glanced at the patch: can you explain whats going on with the prohibited scorers?\n\nI'm not sure this is worth complicating booleanscorer over, i think these are somewhat rare.\n\nif the goal is to prevent calling score() on prohibited scorers, i think we should just wrap them in ConstantScorer or something:\nBS2 also calls score() on prohibited scorers and it would fix this for both at the Weight level without code specialization. ",
            "author": "Robert Muir",
            "id": "comment-13451234"
        },
        {
            "date": "2012-09-14T17:00:17+0000",
            "content": "I agree it'd be nice to not score MUST_NOT clauses for both BS and\nBS2.  Really crazy that we do that!\n\nSeparately I think BS should handle MUST clauses in some cases...\n\nThere are several optimizations:\n\n\n\tWhen collecting first clause per-chunk, don't bother checking\n    whether the bucket is stale since it will always be (saves an if\n    per hit).  I also sort by smallest first-docID first (proxy for\n    highest docFreq) so this saved-if-per-hit has the most impact.\n\n\n\n\n\tUse int[] instead of linked list to record filled buckets.\n\n\n\n\n\tDon't call .score for prohibited hits.\n\n\n\n\n\tDon't enroll prohibited hits into the \"live\" buckets list.\n\n\n\n\n\tDon't call .score for a hit that was already prohibited due to a\n    previous clause (I sort prohibited clauses first for this\n    reason).\n\n\n\n\n\tUse \"boolean prohibited\" instead of int bitmask (not sure this\n    matters but it was confusing to use a bitmask).\n\n\n\nI suspect the saved if per collect is most of the gains (the results\nabove didn't test MUST_NOT clauses ... still TODO).  But ... I'm getting\nerratic results when performance testing (and can't reproduce the above\nresults on my current patch...).  Not sure what's up... ",
            "author": "Michael McCandless",
            "id": "comment-13455940"
        },
        {
            "date": "2012-09-14T17:07:51+0000",
            "content": "\nDon't call .score for prohibited hits.\n\nRight but this would be achieved by what I suggested above, you would actually call score() it just wouldnt do anything for prohibited scorers since it would be wrapped in CSQ.\n\n\nDon't call .score for a hit that was already prohibited due to a\nprevious clause (I sort prohibited clauses first for this\nreason).\n\nMy question is how much this would buy us over the above, I'm trying to see if we can narrow down the specialization  ",
            "author": "Robert Muir",
            "id": "comment-13455948"
        },
        {
            "date": "2012-09-15T15:40:17+0000",
            "content": "New patch, removing the specialization entirely and instead just\ntrying to make things simpler (no more FakeScorer, no more\nBucketTable, int[] instead of linked list).  I tried a number of\nvariations but they all seem to be slower than trunk ... so for now I\ndon't plan on pursuing this anymore ... just putting the patch up for\nreference.\n\nI also added a test case to verify passing max != Integer.MAX_VALUE\nworks (the code is otherwise untested today) ... I'll commit that\npart. ",
            "author": "Michael McCandless",
            "id": "comment-13456433"
        }
    ]
}