{
    "id": "SOLR-10241",
    "title": "Add a configset for \"classic\" schema.xml.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There are a number of questions on the user's list about hand-editing the managed-schema files. I think there's also confusion about the fact that the classic schema is still possible (yes, I know there's documentation, but....)\n\nWDYT about creating a new configset that uses classic schema factory? And perhaps make it pretty minimal? Just a few useful field types (text_en, the primitive ones, maybe with a couple with stopword files in the lang subdir). Just enough to show a good structure... \n\nStraw man candidates to remove:\nschema\n> most/all of the language variants\n> dynamic fields (maybe leave one in a comment)\n> copyField directives (maybe leave one in a comment)\n> ???\nsolrconfig\n> clustering, \n> most if not all of the language variants (maybe include one or two in comments). \n> QEV. \n> Take out anything that requires adding <lib> directives\n> browse request handler\n> ???\n\nMaybe put in a comment where to find the examples (e.g. one of the existing config sets).\n\nThat said, how this squares with simplifying/cleaning up current configsets is a good question.\n\n(from on offline conversation) There are already at least 2 issues about cleaning up the existing ones, so this is the same behavior that gets us into this - we can\u2019t agree on what good examples are so we just throw another one into the pile",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-07T18:24:43+0000",
            "content": "Not a bad idea. In my mind it all depends on having a kitchen-sink schema from which things can be copied. If that exists and explains the cross-dependencies (e.g. this field definition is used in solrconfig.xml because of....), then we can simplify other things quite a lot.\n\nSo, to me, we kind of need an umbrella issue to hash out what \"kitchen sink\" could look like and then what that means going downstream. And - of course - people willing to think about it in details, which is actually the bigger problem. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-15899892"
        },
        {
            "date": "2017-03-07T20:24:46+0000",
            "content": "I've been having second thoughts about a \"classic\" configset, but I can go either way on that. Would it do to have a better comment in, say, basic configs that had the classic schema factory ready? Something like \"replace the managed schema with this\"?\n\nthat's separate from the kitchen sink bits which could also be moved out of basic_configs.....\n ",
            "author": "Erick Erickson",
            "id": "comment-15900091"
        },
        {
            "date": "2017-03-07T20:32:43+0000",
            "content": "This all depends on what you want to achieve and work backwards from it. The scenario is that somebody does not want managed schema? Why? For security? They can lock it down. For legacy reasons? Then they already know enough Solr. Because many tutorials on the web still talk about old-style? Maybe there is a need for \"upgrade\" manual page or blog post.\n\nIt may be that we really should just do a manual page that is dedicated to this topic and its trade-off. And mention it in the config file. Or we could do a minimal example.\n\nBut the right way to think about it - I feel - would be backwards from the typical scenario.\n ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-15900104"
        },
        {
            "date": "2017-03-07T20:37:09+0000",
            "content": "From the user's list, points to clarify in the ref guide:\n\nI would second that guide could be clearer on that. I read and reread several times trying to get my head around the schema.xml/managed-schema bit. I came away from first cursory reading with the idea that managed-schema was mostly for schema-less mode and only after some stuff ups and puzzling over comments in the basic-config schema file itself did I go back for more careful re-read. I am still not sure that I have got all the nuances. My understanding is:\n\nIf you don\u2019t want ability to edit it via admin UI or config api, rename to schema.xml. Unclear whether you have to make changes to other configs to do this. Also unclear to me whether there was any upside at all to using schema.xml? Why degrade functionality? Does the capacity for schema.xml only exist for backward compatibility?\n\nIf you want to run schema-less, you have to use managed-schema????? (I didn\u2019t delve too deep into this).\n\nIn the end, I used basic-config to create core and then hacked managed-schema from there.\n\n\nI would have to say the \"basic-config\" seems distinctly more than basic. It is still a huge file. I thought perhaps I could delete every unused field type, but worried there were some \"system\" dependencies. Ie if you want *target type wildcard queries do you need to have text_general_reverse and a copy to it? If you always explicitly set only defined fields in a custom indexer, then can you dump the whole dynamic fields bit? ",
            "author": "Erick Erickson",
            "id": "comment-15900110"
        },
        {
            "date": "2017-03-07T21:41:58+0000",
            "content": "I sympathize with our users on this matter; there are various feature gaps that stand in the way of managed schema being the one best way to do things (Noble Paul Varun Thacker and I recently white-boarded the remaining ones).  Since that ideal reality isn't here today, I wish we had a better out-of-the-box experience for users that want to use classic schema.  \n\n\n\tPerhaps one approach is for bin/solr to automate conversion from managed schema to classic, provided the user adds an option?\n\tI kinda dread yet another config around here to maintain; but I certainly won't stand in anyone's way from doing so if that's how Erick (or whoever) puts forth their time to help users.  It's possibly the easiest (least work) path in the short term, but with longer term annoyances.\n\tI wish the current config mechanism was more universal to both: edit a schema.xml if you want, or purely use schema API if you want to do that.  I understand that we don't want Solr to clobber a user's changes, and so that concern led to where we are today.  One possible way to do this would be for the schema.xml file to contain an embedded hash of the schema (less the hash itself of course). It'd be optional and maybe have an explicit value a user could provide to give Solr permission to overwrite it (i.e. in no event should users calculate the hash themselves).  It would only be verified when an API based change attempts to overwrite a config.\n\n ",
            "author": "David Smiley",
            "id": "comment-15900226"
        }
    ]
}