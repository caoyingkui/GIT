{
    "id": "SOLR-9859",
    "title": "replication.properties cannot be updated after being written and neither replication.properties or index.properties are durable in the face of a crash",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "5.5.3,                                            6.3",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "If a shard recovers via replication (vs PeerSync) a file named replication.properties gets created. If the same shard recovers once more via replication, IndexFetcher fails to write latest replication information as it tries to create replication.properties but as file already exists. Here is the stack trace I saw \n\njava.nio.file.FileAlreadyExistsException: <solr_home>\\shard-3-001\\cores\\collection1\\data\\replication.properties\n\tat sun.nio.fs.WindowsException.translateToIOException(Unknown Source)\n\tat sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)\n\tat sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)\n\tat sun.nio.fs.WindowsFileSystemProvider.newByteChannel(Unknown Source)\n\tat java.nio.file.spi.FileSystemProvider.newOutputStream(Unknown Source)\n\tat java.nio.file.Files.newOutputStream(Unknown Source)\n\tat org.apache.lucene.store.FSDirectory$FSIndexOutput.<init>(FSDirectory.java:413)\n\tat org.apache.lucene.store.FSDirectory$FSIndexOutput.<init>(FSDirectory.java:409)\n\tat org.apache.lucene.store.FSDirectory.createOutput(FSDirectory.java:253)\n\tat org.apache.solr.handler.IndexFetcher.logReplicationTimeAndConfFiles(IndexFetcher.java:689)\n\tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:501)\n\tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:265)\n\tat org.apache.solr.handler.ReplicationHandler.doFetch(ReplicationHandler.java:397)\n\tat org.apache.solr.cloud.RecoveryStrategy.replicate(RecoveryStrategy.java:157)\n\tat org.apache.solr.cloud.RecoveryStrategy.doRecovery(RecoveryStrategy.java:409)\n\tat org.apache.solr.cloud.RecoveryStrategy.run(RecoveryStrategy.java:222)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\n\tat java.util.concurrent.FutureTask.run(Unknown Source)\n\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$0(ExecutorUtil.java:229)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.lang.Thread.run(Unknown Source)",
    "attachments": {
        "SOLR-9859.patch": "https://issues.apache.org/jira/secure/attachment/12843381/SOLR-9859.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-12T19:55:16+0000",
            "author": "Pushkar Raste",
            "content": "Proposed solution 'Delete existing file and create a new one' ? ",
            "id": "comment-15742967"
        },
        {
            "date": "2016-12-14T18:13:10+0000",
            "author": "Mark Miller",
            "content": "I may be seeing this in the tests as well, but we just WARN about it. Should review this code:\n\n\n   [junit4]   2> 254570 WARN  (indexFetcher-1159-thread-1) [    x:collection1] o.a.s.h.IndexFetcher Exception while updating statistics\n   [junit4]   2> java.io.IOException: file \"replication.properties\" was already written to\n   [junit4]   2> \tat org.apache.lucene.store.MockDirectoryWrapper.createOutput(MockDirectoryWrapper.java:654)\n   [junit4]   2> \tat org.apache.solr.handler.IndexFetcher.logReplicationTimeAndConfFiles(IndexFetcher.java:689)\n   [junit4]   2> \tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:501)\n   [junit4]   2> \tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:265)\n   [junit4]   2> \tat org.apache.solr.handler.ReplicationHandler.doFetch(ReplicationHandler.java:397)\n   [junit4]   2> \tat org.apache.solr.handler.ReplicationHandler.lambda$setupPolling$2(ReplicationHandler.java:1154)\n   [junit4]   2> \tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n   [junit4]   2> \tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n   [junit4]   2> \tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n   [junit4]   2> \tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]   2> \tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-15749029"
        },
        {
            "date": "2016-12-14T18:28:12+0000",
            "author": "Mark Miller",
            "content": "So this is an easy fix, but if you crash at the wrong time this isn't great. I wonder if we can try to load the index directory with the newest timestamp on startup if no index.properties file exists. ",
            "id": "comment-15749060"
        },
        {
            "date": "2016-12-14T19:12:17+0000",
            "author": "Pushkar Raste",
            "content": "Is there a way we can write a temp file and do a mv to rename/overwrite replication.properties\n\nAlternate solution would be to keep appending to existing file and read the latest stats from the file. ",
            "id": "comment-15749175"
        },
        {
            "date": "2016-12-15T09:12:36+0000",
            "author": "Cao Manh Dat",
            "content": "Just by looking at the code at IndexFetcher#logReplicationTimeAndConfFiles, I think we have a problem here :\n\n\tWe open old replication.properties at ReplicationHandler#loadReplicationProperties()\n\tWe update the props in memory\n\tWe create a new file replication.properties and write down newest replication props to that file.\n\n\n\nSo we always encounter this error if replication.properties exist, plus we can't update replication.properties so ReplicationHandler#getStatistics() always return the replication props of first run.\n\nThe error happen in master-slave mode as well ( TestReplicationHandler )\n\nSolution: I think we can simply delete the exist replication.properties before write a new one. ",
            "id": "comment-15750853"
        },
        {
            "date": "2016-12-15T09:17:55+0000",
            "author": "Cao Manh Dat",
            "content": "Here is the patch for this issue. In this patch we simply delete the replication.properties if the file already exists. ",
            "id": "comment-15750869"
        },
        {
            "date": "2016-12-15T16:44:23+0000",
            "author": "Mark Miller",
            "content": "Is there a way we can write a temp file and do a mv to rename/overwrite replication.properties\n\nNothing great. Java 7 gives us an atomic move that can overwrite an existing file, but it's impl dependent on if that is supported and it wouldn't work for the arbitrary FileSystem's we support. We would still need some start up logic that could address a crashed state.\n\nAlternate solution would be to keep appending to existing file and read the latest stats from the file.\n\nThe problem is we use this same strategy for index.properties which is not so straightforward to do this way.\n\nI think we can simply delete the exist replication.properties before write a new one.\n\nThat is the easy fix I mention above, but it's fragile, and like index.properties, not robust in a crash. ",
            "id": "comment-15751827"
        },
        {
            "date": "2016-12-15T17:33:07+0000",
            "author": "Mark Miller",
            "content": "From what I've read, this is one possible solution. Would still want to test a little on Windows I think. ",
            "id": "comment-15751961"
        },
        {
            "date": "2016-12-15T17:34:23+0000",
            "author": "Mark Miller",
            "content": "but it's impl dependent on if that is supported and it wouldn't work for the arbitrary FileSystem's we support\n\nI've read this should actually work across the major operating systems (I'd expect it on Unix systems, but seems Windows should be fine too).\n\nWe can support it on HDFS as well it seems. So perhaps something like this is the easiest solution. ",
            "id": "comment-15751963"
        },
        {
            "date": "2016-12-15T17:46:21+0000",
            "author": "Pushkar Raste",
            "content": "Mark Miller looks like in the `atomicRename` file you are deleting existing file and then renaming the temp file. How is this better than just deleting the file a writing a new file, if we crash at a wrong time (as you have mentioned above). \n\nWould we need to manually rename the temp file in such a scenario? ",
            "id": "comment-15751997"
        },
        {
            "date": "2016-12-15T18:00:15+0000",
            "author": "Mark Miller",
            "content": "That is the fallback behavior. See the overrides. ",
            "id": "comment-15752042"
        },
        {
            "date": "2016-12-15T18:02:07+0000",
            "author": "Mark Miller",
            "content": "Patch polished up a bit. ",
            "id": "comment-15752046"
        },
        {
            "date": "2016-12-19T18:34:04+0000",
            "author": "Mark Miller",
            "content": "If we have consensus I'll commit this soon. ",
            "id": "comment-15761934"
        },
        {
            "date": "2016-12-19T19:26:28+0000",
            "author": "Pushkar Raste",
            "content": "Looks good to me\nCan we write a test to validate the patch?  ",
            "id": "comment-15762069"
        },
        {
            "date": "2016-12-20T09:48:18+0000",
            "author": "Pierre Alain",
            "content": "Seems to be the same issue\n\n\tSOLR-9580 ?\n\n ",
            "id": "comment-15763791"
        },
        {
            "date": "2016-12-22T17:22:11+0000",
            "author": "Pushkar Raste",
            "content": "Yeah. Looks like these are the same issue ",
            "id": "comment-15770591"
        },
        {
            "date": "2016-12-28T13:42:50+0000",
            "author": "Mark Miller",
            "content": "Added a test for not being able to write replication statistics after the first replication. ",
            "id": "comment-15782906"
        },
        {
            "date": "2016-12-28T23:54:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 96ed221fb6924dd167591004a5eaf70d53f92e4f in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=96ed221 ]\n\nSOLR-9859: replication.properties cannot be updated after being written and neither eplication.properties or ndex.properties are durable in the face of a crash. ",
            "id": "comment-15784031"
        },
        {
            "date": "2017-01-03T19:25:26+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c6ea1718675beebdddd988b08b2b213155d8b20f in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c6ea171 ]\n\nSOLR-9859: replication.properties cannot be updated after being written and neither eplication.properties or ndex.properties are durable in the face of a crash. ",
            "id": "comment-15795946"
        },
        {
            "date": "2017-01-07T08:54:11+0000",
            "author": "Cao Manh Dat",
            "content": "Mark Miller It seems we still have an exception being logged. It belong to the case when \"replication.properties\" do not exist.\n\njava.nio.file.NoSuchFileException: /tmp/solr.cloud.OnlyLeaderIndexesTest_77D87333D3A12E8B-001/tempDir-001/node2/collection1_shard1_replica3/data/replication.properties\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:244)\n\tat sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)\n\tat java.nio.file.Files.delete(Files.java:1126)\n\tat org.apache.lucene.store.FSDirectory.privateDeleteFile(FSDirectory.java:373)\n\tat org.apache.lucene.store.FSDirectory.deleteFile(FSDirectory.java:335)\n\tat org.apache.lucene.store.FilterDirectory.deleteFile(FilterDirectory.java:62)\n\tat org.apache.solr.core.DirectoryFactory.renameWithOverwrite(DirectoryFactory.java:193)\n\tat org.apache.solr.core.MetricsDirectoryFactory.renameWithOverwrite(MetricsDirectoryFactory.java:201)\n\tat org.apache.solr.handler.IndexFetcher.logReplicationTimeAndConfFiles(IndexFetcher.java:726)\n\tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:519)\n\tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:274)\n\tat org.apache.solr.handler.ReplicationHandler.doFetch(ReplicationHandler.java:406)\n\tat org.apache.solr.handler.ReplicationHandler.lambda$setupPolling$2(ReplicationHandler.java:1163)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-15807127"
        },
        {
            "date": "2017-01-08T14:11:03+0000",
            "author": "Mark Miller",
            "content": "Thanks Cao - looks like we are only ignoring FileNotFoundException and this is throwing NoSuchFileException. ",
            "id": "comment-15809451"
        },
        {
            "date": "2017-01-08T14:22:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 25290ab5d6af25c05cbbb4738f49329273a7d693 in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=25290ab ]\n\nSOLR-9859: Don't log error on NoSuchFileException (Cao Manh Dat) ",
            "id": "comment-15809466"
        },
        {
            "date": "2017-01-08T14:25:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3919519a22491f01c993b82bf1470f0d3967771c in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3919519 ]\n\nSOLR-9859: Don't log error on NoSuchFileException (Cao Manh Dat) ",
            "id": "comment-15809470"
        },
        {
            "date": "2017-01-08T14:31:53+0000",
            "author": "Mark Miller",
            "content": "Thanks all! ",
            "id": "comment-15809482"
        },
        {
            "date": "2017-03-21T20:37:23+0000",
            "author": "Walter Underwood",
            "content": "Is there a workaround for fixing this on a 6.3.0 host? Does it work to delete replication.properties then start Solr? ",
            "id": "comment-15935286"
        }
    ]
}