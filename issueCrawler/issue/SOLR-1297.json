{
    "id": "SOLR-1297",
    "title": "Enable sorting by Function Query",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be nice if one could sort by FunctionQuery.  See also SOLR-773, where this was first mentioned by Yonik as part of the generic solution to geo-search",
    "attachments": {
        "SOLR-1297.better.field.support.patch": "https://issues.apache.org/jira/secure/attachment/12456076/SOLR-1297.better.field.support.patch",
        "SOLR-1297-2.patch": "https://issues.apache.org/jira/secure/attachment/12437462/SOLR-1297-2.patch",
        "SOLR-1297_weightSorts.patch": "https://issues.apache.org/jira/secure/attachment/12468791/SOLR-1297_weightSorts.patch",
        "SOLR-1297.patch": "https://issues.apache.org/jira/secure/attachment/12427821/SOLR-1297.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12777972",
            "date": "2009-11-14T17:19:59+0000",
            "content": "Note, there is a temporary workaround for this:  (main query)^0 func(...) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12789551",
            "date": "2009-12-11T21:45:26+0000",
            "content": "For this, I think we want to be able to do things like:\n\nJust functions\n\nsort=dist(2,x,y, point(0,0)) desc\n\n\n\nMultiple sort params, some functions, some fields\n\nsort=weight asc,dist(2,x,y, point(0,0)) asc\n\n\n\nIf and when a function result cache exists, we should be able to take advantage of that too, but that is an implementation detail. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12789738",
            "date": "2009-12-12T13:37:36+0000",
            "content": "First crack at a patch.  I think it's in pretty good shape, but I had to rewrite QueryParsing.parseSort(), so it bears some extra scrutiny (although I put tests in place first).\n\nAdded a bunch of new tests for both parsing and for search (see QueryParsingTest and SortByFunctionTest).  All existing and new tests pass.\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12789811",
            "date": "2009-12-12T23:04:32+0000",
            "content": "Committed revision 889997. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12835795",
            "date": "2010-02-19T16:09:44+0000",
            "content": "Just curious - what were the reasons behind adding a getSortField() method to ValueSource? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12835796",
            "date": "2010-02-19T16:14:43+0000",
            "content": "See the processSort() method in QueryParsing.  Seemed like the logical way for the ValueSource to be able to define how sorting should work for the ValueSource, essentially mirroring getSortField from the FieldType. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12835855",
            "date": "2010-02-19T17:57:10+0000",
            "content": "function queries aren't weighted... reopening to track this problem. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12836394",
            "date": "2010-02-21T16:43:15+0000",
            "content": "Not following. What do I need to fix? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12836398",
            "date": "2010-02-21T16:54:46+0000",
            "content": "Function queries can contain normal queries, which need weighting to produce correct scores and work properly.  This may not be straightforward to get right, hence I've just left this issue open for now. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12839598",
            "date": "2010-03-01T08:36:03+0000",
            "content": "When I set bit complex function to sort parameter, I got the error:\n\n\nMust declare sort field or function\norg.apache.solr.common.SolrException: Must declare sort field or function\n\tat org.apache.solr.search.QueryParsing.processSort(QueryParsing.java:376)\n\tat org.apache.solr.search.QueryParsing.parseSort(QueryParsing.java:281)\n\tat org.apache.solr.search.QueryParsingTest.testSort(QueryParsingTest.java:105)\n\n\nAttached the fix and the test case. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12842480",
            "date": "2010-03-07T20:27:01+0000",
            "content": "Finally got a chance to check this out a little more... here are the current issues I think:\n\n\tfunctions need to be weighted (as previously noted)\n\tparseSort needs to actually parse the function query with the real function query parsing code, rather than trying to parse it itself first - two sets of parsing code for the same thing will always lead to subtle bugs.  For example, things like query($qq) fail to parse, as do functions with string literals that contain markup like parens.\n\tparseFunction is called (that should really be deprecated) which doesn't use the right QParser (it just constructs a local one with the incorrect core - SolrCore.getSolrCore())\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12842491",
            "date": "2010-03-07T22:09:54+0000",
            "content": "parseSort needs to actually parse the function query with the real function query parsing code, rather than trying to parse it itself first - two sets of parsing code for the same thing will always lead to subtle bugs. For example, things like query($qq) fail to parse, as do functions with string literals that contain markup like parens.\n\nNot sure I understand this, I didn't write any new parsing code. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12842493",
            "date": "2010-03-07T22:16:37+0000",
            "content": "Not sure I understand this, I didn't write any new parsing code.\n\nYou may not be producing a ValueSource, but you added parsing code to parseSort()  to tell if something was a function query and find the end of it.  And I verified it doesn't work for a couple of cases (the query($qq) and string literals with markup).  We should really just use the actual value source parser itself. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872581",
            "date": "2010-05-27T22:08:14+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872679",
            "date": "2010-05-27T23:01:07+0000",
            "content": "Correcting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12884373",
            "date": "2010-07-01T18:26:12+0000",
            "content": "Here's some more unit tests. "
        },
        {
            "author": "Scott Kister",
            "id": "comment-12909013",
            "date": "2010-09-13T21:49:38+0000",
            "content": "Bug report on this feature, if there is a wildcard entry in schema.xml such as the following.\n\n    <!-- Ignore any fields that don't already match an existing field name -->\n    <dynamicField name=\"*\" type=\"ignored\" multiValued=\"true\" />\n\nthen this feature does not work and an error is returned, ie\n\nGET 'http://localhost:8983/solr/select?q=:&sort=sum(1,2)+asc'\nError 400 can not sort on unindexed field: sum(1,2) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12916516",
            "date": "2010-09-30T15:29:40+0000",
            "content": "Here's a patch that re-implements the sort parsing such that arbitrarily complex function queries can be parsed.\n\nThis does not address the weighting issue (which isn't a parsing issue) that causes relevancy queries not  not work correctly. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12916740",
            "date": "2010-10-01T00:27:38+0000",
            "content": "FYI: with Yonik's latest commit (#1003107) the problem that Scott mentioned is no longer an issue \u2013 but the reason is that Yonik's changes severly limit the set of field names that can legally be sorted on to those that meat the same requirements as a java identifier (ie: \"1_s\" is no longer a field name that can be sorted on)\n\nAn idea that has been floating around in my head since i saw Scott's comment is that instead of trying to parse a field name first, and then doing function parsing second, we should reverse the order: try to parse as a function first, then as a field name (because we don't allow wild card style function names, but we do allow dynamic field names)\n\nAfter looking at Yonik's commit, i brought this up with him on IRC and we came to a consensus that:\n\n\twe should discourage people from having crazy field names\n\tit might be expensive to try and parse every sort param as a function if it then turned out to be a simple field name - particularly since some FieldTypes might support SortField but not ValueSource (so trying to parse as a function first would likely result in an exception)\n\twe should optimize for the simple common case of simple field names\n\n\n\nSo with that in mind, i came up with the attached patch which leaves in the quick short circuit for field names that are really simple, then tries to parse as a function, then as a last resort uses the same basic parsing that Solr 1.4 did: treats everything up to the first whitespace as a potential field name.\n\nAttached patch shows some new tests that it fixes (i also included some other test additions related to the general concept of localparams in the sort param to ensure i didn't break them) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12916746",
            "date": "2010-10-01T00:38:22+0000",
            "content": "In dependent of my previous patch, there is one other nuance i discoverd today that i wanted to bring up...\n\nThe way localparams are currently supported in the sort param, they are independent for each \"segment\" of the sort.  The easiest way to make sense of this is to look at the following contrived example URL (you can try it against the example data on trunk) ...\n\n\n?q=*:*&fl=price,id&foo=0&sort={!foo=2}sum($foo,0)+asc,+mul($foo,price)+desc,+id+asc\n\n\n\n...that URL (currently) results in a sort which is equivalent to \"id asc\" .. the localParam value of \"foo=2\" at the begining of the sort param is only in scope for the first segment...\n\n\n{!foo=2}sum($foo,0) asc\n\n\n\n..the second segment of the sort param winds up getting the \"global\" value of \"foo=0\" ...\n\n\nmul($foo,price) desc\n\n\n\n...so it becomes a NOOP (multiplication by zero)\n\nThis limited scoping of localParams in the sort param seems counter intuitive to me.  I don't know that i have a better suggestion for how it should work, but i wanted to draw attention to it in case other folks had any ideas "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12928303",
            "date": "2010-11-04T18:47:46+0000",
            "content": "Last patch looks good (aside from the javadoc typos  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12966392",
            "date": "2010-12-03T02:04:40+0000",
            "content": "Hoss, you going to commit?  Please backport to 3.x, too, as all of the other stuff has been. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12970919",
            "date": "2010-12-13T17:47:44+0000",
            "content": "Sorry, finally circled back on my SOLR-1297.better.field.support.patch ...\n\ntrunk: Committed revision 1045253.\n3x: Committed revision 1045256. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12983919",
            "date": "2011-01-19T22:47:35+0000",
            "content": "Here's a patch for trunk that fixes the issue with function queries used as sorts not being weighted. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12983955",
            "date": "2011-01-20T00:40:44+0000",
            "content": "Committed to trunk and backported to 3x.\nI think that was the last thing holding this issue open. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013207",
            "date": "2011-03-30T15:45:52+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}