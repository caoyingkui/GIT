{
    "id": "LUCENE-3707",
    "title": "Add a Lucene3x private SegmentInfosFormat implemenation",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "core/codecs"
        ],
        "type": "Task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "we still don't have a Lucene3x & preflex version of segment infos format. we need this before we release 4.0",
    "attachments": {
        "LUCENE-3707.patch": "https://issues.apache.org/jira/secure/attachment/12511113/LUCENE-3707.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-01-19T10:07:00+0000",
            "content": "here is a patch ",
            "author": "Simon Willnauer",
            "id": "comment-13189037"
        },
        {
            "date": "2012-01-19T10:18:02+0000",
            "content": "Cool! I will send my +1 once I tested and reviewed.\n\nOne thing:\n\n+    assert format <= SegmentInfos.FORMAT_4_0;\n\n\n\nIn my opinion, this should be a hard IndexFormatTooOldException (which is correct for someone who removed 3.x codec from his classpath). It should not happen, but for everything that comes from \"untrusted\" files on disk we should hard check those things. Otherwise maybe someone has a very strange codec configuration that enforces the 4.0 codec to read old indexes and does serious harm  This also makes migration to Lucene 5.0 easier. We have the version check already available, only 3.x codec needs to be removed and we are done.\n\nThis check also costs nothing, so we should always ever use hard checks when we read values from files, to detect errors early (of course, if it's to heavy we can use asserts). ",
            "author": "Uwe Schindler",
            "id": "comment-13189040"
        },
        {
            "date": "2012-01-19T11:28:18+0000",
            "content": "agreed, I will upload  a new patch ",
            "author": "Simon Willnauer",
            "id": "comment-13189055"
        },
        {
            "date": "2012-01-19T12:09:55+0000",
            "content": "here is a new patch throwing IFTooOldExc as uwe suggested ",
            "author": "Simon Willnauer",
            "id": "comment-13189064"
        },
        {
            "date": "2012-01-19T12:26:28+0000",
            "content": "Hi Simon, looks fine! +1\n\nThe question is if the 3.x codec should throw IndexTooNew in the same way like 4.0 throws IndexTooOld? It's just a suggestion... ",
            "author": "Uwe Schindler",
            "id": "comment-13189070"
        },
        {
            "date": "2012-01-19T12:55:09+0000",
            "content": "This should not be IndexFormatTooOld. IndexFormatTooOld is wrong.\n\nthis segments file has been written with the name \"Lucene40\". Therefore, if the version byte is not what you expect,\nits CorruptIndexException, nothing else. ",
            "author": "Robert Muir",
            "id": "comment-13189082"
        },
        {
            "date": "2012-01-19T12:58:47+0000",
            "content": "actually, this should only be 'assert' here.\n\nwe don't even read the format byte, its part of the preamble (format+codecname) read by SI \nto determine the \"handoff\". So just make it an assert. its impossible for the current\nexception to ever happen. ",
            "author": "Robert Muir",
            "id": "comment-13189086"
        },
        {
            "date": "2012-01-19T13:26:09+0000",
            "content": "If this is the case, I am fine with that, no problem. I just wanted to be sure. In general I am very sceptical with asserts in code that reads from disk.\n\nOne example: If we have code that reads a vInt withe the number of items in a list, then we read this number of items, followed by another vInt that has the length of the next list. Just asserting that this length is >0 is a bad idea, because if the length vInt is < 0, the file format is corrupt. And in that case a CorruptIndexException should be thrown. If we dont do this, a corrupt file could lead to unexpected behaviour. I did exactly that e.g. in the code parsing the Kumoroji dictionary targetMap, if the pointers in both arrays don't fit together, the file format is also corrupt. The complaint here was only, that asserts in code reading from disk should in most cases be hard checks, you never know what the file contains or what the hex editor of the user did. ",
            "author": "Uwe Schindler",
            "id": "comment-13189100"
        },
        {
            "date": "2012-01-19T13:32:05+0000",
            "content": "\nIn general I am very sceptical with asserts in code that reads from disk.\n\nRight, but this format is not read from disk here. \n\nOnce 3.x indexes are no longer supported (5.x), we can actually remove SegmentInfos.format. \nIt doesn't need to be an instance variable at that point, in fact I think we perhaps should deprecate it already.\n\nIf codecs want to write version information into their own segments file format, they can do this themselves.\n\nBut currently this is read (and checked) by SegmentInfos, so that it knows which codec to invoke:\n\n\nfinal int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n\n ",
            "author": "Robert Muir",
            "id": "comment-13189102"
        },
        {
            "date": "2012-01-19T13:32:52+0000",
            "content": "I will use the first patch then. I had the same impression as robert that this should be an assert since it can not happen though. any objections beside that?\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13189104"
        },
        {
            "date": "2012-01-19T13:41:48+0000",
            "content": "No objections from myself! Sorry for the noise, I was just carefully reading the patch. ",
            "author": "Uwe Schindler",
            "id": "comment-13189107"
        },
        {
            "date": "2012-01-19T13:42:01+0000",
            "content": "The first patch looks good to me. We can open a new issue about this 'format' business.\n\nWe should deprecate any getter for this on SegmentInfos. We also need to fix CheckIndex to not try to 'interpret' this thing\nand print out information about it to the user, because that will only cause confusion.\n\nGiven that the only purpose of this format is to know if we can read the codec string, and the rest of the index\nis left up to the codec, its likely we might never change the format again!\n\nSo CheckIndex should be doing other things to print 'diagnostic' type stuff, not using this format byte. ",
            "author": "Robert Muir",
            "id": "comment-13189108"
        },
        {
            "date": "2012-01-19T13:47:56+0000",
            "content": "alright, I will commit this! robert can you open a followup for the stuff you where discussing? ",
            "author": "Simon Willnauer",
            "id": "comment-13189112"
        }
    ]
}