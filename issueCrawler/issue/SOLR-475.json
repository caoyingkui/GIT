{
    "id": "SOLR-475",
    "title": "multi-valued faceting via un-inverted field",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Facet multi-valued fields via a counting method (like the FieldCache method) on an un-inverted representation of the field.  For each doc, look at it's terms and increment a count for that term.",
    "attachments": {
        "facet_performance.html": "https://issues.apache.org/jira/secure/attachment/12394520/facet_performance.html",
        "UnInvertedField.java": "https://issues.apache.org/jira/secure/attachment/12375104/UnInvertedField.java",
        "SOLR-475.patch": "https://issues.apache.org/jira/secure/attachment/12394530/SOLR-475.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12567181",
            "date": "2008-02-08T20:01:43+0000",
            "content": "Prototype attached.\nThis is completely untested code, and is still missing the solr interface + caching.\nThe approach is described in the comments (cut-n-pasted here).\nAny thoughts or comments on the approach?\n\nI may not have time to immediately work on this (fix the bugs, add tests, hook up to solr, add caching of un-inverted field, etc), so additional contributions in this direction are welcome!\n\n\n/**\n * Final form of the un-inverted field:\n *   Each document points to a list of term numbers that are contained in that document.\n *\n *   Term numbers are in sorted order, and are encoded as variable-length deltas from the\n *   previous term number.  Real term numbers start at 2 since 0 and 1 are reserved.  A\n *   term number of 0 signals the end of the termNumber list.\n *\n *   There is a singe int[maxDoc()] which either contains a pointer into a byte[] for\n *   the termNumber lists, or directly contains the termNumber list if it fits in the 4\n *   bytes of an integer.  If the first byte in the integer is 1, the next 3 bytes\n *   are a pointer into a byte[] where the termNumber list starts.\n *\n *   There are actually 256 byte arrays, to compensate for the fact that the pointers\n *   into the byte arrays are only 3 bytes long.  The correct byte array for a document\n *   is a function of it's id.\n *\n *   To save space and speed up faceting, any term that matches enough documents will\n *   not be un-inverted... it will be skipped while building the un-inverted field structore,\n *   and will use a set intersection method during faceting.\n *\n *   To further save memory, the terms (the actual string values) are not all stored in\n *   memory, but a TermIndex is used to convert term numbers to term values only\n *   for the terms needed after faceting has completed.  Only every 128th term value\n *   is stored, along with it's corresponding term number, and this is used as an\n *   index to find the closest term and iterate until the desired number is hit (very\n *   much like Lucene's own internal term index).\n */\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12567191",
            "date": "2008-02-08T20:32:21+0000",
            "content": "fix single line oops "
        },
        {
            "author": "David Bowen",
            "id": "comment-12646719",
            "date": "2008-11-11T23:05:54+0000",
            "content": "We are seeing faceting on multi-valued fields as a significant performance problem, so we'd very much like to see something of this sort.\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12647326",
            "date": "2008-11-13T16:38:06+0000",
            "content": "Yonik,\nThis looks great! I'd like to contribute (unit test, etc.) to move forward.\nBefore I write unit tests, I have a couple of questions:\n\n\n\tTo initialize TermIndex.index, getEnumerator().close() have to be called, right? (but I cannot find close() call)\n\tCan UnInvertedField have searcher instead of reader and remove searcher argument from getCounts()?\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12650059",
            "date": "2008-11-23T22:11:30+0000",
            "content": "I've finished this implementation and am cleaning it up for contribution.\nIn the meantime, I'm attaching the results of some performance tests. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12650071",
            "date": "2008-11-23T23:02:25+0000",
            "content": "Some further results on a bigger index to show some practical limits.\nThis table (JIRA markup format) shows the performance and memory characteristics of facet requests on a 50M document index, for different fields and different numbers of documents being counted in the base query.\n\n\n\n\n\u00a0\nf10_100_t\nf100_10_t\nf1000_5_t\nf10000_5_t\nf100000_5_t\nf100000_10_t\n\n\nfield inversion time (sec)\n\t17.2\n\t17.9\n\t69.4\n\t87.8\n\t133.6\n\t388.0\n\n\ninverted field size (MB)\n\t68.1\n\t629.6\n\t416.9\n\t479.0\n\t589.9\n\t807.4\n\n\n1000 docs facet time (ms)\n\t7\n\t20\n\t13\t\n13\t\n16\t\n17\n\n\n10,000 docs\n\t55\n\t428\t\n22\n\t23\t\n29\n\t28\n\n\n100,000 docs\n\t54\t\n421\n\t35\t\n36\t\n46\t\n56\n\n\n1,000,000 docs\n\t55\n\t431\t\n149\t\n155\n\t249\t\n307\n\n\n10,000,000 docs\n\t54\n 434\n\t625\n\t625\t\n1183\n\t1620\n\n\n\n\n\nThe \"profile\" of the faceted field is encoded in it's name.  For example, the field f1000_5_t has 1000 unique values across the whole index and between 0 and 5 values per document.  It took 35 ms to facet on this field when the base query matched 100,000 documents.\n\n\nTest Hardware: Commodity PC\n Processor: AMD Athlon 64 X2 5000+ (2.6GHz dual core)\nHard Drive: Western Digital Caviar GP WD5000AACS 500GB 5400 to 7200 RPM SATA 3.0Gb/s\nMemory: 8GB DDR2 800 SDRAM (PC2 6400)\nOperating System: Linux - Ubuntu 8.04 desktop, 64 bit version (x86_64)\nJava VM: Sun Java6 (1.6.0_05) 64 bit hotspot (x86_64)\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12650099",
            "date": "2008-11-24T02:29:32+0000",
            "content": "How amazing! facet_performance.html shows great improvement on both memory and qps. Great job, Yonik! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12650109",
            "date": "2008-11-24T05:09:12+0000",
            "content": "Attaching patch with tests.\nThis is well tested, so I'll probably commit relatively soon. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12650453",
            "date": "2008-11-25T04:02:54+0000",
            "content": "Committed. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12654237",
            "date": "2008-12-07T20:13:22+0000",
            "content": "update:\n\n\tclosing of term enumerators (not strictly necessary in Lucene now, so shouldn't have caused any problems).\n\tnew fieldValueCache in SolrIndexSearcher\n\tuninverted field statistics (per field) available with cache statistics\n\n "
        }
    ]
}