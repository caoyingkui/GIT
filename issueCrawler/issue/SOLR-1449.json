{
    "id": "SOLR-1449",
    "title": "solrconfig.xml syntax to add classpath elements from outside of instanceDir",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "the idea has been discussed numerous times that it would be nice if there was a way to configure a core to load plugins from specific jars (or \"classes\" style directories) by path  w/o needing to copy them to the \"./lib\" dir in the instanceDir.\n\nThe current workaround is \"symlinks\" but that doesn't really help the situation of the Solr Release artifacts, where we wind up making numerous copies of jars to support multiple example directories (you can't have reliable symlinks in zip files)",
    "attachments": {
        "SOLR-1449.patch": "https://issues.apache.org/jira/secure/attachment/12420154/SOLR-1449.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12757787",
            "date": "2009-09-21T02:28:47+0000",
            "content": "Example of how this might work.  It provides support for \"regex\" based jar selectors in a specified directory (so we can point at jars w/o hardcoding version numbers all over the place) and leaves the door open to a simpler glob style syntax to be added later.\n\nsyntax...\n\n  <!-- all jars in a directory -->\n  <lib dir=\"../../dist/solr-cell-lib/\" />\n  <!-- any jar in the directory matching the regex -->\n  <lib dir=\"../../dist/\" regex=\"apache-solr-cell-(\\d|\\.)+-.*\\.jar\" />\n\n\n\nInternally the parsing code is confined to SolrConfig.xml, but a new method has been added to SolrResourceLoader that repalces the ClassLoader with a new one where the parent is fixed on the previous classloader \u2013 it seems a little sketchy, and i would have much rather had SOlrConfig use some new ClassLoaderUtils to build up a comprehensive ClassLoader and then provide it when constructing SolrResourceLoader \u2013 expect SolrConfig doesn't get to construct SOlrResourceLoader.\n\nThe patch modifies the build.xml file just enough to demonstrate using the solr-cell libs into the example w/o copying them, but i didn't systematicly fix all the other palces we could use this.\n\nI also didn't test the patch exhaustively.\n\nNote: I've marked this issue as Fix for 1.4 to try and give it some visibility before the release since there seems to be some interest in getting the release size smaller \u2013 but unless adequate eyeballs give it a thumbs up and help do some more rigerous testing i'm leary to try and inlcude it now.  (The term \"Classloader Hell\" exists for a reason \u2013 the upside is i'm 95% sure that even if there winds up being a bug in the nested classloaders, anyone using the existing method (ie: copies their libs) should still work, since that code path should be the same. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12758241",
            "date": "2009-09-22T13:23:24+0000",
            "content": "Note: I've marked this issue as Fix for 1.4 to try and give it some visibility before the release since there seems to be some interest in getting the release size smaller\n\nI haven't seen the patch yet. But I do not understand why we need to copy the jars in the released artifact. We can have some instructions or scripts (I assume we don't want ant) to copy the jars to the correct places for running solr-cell examples. Is there a problem with that? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12758274",
            "date": "2009-09-22T15:37:51+0000",
            "content": "We can have some instructions or scripts (I assume we don't want ant) to copy the jars to the correct places for running solr-cell examples. Is there a problem with that?\n\nFor the same reason we have an example at all I guess - a better out-of-the-box experience.\n\nIMO, Solr is an enterprise search server, not a bunch of jars you wire together yourself to create one.  It would be nice if we could do database import from the same example server... but I think JDBC driver issues (and the necessity to have a database to connect to?) make this tougher. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12758409",
            "date": "2009-09-22T20:15:41+0000",
            "content": "For the same reason we have an example at all I guess - a better out-of-the-box experience.\n\nI agree with that goal. It's just that having a regex based class loading from externally located jars, although cool, seems an overly fancy way to solve this particular problem.\n\nIt would be nice if we could do database import from the same example server... but I think JDBC driver issues (and the necessity to have a database to connect to?) make this tougher.\n\nThe database and the driver jar is checked in. The only issue I guess is that our example is a single-core one and the DIH examples have db, rss and mail each of which requires its own schema.\n\nThe main problem is the mail DIH example. It uses Tika for indexing email attachments and therefore copies all its dependencies. I'm not sure if that is necessary. We can have an option to disable that and document the attachment support in the wiki only. I'm guessing that very few users will actually need to look at that example.\n\nThe other thing that we can do is to offer separate source and binary+example downloads. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12758462",
            "date": "2009-09-22T22:16:34+0000",
            "content": "I feel like these comments aren't really on topic ... this type of feature has been discussed numerous times on the list as a desirable way for users to specify where a core should look to load plugins without needing to copy jars to a specific hardcoded directory \u2013 particularly when people want to use the same plugins in multiple cores (that have unique instanceDirs)\n\nIndependent of any question of what our releases look like, and what kinds of examples we want to include, these is still a feature that users have been requesting.\n\nMy point about our examples was merely that an additional use case that would be improved by this feature is that we would be able to have a single copy of any jar in the  release, no matter how many examples wanted to refer to it (which would also make it easier to add examples that would work \"as is\" without debating the potential increase n the size of the release, or wether we should ask the user to copy the jars, etc...\n\nIt's just that having a regex based class loading from externally located jars, although cool, seems an overly fancy way to solve this particular problem.\n\nAs i already said: that wasn't a particular goal, just a nice side effect \u2013 but FWIW: the regex based loading was actually the easiest way i found to identify multiple jars \u2013 i was looking for an easy way to do shell style fileglobbing in java and nothing jumped out at me, java.util.regex on the other hand is a stock and easy to use. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12758567",
            "date": "2009-09-23T03:42:54+0000",
            "content": "particularly when people want to use the same plugins in multiple cores (that have unique instanceDirs)\n\nThat is taken care of by the sharedLib attribute in solr.xml "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12758842",
            "date": "2009-09-23T19:20:17+0000",
            "content": "repalces the ClassLoader with a new one where the parent is fixed on the previous classloader\n\nI'm not a classloading expert... but couldn't this cause things to work differently by changing the order of the <lib> statements? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12759216",
            "date": "2009-09-24T19:06:56+0000",
            "content": "That is taken care of by the sharedLib attribute in solr.xml\n\nsharedLib only helps if you want the same plugins in every core (not just to reuse the same plugins in multiple cores.  There's also no way to reload a plugin from the sharedLib (whereas the normal lib for a core does get reloaded when the core is reloaded)\n\nI'm not a classloading expert... but couldn't this cause things to work differently by changing the order of the <lib> statements?\n\nExcellent point ... yes you have to declare things in a dependency order.  This didn't seem like a big deal to me when i first wrote it, but i can see how that could prove very tedious, it could make it impossible to use some sets of jars without having them in a specific set of directories.\n\nThe other option was to maintain a list of all the jars in parallel with the \"current\" classloader, and replace the classloader anytime new jars were added \u2013 this seemed like a bigger evil to me originally because it made the behavior really unpredictable if someone tried to use the class loader in the middle of adding more jars (because there would be classes that had been loaded by a classloader that was no longer in use) but frankly: i don't see how the behavior would really be any weirder then what would currently happen, and it would certainly be nice to make it less dependent on the order things were declared.\n\nI'll try to get another patch up today. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12759230",
            "date": "2009-09-24T19:57:35+0000",
            "content": "sharedLib only helps if you want the same plugins in every core (not just to reuse the same plugins in multiple cores. There's also no way to reload a plugin from the sharedLib (whereas the normal lib for a core does get reloaded when the core is reloaded)\n\nOK, that's true.\n\nAs i already said: that wasn't a particular goal, just a nice side effect - but FWIW: the regex based loading was actually the easiest way i found to identify multiple jar\n\nI understand you want to make a core's lib directory configurable. That is fine. It is the regex based loading that makes me nervous. Why not load all jars in a specified directory? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12759342",
            "date": "2009-09-25T00:39:25+0000",
            "content": "I understand you want to make a core's lib directory configurable. That is fine. It is the regex based loading that makes me nervous. Why not load all jars in a specified directory?\n\nThe way you worded that is part of what i'm trying to fix: \"a core's lib directroy\" ... i'm not trying to make the path of a single directory configurable, i'm trying to eliminate the idea that there is a single \"lib\" dir for a core \u2013 people should be able to load any jars they want, from anywhere they want.\n\nThe regex based selection already supported loading all files in a directory \u2013 that's the default behavior if no regex is selected \u2013 but in general there are two main reasons i can think of why we should have regex (or glob) support...\n\n1) so people don't have to load every jar in a directory just to get some of those jars.  \n\nslurping up every file in ./lib was fine when we were forcing people to manually create a directory inside the instance dir (if you don't want it loaded don't copy it), but if we're trying to be flexible and allow people to point at jars anywhere then we shouldn't hobble them by making them get everything in a directory.  it should be possible to have an assload of jars in a big directory and say i only want this subset for this core.\n\n2) so people don't have to hardcode jar version info.\n\npeople should have an easy way to say \"load the tika jar\" in their config, and it should still work even if they delete apache-tika-0.4.jar and repalce it with apache-tika-0.5.jar.  I don't want to make them hardcode names.\n\n\u2014\n\nI'm not sure why regex matching on filenames makes you \"nervous\" ...  my best guess is that you're worried regex mistakes silently not loading the files (since a regex was the only way to laod a single jar explicitly) so in this newest patch i've added support for a \"path\" options instead of dir+regex ... if an explicitly path is used and it can't be found it's logged as an error....\n\n\n  <!-- all files in dir -->\n  <lib dir=\"../../dist/solr-cell-lib/\" />\n  <!-- all files in dir matching the regex -->\n  <lib dir=\"../../dist/\" regex=\"apache-solr-cell-(\\d|\\.)+-.*\\.jar\" />\n  <!-- nothing matches, so will be ignored -->\n  <lib dir=\"/total/crap/dir/ignored\" /> \n  <!-- an exact path (jar or classes dir), will log error if not found -->\n  <lib path=\"../a-jar-that-does-not-exist.jar\" /> \n\n\n\nThis patch also makes the changes i described in my previous comment (removing the dependency on the order that the 'lib' dirs are declared) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12759409",
            "date": "2009-09-25T06:59:01+0000",
            "content": "I have a few questions in mind. \n\n\tIs this an issue which users have reported? in my experience with Solr mailing list, I am yet to see a request  where users wish to add arbitrary directories to classpath\n\tHow important is this feature to be in 1.4?\n\tUsers in general have a lot of problems with classloading. Even with the current support with one lib directory I have seen so many users having trouble with classloading . This can only add to that confusion\n\n\n\n I am not aware of any project which allows this level of configurability for classpath. Most of the users never have to write custom components for Solr. In our organization, I have encountered very few cases where they needed to add custom jars to classpath. Even in cases where they did , they were some trivial jars and it can be put into solr_home/lib anyway.\n\nI am -1 on adding this to 1.4.\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12759444",
            "date": "2009-09-25T09:01:22+0000",
            "content": "I haven't tried out Hoss' patch, but based on the write-up, I'm +1.\n\nHaving a configurable list of directories to load from will clean up our examples, reduce the size (or installation steps) of our example app.  It will allow various plugins to live in one place and be referred to without having to copy files all over the place.\n\nI think this is an important feature to get into 1.4. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12759457",
            "date": "2009-09-25T09:20:44+0000",
            "content": "Let us get the facts. We may be barking up the wrong tree.\n\nwe have a 116MB distribution out of which the solr.war + single+multicore example is around 4MB .  Most of the users need this 4MB only (99% of the users do not need clustering + solr cell ). If we implement this issue we may cut down the size of the distro by around 20 MB (by eliminating duplication of tika jars).  What we should have is a lighter version (solr.war + example solr home . <4MB and a full version. \n\nI am sure most of the users will be happy with the minimal solr. The rest of them will happily download the whole thing however big it is.\n\nThis is not to say that we don't need to reduce the size of the distro. But adding complexity just for this is not really required. Just adding a .sh and .bat file to the tika example we can add jars from external path. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12759966",
            "date": "2009-09-26T23:39:51+0000",
            "content": "Added tests for all the permutations of the solrconfig.xml syntax.\n\nAlso fixed a missing dependency in the build.xml that i didn't notice before because i hadn't tried \"ant clean test\" (previously test depending on a special target for copying the solr cell libs so the SolrExample*Tests would find them, now it just depends on dist-contrib to ensure all the contrib jars/dependencies are in the expected place) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12759969",
            "date": "2009-09-27T00:33:05+0000",
            "content": "Is this an issue which users have reported? in my experience with Solr mailing list, I am yet to see a request where users wish to add arbitrary directories to classpath\n\nI don't really feel like searching through the archives at the moment, but it has come up \u2013 i don't know if anyone has explicitly requested the ability to add arbitrary directories, but there have certainly been discussions about the annoyance of needing to copy and/or symlink jars.\n\nIf nothing else: I'm a user, and i'm requesting it.\n\nHow important is this feature to be in 1.4?\n\nAs i said in my first comment i don't know.\n\nIt would be nice to have, but i certainly don't think it's a blocker ... even with the testing i've done, and even with the new tests i added to the patch, and even though the behavior for existing ./lib users hasn't been changed, i still wouldn't consider committing unless other people try it out and gave it a thumbs up.\n\nUsers in general have a lot of problems with classloading. Even with the current support with one lib directory I have seen so many users having trouble with classloading . This can only add to that confusion\n\nI don't really see how this will make confusion about classloading any worse.  most problems i can think of where people have classloader difficulty in solr stem from not understanding where they are suppose to copy their jars \u2013 they tend to get confused about which \"lib\" directory, particularly with example/lib containing the jetty jars.  Allowing people to put the jar any where they want and point at it by name in the config file should reduce confusion.\n\nBesides which: they're still free to create a ./lib dir and copy jars \u2013 that still works, no configuration needed.\n\nI agree that the original patch (with the order in the config mattering) would have been confusing for people, but with the more recent patches where all jars are in the same classloader i can't imagine any situation where this will cause more problems/confusion then forcing people to make a lib dir.\n\nI am sure most of the users will be happy with the minimal solr. The rest of them will happily download the whole thing however big it is.\n\nI REALLY don't want to argue the merrits of this issue as if it's purpose was to decrease the size of the distribution \u2013 it was not the purpose, it's just a possible additional benefit \u2013 but i HAVE to disagree with you on this ... most users may only need a minimal solr, but we should not passively discourage people from finding features that can make them happier by making those features more complex to get (via an alternate larger download).\n\nAdding this feature, and using it to reduce the size of the current examples may not reduce the size of the current distribution enough to be worth worrying about, that's fine.  But i'm trying to thing longer term: there have been multiple threads discussing the goal of adding many more example directories demonstrating cool use cases of solr via interesting permutations of features (DIH, clustering, solr cell, velocity, etc...). This patch (or something like it) is going to be necessary before we can do anything like that. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12759971",
            "date": "2009-09-27T00:44:37+0000",
            "content": "+1. I don't find the pluses overwhelming, but I find pluses. On the other hand, after reading all the comments, I don't see a single good reason against.\n\nIts a no brainer to me. I think I might have some time to play with it tomorrow. Will report back if I do. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12760105",
            "date": "2009-09-27T21:29:38+0000",
            "content": "checkpoint patch, new additions...\n\n1. updated TestConfig to also assert that the existing automatic lib dir support works (i don't see any evidence that we already had a test for this)\n2. replaced the TODO's in the example solrconfig.xml with documentation explaining hte new <lib> directives.\n3. updated the README in the example solr home so that the note about ./lib also mentions the <lib> config option\n4. updated the build.xml and example/solrconfig.xml for the clusturing contrib so that they don't copy just for the example\n5. fixed a small bug in the clustering example schema (that example reuses the main example docs, but wasn't ignoring unexpected fields which have since been added to those docs on the trunk since the clustering example was added) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12760107",
            "date": "2009-09-27T21:45:51+0000",
            "content": "<lib dir=\"../../dist/\"\n\nAs you say, layout is a separate issue from the ability to add multiple lib entries - but should we reference the libs in contrib (where they are actually checked in) rather than dist?  \"ant example\" doesn't currently copy anything to dist... and avoiding another copy of those libraries would be nice too. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12760120",
            "date": "2009-09-27T22:36:19+0000",
            "content": "minor update to the previous patch...\n\n1) the patch command didn't like the empty files, so now they have a single newline in them.\n2) because of a typo, javadoc-all on the trunk is getting lucking and finding the download clustering jars only if they've already been copied to the example/lib ... since the patch stops the copying to example/lib i fixed the topy so it finds them in lib/downloads "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12760124",
            "date": "2009-09-27T22:59:01+0000",
            "content": "should we reference the libs in contrib (where they are actually checked in) rather than dist? \"ant example\" doesn't currently copy anything to dist... and avoiding another copy of those libraries would be nice too.\n\nFYI: We already copy them to ./dist/ as part of dist-contrib, and \"ant example\" already depends on dist-contrib so nothing changed there.\n\nUltimately it's a question of how we want to solve SOLR-1433 ... this patch assumes we keep including the full ./dist structure that we have now for all the jars in our artifacts 9and SOLR-1433 could be solved w/o changing that by exclusing the source locations of those libs), but if the solution to SOLR-1433 is to not copy libs to ./dist at all then it's trivial to change the <lib> refs in the solrconfig.xml files to point at the original locations. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12760679",
            "date": "2009-09-29T19:42:04+0000",
            "content": "Quick updated to match trunk (based on the decisions made in SOLR-1433)\n\nI just noticed that there are some jars copied into example-DIH - i remember looking at this before and seeing that the hsqldb jar was actaully committed into that directory because it's only needed to run the exampl, not to compile, but someone i missed noticing that there are two other jars that are copied at build time ... so we could probably replace those with lib references too. (i'll try to post another update later today) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12760813",
            "date": "2009-09-30T02:04:19+0000",
            "content": "updated to deal with example-DIH as well \n\n(i verified that SolrResourceLoader logs that it found all of the jars, but i didn't actually test the IMAP importing \u2013 i don't have an IMAP account to try it on)\n\nAlso made a minor addition to the comments in example/solr/conf/solrconfig.xml to make it clear that the entire filename must match the regex (per the semantics of Macther.matches()) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12760850",
            "date": "2009-09-30T06:52:57+0000",
            "content": "I'm back from vacation and I realize that we have gone a long way in this issue.\n\nThere is an issue SOLR-919 which enables re-use of SolrConfig object. To make it work we will have to make SolrConfig agnostic of SolrCore. So, the best solution is to make SolrCore add  the  jars to SolrResourceLoader. So SolrConfig can just return a data structure and SolrCore can decide how to add the jars to the path "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12761265",
            "date": "2009-10-01T16:41:31+0000",
            "content": "Noble: if you have any specific suggested improvements for the patch that you think will make eventual work on SOLR-919 easier, then i'm all ears \u2013 but i'd rather not try to code something in anticipation of a future feature that doesn't even have a stub patch or fleshed out design yet.\n\nEven if we don't make any of the changes suggested in this issue, some very complicated questions are going to have to be answered in SOLR-919 \u2013 like: should two cores sharing a SolrConfig object and an instanceDir (but with different data dir propertes) share the same resourceloader/classloader, or should they have unique classloaders containing different copies of the same jars from ./lib.   Those types of questions aren't things we should be attempting to answer in this issue \u2013 but they will ultimately need to be addressed in SOLR-919, and they will need to be addressed regardless of what we decide to do here.\n\nThis patch doesn't change any of the internal public APIs, it just adds support for some new syntax in the config file, so if SolrConfig.initLibs needs to be refactored later to support SOLR-919 that will be totally fine. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12761272",
            "date": "2009-10-01T17:16:05+0000",
            "content": "the idea is to have separate resourceloaders for each core (they are lightweight) but comomn schema/config objects. SOLR-1293 includes the changes required for this. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12761314",
            "date": "2009-10-01T19:48:47+0000",
            "content": "As i said: these aren't questions that we should be attempting to answer here - they are about the impacts of potential future features.\n\nThis patch works against the trunk today ... SolrConfig currently maintains a reference to a SolrResourceLoader which it may have instantiated itself in it's constructor, or it may have received it as a constructor argument \u2013 either way this patch ensures that that SolrResourceLoader gets a consistent classloader based on the Configs that are parsed without needing to make any \"initLibs\" or \"getLibs\" style functions public or changing the contract of initializing SolrConfig/SolrResourceLoader.  Even if someone is doing funky old school embedded Solr code where they construct their own SolrConfig objects the <lib> config options will still work.\n\nIf SOLR-919 or SOLR-1293 require refactoring things so that a SolrConfig instance can be reused with different classloaders that's going to require eliminating some public constructors and Refactoring the contract of when/how a SolrResourceLoader is initialized \u2013 when we do that we can worry about refactoring the code in this patch. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12761488",
            "date": "2009-10-02T06:44:23+0000",
            "content": "Hoss, Noble has been refactoring SolrConfig in SOLR-1198 with the end goal being pluggable loading of SolrConfig. This makes SOLR-919 and SOLR-1293 easier. But it is also about how we want SolrPlugins to be loaded. Ideally they'd keep configuration in SolrConfig but the actual loading will happen in SolrCore or somewhere else outside.\n\nA large part of work for SOLR-1198 has been done in 1.4. This patch also marked for 1.4 goes against that example by modifying the resource loader. So we need to ask now what is the function of SolrConfig? Do we want it to load/modify SolrResourceLoader objects or just be a representation of configuration? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12761925",
            "date": "2009-10-03T17:41:52+0000",
            "content": "Noble has been refactoring SolrConfig in SOLR-1198 with the end goal being pluggable loading of SolrConfig\n\nI understand Noble's goal(s) .. i'm actually really stoked to be moving in that direction and look forward to people being able to provide/reuse their own SolrConfig implementations which may not use XML at all...\n\nSo we need to ask now what is the function of SolrConfig? Do we want it to load/modify SolrResourceLoader objects or just be a representation of configuration?\n\nI disagree that we need to ask that question \"now\", in this issue ... that is an important question for other issues (which you and Noble have already referenced).  Those issues are going to face tough decisions about how to deal with the existing contracts of Solr config like all the methods it inherits from Config (including getResourceLoader(), and openResource()) or the fact that all of it's public constructors are expected to initialize a new SolrResourceLoader.\n\nWhen the time comes to make those tough decisions, we will have to make non-back-compat changes to the contracts of SolrConfig and SolrResourceLoader, and document a 'new' contract for how to properly initialize them.  THAT is the appropriate time (in my opinion) to worry about how we should refactoring all the SolrResourceLoader initialization code \u2013 but today, on the trunk, SolrConfig is still responsible for initializing SolrResourceLoader in many cases.  The patch as i wrote it ensures that no matter how a SolrResourceLoader is instantiated, or who instantiates it, if a SolrConfig instance is told to use it, then it gets a class loader based on the options in that SolrConfig.\n\nThis is the simplest possible patch I could think of to make the change desired.  I deliberately avoided making any public API changes to SolrCOnfig or SolrResourceLoader because i didn't want to commit to who/how the ClassLoader would get those changes \u2013 so in the future (when we have to make/advertise big API changes to SolrConfig to eliminate direct references to SOlrResourceLoader anyway) it will be easy to refactor it (the logic in initLibs) to someplace else and document exactly how the SolrResourceLoader should be initialized cleanly.\n\nAt this point, i personally have no interest in trying to \"guess\" what the right decisions will be down the road, nor am i interested in writing a more complicated patch that would commit us to that guess with modifications SolrConfig's public API. As i said in a previous comment...\n\nif you have any specific suggested improvements for the patch that you think will make eventual work on SOLR-919 easier, then i'm all ears\n\n...but to be more explicit: attach an alternate patch, and i'll review it.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12762071",
            "date": "2009-10-05T02:27:03+0000",
            "content": "I haven't had a chance to do any testing yet, but just took some time reviewing the patch.\n\n1. Should the change in clustering/example/conf/schema.xml be part of this patch?\n\nHere is a no credit update to the patch that fixes a few small things:\n\n2. example README formatting\n3. Fix spelling in SolrResourceLoader.addToClassLaoder method\n4. Fix liib spelling in build.xml\n\nA couple thoughts:\n\n5. Did you consider just extending URLClassLoader and opening up addUrl rather than replacing the loader? Almost seems nicer - no biggie though.\n6. What about solr.xml's sharedlib setting? Should it support the same syntax options as the solrconfig lib setting ?\n\nHopefully I can do some testing too. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12762072",
            "date": "2009-10-05T02:34:06+0000",
            "content": "RE: 5\n\nhmm .. I guess you'd prob have to add some synchronization that wouldn't be worth it - forget that. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12762073",
            "date": "2009-10-05T02:37:49+0000",
            "content": "1. Should the change in clustering/example/conf/schema.xml be part of this patch?\n\n...probably not, i totally forgot i had to make that fix to get the example working.  i'll try to commit that seperately tonight.\n\n5. Did you consider just extending URLClassLoader and opening up addUrl rather than replacing the loader? Almost seems nicer - no biggie though.\n\nI went down the road, but i ran into a problem \u2013 i don't remember the specifics, i was probably doing something stupid, but in trying to figure it out i noticed the caveat about using addURL...\n\n\n   \"The classes that are loaded are by default granted permission only \n    to access the URLs specified when the URLClassLoader was created.\n\n\n\n...and figured it was safer just to go this way and document that you should only modify the classloader prior to using the ResourceLoader.\n\n6. What about solr.xml's sharedlib setting? Should it support the same syntax options as the\nsolrconfig lib setting ?\n\nwe can always add the syntax to solr.xml as well \u2013 but that gets more challanging because of the persistence options, so i punted on it for now. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762118",
            "date": "2009-10-05T08:55:44+0000",
            "content": "Mark the latest patch does not seem to compile. \nAnyway I propose a simple suggestion\n\nadd a new method to SolrConfig\n\n\npublic List<String> getPaths()\n\n\n\nin the SolrResourceLoader we may just need an extra method addPath(String path)\n\ni guess this should be good enough\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12762165",
            "date": "2009-10-05T12:45:06+0000",
            "content": "Mark the latest patch does not seem to compile. \n\nRight - my fault - since my changes are just cosmetic (and the delete liib doesn't really break anything), I didn't test.\n\nSolrConfig.java still has this method misspelling:       getResourceLoader().addToClassLaoder(path);\n\nWorks after that - I won't attach a new patch though - its just cosmetic fixes. Use Hoss' - he can easily integrate those 3 changes (2 misspellings and some space formatting). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12762704",
            "date": "2009-10-06T17:49:06+0000",
            "content": "updated to trunk (schema.xml change already committed) plus the fixes miller pointed out "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12762723",
            "date": "2009-10-06T18:20:52+0000",
            "content": "add a new method to SolrConfig ... public List<String> getPaths() .. in the SolrResourceLoader we may just need an extra method addPath(String path)\n\nI feel like we keep going around in circles on this, i don't know how to express myself any better...\n\n1) there should never be a public addPath(String) method on SOlrResourceLoader ... the ClassLoader should be initialized completely before the SolrResourceLoader is used, or really wacky inconsistent classloader behavior can result.\n\n2) ideally SolrResourceLoader should require that all URLs for the ClassLoader be specified in it's constructor, so we can keep the ClassLoader final \u2013 but given the existing COnstructors for SOlrCOnfig that's impossible (sometimes the SolrConfig constructs the SolrResourceLoader, other times the caller constructs the SolrResourceLoader, and then passes it as an argument to the SolrConfig constructor) so in this patch i focused on keeping the changes as minimal as possible, and not altering the public API.\n\n3) Because of these multiple ways the SolrResourceLoader can be initialized, the SolrCOnfig constructor is in the best position to ensure that the ClassLoader URLs are added as early as possible.  \n\n4) We could add a \"getPaths() method to SolrConfig \u2013 but for back-compatibility we would still need to set those paths on the SolrResourceLoader in the SolrConfig constructor for embedded SOlr users people who might be initializing things in a different order then we do in CoreContainer.\n\n5) someday, in order to achieve all of the various SolrConfig simplification/reuse goals that have been discussed, we are going to need to make non-back-compat changes to eliminate all references to SolrResourceLoader from SolrConfig \u2013 including eliminating all of the current public constructors from SolrConfig (because they construct a SolrResourceLoader) and then, since everyone will have to change how the instantiate SolrCOnfig objects anyway, it will be easy to change the semantics of initializing a SOlrConfig+SolrCore+SolrResourceLoader so that they make more sense...\n\n\n   SolrCofig config = new SolrConfig(...)\n   SolrResourceLoader loader = new SolrResourceLoader(cofig.getLibPaths(), ...)\n   ...\n   SolrCore = new SolrCore(config, loader, ...)\n\n\n\n...and when we reach that point it will be trivial to refactor the code added by this patch so that it works that way, because at this point it is all nicely self contained in package protected methods.\n\n...\n\nAll of this reasoning is why i keep saying: it's a waste of time to worry about how this code will impact reusable SolrCOnfig options in the future  since it's all non-public and can be refactored at any time.\n\nIf someone wants to take my patch and refactor it now then be my guest ... but unless you plan on massively increasing the scope to completely sever the direct connection between SolrCOnfig and SOlrResourceLoader i can't imagine how adding SolrCOnfig.getPaths() and making someone besides SOlrConfig responsible for passing those paths to SolrResourceLoader wlll result in a patch that would be any cleaner or easier to maintain moving forward. ... but i'll be happy to get proven wrong.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762855",
            "date": "2009-10-07T03:50:49+0000",
            "content": "Actually I was planning to commit SOLR-919 in 1.4 itself. My current plan is to make the changes as soon as t 1.4 is released. So the refactoring is going to happen 'now' . \n\nLet me take a look at the patch and see how we can make this 'future proof' "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12763006",
            "date": "2009-10-07T11:20:48+0000",
            "content": "a simpler patch. SolrConfig is agnostic of SolrResourceLoader "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12763767",
            "date": "2009-10-09T00:41:34+0000",
            "content": "My current plan is to make the changes as soon as t 1.4 is released. So the refactoring is going to happen 'now' .\n\n\n\"now\" is pre 1.4 ... whatever changes we anticipate making after 1.4 are \"later\" that was a big part of my point: we can easily refactor all of this after 1.4 is released, we can even do it an hour after 1.4 is released, but i was trying to minimize the number of changes needed to make this work prior to 1.4.\n\na simpler patch. SolrConfig is agnostic of SolrResourceLoader\n\nHow can you even remotely attempt to make that claim? Nothing in your patch does anything to make SolrConfig agnostic of SolrResourceLoader \u2013 SolrConfig still constructs, maintains a refrence to, and provides the a public getter for the SolrResourceLoader.\n\nTo summarize the main differnces i can see between your patch and mine:\n\n\tyou move the FileFiltering out of SolrResourceLoader - i have no opinion about that, as i said it would be easy to refactor, i don't really care where that logic is\n\tyou've add a protected getPaths method to SolrConfig which exposes a NamedList of FileFilter objects \u2013 this feels very hackish to me, not just because the method name is very vague, and not just because it uses NamedList in an odd way, but because it changes made to the contents of the directory at runtime would be returned by anyone attempting to use these FileFilters later, but that won't accurately express the state of the paths when the SolrResourceLoader (that SolrConfig still has a refrence to) was initialized.  Since it's not certain if this is really what should hapen if/when people re-use a SolrConfig, this may have to change anyway, and illustrates why i felt like it was better not to try and get ahead of ourselves now.\n\tYou've moved the responsibility of modifying the classpath (and completeling the initialization of SolrResourceLoader) to SolrCore...\n\n\n\n...this last change  demonstrates the exact bug i explained i was trying to avoid:  An embedded Solr user who constructs their own SolrConfig object will then have an incomplete SolrResourceLoader (with a Classpath that hasn't been fully intialized yet) which they might use prior to passing that SolrConfig object to hte constructor of SolrCore.\n\nThis may be an esoteric example, and not likely to cause problems for anyone in practice \u2013 but why risk introducing a bug at all when it's EASIER to make it work for everyone by letting SolrConfig be responsible for initializing it?\n\nNothing in your patch is going to save work down the road when it comes time to actually decouple SolrConfig from SolrResourceLoader ... all you've done here is make it harder to use SolrConifg today.  At somepoint, to reuse SolrConfigs, we're going to need to break the existing public SolrConfig constructors, and force legacy embedded Solr users to change the way they construct their SolrCore + SolrConfig + SolrResourceLoader, so why not wait until then to worry about this bullshit so we can fix SolrResourceLoader initialization the right way by making people construct a SolrConfig before constructing a SolrResourceLoader and passing the jar paths in to the SolrResourceLoader constructor?!\n\n\n\nHonestly though, it's a waste of time to keep arguing about any of this now, because it's really just a moot fucking issue at this point.\n\n\nI posted this patch almost 3 weeks ago, hoping I could get at least one other person to test it within a few days, so I could commit it and we could smoke test it on the trunk for at least a week or two before starting the release process for 1.4.  But at this point only Noble and Miller have acknowledged reading the patch \u2013 miller hasn't acknowledged running/testing it, and noble and I can't agree on how it should be implemented.  Grant's goal (last I heard) was to start the release early next week, and even if we all magically agreed on what the best patch looked like, and one or two people stepped up and said they tested it, I still wouldn't feel comfortable commiting a change to existing functionality like this so close to the release date.\n\nI think we need to postpone this to 1.5.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12763769",
            "date": "2009-10-09T00:43:07+0000",
            "content": "Moving to 1.5 due to lack of both testing and consensus on approach. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764344",
            "date": "2009-10-10T13:08:55+0000",
            "content": "I'm not quite giving up on this yet... Grant said he'd cut an RC on monday (that's an informal RC I believe... not the one we would VOTE on)... we'd still have another week before the VOTE to find problems.  Add 3 days and you get Oct 22nd.\n\nI'd still like to get this in 1.4 if possible since it can reduce our download from 90M to 60M.  It would also help avoid possible accusations of \"bloat\".\n\nI didn't previously thoroughly review this because Hoss & Mark were both on it... and now Noble too.\nBut now I'm going to start re-reading this issue to see if we are truly at an impasse. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764361",
            "date": "2009-10-10T18:02:03+0000",
            "content": "OK, at this point, I've only been investigating how SOLR-919 relates to this issue:\n\n\n\tThere are enough issues that it doesn't look like SOLR-919 would be a quick commit after 1.4 is released\n  1. SolrConfig is currently a mix of mutable / immutable - for example CacheConfig contains cumulative stats (in addition to the resource loader of course)\n  2. It's not clear to me that you want different resource loaders for each shared SolrConfig - people would definitely want to avoid loading more than \none copy of dictionary based stemmers such as kstemmer or smart_cn.  They also may want true singleton classes, which means a single class loader for their class.  Also, if one shares IndexSchema objects, etc, but doesn't share the resource loader, isn't it weird that for a core, some of the objects will not be from it's ResourceLoader?  Starts smelling like \"classloader hell\" to me...\n  3. There is a lot of middle ground between using the exact same SolrConfig objects and reparsing XML.  For example, clone type functionallity could be used to either create a new config from an existing one, or wrap a common core.  Immutable stuff could be shallowly copied, while mutable stuff could have their own per-core instance.\n\tIt doesn't seem like adding <lib> entries to solrconfig.xml will cause future problems for SOLR-919 above and beyond what already exist\n\tIt seems logical that configuration should be able to affect where/how libraries are loaded.\n\n\n\nNoble, if you agree with the last two points, do you have further objections to the last patch that Hoss put up?\nDoes anyone else have objections to committing this if it's properly reviewed by more people?\n\nIf no objections, I'll move on to actually reviewing and testing this patch with the goal of committing it Monday morning.  In fact I'll start soon regardless because of the limited time and the async nature of our communication. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764484",
            "date": "2009-10-11T16:51:30+0000",
            "content": "Updated patch to trunk. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764545",
            "date": "2009-10-12T04:47:33+0000",
            "content": "I've been testing this, including multi-core setups that continuously reolad the cores to check for memory/classloader leaks.  Everything looks good.\nUnless there are objections, I'll commit this monday morning, in time for the first release candidate. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12764546",
            "date": "2009-10-12T04:48:43+0000",
            "content": "It doesn't seem like adding <lib> entries to solrconfig.xml will cause future problems for SOLR-919 above and beyond what already exist\n\nI agree with the configuration . Though the regex seems to be an overkill .I am yet to see why it would be useful. Moreover , it leaves ambiguity as to what are the jars which got loaded .\n\nIt seems logical that configuration should be able to affect where/how libraries are loaded.\n\nyes configuration should have a say of the libraries. But the configuration should be a data structure. I see it as a source of information to the system. This will enable users plugin there own SolrConfigs implementations (loaded from external data sources zookeeper etc ).\n\nIt's not clear to me that you want different resource loaders for each shared SolrConfig - people would definitely want to avoid loading more than one copy of dictionary based stemmers such as kstemmer or smart_cn. \n\nSolrResourceLoader is a lightweight component.  There is no need to couple it with the fact whether  SolrConfig is shared or not. \n\nMy patch is slightly awkward, But that was introduced because of the regex option. Otherwise it would have been simpler. But ,overall , my  patch introduced fewer changes .\n\nSolrConfig is currently a mix of mutable / immutable - for example CacheConfig contains cumulative stats (in addition to the resource loader of course)\n\nSolrConfig holds a reference to the SolrResourceLoader, but it never uses it anywhere internally. The CacheConfig is an anomaly. But that can be rectified . \n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12764547",
            "date": "2009-10-12T04:51:58+0000",
            "content": "Anyway , I do not wish to delay the  1.4 release by wringing my hand on the specifics of the implementation "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764688",
            "date": "2009-10-12T14:07:17+0000",
            "content": "Though the regex seems to be an overkill\n\nSure... but regex is built into Java and globbing is not.  Comments in the code say we should implement globbing in the future.\nAnd since the regex is specified via the \"regex\" attribute (as opposed to the value of an XML element) it's perfectly extensible in the future.\n\nthe configuration should be a data structure. I see it as a source of information to the system.\n\nConfiguration can also have behavior.  The important part is that is the separation from XML and allowing others to create configuration objects.\n\nSolrResourceLoader is a lightweight component. There is no need to couple it with the fact whether SolrConfig is shared or not. \n\nJust bringing up that it's not lightweight if has a separate classloader that loads heavyweight things, and separate classloaders don't sound like they will work well with cached Schemas... seems like they at least need a common classloader parent for anything loaded by the schema.\n\nBut ,overall , my patch introduced fewer changes .\n\nThat's not true though... Hoss pointed out the risk for embedded users.  And it seems like you were bit by this yourself - see CoreContainer.create()... the Schema is created before the SolrCore is, and thus would not have been using the right classloader.\n\nSolrConfig holds a reference to the SolrResourceLoader, but it never uses it anywhere internally.\n\nSee above - the schema uses the loader from SolrConfig. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764700",
            "date": "2009-10-12T14:45:39+0000",
            "content": "I've committed this since it  does not change any public APIs, but only adds the <lib> elements to solrconfig.xml, and does not preclude changing to the approach that Noble took in the future. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775885",
            "date": "2009-11-10T15:52:15+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}