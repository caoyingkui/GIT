{
    "id": "LUCENE-2469",
    "title": "inconsistency in SolrParams.get()",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The returned value from solrParams.get( key ) depends on the implementing class such that:\n\n\nmodifiableParams = new ModifiableSolrParams( req.getParams() );\nassert modifiableParams.get(\"key\").equals( req.getParams().get(\"key\") );\n\n\nfails for requests built from a SimpleRequestParser or StandardRequestParser where the parameter \"key\" was given, but empty ( e.g. localhost:8393/select/?key=&para1=val1&parm2=val2 ). \n\nThe reason is that oas.request.ServletSolrParams returns null for values with length() == 0,\nbut all other SolrParams implementations return the empty String.\n\nThis behaviour has also side effects on search components:\nMost, if not all, standard search components check for something like\n\nif (reg.getParams().getBool(myTriggerParameter, false) ) \n{\n\n   ...do what I am supposed to do...\n\n}\n\nIn case of ServletSolrParams getBool() returns the desired and expected \"false\", all other Implementations throw a \"bad request\" Exception. \nOne may argue that suppling a parameter with an empty value indeed is a malformed request, ... \n\nNonetheless I think, the above mentioned equality check should hold true for any request and any SolrParams. \n\nBecause I cannot oversee the implications, I currently don't have a better suggestion to achieve this, than\nto make ServleSolrParams also return the empty String, which is in my opinion counter-intuitive and does not the right thing for the getBool(), getInt() etc. cases.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-05-19T14:46:15+0000",
            "content": "Chris Hostetter already comment on the mailing list:\n\n: this test fails for requests built from a SimpleRequestParser or\n: StandardRequestParser where the parameter \"key\" was given, but empty ( e.g.\n: localhost:8393/select/?key=&para1=val1&parm2=val2 ).\n: \n: The reason is that oas.request.ServletSolrParams returns null for values with\n: length() == 0,\n: but all other SolrParams implementations return the empty String.\n\nHmmm, can you please open a bug for this?\n\n: In case of ServletSolrParams getBool() returns the desired and expected\n: \"false\",\n: all other Implementations throw a \"bad request\" Exception.\n: One may argue that suppling a parameter with an empty value indeed is a\n: malformed request,\n\nthat would be my off the cuff opinion \u2013 It seems like ServletSolrParams \nis the one with the bug since it isn't correctly retunring the empty \nstring that was specified by the user (in the case of booleans this may be \nhandy, but for other params the ineability to specify an empty string to \noverride the default value could be problematic (ie: if you want \nhighlighter fragments but you want blank pre/post markup)\n\n: Because I cannot oversee the implications, I currently don't have a better\n: suggestion to achieve this, than\n: to make ServleSolrParams also return the empty String, which is in my opinion\n: counter-intuitive and does not the right thing for the getBool(), getInt()\n\nthere may be ways to address these in particular: treating the empty \nstring as equivilent to null in the type specific parsing code, but i also \nhaven't through it through all the way.\n\n\n-Hoss\n ",
            "author": "Frank Wesemann",
            "id": "comment-12869152"
        },
        {
            "date": "2010-06-11T12:31:31+0000",
            "content": "This should be in the Solr JIRA, not Lucene ",
            "author": "Mark Miller",
            "id": "comment-12877806"
        }
    ]
}