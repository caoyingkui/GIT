{
    "id": "LUCENE-7957",
    "title": "ConjunctionScorer.getChildren does not return all children",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/search"
        ],
        "fix_versions": [
            "7.0.1",
            "master (8.0)"
        ]
    },
    "description": "Today it returns all scoring children and misses the `FILTER` clauses; I think we just need to save the incoming `required` parameter to the ctor and iterate over those in `getChildren` since `scorers` is a subset of `required`?",
    "attachments": {
        "LUCENE-7957.patch": "https://issues.apache.org/jira/secure/attachment/12885687/LUCENE-7957.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16153584",
            "date": "2017-09-05T12:48:16+0000",
            "content": "I'm curious how you found this bug? Asking because I've wanted to remove this method for a very long time so I'm wondering what your use-case is? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16153732",
            "date": "2017-09-05T14:28:25+0000",
            "content": "Thanks Adrien Grand; I think I hope we don't remove this API.\n\nI'm running BooleanQuery that (roughly) looks for text matches from three possible places: 1) user-visible text fields (e.g. title), 2) a hidden keywords field and 3) in another hidden field recording what past queries led to user actions on this item.\n\nI use a complex expression for scoring these hits, and one of the inputs to that expression was \"did this hit match only due to #2?\" or \"only due to #3?\", i.e. it wants to see which sub-clauses lead to this document being a hit, and score differently.\n\nI realize I could also run 3 separate queries, and save away arrays to remember which clause contributed to which hits, but I suspect that's less efficient / more RAM consuming. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16153853",
            "date": "2017-09-05T15:38:28+0000",
            "content": "Thanks for the details.\n\nI think I hope we don't remove this API.\n\nI see how it could be useful, like in your case. But at the same time I see multiple issues with this API:\n\n\tWith some scorers, being able to track the matching sub scorers would be additional overhead, eg. BooleanScorer today can't tell you which clauses matched a given document.\n\tHow do you check \"did clause X or Y match?\", you have to iterate over all scorers and see whether the one you are interested in is there?\n\tIs it ok to perform heavy rewrites that make the scorer tree look very different from the query tree, or even make the clause you are interested in impossible to find? eg. by inlining nested disjunctions/conjunctions, rewriting a TermInSetQuery to a BooleanQuery, splitting a bbox query that crosses the dateline into 2 non-crossing bbox queries, rewriting a TermQuery to a MatchAllDocsQuery because scores are not needed and docFreq == maxDoc, etc.\n\n\n\nI tried to think about how to address these issues but I don't have a good solution, especially about the last point: I think it would be a pity that an improvement to query execution be seen as a regression because it makes it harder to identify a matching clause.\n\nI'd rather like this use-case to be addressed by consuming queries twice, once by Lucene so that it can build an efficient iterator, and once from a FilterScorer so that the score can be customized depending on whether a particular query matches.\n\nI haven't removed it because there was disagreement every time I suggested that it should be removed but I don't see any way that we could support it as-is realistically. To me it's also interesting that it is the first time this bug is reported even though it has existed for almost two entire major versions (since 5.1) and affects one of our main scorers.\n\nHowever we still expose this API, so +1 to fixing. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16154184",
            "date": "2017-09-05T19:47:45+0000",
            "content": "Thanks Adrien Grand, I agree the API is problematic and spotty at best.\n\nI think it would be a pity that an improvement to query execution be seen as a regression because it makes it harder to identify a matching clause.\n\nI think this API should always be \"best effort\", no guarantees, etc., and so if ever we see an improvement to query execution, we should still do it, even if it breaks this API.\n\nand once from a FilterScorer so that the score can be customized depending on whether a particular query matches.\n\nThe challenge for me is that I'm using a large expression, and keyword_only_match is just one such variable, consulted multiple times in a big machine learned decision tree; it's not clear how I could invert that model to use a FilterScorer instead.  Maybe I'll just fall back to running N queries, one for each \"clause\" I need to identify.  This is already likely in a \"rescore top N\" context, so the amount of memory would be contained ...\n\nTo me it's also interesting that it is the first time this bug is reported even though it has existed for almost two entire major versions (since 5.1) and affects one of our main scorers.\n\nYeah, true.\n ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16156101",
            "date": "2017-09-06T22:10:01+0000",
            "content": "Simple patch + test. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16171809",
            "date": "2017-09-19T14:47:16+0000",
            "content": "Commit cec5b418ea0b68098cf136f26c07505cb2d4acf9 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cec5b41 ]\n\nLUCENE-7957: ConjunctionScorer.getChildren was failing to return all child scorers ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16171813",
            "date": "2017-09-19T14:49:49+0000",
            "content": "Commit 54d1090aaa823da45ede50abc6ea13b819478a93 in lucene-solr's branch refs/heads/branch_7x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=54d1090 ]\n\nLUCENE-7957: ConjunctionScorer.getChildren was failing to return all child scorers ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16186322",
            "date": "2017-09-29T20:03:56+0000",
            "content": "Commit 91faf5c631f3da17402b0a1694539e4a314b5c60 in lucene-solr's branch refs/heads/branch_7_0 from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=91faf5c ]\n\nLUCENE-7957: ConjunctionScorer.getChildren was failing to return all child scorers ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16195297",
            "date": "2017-10-06T21:56:44+0000",
            "content": "Closing after 7.0.1 release. ",
            "author": "Steve Rowe"
        }
    ]
}