{
    "id": "LUCENE-8268",
    "title": "MatchesIterator.term() should return an array",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Won't Fix",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "At the moment, we return a single BytesRef from MatchesIterator.term(), which works well for the queries that currently implement this.  This won't be enough for queries that operate on more than one term, however, such as phrase or Span queries.\n\nIn preparation for LUCENE-8249, this issue will change the method to return an array of BytesRef",
    "attachments": {
        "LUCENE-8268.patch": "https://issues.apache.org/jira/secure/attachment/12920249/LUCENE-8268.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16447768",
            "author": "Alan Woodward",
            "content": "Patch attached.  It changes the signature from \n\nBytesRef term()\n\n to \n\nBytesRef[] terms()\n\n, and adds a test to ensure that matches at the same position are iterated over in term order. ",
            "date": "2018-04-23T08:42:25+0000"
        },
        {
            "id": "comment-16447779",
            "author": "Simon Willnauer",
            "content": "a couple of questions:\n\n\n\tin compareBytesRefArrays how can you tell that comparing each individual term is correct?\n\tis BytesRefIterator an option as a return value and would it make sense. It's hart do tell without a single user of this.\n\tIn the current context there is no gain changing this interface. Can we add a users of multiple terms?\n\n ",
            "date": "2018-04-23T08:49:22+0000"
        },
        {
            "id": "comment-16447802",
            "author": "Alan Woodward",
            "content": "Can we add a users of multiple terms?\n\nSo at the moment there isn't anything that actually uses this.  My reason for adding it was to make it possible to identify the leaf query that returned each position, but maybe it would be a better idea to remove terms() entirely, and add a getLeafQuery() method instead? ",
            "date": "2018-04-23T09:10:55+0000"
        },
        {
            "id": "comment-16447948",
            "author": "Simon Willnauer",
            "content": "\nSo at the moment there isn't anything that actually uses this. My reason for adding it was to make it possible to identify the leaf query that returned each position, but maybe it would be a better idea to remove terms() entirely, and add a getLeafQuery() method instead?\n\nhard to tell since I don't know the API well enough. But if this is the purpose, I agree. ",
            "date": "2018-04-23T10:54:28+0000"
        },
        {
            "id": "comment-16448159",
            "author": "Alan Woodward",
            "content": "Here's a patch removing term() and adding getLeafQuery() ",
            "date": "2018-04-23T13:35:52+0000"
        },
        {
            "id": "comment-16448190",
            "author": "Adrien Grand",
            "content": "Returning a query means that intervals won't be able to say what matched, since inner nodes are not queries? Maybe we should just remove this method for now and add something back when use-cases for it are clearer? ",
            "date": "2018-04-23T14:04:08+0000"
        },
        {
            "id": "comment-16448211",
            "author": "Alan Woodward",
            "content": "since inner nodes are not queries? \n\nSorry, I'm not following here - inner nodes are always generated by a Weight, which in turn has a parent query.\n\nMaybe we should just remove this method for now\n\nI think that may be the most sensible, I'll close this as Won't Fix and open a new issue to just remove it entirely. ",
            "date": "2018-04-23T14:24:20+0000"
        },
        {
            "id": "comment-16448218",
            "author": "Adrien Grand",
            "content": "What I meant is that if you run \"(a OR b) NEAR c\" with an IntervalQuery, you would only have one query, the top-level IntervalQuery since inner nodes are IntervalsSource instances. So you won't be able to distinguish matches against \"a\" from matches against \"b\". ",
            "date": "2018-04-23T14:29:34+0000"
        }
    ]
}