{
    "id": "LUCENE-6539",
    "title": "Add DocValuesNumbersQuery, like DocValuesTermsQuery but works only with long values",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "This query accepts any document where any of the provided set of longs\nwas indexed into the specified field as a numeric DV field\n(NumericDocValuesField or SortedNumericDocValuesField).  You can use\nit instead of DocValuesTermsQuery when you have field values that can\nbe represented as longs.\n\nLike DocValuesTermsQuery, this is slowish in general, since it doesn't\nuse an inverted data structure, but in certain cases (many\nterms/numbers and fewish matching hits) it should be faster than using\nTermsQuery because it's done as a \"post filter\" when other (faster)\nquery clauses are MUST'd with it.\n\nIn such cases it should also be faster than DocValuesTermsQuery since\nit skips having to resolve terms -> ords.",
    "attachments": {
        "LUCENE-6539.patch": "https://issues.apache.org/jira/secure/attachment/12738656/LUCENE-6539.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14579543",
            "author": "Michael McCandless",
            "date": "2015-06-09T20:50:04+0000",
            "content": "Initial rough patch ... test is passing. "
        },
        {
            "id": "comment-14579566",
            "author": "Adrien Grand",
            "date": "2015-06-09T21:09:18+0000",
            "content": "This new query looks good to me. However instead of keeping adding such queries to core, I think we should consider moving all our doc values queries to misc since they have complicated trade-offs and are only useful in expert use-cases?\n\n\n+  private static Set<Long> toSet(Long[] array) {\n+    Set<Long> numbers = new HashSet<>();\n+    for(Long number : array) {\n+      numbers.add(number);\n+    }\n+    return numbers;\n+  }\n\n\n\nFYI you don't need this helper and could do just: new HashSet<Long>(Arrays.asList(array)).\n\nin certain cases (many terms/numbers and fewish matching hits) it should be faster than using TermsQuery\n\nThis comment got me confused: I think in general these queries are more efficient when they match many documents, ie. even when an equivalent TermsQuery would not be used as a lead iterator in a conjunction? I think the only case when such a query matching few documents would be useful would be in a prohibited clause since these prohibited clauses can never be used to lead iteration anyway and are only used in a random-access fashion? "
        },
        {
            "id": "comment-14579568",
            "author": "Robert Muir",
            "date": "2015-06-09T21:11:09+0000",
            "content": "I don't think this query should be a standalone one. It forces users to decide which one to use, and they will fuck this up.\n\nevery time.\n\nIts ok in current form to go to sandbox, but i think this needs to be integrated into the inverted approach so that based on index stats, lucene can just do the right thing. "
        },
        {
            "id": "comment-14579637",
            "author": "Michael McCandless",
            "date": "2015-06-09T22:01:33+0000",
            "content": "new HashSet<Long>(Arrays.asList(array)).\n\nGood, I'll fix.\n\nHowever instead of keeping adding such queries to core, I think we should consider moving all our doc values queries to misc since they have complicated trade-offs and are only useful in expert use-cases?\n\n+1, I can move them here.\n\n\nin certain cases (many terms/numbers and fewish matching hits) it should be faster than using TermsQuery\n\nThis comment got me confused: I think in general these queries are more efficient when they match many documents, ie. even when an equivalent TermsQuery would not be used as a lead iterator in a conjunction? I think the only case when such a query matching few documents would be useful would be in a prohibited clause since these prohibited clauses can never be used to lead iteration anyway and are only used in a random-access fashion?\n\nHmm this is hard to think about, but yes I was thinking about the \"there is some other MUST'd clause as the primary\" and then this query is a MUST_NOT of a big list of numeric IDs, use case.\n\nThe per-hit cost is higher with these DocValuesXXX queries (the forward lookup + check) vs visiting postings and ORing bitsets that TermsQuery does (when there are enough terms), but the setup cost is higher with TermsQuery since it must lookup many terms across N segments, which is why I thought \"not matching too many total hits\" would favor DocValueXXXQuery with a large number of terms.\n\nE.g. in the extreme case where you pass a single term to your TemsQuery or DocValuesTermsQuery, matching many docs, and its the primary (only) clause in the query, TermsQuery should be much faster.\n\nIts ok in current form to go to sandbox, but i think this needs to be integrated into the inverted approach so that based on index stats, lucene can just do the right thing.\n\nOK, or I can just WONTFIX this ... I just thought there are use cases where this post-filter approach would be much faster then the choices we have today, e.g. when an app has numeric IDs and wants to make big \"NOT in list\" clauses.\n\nI agree it would be better if we had only TermsQuery, and then it would figure out which strategy is best (use doc values, use numeric doc values if ids are really numeric, use postings) to take depending on index stats, whether clause is primary or not, etc... but this seems very tricky: I can't even properly think about the cases, see Adrien's comment above  "
        },
        {
            "id": "comment-14579661",
            "author": "Adrien Grand",
            "date": "2015-06-09T22:20:59+0000",
            "content": "OK, or I can just WONTFIX this\n\nI think you should commit it, it is a missing piece today since you can do this on SORTED or SORTED_SET but not NUMERIC or SORTED_NUMERIC while this new query is cheaper. Let's put it into sandbox if we want to be \"safe\"?\n\nAgreed that integration with TermsQuery would be wonderful, but I also see challenges on the way.  "
        },
        {
            "id": "comment-14580547",
            "author": "Michael McCandless",
            "date": "2015-06-10T13:58:01+0000",
            "content": "OK how about for this issue, I move DocValuesTermsQuery, DocValuesRangeQuery and this new one (DocValuesNumbersQuery) to sandbox, add warnings / experimental, and commit there?\n\nI think it would be wonderful if TermsQuery did all this magically, but I don't think it should hold up adding this query. "
        },
        {
            "id": "comment-14580550",
            "author": "Adrien Grand",
            "date": "2015-06-10T13:59:54+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14580800",
            "author": "Michael McCandless",
            "date": "2015-06-10T16:59:33+0000",
            "content": "New patch, moving these 3 \"typically slow\" queries to sandbox.  I think it's ready... "
        },
        {
            "id": "comment-14585710",
            "author": "Adrien Grand",
            "date": "2015-06-15T09:36:26+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14585779",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T11:01:16+0000",
            "content": "Commit 1685540 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1685540 ]\n\nLUCENE-6539: Add DocValuesNumbersQuery "
        },
        {
            "id": "comment-14586084",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T14:10:32+0000",
            "content": "Commit 1685585 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685585 ]\n\nLUCENE-6539: Add DocValuesNumbersQuery "
        },
        {
            "id": "comment-14586193",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T15:28:10+0000",
            "content": "Commit 1685597 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1685597 ]\n\nLUCENE-6539: Intellij config: add sandbox module dependency to solr-core and solr-analysis-extras modules "
        },
        {
            "id": "comment-14586197",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T15:30:45+0000",
            "content": "Commit 1685598 from Steve Rowe in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685598 ]\n\nLUCENE-6539: Intellij config: add sandbox module dependency to solr-core and solr-analysis-extras modules (merged trunk r1685597) "
        },
        {
            "id": "comment-14713132",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:51+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}