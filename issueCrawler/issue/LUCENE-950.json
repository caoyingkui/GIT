{
    "id": "LUCENE-950",
    "title": "IllegalArgumentException parsing \"foo~1\"",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "2.1,                                            2.2",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "If I run this:\n\n    QueryParser parser = new QueryParser(\"myField\", new SimpleAnalyzer());\n    try \n{\n      parser.parse(\"foo~1\");\n    }\n    catch (ParseException e) \n{\n      // OK\n    }\n\nI get this:\n\nException in thread \"main\" java.lang.IllegalArgumentException: minimumSimilarity >= 1\n\tat org.apache.lucene.search.FuzzyQuery.<init>(FuzzyQuery.java:58)\n\tat org.apache.lucene.queryParser.QueryParser.getFuzzyQuery(QueryParser.java:711)\n\tat org.apache.lucene.queryParser.QueryParser.Term(QueryParser.java:1090)\n\tat org.apache.lucene.queryParser.QueryParser.Clause(QueryParser.java:979)\n\tat org.apache.lucene.queryParser.QueryParser.Query(QueryParser.java:907)\n\tat org.apache.lucene.queryParser.QueryParser.TopLevelQuery(QueryParser.java:896)\n\tat org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:146)",
    "attachments": {
        "lucene_950_08_26_2009.patch": "https://issues.apache.org/jira/secure/attachment/12417796/lucene_950_08_26_2009.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-07-05T16:45:41+0000",
            "content": "Hmmm, this isn't really an error (see http://lucene.zones.apache.org:8080/hudson/job/Lucene-Nightly/javadoc/org/apache/lucene/search/FuzzyQuery.html) but I can also see that the QueryParser Syntax (http://lucene.apache.org/java/docs/queryparsersyntax.html) doesn't explicitly state that 1 is excluded, even if the Javadocs do.  It says:\n    \"Starting with Lucene 1.9 an additional (optional) parameter can specify the required similarity. The value is between 0 and 1, with a value closer to 1 only terms with a higher similarity will be matched.\"\n\nI could see that a patch saying something like \"The value is between 0 and 1 (but not including 1), with a value closer ...\"  would be appropriate.\n\nSo, I will leave this open for now, even though I feel the QueryParser and FuzzyQuery are operating correctly. ",
            "author": "Grant Ingersoll",
            "id": "comment-12510403"
        },
        {
            "date": "2008-08-10T21:54:35+0000",
            "content": "Do we want to make the wording for this more clear on the query syntax page? To me, saying 'between' two numbers does not include the end numbers. If its between the couch and the chair, your not going to find it on either.  Maybe that example is counter to my point...<g> \n\nIf nobody else is confused though, I say we resolve this issue. Between 0 and 1 sounds clear enough to me. ",
            "author": "Mark Miller",
            "id": "comment-12621313"
        },
        {
            "date": "2008-08-11T09:58:45+0000",
            "content": "Perhaps all that needs doing is to note on the javadoc of \nQueryParser.parse(String) that it can throw IllegalArgumentException as \nwell as ParseException, so that consuming code can catch it.  An \napplication shouldn't blow up just because a user types something silly \nin a search field.\n\n\n\n\u2013 \nEleanor Joslin, Software Development   DecisionSoft Ltd.\nTelephone: +44-1865-203192             http://www.decisionsoft.com ",
            "author": "Eleanor Joslin",
            "id": "comment-12621400"
        },
        {
            "date": "2008-08-11T10:12:15+0000",
            "content": "I agree Eleanor - someone else made a good point of maybe foo~(>=1) should really just map to foo. I think you hit the nail on the hit though, in that it seems silly to throw the illegal arg exception in either case. ",
            "author": "Mark Miller",
            "id": "comment-12621402"
        },
        {
            "date": "2008-08-11T10:30:45+0000",
            "content": "Also note that if the number in the query string is higher than 1 the \nsame operation throws a ParseException instead.\n\norg.apache.lucene.queryParser.ParseException: Cannot parse 'foo~1.01': \nMinimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\n\tat org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:150)\n\n\n\n\u2013 \nEleanor Joslin, Software Development   DecisionSoft Ltd.\nTelephone: +44-1865-203192             http://www.decisionsoft.com ",
            "author": "Eleanor Joslin",
            "id": "comment-12621404"
        },
        {
            "date": "2009-08-25T08:13:10+0000",
            "content": "I can fix this in the new queryparser implementation.\n\n\n... maybe foo~(>=1) should really just map to foo. I think you hit the nail on the hit though, in that it seems silly to throw the illegal arg exception in either case.\n\nI also agree, I'm adding a comment to LUCENE-1823, to fix this in the implementation. ",
            "author": "Luis Alves",
            "id": "comment-12747297"
        },
        {
            "date": "2009-08-26T21:00:50+0000",
            "content": "This patch fixes the bug, it no longer throws IllegalArgumentException when the user enters fuzzy queries with similarity greater or equals 1, instead, it converts the FuzzyQuery into a simple TermQuery, ignoring the fuzzy value. ",
            "author": "Adriano Crestani",
            "id": "comment-12748145"
        },
        {
            "date": "2010-10-20T13:16:09+0000",
            "content": "I'd like to resolve this issue.\n\nIn LUCENE-2667 we changed the syntax for 4.0 such that foo~1 and foo~2 specify a fuzzyquery with edit distance of 1 or 2, respectively.\nThe old syntax of ~0.5 is still accepted, but the default is now ~2 so that we never scan the entire term dictionary by default.\nThe new syntax is no problem, since you only got IllegalArgumentException for these things before \n\nIts also pretty handy to be able to do a search and ask for '1 or 2 characters off' without playing games with floats.\nsee http://stackoverflow.com/questions/2073839/search-lucene-with-precise-edit-distances\nFor example, we now have a spellchecker (LUCENE-2507) that uses this functionality in just this way.\n\nSo I think we can resolve this issue as fixed since its obselete. ",
            "author": "Robert Muir",
            "id": "comment-12922950"
        }
    ]
}