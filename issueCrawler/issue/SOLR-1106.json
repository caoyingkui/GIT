{
    "id": "SOLR-1106",
    "title": "Pluggable CoreAdminHandler  (Action ) architecture that allows for custom handler access to CoreContainer / request-response",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently there are certain default actions implemented in CoreAdminHandler ( CREATE , SWAP, RELOAD , ALIAS etc.) . \n\nFor the purpose of in-house monitoring tools that needs to interact with multiple cores at a given solr instance - we need custom handlers that has access to CoreContainer and the req, resp of the same. \n\nSo - the proposed way of injecting handlers is as follows. \n\nIn solr.xml - we add a new schema - \n\n <solr >\n     <cores adminPath=\"/cores/admin\">  \n\n          <adminActionHandler action=\"newaction\" handlerType=\"com.mydomain.myclass\" />\n      </cores> \n  </solr> \n\nNew abstract class -  CoreAdminActionRequestHandler added - that com.mydomain.myclass would need to inherit from. \n\nFollowing action handlers registered by default - \n\n    registerCustomAdminHandler(\"create\", new AdminCreateActionRequestHandler());\n    registerCustomAdminHandler(\"rename\", new AdminRenameActionRequestHandler());\n    registerCustomAdminHandler(\"alias\", new AdminAliasActionRequestHandler());\n    registerCustomAdminHandler(\"unload\", new AdminUnloadActionRequestHandler());\n    registerCustomAdminHandler(\"status\", new AdminStatusActionRequestHandler());\n    registerCustomAdminHandler(\"persist\", new AdminPersistActionRequestHandler());\n    registerCustomAdminHandler(\"reload\", new AdminReloadActionRequestHandler());\n    registerCustomAdminHandler(\"swap\", new AdminSwapActionRequestHandler());\n\nTrying to register a handler with one that already exists would result in an error ( Hence - the above mentioned defaults would not be overridden).",
    "attachments": {
        "SOLR-1106.patch": "https://issues.apache.org/jira/secure/attachment/12404983/SOLR-1106.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karthik K",
            "id": "comment-12697092",
            "date": "2009-04-08T16:53:02+0000",
            "content": "Changes to CoreContainer  ( inferring solr admin action handlers / loading them ). \nChanges to CoreAdminHandler ( registering handlers ) \nNew class - CoreAdminActionRequestHandler added ( that needs to be implemented by the plugins ) \n\nExisting admin actions implemented as CoreAdminActionRequestHandlers. \n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12697097",
            "date": "2009-04-08T16:57:08+0000",
            "content": "Name of the actions  is case-insensitive .  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12699835",
            "date": "2009-04-16T20:12:20+0000",
            "content": "Revised Patch with less drastic changes: \n\n\n\tNew method added to SolrResourceLoader# newAdminHandlerInstance(final CoreContainer coreContainer)  to inject CoreContainer aware systems (ignoring SolrCoreAware since at a container level in a multi-core system - SolrCoreAware might not make sense)\n\n\n\n\n\tCoreAdminHandler#handleCustomAction(final CoreContainer cores, final SolrQueryRequest req, final SolrQueryResponse rsp)\n added to handle custom actions ( By default - it throws an exception explaining that action is not valid ). \n\n\n\n\n\tCoreContainer :\n     solr/cores/@adminHandler added as an optional  xml config parameter ( defaults to org.apache.solr.handler.admin.CoreAdminHandler ) as before. \n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12699997",
            "date": "2009-04-17T04:31:00+0000",
            "content": "few observations\n\n\tIt leaves no option to override the standard commands. Move the execution of each command to separate protected methods. this way even the standard commands can be overridden\n\tdo not use reflection to load the default CoreAdminhandler\n\n\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12700191",
            "date": "2009-04-17T14:41:16+0000",
            "content": "\n    It leaves no option to override the standard commands.\n\nThat seems counter-intuitive to your objection of the first design by Abstract classes and implementations since the correct way is to have an abstract class and provide default implementations of the same for commands available by default.  Also - I do not see the motivation to override the default commands. \n\nI will attach the revised patch to load the default CoreAdminHandler without reflection.  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12700197",
            "date": "2009-04-17T14:48:49+0000",
            "content": "CoreAdminHandler ( default ) instantiated without using reflection  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12700205",
            "date": "2009-04-17T15:17:34+0000",
            "content": "I do not see the motivation to override the default commands. \n\nThere are places were we may need to override the default implementation. Actually we already do it internally. So if I cannot override the the default commands it may not be as useful "
        },
        {
            "author": "Karthik K",
            "id": "comment-12700210",
            "date": "2009-04-17T15:29:36+0000",
            "content": "\nThere are places were we may need to override the default implementation. Actually we already do it internally. So if I cannot override the the default commands it may not be as useful\n\nIf that were the case - then going by an abstract action and implementations of the same (with option to override default implementations ) would probably be cleaner , allowing default implementations to be overridden. Otherwise we are looking at probably around 6 - 7 methods that could be overridden and as we add more default commands - we might end up adding one more method to be overridden. Let me know what you feel about this.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12700424",
            "date": "2009-04-18T05:51:30+0000",
            "content": "to hoss' comment on the list http://markmail.org/message/s7mcbtaskngr74bd\n\nThe commands such as create/load/unload etc can only be done by the CoreAdminHandler. So it is not really possible to achieve this as a RequestHandler. Take our usecase where we start with a blank slate ( zero cores) and we keep adding cores . In this case there is no core in the first  place to attach a RequestHandler \n\nwe might end up adding one more method to be overridden. Let me know what you feel about this. \n\nAs I see it , there will be very few users overriding the CoreAdminHandler . We do it and we have a custom build of Solr for that. With this issue fixed I may be able to plugin my custom CoreAdminHandler.  having 7 -8 methods to be overridden is a good idea. If there are new commands we may have new methods "
        },
        {
            "author": "Karthik K",
            "id": "comment-12700806",
            "date": "2009-04-20T14:34:18+0000",
            "content": "\nAny Core can get access to the CoreContainer (via core.getCoreDescriptor().getCoreContainer()) and all of the SolrCores it is managing, so couldn't these new hooks you need be implented in regular RequestHandler? \n\n I ask this from the \"how to achieve a niche goal with the minimal number of invasive changes\" standpoint \u2013 mainly because i don't really understand what new types of \"monitoring hooks\" you're thinking of. if they seem like something that would be generally useful to lots of people, why not add them to CoreAdminHandler? if they pattern of adding them seems like something that will come up for lots of people then i would worry about making CoreAdminHandler more extensible.  \n\nMonitoring hooks was one of the examples that we are using internally . If at the end of the implementation I find it generic enough - I would definitely be more than happy to share the patch for that too - but this I need this to be a building block on which other similar components could be built. \n\nAnother context in which we need this is w.r.t doing some matching analysis between different indices  (managed via - a multi-core instance) where the indices are managed by the respective SolrCore's UpdateHandlers while a req / response via http would goto a place that has access to both the cores and return the result, \n\nRequestHandler does not seem logically correct (though is indirectly possible via the method outlined earlier ) since that would bind the request Handler to one of the cores while the behavior intended is across cores - hence that needs to be done a level above all the cores and I selected admin Handler since that seems to be the only handler used in solr.xml . \n\nBut what could be useful is to retain the requestHandler and make them configurable in solr.xml to address similar requests in the future. \n\n\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12700809",
            "date": "2009-04-20T14:40:50+0000",
            "content": "\n\n\n As I see it , there will be very few users overriding the CoreAdminHandler . We do it and we have a custom build of Solr for that. With this issue fixed I may be able to plugin my custom CoreAdminHandler. having 7 -8 methods to be overridden is a good idea. If there are new commands we may have new methods\n\n\n\n\n\nI have to disagree with the suggestions of overriding 7 - 8 method as a good idea here. Also - it seems ironical to me that you have a commit privilege to solr and have a custom build too ( as opposed to a pluggable library to solr ) since given the right hooks available - it can prevent forking of the code and useful to others in the community as well. \n\nThe point of my longer exercise of submitting a patch to get it committed is to prevent forking , even though it is tempting in terms of time to do it otherwise. \n\nHaving put the reasons-  here is the revised patch with individual 'actions' of CoreAdminHandler being implemented as separate methods ('protected') that could be overridden by derived methods if necesary.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12701046",
            "date": "2009-04-21T04:22:08+0000",
            "content": "I have to disagree with the suggestions of overriding 7 - 8 method as a good idea here.\n\nthe methods are protected does not mean we may have to override it. We only override a couple of functionalities.\n\nit seems ironical to me that you have a commit privilege to solr and have a custom build too \n\nWe will be glad to contribute everything back to Solr trunk. We may even do it eventually. but,  our use cases are very unique, and there may not be a need for such things for others. The changes are not limited to this. We needed a very lightweight Solr because we need to run close to 20000 cores per box.\n\nI am happy to see another user who has similar needs.  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12701151",
            "date": "2009-04-21T13:24:48+0000",
            "content": " Let me know how this revised patch looks like and whether it fits your needs as well since I would prefer to have this committed and pick up a nightly build ( or a release , better) . Thanks for the help once again.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12701523",
            "date": "2009-04-22T13:23:28+0000",
            "content": "Thanks Kay, this looks good.\n\nI've made the following changes over your last patch\n\n\tRe-formatted code to Lucene/Solr coding style. I know this is frowned upon for changes to existing code but CoreAdminHandler was the only place using a non-standard style of brace positioning and variable names.\n\tMade the CoreContainer instance protected\n\tRemoved the CoreContainer parameter to all the action methods since it is an instance variable\n\tRemoved the final keyword from variable/parameter definitions. That is just noise in this context, isn't it?\n\n\n\nI think this is ready to commit. I'll wait for a day for any feedback that others may have. "
        },
        {
            "author": "Karthik K",
            "id": "comment-12701546",
            "date": "2009-04-22T14:26:32+0000",
            "content": "I have submitted changes to  the wiki at - http://wiki.apache.org/solr/CoreAdmin with additional info about adminHandler introduced in this jira. Let me know how it looks and approve the same once this fix is in.   "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12702257",
            "date": "2009-04-24T06:33:19+0000",
            "content": "Committed revision 768165.\n\nThanks Kay and Noble!\n\nI have submitted changes to the wiki at - http://wiki.apache.org/solr/CoreAdmin with additional info about adminHandler introduced in this jira. Let me know how it looks and approve the same once this fix is in.\n\nThis looks good Kay, thanks! "
        },
        {
            "author": "Karthik K",
            "id": "comment-12702569",
            "date": "2009-04-24T21:38:25+0000",
            "content": "Thanks Shalin and Noble for helping committing this.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12711020",
            "date": "2009-05-20T06:13:16+0000",
            "content": "It seems that the call to core.setProperties was removed in this refactoring and therefore, implicit properties are not being set on cores created through CoreAdminHandler. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12711023",
            "date": "2009-05-20T06:16:50+0000",
            "content": "Oops, wrong call. That call was actually removed by SOLR-943. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12713881",
            "date": "2009-05-28T05:21:06+0000",
            "content": "The adminhandler attribute must be persisted back to solr.xml "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12713882",
            "date": "2009-05-28T05:23:17+0000",
            "content": "committed : 779439 "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775710",
            "date": "2009-11-10T15:52:01+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}