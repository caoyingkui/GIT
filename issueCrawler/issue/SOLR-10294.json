{
    "id": "SOLR-10294",
    "title": "Decide branching strategy for Ref Guide",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "documentation"
        ],
        "type": "Sub-task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Since one of the reasons to move off Confluence is to provide online docs for specific versions of Solr, we should agree up front how we'll manage working with the branches.\n\nThere are two general proposals on the table so far:\n\n\n\tMake all changes in 'master' (trunk) and backport to branches for\nreleasing the content. We'd need to merge \"backward\" into upcoming\nrelease branch.\n\tMake all changes in branch_6x (or branch_7x, etc.) and only move\nthings to master when they are only applicable to unreleased next\nmajor version. We'd merge 6x \"forward\" when it's time for next major\nversion.\n\n\n\nSome discussion on this started in the mailing list, so I'll copy the feedback received so far on this as comments to this issue.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-15T19:56:42+0000",
            "content": "From Hoss Man (devs@lucene email 12 Mar 2017, Re: Moving the Ref Guide: Progress Update & Next Steps):\n\n\nI personally think \"#1\" is the only sane way to manage the ref guide.\n\nI think we should do everything we can to move towards ref-guide edits\nbeing committed & managed exactly the same as source code edits \u2013 ideally\nin the exact same commits, to the exact same repo. So that if you are\nadding/fixing a Foo feature, you have a single commit to master that edits\nFoo.java and Foo.adoc (just in diff directories).  When you want to\nbackport that feature to branch 6x, you backport the whole commit.\n\n(we would never consider committing fixes/improvements to code, and then\nleaving javadoc corrections about those code changes until just before\nrelease weeks later \u2013 we shouldn't approach writing user docs that way\neither.)\n\nHaving this branching model, and getting use to this model of\ncommitting/backporting doc changes at the exact same time we\ncommit/backport code, is the only way we can ever hope to move forward\nwith any of the really powerful things using adoc files (and a command\nline ref-guide build system) can support:\n\n\n\tbuilding the ref guide & checking broken links as part of our\nprecommit/smoketest build targets.\n\twriting automated \"tests\" of our documentation (ex: assert every\ncollections API 'command' has a coresponding page/section) that can be run\nby jenkins.\n\n ",
            "author": "Cassandra Targett",
            "id": "comment-15926849"
        },
        {
            "date": "2017-03-15T19:58:15+0000",
            "content": "From Jan H\u00f8ydahl (devs@lucene email 13 Mar 2017, Re: Moving the Ref Guide: Progress Update & Next Steps):\n\n\nAnd agree with Hoss that docs must be expected with code, or else the released git version will not contain the correct refguide. We cannot rely on releasing the refguide weeks after the code anymore, and we can\u2019t hold up the release process and do tons of re-spins for simple adoc changes. ",
            "author": "Cassandra Targett",
            "id": "comment-15926852"
        },
        {
            "date": "2017-03-16T14:24:37+0000",
            "content": "I would also favour a \"docs-with-code\" approach including merging \"backwards\" from master into the upcoming release branch e.g. branch_6x.\n\nFor docs (but not code) to follow a merging \"forward\" from branch_6x into master when it's time for the next major version seems counter-intuitive and could be building up merge trickiness, trickiness which if tackled on an as-we-go-along basis should be more manageable. ",
            "author": "Christine Poerschke",
            "id": "comment-15928155"
        },
        {
            "date": "2017-03-16T17:52:25+0000",
            "content": "+1 for #1 ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15928518"
        },
        {
            "date": "2017-03-16T18:02:12+0000",
            "content": "Another +1 to the first suggestion from Hoss.  We already use that method for code.  I think that if we use a different commit approach for docs, devs will simply choose to not create/update them because it will be difficult to manage. ",
            "author": "Shawn Heisey",
            "id": "comment-15928538"
        },
        {
            "date": "2017-03-18T15:43:36+0000",
            "content": "+1 for #1. ",
            "author": "Steve Rowe",
            "id": "comment-15931255"
        },
        {
            "date": "2017-05-02T15:15:14+0000",
            "content": "There have been no dissenting points of view on this issue, so I will take that as agreement that the branching strategy will be the same as it is for code:\n\n\n\t\"master\" branch is where all changes are made\n\tchanges are backported to version branches (such as \"branch_6x\")\n\tchanges will also be backported to release branches (such as \"branch_6_5\") as necessary\n\n\n\nIf there are no objections in the next day, I'll codify this in the meta-docs for the Ref Guide (see the jira/solr-10290 branch, solr/solr-ref-guide/meta-docs). ",
            "author": "Cassandra Targett",
            "id": "comment-15993065"
        }
    ]
}