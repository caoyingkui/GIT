{
    "id": "LUCENE-373",
    "title": "Query parts ending with a colon are handled badly",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "I'm using Lucene 1.4.3, running\nQuery query = QueryParser.parse(queryString, \"contents\", new StandardAnalyzer());\n\nIf queryString is \"search title:\" i.e. specifying a field name without a\ncorresponding value, I get a parsing exception:\n\nEncountered \"<EOF>\" at line 1, column 8.\nWas expecting one of:\n    \"(\" ...\n    <QUOTED> ...\n    <TERM> ...\n    <PREFIXTERM> ...\n    <WILDTERM> ...\n    \"[\" ...\n    \"{\" ...\n    <NUMBER> ...\n\nIf queryString is \"title: search\", there's no exception.  However, the parsed\nquery which is returned is \"title:search\".  If queryString is \"title: contents:\ntext\", the parsed query is \"title:contents\" and the \"text\" part is ignored\ncompletely.  When queryString is \"title: text contents:\" the above exception is\nproduced again.\n\nThis seems inconsistent.  Given that it's pointless searching for an empty\nstring (since it has no tokens), I'd expect both \"search title:\" & \"title:\nsearch\" to be parsed as \"search\" (or, given the default field I specified,\n\"contents:search\"), and \"title: contents: text\" & \"title: text contents:\" to\nparse as \"text\" (\"contents:text\") i.e. parts which have no term are ignored.  At\nworst I'd expect them all to throw a ParseException rather than just the ones\nwith the colon at the end of the string.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-26T11:46:09+0000",
            "content": "This is still a problem with QP. I think we should make the behavior consistent. If \"xyz field:\" throws ParseException, so should \"field: xyz\". In fact, I think the latter is a bug - the query will search 'xyz' under \"field\", even if the user didn't intend to do so.\n\nQP already takes Version, so we can fix this bug safely. ",
            "author": "Shai Erera",
            "id": "comment-12986954"
        },
        {
            "date": "2012-05-18T06:42:43+0000",
            "content": "Do I understand it correct, that you say that it is bug when because there is also a space before the xyz ? So it should be searched for ' xyz' under field ? Am I right ? Or how do you expect that to work.\nI totally understand the inconsistency described by Andrew. ",
            "author": "Jan Fruehwacht",
            "id": "comment-13278614"
        },
        {
            "date": "2013-11-30T13:13:34+0000",
            "content": "2013 Old JIRA cleanup ",
            "author": "Erick Erickson",
            "id": "comment-13835682"
        },
        {
            "date": "2015-07-28T04:45:43+0000",
            "content": "My understanding of the above issue and analyze if it really needs a fix, if so where, or to find if it is an enhancement.\n\nsection 1:\n==========\n>>> If queryString is \"title: search\", there's no exception. However, the parsed\n>>> query which is returned is \"title:search\". \nThis is as expected.\n\nsection 2:\n==========\n>>> If queryString is \"title: contents: text\", \n>>> the parsed query is \"title:contents\" and the \"text\" part is ignored completely. \nthis needs revisit. may be we should bring in something like\na = b = 2 in java or python or javascript or ruby means 2 is assigned to a and b .\nso similar approach can be followed here .This is discussed in detail later in my answer(see section 5 & 7)\n\nsection 3:\n==========\n>>> When queryString is \"title: text contents:\" the above exception is\n>>> produced again.\nThis is also expected . It breaks the syntax.\nWhy ? and Why this may not be conceived as a bug ?\nWe should accept one thing that is that lucene query language is like a language of\nits own and it has its own syntax. So we should obey that . \nAnd I would say that it has a meaningful syntax. It is not weird.\nwhy did I make the above statement ?\nLet us see what happens in other  programming languages(say python or java or javascript or ruby) .\nsay a = ; ( a = \nis an error (unexpected End of input error)\nsimilary \n = 2;\nis an error ... so\nthis is something that is common in all most languages and expected ..\nwhy is this the most expected ?\nthe idea is \n1) if you assign something to nothing it is a bug. = 2\n2) if you assign nothing to something it is a bug. a = \n\nNow lets comes to lucene context :\n = something ...\nthen comes the question \"what should we search something against default field of something else?\" this is meaningless . so it is  best choice made by lucene developers to have considered it as a bug and throw parseException.\nsomething = \nwhat should we search for in field something ... we should not infer anything as value unless told explicitly , so here too it is  best choice made by lucene developers to have considered it as a bug and throw parseException. I personally like the decision made.\n\nsection 4:\n==========\n>>> This seems inconsistent. Given that it's pointless searching for an empty\n>>> string (since it has no tokens), I'd expect both \"search title:\" & \"title:\n>>> search\" to be parsed as \"search\" (or, given the default field I specified,\n>>> \"contents:search\"), \nsearch title:  \nis like as explained above . I like the present syntax as it is best for a syntax not to assume anything unless\nsaid explicitly. like the cases\n = 2 \na = \nwhere we cannot assume either the field or the term. so it should be a parseException and that is what we get now.\n\n\"title: search\" overrides the default field and searches in title field. this is as per design and this cannot do just \"search\" on default, which breaks the original design. pls refer  fields section in http://lucene.apache.org/core/5_2_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description. \n\nsection 5:\n===========\n>>> and \"title: contents: text\" \nthis seems meaningful at least to me. But I would not say it is right or wrong .. but it is about what we want\nand what most people want and what seems meaningful.\nif we want we can bring in a syntax again I would like to see other programing languages to see how a similar syntax is handled \nin java, python, javascript, ruby\na = b = c = 2\nis allowed \nand what it does is assign a, b , c  the value of 2 .\nso here too we can have syntax to make the text term be searched in fields title and contents . This is a choice which \nwe can make if the present state is confusing.\nI feel that as the person who reported this issue says , just ignoring something that user gave silently seems\nunfair .This is just my point of view .\nIf the community takes a stand that this breaks syntax and we don't want this new syntax, at least we should throw exception .\n\nsection 6:\n==========\n>>> \"title: text contents:\" to\n>>> parse as \"text\" (\"contents:text\") i.e. parts which have no term are ignored. At\n>>> worst I'd expect them all to throw a ParseException rather than just the ones\n>>> with the colon at the end of the string.\npls see my explanation above . this as per my reasoning need not be considered a bug.\n\nNote: I am taking other programming language syntax  just to see which design has stood the test of time .. so that I can infer that it is mostly expected from people and is less confusing. These programming languages have evolved over time, so we can take these \nsyntax as reference and be considered as the most expected ones. I personally would like to go by the most famous\nexpectations. Please correct me if I am wrong.\n\n\n\nsection 7:\n==========\nFurther discussion on section 5 :\nlets see if the new syntax work in our lucene query language, and how it can work without ambiguity\na : b : hello world h: when\nhello will be searched in fields with names a,b\nworld will be searched in default field\nwhen will be searched in field with name h.\n\nwhenever and wherever there are statements like the following\n1) with fieldnames but no terms \u2013   a:\n2) terms with intention to assign (with  but no field name \u2013  : hello\n should be flagged as error.\n(already the above is done by query parser..(this is to say that queryparser does not just look for : in begining or end and flags the\nerror. This is good. even if I have statements within brackets like (fieldname or (:termvalue) it flags error.  \n\nThe above in section 5 & 7 is just a proposal. Please give your comments. Feel free to point out mistakes.\nIf there is  expectation that this syntax will have a bad impact on performance , even then this syntax need not get inside.\n\nI referred http://lucene.apache.org/core/5_2_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description for better understanding . ",
            "author": "Harish Kayarohanam",
            "id": "comment-14643840"
        },
        {
            "date": "2015-07-28T05:15:49+0000",
            "content": "So as far my analysis goes , there is no must fix bug here . But there is decision that is pending whether the proposal above can be brought\nin or not in order to allay the confusing and silent leaving out of terms in search . If the community decides that it is worth doing, then may be I can give it a try to get in this feature .\nOn the other hand, if the community decides that it is not worth doing, then we can leave it. ",
            "author": "Harish Kayarohanam",
            "id": "comment-14643855"
        }
    ]
}