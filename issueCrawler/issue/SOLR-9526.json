{
    "id": "SOLR-9526",
    "title": "data_driven configs defaults to \"strings\" for unmapped fields, makes most fields containing \"textual content\" unsearchable, breaks tutorial examples",
    "details": {
        "components": [
            "UpdateRequestProcessors"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "7.0",
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "James Pritchett pointed out on the solr-user list that this sample query from the quick start tutorial matched no docs (even though the tutorial text says \"The above request returns only one document\")...\n\nhttp://localhost:8983/solr/gettingstarted/select?wt=json&indent=true&q=name:foundation\n\nThe root problem seems to be that the add-unknown-fields-to-the-schema chain in data_driven_schema_configs is configured with...\n\n<str name=\"defaultFieldType\">strings</str>\n\n\n\n...and the \"strings\" type uses StrField and is not tokenized.\n\n\n\nOriginal thread: http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201609.mbox/%3CCAC-n2zRPsspfnK43AGeCspchc5b-0FF25xLfnzogYuVyg2dWbw@mail.gmail.com%3E",
    "attachments": {
        "SOLR-9526.patch": "https://issues.apache.org/jira/secure/attachment/12832092/SOLR-9526.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-17T00:29:56+0000",
            "author": "Hoss Man",
            "content": "I have no idea if other parts of the tutorial are totally broken, but my biggest question first and foremost is WTF is up with \"strings\" being the defaultFieldType in data_driven_schema_configs???? that makes no sense to me at all.\n\nIt appears it's been that way since commit 0ff1e75b for SOLR-6779, but there's no explanation i can see in that jira as to why this change was made.\n\nHas this really been broken this horiffically since 5.0?!?!?! ",
            "id": "comment-15497815"
        },
        {
            "date": "2016-09-17T01:54:39+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Possibly to make facets work out of the box? Just guessing. ",
            "id": "comment-15497960"
        },
        {
            "date": "2016-09-17T16:00:17+0000",
            "author": "Shawn Heisey",
            "content": "I would think that adding docValues to the field would allow facets to work like most people expect, while also allowing single-word searches. ",
            "id": "comment-15499254"
        },
        {
            "date": "2016-09-19T07:59:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Yea, I remember the discussion about string vs text, and the tradeoff between searchability and facets. Some argued to choose \"string\" for short strings and \"text\" for longer strings, but that would be a mess, so we settled on a more consistent behavior. What if we create a new fieldType text_datadriven which has docValues=\"true\", and let the data driven logic always use that one, perhaps with some cutoff for very long texts? It will not be the best fit for all data sets, but then people should do explicit mapping anyway... ",
            "id": "comment-15502645"
        },
        {
            "date": "2016-09-19T10:49:28+0000",
            "author": "Alexandre Rafalovitch",
            "content": "The problem with adding docValues to the field is that now the stored=false flag is ignored, because we fetch from docValues. In fact, we already saw users super-confused when that happened with one of the example schemas. ",
            "id": "comment-15503073"
        },
        {
            "date": "2016-09-19T16:41:05+0000",
            "author": "Steve Rowe",
            "content": "I'm going to work on updating the quick start tutorial - it should be kept up-to-date, independently of any changes we may decide on for the data driven configset, ",
            "id": "comment-15503942"
        },
        {
            "date": "2016-09-19T16:53:11+0000",
            "author": "Hoss Man",
            "content": "Possibly to make facets work out of the box? Just guessing.\n\nI'm probably the biggest proponent of \"featuring\" & promoting faceting in solr, and even i think it's absurd for our recomended cofigs to promote faceting at the expense of basic (tokenized) field search.\n\nHee's my off the cuff, un tested, straw man suggestion, that seems like it would be 100x better then what we have now...\n\n\n\tchange defaultFieldType back to text_general\n\tadd this to the processor chain, after AddSchemaFieldsUpdateProcessorFactory...\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n <lst name=\"source\">\n  <str name=\"typeClass\">solr.TextField</str>\n  <lst name=\"exclude\">\n   <!-- large text fieds you don't want for sorting or faceting can be excluded here -->\n  </lst>\n </lst>\n <lst name=\"dest\">\n  <str name=\"pattern\">^(.*)$</str>\n  <str name=\"replacement\">$1_str</str>\n </lst>\n</processor>\n\n\n\tAdd <dynamicField name=\"*_str\" type=\"strings\" useDocValuesAsStored=\"false\" indexed=\"true\" stored=\"false\"/> to the managed-schema\n\t?? Add stored=\"true\" to text_general ??\n\t\n\t\tAll the existing fields/dynamicFields using this type set it explicitly to either true/false, but i think if we want to use it as the defaultFieldType we're going to want to set it to true on the fieldType itself so any fields added by AddSchemaFieldsUpdateProcessorFactory have the value stored (so end users can see them in search results)\n\t\n\t\n\n\n\nThis should fix the most egregious problems like what we see with the broken tutorial (folks add a simple \"text\" field containing a \"name\" or a \"title\" and can't search on \"words\" in that text field) while still supporting sorting/faceting on short \"string\" fields by using the _str variant.\n\nI'm assuming this wouldn't break whatever \"auto pick facet\" stuff is in velocity, since i'm pretty sure it works by looking for all the solr.StrField fields, but if it does then that should be fixed as a distinct issue \u2013 we shouldn't be breaking something as basic as \"i want to search for a word in a field\" just because it makes the velocity UI harder to use. ",
            "id": "comment-15503983"
        },
        {
            "date": "2016-09-19T17:37:04+0000",
            "author": "Steve Rowe",
            "content": "+1 to hoss's suggested changes ",
            "id": "comment-15504104"
        },
        {
            "date": "2016-09-20T19:18:54+0000",
            "author": "Steve Rowe",
            "content": "I attached a patch on SOLR-6871 that addresses the per-field search problem - see my comment there for details. ",
            "id": "comment-15507506"
        },
        {
            "date": "2016-10-06T09:37:20+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "This is the approach that ES will take in 5.x too, see https://www.elastic.co/blog/strings-are-dead-long-live-strings\nWhen auto guessing they will index the field, say \"city\" as full-text, and also add a string/keyword copy as \"city.keyword\". This can be changed by modifying mappings.\n\nInstead of the \"exclude\" params, perhaps we should have a way to cutoff the string copy at e.g. 256 chars, I mean, when would you need longer facet values?\n\nAlso, it is unfortunate to split your \"schema\" across the schema file and a solrconfig URP. Take the example where you want to use data driven schema, but want to lock a few key fields up front by issuing add-field commands. With Hoss' suggestion this would work fine if you lock e.g. <field name=\"city\" fieldType=\"string\" />, but what if you want to force it into e.g. a Norwegian text with <field name=\"city\" fieldType=\"text_no\" />. Then the CloneFieldUpdateProcessorFactory would still run, creating the city_str copy. That would be confusing.\n\nSo I'm thinking if it would be best to bake this feature more integrated with AddSchemaFieldsUpdateProcessorFactory, so that when an unknown field name with String content comes in, we create a text_general field for it, but we also create a copyFIeld in the schema for it, e.g. <copyField source=\"city\" dest=\"city_txt\" cutoff=\"256\"/>. This means we'd add a cutoff feature to today's copyFIeld, but we have the rest of what we need. Sample UPF:\n\n\n    <processor class=\"solr.AddSchemaFieldsUpdateProcessorFactory\">\n      <str name=\"defaultFieldType\">text_general</str>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.String</str>\n        <str name=\"fieldType\">text_general</str>\n        <lst name=\"copyField\">\n          <str name=\"pattern\">^(.*)$</str>\n          <str name=\"replacement\">$1_str</str>\n          <int name=\"cutoff\">256</int>\n        </lst>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.Boolean</str>\n        <str name=\"fieldType\">booleans</str>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.util.Date</str>\n        <str name=\"fieldType\">tdates</str>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.Long</str>\n        <str name=\"valueClass\">java.lang.Integer</str>\n        <str name=\"fieldType\">tlongs</str>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.Number</str>\n        <str name=\"fieldType\">tdoubles</str>\n      </lst>\n    </processor>\n\n\n\nThe result will be that users can configure fields up-front without our logic messing it up, and they can also change ONLY the schema later if they wish to remove the copyFIeld again. Then our defaults would not mess it up either. Users will only need to relate the the schema API! ",
            "id": "comment-15551468"
        },
        {
            "date": "2016-10-06T11:08:14+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Actually copyField already has a limiting parameter, it is called maxChars. So, we just need to generate the instruction. And I don't think we have a lot of flexibility on original field name (unless we support multiple matches and multiple ways to generate copyField), so we probably don't need to match it in anyway. We just need to indicate the target field construction pattern, which will need to be materialized if we are creating a separate copyField for each original field.\n\nSo it would look something like this:\n\n<lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.String</str>\n        <str name=\"fieldType\">text_general</str>\n        <lst name=\"copyField\">\n          <str name=\"dest\">*_ss</str>\n          <int name=\"maxChars\">256</int>\n        </lst>\n</lst>\n\n\n\nAnd for a field \"xyz\" it would generate:\n\n<copyField source=\"xyz\" dest=\"xyz_ss\" maxChars=\"256\"/>\n\n\n\nHoss' proposal is nicer in that it is more flexible (we could put any URP sequence there) and we could generate different matching patterns. But as already mentioned, doing the URP-side copying is a bit more challenging. Especially since CloneField URP does not actually inherit FieldMutating URP (perhaps it should). And what happens if people want to remove the schemaless mode when going into production, will this suddenly break the setup and content stops flowing from text field to the string?\n\n(Edit) field has to be _ss because - I assume - we are generating a copyField to a dynamicField that has to be strings *multiValued=true\". Unless we are generating individual \"xyz_str\" fields as well, in which case, perhaps the syntax should not look like copyField at all as we are generating 3 instructions instead of 1 before. ",
            "id": "comment-15551641"
        },
        {
            "date": "2016-10-06T15:10:52+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "In Hoss' proposal above, he suggests the following:\nAdd <dynamicField name=\"*_str\" type=\"strings\" useDocValuesAsStored=\"false\" indexed=\"true\" stored=\"false\"/> to the managed-schema...\nSo that dynField will already exist. And since this will be a feature that will need to be explained in tutorials etc (why to facet on city_str and not city, it is nice if the suffix is meaningful.\n\nHoss Man why did you propose both docValues=true and indexed=true for *_str? ",
            "id": "comment-15552168"
        },
        {
            "date": "2016-10-06T17:06:59+0000",
            "author": "Hoss Man",
            "content": "Hoss Man why did you propose both docValues=true and indexed=true for *_str?\n\nI don't remember concretely, but I'm guessing my thinking was:\n\n\n\t(inherit) docValues=true (from the fieldType) so we get the most efficient faceting\n\tindexed=true so we can get the most efficient filtering\n\tstored=false because this is a redundant copy of another field that's already stored\n\tuseDocValuesAsStored=false for the same reason.\n\n\n\nAlso, it is unfortunate to split your \"schema\" across the schema file and a solrconfig URP. Take the example where you want to use data driven schema, ...\n\nI think he 1st priority should be making the data_driven configs work well for trivial examples and the tutorial - by the time a user starts thinking about explicit fields they wnat, and explicit copy/clones they want, they should be thinking about overridding/eliminating/disabling all of the \"schemaless\" features anyway. ",
            "id": "comment-15552529"
        },
        {
            "date": "2016-10-07T06:46:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Ok, I tested the add-copy-field approach and it works so far.\nAdded a test case that validates that both fields get created with correct type.\nAttached is a preliminary patch with lots of TODO. So far it lacks support for maxChars cutoff. ",
            "id": "comment-15554306"
        },
        {
            "date": "2016-10-07T14:02:33+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user janhoy opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/91\n\n    SOLR-9526: Next iteration on data driven schema, _str copyField\n\n    Added support for a default typeMapping.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/cominvent/lucene-solr solr9526-datadriven\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/91.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #91\n\n\ncommit e7fad966553b51231c36d8d5368f04caf54083f8\nAuthor: Jan H\u00f8ydahl <janhoy@apache.org>\nDate:   2016-10-07T00:40:36Z\n\n    SOLR-9526: First patch for data-driven string clone, support for default typeMapping, tests pass\n\n ",
            "id": "comment-15555154"
        },
        {
            "date": "2016-10-07T15:15:00+0000",
            "author": "David Smiley",
            "content": "I think he 1st priority should be making the data_driven configs work well for trivial examples and the tutorial - by the time a user starts thinking about explicit fields they wnat, and explicit copy/clones they want, they should be thinking about overridding/eliminating/disabling all of the \"schemaless\" features anyway.\n\n+1 to that! ",
            "id": "comment-15555352"
        },
        {
            "date": "2016-10-09T07:27:13+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Updated patch:\n\n\n\tmaxChars settings now work\n\tSupports multiple copyField per typeMapping\n\tPossible to let one of the defined typeMappings be \"default\" instead of falling back to defaultFieldType. This allows a new field with unknown / mixed-type value-type to use the type and copyField of a mapping\n\tChanged tests to validate that the schema is modified correclty\n\tAdded an actual indexing/query test validating that the cutoff works\n\tThe data-driven-config now defaults to text_general instead of string, and for java.lang.String types it adds a *_str copyField with maxChars=256\n\tRemoved useDocValuesAsStored=\"false\" from the dynamicField *_str definition, meaning the *_str copy will be visible in search results (from docValues). Think this is more intuitive for beginners and easier to explain in tutorials\n\tRemoved indexed=\"true\" to save space and simplify things, filtering will still work, if not as efficient?\n\n ",
            "id": "comment-15559487"
        },
        {
            "date": "2017-06-12T21:09:02+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "What do folks think about the approach taken in the patch? I'm thinking about updating it to apply to master. ",
            "id": "comment-16047067"
        },
        {
            "date": "2017-06-20T13:04:37+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user janhoy commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/91\n\n    Pull request updated to current master. Please review. ",
            "id": "comment-16055714"
        },
        {
            "date": "2017-06-21T07:55:52+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch and updated PR https://github.com/apache/lucene-solr/pull/91\n\n\tFixed bug that did not persist copyFields to schema\n\n\n\nSee new NOCOMMIT comments. I was using the ManagedIndexSchema method\n\npublic ManagedIndexSchema addCopyFields(String source, Collection<String> destinations, int maxChars)\n\n\nwhich does not have a persist=true/false argument, so calling it leaves the schema not persisted. Then I could not find a way to explicitly persist it since method\n\nboolean persistManagedSchema(boolean createOnly)\n\n\nwas not public. In this patch I've made it public and done a hacky instanceof check in AddSchemaFieldsUpdateProcessorFactory\n\nif (newSchema instanceof ManagedIndexSchema) {\n  // NOCOMMIT: Hack to avoid persisting schema once after addFields and then once after each copyField\n  ((ManagedIndexSchema)newSchema).persistManagedSchema(false);\n}\n\n\n\nSteve Rowe, you wrote the addCopyFields() method a while ago, is there a cleaner way to make sure schema is persisted after adding a copyField? ",
            "id": "comment-16057121"
        },
        {
            "date": "2017-06-21T08:45:36+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I have recorded a Terminal session recording to show how this patch works, from creating a collection, to adding a doc, inspecting schema and verifying that the string copy is cutoff. Enjoy:\n\n\nAlexandre Rafalovitch Don't you agree that this approach is better than having some field copying being done in URP and some in schema? You can now:\n\n\tCreate a collection\n\tDefine some fields up-front with schema REST API\n\tStart indexing documents and let other fields be guessed, searchable and facetable (_str)\n\tInspect the schema created, and if you're happy you can switch to update.autoCreateFields=false or even copy the schema to another collection\n\tIf you're not happy with some field guessing, you can modify schema with the API, changing type, removing/adding *_str copyField rules etc\n\tYou can even create a typeMapping in the add-unknown-fields-to-the-schema chain that will copy all Integers to a _f float version or any other combination if it makes sense for you \n\n ",
            "id": "comment-16057194"
        },
        {
            "date": "2017-06-29T20:32:47+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Steve Rowe please fill in your wisdom regarding my question above  ",
            "id": "comment-16068936"
        },
        {
            "date": "2017-06-30T18:49:53+0000",
            "author": "Steve Rowe",
            "content": "Steve Rowe please fill in your wisdom regarding my question above \n\nSure, sorry for the delay, I'll investigate today and let you know what I find.  (It's been long enough that I don't remember the situation there.) ",
            "id": "comment-16070570"
        },
        {
            "date": "2017-07-05T14:38:49+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Any luck Steve Rowe? I'd like for this to be in 7.0 from the get go to have a better OOTB experience with field guessing now that _default schema will be even more used. ",
            "id": "comment-16074862"
        },
        {
            "date": "2017-07-05T14:50:31+0000",
            "author": "Anshum Gupta",
            "content": "I think we can get this into 7.0. I'm fine with this as it's an improvement that fixes things. ",
            "id": "comment-16074877"
        },
        {
            "date": "2017-07-05T15:08:46+0000",
            "author": "Steve Rowe",
            "content": "Any luck Steve Rowe? I'd like for this to be in 7.0 from the get go to have a better OOTB experience with field guessing now that _default schema will be even more used.\n\nSorry, didn't look yet, doing so now. ",
            "id": "comment-16074905"
        },
        {
            "date": "2017-07-05T17:32:13+0000",
            "author": "Steve Rowe",
            "content": "Attaching patch brought up to date with master (in particular, collapsing of data_driven_schema_configs and basic_configs into _default) - note that your original patch only modified solrconfig.xml on one of these and managed_schema on the other - I assume you had/have local changes that didn't make it into the patch Jan H\u00f8ydahl?  I made a couple of other changes; details below.\n\n\nSee new NOCOMMIT comments. I was using the ManagedIndexSchema method\n\npublic ManagedIndexSchema addCopyFields(String source, Collection<String> destinations, int maxChars)\n\n\nwhich does not have a persist=true/false argument, so calling it leaves the schema not persisted. Then I could not find a way to explicitly persist it since method\nboolean persistManagedSchema(boolean createOnly)\nwas not public. In this patch I've made it public and done a hacky instanceof check in AddSchemaFieldsUpdateProcessorFactory\n\nif (newSchema instanceof ManagedIndexSchema) {\n  // NOCOMMIT: Hack to avoid persisting schema once after addFields and then once after each copyField\n  ((ManagedIndexSchema)newSchema).persistManagedSchema(false);\n}\n\n\nSteve Rowe, you wrote the addCopyFields() method a while ago, is there a cleaner way to make sure schema is persisted after adding a copyField?\n\nThe design of ManagedIndexSchema's API was in support of the Schema REST API, where each resource was modifiable one at a time; \"bulk\" modifications weren't possible.  In the new bulk schema API, though, the ordinary case involves multiple modifications; in this case, it is counter-productive to persist in the middle of a set of operations.\n\nSOLR-6476 (introducing schema \"bulk\" mode) added the option to not persist the schema after an operation; previously every operation was automatically persisted.  This was added as an option because at the time, bulk and REST modes co-existed.   SOLR-7682 added the ability to specify maxChars for copyField directives, and I intentionally left off the persist option of the new addCopyFields() method, because there was (intentionally) no way to invoke this capability via the (now deprecated) schema REST API, and the bulk schema API didn't need the persist option.\n\nLong story short: I think making persistManagedSchema() public is a natural consequence of the bulk schema API (and in support of bulk operations from other sources, e.g. this issue).  It's just that nobody had gotten around to it yet.  \n\nIn AddSchemaFieldsUpdateProcessorFactory.processAdd() in my patch I removed the instanceof ManagedIndexSchema check wrapping the call to persistManagedSchama(), as well as the NOCOMMIT's, since the check if ( ! cmd.getReq().getSchema().isMutable()) at the beginning of the method already ensures that we're dealing with a ManagedIndexSchema.\n\nI also removed the following typeMapping that was added in your patch from URP chains add-fields-no-run-processor and parse-and-add-fields in solrconfig-add-schema-fields-update-processor-chains.xml - I'm assuming this is a vestige from an earlier concept of removing <defaultTypeMapping>, since these chains have <str name=\"defaultFieldType\">text</str>?  AddSchemaFieldsUpdateProcessorFactoryTest passes with my change:\n\n\n<lst name=\"typeMapping\">\n  <str name=\"valueClass\">java.lang.String</str>\n  <str name=\"fieldType\">text</str>\n</lst>\n\n ",
            "id": "comment-16075116"
        },
        {
            "date": "2017-07-06T08:20:58+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks a lot for the thorough work. I'm attaching another iteration\n\n\tAdded CHANGES.txt entries for \"Upgrading\" and \"New features\" sections. Please review.\n\tRemoved the need for <str name=\"defaultFieldType\">strings</str> when one of the typeMappings has the new tag <bool name=\"default\">true</bool>, also removed this from solrconfigs\n\tUpdated Ref-Guide, mainly schemaless-mode.adoc, to discuss the copyField. There may be other locations, examples etc that also needs update...\n\n\n\nPrecommit passes. Several test failures but that is unrelated as far as I can tell ",
            "id": "comment-16076151"
        },
        {
            "date": "2017-07-06T09:45:22+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch\n\n\tFix test failure TestConfigSetsAPI.testUserAndTestDefaultConfigsetsAreSame\n\n\n\nNow both ant test and ant precommit succeeds on my Mac! Will commit this later today.. We can followup with doc fixes as we come across them. ",
            "id": "comment-16076260"
        },
        {
            "date": "2017-07-06T14:07:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a60ec1b4321b023ec868d77bce71660e5a19ce47 in lucene-solr's branch refs/heads/master from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a60ec1b ]\n\nSOLR-9526: Data driven schema now indexes text field \"foo\" as both \"foo\" (text_general) and as \"foo_str\" (string) to facilitate both search and faceting ",
            "id": "comment-16076551"
        },
        {
            "date": "2017-07-06T14:22:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 451a203f2de8393b69751bf4351896cfc87bd9bd in lucene-solr's branch refs/heads/branch_7x from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=451a203 ]\n\nSOLR-9526: Data driven schema now indexes text field \"foo\" as both \"foo\" (text_general) and as \"foo_str\" (string) to facilitate both search and faceting\n\n(cherry picked from commit a60ec1b) ",
            "id": "comment-16076580"
        },
        {
            "date": "2017-07-06T14:34:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 257883d65c4cc4c366493a6d0cae908fbccaca8f in lucene-solr's branch refs/heads/branch_7_0 from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=257883d ]\n\nSOLR-9526: Data driven schema now indexes text field \"foo\" as both \"foo\" (text_general) and as \"foo_str\" (string) to facilitate both search and faceting\n\n(cherry picked from commit a60ec1b) ",
            "id": "comment-16076610"
        },
        {
            "date": "2017-07-06T14:56:02+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Finally this is done! Thanks to all participants. Will be exciting to see user reactions when they try this in 7.0.\n\nI urge all committers to give it a spin right now and also open new JIRAs for bugs, documentation that is wrong due to this etc. ",
            "id": "comment-16076640"
        },
        {
            "date": "2017-07-06T15:47:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5e7fa4ceee8f31fcf90254e96d1476281faa922b in lucene-solr's branch refs/heads/branch_7_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5e7fa4c ]\n\nSOLR-9526: fix javadocs ",
            "id": "comment-16076775"
        },
        {
            "date": "2017-07-06T15:47:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 20fccd286d207363b154fca61e5aa49824dbf295 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=20fccd2 ]\n\nSOLR-9526: fix javadocs ",
            "id": "comment-16076776"
        },
        {
            "date": "2017-07-06T15:47:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 510608decb5e4ce5b6184d86662af5bd33e1be11 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=510608d ]\n\nSOLR-9526: fix javadocs ",
            "id": "comment-16076777"
        },
        {
            "date": "2017-07-06T15:51:32+0000",
            "author": "Steve Rowe",
            "content": "I brought the AddSchemaFieldsUpdateProcessorFactory javadocs up to date.  \n\nI also looked at all mentions of \"schemaless\" and \"data-driven\" in the ref guide, and didn't find any other places that needed updating. ",
            "id": "comment-16076785"
        },
        {
            "date": "2017-07-06T21:24:26+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks Steve.  ",
            "id": "comment-16077215"
        },
        {
            "date": "2017-09-05T14:36:41+0000",
            "author": "ASF subversion and git services",
            "content": "Commit aff647ecfaf5af3bbeb2363b82821c53c5df7f3d in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aff647e ]\n\nSOLR-9526: Update Ref Guide for schemaless changes ",
            "id": "comment-16153747"
        },
        {
            "date": "2017-09-05T14:37:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1ecc0344ef45571bf8aaf84c8a37e8d18e17a0c2 in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ecc034 ]\n\nSOLR-9526: Update Ref Guide for schemaless changes ",
            "id": "comment-16153749"
        },
        {
            "date": "2017-09-05T14:37:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 562613dc8f7906b5b7c123a6a6ed5726674e09e4 in lucene-solr's branch refs/heads/branch_7_0 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=562613d ]\n\nSOLR-9526: Update Ref Guide for schemaless changes ",
            "id": "comment-16153750"
        },
        {
            "date": "2017-10-17T11:03:44+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close after 7.1.0 release ",
            "id": "comment-16207365"
        }
    ]
}