{
    "id": "SOLR-9068",
    "title": "BadPaddingException when running SSL test using NullSecureRandom",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "In parent issue SOLR-5776, NullSecureRandom was introduced and SSLTestConfig was refactored so that both client & server would use it to prevent blocked threads waiting for entropy.\n\nSince those commits to master & branch_6x, all Solaris jenkins builds got failures at the same spots in TestMiniSolrCloudClusterSSL.testSslAndNoClientAuth - and looking at the logs the root cause appears to be intranode communication failures due to \"javax.crypto.BadPaddingException\"\n\nInitial speculation was that perhaps the Solaris SSL impl has bugs in it's padding code that are tickled when the SecureRandom instance returns long strings of null bytes, but subsequently we got reports of similar, less frequently occuring, bugs on other OSs (see SOLR-9082).",
    "attachments": {
        "SOLR-9068.Lucene-Solr-master-Solaris_558.log": "https://issues.apache.org/jira/secure/attachment/12802255/SOLR-9068.Lucene-Solr-master-Solaris_558.log",
        "SOLR-9068.Lucene-Solr-6.x-Solaris_110.log": "https://issues.apache.org/jira/secure/attachment/12802254/SOLR-9068.Lucene-Solr-6.x-Solaris_110.log",
        "SOLR-9068.patch": "https://issues.apache.org/jira/secure/attachment/12802332/SOLR-9068.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-04T18:21:51+0000",
            "author": "Hoss Man",
            "content": "Attaching Jenkins failure logs...\n\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-master-Solaris/558/consoleText\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-6.x-Solaris/110/consoleText\n\nInteresting bits...\n\n\n   [junit4]   2> 1664862 ERROR (OverseerThreadFactory-5652-thread-2-processing-n:127.0.0.1:55264_solr) [n:127.0.0.1:55264_solr    ] o.a.s.c.OverseerCollectionMessageHandler Error from shard: https://127.0.0.1:55219/solr\n   [junit4]   2> org.apache.solr.client.solrj.SolrServerException: IOException occured when talking to server at: https://127.0.0.1:55219/solr\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:620)\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:259)\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:248)\n   [junit4]   2> \tat org.apache.solr.client.solrj.SolrClient.request(SolrClient.java:1219)\n   [junit4]   2> \tat org.apache.solr.handler.component.HttpShardHandler.lambda$submit$0(HttpShardHandler.java:195)\n   [junit4]   2> \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]   2> \tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n   [junit4]   2> \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]   2> \tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:229)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]   2> \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> Caused by: javax.net.ssl.SSLHandshakeException: Invalid TLS padding data\n   [junit4]   2> \tat sun.security.ssl.Alerts.getSSLException(Alerts.java:192)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1020)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)\n   [junit4]   2> \tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394)\n   [junit4]   2> \tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353)\n   [junit4]   2> \tat org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:134)\n   [junit4]   2> \tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353)\n   [junit4]   2> \tat org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380)\n   [junit4]   2> \tat org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)\n   [junit4]   2> \tat org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)\n   [junit4]   2> \tat org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)\n   [junit4]   2> \tat org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)\n   [junit4]   2> \tat org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)\n   [junit4]   2> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)\n   [junit4]   2> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55)\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:511)\n   [junit4]   2> \t... 11 more\n   [junit4]   2> Caused by: javax.crypto.BadPaddingException: Invalid TLS padding data\n   [junit4]   2> \tat sun.security.ssl.CipherBox.removePadding(CipherBox.java:751)\n   [junit4]   2> \tat sun.security.ssl.CipherBox.decrypt(CipherBox.java:491)\n   [junit4]   2> \tat sun.security.ssl.InputRecord.decrypt(InputRecord.java:172)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1015)\n   [junit4]   2> \t... 27 more\n\n\n\nAnd...\n\n\n   [junit4]   2> 1655925 ERROR (OverseerThreadFactory-3737-thread-2-processing-n:127.0.0.1:34220_solr) [n:127.0.0.1:34220_solr    ] o.a.s.c.OverseerCollectionMessageHandler Error from shard: https://127.0.0.1:43535/solr\n   [junit4]   2> org.apache.solr.client.solrj.SolrServerException: IOException occured when talking to server at: https://127.0.0.1:43535/solr\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:604)\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:259)\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:248)\n   [junit4]   2> \tat org.apache.solr.client.solrj.SolrClient.request(SolrClient.java:1219)\n   [junit4]   2> \tat org.apache.solr.handler.component.HttpShardHandler.lambda$submit$0(HttpShardHandler.java:195)\n   [junit4]   2> \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]   2> \tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n   [junit4]   2> \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]   2> \tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:229)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]   2> \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> Caused by: javax.net.ssl.SSLHandshakeException: Invalid Padding length: 162\n   [junit4]   2> \tat sun.security.ssl.Alerts.getSSLException(Alerts.java:192)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1020)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)\n   [junit4]   2> \tat org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:543)\n   [junit4]   2> \tat org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:409)\n   [junit4]   2> \tat org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:177)\n   [junit4]   2> \tat org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:304)\n   [junit4]   2> \tat org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:611)\n   [junit4]   2> \tat org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:446)\n   [junit4]   2> \tat org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:882)\n   [junit4]   2> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)\n   [junit4]   2> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107)\n   [junit4]   2> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55)\n   [junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:495)\n   [junit4]   2> \t... 11 more\n   [junit4]   2> Caused by: javax.crypto.BadPaddingException: Invalid Padding length: 162\n   [junit4]   2> \tat sun.security.ssl.CipherBox.removePadding(CipherBox.java:743)\n   [junit4]   2> \tat sun.security.ssl.CipherBox.decrypt(CipherBox.java:491)\n   [junit4]   2> \tat sun.security.ssl.InputRecord.decrypt(InputRecord.java:172)\n   [junit4]   2> \tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1015)\n   [junit4]   2> \t... 25 more\n\n ",
            "id": "comment-15271131"
        },
        {
            "date": "2016-05-05T01:26:14+0000",
            "author": "Hoss Man",
            "content": "on the theory that the Solaris SSL impl has bugs when the SecureRandom returns nothing but NUL bytes, I drafted this patch to always fill any byte[] with Byte.MAX_VALUE.\n\nI'm not seeing any measurably slowdown when using this patch, but obviously it isn'\n\nUwe Schindler: I'd love to know if you can (semi-)reliably reproduce the failures your jenkins machines were getting on your Solaris box, and if this patch fixes those bugs.\n\n(I'm not seeing any measurably slowdown when using this patch, but it obviously involves some extra cycles, so it's not really worth committing unless it solves the problem)\n ",
            "id": "comment-15271762"
        },
        {
            "date": "2016-05-05T07:58:18+0000",
            "author": "Uwe Schindler",
            "content": "I can try this out. I will aply the patch and \"ant beast\" one of the tests. I will report here. If this prooves to be the right thing, we should maybe open a bug report at Oracle.\n\nIf this works I see not problem with the patch, because it is used during tests only. Right? ",
            "id": "comment-15272043"
        },
        {
            "date": "2016-05-05T17:04:00+0000",
            "author": "Uwe Schindler",
            "content": "Hi Hoss,\n\nunfortunately, your patch did not change anything. I ran it with and without, in both cases it always failed on first time when beasting or running standalone.\nMaybe we should open a bug report at Oracle and for now disable the tests with assumeFalse(Constants.SUN_OS).\n\nIf you like a can give you an account on the Solaris machine to try yourself (keep in mind, it has neither GIT nor ANT installed, totally blank - all is provided by Jenkins). ",
            "id": "comment-15272638"
        },
        {
            "date": "2016-05-05T18:56:25+0000",
            "author": "Hoss Man",
            "content": "\nIf this works I see not problem with the patch, because it is used during tests only. Right?\n\nCorrect, this is only a question of what SecureRandom source we use during tests (the idea being to prevent so low entropy jenkins machines from blocking when randomizing SSL testing)\n\n... and for now disable the tests with assumeFalse(Constants.SUN_OS).\n\nWhile this one test in particular seems to always trigger some Padding related problem in the SSLEngine, the underlying problem is something that could affect any SSL test (note that even with this test, the jenkins failures have diff Padding related Exceptions between master and 6x, presumably because some small amount of information in the Solr request/response payload is slightly diff between branches?) ... so if we do ultimately need to have special case logic when Constants.SUN_OS it shouldn't be specific to this test class/method, it should be part of the SSLTestConfig so we don't get confusing failures from any other test that might randomize SSL.\n\nI've uploaded a new quick & dirty patch that uses a java.util.Random inside our NullSecureRandom.\n\nUwe Schindler: can you please try this new patch out?\n\n\n\tIf this patch solves the problem I can come up with a better final fix that includes 2 diff \"mock\" SecureRandom instances and picks which one we use in SSLTestConfig depending on the Constants.SUN_OS.\n\tIf this patch doesn't solve the problem then there is something more fundementally odd going on on Solaris (maybe our custom SecureRandomSpi is tickling some assumption in the JVM?) and I'll give up and just change SSLTestConfig to simply use the platform default SecureRandom on that OS.\n\n\n\nIf you like a can give you an account on the Solaris machine to try yourself (keep in mind, it has neither GIT nor ANT installed, totally blank - all is provided by Jenkins).\n\nNo thank you \u2013 that sounds terrible.  This is/should-be the last patch I'll ask you to manually try on Solaris\n\nMaybe we should open a bug report at Oracle ...\n\nProbably, but from what i've seen you have to deal with in the past, don't have the time or patience to try and deal with their process.  If you want to file one by all means go ahead \u2013 but you might want to wait until we figure out if using java.utilRandom under the covers works as a workarround, or if there is just some fundemental bug when using custom SecureRandom instances.\n\n ",
            "id": "comment-15272846"
        },
        {
            "date": "2016-05-06T20:11:04+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nsorry for the delay: The patch with the answer to the Ultimate Question of Life, the Universe, and Everything looks good. It is currently running using ant beast -Dbeast.iters=100 -Dtestcase=TestMiniSolrCloudClusterSSL (this single test) and no failure up to now (already 8 rounds through).\n\nSo I think this works. Maybe the padding code in the JDK has a bug that it should look random, but not \"all bytes are equal\". Why not use this patch also for non-Solaris? ",
            "id": "comment-15274658"
        },
        {
            "date": "2016-05-06T20:23:41+0000",
            "author": "Uwe Schindler",
            "content": "OK after 20 rounds I would say: new Random(42) WORKS  ",
            "id": "comment-15274669"
        },
        {
            "date": "2016-05-06T21:10:45+0000",
            "author": "Hoss Man",
            "content": "Why not use this patch also for non-Solaris?\n\nWell, as miller put it in the parent issue once: mainly because the goal here is to keep the SSL code as fast as possible since we don't actaully care about the \"correcectness\" of the SSL, we just care that Solr is using SSL and doesn't have any hardcoded http assumptions that break when SSL is enabled.  So if we can avoid wasting CPU cycles on (psuedo)randomness by having a bunch of No-Op methods, then we might as well. ",
            "id": "comment-15274730"
        },
        {
            "date": "2016-05-06T22:32:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7e2f9f506dd3a94c9df0514bf0e22624a8cb0f92 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7e2f9f5 ]\n\nSOLR-9068 / SOLR-5776: Alternate (psuedo random) NullSecureRandom for Constants.SUN_OS\n\n(cherry picked from commit a5586d29b23f7d032e6d8f0cf8758e56b09e0208)\n\nConflicts:\n\tsolr/test-framework/src/java/org/apache/solr/util/SSLTestConfig.java ",
            "id": "comment-15274851"
        },
        {
            "date": "2016-05-06T22:32:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a5586d29b23f7d032e6d8f0cf8758e56b09e0208 in lucene-solr's branch refs/heads/master from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a5586d2 ]\n\nSOLR-9068 / SOLR-5776: Alternate (psuedo random) NullSecureRandom for Constants.SUN_OS ",
            "id": "comment-15274854"
        },
        {
            "date": "2016-05-06T23:31:52+0000",
            "author": "Hoss Man",
            "content": "revised summary & description based on new evidence of this popping up on other operating systems (see SOLR-9082) ... although much less often then on Solaris.\n\nI plan to rollback the conditional logic i added in my last commit and just complely replace \"NullSecureRandom\" with the code Uwe already beasted for me and rename it  \"NotSecurePsuedoRandom\" (since NullSecureRandom as a name really won't apply anymore) ",
            "id": "comment-15274916"
        },
        {
            "date": "2016-05-07T05:57:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7144984e164e10a6ba2a7c89ffa748af1310cc50 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7144984 ]\n\nSOLR-9068 / SOLR-5776: replace NullSecureRandom w/ NotSecurePsuedoRandom\n\n(cherry picked from commit ac0e73a521a66fc37638e884ab386b0173f79b0f) ",
            "id": "comment-15275111"
        },
        {
            "date": "2016-05-07T05:58:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ac0e73a521a66fc37638e884ab386b0173f79b0f in lucene-solr's branch refs/heads/master from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ac0e73a ]\n\nSOLR-9068 / SOLR-5776: replace NullSecureRandom w/ NotSecurePsuedoRandom ",
            "id": "comment-15275113"
        },
        {
            "date": "2016-05-07T08:29:23+0000",
            "author": "Uwe Schindler",
            "content": "Thanks Hoss for fixing!\nThe remaining question is still: why did it sometimes not like the bytes we return? Theoretically, our random could also return all 0-bytes - would it fail then?\nAs a queick fix this looks good, but I would like to understand it!  ",
            "id": "comment-15275155"
        },
        {
            "date": "2016-05-11T00:25:06+0000",
            "author": "Hoss Man",
            "content": "Haven't seen this fail since the the latest fix, so i'm calling this resolved.\n\n\nThe remaining question is still: why did it sometimes not like the bytes we return? Theoretically, our random could also return all 0-bytes - would it fail then? As a queick fix this looks good, but I would like to understand it! \n\nI would like to understand it too, but i don't have the time/patience to deal with trying to figure out how to write a non-solr/non-jetty test case to try and submit to oracle.  If you do have the time feel free to do so and give me all the credit  ",
            "id": "comment-15279297"
        },
        {
            "date": "2016-05-21T19:07:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d866ae79db42c28c99aa7efd58848418b9d2e6a6 in lucene-solr's branch refs/heads/branch_6_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d866ae7 ]\n\nSOLR-9068 / SOLR-5776: Alternate (psuedo random) NullSecureRandom for Constants.SUN_OS\n\n(cherry picked from commit a5586d29b23f7d032e6d8f0cf8758e56b09e0208)\n\nConflicts:\n\tsolr/test-framework/src/java/org/apache/solr/util/SSLTestConfig.java ",
            "id": "comment-15295207"
        },
        {
            "date": "2016-05-21T19:07:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fb9b7dcfbdb1ecf57cb0dfc3d2d722a96b471874 in lucene-solr's branch refs/heads/branch_6_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fb9b7dc ]\n\nSOLR-9068 / SOLR-5776: replace NullSecureRandom w/ NotSecurePsuedoRandom\n\n(cherry picked from commit ac0e73a521a66fc37638e884ab386b0173f79b0f) ",
            "id": "comment-15295209"
        }
    ]
}