{
    "id": "LUCENE-8162",
    "title": "Make it possible to throttle (Tiered)MergePolicy when commit rate is high",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "core/index"
        ],
        "fix_versions": [
            "trunk"
        ]
    },
    "description": "As discussed in a recent mailing list thread [1]\u00a0and observed in a project using Lucene (see\u00a0OAK-5192 and OAK-6710), it is sometimes helpful to throttle the aggressiveness of (Tiered)MergePolicy when commit rate is high.\n\nIn the case of Apache Jackrabbit Oak a dedicated MergePolicy\u00a0was\u00a0implemented\u00a0[2].\n\nThat MP doesn't merge in case the number of segments is below a certain threshold (e.g. 30) and commit rate (docs per sec and MB per sec) is high (e.g. above 1000 doc / sec , 5MB / sec).\n\nIn such impl, the commit rate thresholds adapt to average commit rate by means of single exponential smoothing.\n\nThe results in that specific case looked encouraging as it brought a 5% perf improvement in querying and ~10%\u00a0reduced\u00a0IO. However Oak has some specifics which might not fit\u00a0in other scenarios. Anyway\u00a0it could be interesting to see how this behaves in plain Lucene scenario.\n\n[1] :\u00a0http://markmail.org/message/re3ifmq2664bqfjk\n\n[2] :\u00a0https://github.com/apache/jackrabbit-oak/blob/trunk/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/writer/CommitMitigatingTieredMergePolicy.java",
    "attachments": {
        "LUCENE-8162.0.patch": "https://issues.apache.org/jira/secure/attachment/12925357/LUCENE-8162.0.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16355352",
            "date": "2018-02-07T11:50:53+0000",
            "content": "The class looks like a fork of TMP, but it looks like it could be done instead as a subclass, i.e. calling super.findMerges, but then implementing its logic to return null if it wants to throttle?\u00a0 It would make it easier to see what logic it's changing.\n\nIt seems to use docs/sec, not commit rate, right?\u00a0 So if I index at a high rate but don't commit, the throttling logic can still kick in?\n\nI think the logic is dangerous for general usage: it seems to throttle merges when indexing rate is high?\u00a0 This may work well for Oak usage, as long as sometimes indexing rate falls to a slow rate, but many users index at full speed for a long time and suppressing merges in that case is dangerous. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16355374",
            "date": "2018-02-07T12:23:07+0000",
            "content": "the class in Oak is a fork of TMP, but the one in Lucene would extend TMP (see https://gist.github.com/tteofili/f60bd633557b93be106dc8e806d2b8fa).\n\nthe logic uses doc/sec and mb/sec so you're right that the no. of\u00a0commits is not measured.\nSo if I index at a high rate but don't commit, the throttling logic can still kick in?\nyes ",
            "author": "Tommaso Teofili"
        },
        {
            "id": "comment-16468743",
            "date": "2018-05-09T11:53:17+0000",
            "content": "Michael McCandless\u00a0any suggestions on how to make \"reliable\" tests\u00a0with different merge policies ? Even though this merge policy was designed for a specific use case, I would still be curious to do some experiments on how it behaves in\u00a0a more\u00a0common case (e.g. benchmarking indexing / queries on wikipedia). ",
            "author": "Tommaso Teofili"
        },
        {
            "id": "comment-16492469",
            "date": "2018-05-28T09:57:03+0000",
            "content": "but many users index at full speed for a long time and suppressing merges in that case is dangerous\nyes, that might make search performance degrade. To mitigate that the proposed MP has a maximum number of segments allowed for throttling. So for example if the throttling algorithm makes the number of segments go beyond a configurable threshold (e.g. 20), the throttling algorithm doesn't kick in in the next\u00a0merge and until the number of segments gets back beyond the threshold (by using standard TMP merge algorithm).\n\nI have been trying to use https://github.com/mikemccand/luceneutil\u00a0to make some benchmarks. However it seems\u00a0the tool only creates one index per benchmark, if anyone has suggestions about how to\u00a0benchmark both indexing (time and space) and querying performance that'd be great.\u00a0 ",
            "author": "Tommaso Teofili"
        }
    ]
}