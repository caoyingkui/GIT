{
    "id": "SOLR-11250",
    "title": "Add new LTR model which loads the model definition from the external resource",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "contrib - LTR"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "example of committed change's usage:\n\n{\n  \"class\" : \"org.apache.solr.ltr.model.DefaultWrapperModel\",\n  \"name\" : \"myWrapperModelName\",\n  \"params\" : {\n    \"resource\" : \"models/myModel.json\"\n  }\n}\n\n\n\noriginal summary:\nWe add new model which contains only the location of the external model and loads it during the initialization.\nBy this procedure, large models which are difficult to upload to ZooKeeper can be available.\n\nThe new model works as the wrapper of existing models, and deligates APIs to them.\nWe add two classes by this patch:\n\n\n\tExternalModel : a base class for models with external resources.\n\tURIExternalModel : an implementation of ExternalModel which loads the external model from specified URI (ex. file:, http:, etc.).\n\n\n\nFor example, if you have a model on the local disk \"file:///var/models/myModel.json\", the definition of URIExternalModel will be like the following.\n\n\n{\n  \"class\" : \"org.apache.solr.ltr.model.URIExternalModel\",\n  \"name\" : \"myURIExternalModel\",\n  \"features\" : [],\n  \"params\" : {\n    \"uri\" : \"file:///var/models/myModel.json\"\n  }\n}\n\n\n\nIf you use LTR with model=myURIExternalModel, the model of myModel.json will be used for scoring documents.",
    "attachments": {
        "SOLR-11250.patch": "https://issues.apache.org/jira/secure/attachment/12882440/SOLR-11250.patch",
        "SOLR-11250_master_v2.patch": "https://issues.apache.org/jira/secure/attachment/12882808/SOLR-11250_master_v2.patch",
        "SOLR-11250_master_v3.patch": "https://issues.apache.org/jira/secure/attachment/12884021/SOLR-11250_master_v3.patch",
        "SOLR-11250_master_v4.patch": "https://issues.apache.org/jira/secure/attachment/12886030/SOLR-11250_master_v4.patch",
        "SOLR-11250_master.patch": "https://issues.apache.org/jira/secure/attachment/12882273/SOLR-11250_master.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-17T21:02:43+0000",
            "content": "Yuki Yano - thank you for creating this ticket and the attached patch!\n\nBased on your patch, I'm attaching a revised patch with suggested changes as follows:\n\n\tavoid introducing a dependency whereby solr.ltr.model starts to depend on solr.ltr.store.rest by relocating the 'loadModel' functionality into the ManagedModelStore which is already loading non-external models\n\tpermit but warn about external models wrapping other external models (code change only, not yet adjusted the test)\n\tremoved the need for a dummy feature and norm in ExternalModel (some validate TODOs still left)\n\t(not yet included but would be good to have i think) TestExternalModel.testDeclaredMethodsOverridden similar to TestFilterWeight.testDeclaredMethodsOverridden to test that the ExternalModel class really does delegate all method calls\n\n\n\nWhat do you think? ",
            "author": "Christine Poerschke",
            "id": "comment-16131293"
        },
        {
            "date": "2017-08-18T01:41:15+0000",
            "content": "Christine Poerschke\nThank you for revising the patch! I agree with your proposal and try refactoring codes based on new patch.\n\nBy the way, I'm wandering whether we need to revise getFeatures and getNorms which affect toLTRScoringModelMap. \n\nCurrent implementation only overwrites getParams which tends to grow with large model (ex. large ensemble trees). On the other hand, because it delegates getFeatures and getNorms to wrapped model, we still upload features and norms of the  wrapped model to ZooKeeper. This can be problem when uploading huge linear model which may contain many features.\n\nAs for search engines, I think this is very rare case because extracting many features is too costly. Do you think we need to consider the above case with this patch? ",
            "author": "Yuki Yano",
            "id": "comment-16131583"
        },
        {
            "date": "2017-08-18T19:12:10+0000",
            "content": "... whether we need to revise getFeatures and getNorms which affect toLTRScoringModelMap. ... On the other hand, because it delegates getFeatures and getNorms to wrapped model, we still upload features and norms of the  wrapped model to ZooKeeper. ...\n\nGreat question. I think it's important that what is uploaded to ZooKeeper matches what is in the myExternalModel.json file that was passed to the http://localhost:8983/solr/mycollection/schema/model-store end-point i.e. for the upload to ZooKeeper to include the features and norms of the wrapped model but the params of the myExternalModel.json would be confusing.\n\nIn the ExternalModel.validate() we can ensure that myExternalModel.json contains no features (since there being any would indicate a misconfiguration essentially). And then how about in ManagedModelStore.toLTRScoringModelMap something like this?\n\n\n\u00a0\u00a0final List<Map<String,Object>> features = new ArrayList<>();\n+ if (!model instanceof ExternalModel) {\n\u00a0\u00a0\u00a0 final List<Feature> featuresList = model.getFeatures();\n\u00a0\u00a0\u00a0 final List<Normalizer> normsList = model.getNorms();\n\u00a0\u00a0\u00a0 for (int ii=0; ii<featuresList.size(); ++ii) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n\u00a0\u00a0\u00a0 }\n+ }\n\u00a0\u00a0modelMap.put(FEATURES_KEY, features);\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16133498"
        },
        {
            "date": "2017-08-20T00:02:29+0000",
            "content": "Christine Poerschke\nIt sounds great. I'll integrate proposed codes in new patch and add some tests. ",
            "author": "Yuki Yano",
            "id": "comment-16134267"
        },
        {
            "date": "2017-08-21T03:25:16+0000",
            "content": "Christine Poerschke\nI added new patch named \"SOLR-11250_master_v2.patch\". This patch is based on your patch and also contains the revisions which is mentioned above. ",
            "author": "Yuki Yano",
            "id": "comment-16134668"
        },
        {
            "date": "2017-08-25T15:04:21+0000",
            "content": "Thanks Yuki Yano for attaching the new patch! I haven't had an opportunity to really look at it but wanted to share three non-code related things that crossed my mind, in no particular order:\n\n\n\tNaming of the new class to perhaps be something other than ExternalModel for clarity. To illustrate, given the configuration\n\n{\n  \"class\" : \"org.apache.solr.ltr.model.URIExternalModel\",\n  \"name\" : \"modelZ\",\n  \"features\" : [],\n  \"params\" : {\n    \"uri\" : \"file:///var/models/modelF.json\"\n  }\n}\n\n\nwe have modelZ which is stored inside ZooKeeper but is an instance of class URI External Model and we have modelF which is stored outside ZooKeeper i.e. externally in a file (but it is not an instance of External Model). In the code base there's a Foo/FilterFoo naming pattern e.g. Weight.java/FilterWeight.java but (say) FilterLTRScoringModel may not be particularly clear from a Solr user's perspective. WrapperModel or WrappingModel or something like that might be alternatives. What do you think?\n\n\n\n\n\tThe Solr Reference Guide documentation is now under version control e.g. https://github.com/apache/lucene-solr/blob/releases/lucene-solr/6.6.0/solr/solr-ref-guide/src/learning-to-rank.adoc i.e. changes to it can be included in the same patch as the actual code changes. When we add the documentation let's mention somehow in the Applying Changes section about changes to the modelF.json physical file not taking effect immediately.\n\n\n\n\n\tCustom model format flexibility: one motivation for storing the model definition externally is the difficulty of storing large models in ZooKeeper. Additionally, perhaps as a side effect, given the abstract ExternalModel class and its\n\npublic abstract Map<String, Object> fetchModelMap() throws ModelException;\n\n\nmethod it is now then also possible for custom (external) models to use a non-JSON format potentially e.g.\n\npublic class MyURIExternalModel extends URIExternalModel {\n  ...\n  @Override\n  public Map<String, Object> fetchModelMap() throws ModelException {\n    ...\n  }\n  ...\n}\n\n\ncould use a\n\nclass: org.apache.solr.ltr.model.LinearModel\nname: modelC\nmultipliers:\n  documentRecency: 0.1\n  isBook: 1.0\n  originalScore: 0.5\n\n\nnon-json input file. Custom models are custom models of course but still I think this is a nice side effect of the abstract ExternalModel.fetchModelMap signature \n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16141738"
        },
        {
            "date": "2017-08-28T00:36:52+0000",
            "content": "Christine Poerschke\nThank you for advising the patch!\n\n\nWrapperModel or WrappingModel or something like that might be alternatives. What do you think?\n\nI agree with your opinion. Actually, ExternalModel is likely to cause misunderstanding. I'll change the name of the base class.\n\n\ni.e. changes to it can be included in the same patch as the actual code changes.\n\nThanks for the information. I'll try creating a patch for the document.\n\n\nmethod it is now then also possible for custom (external) models to use a non-JSON format potentially\n\nThat's a great idea! I think it is easy to extend our model to be able to consume non-JSON format (e.g. xml, yaml, etc.) by using proper libraries. I'll try adding parser for these formats and extending the model's parameters to something like below.\n\n\n{\n  \"class\" : \"org.apache.solr.ltr.model.URIExternalModel\",\n  \"name\" : \"modelZ\",\n  \"params\" : {\n    \"format\": \"xml\",\n    \"uri\" : \"file:///var/models/modelF.xml\"\n  }\n}\n\n ",
            "author": "Yuki Yano",
            "id": "comment-16143273"
        },
        {
            "date": "2017-08-28T10:27:24+0000",
            "content": "Christine Poerschke\nI attached new patch (v3) which refactors codes based on your first and third advices (second one is not yet though). Details are as follows:\n\n1. Changed ExternalModel to WrapperModel.\n2. Added ModelParser for parsing model configurations in WrapperModel.\n\nI only implemented ModelParser for json format because I feel some difficulties for other formats:\n\n\n\tXML : because the content of \"params\" is not fixed, we can't distinguish some structures like List and Map only from XML text.\n\tYAML : we need yaml library (e.g., snakeyaml), but I don't know the policy of adding new library in Solr community...\n\n\n\nWell, I think only supporting json is enough for now. If we need new formats, we can add them simply by extending ModelParser. What do you think? ",
            "author": "Yuki Yano",
            "id": "comment-16143604"
        },
        {
            "date": "2017-08-28T14:55:54+0000",
            "content": "Please use SolrResourceLoader.openResource methods to access files so that Solr can check and disallow accessing files outside the instance directory by default. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16143855"
        },
        {
            "date": "2017-08-29T04:46:40+0000",
            "content": "Shalin Shekhar Mangar\nThank you for your comment!\n\nIn my understanding, SolrResourceLoader uses URLClassLoader for loading resources from classpaths and it is difficult to (maybe can't?) load resources from some protocols like http or ftp.\n\nDo you have any idea to load remote resources such that \"http://somewhere:80/mymodel.json\" with SolrResourceLoader or should I restrict the locations of resources inside the instance directory (i.e., users should place these resources inside classpaths before starting Solr)? ",
            "author": "Yuki Yano",
            "id": "comment-16144734"
        },
        {
            "date": "2017-08-31T06:01:53+0000",
            "content": "You are right that SolrResourceLoader cannot load resources from other protocols such as http or ftp. If you do not want to write separate code for using SolrResourceLoader and your custom implementation, you should whitelist the paths to within the instance directory and only allow unsafe paths if the unsafe system property is turned on. See SolrResourceLoader.checkPathIsSafe method. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16148497"
        },
        {
            "date": "2017-08-31T06:42:32+0000",
            "content": "Shalin Shekhar Mangar\nHmm, I need to clear my head. Summarizing the exchange about this issue and also SOLR-11049, my understanding is as belows:\n\n1. Accessing external resources like http or ftp is prohibitted due to security issues.\n2. We can access local resources by SolrResourceLoader if resources are located in instanceDir i.e., solr.home except solr.allow.unsafe.resourceloading is true.\n3. If we need to share resources in SolrCloud, using blob store is recommended.\n\nBy these reasons, if I want to add the model with external resources, I should implement following two models:\n\n1. The model which loads external resources by using SolrResourceLoader (for standalone mode).\n2. The model which loads external resources from BlobRepository (for SolrCloud mode).\n\nIs my understanding correct? ",
            "author": "Yuki Yano",
            "id": "comment-16148527"
        },
        {
            "date": "2017-08-31T07:28:49+0000",
            "content": "Accessing external resources like http or ftp is prohibitted due to security issues\n\nNo, it is not prohibited but it is dangerous. A remote resource is a potential vulnerability so I wouldn't recommend going that way. But if you do decide to go that way, it'd be nice to have a way to whitelist IPs or domains from which such resources can be loaded. I won't veto a patch which loads a remote model but I will be -0 for it if it offers no protections.\n\nBoth #2 and #3 are correct. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16148568"
        },
        {
            "date": "2017-08-31T07:45:26+0000",
            "content": "Shalin Shekhar Mangar\nThank you for your quick reply.\n\nBut if you do decide to go that way, it'd be nice to have a way to whitelist IPs or domains from which such resources can be loaded.\n\nI understood what \"whitelist the paths\" means in your previous comment. Well, for the time being, I think it is better to implement models within Solr's existing policies. I'll try creating wrapper models based on the way I mentioned above (i.e., using SolrResourceLoader and BlobRepository)  ",
            "author": "Yuki Yano",
            "id": "comment-16148587"
        },
        {
            "date": "2017-09-01T09:07:23+0000",
            "content": "Shalin Shekhar Mangar Christine Poerschke]\nI have a question about BlobRepository.\n\nIn my understanding, we need to access CoreContainer#getBlobRepository() to get BlobRepository instance. One possible way is to implement SolrAware and call core.getCoreContainer().getBlobRepository(). However, unfortunately, we don't have a class which is allowed to implement SolrAware (see: SolrResourceLoader#awareCompatibility) in LTR plugins.\n\nI think that adding new SolrAware class like SearchComponent isn't good way because this requires to modify solrconfig.xml  for enabling new component. Do you have any idea to refer BlobRepository in LTR plugin? ",
            "author": "Yuki Yano",
            "id": "comment-16150252"
        },
        {
            "date": "2017-09-08T09:43:49+0000",
            "content": "Add new patch. I modified two points:\n\n1. Use SolrResourceLoader for loading external models.\n2. Add Using large models section to LTR document.\n\nI don't implement `WrapperModel` which uses `blob store` for loading external models due to the reason I mentioned above. ",
            "author": "Yuki Yano",
            "id": "comment-16158396"
        },
        {
            "date": "2017-09-08T15:46:45+0000",
            "content": "Thanks for attaching the new patch! I'll try to take a look over the next week or so. ",
            "author": "Christine Poerschke",
            "id": "comment-16158817"
        },
        {
            "date": "2017-09-12T17:25:49+0000",
            "content": "... Use SolrResourceLoader for loading external models. ...\n\nThe abstract WrapperModel.fetchModelMap method taking a SolrResourceLoader argument but then there also being a concrete SolrResourceWrapperModel class somehow seemed odd to me. So attached revised patch goes back to the no-args fetchModelMap() signature and instead adds a SolrResourceLoader member and setter to the WrapperModel class. What do you think, does that kind of make sense?\n\nThe patch also tentatively renames SolrResourceWrapperModel to DefaultWrapperModel and removes the format parameter in favour of a protected parseInputStream method called by fetchModelMap. In future a (say) YamlWrapperModel class could extend the DefaultWrapperModel and override its parseInputStream method. I've also factored out a protected openInputStream method called by fetchModelMap i.e. custom classes wishing to use something other than the SolrResourceLoader could do so by overriding that method. How does that sound? ",
            "author": "Christine Poerschke",
            "id": "comment-16163315"
        },
        {
            "date": "2017-09-13T06:21:22+0000",
            "content": "Christine Poerschke\nThank you for reviewing my patch!.\n\nThe abstract WrapperModel.fetchModelMap method taking a SolrResourceLoader argument but then there also being a concrete SolrResourceWrapperModel class somehow seemed odd to me.\n\nThis is remains of my trial-and-error...\nAt first, I planed to implement two classes, SolrResourceWrapperModel and BlobStoreWrapperModel. However, I found that using Blob API from LTR plugin was difficult and removed the latter class. Finally, SolrResourceWrapperModel was remained.\nI agree with your change because the name of SolrResourceWrapperModel is now redundant and DefaultWrapperModel is  more clear.\n\nThe patch also tentatively renames SolrResourceWrapperModel to DefaultWrapperModel and removes the format parameter in favour of a protected parseInputStream method called by fetchModelMap. In future a (say) YamlWrapperModel class could extend the DefaultWrapperModel and override its parseInputStream method. I've also factored out a protected openInputStream method called by fetchModelMap i.e. custom classes wishing to use something other than the SolrResourceLoader could do so by overriding that method. How does that sound?\n\nI think your modification is better because new codes are simpler than previous ones and easier to understand.\nOn the other hand, we do not forget that \"how to load resources\" and \"how to parse resources\" are totally independent and separating these codes make it easy to extend in the future because we can reuse classes (This is why I implemented\n ModelParser as another class). However, maybe this separation is a bit much for SOLR-11250 (I think it is better to make new issue for implementing this if necessary). ",
            "author": "Yuki Yano",
            "id": "comment-16164201"
        },
        {
            "date": "2017-11-03T22:36:11+0000",
            "content": "Hello Yuki Yano,\n\nThis week I finally managed to return to this ticket, sorry for the delay.\n\nThe attached patch is rebased against the latest master branch including the SOLR-11603 removal of the LTRScoringModel.hasParams() method. I've also tinkered a little with test code e.g. in TestWrapperModel the testOverwrittenMethods and testDelegateMethods are now linked to ensure good coverage if new methods are added in future and there are small TestWrapperModel.createMockWrappedModel and TestModelManagerPersistence.doWrapperModelPersistenceChecks helper methods factored out to reduce code duplication.\n\nThere's also two functional changes I'd value your opinion on:\n\n\n\tIn the TestWrapperModel class the WrapperModel equals and hashCode methods previously had been excluded from the \"this method must be overridden\" check but I struggled to justify that exclusion to myself and so added overridden WrapperModel equals and hashCode methods. What do you think? We could go back to \"not overridden\" and add the reason (which i could not find) re: why the methods must not be overridden.\n\n\n\n\n\tAgain in the TestWrapperModel class, the fact that the getName method was excluded from the \"this method must be overridden\" check caught my attention. The getName method being excluded from the check but the getFeatureStoreName method not being excluded. Following on from that I wondered, is there a use case where model name and/or feature store name could usefully be different between the wrapper model and the wrapped model?\n\t\n\t\tThe wrapper model itself has no features and so requiring that the wrapper model and the wrapped model configure the same feature store name seems unproblematic from a technical perspective and might help avoid user error e.g. updating the wrapper model feature store name when the wrapped model feature store name should have been updated instead. What do you think?\n\t\tThe wrapped model name being different from the wrapper model name, that is less clear-cut I think. The wrapped model could perhaps be called largeModelDefinition20171103 and be stored in largeExternallyStoredModel.json file and the wrapper model could be called largeExternallyStoredModel and over time the largeExternallyStoredModel.json file content could change e.g. to a different largeModelDefinition20171206 model name. On the other hand, having two different model names raises the question of which name is which and specifically which of the two names should be used in the rq={!ltr rerankModel=... parameter. For the purposes of the rq parameter the applicable model name is of course that of the wrapper model and the model name of the wrapped model is actually not of interest to anyone. What do you think?\n\t\tThe revised patch validates that model name and feature store name match. This adds a little code complexity and also required small changes to the tests.\n\t\n\t\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16238515"
        },
        {
            "date": "2017-11-04T13:22:56+0000",
            "content": "Hi Christine Poerschke,\n\nThank you for revising the patch!\n\nIn the TestWrapperModel class the WrapperModel equals and hashCode methods previously had been excluded from the \"this method must be overridden\" check but I struggled to justify that exclusion to myself and so added overridden WrapperModel equals and hashCode methods. What do you think? We could go back to \"not overridden\" and add the reason (which i could not find) re: why the methods must not be overridden.\n\nActually, both are OK for me. I follow your decision.\nI didn't add overridden equals and hashCode because I thought wrapper model should be same as wrapped model due to its behavior (or, maybe, I just followed the way of other Model classes).\n\nFollowing on from that I wondered, is there a use case where model name and/or feature store name could usefully be different between the wrapper model and the wrapped model?\n\nI think feature store name cannot be different because wrapper model doesn't use own feature store for scoring. Thus, I agree with your modification.\n\nOn the other hand, I think name could be different because the name of wrapper model can be used as the alias of the wrapped model. With the example of largeExternallyStoredModel.json, if we fix the name of wrapper model (like \"prodModel\"), users can always use same rerankModel (i.e, \"prodModel\") even if the version of wrapped model was changed (like \"20171103\" to \"20171206\"). I think this feature is useful because we can avoid the influence of updating models to users (in other words, we can develop front-end and back-end separately). ",
            "author": "Yuki Yano",
            "id": "comment-16239005"
        },
        {
            "date": "2017-11-21T14:10:30+0000",
            "content": "... the name of wrapper model can be used as the alias of the wrapped model. ... if we fix the name of wrapper model (like \"prodModel\"), users can always use same rerankModel (i.e, \"prodModel\") even if the version of wrapped model was changed (like \"20171103\" to \"20171206\"). I think this feature is useful because we can avoid the influence of updating models to users (in other words, we can develop front-end and back-end separately).\n\nThat summarises the wrapper/wrapped model naming choices very nicely, thank you!\n\n(And actually people might even wish to use the wrapper model just in order to get the aliasing effect i.e. the wrapped model need not necessarily be a 'too large for ZooKeeper' model.)\n\nAttaching slightly revised patch:\n\n\treverted the wrapper/wrapped model name restriction as per above\n\tSolr Ref Guide entry:\n\t\n\t\twrapper/wrapped model feature store restriction mentioned and illustrated\n\t\tadded class to the models list/table\n\t\tno-longer-present \"format\" param removed from example\n\t\n\t\n\tsolrconfig-ltr.xml comment updated to match the final DefaultWrapperModel class name\n\trebased against latest master and added assumeWorkingMockito() calls as per SOLR-11606\n\n\n\n\n\nant precommit and tests pass. Does anyone else have any further comments or suggestions here at this point? If not then I think we're good to go here and I'll proceed to commit to master branch sometime next week and then cherry-pick to branch_7x a couple of days later. ",
            "author": "Christine Poerschke",
            "id": "comment-16260773"
        },
        {
            "date": "2017-11-28T15:36:37+0000",
            "content": "Commit 64b3a5bb4b67d4bfee9fa022ce4acd71f3923c4c in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=64b3a5b ]\n\nSOLR-11250: A new DefaultWrapperModel class for loading of large and/or externally stored LTRScoringModel definitions. (Yuki Yano, shalin, Christine Poerschke) ",
            "author": "ASF subversion and git services",
            "id": "comment-16268930"
        },
        {
            "date": "2017-12-01T15:43:39+0000",
            "content": "Commit 1cbe4db460fe4bff2364419e3d9c83fade78ed9c in lucene-solr's branch refs/heads/branch_7x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1cbe4db ]\n\nSOLR-11250: A new DefaultWrapperModel class for loading of large and/or externally stored LTRScoringModel definitions. (Yuki Yano, shalin, Christine Poerschke) ",
            "author": "ASF subversion and git services",
            "id": "comment-16274535"
        },
        {
            "date": "2017-12-01T15:46:18+0000",
            "content": "Thanks Yuki Yano and Shalin Shekhar Mangar! ",
            "author": "Christine Poerschke",
            "id": "comment-16274541"
        }
    ]
}