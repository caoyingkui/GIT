{
    "id": "SOLR-12885",
    "title": "BinaryResponseWriter (javabin format) should directly copy from Bytesref to output",
    "details": {
        "type": "Improvement",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "The format format in which bytes are stored in BytesRef and the javabin string format are both the same. We don't need to convert the string/text fields from\u00a0BytesRef to String and back to UTF8\u00a0\n\nNow a String/Text field is read and written out as follows\n\nluceneindex(UTF8 bytes) --> UTF16 (char[]) --> new String() a copy of UTF16 char[] -->\u00a0 UTF8bytes(javabin format)\n\nThis does not add a new type to javabin. It's encoded as String in the serialized data. When it is deserialized, you get a String back",
    "attachments": {
        "SOLR-12885.patch": "https://issues.apache.org/jira/secure/attachment/12944671/SOLR-12885.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16656364",
            "content": "This is a PoC patch to prove that it works. I haven't done any extensive testing or gone through failure scenarios yet.\n\nI'll get back to it later ",
            "author": "Noble Paul",
            "date": "2018-10-19T07:26:11+0000"
        },
        {
            "id": "comment-16685759",
            "content": "The patch is working with no test failures. I would like to get this in ASAP after some polishing. An extra pair of eyes would really help ",
            "author": "Noble Paul",
            "date": "2018-11-13T21:37:09+0000"
        },
        {
            "id": "comment-16709641",
            "content": "some numbers\n\nTest docs\n 10 docs with 6 String field\n\nTest 1: cache is disabled .\n\n\tEvery query reads from stored fields\n\tEach field creates an appropriate object of string/Utf8CharSequence depending on what is set\n\n\n\nTest 2: cache is enabled .\n\n\tEvery query reads from document cache\n\tOnly serialization performance is tested\n\n\n\n\nTest:1\nTotal queries:  10K\nNO docs from document cache\n------------------------------------------------------------------------\nUsing UTF8 : false\ntime taken : 10890\nTotal Strings created from stored fields : 600000\nTotal UTF8 created from storedfields : 0\nTotal java Strings serialized : 780000\nTotal UTF8 serialized\u00a0 : 0\n\n----------------------------------------------------------------------------\n\nUsing UTF8 : true\nUsing DOC cache : false\ntime taken : 6550\nTotal Strings created from stored fields : 0\nTotal UTF8 created from storedfields : 600000\nTotal java Strings serialized : 180000\nTotal UTF8 serialized\u00a0 : 600000\n\n===============================================\nTest:2\nTotal queries:  10K\nALL docs from document cache\n===============================================\nUsing UTF8 : false\nUsing DOC cache : true\ntime taken : 10335\nTotal Strings created from stored fields : 0\nTotal UTF8 created from storedfields : 0\nTotal java Strings serialized : 180000\nTotal UTF8 serialized\u00a0 : 600000\n\n------------------------------------------------------------------------\nUsing UTF8 : true\nUsing DOC cache : true\ntime taken : 5551\nTotal Strings created from stored fields : 0\nTotal UTF8 created from storedfields : 0\nTotal java Strings serialized : 180000\nTotal UTF8 serialized\u00a0 : 600000\n------------------------------------------------------------------------\n\n ",
            "author": "Noble Paul",
            "date": "2018-12-05T06:02:49+0000"
        },
        {
            "id": "comment-16710773",
            "content": "Updated the numbers after caching the dynamic fields ",
            "author": "Noble Paul",
            "date": "2018-12-06T00:02:44+0000"
        },
        {
            "id": "comment-16710939",
            "content": "I plan to clean this up and commit pretty soon ",
            "author": "Noble Paul",
            "date": "2018-12-06T03:31:24+0000"
        }
    ]
}