{
    "id": "LUCENE-7171",
    "title": "IndexableField changes its IndexableFieldType when the index is re-opened for reading",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.5",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "This code:\n\n\n/* Store one document into an index */\nDirectory index = new RAMDirectory();\nIndexWriterConfig config = new IndexWriterConfig(new StandardAnalyzer());\nIndexWriter w = new IndexWriter(index, config);\n\nDocument d1 = new Document();\nd1.add(new StringField(\"isbn\", \"9900333X\", Field.Store.YES));\nw.addDocument(d1);\nw.commit();\nw.close();\n\n/* inspect IndexableFieldType */\nIndexableField f1 = d1.getField(\"isbn\");\nSystem.err.println(\"FieldType for \" + f1.stringValue() + \" : \" + f1.fieldType());\n\n/* retrieve all documents and inspect IndexableFieldType */\nIndexSearcher s = new IndexSearcher(DirectoryReader.open(index));\nTopDocs td = s.search(new MatchAllDocsQuery(), 1);\n\nfor (ScoreDoc sd : td.scoreDocs) {\n    Document d2 = s.doc(sd.doc);\n    IndexableField f2 = d2.getField(\"isbn\");\n    System.err.println(\"FieldType for \" + f2.stringValue() + \" : \" + f2.fieldType());\n}\n\n\n\nProduces:\n\n\nFieldType for 9900333X : stored,indexed,omitNorms,indexOptions=DOCS\nFieldType for 9900333X : stored,indexed,tokenized,omitNorms,indexOptions=DOCS\n\n\n\nThe StringField field isbn is not tokenized, as correctly reported by the first output, which happens right after closing the writer.\nHowever, it becomes tokenized when the index is re-opened with a new reader.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15224436",
            "author": "Roberto Cornacchia",
            "date": "2016-04-04T16:23:55+0000",
            "content": "I've been pointed at this bit of documentation for IndexReader.document(int dicID):\n\nNOTE: only the content of a field is returned, if that field was stored during indexing. Metadata like boost, omitNorm, IndexOptions, tokenized, etc., are not preserved.\n\nThis explains what I've reported. But I find it hard not to consider this a design flaw. \n\nIf I take the retrieved document and store it into a new index, I would expect this document to be the same as the one stored in the first index. It doesn't matter where it's stored. Those properties are defined for the fields of that document, not for a particular index. \nHowever, if I now try to retrieve that same document from the second index (on the exact match with its isbn), it won't be found, because isbn has been tokenized. This is surely not intended, is it? "
        },
        {
            "id": "comment-15296289",
            "author": "Roberto Cornacchia",
            "date": "2016-05-23T12:13:04+0000",
            "content": "Perhaps I can reformulate this more concisely as:\n\nWhy, in DocumentStoredFieldVisitor, StringField is arbitrarily converted into TextField? What is the point of having them as different classes if they are swapped under the hood?\n\nThis looks like a quick patch to the fact that no textField() method is present in StoredFieldVisitor.\n\n\npublic class DocumentStoredFieldVisitor extends StoredFieldVisitor {\n\n  ...\n\n  @Override\n  public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n    final FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(fieldInfo.hasVectors());\n    ft.setOmitNorms(fieldInfo.omitsNorms());\n    ft.setIndexOptions(fieldInfo.getIndexOptions());\n    doc.add(new Field(fieldInfo.name, new String(value, StandardCharsets.UTF_8), ft));\n  }\n\n "
        },
        {
            "id": "comment-15296595",
            "author": "Michael McCandless",
            "date": "2016-05-23T16:26:46+0000",
            "content": "This is indeed irritating, but it is a long standing issue in Lucene: it does not in fact store all attributes (such as the \"was this field tokenized?\" boolean), which means on loading the document it \"guesses\" (incorrectly in your case).\n\nWe tried to fix this before, in LUCENE-3312, which introduced a different document class (StoredDocument) at search time to make it strongly typed so that it was clear Lucene would not store these attributes.\n\nBut that proved problematic and we eventually reverted the change in LUCENE-6971 and now we are back in the trappy state. "
        }
    ]
}