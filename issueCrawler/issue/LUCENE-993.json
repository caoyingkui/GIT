{
    "id": "LUCENE-993",
    "title": "MultiFieldQueryParser doesn't process search strings containing field references correctly when BooleanClause.Occur.MUST_NOT is used",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser",
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "Below, and attached, is a complete java program illustrating this bug.\n\nIn this program,I have an \"allowed\" field and a \"restricted\" field.  The user is not permitted to search the \"restricted\" field.  However, if the user provides the search string \"allowed:value\", then the MultiFieldQueryParser returns \"allowed:valu -allowed:valu\", which has the effect of finding nothing.\n\nIn the case the user provides a search string containing field references, I would expect the parser to use the field and occur arrays as constraints.  In other words, if a the user mentions a field that has an occur of MUST_NOT, then that field should be elided from the search. At the end of parsing, there must be at least one search term, and all MUST fields must be present.\n\n\nimport org.apache.lucene.queryParser.MultiFieldQueryParser;\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.search.BooleanClause;\nimport org.apache.lucene.analysis.snowball.SnowballAnalyzer;\n\npublic class MultiFieldQueryParserBug {\n  public static void main(String[] argv) {\n    try\n    {\n      System.out.println(MultiFieldQueryParser.parse(\"allowed:value\",\n          new String[]\n{\"allowed\", \"restricted\"}\n,\n          new BooleanClause.Occur[]\n{BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST_NOT}\n,\n          new SnowballAnalyzer(\"English\")));\n      // Output is:\n      // allowed:valu -allowed:valu\n    }\n    catch (ParseException e)\n    {\n      e.printStackTrace();  // generated\n    }\n  }\n}",
    "attachments": {
        "MultiFieldQueryParserBug.java": "https://issues.apache.org/jira/secure/attachment/12365190/MultiFieldQueryParserBug.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-26T09:45:59+0000",
            "content": "That still happens and I agree this is a bug. According to MFQP.parse(), if you pass a query \"q\", some fields and their respective flags, the query will be parsed according to fields and flags. However, if you pass the query \"f:query\", then what happens is that the query is parsed and the flags applied to it, irregardless of what you specified. I think that what should happen is:\n\n\tIf the query is not fielded, then apply the fields + flags as passed in.\n\tOtherwise, only apply the flags of the matching field, or don't apply them at all. E.g., if the query was \"field:value\" and the caller specified a flag for the field \"field\", then apply it, otherwise, leave it as-is.\n\n\n\nThat said though, should MFQP handle more complex queries, such as \"somevalue f1:val f2:val (some OR more OR text)\"?\n\nLeaving it open because for the simple case (one fielded term), MFQP does not work as expected. Either we fix the bug, or document the limitation (e.g., \"don't pass fielded terms to this QP\"). ",
            "author": "Shai Erera",
            "id": "comment-12986930"
        },
        {
            "date": "2013-11-30T13:15:25+0000",
            "content": "2013 Old JIRA cleanup ",
            "author": "Erick Erickson",
            "id": "comment-13835687"
        }
    ]
}