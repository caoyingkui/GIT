{
    "id": "LUCENE-7235",
    "title": "Avoid taking the lock in LRUQueryCache when not necessary",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "LRUQueryCache's CachingWeightWrapper works this way:\n\n\tfirst it looks up the cache to see if there is an entry for the query in the current leaf\n\tif yes, it returns it\n\totherwise it checks whether the query should be cached on this leaf\n\tif yes, it builds a cache entry and returns it\n\totherwise it returns a scorer built from the wrapped weight\n\n\n\nThe potential issue is that this first step always takes the lock, and I have seen a couple cases where indices were small and/or queries were very cheap and this showed up as a bottleneck. On the other hand, we have checks in step 3 that tell the cache to not cache on a particular segment regardless of the query. So I would like to move that part before 1 so that we do not even take the lock in that case.\n\nFor instance right now we require that segments have at least 10k documents and 3% of all docs in the index to be cached. I just looked at a random index that contains 1.7m documents, and only 4 segments out of 29 met this criterion (yet they contain 1.1m documents: 65% of the total index size). So in the case of that index, we would take the lock 7x less often.",
    "attachments": {
        "LUCENE-7235.patch": "https://issues.apache.org/jira/secure/attachment/12799933/LUCENE-7235.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15251584",
            "author": "Adrien Grand",
            "date": "2016-04-21T08:56:29+0000",
            "content": "Here is a patch. It shifts the responsibility to check whether a segment is eligible for caching (regardless of the query) from the caching policy to the cache itself. "
        },
        {
            "id": "comment-15251867",
            "author": "Robert Muir",
            "date": "2016-04-21T13:08:30+0000",
            "content": "+1.\n\nI think we should also consider explicitly disabling the cache in tiny cases like MemoryIndex? "
        },
        {
            "id": "comment-15251898",
            "author": "ASF subversion and git services",
            "date": "2016-04-21T13:32:48+0000",
            "content": "Commit 7639abcd161b1feca01de28b56bec067b750891e in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7639abc ]\n\nLUCENE-7235: Avoid taking the lock in LRUQueryCache when not necessary. "
        },
        {
            "id": "comment-15251899",
            "author": "ASF subversion and git services",
            "date": "2016-04-21T13:32:49+0000",
            "content": "Commit 81446cf34531d46f224beaf6c2bc70bdf53ee585 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81446cf ]\n\nLUCENE-7235: Avoid taking the lock in LRUQueryCache when not necessary. "
        },
        {
            "id": "comment-15252023",
            "author": "Adrien Grand",
            "date": "2016-04-21T15:06:11+0000",
            "content": "I think we should also consider explicitly disabling the cache in tiny cases like MemoryIndex?\n\nI did it in LUCENE-7238. "
        },
        {
            "id": "comment-15277235",
            "author": "Hoss Man",
            "date": "2016-05-09T22:49:30+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}