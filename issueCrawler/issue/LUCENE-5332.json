{
    "id": "LUCENE-5332",
    "title": "SpanNearQuery with multiple terms does not find match",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "A flat structure (non-nested) for a SpanNearQuery containing multiple terms does not always find the correct match.\n\nTest case is attached ...",
    "attachments": {
        "MultiTermFlatSpanNearTest.java": "https://issues.apache.org/jira/secure/attachment/12612421/MultiTermFlatSpanNearTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-07T10:26:25+0000",
            "content": "It's work when slop = 3. ",
            "author": "Cao Manh Dat",
            "id": "comment-13815822"
        },
        {
            "date": "2013-11-07T11:38:45+0000",
            "content": "So is this really a problem or should we close this? ",
            "author": "Erick Erickson",
            "id": "comment-13815861"
        },
        {
            "date": "2013-11-07T15:26:39+0000",
            "content": "it depends on how we interpret the SpanNearQuery. \n   content: a b c d e f g\n   query: b d g\n\nTo me, b  and d have one term in between, so 1 <= 2; d and g have two terms in between, so 2 <= 2. It should match.\n\nBut if you are telling me that the total terms in between are 3, so it should work when slop = 3. That's odd to me.  ",
            "author": "Jerry Zhou",
            "id": "comment-13816047"
        },
        {
            "date": "2013-11-07T19:56:22+0000",
            "content": "I think the problem is actually only in the javadocs of SpanNearQuery that do not state that when it is ordered, it will only match non overlapping Spans, but when it is unordered, overlapping Spans can match.\n\nIn the patch here a non ordered SpanNearQuery is used, and that will allow  two subqueries for \"d\" (for example) to match on the same \"d\" position.\n\nIt might be possible to add an extra boolean parameter to the constructor to allow overlap or not, but that would require some coding and careful testing.\n ",
            "author": "Paul Elschot",
            "id": "comment-13816358"
        },
        {
            "date": "2013-11-08T20:08:20+0000",
            "content": "The attached test case in this ticket does not have overlapping in the query. We just use a simple SpanNearQuery: b d g, and it fails.\n\nThe other issues LUCENE-5331 is about the repeats in nested SpeaNearQuery. ",
            "author": "Jerry Zhou",
            "id": "comment-13817640"
        }
    ]
}