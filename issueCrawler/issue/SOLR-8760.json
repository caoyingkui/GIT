{
    "id": "SOLR-8760",
    "title": "PeerSync replay of ADDs older than ourLowThreshold interacting with DBQs to stall new leadership",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "When we are doing rolling restarts of our Solr servers, we are sometimes hitting painfully long times without a shard leader. What happens is that a new leader is elected, but first needs to fully sync old updates before it assumes the leadership role and accepts new updates. The syncing process is taking unusually long because of an interaction between having one of our hourly garbage collection DBQs in the update logs and the replaying of old ADDs. If there is a single DBQ, and 1000 older ADDs that are getting replayed, then the DBQ is replayed 1000 times, instead of once. This itself may be hard to fix. But, the thing that is easier to fix is that most of the ADDs getting replayed shouldn't need to get replayed in the first place, since they are older than ourLowThreshold.\n\nThe problem can be fixed by eliminating or by modifying the way that the \"completeList\" term is used to effect the PeerSync lists.\n\nWe propose two alternatives to fix this:\n\nFixA: Based on my possibly incomplete understanding of PeerSync, the completeList term should be eliminated. If updates older than ourLowThreshold need to replayed, then aren't all the prerequisities for PeerSync violated and hence we should fall back to SnapPull? (My gut suspects that a later bug fix to PeerSync fixed whatever issue completeList was trying to deal with.)\n\nFixB: The patch that added the completeList term mentions that it is needed for the replay of some DELETEs. Well, if that is true and we do need to replay some DELETEs older than ourLowThreshold, then there is still no need to replay any ADDs older than ourLowThreshold, right??",
    "attachments": {
        "solr-8760-fixB.patch": "https://issues.apache.org/jira/secure/attachment/12790486/solr-8760-fixB.patch",
        "solr-8760-fixA.patch": "https://issues.apache.org/jira/secure/attachment/12790485/solr-8760-fixA.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-02-29T14:25:12+0000",
            "author": "Ramsey Haddad",
            "content": "More details about the conditions leading up to this problem are in: http://mail-archives.apache.org/mod_mbox/lucene-dev/201602.mbox/%3CCAC2x+z3aT7iLeYpOTx3XZrp5qYsKLAAtGm-xTJN1a8ZpxuSmBw@mail.gmail.com%3E ",
            "id": "comment-15171913"
        },
        {
            "date": "2016-03-01T12:37:31+0000",
            "author": "Christine Poerschke",
            "content": "Yonik Seeley and Mark Miller - would you perhaps have any recall on the role of the completeList flag in the PeerSync.java logic?\n\nSOLR-3126 added the flag and 3bbd90ebd552740b82697115409de48650bfe8b4 and e2ebd116a11bc45f528001cf9157a6e69b9553ef are the relevant commits.\n\n\n\nHere's something I tried to help understand the completeList vs. !completeList boolean-ness:\n\n- boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n+ boolean weWantedMoreThanWeGot = otherVersions.size() < nUpdates;\n+ boolean weGotWhatWeNeeded = !weWantedMoreThanWeGot;\n\n- if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n+ // stop only if the supplier of other versions was 'sufficiently informed'\n+ // i.e. we got all the nUpdates versions that we needed and asked for\n+ if (weGotWhatWeNeeded && Math.abs(otherVersion) < ourLowThreshold) break;\n\n\nHowever, why the logic might be to stop/break only if the supplier of the other versions was 'sufficiently informed' eludes me thus far i.e. would the 'otherVersion vs. ourLowThreshold' comparison not be sufficient? ",
            "id": "comment-15173689"
        },
        {
            "date": "2016-08-18T12:01:58+0000",
            "author": "Noble Paul",
            "content": "Yonik Seeley I see the comment \n\n\n// stop when the entries get old enough that reorders may lead us to see updates we don't need\n\n\n\nis it possible to have a reorder if we use the figerprint check? ",
            "id": "comment-15426318"
        },
        {
            "date": "2017-01-10T17:39:29+0000",
            "author": "Christine Poerschke",
            "content": "Tentatively linked as related to SOLR-9941 issue. ",
            "id": "comment-15815617"
        }
    ]
}