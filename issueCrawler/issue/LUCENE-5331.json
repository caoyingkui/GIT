{
    "id": "LUCENE-5331",
    "title": "nested SpanNearQuery with repeating groups does not find match",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Nested spanNear queries do not work in some cases when repeating groups are in the query.\n\nTest case is attached ...",
    "attachments": {
        "NestedSpanNearTest_20160902.patch": "https://issues.apache.org/jira/secure/attachment/12826816/NestedSpanNearTest_20160902.patch",
        "NestedSpanNearTest.java": "https://issues.apache.org/jira/secure/attachment/12612418/NestedSpanNearTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-07T02:20:58+0000",
            "content": "Might be related, but the following does incorrectly have a hit:\n\nString value = \"w x a b c d b c e y z\";\n\nQuery query = createNestedSpanQuery(\"a b c d d b c e\"); ",
            "author": "Tim Allison",
            "id": "comment-13815564"
        },
        {
            "date": "2014-04-22T13:11:46+0000",
            "content": "I've run into what I think is the same problem, I get more hits than expected.\n\nIt makes it much more difficult to craft queries such as:\nfoo within/20 (biz within/100 buz)\nIn my case, the above query returns more hits than the following:\n(foo within/20 biz) AND (foo within/20 buz)\nI would expect the first query to always return fewer results than the second.\n\nNote: I'm using Lucene through ElasticSearch, posting is here: https://groups.google.com/forum/#!topic/elasticsearch/H2-bKVd1Ju0 ",
            "author": "Michael Sander",
            "id": "comment-13976729"
        },
        {
            "date": "2014-04-25T18:23:03+0000",
            "content": "This bug is actually quite important to my app.  I will pay whoever fixes it $500 USD for their efforts or, if they prefer, donate the same to the Lucene or Apache foundations.  Feel free to message me for more details. Offer expires July 2014.\n\nAnd for clarification, I am referring to the bug where a nested span returns more results than two separate spans, identified in my comment above. ",
            "author": "Michael Sander",
            "id": "comment-13981405"
        },
        {
            "date": "2014-04-28T19:13:24+0000",
            "content": "Michael Sander, I was trying to figure out if what you're seeing is the same as the original issue or the one that I raised.\n\nThe example that you posted on the google groups seems to work in pure Lucene both 4.7 and trunk:\n\n\n   private final static String FIELD = \"f\";\n\n   @Test\n   public void testSimpleBizBuz() throws Exception {\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_47);\n      IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_47, analyzer);\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(d, config);\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, \"foo biz buz\", Store.YES));\n      writer.addDocument(doc);\n      \n      doc = new Document();\n      doc.add(new TextField(FIELD, \"foo biz and biz buz\", Store.YES));\n      writer.addDocument(doc);\n      writer.close();\n      \n      SpanQuery foo = new SpanTermQuery(new Term(FIELD, \"foo\"));\n      SpanQuery biz = new SpanTermQuery(new Term(FIELD, \"biz\"));\n      SpanQuery buz = new SpanTermQuery(new Term(FIELD, \"buz\"));\n      \n      SpanQuery bizbuz = new SpanNearQuery(new SpanQuery[]{biz, buz}, 0, false);\n      SpanQuery foobizbuz = new SpanNearQuery(new SpanQuery[]{foo, bizbuz}, 0, false);\n      \n      IndexReader reader = DirectoryReader.open(d);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopScoreDocCollector coll = TopScoreDocCollector.create(100,  true);\n      searcher.search(foobizbuz, coll);\n      ScoreDoc[] scoreDocs = coll.topDocs().scoreDocs;\n      assertEquals(1, scoreDocs.length);      \n   }\n\n\n\nAre you sure the issue that you reported is the same as one of the ones in this issue?  Is the above test case right? ",
            "author": "Tim Allison",
            "id": "comment-13983421"
        },
        {
            "date": "2014-04-28T19:20:31+0000",
            "content": "I will look into this a bit more deeply. ",
            "author": "Michael Sander",
            "id": "comment-13983432"
        },
        {
            "date": "2016-09-02T13:15:59+0000",
            "content": "Updated Jerry Zhou's original test case for trunk.  This still fails with unordered SpanNear (the original test case).  It does not fail with ordered SpanNear. ",
            "author": "Tim Allison",
            "id": "comment-15458500"
        },
        {
            "date": "2016-09-02T13:42:12+0000",
            "content": "This looks like a duplicate of LUCENE-2861.  \n\nCurrently, LUCENE-2861 passes with ordered but fails with unordered. ",
            "author": "Tim Allison",
            "id": "comment-15458559"
        },
        {
            "date": "2016-09-02T13:54:53+0000",
            "content": "This issue still exists in trunk for unordered but not ordered.  This may be a duplicate of LUCENE-5396? ",
            "author": "Tim Allison",
            "id": "comment-15458597"
        },
        {
            "date": "2016-09-05T09:44:32+0000",
            "content": "As LUCENE-2861 the problem is caused by overlappiung matches for d, b, and c and an incomplete backtracking mechanism in unordered SpanQuery. ",
            "author": "Christoph Goller",
            "id": "comment-15464619"
        }
    ]
}