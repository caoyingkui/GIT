{
    "id": "SOLR-10939",
    "title": "JoinQParser gives incorrect results with numeric PointsFields",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "If you try to use the {!join} QParser with numeric points fields, you will get silently incorrect results.\n\nThe underlying root cause seems to be that JoinQParser's JoinQuery assumes every field it's dealing with has indexed terms. (AFAICT it won't even work with indexed=\"false\" docValues=\"true\" Trie fields????)",
    "attachments": {
        "SOLR-10939.patch": "https://issues.apache.org/jira/secure/attachment/12880414/SOLR-10939.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-22T22:29:19+0000",
            "content": "\nAt the lucene level it appears that JoinUtil does support joining on numeric Points fields (w/o DocValues) if the appropriate numeric type is specified \u2013 so it seems like:\n\n\n\tScoreJoinQParser should use the numeric join if the from/to fields are numeric\n\tJoinQParser should behave as if score=None was specified (and delegate to ScoreJoinQParser) if the from/to fields are numeric\n\tin both cases, better error handling should validate that the fields are of the same numeric type.\n\n ",
            "author": "Hoss Man",
            "id": "comment-16060122"
        },
        {
            "date": "2017-06-22T23:06:40+0000",
            "content": "Commit 8d92e08c9c19f478b944ac2d3d4735fc9bb921b0 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8d92e08 ]\n\nSOLR-10939: update @SuppressPointFields on TestJoin to note why points are suppressed\n\nAlso update the annotation on TestCloudJSONFacetJoinDomain since SOLR-9989 is resolved but the join problems\nstill prevent that test from passing with points enabled ",
            "author": "ASF subversion and git services",
            "id": "comment-16060162"
        },
        {
            "date": "2017-07-20T18:06:45+0000",
            "content": "Bulk editing 27 jiras matching the following JQL query to include the \"numeric-tries-to-points label...\n\n\n(issue in linkedIssues(SOLR-10807) OR issue in linkedIssues(SOLR-8396) OR issue in linkedIssues(SOLR-9995)) AND project = SOLR AND status != CLOSED\n\n\n\nthese 27 jiras can be identified by searching for the comment string \"20170720hossbulkeditlabel\"\n\nemail notification is being suppressed. ",
            "author": "Hoss Man",
            "id": "comment-16095108"
        },
        {
            "date": "2017-08-03T03:20:11+0000",
            "content": "FYI, the approach I'm taking on this one is to refactor the graph code so it can be shared with the join code (this pseudo-join is like a single-step graph traversal). ",
            "author": "Yonik Seeley",
            "id": "comment-16112114"
        },
        {
            "date": "2017-08-04T15:10:44+0000",
            "content": "Here's a patch that refactors and reuses the graph points collector for join.\nI also made some changes to the join test:\n1) if Points are selected, then docValues must be enabled (an exception is thrown otherwise)\n2) removed testing joins across incompatible fields (for example matching an int field to a text field won't result in any matches) ",
            "author": "Yonik Seeley",
            "id": "comment-16114487"
        },
        {
            "date": "2017-08-07T16:29:44+0000",
            "content": "Commit bd5c09b1eeb61123f3c799fa6428f2202e6d9356 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bd5c09b ]\n\nSOLR-10939: add point support to join query ",
            "author": "ASF subversion and git services",
            "id": "comment-16116822"
        },
        {
            "date": "2017-08-07T16:30:31+0000",
            "content": "Commit 1f7517d71966a3da4a1dbee202ca01967ebf5434 in lucene-solr's branch refs/heads/branch_7x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1f7517d ]\n\nSOLR-10939: add point support to join query ",
            "author": "ASF subversion and git services",
            "id": "comment-16116823"
        },
        {
            "date": "2017-08-07T16:30:38+0000",
            "content": "Commit d057bf2279412204fc5b5af16e3d8856393f0f30 in lucene-solr's branch refs/heads/branch_7_0 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d057bf2 ]\n\nSOLR-10939: add point support to join query ",
            "author": "ASF subversion and git services",
            "id": "comment-16116824"
        },
        {
            "date": "2017-09-11T16:40:25+0000",
            "content": "@yonik: just noticed that you resolved this issue, but didn't remove the @SuppressPointFields(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-10939\") from the existing test that was affected (TestCloudJSONFacetJoinDomain) ",
            "author": "Hoss Man",
            "id": "comment-16161551"
        },
        {
            "date": "2017-09-22T21:53:17+0000",
            "content": "I was doing some benchmarking of the \"join\" domain switch feature and I discovered something interesting .\n\nEssentially I am doing a 3 level nested facet. Top two levels ask for the top 10 and the third level does a join domain switch . So a 100 joins . \n\nFor a 3M data set in one shard , queries always take ~66 seconds when executing the join domain on a string field.  When executed on a int point field it takes 4/5 seconds. So that's more than a 10x speedup\n\nCurrently how the implementation works is it rewrites the query to a GraphPointsCollector when it's a points field . It uses JoinQParserPlugin#getDocSetEnumerate otherwise. \n\nI'm wondering if we would see similar improvements if we could move non point fields to use GraphTermsCollector instead ? I am posting this comment without investigating if it's even possible. If it is I'll create a separate jira. Any thoughts? ",
            "author": "Varun Thacker",
            "id": "comment-16177213"
        }
    ]
}