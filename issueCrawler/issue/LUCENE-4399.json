{
    "id": "LUCENE-4399",
    "title": "Rename AppendingCodec to Appending40Codec",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "New Feature",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In order AppendingCodec to follow Lucene codecs version, I think its name should include a version number (so that, for example, if we get to releave Lucene 4.3 with a new Lucene43Codec, there will also be a new Appending43Codec).",
    "attachments": {
        "LUCENE-4399.patch": "https://issues.apache.org/jira/secure/attachment/12545722/LUCENE-4399.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-17T14:38:36+0000",
            "content": "I'm not sure of the need for this: we don't need to provide back compat for anything in the codecs/ module, \njust the default codec? ",
            "author": "Robert Muir",
            "id": "comment-13457057"
        },
        {
            "date": "2012-09-17T15:03:05+0000",
            "content": "I wasn't saying i was totally against the idea btw, i was just trying to invite some discussion..., just to explain\nmy rationale:\n\nPersonally I dont think its that great we have version numbers in our default codec, I was the one that proposed this\nbecause its simple on our end as Lucene developers to implement backwards compatibility this way: but it encourages\nsome code duplication and stuff like that: which is in my mind, a lesser evil than conditionals inside one \"mega-impl\"\nlike before, that must handle different binary formats.\n\nAnd i think this is pretty contained to expert users: most people will just create an indexwriter and be oblivious to this.\n\nAs far as alternative things in codecs/, I feel it would be best to not add complication for back-compat, instead to\ntry to keep these implementations simple. If we start adding versioning and back compat to them, then we are basically\nexpanding our backwards compatibility commitments to N versions * M formats, which is something that requires a very\nbig discussion. ",
            "author": "Robert Muir",
            "id": "comment-13457070"
        },
        {
            "date": "2012-09-17T15:53:16+0000",
            "content": "which is in my mind, a lesser evil than conditionals inside one \"mega-impl\" like before\n\nAgreed.\n\nAs far as alternative things in codecs/, I feel it would be best to not add complication for back-compat, instead to try to keep these implementations simple.\n\nI think we should do our best so that backwards-compatiblity issues in lucene-codecs don't happen because of changes in the default Lucene codec or postings format.\n\nFor example, if we release a new Lucene43PostingsFormat, we will either need to create a new Pulsing43PostingsFormat (to maintain backwards compatibility) or just replace the current Pulsing40PostingsFormat with Pulsing43PostingsFormat (if we don't care).\n\nMaybe we could remove Pulsing40PostingsFormat and modify PulsingPostingsFormat so that it:\n\n\twraps the current default postings format by default,\n\twrites the wrapped format name at indexing/merge time,\n\tand then uses it back at read time (similarly to what BloomFilter does).\n\n\n\nThe only modification required if we release a new Lucene43PostingsFormat will be to change the default wrapped postings format.\n\nI think we should be able to do this with AppendingCodec and DirectPostingsFormat too. ",
            "author": "Adrien Grand",
            "id": "comment-13457104"
        },
        {
            "date": "2012-09-17T15:59:22+0000",
            "content": "It would be great to simplify Pulsing the way that you suggest!\n\nBut I have a tough time with it, it doesnt actually wrap any arbitrary postings,\ninstead only ones that extend \"PostingsBaseFormat\" (and this extension is a little confusing,\nany ideas towards refactoring it to be cleaner I think would be helpful).\n\nIf you ask me right now, I don't remember the reason why Pulsing needs such a low-level\ninteraction (versus just working on the higher-level e.g. termsenum apis). ",
            "author": "Robert Muir",
            "id": "comment-13457109"
        },
        {
            "date": "2012-09-18T19:03:57+0000",
            "content": "+1 to fixing any wrapped PostingsFormats to save the name of what they wrapped into the index.\n\nPulsing currently wraps a PostingsBaseFormat because it needs to \"intervene\" on a term by term basis on the communication b/w the terms dict and the postings format it wraps.  It would be really nice if we could wrap a PostingsFormat instead of a PostingsBaseFormat instead ... I'm just not sure how.\n\nSeparately I really don't like the name PostingsBaseFormat   But I can't think of something better ... it's basically the PostingsFormat minus the terms dict. ",
            "author": "Michael McCandless",
            "id": "comment-13458063"
        },
        {
            "date": "2012-09-18T21:31:25+0000",
            "content": "It would be really nice if we could wrap a PostingsFormat instead of a PostingsBaseFormat instead ... I'm just not sure how.\n\nThat would be great. This way we wouldn't need to create a SPI loader for PostingsBaseFormat in order to let Pulsing store/restore the wrapped PostingsBaseFormat.\n\nBut I can't think of something better ... it's basically the PostingsFormat minus the terms dict.\n\nSo maybe it is PostingsFormat that should be renamed (PostingsAndTermsFormat?)  ",
            "author": "Adrien Grand",
            "id": "comment-13458198"
        },
        {
            "date": "2012-09-19T12:30:03+0000",
            "content": "This patch attemps to fix the problem for the Appending codec and the Direct postings format (BloomFilter already serialized the name of its wrapped postings format).\n\nI am not fully satisfied with the way I handle AppendingCodec, suggestions are welcome.\n\nI had a look at Pulsing but this looks complicated (to me at least)... For Pulsing, should we rather:\n\n\tuse a SPI loader for PostingsBaseFormat,\n\tor leave it this way for 4.0?\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13458633"
        },
        {
            "date": "2012-09-19T12:32:24+0000",
            "content": "I dont want to use an SPI loader for postingsbaseformat. \n\ni dont even like postingsbaseformat \n\nSPI is really heavy and we should avoid it, I think we just need to look at how we can refactor\nthis thing so it works the way we want. ",
            "author": "Robert Muir",
            "id": "comment-13458634"
        },
        {
            "date": "2012-09-19T12:37:08+0000",
            "content": "Hmm I'm confused by the changes to AppendingCodec: its not really a codec-wrapper\nits just coded that way.\n\nActually the whole thing is very dependent on the implementation details of the current\nterm dictionary right? thats the only place that currently seeks, where it changes\nthe behavior.\n\nso we have a number of alternatives:\n\n\tAppendingCodec extends Lucene40Codec and returns AppendingPF for every field.\n\tremove AppendingCodec entirely (just move to test-framework), because someone could do the above themselves.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13458643"
        },
        {
            "date": "2012-09-19T12:39:18+0000",
            "content": "I also don't like the .dlg file etc. I think if you want to record the inner codec name\nyou should just read/write a SegmentInfo attribute. ",
            "author": "Robert Muir",
            "id": "comment-13458646"
        },
        {
            "date": "2012-09-19T13:07:35+0000",
            "content": "Thinking about this more, in my opinion it could be overkill for e.g. AppendingPF to do this.\n\nWe should forget about AppendingPF and AppendingCodec and just look at what it really is:\na wrapper around BlockTree.\n\nIn my opinion the easy win here is to ensure that if we change BlockTree, Appending correctly\ngets IndexTooOld/IndexTooNew exceptions. ",
            "author": "Robert Muir",
            "id": "comment-13458667"
        },
        {
            "date": "2012-09-19T13:45:52+0000",
            "content": "AppendingCodec extends Lucene40Codec and returns AppendingPF for every field.\n\nBut I think we would like it to extend Lucene43Codec when we release it and this will break back compat for Appending?\n\nremove AppendingCodec entirely (just move to test-framework), because someone could do the above themselves.\n\nI like this idea better. People who want an appending codec just need to extend the last Lucene4xCodec.getPostingsFormatForField and there will be no back compat issue. Maybe we should just advertise in Lucene4xCodec javadoc that this is how to obtain an appending codec.\n\n+1 for your patch ",
            "author": "Adrien Grand",
            "id": "comment-13458685"
        },
        {
            "date": "2012-09-19T13:50:43+0000",
            "content": "\nI like this idea better. People who want an appending codec just need to extend the last Lucene4xCodec.getPostingsFormatForField and there will be no back compat issue. Maybe we should just advertise in Lucene4xCodec javadoc that this is how to obtain an appending codec.\n\nRight my only hesitation before here was 'exposing our guts' a bit too much. For example, this scheme breaks if in lucene 4.2 \nyou write a fancy new default stored fields format that needs to seek-on-write. \n\nBut I think we shouldnt worry about this: we can just address it as it comes (and if a Codec makes sense then, lets deal with it).\n\nIts like the analysis package, if we implement something as a TokenFilter thats ok. We don't necessarily need to hide ourselves\nby providing an Analyzer too. If we want to make it a Tokenizer later because that makes more sense, then we just do that \n\nOtherwise we will have a lot of delegates and complex code for only theoretical future situations and I think we should avoid this. ",
            "author": "Robert Muir",
            "id": "comment-13458690"
        },
        {
            "date": "2012-09-19T13:51:21+0000",
            "content": "+1 for the patch (correctly detecting format changes & throwing TooNew/Old) and for moving AppendingCodec to test-framework. ",
            "author": "Michael McCandless",
            "id": "comment-13458692"
        },
        {
            "date": "2012-09-21T12:52:15+0000",
            "content": "I think we just need to look at how we can refactor this thing so it works the way we want.\n\nWhat about having a public subclass of PostingsFormat that would enforce the decoupling of fields/terms and postings? Pulsing could only wrap instances of this subclass and would throw an exception when loading the segment if the declared delegate postings format does not extend this class. (Just thinking out loud...) ",
            "author": "Adrien Grand",
            "id": "comment-13460463"
        },
        {
            "date": "2012-09-26T17:19:56+0000",
            "content": "Robert Muir Maybe your last patch could/should be committed to 4.0? ",
            "author": "Adrien Grand",
            "id": "comment-13463960"
        },
        {
            "date": "2012-09-26T18:27:07+0000",
            "content": "I feel like the safety might be a good idea (even though I hate the idea of doing it now).\n\nWould be good to see what anyone else thinks about this.\n\nI don't like that the Codec check is currently \"false sense of security\" if we change BlockTree. ",
            "author": "Robert Muir",
            "id": "comment-13464027"
        },
        {
            "date": "2012-10-04T16:47:52+0000",
            "content": "Updated patch for 4.1:\n\n\tfixes blocktree not to seek on write\n\tchanges are backwards compatible\n\twe can deprecate/remove appending codec, we should just keep its test.\n\n\n\nPersonally I think i like this better. ",
            "author": "Robert Muir",
            "id": "comment-13469500"
        },
        {
            "date": "2012-10-04T20:47:57+0000",
            "content": "\n+        if (indexVersion != version) {\n+          throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n+        }\n\n\n\nIf we force the terms version and the terms index version to be the same, maybe we should merge TERMS_INDEX_VERSION_CURRENT and TERMS_VERSION_CURRENT into a single constant? ",
            "author": "Adrien Grand",
            "id": "comment-13469674"
        },
        {
            "date": "2012-10-04T20:53:03+0000",
            "content": "We dont force them to be the same. But to date they have been, and its currently still the case, so i check it.\n\n in the future its possible we might need to bump something about just the terms index file or whatever. ",
            "author": "Robert Muir",
            "id": "comment-13469680"
        },
        {
            "date": "2012-10-04T21:02:36+0000",
            "content": "If it makes sense to check that the versions of both files are consistent, maybe we should still merge the version numbers into a single one and bump it whenever any of the file formats changes? (similarly to Lucene40StoredFieldsWriter) ",
            "author": "Adrien Grand",
            "id": "comment-13469692"
        },
        {
            "date": "2012-10-04T21:08:16+0000",
            "content": "I dont its a goal to check that they are really consistent? Really we can remove this check.\n\nI think every file should have its own name and version number. If XYZ writer has 10 files, then \nit should have 10 independent codec names and version numbers.\n\nThis was a bug in this stuff before (LUCENE-3621).\n\nFor the stored fields writer i'm not pedantic enough to go fix the fact it shares version numbers,\nbut I'm just saying we really have to always look at this conceptually as a per-file thing.\n\nOtherwise we defeat a lot of the purpose of having a codec header at all (verifying this file really\nis what you think it is, and the version you think it is).  ",
            "author": "Robert Muir",
            "id": "comment-13469700"
        },
        {
            "date": "2012-10-04T21:43:27+0000",
            "content": "I dont its a goal to check that they are really consistent? Really we can remove this check.\n\nI actually started to like it.  Having two different version numbers in the headers of these files would mean that something went really wrong...\n\nThis was a bug in this stuff before (LUCENE-3621).\n\nI agree that codec names should never be shared, but I don't think this is a problem for version numbers.\n\nI started this discussion because I was surprised of the indexVersion == version test, but this is a detail, I think it is nice not to seek when it is not necessary so I am +1 for this patch.\n\nwe can deprecate/remove appending codec, we should just keep its test.\n\n+1 for moving AppendingCodec from lucene-codecs to test-framework too  ",
            "author": "Adrien Grand",
            "id": "comment-13469749"
        },
        {
            "date": "2012-10-04T21:48:11+0000",
            "content": "\nI started this discussion because I was surprised of the indexVersion == version test, but this is a detail, I think it is nice not to seek when it is not necessary so I am +1 for this patch.\n\nYeah, its a little funky, because of how there is only \"one\" seekDir, and this is protected so Appending can subclass it (we can remove this when Appending goes away).\n\nSo that one seekDir (used for both files) needs to know what should happen: I suppose it could be 'boolean append' or something to be more clear.\n\nI didnt want to have an assert though, or it might invoke Uwe's wrath! ",
            "author": "Robert Muir",
            "id": "comment-13469757"
        },
        {
            "date": "2012-10-05T00:54:21+0000",
            "content": "A more thorough patch for trunk. (Needs javadocs and minor cleanups etc etc, but all backwards compat and such).\n\nI would deprecate this stuff in branch_4x still.\n\nI would also, in branch_4x, include my original fix on this issue for not including blocktree's versioning. this itself can also be backwards compat (its just an if statement). ",
            "author": "Robert Muir",
            "id": "comment-13469932"
        },
        {
            "date": "2012-10-05T16:23:51+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13470431"
        },
        {
            "date": "2012-10-08T13:44:48+0000",
            "content": "updated patch (just docs-only). If the .tip part looks confusing, its just because the current doc for the terms index format was missing any mention of DirOffset. ",
            "author": "Robert Muir",
            "id": "comment-13471542"
        },
        {
            "date": "2012-10-09T02:29:25+0000",
            "content": "Any other opinions on this patch? ",
            "author": "Robert Muir",
            "id": "comment-13472081"
        },
        {
            "date": "2012-10-09T08:56:31+0000",
            "content": "+1 Maybe we should add a note in Lucene40Codec docs saying that this codec works on append-only file-systems? ",
            "author": "Adrien Grand",
            "id": "comment-13472226"
        },
        {
            "date": "2012-10-09T10:44:37+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13472265"
        },
        {
            "date": "2013-03-22T16:27:49+0000",
            "content": "[branch_4x commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1396049\n\nLUCENE-4399: Deprecate AppendingCodec ",
            "author": "Commit Tag Bot",
            "id": "comment-13610698"
        },
        {
            "date": "2013-05-10T10:34:06+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654124"
        }
    ]
}