{
    "id": "LUCENE-810",
    "title": "provide a isClosed() method in Searcher class",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "In our project we need to build a searcher pooling system, so a isClosed() method is required for testing if searcher is closed then try to re-open that. we dont want to close IndexReader since it is fixed for a searcher.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-02-22T19:52:07+0000",
            "content": "please consult the java-user mailing list with questions for discussion before opening new bugs/ feature request issues.\n\nIf you don't want an IndexReader to be closed when closing an IndexSearcher, this can be done by using the IndexSearcher(IndexReader) constructor (an IndexSearcher will only close it's IndexReader if it opened it in the first place)\n\nEven if i've missudnerstood your question, and you absolutely need an isClosed() method, this can easily be added by subclassing IndexSearcher in your application...\n\n\n  public MySearcher extends IndexSearcher {\n     /* ... define whatever constructors you want ... */\n     boolean closed = false;\n     public void close() \n{\n        closed=true;\n        super.close();\n     }\n     public isClosed() \n{ return closed; }\n     \n  } ",
            "author": "Hoss Man",
            "id": "comment-12475141"
        }
    ]
}