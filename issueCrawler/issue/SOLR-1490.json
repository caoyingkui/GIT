{
    "id": "SOLR-1490",
    "title": "URLDataSource should be able to handle HTTP authentication",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Right now, there seems to be no way to provide HTTP authentication (username/password) to the URLDataSource. This makes any password-protected data sources inaccessible for indexing. I would try and add support myself, but with all things security-related, I'm fearful of shooting myself in the foot with systems I don't fully understand. Thanks for your time/feedback!",
    "attachments": {
        "SOLR-1490.patch": "https://issues.apache.org/jira/secure/attachment/12421237/SOLR-1490.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Adam Foltzer",
            "id": "comment-12762051",
            "date": "2009-10-04T20:51:59+0000",
            "content": "I decided to go ahead and implement this. First, the new attributes in the dataSource tag:\n\n<dataSource type=\"URLDataSource\" baseUrl=\"http://example.com\" user=\"exampleuser\" password=\"examplepassword\" />\n\nRight now, it naively calls java.net.Authenticator.setDefault for every URLDataSource.getData call. This is so that multiple URLDataSources can each have different sets of credentials. I'm concerned, though, that this could cause some nasty performance and/or concurrency issues.\n\nA possible solution would be to have a single authenticator object as part of the Context. It could match credentials up with requests based on matching baseUrl with java.net.Authenticator.getRequestingURL. This would probably mean baseUrls would have to be unique for any URLDataSource with credential attributes. Thoughts?\n\nHope this helps  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13631197",
            "date": "2013-04-13T21:57:43+0000",
            "content": "SPRING_CLEANING_2013 JIRAS Still valid? "
        },
        {
            "author": "Chantal Ackermann",
            "id": "comment-15754983",
            "date": "2016-12-16T17:12:30+0000",
            "content": "It would be nice if the user info from the URL could be used as done in this code snippet:\n\n\nURL url = new URL(\"http://user:pass@domain.com/url\");\nURLConnection conn = url.openConnection();\n\nString userInfo = url.getUserInfo();\nif (userInfo != null) {\n    Base64.Encoder encoder = Base64.getEncoder();\n    String basicAuth = \"Basic \" + encoder.encodeToString(userInfo.getBytes(UTF_8));\n    conn.setRequestProperty(\"Authorization\", basicAuth);\n} else {\n    throw new RuntimeException(\"No user info detected!\");\n}\n\nInputStream is = conn.getInputStream();\n\n\ninspired from http://stackoverflow.com/a/13122190/621690\n\nThis works for me in a subclass of org.apache.solr.handler.dataimport.URLDataSource.\n\nNote that when fetching via HTTPS, a user agent might have to be set explicitly (at least, that's the case for me) - either programmatically in the DataSource class or via -Dhttp.agent jvm commandline argument. "
        }
    ]
}