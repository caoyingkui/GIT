{
    "id": "SOLR-1393",
    "title": "Allow more control over SearchComponents ordering in SearchHandler",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "It would be useful to be able to add the notion of before/after when declaring search components.  Currently, you can either explicitly declare all components or insert at the beginning or end.  It would be nice to be able to say: this new component comes after the Query component without having to declare all the components.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12872500",
            "date": "2010-05-27T22:06:39+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043825",
            "date": "2011-06-03T16:47:15+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106433",
            "date": "2011-09-16T14:51:05+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234731",
            "date": "2012-03-21T18:09:04+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Vadim Kirilchuk",
            "id": "comment-13621270",
            "date": "2013-04-03T19:58:18+0000",
            "content": "AFAIK apache CXF has similar thing for configuring Interceptors.\n\nhttp://cxf.apache.org/javadoc/latest/org/apache/cxf/phase/PhaseInterceptorChain.html\nThey have class PhaseInterceptorChain.java, where they call\n\npublic void add(Collection<Interceptor<? extends Message>> newhandlers) {\n        add(newhandlers, false);\n}\n\n\nactually they cast newhandlers to PhaseInterceptor later.\n\nAnd if you look at \nhttp://cxf.apache.org/javadoc/latest/org/apache/cxf/phase/PhaseInterceptor.html\nyou will see getBefore() and getAfter() methods exactly like you want.\n\nYou also can find a source code of PhaseInterceptorChain and check method #insertInterceptor(...) which contains tricky inserting logic. Actually they have a little bit more complex logic then just before\\after as they also have a notion of Phase for each interceptor. \n\nAnyway, wdyt about making things like so?\n\nAnother question is how one should configure such components ordering - through xml, or exactly like in CXF - hardcoded in the components:\n\npublic class SoapActionInInterceptor extends AbstractSoapInterceptor {\n\n    public SoapActionInInterceptor() {\n        super(Phase.READ);\n        addAfter(ReadHeadersInterceptor.class.getName());\n        addAfter(EndpointSelectionInterceptor.class.getName());\n    }\n\n    //...\n}\n\n "
        },
        {
            "author": "Vadim Kirilchuk",
            "id": "comment-13653194",
            "date": "2013-05-09T21:02:12+0000",
            "content": "Just tried to implement the stuff exactly like in cxf. The problem is:\nThe PhaseInterceptorChain will not reorder items already in the chain to meet new requirements.\n\nIf i have\n 5 components with names \"0\",\"1\",\"2\",\"3\",\"4\" with following before and after:\n\"0\" must be before \"1\" and \"4\"\n\"1\" must be before \"2\" but after \"0\"\n\"2\" must be before \"4\" but after \"1\"\n\"3\" must be after \"1\" and \"2\"\n\"4\" has no befors or afters\nas you can see the rule is very simple\nn-th element befors can be any from n + 1\nn-th element afters can be any from 0, n\n\nIf you try to add this components in shuffled order: 4, 2, 0, 1, 3\nHere is what you get in the chain step by step\n4\n2, 4\n2, 0, 4\n1, 2, 0, 4\n1, 2, 0, 4, 3\n\nas you can see constraint for \"0\" is broken.\n\nHere is full explanation from cxf commiter:\nSomewhat working as designed. The PhaseInterceptorChain will not reorder items already in the chain to meet new requirements. In step 3 above (adding 0), that resulting order (2, 0, 4) is perfectly valid according to the restraints available at that time. From that point on, nothing would make 0 move from between the 2 and the 4.\n\nGrant Ingersoll\nCould you please clarify what do you want in this JIRA? Usecases, etc.. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13654690",
            "date": "2013-05-10T18:23:06+0000",
            "content": "Marking this as won't fix per discussion on IRC:\n\n\n[11:07] <shalin> vkirilchuk: about SOLR-1393 \u2013 I'm not sure if it's so useful\n[11:08] <vkirilchuk> Yes, me too, so i asked Grant to provide usecases.\n[11:08] <vkirilchuk> But it's an interesting tak itself\n[11:08] <vkirilchuk> tak=task\n[11:09] <shalin> yeah it is useful until you have a couple of such declaration but beyond that even users will have a problem keeping the order in their head\n[11:09] <shalin> better to just write down all the components if you want strict ordering\n[11:09] <@gsingers> That stuff is probably better handled by Guice injection, shalin and vkirilchuk\n[11:10] <vkirilchuk> agree with shalin\n[11:10] <vkirilchuk> solr has no DI, so...\n[11:10] <shalin> gsingers: one day, one day for sure! \n[11:11] <vkirilchuk> Anyway i implemented a draft. You need to reorder all components according to before and after dependencies\n[11:11] <@gsingers> I think when I opened that the main issue had to do w/ right now we only have a way of saying before everything or after everything OR explicitly declare everything\n[11:11] <@gsingers> feel free to close it\n[11:11] <vkirilchuk> and that can be done by using Topological Sorting of Direct Acyclic Graph\n[11:12] <@gsingers> We really need to get Guice going for plugins\n[11:12] <@gsingers> as it would simplify a lot\n[11:12] <vkirilchuk> +1\n[11:15] <vkirilchuk> I am not a commiter so i can't close the issues. Anyway making things with direct acyclic graph is over complex in my opinion.\n[11:16] <vkirilchuk> But with it you can really add constraints like component (after query, before facet, debug)\n[11:17] <vkirilchuk> and it will order your components according to all dependencies between them)\n[11:18] <shalin> yes, we shouldn't add this much complexity. I'll close the issue. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13656274",
            "date": "2013-05-13T19:34:17+0000",
            "content": "Follow up SOLR-4818 "
        }
    ]
}