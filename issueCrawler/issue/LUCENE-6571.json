{
    "id": "LUCENE-6571",
    "title": "Javadoc error when run in private access level",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.2",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Trivial",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Javadoc error when run in private access level.",
    "attachments": {
        "LUCENE-6571.patch": "https://issues.apache.org/jira/secure/attachment/12739827/LUCENE-6571.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14587731",
            "author": "Cao Manh Dat",
            "date": "2015-06-16T09:22:29+0000",
            "content": "Here is patch for this trivial bug. "
        },
        {
            "id": "comment-14655222",
            "author": "Christine Poerschke",
            "date": "2015-08-05T11:32:17+0000",
            "content": "Hi Cao Manh Dat - just applied your patch to my local trunk working copy and then ran ant javadocs -Djavadoc.access=private on it.\n\nSeeing some warnings, will check further, might be due to local setup or so.\n\n\n  [javadoc] /mydirectory/lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java:386: warning - Tag @link: can't find setIndexingChain(IndexingChain) in org.apache.lucene.index.IndexWriterConfig\n  [javadoc] /mydirectory/lucene/core/src/java/org/apache/lucene/util/fst/FST.java:119: warning - Tag @see: can't find shouldExpand(Builder, UnCompiledNode) in org.apache.lucene.util.fst.FST\n  [javadoc] /mydirectory/lucene/core/src/java/org/apache/lucene/util/fst/FST.java:114: warning - Tag @see: can't find shouldExpand(Builder, UnCompiledNode) in org.apache.lucene.util.fst.FST\n  [javadoc] /mydirectory/lucene/core/src/java/org/apache/lucene/util/fst/FST.java:109: warning - Tag @see: can't find shouldExpand(Builder, UnCompiledNode) in org.apache.lucene.util.fst.FST\n\n "
        },
        {
            "id": "comment-14655259",
            "author": "Christine Poerschke",
            "date": "2015-08-05T12:08:02+0000",
            "content": "With respect to the LiveIndexWriterConfig.java:386 warning, we have currently\n\nIndexWriterConfig.java\n\npublic final class IndexWriterConfig extends LiveIndexWriterConfig {\n  ...\n  IndexWriterConfig setIndexingChain(IndexingChain indexingChain) {\n    if (indexingChain == null) {\n      throw new IllegalArgumentException(\"indexingChain must not be null\");\n    }\n    this.indexingChain = indexingChain;\n    return this;\n  }\n\n  @Override\n  IndexingChain getIndexingChain() {\n    return indexingChain;\n  }\n\n\n\nLiveIndexWriterConfig.java\n\npublic class LiveIndexWriterConfig {\n  ...\n  protected volatile IndexingChain indexingChain;\n  /**\n   * Returns the indexing chain set on\n   * {@link IndexWriterConfig#setIndexingChain(IndexingChain)}.\n   */\n  IndexingChain getIndexingChain() {\n    return indexingChain;\n  }\n\n\n\ni.e. @link IndexWriterConfig#setIndexingChain in the base class references a non-public function in the derived class.\n\nI wonder if the @Override getIndexingChain() function in the derived class could be removed and setIndexingChain be relocated to the base class? And might indexingChain be made private instead of protected then also? "
        },
        {
            "id": "comment-14658286",
            "author": "Michael McCandless",
            "date": "2015-08-05T14:27:44+0000",
            "content": "The problem with moving setIndexingChain to LiveIndexWriterConfig is this is not something you can change \"live\" in an IndexWriter: it only takes effect when IW first starts up.\n\nWe could also remove the setter entirely (hardwire IW to DefaultIndexingChain)?  It's already package private, is insanely expert, and devs playing with this are clearly expert enough to modify Lucene's sources to do their experiments. "
        },
        {
            "id": "comment-14658432",
            "author": "Adrien Grand",
            "date": "2015-08-05T15:59:57+0000",
            "content": "We could also remove the setter entirely (hardwire IW to DefaultIndexingChain)? It's already package private, is insanely expert, and devs playing with this are clearly expert enough to modify Lucene's sources to do their experiments.\n\n+1 It is weird to have a pkg-private method being part of our API. "
        },
        {
            "id": "comment-14697234",
            "author": "Christine Poerschke",
            "date": "2015-08-14T15:32:23+0000",
            "content": "Created LUCENE-6738 for removal of the setter and also removal of the overriding getter since it just 'repeats' the base class getter. "
        },
        {
            "id": "comment-14703726",
            "author": "Christine Poerschke",
            "date": "2015-08-19T20:56:21+0000",
            "content": "Removing setIndexingChain via LUCENE-6738 removed the LiveIndexWriterConfig.java:386 warning.\n\nThe FST.java warnings remain\n\nFST.java:119: warning - Tag @see: can't find shouldExpand(Builder, UnCompiledNode) in org.apache.lucene.util.fst.FST\nFST.java:114: warning - Tag @see: can't find shouldExpand(Builder, UnCompiledNode) in org.apache.lucene.util.fst.FST\nFST.java:109: warning - Tag @see: can't find shouldExpand(Builder, UnCompiledNode) in org.apache.lucene.util.fst.FST\n\n\nbut\n\npackage org.apache.lucene.util.fst;\n...\n-import org.apache.lucene.util.fst.Builder.UnCompiledNode;\n...\n-   * @see #shouldExpand(Builder, UnCompiledNode)\n+   * @see #shouldExpand(Builder, Builder.UnCompiledNode)\n...\n    * @see Builder.UnCompiledNode#depth\n    */\n-  private boolean shouldExpand(Builder<T> builder, UnCompiledNode<T> node) {\n+  private boolean shouldExpand(Builder<T> builder, Builder.UnCompiledNode<T> node) {\n...\n\n\nchanges would make the warning go away. "
        },
        {
            "id": "comment-14707279",
            "author": "Michael McCandless",
            "date": "2015-08-21T19:09:23+0000",
            "content": "+1 to the FST fixes!  Thanks Christine Poerschke. "
        },
        {
            "id": "comment-14709935",
            "author": "ASF subversion and git services",
            "date": "2015-08-24T19:43:49+0000",
            "content": "Commit 1697491 from Christine Poerschke in branch 'dev/trunk'\n[ https://svn.apache.org/r1697491 ]\n\nLUCENE-6571: fix some private access level javadoc errors and warnings "
        },
        {
            "id": "comment-14709955",
            "author": "ASF subversion and git services",
            "date": "2015-08-24T19:56:46+0000",
            "content": "Commit 1697496 from Christine Poerschke in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1697496 ]\n\nLUCENE-6571: fix some private access level javadoc errors and warnings (merge in revision 1697491 from trunk) "
        },
        {
            "id": "comment-14709987",
            "author": "Christine Poerschke",
            "date": "2015-08-24T20:18:08+0000",
            "content": "Thanks Cao Manh Dat! "
        },
        {
            "id": "comment-14710004",
            "author": "Christine Poerschke",
            "date": "2015-08-24T20:27:55+0000",
            "content": "For the log, the changes committed above were for trunk and branch_5x but additional residual ant javadocs -Djavadoc.access=private errors remain, for example jflex generated code gives errors such as\n\n... WikipediaTokenizerImpl.java:426: error: bad use of '>'\n/** zzAtEOF == true <=> the scanner is at the EOF */\n                      ^\n\n\n\nOn https://github.com/jflex-de/jflex/issues there is #182 re: doclint but a quick search found no equivalent issue re: javadocs (with private access level). "
        }
    ]
}