{
    "id": "LUCENE-3600",
    "title": "BlockJoinQuery advance fails on an assert in case of a single parent with child segment",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/join"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.5,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The BlockJoinQuery will fail on an assert when advance in called on a segment with a single parent with a child. The call to parentBits.prevSetBit(parentTarget - 1) will cause -1 to be returned, and the assert will fail, though its valid. Just removing the assert fixes the problem, since nextDoc will handle it properly.\n\nAlso, I don't understand the \"assert parentTarget != 0;\", with a comment of each parent must have one child. There isn't really a reason to add this constraint, as far as I can tell..., just call nextDoc in this case, no?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-27T12:19:18+0000",
            "content": "added fixVersion 3.6 & 4.0 ",
            "author": "Simon Willnauer",
            "id": "comment-13157735"
        },
        {
            "date": "2011-11-27T19:25:09+0000",
            "content": "Hmm, the docID passed to BJQ's advance should be from the parent docID space (ie, obtained from a parent-level query you're ANDing with).\n\nI can't get a test case to fail, if indeed the parent has a child doc...\n\nDo you have a case (Query) where a non-parent docID is passed to BJQ.advance?\n\nSeparately, I think you're right: if we change that \"assert parentTarget != 0\" instead to \"if (parentDoc == 0) return nextDoc();\", then BJQ can support parents w/ no children (which can never match, since BJQ does effectively an inner join). ",
            "author": "Michael McCandless",
            "id": "comment-13157972"
        },
        {
            "date": "2011-11-28T08:37:59+0000",
            "content": "Thanks for fixing the parent with no children!. I think there is still a problem with the assert on a single segment with one parent and child. I just took your test case: testAdvanceSingleParentSingleChild and it fails for me with asserts enabled on the \"assert prevParentDoc >= parentDoc;\" (I copied over the code, having problems with Lucene IDEA project config now...).\n\nImagine there is a single parent and single child. Child is docId 0, and parent is docId 1. A filter for the parent is used in conjunction with the child query. The parent filter is used first, and returns docId 1, which then the BlockJoinQuery advance is called. But, because its the first parent, this call: \"final int prevParentDoc = parentBits.prevSetBit(parentTarget - 1);\" will cause -1 to be returned, which will cause this assert: \"assert prevParentDoc >= parentDoc;\" to fail (parentDoc is 0). Just removing the assert fixes the problem. ",
            "author": "Shay Banon",
            "id": "comment-13158285"
        },
        {
            "date": "2011-11-28T19:59:38+0000",
            "content": "Shay, maybe you missed copying over init'ing parentDoc to -1?  (I don't see this assert failing \u2013 \"ant test\" runs w/ asserts). ",
            "author": "Michael McCandless",
            "id": "comment-13158698"
        },
        {
            "date": "2011-11-28T21:31:17+0000",
            "content": "Ahh, I see, missed the change of setting it to -1 for calling nextDoc on parentId 0, cool. ",
            "author": "Shay Banon",
            "id": "comment-13158803"
        }
    ]
}