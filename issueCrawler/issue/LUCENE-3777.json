{
    "id": "LUCENE-3777",
    "title": "trapping overloaded ctors/setters in Field/NumericField/DocValuesField",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In trunk, these apis let you easily create a field, but my concern is this:\n\npublic NumericField(String name, int value)\npublic NumericField(String name, long value)\n..\npublic Field(String name, int value, FieldType type)\npublic Field(String name, long value, FieldType type)\n..\npublic void setValue(int value)\npublic void setValue(long value)\n..\npublic DocValuesField(String name, int value, DocValues.Type docValueType)\npublic DocValuesField(String name, long value, DocValues.Type docValueType)\n\n\n\nI really don't like overloaded ctors/setters where the compiler can type-promote you,\nI think it makes the apis hard to use.\n\nInstead for the setters I think we sohuld have setIntValue, setLongValue, ...\nFor the ctors, I see two other options:\n\n\tfactories like DocValuesField.newIntField()\n\tsubclasses like IntField\n\n\n\nI don't have any patch for this, but I think we should discuss and fix before these apis are released.",
    "attachments": {
        "LUCENE-3777.patch": "https://issues.apache.org/jira/secure/attachment/12514880/LUCENE-3777.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-14T07:25:11+0000",
            "content": "Hi Robert,\n\nthat type overloading was exactly the reason why in 3.x we have setXxxValue(). I don't know what was the intention to change this in trunk, but the type overloading on int/long/float/byte is very trappy. We should change this back to what we had in 3.x!\n\nfactories like DocValuesField.newIntField()\n\nThats how NumericRangeQuery looks like (it's exactly to overcome the problem with type overloading). ",
            "author": "Uwe Schindler",
            "id": "comment-13207556"
        },
        {
            "date": "2012-02-14T07:30:08+0000",
            "content": "The biggest trap is silently creating wrong types that are incompatible with what your index has:\n\nnew NumericField(..., 5L) vs new NumericField(..., 5) is producing something totaly different. Please note the \"L\", forgetting to add this, you suddenly get completely incompatible fields.\n\nThis is unreleaseable! ",
            "author": "Uwe Schindler",
            "id": "comment-13207560"
        },
        {
            "date": "2012-02-14T11:24:23+0000",
            "content": "I agree this is trappy!  Especially because these are sugar APIs... which should especially not be trappy.\n\nI don't know what was the intention to change this in trunk,\n\nThis was my fault: I did this under LUCENE-3453... each of our Field impls (well, Field, NF, DVF) had their own setters to change their value... I consolidated all of these under Field's APIs, which I agree are trappy.\n\nI think we should just break with 3.x here and change Field.setValue(T x) -> Field.setTValue(T x).\n\nI prefer sugar classes (new IntField(7), new IntValueField(7)) instead of static factory methods (NumericField.newIntField(7), DocValuesField.newIntField(7))...\n\nI'll take a crack at this. ",
            "author": "Michael McCandless",
            "id": "comment-13207639"
        },
        {
            "date": "2012-02-14T12:24:06+0000",
            "content": "I prefer sugar classes (new IntField(7), new IntValueField(7)) instead of static factory methods (NumericField.newIntField(7), DocValuesField.newIntField(7))...\n\n+1 to sugar classes.  It gives us strong type safety and the ability to add new classes overtime. ",
            "author": "Chris Male",
            "id": "comment-13207659"
        },
        {
            "date": "2012-02-16T20:54:13+0000",
            "content": "Patch, splitting NF into Int/Long/Float/DoubleField, and changing\nField.setValue(T value) -> Field.setTValue(T value).\n\nTests pass... I'd like to commit this first (big, rote patch, will\nconflict soon) and then do DocValuesField separately... ",
            "author": "Michael McCandless",
            "id": "comment-13209729"
        },
        {
            "date": "2012-02-17T14:30:50+0000",
            "content": "Thanks Mike, such patches go out of date quickly... +1 to commit and remove this part of the trap! ",
            "author": "Robert Muir",
            "id": "comment-13210293"
        },
        {
            "date": "2012-02-17T14:47:14+0000",
            "content": "Thanks Robert, I committed first part... I'll leave this open to work on DocValuesField next. ",
            "author": "Michael McCandless",
            "id": "comment-13210299"
        },
        {
            "date": "2012-05-07T18:41:03+0000",
            "content": "Patch fixing DocValuesField: I broke up DocValuesField into one Field class per type (IntDocValuesField, etc.). ",
            "author": "Michael McCandless",
            "id": "comment-13269863"
        },
        {
            "date": "2012-05-10T11:46:40+0000",
            "content": "I committed under the wrong issue \u2013 see LUCENE-3077 for the commit log. ",
            "author": "Michael McCandless",
            "id": "comment-13272261"
        }
    ]
}