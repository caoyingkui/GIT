{
    "id": "SOLR-2125",
    "title": "Spatial filter is not accurate",
    "details": {
        "affect_versions": "1.5",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "Build"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The calculations of distance appears to be off.\n\nNote: \"The radius of the sphere to be used when calculating distances on a sphere (i.e. haversine). Default is the Earth's mean radius in kilometers (see org.apache.solr.search.function.distance.Constants.EARTH_MEAN_RADIUS_KM) which is set to 3,958.761458084784856. Most applications will not need to set this.\"\n\nThe radius of the earth in KM is  6371.009 km (\u22483958.761 mi).\n\nAlso filtering distance appears to be off - example data:\n\n45.17614,-93.87341 to 44.9369054,-91.3929348 Approx 137 miles Google. 169 miles = 220 kilometers\n\nhttp://....../solr/select?fl=*,score&start=0&rows=10&q=\n{!sfilt%20fl=store_lat_lon}\n&qt=standard&pt=44.9369054,-91.3929348&d=280&sort=dist(2,store,vector(44.9369054,-91.3929348)) asc \n\nNothing shows. d=285 shows results. This is off by a lot.\n\nBill",
    "attachments": {
        "Distance.diff": "https://issues.apache.org/jira/secure/attachment/12455222/Distance.diff",
        "SOLR-2125.patch": "https://issues.apache.org/jira/secure/attachment/12455269/SOLR-2125.patch",
        "solrspatial.xlsx": "https://issues.apache.org/jira/secure/attachment/12455200/solrspatial.xlsx"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12912785",
            "date": "2010-09-21T00:00:01+0000",
            "content": "Just in time Bill!\nI just started looking at spatial stuff today since I'm planning on putting some of it in my Lucene Revolution presentation.  I've seen some tweets about people having difficulties, and I've had some problems when I tried stuff myself.\n\nAnyway, I'm going to try and clean up some of this stuff over the next few days and make the wiki a bit more user oriented - an extra pair of eyeballs would be welcome! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12912799",
            "date": "2010-09-21T01:18:38+0000",
            "content": "Hmmm, well, I just corrected one bug that hard-coded the distance in miles, but it was just a check to see if we crossed the poles.\nI don't think that change alone will fix your issue.\n\nEarlier today, I switched around some fields/field-types in the example schema, so \"store\" is now of latlon type, and it's the only location type (having multiple is just confusing).\n\nSo just looking at the bounding box now, here's the URL from your example:\nhttp://localhost:8983/solr/select?fl=*,score&start=0&rows=10&q=\n{!sfilt%20fl=store}\n&qt=standard&pt=44.9369054,-91.3929348&d=280&debugQuery=true\n\nAnd I can see that the generated bounding box is:\n+store_0_coordinate:[43.129843715965166 TO 46.688683890119314] +store_1_coordinate:[-93.83266208454557 TO -88.79716545231159]\n\nWhich just misses the longitude of the point on the document of -93.87341.\n\nCan anyone point to an webapp for checking arbitrary distances between two lat/lon points? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12912808",
            "date": "2010-09-21T01:44:27+0000",
            "content": "Bill, I found two online distance calculators that both give the distance between the points you provided as 196km.\nhttp://www.movable-type.co.uk/scripts/latlong.html\nhttp://www.es.flinders.edu.au/~mattom/Utilities/distance.html\n\nNow... the distance of 280km you provided should certainly still encompass that, so we still have a bug anyway. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12912820",
            "date": "2010-09-21T03:16:09+0000",
            "content": "Yes there is still a bug.\n\nMost of what I was saying was right. I just did a quick maps.google.com - click directions - and then put the 2 lat,long in both fields.\n\n137 miles = 220.480128 kilometers (Google)\n196.6km using http://www.movable-type.co.uk/scripts/latlong.html \n\nSee on map: http://www.movable-type.co.uk/scripts/latlong-map.html?lat1=45.176140&long1=-93.873410&lat2=44.936905&long2=-91.392935\n\nDistance:\t196.6 km\nInitial bearing:\t096\u00b053\u203244\u2033\nFinal bearing:\t098\u00b039\u203205\u2033\nMidpoint:\t45\u00b003\u203248\u2033N, 092\u00b037\u203250\u2033W\n\nAs the crow flies is less distance (which makes sense).\n\nI even used the JS function on http://www.movable-type.co.uk/scripts/latlong.html:\n\n\nfunction toRad(a) {\n    return (a*Math.PI/180);\n};\n\nfunction hsin(lat1,lon1,lat2,lon2) {\nvar R = 6371; // km\nvar dLat = toRad(lat2-lat1);\nvar dLon = toRad(lon2-lon1); \nvar a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2); \nvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \nvar d = R * c;\nreturn d;\n};\n\n\n\n\nAs a Javascript function - while looping through the results. Since I cannot find a way to output the distance automagically from the XML coming back from SOLR.\n\n\n<script>document.write(hsin(lat,lon,solr.lat,solr.lon));</script>\n\n\n\nI kept playing with d=<km> to see when the filter is not longer showing on the results at while value.\n\n&sort=dist(2,store,vector(44.9369054,-91.3929348)) asc \n\nd=285 shows.\nd=284 does not show.\n\n\n\n "
        },
        {
            "author": "Chris Male",
            "id": "comment-12912822",
            "date": "2010-09-21T03:22:04+0000",
            "content": "The sorting won't be the issue though surely? The bug seems to be in the bounding box generation that Yonik pointed out.  There will be some rounding issues at different places I can imagine, but nothing that would generate such a discrepancy. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12912823",
            "date": "2010-09-21T03:23:17+0000",
            "content": "Distance using the Haversine function is extremely sensitive to what spatial reference system the data was recorded in. WGS84 isn't particular great with long distances. The PostGIS in Action book has a really good explanation of this. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12912827",
            "date": "2010-09-21T03:40:38+0000",
            "content": "Distance using the Haversine function is extremely sensitive to what spatial reference system the data was recorded in. WGS84 isn't particular great with long distances.\n\nI know nothing on this topic, but an error of 45% at 200 km?  I'm pretty certain that there is a bug not having to do with the accuracy of spatial reference systems here. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12912830",
            "date": "2010-09-21T04:01:50+0000",
            "content": "Umm well if you know nothing then how are you pretty sure? And yes, the error bars are fairly high for the Great Circle distance. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12912833",
            "date": "2010-09-21T04:07:13+0000",
            "content": "The calculation using hsin Javascript is more accurate than our algorithm ? Chris a few percentage points maybe - but not 45%.\n\nI will look into it some more tonight. It can't be that complicated.\n\nBill "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12912835",
            "date": "2010-09-21T04:14:01+0000",
            "content": "Hey Bill:\n\nInteresting. usually these types of errors are due to errors in the coordinate reference system of the input data, but if you were able to successfully implement this in JS, then yep, it's likely some bug in the existing Solr implementation rather than the input data.\n\nCheers,\nChris "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12912883",
            "date": "2010-09-21T08:48:46+0000",
            "content": "/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils.java - hsin appears to be okay.\n\nGood print:\n\nSystem.out.println(\"x1 = \" + x1 + \" - \" + x1*180/Math.PI + \",y1 = \" + y1 + \" - \" + x2*180/Math.PI + \",x2 = \" + x2 + \" - \" + x2*180/Math.PI + \",y2 = \" + y2 + \" - \" + y2*180/Math.PI + \",radius = \" + radius + \"\\n\");\n System.out.println(\"result = \" + result + \" km\\n\");\n\nMy guess: \"src/java/org/apache/solr/schema/LatLonType.java\n\n\n\n    double[] ur;\n    double[] ll;\n    if (options.measStr == null || options.measStr.equals(\"hsin\")) {\n      ur = DistanceUtils.latLonCornerDegs(point[LAT], point[LONG], options.distance, null, true, options.radius);\n      ll = DistanceUtils.latLonCornerDegs(point[LAT], point[LONG], options.distance, null, false, options.radius);\n    } else {\n      ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n    }\n\n\n\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12912981",
            "date": "2010-09-21T13:48:13+0000",
            "content": "Hmm, I'm putting in some more exact tests into LatLonType and SpatialFilterTest, trying to work through this.\n\nclearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //one at the upper right of the box, 3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 1, 14);\n    checkHits(fieldName, \"0,0\", 3000, 2, 14, 15);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12912983",
            "date": "2010-09-21T13:53:55+0000",
            "content": "http://....../solr/select?fl=*,score&start=0&rows=10&q={!sfilt%20fl=store_lat_lon}&qt=standard&pt=44.9369054,-91.3929348&d=280&sort=dist(2,store,vector(44.9369054,-91.3929348)) asc \n\nThis URL has me a bit stumped.  sfilt on a lat_lon is going to use Great Circle to calculate the distance, but then you are sorting using Euclidean distance?  Not saying that's a problem, but it strikes me a bit weird. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12912986",
            "date": "2010-09-21T13:59:39+0000",
            "content": "but then you are sorting using Euclidean distance\n\nI imagine it's because of the wiki: http://wiki.apache.org/solr/SpatialSearch\nThe first example uses \"dist\" and I imagine many are going to interpret that as geo distance (I made the same mistake trying to follow the wiki). "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12912990",
            "date": "2010-09-21T14:07:02+0000",
            "content": "Ah, good point, Yonik.  I will fix that. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12912993",
            "date": "2010-09-21T14:10:19+0000",
            "content": "\n if (options.measStr == null || options.measStr.equals(\"hsin\")) {\n      ur = DistanceUtils.latLonCornerDegs(point[LAT], point[LONG], options.distance, null, true, options.radius);\n      ll = DistanceUtils.latLonCornerDegs(point[LAT], point[LONG], options.distance, null, false, options.radius);\n    }\n\n\n\nIt could very well be in the determination of the two corners.  That being said, in the test I just posted, the point 18.71111, 19.79750 is 3000KM away from 0,0 according to movable-type when traveling along a 45 degree bearing and the tests \n\ncheckHits(fieldName, \"0,0\", 3000, 2, 14, 15);\ncheckHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\ncheckHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n\n\nPass for me now that Yonik's patch is applied.  Please check my logic. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12913011",
            "date": "2010-09-21T14:45:00+0000",
            "content": "Ok Grant & I chatted and we figured out what's going wrong.  We were calculating a box the size that would completely fit inside the circle rather than vice-versa.  This was caused by taking the distance and projecting it out to calculate the corners of the box.  But the distance given should really be to the side of the box... and the distance from the center to the corner of the box should be greater (if the box is to completely encompass the circle).\n\nThe fix should be easy - the distance to the corner of the box is sqrt(2) * dist_to_side_of_box.  So internally we just need to multiply the distance by sqrt(2) before finding the corners.\n\nGrant is coding up the fix and tests. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12913035",
            "date": "2010-09-21T15:36:20+0000",
            "content": "More chatting with Grant - sqrt(2) is correct if things are flat, but prob not correct for a bounding box on the surface of a sphere.\nAnother thought is toproject left, right, up, and down to the sides of the box and use those lat ranges and lon ranges directly as the bounding box.\n\nThe crazy thing is that this is basic geo code - isn't there some bounding box calculation code out there we can use or at least reference? "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913126",
            "date": "2010-09-21T17:59:16+0000",
            "content": "Grant: Can you give a good example using the same measurements for sorting and sfilt ?\n\nWill this work? The Spatial Wiki http://wiki.apache.org/solr/SpatialSearch shows:\n\n3.Using the \"frange\" QParser, as in fq=\n{!frange l=0 u=400}\nhsin(0.57, -1.3, lat_rad, lon_rad, 3963.205) \n\nThe Function Wiki Shows:\n\nhsin(radius, true|false, x1,y1,x2,y2)\n\nHere is the correct solution: (UPDATED)\n\n\nhttp://localhost:8983/solr/select/??fl=*,score&start=0&rows=10&q={!sfilt%20fl=store}&qt=standard&pt=44.9369054,-91.3929348&d=285&sort=hsin(6371,true,store,vector(44.9369054,-91.3929348))%20asc\n\n\n\n\nThe Local Solr from Patrick projected the ur, ll using the distance and did a range check to see if the points are in the box.It is a close approximation.  "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913134",
            "date": "2010-09-21T18:07:11+0000",
            "content": "Two good articles:\n\nhttp://janmatuschek.de/LatitudeLongitudeBoundingCoordinates\n\n\tPole and good pictures\n\n\n\nhttp://stackoverflow.com/questions/238260/how-to-calculate-the-bounding-box-for-a-given-lat-lng-location\n\n\tWhy Sphere is only good for 10KM distances.\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12913182",
            "date": "2010-09-21T19:03:31+0000",
            "content": "The Local Solr from Patrick projected the ur, ll using the distance and did a range check to see if the points are in the box.It is a close approximation. An ellipses would be closer. Circle is not close enough.\n\nOK, so I went back to that code and looked and we are doing the same thing (in fact, I based it off of that).  Namely, the only thing that is not working in the code is the interpretation of the results and not the math itself.  To that point, Bill, if you look at the points you gave, it is right on the edge of a box that is centered on that point (roughly, Chippewa Falls, WI), but still outside, of the box that was created by Solr (at 280KM).  I worked this out by viewing the maps at:\n1. http://www.movable-type.co.uk/scripts/latlong-map.html?lat1=44.936905&long1=-91.392935&lat2=43.09&long2=-93.87341\n2. http://www.movable-type.co.uk/scripts/latlong-map.html?lat1=44.936905&long1=-91.392935&lat2=45.17614&long2=-93.87341\n\nThe reason is that we are calculating the box based on the fact that the upper right and lower left corners are 280KM away.  The question is then, is this the intuitive thing app developers expect?  If app developers think in terms of a radius of distance 280km and all points inside, then no, it isn't.  But if they think in terms of the upper and lower box corners with no suggestion of \"radius\", hence implying a circle then it does.  \n\nSo, one fix for this could solely be a documentation fix.  The other fix is to change the reasoning above to simply find the north, south, east, west points of a box that transcribes a radius of the distance given (since most users tend to think in terms of radius from where they are located and not upper and lower box corners.  This will create a box that encloses said radius completely and might give a slight bit more fuzz up near the box corners due to curvature, but that should be fine.  I'm working on a patch for this fix, as I think it is the better way.\n "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913244",
            "date": "2010-09-21T20:52:50+0000",
            "content": "OK so that makes sense. Youa re using distance at 45 degrees. So the east-west would not extend far enough.\n\nUsing http://en.wikipedia.org/wiki/Pythagorean_theorem would help on the east-west case, but circle or ellipses is MUCH better.\n\nAlthough extending the 45 degree out would be a conservative estimate. And since we usually sort by distance asc, those extra points would be in the result set but at the end of the list. (this is an improvement - again not at good as ellipses).\n\nYou need a quick function that tells you \"is this lat,long in the circle / ellipses or not\". A range [X to Y] will not get you that. You need to use hsin().\n\nOn potential:\n\n1. Do range select using points http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates \n(Lat => 1.2393 AND Lat <= 1.5532) AND (Lon >= -1.8184 AND Lon <= 0.4221)\n2. Check those points for distance  \"in the ellipses\".  http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates\n acos(sin(1.3963) * sin(Lat) + cos(1.3963) * cos(Lat) * cos(Lon - (-0.6981))) <= 0.1570;\n\nThat should make it fast and simplify the calculations.\n\nUPDATE - NOTE:\n\nPlugging all this into the web site, proves that Pythagorean is a good approximation... \n\nSee Excel attached.\n\nhsin = 309 km from pt to max\nhsin = 314 km from pt to min\nEstimate using Pythagorean is 311 using sqrt(220km^2+220km^2)\n\n41.42% is the difference from west-east to 45 degree. sqrt(1^2+1^2)\n\nYonik: sqrt(2) is right - but the spreadsheet is a bit better based on spheres.\n\nThe #2 will then subselect the points to limit within that result set.\n\nTherefore, a user could take a distance from the user, sqrt(d^2+d^2) and use that to get a list - it is not exact but better than nothing. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913295",
            "date": "2010-09-21T22:37:04+0000",
            "content": "Example calcs to get lat/long for distance of 220km from 44.93691,-91.3929 "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913363",
            "date": "2010-09-22T02:55:05+0000",
            "content": "There is another example...\n\nhttp://www.movable-type.co.uk/scripts/latlong-db.html not sure - but this is also a good first cut. Then if you want more accurate results calculate results that come back\n and through out ones that are not within. Cache results. The link above http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates appears a little more accurate. But this is simpler.\n\n\n// first-cut bounding box (in degrees)\n$maxLat = $lat + rad2deg($rad/$R);\n$minLat = $lat - rad2deg($rad/$R);\n// compensate for degrees longitude getting smaller with increasing latitude\n$maxLon = $lon + rad2deg($rad/$R/cos(deg2rad($lat)));\n$minLon = $lon - rad2deg($rad/$R/cos(deg2rad($lat)));\n \n$sql = \"Select ID, Postcode, Lat, Lon\n        From MyTable\n        Where Lat > $minLat And Lat < $maxLat\n          And Lon > $minLon And Lon < $maxLon\";\n\n\n "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913368",
            "date": "2010-09-22T03:42:20+0000",
            "content": "Fixed the distance calc for box. We still need to take the results and do a hsin()\n\n\nthis now returns 8 on example data:\n\nhttp://localhost:8983/solr/select/??fl=*,score&start=0&rows=10&q={!sfilt%20fl=store}&qt=standard&pt=44.9369054,-91.3929348&d=196&sort=hsin%286371,true,store,vector%2844.9369054,-91.3929348%29%29%20asc\n\nNote: 196 km is right\n\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12913493",
            "date": "2010-09-22T10:36:47+0000",
            "content": "Couple of things:\n\n1. I did find some other errors around radians, etc.  I will work to fix today.\n\nAlthough extending the 45 degree out would be a conservative estimate. And since we usually sort by distance asc, those extra points would be in the result set but at the end of the list. (this is an improvement - again not at good as ellipses).\n\nThis FieldType is going to be implemented to be a bounding box around a circle of a radius specified by the passed in distance, which seems to be what most tools do, at least as one way of doing it.  If you want, pick your distance based on the max distance of an ellipse or you can override LatLonType.createSpatialQuery to do so in your own FieldType.  Naturally, this will overselect, but this bounding box stuff is meant to be a filter, like you said.  You can then sort by distance later.   "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913567",
            "date": "2010-09-22T14:25:42+0000",
            "content": "Grant: Did you see my patch? It appears to work pretty well. I implemented the solution for you.\n\nOne idea: it might be interesting to pass vector(lat,long) as an optional parameters to sfilt ur, ll if we continue using the box. I can see it pretty useful for google maps (to limit the results based on the map size).\n\nBill "
        },
        {
            "author": "Bill Bell",
            "id": "comment-12913572",
            "date": "2010-09-22T14:32:29+0000",
            "content": "Another reference:\n\nI like the pointInPolygon() idea from Microsoft. I do not like that they don't have a short-cut to reduce the shapes like what we have implemented. But their looping to make sure the distance is being satisfied is good.... See below.\n\nhttp://msdn.microsoft.com/en-us/library/cc451895.aspx\n\nAs follow-up, I would take my patch apply it, and then loop through the results to limit by hsin() distance to make sure the results are not on the 45 degree.... I also would make this 2nd step optional, since it slows things down, and for most applications they don't need to be that precise. (SInce you order by hsin() desc - the large distances if there are any will be at the bottom and inconsequential). "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12913573",
            "date": "2010-09-22T14:32:32+0000",
            "content": "Here's a patch that puts in the east/west, north/south bounding box, which seems to be what PostGIS offers.  It passes Bill's example at the top and I put in other tests.  I refactored some of the DistanceUtils to have some other useful methods.  I think I finally got all my degrees/radians straightened out, too. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12913577",
            "date": "2010-09-22T14:34:36+0000",
            "content": "Hi Bill,\n\nSorry, yeah, I did see your patch, but was almost done w/ what I had at that point.  Keep in mind that the approach is meant to be a rough cut for filtering, as it is not 100% accurate.  It is expected that most people would filter based on these range queries, and then do other things to do exact distances later in terms of scoring and sorting.  I will document this on the Wiki. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12914014",
            "date": "2010-09-23T12:51:01+0000",
            "content": "Committed to trunk and 3.x "
        },
        {
            "author": "Simon Rijnders",
            "id": "comment-12915239",
            "date": "2010-09-27T08:38:41+0000",
            "content": "Is there possible now to use a current Solr build (nightly) to solve this problem: find all points (using index) in radius of R km on earth?\n\nIf so, I'm more than willing to test this for you guys....\n\nThanks! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013177",
            "date": "2011-03-30T15:45:47+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}