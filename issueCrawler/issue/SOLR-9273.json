{
    "id": "SOLR-9273",
    "title": "Share and reuse config set in a node",
    "details": {
        "components": [
            "config-api",
            "Schema and Analysis",
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Currently, each core in a node ends up creating a completely new instance of ConfigSet with its own schema, solrconfig and other properties. This is wasteful when you have a lot of replicas in the same node with many of them referring to the same config set in Zookeeper.\n\nThere are many issues that need to be addressed for this to work so this is a parent issue to track the work.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-07-01T15:23:16+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I discussed this issue with Noble Paul in the context of SOLR-7191 and its sub-task SOLR-7282. Some of the issues that have to be tackled are:\n\n\tThe <lib> tag in solrconfig.xml and core-specific lib directories make it almost impossible to share configsets. I see little use of them in SolrCloud mode. A single lib directory for the entire node along with the ability to load plugins from the blob store ought to be sufficient for most use-cases.\n\tIf we can get rid the above then we can share SolrResourceLoader across cores\n\tSimilarityFactory is SolrCoreAware and that is the only plugin specified inside schema which is so. All the rest are resource loader aware. We cannot share full schema objects if there is a SolrCoreAware plugin inside it.\n\tSchema cannot refer to any variables specific to core (such as the core name)\n\tRuntimeLib Classloader should be moved to ConfigSet from SolrCore\n\tThe ConfigSet Object should be the same (and immutable) across core load/reload and across cores of same configset\n\tWe may need a new interface \u2013 ConfigSetAware. ConfigSet will hold & provide (CoreContainer, SolrResourceLoader, IndexSchema, SolrConfig)\n\n ",
            "id": "comment-15359124"
        },
        {
            "date": "2016-07-01T15:53:01+0000",
            "author": "Scott Blum",
            "content": "Nice stuff.  One random idea: we could content-hash the ConfigSets based on schema and solrconfig, so the same schema+solrconfig would produce a consistent hash, which could then be a key into a weak map for that config set.  That way you maximize reuse but also allow GC when a particular version of a config set goes unused.  This would allow cores to continue to reload individually instead of having to reload by shared configset.  (It would also allow cores with the same content hash to share even if the config sets are copies of each other \u2013 not sure if this is desirable or not.) ",
            "id": "comment-15359167"
        },
        {
            "date": "2016-07-01T16:19:49+0000",
            "author": "Erick Erickson",
            "content": "I started looking at this along side shareSchema and quickly gave up due to what you've outlined. Actually I didn't get that far, just poked around long enough to say \"Oh my, this is complicated\"...\n\nSo would this mean that there's one way of loading solrconfig in stand-alone and one for SolrCloud? And, if so, would it make sense to deal with Zookeeper as \"the one source of truth\" first? Or would we impose the same restrictions on stand-alone Solr re: point <1>? I'm not against any of those options, just wondering what the thinking is here...\n\nBut this would be great for those situations where people have lots of replicas sharing a configset. I did some timings a while ago for core discovery and it was something like 1,000/second for just the discovery part. Might it be possible to hit 100 cores/second with this?\n\nJust had a random thought here. Currently core loading implicitly throttles ZK state changes, so I do wonder at the effects on Zookeeper/event notification to the clients... I can't point to anything bad here, more of \"gee, I wonder how that'll work\".... ",
            "id": "comment-15359209"
        },
        {
            "date": "2016-07-01T17:27:31+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "The <lib> tag in solrconfig.xml and core-specific lib directories make it almost impossible to share configsets. I see little use of them in SolrCloud mode. A single lib directory for the entire node along with the ability to load plugins from the blob store ought to be sufficient for most use-cases.\nWe should make sure this continues to work with non-cloud cases. \n\nI would like if we could move the config overlay out of the SolrConfig/ConfigSet, it should belong to the collection and not to the configset.  ",
            "id": "comment-15359332"
        },
        {
            "date": "2016-07-02T19:34:16+0000",
            "author": "David Smiley",
            "content": "One random idea: we could content-hash the ConfigSets based on schema and solrconfig, so the same schema+solrconfig would produce a consistent hash, which could then be a key into a weak map for that config set.\n\n+1 !\n\nI would like if we could move the config overlay out of the SolrConfig/ConfigSet, it should belong to the collection and not to the configset.\n\nBut isn't the overlay fundamentally part of the configuration \u2013 it's just an alternate way of configuring things outside of the solrconfig.xml file?  Or maybe I misunderstand that.\n\nBTW, wouldn't another conundrum in sharing configs be core specific references, like the solr.core.name property?  I suppose this all may be cleared up if we go with Scott's idea of generating a hash of the entire runtime hash of everything, which will mean that we don't need to do anything special for solr.core.name; if you configure something with such a reference, the config will get a different hash. ",
            "id": "comment-15360305"
        },
        {
            "date": "2016-07-06T05:16:05+0000",
            "author": "Noble Paul",
            "content": "Shalin Shekhar Mangar one more things we did not discuss.\n\nWe may need an interface called SchemaAware. This is essential to do an in-place update of the schema object.  So, we don't need to reload core when schema changes ",
            "id": "comment-15363787"
        },
        {
            "date": "2016-07-06T06:27:07+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "We may need an interface called SchemaAware. This is essential to do an in-place update of the schema object. So, we don't need to reload core when schema changes\n\nI think that this should be a separate issue. This problem exists today also without this particular functionality because of the way schema is reloaded. ",
            "id": "comment-15363858"
        },
        {
            "date": "2016-07-06T06:28:02+0000",
            "author": "Noble Paul",
            "content": "I think it is less efficient than caching by configsetname+ZK_version . It is cheaper to read the version from schema than reading the content from schema & compute the hash (for stale check) ",
            "id": "comment-15363859"
        },
        {
            "date": "2016-07-06T06:29:21+0000",
            "author": "Noble Paul",
            "content": "We should make sure this continues to work with non-cloud cases.\nI agree. We should let <lib> to work in non-cloud mode. In cloud mode, rutimelib is the preferred mechanism.  ",
            "id": "comment-15363860"
        },
        {
            "date": "2016-07-06T06:32:52+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "We should make sure this continues to work with non-cloud cases.\n\nYes, we will have to find a way to do that without overly complicating our examples.\n\nI would like if we could move the config overlay out of the SolrConfig/ConfigSet, it should belong to the collection and not to the configset.\n\nIf you want something like that then it is probably better to use config templates via SOLR-7742 and SOLR-5955. I don't think such a change belongs to this issue. ",
            "id": "comment-15363863"
        },
        {
            "date": "2016-07-06T06:33:00+0000",
            "author": "Noble Paul",
            "content": "so I do wonder at the effects on Zookeeper/event notification to the clients.\n\nToday , we read the whole content of all config files on every core load from ZK. Which is over and above the regular state updates. So, there will be a big reduction in the data read from ZK.\n\nSo would this mean that there's one way of loading solrconfig in stand-alone and one for SolrCloud? \n\nWe already do it. The ConfigSetService have multiple implementations for cloud & non-cloud. So, it would be opaque to the API caller, what kind of ConfigSet it is getting ",
            "id": "comment-15363864"
        },
        {
            "date": "2016-07-06T11:50:45+0000",
            "author": "Noble Paul",
            "content": "I would like if we could move the config overlay out of the SolrConfig/ConfigSet, it should belong to the collection and not to the configset.\n\nHow is that. Overlay is a nothing but a part of solrconfig. ",
            "id": "comment-15364191"
        },
        {
            "date": "2016-07-06T17:43:24+0000",
            "author": "Scott Blum",
            "content": "2 level mapping...\n\nYou can cache configsetname+ZK_version -> content hash to avoid hitting ZK, then content hash -> ConfigSet to allow sharing.  The computational cost of computing the hash should not be expensive. ",
            "id": "comment-15364714"
        },
        {
            "date": "2016-07-06T18:10:43+0000",
            "author": "Noble Paul",
            "content": "sharing just needs to ensure that the ZK version is same, right? \n\nThe computational cost of computing the hash should not be expensive\nI'm not worried about the computation cost. I'm trying to avoid reading so much data from ZK ",
            "id": "comment-15364778"
        },
        {
            "date": "2016-07-06T18:12:32+0000",
            "author": "Noble Paul",
            "content": "But isn't the overlay fundamentally part of the configuration \n\nYes, your understanding is correct. ",
            "id": "comment-15364780"
        },
        {
            "date": "2016-07-06T18:52:12+0000",
            "author": "Scott Blum",
            "content": "Yeah, that's why I'm saying map name + version => content hash to avoid re-fetching from ZK as an initial de-dup.  Then map content hash -> live objects as a second layer de-dup.  That way, even if you have differently named configs with the same content, they can share.  Or if you have a no-op change to a configset, or perhaps even you change a configset and then revert the change prior to reloading a core. ",
            "id": "comment-15364879"
        },
        {
            "date": "2016-07-06T22:07:16+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "If you want something like that then it is probably better to use config templates via SOLR-7742 and SOLR-5955. I don't think such a change belongs to this issue.\nI always think of the config overlay as the collection-specific overrides of a ConfigSet, editable via collections API, but yes, now I remember the discussion in SOLR-7570, and it looks like there is more work to do, since people may be relying on the fact that a change in the overlay changes all collections using the ConfigSet. ",
            "id": "comment-15365207"
        },
        {
            "date": "2016-07-07T11:27:10+0000",
            "author": "Noble Paul",
            "content": "We should not see the overlay as something that is separate from solrconfig. It solrconfig.xml+overlay.json is always supposed to be together ",
            "id": "comment-15365964"
        }
    ]
}