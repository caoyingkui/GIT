{
    "id": "LUCENE-4388",
    "title": "ShapeMatcher and ShapeValues",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This patch provides two key interfaces: ShapeMatcher and ShapeValues.  The ShapeMatcher concept is borrowed from Ryan McKinley's JtsGeoStrategy which has a similar GeometryTester.  ShapeValues is basically a ValueSource/FunctionValues for shapes.  This isn't working; I didn't modify any existing classes.\n\nI haven't completely thought this through but a SpatialStrategy might expose a makeShapeValues(IndexReader) and/or makeCenterShapeValues(IndexReader) (the latter is the center points of indexed data).  A generic Distance ValueSource could easily be implemented in terms of makeCenterShapeValues().  And a strategy could support any query shape simply by implementing makeShapeValues().\n\nI've been thinking about how the API handles strategies supporting indexing multiple shapes and I wonder if that could happen simply via a new MultiShape<Shape>.",
    "attachments": {
        "LUCENE-4388_ShapeValues_and_ShapeMatcher.patch": "https://issues.apache.org/jira/secure/attachment/12545157/LUCENE-4388_ShapeValues_and_ShapeMatcher.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-16T09:18:11+0000",
            "content": "Interesting idea.  I like the idea of Strategys exposing ShapeValues and then having a standard DistanceValueSource which accepted a Shape, ShapeValues and a DistanceCalculator.  I like that it would also make it easier to retrieve the Shape if it was needed in other places.  \n\nI am little worried that this could encourage consumers, whether they be other Strategy impls or something else, to use un-inverted index structures instead of inverted and subsequently suffer in performance and in memory consumption.\n\nAnd a strategy could support any query shape simply by implementing makeShapeValues().\n\nI don't understand this.  Can you elaborate?\n\nI've been thinking about how the API handles strategies supporting indexing multiple shapes and I wonder if that could happen simply via a new MultiShape<Shape>\n\nOne of the challenges with this API is that whether multiple values are supported is a per Strategy decision, yet whether there are multiple values is a per Document decision.  Document 1 might have only a single Shape, Document 2 might have multiple Shapes.  I just wonder whether we want to force Strategys which support multiple values to always use MultiShape, or whether it should change per Document and then force the consumer to check. ",
            "author": "Chris Male",
            "id": "comment-13456561"
        },
        {
            "date": "2012-09-17T04:24:05+0000",
            "content": "I am little worried that this could encourage consumers, whether they be other Strategy impls or something else, to use un-inverted index structures instead of inverted and subsequently suffer in performance and in memory consumption.\n\nThe only solution there is documentation \u2013 e.g. javadocs.  Some features basically require these memory structures; it's hard to avoid them.\n\n\nAnd a strategy could support any query shape simply by implementing makeShapeValues().\n\nI don't understand this. Can you elaborate?\n\nThe reasoning is similar to how a standard DistanceValueSource could then exist.  For a makeFilter / makeQuery, there could be a standard ShapeFilter that consults makeShapeValues to intersect with the query shape.  Of course, it should be preceded by a bbox filter or something similar.\n\nRE MultiShape:\nor whether it should change per Document and then force the consumer to check\n\nI'm not sure what you mean.  But a problem with the other approach (forcing MultiShape for createFields) is that it would make Solr support difficult, perhaps requiring a UpdateRequestProcessor to join separate field values into one.  But even putting that aside, I don't think use of a MultiShape needs to be forced, but it should be supported by the Strategy if it declares that it handles multi-valued shapes. ",
            "author": "David Smiley",
            "id": "comment-13456751"
        },
        {
            "date": "2012-09-17T04:45:07+0000",
            "content": "The reasoning is similar to how a standard DistanceValueSource could then exist. For a makeFilter / makeQuery, there could be a standard ShapeFilter that consults makeShapeValues to intersect with the query shape. Of course, it should be preceded by a bbox filter or something similar.\n\nThat's going to be so slow.  Iterating over every Shape of every Document to see if intersects? That harks back to WildcardQuery performance of old.  Even with a BBox, you could have 100,000 points within a city.  I don't think we should ever support this.  If a user wants to create it themselves then fine, but we should be striving for performance.\n\nI'm not sure what you mean. But a problem with the other approach (forcing MultiShape for createFields) is that it would make Solr support difficult, perhaps requiring a UpdateRequestProcessor to join separate field values into one. But even putting that aside, I don't think use of a MultiShape needs to be forced, but it should be supported by the Strategy if it declares that it handles multi-valued shapes.\n\nGiven this issue is about ShapeValues, I'm talking about retrieving Shapes through ShapeValues, not about indexing.  What I was saying is given the ShapeValues interface:\n\n\nS shape(int docId, IndexReader reader);\n\n\n\nWe need to decide what S is going to be.  If S is always Shape then the consumer would need to check if the actual value returned was a MultiShape or not, in order to retrieve the multiple Shapes.  If S was always MultiShape, then the ShapeValues impl would need to return a MultiShape even when there might only be one Shape associated with the given docId.  \n\nThis isn't a blocking problem, I was merely suggesting that we need to think through the use cases we want to support and how MultiShape fits in. ",
            "author": "Chris Male",
            "id": "comment-13456757"
        }
    ]
}