{
    "id": "LUCENE-5057",
    "title": "Hunspell stemmer generates multiple tokens",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "4.3",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "The hunspell stemmer seems to be generating multiple tokens: the original token plus the available stems.\n\nIt might be a good thing in some cases but it seems to be a different behaviour compared to the other stemmers and causes problems as well. I would rather have an option to decide whether it should output only the available stems, or the stems plus the original token. I'm not sure though if it's possible to have only a single stem indexed, which would be even better in my opinion. When I look at how snowball works only one token is indexed, the stem, and that works great. Probably there's something I'm missing in how hunspell works.\n\nHere is my issue: I have a query composed of multiple terms, which is analyzed using stemming and a boolean query is generated out of it. All fine when adding all clauses as should (OR operator), but if I add all clauses as must (AND operator), then I can get back only the documents that contain the stem originated by the exactly same original word.\n\nExample for the dutch language I'm working with: fiets (means bicycle in dutch), its plural is fietsen.\n\nIf I index \"fietsen\" I get both \"fietsen\" and \"fiets\" indexed, but if I index \"fiets\" I get the only \"fiets\" indexed.\n\nWhen I query for \"fietsen whatever\" I get the following boolean query: field:fiets field:fietsen field:whatever.\n\nIf I apply the AND operator and use must clauses for each subquery, then I can only find the documents that originally contained \"fietsen\", not the ones that originally contained \"fiets\", which is not really what stemming is about.\n\nAny thoughts on this? I also wonder if it can be a dictionary issue since I see that different words that have the word \"fiets\" as root don't get the same stems, and using the AND operator at query time is a big issue.\n\nI would love to contribute on this and looking forward to your feedback.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-19T09:26:18+0000",
            "content": "I checked with Luca and this is a dictionary issue, fietsen and fiets are both considered as stems of fietsen with the dutch dictionary.\n\nFor people who have stemming issues, this is very easy to check whether the issue is in Lucene or in the dictionary by installing hunspell-tools (apt-get install hunspell-tools on Debian and related distributions) and running:\n\n% echo fietsen > tmp\n% /usr/lib/hunspell/analyze nl_NL.aff nl_NL.dic tmp\n> fietsen\nanalyze(fietsen) =  st:fietsen\nanalyze(fietsen) =  st:fiets fl:N\nstem(fietsen) = fietsen\nstem(fietsen) = fiets\n\n\n\nIn this particular case, we can see that fietsen is both a stem (1st line) and a variation of fiets with the affix identified with \"N\". ",
            "author": "Adrien Grand",
            "id": "comment-13713485"
        },
        {
            "date": "2013-07-19T09:28:12+0000",
            "content": "Thanks Adrien for looking into this, nice explanation! ",
            "author": "Luca Cavanna",
            "id": "comment-13713487"
        },
        {
            "date": "2013-08-31T22:10:20+0000",
            "content": "I am afraid this ticket should be reopened. ",
            "author": "Lukas Vlcek",
            "id": "comment-13755616"
        },
        {
            "date": "2013-09-01T08:09:52+0000",
            "content": "Hi Lukas,\ncan you share your findings? In my case it seemed to be a dictionary problem, but I'm curious to hear what you experienced.\n\n ",
            "author": "Luca Cavanna",
            "id": "comment-13755677"
        },
        {
            "date": "2013-09-05T09:17:13+0000",
            "content": "I am not a linguist expert but here are my thoughts. Generally, with highly inflected languages and short words there is high chance that some word form of root word A will be similar to some word form of root word B. The sorter the word and the more the language is inflected the higher the chance. Isn't this true? I can give you some examples from Czech language:\n\nA word \"den\". When you run this word through Hunspell token filter (with recusion level 0) using Czech dictionary (you can find it in attachments of #LUCENE-4311) it outputs three different tokens:\n\n[ \"den\", \"dno\", \"dna\" ]\n\nWhere\n\n\t\"den\" is singular nominative case [1] of \"a day\". Thus output is \"den\".\n\t\"den\" is a plural genitive case [2] of \"a bottom\" or \"a base\". Thus output is \"dno\".\n\t\"den\" is a plural genitive case of \"a goat\". Thus output is \"dna\".\n\n\n\nI do not see this as an dictionary issue (contrary I would argue that affix rules did very good job). When you get the token \"den\" without any context you really do not know which of these three meanings it can have.\n\nYou can check another example (including Elasticsearch queries) in my article [3] at the very bottom. In Elasticsearch terminology the \"match query\" does not work correctly, while \"query string\" seems to be doing fine.\n\nLet me know if you have any further questions.\n\n[1] http://en.wikipedia.org/wiki/Nominative_case\n[2] http://en.wikipedia.org/wiki/Genitive\n[3] http://www.zdrojak.cz/clanky/elasticsearch-vyhledavame-hezky-cesky-ii-a-taky-slovensky/ ",
            "author": "Lukas Vlcek",
            "id": "comment-13758927"
        },
        {
            "date": "2013-09-05T21:57:00+0000",
            "content": "The example you describe is sort of at the heart of the Hunspell algorithm and outputting those three different tokens is one of its major advantages.  When we're doing analysis we don't know which of those different meanings the user intended, so we're providing them as all as options.  I don't see that as something negative about Hunspell, in fact quite the opposite. ",
            "author": "Chris Male",
            "id": "comment-13759514"
        },
        {
            "date": "2013-09-06T03:04:54+0000",
            "content": "Exactly Chris, that is what I tried to explain with that example. Also, I tried to provide some king of generalization (if you look into czech dictionary file you can see this example is somehow around edges given the words are only three letters, the article that I wrote contains different example with tokens having four and five letters).\n\nBut the point is (and the ticket title might be misleading in this context) that with more tokens being generated from hunspell token filter some Lucene queries are probably not working correctly when AND operator is used. At least that is how I understand the situation. So either we need to open a new ticket for Lucene which represents this issue or we need to reopen this ticket. What do you think?  ",
            "author": "Lukas Vlcek",
            "id": "comment-13759805"
        },
        {
            "date": "2013-09-06T04:50:24+0000",
            "content": "I don't think the problem is related to Hunspell.  Any analysis could produce multiple tokens (synonyms for example) and whatever query parser is used needs to reflect that correctly in how it creates BooleanQuerys.  Consequently I don't think there is an issue that needs be re/opened? ",
            "author": "Chris Male",
            "id": "comment-13759863"
        },
        {
            "date": "2013-09-06T07:53:12+0000",
            "content": "Agree Chris. Thanks. ",
            "author": "Lukas Vlcek",
            "id": "comment-13760034"
        },
        {
            "date": "2014-07-12T06:26:22+0000",
            "content": "HI Lukas Vlcek\nHow do you solve the problem finally? I meet the issue too (Solr 4.6).\nWhen I search for \"jeans\", the humspell stemmer generates two terms ( \"jeans\", \"jean\" ), the edismax query parser make a query:\n\n\t+((default_search:jeans default_search:jean)~2)\n\n\n\nwhich result in that original documents that only contains \"jean\" on their fields cannot be recalled.\n\nIs that the problem of query parser who may no need to generate \"~2\"? What is your query parser output?\n\nThanks. ",
            "author": "Hunts Chen",
            "id": "comment-14059683"
        },
        {
            "date": "2014-07-12T11:01:47+0000",
            "content": "Closing issue: guys, its a morphological analyzer. That means you get all the possibilities. This is just how things work. ",
            "author": "Robert Muir",
            "id": "comment-14059744"
        },
        {
            "date": "2014-07-12T23:02:35+0000",
            "content": "Isn't edismax generating an incorrect query still? It shouldn't be requiring both tokens to be present.. ",
            "author": "Ramkumar Aiyengar",
            "id": "comment-14059951"
        },
        {
            "date": "2014-07-15T02:08:48+0000",
            "content": "HI Robert Muir\nThe problem is humspell ouput right results, but edismax didn't.  ",
            "author": "Hunts Chen",
            "id": "comment-14061552"
        },
        {
            "date": "2014-07-15T02:17:57+0000",
            "content": "Then thats something broken with that parser. Please open a separate issue for that!\n\nThere is nothing wrong with this analysis component. ",
            "author": "Robert Muir",
            "id": "comment-14061558"
        }
    ]
}