{
    "id": "SOLR-4983",
    "title": "Problematic core naming by collection create API",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The SolrCloud collection create API creates cores named \"foo_shard<x>_replica<y>\" when asked to create collection \"foo\".\n\nThis is problematic for at least 2 reasons: \n\n1) these ugly core names show up in the core admin UI, and will vary depending on which node is being used,\n\n2) it prevents collections from being used in SolrCloud joins, since join takes a core name as the fromIndex parameter and there's no single core name for the collection.  As I've documented in https://issues.apache.org/jira/browse/SOLR-4905 and http://lucene.472066.n3.nabble.com/Joins-with-SolrCloud-tp4073199p4074038.html, SolrCloud join does work when the inner collection (fromIndex) is not sharded, assuming that collection is available and initialized at SolrCloud bootstrap time.\n\nCould this be changed to instead use the collection name for the core name?  Or at least add a core-name option to the API?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Artem Karpenko",
            "id": "comment-13840003",
            "date": "2013-12-05T10:35:10+0000",
            "content": "While this is not resolved - could anyone suggest if by creating cores separately (with the same collection name) we would achieve the same effect as creating collection via Collections API? Trying to do so seems to produce desired result, but maybe there are some hidden (and important) difference? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13840077",
            "date": "2013-12-05T13:37:33+0000",
            "content": "Prob better to ask on the user's list, it has a wider audience...\n\nBut, quoting from the SolrCloud page:\nThe collections API let's you manage collections. Under the hood, it generally uses the CoreAdmin API to asynchronously (though Overseer) manage SolrCores on each server - it's essentially sugar for actions that you could handle yourself if you made individual CoreAdmin API calls to each server you wanted an action to take place on.\n\nSo it should work... if you do it right <G>.... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13840113",
            "date": "2013-12-05T14:35:30+0000",
            "content": "Let's examine both the problems you mentioned\n1) ugly names show up in ui .what is a universally accepted clean name? Your scheme of naming could be bad for others\n2) I guess this is the real problem . Joins should work work on cloud mode with collection name. Nobody should ever need to use the core names anywhere "
        },
        {
            "author": "Chris Toomey",
            "id": "comment-13840238",
            "date": "2013-12-05T16:31:16+0000",
            "content": "Right, 2) is the real problem.  For 1) I doubt many would argue that \"<collection_name>\" wouldn't be cleaner/prettier/less-surprising than \"<collection_name>_shard<x>_replica<y>\" for the core names, but if that's not also achievable when addressing 2), that's fine.. "
        },
        {
            "author": "Alexey Serba",
            "id": "comment-13841042",
            "date": "2013-12-06T06:59:43+0000",
            "content": "I doubt many would argue that \"<collection_name>\" wouldn't be cleaner/prettier/less-surprising than \"<collection_name>_shard<x>_replica<y>\"\nYou can have multiple cores on a single Solr node that participate in a collection. See maxShardsPerNode parameter in Collections API. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13843571",
            "date": "2013-12-09T21:25:15+0000",
            "content": "could anyone suggest if by creating cores separately (with the same collection name) we would achieve the same effect as creating collection via Collections API? \n\nBy and large, currently, yes, this is supported. There is a flag that tracks if the collection was created with the collections api or not - and if it is, you will end up being able to use further features in the future - but currently you should be able to use the cores api to do what you want no problem. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13843840",
            "date": "2013-12-10T02:11:13+0000",
            "content": "I think solving HIS problem alone is simple. If the collection is present in the same jvm it is very easy to do a lookup of the collection  and of there is a core that serves the collection set the fromIndex as that. If the user can ensure that all his collections are present in all nodes it will be ok. The hard part is making it work with a remote node  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-15793252",
            "date": "2017-01-02T17:59:34+0000",
            "content": "Ran across this looking for something else.\n\nI think the core naming questions are taken care of.\n\nAs far as joins are concerned, between the \"cross collection join\" where the \"from\" collection must exist in toto on each replica and the Streaming stuff, can this be closed?\n\nMark Miller Noble Paul any opinions? "
        }
    ]
}