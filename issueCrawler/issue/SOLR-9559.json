{
    "id": "SOLR-9559",
    "title": "Add ExecutorStream to execute stored Streaming Expressions",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.3"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "The ExecutorStream will wrap a stream which contains Tuples with Streaming Expressions to execute. By default the ExecutorStream will look for the expression in the expr_s field in the Tuples.\n\nThe ExecutorStream will have an internal thread pool so expressions can be executed in parallel on a single worker. The ExecutorStream can also be wrapped by the parallel function to partition the Streaming Expressions that need to be executed across a cluster of worker nodes.\n\nSample syntax:\n\ndaemon(executor(threads=10, topic(storedExpressions, fl=\"expr_s\", ...)))\n\n\n\nIn the example above a daemon wraps an executor which wraps a topic that is reading stored Streaming Expressions. The daemon will call the executor at intervals which will execute all the expressions retrieved by the topic.",
    "attachments": {
        "SOLR-9559.patch": "https://issues.apache.org/jira/secure/attachment/12834853/SOLR-9559.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-23T19:45:51+0000",
            "author": "Joel Bernstein",
            "content": "First implementation of the ExecutorStream ",
            "id": "comment-15600202"
        },
        {
            "date": "2016-10-24T17:11:07+0000",
            "author": "Joel Bernstein",
            "content": "Added initial test case. A parallel test case is still needed. ",
            "id": "comment-15602589"
        },
        {
            "date": "2016-10-24T22:19:06+0000",
            "author": "Joel Bernstein",
            "content": "Added parallel test case ",
            "id": "comment-15603402"
        },
        {
            "date": "2016-10-25T02:25:38+0000",
            "author": "David Smiley",
            "content": "Hi Joel. What do you think about naming this eval instead?  That name seems more congruent with the name & purpose of the eval() method in various programming environments.  You are very close to the code so I can see how ExecutorStream came to your mind in light of it using an ExecutorService underneath.\n\nI noticed that StreamTask loops over the tuples and does nothing with the result.  Why is that?  And might you use Java 7 try-with-resources over there?\n\nI admit I'm a little confused as to the use-case \u2013 why would someone embed a streaming expression be embedded in a tuple?  Perhaps some sort of persistent distributed work queue?  But then how are error conditions handled... do we concern ourselves with not running the same expression multiple times? ",
            "id": "comment-15603936"
        },
        {
            "date": "2016-10-25T03:16:03+0000",
            "author": "Joel Bernstein",
            "content": "All interesting questions.\n\nI thought about exec and eval but settled on executor because it really is a work queue for streaming expressions. It's a really powerful executor because it's parallel on a single node and can be parallelized across a cluster of worker nodes by wrapping it in the parallel function.\n\nThe StreamTask's job is to iterate the stream. All functionality in streaming expressions is achieved by iterating the stream. In order for something interesting to happen in this scenario you would need to use a stream decorator that pushes data somewhere, such as the update() function. The update function pushes Tuples to another SolrCloud collection. \n\nFor example the executor could be used to train millions of machine learning models and store the models in a SolrCloud collection.\n\nThere are three core use cases for this:\n\n1) As part of a scalable framework for developing Actor Model systems https://en.wikipedia.org/wiki/Actor_model. The Actor Model is one of core features of Scala and Erlang. The daemon function can be used to construct Actors that interact with each other through work queues and mail boxes.\n\n2) Massively scalable stored queries and alerts. See the topic function for more details on subscribing to a query.\n\n3) A general purpose parallel executor / work queue. \n\nError handling currently is just logging errors. But there is a lot we can do with error handling as this matures. One of the really nice things about the topic() function is that it persists it's checkpoints in a collection. If you run a job that uses a topic() and it fails in the middle, you can simply start it back up and it picks up where it left off.\n\n\n ",
            "id": "comment-15604023"
        },
        {
            "date": "2016-10-27T00:20:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 727bf559a0089d67ddd7eb5ed572f79b67a006c6 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=727bf55 ]\n\nSOLR-9559: Add ExecutorStream to execute stored Streaming Expressions ",
            "id": "comment-15610139"
        },
        {
            "date": "2016-10-27T01:24:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 67938c2bab9011e1049763368897645a1bf9209f in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=67938c2 ]\n\nSOLR-9559: Add ExecutorStream to execute stored Streaming Expressions ",
            "id": "comment-15610279"
        },
        {
            "date": "2016-10-27T03:11:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7b3d29dda77404b9d2772c0df4bc2fd4d600ed5e in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7b3d29d ]\n\nSOLR-9533, SOLR-9559: Undate CHANGES.txt ",
            "id": "comment-15610482"
        },
        {
            "date": "2016-10-27T03:15:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 0cadbb995bba0743a201980a7fdc6902dc16c4bc in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0cadbb9 ]\n\nSOLR-9533, SOLR-9559: Undate CHANGES.txt ",
            "id": "comment-15610489"
        },
        {
            "date": "2016-11-09T08:38:11+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Closing after 6.3.0 release. ",
            "id": "comment-15650268"
        }
    ]
}