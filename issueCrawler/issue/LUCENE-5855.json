{
    "id": "LUCENE-5855",
    "title": "BinaryDictionary may fail reading a file",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "4.9",
        "status": "Open",
        "fix_versions": []
    },
    "description": "The following code may fail on other JVMs, e.g. on Android:\n\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) \n{\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n\nThe code expects that channel.read() will fill entire buffer contents, which is however not the case: ReadableByteChannel.read() may even decide to read 0 bytes and this mimicks InputStream.read() behavior. The current Lucene code accidentally works on Oracle Java because Oracle Java channel.read() fills the buffer fully (just check the Channels.newChannel() implementation).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14077826",
            "author": "Martin Vysny",
            "content": "The code is present in org.apache.lucene.analysis.ja.dict.BinaryDictionary:115 ",
            "date": "2014-07-29T15:28:15+0000"
        }
    ]
}