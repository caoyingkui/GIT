{
    "id": "SOLR-3387",
    "title": "UpdateRequestHandler should support XML,CSV,JSON, and javabin",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "Rather then have 4 handlers to support 4 content types, we should use a single endpoint and pick the ContentStreamLoader based on the ContentType\n\nThis will simplify configuration problems for clients that want to swtich format (see SOLR-3038)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13258376",
            "date": "2012-04-20T17:00:06+0000",
            "content": "And default \"wt\" based on that?  (i.e. xml, JSON or javabin) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258387",
            "date": "2012-04-20T17:20:42+0000",
            "content": "yes \u2013 i'm looking at something like:\n\nprivate void setDefaultWT(String wt, SolrQueryRequest req) {\n  SolrParams params = req.getParams();\n  if( params.get(CommonParams.WT) == null ) {\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(CommonParams.WT, wt);\n    req.setParams(SolrParams.wrapDefaults(params, \n        new MapSolrParams(map)));\n  }\n}\n\n\n\nThe big change would be that content-type is important.  So far only the charset is used.  I think this is an OK change for 4.x and is inline with any REST service "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258399",
            "date": "2012-04-20T17:36:31+0000",
            "content": "as a quick sketch, I'm looking at something like:\n\nreturn new ContentStreamLoader() {\n      XMLLoader xml = null;\n      JavabinLoader javabin = null;\n      JsonLoader json = null;\n      CSVLoader csv = null;\n      \n      @Override\n      public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n        ContentStreamLoader loader = null;\n        String type = stream.getContentType();\n        if (type.contains(\"javabin\")) {\n          if (javabin == null) {\n            javabin = new JavabinLoader(processor);\n            setDefaultWT(\"javabin\", req);\n          }\n          loader = javabin;\n        } else if (type.contains(\"xml\")) {\n          if (xml == null) {\n            xml = new XMLLoader(processor, inputFactory);\n            setDefaultWT(\"xml\", req);\n          }\n          loader = xml;\n        } else if (type.contains(\"json\")) {\n          if (json == null) {\n            json = new JsonLoader(req, processor);\n            setDefaultWT(\"json\", req);\n          }\n          loader = json;\n        } else if (type.contains(\"csv\")) {\n          if (csv == null) {\n            csv = new SingleThreadedCSVLoader(req, processor);\n            // setDefaultWT(\"csv\", req); Should this default?\n          }\n          loader = csv;\n        }\n        \n        if (loader == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Unsupported Content-Type: '\" + type + \"'\");\n        }\n        loader.load(req, rsp, stream);\n      }\n\n      private void setDefaultWT(String wt, SolrQueryRequest req) {\n        SolrParams params = req.getParams();\n        if( params.get(CommonParams.WT) == null ) {\n          Map<String,String> map = new HashMap<String,String>(1);\n          map.put(CommonParams.WT, wt);\n          req.setParams(SolrParams.wrapDefaults(params, \n              new MapSolrParams(map)));\n        }\n      }\n    };\n\n\n\nAny red flags?  We could have more strict content-type rules\n\nIf we like the general idea/approach I'll clean things up with tests etc.\n\nFor back compatibility any opinions?  \n\n\t@Deprecated JsonUpdateRequestHandler could simply extend the general UpdateRequestHandler (now requiring proper content-type)\n\t@Deprecated JsonUpdateRequestHandler could could call JsonLoader explicitly (same as 3.x)\n\tremove it completely\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13258415",
            "date": "2012-04-20T17:52:33+0000",
            "content": "Any red flags?\n\nWhat about stream.body?  And how does this play with multi-part uploads?\n\nIt would also be nice to be able to leave off the \"-H 'Content-type:application/json'\" stuff when we do curl examples... but curl\ndefaults to form encoded.  I wonder if we could do some sort of auto-detect in the case of form-encoded... starting with \"<\" would be XML,\nstarting with \"[\"or\"{\" would be JSON. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258430",
            "date": "2012-04-20T18:04:40+0000",
            "content": "What about stream.body?\n\nstream.body is used to create the ContentStream \u2013 so it does not change anything\n\nAnd how does this play with multi-part uploads?\n\nThe one difference is that this would let you have different content types in each part \u2013 not really a feature, but worth noting.\n\nI wonder if we could do some sort of auto-detect\n\nI'll poke \u2013 getStream().mark()/reset() can probably work for XML/JSON but it may break things for javabin "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13258436",
            "date": "2012-04-20T18:10:15+0000",
            "content": "I'll poke \u2013 getStream().mark()/reset() can probably work for XML/JSON but it may break things for javabin\n\nYeah, support doesn't need to be universal or anything... I think this would really be only for easier curl from the command line (i.e. not important for javabin) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258509",
            "date": "2012-04-20T19:31:45+0000",
            "content": "Since solr 1.1, the content-type is required for post body\n\ncurl http://localhost:8983/solr/update --data-binary @books.json\n\n\nreturns 400 'missing content stream'\n\nWe could try to auto detect the content type, but that is unrelated to this issue.  To support this, we would want a different approach in SolrRequestParsers.  see line 394 in SolrRequestParsers\n\nYonik do you want to open a new issue for trying to auto-detect content-type? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13258614",
            "date": "2012-04-20T21:53:55+0000",
            "content": "There is already a JIRA for this, let's close this one "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13258615",
            "date": "2012-04-20T21:55:02+0000",
            "content": "Closing. Please continue discussion in SOLR-2857 "
        }
    ]
}