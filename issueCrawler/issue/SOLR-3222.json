{
    "id": "SOLR-3222",
    "title": "Pull optimal cache warming queries from a warm solr instance",
    "details": {
        "affect_versions": "3.5,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Incomplete"
    },
    "description": "Ever wondered what queries to use to prime your cache?  This patch allows you to query a warm running instance for a list of warming queries.  The list is generated from the server's caches, meaning you get back an optimal set of queries.  The set is  optimal to the extent that the caches are optimized.  The queries are returned in a format that can be consumed by the \n\n<listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\">\n\n section of solrconfig.xml.  \n\nOne can use this feature to generate a static set of good warming queries to place in solrconfig.xml under \n\n<listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\">\n\nIt can even be used in a dynamic fashion like this:\n\n<listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\">\n  <xi:include href=\"http://host/solr/core/autowarm\" xpointer=\"element(/1/2)\" xmlns:xi=\"http://www.w3.org/2001/XInclude\"/>\n</listener>\n\n\n\nwhich can work well in certain distributed load-balanced architectures, although in production it would be wise to add an <xi:fallback> element to the include in the event that the host is down.\n\nI implemented this by introducing a new request handler:\n\n  <requestHandler name=\"/autowarm\" class=\"solr.AutoWarmRequestHandler\" />\n\n\nThe request handler pulls a configurable number of \"top\" keys from the filterCache,fieldValueCache, and queryResultCache.  For each key, it constructs a query that will cause that key to be placed in the associated cache.  The list of constructed queries are then returned in the response.  \n\nPatch to follow.",
    "attachments": {
        "SOLR-3222-autowarm.patch": "https://issues.apache.org/jira/secure/attachment/12517681/SOLR-3222-autowarm.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Russell Black",
            "id": "comment-13226179",
            "date": "2012-03-09T16:29:21+0000",
            "content": "It is possible to configure how many entries to return from each of the caches.  The default is 100 from each of the three caches.  To change this, you can pass any of the following parameters to the request handler:\n\nhttp://host/solr/core/autowarm?filterCache=50&fieldValueCache=150&queryResultCache=200\n\nThese parameters could also be specified as defaults in solrconfig.xml:\n\n<requestHandler name=\"/autowarm\" class=\"solr.AutoWarmRequestHandler\" />\n  <lst name=\"defaults\">\n    <str name=\"filterCache\">50</str> \n    <str name=\"fieldValueCache\">150</str>\n    <str name=\"queryResultCache\">200</str>\n  </lst>\n</requestHandler>\n\n "
        },
        {
            "author": "Russell Black",
            "id": "comment-13230612",
            "date": "2012-03-15T22:04:08+0000",
            "content": "Turns out this patch doesn't work, since there is no reliable way to turn a Query object into URL query parameters.  I ended up solving the problem with a cache plugin.  Let me know if you're interested in the solution and I can post code.  "
        }
    ]
}