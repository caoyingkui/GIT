{
    "id": "LUCENE-3833",
    "title": "Add an operator to query parser for term quorum (ie: BooleanQuery.setMinimumNumberShouldMatch)",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "core/queryparser"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A project I'm working on requires term quorum searching with stemming turned off. The users are accostomed to Sphinx search, and thus expect a query like [ A AND (B C D)/2 ] to return only documents that contain A or at least two of B, C or D. \n\nSo this document would match:\na b c\n\nBut this one wouldn't:\na b\n\nThis can be a useful form of fuzzy searching, and I think we support it via the MM parameter, but we lack a user-facing operator for this. It would be great to add it.",
    "attachments": {
        "LUCENE-3833.patch": "https://issues.apache.org/jira/secure/attachment/12520198/LUCENE-3833.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Lissner",
            "id": "comment-13201003",
            "date": "2012-02-06T02:38:05+0000",
            "content": "Oops. Please ignore the bit about stemming above. Poor copy/paste on my behalf. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13201449",
            "date": "2012-02-06T18:28:40+0000",
            "content": "What would be the formal syntax of this quorum operator? Would it only be allowed immediately after a set of ()'s? Would think that it would be possible to introduce this into eDismax.. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13201451",
            "date": "2012-02-06T18:29:14+0000",
            "content": "Linking this to edismax mother task "
        },
        {
            "author": "Mike Lissner",
            "id": "comment-13202070",
            "date": "2012-02-07T04:35:50+0000",
            "content": "I'd suggest we follow the syntax of Sphinx[1], and require that this be used immediately after (), with a slash and then a count. Pretty sure this doesn't conflict with anything we've already got.\n\nSo queries would look essentially like this:\n(a b c d)/2 e\n\n[1]: http://sphinxsearch.com/docs/current.html#extended-syntax "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13202206",
            "date": "2012-02-07T09:56:12+0000",
            "content": "I feel such core operators should be implemented on the Lucene level first. Then let it bubble up into Solr and eDisMax. Yes? "
        },
        {
            "author": "Mike Lissner",
            "id": "comment-13203310",
            "date": "2012-02-08T06:30:47+0000",
            "content": "I don't know. We have the MM parameter, but not an operator. I don't know where Lucene's query parser ends and where edismax begins. Happy to change this to a Lucene issue if that makes sense though.\n\nAnybody know definitively where this should go?  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13218848",
            "date": "2012-02-29T02:33:59+0000",
            "content": "Moved issue from Solr to Lucene since it should really be dealt with in the underlying query parser(s).\n\nI would suggest that the \"~\" syntax makes more sense then \"/\" for this (ie: {{ A AND (B C D)~2}} since...\n\n\n\t\"/\" was recently added to the query parser as a metacharacter for \"quoting\" regex queries and the extremely different meanings might confuse people\n\t\"~\" already serves nearly the same purpose for phrases (slop) and fuzzy queries (amount of fuzziness) ... it seems a natural way to express \"how many\" of the clauses you want to match.\n\n "
        },
        {
            "author": "Mike Lissner",
            "id": "comment-13218905",
            "date": "2012-02-29T04:46:00+0000",
            "content": "Thanks Hoss. I'd advocate for the slash syntax since that's what I believe Lexis and West use, but the tilde makes sense too for the reasons you mention. "
        },
        {
            "author": "Juan Grande",
            "id": "comment-13239961",
            "date": "2012-03-27T21:20:42+0000",
            "content": "Hi,\n\nI'm attaching a patch that implements this feature for the classic query parser in the trunk. I'm still working on a solution for the flexible.standard implementation.\n\nThe syntax is the same as for sloppy phrases. Some things need to be decided:\n\n\tWhat should happen when this is applied to something that isn't a boolean query? For example: ([* TO *])~3. In this case, the patch simply ignores the mm.\n\tBecause in the grammar definition I'm using the same production as for sloppy phrases, decimal values are allowed by the syntax. What should we do when the user enters a non-integer number? Throw a ParseException maybe? Currently, the patch also ignores the mm value in this case.\n\n\n\nI don't really know much about JavaCC, I just learnt the basics to do the patch, so feel free to correct any possible mistakes.\n\nIn this patch I'm removing a constructor that was manually added to ParseException, so it doesn't fail when the sources are regenerated.\n\n\u2013 Juan "
        },
        {
            "author": "Mike Lissner",
            "id": "comment-13244630",
            "date": "2012-04-02T21:06:20+0000",
            "content": "Three thoughts:\n 1. Do we need to set a review flag, or are we waiting for something else to get this in? \n 2. Ignoring when not a boolean makes sense to me.\n 3. I'd also advocate for ignoring when a non-integer. Better to fail silently when queries don't make sense than to throw an error. (At least that's my philosophy - don't know about Solr's.) "
        },
        {
            "author": "Naomi Dushay",
            "id": "comment-13485505",
            "date": "2012-10-27T21:12:46+0000",
            "content": "Is this related to https://issues.apache.org/jira/browse/SOLR-3589  ?   Would a fix here fix that problem as well?  SOLR-3589 is absolutely killing multi-lingual CJK index searching such as Hathi trust and Stanford Libraries. "
        }
    ]
}