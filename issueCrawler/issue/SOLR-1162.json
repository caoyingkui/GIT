{
    "id": "SOLR-1162",
    "title": "SolrJ UpdateRequest does not maintain order of operations when sending mixed types of changes (updates, delete id, delete query, update iterator)",
    "details": {
        "affect_versions": "1.3",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java",
            "SolrJ"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "In SolrJ UpdateRequest object it maintains separate lists of documents to add, delete, and delete queries so that the order of those operations is not known to the caller.  It really should execute the items in the same order they were added to the UpdateRequest.",
    "attachments": {
        "Solr-1162.patch": "https://issues.apache.org/jira/secure/attachment/12407971/Solr-1162.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jayson Minard",
            "id": "comment-12708655",
            "date": "2009-05-12T22:22:53+0000",
            "content": "Working on this patch now... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12708785",
            "date": "2009-05-13T06:28:37+0000",
            "content": "isn't it better to use multiple UpdateRequest to go in one Request  and you can have a method which takes in an array of UpdateRequests. "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12708786",
            "date": "2009-05-13T06:30:58+0000",
            "content": "First round of patch, changed the UpdateRequest to maintain one list of different types of request items, then changed XML serialization to keep the same order, and the same for binary codec.  Then updated the streaming side of the binary update handler to stream all request types (not just doc adds) and updated the unit test to verify order is maintained both when streaming or not streaming using the binary codec. "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12708789",
            "date": "2009-05-13T06:37:58+0000",
            "content": "In response to Noble Paul:\n\nAn UpdateRequest currently contains:  a list of adds, a single add via iterator, a list of delete by ids, a list of delete queries.  So you can pile them all into the same object currently and then have no idea what order they will actually execute.  If you want to stream adds, you cannot intermix deletes or other actions in the same stream.  So if UpdateRequest is going to allow a set of different actions it should at least maintain the order in which they were added and execute them similarly.\n\nUpdateRequest is the current batching model, so it should be correct.   "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12708790",
            "date": "2009-05-13T06:39:19+0000",
            "content": "Current patch (12-May-2009 11:30PM) is not tested with live server, only against the unit test TestUpdateRequestCodec. "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12708792",
            "date": "2009-05-13T06:42:44+0000",
            "content": "Also (for Noble Paul)...\n\nUpdateRequest is the invoker of itself via the process method, there is nothing to which you can pass it as a list.  \n\nUpdateRequest req = new UpdateRequest();\n... add things\nreq.process(solrServer);\n "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12708797",
            "date": "2009-05-13T06:54:05+0000",
            "content": "Updated patch to fix commitWithin parameter in UpdateRequest and failing unit test. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12708830",
            "date": "2009-05-13T08:44:22+0000",
            "content": "I took a look at the patch . Looks fine , there are a lot of changes.\n\nBut I am still not convinced of the usecase , considering that you can achieve the same with multiple requests  easily. Could you help with a usecase "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12708930",
            "date": "2009-05-13T13:59:29+0000",
            "content": "Multiple requests are less efficient than sending large batches together.  \n\nTo be the most efficient with large requests, every user of SolrJ UpdateRequest would need to write the same logic...  Place adds into UpdateRequest until you hit the first non-add, then send the UpdateRequest and start writing your deletes until you hit a non-delete, then flush the UpdateRequest and keep adding your new transaction type until you hit the first ...  In that case they should avoid using UpdateRequest altogether as calling the SolrServer directly is just as \"easy.\"  If we are going to batch on their behalf why wouldn't we do it correctly and be predictable with our ordering.   I'm sure if JDBC batches did not maintain order, there would be havoc to pay...\n\nBesides that, it isn't clear to users of UpdateRequest as to the order of operations, so someone doing an Add doc 1, Delete doc 1, Add doc 1 may not end up with the expected outcome.   It turns into Add doc 1, Add doc 1, Delete doc1 when streaming and similary for XML version of the transaction.  If I did a Delete Query : then Add doc1, Add doc 2 I end up with no docs as the delete query comes last, but I (the user) does not know that.  \n\nI've written code to work around UpdateRequest ordering and I usually end up only using it for commitWithin or having a commit tacked on the end of the request due to the above issues.   "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12709037",
            "date": "2009-05-13T18:07:22+0000",
            "content": "Outside of UpdateRequest if you hand construct a binary codec stream to send to Solr (without this patch) your order of actions would not be maintained within the stream.  So the binary streaming update handler is \"broken\" in this regard as well.  \n\nSo this patch actually resolves two issue:  UpdateRequest does not serialize into xml or binary stream the actions in-order.  Nor does BinaryUpdateRequestHandler nor did the underlaying JavaBinUpdateRequestCodec so these all become unusable for mixed style actions since none can maintain order.  UpdateRequest is just one of the clients to that server-side code that also has the same issue. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12709046",
            "date": "2009-05-13T18:19:24+0000",
            "content": "I haven't looked at the patch, but I agree with the rational.  One would not be able to use multiple requests in parallel because of uncertain ordering of their execution. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12709279",
            "date": "2009-05-14T06:07:54+0000",
            "content": "Jayson, I see your point, Instead of changing the current UpdateRequest , isn't it better to add a new one OrderedUpdateRequest for this purpose?  "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12709390",
            "date": "2009-05-14T13:01:37+0000",
            "content": "UpdateRequest is used on both ends of the stream potentially so we would want to break out the server pieces to not use the same un-ordered object for binary codec.  I could go either way, just never saw a need for unordered to remain but then again there is a whole community out there that might! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12709392",
            "date": "2009-05-14T13:29:32+0000",
            "content": "we need a revamp of the JavaBinUpdateRequestCodec .\n\nThe way the deserialization is done is not safe . \n\n          if (name.equals(\"params\")) {\n            NamedList parmsAsList = (NamedList)val;\n            ModifiableSolrParams parms = namedListToSolrParams(parmsAsList);\n            updateRequest.setParams(parms);\n          }\n          else if (name.equals(\"delById\")) {\n            List<String> delIds = (List<String>)val;\n            streamer.deleteById(delIds);\n          }\n          else if (name.equals(\"delByQ\")) {\n            String delQuery = (String)val;\n            streamer.deleteByQuery(delQuery);\n          }\n\n\n\nmay break if there are other objects with these names . I can provide a true streaming unmarshaller for JavabinCodec\n\nLet us change the method\n\npublic UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler)\n\n\nto \n\npublic void unmarshal(InputStream is, final StreamingDocumentHandler handler)\n\n\nand make the handler mandatory. so it does not have to worry about the type of Object\n "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12709446",
            "date": "2009-05-14T15:53:57+0000",
            "content": "Sounds good, didn't like that returned object in the old method anyway...\n\nI'll update the unmarshal and unit test that used that object to ensure it was accurate as well.  \n\nWhat do you want to do about the deserialization?  I think it was unsafe before in that it looked up the lists by names and made assumptions about the parms being first.   "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12709452",
            "date": "2009-05-14T16:08:17+0000",
            "content": "Updated patch to remove return value from the unmarshall call as suggested above. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12709465",
            "date": "2009-05-14T16:46:40+0000",
            "content": "I shall update SOLR-1164 and you can take it over from there "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12709503",
            "date": "2009-05-14T18:07:12+0000",
            "content": "Sounds good.  I'll watch SOLR-1164 for updates. "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12776829",
            "date": "2009-11-12T04:25:40+0000",
            "content": "Yikes, set to 1.5 \u2013 I better revamp this to current code. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872627",
            "date": "2010-05-27T22:09:29+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043837",
            "date": "2011-06-03T16:47:19+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106304",
            "date": "2011-09-16T14:50:28+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412186",
            "date": "2012-07-11T22:26:17+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429768",
            "date": "2012-08-07T03:42:51+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13445561",
            "date": "2012-08-31T01:30:38+0000",
            "content": "There is no indication that anyone is actively working on this issue, so removing 4.0 from the fixVersion. "
        }
    ]
}