{
    "id": "SOLR-9467",
    "title": "Document Transformer to Remove Fields",
    "details": {
        "components": [
            "SearchComponents - other"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.2",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Given that SOLR-3191 has become bogged down and inactive, evidently stuck in low level details, and since I have wished several times for some way to just get that one big field out of my results to improve transfer times without making a big brittle list of all my other fields. I'd like to propose a DocumentTransformer that accomplishes this.\n\nIt would look something like this:\n\n&fl=*,[fl.rm v=\"title\"]\n \n\nSince removing one field with a known name is probably the most common case I'd like to start by keeping this simple, and if further features like globs or lists of fields are desired, subsequent Jira tickets can be opened to add them. Not attached to specifics here, only looking to keep things simple and solve the key use case. If you don't like fl.rm as a name for a transformer, suggest a better one (for example).",
    "attachments": {
        "SOLR-9467.patch": "https://issues.apache.org/jira/secure/attachment/12826717/SOLR-9467.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-01T22:31:49+0000",
            "author": "Gus Heck",
            "content": "patch vs 6_x ",
            "id": "comment-15456820"
        },
        {
            "date": "2016-09-06T23:37:19+0000",
            "author": "Hoss Man",
            "content": "Idea seems fine in principle, but i'm wondering what the semantics should be in cases like...\n\n\n\tfl=*&fl=some_alias:[fl.rm v=long_title]\n\tfl=*,some_alias:long_title&fl=[fl.rm v=some_alias]\n\tfl=*,some_alias:long_title&fl=[fl.rm v=long_title]\n\n\n\n#1 seems like a nonsensical request, so I would say it's fine to just ignore the \"some_alias\" specified.\n\n#2 might look silly, but imagine if the first fl param is in some solrconfig.xml hardcoded \"appends\" params, and the second fl is supplied by the client who has no idea that \"some_alias\" isn't a real field name ... seems like a common case that should result in \"some_alias\" being suppressed from the response \u2013 if it's not it will be confusing as hell.\n\n#3 is ... i honestly have no idea what the right behavior should be for #3 ... something to think about though, and at a minimum have a test demonstrating it for refrence.\n\nAs far  as naming goes: i would suggest that [remove field=long_title] would be a better syntax ... or maybe [hide field=long_title]\n\nAs far as test cases: please ensure that this new transformer is adequately covered in the following test classes so we don't keep running into the types of bugs that lead to needing these test classes in the first place (ex: SOLR-9180, SOLR-9314, etc...)\n\n\n\tTestPseudoReturnFields\n\tTestCloudPseudoReturnFields\n\tTestRandomFlRTGCloud\n\n ",
            "id": "comment-15468960"
        },
        {
            "date": "2016-09-07T03:33:09+0000",
            "author": "Alexandre Rafalovitch",
            "content": "How is this going to affect LazyFieldLoading? Since this is for performance purposes, will that field still be loaded and then ignored? Or will it not load at all? ",
            "id": "comment-15469399"
        },
        {
            "date": "2016-09-10T17:42:15+0000",
            "author": "Gus Heck",
            "content": "Been on vacation (still am)... will think about the cases Hoss Man mentioned.\n\nAlexandre Rafalovitch, The intent here is to solve only the transport cost issue initially, deeper better savings (or more expressive versions, using regexes, globs etc) can be had via future enhancements or SOLR-3191. ",
            "id": "comment-15480136"
        },
        {
            "date": "2016-09-20T23:52:34+0000",
            "author": "Gus Heck",
            "content": "Ok reading Hoss Man's cases again\n\n\n\tYes that's nonsense, a quick test locally shows that my code already ignores it, I'll just add a unit test to document this.\n\tGood point, my code doesn't handle this case. I think this should be supported.\n\tAlthough I wasn't planning on using it for security type stuff, I can quickly imagine that this feature might be used that way. I wouldn't want info to become exposed because it got aliased. Quick testing in the admin ui for my local install shows that the current code already achieves this and it should be tested and documented.\n\n\n\nSo if that sounds good  I'll work on providing another patch sometime in the near future.\n\n\n ",
            "id": "comment-15508176"
        },
        {
            "date": "2016-09-21T12:30:34+0000",
            "author": "Gus Heck",
            "content": "Patch vs 6_x updated to ensure that fields being hidden are hidden regardless of renaming and that the specified field name to hide cannot reappear due to renaming. It's worth noting (and documenting in the cwiki!) that from a security perspective this only provides security via obscurity, since values of the hidden field may still be exposed by function queries involving that field. ",
            "id": "comment-15509768"
        },
        {
            "date": "2016-09-21T12:33:58+0000",
            "author": "Gus Heck",
            "content": "Oops forgot to mention, \n\n[hide field=\"foo\"]\n\n syntax was adopted. ",
            "id": "comment-15509775"
        },
        {
            "date": "2016-09-21T12:50:02+0000",
            "author": "Gus Heck",
            "content": "Ah but I also just realized I haven't figured out what if anything needs to be added to the mentioned tests... that may take some time to figure out. ",
            "id": "comment-15509817"
        },
        {
            "date": "2017-02-28T19:26:59+0000",
            "author": "Erick Erickson",
            "content": "re: lazy field loading. Does it really matter enough to care about? With no option to not compress the stored data, and given that the stored data is compressed on a document basis, even loading one field is enough to cause most of the work to be done.\n\nAlthough contrariwise, with all the \"use doc values as stored\" stuff I can argue with myself that suppressing loading the fields first a-la 3191 would result in measurable savings since you could arrange things so that fl=*&exclude=all_non_dv_fields would avoid any decompression.\n\nBTW, the stall on 3191 is mostly that I never seem to have the time I think I do..... ",
            "id": "comment-15888721"
        },
        {
            "date": "2017-02-28T22:16:24+0000",
            "author": "David Smiley",
            "content": "If useDocValuesAsStored was generalized to a hypothetical excludeFromWildcardRetrieval (damn it's hard to come up with good names for this!) then it could not only work as it does now but also for stored fields.  To me that feels better than removing the stored fields as a doc transformer because by that time, all that text has wound up in the document cache already \u2013 and you don't always want that.  See: SOLR-10117   But sometimes you do, granted.  Another reason besides highlighting to want large fields out of the doc cache is to support atomic updates.\n\nBTW a field that one might want to remove from fl=* would almost certainly not have docvalues, so I think a performance discussion about the comparison isn't applicable. ",
            "id": "comment-15888964"
        },
        {
            "date": "2018-02-28T05:21:25+0000",
            "author": "Edwin Yeo Zheng Lin",
            "content": "So far we still do not manage to have this feature in Solr yet?\n\n\u00a0 ",
            "id": "comment-16379803"
        }
    ]
}