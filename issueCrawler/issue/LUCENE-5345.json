{
    "id": "LUCENE-5345",
    "title": "range facets don't work with float/double fields",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/facet"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "With LUCENE-5297 we generalized range faceting to accept a ValueSource.\n\nBut, when I tried to use this to facet by distance (< 1 km, < 2 km, etc.), it's not working ... the problem is that the RangeAccumulator always uses .longVal and assumes this was a double encoded as a long (via DoubleField).",
    "attachments": {
        "LUCENE-5345.patch": "https://issues.apache.org/jira/secure/attachment/12614909/LUCENE-5345.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13827785",
            "author": "Michael McCandless",
            "content": "Patch w/ simple test showing the bug ... I'm not sure how to fix yet. ",
            "date": "2013-11-20T15:57:49+0000"
        },
        {
            "id": "comment-13827827",
            "author": "Shai Erera",
            "content": "I'm not sure either if the problem is in ValueSource which implements longVal() to return (long) doubleVal(doc), or that we need to check the actual range type in RangeAccumulator and somehow pull the right value and pass it to the right method (e.g. maybe adding Range.accept variant for int/float/double)... we could have these variants throw UOE (or return false) at the base Range class and have each Range override that one that it cares about. But then it means we need to duplicate the code which traverses the ranges to work with the right value...\n\nI'll think about it more.\n\nAt any rate, I think the test should move to demo/ so that we don't introduce the dependency on expressions in the facet module. ",
            "date": "2013-11-20T16:41:16+0000"
        },
        {
            "id": "comment-13827829",
            "author": "Shai Erera",
            "content": "Or, we could modify the test to use a custom ValueSource which mimics expression's behavior (not encoding the double as long, but just casting). ",
            "date": "2013-11-20T16:42:10+0000"
        },
        {
            "id": "comment-13827874",
            "author": "Robert Muir",
            "content": "You dont even need a custom valuesource: they all behave this way (e.g. same as java.lang.Number): the bug is as mike describes.\n\nRangeFacetRequest always uses LongFieldSource, regardless of the type of Range the user passes in. ",
            "date": "2013-11-20T17:29:09+0000"
        },
        {
            "id": "comment-13827920",
            "author": "Shai Erera",
            "content": "I don't think that's the case (but I'm not near the code to double-check). LongFieldSource is only used in the ctor which takes a field name, and as documented - reads the values from the respective NDV field. Mike's test uses Expression and its ValueSource.\n\nI think a solution could be to separate RangeAccumulator into a NumericRangeAccumulator and ValueSourceRangeAccumulator. The former always reads from an NDV and takes whatever range. The latter could restrict to only taking DoubleRange, and always call vs.doubleVal, since that seems like the only API a ValueSource has to impl. Or, it takes any Range, but always calls vs.doubleVal and converts it to Long, and the Range can convert it back? ",
            "date": "2013-11-20T18:07:49+0000"
        },
        {
            "id": "comment-13836013",
            "author": "ASF subversion and git services",
            "content": "Commit 1546809 from Michael McCandless in branch 'dev/branches/lucene5339'\n[ https://svn.apache.org/r1546809 ]\n\nLUCENE-5345: split RangeFacetCounts into Long/DoubleRangeFacetCounts ",
            "date": "2013-12-01T12:21:55+0000"
        },
        {
            "id": "comment-13836015",
            "author": "Michael McCandless",
            "content": "On the LUCENE-5339 branch, I just made a change to split RangeFacetCounts into Long/DoubleRangeFacetCounts, and I removed FloatRange (leaving only Long/Double).  When the app needs to count ranges against a previously indexed FloatDocValuesField, it can use FloatFieldSource.  It seems to work well... the new test passes. ",
            "date": "2013-12-01T12:24:30+0000"
        },
        {
            "id": "comment-13836016",
            "author": "Shai Erera",
            "content": "Is it mandatory to have facet/ depend on expressions? Can't we do it under demo/ only, and use mock ValueSources for testing facet/? ",
            "date": "2013-12-01T12:24:55+0000"
        },
        {
            "id": "comment-13836026",
            "author": "ASF subversion and git services",
            "content": "Commit 1546812 from Michael McCandless in branch 'dev/branches/lucene5339'\n[ https://svn.apache.org/r1546812 ]\n\nLUCENE-5345: move the distance example to demo ",
            "date": "2013-12-01T13:31:06+0000"
        },
        {
            "id": "comment-13836027",
            "author": "Michael McCandless",
            "content": "Is it mandatory to have facet/ depend on expressions? Can't we do it under demo/ only, and use mock ValueSources for testing facet/?\n\nYou're right, I just moved it to demo/ and left a \"custom doubles values source\" test in facet/ ",
            "date": "2013-12-01T13:31:46+0000"
        },
        {
            "id": "comment-13862451",
            "author": "Michael McCandless",
            "content": "This was fixed with LUCENE-5339. ",
            "date": "2014-01-05T00:17:13+0000"
        },
        {
            "id": "comment-13867065",
            "author": "ASF subversion and git services",
            "content": "Commit 1556952 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1556952 ]\n\nLUCENE-5345: add new BlendedInfixSuggester ",
            "date": "2014-01-09T21:14:12+0000"
        },
        {
            "id": "comment-13867069",
            "author": "ASF subversion and git services",
            "content": "Commit 1556954 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1556954 ]\n\nLUCENE-5345: add new BlendedInfixSuggester ",
            "date": "2014-01-09T21:16:27+0000"
        },
        {
            "id": "comment-13867070",
            "author": "Michael McCandless",
            "content": "Woops, above commit was for LUCENE-5354 instead. ",
            "date": "2014-01-09T21:16:59+0000"
        },
        {
            "id": "comment-13867495",
            "author": "Shai Erera",
            "content": "You can try fixing the log message, I wonder if it will associate it then with the right JIRA issue. I think I've done it once while working on NDV updates. See the accepted answer here: http://stackoverflow.com/questions/304383/how-do-i-edit-a-log-message-that-i-already-committed-in-subversion (with a snippet from the SVN documentation). ",
            "date": "2014-01-10T04:43:49+0000"
        },
        {
            "id": "comment-13867676",
            "author": "Michael McCandless",
            "content": "OK I just fixed it!  Thanks for the tip Shai. ",
            "date": "2014-01-10T10:18:18+0000"
        }
    ]
}