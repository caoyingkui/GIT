{
    "id": "LUCENE-4126",
    "title": "Remove FieldType copy constructor",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently FieldTypes can be created using new FieldType(someOtherFieldType) which copies the properties and allows them to then changed.  This reduces readability since it hides what properties someOtherFieldType has enabled.  We should encourage users (and ourselves) to explicitly state what properties are enabled so to prevent any surprises.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-09T13:14:52+0000",
            "content": "Lets play out a few typical realistic scenarios that are not too expert:\n1. user has a text field and wants to enable term vectors (so they can use highlighting/MLT)\n2. user has a string field and wants to enable norms (so they can use index-time boosting)\n\nwhat does the before/after picture look like here? Is it easier? Is it trappy? ",
            "author": "Robert Muir",
            "id": "comment-13292335"
        },
        {
            "date": "2012-06-09T14:09:16+0000",
            "content": "Good question.  \n\nCurrently specifying your own FieldType means you have to use Field rather than StringField or TextField as neither of them accept a FieldType.  This is messy and basically the same problem that LUCENE-4101 is fixing for storing.  Hmm..\n\nIn relation to the the copy constructor issue, for scenario #1 currently users could do:\n\n\nFieldType myNewFieldType = new FieldType(TextField.TYPE_STORED);\nmyNewFieldType.setStoreTermVectors(true);\n\n\n\nWith the copy constructor removed, they would need to do:\n\n\nFieldType myNewFieldType = new FieldType();\nmyNewFieldType.setIndexed(...);\nmyNewFieldType.setStored(...);\n... // set other properties\nmyNewFieldType.setStoreTermVectors(true);\n\n\n\nIn the current case the user can easily rely on the pre-existing type and just change the property they're interested in.  In their code it would be clear what was changed since no other properties need to be set.  At the same time any changes to the pre-existing type would flow into their type without them being notified and they cannot scan over their code and see exactly what properties are set for a field, they'd have to look up the definition.\n\nWith the copy constructor removed, we make changing a property more of a task for the user since they would need to define all the properties themselves.  Yet at the same time they would be protected from any changes to pre-existing types and they could see in their code exactly what properties were set.  But it also wouldn't be so easily to see which property was specifying changed.\n\nI'm not really sure what's best, what do you think? ",
            "author": "Chris Male",
            "id": "comment-13292344"
        },
        {
            "date": "2012-06-09T14:15:08+0000",
            "content": "\nCurrently specifying your own FieldType means you have to use Field rather than StringField or TextField as neither of them accept a FieldType. This is messy and basically the same problem that LUCENE-4101 is fixing for storing. Hmm..\n\nActually i think this is ok: these are still expertish things but just not totally crazy.\n\nI dont understand the benefit removing this: having someone create a FieldType from scratch is crazy. Its way too ridiculous: too easy to forget to set tokenized to true or whatever.\nCreating a FieldType from scratch is pretty much only useful for committers or people extending things in super-expert ways.\n\nSo I think its clear whats best: we have to keep lucene useable. ",
            "author": "Robert Muir",
            "id": "comment-13292346"
        },
        {
            "date": "2012-06-09T14:25:53+0000",
            "content": "I can agree with that ",
            "author": "Chris Male",
            "id": "comment-13292350"
        },
        {
            "date": "2012-06-09T14:39:25+0000",
            "content": "Also i think today, anyone that wants to do things the way you describe can just create the FieldType from scratch already?\n\nthey can do this and set everything from scratch, add the field twice, whatever they want \n\nBut if we remove the ability to do simpler things like 'i want a TextField with term vectors enabled' or 'I want a StringField with index-time boosts', then I think thats a big loss to less advanced users, with no gain to the experts who can already do things from scratch anyway if they prefer to do that. ",
            "author": "Robert Muir",
            "id": "comment-13292354"
        },
        {
            "date": "2012-07-11T23:03:46+0000",
            "content": "bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment ",
            "author": "Hoss Man",
            "id": "comment-13412308"
        },
        {
            "date": "2012-08-07T03:41:30+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429715"
        },
        {
            "date": "2013-07-23T18:44:52+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717086"
        },
        {
            "date": "2014-04-16T12:54:44+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970863"
        }
    ]
}