{
    "id": "SOLR-2798",
    "title": "Local Param parsing does not support multivalued params",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As noted by Demian on the solr-user mailing list, Local Param parsing seems to use a \"last one wins\" approach when parsing multivalued params.\n\nIn this example, the value of \"111\" is completely ignored:\n\nhttp://localhost:8983/solr/select?debug=query&q={!dismax%20bq=111%20bq=222}foo",
    "attachments": {
        "SOLR-2798.patch": "https://issues.apache.org/jira/secure/attachment/12782350/SOLR-2798.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13119340",
            "date": "2011-10-03T14:49:51+0000",
            "content": "Yep - support for multiple values was on my long-term todo list... "
        },
        {
            "author": "Demian Katz",
            "id": "comment-14496510",
            "date": "2015-04-15T17:00:22+0000",
            "content": "Hello; it's been a few years, so I thought I'd check and see if there's been any movement on this issue. If no progress has been made, is there anything I can do to help? I haven't explored the Solr code base at all, but if somebody could give me a rough idea of where the functionality is implemented, I could certainly take a stab at building a patch! "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15096728",
            "date": "2016-01-13T18:21:31+0000",
            "content": "Did a bit of digging on my own. Looks like the problem lies here:\n\nhttps://github.com/apache/lucene-solr/blob/74e96fa51cfed251fa516d496e126212413cbafc/solr/core/src/java/org/apache/solr/search/QueryParsing.java#L94\n\nThe parseLocalParams() function takes a target parameter which is a Map<String, String>. Do we perhaps need to change this to a Map<String, String[]> and then adjust all calling code to deal with the String array in the map? This seems to have fairly broad-reaching consequences (such as impacting the MapSolrParams class). As a newcomer to the code base, I'm hesitant to attempt any such refactoring... but if anyone has suggestions for a general course of action, I'm willing to put some time into attempting something. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15096748",
            "date": "2016-01-13T18:38:57+0000",
            "content": "My off the cuff personal opinions w/o reviewing the code and all usages:\n\n\n\tthe local param parsing should produce an instance of SolrParams\n\t\n\t\tgiven the way the \"int\" return value is used, i guess that would mean the \"target\" param should be changed to take in a ModifiableSolrParams instance.\n\t\n\t\n\tthe simplest way to go about this, would probably be:\n\t\n\t\trefactor the guts of the current method to implement this new API (correctly)\n\t\tadd back a deprecated method with the old signature that delegates to the new API and uses the result to populate it's Map<String,String> in a back compat way\n\t\tstart converting all existing usages of the (now deprecated) old method API to the one that uses ModifiableSolrParams\n\t\n\t\n\n\n\n...the key question being: how hard will that last step be?  hopefully not too bad.\n\n\n\nOn a tangential note: Demian, i would like to sincerely thank you for sticking with this issue \u2013  both your previous offer to help, and your more recent proposed solution \u2013 even though you never got any responses. "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15096762",
            "date": "2016-01-13T18:43:43+0000",
            "content": "That definitely sounds reasonable to me. I'll see if I can get anywhere with this. "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15096910",
            "date": "2016-01-13T20:13:12+0000",
            "content": "How does this look?\n\nhttps://github.com/apache/lucene-solr/compare/trunk...demiankatz:solr-2798-fix?expand=1\n\nSome notes/comments:\n\n1.) I'm pretty confident that my refactoring of parseLocalParams() is sound, as I added some tests and confirmed that they passed before and after my work.\n\n2.) Speaking of those new tests, I'm not sure if they are in the most appropriate place, or if we even want to keep the map-oriented ones in the long term since those methods should be deprecated.\n\n3.) Speaking of deprecated methods, I didn't do anything to flag them \u2013 not sure what the convention is in this project.\n\n4.) As of this writing, I'm still running the full test suite to see if my other refactoring (to use the new parseLocalParams instead of the old) is okay. Not sure if there are more targeted tests that need to be written to truly confirm this. In any case, most of my changes seemed pretty straightforward, so I went ahead and committed them to my branch since I expect the tests will run for a couple of hours and I wanted to get this done before going home for the day. If I see any breaks, I'll fix them tomorrow.\n\nI'll be interested to hear your thoughts... and thanks for your guidance, which was absolutely invaluable in getting this far! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15097125",
            "date": "2016-01-13T22:17:47+0000",
            "content": "Demian: I haven't tested your code out, but at first glance it seems great to me - if that's really all the changes that were needed to fix all existing usages of the parse method it's much more straight forward then I thought and i'm seriously embarrassed this bug has been arround so long\n\n2.) Speaking of those new tests, I'm not sure if they are in the most appropriate place, or if we even want to keep the map-oriented ones in the long term since those methods should be deprecated.\n\nConsidering how simple/straight forward this is, it's probably fair game to be backported to the 5x branch, which means having those tests & deprecated methods in place is a good idea \u2013 that way we can leave the deprecated method (with the tests you add) in the 5x branch, and only delete it from trunk (so if someone has a custom plugin it will still compile in 5x w/o any changes)\n\n3.) Speaking of deprecated methods, I didn't do anything to flag them \u2013 not sure what the convention is in this project.\n\nstandard java deprecations, here's an existing example pulled at random from the code...\n\n\n    /**\n     * @param aliasName the alias name\n     * @deprecated use {@link #setAliasName(String)} instead\n     */\n    @Deprecated\n    public void setCollectionName(String aliasName) {\n      this.aliasName = aliasName;\n    }\n\n\n\nNot sure if there are more targeted tests that need to be written to truly confirm this.\n\nThe one thing I would really like to see is some additional higher level tests showing that these underlying changes are having the desired/expected impact on the user facing issues.  \n\nFor example: the summary report of this has a dismax example with two \"bq\" localparams.   With your patch, we should be able to add a test to QueryEqualityTest showing that query is parsed equivalently to a request with 2 top level \"bq\" params.  I can't remember if i made that example up or if it came from your original email, but if you have a different example of how this bug is impacting you at a higher level, let's add some explicit tests of that as well.  w/o higher level tests like this, it won't necessarily be obvious to anyone reviewing/refactoring the code in the future why those tests exist \u2013 they show what output comes from that input, but not why that output is important.\n\nMake sense? "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15098209",
            "date": "2016-01-14T14:56:29+0000",
            "content": "Thanks again for the pointers!\n\nThe full test suite completed overnight, and I don't appear to have broken any existing tests. I believe the solution really is as simple as it looks.\n\nI've added deprecations (and some missing javadoc) here:\n\nhttps://github.com/demiankatz/lucene-solr/commit/107f6224aa33edea08a961adcb2e57b2cc96e69e\n\nI've added a test to QueryEqualityTest which fails on trunk but passes in my branch here, based on your bf example in the ticket:\n\nhttps://github.com/demiankatz/lucene-solr/commit/ed544b6d726e4e79319cfb5808cc3fdfde6e0f26\n\nI'm feeling pretty good about this \u2013 should I open a pull request, or is there anything more you would like me to do first? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15098221",
            "date": "2016-01-14T15:02:14+0000",
            "content": "Nice work Demian Katz!  Looks like either Anshum or Hoss will see this one through, but happy to help get this one in as well if needed. "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15098259",
            "date": "2016-01-14T15:37:25+0000",
            "content": "Thanks, Erik.\n\nAlso, one final piece of confirmation: I reproduced the bug as it manifests in VuFind using VuFind + Solr 5.4; then I replaced Solr 5.4 with a build of my branch, and the incorrect behavior was resolved. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15098413",
            "date": "2016-01-14T17:05:05+0000",
            "content": "should I open a pull request, or is there anything more you would like me to do first?\n\nideally either open a pull request that refers to SOLR-2798 (so our git bot picks it up) or attach a comprehensive patch with all the changes.\n\nI'll try to do a comprehensive review later today. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15098486",
            "date": "2016-01-14T17:43:12+0000",
            "content": "GitHub user demiankatz opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/216\n\n    Resolution for SOLR-2798 (add support for multi-valued localParams)\n\n    Previous to this fix, when using localParams syntax, a repeated parameter would be handled with a \"last value wins\" policy. This PR changes the behavior to allow all values of the parameter to be accepted, which seems like it should be the expected behavior, since many Solr parameters are intended to be repeatable.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/demiankatz/lucene-solr solr-2798-fix\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/216.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #216\n\n\ncommit b991e72b04a4de4c35f4fa1dc1338eafb67756d8\nAuthor: Demian Katz <demian.katz@villanova.edu>\nDate:   2016-01-13T19:43:13Z\n\n    Allow parseLocalParams to target a ModifiableSolrParams object.\n\n\tProgress on SOLR-2798.\n\n\n\ncommit 314a58c593de4cf7ed80bffc7b3e8034d17143be\nAuthor: Demian Katz <demian.katz@villanova.edu>\nDate:   2016-01-13T20:06:37Z\n\n    Switch calls to parseLocalParams to use ModifiableSolrParams instead of Map.\n\n\tSee SOLR-2798.\n\n\n\ncommit 107f6224aa33edea08a961adcb2e57b2cc96e69e\nAuthor: Demian Katz <demian.katz@villanova.edu>\nDate:   2016-01-14T14:12:27Z\n\n    Deprecated obsolete methods; added comments.\n\ncommit ed544b6d726e4e79319cfb5808cc3fdfde6e0f26\nAuthor: Demian Katz <demian.katz@villanova.edu>\nDate:   2016-01-14T14:51:24Z\n\n    Added higher-level test for localParams fix.\n\n "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15098488",
            "date": "2016-01-14T17:44:12+0000",
            "content": "As GitHub Bot has pointed out, I've just opened PR #216 with these changes. Thanks again for your help, and please let me know if I can do any more to improve this. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15098699",
            "date": "2016-01-14T19:35:22+0000",
            "content": "\nHere's Demian's PR as a unified patch with a few more tweaks based on my review...\n\n\n\tdeleted a really old/obsolte \"note to self\" Demian had acidently migrated somewhere it made even less sense\n\tadded a few more asserts to QueryEqualityTest & DisMaxRequestHandlerTest for good measure\n\tnoticed that QueryParsing.getLocalParams was still delegating to the old Map version\n\t\n\t\tadded asserts to SimpleFacetsTest (using multiple facet.range.other localparams) to demonstrate how that still causes the bug in some cases\n\t\tfixed QueryParsing.getLocalParams so SimpleFacetsTest started passing again\n\t\n\t\n\n\n\n\nTests all pass. \n\nStill running precommit & then i'll move forwrad with trunk & start backporting "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15098746",
            "date": "2016-01-14T19:54:59+0000",
            "content": "Commit 1724679 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1724679 ]\n\nSOLR-2798: Fixed local params to work correctly with multivalued params "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15098818",
            "date": "2016-01-14T20:46:20+0000",
            "content": "Commit 1724686 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724686 ]\n\nSOLR-2798: Fixed local params to work correctly with multivalued params (merge r1724679) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15098907",
            "date": "2016-01-14T21:31:53+0000",
            "content": "Commit 1724699 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1724699 ]\n\nSOLR-2798: remove deprecated methods from trunk "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15098909",
            "date": "2016-01-14T21:33:21+0000",
            "content": "I think that wraps it up \u2013 thanks again for your patience and persaverience Demian. "
        },
        {
            "author": "Demian Katz",
            "id": "comment-15101766",
            "date": "2016-01-15T13:34:55+0000",
            "content": "Fantastic! Glad I could help \u2013 it was nice to have a little taste of Solr internals; if I run into another bug like this in the future, I'll be braver about investigating it directly. "
        }
    ]
}