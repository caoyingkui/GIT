{
    "id": "SOLR-11495",
    "title": "Reduce the list of which query parsers are loaded by default",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.0",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Virtually all of the query parsers that Solr supports are enabled by default, in a map created in QParserPlugin.java.\n\nTo reduce the possible attack surface of a default Solr installation, I believe that the list of default parsers should be limited to a small handful of the full list that's available. I will discuss specific ideas for that list in comments.\n\nI think the bar should be very high for admission to the default parser list. That list should only include those that are most commonly used by the community. Only the most common parsers will have had extensive review for security issues.\n\nEdit: moved description from \"Docs Text\" field where it was initially added mistakenly.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-16T19:43:42+0000",
            "content": "This is how I think we should initially define the default list:\n\n\n    map.put(LuceneQParserPlugin.NAME, LuceneQParserPlugin.class);\n    map.put(FunctionQParserPlugin.NAME, FunctionQParserPlugin.class);\n    map.put(DisMaxQParserPlugin.NAME, DisMaxQParserPlugin.class);\n    map.put(ExtendedDismaxQParserPlugin.NAME, ExtendedDismaxQParserPlugin.class);\n\n\n\nThis list corresponds to these parser names:  lucene, func, dismax, edismax\n\nI almost didn't include the function query parser in that list.  It is one of the more complex parsers we have, and therefore might be potentially vulnerable to exploit ... but I think it's probably so commonly used that it would break a lot of installs to remove it.\n\nFor a lot of the remaining parsers, there are strong arguments for inclusion in the default list, but anytime a parser is considered for inclusion, we need to weigh how widely used that parser is against the possible risks of increasing the attack surface.  Is the terms query parser likely to be exploitable?  That would take a code review to determine. ",
            "author": "Shawn Heisey",
            "id": "comment-16206467"
        },
        {
            "date": "2017-10-16T19:48:32+0000",
            "content": "It would be nice if this were paired with a convenient but reasonably secure way to enable anything no longer included by default. By convenient, I mean centralized... i.e. not editing a file on every deployed node. ",
            "author": "Gus Heck",
            "id": "comment-16206486"
        },
        {
            "date": "2017-10-16T20:06:33+0000",
            "content": "XML is the special case here... it's introduced security exploit after security exploit because of it's ability to make HTTP calls itself.\nI think disabling other parsers is the wrong approach and will frustrate users while not really increasing security (they are not inherently less secure if you exclude XML).\nIn addition, the JSON query DSL depends on these qparsers (that's how it's boolean was implemented).\nMany of these are \"plugins\" instead of \"builtins\" just out of a matter of convenience, and I'd argue they are inherently an integral part of the query language. ",
            "author": "Yonik Seeley",
            "id": "comment-16206526"
        },
        {
            "date": "2017-10-16T23:22:41+0000",
            "content": "If the outcome of this (after discussion and investigation) is just to remove the XML parser, I'm OK with that.\n\nI do think it would be a good idea to take a close look at each parser enabled by default just to survey the functionality and make sure that nothing can get out. ",
            "author": "Shawn Heisey",
            "id": "comment-16206765"
        },
        {
            "date": "2017-10-17T01:33:50+0000",
            "content": "What would enabling a disabled parser look like? Would that mean a flag passed in at startup?\n\nP.s. Is there a reason the case description is instead in the \"Docs Text\" field? That feels new, if not strange. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16206889"
        },
        {
            "date": "2017-10-17T08:54:40+0000",
            "content": "Irrespective of parsers being loaded by default or not, I've started SOLR-11496 umbrella ticket to add javadocs with examples for any QParserPlugin classes that currently do not have them.\n\nMight there also be an opportunity here to consider moving some of the more exotic parsers (I would count defType=xmlparser into that category and I'm sure there are others) out of solr/core and into a new contrib? Say with 8.0 these parsers would be a contrib only? ",
            "author": "Christine Poerschke",
            "id": "comment-16207184"
        },
        {
            "date": "2017-10-17T13:51:36+0000",
            "content": "Christine Poerschke, IMHO: I don't know that exotic parsers really need to be contrib.   We just need to ensure that they're not loaded by default.  They can always be enabled in solrconfig.xml if somebody really needs the functionality and understands the risks.  I'm not opposed to the idea of a contrib module, I just don't think it's really necessary.  Let's see what Yonik has to say on the subject.\n\nAlexandre Rafalovitch, if we remove the automatic load of xmlparser, I think this is the proper syntax in solrconfig.xml (top level, right under <config>) to re-enable it:\n\n\n<queryParser name=\"xmlparser\" class=\"solr.XmlQParserPlugin\" />\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-16207667"
        },
        {
            "date": "2017-10-17T14:23:58+0000",
            "content": "There are two types of QParsers: those that implement a full query language (like XML parser), and those that implement a little bit of necessary functionality and are meant to be composable and used within other qparsers.\n\nFor example, take the \"field\" qparser: it was done so clients could do a simple term filter (like when doing facet drilldowns) without having to know/care about any kind of escaping rules for the Lucene parser.\n\nQParsers are the only implemented entry points into so much of Solr's query functionality (join, graph, block-join, frange, spatial, json-dsl, payload, etc)\nAside from the back compat issues, and rendering the JSON Query DSL useless, removing certain parsers for \"security\" reasons means that people would be wary of enabling them (and we'll get tons of questions like \"is it safe to enable XYZ?\"). We should fix any security vulnerabilities we know about (and parsers are no more vulnerable than other parts of the system like faceting,  highlighting, etc).\n\nAside from that, we should take things on a case-by-case basis.  For example, a query parser that invoked Tika.... IMO that we probably would probably not want to enable by default and put in contrib instead. ",
            "author": "Yonik Seeley",
            "id": "comment-16207700"
        },
        {
            "date": "2017-10-17T17:03:28+0000",
            "content": "+1 to everything Yonik has said here.\n\nI think instead of removing registered parsers, we should tackle SOLR-11501\n\n+0 to removing the pre-registered xmlparser (in particular) so that you have to explicitly register it. ",
            "author": "David Smiley",
            "id": "comment-16207916"
        },
        {
            "date": "2018-08-23T20:39:51+0000",
            "content": "I think we should keep them enabled as is, including xmlparser, and instead focus on fixing security issues along the way as well as document how to disable qparsers in \u201ctaking Solr to production\u201d chapter. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16590784"
        }
    ]
}