{
    "id": "SOLR-724",
    "title": "CoreDescriptor.{get,set}CoreProperties should probably not be public (but package private)",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Exposing them precludes being ever able to fill the CoreDescriptor with property expressions.\nSince a 'public' method can not be removed easily, this is a future problem.\nBesides, as is, their is no reason for them to be public.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625277",
            "date": "2008-08-25T08:39:05+0000",
            "content": "I think you mean get/set coreProperties.\n\nI don't think there's a problem. These methods can continue to be used for properties (evaluated expressions). We can always keep another object for un-evaluated expressions for persisting them back. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625287",
            "date": "2008-08-25T09:25:00+0000",
            "content": "Yes, correct; properties, not expressions.\nThey are unnecessary since the CoreContainer & each SolrCore resource loader could (will hopefully) contain the evaluated properties.\nThat would make 2 places where we can access them & this seems redundant.\nI'm just trying to reduce public method exposure. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625289",
            "date": "2008-08-25T09:33:26+0000",
            "content": "I'm just trying to reduce public method exposure. \n\nThere is no harm is exposing methods as long as we are exposing immutable stuff. It can actually enable a lot of components to get information w/o raising new issues in JIRA "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625305",
            "date": "2008-08-25T09:55:50+0000",
            "content": "I'm confused about when the 'what-if' rule can apply or not wrt public methods.\nMy understanding was that till a use-case exists, we shouldn't publicly expose the method ( and it's been quite a hard lesson...  )\nBesides, the SolrResourceLoader is available from everywhere. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625319",
            "date": "2008-08-25T11:12:13+0000",
            "content": "Besides, the SolrResourceLoader is available from everywhere. \n\nBut , if there is something private in that class it should be fine . right?\n\nMy understanding was that till a use-case exists..\nBecause Solr is also an API there are a lot of requesthandlers which people write may find some info useful. We can go one step ahead and think \"will it hurt if this is public?\" . Moreover , even if something is private I can easily access the value through reflection. So the kind of security it offers is just not real\n\nThe only advantage I see is that , if you wish to remove something it is easy if something is not public. So if some feature is experimental it can be kept not public\n\nAnother question to ask before making things public is that can the user can alter some state in a way that can affect the functionality. If it is purely a read-only state I guess it should be OK\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625346",
            "date": "2008-08-25T13:08:54+0000",
            "content": "When a method is public, it also has to be maintained & up-compatible; if you write a component that uses some private methods or members, that's your prerogative but there is no guarantee from Apache that it's existence and behavior will remain in the future.\nIn this issue, I'm stating that exposing Properties in the CoreDescriptor is hindering future evolution because they will have to be maintained, that the same information should be available from what I consider a narrower scope location that does not reduce the  functional possibilities.\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625369",
            "date": "2008-08-25T14:21:08+0000",
            "content": "I feel that CoreContainer and CoreDescriptor seem to be the most logical place to find the properties since they directly correspond to the <solr> and <core> elements in solr.xml and SolrResourceLoader is the most logical place to use them since that's what we use to load config files. I think it should be OK to keep both the ways.\n\nThoughts? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625377",
            "date": "2008-08-25T14:37:56+0000",
            "content": "\nObviously different \nIn my mind, these are resources of the core-container / cores; resources are accessed through their respective ResourceLoader.\nAnd the CoreDescriptor is, at its name hints, a parameter; it should not play any active role besides carrying data to create a SolrCore (and should not be used beyond that role).\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12625390",
            "date": "2008-08-25T15:02:04+0000",
            "content": "I agree with Henri.\n\nHaving these methods public ties core properties to the CoreDescriptor for no apparent good reason. This has the possibility of being an annoyance down the road. Unless specifically needed, why create this burden? Keeping the link between core properties and the descriptor package private allows for more flexibility in the future - and will keep users happier - we don't want to have to deprecate and change user exposed APIs if we can help it.\n\nMy understanding was that till a use-case exists, we shouldn't publicly expose the method ( and it's been quite a hard lesson...  )\n\nI think this is a great rule of thumb, and should be the guiding principal here. Whats the use case that this solves beyond what using the resource loader provides? The benefit should clearly outweigh having to maintain/support the public API.\n\nAnother question to ask before making things public is that can the user can alter some state in a way that can affect the functionality. If it is purely a read-only state I guess it should be OK\n\nI think it goes further than this - there is a public link between the descriptor and the core properties. Its not a huge issue obviously, but there should be good reason for publicly linking two classes I think - the fact that the implementation contains the linked class privately doesn't seem like a very good reason.\n\n\n\tMark\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625395",
            "date": "2008-08-25T15:17:05+0000",
            "content": "Committed revision 688751.\n\nBowing down to public demand \n\nChanging the methods to package private to insulate the public API from internal changes. "
        }
    ]
}