{
    "id": "LUCENE-827",
    "title": "Lucene Spell Index Not giving Proper Result",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "I am passing List of words 'Mayur Vihar Center Circle Udyog Vihar Noida Gurgaon' to create spell index from Lucene Index. when i searches for correct word for 'Centrer' i.e 'Center', it does'nt find it. I checked it whether its there in spell Index, i didnt find it there.\n\nBy making the spell Index directly from Plain text Dictionary gives me the correct word for 'centre' i.e 'center'. I cant understand why it is behaving like this.\n\n\n\nAlso attaching the source -: \n\nCreateDataStructure creates the Lucene Index and initializeSpellChecker initializes the spell Checker.\n\n\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.sql.SQLException;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.search.spell.LuceneDictionary;\nimport org.apache.lucene.search.spell.SpellChecker;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\n\npublic class SpellCheckImpl implements SpellCheck{\n\n\n\tprivate String SIMPLE_DIRECTORY;\n\tprivate String SPELL_DIRECTORY;\n\tprivate String DATA_TEXT_FILE;\n\tprivate String DEFAULT_FIELD=\"field\";\n\n\n\n\tprivate SpellCheckImpl(){\n\n\t}\n\n\t//Configure the directories\n\n\tpublic SpellCheckImpl(String directoryPath){\n\n\t\tFile f = new File(directoryPath);\n\n\t\tif(f.isDirectory()){\n\n\t\t\tthis.SIMPLE_DIRECTORY = directoryPath+\"/test\";\n\t\t\tthis.SPELL_DIRECTORY = directoryPath+\"/sp\";\n\n\t\t\tFile simple = new File(this.SIMPLE_DIRECTORY);\n\t\t\tFile spell = new File(this.SPELL_DIRECTORY);\n\n\t\t\tif(!simple.isDirectory())\n{\n\t\t\t\tsimple.mkdir();\n\t\t\t}\n\n\t\t\tif(!spell.isDirectory())\n{\n\t\t\t\tspell.mkdir();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\n\tInitialize the Dictionary with given Keywords\n\t */\n\tpublic void initialize(String filePath){\n\n\n\n\t\tthis.DATA_TEXT_FILE = filePath;\n\n\t\ttry\n{\n\t\t\t\n\t\t\tcreateDataStructure(SIMPLE_DIRECTORY);\n\t\t\tinitializeSpellChecker(SIMPLE_DIRECTORY,SPELL_DIRECTORY);\n\t\t\t\n\t\t}\ncatch(Exception e)\n{\n\t\t\tSystem.out.println(\"Initialization failed \"+e.getMessage());\n\t\t}\n\t}\n\n\n\t/**\n\n\tThis method creates the index for the list of good words at the given location.\n\t@param origDirLocation\n\t@param dictionaryType\n\t@throws IOException\n\t@throws InstantiationException\n\t@throws IllegalAccessException\n\t@throws ClassNotFoundException\n\t@throws SQLException\n\t */\n\tprivate void createDataStructure(String origDirLocation) throws IOException, InstantiationException, \n\tIllegalAccessException, ClassNotFoundException, SQLException\n{\n\n\t\tDirectory directory = FSDirectory.getDirectory(origDirLocation, true);\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tIndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n\t\t\n\t\tlong time=System.currentTimeMillis();\n\t\t\n\t\tInputStream is = null;\n\t\t\n\t\tis = new FileInputStream(new File(DATA_TEXT_FILE));\n\t\t\n\t\tDocument doc = new Document();\n\t\t\n\t\t//doc.add(Field.Text(DEFAULT_FIELD, (Reader) new InputStreamReader(is)));\n\t\tdoc.add(new Field(DEFAULT_FIELD, \"Mayur Vihar Center Circle Udyog Vihar Noida Gurgaon\", Field.Store.YES, Field.Index.TOKENIZED));\n\t\t\n\t\t\n\t\tiwriter.addDocument(doc);\n\t\tiwriter.optimize();\n\t\ttime=System.currentTimeMillis()-time;\n\t\tSystem.out.println(\"time to Create Lucene Index \"+time);\n\t\t\n\t\tiwriter.close();\n\n\t}\n\n\n\n\n\n\t/**\n\n\tThis method creates the spell checker dictionary from the words directory at the specified location.\n\t@param origDirLocation\n\t@param spellDirLocation\n\t@throws IOException\n\t */\n\tprivate void initializeSpellChecker(String origDirLocation, String spellDirLocation) throws IOException\n{\n\t\tFSDirectory origDir = FSDirectory.getDirectory(origDirLocation, false);\n\t\tFSDirectory spellDir = FSDirectory.getDirectory(spellDirLocation, true);\n\t\t\n\t\tlong time=System.currentTimeMillis();\n\t\t\n\t\tIndexReader indexReader = null;\n\t    indexReader = IndexReader.open(origDir);\n\t    \n\t    SpellChecker  spellChecker = new SpellChecker(spellDir);\n\n\t    spellChecker.indexDictionnary(new LuceneDictionary(indexReader, DEFAULT_FIELD));\n\t    \n\t    time=System.currentTimeMillis()-time;\n\t    \n\t\tSystem.out.println(\"time to build Spell Checker Dictionary \"+time);\n\t\t\n\t}\n\n\n\n\n\tpublic String[] GetMatches(String badWord) throws ParseException \n\t{\n\t\tSpellChecker spellChecker = null;\n\t\ttry\n\t\t{\n\t\t\tspellChecker = new SpellChecker(FSDirectory.getDirectory(SPELL_DIRECTORY,false));\n\n\t\t\tspellChecker.setAccuraty(0);\n\n\t\t\tif(spellChecker.exist(badWord))\n{\n\t\t\t\tSystem.out.println(\"here\");\n\t\t\t}\n\n\t\t\tString[] similarWords = spellChecker.suggestSimilar(badWord, 25);\n\n\t\t\treturn similarWords;\n\t\t} \n\t\tcatch (IOException e) \n\t\t{\n\t\t\tthrow new ParseException(e.getMessage());\n\t\t}\n\t}\n\n\n\tpublic String GetBestMatch(String badWord) throws ParseException\n\t{\t\n\n\t\tString[] correctWords = GetMatches(badWord);\n\n\t\tif(correctWords != null && correctWords.length > 0)\n{\n\t\t\treturn correctWords[0];\n\t\t}\n\n\t\treturn \"No Correct Spelling Found\";\n\n\t}\n\n\tpublic void addWords(String word) throws IOException{\n\n\n\t\tlong time=System.currentTimeMillis();\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tIndexWriter writer   = new IndexWriter(SIMPLE_DIRECTORY, analyzer, false);\n\n\t\tif(word != null && !\"\".equals(word))\n{\n\t\t\tDocument doc = new Document();\n\t\t\t\tdoc.add(new Field(DEFAULT_FIELD, word , Field.Store.YES,\n\t\t\t\t\t\tField.Index.TOKENIZED));\n\t\t\twriter.addDocument(doc);\n\t\t}\n\n        writer.optimize();\n        writer.close();\n        time=System.currentTimeMillis()-time;\n        initializeSpellChecker(SIMPLE_DIRECTORY,SPELL_DIRECTORY);\n\t\tSystem.out.println(\"time to add words \"+time);\n\t}\n\n\n\t\tpublic void addWords(String[]\tword) throws IOException{\n\n\t\tlong time=System.currentTimeMillis();\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tIndexWriter writer   = new IndexWriter(SIMPLE_DIRECTORY, analyzer, false);\n\n\t\tif(word != null){\n\t\t\tfor(int i=0;i<word.length;i++){\n\t\t\t\tif(word[i] != null && !\"\".equals(word[i]))\n{\n\t\t\t\tDocument doc = new Document();\n\t\t\t\t\tdoc.add(new Field(DEFAULT_FIELD, word[i] , Field.Store.YES,\n\t\t\t\t\t\t\tField.Index.TOKENIZED));\n\t\t\t\t\twriter.addDocument(doc);\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t}\n\n        writer.optimize();\n        writer.close();\n        time=System.currentTimeMillis()-time;\n        initializeSpellChecker(SIMPLE_DIRECTORY,SPELL_DIRECTORY);\n\t\tSystem.out.println(\"time to add words \"+time);\n\t}\n\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-03-09T20:13:51+0000",
            "content": "\nif you have questions about using any lucence java code, pelase start be emailing the java-user mailing list ... bugs should only be filed once you have confirmed a bug truely does exist (after discussion with other users who confirm that your assumptions/methodology are correct)\n\nBased on a quick reading of your problem description, i would suspect that if SpellChecker works for you when you build a \"Dictionary\" from plain text,  but not when you use a LuceneDictionary it may be because of the Analyzer you are using when building your initial index ... but please followup in email on the user list ",
            "author": "Hoss Man",
            "id": "comment-12479695"
        }
    ]
}