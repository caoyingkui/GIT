{
    "id": "LUCENE-1881",
    "title": "Non-stored fields are not copied in writer.addDocument()?",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4.1",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "We would like to modified stored documents properties.  The method is to use IndexReader to open all files, modified some fields, and copy the document via addDocument() of IndexWriter to another index.  But all fields that are created using Field.Store.NO are no longer available for searching.\n\nSample code in jsp is attached:\n\n<%@ page language=\"java\" import=\"org.apache.lucene.analysis.standard.StandardAnalyzer;\"%>\n<%@ page language=\"java\" import=\"org.apache.lucene.document.*;\"%>\n<%@ page language=\"java\" import=\"org.apache.lucene.index.*;\"%>\n<%@ page language=\"java\" import=\"org.apache.lucene.search.*;\"%>\n<%@ page contentType=\"text/html; charset=utf8\" %>\n<%\n    // create for testing\n    IndexWriter writer = new IndexWriter(\"/opt/wwwroot/351/Index/test\", new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"A\", \"1234\", Field.Store.NO , Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"B\", \"abcd\", Field.Store.NO , Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    // check ok\n    Query q = new TermQuery(new Term(\"A\", \"1234\"));\n    Searcher s = new IndexSearcher(\"/opt/wwwroot/351/Index/test\");\n    Hits h = s.search(q);\n    out.println(\"# of document found is \" + h.length());        // it is ok\n    // update the document to change or remove a field\n    IndexReader r = IndexReader.open(\"/opt/wwwroot/351/Index/test\");\n    doc = r.document(0);\n    r.deleteDocument(0);\n    r.close();\n    doc.removeField(\"B\");\n    writer = new IndexWriter(\"/opt/wwwroot/351/Index/test1\", new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n    // test again\n    s = new IndexSearcher(\"/opt/wwwroot/351/Index/test1\");\n    h = s.search(q);\n    out.println(\"<P># of document found is now \" + h.length());\n    r = IndexReader.open(\"/opt/wwwroot/351/Index/test1\");\n    out.println(\"<P> max Doc is \" + r.maxDoc());\n%>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-09-02T00:55:39+0000",
            "content": "there is no bug in addDocument.\n\nthe behavior observed is a basic tenant of retrieving documents from an IndexReader...\n\nhttp://lucene.apache.org/java/2_4_1/api/core/org/apache/lucene/index/IndexReader.html#document(int)\nReturns the stored fields of the nth Document in this index. \n\nSee also...\nhttp://lucene.apache.org/java/2_4_1/api/core/org/apache/lucene/document/Document.html\n...Note that fields which are not stored are not available in documents retrieved from the index, e.g. with ScoreDoc.doc, Searcher.doc(int) or IndexReader.document(int). \n\n\n ",
            "author": "Hoss Man",
            "id": "comment-12750210"
        },
        {
            "date": "2009-09-02T00:56:50+0000",
            "content": "REDACTED ... comment put in wrong issue ",
            "author": "Hoss Man",
            "id": "comment-12750211"
        },
        {
            "date": "2009-09-02T00:58:22+0000",
            "content": "reopening to mark with correct resolution ",
            "author": "Hoss Man",
            "id": "comment-12750214"
        },
        {
            "date": "2009-09-02T02:47:08+0000",
            "content": "Thanks Hoss for this quick response.  Where could I get the fix for testing?  We are rushing for a roll out requiring this fix, thanks. ",
            "author": "Wai Wong",
            "id": "comment-12750243"
        },
        {
            "date": "2009-09-02T03:05:23+0000",
            "content": "I re-read the comments again.  Seems that this is not addressed as a bug.  We know that the non-stored fields are not retrievable, but they are searchable in the original db.  However, after copying to the new index db, the same field is no longer searchable.  We just confirmed that a simple copy without any modification also cannot retain the information.\n\nI can imagine maybe the information related to non-stored fields are not stored within the documents, but instead in some global area.  I checked the document but could not get any hint where they are and how to copy them.  Please point me to the right direction if possible.\n\nThanks. ",
            "author": "Wai Wong",
            "id": "comment-12750247"
        },
        {
            "date": "2009-09-02T06:05:18+0000",
            "content": "There is no practical solution for this, indexing is a one-way action and not reversible. Because of this we offer \"stored\" fields as a store for the orginal or additional information to the indexed documents (e.g. for storing the original strings indexed).\n\nLucene works with an \"inverted index\" (http://en.wikipedia.org/wiki/Inverted_index). During inversion of these non-stored fields (indexed ones), the fields are tokenized (which is a non-reversible action, because stop-words are removed, terms are normalized and so on) and these terms are stored in a global unique list off all terms. The index then only contains the references to the document ids (one-way from term -> document id). For your problem you need to get the list of terms for one document which is not easily possible (there is some possibility to iterate over all terms/docs and try to rebuild the terms for a document, but you never get back the old indexed contents and its very slow. Look into the tool \"Luke\" for this, which is a GUI for Lucene that has some code to do this).\n\nYou can only add your already indexed contents to another index using IndexWriter.addIndexes(). In this case they stay searchable but cannot be modified. ",
            "author": "Uwe Schindler",
            "id": "comment-12750284"
        },
        {
            "date": "2009-09-02T06:52:21+0000",
            "content": "I searched a few other discussions and confirmed this behavior, and the Lazy Load feature was introduced to compensate the penalty of storing all these fields.  The problem now is that the Lazy Load feature is only applicable to IndexReader, not IndexSearcher.  That means I have to load all contents in searching even if I am not going to use them, just because I must keep the possibility of modifying the index db.  I am indexing large number of files and this is a concern for me.\n\nI suppose a similar method like IndexReader.document(int n, FieldSelector fieldSelector) should also be provided for IndexSearcher as IndexSearcher is much more frequently than IndexReader in most cases.\n\nPlease correct me if I am wrong. ",
            "author": "Wai Wong",
            "id": "comment-12750296"
        },
        {
            "date": "2009-09-02T07:12:25+0000",
            "content": "IndexSearcher has this method: http://lucene.apache.org/java/2_4_1/api/org/apache/lucene/search/IndexSearcher.html#doc(int, org.apache.lucene.document.FieldSelector)\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-12750307"
        },
        {
            "date": "2009-09-02T07:35:51+0000",
            "content": "Thanks.  I just checked Searcher and forgot to check IndexSearcher.  I shall try this out and see if the performance is ok, especially the overhead in adding new entries and optimizing/merging the indexes.\n\nIf not, I would turn back and use my own way of buffering the non-Stored fields.\n\nThanks for the support. ",
            "author": "Wai Wong",
            "id": "comment-12750315"
        }
    ]
}