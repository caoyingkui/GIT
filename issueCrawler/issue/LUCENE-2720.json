{
    "id": "LUCENE-2720",
    "title": "IndexWriter should throw IndexFormatTooOldExc on open, not later during optimize/getReader/close",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff of LUCENE-2618 and also related to the original issue LUCENE-2523...\n\nIf you open IW on a too-old index, you don't find out until much later that the index is too old.\n\nThis is because IW does not go and open segment readers on all segments.  It only does so when it's time to apply deletes, do merges, open an NRT reader, etc.\n\nThis is a serious bug because you can in fact succeed in committing with the new major version of Lucene against your too-old index, which is catastrophic because suddenly the old Lucene version will no longer open the index, and so your index becomes unusable.",
    "attachments": {
        "LUCENE-2720-3x.patch": "https://issues.apache.org/jira/secure/attachment/12468950/LUCENE-2720-3x.patch",
        "LUCENE-2720-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12468886/LUCENE-2720-trunk.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-10-23T10:10:16+0000",
            "content": "IndexReader should also throw an immediate exc on open. ",
            "author": "Michael McCandless",
            "id": "comment-12924165"
        },
        {
            "date": "2010-10-23T10:49:19+0000",
            "content": "And if we can arrange for addIndexes(Directory...) to throw that too, that would complete the cycle I think. addIndexes(IndexReader) is not a problem, since if IR will detect that upon open(), you shouldn't reach addIndexes(IR) at all.\n\nTo record here your proposal from LUCENE-2618 - one way to achieve that is to let segments_N record the oldest version it contains. This is fine for 3.1 and onwards indexes, however what do we do w/ 3.0 ones? We will need to distinguish >=3.1 and <3.1. However, <3.1 covers both 3.0 (which we should support by 4.0) and 2.9 (which we shouldn't). Maybe this isn't a problem because you cannot upgrade from 2.9 to 4.0 directly - you have to go through 3.x.\n\nBTW Mike, I think we should track the version per-segment because only when all segments of version X are gone, can the minimum version Y be recorded in segments_N. That is, if you have several segments from version 1, and the index is on version 2, and you merge some of the ver1 segments, the index's oldest version is still 1. However, if you record it only in segments_N, how would you know when all ver1 segments are gone? ",
            "author": "Shai Erera",
            "id": "comment-12924170"
        },
        {
            "date": "2010-10-23T10:57:22+0000",
            "content": "And if we can arrange for addIndexes(Directory...) to throw that too, that would complete the cycle I think.\n\nI agree.\n\nBTW Mike, I think we should track the version per-segment because only when all segments of version X are gone, can the minimum version Y be recorded in segments_N\n\nYes, each SegmentInfo inside the segments_N file should track the util.Version when it was created.\n\nThis is fine for 3.1 and onwards indexes, however what do we do w/ 3.0 ones? We will need to distinguish >=3.1 and <3.1. \n\nActually we need only to distinguish 2.x vs 3.x right?  I think we can just use the stored fields file, since it changed as of 3.0? ",
            "author": "Michael McCandless",
            "id": "comment-12924174"
        },
        {
            "date": "2010-10-23T11:17:55+0000",
            "content": "Actually we need only to distinguish 2.x vs 3.x right? I think we can just use the stored fields file, since it changed as of 3.0?\n\nWe discussed this in IRC shortly before:\nTo detect a pre-3.0 index, it's enough to read the StoredFields file (is it really always available?). So 3.x and 4.0 do the following in the ctors/open:\n\n\tif segments file is 3.x format, it contains information about util.Version -> we are fine no more work. In 4.0 we are happy with the index\n\tOnly trunk: if segments file is older format, read the StoredFields file in ctor. This would throw IndexFormatTooOldEx in 4.0 (this is additional work, if stored fields are not needed, but neglectible). Once the index is modified, we know about\n\n\n\nOnce an index is modified with 3.x or 4.0 we always update the version and write new segment information. For older segments, this code also has to inspect the stored fields file, to detect if segment is pre-3.x. This is done exatctly once during update of segments_N. ",
            "author": "Uwe Schindler",
            "id": "comment-12924178"
        },
        {
            "date": "2011-01-19T08:48:15+0000",
            "content": "From the comments I thought what's left to do is to take care of IndexWriter throwing IFTOE when it's opened, but I don't see the min/max versions recorded anywhere. I expected to find them in SegmentInfo(s), but they're not. So did I miss it, or what's left to do here is the whole nine yards? ",
            "author": "Shai Erera",
            "id": "comment-12983617"
        },
        {
            "date": "2011-01-19T13:41:35+0000",
            "content": "I think it's the whole 9 yards still, and, I think we better do this before 3.1 (so we can distinguish 3.0 and 3.x)?\n\nAt a minimum for 3.1 we just need to fix SegmentInfo writing to record the current Version.  Throwing the exc from IW could then wait... ",
            "author": "Michael McCandless",
            "id": "comment-12983708"
        },
        {
            "date": "2011-01-20T20:34:17+0000",
            "content": "Patch against trunk. I need to fix 3x to write the version and produce an index for TestBackCompat before committing this patch (even though the tests pass). ",
            "author": "Shai Erera",
            "id": "comment-12984383"
        },
        {
            "date": "2011-01-21T07:09:36+0000",
            "content": "Patch against 3x:\n\n\tAdds FieldsReader.detectCodeVersion - returns \"2.x\" for pre-3.0 indexes and \"3.0\" for 3.0 indexes. Not called for 3.1+ segments.\n\tSegmentInfo records its code version (Constants.LUCENE_MAIN_VERSION).\n\tSegmentInfos bumps up the format number and upgrades old segments (\"2.x\" or \"3.0\") to record their version too.\n\n\n\nI'll update the trunk patch to reflect those changes (i.e., now indexes touched by 3.1+ code will have their segments recording their version, whether they are pre-3.0 or not). ",
            "author": "Shai Erera",
            "id": "comment-12984592"
        },
        {
            "date": "2011-01-21T08:28:16+0000",
            "content": "Modified patch against trunk:\n\n\tAdded FieldsReader.checkCodeVersion - throws TooOldEx if format is unsupported\n\tAdded ctor to IndexFormatTooOldException which takes a String, so that we can properly express it's a \"2.x\" index\n\tDefaultSegmentInfosReader handles si.getVersion().equals(\"2.x\") by throwing TooOldEx\n\n\n\nAfter it gets the \"green light\", I'll produce a 3.1 index and check it in trunk for TestBackCompat. ",
            "author": "Shai Erera",
            "id": "comment-12984610"
        },
        {
            "date": "2011-01-21T15:04:55+0000",
            "content": "Both 3.x & trunk patches look great!\n\nMaybe in the comment for SegmentInfo.version explain the \"required\"\nformat of the version?  (Since it's a String).  And eg note that we\ndon't track minor versions here?  (Maybe just link to the same comment\nfor Constants.LUCENE_MAIN_VERSION). ",
            "author": "Michael McCandless",
            "id": "comment-12984761"
        },
        {
            "date": "2011-01-22T20:42:41+0000",
            "content": "Thanks Mike. I'll add the comments as you suggest and commit. ",
            "author": "Shai Erera",
            "id": "comment-12985194"
        },
        {
            "date": "2011-01-23T05:11:38+0000",
            "content": "Thanks Mike and Uwe for your comments !\n\nCommitted revision 1062324 (3x).\nCommitted revision 1062325 (trunk).\n\nI'll send a reindexing note to java-user & dev. ",
            "author": "Shai Erera",
            "id": "comment-12985249"
        },
        {
            "date": "2011-03-30T15:50:20+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013441"
        }
    ]
}