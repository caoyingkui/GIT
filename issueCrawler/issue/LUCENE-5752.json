{
    "id": "LUCENE-5752",
    "title": "Explore light weight Automaton replacement",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "This effort started with the patch on LUCENE-4556, to create a \"light\nweight\" replacement for the current object-heavy Automaton class\n(which creates separate State and Transition objects).\n\nI took that initial patch much further, and cutover most places in\nLucene that use Automaton to LightAutomaton.  Tests pass.\n\nThe core idea of LightAutomaton is all states are ints, and you build\nup the automaton under the restriction that you add all outgoing\ntransitions one state at a time.  This worked well for most\noperations, but for some (e.g. UTF32ToUTF8!!) it was harder, so I also\nadded a separate builder to add transitions in any order and then in\nthe end they are sorted and added to the real automaton.\n\nIf this is successful I think we should just replace the current\nAutomaton with LightAutomaton; right now they both exist in my current\npatch...\n\nThis is very much a work in progress, and I'm not sure the\nrestrictions the API imposes are \"reasonable\" (some algos got uglier).\nBut I think it's at least worth exploring/iterating... I'll make a branch and\ncommit my current state.",
    "attachments": {
        "LUCENE-5752.patch": "https://issues.apache.org/jira/secure/attachment/12650780/LUCENE-5752.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14028071",
            "author": "ASF subversion and git services",
            "content": "Commit 1601966 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1601966 ]\n\nLUCENE-5752: make branch ",
            "date": "2014-06-11T17:33:25+0000"
        },
        {
            "id": "comment-14028077",
            "author": "ASF subversion and git services",
            "content": "Commit 1601967 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1601967 ]\n\nLUCENE-5752: current state ",
            "date": "2014-06-11T17:35:27+0000"
        },
        {
            "id": "comment-14028333",
            "author": "Dawid Weiss",
            "content": "This is how (int-based states) morfologik stores its automaton data. Nice! ",
            "date": "2014-06-11T20:19:35+0000"
        },
        {
            "id": "comment-14028458",
            "author": "ASF subversion and git services",
            "content": "Commit 1602031 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602031 ]\n\nLUCENE-5752: cutover suggesters ",
            "date": "2014-06-11T21:56:22+0000"
        },
        {
            "id": "comment-14028576",
            "author": "ASF subversion and git services",
            "content": "Commit 1602049 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602049 ]\n\nLUCENE-5752: more cutover ",
            "date": "2014-06-11T23:22:12+0000"
        },
        {
            "id": "comment-14028676",
            "author": "Robert Muir",
            "content": "\n+  // nocommit can we use varargs?  rob was unhappy before?\n   static public Automaton concatenate(List<Automaton> l) {\n\nWell, an alternative is to have concatenate(String, Automaton) just to ensure the optimization is preserved for the common case,\nand to be less trappy. But I think the optimization is important and currently relied upon, because we concat tiny strings on the LHS with large ones on the RHS and depend on it not being costly.\n\n\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n\n ",
            "date": "2014-06-12T01:07:48+0000"
        },
        {
            "id": "comment-14029402",
            "author": "ASF subversion and git services",
            "content": "Commit 1602228 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602228 ]\n\nLUCENE-5752: finish cutover ",
            "date": "2014-06-12T16:57:34+0000"
        },
        {
            "id": "comment-14029697",
            "author": "ASF subversion and git services",
            "content": "Commit 1602279 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602279 ]\n\nLUCENE-5752: move det to the testcase; clarify javadocs that getCommonPrefix requires det automaton ",
            "date": "2014-06-12T19:53:17+0000"
        },
        {
            "id": "comment-14030828",
            "author": "ASF subversion and git services",
            "content": "Commit 1602472 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602472 ]\n\nLUCENE-5752: move Transition back out; improve tests ",
            "date": "2014-06-13T16:46:41+0000"
        },
        {
            "id": "comment-14030834",
            "author": "Michael McCandless",
            "content": "LightAutomaton is very different from Automaton:\n\n\n\tIt's more like String and A is more like StringBuilder: once LA is\n    built you can't link it up to another LA just by changing a few\n    transitions\n\n\n\n\n\tIt's not mutable after it's created; operations like determinize,\n    minimize, totalize, etc. don't happen \"in place\" anymore, and\n    instead return a new LA.  I'd really love to forbid calling\n    e.g. determinize and not \"using\" its result since I could easily\n    have caused bugs with this.  This also means we also don't have\n    ops like \"cloneIfRequired\" and \"setAllowMutate\".\n\n\n\n\n\tLA knows all of its states, vs A which \"defines\" its states as\n    those reachable from initial.  This means LA can have different\n    kinds of dead states than A (can reach an accept state but not\n    reachable from the initial state)\n\n\n\n\n\tLA doesn't have mutable state, e.g. get/set/clearNumberedStates;\n    states are already numbered as they are created (and only exist as\n    ints).  There is no \"sortTransitions\"/reduce: LA's transitions are\n    already reduced/sorted as they are created\n\n\n\n\n\tInitial state is always 0\n\n\n\n\n\tThere's no special casing for singletons; it's just a normal LA\n\n\n\n\n\tNo setMinimizeAlways\n\n\n\nUnfortunately this means operations that used to \"just link states\ntogether,\" like concatenate, now do a full copy of the incoming\nautomata ... so the problem here is these restrictions may be too much\nfor our usage.  E.g. RegExp keeps chaining and chaining automata\ntogether... in some cases I think we can fix the usage to do the\nbuilding directly, but other cases I'm not sure. ",
            "date": "2014-06-13T16:52:08+0000"
        },
        {
            "id": "comment-14031694",
            "author": "ASF subversion and git services",
            "content": "Commit 1602623 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602623 ]\n\nLUCENE-5752: track isDeterministic privately in LA; also remove states not reachable from initial node in removeDeadStates; move prefix handling into LevA ",
            "date": "2014-06-14T20:50:29+0000"
        },
        {
            "id": "comment-14032812",
            "author": "ASF subversion and git services",
            "content": "Commit 1602966 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602966 ]\n\nLUCENE-5752: improve tests; move isEmpty out of LA into BasicOps; BasicOps.sameLanguage requires no dead states; rename LA.finish -> finishState ",
            "date": "2014-06-16T19:22:04+0000"
        },
        {
            "id": "comment-14032815",
            "author": "ASF subversion and git services",
            "content": "Commit 1602968 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1602968 ]\n\nLUCENE-5752: merge trunk ",
            "date": "2014-06-16T19:26:21+0000"
        },
        {
            "id": "comment-14033110",
            "author": "ASF subversion and git services",
            "content": "Commit 1603012 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603012 ]\n\nLUCENE-5752: renames ",
            "date": "2014-06-16T22:23:13+0000"
        },
        {
            "id": "comment-14033613",
            "author": "ASF subversion and git services",
            "content": "Commit 1603106 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603106 ]\n\nLUCENE-5752: remove last nocommits; turn on method-level javadocs for oal.util.automaton; improve tests ",
            "date": "2014-06-17T09:37:43+0000"
        },
        {
            "id": "comment-14033621",
            "author": "ASF subversion and git services",
            "content": "Commit 1603107 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603107 ]\n\nLUCENE-5752: merge trunk ",
            "date": "2014-06-17T09:41:55+0000"
        },
        {
            "id": "comment-14033631",
            "author": "ASF subversion and git services",
            "content": "Commit 1603116 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603116 ]\n\nLUCENE-5752: minor cleanups / remove imports / sops, etc. ",
            "date": "2014-06-17T10:16:04+0000"
        },
        {
            "id": "comment-14033666",
            "author": "Michael McCandless",
            "content": "I think this is close to ready; here's an initial applyable patch for trunk (patch -p1 < ...) ... I'm going to review it more closely but I think it's close. ",
            "date": "2014-06-17T11:16:00+0000"
        },
        {
            "id": "comment-14033667",
            "author": "Michael McCandless",
            "content": "I'd like to commit to trunk first and let things bake for a while .... and then later backport after 4.9 is out. ",
            "date": "2014-06-17T11:16:56+0000"
        },
        {
            "id": "comment-14034245",
            "author": "Robert Muir",
            "content": "I think the tests and docs etc look great here. So I really like that patch, I'm just worried about just a few minor things:\n\n\tconcatenate: as mentioned before, we rely on this today in quite a few places, and now the runtime has significantly changed (when the left side is a singleton)\n\tsingleton: speaking of such, this optimization is removed, but are we sure about this? In practice this is probably extremely effective, maybe even outweighing any other optimizations we could do.\n\tregex/wildcard parsing: we should really test that this isn't totally crazy (read: blowing up) now.\n\tacceptStates: should this really be a hashset? is there a reason not to use a bitset?\n\n ",
            "date": "2014-06-17T19:26:37+0000"
        },
        {
            "id": "comment-14034513",
            "author": "Michael McCandless",
            "content": "Thanks Rob.\n\nconcatenate: as mentioned before, we rely on this today in quite a few places, and now the runtime has significantly changed (when the left side is a singleton)\n\nWell, in RegExp we followup that concatenate with a minimize.  In\nWildcardQuery the incoming automata are small anyway... and I fixed\nLevA to insert the prefix itself to avoid the full copy of the fuzzy\nsuffix part..\n\nsingleton: speaking of such, this optimization is removed, but are we sure about this? In practice this is probably extremely effective, maybe even outweighing any other optimizations we could do.\n\nI really didn't like this duality / mutability (how you sometimes had\nto call expandSingleton for ops that cared) and I don't see where this\nopto would really make a difference in Lucene.  We already have\nDaciukMihov to efficiently build minimal union automaton ...\n\nI agree for a general purpose automaton library this might make sense\n... but I don't think it really helps Lucene.\n\nregex/wildcard parsing: we should really test that this isn't totally crazy (read: blowing up) now.\n\nI was worried about this too but when I looked at RegExp it calls\nminimize after all of these ops!  So I think the added cost of the\ncopy is likely in the noise ...\n\nacceptStates: should this really be a hashset? is there a reason not to use a bitset?\n\nHmm it could be a bitset.  I thought that typically the number of\naccept states is small, but I agree in the case when it's large it'd\nbe nice to not use way way too much RAM ... I'll change it to bitset. ",
            "date": "2014-06-17T22:34:54+0000"
        },
        {
            "id": "comment-14035693",
            "author": "Michael McCandless",
            "content": "I ran the normal luceneutil bench on wikimediumall:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n        HighSloppyPhrase        3.60      (7.3%)        3.51      (7.4%)   -2.3% ( -15% -   13%)\n              HighPhrase        4.59      (5.5%)        4.54      (6.2%)   -1.1% ( -12% -   11%)\n         MedSloppyPhrase        3.59      (3.8%)        3.55      (4.8%)   -1.0% (  -9% -    7%)\n                HighTerm       63.28      (3.7%)       62.65      (4.3%)   -1.0% (  -8% -    7%)\n                 MedTerm       99.13      (3.0%)       98.15      (3.6%)   -1.0% (  -7% -    5%)\n               MedPhrase      231.08      (5.4%)      229.10      (6.3%)   -0.9% ( -11% -   11%)\n                PKLookup      160.27      (2.4%)      159.32      (2.9%)   -0.6% (  -5% -    4%)\n                 LowTerm      323.40      (1.9%)      321.68      (2.3%)   -0.5% (  -4% -    3%)\n         LowSloppyPhrase       45.04      (1.5%)       44.81      (2.2%)   -0.5% (  -4% -    3%)\n              AndHighLow      413.85      (1.6%)      412.50      (2.4%)   -0.3% (  -4% -    3%)\n             LowSpanNear       11.23      (3.6%)       11.20      (3.2%)   -0.2% (  -6% -    6%)\n            HighSpanNear       10.36      (5.3%)       10.33      (4.7%)   -0.2% (  -9% -   10%)\n             MedSpanNear       34.23      (3.0%)       34.16      (3.0%)   -0.2% (  -6% -    5%)\n             AndHighHigh       28.81      (0.6%)       28.79      (0.8%)   -0.1% (  -1% -    1%)\n               LowPhrase       13.51      (2.2%)       13.50      (1.6%)   -0.1% (  -3% -    3%)\n              AndHighMed       34.92      (0.5%)       34.90      (0.9%)   -0.1% (  -1% -    1%)\n                  IntNRQ        3.45      (6.6%)        3.45      (6.3%)   -0.1% ( -12% -   13%)\n                 Prefix3       93.31      (4.3%)       93.26      (3.5%)   -0.0% (  -7% -    8%)\n                Wildcard       20.15      (4.1%)       20.15      (2.8%)   -0.0% (  -6% -    7%)\n                 Respell       49.36      (3.1%)       49.52      (2.8%)    0.3% (  -5% -    6%)\n           OrNotHighHigh       10.73      (6.3%)       10.81      (6.4%)    0.8% ( -11% -   14%)\n              OrHighHigh        9.89      (6.4%)        9.97      (6.3%)    0.8% ( -11% -   14%)\n               OrHighMed       31.86      (6.3%)       32.12      (6.4%)    0.8% ( -11% -   14%)\n           OrHighNotHigh       13.39      (6.1%)       13.51      (6.1%)    0.8% ( -10% -   13%)\n            OrHighNotMed       36.55      (5.9%)       36.88      (6.1%)    0.9% ( -10% -   13%)\n            OrNotHighMed       23.44      (6.4%)       23.65      (6.6%)    0.9% ( -11% -   14%)\n               OrHighLow       22.74      (6.6%)       22.96      (6.9%)    1.0% ( -11% -   15%)\n            OrNotHighLow       24.38      (6.7%)       24.62      (6.8%)    1.0% ( -11% -   15%)\n            OrHighNotLow       29.97      (6.5%)       30.29      (6.9%)    1.0% ( -11% -   15%)\n                  Fuzzy2       45.50      (3.2%)       46.05      (3.1%)    1.2% (  -5% -    7%)\n                  Fuzzy1       60.83      (4.0%)       61.71      (3.9%)    1.4% (  -6% -    9%)\n\n\n\nNet/net I think this is noise ... but Rob pointed out the Fuzzy1/2\ntasks here don't do a prefix, so I'll fixup luceneutil to support that\nand test it too. ",
            "date": "2014-06-18T13:46:35+0000"
        },
        {
            "id": "comment-14035841",
            "author": "ASF subversion and git services",
            "content": "Commit 1603489 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603489 ]\n\nLUCENE-5752: cutover to FixedBitSet to mark the accept states; improve javadocs ",
            "date": "2014-06-18T15:41:50+0000"
        },
        {
            "id": "comment-14035843",
            "author": "Michael McCandless",
            "content": "I fixed the acceptStates to use a FixedBitSet, and made\nA.getAcceptStates package private.\n\nI temporarily set luceneutil's QueryParser to use prefix=1 and 2\nfor FuzzyQuery and re-tested and saw no perf change ... results were\nnoisy though.\n\nI ran the suggester benchmark on trunk vs patch (and hit\nLUCENE-5775) and the numbers are all very close.\n\nI also ran core tests (time ant test -Dtests.seed=0) on trunk vs\nbranch and the time was 2 min 26 seconds on trunk, 2 min 25 seconds on\nbranch.\n\nNet/net I think perf is fine.  I think this is ready ... I'll post the\nlatest applyable patch. ",
            "date": "2014-06-18T15:42:37+0000"
        },
        {
            "id": "comment-14035850",
            "author": "ASF subversion and git services",
            "content": "Commit 1603492 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603492 ]\n\nLUCENE-5752: merge trunk ",
            "date": "2014-06-18T15:46:00+0000"
        },
        {
            "id": "comment-14035852",
            "author": "Michael McCandless",
            "content": "Applyable patch. ",
            "date": "2014-06-18T15:47:11+0000"
        },
        {
            "id": "comment-14035922",
            "author": "ASF subversion and git services",
            "content": "Commit 1603516 from Michael McCandless in branch 'dev/branches/lucene5752'\n[ https://svn.apache.org/r1603516 ]\n\nLUCENE-5752: use BitSet for accept states ",
            "date": "2014-06-18T16:44:30+0000"
        },
        {
            "id": "comment-14037109",
            "author": "ASF subversion and git services",
            "content": "Commit 1603752 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1603752 ]\n\nLUCENE-5752: switch to simpler Automaton implementation ",
            "date": "2014-06-19T08:22:10+0000"
        },
        {
            "id": "comment-14039401",
            "author": "ASF subversion and git services",
            "content": "Commit 1604283 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1604283 ]\n\nLUCENE-5752: switch to simpler, immutable Automaton implementation ",
            "date": "2014-06-20T21:38:59+0000"
        }
    ]
}