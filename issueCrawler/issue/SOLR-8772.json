{
    "id": "SOLR-8772",
    "title": "components that rely on blob store should be loaded as soon as it is available",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "If a component is set as runtimeLib=true it automatically becomes startup=lazy which means there is no way we can know that if the component could be successfully loaded till a request is made and the component is used. This is suboptimal behavior. The ops will have no means of knowing if everything is OK. Also , the first request will be unpredictably slow\n\nThis means that , the server would keep checking for availability of blob store ( .system collection) and all components will get loaded as soon as the .system collection is available for querying\n\nAlso, it will be possible for components to have an interface called BlobStoreAware . The component would get a callback as and when the blob store is available",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-02T04:23:53+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "+1 to the idea.\n\nThe one difference between BlobStoreAware and the similarly named SolrCoreAware would be that any exception thrown during SolrCoreAware.inform method aborts the loading of the core but I assume that that wouldn't be the case with BlobStoreAware.\n\nI had a small chat with Noble and we came to the conclusion that in order to get the blob store and runtime lib features usable, we need this issue, SOLR-8751 and a few others. Noble Paul \u2013 perhaps this is a good time to open a parent issue to track all these sub-features in one place? ",
            "id": "comment-15175005"
        },
        {
            "date": "2016-03-02T14:34:38+0000",
            "author": "Gus Heck",
            "content": "Some Configurations might require the blob store for proper functioning. I think BlobStoreAware should have a \n\npublic boolean requiredForStartup();\n\n Also, it would be spiffy if the blob store could be automatically created at startup, either via detecting a /blobs folder or via a \n\npublic void bootstrapBlobStore();\n\n method in BlobStoreAware? though options like replication factor etc become complicated. ",
            "id": "comment-15175668"
        },
        {
            "date": "2016-03-03T10:46:46+0000",
            "author": "Noble Paul",
            "content": "It will be like the *Aware interfaces we have today. If, even a single component is loaded that is BlobStoreAware they will be added to a Q and a thread will be fired to check if blob store is available. As soon as it becomes available, just call inform(blobRepository) ",
            "id": "comment-15177657"
        },
        {
            "date": "2016-03-03T14:05:20+0000",
            "author": "Gus Heck",
            "content": "If you mean something like ResourceLoaderAware from my earlier patches which merely added another line here in SolrCore.java:\n\n      // Finally tell anyone who wants to know\n      resourceLoader.inform(resourceLoader);\n      resourceLoader.inform(this); // last call before the latch is released.\n   } catch (Throwable e) {\n\n\nThat's fine, but if you mean to let the core call \n\n    } finally {\n      // allow firstSearcher events to fire and make sure it is released\n      latch.countDown();\n    }\n\n\nbefore the processed blob is available that's a problem for the use case that motivated this and for pretty much any use case that relies on a BlobStoreAware component to provide an accurate search result.  ",
            "id": "comment-15177838"
        }
    ]
}