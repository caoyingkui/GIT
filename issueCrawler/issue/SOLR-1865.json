{
    "id": "SOLR-1865",
    "title": "ignore byte-order markers in SolrResourceLoader",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "If you create say a stopwords list with windows notepad or other editors and save as UTF-8, \nsome of these editors will insert a byte-order marker (zero-width no-break space) as the first \ncharacter of the file.\n\nhttp://www.lucidimagination.com/search/document/5101871231fc95af/is_this_a_bug_of_the_ressourceloader",
    "attachments": {
        "SOLR-1865.patch": "https://issues.apache.org/jira/secure/attachment/12440785/SOLR-1865.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-12853500",
            "date": "2010-04-05T19:21:37+0000",
            "content": "attached is a patch to ignore BOM's at the beginning of files loaded with getLines() "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12865336",
            "date": "2010-05-07T22:22:02+0000",
            "content": "Robert: based on my limited understanding, aren't there different BOMs for different encodings? ...\n\nhttp://unicode.org/faq/utf_bom.html#bom4\n\nThe getLInes method modified in your patch could (conceivably) be used to open files in other encodings, so do we also need to worry about those possibilities as well? (or does InputStreamReader take care of that for us?) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12865339",
            "date": "2010-05-07T22:26:40+0000",
            "content": "Hoss Man: it is true that, as bytes, other encodings represent the BOM in a different way.\n\nHowever, your last statement is the important part: \nthe Reader converts it to java characters (UTF-16) encoding for us.\n\nSo in String or char context it is always going to be U+FEFF, regardless of whichever unicode encoding it was originally in. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12865348",
            "date": "2010-05-07T23:36:19+0000",
            "content": "Robert: i updated your test to verify that the file has a BOM in it just in case someone (or some software) inadvertently removes it.\n\nif this looks cool then by all means commit. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12865360",
            "date": "2010-05-08T00:16:22+0000",
            "content": "Thanks Hoss Man, great idea.\n\nI'll commit this patch in a bit. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12865368",
            "date": "2010-05-08T00:43:01+0000",
            "content": "Committed to trunk: revision 942288. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12865370",
            "date": "2010-05-08T00:50:03+0000",
            "content": "Committed revision 942289 to branch_3x "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872819",
            "date": "2010-05-28T03:25:44+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013266",
            "date": "2011-03-30T15:46:02+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}