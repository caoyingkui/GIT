{
    "id": "LUCENE-4999",
    "title": "Lucene test (testCambridgeMA) fails when JVM 64-bit does not use memory compression",
    "details": {
        "components": [],
        "fix_versions": [
            "4.4",
            "4.3.1"
        ],
        "affect_versions": "4.3,                                            4.2.1",
        "priority": "Critical",
        "labels": "",
        "type": "Bug",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "When I ran the Lucene (4.2.1/4.3) test suite with IBM Java I get the following error:\n\n[junit4:junit4] Suite: org.apache.lucene.search.postingshighlight.TestPostingsHighlighter\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestPostingsHighlighter -Dtests.method=testCambridgeMA -Dtests.seed=571E16AEAF72C9F9 -Dtests.s\nlow=true -Dtests.locale=mt_MT -Dtests.timezone=Pacific/Kiritimati -Dtests.file.encoding=UTF-8\n[junit4:junit4] ERROR   0.71s J2 | TestPostingsHighlighter.testCambridgeMA <<<\n[junit4:junit4]    > Throwable #1: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 37\n[junit4:junit4]    >    at __randomizedtesting.SeedInfo.seed([571E16AEAF72C9F9:D60B7505C1DC91F8]:0)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.Passage.addMatch(Passage.java:53)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightDoc(PostingsHighlighter.java:547)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightField(PostingsHighlighter.java:425)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightFields(PostingsHighlighter.java:364)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlightFields(PostingsHighlighter.java:268)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.PostingsHighlighter.highlight(PostingsHighlighter.java:198)\n[junit4:junit4]    >    at org.apache.lucene.search.postingshighlight.TestPostingsHighlighter.testCambridgeMA(TestPostingsHighlighter.java:373)\n[junit4:junit4]    >    at java.lang.Thread.run(Thread.java:738)\n[junit4:junit4]   2> NOTE: test params are: codec=FastDecompressionCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=FA\nST_DECOMPRESSION, chunkSize=386), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=FAST_DECOMPRESSION, chunkSize=386)), sim=RandomSimilarityProv\nider(queryNorm=false,coord=yes): \n{body=DFR I(n)Z(0.3), title=DFR I(F)Z(0.3), id=DFR I(n)2}\n, locale=mt_MT, timezone=Pacific/Kiritimati\n[junit4:junit4]   2> NOTE: Linux 2.6.32-279.el6.x86_64 amd64/IBM Corporation 1.6.0 (64-bit)/cpus=4,threads=1,free=10783032,total=24030208\n[junit4:junit4]   2> NOTE: All tests run in this JVM: [FieldQueryTest, FieldPhraseListTest, SimpleFragListBuilderTest, FieldTermStackTest, OffsetLimitTokenFil\nterTest, TokenSourcesTest, TestPostingsHighlighter]\n[junit4:junit4] Completed on J2 in 2.46s, 23 tests, 1 error <<< FAILURES!\n\n\nThis error is not seen with Oracle Java.\nA Google search showed that this error has already occurred in community builds and the solution proposed was disable the IBM Java in the community tests.\n\nI took a look in the code and found that the root of the problem is due to the assignment of the variable \"referenceSize\" in RamUsageEstimator.java:\n\n    // get object reference size by getting scale factor of Object[] arrays:\n    try \n{\n      final Method arrayIndexScaleM = unsafeClass.getMethod(\"arrayIndexScale\", Class.class);\n      referenceSize = ((Number) arrayIndexScaleM.invoke(theUnsafe, Object[].class)).intValue();\n      supportedFeatures.add(JvmFeature.OBJECT_REFERENCE_SIZE);\n    }\n catch (Exception e) \n{\n      // ignore.\n    }\n\n\nThe Java Object reference size for arrays have 8 bytes in 64-bit machines (Oracle or IBM) and can be reduced to 4 bytes (like 32-bit JVMs) using Compressed References and Compressed Ordinary Object Pointers (OOPs).\n\nThis options seems to be enabled by default in Oracle Java when the heap size is under 32GB, but is not in IBM Java.\n\nAs workaround, when testing with IBM JVM I can pass the options \"-Xcompressedrefs\" or \"-XX:+UseCompressedOops\" to Junit.\n\nSimilarly, you can reproduce the error if you pass the option \"-XX:-UseCompressedOops\" when testing with Oracle Java.\n\n\nThe bug is in oversize method of ArrayUtil.java. It does nothing when the object reference size (bytesPerElement) is 8.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-05-14T03:03:13+0000",
            "content": "Yes, this at least was a bug in the highlighter. However its currently fixed in SVN (will be in 4.3.1):\n\nThe datastructure expected parallel arrays and did not grow them consistently as you noticed.\n\n\n* LUCENE-4948: Fixed ArrayIndexOutOfBoundsException in PostingsHighlighter\n  if you had a 64-bit JVM without compressed OOPS: IBM J9, or Oracle with\n  large heap/explicitly disabled.  (Mike McCandless, Uwe Schindler, Robert Muir)\n\n\n\n\nSimilarly, you can reproduce the error if you pass the option \"-XX:-UseCompressedOops\" when testing with Oracle Java.\n\nUwe Schindler did exactly that to our jenkins instances: it randomizes this variable so that this class of bugs will be found when using Oracle too, and won't be brushed aside as a JVM issue in the future. ",
            "author": "Robert Muir",
            "id": "comment-13656667"
        },
        {
            "date": "2013-06-18T16:55:13+0000",
            "content": "Bulk closing after 4.3.1 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13686948"
        }
    ]
}