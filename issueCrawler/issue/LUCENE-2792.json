{
    "id": "LUCENE-2792",
    "title": "Add a simple FST impl to Lucene",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I implemented the algo described at\nhttp://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3698 for\nincrementally building a finite state transducer (FST) from sorted\ninputs.\n\nThis is not a fully general FST impl \u2013 it's only able to build up an\nFST incrementally from input/output pairs that are pre-sorted.\n\nCurrently the inputs are BytesRefs, and the outputs are pluggable \u2013\nNoOutputs gets you a simple FSA, PositiveIntOutputs maps to a long,\nByteSequenceOutput maps to a BytesRef.\n\nThe implementation has a low memory overhead, so that it can handle a\nfairly large set of terms.  For example, it can build the FSA for the\n9.8M terms from a 10M document wikipedia index in ~8 seconds (on\nbeast), using ~256 MB peak RAM, resulting in an FSA that's ~60 MB.\n\nIt packs the FST as-it-builds into a compact byte[], and then exposes\nthe API to read nodes/arcs directly from the byte[].  The FST can be\nquickly saved/loaded to/from a Directory since it's just a big byte[].\n\nThe format is similar to what Morfologik uses\n(http://sourceforge.net/projects/morfologik/).\n\nI think there are a number of possible places we can use this in\nLucene.  For example, I think many apps could hold the entire terms\ndict in RAM, either at the multi-reader level or maybe per-segment\n(mapping to file offset or to something else custom to the app), which\nmay possibly be a good speedup for certain MTQs (though, because the\nformat is packed into a byte[], there is a decode cost when visiting\narcs).\n\nThe builder can also prune as it goes, so you get a prefix trie pruned\naccording to how many terms run through the nodes, which makes it\nfaster and even less memory consuming.  This may be useful as a\nreplacement for our current binary search terms index since it can\nachieve higher term density for the same RAM consumption of our\ncurrent index.\n\nAs an initial usage to make sure this is exercised, I cutover the\nSimpleText codec, which currently fully loads all terms into a\nTreeMap (and has caused intermittent OOME in some tests), to use an FST\ninstead.  SimpleText uses a PairOutputs which is able to \"pair up\" any\ntwo other outputs, since it needs to map each input term to an int\ndocFreq and long filePosition.\n\nAll tests pass w/ SimpleText forced codec, and I think this is\ncommittable except I'd love to get some help w/ the generics\n(confession to the policeman: I had to add\n@SuppressWarnings(\n{\"unchecked\"}\n)) all over!!  Ideally an FST is\nparameterized by its output type (Integer, BytesRef, etc.).\n\nI even added a new @nightly test that makes a largeish set of random\nterms and tests the resulting FST on different outputs \n\nI think it would also be easy to make a variant that uses char[]\ninstead of byte[] as its inputs, so we could eg use this during analysis\n(Robert's idea).  It's already be easy to have a CharSequence\noutput type since the outputs are pluggable.\n\nDawid Weiss (author of HPPC \u2013 http://labs.carrotsearch.com/hppc.html \u2013 and\nMorfologik \u2013 http://sourceforge.net/projects/morfologik/)\nwas very helpful iterating with me on this (thank you!).",
    "attachments": {
        "LUCENE-2792.patch": "https://issues.apache.org/jira/secure/attachment/12465221/LUCENE-2792.patch",
        "LUCENE-2792-ArrayUtil-grow.patch": "https://issues.apache.org/jira/secure/attachment/12466123/LUCENE-2792-ArrayUtil-grow.patch",
        "FSTExample.png": "https://issues.apache.org/jira/secure/attachment/12465223/FSTExample.png",
        "SimpleBench.java": "https://issues.apache.org/jira/secure/attachment/12466125/SimpleBench.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-03T10:34:56+0000",
            "content": "Patch. ",
            "author": "Michael McCandless",
            "id": "comment-12966478"
        },
        {
            "date": "2010-12-03T10:39:02+0000",
            "content": "I'm attaching an example FST (PNG image) so we can visualize what an FST does.\n\nReally an FST is like a SortedMap<BytesRef,X>, where X (the \"outputs\") is pluggable.\n\nThis particular FST maps a canned set of words to the int ord (0, 1, 2, ...) of the word.\n\nArcs that are \"final\" end in a T instead of an arrow, which means if you stop at that arc the input you've traversed is \"accepted\".  (The blue arcs just indicate arcs that were compressed with a NEXT flag when stored in the byte[].)\n\nTo get the total output you sum the outputs you encounter.  For example, the input \"stop\" hits output 4 on the 's' and output 1 on the o so its ord is 5. ",
            "author": "Michael McCandless",
            "id": "comment-12966479"
        },
        {
            "date": "2010-12-03T12:30:50+0000",
            "content": "This sounds awesome!\n\nIt would be neat to write intersect(FST, Automaton), and somehow optionally use it if available.\nSuch a thing might be cleaner now that MTQ.getTermsEnum takes a Terms structure ",
            "author": "Robert Muir",
            "id": "comment-12966510"
        },
        {
            "date": "2010-12-03T17:37:12+0000",
            "content": "Can the FST be made concurrent for use in LUCENE-2312 as the terms dict implementation? ",
            "author": "Jason Rutherglen",
            "id": "comment-12966597"
        },
        {
            "date": "2010-12-03T17:54:11+0000",
            "content": "Can the FST be made concurrent for use in LUCENE-2312 as the terms dict implementation?\n\nMaybe?  Ie the write ops are things like \"append a new arc to this node\", so eg if we use a concurrent linked list per node?\n\nAlso, the impl here isn't helpful for the RT case, since it requires you add the terms in sorted order.  But, there is a non-sorted-order version too, however, they will be substantially more RAM consuming since they'd use a objects for node/arcs (this impl doesn't). ",
            "author": "Michael McCandless",
            "id": "comment-12966600"
        },
        {
            "date": "2010-12-03T18:03:34+0000",
            "content": "Can the FST be made concurrent for use in LUCENE-2312 as the terms dict implementation?\n\nJust an idea, maybe you could use something like ConcurrentSkipListMap for this\nuntil mike makes \"fst 2.0\" or something?\n\nits only in java 6 but you can poach from apache harmony... ",
            "author": "Robert Muir",
            "id": "comment-12966604"
        },
        {
            "date": "2010-12-03T22:01:09+0000",
            "content": "Cool stuff, Mike!\n\nCould we use this for more efficient wildcard search?  E.g. could we add posting lists for inner nodes to the index? ",
            "author": "Michael Busch",
            "id": "comment-12966691"
        },
        {
            "date": "2010-12-04T10:01:25+0000",
            "content": "Could we use this for more efficient wildcard search? \n\nPossibly \u2013 we need to explore this.  It remains to be seen if the CPU cost of traversing the FST is offset by the fact that the FST can keep more (possibly, all) terms in memory.\n\nAlso we'd need to figure out whether this'd work at the top-level reader (eg as an initial filter to enumerate all terms matching the MTQ), or, per-segment as the terms index (which'd be much more RAM costly).\n\nE.g. could we add posting lists for inner nodes to the index?\n\nHmm... what are the \"inner nodes\"?\n\nI guess we could do something like Pulsing codec, where postings for low doc-freq terms are simply stored in an FST, and then only the higher freq terms remain on disk (optionally of course since whether this is feasible depends on the app).  Then eg lookups against a primary key field would be entirely in RAM. ",
            "author": "Michael McCandless",
            "id": "comment-12966817"
        },
        {
            "date": "2010-12-10T18:16:02+0000",
            "content": "Just an idea, maybe you could use something like ConcurrentSkipListMap for this\nits only in java 6 but you can poach from apache harmony...\n\nRight, I'm planning on using CSLM and sorted int[]s.  Aren't we on Java 6 for trunk?  However, yes, it'd be nice to support JDK 1.5, I'll look into if Harmony's CSLM can be pulled out. ",
            "author": "Jason Rutherglen",
            "id": "comment-12970251"
        },
        {
            "date": "2010-12-11T10:50:50+0000",
            "content": "New patch!  I think it's ready to commit.\n\nI switched the core FST input from byte to int so that the FST can now map any IntsRef to any output.  I also added sugar for adding eg CharSequence, char[] as utf32 to the FST, and also running (looking up the output for a given input).  I made separate BytesRefFSTEnum and IntsRefFSTEnum.  I changed the \"nocommit switch to generics\" to TODOs , but it'd be nice to somehow cutover to generics for the FST's output type.\n\nI also added a test case that indexes docs from the new test line docs file, builds an FST, then verifies the resulting TermsEnum vs BytesRefFSTEnum behave the same. ",
            "author": "Michael McCandless",
            "id": "comment-12970445"
        },
        {
            "date": "2010-12-11T11:14:11+0000",
            "content": "Hi Mike,\nmy problem is that I have no time to closely look into it and I don't understand the whole thing  (you cannot always understand everything g). So I have no idea how the generics should look like. I don't even understand all the SuppressWarnings currently in the code, because in my opinion, generics warnings cannot occur at all those places. From a first look it seems that a few places using untyped Output, but for that the methods need to be generified (a generic <T> before the return type like in AttributeSource). The \"copy\" in one of the TODOs cannot be avoided by generics, because the generics are type erasure, so it would not help in that method (only that you may not need to add so many casts, which on the other hand the compiler will add). ",
            "author": "Uwe Schindler",
            "id": "comment-12970447"
        },
        {
            "date": "2010-12-11T12:49:42+0000",
            "content": "As a start, i generified the PairOutputs.. will try to help with the other classes later today. ",
            "author": "Robert Muir",
            "id": "comment-12970452"
        },
        {
            "date": "2010-12-11T14:00:43+0000",
            "content": "Here a first generifid patch. There are several problems:\n\n\n\tFST<T> as parameter to Outputs.write() and Outputs.read() breaks generics in PairOutput (I added nocommit, this is really why we have the generics, without that this bug would never be visible). Mike said, that there should be really used IndexInput and IndexOutput\n\tThe testcase is broken, as it dynamically casts types depending on int constants. The test should be rewritten to use typed inner classes (and some code duplication)\n\n\n\nI may have missed more generics violations, but it now compiles correctly. Javac does not detect all missing parameters, so I have to review again, but for now I want to post the patch. ",
            "author": "Uwe Schindler",
            "id": "comment-12970459"
        },
        {
            "date": "2010-12-11T14:08:58+0000",
            "content": "Last patch missed some generics in NoOutputs and PositiveInts ",
            "author": "Uwe Schindler",
            "id": "comment-12970460"
        },
        {
            "date": "2010-12-11T14:16:27+0000",
            "content": "This looks great Uwe, thanks! ",
            "author": "Michael McCandless",
            "id": "comment-12970461"
        },
        {
            "date": "2010-12-12T14:28:03+0000",
            "content": "New patch, after substantial iterations w/ the Generics Policeman (thanks!) using Mercurial.\n\nIt's much cleaner now \u2013 the classes are parameterized by the output type of the FST.\n\nI will commit soon... ",
            "author": "Michael McCandless",
            "id": "comment-12970603"
        },
        {
            "date": "2010-12-12T14:43:55+0000",
            "content": "I will merge the ArrayUtils imporvements to 3.x after the commit (its minor, but very useful). ",
            "author": "Uwe Schindler",
            "id": "comment-12970604"
        },
        {
            "date": "2010-12-12T15:26:50+0000",
            "content": "Mike: Here some further, small cleanups in the grow() parts. ",
            "author": "Uwe Schindler",
            "id": "comment-12970608"
        },
        {
            "date": "2010-12-12T15:43:39+0000",
            "content": "Thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12970609"
        },
        {
            "date": "2010-12-13T03:22:22+0000",
            "content": "Reopening: the generic ArrayUtil.grow here (with getComponentType etc) is more than 10x slower than the old code on -client.\nYes, its the same performance on -server, but not everyone runs with that. ",
            "author": "Robert Muir",
            "id": "comment-12970694"
        },
        {
            "date": "2010-12-13T03:33:30+0000",
            "content": "In revision 1045012, i reverted the generic grow() for the classes that are unrelated to this issue.\n\nIts still being used in 3 places by the FST stuff in this patch, and this should be reviewed separately if these areas are performance sensitive. ",
            "author": "Robert Muir",
            "id": "comment-12970697"
        },
        {
            "date": "2010-12-13T03:46:53+0000",
            "content": "Here's the link for reference: http://bugs.sun.com/view_bug.do?bug_id=6525802\n\nThis getComponentType is intrinsic only on -server, on -client it is native (slow).\n\nPersonally I think we should remove this generic grow() completely to avoid performance issues (I kept it, but its only used by FST) ",
            "author": "Robert Muir",
            "id": "comment-12970700"
        },
        {
            "date": "2010-12-13T08:03:08+0000",
            "content": "Thanks Robert for the test with -client. We all use -server and did not see a difference (I made tests yesterday with Java 6). \n\nThis may also be a reason for the slow performance of Collections.sort() without our improvements, because AbstractCollection.toArray(T[]) exactly uses this code to create the array instance (in fact, I copied the resize code from Harmony).\n\nHere's the link for reference: http://bugs.sun.com/view_bug.do?bug_id=6525802\n\nAs far as I see is the slow part a.getClass().getComponentType(). What do you think about the following method signature, that would make it also 100% type safe and does not have the negative performance impact?:\n\n\npublic static <T> T[] grow(T[] array, Class<T> componentType, int size)\n\n\n\nIn code you would use:\n\n\nString[] sa=...\nArrayUtils.grow(sa, String.class, 20);\n\n\n\nI can supply a patch for testing. Array.newInstance is one of the most used methods in lots of code, and the actual growing is done seldom (because of oversize()). ",
            "author": "Uwe Schindler",
            "id": "comment-12970738"
        },
        {
            "date": "2010-12-13T08:26:11+0000",
            "content": "Here the patch, just to test performance. Robert?\n\nSilly: It again creates stupid unchecked warnings in FST classes (this was the main treason for the grow method). If this patch helps I will try to improve, maybe by relaxing generics in ArrayUtil. ",
            "author": "Uwe Schindler",
            "id": "comment-12970740"
        },
        {
            "date": "2010-12-13T09:05:47+0000",
            "content": "Uwe, unfortunately even without the getComponentType its still much worse.\nI'm attaching my benchmark (times in milliseconds):\nmethod1: new+arraycopy\nmethod2: original Array.grow\nmethod3: Array.grow without getComponentType\n\n-client \nmethod1: 221\nmethod2: 2672\nmethod3: 1731\nmethod1: 225\nmethod2: 2674\nmethod3: 1727\nmethod1: 212\nmethod2: 2697\nmethod3: 1698\n\n-server\nmethod1: 160\nmethod2: 166\nmethod3: 167\nmethod1: 159\nmethod2: 168\nmethod3: 170\nmethod1: 162\nmethod2: 172\nmethod3: 171 ",
            "author": "Robert Muir",
            "id": "comment-12970753"
        },
        {
            "date": "2010-12-13T18:16:40+0000",
            "content": "I think we should remove this generic ArrayUtil.grow?  It's too dangerous that we'll accidentally use it in a hotspot some time going forward...? ",
            "author": "Michael McCandless",
            "id": "comment-12970932"
        },
        {
            "date": "2010-12-13T18:31:30+0000",
            "content": "Give me few days to think about it. We still use it in FST, but mostly because the generics are ugly otherwise. Maybe I have a good idea. But we can revert in 3.x? I will do that, if you also thinks so. ",
            "author": "Uwe Schindler",
            "id": "comment-12970941"
        },
        {
            "date": "2010-12-13T18:46:35+0000",
            "content": "It would be best if we could keep the API but w/ no trap for -client java users.\n\nBut, I think we should at least revert from FST's Builder.UnCompiledNode arc reallocation; that's a hot spot... ",
            "author": "Michael McCandless",
            "id": "comment-12970950"
        },
        {
            "date": "2010-12-13T19:18:07+0000",
            "content": "Reverted generic ArrayUtil.grow(T[]) in trunk and 3.x (rev. 1045319). ",
            "author": "Uwe Schindler",
            "id": "comment-12970977"
        }
    ]
}