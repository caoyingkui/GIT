{
    "id": "LUCENE-665",
    "title": "temporary file access denied on Windows",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "When interleaving adds and removes there is frequent opening/closing of readers and writers. \n\nI tried to measure performance in such a scenario (for issue 565), but the performance test failed  - the indexing process crashed consistently with file \"access denied\" errors - \"cannot create a lock file\" in \"lockFile.createNewFile()\" and \"cannot rename file\".\n\nThis is related to:\n\n\tissue 516 (a closed issue: \"TestFSDirectory fails on Windows\") - http://issues.apache.org/jira/browse/LUCENE-516\n\tuser list questions due to file errors:\n\thttp://www.nabble.com/OutOfMemory-and-IOException-Access-Denied-errors-tf1649795.html\n\thttp://www.nabble.com/running-a-lucene-indexing-app-as-a-windows-service-on-xp%2C-crashing-tf2053536.html\n\tdiscussion on lock-less commits http://www.nabble.com/Lock-less-commits-tf2126935.html\n\n\n\nMy test setup is: XP (SP1), JAVA 1.5 - both SUN and IBM SDKs. \n\nI noticed that the problem is more frequent when locks are created on one disk and the index on another. Both are NTFS with Windows indexing service enabled. I suspect this indexing service might be related - keeping files busy for a while, but don't know for sure.\n\nAfter experimenting with it I conclude that these problems - at least in my scenario - are due to a temporary situation - the FS, or the OS, is temporarily holding references to files or folders, preventing from renaming them, deleting them, or creating new files in certain directories. \n\nSo I added to FSDirectory a retry logic in cases the error was related to \"Access Denied\". This is the same approach brought in http://www.nabble.com/running-a-lucene-indexing-app-as-a-windows-service-on-xp%2C-crashing-tf2053536.html - there, in addition to the retry, gc() is invoked (I did not gc()). This is based on the hope that a access-denied situation would vanish after a small delay, and the retry would succeed.\n\nI modified FSDirectory this way for \"Access Denied\" errors during creating a new files, renaming a file.\n\nThis worked fine for me. The performance test that failed before, now managed to complete. There should be no performance implications due to this modification, because only the cases that would otherwise wrongly fail are now delaying some extra millis and retry.\n\nI am attaching here a patch - FSDirectory_Retry_Logic.patch - that has these changes to FSDirectory. \nAll \"ant test\" tests pass with this patch.\n\nAlso attaching a test case that demostrates the problem - at least on my machine. There two tests cases in that test file - one that works in system temp (like most Lucene tests) and one that creates the index in a different disk. The latter case can only run if the path (\"D:\" , \"tmp\") is valid.\n\nIt would be great if people that experienced these problems could try out this patch and comment whether it made any difference for them. \n\nIf it turns out useful for others as well, including this patch in the code might help to relieve some of those \"frustration\" user cases.\n\nA comment on state of proposed patch: \n\n\tIt is not a \"ready to deploy\" code - it has some debug printing, showing the cases that the \"retry logic\" actually took place.\n\tI am not sure if current 30ms is the right delay... why not 50ms? 10ms? This is currently defined by a constant.\n\tShould a call to gc() be added? (I think not.)\n\tShould the retry be attempted also on \"non access-denied\" exceptions? (I think not).\n\tI feel it is somewhat \"woodoo programming\", but though I don't like it, it seems to work...\n\n\n\nAttached files:\n1. TestInterleavedAddAndRemoves.java - the LONG test that fails on XP without the patch and passes with the patch.\n2. FSDirectory_Retry_Logic.patch\n3. Test_Output.txt- output of the test with the patch, on my XP. Only the createNewFile() case had to be bypassed in this test, but for another program I also saw the renameFile() being bypassed.\n\n\n\tDoron",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--FSDirectory_Retry_Logic.patch": "https://issues.apache.org/jira/secure/attachment/12339624/ASF.LICENSE.NOT.GRANTED--FSDirectory_Retry_Logic.patch",
        "FSDirs_Retry_Logic_3.patch": "https://issues.apache.org/jira/secure/attachment/12339840/FSDirs_Retry_Logic_3.patch",
        "FSWinDirectory.patch": "https://issues.apache.org/jira/secure/attachment/12341188/FSWinDirectory.patch",
        "ASF.LICENSE.NOT.GRANTED--TestInterleavedAddAndRemoves.java": "https://issues.apache.org/jira/secure/attachment/12339623/ASF.LICENSE.NOT.GRANTED--TestInterleavedAddAndRemoves.java",
        "FSWinDirectory_26_Sep_06.patch": "https://issues.apache.org/jira/secure/attachment/12341771/FSWinDirectory_26_Sep_06.patch",
        "ASF.LICENSE.NOT.GRANTED--Test_Output.txt": "https://issues.apache.org/jira/secure/attachment/12339625/ASF.LICENSE.NOT.GRANTED--Test_Output.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-08-26T11:09:51+0000",
            "content": "Doron, just to confirm, is it the COMMIT lock that's throwing these unhandled exceptions (not the WRITE lock)?  If so, lockless commits would fix this.\n\nAlso, once we switch to native locking (first \"decoupling locking implementation from directory implementation\": LUCENE-635, and then I'm working on a LockFactory that uses native locks within that) I think likely this would be fixed as well (assuming that createNewFile is failing because two separate processes are trying to do so at [nearly] the same time).\n\nCan you provide more details on the exceptions you're seeing?  Especially on the \"cannot rename file\" exception? ",
            "author": "Michael McCandless",
            "id": "comment-12430732"
        },
        {
            "date": "2006-08-26T11:48:26+0000",
            "content": "It may make more sense to trap \"Access Denied\" in the lock.obtain, but then translate this into \"the lock was not acquired\" (ie, just return 0).  Because, above this code is the retry logic for the lock (which pauses by default for 1.0 sec). ",
            "author": "Michael McCandless",
            "id": "comment-12430737"
        },
        {
            "date": "2006-08-26T12:18:57+0000",
            "content": "I'm having trouble reproducing this issue.  I copied the TestInterleavedAddAndRemoves.java into src/test/org/apache/lucene/index, then ran the test directly using \"java org.junit.runner.JUnitCore org.apache.lucene.index.TestInterleavedAddAndRemoves\", using a clean checkout of the current Lucene HEAD.  The test is still running and is quite far along and I haven't hit any of the above errors.\n\nI'm running on Windows XP SP2, Sun JDK 1.5.0_07.  I wonder if SP1 vs SP2 makes the difference?\n\nCould you also try [temporarily] turning off any virus / malware scanning tools?  I wonder if you have one that's doing \"live\" checking and hold files open?  (Though, I have a virus scanner running and it's not causing problems...).\n\nI would like to reproduce this so I could test it against my fixes for lock-less commits! ",
            "author": "Michael McCandless",
            "id": "comment-12430740"
        },
        {
            "date": "2006-08-28T04:25:22+0000",
            "content": "> just to confirm, is it the COMMIT lock that's throwing these \n> unhandled exceptions (not the WRITE lock)? \n> If so, lockless commits would fix this. \n\nIn my tests so far, these errors appeared only for commit locks. However I consider this a coincidence - there is nothing as far as I can understand special with commit locks comparing to write locks - in particular they both use createNewFile. So, I agree that lockless commits would prevent this, which is good, but we cannot count on that it would not happen for write locks as well. \n\nAlso, the more I think about it the more I like lock-less commits, still, they would take a while to get into Lucene, while this simple fix can help easily now.\n\nLast, with lock-less commits, still, there would be calls to createNewFile for write lock, and there would be calls to renameFile() and other IO file operations, intensively. By having a safety code like the retry logic that is invoked only in rare cases of these unexpected, some nasty errors would be reduced, more users would be happy.\n\n> Can you provide more details on the exceptions you're seeing? \n> Especially on the \"cannot rename file\" exception? \n\nHere is one from my run log, that occurs at the call to optimize, after at the end of all the add-remove iterations -\n\n    [junit] java.io.IOException: Cannot rename C:\\Documents and Settings\\tpowner\\Local Settings\\Temp\\test.perf\\index_24\\deleteable.new to C:\\Documents and Settings\\tpowner\\Local Settings\\Temp\\test.perf\\index_24\\deletable\n    [junit] \tat org.apache.lucene.store.FSDirectory.doRenameFile(FSDirectory.java:328)\n    [junit] \tat org.apache.lucene.store.FSDirectory.renameFile(FSDirectory.java:280)\n    [junit] \tat org.apache.lucene.index.IndexWriter.writeDeleteableFiles(IndexWriter.java:967)\n    [junit] \tat org.apache.lucene.index.IndexWriter.deleteSegments(IndexWriter.java:911)\n    [junit] \tat org.apache.lucene.index.IndexWriter.commitChanges(IndexWriter.java:872)\n    [junit] \tat org.apache.lucene.index.IndexWriter.mergeSegments(IndexWriter.java:823)\n    [junit] \tat org.apache.lucene.index.IndexWriter.mergeSegments(IndexWriter.java:798)\n    [junit] \tat org.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:614)\n    [junit] \tat org.apache.lucene.index.IndexModifier.optimize(IndexModifier.java:304)\n    [junit] \tat org.apache.lucene.index.TestBufferedDeletesPerf.doOptimize(TestBufferedDeletesPerf.java:266)\n    [junit] \tat org.apache.lucene.index.TestBufferedDeletesPerf.measureInterleavedAddRemove(TestBufferedDeletesPerf.java:218)\n    [junit] \tat org.apache.lucene.index.TestBufferedDeletesPerf.doTestBufferedDeletesPerf(TestBufferedDeletesPerf.java:144)\n    [junit] \tat org.apache.lucene.index.TestBufferedDeletesPerf.testBufferedDeletesPerfCase7(TestBufferedDeletesPerf.java:134)\n    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit] \tat java.lang.reflect.Method.invoke(Method.java:585)\n    [junit] \tat junit.framework.TestCase.runTest(TestCase.java:154)\n    [junit] \tat junit.framework.TestCase.runBare(TestCase.java:127)\n    [junit] \tat junit.framework.TestResult$1.protect(TestResult.java:106)\n    [junit] \tat junit.framework.TestResult.runProtected(TestResult.java:124)\n    [junit] \tat junit.framework.TestResult.run(TestResult.java:109)\n    [junit] \tat junit.framework.TestCase.run(TestCase.java:118)\n    [junit] \tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n    [junit] \tat junit.framework.TestSuite.run(TestSuite.java:203)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:297)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:672)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:567)\n    [junit] Caused by: java.io.FileNotFoundException: C:\\Documents and Settings\\tpowner\\Local Settings\\Temp\\test.perf\\index_24\\deletable (Access is denied)\n    [junit] \tat java.io.FileOutputStream.open(Native Method)\n    [junit] \tat java.io.FileOutputStream.<init>(FileOutputStream.java:179)\n    [junit] \tat java.io.FileOutputStream.<init>(FileOutputStream.java:131)\n    [junit] \tat org.apache.lucene.store.FSDirectory.doRenameFile(FSDirectory.java:312)\n    [junit] \t... 27 more\n\nThis exception btw is from the performance test for interleaved-adds-and-removes - issue 565 - so IndexWriter line numbers here relate to applying recent patch from issue 565 (though the same errors are obtained with the svn head of IndexWriter).\n\n> It may make more sense to trap \"Access Denied\" in the lock.obtain, \n> but then translate this into \"the lock was not acquired\" (ie, just return 0). \n> Because, above this code is the retry logic for the lock \n> (which pauses by default for 1.0 sec). \n\nIt is true that when the lock cannot be obtained the existing retry logic in Lock.java could handle it. But when you come to think of it, this is not the purpose of that Lock retry logic - that was for the case that the lock is really acquired by someone else, and we want to stay around for a while to try again. This is not the case here, although the symptoms are similar. Masking this error would not be a good idea. I think it is better for the code in FSDirectory to throw the exception if the retry fails as well (as currently in this patch), and let Lock.java apply its retry logic also for an IOException. If again, the retry of Lock class fails, it would be again problematic to hide the exception. \n\n> I'm having trouble reproducing this issue. I copied the \n> TestInterleavedAddAndRemoves.java into src/test/org/apache/lucene/index, \n> then ran the test directly using \"java org.junit.runner.JUnitCore \n> org.apache.lucene.index.TestInterleavedAddAndRemoves\", \n> using a clean checkout of the current Lucene HEAD. \n> The test is still running and is quite far along and I haven't hit any of the above errors. \n>\n> I'm running on Windows XP SP2, Sun JDK 1.5.0_07. I wonder if SP1 vs SP2 makes the difference? \n> \n> Could you also try [temporarily] turning off any virus / malware scanning tools? \n> I wonder if you have one that's doing \"live\" checking and hold files open? \n> (Though, I have a virus scanner running and it's not causing problems...). \n\nI'm not sure here. I am also running with svn head. I am trying again now, after I turned off anti-virus, and disabled Windows indexing (though the service was already off), and disabled an afs client service that was running. I will report here if the errors happen again. \n\nBut I am not sure how this should affect decision on applying this fix - there would always be user machines out there running Lucene and also running other services. \n\nWe could tell users - hey, make sure that none of the other services / software running on your machine is holding / touching / examining Lucene index files, otherwise, don't blame Lucene - but this is not easily done. Not all developers out there have control or understanding of what's running on their machines - some programs are installed by a system support, you know how it is.\n\nSo, while it is understandable that Lucene would fail if there is a malicious software that actually grabs and holds Lucene files and interfere with them (for \"long\" periods of times), it would be nice to keep these failures at minimum.\n\n> I would like to reproduce this so I could test it against my fixes for lock-less commits! \n\nThe performance test case for 565 is a more aggressive test in this regard - it produced more of these errors for me, including rename() errors. To run it, apply the most recent patch from http://issues.apache.org/jira/browse/LUCENE-565 - that would be NewIndexWriter.Aug23.patch. Notice that the run time (at least on my machine) is over 6 hours...   I ran it btw with ant test, after modifying junit.includes in build.xml to run my test.\n ",
            "author": "Doron Cohen",
            "id": "comment-12430919"
        },
        {
            "date": "2006-08-28T07:23:46+0000",
            "content": "Stopping the anti-virus and its friends did not matter - still getting the errors.\nHowever saw a case that the 30ms did not suffice for obtaining the lock in the retry.\nAlthough 30ms was arbitrary in the first place, this is discouraging.\nThis was before fixing to let Lock.obtain() apply its retry logic in case of such an exception.\nSo I fixed that (Lock.obtain()) and re-running, now using 100ms instead of 30ms for the one retry in FSDirectory.\nAin't life fun. ",
            "author": "Doron Cohen",
            "id": "comment-12430942"
        },
        {
            "date": "2006-08-28T15:24:49+0000",
            "content": "A single retry in Lock.obtain() makes the error less likely, but certainly not impossible... the second attempt could fail for the same reason. \n\nobtain() is supposed to return success or failure immediately.  I'd be tempted to override obtain(timout) for FS locks and keep the retry logic there.\n\nI agree we don't want to mask all IOExceptions and treat them as failure to aquire locks... they should bubble up sooner or later to help diagnose real IOExceptions. ",
            "author": "Yonik Seeley",
            "id": "comment-12430990"
        },
        {
            "date": "2006-08-29T00:10:03+0000",
            "content": "> obtain() is supposed to return success or failure immediately. \n> I'd be tempted to override obtain(timout) for FS locks and keep the retry logic there. \n\nRight, this is the right place for the retry. This way changes are limited to FSDirectory, and obtain() remains unchanged. \n\nI am tesing this now and would subit an updated patch, where:\n\n\tUNEXPECTED_ERROR_RETRY_DELAY is set to 100ms.\n\ttimeout in obtain(timeout) is always repected (even if the presence of those unexpected io errors).\n\tIOExceptions \"bubble up\" as discussed.\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12431100"
        },
        {
            "date": "2006-08-30T06:24:05+0000",
            "content": "I am attaching an updated patch - FSDirs_Retry_Logic_3.patch.\n\nIn this update: \n\n\tmerge with code changes by issue 635 (\"decouple locking from directory\")\n\tmodified by recommendations in above comments:\n\tdo not rely on specific exception message text.\n\toveride lock.obtain(timeout) and handle unexpected exceptions there.\n\tdo not modify logic of obtain()  (no changes to this method).\n\tUNEXPECTED_ERROR_RETRY_DELAY set to 100ms.\n\tdebug prints commented out.\n\n\n\n\"ant test\" tests all pass.\nMy stress IO test passes as well.\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12431486"
        },
        {
            "date": "2006-08-30T10:56:13+0000",
            "content": "\n> But I am not sure how this should affect decision on applying this fix\n> - there would always be user machines out there running Lucene and\n> also running other services.\n\n> We could tell users - hey, make sure that none of the other services /\n> software running on your machine is holding / touching / examining\n> Lucene index files, otherwise, don't blame Lucene - but this is not\n> easily done. Not all developers out there have control or\n> understanding of what's running on their machines - some programs are\n> installed by a system support, you know how it is.\n\n> So, while it is understandable that Lucene would fail if there is a\n> malicious software that actually grabs and holds Lucene files and\n> interfere with them (for \"long\" periods of times), it would be nice to\n> keep these failures at minimum.\n\nAlas I still cannot reproduce this.  I think there must be some\nenvironmental difference.\n\nI agree, Lucene should strive to be robust to the various\n\"environmental differences\" (OS, filesystem, permissions, virus\ncheckers installed, etc.) up to a degree, however, I still think it's\nbest to get to the root cause of these errors so users have the most\ninformation possible: the more information the better.  Plus this may\nhelp us build a more accurate fix to the issue than sleeping /\nretrying.\n\nFor example, if it turns out this happens only under Windows XP SP1,\nyes we can try to make Lucene robust to these errors, but in addition,\nwe should document this so that those users that have the freedom to\ndo so could upgrade to SP2.  (NOTE: I'm just using this as an example:\nwe still have no idea if it's SP1/SP2 difference that \"fixes\" the\nerrors in my testing of this issue).\n\nGiven that we have two environments, one very reliably showing these\nIO problems (yours) and one very reliably not (mine), this is really a\ngreat chance to get to the root cause.  Here are the details of my\nenv:\n\n  OS: Windows XP Pro, SP2\n  Java: Sun JDK 1.5.0_07\n  Command line: java org.junit.runner.JUnitCore org.apache.lucene.index.TestInterleavedAddAndRemoves\n  Services running: Google desktop, Symantec AV ",
            "author": "Michael McCandless",
            "id": "comment-12431533"
        },
        {
            "date": "2006-08-31T06:38:57+0000",
            "content": "I think I know which software is causing/exposing this behavior in my environment.\nThis is the SVN client I am using - TortoiseSVN. \n\nI tried the following sequence:\n 1) Run with TortoiseSVN installed - the test generates these \"access denied:\" errors (and bypasses them). \n 2) Uninstalled TortoiseSVN (+reboot), run test - pass with no \"access denied\" errorrs. \n 3) Installed TortoiseSVN again (+reboot), run test - same \"access denied\" errors again. \n\nI am using most recent stable TotoiseSVN version - 1.3.5 build 6804 - 32 bit, for svn-1.3.2, downloaded from http://tortoisesvn.tigris.org/.\n\nThere is an interesting discussion thread of these type of errors on Windows platforms in svn forums - http://svn.haxx.se/dev/archive-2003-10/0136.shtml. At that case it was svn that suffers from these errors.\n\nIt says \"...Windows allows applications to \"tag-along\" to see when a file has been written - they will wait for it to close and then do whatever they do, usually opening a file descriptor or handle. This would prevent that file from being renamed for a brief period...\"\n\nTortoiseSVN is a shell extension integrated into Windows explorer. As such, it probably demonstrates the \"tag-along\" behavior described above.\n\n(BTW, it is a great svn client to my opinion)\n\nHere is another excerpt from that discussion thread - \n>>\n>> sleep(1) would work, I suppose. ;~) \n>>\n> Most of the time, but not all the time. The only way I've made it work \n> well on all the machines I've tried it on is to put it into a sleep(1) \n> and retry loop of at least 20 or so attempts. Anything less and it \n> still fails on some machines. That implies it is very dependent on \n> machine speed or something, which means sleep times/retry times are just \n> guessing games at best. \n>\n> If I could just get it recreated outside of Subversion and prove it's a \n> Microsoft problem...although it probably still wouldn't get fixed for \n> months at least. \n\nWe don't know that this is a bug in TortoiseSVN.\nWe cannot tell that there are no other such tag-along applications in users machines.\nOne cannot seriously expect this Win32 behavior to be fixed.\n\nI guess the question is - is it worth for Lucene to attempt to at least reduce chances of failures in this case (I say yes ",
            "author": "Doron Cohen",
            "id": "comment-12431801"
        },
        {
            "date": "2006-08-31T23:25:48+0000",
            "content": "Wow!  Fantastic sleuthing.  I never would have guessed that. ",
            "author": "Michael McCandless",
            "id": "comment-12432004"
        },
        {
            "date": "2006-09-13T18:39:28+0000",
            "content": "\nI just sent this summary of this to java-user:\n\nThere is an issue opened on Lucene:\n\n    http://issues.apache.org/jira/browse/LUCENE-665\n\nthat I'd like to draw your attention to and summarize here because\nrecently users have hit it.\n\nThe gist of the issue is: on Windows, you sometimes see intermittant\n\"Access Denied\" errors in renaming segments.new to segments or\ndeletable.new to deletable, etc.  Lucene typically writes files first\nto X.new and then renames then to X.\n\nI know there was at least one recent thread where someone was hitting\nthis and there have been others in the past (including other Jira\nissues).\n\nAnyway, at the end of the issue it was discovered that there was an\nunrelated piece of software (TortoiseSVN client) installed which was\nusing a filesystem \"change log\" capability in Windows that was\n\"causing\" the problem: uninstalling it made the errors go away.\n\nUnfortunately, there are apparently many software packages that use\nthis \"change log\" capability in Windows (virus checkers, Microsoft's\nindexing service, etc.) and so the above issue remains open to figure\nout whether / how to make Lucene robust to these cases.\n\nBut the bottom line is: if you hit these \"Access Denied\" errors, one\nworkaround is to try to turn off or uninstall the software that might\nbe doing this.  I realize in many cases that's not an option (it's a\nproduction box; you can't turn off virus checkers; etc.), but at least\nit's something to try if you can, until there's some resolution on\nthat issue. ",
            "author": "Michael McCandless",
            "id": "comment-12434509"
        },
        {
            "date": "2006-09-13T19:27:03+0000",
            "content": "I do think we should make Lucene robust to \"windows change log\"\nsoftware.\n\nWe could take the position that you have to uninstall such software\nbecause they \"conflict\" with Lucene, but I don't think that's\nrealistic.  Apparently many packages use this convenient API and that\nwill only get worse with time.\n\nI would put this under the \"Lucene should assume the least common\ndenominator of filesystem's capabilities\" umbrella.  Meaning, Lucene\nnow assumes it can rename files right after closing them, but on\nWindows this isn't a safe assumption so if possible we should change\nthe index format to not require this.\n\nI will try to reproduce this bug with my [upcoming] changes for\nlockless commits (numbered segments files) \u2013 the lockless commits\nchanges do much less file renaming, so the issue should be rarer (but\ncould still occur). ",
            "author": "Michael McCandless",
            "id": "comment-12434527"
        },
        {
            "date": "2006-09-13T21:48:55+0000",
            "content": "FYI: on the surface FSDirs_Retry_Logic_3.patch scares me because in many cases wait/retry logic is impossed inside of catch(Throwable) blocks ... that's seems a little too broad to me. ",
            "author": "Hoss Man",
            "id": "comment-12434551"
        },
        {
            "date": "2006-09-18T07:15:26+0000",
            "content": "My summary - and \"what's next\" proposal - for the discussion so far (in comments for issue-665 and in thread http://www.nabble.com/-jira--Created%3A-%28LUCENE-665%29-temporary-file-access-denied-on-Windows-tf2167540.html): \n\n[1] Reported problem can be regenerated in Windows in presence of programs monitoring files.\n\n[2] The proposed fix adds retry after 100ms delay in rare cases where the problem occurs.\n\n[3] That fix reduces much the chances of the problem but does not really solve it.\n\n[4] Proposed fix for FSDirectry not accepted because:\n   [4.1] 100ms second may be too long for highly interactive programs.\n   [4.2] 100ms can be insufficient in some cases.\n   [4.3] non windows environments might be affected with no justification.\n   [4.4] work in progress \"lock-less\" commits may reduce chances for this problem. \n\n[5] A Windows-specific implementation of FSDir that would not be the default, but would be available for application to select, was proposed as a better place to host this retry logic, to be available for applications at least until the \"lock-less\" commits is available for use and proves to solve the same problem. \n\nSo, I intend to write this solution as outlined in [5] above. It would be optional, definitely not the default. Applications would be able to use it for Windows environments. The retry behavior would be controlled. In addition, would be controlled if to apply retry logic for lock-delete or not - the default would be 'no' - because in NFS, a delete may return 'failed' due to time-out although it actually succeeded, and a retry logic in this case might \"kill\" voluntary file locking schemes like the default one used by Lucene (though I assume that with the NFS native locks proposed by Michael this is not the case). \n\nHope this reflects the discussion so far... ",
            "author": "Doron Cohen",
            "id": "comment-12435414"
        },
        {
            "date": "2006-09-20T08:37:57+0000",
            "content": "Attached patch - FSWinDirectory - implements retry logic of FS operations in a separate non default directory class as discussed above. \n\nBy default this new class is not used. Applications can start using it by replacing the IMPL class in FSDirectory to be the new class FSWinDirectory. \n\nThere are two ways to do this - by setting a system property (this is the original mechanism), or by calling FSDirectory static (new) method - setFSDirImplClass(name). \n\nThere are 3 new classes in this patch: \n\n\tFSWinDirectory (extends FSDirectory)\n\tSimpleFSWinLockFactory (extends SimpleFSLockFactory)\n\tTestWinLockFactory (extends TestLockFactory).\n\n\n\nFew simple modifications were required in FSDirectory, SimpleFSLockFactory and TestLockfactory in order to allow inheritance\n\nTests:\n\n\t\"ant test\" passes with new code.\n\tFor test, I modified my copy of build-common.xml to set a system property so that the new WinFS class was always in effect and ran the tests - all passed.\n\tmy stress test TestinterleavedAddAndRemoves fails in my env by default and passes when FSWinDirectory is in effect.\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12436171"
        },
        {
            "date": "2006-09-20T11:39:42+0000",
            "content": "Doron, which version of TortoiseSVN did you have installed when you got the exceptions?\n\nI've installed version 1.4.0 on my Windows XP SP2 box, and then ran your stress test just fine, ie, I can't reproduce the errors (to verify that lock-less commits fixes this). ",
            "author": "Michael McCandless",
            "id": "comment-12436220"
        },
        {
            "date": "2006-09-27T06:26:21+0000",
            "content": "Updated the patch according to review comments by Hoss, plus:\n\n\tprotect currMillis usage from system clock modifications.\n\tall Win specific code in a single Java file with two inner classes, for \"cleaner\" javadocs (now waitForRetry() is provate).\n\n\n\nTested as previous patch: \n\n\t\"ant test\" passes with new code.\n\tFor test, modified build-common.xml to set a system property so that the new WinFS class was always in effect and ran the tests - all passed.\n\tmy stress test TestinterleavedAddAndRemoves fails in my env by default and passes when FSWinDirectory is in effect.\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12438037"
        },
        {
            "date": "2006-10-27T23:56:24+0000",
            "content": "Doron, I finally managed to see an exception like yours above, but I had to have the Windows Explorer open to the index directory and then right click on files, while the indexing was happening.  Once I could get this to happen I then found that the lock-less patch ( LUCENE-701 ) plus native locking seemed to prevent the issue (I think it should because no file renaming is done).  But given how hard it is for me to reproduce this, can you try in your area the combination of lock-less and native locking to see if that prevents this issue?  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-12445301"
        },
        {
            "date": "2006-10-30T07:20:45+0000",
            "content": "Michael, I am not able to generate this with native locks. (did not try with lockless commits).\nWhich brings me to think that native locks should be made default? \n\nThere is another thing that bothers me with locks, in NFS or other shared fs situations:\nLocks are maintained in a specified folder, but a lock file name is derived from the full path of the index dir, actually the cannonical name of this dir. So, if the same index is accessed by two machines, the <drive> / <mount> / <fs> root of that index dir must be named the same in all the machines on which Lucene is invoked to access/maintain that index. \n\nThe documentation for File.getCanonicalPath() says that it is system dependent. So I am not even sure how it can be guaranteed that Lucene used on Linux and Lucene used on Windows (say) that accesss the same index would be able to lock on the same index. And for two Windows machines, admin would have to verify that the index fs (samba/afs/nfs) mounts with the same drive letter. \n\nThis seems like a limitation on one hand, and also as a source for possible problems, when users mis configure their mount names. \n\nI may be missing someting trivial here, because it seems too wrong to be true... I'll let the list comment on that... ",
            "author": "Doron Cohen",
            "id": "comment-12445507"
        },
        {
            "date": "2006-10-30T10:21:19+0000",
            "content": "Odd that just by using native locking, it stopped your issues.  Lucene (without lock-less commits) does quite a bit of file renaming (eg the deletable renaming in your exception above).  I don't get why switching to native locking by itself would fix the renaming errors.\n\nYes the lock prefix is likely to not match when the machines mount to a different point, and almost certainly not if the machines are different OSs.  To deal with this I just use LockFactory.setLockPrefix() after the LockFactory has been assigned to a directory.  I added to the Javadoc for that method in the native locking implementation for exactly this use case. ",
            "author": "Michael McCandless",
            "id": "comment-12445540"
        },
        {
            "date": "2006-10-30T21:56:37+0000",
            "content": "> Odd that just by using native locking, it stopped your issues.\n\nAgree. I did not expect that to happen, since indeed I saw in the past exceptions on renameFile, though most exceptions were in locks activity. So I ran it many times, with an antivirus scan, etc. But it always passes. Therefore I would not object to closing this issue - If I cannot test it I cannot fix it. But for the same reason, I would like to see native locks becoming the default.\n\n> setLockPrefix() \n\nI'll take this one to a seprate thread in dev list. ",
            "author": "Doron Cohen",
            "id": "comment-12445724"
        },
        {
            "date": "2007-01-12T11:15:26+0000",
            "content": "Doron can we close this issue now?  I think native locking and/or less IO operations with lockless commits has resolved it? ",
            "author": "Michael McCandless",
            "id": "comment-12464174"
        },
        {
            "date": "2007-01-12T16:59:28+0000",
            "content": "Hi Michael,\n\nFunny that I got this email with reply-to to you rather than the list.\nFunnier part is that I really wanted to reply you directly rather than the\nlist. Is JIRA a mind reader?\n\nYes, I would like to close the issue - I already said that in my Oct 30\npost.\n\nI would like to do this myself - should I \"close\" or \"resolve\" the issue?\nor perhaps first resolve and then close?  I think I read somewhere the life\ncycle of an issue but I cannot find it. I am also wondering if it should be\nwith \"won't fix\" or \"duplicate\"?\n\nThanks,\nDoron\n\n\n\natlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12464174]\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12464250"
        },
        {
            "date": "2007-01-12T17:27:12+0000",
            "content": "OK sounds good.\n\nWeird that the reply-to was my email.  Normally it's java-dev?\n\nI guess I would \"resolve\" it as \"fixed\", but don't \"close\" it yet, see here:\n\n    http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200605.mbox/%3c4469FDC7.70600@apache.org%3e\n\nI don't think it's a \"duplicate\" since it really is its own bug even if it shared a root cause (& fix) with another bug.  And I don't think it's a \"won't fix\" since it is now fixed (in the trunk). ",
            "author": "Michael McCandless",
            "id": "comment-12464261"
        },
        {
            "date": "2007-01-12T17:29:07+0000",
            "content": "With lockless commits this is no longer reproducable, and although theoretically it seems that in some cases it should be able to reproduce this, practice suggests otherwise, and there seems to be no sufficient justification to introduce retry logic (which is not a 100% solution anyhow). ",
            "author": "Doron Cohen",
            "id": "comment-12464262"
        },
        {
            "date": "2007-01-12T17:34:18+0000",
            "content": "In case anyone else is looking for this - Jira \"life cycle\" under discussed in http://www.nabble.com/jira-workflow-tf2459130.html#a6853917 \n\n(would have been nice if my \"life cycle\" query was expanded with \"workflow\".../)\n\nFor the workflow this is also useful: http://wiki.apache.org/lucene-hadoop-data/attachments/JiraWorkflow/attachments/workflow.png\n ",
            "author": "Doron Cohen",
            "id": "comment-12464263"
        }
    ]
}