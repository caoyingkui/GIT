{
    "id": "LUCENE-124",
    "title": "Fuzzy Searches do not get a boost of 0.2 as stated in \"Query Syntax\" doc",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "1.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "According to the website's \"Query Syntax\" page, fuzzy searches are given a\nboost of 0.2. I've found this not to be the case, and have seen situations where\nexact matches have lower relevance scores than fuzzy matches.\n\nRather than getting a boost of 0.2, it appears that all variations on the term\nare first found in the model, where dist* > 0.5.\n\n\n\tdist = levenshteinDistance / length of min(termlength, variantlength)\n\n\n\nThis then leads to a boolean OR search of all the variant terms, each of whose\nboost is set to (dist - 0.5)*2 for that variant.\n\nThe upshot of all of this is that there are many cases where a fuzzy match will\nget a higher relevance score than an exact match.\n\nSee this email for a test case to reproduce this anomalous behaviour.\nhttp://www.mail-archive.com/lucene-dev@jakarta.apache.org/msg02819.html\n\nHere is a candidate patch to address the issue -\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\tlucene-1.2\\src\\java\\org\\apache\\lucene\\search\\FuzzyTermEnum.java\tSun Jun 09\n13:47:54 2002\n\t\t\n\t\t\n\t\t\tlucene-1.2-modified\\src\\java\\org\\apache\\lucene\\search\\FuzzyTermEnum.java\tFri\nMar 14 11:37:20 2003\n***************\n\t\t\n\t\t\n\t\t\t99,105 ****\n      }\n\t\t\n\t\t\n\t\n\t\n\n\n\n      final protected float difference() \n{\n!         return (float)((distance - FUZZY_THRESHOLD) * SCALE_FACTOR);\n      }\n\n      final public boolean endEnum() \n{\n--- 99,109 ----\n      }\n\n      final protected float difference() {\n! \t\tif (distance == 1.0) \n{\n! \t\t\treturn 1.0f;\n! \t\t}\n! \t\telse\n! \t\t\treturn (float)((distance - FUZZY_THRESHOLD) * SCALE_FACTOR);\n      }\n\n      final public boolean endEnum() {\n***************\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t111,117 ****\n       ******************************/\n\t\t\n\t\t\n\t\n\t\n\n\n\n      public static final double FUZZY_THRESHOLD = 0.5;\n!     public static final double SCALE_FACTOR = 1.0f / (1.0f - FUZZY_THRESHOLD);\n\n      /**\n       Finds and returns the smallest of three integers \n\u2014 115,121 ----\n       ******************************/\n\n      public static final double FUZZY_THRESHOLD = 0.5;\n!     public static final double SCALE_FACTOR = 0.2f * (1.0f / (1.0f -\nFUZZY_THRESHOLD));\n\n      /**\n       Finds and returns the smallest of three integers",
    "attachments": {
        "LUCENE-124.patch": "https://issues.apache.org/jira/secure/attachment/12435881/LUCENE-124.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2003-09-10T22:56:36+0000",
            "content": "Cormac, the problem you described at\nhttp://www.mail-archive.com/lucene-dev@jakarta.apache.org/msg02819.html seems clear.\n\nI do not see any mention of 0.2f boost in any of the Fuzzy classes.  This is a\ndocumentation bug, which I will fix soon.\n\nHowever, your fix may still be valid, as exact matches should never have lower\nscore than fuzzy ones.  I would be very greatful if you could submit that\nlevtest class as a JUnit test, so we can see the bug clearly before applying\nyour patch.\n\nFinally, why did you choose the boost of 0.2?  Why not 0.1 or 0.3 for example? \nAnd is it possible that choosing a random number such as 0.2, will work for\nyour test document set, but may not work for some other cases?\n\nThank you. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321341"
        },
        {
            "date": "2003-09-11T01:01:49+0000",
            "content": "I will work on massaging my test case into a JUnit test.\n\nMeanwhile, I chose the value of 0.2 simply because it is the documented\nbehavior, and therefore I considered that to be the expected, even desired,\nbehavior. That said, it does appear to be a randomly chosen value, although not\nchosen by me \n\nFollowing the logic of how the scoring mechanism works (or at least my\nunderstanding of it), this is not a universal fix, but rather as I state in my\noriginal email on lucene-dev, it mitigates the problem. I chose the fix simply\nas it brought the functionality in line with documented behavior.\n\nThe essence of the problem is the battle in scoring between levenshtein distance\n and term frequency - high frequency terms are scored lower than low frequency\nterms. A good example of a low frequency term is a typo in a document. If the\noriginal correctly spelled word has a very high frequency, the misspelled word\nwill come out on top, due to its significantly lower frequency.\n\nBy setting the boost to 0.2, We at least make it 5 times harder (in terms of\nfrequency) for the misspelled item to appear ahead of the correctly spelled\nitem. But this clearly means that it will still happen.\n\n--Cormac ",
            "author": "Cormac Twomey",
            "id": "comment-12321342"
        },
        {
            "date": "2005-09-23T04:49:15+0000",
            "content": "I would suggest this is a duplicate of http://issues.apache.org/jira/browse/LUCENE-329\n\nThe idf rating of expanded terms should be the same and not favour rarer terms. I suggest that this applies to all auto-expanding searches eg range queries.\n\nShould we drop this bug as a duplicate? ",
            "author": "Mark Harwood",
            "id": "comment-12330223"
        },
        {
            "date": "2010-02-15T15:46:33+0000",
            "content": "Here is a patch, with a test for the issue.\n\nThis patch adds TOP_TERMS_CONSTANT_BOOLEAN_REWRITE to complement TOP_TERMS_SCORING_BOOLEAN_REWRITE.\n\nNote: this solution is different than LUCENE-329, but I think this rewrite method could be useful for other queries as well.\n\nexample usage:\n\nFuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\nquery.setRewriteMethod(MultiTermQuery.TOP_TERMS_CONSTANT_BOOLEAN_REWRITE);\nScoreDoc[] hits = searcher.search(query, ...)\n ...\n\n ",
            "author": "Robert Muir",
            "id": "comment-12833856"
        },
        {
            "date": "2010-02-15T16:02:41+0000",
            "content": "I will wait till after the code freeze and commit this in a few days if no one objects.\n\nI don't claim its a 'best-practice' fix for fuzzy (see LUCENE-329 for ideas on that), I just think TOP_TERMS_CONSTANT_BOOLEAN_REWRITE is a useful complement to TOP_TERMS_SCORING_BOOLEAN_REWRITE, for MultiTermQueries that want the Top-N terms expansion, but the constant score behavior of CONSTANT_BOOLEAN_REWRITE.\n\nthis patch doesnt change any defaults for fuzzy either. in fact its not specific to fuzzy at all. ",
            "author": "Robert Muir",
            "id": "comment-12833865"
        },
        {
            "date": "2010-02-15T16:51:15+0000",
            "content": "uwe pointed out to me, i think there is a naming problem with TOP_TERMS_CONSTANT_BOOLEAN_REWRITE, as the entire booleanquery will not produce the same score like CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE. \n\nI think the behavior makes sense though, as it wouldnt make sense to use TOP_TERMS without per-term boosting, but we need to fix the naming... and TOP_TERMS_BOOST_BOOLEAN_REWRITE sounds confusing. ",
            "author": "Robert Muir",
            "id": "comment-12833885"
        },
        {
            "date": "2010-02-16T11:17:58+0000",
            "content": "I will wait till after the code freeze and commit this in a few days if no one objects. \n\nThe code freeze only affects branches. Trunk is only frozen for fixes that should also go into branches. ",
            "author": "Uwe Schindler",
            "id": "comment-12834163"
        },
        {
            "date": "2010-02-16T18:49:54+0000",
            "content": "The code freeze only affects branches. Trunk is only frozen for fixes that should also go into branches.\n\nok, well I will wait on this one anyway especially as there is a concern about naming... no rush, looks like its been open for a long time. ",
            "author": "Robert Muir",
            "id": "comment-12834376"
        },
        {
            "date": "2010-03-08T18:54:32+0000",
            "content": "Attached is an updated patch:\n\n\tSynced to trunk as these PQ rewrite methods allow setting of the size\n\tRenamed to TopTermsBoostOnlyBooleanQueryRewrite\n\n\n\nPlease review, I think this rewrite method would also be helpful for\nimproving Fuzzy's junit tests: Testing that scores are correct, etc. ",
            "author": "Robert Muir",
            "id": "comment-12842768"
        },
        {
            "date": "2010-03-08T19:07:43+0000",
            "content": "Patch looks good Robert! ",
            "author": "Michael McCandless",
            "id": "comment-12842772"
        },
        {
            "date": "2010-03-08T19:17:51+0000",
            "content": "Thanks Mike. I will commit later today if no one objects. ",
            "author": "Robert Muir",
            "id": "comment-12842776"
        },
        {
            "date": "2010-03-08T20:39:30+0000",
            "content": "Committed revision 920499. ",
            "author": "Robert Muir",
            "id": "comment-12842810"
        }
    ]
}