{
    "id": "LUCENE-8396",
    "title": "Add Points Based Shape Indexing",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Implemented",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "I've been tinkering with this for a while and would like to solicit some feedback. I'd like to introduce a new shape field based on the BKD/Points codec to bring much of the Points based performance improvements to the shape indexing and search usecase. Much like the existing shape indexing in spatial-extras the shape will be decomposed into smaller parts, but instead of decomposing into quad cells (which have the drawback of precision accuracy and sheer volume of terms) I'd like to explore decomposing the shapes into a triangular mesh; similar to gaming and computer graphics. Not only does this approach reduce the number of terms, but it has the added benefit of better accuracy (precision is based on the index encoding technique instead of the spatial resolution of the quad cell). \n\nFor better clarity, consider the following illustrations (of a polygon in a 1 degree x 1 degree spatial area).  The first is using the quad tree technique applied in the existing inverted index. The second is using a triangular mesh decomposition as used by popular OpenGL and javascript rendering systems (such as those used by mapbox).\n\n\n\nDecomposing this shape using a quad tree results in 1,105,889 quad terms at 3 meter spatial resolution.\n\n\n\nDecomposing using a triangular mesh results in 8 triangles at the same resolution as encodeLat/Lon.\n\nThe decomposed triangles can then be encoded as a 6 dimensional POINT and queries are implemented using the computed relations against these triangles (similar to how its done with the inverted index today).",
    "attachments": {
        "LUCENE-8396.patch": "https://issues.apache.org/jira/secure/attachment/12931367/LUCENE-8396.patch",
        "tessellatedPoly.png": "https://issues.apache.org/jira/secure/attachment/12931365/tessellatedPoly.png",
        "polyWHole.png": "https://issues.apache.org/jira/secure/attachment/12931366/polyWHole.png"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16542052",
            "author": "Nicholas Knize",
            "content": "I've attached a WIP patch for initial feedback.\n\nPatch summary:\n\n\n\tadds a new `LatLonShape` abstract class that uses factory methods to index and search.\n\t`createIndexableFields` static method creates an array of `TriangleField` objects\n\tto index the shape: iterate over the `TriangleField` array calling `document.add` which will add each tessellated triangle to the index\n\tlike `LatLonPoint` the `LatLonShape.newBoxQuery` method will create a new `LatLonShapeBoundingBoxQuery`\n\tfinally, there is a `TestLatLonShapeQueries` class that is very similar to `BaseGeoPointTestCase` in that it will test 3 different sized random data sets (Tiny, Medium, Big)\n\talong with `geo.TestTessellator` and `document.TestLatLonShape` that contain some explicit testing for each of those classes\n\n\n\nJavadocs are included. There are many todos, such as generalizing the bounding box query into a generic shape query that will query indexed shapes with provided query shapes. I think this can be done rather easily by adding a relateTriangle utility method to Polygon2D for computing relations of indexed triangles with the target shape. That, however, will be left as a future feature. ",
            "date": "2018-07-12T18:23:41+0000"
        },
        {
            "id": "comment-16542392",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 3 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 57s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n -1 \n  compile  \n   0m  8s \n  sandbox in the patch failed.  \n\n\n -1 \n  javac  \n   0m  7s \n  sandbox in the patch failed.  \n\n\n +1 \n  Release audit (RAT)  \n   0m 32s \n  Release audit (RAT) rat-sources passed  \n\n\n -1 \n  Release audit (RAT)  \n   0m  4s \n  sandbox in the patch failed.  \n\n\n +1 \n  Release audit (RAT)  \n   0m  7s \n  Release audit (RAT) rat-sources passed  \n\n\n -1 \n  Check forbidden APIs  \n   0m 32s \n  Check forbidden APIs check-forbidden-apis failed  \n\n\n -1 \n  Validate source patterns  \n   0m 32s \n  Check forbidden APIs check-forbidden-apis failed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  21m 12s \n  core in the patch passed.  \n\n\n -1 \n  unit  \n   0m  7s \n  sandbox in the patch failed.  \n\n\n +1 \n  unit  \n   3m 26s \n  test-framework in the patch passed.  \n\n\n  \n   \n  27m 51s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8396 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12931367/LUCENE-8396.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 8997d41 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_172 \n\n\n compile \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/artifact/out/patch-compile-lucene_sandbox.txt \n\n\n javac \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/artifact/out/patch-compile-lucene_sandbox.txt \n\n\n Release audit (RAT) \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/artifact/out/patch-compile-lucene_sandbox.txt \n\n\n Check forbidden APIs \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/artifact/out/patch-check-forbidden-apis-lucene.txt \n\n\n Validate source patterns \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/artifact/out/patch-check-forbidden-apis-lucene.txt \n\n\n unit \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/artifact/out/patch-unit-lucene_sandbox.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/testReport/ \n\n\n modules \n C: lucene/core lucene/sandbox lucene/test-framework U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/46/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-07-13T01:17:59+0000"
        },
        {
            "id": "comment-16542761",
            "author": "Adrien Grand",
            "content": "This looks awesome. Indexing two additional dimensions sounds worth it to me if it helps index way fewer fields. It's also exciting we're exercising high numbers of dimensions with the points API. Since this is targeting sandbox and the patch is a bit large, I think it's easier to get it in soon and iterate from there? It looks pretty clean to me already. Let's maybe just make windingOrder final on the Polygon class first.\n\nSome other comments I had while skimming through the patch:\n\n\tLatLonShape's javadocs say that \"Finding all shapes within a range at search time is efficient.\" but I think it really means \"intersect\" rather than \"within\"\n\tTriangleField should be private and maybe renamed to LatLonTriangle for consistency with LatLonBoundingBox and LatLonPoint?\n\tLatLonShapeBoundingBoxQuery should be pkg-private and its constructor should validate that the box doesn't cross the dateline?\n\tTessellator would probably be a bit easier to test and debug if it didn't handle both quantization and tessellation at once. Can we eg. do quantization first (eg. with a clone of the Polygon class that has ints instead of doubles) on top of tessellation and then make tessellation work directly in the quantized space? (Probably best done after merging to ease reviewing)\n\tTessellator.Node uses encodeLatCeil and encodeLonCeil, but it should really use encodeLat and encodeLon?\n\tSome tests like TestLatLonShape.testSVG and TestTessellator.testBug write files and don't assert anything, looks like left-overs?\n\n ",
            "date": "2018-07-13T09:13:20+0000"
        },
        {
            "id": "comment-16542779",
            "author": "Adrien Grand",
            "content": "do quantization first [...] and then make tessellation work directly in the quantized space\n\nNow that I think about it, it's probably easier to do it the other way around, as the polygon could easily become invalid through quantization? Having triangles hold doubles rather than quantized ints might also help if we want to further split these triangles in the future, eg. to prevent flat triangles from increasing the area of the intersection of MBRs of sibling nodes in the tree. ",
            "date": "2018-07-13T09:28:55+0000"
        },
        {
            "id": "comment-16542845",
            "author": "Michael McCandless",
            "content": "This looks really cool!\u00a0 It is\u00a0great to see many dimensions being used with points.\u00a0 +1 to push to sandbox and iterate there. ",
            "date": "2018-07-13T10:25:20+0000"
        },
        {
            "id": "comment-16543644",
            "author": "David Smiley",
            "content": "+1 super cool Nick! \u00a0I like how the use of a tessellation technique can represent polygons with a number of triangles on the order of the number of edge vertices, and you wind up with perfect accuracy & scalability. \u00a0There are also some off the shelf computational geometry libraries that can simplify polygons (JTS can), and some users may want to do that when indexing shapes.\n\nIn your example you show a quad grid index of today decomposing a shape into a million terms.\u00a0\u00a0Why would someone do this?\u00a0 If someone wants to index shapes today with spatial-extras, they ought to\u00a0use SerializedDVStrategy for accuracy combined with RecursivePrefixTreeStrategy for a grid index (perhaps 20% distErrPct) and CompositeSpatialStrategy wrapping both. \u00a0The number of terms for any shape is effectively capped and controlled indirectly via distErrPct \u2013 perhaps 100 terms for distErrPct=0.2? \u00a0(not sure without trying). ",
            "date": "2018-07-13T20:08:02+0000"
        },
        {
            "id": "comment-16543708",
            "author": "Nicholas Knize",
            "content": "Thanks Adrien Grand, Michael McCandless, and David Smiley some great feedback here:\n\nGreat suggestions Adrien Grand. I'll make these changes, clean up the code, and push to sandbox for iterating.\n\nDavid Smiley\nThere are also some off the shelf computational geometry libraries that can simplify polygons (JTS can), and some users may want to do that when indexing shapes.\nI took a look at several of the OTS simplification a while ago. I'm sure there are many more out there than what I canvassed so this isn't intended to be a catch all comment. And we could certainly look at other tessellation libraries in the future for iterative performance improvements. But I did look at the JTS simplification tools. The problem with those varied: from tolerance value errors creating invalid polygons to general performance overhead. Each were great as a stand alone utility, but none were reliable nor performant enough for the scale desired.\nthey ought to use SerializedDVStrategy for accuracy combined with RecursivePrefixTreeStrategy for a grid index\nIndeed this is an optimization allowing one to index \"larger\" quad cells (to reduce the number of terms in the inverted index) and subsequently use the WKB BinaryDocValues for accurate relations. But not only is the use of BinaryDocValues with WKB limiting (with respect to shapes with large number of vertices and the marshalling/unmarshalling overhead) but all of the calls to .relate (with either JTS, S2, or other third party implementations) incur their own performance penalties.. not just for relating each quad cell to the query shape but also with having to unmarshall \"leaf shapes\" and compute the DE9IM to relate those to the query shape for accuracy.\ncombined with...and...wrapping both\nThis was the other motivator... Like LatLonPoint its nice to have a simple API (hopefully intended for core) that can solve the general Shape indexing and search use case without having to decide which PrefixTree, Grid, and Shape Relation libraries to use. Then for the more expert use cases users can always move over to spatial-extras for all of the additional choices. ",
            "date": "2018-07-13T21:01:29+0000"
        },
        {
            "id": "comment-16543748",
            "author": "David Smiley",
            "content": "I definitely understand that this new shape indexing scheme is better than serialized geometry + a grid, and why it is \u2013 no need to sell me . \u00a0The benchmarks will show an\u00a0amazing improvement, I'm sure \u2013 especially for\u00a0shapes with a high number of vertexes.\n\nI want to list some use-cases in which spatial-extras is (still) useful. \u00a0This list might go into documentation for spatial-extras. \u00a0A new LatLonShape here reduced the list somewhat \u2013 certainly for a common case (albeit indexing anything other than points simply isn't common among search/Lucene users). \u00a0Perhaps in time LatLonShape will mature in capability enough for us to remove spatial-extras if there's not much worth saving for the complexity. \u00a0It'd be helpful if you could validate your understanding against mine below.\n\n\tAdditional shape predicates (other than simply Intersects):\u00a0Contains, IsWithin.\n\tIndexing circles\n\tIndexing linestrings\n\tIndexing in a user defined Euclidean 2D coordinate space (i.e. other than -180/180, -90/90).\n\t\n\t\tquery by Euclidean circle (not sphere)\n\t\n\t\n\tIndexing surface-of-sphere/ellipsoid shapes (Geo3D, S2PrefixTree)\n\tHeatmaps using pre-indexed cells\n\tDate range indexes aligned to meaningful units\n\n ",
            "date": "2018-07-13T21:34:06+0000"
        },
        {
            "id": "comment-16543776",
            "author": "David Smiley",
            "content": "I took a peek at the patch. \u00a0One bit surprised me. \u00a0There is an optimization with a comment as follows:\n\n// If all docs have exactly one value and the cost is greater\n// than half the leaf size then maybe we can make things faster\n// by computing the set of documents that do NOT match the query\n\n\nBut isn't that impossible to detect when the indexed data is comprised of multiple triangles per document? It uses PointValues.size() to detect this but that value isn't useful here, right?  I'm guessing you copy-pasted this logic for LatLonPoint code where it does apply.\n\n\u00a0\n\n\u00a0 ",
            "date": "2018-07-13T21:50:22+0000"
        },
        {
            "id": "comment-16543787",
            "author": "Nicholas Knize",
            "content": "Updated patch incorporating feedback from first round review. ",
            "date": "2018-07-13T22:00:23+0000"
        },
        {
            "id": "comment-16543789",
            "author": "Nicholas Knize",
            "content": "\nBut isn't that impossible to detect \n\nExtremely unlikely to next to impossible? Yes, I think so. So I'm pretty confident this logic can be removed. ",
            "date": "2018-07-13T22:02:59+0000"
        },
        {
            "id": "comment-16544267",
            "author": "ASF subversion and git services",
            "content": "Commit b5ef13330f179ac6a2d98b9dfa4803811190e773 in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b5ef133 ]\n\nLUCENE-8396: Add Points Based Shape Indexing and Search that decomposes shapes into a triangular mesh and indexes individual triangles as a 6 dimension point ",
            "date": "2018-07-14T16:44:00+0000"
        },
        {
            "id": "comment-16544286",
            "author": "ASF subversion and git services",
            "content": "Commit 3b1714e737049ec562c8dce66fc5fe8cdad74097 in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b1714e ]\n\nLUCENE-8396: silence random large poly test - for now ",
            "date": "2018-07-14T17:48:49+0000"
        },
        {
            "id": "comment-16544310",
            "author": "ASF subversion and git services",
            "content": "Commit bc29580378d78f707b5cf26da8321980e907573c in lucene-solr's branch refs/heads/branch_7x from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc29580 ]\n\nLUCENE-8396: Add Points Based Shape Indexing and Search that decomposes shapes into a triangular mesh and indexes individual triangles as a 6 dimension point ",
            "date": "2018-07-14T18:47:04+0000"
        },
        {
            "id": "comment-16544324",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n -1 \n  patch  \n   0m  5s \n  LUCENE-8396 does not apply to master. Rebase required? Wrong Branch? See https://wiki.apache.org/lucene-java/HowToContribute#Contributing_your_work for help.  \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8396 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12931617/LUCENE-8396.patch \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/47/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-07-14T19:53:13+0000"
        },
        {
            "id": "comment-16544332",
            "author": "Nicholas Knize",
            "content": "Test Failure....\n\n [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestLatLonShapeQueries -Dtests.method=testRandomMedium -Dtests.seed=70F032E1B960036E -Dtests.multiplier=3 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=th -Dtests.timezone=US/Eastern -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\n\n   [junit4] FAILURE 24.3s J1 | TestLatLonShapeQueries.testRandomMedium <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: wrong hit (first of possibly more):\n   [junit4]    > FAIL: id=7542 should match but did not\n   [junit4]    >   query=LatLonShapeBoundingBoxQuery: field=shape:Rectangle(lat=0.0 TO 0.0 lon=8.381903171539307E-8 TO 90.07557132281363) docID=9514\n   [junit4]    >   polygon=[-4.190951585769653E-8, 0.0] [89.99999995809048, 0.0] [89.99999995809048, 179.99999991618097] [-4.190951585769653E-8, 0.0] \n   [junit4]    >   deleted?=false  rect=Rectangle(0.0 TO 0.0 lon=8.381903171539307E-8 TO 90.07557132281363)\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([70F032E1B960036E:CD2E0549F8056008]:0)\n   [junit4]    >        at org.apache.lucene.document.TestLatLonShapeQueries.verifyRandomBBoxes(TestLatLonShapeQueries.java:263)\n   [junit4]    >        at org.apache.lucene.document.TestLatLonShapeQueries.verify(TestLatLonShapeQueries.java:134)\n   [junit4]    >        at org.apache.lucene.document.TestLatLonShapeQueries.doTestRandom(TestLatLonShapeQueries.java:130)\n   [junit4]    >        at org.apache.lucene.document.TestLatLonShapeQueries.testRandomMedium(TestLatLonShapeQueries.java:102)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /home/jenkins/workspace/Lucene-Solr-BadApples-master-Linux/lucene/build/sandbox/\n\n ",
            "date": "2018-07-14T20:30:18+0000"
        },
        {
            "id": "comment-16564672",
            "author": "Steve Rowe",
            "content": "Test failure, from https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-Windows/726/:\n\n\nChecking out Revision a9f129190f9065c8775a628df181fb53248db488 (refs/remotes/origin/branch_7x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestLatLonShapeQueries -Dtests.method=testRandomTiny -Dtests.seed=1BAECFBE374F07D6 -Dtests.slow=true -Dtests.locale=en-PN -Dtests.timezone=America/Edmonton -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.03s J1 | TestLatLonShapeQueries.testRandomTiny <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: wrong hit (first of possibly more):\n   [junit4]    > FAIL: id=11 should not match but did\n   [junit4]    >   query=LatLonShapeBoundingBoxQuery: field=shape:Rectangle(lat=-52.35433959402144 TO 58.83083060849458 lon=-79.63909948244691 TO 179.99999991618097) docID=11\n   [junit4]    >   polygon=[-4.190951585769653E-8, -152.01172342523932] [89.99999995809048, -152.01172342523932] [89.99999995809048, -49.80329998768866] [-4.190951585769653E-8, -152.01172342523932] \n   [junit4]    >   deleted?=false  rect=Rectangle(-52.35433959402144 TO 58.83083060849458 lon=-79.63909948244691 TO 179.99999991618097)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([1BAECFBE374F07D6:52E911F8696E3F7A]:0)\n   [junit4]    > \tat org.apache.lucene.document.TestLatLonShapeQueries.verifyRandomBBoxes(TestLatLonShapeQueries.java:262)\n   [junit4]    > \tat org.apache.lucene.document.TestLatLonShapeQueries.verify(TestLatLonShapeQueries.java:133)\n   [junit4]    > \tat org.apache.lucene.document.TestLatLonShapeQueries.doTestRandom(TestLatLonShapeQueries.java:129)\n   [junit4]    > \tat org.apache.lucene.document.TestLatLonShapeQueries.testRandomTiny(TestLatLonShapeQueries.java:97)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n   [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70), sim=RandomSimilarity(queryNorm=true): {}, locale=en-PN, timezone=America/Edmonton\n\n ",
            "date": "2018-08-01T03:13:43+0000"
        }
    ]
}