{
    "id": "SOLR-967",
    "title": "NamedList - Deprecating ctor. with heterogenous List and replacing with a type-safe variant.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "NamedList (org/apache/solr/common/util/NamedList ) currently has a heterogenous List (even numbered indices are String-s ) and the odd-numbered indices are the specific types.  As per benchmarks ( see SOLR-912 ) - the implementation could be improved in favor of a Map.Entry<String, T> that beats in performance and ease of code maintenance. \n\nAs per the discussion in SOLR-912 , a separate issue in JIRA is created that temporarily deprecates the List ctor. in NamedList and replaces the same with a Map.Entry<String, T> [] arg. constructor . \n\nThis would be go in 1.4 to enable people to migrate their code for the new ctor. and move away from List<?> . \n\nAt a later version of Solr (may be v2) - the optimal implementation would be brought back in with the List <Map.Entry<String, ?> > for better type-safety and performance.",
    "attachments": {
        "SOLR-967.patch": "https://issues.apache.org/jira/secure/attachment/12398246/SOLR-967.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karthik K",
            "id": "comment-12665165",
            "date": "2009-01-19T17:52:13+0000",
            "content": "\n\n\n    1.  add an \"Entry<String, T>[]\" constructor (with a warning, but no commitment, that modifying the array contents may affect the NamedList) which builds up a pairwise List<Object> and delegates to the existing \"List\" constructor\n\n\n\n\n\nOnce we build a pairwise List<Object> and delegate to the external \"List\" ctor , I am not sure how we can give a 'partial' guarantee that modifying the array affecting NamedList since we are essentially flattening the former data structure (Map.Entry<String, T> ) into the latter ( String key; T value; } \n\nSo - I have added documentation such a way that the guarantee is not possible.  \n\n\n\n\n\n    2. deprecate the existing List constructor.\n\n\n\n\n\nIn addition to deprecating the existing ctor. the comment has also been modified such that the external modification guarantee would not be held again in the future implementations and users are advised to use add / remove etc. for the modification as opposed to changing the data structure without the knowledge of the class. \n\n In fact-  if we eventually bring back List < Map.Entry<String, ? > > , the external modification guarantee might be honored although I am not sure if that is a big development plus as providing multiple ways to modify the underlying data structure might be hard to track in the code. \n\nLet me know if this patch would provide the intended transition.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12675100",
            "date": "2009-02-19T19:37:59+0000",
            "content": "Kay: I made a few modifications to your patch...\n\n1) tweaked some of the docs. you had a cut/paste sentence in the new constructor that contradicted the later sentences, i also cleaned up exactly what the commitments are from each constructor, and what the expectations should be for users.  We also don't need to tell people that the explicit backing of the LIst constructor will go away in future versions, because it will only go away when the method goes away (we can't add a pure List<Entry> constructor for a while after removing the current List constructor because of type erasure and people possibly skipping versions when upgrading)\n\n2) i changed the new constructor to take Map.Entry<String, ? extends T>[] instead of Map.Entry<String, ?>[] ... unless i'm missing something a completely unbounded type wildcard would be just as bad as the untyped List.\n\nhow does this look to you? "
        },
        {
            "author": "Karthik K",
            "id": "comment-12675116",
            "date": "2009-02-19T20:22:52+0000",
            "content": "1) Thanks  for helping with the docs.\n\n2)  ? extends T - makes perfect sense since it provides one more degree of flexibility while preserving the contract about the type T .  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12675117",
            "date": "2009-02-19T20:23:11+0000",
            "content": "The revised patch looks ok to me.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12675158",
            "date": "2009-02-19T22:21:01+0000",
            "content": "Committed revision 746031. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775630",
            "date": "2009-11-10T15:51:55+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}