{
    "id": "SOLR-11988",
    "title": "MockDirectoryFactory.exists() behaves diff then other impls -- can cause FullSolrCloudDistribCmdsTest failures due to SolrCore.initIndex incorrectly thinking index directory for brand new SolrCores already exist?",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "There's been quite a few jenkins failures from FullSolrCloudDistribCmdsTest that all seem to follow a similar pattern:\n\n\tFailure manifests as \"Could not find collection:collection2\"\n\tFailing seeds frequently reproduce, but aren't guaranteed to\n\tRoot cause can be traced back to the collection creation failing because one of more replica cores failed due to the brand new (Solr)IndexWriter expects to find an existing segments file\n\t\n\t\tSolrCore should have already created an (empty) index in SolrCore.initIndex(...)\n\t\tThe fact that the SolrIndexWrite throws this exception in it's constructor suggests that the earlier call to SolrCore.initIndex(...) is not functioning reliably\n\t\tBased on some experimenting i've done, it seems like the underlying problem is that in SolrCore.initIndex(...) the DirectoryFactory can \"lie\" about wether a directory already exists.\n\t\n\t\n\n\n\nMore details to follow in comments.",
    "attachments": {
        "log.txt": "https://issues.apache.org/jira/secure/attachment/12910647/log.txt",
        "SOLR-11988_nocommit_logging.patch": "https://issues.apache.org/jira/secure/attachment/12910648/SOLR-11988_nocommit_logging.patch",
        "SOLR-11988.patch": "https://issues.apache.org/jira/secure/attachment/12910838/SOLR-11988.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-14T22:56:07+0000",
            "content": "\nBelow is an example of the type of execption that gets logged when this test fails, from the log.txt file I just attached (where 2 different replicas had this same problem).\n\nNote that this log.txt file was produced using the attached SOLR-11988_nocommit_logging.patch that increases the logging verbosity in SolrCore.initIndex(...) \u2013 hence the \"nocommit\" log line, and the line numbers not matching up exactly with current master \u2013 but the net result is the same: In SolrCore.initIndex(...) the DirectoryFactory claims that the index directory for this brand new, never before in existence SolrCore, already exists and doesn't need to be initialized.  This then causes a problem when we try to open the \"real\" IndexWriter against it (using OpenMode.APPEND because we expect it to already exist)...\n\n\n$ ant test  -Dtestcase=FullSolrCloudDistribCmdsTest -Dtests.method=test -Dtests.seed=E6FD3BCDEA5D2094 -Dtests.slow=true -Dtests.locale=ar-JO -Dtests.timezone=Asia/Aqtobe -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n...\n   [junit4]   2> 33926 INFO  (qtp1926432793-173) [n:127.0.0.1:60391_kg_fmt c:collection2 s:shard6  x:collection2_shard6_replica_n32] o.a.s.c.SolrCore [collection2_shard6_replica_n32] nocommit: skipping creation of '/home/hossman/lucene/dev/solr/build/solr-core/test/J0/../../../../../../../../../home/hossman/lucene/dev/solr/build/solr-core/test/J0/temp/solr.cloud.FullSolrCloudDistribCmdsTest_E6FD3BCDEA5D2094-001/shard-4-001/cores/collection2_shard6_replica_n32/data/index/' (aka: '/home/hossman/lucene/dev/solr/build/solr-core/test/J0/../../../../../../../../../home/hossman/lucene/dev/solr/build/solr-core/test/J0/temp/solr.cloud.FullSolrCloudDistribCmdsTest_E6FD3BCDEA5D2094-001/shard-4-001/cores/collection2_shard6_replica_n32/data/index') because dirFac (org.apache.solr.core.MockDirectoryFactory@768117c) says it exists\n...\n   [junit4]   2> 34763 ERROR (qtp1926432793-173) [n:127.0.0.1:60391_kg_fmt c:collection2 s:shard6  x:collection2_shard6_replica_n32] o.a.s.h.RequestHandlerBase org.apache.solr.common.SolrException: Error CREATEing SolrCore 'collection2_shard6_replica_n32': Unable to create core [collection2_shard6_replica_n32] Caused by: no segments* file found in LockValidatingDirectoryWrapper(MockDirectoryWrapper(RAMDirectory@63c826a3 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@17cdc1)): files: []\n   [junit4]   2>        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:993)\n   [junit4]   2>        at org.apache.solr.handler.admin.CoreAdminOperation.lambda$static$0(CoreAdminOperation.java:91)\n...\n   [junit4]   2> Caused by: org.apache.solr.common.SolrException: Unable to create core [collection2_shard6_replica_n32]\n   [junit4]   2>        at org.apache.solr.core.CoreContainer.createFromDescriptor(CoreContainer.java:1059)\n   [junit4]   2>        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:954)\n   [junit4]   2>        ... 39 more\n   [junit4]   2> Caused by: org.apache.solr.common.SolrException: Error opening new searcher\n   [junit4]   2>        at org.apache.solr.core.SolrCore.<init>(SolrCore.java:1013)\n   [junit4]   2>        at org.apache.solr.core.SolrCore.<init>(SolrCore.java:868)\n   [junit4]   2>        at org.apache.solr.core.CoreContainer.createFromDescriptor(CoreContainer.java:1043)\n   [junit4]   2>        ... 40 more\n   [junit4]   2> Caused by: org.apache.solr.common.SolrException: Error opening new searcher\n   [junit4]   2>        at org.apache.solr.core.SolrCore.openNewSearcher(SolrCore.java:2100)\n   [junit4]   2>        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:2220)\n   [junit4]   2>        at org.apache.solr.core.SolrCore.initSearcher(SolrCore.java:1096)\n   [junit4]   2>        at org.apache.solr.core.SolrCore.<init>(SolrCore.java:985)\n   [junit4]   2>        ... 42 more\n   [junit4]   2> Caused by: org.apache.lucene.index.IndexNotFoundException: no segments* file found in LockValidatingDirectoryWrapper(MockDirectoryWrapper(RAMDirectory@63c826a3 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@17cdc1)): files: []\n   [junit4]   2>        at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:1072)\n   [junit4]   2>        at org.apache.solr.update.SolrIndexWriter.<init>(SolrIndexWriter.java:119)\n   [junit4]   2>        at org.apache.solr.update.SolrIndexWriter.create(SolrIndexWriter.java:94)\n   [junit4]   2>        at org.apache.solr.update.DefaultSolrCoreState.createMainIndexWriter(DefaultSolrCoreState.java:257)\n   [junit4]   2>        at org.apache.solr.update.DefaultSolrCoreState.getIndexWriter(DefaultSolrCoreState.java:131)\n   [junit4]   2>        at org.apache.solr.core.SolrCore.openNewSearcher(SolrCore.java:2061)\n   [junit4]   2>        ... 45 more\n\n\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-16364894"
        },
        {
            "date": "2018-02-15T00:01:11+0000",
            "content": "Note: with useFactory(null); added to FullSolrCloudDistribCmdsTest.beforeSuperClass() I can't get this seed to fail at all ... suggesting that MockDirectoryFactory is almost certainly the problem.\n ",
            "author": "Hoss Man",
            "id": "comment-16364983"
        },
        {
            "date": "2018-02-16T00:03:14+0000",
            "content": "Ok, the underlying problem seems to be:\n\n\tSolrCore's usage of DirectoryFactory assumes particular semantics/meaning of how DirectoryFactory.exists(String) will behave\n\t\n\t\tNotably: that it returns true only if the directory exists \"on disk\" AND contains at least one file\n\t\n\t\n\tEphemeralDirectoryFactory (and by extension MockDirectoryFactory) does not implement exists(String) in a manner consistent with that expectation:\n\t\n\t\tEphemeralDirectoryFactory's impl returns true anytime the specified path name has an entry in the cache \u2013 even if no files have been created in that directory\n\t\n\t\n\n\n\nNotable if you have code like this....\n\nString path = ...; // some completley new never before seen directory name\nDirectoryFactory dirFac = ...;\nassertFalse(path + \" should not exist yet\", dirFac.exists(path));\nDirectory dir = dirFac.get(path, DirectoryFactory.DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\nassertFalse(path + \" should still not exist\", dirFac.exists(path));\n\n\n...that second assert will fail for MockDirectoryFactory, but succeed for all other DirectoryFactory impls.\n\nThis problem can ultimately manifests itself with the previously mentioned IndexNotFoundException: no segments* file found in ... exception if the following situation arrises...\n\n\tSolrCore starts initializing\n\tA background thread (such as the monitors used for autoscaling) polls the metrics gauges for the SolrCore\n\t\n\t\tone of these gauges calls SolrCore.getIndexSize()\n\t\tThis method calls directoryFactory.get(getIndexDir(),...) \u2013 which in the case of MockDirectoryFactory populates the \"cache\" for the getIndexDir() path\n\t\n\t\n\tAfter some other thread has called SolrCore.getIndexSize(), then the core initialization thread makes it to SolrCore.initIndex(...)\n\t\n\t\tthis calls getDirectoryFactory().exists(indexDir); to decide if we should attempt to initialize a new index\n\t\tBecause of the buggy imple of MockDirectoryFactory.exists(...) this method assumes there's already an index, which is not true and eventually causes IndexWriter's constructor to complain about the lack of any segments.\n\t\n\t\n\n\n\n\nI've attached a patch which:\n\n\tBeefs up the javadocs for DirectoryFactory.exists to clarify the expected semantics\n\tFixes EphemeralDirectoryFactory.exists to meet those expectations\n\tAdds a TestDirectoryFactory that asserts those semantics for all known types of impls of DirectoryFactory\n\n\n\nI should point out there are several TODO comments in TestDirectoryFactory related to if we want to assert any specific semantics of how DirectoryFactory.exists should behave before a fyle is synced \u2013 because at the moment the behavior of impls like StandardDirectoryFactory disagree with the behavior of impls like NRTCachingDirectoryFactory that do caching/buffering in memory. Perhaps we should consider (in a new jira) tighing up those constraints, and \"fixing\" the caching based impls to return true if there are files on disk OR un-synced files in the cache? ",
            "author": "Hoss Man",
            "id": "comment-16366437"
        },
        {
            "date": "2018-02-16T00:06:21+0000",
            "content": "I should also point out: there's nothing particularly special about why this failure manifests itself in FullSolrCloudDistribCmdsTest.  In that particular test, it's very likelye to happen because \"collection2\" is created w/a really high number of SolrCores, so i'ts just a percentage game.  Any other test (that does not override the MockDirectoryFactory default) can just as easily surface a similar looking failure. ",
            "author": "Hoss Man",
            "id": "comment-16366441"
        },
        {
            "date": "2018-02-22T00:28:17+0000",
            "content": "Not sure why gitbot didn't record these...\n\nBranch: refs/heads/master\nCommit: ee51b658ece5b23431a2200e763f5198b53952fa\nParents: 32f3570\n\nBranch: refs/heads/branch_7x\nCommit: 9876e8832ad40288e8a852f1594e520495da2cfa\nParents: 05e9201\n\n ",
            "author": "Hoss Man",
            "id": "comment-16372250"
        }
    ]
}