{
    "id": "SOLR-9936",
    "title": "Allow configuration for recoveryExecutor thread pool size",
    "details": {
        "components": [
            "replication (java)"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "affect_versions": "6.3",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "There are two executor services in UpdateShardHandler, the updateExecutor whose size is unbounded for reasons explained in the code comments. There is also the recoveryExecutor which was added later, and is the one that executes the RecoveryStrategy code to actually fetch index files and store to disk, eventually calling an fsync thread to ensure the data is written.\n\nWe found that with a fast network such as 10GbE it's very easy to overload the local disk storage when doing a restart of Solr instances after some downtime, if they have many cores to load. Typically we have each physical server containing 6 SSDs and 6 Solr instances, so each Solr has its home dir on a dedicated SSD. With 100+ cores (shard replicas) on each instance, startup can really hammer the SSD as it's writing in parallel from as many cores as Solr is recovering. This made recovery time bad enough that replicas were down for a long time, and even shards marked as down if none of its replicas have recovered (usually when many machines have been restarted). The very slow IO times (10s of seconds or worse) also made the JVM pause, so that disconnects from ZK, which didn't help recovery either.\n\nThis patch allowed us to throttle how much parallelism there would be writing to a disk - in practice we're using a pool size of 4 threads, to prevent the SSD getting overloaded, and that worked well enough to make recovery of all cores in reasonable time.\n\nDue to the comment on the other thread pool size, I'd like some comments on whether it's OK to do this for the recoveryExecutor though?\n\nIt's configured in solr.xml with e.g.\n\n\n  <updateshardhandler>\n    <int name=\"maxRecoveryThreads\">${solr.recovery.threads:4}</int>\n  </updateshardhandler>",
    "attachments": {
        "SOLR-9936.patch": "https://issues.apache.org/jira/secure/attachment/12846019/SOLR-9936.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-07T22:52:15+0000",
            "author": "Mark Miller",
            "content": "We would want to do some vetting and testing, but perhaps currently okay to limit the recovery executor. ",
            "id": "comment-15808282"
        },
        {
            "date": "2017-01-09T09:42:39+0000",
            "author": "Tim Owen",
            "content": "Thanks - given the comment with the updateExecutor code and Yonik's reply in ticket SOLR-8205 I was wary of changing this, but I couldn't see a scenario where it could deadlock. Would certainly appreciate some further input from people who've worked on the recovery code e.g. Shalin Shekhar Mangar in SOLR-7280. ",
            "id": "comment-15811200"
        },
        {
            "date": "2017-01-09T11:22:10+0000",
            "author": "Mark Miller",
            "content": "I'm sure we pulled recovery into its own executor to avoid deadlock issues. All the latest changes make it fine in theory, it's really just a matter of hammering the system to be sure.  ",
            "id": "comment-15811523"
        },
        {
            "date": "2017-01-30T11:52:30+0000",
            "author": "Tim Owen",
            "content": "Just uploaded a replacement patch that builds against the master branch (the previous one was a patch against 6.3 and wouldn't merge to master because of all the changes to metrics) ",
            "id": "comment-15845090"
        },
        {
            "date": "2017-04-12T08:25:27+0000",
            "author": "Jerome Yang",
            "content": "Any update on this issue? ",
            "id": "comment-15965540"
        },
        {
            "date": "2017-04-14T05:26:11+0000",
            "author": "Mark Miller",
            "content": "As long as we continue to use this executor in a similiar manner, there should not be any issue with this. ",
            "id": "comment-15968645"
        },
        {
            "date": "2017-04-14T05:49:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit bc6ff493b09a1ec5454c5ce790f6b7ecb714743e in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc6ff49 ]\n\nSOLR-9936: Allow configuration for recoveryExecutor thread pool size. ",
            "id": "comment-15968669"
        },
        {
            "date": "2017-04-14T06:30:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5116968babb9ea1cd283574beff3e3e83c397c97 in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5116968 ]\n\nSOLR-9936: Allow configuration for recoveryExecutor thread pool size. ",
            "id": "comment-15968689"
        },
        {
            "date": "2017-04-14T06:34:21+0000",
            "author": "Mark Miller",
            "content": "Thanks Tim! ",
            "id": "comment-15968692"
        }
    ]
}