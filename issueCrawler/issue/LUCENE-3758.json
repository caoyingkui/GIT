{
    "id": "LUCENE-3758",
    "title": "Allow the ComplexPhraseQueryParser to search order or un-order proximity queries.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The ComplexPhraseQueryParser use SpanNearQuery, but always set the \"inOrder\" value hardcoded to \"true\". This could be configurable.",
    "attachments": {
        "LUCENE-3758.patch": "https://issues.apache.org/jira/secure/attachment/12513955/LUCENE-3758.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-09T13:28:29+0000",
            "content": "patch for trunk ",
            "author": "Ahmet Arslan",
            "id": "comment-13204507"
        },
        {
            "date": "2012-02-13T17:27:02+0000",
            "content": "ok guys try to bare with me, since I don't know this thing at all:\n\nWould this apply to both exact and sloppy phrase queries?\n\nIt seems to me, that instead of hardcoding inOrder to true, we should only set inOrder=true if its an exact phrase query\nBut if the user (not this qp itself, but the user actually used ~) supplied slop, then inOrder should be false.\n\nThis would better emulate the behavior of the regular lucene queryparser... I'm wondering if we even need an option\nsince it just seems like the way it should work. ",
            "author": "Robert Muir",
            "id": "comment-13206996"
        },
        {
            "date": "2012-02-14T10:02:14+0000",
            "content": "Hello!\n\nIf I were to implement two different versions of span near queries: with order and without order, would this class be the right point to start?\nI'm thinking to add support for new query operator that would support order of terms in the near query, as (if I correctly understand), \"~\" operator doesn't preserve the order. ",
            "author": "Dmitry Kan",
            "id": "comment-13207614"
        },
        {
            "date": "2012-02-14T13:50:44+0000",
            "content": "Implemented new query operator \"#\", that allows to do what's described in my previous message. Let me know, if someone needs a \"patch\" for this. ",
            "author": "Dmitry Kan",
            "id": "comment-13207710"
        },
        {
            "date": "2012-02-14T14:16:50+0000",
            "content": "Basically, a search like '\"foo bar\"#2' would match documents with the terms \"foo\" and \"bar\" with up to 2 positions of distance from each other and only if \"foo\" is before \"bar\"? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13207729"
        },
        {
            "date": "2012-03-09T11:24:35+0000",
            "content": "That's correct Tom\u00e1s. We have already internally tested this operator and it works just fine. ",
            "author": "Dmitry Kan",
            "id": "comment-13226021"
        },
        {
            "date": "2012-03-12T13:28:45+0000",
            "content": "I think that makes sense. The query is different so it should have a different syntax. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13227514"
        },
        {
            "date": "2013-07-23T18:44:30+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716969"
        },
        {
            "date": "2014-03-15T22:48:14+0000",
            "content": "patch for trunk (revision 1577942) ",
            "author": "Ahmet Arslan",
            "id": "comment-13936331"
        },
        {
            "date": "2014-03-16T16:12:37+0000",
            "content": "Just to make sure I understand Dimitry's comment about the # operator. I don't see anything in this patch on a quick look that references a new operator, so that's a separate issue, correct? I see in the related SOLR-1604 patch the ability to specify inOrder=\"true|false\" as a local parameter, so this functionality is available at that level.\n\nFrankly, I'd rather not introduce a new operator at this stage, let's get the underlying functionality in place and treat any new operators as a separate issue if we add one it at all.\n\nAny responses to the comment by Robert Muir? My quick response is that I've seen use-cases like this:\n\"Find all the variants of \"john anderson, including 'jonathan anderson', 'jon ivan gregory anderson' but not 'eric anderson and jonathan jones' \". Contrived a bit, but you get the idea. Specifying slop doesn't allow this case, but slop with specified order does.\n\nI'm going to be committing this this, along with SOLR-1604 today unless there are objections. The patch doesn't change current behavior so it seems pretty safe. ",
            "author": "Erick Erickson",
            "id": "comment-13937196"
        },
        {
            "date": "2014-03-16T16:53:03+0000",
            "content": "Ahmet's patch plus entry in CHANGES.txt ",
            "author": "Erick Erickson",
            "id": "comment-13937210"
        },
        {
            "date": "2014-03-16T18:24:31+0000",
            "content": "Fixed:\ntrunk: r - 1578113\n4x:     r - 1578134 ",
            "author": "Erick Erickson",
            "id": "comment-13937252"
        },
        {
            "date": "2014-03-16T18:24:51+0000",
            "content": "Thanks Ahmet! ",
            "author": "Erick Erickson",
            "id": "comment-13937253"
        },
        {
            "date": "2014-03-16T19:24:31+0000",
            "content": "Erick Erickson right, agree, this should be handled in another jira as a local param. We have implemented this as an operator as we allow mixing ordered and unordered clauses in the same query. ",
            "author": "Dmitry Kan",
            "id": "comment-13937293"
        },
        {
            "date": "2014-04-27T23:25:59+0000",
            "content": "Close issue after release of 4.8.0 ",
            "author": "Uwe Schindler",
            "id": "comment-13982620"
        }
    ]
}