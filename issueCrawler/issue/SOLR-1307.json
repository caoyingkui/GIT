{
    "id": "SOLR-1307",
    "title": "Provide a standard way to reload plugins",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "search",
            "update"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Currently, Solr plugins have no standard way to reload themselves. Each plugin invents its own mechanism e.g. SpellCheckComponent. For others, even small changes to configuration files are visible only after a core reload. Examples include changing elevate.xml, stopwords.txt etc.\n\nWe should provide a standard way for plugins to reload themselves on events relevant to them.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12736234",
            "date": "2009-07-28T19:23:47+0000",
            "content": "this could be very hairy depending on what you mean by \"reload\"\n\nwhen we talk about reloading cores, what happens is we instantiate a new core, then replace refrences to the old core with refrences to the new core.\n\nattempting to do something similar with each and every type of plugin seems like it could get incredibly tedious to deal with the synchronization issues.\n\nwhat seems like it might make the most sense for the common case is to have helper code available to make it easier for plugins to do their own internal reloading (ie: instead of constructing a new instance of SynonymFIlterFactory, we make it easy for an instance of SynomymFilterFactory to reload it's own synonym text file).  going this route means that only the classes that want to be reloadable need to worry about the synchronization costs associated with doing so (ie: StopWorkFilterFactory can put synchronization on some getStopWordSet() method it uses when constructing each StopFilter instance)\n\nThis is actually something that's already possible now: any plugin can spin up a TimerTask to reload things in a background thread, SolrCoreAware plugins can programaticly register newSearcher listeners to make callbacks, etc...   We probably just want to provide helper code to make this easier for people, and add the functionality to some of the obvious choices in the plugins that ship with Solr along with options to enable it (you might want a query analyzer instance of SynonymFilterFactory to md5/reload the synonyms file on every commit, but an index analyzer instance of SYnonymFilterFactory probably shouldn't)\n\n\n\n\n\n\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12736490",
            "date": "2009-07-29T07:37:27+0000",
            "content": "this could be very hairy depending on what you mean by \"reload\" \n\nYeah, I kept it vague on purpose to have this discussion first.\n\n\nwhen we talk about reloading cores, what happens is we instantiate a new core, then replace refrences to the old core with refrences to the new core.\n\nattempting to do something similar with each and every type of plugin seems like it could get incredibly tedious to deal with the synchronization issues.\n\nI had thought about a new instance swapping out the old instance. I actually thought that it may be the easiest approach. But then I realized that it may not be a good approach for resource intensive plugins e.g. a SpellCheckComponent managing several dictionaries. One wouldn't want to create two instances each with their own dictionaries. An easier option would be to just have an interface with a reload method which plugins can implement and let them do whatever they need to do. The onus of thread-safety will be on the plugins themselves.\n\n\nThis is actually something that's already possible now: any plugin can spin up a TimerTask to reload things in a background thread, SolrCoreAware plugins can programaticly register newSearcher listeners to make callbacks, etc... We probably just want to provide helper code to make this easier for people, and add the functionality to some of the obvious choices in the plugins that ship with Solr along with options to enable it (you might want a query analyzer instance of SynonymFilterFactory to md5/reload the synonyms file on every commit, but an index analyzer instance of SYnonymFilterFactory probably shouldn't)\n\nYes, it is possible now. Just that everyone does it their own way and some don't at all. DIH has an HTTP API for reload. SpellCheckComponent has reload/build as HTTP API and buildOnCommit/buildOnOptimize configuration. QueryElevationComponent, SynonymFilter have nothing. \n\nAll I want is to have some consistency in implementing and invoking such operations. Look at SpellCheckComponent's SpellCheckListener for the kind of hacks we've had to do to implement these features.\n\nPerhaps all we need is a better event listener API? I wouldn't want to have complex configuration to register components with certain kinds of events. As we have limited number of events and limited number of components, perhaps we can pass all events into a plugin and let it decide what it wants to do on that event? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12736496",
            "date": "2009-07-29T07:58:53+0000",
            "content": "The possible events as I see are config file changes , commit /optimize. commit/optimize are already handled . so the main requirement is to make it possible for Solr to 'watch' a few files .\n\nsay\n\ncore.registerConfFileListener(listener, List<String> files);\n\n\n\nthis would need a new interface\n\npublic interface ConfFileListener {\n   public void confFileChanged(List<String> changedFiles);\n}\n\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872548",
            "date": "2010-05-27T22:07:37+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13018417",
            "date": "2011-04-11T16:27:50+0000",
            "content": "Monitoring files is not enough. It must work also for SolrCloud/ZK. A hook for coreReloaded() and one for configChanged() sounds reasonable "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13018531",
            "date": "2011-04-11T19:36:30+0000",
            "content": "+1\nRelated:\n\n\thttp://search-lucene.com/m/2ExL22IsDPk1/solr-1307&subj=Reloading+synonyms+txt+without+downtime\n\tSOLR-2465\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043748",
            "date": "2011-06-03T16:46:52+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106322",
            "date": "2011-09-16T14:50:34+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13193439",
            "date": "2012-01-25T23:30:30+0000",
            "content": "@SimonRosenthal, last september you said over at SOLR-2202 that you were working on this issue. Any hope for a patch which also could benefit MoneyFieldType? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234666",
            "date": "2012-03-21T18:08:48+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717337",
            "date": "2013-07-23T18:47:54+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971047",
            "date": "2014-04-16T12:57:00+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}