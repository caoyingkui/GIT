{
    "id": "SOLR-9635",
    "title": "Implement Solr as two java processes -- one process to manage the other.",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "One idea that Mark Miller mentioned some time ago that I really like is the idea of implementing Solr as two java processes, with one managing the other.\n\nWhen I think about this idea, what I imagine is a manager process with a very small heap (I'm thinking single-digit megabytes) that is responsible for starting a separate Solr process with configured values for many different options, which would include the heap size.\n\nBasically, the manager process would replace most of bin/solr as we know it, would be able to restart a crashed Solr, and the admin UI could have options for changing heap size, restarting Solr, and other things that are currently impossible.  It is likely that this idea would absorb or replace the SolrCLI class.\n\nInitially, I intend this issue for discussion, and if the idea looks workable, then we can work towards implementation.  There are plenty of bikesheds to paint as we work the details.  I have some preliminary ideas about some parts of it, which I will discuss in comments.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-12T15:50:16+0000",
            "author": "Shawn Heisey",
            "content": "Inter-Process Communication:\n\nI would prefer a strictly local communication method, not TCP.  The ideas that come to mind are sockets and named pipes ... but I haven't yet researched available options in Java.  A cross-platform option is best. ",
            "id": "comment-15569088"
        },
        {
            "date": "2016-10-12T16:04:59+0000",
            "author": "Shawn Heisey",
            "content": "User Customization:\n\nI think we should go with Java properties files for user customizations.  Only when we reach the core config and the schema should we switch to a structured format (currently XML, possibly moving to JSON).\n\nWith a little bit of thought and work, it should be possible to provide the user with several layers of property configuration.  here are the properties filenames I can imagine:\n\nservice.properties:  At the root of the install directory.  Would contain things currently handled in solr.in.sh and solr.xml.  Accessible in structured config as ${solr.service.XXX}.  Might want to replace \"service\" with \"instance\".\n\ncloud.properties: At the root of the zookeeper tree.  In addition to configuring settings for the whole cloud, would be accessible as ${solr.cloud.XXX}.  In conjunction with service.properties, might replace solr.xml.\n\ncollection.properties: In the collection path in zookeeper.  In addition to providing collection settings, would be accessible as ${solr.collection.XXX}.\n\ncore.properties: No real change here.  Still accessible as ${solr.core.XXX}.\n\nThis would be an ideal time to implement the service breadcrumbs idea I have mentioned previously.  A /etc/default/solr.properties file could be added/modified by the service install script and have simple mappings of service name to install directory, where service.properties would fill in the rest of the blanks. ",
            "id": "comment-15569115"
        },
        {
            "date": "2016-10-12T16:11:21+0000",
            "author": "Shawn Heisey",
            "content": "I realize that what I've written above assumes that one install directory only handles one Solr service, and that currently it is possible to run multiple services out of one directory.  I personally prefer one service per install directory, but I'm guessing that this might need modifying.  Perhaps service.properties can become service.XXX.properties, where XXX is the service name, and the file would most commonly be named service.solr.properties. ",
            "id": "comment-15569131"
        },
        {
            "date": "2016-10-12T16:18:26+0000",
            "author": "Shawn Heisey",
            "content": "Possibly even better:  Support both service.properties and service.XXX.properties, with entries from the service file superseding the global file. ",
            "id": "comment-15569150"
        },
        {
            "date": "2016-10-12T19:55:30+0000",
            "author": "Shawn Heisey",
            "content": "Had some followup thoughts about collection.properties.\n\nInstead of living in the /collections/XXX zookeeper path, it could live in the config path, sitting next to solrconfig.xml, and could be a combination of collection.properties superseded by collection.XXX.properties, where XXX is the collection name.  This would make it a whole lot easier for the user to upload and offer a little more flexibility. ",
            "id": "comment-15569715"
        },
        {
            "date": "2017-04-28T15:49:53+0000",
            "author": "Shawn Heisey",
            "content": "Been a while since I thought about this issue.  I've had some new ideas.\n\nWhat if we move the admin UI from the main Solr process to the manager process, on a different port than Solr itself?  In standalone mode, the UI would manage the Solr process that the manager is controlling, but in cloud mode, it could manage the entire cloud.\n\nThis manager code could also manage a standalone ZooKeeper process independent of any Solr process it was also managing.\n\nThinking about the \"master node\" idea mentioned by Otis Gospodnetic on the solr-user list, I'm also imagining a situation where someone could deploy one node with the manager, managing a ZK process (and maybe a Solr process), then deploy additional nodes, pointing them at the host/port of the first manager process, to fully automate the process of setting up multi-node SolrCloud and ZK.  Once that first node were set up, the admin UI could be used to change what runs on each node that's in the cloud, change the cluster and ZK configuration, etc.  We would need to think about upgrades, for the manager process itself, Solr, and ZK. ",
            "id": "comment-15989052"
        }
    ]
}