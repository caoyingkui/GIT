{
    "id": "SOLR-3443",
    "title": "Optimize hunspell dictionary loading with multiple cores",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The Hunspell dictionary is actually loaded into memory. Each core using hunspell loads its own dictionary, no matter if all the cores are using the same dictionary files. As a result, the same dictionary is loaded into memory multiple times, once for each core. I think we should share those dictionaries between all cores in order to optimize the memory usage. In fact, let's say a dictionary takes 20MB into memory (this is what I detected), if you have 20 cores you are going to use 400MB only for dictionaries, which doesn't seem a good idea to me.",
    "attachments": {
        "Screen Shot 2015-11-29 at 9.52.06 AM.png": "https://issues.apache.org/jira/secure/attachment/12774749/Screen%20Shot%202015-11-29%20at%209.52.06%20AM.png",
        "SOLR-3443.patch": "https://issues.apache.org/jira/secure/attachment/12774748/SOLR-3443.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Luca Cavanna",
            "id": "comment-13269573",
            "date": "2012-05-07T12:41:46+0000",
            "content": "The first thing I have in mind is a static map containing all loaded dictionaries with some kind of unique identifier, so that the same dictionary can be reused between cores.\nBut my question is: is there a mechanism to share object between cores in Solr? Is this the first time someone needs to share something between multiple cores?\nI'd like to hear your thoughts! "
        },
        {
            "author": "Chris Male",
            "id": "comment-13269607",
            "date": "2012-05-07T13:34:55+0000",
            "content": "Good suggestion Luca, this is a good way to save some memory.  With LUCENE-2510 I'm going to move all the analysis factories into the analysis module so we will need a way that we can share across multiple Factory instances, not just Solr cores. "
        },
        {
            "author": "Gus Heck",
            "id": "comment-15031097",
            "date": "2015-11-29T17:33:30+0000",
            "content": "patch requiring SOLR-8349 "
        },
        {
            "author": "Gus Heck",
            "id": "comment-15031099",
            "date": "2015-11-29T17:35:17+0000",
            "content": "Screen shot of profiler showing single dictionary for multiple factories. "
        },
        {
            "author": "Gus Heck",
            "id": "comment-15052878",
            "date": "2015-12-11T15:11:35+0000",
            "content": "Was working on something else and thinking about memory consistency when it occurred to me that this patch might need a couple of tweaks to the Dictionary class to ensure that it's loading happens before any look ups... unless there is some point in the overall solr initialization phase that ensures that request handling threads and the core initialization threads all lock and unlock the same monitor before requests are handled? Does that exist somewhere? Memory consistency seems like something that must have already been thought about...  Will think more and look at it tonight.\n\nIn any case this should not effect the general resource sharing patch in SOLR-8349 unless I decide to add further caveat emptor warnings to the javadoc . "
        }
    ]
}