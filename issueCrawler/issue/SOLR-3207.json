{
    "id": "SOLR-3207",
    "title": "Add field name validation",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Given the SOLR-2444 updated fl syntax and the SOLR-2719 regression, it would be useful to add some kind of validation regarding the field names you can use on Solr.\nThe objective would be adding consistency, allowing only field names that you can then use within fl, sorting etc.\n\nThe rules, taken from the actual StrParser behaviour, seem to be the following: \n\n\n\tsame used for java identifiers (Character#isJavaIdentifierPart), plus the use of trailing '.' and '-'\n\n\n\n\n\tfor the first character the rule is Character#isJavaIdentifierStart minus '$' (The dash can't be used as first character (SOLR-3191) for example)",
    "attachments": {
        "SOLR-3207.patch": "https://issues.apache.org/jira/secure/attachment/12518475/SOLR-3207.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Luca Cavanna",
            "id": "comment-13223272",
            "date": "2012-03-06T14:16:50+0000",
            "content": "Guys, let me know your thoughts about those rules, I probably missed something! "
        },
        {
            "author": "Luca Cavanna",
            "id": "comment-13230268",
            "date": "2012-03-15T16:21:52+0000",
            "content": "First draft patch. I introduced a new FieldNameValidator class which is used within  the IndexSchema class to validate every field name. The new class exposes also some boolean methods which are used within the ReturnFields class, in order to apply the same rules there to detect a field name. That's needed to make sure that we accept field names that we can handle within the fl parameter.\n\nApparently, if you use a placeholder as field name you receive on IndexSchema the default value, which can be empty. That's why I'm allowing empty field names. I'm not even sure I understood correctly how placeholders work, can someone help me out with this?\n\nLet me know what you think about my patch! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13230287",
            "date": "2012-03-15T16:40:49+0000",
            "content": "same used for java identifiers (Character#isJavaIdentifierPart), plus the use of trailing '.' and '-'\n\nI think we should prob define it as I documented in the schema:\n\n   <!-- field names should consist of alphanumeric or underscore characters only and\n      not start with a digit.  This is not currently strictly enforced,\n      but other field names will not have first class support from all components\n      and back compatibility is not guaranteed.\n   --> "
        },
        {
            "author": "Luca Cavanna",
            "id": "comment-13230408",
            "date": "2012-03-15T18:42:39+0000",
            "content": "The first letter should be ok as checked in my patch. Regarding the trailing characters, do you mean we shouldn't use isJavaIdentifierPart anymore but something else? That's even more restrictive than my patch since I've used the existing rules applied while parsing the fl parameter (ReturnFields class). No problem for me, are we all sure we want to proceed this way?\n\nI'll update my patch later on. Then I'd document this within the Schema wiki page. \n\nThat's a big change, any opinion is welcome! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13230422",
            "date": "2012-03-15T18:55:55+0000",
            "content": "Regarding the trailing characters, do you mean we shouldn't use isJavaIdentifierPart anymore but something else?\n\nThat was just a shortcut... looking again, it's pretty open (maybe more open than we want?) esp since unicode changes over time.  Anyway, isJavaIdentifierPart doesn't include \"-\" or \".\"  If people do need another separator type character, we could allow \"$\" too (just not as the first char, since that's taken by variable dereferencing).\n\nThat's even more restrictive than my patch since I've used the existing rules applied while parsing the fl parameter (ReturnFields class).\n\nAllowing '-' in the \"fl\" was just to resolve that \"regression\" for people who already used fieldnames like that and are upgrading.\nIf we want to start validating field names strictly, then we should bump the schema version number (and should skip validating when the version number is less than that). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13230689",
            "date": "2012-03-15T23:07:02+0000",
            "content": "the giant elephant in the room that doesn't seem to have been discussed is that trying to validate that field names meet some strict criteria when loading schema.xml doesn't really address dynamic fields \u2013 the patch ensures that <dynamicField name=\"...\"/> configurations have names which are validated, but i don't see anything that would considering the actually field names people use with those dynamic fields \u2013 ie: \"*_i\" might be a perfectly valid dynamicField at startup, but that startup validation isn't going to help me if i index a document containing the field name \"$ - foo_i\"\n\nIn general, i'm opposed to the idea of \"locking down\" what field names can be used across the board.  My preference would be to let people us any field name their heart desires, but provide better documentation on what field name restrictions exist on which features and provide (ie: \"using a field name in function requires that the field name match ValidatorX; using a field name in fl requires can only be used with field names conform to ValidatorX and ValidatorY; etc...\").\n\nIf we want to provide automated \"validation\" of these things for people, then let's make it part of the LukeRequestHandler: for any field name returned by the LukeRequestHandler, let's include a warnings section advising them which validation rules that field name doesn't match, and what features depend on that validation rule \u2013 this info could then easily be exposed in the admin UI.\n\nWe could also provide an optional UpdateProcessor people could configure with a list of individual Validators which could reject any document containing a field that didn't match the validator (or optionally: translate the field name to something thta did conform) to help people enforce these even on dynamic fields.\n\nSo by default: any field is allowed, but if i create one with a funky name (either explicitly or as a result of loading data using a dynamicField) the admin UI starts warning me that feature XYZ won't work with fields A, B, C; and if i want to ensure feature D works will all of my fields i add an update processor to ensure it. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717230",
            "date": "2013-07-23T18:47:33+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971145",
            "date": "2014-04-16T12:57:17+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}