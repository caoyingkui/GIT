{
    "id": "LUCENE-1838",
    "title": "BoostingNearQuery must implement clone - now it clones to a NearSpanQuery - cloning is required for Span container classes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "",
    "attachments": {
        "LUCENE-1838.patch": "https://issues.apache.org/jira/secure/attachment/12417294/LUCENE-1838.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-21T15:20:43+0000",
            "content": "Technically, SpanQuery should have an abstract clone so that SpanQuerys are required to implement cloneable. ",
            "author": "Mark Miller",
            "id": "comment-12746012"
        },
        {
            "date": "2009-08-21T15:55:33+0000",
            "content": "I'm also going to add an optional (default to true) q1.class == q2.class test to the QueryUtils hashCode/equals/clone check.  ",
            "author": "Mark Miller",
            "id": "comment-12746029"
        },
        {
            "date": "2009-08-21T16:20:13+0000",
            "content": "It looks like its very easy to get into trouble with Querys and cloning. BooleanQuery, DisjunctionQuery have quite a reliance on it - as do the SpanQueries (all in rewrite). Improperly cloning can sometimes have extra special effects with MultiSearcher : LUCENE-1599\n\n\n ",
            "author": "Mark Miller",
            "id": "comment-12746057"
        },
        {
            "date": "2009-08-21T16:29:07+0000",
            "content": "I just updated to current trunk and TestBoostingNearQuery is failing for me now:\n\n\n\njunit.framework.AssertionFailedError: expected:<spanNear([field:twenty, field:two], 0, true)> but was:<spanNear([field:twenty, field:two], 0, true)>\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.failNotEquals(Assert.java:280)\n\tat junit.framework.Assert.assertEquals(Assert.java:64)\n\tat junit.framework.Assert.assertEquals(Assert.java:71)\n\tat org.apache.lucene.search.QueryUtils.checkEqual(QueryUtils.java:68)\n\tat org.apache.lucene.search.QueryUtils.checkHashEquals(QueryUtils.java:50)\n\tat org.apache.lucene.search.QueryUtils.check(QueryUtils.java:44)\n\tat org.apache.lucene.search.payloads.TestBoostingNearQuery.test(TestBoostingNearQuery.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat org.apache.lucene.util.LuceneTestCase.runTest(LuceneTestCase.java:201)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:230)\n\tat junit.framework.TestSuite.run(TestSuite.java:225)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n ",
            "author": "Michael Busch",
            "id": "comment-12746064"
        },
        {
            "date": "2009-08-21T16:51:06+0000",
            "content": "hmmm - tests passed here so I must have screwed something up ... I'll fix it. ",
            "author": "Mark Miller",
            "id": "comment-12746082"
        },
        {
            "date": "2009-08-21T18:25:10+0000",
            "content": "adds clone - made SpanNearQuery internals protected.\n\nedit\n\nAdds QueryUtils.check back too, it will pass now with the clone. ",
            "author": "Mark Miller",
            "id": "comment-12746127"
        },
        {
            "date": "2009-08-21T18:27:56+0000",
            "content": "Grrr ... another one - looking at Michaels fail stack trace I see that these payload queries should also implement toString(). I'll roll into this patch. ",
            "author": "Mark Miller",
            "id": "comment-12746130"
        },
        {
            "date": "2009-08-22T20:28:54+0000",
            "content": "r806885 ",
            "author": "Mark Miller",
            "id": "comment-12746494"
        }
    ]
}