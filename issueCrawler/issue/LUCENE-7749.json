{
    "id": "LUCENE-7749",
    "title": "IndexOrDocValuesQuery not working with LRUQueryCache (?)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "6.5.1",
            "6.6",
            "7.0"
        ]
    },
    "description": "I was experimenting with 6.5.0-SNAPSHOT and could not see any performance improvement using the new IndexOrDocValuesQuery where I would have expected some.\nI am using a basic FILTER query (term + point/dv range), along with IndexSearcher#search. \nLooking at the stack trace it seems that LRUQueryCache#CachingWrapperWeight not delegating the scorerSupplier method is the reason. \n\nMaybe it is on purpose for the result to be cacheable ? Does that mean IndexOrDocValuesQuery is not useable with the default IndexSearcher cache ? (Or maybe am I just completely misusing the  IndexOrDocValuesQuery feature ?)\n\nHere is a thread dump of the call to IndexOrDocValuesQuery#scorerSupplier\n\n\t  at org.apache.lucene.search.IndexOrDocValuesQuery$1.scorerSupplier(IndexOrDocValuesQuery.java:148)\n\t  at org.apache.lucene.search.IndexOrDocValuesQuery$1.scorer(IndexOrDocValuesQuery.java:168)\n\t  at org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.scorer(LRUQueryCache.java:746)\n\t  at org.apache.lucene.search.Weight.scorerSupplier(Weight.java:126)\n\t  at org.apache.lucene.search.BooleanWeight.scorerSupplier(BooleanWeight.java:400)\n\t  at org.apache.lucene.search.BooleanWeight.scorer(BooleanWeight.java:381)\n\t  at org.apache.lucene.search.Weight.bulkScorer(Weight.java:160)\n\t  at org.apache.lucene.search.BooleanWeight.bulkScorer(BooleanWeight.java:375)\n\t  at org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.cache(LRUQueryCache.java:704)\n\t  at org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.bulkScorer(LRUQueryCache.java:787)\n\t  at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:666)\n\t  at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:473)",
    "attachments": {
        "LUCENE-7749.patch": "https://issues.apache.org/jira/secure/attachment/12861456/LUCENE-7749.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15950613",
            "date": "2017-03-31T09:46:15+0000",
            "content": "This is a bug indeed! Would you like to submit a patch? We are soon going to release 6.5.1 so I think it would be nice to have that fix in. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15950949",
            "date": "2017-03-31T14:07:02+0000",
            "content": "I went ahead and worked on a patch to have it for 6.5.1 in time. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15951433",
            "date": "2017-03-31T18:21:19+0000",
            "content": "+1 ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15952917",
            "date": "2017-04-03T01:21:38+0000",
            "content": "Adrien Grand , thank you for working the on fix.\nI dont have lucene development set up here, but the patch may still need one more fix to work correctly (looking at 6.5.0 with your patch).\nActually LRUQueryCache#CachingWrapperWeight not delegating the scorerSupplier was one of the problem, but there is another problem related to BulkScorer, if you look at the last part of the stack trace:\n\n...\n\t  at org.apache.lucene.search.BooleanWeight.scorer(BooleanWeight.java:381)\n\t  at org.apache.lucene.search.Weight.bulkScorer(Weight.java:160)\n\t  at org.apache.lucene.search.BooleanWeight.bulkScorer(BooleanWeight.java:375)\n\t  at org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.cache(LRUQueryCache.java:704)\n\t  at org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.bulkScorer(LRUQueryCache.java:787)\n\t  at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:666)\n\t  at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:473)\n\nBooleanWeight.java:385 always get the score with randomAccess=false, which again will ignore any IndexOrDocValuesQuery improvements.\nWeight#bulkScorer should probably use the scorerSupplier method instead of the scorer method internally.\n ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-15953107",
            "date": "2017-04-03T08:04:54+0000",
            "content": "Hi Martin, thanks for looking at the patch. It is expected that BulkScorer always gets a scorer with randomAccess=false since bulk scorers always need to return all matching documents. I don't think this is an issue.\n\nThe stack trace that you shared happened because the query cache noticed that a BooleanQuery that is part of your query tree (it might be your top-level query) is being reused, and so it decides to build a cache entry for it (LRUQueryCache$CachingWrapperWeight.cache). Building a cache entry requires to consume all documents that match the query, so it makes sense that the scorer is created with randomAccess=false. Note that the fact that the boolean scorer is created with randomAccess=false does not necessarily mean that all scorers of sub clauses of the BooleanQuery will be created with randomAccess=false too: if the query is a conjunction then only the clauses that have the lowest cost will be created with randomAccess=false. As a consequence, the IndexOrDocValues optimization still applies if the range query is not the least costly clause. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15953139",
            "date": "2017-04-03T08:41:22+0000",
            "content": "I see. Thank you for checking !\nOne last suggestion: Weight#scorer method seems quite prone to confusion with the Weight#scorerSupplier, and could lead to additionnal problems like it happened with the LRUQueryCache. Wouldnt it be safer to expose only Weight#scorerSupplier, and make the Weight#scorer method protected ? ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-15953168",
            "date": "2017-04-03T09:13:40+0000",
            "content": "I agree it is a bit error-prone and removing the scorer method or hiding it would fix the issue. The way I have been approaching this issue is that it is a fairly new and experimental API so I'd like to keep it optional for now (ie. query impls do not have to implement this method). Now that this feature is released, hopefully we'll get feedback about how well it works, which will in-turn give us opportunities to improve this API and once we are more confident about it, we can think about removing the trap that you observed. For the record, this is my personal opinion and might not be shared by other people who work on this project. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15953188",
            "date": "2017-04-03T09:32:16+0000",
            "content": "I agree, refactoring and api improvement should not be part of patch versions. Current code is good enough for the moment, and that could be improved as part of a more global refactoring in the future. ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-15953442",
            "date": "2017-04-03T13:08:30+0000",
            "content": "Commit 1ad6632e16c427ff9af1ddbd77d117db0d2e7c80 in lucene-solr's branch refs/heads/branch_6_5 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ad6632 ]\n\nLUCENE-7749: Made LRUQueryCache delegate the scoreSupplier method. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15953443",
            "date": "2017-04-03T13:08:34+0000",
            "content": "Commit eb6a26cbfd1e92ba271ca82b23d2ff99adbc68f9 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eb6a26c ]\n\nLUCENE-7749: Made LRUQueryCache delegate the scoreSupplier method. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15953444",
            "date": "2017-04-03T13:08:37+0000",
            "content": "Commit 2e545d78f5fe745905bcff19eb73a9a9faa4c032 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2e545d7 ]\n\nLUCENE-7749: Made LRUQueryCache delegate the scoreSupplier method. ",
            "author": "ASF subversion and git services"
        }
    ]
}