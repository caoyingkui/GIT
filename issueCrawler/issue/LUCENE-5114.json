{
    "id": "LUCENE-5114",
    "title": "remove boolean useCache param from TermsEnum.seekCeil/Exact",
    "details": {
        "components": [],
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Long ago terms dict had a cache, but it was problematic and we removed it, but the API still has a relic boolean useCache ... I think we should drop it from the API as well.",
    "attachments": {
        "LUCENE-5114.patch": "https://issues.apache.org/jira/secure/attachment/12592564/LUCENE-5114.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-16T15:02:07+0000",
            "content": "Initial patch; tests pass but I haven't run ant precommit yet ... ",
            "author": "Michael McCandless",
            "id": "comment-13709831"
        },
        {
            "date": "2013-07-16T15:45:05+0000",
            "content": "+1 to nuking this parameter! ",
            "author": "Robert Muir",
            "id": "comment-13709857"
        },
        {
            "date": "2013-07-16T17:44:11+0000",
            "content": "Commit 1503805 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1503805 ]\n\nLUCENE-5114: remove unused useCache param ",
            "author": "ASF subversion and git services",
            "id": "comment-13709979"
        },
        {
            "date": "2013-07-16T19:06:08+0000",
            "content": "Commit 1503834 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1503834 ]\n\nLUCENE-5114: remove unused useCache param ",
            "author": "ASF subversion and git services",
            "id": "comment-13710094"
        },
        {
            "date": "2013-07-16T21:25:52+0000",
            "content": "I'm very supportive of this change.  However, isn't this a breaking change you committed to 4x?  On 4x, might it make sense to leave these as overloaded deprecated methods?  I think so. ",
            "author": "David Smiley",
            "id": "comment-13710283"
        },
        {
            "date": "2013-07-16T21:38:28+0000",
            "content": "If you want to \"leave\" the old method, please please make it final... (otherwise, don't do it)\n\nIn all cases the API must break, or will only invite bugs. ",
            "author": "Robert Muir",
            "id": "comment-13710304"
        },
        {
            "date": "2013-07-16T21:41:04+0000",
            "content": "However, isn't this a breaking change you committed to 4x?\n\nIt is a break (I \"advertised\" this in CHANGES.txt), but these APIs are marked @experimental.  Also, I'd rather on upgrade that expert users using these methods realize (because they see the compilation errors) that useCache is/was not doing anything, so they can then think about whether they want to change their code (e.g. add their own cache higher up or something). ",
            "author": "Michael McCandless",
            "id": "comment-13710309"
        },
        {
            "date": "2013-07-16T21:50:34+0000",
            "content": "If you want to \"leave\" the old method, please please make it final... (otherwise, don't do it)\n\n+1\n\nIn all cases the API must break, or will only invite bugs.\n\nWhat bugs?  There wasn't any caching in the first place; it was effectively a no-op.\n\nAlso, I'd rather on upgrade that expert users using these methods realize (because they see the compilation errors) that useCache is/was not doing anything ...\n\nI think deprecation warnings are fine.  Using these methods is not so serious to warrant compiled extensions being incompatible. ",
            "author": "David Smiley",
            "id": "comment-13710328"
        },
        {
            "date": "2013-07-16T21:55:27+0000",
            "content": "\n    In all cases the API must break, or will only invite bugs.\n\nWhat bugs? There wasn't any caching in the first place; it was effectively a no-op.\n\nThe bugs are when you make a method non-final, then its easy for the \"wrong method\"\nto be called.\n\nSophisticated compatibility can be added (using o.a.l.util.VirtualMethod), but this \nshould be reserved for core apis where the change is necessary and we really need\nback compat.\n\nFor experimental apis, don't take the risk! just backwards break.\n ",
            "author": "Robert Muir",
            "id": "comment-13710334"
        },
        {
            "date": "2013-10-05T10:19:26+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787146"
        }
    ]
}