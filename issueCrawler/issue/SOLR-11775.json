{
    "id": "SOLR-11775",
    "title": "json.facet can use inconsistent Long/Integer for \"count\" depending on shard count",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Facet Module"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "(NOTE: I noticed this while working on a test for type: range but it's possible other facet types may be affected as well)\n\nWhen dealing with a single core request \u2013 either standalone or a collection with only one shard \u2013 json.facet seems to use \"Integer\" objects to return the \"count\" of facet buckets, however if the shard count is increased then the end client gets a \"Long\" object for the \"count\"\n\n(This isn't noticable when using wt=json but can be very problematic when trying to write client code using wt=xml or SolrJ",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-18T18:21:42+0000",
            "content": "Trivial to reproduce...\n\n\n\t\"Non-Distributed\" request (either standalone, or cloud w/one shard)...\n\nbin/solr -e techproducts\n# (or bin/solr -e cloud, choose 1 shard w/ sample_techproducts_configs, and index the docs manually)\n...\n$ curl http://localhost:8983/solr/techproducts/select -d 'q=*:*&wt=xml&rows=0&json.facet={ foo:{type:range, field:price, start:0, end:1000, gap:100, other:all } }'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n\n<lst name=\"responseHeader\">\n  <int name=\"status\">0</int>\n  <int name=\"QTime\">23</int>\n  <lst name=\"params\">\n    <str name=\"q\">*:*</str>\n    <str name=\"json.facet\">{ foo:{type:range, field:price, start:0, end:1000, gap:100, other:all } }</str>\n    <str name=\"rows\">0</str>\n    <str name=\"wt\">xml</str>\n  </lst>\n</lst>\n<result name=\"response\" numFound=\"32\" start=\"0\">\n</result>\n<lst name=\"facets\">\n  <int name=\"count\">32</int>\n  <lst name=\"foo\">\n    <arr name=\"buckets\">\n      <lst>\n        <float name=\"val\">0.0</float>\n        <int name=\"count\">7</int>\n      </lst>\n      <lst>\n        <float name=\"val\">100.0</float>\n        <int name=\"count\">2</int>\n      </lst>\n      <lst>\n        <float name=\"val\">200.0</float>\n        <int name=\"count\">1</int>\n      </lst>\n      ...\n    </arr>\n    <lst name=\"before\">\n      <int name=\"count\">0</int>\n    </lst>\n    <lst name=\"after\">\n      <int name=\"count\">1</int>\n    </lst>\n    <lst name=\"between\">\n      <int name=\"count\">15</int>\n    </lst>\n  </lst>\n</lst>\n</response>\n\n\n\tUsing muliple shards...\n\nbin/solr -e cloud\n# choose multiple shards, any number of replicas, w/ sample_techproducts_configs\nbin/post -c techproducts example/exampledocs/\n$ curl http://localhost:8983/solr/techproducts/select -d 'q=*:*&wt=xml&rows=0&json.facet={ foo:{type:range, field:price, start:0, end:1000, gap:100, other:all } }'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n\n<lst name=\"responseHeader\">\n  <bool name=\"zkConnected\">true</bool>\n  <int name=\"status\">0</int>\n  <int name=\"QTime\">60</int>\n  <lst name=\"params\">\n    <str name=\"q\">*:*</str>\n    <str name=\"json.facet\">{ foo:{type:range, field:price, start:0, end:1000, gap:100, other:all } }</str>\n    <str name=\"rows\">0</str>\n    <str name=\"wt\">xml</str>\n  </lst>\n</lst>\n<result name=\"response\" numFound=\"50\" start=\"0\" maxScore=\"1.0\">\n</result>\n<lst name=\"facets\">\n  <long name=\"count\">50</long>\n  <lst name=\"foo\">\n    <arr name=\"buckets\">\n      <lst>\n        <float name=\"val\">0.0</float>\n        <long name=\"count\">17</long>\n      </lst>\n      <lst>\n        <float name=\"val\">100.0</float>\n        <long name=\"count\">2</long>\n      </lst>\n      <lst>\n        <float name=\"val\">200.0</float>\n        <long name=\"count\">1</long>\n      </lst>\n      ...\n    </arr>\n    <lst name=\"before\">\n      <long name=\"count\">0</long>\n    </lst>\n    <lst name=\"after\">\n      <long name=\"count\">1</long>\n    </lst>\n    <lst name=\"between\">\n      <long name=\"count\">25</long>\n    </lst>\n  </lst>\n</lst>\n</response>\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-16295378"
        },
        {
            "date": "2018-02-01T04:55:23+0000",
            "content": "facet.field faceting does return an integer in distrib mode as well, but client code should not rely on getting an integer vs a long given that distributed search & faceting supports greater than 2B docs. ",
            "author": "Yonik Seeley",
            "id": "comment-16348012"
        },
        {
            "date": "2018-02-01T18:26:02+0000",
            "content": "client code should not rely on getting an integer vs a long given that distributed search & faceting supports greater than 2B docs.\n\nIt doesn't feel fair to pass the buck and say \"client code should not rely on getting what we're giving you\" because they have no way of knowing (or reason to wonder if) that the data types being returned might change out from under them.\n\nIf you're a developer just starting out and you're using the XML response, you're going to see get back an <int> and you're going to write code to parse that so you can use it.  If you're using solrj, then inspecting the Objects in the QueryResponse during your development is going to show you that the \"count\" is an Integer and you're going write code that looks something like Integer count = (Integer) bucket.get(\"count\")) in order to us that Integer\n\nthat code is going to all work fine in development on single core solr, or even when you use your first SolrCloud collection with a single shard \u2013 but as soon as you have multiple shards your client code is going to break and it's not going to be obvious why.\n\n\n\nI really think we should just bite the bullet and make all the json.facet counts be Longs \u2013 if not on 7.x then at the very least for 8.0, ... and definitely before anybody spends time working on any SolrJ QueryResponse convenience methods/classes for json.facets results. ",
            "author": "Hoss Man",
            "id": "comment-16349048"
        },
        {
            "date": "2018-02-01T20:59:31+0000",
            "content": "It doesn't feel fair to pass the buck and say \"client code should not rely on getting what we're giving you\"\n\nI was just pointing out that we already do this in other places - it's not unique to json facets.\nThe parts of Solr that consume code like this typically use ((Number)value).longValue()\n\nI'm not opposed to changing the behavior, but I disagree that this is a bug. ",
            "author": "Yonik Seeley",
            "id": "comment-16349265"
        }
    ]
}