{
    "id": "LUCENE-1567",
    "title": "New flexible query parser",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "New Feature",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "From \"New flexible query parser\" thread by Micheal Busch\n\nin my team at IBM we have used a different query parser than Lucene's in\nour products for quite a while. Recently we spent a significant amount\nof time in refactoring the code and designing a very generic\narchitecture, so that this query parser can be easily used for different\nproducts with varying query syntaxes.\n\nThis work was originally driven by Andreas Neumann (who, however, left\nour team); most of the code was written by Luis Alves, who has been a\nbit active in Lucene in the past, and Adriano Campos, who joined our\nteam at IBM half a year ago. Adriano is Apache committer and PMC member\non the Tuscany project and getting familiar with Lucene now too.\n\nWe think this code is much more flexible and extensible than the current\nLucene query parser, and would therefore like to contribute it to\nLucene. I'd like to give a very brief architecture overview here,\nAdriano and Luis can then answer more detailed questions as they're much\nmore familiar with the code than I am.\nThe goal was it to separate syntax and semantics of a query. E.g. 'a AND\nb', '+a +b', 'AND(a,b)' could be different syntaxes for the same query.\nWe distinguish the semantics of the different query components, e.g.\nwhether and how to tokenize/lemmatize/normalize the different terms or\nwhich Query objects to create for the terms. We wanted to be able to\nwrite a parser with a new syntax, while reusing the underlying\nsemantics, as quickly as possible.\nIn fact, Adriano is currently working on a 100% Lucene-syntax compatible\nimplementation to make it easy for people who are using Lucene's query\nparser to switch.\n\nThe query parser has three layers and its core is what we call the\nQueryNodeTree. It is a tree that initially represents the syntax of the\noriginal query, e.g. for 'a AND b':\n  AND\n /   \\\nA     B\n\nThe three layers are:\n1. QueryParser\n2. QueryNodeProcessor\n3. QueryBuilder\n\n1. The upper layer is the parsing layer which simply transforms the\nquery text string into a QueryNodeTree. Currently our implementations of\nthis layer use javacc.\n2. The query node processors do most of the work. It is in fact a\nconfigurable chain of processors. Each processors can walk the tree and\nmodify nodes or even the tree's structure. That makes it possible to\ne.g. do query optimization before the query is executed or to tokenize\nterms.\n3. The third layer is also a configurable chain of builders, which\ntransform the QueryNodeTree into Lucene Query objects.\n\nFurthermore the query parser uses flexible configuration objects, which\nare based on AttributeSource/Attribute. It also uses message classes that\nallow to attach resource bundles. This makes it possible to translate\nmessages, which is an important feature of a query parser.\n\nThis design allows us to develop different query syntaxes very quickly.\nAdriano wrote the Lucene-compatible syntax in a matter of hours, and the\nunderlying processors and builders in a few days. We now have a 100%\ncompatible Lucene query parser, which means the syntax is identical and\nall query parser test cases pass on the new one too using a wrapper.\n\n\nRecent posts show that there is demand for query syntax improvements,\ne.g improved range query syntax or operator precedence. There are\nalready different QP implementations in Lucene+contrib, however I think\nwe did not keep them all up to date and in sync. This is not too\nsurprising, because usually when fixes and changes are made to the main\nquery parser, people don't make the corresponding changes in the contrib\nparsers. (I'm guilty here too)\nWith this new architecture it will be much easier to maintain different\nquery syntaxes, as the actual code for the first layer is not very much.\nAll syntaxes would benefit from patches and improvements we make to the\nunderlying layers, which will make supporting different syntaxes much\nmore manageable.",
    "attachments": {
        "lucene_trunk_FlexQueryParser_2009July09_v4.patch": "https://issues.apache.org/jira/secure/attachment/12413081/lucene_trunk_FlexQueryParser_2009July09_v4.patch",
        "lucene_trunk_FlexQueryParser_2009july15_v6.patch": "https://issues.apache.org/jira/secure/attachment/12413558/lucene_trunk_FlexQueryParser_2009july15_v6.patch",
        "lucene_trunk_FlexQueryParser_2009March24.patch": "https://issues.apache.org/jira/secure/attachment/12403500/lucene_trunk_FlexQueryParser_2009March24.patch",
        "lucene_trunk_FlexQueryParser_2009july30_v12.patch": "https://issues.apache.org/jira/secure/attachment/12415001/lucene_trunk_FlexQueryParser_2009july30_v12.patch",
        "lucene_1567_adriano_crestani_07_13_2009.patch": "https://issues.apache.org/jira/secure/attachment/12413364/lucene_1567_adriano_crestani_07_13_2009.patch",
        "wiki_switching_to_the_new_query_parser.txt": "https://issues.apache.org/jira/secure/attachment/12413890/wiki_switching_to_the_new_query_parser.txt",
        "QueryParser_restructure_meetup_june2009_v2.pdf": "https://issues.apache.org/jira/secure/attachment/12410046/QueryParser_restructure_meetup_june2009_v2.pdf",
        "lucene_trunk_FlexQueryParser_2009july23_v8.patch": "https://issues.apache.org/jira/secure/attachment/12414403/lucene_trunk_FlexQueryParser_2009july23_v8.patch",
        "lucene_trunk_FlexQueryParser_2009july28_v10.patch": "https://issues.apache.org/jira/secure/attachment/12414840/lucene_trunk_FlexQueryParser_2009july28_v10.patch",
        "lucene_trunk_FlexQueryParser_2009March26_v3.patch": "https://issues.apache.org/jira/secure/attachment/12403762/lucene_trunk_FlexQueryParser_2009March26_v3.patch",
        "lucene_trunk_FlexQueryParser_2009july27_v9.patch": "https://issues.apache.org/jira/secure/attachment/12414704/lucene_trunk_FlexQueryParser_2009july27_v9.patch",
        "new_query_parser_src.tar": "https://issues.apache.org/jira/secure/attachment/12412578/new_query_parser_src.tar",
        "lucene_trunk_FlexQueryParser_2009july16_v7.patch": "https://issues.apache.org/jira/secure/attachment/12413665/lucene_trunk_FlexQueryParser_2009july16_v7.patch",
        "lucene_trunk_FlexQueryParser_2009july31_v14.patch": "https://issues.apache.org/jira/secure/attachment/12415204/lucene_trunk_FlexQueryParser_2009july31_v14.patch",
        "lucene-1567.patch": "https://issues.apache.org/jira/secure/attachment/12414680/lucene-1567.patch",
        "lucene_trunk_FlexQueryParser_2009July10_v5.patch": "https://issues.apache.org/jira/secure/attachment/12413188/lucene_trunk_FlexQueryParser_2009July10_v5.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-03-19T04:15:07+0000",
            "content": "Should the Flexible Query Parser patch be committed to the main,\nas a replacement for the old queryparser? \n\nThe current implementation is using Java 1.5 syntax.\nIs that OK, if we commit it to the trunk.\n ",
            "author": "Luis Alves",
            "id": "comment-12683308"
        },
        {
            "date": "2009-03-19T04:31:20+0000",
            "content": "It's probably not ok, since lucene build script will probably fail because of that. We are working on a patch which we will upload to this JIRA soon, it will only be for the community to review the new query parser code and not to be committed against the trunk. I think somebody could create a sandbox and commit the code, it would be easier for other to review the new query parser.\n\nI think the right question is if we should include this new parser in the release 2.9, if yes, then we definitely need to change the code to be java 1.4 compatible. Anyway, before taking this decision, the code must be available for the community : )\n\nBest Regards, ",
            "author": "Adriano Crestani",
            "id": "comment-12683313"
        },
        {
            "date": "2009-03-19T08:00:19+0000",
            "content": "You may want to take a look here:\nhttp://wiki.apache.org/lucene-java/Java_1.5_Migration\nIirc somewhere in the threads referenced there it was mentioned that contrib modules can go ahead to 1.5 already now. ",
            "author": "Paul Elschot",
            "id": "comment-12683355"
        },
        {
            "date": "2009-03-19T09:46:22+0000",
            "content": "I think it would be good to attach the 1.5 implementation here for now as a patch so that we can review the code.\nWe can then decide when/how/where to commit it. ",
            "author": "Michael Busch",
            "id": "comment-12683393"
        },
        {
            "date": "2009-03-19T21:05:58+0000",
            "content": "First step towards Software Grant is to have all people who worked on the code file a CLA.  I would suggest IBM file a CCLA for this, especially b/c it sounds like one of the people who worked on it is no longer there.  I will ask for clarification if it is really needed.  In the meantime, if Luis can file his CLA that would be great: http://www.apache.org/licenses/icla.txt ",
            "author": "Grant Ingersoll",
            "id": "comment-12683616"
        },
        {
            "date": "2009-03-19T21:15:02+0000",
            "content": "Never mind on the CCLA, as I think the software grant covers it: http://www.apache.org/licenses/software-grant.txt ",
            "author": "Grant Ingersoll",
            "id": "comment-12683621"
        },
        {
            "date": "2009-03-20T13:38:09+0000",
            "content": "OK, I have started the IP Clearance in incubation.  Please send in the software grant ASAP and make sure you CC me on it (gsingers@a.o) ",
            "author": "Grant Ingersoll",
            "id": "comment-12683879"
        },
        {
            "date": "2009-03-24T09:05:10+0000",
            "content": "This is first initial patch, for people to review and play with \nit was done against the trunk as of 2009 March 24 into the main,\n\nWe tried to document the code as much as possible, Adriano and me will try answer any \nquestions as soon as we can.\n\nSamples using the new API's\norg.apache.lucene.queryParser.spans.TestSpanQueryParserSimpleSample\norg.apache.lucene.queryParser.spans.TestSpanQueryParser\n\nOld QueryParser testcases running against\norg.apache.lucene.queryParser.lucene2.QueryParserWrapper\norg.apache.lucene.queryParser.lucene2.MultiFieldQueryParserWrapper\n\nthe Compatible Wrappers, using the new Flexible Query Parser as backend\n\norg.apache.lucene.queryParser.lucene2.TestMultiAnalyzer\norg.apache.lucene.queryParser.lucene2.TestMultiFieldQueryParser\norg.apache.lucene.queryParser.lucene2.TestQueryParser\n\nThe \"build\" and \"test-core\" targets are working fine.\n\nThe build.xml 'test\" target is failing in the xml-query-parser, I still need to verify why.\nI'm also working on \"javadocs\" warnings in the new classes\n\n ",
            "author": "Luis Alves",
            "id": "comment-12688621"
        },
        {
            "date": "2009-03-24T09:20:15+0000",
            "content": "I forgot to mention that we made some changes to common-build.xml to patch it to jdk 1.5 level for patch to work, and to include the queryparser property file needed by the new queryparser into the lucene jar. ",
            "author": "Luis Alves",
            "id": "comment-12688625"
        },
        {
            "date": "2009-03-24T12:25:18+0000",
            "content": "I have not had a chance to look too deeply yet (I've just jumped around the code for 15 or 20 minutes), but first impression is great. A really nice step forward for the queryparser. Thanks guys. ",
            "author": "Mark Miller",
            "id": "comment-12688663"
        },
        {
            "date": "2009-03-24T15:50:22+0000",
            "content": "From org.apache.lucene.queryParser.lucene2.config.package.html\nThis configuration\nhandler reproduces almost everything that could be set on the old query parser.\n\nDoes this mean there is something missing? Or that some settings are handled in another manner? ",
            "author": "Mark Miller",
            "id": "comment-12688721"
        },
        {
            "date": "2009-03-24T21:14:11+0000",
            "content": "From org.apache.lucene.queryParser.lucene2.config.package.html\n\n    This configuration\n    handler reproduces almost everything that could be set on the old query parser.\n\nDoes this mean there is something missing? Or that some settings are handled in another manner?\n\nThe only QueryParser configuration that is not implemented on the new query parser configuration is QueryParser.setFuzzyMinSim(float) and QueryParser.setFuzzyPrefixLength(int). They are kind of hardcoded for now, always using the default values for these configs. But it doesn't mean they cannot be implemented on the new query parser...I think the main reason why they are not  implemented yet is that Lucene TestQueryParser is not testing them, so I did not  give much attention to these 2 settings. I will try to implement them for the next patch ; ) ",
            "author": "Adriano Crestani",
            "id": "comment-12688871"
        },
        {
            "date": "2009-03-26T21:00:18+0000",
            "content": "Here is an updated version of the patch with minor fixes. This version does not delete the old lucene queryparser.\n\nbuild.xml default, javadocs, test-core all run fine. ",
            "author": "Luis Alves",
            "id": "comment-12689656"
        },
        {
            "date": "2009-03-26T21:29:14+0000",
            "content": "HI Grant and Micheal\nI faxed the CLA today. ",
            "author": "Luis Alves",
            "id": "comment-12689680"
        },
        {
            "date": "2009-03-27T00:07:17+0000",
            "content": "I cleaned up all the javadocs on this one. ",
            "author": "Luis Alves",
            "id": "comment-12689755"
        },
        {
            "date": "2009-04-09T23:52:52+0000",
            "content": "Having gone over this a bit, I think its a great step forward over the current parser. I really think it should end up replacing it. It might work well with our possible plan of steps towards modularization. We could deprecate the core QueryParser and add this as part of a new module (the trick will be turning contrib into modules in practice as opposed to just saying they are modules now - this could be a start though) ",
            "author": "Mark Miller",
            "id": "comment-12697688"
        },
        {
            "date": "2009-04-10T13:55:44+0000",
            "content": "OK, I see the CLA is registered.  Now we need the Software Grant. ",
            "author": "Grant Ingersoll",
            "id": "comment-12697808"
        },
        {
            "date": "2009-04-10T19:04:46+0000",
            "content": "\nNow we need the Software Grant. \n\nWorking on it. The terms \"paper work\", \"IBM\" and \"quick\" don't usually appear in the same sentence  ",
            "author": "Michael Busch",
            "id": "comment-12697929"
        },
        {
            "date": "2009-04-28T05:54:06+0000",
            "content": "Grant, the ip-clearance document that you created under incubator-public in svn had not been added to the site-publish folder, I just did that in revision 769253. If that's not correct, please remove both xml and html versions of the lucene-query-parser file there. ",
            "author": "Bertrand Delacretaz",
            "id": "comment-12703504"
        },
        {
            "date": "2009-06-02T20:03:22+0000",
            "content": "The flexible query parser looks very promising. I can see that the ProximityQueryNode was implemented but not integrated completely.  Can the ProximityQuerNode be used as a replacement for SrndQueryParser?  If yes do you think will it be possible to mix proximity query with the other types of queries like the one below:\n\nfield1: ((term1* or term2* or term3*)   WITHIN/5  \"phrase term1* term2\"~2  WITHIN/50 (term3 or term4~3 or term5*)) ",
            "author": "Ali Oral",
            "id": "comment-12715653"
        },
        {
            "date": "2009-06-04T16:21:50+0000",
            "content": "The software Grant has been received and filed.  I will update the paperwork and work to finish this out next week, such that we can then work to commit it. ",
            "author": "Grant Ingersoll",
            "id": "comment-12716311"
        },
        {
            "date": "2009-06-06T00:54:55+0000",
            "content": "This is a deck of slides we prepared for meetup in san francisco ",
            "author": "Luis Alves",
            "id": "comment-12716811"
        },
        {
            "date": "2009-06-06T04:36:45+0000",
            "content": "Since the modularization discussion on java-dev hasn't really had any conclusions yet, we have the options to a) make the patch jre 1.4 compatible, or b) commit it as a contrib module and move to core with 3.0. \n\nLuis and Adriano: how much work would a) be? ",
            "author": "Michael Busch",
            "id": "comment-12716825"
        },
        {
            "date": "2009-06-06T06:49:15+0000",
            "content": "Hi Michael,\n\nI think the biggest work will be to refactor the code to not use generics anymore, which is used all over the place. It might take an afternoon. Let me know, if everybody agree on changing the code to be Java 1.4 compatible, so I can do the changes ASAP. ",
            "author": "Adriano Crestani",
            "id": "comment-12716841"
        },
        {
            "date": "2009-06-08T23:34:38+0000",
            "content": "Is it mostly internal stuff you need to change to compile with 1.4, or do also a lot of public APIs use generics? ",
            "author": "Michael Busch",
            "id": "comment-12717486"
        },
        {
            "date": "2009-06-08T23:59:05+0000",
            "content": "It's mostly internal stuffs, the only api that uses generics is QueryNode tha returns List<QueryNode> and receives it as param, I actually don't think it's a big deal  ",
            "author": "Adriano Crestani",
            "id": "comment-12717492"
        },
        {
            "date": "2009-06-09T02:23:37+0000",
            "content": "I actually think we should give the parser to contrib on 2.9 using jdk 1.5 syntax\nand move it to main on 3.0 using jdk1.5 syntax.\n\nI don't think it's  a small change and this change will affect the interfaces and future \nversions of the parser (to be 1.4 compatible).\n\nI would see nothing wrong with having a jdk 1.4 version if we were 100% compatible with the old queryparser,\nbut since that is not the case, I don't think it is worth it. (the wrapper we built does not support the case where users extend the old queryparser class and overwrite methods to add new functionality)\n\nIf everyone else thinks making the queryparser interfaces 1.4 compatible is a must, I will be OK with it.\nBut only if we actually move the new queryparser to main on 2.9 and break the compatibility with the old lucene Queryparser class, for users that are extending this class.\n\nThe new queryparser supports 100% on the syntax, and 100% of the lucene Junits. But does not support users that extended the QueryParser class and overwrote some methods.\n\n ",
            "author": "Luis Alves",
            "id": "comment-12717535"
        },
        {
            "date": "2009-06-09T03:28:58+0000",
            "content": "I went through the new QP and listed what exactly needs to be changed:\n\nQueryNode class has 2 methods: set(List<QueryNode>), add(List<QueryNode>) and List<QueryNode> getChildren(). All the generics would be removed. I don't see any back compatibility problem if we add generics in future, we could hardcode the type checking if we release with 1.4 and any user impl of this class will need to do the same and follow the documentation.\n\nModifierQueryNode has an enum called Modifier with values MOD_NOT, MOD_NONE and MOD_REQ. An enum can be almost completely reproduced on 1.4 using: \n\n...\nfinal public static class Modifier implements Serializable {\n\n   final public static Modifier MOD_NOT = new Modifier();\n\n   final public static Modifier MOD_NOT = new Modifier();\n\n   final public static Modifier MOD_NOT = new Modifier();\n\n   private Modifier() \n{ // empty constructor }\n\n   // we might add some Enum methods, like name(), etc...\n\n}\n...\n\nThe only back compatibility problem I see when we change the Modifier to enum again is if on the version 1.4 the user checks for Modifier.class.isEnum()...does anybody see any other back-compatibility issue?\n\nThe last thing that will need to be changed is on the QueryBuilder and LuceneQueryBuilder. The QueryBuilder.build() returns an Object and when LuceneQueryBuilder implements it, it specializes the return to Query, which will start throwing Object instead if we change to 1.4. On this case I don't see any back-compatibility issue also.\n\nRegarding the new QP framework, I don't see any problem about back compatibility, because Lucene will only be Java 1.5 on version 3.0, and back compatibility may be broken. But...\n\nI would see nothing wrong with having a jdk 1.4 version if we were 100% compatible with the old queryparser,\nbut since that is not the case, I don't think it is worth it. (the wrapper we built does not support the case where users extend the old queryparser class and overwrite methods to add new functionality)\n\nI agree with Luis, if we only release the new QP framework 2.9, we will definitely brake the back-compatiblity of the old QP, so, why not release the old and the new QP together on 2.9?\n\nSuggestions? \n\nBest Regards,\nAdriano Crestani Campos\nAdriano Crestani Campos ",
            "author": "Adriano Crestani",
            "id": "comment-12717543"
        },
        {
            "date": "2009-06-09T05:14:04+0000",
            "content": "There will be a couple of more changes need:\nWe also have  to change \"List change <QueryNode> getchildren();\" and  \"public Map<CharSequence, Object> getTags();\"\nWe also have change QueryNodeImpl, we will have to patch all QueryNode classes implementations and perform forced casts.\nand users implementing QueryNode's will also have to do that.\n\nIt's about 30 changes, not that a big change, I agree. But if we release both parsers I see no need to change it.\n\n> I agree with Luis, if we only release the new QP framework 2.9, we will definitely brake the back-compatiblity of the old QP, \n> so, why not release the old and the new QP together on 2.9?\n\nSome extras:\nIf we chose to release both parsers, we should deprecate the old one,\nallowing people to migrate to the new one with release 2.9. and drop the old queryparser classes on 3.0.\n(we can keep the wrappers in 2.9 throwing exceptions in all methods to remind people to move to the new framework\nwe probably can also keep the wrapper in 3.0, if we think is still necessary).\n ",
            "author": "Luis Alves",
            "id": "comment-12717560"
        },
        {
            "date": "2009-06-09T07:24:53+0000",
            "content": "> We also have to change \"List change <QueryNode> getchildren();\" and \"public Map<CharSequence, Object> getTags();\"\n\nI already mentioned about getChildren(), I forgot about getTags(), thanks for reminding me : )...I looked into the patch attached, it does not contain that yet \n\n> We also have change QueryNodeImpl, we will have to patch all QueryNode classes implementations and perform forced casts.\n> and users implementing QueryNode's will also have to do that. \n\nYes, these are internal changes, they shouldn't affect anything, even after released with 2.9. If some user extends these classes, they will need to do the type checking and follow the documentation as I said before. Also, there would be no impact when they migrate to 3.0 when we re-add the generics, they will just keep performing the type checking on the List objects and verifying if they are QueryNodes or not.\n\n> Some extras:\n> If we chose to release both parsers, we should deprecate the old one,\n> allowing people to migrate to the new one with release 2.9. and drop the old queryparser classes on 3.0.\n> (we can keep the wrappers in 2.9 throwing exceptions in all methods to remind people to move to the new framework\n> we probably can also keep the wrapper in 3.0, if we think is still necessary).\n\nCompletely agree  ",
            "author": "Adriano Crestani",
            "id": "comment-12717588"
        },
        {
            "date": "2009-06-16T22:02:18+0000",
            "content": "Adriano and Luis:\n\nI think a few things need to be changed/improved here in order to commit this for 2.9:\n\n\n\tJDK 1.4 compatibility\n\tBackwards-compatibility, which means the patch should deprecate the old QueryParser, not remove it\n\tA class/interface that is as easy to use as the old QueryParser for people who simply want to parse a query string; those users shouldn't have to know about what a processor or builder chain is\n\tBetter documentation about how to easily switch over from the old to the new QueryParser\n\n\n\nWe're talking on java-dev about releasing 2.9 fairly soon; how long would these changes take? I'd like to get this in 2.9 because it seems to be a popular issue. ",
            "author": "Michael Busch",
            "id": "comment-12720371"
        },
        {
            "date": "2009-06-16T22:15:03+0000",
            "content": "I need an MD5/SHA1 hash (http://incubator.apache.org/ip-clearance/ip-clearance-template.html) for the exact code listed in the software grant.  Also include the version number of the software used to create the hash. \n\nPlease also upload that code as a tarball on this issue.  No need to worry about the patches for now. \n\nSee https://issues.apache.org/jira/browse/INCUBATOR-77 for example. ",
            "author": "Grant Ingersoll",
            "id": "comment-12720379"
        },
        {
            "date": "2009-06-16T22:21:21+0000",
            "content": "From the IP Clearance, consider yourself reminded:\n\nRemind active committers that they are responsible for\n                  ensuring that a Corporate CLA is recorded if such is\n                  required to authorize their contributions under their\n                  individual CLA. ",
            "author": "Grant Ingersoll",
            "id": "comment-12720382"
        },
        {
            "date": "2009-06-16T22:22:43+0000",
            "content": "But we still need to update the code before we can commit. From which patch do you need the MD5/SHA1 hash from? ",
            "author": "Michael Busch",
            "id": "comment-12720385"
        },
        {
            "date": "2009-06-16T22:23:27+0000",
            "content": "OK, only outstanding items for clearance are:\n1. tarball and hash\n2. Vote on Incubator for clearance. ",
            "author": "Grant Ingersoll",
            "id": "comment-12720386"
        },
        {
            "date": "2009-06-16T22:53:35+0000",
            "content": "Hi Michael,\n\nI expect it takes one week at max! ",
            "author": "Adriano Crestani",
            "id": "comment-12720403"
        },
        {
            "date": "2009-06-16T22:57:17+0000",
            "content": "Ok GO! ",
            "author": "Michael Busch",
            "id": "comment-12720404"
        },
        {
            "date": "2009-06-16T23:34:43+0000",
            "content": "Commit is separate from IP Clearance and you can't commit until the clearance is accepted.\n\n I just need the tarball for the code that was referenced in the software grant along with a hash on it.  In the grant, you have a file directory listing describing the code.  Take that file listing, tar it up and run md5 on it.\n ",
            "author": "Grant Ingersoll",
            "id": "comment-12720417"
        },
        {
            "date": "2009-06-16T23:50:52+0000",
            "content": "OK that should be easy. We'll do that asap. Thanks for explaining, Grant. ",
            "author": "Michael Busch",
            "id": "comment-12720422"
        },
        {
            "date": "2009-07-06T05:16:41+0000",
            "content": "MD5 (new_query_parser_src.tar) = b678596e3dea63e8e66e035d6dc7f45e\n\nOn Jul 4, 2009, at 5:17 PM, Michael Busch wrote:\n\nHi Grant,\n\nattached is the tar file that includes the files that were listed in the software grant. These files contain all the IP of this new feature that was developed internally in IBM. However, the final patch that will be committed will look a bit different, due to discussions with the other committers, which of course take now place on the public mailinglist.\n\nOn 7/5/09 8:15 PM, Grant Ingersoll wrote:\n\nPlease attach to the issue.  No worries on the other part, just need the bits there for me to say they exist and align w/ the Grant.  What we commit can be patched.  ",
            "author": "Michael Busch",
            "id": "comment-12727392"
        },
        {
            "date": "2009-07-06T13:53:49+0000",
            "content": "I wonder if all of this was really necessary. Months ago, while doing some searching, I saw that at least one other Apache project (might have been on the legal email list?), asked about a large code contribution from a company, and the response was that if a guy at the company had a CLA on file (was a committer), and was part of the process, he could commit the large code contribution without all of this paperwork mumbo jumbo.\n\nOf course, best to be thorough and complete, but I think we may not have to jump through these same hoops in the future.\n\nNot that that means much, as I say that with no authority or complete knowledge about it. But if someone wanted to research further ... ",
            "author": "Mark Miller",
            "id": "comment-12727531"
        },
        {
            "date": "2009-07-07T11:30:14+0000",
            "content": "I saw that at least one other Apache project\n\nJust because someone else does it wrong...  It's pretty clear in this case that the Grant is necessary. ",
            "author": "Grant Ingersoll",
            "id": "comment-12728039"
        },
        {
            "date": "2009-07-07T11:35:08+0000",
            "content": "Someone else didnt do it wrong - they asked and got an answer from someone from Apache that seemed to know what they were talking about, and seemed to have the authority/knowledge to give the answer they gave.\n\nI'm not saying something one way or another - just throwing what I saw out there. I'm sure you have more info on the subject than I do. ",
            "author": "Mark Miller",
            "id": "comment-12728042"
        },
        {
            "date": "2009-07-07T12:00:14+0000",
            "content": "Hmmm - if you look at the strict letter of the law in Intellectual Property Clearance, then LocalLucene and Trie and a lot of other stuff also needed this clearance ... I may have just missed the process on those though. ",
            "author": "Mark Miller",
            "id": "comment-12728052"
        },
        {
            "date": "2009-07-07T13:20:25+0000",
            "content": "LocalLucene did.  Not sure about Trie.  Anyway, this issue is not the place for this discussion. ",
            "author": "Grant Ingersoll",
            "id": "comment-12728085"
        },
        {
            "date": "2009-07-07T13:27:02+0000",
            "content": "Anyway, this issue is not the place for this discussion. \n\nSeems like a couple comments about this here is appropriate to me. Your just being prickly man. I was pointing something out that has relevance to this issue and relevance to committers when dealing with future similar issues.\n\nMy comment about LocalLucene and Trie were not an accusation, but an attempt to clarify what requires this and what doesn't. As a committer, its important that this information is clear to me. As the PMC head, I'd think youd be more helpful with the matter.  ",
            "author": "Mark Miller",
            "id": "comment-12728090"
        },
        {
            "date": "2009-07-07T13:36:30+0000",
            "content": "Not sure about Trie\n\nTrie was not property of a company, it was my private idea (and even if I work at the University of Bremen, which sponsors me, it is not owned by the University. Scientific research in Germany is the scientist's responsibility). And the code was already Apache 2.0 licensed, so there was no problem to donate it. And now I am committer and already signed the CLA. If there is still a problem, I would open another issue about that. ",
            "author": "Uwe Schindler",
            "id": "comment-12728097"
        },
        {
            "date": "2009-07-07T13:44:16+0000",
            "content": "I'll just keep my response out of JIRA to avoid taking over that issue:\n\nAccording to http://incubator.apache.org/ip-clearance/index.html, it \ndoesn't matter if it was your companys code or if you are a committer or \nif you have a CLA. If it was developed outside of Apache svn/mailing \nlists and was then donated, it says it needs the grant.\n\n\n\tMark\n\n\n\n\n\n\u2013 \n\n\tMark\n\n\n\nhttp://www.lucidimagination.com\n\n\n ",
            "author": "Mark Miller",
            "id": "comment-12728102"
        },
        {
            "date": "2009-07-07T13:46:30+0000",
            "content": "And the code was already Apache 2.0 licensed, so there was no problem to donate it.\n\nThis does not matter, nor does the license.  I was unaware that it lived in public someplace else.  If the code lives somewhere else in public, then it needs to go through Soft. Grant, AIUI.  Having it licensed as ASL just makes the paperwork a formality.  At any rate, as I said, the discussion of Trie, LocalLucene and when some generic piece of code needs a grant has nothing to do with this particular issue, so please, if you want to continue this conversation, then start one on java-dev. ",
            "author": "Grant Ingersoll",
            "id": "comment-12728103"
        },
        {
            "date": "2009-07-10T05:36:00+0000",
            "content": "Since all legal work is finally finished now, it is time for an updated patch with the latest fixes and improvements.\n\nBelow are the changes compared to the previous patch:\n\u2022 moved the new queryparser to contrib\n\u2022 deprecated old QueryParser classes in the core\n\u2022 the new queryparser in contrib uses jdk 1.5\n\u2022 patch compiles against current trunk\n\u2022 rewrote the lucene testcases to use the new API's\n\u2022 created wrapper testcases that uses wrapper classes\n\u2022 created classes to overwrite the old QueryParser in the util folder, and make Lucene use the flexible query parser engine, without having to change your code.\n\nI verified that all testcases are working, and that all contrib modules still compile fine.\n\nAdriano when you have some time, can you write an interface for simple usage of the new QueryParser, and a simple implementation of the interface, that creates a textparser, creates a processor pipeline, and instantiates the lucene builders?\n\nAnd please add a simple junit that demonstrates the usage of that interface and ideally some documentation into the package.html of the new contrib package that will help users who want to use the queryparser to get started. ",
            "author": "Luis Alves",
            "id": "comment-12729529"
        },
        {
            "date": "2009-07-10T05:38:07+0000",
            "content": "patch compiles against current trunk ",
            "author": "Luis Alves",
            "id": "comment-12729531"
        },
        {
            "date": "2009-07-10T05:44:16+0000",
            "content": "I will be out of the office on Friday, 10th of July.\n\n\u2013 \nCheers,\nDavid\n\nNuix Pty Ltd\nSuite 79, 89 Jones St, Ultimo NSW 2007, Australia    Ph: +61 2 9280 0699\nWeb: http://www.nuix.com                            Fax: +61 2 9212 6902 ",
            "author": "David Sitsky",
            "id": "comment-12729532"
        },
        {
            "date": "2009-07-10T07:12:51+0000",
            "content": "Luis, I think you need to modify the main build.xml, because the query parser contrib uses java 1.5. For an example look into the build.xml from Lucene 2.2.x. It had a contrib called gdata, which used JRE 1.5. (This was removed after 2.2, so you won't find it in the current build.xml anymore).\n\nCurrently the build will fail if the user runs JRE 1.4, but it should rather skip the new query parser contrib. You can use this property, which is definied in common-build.xml:\n\n<condition property=\"build-1-5-contrib\">\n  <equals arg1=\"1.5\" arg2=\"${ant.java.version}\" />\n</condition>\n\n ",
            "author": "Michael Busch",
            "id": "comment-12729551"
        },
        {
            "date": "2009-07-10T20:57:12+0000",
            "content": "Hi Luis,\n\nI have been improving the code documentation lately, I will merge my diff with your new patch and submit the changes soon. I also could merge with the trunk, it depends when last Luis' patch will be committed.\n\n\nAdriano when you have some time, can you write an interface for simple usage of the new QueryParser, and a simple implementation of the interface, that creates a textparser, creates a processor pipeline, and instantiates the Lucene builders?\n\nGood idea Luis! I was thinking about a class that would allow query parser implementors to \"bundle\" their processor, text parser and builder in it, so the user could simply use it, nobody needs to know how it's implemented. I think the class should contain a method parse(String defaultField, String queryString) that returns whatever that query parser creates from it, in Lucene's case, a Query object. Also, some sets and gets to access the internal processor, builder and text parser, if the user wishes to. I'm gonna work more on the design and submit a patch soon containing it.\n\n\nAnd please add a simple junit that demonstrates the usage of that interface and ideally some documentation into the package.html of the new contrib package that will help users who want to use the queryparser to get started.\n\nI was also thinking about a wiki page that would guide Lucene users to migrate to the new query parser using this new interface.\n\nMore suggestions? ",
            "author": "Adriano Crestani",
            "id": "comment-12729815"
        },
        {
            "date": "2009-07-11T01:40:51+0000",
            "content": "fix for jdk 1.4, on build.xml ",
            "author": "Luis Alves",
            "id": "comment-12729933"
        },
        {
            "date": "2009-07-11T01:52:20+0000",
            "content": "Hi Michael, \n\n> For an example look into the build.xml from Lucene 2.2.x.\nThe ant file on this Lucene 2.2 module does not follow the lucene convention and it uses a complex implementation.\nSo I fixed the problem in a different way:\nI renamed the contrib/queryparser/build.xml to build15.xml, \nand I fixed the contrib-crawl to include build15.xml when a jdk15 is present.\n\nI tested default, build-contrib, javadocs-contrib all work fine.\n\nI just uploaded the patch v5 with this fix. ",
            "author": "Luis Alves",
            "id": "comment-12729935"
        },
        {
            "date": "2009-07-14T00:22:47+0000",
            "content": "Hey guys,\n\nHere is a patch containing some changes I did on top of last Luis' patch ( \tlucene_trunk_FlexQueryParser_2009July10_v5.patch):\n\n\n\tjavadoc reviewed and improved\n\n\n\n\n\t2 new classes: QueryParserHelper and LuceneQueryParserHelper, they make it easier to use the new query parser\n\n\n\n\n\tadded the ability to set the prefix length for fuzzy queries, it was still missing in the new query parser\n\n\n\n\n\tresolved some TODOs\n\n\n\n\n\tAnalyzerQueryNodeProcessor is now using only the new TokenStream API...is it required to be compatible with the old API even if it is in contrib?\n\n\n\n\n\tI duplicated the test cases so they run using the query parser API directly, the query parser helpers and the query parser wrappers, this way we test the three ways the user can actually use the query parser.\n\n\n\nI think that is everything. I will keep reviewing and improving the documentation, I think there might be some broken javadoc links yet.\n\nI also would like to rename the package and everythiing else that does reference to \"lucene2\" to \"lucene\". I think it does not make sense to have a package name tied to a version. So, the package org.apache.lucene.queryParser.lucene2 would be renamed to org.apache.lucene.queryParser.lucene. I know it's kind of weird, because there are 2 \"lucene\" in the package declararion, but I think it's better than \"lucene2\". Anyway, suggestions about this are welcome  ... if nobody replies I will feel free to rename it and submit a new patch soon.\n\nI will also work on writing a documentation for Lucene wiki that explains how to easily migrate from the old query parser to the new one, but I will only add it to the wiki when the code is committed to the trunk, it doesn't make sense a wiki documentation about something that is not even committed, agreed?\n\nSuggestions?\n\nRegards,\nAdriano Crestani Campos ",
            "author": "Adriano Crestani",
            "id": "comment-12730623"
        },
        {
            "date": "2009-07-14T00:29:55+0000",
            "content": "Ah, I also couldn't run \"ant build-contrib\" using Java 1.4, it fails, I even tried a clean trunk and it did not work. Were you able to run it using 1.4 Luis?\n\nI already opened a thread on the ML about this: http://markmail.org/thread/3fyldf7t423fhwbm ",
            "author": "Adriano Crestani",
            "id": "comment-12730627"
        },
        {
            "date": "2009-07-14T01:03:51+0000",
            "content": "\nAh, I also couldn't run \"ant build-contrib\" using Java 1.4, it fails, I even tried a clean trunk and it did not work. Were you able to run it using 1.4 Luis?\n\nI already opened a thread on the ML about this: http://markmail.org/thread/3fyldf7t423fhwbm\n\nMark Miller just replied to the thread and based on his response there is no need for contrib projects to be able to compile using JDK 1.4. So, Luis, could you rollback your changes you did on the build files?\n\nThanks,\nAdriano Crestani Campos ",
            "author": "Adriano Crestani",
            "id": "comment-12730641"
        },
        {
            "date": "2009-07-14T02:10:25+0000",
            "content": "Hang on a sec - it sounds like the target was 1.4 because this was going to replace a 1.4 core piece of functionality.\n\nI don't know that all of the details are fully straightened out though.\n\n1. I'm not pro moving the QueryParser to contrib myself, unless we actually move forward on that 'modules' thread - if not, it doesn't appear very helpful to me.\n\n2. If we move this to contrib, perhaps it can be 1.5? But then in 3.0, can we have 1.5 already? Or is that 3.1? If its 3.1, than if we remove the deprecated query parser in 3.0, you won't have a java 1.4 replacement to move to (if course we could keep the old QueryParser till 4.0 ... ). I'm not clear that we can't add new functionality to 3.0 though. I know Mike has mentioned it, but I can't find where it says that - I just see that we can remove deprecations, not that we can't also add new features. I may be missing something though?\n\nWe should get things fully straightened out before you spend too much time switching between 1.4 and 1.5 though. ",
            "author": "Mark Miller",
            "id": "comment-12730653"
        },
        {
            "date": "2009-07-14T07:03:00+0000",
            "content": "Mark,\n\nit seems like the best thing to do here is to add this as a 1.5 contrib for now and deprecate the core query parser. Then in 3.0 we would move the new one into core and remove the old one entirely. Since it will remain in the same package users won't have to change their code, just while they use 2.9 they have to put an extra jar in their classpath.\n\nLooking at the latest patch, that's what it does (new one to contrib while deprecating old one). ",
            "author": "Michael Busch",
            "id": "comment-12730721"
        },
        {
            "date": "2009-07-14T08:19:40+0000",
            "content": "Adriano,\n\nI will rollback the build.xml changes tomorrow, and use the convention that the \"spatial\" and \"fast-vector-highlighter\" modules use.\n\nOn the package name \"lucene2\":\nI think during the Lucene 3.X development more parsers will be added to the QueryParser, and these parsers will also be lucene parsers and we will need different names. It is probably better to keep lucene2 on the package name, or use a name that makes a reference to the old queryparser.\n\nFor example, in the future we could have:\norg.apache.lucene.queryParser.lucene2  <- lucene 2.X syntax\norg.apache.lucene.queryParser.lucene3  <- lucene 3.X syntax\norg.apache.lucene.queryParser.xml         <- some XML syntax\norg.apache.lucene.queryParser.luceneBoolean  <- boolean syntax\norg.apache.lucene.queryParser.explicit  <- explict query language syntax\n\nI'll also help on the when wiki the code is committed to the trunk. ",
            "author": "Luis Alves",
            "id": "comment-12730735"
        },
        {
            "date": "2009-07-14T10:55:02+0000",
            "content": "Names that tack a \"2\" or some other number on the end are pretty much meaningless.  I'd suggest finding something better that actually describes what the package contains.  After all what is the \"second\" query parser? ",
            "author": "Grant Ingersoll",
            "id": "comment-12730780"
        },
        {
            "date": "2009-07-14T12:18:28+0000",
            "content": "Mark,\n\nit seems like the best thing to do here is to add this as a 1.5 contrib for now and deprecate the core query parser. Then in 3.0 we would move the new one into core and remove the old one entirely. Since it will remain in the same package users won't have to change their code, just while they use 2.9 they have to put an extra jar in their classpath.\n\nLooking at the latest patch, that's what it does (new one to contrib while deprecating old one).\n\nRight, I think that does make sense, but can we actually go to 1.5 in 3.0? Thats what my main question is around. I know the 1.5 wiki says that we can, but Mike has indicated that 3.0 would just be a quick bug fix release with deprecations removed from 2.9. I thought I'd seen him say that 3.1 would actually be the first with 1.5?\n\nMike M? ",
            "author": "Mark Miller",
            "id": "comment-12730812"
        },
        {
            "date": "2009-07-14T12:28:43+0000",
            "content": "3.0 will be 1.5.  See http://wiki.apache.org/lucene-java/Java_1.5_Migration ",
            "author": "Grant Ingersoll",
            "id": "comment-12730815"
        },
        {
            "date": "2009-07-14T12:53:06+0000",
            "content": "Right, 3.0 is when we can first use 1.5 code.\n\nBut, 3.0 will be a fast \"mechanical\" release after 2.9.  This is just\nlike the 1.9 -> 2.0 fast turnaround, except because we begin\naccepting 1.5 code in 3.0 we may make certain changes (switch to\ngenerics in certain APIs; move the new QueryParser into core; etc.).\n\nHowever we don't plan on doing any new features, etc in 3.0; that will\nfirst happen in 3.1. ",
            "author": "Michael McCandless",
            "id": "comment-12730821"
        },
        {
            "date": "2009-07-14T12:54:02+0000",
            "content": "Yeah, I had seen that, I was just remembering an email or two from Mike that mentioned differently (waiting till 3.1) ... but I just found one of the threads discussing it and it looks like consensus shifted:\n\nhttp://www.lucidimagination.com/search/document/6d2b6488b4115/2_9_3_0_plan_java_1_5#6d2b6488b4115\n ",
            "author": "Mark Miller",
            "id": "comment-12730823"
        },
        {
            "date": "2009-07-14T18:24:32+0000",
            "content": "\nexcept because we begin\naccepting 1.5 code in 3.0 we may make certain changes (switch to\ngenerics in certain APIs; move the new QueryParser into core; etc.).\n\nOK sounds like a plan then! The new QP code will not change, but we'll move it into core in 3.0. ",
            "author": "Michael Busch",
            "id": "comment-12731016"
        },
        {
            "date": "2009-07-15T00:04:11+0000",
            "content": "\n    except because we begin\n    accepting 1.5 code in 3.0 we may make certain changes (switch to\n    generics in certain APIs; move the new QueryParser into core; etc.).\n\nOK sounds like a plan then! The new QP code will not change, but we'll move it into core in 3.0.\n\nThanks for the explanation!\n\n\nNames that tack a \"2\" or some other number on the end are pretty much meaningless. I'd suggest finding something better that actually describes what the package contains. After all what is the \"second\" query parser?\n\nI agree with Luis, it's a good idea to have a package for each different query parser implementation. I also agree with Grant that it does not make sense to have an implementation tied to a number. So, as the \"lucene2\" implementation contains the default/main Lucene query parser implementation, I would suggest to rename it to \"defaultLucene\", \"default\" or \"main\". I will give +1 for \"default\".\n\nRegards,\nAdriano Crestani Campos ",
            "author": "Adriano Crestani",
            "id": "comment-12731220"
        },
        {
            "date": "2009-07-15T14:46:03+0000",
            "content": "\n\tUndo the changes on the build file to skip queryparser module if jdk 1.4 was found.\n\tInclude Adriano changes\n\n ",
            "author": "Luis Alves",
            "id": "comment-12731481"
        },
        {
            "date": "2009-07-15T15:06:00+0000",
            "content": "I upload the patch that undo my changes on the build files to skip the queryparser module if jdk 1.4 was found\nThis latest patch also includes Adriano's changes.\n\n\nI agree with Luis, it's a good idea to have a package for each different query parser implementation. I also agree with Grant that it does not make sense to have an implementation tied to a number. So, as the \"lucene2\" implementation contains the default/main Lucene query parser implementation, I would suggest to rename it to \"defaultLucene\", \"default\" or \"main\". I will give +1 for \"default\".\n\nI'll add 2 more suggestions\n\"standard\", \"standardSyntax\". I will give +1 for \"standard\". ",
            "author": "Luis Alves",
            "id": "comment-12731497"
        },
        {
            "date": "2009-07-15T20:53:36+0000",
            "content": "\nI upload the patch that undo my changes on the build files to skip the queryparser module if jdk 1.4 was found\n\nCool!\n\n\nI'll add 2 more suggestions\n\"standard\", \"standardSyntax\". I will give +1 for \"standard\".\n\nI would like to suggest also \"original\" and my +1 for \"original\" ",
            "author": "Adriano Crestani",
            "id": "comment-12731676"
        },
        {
            "date": "2009-07-15T21:09:36+0000",
            "content": "\nI would like to suggest also \"original\" and my +1 for \"original\" \n\n+1 for \"original\" ",
            "author": "Luis Alves",
            "id": "comment-12731688"
        },
        {
            "date": "2009-07-16T09:55:11+0000",
            "content": "Here are some updates for the new query parser:\n\n\n\tsupport to set the minimum fuzzy similarity was added to the configuration handler\n\n\n\n\n\tget methods were added to the configuration handler, so the user that is used to the old query parser can easily access the configuration in the old way\n\n\n\n\n\trenamed everything referencing \"lucene2\" to \"original\"\n\n\n\n\n\tremoved one author tag\n\n\n\n\n\timproved javadoc documentation\n\n\n\n\n\tadded a constructor to LuceneQueryParserHelper that accepts an Analyzer as argument, I think Lucene users are used to create a query parser and also pass the analyzer\n\n\n\nThat's it \n\nI have also noticed that when building using \"ant build-contrib\" it does not copy .properties files to the jar. The new query parser uses a property file to read the NLS messages from and I'm getting some message warnings when running the tests. Is anybody getting the same warnings? ",
            "author": "Adriano Crestani",
            "id": "comment-12731876"
        },
        {
            "date": "2009-07-16T10:31:19+0000",
            "content": "I need an MD5/SHA1 hash (http://incubator.apache.org/ip-clearance/ip-clearance-template.html) for the exact code listed in the software grant. Also include the version number of the software used to create the hash. \n\nI see the hash, but not the version number/platform of the tool used to create it.  This is the last remaining item on my list.  Then I can submit the IP-Clearance to incubator for lazy consensus vote and then this can be committed. ",
            "author": "Grant Ingersoll",
            "id": "comment-12731888"
        },
        {
            "date": "2009-07-17T20:32:34+0000",
            "content": "\nI see the hash, but not the version number/platform of the tool used to create it.\n\nmd5sum version is included in coreutils 6.10-6ubuntu1 The GNU core utilities\nOS: Ubuntu Jaunty 2.6.28-13-server i686 GNU/Linux ",
            "author": "Michael Busch",
            "id": "comment-12732723"
        },
        {
            "date": "2009-07-17T23:54:49+0000",
            "content": "This is a mini-tutorial that will help users to switch over to the new query parser. I think it's pretty simple and helpful.\n\nJust take a look, I will appreciate any suggestion.\n\nI plan to add it to Lucene wiki after the query parser code is committed. ",
            "author": "Adriano Crestani",
            "id": "comment-12732792"
        },
        {
            "date": "2009-07-21T09:40:31+0000",
            "content": "How are we going to migrate the subclasses we have to the current queryParser (ComplexPhraseQueryParser and MultiFieldQueryParser) to the new queryParser?  In the latest patch I see that these subclasses are deprecated, saying \"please use the new flexible queryParser instead\", but I think that's not enough, ie don't we need to make corresponding subclasses of the new queryParser for these? ",
            "author": "Michael McCandless",
            "id": "comment-12733549"
        },
        {
            "date": "2009-07-21T11:17:33+0000",
            "content": "How are we going to migrate the subclasses we have to the current queryParser (ComplexPhraseQueryParser and MultiFieldQueryParser) to the new queryParser?\n\nHere's the answer to 1/2 of my question: the current patch already contains a MultiFieldQueryParserWrapper.  It too is deprecated, which means in the move to core that we'll do for 3.0, it'll be removed.  But the migration path forward seems quite simple: use a MultiFieldQueryNodeProcessor to rewrite all queries so they are against multiple fields (I think?).  If that's right, can you update the deprecated javadocs explaining that this is the way forward?  In general when we deprecate the old, we need to point the way to the new.\n\nAlso, can you fix all indentation to 2-space in the next patch iteration?\n\nI'm not sure exactly how, but it'd be great if this new QueryParser had better integration with NumericRangeQuery.  But that's a nice-to-have for 2.9. ",
            "author": "Michael McCandless",
            "id": "comment-12733591"
        },
        {
            "date": "2009-07-21T12:47:38+0000",
            "content": "OK, I have submitted the IP Clearance to Incubator.  It now has 3 days to percolate under a lazy consensus review.  After that, assuming it passes, this can be committed. ",
            "author": "Grant Ingersoll",
            "id": "comment-12733603"
        },
        {
            "date": "2009-07-22T00:40:40+0000",
            "content": "\nHow are we going to migrate the subclasses we have to the current queryParser (ComplexPhraseQueryParser and MultiFieldQueryParser) to the new queryParser? In the latest patch I see that these subclasses are deprecated, saying \"please use the new flexible queryParser instead\", but I think that's not enough, ie don't we need to make corresponding subclasses of the new queryParser for these?\n\nMultiFieldQueryParser has one equivalent class: MultiFieldQueryParserHelper. Lucene users that use the old one can easily switch to the MultiFieldQueryParserHelper.\n\nComplexPhraseQueryParser, this was recently added to Lucene and I did not have time to work on that yet. I started to get more info and check what is the exactly syntax/features it supports, but I'm having some trouble on finding documentation.\n\n\nIn general when we deprecate the old, we need to point the way to the new.\n\nSure, I will work on that and add some javadocs pointing to the new classes.\n\n\nAlso, can you fix all indentation to 2-space in the next patch iteration?\n\nWow, I'm scaried now, do you know an easy and automated way to do that? It will take forever to do manually. ",
            "author": "Adriano Crestani",
            "id": "comment-12733922"
        },
        {
            "date": "2009-07-22T00:58:12+0000",
            "content": "\nWow, I'm scaried now, do you know an easy and automated way to do that? It will take forever to do manually.\n\nJust change your eclipse settings (Java Code Style -> Formatter) to 2-space indentation (only whitespaces) and then do Source -> Correct Indentation.\n\nNo reason to be scared!  ",
            "author": "Michael Busch",
            "id": "comment-12733925"
        },
        {
            "date": "2009-07-24T05:32:04+0000",
            "content": "\nJust change your eclipse settings (Java Code Style -> Formatter) to 2-space indentation (only whitespaces) and then do Source -> Correct Indentation.\n\nNo reason to be scared! \n\nThanks Michael, that was helpful \n\nSome more changes to the query parser patch:\n\n\n\tAdded more info to the @deprecated tags, referencing the new implementation\n\n\n\n\n\tLuceneMultiFieldQueryParserHelper helper was merged with LuceneQueryParserHelper, as well as LuceneMultiFieldQueryConfigHandler was merged with LuceneQueryConfigHandler\n\n\n\n\n\tstatic/utility methods declared in the old QueryParser and MultiFieldQueryParser are deprecated, so I copied them to a new class called QueryParserUtil\n\n\n\n\n\tlucene.queryParser.original.parser.QueryParser was renamed to TextParser to avoid confusion, this QueryParser class does not do all the query parsing, it's just a part of the query parsing process. Users might also make confusion with the old query parser, which is also called QueryParser\n\n\n\n\n\tfixed the identation (I hope), the patch now contains 2-space identation\n\n ",
            "author": "Adriano Crestani",
            "id": "comment-12734906"
        },
        {
            "date": "2009-07-27T22:29:22+0000",
            "content": "The build.xml seems to be missing in the latest patch. ",
            "author": "Michael Busch",
            "id": "comment-12735812"
        },
        {
            "date": "2009-07-27T22:38:49+0000",
            "content": "Hi Michael,\n\nI think I excluded by mistake every file (non folder) under contrib/queryparser/. So, the files contrib/queryparser/build.xml and pom.xml.template were not included in patch v8. You can copy them from patch v7, because they were not changed between v7 and v8. Or I can submit a new patch including these 2 files. Let me know what is the best option for you.\n\nSorry for the mistake ",
            "author": "Adriano Crestani",
            "id": "comment-12735820"
        },
        {
            "date": "2009-07-27T23:03:36+0000",
            "content": "Thanks, Adriano. I'll take the files from the v7 patch.\n\nI made some changes to make the patch compile with the recent changes on trunk (Attribute changes and constant score rewrite method changes).\n\nNow some tests are failing for me:\n\n    [junit] Testsuite: org.apache.lucene.messages.TestNLS\n    [junit] Tests run: 6, Failures: 2, Errors: 0, Time elapsed: 0.073 sec\n    [junit] ------------- Standard Error -----------------\n    [junit] WARN: Message with key:Q0005E_MESSAGE_NOT_IN_BUNDLE and locale: en_US not found.\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testMessageLoading_ja(org.apache.lucene.messages.TestNLS):\tFAILED\n    [junit] expected:<[?????]: XXX> but was:<[?????]: XXX>\n    [junit] junit.framework.ComparisonFailure: expected:<[?????]: XXX> but was:<[?????]: XXX>\n    [junit] \tat org.apache.lucene.messages.TestNLS.testMessageLoading_ja(TestNLS.java:36)\n    [junit] Testcase: testNLSLoading_ja(org.apache.lucene.messages.TestNLS):\tFAILED\n    [junit] expected:<[?????????????????????????]> but was:<[?????????????????????????]>\n    [junit] junit.framework.ComparisonFailure: expected:<[?????????????????????????]> but was:<[?????????????????????????]>\n    [junit] \tat org.apache.lucene.messages.TestNLS.testNLSLoading_ja(TestNLS.java:54)\n    [junit] Test org.apache.lucene.messages.TestNLS FAILED\n\n ",
            "author": "Michael Busch",
            "id": "comment-12735835"
        },
        {
            "date": "2009-07-27T23:32:46+0000",
            "content": "Sorry, my fault. The encoding was not set to UTF-8 in my eclipse project when I applied the patch.\nI changed it to UTF-8, reapplied, and now it works fine. ",
            "author": "Michael Busch",
            "id": "comment-12735838"
        },
        {
            "date": "2009-07-27T23:36:27+0000",
            "content": "Fixed the patch so that it compiles against current trunk:\n\n\tAttributes needed to be changed after LUCENE-1693 was committed\n\tNeeded to change constantScoreRewrite to RewriteMethod (LUCENE-1644)\n\n\n\nI also added back the build.xml and pom.xml.template from the v7 patch.\n\nAll tests pass now again. ",
            "author": "Michael Busch",
            "id": "comment-12735839"
        },
        {
            "date": "2009-07-27T23:41:09+0000",
            "content": "\nOK, I have submitted the IP Clearance to Incubator. It now has 3 days to percolate under a lazy consensus review. After that, assuming it passes, this can be committed.\n\nDid it pass the review, Grant?\n\nIf yes then I think we can commit this soon to contrib. We can still make small improvements, which will be easier when it's committed. This patch is really large now, and it's hard to track changes.\n\nAlso, even though in 3.0 we can't add new features, we can certainly improve documentation and add more testcases aftert 2.9 and before 3.0. I haven't reviewed everything yet, but if feels like it could use some more documentation... ",
            "author": "Michael Busch",
            "id": "comment-12735842"
        },
        {
            "date": "2009-07-28T00:01:41+0000",
            "content": "Luis/Adriano: I find it a bit confusing now that the different main folders, such as builders, processors, etc. share the same root with 'original', which is an actual implementation.\n\nCould we change the packaging here? Maybe we could create contrib/queryparser/core and move builders, processors, etc. there? ",
            "author": "Michael Busch",
            "id": "comment-12735850"
        },
        {
            "date": "2009-07-28T00:16:43+0000",
            "content": "Hi Michael,\n\nThanks for updating the patch to work with the latest code in svn.\n\nI like your suggestion about creating a core package,\nI'll re-factor the code to use the core package. ",
            "author": "Luis Alves",
            "id": "comment-12735855"
        },
        {
            "date": "2009-07-28T00:42:27+0000",
            "content": "Did it pass the review, Grant?\n\nYes. ",
            "author": "Grant Ingersoll",
            "id": "comment-12735862"
        },
        {
            "date": "2009-07-28T04:44:40+0000",
            "content": "The latest patch include:\n\n\n\tcreated core package, fixed javadocs for that.\n\tfixed TextParser.jj - I assumed Adriano's re-factored this class without generating the code using javacc, the generated classes where not correct.\n\tremove all javadoc references to QueryParser and QueryParserWrapper from javadocs, since these will be deprecated and removed on v3.0. I change it to use the LuceneQueryconfigHandler class. (probably more clean up is necessary on the javadocs for this part)\n\tcreated a overview.html inside the src folder, to remove another javadoc warning. It's empty for now.\n\tThis patch includes, Michael changes.\n\n ",
            "author": "Luis Alves",
            "id": "comment-12735923"
        },
        {
            "date": "2009-07-28T05:33:14+0000",
            "content": "\nfixed TextParser.jj - I assumed Adriano's re-factored this class without generating the code using javacc, the generated classes where not correct.\n\nHi Luis, \n\nWhat exactly did I forget to do? It's hard to find out differences between the patch versions while the code is not commited \n\nI'm not sure, I generated a new TextParser.java after I changed the .jj, it was working and tests passing.\n\n\nCould we change the packaging here? Maybe we could create contrib/queryparser/core and move builders, processors, etc. there?\n\nThat's fine, I think this way the code will look clearer and less confusing. ",
            "author": "Adriano Crestani",
            "id": "comment-12735938"
        },
        {
            "date": "2009-07-28T20:34:07+0000",
            "content": "Hi Adriano,\n\nYou just forgot to delete the query parser files generated by javacc,\nand regenerate the code from the TextParser.jj using javacc.\n\nThis created 2 new classes called TextParserConstants and TextParserTokenManager, \nbut your re-factored code was still using the QueryParser named classes.\n\nNot a big deal. We should always use the generated code from javacc,\nand avoid editing those generated files,  this will prevent inconsistencies.\n\nI'll try to add a javacc target to the queryparser build file, in the near future to make that easier \n\n ",
            "author": "Luis Alves",
            "id": "comment-12736270"
        },
        {
            "date": "2009-07-28T20:54:30+0000",
            "content": "Hi Michael,\n\nI noticed you renamed LuceneQueryConfigHandler.setConstantScoreRewrite to setMultiTermRewriteMethod. Shouldn't ConstantScoreRewriteAttribute class (and its impl) be renamed too? ",
            "author": "Adriano Crestani",
            "id": "comment-12736285"
        },
        {
            "date": "2009-07-28T20:58:00+0000",
            "content": "\nYou just forgot to delete the query parser files generated by javacc,\nand regenerate the code from the TextParser.jj using javacc.\n\nThis created 2 new classes called TextParserConstants and TextParserTokenManager,\nbut your re-factored code was still using the QueryParser named classes.\n\nNot a big deal. We should always use the generated code from javacc,\nand avoid editing those generated files, this will prevent inconsistencies.\n\nI see now. I just regenerated the code and replaced the main QueryParser.java by TextParser.java. Sorry for the mistake.\n\n\nI'll try to add a javacc target to the queryparser build file, in the near future to make that easier \n\nI would love that! ",
            "author": "Adriano Crestani",
            "id": "comment-12736289"
        },
        {
            "date": "2009-07-28T21:04:33+0000",
            "content": "I'll try to add a javacc target to the queryparser build file, in the near future to make that easier \n\nThe main Lucene build.xml/common-build.xml has support for this, maybe it is just using an already available target/macro. ",
            "author": "Uwe Schindler",
            "id": "comment-12736293"
        },
        {
            "date": "2009-07-28T22:55:37+0000",
            "content": "\nThe main Lucene build.xml/common-build.xml has support for this, maybe it is just using an already available target/macro.\nThanks, I'll take a look and see if I can reuse it. ",
            "author": "Luis Alves",
            "id": "comment-12736353"
        },
        {
            "date": "2009-07-29T04:49:26+0000",
            "content": "\nI noticed you renamed LuceneQueryConfigHandler.setConstantScoreRewrite to setMultiTermRewriteMethod. Shouldn't ConstantScoreRewriteAttribute class (and its impl) be renamed too?\n\nOh yeah of course! I meant to do that, but then forgot... \n\nAre you going to submit a new version of the patch anyway? If yes, can you make this change?\nIf no I can submit a new patch... ",
            "author": "Michael Busch",
            "id": "comment-12736439"
        },
        {
            "date": "2009-07-29T04:50:23+0000",
            "content": "\n\tJust revised patch and fixed every javadocs referencing *QueryParserWrapper\n\tFixed javadoc warnings\n\tFixed javadocs (text)\n\tAdded getAnalyzer() to LuceneQueryParserHandler\n\n ",
            "author": "Adriano Crestani",
            "id": "comment-12736442"
        },
        {
            "date": "2009-07-29T05:19:40+0000",
            "content": "\nAre you going to submit a new version of the patch anyway? If yes, can you make this change?\nIf no I can submit a new patch...\n\nSorry Michael, by one minute, I did not see your comment. I will submit another patch tomorrow with these changes. ",
            "author": "Adriano Crestani",
            "id": "comment-12736454"
        },
        {
            "date": "2009-07-29T05:43:07+0000",
            "content": "\nI will submit another patch tomorrow with these changes.\n\nSounds good. Could you also please fix the javadocs? When I'm building the javadocs I'm getting a lot of warnings about not found references. \n\nOtherwise I think this is ready to commit soon. ",
            "author": "Michael Busch",
            "id": "comment-12736459"
        },
        {
            "date": "2009-07-29T15:23:54+0000",
            "content": "Just a question: Will it be possible to specify some type of \"schema\" for the query parser in future, to automatically create NumericRangeQuery for different numeric types? It would then be possible to index a numeric value (double,float,long,int) using NumericField and then the query parser knows, which type of field this is and so it correctly creates a NumericRangeQuery for strings like \"[1.567..*]\" or \"(1.787..19.5]\". NumericRangeQuery also supports the rewrite modes, only some type of schema support is missing.\n\nI ask this, because someone asked on java-user for such a feature in query parser. ",
            "author": "Uwe Schindler",
            "id": "comment-12736662"
        },
        {
            "date": "2009-07-29T22:42:28+0000",
            "content": "\nCould you also please fix the javadocs? When I'm building the javadocs I'm getting a lot of warnings about not found references.\n\nThe warnings occur because you put links to the new contrib queryparser into the core queryparser. That doesn't work as the contribs are not in the classpath of the core, so I think we should remove those links and change them just to plain text.\n\nAlso, please make sure to add to the main build.xml appropriate entries for the javadocs, otherwise the \"All\" javadocs will not contain the contrib QP classes.\n\nThere are also some TODOs in the docs; especially in top-level places, such as the package.html of your new package, we should not have TODOs in the docs. Please fix that soon, 2.9 is coming quickly.  ",
            "author": "Michael Busch",
            "id": "comment-12736879"
        },
        {
            "date": "2009-07-30T04:06:34+0000",
            "content": "Hi Uwe,\n\nWill it be possible to specify some type of \"schema\" for the query parser in future, to automatically create NumericRangeQuery for different numeric types? It would then be possible to index a numeric value (double,float,long,int) using NumericField and then the query parser knows, which type of field this is and so it correctly creates a NumericRangeQuery for strings like \"[1.567..*]\" or \"(1.787..19.5]\". NumericRangeQuery also supports the rewrite modes, only some type of schema support is missing.\n\nI think this is doable.\nI don't think there is a way to extract if a field is numeric from the index, so \nthe user will have to configure the FieldConfig objects in the ConfigHandler.\nBut if this is done, it will not be that difficult to implement the rest.\n\nCan you create a new \"jira issue\" with the description of the feature,\nso we can discuss the details there.\nI'll try to implement that once we agree on all the details.\n ",
            "author": "Luis Alves",
            "id": "comment-12736982"
        },
        {
            "date": "2009-07-30T06:37:16+0000",
            "content": "\nThe warnings occur because you put links to the new contrib queryparser into the core queryparser. That doesn't work as the contribs are not in the classpath of the core, so I think we should remove those links and change them just to plain text.\n\nAlso, please make sure to add to the main build.xml appropriate entries for the javadocs, otherwise the \"All\" javadocs will not contain the contrib QP classes.\n\nThere are also some TODOs in the docs; especially in top-level places, such as the package.html of your new package, we should not have TODOs in the docs. Please fix that soon, 2.9 is coming quickly. \n\nDone!\n\nI also fixed and added a some other javadocs that were missing and renamed ConstantScoreRewriteAttribute (and its impl) to MultiTermRewriteMethodAttribute.\n\nI think the only thing remaining is to add a package.html to org.apache.queryParser.messages package with a good description about it. Luis has a good knowledge about this package, if you have time, can you add this file to that package? Thanks  ",
            "author": "Adriano Crestani",
            "id": "comment-12737014"
        },
        {
            "date": "2009-07-30T07:23:30+0000",
            "content": "Hi Adriano\n\nThere is something wrong with your patch v11, the size almost doubled.\nI did a diff with v10 and it looks like all the files show up twice on v11 patch.\nCan you resubmit it again, I'll add the docs for messages after you resubmit it. ",
            "author": "Luis Alves",
            "id": "comment-12737022"
        },
        {
            "date": "2009-07-30T07:48:38+0000",
            "content": "\nThere is something wrong with your patch v11, the size almost doubled.\nI did a diff with v10 and it looks like all the files show up twice on v11 patch.\nCan you resubmit it again, I'll add the docs for messages after you resubmit it.\n\nHi Luis,\n\nYes, you are right, I think I know why it happened, my mistake. Thanks for reporting that. Here is the new patch  ",
            "author": "Adriano Crestani",
            "id": "comment-12737029"
        },
        {
            "date": "2009-07-30T07:58:35+0000",
            "content": "\nCan you create a new \"jira issue\" with the description of the feature,\nso we can discuss the details there.\nI'll try to implement that once we agree on all the details.\n\nWill do! Thanks. ",
            "author": "Uwe Schindler",
            "id": "comment-12737031"
        },
        {
            "date": "2009-07-31T22:28:29+0000",
            "content": "Good work!\n\nAll tests (core, contrib, bw-comp) pass, the warnings are gone, and the \"All\" javadocs section contains the new packages now too.\n\nI will commit this in a couple of days if nobody objects.\n\nIf there are small outstanding javadoc improvements or so, we should open a separate JIRA issue... this patch is so big that changes are hard to track. ",
            "author": "Michael Busch",
            "id": "comment-12737750"
        },
        {
            "date": "2009-07-31T22:38:03+0000",
            "content": "Michael,\n\nI will submit a new patch in a few hours, I just need to finished the testing.\n\nIt includes:\n\n\n\tjavadocs for the messages package\n\trename all classes that started with Lucene to Original.\n\trefactor the OriginalConfigHandler and OriginalQueryParserHelper\n\tremove the testcases used the ConfigHandler directly, since it was a duplication of the ones that use the QPHelper.\n\tnew FieldBostMapFCListener, to handle boost maps in a cleaner way\n\trename method in FieldConfigListener to buildFieldConfig\n\tnew DateResolutionFCListener to handle dateresolution in a cleaner way\n\tA fix to a problem I found in BoostQueryNodeProcessor\n\n\n ",
            "author": "Luis Alves",
            "id": "comment-12737752"
        },
        {
            "date": "2009-08-01T00:15:31+0000",
            "content": "It includes:\n\n\n\tjavadocs for the messages package\n\trename all classes that started with Lucene to Original.\n\trefactor the OriginalConfigHandler and OriginalQueryParserHelper\n\tremove the testcases using the ConfigHandler directly, since it was a duplication of the ones that use the QPHelper.\n\tnew FieldBostMapFCListener, to handle boost maps in a cleaner way\n\trename method in FieldConfigListener to buildFieldConfig\n\tnew DateResolutionFCListener to handle dateresolution in a cleaner way\n\tA fix to a problem I found in BoostQueryNodeProcessor\n\trename Parser to SyntaxParser\n\trename TextParser to OriginalSyntaxParser\n\n\n\nI think this is all I changed, but it might have some other minor changes. ",
            "author": "Luis Alves",
            "id": "comment-12737785"
        },
        {
            "date": "2009-08-01T00:20:15+0000",
            "content": "Hi Michael,\n\nI'm done with my changes, let me know if you find any wrong with the new patch. ",
            "author": "Luis Alves",
            "id": "comment-12737786"
        },
        {
            "date": "2009-08-01T00:22:36+0000",
            "content": " I created a block dependency on LUCENE-1486.\nThe \"new flexible query parser\" blocks LUCENE-1486. ",
            "author": "Luis Alves",
            "id": "comment-12737787"
        },
        {
            "date": "2009-08-01T01:00:20+0000",
            "content": "\nDepend on the \"new flexible query parser\" work. \n\nOK, didn't know there was another patch coming.... I guess I'll redo my verification then...\n ",
            "author": "Michael Busch",
            "id": "comment-12737800"
        },
        {
            "date": "2009-08-01T22:04:23+0000",
            "content": "Hi Michael,\n\n\nOK, didn't know there was another patch coming.... I guess I'll redo my verification then...\n\nI added that comment when I created a block dependency on LUCENE-1486.\n\nI'm still learning JIRA .\n\nI didn't know the comment was going to get posted in this thread,\nI was assuming LUCENE-1486 would get the comment. ",
            "author": "Luis Alves",
            "id": "comment-12737957"
        },
        {
            "date": "2009-08-01T22:08:19+0000",
            "content": "No worries.\n\nI just tested the latest patch. All tests (core, contrib, tag) pass and javadocs look good.\n\nI'll commit this in a day or two! ",
            "author": "Michael Busch",
            "id": "comment-12737958"
        },
        {
            "date": "2009-08-03T03:43:37+0000",
            "content": "Committed revision 800191.\n\nThank you very much, Adriano and Luis, for all your hard work! ",
            "author": "Michael Busch",
            "id": "comment-12738181"
        }
    ]
}