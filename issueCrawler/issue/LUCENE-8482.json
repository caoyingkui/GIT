{
    "id": "LUCENE-8482",
    "title": "Boosting by geo distance",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Fixed",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "New Feature"
    },
    "description": "Similarly to LUCENE-8340 it would be nice to have an easy and efficient way to fold geo distance into scoring formulas in order to boost by proximity.",
    "attachments": {
        "LUCENE-8482.patch": "https://issues.apache.org/jira/secure/attachment/12938784/LUCENE-8482.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16606827",
            "author": "Ignacio Vera",
            "content": "Attached a patch with the implementation of {LatLonPointDistanceFeatureQuery} that boost by proximity using scoring formulas. I hacked the geo bench to check performance and compare it with performance by using {LatLonPointSortField}:\n\nSorting QPS:\u00a037.86641987095685\n\nBoosting QPS:\u00a092.33101639139238\n\nOne note: In order to speed up the queries I have to sample very often the call to {setMinCompetitiveScore}.\u00a0\n\n\u00a0 ",
            "date": "2018-09-07T08:10:56+0000"
        },
        {
            "id": "comment-16607101",
            "author": "Adrien Grand",
            "content": "This looks promising! There seems to be an issue with multi-valued fields since in the 1D case, we can assume that values come in order to more easily find the closest one to the origin, but in this case, we probably need to look at every point to find the closest one. This doesn't invalidate your benchmarks though as they were run on a single-valued field.\n\nI'm wondering what is the costly bit that requires sampling for performance to be ok. For the record, when updating the iterator in setMinCompetitiveScore, we don't need to make sure that all documents will have a greater score: it's fine if some documents still have a score that is less than the minimum competitive score. Maybe we could try out to only check the bounding box in the points visitor in case the bottleneck is caused by haversin computations and the costly distance predicate. It means we will only fail to exclude documents that are within the bounding box of the circle but not in the circle itself. ",
            "date": "2018-09-07T13:02:06+0000"
        },
        {
            "id": "comment-16607123",
            "author": "Ignacio Vera",
            "content": "\u00a0\n\nI think I am doing already that, iterating through all values and choosing the one with smaller distance. I have rewriten the method for clarity:\n\n\u00a0\n\nprivate long selectValue(SortedNumericDocValues multiDocValues) throws IOException {\n  int count = multiDocValues.docValueCount();\n  long value = multiDocValues.nextValue();\n  if (count == 1) {\n    return value;\n  }\n  // compute exact sort key: avoid any asin() computations\n  double distance = getDistanceKeyFromEncoded(value);\n  for (int i = 1; i < count; ++i) {\n    long nextValue = multiDocValues.nextValue();\n    double nextDistance = getDistanceKeyFromEncoded(nextValue);\n    if (nextDistance < distance) {\n      distance = nextDistance;\n      value = nextValue;\n    }\n  }\n  return value;\n}\n\n\u00a0\n\nI will play with making the IntersectVisitor less restrictive to see how much it helps.\n\n\u00a0 ",
            "date": "2018-09-07T13:28:35+0000"
        },
        {
            "id": "comment-16607126",
            "author": "Adrien Grand",
            "content": "Indeed I had misread! ",
            "date": "2018-09-07T13:31:12+0000"
        },
        {
            "id": "comment-16607310",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 18s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 18s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 18s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 18s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 18s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 18s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  12m 42s \n  core in the patch passed.  \n\n\n  \n   \n  14m 44s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8482 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12938784/LUCENE-8482.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 6fbcda6 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/88/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/88/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-09-07T16:13:26+0000"
        },
        {
            "id": "comment-16608001",
            "author": "Ignacio Vera",
            "content": "New patch where we approximate using a box query which removes the need of sampling too often and increase the performance. On the benchmark we get:\n\nBoosting QPS: 105.94704774840949.\n\nOn the other hand, I was trying to develop a random test that compares the results from boosting and from sorting. This test sporadically fails because for points which are very close, distance is slightly different but the score is the same due to rounding errors. Here is a test that reproduces the situation:\n\npublic void testAlmostSame() throws IOException {\n  Directory dir = newDirectory();\n  RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n      .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n  double lat = 0.;\n  double lon = 0.;\n  for (int i=0; i< 10; i++) {\n    Document doc = new Document();\n    LatLonPoint point = new LatLonPoint(\"foo\", lat, lon);\n    doc.add(point);\n    LatLonDocValuesField docValue = new LatLonDocValuesField(\"foo\",lat, lon);\n    doc.add(docValue);\n    w.addDocument(doc);\n    lat = lat + 1e-8;\n  }\n\n  DirectoryReader reader = w.getReader();\n  IndexSearcher searcher = newSearcher(reader);\n\n  Query query = LatLonPoint.newDistanceFeatureQuery(\"foo\", 3, 10, 0, 200);\n  Sort sort = new Sort(LatLonDocValuesField.newDistanceSort(\"foo\", 10, 0));\n\n  TopDocs topDocs1 = searcher.search(query, 10);\n  TopDocs topDocs2 = searcher.search(new MatchAllDocsQuery(), 10, sort);\n  for (int i =0; i< 10; i++) {\n    assertTrue(topDocs1.scoreDocs[i].doc == topDocs2.scoreDocs[i].doc);\n  }\n  reader.close();\n  w.close();\n  dir.close();\n}\n\n\u00a0\n\nProbably this is\u00a0a expected behaviour of scoring formulas but we might want to document it.\n\n\u00a0 ",
            "date": "2018-09-08T10:23:37+0000"
        },
        {
            "id": "comment-16608054",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 21s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 37s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 37s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 37s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 37s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 37s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  31m 45s \n  core in the patch passed.  \n\n\n  \n   \n  37m  6s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8482 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12938946/LUCENE-8482.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 3b62f23 \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/90/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/90/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-09-08T13:47:32+0000"
        },
        {
            "id": "comment-16618121",
            "author": "Adrien Grand",
            "content": "New patch where we approximate using a box query which removes the need of sampling too often and increase the performance.\n\nWoohoo!\n\nGiven the positive effect of approximating using a box, I'm wondering what the performance is if we skip the byte[] comparisons in IntersectVisitor#visit() and all all doc IDs that are greater than the current doc ID?\n\nPatch looks good overall. I agree that binary searching is easier than inverting the distance computation. I'm not sure it's right to use EARTH_MEAN_RADIUS_METERS as an initial distance though, should it rather be something like EARTH_MEAN_RADIUS_METERS * Math.PI?\n\nOn the other hand, I was trying to develop a random test that compares the results from boosting and from sorting. This test sporadically fails because for points which are very close, distance is slightly different but the score is the same due to rounding errors.\n\nI think that's expected. If we want to build such a test, maybe we could sort by a custom FieldComparator (SortField allows to do that) that computes the expected scores as a float? This way the accuracy loss would be the same on both sides? ",
            "date": "2018-09-17T20:39:56+0000"
        },
        {
            "id": "comment-16620151",
            "author": "Ignacio Vera",
            "content": "Attached a new patch with the following changes:\n\n1) Change maxDistance to\u00a0 EARTH_MEAN_RADIUS_METERS * Math.PI. You are right, it should be the surface distance.\n\n2) Added a new test that compares sorting.\n\nI have tried removing the byte[] comparison in\u00a0 IntersectVisitor#visit() and there was a\u00a0small decrease in performance. ",
            "date": "2018-09-19T06:08:05+0000"
        },
        {
            "id": "comment-16620217",
            "author": "Adrien Grand",
            "content": "+1 patch looks great. One minor issue with the explanation string: it contains \"abs(value - origin)\" which doesn't make sense here, let's say something like \"distance\" instead? Also it might be useful to add the distance to the sub explanations?\n\nThanks for also testing with a lossy bounding box. ",
            "date": "2018-09-19T07:16:45+0000"
        },
        {
            "id": "comment-16620317",
            "author": "ASF subversion and git services",
            "content": "Commit 10060a6237ccd2785f6cbe248ca7254028f8eb04 in lucene-solr's branch refs/heads/master from iverase\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=10060a6 ]\n\nLUCENE-8482: Added feature query in LatLonPoint to boost results by distance ",
            "date": "2018-09-19T08:50:10+0000"
        },
        {
            "id": "comment-16620321",
            "author": "Ignacio Vera",
            "content": "Thanks Adrien Grand, latest recommendations where added to the commit. ",
            "date": "2018-09-19T08:52:20+0000"
        },
        {
            "id": "comment-16621517",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n -1 \n  patch  \n   0m  8s \n  LUCENE-8482 does not apply to master. Rebase required? Wrong Branch? See https://wiki.apache.org/lucene-java/HowToContribute#Contributing_your_work for help.  \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8482 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12940356/LUCENE-8482.patch \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/95/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-09-20T05:04:41+0000"
        }
    ]
}