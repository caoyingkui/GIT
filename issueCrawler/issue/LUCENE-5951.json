{
    "id": "LUCENE-5951",
    "title": "Detect when index is on SSD and set dynamic defaults",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "E.g. ConcurrentMergeScheduler should default maxMergeThreads to 3 if it's on SSD and 1 if it's on spinning disks.\n\nI think the new NIO2 APIs can let us figure out which device we are mounted on, and from there maybe we can do os-specific stuff e.g. look at  /sys/block/dev/queue/rotational to see if it's spinning storage or not ...",
    "attachments": {
        "LUCENE-5951.patch": "https://issues.apache.org/jira/secure/attachment/12687707/LUCENE-5951.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14249665",
            "author": "Michael McCandless",
            "content": "Patch w/ tests.\n\nAfter I told Rob it's impossible to detect if a Path is backed by an\nSSD with pure Java, he of course went and did it \n\nI added his isSSD method to IOUtils: it's a rough, Linux-only (for\nnow) method to determine if a Path is backed by an SSD (thank you\nRob!).\n\nThen I fixed CMS to have dynamic defaults, so that the first time\nmerge is invoked, it checks the writer's directory.  If it's on an SSD,\nit uses the pre LUCENE-4661 defaults (good for SSDs), else it uses the\ncurrent defaults (good for spinning disks).  It also logs this to infoStream\nso we can use that to see what it did. ",
            "date": "2014-12-17T09:58:03+0000"
        },
        {
            "id": "comment-14249785",
            "author": "Adrien Grand",
            "content": "+1 ",
            "date": "2014-12-17T12:29:47+0000"
        },
        {
            "id": "comment-14249820",
            "author": "Shalin Shekhar Mangar",
            "content": "+1\n\nVery nice! ",
            "date": "2014-12-17T13:06:29+0000"
        },
        {
            "id": "comment-14249965",
            "author": "Robert Muir",
            "content": "Try to improve the SSD detector more to make it safe to use for this purpose. It was mostly a joke and really ... not good code. \n\n\n\tfix contract to throw IOException when incoming path does not exist. This is important not to mask.\n\tfor our internal heuristics, we could easily trigger SecurityException / AIOOBE, we are doing things that are not guaranteed at all. So those are important to mask.\n\tdon't use Files.readAllBytes, that method is too dangerous in these heuristics. Just read one byte.\n\n\n\nWe should improve the getDeviceName too, but its less critical. ",
            "date": "2014-12-17T15:17:58+0000"
        },
        {
            "id": "comment-14250053",
            "author": "Michael McCandless",
            "content": "New patch, renaming to \"spins\", and also unwrapping FileSwitchDir, and returning \"false\" for RAMDirectory. ",
            "date": "2014-12-17T16:13:24+0000"
        },
        {
            "id": "comment-14250059",
            "author": "Robert Muir",
            "content": "Thanks, i will take another crack at FSDir logic. we should be able to handle tmpfs etc better here (likely on mac, too). ",
            "date": "2014-12-17T16:20:01+0000"
        },
        {
            "id": "comment-14250219",
            "author": "Hoss Man",
            "content": "\n+  public static int AUTO_DETECT_MERGES_AND_THREADS = -1;\n\n\n...that's suppose to be a final (sentinel value) correct? nothing should be allowed modify it at run time?\n\n\n+  public synchronized void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {\n+    if (maxMergeCount == AUTO_DETECT_MERGES_AND_THREADS && maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n+      // OK\n+      maxMergeCount = AUTO_DETECT_MERGES_AND_THREADS;\n+      maxThreadCount = AUTO_DETECT_MERGES_AND_THREADS;\n\n\n\n...is that suppose to be setting this.maxMergeCount and this.maxThreadCount ? ... it looks like it it's just a No-Op (and this.maxMergeCount and this.maxThreadCount never get set in this case?)\n\n\n+  public static boolean spins(Path path) throws IOException {\n\n\n\n...is it worth using a terinary enum (or \"nullable \"Boolean\") here to track the diff between:\n\n\tconfident it's a spinning disk\n\tconfident it's not a spinning disk\n\tunknown what type of storage this is\n\n\n\n...that way we can make the default behavior of CMS conservative, and only be aggressive if we are confident it's not-spinning; but app devs can be more aggressive \u2013 call the same spins() utility and only use conservative values if they are confident it's a spinning disk, otherwise call setMaxMergesAndThreads with higher values. ",
            "date": "2014-12-17T18:03:05+0000"
        },
        {
            "id": "comment-14250241",
            "author": "Robert Muir",
            "content": "I dont think we should make things complicated for app developers. We are not writing a generic spins() method for developers, its a lucene.internal method for good defaults. ",
            "date": "2014-12-17T18:15:15+0000"
        },
        {
            "id": "comment-14250243",
            "author": "Michael McCandless",
            "content": "...that's suppose to be a final (sentinel value) correct? nothing should be allowed modify it at run time?\n\nWhoa, nice catch!  I'll fix.\n\n. it looks like it it's just a No-Op (\n\nGak, good catch   I'll add a test that exposes this then fix it. ",
            "date": "2014-12-17T18:16:23+0000"
        },
        {
            "id": "comment-14250271",
            "author": "Michael McCandless",
            "content": "New patch fixing Hoss's issues (thanks!). ",
            "date": "2014-12-17T18:29:30+0000"
        },
        {
            "id": "comment-14250326",
            "author": "Robert Muir",
            "content": "I cleaned up the code to remove the hashmap, not try to lookup 'rotational' for obviously bogus names (like nfs), return false for tmpfs, etc. ",
            "date": "2014-12-17T19:07:44+0000"
        },
        {
            "id": "comment-14250327",
            "author": "Hoss Man",
            "content": "\n+    for (FileStore store : FileSystems.getDefault().getFileStores()) {\n+      String desc = store.toString();\n+      int start = desc.lastIndexOf('(');\n+      int end = desc.indexOf(')', start);\n+      mountToDevice.put(desc.substring(0, start-1), desc.substring(start+1, end));\n+    }\n\n\n\n...I don't see anything in the javadocs for FileStore making any guarantees about the toString \u2013 so the results of these lastIndexOf and indexOf calls should probably have bounds checks to prevent IOOBE from substring. (either that or just catch the IOOBE and give up)\n\n\n+        if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n+          devName = devName.substring(0, devName.length()-1);\n\n\n\n...what about people with lots of partitions?  ie: \"/dev/sda42\" ",
            "date": "2014-12-17T19:07:45+0000"
        },
        {
            "id": "comment-14250332",
            "author": "Robert Muir",
            "content": "\n...I don't see anything in the javadocs for FileStore making any guarantees about the toString \u2013 so the results of these lastIndexOf and indexOf calls should probably have bounds checks to prevent IOOBE from substring. (either that or just catch the IOOBE and give up)\n\nMaybe you missed the try-catch when looking at the patch. \n\n\n} catch (Exception ioe) {\n  // our crazy heuristics can easily trigger SecurityException, AIOOBE, etc ...\n  return true;\n}\n\n\n\n\n...what about people with lots of partitions? ie: \"/dev/sda42\"\n\nMaybe if you quoted more of the context, you would see this was in a loop? ",
            "date": "2014-12-17T19:09:09+0000"
        },
        {
            "id": "comment-14250333",
            "author": "Uwe Schindler",
            "content": "+1\nThe heavy funny heuristics method is a masterpiece of coding in contrast to Hadoop's detection. I am so happy that it does not exec \"df\" or \"mount\" commands! Many thanks  Java 7 is cool! ",
            "date": "2014-12-17T19:12:06+0000"
        },
        {
            "id": "comment-14250600",
            "author": "Hoss Man",
            "content": "Maybe you missed the try-catch when looking at the patch. \n\nthat still seems sketchy because it's only in the spins() method ... it's going to be trappy if/when this code gets refactored and getDeviceName is called from somewhere else.  why not just include some basic exception handling in getDeviceName as well?\n\nMaybe if you quoted more of the context, you would see this was in a loop?\n\nI did see that, but i didn't realize the purpose was to chomp away at individual digits in the path until it resolved as a valid file...\n\ntoo much voodoo for me, i'll shut up now. ",
            "date": "2014-12-17T21:33:08+0000"
        },
        {
            "id": "comment-14250629",
            "author": "Robert Muir",
            "content": "The method is private. its not getting called from anywhere else. when an exception strikes we need it, so that it causes the whole thing to return true.  it also has a comment above it '// these are hacks that are not guaranteed'. ",
            "date": "2014-12-17T21:49:00+0000"
        },
        {
            "id": "comment-14250635",
            "author": "Robert Muir",
            "content": "\nI did see that, but i didn't realize the purpose was to chomp away at individual digits in the path until it resolved as a valid file...\n\nIt has this comment:\n\n      // tear away partition numbers until we find it.\n\n ",
            "date": "2014-12-17T21:51:28+0000"
        },
        {
            "id": "comment-14251144",
            "author": "Robert Muir",
            "content": "I added tests to the previous patch.\n\nI only pulled the main logic into a separate package-private method (spinsLinux) so we can test all logic with mocks directly on all operating systems and not mask any exceptions or problems.\n ",
            "date": "2014-12-18T04:11:20+0000"
        },
        {
            "id": "comment-14251556",
            "author": "Michael McCandless",
            "content": "Thanks Rob, I love the new tests \n\nI'll revert my over-zealous changes to CreateIndexTask (just fix to use the new default) and commit soon ... ",
            "date": "2014-12-18T11:45:36+0000"
        },
        {
            "id": "comment-14251626",
            "author": "Uwe Schindler",
            "content": "I am interested to see, if the detection works correctly on Policeman Jenkins. This machine has an SSD, so what is the best way to see from test output if it detected an SSD? To me the algorithm looks correct!\n\n\nserv1:~# mount\n/dev/md1 on / type ext3 (rw)\nproc on /proc type proc (rw)\nsysfs on /sys type sysfs (rw,noexec,nosuid,nodev)\nnone on /sys/fs/fuse/connections type fusectl (rw)\nnone on /sys/kernel/debug type debugfs (rw)\nnone on /sys/kernel/security type securityfs (rw)\nudev on /dev type devtmpfs (rw,mode=0755)\ndevpts on /dev/pts type devpts (rw,noexec,nosuid,gid=5,mode=0620)\ntmpfs on /run type tmpfs (rw,noexec,nosuid,size=10%,mode=0755)\nnone on /run/lock type tmpfs (rw,noexec,nosuid,nodev,size=5242880)\nnone on /run/shm type tmpfs (rw,nosuid,nodev)\n/dev/md0 on /boot type ext2 (rw)\n/dev/sdc1 on /mnt/ssd type ext4 (rw,noatime,discard)\nserv1:~# cat /sys/block/sda/queue/rotational\n1\nserv1:~# cat /sys/block/sdb/queue/rotational\n1\nserv1:~# cat /sys/block/sdc/queue/rotational\n0\nserv1:~#\n\n\n\nDYI: The Worksspace is on /mnt/ssd. ",
            "date": "2014-12-18T13:11:31+0000"
        },
        {
            "id": "comment-14251642",
            "author": "Uwe Schindler",
            "content": "I only found out that our detection may not work with LVM or MD devices, unfortunately I cannot try it out:\n\nhttp://lkml.iu.edu/hypermail/linux/kernel/1202.2/01578.html\n\nTheoretically, the software RAID should pass this flag down unmodified, if all devices are rotational or not. But it seems, it doesn't.\n\nFor the policeman machine, sda and sdb (both rotational) together create an md0 mirror RAID device, which reports rotational=1. This is good, but I am not sure if this works if there are really SSDs as both raid devives (some people do this using RAID0 devices to speed up sequential reads). Maybe somebody else can report back, but I think the linux kernel puts rotational=1 for RAID devices as a fixed value or this has changed in the meantime. ",
            "date": "2014-12-18T13:23:17+0000"
        },
        {
            "id": "comment-14251676",
            "author": "Robert Muir",
            "content": "Then those are bugs in the linux kernel. its not our problem.\n\nthe worst that happens, is you get the same behavior as today. People seem to have difficulty understanding this. ",
            "date": "2014-12-18T14:17:24+0000"
        },
        {
            "id": "comment-14251690",
            "author": "Uwe Schindler",
            "content": "Robert Muir: I just wanted to be sure that the inverse does not happen: So a RAID device of spinning disk suddenly returning non-spinning because of another bug in linux. My test has verified that it returns rotational=1 for my example - so I am happy. I just wanted to write this down here to have a reference that someone looked at it.\n\nThere are other things to mention: the ssd/rotational flag also does not work correctly in VMware's VShere or VirtualBOX unless the creator of the virtual machine selects \"SSD\" as virtual device type (in VirtualBox you can do this). I created here a virtual machine with an virtual SSD sitting on a spinning disk... So we should document this that the whole detection only works correct, if you use raw disks on metal hardware. People should also be aware that their VSphere infrastructure is configured correctly.  ",
            "date": "2014-12-18T14:26:19+0000"
        },
        {
            "id": "comment-14251695",
            "author": "Robert Muir",
            "content": "the worst that happens, is you get the same behavior as today. ",
            "date": "2014-12-18T14:30:44+0000"
        },
        {
            "id": "comment-14251783",
            "author": "Uwe Schindler",
            "content": "If you have a spinning disk and you falsefully detect it as an SSD then its a problem... ",
            "date": "2014-12-18T15:21:09+0000"
        },
        {
            "id": "comment-14251833",
            "author": "Robert Muir",
            "content": "I dont think its really a problem at all. its a heuristic for defaults. If there are bugs in the linux kernel, or virtualizers, or device drivers, its not our duty to fix that. Please, complain on the linux kernel list instead.\n\ntoday its a far bigger problem that we always falsely assume you have a spinning disk, and hurt performance on any modern hardware.\n\nUsers can always set their merge threads etc explicitly.\n ",
            "date": "2014-12-18T15:52:48+0000"
        },
        {
            "id": "comment-14251878",
            "author": "Uwe Schindler",
            "content": "Sorry Robert, it is my personal decision to comment on this. It was not a complaint, just a notice, so anybody who wants to lookup more on this issue, to get the relevant information.\n\nMy problem was just that some user with a misconfigured system could get sudenly the SSD optimization on a spinning disk and then his IO system gives up  So it should be documented and I just ask for some hints in the documentation, that one should take care to configure his virtual machines correctly.\n\nI DON'T COMPLAIN! But now I complain: Why are you attacking me? I just bring in here useful items that might help others. ",
            "date": "2014-12-18T16:34:35+0000"
        },
        {
            "id": "comment-14252157",
            "author": "Michael McCandless",
            "content": "Uwe Schindler how about this disclaimer in CMS's top javadocs?\n\n\n *  <p>This class attempts to detect whether the index is\n *  on rotational storage (traditional hard drive) or not\n *  (e.g. solid-state disk) and changes the default max merge\n *  and thread count accordingly.  This detection is currently\n *  Linux-only, and relies on the OS to put the right value\n *  into /sys/block/&lt;dev&gt;/block/rotational.</p>\n\n ",
            "date": "2014-12-18T20:06:30+0000"
        },
        {
            "id": "comment-14253144",
            "author": "Uwe Schindler",
            "content": "Hi Mike,\nI am OK with that. I would only add one other addition: \"For all other operating systems it currently assumes a rotational disk for backwards compatibility.\"\nAnother idea: we should maybe add special convenience setter to set optimal settings. By that, you don't rely on the auto detection and still can set \"automatic\" settings for both types of drives:\n\n\tsetMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) (expert)\n\tsetDefaultMergesAndThreads(boolean optimizeForNonRotational) (convenience)\n\n\n\nUwe ",
            "date": "2014-12-19T08:29:11+0000"
        },
        {
            "id": "comment-14253188",
            "author": "Michael McCandless",
            "content": "New patch, adding Uwe's sentence to the javadocs, and a new setDefaultMaxMergesAndThreads(boolean spins) method.  I think it's ready. ",
            "date": "2014-12-19T09:43:32+0000"
        },
        {
            "id": "comment-14253278",
            "author": "Uwe Schindler",
            "content": "Yeah, looks good. Maybe just add a reference to the new method in the introduction:\n\n\nTo enable default settings for spinning or solid state disks for other\noperating systems, use {@link #setDefaultMaxMergesAnThreads(boolean)}.\n\n\nI am currently investigating detection for windows, but its unlikely that we can detect SSDs there without native code or spawning processes (no file system with device data). But I think, for MacOSX there may be a similar solution? I'll investigate. ",
            "date": "2014-12-19T11:06:53+0000"
        },
        {
            "id": "comment-14253299",
            "author": "Uwe Schindler",
            "content": "I have here another item on the TODO list: I am currently investigating the new Linux Filesystem BTRFS, which might also bring some cool things for Lucene. Some Linux distribs now starting to make it as a default file system (like OpenSUSE, Ubuntu not yet - but soon). BTRFS is more like ZFS from Slowlaris, so the mount table is no longer giving you all information (no raw devices anymore just some symbolic \"volume\" name), because you have now \"sub-filesystems\" that you can mount anywhere. Of course, the current code cannot handle that, but we might improve. Correction: this is not a problem, the device name of the  mount is still the raw device. The sub volume is given as parameter (-o subvol=xxx to mount/fstab. So the current code should be able to handle that.\n\nThe same applies to \"bind\" mounts, I prefer in some situations. Bind mounts are those where you mount part of one file system at another place (like a symlink, but more \"hard\"). ",
            "date": "2014-12-19T11:31:19+0000"
        },
        {
            "id": "comment-14253307",
            "author": "Michael McCandless",
            "content": "Actually, I run BTRFS on my current dev box.  It is a symlink, but spins() gets through that:\n\n\n  mike@haswell:/$ df -h .\n  Filesystem                    Size  Used Avail Use% Mounted on\n  /dev/mapper/haswell--vg-root  466G  138G  324G  30% /\n  mike@haswell:/$ ls -l /dev/mapper/haswell--vg-root \n  lrwxrwxrwx 1 root root 7 Dec 14 17:08 /dev/mapper/haswell--vg-root -> ../dm-0\n  mike@haswell:/$ cat /sys/block/dm-0/queue/rotational \n  0\n\n\n\nTo verify spins() is working, I just run:\n\n\n  ant test -Dtestcase=TestConcurrentMergeScheduler -Dtestmethod=testDynamicDefaults -Dtests.verbose=true -Dtests.directory=MMapDirectory\n\n\n\nand then look for the line where CMS logs the \"spins\" result:\n\n\n [junit4]   1> CMS 1 [Fri Dec 19 16:36:47 UZT 2014; main]: initMaxMergesAndThreads spins=false maxThreadCount=3 maxMergeCount=5\n\n ",
            "date": "2014-12-19T11:37:57+0000"
        },
        {
            "id": "comment-14253308",
            "author": "Michael McCandless",
            "content": "Maybe just add a reference to the new method in the introduction:\n\nI'll add that! ",
            "date": "2014-12-19T11:38:44+0000"
        },
        {
            "id": "comment-14253351",
            "author": "Uwe Schindler",
            "content": "Thanks Mike! I already changed my original message because the raw device still appears in mount output, the virtual subvolume is part of the mount options. So our code works with BTRFS. I was about to startup another virtual machine.\n\nI just want to list all the \"special\" cases here, so when people open bug reports we already know where there might be problems. And we also know what our customers might ask \n\n+1 to commit! ",
            "date": "2014-12-19T12:42:26+0000"
        },
        {
            "id": "comment-14253541",
            "author": "ASF subversion and git services",
            "content": "Commit 1646775 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1646775 ]\n\nLUCENE-5951: try to detect if index is on an SSD and default CMS's settings accordingly ",
            "date": "2014-12-19T15:36:57+0000"
        },
        {
            "id": "comment-14253553",
            "author": "ASF subversion and git services",
            "content": "Commit 1646778 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1646778 ]\n\nLUCENE-5951: try to detect if index is on an SSD and default CMS's settings accordingly ",
            "date": "2014-12-19T15:44:31+0000"
        },
        {
            "id": "comment-14253618",
            "author": "ASF subversion and git services",
            "content": "Commit 1646791 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1646791 ]\n\nLUCENE-5951: these test cases can't run on Windows ",
            "date": "2014-12-19T16:40:59+0000"
        },
        {
            "id": "comment-14253620",
            "author": "ASF subversion and git services",
            "content": "Commit 1646792 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1646792 ]\n\nLUCENE-5951: these test cases can't run on Windows ",
            "date": "2014-12-19T16:41:22+0000"
        },
        {
            "id": "comment-14332618",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:59+0000"
        }
    ]
}