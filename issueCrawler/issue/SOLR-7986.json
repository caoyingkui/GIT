{
    "id": "SOLR-7986",
    "title": "JDBC Driver for SQL Interface",
    "details": {
        "components": [
            "clients - java"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "This ticket is to create a JDBC Driver (thin client) for the new SQL interface (SOLR-7560). As part of this ticket a driver will be added to the Solrj libary under the package: org.apache.solr.client.solrj.io.sql\n\nInitial implementation will include basic Driver, Connection, Statement and ResultSet implementations.\n\nFuture releases can build on this implementation to support a wide range of JDBC clients and tools.\n\nSyntax using parallel Map/Reduce for aggregations:\n\nProperties props = new Properties();\nprops.put(\"aggregationMode\", \"map_reduce\");\nprops.put(\"numWorkers\", \"10\");\nConnection con = DriverManager.getConnection(\"jdbc:solr://<zkhost:port>?collection=<collection>\", props);\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(\"select a, sum(b) from tablex group by a having sum(b) > 100\");\nwhile(rs.next()) {\n    String a = rs.getString(\"a\");\n    double sumB = rs.getDouble(\"sum(b)\");\n}\n\n \n\nSyntax using JSON facet API for aggregations:\n\n\nProperties props = new Properties();\nprops.put(\"aggregationMode\", \"facet\");\nConnection con = DriverManager.getConnection(\"jdbc:solr://<zkhost:port>?collection=<collection>\", props);\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(\"select a, sum(b) from tablex group by a having sum(b) > 100\");\nwhile(rs.next()) {\n    String a = rs.getString(\"a\");\n    double sumB = rs.getDouble(\"sum(b)\");\n}",
    "attachments": {
        "SOLR-7986.patch": "https://issues.apache.org/jira/secure/attachment/12755135/SOLR-7986.patch",
        "SOLR-7986-SPI.patch": "https://issues.apache.org/jira/secure/attachment/12755463/SOLR-7986-SPI.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-28T01:55:21+0000",
            "author": "Joel Bernstein",
            "content": "Some thoughts on the design:\n\n1) The Connection class should be SolrCloud aware. This means that the Database it connects to is a SolrCloud Collection with each node running the /sql handler. This Collection will be the facade for the distributed database. SQL queries can refer to Tables (Collections) that reside in the same ZooKeeper or a remote Zookeeper.\n\n2) The Statement and ResultSet can be a wrapper around a SolrStream class. The SolrStream class can be used to send SQL request to the /sql handler. \n\n3) The Statement will open and close the SolrStream.\n\n4) The ResultSet will iterate the Tuples from the SolrStream.\n ",
            "id": "comment-14717899"
        },
        {
            "date": "2015-09-10T14:04:08+0000",
            "author": "Joel Bernstein",
            "content": "Patch with initial classes and skeleton methods.\n\nVery few of these methods will actually be implemented is the ticket. ",
            "id": "comment-14738785"
        },
        {
            "date": "2015-09-10T16:18:13+0000",
            "author": "Joel Bernstein",
            "content": "First basic implementation. No tests, so I have no idea if this works.\n\nThe switch between Map/Reduce and JSON facet API for aggregation would get set when the Connection is created and can't be changed for a connection currently.\n\nThis is not as flexible as I would like, but for tools like Tableau that's how it will have to work.\n\nFor more programmable clients we can add a switch to the ConnectionImpl, to switch back and forth. ",
            "id": "comment-14739035"
        },
        {
            "date": "2015-09-10T16:55:24+0000",
            "author": "Joel Bernstein",
            "content": "New patch handles client caching properly. ",
            "id": "comment-14739110"
        },
        {
            "date": "2015-09-10T17:05:44+0000",
            "author": "Joel Bernstein",
            "content": "New patch that registers the driver properly. ",
            "id": "comment-14739133"
        },
        {
            "date": "2015-09-10T17:25:27+0000",
            "author": "Uwe Schindler",
            "content": "For a full compliant JDBC driver you should also add a META-INF resource, so it can be loaded by DriverManager without doing the forName() on the base class. By that you can call the driver without any initialization on the Solr-specific driver, just by providing the URL to DriverManager. ",
            "id": "comment-14739189"
        },
        {
            "date": "2015-09-10T17:27:46+0000",
            "author": "Uwe Schindler",
            "content": "See http://docs.oracle.com/javase/7/docs/api/java/sql/DriverManager.html introduction. ",
            "id": "comment-14739192"
        },
        {
            "date": "2015-09-10T17:37:34+0000",
            "author": "Joel Bernstein",
            "content": "Thanks, I'll take a look! ",
            "id": "comment-14739208"
        },
        {
            "date": "2015-09-10T18:20:28+0000",
            "author": "Joel Bernstein",
            "content": "New patch with cleaned up caching. ",
            "id": "comment-14739280"
        },
        {
            "date": "2015-09-11T16:45:05+0000",
            "author": "Joel Bernstein",
            "content": "Patch which includes the first set of tests. ",
            "id": "comment-14741112"
        },
        {
            "date": "2015-09-11T17:54:33+0000",
            "author": "Joel Bernstein",
            "content": "New patch that throws UnsupportedOperationException from appropriate methods. ",
            "id": "comment-14741238"
        },
        {
            "date": "2015-09-11T18:06:41+0000",
            "author": "Joel Bernstein",
            "content": "Uwe Schindler ",
            "id": "comment-14741264"
        },
        {
            "date": "2015-09-11T18:09:44+0000",
            "author": "Joel Bernstein",
            "content": "Uwe, I was reading the spec on the META-INF resource and I'm not quite sure what's the right way to add a META-INF service to the Solrj jar. I'll do so more research but was wondering if you already knew the right approach? ",
            "id": "comment-14741269"
        },
        {
            "date": "2015-09-11T18:20:41+0000",
            "author": "Uwe Schindler",
            "content": "Same as adding codecs to Lucene. Just create META-INF/services folder inside resources and add a file named with the abstract Driver class (java.sql.Driver - in Lucene its similar: org.apache.lucene.codecs.Codec as filename). Inside the file add the License header using # line prefix plus a single line with the implementation class: org.apache.solr.client.solrj.io.sql.DriverImpl). This file must of course be added to the solrj.jar file. \n\nI can do that for you. I will post a separate patch. Once you have done this, you can remove the following line from the docs and possible tests:\n\n\nClass.forName(\"org.apache.solr.client.solrj.io.sql.DriverImpl\").newInstance();\n\n\n\nThis is no longer needed then. If you call DriverManager.getConnection(), the SPI framework behind the SQL infratsructure scans classpath for all META-INF/services/java.sql.Driver files and loads the classes inside as instances and register them as Driver. Afterwards it can resolve the connection URI. ",
            "id": "comment-14741281"
        },
        {
            "date": "2015-09-11T18:28:49+0000",
            "author": "Uwe Schindler",
            "content": "Patch to add the JDBC Service Provider.\n\nOne thing: I think you can now remove the DriverManager.registerDriver from the constructor, but I am not sure. Just try it out.\n\nMost \"legacy\" drivers do this in the static initialization block - the newInstance() your had confused me... ",
            "id": "comment-14741296"
        },
        {
            "date": "2015-09-11T18:34:45+0000",
            "author": "Joel Bernstein",
            "content": "Thanks for the patch Uwe! I'll play around with DriverManager.registerDriver and see if it can just be removed. And if not I'll move it to a static initialization block.  ",
            "id": "comment-14741311"
        },
        {
            "date": "2015-09-11T18:41:09+0000",
            "author": "Uwe Schindler",
            "content": "Most drivers I have seen (e.g. Sybase, Oracle) do both. Inside static initialization, so Java 5 code that does not do SPI can still load it (does not affect us, because we require minimum Java 7). Java 7+ for sure always loads via SPI. It may only fail when you have fckd up your classloaders, because it checks context class loader.\n\nSo I would do both: Add the SPI control file and also add the register call to {{static { }}} block. The people can fall back to simple class.forName()\n\nExample mysql: This is static init for legacy users with Java 5: http://grepcode.com/file/repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.35/com/mysql/jdbc/Driver.java#47\n\nThe MySQL driver currently has no META-INF because it is still on Java 5.\n\nDon't forget to have a public ctor, too! Otherwise the SPI parser cannot create the driver. ",
            "id": "comment-14741332"
        },
        {
            "date": "2015-09-11T18:55:05+0000",
            "author": "Uwe Schindler",
            "content": "One thing about your Driver:\n\nAccording to spec, the driver should return \"null\"  when calling the method connect(), if the URL does not fit the driver. So basically do: if (!acceptURL(url)) return null;\nThis is made for very early consumers that rely on that behaviour, see docs:\n\n\nAttempts to make a database connection to the given URL. The driver should return \"null\" if it realizes it is the wrong kind of driver to connect to the given URL. This will be common, as when the JDBC driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn.\nThe driver should throw an SQLException if it is the right driver to connect to the given URL but has trouble connecting to the database.\nThe java.util.Properties argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least \"user\" and \"password\" properties should be included in the Properties object.\n\nYour driver will completely fail with string parsing exceptions, I assume. This will prevent users with for example Oracle drivers on classpath, too, to connect to their database - fatal failure! ",
            "id": "comment-14741368"
        },
        {
            "date": "2015-09-11T18:57:44+0000",
            "author": "Joel Bernstein",
            "content": "Ok, thanks! ",
            "id": "comment-14741377"
        },
        {
            "date": "2015-09-11T19:02:50+0000",
            "author": "Joel Bernstein",
            "content": "New patch that includes Uwe's patch (which worked perfectly). Also the connect() method now returns null if the url is not accepted.\n\nThe call to DriverManager.registerDriver has been moved to a static initializer. I tried removing this call altogether but the driver won't load without it.  ",
            "id": "comment-14741382"
        },
        {
            "date": "2015-09-11T19:09:28+0000",
            "author": "Uwe Schindler",
            "content": "Looks good. So I assume it works without the Class#forName() now.\n\nThe reason why you must have the static initializer is seen in source code: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/sql/DriverManager.java#510\n\nAs you see it just iterates the driver instances, but does not register them. This was not 100% clear from the docs. ",
            "id": "comment-14741396"
        },
        {
            "date": "2015-09-11T19:27:30+0000",
            "author": "Joel Bernstein",
            "content": "Just tested without the META-INF resource and it does work with Class.forName. ",
            "id": "comment-14741418"
        },
        {
            "date": "2015-09-17T01:49:38+0000",
            "author": "Joel Bernstein",
            "content": "Uwe Schindler, I ran into a forbidden API's issue in Driver.getParentLogger() which returns java.util.logging.Logger. Any thought's on how to handle this? ",
            "id": "comment-14791433"
        },
        {
            "date": "2015-09-17T02:09:48+0000",
            "author": "Joel Bernstein",
            "content": "I found the @SuppressForbidden annotation which allowed precommitt to pass. Currently this method is not implemented so java.util.logging.Logger is never instantiated. ",
            "id": "comment-14791461"
        },
        {
            "date": "2015-09-17T02:10:52+0000",
            "author": "Joel Bernstein",
            "content": "Patch that passes precommit ",
            "id": "comment-14791464"
        },
        {
            "date": "2015-09-17T06:51:49+0000",
            "author": "Uwe Schindler",
            "content": "Hi Joel,\nyes, @SuppressForbidden is the way to go. Choose the right one (there is one in Lucene and one in Solrj/Solr). I'd use the latter one, otherwise you add a dependency to Lucene to Solrj.\nI think the forbidden API was added to make sure, we only use SLF4J, see SOLR-7825. ",
            "id": "comment-14791671"
        },
        {
            "date": "2015-09-17T22:58:10+0000",
            "author": "Joel Bernstein",
            "content": "Thanks Uwe, I believe I've got the right SuppressForbidden. ",
            "id": "comment-14804674"
        },
        {
            "date": "2015-09-17T23:02:33+0000",
            "author": "Joel Bernstein",
            "content": "Just wrote a small test client with the JDBC Driver and it worked well. I think this is far enough along to commit to trunk. Only a very small part of the JDBC spec is implemented but it's already useful and I think it provides a good foundation for future work.  ",
            "id": "comment-14804680"
        },
        {
            "date": "2015-09-18T14:17:41+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1703867 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1703867 ]\n\nSOLR-7986: JDBC Driver for SQL Interface ",
            "id": "comment-14875671"
        },
        {
            "date": "2015-09-18T14:30:46+0000",
            "author": "Joel Bernstein",
            "content": "Thanks Uwe Schindler for your help on this ticket! ",
            "id": "comment-14875690"
        },
        {
            "date": "2015-09-22T23:38:46+0000",
            "author": "Susheel Kumar",
            "content": "Hi Joel,\n\nI added locally 3 bad connection string tests. Please let me know your opinion before I provide a patch\na) The first below test \"testConnectionStringWithMissingZKHost\" throws SolrException than SQLException. Is that right behaviour. Just wanted to confirm.\nb) Is it okay to add more public multiple tests method OR have one test method and calling various private test methods inside it. Any preference since I see the later is more common .\nc) The test  \"testConnectionStringWithWrongCollection\" goes thru various retries before it fails. Below the console messages. Is that right behavior. \n\nThanks,\nSusheel\n\n\n\n  @Test\n  public void testConnectionStringWithMissingZKHost() throws Exception  \n{\n   //should throw Solr exception as per current design\n    exception.expect(SolrException.class);\n    String zkHost = zkServer.getZkAddress();\n    Properties props = new Properties();\n    //bad connection string: missing zkHost\n   Connection con = DriverManager.getConnection(\"jdbc:solr://\"  + \"?collection=collection1\", props);\n  }\n\n  @Test\n  public void testConnectionStringJumbled() throws Exception  \n{\n    //should throw SQL exception\n     exception.expect(SQLException.class);\n     Properties props = new Properties();\n     String zkHost = zkServer.getZkAddress();\n     //Bad connection string: string jumbled   \n     Connection con = DriverManager.getConnection(\"solr:jdbc://\" + zkHost + \"?collection=collection1\", props);\n   }\n\n  @Test\n  public void testConnectionStringWithWrongCollection() throws Exception  \n{\n     //should throw SQL exception\n     exception.expect(SQLException.class);\n     Properties props = new Properties();\n     String zkHost = zkServer.getZkAddress();\n     //Bad connection string: wrong collection name   \n     Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=mycollection\", props);\n     Statement stmt = con.createStatement();\n     ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from mycollection order by a_i desc limit 2\");\n    \n   }\n \n\ntestConnectionStringWithWrongCollection console messages.\n\nSep 22, 2015 5:26:28 PM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\nWARNING: Will linger awaiting termination of 6 leaked thread(s).\n95116 WARN  (TEST-JdbcTest.testConnectionStringWithWrongCollection-seed#[8ED3B3162E3AB02D]-SendThread(127.0.0.1:55137)) [n:127.0.0.1:55092_cb_i%2Fof c:collection1 s:shard1 r:core_node4 x:collection1] o.a.z.ClientCnxn Session 0x14ff6f24fcf0012 for server null, unexpected error, closing socket connection and attempting reconnect\njava.net.ConnectException: Connection refused\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n\tat sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\n\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\n\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)\n96786 WARN  (TEST-JdbcTest.testConnectionStringWithWrongCollection-seed#[8ED3B3162E3AB02D]-SendThread(127.0.0.1:55137)) [n:127.0.0.1:55092_cb_i%2Fof c:collection1 s:shard1 r:core_node4 x:collection1] o.a.z.ClientCnxn Session 0x14ff6f24fcf0012 for server null, unexpected error, closing socket connection and attempting reconnect\njava.net.ConnectException: Connection refused\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n\tat sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\n\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\n\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)\n98838 WARN  (TEST-JdbcTest.testConnectionStringWithWrongCollection-seed#[8ED3B3162E3AB02D]-SendThread(127.0.0.1:55137)) [n:127.0.0.1:55092_cb_i%2Fof c:collection1 s:shard1 r:core_node4 x:collection1] o.a.z.ClientCnxn Session 0x14ff6f24fcf0012 for server null, unexpected error, closing socket connection and attempting reconnect\njava.net.ConnectException: Connection refused\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n\tat sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\n\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\n\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)\n100696 WARN  (TEST-JdbcTest.testConnectionStringWithWrongCollection-seed#[8ED3B3162E3AB02D]-SendThread(127.0.0.1:55137)) [n:127.0.0.1:55092_cb_i%2Fof c:collection1 s:shard1 r:core_node4 x:collection1] o.a.z.ClientCnxn Session 0x14ff6f24fcf0012 for server null, unexpected error, closing socket connection and attempting reconnect\njava.net.ConnectException: Connection refused\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n\tat sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\n\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\n\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)\n102136 WARN  (TEST-JdbcTest.testConnectionStringWithWrongCollection-seed#[8ED3B3162E3AB02D]-SendThread(127.0.0.1:55137)) [n:127.0.0.1:55092_cb_i%2Fof c:collection1 s:shard1 r:core_node4 x:collection1] o.a.z.ClientCnxn Session 0x14ff6f24fcf0012 for server null, unexpected error, closing socket connection and attempting reconnect\njava.net.ConnectException: Connection refused\n.......\n......\n....... ",
            "id": "comment-14903665"
        },
        {
            "date": "2015-10-21T01:14:52+0000",
            "author": "Joel Bernstein",
            "content": "Hi Susheel Kumar, I just noticed your comment on this ticket. Thanks for adding the tests.\n\nLet's create a new ticket for these tests and link it to SOLR-8125. ",
            "id": "comment-14966069"
        },
        {
            "date": "2015-10-21T16:57:09+0000",
            "author": "Kevin Risden",
            "content": "Susheel Kumar I worked on some of the DriverImpl logic in SOLR-8179. There is a test now for the empty ZK host. I didn't add too many other tests. ",
            "id": "comment-14967445"
        },
        {
            "date": "2015-10-22T02:17:40+0000",
            "author": "Susheel Kumar",
            "content": "Hi Kevin,\n\nI have created SOLR-8184 for negative tests and i see some commonality\nbetween the tests from 8179 & 8184. Interestingly the missing zookeeper\ntest doesn't get pass in either patch.\n\nThanks,\nSusheel\n\nOn Wed, Oct 21, 2015 at 12:57 PM, Kevin Risden (JIRA) <jira@apache.org>\n ",
            "id": "comment-14968382"
        },
        {
            "date": "2015-10-22T02:18:40+0000",
            "author": "Susheel Kumar",
            "content": "Hi Joel,\n\nCreated SOLR-8184 and attached the patch with tests and linked to SOLR-8125.\n\nThanks,\nSusheel\n\nOn Tue, Oct 20, 2015 at 9:15 PM, Joel Bernstein (JIRA) <jira@apache.org>\n ",
            "id": "comment-14968384"
        }
    ]
}