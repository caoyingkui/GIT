{
    "id": "LUCENE-4748",
    "title": "Add DrillSideways helper class to Lucene facets module",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This came out of a discussion on the java-user list with subject\n\"Faceted search in OR\": http://markmail.org/thread/jmnq6z2x7ayzci5k\n\nThe basic idea is to count \"near misses\" during collection, ie\ndocuments that matched the main query and also all except one of the\ndrill down filters.\n\nDrill sideways makes for a very nice faceted search UI because you\ndon't \"lose\" the facet counts after drilling in.  Eg maybe you do a\nsearch for \"cameras\", and you see facets for the manufacturer, so you\ndrill into \"Nikon\".\n\nWith drill sideways, even after drilling down, you'll still get the\ncounts for all the other brands, where each count tells you how many\nhits you'd get if you changed to a different manufacturer.\n\nThis becomes more fun if you add further drill-downs, eg maybe I next drill\ndown into Resolution=10 megapixels\", and then I can see how many 10\nmegapixel cameras all other manufacturers, and what other resolutions\nNikon cameras offer.",
    "attachments": {
        "LUCENE-4748.patch": "https://issues.apache.org/jira/secure/attachment/12567749/LUCENE-4748.patch",
        "DrillSideways-alternative.tar.gz": "https://issues.apache.org/jira/secure/attachment/12568780/DrillSideways-alternative.tar.gz"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-03T00:48:17+0000",
            "content": "Initial patch with many nocommits.\n\nThe basic idea seems to work ... I create a BooleanQuery and then visit/hang onto the child scorers to decide for each collected document whether it's a real hit (counts agains drilldown) or a near-miss (counts against whichever drill-down dimension was the near miss).\n\nI made a basic test case showing it seems to work ... ",
            "author": "Michael McCandless",
            "id": "comment-13569677"
        },
        {
            "date": "2013-02-03T14:07:24+0000",
            "content": "New patch, just using IS.search instead of walking the leaves myself... ",
            "author": "Michael McCandless",
            "id": "comment-13569776"
        },
        {
            "date": "2013-02-03T14:25:55+0000",
            "content": "Great idea!\n\nSince drill-down followed by drill-sideways is a sort of (re)filtering over the original result set, perhaps the query result (say ScoredDocIds) could be passed through rather than re-evaluating the Query? \nIIRC the scores should not change during drill-down (and sideways as well), so without re-evaluating this could perhaps save some juice? ",
            "author": "Gilad Barkai",
            "id": "comment-13569780"
        },
        {
            "date": "2013-02-03T15:41:36+0000",
            "content": "\nSince drill-down followed by drill-sideways is a sort of (re)filtering over the original result set, perhaps the query result (say ScoredDocIds) could be passed through rather than re-evaluating the Query? \nIIRC the scores should not change during drill-down (and sideways as well), so without re-evaluating this could perhaps save some juice?\n\nYes, this would work correctly: the drill-sideways counts for dim X will be the same as the drill-down counts for dim X on the query just before you drilled into dim X.  So we could save counting the sideways counts for dim X (but, other dimensions previously drilled-down will still need new counting).\n\nWe'd need to run a different query, basically moving dim X up to the top BooleanQuery as a MUST, and of course the app would have to save & return the previous queries drill-down counts for dim X (which is a hassle in a stateless server app)... ",
            "author": "Michael McCandless",
            "id": "comment-13569804"
        },
        {
            "date": "2013-02-03T16:23:48+0000",
            "content": "New patch, addressing some nocommits.\n\nNow you instantiate DrillSideways, calls .addDrillDown one or more times, then call one of the search methods.\n\nI think DrillDown ought to have a similar API, so that you can build up some dims with OR and others without ... and maybe we should merge DrillDown and DrillSideways ... ",
            "author": "Michael McCandless",
            "id": "comment-13569807"
        },
        {
            "date": "2013-02-03T18:49:57+0000",
            "content": "Now you instantiate DrillSideways, calls .addDrillDown one or more times, then call one of the search methods.\n\nThat's actually very cool!\n\nI think DrillDown ought to have a similar API\n\nI agree! Today DrillDown API is kinda confusing (you even have a nocommit regarding that). E.g. how should one use DrillDown to construct and AND of ORs. Having DrillDown.add() will be a great simplification!\n\nWhether DrillDown (and sideways) should have .search(), or .getCollector() (something I've been thinking about before looking at your 2nd patch) ... I think that .search() looks good. If needed, we can always add a getCollector() later.\n\nI think it would be good if we can merge DrillDown and Sideways, though not sure how the API would look like at the moment. So maybe for now we keep them separated. I.e., Sideways requires heavy jdocs, explaining exactly what it does, and e.g. the multiple FacetArrays allocation, so if all that we get by merging is the joint .add() logic ... I'd rather keep them separated.\n\nI plan to do a more thorough review tomorrow, but briefly scanning the new patch, this looks awesome! ",
            "author": "Shai Erera",
            "id": "comment-13569852"
        },
        {
            "date": "2013-02-03T23:16:07+0000",
            "content": "Whether DrillDown (and sideways) should have .search(), or .getCollector() (something I've been thinking about before looking at your 2nd patch) ... I think that .search() looks good. If needed, we can always add a getCollector() later.\n\nI think we should somehow do a .getCollector().\n\nFor example, if you want to do grouping (using GroupingSearch) and faceting (using DrillSideways) ... you're kind of stuck because each of these classes does the \"search\" for you.\n\nIt's also a hassle having to make the N search methods (I still have a nocommit to add searchAfter...).\n\nSo a .getCollector would be nice so the app could use MultiCollector to run everything (maybe they need to do joins too!).\n\nBut the challenge is ... we'd also need .getQuery, because DrillSideways runs a different Query from what the user provided (and a different collector).  And then we'd need to expose the collector, and add methods to get the drill-down and drill-sideways results ... ",
            "author": "Michael McCandless",
            "id": "comment-13569924"
        },
        {
            "date": "2013-02-06T11:55:34+0000",
            "content": "I'm looking into it and I have a question.\n\nwhy are your collecting facets in two different groups (drilldown and drillsideways)?\nIn the final end the user doesn't matter of these two groups and want them merged (a facet can be in both groups). Is there a specific use case you have in mind to maintain them separated? ",
            "author": "Nicola Buso",
            "id": "comment-13572354"
        },
        {
            "date": "2013-02-06T14:45:56+0000",
            "content": "Hmm that's a good point!\n\nOK I think if we changed collect to also count the hits against each drill-sideways dimension, then the drill-sideways results would be \"self contained\", ie also contain any drill-down values for that field.\n\nAnd then I think we can return a single list of facet results... ",
            "author": "Michael McCandless",
            "id": "comment-13572456"
        },
        {
            "date": "2013-02-06T19:49:11+0000",
            "content": "New patch, only returning a single List<FacetResult> matching the List<FacetRequest> provided in the FacetSearchParams.\n\nIf the dimension was drill-down then the corresponding FacetResult will have the merged drill-down + -sideways results. ",
            "author": "Michael McCandless",
            "id": "comment-13572741"
        },
        {
            "date": "2013-02-07T08:52:54+0000",
            "content": "Few comments:\n\n\n\tI think that DrillSideways can take a DrillDownQuery (once we finish with LUCENE-4750)?\n\t\n\t\tIt will eliminate .addDrillDown (and it's ok I think that DDQ too will enforce all passed CPs to belong to the same dimension)\n\t\tThough if we do that, how can we set minShouldMatch on sub-query?\n\t\tMaybe if DDQ itself won't wrap another Query, but just build a BQ over all CPs ... then the user will need to wrap, but we can add a utility method.\n\t\n\t\n\n\n\n\n\tIn .search(), just set minShouldMatch to 1 if (drillDownQueries.size() == 1)? It reads simpler...\n\t\n\t\tAlso, why do you need to add a fake Query? I understand the rewrite will eliminate BQ and return TQ, but what's the harm?\n\t\tIsn't minShouldMatch=1 in that case similar to TQ?\n\t\n\t\n\n\n\n\n\tIn getDimIndex:\n\t\n\t\tExtract dims.size() to a variable so it's not executed in every loop?\n\t\tI think you can drop the if (cp.length > 0)? It doesn't make sense for someone to pass an empty CP. Also, you can assert on that in .addDrillDown()\n\t\t\n\t\t\tBTW, I noticed that you test that in DrillSidewaysCollector ctor too.\n\t\t\n\t\t\n\t\tI wonder if we made 'dims' LinkedHashSet it would perform better than these contains() (in .addDrillDown), get. Then you could just do dims.get(fr.cp.components[0]). I didn't try that in code, so not sure if you can get its index...\n\t\n\t\n\n\n\nAlso, I think we could simplify things if DrillSideways worked like this:\n\n\n\tEither exposed a .getQuery() method, or was itself a Query (like DDQ).\n\tEither exposed a .getCollector() method (returning DrillSidewaysCollector) or if it was a Query, you'd just initialize a DrillSidewaysCollector (not a big deal, user-wise).\n\tThe collector's getFacetResults() would do the \"merging\" work that I see in .search()\n\n\n\nThen you:\n\n\n\tWon't need DrillSidewaysResult, which today wrap a List<FacetResult> and TopDocs. Someone could MultiCollector.wrap(topDocsCollector, sidewaysCollector)? Just like w/ facets?\n\tWon't need the multitude of search() methods. Again, someone could wrap TopDocsCollector, CachingCollector, TopFieldsCollector...\n\n\n\nIn DrillSidewaysCollector ctor:\n\n\tif (drillSidewaysRequest == null) \u2013 that means the user asked to drill-down on some CPs for dim X, but not requested to count it, right?\n\t\n\t\tDo we must throw an exception? Perhaps we can just drop the relevant Query clause? Although, it's not very expected that a user would do that ... so perhaps keep the code for simplicity.\n\t\n\t\n\tInstead of doing Collections.singletonList you can just pass the single FacetRequest to the vararg ctor. If you feel like it, we can optimize FacetSearchParams' vararg ctors to initialize a singletonList if facetRequests.length == 1.\n\texactCount = Math.max(2, dims.size()); \u2013 maybe add a comment why '2'?\n\n\n\nIn DrillSidewaysCollector.setScorer:\n\n\tWhy does Scorer.getChildren() return a Collection and not List? We used to have that in IR.listCommits while in practice it was always a List. Can we fix Scorer?\n\t\n\t\tI looked at all Scorer.getChildren() impls and they either return a List (ArrayList in most cases) or Collections.singleton (which is a Set). So it's indeed dangerous to assume it's a List, but I think we should just fix Scorer?\n\t\n\t\n\tWhat do you mean by \"// nocommit fragile: need tracker somehow...\"? What's tracker?\n\n\n\nIn DrillSidewaysCollector.collect:\n\n\tCan you add some documentation to the 'if-else'?\n\n ",
            "author": "Shai Erera",
            "id": "comment-13573318"
        },
        {
            "date": "2013-02-07T20:53:15+0000",
            "content": "Thank you for all the feedback Shai!  Responses:\n\nI think that DrillSideways can take a DrillDownQuery (once we finish with LUCENE-4750)?\n\n+1\n\nDrillSideways will still need to do its own thing (build the BQ with\nminShouldMatch), but it should just take a DDQ.\n\nIn .search(), just set minShouldMatch to 1 if (drillDownQueries.size() == 1)? It reads simpler...\n\nFixed.\n\nAlso, why do you need to add a fake Query? I understand the rewrite will eliminate BQ and return TQ, but what's the harm?\nIsn't minShouldMatch=1 in that case similar to TQ?\n\nIf we don't add the fake query then BQ of a single term will just\nrewrite itself to that single term, so we won't find our scorer.\n\nReally we should make a specialized collector for this case (I added a\nTODO) because you should just use query foobar OR drill-down, and then\ncheck only the drill-down scorer to see if it matched.\n\nBut I think we can do that later (it's an opto).\n\nIn getDimIndex:\nExtract dims.size() to a variable so it's not executed in every loop?\n\nFixed.\n\nI think you can drop the if (cp.length > 0)? It doesn't make sense for someone to pass an empty CP. Also, you can assert on that in .addDrillDown()\nBTW, I noticed that you test that in DrillSidewaysCollector ctor too.\n\nOK I'll move the check into .addDrillDown, but I think it should be a\nreal check (not assert).\n\nI wonder if we made 'dims' LinkedHashSet it would perform better than these contains() (in .addDrillDown), get. Then you could just do dims.get(fr.cp.components[0]). I didn't try that in code, so not sure if you can get its index...\n\nGood idea, I think LinkedHashMap should work.  I'll try that...\n\n\nAlso, I think we could simplify things if DrillSideways worked like this:\nEither exposed a .getQuery() method, or was itself a Query (like DDQ).\nEither exposed a .getCollector() method (returning DrillSidewaysCollector) or if it was a Query, you'd just initialize a DrillSidewaysCollector (not a big deal, user-wise).\nThe collector's getFacetResults() would do the \"merging\" work that I see in .search()\nThen you:\nWon't need DrillSidewaysResult, which today wrap a List<FacetResult> and TopDocs. Someone could MultiCollector.wrap(topDocsCollector, sidewaysCollector)? Just like w/ facets?\nWon't need the multitude of search() methods. Again, someone could wrap TopDocsCollector, CachingCollector, TopFieldsCollector...\n\nAlas, it's not so simple: you can't use\nMultiCollector.wrap(topDocsCollector, sidewaysCollector) because the\nBooleanQuery (DrillSidewaysQuery if we do that) hits too many results\n(hits + near-misses), and this is why it needs its own collector.\n\nAll other collectors you may want for your search (grouping, joining,\netc) need to be MultiCollector.wrap'd and then passed to\nDrillSidewaysCollector.\n\nSo I'm not sure what value it is to provide the Query/Collector\nexternally: all you can really do with them is search on the query,\ncollecting with the collector.\n\nI'm also torn about \"opening up\" the Query/Collector because we may\nchange the impl on how the near-miss counts are collected.  EG Solr\nmakes bit sets and does multiple passes to aggregate the near-misses.\n\nIn DrillSidewaysCollector ctor:\nif (drillSidewaysRequest == null) \u2013 that means the user asked to drill-down on some CPs for dim X, but not requested to count it, right?\n\nRight.\n\nDo we must throw an exception? Perhaps we can just drop the relevant Query clause? Although, it's not very expected that a user would do that ... so perhaps keep the code for simplicity.\n\nOr, we could just return null as the FacetResult for that dimension?\n\nThe thing is, I suspect it's unusual that the app would want this, and\nthen in those cases that they do, they could drill-down on their main\nquery (ie, pass DrillDownQuery as the Query to DrillSideways) and then\nwe won't count the sideways counts for it.\n\nInstead of doing Collections.singletonList you can just pass the single FacetRequest to the vararg ctor.\n\nAhh, good!\n\nIf you feel like it, we can optimize FacetSearchParams' vararg ctors to initialize a singletonList if facetRequests.length == 1.\n\nI don't think we need to ... looks like we use Arrays.asList.\n\nexactCount = Math.max(2, dims.size()); \u2013 maybe add a comment why '2'?\n\nDone.\n\n\nIn DrillSidewaysCollector.setScorer:\nWhy does Scorer.getChildren() return a Collection and not List? We used to have that in IR.listCommits while in practice it was always a List. Can we fix Scorer?\nI looked at all Scorer.getChildren() impls and they either return a List (ArrayList in most cases) or Collections.singleton (which is a Set). So it's indeed dangerous to assume it's a List, but I think we should just fix Scorer?\n\nI don't think we can expect Scorer.getChildren to return a List,\nmatching the order of the sub-clauses, in general.  Ie, it will depend\non each query: sometimes a Scorer can be dropped, if that clause's\nscorer was null, or the Scorers can be reordered (eg,\nConjunctionScorer reorders by expected freq i think).\n\nWhat do you mean by \"// nocommit fragile: need tracker somehow...\"? What's tracker?\n\nWell, we cannot just cast to List and assume number of sub-scorers is\nthe same as number of clauses.  EG if the user's main query returns a\nnull Scorer because it matches no hits, then BQ will only return a\nlength 1 list to us.\n\nSo to properly handle this I think we need a wrapper Query class (this\noriginal idea came from selckin I think), whose purpose is to track\nwhich Scorer instance was created for our \"near-miss\" BQ.\n\n\nIn DrillSidewaysCollector.collect:\nCan you add some documentation to the 'if-else'?\n\nOK done. ",
            "author": "Michael McCandless",
            "id": "comment-13573918"
        },
        {
            "date": "2013-02-08T05:18:26+0000",
            "content": "Thanks for all the answers Mike!\n\nThe fixes look. And I suggest that all the nocommits that are optimizations should be converted to TODOs. We should get this feature in, optimize later. ",
            "author": "Shai Erera",
            "id": "comment-13574263"
        },
        {
            "date": "2013-02-10T23:10:14+0000",
            "content": "New patch, switching back to static methods that now just take a DrillDownQuery.  I removed some nocommits but I think added more   Still in progress... ",
            "author": "Michael McCandless",
            "id": "comment-13575571"
        },
        {
            "date": "2013-02-11T00:18:35+0000",
            "content": "This is another implementation of the brilliant idea from Mike McCandles in the ml. In the code FacetDrillDown is a porting of the lucene-4.2 DrillDown class in lucene-4.1. Next step would be to remove the dummy MatchAllDocsQuery. ",
            "author": "Nicola Buso",
            "id": "comment-13575582"
        },
        {
            "date": "2013-02-14T00:43:44+0000",
            "content": "I made a new patch, with a custom scorer to find the exact & near-miss\nhits and tally accordingly.  I also added a random test which seems to\nbe passing ... I think the new scorer is working (but there are still\ntons of nocommits).\n\nIt improves performance vs the last patch (base = last patch, comp =\nnew patch), on full wikibig (6.6M docs), 7 dims.  Each TermQuery does\na drill down on Date/2012 and imageCount/1:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                 LowTerm       33.53      (1.2%)       26.27      (4.2%)  -21.7% ( -26% -  -16%)\n                 MedTerm       14.20      (0.9%)       16.29      (4.8%)   14.7% (   8% -   20%)\n                HighTerm        6.47      (1.2%)        9.43      (4.8%)   45.7% (  39% -   52%)\n\n\n\nI think LowTerm got slower because the new scorer has highish init\ncost: it works like BS1, allocating arrays[CHUNK] up front.\n\nFor comparison ... this is the same set of queries, but doing\nonly drill-down.  base and comp are the same here (so the diffs are\nnoise), so you have to abs compare to the table above to get the\ndrill-sideways penalty (~2 - 2.4 X slower):\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                 MedTerm       32.83      (1.0%)       32.94      (0.6%)    0.3% (  -1% -    2%)\n                HighTerm       22.26      (0.8%)       22.37      (0.5%)    0.5% (   0% -    1%)\n                 LowTerm       58.47      (1.4%)       58.91      (0.9%)    0.8% (  -1% -    3%)\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13578070"
        },
        {
            "date": "2013-02-22T11:13:01+0000",
            "content": "New patch, fixing various bugs, beefing up the tests and resolving all\nnocommits.  I think it's ready!\n\nI also fixed a consistency issue with the facets API: if you request\nfaceting for a non-existent category, it now returns an empty\nFacetResult instead of skipping it.\n\nI tested on a wider variety of drill down / sideways queries.  base =\nold patch and comp = this patch:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n          LowTermHardDD2       24.43      (2.0%)       24.43      (2.2%)    0.0% (  -4% -    4%)\n         HighTermEasyDD2       18.91      (1.6%)       20.59      (4.3%)    8.9% (   2% -   15%)\n          LowTermHardDD1       31.38      (2.0%)       36.21      (1.7%)   15.4% (  11% -   19%)\n         LowTermMixedDD2       44.09      (2.1%)       53.93      (0.9%)   22.3% (  18% -   25%)\n        LowTermHardOrDD1       25.85      (2.3%)       33.80      (2.0%)   30.7% (  25% -   35%)\n          MedTermHardDD2        5.78      (1.4%)        7.71      (5.3%)   33.4% (  26% -   40%)\n          LowTermEasyDD2      129.51      (1.7%)      176.27      (3.9%)   36.1% (  30% -   42%)\n          MedTermEasyDD2       42.88      (1.8%)       60.03      (3.5%)   40.0% (  34% -   46%)\n         MedTermMixedDD2       12.52      (1.4%)       17.59      (4.2%)   40.5% (  34% -   46%)\n        LowTermHardOrDD2       18.57      (2.8%)       26.45      (1.3%)   42.4% (  37% -   47%)\n          LowTermEasyDD1       71.73      (1.8%)      102.77      (1.8%)   43.3% (  38% -   47%)\n        LowTermEasyOrDD2       61.01      (2.7%)       98.57      (6.7%)   61.6% (  50% -   73%)\n         HighTermHardDD2        1.22      (1.8%)        1.97      (6.8%)   61.7% (  52% -   71%)\n          MedTermHardDD1        8.77      (2.6%)       14.47      (5.1%)   65.1% (  55% -   74%)\n        HighTermMixedDD2        2.69      (1.6%)        4.50      (6.8%)   67.4% (  58% -   76%)\n          MedTermEasyDD1       18.61      (2.6%)       32.34      (6.1%)   73.8% (  63% -   84%)\n        LowTermEasyOrDD1       51.31      (2.2%)       91.48      (2.1%)   78.3% (  72% -   84%)\n       HighTermEasyOrDD2        8.96      (3.1%)       16.17      (5.4%)   80.5% (  69% -   91%)\n       HighTermEasyOrDD1        3.47      (4.1%)        6.40      (7.5%)   84.8% (  70% -  100%)\n        MedTermHardOrDD2        4.31      (3.3%)        8.03      (6.4%)   86.6% (  74% -   99%)\n         HighTermEasyDD1        3.16      (3.0%)        5.89      (7.7%)   86.6% (  73% -  100%)\n        MedTermEasyOrDD1       15.63      (3.4%)       30.05      (6.5%)   92.2% (  79% -  105%)\n         HighTermHardDD1        1.61      (3.1%)        3.13      (7.6%)   94.3% (  81% -  108%)\n        MedTermHardOrDD1        6.75      (3.5%)       13.76      (6.0%)  103.9% (  91% -  117%)\n       HighTermHardOrDD2        1.14      (4.2%)        2.41      (9.2%)  111.6% (  94% -  130%)\n        MedTermEasyOrDD2       19.92      (3.0%)       45.44      (6.3%)  128.1% ( 115% -  141%)\n       HighTermHardOrDD1        0.96      (3.5%)        2.54     (10.4%)  163.6% ( 144% -  183%)\n\n\n\nDD2 means drill down on 2 dims, DD1 means drill down on 1 dim.  Hard\nmeans the 1 or 2 dims have high count, Easy means they have low count,\nand Mixed means one high and one low.  OrDDX means I OR two values per\ndim.\n\nThe new patch is especially faster for the OR case (ie, when you drill\ndown on more than one value in a single dim), I think because it\nhandles it directly instead of recursing into another BQ. ",
            "author": "Michael McCandless",
            "id": "comment-13584200"
        },
        {
            "date": "2013-02-22T14:51:47+0000",
            "content": "Hi,\n\ncan you change DrillSideways class so that accept optionally some kind of factory for the facet collector? so that we can decide outside DrillSideways if we want a different implementation of the FacetCollector to be used!\n\n\nNicola. ",
            "author": "Nicola Buso",
            "id": "comment-13584320"
        },
        {
            "date": "2013-02-22T16:00:25+0000",
            "content": "can you change DrillSideways class so that accept optionally some kind of factory for the facet collector?\n\nHmm you mean instead of calling FacetsCollector.create?  Can you describe the use case behind this?  (Hmm maybe FacetSearchParams already exposes a way to control which collector is created?). ",
            "author": "Michael McCandless",
            "id": "comment-13584372"
        },
        {
            "date": "2013-02-22T16:29:19+0000",
            "content": "I have this case (I'm sure I'm not alone):\nhttp://markmail.org/search/?q=FacetRequest%20include%20residue#query:FacetRequest%20include%20residue%20list%3Aorg.apache.lucene.java-user+page:1+mid:2qgovhht5miqmhlk+state:results\n\nI implemented this creating a facetcollector that take count of the selection the user has done. I've not the 4.2 version where you introduced FacetsCollector.create(..) method; I will check there if I find something interesting. ",
            "author": "Nicola Buso",
            "id": "comment-13584399"
        },
        {
            "date": "2013-02-22T18:10:36+0000",
            "content": "Ahh OK I see.  This is like LinkedIn's faceted UI, where you can enter a custom name under each dimension, if you don't see the value in the top N already displayed.  EG http://www.linkedin.com/search/fpsearch?type=people&keywords=lisa&pplSearchOrigin=GLHD&pageKey=fps_results\n\nI think you cannot do this with just FacetSearchParams today ... I'll update the patch to make this possible.  Maybe we need a factory to create FacetArrays ... or maybe we go back to non-static class and you subclass & override a method to create each FacetArray ... ",
            "author": "Michael McCandless",
            "id": "comment-13584498"
        },
        {
            "date": "2013-02-22T19:25:52+0000",
            "content": "I took a brief look at the path and there are two FacetCollectors used, for the drill-down counting and for each \"sideway\". Perhaps DrillSideways can indeed be an instance class, with a protected getFacetsAccumulator() method? The collector itself is not so important, it only collects matching documents. The accumulator does the heavy lifting and controls the FacetArrays. That way, Nicola can override and provide his own FacetArrays instance?\n\nAre there benefits in having this class offer static methods? ",
            "author": "Shai Erera",
            "id": "comment-13584575"
        },
        {
            "date": "2013-02-22T20:34:56+0000",
            "content": "Perhaps DrillSideways can indeed be an instance class, with a protected getFacetsAccumulator() method? \n\n+1\n\nI think I'd add separate methods for getting drill-down and drill-sideways Accumulator.\n\nBut, what should the default impl be?  Should I factor out that code from FacetsCollector.create that carefully picks either StandardFA or FA (maybe into a new FacetsAccumulator.create)? ",
            "author": "Michael McCandless",
            "id": "comment-13584652"
        },
        {
            "date": "2013-02-22T21:11:37+0000",
            "content": "New patch, w/ changes described above. ",
            "author": "Michael McCandless",
            "id": "comment-13584700"
        },
        {
            "date": "2013-02-24T10:10:57+0000",
            "content": "Great work Mike!\n\nFew comments:\n\n\tThe CHANGES line should not remove 'static methods' right?\n\n\n\n\n\tCan you add jdoc to FA.create(), something like \"returns FA if all requests are CountFR, StandardFA otherwise\"?\n\t\n\t\tAnd while on that, fix FacetsCollector.create to say \"calls create(FA) by creating FA using FA.create\" ... something like that\n\t\n\t\n\n\n\n\n\tThis \"// TODO: remove this limitation: it's silly?\" \u2013 can we handle it now? It's odd that we add a 'silly' limitation . If we don't want the app to do it, then just throw the exception, and remove the TODO. Otherwise allow it?\n\t\n\t\tSame goes for this \"// TODO: remove this limitation (allow pure browse\".\n\t\tUnless, it's not easy to handle these TODOs now.\n\t\n\t\n\n\n\n\n\tThis \"for(int i=0;i<fsp.facetRequests.size();i++) {\" can be converted to Java 5-style iteration?\n\n\n\n\n\tgetDrillDown/SidewaysAccumulator \u2013 should the jdoc say \"Override ... how the FA is created\"? Or maybe \"Override to use a custom FA by FacetsCollector\"?\n\n\n\nOther than that, +1 to commit! ",
            "author": "Shai Erera",
            "id": "comment-13585339"
        },
        {
            "date": "2013-02-24T13:15:35+0000",
            "content": "Thanks Shai, I fixed those issues.\n\nFor the first TODO, I removed the comment: I think an app should not make a DDQ, and no drill downs to it, and pass it to DS.\n\nFor the 2nd TODO, I fixed it so the \"pure browse\" works, but I put another TODO to improve the implementation later ... ",
            "author": "Michael McCandless",
            "id": "comment-13585366"
        },
        {
            "date": "2013-02-24T19:00:24+0000",
            "content": "Should DSQ perhaps be in its own class? Just to improve DS readability...  ",
            "author": "Shai Erera",
            "id": "comment-13585458"
        },
        {
            "date": "2013-02-24T19:29:25+0000",
            "content": "Good idea!  New patch pulling [package private] DSQ out. ",
            "author": "Michael McCandless",
            "id": "comment-13585464"
        },
        {
            "date": "2013-02-26T00:04:12+0000",
            "content": "[trunk commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1449972\n\nLUCENE-4748: add DrillSideways utility class to facets module ",
            "author": "Commit Tag Bot",
            "id": "comment-13586496"
        },
        {
            "date": "2013-02-26T00:12:11+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1449973\n\nLUCENE-4748: add DrillSideways utility class to facets module ",
            "author": "Commit Tag Bot",
            "id": "comment-13586508"
        },
        {
            "date": "2013-05-10T10:33:11+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653853"
        }
    ]
}