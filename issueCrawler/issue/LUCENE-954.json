{
    "id": "LUCENE-954",
    "title": "Toggle score normalization in Hits",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.2,                                            2.3,                                            2.3.1,                                            2.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "The current implementation of the \"Hits\" class sometimes performs score normalization.\nIn particular, whenever the top-ranked score is bigger than 1.0, it is normalized to a maximum of 1.0.\n\nIn this case, Hits may return different score results than TopDocs-based methods.\n\nIn my scenario (a federated search system), Hits delievered just plain wrong results.\nI was merging results from several sources, all having homogeneous statistics (similar to MultiSearcher, but over the Internet using HTTP/XML-based protocols).\nSometimes, some of the sources had a top-score greater than 1, so I ended up with garbled results.\n\nI suggest to add a switch to enable/disable this score-normalization at runtime.\nMy patch (attached) has an additional peformance benefit, since score normalization now occurs only when Hits#score() is called, not when creating the Hits result list. Whenever scores are not required, you save one multiplication per retrieved hit (i.e., at least 100 multiplications with the current implementation of Hits).",
    "attachments": {
        "hits-scoreNorm.patch": "https://issues.apache.org/jira/secure/attachment/12361423/hits-scoreNorm.patch",
        "LUCENE-954.patch": "https://issues.apache.org/jira/secure/attachment/12376358/LUCENE-954.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-07-09T16:53:59+0000",
            "content": "Adds a switch to enable/disable Hits-based score normalization. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12511174"
        },
        {
            "date": "2007-09-28T15:33:46+0000",
            "content": "change the version ",
            "author": "Grant Ingersoll",
            "id": "comment-12531046"
        },
        {
            "date": "2008-02-17T08:28:37+0000",
            "content": "I don't see any harm in adding this, though I don't understand why the top-score was greater than 1 (original description above mentions this) in the first place, since scores in Hits are normalized and thus should always be less than 1. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12569656"
        },
        {
            "date": "2008-02-17T13:37:49+0000",
            "content": "Normalization is only applied to the queryWeight part of the score (the part the same for all documents), but not to the fieldWeight.  idf and norms can both be > 1. ",
            "author": "Yonik Seeley",
            "id": "comment-12569698"
        },
        {
            "date": "2008-02-22T10:32:35+0000",
            "content": "You are right, Yonik.\n\nHits currently tries to \"hide\" this by normalizing the scores to a maximum of 1, simply by dividing the \"raw\" scores by the maximum score returned.\n\nThis is why the scores from Hits are currently not comparable to each other. The suggested patch resolves this problem. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12571339"
        },
        {
            "date": "2008-02-22T11:30:28+0000",
            "content": "\nThis is why the scores from Hits are currently not comparable to each other\n\nDo you mean across queries or within queries?  Even if you have raw scores, they still won't be comparable across queries, or at least that is my understanding of the literature.  In your original case of federated search across several sources, each with their own stats it is not well understood what scores mean.  Not saying it can't be done, it really is the only way to do federated search, just not sure one can try to read too much into the scores.  Of course, this is more of a discussion for the user list than a JIRA issue, so I'd be happy to discuss more there and hear other thoughts.  It has been a while since I have read anything on it.\n\nThat also isn't to say that your patch isn't worthwhile, just wondering whether the change is actually meaningful for your use case. ",
            "author": "Grant Ingersoll",
            "id": "comment-12571363"
        },
        {
            "date": "2008-02-22T12:09:24+0000",
            "content": "Grant,\n\nsorry I was perhaps not too clear about it.\n\nThe distribution of scores of one Hits instance is currently not comparable to another distribution of scores of another Hits object, even if the underlying statistics are comparable/compatible/identical. This is due to the case that the values are always normalized to a maximum of 1.0.\n\nAs I said, my Federated Search system provides homogeneous statistics (but not via MultiSearcher). In fact, it does not use MultiSearcher for this, but a variant of the SRU/SRW/XCQL protocols (\"SRX/FS\"), where all communication is done via HTTP and XML. This includes the exchange of Term/DF statistics. At the end, the system makes several distributed Indexes appear as a single (read: federated) index. In order to merge the results from each index, Hits is used.\n\nIn the simplest case, the results from every Hits object (one per source) are simply merged by score in descending order. With the current implementation of Lucene Hits, these scores are not comparable across instances. With the patch, they are (at least when score normalization is turned off).\n\nIf you need more information about the Federated Search system, we can indeed move the discussion to the mailing list. However, I think the problem is not really specific to my needs. Even if you have two Hits instances locally, you might want to be able to compare the scores (or merge the results) from Hits instance A to those from Hits instance B (in particular, when they are from the same index). This is also not possible right now. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12571367"
        },
        {
            "date": "2008-02-22T19:37:26+0000",
            "content": "Disabling score normalization in Hits seems like a reasonable feature to me.  +1\n\nThe indentation in this patch uses tabs.  -1 ",
            "author": "Doug Cutting",
            "id": "comment-12571553"
        },
        {
            "date": "2008-02-24T18:41:33+0000",
            "content": "Reworked patch, now against SVN Trunk (also works with 2.3), and without tabs.\nThe patch file also includes a new testcase which demonstrates the new feature.\n ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12571924"
        },
        {
            "date": "2008-02-25T14:11:14+0000",
            "content": "changed affected versions ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12572088"
        },
        {
            "date": "2008-03-16T21:19:15+0000",
            "content": "I hate to rain on the parade, but maybe instead of making small modifications to the way Hits works, it's time to deprecate it?\n\nHits has numerous flaws compared to the alternative interface (Searcher.search(Query, HitCollector), with TopDocCollector). It tries to \"guess\" in advance the number of results it should calculate (usually calculating too many, or too few and having to run the search again). It does bizarre normalization of the score (as this patch points out). It is harder to extend the way the HitCollector interface can be (for an example, see the recently checked-in timed hit collector, replacing yet another suggest improvements to the Hits interface).\n\nSo I say - it's time to deprecate the Hits search(Query) method, to change the tutorials to recommend TopDocCollector instead, and to stop trying to improve Hits. ",
            "author": "Nadav Har'El",
            "id": "comment-12579258"
        },
        {
            "date": "2008-03-16T21:45:57+0000",
            "content": "\nSo I say - it's time to deprecate the Hits search(Query) method, to change the tutorials to recommend TopDocCollector instead, and to stop trying to improve Hits.\n\n+1 ",
            "author": "Michael Busch",
            "id": "comment-12579264"
        },
        {
            "date": "2008-03-16T23:28:12+0000",
            "content": "I hate to rain on the parade, but maybe instead of making small modifications to the way Hits works, it's time to deprecate it?\n\nI agree with your sentiment, but it's somewhat orthogonal to this issue.\n\nIf someone opens a Jira issue to deprecate the Hits class, and attaches a patch that does so and replaces examples of it's usage in the demo and tutorial, i'll certainly vote for it \u2013 but until then, if people want to try and improve Hits, there's little reason not to do so. ",
            "author": "Hoss Man",
            "id": "comment-12579277"
        },
        {
            "date": "2008-03-17T09:45:35+0000",
            "content": "I agree with Hoss. Please file a new issue if you want to see Hits (and consequently also Hit/HitIterator) being deprecated. I do not see any reason for this, though.\n\nThis patch is meant for helping Lucene users who currently use the Hits class and particularly have problems with the built-in score normalization, and not with its performance.\n ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12579367"
        },
        {
            "date": "2008-05-17T04:06:11+0000",
            "content": "Unit test passes.\nWill commit next week. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12597700"
        },
        {
            "date": "2008-05-19T21:06:07+0000",
            "content": "\nIf someone opens a Jira issue to deprecate the Hits class, and attaches a patch that does so and replaces examples of it's usage in the demo and tutorial, i'll certainly vote for it.\n\nDone with LUCENE-1290.\nI'm waiting for your vote, Hoss  ",
            "author": "Michael Busch",
            "id": "comment-12598092"
        },
        {
            "date": "2008-05-28T04:58:07+0000",
            "content": "I suppose there is now suddenly no need to work on Hits.  I'll resolve this as Won't Fix in a few days, unless somebody has some more thoughts on this. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12600366"
        },
        {
            "date": "2008-08-05T21:45:24+0000",
            "content": "Looks like this guy is ready to be resolved. ",
            "author": "Mark Miller",
            "id": "comment-12620057"
        },
        {
            "date": "2008-08-05T23:33:21+0000",
            "content": "Hits is deprecated. ",
            "author": "Michael Busch",
            "id": "comment-12620089"
        }
    ]
}