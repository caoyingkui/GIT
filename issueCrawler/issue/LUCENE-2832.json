{
    "id": "LUCENE-2832",
    "title": "on Windows 64-bit, maybe we should default to a better maxBBufSize in MMapDirectory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently the default max buffer size for MMapDirectory is 256MB on 32bit and Integer.MAX_VALUE on 64bit:\n\n\npublic static final int DEFAULT_MAX_BUFF = Constants.JRE_IS_64BIT ? Integer.MAX_VALUE : (256 * 1024 * 1024);\n\n\n\nBut, in windows on 64-bit, you are practically limited to 8TB. This can cause problems in extreme cases, such as: http://www.lucidimagination.com/search/document/7522ee54c46f9ca4/map_failed_at_getsearcher\n\nPerhaps it would be good to change this default such that its 256MB on 32Bit OR windows, but leave it at Integer.MAX_VALUE\non other 64-bit and \"64-bit\" (48-bit) systems.",
    "attachments": {
        "LUCENE-2832.patch": "https://issues.apache.org/jira/secure/attachment/12468518/LUCENE-2832.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-17T15:49:54+0000",
            "content": "I would suggest to use a different default for Win64, as the adress space is not as small as with 32 bit. How about something like 4 GB or 16 GB?\n\nAlso, for 32bit we use 1/8 of possible address space, so why not the same (1/8) for win64? ",
            "author": "Uwe Schindler",
            "id": "comment-12982675"
        },
        {
            "date": "2011-01-17T15:55:55+0000",
            "content": "Sorry my last comment was stupid, as 1/8 of 8TB is still larger as Integer.MAX_VALUE (I was thinking of Long.MAX_VALUE).\n\nI still have no idea why this fails, as 8 TB of address space should be enough for thousands of 2 GB blocks. ",
            "author": "Uwe Schindler",
            "id": "comment-12982682"
        },
        {
            "date": "2011-01-17T16:07:26+0000",
            "content": "In this case, its very extreme. the user had 1.1 billion documents on one windows server.\n\nI am not sure if this issue will even help anyone at all: will a smaller buffer really help fragmentation in these cases?\nThe user never responded to my suggestion to change the buffer size.\n\nI think a good option here is to do nothing at all, but I'm not opposed to reducing the buffer if it will actually help,\nmainly because the MultiMMapIndexInput is sped up and it shouldn't cause as much slowdown as before. ",
            "author": "Robert Muir",
            "id": "comment-12982692"
        },
        {
            "date": "2011-01-17T16:44:42+0000",
            "content": "I am removing 3.1 as I think its the safest option.\n\nWe can revisit if someone is willing to test parameters on enormous indexes (200GB, 500GB, 1TB, ...)\notherwise we are just guessing. ",
            "author": "Robert Muir",
            "id": "comment-12982701"
        },
        {
            "date": "2013-07-23T18:44:24+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716938"
        },
        {
            "date": "2014-04-16T12:54:39+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970831"
        }
    ]
}