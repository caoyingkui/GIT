{
    "id": "LUCENE-6722",
    "title": "Java 8 as the minimum supported JVM version for branch_5x",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Blocker",
        "status": "Resolved",
        "type": "Wish"
    },
    "description": "Require Java 8 as the minimum supported JVM version for branch_5x.\n\n\n\tJava 7 is already EOL'ed\n\tTrunk is already at Java8\n\tImportant Solr components such as Jetty 9.3.x already require Java 8\n\tNashorn Javascript engine available in Java 8 is just so much faster and we may see more usage of JS inside Solr (SOLR-7576 etc.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14658563",
            "author": "Noble Paul",
            "date": "2015-08-05T17:34:44+0000",
            "content": "+1 \nPlease do it "
        },
        {
            "id": "comment-14658564",
            "author": "Anshum Gupta",
            "date": "2015-08-05T17:35:56+0000",
            "content": "+1. Glad to see this happening. "
        },
        {
            "id": "comment-14658598",
            "author": "Erick Erickson",
            "date": "2015-08-05T18:02:29+0000",
            "content": "Do be aware that this is significantly painful for a number of organizations. I agree that we can't be hobbled by some Solr user out there who refuses/can't migrate to Java8. But this is a 6 month process involving 8 different departments for some organizations.\n\nSo I'm just sayin' be prepared for a number of requests to \"backport JIRAs to Solr 5.3 since we have to stay on Java 7 please\". We're not obligated to do that of course.\n "
        },
        {
            "id": "comment-14658624",
            "author": "Mark Miller",
            "date": "2015-08-05T18:13:53+0000",
            "content": "Personally, unless we are boxed in a corner, I think this is what major versions are for. "
        },
        {
            "id": "comment-14658654",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-05T18:33:42+0000",
            "content": "So I'm just sayin' be prepared for a number of requests to \"backport JIRAs to Solr 5.3 since we have to stay on Java 7 please\". We're not obligated to do that of course.\n\nYeah, I am aware of that, Erick. That is probably going to happen whether we like it or not but let's cross that bridge when we get there.\n\nPersonally, unless we are boxed in a corner, I think this is what major versions are for.\n\nYeah, but we have precedence. We upgraded to Java 7 in 4.8.0. "
        },
        {
            "id": "comment-14658666",
            "author": "Shawn Heisey",
            "date": "2015-08-05T18:42:13+0000",
            "content": "Personally, unless we are boxed in a corner, I think this is what major versions are for.\n\nI agree.  I'm not planning to drop a formal veto on this, but I don't think it's time yet.  If the group consensus is that we are seriously hampered by Java 7, perhaps we should be working on stabilizing trunk for a 6.0 release.\n\nIt's true that the switch to Java 7 in version 4.8 has not resulted in the major community backlash that was feared by some, but it was still a risky move, and I don't think we should do it again without a situation where we are frequently fighting with the limitations of the older version and code differences between trunk and the stable branch.  I haven't seen any evidence that we are in that situation.\n\nMy company has a far less stringent policy regarding major upgrades than Erick described, but we still don't do such upgrades just because the new version has been out for X months and the old version is end of life.  We still have a small number of things running Java 6, because we don't want to spend the time doing the necessary quality testing to upgrade.  Chances are that we could drop Java 7 or 8 in and everything would work great ... but our customers would likely move elsewhere if they found out that we did a major Java upgrade without testing it thoroughly.  That's even more likely if they learn about what we did because their website stopped working. "
        },
        {
            "id": "comment-14658739",
            "author": "Erick Erickson",
            "date": "2015-08-05T19:37:18+0000",
            "content": "bq: Personally, unless we are boxed in a corner, I think this is what major versions are for.\n\nSo does this really become \"relase 6.0\"? I think this is premature but thought I'd ask.\n\nbq: Yeah, but we have precedence. We upgraded to Java 7 in 4.8.0.\n\nThat was itself an outlier. That said, it's instructive that it seemed to go pretty smoothly. "
        },
        {
            "id": "comment-14658777",
            "author": "Noble Paul",
            "date": "2015-08-05T20:01:04+0000",
            "content": "The hardships we face while merging changes from trunk to branch_5x is a PITA. Atl east to make the life of developers easy , we must do it "
        },
        {
            "id": "comment-14658831",
            "author": "Dawid Weiss",
            "date": "2015-08-05T20:20:48+0000",
            "content": "At least to make the life of developers easy , we must do it\n\nThis leads us to an interesting question \u2013 is software for users or for developers?  "
        },
        {
            "id": "comment-14658839",
            "author": "Joel Bernstein",
            "date": "2015-08-05T20:24:53+0000",
            "content": "+1\n\nResponded to list on this but I'll add my two cents here as well. I was almost boxed in the SQL interface because the SQL parser I chose first (Presto) relied on Java 8. Turns out there is a solid Java 7 alternative (Calcite), otherwise I would have been stuck. But I've had to spend time working around this issue that could have been spent elsewhere. "
        },
        {
            "id": "comment-14658988",
            "author": "Shawn Heisey",
            "date": "2015-08-05T21:31:13+0000",
            "content": "The hardships we face while merging changes from trunk to branch_5x is a PITA. \n\nI have occasionally run into things that had to be manually backported, but for the most part, when I merge a commit from trunk to the stable branch, it works without incident.  I am not personally seeing a problem that's large enough to warrant the Java upgrade.\n\nEven if both branches use the same Java version, there will still be discrepancies that will complicate backporting.  That's just how things are when there's a trunk/master in addition to a stable branch.\n\nI'm really curious how often people run into merge conflicts, and what percentage of those problems are due to differences related to the Java version as opposed to other code changes. "
        },
        {
            "id": "comment-14659658",
            "author": "Uwe Schindler",
            "date": "2015-08-06T07:58:22+0000",
            "content": "Hi,\nwe should not move the 5.x branch to Java 8 a this point. The differences between trunk and 5.x are not so big, so we can instead just switch to Lucene 6 aka Trunk. Backporting all the Java 8 changes back to branch5x is a lot of work, because you have to pick lots of commits and backport them again.\n\nI would like to prepare Lucene trunk to make it \"releaseable\" (e.g., fix the Stored/IndexDocument issues with docvalues) and then release 6.0 during the next year.\n\nMost merge conflicts I see between trunk and 5.x are more related to Index/StorableDocument. The differences in Java code are minimal (we have some lambdas in trunk already, but nobody really did a \"big rewrite\" of that code). I backported some stuff that used Java 8 code in trunk, but that was quite simple.\n\nSo my vote:\n-1 to move branch_5x to Java 8\n+1 to work on releasing trunk as Lucene 6 "
        },
        {
            "id": "comment-14659758",
            "author": "Mark Miller",
            "date": "2015-08-06T09:45:11+0000",
            "content": "As usual, Uwe gets it \n\n+1 "
        },
        {
            "id": "comment-14659760",
            "author": "Mark Miller",
            "date": "2015-08-06T09:50:03+0000",
            "content": "At least to make the life of developers easy , we must do it\n\nMaking our two branches identical is a silly idea for a solution. As a community we decided on 2 dev branches for a reason. So they can diverge  If we don't want that, let's not play games with 2 branches. If we do want that, let's not cry about divergence. "
        },
        {
            "id": "comment-14659762",
            "author": "Adrien Grand",
            "date": "2015-08-06T09:50:42+0000",
            "content": "+1 to Uwe's plan "
        },
        {
            "id": "comment-14659767",
            "author": "Robert Muir",
            "date": "2015-08-06T09:52:54+0000",
            "content": "+1 Uwe "
        },
        {
            "id": "comment-14659769",
            "author": "Mark Miller",
            "date": "2015-08-06T09:53:36+0000",
            "content": "This leads us to an interesting question \u2013 is software for users or for developers?\n\nIn my experience, that depends on the ratio of devs that are paid to work on the project as a day job. "
        },
        {
            "id": "comment-14659894",
            "author": "Noble Paul",
            "date": "2015-08-06T11:56:54+0000",
            "content": "If it is a 6.0 that we need to move to java 8, let's move to 6.0. There is no reason why we should not use modern language features in our code because it is harder to apply the patch on to branch_5x\n\nSo how is it going to be?\n5.3 , 5.4 and then 6.0 ? "
        },
        {
            "id": "comment-14659933",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-06T12:31:23+0000",
            "content": "we should not move the 5.x branch to Java 8 a this point. The differences between trunk and 5.x are not so big, so we can instead just switch to Lucene 6 aka Trunk. Backporting all the Java 8 changes back to branch5x is a lot of work, because you have to pick lots of commits and backport them again.\n\nBackporting Java 8 changes is a lot of work, sure, but I am happy to help. You give a good argument for releasing Trunk as Lucene 6 and I don't disagree with it but it sounds like it isn't ready.\n\nMerge conflicts or even language features aren't necessarily my reasons for proposing this move. I gave my reasons in the description of the issue out of which #3 is the most important to me.\n\nSo, here's what I propose. If you get to it first then you can release trunk as Lucene 6 either next year or whenever. If I get to it first and the consensus is that trunk isn't ready to be released, I'll copy over branch_5x to branch_6x, backport Java 8 support and release version 6. I am myself a month or two away from needing Jetty 9.3.x. "
        },
        {
            "id": "comment-14660005",
            "author": "Shawn Heisey",
            "date": "2015-08-06T13:31:03+0000",
            "content": "+1 to Uwe's idea.\n\nMy fuzzy recollections regarding the switch of trunk to Java 7 involve a major concerted effort around critical improvements in the language \u2013 in particular, switching all file I/O to the new Files class.  I recall something about a big effort to switch to the diamond operator, and a smaller effort to use try-with-resources as well.  Those changes were extremely fundamental and very likely caused backporting hell, so I was not particularly surprised that we included those changes in branch_4x and jumped our Java requirement.\n\nSo far I have not seen any evidence that anyone is quite as keen to integrate new Java 8 features on a large scale.  If that changes, then trunk will deviate significantly from branch_5x, and when that happens, then we will have an extremely compelling reason to change the minimum Java version in 5x. "
        },
        {
            "id": "comment-14660035",
            "author": "Erik Hatcher",
            "date": "2015-08-06T13:51:49+0000",
            "content": "More fuel to the fire, JavaScript.  Solr has update processing and DIH hooks for JavaScripting, and it's not compatible between Java7 and Java8.  I've encountered and had to fork an update-script.js file because of this already, see SOLR-7652.  There's probably more examples of where JavaScript differences cause compatibility headaches. "
        },
        {
            "id": "comment-14660275",
            "author": "Anshum Gupta",
            "date": "2015-08-06T16:40:01+0000",
            "content": "+1 on Uwe's plan. I am happy to see that the move is at least being planned. "
        },
        {
            "id": "comment-14660340",
            "author": "Mark Miller",
            "date": "2015-08-06T17:01:42+0000",
            "content": "5.3 , 5.4 and then 6.0 ?\n\n+1 - unless someone wants to do a 5.5 and 6.0 takes too long for some reason.\n\nOtherwise, let's move to 6. We always have 7 after that. "
        },
        {
            "id": "comment-14660926",
            "author": "Jan H\u00f8ydahl",
            "date": "2015-08-06T22:50:58+0000",
            "content": "+1 to Uwe's comments\n\nLet 5.x stay Java7. No end user benefit in requiring Java8!\n\nAs it stands now there are only 12 \u2013 twelve \u2013 changes that are Trunk-only, and none of those are major features (many are deprecations). Probably because devs (or their boss?) prioritize getting every single commit backported to 5.x right away. Perhaps our software would be more healthy if we allow more changes to go in Trunk only; then the benefits to releasing the next major version would be obvious, and we would not need to go searching for justifications of releasing a major version in lack of real end-user benefits  Java8 only is not enough reason for users to upgrade since 5.x runs well in Java8.\n\nOne candidate could have been the whole Auth/Autz support for Solr, but that is too late now \n\nSo let's cut the 6.0.0 release once someone can argue there is enough major new stuff in Trunk-only that brings real end user benefit (for either Lucene or Solr users). "
        },
        {
            "id": "comment-14660937",
            "author": "Jan H\u00f8ydahl",
            "date": "2015-08-06T22:58:39+0000",
            "content": "One potential justification for a 6.x would be revolutionizing our query parser stack, going all-in with Flex parsers, and adding true NEAR and ANY operator support (and perhaps others as well) to the default Lucene/Solr parsers (LUCENE-1823 and friends). Guess that aligns with the work of Alan Woodward too? I know too little about the details to make a formal suggestion, just throwing in some ideas. "
        },
        {
            "id": "comment-14660946",
            "author": "Mark Miller",
            "date": "2015-08-06T23:03:49+0000",
            "content": "If we push on 6, plenty more things will fall into it if history is any guide. I don't think users need to be like, wow, another major version, so many features! Our project has historically been this way anyway - we have had like 1.5 real major releases that are game changers. That's okay. The rest have been done for other reasons.\n\nIf devs want to start working with features that require Java 8 and get those in the hands of users, I think thats good enough reason to do 6 for devs and users.\n\nIf people are banging on our door for another 5.x release after 6 is out, nothing stops us.\n "
        },
        {
            "id": "comment-14661130",
            "author": "Yonik Seeley",
            "date": "2015-08-07T00:44:33+0000",
            "content": "As it stands now there are only 12 \u2013 twelve \u2013 changes that are Trunk-only, and none of those are major features (many are deprecations). Probably because devs (or their boss?) prioritize getting every single commit backported to 5.x right away.\n\nYep, that's where I am.  If humanly possible I want every single feature in 5x so users can actually use them.  Who wants to develop something for trunk only when you have no idea when it will actually be released?  And who want's to change existing code in trunk too much if it causes pain/conflicts backporting to 5x? Not me   I purposely keep trunk and 5x as close as possible.  Given that, using \"are there enough differences in trunk\" as a release metric is obviously pretty flawed.\nAs Mark points out, a lot of activity will happen once people feel a new major release coming. "
        },
        {
            "id": "comment-14661139",
            "author": "Jan H\u00f8ydahl",
            "date": "2015-08-07T00:56:44+0000",
            "content": "Yea, guess that's just how it is these days, however \"wrong\" it feels to release a new major version without major features  We can hope Marks is right that by the time we're actually ready for a 6.0 release, some unique stuff will have materialized too!\n+1 to work on releasing trunk as Lucene 6 "
        },
        {
            "id": "comment-14661626",
            "author": "Joel Bernstein",
            "date": "2015-08-07T10:49:29+0000",
            "content": "The SQL Interface (SOLR-7560) is currently in trunk. This feature was originally slated for Solr 5.3 but I had to revert because the Presto libraries relied on Java 8. I now have a version that uses Calcite instead of Presto almost ready to release with Solr 5.4. \n\nIf 6.0 is really that close I'm inclined to release the Presto code that is already in trunk with Solr 6. I'll just work on new features of the SQL interface in trunk until the 6.0 release. \n\nI've been holding off on updating the CHANGES.txt until I successfully backported to 5x, but if the decision is made to release trunk in the next couple months, I can just add all the tickets involved in the SQL interface under Solr 6 changes. "
        },
        {
            "id": "comment-15026939",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-11-25T15:38:53+0000",
            "content": "The consensus is that Java 8 will be the minimum requirement for 6.0 and not 5.x so I am closing this issue as a 'won't fix'. "
        }
    ]
}