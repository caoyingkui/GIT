{
    "id": "LUCENE-7737",
    "title": "Remove spatial-extras dependency on queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [
            "modules/spatial-extras"
        ],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "The spatial-extras module uses ValueSources for a number of different purposes, requiring a dependency on the queries module.  I'd like to try using core-only interfaces here instead, allowing us to remove the dependency",
    "attachments": {
        "LUCENE-7737.patch": "https://issues.apache.org/jira/secure/attachment/12857296/LUCENE-7737.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15904789",
            "date": "2017-03-10T09:40:00+0000",
            "content": "Here's a patch.  It's quite meaty, so here's a summary:\n\nspatial-extras uses ValueSources in three ways:\n\n\tPredicate objects to check if a particular document matches a given shape.  I've replaced this with a ShapePredicate, which implements a TwoPhaseIterator.\n\tDistance sources for sorting and scoring.  These can be replaced directly by DoubleValuesSources\n\tObject sources that provide an indexed Shape object per-document.  I've added ShapeValuesSource and ShapeValues classes here to cover this.\n\n\n\nThis simplifies some things, and improves type-safety.  I need to run some benchmarks to ensure that I haven't inadvertently slowed stuff down anywhere.  David Smiley this is mostly your code, what do you think? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15905325",
            "date": "2017-03-10T16:06:43+0000",
            "content": "Hey; nice work Alan!  You've put a lot of work into this.  I suppose ValueSource is being phased out (or moved to Solr); which I welcome.\n\nDo we lose \"explaination\" for BBoxSimilarityValueSource.getValues? It's very very useful to see what the underlying computation is.\n\nnitpickt: SerializedDVStrategy.java declare the BytesRefBuilder field at the top of the inner class before the methods ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15905365",
            "date": "2017-03-10T16:29:00+0000",
            "content": "I suppose ValueSource is being phased out (or moved to Solr)\n\nThat's my hope - probably moving to Solr rather than removing it wholly, at least for the time being.\n\nDo we lose \"explaination\" for BBoxSimilarityValueSource.getValues?\n\nUnfortunately yes, DoubleValuesSource doesn't have an explain() API at the moment.  I suppose we could add one, with a default implementation, but I do like the simplicity of the current setup - Adrien Grand, do you have an opinion? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15905431",
            "date": "2017-03-10T17:20:13+0000",
            "content": "I like the simplicity of the current setup too, this is the reason why I like this new API much better. I haven't thought much about it yet, but I'd probably welcome a new method that would allow values sources to explain how their value is computed. Let's discuss it in another ticket, I don't think it should block this one? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15906430",
            "date": "2017-03-12T05:17:52+0000",
            "content": "Yes; bringing back some form of \"explain\" can be in another ticket. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15906558",
            "date": "2017-03-12T15:40:47+0000",
            "content": "I opened LUCENE-7741 for explanations ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16054168",
            "date": "2017-06-19T15:13:02+0000",
            "content": "Alan Woodward now that LUCENE-7741 is done, can you update this ticket to have the score explanations?  It would be nice to make a change like this in 7.0. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16058990",
            "date": "2017-06-22T08:31:35+0000",
            "content": "Here's an updated patch, with explanations included.  Will commit later today. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16058998",
            "date": "2017-06-22T08:44:39+0000",
            "content": "I only took a quick look but it looks great! ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16059519",
            "date": "2017-06-22T15:16:48+0000",
            "content": "I see DoubleValueSource.explain was changed from being abstract to having a default implementation. Does that really belong in this issue?\n\n(as an aside, reviewing extensive patch files like this is error-prone and a pain; it'd be nice to use other mechanisms) ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16059746",
            "date": "2017-06-22T17:48:34+0000",
            "content": "\n\tin LatLonPointSpatialField did you purposefully remove @SuppressWarnings(\"unchecked\") for the cast? If so why?  If not please put back.\n\tperhaps move GeoDistValueSourceParser.WrappedDoubleValueSource to  ValueSource.toDoubleValueSource (inverse of .asDoubleValueSource) ?\n\tSerializedDVStrategy.ShapeDocValueSource: You can now simply remove the BytesRefBuilder here.  I recall I once had this to avoid re-fetching the docValues.binaryValue() when callers sometimes call exists() but that's no longer pertinent with the move to an iteration based API.\n\tMaybe define ShapeValues as inner class of ShapeValueSource?\n\tWhy the changes to geo3d test stuff?\n\tWhy the change to DistanceStrategyTest?\n\n\n\nThanks again for all your work on this issue! ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16059868",
            "date": "2017-06-22T19:08:01+0000",
            "content": "Also ShapePredicate's javadocs are no longer correct as it's no longer a ValueSource.  This class used to be named ShapePredicateValueSource.  May I suggest renaming to ShapeValuesPredicate?  It does have a ShapeValueSource so it seems appropriate to reflect that in some way. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16061124",
            "date": "2017-06-23T15:35:28+0000",
            "content": "Thanks for the review David!  Here's an updated patch.\n\nI see DoubleValueSource.explain was changed from being abstract to having a default implementation\n\nAfter I implemented the exact same vanilla explain() method four times, I decided to pull it up   There hasn't been a release with an abstract explain(), so I didn't think it needed a new issue?  Maybe an amendment to the CHANGES entry is in order though.\n\nin LatLonPointSpatialField did you purposefully remove @SuppressWarnings(\"unchecked\") for the cast? \n\nNo, that was an error.  It's back.\n\nperhaps move GeoDistValueSourceParser.WrappedDoubleValueSource to  ValueSource.toDoubleValueSource (inverse of .asDoubleValueSource) ?\n\nDone\n\nSerializedDVStrategy.ShapeDocValueSource: You can now simply remove the BytesRefBuilder here\n\nDone\n\nMaybe define ShapeValues as inner class of ShapeValueSource?\n\nI'm less keen on this.  The analogy is with DoubleValuesSource/DoubleValues and LongValuesSource/LongValues, which are all separate classes.\n\nWhy the changes to geo3d test stuff?\n\nNo idea where that came from, have reverted it\n\nWhy the change to DistanceStrategyTest?\n\nValueSource needs to work around deleted docs.  DoubleValuesSource doesn't, it's all handled by whatever drives the search, so there's no point in testing it here.\n\nShapePredicate's javadocs are no longer correct as it's no longer a ValueSource\n\nRenamed, and improved the javadocs.\n\nI'm now getting a (very occasional) failure in Geo3dRptTest, do you think you could have a look?\n\nant test  -Dtestcase=Geo3dRptTest -Dtests.method=testOperations -Dtests.seed=CCFBCE7086968E3 -Dtests.locale=ar-BH -Dtests.timezone=Africa/Timbuktu -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n\n ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16061535",
            "date": "2017-06-23T21:42:19+0000",
            "content": "Your move of code to fromDoubleValuesSource didn't compile; see equals().  It was an easy fix.  BTW I find IntelliJ refactoring helps with code moves/renames.\n\nAll your updates to the patch are good & explanations to my questions.\n\nMore outdated javadocs: on SerializedDVStrategy.makeShapeValueSource method and same method in BBoxStrategy (legacy & not).   You could just keep this simple as \"Provides access to a Shape per document.\"\n\nRegarding the test (Geo3d) failure:  In SerializedDVStrategy.ShapeDocValueSource.ShapeValues.value when you reference the bytesRef, you assume the offset is 0 when in fact you should reference the offset from the bytesRef.  This bug caused this ShapeValues to always read the first shape (at offset 0) instead of the shape at the offset corresponding to the current doc.  This took me awhile to finally figure out \n\nDuring my debugging, I kept looking at IntersectsRPTVerifyQuery.createWeight where you get two TwoPhaseIterators, both with the same approximation reference (around line ~111).  I found this very confusing and thought I had found this to be a bug but I guess it's right.  My confusion is related to me not being sure why you changed ShapeValuesPredicate to be something that returns a TwoPhaseIterator.  Perhaps  you do this to express that the API is forward-only instead of, say, returning a random-access Bits (since the underlying docValues is also forward-only)?  I guess that I can understand though I'm not sure it's worth it over that (your call).  Over here I think the logic would be a little clearer if you declare the predFuncValues variable inside the anonymous class of the twoPhaseIterator a few lines below.  And mention in comments you're using the same approximation for both. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16061885",
            "date": "2017-06-24T09:41:07+0000",
            "content": "Your move of code to fromDoubleValuesSource didn't compile\n\nFixorated\n\nMore outdated javadocs\n\nDitto\n\nRegarding the test (Geo3d) failure\n\nThis too, thanks for digging\n\nDuring my debugging, I kept looking at IntersectsRPTVerifyQuery.createWeight\n\nYeah, this is confusing.  I've made the change you suggested, but the whole thing is still a bit odd.  I guess it's a form of two-phase iteration that you wrote before we had the core TwoPhaseIterator API?  There are several TODOs in there that are probably worth revisiting, but maybe in a separate issue. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16062343",
            "date": "2017-06-25T14:53:00+0000",
            "content": "I guess it's a form of two-phase iteration that you wrote before we had the core TwoPhaseIterator API?\n\nCompositeSpatialStrategy was developed immediately after TwoPhaseIterator and shipped in the same 5.2 release.  Any way, if you can think of ways to improve it, I'm all ears.  I'm dubious that turning ShapePredicateValueSource into a TwoPhaseIterator is clearer than what it was before \u2013 a boolean DocValues.  In a way, a TwoPhaseIterator is sort of a boolean DocValues, but for ShapePredicateValueSource it doesn't need/want an approximation.\n\nWhen you commit, remember to remove the @Seed in TestSolr4Spatial\n\nAny way +1 to this patch. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16064955",
            "date": "2017-06-27T14:54:24+0000",
            "content": "Commit 2f2e00ffe235ba590f43bf07dabd4201e6da53c6 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2f2e00f ]\n\nLUCENE-7737: Remove spatial-extras dependency on queries module ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16064957",
            "date": "2017-06-27T14:54:45+0000",
            "content": "Thanks for the reviews! ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16090519",
            "date": "2017-07-17T20:40:42+0000",
            "content": "Commit 6fcc7cd731715a14c6bb36c22a23eaa040271d72 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6fcc7cd ]\n\nLUCENE-7737: Guard against empty binary docvalues ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16097892",
            "date": "2017-07-24T02:56:16+0000",
            "content": "Commit 2642f28936b91b8f244e26563c85b708b9db24b9 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2642f28 ]\n\nLUCENE-7737: Guard against empty binary docvalues\n\n(cherry picked from commit 6fcc7cd) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16097893",
            "date": "2017-07-24T02:58:55+0000",
            "content": "Commit 13449c7a71002859fe3c427aa62e40ab432ac52e in lucene-solr's branch refs/heads/branch_7_0 from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=13449c7 ]\n\nLUCENE-7737: Guard against empty binary docvalues\n\n(cherry picked from commit 6fcc7cd) ",
            "author": "ASF subversion and git services"
        }
    ]
}