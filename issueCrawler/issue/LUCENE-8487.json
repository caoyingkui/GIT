{
    "id": "LUCENE-8487",
    "title": "Code Optimizations in FieldType",
    "details": {
        "components": [
            "core/other"
        ],
        "status": "Patch Available",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "1) Delete unnecessary if statement.\n\n// Line 281 method\npublic void setDimensions(int dimensionCount, int dimensionNumBytes) {\n  ...\n  if (dimensionCount == 0) {\n    if (dimensionNumBytes != 0) {\n      throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n    }\n  } else if (dimensionNumBytes == 0) {\n    if (dimensionCount != 0) {\n      throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n    }\n  }\n  ...\n}\n\nIn this code, we can see that the following if statement is unnecessary.\n\nif (dimensionCount != 0) {\n  throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n}\n\nBecause it is a condition that is already processed in the upper if statement\n (if dimensionCount == 0)\n\nSo I made the following code.\n\n// Line 281 method\npublic void setDimensions(int dimensionCount, int dimensionNumBytes) {\n  ...\n  if (dimensionCount == 0) {\n    if (dimensionNumBytes != 0) {\n      throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n    }\n  } else if (dimensionNumBytes == 0) {\n    throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n  }\n  ...\n}\n\n\n\n2) Simplify if statement\n\n// Line 417 method\npublic boolean equals(Object obj) {\n  if (this == obj) return true;\n  if (obj == null) return false;\n  ...\n  if (storeTermVectors != other.storeTermVectors) return false;\n  if (stored != other.stored) return false;\n  if (tokenized != other.tokenized) return false;\n  return true;\n}\n\n\nThe final if statement can be simplified.\n\n// Line 417 method\npublic boolean equals(Object obj) {\n  if (this == obj) return true;\n  if (obj == null) return false;\n  ...\n  if (storeTermVectors != other.storeTermVectors) return false;\n  if (stored != other.stored) return false;\n  return tokenized == other.tokenized;\n}\n\nBut I worry that change will hinder readability.\nFor that reason, if it is not good, I will not reflect it in the patch.",
    "attachments": {
        "LUCENE-8487.patch": "https://issues.apache.org/jira/secure/attachment/12938509/LUCENE-8487.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16604934",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 18s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 17s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  10m 37s \n  core in the patch passed.  \n\n\n  \n   \n  12m 36s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8487 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12938509/LUCENE-8487.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / b4a1548 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/86/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/86/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-09-05T20:58:16+0000"
        }
    ]
}