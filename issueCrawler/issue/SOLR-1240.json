{
    "id": "SOLR-1240",
    "title": "Numerical Range faceting",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "For faceting numerical ranges using many facet.query query arguments leads to unmanageably large queries as the fields you facet over increase. Adding the same faceting parameter for numbers which already exists for dates should fix this.",
    "attachments": {
        "SOLR-1240.patch": "https://issues.apache.org/jira/secure/attachment/12411534/SOLR-1240.patch",
        "SOLR-1240.use-nl.patch": "https://issues.apache.org/jira/secure/attachment/12457611/SOLR-1240.use-nl.patch",
        "SOLR-1240.include-default-lower.patch": "https://issues.apache.org/jira/secure/attachment/12472264/SOLR-1240.include-default-lower.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Gijs Kunze",
            "id": "comment-12723074",
            "date": "2009-06-23T13:41:04+0000",
            "content": "My first try, my Java skill are not that great but it seems to work.\n\nTest org.apache.solr.TestDistributedSearch seems to fail with this patch, I couldn't find out why exactly, my dev environment is not setup for Java debugging. I'm hoping it's simply because an extra lst tag is included in the facet results. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12748350",
            "date": "2009-08-27T12:17:52+0000",
            "content": "Let's please stop adding stuff to SimpleFacets.  See SOLR-792 for an approach of adding additional faceting components instead of overloading the now not-so-SimpleFacets.    "
        },
        {
            "author": "Gijs Kunze",
            "id": "comment-12748374",
            "date": "2009-08-27T14:01:24+0000",
            "content": "I'd love to add it as a separate component, maybe moving date faceting to the same component since date faceting and numerical faceting are practically identical. But as I said, I'm not really that proficient in Java, haven't done any real Java programming since Swing was still new. So I'm not really sure I'm up to the task.\n\nLooking at SOLR-792 as an example I looked at converting my patch but I think some re-factoring on the side of SimpleFacets might be in order first. My patch makes use of the parseParams method (which handles tagging/exclusion local parameters) and I can't see how to cleanly make use of that functionality from a separate component. I could copy the method and the member variables it manipulates to the component but I'd rather not perpetrate that code maintenance no-no. "
        },
        {
            "author": "Gijs Kunze",
            "id": "comment-12854510",
            "date": "2010-04-07T14:15:21+0000",
            "content": "Solr 1.4 version of Numerical Range Faceting attached. Works (only) on TrieFields now. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12886964",
            "date": "2010-07-10T01:05:36+0000",
            "content": "Updated version of Gijs previous patch that applies cleanly to trunk\n\nMisc comments on the patch...\n\n\n\ti agree with erik, we should split up SimpleFacets and FacetComponent, but that's a seperate probelm.  if the patch works well, let's commit and then refactor \u2013 besides: there is enough similarity with date faceting that they should stay together and share code anyway, so let's just put number faceting with date faceting now and move them together later when we split up facet.query, facet.field and facet.date/number\n\t\n\t\tI think in an ideal world: we could eliminate facet.date and facet.number and just let people use \"facet.range=fieldName\" along with legitimate values for the other facet.range.* params and have it do the right thing depending on the type of fieldName ... but it might take a little while to get there\n\t\n\t\n\tNote: current patch breaks distributed test, but i think that's just a foolish assumption on the part of the test.\n\tfunctionality currently breaks if any of the numeric params is a float value \u2013 the code does lots of special testing to see if the field is a \"float\" field or not, but it still tries to parse every param as both a long and a float \u2013 we need to fix that so any number is valid (even if the field type is \"long\" it's totally reasonable for people to ask for a gap of \"0.5\")\n\tthe facet.date.include param was added after this patch was contributed, this patch uses it's own param/model for dealing with inclusion/exclusion \u2013 it should be changed to match the conventions dates uses\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12886985",
            "date": "2010-07-10T03:31:23+0000",
            "content": "Updated Patch...\n\n\tchanged numeric faceting to use \"facet.number.include\" param with the same semantics as \"facet.date.include\".  To make this cleaner i renamed FacetParams.FacetDateInclude to the more generic FacetParams.FacetRangeInclude (it has never been included in a release)\n\tlikewise renamed FacetParams.FacetNumberOther to FacetParams.FacetRangeOther and deprecated FacetParams.FacetDateOther, changing the usages in SimpleFacets to the new more generic enumeration.\n\tfixed numeric faceting so that it supports facet.mincount (didn't notice it was missing that before)\n\tfixed the bug that was causeing TestDistributed to fail (FacetComponent needed to add an empty \"facet_number\" block for consistency ... at least until we add support for distributed numeric faceting)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12886987",
            "date": "2010-07-10T03:34:05+0000",
            "content": "side comment:  i  think we should rename all of these new params \"facet.range*\" instead of \"facet.number*\" ... even if we can't merge the code and make it  autodetecd dates using the word \"range\" to describe the type of faceting seems more clear then \"number\" "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12889379",
            "date": "2010-07-16T22:49:47+0000",
            "content": "Checkoint, two main changes over the previous patch:\n\n1) before changing anything else, i went ahead and added some tests using a TrieFloat field .. this is ripe for refactoring so that it will work for double as well, but we also need some decent int/long testing to.\n\n2) renamed from \"number\" facets to \"range\" facets (so all the params now start with \"facet.range....\" instead of \"facet.number...\"\n\nMy next step is to fix the problem with not being able to specify decimal values in params because every arg is also parsed as a Long.  MY idea is to refactor things so we use a new \"StrNumber\" type class that knows about the FieldType and hides the details of the underlying type \u2013 so the logic for looping over teh ranges can just think in terms of adding \"Strings\"\n\nIf it works out, this refactoring should be able to encapsulate the existing date faceting as well.  (and probably support range faceting on legacy Sortable_Field types)\n\n(Gijs: have you had a change to review any of these changes to your original patch?  I'd love to know what you think) "
        },
        {
            "author": "Gijs Kunze",
            "id": "comment-12889786",
            "date": "2010-07-19T08:24:44+0000",
            "content": "Hoss,  I haven't taken a very good look yet but from what I've read in the comments I think all the changes are good ones.\n\nI'm currently working on a pretty strict deadline but afterwards I'll see on testing your patch with our project and see if I run into any issues (which I doubt). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12890487",
            "date": "2010-07-20T22:27:30+0000",
            "content": "\nCheckpoint, updated patch...\n\n\n\tWorks for all TrieField types (ie: solved the float parse\n  problem) by using delegation to a new RangeEndpointCalculator\n  abstraction.  we pick the Impl based on the field type, and then use\n  it fo all the math and comparisons.  (this is what my previous \n  \"StrNumber\" idea morphed into once i started working on it .. seemed\n  simpler to understand)\n\tadded tests for double/long/int ranges\n\n\n\nNote regarding one of my previous comments...\n\n(even if the field type is \"long\" it's totally reasonable for people to ask for a gap of \"0.5\")\n\nthis is not supported by my updated patch .. the more i started\nthinking about it the less it made sense \u2013 it would only be useful to\nlet people do specify a \"float\" gap on a \"long\" field if the field\ntypes would then let you create range queries that would \"do the right\nthing\" when the end points where fractional \u2013 and that's just not the\ncase.  so for now the \"gap\" values have to be parsable using the same\ntype as the field \u2013 but i left flexibility in there so that it\ncould be added later (this was largely in anticipation of directly \nsupporting Dates where the \"gap\" is a DateMath string)\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12890514",
            "date": "2010-07-21T00:40:39+0000",
            "content": "Updated patch.  I think this may be ready to commit.\n\nChanges to previous patch...\n\n\n\n\tfixed a bug in one test where i was ignoring the fieldName\n\tmove \"metadata\" info a new sub NamedList called \"meta\" - something that was kinda overlooked with date faceting was the co-mingling of facet counts (named after the low point of the range) with other metadata \u2013 which is extra ugly now that things like 'gap' and 'end' can also be of type \"int\".  since this facet_range section is all new it doesn't need to have the exact same structure as facet_date, so i think we should clean it up and keep the \"range\" counts distinct from the other metadata\n\tmade it support all of the Sortable(Number)Field types, refactored the tests to verify this.\n\tmake it support Date fields directly \u2013 this means you can use facet.range=dateFieldName&facet.range.start=NOW/MONTH&facet.range.gap=... and the \"date\" type faceting will show up in the \"facet_ranges\" section.  the old \"facet.date\" stuff still works \u2013 but all that code is duplicated, and not shared (yet)\n\trefactored existing date faceting tests to both  facet.range and facet.date usage (which was kind of a pain combined with the \"meta\" change \u2013 but it  works)\n\n\n\nfeedback would definitely be appreciated "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12890517",
            "date": "2010-07-21T00:52:55+0000",
            "content": "Using the example data, here's an example of a monster query that uses facet.date and facet.range on the same field with the same start/end/gap as well as doing facet.range on the (float) price and (ing) popularity fields ...\n\nhttp://localhost:8983/solr/select/?wt=xml&indent=true&echoParams=none&q=*:*&rows=0&facet.range=price&f.price.facet.range.start=-2.3&f.price.facet.range.end=145.66&f.price.facet.range.gap=13.7432&facet.date=manufacturedate_dt&facet.date.start=NOW/YEAR-5YEARS&facet.date.end=NOW/YEAR%2B1DAY&facet.date.gap=%2B1YEAR&facet=true&facet.range.other=all&facet.range=manufacturedate_dt&f.manufacturedate_dt.facet.range.start=NOW/YEAR-5YEARS&f.manufacturedate_dt.facet.range.end=NOW/YEAR%2B1YEAR&f.manufacturedate_dt.facet.range.gap=%2B1YEAR&facet.range=popularity&facet.range.start=-2&facet.range.gap=3&facet.range.end=11\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n\n<lst name=\"responseHeader\">\n  <int name=\"status\">0</int>\n  <int name=\"QTime\">5</int>\n</lst>\n<result name=\"response\" numFound=\"19\" start=\"0\"/>\n<lst name=\"facet_counts\">\n  <lst name=\"facet_queries\"/>\n  <lst name=\"facet_fields\"/>\n\n  <lst name=\"facet_dates\">\n    <lst name=\"manufacturedate_dt\">\n      <int name=\"2005-01-01T00:00:00Z\">2</int>\n      <int name=\"2006-01-01T00:00:00Z\">9</int>\n      <int name=\"2007-01-01T00:00:00Z\">0</int>\n      <int name=\"2008-01-01T00:00:00Z\">0</int>\n      <int name=\"2009-01-01T00:00:00Z\">0</int>\n\n      <int name=\"2010-01-01T00:00:00Z\">0</int>\n      <str name=\"gap\">+1YEAR</str>\n      <date name=\"end\">2011-01-01T00:00:00Z</date>\n    </lst>\n  </lst>\n  <lst name=\"facet_ranges\">\n    <lst name=\"price\">\n\n      <lst name=\"meta\">\n        <float name=\"gap\">13.7432</float>\n        <float name=\"end\">148.87521</float>\n        <int name=\"before\">0</int>\n        <int name=\"after\">10</int>\n        <int name=\"between\">7</int>\n\n      </lst>\n      <int name=\"-2.3\">2</int>\n      <int name=\"11.4432\">2</int>\n      <int name=\"25.186401\">0</int>\n      <int name=\"38.929604\">0</int>\n      <int name=\"52.672806\">0</int>\n\n      <int name=\"66.41601\">2</int>\n      <int name=\"80.15921\">1</int>\n      <int name=\"93.90241\">0</int>\n      <int name=\"107.645615\">0</int>\n      <int name=\"121.38882\">0</int>\n      <int name=\"135.13202\">0</int>\n\n    </lst>\n    <lst name=\"manufacturedate_dt\">\n      <lst name=\"meta\">\n        <str name=\"gap\">+1YEAR</str>\n        <date name=\"end\">2011-01-01T00:00:00Z</date>\n        <int name=\"before\">0</int>\n        <int name=\"after\">0</int>\n\n        <int name=\"between\">11</int>\n      </lst>\n      <int name=\"2005-01-01T00:00:00Z\">2</int>\n      <int name=\"2006-01-01T00:00:00Z\">9</int>\n      <int name=\"2007-01-01T00:00:00Z\">0</int>\n      <int name=\"2008-01-01T00:00:00Z\">0</int>\n\n      <int name=\"2009-01-01T00:00:00Z\">0</int>\n      <int name=\"2010-01-01T00:00:00Z\">0</int>\n    </lst>\n    <lst name=\"popularity\">\n      <lst name=\"meta\">\n        <int name=\"gap\">3</int>\n        <int name=\"end\">13</int>\n\n        <int name=\"before\">0</int>\n        <int name=\"after\">0</int>\n        <int name=\"between\">18</int>\n      </lst>\n      <int name=\"-2\">3</int>\n      <int name=\"1\">2</int>\n\n      <int name=\"4\">13</int>\n      <int name=\"7\">7</int>\n      <int name=\"10\">2</int>\n    </lst>\n  </lst>\n</lst>\n</response>\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12890728",
            "date": "2010-07-21T13:53:15+0000",
            "content": "Thanks for the example, makes it so much easier  to casually review.\n\nRather than embedding \"meta\" to the list containing the counts, perhaps we should bite the bullet and add an additional level for the counts.  It would have been useful for other faceting types as well (and still would be in the future I think).  It should be much easier (and more consistent) for clients to handle, rather than trying to exclude the thing called \"meta\" when building the list of counts returned.\n\n\n    <lst name=\"popularity\">\n        <int name=\"gap\">3</int>\n        <int name=\"end\">13</int>\n        <int name=\"before\">0</int>\n        <int name=\"after\">0</int>\n        <int name=\"between\">18</int>\n        <lst name=\"counts\">\n            <int name=\"-2\">3</int>\n            <int name=\"1\">2</int>\n            <int name=\"4\">13</int>\n            <int name=\"7\">7</int>\n            <int name=\"10\">2</int>\n        </lst>\n    </lst>\n\n\n\nAlso, I've never been a fan of adding the empty \"facet_range\" list when there are no facet.range commands... but I understand it's consistent with the other facet types. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12891321",
            "date": "2010-07-22T20:30:41+0000",
            "content": "Rather than embedding \"meta\" to the list containing the counts, perhaps we should bite the bullet and add an additional level for the counts.\n\nyeah ... i'm on board with that idea.  it's a trivial change.\n\nany comments on the implementation?\n\ni think it's fairly solid \u2013 the one wish i have though is to try and gut the existing date faceting code to just use the new code \u2013 but i can't see a very easy way to do that while dealing with the differnet param names .. suggestions? "
        },
        {
            "author": "Gijs Kunze",
            "id": "comment-12891528",
            "date": "2010-07-23T09:07:00+0000",
            "content": "I like the extra level, it'll make my response parser a little bit less messy. But if I may be so bold as to make another suggestion (which could also apply to other forms of faceting). On the client side of things it is starting to become more difficult to actually apply the correct filter queries to filter on the facets. How about an option to request a more verbose output, something like this:\n\n\n<lst name=\"popularity\">\n        <int name=\"start\">-2</int>\n        <int name=\"gap\">3</int>\n        <int name=\"end\">13</int>\n        <int name=\"before\">0</int>\n        <int name=\"after\">0</int>\n        <int name=\"between\">18</int>\n        <lst name=\"counts\">\n            <lst name=\"-2\">\n                <int name=\"start\">-2</int>\n                <int name=\"end\">1</int>\n                <str name=\"filter\">popularity:([-2 TO 1])</int>\n                <int name=\"count\">3</int>\n            <lst>\n            <lst name=\"1\">\n                <int name=\"start\">1</int>\n                <int name=\"end\">4</int>\n                <str name=\"filter\">popularity:([1 TO 4])</int>\n                <int name=\"count\">2</int>\n            <lst>\n            <lst name=\"4\">\n                <int name=\"start\">4</int>\n                <int name=\"end\">7</int>\n                <str name=\"filter\">popularity:([4 TO 7])</int>\n                <int name=\"count\">13</int>\n            <lst>\n            <lst name=\"7\">\n                <int name=\"start\">7</int>\n                <int name=\"end\">10</int>\n                <str name=\"filter\">popularity:([7 TO 10])</int>\n                <int name=\"count\">7</int>\n            <lst>\n            <lst name=\"10\">\n                <int name=\"start\">10</int>\n                <int name=\"end\">13</int>\n                <str name=\"filter\">popularity:([10 TO 13])</int>\n                <int name=\"count\">2</int>\n            <lst>\n        </lst>\n</lst>\n\n\n\nof course, if you use the include parameter to get more useful facets, the filter would be something like:\n\n\n                <str name=\"filter\">popularity:([10 TO *] AND {* TO 13})</int>\n\n\n\nThis would make client side code a lot easier I think.\n\np.s. I noticed the start parameter was missing from your xml example, is that on purpose or a slight oversight? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12891749",
            "date": "2010-07-23T19:17:30+0000",
            "content": "How about an option to request a more verbose output, something like this: \n\nI'm not opposed to having a more verbose output option \u2013 but it should definitely be optional.  I'd like to suggest that we tackle that in an independent Jira issue.  The main question I have for you know is: do you see any obvious changes we should make to the params/format introduced in this issue in anticipation of making it simple to add a more verbose option/format in a subsequent issue?\n\n(Personally: i'm not really interested in working on the verbose format.  I think putting the same effort into something like SOLR-1896 would be more useful: it would keep the response format small, and make it trivial for people to \"filter\" on individual ranges, even with complex \"include\" params)\n\np.s. I noticed the start parameter was missing from your xml example, is that on purpose or a slight oversight?\n\nno ... we've never included \"start\" in the date faceting (so i didn't include it here) because it's always the value of the first constraint count ... the only reason \"end\" was ever included is because it isn't immediately obvious what the upper bound of the last range is from the gap: the \"hardend\" param can modify it.\n\ndo you think we really need to explicitly label the start?  if we add an optional verbose format that can obviously include it, is it really needed in this simple output? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12891879",
            "date": "2010-07-24T00:09:07+0000",
            "content": "Updated patch that removes the \"meta\" NamedList and instead pushes the range counts down into a new \"counts\" NamedList.  tests have been updated as well.\n\nSame example as before...\n\nhttp://localhost:8983/solr/select/?wt=xml&indent=true&echoParams=none&q=*:*&rows=0&facet.range=price&f.price.facet.range.start=-2.3&f.price.facet.range.end=145.66&f.price.facet.range.gap=13.7432&facet.date=manufacturedate_dt&facet.date.start=NOW/YEAR-5YEARS&facet.date.end=NOW/YEAR%2B1DAY&facet.date.gap=%2B1YEAR&facet=true&facet.range.other=all&facet.range=manufacturedate_dt&f.manufacturedate_dt.facet.range.start=NOW/YEAR-5YEARS&f.manufacturedate_dt.facet.range.end=NOW/YEAR%2B1YEAR&f.manufacturedate_dt.facet.range.gap=%2B1YEAR&facet.range=popularity&facet.range.start=-2&facet.range.gap=3&facet.range.end=11\n\nnew output...\n\n\n<lst name=\"facet_counts\">\n  <lst name=\"facet_queries\"/>\n  <lst name=\"facet_fields\"/>\n  <lst name=\"facet_dates\">\n    <lst name=\"manufacturedate_dt\">\n      <int name=\"2005-01-01T00:00:00Z\">2</int>\n      <int name=\"2006-01-01T00:00:00Z\">9</int>\n      <int name=\"2007-01-01T00:00:00Z\">0</int>\n      <int name=\"2008-01-01T00:00:00Z\">0</int>\n      <int name=\"2009-01-01T00:00:00Z\">0</int>\n      <int name=\"2010-01-01T00:00:00Z\">0</int>\n      <str name=\"gap\">+1YEAR</str>\n      <date name=\"end\">2011-01-01T00:00:00Z</date>\n    </lst>\n  </lst>\n  <lst name=\"facet_ranges\">\n    <lst name=\"price\">\n      <lst name=\"counts\">\n        <int name=\"-2.3\">2</int>\n        <int name=\"11.4432\">2</int>\n        <int name=\"25.186401\">0</int>\n        <int name=\"38.929604\">0</int>\n        <int name=\"52.672806\">0</int>\n        <int name=\"66.41601\">2</int>\n        <int name=\"80.15921\">1</int>\n        <int name=\"93.90241\">0</int>\n        <int name=\"107.645615\">0</int>\n        <int name=\"121.38882\">0</int>\n        <int name=\"135.13202\">0</int>\n      </lst>\n      <float name=\"gap\">13.7432</float>\n      <float name=\"end\">148.87521</float>\n      <int name=\"before\">0</int>\n      <int name=\"after\">10</int>\n      <int name=\"between\">7</int>\n    </lst>\n    <lst name=\"manufacturedate_dt\">\n      <lst name=\"counts\">\n        <int name=\"2005-01-01T00:00:00Z\">2</int>\n        <int name=\"2006-01-01T00:00:00Z\">9</int>\n        <int name=\"2007-01-01T00:00:00Z\">0</int>\n        <int name=\"2008-01-01T00:00:00Z\">0</int>\n        <int name=\"2009-01-01T00:00:00Z\">0</int>\n        <int name=\"2010-01-01T00:00:00Z\">0</int>\n      </lst>\n      <str name=\"gap\">+1YEAR</str>\n      <date name=\"end\">2011-01-01T00:00:00Z</date>\n      <int name=\"before\">0</int>\n      <int name=\"after\">0</int>\n      <int name=\"between\">11</int>\n    </lst>\n    <lst name=\"popularity\">\n      <lst name=\"counts\">\n        <int name=\"-2\">3</int>\n        <int name=\"1\">2</int>\n        <int name=\"4\">13</int>\n        <int name=\"7\">7</int>\n        <int name=\"10\">2</int>\n      </lst>\n      <int name=\"gap\">3</int>\n      <int name=\"end\">13</int>\n      <int name=\"before\">0</int>\n      <int name=\"after\">0</int>\n      <int name=\"between\">18</int>\n    </lst>\n  </lst>\n</lst>\n\n "
        },
        {
            "author": "Gijs Kunze",
            "id": "comment-12892222",
            "date": "2010-07-26T09:14:20+0000",
            "content": "\np.s. I noticed the start parameter was missing from your xml example, is that on purpose or a slight oversight?\n\nno ... we've never included \"start\" in the date faceting (so i didn't include it here) because it's always the value of the first constraint count ... the only reason \"end\" was ever included is because it isn't immediately obvious what the upper bound of the last range is from the gap: the \"hardend\" param can modify it.\n\ndo you think we really need to explicitly label the start? if we add an optional verbose format that can obviously include it, is it really needed in this simple output?\n\nAhh ok, that makes sense. However with the mincount parameter you do not always have the start parameter, nor do you always have both values of a single count. This not be much of an issue with dates and integers as you can simply add the gap to the start value but with floating point numbers I'm a little more wary adding the gap to floating point values due to rounding errors.\n\nThe verbose response option was just a thought. While some parts might be useful thinking more about it the filter response isn't as useful as I thought it would be while writing the post. It's just that I'd like it if there were more of a link between the facets one selects and the filters based on those facets. But I guess that's another discussion. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12892428",
            "date": "2010-07-26T19:37:10+0000",
            "content": "Ahh ok, that makes sense. However with the mincount parameter you do not always have the start parameter, nor do you always have both values of a single count. This not be much of an issue with dates and integers as you can simply add the gap to the start value but with floating point numbers I'm a little more wary adding the gap to floating point values due to rounding errors.\n\nWhoa .. you just blew my mind.\n\nSeriously, i'm not sure how that was so horribly overlooked when mincount support was added to date faceting \u2013 thank you for bringing this up.\n\nThe possibility of rounding errors for an arbitrary range doesn't concern me too much, but i can see how in some cases it might be a factor if the client code uses differnet floating point precision then Java does \u2013 like i said, i think something like SOLR-1896 is hte best way to solve all of that stuff.  What does concern me is your point about how the \"first\" range might not be there at all because of the mincount \u2013 that makes it impossible to do anything useful with the \"before\" and \"between\" counts (regardless of any floating point rounding errors) unless you have echoParams or some other way to \"know\" what the start value was \u2013 but by that logic you don't need to know what the \"gap\" is either \u2013 people shouldn't be required to know what exactly all the query params were to make sense of the data.\n\nwe should definitely add the \"start\" value.\n\nIt's just that I'd like it if there were more of a link between the facets one selects and the filters based on those facets. But I guess that's another discussion.\n\nAgreed ... i'd definitely like to see SOLR-1896 make it trivial to just refer to the \"low\" value of any range that comes back from range faceting in an \"fq and have solr automaticly build a range filter with the appropriate upper bound and inclusion properties. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12892950",
            "date": "2010-07-27T21:53:35+0000",
            "content": "updated patch to include the \"start\" values ... did this for range faceting and the legacy date faceting (where it shouldn't cause any problems)\n\nI think this is good to go, for both 3.1 and 4.0\n\nobjections? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12893799",
            "date": "2010-07-29T20:06:51+0000",
            "content": "Committed revision 980555. - trunk "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12893802",
            "date": "2010-07-29T20:18:01+0000",
            "content": "FYI: still planning on back merge this to 3x, but there were some weird merge conflicts that i need to resolve after lunch "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12893804",
            "date": "2010-07-29T20:20:37+0000",
            "content": "Ah ... ok, the problem is that i never merged SOLR-397 to 3x ... doing that is pretty much a pre-req for merging this to the 3x branch. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12893835",
            "date": "2010-07-29T21:48:36+0000",
            "content": "Committed revision 980592 - trunk typo fix "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12893865",
            "date": "2010-07-29T23:59:28+0000",
            "content": "Committed revision 980610. - 3x branch merge\n\nthis merge involved a lot of extra merging for previous comments SimpleFacetsTest because there were just so many refactoring style changes that it just made more sense to merge them all in (they didn't depend on any new functionality not already in 3x)\n\nBig thanks to Gijs for kicking off this issue, pointing out how easy it was to generalize the date faceting logic to work for numbers, and for catching the issue with facet mincount. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12896405",
            "date": "2010-08-08T19:49:45+0000",
            "content": "Hoss or Gijs,\n\nAny chance one of you can add the appropriate docs to http://wiki.apache.org/solr/SimpleFacetParameters? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12897339",
            "date": "2010-08-11T17:03:23+0000",
            "content": "FYI, I added docs to the link above.  If one of you can review, that would be great. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12917238",
            "date": "2010-10-02T18:50:48+0000",
            "content": "Something I just noticed when using JSON: it looks like a SimpleOrderedMap is used instead of a NamedList for the facet counts (indicating that having things as a map is more important than preserving order).\n\nNormal field faceting uses a NamedList for the counts to favor preserving order.  Should this be consistent? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12922723",
            "date": "2010-10-19T21:22:10+0000",
            "content": "Normal field faceting uses a NamedList for the counts to favor preserving order. Should this be consistent?\n\nHmmm.... I wrote it to be consistent with date faceting which has always used SimpleOrderedMap ... not sure why.\n\nI think you are right though, NamedList makes more sense (and range faceting's output is already not output compatible with date faceting, so it's not a big deal) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12922742",
            "date": "2010-10-19T21:58:30+0000",
            "content": "one line patch to make the \"counts\" section for each field use a NamedList instead of aSimpleOrderedMap.  This means that the \"fields\" and \"metadata\" (gap, start, between, after, etc...) structures are still maps with simple key lookups, but when you start looking at the individual rnages and counts they are controlled by json.nl.\n\nSame example as before, with \"wt=json&json.nl=arrarr\"\n\n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":6},\n  \"response\":{\"numFound\":20,\"start\":0,\"docs\":[]\n  },\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{},\n    \"facet_dates\":{\n      \"manufacturedate_dt\":{\n        \"2005-01-01T00:00:00Z\":2,\n        \"2006-01-01T00:00:00Z\":9,\n        \"2007-01-01T00:00:00Z\":0,\n        \"2008-01-01T00:00:00Z\":0,\n        \"2009-01-01T00:00:00Z\":0,\n        \"2010-01-01T00:00:00Z\":0,\n        \"gap\":\"+1YEAR\",\n        \"start\":\"2005-01-01T00:00:00Z\",\n        \"end\":\"2011-01-01T00:00:00Z\"}},\n    \"facet_ranges\":{\n      \"price\":{\n        \"counts\":\n        [\n          [\"-2.3\",2],\n          [\"11.4432\",2],\n          [\"25.186401\",0],\n          [\"38.929604\",0],\n          [\"52.672806\",0],\n          [\"66.41601\",2],\n          [\"80.15921\",1],\n          [\"93.90241\",0],\n          [\"107.645615\",0],\n          [\"121.38882\",0],\n          [\"135.13202\",0]],\n        \"gap\":13.7432,\n        \"start\":-2.3,\n        \"end\":148.87521,\n        \"before\":0,\n        \"after\":10,\n        \"between\":7},\n      \"manufacturedate_dt\":{\n        \"counts\":\n        [\n          [\"2005-01-01T00:00:00Z\",2],\n          [\"2006-01-01T00:00:00Z\",9],\n          [\"2007-01-01T00:00:00Z\",0],\n          [\"2008-01-01T00:00:00Z\",0],\n          [\"2009-01-01T00:00:00Z\",0],\n          [\"2010-01-01T00:00:00Z\",0]],\n        \"gap\":\"+1YEAR\",\n        \"start\":\"2005-01-01T00:00:00Z\",\n        \"end\":\"2011-01-01T00:00:00Z\",\n        \"before\":0,\n        \"after\":0,\n        \"between\":11},\n      \"popularity\":{\n        \"counts\":\n        [\n          [\"-2\",3],\n          [\"1\",2],\n          [\"4\",13],\n          [\"7\",7],\n          [\"10\",2]],\n        \"gap\":3,\n        \"start\":-2,\n        \"end\":13,\n        \"before\":0,\n        \"after\":0,\n        \"between\":18}}}}\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12922744",
            "date": "2010-10-19T22:02:12+0000",
            "content": "reopening to give visibility to the NamedList vs SimpleOrderedMap consideration.\n\nI'm with Yonik leaning towards switching to NamedList for \"counts\" - anybody else have an opinion? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12983925",
            "date": "2011-01-19T23:02:11+0000",
            "content": "Looks like nobody objects.  Since this is a little API change to 3.1, we should get it in soon before it's more frozen. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12986085",
            "date": "2011-01-24T23:04:37+0000",
            "content": "Thanks for the poke yonik, i totally forgot i re-opened this.\n\ncommitted the one line change to both 3x and trunk "
        },
        {
            "author": "David Smiley",
            "id": "comment-12994661",
            "date": "2011-02-15T04:46:40+0000",
            "content": "Two comments:\n1. I think we should let it be known that \"facet.date\" is deprecated in 3.1.  That way it can be removed in a future release without waiting yet another release.\n2. I think it's very odd that the default for the include parameter is for both edges to be inclusive. This means double-counting! Yes, that's how it used to work, but I argue it never should have worked that way and I don't think anyone is actually depending on this behavior. So backwards-compatibility is moot. I propose \"lower\" be the default. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12996167",
            "date": "2011-02-18T00:35:54+0000",
            "content": "I think we should let it be known that \"facet.date\" is deprecated in 3.1. That way it can be removed in a future release without waiting yet another release.\n\ngood catch ... i thought i had done that....\n\nCommitted revision 1071842. - trunk\nCommitted revision 1071843. - 3x\n\n...i'll also add a note to the wiki\n\nI think it's very odd that the default for the include parameter is for both edges to be inclusive. This means double-counting! Yes, that's how it used to work, but I argue it never should have worked that way and I don't think anyone is actually depending on this behavior. So backwards-compatibility is moot. I propose \"lower\" be the default.\n\nHmmm... i think i disagree with you there ... in no particular order...\n\n\n\tincluding both edges is the most common convention used for range queries (ie: \n\nfoo:[5 TO 10]\n\n so i think it makes sense for the gap ranges generated by range faceting to be consistent by default.\n\tI don't really feel like there is any compelling reason why \"lower\" would make a better default then \"upper\" or \"lower,edge\" or \"upper,edge\", etc... in all of those cases there wouldn't be double counting, and equally valid arguments could be made for all of them \u2013 but ultimately it would come down to specific use cases.\n\tthe current default \u2013 while certainly not ideal, is at least consistent with some other things for people who are already familiar with them (ie: legacy date faceting, and my first point about common use of range queries above)\n\tit's soooooooo easy for people to set their own default facet.range.include to whatever they want, i really don't see much harm in the current one.\n\n\n\nUltimately: double counting may be something silly and legacy, but it's easy to change and none of the other options would make indisputably better defaults, so why not at least be consistent with our silly legacy? \n\n(anybody else have an opinion? I've got no qualms about changing my mind if i'm in the minority here) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12996183",
            "date": "2011-02-18T01:02:12+0000",
            "content": "including both edges is the most common convention used for range queries\n\nEsp since syntax like [10 TO 20} wasn't supported until 3.1\n\nThat said, it does feel like the most common expectation is to not double-count.\n\nShopping sites may list ranges like 10-25,25-50,50-100, even when the ranges are exclusive, but that's just because it looks ugly to list 10-24.99, etc. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12996236",
            "date": "2011-02-18T04:59:54+0000",
            "content": "Of course I totally agree with Yonik.  I don't care that much what the default include is (upper, lower, ...) as long as it doesn't double-count. Double-counting is bad \u2013 it can lead to a bad user experience. There's something about \"lower\" that I feel makes it slightly better than \"upper\" but I can't really explain the rationale. I don't think there's any point in compliance with legacy if nobody depended on the behavior (they couldn't specify the behavior before either).  Just because its easy to set the include, doesn't mean the default is arbitrary.  Any way, if the default remains to double-count, I'm going to insist that my readers for the second edition of my book change this value. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13000497",
            "date": "2011-02-28T20:14:38+0000",
            "content": "It wasn't clear to me from yonik's comment what he thought was the lesser of two evils \u2013 but i clarified with him on IRC that he agreed with David.\n\nthat makes it 2 to 1 in favor of changing it, so i'm on board. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13000643",
            "date": "2011-03-01T01:08:53+0000",
            "content": "patch that switches facet.range to default to \"lower\" with necessary changes to tests "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13000659",
            "date": "2011-03-01T01:42:40+0000",
            "content": "Committed SOLR-1240.include-default-lower.patch ...\n\nCommitted revision 1075603. - trunk\nCommitted revision 1075613. - 3x\n\nDavid: thanks for the prodding about facet.range.include "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013078",
            "date": "2011-03-30T15:45:28+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}