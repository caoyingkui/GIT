{
    "id": "SOLR-7878",
    "title": "Use SortedNumericDocValues (efficient sort & facet on multi-valued numeric fields)",
    "details": {
        "components": [
            "Facet Module"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Lucene has a SortedNumericDocValues (i.e. multi-valued numeric DocValues), ever since late in the 4x versions.  Solr's TrieField.createFields unfortunately still uses SortedSetDocValues for the multi-valued case.  SortedNumericDocValues is more efficient than SortedSetDocValues; for example there is no 'ordinal' mapping for sorting/faceting needed.  \n\nUnfortunately, updating Solr here would be quite a bit of work, since there are backwards-compatibility concerns, and faceting code would need a new code path implementation just for this.  Sorting is relatively simple thanks to SortedNumericSortField, and today multi-valued sorting isn't directly possible.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-11T23:15:24+0000",
            "author": "Hoss Man",
            "content": "...and today multi-valued sorting isn't directly possible.\n\nCan you explain what you mean by that?\n\nWith SOLR-2522 + LUCENE-6609 you can do things like: sort=field(multi_valued_numeric_field,min)+asc and it directly uses SortedSetSortField under the covers. (although it's admittedly very new so you may have just overlooked that it was recently added ... like a day before you opened this jira  )\n\nNOTE: i agree, it would be nice to figure out a way to move towards SortedNumericDocValues, and/or maybe even Mike's cool work in LUCENE-6697, i just want to clarify whether this would purely be about optimizing current performance and minimizing code complexity, or if there is some actual functionality of SortedNumericDocValues that you know we are currently missing out on that i'm not aware of. ",
            "id": "comment-14692461"
        },
        {
            "date": "2015-08-12T03:32:06+0000",
            "author": "David Smiley",
            "content": "With SOLR-2522 + LUCENE-6609 you can do things like ...\n\nYes I was aware of that already when I wrote this issue.  I should have referenced it.  My choice of words is perhaps nuanced... I said multi-valued sorting isn't directly possible \u2013 as in you can't sort on it normally; you have to know to use special functions you wrote recently.  Your work on those things coincided with me solving the multi-valued sort problem for a customer and I was considering open-sourcing but there's less need now. ",
            "id": "comment-14692854"
        },
        {
            "date": "2015-08-28T20:52:08+0000",
            "author": "Hoss Man",
            "content": "I said multi-valued sorting isn't directly possible \u2013 as in you can't sort on it normally; you have to know to use special functions you wrote recently.\n\nOk, cool \u2013 but just to clarify, you need to know that new syntax to sort on a multivalued field, but the implementation does in fact \"directly\" use SortedSetSortField.   \n\nBecause of LUCENE-6609 there's no function overhead involved in sorting on field(foo,max)  (unless, of course, you wrap that function in another function) which is what i was worried you thought was the case because of the word \"directly\" ... the implementation does in fact directly use SortedSetSortField, which should be (unless I'm missing something) just as efficient as SortedNumericSortField.\n\n(and no matter what, when dealing with a multivalued field some sort of new syntax/configuration would be neccessary to define what it means to \"sort\" on it.) ",
            "id": "comment-14720548"
        },
        {
            "date": "2015-08-30T04:14:36+0000",
            "author": "David Smiley",
            "content": "Ok, cool \u2013 but just to clarify, you need to know that new syntax to sort on a multivalued field, but the implementation does in fact \"directly\" use SortedSetSortField.\n\nOh yes I read your code and observed that.\n\nthe implementation does in fact directly use SortedSetSortField, which should be (unless I'm missing something) just as efficient as SortedNumericSortField\n\nAh, no; not that I've benchmarked it but I can't imagine SortedSetSortField would be faster than SortedNumericSortField.  SortedSetSortField works on byte array terms which must be decoded to a number, as opposed to numeric docValues which are intrinsically numbers \u2013 'long' being the one type in particular for which the other number types are mapped to.  I see this in the call to NumericUtils.prefixCodedToLong(bytes) in TrieLongField.getSingleValueSource.longVal. ",
            "id": "comment-14721373"
        },
        {
            "date": "2016-03-24T21:39:04+0000",
            "author": "Yonik Seeley",
            "content": "A perfect time to do this cut-over will be with the addition of the new Point based fields (IntPoint,LongPoint,etc)...\nThis also would allow us to leave TrieField unchanged for back compat. ",
            "id": "comment-15210995"
        },
        {
            "date": "2017-06-14T09:15:39+0000",
            "author": "Cao Manh Dat",
            "content": "Yonik Seeley Hoss Man My plan for adding support SortedNumericDocValues for FacetFieldProcessorByArrayDV is create a converter to convert SortedNumericDocValues to SorterSetDocValues ( and cache that result ). What do you think about this idea? ",
            "id": "comment-16048905"
        },
        {
            "date": "2017-06-14T16:21:56+0000",
            "author": "Hoss Man",
            "content": "I'm not to familar with the code in question but...\n\n\n\tIIUC you're suggesting a (cached) wrapper around SortedNumericDocValues that would require converting at least a couple numeric->(legacy-numeric)byte->numeric conversions to be used as a drop in substitute for SorterSetDocValues ... is that really something that would be eaiser/better then creating a new FacetFieldProcessorByArray subclass specifically for dealing with the SortedNumericDocValues ?\n\tshouldn't this discussion be in SOLR-9989 ... frankly i'm not clear on why SOLR-7878 is still open since PointFields already use NumericDocValues, it seems unlikely we'll want to keep TrieFields around long enough to bother with trying to make it possible/optional to use NumericDocValues with TrieFields.\n\n ",
            "id": "comment-16049342"
        },
        {
            "date": "2017-06-14T16:32:09+0000",
            "author": "Hoss Man",
            "content": "...a new FacetFieldProcessorByArray subclass...\n\n...Or perhaps, if FacetFieldProcessorByArray assumes we're always dealing with ordinals, a completely new subclass of FacetFieldProcessor to deal directly with the DocValue \"values\" ? ",
            "id": "comment-16049348"
        },
        {
            "date": "2017-06-15T02:23:16+0000",
            "author": "Cao Manh Dat",
            "content": "Hoss Man I am thinking about that direction too. But \"terms\" in json facet kinda relates too TermsEnum ( the values must be global sorted ), right? But SortedNumericDV is a mapping from docId -> list of values. It do not have reverse direction. ",
            "id": "comment-16049925"
        },
        {
            "date": "2017-06-15T04:38:29+0000",
            "author": "Hoss Man",
            "content": "Again: I'm not that familar with the code (and again: i feel like these questions/conversation belongs in SOLR-9989 since it's specific to JSON Faceting) so if you think a wrapper that emulates SorterSetDocValues is the best approach then go for it \u2013 i was just surprised given that seems like it would involve a lot of redundent LegacyNumeric conversion.\n\nbut on the flip side: if it seems like the most straight forward approach, then we can always go with that for now and try to optimize later. ",
            "id": "comment-16049982"
        }
    ]
}