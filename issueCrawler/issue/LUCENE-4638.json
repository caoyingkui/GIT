{
    "id": "LUCENE-4638",
    "title": "If IndexWriter is interrupted on close and is using a channel (mmap/nio), it can throw a ClosedByInterruptException and prevent you from opening a new IndexWriter in the same proceses if you are using Native locks.",
    "details": {
        "components": [],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The ClosedByInterruptException will prevent the index from being unlocked in close. If you try and close again, the call will hang. If you are using native locks and try to open a new IndexWriter, it will fail to get the lock. If you try IW#forceUnlock, it wont work because the not fully closed IW will still have the lock.\n\nideas:\n\n\tOn ClosedByInterruptException, IW should continue trying to close what it can and unlock the index? Generally I have see the exception trigger in commitInternal.\n\tWe should add a non static forceUnlock to IW that lets you remove the lock and start a new IW?\n\tWe should make the lock protected so IW sub classes could unlock the index in advanced use cases?\n\tothers?",
    "attachments": {
        "LUCENE-4638.patch": "https://issues.apache.org/jira/secure/attachment/12562165/LUCENE-4638.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-19T17:55:41+0000",
            "content": "Hmm why does the 2nd call to close hang?  Do you have the original exc?\n\nIW.rollback() should do a \"better job\" closing and releasing the lock, and in general on getting an exception from IW.close I think it's the only real recourse you have (ie, it's hard to know what docs you lost due to that exception).\n\nAlso, I think LUCENE-4246 (IW.close should \"just close\", not wait for merges, commit, etc.) would improve this situation because then close would reliably release the lock. ",
            "author": "Michael McCandless",
            "id": "comment-13536196"
        },
        {
            "date": "2012-12-19T18:04:24+0000",
            "content": "I should be able to find what it was hanging on, but a lot of logs to look back through. I can probably reproduce more easily instead when I get home tonight. If I remember right, it was trying to open an mmap input or something and if I remember right, it was just blocking. I'll reproduce and report the exact details. ",
            "author": "Mark Miller",
            "id": "comment-13536207"
        },
        {
            "date": "2012-12-21T22:35:24+0000",
            "content": "I have not had a chance to duplicate the hang yet - using fullmetaljenkins to work on some other bugs. I really could use a resolution to this though.\n\nCurrently, the advice for cleaning up after an IndexWriter in the javadoc is broken with native locks. You can't necessarily call close twice and you can't unlock using the static unlock method.\n\nHere is a patch that provides a way for users to use the unlock in a finally pattern that is safe for native locks.\n\nIt adds a forceUnlock method to IndexWriter that is not static. ",
            "author": "Mark Miller",
            "id": "comment-13538484"
        },
        {
            "date": "2012-12-21T22:37:37+0000",
            "content": "Probably want to put a != null check around the writeLock. ",
            "author": "Mark Miller",
            "id": "comment-13538486"
        },
        {
            "date": "2012-12-22T01:20:21+0000",
            "content": "I don't think we should rush a fix here.\n\nLet's see if rollback would have fixed it (and really javadocs should state that as the \"recovery\" if you hit exc during close), and let's understand what was hanging in the 2nd call to IW.close.\n\nI think a new forceUnluck method in IndexWriter is too dangerous because the IndexWriter technically is still open so the app can continue to do ops after releasing the lock. ",
            "author": "Michael McCandless",
            "id": "comment-13538621"
        },
        {
            "date": "2012-12-22T01:30:23+0000",
            "content": "I think a new forceUnluck method in IndexWriter is too dangerous\n\nIt's the same as the current static unlock method and javadocd the same.\n\nI'm okay with it not being in Lucene though - I figure users would like to avoid this bug as well, but simply making the lock factory protected exposes it in an advanced enough way that it couldnt be considered dangerous. That would let me gid rid of this bug as well.\n\nLet's see if rollback would have fixed it \n\nI'll try that. ",
            "author": "Mark Miller",
            "id": "comment-13538632"
        },
        {
            "date": "2012-12-22T10:50:49+0000",
            "content": "simply making the lock factory protected exposes it in an advanced enough way that it couldnt be considered dangerous. That would let me gid rid of this bug as well.\n\nI think that's a good solution for this issue?\n\nIt would still be nice to know if rollback resolves it (it's supposed to!), and why the 2nd IW.close() hangs (which is weird). ",
            "author": "Michael McCandless",
            "id": "comment-13538724"
        },
        {
            "date": "2012-12-22T13:31:17+0000",
            "content": "if thats what gets committed, please keep the issue open in that case.\n\nThis kind of behavior in close is outright buggy. its because its doing too much. ",
            "author": "Robert Muir",
            "id": "comment-13538811"
        },
        {
            "date": "2012-12-22T13:36:50+0000",
            "content": "Also i would view it as a temporary solution, like until we have time to unfuck close() to not do so much.\n\nI dont care that the issue is controversial. Its time to bring this to a head. I'm good at that. ",
            "author": "Robert Muir",
            "id": "comment-13538812"
        },
        {
            "date": "2012-12-22T13:38:00+0000",
            "content": "just a start so there is no wimpy solution committed permanently because close() does too much. I dont want 4.1 released with that solution. ",
            "author": "Robert Muir",
            "id": "comment-13538813"
        },
        {
            "date": "2012-12-24T00:16:10+0000",
            "content": "[trunk commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1425561\n\nLUCENE-4638, SOLR-3180: try using the IW's writeLock to unlock ",
            "author": "Commit Tag Bot",
            "id": "comment-13539129"
        },
        {
            "date": "2012-12-24T00:29:04+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1425563\n\nLUCENE-4638, SOLR-3180: try using the IW's writeLock to unlock ",
            "author": "Commit Tag Bot",
            "id": "comment-13539136"
        },
        {
            "date": "2012-12-24T02:12:11+0000",
            "content": "[trunk commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1425574\n\nLUCENE-4638, SOLR-3180: revert for now (try using the IW's writeLock to unlock) ",
            "author": "Commit Tag Bot",
            "id": "comment-13539151"
        },
        {
            "date": "2012-12-24T02:18:24+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1425576\n\nLUCENE-4638, SOLR-3180: revert for now (try using the IW's writeLock to unlock) ",
            "author": "Commit Tag Bot",
            "id": "comment-13539154"
        },
        {
            "date": "2013-07-23T18:44:41+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717026"
        },
        {
            "date": "2014-04-16T12:54:55+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970925"
        },
        {
            "date": "2015-08-26T18:33:09+0000",
            "content": "Any update on this?  In our mostly-stock 5.2.1 Solr deployment, we are hitting a point where we get cores into a permanently wedged state all the time, and there seems to be no fix except to restart the entire node (JVM).  The IndexWriter gets into a broken state with ClosedByInterrupt, and it never gets out of it, and no new IndexWriter (maybe also no new searchers) can be created.  This is one of our biggest operational issues right now. ",
            "author": "Scott Blum",
            "id": "comment-14715302"
        }
    ]
}