{
    "id": "LUCENE-5063",
    "title": "Allow GrowableWriter to store negative values",
    "details": {
        "components": [],
        "fix_versions": [
            "4.4"
        ],
        "affect_versions": "None",
        "priority": "Trivial",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "For some use-cases, it would be convenient to be able to store negative values in a GrowableWriter, for example to use it in FieldCache: The first term is the minimum value and one could use a GrowableWriter to store deltas between this minimum value and the current value. (The need for negative values comes from the fact that maxValue - minValue might be larger than Long.MAX_VALUE.)",
    "attachments": {
        "LUCENE-5063.patch": "https://issues.apache.org/jira/secure/attachment/12588304/LUCENE-5063.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-18T07:33:47+0000",
            "content": "Here is a patch which makes GrowableWriter able to store negative values and makes FieldCache.DEFAULT.get(Ints|Longs) use it. In order to not make field cache loading too slow, the GrowableWriters are created with an acceptable overhead ratio of 50% so that they can grow the number of bits per value quickly in order not to perform too much resizing. ",
            "author": "Adrien Grand",
            "id": "comment-13686472"
        },
        {
            "date": "2013-06-18T10:36:08+0000",
            "content": "On one hand we pay the price of an add:\n\n     @Override\n     public long get(int docID) {\n-      return values[docID];\n+      return minValue + values.get(docID);\n     }\n\n\n\nBut we get no benefit...\n\n+ * <p>Beware that this class will accept to set negative values but in order\n+ * to do this, it will grow the number of bits per value to 64.\n\n\n\nThis doesn't seem right... ",
            "author": "Robert Muir",
            "id": "comment-13686561"
        },
        {
            "date": "2013-06-18T11:02:30+0000",
            "content": "i see, so we only need negatives in growablewriter for the case where we'd use 64 bpv for longs anyway.\nCan we add a comment?\n\nAlso, we start at 4bpv here, but we don't bitpack for byte/short too? it could be a little unintuitive that using long takes less ram than byte \n\nOr, maybe FC should only have a 'long' API to better match DV?\n\n\nIn order to not make field cache loading too slow, the GrowableWriters are created with an acceptable overhead ratio of 50% so that they can grow the number of bits per value quickly in order not to perform too much resizing.\n\nThis is consistent with SortedDocValuesImpl, except SortedDocValuesImpl has a 'startBPV' of 1, whereas its 4 here. Maybe we should use 1 here too? ",
            "author": "Robert Muir",
            "id": "comment-13686594"
        },
        {
            "date": "2013-06-18T12:03:39+0000",
            "content": "i see, so we only need negatives in growablewriter for the case where we'd use 64 bpv for longs anyway.\n\nExactly. Negative values in a GrowableWriter are more 64-bits unsigned values than actual negative values.\n\nOr, maybe FC should only have a 'long' API to better match DV?\n\nAre you talking about removing all get(Bytes|Shorts|Ints|Floats|Doubles) and only have getLongs which would return a NumericDocValues instance? Indeed I think it would make things simpler and more consistent (eg. comparators and FieldCacheRangeFilter) but this looks like a big change!\n\nThis is consistent with SortedDocValuesImpl, except SortedDocValuesImpl has a 'startBPV' of 1, whereas its 4 here. Maybe we should use 1 here too?\n\nAgreed. ",
            "author": "Adrien Grand",
            "id": "comment-13686622"
        },
        {
            "date": "2013-06-18T12:07:38+0000",
            "content": "\nIndeed I think it would make things simpler and more consistent (eg. comparators and FieldCacheRangeFilter) but this looks like a big change!\n\nIt doesnt need to hold up this issue. we can make a followup issue for that. Maybe we should do something about the Bytes/Shorts though here... ",
            "author": "Robert Muir",
            "id": "comment-13686627"
        },
        {
            "date": "2013-06-18T15:03:03+0000",
            "content": "Maybe we should do something about the Bytes/Shorts though here...\n\nGiven that we don't even have numeric support (they are just encoded/decoded as strings) for these types, maybe we should just remove or deprecate them? ",
            "author": "Adrien Grand",
            "id": "comment-13686807"
        },
        {
            "date": "2013-06-18T16:23:59+0000",
            "content": "\nMaybe we should do something about the Bytes/Shorts though here...\n\nGiven that we don't even have numeric support (they are just encoded/decoded as strings) for these types, maybe we should just remove or deprecate them?\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-13686893"
        },
        {
            "date": "2013-06-18T16:49:23+0000",
            "content": "+1, patch looks good! ",
            "author": "Michael McCandless",
            "id": "comment-13686915"
        },
        {
            "date": "2013-06-18T18:08:49+0000",
            "content": "Same patch with added deprecation warnings:\n\n\tFieldCache.get(Byte|Short)s\n\tFieldCache.DEFAULT_*_PARSER (because they assume numeric data is encoded as strings)\n\tSortField.Type.(Byte|Short)\n\t(Byte|Short)FieldSource\n\tSolr's ByteField and ShortField\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13687019"
        },
        {
            "date": "2013-06-20T19:39:38+0000",
            "content": "[branch_4x commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1495146\n\nLUCENE-5063: ...continuation. ",
            "author": "Commit Tag Bot",
            "id": "comment-13689556"
        },
        {
            "date": "2013-06-20T20:07:57+0000",
            "content": "[trunk commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1495156\n\nLUCENE-5063: Compress integer and long field caches and remove FieldCache.get(Byte|Short)s, default parsers and related class/methods (merged from r1494753 and r1495146). ",
            "author": "Commit Tag Bot",
            "id": "comment-13689590"
        },
        {
            "date": "2013-07-23T18:36:59+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716710"
        }
    ]
}