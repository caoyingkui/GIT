{
    "id": "LUCENE-2665",
    "title": "Rework FieldCache to be more flexible/general",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "The existing FieldCache implementation is very rigid and does not allow much flexibility.  In trying to implement simple features, it points to much larger structural problems.\n\nThis patch aims to take a fresh approach to how we work with the FieldCache.",
    "attachments": {
        "LUCENE-2665-FieldCacheOverhaul.patch": "https://issues.apache.org/jira/secure/attachment/12455441/LUCENE-2665-FieldCacheOverhaul.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-23T22:34:27+0000",
            "content": "This is a quick sketch of a more general FieldCache \u2013 it only implements the ByteValues case, and is implemented in a different package.\n\nThe core API looks like this:\n\n  public <T> T get(IndexReader reader, String field, EntryCreator<T> creator) throws IOException\n\n\n\nand the EntryCreator looks like this:\n\npublic abstract class EntryCreator<T> implements Serializable\n{\n  public abstract T create( IndexReader reader, String field ) throws IOException;\n  public abstract T validate( T entry, IndexReader reader, String field ) throws IOException;\n\n  /**\n   * Indicate if a cached cached value should be checked before usage.  \n   * This is useful if an application wants to support subsequent calls\n   * to the same cached object that may alter the cached object.  If\n   * an application wants to avoid this (synchronized) check, it should \n   * return 'false'\n   * \n   * @return 'true' if the Cache should call 'validate' before returning a cached object\n   */\n  public boolean shouldValidate() {\n    return true;\n  }\n\n  /**\n   * @return A key to identify valid cache entries for subsequent requests\n   */\n  public Integer getCacheKey( IndexReader reader, String field )\n  {\n    return new Integer(\n        EntryCreator.class.hashCode() ^ field.hashCode()\n    );\n  }\n}\n\n\n\nFor a real cleanup, I think it makes sense to move the Parser stuff to somewhere that deals with numerics \u2013 I don't get why that is tied to the FieldCache\n\nJust as sketch to get us thinking....\n\n ",
            "author": "Ryan McKinley",
            "id": "comment-12914266"
        },
        {
            "date": "2010-09-23T22:46:51+0000",
            "content": "While we are thinking about it... perhaps the best option is to add a Cache to the IndexReader itself.\n\nThis would be nice since it would would drop the WeakHashMap<IndexReader> that is used all over.  I just like hard references better!\n\nThe one (ok maybe there are more) hitch I can think of is that some Cache instances don't care about deleted docs (FieldCache) and others do.  Perhaps the EntryCreator knows and the Cache coud behave differently... or am i getting ahead of myself!\n\n ",
            "author": "Ryan McKinley",
            "id": "comment-12914270"
        },
        {
            "date": "2010-09-24T10:45:23+0000",
            "content": "perhaps the best option is to add a Cache to the IndexReader itself.\n\n+1\n\nBut reopened readers need to be able to share the same Cache... maybe we have a Cache doReopen() method, on the Cache?  This way a given Cache impl could do something custom like evict certain entries that are volatile wrt reopen?  (Though, I think we should try hard to keep del docs dependence out of cache entries... ie it's still the caller's job to fold in deleted docs). ",
            "author": "Michael McCandless",
            "id": "comment-12914404"
        },
        {
            "date": "2010-09-24T10:47:14+0000",
            "content": "Would the validate method do things like compute the validDocs bit set if the current caller needs it but the entry didn't compute it the first time? ",
            "author": "Michael McCandless",
            "id": "comment-12914405"
        },
        {
            "date": "2010-09-24T10:50:31+0000",
            "content": "Here are some of the problems w/ FC that I'd love to see fixed here:\n\n\n\tThe source of values should be fully flexible/pluggable \u2013 FC does\n    uninversion, CSF pulls the array image from the index, an app can\n    plugin its own source.  All three of these \"sources\" should be\n    consumed via the same API (eg ByteValues w/ getValue(int docID)).\n\n\n\n\n\tValue lookup needs to be a method call, w/ optional\n    getBackingArray(), for (manual today, automatic tomorrow) code\n    spec.\n\n\n\n\n\tUninversion is dangerous \u2013 eg if you accidentally have multiple\n    values per field, they \"silently\" overwrite one another.\n\n\n\n\n\tWhen you do legitimately have multiple values (eg numeric fields),\n    the Parser interface is also too inflexible \u2013 eg the exception to\n    stop visiting terms, the inabilty to specify which (users have\n    requested \"first only\" and \"last only\") of multiple values should\n    be kept, etc.\n\n\n\n\n\tCache should be stored/accessible via the reader, not in separate\n    external WeakHashMap.  The eviction policy should be fully\n    visible/controllable by the app (or maybe app optionally hands us\n    a cache impl/factory).  There should be no static FC.DEFAULT that\n    we have today.\n\n\n\n\n\tInsanity shouldn't be allowed/possible \u2013 it's just too dangerous\n    today that we allow this.  We should at least make it really hard\n    to do, by accident (eg, like you must use SlowMultiReader to prove\n    your insanity).  EG caching values @ the MultiReader level.  Or,\n    LUCENE-2527 (fasterButMoreRAM true/false causing a double entry).\n\n\n\n\n\tThe entries are too strongly tied to field names.  I may want\n    virtual entries, not backed by a \"real\" field.  EG, say I want to\n    do a \"blended\" sort, say mixing in recency with elevance... I\n    should be able name this \"RelevanceAndRecency\" (say), which is not\n    a real field.  I back this w/ my own FloatValues impl, which\n    under-the-hood somehow combines the two \"sources\" and presents a\n    FloatValues interface.  Then I should be able to pass a SortField\n    somehow referencing my dynamic/virtual field.\n\n\n\n\n\tCannot support multiple values per doc (this is a future\n    nice-to-have-but-don't-preclude sort of thing)\n\n\n\nWith these fixes, flex scoring (LUCENE-2392), the per-doc stats\n(unique term count, total term count, boost, etc.) should all become\npluggable value sources. ",
            "author": "Michael McCandless",
            "id": "comment-12914407"
        },
        {
            "date": "2010-09-24T14:03:11+0000",
            "content": "Would the validate method do things like compute the validDocs bit set if the current caller needs it but the entry didn't compute it the first time? \n\nYes, since the options you ask for in an EntryCreator are not necessarily part of the key (and therefor the cached entry), I added the validate method to make sure the cached value has everything it asked for (like validDocs/values)  This is optional since the application may not want to take the time to do this check (I think it needs to be synchronized)\n\n\nmaybe we have a Cache doReopen() method, on the Cache?\n\nYa, something like that...\n\n---------\n\nI'll take a crack at this... hopefully we can break this into a few issues, so that it stays tractable and has a chance of getting committed soon! ",
            "author": "Ryan McKinley",
            "id": "comment-12914470"
        },
        {
            "date": "2010-09-24T14:11:57+0000",
            "content": "Here are some of the problems w/ FC that I'd love to see fixed here: \n\nhere?\nThis issue could be a foundation for many of those things... but man... I really just want the Bits before another year goes by!\nEviction policies, etc, are out of scope here IMO. ",
            "author": "Yonik Seeley",
            "id": "comment-12914473"
        },
        {
            "date": "2010-09-24T14:52:47+0000",
            "content": "really just want the Bits before another year goes by!\n\n+1  \n\n\nEviction policies, etc, are out of scope here IMO.\n\noh, I sure hope so!\n\nI'm reading Mikes list as stuff we should keep in mind as we start a new direction.  The basic design should not preclude these enhancements, but i sure hope they are not required before laying the basic groundwork (especially if this only goes to /trunk for now) ",
            "author": "Ryan McKinley",
            "id": "comment-12914493"
        },
        {
            "date": "2010-09-24T18:33:39+0000",
            "content": "I'm reading Mikes list as stuff we should keep in mind as we start a new direction.\n\nExactly \u2013 we certainly don't have to get this done on the first baby\nstep, but if we're gonna make big changes to FC now, we should have\nthis future target/issues-to-fix in mind.\n\nIn fact I'm fine w/ the original baby step of sticking the Bits config\nonto Parser, as long as it doesn't use static config nor risk added\ninsanity... ",
            "author": "Michael McCandless",
            "id": "comment-12914579"
        },
        {
            "date": "2010-09-25T22:32:40+0000",
            "content": "This patch takes the work from LUCENE-2649 and applies it to a more general ReaderCache.\n\nThe BIG changes with this is that it does not have a global notion of 'insane' cache behavior.\n\nTo allow EntryCreators to check for insanity, I added a callback where you could check other things:\n\n public boolean checkCacheAnomaliesAfterPut(ReaderCache cache, EntryKey key, T newValue )\n\n\n\nI think the one general thing we should check for is the same Key used in any ReaderCache within the same Directory...\n\nThe other thing that was removed is the CacheEntry stuff.\n\n ",
            "author": "Ryan McKinley",
            "id": "comment-12914886"
        },
        {
            "date": "2010-09-26T10:48:02+0000",
            "content": "Apologies for 'CTR' rather then 'RTC' \u2013 we can always revert if I jumped the gun!\n\nBetter to ask forgiveness than permission \n\nIn fact I'm +1 on switching Lucene's trunk to CTR model instead, now\nthat we have 3.x as the stable branch.  We have enough \"policemen\"\naround here that I think this'd work well.\n\nThe changes look great Ryan \u2013 nice work!  Some smallish feedback:\n\n\n\tI see some windows eol's snuck in... can you change the\n    svn:eol-style of all the new sources to \"native\"?\n\n\n\n\n\tSome classes are missing copyright header (at least EntryKey,\n    SimpleEntryKey)\n\n\n\n\n\tShouldn't we only incr .numDocs if the bit wasn't already set?\n    (To be robust if docs have more than one value).  Ie we can use\n    OpenBits.getAndSet.  Maybe then add and assert that numDoc <=\n    maxDoc in the end...\n\n\n\n\n\tThen, we can pass null for the delDocs to the enums, and then we\n    don't need a 2nd pass to detect matchAllDocs (just test if\n    .numDocs == maxDoc())?\n\n\n\nI think we should hold off on backport to 3.x until we stabilize\nLUCENE-2665?\n\nIt looks like you've also fixed LUCENE-2527 with this?  Ie the\nfasterButMoreRAM=true|false now cache to the same key?  It's just that\nperhaps we should \"upgrade\" the entry, if it was first created w/\nfalse and then the current call passes true? ",
            "author": "Michael McCandless",
            "id": "comment-12914957"
        },
        {
            "date": "2010-09-26T10:48:39+0000",
            "content": "Duh sorry above comment is supposed to be on LUCENE-2649 \u2013 I'll copy copy/paste there. ",
            "author": "Michael McCandless",
            "id": "comment-12914958"
        },
        {
            "date": "2010-09-26T13:06:10+0000",
            "content": "In fact I'm +1 on switching Lucene's trunk to CTR model instead\n\nWe have always been CTR - but how fast we commit w/o feedback from others is a function of our confidence level (i.e. how much we think people would agree/disagree with the change if they did review it, taking in other things like the complexity / invasiveness of the change).\n\nI'm not sure we should change the way we currently do things - trunk is developing plenty fast! ",
            "author": "Yonik Seeley",
            "id": "comment-12914970"
        },
        {
            "date": "2010-09-26T15:57:24+0000",
            "content": "\nIn fact I'm +1 on switching Lucene's trunk to CTR model instead\n\nWe have always been CTR - but how fast we commit w/o feedback from others is a function of our confidence level (i.e. how much we think people would agree/disagree with the change if they did review it, taking in other things like the complexity / invasiveness of the change).\n\nI'm not sure we should change the way we currently do things - trunk is developing plenty fast!\n\nAhh you're right \u2013 RTC would require full vote on every commit:  http://www.apache.org/foundation/glossary.html#ReviewThenCommit\n\nSo we are in fact CTR! ",
            "author": "Michael McCandless",
            "id": "comment-12914988"
        },
        {
            "date": "2010-09-26T16:44:58+0000",
            "content": "Awesome \u2013 this patch moves the cache into the reader!  Finally \n\nShould we make the cache member of ReaderCache somehow accessible?\nThis way apps can purge individual entries if they want?\n\nMaybe name this ReaderValuesCache?  Like we cache other stuff (norms,\ndeleted docs) in readers...\n\nI think composite readers (Multi/DirReader) should throw UOE if you\ntry to get their cache; eg this is what flex APIs do as well.\nInstead, the app should wrap the composite reader with a\nSlowMultiReaderWrapper (or their own IndexReader impl that hides the\nsequential sub readers)?\n\nThis way, creating insanity is still \"possible\", but, it won't be done\nby accident, ie you really know what you are getting into.  If we do\nthat then I think we don't need insanity checking anymore (because you\nmade a clear choice to load vlaues @ the composite reader level). ",
            "author": "Michael McCandless",
            "id": "comment-12914998"
        },
        {
            "date": "2010-09-29T05:14:54+0000",
            "content": "Here is an updated patch that moves the Cache to the Reader \u2013 this has no real changes, it just applies cleanly with trunk.\n\nI'm leaving on vacation, and likely won't be able to pick this up for some time, so if anyone gets the itch have at it! ",
            "author": "Ryan McKinley",
            "id": "comment-12916020"
        },
        {
            "date": "2011-11-14T22:26:09+0000",
            "content": "this aimed to do the same thing as: LUCENE-2665 ",
            "author": "Ryan McKinley",
            "id": "comment-13150008"
        }
    ]
}