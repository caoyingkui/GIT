{
    "id": "SOLR-11532",
    "title": "Solr hits NPE when fl only contains DV fields and any of them is a spatial field",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "spatial"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "7.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Right now, Solr does not know how to decode DV value of LatLonPointSpatialField. Therefore, Solr will hit NPE when trying to do that, for example: \n\n\twhen fl contains a spatial field and it is DV + not stored\n\twhen fl only contains DV fields and any of them is a spatial field ( stored + DV ). Because SOLR-8344 will always use values from DV fields. This seems a common case.\n\n\n\nStacktrace (from Solr 7.1)\n\n2017-10-23 10:28:52,528 [qtp1649011739-67] ERROR HttpSolrCall  - null:java.lang.NullPointerException\n    at org.apache.solr.search.SolrDocumentFetcher.decorateDocValueFields(SolrDocumentFetcher.java:525)\n    at org.apache.solr.response.DocsStreamer.next(DocsStreamer.java:108)\n    at org.apache.solr.response.DocsStreamer.next(DocsStreamer.java:57)\n    at org.apache.solr.response.BinaryResponseWriter$Resolver.writeResultsBody(BinaryResponseWriter.java:126)\n    at org.apache.solr.response.BinaryResponseWriter$Resolver.writeResults(BinaryResponseWriter.java:145)\n    at org.apache.solr.response.BinaryResponseWriter$Resolver.resolve(BinaryResponseWriter.java:89)\n    at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:239)\n    at org.apache.solr.common.util.JavaBinCodec.writeNamedList(JavaBinCodec.java:223)\n    at org.apache.solr.common.util.JavaBinCodec.writeKnownType(JavaBinCodec.java:330)\n    at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:228)\n    at org.apache.solr.common.util.JavaBinCodec.marshal(JavaBinCodec.java:155)\n\n\n\nThis bug found by kiran. \n\nThe only solution for this problem is adding a stored field only in fl.",
    "attachments": {
        "SOLR-11532.patch": "https://issues.apache.org/jira/secure/attachment/12893871/SOLR-11532.patch",
        "SOLR-11532-test.patch": "https://issues.apache.org/jira/secure/attachment/12893747/SOLR-11532-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-24T04:42:59+0000",
            "content": "Ouch; this is a serious bug!  If we can have useDocValuesAsStored=false influence the optimization in SOLR-8344 then that would both fix this bug and be something that makes sense to do regardless.  LLPSF can then set useDocValuesAsStored=true as a default for itself since the docValues data is not preferable to return \u2013 it's less precision (~1cm).\n\nIf we can agree on the above, I think it'd be a separate issue to add a feature to actually allow LLPSF to return the lat & lon from it's DocValues.  You didn't suggest that but I thought I'd mention it.\n\nCan you post the NPE stacktrace? ",
            "author": "David Smiley",
            "id": "comment-16216295"
        },
        {
            "date": "2017-10-24T07:48:43+0000",
            "content": "I think it'd be a separate issue to add a feature to actually allow LLPSF to return the lat & lon from it's DocValues. You didn't suggest that but I thought I'd mention it.\nDavid Smiley Yeah sure, the aim of this ticket is change RetrieveFieldsOptimizer, so if a spatial field is stored + DV, it will use stored instead. ",
            "author": "Cao Manh Dat",
            "id": "comment-16216467"
        },
        {
            "date": "2017-10-24T13:43:52+0000",
            "content": "Here's a simple test that triggers the bug: retrieving one single-valued LLPSF field with DV+stored. ",
            "author": "Steve Rowe",
            "id": "comment-16216922"
        },
        {
            "date": "2017-10-24T14:07:38+0000",
            "content": "I think it'd be a separate issue to add a feature to actually allow LLPSF to return the lat & lon from it's DocValues. You didn't suggest that but I thought I'd mention it.\n\nThe condition would be useDocValuesAsStored=true and docValues=true (obvi), or if stored=false, right?\n\nNote that this would expand/complicate the meaning of useDocValuesAsStored, which currently only applies to fl lists with wildcards. ",
            "author": "Steve Rowe",
            "id": "comment-16216958"
        },
        {
            "date": "2017-10-24T14:30:42+0000",
            "content": "The condition would be useDocValuesAsStored=true and docValues=true (obvi), or if stored=false, right?\n\nYes I think so.  Again, I think that's a separate issue (and not a bug \u2013 a feature).  \n\nIt's a fair point that my proposal to have the optimizer consider useDocValuesAsStored will expand the semantic scope of it... but I think it's a fitting of this flag.  If you disagree, then perhaps we can have the FieldType more explicitly declare that the stored value should be used in preference to the docValues value.  Although you then might be annoying to efficiently capture which such fields declare this whereas we've already done so for useDocValuesAsStored.  Notice useDocValuesAsStored doesn't say \"wildcard\" in its name   I think of it as... use docValues as stored if there is ambiguity.  Ambiguity if for a wildcard, but it's also for a field that has both stored & docValues. ",
            "author": "David Smiley",
            "id": "comment-16217003"
        },
        {
            "date": "2017-10-25T04:35:04+0000",
            "content": "Here is my patch for this ticket. Aiming to handle not decodable fields carefully. \n\n\tRetrieveFieldsOptimizer will only use DV for fields that are decodable.\n\tSolrDocumentFetcher will handle decoding DV more carefully. If there are an Exception in decode a DV, it will fall-back on using stored value instead.\n\n\n\nDavid Smiley Steve Rowe What do your guys think? ",
            "author": "Cao Manh Dat",
            "id": "comment-16218076"
        },
        {
            "date": "2017-10-25T12:52:44+0000",
            "content": "Interesting \u2013 I like your approach Cao Manh Dat.\n\n\tthe wording \"decorable\" is not quite right, should be \"decoratable\".  But besides, this, \"allSingleDV\" becoming \"allSingleDecoratableDV\" seems suspiciously troubling of some code quality concerns here... I'll think about this more and suggest something more specific, and it's not going to be just about some variable name.\n\tperhaps the multiValued check on SolrDocumentFetcher constructor line 123 belongs in the method isDecorableDV that you refactored out?\n\tin the catch around decorating docValues falling back on the stored value, we ought to at least log at debug level?\n\tin that same method decorateDocValueFields, perhaps move the lines of code preceding the try-statement that fetch the schemaField & FieldInfo into the refactored method you extracted decorateDocValueField to reduce the number of parameters by two?  Seeing many method parameters is a code smell.  Perhaps decorateDocValueField should not actually set the field value but instead return a potentially null value that the caller sets (and can thus decide if null then don't replace with former value if it was non-null)\n\tyou added the comment // The NumberType can be null but did nothing about it when I think you intended to?\n\n ",
            "author": "David Smiley",
            "id": "comment-16218552"
        },
        {
            "date": "2017-10-25T13:40:09+0000",
            "content": "Thanks David Smiley\nthe wording \"decorable\" is not quite right, should be \"decoratable\". But besides, this, \"allSingleDV\" becoming \"allSingleDecoratableDV\" seems suspiciously troubling of some code quality concerns here... I'll think about this more and suggest something more specific, and it's not going to be just about some variable name.\nThanks for the naming suggestion ( but I see a red line below work decoratable  ). I think that allSingleDv is only used by RetrieveFieldsOptimizer so there is no problem in rename it. Yeah, the code looks not very nice, but could not come up with better solution\nperhaps the multiValued check on SolrDocumentFetcher constructor line 123 belongs in the method isDecorableDV that you refactored out?\nYes, the method makes the boolean check easier to understand without having to look into detail.\nin the catch around decorating docValues falling back on the stored value, we ought to at least log at debug level?\nYeah, sure!\nin that same method decorateDocValueFields, perhaps move the lines of code preceding the try-statement that fetch the schemaField & FieldInfo into the refactored method you extracted decorateDocValueField to reduce the number of parameters by two? Seeing many method parameters is a code smell. Perhaps decorateDocValueField should not actually set the field value but instead return a potentially null value that the caller sets (and can thus decide if null then don't replace with former value if it was non-null)\nExcellent suggestion\nyou added the comment // The NumberType can be null but did nothing about it when I think you intended to?\nmy idea here is adding a NumberType called Unknown, but did not sure about this. ",
            "author": "Cao Manh Dat",
            "id": "comment-16218644"
        },
        {
            "date": "2017-10-25T14:07:49+0000",
            "content": "Updated patch based on David Smiley reviews\n\n\tIntroduce NumberType.UNKNOWN, therefore we never return a null numberType ( which can easily lead to NPE )\n\tAdding method decodeDVField ( decorateDocValueField of the previous patch ), which return an Object. If for some reason we can decode value from DV of a document, this method will return null.\n\tRemoved try-catch block in decorateDocValueFields from the previous patch.\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16218693"
        },
        {
            "date": "2017-10-25T14:19:48+0000",
            "content": "In the short term, I suppose just coming up with a new name for \"singleDVs\" is fine.  I don't like \"decorate\" because it's not clear looking in SolrDocumentFetcher what it is that is being decorated.  This set of field names is used exclusively by RetrieveFieldsOptimizer on a set of stored fields that can be substituted for their docValues equivalent.  So in conjunction with giving this field a new name (and renaming the param arg to optimize() accordingly, it cold be changed to be fields that are stored as well.  Perhaps storedOptimizableToDV?\n\nBTW I see some inconsistency between DV and Dv.  It's very debatable what should be used... but I suppose the smallest change is to standardize on DV.\n\nPlease add a test that we don't return a LLPSF field that is stored=false, docValues=true when fl=*.  It's a TODO to support that (in another issue).  At least here we want to ensure it won't throw an exception today.  I'm not certain your patch yet addresses this scenario.\n\nI was thinking maybe your SolrDocumentFetcher.isDecorableDV() method should belong on the Solr FieldType to thus give the FieldType the ability to elect a choice?  And of course named something like canDocValueSubstituteForStoredIfHasBoth?  I was thinking of a field type that knew that despite being multiValued, it knows it's docValues is equivalent (perhaps 'set' functionality).  But then such an advanced user would then simply not have the redundant stored field.   So perhaps nevermind then; I just want to share my thoughts. ",
            "author": "David Smiley",
            "id": "comment-16218715"
        },
        {
            "date": "2017-10-26T02:28:04+0000",
            "content": "BTW I see some inconsistency between DV and Dv. It's very debatable what should be used... but I suppose the smallest change is to standardize on DV.\nAll others places called them Dv instead of DV so I think we should do the renaming in other ticket.\n\nPlease add a test that we don't return a LLPSF field that is stored=false, docValues=true when fl=*. It's a TODO to support that (in another issue). At least here we want to ensure it won't throw an exception today. I'm not certain your patch yet addresses this scenario.\nSure! ",
            "author": "Cao Manh Dat",
            "id": "comment-16219866"
        },
        {
            "date": "2017-10-26T02:29:42+0000",
            "content": "In the short term, I suppose just coming up with a new name for \"singleDVs\" is fine. I don't like \"decorate\" because it's not clear looking in SolrDocumentFetcher what it is that is being decorated. This set of field names is used exclusively by RetrieveFieldsOptimizer on a set of stored fields that can be substituted for their docValues equivalent. So in conjunction with giving this field a new name (and renaming the param arg to optimize() accordingly, it cold be changed to be fields that are stored as well. Perhaps storedOptimizableToDV?\nCan we call them decodable? It really reflect the fact that, we do encode the field's value to DV, but can not do the reverse. ",
            "author": "Cao Manh Dat",
            "id": "comment-16219871"
        },
        {
            "date": "2017-10-26T02:38:21+0000",
            "content": "I was thinking maybe your SolrDocumentFetcher.isDecorableDV() method should belong on the Solr FieldType to thus give the FieldType the ability to elect a choice? And of course named something like canDocValueSubstituteForStoredIfHasBoth? I was thinking of a field type that knew that despite being multiValued, it knows it's docValues is equivalent (perhaps 'set' functionality). But then such an advanced user would then simply not have the redundant stored field. So perhaps nevermind then; I just want to share my thoughts.\nI do not sure this is a good idea. There are couple of concerns here\n\n\tFieldType already has many many methods, it will be easy for someone to not implement them and not all FieldType support encode field's value to DV.\n\tSolrDocumentFetcher is a central place to do the decoding from DV to field's value. So I kinda feel this is the right place to put this method.\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16219874"
        },
        {
            "date": "2017-10-26T03:19:09+0000",
            "content": "Sorry I hate the name \"decodable\"   I'll propose some additional names for your consideration:\n\n\n\tcanDocValueSubstituteForStoredIfHasBoth    (I mentioned this before but it's not clear if you like or not)\n\tpreferDVToStored\n\tcanSubstituteDvForStored    (I like this best)\n\n ",
            "author": "David Smiley",
            "id": "comment-16219896"
        },
        {
            "date": "2017-10-26T07:29:06+0000",
            "content": "David Smiley Yeah, I like the last one best. It is perfect for method name, but for field's name, It should be dvsCanSubstituteStored? ",
            "author": "Cao Manh Dat",
            "id": "comment-16220088"
        },
        {
            "date": "2017-10-26T07:34:14+0000",
            "content": "Updated patch for this ticket. Including\n\n\tproper names\n\trefactoring SolrDocumentFetcher logic, so It looks nicer\n\tremoved NumberType.UNKNOWN ( compared to last patch ), because there are many places check for null numberType instead of UNKNOWN.\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16220099"
        },
        {
            "date": "2017-10-26T13:38:53+0000",
            "content": "Overall, looks improved Dat.\n\n\tI think the multiValued condition should move to the method canSubstituteDvForStored(...}, in addition to checking that the field be stored.  Adding that it be stored isn't strictly necessary but reduces needless entries in the set.\n\tdecorateDocValueFields\n\t\n\t\tjavadocs are wrong or confusing.  \"The list of docValues fields to be decorated\".  As I understand it, we're decorating the documents with the fields, but as written you suggest the fields themselves are to be decorated.  Can we not use this \"decorated\" terminology please?  We're simply fetching the value from docValues, decoding/converting it to the right object type, and putting it on the document \n\t\tYou've logged a warning \"Couldn't decode docValues for field: [{}]\" when decodeDVField returns not-null.  But this is incorrect; it's inverted \u2013 we did get a value.  And even if we didn't, it's not necessarily a problem \u2013 their might be no value for this field on this particular document.  So in summary, just remove the warning.\n\t\tcan't the remove then addField be replaced with simply setField ?\n\t\n\t\n\n ",
            "author": "David Smiley",
            "id": "comment-16220436"
        },
        {
            "date": "2017-10-26T13:50:59+0000",
            "content": "Thanks David Smiley, all of your comments are correct. \nBTW: \"The list of docValues fields to be decorated\"  is what we are using today (so I did not introduce that line). Do you have any idea for this? ",
            "author": "Cao Manh Dat",
            "id": "comment-16220447"
        },
        {
            "date": "2017-10-26T14:12:01+0000",
            "content": "\"The fields with docValues to populate the document with\" is short & sweet ",
            "author": "David Smiley",
            "id": "comment-16220481"
        },
        {
            "date": "2017-10-26T14:18:16+0000",
            "content": "Thanks. Here is the updated patch. I think it is ready. ",
            "author": "Cao Manh Dat",
            "id": "comment-16220496"
        },
        {
            "date": "2017-10-26T14:25:29+0000",
            "content": "Do you disagree with my recommendation to add a stored flag check in the method canSubstituteDvForStored()?\njavadocs typo: \"DocValues fields which are not exist or not decodable will be ignored.\"  change \"are not exist\" to \"do not exist\"\n\nOtherwise looks good. ",
            "author": "David Smiley",
            "id": "comment-16220524"
        },
        {
            "date": "2017-10-26T14:34:56+0000",
            "content": "Do you disagree with my recommendation to add a stored flag check in the method canSubstituteDvForStored()?\nDid you recommend that change, I seem missed that? And why we need stored flag check here? ",
            "author": "Cao Manh Dat",
            "id": "comment-16220534"
        },
        {
            "date": "2017-10-26T14:35:06+0000",
            "content": "It's a fair point that my proposal to have the optimizer consider useDocValuesAsStored will expand the semantic scope of it... but I think it's a fitting of this flag. If you disagree, then perhaps we can have the FieldType more explicitly declare that the stored value should be used in preference to the docValues value.\n\nI'm okay with expanding uDVAS's semantic scope - just wanted to note it explicitly.\n\nNotice useDocValuesAsStored doesn't say \"wildcard\" in its name  I think of it as... use docValues as stored if there is ambiguity. Ambiguity if for a wildcard, but it's also for a field that has both stored & docValues.\n\n+1 ",
            "author": "Steve Rowe",
            "id": "comment-16220535"
        },
        {
            "date": "2017-10-27T01:42:27+0000",
            "content": "Updated patch fixes the javadocs typo.\nDavid Smiley I think the aim of this ticket is fixing NPE problem and make SolrDocumentFetcher less error-prone. Expanding the scope of uDVAs seems like an optimization for me and can be done in another ticket. ",
            "author": "Cao Manh Dat",
            "id": "comment-16221570"
        },
        {
            "date": "2017-10-27T03:09:38+0000",
            "content": "+1 ",
            "author": "David Smiley",
            "id": "comment-16221643"
        },
        {
            "date": "2017-10-27T07:34:30+0000",
            "content": "Commit 7a19128109d9b40b28a09a59efa718d63f7a31e9 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7a19128 ]\n\nSOLR-11532: Solr hits NPE when fl only contains DV fields and any of them is a spatial field ",
            "author": "ASF subversion and git services",
            "id": "comment-16221871"
        },
        {
            "date": "2017-10-27T07:50:20+0000",
            "content": "Commit 8a05e6ea88eeb15a4ddfabdfc5aae66302335259 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8a05e6e ]\n\nSOLR-11532: Update CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-16221884"
        },
        {
            "date": "2017-10-27T07:51:18+0000",
            "content": "Commit 60e2493759013325769fa94d3992f5078b14da7b in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=60e2493 ]\n\nSOLR-11532: Solr hits NPE when fl only contains DV fields and any of them is a spatial field ",
            "author": "ASF subversion and git services",
            "id": "comment-16221893"
        },
        {
            "date": "2017-10-27T07:51:20+0000",
            "content": "Commit 615ac17a412801d7975a8bc827c5cc32702df6ec in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=615ac17 ]\n\nSOLR-11532: Update CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-16221894"
        },
        {
            "date": "2017-11-29T00:42:01+0000",
            "content": "Cao Manh Dat Should this JIRA be closed? ",
            "author": "Erick Erickson",
            "id": "comment-16269826"
        }
    ]
}