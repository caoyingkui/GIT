{
    "id": "LUCENE-5766",
    "title": "bug in rewrite function of boolean query",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": []
    },
    "description": "when optimize boolean query. When the only query sub clause has a boost with 1.0, it should be cloned too. \n\nif (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) \n{                   // if rewrite was no-op\n            query = query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\nwhen boolean query nested in a disjunction query, rewrite function return the original term query without clone and may cause bad boost value in upper queries. Delete the if statement and always do\n if (query == c.getQuery()) {                   // if rewrite was no-op            query = query.clone();         // then clone before boost          }\ncan fix this bug.\n\nsample query may cause this bug: ((((title:at)~1^2.0)))^4.5   after rewrite the query will be changed to  ((((title:at)~1^9.0)))^4.5 and Query.clone() won't work for this problem because your lazy clone strategy.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14530704",
            "author": "Adrien Grand",
            "content": "I don't understand why not cloning is an issue and I could not reproduce the issue:\n\n\n  private static BooleanQuery should(Query q) {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q, Occur.SHOULD);\n    return bq;\n  }\n  \n  public static void main(String[] args) throws Exception {\n    try (Directory dir = new RAMDirectory();\n         IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new WhitespaceAnalyzer()))) {\n      Document doc = new Document();\n      doc.add(new TextField(\"title\", \"at\", Store.NO));\n      w.addDocument(doc);\n      w.commit();\n      try (DirectoryReader reader = DirectoryReader.open(dir)) {\n        FuzzyQuery fuzzyQuery = new FuzzyQuery(new Term(\"title\", \"at\"), 1);\n        Query query = fuzzyQuery;\n        query = should(query);\n        query.setBoost(2);\n        query = should(query);\n        query = should(query);\n        query.setBoost(4.5f);\n        System.out.println(query);\n        Query rewritten = query.rewrite(reader);\n        System.out.println(rewritten);\n      }\n    }\n  }\n\n\n\nwhich prints\n\n\n((((title:at~1)^2.0)))^4.5\n(title:at)^9.0\n\n\n\nClosing it for now, please reopen if you can still reproduce and share what query parser you are using. ",
            "date": "2015-05-06T15:22:09+0000"
        }
    ]
}