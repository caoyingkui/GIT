{
    "id": "SOLR-11913",
    "title": "SolrParams ought to implement Iterable<Map.Entry<String,String[]>>",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "SolrJ ought to implement Iterable<Map.Entry<String,String[]>> so that it's easier to iterate on it, either using Java 5 for-each style, or Java 8 streams.  The implementation on ModifiableSolrParams can delegate through to the underlying LinkedHashMap entry set.  The default impl can produce a Map.Entry with a getValue that calls through to getParams.",
    "attachments": {
        "SOLR-11913.patch": "https://issues.apache.org/jira/secure/attachment/12914985/SOLR-11913.patch",
        "SOLR-11913_v2.patch": "https://issues.apache.org/jira/secure/attachment/12915466/SOLR-11913_v2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-22T08:20:30+0000",
            "content": "From whatever I understood(Apologies if I'm heavily wrong, just started using Solr)\nscratch\u3002\u3002\u3002 \n\npublic Iterator<Map.Entry<String, String[]>> Iterable(SolrParams params){\n    vals = new LinkedHashMap<>();\n    if( params != null ) {\n      this.add( params );\n    }\n    Iterator<Map.Entry<String, String[]>> entries = vals.entrySet().iterator();\n    return entries;\n  }\n\n  public String[] getValue(Iterator<Map.Entry<String, String[]>> it){\n\n    if (it.hasNext()) {\n      Map.Entry<String, String[]> pair = it.next();\n      return getParams(pair.getKey());\n    }\n    return null;\n  }\n\n ",
            "author": "Tapan Vaishnav",
            "id": "comment-16372535"
        },
        {
            "date": "2018-02-23T04:10:42+0000",
            "content": "For the Iterable part, that might work but I don't think a LinkedHashMap should be created internally just to expose this. When I referred to getValue it was specifically for Map.Entry.getValue so it shouldn't consume an iterator's position \u2013 i.e.\u00a0repeated calls should produce the same result. ",
            "author": "David Smiley",
            "id": "comment-16373894"
        },
        {
            "date": "2018-03-17T05:12:30+0000",
            "content": "David Smiley Gus Heck\nI have added the patch. Please have a look at it and let me know your feedback. ",
            "author": "Tapan Vaishnav",
            "id": "comment-16403273"
        },
        {
            "date": "2018-03-19T21:29:05+0000",
            "content": "It's a start.\nThe key part as referenced in the description \u2013 having SolrParams implement Iterable wasn't done.\nWhy did you create SolrParams.getMapEntry?  You could inline it to do an anonymous inner class\nPlease override this for ModifiableSolrParams to return a more optimal implementation.\n\nAfter I code review those changes, we can consider callers of getParameterNamesIterator to see which of those would be good candidates to renovate to use the Java 5 for-each style. ",
            "author": "David Smiley",
            "id": "comment-16405481"
        },
        {
            "date": "2018-03-21T11:50:03+0000",
            "content": "David Smiley \nThanks for your review. \nI have fixed the pointed out changes and attached as SOLR-11913_v2.patch.\u00a0Please, have a look whenever\u00a0you get time.\n\n>\u00a0The key part as referenced in the description \u2013 having SolrParams implement Iterable wasn't done.\nI thought that we had to implement the function not as in the implements keyword.\n\n> Why did you create SolrParams.getMapEntry? You could inline it to do an anonymous inner class\nIt wasn't creating any unnecessary new object and I thought that we might use it in future but has been fixed now.\n\n> Please override this for ModifiableSolrParams to return a more optimal implementation.\nI have overridden the iterator() from Iterable class for ModifiableSolrParams. But there are other classes too which extend SolrParams and need to be modified. Will do after the next review.\n\u00a0 ",
            "author": "Tapan Vaishnav",
            "id": "comment-16407783"
        },
        {
            "date": "2018-03-21T14:33:45+0000",
            "content": "1. When uploading updated patches, please use an identical filename.  JIRA tracks revisions provided that the file name hasn't changed.\n2. I suspect your latest patch won't compile.  I see SolrParams now implements Iterable (great), but in doing so you must provide an implementation of the iterator method, which you didn't.  Though you did provide a method getMapEntryIteretor which should be renamed to iterator.\n3. \nBut there are other classes too which extend SolrParams and need to be modified.\n\nOnly subclasses of SolrParams that can offer a more efficient implementation should override the default implementation you are adding to SolrParams.  You'll hopefully realize this as you progress. ",
            "author": "David Smiley",
            "id": "comment-16408001"
        },
        {
            "date": "2018-03-23T01:19:43+0000",
            "content": "1. When uploading updated patches, please use an identical filename. JIRA tracks revisions provided that the file name hasn't changed.\nI see.\nThough you did provide a method getMapEntryIteretor which should be renamed to iterator.\nDone.\n\nPlease have a look, apologies for making you review again n again. ",
            "author": "Tapan Vaishnav",
            "id": "comment-16410663"
        },
        {
            "date": "2018-03-23T02:19:30+0000",
            "content": "You're getting there Tapan!\n\nTypo in test name: testMapEntyrIterators\n\nNow, quoting the description where I mentioned one detail not done...\n\nThe default impl can produce a Map.Entry with a getValue that calls through to getParams.\n\nInstead I see that you're calling getParams eagerly.  The distinction is that callers that only care about certain named params will needlessly pay a cost to getParams for parameters that aren't even needed.\n\nBTW try ant precommit.  Hopefully it'll show you that you need to use @Override\n\nCan you please try updating some callers of getParameterNamesIterator to see which of those would be good candidates to renovate to use the Java 5 for-each style?  Perhaps do everything but Solr \"core\" (i.e. just SolrJ + contribs) which can be tested in less time than running \"ant test\" on everything.  Although you did add a unit test which is nice, there's nothing like real-world usage through other code that needs to use it. ",
            "author": "David Smiley",
            "id": "comment-16410710"
        },
        {
            "date": "2018-03-23T08:48:44+0000",
            "content": "The default impl can produce a Map.Entry with a getValue that calls through to getParams.\nThis I didn't think of. Thanks for pointing it out, have fixed now and will upload with the latest patch.\nI have fixed the typo in testcase and added the override annotation. (though haven't uploaded the patch yet.)\nBTW try ant precommit. Hopefully it'll show you that you need to use @Override\nI tried doing so but it gave me some error stating Rat problems were found! . I tried searching over the internet but couldn't find anything useful, did some playing around build.xml but all was in waste.\n\nAnyways, what I want to ask is when you said about callers of getParameterNamesiterator(), did you mean callers in SolrParams class only or all callers of that iterator function?\nWhat I mean to say is there are some functions in SolrParam class which are using getParameterNamesiterator() and we can modify those functions for Java 5 foreach or Java 8 stream style. Or there are some classes which are extending the SolrParams like ModifiableSolrParams, MultiMapSolrParams etc which are using getParameterNamesiterator() and we can modify those for Java 5 foreach or Java 8 stream style. Though ModifiableSolrParams is just an example, I check for this class and it is using getParameterNamesiterator() for its add(SolrParams params) function which has never been called, so no point in changing that, I guess. ",
            "author": "Tapan Vaishnav",
            "id": "comment-16411026"
        },
        {
            "date": "2018-03-27T17:50:31+0000",
            "content": "I tried doing so but it gave me some error stating Rat problems were found! . I tried searching over the internet but couldn't find anything useful, did some playing around build.xml but all was in waste.\nThat refers to quality or style checks that Lucene/Solr expressly insists upon. \u00a0The log output should tell you exactly what the problem is.\n\u00a0when you said about callers of getParameterNamesiterator(), did you mean callers in SolrParams class only or all callers of that iterator function?\nAll. \u00a0Note your IDE should have a \"find usages\" or similarly named feature.\n\nThough ModifiableSolrParams is just an example, I check for this class and it is using getParameterNamesiterator() for its add(SolrParams params) function which has never been called, so no point in changing that, I guess.\n\nPlease do change it.  When you say \"has never been called\"; maybe I don't understand what you mean but IntelliJ reports 30 usages across the codebase. ",
            "author": "David Smiley",
            "id": "comment-16415996"
        },
        {
            "date": "2018-04-04T04:32:12+0000",
            "content": "David Smiley Thanks for your reply.\nI have updated few getParameterNamesiterator() callers and fixed some bugs into the latest patch.\nPlease have a look and let me know your thoughts. ",
            "author": "Tapan Vaishnav",
            "id": "comment-16424994"
        },
        {
            "date": "2018-04-06T13:14:30+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 21s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 16s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 16s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m  4s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m  0s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n   0m 47s \n  dataimporthandler in the patch passed.  \n\n\n +1 \n  unit  \n   3m 39s \n  solrj in the patch passed.  \n\n\n  \n   \n   9m 40s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11913 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12917498/SOLR-11913.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 73d7410 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_152 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/40/testReport/ \n\n\n modules \n C: solr/contrib/dataimporthandler solr/solrj U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/40/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16428288"
        },
        {
            "date": "2018-04-12T20:30:39+0000",
            "content": "Here's an updated patch. I think it's ready.\n\n\tadded a convenience method: public Stream<Map.Entry<String, String[]>> stream()\n\tAdded\u00a0more javadocs, not just to the new methods here\n\tRe-ordered what you added\u00a0and the\u00a0existing writeMap to fit better with the loose organization of existing methods\n\tMultiMapSolrParams now overrides iterator().\n\tchanged assertEquals to assertArrayEquals where applicable in the test\n\n ",
            "author": "David Smiley",
            "id": "comment-16436266"
        },
        {
            "date": "2018-04-13T00:20:23+0000",
            "content": "David Smiley\nThanks for the updated patch.\nAdded more Javadocs, not just to the new methods here\nThanks for the Javadocs, I'll keep in mind about the manner from next time onwards.\nadded a convenience method: public Stream<Map.Entry<String, String[]>> stream()\nWe are not using the Override  annotation for the stream function, so isn't it better to re-order it about the iterator function for better code style?\n\nThank you for all your feedbacks, there were really helpful.  ",
            "author": "Tapan Vaishnav",
            "id": "comment-16436519"
        },
        {
            "date": "2018-04-13T02:54:28+0000",
            "content": "We are not using the Override annotation for the stream function, so isn't it better to re-order it about the iterator function for better code style?\nSure; I'll re-order that.  There is no real code rule about that here; I just try to maintain some semblance of some sort of organization that feels reasonable and not haphazard.\n\nThanks for helping out.  I'll expect to commit soon after the tests pass. ",
            "author": "David Smiley",
            "id": "comment-16436722"
        },
        {
            "date": "2018-04-13T02:57:58+0000",
            "content": "Sure; I'll re-order that. There is no real code rule about that here; I just try to maintain some semblance of some sort of organization that feels reasonable and not haphazard.\nI see. \nThanks for helping out. I'll expect to commit soon after the tests pass.\n ",
            "author": "Tapan Vaishnav",
            "id": "comment-16436723"
        },
        {
            "date": "2018-04-13T04:11:16+0000",
            "content": "Here's another update.  It turns out there were some problems with TextResponseWriter's order of instanceof checks.  So I tweaked that order to put some of the more general stuff towards the end.  I also added a nice toString to the Map.Entry we have.  Hopefully tests pass this time... ",
            "author": "David Smiley",
            "id": "comment-16436771"
        },
        {
            "date": "2018-04-13T04:25:14+0000",
            "content": "I see, how come it didn't show anything in the following report?\nhttps://issues.apache.org/jira/browse/SOLR-11913?focusedCommentId=16428288&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16428288\n\nAlso, apologies that you had to most of the work. ",
            "author": "Tapan Vaishnav",
            "id": "comment-16436784"
        },
        {
            "date": "2018-04-13T16:05:30+0000",
            "content": "Commit 9a149ad7e77837b7a99e84a4968fe43747ec30a0 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9a149ad ]\n\nSOLR-11913: SolrParams now implements Iterable<Map.Entry<String,String[]>>\nand has stream() ",
            "author": "ASF subversion and git services",
            "id": "comment-16437487"
        },
        {
            "date": "2018-04-13T16:06:22+0000",
            "content": "Commit a4f60c286319d2e46fb76f5461e8aa1101f8b9e0 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a4f60c2 ]\n\nSOLR-11913: SolrParams now implements Iterable<Map.Entry<String,String[]>>\nand has stream()\n\n(cherry picked from commit 9a149ad) ",
            "author": "ASF subversion and git services",
            "id": "comment-16437490"
        },
        {
            "date": "2018-04-13T16:09:09+0000",
            "content": "I'm really not sure why TestReqParamsAPI didn't fail on the earlier test run \u2013 weird. ",
            "author": "David Smiley",
            "id": "comment-16437495"
        }
    ]
}