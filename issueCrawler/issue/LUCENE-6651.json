{
    "id": "LUCENE-6651",
    "title": "Remove private field reflection (setAccessible) in AttributeImpl#reflectWith",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.2.1",
        "components": [
            "core/other"
        ],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "In AttributeImpl we currently have a \"default\" implementation of reflectWith (which is used by toString() and other methods) that uses reflection to list all private fields of the implementation class and reports them to the AttributeReflector (used by Solr and Elasticsearch to show analysis output).\n\nUnfortunately this default implementation needs to access private fields of a subclass, which does not work without doing Field#setAccessible(true). And this is done without AccessController#doPrivileged()!\n\nThere are 2 solutions to solve this:\n\n\tReimplement the whole thing with MethodHandles. MethodHandles allow to access private fields, if you have a MethodHandles.Lookup object created from inside the subclass. The idea is to add a protected constructor taking a Lookup object (must come from same class). This Lookup object is then used to build methodHandles that can be executed to report the fields. Backside: We have to require subclasses that want this \"automatic\" reflection to pass a Lookup object in ctor's super(MethodHandles.lookup()) call. This breaks backwards for implementors of AttributeImpls\n\tThe second idea is to remove the whole reflectWith default impl and make the method abstract. This would require a bit more work in tons of AttributeImpl classes, but you already have to implement something like this for equals/hashCode, so its just listing all fields. This would of couse break backwards, too. So my plan would be to implement the missing methods everywhere (as if it were abstract), but keep the default implementation in 5.x. We just would do AccessController.doPrivileged().",
    "attachments": {
        "LUCENE-6651-5x.patch": "https://issues.apache.org/jira/secure/attachment/12743343/LUCENE-6651-5x.patch",
        "LUCENE-6651-MethodHandles.patch": "https://issues.apache.org/jira/secure/attachment/12743101/LUCENE-6651-MethodHandles.patch",
        "LUCENE-6651.patch": "https://issues.apache.org/jira/secure/attachment/12743330/LUCENE-6651.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14610438",
            "author": "Uwe Schindler",
            "date": "2015-07-01T15:14:40+0000",
            "content": "I just spend a lot of time to implement the first approach - and works quite good. But I dont think we should go that way. I have the feeling, it was a cool experience with MethodHandles (see AttributeImpl#makeReflectors), but too complicated for nothing.\n\nI will provide another patch using the reflectWith() -> abstract path.\n\nAny comments? "
        },
        {
            "id": "comment-14610444",
            "author": "Uwe Schindler",
            "date": "2015-07-01T15:17:38+0000",
            "content": "I opened LUCENE-6652 to remove a lot of duplicate BytesRefAttributes in tests. This should be done before this, because it makes the patch a pain. "
        },
        {
            "id": "comment-14610823",
            "author": "Robert Muir",
            "date": "2015-07-01T18:55:46+0000",
            "content": "I like the idea of the simple solution! I agree with you, it is better to be simple here. "
        },
        {
            "id": "comment-14612059",
            "author": "Uwe Schindler",
            "date": "2015-07-02T15:12:05+0000",
            "content": "So coming back to this one. After cleanup of TermToBytesRefAttribute and test code duplication (LUCENE-6652, LUCENE-6653), I can fix the attributes to implement reflectWith() and make the base method abstract in trunk. "
        },
        {
            "id": "comment-14612106",
            "author": "Uwe Schindler",
            "date": "2015-07-02T15:49:20+0000",
            "content": "Patch.\n\nThis also adds a missing clone() to one of the attributes encountered. "
        },
        {
            "id": "comment-14612111",
            "author": "Robert Muir",
            "date": "2015-07-02T15:51:50+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14612125",
            "author": "Uwe Schindler",
            "date": "2015-07-02T16:01:39+0000",
            "content": "Minor updates, adding Java 8 @FunctionalInterface to AttributeReflector.\n\nWil commit this soon and provide a patch for branch_5x, with all implementations but preserving the reflection inside a AccessController.doPrivileged() for backwards compatibility. "
        },
        {
            "id": "comment-14612148",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T16:18:53+0000",
            "content": "Commit 1688855 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1688855 ]\n\nLUCENE-6651: AttributeImpl#reflectWith(AttributeReflector) was made abstract and has no reflection-based default implementation anymore. "
        },
        {
            "id": "comment-14612149",
            "author": "Mike Drob",
            "date": "2015-07-02T16:19:07+0000",
            "content": "Nit: ComputedRangesAttributeImpl c = (ComputedRangesAttributeImpl) super.clone();; double semi-colon.\n\nWhy remove UniqueFieldAttributeImpl.toString? Seems like it would be safe to leave it even if it is not strictly necessary, yes? "
        },
        {
            "id": "comment-14612167",
            "author": "Uwe Schindler",
            "date": "2015-07-02T16:39:12+0000",
            "content": "Patch for 5.x, using AccessController.doPrivileged.\n\nIf needed for Elasticsearch, I can backport just the changes in AttributeImpl to 5.2.2! "
        },
        {
            "id": "comment-14612168",
            "author": "Uwe Schindler",
            "date": "2015-07-02T16:39:55+0000",
            "content": "toString() should not be implemented, because its done automatically using reflectWith(). "
        },
        {
            "id": "comment-14612169",
            "author": "Uwe Schindler",
            "date": "2015-07-02T16:42:00+0000",
            "content": "The only special case is CharTermAttributeImpl, because it needs to comply with CharSequence API. This is also one reason why we added explicit attribute reflection back in 3.x. "
        },
        {
            "id": "comment-14612183",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T16:54:26+0000",
            "content": "Commit 1688863 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688863 ]\n\nLUCENE-6651: AttributeImpl#reflectWith(AttributeReflector)'s default Impl was \"deprecated\" in 5.x. All code should implement this. In addition the default impl is now using AccessController.doPrivileged() to do the accessibility changes. "
        },
        {
            "id": "comment-14612189",
            "author": "Uwe Schindler",
            "date": "2015-07-02T16:55:50+0000",
            "content": "Please repoen for backport of AttributeImpl#reflectWith(AttributeReflector) to 5.2.2! "
        },
        {
            "id": "comment-14612435",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T20:00:51+0000",
            "content": "Commit 1688898 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688898 ]\n\nLUCENE-6651: Add a test for the old reflector, also without rights "
        },
        {
            "id": "comment-14612437",
            "author": "Uwe Schindler",
            "date": "2015-07-02T20:01:57+0000",
            "content": "I added a test for the old reflector code, so we ensure that it works. It is also tested with lower rights. "
        },
        {
            "id": "comment-14612440",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T20:05:53+0000",
            "content": "Commit 1688899 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688899 ]\n\nLUCENE-6651: Remove useless class descriptor "
        },
        {
            "id": "comment-14612477",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T20:32:31+0000",
            "content": "Commit 1688903 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688903 ]\n\nLUCENE-6651: Try to fix test (somehow empty permissions grant all) "
        },
        {
            "id": "comment-14612489",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T20:41:51+0000",
            "content": "Commit 1688905 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688905 ]\n\nLUCENE-6651: Comment out test for now (fails only on Linux, no idea why!) "
        },
        {
            "id": "comment-14612526",
            "author": "ASF subversion and git services",
            "date": "2015-07-02T21:08:59+0000",
            "content": "Commit 1688913 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688913 ]\n\nLUCENE-6651: Remove test completely: Cannot work (inner doPrivileged reverts back to codebase granted permissions; no idea why it worked for me) "
        },
        {
            "id": "comment-14713113",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:48+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}