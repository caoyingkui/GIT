{
    "id": "SOLR-8851",
    "title": "ClassCastException in SearchHandler",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.4.1",
        "status": "Resolved",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "When there is a query timeout in non-distrub mode, SearchHandler is throwing a ClassCastException:\n\njava.lang.ClassCastException: org.apache.solr.response.ResultContext cannot be cast to org.apache.solr.common.SolrDocumentList\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:293)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:156)\n\t...\n\n\nThe problem can be reproduced if any component running after QueryComponent times out - in our case it is FacetComponent which throws a ExitingReaderException.\nSearchHandler:293 expects a SolrDocumentList in rsp.response, but QueryComponent did add a ResultContext instead.\n\nIt looks like this is not a problem, if the QueryComponent itself is timing out, as rsp.response is null in that case. It's only a problem if a component after QueryComponent is timing out.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-24T08:15:07+0000",
            "author": "Marius Grama",
            "content": "The only place I see that ExitingReaderException is being thrown is in the ExitableDirectoryReader.ExitableTermsEnum class.\n\nI could reproduce the ExitableDirectoryReader.ExitingReaderException in the class SearchHandler by using the following query :\n\nhttp://localhost:8983/solr/techproducts/terms?terms.fl=name&timeAllowed=1\n\nIn this case, the call rb.rsp.getValues().get(\"response\") returns null reason why the variable r of type SolrDocumentList will be explicitly instantiated and the issue reported by you doesn't occur.\n\nOn the other hand, I see in the QueryComponent class that an object instance of type ResultContext is used  for \"response\"\n\n\n    ResultContext ctx = new ResultContext();\n    ctx.docs = rb.getResults().docList;\n    ctx.query = rb.getQuery();\n    rsp.add(\"response\", ctx);\n\n\n\n, so the code line SearchHandler.java 293 is not quite correct : \n\n\nSolrDocumentList r = (SolrDocumentList) rb.rsp.getValues().get(\"response\");\n\n\n\nCould you give me a concrete solr query for reproducing the issue? ",
            "id": "comment-15209950"
        },
        {
            "date": "2016-03-29T10:11:11+0000",
            "author": "Pascal Chollet",
            "content": "It can be reproduced with a wildcard query matching to really many terms. In our case the query matches to something like 3 million terms - QueryComponent.process() finishes without timeout, but then the timeout happens in FacetComponent.process()\n\nThis is the stacktrace when the exception is being thrown:\n\nat org.apache.lucene.index.ExitableDirectoryReader$ExitingReaderException.<init>(ExitableDirectoryReader.java:47)\nat org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum.checkAndThrow(ExitableDirectoryReader.java:166)\nat org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum.next(ExitableDirectoryReader.java:178)\nat org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.rewrite(MultiTermQueryConstantScoreWrapper.java:181)\nat org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.scorer(MultiTermQueryConstantScoreWrapper.java:213)\nat org.apache.lucene.search.BoostQuery$1.scorer(BoostQuery.java:168)\nat org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(DisjunctionMaxQuery.java:177)\nat org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(DisjunctionMaxQuery.java:177)\nat org.apache.lucene.queries.function.BoostedQuery$BoostedWeight.scorer(BoostedQuery.java:99)\nat org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(DisjunctionMaxQuery.java:177)\nat org.apache.solr.search.FilterImpl$FilterSet.iterator(SolrIndexSearcher.java:2523)\nat org.apache.solr.search.SolrIndexSearcher.getDocSet(SolrIndexSearcher.java:1030)\nat org.apache.solr.request.SimpleFacets.computeDocSet(SimpleFacets.java:266)\nat org.apache.solr.request.SimpleFacets.parseParams(SimpleFacets.java:225)\nat org.apache.solr.request.SimpleFacets.getFacetFieldCounts(SimpleFacets.java:610)\nat org.apache.solr.handler.component.FacetComponent.getFacetCounts(FacetComponent.java:295)\nat org.apache.solr.handler.component.FacetComponent.process(FacetComponent.java:257)\nat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:281)\nat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:156)\nat org.apache.solr.core.SolrCore.execute(SolrCore.java:2073)\nat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:658)\nat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:457)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:223)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:181)\n\n ",
            "id": "comment-15215801"
        },
        {
            "date": "2016-03-30T19:22:38+0000",
            "author": "Marius Grama",
            "content": "Issue can be reproduced (quite often) on the techproducts  example collection with the following query :\n\n\nhttp://localhost:8983/solr/techproducts/select?q=*:*&wt=json&indent=true&facet=true&facet.query={!tag=q1}manufacturedate_dt:[2006-01-01T00:00:00Z%20TO%20NOW]&facet.query={!tag=q1}price:[0%20TO%20100]%20&timeAllowed=1\n\n\n\nMoreover I notice now that also for the terms query : \n\n\nhttp://localhost:8983/solr/techproducts/terms?terms.fl=name&timeAllowed=1\n\n\n\nthe result element is delivered only (even though it is not needed) when the query times out : \n\n\n<response>\n   <lst name=\"responseHeader\">\n     <bool name=\"partialResults\">true</bool>\n     <int name=\"status\">0</int>\n     <int name=\"QTime\">8762</int>\n  </lst>\n  <lst name=\"terms\">\n    <lst name=\"name\"/>\n  </lst>\n  <result name=\"response\" numFound=\"0\" start=\"0\"/>\n</response>\n\n\n\nI am further investigating whether SearchHandler lines 294-303 can be avoided : \n\n        SolrDocumentList r = (SolrDocumentList) rb.rsp.getValues().get(\"response\");\n        if(r == null)\n          r = new SolrDocumentList();\n        r.setNumFound(0);\n        rb.rsp.add(\"response\", r);\n        if(rb.isDebug()) {\n          NamedList debug = new NamedList();\n          debug.add(\"explain\", new NamedList());\n          rb.rsp.add(\"debug\", debug);\n        }\n\n ",
            "id": "comment-15218651"
        },
        {
            "date": "2016-04-01T11:35:15+0000",
            "author": "Marius Grama",
            "content": "Anshum Gupta any thoughts on why your work from SOLR-6616 patch hasn't been yet (it is more than a year now) applied? ",
            "id": "comment-15221573"
        },
        {
            "date": "2016-04-01T11:55:40+0000",
            "author": "Markus Jelsma",
            "content": "I think this duplicates SOLR-7864 ",
            "id": "comment-15221595"
        },
        {
            "date": "2016-04-01T12:33:31+0000",
            "author": "Marius Grama",
            "content": "Markus Jelsma indeed the ticket is a duplicate of SOLR-7864 . The patch that you have recommended on SOLR-7864 doesn't take into account that, in some situations,  (like the terms query mentioned in my comment above) is not needed.  Wouldn't it make more sense to add the response/explaint/... elements in the prepare phase of the org.apache.solr.handler.component.SearchComponent implementations and fill them during the process phase ? ",
            "id": "comment-15221636"
        },
        {
            "date": "2016-08-25T14:30:56+0000",
            "author": "David Smiley",
            "content": "I'm resolving this as a duplicate; lets have discussion on SOLR-7864 instead.. ",
            "id": "comment-15436984"
        }
    ]
}