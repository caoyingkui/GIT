{
    "id": "SOLR-517",
    "title": "highlighter doesn't work with hl.requireFieldMatch=true on un-optimized index",
    "details": {
        "affect_versions": "1.2,                                            1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "On un-optimized index, highlighter doesn't work with hl.requireFieldMatch=true.\n\nsee:\nhttp://www.nabble.com/hl.requireFieldMatch-and-idf-td16324482.html",
    "attachments": {
        "SOLR-517.patch": "https://issues.apache.org/jira/secure/attachment/12378862/SOLR-517.patch",
        "TestNegativeIdf.java": "https://issues.apache.org/jira/secure/attachment/12388018/TestNegativeIdf.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12583325",
            "date": "2008-03-29T14:32:45+0000",
            "content": "Attached patch uses QueryScorer(query, fieldName) constructor instead of QueryScorer(query, reader, fieldName) to get QueryScorer instance. This solves the problem. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12583509",
            "date": "2008-03-31T00:53:30+0000",
            "content": "Added a test case. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12602857",
            "date": "2008-06-05T23:36:56+0000",
            "content": "Koji:  Is this resolved?  I seemed to recall that we brought this up on java-dev, but I can't find the thread at the moment.\n\n(I don't think that the right thing to do is remove idf fetching of the terms as your patch proposes) "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12602884",
            "date": "2008-06-06T02:47:09+0000",
            "content": "just updated patch for current trunk. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12602885",
            "date": "2008-06-06T02:48:28+0000",
            "content": "Mike,\n\nI think we discussed this on solr-user, not java-dev.\n\nhttp://www.nabble.com/hl.requireFieldMatch-and-idf-td16324482.html#a16324482\n\nAs I pointed out in the thread, I think Lucene can return negative idf and this is Lucene's feature.\nDo you agree on this point?\n\n> (I don't think that the right thing to do is remove idf fetching of the terms as your patch proposes)\n\nHow about introducing a new hl parameter to choose QueryScorer constructor so that users to avoid negative idf with un-optimized index, instead of just removing idf fetching?\n\n\nif (reqFieldMatch) {\n  if (considerIdf) // this is default\n    return new QueryScorer(query, request.getSearcher().getReader(), fieldName);\n  else\n    return new QueryScorer(query, fieldName);\n}\nelse {\n   return new QueryScorer(query);\n}\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12621665",
            "date": "2008-08-12T01:14:20+0000",
            "content": "I'd be happy to fix this in the Lucene Highlighter, but what is actually going on to get a negative? By the look of it, I don't see possible values that could create a negative result - even if you allowed for negative inputs, you could still only get positives, NAN, or Infinity.\n\nCan you elaborate or make a test case?\n\nAlso, it doesn't appear helpful to use the IndexReader method unless you want to use those scores for other things (gradient highlighting etc). If you count on that, it can't be changed, if you don't it should be changed. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12621667",
            "date": "2008-08-12T01:44:02+0000",
            "content": "Can you elaborate or make a test case?\n\nThe patch includes a test case that indicates negative idf. If it doesn't please let me know so that I do double check.\n\nAlso, it doesn't appear helpful to use the IndexReader method unless you want to use those scores for other things (gradient highlighting etc). If you count on that, it can't be changed, if you don't it should be changed.\n\nI'm afraid but I don't understand what you are saying (current trunk is using IndexReader method). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12621671",
            "date": "2008-08-12T02:11:53+0000",
            "content": "Yeah, I had tried to turn that test into duplicate Lucene actions, and I couldn't replicate the problem. I will give it a whirl with solr when I get a chance.\n\nWhat values for totalNumDocs and docFreq are being used when you get the exception? I still don't see how your seeing a negative there...\n\n>>I'm afraid but I don't understand what you are saying (current trunk is using IndexReader method).\n\nIf you use the IndexReader method token scoring is done using the idf formula - so you could do highlighting to varying degrees based on the score. There is a cost to this to get the info for the idf calculation and then also the calculation. If you don't use the IndexReader method, hits are just scored 1 or 0 pretty much. Thats all thats need for basic highlighting. But if no one is using the richer highlighting scores, you pay for nothing. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12621687",
            "date": "2008-08-12T04:23:18+0000",
            "content": "Ok, I provided a Lucene program (TestNegativeIdf.java) to show negative idf.\n\nTo see negative idf, do not optimize() (do not uncomment the following line):\n\n\nstatic void deleteDocument() throws IOException {\n    IndexWriter writer = new IndexWriter( dir, analyzer, false, MaxFieldLength.LIMITED );\n    writer.deleteDocuments( new Term( \"t_text1\", \"del\" ) );\n    // To see negative idf, keep comment the following line\n    //writer.optimize();\n    writer.close();\n}\n\n\n\nYou'll get a null fragment due to negative idf. Easiest way to avoid negative idf, switch the scorer:\n\n\n// This scorer can return negative idf -> null fragment\nScorer scorer = new QueryScorer( query, searcher.getIndexReader(), \"t_text1\" );\n// This scorer doesn't use idf (patch version)\n//Scorer scorer = new QueryScorer( query, \"t_text1\" );\n\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12621688",
            "date": "2008-08-12T04:34:58+0000",
            "content": "updated for current trunk. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12621769",
            "date": "2008-08-12T11:02:07+0000",
            "content": "Thanks much Koji - appreciate it and if it is indeed something I can handle at the Lucene highlighter I'll add an issue soon.\n\n>> You'll get a null fragment due to negative idf. Easiest way to avoid negative idf, switch the scorer:\n\nThanks! Thats probably the issue...I was looking for an exception - didn't realize it emitted a null fragment instead. I'll dig into things sometime today. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12621778",
            "date": "2008-08-12T11:28:59+0000",
            "content": "I'll take care of it at the Lucene Highlighter level: https://issues.apache.org/jira/browse/LUCENE-1355\n\nThanks again Koji. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12622026",
            "date": "2008-08-12T23:26:56+0000",
            "content": "Thanks Mark for taking care of this issue at Lucene Highlighter level.  "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12623947",
            "date": "2008-08-20T09:48:21+0000",
            "content": "I'll verify this soon. If LUCENE-1355 solves this issue, I'll commit new lucene-highlighter-2.4-dev.jar. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12623976",
            "date": "2008-08-20T12:33:30+0000",
            "content": "Hmmm. New lucene-highlighter-2.4-dev.jar solves this issue but causes testPhraseHighlighter junit error:\n\n\n$ ant clean test\n     :\n    [junit] Running org.apache.solr.highlight.HighlighterTest\n    [junit] Tests run: 17, Failures: 0, Errors: 1, Time elapsed: 21.313 sec\n    [junit] Test org.apache.solr.highlight.HighlighterTest FAILED\n\n\n\nI'll look into this on tomorrow.  "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12624134",
            "date": "2008-08-20T21:00:35+0000",
            "content": "The cause of the junit error is lack of lucene-memory-2.4-dev.jar. The latest lucene-memory-2.4-dev.jar needs LUCENE-1334.\nSo we need these changes to be committed (r687014):\n\n\n$ svn status\nM      lib\\lucene-snowball-2.4-dev.jar\nM      lib\\lucene-core-2.4-dev.jar\nM      lib\\lucene-highlighter-2.4-dev.jar\nM      lib\\lucene-spellchecker-2.4-dev.jar\nM      lib\\lucene-analyzers-2.4-dev.jar\nA      lib\\lucene-memory-2.4-dev.jar\nM      lib\\lucene-queries-2.4-dev.jar\nM      src\\test\\org\\apache\\solr\\highlight\\HighlighterTest.java\n\n\n\nAll test pass.\nI'll commit them tomorrow if there is no objections. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12624446",
            "date": "2008-08-21T18:38:18+0000",
            "content": "Committed revision 687825. "
        }
    ]
}