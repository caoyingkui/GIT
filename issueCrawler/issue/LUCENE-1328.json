{
    "id": "LUCENE-1328",
    "title": "FileNotFoundException in",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.1",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "I had this problem for a while. here is how I used lucene index:\n\n1) I don't use compound file.\n\n2) I have a single process and a single thread to update index as index updater. The index is really small, the mergefactor is 10.\nAfter index is updated, the same thread copies the index to a tmp directory, validate the index in the tmp directory by:\n\nIndexReader reader = IndexReader.open(tmp_directory);\nreader.close();\n\nthen rename the tmp directory to a snapshot_timestamp;\n\n3) the snapshot_timestamp is rsyn to search nodes which DO NOT update index.\n\n4) We automatically stop and start index updater and search nodes every midnight. (don't ask me why)\n\n\nHere is what I observed:\n\n1) Not always, sometimes when index updater is started during our automatic recycle, we got\n\njava.io.FileNotFoundException: /var/tmp/index/_gw.fnm (No such file or directory)\n        at java.io.RandomAccessFile.open(Native Method)\n        at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)\n        at org.apache.lucene.store.FSDirectory$FSIndexInput$Descriptor.<init>(FSDirectory.java:501)\n        at org.apache.lucene.store.FSDirectory$FSIndexInput.<init>(FSDirectory.java:526)\n        at org.apache.lucene.store.FSDirectory.openInput(FSDirectory.java:440)\n        at org.apache.lucene.index.FieldInfos.<init>(FieldInfos.java:57)\n        at org.apache.lucene.index.SegmentReader.initialize(SegmentReader.java:176)\n        at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:157)\n        at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:130)\n        at org.apache.lucene.index.IndexReader$1.doBody(IndexReader.java:205)\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:610)\n        at org.apache.lucene.index.IndexReader.open(IndexReader.java:184)\n        at org.apache.lucene.index.IndexReader.open(IndexReader.java:157)\n\nNote each time, the missing file is different. When this happen, the program automatically tried to reopen the most recent THREE snapshots and we got the same exception for each snapshot. Remember, each of the snapshot was validated before it was copied.\n\n2) The similar things happened on the search node: the same index which was opened OK during last night nodes recycle could not be opened due to the same exception. The search node does not update index.\n\nIn my case, the index was \"validated\" before, and it became invalidate in a later time. It seems it happened only when we restart the application. When the exception happen, the file did not exist in the index.\n\n--Yajun",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-07-11T18:47:19+0000",
            "content": "I think this came down to not closing IndexSearchers... ",
            "author": "Michael McCandless",
            "id": "comment-12612957"
        },
        {
            "date": "2008-07-14T20:12:19+0000",
            "content": "Ok, after adding lots of logging, I finally found the problem. We have a cron job which deletes old files. Sometimes over the weekend, there are not much updates of index (We are a B2B web site), so files of old segments were deleted by the cron job, so it is not a bug. ",
            "author": "Let me out",
            "id": "comment-12613436"
        },
        {
            "date": "2008-07-14T20:18:15+0000",
            "content": "OK, thanks for bringing closure here! ",
            "author": "Michael McCandless",
            "id": "comment-12613439"
        }
    ]
}