{
    "id": "SOLR-6939",
    "title": "UpdateProcessor to buffer & sample documents and then batch create neccessary fields",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "spun off of an idea in SOLR-6016...\n\n\nWe could add a SchemaGeneratorHandler which would generate the \"best\" schema.\n\nYou wouldn't need/want a handler for this \u2013 you'd just need an UpdateProcessorFactory to use in place of RunUpdateProcessorFactory that would look at the datatypes of the fields in each document w/o doing any indexing and pick the least common denominator.\n\nSo then you'd have a chain with all of your normal update processors including the TypeMapping processors configured with the preccedence orders and locales and format strings you want \u2013 and at the end you'd have your BestFitScheamGeneratorUpdateProcessorFactory that would look at all those docs, study their values, and throw them away \u2013 until a commit comes along, at which point it does all the under the hood schema field addition calls.\n\nSo to learn, you'd send docs using whatever handler/format you wnat (json, xml, extraction, etc...) with an update.chain=my.datatype.learning.processor.chain request param ... and once you've sent a bunch and giving it a lot of variety to see, then you send a commit so it creates the schema and then you re-index your docs for real w/o that special chain.\n\n...not mentioned originally: this factory could also default to assuming fields should be single valued, unless/until it sees multiple values in a doc that it samples.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-09T15:28:42+0000",
            "author": "Alexandre Rafalovitch",
            "content": "So the interesting question is how the URP will know the upgrade path of types. That Int should upgrade to Float, etc.\n\nMay need a Type Tree of some sort with Strings on top. \n\nIn the beginning, L*ne created String type. And it was good!\nBut then the numbers had to be stored and they did not sort of facet well.\nAnd then two numbers looked at each other and realised that they were different. \nOne of them was straight and precise and another was imprecise and always floating.\nAnd they saw each other, different as they were, next to each other in the bad sort and got embarrassed.\nAnd L*ne got annoyed and cast them out of the uniform String type and created individual types, and packers.\nAnd L*ne made some of the types special and more unique by letting them be stored as DocValues, but kept others individual and stored one-by-one on disk.\nAnd then the flood came and cast some of the older types out to the legacy hell. ",
            "id": "comment-14271152"
        }
    ]
}