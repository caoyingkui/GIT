{
    "id": "SOLR-5746",
    "title": "solr.xml parsing of \"str\" vs \"int\" vs \"bool\" is brittle; fails silently; expects odd type for \"shareSchema\"",
    "details": {
        "affect_versions": "4.3,                                            4.4,                                            4.5,                                            4.6",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A comment in the ref guide got me looking at ConfigSolrXml.java and noticing that the parsing of solr.xml options here is very brittle and confusing.  In particular:\n\n\n\tif a boolean option \"foo\" is expected along the lines of <bool name=\"foo\">true</bool> it will silently ignore <str name=\"foo\">true</str>\n\tlikewise for an int option <int name=\"bar\">32</int> vs <str name=\"bar\">32</str>\n\n\n\n... this is inconsistent with the way solrconfig.xml is parsed.  In solrconfig.xml, the xml nodes are parsed into a NamedList, and the above options will work in either form, but an invalid value such as <bool name=\"foo\">NOT A BOOLEAN</bool> will generate an error earlier (when parsing config) then <str name=\"foo\">NOT A BOOLEAN</str> (attempt to parse the string as a bool the first time the config value is needed)\n\nIn addition, i notice this really confusing line...\n\n\n    propMap.put(CfgProp.SOLR_SHARESCHEMA, doSub(\"solr/str[@name='shareSchema']\"));\n\n\n\n\"shareSchema\" is used internally as a boolean option, but as written the parsing code will ignore it unless the user explicitly configures it as a <str/>",
    "attachments": {
        "SOLR-5746.patch": "https://issues.apache.org/jira/secure/attachment/12654989/SOLR-5746.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13904881",
            "date": "2014-02-19T00:40:40+0000",
            "content": "I think what we should do is...\n\n\n\tchange the parsing logic to be more like solrconfig.xml and build a NamedList for each section of solr.xml\n\t\n\t\tconvert each NamedList to SolrParams when possible for easy value type checkig & conversion (i think this would work for each section in solr.xml today - but some future sections might need to be more complicated)\n\t\n\t\n\tremove each known config option from the params\n\terror if any unexpected values are found in the config, so typos in config option names aren't silently ignored.\n\n "
        },
        {
            "author": "Maciej Zasada",
            "id": "comment-14057498",
            "date": "2014-07-10T14:08:47+0000",
            "content": "Hi Hoss Man,\n\nI'd like to submit a patch for that issue. I made changes accordingly to your suggestions:\n\n\tparsing logic has changed, so that config parameters are transformed to the expected types at the parsing time, instead of value-reading time. I'm transforming each solr.xml section to the NamedList, and later on to the SolrParams; Essentially, if boolean type of foo parameter is expected, <str name=\"foo\">true</str> will work just fine. Same goes for other types.\n\texception is thrown if any unexpected values are found in the config at the parse time.\n\n\n\nIf you have any suggestions, I'm more than happy to hear them.\n\nCheers,\nMaciej "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14057675",
            "date": "2014-07-10T17:04:21+0000",
            "content": "Maciej:\n\nAt first glance this looks awsome \u2013 i'll try to review it more closely in the next few days.\n\nA few quick things i noticed:\n\n\n\tcan you update your tests to use the frameworks randomization when picking the boolean/numeric values that you put into the config strings \u2013 instead of using hardcoded values?  that way we reduce the risk of false positives due to the code using defaults instead of the value you intended (even if the defaults change)\n\tcan you add some asserts regarding the error message included in the SolrExceptions that are caught by the tests, so we verify that the user is getting a useful message?\n\tin the case where there might be multiple unexpected config keys found, can you add logging of each of the unexpected keys, and then make the exception thrown something like \"Found 5 unexpected config options in solr.xml: foo, bar, baz, yak, zot\"\n\n\n\n "
        },
        {
            "author": "Maciej Zasada",
            "id": "comment-14058476",
            "date": "2014-07-11T06:35:53+0000",
            "content": "Hi Hoss Man,\n\nI've attached updated patch file:\n\n\tused framework's randomisation wherever it made sense to me;\n\tadded exception messages assertions;\n\tadded reporting of multiple unexpended config options (DEBUG level), as well as exception message containing list of unknown parameters (e.g. \n\nUnrecognised 3 config parameter(s) in solr.xml file: [foo, bar, baz]\n\n\n\n\nant clean test shows that there's no regression.\n\nCheers,\nMaciej "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14059550",
            "date": "2014-07-12T00:41:37+0000",
            "content": "Hi Maciej,\n\nI glance over the patch a bit more today:\n\n1) can you explain why the need for the new DOMUtil.readNamedChildrenAsNamedList method that you added instead of just using the existing DOMUtil.childNodesToNamedList (which delegates to addToNamedList and immediately validates that element text conforms to the stated type).\n\nI realize that using DOMUtil.childNodesToNamedList won't magically help parse/validate the config options in the backcompat cases like <str name=\"shareSchema\">true</str> \u2013 but that's where things like your storeConfigPropertyAsInt and storeConfigPropertyAsBoolean can be in charge of doing the cast if the \"raw\" value is still a string.\n\n(i want to make sure we aren't introducing a redundant method in DOMUtil.\n\n2) Speaking of which: what's the purpose exactly of \"configAsSolrParams\" if the original NamedList is still being passed to the storeConfigPropertyAs* methods - why not just get the values directly from there?\n\n3) One piece of validation that i believe is still missing here is to throw an errir if/when a config value is specified multiple times \u2013 I i remember the behavior of NamedList correctly, i think the way you have things now it will silently just use the first one, and then remove both.  We should definitely have an error check that any of these \"single valued\" config options is in fact only specified once in the NamedList \u2013 so people don't try to add a setting they've read about in the docs w/o realizing it's already defined higher up in the file (we've seen that happen with settings in solrconfig.xml many times between we locked that down and made it an error case)\n "
        },
        {
            "author": "Maciej Zasada",
            "id": "comment-14059771",
            "date": "2014-07-12T12:38:00+0000",
            "content": "1) can you explain why the need for the new DOMUtil.readNamedChildrenAsNamedList method that you added instead of just using the existing DOMUtil.childNodesToNamedList\nThe reason why I didn\u2019t use DOMUtil.childNodesToNamedList is that I wanted to move the type conversion from reading the DOM to the point, when I knew what type exactly should be used. If I used that method, all values would be upcasted to Object, and I would have to do the type checking to make sure if the type is correct, something like \n\nif (value instanceof Integer) {\n type is ok, just store the value as it is\n} else if(value instanceof String) {\n type is not ok, but let's try parsing this String to something useful\n}\n\n\n Instead, I\u2019m storing only the \"raw\" values, and trying to imply the correct type only once, without the type checking. But when I\u2019m thinking it all over again your approach seems to have a significant advantage - in proposed implementation type mismatch would be permitted for all types, not only <str></str>, e.g. <bool>3.14</bool> would be perfectly valid config option, if double type was expected. You\u2019re right, I\u2019ll remove new method and use DOMUtil.childNodesToNamedList.\n2) Speaking of which: what's the purpose exactly of \"configAsSolrParams\" if the original NamedList is still being passed to the storeConfigPropertyAs* methods - why not just get the values directly from there?\nSince I stored \"raw\" config values, I used SolrParam to do the type conversion, but I didn\u2019t find any API for a parameter removal. That\u2019s why I\u2019m keeping the original NamedList, so that I can remove correctly read values and keep track of the unknown ones.\n3) One piece of validation that i believe is still missing here is to throw an errir if/when a config value is specified multiple times\nI should\u2019ve thought about that, good catch! I\u2019ll add detection of such errors. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-14059805",
            "date": "2014-07-12T14:35:23+0000",
            "content": "Will the changes for this issue result in a bump of the Solr schema version (to 1.6), so that if existing apps do happen to \"work\" (albeit maybe incorrectly) with the current version 1.5 schema processing, they will still work in Solr 4.10 (or whenever this ships)? I hope so.\n "
        },
        {
            "author": "Maciej Zasada",
            "id": "comment-14060685",
            "date": "2014-07-14T14:34:23+0000",
            "content": "Hi Hoss Man,\n\nI've attached updated patch file:\n\n\tremoved DOMUtil.readNamedChildrenAsNamedList method and used (slightly modified) existing API of DOMUtil instead.\n\tremoved reading values from SolrParam - they are being read directly from the NamedList<>\n\tadded reporting of duplicated config options (DEBUG level) per parent node, as well as exception message containing list of duplicated parameters, e.g.\n\n\n\n\n<solr>\n<solrcloud>\n<int name=\"int-param\">1</int>\n<str name=\"str-param\">STRING-1</str>\n\u2026\n<int name=\"int-param\">2</int>\n<str name=\"str-param\">STRING-2</str>\n</solrcloud>\n</solr>\n\n\nwill cause an exception:\n\nDuplicated 2 config parameter(s) in solr.xml file: [int-param, str-param]\n\n\nHowever, if parameters with a same name are attached to different parent nodes everything will pass just fine, e.g.\n\n<solr>\n<solrcloud>\n<int name=\"int-param\">1</int>\n<str name=\"str-param\">STRING-1</str>\n\u2026\n</solrcloud>\n<logging>\n\u2026\n<int name=\"int-param\">2</int>\n<str name=\"str-param\">STRING-2</str>\n</logging>\n</solr>\n\n\nIn this case no exception will be thrown. \n\nSome examples to sum it up:\n\n\n\n\nsolr.xml file fragment\nExpected type\nParsing result\n\n\n<int name=\"hostPort\">44</int>\nInteger\n\n\n\n<str name=\"hostPort\">44</str>\nInteger\n\n\n\n<long name=\"hostPort\">44</long>\nInteger\n\n\n\n<bool name=\"hostPort\">44</bool>\nInteger\n\n\n\n<float name=\"hostPort\">44</float>\nInteger\n\n\n\n<double name=\"hostPort\">44</double>\nInteger\n\n\n\n<int name=\"enabled\">true</int>\nBoolean\n\n\n\n<str name=\"enabled\">true</str>\nBoolean\n\n\n\n<long name=\"enabled\">true</long>\nBoolean\n\n\n\n<bool name=\"enabled\">true</bool>\nBoolean\n\n\n\n<float name=\"enabled\">true</float>\nBoolean\n\n\n\n<double name=\"enabled\">true</double>\nBoolean\n\n\n\n\n\n\nant clean test shows that there's no regression.\n\nJack Krupansky this change clearly is not backward compatible with the existing solr.xml files. For instance - unknown config values won't be silently ignored - an exception will be thrown instead. However, I didn't realise that solr.xml files are versioned the same way as schema.xml files are. Should I bump the schema version to 1.6?\n\nCheers,\nMaciej "
        },
        {
            "author": "Maciej Zasada",
            "id": "comment-14061945",
            "date": "2014-07-15T11:07:24+0000",
            "content": "Added some more unit test to the patch. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14062994",
            "date": "2014-07-16T02:00:36+0000",
            "content": "\nSince I stored \"raw\" config values, I used SolrParam to do the type conversion, but I didn\u2019t find any API for a parameter removal. That\u2019s why I\u2019m keeping the original NamedList, so that I can remove correctly read values and keep track of the unknown ones.\n\nmy previous suggestion about using SolrParams was vague and misguided.  i think i had in mind the idea of using SolrParams instead of the Map<String,Object> propMap \u2013 your latest patch that eliminates the SolrParams and just uses the NamedList is definitely a better call.\n\n\n... However, I didn't realise that solr.xml files are versioned the same way as schema.xml files are. Should I bump the schema version to 1.6?\n\nIt's not explicitly versioned \u2013 just hueristicly versioned based on wether ConfigSolr detects by introspection that it's the \"old style\" or the \"new style\" ... i think Jack may have just been confused about what this issue was when he posted his comment.\n\n\n\nI'm attaching some updates to your patch...\n\n\n\tskimming your changes made me realize there's a lot of cruft in this code related to defered sys prop substitution that's no longer needed at all - so I ripped that out.\n\tI'm not really a fan of the way you added \"excludedElements\" to the DOMUtils method \u2013 particularly since it still required the namedList.removeAll(null); call which seemed sloppy.  I'd much rather have a tighter XPath that is very explicit about what we want out of the dom and handle the excusions that way ... so i changed that.\n\ti added some explicit testing of <null name=\"...\"/> since i wasn't completley convinced your new code that that would work correctly.\n\tI think i misslead you a bit when i said we should validate configs being declared multiple times \u2013 it's not a good idea to up front check that nothing is declared more then once, beause a week from now someone may in fact want to add something to solr.xml that can be specified multiple times.  The better place for this type of validation is in storeConfigProperty, because at that point we know we expect there to be a single value.\n\t\n\t\tthis does unfortunately mean it aborts early the first time it finds a duplicated key, so some of your tests had to be changed.\n\t\n\t\n\tI switched the check for unknown options to be per section so the error msgs could include the section details as well.\n\tString.format must be used with Locale.ROOT to prevent locale sensitive behavior.\n\t\n\t\tant check-forbidden-apis will point out stuff like this for you in the lucene/solr code base\n\t\n\t\n\trelaxed the int parsing so that small <long> values are fine, but large longs still throw an error\n\t\n\t\tadded test for both cases\n\t\n\t\n\tadded some checks that the sections themselves weren't being duplicated (ie: if a user adds a <solrcloud> section totheir solr.xml, we want to give them an error if another <solrcloud> section already existed higher up in the file)\n\tsome general test refactoring...\n\t\n\t\tno need to construct new Random instances \u2013 just use random()\n\t\teliminated a lot of unneccessary file creation in the tests by using ConfigSolr.fromString(loader, solrXml); instead of FileUtils.writeFile(...) and ConfigSolr.fromSolrHome(...)\n\t\tswitched to the lucene convention of testmethod naming to eliminate ~20 lines of @Test annotations (the verbosity is why our test runner explicitly lets us continue to use the JUnit3 convention)\n\t\n\t\n\n\n\n\n\nI think this is probably ready to go \u2013 but it would be nice to get some review from Alan Woodward and/or Erick Erickson since they know this code the best ... and of course, Maciej Zasada: you've clearly been looking at this code a lot the last few days, do you ou have any additional thoughts on my revised patch?\n "
        },
        {
            "author": "Maciej Zasada",
            "id": "comment-14063425",
            "date": "2014-07-16T12:21:20+0000",
            "content": "Hi Hoss Man,\n\nthanks for the code review and all your suggestions. I'll keep them in mind for the future work. Revised patch looks good to me.\n\nCheers,\nMaciej "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14063623",
            "date": "2014-07-16T15:37:07+0000",
            "content": "+1, some nice cleanups here.\n\nMy only review comment would be to prefer using hamcrest assertThat() functions in tests, rather than assertTrue(), just because you get nicer error messages when they fail.  But that's a pretty nitty nit to pick. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14069345",
            "date": "2014-07-21T21:42:09+0000",
            "content": "My only review comment would be to prefer using hamcrest assertThat() functions in tests, rather than assertTrue(), just because you get nicer error messages when they fail. ...\n\nthe assertTrue's actually do have messages on them, and they are actual value asserts that just happen to be true \u2013 but i'll change them to assertEquals so it's more obvious what's happening if/when they fail.\n\ngoing to commit as soon as my \"updated to trunk & started running all tests\" passes again. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14069422",
            "date": "2014-07-21T22:18:52+0000",
            "content": "Commit 1612419 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1612419 ]\n\nSOLR-5746: Bugs in solr.xml parsing have been fixed to more correctly deal with the various datatypes of options people can specify, additional error handling of duplicated/unidentified options has also been added "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14069519",
            "date": "2014-07-21T23:40:42+0000",
            "content": "Commit 1612433 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1612433 ]\n\nSOLR-5746: Bugs in solr.xml parsing have been fixed to more correctly deal with the various datatypes of options people can specify, additional error handling of duplicated/unidentified options has also been added (merge r1612419) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14069524",
            "date": "2014-07-21T23:43:49+0000",
            "content": "...the assertTrue's actually do have messages on them...\n\ncorrection: the messages in the patch were all the same, but in my local copy before committing i had fixed them all to be clear about which config prop wasn't coming up as expected.\n\nThis is now on trunk & backported to 4x \u2013 one hitch that came up in the backporting was that 4x still supports the notion of an implicit solr.xml file (if you aren't in cloud mode) so i had to manually massage the  backport to ConfigSolr.java\n\nAlan Woodward: if you could spot check the 4x changes to ensure i didn't botch something that would be appreciated: https://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java?limit_changes=0&r1=1612433&r2=1612432&pathrev=1612433 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14069526",
            "date": "2014-07-21T23:45:17+0000",
            "content": "Thanks again for your patch Maciej! "
        }
    ]
}