{
    "id": "LUCENE-3237",
    "title": "FSDirectory.fsync() may not work properly",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Spinoff from LUCENE-3230. FSDirectory.fsync() opens a new RAF, sync() its FileDescriptor and closes RAF. It is not clear that this syncs whatever was written to the file by other FileDescriptors. It would be better if we do this operation on the actual RAF/FileOS which wrote the data. We can add sync() to IndexOutput and FSIndexOutput will do that.\n\nDirectory-wise, we should stop syncing on file names, and instead sync on the IOs that performed the write operations.",
    "attachments": {
        "LUCENE-3237.patch": "https://issues.apache.org/jira/secure/attachment/12639472/LUCENE-3237.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-07T13:51:05+0000",
            "content": "The man pages on fsync (which I assume FileDescriptor.sync() uses seem to say that it affects all in-core modified copies of buffers (as opposed to just modifications done through that specific descriptor).  If you think about it, it's really the only sane behavior. ",
            "author": "Yonik Seeley",
            "id": "comment-13098958"
        },
        {
            "date": "2011-09-07T14:20:28+0000",
            "content": "It could be, and generally I think that it makes sense. Only the Java documentation is not so explicit about it - I wish it was. Because if Java was explicit, it would mean we wouldn't need to wonder what do the \"man pages\" say about this on Windows, AIX etc.\n\nIf others think that it makes sense that sync() affects all existing buffers, then I don't mind if we close that issue. We haven't seen any problems with this implementation so far, so it kinda reassuring ... ",
            "author": "Shai Erera",
            "id": "comment-13098981"
        },
        {
            "date": "2011-11-14T10:49:36+0000",
            "content": "Shai, I think we should close this. we can still reopen if we run into issues? ",
            "author": "Simon Willnauer",
            "id": "comment-13149555"
        },
        {
            "date": "2011-11-14T10:53:47+0000",
            "content": "Closing. If we ever see that this actually is a problem, we can reopen. ",
            "author": "Shai Erera",
            "id": "comment-13149557"
        },
        {
            "date": "2014-04-09T22:06:53+0000",
            "content": "While it's hard to imagine an OS that would (could?) separately track\nwhich (of possibly many) file handles had made changes to the dirty\nbuffers in the OS's IO cache for a given file, such that closing the\nopen (for write) file, opening it again later, fsync'ing that, would\nactually fail to move some bytes to durable storage, it has always\nmade me a bit nervous that Lucene closes a file and later reopens it\nto fsync.  This may simply be paranoia \n\nStill, I tried a prototype patch:\n\n\n\tRemoved Directory.sync(Collection<String>) and added\n    IndexOutput.sync.  Ie, you now must sync before closing the\n    IndexOutput.\n\n\n\n\n\tFixed IndexWriter to prevent .close() of all IndexOutputs (it\n    wraps the incoming Directory to do this), until 1) the output is\n    sync'd, or 2) the file is deleted.\n\n\n\n\n\tDuring commit, IndexWriter retrieves the still-held-open\n    IndexOutputs and asks them to sync.\n\n\n\nThis also has the nice side effect of removing the sneaky stale file\ntracking that FSDirectory was doing (we had wanted to remove this in\nLUCENE-5570).\n\nOne downside of this approach is it means IndexWriter holds file\ndescriptors open, one per written but not sync'd/deleted file, so it\nsort of acts like an IndexReader in this regard.  Though, the count\nwill be lower, since it's only newly written files since open/last\ncommit.\n\nAnother big problem with this approach is: if you open near-real-time\nreaders, this now means we are opening IndexInputs when there are\nstill IndexOutputs open against those files, which will probably make\nsome Directory impls unhappy. (I had to turn off this check in MDW).\n\nThe patch is not well tested but I did get it to the point where\nTestDemo passes...\n\nThere are serious nocommits too, e.g. NRTCachingDir is now broken, and\nMDW now longer crashes on close. ",
            "author": "Michael McCandless",
            "id": "comment-13964727"
        },
        {
            "date": "2014-04-09T23:05:33+0000",
            "content": "Hi, I checked in the other issue already source code of OpenJDK.\nhttps://issues.apache.org/jira/browse/LUCENE-5570?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13964623#comment-13964623\n\nIn fact, fsync syncs the whole file, because it relies on fsync() POSIX API or FlushFileBuffers() in Windows. Both really sync the file the descriptor is pointing to. Those functions don't sync the descriptor's buffers only. ",
            "author": "Uwe Schindler",
            "id": "comment-13964782"
        },
        {
            "date": "2014-04-09T23:38:13+0000",
            "content": "Hi Michael McCandless,\nFSDirectory.FSIndexOutput#sync() should call flush() before syncing the underlying file. Otherwise it could happen that not all buffers of BufferedIndexOutput are flushed. Maybe other code does this already, but to be safe, it should definitely call this! ",
            "author": "Uwe Schindler",
            "id": "comment-13964814"
        },
        {
            "date": "2014-04-10T09:26:42+0000",
            "content": "Hi another issue:\n\nIn FSIndexOutput:\n\nfile.getFD().sync();\n\n\n\nThis does not do the for-loop we currently do to repeat the fsync 5 times if it fails. We should maybe add this here, too. Also, I would not remove Directory.sync(), we should maybe leave this for LUCENE-5588 to sync the directory itsself. But the method signature would change in any case. ",
            "author": "Uwe Schindler",
            "id": "comment-13965159"
        },
        {
            "date": "2014-04-10T09:35:42+0000",
            "content": "In fact, fsync syncs the whole file, because it relies on fsync() POSIX API or FlushFileBuffers() in Windows. Both really sync the file the descriptor is pointing to. Those functions don't sync the descriptor's buffers only.\n\nThis is my impression as well, and as Yonik said, it's hard to imagine any [sane] operating system doing it differently ... so this really is paranoia.\n\nFSDirectory.FSIndexOutput#sync() should call flush() before syncing the underlying file.\n\nOK I'll move it there (I'm currently doing it in the first close \"attempt\").\n\nThis does not do the for-loop we currently do to repeat the fsync 5 times if it fails.\n\nI'll add an IOUtils.sync that takes an fd and does the retry thing.\n\nAlso, I would not remove Directory.sync(), we should maybe leave this for LUCENE-5588 to sync the directory itsself.\n\nRight, we should add it back, as a method taking no file args?  Its purpose would be LUCENE-5588. ",
            "author": "Michael McCandless",
            "id": "comment-13965162"
        },
        {
            "date": "2014-04-10T09:52:17+0000",
            "content": "Hey mike, thanks for reopening this. I like the patch since it fixes multiple issues. \n\n\n\tI like the fact that we get rid of the general unsynced files stuff in Directory.\n\tgiven the last point we move it in the right place inside IW that is where it should be\n\tthe problem that the current patch has is that is holds on to the buffers in BufferedIndexOutput. I think we need to work around this here are a couple of ideas:\n\t\n\t\tintroduce a SyncHandle class that we can pull from IndexOutput that allows to close the IndexOutput but lets you fsync after the fact\n\t\tthis handle can be refcounted internally and we just decrement the count on IndexOutput#close() as well as on SyncHandle#close()\n\t\twe can just hold on to the SyncHandle until we need to sync in IW\n\t\tsince this will basically close the underlying FD later we might want to think about size-bounding the number of unsynced files and maybe let indexing threads fsync them concurrently? maybe something we can do later.\n\t\tif we know we flush for commit we can already fsync directly which might safe resources / time since it might be concurrent\n\t\n\t\n\n\n\njust a couple of ideas.... ",
            "author": "Simon Willnauer",
            "id": "comment-13965182"
        },
        {
            "date": "2014-04-10T10:45:43+0000",
            "content": "Thanks Simon.\n\nHey mike, thanks for reopening this. \n\nI actually didn't reopen yet ... because I do think this really is\nparanoia.  The OS man pages make the semantics clear, and what we are\ndoing today (reopen the file for syncing) is correct.\n\nI like the fact that we get rid of the general unsynced files stuff in Directory.\ngiven the last point we move it in the right place inside IW that is where it should be\n\nYeah I really like that.\n\nBut, we could do that separately, i.e. add private tracking inside IW\nof which newly written file names haven't been sync'd.\n\nthe problem that the current patch has is that is holds on to the buffers in BufferedIndexOutput. I think we need to work around this here are a couple of ideas:\nintroduce a SyncHandle class that we can pull from IndexOutput that allows to close the IndexOutput but lets you fsync after the fact\n\nI think that's a good idea.  For FSDir impls this is just a thin\nwrapper around FileDescriptor.\n\nthis handle can be refcounted internally and we just decrement the count on IndexOutput#close() as well as on SyncHandle#close()\nwe can just hold on to the SyncHandle until we need to sync in IW\n\nRef counting may be overkill?  Who else will be pulling/sharing this\nsync handle?  Maybe we can add a \"IndexOutput.closeToSyncHandle\", the\nIndexOutput flushes and is unusable from then on, but returns the sync\nhandle which the caller must later close.\n\nOne downside of moving to this API is ... it rules out writing some\nbytes, fsyncing, writing some more, fsyncing, e.g. if we wanted to add\na transaction log impl on top of Lucene.  But I think that's OK\n(design for today).  There are other limitations in IndexOuput for\nxlog impl...\n\nsince this will basically close the underlying FD later we might want to think about size-bounding the number of unsynced files and maybe let indexing threads fsync them concurrently? maybe something we can do later.\nif we know we flush for commit we can already fsync directly which might safe resources / time since it might be concurrent\n\nYeah we can pursue this in \"phase 2\".  The OS will generally move\ndirty buffers to stable storage anyway over time, so the cost of\nfsyncing files written (relatively) long ago (10s of seconds; on linux\nI think the default is usually 30 seconds) will usually be low.  The\nproblem is on some filesystems fsync can be unexpectedly costly (there\nwas a \"famous\" case in ext3\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=421482 but this has been\nfixed), so we need to be careful about this. ",
            "author": "Michael McCandless",
            "id": "comment-13965214"
        },
        {
            "date": "2014-04-10T12:56:29+0000",
            "content": " Ref counting may be overkill? Who else will be pulling/sharing this\nsync handle? Maybe we can add a \"IndexOutput.closeToSyncHandle\", the\nIndexOutput flushes and is unusable from then on, but returns the sync\nhandle which the caller must later close.\n\ngood!\n\n\n\nOne downside of moving to this API is ... it rules out writing some\nbytes, fsyncing, writing some more, fsyncing, e.g. if we wanted to add\na transaction log impl on top of Lucene. But I think that's OK\n(design for today). There are other limitations in IndexOuput for\nxlog impl...\n\n\nI don't see what keeps us from adding a sync method to IndexOutput that allows us to bytes, fsyncing, writing some more, fsyncing. I think we should make this change nevertheless. This can go in today I independent from where we use it.\n\nYeah we can pursue this in \"phase 2\". \nagreed ",
            "author": "Simon Willnauer",
            "id": "comment-13965312"
        }
    ]
}