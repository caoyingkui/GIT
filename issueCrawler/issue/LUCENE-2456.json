{
    "id": "LUCENE-2456",
    "title": "A Column-Oriented Cassandra-Based Lucene Directory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store",
            "modules/other"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "3.0.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Herein, we describe a type of Lucene directory that stores its file in a Cassandra server, which makes for a scalable and robust store for Lucene indices.\n\nIn brief, the CassandraDirectory maps the concept of a Lucene directory to a column family that belongs to a certain keyspace located in a given Cassandra server. Further, it stores each file under this directory as a row in that column family.\n\nSpecifically, its files are broken down into blocks (whose sizes are capped), where each block (see FileBlock) is stored as the value of a column in the corresponding row. As per http://wiki.apache.org/cassandra/CassandraLimitations, this is the recommended approach for dealing with large objects, which Lucene files tend to be. In addition, a descriptor of the file (see FileDescriptor) that outlines a map of blocks therein is stored as one of the columns in that row as well. Think of this descriptor as an inode for Cassandra-based files.\n\nThe exhaustive mapping of a Lucene directory (file) to a Cassandra column family (row) is captured in the ColumnOrientedDirectory (ColumnOrientedFile) inner-class. Specifically, it interprets Cassandra's data model in terms of Lucene's, and vice verca. More importantly, these are the only two inner-classes that have a foot in both the Lucene and Cassandra camps.\n\nAll writes to a file in this directory occur through a CassandraIndexOutput, which puts the data flushed from a write-behind buffer into the fitting set of blocks. By the same token, all reads from a file in this directory occur through a CassandraIndexInput, which gets the data needed by a read-ahead buffer from the right set of blocks.\n\nThe last (but not the least) inner-class, CassandraClient, acts as a facade over a Thrift-based Cassandra client. In short, it provides operations to get/put rows/columns in the column family and keyspace associated with this directory.\n\nUnlike Lucandra, which attempts to bridge the gap between Lucene and Cassandra at the document-level, the CassandraDirectory is self-sufficient in the sense that it does not require a re-write of any other component in the Lucene stack. In other words, one may use the CassandraDirectory in conjunction with the Lucene IndexWriter and IndexReader, as you would any other kind of Lucene Directory. Moreover, given the the data unit that is transferred to and from Cassandra is a large-sized block, one may expect fewer round trips, and hence better throughputs, from the CassandraDirectory.\n\nIn conclusion, this directory attempts to marry the rich search-based query language of Lucene with the distributed fault-tolerant database that is Cassandra. By delegating the responsibilities of replication, durability and elasticity to the directory, we free the layers above from such non-functional concerns. Our hope is that users will choose to make their large-scale indices instantly scalable by seamlessly migrating them to this type of directory (using Directory#copyTo(Directory)).",
    "attachments": {
        "LUCENE-2456.patch": "https://issues.apache.org/jira/secure/attachment/12444215/LUCENE-2456.patch",
        "LUCENE-2456.zip": "https://issues.apache.org/jira/secure/attachment/12444216/LUCENE-2456.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-07-23T17:09:39+0000",
            "content": "It seems like integrations such as this would be best run as separate projects (i.e. a google code project or something).  There are so many possible integrations, and it would add too much burden to core developers to maintain them all. ",
            "author": "Yonik Seeley",
            "id": "comment-12891677"
        },
        {
            "date": "2010-07-23T18:00:55+0000",
            "content": "Fair enough. I'm marking this issue as resolved, and will add a link to the external project, once it's up and running. On a side note, given that there are so many possible integrations, it would be nice to have a umbrella project just for that, even if it is hosted outside of Apache. ",
            "author": "Karthick Sankarachary",
            "id": "comment-12891693"
        },
        {
            "date": "2010-08-09T17:22:00+0000",
            "content": "Karthick, I'm interested in the CassandraDirectory, so once you put it somewhere, please do let us know.  Thanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12896631"
        },
        {
            "date": "2010-08-13T21:17:57+0000",
            "content": "Hi Otis, The Cassandra directory now has a new home at Cassandra Directory . Regards. ",
            "author": "Karthick Sankarachary",
            "id": "comment-12898423"
        }
    ]
}