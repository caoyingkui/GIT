{
    "id": "SOLR-972",
    "title": "EventListener-s creation changed from a per request ( full / delta-imports) scenario to once through the lifetime of the DIH plugin.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "The EventListener plugin for notification of start / end import events (SOLR-938) creates an instance of EventListener before every notification. This has 2 drawbacks. \n\n\tNo state is stored between successive invocations of events as it is a new object\n\tWhen writing plugins for delta imports - it is very inefficient to do a class loader lookup by reflection / instantiate an instance and call a method on the same.\n\n\n\nAttached patch has one EventListener through the lifetime of the DIH plugin . \n\nAlso EventListener is changed to an interface rather than an abstract class for better decoupling (especially painful when the start/end eventlistener has an independent hierarchy by itself ). \n\nBy default, a no-op listener is registered to avoid boiler plate code to check if there is a start / end listener specified.  Efficient JRE impls should be able to optimize the no-op for minimum overhead compared to checking the reference for null and branching out. \n\nSpecifying an onImportStart / onImportEnd overrides the default handler though.",
    "attachments": {
        "SOLR-972.patch": "https://issues.apache.org/jira/secure/attachment/12398266/SOLR-972.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12665328",
            "date": "2009-01-20T04:19:40+0000",
            "content": "Also EventListener is changed to an interface rather than an abstract class for better decoupling\n\ninterfaces are generally discouraged in Lucene/Solr because it can make the API hard to modify. Though there is a slight inconvenience of creating a separate class i guess it should be fine.\n\nNo state is stored between successive invocations of events as it is a new object\n\nWe must find a better way to do this than making it a part of the object lifecycle. We can add an extra scope to the Context#setSessionAttribute which can persist between multiple invocations. This can hekp all the components to share the same object\n\n- it is very inefficient to do a class loader lookup by reflection / instantiate an instance and call a method on the same.\n\ncan we quantify that ?   "
        },
        {
            "author": "Karthik K",
            "id": "comment-12665497",
            "date": "2009-01-20T18:37:13+0000",
            "content": "\n\n\n interfaces are generally discouraged in Lucene/Solr because it can make the API hard to modify. Though there is a slight inconvenience of creating a separate class i guess it should be fine.\n\n\n\n\n\nThe rules about modification apply well enough for interfaces and abstract classes.  Having an abstract class limits the object hierarchy of the handler unnecessary when it could be more flexible through the interfaces. \n\n\n\n\n We must find a better way to do this than making it a part of the object lifecycle. We can add an extra scope to the Context#setSessionAttribute which can persist between multiple invocations. This can hekp all the components to share the same object\n\n\n\n\n\nThe persistence that I am concerned about is about the EventListener and less about Context ( which is bound to be specific to be an event for most of the time ).  If the code in EventListener cannot store any state (fields ) - it is not so intuitive to the developer of the plugin and not very efficient either. \n\n\n\n\n can we quantify that ?\n\n\n\n\n\nUse of the reflection API ( Class.forName() ,   Class.newInstance() ) in any piece of code that is going to be executed frequently ( delta import in this case ) is hardly the best way to scale. I can come up with a sample unit test case for that - but I think it is moot. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12665702",
            "date": "2009-01-21T04:46:26+0000",
            "content": "The persistence that I am concerned about is about the EventListener and less about Context\n\nThe context is the single interaction point for all components with the system. So it is better to be there.  DIH does not yet guarantee any state persistence between two imports .  If it is a part of the Context API and documented it becomes a standard way of storing data for all components.  EventListener cannot be seen as a special component. \n\n\nAll components are created on a per import basis. If we must cache , then we must think of it for or all the the components "
        },
        {
            "author": "Karthik K",
            "id": "comment-12665842",
            "date": "2009-01-21T14:55:20+0000",
            "content": "\n\n\n All components are created on a per import basis. If we must cache , then we must think of it for or all the the components\n\n\n\n\n\nI am not sure if we can apply such generality since Context is bound to be different for different invocations (at least , most of the time) whereas EventListener usually take the form of register / unregister but are not created every time.  If EventListener-s are going to be recreated everytime then it would mean that the impl. has no state ( fields ) in it - which seems not so intuitive to the programmer.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12666042",
            "date": "2009-01-22T04:04:09+0000",
            "content": "I am not sure if we can apply such generality since Context is bound to be different for different invocations \n\nThe Context itself will not be same for different invocations but the behavior of the new one is going to be consistent\n\nimagine we have a scope \"dataimporter\" and you can set an attribute at that scope by calling\n\ncontext.setAttribute(\"any_name\",the_value,\"dataimporter\");\n//some time later you can get back the same object\nObject the_value =  context.getAttribute(\"any_name\",\"dataimporter\");\n//do my ops here\n\n\n\nIt is still possible for you to share Objects in a static variable in your EventListener. \n\nThe design is modeled like the servlet API. This is akin to storing and retrieving data from the servletContext,session,request etc . \n\n\n\n\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12666193",
            "date": "2009-01-22T16:17:31+0000",
            "content": "I agree with the comment regarding a custom scope for a Context . For those Context-s that need to be reused this could still be in scope before fetching to avoid recreating them again but I am more concerned about recreating EventListener-s . \n\n\n\n\n It is still possible for you to share Objects in a static variable in your EventListener.\n\n\n The design is modeled like the servlet API. This is akin to storing and retrieving data from the servletContext,session,request etc .\n\n\n\n\n\nSharing via static variables does not seem to be the cleanest way to design . (What if there are 2 eventListeners one for start and another for end inheriting from a common class that has shared attributes.  Sharing via static variables ( in the base class) brings unpredictable behavior / and a code difficult to maintain . )\n\nImagine a requesthandler in the Servlet having no state and being instantiated every time for every request. By recreating EventListener-s , we have a similar analogy . That would make (it already does and I am working on patched version of Solr) development harder to share any state between successive calls.  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12667287",
            "date": "2009-01-26T16:26:42+0000",
            "content": "Any idea when this patch is going to be committed.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12667580",
            "date": "2009-01-27T04:24:33+0000",
            "content": "hi Kay, I am -1 on giving special treatment to an EventListener. The behavior has to be consistent w/ that of other components. \n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12667643",
            "date": "2009-01-27T11:06:16+0000",
            "content": "The rules about modification apply well enough for interfaces and abstract classes. Having an abstract class limits the object hierarchy of the handler unnecessary when it could be more flexible through the interfaces.\n\nNot really, since you don't necessarily need to keep the new methods abstract, they can be a no-op. Thus you maintain binary compatibility with old code. One doesn't have this luxury with interfaces.\n\nImagine a requesthandler in the Servlet having no state and being instantiated every time for every request. By recreating EventListener-s , we have a similar analogy. That would make (it already does and I am working on patched version of Solr) development harder to share any state between successive calls.\n\nI don't think that is an apples to apples comparison. Servlets are supposed to be called a lot many times per second. Also, containers may create many instances of servlets.\n\nUse of the reflection API ( Class.forName() , Class.newInstance() ) in any piece of code that is going to be executed frequently ( delta import in this case ) is hardly the best way to scale. I can come up with a sample unit test case for that - but I think it is moot.\n\nI try to stay away from micro-optimizations (which is what I felt this issue was about) as they don't add any value to the system. One wouldn't even be able to see any measurable performance difference unless one calls delta-imports hundreds of times per second. Even if someone did, the bottleneck would probably be the database rather than creation of event listeners.\n\nIf this issue is more about maintaining state rather than the optimization, can you see if SOLR-988 can solve your problem? Most objects in DIH are created per import request and I'd like to keep it that way. I agree with Noble that EventListener cannot be seen as an exception. There are enough inconsistencies already and I'd like to cut them down rather than add one more exception. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12670671",
            "date": "2009-02-05T08:53:17+0000",
            "content": "An alternative exists for maintaining state and EventListeners should not be treated in a special manner. Therefore I'm marking this as \"Won't Fix\". "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775633",
            "date": "2009-11-10T15:51:55+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}