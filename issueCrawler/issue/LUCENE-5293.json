{
    "id": "LUCENE-5293",
    "title": "Also use EliasFanoDocIdSet in CachingWrapperFilter",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "",
    "attachments": {
        "LUCENE-5293.patch": "https://issues.apache.org/jira/secure/attachment/12609002/LUCENE-5293.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-17T19:38:22+0000",
            "content": "First patch, 17 Oct 2013, quite rough, one nocommit.\nThe latest benchmark results for doc id sets are here: http://people.apache.org/~jpountz/doc_id_sets.html\n\nThe patch uses EliasFanoDocIdSet for caching when EliasFanoDocIdSet.sufficientlySmallerThanBitSet returns true,\nwhich is currently when load factor is at most 1/7, at about -0.85 log10 scale in the benchmark results.\nOtherwise it uses WAH8DocIdSet, the current behaviour.\nDoes this choice make good use of the benchmark results?\n\nTo get the number of doc ids to be put in the cache, the patch checks for the type of the actual DocIdSet that is given, and uses FixedBitSet and OpenBitSet cardinality. (Perhaps a similar method should be added to EliasFanoDocIdSet.)\nIn other cases, the patch falls back to WAH8DocIdSet.\n\nI added a DocIdSet argument to cacheImpl(), there is a nocommit for that.\n\nThe patch also corrects a mistake in EliasFanoDocIdSet.sufficientlySmallerThanBitSet, the arguments should be int instead of long, just like the  EliasFanoDocIdSet constructor.\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13798317"
        },
        {
            "date": "2013-10-17T20:43:13+0000",
            "content": "I like the idea of using the Elias-Fano doc id set given how it behaves in the benchmarks but it is tricky that it needs to know the size of the set in advance. In practice, the cache impls that you are going to have in CWF.cacheImpl are most likely QueryWrapperFilters, not FixedBitSets or OpenBitSets, so there is no way to know the exact size in advance. We could use DocIdSetIterator.cost but although it is recommended to implement this method by returning an upper bound on the number of documents in the set, it could return any number. Do you think there would be a way to relax the Elias-Fano doc id set building process so that it could be built by providing an approximation of the number of docs in the set (at the cost of some compression loss)? ",
            "author": "Adrien Grand",
            "id": "comment-13798384"
        },
        {
            "date": "2013-10-17T22:06:39+0000",
            "content": "relax the Elias-Fano doc id set building process so that it could be built by providing an approximation of the number of docs in the set (at the cost of some compression loss)\n\nThe approximation would have to be a lower bound, i.e. it might be higher than the actual number of documents.\nThe EliasFanoEncoder reserves all the memory it needs at construction time, so the loss in compression would be roughly as noticable as the accuracy of the bound.\nDocIdSetIterator.cost has another purpose, so it's not worthwhile to use it here I think.\n\nDoes the faster build time of the EF DocIdSet (compared to WAH8 and FBS) allow for an extra FBS to be built?\nThat is not immediately clear from the benchmark results, but it could be so. ",
            "author": "Paul Elschot",
            "id": "comment-13798499"
        },
        {
            "date": "2013-10-17T22:31:33+0000",
            "content": "DocIdSetIterator.cost has another purpose, so it's not worthwhile to use it here I think.\n\nI was mentioning it because it is the closest thing we have to a cardinality() which is available for every DocIdSet.\n\nDoes the faster build time of the EF DocIdSet (compared to WAH8 and FBS) allow for an extra FBS to be built?\nThat is not immediately clear from the benchmark results, but it could be so.\n\nMy guess is that it is faster to build the in-memory doc id sets compared to consuming the (eg. QueryWrapper) filter we need to cache, so indeed, it may allow for building an additional FBS. Since WAH8DocIdSet computes it size (available thorugh cardinality()), maybe we could build a WAH8DocIdSet in any case and replace it with an EF doc id set when there are not many documents  I can try to update the benchmarks to add the building of an additional FBS before the EF doc id set. This also reminds me that I should look into the building time of the WAH8 doc id set, there are probably things to improve... I'm currently thinking it may be due to the fact that it keeps resizing buffers but I may be completely wrong. ",
            "author": "Adrien Grand",
            "id": "comment-13798541"
        },
        {
            "date": "2013-10-18T07:49:32+0000",
            "content": "... the closest thing we have to a cardinality() which is available for every DocIdSet.\n\nFor a single term used as a filter there is IndexReader.docFreq(Term), and that does fit in here.\n(Ideally in this case the posting list could be copied from the index into the cache, but we're not there yet.)\n\nShall I add a check for QueryWrapperFilter.getQuery() being a TermQuery and then use docFreq() ?\n\nThere is also a TermFilter in the queries module. I have not looked at the code yet.\nIs it necessary to move that to core so a check for that can be used here, too?\n\n... maybe we could build a WAH8DocIdSet in any case and replace it with an EF doc id set when there are not many documents???\n\nFor any case in which the cardinality can not easily be determined, that indeed would make sense from the benchmark.\n\nI can try to update the benchmarks to add the building of an additional FBS before the EF doc id set. \n\nAdding a single FBS build to the EF DocIdSet can be visualized in the benchmark for the build times.\nIn that case the EF DocIdSet build result never gets above log(1) = 0, so an update of the benchmarks would not be needed.\n ",
            "author": "Paul Elschot",
            "id": "comment-13798886"
        },
        {
            "date": "2013-10-18T09:53:28+0000",
            "content": "Shall I add a check for QueryWrapperFilter.getQuery() being a TermQuery and then use docFreq() ?\n\nI don't like much having support for specific filters based on instanceof calls. I really think the only two options are to consume the filter to cache twice, or to first load into memory in another filter impl and then load it again in an EF doc id set. And I would go for option 2 since option 1 is likely going to be slower? ",
            "author": "Adrien Grand",
            "id": "comment-13798965"
        },
        {
            "date": "2013-10-18T14:24:25+0000",
            "content": "I don't like much having support for specific filters based on instanceof calls.\nMe neither, but that can be fixed by adding a docFreq() method to DocIdSet, as another hint to be used by CachingWrapperFilter.\nThis method should return the actual number of doc ids in the set when its return value >= 0.\n\nThe existing hint in DocIdSet is isCacheable(), its javadocs will need to updated since they need not mention BitSet anymore.\n\nI also prefer option 2, but I'd like to avoid using the other filter impl when possible by using the docFreq hint.\n\nI'll try and make another patch for this. ",
            "author": "Paul Elschot",
            "id": "comment-13799130"
        },
        {
            "date": "2013-10-18T19:31:26+0000",
            "content": "The existing hint in DocIdSet is isCacheable(), its javadocs will need to updated since they need not mention BitSet anymore.\n\nGood point, I fixed it.\n\nI also prefer option 2, but I'd like to avoid using the other filter impl when possible by using the docFreq hint.\n\nTo me this feels like a big change compared to what it gives us. I would prefer having another copy rather than adding this method. ",
            "author": "Adrien Grand",
            "id": "comment-13799434"
        },
        {
            "date": "2013-10-18T20:36:14+0000",
            "content": "It felt like a big change when I started, but it was easier than I thought, have a look at the patch of 18 Oct.\nThere are about 35 other places that directly extend DocIdSet or create a new one from an inline subclass, I have not checked these yet.\n\nThis passes the current TestCachingWrapperFilter,  but there are no tests for this change yet.\n\nFor small segments, maxDoc() <= 256,  this will use WAH8, would FBS better for those cases?\n\nThe last choice for using the EF after the WAH8 was built is done using sufficientlySmallerThanBitSet because that was available, but I'm not really sure whether a smaller load factor should be used there.\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13799492"
        },
        {
            "date": "2013-10-19T16:27:16+0000",
            "content": "Looking again at the benchmark on how to solve building an EF docidset without knowing the number of values in advance, one solution would be to use a PFD docidset for that because it builds quickly and it has good next() performance. The next() will be used once through the set to build the final docidset to be cached.\n\nHowever an even better way might be to use one or more temporary long arrays to store the incoming doc ids directly in FOR format, (without forming deltas and without an index). This can be done because the maximum doc id value is known. While storing the doc ids, one can switch to an FBS on the fly when the total number of doc ids becomes too high. The existing PackedInts code should be a nice fit for this.\nSince allocating the long arrays takes time, one can start with one array of say 1/512 of the maximum needed size, and continue into another (bigger) array as long as necessary or until an FBS is preferable. ",
            "author": "Paul Elschot",
            "id": "comment-13799941"
        },
        {
            "date": "2013-10-20T14:32:36+0000",
            "content": "After some more thought on this I think using the WA8 docidset as in the patch is the best solution for now, because I think that gives the best building time for the expected cases.\n\nI might add an EliasFanoEncoder constructor with only an upperBound argument for this case.\nThis would leave some room for adding more values (as in ArrayUtil.grow) and it would reorganize the encoded sequence to always use the latest number of values. Reorganizing the encoded sequence would be needed when the number of bits for encoding the lower values changes, and this is floor(log2(upperBound/numValues)) but never negative. \n\n(In a docidset for filtering the upperBound is normally the segment size, and the values are the doc ids.)\n ",
            "author": "Paul Elschot",
            "id": "comment-13800143"
        },
        {
            "date": "2013-10-20T19:26:43+0000",
            "content": "About the patch of 20 Oct 2013:\n\nThere is an EliasFanoEncoder2 with a constructor with only an upperBound.\nThis class delegates to EliasFanoEncoder and has very much the same methods, but not yet a common interface/superclass.\nIt works by growing by a factor of 2 as necessary, and reencoding completely.\nThis reencoding could be optimized for the lower bits by using PackedInts to block decode/encode, but I have not taken the time to implement that.\n\nThe EliasFanoDocIdSet has an extra constructor that takes only an upperbound that uses EliasFanoEncoder2.\n\nI ran some tests on this, it appears to work fine here.\nA possibly misplaced assert in TestEliasFanoDocIdSet is corrected to make the test pass.\n\nCachingWrapperFilter uses the extra EliasFanoDocIdSet constructor when the number of doc ids in the set is not known,\nand it reverts to FBS when this EliasFanoDocIdSet is not sufficiently smaller than an FBS.\n\nFor the rest see my comments on the patch of 18 Oct.\n\nI also did a little bit of perfomance testing, the memory usage of the upperbound only constructor is higher, as expected.\nThe advance/next performance is only slightly less, again as expected.\nI could not measure build times, I expect it to just about double for the upperbound only constructor. ",
            "author": "Paul Elschot",
            "id": "comment-13800192"
        },
        {
            "date": "2013-10-21T18:09:11+0000",
            "content": "I also did a little bit of perfomance testing, the memory usage of the upperbound only constructor is higher, as expected.\n\nInstead of keeping the oversized encoder, maybe the encoder could be resized to its actual size when finished encoding? This is what the other (wah8/pfor) sets do.\n\nand it reverts to FBS when this EliasFanoDocIdSet is not sufficiently smaller than an FBS\n\nMaybe pfor/wah8 would still be useful here since they efficiently encode almost full sets? ",
            "author": "Adrien Grand",
            "id": "comment-13800901"
        },
        {
            "date": "2013-10-21T20:09:58+0000",
            "content": "Instead of keeping the oversized encoder, maybe the encoder could be resized to its actual size when finished encoding? This is what the other (wah8/pfor) sets do.\n\nI suppose you mean by recomputing the actually needed sizes for the long arrays of the encoder after all encoding is done, and then reallocating them?\nThat would certainly be possible. I'll have a look at wah8/pfor for this.\n\nMaybe pfor/wah8 would still be useful here since they efficiently encode almost full sets?\n\nThe problem is that none of the compressing sets is as good as FBS at advancing far in almost full sets.\n\nI'm working on this now, another patch is slowly on its way. ",
            "author": "Paul Elschot",
            "id": "comment-13801023"
        },
        {
            "date": "2013-10-21T21:54:12+0000",
            "content": "About the patch of 21 Oct:\n\nAdds EliasFanoEncoderUpperBound (instead of EliasFanoEncoder2) with only an upperBound argument to the constructor.\nAdds a freeze() method to EliasFanoEncoder to reallocate to actual size.\nBoth are used in EliasFanoDocIdSet, which now also reverts to using an FBS as needed.\n\nAdapted TestEliasFanoDocIdSet to use EliasFanoDocIdSet randomly half of the time with a -1  numValues so it may use EliasFanoEncoderUpperBound instead of EliasFanoEncoder at first.\n\nFor the rest see my remarks about the patch of 20 Oct. ",
            "author": "Paul Elschot",
            "id": "comment-13801213"
        },
        {
            "date": "2013-10-22T07:51:38+0000",
            "content": "On the patch of 22 Oct:\nThe previous patch contains a bug in the freeze() code, it allocates more than an FBS size to one of the encoding arrays.\nThis should fix it. ",
            "author": "Paul Elschot",
            "id": "comment-13801587"
        },
        {
            "date": "2013-10-24T15:52:17+0000",
            "content": "I've done some more performance measurements of this EliasFanoDocIdSet that allows only an upperBound to its constructor. No surprising results but I'd like add an APL2 to  the benchmark program that was derived from the (Test)DocIdSetBenchmark at LUCENE-5236 and LUCENE-5101 and post it.\nAdrien, can I assume an APL 2 on the first DocIdSetBenchmark at LUCENE-5101?\n\nThe patch here is getting a little overloaded, so shall I open a separate issue for the EliasFanoDocIdSet that allows only an upperBound to its constructor? \n ",
            "author": "Paul Elschot",
            "id": "comment-13804336"
        },
        {
            "date": "2014-01-14T16:10:37+0000",
            "content": "I opened a github pull request for the latest patch:\nhttps://github.com/apache/lucene-solr/pull/19 ",
            "author": "Paul Elschot",
            "id": "comment-13870850"
        },
        {
            "date": "2014-10-19T21:15:57+0000",
            "content": "Since LUCENE-5983 CachingWrapperFilter uses RoaringDocIdSet.\nAre there any advantages for EliasFanoDocIdSet left for use there? ",
            "author": "Paul Elschot",
            "id": "comment-14176425"
        },
        {
            "date": "2014-10-20T20:11:03+0000",
            "content": "Although the elias-fano set is smaller in the sparse case, it's true that RoaringDocIdSet tends to be faster to build and to iterate on. So overall I think the RoaringDocIdSet has a better trade-off indeed. ",
            "author": "Adrien Grand",
            "id": "comment-14177412"
        },
        {
            "date": "2015-05-25T12:35:26+0000",
            "content": "Github user PaulElschot closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/19 ",
            "author": "ASF GitHub Bot",
            "id": "comment-14558207"
        }
    ]
}