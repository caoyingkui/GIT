{
    "id": "SOLR-11501",
    "title": "Depending on the parser, QParser should not parse local-params",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.2"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Solr should not parse local-params (and thus be able to switch the query parser) in certain circumstances.  Perhaps it is when the QParser.getParser is passed \"lucene\" for the defaultParser?  This particular approach is just a straw-man; I suspect certain valid embedded queries could no longer work if this is done incorrectly.  Whatever the solution, I don't think we should assume 'q' is special, as it's valid and useful to build up queries containing user input in other ways, e.g. q= +field:value +{!dismax v=$qq}&qq=user input      and we want to protect the user input there similarly from unwelcome query parsing switching.",
    "attachments": {
        "SOLR_11501_limit_local_params_parsing.patch": "https://issues.apache.org/jira/secure/attachment/12893171/SOLR_11501_limit_local_params_parsing.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-20T04:38:20+0000",
            "content": "Here's a patch. It has a bunch of nocommits but it's very close.  ant test-core passes with a couple minor test adjustments. It essentially has two parts:\n\nQParser.getParser: now only parses local-params when the provided defaultParser is \"lucene\" or \"func\".  Across our codebase, those were the only two cases where the callers might want to permit the user to change the query parser.\n\n\tChildFieldValueSourceParser had set the default to \"parent\" but it's pointless; might as well use null/\"lucene\" since there \"parent\" itself requires local-params to do anything.\n\tSome users of \"hl.q\" param might need to set \"hl.qparser=lucene\" now if they want to use local-params in \"hl.q\". This could happen if defType=edismax.  I think this new setting is safer.\n\tOne of the \"query\" (nested subquery) tests used a defType of \"query\" yet used local-params. This seems wrong?  I don't think NestedQParserPlugin needs to be an exception.  BTW I suspect the utility of this thing is obsoleted these days.\n\ttest in SOLR-11512 (infinite loop) included and passes! (caught exception, triggered by the recursion detector)\n\n\n\nSolrQueryParserBase: now has a allowSubQueryParsing option. The parsing of local-params and _query_ and _func_ is guarded by this.\n\n\tLuceneQParser sets it to true.  Perhaps we don't need yet another param toggle here.\n\tExtendedDismaxQParser: What I've done is leverage the \"uf\" param to toggle this to see when it contains _query_.  Additionally, I've modified the defaults so that _query_ is negated by default; it needs to be explicitly included now.\n\tDisMaxQParser added a simple toggle param.  Perhaps it could be made to read Edismax's \"uf\"?  Or we finally retire this sucker    \u2013 so... maybe add no toggle, ensure it doesn't parse sub-queries, and just force you to upgrade to edismax if you want control of this\n\n\n\nYonik Seeley I'm really curious what you think. ",
            "author": "David Smiley",
            "id": "comment-16212146"
        },
        {
            "date": "2017-10-24T14:50:32+0000",
            "content": "I think it would be useful for people to be able to control this even for the lucene qparser.\nSomething to consider... what about a specification of what parsers are allowed/disallowed?\n\n\n{!lucene qparsers=query,func,join}...\n{!lucene qparsers=*,-join,-graph}...\n{!lucene qparsers=}... // no sub-qparsers allowed\n\n\n\nWe could even make this do double-duty... be able to turn off lucene parser builtins as well (fuzzy queries, etc?)\n\nFor dismax, it seems like bug this ever parsed/used local params, the escaping should be enhanced so this doesn't happen.\nBoth dismax and edismax need to not throw exceptions when encountering localParams as well.\n\nAs far as this patch... I don't know at this point in time.  It's hard to figure out what might break or what behavior is undesirable.  Need to look at all of the places that use a defType other than lucene and func.\nWhy not do it the other way: disable for dismax, optionally disable for extended.  That would seem to make it much easier to reason about. ",
            "author": "Yonik Seeley",
            "id": "comment-16217034"
        },
        {
            "date": "2017-10-24T19:43:57+0000",
            "content": "what about a specification of what parsers are allowed/disallowed?\n\nSounds good to me.  Could be added in a separate issue.  Here I can try to structure the code to make the ability to parse it be more dynamic rather than binary.\n\nWe could even make this do double-duty... be able to turn off lucene parser builtins as well (fuzzy queries, etc?)\n\nInteresting idea.  There's a namespace issue though, unless we prefix/suffix one or the other to mitigate that.  \n\nFor dismax, it seems like bug this ever parsed/used local params, the escaping should be enhanced so this doesn't happen. Both dismax and edismax need to not throw exceptions when encountering localParams as well.\n\nI don't think Dismax (or eDismax) needs to be modified for new escaping rules.  Both parsers already catch exceptions from the parser and relax it in a simplified manner.  I can add some tests to make this fact more clear.\n\nAs far as this patch... I don't know at this point in time. It's hard to figure out what might break or what behavior is undesirable. \n\nThe patch is fairly small and with it applied, all tests pass   Of course some user is bound to use it in a way that will no longer be supported but it's telling the changes in our codebase were so limited.\n\nNeed to look at all of the places that use a defType other than lucene and func.\n\nFWIW I did.  Specifically, the method to find the callers of is getParser(String qstr, String defaultParser, SolrQueryRequest req).  In solr-core there are 10 usages, and analytics module 1.  Tests add 23 more but they are not pertinent.\n\nWhy not do it the other way: disable for dismax, optionally disable for extended. That would seem to make it much easier to reason about.\n\nI'd be happy to outright disable subquery parsing (with no option/toggle) on dismax!  I spoke of this in my comment; I'll modify the patch accordingly.  And it's optional for edismax (toggle'able via uf); maybe I'm misunderstanding you? ",
            "author": "David Smiley",
            "id": "comment-16217550"
        },
        {
            "date": "2017-10-26T14:13:46+0000",
            "content": "Hmm, actually there are two different issues here that I conflated a bit:\n1) if the actual syntax of a parser should support localParams (and this does seem useful to be able to turn off if desired)\n2) if one can override defType via localParams and get a different qparser (defType was only meant to be the default)\n\nSo this issue is more about making certain defTypes non-switchable (it's not just the default, we will force the parser and disallow it to be overridden by local params).\n\nSo if someone sets up a request handler with defType=dismax or edismax, but also depends on being able to switch to different parsers like \n\nq={!lucene}...\nq={!join}...\nq={!xml}...\n\n\nThis would break that behavior.  The question is... how many people do this (or interface with systems that do this)? ",
            "author": "Yonik Seeley",
            "id": "comment-16220482"
        },
        {
            "date": "2017-10-27T13:52:01+0000",
            "content": "\n\nSo this issue is more about making certain defTypes non-switchable ...\n\nThat characterization suggests I've done a blacklist when it's the reverse (whitelist is safer). Kinda nit-picky I know but just want to be clear to everyone.  Or maybe you mean you think this issue should flip to a blacklist?  A blacklist wouldn't help users who have set defType=myCompanyQueryParser that we don't know about.\n\nThis would break that behavior. The question is... how many people do this (or interface with systems that do this)?\n\nI'm guessing few users (but likely some users).  Why set defType to something only to change it?  It's depressing that Solr's excessive (in my view) take on backwards compatibility leads to slow progress; in this case a back-door that we never get around to closing. ",
            "author": "David Smiley",
            "id": "comment-16222400"
        },
        {
            "date": "2017-10-27T14:00:29+0000",
            "content": "'course a System property override could help here during the remainder of the 7x series.  Or examine luceneMatchVersion. ",
            "author": "David Smiley",
            "id": "comment-16222416"
        },
        {
            "date": "2017-11-14T19:02:21+0000",
            "content": "I'll update the patch later this week with a luceneMatchVersion check.  I think this issue is important and want to get into our next release in some form. ",
            "author": "David Smiley",
            "id": "comment-16251974"
        },
        {
            "date": "2017-11-21T22:29:15+0000",
            "content": "Here's an updated patch.  Not a lot changed but some.\n\n\ttoggle new behavior based on luceneMatchVersion\n\tadded CHANGES.txt upgrade notes.\n\tIt turns out dismax is not affected because various special characters are escaped.  The QParser escapes via org.apache.solr.util.SolrPluginUtils#partialEscape.  I added a test and poked around in the debugger to feel more confident about this.\n\tAdded tests to all parsers that use this parser in some shape or form: complex, dismax, edismax to show that by default they don't parse subqueries.  edismax can be toggled to and it's tested.  Of course lucene already has tests for this.\n\tas in the last patch, SolrQueryParserBase has a simple boolean allowSubQueryParsing defaulting to false.  It was not trivial to lay the groundwork to support a configurable list of parsers, and so I leave that for whatever future issue chooses to embark on that.\n\n\n\nI'm shooting for committing this Monday if I don't hear feedback to the contrary.\n\nHere's the proposed CHANGES.txt:\n\nUpgrade Notes\n----------------------\n\n* SOLR-11501: Starting a query string with local-params {!myparser ...} is used to switch the query parser to another,\n  and is intended for use by Solr system developers, not end users doing searches.  To reduce negative side-effects of\n  unintended hack-ability, we've limited the cases that local-params will be parsed to only contexts in which the\n  default parser is \"lucene\" or \"func\".\n  So if defType=edismax then q={!myparser ...} won't work.  In that example, put the desired query parser into defType.\n  Another example is if deftype=edismax then hl.q={!myparser ...} won't work for the same reason.  In that example,\n  either put the desired query parser into hl.qparser or set hl.qparser=lucene.  Most users won't run into these cases\n  but some will and must change.\n  If you must have full backwards compatibility, use luceneMatchVersion=7.1.0 or something earlier. (David Smiley)\n\n* SOLR-11501: The edismax parser by default no longer allows subqueries that specify a Solr parser using either\n  local-params, or the older _query_ magic field trick.  For example\n  {!prefix f=myfield v=enterp}  or  _query_:\"{!prefix f=myfield v=enterp}\"   are not supported by default anymore.\n  If you want to allow power-users to do this, set uf=*,_query_ or some other value that includes _query_.\n  If you must have full backwards compatibility, use luceneMatchVersion=7.1.0 or something earlier. (David Smiley)\n\n ",
            "author": "David Smiley",
            "id": "comment-16261598"
        },
        {
            "date": "2017-11-22T02:08:32+0000",
            "content": "Thanks for including the upgrade notes before committing - that made it easier to check/review the intended behavior.\nI like the _query_ toggle on \"uf\" as well, I had missed that on my first scan.\n+1 overall - it feels pretty unlikely that users will be negatively impacted by the change in behavior given that the vast majority of people will be using lucene / func for advanced stuff with embedded query types. ",
            "author": "Yonik Seeley",
            "id": "comment-16261857"
        },
        {
            "date": "2017-11-22T13:47:57+0000",
            "content": "Commit 9b52571d8c243f2fbf009a7a97b1dae1f515c7e8 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9b52571 ]\n\nSOLR-11501: limit query parser switching to thwart hacking\n\n\tstarting a query with \n{!...}\n only works when the default parser is lucene or func.\n\tedismax now requires uf=query to allow advanced sub-queries.\n\n ",
            "author": "ASF subversion and git services",
            "id": "comment-16262527"
        },
        {
            "date": "2017-11-22T13:49:52+0000",
            "content": "Commit 8c9440424dcef4fbe7182c64b545f6b6eb31e915 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8c94404 ]\n\nSOLR-11501: limit query parser switching to thwart hacking\n\n\tstarting a query with \n{!...}\n only works when the default parser is lucene or func.\n\tedismax now requires uf=query to allow advanced sub-queries.\n\n\n\n(cherry picked from commit 9b52571) ",
            "author": "ASF subversion and git services",
            "id": "comment-16262530"
        },
        {
            "date": "2017-11-22T13:50:41+0000",
            "content": "Thanks for the review Yonik Seeley! ",
            "author": "David Smiley",
            "id": "comment-16262534"
        },
        {
            "date": "2018-01-04T09:56:23+0000",
            "content": "ticket cross-reference: SOLR-11809 - it seems QueryComponent's rq parameter parsing can be affected by this change ",
            "author": "Christine Poerschke",
            "id": "comment-16311100"
        },
        {
            "date": "2018-01-15T18:20:39+0000",
            "content": "The docs and this changelog always suggest to use a comma in the uf parameter\u00a0to allow multiple fields. By experiment, that seems to be false. You need to separate the fields with a space, e.g.\n\nuf=_query_ *\n ",
            "author": "Tobias Kr\u00f6nke",
            "id": "comment-16326494"
        },
        {
            "date": "2018-01-15T21:57:12+0000",
            "content": "Tobias Kr\u00f6nke you are correct, my bad. \u00a0I looked at this closer and the Solr\u00a0Ref Guide and I want to clean up some things about this stuff. \u00a0The edismax page doesn't need its last section which is about\u00a0val and query because this is a feature of the standard query parser that it inherits. I think edismax docs should mention it inherits this though, and should have better docs on uf so it's clear how it's handled. I forgot to do that. The standard query parser page should mention val and query but say deprecated in favor of local-params syntax (with a link). BTW I don't like the term \"standard query parser\"; I'd rather say \"the Solr query parser\" albeit {{\n{!solr}\n}} doesn't exist though it should the moment it came to exist to bifurcate from Lucene's classic QP. But it's too much change to quite do that here!\n\nI'll post a patch in a bit... \u00a0I suppose I could create a new issue but it's just docs. ",
            "author": "David Smiley",
            "id": "comment-16326592"
        },
        {
            "date": "2018-03-12T21:48:26+0000",
            "content": "I filed SOLR-12081 for the docs; patch is already there.  (Reviews welcome!) ",
            "author": "David Smiley",
            "id": "comment-16396097"
        },
        {
            "date": "2018-11-20T01:11:54+0000",
            "content": "I'd like to revisit the reasoning behind this ticket and consider reverting. In the description of the ticket it says:\n\n\"Solr should not parse local-params (and thus be able to switch the query parser) in certain circumstances. \"\n\n1) What is the reasoning behind this statement?\n\n2) Why are we breaking backcompat like this in a minor release? ",
            "author": "Joel Bernstein",
            "id": "comment-16692513"
        },
        {
            "date": "2018-11-20T03:31:53+0000",
            "content": "IIRC the origin was this CVE http://mail-archives.apache.org/mod_mbox/lucene-dev/201710.mbox/%3CCAJEmKoC%2BeQdP-E6BKBVDaR_43fRs1A-hOLO3JYuemmUcr1R%2BTA%40mail.gmail.com%3E\n\nA \"little bobby tables\" of solr's query language https://xkcd.com/327/\n\nThe thinking being there's probably more bugs now or in the future where\u00a0that one came from\n\n>\u00a0unwelcome query parsing switching ",
            "author": "Will Currie",
            "id": "comment-16692601"
        },
        {
            "date": "2018-11-20T03:31:54+0000",
            "content": "I should have stated it can help with keeping Solr secure.  This was on my mind when there was the hack involving activating the XMLQParserPlugin.  When the developers building the search experience choose a particular query parser to parse user queries (be it edismax or whatever), I think it is an unpleasant surprise to learn that devious users can switch out the query parser to something else.  What I've done in apps before this point is to deliberately prepend a space in front of the user's query to avoid such unwanted hacking.\n\nIt's true that this can be a breaking change but I thought it was acceptable given the recent security incident and that I feel this is a bug, not a feature.\n\nIs there a particular scenario that caused you to stumble over this (be it tinkering or more real-world) and could you elaborate? ",
            "author": "David Smiley",
            "id": "comment-16692602"
        },
        {
            "date": "2018-11-20T13:41:42+0000",
            "content": "Ok, I understand the rational.\n\nThis caused a feature in LucidWorks Fusion to break. I'll be working on the issue today. I may come back and ask questions if I have trouble resolving the issue. ",
            "author": "Joel Bernstein",
            "id": "comment-16693246"
        }
    ]
}