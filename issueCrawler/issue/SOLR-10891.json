{
    "id": "SOLR-10891",
    "title": "BBoxField does not support point-based number sub-fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "6.7",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "I noticed while removing Trie fields from example schemas on SOLR-10760 that BBoxField uses Trie fields in at least one example schema.\n\nI went looking and there is theoretical machinery to support points, but when I added a point-based bbox variant to TestSolr4Spatial, I get test failures.",
    "attachments": {
        "SOLR-10891.patch": "https://issues.apache.org/jira/secure/attachment/12873021/SOLR-10891.patch",
        "tests-failures.txt": "https://issues.apache.org/jira/secure/attachment/12873020/tests-failures.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-14T21:24:41+0000",
            "content": "Patch that adds a point-based bbox variant field type to TestSolr4Spatial.\n\nI got past a couple of initial problems - you can see in the patch excerpt below that there is an explicit test for a Trie field, which I replaced with a check for Numeric field + doc values; and attempting to set the is-stored property on the Lucene points fieldtype failed because the fieldtype was already frozen, so I substituted an unfrozen copy first.\n\n\nindex 4d773c96ac..7552176b15 100644\n--- a/solr/core/src/java/org/apache/solr/schema/BBoxField.java\n+++ b/solr/core/src/java/org/apache/solr/schema/BBoxField.java\n@@ -89,8 +89,11 @@ public class BBoxField extends AbstractSpatialFieldType<BBoxStrategy> implements\n     if (!(booleanType instanceof BoolField)) {\n       throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n     }\n-    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n-      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n+    if (numberType.getNumberType() != NumberType.DOUBLE) {\n+      throw new RuntimeException(\"Must be Double number type: \" + numberType);\n+    }\n+    if ( ! numberType.hasProperty(DOC_VALUES)) {\n+      throw new RuntimeException(\"Must have doc values: \" + numberType);\n     }\n \n     //note: this only works for explicit fields, not dynamic fields\n@@ -138,7 +141,9 @@ public class BBoxField extends AbstractSpatialFieldType<BBoxStrategy> implements\n     final SchemaField solrNumField = new SchemaField(\"_\", numberType);//dummy temp\n     org.apache.lucene.document.FieldType luceneType =\n         (org.apache.lucene.document.FieldType) solrNumField.createField(0.0).fieldType();\n+    luceneType = new org.apache.lucene.document.FieldType(luceneType);\n     luceneType.setStored(storeSubFields);\n+    luceneType.freeze();\n\n\n\nBut several of the tests are failing for reasons I don't understand.  I'm attaching the log: tests-failures.txt.\n\nDavid Smiley, could you take a look? ",
            "author": "Steve Rowe",
            "id": "comment-16049673"
        },
        {
            "date": "2017-06-15T06:01:04+0000",
            "content": "See BBoxStrategy.makeNumericRangeQuery which is throwing the exceptions causing the test failures.  It's basically assuming that if there isn't legacy numerics then we can't do a range query, when in fact we can using points.  You'll likely need to update this method.\n\nPerhaps you may have been confused by exceptions logged for tests that in fact did not fail but were being tested unsupported inputs resulting in UnsupportedOperationException?\n\nIf you still need help I'd be happy to investigate further; it's getting late here. ",
            "author": "David Smiley",
            "id": "comment-16050036"
        },
        {
            "date": "2017-06-15T15:51:11+0000",
            "content": "Patch, the test passes for me now\u0010.\n\nThanks David Smiley for the pointers.\n\nFortunately I didn't have to make any modifications to BBoxStrategy.  The issue was that the fix for the frozen Point fieldtype (see my first comment above) stripped the identity of the Trie fieldtype, which caused other code to think the fieldtype was neither fish nor fowl; I fixed it by only copying the fieldtype if it's not a Trie fieldtype.\n\nThe unsupported operation exceptions were due to special case for \"bbox\" fieldName only skipping of non-rectangles in checkHits(); I just added a case for the new \"pbbox\" fieldName.\n\nI'll commit this once precommit and all tests pass. ",
            "author": "Steve Rowe",
            "id": "comment-16050654"
        },
        {
            "date": "2017-06-15T17:00:26+0000",
            "content": "Commit 631e1d4b7848692ee78b9f64bb70e2c2c0231e79 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=631e1d4 ]\n\nSOLR-10891: BBoxField should support point-based number sub-fields\n\n Conflicts:\n\tsolr/core/src/java/org/apache/solr/schema/BBoxField.java ",
            "author": "ASF subversion and git services",
            "id": "comment-16050772"
        },
        {
            "date": "2017-06-15T17:01:25+0000",
            "content": "Commit 4fe9d4402fea49b11adbff6529c150974a4c7e32 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4fe9d44 ]\n\nSOLR-10891: BBoxField should support point-based number sub-fields ",
            "author": "ASF subversion and git services",
            "id": "comment-16050775"
        },
        {
            "date": "2017-06-15T17:06:21+0000",
            "content": "Steve, I think your change made docValues mandatory but it was not mandatory before.  BBoxField essentially has 2 features \u2013 one is for filtering (doesn't require docValues) and the other is for relevancy/sorting (does require docValues). ",
            "author": "David Smiley",
            "id": "comment-16050786"
        },
        {
            "date": "2017-06-15T17:08:11+0000",
            "content": "Steve, I think your change made docValues mandatory but it was not mandatory before. BBoxField essentially has 2 features \u2013 one is for filtering (doesn't require docValues) and the other is for relevancy/sorting (does require docValues).\n\nThanks for looking David Smiley, I'll fix it. ",
            "author": "Steve Rowe",
            "id": "comment-16050790"
        },
        {
            "date": "2017-06-15T17:28:56+0000",
            "content": "Commit 85615c6ecdb5ffb872f1d6599714295d0bebec21 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85615c6 ]\n\nSOLR-10891: Don't require docvalues on BBoxField ",
            "author": "ASF subversion and git services",
            "id": "comment-16050823"
        },
        {
            "date": "2017-06-15T17:29:18+0000",
            "content": "Commit 5c498b411d8f89c7630fc6a5ca7237c496ed45d4 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5c498b4 ]\n\nSOLR-10891: Don't require docvalues on BBoxField ",
            "author": "ASF subversion and git services",
            "id": "comment-16050824"
        }
    ]
}