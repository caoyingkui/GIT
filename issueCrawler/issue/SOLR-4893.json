{
    "id": "SOLR-4893",
    "title": "Add a FieldMutatingUpdateProcessor FieldNameSelector that checks whether a field matches any schema field",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Add a new field update processor selector that will configure the processor to select fields that match any schema field, or that don't match any schema field, depending on its boolean parameter, e.g. to select fields that don't match any schema field:\n\n\n<bool name=\"fieldNameMatchesSchemaField\">false</bool>",
    "attachments": {
        "SOLR-4893.patch": "https://issues.apache.org/jira/secure/attachment/12586621/SOLR-4893.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13677663",
            "date": "2013-06-06T23:36:21+0000",
            "content": "patch, I think it's ready to go. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13677729",
            "date": "2013-06-07T01:16:48+0000",
            "content": "\n16:39 <@sarowe1:#solr> hoss: In the patch I just put up on SOLR-4893, I added a new member to \n                       FieldUpdateProcessorFactory.SelectorParams, and then to reduce method parameter passing of each member of that \n                       structure, I switched to passing instances of the structure.\n16:39 <@sarowe1:#solr> hoss:   I'd appreciate a sanity check on that - it looks like cleanup to me, but maybe there's a reason each \n                       member of SelectorParams was being passed around instead?\n\n\n\nI can't think of any reason why i had it that way either.  Your patch looks much cleaner (although my preference would be to leave a deprecated version of the old createFieldNameSelector that delegates to your new version)\n\nmisc comments...\n\n\n\tyou should change getDefaultSelector in IgnoreFieldUpdateProcessorFactory to take advantage of your new logic (ie: call createFieldNameSelector(...))\n\ti would make getBooleanArg give an explict error if the key exists multiple times\n\tto be nice to users who might not no any better, i would suggest that getBooleanArg should also accept a String and pass it to Boolean.valueOf\n\twould be good to have a test of fieldNameMatchesSchemaField in an excludes\n\ti don't think your ignore-not-in-schema-and-foo-name-prefix is verifying that the foo prefix is required?\n\teven with your added comments, the logic involving fieldNameMatchesSchemaField in shouldMutate seems kind of hairy (too hairy for me to be confident it's correct by reading it w/o looking at the test) .. i'm wondering if it can't be \"unwound\" a bit to make it more straight forward?\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13677751",
            "date": "2013-06-07T01:55:34+0000",
            "content": "updated patch that addresses a few of my previous comments...\n\n\n\n\twould be good to have a test of fieldNameMatchesSchemaField in an excludes\n\ti don't think your ignore-not-in-schema-and-foo-name-prefix is verifying that the foo prefix is required?\n\teven with your added comments, the logic involving fieldNameMatchesSchemaField in shouldMutate seems kind of hairy (too hairy for me to be confident it's correct by reading it w/o looking at the test) .. i'm wondering if it can't be \"unwound\" a bit to make it more straight forward?\n\n\n\n...lemme know what you think of the new logic in ConfigurableFieldNameSelector.shouldMutate .. i think it's easier to read, but i'm curious if that's just how my mind works\n\nI retract this suggestion...\n\nyou should change getDefaultSelector in IgnoreFieldUpdateProcessorFactory to take advantage of your new logic (ie: call createFieldNameSelector(...))\n\n..no reason to make that method reuse createFieldNameSelector with anartificials set of params just to get a selector that would be slower then what it uses right now. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13677833",
            "date": "2013-06-07T06:02:27+0000",
            "content": "\nupdated patch that addresses a few of my previous comments...\n\n* would be good to have a test of fieldNameMatchesSchemaField in an excludes\n* i don't think your ignore-not-in-schema-and-foo-name-prefix is verifying that the foo prefix is required?\n\nThanks, these look good.\n\n\neven with your added comments, the logic involving fieldNameMatchesSchemaField in shouldMutate seems kind of hairy (too hairy for me to be confident it's correct by reading it w/o looking at the test) .. i'm wondering if it can't be \"unwound\" a bit to make it more straight forward?\n\n...lemme know what you think of the new logic in ConfigurableFieldNameSelector.shouldMutate .. i think it's easier to read, but i'm curious if that's just how my mind works\n\nIt looks easier to read to me, thanks.\n\n\n\n\ti would make getBooleanArg give an explict error if the key exists multiple times\n\tto be nice to users who might not no any better, i would suggest that getBooleanArg should also accept a String and pass it to Boolean.valueOf\n\n\n\nThe attached patch implements the above two suggestions.  I think that covers your comments? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13677849",
            "date": "2013-06-07T06:19:21+0000",
            "content": "I think that covers your comments?\n\nOops, I missed one:\n\nmy preference would be to leave a deprecated version of the old createFieldNameSelector that delegates to your new version\n\nI went to do this and noticed two things: a) it's marked with @lucene.internal; and b) in order to support the new selector parameter fieldNameMatchesSchemaField, we'd have to change the signature on the original version anyway.  So since it's going to break users' compilation either way, I don't it's worth it to keep the old version.  (I guess we could keep the old version without the new selector parameter, and fill in null for it when passing to the new version, but I'd rather people have to deal with the new parameter.)  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13678236",
            "date": "2013-06-07T18:10:37+0000",
            "content": "So since it's going to break users' compilation either way, I don't it's worth it to keep the old version.\n\n+1\n\npatch: +1 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13678893",
            "date": "2013-06-09T00:20:23+0000",
            "content": "Thanks Hoss!\n\nCommitted:\n\n\n\ttrunk: r1491102\n\tbranch_4x: r1491109\n\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13690665",
            "date": "2013-06-21T20:06:35+0000",
            "content": "[trunk commit] sarowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1495574\n\nSOLR-4893: javadoc for the new fieldNameMatchesSchemaField selector "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13690666",
            "date": "2013-06-21T20:07:46+0000",
            "content": "[branch_4x commit] sarowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1495575\n\nSOLR-4893: javadoc for the new fieldNameMatchesSchemaField selector (merged trunk r1495574) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716818",
            "date": "2013-07-23T18:38:40+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}