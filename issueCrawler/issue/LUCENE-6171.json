{
    "id": "LUCENE-6171",
    "title": "Make lucene completely write-once",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Today, lucene is mostly write-once, but not always, and these are just very exceptional cases. \n\nThis is an invitation for exceptional bugs: (and we have occasional test failures when doing \"no-wait close\" because of this). \n\nI would prefer it if we didn't try to delete files before we open them for write, and if we opened them with the CREATE_NEW option by default to throw an exception, if the file already exists.\n\nThe trickier parts of the change are going to be IndexFileDeleter and exceptions on merge / CFS construction logic.\n\nOverall for IndexFileDeleter I think the least invasive option might be to only delete files older than the current commit point? This will ensure that inflateGens() always avoids trying to overwrite any files that were from an aborted segment. \n\nFor CFS construction/exceptions on merge, we really need to remove the custom \"sniping\" of index files there and let only IndexFileDeleter delete files. My previous failed approach involved always consistently using TrackingDirectoryWrapper, but it failed, and only in backwards compatibility tests, because of LUCENE-6146 (but i could never figure that out). I am hoping this time I will be successful \n\nLonger term we should think about more simplifications, progress has been made on LUCENE-5987, but I think overall we still try to be a superhero for exceptions on merge?",
    "attachments": {
        "LUCENE-6171.patch": "https://issues.apache.org/jira/secure/attachment/12809804/LUCENE-6171.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15327124",
            "author": "Michael McCandless",
            "date": "2016-06-13T10:25:37+0000",
            "content": "Here's a naive initial patch ... all I did was add the CREATE_NEW\nflag in FSDirectory.createOutput, and removed\nMockDirectoryWrapper.setPreventDoubleWrite and all tests that\ninvoked that.\n\nLucene tests passed (once!); not sure about solr tests.  I haven't looked into the other fixes Robert Muir suggested yet ... "
        },
        {
            "id": "comment-15327634",
            "author": "David Smiley",
            "date": "2016-06-13T15:48:30+0000",
            "content": "Curious \u2013 what does updatable docValues do?  Does it not update a file or does each update create a new one, perhaps in parallel-index like manner? "
        },
        {
            "id": "comment-15327898",
            "author": "Michael McCandless",
            "date": "2016-06-13T18:44:56+0000",
            "content": "does each update create a new one, perhaps in parallel-index like manner?\n\nThat's what we do ... we always fully write the new doc values to another file, and stop referencing the old one. "
        },
        {
            "id": "comment-15329360",
            "author": "Robert Muir",
            "date": "2016-06-14T11:47:23+0000",
            "content": "+1. This part of the change speaks volumes:\n\n\n     public FSIndexOutput(String name) throws IOException {\n-      this(name, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);\n+      this(name, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);\n     }\n\n\n\nSome of the issues i mentioned may have been resolved already? This issue is quite old. I think many of these problems have been addressed since then. "
        },
        {
            "id": "comment-15329601",
            "author": "Michael McCandless",
            "date": "2016-06-14T14:43:58+0000",
            "content": "Thanks Robert Muir ... I think we have made progress since then.  I'll clean up the patch and make sure tests pass and push so we can get Jenkins chewing on it. "
        },
        {
            "id": "comment-15438985",
            "author": "Michael McCandless",
            "date": "2016-08-26T13:59:19+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        }
    ]
}