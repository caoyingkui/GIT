{
    "id": "LUCENE-6034",
    "title": "MemoryIndex should be able to wrap TermVector Terms",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/highlighter"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "The default highlighter has a \"WeightedSpanTermExtractor\" that uses MemoryIndex for certain queries \u2013 basically phrases, SpanQueries, and the like.  For lots of text, this aspect of highlighting is time consuming and consumes a fair amount of memory.  What also consumes memory is that it wraps the tokenStream in CachingTokenFilter in this case.  But if the underlying TokenStream is actually from TokenSources (wrapping TermVector Terms), this is all needless!  Furthermore, MemoryIndex doesn't support payloads.\n\nThe patch here has 3 aspects to it:\n\n\tInternal refactoring to MemoryIndex to simplify it by maintaining the fields in a sorted state using a TreeMap.  The ramifications of this led to reduced LOC for this file, even with the other features I added.  It also puts the FieldInfo on the Info, and thus there's one less data structure to keep around.  I suppose if there are a huge variety of fields in MemoryIndex, the aggregated N*Log(N) field lookup could add up, but that seems very unlikely.  I also brought in the MemoryIndexNormDocValues as a simple anonymous inner class - it's super-simple after all, not worth having in a separate file.\n\tNew MemoryIndex.addField(String fieldName, Terms) method.  In this case, MemoryIndex is providing the supporting wrappers around the underlying Terms so that it appears as an Index.  In so doing, MemoryIndex supports payloads for such fields.\n\tWeightedSpanTermExtractor now detects TokenSources' wrapping of Terms and it supplies this to MemoryIndex.",
    "attachments": {
        "LUCENE-6034.patch": "https://issues.apache.org/jira/secure/attachment/12678222/LUCENE-6034.patch",
        "LUCENE-6034_Simplify_MemoryIndex.patch": "https://issues.apache.org/jira/secure/attachment/12684888/LUCENE-6034_Simplify_MemoryIndex.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14229416",
            "author": "David Smiley",
            "content": "Here's an updated patch.  Continuing the internal refactor, I eliminated the separate hashmap cache for Norms and used Info for that purpose.\n\nAlan Woodward I know you've worked in MemoryIndex lately; it'd be great if you could have a look.\n\nI plan to commit this Tuesday night, subject to feedback. ",
            "date": "2014-12-01T04:57:39+0000"
        },
        {
            "id": "comment-14229589",
            "author": "Alan Woodward",
            "content": "+1, this is a nice cleanup\n\nOn the question of what to do if you try and add a TermVectors field with no stored offsets when the MemoryIndex is expecting them, should we just throw an IllegalArgumentException?  Better to get an error when you add the field rather than further down the line when you try and use the offsets. ",
            "date": "2014-12-01T09:36:21+0000"
        },
        {
            "id": "comment-14229760",
            "author": "David Smiley",
            "content": "Thanks for the review, Alan.\n\nI updated the patch to throw IAE if offsets are expected but not present in the term vector. ",
            "date": "2014-12-01T13:04:46+0000"
        },
        {
            "id": "comment-14229789",
            "author": "Robert Muir",
            "content": "Does it really make sense to involve MemoryIndex here? If you want to search against a term vectors, i think it should just be an AtomicReader implementation? ",
            "date": "2014-12-01T13:38:09+0000"
        },
        {
            "id": "comment-14229798",
            "author": "David Smiley",
            "content": "That thought crossed my mind as I was working on it... but then I thought it might have a lot of duplication of infrastructure with MemoryIndex (e.g. getNormValues...).  But then maybe most of that isn't needed?  I could go either way I guess. ",
            "date": "2014-12-01T13:51:50+0000"
        },
        {
            "id": "comment-14229808",
            "author": "Robert Muir",
            "content": "I think it would be much cleaner to keep it separate. making an atomicreader backed by vectors to me is totally different task than a memoryindex. ",
            "date": "2014-12-01T14:00:18+0000"
        },
        {
            "id": "comment-14229813",
            "author": "David Smiley",
            "content": "Sure; I'll do that.  I'll keep the refactorings to MemoryIndex but drop the TermVector part, of course. ",
            "date": "2014-12-01T14:03:34+0000"
        },
        {
            "id": "comment-14232984",
            "author": "David Smiley",
            "content": "The attached patch is just for simplifying MemoryIndex (incl. inlining separate MemoryIndexNormDocValues.java file).  The net LOC is ~ -90. ",
            "date": "2014-12-03T13:17:41+0000"
        },
        {
            "id": "comment-14232991",
            "author": "David Smiley",
            "content": "This patch introduces TermVectorLeafReader which I put in the same package as WeightedSpanTermExtractor and now used by that class.\n\nAfter having implemented that LeafReader subclass, I do tend to think LeafReader should have fewer abstract methods.  It would be nice if the only abstract methods were were fields(), getFieldInfos(), and maxDoc().  FieldInfos feels like something that should be retrieved from Fields, not LeafReader.\n\nI intend to commit both patches tomorrow. ",
            "date": "2014-12-03T13:27:51+0000"
        },
        {
            "id": "comment-14233087",
            "author": "Robert Muir",
            "content": "\nAfter having implemented that LeafReader subclass, I do tend to think LeafReader should have fewer abstract methods. It would be nice if the only abstract methods were were fields(), getFieldInfos(), and maxDoc(). FieldInfos feels like something that should be retrieved from Fields, not LeafReader.\n\nHow can you think that? You act as  if the inverted index is the only thing going on. Maybe we should just remove term vectors then if they aren't very important? and stored fields too? and docvalues and norms? This would certainly be less code to maintain. And we wouldnt have to store all that stuff in fieldinfos thats unrelated to postings lists either. ",
            "date": "2014-12-03T15:06:43+0000"
        },
        {
            "id": "comment-14235025",
            "author": "David Smiley",
            "content": "Updated patch.:\n\n\tWeightedSpanTermExtractor should detect MatchAllDocsQuery and do nothing (an optimization)\n\tRandomized HighlighterTest to sometimes use term vectors.\n\tAdded test to validate that with term vectors, payloads, and payload sensitive queries, the highlighter honors those queries and doesn't highlight if there isn't a payload match.  This is the only highlighter with this feature and I'll be sure to mention it as a new feature in CHANGES.txt.\n\n ",
            "date": "2014-12-05T03:52:28+0000"
        },
        {
            "id": "comment-14235552",
            "author": "ASF subversion and git services",
            "content": "Commit 1643298 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1643298 ]\n\nLUCENE-6034: Simplify MemoryIndex state via TreeMap<Info> etc. ",
            "date": "2014-12-05T14:43:22+0000"
        },
        {
            "id": "comment-14235556",
            "author": "ASF subversion and git services",
            "content": "Commit 1643300 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1643300 ]\n\nLUCENE-6034: Simplify MemoryIndex state via TreeMap<Info> etc. ",
            "date": "2014-12-05T14:44:57+0000"
        },
        {
            "id": "comment-14235585",
            "author": "ASF subversion and git services",
            "content": "Commit 1643316 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1643316 ]\n\nLUCENE-6034: Highlighter QueryScorer/WeightedSpanTermExtractor shouldn't re-invert a term vector based TokenStream. It can now highlight payload-sensitive queries. ",
            "date": "2014-12-05T15:09:04+0000"
        },
        {
            "id": "comment-14235596",
            "author": "ASF subversion and git services",
            "content": "Commit 1643321 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1643321 ]\n\nLUCENE-6034: Highlighter QueryScorer/WeightedSpanTermExtractor shouldn't re-invert a term vector based TokenStream. It can now highlight payload-sensitive queries. ",
            "date": "2014-12-05T15:17:23+0000"
        },
        {
            "id": "comment-14332657",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:01:11+0000"
        }
    ]
}