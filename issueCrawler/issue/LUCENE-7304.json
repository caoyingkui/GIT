{
    "id": "LUCENE-7304",
    "title": "Doc values based block join implementation",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "At query time the block join relies on a bitset for finding the previous parent doc during advancing the doc id iterator. On large indices these bitsets can consume large amounts of jvm heap space.  Also typically due the nature how these bitsets are set, the 'FixedBitSet' implementation is used.\n\nThe idea I had was to replace the bitset usage by a numeric doc values field that stores offsets. Each child doc stores how many docids it is from its parent doc and each parent stores how many docids it is apart from its first child. At query time this information can be used to perform the block join.\n\nI think another benefit of this approach is that external tools can now easily determine if a doc is part of a block of documents and perhaps this also helps index time sorting?",
    "attachments": {
        "LUCENE_7304.patch": "https://issues.apache.org/jira/secure/attachment/12806377/LUCENE_7304.patch",
        "LUCENE-7304.patch": "https://issues.apache.org/jira/secure/attachment/12869649/LUCENE-7304.patch",
        "LUCENE-7304-20160531.patch": "https://issues.apache.org/jira/secure/attachment/12807253/LUCENE-7304-20160531.patch",
        "LUCENE-5092-20140313.patch": "https://issues.apache.org/jira/secure/attachment/12807001/LUCENE-5092-20140313.patch",
        "LUCENE-7304-20160606.patch": "https://issues.apache.org/jira/secure/attachment/12808457/LUCENE-7304-20160606.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15302108",
            "author": "Martijn van Groningen",
            "date": "2016-05-26T14:05:35+0000",
            "content": "Attached a working version of a doc values based block join query. \nThe app storing docs is responsible for adding the numeric doc values field with the right offsets. "
        },
        {
            "id": "comment-15302245",
            "author": "David Smiley",
            "date": "2016-05-26T15:25:33+0000",
            "content": "This is interesting. I wonder... instead couldn't we get a DocIdSetIterator of parent docs and kind of intersect it with the child DISI?  (no bitset, no potentially fragile encoding of relative doc ID offsets). This is a half-baked idea and I'm not sure if it even makes any sense :-P so take it with a grain of salt! "
        },
        {
            "id": "comment-15302569",
            "author": "Martijn van Groningen",
            "date": "2016-05-26T17:48:40+0000",
            "content": "I wonder... instead couldn't we get a DocIdSetIterator of parent docs and kind of intersect it with the child DISI?\n\nI wondered that a while ago too, but we can't go backwards with `DocIdSetIterator` and this what the advance method ('parentBits.prevSetBit(parentTarget-1)') requires of the block join query to figure out where the first child starts for 'parentTarget'. "
        },
        {
            "id": "comment-15302642",
            "author": "Adrien Grand",
            "date": "2016-05-26T18:28:25+0000",
            "content": "If we switched block joins to use numeric doc values, I am wondering if we would ever need to read doc values in reverse order? The reason I am asking is that there have been some tensions to cut over doc values to an iterator API in order to improve compression and better deal with sparse doc values, see eg. LUCENE-7253: "
        },
        {
            "id": "comment-15302697",
            "author": "Martijn van Groningen",
            "date": "2016-05-26T18:59:54+0000",
            "content": "If we switched block joins to use numeric doc values, I am wondering if we would ever need to read doc values in reverse order? \n\nYes, in this patch, but I think the logic can be changed, so that at least doc values don't need to be read in reverse. Currently there is one offset field holding both the offset the parent for child docs and offset to the first child for parents. This can be split up in two fields, so that doc values never has to be read in reverse. "
        },
        {
            "id": "comment-15304081",
            "author": "Michael McCandless",
            "date": "2016-05-27T13:49:08+0000",
            "content": "This is a neat idea!\n\nDoes this approach work out to less than one bit per doc?  I guess it must be more than that (our doc values compression isn't THAT good yet), but by switching to doc values, even though we need more RAM, it moves off-heap right, so the OS is managing keeping those bytes hot instead. "
        },
        {
            "id": "comment-15304145",
            "author": "Martijn van Groningen",
            "date": "2016-05-27T14:50:33+0000",
            "content": "Does this approach work out to less than one bit per doc? \n\nUnfortunately it is more than that. But with current block join implementation the memory cost does increase (requires extra bit sets) when there are multiple levels of parent-child relations, while with this approach the memory costs remains the same (it just needs one numeric doc values field to encode the multiple layers of document blocks). \n\nour doc values compression isn't THAT good yet\n\nMaybe if doc values becomes an iterator based, then I guess with delta encoding, we could get closer to 1 bit per doc?\n "
        },
        {
            "id": "comment-15305550",
            "author": "Paul Elschot",
            "date": "2016-05-28T19:11:48+0000",
            "content": "... go backwards ...  less than one bit per doc ...\n\nMaybe it is time to have another look at EliasFanoDocIdSet, see LUCENE-6484.\nIt won't really fit doc values I think, for block joins this needs one set per segment.\n\nI still have an EliasFanoDocIdSet that could be used for block joins, see LUCENE-5092.\nIn case there is interest in that please let me know, the github pull requests from that time did not survive the move to git.\n\nSee also these graphs on performance http://people.apache.org/~jpountz/doc_id_sets.html\nUnfortunately RoaringDocIdSet is not shown in there, I'd expect that to be (easily made) bidirectional, too.\n "
        },
        {
            "id": "comment-15306555",
            "author": "Martijn van Groningen",
            "date": "2016-05-30T11:42:09+0000",
            "content": "I still have an EliasFanoDocIdSet that could be used for block joins, see LUCENE-5092.\n\nI'm not familiar with EliasFanoDocIdSet, but can that implementation go iterate backwards? The link to the pull request mentioned in that issue gives a 404 and from the patch in LUCENE-6484 it doesn't seem this is supported. "
        },
        {
            "id": "comment-15306868",
            "author": "Paul Elschot",
            "date": "2016-05-30T18:14:57+0000",
            "content": "Patch for LUCENE-5092 against trunk of 13 March 2014.\nA.o. this adds method advanceToJustBefore() in EliasFanoDocIdSet. "
        },
        {
            "id": "comment-15306872",
            "author": "Paul Elschot",
            "date": "2016-05-30T18:27:15+0000",
            "content": "To use an EliasFano dictionary in an index, it would be better to start from the EliasFano code from LUCENE-5627 because that one also has an implementation on a BytesRef that is used as a payload there. From the BytesRef it would probably be easier to put it directly in an index.\nThe same advanceToJustBefore() method (from DocBlockIterator) would still need to be added.\n\nThe above patch for LUCENE-5092 also moves block joins from FixedBitSet to DocBlockIterator.\nFor use here, that would allow two different implementations of DocBlockIterator, the current FixedBitSet and an implementation based on doc values. "
        },
        {
            "id": "comment-15306894",
            "author": "Paul Elschot",
            "date": "2016-05-30T19:11:10+0000",
            "content": "When heap space is the only problem, one could also leave the index unchanged and create an EliasFanoSequence based on long[]'s because that is a little faster than the one based on a BytesRef.\nOne sequence per block level would be needed. "
        },
        {
            "id": "comment-15307395",
            "author": "Martijn van Groningen",
            "date": "2016-05-31T08:01:52+0000",
            "content": "Having different block join implementations with different trade offs around is good. If EliasFanoDocIdSet can extend from `BitSet` then I think it would be a nice addition to the jojn module, so that `ToParentBlockJoinQuery` and friends can use it as `parentsFilter`. This way the block join that exists today can be improved in certain scenarios (I think that largely depends on how dense this parentsFilter is. Typically it tends to be on the dense side). "
        },
        {
            "id": "comment-15308590",
            "author": "Paul Elschot",
            "date": "2016-05-31T20:44:54+0000",
            "content": "Patch of 31 May 2016.\nAdds DocBlocksIterator and uses it in ToChildBlockJoinQuery only.\n\nThis is mostly an update of LUCENE-5092 to today, except that it does not include the ToParentBlockJoinQuery yet.\n\nTo my surprise this compiles, but I did not run the tests in the join module.\n\nThis is only to show a possible direction, BitSetProducer in the join queries may also need to be replaced by a DocBlocksIteratorProducer. "
        },
        {
            "id": "comment-15310055",
            "author": "Martijn van Groningen",
            "date": "2016-06-01T09:57:23+0000",
            "content": "This is only to show a possible direction, BitSetProducer in the join queries may also need to be replaced by a DocBlocksIteratorProducer.\n\nCool. Lets iterate on this approach in a new issue? So that this issue can focus on the doc values based approach. "
        },
        {
            "id": "comment-15311833",
            "author": "Paul Elschot",
            "date": "2016-06-02T06:50:07+0000",
            "content": "Instead of the patch it might be simpler to try and let EliasFanoDocIdSet extend from BitSet, even though it cannot implement MutableBits.\nThere is a dilemma here: either introduce DocBlocksIterator, or not implement MutableBits.\n\nThe question is which one would be preferable in the long term for the block join queries: DocBlocksIterator or BitSet?\nDocBlocksIterator is read only and might involve a little overhead.\nBitSet implements mutability but that is not needed for the block join queries.\n "
        },
        {
            "id": "comment-15311868",
            "author": "Martijn van Groningen",
            "date": "2016-06-02T07:20:54+0000",
            "content": "There is a dilemma here: either introduce DocBlocksIterator, or not implement MutableBits.\n\nThe block join queries are not using any of the methods that modify the bitset, so I think it is fine to not implement clear() and set() methods. Also it will not be a general purpose bitset, but specialized for the block join. "
        },
        {
            "id": "comment-15314992",
            "author": "Paul Elschot",
            "date": "2016-06-03T22:29:06+0000",
            "content": "This will take a some time, I'll give a try, slowly.\n\nI intend to make an EliasFanoDocIdSet that implements BitSet.\nI think it makes sense to try and use this as a starting point for a sparse doc values implementation, so for now I'm not opening a new issue.\nUnlike normal doc values, this would allow an advance(target) implementation.\n\nMeanwhile I realized that a doc values implementation will also have to deal with MutableBits.\n\n(... Typically it tends to be on the dense side).\n\nIs there is a typical document block size these days?\nFor less than 7, an EliasFano based implementation does not really make sense, a FixedBitSet is better there.\nThe bigger the block size gets than that, the more EliasFano makes sense.\n\nFor nested blocks, EliasFano can be used hierarchically, at a higher level the value in the dictionary can be the index of the dictionary at the lower level.\nAnyway, at any level there is always the possibility to use FixedBitSet or another BitSet implementation. "
        },
        {
            "id": "comment-15316330",
            "author": "Martijn van Groningen",
            "date": "2016-06-06T08:35:53+0000",
            "content": "I intend to make an EliasFanoDocIdSet that implements BitSet. I think it makes sense to try and use this as a starting point for a sparse doc values implementation, so for now I'm not opening a new issue.\n\nI don't follow. I thought that this new BitSet would be used for the current block join queries? The idea I had is that the doc values block join wouldn't rely on BitSet and would be using a numeric doc values field instead. I'm not sure if the doc values block join will be a better trade off over the current block join in certain scenarios, but this issue is here to explore this.\n\nIs there is a typical document block size these days?\n\nMost blocks are larger than 7 docs, but usually inside these blocks there are several layers of child documents (range from 1 to many). Each additional child level in a block requires a BitSet instance too. It really depends and there is no typical block size. "
        },
        {
            "id": "comment-15317115",
            "author": "Paul Elschot",
            "date": "2016-06-06T20:03:36+0000",
            "content": "Patch of 6 June 2016.\nThis is the EliasFano code from  LUCENE-5627 put into core.\n\nThis has EliasFanoSequence implemented as EliasFanoBytes and as EliasFanoLongs, and an encoder and a decoder for these.\n\nThe EliasFanoDocIdSet uses an EliasFanoLongs except when it is dense, in that case it uses a FixedBitSet.\n\nI added a getBitSet() method in this EliasFanoDocIdSet.\n\nI also added the test cases from LUCENE-5627, but I did not add a test for the getBitSet() method yet. It works as a DocIdSet, so as a BitSet should be no problem.\n\nEliasFanoDocIdSet could also be implemented on EliasFanoBytes, and it should be doable to put that in an index. At LUCENE-5627 EliasFanoBytes is used as a Payload already. "
        },
        {
            "id": "comment-15317130",
            "author": "Paul Elschot",
            "date": "2016-06-06T20:08:49+0000",
            "content": "To save some space for multilevel blocks, at a higher level one could use an EliasFanoSequence of the indexes of the lower level. "
        },
        {
            "id": "comment-15317229",
            "author": "Martijn van Groningen",
            "date": "2016-06-06T20:56:51+0000",
            "content": "Paul Elschot This is a lot of code  I really think this should be moved to a new issue, not just because of this size of the patch, but also because the implementation is different compared to what was initially proposed here. Also I think that EliasFanoDocIdSet and friends shouldn't be added to core, but should be added the join module instead. EliasFano was superseded from core as general purposes docidset by other implementations a while ago and since now it will be used in context of block join, it makes sense to just add it to the join module.  "
        },
        {
            "id": "comment-15317971",
            "author": "Paul Elschot",
            "date": "2016-06-07T06:40:05+0000",
            "content": "The last time I tried doc values, I could not use advance(target) on them. Is that still the case?\nWhen so, that will be a hurdle to take for a doc values based block join implementation.\n\nThe other BitSets could also be used for several layers of blocks using the index at the lower level. "
        },
        {
            "id": "comment-15318393",
            "author": "Martijn van Groningen",
            "date": "2016-06-07T12:35:20+0000",
            "content": "The last time I tried doc values, I could not use advance(target) on them. Is that still the case?\n\nThat is still the case. But the way the doc value block join work is by storing offsets (how far away is the first child doc in docids and how far away is the closest parent) and at query time that is being used to advance the child scorer. However when doc values become iterator based these offsets can be encoded much more efficiently then is now the case. "
        },
        {
            "id": "comment-15318453",
            "author": "Martijn van Groningen",
            "date": "2016-06-07T13:19:08+0000",
            "content": "Changed the block join query to only require that parent docs store how far away there first child doc is (in docids).\n\nThe reduces the amount of information required to be stored in the doc values offset field and these offsets for the parents compress better the offset values before (which was composed out of more information).\n\nI tested this patch out on a test data set (https://archive.org/download/stackexchange/english.stackexchange.com.7z). I extracted the questions, answers and comment and indexed each question with its answers and related comments as a hierarchical block of documents. In total 745252 docs were indexed. The size of the doc values offset field was 839592 bytes. \n\nAfter that I ran a query that selects all questions that have answers with comments (questions -> answers -> comments) for both the current block join and doc value block join. The the block join used 186768 bytes of jvm heap for bitsets and the doc values block join used 1132 bytes of jvm heap for references to the offset doc values field. \n\nSo with the doc values approach, in total used roughly 4.5 times more RAM (assuming OS caches offset field), and the jvm memory footprint was roughly 165 times smaller.  "
        },
        {
            "id": "comment-16022882",
            "author": "Martijn van Groningen",
            "date": "2017-05-24T13:22:23+0000",
            "content": "It has been a while, but I had some time to get back to this. Updated patch to all changes that have happened so far in master (iterator based doc values api, two phase query execution and score supplier).\n\nI ran the same performance test as before and due to doc values compression, the offset field now takes 337387 bytes instead of 839592 bytes before, which is good!\n\nI'm still thinking about other ways of encoding the block of documents. Right now the parent document have a doc values field with the offset to the first child docid. Instead child documents can have a doc values field with the offset to its parent docid. That way parent doc can be indexed first before the child docs.\n "
        },
        {
            "id": "comment-16059247",
            "author": "Martijn van Groningen",
            "date": "2017-06-22T12:06:45+0000",
            "content": "Updated the patch. Added a more tests and cleaned up a bit.\n\nTo re-iterate what this patch does, this query uses both an indexed field and a doc values field. The doc values field is used when DocIdSetIterator#advance(...) is invoked to figure out what the first child is of a parent and then instruct the child iterator to advance to that first child. The doc values field has kind of the same purpose what the BitSet does for ToParentBlockJoinQuery query. The indexed field is used for normal forward advancing (DocIdSetIterator#nextDoc()).\n\nI'm still unsure if this query should also use a doc values field for forward advancing. Each child would then store the offset to the next child. The last child's offset would be zero, meaning the parent is the next document. I think the upside with only using doc values fields is that validating that the docid block structure is correct is easier. "
        }
    ]
}