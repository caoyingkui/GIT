{
    "id": "LUCENE-6466",
    "title": "Move SpanQuery.getSpans() to SpanWeight",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "SpanQuery.getSpans() should only be called on rewritten queries, so it seems to make more sense to have this being called from SpanWeight",
    "attachments": {
        "LUCENE-6466-branch5x.patch": "https://issues.apache.org/jira/secure/attachment/12739587/LUCENE-6466-branch5x.patch",
        "LUCENE-6466-2.patch": "https://issues.apache.org/jira/secure/attachment/12736141/LUCENE-6466-2.patch",
        "LUCENE-6466.patch": "https://issues.apache.org/jira/secure/attachment/12730787/LUCENE-6466.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14530212",
            "author": "Alan Woodward",
            "date": "2015-05-06T09:18:59+0000",
            "content": "Here is a patch.  SpanQuery.createWeight() is now final, and delegates on to an abstract method #createSpanWeight().  This takes an additional boolean parameter to determine whether or not the weight is at the top of a span tree, in which case it should build term stats.\n\nIdeally I'd have liked to move SpanQuery.extractTerms() to SpanWeight as well, but that causes complications when collecting terms in the SpanWeight constructor (basically you can't call extractTerms on a delegate from a super constructor, because the delegate hasn't been set yet). "
        },
        {
            "id": "comment-14548156",
            "author": "Alan Woodward",
            "date": "2015-05-18T15:25:26+0000",
            "content": "Updated patch, building on top of the SpanCollector API in LUCENE-6371.\n\nThis moves both getSpans() and extractTerms() to SpanWeight, and refactors the similarity and scoring a bit.  SpanWeight.getSpans() now looks very like Weight.scorer(), which is nice if we want to move towards merging the two APIs.\n\nStill needs javadocs, etc, but I wanted to get some feedback before doing precommit checks. "
        },
        {
            "id": "comment-14548513",
            "author": "Alan Woodward",
            "date": "2015-05-18T19:00:13+0000",
            "content": "Another patch.  This one is nicer, I think.  It uses the needsScores parameter to determine whether or not to build the SpanSimilarity for a search. "
        },
        {
            "id": "comment-14548586",
            "author": "Paul Elschot",
            "date": "2015-05-18T19:19:56+0000",
            "content": "The (2nd) patch looks good in the sense of making SpanWeight.getSpans() consistent with Weight.scorer().\nThis also introduces SpanSimilarity, which makes sense.\nOn the extra complexity of the SpanWeights that are added for each SpanQuery: at the moment these SpanWeights don't do much, but they are good to have because they can be overridden separately.\n\nI think these SpanWeights can also allow adding a scoring method to Spans, but perhaps that is better done at another issue. "
        },
        {
            "id": "comment-14550204",
            "author": "Alan Woodward",
            "date": "2015-05-19T10:29:14+0000",
            "content": "Final patch.  I'll commit this tomorrow, absent any objections. "
        },
        {
            "id": "comment-14552294",
            "author": "Alan Woodward",
            "date": "2015-05-20T13:15:14+0000",
            "content": "Updated to take into account changes from LUCENE-6490.  Running precommit now "
        },
        {
            "id": "comment-14552320",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T13:29:12+0000",
            "content": "Commit 1680565 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1680565 ]\n\nLUCENE-6466: Move SpanQuery.getSpans() and .extractTerms() to SpanWeight "
        },
        {
            "id": "comment-14552337",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T13:47:20+0000",
            "content": "Commit 1680569 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680569 ]\n\nLUCENE-6466: Move SpanQuery.getSpans() and .extractTerms() to SpanWeight "
        },
        {
            "id": "comment-14552338",
            "author": "Alan Woodward",
            "date": "2015-05-20T13:47:52+0000",
            "content": "Thanks for the review, Paul! "
        },
        {
            "id": "comment-14552479",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T15:27:25+0000",
            "content": "Commit 1680603 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1680603 ]\n\nLUCENE-6466: Fix MultiSpansWrapper "
        },
        {
            "id": "comment-14552482",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T15:28:23+0000",
            "content": "Commit 1680604 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680604 ]\n\nLUCENE-6466: Fix MultiSpansWrapper "
        },
        {
            "id": "comment-14552492",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T15:32:00+0000",
            "content": "Commit 1680606 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1680606 ]\n\nLUCENE-6466: Don't commit @Seed... "
        },
        {
            "id": "comment-14552494",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T15:32:36+0000",
            "content": "Commit 1680607 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680607 ]\n\nLUCENE-6466: Don't commit @Seed... "
        },
        {
            "id": "comment-14555307",
            "author": "Robert Muir",
            "date": "2015-05-21T23:52:14+0000",
            "content": "Do we really need to expose SpanSimilarity as a separate class here? I find it confusing (e.g. no-op method that returns a null scorer), and its a lot of plumbing. I think instead of this class, there could just be a final method on SpanWeight base-class, to retrieve the appropriate Similarity, and impls of normalization and so on like any other Weights. "
        },
        {
            "id": "comment-14555433",
            "author": "Robert Muir",
            "date": "2015-05-22T01:48:31+0000",
            "content": "I tried looking into this patch to see why it causes test failures with scoring changes (https://issues.apache.org/jira/browse/LUCENE-6495), but its hard to see with the indentation changes from various code being shuffled around.  "
        },
        {
            "id": "comment-14555442",
            "author": "Robert Muir",
            "date": "2015-05-22T01:55:53+0000",
            "content": "Also its wierd it only reproduces on java 7. Maybe some hash ordering issue? "
        },
        {
            "id": "comment-14555465",
            "author": "ASF subversion and git services",
            "date": "2015-05-22T02:15:37+0000",
            "content": "Commit 1680978 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680978 ]\n\nLUCENE-6371, LUCENE-6466: back out from 5.2, see https://issues.apache.org/jira/browse/LUCENE-6494 "
        },
        {
            "id": "comment-14564841",
            "author": "Alan Woodward",
            "date": "2015-05-29T13:55:28+0000",
            "content": "Patch part 2, following discussion on LUCENE-6371.\n\n\tremoves SpanSimilarity, in favour of a map of terms to termcontexts\n\tSpanTermQuery can take an optional TermContext in its constructor, similar to TermQuery\n\tSpanMTQWrapper now preserves term states when rewriting to SpanTermQueries\n\n\n\nWhat would be nice would be to try and write an asserting TermsEnum that could check how many times seekExact(BytesRef) was called, to ensure that the various queries are re-using their term states properly. "
        },
        {
            "id": "comment-14564923",
            "author": "Robert Muir",
            "date": "2015-05-29T14:57:00+0000",
            "content": "Looks simpler. I am still hoping we can remove the map, but lets do this for now.\n\nCan we make SpanWeight.buildSimWeight private final? its only used by its ctor.\n\nCan both rewrite methods currently in SpanMultiTermQuery be fixed to avoid re-seeking? Maybe TopTermsSpanBooleanQueryRewrite was forgotten.\n\n\nWhat would be nice would be to try and write an asserting TermsEnum that could check how many times seekExact(BytesRef) was called, to ensure that the various queries are re-using their term states properly.\n\nTermQuery/Weight has checks around this that can help. Look for stuff like assertTermNotInReader check. This was missing from spans because of its previous leniency. "
        },
        {
            "id": "comment-14564991",
            "author": "Alan Woodward",
            "date": "2015-05-29T15:55:54+0000",
            "content": "Oops, yes, I missed TopTermsSpanBooleanQueryRewrite.  Final patch with the changes there, plus some assertions copied from TermWeight/TermScorer. "
        },
        {
            "id": "comment-14565002",
            "author": "Robert Muir",
            "date": "2015-05-29T16:02:57+0000",
            "content": "Can we replace methods like this one in SpanTermQuery with calls to Collections.singletonMap?\n\n\n  protected static Map<Term, TermContext> toMap(Term term, TermContext termContext) {\n    Map<Term, TermContext> map = new HashMap<>();\n    map.put(term, termContext);\n    return map;\n  }\n\n "
        },
        {
            "id": "comment-14565009",
            "author": "Robert Muir",
            "date": "2015-05-29T16:08:45+0000",
            "content": "I only have one more stylish nit, otherwise I like it. Great to remove the confusing class and also get single-pass spanmultitermquery!\n\nCan we break this very long run-on in SpanTermQuery.buildSimWeight?\n\n\nreturn searcher.getSimilarity().computeWeight(query.getBoost(), searcher.collectionStatistics(query.getField()), stats);\n\n\n\nInstead I would rename 'stats' to 'termStats' and do maybe something like:\n\nCollectionStatistics collectionStats = searcher.collectionStatistics(...);\nreturn xxx.computeWeight(query.getBoost(), collectionStats, termStats);\n\n "
        },
        {
            "id": "comment-14565023",
            "author": "Alan Woodward",
            "date": "2015-05-29T16:21:16+0000",
            "content": "Nits appropriately picked  "
        },
        {
            "id": "comment-14565024",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T16:23:11+0000",
            "content": "Commit 1682513 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1682513 ]\n\nLUCENE-6466: Remove SpanSimilarity class and make SpanMTQWrapper single-pass "
        },
        {
            "id": "comment-14565026",
            "author": "Alan Woodward",
            "date": "2015-05-29T16:24:04+0000",
            "content": "I'll clean up LUCENE-6371 next, before we put this all back into 5.x "
        },
        {
            "id": "comment-14585763",
            "author": "Alan Woodward",
            "date": "2015-06-15T10:45:07+0000",
            "content": "Patch for branch 5x (before LUCENE-6371 is added) "
        },
        {
            "id": "comment-14585774",
            "author": "ASF subversion and git services",
            "date": "2015-06-15T10:59:52+0000",
            "content": "Commit 1685538 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685538 ]\n\nLUCENE-6466: Move SpanQuery.getSpans() and .extractWeight() to SpanWeight "
        },
        {
            "id": "comment-14713328",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:27+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}