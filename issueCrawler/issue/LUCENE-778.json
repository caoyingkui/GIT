{
    "id": "LUCENE-778",
    "title": "Allow overriding a Document",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "In our application, we have some kind of generic API that is handling how we are using Lucene. The different other applications are using this API with different semantics, and are using the Lucene fields quite differently. We wrote some usefull functions to do this mapping. Today, as the Document class cannot be overriden, we are obliged to make a document wrapper by application, ie some MyAppDocument and MyOtherAppDocument which have a property holding a real Lucene Document. Then, when MyApp or MyOtherApp want to use our generic lucene API, we have to \"get out\" the Lucene document, ie do some genericLuceneAPI.writeDoc(myAppDoc.getLuceneDocument()). This work fine, but it becomes quite tricky to use the other function of our generic API which is genericLuceneAPI.writeDocs(Collection<Document> docs).\n\nI don't know the rational behind making final Document, but removing it will allow more object-oriented code.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-01-17T10:03:29+0000",
            "content": "One reason is because \"Lucene controls the construction of Documents from Hits\":\n\n    http://www.gossamer-threads.com/lists/lucene/java-dev/31447\n\nThis issue periodically comes up, eg:\n\n    http://www.gossamer-threads.com/lists/lucene/java-dev/32733\n\nAnd there was at least this [closed, unresolved] issue from the past:\n\n    http://issues.apache.org/jira/browse/LUCENE-358 ",
            "author": "Michael McCandless",
            "id": "comment-12465403"
        },
        {
            "date": "2007-01-17T10:21:02+0000",
            "content": "Just after committing the jira issue, I just figured out that I haven't searched for topics about it. Sorry.\nBTW, thanks for the pointers.\n\nBut what my request here is not making Lucene providing customized documents, like in LUCENE-662, it is about allowing passing to writer.addDocument() a document that is extending Document, nothing more.\n\nFor instance, I would like to do something like that :\n\npublic RDFDocument extends Document {\n  public RDFDocument(String uri) \n{\n    add(new Field(\"uri\", uri); \n  }\n\n  public void addStatement(String prop, String value) \n{\n    add(new Field(prop, value));\n  }\n}\n\nShould we move this discussion to lucene-dev ? ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12465408"
        },
        {
            "date": "2007-01-17T17:24:14+0000",
            "content": "If we decide to make Document non-final, then we must document very clearly the ways in which it may be subclassed, in particular that instances returned from IndexReader.document() will not be of the subclass.\n\n> Should we move this discussion to lucene-dev ?\n\nSince Jira comments are sent to lucene-dev, I see no reason.  The mailing list may be more appropriate for discussing general, process-related issues, but for specific technical issues, Jira is usually better. ",
            "author": "Doug Cutting",
            "id": "comment-12465455"
        },
        {
            "date": "2007-01-21T19:50:00+0000",
            "content": "Doug Cutting [17/Jan/07 09:24 AM]\n> If we decide to make Document non-final, then we must document\n> very clearly the ways in which it may be subclassed, in particular\n> that instances returned from IndexReader.document() will not be \n>of the subclass. \n\n+1 for a more polymorphic Document. \n\nIn fact, I would like to introduce interfaces for all \"low level\" classes. reader, writer, modifier, term, document, et c. And  I did that that I did in Lucene-550. I've had to definalized a lot of these classes and their methods to make Lucene compliant with a number of formula 1-A patterns. ",
            "author": "Karl Wettin",
            "id": "comment-12466345"
        },
        {
            "date": "2007-02-23T22:44:22+0000",
            "content": "From email...\n\nhttp://www.nabble.com/-jira--Created%3A-%28LUCENE-778%29-Allow-overriding-a-Document-tf3026011.html\n\n: A simple solution might be a 'classname' setup for the Document\n: creation - like the default Directory implementation uses. As long as\n: the subclass has a no-arg ctor it is trivial.\n\na differnet tack on the topic: there is really no good reason why the\n\"Document\" class used for indexing data should be the same as the\n\"Document\" classs ued for returning results ... using the same class in\nthis way results in all sort of confusio abotu which methods can be called\nin which context, and frequently leads people to assume they can do safe\n\"round trips\" of their Documents ... doing a search, modifying a field\nvalue, and then re-inexing it \u2013 not considering what happens to\nnon-STOREd fields or field/document boosts.\n\nany work done to change the Document API to make it easier to subclass\nshould probably start with a seperation of these too completley different\nconcepts.\n\nOne approach off the top of my head: make an IndexableDocument interface\nfor clients to pass to IndexWriter and a \"ReturnableDocument\" class for\nIndexReader/IndexSearcher to return ... the existing Document class can\nsubclass ReturnableDocument and impliment IndexableDocument, the existing\nmethods with Document in their sig would be deprecated and replaced with\nmethods using one of these new class names\n\n...some followup comments can be found in the thread archive. ",
            "author": "Hoss Man",
            "id": "comment-12475526"
        },
        {
            "date": "2007-03-04T11:12:09+0000",
            "content": "Marker interface is a nice idea, but I think this will make Document handling more painfull. In my use case this will not be optimal.\nIn our application, we have a kind of workflow of Document. We have a big/master index which is holding every data on the system, and then we have specialized index which a part of the big one. The big one is for making big global queries on the whole data. The specialized are specialized for the end application. So the workflow is :\n\n\tfrom the raw data, make them as Document and index it in the master index\n\tfor each specialized index :\n\t\n\t\tdo the specific query on the master index\n\t\tfrom the retreived document, redecorate it with specialized indexed field\n\t\tindex the decorated documents in the specialized index\n\t\n\t\n\n\n\nHere I just have to decorate the Document retrieved form the master index. With incompatible interfaces, this won't be possible anymore. I will have to reinstanciate a Document each time and repopulate it.\nSo why not keep IndexWriter#addDocument(Document), and just change IndexReader#doc(int) to make it return a kind of DocumentWithOnlyStoredData, with DocumentWithOnlyStoredData extends Document. (the proposed named is horrible, I know !) ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12477773"
        },
        {
            "date": "2007-03-05T00:03:40+0000",
            "content": "1) from a design standpoint, as long as IndexReader/IndexSearcher deal with documents using a different interface name i nthe signature then IndexWriter, it doens't really matter what name is used \u2013 what i suggested tackles a second point: keeping the existing interface backwards compatible for the forseeable future while migrating to this modified API.\n\n2) if you are already decorating the docs you get back from your \"master index\" before adding them to your specialized indexes, then nothing i described would prevent that from continuing to work ... the bulk of your code could be example the same, you would just need a simple DecoratedDocument which impliments IndexableDocument and wraps a ReturnableDocument.\n\nsomething like that might even be a common enough use case to inlcude in the core ... anyone with a legitimate use cases for doing round trips could use it as well. ",
            "author": "Hoss Man",
            "id": "comment-12477880"
        },
        {
            "date": "2007-03-05T10:02:41+0000",
            "content": "Note that I was talking about the future API, with some deprecated functions removed. So the API will look like :\nclass IndexReader {\n  ReturnableDocument doc(int n);\n}\nclass IndexWriter {\n  void addDocument(IndexableDocument doc);\n}\n\n1) it does matter from the user point of view : we cannot do anymore writer.addDocument(reader.doc(10)).\n\n2) Effectively I can implement a DecoratedDocument. But I cannot make Lucene instanciating my own document, the reader will still return some ReturnableDocument. Unless you want to allow the user to customize in Lucene the instanciation of Document by providing a factory of Document ? ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12477962"
        },
        {
            "date": "2007-03-05T21:49:14+0000",
            "content": "\n> 1) it does matter from the user point of view : we cannot do anymore\n> writer.addDocument(reader.doc(10)).\n\n...and i argue that is precisely what we want ... it's not generally safe for people do do that now, but becuase it is so easy, they think they can.  If we change the API so that doc(int) doesn't return the same class that addDocument takes we make go out of their way a little bit and need to write something like...\n\n   writer.addDocument(new ReIndexedDocument(reader.doc(10)));\n\n...where the RedIndexedDocument class can have some good javadocs explaining what it is, when to use it, and most importantly: when it doesn't work.\n\n> 2) Effectively I can implement a DecoratedDocument. But I cannot make Lucene\n> instanciating my own document, the \n\n...i'm still not clear why you feel you need lucene to instantiate your specific class ... why wouldn't a decorator class work for the use case you describe?\n\npublic class YourDocumentWraper implements IndexableDocument {\n   public YourDocumentWraper(ReturnableDocument r, Object specialStuff) \n{\n     ...\n   }\n   public Fieldable getFieldable(String f) \n{\n     // ...check if you want special stuff, if not...\n     return r.getFieldable(f);\n  }\n}\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-12478169"
        },
        {
            "date": "2007-03-05T23:18:26+0000",
            "content": "I feel like I'm missing something in this discussion, but couldn't we just make Document non-final and add:\n\npublic void document(int n, Document doc)\n\nor even mark it as expert and call it populateDocument(int n, Document doc) or something like that\n\nThe semantics of which are to add the fields for document n to the Document object doc.  \n\nFrom the looks of the code, most of the Readers first thing in the document call is: Document result = new Document()  so it is not like we are doing some complicated construction that is optimized for the different types of readers.\n\n\n ",
            "author": "Grant Ingersoll",
            "id": "comment-12478193"
        },
        {
            "date": "2007-03-06T09:04:29+0000",
            "content": "Hoss> OK I got it.\nIn fact my concern was about \"semantic\". I agree with you that the API make the Lucene user think that every index data are retrieved while doing reader.doc(int i) (as I thought the first days using Lucene). But here you are proposing to completely separate the indexing from the retrieving, saying that they are not compatible with each other. I think this is wrong because basically you can retrieve a document and repushed the same in the index, even if it has no sense. But this was pure semantic concerns.\nNow looking at the implementation you are proposing of a \"YourDocumentWraper\", we can make it work correctly without any performance issue. So I won't make a war is a such design is implemented \n\nGrant>In fact the discussion derived from the original issue. BTW, this would be nice ! ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12478316"
        },
        {
            "date": "2007-03-06T19:36:55+0000",
            "content": "Grant: I have no serious objection to making Document non-final ... i was just pointing out that as long as we are mucking with the Document related APIs, this may be a good time to solve the perception issue people have with what a \"Document\" is ... that single container class gets used in two very different ways, and clarifying what those ways are with seperate Interfaces would be useful.  from a more parcticle standpoint, if i want to subclass Document and add custom behavior, what methods impact the way a document gets indexed?  what methods impact the behavior of returned data? ... the answers to thouse questions aren't obvious to most novice users as is \u2013 but we tend to punt on them since no one can \"replace\" a Document instance at the moment ... we'd need to be more clear about that if subclassing is allowed and DocumentFactories or passing empty Beans to IndexReader.document start being allowed.\n\nregarding your specific question about...\n   public void document(int n, Document doc) \n\n...i'm leary of that approach just because of all the places people might want it ... with FieldSelector or without; from a Searcher, or an IndexReader, or a Hits instance, etc...\n\nI'd be more in favor of adding a \"setDocumentFactory\" method on IndexReader or something like that if we went that route ... but as i said, if Document (or whatever interface/abstract class we make IndexReader.document return) isn't final, then it's not clera to me why a Decorator model wouldn't be good enough. ",
            "author": "Hoss Man",
            "id": "comment-12478532"
        },
        {
            "date": "2007-03-10T17:46:54+0000",
            "content": "Rethinking about the function \"public void document(int n, Document doc)\", in fact it will completely break the work I have done for LUCENE-662.\n\nAnd finally, I agree with you Hoss. Two different interfaces, and let the user implement the document he wants. As a first step, the user will decorate his document. And in a second time, Lucene could provide the user the possibility to have his own DocumentFactory. ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12479861"
        },
        {
            "date": "2007-11-02T09:57:07+0000",
            "content": "Maybe we should deprecate the document() methods and add\ngetStoredFields() methods that return a Map<String, Field>?\nThen we could also definalize Document. Thoughts? ",
            "author": "Michael Busch",
            "id": "comment-12539556"
        },
        {
            "date": "2007-11-02T12:55:10+0000",
            "content": "> getStoredFields() methods that return a Map<String, Field>\n\nOr a Map<String,Field[]> or Map<String,Object> where Object could be Field or Field[]\nUnless it was a LinkedHashMap, that would also lose the ordering of different fields.\n\nDocument is lightweight now...pretty much just a List<Fieldable> that the user can get directly at.\nIf anything, a factory for Fieldable (which for Field, isn't as lightweight) would be more useful than a Document factory. ",
            "author": "Yonik Seeley",
            "id": "comment-12539574"
        },
        {
            "date": "2013-03-10T13:19:30+0000",
            "content": "SPRING_CLEANING_2013 We can reopen if necessary. Think this code has been extensively re-worked anyway. ",
            "author": "Erick Erickson",
            "id": "comment-13598233"
        }
    ]
}