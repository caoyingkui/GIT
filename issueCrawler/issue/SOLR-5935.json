{
    "id": "SOLR-5935",
    "title": "SolrCloud hangs under certain conditions",
    "details": {
        "affect_versions": "4.6.1",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "As discussed in a mailing list - let's try to find the reason while under certain conditions SolrCloud can hang.\n\nI have an issue with one of the SolrCloud deployments. Six machines, a collection with 6 shards with a replication factor of 3. It all runs on 6 physical servers, each with 24 cores. We've indexed about 32 million documents and everything was fine until that point.\n\nNow, during performance tests, we run into an issue - SolrCloud hangs\nwhen querying and indexing is run at the same time. First we see a\nnormal load on the machines, than the load starts to drop and thread\ndump shown numerous threads like this:\n\n\nThread 12624: (state = BLOCKED)\n - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=186 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2043 (Compiled frame)\n - org.apache.http.pool.PoolEntryFuture.await(java.util.Date) @bci=50, line=131 (Compiled frame)\n - org.apache.http.pool.AbstractConnPool.getPoolEntryBlocking(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.pool.PoolEntryFuture) @bci=431, line=281 (Compiled frame)\n - org.apache.http.pool.AbstractConnPool.access$000(org.apache.http.pool.AbstractConnPool, java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.pool.PoolEntryFuture) @bci=8, line=62 (Compiled frame)\n - org.apache.http.pool.AbstractConnPool$2.getPoolEntry(long, java.util.concurrent.TimeUnit) @bci=15, line=176 (Compiled frame)\n - org.apache.http.pool.AbstractConnPool$2.getPoolEntry(long, java.util.concurrent.TimeUnit) @bci=3, line=169 (Compiled frame)\n - org.apache.http.pool.PoolEntryFuture.get(long, java.util.concurrent.TimeUnit) @bci=38, line=100 (Compiled frame)\n - org.apache.http.impl.conn.PoolingClientConnectionManager.leaseConnection(java.util.concurrent.Future, long, java.util.concurrent.TimeUnit) @bci=4, line=212 (Compiled frame)\n - org.apache.http.impl.conn.PoolingClientConnectionManager$1.getConnection(long, java.util.concurrent.TimeUnit) @bci=10, line=199 (Compiled frame)\n - org.apache.http.impl.client.DefaultRequestDirector.execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) @bci=259, line=456 (Compiled frame)\n - org.apache.http.impl.client.AbstractHttpClient.execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) @bci=344, line=906 (Compiled frame)\n - org.apache.http.impl.client.AbstractHttpClient.execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) @bci=21, line=805 (Compiled frame)\n - org.apache.http.impl.client.AbstractHttpClient.execute(org.apache.http.client.methods.HttpUriRequest) @bci=6, line=784 (Compiled frame)\n - org.apache.solr.client.solrj.impl.HttpSolrServer.request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser) @bci=1175, line=395 (Interpreted frame)\n - org.apache.solr.client.solrj.impl.HttpSolrServer.request(org.apache.solr.client.solrj.SolrRequest) @bci=17, line=199 (Compiled frame)\n - org.apache.solr.client.solrj.impl.LBHttpSolrServer.request(org.apache.solr.client.solrj.impl.LBHttpSolrServer$Req) @bci=132, line=285 (Interpreted frame)\n - org.apache.solr.handler.component.HttpShardHandlerFactory.makeLoadBalancedRequest(org.apache.solr.client.solrj.request.QueryRequest, java.util.List) @bci=13, line=214 (Compiled frame)\n - org.apache.solr.handler.component.HttpShardHandler$1.call() @bci=246, line=161 (Compiled frame)\n - org.apache.solr.handler.component.HttpShardHandler$1.call() @bci=1, line=118 (Interpreted frame)\n - java.util.concurrent.FutureTask$Sync.innerRun() @bci=29, line=334 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=4, line=166 (Compiled frame)\n - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=471 (Interpreted frame)\n - java.util.concurrent.FutureTask$Sync.innerRun() @bci=29, line=334 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=4, line=166 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1145 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=615 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=724 (Interpreted frame)\n\n\n\nI've checked I/O statistics, GC working, memory usage, networking and\nall of that - those resources are not exhausted during the test.\n\nHard autocommit is set to 15 seconds with openSearcher=false and\nsoftAutocommit to 4 hours. We have a fairly high query rate, but until\nwe start indexing everything runs smooth.\n\nI've attached four thread dumps, stack_1 to stack_4. They were gathered incrementally - stack_1 and stack_2 are when Solr was still able to respond, stack_3 is Solr barely alive and stack_4 is Solr not responding at all.\n\nIf more information is needed I can provide those.",
    "attachments": {
        "thread dumps.zip": "https://issues.apache.org/jira/secure/attachment/12637614/thread%20dumps.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13954527",
            "date": "2014-03-30T00:27:55+0000",
            "content": "What happens when only indexing at the same rate (same number of indexing threads, same batch size, same everything) is happening without any querying?  Any way to get things to lock up when just indexing?  Or were you never able to get things to lock up when just indexing?\n\nAnd in the indexing AND searching scenario, does the lock up happen even if indexing rate is really low while query rate is high?\n\nAnd vice versa: high indexing rate, but low query rate?\n "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-13955494",
            "date": "2014-03-31T18:31:47+0000",
            "content": "Low indexing rate and high indexing - whenever the queries are present the cluster is finally going into a locked state. When locked it doesn't respond to any requests - any queries, indexing or for example loading admin pages. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13955533",
            "date": "2014-03-31T18:58:46+0000",
            "content": "I wonder if you are hitting a connection pool limit or something. Have you been able to grab any stack traces during the hang? "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-13955540",
            "date": "2014-03-31T19:06:07+0000",
            "content": "Mark - thread dumps are attached in the zip file, made with jstack. In the archive there are - stack_1 and stack_2 when Solr was still able to respond, stack_3 is Solr barely alive (with more than 80 - 90% errors when reported by JMeter) and stack_4 is Solr not responding at all. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13955541",
            "date": "2014-03-31T19:06:19+0000",
            "content": "I wonder if you are hitting a connection pool limit or something.\n\nThat was my thought - sounds like distributed deadlock (the same reason we don't have a practical limit on the number of threads configured in jetty).\nWe should not have a connection limit for any request that could possibly cause another synchronous request to come back to us. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13955546",
            "date": "2014-03-31T19:10:22+0000",
            "content": "Mark - thread dumps are attached in the zip file,\n\nSorry - was following along via email.\n\nYeah, these are all in lease connection. Seems like a connection pool configuration issue. I think we recently exposed config for some of that to the user, but I'll have to go dig that up. "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-13955738",
            "date": "2014-03-31T21:25:29+0000",
            "content": "No problem. As for the connections issues - we've tried bumping up the maxConnectionsPerHost for shardHandlerFactory. The higher the value of maxConnectionsPerHost the faster Solr was locking.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13955958",
            "date": "2014-04-01T00:53:11+0000",
            "content": "Have you tried raising the total number of max connections?\n\nAlso, are you using the batch or streaming apis or one update per request? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13955979",
            "date": "2014-04-01T01:18:06+0000",
            "content": "Have you tried raising the total number of max connections?\n\nI think the answer is yes, but Rafal can confirm tomorrow.\n\nAlso, are you using the batch or streaming apis or one update per request?\n\nNot sure about batch vs. streaming, but I think there were 10 docs per request. "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-13956358",
            "date": "2014-04-01T10:32:30+0000",
            "content": "The test is done using JMeter with batch indexing, so no streaming here. The indexing application is not Java, so streaming is not possible in the solution. The test indexing procedure is 10 documents per JMeter thread. The documents are not small. \n\nAnd yes we tried increasing the total number of connections on the shard factory level. Should we try increasing max connections total and max connections per host on request handler level?\n "
        },
        {
            "author": "Bruno Dumon",
            "id": "comment-14016368",
            "date": "2014-06-03T10:30:04+0000",
            "content": "I ran into the same situation, and tracked it down to a connection pool limit that was hardcoded to 20, and it was fixed by doing the same change as in SOLR-5741. "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-14016373",
            "date": "2014-06-03T10:36:10+0000",
            "content": "Ahhh I forgot to close this - yes, this was exactly the same issues - the Jetty threadpool was limited and thus under certain load Solr could hang. "
        }
    ]
}