{
    "id": "SOLR-280",
    "title": "slightly more efficient SolrDocument implementation",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Following discussion in SOLR-272\n\nThis implementation stores fields as a Map<String,Object> rather then a Map<String,Collection<Object>>.  The API changes slightly in that:\n\n getFieldValue( name ) returns a Collection if there are more then one fields and a Object if there is only one.\n\ngetFirstValue( name ) returns a single value for the field.  This is intended to make things easier for client applications.",
    "attachments": {
        "SOLR-280-SolrDocument2.patch": "https://issues.apache.org/jira/secure/attachment/12360872/SOLR-280-SolrDocument2.patch",
        "SOLR-280-SolrDocument2-API-Compatibility.patch": "https://issues.apache.org/jira/secure/attachment/12360942/SOLR-280-SolrDocument2-API-Compatibility.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12509326",
            "date": "2007-06-30T20:41:19+0000",
            "content": "We could go further and store boosted values as:\n\nclass BoostedValue {\n  float boost;\n  Object value;\n} \n\nbut I think that makes the implementation to convoluted.  If we went this route, we would need to check each value before passing it back to the client. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12509431",
            "date": "2007-07-01T16:48:35+0000",
            "content": "I think one should be able to simply set a field value without a copy being made:\n\npublic Object setField(String name, Collection value)  {\n  return _fields.put(name, value);\n}\n\nOne area I'm concerned about performance is on the output side of things.\nIf we added an extension point to manipulate documents before they are written to the response, it makes sense to use SolrDocument there rather than Lucene's Document.... but we may be constructing 100 in the course of a response.  Just something to keep in mind.\n\nAnother thing to keep in mind is that if it complicates things having SolrInputDocument inherit from SolrDocument, that relationship isn't needed (is it?) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12509462",
            "date": "2007-07-01T20:40:40+0000",
            "content": "This is a new implementation where SolrInputDocument does not extend SolrDocument.  This way each can be optimized for how they are most frequently used.  \n\nThis adds:\n\npublic class SolrInputField \n{\n  final String name;\n  float boost = 1.0f;\n  Object value = null;\n}\n\nand SolrInputDocument keeps a Map<String,SolrInputField>\n\nThis still handles the distinctness bit in SolrInputDocument \u2013 there may be a way to put the SOLR-139 logic elsewhere but i'll tackle that later. "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12509588",
            "date": "2007-07-02T15:10:07+0000",
            "content": ">The API changes mostly affect solrj users. \n\nbeing one of those heavily affected users i created the attached patch to make us unaffected.  (or at least i went from a few hundred compile errors to 0)\n\nthe following methods were added back and are mostly 1-5 line wrappers to the existing methods or underlying datastructures.\n\nsetField(String, Object)\ngetFieldValue(String)\ngetFieldValues(String)\naddField(String, Object)\ngetFieldNames() \n\n\n\twill\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12509601",
            "date": "2007-07-02T15:44:40+0000",
            "content": "added in r552514\n\nthanks Will "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12509602",
            "date": "2007-07-02T15:58:38+0000",
            "content": "in rev552521, I changed the Float variables to float and default everything to 1.0.  if we have wrapper functions, this seems better then autoboxing/checking null values. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12509605",
            "date": "2007-07-02T16:06:18+0000",
            "content": "I agree... things are looking good guys! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12517589",
            "date": "2007-08-03T17:25:19+0000",
            "content": "resolving an old issue "
        }
    ]
}