{
    "id": "SOLR-8297",
    "title": "Allow join query over 2 sharded collections: enhance functionality and exception handling",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Proposal\n\nGeneral Idea\nApproach Shikha Somani's range check algorithm to the most cases\n\nJoin behavior depending on router types of joined collections\n\n\n\n tofrom \nCompositeId\nImplicit\n\n\nCompositeId\n shard range check, see table below \n allow \n\n\nImplicit\n allow \n shard to shard \n\n\n\n\n\nCompositeId to CompositeId join behaviour for certain number of shards\n\n\n\n\n tofrom \nsingle\n>1\n\n\nsingle\n allow (as is) \n allow (range check) \n\n\n>1\n allow (as is) \n per shard range check \n\n\n\n\n\nRules from the tables above\n\n\tjoining from/to CompositeId and Implicit is blindly allowed, it pick ups any collocated replica, because users who do that probably understand what they do.\n\twhen both sides are Implicit let's join shards by name. ie if request hits collectionTO_shardY_replica2 at a node, the collocated collectionFROM_shardY_replica* is expected.\n\twhen both sides are CompositeId\n\t\n\t\tfrom single shard to single shard - nobrainer, just needs collocated replica;\n\t\tfrom multiple shards to single shard - all \"from\" shards (any it's replicas) are picked for joining\n\t\tfrom single shard to multiple shards - existing SOLR-4905 functionality\n\t\tfrom multiple to multiple - generic range check algorithm\n\t\t\n\t\t\tcheck that fromField and toField are router.keys in these collections\n\t\t\ttake shard range for the current \"to\" collection replica (keep in mind that request is distributed across \"to\" collection shards)\n\t\t\tenumerate \"from\" collection shrads, find their subset which covers \"to\" shard range (this allows to handle any number of shards at both sides)\n\t\t\tpickup collocated replicas of these \"from\" shard subset\n\t\t\n\t\t\n\t\n\t\n\n\n\nCaveat \nthis is quite sensitive to shard allocation (and/or replica placement) ie failed \"from\" replica cannot be collocated with the required \"to\" shard.  \n\nInitial Description\nEnhancement based on SOLR-4905. New Jira issue raised as suggested by Mikhail Khludnev.\nA) exception handling:\nThe exception \"SolrCloud join: multiple shards not yet supported\" thrown in the function findLocalReplicaForFromIndex of JoinQParserPlugin is not triggered correctly: In my use-case, I've a join on a facet.query and when my results are only found in 1 shard and the facet.query with the join is querying the last replica of the last slice, then the exception is not thrown.\nI believe it's better to verify the nr of slices when we want to verify the  \"multiple shards not yet supported\" exception (so exception is thrown when zkController.getClusterState().getSlices(fromIndex).size()>1).\n\nB) functional enhancement:\nI would expect that there is no problem to perform a cross-core join over sharded collections when the following conditions are met:\n1) both collections are sharded with the same replicationFactor and numShards\n2) router.field of the collections is set to the same \"key-field\" (collection of \"fromindex\" has router.field = \"from\" field and collection joined to has router.field = \"to\" field)\n\nThe router.field setup ensures that documents with the same \"key-field\" are routed to the same node. \nSo the combination based on the \"key-field\" should always be available within the same node.\n\nFrom a user perspective, I believe these assumptions seem to be a \"normal\" use-case in the cross-core join in SolrCloud.\n\nHope this helps",
    "attachments": {
        "SOLR-8297.patch": "https://issues.apache.org/jira/secure/attachment/12822780/SOLR-8297.patch",
        "SOLR-8297_Latest.patch": "https://issues.apache.org/jira/secure/attachment/12864824/SOLR-8297_Latest.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-14T22:05:42+0000",
            "author": "Erick Erickson",
            "content": "Potentially related at least. At a glance, the restrictions on this particular JIRA seem to be too narrow a use-case, SOLR-7341 seems much more general purpose. ",
            "id": "comment-15194255"
        },
        {
            "date": "2016-04-13T12:23:39+0000",
            "author": "G\u00fcrkan Vural",
            "content": "For functional enhancement part condition 2 can be generalized for implicit sharding environments. Even the collection is multi sharded, at least cross core join in the same JVM should be possible. ",
            "id": "comment-15239144"
        },
        {
            "date": "2016-04-13T12:39:41+0000",
            "author": "G\u00fcrkan Vural",
            "content": "From http://wiki.apache.org/solr/Join which is referenced by current \"Join Query Parser\" wiki page:\n\"In a DistributedSearch environment, you can not Join across cores on multiple nodes. If however you have a custom sharding approach, you could join across cores on the same node.\"\nBut it is not possible after SOLR-4905 which treats fromIndex as collection in zookeeper environments:\n\n\nif (container.isZooKeeperAware()) {\n    ...\n    if (!zkController.getClusterState().hasCollection(fromIndex)) {\n       ...\n    }\n   ...\n}\n\n ",
            "id": "comment-15239168"
        },
        {
            "date": "2016-04-13T13:03:25+0000",
            "author": "Mikhail Khludnev",
            "content": "here is the updated doc https://cwiki.apache.org/confluence/display/solr/Other+Parsers#OtherParsers-JoinQueryParser ",
            "id": "comment-15239193"
        },
        {
            "date": "2016-04-27T21:35:10+0000",
            "author": "Shikha Somani",
            "content": "We have been facing this issue and the point#B is main area of concern. We have identified it's fix. To work further I would like the defect to be assigned to me so I can provide it's patch for review.\n ",
            "id": "comment-15260994"
        },
        {
            "date": "2016-04-28T10:11:55+0000",
            "author": "Mikhail Khludnev",
            "content": "I tried but it seems like only commetters can be assignee. However, patch is quite welcome!!!  ",
            "id": "comment-15261916"
        },
        {
            "date": "2016-04-29T14:26:14+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user shikhasomani opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/35\n\n    SOLR-8297 Support Join query over 2 sharded collections\n\n    If a shard is found on node and is active allow to query on it. But if multiple shards are found on same node then \"SolrCloud join: multiple shards not yet supported\" is thrown.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/shikhasomani/lucene-solr master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/35.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #35\n\n\ncommit 69214b2d00ac7106a04e22581f0ce85a4899dcba\nAuthor: Shikha Somani <shikha.somani@impetus.co.in>\nDate:   2016-04-29T02:44:02Z\n\n    SOLR-8297 Support Join query over 2 sharded collections\n\n ",
            "id": "comment-15264118"
        },
        {
            "date": "2016-04-29T20:13:20+0000",
            "author": "Mikhail Khludnev",
            "content": "To be honest, this fix exceeds my understanding of the SolrCloud. Can you extend existing DistribJoinFromCollectionTest to cover this scenario? ",
            "id": "comment-15264662"
        },
        {
            "date": "2016-04-29T20:39:00+0000",
            "author": "Shikha Somani",
            "content": "I tested this fix with various type of join like:\n\n\tsimple join between two collections (A -> B)\n\tmulti-hop join (join between A -> B -> C)\n\tmulti collection join (A -> B, A -> C) in single query\n\n\n\nEven all testcases passed with the fix. ",
            "id": "comment-15264694"
        },
        {
            "date": "2016-05-03T00:20:11+0000",
            "author": "Shikha Somani",
            "content": "Added test case to verify distributed join when secondary shard is not singly sharded but is equally sharded as primary. PR is ready for merge. ",
            "id": "comment-15267798"
        },
        {
            "date": "2016-05-03T07:47:13+0000",
            "author": "Susmit Shukla",
            "content": "This patch may not work for multiple shards hosted on the same jvm since nodename for different shards would be same. e.g. consider below configuration where maxShardsPerNode=4.\ncoll1: shard1: \n                     <ip1>:8983\n                      <ip1>:7574\n         shard2: \n                      <ip1>:8983\n                      <ip1>:7574\ncoll2: shard1: \n                      <ip1>:8983\n                      <ip1>:7574\n         shard2: \n                      <ip1>:8983\n                      <ip1>:7574\nTo fix it, I had to match the shard name + nodename ",
            "id": "comment-15268311"
        },
        {
            "date": "2016-05-03T20:27:17+0000",
            "author": "Mikhail Khludnev",
            "content": "Still exposing for the risk of missing the point... In this example query component which scatters request should be amended, ie it should issue 4 requests :\n\n\n\nrequest no.\nto\nfromIndex\n\n\n1\ncoll1: shard1: <ip1>:8983\ncoll2: shard1: <ip1>:8983\n\n\n2\ncoll1: shard1: <ip1>:8983\ncoll2: shard2: <ip1>:8983\n\n\n3\ncoll1: shard2: <ip1>:7574\ncoll2: shard1: <ip1>:7574\n\n\n4\ncoll1: shard2: <ip1>:7574\ncoll2: shard2: <ip1>:7574\n\n\n\n\nAnd for example, when it will merge responses for requests 1. and 2. document ids will clash (It might be ok, but not usual). As you can see it can be  handled on scope of query or qparser, higher layers should be involved and impacted. \nI might be wrong but this case as specific as rare, I think here we need to pursue a generic shards collocation with router.field, or so. \n ",
            "id": "comment-15269517"
        },
        {
            "date": "2016-05-04T22:48:08+0000",
            "author": "Shikha Somani",
            "content": "To avoid confusion about this fix below is a comparison between how join worked in various versions:\n\n\n\n\nSolr 4.x\nSolr 5.x\n\n\nSecondary collection can be well sharded. \nSecondary collection should be singly sharded\n\n\n\u200bSecondary collection shard/replica should be present on each node where primary collection shards are \nSecondary collection should be replicated on all nodes where primary is present\n\n\nJoin query should have core name of both the collections\nJoin query should have only collection name and not core name. Specifying core name will throw exception\n\n\n\n\n\nBecause of the above mentioned differences Solr 5.x has lost backward compatibility for join queries. Making it nearly impossible to upgrade to Solr 5.x from Solr 4.x.\n\nThe provided solution is adding backward compatibility for join queries with following conditions:\n\n\tSingle shard of both primary and secondary collection present on same node\n\tBoth primary and secondary collection should have same numShards and replicationFactor\n\n\n\nThis fix is providing backward compatibility and is not an enhancement for above requirements. If required another defect can be opened for backward compatibility support and this fix can be part of the new defect.  ",
            "id": "comment-15271577"
        },
        {
            "date": "2016-05-05T08:51:16+0000",
            "author": "Mikhail Khludnev",
            "content": "Could you briefly clarify an early observed behavior: how many shards you had in \"from\" and \"to\" collections, one or many?   ",
            "id": "comment-15272083"
        },
        {
            "date": "2016-05-05T19:37:30+0000",
            "author": "Shikha Somani",
            "content": "In Solr 4.x join queries, both \"from\" and \"to\" collections one shard was specified. \n\nReason for this is:\nIn 4.x join query was performed using HttpSolrClient on a single node at a time. Because of using HttpSolrClient exact core name has to be specified for both \"from\" and \"to\" collection. ",
            "id": "comment-15272929"
        },
        {
            "date": "2016-05-05T20:40:12+0000",
            "author": "Mikhail Khludnev",
            "content": "did you use SolrCloud just to replicate single shard collection across a few boxes? but then hit one of these nodes with HttpSolrClient?  ",
            "id": "comment-15273030"
        },
        {
            "date": "2016-05-05T22:54:36+0000",
            "author": "Shikha Somani",
            "content": "No.\nHttpSolrClient was the only way through which join queries can be done in Solr 4.x. Join query was not supported in cloud mode, it threw exception: \"Cross-core join: no such core\" ",
            "id": "comment-15273269"
        },
        {
            "date": "2016-05-06T05:33:40+0000",
            "author": "Susmit Shukla",
            "content": "I had the exact same requirement as mentioned in B) functional enhancements. I implemented it by extending the JoinQParserPlugin and registering the parser in solrconfig.xml. I don't think the solution is ready for open source yet. Two reasons for that as Eric already mentioned -\n\n\n\tEnabling sharded join where both collections have to be equally sharded and replicated on the same router.field with same hash range distribution among named shards is a narrow use case\n\tSolution is restricted to solr cloud layout where corresponding shards of 'from' and 'to' collections run in the same jvm\n\n\n\nInitially my impl was same as the above patch but it failed in a bigger deployment where multiple shards ran in same jvm. e.g it should support join for this layout-\n\ncoll1:           \u00a0\u00a0\u00a0\u00a0\u00a0                    coll2:\nshard1:<ip1>:8983   \u00a0\u00a0\u00a0\u00a0\u00a0        shard1:<ip1>:8983\nshard2:<ip1>:8983   \u00a0\u00a0\u00a0\u00a0\u00a0        shard2:<ip1>:8983\n\n\nneeded to match both shard name and node name for this case to work\noverridden two methods: findLocalReplicaForFromIndex, createParser\nto get current shard name - toShardId = queryRequest.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\nqueryRequest (SolrQueryRequest) member variable can set in the createParser \n\ntoShardId.equals(slice.getName()) should be additional condition here - if (replica.getNodeName().equals(nodeName) && replica.getState() == Replica.State.ACTIVE) ",
            "id": "comment-15273650"
        },
        {
            "date": "2016-06-13T21:29:07+0000",
            "author": "Shikha Somani",
            "content": "Below are two proposed solutions to \u201cAllow join query over 2 sharded collections\u201d i.e. fixing the broken functionality in Solr 5.x. It is not an enhancement for supporting join on multiple shards present on same jvm.\n\nProposed solution: Two possible solutions:\n1. Distributed join with Range: This will allow join with greater flexibility by considering range instead of shard name while selecting fromCollection replica. The current implementation requires fromCollection to be singly sharded, with this solution fromCollection can be either singly sharded, equally sharded (as toCollection) or it can overlap with toCollection range.\n\n\n\tSolution details: A new parameter \u201cjoinMode\u201d will be introduced. This parameter will govern on what basis replica will be selected based on range.\nPossible values of joinMode:\n\t\n\t\tExact: The \u201cfromCollection\u201d shard range should exactly match with \u201ctoCollection\u201d shard present on that node then only join will be applied between two collections. This is the default value\n\t\tOverlap: Shard range of \u201cfromCollection\u201d should overlap with \u201ctoCollection\u201d on given node.\n\t\tAny: This option will not consider range check, it will pick any replica of fromCollection that is present on that node and apply join\n\t\n\t\n\n\n\n2. Non-distributed join: The same way join worked in Solr 4.x. Client will mention exact replica of \u201cfromCollection\u201d with which join will be applied. It is required to pass  \u201cdistrib=false\u201d in query parameters\n\nIf either of the solution is fine will submit a PR for that. ",
            "id": "comment-15328320"
        },
        {
            "date": "2016-06-16T03:20:03+0000",
            "author": "Shikha Somani",
            "content": "Gentle reminder for the above proposed solution.\n\nPlease let me know your thoughts on this so I can move ahead with this solution. ",
            "id": "comment-15332988"
        },
        {
            "date": "2016-06-16T12:36:04+0000",
            "author": "Mikhail Khludnev",
            "content": "I'm Ok with Overlap, assuming that it covers Exact per se. I also prefer to keep existing single shard \"to\". \n\nI'm quite concerned about Any. The problem is to assert this behavior in test. Thus, if we have in codebase, we won't know when it stops functioning. I suggest to agree about some extension point which allow you to have Any behavior in custom QParserPlugin. What about that?    ",
            "id": "comment-15333685"
        },
        {
            "date": "2016-06-16T23:29:35+0000",
            "author": "Shikha Somani",
            "content": "Any option is introduced to support existing cloud join scenario i.e. where fromCollection is singly sharded. If asserting Any\u2019s behavior is the only concern, will write test cases for thorough verification. Below is a scenario which resembles real world and will write test case according to it.\n\nScenario: \nThere are 2 collections in a 2 node cluster:\n\n\tproduct_category: It has values like books, toys, etc. Singly sharded\n\tsale: Holds information about current sale. Sale and product collection are related, sale collection contains \u2018product key\u2019. Multi sharded\n\n\n\nQuery: Find sale information with product information:\n{!join from=id to =productKey fromCollection= product_category}\n\nCluster information:\n\n\n\n\nNode1\n\u00a0\nNode2\n\u00a0\n\n\nProduct_category_shard1_replica1\n80000000-7fffffff\nProduct_category_shard1_replica2\n80000000-7fffffff\n\n\nSale_shard1_replica1\n0-7fffffff\nSale_shard2_replica1\n80000000-ffffffff\n\n\n\n\n\nWith this scenario join can be applied between Sale and Product_category only with \u201cAny\u201d condition only otherwise range check will fail, preventing join query. ",
            "id": "comment-15334957"
        },
        {
            "date": "2016-06-17T07:50:03+0000",
            "author": "Mikhail Khludnev",
            "content": "I'm ok if Any will be restricted to fromCollection is singly sharded and from shard can be found collocated with every to shard (one of the shard's replicas). But don't you think that name Any can confuse users, it just sounds like join whatever everywhere, but actually it implies the restriction above. Can we have a name, which explicitly exposes this restriction? \nWhatever we decide to name it, I prefer to use it as a default option, and have an option to enable overlap (exact) mode for those who understand.      ",
            "id": "comment-15335617"
        },
        {
            "date": "2016-06-17T22:21:13+0000",
            "author": "Shikha Somani",
            "content": "Sure, will rename Any to avoid confusion. And will start work on this suggested solution. ",
            "id": "comment-15337112"
        },
        {
            "date": "2016-06-24T23:45:50+0000",
            "author": "Shikha Somani",
            "content": "The above discussed changes are ready and committed. Its PR https://github.com/apache/lucene-solr/pull/35\n\nSummary of changes:\n\n\tTwo possible ways of selecting fromCollection shard\n\t\n\t\tfromCollection is singly sharded get its replica on given node. Default option\n\t\tfromCollection is sharded (same as toCollection) pick replica with matching range which is present on given node.\n\t\n\t\n\tIntroduced a new parameter for indicating if range should be matched for selecting fromCollection. This is a boolean field with default value as \"false\"\n\tAdded test cases\n\n ",
            "id": "comment-15348901"
        },
        {
            "date": "2016-06-27T22:13:47+0000",
            "author": "Shikha Somani",
            "content": "Gentle reminder.\n\nPlease review above changes and merge if appropriate. ",
            "id": "comment-15351939"
        },
        {
            "date": "2016-07-07T18:05:16+0000",
            "author": "Shikha Somani",
            "content": "Please review these changes and let me know your thoughts on it. This issue is blocking our upgrade to Solr 5.x as it is directly impacting join functionality.\n\nAppreciate your quick response on this. ",
            "id": "comment-15366512"
        },
        {
            "date": "2016-08-09T12:14:27+0000",
            "author": "Mikhail Khludnev",
            "content": "squashing pull request to the single patch to simplify review   ",
            "id": "comment-15413432"
        },
        {
            "date": "2016-11-29T23:56:03+0000",
            "author": "Damien Kamerman",
            "content": "The use case is not narrow in my view. I have a sharded collection holding multiple data-sets that I wish to join on. I'm joining on the same collection.\n\nWill this patch be applied to 6.x? ",
            "id": "comment-15706971"
        },
        {
            "date": "2016-11-30T21:47:36+0000",
            "author": "Shikha Somani",
            "content": "This patch is tested on 6.x also and it can be applied to 6.x. ",
            "id": "comment-15709882"
        },
        {
            "date": "2017-04-04T21:42:42+0000",
            "author": "Mikhail Khludnev",
            "content": "Proposed the spec in the ticket description above. Opinions, concerns are quite appreciated.  ",
            "id": "comment-15955909"
        },
        {
            "date": "2017-04-24T20:06:40+0000",
            "author": "Shikha Somani",
            "content": "The proposal mentioned is fine except one point i.e. 'check that fromField and toField are router.keys in these collections'. This condition will hinder cases when routing key is different from toField/fromField. There are practical use-cases when these keys can be different. This will add SQL like restriction that join can be applied only on foreign key and foreign key has to be the primary key of the other collection.\n\nAttached is an new enhanced patch:\n\n\tReady for master branch (Solr 7)\n\tAdhering to proposal\n\tImproved test cases and well tested\n\tTaking \u2018rangeCheck\u2019 in raw parameters as well as in local parameters. This enables to join multiple (more than 2) collections having a mixed bag of composite and implicit collection\n\t\n\t\teg - toCol (composite), fromComposite (composite), fromImplicit (implicit)\n\t\tApplying join between these 3 collections, is now supported with this new patch\n\t\n\t\n\n ",
            "id": "comment-15981797"
        },
        {
            "date": "2018-07-31T11:43:49+0000",
            "author": "jyoti Tiwari",
            "content": "Hi Shikha, i need your help on one issue i am facing currently on solr4 join query.\n i am trying to make cross join query for distributed collection on cloud i.e engineeringlogs_shard1_replica1 (core1)and engineeringlogs2_shard1_replica1(core2)\u00a0 for one node, but after join querying on collection engineeringlogs2 with\u00a0engineeringlogs:\n\n{!join from=Maximum_Battery_Charge to=Maximum_Battery_Charge fromIndex=engineeringlogs_shard1_replica1}\n\nTime_Diff_Start_End_BC:\"1281\"\n\nit is giving error: Cross-core join: no such core engineeringlogs_shard1_replica1] with root cause\n\nplease help me on this issue, whether i can make this cross join query on single node on solr4.x or i need to upgrade solr version or i am making wrong solr query.\n Please help ",
            "id": "comment-16563522"
        },
        {
            "date": "2018-07-31T14:45:53+0000",
            "author": "Erick Erickson",
            "content": "Jyoti:\n\nYou'd have better luck on the Solr user's list, it's intended for usage questions whereas the JIRA system is for Solr bugs/improvements. ",
            "id": "comment-16563779"
        },
        {
            "date": "2018-07-31T15:05:43+0000",
            "author": "jyoti Tiwari",
            "content": "Erick:\n\ni guess i am fulfilling all condition to run solr join query given by you in points A) exception handling and B) functional enhancement ,\n\ndetails:\n\nsolr version: 4\n\ntotal nodes: 2\n\ntotal collection: 2, let say engineeringlogs1, engineeringlogs2\n\ntotal core in one node:\u00a0engineeringlogs1_shard1_replica1 and\u00a0engineeringlogs2_shard1_replica1\n\n\u00a0total core in 2nd node:\u00a0engineeringlogs1_shard2_replica1 and\u00a0engineeringlogs2_shard2_replica1\n\ntrying to join over over one node between two core, (engineeringlogs1_shard1_replica1 and\u00a0engineeringlogs2_shard1_replica1)\n\nquery:\n\non one default core: engineeringlogs1_shard1_replica1\n\n{!join from=Maximum_Battery_Charge to=Check_Battery_Charge fromIndex=engineeringlogs2_shard1_replica1}\nInitial_Battery_Charge: \"87%\"\n\n\u00a0\n\nbut stil this issue is coming\n\nfind below error:\n\n\"error\": { \"metadata\": [ \"error-class\", \"org.apache.solr.common.SolrException\", \"root-error-class\", \"org.apache.solr.common.SolrException\" ], \"msg\": \"Cross-core join: no such core engineeringlogs2_shard1_replica1\", \"code\": 400 } }\n\nPlease get me a solution how i can resolve this issue.\n\n\u00a0 ",
            "id": "comment-16563802"
        },
        {
            "date": "2018-08-10T10:57:11+0000",
            "author": "Mikhail Khludnev",
            "content": "jyoti Tiwari, you probably might try fromIndex=engineeringlogs2 ",
            "id": "comment-16576100"
        },
        {
            "date": "2018-08-10T11:07:00+0000",
            "author": "boxbe-notifications@boxbe.com",
            "content": "Hello Mikhail Khludnev (JIRA),\n\nYour message \"[jira] [Commented] (SOLR-8297) Allow join query over 2 sharded collections: enhance functionality and exception handling\" to me was waitlisted.\n\nGet your message to my inbox by clicking the following link.\n\n\nhttps://www.boxbe.com/crs?tc_serial=42004022853&tc_rand=760964287&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=003\n\n\n  Thank you,\n  jyotitiwari609@gmail.com\n\nP.S. ...you'll only have to do this once. Future emails will appear immediately in my inbox.\n\nSupercharge your Email\nVisit http://www.boxbe.com/how-it-works?tc_serial=42004022853&tc_rand=760964287&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=003\n\n\nBoxbe, Inc. | 65 Broadway, Suite 601 | New York, NY 10006\nPrivacy Policy: http://www.boxbe.com/privacy | Unsubscribe: http://www.boxbe.com/unsubscribe ",
            "id": "comment-16576115"
        },
        {
            "date": "2018-08-10T11:26:00+0000",
            "author": "boxbe-notifications@boxbe.com",
            "content": "Hello boxbe-notifications@boxbe.com (JIRA),\n\nYour message \"[jira] [Commented] (SOLR-8297) Allow join query over 2 sharded collections: enhance functionality and exception handling\" to me was waitlisted.\n\nGet your message to my inbox by clicking the following link.\n\n\nhttps://www.boxbe.com/crs?tc_serial=42004653105&tc_rand=1269770423&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=003\n\n\n  Thank you,\n  jyotitiwari609@gmail.com\n\nP.S. ...you'll only have to do this once. Future emails will appear immediately in my inbox.\n\nSupercharge your Email\nVisit http://www.boxbe.com/how-it-works?tc_serial=42004653105&tc_rand=1269770423&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=003\n\n\nBoxbe, Inc. | 65 Broadway, Suite 601 | New York, NY 10006\nPrivacy Policy: http://www.boxbe.com/privacy | Unsubscribe: http://www.boxbe.com/unsubscribe ",
            "id": "comment-16576128"
        },
        {
            "date": "2018-08-10T11:43:00+0000",
            "author": "boxbe-notifications@boxbe.com",
            "content": "Hello boxbe-notifications@boxbe.com (JIRA),\n\nYour message \"[jira] [Commented] (SOLR-8297) Allow join query over 2 sharded collections: enhance functionality and exception handling\" to me was waitlisted.\n\nGet your message to my inbox by clicking the following link.\n\n\nhttps://www.boxbe.com/crs?tc_serial=42005237516&tc_rand=1844341005&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=003\n\n\n  Thank you,\n  jyotitiwari609@gmail.com\n\nP.S. ...you'll only have to do this once. Future emails will appear immediately in my inbox.\n\nSupercharge your Email\nVisit http://www.boxbe.com/how-it-works?tc_serial=42005237516&tc_rand=1844341005&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=003\n\n\nBoxbe, Inc. | 65 Broadway, Suite 601 | New York, NY 10006\nPrivacy Policy: http://www.boxbe.com/privacy | Unsubscribe: http://www.boxbe.com/unsubscribe ",
            "id": "comment-16576151"
        },
        {
            "date": "2018-08-10T12:01:00+0000",
            "author": "boxbe-notifications@boxbe.com",
            "content": "Hello boxbe-notifications@boxbe.com (JIRA),\n\nYour message about \"[jira] [Commented] (SOLR-8297) Allow join query over 2 sharded collections: enhance functionality and exception handling\" \nhas been waitlisted.  \n\nPlease add yourself to my Boxbe Guest List so your messages will \ngo to my Inbox. \n\nClick the link below to be added:\nhttps://www.boxbe.com/crs?tc_serial=42005862190&tc_rand=1440666013&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=002\n\n\n  Thank you,\n  jyotitiwari609@gmail.com\n\n\nPowered by Boxbe \u2013 \"End Email Overload\"\nVisit http://www.boxbe.com/how-it-works?tc_serial=42005862190&tc_rand=1440666013&utm_source=stf&utm_medium=email&utm_campaign=CN_STDW&utm_content=002\n\nBoxbe, Inc. | 65 Broadway, Suite 601 | New York, NY 10006\nPrivacy Policy: http://www.boxbe.com/privacy | Unsubscribe: http://www.boxbe.com/unsubscribe ",
            "id": "comment-16576178"
        },
        {
            "date": "2018-08-10T12:19:00+0000",
            "author": "boxbe-notifications@boxbe.com",
            "content": "Hello boxbe-notifications@boxbe.com (JIRA),\n\nYou will not receive any more courtesy notices from our members \nfor two days. Messages you have sent will remain in a lower \npriority mailbox for our member to review at their leisure.\n\nFuture messages will be more likely to be viewed if you are on \nour member's priority Guest List.\n\n\n  Thank you,\n  jyotitiwari609@gmail.com\n\n\nPowered by Boxbe \u2013 \"End Email Overload\"\nVisit http://www.boxbe.com/how-it-works?tc_serial=42006490047&tc_rand=1573718456&utm_source=stf&utm_medium=email&utm_campaign=CN_MNC&utm_content=002\n\nBoxbe, Inc. | 65 Broadway, Suite 601 | New York, NY 10006\nPrivacy Policy: http://www.boxbe.com/privacy | Unsubscribe: http://www.boxbe.com/unsubscribe ",
            "id": "comment-16576201"
        }
    ]
}