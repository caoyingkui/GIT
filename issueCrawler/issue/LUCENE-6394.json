{
    "id": "LUCENE-6394",
    "title": "Add two-phase support to SpanNotQuery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "This query is actually a lot like SpanPositionCheckQuery, except it checks that each inclusion Spans does not come near the exclusion side.\n\nTwo-phase iteration should just work the inclusion side, deferring positions (the overlap checking against exclusion) until necessary.",
    "attachments": {
        "LUCENE-6394.patch": "https://issues.apache.org/jira/secure/attachment/12723299/LUCENE-6394.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14480961",
            "author": "Robert Muir",
            "date": "2015-04-06T05:56:04+0000",
            "content": "Here is a patch. I think it simplifies SpanNot a great deal.\n\nBasically we fold more logic from SpanPositionCheck into FilterSpans, and SpanNot uses that too.\n\nMost methods in FilterSpans (nextDoc, nextStartPosition, two-phase support, etc) become final methods, it only has one abstract method:\n\n\n/**\n * A {@link Spans} implementation wrapping another spans instance,\n * allowing to filter spans matches easily by implementing {@link #accept}\n */\npublic abstract class FilterSpans extends Spans {\n...\n  /** \n   * Returns YES if the candidate should be an accepted match,\n   * NO if it should not, and NO_MORE_IN_CURRENT_DOC if iteration\n   * should move on to the next document.\n   */\n  protected abstract AcceptStatus accept(Spans candidate) throws IOException;\n\n\n "
        },
        {
            "id": "comment-14480994",
            "author": "Robert Muir",
            "date": "2015-04-06T06:40:57+0000",
            "content": "Updated patch. its a little better, when the 'exclude' part has an approximation, we will use it.\n\nI need to refactor the logic again though, currently it uses a hack which is not great for its \"advanceExact\" logic:\n\n\nif (excludeApproximation.advance(candidate.docID()) != candidate.docID()) {\n  return AcceptStatus.YES;\n} else if (!excludeTwoPhase.matches()) {\n  excludeApproximation.nextDoc(); // move off this doc, we don't match.\n  return AcceptStatus.YES;\n}\n\n\n\nWe should just track an int or something instead, moving off the document with nextDoc() is not as efficient (we might never need it). "
        },
        {
            "id": "comment-14481004",
            "author": "Robert Muir",
            "date": "2015-04-06T06:54:01+0000",
            "content": "Updated patch removing the hack, and refactoring the logic. I thought it would be trickier... "
        },
        {
            "id": "comment-14485222",
            "author": "Adrien Grand",
            "date": "2015-04-08T13:22:55+0000",
            "content": "I like the patch, two minor things that got me wondering while reading the patch:\n\n\tShould SpansCell still extend FilterSpans and return always YES? This would avoid reimplementing Spans from scratch?\n\tIt took me some time to compile how FilterSpans.twoPhaseCurrentDocMatches works, with its infinite loop, conditional fallthrough, etc. maybe it could be written in a more straightforward way?\n\n "
        },
        {
            "id": "comment-14485227",
            "author": "Robert Muir",
            "date": "2015-04-08T13:27:38+0000",
            "content": "\nShould SpansCell still extend FilterSpans and return always YES? This would avoid reimplementing Spans from scratch?\n\nDefinitely not. Its not really filtering the spans at all. it is just a wrapper. if we want a class for wrapping lets do that separately.\n\n\nIt took me some time to compile how FilterSpans.twoPhaseCurrentDocMatches works, with its infinite loop, conditional fallthrough, etc. maybe it could be written in a more straightforward way?\n\nThis code is moved verbatim from SpanPositionCheck.PositionCheckSpan here, so it can be reused instead of duplicated. Can we refactor it in a separate issue? \n\nMy approach here is just removing complex duplicate code that all does the same thing. I realize its exciting that spans are now \"unblocked\" after paul's big rework , but we need to tackle things incrementally. "
        },
        {
            "id": "comment-14485231",
            "author": "Adrien Grand",
            "date": "2015-04-08T13:31:52+0000",
            "content": "Can we refactor it in a separate issue? \n\nI have no objections. "
        },
        {
            "id": "comment-14485427",
            "author": "Michael McCandless",
            "date": "2015-04-08T15:53:05+0000",
            "content": "+1, I like how SpanNotQuery just shares FilterSpans now. "
        },
        {
            "id": "comment-14485509",
            "author": "Paul Elschot",
            "date": "2015-04-08T16:47:25+0000",
            "content": "This nicely allows to share code between SpanPositionCheck and SpanNot, leaving the SpanNot here simpler than the one I put at LUCENE-6373, so I'd rather have this one. "
        },
        {
            "id": "comment-14485529",
            "author": "Robert Muir",
            "date": "2015-04-08T16:56:32+0000",
            "content": "Thanks for looking Paul.\n\nActually those imports are used. Its because AcceptStatus is on FilterSpans now, so those subclasses needed to import it.  "
        },
        {
            "id": "comment-14485534",
            "author": "Paul Elschot",
            "date": "2015-04-08T16:58:43+0000",
            "content": "Sorry, my correction crossed your answer. "
        },
        {
            "id": "comment-14491495",
            "author": "Robert Muir",
            "date": "2015-04-12T14:39:45+0000",
            "content": "I found an unrelated bug in SpanNear to this patch when testing, LUCENE-6418 "
        },
        {
            "id": "comment-14491510",
            "author": "ASF subversion and git services",
            "date": "2015-04-12T15:07:26+0000",
            "content": "Commit 1673016 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1673016 ]\n\nLUCENE-6394: Add two-phase support to SpanNotQuery "
        },
        {
            "id": "comment-14491525",
            "author": "ASF subversion and git services",
            "date": "2015-04-12T15:27:33+0000",
            "content": "Commit 1673021 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1673021 ]\n\nLUCENE-6394: Add two-phase support to SpanNotQuery "
        },
        {
            "id": "comment-14586812",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:42:53+0000",
            "content": "Bulk close for 5.2.0. "
        }
    ]
}