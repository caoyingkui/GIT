{
    "id": "SOLR-5528",
    "title": "Change New Suggester Response and minor cleanups",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be nice to have a simplified response format for the new Suggester Component. \nThe proposed format is as follows:\nXML: \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n   <lst name=\"responseHeader\">\n      <int name=\"status\">0</int>\n      <int name=\"QTime\">32</int>\n   </lst>\n   <str name=\"command\">build</str>\n   <lst name=\"suggest\">\n      <lst name=\"ele\">\n         <int name=\"numFound\">1</int>\n         <arr name=\"suggestions\">\n            <lst>\n               <str name=\"term\">electronics and computer1</str>\n               <long name=\"weight\">2199</long>\n               <str name=\"payload\" />\n            </lst>\n         </arr>\n      </lst>\n   </lst>\n</response>\n\n\nJSON:\n\n{\n    \"responseHeader\": {\n        \"status\": 0,\n        \"QTime\": 30\n    },\n    \"command\": \"build\",\n    \"suggest\": {\n        \"ele\": {\n            \"numFound\": 1,\n            \"suggestions\": [\n                {\n                    \"term\": \"electronics and computer1\",\n                    \"weight\": 2199,\n                    \"payload\": \"\"\n                }\n            ]\n        }\n    }\n}",
    "attachments": {
        "SOLR-5528.patch": "https://issues.apache.org/jira/secure/attachment/12616957/SOLR-5528.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Areek Zillur",
            "id": "comment-13838761",
            "date": "2013-12-04T09:23:03+0000",
            "content": "Initial patch:\n\n\tresponse format change\n\tadd more strict namedList type\n\tfix log messages/ error messages\n\trenamed DistributedSuggesterComponentTest to DistributedSuggestComponenetTest\n\texpose sizeInBytes method for extensibility\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13838861",
            "date": "2013-12-04T13:06:47+0000",
            "content": "Areek:\n\nAs luck would have it, a client noticed that you can string two or more suggesters together by listing multiple components in the request handler <components> section.. I posted a detailed account on the dev list. This allows getting suggestions from multiple fields (or whatever components you define) in separate sections of the response. I'm not that sure whether this is intended behavior or serendipitous. \n\nThe crux of the matter is that I can see it being useful to return the name of the component in the suggest section, perhaps a sibling to \"numFound\"  it would help disambiguate the response and might help with distributed processing. But I'm guessing on this last.\n\nIf we're changing the response format anyway, do you see any harm in putting this added bit in? I hacked a very quick test in by changing toNamedList in SpellCheckComponent, adding getName() to the call, like this:\n\nNamedList suggestions = toNamedList(getName(), [all the rest of the parameters just as now]).\n\nthen adding the string from getName() in to the named list. getName(), of course, is just the bits from\n{{\n    <arr name=\"components\">\n      <str>name</str>\n      <str>features</str>\n    </arr>\n}}\n\ni.e. \"name\" and \"features\" in this example.\n\nFWIW,\nErick "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13838971",
            "date": "2013-12-04T15:16:56+0000",
            "content": "Erick: Areek isn't referring to spellcheckcomponent here.\n\nThis is about the new suggestcomponent. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13838992",
            "date": "2013-12-04T15:37:56+0000",
            "content": "Robert:\n\nI think it's the same consideration though. The new suggester subclasses SearchComponent. You can define multiple SearchComponents in a requestHandler \"components\" section and they'd be added to the response as separate sections. So adding the name to the section added by each component would help identify where it came from and you wouldn't have to rely on order and \"meta knowledge\" of the order defined in solrconfig.xml. I suspect processing distributed suggestions would be more robust too, but that's just a SWAG.\n\nI'm not insisting on this mind you, but I was just looking at this and it seems like there's no downside and potential upside so I wanted to suggest it. The fact that I put my code in SpellCheckComponent was just illustrative. Although it could go there too if it's not a back-compat issue I suppose. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13838998",
            "date": "2013-12-04T15:41:44+0000",
            "content": "I dont think there is a real use case for multiple suggesters Erick. That sounds like a bad way to solve some other problem.\n\n I dont think we should complicate the format with this stuff.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13839372",
            "date": "2013-12-04T21:56:52+0000",
            "content": "bq: I don't think there is a real use case for multiple suggesters\n\nHere are two:\n\n1> You want to get suggestions from more than one field without bloating your index by copying all the fields into a single \"suggest\" field. Without making multiple requests. I've seen this go by on the user's list multiple times.\n\n2> You want to display suggestions from different fields differently, say giving more weight to ones from \"title\". \n\nAs for complexity, I don't see how adding one field to the response that may be ignored is adding much in the way of complexity, but then I'm not doing the work so....\n\nAll the rest is supported OOB, so the use-cases are realizable even now without adding the name of the component. Adding the name seems useful though. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13839651",
            "date": "2013-12-05T01:31:26+0000",
            "content": "I'm not sure: it seems like such use cases can be dealt with properly by stuff like LUCENE-5350 ?\n\nRemember: this isnt spellcheck. so \"bloating the index\" doesnt really exist. Its FSTs. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13839717",
            "date": "2013-12-05T02:38:27+0000",
            "content": "bq: Remember: this isnt spellcheck. so \"bloating the index\" doesnt really exist. Its FSTs.\n\nWell, you have to copy all the individual fields into an extra field upon which you build the FST if you do the \"copy all fields you want to contribute to suggestions into a common field and suggest on that\" work-around for getting suggestions from multiple fields.\n\nAbout LUCENE-5350. Hmmm, interesting. I'm not entirely sure what the possibilities are there. On a very quick glance it looks like complimentary but not the same cases. But I could very well be mistaken.\n\nNone of this is new capability, it's all do-able by relying on the position of the returned sections of the suggest parts of the response to be in the same order as the components of the suggest request handler were defined in the present code. It's just about adding one more bit to the suggester response to make it easier to identify which component generated that section, that's all.\n\nI don't much like relying on position and the loose coupling between the order of elements in the component chain and the order of the suggest sections in the response. I guess that if we're willing to guarantee that ordering in this and future releases, then the current capabilities will work robustly. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13839777",
            "date": "2013-12-05T03:54:37+0000",
            "content": "Sorry for the joining so late in the discussion!\n\nMy thoughts: \n\n\tI think using several suggest component to solve any use case is not ideal! The same use cases (as mentioned by Erick) can be solved if there was a way to get suggestions from multiple dictionaries at one go.\n\n\n\nSo in order to fulfill these use-cases, I believe we should allow users to 'query' multiple suggesters in one <b>single</b> component.\n\nExample config:\n\n<searchComponent class=\"solr.SuggestComponent\" name=\"suggest\">\n    <lst name=\"suggester\">\n      <str name=\"name\">name_suggester</str>\n      <str name=\"lookupImpl\">FuzzyLookupFactory</str>\n      <str name=\"dictionaryImpl\">DocumentDictionaryFactory</str>\n      <str name=\"field\">cat</str>\n      <str name=\"weightField\">price</str>\n      <str name=\"storeDir\">suggest_fuzzy_doc_dict_payload</str>\n      <str name=\"suggestAnalyzerFieldType\">text</str>\n      <str name=\"buildOnCommit\">true</str>\n    </lst>\n\n    <lst name=\"suggester\">\n      <str name=\"name\">feature_suggester</str>\n      <str name=\"dictionaryImpl\">DocumentExpressionDictionaryFactory</str>\n      <str name=\"lookupImpl\">FuzzyLookupFactory</str>\n      <str name=\"field\">cat</str>\n      <str name=\"weightExpression\">((price * 2) + weight)</str>\n      <str name=\"sortField\">weight</str>\n      <str name=\"sortField\">price</str>\n      <str name=\"storeDir\">suggest_fuzzy_doc_expr_dict</str>\n      <str name=\"suggestAnalyzerFieldType\">text</str>\n      <str name=\"buildOnCommit\">true</str>\n    </lst>\n  </searchComponent>\n\n\nAnd then the user can query as follows:\n \n /suggest?suggest.q=blah&suggest.dictionary=name_suggester&suggest.dictionary=feature_suggester \n\n\nIn order for the user to distinguish the suggestions, we can change the response format to: \n\n{\n    \"responseHeader\": {\n        \"status\": 0,\n        \"QTime\": 30\n    },\n    \"suggest\": {\n        name_suggester: {\n            \"ele\": {\n            \"numFound\": 1,\n            \"suggestions\": [\n                {\n                    \"term\": \"electronics and computer1\",\n                    \"weight\": 2199,\n                    \"payload\": \"\"\n                }\n            ]\n        }\n    },\n        feature_suggester: {\n            \"ele\": {\n            \"numFound\": 1,\n            \"suggestions\": [\n                {\n                    \"term\": \"electronics and computer1\",\n                    \"weight\": 2199,\n                    \"payload\": \"\"\n                }\n            ]\n        }\n    }\n    }\n}\n\n\n\nBy making sure this is done in the component level (single not multiple), we can also ensure that it will work in all cases that it should (distributed).\n\nThere is some changes necessary to support the proposed way, besides just the response format. Hence, I believe it should be done in a separate jira (will create and upload the patch soon).\nI also dont intend to add this to the old suggester (based on spellcheck component) as the component is doing too many things already .\n\nThoughts? "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13839990",
            "date": "2013-12-05T10:06:41+0000",
            "content": "I created and uploaded the patch (SOLR-5529) which will allow users to specify multiple suggesters within a suggesterComponent. It should work in standalone and distributed mode. It was more work than I thought but hopefully it will take care of the use-cases, while letting a single component manage the state. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13840058",
            "date": "2013-12-05T12:51:31+0000",
            "content": "Areek:\n\nThat works for me!\n\nMy suggestions (pun intended) were leveraging off the fact that it \"just works\" now, it would be the minimum effort to add in the name. That said, I wasn't really happy with the fact that the \"name\" elements had to be the same for the different components or you get a mysterious NPE (<str name=\"name\">suggest</str>). That indicated that this wasn't thought-out, just happenstance and thus quite possibly fragile.\n\nBut I can't put the effort into finding out why or fixing in the near future, so I was punting. Your idea is much cleaner and I'll be happy to help work on it...when I can which won't be for some time.\n\nGo for it!\n\nErick "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13840524",
            "date": "2013-12-05T20:22:04+0000",
            "content": "Hey Erick, just to be clear the patch for the proposal is already ready (SOLR-5529). The only thing is the other patch depends on this patch to be checked in (due to its reliance on the new suggester response format). I will stress again that these changes are only for the NEW suggester component. you can help out by reviewing it  "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13841101",
            "date": "2013-12-06T08:35:56+0000",
            "content": "NOTE: I mistakenly referred to SOLR-5528 (current jira) instead of the intended SOLR-5529. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13849364",
            "date": "2013-12-16T17:32:28+0000",
            "content": "Patch looks good Areek. I'll commit later today if there are no objections. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13851075",
            "date": "2013-12-17T23:14:13+0000",
            "content": "Commit 1551753 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1551753 ]\n\nSOLR-5528: improve response format of the new SuggestComponent "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13851098",
            "date": "2013-12-17T23:39:55+0000",
            "content": "Commit 1551759 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1551759 ]\n\nSOLR-5528: improve response format of the new SuggestComponent "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13851101",
            "date": "2013-12-17T23:40:29+0000",
            "content": "Thanks Areek! "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13851102",
            "date": "2013-12-17T23:41:36+0000",
            "content": "Thanks for committing this! "
        },
        {
            "author": "David Smiley",
            "id": "comment-14028475",
            "date": "2014-06-11T22:10:53+0000",
            "content": "I noticed this Suggester isn't documented in the Ref Guide.  Also, are there any use-cases addressed by the older Suggester approach that uses the Spellcheck component? "
        }
    ]
}