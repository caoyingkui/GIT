{
    "id": "SOLR-9135",
    "title": "SystemInfoHandler can poison / consume Jetty thread pool",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "We are running solr 6.0.0 in solr cloud mode within a docker container.  We encountered an issue whereby the SystemInfoHandler was forking out processes that would immediately enter D (uninterruputable sleep) due to a container volume issue after hitting the admin manager in a browser.  The thread stays in runnable state:\n\n\n\"qtp43368234-13611\" #13611 prio=5 os_prio=0 tid=0x00007f0260011800 nid=0x36fb ru\nnnable [0x00007efa0bce1000]\n   java.lang.Thread.State: RUNNABLE\n        at java.lang.UNIXProcess.forkAndExec(Native Method)\n        at java.lang.UNIXProcess.<init>(UNIXProcess.java:248)\n        at java.lang.ProcessImpl.start(ProcessImpl.java:134)\n        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)\n        at java.lang.Runtime.exec(Runtime.java:620)\n        at java.lang.Runtime.exec(Runtime.java:450)\n        at java.lang.Runtime.exec(Runtime.java:347)\n        at org.apache.solr.handler.admin.SystemInfoHandler.execute(SystemInfoHan\ndler.java:244)\n        at org.apache.solr.handler.admin.SystemInfoHandler.getSystemInfo(SystemI\nnfoHandler.java:198)\n        at org.apache.solr.handler.admin.SystemInfoHandler.handleRequestBody(Sys\ntemInfoHandler.java:111)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandl\nerBase.java:155)\n        at org.apache.solr.handler.admin.InfoHandler.handleRequestBody(InfoHandl\ner.java:86)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandl\nerBase.java:155)\n        at org.apache.solr.servlet.HttpSolrCall.handleAdminRequest(HttpSolrCall.\njava:658)\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:441)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilte\nr.java:229)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilte\nr.java:184)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(Servlet\nHandler.java:1668)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java\n:581)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.j\nava:143)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.jav\na:548)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandl\ner.java:226)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandl\ner.java:1160)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:\n511)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandle\nr.java:185)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandle\nr.java:1092)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.j\nava:141)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(Cont\nextHandlerCollection.java:213)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerColl\nection.java:119)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper\n.java:134)\n        at org.eclipse.jetty.server.Server.handle(Server.java:518)\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.jav\na:244)\n        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(Abstra\nctConnection.java:273)\n        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n        at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoin\nt.java:93)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceA\nndRun(ExecuteProduceConsume.java:246)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(Exec\nuteProduceConsume.java:156)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPoo\nl.java:654)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool\n.java:572)\n        at java.lang.Thread.run(Thread.java:745)\n\n\n\nThe problematic command being executed was 'uname -a'.  The admin manager would throw up a \"Lost connection to solr\" message but presumably retries the connection periodically (at least a couple of times a minute).  Before we figured out what was going on, we had 600+ threads in D state:\n\n\n4433 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4434 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4439 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4440 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.04 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4461 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4462 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4467 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4470 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4486 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4487 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.06 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4488 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4489 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4496 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4497 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\n4501 solr 20 0 0.399t 0.105t 0.057t D 0.0 86.2 0:00.00 /usr/lib/jvm/java-8-oracle/bin/java -server -Xms48g -Xmx48g -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThre+\netc.\n\n\n\nAn OS exec call is a bit heavy for loading the admin page...  Might you consider either:\n\n\tload this info once at startup and store\n\tuse a collapsed panel for display and fetch only on expansion / request",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-21T17:39:19+0000",
            "author": "Shawn Heisey",
            "content": "Ronald Braun, If you log on as the user that is running Solr and type \"uname -a\" yourself within the container, does it return quickly?   If not, there may be some problem specific to your setup.\n\nEven if the root of the problem you are seeing is unique to your setup and you can fix it outside of Solr, running external processes (which the SystemInfoHandler currently does) seems like a really bad idea in general.\n\nFor Linux, /proc/version and /proc/runtime can provide nearly identical information to that requested by running external processes.  If the processor architecture is desired, there are likely other /proc endpoints that can be used.  These /proc files likely won't work on free operating systems other than Linux, or genetic UNIX systems like Solaris.\n\n\nelyograg@sauron:~$ uname -a\nLinux sauron 4.2.0-35-generic #40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nelyograg@sauron:~$ cat /proc/version\nLinux version 4.2.0-35-generic (buildd@lgw01-58) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016\nelyograg@sauron:~$ cat /proc/uptime\n3326236.35 9503419.17\n\n ",
            "id": "comment-15295149"
        },
        {
            "date": "2016-05-21T18:08:31+0000",
            "author": "Shawn Heisey",
            "content": "System properties may return most of what a typical user is likely to want to know:\n\n\nLinux:\n\njava.class.version: 52.0\njava.home: /usr/lib/jvm/java-8-oracle/jre\njava.version: 1.8.0_77\njava.vm.name: Java HotSpot(TM) 64-Bit Server VM\njava.vm.vendor: Oracle Corporation\njava.vm.version: 25.77-b03\nos.arch: amd64\nos.name: Linux\nos.version: 4.2.0-35-generic\n\n\n\n\nWindows:\n\njava.class.version: 52.0\njava.home: C:\\Program Files\\Java\\jre1.8.0_92\njava.version: 1.8.0_92\njava.vm.name: Java HotSpot(TM) 64-Bit Server VM\njava.vm.vendor: Oracle Corporation\njava.vm.version: 25.92-b14\nos.arch: amd64\nos.name: Windows 10\nos.version: 10.0\n\n\n\nThe system uptime cannot be retrieved using pure Java ... but I'm not sure that this information is really needed.  The JVM uptime (which is easy to get) should be enough.  If an admin really wants to know how long the operating system has been up, Solr is not the natural choice to learn that information, and it usually will have no bearing on Solr's operation. ",
            "id": "comment-15295168"
        },
        {
            "date": "2016-05-25T17:11:10+0000",
            "author": "Ronald Braun",
            "content": "I can do a \"uname -a\" successfully if I ssh into the running container and try it.  It seems that the container state is such that any exec attempted by solr itself fails (the process enters immediate D state), after which the admin page hangs for a few seconds before timing out and trying again.  This is almost certainly a by-product of a problematic setup on our part which we are sorting out.  My main concern was that the admin was forking the external process to begin with on a simple admin page load, and that if it failed, it was continuing to try it ad infinitum, thus consuming our process pool and blocking any ability to access admin functions.  It seems like an unnecessary coupling to external system state given the data being fetched, best avoided. ",
            "id": "comment-15300443"
        }
    ]
}