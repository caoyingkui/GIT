{
    "id": "SOLR-10678",
    "title": "Clustering can be executed multiple times in distributed mode",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "As reported on SO: http://stackoverflow.com/questions/43877284/how-does-solr-clustering-component-work/43937064#43937064",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-12T12:01:15+0000",
            "content": "My current understanding of what's going on is that we indeed run the clustering on each request in process; in distributed mode we then complete the processing in finishStage and run clustering again if:\n\nif (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n\n\nwe could avoid running the clustering handler for distributed requests, but ResponseBuilder.isDistrib is package-private \u2013 is there any other way to determine whether it's a distributed request or not? Can I make this information public by adding .isDistributed to ResponseBuilder? Not too familiar with distributed mode, so looking for feedback. ",
            "author": "Dawid Weiss",
            "id": "comment-16008017"
        },
        {
            "date": "2017-05-12T12:13:46+0000",
            "content": "I don't know much about clustering but it seems that clustering is run on finishStage only if clustering.results=true which is supposed to perform clustering on the returned search results. If so, I think the fix should be the other way round i.e. you should skip clustering the search results from the process method on a distributed request but continue to perform the clustering in finishState as it is done today. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16008032"
        },
        {
            "date": "2017-05-12T19:33:02+0000",
            "content": "Clustering should run when the search results are collected. In normal mode, this happens in process (as the tests show), but in distributed mode (as I assume and partially confirmed by running the distrib. tests) the search request is routed to collect the results, each shard calls process and then everything is collected in finishStage. Since we don't need to run clustering on each shard, only once the results are collected, I think we can skip clustering in process if we're sure it's part of a distributed request that will eventually be finalized in finishStage.\n\nBut all the above is based on my vague understanding of how it works internally, so I'd like to get some confirmation that it's actually correct before I try to change the code. ",
            "author": "Dawid Weiss",
            "id": "comment-16008598"
        },
        {
            "date": "2017-05-12T21:31:54+0000",
            "content": "> is there any other way to determine whether it's a distributed request or not\nIf you need different behaviours, I think that's what using the different methods process and distributedProcess is intended to do for you.\n\nYou should also be able to check SolrParams.getBool(\"distrib\") - true for top level, false for sub-requests. ",
            "author": "Mike Drob",
            "id": "comment-16008716"
        },
        {
            "date": "2017-05-15T08:57:01+0000",
            "content": "But all the above is based on my vague understanding of how it works internally, so I'd like to get some confirmation that it's actually correct before I try to change the code.\n\nYes that sounds correct. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16010187"
        },
        {
            "date": "2017-05-15T11:21:04+0000",
            "content": "I looked at it, here's a summary of my findings. \n\n1. Clustering isn't currently run twice in distributed mode, so this is a non-issue functionally. This is so because a distributed request goes through modifyRequest and ClusteringComponent removes itself (by disabling the clustering attribute) from subsequent shard requests:\n\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n\n\n\nThis is then checked in process:\n\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n\n\n2. What confused me a lot was why process is invoked during the distributed test (and why the test was executed so darn many times). Turned out it's because of the default ShardsRepeatRule and this gem inside inside BaseDistributedSearchTestCase:\n\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n    params.remove(\"distrib\");\n\n\n\nSo the distributed test is running a forced-non-distributed request first, followed by the distributed request, hence the confusing logs. ",
            "author": "Dawid Weiss",
            "id": "comment-16010338"
        }
    ]
}