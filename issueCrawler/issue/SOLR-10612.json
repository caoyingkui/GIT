{
    "id": "SOLR-10612",
    "title": "make ':toclevels:' work in our jekyll templates",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "documentation"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "6.6",
            "6.7",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "asciidoc has a concept called :toclevels: which is suppose to determine which how deep down a page's section/header depth the generated table of contents will show \u2013 ie: some LONG pages have a huge number of level 2 headings, and on those pages we only want to show level 1.\n\nbut in jekyll, asciidoctor isn't responsible for generating the TOC \u2013 instead it's done by some javascript (which is better for a variety of reasons) and at the moment this javascript doesn't know anything about :toclevels:\n\nBut it should be possible to tweak our rendering templates to include :toclevels: as an attribute in the generated HTML, and then we can tweak the javascript call made to generate the TOC so that it respects it on a per-page basis",
    "attachments": {
        "solr-10612-largepage.patch": "https://issues.apache.org/jira/secure/attachment/12868535/solr-10612-largepage.patch",
        "lang-analysis-1-level-toc.png": "https://issues.apache.org/jira/secure/attachment/12866785/lang-analysis-1-level-toc.png",
        "SOLR-10612.patch": "https://issues.apache.org/jira/secure/attachment/12868591/SOLR-10612.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-06T11:50:35+0000",
            "content": "but in jekyll, asciidoctor isn't responsible for generating the TOC  \u2013 instead it's done by some javascript\n\nJust to be technically accurate, the javascript doesn't come from Jekyll. It comes from the theme for Jekyll that I adapted for our use (https://github.com/tomjohnson1492/documentation-theme-jekyll). \n\nWe could rip it out entirely pretty easily and replace it with a global :toc: directive, and allow pages to declare their own :toclevels: as appropriate.  This might be a simpler approach for ongoing management: all the \"rules\" would be in the asciidoctor attributes so it would be clear what's going on - but would require a little bit of work to get it to look similar (probably mostly CSS tweaks). ",
            "author": "Cassandra Targett",
            "id": "comment-15999401"
        },
        {
            "date": "2017-05-07T17:50:06+0000",
            "content": "I discovered a way we could do this today.\n\nThe theme TOC has support already for disabling it on a per-page basis (_layouts/page.html has an unless page.toc == false statement at line 37). If you add :page-toc: false to any page, it will not generate the table of contents.\n\nThe problem is that the asciidoctor syntax for adding a TOC is :toc:, which is page-level so basically interpreted as :page-toc:, negating the previous statement.\n\nIf we change the unless statement to something like unless page.jstoc == false, then we can declare the following in the page:\n\n\n= Language Analysis\n:page-shortname: language-analysis\n:page-permalink: language-analysis.html\n:page-jstoc: false\n:toc: \n:toclevels: 1\n\n\n\nThis generates a single-level-deep TOC (see screenshot). It still uses the JS template to render it (so, we don't gain back control of where to put the TOC, which asciidoctor natively supports several options for, but I suspect this is partly a limitation in the jekyll-asciidoctor gem). \n\nIt does not add any TOC to the PDF, because a rule there prevents it. ",
            "author": "Cassandra Targett",
            "id": "comment-15999966"
        },
        {
            "date": "2017-05-07T17:56:50+0000",
            "content": "And then there's also this in the jekyll-asciidoctor gem, which we could just use to replace the javascript from the theme: https://github.com/asciidoctor/jekyll-asciidoc#generating-a-table-of-contents\n\nI believe that would allow us to set :toclevels: in individual pages, or decide in some cases to put it in a different location (more inline with text, or maybe on the right side). But, we'd have to experiment a bit. ",
            "author": "Cassandra Targett",
            "id": "comment-15999969"
        },
        {
            "date": "2017-05-11T18:04:15+0000",
            "content": "This isn't a solution, just jotting this down as a use case...\n\nThe Streaming Expressions page is one where it would be nice to have some flexibility in placement of the TOC.\n\nLet's assume for a moment that we split that page up and move all the expressions to new pages for their types  (sources, decorators, & evaluators), with the main discussion content staying on a parent Streaming Expressions page, something like:\n\n\n\tStreaming Expressions\n\t\n\t\tStream Sources\n\t\tStream Decorators\n\t\tStream Evaluators\n\t\n\t\n\n\n\nThese new children pages basically become parameter reference & example pages. They'll still be quite long, and a TOC on the right of the screen would be easier to work with than on the top. ",
            "author": "Cassandra Targett",
            "id": "comment-16006911"
        },
        {
            "date": "2017-05-15T21:35:03+0000",
            "content": "I just spent a little bit of time trying to make the native TOC in the jekyll-asciidoc gem work, and I believe based on what I've read about it that only two positions for the TOC are supported: preamble (at the top of the page) and macro (explicitly positioned inline with the page). Any right or left side placement won't work.\n\nSee:\nhttps://github.com/asciidoctor/jekyll-asciidoc#generating-a-table-of-contents\nhttps://github.com/asciidoctor/jekyll-asciidoc/issues/135\nhttp://discuss.asciidoctor.org/Jekyll-Plugin-toc-Problem-td4070.html\n\nBut, maybe there is some stuff we could do with JS and/or the liquid template with a new param and/or CSS. I'm not throwing away the idea, just one of the obvious ideas probably isn't workable. ",
            "author": "Cassandra Targett",
            "id": "comment-16011367"
        },
        {
            "date": "2017-05-17T14:35:38+0000",
            "content": "I've attached a patch that introduces a new layout called \"largepage\" that puts the TOC on the right side of a page, and two changes to files that utilize this layout (streaming-expressions.adoc and language-analysis.adoc).\n\nFrom my initial testing, this pretty much breaks any \"responsive\" layout we might have previously achieved on small screens, so it's not perfect.\n\nIt also doesn't solve for being able to control levels, but some of the motivation for that was for huge pages to not become even longer due to a big TOC, so this does provide an option for those pages to retain a deep TOC. ",
            "author": "Cassandra Targett",
            "id": "comment-16014125"
        },
        {
            "date": "2017-05-17T19:38:40+0000",
            "content": "\n\nBut, maybe there is some stuff we could do with JS and/or the liquid template with a new param and/or CSS. I'm not throwing away the idea, just one of the obvious ideas probably isn't workable.\n\nWe definitely have a lot of flexibility with the liquid templates and hte javascript generated toc...\n\nI've attached a patch that introduces a new layout called \"largepage\" ... From my initial testing, this pretty much breaks any \"responsive\" layout we might have previously achieved on small screens, so it's not perfect.\n\nOne possibility is to better lerage CSS features to do this?\n\ni've updated your patch to replace the new layout with a small conditional in the existing toc.html, that adds a CSS class to the toc based on a page variable (:page-tocclass:), and then updated ref-guide.css to have a \"toc-right\" class that uses float: right ... this looks better on some pages (the contents flows around it so the main content isn't a single narrow column) but has issues with things like <pre> tags that overlap it ... my CSS-fu isn't strong enough to know how to make them play nicer w/eachother.\n\nFWIW: This patch also tweaks the javascript for generating the toc so that :page-toclevels: can be used to determine what headers to use in the TOC (wherever it's placed)\n\n\n\nAnother idea to consider is that the TOC javascript isn't fundementally tied to building it's TOC outside of the main content, or even (AFAICT) limited to single TOC for the entire page.   If we can use/abuse an (existing or new) asciidoctor macro to generate some placeholder HTML where we want the TOC to be, the javascript can put the TOC in that place ... we could even make the javascript wrapper code smart enough that if there were multiple macro instances in the page body, we could generate multiple TOCs with diff options \u2013 ie: if solr_custom_toc::[] could cause something like <div class=\"solr_custom_toc\"/> in the final output (or better still: solr_custom_toc::[whatever] => <div class=\"solr_custom_toc\" data-solr=\"whatever\"/>) then we could use the toc.js in a way that would build the TOC at that exact spot, and we could (optionally) limit it to only build the TOC for the current \"subsection\" \u2013 either based on page varibales, or based on the \"whatever\" data from the macro.\n\nSo for example: we could build a very small \"toclevels==1\" toc at the top of streaming-expressions.adoc and then each of the 2 big sections could have \"In this section\" TOCs listing just the subsections (which we could style differnetly, or use javascript tricks to collapse by default and require you to click on them to expand, etc...)\n\nCassandra Targett: do you know of any simple macros we could use/abuse to generate some arbitrary HTML? ",
            "author": "Hoss Man",
            "id": "comment-16014668"
        },
        {
            "date": "2017-05-17T22:27:41+0000",
            "content": "So for example: ... each of the 2 big sections could have \"In this section\" TOCs listing just the subsections ...\n\nTalking about this with cassandra on irc led me to the pass macro in asciidoctor..\n\nhttp://asciidoctor.org/docs/user-manual/#passthru\n\n...which let me get this idea of a \"section toc\" working ... then i noticed you could put the \"pass\" macro in a page attribute...\n\nhttp://asciidoctor.org/docs/user-manual/#substitutions-in-an-attribute-entry\n\n...and once i saw that work, i tried refactoring it into an attribute in _config.yml where i discovered that to put arbitrary HTML in asciidoctor via jekyll attributes, you don't even need the pass macro!\n\nSo in this updated patch, i've got a proof of concept that let's us put {{ {section-toc} }} in templates, along with the quick and dirty javascript to build a TOC of just that section (currently hard coded to only do h3 tags in the same \"sect1\" section ... could maybe paramaterize that, but we'd need to parameterize the section-toc macro to get the specifics into the div)\n\nsee streaming-expressions.adoc/html for the usage/output ... i updated the CSS to make sure it's styled just like hte page level TOCs but with a different header text, but we can always tweak that to make them more unique if we want. ",
            "author": "Hoss Man",
            "id": "comment-16014865"
        },
        {
            "date": "2017-05-18T15:17:06+0000",
            "content": "So, this is awesome, and provides a lot more options for where on the page to put the TOC and how many levels to use. +1 for where you are so far.\n\nTo solve the problem of code boxes overflowing the TOC when it's on the right, I believe adding overflow: auto; to the .listingblock section fixes it (not totally perfectly, since the source block is still a block so it all flows together as a block, but it's better than overwriting the TOC). New patch attached. ",
            "author": "Cassandra Targett",
            "id": "comment-16015922"
        },
        {
            "date": "2017-05-18T20:21:03+0000",
            "content": "+1 for where you are so far.\n\nOk, cool .. glad you figured out that CSS thing.\n\nUpdated patch:\n\n\n\tcss tweak so that right floating TOCs only float right on screens big enough for it to look good \u2013 otherwise they're just regular tocs\n\thide section-toc macro in PDF output\n\tjavascript refactoring and cleanup\n\timprove javascript so \"section-toc\" now works regardless of level \u2013 so if you put it under a == header, it will give you the TOC of everything in the current section until the next == ... but if you put it under a === header it will give you everything in the current sub-section until the next ===\n\t\n\t\tNOTE: because of how we're using an attribute for this, there is no control of how deep the subsection-toc will go.  it does all sub-headers in the current \"section\"\n\t\n\t\n\n\n\ni think between section-toc, page-toclevels, and page-tocclass we've got enough stuff in our toolkit to solve every posisble situation we might want.\n\nif there are no concerns i'll commit & backport all the \"template\" changes here tomorrow (but none of the *.adoc changes i made just to demo the new features) ",
            "author": "Hoss Man",
            "id": "comment-16016403"
        },
        {
            "date": "2017-05-19T16:10:21+0000",
            "content": "For some reason I can't get your patch to apply - god only knows why, I'm new to this - but, I took a look at it and nothing jumps out at me as concerning. Go for it, IMO, and that will help me make progress on SOLR-10692. ",
            "author": "Cassandra Targett",
            "id": "comment-16017601"
        },
        {
            "date": "2017-05-19T17:49:50+0000",
            "content": "Commit c42455c89b0446238adbad3548485498d671dd7d in lucene-solr's branch refs/heads/branch_6_6 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c42455c ]\n\nSOLR-10612: add jekyll support for page-toclevels, page-tocclass, and a new \n{section-toc}\n macro\n\n(cherry picked from commit 3392a128667f927783199fe3d9f0c6a17f0a787f) ",
            "author": "ASF subversion and git services",
            "id": "comment-16017745"
        },
        {
            "date": "2017-05-19T17:49:53+0000",
            "content": "Commit 3654ae291b51726a9bffc6165f63593b32070c4e in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3654ae2 ]\n\nSOLR-10612: add jekyll support for page-toclevels, page-tocclass, and a new \n{section-toc}\n macro\n\n(cherry picked from commit 3392a128667f927783199fe3d9f0c6a17f0a787f) ",
            "author": "ASF subversion and git services",
            "id": "comment-16017746"
        },
        {
            "date": "2017-05-19T17:49:58+0000",
            "content": "Commit 3392a128667f927783199fe3d9f0c6a17f0a787f in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3392a12 ]\n\nSOLR-10612: add jekyll support for page-toclevels, page-tocclass, and a new \n{section-toc}\n macro ",
            "author": "ASF subversion and git services",
            "id": "comment-16017747"
        },
        {
            "date": "2017-05-19T17:52:16+0000",
            "content": "NOTE: I also included some notes about these new attributes in the meta docs for jekyll when i committed. ",
            "author": "Hoss Man",
            "id": "comment-16017748"
        },
        {
            "date": "2017-05-21T08:58:44+0000",
            "content": "Commit f62248c90a4a139e49a42efe39dddabd6fb51732 in lucene-solr's branch refs/heads/master from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f62248c ]\n\nSOLR-10612: Fix precommit (tabs) ",
            "author": "ASF subversion and git services",
            "id": "comment-16018763"
        },
        {
            "date": "2017-05-21T08:59:04+0000",
            "content": "Commit fd349bd325f5425a76cd1eb62272c3e90dc83d64 in lucene-solr's branch refs/heads/branch_6x from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fd349bd ]\n\nSOLR-10612: Fix precommit (tabs)\n\n(cherry picked from commit f62248c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16018764"
        },
        {
            "date": "2017-05-21T08:59:44+0000",
            "content": "Commit 070575ad27206210d38b2544f888069de87aa5a7 in lucene-solr's branch refs/heads/branch_6_6 from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=070575a ]\n\nSOLR-10612: Fix precommit (tabs)\n\n(cherry picked from commit f62248c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16018765"
        }
    ]
}