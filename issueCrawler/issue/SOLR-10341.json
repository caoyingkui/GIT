{
    "id": "SOLR-10341",
    "title": "SQL AVG function mis-interprets field type.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Parallel SQL"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.5",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Using movielens data (users, movies, ratings), I tried the following SQL:\n\n\ncurl --data-urlencode \"stmt=SELECT solr.title as title, avg(rating) as avg_rating FROM ratings INNER JOIN (select movie_id,title from movies where _query_='plot_txt_en:love') as solr ON ratings.movie_id = solr.movie_id GROUP BY title ORDER BY avg_rating DESC LIMIT 10\" \"http://localhost:8983/solr/movies/sql?aggregationMode=facet\"\n\n\n\nSolr returns this error: \n\n{\"result-set\":{\"docs\":[{\"EXCEPTION\":\"Failed to execute sqlQuery 'SELECT solr.title as title, avg(rating) as avg_rating FROM ratings INNER JOIN (select movie_id,title from movies where _query_='plot_txt_en:love') as solr ON ratings.movie_id = solr.movie_id GROUP BY title ORDER BY avg_rating DESC LIMIT 10' against JDBC connection 'jdbc:calcitesolr:'.\\nError while executing SQL \\\"SELECT solr.title as title, avg(rating) as avg_rating FROM ratings INNER JOIN (select movie_id,title from movies where _query_='plot_txt_en:love') as solr ON ratings.movie_id = solr.movie_id GROUP BY title ORDER BY avg_rating DESC LIMIT 10\\\": From line 1, column 29 to line 1, column 39: Cannot apply 'AVG' to arguments of type 'AVG(<JAVATYPE(CLASS JAVA.LANG.STRING)>)'. Supported form(s): 'AVG(<NUMERIC>)'\",\"EOF\":true,\"RESPONSE_TIME\":92}]}}\n\n\n\nrating is a TrieInt with docValues enabled.\n\n<field name=\"rating\" type=\"tint\" docValues=\"true\" multiValued=\"false\" indexed=\"true\" stored=\"true\"/>\n\n\nsee screenshot",
    "attachments": {
        "SOLR-10341.patch": "https://issues.apache.org/jira/secure/attachment/12860430/SOLR-10341.patch",
        "Screen Shot 2017-03-22 at 8.12.33 AM.png": "https://issues.apache.org/jira/secure/attachment/12859941/Screen%20Shot%202017-03-22%20at%208.12.33%20AM.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-22T14:17:32+0000",
            "content": "rating is a numeric type ",
            "author": "Timothy Potter",
            "id": "comment-15936378"
        },
        {
            "date": "2017-03-22T14:25:43+0000",
            "content": "Joins are not yet supported. Are you seeing the same problem with a query on a single table? ",
            "author": "Joel Bernstein",
            "id": "comment-15936392"
        },
        {
            "date": "2017-03-22T14:40:55+0000",
            "content": "I'm seeing a bug with avg on a single table, with casting between long and double. Looking into this now. ",
            "author": "Joel Bernstein",
            "id": "comment-15936429"
        },
        {
            "date": "2017-03-22T14:52:07+0000",
            "content": "The bug I'm seeing occurs when you try to average an int or long field. The issue is that the Streaming Expressions are return doubles for the average function but Calcite is looking for a long value when averages are done on a long field. Averages are working on float and double fields.\n ",
            "author": "Joel Bernstein",
            "id": "comment-15936447"
        },
        {
            "date": "2017-03-22T14:54:09+0000",
            "content": "Can you work around it by casting before doing the average? ",
            "author": "Kevin Risden",
            "id": "comment-15936452"
        },
        {
            "date": "2017-03-22T14:55:38+0000",
            "content": "Yes, that's a work around used in the test cases, but we should fix this so it works without needing the cast. ",
            "author": "Joel Bernstein",
            "id": "comment-15936462"
        },
        {
            "date": "2017-03-22T14:58:26+0000",
            "content": "This is easily fixed in MapReduce mode. But it's trickier in facet mode. ",
            "author": "Joel Bernstein",
            "id": "comment-15936469"
        },
        {
            "date": "2017-03-22T15:00:55+0000",
            "content": "sounds like this issue -> https://issues.apache.org/jira/browse/SOLR-9372 ",
            "author": "Timothy Potter",
            "id": "comment-15936477"
        },
        {
            "date": "2017-03-22T15:06:13+0000",
            "content": "This bug was introduced with the Calcite integration. SOLR-9372 needs to be addressed as well though. ",
            "author": "Joel Bernstein",
            "id": "comment-15936497"
        },
        {
            "date": "2017-03-22T15:15:43+0000",
            "content": "my bad on the join example ... I thought they came for free with the calcite integration ... are joins planned for inclusion in 6.5? ",
            "author": "Timothy Potter",
            "id": "comment-15936509"
        },
        {
            "date": "2017-03-22T15:17:54+0000",
            "content": "Technically joins should work. They will just be table scans basically joined in memory. The pushdown isn't there yet (meaning streaming expression join). So could very easily blow through memory if Calcite does the join. ",
            "author": "Kevin Risden",
            "id": "comment-15936513"
        },
        {
            "date": "2017-03-22T15:22:02+0000",
            "content": "Ok, I see a path forward with facet mode as well. I will work on getting this fixed for a bug fix release.  ",
            "author": "Joel Bernstein",
            "id": "comment-15936518"
        },
        {
            "date": "2017-03-22T15:24:24+0000",
            "content": "Since we have no test cases for joins it's really hard to know how they well behave. We've pushed down so much functionality and we don't know what rules will get triggered during the joins, so its hard to know whats going to happen. ",
            "author": "Joel Bernstein",
            "id": "comment-15936521"
        },
        {
            "date": "2017-03-23T14:36:46+0000",
            "content": "I know the release process for 6.5 has already started but I think this should be included ... seems like any time I request an int field, I get an error about type casting. ",
            "author": "Timothy Potter",
            "id": "comment-15938459"
        },
        {
            "date": "2017-03-23T16:00:42+0000",
            "content": "I've only seen the issue with the avg function. Have you seen it with any other?\n ",
            "author": "Joel Bernstein",
            "id": "comment-15938648"
        },
        {
            "date": "2017-03-23T16:01:58+0000",
            "content": "For example this query is working fine:\n\n\nselect year_i, month_i, count(*) as `count`, min(day_i) as min_day , max(day_i) as max_day from collection1 group by year_i,  month_i\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-15938649"
        },
        {
            "date": "2017-03-23T16:03:46+0000",
            "content": "Also this works:\n\nselect year_i, month_i, count(*) as `count`, sum(day_i) as sum_day , sum(month_i) as sum_month, max(price_f) as max_price from collection1 where year_i >30  group by year_i,  month_i order by sum(day_i) desc\n\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-15938655"
        },
        {
            "date": "2017-03-23T16:13:45+0000",
            "content": "Here is the list of manual tests that I run in both facet and map_reduce mode, which all work. The test cases cover lots of different scenarios as well. The avg function just slipped through the cracks:\n\nselect id from collection1 limit 10\nselect id, test_s from collection1 limit 10\nselect id, test_s, test_t from collection1 limit 10\nselect id, test_s, test_t, year_i from collection1 limit 10\nselect id, test_s, test_t, year_i, price_f from collection1 limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 where year_i > 36 limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 where year_i > 36 and year_i < 38 limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 38) limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 37) limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 37) or id = '410005' limit 10\nselect id, test_s, test_t, year_i, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 38) order by price_f desc limit 10\nselect id, test_s, test_t, year_i, day_i, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 38) order by day_i desc, price_f desc limit 10\nselect id, test_s, test_t as textField, year_i, day_i, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 38) order by day_i desc, price_f desc limit 10\nselect id, test_s, test_t as textField, year_i, day_i as testday, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 38) order by testday desc, price_f desc limit 10\nselect id, test_s, test_t as textField, year_i, day_i as `day`, price_f, prod_ss from collection1 where (year_i > 36 and year_i < 38) order by `day` desc, price_f desc limit 10\n\nselect count(*) from collection1 \nselect count(*) as `count` from collection1 \nselect count(*), min(day_i) from collection1\nselect count(*), min(day_i), max(day_i) from collection1\nselect count(*) as `count`, min(day_i) as min_day, max(day_i) as max_day from collection1\nselect count(*) as `count`, min(day_i) as min_day, max(day_i) as max_day, sum(month_i) as sum_month from collection1 \nselect distinct year_i from collection1 \nselect distinct year_i from collection1 where year_i > 10 \nselect distinct year_i from collection1 where year_i > 10 order by year_i desc\nselect distinct year_i, month_i from collection1 where year_i > 30 order by year_i asc, month_i asc\nselect distinct year_i, month_i from collection1 where year_i > 30 order by year_i asc, month_i desc\nselect distinct year_i, month_i from collection1 where year_i > 30 order by year_i desc, month_i desc\nselect distinct year_i, month_i, day_i from collection1 where year_i > 30 order by year_i desc, month_i desc, day_i desc\nselect distinct year_i, month_i, day_i from collection1 where year_i > 30 order by year_i desc, month_i desc, day_i desc limit 2000\nselect distinct year_i as `year`, month_i as `month`, day_i as `day` from collection1 where year_i > 30 order by year_i desc, month_i desc, day_i desc limit 2000\nselect id, score from collection1 where test_t='(hello world)' order by score limit 500\nselect year_i, count(*) from collection1 group by year_i\nselect year_i, avg(month_i) from collection1 group by year_i\nselect year_i, count(*) as `count` from collection1 group by year_i\nselect year_i, count(*) as `count` from collection1 where year_i > 30 group by year_i\nselect year_i, count(*) as `count` from collection1 where year_i > 30 group by year_i having count(*) = 200183\nselect year_i, count(*) as `count` from collection1 group by year_i order by count(*) desc\nselect year_i, count(*) from collection1 group by year_i order by year_i asc\nselect year_i, count(*) as `count`, min(day_i) as min_day , max(day_i) as max_day from collection1 group by year_i\nselect year_i, month_i, count(*) as `count`, min(day_i) as min_day , max(day_i) as max_day from collection1 group by year_i,  month_i\nselect year_i, month_i, count(*) as `count`, sum(day_i) as sum_day , sum(month_i) as sum_month, max(price_f) as max_price from collection1 where year_i >30  group by year_i,  month_i order by sum(day_i) desc\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-15938671"
        },
        {
            "date": "2017-03-23T16:16:13+0000",
            "content": "I'm not sure that Calcite is doing the wrong thing here. I think I remember a Calcite mailing list thing about AVG and integers. We may have been too lenient before. I'll see if I can find the Calcite message. ",
            "author": "Kevin Risden",
            "id": "comment-15938674"
        },
        {
            "date": "2017-03-23T16:19:05+0000",
            "content": "Unless we are pushing down AVG and its failing on the Solr side. I could be off base with my previous message. ",
            "author": "Kevin Risden",
            "id": "comment-15938680"
        },
        {
            "date": "2017-03-23T16:20:41+0000",
            "content": "I suspect Calcite is doing what is expected in SQL when averaging integers. We'll just make the adjustment to what Calcite wants. ",
            "author": "Joel Bernstein",
            "id": "comment-15938686"
        },
        {
            "date": "2017-03-23T16:21:57+0000",
            "content": "We are pushing the down the AVG but always return a double from an average calculation. Calcite is expecting a long when the avg is done on an integer. ",
            "author": "Joel Bernstein",
            "id": "comment-15938688"
        },
        {
            "date": "2017-03-23T21:49:40+0000",
            "content": "This is failing for me:\n\n\ncurl --data-urlencode \"stmt=select rating, movie_id, user_id from ratings order by rating desc LIMIT 100\" \"http://localhost:8983/solr/ratings/sql\"\n{\"result-set\":{\"docs\":[{\"EXCEPTION\":\"java.lang.Long cannot be cast to java.lang.String\",\"EOF\":true,\"RESPONSE_TIME\":160}]}}\n\n\n\nrating is a tint as before ...\n\n\n2017-03-23 21:47:37.007 INFO  (qtp1197365356-15) [c:ratings s:shard1 r:core_node1 x:ratings_shard1_replica1] o.a.s.c.S.Request [ratings_shard1_replica1]  webapp=/solr path=/select params={q=*:*&distrib=false&fl=rating,movie_id,user_id&sort=rating+desc&rows=100&wt=json&version=2.2} hits=100000 status=0 QTime=19\n2017-03-23 21:47:37.014 ERROR (qtp1197365356-21) [c:ratings s:shard1 r:core_node1 x:ratings_shard1_replica1] o.a.s.c.s.i.s.ExceptionStream java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.String\n\tat org.apache.calcite.avatica.util.AbstractCursor$StringAccessor.getString(AbstractCursor.java:728)\n\tat org.apache.calcite.avatica.AvaticaSite.get(AvaticaSite.java:352)\n\tat org.apache.calcite.avatica.AvaticaResultSet.getObject(AvaticaResultSet.java:393)\n\tat org.apache.solr.client.solrj.io.stream.JDBCStream$1.selectValue(JDBCStream.java:240)\n\tat org.apache.solr.client.solrj.io.stream.JDBCStream.read(JDBCStream.java:341)\n\tat org.apache.solr.handler.SQLHandler$SqlHandlerStream.read(SQLHandler.java:187)\n\tat org.apache.solr.client.solrj.io.stream.ExceptionStream.read(ExceptionStream.java:68)\n\tat org.apache.solr.handler.StreamHandler$TimerStream.read(StreamHandler.java:508)\n\tat org.apache.solr.client.solrj.io.stream.TupleStream.lambda$writeMap$0(TupleStream.java:82)\n\tat org.apache.solr.response.JSONWriter.writeIterator(JSONResponseWriter.java:523)\n\n\n\nmaybe this is a different issue? ",
            "author": "Timothy Potter",
            "id": "comment-15939281"
        },
        {
            "date": "2017-03-23T21:57:39+0000",
            "content": "What are the field types for rating, movie_id, user_id? ",
            "author": "Joel Bernstein",
            "id": "comment-15939288"
        },
        {
            "date": "2017-03-23T21:59:49+0000",
            "content": "rating=TrieInt, move_id=StrField and user_id=StrField ... all have docValues enabled ",
            "author": "Timothy Potter",
            "id": "comment-15939291"
        },
        {
            "date": "2017-03-23T22:01:56+0000",
            "content": "I would have to look closer but TrieInt may not be mapped correctly in the Calcite schema. I think it \"guesses\" based on the schema right now. If you \"cheat\" and just cast to a Long does it return? ",
            "author": "Kevin Risden",
            "id": "comment-15939293"
        },
        {
            "date": "2017-03-23T22:06:28+0000",
            "content": "All the testing has been done with int rather then tint. I'll dig into this ... ",
            "author": "Joel Bernstein",
            "id": "comment-15939296"
        },
        {
            "date": "2017-03-23T22:08:50+0000",
            "content": "This is the mapping logic:\n\n\nswitch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n\n\nI suspect tint is not returning int or long ",
            "author": "Joel Bernstein",
            "id": "comment-15939302"
        },
        {
            "date": "2017-03-23T22:10:21+0000",
            "content": "hmmm ... I guess I don't know how to cast with Calcite:\n\n\ncurl --data-urlencode \"stmt=select cast(rating as long) as rating, movie_id, user_id from ratings order by rating desc LIMIT 100\" \"http://localhost:8983/solr/ratings/sql\"\n{\"result-set\":{\"docs\":[{\"EXCEPTION\":\"Failed to execute sqlQuery 'select cast(rating as long) as rating, movie_id, user_id from ratings order by rating desc LIMIT 100' against JDBC connection 'jdbc:calcitesolr:'.\\nError while executing SQL \\\"select cast(rating as long) as rating, movie_id, user_id from ratings order by rating desc LIMIT 100\\\": From line 1, column 23 to line 1, column 26: Unknown datatype name 'long'\",\"EOF\":true,\"RESPONSE_TIME\":491}]}}\n\n ",
            "author": "Timothy Potter",
            "id": "comment-15939304"
        },
        {
            "date": "2017-03-23T22:19:17+0000",
            "content": "https://calcite.apache.org/docs/reference.html#data-types You probably want numeric? long isn't a SQL type. ",
            "author": "Kevin Risden",
            "id": "comment-15939320"
        },
        {
            "date": "2017-03-23T22:20:35+0000",
            "content": "Joel Bernstein When the mapping was implemented I thought about tint and others but there was no way to know if a type was except for the primitives. The reason being is the name tint doesn't HAVE to mean an int. Now we could add the mappings and have the assumption but it was done originally with things that I knew would be true. ",
            "author": "Kevin Risden",
            "id": "comment-15939324"
        },
        {
            "date": "2017-03-23T22:24:39+0000",
            "content": "yep, sorry, cast(rating as bigint) worked ",
            "author": "Timothy Potter",
            "id": "comment-15939331"
        },
        {
            "date": "2017-03-23T22:26:34+0000",
            "content": "Timothy Potter No worries SQL is a pain  I agree right now the out of the box experience is going to be rough (except for primitive types). As long as we know that casting works that might be a decent work around for the short term? The error messages at least look good. We do need to add tests though. ",
            "author": "Kevin Risden",
            "id": "comment-15939338"
        },
        {
            "date": "2017-03-23T22:28:45+0000",
            "content": "One thought is we might be able to add the cast programmatically after querying? We might have better info at that point than just the type name from the schema? That could be rough though since wouldn't know if 1.0 or abc is coming next and we could cast wrong. ",
            "author": "Kevin Risden",
            "id": "comment-15939342"
        },
        {
            "date": "2017-03-23T23:20:40+0000",
            "content": "Let's just add the mappings and we can make int, tint etc... requirements for the SQL schema.\n\nI'll fix both the AVG issue and the tint issue tomorrow and get everything backported for a 6.5.1 release.\n\nI'll be traveling starting Sunday though so I won't be able to manage the 6.5.1 release.\n\nTimothy Potter or Kevin Risden if one of you can manage the 6.5.1 release we can get these issues resolved next week. ",
            "author": "Joel Bernstein",
            "id": "comment-15939422"
        },
        {
            "date": "2017-03-24T14:54:25+0000",
            "content": "I'll be fixing SOLR-9372 as part of this ticket also. ",
            "author": "Joel Bernstein",
            "id": "comment-15940490"
        },
        {
            "date": "2017-03-24T19:27:55+0000",
            "content": "Patch which addresses all the issues discussed in this ticket. ",
            "author": "Joel Bernstein",
            "id": "comment-15940993"
        },
        {
            "date": "2017-03-24T19:33:22+0000",
            "content": "The patch that was just added does the following:\n\n1) It aligns the facet and map_reduce aggregation outputs fixing SOLR-9372. Now both approaches output a long when sum, min, max are applied to long fields. \n\n2) The avg function now works on int fields. The avg function by default always returns a rounded long when averaging an int field. You can cast to return a double when averaging a long field:\n\n\nselect str_s, count(*), sum(field_i), min(field_i), max(field_i), \n          cast(avg(1.0 * field_i) as float) \n          from collection1 where text='XXXX' group by str_s \n          order by sum(field_i) asc limit 2\n\n\n\nWhen averaging a float field a double is always returned.\n\n3) Added aggregation support for tint, tlong and tdouble fields. ",
            "author": "Joel Bernstein",
            "id": "comment-15941006"
        },
        {
            "date": "2017-03-24T19:43:12+0000",
            "content": "I'll do some manual testing before committing ",
            "author": "Joel Bernstein",
            "id": "comment-15941018"
        },
        {
            "date": "2017-03-27T20:02:04+0000",
            "content": "I ran into some issues during the manual testing. The problem was that in certain scenarios the cast was causing the project rule to fire twice. This was not properly accounted for in the code so the second project could step on the field mappings for the aggregate functions. This took some time to figure out and resolve. The approach taken was to add logic that said that the project rule can never overwrite an existing field mapping. This seemed to resolve the issue. I'll post a new patch tomorrow and if all looks good I'll commit tomorrow as well.  ",
            "author": "Joel Bernstein",
            "id": "comment-15943951"
        },
        {
            "date": "2017-03-27T21:20:51+0000",
            "content": "Hi Joel Bernstein, sounds good ... I'll plan to test out the patch tomorrow. ",
            "author": "Timothy Potter",
            "id": "comment-15944067"
        },
        {
            "date": "2017-03-28T07:58:16+0000",
            "content": "Latest patch which resolves the issues found when casting.\n\nI plan on testing more today and if all looks good committing. ",
            "author": "Joel Bernstein",
            "id": "comment-15944723"
        },
        {
            "date": "2017-03-28T18:47:51+0000",
            "content": "Commit aa2b46a62a52c0d0117312add2a667bf6b14a709 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa2b46a ]\n\nSOLR-10341: SQL AVG function mis-interprets field type ",
            "author": "ASF subversion and git services",
            "id": "comment-15945721"
        },
        {
            "date": "2017-03-28T19:20:07+0000",
            "content": "Commit e6b4d25289a240ff64eaeb858c4c06737999ee11 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e6b4d25 ]\n\nSOLR-10341: SQL AVG function mis-interprets field type ",
            "author": "ASF subversion and git services",
            "id": "comment-15945767"
        },
        {
            "date": "2017-03-28T19:30:51+0000",
            "content": "Commit 4c979b84e8d5bd3eb4cc34f90834cedbf2a374ed in lucene-solr's branch refs/heads/branch_6_5 from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4c979b8 ]\n\nSOLR-10341: SQL AVG function mis-interprets field type ",
            "author": "ASF subversion and git services",
            "id": "comment-15945782"
        },
        {
            "date": "2017-04-07T02:06:18+0000",
            "content": "Commit c05ab96dc4454c00779aad2cd6989812c9b13a2e in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c05ab96 ]\n\nSOLR-10341, SOLR-10444: Update CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-15960161"
        },
        {
            "date": "2017-04-07T02:08:18+0000",
            "content": "Commit d20d95163b2f995674c62e14a8d8792c48bc51d8 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d20d951 ]\n\nSOLR-10341, SOLR-10444: Update CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-15960164"
        },
        {
            "date": "2017-04-07T02:10:49+0000",
            "content": "Commit bc16deb60603b135de659db577ecc4430d9a428d in lucene-solr's branch refs/heads/branch_6_5 from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc16deb ]\n\nSOLR-10341, SOLR-10444: Update CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-15960169"
        }
    ]
}