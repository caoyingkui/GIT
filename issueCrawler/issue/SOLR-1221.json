{
    "id": "SOLR-1221",
    "title": "Change Solr Highlighting to use the SpanScorer with MultiTerm expansion by default",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "highlighter"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "To improve the out of the box experience of Solr 1.4, I really think we should make this change. You will still be able to turn both off.\n\nComments?",
    "attachments": {
        "SOLR-1221.patch": "https://issues.apache.org/jira/secure/attachment/12418064/SOLR-1221.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12720284",
            "date": "2009-06-16T18:40:29+0000",
            "content": "Seems time to me... does this affect the HTTP API? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12720285",
            "date": "2009-06-16T18:42:00+0000",
            "content": "+1   Solr's defaults are important, too. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12720286",
            "date": "2009-06-16T18:43:33+0000",
            "content": "does this affect the HTTP API? \n\nNo, it won't. Just changes the default setting for two parameters. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12748940",
            "date": "2009-08-28T18:53:04+0000",
            "content": "Is this going to make it into 1.4? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753634",
            "date": "2009-09-10T14:34:50+0000",
            "content": "Looks good to me, the only oddity is the name of the testPhraseHighlighter now tests the non-phrase highlighter.\n\nAlso, testing wise, do we now risk losing tests for the other highlighter?  I'm not that familiar with the phrase highlighter, so maybe all it does is subsume the functionality of the old one and add phrase support, in which case the existing tests are fine.  If it does not do that, though, it seems like we might want to duplicate the tests, with use phrase highlighter set to false for the dups.  Unless, of course, you think the existing single test that turns off the phrase highlighter is sufficient. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12753668",
            "date": "2009-09-10T15:46:28+0000",
            "content": "the only oddity is the name of the testPhraseHighlighter now tests the non-phrase highlighter.\n\nOkay, will address.\n\nAlso, testing wise, do we now risk losing tests for the other highlighter?\n\nYeah - before the phrase highlighter was \"undertested\" and the default had more, and now\nits the reverse. I suppose ideally, every test would hit both - that gets ugly though - its what\nwe do in Lucene. Thats why I am confident in the tests I suppose though - Lucene runs\nboth through every test - so the PhraseHighlighter matches the other highlighters functionality\nand adds support for more query types. I think between Lucene and Solr, the tests are sufficient -\nbut I couldn't argue against more coverage here - hard to argue against testing in any form  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753700",
            "date": "2009-09-10T16:51:26+0000",
            "content": "Sounds good, Mark.  Please commit when you are ready. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12755484",
            "date": "2009-09-15T13:36:14+0000",
            "content": "to trunk "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12755486",
            "date": "2009-09-15T13:37:36+0000",
            "content": "the only oddity is the name of the testPhraseHighlighter now tests the non-phrase highlighter.\n\nThats actually not true - just looked at the test again - testPhraseHighlighter is the same as it was - it just used to default to off, so for the portion that expected it to be off, I now explicitly turn it off - thats the only change in testPhraseHighlighter. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12759968",
            "date": "2009-09-26T23:50:34+0000",
            "content": "fix a compile issue in last patch - param needs to be \"true\" rather than true.\nalso adds changes entry.\n\nwill commit very soon. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760047",
            "date": "2009-09-27T16:14:45+0000",
            "content": "There is a bug to take care of, and a missing piece that Koji pointed out. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760048",
            "date": "2009-09-27T16:17:53+0000",
            "content": "Grrr ... darn it. Its at the Lucene level. NumericQuery doesn't set the Term for getTerm(), so its not supported by the Span Highlighter. Grrr. Not sure what to do at the moment ... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760057",
            "date": "2009-09-27T16:54:42+0000",
            "content": "Easy enough to side step this bug in Lucene for now - but if we release with pure Lucene 2.9, not sure what I'm going to do here... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760078",
            "date": "2009-09-27T18:27:48+0000",
            "content": "What do people thing about putting in an updated Highlighter jar with a fix? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12760079",
            "date": "2009-09-27T18:31:58+0000",
            "content": "What do people thing about putting in an updated Highlighter jar with a fix? \n\n+1, If there's not an easy way to work around it in Solr. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760080",
            "date": "2009-09-27T18:35:35+0000",
            "content": "I don't see one -\n\nugly options I can think of -\n\n1. extend highlighter and duplicate a ton of code with a fix - obviously not really an option\n2. run through the query first and rebuild it without the numericrangequery part\n3. use an overridden version of NumericQuery in Solr that returns a placeholder term from getTerm\n\nNone of these are really viable IMO though. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12760082",
            "date": "2009-09-27T18:49:11+0000",
            "content": "How can one reproduce this bug?  The query parser produces a normal term query for numeric queries.\n\nSomething like this does not cause an error on trunk:\nhttp://localhost:8983/solr/select?q=popularity:6&hl=true&hl.fl=popularity\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760083",
            "date": "2009-09-27T18:52:39+0000",
            "content": "Sorry - should have been more clear.\n\nThe bug is hidden on trunk at the moment - Koji pointed out that I missed a spot, and on trunk right now, queries are being rewritten by default when they shouldnt be.\n\nNow that you mention it though, the issue is not just with NumericRange (I just assumed that was being gen'd cause I saw the problem with it), but its also going to be with the\ndeprecated RangeQuery it looks. edit actually - since RangeQuery no longer extends MultiTermQuery, it won't cause the error - it just won't highlight.\n\nedit\n\nwhich really argues for a jar update - I can fix all causes with one simple fix - checking if getTerm returns null. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760084",
            "date": "2009-09-27T18:57:00+0000",
            "content": "this patch needs to be applied to finish the issue - but for now it will cause tests to fail. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760087",
            "date": "2009-09-27T19:25:35+0000",
            "content": "The query parser produces a normal term query for numeric queries.\n\nAlso, I shouldn't have said NumericQuery - NumericRangeQuery - sorry again. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12760111",
            "date": "2009-09-27T22:03:00+0000",
            "content": "deprec ConstantScoreRangeQuery (if ever used in Solr) would also have the problem... (but it extends TermRangeQuery, so should be catched before).\n\n3. use an overridden version of NumericQuery in Solr that returns a placeholder term from getTerm\n\nwould not work (final and no ctors). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760112",
            "date": "2009-09-27T22:06:35+0000",
            "content": "deprec ConstantScoreRangeQuery (if ever used in Solr) would also have the problem... (but it extends TermRangeQuery, so should be catched before).\n\nRight - anything that extends TermRangeQuery should be fine. It has special handling.\n\nwould not work (final and no ctors).\n\nThanks - I actually saw that when I was messing with the Highlighter earlier today, but I didn't put 2 and 2 together.\nSounds like the updated Highlighter jar is the solution. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12760114",
            "date": "2009-09-27T22:10:49+0000",
            "content": "Does RangeQuery really need to be highlighted? It is not used anywhere in Solr (I removed all occurences in the issue about TermRangeQuery), so why handle it?\n\nIn Lucene, the fix would only be needed for highlighting in 2.9.1, 3.0 will have no RangeQuery anymore. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12760127",
            "date": "2009-09-27T23:19:18+0000",
            "content": "In Lucene, the fix would only be needed for highlighting in 2.9.1, 3.0 will have no RangeQuery anymore.\n\nYou can have custom queryparsers in Solr, so you can't say definitely its not used.\n\nWhether I'm concerned about it depends on if we a 2.9.1 - if we do, I'll fix it. If we don't I won't. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12761348",
            "date": "2009-10-01T21:18:35+0000",
            "content": "OK, here's a potential workaround... simply wraps the NumericRangeQuery in another query and delegates everything.  Since it won't be an instanceof MultiTermQuery, it shouldn't trigger any bugs in the highlighters.\n\nI tried starting off with a MultiTermQuery that delegated to the contained NRQ, but it turned out to be impossible because MTQ.getEnum is protected - so can't delegate.\n\nThe easiest solution would have been just subclassing NRQ - Lucene shouldn't make stuff like this so hard... we should simply document that most of the classes are not meant to be overridden - and back compat does not extend to subclassing unless the class was specifically designed for it. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12761350",
            "date": "2009-10-01T21:26:01+0000",
            "content": "Does the highlighter rewrite before checking the query? In this is not the case the simpliest thing to do would be the following: Just wrap it into a Query subclass and rewrite it to NRQ. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12761366",
            "date": "2009-10-01T22:17:57+0000",
            "content": "A even simplier workaround:\nInstead of using a NRQ, wrap a NRF with ConstantScoreQuery (just change TrieField.getRangeQuery()). You will loose auto-rewrite if only few terms are affected, but for precSteps>4/6, MTQ default would also use ConstantScoreQuery. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12761643",
            "date": "2009-10-02T17:01:07+0000",
            "content": "I was about to merge that last changed needed (rewrite fix) with Yoniks patch - but it looks like Yoniks patch is missing the SolrQueryWrapper class ... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12761647",
            "date": "2009-10-02T17:11:36+0000",
            "content": "missing \"svn add\" strikes again.... attaching new patch. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12761749",
            "date": "2009-10-02T22:16:24+0000",
            "content": "Instead of using a NRQ, wrap a NRF with ConstantScoreQuery\n\nYep, that would work too.  Your call Mark  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12761757",
            "date": "2009-10-02T22:24:32+0000",
            "content": "On first blush, I've got to think the wrapper is better.\n\nWe don't lose the few terms -> faster booleanquery that way, and I'm not sure I see any advantage to using CSQ. So its not a huge weight towards the wrapper, but we now have it, and it does weigh that way it would seem to me ...\n\nUwe? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12761759",
            "date": "2009-10-02T22:27:57+0000",
            "content": "I have no preference...\n\nBut we fix the highlighter bug in lucene trunk, too? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12761761",
            "date": "2009-10-02T22:30:47+0000",
            "content": "But we fix the highlighter bug in lucene trunk, too?\n\nYup, def. The only reason we are trying to sidestep here is to avoid having to update the jar in Solr. Its just a hassle. What do we call it and how do we track it?\nBack against the wall, I think it makes sense, but not if we can sidestep and go pure 2.9 release.\n\nI'll commit a fix in Lucene over the weekend - super easy fix there anyway. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12761763",
            "date": "2009-10-02T22:34:01+0000",
            "content": "I would also stay with 2.9 in Solr. Just mark the removal of the wrapper as a TODO item after the next lucene update. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775774",
            "date": "2009-11-10T15:52:08+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}