{
    "id": "SOLR-8933",
    "title": "SolrDispatchFilter::consumeInput logs \"Stream Closed\" IOException",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5.2",
            "5.6",
            "6.0.2",
            "6.1",
            "7.0"
        ],
        "affect_versions": "4.10.3",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "After SOLR-8453 we started seeing some IOExceptions coming out of SolrDispatchFilter with \"Stream Closed\" messages.\n\nIt looks like we are indeed closing the request stream in several places when we really need to be letting the web container handle their life cycle. I've got a preliminary patch ready and am working on testing it to make sure there are no regressions.\n\nA very strange piece of this is that I have been entirely unable to reproduce it on a unit test, but have seen it on cluster deployment quite consistently.",
    "attachments": {
        "SOLR-8933.patch": "https://issues.apache.org/jira/secure/attachment/12796855/SOLR-8933.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-04T16:54:52+0000",
            "author": "Mike Drob",
            "content": "Attaching a trunk patch. ",
            "id": "comment-15224501"
        },
        {
            "date": "2016-04-05T17:16:23+0000",
            "author": "Mark Miller",
            "content": "SingleThreadedJsonLoader looks like it's off?\n\n\n      try {\n        // We won't close this stream because it belongs to ServletContainer Request\n        Reader reader = stream.getReader();\n        if (log.isTraceEnabled()) {\n          String body = IOUtils.toString(reader);\n          log.trace(\"body\", body);\n          reader = new StringReader(body);\n        }\n\n        this.processUpdate(reader);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot parse provided JSON: \" + e.getMessage());\n      }\n      \n      parser = new JSONParser(reader);\n      this.processUpdate();\n    }\n\n ",
            "id": "comment-15226691"
        },
        {
            "date": "2016-04-05T20:49:08+0000",
            "author": "Mike Drob",
            "content": "Thanks for catching that, I had started with an unclean workspace. Here's an updated patch. ",
            "id": "comment-15227115"
        },
        {
            "date": "2016-04-06T14:36:23+0000",
            "author": "Mark Miller",
            "content": "Can we clear up the report a bit? I'm kind of confused as it is.\n\nSolrDispatchFilter::consumeInput logs \"Stream Closed\" IOException\n\nHave we ever actually seen that happen with Jetty or on trunk, or have we still only seen it with a version of 4.10.3 and Tomcat?\n\nA very strange piece of this is that I have been entirely unable to reproduce it on a unit test, but have seen it on cluster deployment quite consistently.\n\nSame question - a unit test on 4.10.3 version or trunk or both? Same with the the cluster deployment? Is that older? Tomcat or Jetty?\n\nJust trying to understand when we are talking about our 4.10.3 version, latest trunk, and Tomcat vs Jetty.\n\nLast I had seen, while we don't want to close these streams early regardless, on trunk with Jetty, it doesn't actually log anything or cause us any grief.\n ",
            "id": "comment-15228355"
        },
        {
            "date": "2016-04-06T14:39:15+0000",
            "author": "Mark Miller",
            "content": "Also, are we sure this patch catches all the spots this can happen on trunk? How did you track down each spot the streams are closed early?\n\nIs there any chance this can be added to forbidden APIs? Not sure offhand if it can actually cover this case. Uwe Schindler? ",
            "id": "comment-15228365"
        },
        {
            "date": "2016-04-06T14:52:51+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nUnfortunately you cannot prevent closing with forbiddenApis, because it would prevent all Closeable.close calls.\n\nMy tip is to wrap the stream with a wrapper that intercepts close() in the dispatch filter. Lots of webapps are doing this.\n\nIn my personal opinion, the server container should take care of preventing the close.\n\nIoutils has a wrapper for this! ",
            "id": "comment-15228392"
        },
        {
            "date": "2016-04-06T15:32:30+0000",
            "author": "Mike Drob",
            "content": "Have we ever actually seen that happen with Jetty or on trunk, or have we still only seen it with a version of 4.10.3 and Tomcat?\nI've only seen it on 4.10.3 and Tomcat. As Uwe Schindler alludes to later, Jetty might be taking care of this for us.\nAlso, are we sure this patch catches all the spots this can happen on trunk? How did you track down each spot the streams are closed early?\nI wrapped the request and intercepted requests to close() and logged them with stack traces. I had removed this for the patch because I wasn't confident in the performance impact that I would be causing, but can easily add it back. ",
            "id": "comment-15228467"
        },
        {
            "date": "2016-04-06T21:00:52+0000",
            "author": "Mark Miller",
            "content": "I've only seen it on 4.10.3 and Tomcat. As Uwe Schindler alludes to later, Jetty might be taking care of this for us.\n\nOkay. Just want anyone reading this issue to be able to understand whether and how it might impact them. I still had not seen this have any effect with Jetty here.\n\nI wrapped the request and intercepted requests to close() and logged them with stack traces. I had removed this for the patch because I wasn't confident in the performance impact that I would be causing, but can easily add it back.\n\nI don't think we need it committed, just how you went about it documented. Since we can't forbid this from coming into the code again, we at  least want to make this easy on the next person who has to tackle it by getting this info in the ticket.\n\nTrunk and 6x will always diverge some too, so probably also good to note specifically which branch(s) has been cleared. ",
            "id": "comment-15229100"
        },
        {
            "date": "2016-04-06T21:03:13+0000",
            "author": "Mike Drob",
            "content": "I could put in the wrapping and instrumentation, and then hide it behind a flag. I'll look at doing that and upload a new patch. ",
            "id": "comment-15229102"
        },
        {
            "date": "2016-04-07T17:02:23+0000",
            "author": "Mike Drob",
            "content": "Did some further research on why this error doesn't show up with Jetty. It appears that HttpInput::close() (the jetty-server implementation of ServletInputStream) is a no-op and takes care of the clean-up by calling recycle at some later point. Unsure if it's worth the effort to be technically correct without producing any impact otherwise. ",
            "id": "comment-15230569"
        },
        {
            "date": "2016-04-07T17:28:01+0000",
            "author": "Mark Miller",
            "content": "Unsure if it's worth the effort to be technically correct\n\nI think we want to be technically correct here - we don't want to have to count on one specific impl protecting us from ourselves. ",
            "id": "comment-15230626"
        },
        {
            "date": "2016-04-07T17:37:17+0000",
            "author": "Mike Drob",
            "content": "Alright, here's another patch that adds the instrumentation hidden behind a system property. ",
            "id": "comment-15230672"
        },
        {
            "date": "2016-04-07T18:18:00+0000",
            "author": "Uwe Schindler",
            "content": "Why not just enable it during \"test mode\". So when a test executes, the wrapper is added. This can be done by a sysproperty, but we have one already: jetty.testmode or like that, which is set during running tests. ",
            "id": "comment-15230752"
        },
        {
            "date": "2016-04-07T21:16:12+0000",
            "author": "Mike Drob",
            "content": "Ioutils has a wrapper for this!\nWhich IOUtils? I didn't see this in o.a.lucene.util or o.a.solr.common.util. I'm currently adding a new class CloseShieldServletInputStream inspired by the Apache commons-io CloseShieldInputStream which was almost good enough to use. There's maybe some clever way to handle this via generics, reflection, and proxies, but I think that suffers in terms of maintainability.\n\nWhy not just enable it during \"test mode\"\nDone. Originally I thought there was value in fine grained control to enable the warning, but at this point I'm not convinced that is true. ",
            "id": "comment-15231085"
        },
        {
            "date": "2016-04-07T21:31:45+0000",
            "author": "Uwe Schindler",
            "content": "Which IOUtils? I didn't see this in o.a.lucene.util or o.a.solr.common.util.\n\nSorry I was thinking of commons-io instead of IOUtils. Was a typo!\n\nCloseShieldServletInputStream inspired by the Apache commons-io CloseShieldInputStream which was almost good enough to use. \n\nI would just use the CloseShieldInputStream. The additional APIs provided by ServletInputStream or ServletOutputStream are not used by Solr. Actually we put some of them to the forbidden-apis list (because of stupidity and ISO-8859-1 defaults from earlier days). See lucene/tools/forbiddenApis/servlet-api.txt\n\nI looked at this. There is no penalty by the wrapping - so you can also do it by default (with CloseShieldInputStream, no specialization). This is just optimized away... A method that just delegates to another methods is always removed by the VM. ",
            "id": "comment-15231109"
        },
        {
            "date": "2016-04-07T21:46:29+0000",
            "author": "Mike Drob",
            "content": "I would just use the CloseShieldInputStream. The additional APIs provided by ServletInputStream or ServletOutputStream are not used by Solr. Actually we put some of them to the forbidden-apis list (because of stupidity and ISO-8859-1 defaults from earlier days). See lucene/tools/forbiddenApis/servlet-api.txt\nDoesn't matter that we don't use the extra APIs, the type signature of ServletRequest::getInputStream still demands a ServletInputStream so that is what we have to return when wrapping the request object. The other option is to go even deeper down the hierarchy, cast to org.eclipse.jetty.server.Request and then manipulate the input stream directly from there, but that feels much more invasive and brittle. ",
            "id": "comment-15231146"
        },
        {
            "date": "2016-04-08T06:16:20+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\n\nDoesn't matter that we don't use the extra APIs, the type signature of ServletRequest::getInputStream still demands a ServletInputStream so that is what we have to return when wrapping the request object. \n\nYeah, I see you are wrapping the whole ServletRequest.\n\nIn any case, I skimmed through the patch: There is one problem. You don't close ContentStream's InputStream anymore. But there are cases in Solr, where the ContentStream does not come from a Request, but from somewhere else: It could also be the \"virtual\" stream from the URL param (OK this one does not need to be closed), but it could also be a remote stream e.g,, if you pass a stream.url parameter to the servlet. In that case it is never closed.\n\nThis would then be a bug!!! I'd suggest to do the following: Always wrap with CloseShield in DispatchFilter and ignore the close without logging anything (for safety with non-Jetty or later Jetty versions) and revert all other changes in Solr. To me it is unnatural to not close a stream after you have consumed it. I'd also change the consumers to try-with-resources.\n\nThe ContentStream tests are using remote streams (actually a file:// URL for testing). So on Windows, tests should fail with a resource leak there. ",
            "id": "comment-15231700"
        },
        {
            "date": "2016-04-08T11:57:27+0000",
            "author": "Mark Miller",
            "content": "To me it is unnatural to not close a stream after you have consumed it.\n\nI don't like closing it at all. I think in java it is natural - you close the streams you create, not the open streams that are passed to you. ",
            "id": "comment-15232076"
        },
        {
            "date": "2016-04-08T12:00:58+0000",
            "author": "Mark Miller",
            "content": "You don't close ContentStream's InputStream anymore.\n\nThat sounds like perhaps ContentStream should be closed and understand more about the lifecycle of the inputstream it's using so that only streams it owns are closed.\n\nIt really seems strange to count on this Jetty impl detail and close streams we don't own. ",
            "id": "comment-15232084"
        },
        {
            "date": "2016-04-08T13:58:36+0000",
            "author": "Mike Drob",
            "content": "The ContentStream tests are using remote streams (actually a file:// URL for testing). So on Windows, tests should fail with a resource leak there.\nThe cases in ContentStreamTest are still closing everything. I don't understand what the relation there is. I haven't tested with Windows though, so maybe there is additional nuance I am missing.\n\nI found the part where we are processing remote stream parameter to set the content stream... Maybe it makes sense to make ContentStream implement Closeable and then we can know to close the URL and File streams but not the Servlet, Byte, or String streams. They're all build from the Request in SolrRequestParsers::parse - at which point we can make that determination.\n\nThe next question becomes then, who is responsible for closing the ContentStream? It's easy to make the SolrRequest responsible for the ContentStreams it creates, but I am not sure if there are other cases. And there are too many warnings in the project for me to reliably tell what I'm missing.\n\nHere's a proposed patch heading down this path, likely incomplete. ",
            "id": "comment-15232215"
        },
        {
            "date": "2016-04-08T18:30:09+0000",
            "author": "Mike Drob",
            "content": "A more thorough patch. I think I got everything in this one, but the usages I tracked down were all found via eclipse 'find usage.' There might be more. ",
            "id": "comment-15232670"
        },
        {
            "date": "2016-04-11T15:16:11+0000",
            "author": "Mike Drob",
            "content": "So it occurred to me that we might be able to get away with wrapping the HttpRequestContentStream in a CloseShieldInputStream for minimal changes, assuming that everything else in the code base behaves consistently by reading the content stream and not the stream from the request, and then let various handlers/parsers/etc. still try to close the stream when they are done. ",
            "id": "comment-15235264"
        },
        {
            "date": "2016-04-12T23:04:05+0000",
            "author": "Mike Drob",
            "content": "Attaching a much simpler patch that I think still addresses the underlying issue of relying on Jetty's no-op close impl. ",
            "id": "comment-15238192"
        },
        {
            "date": "2016-04-13T17:52:47+0000",
            "author": "Mark Miller",
            "content": "What about the outputstream? We should give that the same treatment. ",
            "id": "comment-15239689"
        },
        {
            "date": "2016-04-13T18:12:36+0000",
            "author": "Mark Miller",
            "content": "ServletInputStreamWrapper\n\nLet's add a class comment that mentions why this exists.\n\n+      if (System.getProperty(\"jetty.testMode\") != null && !retry) {\n\nI really don't like introducing any memory barriers for this at such an important code path. I wonder if we could use an assert and private method somehow. \n\nIt seems that even if it works, it's less than ideal to make it a static member and count on initialize vs setting the test sys prop order, but perhaps that is an option as well?\n\nnew CloseShieldInputStream\n\nI think it's worth adding a small comment when we use this that says something like: protect container owned streams from being closed by Solr, see SOLR-8933\n\nlog.warn(\"\", new IOException(\"Attempted close of request input stream.\"));\n\nSince this is test logging, perhaps it should be ERROR so that violators feel worse about it if they see the logging. Warnings are easy to ignore. ",
            "id": "comment-15239738"
        },
        {
            "date": "2016-04-14T02:19:55+0000",
            "author": "Mike Drob",
            "content": "Patch that adds docs and provides the same treatment to (most) output streams.\n\nI decided to leave the log messages at warn since even if they appear, the problem has been largely mitigated away already. ",
            "id": "comment-15240464"
        },
        {
            "date": "2016-04-14T04:21:12+0000",
            "author": "Mark Miller",
            "content": "the problem has been largely mitigated away already.\n\nThen there should be no reason to introduce this test code path into the production code.\n\nI think there is good reason though - to make sure users of this API use it properly. If we are going to try and fix this at all, we want to maintain it rather than reverting to counting on Jetties internal impl. That is what the test mode code is all about. So I think Error is more appropriate than INFO, but actually...\n\nWhich makes me think, actually, more than logging at Error level, we should probably fail an assert there and prevent tests from passing. We are looking to enforce this if we can - a logging indicator only would be worst case I think.\n\nWe want the build to fail when someone adds some new code and it does not use a shield but should. ",
            "id": "comment-15240562"
        },
        {
            "date": "2016-04-14T04:38:51+0000",
            "author": "Mike Drob",
            "content": "Which makes me think, actually, more than logging at Error level, we should probably fail an assert there and prevent tests from passing. We are looking to enforce this if we can - a logging indicator only would be worst case I think.\nYes! This makes sense to me, now that you bring it up. I'm not used to using asserts on other projects, but they make sense here.\n\nAttaching a patch that uses asserts instead of logging. (Should it do both, on the off chance that testMode is enabled but asserts are disabled?)\n\nI have not run the full test suite on this yet, I'll let it go overnight and see what shakes out, but wanted to get the patch up for more eyes first. ",
            "id": "comment-15240576"
        },
        {
            "date": "2016-04-18T18:21:38+0000",
            "author": "Mike Drob",
            "content": "Ran the tests, most of them looked fine, there were a few that failed but passed when I reran them so I didn't take too much note.\n\nUwe Schindler, Mark Miller - what do y'all think? ",
            "id": "comment-15246237"
        },
        {
            "date": "2016-04-18T21:14:04+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nI am fine with the way how it is handles by SolrRequestParsers. This was my only complaint.\n\nI do not take care if we should rely on streams not closed or keep them open, I was just afraid of resource leaks because ContentStreams were not closed anymore in earlier patches. But this is perfectly solved by commons-io CloseShield just inside SolrRequestParsers. For everything else (preventing closing of the underlying ServletStreams) inside SolrDispatchFilter: I have no strong preference. But code looks fine. I leave that open to You and Mark how to handle this.. ",
            "id": "comment-15246548"
        },
        {
            "date": "2016-04-19T22:05:26+0000",
            "author": "Mark Miller",
            "content": "I see some tests now fail due to the new assert. Seems there are some closes we don't shield still. ",
            "id": "comment-15248770"
        },
        {
            "date": "2016-04-20T02:35:47+0000",
            "author": "Mike Drob",
            "content": "I thought I got all of the test failures previously, looks like I missed two usages though. Pretty confident that I got them this time, thanks for verifying as well, Mark Miller ",
            "id": "comment-15249148"
        },
        {
            "date": "2016-04-21T12:13:16+0000",
            "author": "Mark Miller",
            "content": "This switches to using an assert to enable the test code rather than the system property. We don't always necessarily use jetty.testMode and we would like to be sure this is checked for every test. I did have to add a system property to turn off the check for JettyWebappTest though (jetty code closes the stream but it trips our protection assert). ",
            "id": "comment-15251776"
        },
        {
            "date": "2016-04-21T12:58:17+0000",
            "author": "Mark Miller",
            "content": "I'm also going to randomly disable the test mode in SolrDispatchFilter so we are sure all tests will also run properly without this code. ",
            "id": "comment-15251859"
        },
        {
            "date": "2016-04-21T16:54:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f3de22377486e88ed12427c3bbd3a89c7c051328 in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f3de223 ]\n\nSOLR-8933: Solr should not close container streams. ",
            "id": "comment-15252194"
        },
        {
            "date": "2016-05-03T14:30:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 95c5d92f109b4aa9cbffcfaf0802be266157c1f5 in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=95c5d92 ]\n\nSOLR-8933: Solr should not close container streams. ",
            "id": "comment-15268795"
        },
        {
            "date": "2016-05-03T14:36:12+0000",
            "author": "Mark Miller",
            "content": "Thanks Mike! ",
            "id": "comment-15268802"
        },
        {
            "date": "2016-05-09T22:02:31+0000",
            "author": "Hoss Man",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 ",
            "id": "comment-15277145"
        },
        {
            "date": "2016-06-18T00:23:29+0000",
            "author": "Steve Rowe",
            "content": "Reopening to backport to 6.0.2, 5.6 and 5.5.2. ",
            "id": "comment-15337291"
        },
        {
            "date": "2016-06-18T00:27:31+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2049471579db8775dd3df01fd1386c7f43ed4b0e in lucene-solr's branch refs/heads/branch_5_5 from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2049471 ]\n\nSOLR-8933: Solr should not close container streams. ",
            "id": "comment-15337311"
        },
        {
            "date": "2016-06-18T00:27:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9c81c77baec53fd60163a3e1d2a4489e081f2eaa in lucene-solr's branch refs/heads/branch_5x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9c81c77 ]\n\nSOLR-8933: Solr should not close container streams. ",
            "id": "comment-15337312"
        },
        {
            "date": "2016-06-18T00:27:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f6d40e3e668a0c5cd4f11493f11afeaf1a45d267 in lucene-solr's branch refs/heads/branch_5x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f6d40e3 ]\n\nSOLR-8933: Remove misplaced CHANGES entry ",
            "id": "comment-15337313"
        },
        {
            "date": "2016-06-18T00:27:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6f8d306ea8ca96c4c6edfffcfed7c300d328716a in lucene-solr's branch refs/heads/branch_6_0 from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6f8d306 ]\n\nSOLR-8933: Solr should not close container streams. ",
            "id": "comment-15337314"
        },
        {
            "date": "2016-06-25T20:33:53+0000",
            "author": "Steve Rowe",
            "content": "Bulk close issues released with 5.5.2. ",
            "id": "comment-15349805"
        }
    ]
}