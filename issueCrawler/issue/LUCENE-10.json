{
    "id": "LUCENE-10",
    "title": "Colon character not searchable by QueryParser",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "org.apache.lucene.queryParser.QueryParser does not allow the colon character to\nbe included in search text.  When I don't filter colon characters from user\ninput in Eyebrowse's SearchList servlet, I get the following exception when\nseraching for the text \"10:\" (minus the quotes):\n\norg.apache.lucene.queryParser.ParseException: Encountered \"<EOF>\" at line 1,\ncolumn 3.\nWas expecting one of:\n    \"(\" ...\n    <QUOTED> ...\n    <NUMBER> ...\n    <TERM> ...\n    <WILDTERM> ...\n    <RANGEIN> ...\n    <RANGEEX> ...\n\n        at\norg.apache.lucene.queryParser.QueryParser.generateParseException(Unknown Source)\n        at org.apache.lucene.queryParser.QueryParser.jj_consume_token(Unknown\nSource)\n        at org.apache.lucene.queryParser.QueryParser.Clause(Unknown Source)\n        at org.apache.lucene.queryParser.QueryParser.Query(Unknown Source)\n        at org.apache.lucene.queryParser.QueryParser.parse(Unknown Source)\n        at org.apache.lucene.queryParser.QueryParser.parse(Unknown Source)\n        at org.tigris.eyebrowse.LuceneIndexer.search(LuceneIndexer.java:207)\n        at org.tigris.eyebrowse.core.SearchList.core(SearchList.java:138)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2002-01-29T05:17:07+0000",
            "content": "QueryParser should allow a method of escaping the colon character, preferably\nusing the backspace character in the position before it.  I assume this consists\nof modifying the JavaCC grammar to take escaping into account. ",
            "author": "Daniel Rall",
            "id": "comment-12320983"
        },
        {
            "date": "2002-01-29T07:57:26+0000",
            "content": "I'll add a mechanism for escaping all the special characters.   ",
            "author": "Brian Goetz",
            "id": "comment-12320984"
        },
        {
            "date": "2002-05-07T01:25:53+0000",
            "content": "Any word on this?  If no one has time to look into it, I'd be willing to take a\nlook if someone will point me in the right direction.  Brian? ",
            "author": "Daniel Rall",
            "id": "comment-12320985"
        },
        {
            "date": "2002-05-07T04:46:26+0000",
            "content": "I think we were hung up on assigning an escape character.  \\ was preferred by \nthe unix-types, but the windows-types felt this would conflict with DOS path \nnames.  \n\nBut I guess \\ is OK.  Will do. ",
            "author": "Brian Goetz",
            "id": "comment-12320986"
        },
        {
            "date": "2002-10-31T01:11:10+0000",
            "content": "I think this has been fixed, and the escape character added, although it looks\nlike there are either some problems with it, or it is not clear how the escape\ncharacter should be used.\nC.f. bug 12950 and bug 12444. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320987"
        },
        {
            "date": "2003-01-05T00:49:08+0000",
            "content": "It looks like the escape character works fine, and the key is to use an Analyzer\nthat will not throw it out.  StandardAnalyzer does this, but WhitespaceAnalyzer\ndoes not.  One can write a custom Analyzer if WhitespaceAnalyzer does not meet\nall the application requirements.\n\nWow, 1 year old bug. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320988"
        }
    ]
}