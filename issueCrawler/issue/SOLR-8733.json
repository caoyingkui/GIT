{
    "id": "SOLR-8733",
    "title": "versions=true on Optimistic Concurrency updates doesn't work with in multi shard collections",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Noticed this while working on SOLR-445...\n\nthe versions=true param is documented as an option that can be used when doing updates if you care about opportunistic concurrency so that you know for certain which version was associated with each update you send, w/o needing to issue a subsequent /get request for the updated documents (which might return some newer version if another client did an update immediately after you...\n\nhttps://cwiki.apache.org/confluence/display/solr/Updating+Parts+of+Documents\n\nIronically, even though DistributedUpdateProcessor is where all of the opportunistic concurrency code lives, and the logic for versions=true is handled, it does nothing to ensure that the results are populated when requests are forwarded to other leaders - instead, the code seems to just assume all updates have their version assigned locally, so they wind up being \"0\" ...\n\nSingle node example of it working properly...\n\n$ bin/solr -e techproducts -noprompt\n...\n$ curl -H 'Content-Type: application/json' 'http://localhost:8983/solr/techproducts/update?versions=true' --data-binary '[{\"id\":\"abc!111\",\"foo_s\":\"one\"}, {\"id\":\"XYZ!222\",\"foo_s\":\"two\"}]'\n{\"responseHeader\":{\"status\":0,\"QTime\":10},\"adds\":[\"abc!111\",1527095970400043008,\"XYZ!222\",1527095970402140160]}\n\n\n\nMultinode multi-shard example of current broken behavior...\n\n$ bin/solr -e cloud -noprompt\n...\n$ curl -H 'Content-Type: application/json' 'http://localhost:8983/solr/gettingstarted/update?versions=true' --data-binary '[{\"id\":\"abc!111\",\"foo_s\":\"one\"}, {\"id\":\"XYZ!222\",\"foo_s\":\"two\"}]'\n{\"responseHeader\":{\"status\":0,\"QTime\":32},\"adds\":[\"abc!111\",0,\"XYZ!222\",0]}",
    "attachments": {
        "SOLR-8733_incomplete_test.patch": "https://issues.apache.org/jira/secure/attachment/12805009/SOLR-8733_incomplete_test.patch",
        "TestReturnedVersions.java": "https://issues.apache.org/jira/secure/attachment/12805204/TestReturnedVersions.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-19T18:42:49+0000",
            "author": "Hoss Man",
            "content": "i totally forgot about this issue until it bit me in the ass when i tried writing a Stress test of optimistic concurrency + atomic updates.\n\nI'm attaching my (extremely incomplete) work in progress since even in it's current state, it serves as fair example of this problem. ",
            "id": "comment-15291915"
        },
        {
            "date": "2016-05-20T12:07:41+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Here's a simple test that demonstrates this problem in a single shard, multiple replicas setup. Here, the leader returns the versions, but the two replicas don't. ",
            "id": "comment-15293235"
        },
        {
            "date": "2017-03-10T17:51:47+0000",
            "author": "Yonik Seeley",
            "content": "the versions=true param is documented\n\ninteresting... \n\nFWIW, I implemented single-shard versions=true for internal testing needs a long time ago.  I specifically never documented it because it didn't have distributed / forwarding support and because I didn't know about the overhead / issues that support might commit us to.  I figured the question of if it should be a public API would be a future discussion. ",
            "id": "comment-15905476"
        }
    ]
}