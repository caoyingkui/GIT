{
    "id": "LUCENE-7150",
    "title": "geo3d public APIs should match the 2D apis?",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "I'm struggling to benchmark the equivalent to LatLonPoint.newDistanceQuery in the geo3d world.\n\nIdeally, I think we'd have a Geo3DPoint.newDistanceQuery?  And it would take degrees, not radians, and radiusMeters, not an angle?\n\nAnd if I index and search using PlanetModel.SPHERE I think it should ideally give the same results as LatLonPoint.newDistanceQuery, which uses haversin.",
    "attachments": {
        "LUCENE-7150-sphere.patch": "https://issues.apache.org/jira/secure/attachment/12796109/LUCENE-7150-sphere.patch",
        "LUCENE-7150.patch": "https://issues.apache.org/jira/secure/attachment/12795977/LUCENE-7150.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15216842",
            "author": "Karl Wright",
            "date": "2016-03-29T21:10:48+0000",
            "content": "One problem at the moment is that all of geo3d works against a unit sphere/ellipsoid, and uses units of radians.  The Geo3DPoint does the same.  Argument compatibility would require that this be changed to degrees and meters, and a common measure of earth radius be introduced.\n\nConverting everything to degrees and meters is both unnecessary and unwise, in my opinion.  It introduces constants all over the place that really don't add anything logically or numerically.  But there are a number of shapes that one creates now using radians, e.g polygons, circles, xyz solids, rectangles, etc.   Some of these use a builder-type metaphor which means multiple method invocations are needed to construct the object.\n\nSo maybe it's possible, but non-trivial, to construct a wrapper around geo3d for constructing objects?  Seems like a lot of work for not much gain.\n "
        },
        {
            "id": "comment-15216884",
            "author": "Karl Wright",
            "date": "2016-03-29T21:31:25+0000",
            "content": "Another interesting question this begs is what exactly is the public API of geo3d?\n\nI would claim it consists of the following:\n\n\n\tConstruction of shapes\n\tConstruction of points\n\tEvaluating intersection/overlap/etc between shapes (GeoShape interface)\n\tEvaluating relationship between shapes and points (Membership interface)\n\tComputing \"inside\" distances (as represented by the GeoDistance interface)\n\tComputing \"outside\" distances (as represented by GeoOutsideDistance interface)\n\n\n\nMichael McCandless, would you agree?\n "
        },
        {
            "id": "comment-15216902",
            "author": "Robert Muir",
            "date": "2016-03-29T21:40:51+0000",
            "content": "\nOne problem at the moment is that all of geo3d works against a unit sphere/ellipsoid, and uses units of radians.\n\nBut this is an implementation detail. Literally, no user cares about this.\n\nThe api should be simple: it should take common stuff that users have like latitude, longitude, distance in meters. A user could care less what is happening behind the scenes!\n\nIt does not matter about esoteric use cases, it does not matter if this geo3d can be used to model the earth the shape of an apple or to compute distance on jupiter\u2019s rings.\n\nWe should provide one field: one that works on planet earth, takes lat,lon,meters, stuff like that. Anything else can be a custom query. "
        },
        {
            "id": "comment-15216918",
            "author": "Ryan Ernst",
            "date": "2016-03-29T21:55:05+0000",
            "content": "One problem at the moment is that all of geo3d works against a unit sphere/ellipsoid, and uses units of radians.\nBut this is an implementation detail. Literally, no user cares about this.\n\nI agree this should be an implementation detail. Having all of these \"solids\" and stuff as part of the public api just means 0.00001% will ever use this, and that is a lot of code to keep around for such an esoteric use case.  Advanced users like that can still use eg PointsFormat to index in multiple dimensions as their use case necessitates, but \"geo\" functionality should really be simple for 99.9999% of users.  I'm happy that we have geo3d here, but I think the name still needs to be clearer (this is not 3d that almost any user would ever think about) and we need public apis (and those to be the only public apis) that operate the exact same as the other sphere based lat/lon geo support we have (as the issue title implies). "
        },
        {
            "id": "comment-15216924",
            "author": "Karl Wright",
            "date": "2016-03-29T21:59:40+0000",
            "content": "It escapes me why degrees and distance in meters is a \"natural\" measurement.  To me, that's an arbitrary decision that somebody made (here).  The distance in meters as being the way you specify radii of circles is the most problematic.\n\nBut I fully understand that Lucene has already decided what units it intends to use and Geo3d in its current form is incompatible with that.  And yet, \"meters\" implies a surface distance and geo3d doesn't even have a concept of surface distance.  You could describe radii in degrees and that could match, but that's not compatible with the 2D implementation.\n\nSo should I withdraw this contribution entirely?  What is your suggestion? "
        },
        {
            "id": "comment-15216940",
            "author": "Karl Wright",
            "date": "2016-03-29T22:09:34+0000",
            "content": "How do you understand that people would use geometric queries?  If your notion of a geometric query is only all documents within circles with a center then I challenge that \u2013 it's very very limiting and would not handle polygons, paths, rectangles, or any of the other many variants of areas somebody may well want to search within.  If you agree that searching for those kinds of things is important, then 99.9999% of the code that you view as useless becomes 10% rather quickly, because that is what geo3d is about. "
        },
        {
            "id": "comment-15216944",
            "author": "Robert Muir",
            "date": "2016-03-29T22:13:09+0000",
            "content": "\nIt escapes me why degrees and distance in meters is a \"natural\" measurement. To me, that's an arbitrary decision that somebody made (here). \n\nIts not arbitrary. Look up your home town on wikipedia, the location is given in latitude and longitude, not radians. This is just the way it is, its not any decision that was made here, and its not arbitrary at all. It is just the way the world works, that is what people have. \n\n\nThe distance in meters as being the way you specify radii of circles is the most problematic.\n\nWell, this is how people measure distance in this world! How else should i find a pizza restaurant near my house? What units should i use if not meters? What does Geo3D want instead?\n\n\nBut I fully understand that Lucene has already decided what units it intends to use and Geo3d in its current form is incompatible with that. And yet, \"meters\" implies a surface distance and geo3d doesn't even have a concept of surface distance. You could describe radii in degrees and that could match, but that's not compatible with the 2D implementation.\nSo should I withdraw this contribution entirely? What is your suggestion?\n\nMy suggestion is to do some \"hiding\" of the internal details. I think all mike wanted to do was benchmark the distance query, to see how 3D compares against 2D. \n\nSo it would be better to provide a Geo3DPoint class that has less parameters (no PlanetModel), takes degrees (not radians), etc. It can internally do any conversion that is needed to work with Geo3D.\n\nNobody is arguing about what geo3d geometry apis should take. But can we fix the API to be easy to use for a lucene user? If Mike cannot figure out how to do these things, I think nobody else stands a chance. "
        },
        {
            "id": "comment-15216947",
            "author": "Ryan Ernst",
            "date": "2016-03-29T22:15:24+0000",
            "content": "It escapes me why degrees and distance in meters is a \"natural\" measurement. To me, that's an arbitrary decision that somebody made (here). \n\nIt is the way humans have viewed distance and location for hundreds of years.\n\nIf your notion of a geometric query is only all documents within circles with a center then I challenge that \u2013 it's very very limiting and would not handle polygons, paths, rectangles, or any of the other many variants of areas somebody may well want to search within.\n\nOf course I think users should be able to express queries (and indexed values!) with these concepts. But for a user to have to use do the conversion themselves from the standard units we describe locations on earth with into a spheroid location is asking too much, they will never use it. "
        },
        {
            "id": "comment-15216980",
            "author": "Karl Wright",
            "date": "2016-03-29T22:31:35+0000",
            "content": "What does Geo3D want instead?\n\nIt wants an angle.  As I said, it currently uses radians for this.  Conversion from degrees is straightforward.  Conversion from meters, on the other hand, implies that you have to compute the inverse of the Vincenty distance (if you want to do it accurately), or if your \"distance\" is in fact really the spherical surface distance (what you guys are calling the \"haversine distance\"), then it is a simple division.\n\nSo it would be better to provide a Geo3DPoint class that has less parameters (no PlanetModel), takes degrees (not radians), etc. It can internally do any conversion that is needed to work with Geo3D.\n\nThat's fine as far as it goes but runs into two issues: (1) the distance metric, and (2) how you specify shapes to search against.  I proposed possibly wrapping the shape factory methods too, but before that happens you will need to inform me what measurements are meters and what are degrees.  It really is not obvious to me what the \"obvious\" choice is. "
        },
        {
            "id": "comment-15216994",
            "author": "Karl Wright",
            "date": "2016-03-29T22:38:12+0000",
            "content": "If Mike cannot figure out how to do these things, I think nobody else stands a chance.\n\nI don't actually know what problem Mike is having.  He claims that when he halves the search radius he gets twice the points.  I gave him extremely simple code to try so I don't understand what is going on either.  I'm going to reserve judgement until we figure out what's actually happening.\n\nI am a bit concerned that you folks may be (a) making a lot out of what is probably a very simple bug, and (b) trying to oversimplify a rather complex problem.  I don't mind working hard to make API's as consistent as possible, but there is a risk.  Looking at distance measurements as a metaphor, there are lots of ways to measure distance in an ellipsoidal world.  And I don't know if you've picked the best one. "
        },
        {
            "id": "comment-15216995",
            "author": "Robert Muir",
            "date": "2016-03-29T22:38:36+0000",
            "content": "\nThat's fine as far as it goes but runs into two issues: (1) the distance metric, and (2) how you specify shapes to search against. \n\nIts no a problem at all. For 1) pick something and be consistent. Its not pluggable, its not optional, it does not need to be flexible here. For 2) something dead simple like LatLonPoint.newPolygonQuery(String, double[], double[]).\n\nThis *Point implementation we provide should be as simple and basic and natural as possible. For anything else, someone can just make their own *Point class to do something special. "
        },
        {
            "id": "comment-15216997",
            "author": "Karl Wright",
            "date": "2016-03-29T22:43:32+0000",
            "content": "pick something and be consistent\n\nIf I pick \"haversine distance in meters\" as being the input distance for this API, is that consistent with the 2D api everywhere? "
        },
        {
            "id": "comment-15217034",
            "author": "Robert Muir",
            "date": "2016-03-29T23:09:54+0000",
            "content": "I think as a start haversin would be nice? It would at least allow us to do some nice comparisons with the other geo impls. I too am curious about performance of not just distance but also things like polygon queries.\n\nRemember, we can always provide 'alternatives' at a later point or more advanced apis. We can always add Geo3DAdvancedPoint in the future with wider apis (e.g. taking planetmodel or using an ellipsoid model/vincenty/whatever), or add additional methods. Its just as a start we need a sorta dumb-downed/very simple lucene integration to start exploring the differences e.g. in query performance and so on.\n\nSo I think we should steer in the direction of simplicity, make it brain dead simple, and hard for someone to mess up (like us, trying to run benchmarks). We have to start somewhere... "
        },
        {
            "id": "comment-15217107",
            "author": "Karl Wright",
            "date": "2016-03-30T00:11:36+0000",
            "content": "Initial patch.  For Mike to test.  More patches with more shape builders will be included later. "
        },
        {
            "id": "comment-15217128",
            "author": "Robert Muir",
            "date": "2016-03-30T00:26:07+0000",
            "content": "Nice, thanks Karl!\n\nCan we add GeoUtils.checkLatitude() and checkLongitude() to the public methods taking lat/lon? They are helpful at detecting mistakes. "
        },
        {
            "id": "comment-15217140",
            "author": "Michael McCandless",
            "date": "2016-03-30T00:38:10+0000",
            "content": "Whoa, with this patch, I'm getting close to the hit counts I see with the geo2d impls (383M), even when using WGS84!  Thank you Karl Wright!\n\nIt's 383,371,877 with geo3d and 382,961,953 with geopoint, which is much closer than I've ever seen.\n\nMaybe we can share this constant for the earth?: https://github.com/apache/lucene-solr/commit/9c98f9d95801fe6e64f7653667feb30ed80b9b8e#diff-ff4af375ef79ebff087ad91ce7778959R136\n\nCan we just use Math.toRadians?  Clearly I should not be trusted to write my own toRadians  "
        },
        {
            "id": "comment-15217142",
            "author": "Karl Wright",
            "date": "2016-03-30T00:38:25+0000",
            "content": "lucene.spatial is not apparently a dependency for lucene.spatial3d at this time.  Do you want me to add this? "
        },
        {
            "id": "comment-15217154",
            "author": "Karl Wright",
            "date": "2016-03-30T00:46:21+0000",
            "content": "Sure, we can do that.  I'm sure it's doing the same thing I am: a single multiplication. "
        },
        {
            "id": "comment-15217158",
            "author": "Karl Wright",
            "date": "2016-03-30T00:49:20+0000",
            "content": "Second version of patch.\n\nCan't hook up Robert's check because I don't know how to set up a cross-project dependency in Lucene, but include commented out code for somebody else to enable. Also, FWIW, the constructors in Geo3D all have range checks as well. "
        },
        {
            "id": "comment-15217810",
            "author": "Karl Wright",
            "date": "2016-03-30T11:18:33+0000",
            "content": "This version of the patch has builders for all existing GeoShape types. "
        },
        {
            "id": "comment-15217965",
            "author": "Karl Wright",
            "date": "2016-03-30T13:28:56+0000",
            "content": "Turns out that Mike's problem was that he was incorrectly converting degrees to radians.\n\nI didn't think this was hard \u2013 after all, there is a java.lang.Math method toRadians(double degrees) which just does it.  But... "
        },
        {
            "id": "comment-15217980",
            "author": "Robert Muir",
            "date": "2016-03-30T13:43:45+0000",
            "content": "\nTurns out that Mike's problem was that he was incorrectly converting degrees to radians.\n\nI didn't think this was hard \u2013 after all, there is a java.lang.Math method toRadians(double degrees) which just does it. But...\n\nThat is one way to see it.\n\nAnother way is: Mike has struggled to try to benchmark 2D vs 3D for a long time without success. As soon as we add sugar methods to take latitude/longitude/kilometers, things suddenly appear to be working!!!! So the less error-prone API is a great improvement... "
        },
        {
            "id": "comment-15218091",
            "author": "Michael McCandless",
            "date": "2016-03-30T14:56:36+0000",
            "content": "I think we should move GeoUtils to core?  It's a small amount of code, geo search is important, and now we have 3 modules that have diverse geo support. "
        },
        {
            "id": "comment-15218155",
            "author": "Michael McCandless",
            "date": "2016-03-30T15:33:02+0000",
            "content": "OK I re-ran the 61 M point London, UK benchmark, on trunk, with the patch here so geo3d works (curse you, toRadians!!!):\n\n\n\tgeo3d: 31.5 QPS, 383,987,542 hits\n\n\n\n\n\tpoints: 28.5 QPS, 382,962,003 hits\n\n\n\n\n\tgeopoint: 15.9 QPS, 382,961,953 hits\n\n "
        },
        {
            "id": "comment-15218188",
            "author": "Karl Wright",
            "date": "2016-03-30T15:48:52+0000",
            "content": "Thanks, Mike!\nI'm actually surprised that geo3D is still at the top of the list.  But not complaining...  "
        },
        {
            "id": "comment-15218211",
            "author": "Ryan Ernst",
            "date": "2016-03-30T16:00:09+0000",
            "content": "Thanks for the patch Karl Wright! I'm a little confused about the use of a constant for radians to meters, that assumes a sphere model right? Yet the patch uses the WGS84 planet model, which is a spheroid? If we are going to start with a this simple approach (which is perfect!) should the query use PlanetModel.SPHERE?\n\nI also think using the same constant that we use for haversin is important? We currently have this defined as 6_378_137 meters for the radius in GeoUtils (Mike, +1 to sharing this so we don't redefine this stuff multiple times). If we use that constant, and a sphere model, then presumably we should get the exact same hit counts right? "
        },
        {
            "id": "comment-15218229",
            "author": "Karl Wright",
            "date": "2016-03-30T16:12:23+0000",
            "content": "As I discussed at length with Robert above, going from precise meters to angles for anything other than a sphere is hard.  For this reason, Geo3d uses angles exclusively when specifying its shapes.  This was a key design decision and cannot realistically change.  And the accurate conversion math is well-known to be challenging; it's an iterative convergence loop, in fact, much like computing the forward Vincenty distance.\n\nIt so happens that this problem exists for the 2D stuff as well; for example, the test code Mike was using to exercise the 2D stuff uses a Haversine distance in computing a circle radius based on a bounding box.  So I chose to use the great circle (haversine) distance as the basis of the \"distance in meters\" rather than expect people to an expensive calculation every time they create their query.\n\nThe number I have in the last two versions of the patch for mean earth radius, by the way, comes from the constant Mike pointed me at elsewhere in the code.  The number you state above is in fact incorrect; it is not the mean radius, but rather the equatorial radius.\n\nhttps://en.wikipedia.org/wiki/Earth_radius\n\nAbout WGS84 vs. SPHERE: Yes, if you changed all usages of \"PlanetModel.WGS84\" in Geo3DPoint.java to \"PlanetModel.SPHERE\", you should get numbers exactly like any other spherical model.  However, please also noted that for ellipsoids, Geo3D has a unique way of approximating the actual surface distance.  All Geo3d \"circles\" are in fact described by a plane that cuts through the world.  Since the world in WGS84 is an ellipsoid, the shape actually described on the surface of the world is an ellipse, not a circle.  The error this approach introduces has been calculated to be at most 0.5% for WGS84 vs. the Vincenty calculation.\n\n\n "
        },
        {
            "id": "comment-15218234",
            "author": "Michael McCandless",
            "date": "2016-03-30T16:14:53+0000",
            "content": "Can we name it newBoxQuery not newBBoxQuery, matching LatLonPoint, since a bbox (bounding box) is just one reason why one would be querying with a box? "
        },
        {
            "id": "comment-15218237",
            "author": "Michael McCandless",
            "date": "2016-03-30T16:15:22+0000",
            "content": "I'm surprised as well: it's operating on 3 dimensions instead of 2!  I thought this would be a penalty... "
        },
        {
            "id": "comment-15218246",
            "author": "Karl Wright",
            "date": "2016-03-30T16:20:43+0000",
            "content": "Rename newBBoxQuery to newBoxQuery. "
        },
        {
            "id": "comment-15218249",
            "author": "Karl Wright",
            "date": "2016-03-30T16:24:16+0000",
            "content": "Me too.\nHaving faster math matters more, I guess. "
        },
        {
            "id": "comment-15218285",
            "author": "Michael McCandless",
            "date": "2016-03-30T16:43:43+0000",
            "content": "I temporarily cutover from WGS84 to SPHERE in my checkout (see attached patch, is it correct  ) and re-ran the 61 M London, UK benchmark for geo3d:\n\n\n\t31.2 QPS, 383,578,937 hits\n\n\n\nBut ... I expected that hit count to be closer to what the 2g geo impls are giving us ... "
        },
        {
            "id": "comment-15218294",
            "author": "Michael McCandless",
            "date": "2016-03-30T16:48:20+0000",
            "content": "Hmm I'm adding polygon testing to the 6.1 M London, UK benchmark, but geo3d is angry with this:\n\n\nPOLY:\n  lats=[51.14814672999999, 51.24200108694998, 51.22066806296021, 51.07567472594126, 51.05429962903539, 51.14814672999999]\n  lons=[-0.1104487519433594, -0.23263688084967538, -0.3629490615349049, -0.36288116612674665, -0.23263923846224235, -0.1104487519433594]\nException in thread \"main\" java.lang.IllegalArgumentException: Degenerate/parallel vector constructed\n\tat org.apache.lucene.spatial3d.geom.Vector.<init>(Vector.java:77)\n\tat org.apache.lucene.spatial3d.geom.Plane.<init>(Plane.java:59)\n\tat org.apache.lucene.spatial3d.geom.SidedPlane.<init>(SidedPlane.java:48)\n\tat org.apache.lucene.spatial3d.geom.GeoPolygonFactory.buildPolygonShape(GeoPolygonFactory.java:84)\n\tat org.apache.lucene.spatial3d.geom.GeoPolygonFactory.makeGeoPolygon(GeoPolygonFactory.java:43)\n\tat org.apache.lucene.spatial3d.Geo3DPoint.newPolygonQuery(Geo3DPoint.java:119)\n\tat perf.IndexAndSearchOpenStreetMaps.queryIndex(IndexAndSearchOpenStreetMaps.java:339)\n\tat perf.IndexAndSearchOpenStreetMaps.main(IndexAndSearchOpenStreetMaps.java:525)\n\n\n\nWhat does this mean...? "
        },
        {
            "id": "comment-15218313",
            "author": "Karl Wright",
            "date": "2016-03-30T16:54:46+0000",
            "content": "What does this mean...?\n\nIt means you have two adjacent points that are identical.\n\nMichael McCandless Looking at the values passed, it appears that the last point is the same as the first.  In geo3d it is unnecessary to specify the last point; it's implied.  The javadoc for polygons elsewhere did not make it clear that you needed to do this \u2013 but is this how the API works for 2D?  If so it's easy to correct for. "
        },
        {
            "id": "comment-15218315",
            "author": "Karl Wright",
            "date": "2016-03-30T16:57:51+0000",
            "content": "Are you sure that the 2d code is using a sphere as a world model?\n\nAlso, after talking with Ryan I am concerned that the 2d implementation is using a wacky value for the radius of the earth.  It should be using the mean earth radius, not the equatorial radius. "
        },
        {
            "id": "comment-15218349",
            "author": "Michael McCandless",
            "date": "2016-03-30T17:16:36+0000",
            "content": "Ahh OK phew \n\nYes, I think  the 2D APIs require this.  Can you fix the geo3d api to also require it (check it, then I guess remove it when forwarding to the geom impls)? "
        },
        {
            "id": "comment-15218360",
            "author": "Karl Wright",
            "date": "2016-03-30T17:21:39+0000",
            "content": "Use the same convention as for 2D for polygons of repeating one point.  Michael McCandless, this should get you unstuck. "
        },
        {
            "id": "comment-15218388",
            "author": "Michael McCandless",
            "date": "2016-03-30T17:25:00+0000",
            "content": "Thanks Karl Wright, I'll test! "
        },
        {
            "id": "comment-15218450",
            "author": "Michael McCandless",
            "date": "2016-03-30T17:55:35+0000",
            "content": "OK -poly 5 -geo3d now works!  Thanks. "
        },
        {
            "id": "comment-15218469",
            "author": "Michael McCandless",
            "date": "2016-03-30T18:04:07+0000",
            "content": "Here're the results for querying 5-gons:\n\n\n\tgeo3d (WGS84): 30.3 QPS, 282,041,551 hits\n\tpoints: 33.5 QPS, 281,983,277 hits\n\tgeopoint: 21.0 QPS, 281,983,217 hits\n\n "
        },
        {
            "id": "comment-15218503",
            "author": "Karl Wright",
            "date": "2016-03-30T18:18:40+0000",
            "content": "Michael McCandless Thanks!\n\nFWIW, polygons do not have the same issues with approximation in geo3d as circles.  They are in fact exact.  Are the 2D implementations doing real great-circle polygons, or a 2D linear interpolation? "
        },
        {
            "id": "comment-15218790",
            "author": "Michael McCandless",
            "date": "2016-03-30T20:29:41+0000",
            "content": "I would assume they are a 2D interpolation?  They operate in lat/lon space? "
        },
        {
            "id": "comment-15218802",
            "author": "Karl Wright",
            "date": "2016-03-30T20:33:17+0000",
            "content": "If they are 2D linear interpolations, then it is not unreasonable for there to be a hit count difference between true 3D polygons and linearly interpolated polygons. "
        },
        {
            "id": "comment-15219915",
            "author": "Michael McCandless",
            "date": "2016-03-31T14:16:52+0000",
            "content": "Thanks Karl Wright, I think the last patch looks good.\n\nThis is a great step forward in usability for geo3d.  I'll add TODO and reference LUCENE-7152 about validating lat/lon values, and add some javadocs for the new methods.\n\nI think for now we should leave the default planet model at WGS84, and just explain in the javadocs that there is up to 0.5% error. "
        },
        {
            "id": "comment-15219954",
            "author": "Michael McCandless",
            "date": "2016-03-31T14:43:40+0000",
            "content": "New patch, I think it's ready.\n\nI just added some javadocs, named parameters consistently with LatLonPoint (lat -> latitude, etc.), and I poached checkLatitude/Longitude with a TOOD to share it again. "
        },
        {
            "id": "comment-15220072",
            "author": "ASF subversion and git services",
            "date": "2016-03-31T15:52:15+0000",
            "content": "Commit bf0e59223d0fdf6de28f2b8a495331222e3232c8 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bf0e592 ]\n\nLUCENE-7150: add Geo3DPoint.newDistance/Box/PolygonQuery "
        },
        {
            "id": "comment-15220076",
            "author": "ASF subversion and git services",
            "date": "2016-03-31T15:53:16+0000",
            "content": "Commit 0dcf822f40f685748525698e52f0030e88cb6de9 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0dcf822 ]\n\nLUCENE-7150: add Geo3DPoint.newDistance/Box/PolygonQuery "
        },
        {
            "id": "comment-15220077",
            "author": "Michael McCandless",
            "date": "2016-03-31T15:53:54+0000",
            "content": "Thanks Karl Wright! "
        },
        {
            "id": "comment-15278956",
            "author": "Hoss Man",
            "date": "2016-05-10T21:19:21+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}