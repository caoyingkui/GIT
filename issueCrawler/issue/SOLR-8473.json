{
    "id": "SOLR-8473",
    "title": "Test Framework for Unit Testing Angular UI",
    "details": {
        "components": [
            "Admin UI"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.4",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The Solr UI has no tests. This is less than ideal. This ticket is aimed at facilitating discussion around such a test framework for unit testing components within the Angular UI.\n\nHaving a unit testing framework will encourage developers of the UI to make more modular, and thus hopefully cleaner, code, as well as providing a means to identify regressions.\n\nThe test framework I am proposing is a Karma/Jasmine combination. Karma runs the tests, Jasmine provides a BDD style framework for expressing the tests.\n\nKarma and Jasmine can be installed via npm. This would add npm as a dependency for the Lucene/Solr build process, at least at release time.\n\nKarma runs its tests within a browser. I will use, by default, Chrome. This is a bigger deal, as it will make our tests dependent upon a UI layer, such as X on Unix. \n\nI have looked into PhantomJS which is essentially the Javascript portion of a browser, but without the UI dependency, this would appear a much better solution for the headless scenario, however, I have as yet to get it to work (on MacOS). My next task would be to try it in a Linux VM.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-01T15:59:52+0000",
            "author": "Upayavira",
            "content": "See zip file attached to SOLR-8474. This file contains a single (working) unit test, executed with 'npm test' (note it requires the lastest Node (ideally 5.x) from the node website, not from apt or homebrew).\n\nAll that remains for this task is a single Junit test that defers its work to the 'npm test' command. ",
            "id": "comment-15076323"
        },
        {
            "date": "2016-01-01T16:07:08+0000",
            "author": "Mark Miller",
            "content": "This would add npm as a dependency for the Lucene/Solr build process, at least at release time.\n\nI'd really hate to add getting this setup to the release burden. Hopefully we can just setup Jenkins to do this, and the RM or voters can simply check that job? Or we make regular jobs always run these tests? Either way, it would be best if this only had to be setup on Jenkins, rather than something we put upon an RM. ",
            "id": "comment-15076324"
        },
        {
            "date": "2016-01-01T16:16:57+0000",
            "author": "Upayavira",
            "content": "Those are the kind of issues I want to discuss here. It seems that the dependency is just one of downloading the newest Node, and all other dependencies are pulled in via npm, so it isn't quite as bad as I first expected.\n\nSeeking the least invasive way to implement these tests, running them automatically on Jenkins and manually before all UI commits would seem quite reasonable.\n ",
            "id": "comment-15076325"
        },
        {
            "date": "2016-01-05T05:20:44+0000",
            "author": "David Smiley",
            "content": "Agreed; a \"-1\" vote from me to require the RM to run these tests.  Observing a Jenkins build should be sufficient.\n\nTo be clear, thank you Upayavira for your work on these tests!  So needed. ",
            "id": "comment-15082400"
        }
    ]
}