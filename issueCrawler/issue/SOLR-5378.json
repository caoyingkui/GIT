{
    "id": "SOLR-5378",
    "title": "Suggester Version 2",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The idea is to add a new Suggester Component that will eventually replace the Suggester support through the SpellCheck Component.\nThis will enable Solr to fully utilize the Lucene suggester module (along with supporting most of the existing features) in the following ways:\n\n\tDictionary pluggability (give users the option to choose the dictionary implementation to use for their suggesters to consume)\n\tMap the suggester options/ suggester result format (e.g. support for payload)\n\tThe new Component will also allow us to have \"beefier\" Lookup support instead of resorting to collation and such. (Move computation from query time to index time) with more freedom\n\n\n\nIn addition to this, this suggester version should also have support for distributed support, which was awkward at best with the previous implementation due to SpellCheck requirements.\n\nConfig (index time) options:\n\n\tname - name of suggester\n\tsourceLocation - external file location (for file-based suggesters)\n\tlookupImpl - type of lookup to use [default JaspellLookupFactory]\n\tdictionaryImpl - type of dictionary to use (lookup input) [default\n    (sourceLocation == null ? HighFrequencyDictionaryFactory : FileDictionaryFactory)]\n\tstoreDir - location to store in-memory data structure in disk\n\tbuildOnCommit - command to build suggester for every commit\n\tbuildOnOptimize - command to build suggester for every optimize\n\n\n\nQuery time options:\n\n\tsuggest.dictionary - name of suggester to use\n\tsuggest.count - number of suggestions to return\n\tsuggest.q - query to use for lookup\n\tsuggest.build - command to build the suggester\n\tsuggest.reload - command to reload the suggester\n\n\n\nExample query:\n\nhttp://localhost:8983/solr/suggest?suggest.dictionary=mySuggester&suggest=true&suggest.build=true&suggest.q=elec\n\n\nDistributed query:\n\nhttp://localhost:7574/solr/suggest?suggest.dictionary=mySuggester&suggest=true&suggest.build=true&suggest.q=elec&shards=localhost:8983/solr,localhost:7574/solr&shards.qt=/suggest\n\n\n\nExample Response:\n\n<response>\n  <lst name=\"responseHeader\">\n    <int name=\"status\">0</int>\n    <int name=\"QTime\">28</int>\n  </lst>\n  <str name=\"command\">build</str>\n  <result name=\"response\" numFound=\"0\" start=\"0\" maxScore=\"0.0\"/>\n  <lst name=\"suggest\">\n    <lst name=\"suggestions\">\n      <lst name=\"e\">\n        <int name=\"numFound\">2</int>\n        <lst name=\"suggestion\">\n          <str name=\"term\">electronics and computer1</str>\n          <long name=\"weight\">2199</long>\n          <str name=\"payload\"/>\n        </lst>\n        <lst name=\"suggestion\">\n          <str name=\"term\">electronics</str>\n          <long name=\"weight\">649</long>\n          <str name=\"payload\"/>\n        </lst>\n      </lst>\n    </lst>\n  </lst>\n</response>\n\n\n\nExample config file:\n\n\tUsing DocumentDictionary and FuzzySuggester\n\t\n\t\tSuggestion on product_name sorted by popularity with the additional product_id in the payload\n\t\n\t\n\n\n\n\n  \n  <searchComponent class=\"solr.SuggestComponent\" name=\"suggest\">\n      <lst name=\"suggester\">\n        <str name=\"name\">suggest_fuzzy_doc_dict</str>\n        <str name=\"lookupImpl\">FuzzyLookupFactory</str>\n        <str name=\"dictionaryImpl\">DocumentDictionaryFactory</str>\n        <str name=\"field\">product_name</str>\n        <str name=\"weightField\">popularity</str>\n        <str name=\"payloadField\">product_id</str>\n        <str name=\"storeDir\">suggest_fuzzy_doc_dict_payload</str>\n        <str name=\"suggestAnalyzerFieldType\">text</str>\n      </lst>\n    </searchComponent>\n\n\n\n\tUsing DocumentExpressionDictionary and FuzzySuggester\n\t\n\t\tSuggestion on product_name sorted by the expression \"((price * 2) + ln(popularity))\" (where both price and popularity are fields in the document)\n\t\n\t\n\n\n\n\n    <searchComponent class=\"solr.SuggestComponent\" name=\"suggest\">\n      <lst name=\"suggester\">\n        <str name=\"name\">suggest_fuzzy_doc_expr_dict</str>\n        <str name=\"dictionaryImpl\">DocumentExpressionDictionaryFactory</str>\n        <str name=\"lookupImpl\">FuzzyLookupFactory</str>\n        <str name=\"field\">product_name</str>\n        <str name=\"weightExpression\">((price * 2) + ln(popularity))</str>\n        <str name=\"sortField\">weight</str>\n        <str name=\"sortField\">price</str>\n        <str name=\"strtoreDir\">suggest_fuzzy_doc_expr_dict</str>\n        <str name=\"suggestAnalyzerFieldType\">text</str>\n      </lst>\n    </searchComponent>",
    "attachments": {
        "SOLR-5378-maven-fix.patch": "https://issues.apache.org/jira/secure/attachment/12615597/SOLR-5378-maven-fix.patch",
        "SOLR-5378.patch": "https://issues.apache.org/jira/secure/attachment/12609827/SOLR-5378.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Areek Zillur",
            "id": "comment-13802710",
            "date": "2013-10-23T08:31:19+0000",
            "content": "Initial Patch:\n\n\timplements SuggestComponent and SolrSuggester (along with classes for results, params, etc)\n\n\n\nTODO:\n\n\tadd more tests\n\tfix hard coded defaults\n\tadd documentation\n\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13802726",
            "date": "2013-10-23T09:11:20+0000",
            "content": "Note: the dictionary implementations still have spellcheck parameters in the tests, will fix in next patch. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13803897",
            "date": "2013-10-24T06:23:20+0000",
            "content": "Patch:\n\n\tnuked irreverent Dictionary Factories for suggesters (PlainTextDictionaryFactory and LuceneDictionaryFactory (replaced by more general DocumentDictionaryFactory)\n\tfixed tests for Dictionary Factories\n\tadded Documentation\n\tfixed hard-coded strings and defaults\n\n\n\nTODO:\n\n\tadd more documentation (SuggesterParams)\n\tadd examples\n\tadd tests for the SolrSuggester and SuggesterComponent\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13807731",
            "date": "2013-10-29T06:57:58+0000",
            "content": "Uploaded Patch:\n\n\tadded documentation\n\tadded expressions dependency to Solr [needed by DocumentExpressionDictionaryFactory]\n\tadded SuggesterComponent tests\n\tminor fixes all over\n\n\n\nTODO:\n\n\tadd DistributedSuggesterComponent tests\n\n\n\nWas wondering whether its worth it to have the onlyMorePopular option for the suggester. (default is false), when true the option sorts the suggestions alphabetically at the moment. It seems to me that this might not be very useful for suggestions (as there is no relation between lexicographic ordering and suggestion relevance). It makes sense to have the suggestions sorted by weights provided instead (default behavior). It is also to be noted that a lot of the new Lucene suggester rejects or ignores this option anyway, defaulting to sorting by weight instead (Analyzing, FuzzyAnalyzing rejects it and AnalyzingInfix ignores it). "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13812304",
            "date": "2013-11-03T09:42:58+0000",
            "content": "Updated Patch:\n\n\tAdded distributed tests [completed all functional requirements]\n\tminor changes all over\n\tNuked onlyMorePopular [always defaults to false]\n\tAdded statistics to component to be visible by admin page\n\n\n\nTODO:\n\n\tpolish test cases\n\tcomment in sizeInBytes for SuggestComponent (https://issues.apache.org/jira/browse/LUCENE-5323)\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13813728",
            "date": "2013-11-05T07:49:13+0000",
            "content": "Updated Patch:\n\n\tadded sizeInBytes for individual suggester and the suggester component\n\tminor refactoring and cleanup\n\tadded documentation\n\n "
        },
        {
            "author": "Alexey Serba",
            "id": "comment-13814714",
            "date": "2013-11-06T08:44:08+0000",
            "content": "\nIn addition to this, this suggester version should also have support for distributed support, which was awkward at best with the previous implementation due to SpellCheck requirements.\nIt seems that it is required to have query component registered in a request handler for suggester component to work correctly in distributed mode. Try to change last-components=suggest to components=suggest in solrconfig and I believe it won't work.\n\nI'm wondering what are the performance implications of having query (and others) components in a suggest request handler? "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13815213",
            "date": "2013-11-06T19:52:50+0000",
            "content": "Updated Patch:\n\n\tAdded (independent) Distributed support for suggester\n\tnew test cases\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13815221",
            "date": "2013-11-06T19:55:31+0000",
            "content": "Alexey Serba: Thanks for the insightful comment!\nThe suggester should work independently (without any other component) in the distributed case. I added a new patch which will allow the suggester component to do so.   "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13815677",
            "date": "2013-11-07T05:37:25+0000",
            "content": "This is looking awesome Areek! Thanks for contributing this. I'm going to spend some time this week going over this. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13816440",
            "date": "2013-11-07T21:21:02+0000",
            "content": "Thanks for taking the time to look through this, Shalin! Let me know if the current patch can be improved in anyway. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824418",
            "date": "2013-11-16T09:08:42+0000",
            "content": "Updated Patch:\n\n\tadded fileDelimiter parameter (LUCENE-5337)\n\tadded null checks\n\tminor fixes\n\n\n\nHey Shalin, was wondering if you got a chance to look at the patch? I did some minor updates to the patch to add the newly-added lucene functionality  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13824419",
            "date": "2013-11-16T09:11:38+0000",
            "content": "Hi Areek, yes, I'm reviewing your patch. It is just taking more time than I thought it would. I really like what I am seeing so far. This is quality work. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824420",
            "date": "2013-11-16T09:13:29+0000",
            "content": "Thanks! thats awesome. Let me know if you think the patch can be improved in any way!  "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824422",
            "date": "2013-11-16T09:17:52+0000",
            "content": "Regarding the backward compatibility stuff for lookups (in SolrSuggester.init). Do you think it make sense to keep it? I am thinking because its a new component altogether, can we just get rid of it and set a sane default? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13824435",
            "date": "2013-11-16T10:02:23+0000",
            "content": "Regarding the backward compatibility stuff for lookups (in SolrSuggester.init). Do you think it make sense to keep it? I am thinking because its a new component altogether, can we just get rid of it and set a sane default?\n\nI agree. Let's not carry over cruft to a new component. A sane default is fine. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13824439",
            "date": "2013-11-16T10:29:24+0000",
            "content": "Minor change: I had to change sortFieldTypeStr.toLowerCase() in DocumentExpressionDictionaryFactory to sortFieldTypeStr.toLowerCase(Locale.ROOT) to make the forbidden-api check pass. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824441",
            "date": "2013-11-16T10:48:32+0000",
            "content": "Updated Patch:\n\n\tadding sane Lookup default\n\tadded minor change to DocExprDictFactory (as suggested)\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824442",
            "date": "2013-11-16T11:12:14+0000",
            "content": "Added docs for LookupFactory (in previous patch). Ensured ant validate && ant documentation-lint succeds.  "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13824597",
            "date": "2013-11-16T19:50:46+0000",
            "content": "I was going through the patch and in DocumentExpressionDictionaryFactory the user has to enter the field type along with the field name. For example,\n\n      <lst name=\"sortField\">\n      \t<str name=\"name\">weight</str>\n      \t<str name=\"type\">float</str>\n      </lst>\n\n\n\nIs asking for field type necessary?\nWe could do something like this instead\n\nString sortFieldTypeStr = core.getLatestSchema().getField(sortFieldName).getType().getTypeName();\n "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13824614",
            "date": "2013-11-16T20:20:18+0000",
            "content": "Also I hit a NPE with \n\nant test  -Dtestcase=TestLuceneMatchVersion -Dtests.method=testStandardTokenizerVersions\n\n\n\nThis is because schema-luceneMatchVersion.xml doesn't not contain \"text\" fieldType and  FuzzyLookupFactory.create assumes that \"suggestAnalyzerFieldType\" field type exists. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824742",
            "date": "2013-11-17T05:12:17+0000",
            "content": "Updated Patch:\n\n\tadded checks in *AnalyzingLookupFactories to ensure that the fieldType referred by \"suggestAnalyzerFieldType\" is defined in the schema [also affects the suggester in spellchecker]\n\tuse solrconfig-suggestercomponent for distributed and normal tests, rather than polluting the solrconfig file used throughout. [makes sure no arbitrary tests fail because of using the config with another schema]\n\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824747",
            "date": "2013-11-17T05:21:40+0000",
            "content": "Thanks Varun for your comments!\n\nI think its better to be explicit in the case of DocExprDictFactory and let the users specify the fieldtype for all the bindings in the expressions they use. I was aware of the suggested method of pulling the fieldTypeName but the problem is if a user configures it such that the name of the fieldType (expl: double field) as myDouble, then there would be no easy way of figuring out what field type to use in the sortFieldType in (DocExprDict) [myDouble != double].\n\nRegarding the NPE, thanks for catching that! I have updated the patch such that no such NPEs occur in \"unrelated\" tests. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13824748",
            "date": "2013-11-17T05:36:06+0000",
            "content": "Updated patch (minor):\n\n\tadded configuration error message for HighFrequencyDictionaryFactory\n\n "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13825289",
            "date": "2013-11-18T12:32:56+0000",
            "content": "Hi Areek,\n\nMaybe I wasn't clear with how we can avoid the user to put in the \"type\" of the fieldName required for sort when using  DocumentExpressionDictionaryFactory\n\nI have uploaded a patch where providing \"type\" is not required. \n\nThis should be okay right? "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13825306",
            "date": "2013-11-18T13:25:23+0000",
            "content": "First time attempt at a patch using git.\nI committed all the changes and did a \n\ngit format-patch -1 <sha>\n\n\nPlease let me know if it does not apply cleanly. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13825699",
            "date": "2013-11-18T19:58:08+0000",
            "content": "Updated Patch:\n\n\tIncorporated Varun's changes (Thanks Varun)\n\tSimplified DocExpDict config\n\tMinor refactoring\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13825704",
            "date": "2013-11-18T20:01:53+0000",
            "content": "Thanks Varun for the improvement! It makes total sense  [for now will leave out the 'score' type for sortFields]. \nFYI: I usually do \n\ngit diff --no-prefix trunk > SOLR-5378.patch\n\nfrom the git branch I work in (that way its friendlier to svn)\n\nUpdated Description with the new DocumentExpressionDictionaryConfig. "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13825721",
            "date": "2013-11-18T20:08:55+0000",
            "content": "NOTE: There is a silent IllegalArgumentException thrown from Lucene's DocumentDictionary & DocumentExpressionDictionary when the dictionaries are fed with readers with no documents. This should not be a big issue as nothing is expected to happen anyways when a suggester is built with no documents. LUCENE-5329 will fix this issue, once its checked in.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13830650",
            "date": "2013-11-23T13:17:12+0000",
            "content": "This patch removes some unused imports. I'll commit this shortly. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13830665",
            "date": "2013-11-23T13:46:14+0000",
            "content": "Commit 1544793 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1544793 ]\n\nSOLR-5378: A new SuggestComponent that fully utilizes the Lucene suggester module and adds pluggable dictionaries, payloads and better distributed support "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13830669",
            "date": "2013-11-23T13:50:08+0000",
            "content": "Commit 1544796 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1544796 ]\n\nSOLR-5378: A new SuggestComponent that fully utilizes the Lucene suggester module and adds pluggable dictionaries, payloads and better distributed support "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13830687",
            "date": "2013-11-23T15:19:46+0000",
            "content": "Commit 1544815 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1544815 ]\n\nSOLR-5378: Fix compile issues on Java6 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13830688",
            "date": "2013-11-23T15:20:58+0000",
            "content": "Commit 1544816 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1544816 ]\n\nSOLR-5378: Fix compile issues on Java6 "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13830850",
            "date": "2013-11-24T04:09:16+0000",
            "content": "Thanks Shalin for committing this! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13831061",
            "date": "2013-11-24T21:43:39+0000",
            "content": "The failures yesterday of the Maven Jenkins build on trunk (https://builds.apache.org/job/Lucene-Solr-Maven-trunk/1033/) and branch_4x (https://builds.apache.org/job/Lucene-Solr-Maven-4.x/514/) are caused by missing license files for newly introduced indirect compile-time Solr dependencies on the expression module's dependencies in lucene/expressions/lib/*: antlr-runtime-3.5.jar, asm-4.1.jar, and asm-commons-4.1.jar.\n\nHere's where the indirect deps were introduced on trunk: https://svn.apache.org/viewvc/lucene/dev/trunk/solr/common-build.xml?r1=1544793&r2=1544792&pathrev=1544793&diff_format=f#l78.\n\nHere's the failure message from the Jenkins Maven trunk build log:\n\n\n [licenses] MISSING sha1 checksum file for: /home/hudson/.m2/repository/org/antlr/antlr-runtime/3.5/antlr-runtime-3.5.jar\n [licenses] EXPECTED sha1 checksum file : /usr/home/hudson/hudson-slave/workspace/Lucene-Solr-Maven-trunk/solr/licenses/antlr-runtime-3.5.jar.sha1\n [licenses] MISSING sha1 checksum file for: /home/hudson/.m2/repository/org/ow2/asm/asm-commons/4.1/asm-commons-4.1.jar\n [licenses] EXPECTED sha1 checksum file : /usr/home/hudson/hudson-slave/workspace/Lucene-Solr-Maven-trunk/solr/licenses/asm-commons-4.1.jar.sha1\n [licenses] MISSING sha1 checksum file for: /home/hudson/.m2/repository/org/ow2/asm/asm/4.1/asm-4.1.jar\n [licenses] EXPECTED sha1 checksum file : /usr/home/hudson/hudson-slave/workspace/Lucene-Solr-Maven-trunk/solr/licenses/asm-4.1.jar.sha1\n [licenses] Scanned 46 JAR file(s) for licenses (in 0.55s.), 3 error(s).\n\n\n\nThe Maven build problem is the assumption that compile-time dependencies in the Ant build will be Maven runtime dependencies.  When I run ant prepare-release-no-sign under solr/, though, only lucene-expressions-<version>.jar is included in the distribution - none of its dependencies are.\n\nSo, assuming that usage of the expressions module requires inclusion of its dependencies, I think there are three problems here:\n\n\n\tThe expression module dependencies should be included in the Solr distribution\n\tThe expression module dependencies' license, notice and checksum files should be included under solr/licenses/\n\tThe check-licenses task under solr/, as currently written, assumes that all dependencies are located under solr/, so using lib/ directories' contents under lucene/ from the solr/ build blocks this check from functioning properly.  I think these indirect dependencies should be made direct via inclusion in an ivy.xml file under solr/, not sure which one is appropriate.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13831502",
            "date": "2013-11-25T14:37:48+0000",
            "content": "\n\tAdded dependencies of lucene expressions module viz asm, asm-commons and antlr to Solr's ivy.xml\n\tCopied over sha, license and notice files for the dependencies to solr's license directory\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13831517",
            "date": "2013-11-25T14:59:30+0000",
            "content": "Commit 1545311 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1545311 ]\n\nSOLR-5378: Add dependencies of lucene's expressions module to Solr "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13831519",
            "date": "2013-11-25T15:01:36+0000",
            "content": "Commit 1545313 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1545313 ]\n\nSOLR-5378: Add dependencies of lucene's expressions module to Solr "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13831526",
            "date": "2013-11-25T15:07:56+0000",
            "content": "\n\n\tAdded dependencies of lucene expressions module viz asm, asm-commons and antlr to Solr's ivy.xml\n\tCopied over sha, license and notice files for the dependencies to solr's license directory\n\n\n\n+1, thanks Shalin.\n\nAlso, the following line should be removed from the definition of solr.lucene.libs in solr/common-build.xml:\n\n\n<fileset dir=\"${common.dir}/expressions/lib\"/>\n\n\n\nNow that these three jars are placed in solr/core/lib/ via resolve, the Solr war will pick them up, and so they'll be included in the Solr distribution. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13831532",
            "date": "2013-11-25T15:16:02+0000",
            "content": "Commit 1545318 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1545318 ]\n\nSOLR-5378: lucene expressions module's lib directory is not necessary in solr.lucene.libs path "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13831535",
            "date": "2013-11-25T15:16:58+0000",
            "content": "Commit 1545319 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1545319 ]\n\nSOLR-5378: lucene expressions module's lib directory is not necessary in solr.lucene.libs path "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13831542",
            "date": "2013-11-25T15:23:55+0000",
            "content": "Thanks Steve for figuring out the build failure and suggesting the fix!\n\nAreek, thanks for all the work! I'll resolve this issue for now and open another to document this feature in the Solr reference guide for 4.7 "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13831965",
            "date": "2013-11-25T22:01:07+0000",
            "content": "Thanks Steve and Shalin for figuring out the dependency/licensing issues! \n\nShalin, I can prepare the documentation for the Solr ref guide! I will open an issue for it and add a 'patch' for it. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13832352",
            "date": "2013-11-26T06:18:19+0000",
            "content": "Sounds good, thanks Areek! "
        },
        {
            "author": "Greg Harris",
            "id": "comment-14046286",
            "date": "2014-06-27T18:58:50+0000",
            "content": "Just made a new JIRA for the fact that this suggestor doesn't support multiValued fields. It will only grab the first entry to make terms. \n\nJIRA is here:\nhttps://issues.apache.org/jira/browse/SOLR-6210 "
        },
        {
            "author": "Mark Bennett",
            "id": "comment-14081850",
            "date": "2014-08-01T02:54:23+0000",
            "content": "Sorry to ask such a \"dumb\" question, but in the intro description it lists one of the goals as \"... this suggester version should also have support for distributed support, which was awkward at best with the previous implementation due to SpellCheck requirements.\"\n\nBut then the distributed example still has &shards= and shirts.qt=\n\nThat looks about the same as the old SpellCheckComponent based stuff on http://wiki.apache.org/solr/SpellCheckComponent#Distributed_Search_Support\n\nSo a bit confused, maybe the shard stuff is now optional? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14082378",
            "date": "2014-08-01T15:52:14+0000",
            "content": "Mark, the shards param is definitely optional but shards.qt will still be required. "
        }
    ]
}