{
    "id": "LUCENE-1777",
    "title": "Error on distance query where miles < 1.0",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-BETA"
        ],
        "affect_versions": "2.9",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "If miles is under 1.0 distance query will break.\n\nTo reproduce modify the file\n\nhttp://svn.apache.org/viewvc/lucene/java/trunk/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java?revision=794721\n\nAnd set the line:\n\nfinal double miles = 6.0;\n\nto \n\nfinal double miles = 0.5;",
    "attachments": {
        "LUCENE-1777.patch": "https://issues.apache.org/jira/secure/attachment/12415333/LUCENE-1777.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-03T09:36:50+0000",
            "content": "This should solve your problem.\n\nCould you check please ? ",
            "author": "Nicolas Helleringer",
            "id": "comment-12738246"
        },
        {
            "date": "2009-08-03T09:41:17+0000",
            "content": "Indeed, this is the exception I see:\n\n[junit] java.lang.NumberFormatException: Infinite or NaN\n[junit] \tat java.math.BigDecimal.<init>(BigDecimal.java:716)\n[junit] \tat org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getBoxShape(CartesianPolyFilterBuilder.java:81)\n[junit] \tat org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getBoundingArea(CartesianPolyFilterBuilder.java:109)\n[junit] \tat org.apache.lucene.spatial.tier.DistanceQueryBuilder.<init>(DistanceQueryBuilder.java:58)\n[junit] \tat org.apache.lucene.spatial.tier.TestCartesian.testRange(TestCartesian.java:152)\n\n\n\nIt's happening because the distance (miles) param to CartesianPolyFilterBuilder is an int, and 0.5 rounds down to 0.  Putting a floor at 1 prevents the exception (resulting in a floor on the bounding area that can be filtered0, though, I'm not sure why we can't in general have finer resolution than 1 mile (ie why mile can't be switched to a double instead). ",
            "author": "Michael McCandless",
            "id": "comment-12738249"
        },
        {
            "date": "2009-08-03T09:55:10+0000",
            "content": "I've included the \"floor miles at 1\" fix in LUCENE-1504. ",
            "author": "Michael McCandless",
            "id": "comment-12738256"
        },
        {
            "date": "2009-08-03T10:20:29+0000",
            "content": "I do like upgrading int -> double for miles better, to allow for finer ranges.  But we still need to set a floor somewhere (eg, I've added miles=0.0 as a test), and, I think we need to fix more places so that we actually generate boxes < 1.0 miles during indexing? ",
            "author": "Michael McCandless",
            "id": "comment-12738266"
        },
        {
            "date": "2009-08-03T10:29:46+0000",
            "content": "Actually there is already a floor on boxes level which cannot be > 15 in the bestFit function.\n\nFiner radius/miles param is for filtering afterwards. ",
            "author": "Nicolas Helleringer",
            "id": "comment-12738271"
        },
        {
            "date": "2009-08-03T11:53:51+0000",
            "content": "Actually there is already a floor on boxes level which cannot be > 15 in the bestFit function.\n\nAhh OK.  And from the comment in the code:\n\nif (bestFit > 15) \n{\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n}\n{code}\n\nIt looks like 1 mile is the \"natural\" floor given Java's math... so I think we should 1) switch miles to double, but 2) enforce a floor of 1.0, carrying over this comment from bestFit to where that floor is enforced.  I'll make those changes under LUCENE-1504. ",
            "author": "Michael McCandless",
            "id": "comment-12738298"
        },
        {
            "date": "2009-08-03T11:57:36+0000",
            "content": "1\u00b0) is done by the patch i attached to this issue  this morning\n\nI do not agree with 2\u00b0) as filtering below 1 miles is a natural and acceptable need.\nFlooring miles not only floor boxed reseach but also filtering afterwards and it is needed only on boxed search level. ",
            "author": "Nicolas Helleringer",
            "id": "comment-12738299"
        },
        {
            "date": "2009-08-03T12:05:16+0000",
            "content": "\nI do not agree with 2\u00b0) as filtering below 1 miles is a natural and acceptable need.\nFlooring miles not only floor boxed reseach but also filtering afterwards and it is needed only on boxed search level.\n\nI'm proposing flooring only in the CartesianPolyFilterBuilder.getBoxShape, not at the top level.\n\nThe finer filtering (LatLng & GeoHash) won't be floored. ",
            "author": "Michael McCandless",
            "id": "comment-12738301"
        },
        {
            "date": "2009-08-03T12:06:48+0000",
            "content": "Sounds great !\n\nThx ",
            "author": "Nicolas Helleringer",
            "id": "comment-12738304"
        },
        {
            "date": "2010-02-18T11:20:31+0000",
            "content": "As this issue has been solved with the commit of LUCENE-1504, it can be closed ",
            "author": "Nicolas Helleringer",
            "id": "comment-12835173"
        },
        {
            "date": "2010-04-05T15:14:00+0000",
            "content": "Nicolas,\n\nCan you just confirm this was fixed in LUCENE-1504? If so, I'll close this up ",
            "author": "Chris Male",
            "id": "comment-12853398"
        },
        {
            "date": "2010-04-06T08:28:56+0000",
            "content": "In TestCartesian there is code that validates this :\n\n\n  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n\n\nSo for me it is closed ",
            "author": "Nicolas Helleringer",
            "id": "comment-12853803"
        },
        {
            "date": "2010-04-14T13:33:02+0000",
            "content": "Can someone confirm my analysis and mark this issue as resolved ? ",
            "author": "Nicolas Helleringer",
            "id": "comment-12856887"
        },
        {
            "date": "2013-11-30T13:19:10+0000",
            "content": "2013 Old JIRA cleanup ",
            "author": "Erick Erickson",
            "id": "comment-13835698"
        },
        {
            "date": "2013-12-02T06:17:55+0000",
            "content": "Closing because the old spatial contrib module referenced here no longer exists as of Solr 4. ",
            "author": "David Smiley",
            "id": "comment-13836278"
        }
    ]
}