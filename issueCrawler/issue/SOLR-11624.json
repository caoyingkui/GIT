{
    "id": "SOLR-11624",
    "title": "collection creation should not also overwrite/delete any configset but it can!",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "7.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Looks like a problem that crept in when we changed the _default configset stuff.\n\nsetup:\nupload a configset named \"wiki\"\ncollections?action=CREATE&name=wiki&.....\n\nMy custom configset \"wiki\" gets overwritten by _default and then used by the \"wiki\" collection.\n\nAssigning to myself only because it really needs to be fixed IMO and I don't want to lose track of it. Anyone else please feel free to take it.",
    "attachments": {
        "SOLR-11624.3.patch": "https://issues.apache.org/jira/secure/attachment/12901538/SOLR-11624.3.patch",
        "SOLR-11624.4.patch": "https://issues.apache.org/jira/secure/attachment/12901760/SOLR-11624.4.patch",
        "SOLR-11624-2.patch": "https://issues.apache.org/jira/secure/attachment/12900857/SOLR-11624-2.patch",
        "SOLR-11624.patch": "https://issues.apache.org/jira/secure/attachment/12896792/SOLR-11624.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-09T02:18:15+0000",
            "content": "This is apparently explicitly intended behavior, see: CreateCollectionCmd.copyDefaultConfigSetTo that has the comment:\n\n// if a configset named coll exists, delete the configset so that _default can be copied over\n\nI think this patch changes this behavior, I'll test it in a bit.\n\nSince this is very explicit behavior and not just an oversight, I'd like to reach some consensus before committing.\n\nI'm a strong -1 for the current behavior for the record. ",
            "author": "Erick Erickson",
            "id": "comment-16245121"
        },
        {
            "date": "2017-11-09T04:22:15+0000",
            "content": "I'm having some really wonky behavior with that patch, so it's probably wrong. To whit: I try to create a collection without collection.configName and the process hangs. I can't imagine why given how trivial the change is but that just shows a lack of imagination I think. ",
            "author": "Erick Erickson",
            "id": "comment-16245181"
        },
        {
            "date": "2017-11-09T05:07:21+0000",
            "content": "This was indeed intended, and discussed here:\nhttps://issues.apache.org/jira/browse/SOLR-10272?focusedCommentId=15985654&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15985654\n\nI'm a strong -1 for the current behavior for the record.\nDo you suggest we revert this behavior? I can work on such a patch, if there's consensus. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16245209"
        },
        {
            "date": "2017-11-09T13:23:59+0000",
            "content": "I overlooked that detail Ishan Chattopadhyaya did in SOLR-10272.  +1 to your proposal here Erick (thus revert to the old behavior). ",
            "author": "David Smiley",
            "id": "comment-16245627"
        },
        {
            "date": "2017-11-09T14:42:44+0000",
            "content": "Ishan:\n\nYeah, reverting overwriting the named configuration set would be my preference.\n\nBTW, the wonkiness I was getting with my patch was due to it being late and having a massive elevate.xml left over from chasing a totally unrelated issue so it might be viable after all.\n\nFeel free to grab this JIRA if you want, I only assigned it to myself to make sure I didn't lose track of it. ",
            "author": "Erick Erickson",
            "id": "comment-16245749"
        },
        {
            "date": "2017-11-09T15:33:44+0000",
            "content": "I agree with Erick.  If a configset already exists, Solr should not be changing it just because a collection creation with the same name was requested.  What if there were a hundred existing collections all using that configset?\n\nHaving an option on the create command to force a config overwrite wouldn't be a bad idea, but that shouldn't be the default behavior. ",
            "author": "Shawn Heisey",
            "id": "comment-16245844"
        },
        {
            "date": "2017-11-09T20:23:50+0000",
            "content": "bq: Having an option on the create command to force a config overwrite...\n\nI'd prefer that remain 'bin/solr zk upconfig.....', but that's not a strong preference. ",
            "author": "Erick Erickson",
            "id": "comment-16246454"
        },
        {
            "date": "2017-11-11T06:07:17+0000",
            "content": "Here's the reason behind putting in that change:\n\nThe idea of that whole exercise (default configset) was to not need the user to be aware of the concept of configsets. In that situation, here's a typical situation that a user (who isn't aware of the concept of configsets) would be faced with, if the current behavior were not to be there: a) user creates a collection without specifying a configset, b) makes some changes to schema/configs using APIs, c) he's unhappy with how things turned out and deleted that collection and re-created it, d) instead of starting from scratch (default configset), as he was hoping, he is at the same place where he left off before deleting the collection.\n\nOverwriting any existing configset results in a climate of least surprises for a new user. However, those who understand concepts of configsets can always specify a configset name while creating his collections. IMHO, we should keep the current behavior. But, as I mentioned before, if there's consensus on switching back to previous behavior, I can work on bringing it back. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16248351"
        },
        {
            "date": "2017-11-11T16:53:53+0000",
            "content": "Hmm, problem is we can't satisfy both a new user in the scenario you outline and someone taking control of their configsets. The situation we're in now is \n\n> user tunes their configuration set like we want them to. We even tell them that _default isn't recommended for production!\n> user creates a collection without specifying configName\n> user loses their changes and gets schemaless to boot. Yes, they can start with the \"don't add new fields\" parameter....\n\nIf I imagine it from the perspective of a brand-new user, then this becomes one of those little \"learning experiences\". \n\nIf I imagine this from the perspective of a veteran user then the behavior is a real head-scratcher.\n\nAnd _much_worse IMO. \n> user does  understand configsets\n> user creates collection1 and gets configset collection1 copied from _default and makes modifications.\n> user creates 10 more collections all using collection1 configset\n> user drops and recreates collection1. Now all 10 collections are back to _default\n\nSo really we've made it very easy for veteran users to mess up in order to make it easy for a new user to start from a known state when dropping and recreating a collection. It can take considerable time and effort to get your configs the way you want them, and all that work is potentially lost. Additionally it's very common to recommend that users drop and recreate collections to re-index from scratch.\n\nOf the two I'd rather add the need to delete the configset when a user wants to start over to the learning curve rather than mess up veteran's work.\n\nSo I'm +1 for reverting.\n\nWhat do you think about this: We already have a warning when using the _default schema about how schemaless isn't recommended for production. To cover the situation Ishan outlined, we return a message like \"Using existing configuration set XXX\" if a configset already exists? And do this even if they specify configName.\n\nActually I kind of like that idea anyway as an additional confirmation that the user did what they wanted.\n\nAnd another suggestion re: the message returned. The current message will still come back if a configset with the same name as the collection does not exist. Rather than say \"Using _default configset...\" how about something telling them that the configset has been copied? the current wording is easy to interpret as the collection is actually using _default rather than a copy of it.  \"Copied the _default configset to <collection_name> which will be used by this collection...\" or something. ",
            "author": "Erick Erickson",
            "id": "comment-16248591"
        },
        {
            "date": "2017-11-13T12:01:47+0000",
            "content": "Had a discussion with Ishan Chattopadhyaya. We really need to nail down the behavior for the default configsets. These were the take aways. Please comment\n\n\n\tIf Solr creates a configset implicitly, Solr must delete it implicitly when the collection is deleted (if it's not referenced by another collection, of course)\n\tThe current naming of the configset can lead to conflict can lead to the current, unpleasant behavior. The implicit configset created for a collection called mycollection should be something like SOLR_CONFSET.mycollection (other name suggestions are welcome).\n\n ",
            "author": "Noble Paul",
            "id": "comment-16249450"
        },
        {
            "date": "2017-11-13T16:37:14+0000",
            "content": "I'm -1 on both of these. Just because Solr created the configset does not mean Solr controls its entire lifecycle, we even provide tools for changing the configset! The naming is irrelevant. I'm assuming the SOLR_CONFSET bit indicates that Solr created it. That does not mean it hasn't been modified.\n\nThis does not address the root problem: the current behavior overwrites an existing configset that I may have modified. I don't care how it was created, this is the root problem that I'm -Integer.MAX_VALUE on.\n\nScenario\n> I create collection EOE, SOLR_CONFIGSET.EOE is created by Solr\n> I customize the configset.\n> I create 3 more collections pointing to it.\n> I drop and recreate collection EOE.\n> my other three collections now use the default configset with who knows what consequences?\n\nIt's reasonable for users to drop and recreate a collection. It is also quite common for users to have multiple collections point to the same config set. Deleting (or overwriting) a configset for them when they didn't direct Solr to is a problem.\n\nI really don't see what the value is in making this so complex, the fix is simple. Just stop overwriting the configset if it already exists. Let the user delete configsets she doesn't want any more, it's easy with the configsets api.\n\nThe principle of least surprise comes in to play here. Once a configset exists in ZooKeeper, don't change it unless I tell you to. End of story. \n\nI'd be OK if the guarantee is that the configset hasn't been changed since Solr created it, in that case Solr can go ahead delete it with my blessing since it'll be recreated just as it was if I recreate the collection. I.e. there is no surprise in store for me. But otherwise -1 to both deleting it and overwriting it.\n\nThis seems llike the tail wagging the dog. We have a situation where we want to make it easy for the beginning user to get up and running. Solr does that by copying the _default configset. This is good, it removes a barrier to entry.\n\nThen users can spend quite a bit of time and effort modifying the configset to satisfy their needs. We should not risk them losing those changes just to tidy things up, which is all deleting configsets would really do. We should not risk them losing those changes by overwriting an existing configset.\n\nOther than having clean configs Znode, nobody has provided any compelling reason that Solr controlling the lifecycle of a configset is valuable. There are substantial risks do doing anything more than creating it if it doesn't exist that we should avoid.\n ",
            "author": "Erick Erickson",
            "id": "comment-16249798"
        },
        {
            "date": "2017-11-13T17:24:24+0000",
            "content": "The principle of least surprise comes in to play here. Once a configset exists in ZooKeeper, don't change it unless I tell you to. End of story.\n\nI'm +1 on this idea. I too don't understand the confusion and complication around just not overwriting an existing configset when one already exists that matches the name of the collection.\n\nThe idea of that whole exercise (default configset) was to not need the user to be aware of the concept of configsets.\n\nIn my mind, the goal was not to remove the need for new users to ever learn of the concept of configsets. It was to reduce the barrier of having to learn everything about configsets before you can even remotely start with Solr. (Actually, to be more precise, it was to fix the scenario where a new user fires up the Admin UI and clicks a button to create a collection that 100% of the time fails with a cryptic-to-them error message.) What we've done here is make something that should be a convenience into a poor experience for anyone who knows what they are doing. We must find the balance between these things.\n\nThe way this currently works has not, in fact, simplified the whole story at all, just changed where surprising and annoying behavior occurs. Further, I don't find where this behavior is described in the Ref Guide, so there isn't even any explanation for users to understand what new implicit rules they're expected to know before trying to use it. ",
            "author": "Cassandra Targett",
            "id": "comment-16249850"
        },
        {
            "date": "2017-11-14T02:03:29+0000",
            "content": "\n\n> I create collection EOE, SOLR_CONFIGSET.EOE is created by Solr\n> I customize the configset.\n> I create 3 more collections pointing to it.\n> I drop and recreate collection EOE.\n> my other three collections now use the default configset with who knows what consequences?\n\n\n\nIn this case SOLR_CONFIGSET.EOE is referenced by another live collection. So, it does not get deleted\n\nThis does not address the root problem: the current behavior overwrites an existing configset that I may have modified. I don't care how it was created, this is the root problem that I'm -Integer.MAX_VALUE on.\n\nI don't think we are talking against each other. We don't need to delete an existing confgset. \n\nThe principle of least surprise comes in to play here. Once a configset exists in ZooKeeper, don't change it unless I tell you to. End of story.\n\nTake the use case of a casual user creating and deleting collections. very soon, we will end up a lot of unused configsets in zookeeper. The user did not create the configset, so he is not aware of its existence. Imagine he screwed up the configset while he was using the collection and he wanted to start with a clean slate. In order to do so, he would delete a collection and recreate another (most likely with the same name). He will see the screwed up behavior again because the old configset gets reused. So, my proposal was\n\n\n\tUse a special name for auto-created configsets (such as SOLR_CONFIGSET.<collection-name>)  This eliminates the problem of us screwing up our current user base who creates configsets with the same name as the collection\n\tAs you said, DO NOT delete/overwrite a configset at the time of collection creation\n\tWhen deleting a collection, that has an auto created configset, drop it. Because, the user did not ask us to create the configset and most likely he is unaware of it. If that configset is referenced by another collection, do not delete it.\n\tWe can also provide a flag in DELETE-COLLECTION to omit dropping of configset.\n\n ",
            "author": "Noble Paul",
            "id": "comment-16250666"
        },
        {
            "date": "2017-11-14T05:21:10+0000",
            "content": "I think I see how you're thinking about this. I think it's too much effort, unnecessarily complex and there's too many ways it can fail. Not to mention startling to veteran users.\n\nFailure case: User creates a collection and we copy _default with our prefix. User uses the config API or schema API to modify. User drops collection. The user's work disappears. Hair tearing ensues.\n\nFailure case: User creates a collection and  we copy _default. User is learning about configsets and uploads customized configs manually to the same place 'cause \"Hey! that's where my configset is!\". User deletes collection and work disappears. Remaining hair is torn out.\n\nFailure case: User manually creates a configset prefixed by SOLR_CONFIGSET 'cause \"Hey, that's the convention apparently\" then drops the associated collection. We remove the configset, again losing his work. User is now bald and head explodes.\n\nFailure case N+1: I'm sure we'll find more.\n\nSure, each failure case can be fixed with enough coding, but why bother just to keep configsets from proliferating? As I see it, the only thing this mechanism is really helping with is: \n\n{{Take the use case of a casual user creating and deleting collections. very soon, we will end up a lot of unused configsets in zookeeper. }}\n\nFirst of all, if the user is dropping and recreating the same collection there's no problem, they'll just continue to use the same configset that was copied the first time.\n\nSecond, after that bit of hand-holding users will soon have to be aware of configsets. Especially since every time they create a collection with the _default configset (or a copy) there's a warning in the response telling the user that this isn't a good idea (that should stay  BTW)! I don't think it's too much to ask for them to use the configsets API to delete old configsets if they create/drop a bunch of different collections and we copy _defalut around. Until then having configsets proliferate isn't a big deal IMO.\n\nI don't think your argument below is germane. Maybe I'm stringing two sentences together that weren't intended...\nThe user did not create the configset, so he is not aware of its existence. Imagine he screwed up the configset while he was using the collection and he wanted to start with a clean slate.\n\nHow did the user screw up a configset if she was unaware of it in the first place? I guess you can argue that she messed it up by using the config API or the managed schema API. IMO it's totally reasonable to expect anyone at that level to use the configs API to delete the configset if they need to start over.\n\nI claim a user will have to eventually be aware of configsets and the added burden of using the configs API to delete unwanted ones after they figure configsets out is preferable to adding to the complexity and potential errors by trying to fix the one use case I see this addressing. If we go this route it won't need any new flags for the collections DELETE command.\n\nWhat other use-cases do you see that need supporting besides proliferating configsets?\n\n ",
            "author": "Erick Erickson",
            "id": "comment-16250884"
        },
        {
            "date": "2017-11-14T06:27:25+0000",
            "content": "chatted with Erick Erickson\nfollowing are the takeaways\n\n\tDo not delete/overwrite a configset when a collection is created\n\tUse a special prefix for auto created configsets\n\tWhen the collection which uses an autocreated configset is deleted, give a WARNING message that the configset is not deleted\n\n ",
            "author": "Noble Paul",
            "id": "comment-16250959"
        },
        {
            "date": "2017-11-14T15:43:26+0000",
            "content": "Noble:\n\nfor <3> can we include just a statement in the return to the request that the configset is still there, similar to what we do when we create a collection using the _default configset? Perhaps even give the configset API command to delete it or direct the user to the ref guide for the configset API?\n\nAnd in either case this would be when the configset was \"dangling\", i.e. no collections use it any more, right?\n\n ",
            "author": "Erick Erickson",
            "id": "comment-16251575"
        },
        {
            "date": "2017-11-14T15:50:17+0000",
            "content": "If the request to create a collection does not specify collection.configName, and if we see a config already exists with the name we want to use (e.g. SOLR_CONFIGSET.myColName), then it might be helpful to log an informative message that we are using an existing config and what its name is. ",
            "author": "David Smiley",
            "id": "comment-16251589"
        },
        {
            "date": "2017-11-14T16:09:51+0000",
            "content": "User manually creates a configset prefixed by SOLR_CONFIGSET 'cause \"Hey, that's the convention apparently\" then drops the associated collection\n\nProbably better to use something like collection.AUTOMATIC_COPY_OF_DEFAULT_CONFIGSET (suffix probably better than prefix imho), or less wordily-ish: collection.AUTO_DEFAULT_COPY. ",
            "author": "Steve Rowe",
            "id": "comment-16251619"
        },
        {
            "date": "2017-11-14T17:29:50+0000",
            "content": "suffix probably better than prefix imho\n\nagreed . suffix is better. <collection>.AUTOCREATED_CONFIGSET ?\n\nIf the request to create a collection does not specify collection.configName, and if we see a config already exists with the name we want to use (e.g. SOLR_CONFIGSET.myColName), then it might be helpful to log an informative message that we are using an existing config and what its name is.\n\n+1\n\nAnd in either case this would be when the configset was \"dangling\", i.e. no collections use it any more, right?\n\nright. ",
            "author": "Noble Paul",
            "id": "comment-16251785"
        },
        {
            "date": "2017-11-14T18:30:31+0000",
            "content": "OK, so it looks like consensus has been reached as far as I'm concerned.\n\nI probably won't be able to work on it for a while, anyone who wants should reassign it. ",
            "author": "Erick Erickson",
            "id": "comment-16251905"
        },
        {
            "date": "2017-12-05T16:07:06+0000",
            "content": "Noble PaulSteve RoweIshan Chattopadhyaya\n\nAdrien mentioned this JIRA as something he might include in the 7.2 release. Is this worth trying to push into 7.2 or would it be better to bake it for 7.3? I won't be able to devote significant time to it this week, too late for 7.2. ",
            "author": "Erick Erickson",
            "id": "comment-16278796"
        },
        {
            "date": "2017-12-05T18:55:03+0000",
            "content": "The most immediate change we could do now is prevent overwriting the configset, i.e. throw an error.  I'm already shepherding various issues so I don't have time to do this. ",
            "author": "David Smiley",
            "id": "comment-16279038"
        },
        {
            "date": "2017-12-06T06:54:28+0000",
            "content": "I was a bit under the weather and couldn't get to this sooner. I'll try to put in this immediate measure, i.e. throw an error on overwrite. \nEDIT: Error on overwrite seems a bit tricky: the collection creation would fail on this error which is an unfriendly behaviour and I'm not sure if this is what we should do as a temporary/stopgap behaviour. I'm thinking through this a bit more, will update as soon as possible. I'll try not to hold up the release for this. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16279754"
        },
        {
            "date": "2017-12-06T12:40:36+0000",
            "content": "Here's what we agreed to:\n\n\n\tDo not delete/overwrite a configset when a collection is created\n\tUse a special prefix for auto created configsets\n\tWhen the collection which uses an autocreated configset is deleted, give a WARNING message that the configset is not deleted\n\n\n\nI tried a patch with first two items (attached); problem is that there are failures in some tests that would need some digging into (i.e. TimeRoutedAliasUpdateProcessor#test()). I can do only step 1, for now (7.2 release) and fix all other cases later; however, it would mean a break in user facing behaviour twice. I'm going to skip doing so (and do nothing for 7.2), unless someone wants me to do otherwise. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16280121"
        },
        {
            "date": "2017-12-06T13:39:10+0000",
            "content": "BTW RE TimeRoutedAliasUpdateProcessorTest, as it's comments indicate, it creates a collection for the sole purpose of creating a named configset that it can then modify.  So it deletes it when done and intends for the config to still exist so that it can be referenced when other collections are created.  If we are to auto-delete configsets when collections get destroyed (sometimes, e.g. when config name matches the auto-created name), we then need an option to prevent this from happening if the user desires. ",
            "author": "David Smiley",
            "id": "comment-16280183"
        },
        {
            "date": "2017-12-06T13:54:48+0000",
            "content": "Come to think of it, given that we now have a \"_default\" config set that already exists, I guess I could use the configset API to copy it first.  Assuming I choose a name that won't be the auto-created name, it shouldn't get auto-deleted when the collection is deleted.  Yeah, that works. ",
            "author": "David Smiley",
            "id": "comment-16280206"
        },
        {
            "date": "2017-12-06T15:09:29+0000",
            "content": "Use a special prefix for auto created configsets\n\nI'm not going to tell you what to do here, but I think that the overall consensus was that a suffix was better than a prefix.  The choices I saw that looked good were .AUTO_DEFAULT_COPY and .AUTOCREATED_CONFIGSET. ",
            "author": "Shawn Heisey",
            "id": "comment-16280288"
        },
        {
            "date": "2017-12-06T15:49:08+0000",
            "content": "Ishan Chattopadhyaya This behavior has been around since 7.0, right? I see no compelling reason to rush this in to 7.2, I'd rather have it change once rather than twice, not to mention that the possibility of having something get overlooked in the rush.\n\nSo unless we're very confident, I'm fine with pushing it off to 7.3. ",
            "author": "Erick Erickson",
            "id": "comment-16280346"
        },
        {
            "date": "2017-12-11T18:30:50+0000",
            "content": "Please find the updated patch here -> SOLR-11624.3.patch \n\nChanges made:-\n1. Modified the test case TimeRoutedAliasUpdateProcessorTest#test to create/update and use the correct modifiedConfigSet name.\n2. Refactored the configName , added suffix to the name of auto-generated configSet. \n\nIshan Chattopadhyaya , David Smiley Please review the patch.   ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16286385"
        },
        {
            "date": "2017-12-12T20:41:11+0000",
            "content": "Updated the patch with documentation.\n\nIshan Chattopadhyaya David Smiley Kindly review the same.  ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16288240"
        },
        {
            "date": "2017-12-29T20:49:11+0000",
            "content": "Abhishek, when adding updated attachments to JIRA, use the same name and JIRA will keep track of it (clearly showing which is the latest yet allowing access to earlier ones if desired). Do not keep incrementing a counter at the suffix.\n\nFWIW I don't think the auto created suffix name needs \"CONFIGSET\" as a part of it's name, as that is the namespace in which it exists   (and it's verbose).  I think a suffix of \".AUTOCREATED\" is fine.\n\nI briefly looked at two aspects of your patch; it wasn't thorough.\n\nRE TimeRoutedAliasUpdateProcessorTest: it seems that your changes resulted in the creation of an auto-generated configset, but I definitely do not want autogenerated configsets in the test.  I believe this is easily avoided by having the collection creation explicitly refer to the desired configset when it's created.\n\nHere are the updated docs you added to the collection.configName parameter:\n\nDefines the name of the configurations (which must already be stored in ZooKeeper) to use for this collection. If not provided, Solr will use the configurations of `_default` configSet OR `the only configSet present` (if there is only 1 config set in Zookeeper) to create the collection. The new configSet created for the collection will be  named `<collectionName>.AUTOCREATED_CONFIGSET`\n\nI think it needs to be clear that Solr will create a new (mutable) configSet that is a copy of _default, and that this new configSet will be deleted when the collection is.  The *OR* part has my attention.  I assume this rule is for legacy?  Any way, so if we have one configSet in ZooKeeper named \"myconfig\" and the user creates a collection \"mycoll\" (without specifying which config), then presumably we'll have two configSets: \"myconfig\" and \"mycoll.AUTOCREATED_CONFIGSET\".  And this point there is no longer one configSet in ZooKeeper, nor is there \"_default\" for that matter.  Does this mean if the user goes to create another collection similarly that it will fail?  Presumably you didn't introduce this behavior but you are documenting it?  Can someone vouch for the usefulness of this behavior; I find it problematic.\n\nNippick: \"configurations\" should be in singular form in both places.  ",
            "author": "David Smiley",
            "id": "comment-16306533"
        },
        {
            "date": "2017-12-30T05:18:17+0000",
            "content": "GitHub user abhidemon opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/297\n\n    fix: https://issues.apache.org/jira/browse/SOLR-11624\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/abhidemon/lucene-solr SOLR-11624\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/297.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #297\n\n\ncommit 01eac2e19d0badf095816fa8f8a546653c0e4556\nAuthor: abhidemon <abhishek.singh@...>\nDate:   2017-12-12T20:44:56Z\n\n    fix: https://issues.apache.org/jira/browse/SOLR-11624\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16306661"
        },
        {
            "date": "2017-12-30T14:28:24+0000",
            "content": "David Smiley , Thanks for the suggestions.\nUploading the updated patch with following changes:-\n\n\tChanged the suffix name to   \".AUTOCREATED\"\n\tExplicitly setting the name of the created ConfigSet in TimeRoutedAliasUpdateProcessorTest\n\tModified the documentation to read..\ncollection.configName : Defines the name of the configuration (which must already be stored in ZooKeeper) to use for this collection. If not provided, Solr will use the configuration of _default configSet OR the only configSet present (if there is only 1 config set in Zookeeper) to create a new (and mutable) configSet named <collectionName>.AUTOCREATED and will use it for the new collection.\n\n\n ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16306785"
        },
        {
            "date": "2017-12-30T14:37:38+0000",
            "content": "Also, Thanks for pointing this consistency out. \nso if we have one configSet in ZooKeeper named \"myconfig\" and the user creates a collection \"mycoll\" (without specifying which config), then presumably we'll have two configSets: \"myconfig\" and \"mycoll.AUTOCREATED_CONFIGSET\". And this point there is no longer one configSet in ZooKeeper, nor is there \"_default\" for that matter. Does this mean if the user goes to create another collection similarly that it will fail?\n\nI think yes, it will fail.\nLooks like with the new ConfigName being added, this feature in particular will break. \nWe can get rid of this proble by \n\n\tEither depricating this feature of using the only configset present,\n\tOr making a new configSet named _default , whenever such a case arises.\nDavid Smiley Ishan Chattopadhyaya \n\n ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16306797"
        },
        {
            "date": "2018-01-08T04:06:00+0000",
            "content": "Ishan Chattopadhyaya Meant this JIRA, what's the status here? ",
            "author": "Erick Erickson",
            "id": "comment-16315645"
        },
        {
            "date": "2018-01-10T22:34:48+0000",
            "content": "Erick Erickson, I'll review the test and the documentation change and try to wrap this up this week. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16321260"
        },
        {
            "date": "2018-01-13T20:17:53+0000",
            "content": "Github user abhidemon closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/297 ",
            "author": "ASF GitHub Bot",
            "id": "comment-16325318"
        },
        {
            "date": "2018-01-13T21:34:58+0000",
            "content": "Uploading the updated patch with corrected documentation. \nIshan Chattopadhyaya David Smiley ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16325341"
        },
        {
            "date": "2018-01-22T10:42:06+0000",
            "content": "Updated the patch for master.  ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16334125"
        },
        {
            "date": "2018-01-22T14:18:58+0000",
            "content": "Commit 183835ed2485915006746e456d7124cb5d5d4abb in lucene-solr's branch refs/heads/master from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=183835e ]\n\nSOLR-11624: Autocreated configsets will not use .AUTOCREATED suffix ",
            "author": "ASF subversion and git services",
            "id": "comment-16334302"
        },
        {
            "date": "2018-01-22T14:21:10+0000",
            "content": "Commit 6ef838663bd0a006109e427ae2995192f38f2453 in lucene-solr's branch refs/heads/branch_7x from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6ef8386 ]\n\nSOLR-11624: Autocreated configsets will not use .AUTOCREATED suffix ",
            "author": "ASF subversion and git services",
            "id": "comment-16334308"
        },
        {
            "date": "2018-01-22T15:09:56+0000",
            "content": "Thanks Abhishek Kumar Singh for the patch (test+documentation) and thanks to Erick, David & Shawn for reviewing the approaches / patches. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16334378"
        }
    ]
}