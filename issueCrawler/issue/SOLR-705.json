{
    "id": "SOLR-705",
    "title": "Distributed search should optionally return docID->shard map",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SOLR-303 queries with &shards parameters set need to return the dociD->shard mapping in the response. Without it, updating/deleting documents when the # of shards is variable is hard. We currently set this with a special requestHandler that filters /update and inserts the shard as a field in the index but it would be better if the shard location came back in the query response outside of the index.",
    "attachments": {
        "SOLR-705.patch": "https://issues.apache.org/jira/secure/attachment/12388406/SOLR-705.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Lars Kotthoff",
            "id": "comment-12623253",
            "date": "2008-08-18T04:48:19+0000",
            "content": "Starting implementation, setting the \"shardMapping\" parameter to any value in the request will add the field \"shard\" to each response document containing the shard as specified in the request.\n\n\n\tCurrently only implemented for XML responses.\n\tNo tests.\n\tWhen a document is found in multiple shards, the last one sets the value, the others are lost. Returning an array of all the shards would probably better.\n\n\n\nThis code is almost untested. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12623657",
            "date": "2008-08-19T12:51:45+0000",
            "content": "I don't think we need to worry about returning an array of all shards... they are supposed to be disjoint, but we handle gracefully if an id is repeated (instead of blowing up).\n\nInstead of \"shard\", maybe we want to pick something that won't clash with a real field name quite so easily?\n_shard?  (yes it's uglier). "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12623666",
            "date": "2008-08-19T13:05:31+0000",
            "content": "What about putting the docid->shard mapping elsewhere in the response rather than actually on the document?   Like explain and highlight info, for example. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12623669",
            "date": "2008-08-19T13:11:49+0000",
            "content": "What about putting the docid->shard mapping elsewhere in the response rather than actually on the document?\n\nI've never been sure what the right answer is here.  Putting it in a different place sometimes seems cleaner, but sometimes seems like it just makes responses harder to read, and forces users to do their own id based correlation.\n\nI've also thought about a \"meta\" part to a document that contains other information specific to the document besides stored fields. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12623684",
            "date": "2008-08-19T14:33:51+0000",
            "content": "Well, can you filter/query/sort by the contents of this \"shard\" field? If not, it doesn't belong in the doc block, IMO "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12623729",
            "date": "2008-08-19T17:06:06+0000",
            "content": "When you add new fabricated fields to the document return, please use a non-standard naming convention, like \"&shard\" and \"&score\". Adding simple alpha words as fields will clash with someone's schema.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12623738",
            "date": "2008-08-19T17:17:42+0000",
            "content": "Well, can you filter/query/sort by the contents of this \"shard\" field? If not, it doesn't belong in the doc block, IMO\n\nYou can do any of those with stored (non-indexed) fields either. "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12623862",
            "date": "2008-08-20T01:05:55+0000",
            "content": "I don't think we need to worry about returning an array of all shards... they are supposed to be disjoint\n\nI think as the idea behind the issue is to use this information to programmatically update/delete documents, we should return an array of shards. Consider the scenario where 2 sets of shards index the same information for redundancy purposes. For normal queries, you would send requests to one set of shards. If you want to delete a document, it would be nice to be able to send one request to both sets of shards and get all the required information with a single request instead of having to query each set individually.\n\nWhat about putting the docid->shard mapping elsewhere in the response rather than actually on the document?\n\nThat assumes that there's a unique key which we can use to link the two pieces of information. That's probably a reasonable assumption, but in my opinion we shouldn't impose this restriction unless it's really necessary.\n\nI've also thought about a \"meta\" part to a document that contains other information specific to the document besides stored fields.\n\nAh, I do like that idea.\n\nWell, can you filter/query/sort by the contents of this \"shard\" field? If not, it doesn't belong in the doc block, IMO\n\nIt's the same thing for the score field though. "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12623890",
            "date": "2008-08-20T03:07:04+0000",
            "content": "Attaching new patch which, inspired by Yonik's suggestion, returns something like\n\n  <doc>\n  <lst name=\"meta\">\n        <str name=\"shard\">localhost:8983/solr</str>\n  </lst>\n  <str name=\"id\">MA147LL/A</str>\n  <str name=\"name\">Apple 60 GB iPod with Video Playback Black</str>\n </doc>\n\n\n\nThe parameter format changed as well, to get the doccument -> shard mapping, add &metadata=shard to the request. The patch adds a new field for metadata to SolrDocument. This should probably also be used for score and split out into a separate issue if that general direction is ok.\n\nIssues with the current implementation:\n\n\tOnly works with XML responses and lists of SolrDocuments.\n\tThe document found in multiple shards issue needs to be clarified.\n\tTests.\n\n "
        },
        {
            "author": "ian connor",
            "id": "comment-12656298",
            "date": "2008-12-13T16:17:41+0000",
            "content": "I would be keen to test this using Ruby - can you add this for the Ruby Request as well as XML in patch? "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12656409",
            "date": "2008-12-14T16:35:51+0000",
            "content": "Attaching new patch that actually applies again (sorry, this issue had escaped my attention before) and adds metadata output for Ruby and JSON. "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12662503",
            "date": "2009-01-09T20:10:48+0000",
            "content": "Syncing patch with trunk. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12671175",
            "date": "2009-02-06T15:59:09+0000",
            "content": "The latest patch doesn't seem to compile anymore, I get:\n\n{{\n\ncompile-solrj:\n    [javac] Compiling 1 source file to /Users/bwhitman/outside/solr-trunk/build/solrj\n    [javac] /Users/bwhitman/outside/solr-trunk/src/common/org/apache/solr/common/SolrDocument.java:50: cannot assign a value to final variable _fields\n    [javac]     _fields = new LinkedHashMap<String,Object>();\n    [javac]     ^\n\n}}\n "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12671465",
            "date": "2009-02-07T13:47:07+0000",
            "content": "Attaching new patch which compiles again. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12671512",
            "date": "2009-02-07T19:33:10+0000",
            "content": "Sooooo....what do people think of \"meta\"?\nIt seems like it could make things easier on clients - removing the need for correlation-by-id. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12683774",
            "date": "2009-03-20T07:02:35+0000",
            "content": "Sooooo....what do people think of \"meta\"? It seems like it could make things easier on clients - removing the need for correlation-by-id.\n\nI'm +1 on the idea. Let's choose a better name than 'meta' with less likelihood of collision, say 'meta'? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12703286",
            "date": "2009-04-27T18:48:38+0000",
            "content": "I like the concept \u2013 it could help for many things, and make some client code a bit easier.\n\nThe simple use case is to augment each document with fields that do not exist in the schema.  This could be things like the shard, the score, a calculation (perhaps the output of a function query)\n\nThis may also be someplace to consider putting other information that currently requires correlation-by-id.  Consider highlighting, MLT, some debug info...\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12703489",
            "date": "2009-04-28T04:14:22+0000",
            "content": "Here is an updated patch that:\n 1. Calculates the Set of returned fields once per requres (rather then for each document)\n 1. Attaches the meta return field list to the SolrQueryResponse\n 1. implements a ReturnFieldList that will match \"*\" to return any meta field (NOTE, we should consider http://wiki.apache.org/solr/FieldAliasesAndGlobsInParams)\n\n\n\nI like that this gives us an extendible place to augment each document without having to map the ID.\n\nI don't like the potential name conflict using \"meta\" (or any string) in the field list.  Since you have to explicitly turn on the query, i guess it is ok; BUT it makes things difficult for parsers.  Is the \"meta\" field the special key or a field?  \n\nSince solr does not support NamedList as a field, we could asume that any <lst is the special meta field, but that seems kinda ugly.   "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12737012",
            "date": "2009-07-30T06:28:07+0000",
            "content": "i haven't looked at any of the patches here, but the simplest way to avoid field name collision problems would be to make the client specify the name of the \"meta\" field when asking for it\n\nexamples...\n\n\n\n\n?q=solr&meta=myMetaFieldData\nempty NamedList named 'myMetaFieldData' in each doc\n\n\n?q=solr&meta=foo&shardMapping=true\nNamedList named 'foo' in each doc, each containing a single \"shard\" key/val\n\n\n?q=solr&shardMapping=true\nshard mapping data is computed, but response writer has no instructions on how to display it; behavior can be implementation dependent (xml might be implemented as a <lst> with no name, binary might decide to leave it out completely)\n\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12737015",
            "date": "2009-07-30T06:38:15+0000",
            "content": "binary might decide to leave it out completely\n\nThe behavior should be consistent irrespective of the output format we choose. The binary format should have no problem in handling this usecase the same way xml format handles it "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12737018",
            "date": "2009-07-30T06:52:03+0000",
            "content": "i wasn't suggesting that the binary format couldn't handle it ... i was just suggesting that if the client fails to specify a \"meta\" fieldname for the response writer to use when including the metadata in each doc, the behavior can be implementation (ie: response writer) dependent.\n\ni'm speaking to what the \"spec\" for metadata fields could look like, not what the implementations should look like. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12739076",
            "date": "2009-08-04T18:22:24+0000",
            "content": "I'll take this one on for 1.4...\n\nI incorporate hoss' suggestion and then we can see how we like it. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12739246",
            "date": "2009-08-04T23:37:13+0000",
            "content": "Ryan: might be worth while to split the jira issue ... create a new issue for an internal API to add per doc metadata and use of this metadata in at least 2 response writers; then make SOLR-705 (shard mapping) and SOLR-1298 (function query results) dependent on the new issue and sanity test of the new internal APIs. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12740984",
            "date": "2009-08-08T22:14:58+0000",
            "content": "I go back and forth on the \"meta\" thing...\n\nOn one hand, if one is looking at the output, it makes perfect sense to have a separate meta section per document.\nHowever, when one looks at it from a client API perspective (how one asks for the value of a particular metadata value) having two different ways to access values (\"real\" fields vs \"meta\" fields) doesn't seem desirable.\n\nFrom a client coding perspective, consistency is nice:\n  sdoc.get(\"id\")\n  sdoc.get(\"_shard\")\n\nAfter all, many of the stored fields of a document are actually just metadata too.  So an alternative is simple convention... metadata fields start with an underscore, and no more work needs ot be done at the client side.\n\nBut I'm really not convinced either way  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12740986",
            "date": "2009-08-08T22:17:49+0000",
            "content": "If we do go with \"meta\", I'm also not concerned with the hypothetical field-name collision... this is a one time thing, and hard-coding it to \"meta\" makes things simpler and more predictable. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12741046",
            "date": "2009-08-09T07:43:34+0000",
            "content": "Let us have a special field of something like \"meta\"  (to minimize conflict) which can be used for any future metadata.so, the client code would look like\n\nsdoc.get(\"id\")\nNamedList meta = sdoc.get(\"_meta_\");\nmeta.get(\"shard\");\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12741502",
            "date": "2009-08-10T19:23:38+0000",
            "content": "On one hand, if one is looking at the output, it makes perfect sense to have a separate meta section per document. However, when one looks at it from a client API perspective (how one asks for the value of a particular metadata value) having two different ways to access values (\"real\" fields vs \"meta\" fields) doesn't seem desirable.\n\nI'm trying to look at it from an internal datastructure perspective, and a client code perspective.  From an internals perspective, keeping the data isolcated makes sense \u2013 one set comes straight from the Documents in the index, the other is computed \u2013 so they should be seperate datastructures internally in solr, one hanging off the other.\n\nThen the response writer can decide how it wants to deal with those data \u2013 for response writers where nested data structures are easy (most of them) this data can be represented cleaning ... or we could add options to flatten the data (using some prefix type option to say all metadata data properties should become fields with the same name prefixed by \"_\") so that the client can't tell the difference between them ... if we make the internal representation a flattened list of pairs, then we tie the hands of hte response writter.\n\nDitto for the client library \u2013 the more structure we maintain as the data makes it's way to the client, the more options we have as to if/when we flatten it.  preserving structure allows code to flatten at anytime if it wants to, so let's go with the option that has the most flexibility and get the best of both worlds.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12744684",
            "date": "2009-08-18T20:12:27+0000",
            "content": "Moving this issue to 1.5 so that the details could be worked out with less haste.\n\nhttp://www.lucidimagination.com/search/document/1f2e56f58162679d/response_writers_and_doclists "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872451",
            "date": "2010-05-27T22:05:34+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13011555",
            "date": "2011-03-26T04:34:15+0000",
            "content": "SOLR-1566 is now commited, so this should be pretty easy to get wrapped up\n\nI don't have any experience with sharding so someone else will need to step up for this one.\n\nLooking at it quickly, if the process that fills in the DocList knows what shard it is, then it would be trivial to add something similar to the value augmenter.  If the SearchComponent needs to set the field it will be a little more complicated\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043703",
            "date": "2011-06-03T16:46:38+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13046137",
            "date": "2011-06-08T19:08:39+0000",
            "content": "added &shard.url=xxx to distributed requests and return that with a DocTransformer "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13046144",
            "date": "2011-06-08T19:18:14+0000",
            "content": "Something to keep in mind is the difference between logical shard and physical shard replica.\ni.e. \"shard1\" can be located at localhost:8983/solr/shard1 and localhost:7574/solr/shard1\n\nBoth pieces of info can be useful.\n\nSo with ryan's last commit, [shard] gets you something like localhost:8983/solr/shard1\nWe don't have to implement returning the other part now... but we should think about the naming.\n\nIn the code, I sometimes used \"slice\" to mean logical shard (a logical slice of the complete index), to avoid overloading \"shard\"... but I'm not sure that won't cause more confusion than it's worth.  So for a future logical shard name, perhaps [shard_id] ?\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13046154",
            "date": "2011-06-08T19:29:16+0000",
            "content": "interesting.  What defines a 'slice'?  Could it be a system property, or something in SolrConfig?\n\nIf I understand what you are saying, it would be a label on cores that are logically identical. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13046164",
            "date": "2011-06-08T19:47:39+0000",
            "content": "interesting. What defines a 'slice'? Could it be a system property, or something in SolrConfig?\n\nIt's well defined within SolrCloud... you can actually add &shards=shard1,shard2 and solr will do the mapping from those logical shards to physical shards (via cluster state in zookeeper) and do a load-balanced request across them. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13046171",
            "date": "2011-06-08T19:53:42+0000",
            "content": "OK, that suggests that the parameter should be 'shard.id' rather then 'shard.url' \u2013 since in SolrCloud it is not a url.  Maybe we should also send shard.url so that we do know the URL even within SolrCloud.  Then we should add another transformer for [shard_url]  \n "
        }
    ]
}