{
    "id": "SOLR-5721",
    "title": "ConnectionManager can become stuck in likeExpired",
    "details": {
        "affect_versions": "4.6.1",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Here are the sequence of events:\n\n\twe disconnect\n\tThe disconnect timer beings to run (so no longer scheduled), but doesn't  set likelyExpired yet\n\tWe connect, and set likelyExpired = false\n\tThe disconnect thread runs and sets likelyExpired to true, and it is never set back to false (note that we cancel the disconnect thread but that only cancels scheduled tasks but not running tasks).\n\n\n\nThis is pretty difficult to reproduce without doing more work in the disconnect thread.  It's easy to reproduce by adding sleeps in various places \u2013 I have a test that I'll attach that does that.\n\nThe most straightforward way to solve this would be to grab the synchronization lock on ConnectionManager in the disconnect thread, ensure we aren't actually connected, and only then setting likelyExpired to true.  In code:\n\nsynchronized (ConnectionManager.this) {\n  if (!connected) likelyExpired = true;\n}\n\n\n\nbut this is all pretty subtle and error prone.  It's easier to just get rid of the disconnect thread and record the last time we disconnected.  Then, when we check likelyExpired, we just do a quick calculation to see if we are likelyExpired.",
    "attachments": {
        "SOLR-5721test.patch": "https://issues.apache.org/jira/secure/attachment/12628616/SOLR-5721test.patch",
        "SOLR-5721.patch": "https://issues.apache.org/jira/secure/attachment/12628633/SOLR-5721.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Gregory Chanan",
            "id": "comment-13899814",
            "date": "2014-02-13T00:11:35+0000",
            "content": "Here's a rough demonstration of a failure with strategic pauses inserted.  I don't think we'd want such a test, but I couldn't reproduce the bug with a nicer test.  What I did in the nicer test is:\n\n\tdisconnect\n\ttry to reconnect around the time the disconnect thread would run (with some random error)\n\n\n\nif I inserted something small in the disconnect thread, like a System.err, the nicer test would reproduce the issue.  I can attach that if people are interested. "
        },
        {
            "author": "Gregory Chanan",
            "id": "comment-13899862",
            "date": "2014-02-13T00:56:53+0000",
            "content": "Here's a patch that gets rid of the disconnect thread and a test around it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13900037",
            "date": "2014-02-13T05:53:50+0000",
            "content": "Nice! Good call. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13901557",
            "date": "2014-02-14T15:36:02+0000",
            "content": "Commit 1568337 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1568337 ]\n\nSOLR-5721: ConnectionManager can become stuck in likeExpired. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13901566",
            "date": "2014-02-14T15:40:07+0000",
            "content": "Commit 1568338 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1568338 ]\n\nSOLR-5721: ConnectionManager can become stuck in likeExpired. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13901568",
            "date": "2014-02-14T15:40:28+0000",
            "content": "Thanks Greg! "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-13902718",
            "date": "2014-02-16T13:59:02+0000",
            "content": "Wouldn't using System.currentTimeMillis for timr deltas lead to errors due to NTP sync or DST? It's not guaranteed to be monotonic. See\n\nhttp://stackoverflow.com/questions/2978598/will-sytem-currenttimemillis-always-return-a-value-previous-calls\n\nSystem.nanoTime seems to provide a better alternative, at least when the OS supports a monotonic clock. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13902747",
            "date": "2014-02-16T16:28:52+0000",
            "content": "Yeah, sounds like a good improvement. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13902766",
            "date": "2014-02-16T18:01:07+0000",
            "content": "I filed SOLR-5734 as this kind of spans the system. "
        }
    ]
}