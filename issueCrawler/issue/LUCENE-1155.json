{
    "id": "LUCENE-1155",
    "title": "BoostingTermQuery#defaultTermBoost",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "This patch allows a null payload to mean something different than 1f.\n\n(I have this use case where 99% of my tokens share the same rather large token position payload boost.)\n\n\nIndex: src/java/org/apache/lucene/search/payloads/BoostingTermQuery.java\n===================================================================\n--- src/java/org/apache/lucene/search/payloads/BoostingTermQuery.java   (revision 615215)\n+++ src/java/org/apache/lucene/search/payloads/BoostingTermQuery.java   (working copy)\n@@ -41,11 +41,16 @@\n  */\n public class BoostingTermQuery extends SpanTermQuery{\n \n+  private Float defaultTermBoost = null;\n \n   public BoostingTermQuery(Term term) {\n     super(term);\n   }\n \n+  public BoostingTermQuery(Term term, Float defaultTermBoost) {\n+    super(term);\n+    this.defaultTermBoost = defaultTermBoost;\n+  }\n \n   protected Weight createWeight(Searcher searcher) throws IOException {\n     return new BoostingTermWeight(this, searcher);\n@@ -107,7 +112,9 @@\n           payload = positions.getPayload(payload, 0);\n           payloadScore += similarity.scorePayload(term.field(), payload, 0, positions.getPayloadLength());\n           payloadsSeen++;\n-\n+        } else if (defaultTermBoost != null) {\n+          payloadScore += defaultTermBoost;\n+          payloadsSeen++;\n         } else {\n           //zero out the payload?\n         }\n@@ -146,7 +153,14 @@\n \n   }\n \n+  public Float getDefaultTermBoost() {\n+    return defaultTermBoost;\n+  }\n \n+  public void setDefaultTermBoost(Float defaultTermBoost) {\n+    this.defaultTermBoost = defaultTermBoost;\n+  }\n+\n   public boolean equals(Object o) {\n     if (!(o instanceof BoostingTermQuery))\n       return false;",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-25T13:45:09+0000",
            "content": "missed first two lines in the diff ",
            "author": "Karl Wettin",
            "id": "comment-12562495"
        },
        {
            "date": "2008-01-25T13:51:46+0000",
            "content": "I think I am missing something here.  If they are all the same, except a few, why even store a payload for those that are the same?  Why not just rely on the usual term scoring for those and just get the boost from those tokens that truly need a payload? ",
            "author": "Grant Ingersoll",
            "id": "comment-12562497"
        },
        {
            "date": "2008-01-25T14:20:02+0000",
            "content": "\nI think I am missing something here. If they are all the same, except a few, why even store a payload for those that are the same? Why not just rely on the usual term scoring for those and just get the boost from those tokens that truly need a payload?\n\nThanks to this patch I don't store payload for all those that are the same. \n\nI only store the payload for 1% of the tokens. The remaining 99% of the term positions, them with a null payload,  are boosted according to a value I configure my query to use. In my case I want a null payload to mean 5f boost, and the 1% positions with payload set have something between 4.9f and 1f boost.\n\nI'm not at all surprised if it is considered backwards, works great though. I have no idea to how one can do this another way.\n ",
            "author": "Karl Wettin",
            "id": "comment-12562514"
        },
        {
            "date": "2008-02-23T22:23:11+0000",
            "content": "\nI think I am missing something here. If they are all the same, except a few, why even store a payload for those that are the same? Why not just rely on the usual term scoring for those and just get the boost from those tokens that truly need a payload?\n\nIt might be worth mentioning that I have omitted the norms. ",
            "author": "Karl Wettin",
            "id": "comment-12571789"
        },
        {
            "date": "2008-08-24T12:26:08+0000",
            "content": "I still think this patch makes sense and would very much like to see it in 2.4. ",
            "author": "Karl Wettin",
            "id": "comment-12625160"
        },
        {
            "date": "2008-09-12T17:50:53+0000",
            "content": "Grant, what do you think of this one?  The patch looks reasonable to me; it's backwards compatible.  Should we do this for 2.4? ",
            "author": "Michael McCandless",
            "id": "comment-12630638"
        },
        {
            "date": "2008-09-12T18:54:21+0000",
            "content": "Sorry, I still don't get it, but I'm probably dense.  Maybe an actual example would help.\n\nNext, it incs payloadsSeen when it hasn't, in fact, seen a payload.  That seems weird.\n\nSecond, why not just scale the results from 1 to 5 to be between 0 and 1 (and possibly just call Query.setBoost(5))?  That is, for the 1% of positions, make it range between 0.9 and 0.1 (or whatever).  \n\nThat being said, I suppose it doesn't hurt, but it just seems confusing.  If anything, I would rename the variable something like nullPayloadBoost or something else, as I think defaultTermBoost implies it's the default boost applied when there is a payload, but the boost isn't specified, which doesn't make sense either. ",
            "author": "Grant Ingersoll",
            "id": "comment-12630655"
        },
        {
            "date": "2008-09-12T21:43:25+0000",
            "content": "Sorry, I still don't get it, but I'm probably dense. Maybe an actual example would help.\n\nIn my single case all term positions contains a payload boost. In order to optimize the index size I analyzed the payloads and came to the conclution that 30% or so had the boost 5f, a clear majority of the boosts. In order to minimize the index size I choosed to use this patch and set the default payload to 5f rather than storing 5f in the payload.\n\nHow and why I managed to get a majority of the payloads to be 5f and if I could avoid this by manageing boosts in another layer is a completely different story. ",
            "author": "Karl Wettin",
            "id": "comment-12630687"
        },
        {
            "date": "2008-09-13T11:55:47+0000",
            "content": "How is that any different than marking the 70% as having a boost ranging between 1/5 = 0.2 and 5/5 = 1 whereby no patch is needed?  You still have the same 30% null payloads ",
            "author": "Grant Ingersoll",
            "id": "comment-12630761"
        },
        {
            "date": "2008-09-13T13:46:34+0000",
            "content": "How is that any different than marking the 70% as having a boost ranging between 1/5 = 0.2 and 5/5 = 1 whereby no patch is needed? You still have the same 30% null payloads\n\nThere would be absolutly no difference to the end result. \n\nI want to turn this question around and ask why you don't normalize all boosts at query time to top index 1f and then use negative boost for everything else? \n\nIt's about gutfeelings. \n\nNulling out the payloads could be gained by dividing the weight by 5 at creation time (due to lots of reasons this was not a good chooise), by a dividing all weight by 5 in a filter in the end of the chain, or by introducing this patch. For me BoostingTermQuery felt like the most obvious place to handle this stuff, and it still does.\n\n ",
            "author": "Karl Wettin",
            "id": "comment-12630765"
        },
        {
            "date": "2011-01-25T16:05:40+0000",
            "content": "We don't have BoostingTermQuery anymore, and there was never consensus here to fix it within Lucene, vs. e.g. the workarounds Grant proposed. Given that, and the fact that the issue is inactive since Sep-2008, and that today we give enough API for someone to write this sort of capability in his application, I'm closing the issue. ",
            "author": "Shai Erera",
            "id": "comment-12986464"
        }
    ]
}