{
    "id": "LUCENE-819",
    "title": "NullPointerException in Term.compareTo()",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "java.lang.NullPointerException\n \tat org.apache.lucene.index.Term.compareTo(Term.java:84)\n \tat org.apache.lucene.index.TermInfosReader.getIndexOffset(TermInfosReader.java:115)\n \tat org.apache.lucene.index.TermInfosReader.get(TermInfosReader.java:150)\n \tat org.apache.lucene.index.SegmentReader.docFreq(SegmentReader.java:300)\n \tat org.apache.lucene.search.IndexSearcher.docFreq(IndexSearcher.java:78)\n \tat org.apache.lucene.search.Similarity.idf(Similarity.java:255)\n \tat org.apache.lucene.search.TermQuery$TermWeight.<init>(TermQuery.java:43)\n \tat org.apache.lucene.search.TermQuery.createWeight(TermQuery.java:142)\n \tat org.apache.lucene.search.BooleanQuery$BooleanWeight.<init>(BooleanQuery.java:203)\n \tat org.apache.lucene.search.BooleanQuery$BooleanWeight2.<init>(BooleanQuery.java:330)\n \tat org.apache.lucene.search.BooleanQuery.createWeight(BooleanQuery.java:372)\n \tat org.apache.lucene.search.Query.weight(Query.java:93)\n \tat org.apache.lucene.search.Hits.<init>(Hits.java:48)\n \tat org.apache.lucene.search.Searcher.search(Searcher.java:53)\n        ...",
    "attachments": {
        "TestTerm.java": "https://issues.apache.org/jira/secure/attachment/12352196/TestTerm.java",
        "lucene-819.patch": "https://issues.apache.org/jira/secure/attachment/12352139/lucene-819.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-02-27T16:43:30+0000",
            "content": "This is an \"svn diff\" describing the fix for bug #819. ",
            "author": "Dan Zivkovic",
            "id": "comment-12476217"
        },
        {
            "date": "2007-02-27T19:15:31+0000",
            "content": "Hmmmm ... this patch makes Term#compareTo support Terms with null text. I don't think Lucene is supposed to support null terms. This is mentioned in LIA. Is it anywhere in the docs? Should we document that neither fld nor txt of a Term constructor may be null? Would we actually want to check and throw an exception?\n\nIf this is right, this should be resolved as a won't fix.\n ",
            "author": "Steven Parkes",
            "id": "comment-12476312"
        },
        {
            "date": "2007-02-27T19:18:37+0000",
            "content": "Dan: can you elaborate on how you encountered this NPE? ... Terms shouldn't typically have null \"text\"\n\n(I'm trying to understand if you were doing something \"Expertish\" when this error happened, and modifying compareTo is all that needs to be considered, or if some other code in the core library produced a Term with a null value for text and we need to identify and fix that as well) ",
            "author": "Hoss Man",
            "id": "comment-12476315"
        },
        {
            "date": "2007-02-28T01:22:08+0000",
            "content": "Added unit test. ",
            "author": "Dan Zivkovic",
            "id": "comment-12476479"
        },
        {
            "date": "2007-02-28T01:25:05+0000",
            "content": "Unit test class. ",
            "author": "Dan Zivkovic",
            "id": "comment-12476480"
        },
        {
            "date": "2007-02-28T01:39:21+0000",
            "content": "We use Lucene on content that is often strange and exciting, and we get all sorts of text fields, including nulls. This ends up throwing NPE's with no way to resolve them except inside Lucene. I considered the possibility of a workaround before even filing the bug, but when that proved impossible, I filed the bug, got an Apache login, and submitted the fix. ",
            "author": "Dan Zivkovic",
            "id": "comment-12476483"
        },
        {
            "date": "2007-02-28T01:40:54+0000",
            "content": "p.s. How do I delete attachment #2? ",
            "author": "Dan Zivkovic",
            "id": "comment-12476484"
        },
        {
            "date": "2007-02-28T02:37:32+0000",
            "content": "Can you say anymore about why it was impossible? What if Term checked for null field or text and threw an exception that you could catch (though this might not be a good idea the check would always be there but it's an uncommon case ...). Note that Lucene specifically checks to see if you try to add a null field or a null field value to a doc and won't let you.\n\nAs to deleting attachments, it's unnecessary/discouraged (and possibly these days, impossible). If you name two patches the same, the older one is grayed out, making it pretty clear that one replaces the other. It's considered valuable to be able to go back and look at old attachments. ",
            "author": "Steven Parkes",
            "id": "comment-12476496"
        },
        {
            "date": "2007-02-28T04:12:41+0000",
            "content": "I'm not sure it's a good idea adding extra checks for things that may be used in inner loops (like Term.compareTo()). ",
            "author": "Yonik Seeley",
            "id": "comment-12476506"
        },
        {
            "date": "2007-02-28T05:20:10+0000",
            "content": "i agree with Yonik ... the javadocs for Term don't make it clear that text can't be null \u2013 but we can fix that, i suspect lots of things assume Term.text isn't null.\n\nDan: I'm assuming based on your description that you are building the TermQuery in your own code?  I'm really not clear on why your app can't test for null before constructing the Term ",
            "author": "Hoss Man",
            "id": "comment-12476522"
        },
        {
            "date": "2007-02-28T05:56:04+0000",
            "content": "The workaround is not practical. It would force me to handle the null case as an error, when I already have a non-trivial application in production which considers the null case to be valid. That means going back and revisiting all sorts of assumptions. On the other hand, the Term class never made any assumptions about null text fields, explicitly or implicitly. The cat's out of the bag, so to speak. Therefore, let's just handle the null case gracefully.\n\nIn terms of performance, checking for null will not cause performance issues in any application. ",
            "author": "Dan Zivkovic",
            "id": "comment-12476527"
        },
        {
            "date": "2007-02-28T18:23:00+0000",
            "content": "It would be best to check for null in the constructor rather than in the comparator.  If an exception is unacceptable, might it be reasonable to change the constructor to interpret null as the empty string?  Personally, I'd prefer the exception, but that might break applications. ",
            "author": "Doug Cutting",
            "id": "comment-12476663"
        },
        {
            "date": "2007-02-28T18:29:37+0000",
            "content": "Empty string or null would be the same thing from the point of view of our application. And it would be preferable to an exception coming from a place that didn't use to throw one.\n\nI still don't see the big deal in checking for null, however. If the fix is simple and it's tested and it doesn't affect anyone who does NOT have nulls in their terms, then why not just apply the patch and move on? ",
            "author": "Dan Zivkovic",
            "id": "comment-12476664"
        },
        {
            "date": "2007-02-28T18:37:50+0000",
            "content": "> why not just apply the patch and move on?\n\nTwo reasons: (1) most folks consider it an error to use null for a term's text, an error that unfortunately wasn't checked in the constructor, but causes problems in the comparator, when reading and writing, etc.--basically everywhere a term is used.  Your application only uses such terms in comparators, so you're only concerned about that case, but there are more cases, and if null is officially supported they should all be fixed; and (2) adding complexity to an inner-loop comparator should not be done lightly as it may have performance implications. ",
            "author": "Doug Cutting",
            "id": "comment-12476667"
        },
        {
            "date": "2007-02-28T18:48:03+0000",
            "content": "I really don't see a need to change any code.  People aren't making mistakes constructing Terms, this just sounds like a buggy analyzer.\n\nPersonally I'd rather not even add a check for null in the constructor for Term... it's unnecessary extra code that precludes one from creating a Term with a null value as an application specific marker, or a template (for Term.createTerm()).\n\n> Empty string or null would be the same thing from the point of view of our application.\nI think the correct place to fix this is your application.\nIf null and \"\" are synonymous to you, just fix your application to use \"\".\n\nIf we ever were to explicitly support \"null\" for termText, it seems like \"no value\" would make more sense than \"zero length value\".  (AFAIK, Lucene supports zero length terms) ",
            "author": "Yonik Seeley",
            "id": "comment-12476671"
        },
        {
            "date": "2007-02-28T23:54:02+0000",
            "content": "While I appreciate that you guys are trying to keep things going in a clear and cohesive direction, from my point of view this is not a question of purity, it's a question of practicality. I have to go and look for some sort of hackish workaround, where a simple null check would have solved the problem, without any detriment to anyone else.\n\nOh well... ",
            "author": "Dan Zivkovic",
            "id": "comment-12476770"
        },
        {
            "date": "2007-03-01T23:01:21+0000",
            "content": "Yonik, I suggest we add that field can't be null either (for completeness). Then we can close this as a won't fix.\n\nAt some point I'd like to see if checking for null and throwing does anything to performance ... ",
            "author": "Steven Parkes",
            "id": "comment-12477116"
        },
        {
            "date": "2007-03-01T23:14:49+0000",
            "content": "clarified Term javadoc that Terms with nulls generally result in undefined behavior for most Lucene APIs. ",
            "author": "Yonik Seeley",
            "id": "comment-12477125"
        }
    ]
}