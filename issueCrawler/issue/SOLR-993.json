{
    "id": "SOLR-993",
    "title": "VariableResolverImpl addNamespace overwrites entire namespace instead of adding",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "The addNamespace method in VariableResolverImpl does not so much add the namespace as overwrite it.",
    "attachments": {
        "SOLR-993c.patch": "https://issues.apache.org/jira/secure/attachment/12399836/SOLR-993c.patch",
        "SOLR-993.patch": "https://issues.apache.org/jira/secure/attachment/12398968/SOLR-993.patch",
        "SOLR-993b.patch": "https://issues.apache.org/jira/secure/attachment/12399510/SOLR-993b.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jared Flatow",
            "id": "comment-12668288",
            "date": "2009-01-29T02:17:49+0000",
            "content": "Should solve the issue with some additional cleanups to related files. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12668328",
            "date": "2009-01-29T04:25:06+0000",
            "content": "adding to an existing namespace can be done by this \nassume that you have a namespace \"a.b\" and you wish to add a variable \"c\" to the same namespace  \n\ntry this\n\n((Map)variableresolverimpl.resolve(\"a.b\")).put(\"c\",\"Hello C\")\n\n\n\nis that what you wish to do?  "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12668342",
            "date": "2009-01-29T04:49:33+0000",
            "content": "It is actually the fact that other places in the code, like XPathEntityProcessor, which use addNamespace, seem like they shouldn't be overwriting whatever else is there. What is the intended behavior of addNamespace? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12668356",
            "date": "2009-01-29T05:55:33+0000",
            "content": "addNameSpace() is adding a namespace and replace if that exists. it is equivalent to map.put().\n\nThe functionality that you want is something like addToNamespace() "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12670611",
            "date": "2009-02-05T03:04:26+0000",
            "content": "I am confused by the implementation of namespaces in the VariableResolverImpl. Why are they implemented as chained hashmaps and not flat? The remove method seems to treat them as flat, which seems totally inconsistent? Why does DocBuilder have on line 355:\n\n\nif (isRoot)\n vr.removeNamespace(null);\n\n\n\nWhat is this supposed to accomplish?\n\nI have attempted to patch the implementation with what I believe is the desired behavior. I added an addToNamespace function as well.\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12671338",
            "date": "2009-02-06T21:38:13+0000",
            "content": "I am confused by the implementation of namespaces in the VariableResolverImpl. Why are they implemented as chained hashmaps and not flat?\n\nThere are many different types of namespaces. For example \"dataimporter\" which is used for last_index_time, request parameters, functions etc. Most of the variables needed to be resolved are dynamic and cannot be pre-computed. They are added as a Map of variable names to values just-in-time to a namespace. For example each of the field's values are available in the entity name's namespace. Two entities may have the same field name (e.g. ID is a common name for a primary key and can be present in more than one entities). Therefore a chained map gives us the flexibility of avoiding conflicts and  too many top-level names.\n\nAlso consider the 'functions' namespace used for Evaluators. The evaluator map is actually a dummy object allows us to just-in-time evaluation by overriding the get method.\n\nThe remove method seems to treat them as flat, which seems totally inconsistent?\naddNamespace adds a complete namespace and the removeNamespace method removes a complete namespace.\n\nvr.removeNamespace(null);\n\nI think this was being used as a way to clear the resolver to prepare for the next document. But this is a no-op because the removeNamespace method doesn't do anything if the parameter is null. Need to spend some time to see if it can be removed or replaced with something else. "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671351",
            "date": "2009-02-06T22:03:19+0000",
            "content": "If that is the case then please take a look at patch 993b. It should keep the desired behavior and add some functionality to simplify using the VariableResolverImpl. I cleaned up some of the calls to the resolver to demonstrate this. Also, shouldn't more functionality be added to the interface so other classes can stop relying on the Impl?\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12671357",
            "date": "2009-02-06T22:22:08+0000",
            "content": "Sure, I'll take a look at the patch.\n\nAlso, shouldn't more functionality be added to the interface so other classes can stop relying on the Impl? \n\nCan you give an example? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12671409",
            "date": "2009-02-07T06:07:41+0000",
            "content": "If that is the case then please take a look at patch 993b.\n\nThis patch is WRONG.  It would not work for the functions namespace. Because functions implements a custom map. look at EvaluatorBag.getFunctionsNameSpace(). Moreover ,your version of the VariableResolverImpl is more expensive and creates more objects. Map.putAll() is far more expensive because it creates so many Map.Entry and removals are more costly.\n\nCan you tell me what are you trying to achieve. If you can give me usecases It may help me solve it better. \n\nvr.removeNamespace(null) is a legacy code can be removed.  "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671478",
            "date": "2009-02-07T15:29:48+0000",
            "content": "This patch is WRONG. It would not work for the functions namespace. Because functions implements a custom map. look at EvaluatorBag.getFunctionsNameSpace().\n\nWhy shouldn't it work for the EvaluatorBag Functions? I am using the patch, as well as those functions...\n\nMoreover ,your version of the VariableResolverImpl is more expensive and creates more objects. Map.putAll() is far more expensive because it creates so many Map.Entry and removals are more costly.\n\nGiven the size of the namespaces I doubt there is a major performance penalty (it only creates \"so many Map.Entry\"s if they exist in the namespace already), but if that is a concern it can be avoided by getting the parent namespace first.\n\nCan you tell me what are you trying to achieve. If you can give me usecases It may help me solve it better.\n\nI want to define the behavior of the VariableResolver better so it is more usable. There are significant ambiguities with the existing implementation. The \"DOT_SPLIT and backup\" of namespace names is incorrect. What if I have a namespace \"a.b\" containing a mapping with key \"c.d\", what does \"a.b.c.d\" refer to? The answer currently is it depends what other namespaces I have. \n\nIdeally, I would like to see the VariableResolver interface define the correct way to put values in/out of a namespace, and tell you which values are going to be overwritten when. This will make writing transformers more straightforward. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12671640",
            "date": "2009-02-08T16:30:51+0000",
            "content": "Why shouldn't it work for the EvaluatorBag Functions? I am using the patch, as well as those functions...\n\nActually , I did not study the patch correctly. sorry about that.\n\nI am not sure about one thing\n\n  /*\n   * Splits the name of a namespace into parts which contain only word characters.\n   * The last part of a name may contain arbitrary characters, since it might refer to something other than a namespace.\n   */\n  private ArrayList<String> splitName(String name) {\n\n\n\ncan I add a name with '.' (dot)  in the end? . I guess it should be possible\n\nWhat if I have a namespace \"a.b\" containing a mapping with key \"c.d\", what does \"a.b.c.d\" refer to? The answer currently is it depends what other namespaces I have.\n\nso , what should be the behavior? if I add a namespace \"c.d\" to \"a.b\" it should create a new namespace \"c\" inside \"b\" and put \"d\" into it? if we do  not do that it is still possible to have ambiguity.\n "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671644",
            "date": "2009-02-08T16:57:46+0000",
            "content": "can I add a name with '.' (dot) in the end? . I guess it should be possible\n\nYeah, so: <word>.<another_word>.<one_more_word> will always do a hierarchical lookup. But if you have something like <word>.<another_word>.function(<another_namespace>, <another_namespace>, etc.), the last part unambiguously refers to a function because of the non-word characters (the parenthesis, commas, spaces). I think that is a reasonable definition, but you can always  expand the class of word characters a little to include things like '/', ':',  and '#'. \n\nso , what should be the behavior? if I add a namespace \"c.d\" to \"a.b\" it should create a new namespace \"c\" inside \"b\" and put \"d\" into it? if we do not do that it is still possible to have ambiguity.\n\nI think if you add 'c.d' as a key of a mapping into the namespace 'a.b', the only way to resolve it should be to get the 'a.b' namespace and then get the key 'c.d' (i.e. the same behavior for putting it in as for taking it out). Presumably if you are putting '.' into your key names you are asking for trouble, but the behavior is actually unambiguous. If you want to have a value 'd' in namespace 'a.b.c', then you should add to the 'a.b.c' namespace in the first place. If you add 'c.d' to 'a.b', then thats what you will end up with (i.e., there is no namespace 'a.b.c.d', only 'a.b' with a key 'c.d'). "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12671657",
            "date": "2009-02-08T18:15:46+0000",
            "content": "Yeah, so: <word>.<another_word>.<one_more_word> will always do a hierarchical lookup\n\nIn the current implementation , it is not 'always' a hierarchical lookup. I guess it is useful that way.\n\nI think if you add 'c.d' as a key of a mapping into the namespace 'a.b', the only way to resolve it should be to get the 'a.b' namespace and then get the key 'c.d' (i.e. the same behavior for putting it in as for taking it out ....\n\ninvoking variableresolver thru an API is not the most common usecase. When a variable  is resolved , I wish the behavior to be intuitive. if someone puts a leaf value with \"c.d \" in the namespace \"a.b\" I wish it to fetch the actual value of  \"c.d\" (which it does currently) .  If he also has a namespace  called \"c\" inside \"a.b\" then there is ambiguity , but that is less common and the current behavior seems to be OK.\n\nWhat you are asking now is to change the current behavior of VariableResolver in a non-backcompat way and I cannot see the value. I agree with adding the method addToNameSpace() . But , I am not comfortable changing the way the lookup is done. \n\n\n "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671659",
            "date": "2009-02-08T18:30:24+0000",
            "content": "In that case, what about splitting the names that are added as you previously suggested, so that \"c.d\" adds \"a.b.c\", then \"a.b.c.d\"? At least, for the addToNamespace(name, key, value) method. If you think it is useful to have that behavior, it makes sense, and at least it will be well-defined. Right now, the fact that the lookup of \"a.b.c.d\" relies on \"a.b.c\" not existing seems really bad. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12671719",
            "date": "2009-02-09T03:52:24+0000",
            "content": "In that case, what about splitting the names that are added as you previously suggested, so that \"c.d\" adds \"a.b.c\", then \"a.b.c.d\"?\n\nTake the case of \"dataimporter.request\" (request parameters) namespace. This namespace is very likely to contain parameters with '.' (dot) in that . If I add it after splitting the names , how will I remove the namespace \"dataimporter.request\" completely without removing other variables which were added with addTonameSpace separately?\n\nI guess we can add the new method addToNamespace with the current semantics. The ambiguity may not be really as bad as long as it is documented "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671726",
            "date": "2009-02-09T04:38:53+0000",
            "content": "If I add it after splitting the names , how will I remove the namespace \"dataimporter.request\" completely without removing other variables which were added with addTonameSpace separately?\n\nI'm not clear why this is different than the way it is now? If \"dataimporter.request.a.b\" actually refers to a mapping with key \"a.b\" in the \"dataimporter.request\" namespace, or a mapping with key \"b\" in the \"dataimporter.request.a\" namespace is irrelevant in the case where you want to completely remove the namespace \"datimporter.request\". The difference is that as it is implemented now, \"dataimporter.request.a.b\" is ambiguous as to whether it refers to one of 4 toplevel namespaces: \"dataimporter\", \"dataimporter.request\", \"dataimporter.request.a\" or \"datimporter.request.a.b\". Actually, the problem lies in the current implementation since some of the parameters could potentially be stored in different choices of namespace, thus rendering the others effectively inaccessible. I'm just saying the hierarchy should be somehow enforced to remove that amibguity. By enforcing the hierarchy you ensure that all the request parameters are actually stored in the same namespace.\n\nIn general I think you would want to prevent people from putting variables into reserved namespaces like \"dataimport.request\" by documenting that they are reserved for request parameters, that is fair warning that it is not necessarily a safe place to keep variables. Either way, the intention of removing the whole namespace should be the same.\n\nWhatever you decide I hope you will also keep the log warning when a variable fails to be resolved. That will at least give a clue if template variable resolution is not working as you expect. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12671730",
            "date": "2009-02-09T05:01:44+0000",
            "content": "Jared, I can see your point. However I am not sure how your suggestion will work with dynamic maps where the values are computed based on the key provided to Map#get method. In that case if I add a Map to a namespace, you won't be able to iterate over the keys and find out ones which have a '.' character. How do we handle those cases?\n\nOn the whole, I understand the confusion and I'm fine either way but I'm not sure what value we are adding by making this change.\n\nWhatever you decide I hope you will also keep the log warning when a variable fails to be resolved. That will at least give a clue if template variable resolution is not working as you expect.\n\nI think this is a good change to make. However, we need to be careful with this. With the current way of resolving variables, one may get a lot of false alarms. "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671739",
            "date": "2009-02-09T05:49:08+0000",
            "content": "In that case if I add a Map to a namespace, you won't be able to iterate over the keys and find out ones which have a '.' character. How do we handle those cases?\n\nAre there any cases of dynamic maps right now that don't look like function calls? In my mind, any dynamic variables should look like \"a.b.c.d(...)\", where \"a.b.c\" is the namespace in which you can find the variable/function \"d(...)\". I think this is consistent with the way these are added to namespaces right now? The only problem is if you want to have the function called \"d.e(...)\" in the namespace \"a.b.c\", which I don't think should be supported. Is it unreasonable to say you can't use '.' characters in naming those functions? If you really want to call \"a.b.c.d.e(...)\", then have your dynamic namespace be \"a.b.c.d\" with a function \"e(...)\". \n\nWRT iterating over the maps: to be clear, I would prefer the implementation be changed to how the patch is now: if you add \"b.c\" to \"a\", then thats how you have to retrieve it; therefore you should add \"c\" to \"a.b\" if you want \"a.b.c\" to be resolvable. Perhaps if you have a specific map which you know will have '.' separated names (like request), there should be a flag in the add* methods for whether to check or not.\n\nNonetheless I understand that I might be the only one that cares about these things and that these changes are not backwards compatible. Still, the API explicitly mentions that it is unstable so perhaps changing it slightly is not a big deal. I think this will make some steps towards solidifying the API. The other thing the patch does towards this goal is to make consistent use of what the null and empty string \"\" namespace refer to (the patch follows the convention that null is the top-level namespace, and empty string is treated the same as any other string).\n\nI think this is a good change to make. However, we need to be careful with this. With the current way of resolving variables, one may get a lot of false alarms.\n\nHow so? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12671742",
            "date": "2009-02-09T06:14:42+0000",
            "content": "Are there any cases of dynamic maps right now that don't look like function calls?\nNo but do remember that VariableResolver is agnostic of functions. They are resolved just like any other variable.\n\nIs it unreasonable to say you can't use '.' characters in naming those functions? If you really want to call \"a.b.c.d.e(...)\", then have your dynamic namespace be \"a.b.c.d\" with a function \"e(...)\".\nI guess not.\n\nWRT iterating over the maps: to be clear, I would prefer the implementation be changed to how the patch is now\nWe need to change the patch slightly. In particular, the way the resolve method is implemented, it won't work with passing float values or a string containing '.' to a function.\n\nPlease ignore the comment about false alarms. I'm fine with the idea of logging failures in resolving variables. "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671744",
            "date": "2009-02-09T06:46:06+0000",
            "content": "the way the resolve method is implemented, it won't work with passing float values or a string containing '.' to a function.\n\nWhy not? It should, and at least for the formatDate format string, it does. Which function are you using to test? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12671756",
            "date": "2009-02-09T08:01:30+0000",
            "content": "Jared, can you please update the patch for trunk? I couldn't apply the patch. I think the path is not correct or there is a conflict.\n\n\nIt should, and at least for the formatDate format string, it does. Which function are you using to test?\n\nfor (String part : splitName(variable)) {\n        value = namespace.get(part);\n        namespace = (value instanceof Map) ? (Map) value : Collections.EMPTY_MAP;\n}\n\n\n\nI did not apply the patch but I was looking at the above code. We are splitting by '.' and going into each map we find. Will this reach upto a '.' character in a float or string value given as a parameter to a function?\n\nI think we should take a step back here. What is it that you are trying to achieve? There are multiple things that you are trying to address:\n\n\taddToNamespace method in variable resolver\n\tChange behavior of variable resolver (why? not very clear to me). In this process we are changing working code and disallowing some characters from appearing in variable names (w means no hyphens etc.) and no '.' in dynamic maps. These are not big changes but I want to understand why we need these changes?\n\n\n\nIt is better to focus on one issue at a time. Let us use this issue for the addToNamespace method which we all agree to be useful. Let us create another issue for the discussion on the behavior of variable resolver. "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671886",
            "date": "2009-02-09T15:03:42+0000",
            "content": "Jared, can you please update the patch for trunk? I couldn't apply the patch. I think the path is not correct or there is a conflict.\n\nSure, I will update again and check, but I believe the change to StringBuilder from StringBuffer may cause the conflict, since that occurs in the mergeAll method, which no longer exists in the patched version.\n\nWe are splitting by '.' and going into each map we find. Will this reach upto a '.' character in a float or string value given as a parameter to a function?\n\nThe RE matches all word characters from the beginning of the previous match to the next '.' or the end of the input. Whatever is left over at the end is considered the last token. Therefore the name of the namespace itself must be all word characters, while the 'variable' can be anything. This is the reason the patch is unambiguous as opposed to the current implementation. As it is now, it will '.' split the name, trying to lookup each one, if it is not found it will try to merge tokens back together and look it up again. This is highly dependent on the context the name is being resolved in, whereas the patch always results in the same split boundaries for a given name. Additionally, it has the nice property that the parent namespaces can be determined without checking to see if they exist. "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12671919",
            "date": "2009-02-09T16:52:49+0000",
            "content": "I updated the patch to work off the trunk. The full set of changes in this patch are as follows:\n\n1. get rid of no-op call to removeNamespace(null) in DocBuilder\n2. warn about all unresolved variables from TemplateString\n3. add a getOrInsertNamespace method to VariableResolverImpl, which returns the named namespace, creating it if it doesn't already exist. addNamespace, addToNamespace and removeNamespace are now implemented in terms of this method\n4. add a splitName method to VariableResolverImpl which breaks a name into its hierarchical components (discussed in detail here). getOrInsertNamespace uses this method, as does resolve\n5. modify TemplateTransformer to use the new VariableResolverImpl methods and not to warn about unresolved variables (since this was moved to TemplateString) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12672146",
            "date": "2009-02-10T03:55:31+0000",
            "content": "\n\tThe patch would not apply if it has the patch like a/contrib/dataimporthandler/ .it should not have that \"a\" in the beginning.\n\tit still does not allow other characters in the namespace. We may need to discuss more about this\n\tdid we open another issue for the behavior change in VariableResolver?  I dont see the need for so many changes if we are dealing with things separately. especially the resolve method\n\n "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12672315",
            "date": "2009-02-10T16:46:32+0000",
            "content": "The patch would not apply if it has the patch like a/contrib/dataimporthandler/ .it should not have that \"a\" in the beginning.\n\nUse patch -p1 (or whatever tool you are using, make the patchlevel 1). In case somehow your tool is unable to do that, I am attaching a patch without the prefixes.\n\nit still does not allow other characters in the namespace. We may need to discuss more about this\n\nSure, which other characters should be allowed?\n\nI dont see the need for so many changes if we are dealing with things separately. especially the resolve method\n\nISTM the changes are all interrelated. The addToNamespace method relies on the new getOrInsertNamespace, and changing the others to use this method also ensures that they will be consistent with one another. Perhaps the logging issue should be in a separate patch...? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12672496",
            "date": "2009-02-11T03:56:40+0000",
            "content": "The addToNamespace method relies on the new getOrInsertNamespace, and changing the others to use this method also ensures that they will be consistent with one another. Perhaps the logging issue should be in a separate patch\n\nwe can easily implement addToNamespace w/o the other changes you have made . I wish that the behavior change be implemented in a separate issue. It needs better review. I am still not convinced about the correctness of the implementation\n\nBTW, I am still unable to apply the patch using tortoise svn .  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12672516",
            "date": "2009-02-11T05:40:14+0000",
            "content": "Same as Jared's patch but generated with svn diff. Noble, I think tortoise svn is having problems applying patch generated by git. Try this one instead. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12672517",
            "date": "2009-02-11T05:41:51+0000",
            "content": "thanks shalin . it got applied "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12672538",
            "date": "2009-02-11T07:34:38+0000",
            "content": "new method added addToNamespace w/o making any other changes "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12674497",
            "date": "2009-02-18T07:14:24+0000",
            "content": "Jared, did you get a chance to see the latest patch? "
        },
        {
            "author": "Jared Flatow",
            "id": "comment-12674712",
            "date": "2009-02-18T17:46:45+0000",
            "content": "Shalin: yes I saw it, I still feel the underlying issues are just as important if not moreso. addToNamespace is probably an improvement in the API, but it is still not clear to me how the API is meant to be used, which I can only imagine is true for others as well. I think making the semantics for using the VariableResolver well-defined is the most important part of the patch, as well as this discussion. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12674883",
            "date": "2009-02-19T04:02:32+0000",
            "content": "Hi, Jared,\naddToNamespace() is just one part of the issue. Let us open another issue for the semantics change.\n\nbut it is still not clear to me how the API is meant to be used\n\nThis can be documented well . It should not be a big problem.\n\n\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12711496",
            "date": "2009-05-21T07:05:56+0000",
            "content": "there is no compelling reason to change the behavior now. we can take a relook at this in 1.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872505",
            "date": "2010-05-27T22:06:45+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043695",
            "date": "2011-06-03T16:46:34+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106260",
            "date": "2011-09-16T14:50:17+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412127",
            "date": "2012-07-11T22:26:05+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429876",
            "date": "2012-08-07T03:43:55+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13452213",
            "date": "2012-09-10T17:41:58+0000",
            "content": "moving all 4.0 issues not touched in a month to 4.1 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717369",
            "date": "2013-07-23T18:48:01+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971280",
            "date": "2014-04-16T12:57:39+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15547570",
            "date": "2016-10-05T04:25:31+0000",
            "content": "This seems to be a very, very old discussion that has no next action.\n\nIs there something still pending from this or can this be closed? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-15547686",
            "date": "2016-10-05T05:04:30+0000",
            "content": "let's close this? "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15547717",
            "date": "2016-10-05T05:21:54+0000",
            "content": "A very old issue about - then new - issue. The implementation has changed several times since. If a similar problem happens again, let's open a new issue with updated details. "
        }
    ]
}