{
    "id": "LUCENE-5257",
    "title": "Lock down centralized versioning of ivy dependencies",
    "details": {
        "components": [
            "general/build"
        ],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "LUCENE-5249 introduced centralized versioning of 3rd party dependencies and converted all ivy.xml files across Lucene/Solr to use this scheme.  But there is nothing preventing people from ignoring this setup and (intentionally or not) introducing non-centralized dependency versions.\n\nSOLR-3664 discusses the problem of out-of-sync 3rd party dependencies between Lucene/Solr modules.  Centralized versioning makes synchronization problems less likely but not impossible.\n\nOne fairly simple way to ensure that all modules use the same version of 3rd party deps would be to require that all deps in ivy.xml would have to use the rev=\"${/org/name}\" syntax, via a validation script. \n\nThe problem remains that there may eventually be a requirement to use different 3rd party libs in different modules.  Any form of lockdown here should allow for this possibility.  Hoss's suggestion from a conversation on #lucene IRC earlier today:\n\n\n  <hoss> perhaps exceptions could be by naming convetion\n<sarowe> can you give an example?\n  <hoss> ie: variables must match either ${group}/${artifact} or they must match\n         /VERSION_MISTMATCH_EXCEPTION/${group}/${artifact}\n<sarowe> nice idea\n         no external config required\n  <hoss> right\n         and it has to be real obvious when you are bucking convention\n  <hoss> or better yet: ${group}/${artifact}/VERSION_MISTMATCH_EXCEPTION\n         ... and there is another check that the version file is in ascii order\n         so you are garuntted that it has to be right there in the versions file\n         one line after ${group}/${artifact}\n<sarowe> i like it\n  <hoss> no change someone updating ${group}/${artifact} won't notice it\n         i suppose really it should be\n         ${group}/${artifact}/VERSION_MISTMATCH_EXCEPTION/${reason}\n         ... since you might have more then one exception per ${group}/${artifact}\n         but now i'm just making things up w/o evn really understanding\n         the conventions you've alreay put in place\n<sarowe> :)\n  <hoss> you get the idea\n<sarowe> yes",
    "attachments": {
        "LUCENE-5257.patch": "https://issues.apache.org/jira/secure/attachment/12606561/LUCENE-5257.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-02T18:10:58+0000",
            "content": "\nThe problem remains that there may eventually be a requirement to use different 3rd party libs in different modules. Any form of lockdown here should allow for this possibility. \n\nNot a chance. -1 to jar hell. ",
            "author": "Robert Muir",
            "id": "comment-13784229"
        },
        {
            "date": "2013-10-02T18:39:08+0000",
            "content": "Not a chance. -1 to jar hell.\n\nCool, makes this issue easier.  ",
            "author": "Steve Rowe",
            "id": "comment-13784266"
        },
        {
            "date": "2013-10-02T19:26:16+0000",
            "content": "FWIW: the idea that we might down the road want to allow moduleA to depends on third-party-2.0.jar while unrelated moduleB depends on third-party-3.0.jar came from a mental exercise of \"if we lock this down with a build failure now, how will we deal with it if we decide we want to allow it in some special case later?\"\n\nbut i agree: even if moduleA and moduleB have no dependencies on eachother, and no other moduleC exists that depends on both moduleA and moduleB it's still a bad idea to let moduleA and moduleB depend on diff versions of third-party.jar since some downstream client of lucene/solr might want to use both moduleA and moduleB.\n\nmore importantly: we can lock this down with a build failure now, and if we do ever change out mind, we have an idea here of how to tweak the rules to allow special exceptions in a way that's non-sneaky and really obvious ... but unless someone is clamoring for it, i say we help our users avoid classpath hell just as much as we want to. ",
            "author": "Hoss Man",
            "id": "comment-13784328"
        },
        {
            "date": "2013-10-02T19:49:14+0000",
            "content": "Let me clarify what i mean by jar hell:\n\nif we want to add exceptions because someone jacked up their maven coordinates or some other reason, when in fact its not \"jar hell\", to me thats different than declaring we will allow exceptions for jar hell.\n\nFor example: some stuff depends on jetty6 (org.mortbay.jetty) and other stuff depends on jetty8 (org.eclipse.jetty). This isn't jar hell, because the packages are totally different in the jar files so they don't conflict. They also renamed the coordinates to org.eclipse.jetty to match.\n\nBut i think we shouldnt allow true jar hell (where the stuff inside the jars conflict). People should be able to pick and choose what stuff they want to use and use it, and we shouldnt ship a release with jar hell.\n\nI would also like to explore adding a \"jar hell detector\" in the future to our smoketester, that unzips all jar files and fails if e.g. any .class (maybe even resources outside of META-INF) conflict. I think we should try to improve our build with checks like this, but if we allow for \"jar hell exceptions\" it makes such a check extremely difficult or impossible. ",
            "author": "Robert Muir",
            "id": "comment-13784349"
        },
        {
            "date": "2013-10-03T11:19:26+0000",
            "content": "Patch implementing the idea as a custom Ant task: LibVersionCheckTask.\n\nI had originally planned a scripted implementation, but I figured that could fail for valid ivy-version.properties syntax, or valid ivy.xml syntax, since a script would likely make assumptions about the format, so I went with full parsing for both, though I had to write the Properties file parser, since java.util.Properties doesn't provide file-order access to the parsed contents.\n\nThe new task checks the /org/name keys in the centralized versions file for lexical sort order and for duplicates, then verifies that the rev attributes for all <dependency>-s in all ivy.xml files in the current directory (lucene/ and solr/) and below are formatted in ${/org/name} format, where org matches the value of the \"org\" attribute, and name matches the value of the \"name\" attribute.\n\nI modeled it on (and stole a lot of it from) the custom LicenseCheckTask.\n\nThe patch includes a fix to the ivy-versions.properties file that the new task found: there are currently duplicate property keys for two of the httpcomponents jars.\n\nLike LicenseCheckTask, I made it run with the validate target, so it'll be included with ant precommit.\n\nRun alone, it took less than a tenth of second in each of lucene/ and solr/ on my machine.\n\nI think it's ready to go. ",
            "author": "Steve Rowe",
            "id": "comment-13785006"
        },
        {
            "date": "2013-10-04T06:31:39+0000",
            "content": "New patch with a few changes:\n\n\n\tAdded orphan checking for /org/name coordinate keys in ivy-versions.properties file that are not referred to in any ivy.xml file.\n\tIn order to add orphan checking, I had to make the task run only at the top level, so that it sees all the ivy.xml files across the whole project.  The simplest way to do that with the current build was to place the check-lib-versions target in lucene/build.xml, and then invoke it from the top-level validate target, recursively checking the ivy.xml files in the parent of the lucene/ directory.  (This is a little clunky - really it should live at the top level - but I can live with it.)\n\tCleaned up the ivy-versions.properties file, so that versions shared by two or more libs are represented as a property named for their org/groupId (and sometimes part of their name/artifactId if the org/groupId didn't seem to be sufficiently differentiating).\n\n\n\nI'll commit later today if there are no objections. ",
            "author": "Steve Rowe",
            "id": "comment-13785937"
        },
        {
            "date": "2013-10-04T07:06:51+0000",
            "content": "Patch with cosmetic cleanups and a CHANGES.txt entry. ",
            "author": "Steve Rowe",
            "id": "comment-13785955"
        },
        {
            "date": "2013-10-04T18:03:46+0000",
            "content": "Commit 1529243 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1529243 ]\n\nLUCENE-5257: Lock down centralized versioning of ivy dependencies ",
            "author": "ASF subversion and git services",
            "id": "comment-13786425"
        },
        {
            "date": "2013-10-04T18:14:08+0000",
            "content": "Commit 1529246 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1529246 ]\n\nLUCENE-5257: Fix top-level validate target subant invocation syntax ",
            "author": "ASF subversion and git services",
            "id": "comment-13786438"
        },
        {
            "date": "2013-10-04T18:28:05+0000",
            "content": "Commit 1529248 from Steve Rowe in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1529248 ]\n\nLUCENE-5257: Lock down centralized versioning of ivy dependencies (merged trunk r1529243 and r1529246) ",
            "author": "ASF subversion and git services",
            "id": "comment-13786458"
        },
        {
            "date": "2013-10-04T18:31:15+0000",
            "content": "Commit 1529249 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1529249 ]\n\nLUCENE-5257: merge CHANGES.txt entry with LUCENE-5249's entry ",
            "author": "ASF subversion and git services",
            "id": "comment-13786463"
        },
        {
            "date": "2013-10-04T18:32:07+0000",
            "content": "Commit 1529250 from Steve Rowe in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1529250 ]\n\nLUCENE-5257: merge CHANGES.txt entry with LUCENE-5249's entry (merged trunk r1529249) ",
            "author": "ASF subversion and git services",
            "id": "comment-13786466"
        },
        {
            "date": "2013-10-04T18:34:41+0000",
            "content": "Committed to trunk and branch_4x. ",
            "author": "Steve Rowe",
            "id": "comment-13786473"
        }
    ]
}