{
    "id": "LUCENE-5266",
    "title": "Optimization of the direct PackedInts readers",
    "details": {
        "components": [],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Given that the initial focus for PackedInts readers was more on in-memory readers (for storing stuff like the mapping from old to new doc IDs at merging time), I never spent time trying to optimize the direct readers although it could be beneficial now that they are used for disk-based doc values.",
    "attachments": {
        "LUCENE-5266.patch": "https://issues.apache.org/jira/secure/attachment/12607562/LUCENE-5266.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-09T14:07:32+0000",
            "content": "here is a patch from playing around this morning.\n\nI'm afraid of specialization here: but this one should help the relatively low bpv I think by using readShort ? ",
            "author": "Robert Muir",
            "id": "comment-13790370"
        },
        {
            "date": "2013-10-10T07:43:39+0000",
            "content": "Here's another patch that optimizes for each possible number of bytes that need to be read.  I haven't performance tested it yet, but it passes tests. ",
            "author": "Ryan Ernst",
            "id": "comment-13791282"
        },
        {
            "date": "2013-10-10T08:29:01+0000",
            "content": "This is very close to what I was thinking about, I'm looking forward to the performance tests! ",
            "author": "Adrien Grand",
            "id": "comment-13791316"
        },
        {
            "date": "2013-10-10T15:30:43+0000",
            "content": "I tested Ryan's patch with Karl's float benchmark (but first I switched it to use MMapDir).\n\nBefore (4.x):\n\n\nScoring 25000000 documents with a lucene value (without square root) source took 1361\nScoring 25000000 documents with a lucene value (without square root) source took 1344\nScoring 25000000 documents with a lucene value (without square root) source took 1338\nScoring 25000000 documents with a lucene value (without square root) source took 1373\nScoring 25000000 documents with a lucene value (without square root) source took 1344\n\n\n\nWith Ryan's patch:\n\n\nScoring 25000000 documents with a lucene value (without square root) source took 1116\nScoring 25000000 documents with a lucene value (without square root) source took 1088\nScoring 25000000 documents with a lucene value (without square root) source took 1086\nScoring 25000000 documents with a lucene value (without square root) source took 1086\nScoring 25000000 documents with a lucene value (without square root) source took 1089\n\n\n\nIt's just a micro-benchmark but it looks like a nice speedup! ",
            "author": "Michael McCandless",
            "id": "comment-13791591"
        },
        {
            "date": "2013-10-10T16:25:12+0000",
            "content": "Very nice, indeed. I've also been playing with the patch and it seems to be consistently faster than the previous version of the direct packed reader, so I'll commit it tomorrow if there is no objection. ",
            "author": "Adrien Grand",
            "id": "comment-13791639"
        },
        {
            "date": "2013-10-10T17:21:31+0000",
            "content": "FWIW I plugged in a \"doublesort\" to a macro-benchmark I have at work:\n5000 hard queries (OrHighHighHigh) + sort by doubledocvalues field\n\n\n\n\nname\nqps\navg\np10\np50\np90\np99\n\n\ntrunk\n41.66\n23ms\n16ms\n22ms\n32ms\n42ms\n\n\npatch\n45.32\n21ms\n15ms\n21ms\n29ms\n38ms\n\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-13791700"
        },
        {
            "date": "2013-10-10T17:37:50+0000",
            "content": "Glad to see it works! FWIW, I think we could get another slight bump by making cases 1 - 8 only do a single read, and then adjusting the shift right value accordingly to filter out the extra bytes read.  It would save on the bounds checks there.  In my previous encoding work, we found memory access was so fast that it was better to read more than have any conditionals.  The only caveat is the encoding would need to ensure there is always an extra 2 bytes at the end (so cases 3, 5 and 7 would read an extra byte, and case 6 would read 2 extra bytes).\n\nCase 9 always requires an extra read.  But really it seems like the encoder should never use a value that could cause that? If my math is correct, I believe it can only happen when bpv 57-63.  But the space savings would be mostly negligible at that width compared to 64.   ",
            "author": "Ryan Ernst",
            "id": "comment-13791718"
        },
        {
            "date": "2013-10-11T18:57:26+0000",
            "content": "The only caveat is the encoding would need to ensure there is always an extra 2 bytes at the end.\n\nThere are some places (codecs) where I encode many short sequences consecutively so I care about not wasting extra bytes but if this proves to help performance, I think it shouldn't be too hard to do add the ability to have extra bytes at the end of the stream (I'm thinking about adding a new PackedInts.Format to the enum but there might be other options). ",
            "author": "Adrien Grand",
            "id": "comment-13792948"
        },
        {
            "date": "2013-10-16T01:54:15+0000",
            "content": "Commit 1532623 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1532623 ]\n\nLUCENE-5266: Improved DirectPackedReader performance ",
            "author": "ASF subversion and git services",
            "id": "comment-13796324"
        },
        {
            "date": "2013-10-16T06:53:32+0000",
            "content": "Commit 1532655 from Ryan Ernst in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1532655 ]\n\nLUCENE-5266: Improved DirectPackedReader performance ",
            "author": "ASF subversion and git services",
            "id": "comment-13796481"
        }
    ]
}