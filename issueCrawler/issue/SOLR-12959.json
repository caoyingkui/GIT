{
    "id": "SOLR-12959",
    "title": "Deprecate solrj SimpleOrderedMap",
    "details": {
        "type": "Improvement",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "SolrJ"
        ],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "There is no difference between a NamedList and a  SumpleOrderedMap. It doesn't help to have both of them when they are doing exactly free same things",
    "attachments": {
        "SOLR-12959.patch": "https://issues.apache.org/jira/secure/attachment/12947770/SOLR-12959.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16675319",
            "content": "+1\n\nSince the remedy is for people to just use NamedList, I think it's fine to simply remove it outright without deprecation. ",
            "author": "David Smiley",
            "date": "2018-11-05T15:38:27+0000"
        },
        {
            "id": "comment-16675330",
            "content": "Simple removal is not sufficient, we should verify that it doesn't break back-compat - currently SimpleOrderedMap is serialized in a different way from NamedList, at least in JSONResponseWriter , which affects basically all JSON responses from Solr. ",
            "author": "Andrzej Bialecki",
            "date": "2018-11-05T15:46:05+0000"
        },
        {
            "id": "comment-16675581",
            "content": "Simple removal is not sufficient, we should verify that it doesn't break back-compat - currently SimpleOrderedMap is serialized in a different way from NamedList, ...\n\nthat is 100% the entire point of why SimpleORderedMap exists, as explained in it's class level javadocs.  \n\nDeprecating/removing it w/o some sort of replacement for distinguishing when/how/if response writers need to care about the order of keys in a NamedList is a non-starter. ",
            "author": "Hoss Man",
            "date": "2018-11-05T18:45:15+0000"
        },
        {
            "id": "comment-16675629",
            "content": "... JSON responses from Solr.\n\nThe json.nl influences how named lists are output: https://lucene.apache.org/solr/guide/7_5/response-writers.html#json-nl\n\n... class level javadocs.\n\nLocating them - http://lucene.apache.org/solr/7_5_0/solr-solrj/org/apache/solr/common/util/SimpleOrderedMap.html - reminded me of this being a solrj rather than a solr class. For solr classes we regularly use the luceneMatchVersion to put things onto the deprecate-with-warning-and-then-remove pathway, is something similar (but different) possible for solrj classes? ",
            "author": "Christine Poerschke",
            "date": "2018-11-05T19:13:11+0000"
        },
        {
            "id": "comment-16675653",
            "content": "I mistook the class level javadocs to be obsolete, and I've not understood it well (embarrassing perhaps).  Even if it's docs are correct, I still find the class odd.  One thing \u2013 I thought \"json.nl\" is what toggles these two representations:  \n\n{\"foo\":10,\"bar\":20}\nvs\n[\"foo\",10,\"bar\",20]\n\n\nYet the docs seem to suggest it's SimpleOrderedMap vs (plain) NamedList that will as well?  IMO: Yuck.  that latter format is unfortunate as it doesn't semantically represent the structure; it should merely be an option that the user can toggle with json.nl if they so choose.  Perhaps we should shy away from even having repeated keys in the first place, favoring array values instead.\n\nSecond is the name... as a subclass of NamedList I think it could certainly be better.  \"Simple\"ness isn't interesting (is there a complex variant?).  OrderedMap... maybe not a great name given \"Map\" has loaded assumptions in the JDK (i.e. no repeated key).  If we need a subclass of NamedList then it probably ought to have \"NamedList\" as part of its name.\n\nI think we can do something to improve things here.  Feel free to recommend something Hoss or AB. ",
            "author": "David Smiley",
            "date": "2018-11-05T19:28:34+0000"
        },
        {
            "id": "comment-16675672",
            "content": "I've always wondered... are these two classes used merely for historical reasons, perhaps because LinkedHashMap maybe wasn't appreciated/known at the very start of things? Or is it that we replaced the collections classes to get big performance gains from these custom structures and serializations?\u00a0\n\nI've always wondered why they didn't just implement Map, and why duplicate keys would be allowed (apparently according to the javadocs)...\n\n\u00a0\n\n\u00a0 ",
            "author": "Gus Heck",
            "date": "2018-11-05T19:37:12+0000"
        },
        {
            "id": "comment-16675739",
            "content": "The json.nl influences how named lists are output\n\nRight, but there's also the default behavior that would be different with this change.\n\nI've always wondered why they didn't just implement Map\nAFAIK originally they were meant as a memory optimization as compared to Java collections, and strictly speaking they should implement a MultiMap but that was rejected because it's not a core Java API. Duplicate keys are allowed in order to represent more conveniently multi-valued mappings, without actually introducing a proper MultiMap and without requiring users to deal with value arrays (or lists) ",
            "author": "Andrzej Bialecki",
            "date": "2018-11-05T20:46:11+0000"
        },
        {
            "id": "comment-16675770",
            "content": "Right, but there's also the default behavior that would be different with this change.\n\nSure; 8.0 is fine.  \n\nI think the first step is only to make the output agnostic of the NamedList subclass impl and then see what tests break and then better understand the scope of the change (reporting back here first for consideration before proceeding with removal).  SimpleOrderedMap is used all over the place so I imagine the reach will be broad \u2013 yet I hope no big deal (inconsequential). Users at least have \"json.nl\" at their disposal. ",
            "author": "David Smiley",
            "date": "2018-11-05T21:08:20+0000"
        },
        {
            "id": "comment-16675811",
            "content": "\u00a0I thought \"json.nl\" is what toggles these two representations:\u00a0\nAs documented in the ref guide: json.nl is how users indicate how they would like solr to deal with NamedLists\u00a0\"where order is more important than access by name. \" ... SimpleOrderedMap instances are returned by Solr in use cases where order is NOT more important then access by name.\n\nThese are not competing/duplicated classes ... it is not a \"mistake\" that we have & use both in diff places in the code (although it has been argued in the past that it's a mistake we have/use\u00a0either instead of requiring more type safe objects).\n\nNamedList exists as a way to store & return an ordered list of items which can have names (where the names are not required to be unique). SimpleOrdereMap was added as a subclass later as a way to indicate in building up response structures that while there is an order to the elements, that order is secondary in importance to the key=>value mapping. (In situations where there is no ordering, then absolutely Map should be used.)\n\nThis allows us to have general purpose response structures that can be agnostic to when/where the resulting serialization \u2013 and the choosen serialization impl can preserve order whenever possible/convinient based on the format (ie: xml/javabin regarldess of NamedList impl), but when dealing with some serialization formats / client libraries (ie: json/javascript) where it would be simplier/desirable in many cases to ignore the inherient ordering of the pairs (ie: stored fields in a document) we can do so while still having an option (\"json.nl\") for controlling/allowing a more verbose syntax when it's fundemental to the nature of hte data (ie: facet terms+>value mappings)\n\nThis difference is fundemental to why and how clients consuming JSON can see get simple \"Map\" style representation (where most JSON parsing libraries will throw away the ordering) of the overall response, or of individual documents, or the echParam output, \u2013 while still being able to retrieve a strictly ordered set of results for things like facet terms (where the representation can be varried by modifiing json.nl w/o affecting other ordered lists lists like documents, echoParams, etc...\n\nCompare/contrast...\n\n$ curl \"http://localhost:8983/solr/techproducts/select?q=ipod&fl=id,name&facet=true&facet.field=features&facet.limit=4\"\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":2,\n    \"params\":{\n      \"q\":\"ipod\",\n      \"facet.limit\":\"4\",\n      \"facet.field\":\"features\",\n      \"fl\":\"id,name\",\n      \"facet\":\"true\"}},\n  \"response\":{\"numFound\":3,\"start\":0,\"docs\":[\n      {\n        \"id\":\"IW-02\",\n        \"name\":\"iPod & iPod Mini USB 2.0 Cable\"},\n      {\n        \"id\":\"F8V7067-APL-KIT\",\n        \"name\":\"Belkin Mobile Power Cord for iPod w/ Dock\"},\n      {\n        \"id\":\"MA147LL/A\",\n        \"name\":\"Apple 60 GB iPod with Video Playback Black\"}]\n  },\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{\n      \"features\":[\n        \"adapter\",2,\n        \"car\",2,\n        \"power\",2,\n        \"white\",2]},\n    \"facet_ranges\":{},\n    \"facet_intervals\":{},\n    \"facet_heatmaps\":{}}}\n\n\n\n$ curl \"http://localhost:8983/solr/techproducts/select?q=ipod&fl=id,name&facet=true&facet.field=features&facet.limit=4&json.nl=arrmap\"\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":1,\n    \"params\":{\n      \"q\":\"ipod\",\n      \"facet.limit\":\"4\",\n      \"facet.field\":\"features\",\n      \"json.nl\":\"arrmap\",\n      \"fl\":\"id,name\",\n      \"facet\":\"true\"}},\n  \"response\":{\"numFound\":3,\"start\":0,\"docs\":[\n      {\n        \"id\":\"IW-02\",\n        \"name\":\"iPod & iPod Mini USB 2.0 Cable\"},\n      {\n        \"id\":\"F8V7067-APL-KIT\",\n        \"name\":\"Belkin Mobile Power Cord for iPod w/ Dock\"},\n      {\n        \"id\":\"MA147LL/A\",\n        \"name\":\"Apple 60 GB iPod with Video Playback Black\"}]\n  },\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{\n      \"features\":\n      [\n        {\"adapter\":2},\n        {\"car\":2},\n        {\"power\":2},\n        {\"white\":2}]},\n    \"facet_ranges\":{},\n    \"facet_intervals\":{},\n    \"facet_heatmaps\":{}}}\n\n ",
            "author": "Hoss Man",
            "date": "2018-11-05T22:10:11+0000"
        },
        {
            "id": "comment-16675815",
            "content": "I imagine the reach will be broad \u2013 yet I hope no big deal (inconsequential). Users at least have \"json.nl\" at their disposal.\nAgain json.nl is only useful because we have both of these impls ... to eliminate one impl and say \"use json.nl to control the output\" would make our result structures either 2x complex to consume OR (in the flip chose) useless for preserving order in most JSON client libraries.\n\n\u00a0 ",
            "author": "Hoss Man",
            "date": "2018-11-05T22:11:48+0000"
        },
        {
            "id": "comment-16675863",
            "content": "Neither echoParams (a SolrParams) nor the stored fields (a SolrDocument) are held as NamedLists and thus don't apply in your example. Nonetheless I get your drift.\n\nI wonder... in places where we are using SimpleOrderedMap in a response, and thus the \"access by key\" is most significant... (i.e. it's map-ness is most significant)... maybe we should just switch over to say LinkedHashMap? Keys cannot repeat in a LinkedHashMap but the demands of the two seem to me to compete with each other: ease of access by key & repeated keys are kinda incompatible \u2013 better off using a list of values. I should spot-check some SimpleOrderedMap usages in Solr to see how easily they might be redone as LinkedHashMap.\n\nAs an aside, we're missing a \"maparr\" json.nl value that could represent values inside arrays. \u00a0But I suppose that could not be done in a streaming manner. ",
            "author": "David Smiley",
            "date": "2018-11-05T23:01:17+0000"
        },
        {
            "id": "comment-16675872",
            "content": "Let's get this clear , Only JSON makes a distinction between these two.\n\nJavabin writes the response in exactly the same format irrespective of the output.\n\n\u00a0\n\nHow many people use the other formats of JSON representation other than the simple object representation?\n\n\u00a0\n\nI would say we should even get rid of these complex representations of JSON ",
            "author": "Noble Paul",
            "date": "2018-11-05T23:21:01+0000"
        },
        {
            "id": "comment-16675873",
            "content": "Neither echoParams (a SolrParams) nor the stored fields (a SolrDocument) are held as NamedLists and thus don't apply in your example.\nTo be clear: echoParams absolutely applies in my example ... it's BECAUSE the params are put in the response as a SimpleOrderedMap (which, as a reminder, is a\u00a0subclass of NamedList) that they are always returned to the json client as \"simple (ordered) map\" regardless of the value of json.nl\n\n(but yes, SolrDocuments are an analogous structure in the response, not actually implemented as\u00a0 SimpleOrderedMaps ... sorry if that was missleading)\nI wonder... in places where we are using SimpleOrderedMap in a response, and thus the \"access by key\" is most significant... (i.e. it's map-ness is most significant)... maybe we should just switch over to say LinkedHashMap? [...] the demands of the two seem to me to compete with each other: ease of access by key & repeated keys are kinda incompatible ...\nNot really ... the allowance of duplicated keys goes back to the fact that NamedLists (which reminder: SimpleOrderedMap is a subclass of) are fundementally \"lists of things which may have names\" \u2013 and the names frequently comes from users, and we allow them to duplicated because that's what the user asked for, and (it was decided long ago that) when it is in fact very easy to give the user what they asked for, that's better then silently/accidentally throwing away data by only using a (Linked)Map, or throwing an explicit error.\u00a0\n\nFor example: a user who accidently uses the same key to in two diff facet.field params...\n\n\n$ curl 'http://localhost:8983/solr/techproducts/select?q=ipod&rows=0&facet=true&facet.field=%7B!key=xxx%7Dfeatures&facet.field=%7B!key=xxx%7Dmanu_id_s&facet.limit=1&omitHeader=true&wt=xml'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n\n<result name=\"response\" numFound=\"3\" start=\"0\">\n</result>\n<lst name=\"facet_counts\">\n  <lst name=\"facet_queries\"/>\n  <lst name=\"facet_fields\">\n    <lst name=\"xxx\">\n      <int name=\"adapter\">2</int>\n    </lst>\n    <lst name=\"xxx\">\n      <int name=\"belkin\">2</int>\n    </lst>\n  </lst>\n  <lst name=\"facet_ranges\"/>\n  <lst name=\"facet_intervals\"/>\n  <lst name=\"facet_heatmaps\"/>\n</lst>\n</response>\n\n\n\nShould the faceting code hard fail on this (or silently drop one of them) because it MIGHT cause a problem/confusion in serialization to JSON ... even though the user may be using a format like XML where they don't actaully care about the \"key\" and plan on consuming them in order? ",
            "author": "Hoss Man",
            "date": "2018-11-05T23:22:01+0000"
        },
        {
            "id": "comment-16675876",
            "content": "How many people use the other formats of JSON representation other than the simple object representation?\nanybody who cares about the order of facet counts is going to care if you force simple maps ",
            "author": "Hoss Man",
            "date": "2018-11-05T23:24:04+0000"
        },
        {
            "id": "comment-16675885",
            "content": "The order is never changed. It's always in the same order as NamedList. When you read it at the other end, if you use any of the ordered maps it's good enough ",
            "author": "Noble Paul",
            "date": "2018-11-05T23:38:07+0000"
        },
        {
            "id": "comment-16675999",
            "content": "This is interesting and enlightening \u00a0Some thoughts:\n\n1) I don't get the phrase\u00a0\u00a0\"order is\u00a0secondary\u00a0in importance.\" When I read that in the javadoc I'm not sure (based on that phrase) if order is required or if it can be sacrificed in some refactoring later. Looking around will answer the question, but the phrase muddies the water that would otherwise be clear (imho). Either order is required or it's not...\n\n2) It sounds like the\u00a0subclass is a solely rendering hint and intended to be otherwise\u00a0identical. I think if we leave things as is, the javadoc should say THAT explicitly (assuming I got it right).\u00a0\n\n3)\u00a0It sounds like this could be\u00a0a boolean flag on NamedList instead of a subclass?\u00a0or if we want to leave open other implementations\u00a0an enum? Maybe NamedList.Render with values ARRAY_1D and ARRAY_TUPLES (and perhaps some point ARRAY_2D or something else...) I'd\u00a0also advocate staying away from the word \"map\" since the allowance of duplicate keys\u00a0is extremely surprising for anything called a map\n\n\"features\":[\n        \"adapter\",2,\n        \"car\",2,\n        \"power\",2,\n        \"white\",2]\n\u00a0\n\n\n\u00a0\"features\":\n      [\n        {\"adapter\":2},\n        {\"car\":2},\n        {\"power\":2},\n        {\"white\":2}]\n\n\nI\u00a0seearched for\u00a0cases where we\u00a0check\u00a0\"instanceof SimpleOrderedMap\" and they all\u00a0occur where we know we have a\u00a0NamedList, so a boolean or enum attribute should work.\n\n4) Finally, a question:\u00a0 besides representing parameters from the GET request line,\u00a0when do we handle/expect/use duplicate keys? Examples are not popping to mind... ",
            "author": "Gus Heck",
            "date": "2018-11-06T02:03:59+0000"
        },
        {
            "id": "comment-16676003",
            "content": "\n\tIn code\u00a0SimpleOrderedMap is exactly same as NamedList\n\tIn javabin or XML or any other format ,\u00a0SimpleOrderedMap is exactly the same\n\tIn\u00a0JSON response, the default behavior for both NamedList and\u00a0SimpleOrderedMap are serialized exactly same way\n\tWhen we choose the namedListStyle to be something else , SimpleOrderedMap is serialized as JSON_NL_MAP .\n\n\n\nThe following is the code for serializing NaMedList / SimpleOrderedMap\n\n\u00a0\n\ndefault void writeNamedList(String name, NamedList val) throws IOException {\n    String namedListStyle = getNamedListStyle();\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name, val);\n    } else if (namedListStyle == JSON_NL_FLAT) {\n      writeNamedListAsFlat(name, val);\n    } else if (namedListStyle == JSON_NL_MAP) {\n      writeNamedListAsMapWithDups(name, val);\n    } else if (namedListStyle == JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name, val);\n    } else if (namedListStyle == JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name, val);\n    } else if (namedListStyle == JSON_NL_ARROFNTV) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with ArrayOfNameTypeValueJSONWriter\");\n    }\n  }\n\n\nSo , again, what's the feature that we want to preserve here? If we replace SimpleOrderedMap with a LinkedHashMap , we get exactly the same behavior as we get today.\n\nThe problem with SimpleOrderedMap is that it doesn't guarantee that the keys are unique ",
            "author": "Noble Paul",
            "date": "2018-11-06T02:07:26+0000"
        },
        {
            "id": "comment-16676005",
            "content": "Ah, just noticed the set of constants in JsonTextWriter... those plus an\u00a0USER_SPECIFIED (the default)\u00a0could be used for the enum, and the value in the named list overrides the value in json.nl creating the same effect and giving us options of using any of those formats where we want\u00a0 (without creating subclasses) ",
            "author": "Gus Heck",
            "date": "2018-11-06T02:14:10+0000"
        },
        {
            "id": "comment-16676061",
            "content": "Noble Paul\u00a0I agree that it would be very nice to be able to use a standard collection class instead of NamedList from a programmer convenience standpoint. I've had this thought many times too, but expected such a road to be bumpy and controversial and so I didn't start down it .\n\nIt seems from the above so far that 2 things stand in the way (identified thus far)\n\n\tAndrzej Bialecki  says the current classes were meant to save memory (something worth testing since java has evolved a great deal since they were created, named lists are mentioned in SOLR-17 so they clearly predate our bug tracking system)\n\tThe handling of duplicate keys is a feature. Personally, if I were the user I'd want the above example Hoss Man\u00a0gave with accidentally duplicated names to throw an error, not give me back something that I would\u00a0probably subsequently throw away when I stuffed the results into a map or tried to build a JavaScript object out of it...\n\n\n\nSo\u00a0it would\u00a0be necessary to verify performance and find widespread agreement that that back compatibility break is feasible and worthwhile\u00a0\n\nAlso note that the code you quote is using SimpleOrderedMap to override and ignore the json.nl setting. ",
            "author": "Gus Heck",
            "date": "2018-11-06T02:46:06+0000"
        },
        {
            "id": "comment-16676078",
            "content": "Andrzej Bialecki  says the current classes were meant to save memory (something worth testing since java has evolved a great deal since they were created\n\nYes. you are right. Let's try to understand the requirement\n\nFrom the serialization point of view, it's just a Map and nothing else\n\nWe can have an interface called SolrMap which is always be serialized into a Map like structure. We can have memory efficient/inefficient implemenatations of the same class. \nThe problem today is we have tied the wire format () with a Solid java class which actually means nothing to the users (or even developers)\n\nThe handling of duplicate keys is a feature..\nit's not a feature. It's a price we pay for the memory efficiency of using a NamedList like class. \n\nSo it would be necessary to verify performance and find widespread agreement that that back compatibility break is feasible and worthwhile \nThe performance impact is is well known . We should keep sensible interfaces and multiple implementations depending on how much price we want to pay.\n\nJSON only understands a Map like Object. it does not matter for other serialization formats anyway ",
            "author": "Noble Paul",
            "date": "2018-11-06T03:12:51+0000"
        },
        {
            "id": "comment-16676096",
            "content": "I concur with Noble & Gus's opinion that handling duplicate keys where you want to convey a map is more likely indicative of a bug that ought to be loudly reported to the user than it is a feature. \u00a0Well said guys. \u00a0But perhaps a realistic example could present itself to the contrary. \u00a0One way to help find it may be to temporarily override\u00a0add() to assert the key doesn't already exist then see which tests fail.\n\nI guess my satisfaction point is merely this: in 8.0 SimpleOrderedMap is nowhere to be found.\u00a0\u00a0Either remove or rename it or do it some other way (e.g. boolean on NL). \u00a0We can do better folks. ",
            "author": "David Smiley",
            "date": "2018-11-06T03:55:18+0000"
        },
        {
            "id": "comment-16679138",
            "content": "One way to help find it may be to temporarily override add() to assert the key doesn't already exist then see which tests fail.\n\nsounds good ",
            "author": "Noble Paul",
            "date": "2018-11-08T01:08:14+0000"
        },
        {
            "id": "comment-16683188",
            "content": "Perf runs runs using the various Map like containers\n\n\tNamedList\n\tHashMap\n\tLinkedHashMap\n\tFastOrderedMap : This is a new container backed by a NamedList but lookups are done using a lazily created <int,int> map. The map is constructed only if a key based lookup is performed\n\n\n\n\nTOTAL_KEYS : 1000\nTOTAL_OBJS : 10000\nTOTAL_LOOKUPS : 1000000\n---------------------------------------\nram usage KB FASTORDEREDMAP: 108969\ntime taken FOM: 222\n---------------------------------------\nLinkedHashMap ram usage KB: 471371\ntime taken LINKEDMAP: 210\n---------------------------------------\nHASHMAP ram usage KB: 393179\ntime taken HASHMAP: 207\n---------------------------------------\nram usage KB NL: 109039\ntime taken NamedList: 3022\n\n=====================================================\nTOTAL_KEYS : 100\nTOTAL_OBJS : 10000\nTOTAL_LOOKUPS : 1000000\n---------------------------------------\nram usage KB NL: 9844\ntime taken NamedList: 493\n---------------------------------------\nLinkedHashMap ram usage KB: 49809\ntime taken LINKEDMAP: 187\n---------------------------------------\nHASHMAP ram usage KB: 41929\ntime taken HASHMAP: 185\n---------------------------------------\nram usage KB FASTORDEREDMAP: 10368\ntime taken FOM: 205\n\n\n ",
            "author": "Noble Paul",
            "date": "2018-11-12T04:00:14+0000"
        }
    ]
}