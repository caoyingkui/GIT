{
    "id": "LUCENE-7460",
    "title": "Should SortedNumericDocValues expose a per-document random-access API?",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Wish"
    },
    "description": "Sorted numerics used to expose a per-document random-access API so that accessing the median or max element would be cheap. The new SortedNumericDocValues still exposes the number of values a document has, but the only way to read values is to use \n{nextValue}\n, which forces to read all values in order to read the max value.\n\nFor instance, SortedNumericSelector.MAX does the following in master (the important part is the for-loop):\n\n\n    private void setValue() throws IOException {\n      int count = in.docValueCount();\n      for(int i=0;i<count;i++) {\n        value = in.nextValue();\n      }\n    }\n\n    @Override\n    public int nextDoc() throws IOException {\n      int docID = in.nextDoc();\n      if (docID != NO_MORE_DOCS) {\n        setValue();\n      }\n      return docID;\n    }\n\n\n\nwhile it used to simply look up the value at index count-1 in 6.x:\n\n\n    @Override\n    public long get(int docID) {\n      in.setDocument(docID);\n      final int count = in.count();\n      if (count == 0) {\n        return 0; // missing\n      } else {\n        return in.valueAt(count-1);\n      }\n    }\n\n\n\nThis could be a conscious decision since a sequential API gives more opportunities to the codec to compress efficiently, but on the other hand this API prevents sorting by max or median values to be efficient.\n\nOn my end I have a preference for the random-access API.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15517118",
            "author": "David Smiley",
            "date": "2016-09-23T17:56:29+0000",
            "content": "+1 to random access for within-document. "
        },
        {
            "id": "comment-15517240",
            "author": "Michael McCandless",
            "date": "2016-09-23T18:48:14+0000",
            "content": "I'm not convinced this is a good idea.\n\nE.g. Lucene's postings don't provide random access to each term occurrence within one document: you have to iterate them if you want to see them.\n\nAnd I think it's somewhat abusive to store such a huge number of numeric values in a single document that this API change would matter.  For apps that really need a fast way to compute the min and max, they can index the min and max themselves?\n\nIt's important we keep our search time APIs in check. "
        },
        {
            "id": "comment-15522041",
            "author": "Adrien Grand",
            "date": "2016-09-26T04:50:44+0000",
            "content": "Sorted numerics make it a bit hard to reason about to me since I am not very clear about the use-cases, but I guess that in some cases one would want to use the minimum value when sorting in ascending order and the max value when sorting in descending order, so having fast access to the maximum value too feels like an important feature. Of course users can index the min/max values directly but I think there is also some value in flexibility, eg. we do not require users to index edge n-grams to run prefix queries.\n\nThat said I do not feel too strongly about it and mostly wanted to give some visibility to this change of our doc values API and discuss it. If you feel strongly about keeping the iterator API, I'm good with it. "
        }
    ]
}