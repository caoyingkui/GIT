{
    "id": "SOLR-6264",
    "title": "Distributed commit and optimize are executed serially across all replicas.",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Regardless of whether one agrees with optimizing, when you execute an optimize request using waitSearcher=true, the requests from the controller node are sent to each replica in the collection serially. \n\nYou can send the optimize command to the update handler for a collection to any node in the cluster. For instance, if I had a collection named \"foo\":\n\ncurl -i -v http://localhost:8984/solr/foo/update --data-binary '<optimize maxSegments=\"1\" waitSearcher=\"true\"/>' -H 'Content-type:application/xml'\n\nThe node that receives this request will collect the URL for all \"live\" replicas in the collection (not just leaders) (see DistributedUpdateProcessor#getCollectionUrls) and then forward the commit request to each of them. On the surface, the code looks like it forwards the request asynchronously to all replicas. However, this is not actually what happens; the commit requests to each replica in the collection will be processed serially when using waitSearcher=true (because ConcurrentUpdateSolrServer's background queue processing is by-passed for commits).\n\nBottom-line, if you request the collection to be optimized, the request gets forwarded around as you'd expect but is done synchronously so can take a long time.",
    "attachments": {
        "SOLR-6264.patch": "https://issues.apache.org/jira/secure/attachment/12657030/SOLR-6264.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-14069552",
            "date": "2014-07-22T00:00:42+0000",
            "content": "Good catch!  Is this true for commit also? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069570",
            "date": "2014-07-22T00:15:52+0000",
            "content": " waitSearcher=true (because ConcurrentUpdateSolrServer's background queue processing is by-passed for commits).\n\nBut don't we use a different ConcurrentUpdateSolrServer for each Solr URL? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069574",
            "date": "2014-07-22T00:19:32+0000",
            "content": "I see - it waits for each call on each ConcurrentUpdateSolrServer#request call as it loops through them. Interesting. Good find, fairly ugly, let's fix it. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14069577",
            "date": "2014-07-22T00:20:46+0000",
            "content": "Yes, we do, which is why this is tricky to see  The SolrCmdDistributor.distribCommit has a for loop that calls submit:\n\n    for (Node node : nodes) \n{\n      submit(new Req(cmd.toString(), node, uReq, false));\n    }\n\nThe submit uses a different CUSS of course, but the for loop is blocked because the \"async\" submit is actually sync because ConcurrentUpdateSolrServer skips the runners part if it's a commit. I only stumbled upon this by looking at timestamp of requests and realized they were running serially and then scratched my head a bit because I know StreamingSolrServers and CUSS pretty well at this point.\n\nI think it is true for commits too. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069583",
            "date": "2014-07-22T00:25:28+0000",
            "content": "Perhaps we have to put in a thread pool and ensure the async path of SolrCmdDistrbiutor#submit is async by putting it on another thread and making errors thread safe. I'm not sure - take a bit of thought to trace it all out. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069584",
            "date": "2014-07-22T00:26:30+0000",
            "content": "I think it is true for commits too.\n\nIt's certainly true for commits - it only happens for optimize because it rides commits. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14069630",
            "date": "2014-07-22T00:57:00+0000",
            "content": "We probably only want to use the thread poll for commits (and optimizes) ... for other update requests, we probably don't want to spawn a thread that spawns runners, right? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069684",
            "date": "2014-07-22T01:45:41+0000",
            "content": "Here is a rough patch with what I'm thinking. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069690",
            "date": "2014-07-22T01:51:54+0000",
            "content": "I still have to finish it up and run some tests - just a quick jam out for comment. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14069776",
            "date": "2014-07-22T03:51:09+0000",
            "content": "with waitSearcher=true\n\nI think you will get the same thing with a pure commit and no docs or deletes. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14070415",
            "date": "2014-07-22T15:55:56+0000",
            "content": "Patch looks good and I ran it through my scenario (described above ^) and the optimize was definitely sent to all replicas in parallel and finished in less than half the runtime previously. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14075412",
            "date": "2014-07-26T15:03:55+0000",
            "content": "Here is a cleaned up patch. If there are no further comments, I'll commit this soon. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14075421",
            "date": "2014-07-26T16:06:13+0000",
            "content": "+1 LGTM "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14076569",
            "date": "2014-07-28T18:45:47+0000",
            "content": "Commit 1614118 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1614118 ]\n\nSOLR-6264: Distributed commit and optimize are executed serially across all replicas. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14076572",
            "date": "2014-07-28T18:46:37+0000",
            "content": "Commit 1614120 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1614120 ]\n\nSOLR-6264: Distributed commit and optimize are executed serially across all replicas. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14076574",
            "date": "2014-07-28T18:46:52+0000",
            "content": "Thanks! "
        }
    ]
}