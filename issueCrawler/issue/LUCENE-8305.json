{
    "id": "LUCENE-8305",
    "title": "ComplexPhraseQuery.rewrite can throw exception RE MatchNoDocsQuery if MTQ sub-clause matches no terms",
    "details": {
        "components": [
            "modules/queryparser"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "6.3",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "With Solr v6.3, when I issue this query:\n\nhttp://localhost:8983/solr/BestBuy/select?wt=json&rows=10&q=\n{!complexphrase%20inOrder=false}\ntext:%22maytag~%20(refri~%20OR%20refri*)%20%22&fl=id&hl=true&hl.preserveMulti=false&hl.fragsize=60&hl.fl=nameX,shortDescription,longDescription,artistName,type,manufacturer,department\n\nI get this error in the JSON response:\n\n*************************************************************\n{\n  \"responseHeader\": {\n    \"zkConnected\": true,\n    \"status\": 500,\n    \"QTime\": 8,\n    \"params\": {\n      \"q\": \"\n{!complexphrase inOrder=false}\ntext:\\\"maytag~ (refri~ OR refri*) \\\"\",\n      \"hl\": \"true\",\n      \"hl.preserveMulti\": \"false\",\n      \"fl\": \"id\",\n      \"hl.fragsize\": \"60\",\n      \"hl.fl\": \"nameX,shortDescription,longDescription,artistName,type,manufacturer,department\",\n      \"rows\": \"10\",\n      \"wt\": \"json\"\n    }\n  },\n  \"response\": {\n    \"numFound\": 2,\n    \"start\": 0,\n    \"docs\": [\n      \n{\n        \"id\": \"5411379\"\n      }\n,\n      {\n        \"id\": \"5411404\"\n      }\n    ]\n  },\n  \"error\": \n{\n    \"msg\": \"Unknown query type:org.apache.lucene.search.MatchNoDocsQuery\",\n    \"trace\": \"java.lang.IllegalArgumentException: Unknown query type:org.apache.lucene.search.MatchNoDocsQuery\\n\\tat org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery.addComplexPhraseClause(ComplexPhraseQueryParser.java:388)\\n\\tat org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery.rewrite(ComplexPhraseQueryParser.java:289)\\n\\tat org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extract(WeightedSpanTermExtractor.java:230)\\n\\tat org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(WeightedSpanTermExtractor.java:522)\\n\\tat org.apache.lucene.search.highlight.QueryScorer.initExtractor(QueryScorer.java:218)\\n\\tat org.apache.lucene.search.highlight.QueryScorer.init(QueryScorer.java:186)\\n\\tat org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(Highlighter.java:195)\\n\\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingByHighlighter(DefaultSolrHighlighter.java:602)\\n\\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingOfField(DefaultSolrHighlighter.java:448)\\n\\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DefaultSolrHighlighter.java:410)\\n\\tat org.apache.solr.handler.component.HighlightComponent.process(HighlightComponent.java:141)\\n\\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:295)\\n\\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:153)\\n\\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2213)\\n\\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:654)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:460)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:303)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:254)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:518)\\n\\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\\n\\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)\\n\\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\\n\\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\\n\\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)\\n\\tat java.lang.Thread.run(Thread.java:745)\\n\",\n    \"code\": 500\n  }\n}\n\n*************************************************************\n\nI did NOT have this error in Solr v6.1 so something has changed in v6.3 that is causing this error.\n\nSteve Rowe thinks it may be related to https://issues.apache.org/jira/browse/LUCENE-7337\n\nHoss' initial thoughts:  \"i think the root of the issue is that the way those fuzzy and prefix queries are parsed means that they may produce an empty boolean query depending on the contents of the index, and then the new optimization rewrites those empty boolean queries into MatchNoDocsQueries \u2013 but the highlighter (which uses hueristics to figure out what to ask each query \u2013 based on it's type \u2013 what to highlight) doesn't know what to do with that.  i'm really suprised the highlighter throws an error in the \"unexpected query type\" code path instead of just ignorning it.\"",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16187870",
            "author": "Bjarke Mortensen",
            "content": "I have a similar error on Solr 6.6.1\nAs the stack trace shows it stems from ComplexPhrase and highlighting.\n\n{\n  \"responseHeader\":{\n    \"status\":500,\n    \"QTime\":4,\n    \"params\":{\n      \"q\":\"query:\\\"\n{!complexphrase inOrder=false df=all_text}\n\\\\\\\"patien* (alarm* OR n\u00f8dkald*)\\\\\\\"~5\\\" OR sikringsanl\u00e6g*\",\n      \"hl\":\"on\",\n      \"indent\":\"on\",\n      \"fl\":\"content_hash\",\n      \"fq\":[\"(document_date:[2016-11-09T00:00:00Z TO *])\",\n        \"document_type:(minutes OR addendum OR agenda OR budget OR financial_report)\"],\n      \"wt\":\"json\"}},\n  \"response\":{\"numFound\":106,\"start\":0,\"docs\":[\n      \n{\n        \"content_hash\":\"762a3e39abb55ee1e554c30caaf094a325c42d98\"}\n,\n      \n{\n        \"content_hash\":\"616c10b300e4537226375a78e8f8ecf789aeb6ac\"}\n,\n      \n{\n        \"content_hash\":\"d466a7d69d3e7bca336f4d20584d1193005874f7\"}\n,\n      \n{\n        \"content_hash\":\"918567c6917d97061e20f6df1d205e69202e941b\"}\n,\n      \n{\n        \"content_hash\":\"c321a91bb9bf2143eb63a10b7492b6fc19be58cc\"}\n,\n      \n{\n        \"content_hash\":\"a56fb74298b10930f4895f43c7c11dcf83e9a9e7\"}\n,\n      \n{\n        \"content_hash\":\"6ffdd5476907e87fdc62a2a33f1cd1fd1823cc83\"}\n,\n      \n{\n        \"content_hash\":\"60a1d8d6a9f54b62a69af41cb951ab90884bd48a\"}\n,\n      \n{\n        \"content_hash\":\"7e9b19bcad0c0a88b89286e74ad94f202d67e8ca\"}\n,\n      \n{\n        \"content_hash\":\"18b25f0a032d848d92918df7db0e3fac98576a58\"}\n]\n  },\n  \"error\":\n{\n    \"msg\":\"Unknown query type:org.apache.lucene.search.MatchNoDocsQuery\",\n    \"trace\":\"java.lang.IllegalArgumentException: Unknown query type:org.apache.lucene.search.MatchNoDocsQuery\\n\\tat org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery.addComplexPhraseClause(ComplexPhraseQueryParser.java:403)\\n\\tat org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery.rewrite(ComplexPhraseQueryParser.java:296)\\n\\tat org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extract(WeightedSpanTermExtractor.java:230)\\n\\tat org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extract(WeightedSpanTermExtractor.java:113)\\n\\tat org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(WeightedSpanTermExtractor.java:522)\\n\\tat org.apache.lucene.search.highlight.QueryScorer.initExtractor(QueryScorer.java:218)\\n\\tat org.apache.lucene.search.highlight.QueryScorer.init(QueryScorer.java:186)\\n\\tat org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(Highlighter.java:195)\\n\\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingByHighlighter(DefaultSolrHighlighter.java:612)\\n\\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingOfField(DefaultSolrHighlighter.java:456)\\n\\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DefaultSolrHighlighter.java:418)\\n\\tat org.apache.solr.handler.component.HighlightComponent.process(HighlightComponent.java:182)\\n\\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:296)\\n\\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:173)\\n\\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2477)\\n\\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:723)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:529)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:361)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:305)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1691)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\\n\\tat org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:534)\\n\\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\\n\\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\\n\\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\\n\\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\\n\\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\\n\\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\",\n    \"code\":500}\n} ",
            "date": "2017-10-02T11:16:41+0000"
        },
        {
            "id": "comment-16187898",
            "author": "Bjarke Mortensen",
            "content": "When https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a3fc7ef was committed, a case for MatchNoDocsQuery was made in ComplexPhraseQuery.rewrite:\n} else if (qc instanceof MatchNoDocsQuery) {\n\nWill it be needed to make the same case in ComplexPhraseQuery.addComplexPhraseClause when the child clauses are iterated? ",
            "date": "2017-10-02T11:58:32+0000"
        },
        {
            "id": "comment-16191031",
            "author": "ASF GitHub Bot",
            "content": "GitHub user bjarkebm opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/258\n\n    SOLR-10078: Handle MatchNoDocsQuery in BooleanQuery nested in Complex\u2026\n\n    \u2026PhraseQuery\n    When a BooleanQuery is nested inside a ComplexPhrase, and one of the terms returns a MatchNoDocsQuery (which was introduced in LUCENE-7337), ComplexPhraseQuery.addComplexPhraseClause throws an exception \"Unknown query type:org.apache.lucene.search.MatchNoDocsQuery\"\n\n    Example: \"(john OR nosuchword*)  smith\"\n\n    The fix is to handle MatchNoDocsQuery the same way as it is done in ComplexPhraseQuery.rewrite\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bjarkebm/lucene-solr branch_7x\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/258.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #258\n\n\ncommit dfb57cd5b3913f9acb264aec0cfaabcdcf181289\nAuthor: Bjarke Buur Mortensen <mortensen@eluence.com>\nDate:   2017-10-04T09:11:25Z\n\n    SOLR-10078: Handle MatchNoDocsQuery in BooleanQuery nested in ComplexPhraseQuery\n\n ",
            "date": "2017-10-04T09:17:39+0000"
        },
        {
            "id": "comment-16468535",
            "author": "Bjarke Mortensen",
            "content": "I see that this issue is attached to the highlighter component. This is not correct. It affects all parts of querying with the ComplexPhraseQuery.\u00a0David Smiley, Steve Rowe would any of you be able to change the component, so that it can get looked at by the correct people, assuming that you are not those people?\u00a0\n\nThe pull request is ~7months old now, but still\u00a0merges cleanly with master, so it would be really nice if this could get included soon. ",
            "date": "2018-05-09T08:14:18+0000"
        },
        {
            "id": "comment-16469852",
            "author": "David Smiley",
            "content": "+1 Looks good.  Thanks for the contribution.  This apparently was overlooked in LUCENE-7337 which flipped how BQ & MatchNoDocsQuery rewrite to each other.\n\nI'll commit shortly. ",
            "date": "2018-05-10T02:43:50+0000"
        },
        {
            "id": "comment-16469861",
            "author": "ASF subversion and git services",
            "content": "Commit e91d120999d0e92523aed5b1ced1513538c3c05e in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e91d120 ]\n\nLUCENE-8305: ComplexPhraseQuery.rewrite now handles an embedded MultiTermQuery\nthat rewrites to a MatchNoDocsQuery instead of throwing an exception.\nFixes #258\nFixes #327 ",
            "date": "2018-05-10T03:04:00+0000"
        },
        {
            "id": "comment-16469862",
            "author": "ASF subversion and git services",
            "content": "Commit 9eea96ac053cd115da6373ba9d2ec0a1d2319781 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9eea96a ]\n\nLUCENE-8305: ComplexPhraseQuery.rewrite now handles an embedded MultiTermQuery\nthat rewrites to a MatchNoDocsQuery instead of throwing an exception.\nFixes #258\nFixes #327\n\n(cherry picked from commit e91d120) ",
            "date": "2018-05-10T03:05:44+0000"
        }
    ]
}