{
    "id": "SOLR-3035",
    "title": "XML and JSON response writers don't handle short or binary field types",
    "details": {
        "affect_versions": "3.1,                                            3.5,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Response Writers"
        ],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The XML and JSON response writers return data from short schema fields as \"java.lang.Short:<value>\".\n\nIn addition, binary fields (for sharded requests) are returned as \"[B:[B@<hex address of array>\", which makes them totally unusable.\n\nThis appears to be due to their writeVal() methods not having cases to handle val instanceof Short and val instance of byte[]",
    "attachments": {
        "distributed-search.zip": "https://issues.apache.org/jira/secure/attachment/12510537/distributed-search.zip",
        "SOLR-3035.patch": "https://issues.apache.org/jira/secure/attachment/12510548/SOLR-3035.patch",
        "ResponseWriterTest.java": "https://issues.apache.org/jira/secure/attachment/12510538/ResponseWriterTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ken Krugler",
            "id": "comment-13185940",
            "date": "2012-01-13T22:44:41+0000",
            "content": "I created a class that extended JSONWriter, and implemented writeVal() as follows, which fixed the above problems for JSON:\n\n\nclass FixedJSONWriter extends JSONWriter {\n    \n    public AdbeatJSONWriter(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) {\n        super(writer, req, rsp);\n    }\n    \n    @Override\n    public void writeVal(String name, Object val) throws IOException {\n        if (val == null) {\n            super.writeVal(name, val);\n        } else if (val instanceof Short) {\n            super.writeShort(name, (Short)val);\n        } else if (val instanceof byte[]) {\n            byte[] bytes = (byte[])val;\n            super.writeStr(name, Base64.byteArrayToBase64(bytes, 0, bytes.length), false);\n        } else {\n            super.writeVal(name, val);\n        }\n    }\n}\n\n "
        },
        {
            "author": "Ken Krugler",
            "id": "comment-13185942",
            "date": "2012-01-13T22:46:27+0000",
            "content": "Attached is some test code, and the resource data I used to construct a sharded configuration for testing binary responses. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13185972",
            "date": "2012-01-13T23:14:59+0000",
            "content": "a sharded configuration for testing binary responses.\n\nAhh... sharded - that probably explains the diff code path. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13186003",
            "date": "2012-01-14T00:03:20+0000",
            "content": "Here's a completely untested patch for trunk...\nI grouped all of the numerics under a test for instanceof Number to lower the average number of instanceof tests.\n\nAt some point we should look into accelerating that with a lookup based on class (and a fallback to instanceof tests), but there hasn't been any indication that the  instanceof tests add a meaningful amount of time yet. "
        },
        {
            "author": "Ken Krugler",
            "id": "comment-13186354",
            "date": "2012-01-14T22:07:21+0000",
            "content": "I see the change to TextResponseWriter, and JavaBinCodec, but does that then also fix the problem for XML? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13186357",
            "date": "2012-01-14T22:34:44+0000",
            "content": "In trunk at least it should (XML now inherits from TextResponseWriter) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13195111",
            "date": "2012-01-27T21:37:25+0000",
            "content": "Since I accidentally committed part of this patch, I went ahead and came up with a quick test and committed the rest (for trunk). "
        },
        {
            "author": "Michael Ryan",
            "id": "comment-13447765",
            "date": "2012-09-04T15:49:52+0000",
            "content": "Shouldn't this be using writeShort and writeByte for short and byte, instead of writeInt?\n\nLooking at 3.6 code... in ByteField, it calls XMLWriter.writeByte(String, String), which writes it out in a <byte> tag. However, there are also two methods - writeByte(String, byte) and writeShort(String, short) - which are using writeInt(), which seems like another bug. On trunk, all of this code is gone, so I guess it is using writeInt for all of them? "
        }
    ]
}