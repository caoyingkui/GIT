{
    "id": "LUCENE-1399",
    "title": "NullPointerException issue with single IndexWriter instance shared among multiple Thread",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.3.2",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "NullPointerException is thrown while indexing within multiple threads but using one single IndexWriter instance. According to \"Lucene in Action\" this should do: \"...a single instance of either class can be shared among multiple threads, and all calls to its index-modifying methods will be properly synchronized so that index modifications are executed one after the other.\" \n\nFollowing my exception trace:\n\njava.lang.NullPointerException\n\tat org.apache.lucene.index.IndexFileDeleter.decRef(IndexFileDeleter.java:475)\n\tat org.apache.lucene.index.IndexWriter.commitTransaction(IndexWriter.java:1986)\n\tat org.apache.lucene.index.IndexWriter.addIndexes(IndexWriter.java:2219)\n\tat com.shi.marketingspy.test.SHILuceneWritingFromThreadsTest$testthread.run(SHILuceneWritingFromThreadsTest.java:48)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n\tat java.lang.Thread.run(Thread.java:619)\n\n\n\nFollowing my test program:\n\npackage com.shi.marketingspy.test;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.Field.Store;\nimport org.apache.lucene.index.IndexWriter;\n\npublic class SHILuceneWritingFromThreadsTest\n{\n\tpublic static void log(String s, com.shi.jipmisc misc)\n\t{\n\t\tmisc.__Log(s);\n\t}\n\n\tpublic static class testthread implements Runnable\n\t{\n\t\tpublic org.apache.lucene.index.IndexWriter indexwriter;\n\t\tpublic int iThread;\n\t\tpublic boolean bWithOptimize;\n\t\tpublic com.shi.jipmisc misc;\n\n\t\tpublic testthread(org.apache.lucene.index.IndexWriter indexwriter, int iThread, boolean bWithOptimize, com.shi.jipmisc misc)\n\t\t{\n\t\t\tthis.indexwriter \t= indexwriter;\n\t\t\tthis.iThread \t\t= iThread;\n\t\t\tthis.bWithOptimize \t= bWithOptimize;\n\t\t\tthis.misc\t\t\t= misc;\n\t\t}\n    \tpublic void run()\n    \t{\n    \t\ttry\n    \t\t{\n    \t\t\tAnalyzer anal = new com.shi.lucene.index.SHIAnalyser(null,null);\n    \t\t\torg.apache.lucene.store.Directory tmpidxdirectory \t= new org.apache.lucene.store.RAMDirectory();\n    \t\t\torg.apache.lucene.index.IndexWriter tempindexwriter = new IndexWriter(tmpidxdirectory, anal, true);\n\n    \t\t\tDocument doc = new Document();\n    \t\t\tfor(int ifld=0; ifld < 9; ifld++)\n    \t\t\t{\n    \t\t\t\tdoc.add(new Field(\"field_\"+ifld, \"iThread: \"+iThread+\" field: \"+ifld+\" \"+System.currentTimeMillis()+\" \"+misc.getDateString()+\" \"+misc.getDateString2()+\" \"+com.shi.jipmisc.getTimeStamp()+\" \"+misc.getClass()+\" \"+misc.getDebug(), Store.COMPRESS, Field.Index.UN_TOKENIZED));\n    \t\t\t}\n   \t\t\t\ttempindexwriter.addDocument(doc);\n   \t\t\t\ttempindexwriter.optimize();\n        \t\torg.apache.lucene.store.Directory[] idxs = new org.apache.lucene.store.Directory[1];\n        \t\tidxs[0] = tmpidxdirectory;\n        \t\t//todo: del-call...\n        \t\tthis.indexwriter.addIndexes(idxs);\n        \t\tif (this.bWithOptimize)\n        \t\t\tthis.indexwriter.optimize();\n    \t\t}\n    \t\tcatch(Throwable e)\n    \t\t{\n    \t\t\tlog(\"testthread:run\\tERR:2(bWithOpti:\"+bWithOptimize+\")(iThread:\"+iThread+\"):\"+e.getMessage()+\"\\n\\t\"+com.shi.jipmisc.stack2string(e), misc);\n    \t\t}\n    \t}\n\t}\n\n\tpublic SHILuceneWritingFromThreadsTest()\n\t{\n\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\ttestluceneconcurrency(false);\n\t\ttestluceneconcurrency(true );\n\t}\n\n\tpublic static java.util.concurrent.ExecutorService threadpool_optimized     = java.util.concurrent.Executors.newFixedThreadPool(9999999);\n\tpublic static java.util.concurrent.ExecutorService threadpool_not_optimized = java.util.concurrent.Executors.newFixedThreadPool(9999999);\n\n\tpublic static void testluceneconcurrency(boolean bWithOptimize)\n\t{\n\t\tcom.shi.jipmisc.createDir(\"temp\", \"c:\");\n\t\tcom.shi.jipmisc.createDir(\"testluceneconcurrency\", \"c:/temp\");\n\t\tcom.shi.jipmisc.createDir(\"\"+bWithOptimize, \"c:/temp/testluceneconcurrency\");\n\t\tcom.shi.jipmisc misc = new com.shi.jipmisc();\n\t\tmisc.setMyPath(\"C:/temp/testluceneconcurrency\");\n\t\tmisc.setDebug(true);\n\t\tmisc.emptyDir(\"c:/temp/testluceneconcurrency/\"+bWithOptimize);\n\t\tAnalyzer anal = new com.shi.lucene.index.SHIAnalyser(null,null);\n\t\torg.apache.lucene.index.IndexWriter indexwriter = null;\n\t\ttry\n\t\t{\n\t\t\tindexwriter = new IndexWriter(\"c:/temp/testluceneconcurrency/\"+bWithOptimize, anal, true);\n\t\t}\n\t\tcatch(Throwable e)\n\t\t{\n\t\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tERR:0(\"+bWithOptimize+\"):\"+e.getMessage(), misc);\n\t\t\treturn;\n\t\t}\n\n\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tINF:step0(\"bWithOptimize\")(BEGIN)-------------------------------------\", misc);\n\n\t\tfor(int idoc=0; idoc < 9999; idoc++)\n\t\t{\n\t\t\tDocument doc = new Document();\n\t\t\tfor(int ifld=0; ifld < 9; ifld++)\n\t\t\t{\n\t\t\t\tdoc.add(new Field(\"field_\"+ifld, \"doc: \"+idoc+\" field: \"+ifld+\" \"+System.currentTimeMillis()+\" \"+misc.getDateString()+\" \"+misc.getDateString2()+\" \"+com.shi.jipmisc.getTimeStamp()+\" \"+misc.getClass()+\" \"+misc.getDebug(), Store.COMPRESS, Field.Index.UN_TOKENIZED));\n\t\t\t}\n\t\t\ttry\n\t\t\t{\n\t\t\t\tindexwriter.addDocument(doc);\n\t\t\t}\n\t\t\tcatch(Throwable e)\n\t\t\t{\n\t\t\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tERR:1(\"+bWithOptimize+\"):\"+e.getMessage(), misc);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tINF:step1(\"bWithOptimize\")\", misc);\n\t\ttry\n\t\t{\n\t\t\tindexwriter.optimize();\n\t\t}\n\t\tcatch(Throwable e)\n\t\t{\n\t\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tERR:2(\"+bWithOptimize+\"):\"+e.getMessage(), misc);\n\t\t\treturn;\n\t\t}\n\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tINF:step2(\"bWithOptimize\")\", misc);\n\t\tjava.util.concurrent.ExecutorService threadpool = bWithOptimize ? threadpool_optimized : threadpool_not_optimized;\n\t\tfor(int it=0; it < 999; it++)\n\t\t{\n\t\t\tthreadpool.execute(new testthread(indexwriter, it, bWithOptimize, misc));\n\t\t}\n\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tINF:step3(\"bWithOptimize\")\", misc);\n\t\tthreadpool.shutdown();\t//=execute threads and wait til all threads finish\n\t\tcom.shi.jipmisc.wait(999, misc);\n\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tINF:step4(\"bWithOptimize\")\", misc);\n\n\t\ttry\n\t\t{\n\t\t\t//indexwriter.optimize();\n\t\t\t//indexwriter.close();\n\t\t}\n\t\tcatch(Throwable e)\n\t\t{\n\t\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tERR:9(\"+bWithOptimize+\"):\"+e.getMessage(), misc);\n\t\t\treturn;\n\t\t}\n\t\tlog(\"SHILuceneWritingFromThreadsTest:testluceneconcurrency\\tINF:step5(\"bWithOptimize\")(END)-----------------------------\", misc);\n\t}\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-09-22T08:48:28+0000",
            "content": "Thanks for reporting this!\n\nIt should already be fixed on 2.4 (this is a dup of LUCENE-1335).  Could you run your test program on 2.4 to confirm? ",
            "author": "Michael McCandless",
            "id": "comment-12633177"
        },
        {
            "date": "2008-09-23T08:27:18+0000",
            "content": "This issue seems to be fixed by 2.4 version. ",
            "author": "Rudi Quark",
            "id": "comment-12633652"
        },
        {
            "date": "2008-09-23T08:33:06+0000",
            "content": "Super thanks Rudi! ",
            "author": "Michael McCandless",
            "id": "comment-12633654"
        },
        {
            "date": "2008-09-23T08:34:25+0000",
            "content": "Dup of LUCENE-1335. ",
            "author": "Michael McCandless",
            "id": "comment-12633655"
        }
    ]
}