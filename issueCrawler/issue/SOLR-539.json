{
    "id": "SOLR-539",
    "title": "Statistics variable atomicity in RequestHandlerBase",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "highlighter",
            "search",
            "spellchecker",
            "update"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Writes are not atomic on longs unless they are volatile.   At a minimum, numRequests, numErrors, and totalTime should be marked volatile.  More correct, but higher overhead due to contention and synchronization would be to use AtomicLong.\n\nThere is a minor error in the calculation of avgRequestsPerSecond.  The first operand of the denominator is cast to a float then has a long subtracted from it, in effect casting both longs to floats then performing the subtraction.  It is better to do the subtraction as longs then cast to a float.",
    "attachments": {
        "RequestHandlerBase-AtomicLong-stats.patch": "https://issues.apache.org/jira/secure/attachment/12380135/RequestHandlerBase-AtomicLong-stats.patch",
        "RequestHandlerBase-volatile-stats.patch": "https://issues.apache.org/jira/secure/attachment/12380134/RequestHandlerBase-volatile-stats.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Sean Timm",
            "id": "comment-12588885",
            "date": "2008-04-15T03:18:41+0000",
            "content": "This patch marks numRequests, numErrors, and totalTime volatile.  It also changes the casting in the calculation of avgRequestsPerSecond. "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12588886",
            "date": "2008-04-15T03:19:25+0000",
            "content": "This patch changes numRequests, numErrors, and totalTime to AtomicLongs.  It also changes the casting in the calculation of avgRequestsPerSecond. "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12589111",
            "date": "2008-04-15T14:58:44+0000",
            "content": "I don't know that I explained the problem with the calculation of avgRequestsPerSecond well.  Here is a code snippet that illustrates the problem:\n\n\npublic class CastingTest {\n  public static void main(String args[]) throws Exception{\n    long t1 = System.currentTimeMillis();\n    long t2 = t1 + 7456L;\n    System.out.println(\"Cast then subtract: \" + ((float)t2 - t1));\n    System.out.println(\"Subtract then cast: \" + (float)(t2 - t1));\n  }\n}\n\n\n\nOutput:\n\n% java CastingTest\nCast then subtract: 0.0\nSubtract then cast: 7456.0\n\n\n\nSo, at least shortly after start up, the way the casting is currently done results in a divide by zero.\n "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12591506",
            "date": "2008-04-23T01:27:15+0000",
            "content": "Here is an illustration of the divide by zero bug.  Notice the value of avgRequestsPerSecond.  This is two minutes after server start.\n\n\n\nstats: \trequests : 4255\n        errors : 0\n        avgTimePerRequest : 196.68672\n        avgRequestsPerSecond : Infinity\n\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12598888",
            "date": "2008-05-22T02:13:29+0000",
            "content": "Merci.  I applied the volatile variation.\n\nCommitted revision 658977. "
        }
    ]
}