{
    "id": "SOLR-5894",
    "title": "Speed up high-cardinality facets with sparse counters",
    "details": {
        "affect_versions": "4.7.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Multiple performance enhancements to Solr String faceting.\n\n\n\tSparse counters, switching the constant time overhead of extracting top-X terms with time overhead linear to result set size\n\tCounter re-use for reduced garbage collection and lower per-call overhead\n\tOptional counter packing, trading speed for space\n\tImproved distribution count logic, greatly improving the performance of distributed faceting\n\tIn-segment threaded faceting\n\tRegexp based white- and black-listing of facet terms\n\tHeuristic faceting for large result sets\n\n\n\nCurrently implemented for Solr 4.10. Source, detailed description and directly usable WAR at http://tokee.github.io/lucene-solr/\n\nThis project has grown beyond a simple patch and will require a fair amount of co-operation with a committer to get into Solr. Splitting into smaller issues is a possibility.",
    "attachments": {
        "SOLR-5894.patch": "https://issues.apache.org/jira/secure/attachment/12636012/SOLR-5894.patch",
        "sparse_50510000docs_20140328-152807.png": "https://issues.apache.org/jira/secure/attachment/12637415/sparse_50510000docs_20140328-152807.png",
        "sparse_5000000docs_20140331-151918_multi.png": "https://issues.apache.org/jira/secure/attachment/12637824/sparse_5000000docs_20140331-151918_multi.png",
        "sparse_5000000docs_20140331-151918_single.png": "https://issues.apache.org/jira/secure/attachment/12637825/sparse_5000000docs_20140331-151918_single.png",
        "sparse_2000000docs_fc_cutoff_20140403-145412.png": "https://issues.apache.org/jira/secure/attachment/12638467/sparse_2000000docs_fc_cutoff_20140403-145412.png",
        "SOLR-5894_test.zip": "https://issues.apache.org/jira/secure/attachment/12637377/SOLR-5894_test.zip",
        "author_7M_tags_1852_logged_queries_warmed.png": "https://issues.apache.org/jira/secure/attachment/12636021/author_7M_tags_1852_logged_queries_warmed.png"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Toke Eskildsen",
            "id": "comment-13943023",
            "date": "2014-03-21T12:59:58+0000",
            "content": "Simple proof of concept patch for sparse counting for field-based faceting on high-cardinality multi-value fields.\n\nApply patch, build Solr, open an index with a proper high-cardinality field (> 100.000 unique values) such as author or title. Standard field based faceting works as always.\n\nActivate sparse counting by appending facet.sparse=true to the request. Control the amount of extra space used for the sparse structure with facet.sparse.fraction (default is 0.025, which seems to work well).\n\nTested against Solr 4.6.1. Not tested against 4.7. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13943062",
            "date": "2014-03-21T13:54:01+0000",
            "content": "Results from a small scale test of 2 threads sending logged queries against our ~50GB, 11M document library index, faceting on 'author' with 7M unique values. The test was executed multiple times and the last (and thus fully warmed) results were used. Only searches with facet results were counted.\n\nResults for this particular test were median response times of 36ms for standard facet counting and 24ms for sparse. See the attached PNG for graphs. Your Mileage Will Vary. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13943092",
            "date": "2014-03-21T14:25:21+0000",
            "content": "Awesome work Toke! "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13949264",
            "date": "2014-03-27T13:00:38+0000",
            "content": "Slightly updated patch where statistics are returned as part of the facet result if facet.sparse.stats=true. Scripts for easy testing of performance will follow later. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13950604",
            "date": "2014-03-28T11:47:04+0000",
            "content": "Bugfix and further instrumentation of the sparse implementation. The attached ZIP contains scripts for artificial testing of performance (requires bash, curl & gnuplot). "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13950830",
            "date": "2014-03-28T15:01:09+0000",
            "content": "Patch with several bugfixes and updated test scripts.\n\nThe chart sparse_50510000docs_20140328-152807.png shows results form a test run on 50M documents / 150M unique tags. The black line is standard Solr, the red is a sparse counter with 100% overhead, the cyan is an attempt of compromising with 8% sparse overhead.\n\nThe performance hit for passing the 8% cut-off is huge. One way to avoid it could be to make a numhits-based guess of the expected number of unique tags, when choosing facet implementation. The consequence of a wrong guess would \"just\" be poorer performance, with the worst-case being the max of the black and the cyan line for any given number of unique tags in the search result. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13955179",
            "date": "2014-03-31T13:41:52+0000",
            "content": "Patch-update: Sparse counting is now possible for field cache, with and without DocValues, single- as well as multi-field. Segment based field cache faceting support is not implemented yet. \n\nSee the attached graphs sparse_5000000docs_20140331-151918_multi.png and sparse_5000000docs_20140331-151918_single.png for experiments with 5M values, multi-value (3 values/doc) and single-value. Note that the y-axis is now logarithmic. It seems DocValues benefits nearly as much from sparse counters as non-DocValues.\n\nAlso note that these measurements are from an artificially large sparse tracker (100% overhead) and as such are not representative for a realistic setup. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13958798",
            "date": "2014-04-03T13:16:50+0000",
            "content": "Updated patch to support adjustable heuristic guessing of result size and selection of implementation based on the guess. Conservative guesses means early fallback to standard Solr faceting speed, overly optimistic guesses means a performance penalty on wrong guess. Correct guesses means that faceting with sparse counting is either faster or the same speed as standard Solr faceting. See attached graph sparse_2000000docs_fc_cutoff_20140403-145412.png for that scenario. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13966402",
            "date": "2014-04-11T11:18:22+0000",
            "content": "Updated patch to solr 4.7.1 and added optional use of PackedInts for counters (saves memory but affects performance). "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-14035633",
            "date": "2014-06-18T12:20:30+0000",
            "content": "Changed mincount in distributed faceting to not force mincount=0, resulting in sparse faceting also bringing speedup to distributed faceting.\n\nAdded support for maxTracked, optionally setting a ceiling for the count for any term in a given facet, thereby lowering memory requirements and increasing speed, at the cost of accuracy.\n\nStill on Solr 4.7.1. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-14051167",
            "date": "2014-07-03T08:10:15+0000",
            "content": "Changed the caching of counters to be field-specific, which works a lot better for multi-field faceting requests. Introduced facet.sparse.maxtracked to limit the maximum count for any facet value: This limits memory consumption at the cost of accuracy.\n\nPatch is for Solr 4.7.1. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-14105715",
            "date": "2014-08-21T18:20:22+0000",
            "content": "Forked Lucene/Solr on GitHub for better project management: https://github.com/tokee/lucene-solr . Experimental branches for sparse faceting are lucene_solr_4_8_sparse and lucene_solr_4_9_sparse and will contain the latest code. The patch above for 4.7.1 is a little behind the GitHub branches, as it does not have speed up for second phase (getting counts for specific terms) of distributed faceting. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-14116786",
            "date": "2014-08-31T12:19:31+0000",
            "content": "Status update\n\nThe code seems to be in working state for Solr 4.8 and 4.9 for Field Cache faceting (single- and multi-value) and DocValue faceting (single- and multi-value) for Strings. It really needs testing by someone else than me, so that the validity of the responses and the speed upc can be verified. I am willing to port this to trunk if a committer is willing to work on getting the patch into Solr, but until then I will stick to stable versions as that is what we use locally.\n\nSparse faceting introduces some architectural changes that needs to be addressed.\n\n1) The core sparse counting itself is surprisingly non-invasive. It could be a standalone patch. However, this only works really well in a non-distributed setting and has less effect in a distributed one.\n\n2) Avoiding re-allocation of counter structures by maintaining a pool of structures lowers the minimum faceting time and lowers the need for GC. It is lowered quite a lot, I might add, as faceting is normally one of the big GC-triggers, so I would strongly recommend this feature.\nSuch a pool is very much like a cache and as such must play nice with index updates and other caching structures in Solr. The current state of the counter pool is that it works well, but is implemented independently of the usual caches. It is probably better to latch on to the standard caching mechanisms in Solr, but I have no experience with that part of the code base. The code for the pool itself is fairly simple and can be implemented as an experimental feature by setting the default pool size to 0.\n\n3) Fast distributed faceting is about speeding up the secondary phase of distrubuted faceting: The fine count for specific terms. This is achieved by replacing the normal search-for-each-requested-term approach by a full faceted count approach, where the counts for all terms are calculated but only the counts for the specified terms are returned. This requires either a separation of counting and extraction in stock Solr code or an extension to the count-extract code block so that is can handle both the case where top-X terms are wanted and where specific terms are requested. Currently the sparse code use the latter approach, but the former is a much cleaner architecture. Both solutions does require some re-factoring and are a bit tricky to get right.\n\n4) A further speed up for distributed faceting can be achieved by upgrading the sparse pools to real caches, so that they contain a mix of empty counters (to avoid GC) and filled counters (caching of counts). As the counting part of the second phase is always exactly the same as for the first phase, cache hit-rate should be very high with distribution. This is not currently implemented and is a bit tricky to get to work well.\nI recommend that this improvement is postponed, in order to keep the current patch manageable.\n\nThe sparse principle would also work for Field Cache per Segment faceting of Strings, but no code has been written for this yet. I recommend that this is also postponed, to get things moving. "
        },
        {
            "author": "Manuel Lenormand",
            "id": "comment-14488424",
            "date": "2015-04-09T22:42:31+0000",
            "content": "Very impressive work. The idea behind it and implementation.\n\nThe feature is still running on your production? Any other insights since? Have you ported it to 4.10.x? It seems I have a similar issue, benchmarking with this patch looks interesting "
        },
        {
            "author": "Andrew Jackson",
            "id": "comment-14488427",
            "date": "2015-04-09T22:45:41+0000",
            "content": "I'm out of the office with intermittent email access, but I will be back in the office on Monday the 13th of April. For urgent technical matter please contact Roger Coram or Gil Hoggarth, and for urgent non-technical matters, Helen Hockx-Yu.\n\n\n******************************************************************************************************************\nExperience the British Library online at www.bl.uk<http://www.bl.uk/>\nThe British Library\u2019s latest Annual Report and Accounts : www.bl.uk/aboutus/annrep/index.html<http://www.bl.uk/aboutus/annrep/index.html>\nHelp the British Library conserve the world's knowledge. Adopt a Book. www.bl.uk/adoptabook<http://www.bl.uk/adoptabook>\nThe Library's St Pancras site is WiFi - enabled\n*****************************************************************************************************************\nThe information contained in this e-mail is confidential and may be legally privileged. It is intended for the addressee(s) only. If you are not the intended recipient, please delete this e-mail and notify the postmaster@bl.uk<postmaster@bl.uk> : The contents of this e-mail must not be disclosed or copied without the sender's consent.\nThe statements and opinions expressed in this message are those of the author and do not necessarily reflect those of the British Library. The British Library does not take any responsibility for the views of the author.\n*****************************************************************************************************************\nThink before you print "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-14488911",
            "date": "2015-04-10T04:58:31+0000",
            "content": "Manuel: Thank you. We use it in out main search system (single shard, 50GB/15M docs) as well as our net archive index (25 shard, 22TB/7b docs). It has worked very well for us without any discovered (or at least reported) problems.\n\nAfter a hiatus (read: Other projects had higher priority), I have begun hacking on the project again. I am untangling the sparse code from the vanilla Solr faceting code and plan to migrate to 4.10.x after that. 5.0/5.1 is another matter as we do not use that in production anywhere. "
        },
        {
            "author": "Manuel Lenormand",
            "id": "comment-14493153",
            "date": "2015-04-13T21:43:34+0000",
            "content": "I'll be pleased to be updated about the 4.10.x migration, I'll be watching the issue. We have a 40 shards collection, 3TB/100M docs. As you can notice from JIRA issues I've opened, scalability and performance is our main concern and it's nice seeing others dealing with harder use cases than ours and writing about it. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-14935297",
            "date": "2015-09-29T15:06:13+0000",
            "content": "Hey - any news on this?  "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-14935340",
            "date": "2015-09-29T15:44:15+0000",
            "content": "Yes. It is migrated to 4.10.x (check http://tokee.github.io/lucene-solr/) and I will be talking about the optimizations at Lucene/Solr Revolution 2015 next month. I hope to discuss the ideas with other people there and figure out where to go with this. "
        },
        {
            "author": "Yago Riveiro",
            "id": "comment-15722603",
            "date": "2016-12-05T15:56:30+0000",
            "content": "Are facets with sparse counters faster that current JSON facets? "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-15724715",
            "date": "2016-12-06T07:46:15+0000",
            "content": "No, those are fully separate issues.\n\nFaceting is a bit of a mess with multiple implementations at multiple levels. See SOLR-7296 for more on this. "
        },
        {
            "author": "Alessandro Benedetti",
            "id": "comment-15869820",
            "date": "2017-02-16T12:19:39+0000",
            "content": "Hi Toke, \nI read your very interesting blog, but i assume we don't have any update on this.\nIt would be quite an interesting improvement ( especially for big Solr instances).\nIs there any update on this topic or everything is still frozen ?\n\nCheers "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-15869899",
            "date": "2017-02-16T13:12:31+0000",
            "content": "Alessandro Tommasi: Short answer: No concrete progress, sorry. We still use the 4.10 version in production, where it continue to work well for us.\n\nLonger answer: The primary update is that I am now a committer and that this is (naturally) one of the things I will pursue. But since I just became committer this week, I am not going to touch this pile right away - I lned abunch of baby-steps first. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-16151068",
            "date": "2017-09-01T19:47:38+0000",
            "content": "I am currently doing a port to Solr master. Primarily to see if the changes are still beneficial with the new code base, secondarily to get to know the new hooks better. First take on the port is not likely to be fit for inclusion in the main code base. "
        }
    ]
}