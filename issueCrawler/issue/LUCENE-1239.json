{
    "id": "LUCENE-1239",
    "title": "IndexWriter deadlock when using ConcurrentMergeScheduler",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.3.1",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "I'm trying to update our application from Compass 2.0.0M1 with Lucene 2.2 to Compass 2.0.0M3 (latest build) with Lucene 2.3.1. I'm holding all other things constant and only changing the Compass and Lucene jars. I'm recreating the search index for our data and seeing deadlock in Lucene's IndexWriter. It appears to be waiting on a signal from the merge thread. I've tried creating a simple reproduction case for this but to no avail.\n\nDoing the exact same steps with Compass 2.0.0M1 and Lucene 2.2 has no problems and recreates our search index. That is to say, it's not our code.\n\nIn particular, the main thread performing the commit (Lucene document save) from Compass is calling Lucene's IndexWriter.optimize(). We're using Compass's ExecutorMergeScheduler to handle the merging, and it is calling IndexWriter.merge(). The main thread in IndexWriter.optimize() enters the wait() at the bottom of that method and is never notified. I can't tell if this is because optimizeMergesPending() is returning true incorrectly, or if IndexWriter.merge()'s notifyAll() is being called prematurely. Looking at the code, it doesn't seem possible for IndexWriter.optimize() to be waiting and miss a notifyAll(), and Lucene's IndexWriter.merge() was recently fixed to always call notifyAll() even on exceptions \u2013 that is all the relevant IndexWriter code looks properly synchronized. Nevertheless, I'm seeing the deadlock behavior described, and it's reproducible using our app and our test data set.\n\nCould someone familiar with IndexWriter's synchronization code take another look at it? I'm sorry that I can't give you a simple reproduction test case.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-18T10:17:27+0000",
            "content": "Here's the related Compass bug:\nhttp://issues.compass-project.org/browse/CMP-581\n\nIn case this ends up being a problem in Compass's ExecutorMergeScheduler, though that doesn't look to be the case at the moment. ",
            "author": "Michael Lossos",
            "id": "comment-12579792"
        },
        {
            "date": "2008-03-18T10:55:46+0000",
            "content": "Is it possible to call IndexWriter.setInfoStream(..), get the hang to happen, and post the resulting output? ",
            "author": "Michael McCandless",
            "id": "comment-12579803"
        },
        {
            "date": "2008-03-18T12:20:25+0000",
            "content": "If you replace Compass's ExecutorMergeScheduler with Lucene's ConcurrentMergeScheduler, does the deadlock still happen?\n\nOne thing that makes me nervous about ExecutorMergeScheduler is this comment:\n\n  // Compass: No need to execute continous merges, we simply reschedule another merge, if there is any, using executor manager                \n\nand the corresponding change which is to schedule a new job instead of using the while loop to run new merges.  If I understand that code correctly, the executorManager will re-call the run() method on MergeThread when there is a cascaded merge.  But that won't do the right thing because it will run \"startMerge\" rather than the newly returned (cascaded) merge.  That would then cause the deadlock because the cascaded merge is never issued. ",
            "author": "Michael McCandless",
            "id": "comment-12579819"
        },
        {
            "date": "2008-03-18T12:52:07+0000",
            "content": "You're right, when I use Lucene's ConcurrentMergeScheduler, I don't see the deadlock. I'll bounce this back to Compass for fixing. Thank you Michael for looking into this! ",
            "author": "Michael Lossos",
            "id": "comment-12579828"
        },
        {
            "date": "2008-03-18T12:54:59+0000",
            "content": "Phew  ",
            "author": "Michael McCandless",
            "id": "comment-12579829"
        },
        {
            "date": "2008-03-18T14:41:43+0000",
            "content": "Yea, it looks like it is my bad, great catch!. While trying to create a better scheduler (at least in terms of reusing threads instead of creating them), I wondered if there is a chance that the current scheduler can be enhanced to support an extension point for that... . I can give such a refactoring a go if you think it make sense. ",
            "author": "Shay Banon",
            "id": "comment-12579874"
        },
        {
            "date": "2008-03-18T16:08:09+0000",
            "content": "\nI wondered if there is a chance that the current scheduler can be enhanced to support an extension point for that... . I can give such a refactoring a go if you think it make sense.\nThat would be much appreciated!  You should start from the trunk version of CMS: it already has been somewhat factored to allow subclasses to override things, though I think maybe not quite enough for this case. ",
            "author": "Michael McCandless",
            "id": "comment-12579909"
        }
    ]
}