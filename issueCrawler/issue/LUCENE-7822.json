{
    "id": "LUCENE-7822",
    "title": "IllegalArgumentException thrown instead of a CorruptIndexException",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "6.5.1",
        "status": "Open",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "Similarly to LUCENE-7592 , When an *.si file is corrupted on very specific part an IllegalArgumentException is thrown instead of a CorruptIndexException.\n\nStackTrace (Lucene 6.5.1):\n\n\njava.lang.IllegalArgumentException: Illegal minor version: 12517381\n\n\tat __randomizedtesting.SeedInfo.seed([1FEB5987CFA44BE:B8755B5574F9F3BF]:0)\n\tat org.apache.lucene.util.Version.<init>(Version.java:385)\n\tat org.apache.lucene.util.Version.<init>(Version.java:371)\n\tat org.apache.lucene.util.Version.fromBits(Version.java:353)\n\tat org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat.read(Lucene62SegmentInfoFormat.java:97)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:357)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:288)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:448)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:445)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:692)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:644)\n\tat org.apache.lucene.index.SegmentInfos.readLatestCommit(SegmentInfos.java:450)\n\tat org.apache.lucene.index.DirectoryReader.listCommits(DirectoryReader.java:260)\n\n\n\nSimple fix would be to add IllegalArgumentException to the catch list at \norg/apache/lucene/index/SegmentInfos.java:289\n\n\nOther variations for the stacktraces:\n\n\njava.lang.IllegalArgumentException: invalid codec filename '_\ufffd.cfs', must match: _[a-z0-9]+(_.*)?\\..*\n\n\tat __randomizedtesting.SeedInfo.seed([8B3FDE317B8D634A:A8EE07E5EB4B0B13]:0)\n\tat org.apache.lucene.index.SegmentInfo.checkFileNames(SegmentInfo.java:270)\n\tat org.apache.lucene.index.SegmentInfo.addFiles(SegmentInfo.java:252)\n\tat org.apache.lucene.index.SegmentInfo.setFiles(SegmentInfo.java:246)\n\tat org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat.read(Lucene62SegmentInfoFormat.java:248)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:357)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:288)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:448)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:445)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:692)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:644)\n\tat org.apache.lucene.index.SegmentInfos.readLatestCommit(SegmentInfos.java:450)\n\tat org.apache.lucene.index.DirectoryReader.listCommits(DirectoryReader.java:260)\n\n\n\n\njava.lang.IllegalArgumentException: An SPI class of type org.apache.lucene.codecs.Codec with name 'LucenI62' does not exist.  You need to add the corresponding JAR file supporting this SPI to your classpath.  The current classpath supports the following names: [Lucene62, Lucene50, Lucene53, Lucene54, Lucene60]\n\n\tat __randomizedtesting.SeedInfo.seed([925DE160F7260F99:B026EB9373CB6368]:0)\n\tat org.apache.lucene.util.NamedSPILoader.lookup(NamedSPILoader.java:116)\n\tat org.apache.lucene.codecs.Codec.forName(Codec.java:116)\n\tat org.apache.lucene.index.SegmentInfos.readCodec(SegmentInfos.java:424)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:356)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:288)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:448)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:445)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:692)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:644)\n\tat org.apache.lucene.index.SegmentInfos.readLatestCommit(SegmentInfos.java:450)\n\tat org.apache.lucene.index.DirectoryReader.listCommits(DirectoryReader.java:260)",
    "attachments": {
        "LUCENE-7822.patch": "https://issues.apache.org/jira/secure/attachment/12868208/LUCENE-7822.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16006082",
            "date": "2017-05-11T08:27:11+0000",
            "content": "+1\n\nMaybe make a patch and post here?  Thanks. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16006447",
            "date": "2017-05-11T13:48:01+0000",
            "content": "For such a small file, maybe we should call eg. CodecUtil.checksumEntireFile before starting to read it. This would give a clearer error message? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16008219",
            "date": "2017-05-12T14:31:01+0000",
            "content": "For such a small file, maybe we should call eg. CodecUtil.checksumEntireFile before starting to read it. This would give a clearer error message?\n\n+1 ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16011628",
            "date": "2017-05-16T02:09:47+0000",
            "content": "Created a patch for master branch, along with a test to reproduce the problem.\n\nActually the code doing the checksum is here with CodecUtil.checkFooter but is not called in a finally clause. Using it in a finally clause would hide some exceptions, so I decided to go with Adrien Grand suggestion ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-16017097",
            "date": "2017-05-19T09:07:12+0000",
            "content": "I'm not happy with swallowing the IAE entirely. What about doing something like this:\n\n\ndiff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java b/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java\nindex e463259..677152c 100644\n--- a/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java\n+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java\n@@ -289,11 +289,18 @@ public final class SegmentInfos implements Cloneable, Iterable<SegmentCommitInfo\n     long generation = generationFromSegmentsFileName(segmentFileName);\n     //System.out.println(Thread.currentThread() + \": SegmentInfos.readCommit \" + segmentFileName);\n     try (ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ)) {\n+      Throwable priorE = null;\n+      SegmentInfos infos = null;\n       try {\n-        return readCommit(directory, input, generation);\n+        infos = readCommit(directory, input, generation);\n       } catch (EOFException | NoSuchFileException | FileNotFoundException e) {\n-        throw new CorruptIndexException(\"Unexpected file read error while reading index.\", input, e);\n+        priorE = new CorruptIndexException(\"Unexpected file read error while reading index.\", input, e);\n+      } catch (Throwable t) {\n+        priorE = t;\n+      } finally {\n+        CodecUtil.checkFooter(input, priorE);\n       }\n+      return infos;\n     }\n   }\n \n@@ -399,8 +406,6 @@ public final class SegmentInfos implements Cloneable, Iterable<SegmentCommitInfo\n \n     infos.userData = input.readMapOfStrings();\n \n-    CodecUtil.checkFooter(input);\n-\n     // LUCENE-6299: check we are in bounds\n     if (totalDocs > IndexWriter.getActualMaxDocs()) {\n       throw new CorruptIndexException(\"Too many documents: an index cannot exceed \" + IndexWriter.getActualMaxDocs() + \" but readers have total maxDoc=\" + totalDocs, input);\n\n\n\nThis would add the CorruptIndexException as a suppressed exception to the IAE so that it is clear this exception was caused by a corruption? It would also be aligned with eg. how Lucene70SegmentInfoFormat (which also calls Version.fromBits) handles unexpected exceptions. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16017131",
            "date": "2017-05-19T09:41:56+0000",
            "content": "I did not know about the checkFooter(ChecksumIndexInput in, Throwable priorException) method, looks indead the best to use it.\n\nPlease check these 2 points:\n\n\torg.apache.lucene.index.SegmentInfos#readCommit(Directory, ChecksumIndexInput, long) is used inside org.apache.lucene.replicator.nrt.ReplicaNode probably need to check the footer there as well\n\torg.apache.lucene.index.SegmentInfos#readCommit(Directory, ChecksumIndexInput, long) do not need anymore to take a ChecksumIndexInput as paramater, a IndexInput is now enough\n\n\n\nMaybe doing the CodecUtil.checkFooter in a finally inside the org.apache.lucene.index.SegmentInfos#readCommit(Directory, ChecksumIndexInput, long) would be better ? ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-16017227",
            "date": "2017-05-19T10:49:22+0000",
            "content": "Maybe doing the CodecUtil.checkFooter in a finally inside the org.apache.lucene.index.SegmentInfos#readCommit(Directory, ChecksumIndexInput, long) would be better ?\n\n+1\n\norg.apache.lucene.index.SegmentInfos#readCommit(Directory, ChecksumIndexInput, long) do not need anymore to take a ChecksumIndexInput as paramater, a IndexInput is now enough\n\nMaybe I'm missing something but you still need a ChecksumIndexInput since checkFooter needs one? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16019043",
            "date": "2017-05-22T00:27:01+0000",
            "content": "\nMaybe I'm missing something but you still need a ChecksumIndexInput since checkFooter needs one?\nIn the fix you suggested checkFooter was moved out of the org.apache.lucene.index.SegmentInfos#readCommit(Directory, ChecksumIndexInput, long) method, in which case parameter type could be changed as IndexInput.\n\n\nThis would add the CorruptIndexException as a suppressed exception to the IAE so that it is clear this exception was caused by a corruption? It would also be aligned with eg. how Lucene70SegmentInfoFormat (which also calls Version.fromBits) handles unexpected exceptions\nFrom my point of view if the checksum do not match, a CorruptIndexException should be thrown, with exceptions possibly resulting from it set as suppressed exceptions, eg behaves as if the file checksum was done before actually parsing the file content.\nIn that case if the si file is small reading it twice is the easiest: first time for checksum using CodecUtil.checksumEntireFile as originally suggested, then parse the content.\n\nI agree this is not efficient, maybe the behavior of checkFooter method could be changed ? :\n\n\tbehave as current one if the Throwable is not an Exception\n\tOtherwise throws a CorruptIndexException with original exception add as a suppressed one\n\n\n\nAnyway I do not have an overview of the whole source code so I let you have the last word   ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-16019048",
            "date": "2017-05-22T00:36:23+0000",
            "content": "The test is not correct. Changing the contents of a file may not necessarily change the checksum: corruption cannot always be detected.\n\nI don't think lucene should throw a different exception here, besides the fact it wouldnt be 100%, I don't think it should try so much to \"interpret\" what has happened and make this decision, its not the responsibility of the library. I don't think there should be catch X, rethrow Y, but instead just deliver original exceptions to the user when things are wrong. Otherwise debugging becomes too hard.\n\ncheckFooter exists as a compromise: it does not change the original exception in any way, but just adds some additional information to it, to help a user understand perhaps why it may have happened. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16019053",
            "date": "2017-05-22T00:51:45+0000",
            "content": "I see. \nConcerning test, I though altering a single byte would always be detected by a CRC check, maybe I am missing something ? ",
            "author": "Martin Amirault"
        },
        {
            "id": "comment-16019059",
            "date": "2017-05-22T01:02:54+0000",
            "content": "i would be careful making assumptions that rely upon the checksum being used. \n\nCRC32 happens to be used today because of the two choices in the JDK it is actually the fastest, but it might not always be the case in the future (I think they may have improved performance of these algorithms in jdk9/added new CRC with different polynomial, etc).\n\nLike i said, I think the current exception is correct. I also feel the same way about LUCENE-7592: why in the world did we change a more specific exception to a generic one??? that is just not right. we should deliver the best exception possible and make the callers catch/rethrow if they want to \"change\" them: its an API. ",
            "author": "Robert Muir"
        }
    ]
}