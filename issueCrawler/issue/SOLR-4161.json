{
    "id": "SOLR-4161",
    "title": "deadlock if commit+newSearcher occurs during core close, can happen as a result of snappuller (occured in TestReplicationHandler)",
    "details": {
        "affect_versions": "None",
        "status": "Reopened",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "There appears to be a lock related bug in the DefaultSolrCoreState/DirectUpdateHandler2 interactions. It appears that if CoreContainer is shutting down the core at the same time that some other thread attempts to do a commit which triggers a newSearcher, then DefaultSolrCoreState.closeIndexWriter and DefaultSolrCoreState.getIndexWriter get into deadlock.\n\nThis has been observed in TestReplicationHandler, but doesn't appear to be related to any bugs in thta testcase, so it seems like it could easily affect real life users as well.\n\nSummary of the deadlock stacks, see attachments for full details...\n\n\nFound one Java-level deadlock:\n=============================\n\"snapPuller-422-thread-1\":\n  waiting to lock monitor 0x00007f5a2011a9e0 (object 0x00000000f5f485a0, a org.apache.solr.update.DefaultSolrCoreState),\n  which is held by \"TEST-TestReplicationHandler.test-seed#[1B46F52130C14E03]\"\n\"TEST-TestReplicationHandler.test-seed#[1B46F52130C14E03]\":\n  waiting for ownable synchronizer 0x00000000f60fe5c8, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),\n  which is held by \"snapPuller-422-thread-1\"\n\nJava stack information for the threads listed above:\n===================================================\n\"snapPuller-422-thread-1\":\n\tat org.apache.solr.update.DefaultSolrCoreState.getIndexWriter(DefaultSolrCoreState.java:77)\n\t- waiting to lock <0x00000000f5f485a0> (a org.apache.solr.update.DefaultSolrCoreState)\n\tat org.apache.solr.core.SolrCore.openNewSearcher(SolrCore.java:1358)\n\tat org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:561)\n\t- locked <0x00000000f5f485d0> (a java.lang.Object)\n\tat org.apache.solr.handler.SnapPuller.doCommit(SnapPuller.java:655)\n\tat org.apache.solr.handler.SnapPuller.fetchLatestIndex(SnapPuller.java:454)\n\tat org.apache.solr.handler.ReplicationHandler.doFetch(ReplicationHandler.java:273)\n\tat org.apache.solr.handler.SnapPuller$1.run(SnapPuller.java:222)\n...\n\n\"TEST-TestReplicationHandler.test-seed#[1B46F52130C14E03]\":\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for  <0x00000000f60fe5c8> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:838)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:871)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1201)\n\tat java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:214)\n\tat java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:290)\n\tat org.apache.solr.update.DirectUpdateHandler2.closeWriter(DirectUpdateHandler2.java:668)\n\tat org.apache.solr.update.DefaultSolrCoreState.closeIndexWriter(DefaultSolrCoreState.java:64)\n\t- locked <0x00000000f5f485a0> (a org.apache.solr.update.DefaultSolrCoreState)\n\tat org.apache.solr.update.DefaultSolrCoreState.close(DefaultSolrCoreState.java:259)\n\t- locked <0x00000000f5f485a0> (a org.apache.solr.update.DefaultSolrCoreState)\n\tat org.apache.solr.core.SolrCore.decrefSolrCoreState(SolrCore.java:879)\n\t- locked <0x00000000f5f485a0> (a org.apache.solr.update.DefaultSolrCoreState)\n\tat org.apache.solr.core.SolrCore.close(SolrCore.java:971)\n\tat org.apache.solr.core.CoreContainer.shutdown(CoreContainer.java:723)\n\n\n\n\nOriginal Report...\n\n\nwhile testing out another patch i noticed \"stalled\" heartbeat messages getting logged by TestReplicationHandler.test and started taking some stack traces to see if it was in the code i was working on.\n\nit's not, so i suspect it's unrelated to the changes i'm looking at, but i did notice that there was a full on deadlock reported, so i wanted to make sure it got tracked.",
    "attachments": {
        "dump3.txt": "https://issues.apache.org/jira/secure/attachment/12560247/dump3.txt",
        "dump2.txt": "https://issues.apache.org/jira/secure/attachment/12560246/dump2.txt",
        "dump4.txt": "https://issues.apache.org/jira/secure/attachment/12560248/dump4.txt",
        "dump5.txt": "https://issues.apache.org/jira/secure/attachment/12560249/dump5.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13528194",
            "date": "2012-12-10T19:21:54+0000",
            "content": "multiple dump files taken a few seconds apart ... i haven't looked at them in a lot of depth, but but given the deadlock state i suspect there aren't' a lot of differneces. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13528225",
            "date": "2012-12-10T19:59:49+0000",
            "content": "I think I just fixed this - see commits from a short while ago and my reply to the fail of replication handler test on the dev list.\n\nMore details to follow. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13528571",
            "date": "2012-12-11T01:25:44+0000",
            "content": "In addition to the related changes in SOLR-4060, i was asking mark about this in in IRC earlier today and confirmed he was talking about this commit...\n\nhttp://svn.apache.org/viewvc?rev=1419665&view=rev\n\n...which switched from looping over writerPauseLock.wait() to writerPauseLock.wait and checking the closed boolean. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13529094",
            "date": "2012-12-11T16:23:40+0000",
            "content": "Okay, sorry - the commit above solved a different issue. This issue still exists. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13529516",
            "date": "2012-12-12T00:40:09+0000",
            "content": "[trunk commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1420500\n\nSOLR-4161: add a little more protection "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13529522",
            "date": "2012-12-12T00:57:04+0000",
            "content": "So whats at odds are the commit lock and the DefaultSolrCore this lock.\n\nI've added a bit more protection which should reduce the window, but perhaps not solve this.\n\nA better way to deal with this type of thing IMO, would be to try making sure all request handlers were shutdown or something before shutting down the core.\n\nFor some like the replication handler, which could take a long time, an interruption option would also be nice. Currently we kind of count on random shutdown issues to interrupt it - it tries to do something that requires an open option and that thing fails. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13529567",
            "date": "2012-12-12T01:54:52+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1420508\n\nSOLR-4161: add a little more protection "
        }
    ]
}