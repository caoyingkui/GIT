{
    "id": "LUCENE-4770",
    "title": "GeoShape intersects filter omitted matching docs",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "4.0,                                            4.1",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "SpatialPrefixTree#recursiveGetNodes uses an optimization that prevents\nrecursion into the deepest tree level if a parent node in the penultimate\nlevel covers all its children.  This produces a bug if the optimization\nhappens both at indexing and at query/filter time.\n\nOriginal post",
    "attachments": {
        "LUCENE-4770.patch": "https://issues.apache.org/jira/secure/attachment/12568843/LUCENE-4770.patch",
        "LUCENE-4770_Spatial_make_prefixTree_simplification_configurable.patch": "https://issues.apache.org/jira/secure/attachment/12569252/LUCENE-4770_Spatial_make_prefixTree_simplification_configurable.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-11T16:50:41+0000",
            "content": "This patch fixes the SpatialPrefixTree#recursiveGetNodes method and adds two tests for the edge cases. The first test is included at SpatialPrefixTreeTest#testEdgeCases and tests an rectangular query on a rectangular shaped area. The second test in located at JtsPolygonTest#testEdgeCases and tests an rectangular query on a polygonal shaped area. ",
            "author": "Florian Schilling",
            "id": "comment-13575891"
        },
        {
            "date": "2013-02-11T17:31:03+0000",
            "content": "The irony!  I was literally in the middle of correcting this problem. ",
            "author": "David Smiley",
            "id": "comment-13575918"
        },
        {
            "date": "2013-02-11T18:40:37+0000",
            "content": "The fix I was working on was to remove the optimization altogether.  With it removed, recursiveGetNodes() can be rewritten to be remarkably simpler and combined with the Point specialization of this method into one.  I've already done this locally and the code is easier to read and debug.  However the optimization is probably a noticeable benefit for the TermQuery strategy.  Perhaps this implementation could move to TermQueryPrefixTreeStrategy.  Alternatively it would be cool if the nodes could be pruned after the fact (in the strategy) but that would be hard since nodes are flattened into a list.  I'm leaning towards moving this implementation to the strategy where I can see ways it could even be optimized more by bubbling this pruning up from now only the bottom level but up additional levels.  Thoughts?\n\np.s. the condition subCells.size() == node.getSubCellsSize() && !inclParents is not enough, it must also be true that node.getLevel() != 0 because the 0 node is not indexable (no empty string). ",
            "author": "David Smiley",
            "id": "comment-13575957"
        },
        {
            "date": "2013-02-12T09:39:02+0000",
            "content": "The bug fix I worked on was simply a lucene version of the suggestion in the original post. The test cases I implemented should also work with your implementation of optimizations independently. Also moving the implementation to TermQueryPrefixTreeStrategy is a reasonable idea, since handling the data should be part of the strategy level. ",
            "author": "Florian Schilling",
            "id": "comment-13576492"
        },
        {
            "date": "2013-02-13T19:47:56+0000",
            "content": "The attached patch:\n\n\tAdds a \"simplify\" boolean argument to SpatialPrefixTree.getNodes(). If enabled, getNodes() will perform the aforementioned optimization.  FYI it results in ~20-25% reduction in cells.\n\tEnhanced the simplification algorithm to bubble up to higher levels, pruning away more cells. It becomes exponentially less likely to happen as you move up but it can and will happen.\n\tThe TermQuery strategy won't simplify at index time (this is a change) and will simplify at search time.  Note indexed non-point shapes will use ~20% more disk.\n\tThe RecursivePrefixTree strategy will continue to simplify indexed shapes. It has a search-time algorithm that doesn't use PrefixTree.getNodes().\n\tSimplified the API subclassing contract for SpatialPrefixTree, and thus removed an overriding method in both Geohash & Quad implementations.\n\n\n\np.s. Thanks so much for developing tests, Florian!\n\nIf there are no problems discussed with this patch then I plan to commit it in ~32 hours. ",
            "author": "David Smiley",
            "id": "comment-13577875"
        },
        {
            "date": "2013-02-15T06:04:14+0000",
            "content": "[trunk commit] David Wayne Smiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1446452\n\nLUCENE-4770: Optional SpatialPrefixTree getNodes simplification ",
            "author": "Commit Tag Bot",
            "id": "comment-13578979"
        },
        {
            "date": "2013-02-15T06:10:17+0000",
            "content": "Committed to 4.2 & 5.0 with this CHANGES.txt entry in the bugs area (although it is also applicable as an optimization):\n\n\n\tLUCENE-4770: If spatial's TermQueryPrefixTreeStrategy was used to search\n  indexed non-point shapes, then there was an edge case where a query should\n  find a shape but it didn't. The fix is the removal of an optimization that\n  simplifies some leaf cells into a parent. The index data for such a field is\n  now ~20% larger. This optimization is still done for the query shape, and for\n  indexed data for RecursivePrefixTreeStrategy. Furthermore, this optimization\n  is enhanced to roll up beyond the bottom cell level. (David Smiley,\n  Florian Schilling)\n\n\n\nThanks again for your help with the tests, Florian. ",
            "author": "David Smiley",
            "id": "comment-13578984"
        },
        {
            "date": "2013-02-15T06:14:10+0000",
            "content": "[branch_4x commit] David Wayne Smiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1446453\n\nLUCENE-4770: Optional SpatialPrefixTree getNodes simplification ",
            "author": "Commit Tag Bot",
            "id": "comment-13578985"
        },
        {
            "date": "2013-02-18T13:47:40+0000",
            "content": "@david is this change backwards compatible? I mean if I used the unpatched version to index will I be able to search correctly with the new version? ",
            "author": "Simon Willnauer",
            "id": "comment-13580610"
        },
        {
            "date": "2013-02-19T05:33:45+0000",
            "content": "The problem this bug fixes will still be present if you simply use the new code without reindexing. It should otherwise work fine. ",
            "author": "David Smiley",
            "id": "comment-13581036"
        },
        {
            "date": "2013-05-10T10:33:30+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653946"
        }
    ]
}