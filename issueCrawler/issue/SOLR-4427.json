{
    "id": "SOLR-4427",
    "title": "Solr should complain with a readable warning if more than one of a plugin type occurs in solrconfig.xml and only one is used",
    "details": {
        "affect_versions": "4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "While some Solr plugin types such as request handlers can have multiple entries in solrconfig.xml, others such as <queryConverter> and <directoryFactory> can syntactically have more than one, but only the first one will be used and the other plugins of that type will be silently ignored. This is problematic when someone \"adds\" a new plugin and is unaware of or forgets to remove or comment out an existing plugin of that same type earlier in solrconfig.xml. The new plugin has no effect and it is not obvious how to debug the problem.\n\nRepro:\n\nAdd a second <directoryFactory> to the Solr example solrconfig.xml after the existing one:\n\n\n  <directoryFactory name=\"DirectoryFactory\" \n                    class=\"${solr.directoryFactory:solr.NRTCachingDirectoryFactory}\" /> \n\n  <directoryFactory name=\"MyDirectoryFactory\" class=\"solr.NRTCachingDirectoryFactory\">\n    <double name=\"maxMergeSizeMB\">7.5</double>\n    <double name=\"maxCachedMB\">37.25</double>\n  </directoryFactory>\n\n\n\nStart Solr after deleting the data directory.\n\nSee that the default values of \"maxMergeSizeMB\" and \"maxCachedMB\" are being used rather than the overrides specified above. In other words, the first directory factory plugin is being used, and the second is silently ignored.\n\nOne possible fix, would be in SolrConfig#getPluginInfo to change:\n\n\n  public PluginInfo getPluginInfo(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    return result == null || result.isEmpty() ? null: result.get(0);\n  }\n\n\n\nto\n\n\n  public PluginInfo getPluginInfo(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    if (result != null && result.size() > 1)\n      log.warn(\"Multiple plugins of type '\" + type + \"' found (\" + result.size() +\n          \") - only the first will be used: name: \" + result.get(0).name +\n          \" class: \" + result.get(0).className);\n    return result == null || result.isEmpty() ? null: result.get(0);\n  }\n\n\n\nAnother possibility is to throw an exception.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}