{
    "id": "LUCENE-7708",
    "title": "Track PositionLengthAttribute abuse",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/queryparser",
            "modules/analysis"
        ],
        "fix_versions": [
            "6.5",
            "7.0"
        ]
    },
    "description": "Some token filters uses the position length attribute of the token stream to encode the number of terms they put in a single token. \nThis breaks the query parsing because it creates disconnected graph. \nI've tracked down the abusive case to 2 candidates:\n\n\tShingleFilter which sets the position length attribute to the length of the shingle.\n\tCJKBigramFilter which always sets the position length attribute to 2.\n\n\n\nI don't think these filters should set the position length at all so the best would be to remove the attribute from these token filters but this could break BWC.\nThough this is a serious bug since shingles and cjk bigram now produce invalid queries.",
    "attachments": {
        "LUCENE-7708.patch": "https://issues.apache.org/jira/secure/attachment/12854477/LUCENE-7708.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15882616",
            "date": "2017-02-24T12:56:57+0000",
            "content": "The CJKBigramFilter is working correctly because it sets the position length attribute only if outputUnigrams is set.\nSo only the ShingleFilter is problematic since outputUnigrams is not check when position length is set. \nSo for instance with shingles of size 2, the input \"foo bar baz\" would create two tokens  \"foo bar\" and \"bar baz\" with a pos len of 2 and an position increment in between which forms a disconnected graph.\nI'll work on a patch shortly. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15882757",
            "date": "2017-02-24T14:11:52+0000",
            "content": "Here is one patch for the ShingleFilter.\nWhen outputUnigrams is set to false, position length for a shingle of size N is the number of position created by shingles of smaller size: (N - minShingleSize) + 1.\nMichael McCandless can you take a look ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15883169",
            "date": "2017-02-24T17:40:58+0000",
            "content": "+1 to the idea, but some tests are failing with the patch:\n\n\n   [junit4] Tests with failures [seed: 4D8AED66905F8617]:\n   [junit4]   - org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesSingleTokenCase\n   [junit4]   - org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithMultipleInputTokens\n   [junit4]   - org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testOutputUnigramsIfNoShinglesSingleToken\n   [junit4]   - org.apache.lucene.analysis.shingle.TestShingleFilterFactory.testOutputUnigramsIfNoShingles\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-15883278",
            "date": "2017-02-24T18:42:29+0000",
            "content": "Thanks Steve !\nI pushed a new patch that solves the tests failures. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15883363",
            "date": "2017-02-24T19:17:07+0000",
            "content": "I'm beasting 1000 iterations of TestRandomChains with the patch, and run 110 found the following reproducing seed - maybe it's ShingleFilter's fault?  (I didn't investigate further):\n\nedit: this seed fails on unpatched master, so the patch on this issue isn't to blame.  I created a separate issue: LUCENE-7711\n\n\n  [junit4] Suite: org.apache.lucene.analysis.core.TestRandomChains\n   [junit4]   2> TEST FAIL: useCharFilter=false text='\\ufac4\\u0552H \\ua954\\ua944 \\ud0d2\\uaddd\\ub6cb\\uc388\\uc344\\uca88\\ud224\\uc462\\uaf42 g '\n   [junit4]   2> Exception from random analyzer: \n   [junit4]   2> charfilters=\n   [junit4]   2>   org.apache.lucene.analysis.charfilter.HTMLStripCharFilter(java.io.StringReader@3fb9d00e, [<HOST>, <HANGUL>, <IDEOGRAPHIC>, <SOUTHEAST_ASIAN>])\n   [junit4]   2> tokenizer=\n   [junit4]   2>   org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.AttributeFactory$1@c893af9b)\n   [junit4]   2> filters=\n   [junit4]   2>   org.apache.lucene.analysis.miscellaneous.KeywordRepeatFilter(ValidatingTokenFilter@7e1e9fe2 term=,bytes=[],startOffset=0,endOffset=0,positionIncrement=1,positionLength=1,type=word,flags=0,payload=null,keyword=false)\n   [junit4]   2>   org.apache.lucene.analysis.cjk.CJKBigramFilter(ValidatingTokenFilter@12c3fb1b term=,bytes=[],startOffset=0,endOffset=0,positionIncrement=1,positionLength=1,type=word,flags=0,payload=null,keyword=false)\n   [junit4]   2>   org.apache.lucene.analysis.shingle.ShingleFilter(ValidatingTokenFilter@31c463b5 term=,bytes=[],startOffset=0,endOffset=0,positionIncrement=1,positionLength=1,type=word,flags=0,payload=null,keyword=false, 49)\n   [junit4]   2>   org.apache.lucene.analysis.in.IndicNormalizationFilter(ValidatingTokenFilter@3f72787 term=,bytes=[],startOffset=0,endOffset=0,positionIncrement=1,positionLength=1,type=word,flags=0,payload=null,keyword=false)\n   [junit4]   2> offsetsAreCorrect=false\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestRandomChains -Dtests.method=testRandomChains -Dtests.seed=E532502212098AC7 -Dtests.slow=true -Dtests.locale=ko-KR -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.76s | TestRandomChains.testRandomChains <<<\n   [junit4]    > Throwable #1: java.lang.IllegalArgumentException: startOffset must be non-negative, and endOffset must be >= startOffset; got startOffset=10,endOffset=9\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([E532502212098AC7:D8D37943551B9707]:0)\n   [junit4]    >        at org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setOffset(PackedTokenAttributeImpl.java:110)\n   [junit4]    >        at org.apache.lucene.analysis.shingle.ShingleFilter.incrementToken(ShingleFilter.java:345)\n   [junit4]    >        at org.apache.lucene.analysis.ValidatingTokenFilter.incrementToken(ValidatingTokenFilter.java:67)\n   [junit4]    >        at org.apache.lucene.analysis.in.IndicNormalizationFilter.incrementToken(IndicNormalizationFilter.java:40)\n   [junit4]    >        at org.apache.lucene.analysis.ValidatingTokenFilter.incrementToken(ValidatingTokenFilter.java:67)\n   [junit4]    >        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkAnalysisConsistency(BaseTokenStreamTestCase.java:731)\n   [junit4]    >        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:642)\n   [junit4]    >        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:540)\n   [junit4]    >        at org.apache.lucene.analysis.core.TestRandomChains.testRandomChains(TestRandomChains.java:853)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n   [junit4] OK      1.64s | TestRandomChains.testRandomChainsWithLargeStrings\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {dummy=PostingsFormat(name=LuceneVarGapFixedInterval)}, docValues:{}, maxPointsInLeafNode=542, maxMBSortInHeap=7.773738401752009, sim=RandomSimilarity(queryNorm=false): {}, locale=ko-KR, timezone=Atlantic/Jan_Mayen\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_77 (64-bit)/cpus=16,threads=1,free=400845920,total=514850816\n   [junit4]   2> NOTE: All tests run in this JVM: [TestRandomChains]\n   [junit4] Completed [1/1 (1!)] in 6.03s, 2 tests, 1 error <<< FAILURES!\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-15883526",
            "date": "2017-02-24T21:12:23+0000",
            "content": "+1, thanks Jim Ferenczi! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15883528",
            "date": "2017-02-24T21:13:01+0000",
            "content": "+1, LGTM, all lucene/analysis/common/ tests pass for me with the latest patch.\n\nAlso, 1000 beasting iterations of TestRandomChains didn't trigger any failures with this patch (other than the unrelated one at LUCENE-7711). ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-15883655",
            "date": "2017-02-24T22:37:53+0000",
            "content": "Commit 57a42e4ec54aebac40c1ef7dc93d933cd00dbe1e in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=57a42e4 ]\n\nLUCENE-7708: Fix position length attribute set by the ShingleFilter when outputUnigrams=false ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15883671",
            "date": "2017-02-24T22:47:34+0000",
            "content": "Commit 6c63df0b15f735907438514f3b4b702680d74588 in lucene-solr's branch refs/heads/branch_6x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6c63df0 ]\n\nLUCENE-7708: Fix position length attribute set by the ShingleFilter when outputUnigrams=false ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15883672",
            "date": "2017-02-24T22:48:54+0000",
            "content": "Thanks Steve Rowe and Michael McCandless ! ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15928145",
            "date": "2017-03-16T14:20:50+0000",
            "content": "There's no fix version here.  CHANGES.txt says it's in 6.5.0.\n\n(looking for possible causes of a shingle filter problem confirmed in Solr 6.3 and 6.4, this couldn't be the cause) ",
            "author": "Shawn Heisey"
        },
        {
            "id": "comment-15928198",
            "date": "2017-03-16T14:46:38+0000",
            "content": "Shawn Heisey one shingle filter problem is fixed in LUCENE-7708 and appears in 6.3 when the support for graph analysis has been added to the QueryBuilder. \nThe other shingle filter problem I can think of is when the number of paths is gigantic and produces an OOM. I opened LUCENE-7747 to fix this.\nAlthough I think that the workaround for now is to be disable graph query analysis when the analyzer contains a shingle filter that produces shingles of different size. The graph analysis in this case builds all possible path since each position has different side paths. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15928311",
            "date": "2017-03-16T15:52:07+0000",
            "content": "Jim Ferenczi what we do after committing/all-done is \"Resolve\" the issue (not \"Close\").  That dialog box will give you the option to set the fix-version.  Later on during the release process, there should be a JIRA step that involves bulk-closing all issues resolved for this version. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15928511",
            "date": "2017-03-16T17:50:03+0000",
            "content": "Thanks David Smiley. I updated the status. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15928885",
            "date": "2017-03-16T20:52:54+0000",
            "content": "Looks like 6.5.0 isn't a valid version yet.  Easy enough to add, but if I do so, would I be doing the right thing? ",
            "author": "Shawn Heisey"
        },
        {
            "id": "comment-15930152",
            "date": "2017-03-17T15:39:29+0000",
            "content": "Looks like 6.5.0 isn't a valid version yet. Easy enough to add, but if I do so, would I be doing the right thing?\n\nI see Jim already set the version to 6.5, but FYI Shawn Heisey, historically people have excluded the trailing \".0\" in minor release labels here on JIRA. ",
            "author": "Steve Rowe"
        }
    ]
}