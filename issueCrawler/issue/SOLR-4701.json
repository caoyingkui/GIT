{
    "id": "SOLR-4701",
    "title": "CollectorFilterQParserPlugin support Filter Collector at search with PostFilter",
    "details": {
        "affect_versions": "4.2",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "example:\n\n\n\t\nfq={!cf name=in}status:(-1, 2)\n\n\t\nfq={!cf name=in not=true}status:(3,4)\n\n\t\nfq={!cf name=range}price:[100 TO 500]\n\n\t\nfq={!cf name=range}log(page_view):[50 TO 120]\n\n\n\n\nin operate like sql in\uff0c faster then OR boolean query.\n\nmost of the case, range faster then TrieField in lucene query.\n\nhow to do use:\nsolrconfig.xml add\n\n<queryParser name=\"cf\" class=\"solr.CollectorFilterQParserPlugin\"/>\n\n\n\ncf not use query cache, use PostFilter fiter collector",
    "attachments": {
        "SOLR-4701.patch": "https://issues.apache.org/jira/secure/attachment/12578149/SOLR-4701.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13634618",
            "date": "2013-04-17T23:42:20+0000",
            "content": "Could you explain the approach used, in particular how it differs from the existing \"frange\" (function range) functionality that now has the PostFilter ability?\n\nhttp://yonik.com/posts/advanced-filter-caching-in-solr/\nhttp://yonik.com/posts/ranges-over-functions-in-solr-1-4/ "
        },
        {
            "author": "Linbin Chen",
            "id": "comment-13637502",
            "date": "2013-04-21T08:09:11+0000",
            "content": "frange now has use PostFilter, but CollectorFilterQParserPlugin create other  collector filter query.\n\napproach case:\n\ncase 1: in query\n\nlike sql in operate \"select * from a where user=123 and status in (1,2,3)\"\n\na field 'status' has value mybe (0,1,2,3,4,5,6,7,8,9) 10 kind status value.\n\nhas 10 million row index\u3002avg 1 million per one of 'status' field value.\n\nuser:123 maybe has 2k row. status:(1 OR 2 OR 3) has 3 million row.\n\nuser:123&fq=\n{!cf name=in}\nstatus:(1,2,3) faster than user:123 AND status:(1 OR 2 OR 3)\n\nmaybe can use filterCache status:(1 OR 2 OR 3) query\uff0cbut 10 kind status combination\uff0ccreate C(n,0)C(n,1)...+C(n,n)=low(2,n), n=10, will has 1024 OpenBitSet. \n\nfilterCache 1024 OpenBitSet(maxSize=10 million) RAM = 1.25G\n\ncf.in user FieldCache, use RAM = 10M*4 = 40M\n\nin near realtime case, filterCache cache by query, but cf.in cache by atomicReader. it's hit ratio will higher.\n\n\ncase 2: bit query\n\nlike options search\u3002such as linux file attribute, R/W/X (R=100, W=010, X=001).\n\nassume bit operate logic query_bit | field_bit !=0\n\nsearch R OR W\n\n{!cf name=bit}file_attr:(6)\n\n\n\nI not yet upload bit query patch. extends CollectorFilterable easy impl under CollectorFilterQParserPlugin\n\nIn my approach use long save 54 bit options\u3002 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717221",
            "date": "2013-07-23T18:47:31+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971206",
            "date": "2014-04-16T12:57:27+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}