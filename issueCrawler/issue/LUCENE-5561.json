{
    "id": "LUCENE-5561",
    "title": "NativeUnixDirectory is broken",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "Several things:\n\n\n\tIt assumed ByteBuffer.allocateDirect would be page-aligned, but\n    that's no longer true in Java 1.7\n\n\n\n\n\tIt failed to throw FNFE if a file didn't exist (throw IOExc\n    instead)\n\n\n\n\n\tIt didn't have a default ctor taking File (so it was hard to run\n    all tests against it)\n\n\n\n\n\tIt didn't have a test case\n\n\n\n\n\tSome Javadocs problems\n\n\n\n\n\tI cutover to FilterDirectory\n\n\n\nI tried to cutover to BufferedIndexOutput since this is essentially\nall that NativeUnixIO is doing ... but it's not simple because BIO\nsometimes flushes non-full (non-aligned) buffers even before the end\nof the file (its writeBytes method).\n\nI also factored out a BaseDirectoryTestCase, and tried to fold in\n\"generic\" Directory tests, and added/cutover explicit tests for the\ncore directory impls.",
    "attachments": {
        "LUCENE-5561.patch": "https://issues.apache.org/jira/secure/attachment/12637796/LUCENE-5561.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13955062",
            "author": "Michael McCandless",
            "content": "Initial patch ... I added TODOs to see if we can remove our custom JNI code and use Unsafe / reflection-into-secret-JDK-classes instead but I haven't explored that yet ... ",
            "date": "2014-03-31T09:52:06+0000"
        },
        {
            "id": "comment-13956129",
            "author": "Robert Muir",
            "content": "Wow the test base class is awesome! Please resolve LUCENE-5067 once you get this in, I think this is a really useful thing to have in test-framework and for our tests. ",
            "date": "2014-04-01T05:32:18+0000"
        },
        {
            "id": "comment-13957085",
            "author": "Michael McCandless",
            "content": "New patch, fixing nocommits, getting checksum working, and\nconditionalizing TestNativeUnixDirectory to run only on unix.  I think\nit's ready; we can later separately iterate on improving\nBaseDirectoryTestCase and the TODOs to move away from our own JNI... ",
            "date": "2014-04-01T22:20:25+0000"
        },
        {
            "id": "comment-13959436",
            "author": "Robert Muir",
            "content": "\n// NativeUnixDirectory only works on Unix:\nAssume.assumeTrue(Constants.WINDOWS == false);\n\n\n\nCan this be a \"positive test\" (e.g. LINUX | SOLARIS | MACOX) rather than have tests failing on any unknown platform? Its better to just be safe...\n\n\nprivate final static class NativeUnixIndexOutput extends IndexOutput {\n...\nprivate final CRC32 crc = new CRC32();\n...\npublic void writeByte(byte b) throws IOException {\n  ...\n  crc.update(b);\n  ...\n}\n\n\n\nThis will be excruciatingly slow. Buffering needed here for this computation to be efficient. \nSo I have a hard time understanding why you don't do this in dump().\nIf you wont do it there, then use new BufferedChecksum(new CRC32()) instead.\nHere's a comparison of different sizes to illustrate:\n\n\n\nCRC32/bufferSize\nthroughput\n\n\nCRC32/1\n20.46 mB/s\n\n\nCRC32/2\n41.16 mB/s\n\n\nCRC32/4\n81.14 mB/s\n\n\nCRC32/8\n148.64 mB/s\n\n\nCRC32/16\n259.04 mB/s\n\n\nCRC32/32\n428.32 mB/s\n\n\nCRC32/64\n606.56 mB/s\n\n\nCRC32/128\n765.93 mB/s\n\n\nCRC32/256\n879.79 mB/s\n\n\nCRC32/512\n952.74 mB/s\n\n\nCRC32/1024\n991.43 mB/s\n\n\n\n\n\n\n\t    <!-- TODO: generalize this for non-unix -->\n\t    <!-- Add any native extensions to LD_LIBRARY_PATH: -->\n\t    <env key=\"LD_LIBRARY_PATH\" value=\"/l/fixnativeunix/lucene/build/native/\"></env>\n\n\n\nThis will not work except on your computer. Also, any existing stuff in LD_LIBRARY_PATH should be preserved, so you have to use some 'path' stuff in ant to do it correctly.\n\nOtherwise it looks good. \n\nLong term for the future, if dirs like this need a fixed-size buffer, it would be cool to have a BufferedOutput that works a little differently in that way. I am not really sure, but i think the HDFSDirectory stuff has code duplication for this same reason. You'd have to handle the \"end\" special though I guess...\n\nAlso long term it would be nice if the JNI could be removed, and it was possible to do just some evil reflected call to open with O_DIRECT and get pageSize and so on. This would actually be safer, too. ",
            "date": "2014-04-03T23:42:37+0000"
        },
        {
            "id": "comment-13959865",
            "author": "Michael McCandless",
            "content": "Thanks for the feedback Rob!\n\nCan this be a \"positive test\" (e.g. LINUX | SOLARIS | MACOX) rather than have tests failing on any unknown platform? Its better to just be safe...\n\nWill do.\n\nSo I have a hard time understanding why you don't do this in dump().\n\nThe problem is (I think?) I have to alloc a separate byte[] in addition to the ByteBuffer (I can't pass a ByteBuffer to CRC32.update), and then dump first dumps to that byte[], crc.update that, and then writes that to the file.  It sounds like this (double-buffering on write) is the lesser evil and so I'll just do that ...\n\nThis will not work except on your computer. \n\nWoops   I'll base it from build.dir.\n\nAlso, any existing stuff in LD_LIBRARY_PATH should be preserved, so you have to use some 'path' stuff in ant to do it correctly.\n\nOK I'll figure out how to pass through the incoming LD_LIBRARY_PATH.\n\nLong term for the future, if dirs like this need a fixed-size buffer, it would be cool to have a BufferedOutput that works a little differently in that way. I am not really sure, but i think the HDFSDirectory stuff has code duplication for this same reason. You'd have to handle the \"end\" special though I guess...\n\n+1\n\nI actually had an ALMOST working version of \"just subclass BufferedIndexOutput\", and it used a sneaky trick to handle that last buffer flush on close, but BIO.writeBytes is not aligned today.  I agree it'd be nice to have an \"always aligned\" BufferedIO.\n\nAlso long term it would be nice if the JNI could be removed, and it was possible to do just some evil reflected call to open with O_DIRECT and get pageSize and so on. This would actually be safer, too.\n\n+1, I put a TODO about this, it looks very possible, based on the sun.nio.fs.UnixNativeDispatcher, though I'm not sure how portable that is to other JVMs... ",
            "date": "2014-04-04T10:57:13+0000"
        },
        {
            "id": "comment-13970883",
            "author": "Uwe Schindler",
            "content": "Move issue to Lucene 4.9. ",
            "date": "2014-04-16T12:54:48+0000"
        }
    ]
}