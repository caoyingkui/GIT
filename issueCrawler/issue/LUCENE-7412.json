{
    "id": "LUCENE-7412",
    "title": "TestGeo3DPoint.testGeo3DRelations test failure",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "It reproduces:\n\n\n   [junit4]   1> doc=23 should not have matched but did\n   [junit4]   1>   point=[X=0.9945964169637284, Y=0.017360743796216105, Z=-0.11238509267616992]\n   [junit4]   1>   mappedPoint=[lat=-0.11250142194566046, lon=0.017453291479645996([X=0.9945964169928142, Y=0.01736074400099093, Z=-0.11238509283298634])]\n   [junit4]   1> doc=46 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=-2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=-2.915240855096914E-236, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=-2.9185025839666778E-236])]\n   [junit4]   1> doc=59 should not have matched but did\n   [junit4]   1>   point=[X=1.0008128994768453, Y=0.017469252883873243, Z=0.01747191431934325]\n   [junit4]   1>   mappedPoint=[lat=0.017453291479645996, lon=0.017453291479645996([X=1.0008128995370384, Y=0.01746925310095654, Z=0.01747191415779267])]\n   [junit4]   1> doc=125 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=7.235987507597244E-97, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=7.244083521109649E-97])]\n   [junit4]   1> doc=243 should not have matched but did\n   [junit4]   1>   point=[X=0.9975952873944153, Y=0.08392021471535471, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=0.0, lon=0.0839249100415336([X=0.9975952873501377, Y=0.08392021494259203, Z=0.0])]\n   [junit4]   1> doc=342 should not have matched but did\n   [junit4]   1>   point=[X=0.9941995353524516, Y=0.017353816325365812, Z=0.11582176154966317]\n   [junit4]   1>   mappedPoint=[lat=0.11595722401420251, lon=0.017453291479645996([X=0.9941995354390136, Y=0.017353816408113534, Z=0.11582176139738691])]\n   [junit4]   1> doc=471 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=2.4457272005608357E-47, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=2.448463612203698E-47])]\n   [junit4]   1> doc=478 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=0.0, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=0.0])]\n   [junit4]   1> doc=507 should not have matched but did\n   [junit4]   1>   point=[X=1.0008128994768453, Y=0.017469252883873243, Z=0.01747191431934325]\n   [junit4]   1>   mappedPoint=[lat=0.017453291479645996, lon=0.017453291479645996([X=1.0008128995370384, Y=0.01746925310095654, Z=0.01747191415779267])]\n   [junit4]   1> doc=604 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=2.4457272005608357E-47, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=2.448463612203698E-47])]\n   [junit4]   1> doc=650 should not have matched but did\n   [junit4]   1>   point=[X=1.0008128994768453, Y=0.017469252883873243, Z=0.01747191431934325]\n   [junit4]   1>   mappedPoint=[lat=0.017453291479645996, lon=0.017453291479645996([X=1.0008128995370384, Y=0.01746925310095654, Z=0.01747191415779267])]\n   [junit4]   1> doc=743 should not have matched but did\n   [junit4]   1>   point=[X=1.0008128994768453, Y=0.017469252883873243, Z=0.01747191431934325]\n   [junit4]   1>   mappedPoint=[lat=0.017453291479645996, lon=0.017453291479645996([X=1.0008128995370384, Y=0.01746925310095654, Z=0.01747191415779267])]\n   [junit4]   1> doc=807 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=-2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=-1.2794127972350177E-169, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=-1.280844273351233E-169])]\n   [junit4]   1> doc=826 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=2.4457272005608357E-47, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=2.448463612203698E-47])]\n   [junit4]   1> doc=931 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=0.0, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=0.0])]\n   [junit4]   1> doc=943 should not have matched but did\n   [junit4]   1>   point=[X=0.9976073946182008, Y=0.08377616574426938, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=1.2870639730949678E-163, lon=0.08378051468561859([X=0.9976073946394605, Y=0.08377616594164751, Z=1.2885040097598412E-163])]\n   [junit4]   1> doc=946 should not have matched but did\n   [junit4]   1>   point=[X=1.0008809877510743, Y=0.01747044164905953, Z=-0.013032532267229002]\n   [junit4]   1>   mappedPoint=[lat=-0.013018342205382104, lon=0.017453291479645996([X=1.000880987885291, Y=0.017470441587425285, Z=-0.01303253226005935])]\n   [junit4]   1> doc=982 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=0.0, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=0.0])]\n   [junit4]   1> doc=998 should not have matched but did\n   [junit4]   1>   point=[X=0.9984329789869703, Y=0.032151205937634875, Z=0.06563394006842149]\n   [junit4]   1>   mappedPoint=[lat=0.0656085955562445, lon=0.03219054308233861([X=0.998432978803685, Y=0.03215120594571263, Z=0.06563394025553593])]\n   [junit4]   1> doc=1005 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=2.4457272005608357E-47, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=2.448463612203698E-47])]\n   [junit4]   1> doc=1040 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=-2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=-5.063866803598018E-207, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=-5.069532531188606E-207])]\n   [junit4]   1> doc=1042 should not have matched but did\n   [junit4]   1>   point=[X=0.9945781929603313, Y=0.11425050487122357, Z=-2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=-4.3091314014443453E-38, lon=0.11437200407330356([X=0.9945781930019248, Y=0.11425050470015728, Z=-4.3139526903169686E-38])]\n   [junit4]   1> doc=1061 should not have matched but did\n   [junit4]   1>   point=[X=1.000966378852226, Y=0.01747193203427544, Z=2.3309121299774915E-10]\n   [junit4]   1>   mappedPoint=[lat=8.174609137513495E-34, lon=0.017453291479645996([X=1.0009663787601641, Y=0.017471932090601616, Z=8.183755331583957E-34])]\n   [junit4]   1> doc=1128 should not have matched but did\n   [junit4]   1>   point=[X=0.9904579202377298, Y=0.017288506498395972, Z=0.14419792173153445]\n   [junit4]   1>   mappedPoint=[lat=0.14454969584158828, lon=0.017453291479645996([X=0.9904579204054236, Y=0.017288506278659403, Z=0.14419792178229177])]\n   [junit4]   1> doc=1177 should not have matched but did\n   [junit4]   1>   point=[X=0.9943032637393302, Y=0.11529377312381162, Z=0.01747191431934325]\n   [junit4]   1>   mappedPoint=[lat=0.017453291479645996, lon=0.11543880242053338([X=0.9943032638905158, Y=0.11529377303352693, Z=0.017471914157792666])]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=8ED27EC85D584E01 -Dtests.slow=true -Dtests.locale=bg -Dtests.timezone=Africa/El_Aaiun -Dtests.asserts=true -Dtests.file.encoding=UTF8\n   [junit4] FAILURE 1.37s | TestGeo3DPoint.testGeo3DRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid hits for shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=1.5707963267948966, lon=-3.141592653589793([X=-6.109531986173988E-17, Y=-7.482018791156346E-33, Z=0.997762292022105])], [lat=1.0402618673239572, lon=-1.4892083512036773([X=0.04118030251401391, Y=-0.5036145102457217, Z=0.8613451288212502])], [lat=-1.0850383189690824, lon=2.4457272005608357E-47([X=0.46617432552507954, Y=1.1401352281397884E-47, Z=-0.8829869207594466])]], internalEdges={2}}, GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=-0.6370451769779303, lon=2.5318373679431616([X=-0.658944502285364, Y=0.4603087595301997, Z=-0.5947795941526743])], [lat=1.5707963267948966, lon=-3.141592653589793([X=-6.109531986173988E-17, Y=-7.482018791156346E-33, Z=0.997762292022105])], [lat=-1.0850383189690824, lon=2.4457272005608357E-47([X=0.46617432552507954, Y=1.1401352281397884E-47, Z=-0.8829869207594466])], [lat=-0.5703530503197992, lon=-3.141592653589793([X=-0.8418255855200296, Y=-1.0309390087474507E-16, Z=-0.5400031327048586])]], internalEdges={1}}]}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([8ED27EC85D584E01:3EAD035CD215E09D]:0)\n   [junit4]    > \tat org.apache.lucene.spatial3d.TestGeo3DPoint.testGeo3DRelations(TestGeo3DPoint.java:464)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Lucene62, sim=RandomSimilarity(queryNorm=true): {}, locale=bg, timezone=Africa/El_Aaiun\n   [junit4]   2> NOTE: Linux 4.2.0-42-generic amd64/Oracle Corporation 1.8.0_92 (64-bit)/cpus=8,threads=1,free=472890352,total=504889344\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeo3DPoint]\n   [junit4] Completed [1/1 (1!)] in 1.60s, 1 test, 1 failure <<< FAILURES!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15421062",
            "author": "Karl Wright",
            "date": "2016-08-15T14:32:08+0000",
            "content": "Extremely unlikely I'll have the time to look at this this week.  Maybe early next week. "
        },
        {
            "id": "comment-15421321",
            "author": "Karl Wright",
            "date": "2016-08-15T17:34:21+0000",
            "content": "Here's the shape:\n\n\nGeoCompositeMembershipShape: {[\n GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n  [lat=1.5707963267948966, lon=-3.141592653589793([X=-6.109531986173988E-17, Y=-7.482018791156346E-33, Z=0.997762292022105])], \n  [lat=1.0402618673239572, lon=-1.4892083512036773([X=0.04118030251401391, Y=-0.5036145102457217, Z=0.8613451288212502])], \n  [lat=-1.0850383189690824, lon=2.4457272005608357E-47([X=0.46617432552507954, Y=1.1401352281397884E-47, Z=-0.8829869207594466])]], internalEdges={2}}, \n GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n  [lat=-0.6370451769779303, lon=2.5318373679431616([X=-0.658944502285364, Y=0.4603087595301997, Z=-0.5947795941526743])], \n  [lat=1.5707963267948966, lon=-3.141592653589793([X=-6.109531986173988E-17, Y=-7.482018791156346E-33, Z=0.997762292022105])], \n  [lat=-1.0850383189690824, lon=2.4457272005608357E-47([X=0.46617432552507954, Y=1.1401352281397884E-47, Z=-0.8829869207594466])], \n  [lat=-0.5703530503197992, lon=-3.141592653589793([X=-0.8418255855200296, Y=-1.0309390087474507E-16, Z=-0.5400031327048586])]], internalEdges={1}}]}\n\n\n "
        },
        {
            "id": "comment-15423872",
            "author": "Karl Wright",
            "date": "2016-08-17T04:43:32+0000",
            "content": "Let's track doc=1177.  With tests.verbose=true, we get this:\n\n\n   [junit4]   1>   cycle: cell=45586 parentCellID=45584 x: 2118248593 TO 2147483041, y: -774366769 TO 1178620367, z: -418779673 TO 887469446, splits: 13 queue.size()=10\n   [junit4]   1>     minx=0.9874902679462909 maxx=1.0011188543037524 miny=-0.36099617898271563 maxy=0.5494521024819469 minz=-0.19522772391674148 maxz=0.41372265979934325\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n...\n   [junit4]   1>     addAll doc=1177\n\n\n\nDoc 1177 is declared as:\n\n\n   [junit4]   1>   doc=1177: [X=0.9943032637393302, Y=0.11529377312381162, Z=0.01747191431934325]; unquantized: [lat=0.017453291479645996, lon=0.11543880242053338([X=0.9943032638905158, Y=0.11529377303352693, Z=0.017471914157792666])]\n\n\n\nThe split descent concludes that cell 45586 is fully contained by the shape, but the actual doc 1177 on the world surface is not being reported as being within the shape.  There's no question but that the point is within the cell either.  So either we aren't detecting an intersection between the cell in question and the shape, or the shape's \"isWithin\" is misreporting membership for the shape.\n\nThe shape itself consists of two polygons glommed together in such a way that the arc they're glommed together with includes the exact North Pole to 33 decimal places.  This is suspicious.  It's possible that the issue is actually whether the original polygon was properly tiled and does not contain overlapping areas. "
        },
        {
            "id": "comment-15426350",
            "author": "Karl Wright",
            "date": "2016-08-18T12:27:23+0000",
            "content": "I wrote a test case that demonstrates the problem.\n\n\n  @Test\n  public void testPolygonFailureCase1() {\n    /*\nGeoCompositeMembershipShape: {[\n GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n  [lat=1.5707963267948966, lon=-3.141592653589793([X=-6.109531986173988E-17, Y=-7.482018791156346E-33, Z=0.997762292022105])], \n  [lat=1.0402618673239572, lon=-1.4892083512036773([X=0.04118030251401391, Y=-0.5036145102457217, Z=0.8613451288212502])], \n  [lat=-1.0850383189690824, lon=2.4457272005608357E-47([X=0.46617432552507954, Y=1.1401352281397884E-47, Z=-0.8829869207594466])]], internalEdges={2}}, \n GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n  [lat=-0.6370451769779303, lon=2.5318373679431616([X=-0.658944502285364, Y=0.4603087595301997, Z=-0.5947795941526743])], \n  [lat=1.5707963267948966, lon=-3.141592653589793([X=-6.109531986173988E-17, Y=-7.482018791156346E-33, Z=0.997762292022105])], \n  [lat=-1.0850383189690824, lon=2.4457272005608357E-47([X=0.46617432552507954, Y=1.1401352281397884E-47, Z=-0.8829869207594466])], \n  [lat=-0.5703530503197992, lon=-3.141592653589793([X=-0.8418255855200296, Y=-1.0309390087474507E-16, Z=-0.5400031327048586])]], internalEdges={1}}]}\n    */\n    final List<GeoPoint> poly1List = new ArrayList<>();\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 1.5707963267948966, -3.141592653589793));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 1.0402618673239572, -1.4892083512036773));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, -1.0850383189690824, 2.4457272005608357E-47));\n    final BitSet poly1Bitset = new BitSet();\n\n    final GeoConvexPolygon poly1 = new GeoConvexPolygon(PlanetModel.WGS84, poly1List);\n    final GeoConvexPolygon poly1Component = new GeoConvexPolygon(PlanetModel.WGS84, poly1List, poly1Bitset, true);\n    \n    final List<GeoPoint> poly2List = new ArrayList<>();\n    poly2List.add(new GeoPoint(PlanetModel.WGS84, -0.6370451769779303, 2.5318373679431616));\n    poly2List.add(new GeoPoint(PlanetModel.WGS84, 1.5707963267948966, -3.141592653589793));\n    poly2List.add(new GeoPoint(PlanetModel.WGS84, -1.0850383189690824, 2.4457272005608357E-47));\n    poly2List.add(new GeoPoint(PlanetModel.WGS84, -0.5703530503197992, -3.141592653589793));\n    final BitSet poly2Bitset = new BitSet();\n    poly2Bitset.set(1);\n    \n    final GeoConvexPolygon poly2 = new GeoConvexPolygon(PlanetModel.WGS84, poly2List);\n    final GeoConvexPolygon poly2Component = new GeoConvexPolygon(PlanetModel.WGS84, poly2List, poly2Bitset, false);\n\n    final GeoCompositeMembershipShape composite = new GeoCompositeMembershipShape();\n    composite.addShape(poly1Component);\n    composite.addShape(poly2Component);\n    \n    /*\n[junit4]   1>     minx=0.9874902679462909 maxx=1.0011188543037524 miny=-0.36099617898271563 maxy=0.5494521024819469 minz=-0.19522772391674148 maxz=0.41372265979934325\n    */\n    final XYZSolid solid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, 0.9874902679462909, 1.0011188543037524, -0.36099617898271563, 0.5494521024819469, -0.19522772391674148, 0.41372265979934325);\n    /*\n   [junit4]   1>   doc=1177: [X=0.9943032637393302, Y=0.11529377312381162, Z=0.01747191431934325]; unquantized: [lat=0.017453291479645996, lon=0.11543880242053338([X=0.9943032638905158, Y=0.11529377303352693, Z=0.017471914157792666])]\n    */\n    \n    final GeoPoint quantizedPoint = new GeoPoint(0.9943032637393302, 0.11529377312381162, 0.01747191431934325);\n    final GeoPoint unquantizedPoint = new GeoPoint(PlanetModel.WGS84, 0.017453291479645996, 0.11543880242053338);\n    \n    assertTrue(solid.isWithin(quantizedPoint));\n    assertTrue(!poly1.isWithin(quantizedPoint));\n    assertTrue(!poly2.isWithin(quantizedPoint));\n    assertTrue(!composite.isWithin(quantizedPoint));\n    \n    int relationship1 = solid.getRelationship(poly1);\n    System.out.println(\"poly1 relationship: \"+relationship1);   //Overlaps\n    \n    int relationship2 = solid.getRelationship(poly2);\n    System.out.println(\"poly2 relationship: \"+relationship2);   // Disjoint\n\n    int relationshipComposite = solid.getRelationship(composite);\n    System.out.println(\"composite relationship: \"+relationshipComposite);       // Contains!!\n\n    assertTrue(relationshipComposite == GeoArea.OVERLAPS);\n  }\n\n\n\nWhat is happening is that the relationship between the solid and the component polygons is all correct, but the relationship between the overall composite and the solid is wrong.  Effectively this means that the internal edge between the two component polygons is necessary for the determination of the proper relationship, but that should not be the case.\n\nIn this example, all the solid's edge points wind up inside the composite polygon.  Either the edge points are incorrect, or there's an edge intersection we're not picking up.  Looking deeper. "
        },
        {
            "id": "comment-15426368",
            "author": "Karl Wright",
            "date": "2016-08-18T12:42:26+0000",
            "content": "The following appears to be the case:\n(1) All discovered edge points for the solid are within poly1.\n(2) The reason poly1 is considered to overlap the solid is because of an edge intersection with the internal edge.\n(3) There is no edge intersection with the edges of the composite polygon.\n\nSo I still don't know where the problem lies: it's either a case of a missing edge point, or an undetected edge intersection.  I'll have to look at the solid and polygon carefully to figure out which it is. "
        },
        {
            "id": "comment-15426534",
            "author": "Karl Wright",
            "date": "2016-08-18T14:20:22+0000",
            "content": "Looks like there's exactly one edge point for the solid:\n\n\n   [junit4]   2>  Edge point [X=0.9874902679462909, Y=0.0, Z=0.16407467784255356] path.isWithin()? true\n\n\n\nThe only way that can legitimately happen is if only one edge plane for the solid intersects the world, and that is indeed the case here: it's the minX plane, at X=0.9874902679462909.  So the question is why the minX plane does not intersect any of the non-internal polygon edges.\n "
        },
        {
            "id": "comment-15428098",
            "author": "Karl Wright",
            "date": "2016-08-19T12:26:23+0000",
            "content": "Ok, looking at the composite polygon in question, there is no obvious edge that should cross the plane X=0.9874902679462909.  However, the internal edge definitely does - it spans from a coordinate not far from the south pole in positive X with Y=0 all the way to the north pole, spanning almost 180 degrees.  Other edges that help make up the polygon include a point also at Y=0 that's in negative X and negative Z.  Gluing these polygons together and expecting anything reasonable seems like the true problem.\n\nSo, to reiterate: poly1 has an edge along longitude zero that goes from the north pole to the southern hemisphere, then to a point in the X > 0, Y < 0 area.  Poly2 has three segments all going along the plane Y=0 and one point in the X < 0, Y > 0 area.  They join along the longest segment on the Y=0 plane.  It seems likely that poly2 is not in fact even a legal convex polygon, since it effectively spans more than 180 degrees on one edge; this poly would likely have been kicked out as illegal before the last round of optimization. "
        },
        {
            "id": "comment-15429335",
            "author": "ASF subversion and git services",
            "date": "2016-08-20T11:36:36+0000",
            "content": "Commit aa9b5204daa75494835a2da947f69f5daf8459a6 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa9b520 ]\n\nLUCENE-7412: Make sure no combined edge of a polygon extends for more than 180 degrees. "
        },
        {
            "id": "comment-15429336",
            "author": "ASF subversion and git services",
            "date": "2016-08-20T11:38:47+0000",
            "content": "Commit 44df5b60266549e410b7691ebf49583d7370c0e3 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=44df5b6 ]\n\nLUCENE-7412: Make sure no combined edge of a polygon extends for more than 180 degrees. "
        }
    ]
}