{
    "id": "SOLR-8205",
    "title": "Make UpdateShardHandler's thread pool configurable",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "Resource consumption under arbitrary query load can be limited with careful bound on maximumPoolSize in ShardHandlerFactory and appropriate timeouts but it is not possible to do the same for updates because of UpdateShardHandler uses an unbounded cached thread pool. This is a major problem, for example, when trying use SolrCloud as a service and attempting to guarantee SLAs.\n\nI propose to make the UpdateShardHandler's core/max thread pool size and thread keep alive time configurable. If we change the pool size to be bounded, does it make sense to make the queue size also configurable?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-24T16:58:10+0000",
            "author": "Yonik Seeley",
            "content": "A downside to configuring an upper bound will be big update reorders (when that upper bound is hit) and then undetected shard inconsistency as a result.  That update handler is used for different things too... both update streams (which may be very long lived) and control messages (peersync? LIR?) and could lead to starvation.  I certainly wouldn't want to try and debug issues around that  ",
            "id": "comment-14972711"
        },
        {
            "date": "2015-10-25T14:20:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Yeah, you're right. I had not considered that. I will close this issue as won't fix. ",
            "id": "comment-14973258"
        }
    ]
}