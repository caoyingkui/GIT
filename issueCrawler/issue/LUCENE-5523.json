{
    "id": "LUCENE-5523",
    "title": "MemoryIndex.addField violates TokenStream contract",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce",
        "components": [],
        "affect_versions": "4.6,                                            4.7",
        "status": "Closed",
        "fix_versions": []
    },
    "description": "Running the example from the javadoc page generates a IllegalStateException.\n\nhttp://lucene.apache.org/core/4_7_0/memory/org/apache/lucene/index/memory/MemoryIndex.html\n\n\njava.lang.RuntimeException: java.lang.IllegalStateException: TokenStream contract violation: reset()/close() call missing, reset() called multiple times, or subclass does not call super.reset(). Please see Javadocs of TokenStream class for more information about the correct consuming workflow.\n\tat org.apache.lucene.index.memory.MemoryIndex.addField(MemoryIndex.java:463)\n\tat org.apache.lucene.index.memory.MemoryIndex.addField(MemoryIndex.java:298)\n\tat be.curtaincall.provisioning.SearchTest.testSearch(SearchTest.java:32)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:77)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)\nCaused by: java.lang.IllegalStateException: TokenStream contract violation: reset()/close() call missing, reset() called multiple times, or subclass does not call super.reset(). Please see Javadocs of TokenStream class for more information about the correct consuming workflow.\n\tat org.apache.lucene.analysis.Tokenizer$1.read(Tokenizer.java:110)\n\tat org.apache.lucene.analysis.util.CharacterUtils.readFully(CharacterUtils.java:213)\n\tat org.apache.lucene.analysis.util.CharacterUtils$Java5CharacterUtils.fill(CharacterUtils.java:255)\n\tat org.apache.lucene.analysis.util.CharacterUtils.fill(CharacterUtils.java:203)\n\tat org.apache.lucene.analysis.util.CharTokenizer.incrementToken(CharTokenizer.java:135)\n\tat org.apache.lucene.index.memory.MemoryIndex.addField(MemoryIndex.java:429)\n\t... 28 more\n\n\n\nAlso tested in 3.7.0, but version not yet created in JIRA.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13932135",
            "author": "Uwe Schindler",
            "content": "Hi,\n\ncan you post your Analyzer definition (which TokenFilters and Tokenizers do you use)? In most cases, a broken custom TokenFilter is causing this. Do you have any TokenFilters or a Tokenizer that was written by you?\n\nDoes the same TokenStream work with Lucene's standard IndexWriter? ",
            "date": "2014-03-12T18:30:40+0000"
        },
        {
            "id": "comment-13932151",
            "author": "Willem Salembier",
            "content": "These is the complete code, taken from javadoc\n\n\n        Version version = Version.LUCENE_47;\n        Analyzer analyzer = new SimpleAnalyzer(version);\n        MemoryIndex index = new MemoryIndex();\n        index.addField(\"content\", \"Readings about Salmons and other select Alaska fishing Manuals\", analyzer);\n        index.addField(\"author\", \"Tales of James\", analyzer);\n        QueryParser parser = new QueryParser(version, \"content\", analyzer);\n        float score = index.search(parser.parse(\"+author:james +salmon~ +fish* manual~\"));\n        if (score > 0.0f) {\n            System.out.println(\"it's a match\");\n        } else {\n            System.out.println(\"no match found\");\n        }\n        System.out.println(\"indexData=\" + index.toString());\n\n ",
            "date": "2014-03-12T18:39:19+0000"
        },
        {
            "id": "comment-13932162",
            "author": "Uwe Schindler",
            "content": "Hi,\nwe are a little bit confused about your version numbers.\nWhich Lucene version are you using? Lucene 3.6.1 does not have any TokenStream contract checks. Those were introduced in Lucene 4.6.\nMaybe you have some classpath thats mixed up and has different versions of Lucene in it? ",
            "date": "2014-03-12T18:42:40+0000"
        },
        {
            "id": "comment-13932168",
            "author": "Uwe Schindler",
            "content": "\nVersion version = Version.LUCENE_47;\n\n\nThis suggests that you are using Lucene 4.7. But The line numbers in your stack trace are not from that version. Line 429 of MemoryIndex points to incrementToken() only in earlier versions.\n\nThis makes me think, that you have different versions of JAR files in your classpath (e.g. a newer version of the analyzers module) than the memoryindex module. In that case it might happen that MemryIndex hits this problem, because earlier versions did not consume TokenStreams correctly (reset() call missing).. ",
            "date": "2014-03-12T18:45:44+0000"
        },
        {
            "id": "comment-13932186",
            "author": "Uwe Schindler",
            "content": "I checked your example with Lucene 4.7 and also Lucene 4.6. In both cases, test succeeds. So you have for sure a broken classpath mixing different Lucene versions. ",
            "date": "2014-03-12T18:56:26+0000"
        },
        {
            "id": "comment-13932211",
            "author": "Willem Salembier",
            "content": "I had indeed a transitive dependency on lucene-analyzers-common version 4.4.0 imported via the graph database titan.I didn't realize that. Thanks for your support.  ",
            "date": "2014-03-12T19:05:25+0000"
        }
    ]
}