{
    "id": "SOLR-8337",
    "title": "Add ReduceOperation and wire it into the ReducerStream",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The current ReducerStream groups all documents that share the same key(s) into a list and emits a single Tuple that contains this list. There is no way to tell the ReducerStream to do something more interesting with groups, for example summing a column within a group, or joining tuples. \n\nThis ticket adds a new type of operation called a ReduceOperation which is passed to the ReducerStream so that the reduce behavior can be specialized.\n\nThe ReduceOperation has two methods:\n\n1) operate(Tuple) : This is called once for each Tuple in a group. This method can be used to aggregate Tuples as they added to a group. \n2) reduce() : This is called when the group keys change. This method returns a single Tuple which is output by the ReducerStream. The ReduceOperation must clear it's internal structures when reduce is called as well, to prepare for the next group.",
    "attachments": {
        "SOLR-8337.patch": "https://issues.apache.org/jira/secure/attachment/12774140/SOLR-8337.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-24T20:03:23+0000",
            "author": "Joel Bernstein",
            "content": "Patch adds a single reduce() method for the ReduceOperation that returns a single Tuple, which is the final reduction.\n\nThe operate(Tuple) method will be called for each Tuple that is read by the ReducerStream.\n\nThe reduce() method will be called each time the group by key changes. This will give the ReduceOperation a chance to finish the reduce algorithm and return a single Tuple. The ReduceOperation will also clear it's internal memory after each call to reduce() to prepare for the next Tuple grouping. ",
            "id": "comment-15025241"
        },
        {
            "date": "2015-11-24T20:26:57+0000",
            "author": "Joel Bernstein",
            "content": "Currently the ReducerStream is referred to by the group Streaming Expression function. Now that we will be passing in a ReduceOperation it makes sense to call this function reduce. For example the syntax would be:\n\nreduce(                                      \n             search(collection1, \n                         q=\"*:*\",\n                         qt=\"/export\", \n                         fl=\"id,a_s,a_i,a_f\", \n                         sort=\"a_s asc, a_f asc\"),\n              by=\"a_s\",\n              operation(...))\n\n ",
            "id": "comment-15025291"
        },
        {
            "date": "2015-11-24T23:27:14+0000",
            "author": "Joel Bernstein",
            "content": "First crack at adding the ReduceOperation to the ReducerStream.\n\nI'll create a GroupOperation that will emit a single Tuple with a list of all the Tuples in a group.\n\n\nreduce(  \n             search(collection1, \n                          q=\"*:*\",\n                          qt=\"/export\", \n                          fl=\"id,a_s,a_i,a_f\", \n                          sort=\"a_s asc, a_f asc\"),\n             by=\"a_s\",\n             group(sort=\"a_f asc\", n=\"20\"))\n\n   ",
            "id": "comment-15025697"
        },
        {
            "date": "2015-11-25T02:24:12+0000",
            "author": "Dennis Gove",
            "content": "I might change the operationExpressions line to get operands of type ReduceOperation.class. This would ensure that only expressions adhering to the ReduceOperation interface are returned. That said, from a user perspective it might be nice to be told you provided a StreamOperation when a ReduceOperation is expected.\n\nList<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ReduceOperation.class);\n\n ",
            "id": "comment-15026025"
        },
        {
            "date": "2015-11-25T02:53:24+0000",
            "author": "Joel Bernstein",
            "content": "Sounds good. I'll make that change in the next iteration. ",
            "id": "comment-15026066"
        },
        {
            "date": "2015-11-25T18:05:19+0000",
            "author": "Joel Bernstein",
            "content": "Added the GroupOperation. Now we just need some tests. ",
            "id": "comment-15027297"
        },
        {
            "date": "2015-12-10T17:19:27+0000",
            "author": "Joel Bernstein",
            "content": "Patch with passing StreamExpressionTests. Still need to work on the StreamingTests. ",
            "id": "comment-15051280"
        },
        {
            "date": "2015-12-10T18:51:59+0000",
            "author": "Joel Bernstein",
            "content": "New patch with StreamingTests passing. ",
            "id": "comment-15051455"
        },
        {
            "date": "2015-12-11T02:28:26+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1719246 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1719246 ]\n\nSOLR-8337: Add ReduceOperation and wire it into the ReducerStream ",
            "id": "comment-15052041"
        },
        {
            "date": "2016-01-24T17:26:00+0000",
            "author": "Kevin Risden",
            "content": "Joel Bernstein - Any reason that this patch removed \".withFunctionName(\"count\", RecordCountStream.class)\" from StreamingTest? It looks like RecordCountStream is never used without that line. ",
            "id": "comment-15114389"
        },
        {
            "date": "2016-01-24T17:35:20+0000",
            "author": "Joel Bernstein",
            "content": "It was conflicting with the count metric function call and it was only being used for some very early test cases. I just removed it a changed the test cases. ",
            "id": "comment-15114395"
        },
        {
            "date": "2016-01-24T17:37:15+0000",
            "author": "Kevin Risden",
            "content": "So that means that the RecordCountStream file can be deleted? Looks like its an unused file. ",
            "id": "comment-15114396"
        },
        {
            "date": "2016-01-24T18:17:05+0000",
            "author": "Joel Bernstein",
            "content": "Yes ",
            "id": "comment-15114418"
        }
    ]
}