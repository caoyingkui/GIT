{
    "id": "SOLR-1967",
    "title": "New Native PHP Response Writer Class",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "3.3"
        ],
        "components": [
            "clients - php",
            "Response Writers"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Hi Solr users,\n\nIf you are using Apache Solr via PHP, I have some good news for you.\n\nThere is a new response writer for the PHP native extension, currently available as a plugin.\n\nThis new feature adds a new response writer class to the org.apache.solr.request package.\n\nThis class is used by the PHP Native Solr Client driver to prepare the query response from Solr.\n\nThis response writer allows you to configure the way the data is serialized for the PHP client.\n\nYou can use your own class name and you can also control how the properties are serialized as well.\n\nThe formatting of the response data is very similar to the way it is currently done by the PECL extension on the client side.\n\nThe only difference now is that this serialization is happening on the server side instead.\n\nYou will find this new response writer particularly useful when dealing with responses for \n\n\n\thighlighting\n\tadmin threads responses\n\tmore like this responses\n\n\n\nto mention just a few\n\nYou can pass the \"objectClassName\" request parameter to specify the class name to be used for serializing objects. \n\nPlease note that the class must be available on the client side to avoid a PHP_Incomplete_Object error during the unserialization process.\n\nYou can also pass in the \"objectPropertiesStorageMode\" request parameter with either a 0 (independent properties) or a 1 (combined properties).\n\nThese parameters can also be passed as a named list when loading the response writer in the solrconfig.xml file\n\nHaving this control allows you to create custom objects which gives the flexibility of implementing custom __get methods, ArrayAccess, Traversable and Iterator interfaces on the PHP client side.\n\nUntil this class in incorporated into Solr, you simply have to copy the jar file containing this plugin into your lib directory under $SOLR_HOME\n\nThe jar file is available here and so is the source code.\n\nThen set up the configuration as shown below and then restart your servelet container\n\nBelow is an example configuration in solrconfig.xml\n\n<code>\n<queryResponseWriter name=\"phpnative\" class=\"org.apache.solr.request.PHPNativeResponseWriter\">\n<!-- You can choose a different class for your objects. Just make sure the class is available in the client -->\n<str name=\"objectClassName\">SolrObject</str>\n<!--\n0 means OBJECT_PROPERTIES_STORAGE_MODE_INDEPENDENT\n1 means OBJECT_PROPERTIES_STORAGE_MODE_COMBINED\n\nIn independed mode, each property is a separate property\nIn combined mode, all the properites are merged into a _properties array.\nThe combined mode allows you to create custom __getters and you could also implement ArrayAccess, Iterator and Traversable\n-->\n<int name=\"objectPropertiesStorageMode\">0</int>\n</queryResponseWriter\n\n<code>\n\nBelow is an example implementation on the PHP client side.\n\nSupport for specifying custom response writers will be available starting from the 0.9.11 version of the PECL extension for Solr currently available here\n\nhttp://pecl.php.net/package/solr\n\nHere is an example of how to use the new response writer with the PHP client.\n\n<code>\n<?php\n\nclass SolrClass\n{\npublic $_properties = array();\n\npublic function __get($property_name) {\n\nif (property_exists($this, $property_name)) \n{ return $this->$property_name; }\n else if (isset($_properties[$property_name])) \n{ return $_properties[$property_name]; }\n\nreturn null;\n}\n}\n\n$options = array\n(\n'hostname' => 'localhost',\n'port' => 8983,\n'path' => '/solr/'\n);\n\n$client = new SolrClient($options);\n\n$client->setResponseWriter(\"phpnative\");\n\n$response = $client->ping();\n\n$query = new SolrQuery();\n\n$query->setQuery(\":\");\n\n$query->set(\"objectClassName\", \"SolrClass\");\n$query->set(\"objectPropertiesStorageMode\", 1);\n\n$response = $client->query($query);\n\n$resp = $response->getResponse();\n\n?>\n<code>\n\nDocumentation of the changes to the PECL extension are available here\n\nhttp://docs.php.net/manual/en/solrclient.construct.php\nhttp://docs.php.net/manual/en/solrclient.setresponsewriter.php\n\nPlease contact me at iekpo@php.net, if you have any questions or comments.",
    "attachments": {
        "phpnativeresponsewriter.jar": "https://issues.apache.org/jira/secure/attachment/12447664/phpnativeresponsewriter.jar",
        "phpnative.tar.gz": "https://issues.apache.org/jira/secure/attachment/12447663/phpnative.tar.gz"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Israel Ekpo",
            "id": "comment-12881052",
            "date": "2010-06-22T04:14:35+0000",
            "content": "Attaching the source code and the jar file.\n\nUntil the response writer is integrated into Solr, to use this response writer you will have to place the jar file phpnativeresponsewriter.jar in your lib directory and then modify your solrconfig.xml file to load the response writer class.\n\nIf you are using a custom php class on the client, please ensure that the class name you have specified is also available during the unserialize event to avoid incomplete php objects.\n\nYou have the option of determining how the object properties are prepared.\n\nThe properties can be combined into an array or encoded as individual properties.\n\nThe former allows you to do custom handling of the objects as well as implementing ArrayAccess, Iterator and Traversable on the custom object. "
        },
        {
            "author": "JimmyZhuo",
            "id": "comment-12895979",
            "date": "2010-08-06T07:32:49+0000",
            "content": "SolrClass was wrong,\nIt should be:\n\n\nclass SolrClass\n{\npublic $_properties = array();\n\npublic function __get($property_name) {\n\nif (property_exists($this, $property_name)) \n{ return $this->$property_name; }\n else if (isset($this->_properties[$property_name])) \n{ return $this->_properties[$property_name]; }\n\nreturn null;\n}\n} "
        },
        {
            "author": "JimmyZhuo",
            "id": "comment-12895980",
            "date": "2010-08-06T07:34:35+0000",
            "content": "Hello\nfound a bug. when I use phpnative, it outputs an warning. but I use xml, then it works.\n\nWarning: SolrResponse::getResponse(): Error unserializing raw response. in /home/carlos/topons-dev/magento/test.php on line 0\n\nthe object data was:\n\nSolrQueryResponse Object\n(\n    [http_status:protected] => 200\n    [parser_mode:protected] => 0\n    [success:protected] => 1\n    [response_writer:protected] => phpnative\n    [http_status_message:protected] =>  \n    [http_request_url:protected] => http://localhost:8080/solr/select/?version=2.2&indent=on&wt=phpnative\n    [http_raw_request_headers:protected] => POST /solr/select/?version=2.2&indent=on&wt=phpnative HTTP/1.1\nUser-Agent: PHP Solr Client 0.9.11\nHost: localhost:8080\nAccept: /\nAccept-Charset: utf-8\nKeep-Alive: 300\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded;charset=UTF-8\nContent-Length: 6\n\n\n    [http_raw_request:protected] => q=slim\n    [http_raw_response_headers:protected] => HTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/x-php-serialized;charset=UTF-8\nContent-Length: 3279\nDate: Fri, 06 Aug 2010 07:29:01 GMT\n\n\n    [http_raw_response:protected] => O:10:\"SolrObject\":2:{s:8:\"response\";O:10:\"SolrObject\":3:{s:8:\"numFound\";s:2:\"17\";s:5:\"start\";s:1:\"0\";s:4:\"docs\";a:10:{i:0;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"7251\";s:4:\"name\";s:26:\"Slim decorating brown belt\";s:11:\"description\";s:0:\"\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:1;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"7874\";s:4:\"name\";s:24:\"Black Slim Fit Mesh Polo\";s:11:\"description\";s:0:\"\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:2;O:10:\"SolrObject\":5:{s:2:\"id\";s:3:\"547\";s:4:\"name\";s:46:\"Earphone Remote Control for PSP Slim 2000 3000\";s:11:\"description\";s:324:\"Listen to your favorite music on your Sony PSP Slim 2000 / 3000 with this high quality stereo earphone. It comes with a remote control with functions for play, pause, FF, FR, volume, hold. A Highly fashionable style and it\u806es unique for the function of microphone which allows you talk with your friends when you play games. \";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:3;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"7875\";s:4:\"name\";s:31:\"Newport Navy Slim-Fit Mesh Polo\";s:11:\"description\";s:0:\"\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:4;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"7888\";s:4:\"name\";s:32:\"New Chocolate Slim-Fit Mesh Polo\";s:11:\"description\";s:0:\"\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:5;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"7890\";s:4:\"name\";s:24:\"White Slim-Fit Mesh Polo\";s:11:\"description\";s:0:\"\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:6;O:10:\"SolrObject\":5:{s:2:\"id\";s:3:\"401\";s:4:\"name\";s:58:\"Slim Vertu F1 Mobile Phone with Red Ox Leather On the Back\";s:11:\"description\";s:120:\"GSM  900/1800MHz, Special Vertu shape keys, red ox leather on the back, incoming call blacklist,  E-Book, bluetooth 2.0\n\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:7;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"2716\";s:4:\"name\";s:52:\"Free Shipping Fine Slim Custom-Fit Andrew Polo Shirt\";s:11:\"description\";s:180:\"Our luxurious, long-sleeved dress shirt is expertly tailored for a trim, modern fit from exquisite 120s-quality two-ply cotton poplin in a smooth, silky finish for a polished look.\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:8;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"2718\";s:4:\"name\";s:51:\"Free Shipping Fine Slim Custom-Fit Plaid Polo Shirt\";s:11:\"description\";s:274:\"Our luxurious, long-sleeved sport shirt is expertly tailored for a trim, modern fit from exquisite 120s-quality two-ply poplin, printed with a micro-plaid pattern for a polished look that is the pinnacle of refined style. * Medium-spread button-down collar. Applied placket.\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}i:9;O:10:\"SolrObject\":5:{s:2:\"id\";s:4:\"2720\";s:4:\"name\";s:52:\"Free Shipping Fine Slim Custom-Fit Estate Polo Shirt\";s:11:\"description\";s:193:\"Our luxurious, long-sleeved dress shirt is expertly tailored for a trim, modern fit from ultra-silky 120s-quality two-ply cotton poplin printed in a multi-stripe design for polished refinement.\";s:5:\"links\";a:1:\n{i:0;s:8:\"url_path\";}\ns:5:\"score\";d:0.0;}}}s:14:\"responseHeader\";O:10:\"SolrObject\":3:{s:6:\"status\";i:0;s:5:\"QTime\";i:1;s:6:\"params\";O:10:\"SolrObject\":4:\n{s:6:\"indent\";s:2:\"on\";s:1:\"q\";s:4:\"slim\";s:2:\"wt\";s:9:\"phpnative\";s:7:\"version\";s:3:\"2.2\";}\n}}\n    [http_digested_response:protected] =>  \n) "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-12905186",
            "date": "2010-09-01T20:02:56+0000",
            "content": "To my mind, the PHP response writer should just be removed.  PHP has had a number of security issues around unserializing data, and in most languages, unserializing potentially untrusted data may be an security vulnerability. "
        },
        {
            "author": "Israel Ekpo",
            "id": "comment-12910906",
            "date": "2010-09-18T07:11:35+0000",
            "content": "If you are getting errors when unserializing the response, it means you have control or special characters in the unserialized data that is causing this issue. Try striping out any extra characters before indexing the data.\n\nThis will get rid of this error. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12985502",
            "date": "2011-01-24T03:49:05+0000",
            "content": "Any committer interested in this for 3.1? I don't think I'll be dusting off my PHP skills for this release... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12988449",
            "date": "2011-01-29T12:25:16+0000",
            "content": "Moving out all unassigned issues set to 3.1 per this email: http://www.lucidimagination.com/search/document/f026cc56081b5a51/unassigned_jira_issues_set_for_3_1 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043637",
            "date": "2011-06-03T16:46:14+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Eric Pugh",
            "id": "comment-13045435",
            "date": "2011-06-07T14:01:41+0000",
            "content": "Seems like this could be closed as a won't fix.   One of the most popular clients for PHP, solr-php-client (http://code.google.com/p/solr-php-client/), doesn't use the PHP writer at all! And isn't going to:  http://code.google.com/p/solr-php-client/issues/detail?id=6#c1  \n\nI'd echo Peter Wolanin's comment that having lots of \"writers\" that don't get tested/updated isn't a good thing. "
        },
        {
            "author": "Israel Ekpo",
            "id": "comment-13052341",
            "date": "2011-06-21T03:46:26+0000",
            "content": "The latest version of the PECL extension now supports JSON response writer which should be easier to use without additional configuration. "
        },
        {
            "author": "Israel Ekpo",
            "id": "comment-13052342",
            "date": "2011-06-21T03:48:58+0000",
            "content": "To use the 'json' response writer in lieu of phpnative, see documentation for SolrClient::__construct()\n\nhttp://www.php.net/manual/en/solrclient.construct.php "
        },
        {
            "author": "shenzhuxi",
            "id": "comment-13072775",
            "date": "2011-07-29T11:07:36+0000",
            "content": "Why not just?\n$code = file_get_contents('http://localhost:8983/solr/select?q=iPod&wt=php');\neval(\"\\$result = \" . $code . \";\");\nprint_r($result); "
        },
        {
            "author": "shenzhuxi",
            "id": "comment-13191230",
            "date": "2012-01-23T16:11:17+0000",
            "content": "\n@Peter Wolanin\n\nWhy \"wt=php\" is not secure? Any example?\nIs \"wt=phps\" secure? If not, why? "
        }
    ]
}