{
    "id": "LUCENE-391",
    "title": "Inconsistent Read and write behavior",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "While writing an undefined term , the field is inserted into the index as \nfieldnumber -1 and while reading the same index back an exception is thrown.\n\nFirst of all, the indexwriter should not allow the operation to succeed if the \nfield is not known.\n\nSecond, if the data is allowed to write, at least we should be able to read it \nwith out any problem.\n\nIf one uses the default indexreader, indexwriter and segmentmerger this may \nerror may not occur.  However, it is simple fix for the code not to accept bad \ndata. Please review and commit the changes.  I am not sure, if there are any \nother classes that requires a similar fix. Our usage uncovered the following \nfiles:\n\n\u2013\n\nTermInfosWriter\n\nprivate final void writeTerm(Term term)\nthrows IOException {\nint iField = fieldInfos.fieldNumber(term.field);\nif (iField < 0) {\nthrow new IOException(\"Unknown field \"term.field\"; term=\"+term.text);\n}\nint start = stringDifference(lastTerm.text, term.text);\nint length = term.text.length() - start;\n\noutput.writeVInt(start); // write shared prefix length\noutput.writeVInt(length); // write delta length\noutput.writeChars(term.text, start, length); // write delta chars\n\noutput.writeVInt(iField); // write field num\n\nlastTerm = term;\n}\n\n\n\nFieldsReader\n\n final Document doc(int n) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      byte bits = fieldsStream.readByte();\n      String stFieldValue = fieldsStream.readString();\n      if (fieldNumber >=0) \n{\n          FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n\n          doc.add(new Field(fi.name, // name\n                            stFieldValue, // read value\n                            true, // stored\n                            fi.isIndexed, // indexed\n                            (bits & 1) != 0)); // tokenized\n      }\n    }\n\n    return doc;\n  }\n\n\u2013 FieldsWriter.java\n\nfinal void addDocument(Document doc) throws IOException {\n    indexStream.writeLong(fieldsStream.getFilePointer());\n\n    int storedCount = 0;\n    Enumeration fields  = doc.fields();\n    while (fields.hasMoreElements()) \n{\n      Field field = (Field)fields.nextElement();\n      if (field.isStored())\n\tstoredCount++;\n    }\n    fieldsStream.writeVInt(storedCount);\n\n    fields  = doc.fields();\n    while (fields.hasMoreElements()) {\n      Field field = (Field)fields.nextElement();\n      if (field.isStored()) {\n          int iField = fieldInfos.fieldNumber(field.name());\n          if (iField == -1) \n{\n              throw new IOException(\"Unknown field \" + field.name());\n          }\n          fieldsStream.writeVInt(iField);\n\n\tbyte bits = 0;\n\tif (field.isTokenized())\n\t  bits |= 1;\n\tfieldsStream.writeByte(bits);\n\n\tfieldsStream.writeString(field.stringValue());\n      }\n    }\n  }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-06-22T12:11:02+0000",
            "content": "Arvind, can you provide code in a form of a unit test (method/class) that\ndemonstrates the problem you are describing?  Once we have that we can work on\nfixing the problem uncovered by your test. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12322405"
        },
        {
            "date": "2006-08-13T07:32:46+0000",
            "content": "It looks like the change here is the addition of if tests for field < 0 in a few classes.  I don't fully understand when this comes into play and breaks things.  Sine the report is ancient, and I've never heard any complaints about this and there was no followup to this, I'm resolving it without making these code changes. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12427740"
        }
    ]
}