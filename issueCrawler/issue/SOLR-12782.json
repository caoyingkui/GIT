{
    "id": "SOLR-12782",
    "title": "UninvertingReader can be avoided if there are no fields to uninvert",
    "details": {
        "type": "Improvement",
        "status": "Resolved",
        "labels": "",
        "fix_versions": [
            "7.6"
        ],
        "components": [],
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None"
    },
    "description": "Solr uses UninvertingReader to expose DocValues on fields that don't have them, but do have indexed fields that can be inverted via the FieldCache. It has an internal constructor that takes the input LeafReader and a mapping of field name to UninvertingReader.Type. It builds a new FieldInfos that have fields reflecting DocValues. There are two things I'd like to improve here:\n\n\tmake this constructor private and instead insist you use a new wrap() method that has the opportunity to return the input if there is nothing to do. Effectively the logic today would move into this wrap method, and the current constructor would be dead simple, and would take the FieldInfos.\n\tDo not create a new FieldInfo object if the existing field is suitable (it's\u00a0DocValuesType can stay the same). \u00a0The savings here can really add up on machines with many indexes & segments. \u00a0This is in fact what motivated the patch.",
    "attachments": {
        "SOLR-12782.patch": "https://issues.apache.org/jira/secure/attachment/12940325/SOLR-12782.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16621055",
            "content": "The UninvertingReader adds extremely little overhead so it's not really a big deal to avoid wrapping another reader. \u00a0Another possibility is to make building the FieldInfos lazy on the first call to UninvertingReader.getFieldInfos(). \u00a0In this circumstance, it'd always wrap (though I still like the static wrap method). \u00a0However, the main user of this, SolrIndexSearcher, wraps a SolrCompositeReaderWrapper around the reader (which will contain UninvertingReader), and SCRW eagerly grabs the FieldInfos via MultiFields.getFields/LeafReaderFields. \u00a0Shrug.\n\nI was also looking at\u00a0IndexSchema.getUninversionMap(reader):Map.  It's a shame to see this method call MultiFields.getMergedFieldInfos(reader) and do all this looping.  It might not be heavy but nonetheless it seems unnecessary.  I think we don't need this method as it's largely redundant with checking that UninvertingReader does already or nearly does with slightly more conditions.  All we need is a simple mapping of field name to Uninverting.Type.  This could be done with a lambda and needn't insist on a Map.  I'm trying this out and so-far-so good. ",
            "author": "David Smiley",
            "date": "2018-09-19T19:06:06+0000"
        },
        {
            "id": "comment-16621194",
            "content": "The updated patch does what I said in the 2nd paragraph above.  It's a nice simplification.  It obsoleted comments and some code pertaining to situations where the segments have mixed docValues for a field.  It should \"just work\".\n\nTests pass, though I'll want to run again as I made some last-minute changes to cleanup.  It'd be nice to get some peer review.  Perhaps Keith Laban would like to take a look?  I recall you wrote UninvertDocValuesMergePolicyFactory. ",
            "author": "David Smiley",
            "date": "2018-09-19T20:55:05+0000"
        },
        {
            "id": "comment-16621333",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   2m 36s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   2m 32s \n  the patch passed  \n\n\n +1 \n  javac  \n   2m 32s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   2m 32s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   2m 32s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   2m 32s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  88m 59s \n  core in the patch failed.  \n\n\n  \n   \n  99m 13s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.autoscaling.sim.TestSimTriggerIntegration \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12782 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12940504/SOLR-12782.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / d494f6b \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/181/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/181/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/181/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "date": "2018-09-19T23:59:35+0000"
        },
        {
            "id": "comment-16622060",
            "content": "Ah; Yetus reminds me I should perhaps write a test.  I guess I could write a test that a FieldInfo is reused if it doesn't change.  FWIW the patch will soon be evaluated in a stage like env to observe it reduces FieldInfo creation. ",
            "author": "David Smiley",
            "date": "2018-09-20T13:42:45+0000"
        },
        {
            "id": "comment-16630982",
            "content": "The latest patch simply adds a test that we re-use the same FieldInfo to org.apache.solr.uninverting.TestUninvertingReader#testFieldInfos\n\nI plan to commit soon as I think it's ready. ",
            "author": "David Smiley",
            "date": "2018-09-27T20:17:02+0000"
        },
        {
            "id": "comment-16631223",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 25s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 18s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 18s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 18s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 18s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 18s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  53m 18s \n  core in the patch failed.  \n\n\n  \n   \n  58m  9s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.autoscaling.sim.TestSimExtremeIndexing \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12782 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12941594/SOLR-12782.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 9481c1f \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/192/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/192/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/192/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "date": "2018-09-28T00:53:30+0000"
        },
        {
            "id": "comment-16640875",
            "content": "Committed to master & 7x: https://github.com/apache/lucene-solr/commit/e2b8beccb03b6f9068c00e4711eac2500d120d44 ",
            "author": "David Smiley",
            "date": "2018-10-06T21:05:52+0000"
        }
    ]
}