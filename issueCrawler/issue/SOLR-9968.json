{
    "id": "SOLR-9968",
    "title": "Cannot use special characters in Suggester Context Query",
    "details": {
        "components": [
            "Suggester"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0,                                            6.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Reproduce\n\n1. Configure the Suggester to use a contextField, eg. context\n2. Add a document containing special characters in that field, eg. 'c#x'\n3. Use a context query with the Suggester, eg. \n\nsuggest.cfq=context:c#x\n\n\n\tEscaping the character makes no difference, eg.\n\nsuggest.cfq=context:c\\#x\n\n\n\n\nWhat happens\n\nThe suggestions are not properly filtered\n\nWhat should happen\n\nThe suggestions should be limited to documents where the field context is 'c#x'\n\n\n\nWhat happens is this:\n\n1. SolrSuggester.contextFilterQueryAnalyzer is hardwired to use StandardTokenizer\n2. The context query is parsed like this:\nSolrSuggester.parseContextFilterQuery\nquery = new StandardQueryParser(contextFilterQueryAnalyzer).parse(contextFilter, CONTEXTS_FIELD_NAME);\n\n\n3. The StandardQueryParser together with StandardTokenizer will turn the context query into 'context:c context:x'\n4. This is used for filtering the suggestions\n5. Thus, the suggestion where context is 'c(x' is not returned\n\nAttached is an extension to SuggestComponentContextFilterQueryTest to reproduce this behavior.\n\nSo, the question is, how to get the parser and tokenizer to use these special characters verbatim? Two ways I can think of:\n\n\n\tMake contextFilterQueryAnalyzer configurable so KeywordTokenizer can be used\n\tUse the analyzer defined for the context field in the schema",
    "attachments": {
        "test_context_query_with_special_characters.patch": "https://issues.apache.org/jira/secure/attachment/12847544/test_context_query_with_special_characters.patch",
        "SOLR-9968-configurable-tokenizer.patch": "https://issues.apache.org/jira/secure/attachment/12847919/SOLR-9968-configurable-tokenizer.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-15T17:24:05+0000",
            "author": "Georg Sorst",
            "content": "Test case ",
            "id": "comment-15823197"
        },
        {
            "date": "2017-01-17T22:14:47+0000",
            "author": "Georg Sorst",
            "content": "Make tokenizer for context filter queries configurable. Applies against Solr 6.3. ",
            "id": "comment-15826929"
        },
        {
            "date": "2017-01-17T22:19:53+0000",
            "author": "Georg Sorst",
            "content": "I've implemented a fix (SOLR-9968-configurable-tokenizer.patch) for this that fulfills my use case: Make the tokenizer to use for context filter queries configurable. This makes it possible to use KeywordTokenizer, which handles special characters just fine.\n\nThe config setting is contextFilterQueryTokenizer, it defaults to StandardTokenizer.\n\nThe patch also contains a testcase.\n\nThe configuration uses the registered name (eg. keyword, standard) of the Tokenizer instead of the class name (eg. solr.KeywordTokenizerFactory, solr.StandardTokenizerFactory. I would have preferred the latter way but couldn't figure out how to do this properly.\nI'll gladly change the behavior if it makes sense and someone can point me in the right direction. ",
            "id": "comment-15826939"
        }
    ]
}