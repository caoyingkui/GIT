{
    "id": "LUCENE-4715",
    "title": "Add OrdinalPolicy.ALL_BUT_DIMENSION",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "With the move of OrdinalPolicy to CategoryListParams, NonTopLevelOrdinalPolicy was nuked. It might be good to restore it, as another enum value of OrdinalPolicy.\n\nIt's the same like ALL_PARENTS, only doesn't add the dimension ordinal, which could save space as well as computation time. It's good for when you don't care about the count of Date/, but only about its children counts.",
    "attachments": {
        "LUCENE-4715.patch": "https://issues.apache.org/jira/secure/attachment/12566943/LUCENE-4715.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-24T14:01:03+0000",
            "content": "+1\n\nThis is very compelling because you also do not need to do the rollup in the end, so you get the gains of NO_PARENTS without the cost (end rollup), so even for indices w/ many unique ords there's no penalty.\n\nI also suspect this is common ... ie most faceted search UIs I've seen do not include the dim facet count, just the values under that dim. ",
            "author": "Michael McCandless",
            "id": "comment-13561628"
        },
        {
            "date": "2013-01-24T15:14:39+0000",
            "content": "so you get the gains of NO_PARENTS without the cost (end rollup)\n\nI'd like to clarify the difference between the 3 OrdinalPolicies, through example. Say that you add the facet Date/2010/March/11, then the ordinals that will be encoded are of:\n\n\n\tALL_PARENTS: Date, Date/2010, Date/2010/March, Date/2010/March/11 (4 ordinals)\n\tNO_PARENTS:  Date/2010/March/11                                   (1 ordinal)\n\tALL_BUT_DIMENSION: Date/2010, Date/2010/March, Date/2010/March/11 (3 ordinals)\n\n\n\nThe aggregation of ALL_PARENTS and ALL_BUT_DIM is the same, but you don't get the count of Date/ with the latter policy.\nThe aggregation of NO_PARENTS is the same as ALL_PARENTS, only you need to do the rollup in the end.\n\nMaybe we should have just ALL and ALL_BUT_DIM? Given the results of NO_PARENTS (not that significant gains), and the complexity involved (i.e. currently only CountingFC supports it) ...\n\nBut I just wanted to clarify the differences, because the ALL_BUT_DIM is not that much different than ALL, except that you'll encode and decode the same ordinal for many documents, so that has got to buy us something ... ",
            "author": "Shai Erera",
            "id": "comment-13561672"
        },
        {
            "date": "2013-01-29T12:12:31+0000",
            "content": "\n\tPatch adds OrdinalPolicy.NO_DIMENSION and modifies CountingListBuilder to discard the last added ordinal (the dimension) in that case.\n\n\n\n\n\tCountingFacetsCollector modified to rollup parents' counts when dimensions are indexed with NO_PARENTS.\n\n\n\n\n\tCategoryListParams.getOrdinals modified to take a String (dimension). The default impl returns DEFAULT_ORDINAL_POLICY and PerDimensionOrdinalPolicy supports returning different policies for different dimensions.\n\n\n\n\n\tOrdinalPolicy.NO_DIMENSION made the default, as usually the count of dimension is not needed by apps.\n\t\n\t\tNote though that when children of the dimension are specified as the root category of the FacetRequest, they will be counted too.\n\t\tFor all practical purposes, NO_DIMENSION and ALL_PARENTS behave the same by that they count whatever is encoded in the counting list, and don't fix parents' counts in the end (nor check if a certain ordinal needs to be counted or not).\n\t\n\t\n\n\n\nAll tests pass, I think this is ready. ",
            "author": "Shai Erera",
            "id": "comment-13565305"
        },
        {
            "date": "2013-01-29T13:35:24+0000",
            "content": "Looking at the patch, I think I might misunderstood something - in the build method, for every category the right policy is checked, but the build itself is per CategoryListParam - so why cant the policy be the same for each CLP? If one wishes to get different policies etc - I think it would be logical to separate them to different clps, and this check should not be performed over each category?\n ",
            "author": "Gilad Barkai",
            "id": "comment-13565359"
        },
        {
            "date": "2013-01-29T14:04:54+0000",
            "content": "The thing is that there are two dimensions here: CategoryListParams and OrdinalPolicy for a category dimension:\n\n\n\tDifferent CLPs are good for when an application has good reasons to group different categories into different category lists, and then at search time request different groups of facets. E.g. an eCommerce application will probably have different facets for Cameras and Shoes, and therefore it would make sense to separate the facets into different lists.\n\n\n\n\n\tHowever, Mike and I saw that when you index hierarchical facets, then indexing them as NO_PARENTS yields better performance than ALL_PARENTS (b/c e.g. less ordinals are read), even when the parents' counts are rolled up in the end.\n\t\n\t\tHaving said that, we also experimented with separating dimensions to separate field (one field per dimension), but that yielded worse results than grouping them together.\n\t\tSo on one hand we want to have different OrdinalPolicy for different dimensions, but on the other hand, still group categories under the same CLP.\n\t\n\t\n\n\n\nWhen I started to work on that issue, I did just like as you suggest \u2013 use PerDimensionIndexingParams, and pass different CLP instances for different dimensions, yet still keep the CLP.field the same for dimensions that \"should go together\".\n\nBut that complicated matters for FacetFields, b/c it first groups all CPs under their respective CLPs, and creates a Map<CategoryListParams,Iterable<CategoryPath>>. Then all the CPs of the same CLP are passed to CountingListBuilder.\n\nIf I wanted to work w/ PerDimensionIndexingParams, I'd need to change FacetFields to map from a String -> (map of CLP -> CP) and then change CountingListBuilder accordingly. Also, CountingFacetsCollector would need to change as well, since currently it assumes a single CLP instance.\n\nIn short, while this is doable, I think it's confusing, and could lead apps to think that if you need different OrdinalPolicy for dimensions, you also need different CLPs, and consequently different fields, which is bad!\n\nSo I think that solution is good \u2013 whoever intends to control OrdinalPolicy, would need to create some Map, so with this approach, he'll create a Map(String,OrdinalPolicy). If he needs both worlds (multiple CLPs AND OrdinalPolicy-ies), then he needs to create two Maps ... doesn't sound a big deal to me. ",
            "author": "Shai Erera",
            "id": "comment-13565385"
        },
        {
            "date": "2013-01-29T14:46:13+0000",
            "content": "Mike and I have been testing some aspects of this issue - we should test some others too and paste all the results here. Here are the scenarios:\n\nALL_BUT_DIMENSION\n\nThis should be better than ALL, since it encodes half the ordinals for flat dimensions.\nThe test would be to index all flat dimensions with ALL (trunk) vs ALL_BUT (patch) and compare times.\n\nPer-Dimension Rollup\n\nThis should be better for when you need to rollup counts for a small dimension (saves iterating on a large counts array).\nThe test would be to:\n\n\n\tIndex all dimensions (flat + hierarchical), so the counts[] is big (2.5M entries)\n\t\n\t\tIndex Date in its own CLP in both cases, the idea is to generate a big taxonomy\n\t\n\t\n\tQuery with a FacetRequest Date/\n\tTrunk would do the full traversal, patch would do the per-dim rollup and hopefully should be better\n\n\n\nPer-Dimension OrdinalPolicy\n\nThe only advantage here is that it lets you index under the same CLP dimensions with different OrdinalPolicy settings.\nTo compare, we'd need to index with trunk the dimensions as ALL or NO, vs patch which can mix between ALL and NO \n(we can discard ALL_BUT) for this test. ",
            "author": "Shai Erera",
            "id": "comment-13565411"
        },
        {
            "date": "2013-01-29T14:48:24+0000",
            "content": "Here's the per-dim-rollup results.  The index has 2 CLPs: one with only Date, the other with username+categories (= many ords, flat), and I facet only on Date CLP.\n\nbase = trunk, comp = per-dim rollup\n\n\n                    Task    QPS base      StdDev    QPS comp     StdDev                Pct diff\n                HighTerm       21.08      (6.9%)       21.26     (5.2%)    0.9% ( -10% -   13%)\n                 MedTerm       50.06      (6.1%)       52.39     (4.4%)    4.6% (  -5% -   16%)\n                 LowTerm       97.70      (4.7%)      110.47     (4.6%)   13.1% (   3% -   23%)\n\n\n\nSo it helps most for queries matching fewer docs since the rollup is a fixed cost in the end ... ",
            "author": "Michael McCandless",
            "id": "comment-13565415"
        },
        {
            "date": "2013-01-29T16:29:09+0000",
            "content": "base = ALL, comp = ALL_BUT; I disabled checking facet counts match in luceneutil because with ALL_BUT the dims have 0 count (expected) but with ALL they have the rolled up count.  Also, I ran on the 5 non-huge flat dims in luceneutil:\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                HighTerm       18.91      (1.4%)       21.32      (2.2%)   12.8% (   9% -   16%)\n                 MedTerm       45.93      (1.2%)       54.08      (1.7%)   17.7% (  14% -   20%)\n                 LowTerm      101.51      (0.5%)      124.79      (1.4%)   22.9% (  20% -   24%)\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13565497"
        },
        {
            "date": "2013-01-29T17:45:08+0000",
            "content": "How can a mess be avoided when allowing different OrdinalPolicies in the same CLP ?\nThere would be ordinals which has the parents, and ordinals that dont? How can the collector or aggregator know which ordinals should be delt with as without parents and which should not?\n ",
            "author": "Gilad Barkai",
            "id": "comment-13565570"
        },
        {
            "date": "2013-01-29T17:51:40+0000",
            "content": "First, look at the patch, there's a test for that .\n\nThe way it works is that we now do per-dimension counts rollup. That is, say that you index the following dimensions under the same CLP: A (NO_PARENTS), B (ALL_PARENTS) and C (ALL_BUT_DIMENSION). When you ask to aggregate all of them then:\n\n\n\tStandardFacetsCollector does not work with NO_PARENTS (not sure if it throws a hard exception now, I'll check). So your only choice is CountingFacetsCollector.\n\n\n\n\n\tCountingFacetsCollector works as follows:\n\t\n\t\tAggregates in a FixedBitSet (one per segment) the matching documents.\n\t\tIt then traverses the counting list and counts all the ordinals that it finds.\n\t\tThen when it computes the facet results, it goes per FacetRequest:\n\t\t\n\t\t\tIf the FR.categoryPath was indexed with NO_PARENTS (\"A\" in our case), it rolls up its ordinals only, not caring about the huge counts[]. See Mike's test above, this general improves the process by a bit.\n\t\t\tOtherwise, there's no more rollup needed. \"B\" would have a count too, while \"C\" count will be 0, and only its children will be counted.\n\t\t\n\t\t\n\t\n\t\n\n\n\nHope that explains it. ",
            "author": "Shai Erera",
            "id": "comment-13565586"
        },
        {
            "date": "2013-01-29T18:01:19+0000",
            "content": "Mike, those are great results (ALL vs ALL_BUT) ... amazing what a change of a flag can do . ",
            "author": "Shai Erera",
            "id": "comment-13565599"
        },
        {
            "date": "2013-01-30T06:30:26+0000",
            "content": "Added an assert to StandardFacetsCollector that none of the requested categories were indexed with NO_PARENTS. FacetsCollector.create() will fail if neither CountingFC nor StandardFC can handle the given search parameters.\n\nThis is temporary until we finish with LUCENE-4610. ",
            "author": "Shai Erera",
            "id": "comment-13566213"
        },
        {
            "date": "2013-01-30T13:54:15+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1440416\n\nLUCENE-4715: Add OrdinalPolicy.ALL_BUT_DIMENSION ",
            "author": "Commit Tag Bot",
            "id": "comment-13566487"
        },
        {
            "date": "2013-01-30T14:01:47+0000",
            "content": "Committed to trunk and 4x. I don't think there's much value in the last test case (measuring the impact of allowing per-dimension OrdinalPolicy). ",
            "author": "Shai Erera",
            "id": "comment-13566490"
        },
        {
            "date": "2013-01-30T14:06:26+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1440419\n\nLUCENE-4715: Add OrdinalPolicy.ALL_BUT_DIMENSION ",
            "author": "Commit Tag Bot",
            "id": "comment-13566500"
        },
        {
            "date": "2013-05-10T10:33:12+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653858"
        }
    ]
}