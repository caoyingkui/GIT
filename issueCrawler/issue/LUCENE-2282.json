{
    "id": "LUCENE-2282",
    "title": "Expose IndexFileNames as public, and make use of its methods in the code",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "IndexFileNames is useful for applications that extend Lucene, an in particular those who extend Directory or IndexWriter. It provides useful constants and methods to query whether a certain file is a core Lucene file or not. In addition, IndexFileNames should be used by Lucene's code to generate segment file names, or query whether a certain file matches a certain extension.\n\nI'll post the patch shortly.",
    "attachments": {
        "LUCENE-2282.patch": "https://issues.apache.org/jira/secure/attachment/12436762/LUCENE-2282.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-02-23T21:10:49+0000",
            "content": "It seems to me that identifying only core index files conflicts with the idea\nof pluggable index formats.  Presumably plugins would use their own file\nextensions.  Would these belong to the index, according to a detector based\noff of IndexFileNames?  Presumably not, which would either limit the\nusefulness of such a utility, or outright encourage anti-patterns such as a\nsweeper that zaps files created by plugins because they aren't \"core Lucene\"\nenough.\n\nAlso, are temporary files \"core Lucene\"?  Lockfiles?  Only sometimes?\n\nWhat are the applications that we are trying to support by exposing this API? ",
            "author": "Marvin Humphrey",
            "id": "comment-12837446"
        },
        {
            "date": "2010-02-23T21:20:24+0000",
            "content": "Patch provides:\n\n\tIFN constants and methods as public\n\tsegmentFileName concatenates the name and extension w/ '.', using a StringBuilder. Using SB is a minor efficiency, and since the + operator on strings allocate it anyway, I figure we'd better allocate it directly, especially when two + operators are involved.\n\tmatchesExtension checks whether a filename matches an extension\n\tfileNameFromGeneration adds the '.' when neccessary.\n\tCore code does not concatenate file, '.' and extension on its own, but uses IFN.\n\n\n\nAll core tests pass. I have a local problem w/ contrib tests (the Analyzers data dir is locked for some reason and I cannot unlock it), but I see no reasons for them to fail.\n\nIf this can go out in 3.0.2 instead of waiting for 3.1, then all the better. ",
            "author": "Shai Erera",
            "id": "comment-12837451"
        },
        {
            "date": "2010-02-23T21:29:18+0000",
            "content": "What are the applications that we are trying to support by exposing this API?\n\nAny application that extends IW, or provide its own Directory implementation, and wants to reference Lucene's file extensions properly (i.e. not by putting its code under o.a.l.index or hardcoding \".del\" as its deletions file) will benefit from making it public.\nThe class already exists, and declares the right constants and methods. All I want is to expose it as public. This information is not hidden, it's out there. We're just making it easier for apps to reference it.\n\nLike Mike mentioned on the java-dev thread http://old.nabble.com/IndexFileNames-td27699103.html, he exposes it (or a variant) on the flex branch as public, because classes outside the 'index' package need to reference it. Indeed once Flex is out, that file will need to change or extend to accommodate pluggable index formats / files, but that's not the matter of this issue. This issue is just about exposing an already existing class as public instead of package-private for convenience ... ",
            "author": "Shai Erera",
            "id": "comment-12837455"
        },
        {
            "date": "2010-02-23T21:31:03+0000",
            "content": "Forgot to tag IFN as @lucene.internal ",
            "author": "Shai Erera",
            "id": "comment-12837456"
        },
        {
            "date": "2010-02-23T23:07:16+0000",
            "content": "> Any application that extends IW, or provide its own Directory\n> implementation, and wants to reference Lucene's file extensions properly\n> (i.e. not by putting its code under o.a.l.index or hardcoding \".del\" as its\n> deletions file) will benefit from making it public.\n\n> Forgot to tag IFN as @lucene.internal \n\n?\n\nIf the class is tagged as \"internal\", then external applications like the one \nyou describe above aren't supposed to use it, right?\n\nBut I don't really care about whether this goes into Lucene.  Go ahead, make\nit fully public and omit the \"internal\" tag.  Not my problem. \n\nThe thing is, I really don't understand what kind of thing you want to do.\nAre you writing your own deletions files?\n\nI'm trying to understand because the only use cases I can think of for this\naren't compatible with index pluggability, which is a high priority for Lucy.\n\n\n\tSweep \"non-core-Lucene files\" to \"clean up\" an index.\n\tGather up \"core-Lucene files\" for export.\n\tAudit \"core-Lucene files\" to determine whether the index is in a valid\n      state.\n\tDifferentiate between \"core-Lucene and \"non-core-Lucene\" files when\n      writing a compound file.\n\n\n\nMaybe there's something I haven't thought of, though.  Why do you want to\n\"reference Lucene's file extensions properly\"?  Once you've identified\nidentified which files are \"core Lucene\" and which files aren't, what are you\ngoing to do with them?\n ",
            "author": "Marvin Humphrey",
            "id": "comment-12837499"
        },
        {
            "date": "2010-02-24T04:35:53+0000",
            "content": "The thing is, I really don't understand what kind of thing you want to do.\n\nConsider a variation of FileSwitchDirectory which someone wants to write. Extensions xyz, abc go do directory 1 and def got do directory 2. That someone will want to reference Lucene extensions in order to achieve that. FSD only takes care of extensions, but someone might need to work on prefixes of files as well.\nYou can say \"that class itself should not care about Lucene's extensions, it should get the extensions/prefixes in a ctor\" ...\n\nWell ... let's take FileSwitchDirectory (which is a core Lucene class) and say I want to instantiate it. I need to pass file extensions. How do I pass the .del file as an extension? Do I hard code it to \".del\" (or just \"del\"?) or, or do I put that code in o.a.l.store just for that?  Or ... we make IndexFileNames publc and I can happily and safely reference it.\nBTW, I'm writing this from a computer w/o the Lucene code \u2013 I wonder how FSD is tested, is the test in o.a.l.index because it references IFN or in o.a.l.store because it tests FSD? If it's the former, then I (usually) think it points at a problem in the design.\n\nThe @lucene.internal tag gives us exactly that freedom. Instead of me putting code in o.a.l.* (and feel like I'm dong something wrong, and make my code look wrong), I can put it in my package but know I'm risking the chance a certain constant or method impl will change in the future. I've already took that risk when I chose to put my code in o.a.l.* so I prefer to take that risk and not make my code look patchy.\n\nI, personally, don't mind what Lucene's back-compat policy is. Whenever I upgrade my code to a new Lucene version, I re-compile anything. I am happy to get rid of deprecated API, I am happy to take advantage of new, more efficient API, and I wouldn't care if a @lucene.internal class changed, as long as it's documented in the \"Changes in back-compat\" section in CHANGES, as a FYI - not because it's a change in the policy, so I can read about it quickly (that's the first section I usually check).\n\nThat class is just a reference to Lucene's core files. If you want to write that 'Sweep' thing, you might benefit from knowing what is a core Lucene file and delegate the sweep task to a core Lucene instance, while sweeping the rest of the files by another instance (which created them?). If Lucene core will create files w/ other names/extensions, then I believe this class (IFN) should be changed entirely, but I don't think making it public blocks any of these changes, as long as it's tagged by @lucene.internal. ",
            "author": "Shai Erera",
            "id": "comment-12837624"
        },
        {
            "date": "2010-02-24T06:36:37+0000",
            "content": "Updated TestFileSwitchDirectory to use the constants instead of hard coding \"fdt\" and \"fdx\". It couldn't have done that because IFN was package-private, which shows the problem with it. ",
            "author": "Shai Erera",
            "id": "comment-12837652"
        },
        {
            "date": "2010-02-24T16:56:24+0000",
            "content": "Patch looks good Shai!\n\nBut I don't think we should back port to 3.0.2 \u2013 it's non-trivial\nenough that there is some risk?\n\nAs the API is now marked @lucene.internal, and it'll only be very\nexpert usage, I'm not as concerned as Marvin is about the risks of\neven exposing this.  Also, even with flex, a good number of Lucene's\nindex files are not under codec control (codec only touches postings\nfiles \u2013 .tis, .tii, .frq, .prx for the standard codec).  But I do\nagree it's not ideal that the knowledge of file extensions is split\nacross this class and the codec.  The IndexFileNameFilter in flex now\ntakes a Codec as input, to make up for that... but IndexFileNames just\nhas a NOTE at the top stating the limitation. ",
            "author": "Michael McCandless",
            "id": "comment-12837879"
        },
        {
            "date": "2010-02-24T17:00:17+0000",
            "content": "But I don't think we should back port to 3.0.2\n\nOk, I can live w/ 3.1, as long as it's not released at the end of 2010. I can for now put that part of my code in o.a.l.index, until 3.1 is out.\n\nAs I wrote in the TestFileSwitchDirectory comment, this IMO has to go in, because otherwise it would make the code of users of FSD fragile (potentially).\n\nThanks for looking at this ! ",
            "author": "Shai Erera",
            "id": "comment-12837880"
        },
        {
            "date": "2010-02-24T17:03:09+0000",
            "content": "But I don't think we should back port to 3.0.2 - it's non-trivial enough that there is some risk?\n\nPlease no backport to 3.0.2, its an API change. And we are not sure if there will be ever a 3.0.2. BTW: Version 3.0.1 comes out latest on Friday, will appear on the mirrors soon! ",
            "author": "Uwe Schindler",
            "id": "comment-12837883"
        },
        {
            "date": "2010-02-24T20:08:41+0000",
            "content": "> As the API is now marked @lucene.internal, and it'll only be very\n> expert usage, I'm not as concerned as Marvin is about the risks of\n> even exposing this. \n\nUm, the only possible concerns I could have had were regarding public exposure\nof this API.  If it's marked as internal, it's an implementation detail.\nWhether or not the dot is included in internal-use-only constant strings isn't\nsomething I'm going to waste a lot of time thinking about. \n\nSo now, not only do I really, really not care whether this goes in, I have no\nqualms about it either.\n\nHaving users like Shai who are willing to recompile and regenerate to take\nadvantage of experimental features is a big boon, as it allows us to test\ndrive features before declaring them stable.  Designing optimal APIs without\nusability testing is difficult to impossible. ",
            "author": "Marvin Humphrey",
            "id": "comment-12837988"
        },
        {
            "date": "2010-02-26T16:53:09+0000",
            "content": "Thanks Shai! ",
            "author": "Michael McCandless",
            "id": "comment-12838931"
        }
    ]
}