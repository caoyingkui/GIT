{
    "id": "SOLR-3484",
    "title": "LogUpdateProcessor throws ConcurrentModificationException under multi-threading calls",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "Using the LogUpdateProcessor in a singleton chain for concurrent processing throws exception. The issue has been reported in SOLR-2694 (closed), and an unoffical patch can be found in related bug-id SOLR-2804 patch dated 1/1/12.\n\nIf the patch won't become official for LogUpdateProcessor, suggested to have new class \"ConcurrentLogUpdateProcessorFactory\" to address the thread safe issue.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13282795",
            "date": "2012-05-24T21:42:52+0000",
            "content": "See comments in SOLR-2694, particularly \"Mikhail Khludnev added a comment - 24/May/12 07:15\" (the author of hte patch in question) in direct response to comment from creator of this issue.\n\nAll of the UpdateProcessor Factories are thread safe \u2013 but NONE of the UpdateRequestProcessor classes returned by those factories are thread safe.  UpdateRequestProcessors are designed to be used in the context of a single Solr request (hence the reason you need a SolrQueryRequest/SolrQueryResponse to get an instance).  If code interacting with an UpdateRequestProcessor is multi-threaded, then that client code needs to synchronize it's use of the UpdateRequestProcessor.\n\n(This was the fundamental problem in SOLR-2804: multi-threaded DIH code was not using the UpdateRequestProcessor in a thread-safe manner).\n\nAdding a \"ConcurrentLogUpdateRequestProcessor\" will not magically make it safe for multi-threaded code to call methods on an UpdateRequestProcessor chain \u2013 because any of the other UpdateRequestProcessors in that chain are also likley to break from concurrent usage by multiple threads.\n\nIf you have custom code that uses UpdateRequestProcessors in a way that you believe is valid, and you still see a bug, then you need to provide a test case demonstrating your usage and the bug it produces \u2013 based on comments posted here and in SOLR-2694 it seems like the usage being described is not valid, because it assumes any and all UpdateRequestProcessors are stateless and multi-thread-safe, which is not true.  trivial example: RunUpdateProcessorFactory maintains un-synchronized state about uncommited changes for dealing with the transaction log. "
        },
        {
            "author": "Aaron Simmons",
            "id": "comment-13290348",
            "date": "2012-06-06T19:33:51+0000",
            "content": "I have read the related tickets [SOLR-2694, SOLR-2804, SOLR-2694] .. and I still think this is a bug in LogUpdateProcessor, or maybe SolrWriter's usage of LogUpdateProcessor?!?\n\nMy environment is a Solr Cloud instance with 21 nodes.  (solr-spec-version=4.0.0.2012.03.14.16.31.07)\n\nWhen we kicked off a regular full-import of a data source (~5 million rows) .. it starts off fine, but then the import crashes.  Looking over the log files, I find this on one of the nodes:\n\nINFO: [core_NAME_slice11_shard1] webapp=/solr path=/select params=\n{command=status&qt=/dataimport}\n status=0 QTime=1\nJun 5, 2012 7:24:22 PM org.apache.solr.handler.dataimport.SolrWriter upload\n\nWARNING: Error creating document : SolrInputDocument[\n{ --LOTS OF DATA HERE-- }\n]\njava.util.ConcurrentModificationException\n        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)\n        at java.util.HashMap$KeyIterator.next(HashMap.java:828)\n        at org.apache.solr.common.util.IteratorChain.next(IteratorChain.hava:73)\n        at org.apache.solr.common.params.ModifiableSolrParams.add(ModifiableSolrParams.java:116)\n        at org.apache.solr.common.params.ModifiableSolrParams.<init>(ModifiableSolrParams.java:56)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:268)\n        at org.apache.solr.update.processor.LogUpdateProcessor.processAdd(LogUpdateProcessor.java:115)\n        at org.apache.solr.handler.dataimport.SolrWriter.upload(SolrWriter.java:70)\n        at org.apache.solr.handler.dataimport.DataImportHandler$1.upload(DataImportHandler.java:289)\n        at org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:722)\n        at org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:618)\n        at org.apache.solr.handler.dataimport.DocBuilder.doFullDump(DocBuilder.java:324)\n        at org.apache.solr.handler.dataimport.DocBuilder.execute(DocBuilder.java:222)\n        at org.apache.solr.handler.dataimport.DataImporter.doFullImport(DataImporter.java:382)\n        at org.apache.solr.handler.dataimport.DataImporter.runCmd(DataImporter.java:450)\n        at org.apache.solr.handler.dataimport.DataImporter$1.run(DataImporter.java:431)\n\nWe are using the 'out of the box' DataImportHandler, connecting to a SQL Server, etc.  This seems like a real issue/bug that in org.apache.solr.update.processor.LogUpdateProcessor.\n\nI saw the patch from SOLR-2804 on 1/1/2012 ... and this seems like a valid fix.  But some people made comments and indicated it was not a valid fix, perhaps communicating that it's not a real problem?  And SOLR-2804 was closed with \"Won't Fix\" ... and this bug report is marked as \"Not a Problem\".\n\nI see this as a very real problem .. but maybe I'm not understanding something.  Thoughts anyone? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13290380",
            "date": "2012-06-06T20:43:41+0000",
            "content": "Aaron Simmons, particularly your problem caused by using threads in DIH. DIH shares single updateProcessorsChain among threads, that's wrong, those chains are single thread objects, ever!\nBeside of this minor issue (which can be solved by log configuration), it's worth to mention that DIH worked incorrectly in multiple threads - I suppose you have more significant problem with incorrect data import. AFAIK fixed version is exist in 3.6.x branch, and threads were removed in 4.0 aka trunk. \n\nChris Hostetter (Unused) I'm sorry for my misguiding SOLR-2804 patches. I removed them.   "
        }
    ]
}