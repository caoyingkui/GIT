{
    "id": "SOLR-12182",
    "title": "Can not switch urlScheme in 7x if there are any cores in the cluster",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.0,                                            7.1,                                            7.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I was trying to enable TLS on a cluster that was already in use i.e. had existing collections and ended up with down cores, that wouldn't come up and the following core init errors in the logs:\n\norg.apache.solr.common.SolrException:org.apache.solr.common.SolrException: replica with coreNodeName core_node4 exists but with a different name or base_url.\n\nWhat is happening here is that the core/replica is defined in the clusterstate with the urlScheme as part of it's base URL e.g.\u00a0\"base_url\":\"http:hostname:port/solr\".\n\nSwitching the urlScheme in Solr breaks this convention as the host now uses HTTPS instead.\n\nActually, I ran into this with an older version because I was running with legacyCloud=false and then realized that we switched that to the default behavior only in 7x i.e while most users did not hit this issue with older versions, unless they overrode the legacyCloud value explicitly, users running 7x are bound to run into this more often.\n\nSwitching the value of legacyCloud to true, bouncing the cluster so that the clusterstate gets flushed, and then setting it back to false is a workaround but a bit risky one if you don't know if you have any old cores lying around.\n\nIdeally, I think we shouldn't prepend the urlScheme to the base_url value and use the urlScheme on the fly to construct it.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}