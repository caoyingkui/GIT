{
    "id": "SOLR-7765",
    "title": "TokenizerChain methods may return null depending on how constructor is called -- causes NPE in luke request handler",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "5.2.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "TokenizerChain created using 2-arg constructor has null in charFilters, so LukeRequestHandler throws NPE on iterating it.\n\nTokenizerChain constructor's should be hardened to do explicit null checks, throwing early NPE where appropriate (tokenizer factory), or initializing internal arrays to have 0 length when optional (factories for char filters and token filters)",
    "attachments": {
        "SOLR-7765.patch": "https://issues.apache.org/jira/secure/attachment/12745357/SOLR-7765.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-08T16:46:15+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user grossws opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/185\n\n    Fix NPE in LukeRequestHandler in getAnalyzerInfo\n\n    NPE in thrown when luke tries to iterate `TokenizerChain#getCharFilterFactories()`\n    which is null if 2-arg `TokenizerChain` constructor is used.\n\n    Fixes SOLR-7765\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/grossws/lucene-solr fix-solr-7765\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/185.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #185\n\n\ncommit 7a0f08915e73f0ef28d4b9af8bd613612ca39946\nAuthor: Konstantin Gribov <grossws@gmail.com>\nDate:   2015-07-08T16:30:04Z\n\n    Fix NPE in LukeRequestHandler in getAnalyzerInfo\n\n    NPE in thrown when luke tries to iterate `TokenizerChain#getCharFilterFactories()`\n    which is null if 2-arg `TokenizerChain` constructor is used.\n\n    Fixes SOLR-7765\n\n ",
            "id": "comment-14618905"
        },
        {
            "date": "2015-07-15T00:13:00+0000",
            "author": "Hoss Man",
            "content": "Konstantin: i tried to whip up a quick patch to demonstrate the bug you were fixing (we always like to have test cases to help minimize the chance of regression in bug fixes) but i couldn't reproduce the problem (ie: the test passed)\n\ncan you please elaborate on the steps to reproduce in order to trigger an NPE in the Luke handler? ",
            "id": "comment-14627321"
        },
        {
            "date": "2015-07-15T13:26:16+0000",
            "author": "Konstantin Gribov",
            "content": "I am not familiar with lucene-solr test suite. It seems that TokenizerChain was created standard way from schema (via FieldTypePluginLoader, line 403@lucene_solr_5_2_1), so it was created with \n\nnew TokenizerChain(charFilters.toArray(new CharFilterFactory[charFilters.size()]), tokenizers.get(0), filters.toArray(new TokenFilterFactory[filters.size()]));\n\n \nwhich is three-arg constructor with non-null first argument (it will be empty array when charFilters is empty).\n\nI'll add a test to my PR. ",
            "id": "comment-14628046"
        },
        {
            "date": "2015-07-15T15:51:00+0000",
            "author": "Konstantin Gribov",
            "content": "Updated PR with test case ",
            "id": "comment-14628258"
        },
        {
            "date": "2015-07-20T22:40:01+0000",
            "author": "Hoss Man",
            "content": "I'll add a test to my PR.\n\nThanks!\n\nI missunderstood what you ment before, but with the testcase you provided it all makes sense.\n\nIn my opinion, the root bug here is that TokenizerChain should be more explicit about what is allowed in it's construtor, and more resilient to null args when things are optional \u2013 that way callers like LukeAdminHandler don't have to constantly do null checks.\n\nThe attached path fixes what i consider the root of the bug and gets your test to pass w/o modifying LukeAdminHandler.  It also adds more randomization to your test to cover more permutations of options, and updates MultiTermTest to account for the improved behavior of getCharFilterFactories() (which you can see from looking at that test was annoying inconsistent before depending on what analyzer was used and where it came from)\n\nI'm going to do a quick audit of all TokenizerChain clients to see where else null checks are currently be doing that can be optimized away with this fix and post an updated patch.\n ",
            "id": "comment-14634196"
        },
        {
            "date": "2015-07-21T00:27:20+0000",
            "author": "Hoss Man",
            "content": "I'm going to do a quick audit of all TokenizerChain clients to see where else null checks are currently be doing that can be optimized away with this fix and post an updated patch.\n\nattached. ",
            "id": "comment-14634329"
        },
        {
            "date": "2015-07-21T12:44:37+0000",
            "author": "Konstantin Gribov",
            "content": "Fixing this in TokenizerChain itself seems better to me. \n\nIs there any reason to use reversed order in ifs (like if (0 < cfiltfacs.length))? It looks quite strange since most of lucene & solr code use more usual if (var > 0) style. ",
            "id": "comment-14635043"
        },
        {
            "date": "2015-07-21T16:49:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1692170 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1692170 ]\n\nSOLR-7765: Hardened the behavior of TokenizerChain when null arguments are used in constructor. This prevents NPEs in some code paths. ",
            "id": "comment-14635385"
        },
        {
            "date": "2015-07-21T17:20:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1692174 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1692174 ]\n\nSOLR-7765: Hardened the behavior of TokenizerChain when null arguments are used in constructor. This prevents NPEs in some code paths. (merge r1692170) ",
            "id": "comment-14635438"
        },
        {
            "date": "2015-07-21T17:31:03+0000",
            "author": "Hoss Man",
            "content": "Thanks for rasiing this issue and helping out with the tests Konstantin,\n\nIs there any reason to use reversed order in ifs...\n\nIt's just a defensive coding habbit i developed from doing a lot of C and perl coding in my early years as a developer ... trained my brain to default to putting constants on the left in comparisons in cause i misstype \"=\" instead of \"==\" or \"<=\"  ",
            "id": "comment-14635444"
        },
        {
            "date": "2015-07-22T17:53:36+0000",
            "author": "Konstantin Gribov",
            "content": "I understand you point, I write in C time to time. My point is that it leads to inconsistency in code style without any profit (like eliminating error-prone constructs in C). It makes no sense in java, since for types other than boolean it will produce compile-time error (because type incompatibility) and for boolean ifs will look like if (val) or if (!val). It seems that there's no place to make this types of error in java. ",
            "id": "comment-14637291"
        },
        {
            "date": "2015-07-23T13:58:42+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user grossws closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/185 ",
            "id": "comment-14638830"
        },
        {
            "date": "2015-07-23T14:02:21+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user grossws commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/185#issuecomment-124117829\n\n    Fixed by @hossman in SOLR-7765 ",
            "id": "comment-14638840"
        },
        {
            "date": "2015-08-26T13:06:04+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713206"
        }
    ]
}