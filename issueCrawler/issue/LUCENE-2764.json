{
    "id": "LUCENE-2764",
    "title": "Allow tests to use random codec per field",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "general/test"
        ],
        "type": "Test",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Since we now have a real per field codec support we should enable to run the tests with a random codec per field. When I change something related to codecs internally I would like to ensure that whatever combination of codecs (except of preflex) I use the code works just fine. I created a RandomCodecProvider in LuceneTestCase that randomly selects the codec for fields when it sees them the first time. I disabled the test by default to leave the old randomize codec support in as it was / is.",
    "attachments": {
        "LUCENE-2764.patch": "https://issues.apache.org/jira/secure/attachment/12459630/LUCENE-2764.patch",
        "LUCENE-2764_alt.patch": "https://issues.apache.org/jira/secure/attachment/12459944/LUCENE-2764_alt.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-11-15T20:11:17+0000",
            "content": "here is a first patch - all tests pass with it enabled ",
            "author": "Simon Willnauer",
            "id": "comment-12932171"
        },
        {
            "date": "2010-11-15T20:23:06+0000",
            "content": "Simon, just an idea:\n\ncan we give the randomprovider a special -D value, such as 'randomPerField', and enable this by default?\nWe should set the value to 'randomPerField' both in lucenetestcase (for IDEs) and in common-build.xml/etc (for ANT) to be consistent.\n\nadditionally, is it possible to give this thing a toString() or similar, to dump out the field->codec mapping?\nThis would be useful when tests fail: the 'global' codec is currently printed in the @afterClass of LuceneTestCase:\n\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n\n ",
            "author": "Robert Muir",
            "id": "comment-12932177"
        },
        {
            "date": "2010-11-15T22:09:08+0000",
            "content": "This is a great idea!  Makes our tests even more random... though we may hit file descriptor limits in some tests... ",
            "author": "Michael McCandless",
            "id": "comment-12932223"
        },
        {
            "date": "2010-11-16T15:49:43+0000",
            "content": "Here is a new patch incorporating Roberts ideas. This patch enables the randomPerFieldCodec by default unless there is a explicit test codec set.\n\nEventually  we would want to enable users to plug in their codecs into the RandomCodecProvider to test it against all our testcases. I think that should be a separate issue though.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12932507"
        },
        {
            "date": "2010-11-16T17:50:26+0000",
            "content": "Eventually we would want to enable users to plug in their codecs into the RandomCodecProvider to test it against all our testcases. I think that should be a separate issue though.\n\nI don't think we should do this.\nOur src/test shouldn't be a setup for people to test arbitrary extensions to lucene such as Directories or Codecs.\nIf it happens to work that they can simply edit a file and test these things, thats great, but we shouldnt officially support this in src/test.\nsrc/test is no-holds-barred just doing the best we can to test lucene itself... it should stick to this level of scope.\n\nif we want to provide mechanisms to test arbitrary user extensions it should be supported and documented in src/java like LockStressTest.  ",
            "author": "Robert Muir",
            "id": "comment-12932559"
        },
        {
            "date": "2010-11-16T18:39:32+0000",
            "content": "if we want to provide mechanisms to test arbitrary user extensions it should be supported and documented in src/java like LockStressTest.\n\ngood point I guess you are right.\n\nanyway I think this is ready to be committed though - I will hold off a little and commit if nobody objects...\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12932591"
        },
        {
            "date": "2010-11-16T18:46:21+0000",
            "content": "anyway I think this is ready to be committed though - I will hold off a little and commit if nobody objects...\nactually this doesn't use PreFlexRW since some tests don't like it - yet I think we need some way to exclude a codec within a testcase so that testcases that don't work with say PreFlex that this codec is not used within that testcase. \n ",
            "author": "Simon Willnauer",
            "id": "comment-12932593"
        },
        {
            "date": "2010-11-16T18:54:40+0000",
            "content": "Well, I remember now why I didn't use PreFlexRW for perFieldRandom testing. The problem is if we have IW writing field A with codec Standard then open a new IW with field A using PreFlexRW we get problems with the comparator if those segments are merged though.  So maybe we should make the whole thing disabled by default. and only run it optionally.  ",
            "author": "Simon Willnauer",
            "id": "comment-12932600"
        },
        {
            "date": "2010-11-17T11:26:56+0000",
            "content": "The problem is if we have IW writing field A with codec Standard then open a new IW with field A using PreFlexRW we get problems with the comparator if those segments are merged though.\n\nHmm this should be OK...\n\nThe PreFlexRW codec has a sneaky \"impersonation\" layer (test only)\nthat attempts to figure out which term comparator it's supposed to be\nusing when something is reading the segment.  It sounds like that\nlayer isn't being smart enough now.\n\nI think we could fix it \u2013 really it just needs to know which codec is\n\"writing\".  If it's PreFlexRW that's writing then it needs to use the\nlegacy sort order; else, unicode. ",
            "author": "Michael McCandless",
            "id": "comment-12932910"
        },
        {
            "date": "2010-11-17T18:51:44+0000",
            "content": "Here is a new patch that uses PreFlexRW in the RandomCodecProvider and all tests pass. I had to tell the backwards tests to use the default CodecProvider since otherwise the test will fail if some PreFlex PreFlexRW segments are merged in weird order. \n\nfeedback welcome ",
            "author": "Simon Willnauer",
            "id": "comment-12933079"
        },
        {
            "date": "2010-11-18T09:11:22+0000",
            "content": "another iteration including suggestions from robert (thanks now that I get your point it makes lots of sense ) to either run Random-PerField (without PreFlexRW) OR an PreFlex-Only codec provider randomly. \n\n ",
            "author": "Simon Willnauer",
            "id": "comment-12933368"
        },
        {
            "date": "2010-11-18T14:54:49+0000",
            "content": "Simon looks good.\n\nthis way, we randomly emulate working with lucene 3.0 indexes in our test, which are always completely preflex codec.\n\nthe patch looks good to me (i would fix the RAMDOM spelling to RANDOM in that one place, thats all).\n\nIt would probably be good to get Mike to check that \"impersonation\" is working [this is the whole business of how we use preflex-rw for writing but preflex for reading and they share the same name]. I think at one time, maybe for about 5 minutes i understood how this worked before, but i lost it. ",
            "author": "Robert Muir",
            "id": "comment-12933442"
        },
        {
            "date": "2010-11-18T14:55:24+0000",
            "content": "s/TEST_RAMDOM_CODEC_PER_FIELD/TEST_RANDOM_CODEC_PER_FIELD ",
            "author": "Simon Willnauer",
            "id": "comment-12933443"
        },
        {
            "date": "2010-11-18T17:10:23+0000",
            "content": "Patch looks great Simon!  Since preflexrw is now \"all or none\" we don't need any changes to the impersonation logic... ",
            "author": "Michael McCandless",
            "id": "comment-12933480"
        },
        {
            "date": "2010-11-18T17:29:49+0000",
            "content": "Committed revision 1036543 ",
            "author": "Simon Willnauer",
            "id": "comment-12933493"
        },
        {
            "date": "2010-11-18T18:41:16+0000",
            "content": "I'm reopening as there are some problems... ill back out simon's patch and try to suggest some modifications\nto fix the build but also improve reproducibility, etc. ",
            "author": "Robert Muir",
            "id": "comment-12933514"
        },
        {
            "date": "2010-11-18T21:11:36+0000",
            "content": "ok I think i reworked most of the problems: impersonation problems, etc.\n\npatch is a bit messy probably but i think the logic is correct.\n\nyou can give it a try with 'ant test' (it changes a default of -Dtests.codec=randomPerField) ",
            "author": "Robert Muir",
            "id": "comment-12933565"
        },
        {
            "date": "2010-11-18T21:14:47+0000",
            "content": "ok after working on this (and running the tests over and over again), i just hit a non-reproducible test fail.\n\nthis stuff is really complex, we should really consider whether we should do this. ",
            "author": "Robert Muir",
            "id": "comment-12933567"
        },
        {
            "date": "2010-11-19T09:54:18+0000",
            "content": "ok after working on this (and running the tests over and over again), i just hit a non-reproducible test fail.\nrobert I think your patch looks good though...\n\nwhat kind of error did you hit? can you share?\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12933754"
        },
        {
            "date": "2010-11-19T19:05:02+0000",
            "content": "New version of this patch... there was a sneaky problem because IndexWriterConfig had a final static CodecProvider default, which held onto the wrong CodecProvider instance and caused tricky test failures. ",
            "author": "Michael McCandless",
            "id": "comment-12933919"
        },
        {
            "date": "2010-11-19T21:17:45+0000",
            "content": "Nice find Mike!\n\nI think this was a major cause of the problems! ",
            "author": "Robert Muir",
            "id": "comment-12933985"
        },
        {
            "date": "2010-11-20T15:07:10+0000",
            "content": "Nice find Mike!\noh man good catch \n\nthanks for diggin ",
            "author": "Simon Willnauer",
            "id": "comment-12934151"
        }
    ]
}