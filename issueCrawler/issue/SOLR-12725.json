{
    "id": "SOLR-12725",
    "title": "ParseDateFieldUpdateProcessorFactory should reuse ParsePosition",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "ParseDateFieldUpdateProcessorFactory.parseInstant repeatedly calls all configured date parsers (DateTimeFormatter-s) for each incoming date-like field. However, it uses DateTimeFormatter.parse(dateStr) method that needs to allocate a throwaway instance of ParsePosition, instead of DateTimeFormatter.parse(dateStr, parsePosition).\n\nJavadocs for this method suggest reusing (and reseting) a single instance of ParsePosition for multiple calls in order to reduce object allocations.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-09-05T20:27:34+0000",
            "content": "+1.\n\nWe might also want to keep track of which pattern last matched for the field we are currently parsing. \u00a0I surmise that the format is usually the same, and if it's down the list then we'll waste a bunch of failed attempts that are unlikely to match. \u00a0Although there is some risk that it's wrong, and it's possible the formats might be written in a way that is order-dependent, and thus could produce a different result based on the sequence of document's values. \u00a0I'm not sure if it's worth worrying about that, or what the mitigation might be. ",
            "author": "David Smiley",
            "id": "comment-16604902"
        },
        {
            "date": "2018-09-17T21:59:13+0000",
            "content": "We might also want to keep track of which pattern last matched for the field we are currently parsing.\nI like that idea, but it seems a lot more involved then just re-using a single ParsePosition repeatedly for a single input string? should probably be it's own issue?\nAlthough there is some risk that it's wrong, and it's possible the formats might be written in a way that is order-dependent, and thus could produce a different result based on the sequence of document's values.\nIIUC you seem to be theorizing that by re-using a single ParsePosition, we might wind up in situations where a parser early in the list leaves the ParsePosition in a state that causes a parser laterin the list to produce different results then if it was used on it's own ... that would seem like a straight up bug to me \u2013 if we are going to re-use ParsePosition objects, then it seems like we should do so solely to avoid the extra object creation \u2013 calling {setIndex(0)} before every parse call (and checking that the full string was consumed after every parse call) ",
            "author": "Hoss Man",
            "id": "comment-16618201"
        },
        {
            "date": "2018-09-18T02:27:38+0000",
            "content": "I like that idea, but it seems a lot more involved then just re-using a single ParsePosition repeatedly for a single input string? should probably be it's own issue?\n\nIt's not an either-or ....   quoting myself \"we might also\" .  Yes perhaps a different issue though I don't care either way.\n\nIIUC you seem to be theorizing that by re-using a single ParsePosition ...\n\nNo; my idea has nothing to do with ParsePosition.  It's simply about which index into the list of formats do you start attempting to see if it matched.  It'd loop back to the first and ultimately try them all if need be. ",
            "author": "David Smiley",
            "id": "comment-16618398"
        },
        {
            "date": "2018-09-18T15:17:20+0000",
            "content": "The scope of this issue was just to avoid unnecessary object creation - reusable instance of ParsePosition will have to be reset between reuses.\n\nSince URP instances are created per request I could see some benefit in optimizing the scanning order of the formats - but this may be tricky to get right. If there are eg. two or more formats that could match input values but the user's preference is for the first one on the list - with a document that failed the top formats but matched any subsequent format the processing could get stuck on that format for other documents too, even though it's not the most preferred format... ",
            "author": "Andrzej Bialecki",
            "id": "comment-16619265"
        },
        {
            "date": "2018-10-03T10:17:31+0000",
            "content": "Thinking more about this, I suspect we might get more benefit from a simple LRU caching - then at least for updates that have the same dateStr, either across different fields or across different documents, we could skip parsing altogether at the cost of some memory and LRU cache operations... but this too is outside the scope of this issue. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16636745"
        },
        {
            "date": "2018-10-03T11:59:19+0000",
            "content": "Commit eba7bedadf65cda114544d2495cf264065efa7ab in lucene-solr's branch refs/heads/master from Andrzej Bialecki\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eba7bed ]\n\nSOLR-12725: ParseDateFieldUpdateProcessorFactory should reuse ParsePosition. ",
            "author": "ASF subversion and git services",
            "id": "comment-16636869"
        }
    ]
}