{
    "id": "SOLR-6307",
    "title": "Atomic update remove does not work for int array or date array",
    "details": {
        "affect_versions": "4.9",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Try to remove an element in the string array with curl:\n\n\ncurl http://localhost:8080/update\\?commit\\=true -H 'Content-type:application/json' -d '[{ \"attr_birth_year_is\": { \"remove\": [1960]},  \"id\": 1098}]'\n\ncurl http://localhost:8080/update\\?commit\\=true -H 'Content-type:application/json' -d '[{\"reserved_on_dates_dts\": {\"remove\": [\"2014-02-12T12:00:00Z\", \"2014-07-16T12:00:00Z\", \"2014-02-15T12:00:00Z\", \"2014-02-21T12:00:00Z\"]}, \"id\": 1098}]'\n\n\n\nNeither of them works.\n\nThe set and add operation for int array works. \nThe set, remove, and  add operation for string array works",
    "attachments": {
        "unitTests-6307.txt": "https://issues.apache.org/jira/secure/attachment/12674837/unitTests-6307.txt",
        "SOLR-6307.patch": "https://issues.apache.org/jira/secure/attachment/12671702/SOLR-6307.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Kun Xi",
            "id": "comment-14081523",
            "date": "2014-07-31T21:38:24+0000",
            "content": "Related to SOLR-3862. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14140207",
            "date": "2014-09-19T09:01:27+0000",
            "content": "Hi Kun Xi,\n\nCan you provide more positive and negative test cases covering actual and expected results on this issue. \nI am working on fixing the issue.\n\nThanks\nAnurag "
        },
        {
            "author": "Kun Xi",
            "id": "comment-14140787",
            "date": "2014-09-19T15:59:44+0000",
            "content": "Anurag Sharma\n\nHere is how I reproduce the bug:\n\n1. create a document schema with two fields\n\n\tbirth_year_is: multivalue int field\n\treservation_dts: multivalue datetime field\n\n\n\n2. create a document with dummy data:\n\n\tbirth_year_is: [ 1960, 1970 ]\n\treservation_dts: [\"2014-02-12T12:00:00Z\",  \"2014-07-16T12:00:00Z\"]\n\n\n\n3. try to remove 1970 from birth_year_is:\n\ncurl http://localhost:8080/update\\?commit\\=true -H 'Content-type:application/json' -d '[{ \"birth_year_is\": { \"remove\": [1970]},  \"id\": 1}]'\n\n\n\n4. try to remove 2014-07-16T12:00:00Z from reservation_dts:\n\ncurl http://localhost:8080/update\\?commit\\=true -H 'Content-type:application/json' -d '[{ \"reservation_dts\": { \"remove\": [\"2014-07-16T12:00:00Z\"]},  \"id\": 1}]'\n\n\n\n5. go to solr console and verify the two fields are NOT updated. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14142407",
            "date": "2014-09-21T10:14:05+0000",
            "content": "Kun,\nThanks a lot for the update. \n\nThe atomic removal is not working due to the difference in types of document schema i.e. for birth_year_is has multivalue Integer field but removal is called with Long for value [1970]. \n\nI am working on creating a patch "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14142569",
            "date": "2014-09-21T18:47:40+0000",
            "content": "There are three approaches to fix this issue:\n1. Enhance the org.noggit.JSONParser to support Integer and Date types.\n2. Create the input collection type based on document id and it's lucene schema.\n3. During remove typecast the input collection to original based on key for Integer and Date.\n\nPlease suggest which approach can be taken. To me approach #2 looks generic. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14143095",
            "date": "2014-09-22T11:05:29+0000",
            "content": "I didn't quite understand #3 \n\n#2 looks reasonable to me "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14143130",
            "date": "2014-09-22T11:51:58+0000",
            "content": "Here is the code snippet of remove function. fieldValue is an Object containing items to be removed.\n\n      final Collection<Object> original = existingField.getValues();\n      if (fieldVal instanceof Collection) {\n        original.removeAll((Collection) fieldVal);\n      } else {\n        original.remove(fieldVal);\n     }\nThe type of fieldVal is parsed by org.noggit.JSONParser.\n\nTo describe more on #3, \"original.removeAll((Collection) fieldVal);\" is only successful when collection items of original and fieldVal are of the same type. So before making above call another collection can be be build at runtime containing same item type as the item types of original by typecasting the value(s) from fieldVal and pass them like: original.removeAll(typeCastedCollectionOfInputItems);\nThis approach has minimal code change and will impact only doRemove() function in DistributedUpdateProcessor class. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14143619",
            "date": "2014-09-22T18:49:08+0000",
            "content": "I still feel #2 is the right way to do it "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14151087",
            "date": "2014-09-28T11:48:47+0000",
            "content": "Here is the patch for review using approach#2.\n\nOther than Int and Date also have covered the case for float.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14169226",
            "date": "2014-10-13T12:30:15+0000",
            "content": "have you given the final patch ? I can review and commit this "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14169367",
            "date": "2014-10-13T14:58:04+0000",
            "content": "Yes. Sure, go ahead! \nShould I send the review using RBT or the attached patch file will work? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14170830",
            "date": "2014-10-14T11:56:21+0000",
            "content": "does the patch apply on trunk. It does not seem to be "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14171231",
            "date": "2014-10-14T17:15:27+0000",
            "content": "My local copy was quite old, updated it with the HEAD revision in trunk. Attaching again the patch after update. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14171234",
            "date": "2014-10-14T17:20:57+0000",
            "content": "I've added few more comments in the code and cleaned up commented code and non-modified file from the patch. \nClean build and unit test run with latest updated code is still pending. I'll update another patch in case find any issue(s). "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14171435",
            "date": "2014-10-14T20:02:06+0000",
            "content": "Am able to successfully execute the existing and newly added unit tests in the AtomicUpdatesTest. Log attached. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14171445",
            "date": "2014-10-14T20:10:19+0000",
            "content": "Need more clarification regarding applicability of the patch on trunk \n\nI see following differences in the revision:\nduring patch upload \u2014 core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java\t(revision 1631811)\nnow \u2014 core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java\t(revision 1631826)\n\nMy doubt is the revision will keep bumping and current revision and patch will never be in sync. So what's the correct way to apply the patch on trunk. I am new to the process so trying to understand. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14171461",
            "date": "2014-10-14T20:20:22+0000",
            "content": "The patch would apply even if the files are modified. If there is a conflict it does not apply "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14172227",
            "date": "2014-10-15T10:17:13+0000",
            "content": "patch refactored . Please review and let me know if I missed something.\n\nI shall commit this soon "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14172262",
            "date": "2014-10-15T11:19:20+0000",
            "content": "Thanks a lot for reviewing and refactoring it. \n\nIntroducing the toNativeType() at FieldType is good. Only one thing I see is missed in class TrieIntField when overriding toNativeType. It is not parsing Double before Float TrieIntField. The intention of doing it was to find if Double can be extracted before Float. Rest is good. \n\nSnippet from earlier patch\n+      // when Double value passed as a String\n+      if(!removed && nonIntegerFormat)\n+        removed = original.remove((new Double(Double.parseDouble(object.toString()))).intValue());\n+      // when Float value passed as a String\n+      if(!removed && nonIntegerFormat)\n+        removed = original.remove(new Float(Float.parseFloat(object.toString())).intValue()); "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14172264",
            "date": "2014-10-15T11:20:54+0000",
            "content": "it's not possible to do both parsing . Does it make any difference? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14173582",
            "date": "2014-10-16T09:41:44+0000",
            "content": "Commit 1632259 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1632259 ]\n\nSOLR-6307 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14173584",
            "date": "2014-10-16T09:43:25+0000",
            "content": "Commit 1632260 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1632260 ]\n\nSOLR-6307 "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14174630",
            "date": "2014-10-17T01:53:04+0000",
            "content": "Sorry I missed the last comment. With float I saw sometime it was truncating the value like 1111.666 to 1112 and look for removing 1112 so introduced parsing double before float. Both parsing can be done by introducing nested try and catch.\n\nIndependent of above another issue I saw in remove api is it is not giving any message if the element/collection deleted successfully or failed. Probably this will help the caller to know the current state otherwise the caller have to make another call to real time /get call on the id to know the state. Should we raise another issue for this? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14174721",
            "date": "2014-10-17T04:44:51+0000",
            "content": "Please submit another patch here itself "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14175849",
            "date": "2014-10-18T04:49:19+0000",
            "content": "Here is the patch parsing the Double before Float "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332716",
            "date": "2015-02-23T05:01:31+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}