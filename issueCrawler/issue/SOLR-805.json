{
    "id": "SOLR-805",
    "title": "DisMax queries are not being cached in QueryResultCache",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I have a DisMax Search Handler set up in my solrconfig.xml to weight results based on which field a hit was found in. Results seem to be coming back fine, but the exact same query issued twice will not result in a cache hit.\n\nI have run far enough in the debugger to determine that the hashCode for the BooleanQuery object is returning a different value each time for the same query. This leads me to believe there is some random factor involved in it's calculation, such as a default Object hashCode() implementation somewhere in the chain. Non DisMax queries seem to be caching just fine.\n\nWhere I see this behavior exhibited is on line 47 of the QueryResultKey constructor. I have not dug in far enough to determine exactly where the hashCode is being incorrectly calculated. I will try and dig in further tomorrow, but wanted to get some attention on the bug.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Todd Feak",
            "id": "comment-12638639",
            "date": "2008-10-10T20:01:41+0000",
            "content": "The fix for this has been commited to Lucene under the linked issue. Should be resolved when the referenced Lucene library is upgraded. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12642354",
            "date": "2008-10-24T00:50:02+0000",
            "content": "I'll commit today if there is no objections.\n\n$ svn status\nA      lib/lucene-queries-2.9-dev.jar\nD      lib/lucene-spellchecker-2.4.0.jar\nA      lib/lucene-snowball-2.9-dev.jar\nD      lib/lucene-analyzers-2.4.0.jar\nA      lib/lucene-spellchecker-2.9-dev.jar\nD      lib/lucene-core-2.4.0.jar\nA      lib/lucene-analyzers-2.9-dev.jar\nD      lib/lucene-highlighter-2.4.0.jar\nD      lib/lucene-memory-2.4.0.jar\nA      lib/lucene-core-2.9-dev.jar\nD      lib/lucene-queries-2.4.0.jar\nD      lib/lucene-snowball-2.4.0.jar\nA      lib/lucene-highlighter-2.9-dev.jar\nA      lib/lucene-memory-2.9-dev.jar\n\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12642467",
            "date": "2008-10-24T14:15:52+0000",
            "content": "Committed revision 707641. Thanks Todd! "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12642968",
            "date": "2008-10-27T17:36:27+0000",
            "content": "Does this call for 1.3.1 release in the very near future?  Most Solr 1.3 DisMax users will probably not be able to figure this one out, yet it will hurt them. "
        },
        {
            "author": "Todd Feak",
            "id": "comment-12643008",
            "date": "2008-10-27T18:40:57+0000",
            "content": "I'm not sure if this will help with the decision or not, but I should clarify. \n\nThis problem was not specifically with DisMax queries, though that's what I initially thought. It's with any query that would contain a MultiPhraseQuery within it. According to Yonik in the linked in bug, the SynonymFilter could inject this on a standard query. So, this problem isn't limited to DisMax, but it also may not encompass all DisMax queries. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12643335",
            "date": "2008-10-28T20:29:22+0000",
            "content": "Apart from this one, I don't think there are any major fixes for 1.3 branch. With Java based replication being in the trunk now, we can also plan for an early 1.4 release \u2013 replication alone is a huge user facing feature. Of course, we need some time for the new features to stabilize, therefore, 1.4 can't be done as quick as a 1.3.1 release can be. "
        },
        {
            "author": "Chris Harris",
            "id": "comment-12645876",
            "date": "2008-11-07T20:30:00+0000",
            "content": "I was trying to figure out exactly which revision of the Lucene trunk Koji's commit here was built against, since it doesn't seem to be stated here in JIRA or in the SVN log. If anyone else else is curious, the answer is Lucene r707499 \u2013 at least according to the MANIFEST.MF file in lib/lucene-core-2.9-dev.jar. "
        }
    ]
}