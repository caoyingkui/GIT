{
    "id": "LUCENE-1920",
    "title": "Make MultiReader.isOptimized() return a useful result",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "The MultiReader statically returns FALSE on any isOptimized() call.\nThis makes it unusable as the source index for an InstantiatedIndex, which checks initially if the source index is optimized and aborts if not.\nThe attached patch iterates all sub readers and returns TRUE if all of them are optimized.",
    "attachments": {
        "MultiReader_isOptimized.patch": "https://issues.apache.org/jira/secure/attachment/12420035/MultiReader_isOptimized.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-09-18T16:20:22+0000",
            "content": "An optimized index is a single segment - MultiReader reads from multiple segments, and so I would argue its not optimized and should return false.\n\nIf InstantiatedIndex will work when all of the segments MultiReader refs are optimized somehow, I believe the workaround belongs in InstantiatedIndex.\n\nCounterpoints? ",
            "author": "Mark Miller",
            "id": "comment-12757236"
        },
        {
            "date": "2009-09-18T16:25:37+0000",
            "content": "\n\tRequests an \"optimize\" operation on an index, priming the index\n\tfor the fastest available search. Traditionally this has meant\n\tmerging all segments into a single segment as is done in the\n\tdefault merge policy, but individaul merge policies may implement\n\toptimize in different ways.\n\n\n\nThis actually almost argues for your solution. Put me on the fence. ",
            "author": "Mark Miller",
            "id": "comment-12757240"
        },
        {
            "date": "2009-09-18T16:40:49+0000",
            "content": "Was there not any issue that fixes InstantiatedIndex to also accept non-optimized indexes? ",
            "author": "Uwe Schindler",
            "id": "comment-12757250"
        },
        {
            "date": "2009-09-18T16:41:28+0000",
            "content": "I agree with the patch - MulitReader is not used by Lucene natively, so it's always instantiated by a user with multiple sub-readers, that are normally complete indexes on their own.  If they are all optimized, then the top-level should be optimized.\n\nIt's minor though, because the user could also check the optimization status of the sub-readers themselves.\n\nAs for instantiatedIndex, that's a different issue - I don't know why it thinks it needs an optimized index (no deletions? single segment? both?) but it should check a different way. ",
            "author": "Yonik Seeley",
            "id": "comment-12757251"
        },
        {
            "date": "2009-09-18T19:45:38+0000",
            "content": "Thank you all for taking the time to review the patch.\nI'm not that familiar with the inner workings of Lucene and the full (intented) contract of isOptimized().\n\nJust a few observations I made by looking at Lucene's source more closely:\n\n+ My patch was originally crafted and tested against 2.4.0-RELEASE.\nHowever, InstantiatedIndex in TRUNK no longer throws an exception on non-optimized wrapped indizes, see LUCENE-1578. \nSo this no longer should be a problem (although I don't know if this is tested well enough) and the patch can be looked at conservatively.\n\n+ Nevertheless, I think it's releasonable (from a user's perspecitve) to expect a behavior like the patch is providing.\n\n+ This is supported by ParallelReader.isOptimized() (see LUCENE-832), which is doing essentially the same thing like the proposed patch for MultiReader.\n So this behavior is already implemented in a similar Reader.\n ",
            "author": "Bernd Fondermann",
            "id": "comment-12757377"
        },
        {
            "date": "2011-01-27T10:09:02+0000",
            "content": "By definition of IndexReader, a MultiReader is only optimized if it contains one sub-index which is itsself optimized.\n\nSince Lucene 2.9 you can get all subreaders from a MultiReader using getSequentialSubReaders() and iterate over it to do the check if all sub-indexes are optimized.\n\nI close this because of long inactivity. ",
            "author": "Uwe Schindler",
            "id": "comment-12987473"
        }
    ]
}