{
    "id": "LUCENE-4245",
    "title": "IndexWriter#close(true) should either not be interruptible or should abort background merge threads before returning",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently, there is no safe way to close a directory after closing the writer without causing an exception in a merge thread if the #close call is interrupted.",
    "attachments": {
        "LUCENE-4245.patch": "https://issues.apache.org/jira/secure/attachment/12537527/LUCENE-4245.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-22T18:21:25+0000",
            "content": "Another option is another param to force actually waiting even in the face of an interrupt? Really though - I think if we are going to respond to the interrupt in close, we should handle it in a way that assures background threads are interrupted first. ",
            "author": "Mark Miller",
            "id": "comment-13420263"
        },
        {
            "date": "2012-07-22T21:34:33+0000",
            "content": "Here my idea of a patch, there is still a crazy test missing enforcing an interrupt to the merge thread:\n\n\n\tIt changes the finishMerges() in closeInternal  to a loop that repeats until the call succeeded and did not throw ThreadInterruptedException.\n\tAfter the first one was interrupted, all later invocations will pass waitForMerges = false, so CMS shuts down ASAP (but could still be interrupted, so we have to do this in loop).\n\tAfter loop has finished, we rethrow the first ThreadInterruptedException & close the merge scheduler for safety.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13420338"
        },
        {
            "date": "2012-07-22T22:29:11+0000",
            "content": "Unfortunately more methods in CMS can throw ThreadInterruptedException, so handle all cases and try hardest to clean up all running merge threads on close.\n\nThis example shows why it is better to let InterruptedException be handled as checked Exception. With the original InterruptedException declared everywhere and not converted to a RuntimeException, the need for cleanup in close() [which is not allowed to throw InterrupotedException because Closeable interface] is obvious and we are enforced to do it.\n\nWe should rethink about InterruptedException! ",
            "author": "Uwe Schindler",
            "id": "comment-13420352"
        },
        {
            "date": "2012-07-23T11:13:51+0000",
            "content": "If IndexWriter.close throws ThreadInterruptedException (because \"you\" had interrupted it) then you should consider the IndexWriter not closed, and either IW.rollback it, or IW.close it again? ",
            "author": "Michael McCandless",
            "id": "comment-13420569"
        },
        {
            "date": "2012-07-23T11:58:39+0000",
            "content": "You don't always have control over these interrupts - ie its not 'you' that interrupts it - in my case it's jetty on shutdown. Most interrupts to Lucene are probably a result of an external agent like a web container.\n\nI don't think close should be interruptible - but waiting for merge threads to finish perhaps should be - you should still get a closed IW though. You don't know where you interrupted it and having to call close or rollback again is just confusing. It would be hard to even know if you did manage to interrupt it - the interrupt has to come from another thread - so you don't know if it happened before the close, after the close, etc. You don't know the result of the close or the interrupt or whether you have to make another call to close or rollback.\n\nIn my opinion, close itself should not be an interruptible call - the interrupt should just be about canceling a wait on background merge threads at most (but they should still be stopped first) ",
            "author": "Mark Miller",
            "id": "comment-13420589"
        },
        {
            "date": "2012-07-23T12:09:24+0000",
            "content": "I think my patch does exactly that. If you call close() and one interrupts it, you still get a closed reader (and the Exception).\n\nAnother fix in Solr code would be do make the part that calls IndexWriter.close() be a while loop as long as a ThreadInterruptedException is catched. ",
            "author": "Uwe Schindler",
            "id": "comment-13420594"
        },
        {
            "date": "2012-07-23T12:23:04+0000",
            "content": "that calls IndexWriter.close() be a while loop as long as a ThreadInterruptedException is catched.\n\nI could do that, but I think it means close is kind of 'trappy' - at least it should be a checked exception so people know they should always loop on close in case of an interrupt...though that seems odd to me.\n\nWhy would you interrupt close? Surely not so you can keep using the Writer? Surely not because it takes to long?\n\nThe only thing I can see interrupting is waiting for the background merge threads. Interrupts generally happen when something is trying to shutdown. Wouldn't you only interrupt if close was taking too long? Your still going to close your directory right after. It's not like you are going to interrupt a close so you can continue using the Writer? That seems like a crazy use case. At most, it would seem to mean, close faster if you can - not, abort, I still want to use you! ABORT ABORT! I've got a document to add!! ",
            "author": "Mark Miller",
            "id": "comment-13420600"
        },
        {
            "date": "2012-07-23T12:28:20+0000",
            "content": "The trap is that close() does slow things at all \n\nclose() should be equivalent to rollback() ",
            "author": "Robert Muir",
            "id": "comment-13420603"
        },
        {
            "date": "2012-07-23T12:36:07+0000",
            "content": "I'm gonna spin off an issue for this. Its so insanely ridiculous that close() commits, waits for merges, or does any of what it does.\n\nNow is a great time to fix it: people have to change their code to upgrade to 4.0. ",
            "author": "Robert Muir",
            "id": "comment-13420606"
        },
        {
            "date": "2012-07-23T12:43:35+0000",
            "content": "I'm gonna spin off an issue for this. Its so insanely ridiculous that close() commits, waits for merges, or does any of what it does.\n\nWhy is that different from OutputStream.close() calling flush()? Would you like to call flush() yourself everytime before you close()? ",
            "author": "Shai Erera",
            "id": "comment-13420610"
        },
        {
            "date": "2012-07-23T12:49:22+0000",
            "content": "What is the problem with the attached patch?\n\nWhy is that different from OutputStream.close() calling flush()? Would you like to call flush() yourself everytime before you close()?\n\nI agree with Shai, I dont see any reason to change this logic. If we remove the wait for merge/commit shit in IW.close(), we still have to wait for the MergeScheduler to shutdown. As this one is in another thread, you have to join()/wait() so its always interruptible. Thats the main problem with CMS, shutting it down is hard.\n\nMy attached patch does three steps to shutdown, if we remove the commit, it would just be one step less, but the very last step mergeScheduler.close() [see patch] would stay alive, and this one unfortunately can be interrupted (if it is CMS). Can we do 2 steps? First commit something like my patch and later think about committing/flushing/... or not? ",
            "author": "Uwe Schindler",
            "id": "comment-13420613"
        },
        {
            "date": "2012-07-23T12:54:47+0000",
            "content": "I don't think close should be interruptible\n\nI don't think that's really an option: close first flushes which eg\ncan hit interrupt in the IO (which causes IW to drop that one\nsegment).\n\nbut waiting for merge threads to finish perhaps should be\n\nI'm not sure: I think it's a little too much magic to interpret an\ninterrupt to mean abort running merges.  I think the app should turn\naround and call close(false), call rollback(), call commit() then\nrollback(), etc.: we don't know the \"intention\" of the interrupt.\n ",
            "author": "Michael McCandless",
            "id": "comment-13420618"
        },
        {
            "date": "2012-07-23T12:58:57+0000",
            "content": "This is so broken for something transactional to have a close like this. ",
            "author": "Robert Muir",
            "id": "comment-13420621"
        },
        {
            "date": "2012-07-23T13:12:48+0000",
            "content": "What is the problem with the attached patch?\n\nNothing in my opinion - +1 from me.\n\nI think Robert's issue is another JIRA that will have it's own discussion.\n\nBut I guess Mike is not on board with the current patch?\n\nI guess I don't see it as magic. An interrupt in java means please stop what you are doing. It's up to the app to determine what to stop and what not to stop and how long to take. I don't think that's interpreting an interrupt - it just is what it is. It's loose as goose.\n\nWhen I say that close should not be interruptible, I don't mean that interrupts should not kill IO - I mean that the IW should still close and not leave threads running. I mean that once you call IW#close that should be the end game. It should then be safe to call Dir#close.\n\nIf that means waiting for all merge threads to finish even though you have been interrupted - that is fine. It's up to the app how to respond to an interrupt. I'd prefer merges where aborted - usually if you are going to listen to an interrupt at all, you try to do it in a timely manner. ",
            "author": "Mark Miller",
            "id": "comment-13420633"
        },
        {
            "date": "2012-07-23T13:23:27+0000",
            "content": "If that means waiting for all merge threads to finish even though you have been interrupted - that is fine. It's up to the app how to respond to an interrupt. I'd prefer merges where aborted - usually if you are going to listen to an interrupt at all, you try to do it in a timely manner.\n\nThat's what the patch is doing. If you interrupt close(), it will recover the wait() and try a second time on the mergeScheduler with no longer waiting for merges to finish. That's all it does. But as waiting in the mergeScheduler.close() call contains Thread.join() [for CMS] its also interruptible, so this call must be repeated until no exceptions occur anymore. It is the same like closeSafely, it also tries to close everything ignoring Exceptions. ",
            "author": "Uwe Schindler",
            "id": "comment-13420644"
        },
        {
            "date": "2012-07-23T15:41:56+0000",
            "content": "Much more easier patch:\n\n\n\tIn preparation for Roberts work on LUCENE-4246, I made MergeScheduler and its close() implement Closeable, so we can later also close the scheduler using IOUtils.\n\tMergeScheduler, especially CMS's close() are not interruptible (which makes no sense). Close waits until all threads are dead. The fix was easy, just ignore InterruptedException in close() and loop.\n\tThe IndexWriter changes can be removed later once Robert finishes. Waiting for pending merges and all that stuff is done in this patch, but easy removeable. It just makes those call uninteruptible, too by falling back to be as quick as possible when interrupted. The MergeScheduler.close() call at end should be moved to a final finally block using IOUtils (later in LUCENE-4246).\n\n\n\nI think this is ready to commit. I will think about a good test. ",
            "author": "Uwe Schindler",
            "id": "comment-13420723"
        },
        {
            "date": "2012-07-23T20:18:57+0000",
            "content": "Improved patch, much simplier. close() is no longer interruptible (throws no exception ThreadInterruptedException), if interrupted it just cancels unfinished merges and finishes earlier.\n\nI applied this patch and now on my slow-IO windows system no Solr tests are failing anymore, except ZK ones, which happens seldem here. With unpatched trunk, I get no passing test run at all. It seems that on slow IO systems, Jetty more often interrupts IndexWriter while closing.\n\nI will commit this if nobody objects tomorrow morning. ",
            "author": "Uwe Schindler",
            "id": "comment-13420932"
        },
        {
            "date": "2012-07-23T21:24:44+0000",
            "content": "Patch that preserves Thread interrupt status and handles thread interrupts in non-interruptible methods according to Sun/Oracle handbook.\n\nThis problem exists in more places at Lucene also test failures caused by this.\n\nThere is a reason why InterruptedException is checked. We convert it to unchecked by wrapping with ThreadInterruptedException. But thats the wrong way to do. InterruptedException is checked, because on interrupting such a method that explicitely declares InterruptedException, you have to take care, otherwoise you hide interrupts. Simon already has a patch to cleanup (not yet committed, also addressing this issue).\n\nIf you have a methods that is defined to not be interruptible, like Closeable#close() [interface dictates!], you are not allowe d to interrupt. The correct way to handle this is to save interrupt status on entering method, then call the interruptible things like wait(), join() but repeat them on a new  interrupt (so make then non-interruptible). And finally reset the interrupt status to the previous one including new interrupts (see examples in patch).\n\nIf we would not have hidden the InterruptedException in IndexWriter's close() - he issue we have here would not be there.\n\nOne example also violating the close()-not-interruptible is e.g. NRTManagerReopenThread. If you call close() and interrupt that, the thread leaks because it no longer waits for it to finish. We have similar leaks in TestDocumentsWriterStallControl. This should be fixed by nuking the RuntimeExSubclass and handle all interrupts correctly (it's easy, you have to know how).\n\nI will open issue once this issue is solved. ",
            "author": "Uwe Schindler",
            "id": "comment-13420973"
        },
        {
            "date": "2012-07-24T05:05:47+0000",
            "content": "Great - thank you! ",
            "author": "Mark Miller",
            "id": "comment-13421180"
        },
        {
            "date": "2012-07-24T05:28:48+0000",
            "content": "Committed trunk revision: 1364896\nCommitted 4.x revision: 1364898 ",
            "author": "Uwe Schindler",
            "id": "comment-13421194"
        },
        {
            "date": "2012-07-24T06:07:32+0000",
            "content": "I committed an additional fix to gracefully handle failed flushes by shutting down CMS (trunk r1364903, 4.x r1364904) ",
            "author": "Uwe Schindler",
            "id": "comment-13421203"
        },
        {
            "date": "2012-07-24T08:12:21+0000",
            "content": "I committed another improvement to use IOUtils in a finally block to really cleanup the mergePolicy and mergeScheduler, no matter what happens: trunk r1364931, 4x r1364932 ",
            "author": "Uwe Schindler",
            "id": "comment-13421257"
        },
        {
            "date": "2012-07-24T10:28:53+0000",
            "content": "It still makes me nervous having suprising side effects (killing\nmerges) from Thread.interrupt().  It reminds me how NIOFSDir and\nMMapDir close the file if they are interrupted during IO.\n\nBut I guess we already have an unavoidable surprising side effect (if\ninterrupt arrives during flush then that whole segment is discarded),\nand I guess it makes sense to kill all merges on interrupt since the\nintention is most likely to abort any unecessary things for close.\n\nSo I'm OK with what was committed.  Separately the cleanups are great!\nThanks Uwe. ",
            "author": "Michael McCandless",
            "id": "comment-13421313"
        }
    ]
}