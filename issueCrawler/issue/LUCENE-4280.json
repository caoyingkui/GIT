{
    "id": "LUCENE-4280",
    "title": "TestReaderClosed leaks threads",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "-ea\n-Dtests.seed=9449688B90185FA5\n-Dtests.iters=100\n\n\nreproduces 100% for me, multiple thread leak out from newSearcher's internal threadfactory:\n\nAug 02, 2012 8:46:05 AM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\nSEVERE: 6 threads leaked from SUITE scope at org.apache.lucene.index.TestReaderClosed: \n   1) Thread[id=13, name=LuceneTestCase-1-thread-1, state=WAITING, group=TGRP-TestReaderClosed]\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n   2) Thread[id=15, name=LuceneTestCase-3-thread-1, state=WAITING, group=TGRP-TestReaderClosed]\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n   3) Thread[id=17, name=LuceneTestCase-5-thread-1, state=WAITING, group=TGRP-TestReaderClosed]\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n   4) Thread[id=18, name=LuceneTestCase-6-thread-1, state=WAITING, group=TGRP-TestReaderClosed]\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n   5) Thread[id=16, name=LuceneTestCase-4-thread-1, state=WAITING, group=TGRP-TestReaderClosed]\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n   6) Thread[id=14, name=LuceneTestCase-2-thread-1, state=WAITING, group=TGRP-TestReaderClosed]\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-02T13:13:47+0000",
            "content": "Do we know if the problem happens from the method 'test' or from 'testReaderChaining'?\n\nhere are my notes basically for 'test'. I think we could apply the same logic to 'testReaderChaining',\nbut I want Uwe's opinion:\n\n\n@@ -65,6 +66,17 @@\n       searcher.search(query, 5);\n     } catch (AlreadyClosedException ace) {\n       // expected\n+    } finally {\n+      // we may have wrapped the reader1 in newSearcher, meaning we created reader2(reader1)\n+      // but we only closed the inner reader1, not the reader2 which is the one with the\n+      // close hook to shut down the executor service.\n+      //\n+      // a better general solution is probably to fix LuceneTestCase.newSearcher to add \n+      // the close hook to the underlying reader that was passed in (reader1), however\n+      // if we do that, is this test still just as good? we will get an exception from\n+      // IndexSearcher instead?\n+      IOUtils.close(searcher.getIndexReader());\n     }\n\n\n\nI think we need Uwe to review  ",
            "author": "Robert Muir",
            "id": "comment-13427296"
        },
        {
            "date": "2012-08-03T07:34:51+0000",
            "content": "Do we know if the problem happens from the method 'test' or from 'testReaderChaining'?\n\nI encourage you to use this for finding out (rr branch at https://github.com/dweiss/lucene_solr/) \n\n@ThreadLeakScope(Scope.TEST)\n@Repeat(iterations = 10)\npublic class TestReaderClosed extends LuceneTestCase {\n\n\n\nIn short: it's just the testReaderChaining method.  ",
            "author": "Dawid Weiss",
            "id": "comment-13427882"
        },
        {
            "date": "2012-08-03T07:41:30+0000",
            "content": "I'm talking about this particular seed though:\n\n-Dtests.seed=9449688B90185FA5\n\n\n\nWith thread leak detection and warnings only:\n\n@ThreadLeakScope(Scope.TEST)\n@ThreadLeakLingering(linger = 1000)\n@ThreadLeakAction(value = {Action.WARN})\n@Repeat(iterations = 1000)\npublic class TestReaderClosed extends LuceneTestCase {\n\n\nthe 'test' method passes all 1000 iterations, the testReaderChaining fails about 20 times (2% failure rate). ",
            "author": "Dawid Weiss",
            "id": "comment-13427884"
        },
        {
            "date": "2012-08-03T07:46:52+0000",
            "content": "Ok, I think this indeed affects other tests too. Last night's logs from the build server:\n\nERROR   0.00s J0 | TestLazyProxSkipping (suite)\n   > Throwable #1: com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from SUITE scope at org.apache.lucene.index.TestLazyProxSkipping: \n   >    1) Thread[id=183, name=LuceneTestCase-40-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n   >         at sun.misc.Unsafe.park(Native Method)\n   >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)\n   >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1925)\n   >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)\n   >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)\n   >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n   >         at java.lang.Thread.run(Thread.java:619)\n   > \tat __randomizedtesting.SeedInfo.seed([A3DFB2B2B64B7FB2]:0)\n   > Throwable #2: com.carrotsearch.randomizedtesting.ThreadLeakError: There are still zombie threads that couldn't be terminated:\n   >    1) Thread[id=183, name=LuceneTestCase-40-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n   >         at sun.misc.Unsafe.park(Native Method)\n   >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)\n   >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1925)\n   >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)\n   >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)\n   >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n   >         at java.lang.Thread.run(Thread.java:619)\n   > \tat __randomizedtesting.SeedInfo.seed([A3DFB2B2B64B7FB2]:0)\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13427890"
        },
        {
            "date": "2012-08-03T07:50:44+0000",
            "content": "That TestLazyProxSkipping test failed three builds last night so it's probably frequent. ",
            "author": "Dawid Weiss",
            "id": "comment-13427893"
        },
        {
            "date": "2012-08-06T16:16:32+0000",
            "content": "TestLazyProxSkipping again.\n\n[junit4:junit4] Suite: org.apache.lucene.index.TestLazyProxSkipping\n[junit4:junit4] OK      0.01s J0 | TestLazyProxSkipping.testSeek\n[junit4:junit4] OK      1.05s J0 | TestLazyProxSkipping.testLazySkipping\n[junit4:junit4]    > (@AfterClass output)\n[junit4:junit4]   2> Aug 06, 2012 3:47:18 PM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n[junit4:junit4]   2> WARNING: Will linger awaiting termination of 1 leaked thread(s).\n[junit4:junit4]   2> Aug 06, 2012 3:47:38 PM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n[junit4:junit4]   2> SEVERE: 1 thread leaked from SUITE scope at org.apache.lucene.index.TestLazyProxSkipping: \n[junit4:junit4]   2>    1) Thread[id=116, name=LuceneTestCase-18-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n[junit4:junit4]   2>         at sun.misc.Unsafe.park(Native Method)\n[junit4:junit4]   2>         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n[junit4:junit4]   2>         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n[junit4:junit4]   2>         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n[junit4:junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n[junit4:junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n[junit4:junit4]   2>         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n[junit4:junit4]   2>         at java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]   2> Aug 06, 2012 3:47:38 PM com.carrotsearch.randomizedtesting.ThreadLeakControl tryToInterruptAll\n[junit4:junit4]   2> INFO: Starting to interrupt leaked threads:\n[junit4:junit4]   2>    1) Thread[id=116, name=LuceneTestCase-18-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n[junit4:junit4]   2> Aug 06, 2012 3:47:41 PM com.carrotsearch.randomizedtesting.ThreadLeakControl tryToInterruptAll\n[junit4:junit4]   2> SEVERE: There are still zombie threads that couldn't be terminated:\n[junit4:junit4]   2>    1) Thread[id=116, name=LuceneTestCase-18-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n[junit4:junit4]   2>         at sun.misc.Unsafe.park(Native Method)\n[junit4:junit4]   2>         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n[junit4:junit4]   2>         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n[junit4:junit4]   2>         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n[junit4:junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n[junit4:junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n[junit4:junit4]   2>         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n[junit4:junit4]   2>         at java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]   2> NOTE: test params are: codec=Lucene40: {tokens=PostingsFormat(name=MockRandom)}, sim=RandomSimilarityProvider(queryNorm=false,coord=false): {tokens=DFR I(n)B3(800.0)}, locale=sl, timezone=America/Resolute\n[junit4:junit4]   2> NOTE: Windows 7 6.1 amd64/Oracle Corporation 1.7.0_03 (64-bit)/cpus=8,threads=2,free=130600992,total=261095424\n[junit4:junit4]   2> NOTE: All tests run in this JVM: [TestBooleanOr, TestDirectory, TestMultiTermConstantScore, TestIndexFileDeleter, TestSetOnce, Nested1, TestStressIndexing2, TestRegexpRandom2, TestStressAdvance, TestSpansAdvanced, TestAssertions, TestFieldCacheRewriteMethod, TestPrefixInBooleanQuery, TestMultiPhraseQuery, TestMatchAllDocsQuery, TestLock, TestSimilarity2, TestNamedSPILoader, TestSort, TestBytesRefHash, TestOmitTf, TestVirtualMethod, TestLazyProxSkipping]\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestLazyProxSkipping -Dtests.seed=55A3CB2FF25AC1A5 -Dtests.slow=true -Dtests.locale=sl -Dtests.timezone=America/Resolute -Dtests.file.encoding=ISO-8859-1\n[junit4:junit4]   2> \n[junit4:junit4] ERROR   0.00s J0 | TestLazyProxSkipping (suite)\n[junit4:junit4]    > Throwable #1: com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from SUITE scope at org.apache.lucene.index.TestLazyProxSkipping: \n[junit4:junit4]    >    1) Thread[id=116, name=LuceneTestCase-18-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n[junit4:junit4]    >         at sun.misc.Unsafe.park(Native Method)\n[junit4:junit4]    >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n[junit4:junit4]    >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n[junit4:junit4]    >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n[junit4:junit4]    >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n[junit4:junit4]    >         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n[junit4:junit4]    >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n[junit4:junit4]    >         at java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([55A3CB2FF25AC1A5]:0)\n[junit4:junit4]    > Throwable #2: com.carrotsearch.randomizedtesting.ThreadLeakError: There are still zombie threads that couldn't be terminated:\n[junit4:junit4]    >    1) Thread[id=116, name=LuceneTestCase-18-thread-1, state=WAITING, group=TGRP-TestLazyProxSkipping]\n[junit4:junit4]    >         at sun.misc.Unsafe.park(Native Method)\n[junit4:junit4]    >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n[junit4:junit4]    >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n[junit4:junit4]    >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n[junit4:junit4]    >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)\n[junit4:junit4]    >         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)\n[junit4:junit4]    >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n[junit4:junit4]    >         at java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([55A3CB2FF25AC1A5]:0)\n[junit4:junit4]    >\n[junit4:junit4] Completed on J0 in 24.19s, 2 tests, 2 errors <<< FAILURES!\n[junit4:junit4]  \n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13429227"
        },
        {
            "date": "2012-08-06T16:38:17+0000",
            "content": "I committed a fix for TestLazyProxSkipping (it wasn't closing the reader). ",
            "author": "Michael McCandless",
            "id": "comment-13429244"
        }
    ]
}