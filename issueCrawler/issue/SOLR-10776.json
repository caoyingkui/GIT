{
    "id": "SOLR-10776",
    "title": "Invalid hl URL params causes all future queries using hl to fail with \"TokenStream contract violation: close() call missing\"",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "highlighter",
            "query parsers",
            "search",
            "security"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "4.10.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We're using Solr 4.10.4 and came across an interesting find recently. \n\nWe're not certain if this issue exists in versions prior to 4.10.4 or newer 5.x and 6.x releases, but it's serious enough that when triggered, it can cause an entire website that is powered by Solr to stop functioning if highlighter is used.\n\nSuper simple schema.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<schema name=\"sv_solr_v1_en\" version=\"1.5\">\n   <field name=\"version\" type=\"long\" indexed=\"true\" stored=\"true\" />\n   <field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" />\n   <uniqueKey>id</uniqueKey>\n   <fieldType name=\"string\" class=\"solr.StrField\" sortMissingLast=\"true\" />\n   <fieldType name=\"long\" class=\"solr.TrieLongField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n</schema>\n\nTo reproduce, the Solr core needs to have at least one document that matches the query. I inserted this test document using Solr admin for testing:\n{ \"id\" : \"a\" }\n\nFirst request (hl.encoder not valid):\nhttp://192.168.50.6:8983/solr/client_rc/select?q=*:*&wt=json&hl=true&hl.fl=id&hl.encoder=anything_invalid\n\nFirst request (hl.fragsize non-numeric):\nhttp://192.168.50.6:8983/solr/client_rc/select?q=*:*&wt=json&hl=true&hl.fl=id&hl.fragsize=123a\n\nAll requests fail after either of the above hl.encoder or hl.fragsize errors occur: http://192.168.50.6:8983/solr/client_rc/select?q=*:*&wt=json&hl=true&hl.fl=id\n\nAfter finding this, we tested many other parameters outside/inside of the \"hl\" namespace, but it seems that only hl.encoder and hl.fragsize cause the problem. The first request gives you back the proper validation error. \n\n*However, all future requests that use &hl=true&hl.fl=any_stored_field are stuck in the \u200bTokenStream contract violation: close() error state.*\n\nIt only affects the single Solr core, and doesn't permanently corrupt the index, just something is racing in the running Solr application it looks like from some error state not being properly handled.\n\nTo recover, you can UNLOAD + CREATE the core, or to RELOAD using Solr admin.\n\n\u2014\n\nFull stack trace for the error:\n\u200b\u200b\u200b\u200bjava.lang.IllegalStateException: TokenStream contract violation: close() call missing\n\tat org.apache.lucene.analysis.Tokenizer.setReader(Tokenizer.java:90)\n\tat org.apache.lucene.analysis.Analyzer$TokenStreamComponents.setReader(Analyzer.java:323)\n\tat org.apache.lucene.analysis.Analyzer.tokenStream(Analyzer.java:185)\n\tat org.apache.solr.highlight.DefaultSolrHighlighter.createAnalyzerTStream(DefaultSolrHighlighter.java:642)\n\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingByHighlighter(DefaultSolrHighlighter.java:494)\n\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DefaultSolrHighlighter.java:414)\n\tat org.apache.solr.handler.component.HighlightComponent.process(HighlightComponent.java:144)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:218)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1976)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:777)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n\tat org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:82)\n\tat org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:294)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:368)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\n\tat org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\u200b---\n\nAfter it's been in this bad state for a while, we start to see seemingly unrelated errors like this during indexing, which prevents index updates from completing. I'm not sure how they are related, but it only appears to happen during the bugged state:\n\norg.apache.solr.common.SolrException: Exception writing document id events_23431 to the index; possible analysis error.\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:168)\n\tat org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:69)\n\tat org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalAdd(DistributedUpdateProcessor.java:926)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.versionAdd(DistributedUpdateProcessor.java:1080)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:692)\n\tat org.apache.solr.handler.loader.JsonLoader$SingleThreadedJsonLoader.handleAdds(JsonLoader.java:460)\n\tat org.apache.solr.handler.loader.JsonLoader$SingleThreadedJsonLoader.processUpdate(JsonLoader.java:132)\n\tat org.apache.solr.handler.loader.JsonLoader$SingleThreadedJsonLoader.load(JsonLoader.java:106)\n\tat org.apache.solr.handler.loader.JsonLoader.load(JsonLoader.java:68)\n\n\u2014\n\nFor now, we'll look into performing some pre-validation of hl.fragsize and hl.encoder on our end before connecting to Solr. For better or worse, uur applications currently pass-through many arguments directly to Solr, so this is a pretty big concern for us to resolve.\n\nI also sent this to the general security mailing list, but with a different subject line \"Lucene/Solr - Able to corrupt Solr instance via simple malformed URL query parameters\"",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-11T14:30:47+0000",
            "content": "I saw your email Aaron and I responded to internal ASF channels; I don't know if you were forwarded my long response.  Any way, I filed https://issues.apache.org/jira/browse/LUCENE-7901 after writing my response.\n\nSearch apps should should validate arguments before passing to Solr. ",
            "author": "David Smiley",
            "id": "comment-16082282"
        },
        {
            "date": "2017-07-11T16:45:45+0000",
            "content": "Thank you. I wasn't forwarded any response prior to this. Our solution for now is to validate everything we can before we pass it on to Solr. Is this still an issue on newer Solr versions? When I asked around in IRC and was debugging, the person using Solr 6.x was unable to reproduce, but I wasn't able to verify that myself. ",
            "author": "Aaron Queen",
            "id": "comment-16082496"
        },
        {
            "date": "2017-07-11T19:44:05+0000",
            "content": "I think this has affected Solr since 4.0, possibly prior.\n\nReproducibility will be random based on TokenStream filters cached in ThreadLocals; so this is a nasty situation indeed.  The root cause nature of this isn't highlighting, by the way, it's: LUCENE-6979 ",
            "author": "David Smiley",
            "id": "comment-16082843"
        },
        {
            "date": "2017-07-11T19:50:53+0000",
            "content": "If you are using Solr 6.4 or later, you can use the UnifiedHighlighter which doesn't suffer from this nor from potential bugs in highlighting components as it takes great care to close the TokenStream.  I hardened the UH for this when I discovered LUCENE-6979.  You can see the ref guide which covers the highlighters to see what options are supported.  If you need the original Highlighter for reasons other than possibly using an older Solr version, I'd be interested to know what those reasons are.  There are feature gaps. ",
            "author": "David Smiley",
            "id": "comment-16082859"
        },
        {
            "date": "2018-09-07T11:09:23+0000",
            "content": "Is this a security issue David Smiley or can we make it public? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16606992"
        },
        {
            "date": "2018-09-07T13:16:02+0000",
            "content": "I'm making this issue public. \u00a0It's not a security issue because applications should prevent external/outside inputs from using an arbitrary value for hl.encoder. ",
            "author": "David Smiley",
            "id": "comment-16607113"
        },
        {
            "date": "2018-09-07T13:19:28+0000",
            "content": "Practically speaking, this is fixed indirectly by\u00a0LUCENE-7901 in 7.0. ",
            "author": "David Smiley",
            "id": "comment-16607116"
        }
    ]
}