{
    "id": "LUCENE-5790",
    "title": "broken compareTo in MutableValueDouble and MutableValueBool - affects grouping when exists==false",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "On the solr-user mailing list, Ebisawa & Alex both commented that they've noticed bugs in the grouping code when some documents don't have values in the grouping field.\n\nIn Ebisawa's case, he tracked this down to what appears to be some bugs in the logic of the \"compareSameType\" method of some of the MutableValue implementations.\n\nThread: https://mail-archives.apache.org/mod_mbox/lucene-solr-user/201406.mbox/%3C84f86fce4b8f42268048aecfb2806a8c@SIXPR04MB045.apcprd04.prod.outlook.com%3E",
    "attachments": {
        "LUCENE-5790.patch": "https://issues.apache.org/jira/secure/attachment/12652716/LUCENE-5790.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14045356",
            "author": "Hoss Man",
            "content": "Starting point for a more comprehensive test patch of the MutableValue API (it doesn't seem to have any specific unit tests yet \u2013 just tests via Grouping)\n\nThis is the most trivial way to demonstrate the failure...\n\n\npublic void testDoubleTrivially() {\n  MutableValueDouble xxx = new MutableValueDouble();\n  xxx.exists = false;\n  assertEquals(0, xxx.compareTo(xxx));\n}\n\n\n\n...a mutable double that does not exist can't be compared to itself.\n\nEbisawa observed simila problems in other MutableValue subclasses that we should also audit & test for. ",
            "date": "2014-06-27T00:03:25+0000"
        },
        {
            "id": "comment-14045395",
            "author": "Yonik Seeley",
            "content": "Yep... this code is incorrect:\n\n    MutableValueDouble b = (MutableValueDouble)other;\n    int c = Double.compare(value, b.value);\n    if (c != 0) return c;\n    if (!exists) return -1;\n    if (!b.exists) return 1;\n    return 0;\n\n\n\nIt should be:\n\n    MutableValueDouble b = (MutableValueDouble)other;\n    int c = Double.compare(value, b.value);\n    if (c != 0) return c;\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n\n\n\nI'm surprised the random grouping code didn't catch this.  Perhaps the test didn't use any missing values? ",
            "date": "2014-06-27T00:47:21+0000"
        },
        {
            "id": "comment-14045546",
            "author": "Hoss Man",
            "content": "It should be: ...\n\nEven that looks wrong to me based on the mutable contract as it exists \u2013 as things stand, it seems like the very first check must be if (!(exists == b.exists) ) return 0;  ... because if the exist flag on both values is false, then we should not make any comparison of the values.\n\nExample: shouldn't this assert be valid?\n\nmvalXXX.value = 42;\nmvalYYY.value = 999;\nmvalXXX.exists = mvalYYY.exists = false;\nassertEquals(0, mvalXXX.compareTo(mvalYYY));\n\n\n\nEDIT: ment to have: if (!(exists || b.exists) ) return 0; ",
            "date": "2014-06-27T05:29:50+0000"
        },
        {
            "id": "comment-14045549",
            "author": "Hoss Man",
            "content": "updated description: forgot mail thread link when i filed issue ",
            "date": "2014-06-27T05:31:53+0000"
        },
        {
            "id": "comment-14045899",
            "author": "Yonik Seeley",
            "content": "because if the exist flag on both values is false, then we should not make any comparison of the values.\n\nIf you give free reign for anyone to set the values independently, yes.\nValue setters currently ensure that the default value (0 for numerics) is set if exists == false. ",
            "date": "2014-06-27T12:30:10+0000"
        },
        {
            "id": "comment-14046222",
            "author": "Hoss Man",
            "content": "If you give free reign for anyone to set the values independently, yes.\n\nthat is, in fact, exactly what the API currently does.\n\nValue setters currently ensure that the default value (0 for numerics) is set if exists == false.\n\nif we're going to have that expectation on the callers it should be documented and there should be some asserts in the code to ensure it.\n\n\n\nUpdated patch with yonik's suggested fix + some class level docs  explaining the requirements on the callers + some assertions in key methods that it's pre-conditions aren't violated.\n\nIf folks think this is a better way to go then accounting for the possibility that \"value!=0\" when \"exists==false\" in hashCode/equals/compareTo i'm fine with that \u2013 but we still need to audit the other impls & add tests for them as well. ",
            "date": "2014-06-27T18:19:51+0000"
        },
        {
            "id": "comment-14052040",
            "author": "Hoss Man",
            "content": "updated patch:\n\n\tcontinues along assumption of the previous patch (that callers who set exist=false must reset value to default) per yonik's comments\n\tadds class level javadocs explaining this expecation of the caller\n\tadds additional tests of each type of MutableValue\n\tin addition to yonik's MutableValueDouble fix from the previous patch, this also includes Ebisawa's MutableValueBool fix.\n\tAlso includes a randomized solr grouping test that heavily stresses docs with missing values in the grouping fields, and demonstrates both of the bugs Ebisawa mentioned in his email (w/o the fixes of course)\n\n\n\n\nI think this is ready to commit. ",
            "date": "2014-07-04T00:18:04+0000"
        },
        {
            "id": "comment-14054337",
            "author": "Hoss Man",
            "content": "the last patch included the javadoc changes to all the MutableValue classes, but i had forgetten to copy the asserts from the early patch to MutableValueDouble into the rest of the classes this patch rectifies that.\n\nI'll commit once my test run finishes. ",
            "date": "2014-07-08T00:47:54+0000"
        },
        {
            "id": "comment-14054380",
            "author": "ASF subversion and git services",
            "content": "Commit 1608639 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1608639 ]\n\nLUCENE-5790: Fix compareTo in MutableValueDouble and MutableValueBool, this caused incorrect results when grouping on fields with missing values ",
            "date": "2014-07-08T01:23:13+0000"
        },
        {
            "id": "comment-14054389",
            "author": "ASF subversion and git services",
            "content": "Commit 1608640 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1608640 ]\n\nLUCENE-5790: Fix compareTo in MutableValueDouble and MutableValueBool, this caused incorrect results when grouping on fields with missing values (merge r1608639) ",
            "date": "2014-07-08T01:29:59+0000"
        },
        {
            "id": "comment-14054391",
            "author": "Hoss Man",
            "content": "update summary ",
            "date": "2014-07-08T01:30:46+0000"
        },
        {
            "id": "comment-14054392",
            "author": "Hoss Man",
            "content": "Committed revision 1608639.\nCommitted revision 1608640.\n\nthanks everybody. ",
            "date": "2014-07-08T01:31:17+0000"
        }
    ]
}