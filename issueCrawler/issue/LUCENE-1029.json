{
    "id": "LUCENE-1029",
    "title": "Illegal character replacements in ISOLatin1AccentFilter",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "The ISOLatin1AccentFilter class is responsible for replacing \"accented characters in the ISO Latin 1 character set by their unaccented equivalent\".\n\nSome of the replacements performed for scandinavian characters (used e.g. in the finnish, swedish, danish languages etc.) are illegal. The scandinavian characters are different from the accented characters used e.g. in latin based languages such as french in that these characters (\u00e4, \u00f6, \u00e5) represent entirely independent sounds in the language and therefore cannot be represented with any other sound without change of meaning. It is therefore illegal to replace these characters with any other character.\n\nThis means for example that you can't change the finnish word s\u00e4\u00e4 (weather) to saa (will have) because these are two entirely different words with different meaning. The same applies to scandinavian languages as well.\n\nThere's no connection between the sounds represented by \u00e4 and a; \u00f6 and o or \u00e5 and a. \n\nIn addition to the three characters mentioned above danish and norwegian use other special characters such as \u00f8 and \u00e6. It should be checked if the replacement is legal for these characters.",
    "attachments": {
        "ISOLatin1AccentFilter-by-Collator.patch": "https://issues.apache.org/jira/secure/attachment/12377765/ISOLatin1AccentFilter-by-Collator.patch",
        "ISOLatin1AccentFilter-javadoc.patch": "https://issues.apache.org/jira/secure/attachment/12367799/ISOLatin1AccentFilter-javadoc.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-10-15T10:39:24+0000",
            "content": "This is true for other european languages, too. In Germany it is also a difference between \"\u00e4\" and \"a\" (it sounds different). A correct replacement in German would be to replace \"\u00e4\" by \"ae\" (two chars).\nBut I think it is not a problem. The real use of this filter is to enable people coming from other countries without the keys on their keyboard to search in a lucene index. Many americans for example search for the German last name \"M\u00fcller\" always by typing \"Muller\", because they cannot enter the umlaut. In Scandianian languages it will be the same, they would enter \"o\" instead of \"\u00f8\". The accent filter is just to enable this. If you create an index just for one scandinavian country, just leave this filter out.\nAnd in principle it is no problem to find documents that does not match the entered keywords exact. \nThe filter is the same like the Soundex filter. After a transformation to soundex the word lokks different and has never his original meaning  ",
            "author": "Uwe Schindler",
            "id": "comment-12534797"
        },
        {
            "date": "2007-10-15T11:18:15+0000",
            "content": "I have to disagree, I think it's a problem that the filter makes illegal character replacements.\nSoundex match is different since by definition it's all about non-exact or approximate matching.\n\nIn some languages accented characters may have equivalent unaccented characters with which the accented ones may be replaced without change or loss of meaning.\nSome of the ISOLatin1AccentFilter are legal while others are illegal. The illegal ones should be fixed. ",
            "author": "Marko Asplund",
            "id": "comment-12534800"
        },
        {
            "date": "2007-10-15T11:37:43+0000",
            "content": "I think Uwe nailed this one. Stripping accents in general is just not \"legal\". But many times it is desirable. This filter does that for you. It goes without saying that if you strip the accent you change the meaning...likewise, when you stem a word you create illegal words...\n\np.s.\n\nChanging this filter is not really a great option as it would break indexes out there that use it. I think the better idea would be to create a new stripper that has the alternate functionality that you are thinking of \u2013 rather than stripping accents, replace accented characters with letters that approximate the original sound/meaning. ",
            "author": "Mark Miller",
            "id": "comment-12534804"
        },
        {
            "date": "2007-10-15T11:46:21+0000",
            "content": "I'm on Markos line here.\n\nIf you are to compare with stemmers, consider that these creates unique tokens that does not interfere with semantic meanings.\n\nWith the accent filter, running the Swedish word \"k\u00f6n\" through the filter would create \"kon\". The first means \"gender\" and the second \"cow\". That would not be accetable.\n\nI say this filter needs to be more configurable.\n ",
            "author": "Karl Wettin",
            "id": "comment-12534810"
        },
        {
            "date": "2007-10-15T11:58:00+0000",
            "content": "> With the accent filter, running the Swedish word \"k\u00f6n\" through the filter would create \"kon\". The first means \"gender\" and the second \"cow\". That would not be accetable.\n\nI am feeling lazy right now, but it seems to me you could find a similar rare stemming example (eg something that means something else in its stemmed form). The process is algorithmic after all, and there are many language with plenty of words out there.\n\nRegardless, it doesn't seem this filter claims it will maintain the meaning of \"k\u00f6n\"...rather it will strip the '..' off the top of the 'o'. Its a brute force and somewhat dangerous filter from the get go...stripping accents its not a valid language operation that I know of.\n\nI'll leave at that from my side of the argument <g> Let the Lucene gods speak. ",
            "author": "Mark Miller",
            "id": "comment-12534814"
        },
        {
            "date": "2007-10-15T12:03:36+0000",
            "content": ">> With the accent filter, running the Swedish word \"k\u00f6n\" through the filter would \n>> create \"kon\". The first means \"gender\" and the second \"cow\". That would not be accetable.\n>\n> I am feeling lazy right now, but it seems to me you could find a similar rare stemming\n> example (eg something that means something else in its stemmed form). The process\n> is algorithmic after all, and there are many language with plenty of words out there.\n\nJust to point out, pretty much any small (less than say 6 letters or so) in Swedish containing \u00e5, \u00e4 or \u00f6 would get a complete different meaning if you replace the letters.\n\n\n ",
            "author": "Karl Wettin",
            "id": "comment-12534818"
        },
        {
            "date": "2007-10-15T12:15:57+0000",
            "content": "It's also very easy to find examples in the finnish language where the meaning of the word changes when you make the character replacements done by the filter class.\n\nJust to give you a some examples:\n\n\ts\u00e4\u00e4 (weather) ==> saa (will have)\n\tp\u00e4ssi (goat) ==> passi (passport)\n...\n\n\n\nThe filter class Javadoc says the following:\n\n\"A filter that replaces accented characters in the ISO Latin 1 character set (ISO-8859-1) by their unaccented equivalent. The case will not be altered.\"\n\nIn my opinion changing the meaning of a word does not qualify as an \"equivalent\" replacement. ",
            "author": "Marko Asplund",
            "id": "comment-12534829"
        },
        {
            "date": "2007-10-15T12:28:41+0000",
            "content": "Transliteration rules are language dependent. I suggest that the documentation for the ISOLatin1AccentFilter be adjusted to match it's behavior, stating that it strips diacritics from characters and does further substitutions (giving the precise list) and that it does not do transliteration. Further give examples as stated in the above comments that the results for such a stripping may result in examples that are entirely inappropriate.\n\nICU4J can be used to do per language transliteration.  IIRC, dependency on third party code is allowed in contrib. So, it would be appropriate for such filters to be in contrib. ",
            "author": "DM Smith",
            "id": "comment-12534839"
        },
        {
            "date": "2007-10-15T21:47:38+0000",
            "content": "The functionality of ISOLatin1AccentFilter shouldn't change in a way that wouldn't be bckward compatible.  if people feel the documentation is misleading and doesn't accurately reflect what the Filter does, then by all means please submit a documentation patch.\n\nfirst and foremost the purpose of this filter is to replace accented characters with non-accented characters ... the equivalence described in the javadocs is one of visual character equivalence, not of semantic word equivalence \u2013 that would be a lot more complicated.  if anyone would like to submit a patch contianing a new filter that is capable of doing that, i'm sure the community would certianly welcome it. ",
            "author": "Hoss Man",
            "id": "comment-12534987"
        },
        {
            "date": "2007-10-16T02:20:14+0000",
            "content": "Hoss Man - 15/Oct/07 02:47 PM\n> the equivalence described in the javadocs is one of visual character equivalence, not of semantic word equivalence - that would be a lot more complicated. if anyone would like to submit a patch contianing a new filter that is capable of doing that, i'm sure the community would certianly welcome it.\n\nI think you missunderstand why I focused on the stemmer. My point was that this filter can not be compared with stmmer as in earlier posts.\n\nI do not think that the documentation is missleadning, nor do I think there is any need to break the backwards compability. All I say is that I welcome a solution that makes this filter more configurable. Not sure what a smart way to do that would be though. I'm open for a discussion. Perhaps one could feed it with exceptions, perhaps a per language definition, perhaps something else? ",
            "author": "Karl Wettin",
            "id": "comment-12535040"
        },
        {
            "date": "2007-10-16T03:30:54+0000",
            "content": "One could maintain compatibility by adding a constructor that supplies a transliteration, where a transliteration is an implementation of an interface Transliteration. The default would be the current behavior. But I don't think that buys very much. It is kind of like saying a filter can contain a filter. ",
            "author": "DM Smith",
            "id": "comment-12535047"
        },
        {
            "date": "2007-10-16T03:51:55+0000",
            "content": "My comment about stemming was not meant to compare a stemmer to a diacritical stripper, but rather to point out that the result of such an operation does not necessarily have to create something 'legal' (just as a stemmer does not create 'legal' words). This was in response to the comment 'Some of the ISOLatin1AccentFilter are legal while others are illegal. '\n\nYour point about semantic meaning is well taken, but was not intended to be part of the comparison I was going for. My bad. \n\nI think that the fact that ripping diacriticals can change the meaning of words goes without saying...otherwise, why even have them in the language? As Uwe said, the main motivating factor is to allow easy entry with the keyboard of another language. Of course this must come with a compromise. Other search engines I have seen offer the exact functionality of this class. (CPL, SearchServer, etc)\n\nLiterally, this thing is called an accent filter...letters go in, accents come off. Doing more really does seem like a job for another class. If I can borrow a word I didn't know from DM Smith, transliteration seems to go beyond an ISOLatin1AccentFilter. This is a tough sell I know \u2013 programmers seem to push the definition of filter to its limits and IMHO into the realm of transform/translate.\n\nAnyhow...I apologize for beating a dead horse...<g>\n\nedit better mention that I realize my filter comment above does not necessarily fit with Lucene's already well defined use of the word Filter. Not looking to start that battle. ",
            "author": "Mark Miller",
            "id": "comment-12535049"
        },
        {
            "date": "2007-10-16T06:59:08+0000",
            "content": "I think the class javadoc is very misleading so I'm attaching a documentation patch.\n\nFor one the scandinavian characters do not contain diacritical marks or accents.  The dots in \u00e4 and \u00f6 as well as the ring in \u00e5 is considered part of the letter, not diacritics. The class name implies that it does something with accents so for this reason I would not have expected the class to replace the scandinavian characters.\n\nThe javadoc also says it replaces characters with their \"equivalent\" ASCII characters. There are no equivalents for the scandinavian characters. ",
            "author": "Marko Asplund",
            "id": "comment-12535165"
        },
        {
            "date": "2007-10-21T15:06:48+0000",
            "content": "\nI think , the phrase\n\n+ * Please note that the replacements performed by this filter will result in words changing their original semantic meaning in many cases.<br>\n>>>> + * It will also be impossible to search for the word in its original form. <<<<<\n\nis wrong.\n\nIf you index and then search  the text \"k\u00f6n\" using the same analyzer that uses ISOLatin1AccentFilter, you will get the result. Who cares that it is stored as \"kon\" in the index.( of course searching \"k\u00f6n\" will also return results containing \"kon\" , but there are a lot of cases where  it is better getting more than getting nothing).\n\nDIGY ",
            "author": "Digy",
            "id": "comment-12536510"
        },
        {
            "date": "2007-10-22T07:44:29+0000",
            "content": "Perhaps it could be expressed more accurately using the following sentence:\n\nIt will be impossible to search for a word in its original form without also matching filtered forms of the word at the same time. ",
            "author": "Marko Asplund",
            "id": "comment-12536589"
        },
        {
            "date": "2008-03-13T09:10:49+0000",
            "content": "I'd like to comment that we have another tool for this. \n\njava.text.Collator can collate the texts, and the instance is base on Locale, wow! So, if we use this collator, you might get a better query result, i.e, more low search noise that German \"\u00e4\" might hit with \"ae\".\n\nI'd like to submit a patch later. ",
            "author": "Hiroaki Kawai",
            "id": "comment-12578195"
        },
        {
            "date": "2008-03-13T10:26:25+0000",
            "content": "Wrote a patch that use java.text.Collator.  ",
            "author": "Hiroaki Kawai",
            "id": "comment-12578228"
        },
        {
            "date": "2008-05-17T04:31:08+0000",
            "content": "I only skimmed the comments.\nHas anyone tried Hiroaki's patch?  Does it satisfy your needs?  Marko, Uwe, Karl, Mark? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12597703"
        },
        {
            "date": "2008-05-19T07:30:28+0000",
            "content": "I've switched projects some time ago so it'll take while for me to setup the tests.\nI'll try to get around doing this at a later time. ",
            "author": "Marko Asplund",
            "id": "comment-12597883"
        },
        {
            "date": "2009-08-12T00:05:24+0000",
            "content": "The new ASCIIFoldingFilter is the current best work on this. Future issues should be targeted at that - but I think it does what we want it to do - individual issues can be brought up if they exist. ",
            "author": "Mark Miller",
            "id": "comment-12742127"
        }
    ]
}