{
    "id": "LUCENE-3441",
    "title": "Add NRT support to facets",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/facet"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently LuceneTaxonomyReader does not support NRT - i.e., on changes to LuceneTaxonomyWriter, you cannot have the reader updated, like IndexReader/Writer. In order to do that we need to do the following:\n\n\n\tAdd ctor to LuceneTaxonomyReader to allow you to instantiate it with LuceneTaxonomyWriter.\n\tAdd API to LuceneTaxonomyWriter to expose its internal IndexReader\n\tChange LTR.refresh() to return an LTR, rather than void. This is actually not strictly related to that issue, but since we'll need to modify refresh() impl, I think it'll be good to change its API as well. Since all of facet API is @lucene.experimental, no backwards issues here (and the sooner we do it, the better).",
    "attachments": {
        "LUCENE-3441.patch": "https://issues.apache.org/jira/secure/attachment/12554169/LUCENE-3441.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-21T15:41:45+0000",
            "content": "Newb question: Shouldn't you also commit in the constructor, so you can create a reader right after? For example, to later work with the taxReader through refresh(), when i start clean, I have to initialize: \nw= LuceneTaxonomyWriter(...),\nw.commit(),\nnew LuceneTaxonomyReader(...), \nelse it throws no segment exception(segments which you'd expect to be there because of the taxWriter ctor, or is that just me ?). ",
            "author": "Mihai Caraman",
            "id": "comment-13109584"
        },
        {
            "date": "2011-09-21T15:56:28+0000",
            "content": "It would be great if the cost of (re)opening a new LTR is.  Also an explanation of what it's doing underneath. ",
            "author": "Jason Rutherglen",
            "id": "comment-13109599"
        },
        {
            "date": "2011-09-21T18:18:15+0000",
            "content": "Shouldn't you also commit in the constructor\n\nLuceneTaxonomyWriter behaves just like IndexWriter. Today (I think since 3.1), opening an IndexWriter is just another transaction that you should commit if you want IndexReaders to see it. So if you try:\n\nIndexWriter w = new IndexWriter(emptyDir, new IWC());\nIndexReader r = IndexReader.open(emptyDir);\n\n\nyou'll get an exception as well.\n\nIf you want that to work, you must insert a commit() call after line #1, and LTW follows this logic.\n\nAlso an explanation of what it's doing underneath\n\nRefreshing LTR means reopening its internal IndexReader instance. If it has changed, then LTR updates its parents array with the newly added categories. Usually, assuming the taxonomy does not grow a lot (i.e., usually after some point your taxonomy is relatively fixed, and new categories are not added often \u2013 much like an index lexicon), this additional update of the parents array is quick. ",
            "author": "Shai Erera",
            "id": "comment-13109735"
        },
        {
            "date": "2012-11-19T13:26:46+0000",
            "content": "Patch introduces NRT support by doing the following:\n\n\n\tAdd a constructor which takes DirTaxoWriter, from which DirTaxoReader obtains the internal IndexWriter instance, to obtain NRT readers.\n\n\n\n\n\tRemove refresh() in exchange for a static TaxonomyReader.openIfChanged. Similar to DirectoryReader, the method either returns null if no changes were made to the taxonomy, or a new TR instance otherwise.\n\n\n\n\n\tExtracted the logic of creating the ParentArray and ChildrenArrays from DirTaxoReader into their own classes. As a result:\n\t\n\t\tDirTaxoReader code greatly simplified\n\t\tThese classes are now immutable, which simplified even more the logic of DirTaxoReader.\n\t\n\t\n\n\n\n\n\tTaxonomyReader made abstract class instead of an interface, and few methods (e.g. close(), incRef(), decRef() etc.) were pulled to it from DirTaxoReader and made final.\n\n\n\nNot strictly related, but I could not avoid these changes too:\n\n\n\tRemoved the over-verbosing in DirTaxoReader. Some is unnecessary anymore b/c DirTaxoReader is simplified, other was just too much IMO.\n\n\n\n\n\tImproved the documentation of the different methods, again mostly by shortening them and keep them focused.\n\n\n\nNOTE: I put a CHANGES entry under the back-compat section of 4.1. I intend to commit this to 4.x, and it is sort of a back-compat break, even though a simple one.\n\nThere's one nocommit which I'd love if someone can take a look at and perhaps propose a solution. I documented it there, but I'll repeat the issue here - DirTaxoReader maintains two LRU caches which I'd like to share with the new instance returned from openIfChanged. Currently the code copies them fully, which is not so efficient in an NRT case.\n\nWhile I could just share the instance, I'm worried that two TR instances have e.g. the ability to change the cache size, or add/remove entries from it.\n\nAlso note the weird behavior I mentioned about cloning the cache, as opposed to add it all to a new instance. I still didn't get to the bottom of why cloning the cache is so horribly slow, but adding it to a fresh new instance is so cheap ... ",
            "author": "Shai Erera",
            "id": "comment-13500217"
        },
        {
            "date": "2012-11-19T13:33:30+0000",
            "content": "While I could just share the instance\n\nSorry, forgot to complete the idea \u2013 simply sharing the instances currently won't work, b/c e.g. when TR.close() is called, the cache is clear()'ed, which will affect the other instance as well. A simple solution would be to remove the 'final' modifier from the cache member, and nullify the cache on close(), instead of clear()-ing.\n\nThat way, if we rely on TR instances that are reopened to be immediately closed by the caller, and sharing the cache instances may not be so bad. ",
            "author": "Shai Erera",
            "id": "comment-13500219"
        },
        {
            "date": "2012-11-19T14:01:55+0000",
            "content": "I don't fully follow all changes in the patch, but generally this sounds like an awesome change!\n\nOn that nocommit ... why not have a single instance of the LRUCache for all time, and never call .clear() on it?  I suspect in practice that .clear() isn't helping much?  Ie it's rare that an app would close the LTR and hold onto the reference to it ...? ",
            "author": "Michael McCandless",
            "id": "comment-13500239"
        },
        {
            "date": "2012-11-19T14:30:52+0000",
            "content": "why not have a single instance of the LRUCache for all time, and never call .clear() on it?\n\nThat will help as long as previous TR instances are indeed on their way to die. Otherwise, if e.g. an app, for some reason, reopens a TR but doesn't close the old one and uses both (again, for some really unknown reason), then two TR instances might affect each other.\n\nNow, since that's a very stupid thing to do, I'm not sure that I care about this much, as long as we preserve correctness. Meaning, that that one instance may reduce the size of the cache, while another increases it - that's the app problem. That that the two instances might evict entries from the LRU cache left and center, that's the app problem.\n\nThe correctness issues that I'm worried about is (suppose that TR-1 and TR-2 share the same instance):\n\n\tTR-1 looks for a category \"foo\", doesn't find it and adds to the cache the fact that the category is unknown\n\tTR-2 looks for the category \"foo\", which exists in its newer version of the taxonomy, and receives the ordinal -1, which denotes that the category doesn't exist \u2014 WRONG !!\n\n\n\nTo solve that, we could not store the fact that a category does not exist in the cache. Really, this shouldn't happen - apps do not ask the taxonomy for random categories. So then:\n\n\n\tTR-1 looks for a category \"foo\", doesn't find it in the cache and DOES NOT update the cache w/ that info. It goes to disk, doesn't find it there, returns -1.\n\tTR-2 looks for the category \"foo\", which exists in its newer version of the taxonomy, fetches it from disk and stores the ordinal in the cache.\n\tTR-1 looks for the category \"foo\" again, now receives an ordinal which is larger than its taxonomy size \u2014 might be a problem !!\n\n\n\nIn general, since I don't think that apps access the taxonomy for random ordinals or categories, the second solution might be good. Never store in the cache the fact that an ordinal/category is not found + don't clear() the cache, only nullify its reference + hope for the best ? ",
            "author": "Shai Erera",
            "id": "comment-13500263"
        },
        {
            "date": "2012-11-19T15:25:39+0000",
            "content": "The side effect of sharing the cache is for TR-1 to receive an ordinal which doesn't actually exist. We can document that if you use openIfChanged, but continue to use the old reader, then this sort of thing can happen. Really, this is not how people should use openIfChanged ...\n\nAnother idea I had is to wrap the cache with an object that keeps track of 'upto'. I.e. TR-1's instance's upto will be e.g. 123. On openIfChanged we allocate a new instance for TR-2, with upto=1035, sharing the same LRU instance. On each access to the cache, we check if the returned ordinal is <= upto, otherwise return INVALID.\n\nBut that adds another 'if' to every cache-check. How expensive is it, not sure yet, since the taxonomy is not accessed for so many facets.\n\nIt feels like we need to make some compromise here - either at runtime performance or possible correctness. Since the usage of openIfChanged is well defined, and assuming that people who interact with the taxonomy are aware Lucen's NRT, should we rely on the old taxo reader instances to not be used after openIfChanged? ",
            "author": "Shai Erera",
            "id": "comment-13500306"
        },
        {
            "date": "2012-11-20T10:00:26+0000",
            "content": "Went through the patch and it looks good. \n\nOne symmetry question I have - TR is now abstract class and TW still interface. Can it be that we should make TW also abstract class?\n\nA few minor comments:\n\nParentArray: \n\n\tconstructors are public but have no Javadoc. Are they meant for external (outside the taxonomy package) usage?\n\n\n\nDTR: \n\n\tSemi-cosmetic issue - I would move the first (non-public) constructor after the two public ones, confused me a bit to see that one first.\n\tLine 127: unnecessary \"to\" in Javadoc of param directory.\n\t4000 appears 4 times in the code, would rather have it once as a constant.\n\n ",
            "author": "Sivan Yogev",
            "id": "comment-13500953"
        },
        {
            "date": "2012-11-20T11:38:08+0000",
            "content": "Since the usage of openIfChanged is well defined, and assuming that people who interact with the taxonomy are aware Lucen's NRT, should we rely on the old taxo reader instances to not be used after openIfChanged?\n\nHmm, for NRT the old reader should continue working just fine even if a new reader was openIfChange'd off of it.  EG there may be queries in-flight still against the old reader.\n\nHowever, for TR, would the old TR ever receive a request to look up an out-of-bounds ord?  It shouldn't, right?  Can we declare that the results when you pass out of bounds ords are not defined, ie that's abuse of the API? ",
            "author": "Michael McCandless",
            "id": "comment-13501120"
        },
        {
            "date": "2012-11-20T12:34:18+0000",
            "content": "would the old TR ever receive a request to look up an out-of-bounds ord\n\nIn fact, it could. Like IR, the old TR still lives for old queries in flight. It is possible that TR-1 received a FacetRequest with a category that it doesn't recognize, but because the cache is now shared, and the TR-2 recognizes that category and put it in the cache, TR-1 will receive its ordinal, which is out-of-bound.\n\nTook a re-look at the code, and I think that it's solvable by having TR do a bounds check. It is a very simple and cheap check, only one 'if', which will happen, in practice, only for the top-K categories and the FacetRequest initially. I.e., the entire faceted search process \u2013 aggregating the categories, determining top-K etc., all happen on the ordinals that are known to the search index (IR-1, that is coupled with TR-1).\n\nIn fact, the labeling that IR-1/TR-1 will do to the top-K cannot out-of-bound, so actually only the FacetRequest may out-of-bound. Still, I think that it's safer to add the bounds check to both caches.\n\nI will post a new patch soon, compiled with the comments from Sivan (thanks !), and removing the nocommit. ",
            "author": "Shai Erera",
            "id": "comment-13501141"
        },
        {
            "date": "2012-11-20T15:42:46+0000",
            "content": "Patch addresses most of Sivan's comments. Also fixes the cache sharing by sharing the instances and stop putting in the cache the fact that a category wasn't found. Also DirTaxoReader does a bound check when needed, because of cache sharing.\n\nI added few tests (w/ the help of Gilad) and on the way realized that I didn't handle DirTaxoWriter.replaceTaxonomy(), so had to fix doOpenIfChanged to check the taxoEpoch member from DirTaxoWriter, in case we're in NRT.\n\nAll tests pass. In general I think that it's ready to go in. ",
            "author": "Shai Erera",
            "id": "comment-13501238"
        },
        {
            "date": "2012-11-21T13:28:26+0000",
            "content": "Patch looks very good.\n\n+1. ",
            "author": "Gilad Barkai",
            "id": "comment-13501966"
        },
        {
            "date": "2012-11-21T15:30:36+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412149\n\nLUCENE-3441: facets NRT support \n ",
            "author": "Commit Tag Bot",
            "id": "comment-13502048"
        },
        {
            "date": "2012-11-21T16:12:08+0000",
            "content": "I added a TODO to consider switching to use DoubleBarrleLRUCache (to DirTaxoReader). Also added some javadocs to DTR.doOpenIfChanged, noting about the cache sharing.\n\nI ran all tests with 30 iterations on trunk and committed.\nAfter I ported to 4x, I hit this failure:\n\norg.apache.lucene.index.CorruptIndexException: Missing parent data for category 0\n\tat __randomizedtesting.SeedInfo.seed([A790471136DA8197:3D43CAE660B7F604]:0)\n\tat org.apache.lucene.facet.taxonomy.directory.ParentArray.initFromReader(ParentArray.java:116)\n\tat org.apache.lucene.facet.taxonomy.directory.ParentArray.<init>(ParentArray.java:66)\n\tat org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.<init>(DirectoryTaxonomyReader.java:92)\n\tat org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.doOpenIfChanged(DirectoryTaxonomyReader.java:238)\n\tat org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.doOpenIfChanged(DirectoryTaxonomyReader.java:1)\n\tat org.apache.lucene.facet.taxonomy.TaxonomyReader.openIfChanged(TaxonomyReader.java:95)\n\tat org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testOpenIfChangedManySegments(TestDirectoryTaxonomyReader.java:224)\n\nNOTE: reproduce with: ant test  -Dtestcase=TestDirectoryTaxonomyReader -Dtests.method=\"testOpenIfChangedManySegments \n{#66 seed=[A790471136DA8197:3D43CAE660B7F604]}\n\" -Dtests.seed=A790471136DA8197 -Dtests.slow=true -Dtests.locale=lt_LT -Dtests.timezone=Australia/South -Dtests.file.encoding=UTF-8\nNOTE: test params are: codec=SimpleText, sim=DefaultSimilarity, locale=lt_LT, timezone=Australia/South\nNOTE: Windows 7 6.1 build 7600 amd64/IBM Corporation 1.6.0 (64-bit)/cpus=2,threads=1,free=1071336,total=15596544\nNOTE: All tests run in this JVM: [TestDirectoryTaxonomyReader]\n\nEven though the test is single-threaded, it's not reproducible no matter if I use the master seed or the iteration seed. I can reproduce quite easily though if I add -Dtests.iters=100 and -Dtests.failfast=yes \u2013 but it makes it hard to debug ...\n\nI'm digging. I won't revert the commit to trunk yet, hopefully I'll get to the bottom of it quickly. ",
            "author": "Shai Erera",
            "id": "comment-13502090"
        },
        {
            "date": "2012-11-21T19:14:33+0000",
            "content": "Found the bug. If a new NRT TaxoReader was opened, after the taxonomy segments were merged, it missed few ordinals. This was introduced when I handled a TODO to avoid MultiFields (obviously I didn't handle it well ). I re-introduced MultiFields because the code only iterates on a single posting list, and MultiFields help to keep the code simple, and obviously bug free !\n\nI added a non-random test which exposes the bug.\n\nWill commit to 4x and trunk, and port the new test + fix to trunk as well. ",
            "author": "Shai Erera",
            "id": "comment-13502210"
        },
        {
            "date": "2012-11-21T19:52:33+0000",
            "content": "Added another test which uncovered a wrong assert in ParentArray ctor.\n\nAll tests pass on 4x and trunk. Hopefully it'll remain like that .\n\nResolving for now. Thanks all for the help ! ",
            "author": "Shai Erera",
            "id": "comment-13502248"
        },
        {
            "date": "2012-11-26T21:46:33+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412252\n\nLUCENE-3441: add another test that reproduced a bug on a wrong assert\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13504145"
        },
        {
            "date": "2012-11-26T21:46:34+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412232\n\nLUCENE-3441: facets NRT support\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13504146"
        },
        {
            "date": "2012-11-26T21:46:38+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412249\n\nLUCENE-3441: add another test that reproduced a bug on a wrong assert\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13504154"
        },
        {
            "date": "2012-11-26T21:46:39+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412235\n\nLUCENE-3441: fix bug in ParentArray.initFromReader\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13504155"
        },
        {
            "date": "2013-03-22T16:14:17+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412252\n\nLUCENE-3441: add another test that reproduced a bug on a wrong assert ",
            "author": "Commit Tag Bot",
            "id": "comment-13610512"
        },
        {
            "date": "2013-03-22T16:14:21+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1412232\n\nLUCENE-3441: facets NRT support ",
            "author": "Commit Tag Bot",
            "id": "comment-13610513"
        },
        {
            "date": "2013-05-10T10:32:40+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653688"
        }
    ]
}