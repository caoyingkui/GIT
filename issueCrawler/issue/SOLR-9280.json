{
    "id": "SOLR-9280",
    "title": "make nodeName a configurable parameter in solr.xml",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Originally node name is automatically generated based on <host>:<port>_<context>. Instead it should be configurable in solr.xml",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-07-06T01:52:29+0000",
            "author": "Keith Laban",
            "content": "I started working on this. The approach I am looking is this:\n1) Add nodeName as a solr.xml property\n2) in ZkController when starting if nodeName property is set use this one otherwise fall back to the genericNodeName <host>:<port>_<context> convention\n3) change live nodes to have data in each ephemeral node such that the path name is nodeName and the data is genericNodeName. Essentially building a nodeName -> genericNodeName mapping.\n4) in ZkStateReader change liveNodes from a Set<String> to a Map<String,String>. This can be done without having to change any public interfaces or anything external to the class\n5) the major problem here is the method getBaseUrlForNodeName which takes a nodeName and returns a baseUrl. The method assumes that input nodeName is going to be in the genericNodeName format and there are tests which validate this. What i'm working on doing is creating a new method called getBaseUrlForGenericNodeName which basically does what getBaseUrlForNodeName did the updated version of getBaseUrlForNodeName will do the lookup for genericNodeName in the liveNodes map and then do the generic -> baseUrl conversion. Past that I'm just working on tracking down what uses the original method to see if there will be any issues anywhere. So far it doesn't look like it, but I haven't run the full test suite yet. \n\nDoing some manual testing with the changes i'm able to start two nodes with custom node names and use admin api for creating/modifying/deleting collections and replicas.\n\nOverall this approach is pretty self contained with not a whole lot of code modification. Also, without addition code if you try to start a second node with the same name it will block the instance from starting and timeout and die eventually, which is the desired behavior. \nI hope to have a patch up sometime this week ",
            "id": "comment-15363601"
        },
        {
            "date": "2016-07-08T19:44:24+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user kelaban opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/50\n\n    SOLR-9280 - make nodeName a configurable parameter in solr.xml\n\n    This patch makes live nodeName configurable via solr.xml by setting\n    ```xml\n    <solr>\n        <solrcloud>\n            <str name=\"nodeName\">${solr.nodeName:}</str>\n        </solrcloud> \n    </solr>\n    ```\n\n    To test, I randomly set nodeName in `AbstractFullDistribZkTestBase` for complete coverage.\n\n    I've gotten all tests to pass both when ALWAYS using a random nodeName and with it being set randomly. However during one particular run I got a test failure for the following:\n    `ant test  -Dtestcase=TestReqParamsAPI -Dtests.method=test -Dtests.seed=391BC4715DE8C2FE -Dtests.slow=true -Dtests.locale=pl-PL -Dtests.timezone=Asia/Chungking -Dtests.asserts=true -Dtests.file.encoding=UTF-8` but am unable to reproduce the issue in eclipse and at this time am not sure if its related\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/kelaban/lucene-solr jira/master/SOLR-9280\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/50.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #50\n\n\ncommit b1de1f9ef97a5957747f7fcb9ac9e7ce4acfac84\nAuthor: Keith Laban <klaban1@bloomberg.net>\nDate:   2016-06-30T15:12:16Z\n\n    SOLR-9280 - make nodeName a configurable parameter in solr.xml\n\n ",
            "id": "comment-15368288"
        },
        {
            "date": "2016-07-08T20:12:01+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user kelaban commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/50\n\n    Randomly setting nodeName in tests which extend from `AbstractFullDistribZkTestBase` hits about 60 solr cloud tests. But there are also about 30 other cloud tests which use `MiniSolrCloudCluster` which will  not get this randomness applied. To increase coverage we can add randomness into this class as well. ",
            "id": "comment-15368343"
        },
        {
            "date": "2016-10-17T20:25:24+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user kelaban commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/50\n\n    Updated so the patch now applies cleanly. I've been having trouble getting tests to pass on vanilla master branch, so I cannot tell if this is causing any to fail. I've spot checked a few tests with this patch and they worked fine ",
            "id": "comment-15583342"
        },
        {
            "date": "2016-10-17T20:40:14+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user kelaban commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/50\n\n    Additionally work for SOLR-9281 is being done here (https://github.com/kelaban/lucene-solr/tree/jira/master/SOLR-9281) but will hold out on a PR as it relies on this branch ",
            "id": "comment-15583388"
        }
    ]
}