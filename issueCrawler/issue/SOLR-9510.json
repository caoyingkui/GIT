{
    "id": "SOLR-9510",
    "title": "child level facet exclusions",
    "details": {
        "components": [
            "Facet Module",
            "faceting",
            "query parsers"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Caveat SOLR-12275 bug in Solr 7.3\n{!filters} as wells as filters local param in {!parent filters=...}... and {!child filters=..}... is broken in 7.3, workaround is adding cache=false as a local parameter. SOLR-12275 is fixed in Solr 7.4.\n\nChallenge\n\n\tSince SOLR-5743 achieved block join child level facets with counts roll-up to parents, there is a demand for filter exclusions.\n\n\n\nContext\n\n\tThen, it's worth to consider JSON Facets as an engine for this functionality rather than support a separate component.\n\tDuring a discussion in SOLR-8998 a solution for block join with child level exclusion has been found.\n\n\n\nProposal\n\nIt's proposed to provide a bit of syntax sugar to make it user friendly, believe it or not.\nList of improvements\n\n\tintroducing a local parameter filters for {!parent query parser referring to multiple filters queries via parameter name: {{\n{!parent filters=$child.fq ..}\n..&child.fq=color:Red&child.fq=size:XL}}\n these filters are intersected with a child query supplied as a subordinate clause.\n\tintroducing {!filters param=$child.fq excludeTags=color v=$subq}&subq=text:word&child.fq= {!tag=color}color:Red&child.fq=size:XL it intersects a subordinate clause (here it's subq param, and the trick is to refer to the same query from {{\n{!parent}\n}}), with multiple filters supplied via parameter name param=$child.fq, it also supports excludeTags.\n\n\n\nNotes\n\nRegarding the latter parser, the alternative approach might be to move into {{domain:\n{..}\n}} instruction of json facet. From the implementation perspective, it's desired to optimize with bitset processing, however I suppose it's might be deferred until some initial level of maturity.\nExample\n\nq={!parent which=type_s:book filters=$child.fq v=$childquery}&childquery=comment_t:good&child.fq={!tag=author}author_s:yonik&child.fq={!tag=stars}stars_i:(5 3)&wt=json&indent=on&json.facet={\ncomments_for_author:{\n  type:query,\n  q:\"{!filters param=$child.fq excludeTags=author v=$childquery}\",\n  \"//note\":\"author filter is excluded\",\n  domain:{\n     blockChildren:\"type_s:book\",\n     \"//\":\"applying filters here might be more promising\"\n   }, facet:{\n   authors:{\n      type:terms,\n      field:author_s,\n      facet: {\n          in_books: \"unique(_root_)\"\n        }\n    }\n   }\n} ,\ncomments_for_stars:{\n  type:query,\n q:\"{!filters param=$child.fq excludeTags=stars v=$childquery}\",\n  \"//note\":\"stars_i filter is excluded\",\n  domain:{\n     blockChildren:\"type_s:book\"\n   }, facet:{\n   stars:{\n      type:terms,\n      field:stars_i,\n      facet: {\n          in_books: \"unique(_root_)\"\n        }\n    }\n  }\n}\n}\n\n\nVotes? Opinions?",
    "attachments": {
        "SOLR_9510.patch": "https://issues.apache.org/jira/secure/attachment/12853475/SOLR_9510.patch",
        "SOLR-9510.patch": "https://issues.apache.org/jira/secure/attachment/12912050/SOLR-9510.patch",
        "SOLR-9510-doc.patch": "https://issues.apache.org/jira/secure/attachment/12916111/SOLR-9510-doc.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-19T13:30:03+0000",
            "author": "Mikhail Khludnev",
            "content": "I'm going to work on patch, Yonik Seeley do you have any comments regarding the proposed approach?  ",
            "id": "comment-15588774"
        },
        {
            "date": "2016-10-19T19:23:31+0000",
            "author": "Yonik Seeley",
            "content": "Hmmm, still trying to grok it all.  I'll try to give feedback tomorrow. ",
            "id": "comment-15589602"
        },
        {
            "date": "2016-10-21T00:33:21+0000",
            "author": "Yonik Seeley",
            "content": "OK, here's the way I'm currently thinking about things (hopefully it will add further clarity rather than more confusion \n\nFirst, let's leave aside \"exclusions\" and just look at domain changes in the JSON Facet API for the moment.\n\nExample:\nI find books I've reviewed highly (search for reviews and use block join to get to parent documents):\n\nq={!parent which=type_s:book}user_s:yonik AND rating_i:5\n\n\nNow I want to facet on my review dates.  Since the root domain consists of books, we'll need to map back to reviews (children):\n\n\njson.facet={\n  review_dates : {\n    type: range,\n    field: review_dt,\n    domain: { blockChild : \"type_s:book\" },\n    // additional params start, end, etc.\n  }\n}\n\n\n\nNow there's a problem... when I map back to children, it maps to all of the children (reviews) for each book, when I really want just those reviews that originally mached user_s:yonik AND rating_i:5\nI could perhaps hack it in with multiple levels of query facets (the first to switch the domain, and the second to filter again) but that seems really unfriendly.\nWhat we really need is a way to specify additional filters for any facet.\n\nProposal:\n\njson.facet={\n  review_dates : {\n    type: range,\n    field: review_dt,\n    domain: { blockChild : \"type_s:book\" },\n    filter : [ \"user_s:yonik AND rating_i:5\" ],  // a list of filters... if there is a domain change, they will be applied *after*\n    // additional params start, end, etc.\n  }\n}\n\n\n\nI started with this because we can't really exclude filters from child facets when we don't currently apply any at all!\nI'll split my further thoughts into separate messages to try and keep things manageable. ",
            "id": "comment-15593500"
        },
        {
            "date": "2016-10-21T07:51:19+0000",
            "author": "Mikhail Khludnev",
            "content": "Yep. It make sense. Keep going! Let me rephrase a little:\n\nWhat we really need is a way to specify additional filters for any a few (child level) facets at once, and be able to pick some of them for exclusion.  ",
            "id": "comment-15594398"
        },
        {
            "date": "2016-10-23T19:51:22+0000",
            "author": "Yonik Seeley",
            "content": "Multi-select faceting (see http://yonik.com/multi-select-faceting/ for those new to the concept) works off of tagging top-level filters (fq parameters) and then excluding certain filters by-tag before calculating the facets.\n\nOne issue we face with parent/child facets is that the original filters used to select the child documents (book reviews in our examples) are not top-level filters and hence tagging doesn't work.\n\nFor example, if our root domain consisted of child documents rather than parent documents, then we could have used top-level filters and tagged them:\n\nfq={!tag=USER}user_s:yonik\nfq={!tag=RATING}rating_i:5\n\n\nInstead, those \"filters\" are part of the {!parent} query and can't currently be listed as separate filters, or tagged.\n\nq={!parent which=type_s:book}user_s:yonik AND rating_i:5\n\n\n\nMinimum Requirements\n\nIt appears that the minimum functionality needed to do multi-select faceting with child documents is the filter functionality specified in the previous post.\nSince we're starting with the set of all child documents, the domain need not be recomputed... straight filtering will do.\n\nExample:  From the books we've already selected (books I've reviewed with a 5 star rating), we want to show who submitted the most 5 star reviews.  This requires that we ignore/exclude the user filter (or alternatively, only include the review filter).\n\njson.facet={\n  top_reviewers : {\n     type : terms,\n     field : user_s,\n     domain: { blockChild : \"type_s:book\" },\n     filter : { \"rating_i:5\" }\n}\n\n\n\nAvoid Repitition\n\nIf one doesn't want to repeat the filters everywhere, there needs to be a mechanism to name/tag them so they may be used later by name/tag.\n{!tag=mytag} provides some generic support, but it's less-than friendly when it's not used at the top level.\n\nRather than use generic support, Mikhail gave a specific extension filter to specify filters as parameter names:\n\nq={!parent which=type_s:book filter=$review_filter}\nreview_filter=user_s:yonik\nreview_filter=rating_i:5\n\n\n\nAnd given that these are individual queries, it becomes less onerous to tag them if desired:\n\nq={!parent which=type_s:book filter=$review_filter}\nreview_filter={!tag=USER}user_s:yonik\nreview_filter={!tag=RATING}rating_i:5\n\n\n\nThen the set of things we would want filter to support in the JSON Facet API would be:\n\n\tincluding filters by parameter\n\tincluding filters by tag\n\texcluding filters by tag\n\n\n\nExample: start with all review filters, but exclude any that restrict rating.\n\nfilter : {\n  queryParam : review_filter,  // a query that is retrieved by parameter name\n  excludeTags : RATING\n}\n\n\n\nExample: start with all review filters, but exclude any filters that restrict rating.\n\nfilter : {\n  queryParam : review_filter,  // a query that is retrieved by parameter name\n  excludeTags : RATING\n}\n\n\n\nExample: only apply filters that restrict by user\n\nfilter : {\n  includeTags : USER\n}\n\n\n\nImportant note: this \"excludeTags\" in the filter block is very different than \"excludeTags\" in the domain block (which actually recomputes the domain starting with all documents, but excluding the named filter).\n\nThe {!filters} query type Mikhail lays out does the same thing as a generic query type and thus would be useful outside of JSON Facets.   ",
            "id": "comment-15600214"
        },
        {
            "date": "2017-01-26T02:29:51+0000",
            "author": "Hyun Goo Kang",
            "content": "Hi Mikhail Khludnev, do we have an ETA for this feature? This would allows us to generate multi-select facets with our block-join queries! ",
            "id": "comment-15839067"
        },
        {
            "date": "2017-02-19T16:06:30+0000",
            "author": "Dr Oleg Savrasov",
            "content": "Initial implementation (without bitset processing optimizations). Comments are welcome. ",
            "id": "comment-15873731"
        },
        {
            "date": "2017-05-09T12:46:39+0000",
            "author": "Arpan Gupta",
            "content": "Hi Dr Oleg Savrasov, I am using solr-6.5 and unable to apply the patch.\nWhat is the base solr version for the submitted patch?  ",
            "id": "comment-16002622"
        },
        {
            "date": "2017-05-10T17:24:59+0000",
            "author": "Dr Oleg Savrasov",
            "content": "I created the previous patch using IDEA tool. Normally it works, but this time it looks like it has issues with patch format. Will you try this one, please? ",
            "id": "comment-16005068"
        },
        {
            "date": "2017-06-04T13:24:43+0000",
            "author": "Dr Oleg Savrasov",
            "content": "Arpan Gupta has noticed that proposed approach differs from usual filter exclusions. The problem is that eliminating child filters in facet queries doesn't extend docSet of matched parent objects, it extends the set of child objects in initial parent objects domain only. To extend parent objects domain, we probably need to support similar definition, i.e.\n\ndomain: \n{ blockChildren : type_s:book, excludeTags:stars }\n\nThis makes the syntax a bit more complicated, since same exclusions should be mentioned both in domain (to extend docSet of matched parent objects) and facet query (to extend the set of matched child objects).\n\nThe patch is reworked to support domain filter exclusions, please see TestJsonFacetsWithNestedObjects.testDomainFilterExclusions test as a reference to the new feature. ",
            "id": "comment-16036269"
        },
        {
            "date": "2017-09-04T09:39:38+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch to master, based on the latest available patch. ",
            "id": "comment-16152392"
        },
        {
            "date": "2018-02-19T22:42:51+0000",
            "author": "Mikhail Khludnev",
            "content": "slightly refreshed SOLR_9510.patch.\n\n\tno changes in Lucene codebase\n\tit turns a little bit scary, however query facet is redundant. Anyway, I can't see how to make it shorter:\n\nq={!parent filters=$child.fq which=type_s:book v=$childquery}&\nchildquery=comment_t:*&\nchild.fq={!tag=author}author_s:dan&\nchild.fq={!tag=stars}stars_i:4&\njson.facet={  \n   comments_for_author:{  \n      domain:{  \n         excludeTags:author,                      // 1. rejoin child filters and query, expand parents docset, apply parent filters (I suppose) \n         blockChildren:\"type_s:book\",        // 2. join to expanded children \n         filter:\"{!filters param=$child.fq excludeTags=author v=$childquery}\" // 3. filter them again \n      },\n      type:terms,\n      field:author_s,\n      facet:{  \n         in_books:\"unique(_root_)\"\n      }\n   },\n   comments_for_stars:{  \n      domain:{  \n         excludeTags:stars,\n         blockChildren:\"type_s:book\",\n         filter:\"{!filters param=$child.fq  excludeTags=stars v=$childquery}\"\n      },\n      type:terms,\n      field:stars_i,\n      facet:{  \n         in_books:\"unique(_root_)\"\n      }\n   }\n}\n\n\n\n\n\n\n\tTODO BJQParserFiltersTest should be collapsed with BJQParserTest\n\tTODO edge case single child query is excluded.\n\tTODO\u00a0assert parent scope filter exclusion along side with children ones\n Is there any concerns? I think it may go in this week.\n\n ",
            "id": "comment-16369586"
        },
        {
            "date": "2018-02-20T01:41:00+0000",
            "author": "Andrey Kudryavtsev",
            "content": "Not sure that I fully understand how\u00a0\"expand parents docset\" part will work (it will just execute parent BJQ again, but without excluded\u00a0child clause, right?), but have a theoretical question.\u00a0\n\nAssume someone will implement \"global\" feature for JSON API (like you know)\u00a0to calculate facet on whole index and will calculate same comments_for_author facet like this:\n\n...\ncomments_for_author:{  \n     global:{},\n      domain:{  \n         blockChildren:\"type_s:book\",       \n         filter:\"{!filters params=$child.fq excludeTags=author v=$childquery}\"\n      }\n...\n\n\u00a0\n\nWould it be faster then \"expand parents docset\"? What is your gut feeling about it?\u00a0 ",
            "id": "comment-16369636"
        },
        {
            "date": "2018-02-20T07:36:56+0000",
            "author": "Mikhail Khludnev",
            "content": "Andrey Kudryavtsev, thanks for your attention \nNot sure that I fully understand how \"expand parents docset\" part will work (it will just execute parent BJQ again, but without excluded child clause, right?) \nI'm sure you do. Exactly right. I'd say what's changed here is propagating domain.excludeTags through {!parent \n\n, but have a theoretical question\nwhich JIRA is not a proper place for, you know.\n\nAssume someone will implement \"global\" feature\nRight, that's spinning around as well. As it's said above, here we reset top query/result docset that could be also expressed via \n\n..{    type:query, \n       global:true, \n       q:..\n\n\nor   \n\n {\n   domain: {\n       ...\n       global:true, \n    }\n  }\n\n\nhowever, after that you need to repeat top filters and query excluding a child, join them to child and filter children again, oh my.. So, introducing global might be considered ... hold on, what if we exclude top query as well via explicit excludeTag?   ",
            "id": "comment-16369780"
        },
        {
            "date": "2018-02-20T15:55:39+0000",
            "author": "Andrey Kudryavtsev",
            "content": "\u00a0\n\u00a0however, after that you need to repeat top filters and query excluding a child, join them to child and filter children again\n\u00a0\n\nThat's true, but in all that use cases where I would like to calculate\u00a0nested facet with\u00a0child exclusion, my childQuery consists of thousands of clauses (while top filters are small or not\u00a0present). And whether I would have to execute most of that clauses tree times (1 - main search, 2 -\u00a0expand parents docset, 3 - facet filter) or, say, two times will (probably) make the difference for me. That's why I'm asking.\n\n\u00a0\nhold on, what if we exclude top query as well via explicit\u00a0excludeTag?\n\u00a0\n\nIt's an option, with a little tiny check somewhere in FacetProcessor#handleFilterExclusions. But in this case it would be a 'hack for people who knows'...hmmm...sounds\u00a0like a good plan. ",
            "id": "comment-16370170"
        },
        {
            "date": "2018-02-20T16:47:43+0000",
            "author": "Mikhail Khludnev",
            "content": "hey, yo.. almost without changes in existing code\n\n     \"q\", \"{!parent tag=top filters=$child.fq which=type_s:book v=$childquery}\"\n        , \"childquery\", \"comment_t:*\"\n        , \"child.fq\", \"{!tag=author}author_s:dan\"\n        , \"child.fq\", \"{!tag=stars}stars_i:4\"\n        , \"fq\", \"type_s:book\"\n        , \"fl\", \"id\", \"fl\" , \"title_t\"\n        , \"json.facet\", \"{\" +\n            \"  comments_for_author: {\" +\n            \"    domain: { excludeTags:\\\"top\\\",\" + // 1. kick away top bjq, however, applying parent level fqs\n            \"            blockChildren : \\\"type_s:book\\\", \" + // 2.getting all children from enlarged parents\n            \"             filter:[\\\"{!filters param=$child.fq \" + // 3. filter children with exclusion \n            \"                       excludeTags=author v=$childquery}\\\"]\"\n            + \"            },\" +\n            \"    type:terms,\" +\n            \"    field:author_s,\" +\n            \"    facet: {\" +\n            \"           in_books: \\\"unique(_root_)\\\" }\"+//}},\" +\n            \"  }\" +\n\n\npatch is coming ",
            "id": "comment-16370248"
        },
        {
            "date": "2018-02-20T21:50:25+0000",
            "author": "Mikhail Khludnev",
            "content": "Here we go SOLR-9510.patch, current patch: \n\n\tjust adds filters into {!parent, and\n\tbrand new {!filters param=$chq mind the singular, btw, shouldn't this parameter is named ref?\n\tbeside of that there is no changes in json.facets at all.\n\tthe how-to is\n\t\n\t\ttag the q={!parent tag=top\n\t\thave fq=type:parent\n\t\texclude it in domain:{excludeTags:top}\n\t\tjoin expanded parents to children (might be a performance penalty)\n\t\tfilter them again with filter exclusion filter:\"{!filters param=$chq excludeTags=color\"\n\t\n\t\n\n\n\nin addition to earlier TODO extract excludeTags code reuse it between bjq and fiters, btw, can bjq be descendant of that {!filters?  \n\nAndrey Kudryavtsev the difference between global and excludeTags=top} is that former selects {{: and exclusion might end-up with MatchNoDocs.    ",
            "id": "comment-16370630"
        },
        {
            "date": "2018-02-20T23:42:34+0000",
            "author": "Andrey Kudryavtsev",
            "content": "\n\nexclusion might end-up with MatchNoDocs.\n\n\n\u00a0\n\nDidn't get this part.\n\ntestDomainFilterExclusionsInFilters is green for me even when '\"fq\", \"type_s:book\"' line is commented because SolrIndexSearcher#getDocSet(List<Query> queries)\u00a0in\u00a0\n\n// recompute the base domain\nfcontext.base = fcontext.searcher.getDocSet(qlist);\n\n\u00a0will return all live docs in case of empty queries\u00a0list.\n\n\u00a0\n\nBut in general this patch is too good to not break something unexpected. ",
            "id": "comment-16370755"
        },
        {
            "date": "2018-02-21T05:38:40+0000",
            "author": "Mikhail Khludnev",
            "content": "Oh, really?!!! But this is really cool. It means we can recompute child docset just in domain.filter avoiding potentially expensive blockChildren. Let me check.\u00a0\u00a0 ",
            "id": "comment-16370977"
        },
        {
            "date": "2018-02-21T07:04:48+0000",
            "author": "Mikhail Khludnev",
            "content": "new patch just has a sample: \n\n\"q\", \"{!parent tag=top filters=$child.fq which=type_s:book v=$childquery}\"    // tagging for exclusion \n        , \"childquery\", \"comment_t:*\"\n        , \"child.fq\", \"{!tag=author}author_s:dan\"\n        , \"child.fq\", \"{!tag=stars}stars_i:4\"\n        , \"fq\", \"{!tag=top}title_t:Snow\\\\ Crash\"                                                         // tagging for exclusion \n..     , \"json.facet\", \"{\" +\n            \"  ,comments_for_stars_parent_filter: {\" +\n            \"    domain: { excludeTags:top, \" +                  // remove all parent scope filters and query\n            \"          filter:[\\\"{!filters param=$child.fq  excludeTags=stars v=$childquery}\\\",\"  // apply child filters with excluding one\n            + \"                \\\"{!child of=type_s:book}{!filters param=$fq}\\\"] },\" +                // apply parent scope filter joined to children\n            \"    type:terms,\" +\n            \"    field:stars_i,\" +\n            \"    facet: {\" +\n            \"           in_books: \\\"unique(_root_)\\\" }}\"+  // aggregate counts\n\n\n\n\n\there we can avoid potentially expensive blockChildren\n\tit shows like it make sense TODO to support filters and excludeTags in {!child as well\n\n ",
            "id": "comment-16371026"
        },
        {
            "date": "2018-02-21T08:03:15+0000",
            "author": "Mikhail Khludnev",
            "content": "Dr Oleg Savrasov would you mind to go through TODO items and address them any time soon? ",
            "id": "comment-16371069"
        },
        {
            "date": "2018-02-27T16:45:09+0000",
            "author": "Dr Oleg Savrasov",
            "content": "All the remaining TODO items are elaborated ",
            "id": "comment-16378911"
        },
        {
            "date": "2018-02-28T05:52:32+0000",
            "author": "Mikhail Khludnev",
            "content": "Thank you, Dr Oleg Savrasov] I've just attached SOLR_9510.patch. It fixes the case with multiple tags (find zeroTag), asserts some edge cases. I'll copypaste more to exclusion handling.  ",
            "id": "comment-16379816"
        },
        {
            "date": "2018-03-03T11:44:43+0000",
            "author": "Mikhail Khludnev",
            "content": "Attaching SOLR_9510.patch. It overcomplicates {{{!filters} a little. In future we can extract three tag-exclude implementation into one place.   WDYT, Dr Oleg Savrasov? ",
            "id": "comment-16384628"
        },
        {
            "date": "2018-03-10T11:48:06+0000",
            "author": "Mikhail Khludnev",
            "content": "SOLR_9510.patch is made even more complicated. Excluding or omitting clauses:\n\n\t{!filters}\n yields *:*\n\t{!parent which=foo:bar}\n yields segmented foo:bar as is was\u00a0\n\t{!child\u00a0of=foo:bar}\n yields segmented children filter *: -*foo:bar\u00a0for unification\u00a0\u00a0\u00a0\n\n ",
            "id": "comment-16394138"
        },
        {
            "date": "2018-03-10T14:27:13+0000",
            "author": "Dr Oleg Savrasov",
            "content": "Latest version looks great. I have a couple of minor comments though:\n\n\tI would recommend to adjust comments in TestJsonFacetsWithNestedObjects#testDomainFilterExclusionsInFilters. I think it's better to explain the idea of excluding 'top' tag.\n\tChanges made in QueryParsing seem to be deprecated, I think it's better to revert them\n\n ",
            "id": "comment-16394192"
        },
        {
            "date": "2018-03-10T20:17:12+0000",
            "author": "Mikhail Khludnev",
            "content": "I would recommend to adjust comments\nDone SOLR_9510.patch. Let's push it into?  ",
            "id": "comment-16394320"
        },
        {
            "date": "2018-03-11T05:29:57+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fa55f0c2f2c4af8bca2cd53a76ee6c3142d72ce8 in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fa55f0c ]\n\nSOLR-9510: introducting \n{!filter param=$fq excludeTags=t,q}\nfoo:bar, also adding\nfilters and excludeTags local params into \n{!parent}\n and \n{!child} ",
            "id": "comment-16394398"
        },
        {
            "date": "2018-03-11T06:05:17+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ffe482db1cf55f1b729433598002c044ef3dc149 in lucene-solr's branch refs/heads/branch_7x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ffe482d ]\n\nSOLR-9510: introducting \n{!filter param=$fq excludeTags=t,q}\nfoo:bar, also adding\nfilters and excludeTags local params into \n{!parent}\n and \n{!child} ",
            "id": "comment-16394401"
        },
        {
            "date": "2018-03-25T21:21:28+0000",
            "author": "Mikhail Khludnev",
            "content": "Cassandra Targett, would you mind to have a look at SOLR-9510-doc.patch? ",
            "id": "comment-16413195"
        },
        {
            "date": "2018-03-26T16:07:26+0000",
            "author": "Cassandra Targett",
            "content": "Mikhail Khludnev, I took a look at the patch and changed a couple of things.\n\nFirst, I changed the sections you had titled \"Often Mistake\" to be CAUTION blocks instead - this separates them from the main text in a better way. I noticed that both these sections mention what the error was in older versions...how long ago was that? If it was more than a couple of releases, let's remove those.\n\nThe second thing I changed was to make the [literal] blocks that included query examples into [source,text] blocks - I did this for consistency. If we ever decide to change how those blocks look in either HTML or PDF, these won't be odd men out as it were. I left the other literal blocks that showed the error since that's probably fine.\n\nWhen I applied the patch, Git complained about trailing white space, so I found around about 5 or so on the entire page (not only the section you're working with) and I fixed all of them. So my patch has some really minor changes for the page as a whole that aren't related to your changes - just didn't want you to get confused.\n\n+1 from me, thanks. If you can commit it to 7.3 before the RC gets made (waiting on binaries), then it will be in the 7.3 Ref Guide. ",
            "id": "comment-16414053"
        },
        {
            "date": "2018-03-26T18:41:38+0000",
            "author": "Mikhail Khludnev",
            "content": "Thanks, Cassandra Targett. I've removed the error message from the old version. Attaching the diff. I'm going to commit it to master, branch_7_x, and branch_7_3 assuming it makes no impact on release.    ",
            "id": "comment-16414312"
        },
        {
            "date": "2018-03-26T18:44:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dc2ad7022c9b1d5625339dbc3b6b6549a5f1cfcb in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dc2ad70 ]\n\nSOLR-9510: documentation ",
            "id": "comment-16414316"
        },
        {
            "date": "2018-03-26T18:58:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e32e78db3d5ee60b2d00c533ffb211af4241bbaa in lucene-solr's branch refs/heads/branch_7x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e32e78d ]\n\nSOLR-9510: documentation ",
            "id": "comment-16414328"
        },
        {
            "date": "2018-03-26T19:01:03+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fa7f702545469a092fbe4f32022a8f60750a2163 in lucene-solr's branch refs/heads/branch_7_3 from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fa7f702 ]\n\nSOLR-9510: documentation ",
            "id": "comment-16414333"
        },
        {
            "date": "2018-04-25T17:21:37+0000",
            "author": "David Smiley",
            "content": "I was just looking at this new FiltersQParser thing. \u00a0The inner class FiltersQuery, a Query, has a constructor that actually evaluates the filters to compute a set of docs. \u00a0This seems very wrong to me as it's too early \u2013 it should happen in a Weight.getScorer call. \u00a0Couldn't there be a caching bug with the approach here? ",
            "id": "comment-16452683"
        },
        {
            "date": "2018-04-25T18:14:04+0000",
            "author": "Mikhail Khludnev",
            "content": "Oh. Right. It's an issue. Opening SOLR-12275\nThanks, David Smiley! Sorry for causing problems. ",
            "id": "comment-16452811"
        }
    ]
}