{
    "id": "LUCENE-3654",
    "title": "Optimize BytesRef comparator to use Unsafe long based comparison (when possible)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index",
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Implemented",
        "status": "Resolved"
    },
    "description": "Inspire by Google Guava UnsignedBytes lexi comparator, that uses unsafe to do long based comparisons over the bytes instead of one by one (which yields 2-4x better perf), use similar logic in BytesRef comparator. The code was adapted to support offset/length.",
    "attachments": {
        "LUCENE-3654.patch": "https://issues.apache.org/jira/secure/attachment/12507804/LUCENE-3654.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-17T21:30:53+0000",
            "content": "Patch attached, all tests seem to pass. ",
            "author": "Shay Banon",
            "id": "comment-13171682"
        },
        {
            "date": "2011-12-17T22:13:22+0000",
            "content": "Shay, thanks for doing this. Somebody mentioned this on the list earlier. I will take your patch and remove all the formatting if you don't mind. I think this makes lots of sense especially if you have really long references. ",
            "author": "Simon Willnauer",
            "id": "comment-13171695"
        },
        {
            "date": "2011-12-17T22:36:56+0000",
            "content": "Cool. \n\np.s. I formatted it using the IDEA formatting template provided in Lucene  ",
            "author": "Shay Banon",
            "id": "comment-13171699"
        },
        {
            "date": "2011-12-18T00:36:45+0000",
            "content": "Nice, I mentioned this on the dev list over a month ago (originally it was mentioned on the Hadoop list), nice to see it get into Lucene, though am curious where the speed improvement will be for Lucene. ",
            "author": "Jason Rutherglen",
            "id": "comment-13171716"
        },
        {
            "date": "2011-12-18T01:41:30+0000",
            "content": "Nice, I remember Jason brought this up!\n\nMy problem is only: sun.misc.Unsafe is undocumented, so it might not be available on compile time. Can we handle that somehow without reflection, maybe in a separate file where we dont fail if the javac ant task fails? I know, Unsafe is always available, but I dont want to rely on it - maybe someone wants to compile our code with SomeStrangeJDK\u2122.\nThe other thing is the inner class holder. Can we rename it to not contain \"lexicographical\", maybe UnsignedByteComparatorHolder? Lucene works on byte[] that can be anything, even binary terms. ",
            "author": "Uwe Schindler",
            "id": "comment-13171750"
        },
        {
            "date": "2011-12-18T06:48:45+0000",
            "content": "where is the hotspot that requires this?\n\nIf there is many comparisons being performed somewhere, we should use a better datastructure instead.\n\nMy vote: -1\n\nWe have everything to lose and little to gain. ",
            "author": "Robert Muir",
            "id": "comment-13171787"
        },
        {
            "date": "2011-12-18T08:52:40+0000",
            "content": "What do we have to lose, it's like with MMapDirectory, a few tests on startup and setting a reference to the improved comparator and done? Indeed we need compile-time checking (import of the Unsafe class), but if there are incompatible changes we will see on runtime linking and automatically fall back to the Java-Only comparator. ",
            "author": "Uwe Schindler",
            "id": "comment-13171802"
        },
        {
            "date": "2011-12-18T13:13:40+0000",
            "content": "Its not like mmapdirectory at all, there we are basically doing what \nwe must as a workaround to one of the top bugs at bugs.sun.com to reduce\nnumber of open files and transient disk usage. It seems like a reasonable\ncalculated risk, but its still terrible.\n\nI know you want to discuss this, but this is so ridiculous that I'm not\neven going to have the conversation. I'm not going to change my vote here. ",
            "author": "Robert Muir",
            "id": "comment-13171860"
        },
        {
            "date": "2011-12-21T04:24:59+0000",
            "content": "ok, so Mr Muir is -1, if people/devs still want to see it in Lucene, tell me and I can try and work on making it more Committable based on Uwe comments. ",
            "author": "Shay Banon",
            "id": "comment-13173843"
        },
        {
            "date": "2011-12-21T04:36:40+0000",
            "content": "+1 There are 3 other MAJOR Apache projects that have already integrated this efficiency.  It's completely silly not to use it. ",
            "author": "Jason Rutherglen",
            "id": "comment-13173853"
        },
        {
            "date": "2011-12-21T08:16:57+0000",
            "content": "There's been an interesting discussion about the common use of Unsafe on hotspot mailing list recently (can't recall the thread now though). Some people even wanted Unsafe to become part of standard library (not unsafe accesses \u2013 the lock checking part, but nonetheless). This guy wrote an entire off-heap collections library on top of Unsafe:\n\nhttp://www.ohloh.net/p/java-huge-collections\n\nI think using Unsafe with a fallback is fine, especially in small-scope methods that are used frequently and can be thoroughly tested. BytesRef is such an example to me.\n\nThis said, it would certainly help to convince Robert and others if you ran benchmarks alongside with and without Unsafe and show how much there is to gain, Shay. ",
            "author": "Dawid Weiss",
            "id": "comment-13173941"
        },
        {
            "date": "2011-12-21T08:53:53+0000",
            "content": "I agree here, but before doing this, I want some non-micro-benchmarks to show the effect. If there is no real effect, don't do it. Inside Lucene the comparator is not so often used (mostly only in indexer/BytesRefHash) and in TermRangeQuery. The other use cases are asserts all over the place, but they don't count.\n\nI would agree to the patch if the class would be renamed to something like UnsignedBytesComparator and the part importing sun.misc.Unsafe to be outside the main compilation unit. So if somebody compiles with a strange JVM like Harmony (although its dead) and sun.misc.Unsafe is not available, the build succeeds. The code in BytesRef is using reflection to load the comparator implementation, so all is fine, it would just get ClassNotFoundEx and fallback to the Java one. I could help in doing the ANT magic. ",
            "author": "Uwe Schindler",
            "id": "comment-13173954"
        },
        {
            "date": "2011-12-21T09:16:20+0000",
            "content": "the reason I am -1, I don't want JVM crashes.\n\nThis is lucene java, users can expect not to have JVM crashes because of bytesref \nbugs in lucene (this class is used all over the place), they shoudl get AIOOBE and NPE\nand other things.\n\nSo all is not fine just because it has a fallback. \n\nConvincing that there is performance win is a waste of time, this method is not a hotspot.\nConvincing me that nobody will get jvm crashes is going to be difficult. ",
            "author": "Robert Muir",
            "id": "comment-13173962"
        },
        {
            "date": "2011-12-21T09:35:14+0000",
            "content": "Here's an example, since so much of the lucene codebase has bugs with bytesref offsets, i figure its a good example:\n\n  public void testOops() {\n    BytesRef b = new BytesRef(\"abcdefghijklmnop\");\n    b.offset = -545454544; // some bug, integer overflows and goes negative or other problem\n    System.out.println(b.compareTo(new BytesRef(\"abcdefghijklmnop\")));\n  }\n\n\n\nWith this patch, this gives me a SIGSEGV:\n\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.util.TestBytesRef\n    [junit] #\n    [junit] # A fatal error has been detected by the Java Runtime Environment:\n    [junit] #\n    [junit] #  SIGSEGV (0xb) at pc=0x00007f386e7dcf64, pid=6093, tid=139880338200320\n    [junit] #\n    [junit] # JRE version: 6.0_24-b07\n    [junit] # Java VM: Java HotSpot(TM) 64-Bit Server VM (19.1-b02 mixed mode linux-amd64 compressed oops)\n    [junit] # Problematic frame:\n    [junit] # V  [libjvm.so+0x76ef64]\n    [junit] #\n\n ",
            "author": "Robert Muir",
            "id": "comment-13173971"
        },
        {
            "date": "2011-12-21T09:38:25+0000",
            "content": "can we have some -DXX:LuceneUseUnsafe option to enable this. I mean there are two camps here and that could make everybody happy? I mean if you use this option you have to expect possible problems no? ",
            "author": "Simon Willnauer",
            "id": "comment-13173972"
        },
        {
            "date": "2011-12-21T09:40:14+0000",
            "content": "The SIGSEGV can be solved by doing some safety checks at the beginning of compare: check that offset>=0 and offset+length<=bytes.length. If you use Unsafe, you have to make sure that your parameters are 1000% correct, that's all. This is why java.nio does lots of checks in their Buffer methods.\n\nEDIT\nYou also have to copy offset, length and the actual byte[] reference to a local variable at the beginning and before the bounds checks (because otherwise another thread could change the public non-final fields in BytesRef and cause SIGSEGV). BytesRef is a user-visible class so it must be 100% safe against all usage-violations.\n\nBased on this additional overhead, the whole comparator makes no sense except for terms with a size of 200 bytes. But Lucene terms are in 99% of all cases shorter.\n\nIf you want to use this comparator, just subclass Lucene40Codec and return it as term comparator, this can be completely outside Lucene. You can even use Guava. ",
            "author": "Uwe Schindler",
            "id": "comment-13173973"
        },
        {
            "date": "2011-12-21T09:43:00+0000",
            "content": "can we have some -DXX:LuceneUseUnsafe option to enable this. I mean there are two camps here and that could make everybody happy? I mean if you use this option you have to expect possible problems no?\n\nWe can put the whole comparator to contrib and BytesRef can have a static setter to change the default impl. Or we use SPI for it (contrib exports it in META-INF)  ",
            "author": "Uwe Schindler",
            "id": "comment-13173976"
        },
        {
            "date": "2011-12-21T09:43:21+0000",
            "content": "Sorry, i'm totally against the change, even with safety checks. \n\nI think this will hurt the reputation of project, and i think it will be a nightmare for developers too (Sorry, i dont want to debug avoidable jvm crashes).\nAnd I don't want to see Lucene start using unsafe everywhere. This is lucene-java, things like bounds checking are part of the language.\n ",
            "author": "Robert Muir",
            "id": "comment-13173977"
        },
        {
            "date": "2018-09-25T12:46:41+0000",
            "content": "Since LUCENE-7966, when using Java 9 or higher, BytesRef comparators will use Arrays#compareUnsigned and Arrays#equals which can compare multiple bytes at once. ",
            "author": "Adrien Grand",
            "id": "comment-16627277"
        }
    ]
}