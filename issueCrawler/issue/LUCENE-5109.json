{
    "id": "LUCENE-5109",
    "title": "EliasFano value index",
    "details": {
        "components": [
            "core/other"
        ],
        "fix_versions": [
            "4.6"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Index upper bits of Elias-Fano sequence.",
    "attachments": {
        "LUCENE-5109.patch": "https://issues.apache.org/jira/secure/attachment/12592075/LUCENE-5109.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-12T21:09:14+0000",
            "content": "Mostly untested, not committable. ",
            "author": "Paul Elschot",
            "id": "comment-13707377"
        },
        {
            "date": "2013-07-12T21:46:20+0000",
            "content": "I don't expect to have time to continue this until half way September, so I'd rather leave this here, maybe someone can pick it up.\n\nThe index is a value index on the upper bit numbers.\nI have called the index a value index, because it would also be possible to add an index the Elias-Fano index of the unary upper bit numbers. Basically a value index indexes the zero upper bits, and an index index would index the one upper bits. (A unary number is a series of zero bits followed by a single one bit, and the number of zero bits determines the value.)\n\nThe patch adds ...ValueIndexed.java files that extend EliasFanoEncoder and EliasFanoDecoder.\n(EliasFanoEncoder is also changed to use longHex from ToStringUtils, just as in LUCENE-5098 .)\n\nEliasFanoEncoderValueIndexed creates an index by value on the upper bits,\nand EliasFanoDecoderValueIndexed uses this index in its advanceToValue method.\n\nBoth EliasFanoEncoder EliasFanoDecoder have attributes changed from private to protected, so they can be used in their subclasses.\n\nThe EliasFanoDocIdSet is changed to use the above value indexed versions.\nIts testAgainstBitSet has been overriden to be empty (nocommit) because that test currently fails.\nThere are no other tests yet.\n\nThe main function of the patch is overriding the method advanceToHighValue in EliasFanoDecoderValueIndexed.\nThe idea is to advance to the high value just before the actual target from the index, and then continue as usual.\n\nUnfortunately the value index does not work yet, the testAgainstBitSet fails.\nSome tests for the Elias-Fano index itself clearly need to be added first.\n\n\nOnce this index works it is probably better to merge it into EliasFanoEncoder and EliasFanoDecoder because of the speed up the index is expected to provide.\n\nI prefer to start like this because without index things are working nicely now, even with the  changes from private to protected.\n\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13707419"
        },
        {
            "date": "2013-09-19T21:57:28+0000",
            "content": "The patch of 19 September 2013 implements the EliasFano value index encoding/decoding, and adds some tests that pass.\n\nThe following is still to be done:\n\n\tremove commented code lines,\n\tuse this to implement EliasFanoValueIndexedDocIdSet, test, maybe benchmark,\n\tadd broadword bit selection, this will have a lower performance improvement than the index,\n\ttest, benchmark,\n\tuse EliasFanoDocIdSet for block joins by using the previousValue method.\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13772372"
        },
        {
            "date": "2013-09-20T07:54:32+0000",
            "content": "Thanks for the update, this looks interesting!\n\nuse this to implement EliasFanoValueIndexedDocIdSet, test, maybe benchmark\n\nThis can be useful to test the overhead of the index compared to EliasFanoDocIdSet but given that we are probably going to want an index almost everytime, maybe we could just make EliasFanoDocIdSet use an index by default, potentially giving the ability to disable indexing by passing indexInterval=Integer.MAX_VALUE (like the other sets).\n\nadd broadword bit selection\n\nI'm looking forward to it! ",
            "author": "Adrien Grand",
            "id": "comment-13772858"
        },
        {
            "date": "2013-09-22T11:11:21+0000",
            "content": "I did some simple benchmarking for the DocIdSet.\nWith an index using 256 as index interval for the high values, the memory usage is pretty close to the pfordelta set.\n\nAlso the worst case performance of the non indexed version shown here http://people.apache.org/~jpountz/doc_id_sets.html\nby the (green) EliasFanoDocIdSet now nicely flattens out for higher bit densities.\nFor example for advance(319993) on my 32 bit machine, the log score compared to FixedBitSet for density 1/10 (-1 logarithmic),\nis -9.13 for non indexed, and -3.97 for indexed. So basically the indexing works as expected.\n\ngiven that we are probably going to want an index almost everytime\n\nThe simplest thing that can work here is to add the index to the current EliasFanoEncoder and EliasFanoDecoder classes,\nso I'll do just that, and post a patch for that here.\n\nThe default index size with divisor 256 for the high values is small enough to not be bothered about it.\nPerformance may improve by using 128 as a divisor, benchmarking is needed for that.\nThe smaller the divisor, the fewer upper bits need to be visited during a far advance.\nRoughly, in case the value is present, the number of visited upper bits is 1.5 times the divisor. So for 256 (4 long words), 6 long words are expected to visited. For 128, that would be 3 long words.\nVigna also mentions avoiding the index when the advance in the upper bits is less than the index divisor. I have not implemented that.\n\n\nI also tried adding broadword bit selection. For that I'll open a new issue.\n ",
            "author": "Paul Elschot",
            "id": "comment-13774000"
        },
        {
            "date": "2013-09-22T17:59:29+0000",
            "content": "The issue for broadword bit selection is LUCENE-5236 . ",
            "author": "Paul Elschot",
            "id": "comment-13774020"
        },
        {
            "date": "2013-09-23T12:43:25+0000",
            "content": "Patch of 23 september: as announced yesterday.\n\nI tried benchmarking with index divisor 128 instead of 256. It is indeed a little bit faster for far advanceTo operations.\n\nI used this code snippet in the benchmark to avoid the EliasFanoDocIdSet being used when it is not advisable:\n\n\n    new DocIdSetFactory() {\n      @Override\n      public DocIdSet copyOf(FixedBitSet set) throws IOException {\n      \tint numValues = set.cardinality();\n      \tint upperBound = set.prevSetBit(set.length() - 1);\n      \tif (EliasFanoDocIdSet.sufficientlySmallerThanBitSet(numValues, upperBound)) {\n\t  final EliasFanoDocIdSet copy = new EliasFanoDocIdSet(numValues, upperBound));\n\t  copy.encodeFromDisi(set.iterator());\n\t  return copy;\n\t} else {\n\t  return set;\n\t}\n      }\n    }\n\n\n\nThe sufficientlySmallerThanBitSet method currently checks for upperbound/7 > numValues.\nThat used to be a division by 6, I added 1 because the index was added.\n\nAnyway, \"advisable\" will depend on better benchmarking than I can do... ",
            "author": "Paul Elschot",
            "id": "comment-13774514"
        },
        {
            "date": "2013-10-07T20:57:53+0000",
            "content": "The patch at LUCENE-5236 also contains the changes here. ",
            "author": "Paul Elschot",
            "id": "comment-13788561"
        },
        {
            "date": "2013-10-15T15:37:26+0000",
            "content": "Resolved through LUCENE-5236 ",
            "author": "Adrien Grand",
            "id": "comment-13795313"
        }
    ]
}