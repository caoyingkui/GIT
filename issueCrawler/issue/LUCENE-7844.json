{
    "id": "LUCENE-7844",
    "title": "UnifiedHighlighter: simplify \"maxPassages\" input API",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "The \"maxPassages\" input to the UnifiedHighlighter can be provided as an array to some of the public methods on UnifiedHighlighter.  When it's provided as an array, the index in the array is for the field in a parallel array. I think this is awkward and furthermore it's inconsistent with the way this highlighter customizes things on a by field basis.  Instead, the parameter can be a simple int default (not an array), and then there can be a protected method like getMaxPassageCount(String field that returns an Integer which, when non-null, replaces the default value for this field.\n\nAside from API simplicity and consistency, this will also remove some annoying parallel array sorting going on.",
    "attachments": {
        "LUCENE_7844__UH_maxPassages_simplification.patch": "https://issues.apache.org/jira/secure/attachment/12869578/LUCENE_7844__UH_maxPassages_simplification.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16022275",
            "date": "2017-05-24T03:52:05+0000",
            "content": "Here's a patch.  In addition to the primary issue at hand, I also:\n\n\tcleaned up some obsolete javadocs inherited from the PostingsHighlighter lineage that no longer apply\n\trefactored FieldHighlighter.highlightOffsetsEnums a little to use Java 8 features related to Comparators & lambdas to save some needless LOC.\n\tcode style: many copy-pasted tests declared String snippets[] instead of String[] snippets\n\n\n\nPerhaps you want to see Jim Ferenczi or Timothy M. Rodriguez ?\n\nSuggested CHANGES.txt under API changes\n\n\tChanged UnifiedHighlighter.highlightFields methods which take an array of maxPassage integers by field to instead take a single int. To vary per field, override UH.getMaxPassageCount(String field).\n\n ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16023119",
            "date": "2017-05-24T15:49:31+0000",
            "content": "+1 for the cleanup/code style of the code.\n Regarding the API change, it seems weird because now the simple \n\nhighlightField(String field, Query query, int docId, int maxPassages)\n\n can also overrides the max passages count. For consistency you could maybe remove the maxPassages entirely and rely solely on \n\nmaxPassageCount(String field)\n\n ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16023374",
            "date": "2017-05-24T18:10:59+0000",
            "content": "int maxPassages (the parameter) does not override maxPassageCount(field) (the override-able method); it's the other way around.\n\nWe could remove maxPassages as an argument and instead require that maxPassageCount(field) is overridden (defaulting to 1) but I believe that setting maxPassages to other than 1 isn't so rare \u2013 your suggestion would make it awkward (force subclassing). On the other hand, it would lead to additional API simplifications (fewer overloads).  We agree 1 is definitely the most typical value.  What I definitely think is rare is having the maxPassage vary per field, hence my motivation behind this patch.   ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16024765",
            "date": "2017-05-25T14:01:37+0000",
            "content": "+1 on the comparator use.  That definitely cleaned up some code.\n\nI'm a bit uncertain on the maxPassages change, however.  I think it may be pretty common to pivot the number of passages required per field.  For example, a user may want to highlight a title fully (one passage) and get several passages from the primary content field.  The motivation to get rid of the parallel arrays makes a lot of sense, maybe we could try to lump all these options into an object per field?  For lack of a better name something like FieldOptions[] or the like?  Longer term, I could even see options for the break iterator, scorer, and formatter being configured per field.  (In the previous example, it may be better to have a dummy iterator that chunks on value delineations, a noop scorer, and a formatter that just returns the entire stored value for the title, while the content would have more traditional options.  I know this is all still possible with overrides in the current design, but I'm not sure we should push it further into the \"specialized\" use-case area. What do you think? ",
            "author": "Timothy M. Rodriguez"
        },
        {
            "id": "comment-16024934",
            "date": "2017-05-25T16:07:10+0000",
            "content": "For example, a user may want to highlight a title fully (one passage) ...\n\nFor that case, the user should be using WholeBreakIterator for that field, and thus they already need to subclass.\nDoes that make you feel any better?  If not, I'm not sure where this all leaves us right now.\n\n\u2014\nI do like a FieldOptions (per-field object options) design over subclassing; again \u2013 longer term.  I could imagine something like this:\n\nunifiedHighlighter.highlight(query, topDocs, \n unifiedHighlighter.fieldOptionsWhole(\"title\"),\n unifiedHighlighter.fieldOptions(\"body\", 3)\n);\n\n\nIndeed, WholeBreakIterator almost suggest a different FieldHighlighter that is simpler (no BI, Scorer)... yet the outcome will be a bunch more code for likely immeasurable performance win and it's all internal code so the user's perceived complexity doesn't change. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16025178",
            "date": "2017-05-25T18:34:37+0000",
            "content": "This syntax looks really good!\n\nunifiedHighlighter.highlight(query, topDocs, \n unifiedHighlighter.fieldOptionsWhole(\"title\"),\n unifiedHighlighter.fieldOptions(\"body\", 3)\n);\n\n\n\nwith maybe \n\nunifiedHighlighter.fieldOptionsWhole();\n\n being a specialization of \n\nunifiedHiglighter.fieldOptions(\"title\", 3, BreakOption.WHOLE);\n\n or something to that effect\n\nFair point on the performance difference being negligible.  In terms of now, I'd be in favor of leaving the current parallel array approach and working towards a fieldOption approach.  I can offer to help on that end! ",
            "author": "Timothy M. Rodriguez"
        },
        {
            "id": "comment-16029975",
            "date": "2017-05-30T19:18:39+0000",
            "content": "I'd be in favor of leaving the current parallel array approach and working towards a fieldOption approach. I can offer to help on that end!\n\n+1  (separate issue) ",
            "author": "David Smiley"
        }
    ]
}