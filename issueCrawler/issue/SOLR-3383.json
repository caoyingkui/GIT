{
    "id": "SOLR-3383",
    "title": "Async responses in SolrJ",
    "details": {
        "affect_versions": "3.5",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Today it is like this\n\n\tSolrServer.request returns NamedList<Object>\n\tSolrRequest.process returns SolrResponse\n\tPublic methods on SolrServer like addX, optimize, commit, queryX etc. returns subclasses of SolrResponse (e.g. \"add\" returns UpdateResponse)\n\tetc\n\n\n\nThis is all synchronous - that is, the calling thread of those methods will wait for the response before being able to continue. I believe the industry today agrees that \"operations\" like client-server network-requireing operations should be done asynchronously seens from the client API. Therefore basically we should change those methods\n\n\tSolrServer.request returns Future<NamedList<Object>>\n\tSolrRequest.process returns Future<SolrResponse>\n\tSolrServer.xxx returns Future<subclass of SolrResponse>\nand make the appropriate changes in the implementations below.\n\n\n\nMy main argument for this right now, is that ConcurrentUpdateSolrServer really is not able to hand over responses to the calling client. Guess that it is also the reason why it is only a \"Update\"SolrServer and not a complete SolrServer (being able to do queries etc.) - updates does not require sending responses (except primitive errors) back to the client, queries etc does. Now that we do \"finegrained error propagation\" (SOLR-3382) in order to send \"unique key constraint\" and \"versioning\"-errors (SOLR-3173 and SOLR-3178) back to the client in responses to update-request, suddenly it is not true anymore that updates does not require sending responses back to the client.\nMaking the changes suggested above (returning Futures) would\n\n\tAllow ConcurrentUpdateSolrServer to be used for updates potentially resulting in \"unique key constraint\"- and \"versioning\"-errors\n\tAllow ConcurrentUpdateSolrServer to become ConcurrentSolrServer - also being able to do queries etc\n\tDo cool stuff like SOLR-3384\n\tMake SolrJ more modern with respect to asynchronous principles",
    "attachments": {
        "SOLR-3383.patch": "https://issues.apache.org/jira/secure/attachment/12526144/SOLR-3383.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Per Steffensen",
            "id": "comment-13258108",
            "date": "2012-04-20T09:21:57+0000",
            "content": "We are working on a solution that we hope to contribute soon. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13271326",
            "date": "2012-05-09T11:24:49+0000",
            "content": "Early patch attached to show details about suggested implementation and to get feedback.\n\nThe patch should fit on top of your revision 1327417. The branch for doing the code for this issue, was created from the branch where we did the SOLR-3173, SOLR-3178 and SOLR-3382 changes, so it contains parts of an old fix for those. Some of those parts have been reverted or changed in the latest patch attached to SOLR-3178, so they are basically outdated. Hope you are able to distill what is related to SOLR-3383 and what is not.\n\nBasically the idea is that all public methods for doing requests using SolrJ SolrServer's or SolrRequest-subclasses, has been changed from returning responses (in the general form of NamedList<Object> or in the specialized form of SolrResponse-subclasses) into returning Futures of responses.\n\nExceptions originating from the server, that you used to get when you called one of those public methods, you will now not get before you call get on the returned Future.\n\nThe benefits are that you (if your chain of SolrServers contains a real async implementation) as a client, can go do other stuff from the time you send the request (by calling one of those public methods) and until the time you inspect the response (fetched by calling get on the returned Future). Besides that we will be able to get responses back from ConcurrentSolrServer.\n\nAs is right now you need to have ConcurrentSolrServer in your chain of SolrServers in order to get real async behaviour, because the rest of the SolrServers does not really support it. If you dont use ConcurrentSolrServer your client thread will basically not get its Future back from a call to one of those public methods mentioned at the top, before the response has been received from the server and calling get on the Future will immediately give the client the reponse anyway. So not much acheived. But that can all easily be changed by modifying the HttpSolrServer to be able to run in a async mode where it has its own threadpool in which it does requests. That can easily be coded, and will to a big extend eliminate the need for a ConcurrentSolrServer to begin with. We will make this feature of the HttpSolrServer, and attach it if you like the idea represented by this issue SOLR-3383.\n\nThe patch is a little bit dependent on the patch attached to SOLR-3178, in the way that it deals with e.g. PartialErrors in places where it needs to, but we can deal with that later.\n\nThis is just to present the idea in code and give you something to look at and comment on.\n\nRegards, Per Steffensen "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412190",
            "date": "2012-07-11T22:26:17+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429875",
            "date": "2012-08-07T03:43:55+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13452210",
            "date": "2012-09-10T17:41:58+0000",
            "content": "moving all 4.0 issues not touched in a month to 4.1 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717107",
            "date": "2013-07-23T18:47:08+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Martin Grotzke",
            "id": "comment-13894298",
            "date": "2014-02-07T08:24:02+0000",
            "content": "I'm also interested in async responses in solrj, but instead of using java Futures, I'd prefer a callback based interface, e.g. via onSuccess(callback) and onError(callback), much like scala Futures work. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13894378",
            "date": "2014-02-07T10:34:05+0000",
            "content": "Martin Grotzke, we made a java-Futures implementation long ago. We have it on some branch somewhere. We never got around to finish it, because we decided that it was not high priority at the moment. We will not prioritize to finish it any time soon. Callback thingy could also be interesting - maybe support both java-Futures and callback. Guess if you want this, you will have to make it yourself. Guess I can give you a patch with our changes, but it will fit a very old version of Solr - probably somewhere before 4.0.0 was even released. You will definitely have to work on it afterwards. "
        },
        {
            "author": "Martin Grotzke",
            "id": "comment-13894435",
            "date": "2014-02-07T11:47:03+0000",
            "content": "Ok, thanks for the update.  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13970941",
            "date": "2014-04-16T12:56:41+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}