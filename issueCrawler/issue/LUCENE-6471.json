{
    "id": "LUCENE-6471",
    "title": "Highlighter mergeContiguousFragments shouldn't merge 0-score fragments",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [
            "modules/highlighter"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Highlighter.mergeContiguousFragments merges adjacent fragments it is given.  But it is given a list of fragments that do not necessarily have embedded highlights (e.g. have a score of 0), and so it could grow a fragment needlessly.  I never figured out why this old highlighter keeps around such fragments instead of eagerly tossing them when the fragment completes, which is what I think it should do.  That would address this problem and might make things faster.  I'm not sure if any highlighter user wants the non-scoring fragments though.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16080258",
            "author": "Jim Richards",
            "date": "2017-07-10T12:36:35+0000",
            "content": "I ended up writing this to get around this issue\n\n\tpublic final String getBetterFragments(TokenStream tokenStream, String text, int maxNumFragments, String separator) throws IOException, InvalidTokenOffsetsException {\n\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); // sanity check\n\t\tTextFragment[] frag = getBestTextFragments(tokenStream, text, false, maxNumFragments);\n\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < frag.length; i++) {\n\t\t\tif (frag[i] != null && frag[i].getScore() > 0) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tresult.append(separator);\n\t\t\t\t}\n\t\t\t\tresult.append(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn result.toString();\n\n\t}\n\n "
        },
        {
            "id": "comment-16080328",
            "author": "David Smiley",
            "date": "2017-07-10T13:34:21+0000",
            "content": "Jim Richards Have you considered the UnifiedHighlighter? "
        },
        {
            "id": "comment-16082046",
            "author": "Jim Richards",
            "date": "2017-07-11T11:01:23+0000",
            "content": "David Smiley,\n\nI'm using hibernate-search-orm, which is using 5.5.4 of the Lucene libraries and UnifiedHighlighter is from 6.x. I could probably do some magic in pom.xml to exclude 5.5.4 but my basic test had too many incompatibilities.\n\nJim. "
        }
    ]
}