{
    "id": "SOLR-6680",
    "title": "DefaultSolrHighlighter can sometimes avoid CachingTokenFilter",
    "details": {
        "components": [
            "highlighter"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The DefaultSolrHighlighter (the most accurate one) is a bit over-eager to wrap the token stream in a CachingTokenFilter when hl.usePhraseHighlighter=true.  This wastes memory, and it interferes with other optimizations \u2013 LUCENE-6034.  Furthermore, the internal TermOffsetsTokenStream (used when TermVectors are used with this) wasn't properly delegating reset().",
    "attachments": {
        "SOLR-6680.patch": "https://issues.apache.org/jira/secure/attachment/12678225/SOLR-6680.patch",
        "SOLR-6680_Solr_Highligher,_part_2,_OffsetWindowTokenFilter.patch": "https://issues.apache.org/jira/secure/attachment/12688416/SOLR-6680_Solr_Highligher%2C_part_2%2C_OffsetWindowTokenFilter.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-30T16:31:05+0000",
            "author": "David Smiley",
            "content": "Solr's tests are already pretty good; I rely on that.\n\nNote that this issue might depend on LUCENE-6031 since the current TokenSources don't implement reset() (they should have been made to but whoever wrote them forgot to). ",
            "id": "comment-14190330"
        },
        {
            "date": "2014-11-03T18:35:16+0000",
            "author": "David Smiley",
            "content": "I should point out that the benefit of LUCENE-6033 won't be realized for a multi-valued field because of the way the offset adjusting works (TermOffsetsTokenStream).  I'm not concerned with optimizing for this case but should someone else want to take this further then consider this approach:  Don't wrap the TokenStream from the TermVectors.  Instead, grab all the values of this field and wrap them in a CharSequence implementation that reads from each value in sequence.  But Highlighter expects a String for the value; it could be modified to deal with a CharSequence instead. ",
            "id": "comment-14194858"
        },
        {
            "date": "2014-11-30T04:13:50+0000",
            "author": "David Smiley",
            "content": "Updated patch. Added check to detect if, for the current document, if the field to highlight is actually multi-valued. If it isn't we can avoid TermOffsetsTokenStream, which defeats the optimization in SOLR-6034. ",
            "id": "comment-14229007"
        },
        {
            "date": "2014-11-30T04:24:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1642510 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1642510 ]\n\nSOLR-6680: DefaultSolrHighlighter: avoid CachingTokenFilter when not needed ",
            "id": "comment-14229010"
        },
        {
            "date": "2014-11-30T04:32:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1642511 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1642511 ]\n\nSOLR-6680: DefaultSolrHighlighter: avoid CachingTokenFilter when not needed ",
            "id": "comment-14229012"
        },
        {
            "date": "2014-12-19T20:49:44+0000",
            "author": "David Smiley",
            "content": "Re-opening for incremental improvement:\n\nThe next patch further reduces token caching in DefaultSolrHighlighter, this time by \"TermOffsetsTokenStream\", which is used for multi-valued fields with term vectors to provide an offset based view/window into the token stream.  I found the name unclear so I also renamed it to OffsetWindowTokenFilter with a comment to clarify it's used for multi-valued term vectors. I found the variable names unclear so I renamed them too.  It used to call captureState & restoreState for every token; now it only does it for the first token leading into the next value.  It used to use a cloned AttributeSource but I found there to be no point to that, plus it interferes with TokenStreamFromTermVector's ability to detect if payloads are desired. ",
            "id": "comment-14253998"
        },
        {
            "date": "2014-12-19T20:50:35+0000",
            "author": "David Smiley",
            "content": "I'll commit Monday if there's no feedback. ",
            "id": "comment-14253999"
        },
        {
            "date": "2014-12-23T04:27:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1647481 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1647481 ]\n\nSOLR-6680: refactor DefaultSolrHighlighter.TermOffsetsTokenStream (from term vectors) to avoid buffering the token. ",
            "id": "comment-14256588"
        },
        {
            "date": "2014-12-23T04:33:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1647482 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1647482 ]\n\nSOLR-6680: refactor DefaultSolrHighlighter.TermOffsetsTokenStream (from term vectors) to avoid buffering the token. ",
            "id": "comment-14256593"
        },
        {
            "date": "2015-02-23T05:02:06+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "id": "comment-14332822"
        }
    ]
}