{
    "id": "LUCENE-5895",
    "title": "Add per-segment and per-commit id to help replication",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "It would be useful if Lucene recorded a unique id for each segment written and each commit point.  This way, file-based replicators can use this to \"know\" whether the segment/commit they are looking at on a source machine and dest machine are in fact that same.\n\nI know this would have been very useful when I was playing with NRT replication (LUCENE-5438).",
    "attachments": {
        "LUCENE-5895.patch": "https://issues.apache.org/jira/secure/attachment/12663131/LUCENE-5895.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14103932",
            "author": "Michael McCandless",
            "content": "Initial patch ... ",
            "date": "2014-08-20T14:28:24+0000"
        },
        {
            "id": "comment-14103939",
            "author": "Uwe Schindler",
            "content": "Why not use Java's UUID class? http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html - especially: http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html#randomUUID() ",
            "date": "2014-08-20T14:34:08+0000"
        },
        {
            "id": "comment-14104081",
            "author": "Michael McCandless",
            "content": "I looked at UUID, and used UUID.randomUUID() in early iterations at first,\nbut then decided it's a poor fit here:\n\n\n\tIt tries to be crypographically secure, which is overkill for us:\n    we don't care if someone can guess what the next segment id will\n    be.\n\n\n\n\n\tIt uses SecureRandom to pull randomness, which on Linux can easily\n    lead to long hangs (I saw ~10 second hangs) when there's not\n    enough entropy being harvested.\n\n\n\n\n\tIt loses a few (6 of 128) bits to version/variant, which weakens\n    it a bit for our use case.  In particular, it's not clear how that\n    impacts the period, where with simple ++ (mod 2^128) the period is\n    clearly full.\n\n ",
            "date": "2014-08-20T16:10:34+0000"
        },
        {
            "id": "comment-14104106",
            "author": "Michael McCandless",
            "content": "New patch: I hit a failure in the test I added when it got an older codec that doesn't write the id, and fixed SegmentInfo ctor to not generate its own id (that's too dangerous).  I also added a comment explaining why UUID isn't a good match for our use ... ",
            "date": "2014-08-20T16:43:59+0000"
        },
        {
            "id": "comment-14105608",
            "author": "Michael McCandless",
            "content": "I think the last patch is ready ... I think it's net/net low risk, since it just adds a new field to SIS/SI, so I'd like to commit for 4.10.  We can always improve the uniqueness of the id generation later (it's opaque). ",
            "date": "2014-08-21T17:10:33+0000"
        },
        {
            "id": "comment-14105626",
            "author": "Uwe Schindler",
            "content": "I am fine with the patch. ",
            "date": "2014-08-21T17:20:21+0000"
        },
        {
            "id": "comment-14105867",
            "author": "Michael McCandless",
            "content": "Since we are so close to releasing 4.10, I think this change should wait for the next release ... ",
            "date": "2014-08-21T20:04:05+0000"
        },
        {
            "id": "comment-14106136",
            "author": "ASF subversion and git services",
            "content": "Commit 1619624 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1619624 ]\n\nLUCENE-5895: fix version in javadocs ",
            "date": "2014-08-21T23:22:57+0000"
        },
        {
            "id": "comment-14120398",
            "author": "ASF subversion and git services",
            "content": "Commit 1622351 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1622351 ]\n\nLUCENE-5895: fix bug (when 2nd long from xorshift was negative) causing ids to be prefixed by 16 0s ",
            "date": "2014-09-03T20:36:09+0000"
        },
        {
            "id": "comment-14120401",
            "author": "ASF subversion and git services",
            "content": "Commit 1622352 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1622352 ]\n\nLUCENE-5895: fix bug (when 2nd long from xorshift was negative) causing ids to be prefixed by 16 0s ",
            "date": "2014-09-03T20:39:04+0000"
        },
        {
            "id": "comment-14120549",
            "author": "Shalin Shekhar Mangar",
            "content": "Mike, this works fine for NRT replication but replying on it for recovery would probably cause the entire index to be re-downloaded because local merges on replicas will create segments with a different unique id. ",
            "date": "2014-09-03T22:01:05+0000"
        },
        {
            "id": "comment-14121314",
            "author": "Michael McCandless",
            "content": "Hmm, it depends on how merging works b/w primary & replica?  E.g. we could merge only on primary and copy merged segments out.  Yes, this is added bandwidth, but then merging is also CPU / IO intensive, so saving that work for the replicas may net/net be worthwhile.  And copying out a merged segment to a replica can be a lowish priority thing, e.g. it need not gate NRT reopen time (just like how IW's merged segment warmer doesn't either).\n\nBut yeah if the replicas do their own merging, somehow with a merge policy that's guaranteed to precisely match what the primary does (despite e.g. ConcurrentMergeScheduler causing merges to complete in different orders), then we would need to somehow set the IDs of the merged segments on the replicas to match the corresponding merged segments on the primaries.  Or, perhaps ... we compute the ID of a merged segment by hashing the IDs of the N segments that were merged ... hmm risky because if there were different deleted docs then the IDs should differ, so maybe we hash on that too ... tricky. ",
            "date": "2014-09-04T12:54:37+0000"
        },
        {
            "id": "comment-14148794",
            "author": "ASF subversion and git services",
            "content": "Commit 1627714 from Robert Muir in branch 'dev/branches/lucene5969'\n[ https://svn.apache.org/r1627714 ]\n\nLUCENE-5969, LUCENE-5895: fix sign bit bugs in segment/commit IDs, use byte[] representation ",
            "date": "2014-09-26T05:20:46+0000"
        },
        {
            "id": "comment-14332525",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:29+0000"
        }
    ]
}