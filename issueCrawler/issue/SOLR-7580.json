{
    "id": "SOLR-7580",
    "title": "Number of ScoreDoc instances equals rows parameter, not actual number of matches",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "5.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "We have several batch jobs that use StreamingResponseCallback to collect all records matching a specific query. For each record, we execute a new query and need all results without paging through them. Because we do not know the amount of matches to expect, we do setRows(Integer.MAX_VALUE);. According to the VisualVM samples, this results in a huge amount of ScoreDoc instances, making the query unreasonably slow.\n\nThe current work-around we use is to execute the same query with setRows(0), get numResults, and then reissue the query with setRows(numResults). This is fast, almost as fast as one would expect.\n\nThis is, however, a very dirty work-around. I am unsure whether this is a Solr or Lucene issue, SolrIndexSearcher is a beast to debug",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-25T12:11:24+0000",
            "author": "Markus Jelsma",
            "content": "Checked again today, this problem still applies but not when querying on the uniqueKey field. ",
            "id": "comment-15256265"
        },
        {
            "date": "2016-04-25T13:13:56+0000",
            "author": "David Smiley",
            "content": "Isn't this an anti-pattern?  Can't you use cursorMark? ",
            "id": "comment-15256316"
        },
        {
            "date": "2016-04-25T15:05:06+0000",
            "author": "Yonik Seeley",
            "content": "we do setRows(Integer.MAX_VALUE);. According to the VisualVM samples, this results in a huge amount of ScoreDoc instances, making the query unreasonably slow.\n\nI think this is due to the lucene search code prepopulating the priority queue.\nSee org.apache.lucene.util.PriorityQueue\n\nIsn't this an anti-pattern? Can't you use cursorMark?\n\nI think it's something we should try to support efficiently.\nOne way is to not use the lucene sorting code when the number of hits is expected to be large... it's not optimized for that. ",
            "id": "comment-15256450"
        },
        {
            "date": "2016-10-19T20:38:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8ae3304c8631e1ba9a14aa0fc576e13b9198dfe5 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8ae3304 ]\n\nSOLR-7580: Move defaults in bin/solr.in.sh into bin/solr (incl. Windows) ",
            "id": "comment-15589791"
        },
        {
            "date": "2016-10-19T20:41:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 22cee924ac03e27da5aa020f9a055bb93928d811 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=22cee92 ]\n\nSOLR-7580: Move defaults in bin/solr.in.sh into bin/solr (incl. Windows)\n\n(cherry picked from commit 8ae3304) ",
            "id": "comment-15589798"
        },
        {
            "date": "2016-10-19T20:43:54+0000",
            "author": "David Smiley",
            "content": "Darn it; wrong JIRA reference in the commit!  Sorry for the noise. ",
            "id": "comment-15589803"
        },
        {
            "date": "2016-10-19T20:59:30+0000",
            "author": "Markus Jelsma",
            "content": "Ah, i was almost lead to believe this issue was addressed \n\nThe work-around is fine, but with the whole analysis and processing inside Solr nowadays, i'd expect more users could run into this. I, at least, have no idea how to address this and post a patch. ",
            "id": "comment-15589845"
        }
    ]
}