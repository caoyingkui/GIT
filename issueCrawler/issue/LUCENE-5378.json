{
    "id": "SOLR-5594",
    "title": "Enable using extended field types with prefix queries for non-default encoded strings",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "query parsers",
            "Schema and Analysis"
        ],
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "Enable users to be able to use prefix query with custom field types with non-default encoding/decoding for queries more easily. e.g. having a custom field work with base64 encoded query strings.\n\nCurrently, the workaround for it is to have the override at getRewriteMethod level. Perhaps having the prefixQuery also use the calling FieldType's readableToIndexed method would work better.",
    "attachments": {
        "SOLR-5594.patch": "https://issues.apache.org/jira/secure/attachment/12620951/SOLR-5594.patch",
        "SOLR-5594-branch_4x.patch": "https://issues.apache.org/jira/secure/attachment/12621290/SOLR-5594-branch_4x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13857132",
            "author": "Yonik Seeley",
            "content": "readableToIndexed may not work well with some types... perhaps we should have a\nFieldType.getPrefixQuery(QParser qparser, SchemaField sfield, String prefix)\nessentially do it like getRangeQuery ",
            "date": "2013-12-26T22:26:18+0000"
        },
        {
            "id": "comment-13858072",
            "author": "Anshum Gupta",
            "content": "Thanks for the suggestion Yonik. Coming to think about it, that absolutely makes more sense. ",
            "date": "2013-12-28T17:30:46+0000"
        },
        {
            "id": "comment-13859586",
            "author": "Anshum Gupta",
            "content": "Sans the test. Working on the tests right now. ",
            "date": "2013-12-31T17:40:14+0000"
        },
        {
            "id": "comment-13861383",
            "author": "Anshum Gupta",
            "content": "Patch for 4x with test.\nThere one thing I'd like to do better though. To avoid a dependency on lucene tests, I added BinaryTokenStream.java to solr-core-test.\nI'll try and get rid of it but it'd be good to have feedback in the meanwhile.\n\nAlso, I'll add a test that works with trunk (which might require a bit of rework). ",
            "date": "2014-01-03T09:45:19+0000"
        },
        {
            "id": "comment-13864579",
            "author": "Hoss Man",
            "content": "\n\tAren't there other parsers classes that will need similar changes? (PrefixQParserPlugin, SimplerQParserPlugin at a minimum i think)\n\tI think your new FieldType.getPrefixQuery method has a back compat break for any existing FieldTypes that people might be using because it now calls readableToIndexed ... that smells like it could break things for some FieldTypes ... but maybe i'm missing something?\n\tFieldType.getPrefixQuery has lots of bogus cut/pasted javadocs from getRangeQuery\n\tCan't your MyIndexedBinaryField just subclass BinaryField to reduce some code?  for that matter: is there any reason why we shouldn't just make BinaryField implement prefix queries in the way your MyIndexedBinaryField does?\n\ti'm not sure i understand why you need BinaryTokenStream for the test (see previous comment about just extending/improving BinaryField) but if so perhaps it should be moved from lucene/core to lucene/test-framework?\n\n ",
            "date": "2014-01-07T19:19:53+0000"
        },
        {
            "id": "comment-13865212",
            "author": "Anshum Gupta",
            "content": "Here's another patch. ",
            "date": "2014-01-08T08:54:25+0000"
        },
        {
            "id": "comment-13865215",
            "author": "Anshum Gupta",
            "content": "Thanks for the feedback Hoss!\n\nI've tried to be less invasive this time around and have avoided using readableToIndexed in the base class. I've also fixed the javadocs.\nAbout using the BinaryTokenStream (extending BinaryField), I may be missing something as far as the reason is concerned but it's tough to work with BinaryFields right now. They can not be indexed really and the only way to index a binary field is through the hack I put it.\nI've removed all of that and made this more generic.\n\nI'll also open a separate JIRA to make BinaryFields better and more usable.\n\nHere's what still remains before this can be checked in:\n\n\tFix/change dependent Parser classes e.g. PrefixQParserPlugin and SimpleQParserPlugin.\n\tA test that shows that things haven't changed for the existing field types as far as Prefix Queries are concerned.\n\n\n\nNeed a couple of hours for that. ",
            "date": "2014-01-08T09:01:04+0000"
        },
        {
            "id": "comment-13865255",
            "author": "Anshum Gupta",
            "content": "https://issues.apache.org/jira/browse/SOLR-5619 ",
            "date": "2014-01-08T09:43:08+0000"
        },
        {
            "id": "comment-13866457",
            "author": "Anshum Gupta",
            "content": "Patch with the following changes:\n\n\tFixes to SimpleQParserPlugin and PrefixQParserPlugin\n\tTest to show that prefix query for integer fields works as it did prior to this change.\n\tTest to show how custom fields override getPrefixQuery() method for 2 different custom fields.\n\n ",
            "date": "2014-01-09T09:11:25+0000"
        },
        {
            "id": "comment-13866462",
            "author": "Anshum Gupta",
            "content": "There was something wrong with the last patch. Here's another one. ",
            "date": "2014-01-09T09:18:47+0000"
        },
        {
            "id": "comment-13866615",
            "author": "Robert Muir",
            "content": "Can we avoid reformatting SimpleQParser here? it makes it impossible to review the changes ",
            "date": "2014-01-09T12:55:24+0000"
        },
        {
            "id": "comment-13866713",
            "author": "Anshum Gupta",
            "content": "Robert, I thought about how to handle SimleQParser with this change before I even put up this patch but I can't think of another way to handle it here. This seems like the best way to go as far as handling SimpleQParser for this change is concerned. ",
            "date": "2014-01-09T15:37:38+0000"
        },
        {
            "id": "comment-13866720",
            "author": "Robert Muir",
            "content": "Thats not what i mean: i mean that in the patch its not possible to see your actual logic changes, because every single line of code is reformatted.  ",
            "date": "2014-01-09T15:44:37+0000"
        },
        {
            "id": "comment-13866728",
            "author": "Anshum Gupta",
            "content": "I'm sorry I misread it.  Perhaps it's something that idea did. Let me have a look at it and fix that.\nThanks for pointing that out. ",
            "date": "2014-01-09T15:51:27+0000"
        },
        {
            "id": "comment-13866759",
            "author": "Anshum Gupta",
            "content": "Fixed the reformatting, however as things have moved (and there's been a level change.. new inner classes etc) it still looks a little tricky but yes, it's no longer just reformatted code in the patch. ",
            "date": "2014-01-09T16:31:52+0000"
        },
        {
            "id": "comment-13875225",
            "author": "Hoss Man",
            "content": "Anshum: looks pretty good ... a few requests...\n\n\n\tSolrQueryParserBase.newPrefixQuery shouldnt' be removed completely (it's protected, subclasses might be using it) ... just update it to call the new method on the FieldType.\n\tcan you add some javadocs to the test classes (particularly the new field types) with an explanation of what they do and why they are special\n\tcan we change the field names in your test schema (currently \"customfield\" and \"customfield2\") to something more clear what they do (ie: \"swap_foo_bar\" and \"int_prefix_as_range\") so the (expected) wonky behavior is less confusing when reading the test?\n\tthe tests should be updated to show that using {!prefix} and {!simple} also works with your custom field types\n\tideally we want to show that {!prefix}, {!simple}, and {!lucene} all produce queries that are equals() when using your custom field types (take a look at QueryEqualityTest for inspiration)\n\n\n ",
            "date": "2014-01-17T20:15:59+0000"
        },
        {
            "id": "comment-13875282",
            "author": "Ryan Ernst",
            "content": "\nFixed the reformatting, however as things have moved (and there's been a level change.. new inner classes etc) it still looks a little tricky but yes, it's no longer just reformatted code in the patch.\n\nWhy are any of the changes in SimpleQParser necessary, except for changing new PrefixQuery(...) to sf.getType().getPrefixQuery()?  It looks like all the other changes there are unnecessary structural changes.  Since the IndexSchema is already available, it should be just a couple lines changed (180/183).\n\nWhy not just make the necessary changes for this issue, and open another jira if you feel static inner classes would be better here (although I don't see why two are necessary)? ",
            "date": "2014-01-17T21:35:38+0000"
        },
        {
            "id": "comment-13875349",
            "author": "Uwe Schindler",
            "content": "SolrQueryParserBase.newPrefixQuery shouldnt' be removed completely (it's protected, subclasses might be using it) ... just update it to call the new method on the FieldType.\n\nWhy are any of the changes in SimpleQParser necessary, except for changing new PrefixQuery(...) to sf.getType().getPrefixQuery()? It looks like all the other changes there are unnecessary structural changes. Since the IndexSchema is already available, it should be just a couple lines changed (180/183).\n\nYes, this would also be identical to range query behaviour: newRangeQuery also delegates to the field type, and the protected method is there for subclasses. ",
            "date": "2014-01-17T22:43:49+0000"
        },
        {
            "id": "comment-13875832",
            "author": "Anshum Gupta",
            "content": "Thanks for having a look at it. I'm traveling until Monday (= without reliable internet connection) so would have a look at it again once I get back home and add comments/changes then. ",
            "date": "2014-01-19T06:50:02+0000"
        },
        {
            "id": "comment-13876553",
            "author": "Hoss Man",
            "content": "Why are any of the changes in SimpleQParser necessary, except for changing new PrefixQuery(...) to sf.getType().getPrefixQuery()? It looks like all the other changes there are unnecessary structural changes. Since the IndexSchema is already available, it should be just a couple lines changed (180/183).\n\nThis confused me too ... but the structural changes are necessary in order to pass the QParser down to the FieldType's method for the context of what is being parsed \u2013 with both the QParser and the SimpleQueryParser instances being anonymous subclasses, it's not possible at the moment.\n\n(I don't remember if the QParser context is used at the moment in any of the new FieldType.newPrefixQuery impls, but that either way that param should exist in case FieldType subclasses want to take advantage of it) ",
            "date": "2014-01-20T16:24:10+0000"
        },
        {
            "id": "comment-13877521",
            "author": "Anshum Gupta",
            "content": "Hoss: Thanks for taking that up before I got back.\n\nYes, this would also be identical to range query behaviour: newRangeQuery also delegates to the field type, and the protected method is there for subclasses.\nMy changes are Solr specific. I'm not sure how would it play with the Solr QParsers (Solr extended fields) if I moved the changes to Lucene instead of Solr. ",
            "date": "2014-01-21T15:15:22+0000"
        },
        {
            "id": "comment-13877522",
            "author": "Anshum Gupta",
            "content": "Chris Hostetter (Unused) : I'll make the recommended changes and put up another patch. ",
            "date": "2014-01-21T15:16:48+0000"
        },
        {
            "id": "comment-13877980",
            "author": "Anshum Gupta",
            "content": "Patch with the following changes:\n\n\tAdded back SolrQueryParserBase.newPrefixQuery so that it doesn't break backward compatibility.\n\tAdded some javadocs to the test classes\n\tChanged the names of custom fields in the new test schema.\n\tAdded tests that show {!prefix}, {!simple}, and {!lucene} all produce queries that are .equals() for custom field.\n\n ",
            "date": "2014-01-21T23:08:47+0000"
        },
        {
            "id": "comment-13878055",
            "author": "Hoss Man",
            "content": "Anshum: this all looks great, except for 3 things...\n\n\n\tmy point about testing that the querys produced by all the parsers are .equals() was about the queries produced by each parser being equal to each other.  The point is regardless of which parser you use, the resulting queries should be the same because we now delegate to the FieldType.  So instead of distinct testQuerySimple, testQueryLucene, testQueryPrefix methods each using a single parser, we should have a test that shows something like this...\n\nassertQueryEquals(req,\n  \"{!lucene df=swap_foo_bar_in_prefix_query}foo*\",\n  \"{!simple f=swap_foo_bar_in_prefix_query}foo*\",\n  \"{!prefix f=swap_foo_bar_in_prefix_query}foo\",\n  ...);\nassertQueryEquals(req,\n  \"{!lucene}int_prefix_as_range:[42 TO *]\",\n  \"{!lucene}int_prefix_as_range:42*\",\n  \"{!simple}int_prefix_as_range:[42 TO *]\",\n  \"{!simple}int_prefix_as_range:42*\",\n  \"{!prefix f=int_prefix_as_range}42\",\n  ...);\n\n\n...you see what i mean?\n\tnew Random() is not allowed - you need to use random() inherited from the test baseclass. you can use \"ant precommit\" to help spot mistakes like this.\n\ttaking a second look at your assertions about swap_foo_bar_in_prefix_query, i don't actually think they are very strong, since (unless i'm missing something?) the number of docs containing \"foo\" prefixes and the number of docs containing \"bar\" prefixes will be the same.  you should change the math so that one is less common then the other, and mix in some values that don't match either prefix as well.  (ie: let the field be multivalued, and if the id is a multiple of 3, add a foo term, if it's a multiple of 7 add a bar term, and if it's a multiple of 11 add a zzz term - then assert the expected counts based on the total number of docs)\n\n ",
            "date": "2014-01-22T00:10:51+0000"
        },
        {
            "id": "comment-13878082",
            "author": "Anshum Gupta",
            "content": "Thanks for the patience Hoss.\n\n\n\tI get what you're trying to put forward about asserting the queries to be equal. I've made those changes and I'm trying to get the test to pass for now (which isn't happening for now).\n\tThe numDocs for each of those would be different, but yes, by adding what you suggested it would only become stronger. I'll add that too.\n\n\n\nWhen I run \"ant precommit\", I just get \"The following files are missing svn:eol-style\" (perhaps it stops right there) followed by a list of files.\n ",
            "date": "2014-01-22T00:51:15+0000"
        },
        {
            "id": "comment-13878121",
            "author": "Anshum Gupta",
            "content": "I\u2019ve tried Mac EOL styles(\\r) , *nix style EOL (\\n) and  OS dependent (which should also be mac style) but in vain. ",
            "date": "2014-01-22T01:31:28+0000"
        },
        {
            "id": "comment-13878141",
            "author": "Anshum Gupta",
            "content": "\n\trandomized the doc counts more (more like a 2:1 distribution).\n\tChecked for query equality across qparsers.\n\n\n\nI haven't been able to run ant precommit yet so have just fixed \"new Random()\" for now.\nOnce I figure out (or know) how to fix the EOL issue, I'll run ant precommit to fix any further issues on that front. ",
            "date": "2014-01-22T01:52:32+0000"
        },
        {
            "id": "comment-13878156",
            "author": "Anshum Gupta",
            "content": "Figured that out and ran it, only to run into the same issue twice over:\nlucene-trunk2/lucene/common-build.xml:1851: java.lang.OutOfMemoryError: Java heap space\n\nis this a known issue or am I missing something here? ",
            "date": "2014-01-22T02:09:55+0000"
        },
        {
            "id": "comment-13878195",
            "author": "Anshum Gupta",
            "content": "Ran \"ant check-forbidden-apis\" successfully. ",
            "date": "2014-01-22T03:13:51+0000"
        },
        {
            "id": "comment-13878286",
            "author": "Steve Rowe",
            "content": "Once I figure out (or know) how to fix the EOL issue, I'll run ant precommit to fix any further issues on that front.\n\nIn case you haven't figured it out yet, you just run svn propset svn:eol-style native <file(s)>, where <file(s)> is the (list of) file(s) that don't have the svn:eol-style property set on them.  This info should be on Lucene's and Solr's HowToContribute wiki pages, though I see it's not there yet.\n\n\nFigured that out and ran it, only to run into the same issue twice over:\nlucene-trunk2/lucene/common-build.xml:1851: java.lang.OutOfMemoryError: Java heap space\n\nLine 1851 in lucene/common-build.xml runs the JTidy Ant task.  According to the comment on line 341:\n\n\n      <!-- TODO: Fix this! For now only run this on 64bit, because jTIDY OOMs with default heap size: -->\n\n\n\nYou can give arguments to the JVM that runs ant via the environment variable ANT_OPTS.  Here's mine (on Win7+Cygwin under bash):\n\n\nexport ANT_OPTS=-Xmx1100M -XX:MaxPermSize=256m -Dpython.exe=python2.6.exe -Dpython32.exe=python3.2m.exe\n\n\n\nI doubt the JTidy Ant task requires 1100MB, but the JFlex Ant task OOMs with anything less than 1040MB on my box when it generates UAX29URLEmailTokenizerImpl.java (via ant jflex under lucene/analysis/common/, so that's why I have it set that high. ",
            "date": "2014-01-22T05:40:54+0000"
        },
        {
            "id": "comment-13878743",
            "author": "Anshum Gupta",
            "content": "Thanks for that info Steve. I was able to set the svn property (just that I was trying to accomplish that through my IDE, which didn't work).\nAlso, I'll use those ANT_OPTS to have stuff working for now. ",
            "date": "2014-01-22T15:10:42+0000"
        },
        {
            "id": "comment-13878825",
            "author": "ASF subversion and git services",
            "content": "Commit 1560412 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1560412 ]\n\nSOLR-5594: Allow FieldTypes to specify custom PrefixQuery behavior ",
            "date": "2014-01-22T16:50:08+0000"
        },
        {
            "id": "comment-13878866",
            "author": "ASF subversion and git services",
            "content": "Commit 1560432 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1560432 ]\n\nSOLR-5594: Allow FieldTypes to specify custom PrefixQuery behavior (merge r1560412) ",
            "date": "2014-01-22T17:26:22+0000"
        },
        {
            "id": "comment-13878867",
            "author": "Hoss Man",
            "content": "Thanks Anshum!\n\nCommitted revision 1560412.\nCommitted revision 1560432. ",
            "date": "2014-01-22T17:26:55+0000"
        }
    ]
}