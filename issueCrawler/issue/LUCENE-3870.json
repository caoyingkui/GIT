{
    "id": "LUCENE-3870",
    "title": "VarDerefBytesImpl doc values prefix length may fall across two pages",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The VarDerefBytesImpl doc values encodes the unique byte[] with prefix (1 or 2 bytes) first, followed by bytes, so that it can use PagedBytes.fillSliceWithPrefix.\n\nIt does this itself rather than using PagedBytes.copyUsingLengthPrefix...\n\nThe problem is, it can write an invalid 2 byte prefix spanning two blocks (ie, last byte of block N and first byte of block N+1), which fillSliceWithPrefix won't decode correctly.",
    "attachments": {
        "LUCENE-3870.patch": "https://issues.apache.org/jira/secure/attachment/12518393/LUCENE-3870.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-14T22:42:11+0000",
            "content": "Patch with test case showing the failure:\n\n1) testLengthPrefixAcrossTwoPages(org.apache.lucene.index.TestDocValuesIndexing)\njava.lang.ArrayIndexOutOfBoundsException: 32768\n\tat org.apache.lucene.util.PagedBytes$Reader.fillSliceWithPrefix(PagedBytes.java:204)\n\tat org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource.getBytes(VarDerefBytesImpl.java:124)\n\tat org.apache.lucene.index.TestDocValuesIndexing.testLengthPrefixAcrossTwoPages(TestDocValuesIndexing.java:956)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n\tat org.apache.lucene.util.LuceneTestCase$SubclassSetupTeardownRule$1.evaluate(LuceneTestCase.java:729)\n\tat org.apache.lucene.util.LuceneTestCase$InternalSetupTeardownRule$1.evaluate(LuceneTestCase.java:645)\n\tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:22)\n\tat org.apache.lucene.util.LuceneTestCase$TestResultInterceptorRule$1.evaluate(LuceneTestCase.java:556)\n\tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:51)\n\tat org.apache.lucene.util.LuceneTestCase$RememberThreadRule$1.evaluate(LuceneTestCase.java:618)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n\tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:164)\n\tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n\tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:51)\n\tat org.apache.lucene.util.StoreClassNameRule$1.evaluate(StoreClassNameRule.java:21)\n\tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:22)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:45)\n\n\n\nSeems like we either have to fix DV to ensure prefix always falls in a single block, or fix PagedBytes to tolerate a 2 byte prefix spanning two blocks... ",
            "author": "Michael McCandless",
            "id": "comment-13229713"
        },
        {
            "date": "2012-03-16T09:18:38+0000",
            "content": "nice catch mike! Here is a patch fixing PagedBytes.Reader#fillSliceWithPrefix this is a general trap and should be fixed in this method IMO ",
            "author": "Simon Willnauer",
            "id": "comment-13230984"
        },
        {
            "date": "2012-03-16T10:32:20+0000",
            "content": "+1, looks good Simon!\n\nJust remember to remove that sop... ",
            "author": "Michael McCandless",
            "id": "comment-13231033"
        },
        {
            "date": "2012-03-16T10:40:32+0000",
            "content": "fixed ",
            "author": "Simon Willnauer",
            "id": "comment-13231039"
        }
    ]
}