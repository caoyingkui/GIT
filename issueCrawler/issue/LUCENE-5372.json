{
    "id": "LUCENE-5372",
    "title": "Replace StringBuffer with StringBuilder where possible, add to forbidden-apis",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "This is pretty minor, but I found a few issues with the toString implementations while looking through the facet data structures.\n\nThe most egregious is the use of string concatenation in the IntArray class. I have fixed that using StringBuilders. I also noticed that other classes were using StringBuffer instead of StringBuilder. According to the javadoc,\n\n\"This class is designed for use as a drop-in replacement for StringBuffer in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations.\"",
    "attachments": {
        "LUCENE-5372-StringBuffer.patch": "https://issues.apache.org/jira/secure/attachment/12621538/LUCENE-5372-StringBuffer.patch",
        "5372-lucene5339.patch": "https://issues.apache.org/jira/secure/attachment/12620297/5372-lucene5339.patch",
        "LUCENE-5372-forbidden.patch": "https://issues.apache.org/jira/secure/attachment/12619507/LUCENE-5372-forbidden.patch",
        "5372-v2.patch": "https://issues.apache.org/jira/secure/attachment/12620296/5372-v2.patch",
        "5372.patch": "https://issues.apache.org/jira/secure/attachment/12619246/5372.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13851323",
            "author": "Joshua Hartman",
            "content": "I was using git-svn, but I believe the patch should still apply with patch -p1 ",
            "date": "2013-12-18T03:43:02+0000"
        },
        {
            "id": "comment-13851447",
            "author": "Dawid Weiss",
            "content": "Looks good to me and I think it's applicable to 4.x and 5.x (StringBuilder requires Java >= 1.5 but both of these branches do, right)? ",
            "date": "2013-12-18T06:51:54+0000"
        },
        {
            "id": "comment-13851794",
            "author": "Mark Miller",
            "content": "Yes, 4x=6, 5x=7 ",
            "date": "2013-12-18T14:56:32+0000"
        },
        {
            "id": "comment-13852199",
            "author": "Joshua Hartman",
            "content": "I can also optimize memory usage by precalculating the maximum size in advance for the StringBuilder for each collection. May be overkill - what are your thoughts? I am new here.\n\nhttp://wiki.apache.org/lucene-java/HowToContribute implies I should wait for the patch to be pulled in by a lucene dev. Is this a correct interpretation? ",
            "date": "2013-12-18T21:54:21+0000"
        },
        {
            "id": "comment-13852214",
            "author": "Dawid Weiss",
            "content": "No need to be paranoid about performance here, Josh. The patch is fine, I'll apply it, although tomorrow because it's gotten really late over here. ",
            "date": "2013-12-18T22:02:14+0000"
        },
        {
            "id": "comment-13852216",
            "author": "Michael McCandless",
            "content": "Hi Joshua, thank you for the patch here, but we are in the process of simplifying the facet APIs (on this branch: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene5339 ), and I believe most (all?) of the affected code here has been removed.  So I would hold off for now, or maybe check out the branch and see if any of these O(N^2) problems still remain.\n\nThanks! ",
            "date": "2013-12-18T22:04:17+0000"
        },
        {
            "id": "comment-13852707",
            "author": "Dawid Weiss",
            "content": "Do you want me to hold it, Mike? Josh \u2013 perhaps you could rebase your patch against the branch Mike pointed to (if there's anything left)? ",
            "date": "2013-12-19T07:48:41+0000"
        },
        {
            "id": "comment-13852717",
            "author": "Uwe Schindler",
            "content": "Oh oh, we should put StringBuffer on the forbidden-apis list. It is one entry in our base.txt signatures file (please don't add a new one).\n\nWe replaced all StringBuffers already earlier when we moved to Lucene 3.0 (which is the first one for Java 5), so we can disallow StringBuffer everywhere! ",
            "date": "2013-12-19T08:08:21+0000"
        },
        {
            "id": "comment-13852723",
            "author": "Uwe Schindler",
            "content": "This already fails in lucene-core's test! So we should replace them everywhere (although tests is not an issue).\n\n\nant check-forbidden-apis\n\n[...]\n\n-check-forbidden-base:\n[forbidden-apis] Reading bundled API signatures: jdk-unsafe-1.7\n[forbidden-apis] Reading bundled API signatures: jdk-deprecated-1.7\n[forbidden-apis] Reading API signatures: C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr3\\lucene\\tools\\forbiddenApis\\base.txt\n[forbidden-apis] Loading classes to check...\n[forbidden-apis] Scanning for API signatures and dependencies...\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.TestSearchForDuplicates (TestSearchForDuplicates.java:56)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.TestSearchForDuplicates (TestSearchForDuplicates.java:64)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl (CharTermAttributeImpl.java:148)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.TestSearch (TestSearch.java:95)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.TestSearch (TestSearch.java:103)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.index.TestDoc (TestDoc.java:152)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.index.TestDoc (TestDoc.java:193)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl (TestCharTermAttributeImpl.java:179)\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl (TestCharTermAttributeImpl.java:216)\n[forbidden-apis] Scanned 2369 (and 462 related) class file(s) for forbidden API invocations (in 1.19s), 9 error(s).\n\n ",
            "date": "2013-12-19T08:11:58+0000"
        },
        {
            "id": "comment-13852727",
            "author": "Uwe Schindler",
            "content": "his one is wanted, but mostly obsolete - maybe put on exclusion list:\n\n\n[forbidden-apis] Forbidden class/interface use: java.lang.StringBuffer [Use StringBuilder instead, which has no synchronization]\n[forbidden-apis]   in org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl (CharTermAttributeImpl.java:148)\n\n ",
            "date": "2013-12-19T08:18:59+0000"
        },
        {
            "id": "comment-13852728",
            "author": "Uwe Schindler",
            "content": "Should we put the remaining StringBuffers on a separate issue or fix it here? ",
            "date": "2013-12-19T08:19:38+0000"
        },
        {
            "id": "comment-13852732",
            "author": "Dawid Weiss",
            "content": "I think we can fix it here since Josh brought that up. ",
            "date": "2013-12-19T08:28:43+0000"
        },
        {
            "id": "comment-13852836",
            "author": "Michael McCandless",
            "content": "Do you want me to hold it, Mike?\n\nYes, please!\n\n+1 to fix StringBuffers here!  Thanks, Joshua. ",
            "date": "2013-12-19T12:00:32+0000"
        },
        {
            "id": "comment-13853260",
            "author": "Joshua Hartman",
            "content": "I'll make the StringBuffer -> StringBuilder fix on trunk the branch mentioned by Mike and attach new patches for each. Expect the patch this evening or tomorrow. ",
            "date": "2013-12-19T20:27:11+0000"
        },
        {
            "id": "comment-13856085",
            "author": "Joshua Hartman",
            "content": "Uploaded versions of the patch for both trunk and lucene5339 branches for replacing StringBuffer -> StringBuilder. Due to API constraints it is not possible to do so in all cases.\n\nMike was also correct. Code related to the specific O(n^2) issue this JIRA was started for no longer exists on lucene5339. ",
            "date": "2013-12-24T02:18:38+0000"
        },
        {
            "id": "comment-13857098",
            "author": "Dawid Weiss",
            "content": "I wanted to apply these patches but then looked deeper and it seems we can't just apply them without some consideration. For example, while reviewing, I noticed things such as this one:\n\n- * All use of StringBuffers has been refactored to StringBuilder for speed.\n+ * All use of StringBuilders has been refactored to StringBuilder for speed.\n\n\nwhich seem to be an auto-replacement artifact. While this is a no-problem, this may be:\n\n+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java\n@@ -144,8 +144,8 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr\n       } else if (csq instanceof CharBuffer && ((CharBuffer) csq).hasArray()) {\n         final CharBuffer cb = (CharBuffer) csq;\n         System.arraycopy(cb.array(), cb.arrayOffset() + cb.position() + start, termBuffer, termLength, len);\n-      } else if (csq instanceof StringBuffer) {\n-        ((StringBuffer) csq).getChars(start, end, termBuffer, termLength);\n+      } else if (csq instanceof StringBuilder) {\n+        ((StringBuilder) csq).getChars(start, end, termBuffer, termLength);\n\n\nbut CharTermAttributeImpl  already has an if clause for StringBuilder, the full code is:\n\n      if (csq instanceof String) {\n        ((String) csq).getChars(start, end, termBuffer, termLength);\n      } else if (csq instanceof StringBuilder) {\n        ((StringBuilder) csq).getChars(start, end, termBuffer, termLength);\n      } else if (csq instanceof CharTermAttribute) {\n        System.arraycopy(((CharTermAttribute) csq).buffer(), start, termBuffer, termLength, len);\n      } else if (csq instanceof CharBuffer && ((CharBuffer) csq).hasArray()) {\n        final CharBuffer cb = (CharBuffer) csq;\n        System.arraycopy(cb.array(), cb.arrayOffset() + cb.position() + start, termBuffer, termLength, len);\n      } else if (csq instanceof StringBuffer) {\n        ((StringBuffer) csq).getChars(start, end, termBuffer, termLength);\n      } else {\n        while (start < end)\n          termBuffer[termLength++] = csq.charAt(start++);\n        // no fall-through here, as termLength is updated!\n        return this;\n      }\n\n\nI would actually leave it for Uwe to modify the api checker rules and then hand-pick offenders. Your contribution won't be lost, Joshua, it'll just go in via another route (not a direct patch, rather a good suggestion . ",
            "date": "2013-12-26T21:42:22+0000"
        },
        {
            "id": "comment-13862678",
            "author": "Uwe Schindler",
            "content": "Here is a new patch that was created from scratch by using Eclipse search for java.lang.StringBuffer:\n\n\tThe queryparser problems are autogen'ed code. I modified the build.xml to do a replacement in ParseException.java and TokenMgrError.java (queryparser module and solr-core)\n\tSome tests called StringWriter.getBuffer().toString() - this was only detected by forbidden-apis\n\tSome code parts using regex.Matcher have to use StringBuilder, because Matcher internally also uses this, so appendReplacement() and appendTail() have to stay\n\tI removed some useless methods in Solr's commons-csv fork. I hope we can remove that soon!\n\tIn some tests, Solr used StringBuffer, but synchronization seems to be needed, I left untouched.\n\n\n\nBecause we have to use StringBuffer quite often, I did not add it to forbidden apis, because the exclusions would prevent other forbidden stuff in the excluded files to be detected.\n\nI will commit this later and close this issue. Since the facet APIs were cleaned up, the original issue in IntArray disappeared, right? (the class is no longer there). ",
            "date": "2014-01-05T22:50:50+0000"
        },
        {
            "id": "comment-13862684",
            "author": "ASF subversion and git services",
            "content": "Commit 1555645 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1555645 ]\n\nLUCENE-5372: Replace StringBuffer by StringBuilder, where possible ",
            "date": "2014-01-05T23:04:53+0000"
        },
        {
            "id": "comment-13862685",
            "author": "ASF subversion and git services",
            "content": "Commit 1555646 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1555646 ]\n\nMerged revision(s) 1555645 from lucene/dev/trunk:\nLUCENE-5372: Replace StringBuffer by StringBuilder, where possible ",
            "date": "2014-01-05T23:11:40+0000"
        },
        {
            "id": "comment-13862686",
            "author": "Uwe Schindler",
            "content": "Thanks Joshua!\n\nIf somebody has an idea how to add StringBuffer to forbidden without excluding tons of files, reopen.\n\n\nOne idea for forbidden-apis would be: Add some new \"@IgnoreForbidden\" annotation (class file, not runtime visible), which makes the forbidden-api checker ignore methods or classes with that ann. This would allow to ignore only very specific code parts! Backside: You need a JAR file while compiling with the annotation... ",
            "date": "2014-01-05T23:15:12+0000"
        }
    ]
}