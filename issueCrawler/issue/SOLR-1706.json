{
    "id": "SOLR-1706",
    "title": "wrong tokens output from WordDelimiterFilter depending upon options",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4.1",
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "below you can see that when I have requested to only output numeric concatenations (not words), some words are still sometimes output, ignoring the options i have provided, and even then, in a very inconsistent way.\n\n\n  assertWdf(\"Super-Duper-XL500-42-AutoCoder's\", 0,0,0,1,0,0,0,0,1, null,\n    new String[] { \"42\", \"AutoCoder\" },\n    new int[] { 18, 21 },\n    new int[] { 20, 30 },\n    new int[] { 1, 1 });\n\n  assertWdf(\"Super-Duper-XL500-42-AutoCoder's-56\", 0,0,0,1,0,0,0,0,1, null,\n    new String[] { \"42\", \"AutoCoder\", \"56\" },\n    new int[] { 18, 21, 33 },\n    new int[] { 20, 30, 35 },\n    new int[] { 1, 1, 1 });\n\n  assertWdf(\"Super-Duper-XL500-AB-AutoCoder's\", 0,0,0,1,0,0,0,0,1, null,\n    new String[] {  },\n    new int[] {  },\n    new int[] {  },\n    new int[] {  });\n\n  assertWdf(\"Super-Duper-XL500-42-AutoCoder's-BC\", 0,0,0,1,0,0,0,0,1, null,\n    new String[] { \"42\" },\n    new int[] { 18 },\n    new int[] { 20 },\n    new int[] { 1 });\n\n\n\nwhere assertWdf is \n\n  void assertWdf(String text, int generateWordParts, int generateNumberParts,\n      int catenateWords, int catenateNumbers, int catenateAll,\n      int splitOnCaseChange, int preserveOriginal, int splitOnNumerics,\n      int stemEnglishPossessive, CharArraySet protWords, String expected[],\n      int startOffsets[], int endOffsets[], String types[], int posIncs[])\n      throws IOException {\n    TokenStream ts = new WhitespaceTokenizer(new StringReader(text));\n    WordDelimiterFilter wdf = new WordDelimiterFilter(ts, generateWordParts,\n        generateNumberParts, catenateWords, catenateNumbers, catenateAll,\n        splitOnCaseChange, preserveOriginal, splitOnNumerics,\n        stemEnglishPossessive, protWords);\n    assertTokenStreamContents(wdf, expected, startOffsets, endOffsets, types,\n        posIncs);\n  }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-12797366",
            "date": "2010-01-06T22:40:28+0000",
            "content": "by the way, i do not have a patch here. i am putting the finishing touches on converting this tokenstream to the new tokenstream API so one alternative is to fix it under SOLR-1657.\n\nthe problem is i am autogenerating many test cases for all 512 combos of the 9 boolean options across various strings and seeing things like this.\n\nso, at the least i would like agreement that its buggy behavior.. if someone knows how to fix the existing code that would be even better, it would make testing easier on me. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12797466",
            "date": "2010-01-07T02:55:31+0000",
            "content": "ok i narrowed this one down some, appears to be unrelated completely to possessives, but some other off-by-one bug:\n\n\npublic void test0() throws Exception {\n  assertWdf(\"1-a-2 3-b-c-4 5-d-e 6-f\", 0,0,0,0,0,0,0,0,0, null,\n    new String[] {  },\n    new int[] {  },\n    new int[] {  },\n    new int[] {  });\n}\n\npublic void test32() throws Exception {\n  assertWdf(\"1-a-2 3-b-c-4 5-d-e 6-f\", 0,0,0,1,0,0,0,0,0, null,\n    new String[] { \"1\", \"a\", \"2\", \"3\", \"4\", \"5\", \"6\", \"f\" },\n    new int[] { 0, 2, 4, 6, 12, 14, 20, 22 },\n    new int[] { 1, 3, 5, 7, 13, 15, 21, 23 },\n    new int[] { 1, 1, 1, 1, 1, 1, 1, 1 });\n}\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12797829",
            "date": "2010-01-07T23:13:10+0000",
            "content": "its not just the concatenation, but also the subword generation.\n\nIn the case below, Autocoder should not be emitted, as only numeric subword generation is turned on.\n\n\n  public void test128() throws Exception {\n    assertWdf(\"word 1234 Super-Duper-XL500-42-Autocoder x'sbd123 a4b3c-\", 0,1,0,0,0,0,0,0,0, null,\n      new String[] { \"word\", \"1234\", \"42\", \"Autocoder\", \"a4b3c\" },\n      new int[] { 0, 5, 28, 31, 50 },\n      new int[] { 4, 9, 30, 40, 55 },\n      new int[] { 1, 1, 1, 1, 2 });\n  }\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12798251",
            "date": "2010-01-08T23:33:13+0000",
            "content": "Yep, certainly bugs.  IMO, no need to worry about trying to match (even for compat) - these look like real configuration edge cases to me. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12850603",
            "date": "2010-03-27T23:22:21+0000",
            "content": "This was resolved in revision 922957. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872789",
            "date": "2010-05-28T03:01:54+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        }
    ]
}