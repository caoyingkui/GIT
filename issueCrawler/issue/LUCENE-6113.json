{
    "id": "LUCENE-6113",
    "title": "ReferenceManager.release uses assertion to expect argument not null, also expects argument to be not null",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.1",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "A common use pattern for the Reference Manager looks like so:\n\n\nIndexSearcher searcher = null;\ntry {\n    searcher = searcherManager.acquire();\n    // do real work\n} finally {\n   searcherManager.release(searcher);\n}\n\n\n\nThe problem with this code is if 'acquire' throws an exception, the finally block is called with a null reference for 'searcher'.  There are two issues, one is this call release() uses assertion to check for argument validity, which is not recommended (http://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html) and secondly to fix this, we need to guard all calls to release with an if clause.\n\nWhy not have release() be a noop if it is passed null, instead of triggering an NPE?  It would support this API usage pattern w/o any changes on the behalf of users.\n\nLooking at the code, it appears that it is very unlikely that the acquire() call throws an exception.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14248716",
            "author": "Michael McCandless",
            "date": "2014-12-16T19:09:55+0000",
            "content": "I agree this is a hassle, but I think it'd be dangerous to accept null in release and ignore it?  It could mask a real bug (reader ref count leak) in the application.\n\nWe could simple drop the assert: the app will see NPE which should be self explanatory. "
        },
        {
            "id": "comment-14248848",
            "author": "ryan rawson",
            "date": "2014-12-16T20:23:02+0000",
            "content": "most people should be seeing the NPE because assertions are not always enabled.\n\nThe bigger question to me is API design. as it stands, people MUST guard their call in to this method call since there is no way to ensure that it will always be not-null (since the place you get one may fail).\n\nAs an illustrative example, in the Cocoa API, the 'release' refcount calls will do nothing to a null reference for similar reasons (dont spread null checking everywhere else in the code).\n\nSo finally, what's the code scenario whereby a 'reader ref count leak' could be made by doing the ignore a null release?  The app code already has to make that if guard, so why not absorb it in to the API? "
        },
        {
            "id": "comment-14249018",
            "author": "Michael McCandless",
            "date": "2014-12-16T21:46:43+0000",
            "content": "OK I think I agree; such a code case that would fall into this trap is ... poor code anyway, and we shouldn't design our APIs on the abusers.\n\nI wish we could somehow use AutoCloseable here so you could just use try-with-resources. "
        },
        {
            "id": "comment-14249030",
            "author": "Shai Erera",
            "date": "2014-12-16T21:53:47+0000",
            "content": "Why do you call manager.acquire() inside the try? I usually do it like that:\n\n\nIndexSearcher searcher = manager.acquire();\ntry {\n  // do some work\n} finally {\n  manager.release(searcher);\n}\n\n\n\nThe jdocs of SearcherManager also suggest to do the same thing.\n\nif you're calling it inside the try, you should definitely check that it's not null before attempting to pass it to SM. That's the problem of calling it inside the try. If you call it outside and it fails, there's nothing to release. "
        }
    ]
}