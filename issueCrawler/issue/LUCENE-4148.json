{
    "id": "LUCENE-4148",
    "title": "_TestUtil should be able to generate random longs",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "general/test"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It would be helpful in TestPackedInts at least, in order to generate random values (as a workaround, we currently generate a random int between 0 and min(Integer.MAX_VALUE, PackedInts.maxValue(bitsPerValue)). Moreover, it would help to fix nextInt for large ranges (calling nextInt(random, -10, Integer.MAX_VALUE) or even nextInt(random, 0, Integer.MAX_VALUE) currently fails because the range of values is > Integer.MAX_VALUE.",
    "attachments": {
        "LUCENE-4148.patch": "https://issues.apache.org/jira/secure/attachment/12532410/LUCENE-4148.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-15T15:04:11+0000",
            "content": "Try RandomInts from randomizedtesting, it does what you need:\n\n  /** \n   * A random integer from <code>min</code> to <code>max</code> (inclusive).\n   */\n  public static int     randomIntBetween(Random r, int min, int max) {\n    assert max >= min : \"max must be >= min: \" + min + \", \" + max;\n    long range = (long) max - (long) min;\n    if (range < Integer.MAX_VALUE) {\n      return min + r.nextInt(1 + (int) range);\n    } else {\n      return min + (int) Math.round(r.nextDouble() * range);\n    }\n  } \n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13295713"
        },
        {
            "date": "2012-06-15T15:06:38+0000",
            "content": "can we just switch _TestUtil.nextInt to use this then? ",
            "author": "Robert Muir",
            "id": "comment-13295715"
        },
        {
            "date": "2012-06-15T15:17:47+0000",
            "content": "Try RandomInts from randomizedtesting\n\nThanks, it fixes the problem for large range of ints, but I would also like to be able to generate random longs (> Integer.MAX_VALUE) in a fixed range. For PackedInts, I always need longs between 0 and a power of 2, but I thought it would be more useful to add a general-purpose long nextLong(Random, long, long) to _TestUtil.\n\nSince Random.nextLong(long) doesn't exist, it would be tempting to implement it by ourselves by using the same logic as Random.nextInt(int) (described here: http://docs.oracle.com/javase/7/docs/api/java/util/Random.html#nextInt(int) ), but I am afraid there would be copyright issues, so we should probably do it otherwise ( ? ).\n\nBy the way, the code of randomIntBetween makes me curious, are all values as likely when the range of values is >= Integer.MAX_VALUE (ie. when the else block gets executed)? ",
            "author": "Adrien Grand",
            "id": "comment-13295720"
        },
        {
            "date": "2012-06-15T16:58:58+0000",
            "content": "@Robert: sure we could (noting the subtle difference that the range is inclusive on both min and max).\n\nAs for distribution... I think it should be uniform over all of the range's values assuming r.nextDouble() yields uniform value from [0,1]? It's simple scaling after all. I didn't really consider nuances of floating point representation here but I think within 2^32 a double should cover everything fairly well.  ",
            "author": "Dawid Weiss",
            "id": "comment-13295765"
        },
        {
            "date": "2012-06-17T22:49:37+0000",
            "content": "It seems to me that min and max are inclusive in both methods.\n\n@Dawid could RandomInts have a similar method to generate longs? Something like \n\n  public static long randomLongBetween(Random r, long min, long max);\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13393632"
        },
        {
            "date": "2012-06-18T08:48:41+0000",
            "content": "I didn't check _TestUtil, to be honest \u2013 I think it did have a bug with range overflow passed to nextInt (which is not a problem in practice, but was my example on how randomized testing can explore unexpected things). \n\nAnyway, as for randomLongBetween \u2013 here you'd need to be more careful about double's representation so simple scaling won't work (there are ranges of double that transform to NaNs for example). I am not so strong in numerical analysis to be able to prove something is a correct solution to the problem. My (naive) take at this would be to calculate the range and then if split into a few cases:\n\n1) if it doesn't exceed a positive int, use nextInt()\n2) if it doesn't exceed a positive long, use nextLong()\n3) if it does exceed positive long, use BigDecimal?  \n\nMaybe this can be done faster without keeping the uniform distribution requirement so strong (i.e. use a modulo from a combination of two concatenated longs as BigDecimal or something like that). ",
            "author": "Dawid Weiss",
            "id": "comment-13395487"
        },
        {
            "date": "2012-06-18T13:49:54+0000",
            "content": "Here is a patch proposition:\n\n\t_TestUtil.nextInt forwards calls to RandomInts.randomIntBetween, as Robert suggested,\n\tA new _TestUtil.nextLong uses Random.nextInt(int) when the range does not exceed Integer.MAX_VALUE and scales Double.nextDouble into the expected range of values otherwise using BigDecimal arithmetic.\n\n\n\nI also updated a few tests to use this new method (especially a call to Math.abs(random.nextLong()) in TestIndexInput, which is buggy since random.nextLong() might return Long.MIN_VALUE whose absolute value cannot be represented by a long). ",
            "author": "Adrien Grand",
            "id": "comment-13395891"
        },
        {
            "date": "2012-06-18T16:10:48+0000",
            "content": "This looks good to me, although I'm wondering how much randomness do we really need \u2013 those BigIntegers are worrying. I think this can be improved later if somebody wishes to dive into it.\n\nBtw. an interesting random number generator \u2013 \nhttp://home.southernct.edu/~pasqualonia1/ca/report.html ",
            "author": "Dawid Weiss",
            "id": "comment-13395992"
        },
        {
            "date": "2012-06-19T14:29:38+0000",
            "content": "Committed (r1351718 on trunk and r1351728 on branch 4.x). Thanks Robert and Dawid! ",
            "author": "Adrien Grand",
            "id": "comment-13396805"
        }
    ]
}