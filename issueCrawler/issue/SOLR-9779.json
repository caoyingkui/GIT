{
    "id": "SOLR-9779",
    "title": "Streaming Expressions should have better support for basic auth",
    "details": {
        "components": [
            "clients - java",
            "security"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I'm creating a StreamFactory object like the following code:\n\n\nnew StreamFactory().withDefaultZkHost(solrConfig.getConnectString())\n                .withFunctionName(\"gatherNodes\", GatherNodesStream.class);\n\n\n\nHowever once I create the StreamFactory there is no way provided to set the CloudSolrClient object which can be used to set Basic Auth headers.\n\nIn StreamContext object there is a way to set the SolrClientCache object which keep reference to all the CloudSolrClient where I can set a reference to HttpClient which sets the Basic Auth header. However the problem is, inside the SolrClientCache there is no way to set your own version of CloudSolrClient with BasicAuth enabled. \n\nI think we should expose method in StreamContext where I can specify basic-auth enabled CloudSolrClient to use.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-11-16T21:41:20+0000",
            "author": "Kevin Risden",
            "content": "Would be nice to get this into Solr 6.4 but we will have to see. I'll see if I can work on it a bit. ",
            "id": "comment-15671728"
        },
        {
            "date": "2016-11-17T00:22:58+0000",
            "author": "Kevin Risden",
            "content": "Sandeep Mukherjee - I was looking into this and was curious if this approach could work for you:\n\nhttps://gist.github.com/risdenk/e39bd75321f5b6d0c338febac8b67bd4\n\nThis is an example of a BasicAuthSolrClientCache. You could use it like so:\n\nStreamFactory factory = new StreamFactory().withDefaultZkHost(solrConfig.getConnectString());\nStreamExpression expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n\nCloudSolrStream stream = new CloudSolrStream(expression, factory);\nStreamContext streamContext = new StreamContext();\nstreamContext.setSolrClientCache(new BasicAuthSolrClientCache(\"solr\", \"SolrRocks\"));\nstream.setStreamContext(streamContext);\n\n// Open and read stream...\n\n ",
            "id": "comment-15672191"
        },
        {
            "date": "2016-11-28T23:31:02+0000",
            "author": "Sandeep Mukherjee",
            "content": "Thanks for that Kevin. I'm going to try it out. ",
            "id": "comment-15703504"
        },
        {
            "date": "2016-11-28T23:48:34+0000",
            "author": "Sandeep Mukherjee",
            "content": "That works! Thanks a bunch.  ",
            "id": "comment-15703595"
        },
        {
            "date": "2016-11-28T23:50:17+0000",
            "author": "Kevin Risden",
            "content": "Thanks Sandeep Mukherjee for checking! There should be a better way to handle this than the custom solrclientcache. I'll leave this open for that. ",
            "id": "comment-15703603"
        },
        {
            "date": "2016-12-01T18:02:38+0000",
            "author": "Sandeep Mukherjee",
            "content": "I completely agree that this functionality could be exposed from solrj client. In fact I was thinking of overriding the SolrClientCache class (which you suggested in your post) but that seemed like a workaround to me. ",
            "id": "comment-15712614"
        },
        {
            "date": "2017-03-13T16:46:54+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Moving to 6.5, since 6.4 has already been released. ",
            "id": "comment-15907814"
        }
    ]
}