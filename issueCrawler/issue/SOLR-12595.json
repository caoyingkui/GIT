{
    "id": "SOLR-12595",
    "title": "CloudSolrClient.Builder should accept a zkHost connection string",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "7.4",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "SOLR-11629 improved CloudSolrClient.Builder workflow by adding two new constructors:\n\n1.   public Builder(List<String> solrUrls) {\n2.   public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n\n\nIt is not unusual to format ZooKeeper connection details as a single string (e.g. zk1:2181,zk2:2181/some_chroot). However, these new constructors make it difficult to use such connection strings.\n\nIt would be fairly simple to add a third constructor which would accept a connection string:\n\n3.   public Builder(String zkHost) {\n\n\nCloudSolrClient.Builder uses ZooKeeper details to construct a ZkClientClusterStateProvider, which already supports ZK connection strings.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-07-26T12:47:01+0000",
            "content": "There's a workaround, but you need to call at least one @Deprecated method: you could construct ZkClientClusterStateProvider yourself and pass it using withClusterStateProvider() method.\n\nI'm volunteering to implement this new constructor. ",
            "author": "Vilius Pranckaitis",
            "id": "comment-16558264"
        },
        {
            "date": "2018-08-01T01:27:49+0000",
            "content": "The CloudSolrClient.Builder constructors have drawn some ire over a few different JIRAs, as you pointed out above Vilius.  It's been a hard thing to come to a consensus on that makes everyone happy.  The principles at play (\"easy-of-use\", \"readability\", etc.) are somewhat subjective at the end of the day.\n\nSo take my comments below with a grain of salt, as they're ultimately subjective.\n\nI'm not against adding this constructor entirely, but I do think it goes against the grain of some things that we've done recently or are planning to do in SolrJ.  Examples:\n1. The initial move to Builders for creating SolrClient objects was motivated by a desire to keep the number of constructors down.\n2. Other methods that have been overloaded to handle different input formats seem to have drawn attention (negatively) and look to be going away soon. (See SOLR-12502).\n\nAs I hinted above, I think the addition of this ctor is relatively innocent.  Id be happy to move it forward if no one objects.  But since there's been so many concerns/tweaks/iterations/complaints of these methods in the last few releases, I'd rather not contribute to the churn without giving a few more eyeballs a chance to take a look (or at least waiting a bit longer). ",
            "author": "Jason Gerlowski",
            "id": "comment-16564597"
        },
        {
            "date": "2018-08-01T09:39:43+0000",
            "content": "When you use other tools:\n\n\tYou can construct a Zookeeper client with a ZK connection string;\n\tYou can initialize a Curator framework with a ZK connection string;\n\tYou can launch Solr using a ZK connection string.\n\tAnd so on...\n\n\n\nBut when it comes to initialization of CloudSolrClient using a ZK connection string, the options are:\n\n\tTo write some code to split ZK connection string into pieces and call the existing constructor;\n\tTo use deprecated withClusterStateProvider();\n\tTo extend the CloudSolrClient.Builder.\n\n\n\nIn my opinion, the current constructors for CloudSolrClient.Builder goes against the principle of least astonishment. When I received a PR which had a comment about CloudSolrClient not supporting ZK connection strings, I couldn't believe and had to double-check with the Javadocs.\n\nI'm not sure which version of the constructor\u2013a connection string one or the list of hosts one\u2013would be more confusing for someone who is not familiar with ZK. But for me, who had some experience with ZK \u2013 definitely the latter one.\n\n------\n\nI had taken a look at the recent changes of CloudSolrClient.Builder and I think I see where things are going. Moving some of the parameters to constructors will prevent some of the runtime errors, and should also allow to remove some of that state provider construction code, which is also duplicated in CloudSolrClient (though probably not before some of the deprecated methods will be removed). I could help with this, too. ",
            "author": "Vilius Pranckaitis",
            "id": "comment-16565050"
        }
    ]
}