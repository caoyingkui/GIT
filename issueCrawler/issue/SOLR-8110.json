{
    "id": "SOLR-8110",
    "title": "Start enforcing field naming recomendations in next X.0 release?",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "For a very long time now, Solr has made the following \"recommendation\" regarding field naming conventions...\n\nfield names should consist of alphanumeric or underscore characters only and not start with a digit.  This is not currently strictly enforced, but other field names will not have first class support from all components and back compatibility is not guaranteed.  ...\n\nI'm opening this issue to track discussion about if/how we should start enforcing this as a rule instead (instead of just a \"recommendation\") in our next/future X.0 (ie: major) release.\n\nThe goals of doing so being:\n\n\tsimplify some existing code/apis that currently use hueristics to deal with lists of field and produce strange errors when the huerstic fails (example: ReturnFields.add)\n\treduce confusion/pain for new users who might start out unaware of the recommended conventions and then only later encountering a situation where their field names are not supported by some feature and get frustrated because they have to change their schema, reindex, update index/query client expectations, etc...",
    "attachments": {
        "SOLR-8110.patch": "https://issues.apache.org/jira/secure/attachment/12789355/SOLR-8110.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-30T22:28:09+0000",
            "author": "Hoss Man",
            "content": "As far as the \"how\" to implement this, i think it would be pretty straight forward...\n\n\n\tupdate the schema parsing and schema API code to enforce the naming convention on \"new\" SchemaField instances\n\t\n\t\tuse the same rules on prefix based dynamicFields\n\t\n\t\n\tupdate DocumentBuilder to enforce these rules when iterating over the SolrInputFields to build up the underlying \"Document\" object passed to the IndexWriter\n\t\n\t\tthis will help catch any problematic fields that might satisfy a suffice based dynamicField\n\t\n\t\n\tmake all of this logic conditional on either the schema \"version\" or the \"luceneMatchVersion\" and backport to the stable branch as well so it's optional prior to the next X.0 release\n\t\n\t\ti'd lean towards making it depend on luceneMatchVersion is the better course of action since that concept is designed around the idea that support for \"older\" values is automatically dropped in future versions, where as the \"schema version\" attribute has (so far) only ever been used to change the default behavior of various schema features - enforce anything.\n\t\n\t\n\n\n\n ",
            "id": "comment-14938973"
        },
        {
            "date": "2015-10-01T08:39:36+0000",
            "author": "Alan Woodward",
            "content": "+1\n\nWe should log a warning for each dodgy fieldname in 'lenient' mode, so that users are aware that they're running the risk of some functionality not working. ",
            "id": "comment-14939513"
        },
        {
            "date": "2016-02-04T15:40:29+0000",
            "author": "Shawn Heisey",
            "content": "I think we should enforce restrictions on all identifiers, not just field names.  Problems can also happen with odd collection names, core names, and possibly even other identifiers. ",
            "id": "comment-15132455"
        },
        {
            "date": "2016-02-16T14:46:25+0000",
            "author": "Jason Gerlowski",
            "content": "Anyone object to my starting on this?  Thinking of putting together a patch, as I'd like to see this happen.  Just want to make sure there's not any huge objections before I start in. ",
            "id": "comment-15148692"
        },
        {
            "date": "2016-02-16T17:09:37+0000",
            "author": "Gus Heck",
            "content": "Disallowing the '.' character in field names will be difficult for one project I work on. They are indexing fields of subordinate objects from an outside system using '.' to separate and distinguish the fields that have been denormalized onto the parent. This decision dates back over 3 years since before I started working with them, and much has been built on this. The field names from the system being indexed already contain '' Yes one could use double '''' except that double underscores actually occurs in the source data too, so it would be on to  triple '_' ... which gets hard to tell apart from '_' and of course multi-character separators are more work for parsing. I'd like to suggest that at least one more non-alphanum character be allowed, (of course '.' is my preference).  Having only one non-alphanumeric character available would be painful.  ",
            "id": "comment-15148921"
        },
        {
            "date": "2016-02-16T17:32:32+0000",
            "author": "Jason Gerlowski",
            "content": "Personally, I'd be fine with allowing field names to contain periods.  There's been some recent work to change the COLLECTION APIs to enforce the identifier \"recommendations\" (see SOLR-8642, SOLR-8308, SOLR-8677).  This recent work allows periods in identifiers, because of the existing use-case of the \".system\" collection.\n\nAllowing periods here would keep all identifier recommendation/enforcement consistent, which would be nice.\n\nWhether any off-the-beaten-path features break when field names contain periods though, I couldn't really speak to.  But something to look into at least. ",
            "id": "comment-15148954"
        },
        {
            "date": "2016-02-17T00:48:47+0000",
            "author": "Shawn Heisey",
            "content": "With the caveat that I haven't actually tried it and haven't looked at code, I can't immediately think of any reason periods would cause any problems, at least not with the top three query parsers \u2013 lucene, dismax, and edismax. ",
            "id": "comment-15149605"
        },
        {
            "date": "2016-02-17T20:38:07+0000",
            "author": "Jack Krupansky",
            "content": "It would be nice to say that a \"Solr identifier\" had the same rules as a Java identifier, but Java allows dollar signs and excludes keywords and reserved terms like if, for, true, false, null. Hmmm... I don't know if many people would complain is Solr didn't allow those keywords as field names.\n\nThe main three exceptions to the current soft-rule that I have run across are:\n\n1. Dot for compound names.\n2. Hyphen feels a little more natural than underscore unless you're truly thinking about Java code and imagining that you could write a minus sign for a subtraction operation.\n3. An ISO date/time value for dynamic fields which want to be time stamped. An optional text keyword prefix and hyphen are common for these timestamped columns as well.\n4. Spaces, but I think sensible people can accept those as not permitted in names.\n\nThe main difficulty I am aware of in Solr is parsing of function queries, including (or especially) in the field list of the fl parameter. ",
            "id": "comment-15151121"
        },
        {
            "date": "2016-02-21T22:11:42+0000",
            "author": "Jason Gerlowski",
            "content": "1.) Sounds like (aside from a few comments about the particular characters that the enforcement allows/denies) that no one's got a problem with the idea of enforcement on principle.  So I'll start in on the changes Hoss suggested in his initial comment.\n\n2.) As for the characters allowed/denied by enforcement.  I lean towards re-using the character set already enforced for collection/shard/core creation: [a-zA-Z0-9_.].  I really think keeping consistency among the identifier rules is important, as people only need to learn one set of rules.  We could lean on a set of identifier rules that people already know (i.e. Java identifiers), but I'd argue that (1) the special characters allowed by the current recommendations (, .) are more generally useful than those allowed by Java identifiers (, $), and (2) Java identifiers have a few edge cases that'd be a pain to deal with (reserved keywords, can't start with $, can't start with number, etc.).  Admittedly, these are rare cases, and I doubt they would be hit frequently, but it does seem like unnecessary complications to me.\n\nBut that's just my opinion.  Is there some value I'm missing to using the same identifier pattern as Java?  Very possible I'm just overlooking something.\n\nIn the meantime, I'll aim to use the current \"recommendations\", but I'll structure the patch in such a way that it'll be easier to change the allowed-char-set with a line or two.  That way this discussion doesn't have to block my work on this.\n\nThanks everyone for the input so far. ",
            "id": "comment-15156250"
        },
        {
            "date": "2016-02-21T22:27:33+0000",
            "author": "Jack Krupansky",
            "content": "There is the issue of simple ASCII letters vs. Unicode letters. Java Identifiers support arbitrary Unicode letters which \"allows programmers to use identifiers in their programs that are written in their native languages.\" See Character.isJavaIdentifierStart and isJavaIdentifierPart. ",
            "id": "comment-15156259"
        },
        {
            "date": "2016-02-22T18:53:13+0000",
            "author": "Anshum Gupta",
            "content": "I am sure there would be reasons for people to use field names that are outliers but we shouldn't really make our rule book for that. It would be good to\n\n\tstart with a rather restricted set, that is universal across Solr in terms of identifier restrictions\n\trelax them if there are valid use cases that require us to support more in future releases.\n\tmake sure we maintain back-compat\n\n\n\nIt's easier to have restrictions to begin with and people could write client code that maps field names rather than work around in Solr for handling outliers. ",
            "id": "comment-15157475"
        },
        {
            "date": "2016-02-23T09:19:19+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Yep, we don't need to support all kind of strange unicode chars. But UNDERSCORE, DASH and DOT should be supported, i.e.  [A-Za-z0-9_\\.-], allowing a very large percentage of existing Solr applications to continue working without modifications. ",
            "id": "comment-15158606"
        },
        {
            "date": "2016-02-23T16:15:39+0000",
            "author": "Jack Krupansky",
            "content": "1. Since the concept of enforcement of naming conventions is new, I would suggest making it optional in 6.x, preferably out-out - most people can probably live with it without problem. Whether it would just be a schema version trigger or a separate config/schema option can be debated.\n\n2. Consider the concept of delimited identifiers as in SQL - enclose non-regular names in quotes. It is worth noting that highly-irregular names are not currently supported in queries even today (most special characters will terminate the field name in most query parsers.) ",
            "id": "comment-15159113"
        },
        {
            "date": "2016-02-23T16:23:29+0000",
            "author": "Anshum Gupta",
            "content": "But UNDERSCORE, DASH and DOT should be supported, i.e. [A-Za-z0-9_\\.-]\nSure, let's also change the collection/shard/alias/core name restrictions to this in that case for the sake of consistency.\n\nSince the concept of enforcement of naming conventions is new, I would suggest making it optional in 6.x\nThat's the thing, it has been optional forever. Optional = not enforced. I wanted this to be how Hoss suggested\n\nmake all of this logic conditional on either the schema \"version\" or the \"luceneMatchVersion\" and backport to the stable branch as well so it's optional prior to the next X.0 release\n\nbut considering we may not have another 5x release, we should stop this with 6.0. ",
            "id": "comment-15159127"
        },
        {
            "date": "2016-02-23T16:36:14+0000",
            "author": "Shawn Heisey",
            "content": "Since the concept of enforcement of naming conventions is new, I would suggest making it optional in 6.x, preferably out-out\n\nI'm in favor of more aggressive measures, particularly if we can get it complete before the 6.0 release ... but I won't argue against a less invasive plan.\n\nHere's a more complete idea for a less invasive approach:\n\n\n\tIn 6.0 (or 6.1, etc):\n\t\n\t\tDefault behavior: Check all identifiers on startup or when an API call is made that adds a new identifier.  If something fails validation, log/return a warning, but don't fail.\n\t\tProvide an enforcement option in solrconfig.xml to fail core startup and API calls when the restrictions are violated.  I'm not sure whether that should be a single option for everything, or separate options for field names, core/collection names, etc.\n\t\n\t\n\tIn 7.0, or perhaps a later 6.x release, turn enforcement on by default.  One question can be decided at that later date:  Do we keep the option to turn off enforcement?  I would prefer to not have that option once enforcement is default, but users will likely want it.\n\n ",
            "id": "comment-15159139"
        },
        {
            "date": "2016-02-23T16:47:17+0000",
            "author": "Shawn Heisey",
            "content": "Assuming what I outlined above is the actual approach used: Although the default value for the enforcement option would be false, I think it should be enabled in all 6.x example configs. ",
            "id": "comment-15159160"
        },
        {
            "date": "2016-02-23T17:05:52+0000",
            "author": "Anshum Gupta",
            "content": "I personally would prefer the more invasive approach here.\n\nProvide an enforcement option in solrconfig.xml to fail core startup\nThough that sounds reasonable, I strongly feel it'll come back to bite the users when they are unable to use certain features they want to use and the only way out at times would be re-indexing plus changing the client code.\n\nI would prefer to not have that option once enforcement is default, but users will likely want it.\nIf we give it to them, they would want it. I really think that enforcing restrictions on identifiers isn't a game changer for the end users. Specially considering the fact that we're supporting most use cases in the set of allow chars.\n\nIn all here are the questions it boils down to:\n\n\tWhat is the set of allowed chars, and the rules ? - I think we are fine with alphanumeric, dash, dot, and periods for this.\n\tEnforcement details\n\n\n\tIs this mandatory\n\tDo we enable it by default. If not, how can users enable it. If yes, how do they disable it.\nI suggest we use luceneMatchVersion for this. It might restrict users from using more new features just to disable naming restrictions but that's a call we'd have to make.\n\n\n\nHoss Man suggestions? ",
            "id": "comment-15159191"
        },
        {
            "date": "2016-02-23T19:06:03+0000",
            "author": "Shawn Heisey",
            "content": "The core characters we need are letters, numbers, and the underscore. Consensus seems to be that we allow dots (periods).  If dashes (hyphens) are allowed, then they cannot be the first character, or that will cause confusion with negated query clauses and possibly cause other problems.\n\nUnderscores must be allowed as the first character, so _version_ and other special fields used internally will work.  My personal opinion is that the first character must be a letter or an underscore, so we don't have to worry about fixing bugs related to identifiers that start with a number.\n\nOne unanswered question is whether to only allow ASCII, or if \"letters and numbers\" should include all matching characters in Unicode.  My bias, which I admit is completely provincial and might be far too restrictive, is ASCII.\n\nA dedicated config option might be better than luceneMatchVersion, but I'm OK either way.  There are users who must use an old version number even with newer versions of Solr.  Changes to WordDelimiterFilter in 4.8 have a number of people using 4.7 in luceneMatchVersion. ",
            "id": "comment-15159441"
        },
        {
            "date": "2016-02-23T23:54:44+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "A dedicated config option might be better than luceneMatchVersion, but I'm OK either way.\nBoth. We introduce a -Dsolr.enforceStrictIdentifiers and let luceneMatchVersion decide the default value if not explicitly set. ",
            "id": "comment-15159900"
        },
        {
            "date": "2016-02-24T01:39:15+0000",
            "author": "Jason Gerlowski",
            "content": "Not ready for review yet.  Just putting it up here as backup (or in case I'm going down a path that's completely wrong).  A few notes:\n\n\n\tadded verification checks in IndexSchema and DocumentBuilder.  These depend on the luceneMatchVersion being >= 6.0.  Easy to change if we want this to be configured differently.\n\tno tests yet.  Plan on adding them shortly.\n\n\n\nHope to resume work on this tomorrow. ",
            "id": "comment-15160031"
        },
        {
            "date": "2016-02-25T00:18:12+0000",
            "author": "Jason Gerlowski",
            "content": "Noticed something a little odd (to me) while doing some manual tests on the patch I pushed up last night....\n\nWith the added checks in the patch, core creation will fail if the core-create request references a configset containing an invalid field declaration.  Solr returns BAD_REQUEST (400), and a message containing: Unable to create core [gettingstarted_shard1_replica2] Caused by: Dynamic field name '*_i$#' is invalid.  Dynamic field names can only containalphanumerics, underscores, periods, and prefix/suffix asterisks.  All looks good.\n\n\nWhen I test this out by creating a collection though, the result is more mixed.  Solr returns an OK (200) status code.  The message body though, contains a similar error message to the one above:\n\n\n[~/c/s/l/solr] $ curl -i -l -k -X GET \"http://localhost:8983/solr/admin/collections?action=CREATE&name=asdf&collection.configName=gettingstarted&numShards=1\"\nHTTP/1.1 200 OK\n...\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">2841</int></lst><lst name=\"failure\"><str name=\"127.0.1.1:7574_solr\">org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException:Error from server at http://127.0.1.1:7574/solr: Error CREATEing SolrCore 'asdf_shard1_replica1': Unable to create core [asdf_shard1_replica1] Caused by: Dynamic field name '*_i$#' is invalid.  Dynamic field names can only containalphanumerics, underscores, periods, and prefix/suffix asterisks.</str></lst>\n</response>\n\n\n\nCluster-status and core-status requests confirm that the cores failed to initialize correctly, and were never fully created.\n\nMy interpretation of this is that the collection-create commands fires off the core-create requests, but doesn't correctly interpret their success/failure.  Is this expected/correct behavior, or is this a bug in the Collections API?  Seems like a bug to me, but I'm not super familiar with the expected behavior of the Collections API, so just thought I'd mention it here before creating a JIRA out of it. ",
            "id": "comment-15166397"
        },
        {
            "date": "2016-02-25T02:08:19+0000",
            "author": "Jason Gerlowski",
            "content": "Slightly updated patch.  Few notes\n\n\n\tstill no tests.  Wouldn't be hard to add tests for core-creation.  As I mentioned above, adding a test for collection-creation might be tough due to some quirky/buggy behavior I noticed.\n\tstill haven't touched Schema API.  That's my goal for tomorrow.\n\tright now uses LuceneMatchVersion to determine whether enforcement is done.  Can change that later on if that's the consensus.\n\n ",
            "id": "comment-15166571"
        },
        {
            "date": "2016-02-26T18:01:48+0000",
            "author": "Yonik Seeley",
            "content": "Allowing '.' in fieldnames also acts to preclude the use of '.' as a field name separator in future features (like better support for nested documents, joins, SQL, etc).\nThe same reasons why '.' may be useful to an application are the same reasons why '.' may be useful to Solr.\n\nSo if we end up allowing '.', I guess I'd retain the caveat that one \"may not have first class support from all components\".  ",
            "id": "comment-15169435"
        },
        {
            "date": "2016-02-26T21:14:06+0000",
            "author": "Jack Krupansky",
            "content": "Dot is a tough case. I can see reserving it for future expansion, but I can also see its utility in field names where its value is based on using it as a pseudo-field delimiter, such as in cases where data may in fact have come from an SQL ETL operation that actually did use the dot as a compound field name.\n\nHow about... saying that dot is pseudo-reserved for compound field name references, and if the decomposed field name has a well-defined meaning in some context, such as where there are contextual named structural entities, such as table or collection names, then so be it, but if it has no clear meaning in a context, then the full, dotted name will be treated as a raw field name? So, at the level of the fl parameter a dotted name would get parsed as a compound name and then treated as a simple field name. ",
            "id": "comment-15169830"
        },
        {
            "date": "2016-02-26T23:37:05+0000",
            "author": "Yonik Seeley",
            "content": "Dash is also problematic for unequivocal full support.  For infix arithmetic expressions, it's natural to expect \"a - 1\" to be equivalent to \"a-1\". ",
            "id": "comment-15170111"
        },
        {
            "date": "2016-02-27T00:02:09+0000",
            "author": "Jack Krupansky",
            "content": "I've accepted the fact that Solr will probably never need to support full infix expressions. If somebody wants to seriously propose full infix expressions, fine, but it seems too much to me to worry much about vague possibilities.\n\nNote that I am still a proponent of having quoted/escaped names which allow anything in names, ala SQL. ",
            "id": "comment-15170155"
        },
        {
            "date": "2016-02-27T00:17:32+0000",
            "author": "Yonik Seeley",
            "content": "I've accepted the fact that Solr will probably never need to support full infix expressions.\n\nWe may already have that via lucene expressions?  or the new SQL support?  Any future integration with scripting languages may also hit the issue.\n\nNote that I am still a proponent of having quoted/escaped names which allow anything in names, ala SQL.\n\nI think I agree, but that doesn't seem compatible with this JIRA (which is about enforcing a specific restricted set).\nIf we expand the set to include what people may have used in the past (dashes, dots, etc), that sort of takes us full circle back to the state of things today? ",
            "id": "comment-15170182"
        },
        {
            "date": "2016-02-27T01:47:19+0000",
            "author": "Shawn Heisey",
            "content": "Right now, the first attempts at validation (SOLR-8642) have resulted in SOLR-8725.  I believe that the restrictions in SOLR-8642 are the only ones that will be safe for advanced and possible future features (like infix expressions and separators that have meaning to Solr) that Yonik mentioned.\n\nI've stared at my keyboard for several minutes trying to see whether there are any other good choices for a meaningful separator character other than the period, and all of the possibilities are either used for something else, or they're really arcane and likely to cause the kind of problems we're aiming to prevent with this issue.  For that reason, I think that periods should be banned for right now, and then only allowed in a limited fashion as necessary to support that future separator idea, if it ever becomes a reality.\n\nFor my purposes, I'm perfectly OK with breaking backward compatibility in 6.0 and enforcing SOLR-8642 across the board.  I will need to change my own core names (which currently use hyphens), but I'm OK with that.  Recognizing the pain this could cause, I can get behind an approach where violations cause a warning in 6.0, and default to enforcement later.\n\nParsing code tends to be extremely complex and fragile in the best conditions.  When a character that has special meaning in some contexts is allowed in identifiers, that code is even more fragile.  I would rather be more restrictive on this issue than risk parser bugs. ",
            "id": "comment-15170264"
        },
        {
            "date": "2016-02-27T16:13:34+0000",
            "author": "Jason Gerlowski",
            "content": "If we expand the set to include what people may have used in the past (dashes, dots, etc), that sort of takes us full circle back to the state of things today\n\nThat's not quite true. Even if we allow all the characters that've been brought up by this JIRA (dashes, dots, underscores), this JIRA would still treat many others as invalid: slashes, spaces, unicode characters, most of the number-row of your keyboard (!@#$%^&()+), etc.\n\nI doubt there's a ton of people using dollar-signs in their field names, but anyone who does will probably see some quirky behavior.  And if we can warn them (or stop them) up front about that, even for rarely used characters, that might still be valuable. ",
            "id": "comment-15170637"
        },
        {
            "date": "2016-02-27T18:34:30+0000",
            "author": "Shawn Heisey",
            "content": "I doubt there's a ton of people using dollar-signs in their field names\n\nSomebody came into the IRC channel once, using a Solr plugin for some PHP software which I can no longer remember, and when they shared the schema that came with the plugin, almost every field had at least two dollar signs in the name.  I've seen all kinds of weird characters in field names.  Sometimes they work, sometimes they don't. ",
            "id": "comment-15170689"
        },
        {
            "date": "2016-02-27T18:50:58+0000",
            "author": "Jack Krupansky",
            "content": "Dollar sign is permitted in Java identifier, including at the start. As per the Java Spec, \"The \"Java letters\" include uppercase and lowercase ASCII Latin letters A-Z (\\u0041-\\u005a), and a-z (\\u0061-\\u007a), and, for historical reasons, the ASCII underscore (_, or \\u005f) and dollar sign ($, or \\u0024).\" It goes on to say that \"The $ character should be used only in mechanically generated source code or, rarely, to access pre-existing names on legacy systems.\"\n\nSee:\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.8\n\nIf anything, I had been assuming that we were proposing a superset of Java identifiers (hyphen, dot as part of name.)\n\nI'm not positive whether there might be any conflict with parameter substitution for dollar sign. ",
            "id": "comment-15170698"
        },
        {
            "date": "2016-02-27T19:05:06+0000",
            "author": "Jack Krupansky",
            "content": "I can't recall any explicit statement on case sensitivity, although I would imagine that the existing \"anything goes\" model would default to case-sensitive. Personally, I would prefer case-insensitive. I can't recall a schema in which case-sensitive field names were used, while case mistakes are not uncommon. ",
            "id": "comment-15170700"
        },
        {
            "date": "2016-02-27T20:26:31+0000",
            "author": "Gus Heck",
            "content": "So perhaps a quoting Identifiers JIRA ticket that this is blocked by? ",
            "id": "comment-15170713"
        },
        {
            "date": "2016-02-27T22:40:02+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I buy Yonik's arguments for reserving both dot and dash for future cool stuff. When I argued for allowing these earlier it was as a compromise between chaos (today) and pain (every Solr application needing a rewrite).\n\nPerhaps we could define three modes for users to choose between, with pros/cons documented: \n\"safe\" - [a-zA-Z0-9_] only, guaranteed future proof, full SQL, script support\n\"moderate\" - safe + dash, dot, dollar and perhaps national unicode letters\n\"legacy\" - no restrictions - only for easy back compat - will go away in 7.0\n\nIn 6.0, \"moderate\" would be the default, use of non-safe chars will be logged, and users can revert to \"legacy\" if they wish, but will be aware of what functionality they then sacrifice. In 7.0, \"safe\" could be made the default, and allow people to revert to \"moderate\" but take away \"legacy\". This will allow certain features to \"bail out\" with exception if in a mode that is known to cause problems. ",
            "id": "comment-15170746"
        },
        {
            "date": "2016-02-28T16:26:51+0000",
            "author": "Jack Krupansky",
            "content": "lucene expressions\n\nI was going to say that Luceene Expressions are basically JavaScript, but... they are sort-of based on JS, but really more of a conceptual rather than literal basis. Here's Lucene's grammar rule for VARIABLE:\n\n\nVARIABLE: ID ARRAY* ( [.] ID ARRAY* )*;\nfragment ARRAY: [[] ( STRING | INTEGER ) [\\]];\nfragment ID: [_$a-zA-Z] [_$a-zA-Z0-9]*;\nfragment STRING\n    : ['] ( '\\\\\\'' | '\\\\\\\\' | ~[\\\\'] )*? [']\n    | [\"] ( '\\\\\"' | '\\\\\\\\' | ~[\\\\\"] )*? [\"]\n    ;\n\n\n\nSee:\nhttps://github.com/apache/lucene-solr/blob/master/lucene/expressions/src/java/org/apache/lucene/expressions/js/Javascript.g4\n\nNo Unicode support, no random special characters, just $ and _, but apparently dot as well.\n\nAn ID is:\n\n\nID: [_$a-zA-Z] [_$a-zA-Z0-9]*\n\n\n\nAnd any number of IDs can be written with dots between them to represent a single VARIABLE token.\n\nJavaScript identifiers are defined in the ECMAScript spec:\nhttps://tc39.github.io/ecma262/#prod-IdentifierName\n\nLetters in Java/ECMAScript are Unicode as defined by the Unicode property \u201cID_Start\u201d and \"ID_Continue\". Java/ECMAScript supports $ and _ in addition to letters.\n\nIdentifier start and continue character types are defined by the Unicode UAX#31  Identifier spec:\nhttp://unicode.org/reports/tr31/ ",
            "id": "comment-15171092"
        },
        {
            "date": "2016-02-28T16:41:45+0000",
            "author": "Jack Krupansky",
            "content": "\"safe\"... \"moderate\"... \"legacy\"\n\nMy only real nit is that it would be a shame if we couldn't say simply that people will be safe if they stick to Java identifier rules. That would mean $ and full Unicode.\n\nMy point is that it makes learning Solr more intuitive since Java is more of a commonly-known entity - \"Solr field names are Java identifiers\", rather than encumber people with yet another set of rules to learn.\n\nNote that the current Solr code mostly uses isJavaIdentifierStart/isJavaIdentifierPart today, but disallowing $, probably due to parameter substitution. IOW, Unicode is there today.\n\nSee:\nhttps://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/search/StrParser.java\nhttps://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/search/SolrReturnFields.java ",
            "id": "comment-15171096"
        },
        {
            "date": "2016-03-28T15:29:45+0000",
            "author": "Yago Riveiro",
            "content": "This enforcing shouldn't happen without an API to rename collections ... and don't not forget that there are people with indexes with terabytes of data that can't do a full re-index ",
            "id": "comment-15214325"
        },
        {
            "date": "2016-03-28T22:02:40+0000",
            "author": "Jason Gerlowski",
            "content": "Maybe I'm missing something, but how would a collection-rename API help with enforcing-field-recommendations? ",
            "id": "comment-15214974"
        },
        {
            "date": "2016-03-28T22:11:30+0000",
            "author": "Yago Riveiro",
            "content": "My bad. The issue was pointed in the IRC as the  actual place of discussion about name enforcing \n\nThis issue is about the schema fields and not the one that enforce collection name. ",
            "id": "comment-15214992"
        },
        {
            "date": "2016-03-29T08:28:38+0000",
            "author": "Henrik",
            "content": "Upon upgrading from 5.4.0 to 5.5.0 I got this:\n\n\nproject-lms_shard5_replica2: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Invalid name: 'project-lms_shard5_replica2' Identifiers must consist entirely of periods, underscores and alphanumerics\n\n\nIs it possible to enable support for dashes with a JVM arg (or something else)?  Or is there a simple way of renaming a whole lot of solrcloud instances?  We have about 20 collections across 30 servers that are affected by this. ",
            "id": "comment-15215678"
        },
        {
            "date": "2016-03-29T17:59:13+0000",
            "author": "Shawn Heisey",
            "content": "Is it possible to enable support for dashes with a JVM arg (or something else)?\n\nNo.  Only the patch for SOLR-8725 can make it work.  I'm going to look into patching the 5.5 branch so it will be in 5.5.1 if that version is ever released. ",
            "id": "comment-15216499"
        },
        {
            "date": "2016-04-04T13:21:46+0000",
            "author": "Henrik",
            "content": "Thanks! I'll have to wait some more before upgrading, though, because I just stumbled onto SOLR-8940 . ",
            "id": "comment-15224104"
        },
        {
            "date": "2017-01-02T18:03:09+0000",
            "author": "Erick Erickson",
            "content": "Chris Hostetter (Unused) Hoss: WDYT about putting this in trunk? ",
            "id": "comment-15793258"
        },
        {
            "date": "2017-04-06T08:51:46+0000",
            "author": "Jens Foshaug",
            "content": "Any new status on this issue? My hope is to be able to have a naming convention like \n\nxxx$fieldname\nxxx$fieldname.id\nxxx$fieldname.label\n\nor dynamic fields like : \n\n*.id\n*.label\n ",
            "id": "comment-15958581"
        },
        {
            "date": "2017-04-06T15:11:37+0000",
            "author": "Shawn Heisey",
            "content": "Jens Foshaug,\n\nDon't put dollar signs (or any other character that tends to have special meaning) in field names.  The reason that we plan to enforce a limited character set (which would definitely exclude the dollar sign) is that we cannot guarantee that all future functionality will continue to support those characters in field names, even if current functionality does.\n\nGeneral consensus is that the period should be allowed in field names, so your dynamic fields will likely be acceptable. ",
            "id": "comment-15959067"
        }
    ]
}