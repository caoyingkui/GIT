{
    "id": "SOLR-358",
    "title": "Implement solr-ruby-specific response capability",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - ruby - flare"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Implement solr-ruby-specific Ruby output, such that dates get created as real DateTime objects (wrap with DateTime.parse(...) is one option), and so that named lists maintain name and order access cleanly.   This could be a formating option for wt=ruby, or a new writer type - suggestions welcome.   This would make the richest way to access Solr from Ruby, with the standard Hash access unaffected and suitable for cases where using an additional library isn't desired.",
    "attachments": {
        "SOLR-358.patch": "https://issues.apache.org/jira/secure/attachment/12538250/SOLR-358.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-13421453",
            "date": "2012-07-24T14:44:01+0000",
            "content": "Even though solr-ruby has been retired, this issue may still be desired and relevant in order to have richer more accurate types returned in the ruby format. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13424387",
            "date": "2012-07-28T17:32:45+0000",
            "content": "Patch that adds DateTime.parse around date strings when ruby.richer_types=true.\n\nThis requires that one have the date module loaded (require 'date') to eval the response, but then provides dates as true DateTime objects in Ruby. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13424393",
            "date": "2012-07-28T17:54:48+0000",
            "content": "This was a nice thought experiment, but at this point solr-ruby is mothballed and I'm not particularly interested in pushing richer types into RSolr.  It's a shame that JSON, Ruby, etc are String-typed dates, but not worth the effort to battle it at this point. "
        }
    ]
}