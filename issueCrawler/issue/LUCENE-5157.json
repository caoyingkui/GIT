{
    "id": "LUCENE-5157",
    "title": "Refactoring MultiDocValues.OrdinalMap to clarify API and internal structure.",
    "details": {
        "components": [],
        "fix_versions": [
            "4.6"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "I refactored MultiDocValues.OrdinalMap, removing one unused parameter and renaming some methods to more clearly communicate what they do. Also I renamed subIndex references to segmentIndex.",
    "attachments": {
        "LUCENE-5157.patch": "https://issues.apache.org/jira/secure/attachment/12596083/LUCENE-5157.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-05T12:41:16+0000",
            "content": "+1, these look like nice renamings! ",
            "author": "Michael McCandless",
            "id": "comment-13729471"
        },
        {
            "date": "2013-08-05T14:04:55+0000",
            "content": "The reasoning for the current naming is because it doesnt know anything about segments: it just works like a MultiTermsEnum (it takes TermsEnum[]). ",
            "author": "Robert Muir",
            "id": "comment-13729520"
        },
        {
            "date": "2013-08-05T14:09:21+0000",
            "content": "I also dont think external APIs should reflect internal structure: a separation is usually considered a good thing.\n\nThe current naming/parameterization was intentionally this way... ",
            "author": "Robert Muir",
            "id": "comment-13729524"
        },
        {
            "date": "2013-08-05T14:19:28+0000",
            "content": "I agree with the principle however the current implementation was already using segments in the API. For example:\n\npublic long getSegmentOrd(int subIndex, long globalOrd)\n\nIn which I removed the first parameter which was not used and renamed it to:\n\npublic long getFirstSegmentOrd(long globalOrd)\n\nthis to communicate the segment of which you get the ordinal.\n\n ",
            "author": "Boaz Leskes",
            "id": "comment-13729531"
        },
        {
            "date": "2013-08-05T16:50:31+0000",
            "content": "I like the getSegmentOrd change. Regarding the naming, I'm undecided but I think it's nice to use segment even if it is less generic, so that we don't have to use another word such as \"index\" to identify the TermsEnum, which could be confusing with \"ord\"? ",
            "author": "Adrien Grand",
            "id": "comment-13729640"
        },
        {
            "date": "2013-08-05T16:56:00+0000",
            "content": "I can say for sure I'm not happy with the API  And its bogus its inconsistent about subIndex/segment, so we should fix it one way or the other.\n\nA few things i hate about the API for the record:\n\n\tshould it really be in multitermsenum? if you have N-ord'enabled termsenums (regardless if they come from DV or not), you could use this thing. on the other hand the fact it uses termsenum at all could be seen as an impl detail of merging (sorted)set dictionaries.\n\ti hate the 'object' owner and hairy slow-wrapper caching. on the other hand, I felt it would be a trap to be anywhere else, because it can have real cost and is not per-segment, so slow-wrapper feels like the right place.\n\n\n\nSo my comment about subindex had more to do with the first problem: do we think it should be seen as a termsenum-merger or is it just a dv thing?\n ",
            "author": "Robert Muir",
            "id": "comment-13729643"
        },
        {
            "date": "2013-08-06T13:05:46+0000",
            "content": "on the other hand the fact it uses termsenum at all could be seen as an impl detail of merging (sorted)set dictionaries\n\nI tend to see it this way since ordinals are more useful on doc values than on an inverted index's terms dictionary?\n\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13730727"
        },
        {
            "date": "2013-08-08T17:15:10+0000",
            "content": "I discussed about this issue with Robert to see how we can move forward:\n\n\tmoving OrdinalMap to MultiTermsEnum can be controversial as Robert explained so let's only tackle the naming and getSegmentOrd API issues here,\n\tanother option to make getSegmentOrd less trappy is to add an assertion that the provided segment number is the same as the one returned by getSegmentNumber, this would allow for returning the segment ordinals on any segment in the future without changing the API,\n\trenaming subIndex to segment is ok as it makes the naming more consistent.\n\n\n\nRobert, please correct me if you think it doesn't reflect correctly what we said.\nBoaz, what do you think? ",
            "author": "Adrien Grand",
            "id": "comment-13733701"
        },
        {
            "date": "2013-08-08T17:42:06+0000",
            "content": "+1, lets improve it for now and not expand it to try to be a \"general\" termsenum merger. but on the other hand, i am still not convinced we can't improve the efficiency of this thing, so its good if we can prevent innards from being too exposed (unless its causing some use case an actual problem) ",
            "author": "Robert Muir",
            "id": "comment-13733745"
        },
        {
            "date": "2013-08-26T13:09:49+0000",
            "content": "Hi,\n\nSorry for the delay. I think it's a good idea to separate the push for a more generic class. Until the point that is done and properly documented, I would opt for clear naming in the current context. The class is marked both internal and experimental, so backward compatibility issues shouldn't be a problem in the future (if I understand the policies correctly). \n\nIf I understand the suggestion correctly, this is how the getSegmentOrd should look like:\n\n\n    public long getSegmentOrd(int segment, long globalOrd) {\n       assert segment == getFirstSegmentNumber(globalOrd);\n       return globalOrd - globalOrdDeltas.get(globalOrd);\n    }\n\n\n\nIn my opinion this is not an ideal situation because the name and the signature suggest you can get a per segment/subindex ordinal for any segment only in runtime to fire an assertion (if enabled). My vote would go to communicate the functionality better in the name and not offer a segment parameter that is can only have one value. \n\n\n ",
            "author": "Boaz Leskes",
            "id": "comment-13750074"
        },
        {
            "date": "2013-10-28T18:25:46+0000",
            "content": "This issue has been stalled for a few months now. Looking back at it, I think that the changes that Boaz proposes make the API easier to understand. It might be less general but this class is experimental so it will be possible to change the API again in the future is we want.\n\nI propose to commit the patch. If there are objections, I'll just close this issue as \"Won't fix\" and commit the suggested assertion in MultiOrdinals.getSegmentOrd. ",
            "author": "Adrien Grand",
            "id": "comment-13807060"
        },
        {
            "date": "2013-10-28T19:08:32+0000",
            "content": "I thought i gave a +1 above \n\nNot an objection just reiterating my previous hesitation: for example if I had that the time I would patch query-time join to use this class to support global ordinals across even different readers instead of huge hashmaps of terms, I think this would be much faster as its just an int<->int join.\n\nThen the segment number stuff might look wierd and the old API more intuitive, but this patch is fine for now! ",
            "author": "Robert Muir",
            "id": "comment-13807127"
        },
        {
            "date": "2013-10-29T08:35:03+0000",
            "content": "Commit 1536605 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1536605 ]\n\nLUCENE-5157: Rename OrdinalMap methods to clarify API and internal structure. ",
            "author": "ASF subversion and git services",
            "id": "comment-13807787"
        },
        {
            "date": "2013-10-29T08:37:34+0000",
            "content": "Commit 1536607 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1536607 ]\n\nLUCENE-5157: Rename OrdinalMap methods to clarify API and internal structure. ",
            "author": "ASF subversion and git services",
            "id": "comment-13807793"
        },
        {
            "date": "2013-10-29T08:40:37+0000",
            "content": "I thought i gave a +1 above\n\nOh, I thought the +1 was only for not making this class a generic termsenum merger!\n\nI just committed the patch, thanks Boaz! ",
            "author": "Adrien Grand",
            "id": "comment-13807794"
        }
    ]
}