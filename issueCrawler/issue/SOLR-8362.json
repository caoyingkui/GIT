{
    "id": "SOLR-8362",
    "title": "Add docValues support for TextField",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "At the last lucene/solr revolution, Toke asked a question about why TextField doesn't support docValues.  The short answer is because no one ever added it, but the longer answer was because we would have to think through carefully the intent of supporting docValues for  a \"tokenized\" field like TextField, and how to support various conflicting usecases where they could be handy.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-02T21:06:21+0000",
            "author": "Hoss Man",
            "content": "\nA few notable questions to consider:\n\n\n\twhat bytes go in the docValues?\n\t\n\t\tthe original, pre-analyzed input?\n\t\t\n\t\t\tthis would be consistent with things like the TrieField - regarldess of the precisionStep and synthetic indexed terms, the docValues only contain the original numeric values\n\t\t\n\t\t\n\t\tor some post-analysis values corrisponding to the tokens generatd by the analyzer?\n\t\t\n\t\t\tthis would be more like how UninvertedField currently produces synthetic docValue-esque data for indexed text fields.\n\t\t\n\t\t\n\t\n\t\n\twhat should the behavior be if a user does a search on a TextField that is indexed=\"false\" docValues=\"true\" ?\n\t\n\t\tis this just flat out not supported?\n\t\tif it is supported, is the query analyzer used?\n\t\t\n\t\t\tshould some other new type of analyzer be used?\n\t\t\tif there are multiple terms involved in the query, what kind of Query object gets returned?\n\t\t\t\n\t\t\t\tThere's no positional \"phrase\" query type concept in docValues, so does it just become a BooleanQuery with all clauses mandatory?\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\nA few usecases that should drive the discussion/decisions:\n\n\n\tusing docValues for faceting on the words in a large text field\n\t\n\t\tsimilar to UninvertedField and/or facet.method.enum with an indexed field that does not have docValues\n\t\tThis would require the docValues to contain \"post analysis\" terms\n\t\n\t\n\ta user who wants a <field name=\"title\" type=\"text\" indexed=\"true\" stored=\"true\" docValues=\"true\" /> TextField that they want to search on individual \"words\" but use the docValues for sorting on the whole title value\n\t\n\t\tyes, they could use another field, but explaining why they might need another field to use docValues in this way, as opposed to other string or numeric fields, is hard to convey w/o a lot of understanding of what's under the covers\n\t\n\t\n\n\n\n\n\nI'm including for posterity a followup conversation toke, elyograg, and I had on the #solr IRC channel not long after revolution (re-posted from my personal chat logs with their permissions) ...\n\n\n\n\ttoke On a somewhat related note, hoss suggested at Lucene/Solr Revolution that it should be possible to hack Solr to support docValues for analyzed fields. That would make the \"facet on everything\" scenario a fair bit lighter on the heap.\n\telyograg what an interesting indea.\n\telyograg does docValues already support the idea of multiple values per doc?\n\ttoke Yes.\n\telyograg so make the docValues the same as indexed, instead of stored.  I would not have thought of it, but now that it's been brought to mind, I'm liking it.  and it would solve the problem I had on SOLR-8088.\n\thoss i missed the start of this conversation, but to followup toke: there's no reason the tokens resulting from analysis couldn't be used as docValues - we just need to figure out what the configuration should look like so it's clear what you get when.\n\ttoke We have a few facet fields (author, title and so) where we need to normalize, and we really like to be anle to use Solr's analyzers for that.\n\thoss ie: if i have an another field that is both indexed (with tokenization for searching) but also have docValues i want the docValues for sorting \u2013 so that should be pre-tokenization ... but other usecases might want the post-analyzer values in docValues\n\thoss another = \"author\"\n\thoss toke: yeah ... understood ... i totally get the usecase, we just need a TextField patch with well thought out semantics/configuration\n\ttoke hoss: For me the simple choice would be that however many tokes you end up with gets docValues as the same number of entries. If you want a non-tokenized version for sorting, that will have to go into another field.\n\ttoke hoss: Not really different from how we do it now.\n\thoss expect that would make it very confusion/inconsistent with how StrField works today\n\thoss depending on how you think about it\n\ttoke It seems I am missing some understanding here.\n\thoss it's a perception issue ... you percieve docValues today as being an alternative storage of the \"indexed\" terms ... currently only supported for fields that don't allow Analyzers so the indexed terms are the same as the original raw values\n\thoss but that's not really true ... for things like TrieFields the docValues look nothing like the \"indexed terms\" (which are specially encoded and have multiple terms per value)\n\thoss it's more accurate to say that for fieldtypes that currently support docValues, the data put in the docValues is always the same as the data put in the stored field\n\thoss so if we start supporting docValues on TextField, the question of \"what bytes are in the docValues for a field that has an analyzer\" because a confusing question\n\ttoke With that in mind, docValues for StrField is already quite different from the numerics.\n\thoss using hte post-analyzer bytes is less consistent then what currently happens with other fields\n\ttoke So docValues should mimick String as close as possible.\n\thoss ok ... but \"mimic string as close as possible\" still doesn't answe the question of how it should behave .. since with a String the docValues are identicle to both the indexed terms AND the stored fields\n\thoss that's my point\n\thoss there's a big grey area as to what the behavior should be ... to you it's obviously one thing; to me it feels very much like it should be the oposite of what you think, and that makes it obvious to me that it's not obvious :)\n\ttoke I think I grasp some of your point underneath the hood. Another perspective is that docValues = analyzed & indexed for String fields (where tha analyzer is null/passthrough).\n\thoss understood ... and i want something to support your usecase with that perspective ... but i also want to ensure that the solution either supports \u2013 or at a minimum doesn't confuse the fuck out of \u2013 people whose perceptions go the other way\n\ttoke So the problem is the tokenization, right? This boils down to whether \"A b C\" should end up at \"a\", \"b\" and \"c\" in docValues or \"a b c\"?\n\thoss well ... the whole analyzer, yeah.\n\ttoke Okay, understanding increased. And I also understand that having a collapseTokens-parameter would be hard to explain.\n\telyograg I envision a slightly different config, such as docValues=\"indexed\" or perhaps docValuesIndexed=\"true\".  I don't like the former syntax very much, except that it makes it impossible to mix with docValues=\"true\".\n\thoss yeah ... exactly ... both your comments are why i'm saying it needs a lot of thought for the semantics/config ... it's why the whole thing was kind of punted on very early\n\telyograg code to error on the combination of a new parameter with the current parameter is easy enough, though.\n\thoss the best idea i've come up with is to make it a new type of analyzer: type=\"docValues\" ... and by default use an anon analyzer with the KeywordTokenizer\n\ttoke My na\u00efve entry was that docValued Text would act identical to non-docValued, just bringing heap-release goodnes.\n\ttoke hoss: That would guard against unexpected behaviour, but would not be very consistent with current attribute-based enabling of docValues. I don't have any better suggestion though.\n\thoss you would still need the docValues=\"true\" attribute to enable ... rememebr the field vs fieldtype defaults\n\thoss it would be just like today: you can have an indexed=\"false\" TextField with an <analyzer type=\"index\"> ... and then a field that uses that fieldtype can override indexed=\"true\"\n\thoss replace indexed with docValues and it would work the same way\n\ttoke hoss: I think I got that. So with this, it would be possible to have different values indexed, stored & docValued for a Text field?\n\thoss toke: exactly ... with 2 diff analyzers\n\n\n ",
            "id": "comment-15036620"
        },
        {
            "date": "2016-05-25T16:30:08+0000",
            "author": "Scott Blum",
            "content": "I'd like to put in a vote for \"docValues on the analyzed terms\" e.g. facets on the words in a large text field.  My reasoning for preferring this method is as follows:\n\nSuppose I have a text field that I want to be able to do normal token searches on.  Now, if I want to be able to facet on the entire value of the field efficiently: it's extremely easy to create a copyField that's a StrField and facet on that... it's a few lines of schema to create the copyField.  But what if I want to be able to facet on the individual tokens?  Maybe I want to use faceting to autosuggest search terms that would match text field tokens.  There's just no easy way to do that: I have to create a multivalued string field to hold each token and manually parse the whole value myself.  We're having to use an UpdateProcessor to do exactly that for basically every text field we want to be able to facet the tokens on. ",
            "id": "comment-15300372"
        },
        {
            "date": "2016-05-25T20:27:18+0000",
            "author": "Varun Thacker",
            "content": "Another reason to add this support\n\nLots of people use a TextField which has a Keyword Tokenizer + Lowecase Filter . The reason being\n\n\tYou can search on the field in a case insensitive fasion\n\tYou can facet on the field but the facet results preserve the casing as its a stored field as well.\n\n\n\n\"brand\" could be such field - you want to search and facet on them. We can't use DocValues in such a case also.\n\n ",
            "id": "comment-15300790"
        },
        {
            "date": "2016-12-30T21:10:16+0000",
            "author": "Yago Riveiro",
            "content": "Without support to DocValues to text fields, reindex a collection using the Update Stream Decorator it's not possible also.\n\nStreams are great to reindex data with a decent throughput.  ",
            "id": "comment-15788348"
        },
        {
            "date": "2016-12-30T21:40:19+0000",
            "author": "David Smiley",
            "content": "The semantics of using DocValues on tokenized text to re-index using UpdateStream is, I think, not at all a fit.  Instead... it'd be great if streaming expressions had a mechanism to consume stored-value fields for all docs, ideally in Lucene docId order for performance.  Definitely a separate issue from this one  ",
            "id": "comment-15788393"
        },
        {
            "date": "2016-12-30T22:49:21+0000",
            "author": "Yago Riveiro",
            "content": "Streams only works with fields that have configured docValues. As TextField doesn't support docValues I had think that maybe if the field type had docValues the streams would work.\n\nWe want the stored value instead, your explanation makes sense  ",
            "id": "comment-15788494"
        },
        {
            "date": "2018-01-26T22:42:19+0000",
            "author": "Hoss Man",
            "content": "FWIW, I've created 2 related issues that folks watching this Jira may want to look at:\n\n\n\tSOLR-11916 - proposes (w/patch) a SortableTextField subclass that would provide a straightforward way for people index & search analyzed test content while still sorting on the original string (via docValues\n\tSOLR-11917 - a very broad scope \"hypothetical roadmap\" were i've posted a lot of brain storming related to the improving the \"ease of use\" to some common usescases i've seen in dealing with text fields & analyzers that typical involves a lot of copyField work arrounds.  A big part of that issue is discussing how to tackle configurablilty in terms of supporting docValues on TextField and what analysis should be used there.\n\n ",
            "id": "comment-16341721"
        },
        {
            "date": "2018-01-27T03:24:51+0000",
            "author": "Joel Bernstein",
            "content": "I wanted to comment on re-indexing text fields with streaming expressions. There is a straight forward approach that does not require doc values described here:\n\nhttp://joelsolr.blogspot.com/2016/10/solr-63-batch-jobs-parallel-etl-and.html\n\nI'm not convinced that putting text fields into docValues is the way to go. The\u00a0significantTerms, features\u00a0and train\u00a0streaming expressions can do some really nice things with text fields in the inverted index. In the next release, the new termVectors\u00a0expression allows you to create on-the-fly tf-idf term vectors\u00a0which can be used for all kinds of text analytics.\u00a0\n\n\u00a0 ",
            "id": "comment-16341929"
        }
    ]
}