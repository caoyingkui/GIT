{
    "id": "SOLR-4455",
    "title": "Stored value of \"NOW\" differs between replicas",
    "details": {
        "affect_versions": "4.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I have a field in schema.xml defined like this:\n\n\n<field name=\"timestamp\" type=\"date\" indexed=\"true\" stored=\"true\" default=\"NOW\" />\n\n\n\nWhen I perform a query that's load-balanced across the servers in my cloud, the value stored in that field differs slightly between each replica for the same returned document.\n\nI haven't seen this field differ by more than a tenth of a second and I'm not running queries against it, but I can picture a situation where somebody has one replica returning 23:59:59.990 and another returning 00:00:00.010 and a query starts behaving oddly.\n\nIt seems like the leader should evaluate what \"NOW\" means and the replicas should copy that value.\n\nPossible Workaround\nA possible workaround for this issue is to use the TimestampUpdateProcessorFactory in your update processor chain prior to the DistributedUpdateProcessor instead of relying on the using \"NOW\" as a default value for date fields.\n\nThis will cause the timestamp field of each document to be filled in with a value before the documents are forwarded to any shards (or written to the transaction log) \n\nhttps://lucene.apache.org/solr/4_1_0/solr-core/org/apache/solr/update/processor/TimestampUpdateProcessorFactory.html",
    "attachments": {
        "SOLR-4455.patch": "https://issues.apache.org/jira/secure/attachment/12569406/SOLR-4455.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13578083",
            "date": "2013-02-14T01:29:32+0000",
            "content": "It seems like the leader should evaluate what \"NOW\" means and the replicas should copy that value.\n\nHmm... we actually have all the logic to do this, and i know it's being used for distributed queries, but i guess maybe the value isn't being forwarded in the DistributedUpdateProcessor? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13578250",
            "date": "2013-02-14T09:03:02+0000",
            "content": "+1 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13578777",
            "date": "2013-02-14T22:50:49+0000",
            "content": "Attaching a patch that adds the logic i was thinking of to DistributedUpdateProcessor.\n\nAt first i was confused why none of the existing distributed query tests weren't already failing, since the test config includes a \"timestamp\" field \u2013 and then i realized it's because the \"handler\" for comparing multiple responses for identical queries is configured to \"SKIPVAL\" the timestamp field in most tests.\n\nI updated a lot of the test scafolding to explicitly set a consistent NOW when talking to both the controlClient and a distributedClient.\n\nIn the attached patch, TestDistributedSearch and BasicDistributedZkTest have both been updated to no longer SKIPVAL the timestamp, and they pss, demontrating that the basics of this test scaffolding changes and the changes to DistributedUpdateProcessor seem to work.\n\nBasicDistributedZk2Test on the otherhand fails very early and consistently with these changes and the timestamp SKIPVAL disabled ... with the \"nocommit\" in place to always force a NOW value of in the year 2038, you can see from the logs that somehow the cloud copy of doc id=1 is still getting a timestamp of the currenttime, even though the control solr instance gets the expected value...  i'm not really sure why/how this is happening, because you can see the NOW value specified in the logs for all the /update requests related to id=1 (even when forwarded from the leader)\n\n\n\nOne thing that should be noted is that while typing up these notes, it occured to me that these changes still might not garuntee consistency in the case of a recovery situation that results in replaying the transaction log \u2013 in which case the documents are recorded, but not all of the update request params like NOW.\n\nI'm not certain if this is causing the BasicDistributedZk2Test failures mentioned above \u2013 but it's certianly possible (i do see mentions in the logs of \"Log replay finished. recoveryInfo=RecoveryInfo{adds=1 ...\", but it's not clear to me why any recovery would be happening ... nothing jumps out at me in this test to suggest that anything is aborting nodes to force recovery.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13578781",
            "date": "2013-02-14T22:56:07+0000",
            "content": "updated issue description with a suggested workaround of using the TimestampUpdateProcessorFactory "
        },
        {
            "author": "Colin Bartolome",
            "id": "comment-13643088",
            "date": "2013-04-26T18:13:11+0000",
            "content": "That workaround seems to work perfectly. Thanks! "
        },
        {
            "author": "Supriya Bommareddy",
            "id": "comment-14662292",
            "date": "2015-08-07T19:14:12+0000",
            "content": "I tried the workaround with the following changes in my solrconfig.xml and its not working. I have solr-5.2.1 installed.\n\nNOTE: I am not sending the timestamp field in the document and I am updating the document via the admin console UI.\n\n\n <requestHandler name=\"/update\" class=\"solr.UpdateRequestHandler\">\n    <!-- See below for information on defining\n         updateRequestProcessorChains that can be used by name\n         on each Update Request\n      -->\n       <lst name=\"defaults\">\n         <str name=\"update.chain\">timestamp</str>\n       </lst>\n  </requestHandler>\n\n\n\n <updateRequestProcessorChain name=\"timestamp\" default=\"true\">\n          <processor class=\"solr.TimestampUpdateProcessorFactory\">\n               <str name=\"fieldName\">timestamp</str>\n          </processor>\n          <processor class=\"solr.DistributedUpdateProcessorFactory\"/>\n          <processor class=\"solr.LogUpdateProcessorFactory\" />\n          <processor class=\"solr.RunUpdateProcessorFactory\" />\n     </updateRequestProcessorChain>\n\n\n\n\n*********************************************************************************************************\nschema.xml has the below entry\n\n\n<field name=\"timestamp\" type=\"date\" indexed=\"true\" stored=\"true\" multiValued=\"false\"/>\n<fieldType name=\"date\" class=\"solr.TrieDateField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n\n\n "
        },
        {
            "author": "Supriya Bommareddy",
            "id": "comment-14680876",
            "date": "2015-08-10T22:22:42+0000",
            "content": "Calling the DistributedUpdateProcessoryFactory after the LogUpdateProcessoryFactory as shown below worked.\n\n\n<updateRequestProcessorChain name=\"timestamp\" default=\"true\">\n          <processor class=\"solr.TimestampUpdateProcessorFactory\">\n               <str name=\"fieldName\">timestamp</str>\n          </processor>\n          <processor class=\"solr.LogUpdateProcessorFactory\" />\n          <processor class=\"solr.DistributedUpdateProcessorFactory\"/>\n          <processor class=\"solr.RunUpdateProcessorFactory\" />\n     </updateRequestProcessorChain>\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-16479154",
            "date": "2018-05-17T14:47:19+0000",
            "content": "Hoss ManIs this still current? Happened to run across it searching for something else. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16481314",
            "date": "2018-05-18T22:59:12+0000",
            "content": "AFAIK this is still an open problem, and using TimestampUpdateProcessorFactory prior to DistributedUpdateProcessorFactory is still the best solution \u2013 it ensures that the timestamp is generated prior to forwarding the doc to shards AND before writing to the tlog, so even if a replica recovers later, the same value will be used. "
        }
    ]
}