{
    "id": "LUCENE-1849",
    "title": "Add OutOfOrderCollector and InOrderCollector subclasses of Collector",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Wish",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I find myself always having to implement these methods, and i always return a constant (depending on if the collector can handle out of order hits)\n\nwould be nice for these two convenience abstract classes to exist that implemented acceptsDocsOutOfOrder() as final and returned the appropriate value",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-24T14:56:59+0000",
            "content": "But then what will classes like TopFieldCollector and TopScoreDocCollector will do? They won't be able to extend from any of them because a Collector may support both, one impl more efficient than the other.\n\nOf course it doesn't mean that every Collector needs to extend either of these, but I wonder if it's such a big deal to decide on your own, once you've decided to write a Collector, if you support it or not.\n\nThose two do not do any harm, but we'll just need to maintain them going forward, and I wonder if they are really that useful ... ",
            "author": "Shai Erera",
            "id": "comment-12746904"
        },
        {
            "date": "2009-08-24T15:01:40+0000",
            "content": "They would be convenience classes for people implementing their own Collectors (as i am)\n\njust kinda a pain (and bloats amount of required code by about 5 lines) to have to always implement this method (when it could be inherited easily from a parent class)\n\nJust throwing this out as an idea to see if anyone else likes it (thats why i marked it as a Wish) ",
            "author": "Tim Smith",
            "id": "comment-12746907"
        },
        {
            "date": "2009-08-24T15:21:04+0000",
            "content": "(and bloats amount of required code by about 5 lines)\n\nYou can do it in 2 (or even 1) \n\n\n@Override\npublic boolean acceptsDocsOutOfOrder() { return true/false; }\n\n\n\nI don't mind if those two will be added. I still don't think they're that useful, but they don't do any harm either. ",
            "author": "Shai Erera",
            "id": "comment-12746912"
        },
        {
            "date": "2009-08-24T15:29:10+0000",
            "content": "People tend to always reformat single line functions like that to use at lest 2 more lines (i think checkstyle/eclipse formatting will often screw up my compact code if someone else ever touches it))\nalso, you need the extra line for javadoc, so thats always 5 lines \n\nI can always add these to classes to my class hierarchy (and i probably will if it doesn't get added to lucene's search package)\nbut i think these are in general useful to anyone implementing collectors\n\na typical person porting to 2.9 can switch their HitCollector to subclass InOrderCollector instead (in order to keep getting docs in order like lucene 2.4)\nThis then means they don't need to even think about acceptDocsOutOfOrder() semantics unless they really want to\nAlso one less method to implement incorrectly for us application developers  ",
            "author": "Tim Smith",
            "id": "comment-12746920"
        },
        {
            "date": "2009-08-24T15:43:33+0000",
            "content": "How about making acceptsDocsOutOfOrder()  no abstract and provide a default implementation that just returns a field that can only be set by a protected method? E.g. protected setAcceptsDocsOutOfOrder()  can be initialized by a ctor? Or make the field private and initialize it by a ctor in the abstract calss? By that cou can create a subclass of Collector like the following:\n\nCollector c = new Collector(true/false) {\n  public void collect(...)...\n  ...\n}\n\n\nI would like this, as it is much simplier to use instead of always implementing this silly one-liner. ",
            "author": "Uwe Schindler",
            "id": "comment-12746926"
        },
        {
            "date": "2009-08-24T15:53:11+0000",
            "content": "I like the idea of this flag being private final and initialized via a Collector constructor\n\nCollector.acceptDocsOutOfOrder() should then be made final though? (otherwise each collector has a boolean flag that may never be used if a subclass implements acceptDocsOutOfOrder() its own way) ",
            "author": "Tim Smith",
            "id": "comment-12746928"
        },
        {
            "date": "2009-08-24T17:42:29+0000",
            "content": "I like the idea of this flag being private final and initialized via a Collector constructor\n\nThis seems OK to me.\n\nCollector.acceptDocsOutOfOrder() should then be made final though?\n\nOr just make it package private?  This flag is only used by oal.search.* to mate the right scorer to the collector. ",
            "author": "Michael McCandless",
            "id": "comment-12746971"
        },
        {
            "date": "2009-08-24T19:03:30+0000",
            "content": "Or just make it package private? This flag is only used by oal.search.* to mate the right scorer to the collector.\n\nprotected instead please, \nCollector subclasses should be able to inspect this value if they want/need to\n ",
            "author": "Tim Smith",
            "id": "comment-12747021"
        },
        {
            "date": "2009-08-24T19:17:46+0000",
            "content": "protected instead please, \n\nOK.  Can you cons up a patch here? ",
            "author": "Michael McCandless",
            "id": "comment-12747026"
        },
        {
            "date": "2009-08-24T19:19:43+0000",
            "content": "will do ",
            "author": "Tim Smith",
            "id": "comment-12747028"
        },
        {
            "date": "2009-08-24T19:21:22+0000",
            "content": "How would this flag reduce any \"code bloat\" in subclasses? They now have to call super() in their ctors.\n\nAnd TSDC and TFC will need to add a parameter to their private ctors, so that they can pass this parameter on to TopDocsCollector, which will need to pass it on to Collector ...\n\nI think this will get pretty messy and complicated.\n\nWhat exactly are we trying to solve here? 5 lines of code that every Collector developer (how many are out there anyway?) need to invest 3 minutes thinking about them before he codes that method? ",
            "author": "Shai Erera",
            "id": "comment-12747029"
        },
        {
            "date": "2009-08-24T19:44:09+0000",
            "content": "I think this will get pretty messy and complicated.\n\nyeah, this is a bit messy with the chain of inheritance in these classes (as each variant is \"slightly\" optimized depending on in order/out of order collection)\n\nmakes me go back to favoring InOrderCollector/OutOfOrderCollector abstract classes\nor maybe just one \"AbstractCollector\" method which implements all methods except collect()\n\nlike so:\n\npublic abstract class AbstractCollector extends Collector {\n  private final boolean allowDocsOutOfOrder;\n  protected IndexReader reader;\n  protected Scorer scorer;\n  protected int docBase;  \n\n  public AbstractCollector() {\n    this(false);\n  }\n\n  public AbstractCollector(boolean allowDocsOutOfOrder) {\n    this.allowDocsOutOfOrder = allowDocsOutOfOrder;\n  }\n\n  public void setNextReader(IndexReader reader, int docBase) {\n    this.reader = reader;\n    this.docBase = docBase;\n  }\n\n  public void setScorer(Scorer scorer) {\n    this.scorer = scorer;\n  }\n\n  public final boolean acceptsDocsOutOfOrder() {\n    return allowDocsOutOfOrder;\n  }\n}\n\n\n\nWhat exactly are we trying to solve here?\nthe Collector methodology has grown more complicated (because it does more to handle per segment searches)\nthe HitCollector api was nice and simple\n\nthis AbstractCollector (insert better name here) gets things back to being more simple\ncould even hide the \"Scorer\" as private and provide a \"score()\" method that returns the score for the current document, and otherwise simplify this even more\n\nsubclassing AbstractCollector instead of Collector makes it so most of the \"required common things\" are done for you\notherwise, every single Collector will do virtually the same thing is done in AbstractCollector here (as far as setup/etc)\n\nAgain, this is just a Wish which i've thought of as i've been working through the new collector API (and found myself doing the exact same thing for every implementation of Collector) ",
            "author": "Tim Smith",
            "id": "comment-12747039"
        },
        {
            "date": "2009-08-24T20:02:41+0000",
            "content": "But if we encourage people to extend AbstractCollector, they'll incur some overhead we've tried to eliminate. Why have a setScorer impl which does something, even if just member assignment, if I don't need the score?\n\nKeeping Scorer private is not good either, because that'll add a method call for me (score() vs. scorer.score()). This is also something we've tried to avoid in all these \"specialized\" impls in TSDC/TFC.\n\nPart of the new Collector API is to help Collector developers impl the best Collector for their needs. By having those methods abstract, we force them to think a little bit and then do what's best for them. If I don't need a score, I don't even want to have a Scorer member in my Collector (which consumes memory, even if just a pointer).\n\nI'm afraid that by introducing this AbstractCollector, we won't encourage people to impl the best Collector for their needs. They'll just impl collect() and use whatever is available if they need to. And really, IMO, this AbstractCollector saves me nothing - I don't mind writing this.scorer = scorer if I need Scorer. And I don't think the current Collector API makes it any more harder to write a Collector ... but perhaps I'm wrong. ",
            "author": "Shai Erera",
            "id": "comment-12747042"
        },
        {
            "date": "2009-08-24T20:12:09+0000",
            "content": "we force them to think a little bit and then do what's best for them\n\nthe more you force people to think, the more likely they will come to the wrong solution (in my experience)\n\ni love the power of the new Collector API, and i know how to take advantage of it to eek out the utmost performance where it matters or is possible.  But with some cases, i just want that AbstractCollector because it reduces my code complexity for subclasses and does everything i need without me introducing duplicated code\n\nAlso, the AbstractCollector makes it much easier to create anonymous subclasses of Collector (just one method to override) (i hate anonymous subclasses myself, but i see them used a lot inside lucene). I know in 2.4 there were tons of anonymous HitCollectors  ",
            "author": "Tim Smith",
            "id": "comment-12747046"
        },
        {
            "date": "2009-08-24T20:20:14+0000",
            "content": "If we want to help people impl Collector, then let's at least make a useful subclass, like ScoringCollector which impls setScorer and setNextReader by keeping Scorer and docBase. It will leave you to impl collect() however you want.\n\nBut just have an AbstractCollector which stores everything that the setter methods passed does not look a good idea to me. What do you think? ",
            "author": "Shai Erera",
            "id": "comment-12747050"
        },
        {
            "date": "2009-08-24T20:25:39+0000",
            "content": "i was just proposing AbstractCollector to consolidate the \"variations\" of abstract subclasses of Collector\n\nI like ScoringCollector\ni would also like a NonScoringCollector\n\nin this case, i would recommend both should take the \"allowDocsOutOfOrder\" flag in their constructors (and store in a private final returned by acceptingOutOfOrderDocs())\notherwise, i would still want to see 2 variations on each of ScoringCollector and NonScoringCollector to handle the OutOfOrder vs InOrder variations\n\n ",
            "author": "Tim Smith",
            "id": "comment-12747051"
        },
        {
            "date": "2009-08-24T20:32:37+0000",
            "content": "There should also be not only the variation that simply stores docBase in a field. I normally never used that, I always store the reader in a field and then directly operate on the subreader (e.g. for retriving values from the field cache). For me global docIds are unimportant (at least in my collectors). Because of this problem, I had created exactly such a abstract helper class handling this.\n\nFor the special case FieldCache, the proposed abstract class simply storing all set values into protected fields does not make sense. This FieldCache-using collectors normally override setNextReader(), where they retrieve the needed arrays from the field cache (whenever a new reader occurs, you can switch your value arrays to the next reader instantly). Collector then only operates on the field cache array, the reader is unimportant. And even the docBase is unimportant. I have such an collector, that uses numerical document ids from the relational database out of the field cache.\n\nLot's of use-cases... Maybe we should put these helper classes into contrib/queries? ",
            "author": "Uwe Schindler",
            "id": "comment-12747054"
        },
        {
            "date": "2009-08-24T20:38:30+0000",
            "content": "I guess the question is: what variations do we provide helper Collector implementations for?\n\nseems like there's a bunch of possibilities (depending on how far you go)\n\nthats why i initially proposed AbstractCollector (storing everything that was set (IndexReader, Scorer, docBase))\nthe amount of memory and time used to set 2 pointers and an int per segment almost seems irrelevant for this Collector implementation aid (and if you really care about those few bytes and cpu cycles, you can directly implement Collector) ",
            "author": "Tim Smith",
            "id": "comment-12747059"
        },
        {
            "date": "2009-08-24T20:59:27+0000",
            "content": "I think we should simply do nothing.  This is an expert API.  There are a many ways it's going to be used.  Each app can make helper classes if it wants, but I think Lucene should simply offer Collector. ",
            "author": "Michael McCandless",
            "id": "comment-12747067"
        },
        {
            "date": "2009-08-24T21:03:54+0000",
            "content": "I think we should simply do nothing. This is an expert API.\n\ni'm ok with that\n\njust thought this idea would potentially be of general use for other developers, but it probably gets more complex adding all the variations for subclasses of Collector and maybe even more confusing that just the raw Collector API ",
            "author": "Tim Smith",
            "id": "comment-12747075"
        },
        {
            "date": "2009-08-25T03:26:41+0000",
            "content": "I think we should simply do nothing\n\n+1. So many use cases brought up in this issue, and so many \"helper\" classes. I just can't help imagining the future of this \"I want a non scoring collector, which accepts docs out of order, and keeps its next reader ...\" and we'll try very hard to create a helper class which does that because now we cannot inherit from two 'abstract' Collectors, each achieving part of it.\n\nI also feel that when I'll upgrade all of HitCollectors to Collector, the decision on what to do where will not be that difficult - it's pretty straightforward I think. At least it's the same decision as \"which collector should I subclass\" ... ",
            "author": "Shai Erera",
            "id": "comment-12747206"
        },
        {
            "date": "2009-08-25T14:13:29+0000",
            "content": "I think we should simply do nothing. This is an expert API.\n\n+1\n\nThe reality is that order will matter for some custom collectors, and the abstract method makes that clear.\nThe API is fine as it is, but if we wanted to provide a default in Collector, that would be fine too.\nIf we were to provide a default in Collector, it should be a simple constant, not a variable.  Subclasses changing would simply override the method as normal.  We should strive to treat our abstract base classes as interfaces, and adding fields and final methods should be avoided. ",
            "author": "Yonik Seeley",
            "id": "comment-12747427"
        },
        {
            "date": "2009-08-25T14:34:33+0000",
            "content": "If we were to provide a default in Collector, it should be a simple constant, not a variable.\n\nin that case, it may be useful to have this method return \"false\" by default (expecting docs in order, as this is the \"default\" in 2.4) ",
            "author": "Tim Smith",
            "id": "comment-12747441"
        },
        {
            "date": "2009-08-25T19:12:20+0000",
            "content": "I would prefer not to make a default here, ie, force an explicit\nchoice, because it is an expert API.\n\nBooleanQuery gets sizable gains in performance if you let it return\ndocs out of order.  If we default it (to false), most users won't\nrealize how much performance they're accidentally losing. ",
            "author": "Michael McCandless",
            "id": "comment-12747584"
        },
        {
            "date": "2009-08-25T19:20:03+0000",
            "content": "I would prefer not to make a default here, ie, force an explicit choice, because it is an expert API. \n\nvery reasonable\n\nBooleanQuery gets sizable gains in performance if you let it return docs out of order.\n\nAny stats on the performance gains here available?\ndidn't see any on a cursory glance through javadoc\n\nAlso, are the implications of out of order docids coming back from nextDoc() well documented (javadoc?, wiki?)?\nI guess out of order docids really screw up advance(int), so you should never call advance(int) if you allowed out of order collection for a Scorer? ",
            "author": "Tim Smith",
            "id": "comment-12747587"
        },
        {
            "date": "2009-08-25T21:00:05+0000",
            "content": "Any stats on the performance gains here available?\n\nI think somewhere in LUCENE-1483 is the answer to this question, but I can't find it now.  (We need a whole new search index just for that issue alone!).  But the optimization currently only applies if the query contains just SHOULD terms plus up to 32 MUST_NOT terms.  More testing here would be great... the specialized search in LUCENE-1594 also uses out-of-order collection for certain AND queries but I haven't confirmed if/when that's a win.\n\n\nAlso, are the implications of out of order docids coming back from nextDoc() well documented (javadoc?, wiki?)?\nI guess out of order docids really screw up advance(int), so you should never call advance(int) if you allowed out of order collection for a Scorer?\n\nOut-of-order scoring is only used for top-scorers today in Lucene, so nextDoc/advance are not used.  (Though: BooleanScorer, which provides docs out-of-order, is I think able to nextDoc() through the out-of-order docs, but I don't think we take advantage of that anywhere, though we could do so to improve performance of BooleanQuery as a sub-clause of BooleanQuery). ",
            "author": "Michael McCandless",
            "id": "comment-12747637"
        },
        {
            "date": "2009-08-25T21:10:40+0000",
            "content": "Out-of-order scoring is only used for top-scorers today in Lucene\n\nI see that FilteredQuery passes \"scoreDocsInOrder\" down to its sub query\nIs this incorrect?\nseems like this could cause problems as FilteredQuery does call nextDoc/advance on its sub query (which could be out of order because of this) ",
            "author": "Tim Smith",
            "id": "comment-12747645"
        },
        {
            "date": "2009-08-25T21:55:01+0000",
            "content": "Good catch!  It should not be doing that.  It should be passing \"true\" down since it will use advance.\n\nBut it doesn't result in a bug, because 1) its Weight.scoresDocsOutOfOrder returns false, which causes IndexSearcher's sort by relevance or field methods to pick an in-order collector which then causes IndexSearcher to pass \"true\" for scoreDocsInOrder, and 2) it's passing down \"false\" for topScorer, which causes BooleanQuery to not return an out-of-order scorer.\n\nI'll commit a fix plus a test shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12747678"
        },
        {
            "date": "2009-08-26T07:07:03+0000",
            "content": "I think somewhere in LUCENE-1483 is the answer to this question\n\nI tracked it down to LUCENE-1575 which was the huge refactoring to HitCollector issue: https://issues.apache.org/jira/browse/LUCENE-1575?focusedCommentId=12695784&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12695784\n(perhaps we should index my memory cells?  ). ",
            "author": "Shai Erera",
            "id": "comment-12747805"
        },
        {
            "date": "2009-08-26T09:23:41+0000",
            "content": "We do need to index your memory cells!\n\nExcept: that entry is showing the [sizable] perf gains of disabling scoring when sorting by field (I think?). We were instead looking for the comparison of BooleanScorer vs BoolenScorer2. ",
            "author": "Michael McCandless",
            "id": "comment-12747851"
        },
        {
            "date": "2009-08-26T09:58:16+0000",
            "content": "Yes I know that - I remember that you once ran w/ BS vs. BS2 and thought the results were reported in that issue. But I've scanned it and I don't find it. Perhaps it was in an email, but I seem to remember you reported ~20-30% improvement in favor of BS. I'll try to digg it up from the bottom of my memory pit. ",
            "author": "Shai Erera",
            "id": "comment-12747874"
        }
    ]
}