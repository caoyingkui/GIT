{
    "id": "LUCENE-2547",
    "title": "minimize autoboxing in NumericField",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0.2",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "dicIf you already have a Integer/Long/Double etc. numericField.setLongValue(long) causes an unnecessary auto-unbox.\nactually, since internal to setLongValue there is:\n\nfieldsData = Long.valueOf(value);\n\n\nthen, there is an explicit box anyway, so this makes setLongValue(Long) with an auto-box of long roughly the same as setLongValue(long), but better if you started with a Long.\nLong being replaceable with Integer, Float, Double etc.",
    "attachments": {
        "LUCENE-2547.patch": "https://issues.apache.org/jira/secure/attachment/12449783/LUCENE-2547.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-07-18T06:02:47+0000",
            "content": "add a bunch of Object based setXXXValue methods ",
            "author": "Woody Anderson",
            "id": "comment-12889570"
        },
        {
            "date": "2011-01-16T23:27:02+0000",
            "content": "I don't like the patch API-wise; my problems are:\n\n\n\tThe parameters cannot be null, so at least a null-check is missing\n\tFrom the other Numeric* APIs, the object params mean \"can be null\" (e.g. NumericRangeQuery.newLongRange(..., Long, Long,...)\n\tI exposes internal AbstractField details that may be removed in 4.0 with revision of Field API (see other open issues). We may change the fieldValue protected member in 4.0 (in my opinion, it should not be at all in AbstractField). So the autoboxing is just needed to fill the Object fieldValue with something (the reason is only stored=true, because fieldValue.toString() is stored in index - so during indexing more boxing occurs - a cast to String).\n\tIf you try this out with a profiler you see no difference at all (loop creating a field and setting lots of values) - the objects are shortliving so JRE optimizes (allocates on thread local heap).\n\n\n\nI would like to close this as \"won't fix\" and don't clutter the API. ",
            "author": "Uwe Schindler",
            "id": "comment-12982426"
        },
        {
            "date": "2011-01-17T04:39:20+0000",
            "content": "Let's give poor Woody a chance to possibly counter argue first though  ",
            "author": "Mark Miller",
            "id": "comment-12982476"
        },
        {
            "date": "2011-01-17T07:20:21+0000",
            "content": "1. true, would you like a null check to throw an NPE? (b/c that's what will happen anyway... i don't see a lot of 'assert' use in lucene due to java version issues)\n2. also true, though this wouldn't be the first api to accept Long/Integer etc. that should not be null for the purposes of auto-box behavior\n3. what 'internal details' are exposed?\n3.a I have no counter argument for \"what might happen in 4.0\", but i agree that fieldsData is a weird member of AF; by extension, if fieldsData is set to a boxed version of the object simply to set it to something, why is that? If the 4.0 you imagine doesn't suffer this need, then whatevs, it's a non-issue. In the current form, it seems to exist simply for toString() (for human consumption), stringValue() is what is actually stored in the index, and is short-lived as you say. fieldsData is not necessarily short lived.\n4. depending on your code and how long you keep documents etc. the fieldsData is not as short lived as the String from stringValue etc. Your point stands though, I haven't run an isolated profile in this scenario. Creating a field and setting lots of values isn't a viable test of real behavior though. Creating documents and adding fields and indexing etc. and depending on the app there is more going on that would keep fields around longer, which would not allow the boxed objects to be as optimized as you wish.\n\nAt any rate, I understand your points. However, in my application, I already have Long/Integer and i have to unbox/rebox pointlessly.\nI agree that a certain aspect of the issue is addressed by eliminating fieldsData, and the need for any boxed object to exist. But then you're going to have the problem of multiple variables or multiple subclasses etc. both of which seem worse than an Object.  This is an object that more than a few users of the API already have in boxed form, and is not a dominant performance problem, but I don't think that a method called setLong(Long) confuses very many people. fwiw, setLong(null) could simply return the field to it's default state after construction, which isn't the worst thing either (aside from being impossible with setLong(long)).\n\nIt's not a huge issue, but from my perspective, neither is having setLong(Long), and it's certainly an easy diff for me to splice into my version. ",
            "author": "Woody Anderson",
            "id": "comment-12982508"
        },
        {
            "date": "2011-01-17T08:21:34+0000",
            "content": "However, in my application, I already have Long/Integer and i have to unbox/rebox pointlessly.\n\nI didn't dive deep into the details of this issue, but what will someone who has only long/int (and not their counter objects) do? Will he need to create a Long/Integer out of them?\n\nI think more often than not, people use primitives and not their counter objects. I wouldn't want Lucene API to suddenly require me to allocate a Long (whether explicitly or by autoboxing) just because someone wanted to avoid using primitives ...\n\nMy experience with the NumericFields API was very good so far - I didn't find it cumbersome or less performing. IMO we should handle primitives at the API level wherever we can and use Objects as less as possible. ",
            "author": "Shai Erera",
            "id": "comment-12982519"
        },
        {
            "date": "2011-01-17T23:57:32+0000",
            "content": "I didn't dive deep into the details of this issue, but what will someone who has only long/int (and not their counter objects) do? Will he need to create a Long/Integer out of them?\nShai, there are primitive setters already though.\n\nThe parameters cannot be null, so at least a null-check is missing\nagreed\n\nIf you try this out with a profiler you see no difference at all (loop creating a field and setting lots of values) - the objects are shortliving so JRE optimizes (allocates on thread local heap).\nagreed!\n\nI think calling setLong(longRef.longValue()) is not a big deal and an API change / addition is not needed here. Moving out? ",
            "author": "Simon Willnauer",
            "id": "comment-12982927"
        },
        {
            "date": "2011-01-18T00:01:18+0000",
            "content": "That's I am talking about, don't clutter API for such useless and inconsistent stuff ",
            "author": "Uwe Schindler",
            "id": "comment-12982928"
        },
        {
            "date": "2011-01-18T00:04:28+0000",
            "content": "moving out  ",
            "author": "Simon Willnauer",
            "id": "comment-12982929"
        }
    ]
}