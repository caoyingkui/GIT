{
    "id": "SOLR-9444",
    "title": "Fix path usage for cloud backup/restore",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.2.1",
            "6.3",
            "7.0"
        ],
        "affect_versions": "6.2",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "As noted by Uwe on https://issues.apache.org/jira/browse/SOLR-9242?focusedCommentId=15438925&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15438925 the usage of URI#getPath is wrong. \n\nCreating a Jira to track this better. More details to follow",
    "attachments": {
        "SOLR-9444.patch": "https://issues.apache.org/jira/secure/attachment/12825670/SOLR-9444.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-08-26T14:39:18+0000",
            "author": "Hrishikesh Gadre",
            "content": "Varun Thacker Thanks for creating the JIRA. I will send out a patch later today. ",
            "id": "comment-15439163"
        },
        {
            "date": "2016-08-26T14:53:20+0000",
            "author": "Uwe Schindler",
            "content": "I'd suggest do let the first parameter of the createURI abstract method take URI (as basis URI), and then the String Path components. Then you can remove all code that just calls URI.getPath() to (incorrectly) to extract the path filesystem path (or whatever path) from the URI, misusing escaping. If you are Using the URI class from the begijning, use it everywhere.\n\nFor pathes that might be file system pathes (without an URI protocol), the config file parsing code should have a fallback catch clause like - or maybe using a regex that checks for a missing protocol (I assume the latter might be better):\n\nfinal URI uri;\ntry {\n uri = new URI(stringFromConfigFile);\n // a bit of hack:\n if (!uri.isAbsolute)) throw new URiSyntaxException(\"use fallback\");\n} catch (URISyntaxException use) {\n uri = Paths.get(stringFromConfigFile).toURI();\n}\n\n\n\nAnd this can be safely passes around. If you want to use this later and extend with other relative stuff (e.g. in createURI abstract method), use the above baseURI and append the other string parameters with \"resove\". In general this could be done completely unspecific to the file system impl (outside repository impl classes).\n\nInside FileSystemRepository you can then use Paths.get(URI) to convert it to a file system instance (that would then even work with Java's native ZIPFS or others: https://docs.oracle.com/javase/8/docs/api/java/nio/file/Paths.html#get-java.net.URI-) ",
            "id": "comment-15439185"
        },
        {
            "date": "2016-08-26T14:58:29+0000",
            "author": "Varun Thacker",
            "content": "Quick patch which uses Paths.get() instead of URI.getPath. \n\nTestHdfsBackupRestoreCore will fail because with:\n\n\n39668 ERROR (OverseerThreadFactory-10-thread-3-processing-n:127.0.0.1:60156_solr) [n:127.0.0.1:60156_solr    ] o.a.s.c.OverseerCollectionMessageHandler Collection: hdfsbackuprestore operation: backup failed:java.nio.file.FileSystemNotFoundException: Provider \"hdfs\" not installed\n\tat java.nio.file.Paths.get(Paths.java:147)\n\tat org.apache.solr.cloud.BackupCmd.call(BackupCmd.java:98)\n\tat org.apache.solr.cloud.OverseerCollectionMessageHandler.processMessage(OverseerCollectionMessageHandler.java:222)\n\tat org.apache.solr.cloud.OverseerTaskProcessor$Runner.run(OverseerTaskProcessor.java:463)\n\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$26(ExecutorUtil.java:229)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\nI think thats related to https://github.com/damiencarol/jsr203-hadoop\n ",
            "id": "comment-15439193"
        },
        {
            "date": "2016-08-26T15:00:06+0000",
            "author": "Varun Thacker",
            "content": "I'm going to take a look at this  ",
            "id": "comment-15439200"
        },
        {
            "date": "2016-08-26T15:02:28+0000",
            "author": "Uwe Schindler",
            "content": "I think the file system repository should only be used if the \"protocol\" is \"file\". ",
            "id": "comment-15439207"
        },
        {
            "date": "2016-08-26T15:07:14+0000",
            "author": "Uwe Schindler",
            "content": "Quick patch which uses Paths.get() instead of URI.getPath.\n\nThe issue lies deeper in the API design of the backup infrastructure: see my above comment! If you use URI, then use it completely and avoid any conversion between strings and URIs. This is almost always a bug.\n\nAs said before only accept strings when parsing config files, in any other case just pass URI class around. If you really need to convert to String (e.g. when it goes over wire), convert with URI.toAsciiString() and decrypt with new URI(...).\n\nThe choose of the repository provider should then be done soley on URI#getScheme(). Only use java.nio.Path in FileSystemRepsitory but not for URI schemes where there is a better alternative (e.g. Hadoop, Zookeeper). ",
            "id": "comment-15439223"
        },
        {
            "date": "2016-08-29T03:56:13+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user hgadre opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/74\n\n    SOLR-9444 Fix path usage for cloud backup/restore\n\n\n\tRefactored code using URI.getPath() API to use URI instance\n      uniformly.\n\tDuring serialization of URI instance, used toASCIIString() API\n      to generate the appropriate String representation.\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/hgadre/lucene-solr SOLR-9444_fix\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/74.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #74\n\n\ncommit 0acb659eacd7a7e6b76a2796bc9e75d5a815b439\nAuthor: Hrishikesh Gadre <hgadre@cloudera.com>\nDate:   2016-08-28T21:48:24Z\n\n    SOLR-9444 Fix path usage for cloud backup/restore\n\n\n\tRefactored code using URI.getPath() API to use URI instance\n      uniformly.\n\tDuring serialization of URI instance, used toASCIIString() API\n      to generate the appropriate String representation.\n\n\n\n ",
            "id": "comment-15444718"
        },
        {
            "date": "2016-08-30T05:02:08+0000",
            "author": "Hrishikesh Gadre",
            "content": "Varun Thacker Uwe Schindler Could you please review the PR ? I have tested on Linux as well as Windows... ",
            "id": "comment-15448044"
        },
        {
            "date": "2016-08-30T07:14:13+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user uschindler commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/74#discussion_r76740913\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository.java \u2014\n    @@ -58,21 +59,28 @@ public void init(NamedList args) {\n       }\n\n       @Override\n\n\tpublic URI createURI(String... pathComponents) {\n\tPreconditions.checkArgument(pathComponents.length > 0);\n    -\n\tString basePath = Preconditions.checkNotNull(pathComponents[0]);\n\t// Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n\t// Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n\t// Since the caller may have used this method to generate the string representation\n\t// for the pathComponents, we implement a work-around specifically for Windows platform\n\t// to remove the leading '/' character.\n\tif (Constants.WINDOWS) {\n\tbasePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    +  public URI createURI(String location) {\n    +    Preconditions.checkNotNull(location);\n    +\n    +    URI result = null;\n    +    try {\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Nice. This is exactly as I proposed. So people can use both URIs with a file: or just a plain path. URI.isAbsolute() returns false, if scheme (\"file:\") is missing: <https://docs.oracle.com/javase/7/docs/api/java/net/URI.html#isAbsolute()> \"A URI is absolute if, and only if, it has a scheme component.\" ",
            "id": "comment-15448293"
        },
        {
            "date": "2016-08-30T07:17:59+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nthis looks cool! I will try it out in a minute on my windows with whitespace in path.\nThis looks exactly as I proposed:\n\n\tOnly pass URI instances around instead of strings\n\tChange createURI to take the base URI as URI\n\tAdd a new createURI that takes a single string and is responsible to create aplain RI from a string, which is repository specific\n\n\n\nMaybe rename the createURI that takes a baseURI and componenets to have a different name? E.g. resolveURI? ",
            "id": "comment-15448302"
        },
        {
            "date": "2016-08-30T07:19:37+0000",
            "author": "Uwe Schindler",
            "content": "In the future, once the HDFS people created a working filesystem for Java 7, we may remove the HDFS special case, but for now its good to have. FYI: Using this new impl, it should be possible to create a backup in a zip file using the ZIP file system of Java 7+: http://docs.oracle.com/javase/8/docs/technotes/guides/io/fsp/zipfilesystemprovider.html (see second example) ",
            "id": "comment-15448306"
        },
        {
            "date": "2016-08-30T07:24:03+0000",
            "author": "Varun Thacker",
            "content": "will try it out in a minute on my windows with whitespace in path.\n\nI was thinking of maybe adding this as part of TestLocalFSCloudBackupRestore#getBackupLocation also? ",
            "id": "comment-15448315"
        },
        {
            "date": "2016-08-30T13:22:39+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nto me this looks fine. I agree, adding a separate test for the local fs that tests both variants to use the path (as URI or plain path) should be added, too.\nOn Windows with whitespace in file names I see no errors.\n\nIt is currently only that some unrelated tests fail all the time, because Noble Paul broke Hadoop on Windows. In general Jenkins is very unstable on master, no successful runs since days. ",
            "id": "comment-15448997"
        },
        {
            "date": "2016-08-30T13:28:12+0000",
            "author": "Noble Paul",
            "content": "Which ticket exactly? ",
            "id": "comment-15449012"
        },
        {
            "date": "2016-08-30T14:13:12+0000",
            "author": "Uwe Schindler",
            "content": "SOLR-9460, not sure which one caused this. But you made changes on the failing test! ",
            "id": "comment-15449119"
        },
        {
            "date": "2016-08-30T14:13:21+0000",
            "author": "Uwe Schindler",
            "content": "SOLR-9460, not sure which one caused this. But you made changes on the failing test! ",
            "id": "comment-15449122"
        },
        {
            "date": "2016-08-31T05:02:28+0000",
            "author": "Hrishikesh Gadre",
            "content": "Uwe Schindler Varun Thacker Thanks for the reviews! Let me update the patch with following changes\n\n\n\tRename createURI(URI...) method to resolveURI(...)\n\tAdd a test for verifying the whites-paces in the backup location\n\n ",
            "id": "comment-15451142"
        },
        {
            "date": "2016-09-02T00:24:16+0000",
            "author": "Hrishikesh Gadre",
            "content": "Varun Thacker Uwe Schindler I have updated the PR with above mentioned changes. Please take a look. ",
            "id": "comment-15457052"
        },
        {
            "date": "2016-09-02T07:03:27+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user uschindler commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/74#discussion_r77301896\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/cloud/TestLocalFSCloudBackupRestore.java \u2014\n    @@ -24,12 +24,20 @@\n\n\tsuch file-system would be exposed via local file-system API.\n      */\n     public class TestLocalFSCloudBackupRestore extends AbstractCloudBackupRestoreTestCase {\n    +  private static String backupLocation;\n\n\n\n       @BeforeClass\n       public static void setupClass() throws Exception {\n         configureCluster(NUM_SHARDS)// nodes\n             .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n             .configure();\n    +\n    +    boolean whitespacesInPath = random().nextBoolean();\n    +    if (whitespacesInPath) {\n    +      backupLocation = createTempDir(\"my backup\").toFile().getAbsolutePath();\n    \u2014 End diff \u2013\n\n    I'd use `backupLocation = createTempDir(...).toAbsolutePath().toString();` to get rid of legacy `java.io.File` ",
            "id": "comment-15457741"
        },
        {
            "date": "2016-09-02T07:04:22+0000",
            "author": "Uwe Schindler",
            "content": "Hi, looks fine to me! I can merge this later today. Varun Thacker? ",
            "id": "comment-15457743"
        },
        {
            "date": "2016-09-02T07:10:36+0000",
            "author": "Varun Thacker",
            "content": "Hi Uwe,\n\nWould you be committing this? ",
            "id": "comment-15457754"
        },
        {
            "date": "2016-09-02T07:14:15+0000",
            "author": "Uwe Schindler",
            "content": "OK! ",
            "id": "comment-15457763"
        },
        {
            "date": "2016-09-02T12:13:54+0000",
            "author": "Uwe Schindler",
            "content": "Here is the final patch. Committing now! ",
            "id": "comment-15458356"
        },
        {
            "date": "2016-09-02T12:15:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e138462a82800be3811017062868051c14e560e6 in lucene-solr's branch refs/heads/master from Hrishikesh Gadre\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e138462 ]\n\nSOLR-9444 Fix path usage for cloud backup/restore\n\n\n\tRefactored code using URI.getPath() API to use URI instance\n  uniformly.\n\tDuring serialization of URI instance, used toASCIIString() API\n  to generate the appropriate String representation.\n\tUpdated the unit test to use whitespaces in the backup directory path\n\n ",
            "id": "comment-15458359"
        },
        {
            "date": "2016-09-02T12:15:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d9c0f2c6b91bd97d7e17a0b6abf16cb9d0f71b52 in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d9c0f2c ]\n\nSOLR-9444: Fix path usage for cloud backup/restore\nMerge branch 'SOLR-9444_fix' of https://github.com/hgadre/lucene-solr\nThis closes #74 ",
            "id": "comment-15458360"
        },
        {
            "date": "2016-09-02T12:15:40+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d9c0f2c6b91bd97d7e17a0b6abf16cb9d0f71b52 in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d9c0f2c ]\n\nSOLR-9444: Fix path usage for cloud backup/restore\nMerge branch 'SOLR-9444_fix' of https://github.com/hgadre/lucene-solr\nThis closes #74 ",
            "id": "comment-15458361"
        },
        {
            "date": "2016-09-02T12:16:19+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user asfgit closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/74 ",
            "id": "comment-15458363"
        },
        {
            "date": "2016-09-02T12:20:43+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 83479443783e73e073362c35eb7e3ab3885be6a6 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8347944 ]\n\nSOLR-9444: Fix path usage for cloud backup/restore\nMerge branch 'SOLR-9444_fix' of https://github.com/hgadre/lucene-solr\nThis closes #74 ",
            "id": "comment-15458371"
        },
        {
            "date": "2016-09-02T12:20:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 83479443783e73e073362c35eb7e3ab3885be6a6 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8347944 ]\n\nSOLR-9444: Fix path usage for cloud backup/restore\nMerge branch 'SOLR-9444_fix' of https://github.com/hgadre/lucene-solr\nThis closes #74 ",
            "id": "comment-15458372"
        },
        {
            "date": "2016-09-12T02:48:15+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Re-opened to back-port to 6.2.1 ",
            "id": "comment-15482860"
        },
        {
            "date": "2016-09-12T09:33:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9d3a2a0879be200cc3e4a4e3c2aa0f705ee08c12 in lucene-solr's branch refs/heads/branch_6_2 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9d3a2a0 ]\n\nSOLR-9444: Fix path usage for cloud backup/restore\nMerge branch 'SOLR-9444_fix' of https://github.com/hgadre/lucene-solr\nThis closes #74\n\n(cherry picked from commit 8347944) ",
            "id": "comment-15483629"
        },
        {
            "date": "2016-09-12T09:33:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9d3a2a0879be200cc3e4a4e3c2aa0f705ee08c12 in lucene-solr's branch refs/heads/branch_6_2 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9d3a2a0 ]\n\nSOLR-9444: Fix path usage for cloud backup/restore\nMerge branch 'SOLR-9444_fix' of https://github.com/hgadre/lucene-solr\nThis closes #74\n\n(cherry picked from commit 8347944) ",
            "id": "comment-15483630"
        },
        {
            "date": "2016-09-21T03:03:26+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Closing after 6.2.1 release ",
            "id": "comment-15508548"
        }
    ]
}