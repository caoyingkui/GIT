{
    "id": "LUCENE-1370",
    "title": "Add ShingleFilter option to output unigrams if no shingles can be generated",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "2.9.3,                                            3.0.2,                                            3.1,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently if ShingleFilter.outputUnigrams==false and the underlying token stream is only one token long, then ShingleFilter.next() won't return any tokens. This patch provides a new option, outputUnigramIfNoNgrams; if this option is set and the underlying stream is only one token long, then ShingleFilter will return that token, regardless of the setting of outputUnigrams.\n\nMy use case here is speeding up phrase queries. The technique is as follows:\n\nFirst, doing index-time analysis using ShingleFilter (using outputUnigrams==true), thereby expanding things as follows:\n\n\"please divide this sentence into shingles\" ->\n \"please\", \"please divide\"\n \"divide\", \"divide this\"\n \"this\", \"this sentence\"\n \"sentence\", \"sentence into\"\n \"into\", \"into shingles\"\n \"shingles\"\n\nSecond, do query-time analysis using ShingleFilter (using outputUnigrams==false and outputUnigramIfNoNgrams==true). If the user enters a phrase query, it will get tokenized in the following manner:\n\n\"please divide this sentence into shingles\" ->\n \"please divide\"\n \"divide this\"\n \"this sentence\"\n \"sentence into\"\n \"into shingles\"\n\nBy doing phrase queries with bigrams like this, I can gain a very considerable speedup. Without the outputUnigramIfNoNgrams option, then a single word query would tokenize like this:\n\n\"please\" ->\n   [no tokens]\n\nBut thanks to outputUnigramIfNoNgrams, single words will now tokenize like this:\n\n\"please\" ->\n  \"please\"\n\n****\n\nThe patch also adds a little to the pre-outputUnigramIfNoNgrams option tests.\n\n****\n\nI'm not sure if the patch in this state is useful to anyone else, but I thought I should throw it up here and try to find out.",
    "attachments": {
        "ShingleFilter.patch": "https://issues.apache.org/jira/secure/attachment/12389206/ShingleFilter.patch",
        "LUCENE-1370.patch": "https://issues.apache.org/jira/secure/attachment/12389313/LUCENE-1370.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-08-31T13:18:40+0000",
            "content": "It's an OK filter setting if you ask me.\n\nHowever I'm curious to why you don't query for unigrams unless the input is a single token? That means you always require a 0-slop between any two tokens of the input. I know nothing about your needs, but it could be dangerous. You can always boost the bigrams a bit more than the unigrams if they cause a problem. I think you should benchmark the cost. I'm sure it's rather small and that you'll get better quality results by doing that. Users tend to never enter a query the way I want them to. ",
            "author": "Karl Wettin",
            "id": "comment-12627308"
        },
        {
            "date": "2008-08-31T19:52:05+0000",
            "content": "Karl, that's a good point about my setup being incompatible with non-0 slop. However, the performance gains I'm seeing with this patch on my data are substantial. When I last tested on the same index, same machine, same # of threads in my testing process, etc., and went from analyzing my queries with\n\noutputUnigrams==true\n\nto analyzing with\n\nusing outputUnigrams==false and outputUnigramIfNoNgrams==true\n\nphrase queries ended up performing something like 50x as fast. Which is good, because the initial performance wasn't acceptable.\n\nThe performance gains from outputUnigramIfNoNgrams were greater than those from when I instead tried moving the index to a solid state drive. (It was a a fairly entry-level SSD drive, but still.) It would be interesting to compare to moving to a machine with an obscene amount of RAM. (Not quite sure what would count as \"obscene\", but my index is 90+GB. Maybe half of that is taken up by stored fields.) ",
            "author": "Chris Harris",
            "id": "comment-12627337"
        },
        {
            "date": "2008-08-31T20:32:53+0000",
            "content": "Do you say it is 50x faster with shingle queries that only contains bigram compared to shingle queries that contains uni- and bigrams? Or is it 50x faster using shingles compared to phrase queries? (I've myself seen performance gains similar to the latter.) ",
            "author": "Karl Wettin",
            "id": "comment-12627343"
        },
        {
            "date": "2008-08-31T21:14:21+0000",
            "content": ": Do you say it is 50x faster with shingle queries that only contains bigram\n: compared to shingle queries that contains uni- and bigrams? Or is it 50x\n: faster using shingles compared to phrase queries? (I've myself seen\n: performance gains similar to the latter.)\n\nI'm not sure I totally understand you, so let me try rephrasing things. What I mean is that phrase queries that have only bigrams, like this:\n\nPhraseQuery\n{\n\"please divide\"\n\"divide this\"\n\"this sentence\"\n\"sentence into\"\n\"into shingles\"\n}\n\nrun maybe 50x as fast as phrase queries that have both bigrams and unigrams, like this:\n\nPhraseQuery\n{\n\"please\", \"please divide\"\n\"divide\", \"divide this\"\n\"this\", \"this sentence\"\n\"sentence\", \"sentence into\"\n\"into\", \"into shingles\"\n\"shingles\"\n}\n\nIf it clarifies things any further, let me say that I'm handling all quoted phrase queries with the normal PhraseQuery class; I'm not, for instance, turning quoted phrases into some kind of BooleanQuery. (Technically it's not me that's making the PhraseQuery object but Solr and its query parser. But Solr is indeed turning my quoted phrase queries into normal PhraseQuery objects.) ",
            "author": "Chris Harris",
            "id": "comment-12627348"
        },
        {
            "date": "2008-09-01T20:40:11+0000",
            "content": "Fixing to merge cleanly against changes made in r687357. The patch file will also now have a proper name, LUCENE-1370.patch. ",
            "author": "Chris Harris",
            "id": "comment-12627533"
        },
        {
            "date": "2008-09-01T20:43:42+0000",
            "content": "Getting rid of Windows-style newlines ",
            "author": "Chris Harris",
            "id": "comment-12627534"
        },
        {
            "date": "2009-09-09T18:01:34+0000",
            "content": "Updating the patch to apply successfully against r813015, and hopefully thereby against the upcoming Lucene 2.9 release. ",
            "author": "Chris Harris",
            "id": "comment-12753192"
        },
        {
            "date": "2009-09-09T18:19:18+0000",
            "content": "Any ideas on whether it will ever make sense for this patch to make it into the trunk? Some random thoughts:\n\n\n\tThe latest patch does make ShingleFilter marginally less clean. (Maybe my least favorite part is how fillShingleBuffer() is now responsible for setting firstToken; that it should do so is not obvious from the method name.)\n\tThis patch's functionality could potentially be implemented without modifying ShingleFilter itself. For example, maybe instead of patching ShingleFilter we could have a ShingleFilterUnigramWrapper class, that would delegate to ShingleFilter, except when ShingleFilter failed to produce ngrams. I'm a little worried that this would require using a CachingTokenFilter, and that might not be ideal from an efficiency perspective.\n\tIt might be good to rename outputUnigramIfNoNgrams to something like forceUnigramIfNoNgrams. With the current naming scheme, you end up setting some contradictory-sounding options, e.g. setting outputUnigrams==false and outputUnigramIfNoNgrams==true. If you look at the code this might not be confusing, but it'd be nice if it were more straightforward without making you look at the code.\n\tI gather that some people have an interest in making a minShingleSize option. (See http://www.nabble.com/shingle-filter-td25125367.html) I'm not sure how best to modify this patch should that get implemented. It might depend on the typical use cases for minShingleSize, and if there's any overlap with my use case here.\n\n ",
            "author": "Chris Harris",
            "id": "comment-12753200"
        },
        {
            "date": "2009-09-10T12:54:35+0000",
            "content": "Chris, just a small comment:\n\n\n  if (outputUnigramIfNoNgrams && firstToken == null) {\n          firstToken = captureState();\n  }\n  shingleBuf.add(captureState());\n\n\n\nhere i think you could save a clone() by not calling captureState twice?\neven though it doesnt have to recompute the state, captureState does have to clone it.\n\n(I am thinking about trying out your patch where i have some very short fields, this is why i mentioned it) ",
            "author": "Robert Muir",
            "id": "comment-12753598"
        },
        {
            "date": "2009-09-10T13:41:01+0000",
            "content": "even though it doesnt have to recompute the state, captureState does have to clone it.\n\nThe recomputation is only done once for the lifetime of the TokenStream (as far as there are no modifications in the number of attributes). The State linked list is just another representation of the instances LinkedHashMap for faster iteration during cloning (no new Iterators to create and so on). ",
            "author": "Uwe Schindler",
            "id": "comment-12753621"
        },
        {
            "date": "2009-09-10T13:49:52+0000",
            "content": "Uwe, I see... i had not looked far enough yet to see how this was done, thanks.\n\nbut i think my comment still holds true, we can save a clone() here on the first token.\nfor long fields does not matter so much, but for short fields a small savings. ",
            "author": "Robert Muir",
            "id": "comment-12753623"
        },
        {
            "date": "2009-09-10T19:53:08+0000",
            "content": "\nhere i think you could save a clone() by not calling captureState twice?\neven though it doesnt have to recompute the state, captureState does have to clone it.\n\nSo is the idea to replace\n\n\n      if (getNextToken()) {\n        if (outputUnigramIfNoNgrams && firstToken == null) {\n          firstToken = captureState();\n        }\n        shingleBuf.add(captureState());\n\n\n\nwith\n\n\n      if (getNextToken()) {\n        State curState = captureState();\n        if (outputUnigramIfNoNgrams && firstToken == null) {\n          firstToken = curState;\n        }\n        shingleBuf.add(curState);\n\n\n\nThat seems fine, unless there's some hidden reason why you can't share State objects.\n\nI'd guess you could optimize more than that, but I think you run into diminishing returns, making the code harder to read more than you're making it faster. For example:\n\n\n     if (getNextToken()) {\n        if (outputUnigramIfNoNgrams && firstToken == null) {\n          firstToken = captureState();\n          shingleBuf.add(firstToken);\n        }\n        else {\n          shingleBuf.add(captureState());\n        }\n\n ",
            "author": "Chris Harris",
            "id": "comment-12753789"
        },
        {
            "date": "2009-09-10T20:05:11+0000",
            "content": "Chris, yeah I was thinking something like your first method...\ni'm not concerned with any micro-optimization just reducing a clone if we can ) ",
            "author": "Robert Muir",
            "id": "comment-12753795"
        },
        {
            "date": "2009-09-10T20:20:22+0000",
            "content": "AttributeSource.State objects are unmodifiable (as the contents are private and so you have no access to the wrapped attributes). ",
            "author": "Uwe Schindler",
            "id": "comment-12753798"
        },
        {
            "date": "2009-09-10T23:06:59+0000",
            "content": "Update patch to avoid an unnecessary State.clone(), as suggested by Robert. ",
            "author": "Chris Harris",
            "id": "comment-12753882"
        },
        {
            "date": "2009-11-06T06:15:39+0000",
            "content": "At the risk of being annoying, is there any chance this patch (perhaps slightly refined, if you guys want) could make it into Lucene 3.0? I think I'm not the only person who wants to use the ShingleFilter in this slightly way. For example, I just noticed that the new Solr 1.4 Enterprise Search Server book (on p. 288) makes brief mention of SOLR-744, which depends on this patch. I'm fine keeping this out of the Lucene distribution if people think ShingleFilter.outputUnigrams is a silly hack and there's a better way to get the job done. But if this captures a legitimate use case, are there compelling reasons to keep it out?\n\nThanks. ",
            "author": "Chris Harris",
            "id": "comment-12774216"
        },
        {
            "date": "2009-11-06T09:29:57+0000",
            "content": "Oups, I seem to have assigned this to me and then forgotten about it. Sorry!\nI'll check it out this weekend! ",
            "author": "Karl Wettin",
            "id": "comment-12774252"
        },
        {
            "date": "2009-11-11T07:58:05+0000",
            "content": "Karl, are you working on this? Seems like this should not block 3.0 - feel free to move it to 3.1\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12776350"
        },
        {
            "date": "2009-11-14T22:16:52+0000",
            "content": "This patch is very straightforward, I think we could add it to 3.0, too. But 3.0 should not conatin new features, so move to 3.1? ",
            "author": "Uwe Schindler",
            "id": "comment-12778003"
        },
        {
            "date": "2009-11-16T08:40:31+0000",
            "content": "I move this to 3.1 as it is a new feature. ",
            "author": "Uwe Schindler",
            "id": "comment-12778260"
        },
        {
            "date": "2010-10-05T20:40:29+0000",
            "content": "I think this patch is really important to get into 3.x and trunk... \n\nits a dead simple way (analysis configuration only) for folks to get a massive performance improvement for phrasequeries. ",
            "author": "Robert Muir",
            "id": "comment-12918155"
        },
        {
            "date": "2010-10-06T00:21:37+0000",
            "content": "The previous patch predates the rewrite ShingleFilter was subjected to as a result of LUCENE-2218, so it needed to be rejiggered somewhat.\n\nChanges from the previous patch:\n\n\n\tThe new patch simply enables unigram output if the number of input tokens is less than minShingleSize.  The existing code then handles the situation appropriately, and reset() restores the original unigram output option.\n\tI renamed the option \"outputUnigramIfNoNgrams\" to \"outputUnigramsIfNoShingles\", because:\n\t\n\t\tUnigram -> Unigrams: the output could result in more than one unigram if minShingleSize is greater than the default 2; and\n\t\tNgrams -> Shingles: for consistency with the class's name.\n\t\n\t\n\tI renamed \"returnedAnyTokensYet\" to \"noShingleOutput\", and reversed its (boolean) sense, because:\n\t\n\t\tunigrams should be output only if no shingles can be output, rather than no tokens; and\n\t\treversing the sense allowed the test using it to avoid negation, and allowed the name to be shorter.\n\t\n\t\n\tI added a note to the setOutputUnigramsIfNoShingles() method javadoc to the effect that if outputUnigram == true, unigrams will always be output regardless of the setting of outputUnigramsIfNoShingles.\n\tI added a test that makes sure that when minShingleSize > 2 and the number of input tokens is less than minShingleSize, (multiple) unigrams are output\n\n ",
            "author": "Steve Rowe",
            "id": "comment-12918349"
        },
        {
            "date": "2010-10-06T00:46:53+0000",
            "content": "Added lucene/CHANGES.txt entry, and slightly modified reset() code switching back the unigram output option.\n\nAll tests pass.\n\nIf there are no objections, I'll commit this in a couple of days.\n\nedit: I added an entry to *modules/analysis/*CHANGES.txt, not *lucene/*CHANGES.txt ",
            "author": "Steve Rowe",
            "id": "comment-12918358"
        },
        {
            "date": "2010-10-06T01:36:06+0000",
            "content": "Looks good to me, I tested it and had no problems.\n\nMaybe we should add the option to ShingleAnalyzerWrapper too? \nThis would be very convenient for Lucene users. ",
            "author": "Robert Muir",
            "id": "comment-12918378"
        },
        {
            "date": "2010-10-06T05:19:20+0000",
            "content": "Looks good to me, I tested it and had no problems.\n\nThanks for testing, Robert.\n\nMaybe we should add the option to ShingleAnalyzerWrapper too?\n\nYes, I missed that one - I've added support for it in this version of the patch, along with one test in ShingleAnalyzerWrapperTest (for the single-token case). ",
            "author": "Steve Rowe",
            "id": "comment-12918424"
        },
        {
            "date": "2010-10-09T17:44:20+0000",
            "content": "Committed: trunk revision 1006187, branch_3x revision 1006195 ",
            "author": "Steve Rowe",
            "id": "comment-12919519"
        },
        {
            "date": "2011-03-30T15:50:07+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013371"
        }
    ]
}