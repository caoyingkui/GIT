{
    "id": "LUCENE-1608",
    "title": "CustomScoreQuery should support arbitrary Queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/query/scoring"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "CustomScoreQuery only allows the secondary queries to be of type ValueSourceQuery instead of allowing them to be any type of Query. As a result, what you can do with CustomScoreQuery is pretty limited.\n\nIt would be nice to extend CustomScoreQuery to allow arbitrary Query objects. Most of the code should stay about the same, though a little more care would need to be taken in CustomScorer.score() to use 0.0 when the sub-scorer does not produce a score for the current document.",
    "attachments": {
        "CustomScoreQueryWithSubqueries.java": "https://issues.apache.org/jira/secure/attachment/12470750/CustomScoreQueryWithSubqueries.java",
        "LUCENE-1608.patch": "https://issues.apache.org/jira/secure/attachment/12406169/LUCENE-1608.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-21T23:18:36+0000",
            "content": "This is probably related to my attempt at refactoring DisjunctionMaxQuery to be a query that performs an arbitrary function on its constituent subqueries.   ",
            "author": "Mike Klaas",
            "id": "comment-12701315"
        },
        {
            "date": "2009-04-22T21:08:53+0000",
            "content": "I thought I had written a class exactly for this purpose but I was wrong - my class was different in that it had an actual value source, just that it was sparse - values for quite many docs were missing. It is similar in a way, but different since here the input is a query.\n\nBut I did promise... so I wrote a quick wrapper for a query to create a value source.\nThat value source can be used to create a value source query.\n\nAlthough the patch coming soon is tested and all, I am not considering to commit this patch, because it is not clean. \n\nI would like to reorganize this package to take better care of this request and other related issues (like LUCENE-850) and to make it worth for Solr to move to use this package. (last time I checked it wasn't). But this is a different issue... ",
            "author": "Doron Cohen",
            "id": "comment-12701683"
        },
        {
            "date": "2009-04-22T21:21:02+0000",
            "content": "Patch for passing arbitrary queries to custom-score-query.\nNot intended for committing.\nSee TestQueryWrapperValueSource for usage of this wrapper.\n\n\tDoron\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12701687"
        },
        {
            "date": "2009-05-13T18:52:00+0000",
            "content": "Sorry it took so long for me to try this out, but yes, this does exactly what I need. I'd love to see the package reorganized so that this kind of thing would be easier. I'm far from a Lucene expert, but if there's anything I can do to help, let me know and I'll try to make some time for it. ",
            "author": "Steven Bethard",
            "id": "comment-12709068"
        },
        {
            "date": "2011-02-10T01:23:33+0000",
            "content": "I upload a class (for demonstration purposes only, is not clean enough for a patch, that is why is not one) that allows secondary queries to be any type of query, not only ValueSourceQuery. For example, the main query could be (field1:value OR field2:value) and one secondary query (field3:anotherValue). There are more optimizations to be done on this class: continuing the previous example, if the secondary query would be (field1:value), then some type of \"scorer cache\" would be useful in order to avoid keeping two scorers for the same query (first clause in main query and secondary query). Comments are more than welcome. ",
            "author": "Fernando Wasylyszyn",
            "id": "comment-12992826"
        }
    ]
}