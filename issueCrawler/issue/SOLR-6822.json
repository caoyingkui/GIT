{
    "id": "SOLR-6822",
    "title": "Block Join duplicates when _root_ is different type than uniqueKey",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "If you have in your setup _ root _ a different type than your uniqueKey, when you update blocks with the same id, you start getting duplicates of the entire block. So if you have parent->child->grandchild and update the block with the same or different children you will have both blocks in their entirety still in the index found with \"star\":\"star\"\n\nThis can further create weirdness when doing calls from different shards as a call to the shard itself will give back all results... a call to a different shard with shards=dupeshard will take out the duplicates being sent for rows=x and affects the numFound and total docs returned if there are dupes in the rows being returned. So it is not consistent.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-05T00:23:46+0000",
            "author": "Erik Hatcher",
            "content": "It seems like this code in DirectUpdateHandler2\n\n\nTerm idTerm = new Term(cmd.isBlock() ? \"_root_\" : idField.getName(), cmd.getIndexedId());\n\n\n\n should use getPrintableId() instead of getIndexedId() ",
            "id": "comment-14234830"
        },
        {
            "date": "2014-12-05T00:47:05+0000",
            "author": "Yonik Seeley",
            "content": "should use getPrintableId() instead of getIndexedId()\n\nThis is directly constructing a term query though... it won't be run through any further analysis and thus needs to exactly match the indexed term. ",
            "id": "comment-14234851"
        },
        {
            "date": "2014-12-05T00:54:42+0000",
            "author": "Erik Hatcher",
            "content": "But if id is string and _ root _ is int, the actual bytes indexed will be different, and thus the printable/string version is needed for the TermQuery.  No?  Granted, we shouldn't allow for that, and there is a comment to that effect in there as well sdoc.setField(\"root\", idField);      // should this be a string or the same type as the ID? - maybe we can make this a schema initialization error if those two fields don't match type like they should? ",
            "id": "comment-14234860"
        },
        {
            "date": "2014-12-05T01:01:49+0000",
            "author": "Yonik Seeley",
            "content": "Ah, ok, I see what you're saying.  We're going cross-fields, so if  _root_ is a string, then we should use printable (or however we got the value into _root_ in the first place).  Frankly I now dislike all the configurability and wish that the uniqueKey was always called \"id\" and was of type \"string\".  Convention over configuration! ",
            "id": "comment-14234868"
        }
    ]
}