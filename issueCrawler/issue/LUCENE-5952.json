{
    "id": "LUCENE-5952",
    "title": "Give Version parsing exceptions more descriptive error messages",
    "details": {
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "4.10",
        "status": "Closed",
        "fix_versions": [
            "4.10.1",
            "5.0",
            "6.0"
        ]
    },
    "description": "As discussed on the dev list, it's spooky how Version.java tries to fully parse the incoming version string ... and then throw exceptions that lack details about what invalid value it received, which file contained the invalid value, etc.\n\nIt also seems too low level to be checking versions (e.g. is not future proof for when 4.10 is passed a 5.x index by accident), and seems redundant with the codec headers we already have for checking versions?\n\nShould we just go back to lenient parsing?",
    "attachments": {
        "LUCENE-5952.patch": "https://issues.apache.org/jira/secure/attachment/12668891/LUCENE-5952.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14134438",
            "author": "Ryan Ernst",
            "content": "The reason I added this check was to satisfy an existing test that parse would fail if passed a version like 1.0.  So it was not completely lenient before, but I have no problem with allowing Version.java to take any version, and letting the code consuming version to decide whether the version is acceptable. ",
            "date": "2014-09-15T20:33:56+0000"
        },
        {
            "id": "comment-14134490",
            "author": "Michael McCandless",
            "content": "In fact it wasn't lenient before at all ... it used Version.valueOf (and Version was an enum) so that would also hit IAE for any invalid versions (i.e. that did not have an exact matching enum constant)...\n\nI think for this issue I'll just try to improve the error reporting when there is a problem... ",
            "date": "2014-09-15T21:13:26+0000"
        },
        {
            "id": "comment-14134624",
            "author": "Michael McCandless",
            "content": "Patch, applies to 4.10.x.\n\nI improved the error handling in Version.java to more clearly say what\noffending value had been passed in, and various places that were\ncalling Version.parse to say which resource/fileName they had read the\nversion from and to throw CorruptIndexException.\n\nI also removed the two deprecated SegmentInfo ctors that took String\nversion and parsed it (we are allowed to just change this API: it's\nexperimental).\n\nI also fixed Version.java to not pass judgement on the major version,\nso we remain future proof. ",
            "date": "2014-09-15T22:41:09+0000"
        },
        {
            "id": "comment-14134649",
            "author": "Uwe Schindler",
            "content": "I think we still have to restrict major to be in the valid range, otherwise the encodedValue may overflow. So major should be between 0 and 255, right?\n\nOtherwise looks fine! ",
            "date": "2014-09-15T22:56:36+0000"
        },
        {
            "id": "comment-14134654",
            "author": "Uwe Schindler",
            "content": "Just a suggestion: Can we add a fake index with a version number of \"6.1.0\" to see if you correctly get IndexTooNewException and not an IAE? Could be added to TestBackwardsCompatibility!  Just a ZIP file, but hack the write code temporarily to pass a fake string. ",
            "date": "2014-09-15T23:00:21+0000"
        },
        {
            "id": "comment-14134657",
            "author": "Robert Muir",
            "content": "Wait, it was lenient before. It was just a string. Unrelated to version.java in any way. ",
            "date": "2014-09-15T23:02:31+0000"
        },
        {
            "id": "comment-14134667",
            "author": "Uwe Schindler",
            "content": "Wait, it was lenient before. It was just a string. Unrelated to version.java in any way.\n\nVersion.java was not lenient at all. In the past Version.java was very strict (only allowed the constants). For parsing index version numbers we used another comparator, which was lenient and accepted any version number to compare (like the Maven version comparator). Now its both in one class and therefore we have to relax Version.java more, to be future proof.\n\nBefore it was enum, now its a simple class with some additional bounds on major version. We just have to remove the major version constraint.\n\nIn my opinion, we should not save index version as string at all and instead save the \"encoded value\" as an (v)int. ",
            "date": "2014-09-15T23:07:19+0000"
        },
        {
            "id": "comment-14135132",
            "author": "Michael McCandless",
            "content": "I think we still have to restrict major to be in the valid range, otherwise the encodedValue may overflow. So major should be between 0 and 255, right?\n\nAhh good, I'll do that.\n\nJust a suggestion: Can we add a fake index with a version number of \"6.1.0\" to see if you correctly get IndexTooNewException and not an IAE? \n\nSo I built this 6.1.0 index (by hacking up a trunk checkout) and CheckIndex (also on trunk) happily checked the index without complaints!  I agree we should try to somehow test forwards compatibility ... but I'd rather explore that on a separate issue?  I'll open one.\n\nIn my opinion, we should not save index version as string at all and instead save the \"encoded value\" as an (v)int.\n\nI agree ... I'll fix Lucene46SegmentInfoWriter/Reader to write as int ... I think I'll use separate vInts: I don't like tying this \"encoded format\" (stuffing 4 ints that are actually bytes into 1 int) to the index format. ",
            "date": "2014-09-16T08:18:31+0000"
        },
        {
            "id": "comment-14135136",
            "author": "Michael McCandless",
            "content": "Wait, it was lenient before.\n\nRight, SegmentInfo.getVersion was lenient before, i.e. we read a String and left it as a String in SegmentInfo.  But then we needed to \"compare leniently\" which was also scary ... ",
            "date": "2014-09-16T08:29:18+0000"
        },
        {
            "id": "comment-14135164",
            "author": "Michael McCandless",
            "content": "Another patch folding in feedback ... I cutover to using 4 ints to write Version into .si. ",
            "date": "2014-09-16T09:01:41+0000"
        },
        {
            "id": "comment-14135165",
            "author": "Uwe Schindler",
            "content": "I agree ... I'll fix Lucene46SegmentInfoWriter/Reader to write as int ... I think I'll use separate vInts: I don't like tying this \"encoded format\" (stuffing 4 ints that are actually bytes into 1 int) to the index format.\n\nYeah, we should maybe add a method to Version that writes itsself to a DataOutput: Version.writeVersion(DataOutput) and Version.readVersion(DataInput).\n\nIn any case, this is a separate issue, because it involves a index format change, that we should not do in 4.10.1. I would suggest to change this for the coming 5.0. ",
            "date": "2014-09-16T09:01:50+0000"
        },
        {
            "id": "comment-14135205",
            "author": "Michael McCandless",
            "content": "Yeah, we should maybe add a method to Version that writes itsself to a DataOutput: Version.writeVersion(DataOutput) and Version.readVersion(DataInput).\n\nI didn't like that option either, because this (serialization formats) is not Version's burden to bear.\n\nE.g. what if we want to later change that format it wrote?  We already put this burden on the codec formats, so I think leaving the burden in Lucene46SegmentInfoFormat is the right place...\n\nIn any case, this is a separate issue, because it involves a index format change, that we should not do in 4.10.1. I would suggest to change this for the coming 5.0.\n\nI don't think this should wait for 5.0?  I think it's dangerous/fragile relying on string parsing to rebuild the Version when we open IndexReaders... ",
            "date": "2014-09-16T09:48:26+0000"
        },
        {
            "id": "comment-14135225",
            "author": "Uwe Schindler",
            "content": "I don't think this should wait for 5.0\n\nJust not in 4.10.1, we just have a bugfix release and the whole thing did not change since 4.0. We can change that for 4.11, but as Robert suggested to release 4.11 as 5.0 (after copy branch and merge some more stuff in), I wrote \"5.0\".\n\nwhat if we want to later change that format it wrote? We already put this burden on the codec formats, so I think leaving the burden in Lucene46SegmentInfoFormat is the right place...\n\nI am fine with that too. To me writing a version is like writing a String in DataOutput, which is also a method outside of codecs. ",
            "date": "2014-09-16T10:06:18+0000"
        },
        {
            "id": "comment-14135230",
            "author": "Robert Muir",
            "content": "I don't think its useful for Version to be picky here in any way.\n\nthis stuff only even executes if we successfully loaded the codec (Codec.forName) and then invoked its .si reader. If Codec.forName succeeded then we should be supporting the index.\n\nAlso, if a user has a 4.3 index and they go to 4.3.1 and the format hasnt changed, why prevent them from rolling backwards to 4.3? There is no need for that.\n\n-1 to it throwing IndexFormatTooOld/New for this reasons from here. It makes no sense. ",
            "date": "2014-09-16T10:12:03+0000"
        },
        {
            "id": "comment-14135236",
            "author": "Uwe Schindler",
            "content": "-1 to it throwing IndexFormatTooOld/New for this reasons from here. It makes no sense.\n\nSame here. ",
            "date": "2014-09-16T10:14:57+0000"
        },
        {
            "id": "comment-14135386",
            "author": "Michael McCandless",
            "content": "\nI don't think this should wait for 5.0\nJust not in 4.10.1, we just have a bugfix release and the whole thing did not change since 4.0. We can change that for 4.11, but as Robert suggested to release 4.11 as 5.0 (after copy branch and merge some more stuff in), I wrote \"5.0\".\n\nOK I see...\n\nI'll revert that change here (for 4.10.1) but put it back when I port to 4.x / 5.0.\n\n-1 to it throwing IndexFormatTooOld/New for this reasons from here. It makes no sense.\n\nI agree ... ",
            "date": "2014-09-16T12:54:05+0000"
        },
        {
            "id": "comment-14135393",
            "author": "Michael McCandless",
            "content": "New patch, reverting the index format change.\n\nSo this change amounts to improving the error messaging when there is a problem in parsing the version, and to fixing Version not to pass judgement on major version numbers. ",
            "date": "2014-09-16T13:06:51+0000"
        },
        {
            "id": "comment-14135396",
            "author": "Robert Muir",
            "content": "\nWe can change that for 4.11, but as Robert suggested to release 4.11 as 5.0 (after copy branch and merge some more stuff in), I wrote \"5.0\".\n\nWhich i thought would be a nice compromise: giving us a java 8 trunk, but delaying it till 6.x, clearing out trunk from all the crazy back compat, FINALLY dropping 3.x support in the stable branch (5.x), and giving users a 5.0 release with lots of features, but keeping controversial stuff in 6.x for more time to bake.\n\nToo bad not even one person replied, so i have no idea what we are doing currently. ",
            "date": "2014-09-16T13:09:49+0000"
        },
        {
            "id": "comment-14135407",
            "author": "Robert Muir",
            "content": "is it possible to change this parse to throw a checked exception (ParseException would be good) instead of IllegalArgumentException?\n\nThis would enforce that callers are doing the right thing. ",
            "date": "2014-09-16T13:19:46+0000"
        },
        {
            "id": "comment-14135424",
            "author": "Uwe Schindler",
            "content": "java.text.ParseException? ",
            "date": "2014-09-16T13:32:45+0000"
        },
        {
            "id": "comment-14135426",
            "author": "Robert Muir",
            "content": "Yes, its the correct one here. ",
            "date": "2014-09-16T13:34:51+0000"
        },
        {
            "id": "comment-14135475",
            "author": "Michael McCandless",
            "content": "Good idea, I'll cutover to java.text.ParseException. ",
            "date": "2014-09-16T14:04:11+0000"
        },
        {
            "id": "comment-14135659",
            "author": "Michael McCandless",
            "content": "New patch, cutting over to ParseException from the parse methods ... I\nkept IllegalArgumentException in the [private] ctors.\n\nAlso, I cutover to StringTokenizer from String.split ... the later\nmakes me a bit nervous, and there are spooky changes in Java 8, e.g. \nhttp://stackoverflow.com/questions/22718744/why-does-split-in-java-8-sometimes-remove-empty-strings-at-start-of-result-array\n\nFinally I marked these parse methods as @lucene.internal. ",
            "date": "2014-09-16T16:16:28+0000"
        },
        {
            "id": "comment-14135688",
            "author": "Uwe Schindler",
            "content": "Can we change the unreadable (nextToken() == false) to (!nextToken())? ",
            "date": "2014-09-16T16:43:21+0000"
        },
        {
            "id": "comment-14135712",
            "author": "Ryan Ernst",
            "content": "I like the == false, it is so easy to lose a single ! character when reading.. ",
            "date": "2014-09-16T16:57:48+0000"
        },
        {
            "id": "comment-14135892",
            "author": "Uwe Schindler",
            "content": "I am happy with == false for more complex constructs, but this makes it hard to read because the API developer had another idea of how the code should look like. When I read that code it tooks me several branches in my own main processor to understand what that meen, because its unnatureal. The offical Sun/Oracle Code guidelines for Java also forbid this.\n\nIf you are afraid to loose the Unable to render embedded object: File (, just invert the if construct completely (thats what I mostly do) not found.)\n\nFYI: If I see the first one writing a TokenStream like:\n\nif (incrementToken() == false) ...\n\n\nI will stop working on Lucene! Trust me! Really!  ",
            "date": "2014-09-16T18:26:06+0000"
        },
        {
            "id": "comment-14135899",
            "author": "Ryan Ernst",
            "content": "I agree.  If there is an if/else, putting the \"positive\" logic first is good. ",
            "date": "2014-09-16T18:27:57+0000"
        },
        {
            "id": "comment-14136208",
            "author": "Michael McCandless",
            "content": "In general I agree that positive logic should go first but I think in\nthis case it makes the code worse: it would add 2 levels of nesting,\nwith the else (to throw the exceptions) way at the end of the method.\n\nUwe Schindler do you feel so strongly about this code styling that it will\ncause you to otherwise veto this change?  If so I will switch to\n!.\n\nAnd are there any technical (not just code styling) feedback on the\nlast patch?  I'd like to commit this soon: it is blocking 4.10.1. ",
            "date": "2014-09-16T21:00:22+0000"
        },
        {
            "id": "comment-14136273",
            "author": "Ryan Ernst",
            "content": "Patch looks good to me.  One minor favor: can you change Version.LUCENE_CURRENT to Version.LATEST? So that the forward port to branch_4x/trunk does not add a new use of it (there all uses have been removed). ",
            "date": "2014-09-16T21:33:06+0000"
        },
        {
            "id": "comment-14136294",
            "author": "Michael McCandless",
            "content": "Thank Ryan Ernst will do. ",
            "date": "2014-09-16T21:41:31+0000"
        },
        {
            "id": "comment-14136863",
            "author": "Uwe Schindler",
            "content": "Uwe Schindler do you feel so strongly about this code styling that it will cause you to otherwise veto this change? If so I will switch to \"!\".\n\nI don't veto that change, I am just unhappy. Its hard to read, thats all, and is not the intention of the API developer. I have no problem with commiting it, but be prepared to have it changed the next I time I have to somehow touch that code! \n\nNegating a simple method call should always be done with \"!\", especially if the method name is something that reads \"fluent\", Ryan's argument is not an issue (in my opinion - if it is an issue, define a method:\n\nUtils.not(boolean b) { return !b; }\n\n\n\nI agree, for stuff like if (!(a instanceof b)), I tend to invert the logic instead. ",
            "date": "2014-09-17T06:48:30+0000"
        },
        {
            "id": "comment-14137286",
            "author": "Uwe Schindler",
            "content": "Hi,\none thing about the new Code using StringTokenizer. Beware of this issue: http://stackoverflow.com/questions/11409320/java-stringtokenizer-nexttoken-skips-over-empty-fiels. The reason for this is \"A token is a maximal sequence of consecutive characters that are not delimiters.\"\n\nIn fact, StringTokenizer removes empty tokens. Wth the new code this \"4..9.0\" would be parsed as \"4.9.0\".\n\nIf you think there might be a bug in Java 8's String.split, I would use a regex and capturing groups. Like the Parser for LUCENE_xxx constants. Or alternatively, loop over the string and do if (ch == '.') ... like stuff. I have a custom StringTokenizer using a StringBuilder internally, which does not remove empty tokens. ",
            "date": "2014-09-17T14:09:13+0000"
        },
        {
            "id": "comment-14137295",
            "author": "Uwe Schindler",
            "content": "I found this one I implemented long time ago (its more than 10 years old and still in use, because faster than String.split):\n\n\npublic final class StrictStringTokenizer {\n\n    public StrictStringTokenizer(String s, char delimiter) {\n        this.s=s;\n        this.delimiter=delimiter;\n    }\n\t\n    public final String nextToken() {\n        if (pos<0) return \"\";\n        int pos1=s.indexOf(delimiter,pos);\n        String s1;\n        if (pos1>=0) {\n            s1=s.substring(pos,pos1);\n            pos=pos1+1;\n        } else {\n            s1=s.substring(pos);pos=-1;\n        }\n        return s1;\n    }\n\t\n    public final boolean hasMoreTokens() {\n        return (pos>=0);\n    }\n\t\n    // add your data members here\n    private final String s;\n    private final char delimiter;\n    private int pos=0;\n}\n\n\n\nIts a drop-in replacement for StringTokenizer. Maybe remove the \"return empty token if after last\" and throw NoSuchElement. ",
            "date": "2014-09-17T14:15:39+0000"
        },
        {
            "id": "comment-14137307",
            "author": "Uwe Schindler",
            "content": "At least we should also add a test that \"4..9.0\" fails to parse. ",
            "date": "2014-09-17T14:24:13+0000"
        },
        {
            "id": "comment-14137317",
            "author": "Michael McCandless",
            "content": "I like the StrictStringTokenizer!  I'll cutover ... and I'll add 4..9.0 test case. ",
            "date": "2014-09-17T14:29:32+0000"
        },
        {
            "id": "comment-14138131",
            "author": "Michael McCandless",
            "content": "New patch, cutting over to Uwe's tokenizer ... I think it's ready. ",
            "date": "2014-09-17T22:34:29+0000"
        },
        {
            "id": "comment-14138176",
            "author": "Ryan Ernst",
            "content": "+1 ",
            "date": "2014-09-17T23:11:25+0000"
        },
        {
            "id": "comment-14138987",
            "author": "ASF subversion and git services",
            "content": "Commit 1625990 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1625990 ]\n\nLUCENE-5944: Remove useless test (will be fixed soon by LUCENE-5952) ",
            "date": "2014-09-18T14:17:05+0000"
        },
        {
            "id": "comment-14138989",
            "author": "ASF subversion and git services",
            "content": "Commit 1625991 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1625991 ]\n\nLUCENE-5944: Remove useless test (will be fixed soon by LUCENE-5952) ",
            "date": "2014-09-18T14:17:37+0000"
        },
        {
            "id": "comment-14139024",
            "author": "Uwe Schindler",
            "content": "+1\n(it would be good to commit this soon, because in Lucene trunk - version 6 now - I had to hack Version a bit to prevent failures). ",
            "date": "2014-09-18T14:56:48+0000"
        },
        {
            "id": "comment-14139062",
            "author": "ASF subversion and git services",
            "content": "Commit 1626006 from Michael McCandless in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1626006 ]\n\nLUCENE-5952: better error messages when version fails to parse; use simpler string tokenizer; don't check major versions at such a low level ",
            "date": "2014-09-18T15:29:33+0000"
        },
        {
            "id": "comment-14139255",
            "author": "ASF subversion and git services",
            "content": "Commit 1626038 from Michael McCandless in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1626038 ]\n\nLUCENE-5952: use short-cutting boolean ops ",
            "date": "2014-09-18T17:56:05+0000"
        },
        {
            "id": "comment-14140201",
            "author": "Michael McCandless",
            "content": "Here's the patch to port the fix to 5.x.\n\nThe only change vs 4.10.x is that I changed Lucene46SegmentInfoFormat/Writer/Reader to explicitly encode the 4 ints in Version, instead of relying on String parsing at read time.  I added Version.write/Version.read static methods for this, though it makes me somewhat nervous having them there outside of the scope of a \"format\"... I put a NOTE that this format can never be changed. ",
            "date": "2014-09-19T08:53:59+0000"
        },
        {
            "id": "comment-14140237",
            "author": "Uwe Schindler",
            "content": "Why is Version.write static? Version.read() is static like Version.parse() because it creates a new Version, but write should write \"this\" as version?\n\nIn any case, I dont think a Format change is needed. To me this version number is static like the codec header, what should you change?\nAn alternative would be to put both static methods into CodecUtils, but this would also not help with changes in format. ",
            "date": "2014-09-19T09:26:45+0000"
        },
        {
            "id": "comment-14141633",
            "author": "Robert Muir",
            "content": "thanks for beefing this up. the .si file is really centric to the segment, so any safety we can add is good.\n\nA few questions:\n\n\tCan we encode 3 ints instead of 4? As far as I know, the 'prerelease' was added to support 4.0-alpha/4.0-beta. This was confusing (my fault), and this confusion ultimately worked its way into an index corruption bug. I think we should try to contain it to 4.0 instead and not keep things complicated like that.\n\tCan we consider just making a new 5.0 si writer? its a pain to bump the codec version, but I'll do the work here. We can remove conditionals like 'supports checksums' as well.\n\tI agree we should put these methods in CodecUtil (CodecUtil.readVersion, writeVersion). To answer Uwe's questions about why a format change is needed for the version, IMO its way better to encode this in a way that does not require parsing,.\n\n\n\nWe can followup with this by improving the exceptions for tiny \"slurp-in\" classes like this (I would personally, as in do the work, also fix .fnm, segments_N, .nvm, .dvm, .fdt, .tvx as well). I would add a CodecUtil.addSuppressedChecksum or something, to easily allow these guys to 'annotate' any exc on init with checksum failure information. These are small but important and it would help considering we are dodging challenges like JVM bugs here.\n\nI also want to bump 5.0 codec anyway, to fix the bug where Lucene42TermVectorsFormat uses the same codecName as Lucene41StoredFieldsFormat in the codec header, thats a stupid bug we should fix. ",
            "date": "2014-09-20T01:01:05+0000"
        },
        {
            "id": "comment-14142316",
            "author": "Ryan Ernst",
            "content": "I agree we should put these methods in CodecUtil (CodecUtil.readVersion, writeVersion)\n\nIMO they should be part of the Version class, so that the constructor can stay private.  No one should be constructing Versions, they should be using the constants, or parsing/reading them. ",
            "date": "2014-09-21T03:33:11+0000"
        },
        {
            "id": "comment-14142361",
            "author": "Robert Muir",
            "content": "That does not really matter, or hurt anything. Scattering our index format across tons of files? No thanks, that is a real price. ",
            "date": "2014-09-21T06:47:36+0000"
        },
        {
            "id": "comment-14142373",
            "author": "Michael McCandless",
            "content": "An alternative would be to put both static methods into CodecUtils, but this would also not help with changes in format.\n\nOr I can make the SIWriter do its own (private) thing.  Yeah, that's an \"abstraction violation\" (public Version ctor), and, yeah, future places that need to write/read versions constants (e.g. LUCENE-5954) will have to dup this code, but then the format is clearly owned by that writer/reader.  Already we are debating 4 vs 3 ints (format change...).\n\nCan we encode 3 ints instead of 4? As far as I know, the 'prerelease' was added to support 4.0-alpha/4.0-beta. This was confusing (my fault), and this confusion ultimately worked its way into an index corruption bug. I think we should try to contain it to 4.0 instead and not keep things complicated like that.\n\nOK... but should we never expect to use prerelease anymore (e.g 5.0)?\n\nCan we consider just making a new 5.0 si writer? its a pain to bump the codec version, but I'll do the work here. We can remove conditionals like 'supports checksums' as well.\n\n+1\n\nSeparately we should make it easier to roll a new Codec version ... it's bad if it's \"daunting\" since it pressures us to hide biggish changes under the existing writers.\n\nWe can followup with this by improving the exceptions for tiny \"slurp-in\" classes like this (I would personally, as in do the work, also fix .fnm, segments_N, .nvm, .dvm, .fdt, .tvx as well). I would add a CodecUtil.addSuppressedChecksum or something, to easily allow these guys to 'annotate' any exc on init with checksum failure information. These are small but important and it would help considering we are dodging challenges like JVM bugs here.\n\nBig +1: this would mean on any strange exc when reading these files, we would also see if (in addition) their checksum did or did not match?  This saves the extra hassle of asking user to run CheckIndex to figure out if that file was corrupt...\n\nI also want to bump 5.0 codec anyway, to fix the bug where Lucene42TermVectorsFormat uses the same codecName as Lucene41StoredFieldsFormat in the codec header, thats a stupid bug we should fix.\n\nOK.\n\nI think I'll break out the format change from this issue, and leave this as just improving the Version error messages, having it not judge major version, etc... I'll open a new issue for Lucene50Codec. ",
            "date": "2014-09-21T07:56:25+0000"
        },
        {
            "id": "comment-14142374",
            "author": "Michael McCandless",
            "content": "I opened LUCENE-5969 for the 5.0 codec. ",
            "date": "2014-09-21T07:58:59+0000"
        },
        {
            "id": "comment-14142376",
            "author": "ASF subversion and git services",
            "content": "Commit 1626536 from Michael McCandless in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1626536 ]\n\nLUCENE-5952: String.split seems to be OK in 1.8.0_20 ",
            "date": "2014-09-21T08:03:07+0000"
        },
        {
            "id": "comment-14142393",
            "author": "ASF subversion and git services",
            "content": "Commit 1626546 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1626546 ]\n\nLUCENE-5952: better error messages when version fails to parse; use simpler string tokenizer; don't check major versions at such a low level ",
            "date": "2014-09-21T09:22:26+0000"
        },
        {
            "id": "comment-14142396",
            "author": "ASF subversion and git services",
            "content": "Commit 1626550 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1626550 ]\n\nLUCENE-5952: better error messages when version fails to parse; use simpler string tokenizer; don't check major versions at such a low level ",
            "date": "2014-09-21T09:44:12+0000"
        },
        {
            "id": "comment-14142397",
            "author": "ASF subversion and git services",
            "content": "Commit 1626551 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1626551 ]\n\nLUCENE-5952: remove dead writer.version parsing code ",
            "date": "2014-09-21T09:46:34+0000"
        },
        {
            "id": "comment-14142398",
            "author": "ASF subversion and git services",
            "content": "Commit 1626552 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1626552 ]\n\nLUCENE-5952: remove dead writer.version parsing code ",
            "date": "2014-09-21T09:47:26+0000"
        },
        {
            "id": "comment-14142400",
            "author": "ASF subversion and git services",
            "content": "Commit 1626553 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1626553 ]\n\nLUCENE-5952: remove dead writer.version parsing code ",
            "date": "2014-09-21T09:47:55+0000"
        },
        {
            "id": "comment-14142401",
            "author": "Michael McCandless",
            "content": "Fixed ... we can iterate on the format change in LUCENE-5969. ",
            "date": "2014-09-21T09:48:26+0000"
        },
        {
            "id": "comment-14151042",
            "author": "Michael McCandless",
            "content": "Bulk close for Lucene/Solr 4.10.1 release ",
            "date": "2014-09-28T09:03:56+0000"
        },
        {
            "id": "comment-14185735",
            "author": "Dave Borowitz",
            "content": "This patch in Lucene 4.10.1 breaks code that used to compile under 4.10.0, which could safely assume Version.parse(Leniently) throws no exceptions. Is backwards incompatibility in a bugfix release common, or was this an oversight? ",
            "date": "2014-10-27T20:19:31+0000"
        },
        {
            "id": "comment-14186537",
            "author": "Michael McCandless",
            "content": "Hi Dave,\n\nYou're right, and I'm sorry about this violation of our back compat policy.\n\nBut it was in fact done intentionally and we made an exception here: the API is really intended for internal use (marked @lucene.internal as of 4.10.2).\n\nAlso, in 4.10.1 it was already throwing an IllegalArgumentException if you pass it an un-parseable version string; the change to the checked ParseException just means you must now explicitly handle this possible serious error. ",
            "date": "2014-10-28T07:52:47+0000"
        }
    ]
}