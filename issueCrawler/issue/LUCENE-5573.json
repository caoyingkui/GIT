{
    "id": "LUCENE-5573",
    "title": "Deadlock during class loading/ initialization",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ]
    },
    "description": "It's always worth looking into those randomized failures. \n\nhttp://builds.flonkings.com/job/Lucene-trunk-Linux-Java7-64-test-only/81259/console\n\nLog quote:\n\n[junit4]   2> ==== jstack at approximately timeout time ====\n   [junit4]   2> \"Lucene Merge Thread #0\" ID=25 RUNNABLE\n   [junit4]   2> \tat org.apache.lucene.codecs.lucene45.Lucene45DocValuesProducer.getSortedSet(Lucene45DocValuesProducer.java:541)\n   [junit4]   2> \tat org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSortedSet(PerFieldDocValuesFormat.java:285)\n   [junit4]   2> \tat org.apache.lucene.index.SegmentReader.getSortedSetDocValues(SegmentReader.java:500)\n   [junit4]   2> \tat org.apache.lucene.index.SegmentMerger.mergeDocValues(SegmentMerger.java:204)\n   [junit4]   2> \tat org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:119)\n   [junit4]   2> \tat org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:4068)\n   [junit4]   2> \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3664)\n   [junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)\n   [junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)\n   [junit4]   2> \n   [junit4]   2> \"TEST-TestLucene45DocValuesFormat.testSortedSetVariableLengthVsUninvertedField-seed#[7362FE36DE729D42]\" ID=23 RUNNABLE\n   [junit4]   2> \tat org.apache.lucene.index.SortedSetDocValues.<clinit>(SortedSetDocValues.java:72)\n   [junit4]   2> \tat org.apache.lucene.index.DocTermOrds.iterator(DocTermOrds.java:767)\n   [junit4]   2> \tat org.apache.lucene.search.FieldCacheImpl.getDocTermOrds(FieldCacheImpl.java:1214)\n   [junit4]   2> \tat org.apache.lucene.index.BaseDocValuesFormatTestCase.doTestSortedSetVsUninvertedField(BaseDocValuesFormatTestCase.java:2342)\n   [junit4]   2> \tat org.apache.lucene.index.BaseDocValuesFormatTestCase.testSortedSetVariableLengthVsUninvertedField(BaseDocValuesFormatTestCase.java:2375)\n   [junit4]   2> \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]   2> \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n   [junit4]   2> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]   2> \tat java.lang.reflect.Method.invoke(Method.java:606)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1617)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:826)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:862)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:876)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n   [junit4]   2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:359)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:783)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:443)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:835)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:737)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:771)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:782)\n   [junit4]   2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:359)\n\n\n\nRobert looked into it and was wtf'd, quote:\n\nwhat happened here...\n\n\n\nI looked into it and was wtf'd, quote (from my head):\n\nwtf?!\n\n\n\nI looked deeper at the code and it's a beautiful and classic class loading deadlock. I don't think I've seen an example of this in real life ever, except for this one case.\n\nProblem description.\n\n1. Thread A attempts to return a new instance of RandomAccessOrds:\n\nreturn new RandomAccessOrds() {\n\n\n\nRandomAccessOrds extends SortedSetDocValues and has a final static field which in turn loads RandomAccessOrds (circular reference).\n\n2. Thread B attempts to create:\n\n\nprivate class Iterator extends SortedSetDocValues {\n\n\n\n3. If thread B starts loading SortedSetDocValues, it blocks other threads from doing so. If, at the same time, thread A starts loading RandomAccessOrds then thread A will eventually attempt to initialize SortedSetDocValues and both will wait for each other indefinitely.\n\nI attach a simpler example that does the same as a POC.",
    "attachments": {
        "C.java": "https://issues.apache.org/jira/secure/attachment/12638643/C.java",
        "Main.java": "https://issues.apache.org/jira/secure/attachment/12638644/Main.java",
        "LUCENE-5573.patch": "https://issues.apache.org/jira/secure/attachment/12638879/LUCENE-5573.patch",
        "A.java": "https://issues.apache.org/jira/secure/attachment/12638642/A.java",
        "X.java": "https://issues.apache.org/jira/secure/attachment/12638645/X.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13959729",
            "author": "Dawid Weiss",
            "content": "A repro of the class loading deadlock for reference. ",
            "date": "2014-04-04T07:48:41+0000"
        },
        {
            "id": "comment-13959732",
            "author": "Dawid Weiss",
            "content": "Btw. one solution would be to move static field initialization out of SortedSetDocValues.\n\npublic static final SortedSetDocValues EMPTY = new RandomAccessOrds() {\n\n\n\nbut I'll leave it for Robert to fix since he spotted this beauty first  ",
            "date": "2014-04-04T07:50:01+0000"
        },
        {
            "id": "comment-13959848",
            "author": "Michael McCandless",
            "content": "What a doozie   I'm glad you guys dug into this weird failure... ",
            "date": "2014-04-04T10:25:00+0000"
        },
        {
            "id": "comment-13959950",
            "author": "Simon Willnauer",
            "content": "should we mark this 4.7.2? ",
            "date": "2014-04-04T13:32:03+0000"
        },
        {
            "id": "comment-13959958",
            "author": "Robert Muir",
            "content": "Yes, i dont like the idea of hanging people's computers. ",
            "date": "2014-04-04T13:36:20+0000"
        },
        {
            "id": "comment-13959959",
            "author": "Robert Muir",
            "content": "oh wait: duh this only affects 4.8. its unreleased code. we are ok. ",
            "date": "2014-04-04T13:37:24+0000"
        },
        {
            "id": "comment-13961219",
            "author": "Robert Muir",
            "content": "Here's my solution: i moved all this helper stuff to a separate class. So the patch adds one public class, but removes 3 others, so overall I think its a win and reduces the API...\n\nWould be nice to figure out some kind of analysis we could do to detect these things (versus having tests hang if we get lucky).\n\nThank you Dawid for digging in... ",
            "date": "2014-04-05T20:13:08+0000"
        },
        {
            "id": "comment-13961225",
            "author": "Dawid Weiss",
            "content": "> Would be nice to figure out some kind of analysis we could do to detect these things (versus having tests hang if we get lucky).\n\nI think it should be doable with static bytecode analysis \u2013 you'd need to parse <clinit> methods and extract DAG of class loading dependencies. If there exists any two pairs with reverse order initialization then you have a potential deadlock. Again - this shouldn't be a frequent scenario... but who knows  ",
            "date": "2014-04-05T20:21:10+0000"
        },
        {
            "id": "comment-13961226",
            "author": "Robert Muir",
            "content": "Classycle can list the possibilities, but it just lists cycles in general, not ones in static init... or i dont know how to coerce it into this.\n\n\nCycle: org.apache.lucene.index.SortedSetDocValues et al. with 3 vertices. Layer: 8\n    abstract class org.apache.lucene.index.SortedSetDocValues (2621 bytes) sources: java: Used by 23 classes. Uses 4/2 internal/external classes\n    class org.apache.lucene.index.SortedSetDocValuesTermsEnum (3896 bytes) sources: java: Used by 1 classes. Uses 8/4 internal/external classes\n    abstract class org.apache.lucene.index.RandomAccessOrds (398 bytes) sources: java: Used by 3 classes. Uses 1/0 internal/external classes\n\n ",
            "date": "2014-04-05T20:32:51+0000"
        },
        {
            "id": "comment-13961682",
            "author": "Dawid Weiss",
            "content": "I think you'd need to write a custom visitor with asmlib, parse class references inside <clinit> (if they exist) and class header pointers (super, implements) to create a graph like this. Doable. But then it also couldn't take into account monitors inside those <clinits> so it could report false positives as well. \n\nIt'd be most interesting to see the deadlock report of this at the JVM level (much as it happens with monitors, currently). ",
            "date": "2014-04-07T07:35:10+0000"
        },
        {
            "id": "comment-13961741",
            "author": "Dawid Weiss",
            "content": "Definitely doable with asmlib... and sounds like a fun side-project.\n\n\npublic class ClinitCycle {\n  public static void main(String[] args) throws Exception {\n    ClassReader cr = new ClassReader(X.class.getName());\n    ClassNode cn = new ClassNode();\n    cr.accept(cn, ClassReader.SKIP_DEBUG);\n\n    System.out.println(\"SUPER: \" + cn.superName);\n    List methods = cn.methods;\n    for (int i = 0; i < methods.size(); ++i) {\n        MethodNode method = (MethodNode) methods.get(i);\n        System.out.println(\"Method: \" + method.name);\n        if (method.instructions.size() > 0) {\n          InsnList instructions = method.instructions;\n          instructions.accept(new MethodVisitor(Opcodes.ASM5) {\n            @Override\n            public void visitTypeInsn(int opcode, String type) {\n              System.out.println(opcode + \" -> \" + type);\n            }\n\n            @Override\n            public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n              System.out.println(opcode + \" -> \" + name + \" [\" + desc + \", \" + owner + \"]\");\n            }\n          });\n        }\n    }\n  }\n}\n\n ",
            "date": "2014-04-07T09:31:03+0000"
        },
        {
            "id": "comment-13966345",
            "author": "ASF subversion and git services",
            "content": "Commit 1586600 from rmuir@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1586600 ]\n\nLUCENE-5573: Move docvalues constants and helper methods to o.a.l.index.DocValues ",
            "date": "2014-04-11T08:54:05+0000"
        },
        {
            "id": "comment-13966350",
            "author": "ASF subversion and git services",
            "content": "Commit 1586604 from rmuir@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1586604 ]\n\nLUCENE-5573: Move docvalues constants and helper methods to o.a.l.index.DocValues ",
            "date": "2014-04-11T09:02:19+0000"
        },
        {
            "id": "comment-13966353",
            "author": "ASF subversion and git services",
            "content": "Commit 1586607 from rmuir@apache.org in branch 'dev/branches/lucene_solr_4_8'\n[ https://svn.apache.org/r1586607 ]\n\nLUCENE-5573: Move docvalues constants and helper methods to o.a.l.index.DocValues ",
            "date": "2014-04-11T09:14:07+0000"
        },
        {
            "id": "comment-13982541",
            "author": "Uwe Schindler",
            "content": "Close issue after release of 4.8.0 ",
            "date": "2014-04-27T23:25:40+0000"
        }
    ]
}