{
    "id": "SOLR-8900",
    "title": "The ObjectReleaseTracker should not reference actual objects.",
    "details": {
        "components": [
            "Tests"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "By tracking the actual objects we prevent normal garbage collection during the test - the more we track, the more we affect the tests.",
    "attachments": {
        "SOLR-8900.patch": "https://issues.apache.org/jira/secure/attachment/12798515/SOLR-8900.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-13T14:36:00+0000",
            "author": "Mark Miller",
            "content": "Here is a patch that uses the identity hashcode and classname for release tracking purposes. ",
            "id": "comment-15239344"
        },
        {
            "date": "2016-04-13T15:01:45+0000",
            "author": "Mark Miller",
            "content": "The downside to this is that because we currently track the objects, when a test uses @SuppressObjectReleaseTracker, we can actually close the unreleased objects and clean up the test and not interfere with the next test in that JVM.\n\nOften, @SuppressObjectReleaseTracker is due to something that needs to be fixed, but sometimes it is on purpose. Some failure tests purposely cause behavior that avoids closing objects.\n\nHmm... ",
            "id": "comment-15239372"
        },
        {
            "date": "2016-04-13T16:27:15+0000",
            "author": "Mark Miller",
            "content": "Okay, because it's an exception to hold on to references beyond a proper release and because of the clean up behavior we can have now when leaks are expected for a test, I don't think we really need or want  to make this change. ",
            "id": "comment-15239542"
        }
    ]
}