{
    "id": "SOLR-11932",
    "title": "ZkCmdExecutor: Retry ZkOperation on SessionExpired",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We are seeing situations where an operation, such as changing a replica's state to active after a recovery, fails because the zk session has expired.\n\nHowever, these operations seem like they are retryable, because the ZookeeperConnect receives an event that the session expired and tries to reconnect.\n\nThat makes the SessionExpired handling\u00a0scenario seem very similar to the ConnectionLoss handling scenario, so the ZkCmdExecutor seems like it could handle them in the same way.\n\n\u00a0\n\nHere's an example stack trace with some slight redactions: SessionExpiredLog.txt\u00a0 In this case, a zk operation (a read) failed with a SessionExpired event, which seems retriable.\u00a0 The exception kicked off a reconnection, but seems like the subsequent operation, (publishing as active) failed (perhaps it was using a stale connection handle at that point?)\n\n\u00a0\n\nRegardless, the watch mechanism that reestablishes connection on SessionExpired seems sufficient to allow the ZkCmdExecutor to retry that operation at a later time and have hope of succeeding.\n\n\u00a0\n\nI have included a simple patch we are trying that catches both exceptions instead of just ConnectionLossException:\u00a0zk_retry.patch",
    "attachments": {
        "SessionExpiredLog.txt": "https://issues.apache.org/jira/secure/attachment/12908645/SessionExpiredLog.txt",
        "org.apache.solr.schema.ManagedSchemaRoundRobinCloudTest.error.txt": "https://issues.apache.org/jira/secure/attachment/12909362/org.apache.solr.schema.ManagedSchemaRoundRobinCloudTest.error.txt",
        "zk_retry.patch": "https://issues.apache.org/jira/secure/attachment/12908646/zk_retry.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-05T14:09:36+0000",
            "content": "Good catch; the fix looks good to me. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16352422"
        },
        {
            "date": "2018-02-05T17:40:01+0000",
            "content": "ZkCmdExecutor cannot work on session expiry because the command sent to the ZkCmdExecutor has an instance of SolrZooKeeper which is no longer usable after expiry. A new SolrZooKeeper instance must be created after session expiry. The right way to handle session expiry is to use the OnReconnect hook in ZkController.addOnReconnectListener and re-initialize state as needed. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16352678"
        },
        {
            "date": "2018-02-06T05:06:37+0000",
            "content": "Shalin Shekhar Mangar very good point!\u00a0 I think that actually applies to the ConnectionLoss exception as well?\u00a0 Those SolrZooKeeper instances were probably not valid after connection loss.\u00a0 I understand your recommendation - but I took a slightly different approach to reduce the amount of changed code, and to bring back the connection-loss\u00a0retry that I think was also affected by the problem you pointed out:\n\nhttps://github.com/apache/lucene-solr/pull/321\n\n\u00a0\n\nAfter some initial test failures that I fixed in the shutdown hook, I am down to just one repeatable error:\n\norg.apache.solr.schema.ManagedSchemaRoundRobinCloudTest\u00a0 I'm not sure if it is due to a leaking retry thread or not. I believe it is just the thread leak detection, because adding a sleep in the @AfterClass method of that class (allowing the retry to drain) seems to pass the test, but nevertheless, here is the failed test result:\n\norg.apache.solr.schema.ManagedSchemaRoundRobinCloudTest.error.txt\n\n\u00a0 ",
            "author": "John Gallagher",
            "id": "comment-16353357"
        }
    ]
}