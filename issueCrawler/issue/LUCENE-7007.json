{
    "id": "LUCENE-7007",
    "title": "Reduce block-tree GC/CPU cost when flushing or merging postings",
    "details": {
        "resolution": "Incomplete",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Writing postings is a GC and CPU heavy operation now, in part because of how\nblock tree recursively builds up the tree structure, by creating many\ntiny FSTs which it inefficiently merges together as it walks up the\ntree eventually to the root block.\n\nSo I tried a quick prototype (patch attached) to use a\nless-RAM-efficient, but much fewer tiny FST related objects, when\nwriting postings.\n\nBut in some quick indexing performance tests (luceneutil), it makes no\nmeasurable improvements to indexing performance.\n\nSo I'm putting my patch up here for posterity ... I don't intend to\ncommit it unless we can iterate it further.  It adds code complexity,\nit's not committable as-is (we need to conditionalize it so it\nsometimes does use FSTs, for segments with many terms), etc.",
    "attachments": {
        "LUCENE-7007.patch": "https://issues.apache.org/jira/secure/attachment/12785758/LUCENE-7007.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15128071",
            "author": "Michael McCandless",
            "date": "2016-02-02T11:02:58+0000",
            "content": "Here's the patch (NOT committable!).\n\nBut I will commit the \"XXX msec to flush YYY part of index\" ... I think that can be helpful. "
        },
        {
            "id": "comment-15128836",
            "author": "Robert Muir",
            "date": "2016-02-02T19:21:16+0000",
            "content": "Do you think luceneutil is the best dataset for comparison? I think its useful to see comparisons for \"healthy\" indexes like that too, but its still a far cry from structured datasets (more DOCS_ONLY/terms heavy) or abusive cases (e.g. massive n-gramming) where blocktree might be a performance bottleneck. "
        }
    ]
}