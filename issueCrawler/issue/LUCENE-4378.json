{
    "id": "LUCENE-4378",
    "title": "QueryParsers do not support negative boosts",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Negative query boosts have been supported at the \"Query\" object level for a long time (resulting in negative scores for matching documents), but evidently we never updated the QueryParsers to know about this - attempting to specify a negative boost in the query string results in a parse error.\n\nwe should probably add this to the parser grammer(s)",
    "attachments": {
        "LUCENE-4378-test.patch": "https://issues.apache.org/jira/secure/attachment/12544740/LUCENE-4378-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-12T00:20:02+0000",
            "content": "patch includes a testcase demonstrating the basic problem.  example stack traces...\n\n\n[junit4:junit4]    > Throwable #1: INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse foo^-3: Lexical error at line 1, column 5.  Encountered: \"-\" (45), after : \"\" \n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([49CF3A1EAABC55F0:1AED92BFB422F3DE]:0)\n[junit4:junit4]    > \tat org.apache.lucene.queryparser.flexible.standard.parser.StandardSyntaxParser.parse(StandardSyntaxParser.java:74)\n[junit4:junit4]    > \tat org.apache.lucene.queryparser.flexible.core.QueryParserHelper.parse(QueryParserHelper.java:250)\n[junit4:junit4]    > \tat org.apache.lucene.queryparser.flexible.standard.StandardQueryParser.parse(StandardQueryParser.java:168)\n[junit4:junit4]    > \tat org.apache.lucene.queryparser.flexible.standard.TestStandardQP.parse(TestStandardQP.java:51)\n\n\n\n\n[junit4:junit4]    > Throwable #1: org.apache.lucene.queryparser.classic.ParseException: Cannot parse 'foo^-3': Lexical error at line 1, column 5.  Encountered: \"-\" (45), after : \"\"\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([49CF3A1EAABC55F0:1AED92BFB422F3DE]:0)\n[junit4:junit4]    > \tat org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:126)\n[junit4:junit4]    > \tat org.apache.lucene.queryparser.classic.TestQueryParser.getQuery(TestQueryParser.java:80)\n\n ",
            "author": "Hoss Man",
            "id": "comment-13453572"
        },
        {
            "date": "2012-09-12T00:20:05+0000",
            "content": "I don't agree with this. Negative boosts to terms are generally undesirable, this is really esoteric and trappy. ",
            "author": "Robert Muir",
            "id": "comment-13453573"
        },
        {
            "date": "2012-09-12T00:30:11+0000",
            "content": "I don't agree with this. Negative boosts to terms are generally undesirable, this is really esoteric and trappy.\n\ni agree with you somewhat, but it is a disconnect between what is possible in the Query objects, and what the parses allows so i opened an issue.  \n\nin some cases it is actually desirable, and somewhat straight forward to use when programaticly combined with other Query objects, so we should consider adding it, or at least adding an option for it that doesn't involve editing the grammer \u2013 ie: perhaps allow it in the grammer(s), but then make the java code reject it in a way that people can override in subclasses? ",
            "author": "Hoss Man",
            "id": "comment-13453576"
        },
        {
            "date": "2012-09-12T00:40:38+0000",
            "content": "As I said before, I just don't agree.\n\nI don't think it would be good to add to the grammar: its significantly trappy and I can't think of any actual use cases,\ninstead lots of confusion where people really want a small boost instead of a negative one.\n\nSo I think its a good thing that its not supported and throws an exception (and documented as such in the syntax today). ",
            "author": "Robert Muir",
            "id": "comment-13453582"
        },
        {
            "date": "2012-09-12T00:48:28+0000",
            "content": "I can't think of any actual use cases,\ninstead lots of confusion where people really want a small boost instead of a negative one.\n\nHmmm.. all of my experiences are the generally the opposite \u2013 people want to penalize the scores of documents that match some query, and if they try using a \"small boost\" it still increases the score of the documents they are trying to penalize, so they wind up needing to do something like...\n\n\n  (thing_they_want_to_match (*:* -thing_they_want_to_penalize)^100)\n\n\n\nwhen what they ideally want to be able to write is..\n\n\n  (thing_they_want_to_match thing_they_want_to_penalize^-100)\n\n\n\n...but i'm not passionate enough about this to really fight for it \u2013 i just wanted to point out the disconnect.  \n\n(Wondering if there are any other opinions) ",
            "author": "Hoss Man",
            "id": "comment-13453588"
        },
        {
            "date": "2012-09-12T00:51:32+0000",
            "content": "I don't think it would be good to add to the grammar: its significantly trappy and I can't think of any actual use cases,\n\nWe're back to the general problem of prohibiting things that some people don't see use cases for.  We should really try to avoid this.\n\nCan you expand on what you mean by \"trappy\"?  I don't see anyone accidentally using a negative boost when they didn't mean to. ",
            "author": "Yonik Seeley",
            "id": "comment-13453592"
        },
        {
            "date": "2012-09-12T00:55:39+0000",
            "content": "Right my problem with that is I think often people that want this don't really understand the scoring system?\n\nTo me it basically boils down to the old problem of scores not really being comparable.\n\nhttp://find.searchhub.org/document/f00241f4af0134f8\nhttp://find.searchhub.org/document/2e05678ca2fa9c27\nhttp://find.searchhub.org/document/1461c1221f4c55b0#19b755925b57f641\n\nI'm not going to exclude the possibility that these days you could write a similarity where something like this\ncould actually make sense, but I don't know what it would be  ",
            "author": "Robert Muir",
            "id": "comment-13453594"
        },
        {
            "date": "2012-09-12T00:57:18+0000",
            "content": "\nWe're back to the general problem of prohibiting things that some people don't see use cases for. We should really try to avoid this.\n\nI don't look at it that way. I want to make lucene easy to use to get good search results.\n\nDismissing my opinion isn't productive. ",
            "author": "Robert Muir",
            "id": "comment-13453596"
        },
        {
            "date": "2012-09-12T01:01:00+0000",
            "content": "Dismissing my opinion isn't productive.\n\nIf you don't like negative boosts, then don't use them.\nYou're again trying to enforce your opinion on everyone else.  Allowing negative boosts gives people a choice.\n\nIn my opinion, we should add negative boosts to the grammar and give people the choice.  I've seen plenty of people ask for them, and I don't think they were all misguided.  If they are normally better avoided, that can be handled with documentation. ",
            "author": "Yonik Seeley",
            "id": "comment-13453599"
        },
        {
            "date": "2012-09-12T01:03:19+0000",
            "content": "I'm not forcing anything: you can write your own queryparser to do this, the queries won't fail or anything.\n\nI'm saying I disagree with them being in the general purpose QP that we ship as \"QueryParser\". ",
            "author": "Robert Muir",
            "id": "comment-13453603"
        },
        {
            "date": "2012-09-12T01:08:38+0000",
            "content": "Dismissing my opinion isn't productive.\n\nI don't see any one dismissing your opinion, i see yonik asking you to explain what you mean by trappy since you seem to object to a feature on principle, when i've already listed an example of a specific usecase where the people have asked for this to feature and functionally it does work at the Query/Searcher/Explaination level \u2013 it's only at the QueryParser level that you can't use it.\n\nRight my problem with that is I think often people that want this don't really understand the scoring system?\n\nthere are lots of things about the query parser that may not make sense to you if you don't understand the scoring system \u2013 that doesn't mean we don't support them, it's up to the user to understand them if they want to use them.\n\nAs i said: i'm perfectly fine with the idea that something like this should not be supported by default, and you should have to go out of your way to enable it in the QueryParser \u2013 but making people edit the grammer seems like forcing them to go too far out of their way. ",
            "author": "Hoss Man",
            "id": "comment-13453605"
        },
        {
            "date": "2012-09-12T01:10:02+0000",
            "content": "I'm saying I disagree with them being in the general purpose QP that we ship as \"QueryParser\".\n\nWhat about those of us who want it?  Will you veto a patch that implements this optional functionality because you believe that those who want it are misguided? ",
            "author": "Yonik Seeley",
            "id": "comment-13453607"
        },
        {
            "date": "2012-09-12T01:13:43+0000",
            "content": "I just said I disagreed, nothing more. I don't think its a good idea for a general-purpose queryparser.\n ",
            "author": "Robert Muir",
            "id": "comment-13453612"
        },
        {
            "date": "2012-09-12T01:34:15+0000",
            "content": "In my opinion, a better approach is something like the BoostingQuery in lucene/queries for this demoting of terms.\n\nAs far as the implementation, I don't particularly like that it goes thru coord(), but we could improve that. ",
            "author": "Robert Muir",
            "id": "comment-13453629"
        },
        {
            "date": "2012-09-12T01:57:29+0000",
            "content": "In my opinion, a better approach is something like the BoostingQuery in lucene/queries for this demoting of terms.\n\nMy confusion is that your argument seems like it confluates the concept/syntax with an implementation \u2013 you're saying you don't like a particular implementation, therefore you don't think QueryParser should allow for the concept.\n\nI'm suggesting we let the syntax in the grammer allow for the concept of negative boosts, and then let the implementations of QueryParser decide what it means \u2013 the default implementation could be \"error\".  Some users could choose to have a subclass with \"simple\" implementation (literally using the negative boost on the query) if it makes sense for them, and other users could do other things.\n\nFor example: suppose i wanted to use BoostingQuery like you suggest, but i want to be able to use it in some way with the QueryParser syntax.   If the grammer allowed for \"foo bar^-100\" to do something then by subclassing the QueryParser i could impelement demoting items using this syntax with something like...\n\n\npublic MyParser extends QueryParser {\n  @Override\n  public BooleanQuery getBooleanQuery(List<BooleanClause> clauses,\n                               boolean disableCoord) throws ParseException {\n     BooleanQuery q = super.getBooleanQuery(clauses, disableCoord);\n     Query result = q;\n     for (clause : q.getClauses(){ \n       if (clause.getBoose() < 0) {\n         q.removeClause(clause);\n         penalty = -1/clause.getBoost();\n         clause.setBoost(1);\n         result = new BoostingQuery(result, clause, penalty)\n     }\n     return result;\n  }\n  @Override\n  public void checkBoost(Query q, float boost) {\n    // override super which will throw an exception if boost is negative\n    // :NOOP:\n  }\n}\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-13453640"
        },
        {
            "date": "2012-09-12T02:57:30+0000",
            "content": "\nMy confusion is that your argument seems like it confluates the concept/syntax with an implementation \u2013 you're saying you don't like a particular implementation, therefore you don't think QueryParser should allow for the concept.\n\nNot really, I'm not suggesting we support negative boosts at all. I'm suggesting a way to support the use case of optional clauses that, if they match,\ncause the other part to return a lower score.\n\nI don't think negative boost syntax is the way to achieve that either. ",
            "author": "Robert Muir",
            "id": "comment-13453663"
        },
        {
            "date": "2014-12-02T22:43:22+0000",
            "content": "I +1 this feature. It's very very very useful to the project I'm currently developing... ",
            "author": "Endymion Dylan",
            "id": "comment-14232255"
        }
    ]
}