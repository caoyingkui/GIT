{
    "id": "LUCENE-2508",
    "title": "Consolidate Highlighter implementations and a major refactor of the non-termvector highlighter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/highlighter"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Originally, I had planned to create a contrib module to allow people to highlight multiple documents in parallel, but after talking to Uwe in IRC about it, I realized that it was pretty useless.  However, I was already sitting on an iterative highlighting algorithm that was much faster (my tests show 20% - 40%) and more accurate and, based on that same IRC conversation, I decided to not let all the work that I had done go to waste and try to contribute it back again.  Uwe had mentioned that \"More like this\" detected term vectors when called and use the term vector implementation when possible, if I recall correctly, so I decided to do that.\n\nThe patch that I've attached is my first stab at this.  It's not nearly complete and full disclosure dictates that I say that it's not fully documented and there are not any unit tests written.  I wanted to go ahead and open an issue to get some feedback on the approach that I've taken as well as the fact that it exists will be a proverbial kick in my pants to continue working on it.\n\nIn short, what I've changed:\n\n\n\tCompletely rewritten the non-tv highlighter to be faster and cleaner.  There is some small loss in functionality for now, namely the loss of the GradientHighlighter (I just haven't done this yet) and the lack of exposure of TermFragments and their scores (I can expose this if it is deemed necessary, this is one of the things I'd like feedback on).\n\tMoved org.apache.lucene.search.vectorhighlight and org.apache.lucene.search.highlight to a single package with a unified interface, search.highlight (with two sub-packages: search.highlight.termvector and search.highlight.iterative, respectively).\n\tUnified the highlighted term formatting into a single interface: highlighter/Formatter and both highlighters use this now.\n\n\n\nWhat I need to do before I personally would consider this finished:\n\n\n\tFinish documentation, most specifically on TermVectorHighlighter.  I haven't done this now as I expect things to change up quite a bit before they're finalized and I really hate writing documentation that goes to waste, but I do intend to complete this bullet \n\t\"Flesh out\" the API of search.highlight.Highlighter as it's very barebones right now\n\tContinue removing and consolidating duplicate functionality, like I've done with the highlighted word tag generation.\n\n\n\nWhat I think I need feedback on, before I can proceed:\n\n\tFastTermVectorHighlighter and the iterative highlighters need completely different sets of information in order to work.  The approach I've taken is exposing a vectorHighlight method in the unified interface and a iterativeHighlight method, as well as a single highlight method that takes all the information needed for either of them and I'm unsure if this is the best way to do this.\n\tThe naming of things; I'm not sure if this is a big issue, or even an issue at all, but I'd like to not break any conventions that may exist that I'm unaware of.\n\tHow big of a deal is exposing the particular score of a segment from the highlighting interface and does this need to be extended into the term vector highlighting as well?\n\tThere are a lot of methods in the tv implementation that are marked depracted; since this release will almost definitely break backwards compatibility anyway, are these safe to remove?\n\tAny other input anyone else may have \n\n\n\nI'm going to continue to work on things that I can work on, at least unless someone tells me I'm wasting my time and will look forward to hearing you guys' feedback! \n\nAs a sidenote because it does seem rather random that I would arbitrarily re-write a working algorithm in the non-tv highlighter, I did it originally because I wanted to parallelize the highlighting (which was a failed experiment) and simply to see if I could make the algorithm faster, as I find that sort of thing particularly fun \n\nAs a second sidenote, if anyone would like an explanation of the algorithm for the highlighting I devised, and why I feel that it's more accurate, I'd be happy to provide them with one (and benchmarks as well).\n\nThanks,\nEddie",
    "attachments": {
        "LUCENE-2508.patch": "https://issues.apache.org/jira/secure/attachment/12447672/LUCENE-2508.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-06-22T07:12:38+0000",
            "content": "The \"first stab\" patch. ",
            "author": "Edward Drapkin",
            "id": "comment-12881112"
        },
        {
            "date": "2013-07-23T18:44:33+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716983"
        },
        {
            "date": "2014-03-17T05:08:32+0000",
            "content": "This is great! IIRC, one of the todo's in the FVH was to properly integrate it with the existing highlighter. One thing I'm wondering is whether this should be expanded to take in the postings highlighter, or make that integration a follow-on issue. (For one minor example, DefaultPassageFormatter has an HTML escape function that can be shared.) ",
            "author": "Scott Stults",
            "id": "comment-13937464"
        },
        {
            "date": "2014-04-16T12:54:31+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970787"
        },
        {
            "date": "2016-11-10T21:38:36+0000",
            "content": "The UnifiedHighlighter in LUCENE-7438 (in Lucene 6.3.0) consolidates/unifies features of most highlighters, save for a few remaining features.  So given that I'm closing this issue. \n\nRE the multi-threading sub-discussion here: My colleagues and I had a lot of success multi-threading the standard highlighter at the top level (DefaultSolrHighlighter) to highlight each document separately.  We didn't bother to contribute it upstream because (a) we developed the UH which is much faster so it lessened the need, and (b) sharding more can ameliorate the desire for multi-threaded faceting, and (c) increased memory requirements, at least for the DefaultSolrHighlighter.\n\nIt's hard to choose appropriate JIRA resolution statuses sometimes like this... the concept has been addressed \"Fixed\" so perhaps it's a \"Duplicate\" of the UH yet this particular code comprising the whole content here hasn't been released \"Won't Fix\".  I wish there was a \"Already addressed\"?  Any way, I'm filing as \"Won't Fix\". ",
            "author": "David Smiley",
            "id": "comment-15655228"
        }
    ]
}