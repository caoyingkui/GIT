{
    "id": "SOLR-3405",
    "title": "maven artifacts should be equivalent to binary packaging",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Build"
        ],
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Resolved"
    },
    "description": "Lets take the commons-csv scenario: \n\n\n\tapache-solr-3.5.0 binary distribution contains no actual commons-csv.jar anywhere,\n  in fact it contains no third party jars (the stuff present in solr/lib) at all.\n\tbinary distribution contains only the jars necessary for solrj and contrib plugins, and a solr.war\n\n\n\nI think the maven artifacts should match whats in the binary release (no third party jars \ninside the .war are \"exposed\", we just publish the .war itself). This exposes a lot less surface area.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Benson Margulies",
            "id": "comment-13260595",
            "date": "2012-04-24T14:15:38+0000",
            "content": "What you did is perfect in every way if you want to publish the JAR so that API-style users get the benefit, but it's a lot of work if all you want it to put a patch into a war or an assembly.\n\nHow does the following alternative strike for getting patched binaries into the war without them leaking anywhere or renaming packages?\n\nWAR FILES:\n\nSome script (probably in ant):\n\n1. Grab and patch patch the source (not changing the package) and builds a jar for each patched item.\n2. The results are assembled into a 'sparse war file' (just containing WEB-INF/lib/all-them-jars).\n3. mvn install:install-file (or the maven ant tools) push the results to the local repository.\n4. the pom for the war file lists the results as an 'overlay'.\n\nIt seems to me that the WAR file is the whole show here, since all the patched binaries go inside the war? If that's no so, let me know.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13260598",
            "date": "2012-04-24T14:19:31+0000",
            "content": "I dont understand this issue and I don't want to get the whole thing again by scanning again through the whole ML thread. Can we conclcde in the issue description, what we should do here? I think the 3.6 artifacts in Lucene and Solr are exectly the way we want it? It works out of the box and starts a working Solr? What should be changed? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260600",
            "date": "2012-04-24T14:20:33+0000",
            "content": "I don't think we have to attack the patched binaries scenario right now on this issue?\n\nI just want the current maven artifacts to be consistent with whats in apache-solr-xx.tar.gz \n\nIf maven is consistent with the binary release, I think there will be a lot less concern\nabout maven, because then we know what we are 'publishing'.\n\nBut currently we don't! Maven is different here, and that should be fixed so its release\nartifacts are consistent with the binary package. "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13260603",
            "date": "2012-04-24T14:22:41+0000",
            "content": "Oh, drat. I thought I was cleverly reducing noise on the list by parking this idea here. Sorry. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13260606",
            "date": "2012-04-24T14:23:53+0000",
            "content": "How does it differ? I dont understand it, sorry! Do you mean the JAR files are different? Please give an example. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260609",
            "date": "2012-04-24T14:25:50+0000",
            "content": "\n\n$ unzip -l apache-solr-3.5.0.zip | grep commons-csv\n$ \n\n\n\nBut,\n\nhttp://search.maven.org/#artifactdetails|org.apache.solr|solr-commons-csv|3.5.0|jar "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13260616",
            "date": "2012-04-24T14:35:50+0000",
            "content": "OK, that explains \n\nIn my opinion, Solr should not deploy any maven artifact except SOLRJ and the WAR file. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13260669",
            "date": "2012-04-24T15:40:49+0000",
            "content": "+1 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260689",
            "date": "2012-04-24T16:37:13+0000",
            "content": "wasn't this solved in 3.6?   "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260694",
            "date": "2012-04-24T16:42:39+0000",
            "content": "Not at all!\n\nLook at the issue title: apache-solr-3.6.0.zip does not contain\nthe third party jars used in the war file (such as guava.jar), go look inside the zip.\n\nBut the maven artifacts expose these inner details: http://search.maven.org/remotecontent?filepath=org/apache/solr/solr-core/3.6.0/solr-core-3.6.0.pom\n\nThis is why the commons-csv issue emerged. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260713",
            "date": "2012-04-24T17:10:59+0000",
            "content": "why would we distribute guava.jar?  Seems like we are doing the right thing here. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260717",
            "date": "2012-04-24T17:17:49+0000",
            "content": "OK i'll go change it to use a patched guava jar. Now what?\n\nNow its a serious problem for maven (and we have to make either a \"solr-guava\" fake release, or suck in all of their code).\n\nBut its no problem for any of our other packaging:\n\n\tsource build can download + patch\n\tbinary dist doesn't include guava jar anyway\n\n\n\nThis needs to be fixed (maven should be equivalent to binary packaging), or we shouldn't publish any maven at all.\n\nSo maven just needs the .war, and the solrj in its artifacts. it doesnt need all this other stuff.\nthis makes like 50 or so third party dependencies so much simpler.\n\nThe reduced exposure prevents things like commons-csv problems (totally 100% a maven problem, as I've always said, look at my comment above)\n\nit also makes it so that PMC members who don't understand maven, can simply look at the binary release\nand understand what we are ALSO releasing into maven. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260754",
            "date": "2012-04-24T17:53:02+0000",
            "content": "So under this proposal, which of these would NOT be published on maven central?:\n\n\n\tsolr-core-X.Y.Z.jar\n\tsolr-test-framework-X.Y.Z.jar\n\tsolr-<contrib-name>-X.Y.Z.jar\n\n\n\nIf I understand properly, under this proposal, the Solr war would be published on maven central, but several maven proponents have said that that is not useful.  By contrast, I believe there are people who currently depend on solr-core and solr-test-framework via Maven.\n\nFor solrj, to make maven artifacts consistent with the binary distribution, I think the POM should mark as optional those dependencies that don't ship with the binary distribution (that may already be the case, I haven't checked). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260762",
            "date": "2012-04-24T17:59:00+0000",
            "content": "I think the contribs are actually in our package (along with their third party dependencies!)\n\nSo in my opinion, they should also be in maven: it should match. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260789",
            "date": "2012-04-24T18:25:43+0000",
            "content": "But the maven artifacts expose these inner details: http://search.maven.org/remotecontent?filepath=org/apache/solr/solr-core/3.6.0/solr-core-3.6.0.pom\nI think the contribs are actually in our package (along with their third party dependencies!) So in my opinion, they should also be in maven: it should match.\n\nOk, so if I understand correctly, the problem as you see it is not the binary jars/war that are published on Maven Central (AFAICT, the set of jars/war in Maven Central are the same as in Solr's binary distribution), but rather the POMs associated with them that refer to third-party artifacts, like commons-csv.  Right? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260814",
            "date": "2012-04-24T18:47:53+0000",
            "content": "yeah: i mean we can look at this two ways:\n1) that the solr binary package is broken by just shipping solr-core.jar without its dependnecies\n2) that the maven package is over-reaching by needing to specify them.\n\nI think, more importantly than anything else (as mentioned on this issue title), that they should match.\n\nif its so important to use solr-core.jar (but not the war), we could add these dependencies \nto the binary release too.\n\nHowever we should think seriously about this: because we are talking about a lot of third party dependencies,\na lot more to be responsible for, and trickier handling of patched dependencies. And i've never heard\nanyone complain about e.g. guava.jar not being in the binary package, ever. but maybe i'm missing something.\n\nI hope this makes sense: the fact that they are different I think is the worst. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260819",
            "date": "2012-04-24T18:52:38+0000",
            "content": "Or just said another way, we are currently releasing solr two different ways as binary:\n\n1. as an \"app\" (war file) in the .zip\n2. with its \"guts exposed\" on maven\n\nwe should be able to come to an agreement about what needs to be in the binary release,\nand how it will be packaged, whether solr is an application or not, etc. we have to.\n\nits absurd to be releasing it two completely different ways. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260825",
            "date": "2012-04-24T18:57:04+0000",
            "content": "the fact that they are different I think is the worst.\n\nStated another way: POMs for Solr jars/war published on Maven Central should never require (i.e., have a non-optional dependency on) a third party artifact if that third party dependency is not directly included in the binary package; the contents of the war don't count as \"inclusion in the binary package\".\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260831",
            "date": "2012-04-24T19:00:14+0000",
            "content": "2. with its \"guts exposed\" on maven\n\nhmm, by \"guts exposed\" you mean: the Solr Maven artifacts' POMs document their dependencies.  Right? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260832",
            "date": "2012-04-24T19:01:05+0000",
            "content": "Well i think so, I mean the way maven publishes solr, it publishes it as if it were an api, not an application.\nBut the binary release treats solr as an application. This is a big difference!\n\nBecause of this we previously also published some war dependencies (commons-csv) also as api in maven too.\nThis is what got people all upset, but if you look at our binary package we don't ever package their stuff up this way.\n\nReleasing an application is easier. we don't care about dependencies (except that they are legal): just that our .war works.\nand if the .war also wants to be in maven, then it should declare no dependencies (it works by itself). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260840",
            "date": "2012-04-24T19:07:56+0000",
            "content": "it publishes it as if it were an api, not an application.\n\nsolr-core.jar is an API  (how would anyone write RequestHandlers,Components,etc,etc w/o it!)\n\nsolr.war is an application\n\n "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13260841",
            "date": "2012-04-24T19:08:15+0000",
            "content": "It might be helpful to note the following: with 3.5.0, 3.6.0, and 4.0-SNAPSHOT, I can create a Maven project with a dependency on solr-core, and have all the necessaries show up to sucessfully use EmbeddedSolrServer. The result is:\n\n\n[INFO] +- org.apache.solr:solr-core:jar:3.5.0:provided\n[INFO] |  +- org.apache.solr:solr-solrj:jar:3.5.0:provided\n[INFO] |  |  \\- org.codehaus.woodstox:wstx-asl:jar:3.2.7:provided\n[INFO] |  +- org.apache.solr:solr-noggit:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-core:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-analyzers:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-highlighter:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-memory:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-misc:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-queries:jar:3.5.0:provided\n[INFO] |  |  \\- jakarta-regexp:jakarta-regexp:jar:1.4:provided\n[INFO] |  +- org.apache.lucene:lucene-spatial:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-spellchecker:jar:3.5.0:provided\n[INFO] |  +- org.apache.lucene:lucene-grouping:jar:3.5.0:provided\n[INFO] |  +- org.apache.solr:solr-commons-csv:jar:3.5.0:provided\n[INFO] |  +- commons-codec:commons-codec:jar:1.5:provided\n[INFO] |  +- commons-fileupload:commons-fileupload:jar:1.2.1:provided\n[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:provided\n[INFO] |  +- org.slf4j:jcl-over-slf4j:jar:1.6.3:provided\n[INFO] |  +- commons-io:commons-io:jar:1.4:provided\n[INFO] |  +- commons-lang:commons-lang:jar:2.4:provided\n[INFO] |  +- com.google.guava:guava:jar:r05:provided\n[INFO] |  \\- javax.servlet:servlet-api:jar:2.4:provided\n\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260844",
            "date": "2012-04-24T19:11:30+0000",
            "content": "Benson, but you cannot do this with the binary release right? surely not? there is no guava.jar in the binary package, nor any lucene jars.\n\nLike i said, the release should be the same.\n\nIt can't be: we release solr as an application on lucene.apache.org, but separately/differently as an API over on sonatype.com "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260856",
            "date": "2012-04-24T19:20:42+0000",
            "content": "It can't be: we release solr as an application on lucene.apache.org, but separately/differently as an API over on sonatype.com\n\nI disagree.  The official Solr binary distribution includes the API jars outside of the .war. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260865",
            "date": "2012-04-24T19:26:45+0000",
            "content": "there is no guava.jar in the binary package, nor any lucene jars.\n\nIn the 3.6.0 binary dist, there are lucene jars under contrib/analysis-extras/lucene-libs/.  In the 4.0 release, assuming the uima contrib follows the same pattern, it too will have a lucene-libs/ directory containing the Lucene uima module's jar. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260866",
            "date": "2012-04-24T19:27:04+0000",
            "content": "The binary release simply doesn't include any third party libraries. its different packaging.\n\nI think for most people, if maven supporters had honestly said up front:\n\nputting your war application in maven means we must expose it as if it were an API and take responsibility that also all its 100+ jars are also themselves in maven (even patched, renamed, etc)\n\nThat nobody in their right mind would have agreed to this.\n\nLets either drop maven artifacts for solr completely, or package maven artifacts like everything else \nto prevent problems like commons-csv in the future! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13260878",
            "date": "2012-04-24T19:37:11+0000",
            "content": "Lets either drop maven artifacts for solr completely, or package maven artifacts like everything else to prevent problems like commons-csv in the future!\n\nRobert, the only difference between solr binary distribution and maven artifacts is the POMs, not the jars or the war.\n\nWhen you say \"packaging\" you imply that the Solr Maven artifacts \"include\" 3rd party jars.  They don't.  Their POMs say that those 3rd party jars are required via non-optional dependency declarations. "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13260879",
            "date": "2012-04-24T19:42:06+0000",
            "content": "Wait, who said \"putting your war application in maven means we must expose it as if it were an API and take responsibility\"? It's not true. It might be a default behavior of the maven-war-plugin in simple cases, but that's different.\n\nAnyway, to answer the previous question, no, of course I can't do that with the binary package. \n\nThe issue here should not be the war file. If there's an issue, it's the dependency tree of solr-core as an ordinary dependency, and whether we want it to list (a) ordinary released versions of third party stuff, (b) patched versions of third party stuff, or (c) no versions of third party stuff. If you want (c), then <optional>true</optional> makes sense to me, as it allows Steve's maven build to work and leaves the dependency management for these things to the end user. Inconvenient but safe. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260885",
            "date": "2012-04-24T19:50:45+0000",
            "content": "The issue goes much deeper. The issue also involves taking responsibility for third party jars also being in maven.\n\nIs it a requirement, that if i commit a patch, that the dependency MUST be in maven? what if its not?\n\nWhat if i commit https://issues.apache.org/jira/secure/attachment/12521033/SOLR-3296_noggit.patch right now?\n\nHow will maven work?\n\nIf everyone wants to pretend that maven is totally ok here, then I'll go commit that patch and lets see! "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13260888",
            "date": "2012-04-24T19:59:12+0000",
            "content": "Rob, my experience here is that you pose a very specific question (e.g. do war files force public dependencies) and when I answer it, you switch the subject to a different question. Not an illegitimate or uninteresting question, but a different question.\n\nThe instantaneous effect of committing that patch will be to break the convenience maven build until someone else does something else. If noggit is out there on central, then the fix will be a trivial adjustment to the template pom. If it's not, then my suggestion for a relatively painless solution is \n\n1) to add a CSV file to the top of the tree, where each line consists of:\n\nURL,GROUP-ID-INVENTED,ARTIFACT-ID-INVENTED,VERSION\n\n2) To add each one as a dependency to the corresponding pom with <optional>true</optional>\n\n3) implement code in the 'ant get-maven-poms' target to download them and run maven install:install-file on them using the information in the CSV.\n\nIf you all want one of these to be a non-optional dependency, then it's a job for someone to coax it onto central, probably via ossrh. That's work, but it doesn't have to happen in a hurry.\n\nThe CXF file could be created by scraping the ivy files, but that seems a lot of work.\n\nSteve, of course, gets first dibs on solving the problem, and he might not like my proposal.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13260892",
            "date": "2012-04-24T20:02:48+0000",
            "content": "\nRob, my experience here is that you pose a very specific question (e.g. do war files force public dependencies) and when I answer it, you switch the subject to a different question. Not an illegitimate or uninteresting question, but a different question.\n\nI agree its somewhat off-topic, I'm just trying to point out that these 'implementation-detail' jars have real costs and are not free. By maven exposing them the way it does, it more than doubles the surface area of responsibility of third party jars as compared to the binary packaging.\n\nAnd by maven not being able to download jar files from anywhere except maven itself, it really boxes you into a corner as far as managing dependencies. Would it really be so bad if someone adds a maven plugin that can just download a jar file from any http location? I could call it 'maven-antivirus-plugin'?  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261012",
            "date": "2012-04-24T21:02:21+0000",
            "content": "\nIf noggit is out there on central, then the fix will be a trivial adjustment to the template pom. If it's not, then my suggestion for a relatively painless solution is \n\n1) to add a CSV file to the top of the tree, where each line consists of:\n\nURL,GROUP-ID-INVENTED,ARTIFACT-ID-INVENTED,VERSION\n\n2) To add each one as a dependency to the corresponding pom with <optional>true</optional>\n\n3) implement code in the 'ant get-maven-poms' target to download them and run maven install:install-file on them using the information in the CSV.\n\nBenson, the Maven build used to be able to deal with \"non-Mavenized\" 3rd party jars, using a mechanism like you suggest (except that it pulled jars, & optionally POMs, from the local file system instead of from a URL).  That capability was removed in preparation for the 3.6 release.  \n\nYou can see what it used to look like in r1298247 of the Lucene/Solr grandfather POM - it was a profile that listed all of the necessary jars to pull from lib/ directories and put into the local maven repository.  Users were instructed to invoke it prior to using the Maven build: mvn -N -Pbootstrap install.\n\nFixing this aspect would simply require putting that stuff back for non-Mavenized jars.  This is how the Maven build worked before the era of Fake Maven Releases of Other People's Software (FMROOPS). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261016",
            "date": "2012-04-24T21:10:03+0000",
            "content": "So then i can commit my patch, and we could release tomorrow and maven should work? great!\n\nBut i suspect this isnt the case, you are conflating the 'maven build' with 'maven artifacts' no? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261031",
            "date": "2012-04-24T21:23:19+0000",
            "content": "\nSo then i can commit my patch, and we could release tomorrow and maven should work? great!\n\nBut i suspect this isnt the case, you are conflating the 'maven build' with 'maven artifacts' no?\n\nI am not conflating the two; as Benson mentioned, marking those non-mavenized dependencies as optional in the POMs of modules that need them would allow \"maven artifacts\" on Maven Central to be useable.  \n\nThe mode of use, however, would be: \n\n\n\tcheckout the tagged release, including dev-tools, from subversion (or maybe from git instead?)\n\trun ant get-maven-poms resolve ; mvn -N -Pbootstrap install in order to put the non-mavenized jars in one's local maven repository\n\tadd optional dependencies, using Benson's \"groupId-invented/artifactId-invented\" coordinates, to one's own project's POMs.\n\n "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13261032",
            "date": "2012-04-24T21:25:29+0000",
            "content": "There is some work to do before you can 'commit today and release tomorrow.' Steve didn't claim to the contrary and neither did I. It's not a ton of work, and it's not complex. If you want to avoid jars in svn, you'll need my download idea, if you don't mind jars in svn (and I've lost track of the Apache <del>politics</del> rules of those, then you just reactivate the old scheme. \n\nif any of those jars are patched, my suggestion to avoid controversy is <optional>true</optional> "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261040",
            "date": "2012-04-24T21:32:38+0000",
            "content": "Would it really be so bad if someone adds a maven plugin that can just download a jar file from any http location? I could call it 'maven-antivirus-plugin'? \n\n+1 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261043",
            "date": "2012-04-24T21:33:35+0000",
            "content": "If you want to avoid jars in svn, you'll need my download idea\n\nNot really - just use ant resolve prior to running the maven build. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261113",
            "date": "2012-04-24T23:00:20+0000",
            "content": "RE: maven-antivirus-plugin, as an experiment, I added the following to the Lucene/Solr grandfather POM, and Maven (v2.2.1 & v3.0.4) didn't barf:\n\n\n<project ... xmlns:maven-antivirus-plugin=\"xmlns:maven-antivirus-plugin=\"http://example.org/maven-antivirus-plugin\" ...>\n  ...\n  <properties>\n    <maven-antivirus-plugin:url coordinates=\"groupId-invented:commons-csv:1.0-dev-r609327:jar\">\n      http://example.com/somewhere/commons-csv-1.0-dev-r609327.jar\n    </maven-antivirus-plugin:url>\n    <maven-antivirus-plugin:url coordinates=\"groupId-invented:commons-csv:1.0-dev-r609327:pom\">\n      http://example.com/somewhere/commons-csv-1.0-dev-r609327.pom\n    </maven-antivirus-plugin:url>\n    ...\n  </properties>\n\n\n\nSo this is a syntactically valid way to shoehorn download links for such a plugin into a POM. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261118",
            "date": "2012-04-24T23:07:23+0000",
            "content": "Re: maven-antivirus-plugin - looks like it's already been built: http://evgeny-goldin.com/wiki/Ivy-maven-plugin "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261131",
            "date": "2012-04-24T23:23:21+0000",
            "content": "http://evgeny-goldin.com/wiki/Ivy-maven-plugin\n\nLicensed under Apache License v2.0: https://github.com/evgeny-goldin/maven-plugins/blob/master/ivy-maven-plugin/src/main/resources/license.txt, so it could be forked if necessary. "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13261241",
            "date": "2012-04-25T02:02:21+0000",
            "content": "You might be surprised by this, but I agree with you.\n\nI could build that plugin for you, mostly. Here's what I can't do for you. I can't arrange for you to declare a dependency in terms of the URL to a JAR. I'm sorry, but I can't undo the narrow-minded thinking of the founder of maven. What I can do is make it possible to have a two-pass maven build: the first run of maven would use such a plugin to download things (and, if you like, patch and build them from source), so that the second run would just find them in the local repo.\n\nActually, I'm not quite being truthful. Maven has an extension architecture for talking to repos called 'wagons'. I think that I could set up an wagon that defined a 'repository' in terms of that CSV file I described above. Not too awful, come to think of it. You add a declaration of that wagon to the pom, and a rather funny <repository> element to the pom ... but consumers might not thank you.\n\nThe central tenant of maven thinking (who does not pay enough rent) is that it's never a big deal to grab a jar and stick it in some convenient repo and use it, so why do we need to allow for getting jars from anywhere else? And lots of people all over find this tolerable. You don't, and I'm not particularly motivated to tell you that you're wrong. Still and all, given a days' warning of the need, Steve or I or anyone else who cared to do the reading could get noggit or anything else onto Central via OSSRH. If we want to ask the author first, we need time for a response. If we just want to push it under our own coordinates (I'd use 'us.dchbk'), then it's just the time it takes the jar to wander out there.\n "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13261352",
            "date": "2012-04-25T07:10:19+0000",
            "content": "Re: maven-antivirus-plugin - looks like it's already been built: http://evgeny-goldin.com/wiki/Ivy-maven-plugin\n\nInteresting find, Steve. It won't allow you to declare regular dependencies though, will it? I mean \u2013 I tried to write a plugin that would fetch a JAR and declare a system dependency on it locally but even validation phase is performed after dependency resolution so this failed. Didn't try the above plugin but from the description I see it attaches jars directly to reactor's classpath, bypassing regular dependency resolution? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261647",
            "date": "2012-04-25T13:52:05+0000",
            "content": "Didn't try the above plugin but from the description I see it attaches jars directly to reactor's classpath, bypassing regular dependency resolution?\n\nI haven't tried it yet either, but yes, I too think it's bypassing regular dependency resolution.  However, it's hooking into Ivy's capabilities, which makes me think this could be a long term solution for Lucene/Solr. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261650",
            "date": "2012-04-25T13:54:46+0000",
            "content": "From the description\nbinary distribution contains only the jars necessary for solrj and contrib plugins, and a solr.war\n\nThis is plainly false: all Solr jars, including solr-core and solr-test-framework, are included in the 3.6 binary distribution outside of the war. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261651",
            "date": "2012-04-25T13:58:56+0000",
            "content": "Its really not, I am talking about third-party jars.\n\nLike i said: binary distribution doesnt expose these third party jars, nor even list what they are.\nmaven distribution requires these to be published.\n\nJust look at the zip! There is no guava.jar or any of those other solr/lib\ndependencies included in the zip, however maven exposes these dependencies that are \"impl details of the war\".\n\nThe only third party dependencies included are:\n\n\tsolrj_lib (the very few the client library needs to work)\n\tsolr contrib plugins (since they are plugins and need these to work)\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261652",
            "date": "2012-04-25T14:05:05+0000",
            "content": "Its really not, I am talking about third-party jars.\n\nIt really is.  You are also talking about the difference between an app an and api.  If the api jars are included, then the binary dist is not exclusively an app. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261657",
            "date": "2012-04-25T14:08:38+0000",
            "content": "But these inner dependencies are not exposed as APIs.\n\nNow you can see why the commons-csv thing was surprising to us. Because we package it inside the war only,\nas an implementation detail.\n\nIf someone wants to use solr-core.jar and needs commons-csv, its up to them to get it: we werent PUBLISHING IT!\n\nOn the other hand: maven distribution was! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261661",
            "date": "2012-04-25T14:13:27+0000",
            "content": "Robert,\n\nCall me crazy, but I've read your comments on this issue as claiming that we should not publish solr-core (etc.) on Maven Central, because we don't do that in the binary dist.  Well, we do do that in the binary dist.\n\nSo, this time without avoiding the question: why should we not publish solr-core on Maven Central?\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261665",
            "date": "2012-04-25T14:19:28+0000",
            "content": "\nSo, this time without avoiding the question: why should we not publish solr-core on Maven Central?\n\nBecause maven requires that its dependencies are also in maven, whereas the binary distribution does not:\nit exposes its \"innards\".\n\nLet's talk about how we can make some concrete process on this issue, throwing aside COMPLETELY the whole\n.war-third-party-exposure, and the fact that we are releasing as an \"application\" one way and as an \"api\" another way.\nLets just table that for a second, since we will probably end up disagreeing on it anyway \n\nI think the maven artifacts should not be built from the source tree, they should instead be built from\nthe binary release (e.g. unzipping the .zip + augmenting with poms). If we build them this way, this has \na number of advantages:\n\n\texact same jar files etc are put into the maven/ folder that are in the binary release. they are just\n  augmented with poms. \n\twe can now easily validate, that maven/ folders don't contain anything (besides pom.xmls etc), that\n  aren't found by unzip -l binary release. we can also test that these jar files are exactly the same.\n\n\n\nI think this would be a good, non-controversial step to improving the situation. Such a check would have\ndetected the commons-csv situation, no? It also gives us some more faith in the maven artifacts, since\nthey are the exact same jar files we are testing in the binary package.\n\nWe could do this with lucene, too. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261669",
            "date": "2012-04-25T14:26:00+0000",
            "content": "And in the idea above, obviously -sources.jar and -javadocs.jar are \"exempt\", as they\nare maven-specific and not in the binary packaging. Thats fine: I'm talking about\nthe actual binary jars. Our checking script would exclude those.\n\nI think currently these are \"the same\" in the sense that\nthey are built from the same code, but currently have timestamp differences as they\nare pulled from build/. \n\nOn the non-maven side there are improvements like this as well: for example I think\nthe lucene jars used by solr are \"rebuilt\" in the process. But i think it would be\nmore ideal if solr 'prepare-release', when populating the jar, populated these lucene\njars from lucene's binary release in dist/ the same way: so they are the exact same\njars that were released in the lucene binary distribution.\n\nI dont think this stuff has to be done immediately, and i know its complicated and being\nreally pedantic, but I think it would be a good step. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261670",
            "date": "2012-04-25T14:27:10+0000",
            "content": "\nSo, this time without avoiding the question: why should we not publish solr-core on Maven Central?\n\nBecause maven requires that its dependencies are also in maven, whereas the binary distribution does not: it exposes its \"innards\".\n\nThis is an argument against Maven generally, not exclusively the Solr artifacts; I view it as a thinly veiled re-assertion that Lucene/Solr should not support Maven at all.  Again: -1.\n\nThe fix here is not to stop publishing on Maven Central, but rather as you say on the issue: make the Maven Central artifacts like the binary artifacts.  Using your logic, excluding solr-core from the Maven Central artifacts would make the two \"not the same\", and hence would be WRONG!!!\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13261673",
            "date": "2012-04-25T14:30:52+0000",
            "content": "I think the maven artifacts should not be built from the source tree, they should instead be built from the binary release (e.g. unzipping the .zip + augmenting with poms).\n\n+1, I've looked at doing this in the past but didn't see a quick way to do it.\n\n\nAnd in the idea above, obviously -sources.jar and -javadocs.jar are \"exempt\", as they\nare maven-specific and not in the binary packaging. Thats fine: I'm talking about\nthe actual binary jars. Our checking script would exclude those.\n\nI think currently these are \"the same\" in the sense that\nthey are built from the same code, but currently have timestamp differences as they\nare pulled from build/.\n\nOn the non-maven side there are improvements like this as well: for example I think\nthe lucene jars used by solr are \"rebuilt\" in the process. But i think it would be\nmore ideal if solr 'prepare-release', when populating the jar, populated these lucene\njars from lucene's binary release in dist/ the same way: so they are the exact same\njars that were released in the lucene binary distribution.\n\nI dont think this stuff has to be done immediately, and i know its complicated and being\nreally pedantic, but I think it would be a good step.\n\n+1 to all of these ideas. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261678",
            "date": "2012-04-25T14:37:36+0000",
            "content": "\nThis is an argument against Maven generally, not exclusively the Solr artifacts; I view it as a thinly veiled re-assertion that Lucene/Solr should not support Maven at all. Again: -1.\n\nIts really not that: and though i've asserted this before (especially when maven had no tests, but now it does), when\ndid I do this on the recent thread? I have stated that I think we shouldn't release maven if its \"different\" than our\nother packaging because I think that causes it to be more of a mystery. I opened this issue to improve the situation,\nnot to have an issue to argue about maven. you can s/maven/rpm/ and i feel the same way about all of this: these are\njust different packaging formats but I think the underlying products we release should be the same.\n\nI'm upset about the maven packaging on this issue because in my opinion, it packages solr up like an API which is \ndifferent than our binary release: which packages it up to be used as an application. Frankly you really can't\ndo much else with the solr binary packaging except use it as an application: those solr-core.jar's etc do you\nabsolutely no good unless you hunt down all the jars (or yank em out of solr.war/WEB_INF, maybe some IDEs do that),\nyourself.\n\n\n+1, I've looked at doing this in the past but didn't see a quick way to do it.\n\nI also don't think we should do it for 4.0, its too risky. But we should look at it for the future. A few things to think about:\n\n\n\tits annoying when releasing lucene/solr that you cant do it all with one command line. So I think we would add a top-level \"prepare-release\" to trunk/build.xml that would simply invoke solr/ prepare-release. And solr's prepare-release would depend on lucene's. That would be nice as we have one single command for this.\n\tsince solr prepare-release now knows that lucene's is also built, I think it would be easier for it to use the jars from the lucene release. easier, not easy.\n\n\n\nthats just the non-maven parts, the maven stuff is more blurry to me. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13261688",
            "date": "2012-04-25T14:53:21+0000",
            "content": "And yes, i did suggest as a compromise that perhaps we dont even put solr in maven at all, just lucene,\n(and this issue is supposed to be even more of a compromise, that we still put solr in maven, but package \nmaven-solr up as an application just like the binary packaging). The latest suggestion is supposed to be\neven more of a compromise.\n\nThe idea behind these compromises is so that people who like maven are happy, and so that PMC members\nwho don't understand maven feel comfortable with us releasing maven artifacts and these threads about\nmaven don't keep popping up anymore.\n\nSeparately I do make vicious assaults on how maven works internally etc, because I think it deserves that.\nBut thats unrelated to whether or not we release maven artifacts.\n\nOf course in an ideal situation we release lucene/solr and its instantly available everywhere in every single\npackaging format in perfect shape: rpm,yum,maven,bsd/macos ports,...: we just don't have the resources to do\nall of that.\n\nSo when it comes to maven artifacts, you can expect me to be critical of it in the future, especially when\nits behavior differs from the other artifacts (like app versus API). \n\nNone of this is an assault on the idea of us producing 'maven artifacts', none of it is saying \n\"i don't see the value of maven artifacts\", or \"maven artifacts cant do cool things\", or any of that. \n\nAnd sometimes when i say 'maven' its confusing whether i refer to 'maven the build system' or 'maven the artifacts'.\nThis is because maven itself makes this confusing by conflating multiple things. Its not my fault.\n\nIts just trying to get this packaging stuff under control. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13261840",
            "date": "2012-04-25T17:44:46+0000",
            "content": "\nI have stated that I think we shouldn't release maven if its \"different\" than our\nother packaging because I think that causes it to be more of a mystery.\n\nyou can s/maven/rpm/ and i feel the same way about all of this: these are\njust different packaging formats but I think the underlying products we release should be the same.\n\nI think the maven artifacts should not be built from the source tree, they should instead be built from the binary release (e.g. unzipping the .zip + augmenting with poms).\n\n+1\n\nThis would make me more comfortable with our Maven artifacts...\n\nDo we know of any downstream repos that package up Solr?  Do they\nalso match the artifacts in our binary release?\n\nCould such a stronger decoupling of \"our releases\" and \"pushing\nto Maven Central\" also mean that issues like SOLR-2770 (where, I\nthink, only the Maven POMs were messed up for the 3.4.0 release) might\nbe correctable in the future w/o having to cut another \"real\"\nrelease...? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13262650",
            "date": "2012-04-26T14:48:58+0000",
            "content": "There is a lot of discussion here and I don't want to complicate anything.\n\nWhat I do want to say, as a user of Maven and of Lucene/Solr's Maven artifacts specifically, is that it is awesome that I can have a maven based project that has a dependency on the Solr test framework and it just works thanks to all of the dependency resolution of Maven, and thanks to Maven and IDE integration, IntelliJ grabs all the source which helps tremendously \u2013 its automatic.  My code can either be strictly a SolrJ client or it can extend Lucene or Solr.  I don't want this to go away.  Once upon a time it didn't work or the dependencies metadata declared were poor and I did my part in making it work well (and certainly Steve did too). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262659",
            "date": "2012-04-26T15:12:36+0000",
            "content": "I don't care if maven can cook me dinner or get me a beer out of the fridge.\n\nThousands of people can comment on this issue about how great it is, no one cares.\n\nThe bottom line is that people are going to be uncomfortable with it being in our releases, \nand these threads will continue to pop up, as long as the maven artifacts are handled \ndifferently from the other packaging: its just that simple.\n\nBy making it consistent with the other packaging people are less likely to complain,\nbecause then its not such a mystery and isnt a \"separate/different product\". "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13262676",
            "date": "2012-04-26T15:37:34+0000",
            "content": "bq By making it consistent with the other packaging people are less likely to complain,\nbecause then its not such a mystery and isnt a \"separate/different product\".\n\nI think that's the point David was making \u2013 if you go with manual POM + released JARs packaging then things will actually be of poorer quality (and very likely broken) for lots of maven users. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262680",
            "date": "2012-04-26T15:40:15+0000",
            "content": "\nthen things will actually be of poorer quality (and very likely broken) for lots of maven users.\n\nI'm not sure 'lots' is the correct word here. I think the vast majority of solr users use it\nas an application. The vocal ones here are the ones that are committers who PREFER to use maven,\nbut thats a vocal minority. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13262683",
            "date": "2012-04-26T15:44:10+0000",
            "content": "\nthen things will actually be of poorer quality (and very likely broken) for lots of maven users.\n\nI'm not sure 'lots' is the correct word here. I think the vast majority of solr users use it as an application. The vocal ones here are the ones that are committers who PREFER to use maven, but thats a vocal minority.\n\nI completely agree with Robert here! Solr's only artifacts should we solrj and the war file. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13262718",
            "date": "2012-04-26T16:32:29+0000",
            "content": "Again, solr is an API and an application \u2013 the plugin structure is well advertised, promoted, and well used.\n\nIf anything, this discussion points me to think that the binary dist should include a solr-lib folder (though I don't really care)\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13262739",
            "date": "2012-04-26T16:57:22+0000",
            "content": "If anything, this discussion points me to think that the binary dist should include a solr-lib folder (though I don't really care)\n\nIt already does - the folder is called dist/, and it includes all of the API .jars right there alongside the war. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262744",
            "date": "2012-04-26T17:00:38+0000",
            "content": "it doesn't include their libs. unzip it and see! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262747",
            "date": "2012-04-26T17:02:50+0000",
            "content": "like i said: this whole issue came out of third party dependency issues.\n\nI've said it before, and I'll say it again (I might have to start copy/pasting myself?!):\n\nYou can unzip the binary release and see that third party\ndependencies such as guava are not in it. Third party dependencies of solr \nare only inside the solr.war (treated as application).\n\nHowever the maven release treats it as an API, exposing the innards of the solr.war\napplication and making us responsible for these addtl dependencies. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13262750",
            "date": "2012-04-26T17:06:21+0000",
            "content": "it doesn't include their libs. unzip it and see!\n\nI agree.  I've never disagreed with this; it is a fact.\n\nBy contrast, you have, at least from my perspective, asserted that Solr's API jars are not included in the official binary dist, when they clearly are.  unzip it and see!\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262759",
            "date": "2012-04-26T17:22:03+0000",
            "content": "Nope, never. this issue has always been about third party dependencies. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262764",
            "date": "2012-04-26T17:24:30+0000",
            "content": "I'm just going to repeat the description of the issue, since people are having problems finding it:\n\nLets take the commons-csv scenario:\n\n\n\tapache-solr-3.5.0 binary distribution contains no actual commons-csv.jar anywhere,\n  in fact it contains no third party jars (the stuff present in solr/lib) at all.\n\tbinary distribution contains only the jars necessary for solrj and contrib plugins, and a solr.war\n\n\n\nI think the maven artifacts should match whats in the binary release (no third party jars\ninside the .war are \"exposed\", we just publish the .war itself). This exposes a lot less surface area. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13262779",
            "date": "2012-04-26T17:33:16+0000",
            "content": "right, so given the problem:\n\nbinary distribution contains only the jars necessary for solrj and contrib plugins, and a solr.war\n\nThe solution is to add the dependencies for solr-core.jar to the binary distribution. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13262781",
            "date": "2012-04-26T17:37:02+0000",
            "content": "Ugh; I can't stay away from this soap opera train wreck.\n\nI'm not on the PMC so perhaps I should bud out, but if a successful conclusion to this JIRA issue means that dependencies such as commons-csv don't wind up in maven central, thus preventing me from effectively utilizing Solr as an API with Maven, I'm -1.  All sorts of open-source dependencies are in maven central published \"unofficially\" using coordinates of another project that needed it there, customized or not.  What's it to you?\n\nI understand if Rob, Mike, etc. want nothing to do with Maven and I think that's just fine.  But please don't stand in Steve and I's way. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13262818",
            "date": "2012-04-26T18:19:42+0000",
            "content": "\nAll sorts of open-source dependencies are in maven central published \"unofficially\" using coordinates of another project that needed it there, customized or not. What's it to you?\n\nI don't care. we shouldn't release other peoples code. Thats what got us into trouble in the first place.\n\n\nI understand if Rob, Mike, etc. want nothing to do with Maven and I think that's just fine. But please don't stand in Steve and I's way.\n\nA cavalier attitude about whats in our releases doesn't help increase our confidence in this maven business. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13262884",
            "date": "2012-04-26T19:04:56+0000",
            "content": "I understand if Rob, Mike, etc. want nothing to do with Maven and I think that's just fine. But please don't stand in Steve and I's way.\n\nIt's not that I want to stand in your way.\n\nI agree that many users want to consume Lucene/Solr from Maven's\ncentral repository, and I agree that users want to to build their own\nprojects, depending on Lucene/Solr, using Maven.  That's all great.\n\nI want Lucene/Solr to be widely accessible/adopted and so pushing to\nMaven central helps achieve that goal.\n\nI just don't think it should be this PMC that votes on / pushes our\nreleased artifacts to Maven.\n\nPushing to Maven has clear risks (\"we\" got \"in trouble\" for it), not\nall PMC members understand the Maven policies/conventions, it's a\ndistraction (\"we\" are supposed to be focused on building great search\nengines around here).\n\nWe don't push to all the other great repositories (apt, yum, FreeBSD,\netc.) out there.  We don't understand their conventions either.  The\nPMC doesn't vote when a downstream package maintainer pushes our\nartifacts into their repository.  Why should Maven central be any\ndifferent from other repositories?\n\nAnd I still assert that a stronger decoupling the PMC voting on the\n\"true\" Lucene/Solr artifacts from pushing-to-Maven-central would\nnet/net be a win for Maven users.  Eg, Lucene 3.4.0's Maven artifacts\nwere broken (SOLR-2770), and now apparently also 3.6.0's (SOLR-3411).\nBut if the two events were fully decoupled then the Maven POMs could\nbe re-pushed without this PMC being involved.  And issues like this\n(\"which jars/wars should be pushed into Maven central... solr.war\nexpanded or not\") wouldn't be this PMC's business.  The Maven experts\nwould be free to make such decisions.\n\nMaybe... a possible compromise here would be to continue pushing to\nMaven central, but as a downstream event (after a release) within this\nproject.  Meaning, the PMC votes on the \"original\" sources/convenience\nbinaries, but then the Maven experts around here can separately (once\nthe vote passes) take that binary release, expand it, attach POMs,\netc., and push to Maven central.  This would mean the PMC doesn't vote\non what's-pushed-to-Maven, but we continue using this project's\ninfrastructure (svn, continuous builds, Jira, etc.) to push to Maven\ncentral.  Could something like that work? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13262895",
            "date": "2012-04-26T19:10:02+0000",
            "content": "If I understand the concerns of this issue \u2013 it is that reviewing the binary distribution (the .zip/.tgz) does not fully expose the dependencies we assume.\n\nThe core of that problem is that solr dependency structure is a mess.  In SOLR-3400, we need to be explicit in ant about what dependencies are for solrj vs solr-core vs solr.war\n\nThe solr.war dependencies are hidden implementation details.  But solr-core.jar file should include its dependencies too. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13263107",
            "date": "2012-04-26T20:33:39+0000",
            "content": "\nLucene 3.4.0's Maven artifacts were broken (SOLR-2770), and now apparently also 3.6.0's (SOLR-3411).\n\nI just resolved SOLR-3411 as \"Not a Problem\".  The brokenness (from that issue's reporter's perspective) was an example of exactly the non-virality that you have been lobbying for, Mike. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13263116",
            "date": "2012-04-26T20:38:24+0000",
            "content": "But if the two events were fully decoupled then the Maven POMs could be re-pushed without this PMC being involved.\n\nBenson asserted elsewhere that if an ASF-external project wanted to push Lucene/Solr Maven artifacts, they would NOT be able to use org.apache.lucene/solr as the groupId for those artifacts.  I view that as a significant problem, if it is in fact true. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13263121",
            "date": "2012-04-26T20:40:34+0000",
            "content": "Who enforces that?\n\nChris male had no problem putting up langdetect under com.cybozu.labs, and he has nothing to do with them \n\nhttp://search.maven.org/remotecontent?filepath=com/cybozu/labs/langdetect/1.1-20120112/langdetect-1.1-20120112.pom "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13263125",
            "date": "2012-04-26T20:47:49+0000",
            "content": "\nMaybe... a possible compromise here would be to continue pushing to\nMaven central, but as a downstream event (after a release) within this\nproject. Meaning, the PMC votes on the \"original\" sources/convenience\nbinaries, but then the Maven experts around here can separately (once\nthe vote passes) take that binary release, expand it, attach POMs,\netc., and push to Maven central. This would mean the PMC doesn't vote\non what's-pushed-to-Maven, but we continue using this project's\ninfrastructure (svn, continuous builds, Jira, etc.) to push to Maven\ncentral. Could something like that work?\n\nFrom the Apache board perspective, I suspect that this would be viewed as a distinction without a difference; that is, no matter whether the PMC votes on Maven artifacts, the fact that they would be hosted by the Lucene/Solr project, and for the foreseeable future anyway, published by a PMC member, the PMC will continue to carry responsibility for Mavenish things when they go wrong.\n\nThat said, I'd be fine with this.  The only (slight) snag: Maven artifacts have to be signed; for the .jars/.war that's not a problem - they can be taken from the binary distribution.  The POMs, by contrast, will have to be separately signed by a Lucene/Solr PMC member.\n\nThe PMC is supposed to only be voting on source releases anyway, right? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13263195",
            "date": "2012-04-26T22:13:23+0000",
            "content": "+1 to continue publishing to mvn-repositories\n\nIt's a huge benefit for many users and downstream professionals. We have at least 2 committers willing to maintain this, and we're getting better at it each time. I think that's all it takes.\n\nIt seems actually that the commons-csv issue - which was not a Maven issue - has actually helped us clean up a lot of mess in our sources, build system, dependency structure etc. It's been too easy to include questionable libs or non-released libs, and that's the real problem if you ask me. So publishing to mvn-repo actually keeps us accountable in legally being good Apache citizens as well as shipping higher quality, more stable stuff. It's a Good Thing\u2122 that Noggit got its release. It will be a good thing if/when commons-csv ships a release that we can depend on without patching.\n\nRegarding \"hiding\" stuff in our binary .jars or .war - that won't solve anything. Some people actually run more than Solr in their app-server, add their own plugins etc. So the risk of package name clash or slf4j binding incompatibilities actually increases, the more things we throw into the .war. I just had a project with a webapp using SolrJ needed slf4j 1.5.8, which crashed with SolrJ's jcl-over-slf4j (1.6.1) dependency. The solution was simply to exclude the 1.6.1 dep and things worked fine. If SolrJ was just one huge .jar with all deps melted together that would not be an option.\n\nI'm also +1 for including all required deps in the binary release of Solr. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13263202",
            "date": "2012-04-26T22:24:22+0000",
            "content": "\nIt seems actually that the commons-csv issue - which was not a Maven issue \n\nReally? then explain this.\n\nThanks.\n\n\n$ unzip -l apache-solr-3.5.0.zip | grep commons-csv\n$ \n\n\n\nBut,\n\nhttp://search.maven.org/#artifactdetails|org.apache.solr|solr-commons-csv|3.5.0|jar "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13263205",
            "date": "2012-04-26T22:29:31+0000",
            "content": "I still think this is a misunderstanding of what a \"maven release\" is by the board. I mean the POM states clearly:\n\n  <groupId>org.apache.solr</groupId>\n  <artifactId>solr-commons-csv</artifactId>\n  <name>Solr Specific Commons CSV</name>\n  <version>3.5.0</version>\n  <description>Solr Specific Commons CSV v1.0-SNAPSHOT-r966014</description>\n\n\nSo it's not commons-csv. It's solr-SPECIFIC-commons-csv. Maven folks don't just download jars from maven central, they use pom dependencies. If you depend on the above, it's hard to call it an official commons-csv release... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13263207",
            "date": "2012-04-26T22:34:56+0000",
            "content": "\nIt's been too easy to include questionable libs or non-released libs, and that's the real problem if you ask me.\nSo publishing to mvn-repo actually keeps us accountable in legally being good Apache citizens as well as shipping higher quality, more stable stuff. \n\nThats bullshit. Being in maven repositories doesn't make anything more legal. \n\nRequiring that all dependencies be in maven harms software projects:\n\n\tit prevents good features from being added, for example the most popular Tika issue (outlook support) is just hung on this stupid stuff (TIKA-623)\n\tit encourages buggy software. Perhaps its \"conventional\" that software projects just pass the blame down along, but if we have bugs that break our release we should make our release work instead of passing blame.\n\n\n\n\nIt's a Good Thing\u2122 that Noggit got its release.\n\nI agree. I upload my patch to start using it nearly a month ago. Its too bad no maven supporters\nhave done anything to make it accessible via maven.\n\nThe fact its a real release is good, and the patch is good. Its time to commit it. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13263208",
            "date": "2012-04-26T22:36:36+0000",
            "content": "I just resolved SOLR-3411 as \"Not a Problem\".\n\nOK thanks Steve.  I'm glad it's not a real problem.\n\nFrom the Apache board perspective, I suspect that this would be viewed as a distinction without a difference;\n\nTrue, but I think that's OK.  It's a compromise.\n\nThe PMC is supposed to only be voting on source releases anyway, right?\n\nLegally, yes, but in practice, we are also testing and pushing out the\nconvenience binaries (and, Maven's artifacts) at the same time.  They\nare all read-only once published. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13263220",
            "date": "2012-04-26T22:56:46+0000",
            "content": "\nIt's been too easy to include questionable libs or non-released libs, and that's the real problem if you ask me. So publishing to mvn-repo actually keeps us accountable in legally being good Apache citizens as well as shipping higher quality, more stable stuff.\n\nThats bullshit. Being in maven repositories doesn't make anything more legal.\n\nI'm not saying that. I'm saying that a positive side effect of publishing all our release artifacts to a broader public is that it helps detect bad and hacky practices in our own code. If we feel we need to hide the truth about our dependencies or build artifacts then it is better to put a bright light on why than shuffling things underneath a carpet.\n\nOnce in a while we judge that it may still be more gain than pain to include some unreleased lib or a patched version of a lib in our distro (after having first tried to get it fixed upstream) and that's fine with me; if repackaging properly under new namespace and include this as a (temporary) custom dependency, both in our binary distro and therefore also in maven-repos. But we should try to replace these custom deps by official release versions when possible. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13263225",
            "date": "2012-04-26T23:00:18+0000",
            "content": "But you need to realize a lot of software has official releases, they just dont care about maven.\n\nA great example of that is the noggit release. Again i've had a patch up for a month, and I think\nit makes our release more clean to depend on this real release, than to have code copied from apache labs.\n\nBut i've waited so long in the hopes someone will step up and put the thing in maven, i've detailed\nout the reasons on SOLR-3296. \n\nIn this case, maven is making things less legal. I hope everyone sees that! "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13263318",
            "date": "2012-04-27T03:04:46+0000",
            "content": "But you need to realize a lot of software has official releases, they just dont care about maven.\nA great example of that is the noggit release. Again i've had a patch up for a month, and I think it makes our release more clean to depend on this real release, than to have code copied from apache labs.\n\nI don't think Noggit is a good example. It is written by Yonik and prohibited from releasing anything since it's part of Apache Labs, so probably noone knows about it. If it rather had started its life as part of Lucene's source code and later been spawned out as its own project, it would have gotten more love and care, would have had Javadocs, some documentation etc. So having Noggit distributed to Maven is as close as asking your colleague to publish it.\n\nI would rather state that most Java libraries do care about Maven. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13263343",
            "date": "2012-04-27T04:58:56+0000",
            "content": "We are a bit lost on what we are talking about \u2013 I don't expect we will all agree on the best maven strategy.\n\nSomething mentioned over an over in this thread is concern that sonatype maven central is somehow the repository.  That is nonsense, there is no reason to do crazy plugins to try to pretend stuff is there when we can just add (or suggest adding) other potential repositories.  If we are worried about supporting the 1-off crazy patched jar, we can point it to something as crazy as:\n\n<pluginRepositories>\n   <pluginRepository>\n     <id>maven-timestamp</id>\n     <url>http://maven-timestamp-plugin.googlecode.com/svn/trunk/repository</url>\n   </pluginRepository>\n</pluginRepositories>\n\n\n\nbut I feel like i am just adding more noise to an issue without focus "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13263397",
            "date": "2012-04-27T06:33:02+0000",
            "content": "\n If we are worried about supporting the 1-off crazy patched jar, we can point it to something as crazy as:\n\nReally? Then you can also tell infra to disable the release mirroring system: hey its useless, we just have svn.\n\nSomehow I don't think that would go over well: they would probably just delete the jar.\n\nWe still dont have:\n\n\ta way to handle patched dependencies for maven\n\ta way to handle dependencies that are not in maven\n\ta packaging system for maven consistent with our other packaging.\n\n\n\nIn other words: maven is out of control. \n\nI'm now with Mike, I think we have to get this out from under our PMC and do it some other way.\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13263839",
            "date": "2012-04-27T17:56:17+0000",
            "content": "I'm now with Mike, I think we have to get this out from under our PMC and do it some other way.\n\nWhat changed your mind?  (Serious question) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13263890",
            "date": "2012-04-27T19:04:16+0000",
            "content": "\nWhat changed your mind? (Serious question)\n\nSeriously: I want our releases clean and bulletproof from problems.\n\nPeople can say we only vote on the source release, but we can't pretend that we are not\nresponsible for binary/maven artifacts we produce too. The commons-csv issue showed that\nas a PMC we get hassled about these things too!\n\nSo when we put stuff up in people.apache.org/~whoever/staging_area/lucene-solr-XXX.YYY,\nI want everything in that folder to be packaged correctly, not illegal, not causing\nproblems to other projects, etc, etc.\n\nIts unrelated to the benefits of maven. I just want this stuff clean.\n\nSo I got frustrated with some of the responses/suggestions here that seem like maybe \npeople aren't taking this stuff as seriously as we should be.\n\nWe are held responsible for the stuff we put out, so if people feel \"anything goes\"\nfor the maven artifacts as long as they work, then I don't know how we as a PMC are\nsupposed to have any confidence at all that they are clean!\n\nYou can say i'm being overly anal or a policeman or whatever, but I feel I have to\nbe watching this maven stuff like a hawk right now (even though i dont really understand\nit). \n\nSo it starts to become clear to me, that not everyone cares so much about the maven\nartifacts being proper and correct. With that being the case, I don't want to be \nresponsible for it, I'd just as soon absolve myself of it, get back to working on\nsearch engines, and let someone else (not our PMC) be held to the fire for it.\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13264020",
            "date": "2012-04-27T22:04:10+0000",
            "content": "So I got frustrated with some of the responses/suggestions here that seem like maybe people aren't taking this stuff as seriously as we should be.\n\nI'm taking this stuff seriously.  \n\n\n\tpatched dependencies: There is no patched-dependencies solution for Maven at this point, but putting patched dependencies up as forked projects with \"download jar\" links on github makes them exactly like other non-mavenized dependencies, so if Lucene/Solr goes that route independent of Maven concerns, then it isn't a separate issue for Maven.\n\n\n\n\n\tnon-mavenized dependencies: the standard Maven-proponent answer (i.e. \"just put them in Maven\") may work some of the time, but it certainly isn't a panacea, and Lucene/Solr needs to cover all bases.  I think ivy-maven-plugin could address most, and maybe all, of the cases where \"just put them in Maven\" doesn't work.\n\n\n\n\n\tpackaging: I would split this into two concerns:\n\t\n\t\tMaven binary jar/war artifacts should be identical (bit for bit) to the official binary artifacts.\n\t\tMaven POMs should require the same dependencies that Solr ships with.  In other words, as I stated previously on this issue: POMs for Solr jars/war published on Maven Central should never require (i.e., have a non-optional dependency on) a third party artifact if that third party dependency is not directly included in the binary package; the contents of the war don't count as \"inclusion in the binary package\".\n\t\n\t\n\n\n\nThis issue is supposed to be about this last point.  I don't agree with the idea myself.\n\nHere's why: Maven POMs should list the dependencies required to use the associated artifact.  I seriously don't understand why it matters if this differs from the 3rd party libraries shipped (directly, not in the war) with the convenience binary package.\n\nAnd, as Ryan has stated on this issue, what's included in the convenience binary package is subject to change - we could just start including all 3rd party libraries in the Solr convenience distribution.  Why not? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717189",
            "date": "2013-07-23T18:47:24+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971236",
            "date": "2014-04-16T12:57:32+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16331675",
            "date": "2018-01-19T03:08:31+0000",
            "content": "Resolving, I think the Maven artifact situation is now under control. "
        }
    ]
}