{
    "id": "SOLR-3101",
    "title": "Add an operator to edismax for word order (Proximity / NEAR)",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A project I'm working on requires word order searching. The users are accustomed to Sphinx search, and expect a query like [ A << B ] to return only documents that contain the term A before the term B.\n\nI believe this can currently be done with the surround parser (SOLR-2703), but we lack an operator for it. It would be great to add it, so that word order searches can be combined by users into sophisticated queries. \n\nNote that this should also support a query like [ A << A], which would require that the term be in the document twice (the first instance before the second).\n\nThis issue is part of a meta issue, SOLR-3028, that is requesting two other operators in edismax (quorum search and exact match).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251521",
            "date": "2012-04-11T12:55:31+0000",
            "content": "Suggested syntax:\n\n\nA NEAR/N B      - e.g. foo NEAR/5 bar will find bar within 5 positions from foo, same as \"foo bar\"~5\nA ONEAR/N B     - ordered near, finds B within 5 positions *after* A\n\n\n\nA question is if span queries allow us to do  more complex proximity expressions like \"a brown fox\" NEAR (\"blue fence\" OR \"green gate\") "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13251559",
            "date": "2012-04-11T13:38:30+0000",
            "content": "A question is if span queries allow us to do more complex proximity expressions like \"a brown fox\" NEAR (\"blue fence\" OR \"green gate\")\n\nVery much so.  That query would be a SpanNearQuery of a SpanNearQuery(\"blue fence\") and a SpanOrQuery of two SpanNearQueries.\n\nThe surround query parser can do this (but does not analyze the terms currently) but a less friendly syntax. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251888",
            "date": "2012-04-11T20:14:42+0000",
            "content": "Cool. Of course a proper parser framework with a grammar would make it easier to implement this correctly (LUCENE-1567), but with the current edismax we could try to support the simple A NEAR/N B as a start? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13251893",
            "date": "2012-04-11T20:23:49+0000",
            "content": "I think traditionally the problem is you have to convert everything to spans to do this.\n(Spans can only wrap spans)\n\nThis isn't a lossless conversion: e.g. for individual terms SpanNear has different \nsemantics than SloppyPhraseQuery... but maybe thats ok as a caveat.\n\nOn the other hand for the long term something like LUCENE-2878 would make such a task \na lot easier.\n\nreally its ridiculous the lucene queryparser doesn't have a NEAR operator. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251931",
            "date": "2012-04-11T21:22:16+0000",
            "content": "really its ridiculous the lucene queryparser doesn't have a NEAR operator.\n\n+1 "
        },
        {
            "author": "Mike Lissner",
            "id": "comment-13252193",
            "date": "2012-04-12T04:42:39+0000",
            "content": "Jan, with the ONEAR, will there be a way to indicate that infinite distance between the terms is OK? E.g. I don't care how far they are from each other, so long as they're in this order?  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13252254",
            "date": "2012-04-12T07:11:07+0000",
            "content": "That's up to us to define. We could allow a special syntax as for range searches for this, e.g. ONEAR/*.\n\nWe'd also need to define what should be the default N, if people write A NEAR B. Perhaps 25? Could be configurable through e.g. &q.near=N.\n\nShould we perhaps open a LUCENE Jira for the low-level part of this - which \"blocks\" this issue? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412225",
            "date": "2012-07-11T22:26:27+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429732",
            "date": "2012-08-07T03:42:32+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451084",
            "date": "2012-09-07T22:33:12+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward)\n "
        }
    ]
}