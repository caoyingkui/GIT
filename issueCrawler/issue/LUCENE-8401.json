{
    "id": "LUCENE-8401",
    "title": "Add PassageBuilder to help construct highlights using MatchesIterator",
    "details": {
        "components": [
            "modules/highlighter"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "Jim and I discussed a while back the idea of adding highlighter components, rather than a fully-fledged highlighter, which would allow users to build their own specialised highlighters.\u00a0\u00a0To that end, I'd like to add a PassageBuilder class that uses the Matches API to break text up into passages containing hits.",
    "attachments": {
        "LUCENE-8401.patch": "https://issues.apache.org/jira/secure/attachment/12931767/LUCENE-8401.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16545040",
            "author": "Alan Woodward",
            "content": "Here is a patch containing the following classes:\n\n\tPassage -> a representation of a highlight snippet, with text, start and end offset, and a list of internal hits\n\tPassageBreaker -> an interface that defines where passages should start and end, and if a hit should be added to the current passage or should start a new one\n\tPassageBuilder -> public API that iteratively returns new Passage objects\n\tBreakIteratorPassageBreaker -> simple implementation of PassageBreaker\n\n\n\nThe passage builder uses a wrapper around its MatchesIterator to enable it to peek at the position of the next hit, which means that we can improve clustering for hits that looks like [A .............. B .. C], where A and B are within the maximum snippet size, but A and C are not. ",
            "date": "2018-07-16T10:26:26+0000"
        },
        {
            "id": "comment-16545661",
            "author": "David Smiley",
            "content": "This is a fine idea Alan.  I especially like the peeking iterator idea.\n\n\n\tShould there be a new \"o.a.l.highlighter.common\" package for these components?\n\ttypo: \"continaing\", \"Definnes\"\n\tMaybe PassageBuilder's lifecycle would be simpler if you simply re-create it for each \"text\" value?  Then it would quite simply be an Iterator<Passage>.  Well nevermind; there's the IOException and reuse of the Peeking thing.\n\tmake Hit members protected and/or add getters.  Someone might want to add other interesting metadata.\n\tIn Passage's Constructor, compare the end offset if start offset is equal.  (Comparator.thenComparing makes this easy).  I ran into this ambiguity while working on LUCENE-8286.  Maybe Hit should implement Comparable?\n\n ",
            "date": "2018-07-16T19:38:02+0000"
        },
        {
            "id": "comment-16545682",
            "author": "David Smiley",
            "content": "Along the idea of reusable components, adding a PassageFormatter would be good too. \u00a0You could take the one from the UH. \u00a0I enhanced it a little in the PR for\u00a0LUCENE-8286. \u00a0A reusable PassageScorer may be problematic until some time or might not ever bee if it's too highlighter specific.\n\nThe UH could be changed in 8.0 to use the new common components. ",
            "date": "2018-07-16T19:59:21+0000"
        },
        {
            "id": "comment-16547486",
            "author": "Jim Ferenczi",
            "content": "I like the approach here. A few comments:\n\n\tThe text extraction for each passage should be delayed to the end. It's costly and should be done on the best passages only (assuming that only the best passages are kept).\n\tMaybe something that the PassageFormatter should handle but I wonder how interleaved hits should be handled. Since we don't split intervals we need to be careful to avoid highlighting the same term twice (from a term query and a phrase query for instance).\n\tfindPassageStart should be bounded to the end offset of the last passage.\n\tfindPassageEnd should be bounded to the start offset of the next passage.\n\n ",
            "date": "2018-07-18T07:27:18+0000"
        },
        {
            "id": "comment-16547514",
            "author": "Dawid Weiss",
            "content": "\nI wonder how interleaved hits should be handled. \n\nJust to throw more ideas here. \n\nIt'd be another possibility for a pluggable component. One implementation could resolve overlaps into contiguous fragments, another could create separate highlights, for example in different colors (or more saturated on the overlap region). (AAA[C)BBB] overlap would create three regions then, each with a possibly different highlighting marker: (AAA)(C)(BBB). The latter is useful in a interesting scenario where highlights come from two or more different sources (independent queries). Then the passage selector then needs to select window regions maximizing hit regions from each query and resolve overlaps to visualize where each query matched (with a different color, for example). ",
            "date": "2018-07-18T08:01:53+0000"
        },
        {
            "id": "comment-16547916",
            "author": "David Smiley",
            "content": "Yeah it's up to a pluggable passage formatter to either layer the fragments (for coloring) or effectively merge them. \u00a0The latter (merge) is what I referred to in my last comment, and the source for that is here https://github.com/dsmiley/lucene-solr/blob/0e2a579ad652b658e74f5c60da94e58a869e55de/lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter.java\u00a0 which I'm thinking of committing in its own issue as it's not fundamental to\u00a0Weight Matches in LUCENE-8286. ",
            "date": "2018-07-18T14:47:44+0000"
        },
        {
            "id": "comment-16553059",
            "author": "Alan Woodward",
            "content": "Here's an updated patch taking into account feedback.\u00a0 I left things in their own package for now, although\u00a0I agree it would be better to have some common APIs here. ",
            "date": "2018-07-23T16:17:03+0000"
        }
    ]
}