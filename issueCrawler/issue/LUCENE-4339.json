{
    "id": "LUCENE-4339",
    "title": "Allow deletions on Lucene3x codecs again",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0"
        ],
        "affect_versions": "4.0-BETA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "On dev@lao Hoss reported that a user in Solr was not able to update or delete documents in his 3.x index with Solr 4:\n\n\nOn the solr-user list, Dirk H\u00f6gemann recently mentioned a problem he was seeing when he tried upgrading his existing solr setup from 3.x to 4.0-BETA.  Specifically this exception getting logged...\n\nhttp://find.searchhub.org/document/cdb30099bfea30c6\n\nauto commit error...:java.lang.UnsupportedOperationException: this codec can only be used for reading\n         at org.apache.lucene.codecs.lucene3x.Lucene3xCodec$1.writeLiveDocs(Lucene3xCodec.java:74)\n         at org.apache.lucene.index.ReadersAndLiveDocs.writeLiveDocs(ReadersAndLiveDocs.java:278)\n         at org.apache.lucene.index.IndexWriter$ReaderPool.release(IndexWriter.java:435)\n         at org.apache.lucene.index.BufferedDeletesStream.applyDeletes(BufferedDeletesStream.java:278)\n         at org.apache.lucene.index.IndexWriter.applyAllDeletes(IndexWriter.java:2928)\n         at org.apache.lucene.index.IndexWriter.maybeApplyDeletes(IndexWriter.java:2919)\n         at org.apache.lucene.index.IndexWriter.prepareCommit(IndexWriter.java:2666)\n         at org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:2793)\n         at org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:2773)\n         at org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:531)\n         at org.apache.solr.update.CommitTracker.run(CommitTracker.java:214)\n\nDirk was able to work arround this by completely re-indexing, but it seemed strange to me that this would happen.\n\nMy understanding is that even though an IndexUpgrader tool was now available, it wasn't going to be required for users to use it when upgrading from 3.x to 4.x.  Explicitly upgrading the index format might be a good idea, and might make hte index more performant, but as I understood it, the way things had been implemented with codecs explicitly upgrading the index format wasn't strictly neccessary, and that users should be able to upgrade their lucene apps same way that was supported with other index format upgrades in the past: the old index can be read, and as changes are made new segments will be re-written in the new format.  (Note in\nparticular: at the moment we don't mention IndexUpgrader in MIGRATE.txt at all.)\n\nIt appears however, based on this stack trace and some other experiements i tried, that any attempts to \"delete\" documents in a segment that is using the Lucene3xCodec will fail.\n\nThis seems like a really scary time bomb sitaution, because if you upgrade, things will seem to be working \u2013 you can even add documents, and depending on the order that you do things, some \"old\" segments may get merged and use the new format, so some deletes of \"old\" documents (in those merged/upgraded) segments may work, but then somewhere down the road, you may try to a delete that affects docs in a still un-merge/upgraded segment, and that delete will fail \u2013 5 minutes later, if another merge has happened, attempting to do the exact same delete may succeed.\n\nAll of which begs the question: is this a known/intended limitation of the Lucene3xCodec, or an oversight in the Lucene3xCodec?\n\nif it's expected, then it seems like we should definitely spell out this limitation in MIGRATE.txt and advocate either full rebuilds, or the use of IndexUpgrader for anyone who's indexes are non-static.\n\nOn the Solr side of things, i think we should even want to consider automaticly running IndexUpgrader on startup if we detect that the Lucene3xCodec is in use to simplify things \u2013 we can't even suggest running \"optimize\" as a quick/easy way to force and index format upgrade because if the 3x index as already optimized then it's a no-op and the index stays in the 3x format.\n\nRobert said, that this is a wanted limitation (in fact its explicitely added to the code, without that UOE it \"simply works\"), but I disagree here and lots of other people:\n\n\nIn the early days (I mean in the time when it was already read only until we refactored the IndexReader.delete()/Codec stuff), this was working, because the LiveDocs were always handled in a special way. Making it now 100% read-only is in my opinion very bad, as it does not allow to update documents in a 3.x index anymore, so you have no chance, you must run IndexUpgrader. \n\nThe usual step like opening old Index and adding documents works (because the new documents are added always to new segment), but the much more usual IW.updateDocument() which is commonly used also to add documents fails on old Indexes. This is a no-go, we have to fix this. If we allow the trick with updating LiveDocs on 3.x codec, for the end-user the \"read-only\" stuff in Lucene3x codec would be completely invisible, as he can do everything IndexWriter provides. The other horrible things like changing norms is no longer possible, so deletes are the only thing that affects here. The read-only ness of Lucene3x codec would only be visible to the user when someone tries to explicitly create an index with Lucene3x codec. And I understood the CHANGES/MIGRATE.txt exactly as that.\n\nOn the list, Robert added a simple patch, reverting the UOE in Lucene3xCodec, so the LiveDocs format is RW again.",
    "attachments": {
        "LUCENE-4339.patch": "https://issues.apache.org/jira/secure/attachment/12542901/LUCENE-4339.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-29T07:39:18+0000",
            "content": "This is Robert's patch. ",
            "author": "Uwe Schindler",
            "id": "comment-13443879"
        },
        {
            "date": "2012-08-29T08:19:39+0000",
            "content": "I don't think this should be a blocker.\n\nlets discuss it on the thread instead. ",
            "author": "Robert Muir",
            "id": "comment-13443900"
        },
        {
            "date": "2012-08-29T08:52:31+0000",
            "content": "For me this is a blocker! I remember in the past we talked about it, but this UOE was silently added without my knowledge (otherwise I would have complained earlier). I would not +1 a release with this, so it's a blocker to me. In my recent talks on various conferences last year (new in Lucene 4.0, codecs), I always told people this is a \"special case\" and possible. ",
            "author": "Uwe Schindler",
            "id": "comment-13443917"
        },
        {
            "date": "2012-08-29T08:55:17+0000",
            "content": "I opened this issue for discussion, too.\n\nI totally agree that Lucene3x codec should be read-only, so nobody should be able to create a new Index or open IW with this as default codec. But an upgrade path without document updates in existing segements (which implies deletion in the old segment) is no upgrade path. In that case we can remove Lucene3x codec completely and only write a migration tool. ",
            "author": "Uwe Schindler",
            "id": "comment-13443919"
        },
        {
            "date": "2012-08-29T11:21:44+0000",
            "content": "All you have to do is back down from the generalizations, agree we shouldnt\ntouch trunk or the backwards compat policy here, and just say 'yes this is the right thing to do for 4.x'\nand you will have my consensus.\n\nOtherwise I will be against the change.\n\nBecause this backwards stuff held back lucene for so long,\nin fact we wouldnt even be having this discussion if we didn't depart from it\nso that we could refactor these APIs to make sense. Please look at what these\nAPIs were before when this change was made.\n\n\nFor me this is a blocker! I remember in the past we talked about it, but this UOE was silently added without my knowledge (otherwise I would have complained earlier).\n\nThis is exactly why we shouldn't burden lucene's backwards compatibility promise\nwith crap like this: if we had enforced this, we wouldn't even be here, and Codec\nwouldn't encode the entire segment, it would have presented an insurmountable\nroadblock. ",
            "author": "Robert Muir",
            "id": "comment-13443967"
        },
        {
            "date": "2012-08-29T11:29:10+0000",
            "content": "I have 2 things:\n\na) Allow it for Lucene 4.x to make the migration as easy as possible. This is not really complicated as we explicitely forbid something that works out of the box (because we have to rewrite SegmentInfos in all cases when new segments are added to a pre-4.x index).\nb) By concern about backwards is: The idea was always to allow user code (not advanced code using Codecs directly), to open a previous major version index and add/update documents - this is all I want to have in the backwards policy. Adding is easy, as it creates new segments. Updating unfortunately need to delete in the old segment. This requirement implies that a Codec can be read-only for backwards compatibility, but the LiveDocs implementation unfortunately must be rw to support delete and update. ",
            "author": "Uwe Schindler",
            "id": "comment-13443972"
        },
        {
            "date": "2012-08-29T11:43:03+0000",
            "content": "I already told you I agree with 'a' in this particular case, but not in every case ('b').\n\nIts unlikely my opinion here would change. Why conflate the two issues then? \n\nLeave 'b' alone, get it the hell out of this issue, and start another \nendless-thread-about-backwards-compat-policy like there always was in the past,\nand we can fix 'a'  ",
            "author": "Robert Muir",
            "id": "comment-13443979"
        },
        {
            "date": "2012-08-29T12:04:45+0000",
            "content": "\nAll you have to do is back down from the generalizations, agree we shouldnt\ntouch trunk or the backwards compat policy here, and just say 'yes this is the right thing to do for 4.x'\nand you will have my consensus.\n\nOtherwise I will be against the change.\n\nThat doesn't make sense.  You can disagree about back compat policies in general, but it's not kosher to hold this specific issue (which you agree with) hostage to force your viewpoint.\n\n+1 to commit. ",
            "author": "Yonik Seeley",
            "id": "comment-13443990"
        },
        {
            "date": "2012-08-29T12:08:43+0000",
            "content": "It makes total sense. I gave my technical rationale for this. you can look at svn history if you dont believe me.\n\nI'm -1 for the record, until this gets resolved. ",
            "author": "Robert Muir",
            "id": "comment-13443997"
        },
        {
            "date": "2012-08-29T12:21:15+0000",
            "content": "You're trying to leverage your vote on this issue (deletes for 3x segments, which you already agreed with) to try and get your way on another issue (general back compat policy). That's not a valid veto, but I'll let others fight it out. ",
            "author": "Yonik Seeley",
            "id": "comment-13444005"
        },
        {
            "date": "2012-08-29T12:37:37+0000",
            "content": "I'm trying to stop this issue from being 'change both' and get the issue refined to just being deletes for 3.x segments (and not a change to general back compat).\n\nI don't think the patch should be committed to trunk for this reason (only 4.x, with a comment that this is just a case-by-case decision).\nI gave reasons why such a decision would serve as a roadblock for future (and actually past!) changes.\n\nI gave good reasons for this. Its a valid veto (which I will enforce). This is important to me, and i'm not going to back down.\nYou can do whatever you like: whine to the apache board for all i care. I still won't back down.\n\nBest to fix the scope of this issue to be only the 4.x change as a case-by-case decision and leave the back compat policy for discussion elsewhere\nif you really want this change to go in. ",
            "author": "Robert Muir",
            "id": "comment-13444011"
        },
        {
            "date": "2012-08-29T14:03:41+0000",
            "content": "Folks: I still see no objections to enabling deletions on Lucene3x codecs (as this issue says, and as the patch does).\nI assume this functionality will be committed within the next few days.  If it hasn't yet due to meta-arguments (i.e. someone's reasoning around the patch rather than the patch itself), then I will commit. ",
            "author": "Yonik Seeley",
            "id": "comment-13444082"
        },
        {
            "date": "2012-08-29T14:04:28+0000",
            "content": "The whole backwards compatibility discusssion should be discussed (maybe in a flamewar again), but it is unrelated to this issue! My concerns regarding the backwards issue is a separate issue! I'll open a new one.\n\nI would like to applay the current patch, as developed by Robert that allows Lucene 4.0 to open 3.x indexes and do the following:\n\n\n\tadd documents to it (this was always possible)\n\tdelete/update documents from the 3.x segments only. This is a small change because it was always working and was only willingful disabled in some cleanup commit.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13444083"
        },
        {
            "date": "2012-08-29T14:05:09+0000",
            "content": "I don't think the patch should be committed to trunk for this reason (only 4.x, with a comment that this is just a case-by-case decision). I gave reasons why such a decision would serve as a roadblock for future (and actually past!) changes.\n\nIt cannot be committed to trunk, as there is no Lucene 3.x codec  ",
            "author": "Uwe Schindler",
            "id": "comment-13444084"
        },
        {
            "date": "2012-08-29T14:05:53+0000",
            "content": "Finally, please apply this patch ++++++++++++++++++++1 !!! ",
            "author": "Uwe Schindler",
            "id": "comment-13444085"
        },
        {
            "date": "2012-08-29T14:12:42+0000",
            "content": "\nThe whole backwards compatibility discusssion should be discussed (maybe in a flamewar again), but it is unrelated to this issue! My concerns regarding the backwards issue is a separate issue! I'll open a new one.\n\nThanks, thats all I wanted.\n\n\nIt cannot be committed to trunk, as there is no Lucene 3.x codec\n\nI refer to the new test in TestBackwardsCompatibility. This would basically change the backwards compatibility policy\nin a significant way (one that restricts what we can do across major versions). Thats why its important to think\nabout it and discuss it more and not try to do that here.\n\nIf we decide in a separate issue/thread that we want to extend back compat beyond reading (to also include writing),\nwhich we might do, then we should of course merge the new test at that time to trunk so that its actually tested in some way.\nBut we should wait for the discussion for that. ",
            "author": "Robert Muir",
            "id": "comment-13444088"
        },
        {
            "date": "2012-08-29T15:34:42+0000",
            "content": "\nI would like to applay the current patch, as developed by Robert that allows Lucene 4.0 to open 3.x indexes and do the following:\n\n    add documents to it (this was always possible)\n    delete/update documents from the 3.x segments only. This is a small change because it was always working and was only willingful disabled in some cleanup commit.\n\nThis last statement is totally false. it was not always working. I had to disable this so that we could move all portions of the index\nunder codec control (as i already said on the mailing list). The problem was at the time, Codec provided its own segment infos writer,\nso it could customize commits. This was necessary to support e.g. AppendableCodec. Because of that it was not really possible to\nallow 3.x deletes, because we had no real way to write a \"3.x compatible commit that also contains newer 4.x information/4.x segments\".\nThe way SegmentInfosReader/Writer worked at the time presented no opportunity to make a \"frankenstein\" 3.x/4.x specialized mixed commit\npoint to do this either.\n\nIts just now only easy to re-enable because we did a ton of work to detangle this in LUCENE-4050/LUCENE-4055, split the per-segment metadata \n(which is owned by Codec) from the commit information (which is just a list of segments+deletes gens). So we can easily write a 4.x commit, \nand at the same time preserve the 3.x per-segment metadata.\n\nSo this was no cleanup commit!\n\nAnd again thats why I am against changing the backwards policy, because if we had enforced this earlier we would have likely never been able to \niterate to this point: it would have presented a massive roadblock. ",
            "author": "Robert Muir",
            "id": "comment-13444143"
        },
        {
            "date": "2012-08-29T16:37:27+0000",
            "content": "I can commit this to 4.x once Mike has had a chance to look/think about it too.\n\nJust again to reiterate, this was not done for cleanup or silly reasons, but good reasons.\n\nBut I don't imagine us refactoring the codec API or index structure for 4.x in any way that\nwould be made more difficult by this patch: I just want all possibilities left on the table\nfor the next major release. ",
            "author": "Robert Muir",
            "id": "comment-13444179"
        },
        {
            "date": "2012-08-29T19:05:05+0000",
            "content": "+1 to separate what we do for 4.0 vs a change to our back-compat policy.  It seems like (I have to think about the patch) doing this for 4.0 is easy ... but that may not necessarily hold true for future releases.\n\nAnd I had not realized our official back-compat policy all this time was only ensuring reading (not writing/updating) old indices (thanks Robert).  I do worry that users will \"expect\" writing comes along with that (given that all past releases have allowed this).  But then again the fact that no users have complained (until now) about 4.0 disallowing deletions on a 3.x index is telling ... maybe users re-index or run the upgrade tool. ",
            "author": "Michael McCandless",
            "id": "comment-13444328"
        },
        {
            "date": "2012-08-29T19:28:36+0000",
            "content": "And I had not realized our official back-compat policy all this time was only ensuring reading (not writing/updating) old indices (thanks Robert)\n\nI think there was \"bug\" in the wording of that wiki page, because the understanding and discussion in all past releases (including in the described upgrade steps) was that lucene would \"read\" your existing index, and automatically convert as you made updates - a delete is a type of update.\n\n+1 to separate what we do for 4.0 vs a change to our back-compat policy. It seems like (I have to think about the patch) doing this for 4.0 is easy ... but that may not necessarily hold true for future releases.\n\nAgreed \u2013 if we want to say that 5.0 can \"read\" 4.0 but can't delete docs that's fine, but let's worry about that when a situation where it actually makes a difference in performance/simplicity/maintainability comes up.  Hell, if it really makes a big difference, i'm fine with saying that you must run an upgrade tool for 5.0 to even read 4.0, but we should't make those decisions in the abstract, they should be based on actual implications.\n\nthe fact that no users have complained (until now) about 4.0 disallowing deletions on a 3.x index is telling.\n\nPersonally I think people are reading too much into this - i suspect most of the people who have been using the alpha and beta so far are the more \"adventurous\" devs, who are more likely to \"rebuild the world\" on upgrade anyway.  More \"cautious\" and \"conservative\" devs who will want to upgrade in place are probably not that interested in looking at 4.0 until 4.0-final.\n\nBottom line: If we have a simple patch that will allow 4.0 to not only \"read\" 3.x indexes, but also easily \"update\" those indexes via delets/merges, then i say we commit it.\n\nIf enough folks feel strongly that this patch shouldn't be committed, and that IndexUpgrader should be used by any user who might want to \"delete\" docs from a 3x index, then I would argue that we not only need to more heavily document this, but we should also find some way to make the 4.0 IndexWriter \"fail fast\" when you point it at an index that contains segments using the 3x codec - we should not allow this time bomb situation where some doc updates/deletes might work because the segments have already been merged/upgraded to the 4x format, but other updates/deletes fail because the affected documents are still in a 3x segment. ",
            "author": "Hoss Man",
            "id": "comment-13444344"
        },
        {
            "date": "2012-08-29T19:42:53+0000",
            "content": "I don't think that users complaining or not should affect our back-compat policy. I suspect many people trying 4.0-* didn't yet deploy it in production, at least not large productions. So we cannot let that affect our decisions. I'm pretty sure that in the Big Data world, it's not going to be accepted that you need to re-index the data, or run a migration tool over indexes that may be TBs in size, just because it may be hard to support deleting documents from older (1 version back only though !) segments.\n\nIn short, let's postpone decisions such as \"you must run an upgrader tool\" until a real problem comes up in one of the future releases. There's no need to make such decision at this point. ",
            "author": "Shai Erera",
            "id": "comment-13444350"
        },
        {
            "date": "2012-08-29T19:43:16+0000",
            "content": "\nBottom line: If we have a simple patch that will allow 4.0 to not only \"read\" 3.x indexes, but also easily \"update\" those indexes via delets/merges, then i say we commit it.\n\nSee Mike's comment (I have to think about the patch). The patch is a bit scary. I feel like I'm in the same boat. I think if its safe we should do it, but its not totally obvious that its safe \n\n\nwe should not allow this time bomb situation where some doc updates/deletes might work because the segments have already been merged/upgraded to the 4x format, but other updates/deletes fail because the affected documents are still in a 3x segment.\n\nWhoah: its not really a time bomb. The time bomb is solr's 'autocommit' that this user was using.\nAnd that autocommit will have the same 'time bomb' if the user runs out of disk space or whatever. If they aren't\naware precisely when commits are happening, then when an error happens (which will happen eventually), they won't be sure\nwhat changes made it and what didn't.\n\nIn general for people properly handling their exceptions from commit() etc, its fine. because the commit will never succeed and they will know their \nchanges didnt make it.\n\nIts just not user-friendly. ",
            "author": "Robert Muir",
            "id": "comment-13444351"
        },
        {
            "date": "2012-08-29T19:48:56+0000",
            "content": "\nI don't think that users complaining or not should affect our back-compat policy. I suspect many people trying 4.0-* didn't yet deploy it in production, at least not large productions. So we cannot let that affect our decisions. I'm pretty sure that in the Big Data world, it's not going to be accepted that you need to re-index the data, or run a migration tool over indexes that may be TBs in size, just because it may be hard to support deleting documents from older (1 version back only though !) segments.\n\nIn short, let's postpone decisions such as \"you must run an upgrader tool\" until a real problem comes up in one of the future releases. There's no need to make such decision at this point.\n\nNo, its the opposite: lets postpone decisions to change the backwards compatibility policy to also affect 'writes' to a separate issue.\n\nIf they get conflated with this issue, then my opinion towards this issue changes dramatically (I will be against it). ",
            "author": "Robert Muir",
            "id": "comment-13444355"
        },
        {
            "date": "2012-08-29T19:54:11+0000",
            "content": "Can we please stop bringing the backwards policy in this issue? I already said I will open another issue. This is just to support this in 4.0! ",
            "author": "Uwe Schindler",
            "id": "comment-13444358"
        },
        {
            "date": "2012-08-29T20:00:23+0000",
            "content": "Whoah: its not really a time bomb. The time bomb is solr's 'autocommit' that this user was using. And that autocommit will have the same 'time bomb' if the user runs out of disk space or whatever.\n\nautocommit has absolutely nothing to do with the problem i'm describing \u2013 it isn't scary because it can happen when you use autocommit, it's scary because it can might happen on some commits, but it might not happen on others.\n\n(perhaps \"timebomb\" is not the right word, because it implies it will absolutely happen at some fixed point in the future. \"unpredictible bomb\" is be a better description)\n\nThe point is: when you upgrade, some deletes might work, and other deletes might fail, all depending on if/how/when you sprinkle in some adds that might automatically trigger segment merges.\n\nthat is the major concern i'm worried about, a user could do the following steps:\n\n1) upgrade to lucene 4.0\n2) open their 3x index with 4.0\n3) test that some searches X,Y,Z work\n4) add some number of documents N and test that they show up in searches.\n5) delete/update some old documents A,B,C and test that the delete/updates are applied\n\n..and think everything looks fine.  No failures, no exceptions.\n\nIf they then attempt the exact same set of steps again, on the exact same index, but change the number of documents \"N\" that they add, then things could blow up (EDIT: \"in step #5\") \u2013 all entirely depending on which segments were merged in step #4.\n\nThe reason i called it a timebomb is because for usage patterns i'm mostly familiar with \u2013 where lots of documents are added frequently, and the likelyhood of updateing/deleteing a document decreases as the document gets \"older\" this sort of problem might not manifest itself for a very long time after upgrading, because the small \"recent\" segments that get merged quickly after upgrade (as new docs are added) are also the ones most likely to see deletes/updates \u2013 which will succeed.  it's only when that rare situation of \"updating\" a really old document in a still unmerged 3x segment happens that users will sudenly get this expection \u2013 and be suprised because they may have already done lots of delets on their \"existing\" index w/o seeing this problem. ",
            "author": "Hoss Man",
            "id": "comment-13444366"
        },
        {
            "date": "2012-08-29T20:47:34+0000",
            "content": "I agree with Hoss, the problem is not only that it does not work, its also that it sometimes work sometimes not and IndexWriter does not fail fast. So if we do not commit this, we have to make it fail-fast. But I strongly prefer to commit it - I also looked at the code, the handling of LiveDocs is fine from my perspective, as the index cannot get corrupt:\n\n\n\tThe LiveDocs implementation is the same for 4.0 and 3.x codec\n\tWhen the new livedocs are finally written to disk (after commit), the index automatically gets a new commit, so the 3.x/4.0 codec will already write new SegmentInfos, so index is already partially upgraded (because new segments will also be 4.0).\n\n\n\nI strongly want to commit this, maybe we should add a better test, I can look into it tomorrow if nobody else wants to jump in (I would be so happy). ",
            "author": "Uwe Schindler",
            "id": "comment-13444397"
        },
        {
            "date": "2012-08-29T21:00:19+0000",
            "content": "\nI also looked at the code, the handling of LiveDocs is fine from my perspective, as the index cannot get corrupt\n\nThis is what i think too, but I'd rather be more confident (e.g. get Mike's +1). We have a limited capability \nto test this scenario really. But lots of stuff was cleaned up so I feel pretty good about it myself. That doesn't\nmake me confident enough to commit though... some of this is probably just paranoia/brain-damage from how PreFlex\nworked in earlier iterations of trunk though \n\nThats the risk: today the behavior is not \"user-friendly\" but it causes no corruption or data loss. If you had asked me\n'can you delete things from 3.x segments' i would have told you NO, so its no surprise to me (not a bug IMO).\n\nI agree it would be fantastic to have easier backwards compatibility for users migrating, sure who wouldnt? But this isn't\nthe only possible solution we have at our disposal, and lets just be careful to ensure we don't introduce a nasty bug.\n\nSo please no heavy committing, there is no rush. ",
            "author": "Robert Muir",
            "id": "comment-13444410"
        },
        {
            "date": "2012-08-30T11:30:54+0000",
            "content": "+1, the patch looks good!\n\nThe delGen/delCount are separately tracked in SegmentInfoPerCommit,\nthe first time we read a 3.x index we read the legacy SegmentInfos\nformat into RAM with the proper delCount/delGen\n(Lucene3xSegmentInfosReader.readLegacyInfos).  If any new deletes\nhappen against that segment, SIPC will be updated, and on commit we'll\nwrite delGen/delCount just like we would for a non-3x index.  We use a\nseparate method (SegmentInfos.write3xInfo) to write just the\nSegmentInfo for 3.x segments.\n\nSIPC.files() will correctly show the new del gen filename on write\nsince we just use Lucene40LiveDocsFormat.\n ",
            "author": "Michael McCandless",
            "id": "comment-13444884"
        },
        {
            "date": "2012-08-30T11:45:08+0000",
            "content": "I improved the test case a bit, and that uncovered a bug in how we upgrade a 3.x SegmentInfo: we were not recording the marker file in SI's fileSet, which caused IFD to delete it and for the upgrade to keep happening every time commit is called.  I fixed it by adding the marker file up front before we write the .si. ",
            "author": "Michael McCandless",
            "id": "comment-13444888"
        },
        {
            "date": "2012-08-30T11:50:22+0000",
            "content": "Cool, thanks. Was the bug also there before this patch (means other code merging old segments could be affected)? ",
            "author": "Uwe Schindler",
            "id": "comment-13444892"
        },
        {
            "date": "2012-08-30T15:59:15+0000",
            "content": "Yes this bug is pre-existing ... but I think it doesn't break anything, ie, it's a performance bug since on every commit it needlessly goes and writes _N.si files again. ",
            "author": "Michael McCandless",
            "id": "comment-13445048"
        },
        {
            "date": "2012-08-30T21:52:55+0000",
            "content": "Thanks Mike! ",
            "author": "Robert Muir",
            "id": "comment-13445333"
        },
        {
            "date": "2012-08-30T22:26:18+0000",
            "content": "Thanks Mike and Robert - you make me happy!  One blocker less, hihi. ",
            "author": "Uwe Schindler",
            "id": "comment-13445357"
        },
        {
            "date": "2013-05-10T10:33:13+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653864"
        }
    ]
}