{
    "id": "SOLR-8662",
    "title": "SchemaManager doesn't wait correctly for replicas to update",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5.1",
            "6.0.1",
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Currently in SchemaManager, waitForOtherReplicasToUpdate doesn't execute since it gets passed the timeout value instead of the end time",
    "attachments": {
        "SOLR-8662.patch": "https://issues.apache.org/jira/secure/attachment/12798485/SOLR-8662.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-13T10:35:44+0000",
            "author": "Varun Thacker",
            "content": "\n\tZkSolrResourceLoader#openResource retires fetching the resource in case of session expiry. It also sets back the interrupt flag.\n\tSchema API should only be used if it's a managed resource AND mutable. The mutable check was missing the mutable part\n\tIn waitForOtherReplicasToUpdate there was a bug in the time conversion. Fixed that\n\tThere was no usage of test-files/solr/configsets/configset-1 . Renamed it to cloud-managed and made necessary changes to support cloud in managed schema mode. This configset is used in the test\n\n\n\n\nWithout the changes to SchemaManager the test would fail. ",
            "id": "comment-15239041"
        },
        {
            "date": "2016-04-13T13:46:05+0000",
            "author": "Steve Rowe",
            "content": "Varun, I couldn't get your patch to apply using git apply (git v2.7.4) - something about the file moves made it so that git couldn't find change targets - the patch appears to have been produced by IntelliJ.  Since I use IntelliJ, I was able to apply the patch using it.  But I think it's better to use cmdline git when producing patches so that you don't restrict the audience.  ",
            "id": "comment-15239260"
        },
        {
            "date": "2016-04-14T00:31:28+0000",
            "author": "Steve Rowe",
            "content": "Lots of good changes in your patch, Varun!  I ran all Solr+Solrj+contrib tests and everything passes.\n\nI found a few issues though.\n\nThis change is good, but there remains a pre-existing problem:\n\n\n-    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n-    long startTime = System.nanoTime();\n-    long endTime = timeout > 0 ? System.nanoTime() + (timeout * 1000 * 1000) : Long.MAX_VALUE;\n+    //The default timeout is 60s when no BaseSolrResource.UPDATE_TIMEOUT_SECS is specified\n+    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, 60);\n+\n+    //If BaseSolrResource.UPDATE_TIMEOUT_SECS=0 or -1 then end time is unlimited.\n+    long endTime = timeout > 0 ? TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.SECONDS) + System.nanoTime() : Long.MAX_VALUE;\n\n\n\nThe problem is that System.nanoTime() can return anything in the range [Long.MIN_VALUE, Long.MAX_VALUE] and it intentionally overflows, so making endTime be Long.MAX_VALUE is effectively choosing a random time in the future; this is not the same as \"unlimited\".  This same situation is dealt with in the QueryTimeout implementations - used by ExitableDirectoryReader - by adding a large value to the current value of nanoTime() to arrive at an effectively unlimited end time.\n\n\n\nYour changes in ZkSolrResourceLoader.openResource() introduce the possibility of retrying 10 times to fetch a resource from ZK when it's not there (according to zkController.pathExists(file)) - I think in this case the retry loop should be immediately exited, so that the classpath search can start immediately.  (I'm assuming that the intent here is not to wait around for another thread/process to finish uploading a resource - if that's the case then the branch for when the path doesn't exist should have a timeout, which it doesn't in your patch.)\n\n\n\nWithout the changes to SchemaManager the test would fail.\n\nIndeed, when I revert the SchemaManager changes, TestManagedSchemaAPI.testAddFieldAndDocument() fails.  But testReloadAndAddSimple() always succeeds, regardless of the SchemaManager changes, so I'm not sure why it's there, since it doesn't have anything to do with new field visibility - can it be removed? ",
            "id": "comment-15240321"
        },
        {
            "date": "2016-04-14T06:53:01+0000",
            "author": "Noble Paul",
            "content": "We should use the TimeOut class for timeout checks. Much simpler ",
            "id": "comment-15240707"
        },
        {
            "date": "2016-04-14T06:53:26+0000",
            "author": "Noble Paul",
            "content": "I think we should fix this and include this in 5.5.1 as well ",
            "id": "comment-15240708"
        },
        {
            "date": "2016-04-14T10:19:45+0000",
            "author": "Varun Thacker",
            "content": "Thanks Steve and Noble for the review!\nCreated the new patch from GIT instead of IntelliJ\n\nIn SchemaManager if \"updateTimeOutSecs\" in 0 or -1 then we retry for 10 minutes . Earlier it was unlimited. I think capping the unlimited to 10 minutes is fair enough. Thoughts? It also uses the TimeOut class for the math. Also upped default timeout to 10 minutes instead of 1 minute earlier\n\nYour changes in ZkSolrResourceLoader.openResource() introduce the possibility of retrying 10 times to fetch a resource from ZK when it's not there\n\nGood catch! I've fixed that. We won't retry if the path doesn't exist in ZK.\n\nI've kept testReloadAndAddSimple() for now. In one test run when I was using AbstractDistribZkTestBase, I'd seen after the reload the session had expired while reading the managed-schema file. So I had added the test and retry logic. This was a couple of months back when I had initially worked on the patch so I don't remember everything.  ",
            "id": "comment-15240923"
        },
        {
            "date": "2016-04-14T12:53:28+0000",
            "author": "Steve Rowe",
            "content": "Varun, I think at least some of the latest patch was created with IntelliJ (I see Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP in there) - maybe you posted the wrong one? ",
            "id": "comment-15241077"
        },
        {
            "date": "2016-04-14T12:56:31+0000",
            "author": "Steve Rowe",
            "content": "and also I get errors when I attempt to apply it with git apply ",
            "id": "comment-15241086"
        },
        {
            "date": "2016-04-14T14:16:05+0000",
            "author": "Varun Thacker",
            "content": "Same patch as before. This one was created using git diff > SOLR-8662.patch .\n\nThe previous patch was created using git format-patch --stdout -p --no-prefix origin > SOLR-8662.patch which didn't seem to apply correctly with git apply.\n\nI tried this patch and git apply worked  ",
            "id": "comment-15241225"
        },
        {
            "date": "2016-04-14T14:41:08+0000",
            "author": "Steve Rowe",
            "content": "crap, download failure on my part (wget renaming to *.1). sorry for the noise... ",
            "id": "comment-15241284"
        },
        {
            "date": "2016-04-14T14:42:02+0000",
            "author": "Steve Rowe",
            "content": "Thanks Varun for the latest patch, I'm looking now. ",
            "id": "comment-15241288"
        },
        {
            "date": "2016-04-14T20:37:07+0000",
            "author": "Steve Rowe",
            "content": "+1 to the latest patch, LGTM, thanks Varun. ",
            "id": "comment-15241864"
        },
        {
            "date": "2016-04-17T18:06:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 352e9a705b1c63a21136def424b023126319d870 in lucene-solr's branch refs/heads/branch_5x from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=352e9a7 ]\n\nSOLR-8662: SchemaManager waits correctly for replicas to be notified of a new change ",
            "id": "comment-15244765"
        },
        {
            "date": "2016-04-17T18:15:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b3fe7f70030024b2a87286dbb81c25d4701856bb in lucene-solr's branch refs/heads/branch_5_5 from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b3fe7f7 ]\n\nSOLR-8662: SchemaManager waits correctly for replicas to be notified of a new change ",
            "id": "comment-15244772"
        },
        {
            "date": "2016-04-17T18:17:41+0000",
            "author": "Varun Thacker",
            "content": "\n\tCommitted to master and branch_6x with commit = 44c9cd2 . I missed out adding the SOLR-8662 prefix.\n\tbranch_5x TestManagedSchemaAPI uses MiniSolrCloudCluster.\n\tCommitted to branch_5x and branch_5_5 with commit = 352e9a7 .\n\n\n\nThanks Steve and Noble for the review! ",
            "id": "comment-15244775"
        },
        {
            "date": "2016-05-09T23:07:11+0000",
            "author": "Hoss Man",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 ",
            "id": "comment-15277269"
        },
        {
            "date": "2016-05-19T16:19:45+0000",
            "author": "Steve Rowe",
            "content": "Reopening to backport to 6.0.1. ",
            "id": "comment-15291417"
        },
        {
            "date": "2016-05-28T13:38:26+0000",
            "author": "Steve Rowe",
            "content": "Bulk close issues included in the 6.0.1 release. ",
            "id": "comment-15305370"
        }
    ]
}