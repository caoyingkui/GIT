{
    "id": "SOLR-10237",
    "title": "Poly-Fields should work with subfield that have docValues=true",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "DocValues aren\u2019t really supported in poly-fields at this point, but they don\u2019t complain if the schema definition of the subfield has docValues=true. This leaves the index in an inconsistent state, since the SchemaField has docValues=true but there are no DV for the field.\nSince this breaks compatibility, I think we should just emit a warning unless the subfield is an instance of PointField. With [Int/Long/Float/Double/Date]PointField subfields, this is particularly important, since they use IndexOrDocValuesQuery, that would return incorrect results.",
    "attachments": {
        "SOLR-10237.patch": "https://issues.apache.org/jira/secure/attachment/12856424/SOLR-10237.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-07T20:46:52+0000",
            "content": "I'm trying to understand the problem here.  solr.PointType (an x,y generic spatial field) supports DocValues in its coordinate fields so they can be used in ValueSource/\"function queries\"; or am I wrong here? ",
            "author": "David Smiley",
            "id": "comment-15900120"
        },
        {
            "date": "2017-03-07T21:36:31+0000",
            "content": "solr.PointType (an x,y generic spatial field) supports DocValues in its coordinate fields so they can be used in ValueSource/\"function queries\"\nI don't believe it does. When a PointType field is created it calls SchemaField.createField(...) on it coordinates, instead of SchemaField.createField*s*(...). The first one of those only creates the \"Index field\", and doesn't create the DocValues field:\n\n  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f.add(createField(field.getName(), storedVal, StoredField.TYPE, 1f));\n    }\n    \n    return f;\n  }\n\n\nAnother option is to start supporting DV in the coordinates by creating the DV fields when requested, they could be used as you said when ValueSource is needed, probably inheriting the configuration (docValues=true/false) from the PointType field? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15900215"
        },
        {
            "date": "2017-03-07T22:22:49+0000",
            "content": "Oh I see; thanks for the explanation.\n\nAnother option is to start supporting DV in the coordinates by creating the DV fields when requested, they could be used as you said when ValueSource is needed, probably inheriting the configuration (docValues=true/false) from the PointType field?\n\nI think this is the path forward.  Doing anything else is worse \u2013 why shouldn't we let users use DocValues for purposes that DocValues were created for?\n\nAs a related aside... I'm wondering if we may want to deprecate/remove the singular SchemaField.createField and simply have all field types do their logic in one method createFields.  Perhaps further, it might accept the Lucene Document as a destination to thus avoid some needless Field[] creation.  If you agree, the method might then be named addFieldsToDoc.  I'm bumping into this a bit as I contemplate a TextField that can optionally put it's stored value embedded in a separate (compressed) BinaryDocValuesField \u2013 SOLR-10117. ",
            "author": "David Smiley",
            "id": "comment-15900293"
        },
        {
            "date": "2017-03-08T00:35:46+0000",
            "content": "I think this is the path forward.\nI'll upload a patch shortly\nI'm wondering if we may want to deprecate/remove the singular SchemaField.createField and simply have all field types do their logic in one method createFields\nI think that would make sense, at least the reason for which both were created separately is not being used:\n\n\n  /**\n   * If true, then use {@link #createFields(Object, float)}, else use {@link #createField} to save an extra allocation\n   * @return true if this field is a poly field\n   */\n  public boolean isPolyField(){\n    return type.isPolyField();\n  }\n\n\nThere are a couple of calls to createField(...) that should be replaced though, I didn't look into them in detail.\n\nPerhaps further, it might accept the Lucene Document as a destination to thus avoid some needless Field[] creation\nMaybe... I'm not totally sold. I think there are valid use cases for wanting to modify the returned list before adding it to the Document\n\nI'm bumping into this a bit as I contemplate a TextField that can optionally put it's stored value embedded in a separate (compressed) BinaryDocValuesField \u2013 SOLR-10117.\nNot sure I follow, how would this refactor help? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15900464"
        },
        {
            "date": "2017-03-08T15:39:38+0000",
            "content": "Maybe... I'm not totally sold. I think there are valid use cases for wanting to modify the returned list before adding it to the Document.\n\nRemember Document is just a wrapper around an ArrayList.  A caller that wanted to manipulate the list could simply use a Document instance for a transient purpose; even re-using it by calling doc.clear().\n\nNot sure I follow, how would this refactor help?\n\nIt's not a necessity.   ",
            "author": "David Smiley",
            "id": "comment-15901444"
        },
        {
            "date": "2017-03-16T00:08:32+0000",
            "content": "Here is the patch with DV supported. Unfortunately, due to the way poly-fields are implemented, docValues=\"true\" can't be configured in the \"field\" definition, it has to be configured in the field type, or in the subfields. This should be OK and compatible with that we have now. I modified the existing  UnsupportedOperationException to have a clearer message ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15927227"
        },
        {
            "date": "2017-03-16T00:17:43+0000",
            "content": "Remember Document is just a wrapper around an ArrayList...\nYes, I know, but in that case the usage would be weird, something like\n\nDocument doc = new Document();\ntype.addFieldsToDoc(doc);\ndoc.removeField(\"foo\");\n\n\nNot too much of an issue anyway. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15927239"
        },
        {
            "date": "2017-03-16T01:55:50+0000",
            "content": "+1 to the patch ",
            "author": "David Smiley",
            "id": "comment-15927312"
        },
        {
            "date": "2017-03-16T19:03:29+0000",
            "content": "note: I'm committing SOLR-10286 as we speak which refactors out a FieldType.checkSupportsDocValues() method.  The patch here will be affected by that and need to override that instead of checkSchemaField(). ",
            "author": "David Smiley",
            "id": "comment-15928656"
        },
        {
            "date": "2017-03-17T18:21:13+0000",
            "content": "Thanks for the heads up David, I moved the DV validation to checkSupportsDocValues. Otherwise the same patch updated to master.  ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15930418"
        },
        {
            "date": "2017-03-17T18:31:19+0000",
            "content": "You mentioned in an email recently:\n\nThis is specially tricky since the users will get results, but will sometimes be incorrect\n\nSo I'm curious how you discovered the problem here and how, without it, results may be inconsistent.\n\nBTW commit away when you feel it's ready. ",
            "author": "David Smiley",
            "id": "comment-15930437"
        },
        {
            "date": "2017-03-17T18:51:29+0000",
            "content": "Results will be incorrect if IndexOrDocValuesQuery decides to use the DocValues query. In my tests it would always return incorrect results because the DV query was always chosen (because there were no values in the DV field). The \"sometimes\" would happen in odd situations I guess, if someone has a field that has some documents with DV and some without (e.g. if we fix this in 6.6 and someone has an index built with 6.5 using point fields and upgrades without re-indexing). ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15930482"
        },
        {
            "date": "2017-03-17T18:57:59+0000",
            "content": "Commit 3b660018457234387558ff626c8b95bb6f4ce853 in lucene-solr's branch refs/heads/master from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b66001 ]\n\nSOLR-10237: Poly-Fields should work with subfield that have docValues=true ",
            "author": "ASF subversion and git services",
            "id": "comment-15930492"
        },
        {
            "date": "2017-03-17T19:48:04+0000",
            "content": "Commit f947cbc461c961007b268d701e6b415f7882aa03 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f947cbc ]\n\nSOLR-10237: Poly-Fields should work with subfield that have docValues=true ",
            "author": "ASF subversion and git services",
            "id": "comment-15930591"
        },
        {
            "date": "2017-03-17T19:49:47+0000",
            "content": "Commit 3f6a15fd797081a6f6383a623ae2a794bcd6f800 in lucene-solr's branch refs/heads/branch_6_5 from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3f6a15f ]\n\nSOLR-10237: Poly-Fields should work with subfield that have docValues=true ",
            "author": "ASF subversion and git services",
            "id": "comment-15930594"
        }
    ]
}