{
    "id": "LUCENE-3793",
    "title": "Use ReferenceManager in DirectoryTaxonomyReader",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/facet"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "resolution": "Implemented",
        "status": "Closed"
    },
    "description": "DirTaxoReader uses hairy code to protect its indexReader instance from \nbeing modified while threads use it. It maintains a ReentrantLock \n(indexReaderLock) which is obtained on every 'read' access, while \nrefresh() locks it for 'write' operations (refreshing the IndexReader). \n\nInstead of all that, now that we have ReferenceManager in place, I think \nthat we can write a ReaderManager<IndexReader> which will be used by \nDirTR. Every method that requires access to the indexReader will \nacquire/release (not too different than obtaining/releasing the read \nlock), and refresh() will call ReaderManager.maybeRefresh(). It will \nsimplify the code and remove some rather long comments, that go into \ngreat length explaining why does the code looks like that. \n\nThis ReaderManager cannot be used for every IndexReader, because DirTR's\nrefresh() logic is special \u2013 it reopens the indexReader, and then\nverifies that the createTime still matches on the reopened reader as\nwell. Otherwise, it closes the reopened reader and fails with an exception.\nTherefore, this ReaderManager.refreshIfNeeded will need to take the\ncreateTime into consideration and fail if they do not match.\n\nAnd while we're at it ... I wonder if we should have a manager for an\nIndexReader/ParentArray pair? I think that it makes sense because we\ndon't want DirTR to use a ParentArray that does not match the IndexReader.\nToday this can happen in refresh() if e.g. after the indexReader instance\nhas been replaced, parentArray.refresh(indexReader) fails. DirTR will be\nleft with a newer IndexReader instance, but old (or worse, corrupt?)\nParentArray ... I think it'll be good if we introduce clone() on ParentArray,\nor a new ctor which takes an int[].\n\nI'll work on a patch once I finish with LUCENE-3786.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-07T06:18:32+0000",
            "content": "Removing 3.6 Fix version. If I'll make it by the release, I'll put it back. ",
            "author": "Shai Erera",
            "id": "comment-13224021"
        },
        {
            "date": "2012-07-23T08:45:15+0000",
            "content": "Noticed that TestTaxonomyCombined has an ignored testTaxonomyReaderRefreshRaces. I think this issue will solve the problem described there, so noting here to enable the test as part of this issue, to verify. ",
            "author": "Shai Erera",
            "id": "comment-13420504"
        },
        {
            "date": "2012-11-19T13:34:53+0000",
            "content": "The changes in LUCENE-3441 kind of eliminate the need for this issue. I'll cancel it once I commit the changes in LUCENE-3441. ",
            "author": "Shai Erera",
            "id": "comment-13500222"
        },
        {
            "date": "2012-11-28T16:12:59+0000",
            "content": "This issue was taken care of as part of LUCENE-3441. ",
            "author": "Shai Erera",
            "id": "comment-13505604"
        },
        {
            "date": "2013-05-10T10:32:51+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653748"
        }
    ]
}