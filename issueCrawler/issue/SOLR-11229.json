{
    "id": "SOLR-11229",
    "title": "Add a configuration upgrade tool for Solr",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "6.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Despite widespread enterprise adoption, Solr lacks automated upgrade tooling. It has long been a challenge for users to understand the implications of a Solr upgrade. Users must manually review the Solr release notes to identify configuration changes either to fix backwards incompatibilities or to utilize latest features in the new version. Additionally, users must identify a way to migrate existing index data to the new version (either via an index upgrade or re-indexing the raw data).\n\nSolr config upgrade tool aims to simplify the upgrade process by providing upgrade instructions tailored to your configuration. These instructions can help you to answer following questions\n\n\n\tDoes my Solr configuration have any backwards incompatible sections? If yes which ones?\n\tFor each of the incompatibility - what do I need to do to fix this incompatibility? Where can I get more information about why this incompatibility was introduced (e.g. references to Lucene/Solr jiras)?\n\tAre there any changes in Lucene/Solr which would require me to do a full reindexing OR can I get away with an index upgrade?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-11T20:17:24+0000",
            "content": "The initial prototype of this tool is available @ https://github.com/hgadre/solr-upgrade-tool ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16123975"
        },
        {
            "date": "2017-08-12T19:38:15+0000",
            "content": "Hey Hrishikesh Gadre, took a quick look at the tool you mentioned above.  Had a few questions/suggestions:\n\n\n\tI noticed that the TODO list in the README.md doesn't mention anything about Windows support.  Is a Windows version of this script in the scope of this JIRA?  Or is the idea that it'd be added as a part of a separate JIRA later on?\n\tI'm curious about the choice of XSLT here.  XSLT isn't rocket science, but it does have its traps, and it's another thing maintainers (and users) will have to dig into.  At a quick glance, much of the XSLT logic could also be done with xpath (in bash, or invoked from Java-land)...though it's totally possible I missed something.  Did you consider the maintenance tradeoff between XSLT and Java?  Or the test-ability tradeoff?  Or is there maybe a reason I'm missing that makes XSLT required?\n\tI notice that ConfigUpgradeTool mimics but doesnt technically implement the Solr Tool interface.  Is the idea that as this makes its way into Solr, it would actually implement that interface?  Or is it coincidence that those classes look similar.  This is not a suggestion or a critique; just trying to understand the code a little better.\n\n ",
            "author": "Jason Gerlowski",
            "id": "comment-16124693"
        },
        {
            "date": "2017-08-18T19:10:37+0000",
            "content": "Jason Gerlowski Thanks for your feedback.\n\nI noticed that the TODO list in the README.md doesn't mention anything about Windows support. Is a Windows version of this script in the scope of this JIRA? Or is the idea that it'd be added as a part of a separate JIRA later on?\n\nSure - we can add windows support as part of this jira itself. I didn't think about Windows support earlier.\n\nI notice that ConfigUpgradeTool mimics but doesnt technically implement the Solr Tool interface. Is the idea that as this makes its way into Solr, it would actually implement that interface? Or is it coincidence that those classes look similar. This is not a suggestion or a critique; just trying to understand the code a little better.\n\nSure I think it would be a good idea to use Solr Tool interface for this tool as well. \n\nI'm curious about the choice of XSLT here.\n\nOne of the important requirement is the ability to accept a Solr configuration file (e.g. solrconfig.xml) of version X and emit a identical configuration compatible with version Y (e.g. rewriting some of the configuration sections). As per my understanding XSLT is designed for such use-cases (while XPath is more useful towards querying the XML document). Obviously we can cobble together some java/bash code along with XPath to make it work. But I felt using a single technology to handle both querying and transformation would simplify the tool as well as implementation of upgrade rules.\n\nNote -  I personally found XSLT to be adequate to implement all the upgrade rules from Solr 4 -> Solr 6. It took me about an 1 1/2 to read the Upgrade section in the release notes and implement the upgrade rules for one release (e.g. from Solr 4 -> Solr 5). And now we have some reference available, new rules can easily be added by referring to these definitions. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16133497"
        },
        {
            "date": "2018-04-26T22:11:12+0000",
            "content": "Is this tool useful as is? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16455457"
        },
        {
            "date": "2018-04-26T23:36:45+0000",
            "content": "Jan H\u00f8ydahl Yes, although the new development for this tool is happening in the internal cloudera repo. It includes the upgrade rules for Solr 6 -> 7 upgrade as well. I will sync the public github repository ASAP. Eventually we would like to incorporate this tool as part of the SOLR distribution if there is enough interest from the community. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16455561"
        },
        {
            "date": "2018-04-26T23:45:09+0000",
            "content": "I'm curious about the choice of XSLT here.\n\nI have never been a fan of XSLT, but in this case it actually ends up being pretty nice for this use case. That is a first for me. Referencing existing rules to add new ones makes it fairly easy even for someone that is doing their best to never understand more than 5% of XSLT. ",
            "author": "Mark Miller",
            "id": "comment-16455565"
        },
        {
            "date": "2018-04-27T08:06:03+0000",
            "content": "Eventually we would like to incorporate this tool as part of the SOLR distribution if there is enough interest from the community.\nI saw your talk in Las Vegas and think that this effort is of benefit for many. More important than where the tool lives is that it gets exposed through RefGuide and maintained for each version. Are you also making tooling in Cloudera to upgrade from Trie to Point fields etc or do you use a reindex from source strategy (guessing the latter)? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16456091"
        },
        {
            "date": "2018-04-27T08:27:07+0000",
            "content": "The XSL specialist talks here: Yes, stuff like converting a schema XML document or a solrconfig.xml is the typical use case of XSL. XSL can be configured with parameters. So, yes use XSL for all stuff involving XML-based config files. Code written in Java is unreadable.\n\nP.S.: XSL is touring-complete (hahaha) ",
            "author": "Uwe Schindler",
            "id": "comment-16456107"
        }
    ]
}