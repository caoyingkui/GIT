{
    "id": "SOLR-1613",
    "title": "Segmentation of data imports (not just full or single record imports)",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "It is desirable to able to segment imports by a particular field in the root entity record so that you can update a particular segment of your database when bulk updates occur on the backend database.  For instance, if a bulk update occurs for a particular customer, it would be more efficient to be able to update a full segment of your index for that customer rather than issuing updates for every single user in your index for that customer, or updating the entire index.  That would be a waste of processing power.\n\nInstead, it would be more efficient to specify that a particular document field in the root entity was a segmentation field, and define an additional query on the root entity (i'm basing my example on a jdbc based datasource):\n\n<entity name=\"user\" pk=\"userid\" segment=\"customerid\" ... \n             query=\"...\" segmentQuery=\"select ... where customerid=${dataimporter.request.segment}\" />\n\nThen, when you request a segment update, you specify the segment as a parameter to your request\n\n    /solr/db/dataimport?command=segment-import&segment=1000\n\nIt would automatically remove documents whose field corresponding to your \"segment\" attribute on the root entity matched the segment you were importing.  In the above example, it would remove documents matching.  Though I'm not sure that's exactly the right thing to do, as we would need to ensure exact field matching, and i'm not sure what the default behavior is of the query matching which is using in the delete routines, so that would need to be looked into.\n\n    customerid:1000\n\n\nI've worked out the code segments required to do this for the JdbcDataSource, though I'm not sure what additional changes would be necessary for other datasource types, and am attaching a patch which includes these changes.",
    "attachments": {
        "SOLR-1613.patch": "https://issues.apache.org/jira/secure/attachment/12426443/SOLR-1613.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16080093",
            "date": "2017-07-10T10:06:27+0000",
            "content": "This issue ha not attracted any attention whatsoever in 8 years, so I'm closing it.\nHowever, if anyone think it is a needed feature and want to continue discussing and driving it forward (Matt Inger?), then feel free to re-open again! "
        }
    ]
}