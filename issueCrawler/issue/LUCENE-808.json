{
    "id": "LUCENE-808",
    "title": "bufferDeleteTerm in IndexWriter might flush prematurely",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.1",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Successive calls to remove-by-the-same-term would increment numBufferedDeleteTerms\nalthough all but the first are no op if no docs were added in between. Hence deletes would\nbe flushed too soon.\n\nIt is a minor problem, should be rare, but it seems cleaner to fix this. \n\nAttached patch also fixes TestIndexWriterDelete.testNonRAMDelete() which somehow\nrelied on this behavior.  All tests pass.",
    "attachments": {
        "successive_bufferDeleteTerm.patch": "https://issues.apache.org/jira/secure/attachment/12351664/successive_bufferDeleteTerm.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-02-21T19:55:50+0000",
            "content": "Ning Li wrote:\n\n> The code correctly reflects its designed semantics:\n> numBufferedDeleteTerms is a simple sum of terms passed to\n> updateDocument or deleteDocuments.\n> \n> If the first of two successive calls to the same term should be\n> considered no op if no docs were added in between, shouldn't the first\n> also be considered no op if the docs added in between do not contain\n> the term? Whether a doc contains a term, however, can only be\n> determined at the time of actual deletion for performance reasons.\n> \n> Thus I think the original semantics is cleaner.\n\nI agree, the code is correct for a 'simple sum' semantics. \n\nLooking at the javadocs for setMaxBufferedDeleteTerms(), it says: \n\"minimal number of delete terms\". To me, this reads like: \"minimal \nnumber of (actual) delete terms\".\n\nBut beyond one definition or another, I guess the question should be\nwhat would application developers expect. For an operation that is \nclearly a no-op, wouldn't they expect no side effects?\n\nAs an example, if an application calls IndexWriter.flush() twice \nin a row, second call is a no-op and would have no side effects.\n\nSimilarly, when editing a document or file, clicking \"save\" will \ndo nothing in case there are no changes (otherwise users would be\nquite surprised).\n\nImagine the application and Lucene could talk, with the current \nimplementation we could hear something like this:\n\n  [applic] <calling del-by-term>;\n  [lucene] <increment buf-del-terms-counter>;\n  [applic] <searching>; \"why on earth weren't these docs deleted?\"\n  [applic] <calling del-by-term again for same term>;\n  [lucene] <incrementing buf-del-terms-counter again; merging>;\n  [applic] <searching>; \"that's better! mmm... I wonder why the \n           first delete of this term didn't do it... Was there\n           any difference between these calls?\"\n ",
            "author": "Doron Cohen",
            "id": "comment-12474808"
        },
        {
            "date": "2007-02-22T06:43:27+0000",
            "content": "[ moving discussion back to JIRA ]\n\nNing Li wrote:\n\n> On 2/21/07, Doron Cohen (JIRA) <jira@apache.org> wrote:\n> > Imagine the application and Lucene could talk, with the current\n> > implementation we could hear something like this: ...\n> \n> However, there could be multiple threads updating the same index. For\n> example, thread 1 deletes the term \"id:5\" twice, thread 2 inserts a\n> document with \"id:10\". The following two are among the possible\n> execution sequences:\n> Sequence 1:\n>   thread 1 deletes \"id:5\"\n>   thread 1 deletes \"id:5\"\n>   thread 2 inserts document \"id:10\"\n> Sequence 2:\n>   thread 1 deletes \"id:5\"\n>   thread 2 inserts document \"id:10\"\n>   thread 1 deletes \"id:5\".\n> \n> They should return the same numBufferedDeleteTerms, not different ones.\n\nNice example Ning!\n\nMmmm... I am still not convinced...  \n\nAssume the inserts were with \"id:5\", then after sequence 1 there \nwould be a doc with \"id:5\" in the index, but after sequence 2\nthere would not be such a doc. NumDocs() would be different\nin the two sequences. Why should numBufferedDeleteTerms be the same?\n\nAnyhow, even if we would agree that this is a problem, I think it \nis a minor one, and I am ok with deciding to leave things as they \nare. Writing this piece from start, you may see internal logic that \nI don't see.\n\nLet's give it a few days, perhaps get comments from others, \n(perhaps change our mind about it  ).  If nothing changes \nI think I will set \"won't fix\".\n\nRegards,\nDoron ",
            "author": "Doron Cohen",
            "id": "comment-12474924"
        },
        {
            "date": "2007-06-05T21:51:28+0000",
            "content": "No one else but me consider this behavior a problem, so close it. ",
            "author": "Doron Cohen",
            "id": "comment-12501710"
        }
    ]
}