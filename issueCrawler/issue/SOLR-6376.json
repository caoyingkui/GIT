{
    "id": "SOLR-6376",
    "title": "Edismax field alias bug",
    "details": {
        "affect_versions": "4.6.1,                                            4.7,                                            4.7.2,                                            4.8,                                            4.9,                                            4.10.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "If you create a field alias that maps to a nonexistent field, the query will be parsed to utter garbage.\n\nThe bug can reproduced very easily. Add the following line to the /browse request handler in the tutorial example solrconfig.xml\n<str name=\"f.name_features.qf\">name features XXX</str>\n(XXX is a nonexistent field)\n\nThis simple query will actually work correctly: \nname_features:video\nand it will be parsed to  (features:video | name:video) and return 3 results. It has simply discarded the nonexistent field and the result set is correct.\nHowever if you change the query to:\nname_features:video AND name_features:video\nyou will now get 0 result and the query is parsed to \n+(((features:video | name:video) (id:AND^10.0 | author:and^2.0 | title:and^10.0 | cat:AND^1.4 | text:and^0.5 | keywords:and^5.0 | manu:and^1.1 | description:and^5.0 | resourcename:and | name:and^1.2 | features:and) (features:video | name:video))~3)\nNotice the AND operator is now used a term! The parsed query can turn out even worse and produce query parts such as:\ntitle:2~2    \ntitle:and^2.0^10.0  \n\nPrefered solution: During start up, shut down Solr if there is a nonexistant field alias. Just as is the case if the cycle-detection detects a cycle:\nAcceptable solution: Ignore the nonexistant field totally.\n\nThomas Egense",
    "attachments": {
        "SOLR-6376.patch": "https://issues.apache.org/jira/secure/attachment/12677189/SOLR-6376.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14184502",
            "date": "2014-10-26T14:46:20+0000",
            "content": "Issue not reproduced.\nNot existing field completely ignored from parsed query.\nAdded test to TestExtendedDismaxParser to check this. "
        },
        {
            "author": "Thomas Egense",
            "id": "comment-14184981",
            "date": "2014-10-27T09:14:14+0000",
            "content": "Thank you for looking into this bug. I tested your patch and can confirm it passes unit-tests and you indeed have set all the parameters correct for the unit test.\nBut I also back-ported you patch it to a bugged version (4.9.1)  and the unit-test still passed!  So somehow this bug can not be reproduced by this unit-test setup.\nI also tested my bug on the solr-example that comes with 4.10.1 and the bug can still very easy be reproduced  with this setup I described by adding one line to the /browse requesthandler (<str name=\"f.name_features.qf\">name features XXX</str>)\nand run the two queries\n name_features:video (works)\n name_features:video AND name_features:video  (bugs)\n\nI just realized this bug is a duplicate of SOLR-5052 which is also still unresolved. The setup to reproduce the bug is more simple in my descriptions as I cooked it down the essentials.\n\nThomas Egense\n\n "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14229228",
            "date": "2014-11-30T19:56:19+0000",
            "content": "I was able to reproduce the issue with Unit test. Please see patch attached.\nParsing behavior look like expected.\nWhen non existing field met, runtime exception indicating unknown field thrown, parser escape query and re-parced. \nIn this case, parsed clauses converted to escaped \"myalias:Zapp \"AND\" myalias:Zapp\", where AND escaped as literal. "
        },
        {
            "author": "Thomas Egense",
            "id": "comment-14229616",
            "date": "2014-12-01T09:56:43+0000",
            "content": " Vitaliy Zhovtyuk:\nWhat did you do different to trigger the bug in a unittest  environment this time? "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14244559",
            "date": "2014-12-12T18:29:05+0000",
            "content": "Unittest use the same in configuration as in standalone version. Two more parameters present in browse request handler configuration needed to reproduce parsing problem:\n       <str name=\"qf\">\n          text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4\n          title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0\n       </str>\n       <str name=\"mm\">100%</str> "
        }
    ]
}