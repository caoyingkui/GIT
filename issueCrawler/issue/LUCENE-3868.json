{
    "id": "LUCENE-3868",
    "title": "Thread interruptions shouldn't cause unhandled thread errors (or should they?).",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "This is a result of pulling uncaught exception catching to a rule above interrupt in internalTearDown(); check how it was before and restore previous behavior?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-15T08:44:07+0000",
            "content": "This is fairly messy in trunk; threads are interrupted either at method or at class level (depending on sysprop). Additionally, the interruption is done like this:\n\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n\n\nthis doesn't restore default handler, may cause interference with other threads (which do have handlers), etc.\n\nI'd rather fix it by switching to LUCENE-3808 where this is solved at the runner's level (and controlled via annotations). ",
            "author": "Dawid Weiss",
            "id": "comment-13229990"
        },
        {
            "date": "2013-05-10T10:33:37+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653978"
        }
    ]
}