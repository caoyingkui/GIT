{
    "id": "LUCENE-2237",
    "title": "allow TimeLimitedCollector timer thread to be shutdown",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.4,                                            2.4.1,                                            2.9,                                            2.9.1,                                            3.0",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "When using Tomcat 6 and Solr 1.3 (with Lucene 2.4) we found that if we caused Tomcat to reload our .war files a number of times, we would eventually see PermGen memory errors where the JVM' s GC reported that all \"permanent generation\" memory had been consumed and none could be freed.  This turns out to be a fairly common issue when using Tomcat's autoDeploy feature (or similar features of other application servers).  See, for example:\n\nhttp://ampedandwired.dreamhosters.com/2008/05/09/causes-of-java-permgen-memory-leaks/\nhttp://cornelcreanga.com/2009/02/how-to-prevent-memory-leaks-when-reloading-web-applications/\nhttp://www.samaxes.com/2007/10/classloader-leaks-and-permgen-space/\nhttp://blogs.sun.com/fkieviet/entry/how_to_fix_the_dreaded\n\nMy understanding of the issue is that when reloading a webapp, Tomcat starts by releasing all of its references to the ClassLoader used to load the previous version of the application.  Then it creates a new ClassLoader which reloads the application.  The old ClassLoader and old version of the app are left to the garbage collector to be cleaned up.  However, if the app itself hold references to the ClassLoader, the GC may not be able to ascertain that the ClassLoader is truly unused, in which case, it and the entire old version of app remain in memory.  If one causes a sufficient number of app reloads, eventually PermGen space is exhausted.\n\nThe particular issue we had with Solr and Lucene was that Lucene's TimeLimitedCollector creates a thread which is not shut down anywhere; this in turn seems to prevent Tomcat from unloading the ClassLoader.  To solve this I applied a minor patch to TimeLimitedCollector which adds a flag variable controlling the timer thread's loop and some methods to set it so the thread will exit.\n\nThe stopThread() method can then be called by an application such as Solr from a class registered as a servlet context listener; when the server is unloading the application the listener will execute and in turn stop the timer thread.  My testing during multiple reloads of solr.war with and without these patches indicates that without them, we consistently get PermGen errors, and with them, once the PermGen is nearly exhausted (which may take a lot of reloads, e.g., 10-15!), the GC is able to free space and no PermGen errors occur.",
    "attachments": {
        "LUCENE-2237-2_4.patch": "https://issues.apache.org/jira/secure/attachment/12431477/LUCENE-2237-2_4.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-01-26T22:38:24+0000",
            "content": "This is a patch against the Lucene 2.4 branch (or at least the specific revision of Lucene used in Solr 1.3).  Apologies for not providing a patch against the latest trunk.  The changes are small enough, though, that I suspect anyone can re-apply them to trunk without too much difficulty. ",
            "author": "Chris Darroch",
            "id": "comment-12805249"
        },
        {
            "date": "2010-01-26T23:03:55+0000",
            "content": "See https://issues.apache.org/jira/browse/SOLR-1735 for some Solr 1.3 patches which utilize the stopThread() method. ",
            "author": "Chris Darroch",
            "id": "comment-12805263"
        },
        {
            "date": "2011-02-01T18:38:33+0000",
            "content": "The runFlag should also be declared volatile. This is an important bug. ",
            "author": "Kyrill Alyoshin",
            "id": "comment-12989317"
        },
        {
            "date": "2011-03-03T06:02:31+0000",
            "content": "linking related issues ",
            "author": "Hoss Man",
            "id": "comment-13001877"
        },
        {
            "date": "2011-03-03T06:22:41+0000",
            "content": "Note: this issue was created as an \"improvement\" and looks to add APIs to TimeLimitedCollector \u2013 meanwhile LUCENE-2822  was created with the opinion that this is a bug and that TimeLimitedCollector is inherently broken.\n\nLUCENE-2822 has garnered some more discussion that should be considered by anyone interested in this issue. ",
            "author": "Hoss Man",
            "id": "comment-13001886"
        },
        {
            "date": "2011-11-11T23:36:13+0000",
            "content": "see LUCENE-2822 ",
            "author": "Simon Willnauer",
            "id": "comment-13148839"
        }
    ]
}