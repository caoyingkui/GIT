{
    "id": "LUCENE-3089",
    "title": "CachingTokenFilter can cause close() to be called twice.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In LUCENE-3064, we added some state and checks to MockTokenizer to validate that consumers\nare properly using the tokenstream workflow (described here: http://lucene.apache.org/java/3_0_3/api/core/org/apache/lucene/analysis/TokenStream.html)\n\nOne problem I noticed in TestTermVectorsWriter.testEndOffsetPositionWithCachingTokenFilter is that providing a CachingTOkenFilter directly will result\nin close() being called twice on the underlying tokenstream... this seems wrong.\n\nSome ideas to fix this could be:\n\n\tCachingTokenFilter overrides close() and we document that you must close the underlying stream yourself. I think this is what the queryparser does anyway.\n\tCachingTokenFilter does something tricky to ensure it only closes the underlying stream once.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-14T11:00:31+0000",
            "content": "robert, since TokenStream impl. Closeable we should be able to call close as often as we want to. we should actually check that we do that in our tests to make sure nothing fails.  ",
            "author": "Simon Willnauer",
            "id": "comment-13149564"
        },
        {
            "date": "2011-11-14T11:03:41+0000",
            "content": "Yes, the java.io.Closeable interface requires the underlying implementation to ignore additional close calls. But we should still fix our code to actually call it only once. ",
            "author": "Uwe Schindler",
            "id": "comment-13149566"
        },
        {
            "date": "2011-11-14T11:04:32+0000",
            "content": "Hmm i'm not sure i like that... perhaps its not appropriate to implement closeable.\n\nLots of people seem to have problems with the analysis workflow and I think this adds confusion. ",
            "author": "Robert Muir",
            "id": "comment-13149568"
        },
        {
            "date": "2011-11-14T11:05:20+0000",
            "content": "\nYes, the java.io.Closeable interface requires the underlying implementation to ignore additional close calls. \n\nJust because java.io.Closeable exists doesn't mean we must use it everywhere: if these\nsemantics are inappropriate we can simply have .close() ourselves. ",
            "author": "Robert Muir",
            "id": "comment-13149570"
        },
        {
            "date": "2011-11-14T11:06:29+0000",
            "content": "I disagree, removing the Closeable interface makes it stupid to use in Java 7 (try-with-resources). ",
            "author": "Uwe Schindler",
            "id": "comment-13149571"
        },
        {
            "date": "2011-11-14T11:07:31+0000",
            "content": "I think java 7 close-with-resources is stupid too. ",
            "author": "Robert Muir",
            "id": "comment-13149572"
        },
        {
            "date": "2011-11-14T11:08:12+0000",
            "content": "Why? For TokenStreams try-with-resources is great. ",
            "author": "Uwe Schindler",
            "id": "comment-13149573"
        },
        {
            "date": "2011-11-14T11:10:15+0000",
            "content": "Why? For TokenStreams close-with-resources is great.\n+1 ",
            "author": "Simon Willnauer",
            "id": "comment-13149575"
        },
        {
            "date": "2011-11-14T11:31:56+0000",
            "content": "I just don't think it should be blanket policy without thinking things thru.\n\nfor example: lots of code you see on the internet opens a new indexreader for every search and closes it\n\nshould we seriously encourage this?! If someone seriously needs to do this, thats an expert case and\nthey can use try + finally and close themselves.\n\nSo for example, there I think it makes sense for IndexReader to not support AutoCLoseable, and separately\nto remove the stupid IndexSearcher(Directory) so that IndexSearcher only takes IndexReader, so its always\na thin wrapper like we claim it is (which is an outright lie today). Then IndexSearcher would implement [Auto]Closeable\nsince its cheap.\n ",
            "author": "Robert Muir",
            "id": "comment-13149580"
        },
        {
            "date": "2011-11-14T11:48:01+0000",
            "content": "\nSo for example, there I think it makes sense for IndexReader to not support AutoCLoseable, and separately\nto remove the stupid IndexSearcher(Directory) so that IndexSearcher only takes IndexReader, so its always\na thin wrapper like we claim it is (which is an outright lie today). \n\n+1\n\nWe should deprecate/remove the IS ctor that takes a Directory.  It's trappy. ",
            "author": "Michael McCandless",
            "id": "comment-13149586"
        },
        {
            "date": "2011-11-14T12:11:51+0000",
            "content": "Then we should also rename close() to something else: closeThisIfYouAreReallySure() - implementing Closeable is then already out-of scope. When adding a close method to classes it leads you to take care of closing after using it. Also everybody expects what Closeable interface defines: You can use it multiple times.\n\nFor TokenStreams thats find, as close is just a cleanup and is not even required if you dont have a Tokenizer with Reader. ",
            "author": "Uwe Schindler",
            "id": "comment-13149595"
        }
    ]
}