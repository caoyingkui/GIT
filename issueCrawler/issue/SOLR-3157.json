{
    "id": "SOLR-3157",
    "title": "custom logging",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Test",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We need custom logging to decipher tests with multiple core containers, cores, in a single JVM.",
    "attachments": {
        "jetty_threadgroup.patch": "https://issues.apache.org/jira/secure/attachment/12516180/jetty_threadgroup.patch",
        "SOLR-3157.patch": "https://issues.apache.org/jira/secure/attachment/12516176/SOLR-3157.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13215110",
            "date": "2012-02-23T22:12:50+0000",
            "content": "I took a quick shot by creating a custom formatter.\nI tried making the following changes to the testlogging.properties file\n\n\n+#java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter\n+java.util.logging.ConsoleHandler.formatter=org.apache.solr.SolrLogFormatter\n\n\n\nBut the custom formatter is not invoked. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13217250",
            "date": "2012-02-27T16:14:12+0000",
            "content": "Here's a patch that changes the log format for tests to something that should be easier to debug tests with multiple core containers.\n\nExample:\n\n\n18808 T=64 C3 UPDATE /update {waitSearcher=true&wt=javabin&wt=javabin&commit_end_point=true&commit=true&version=2&version=2} {commit=} 0 60\n18809 T=61 C2 UPDATE /update {waitSearcher=true&wt=javabin&commit=true&version=2} {commit=} 0 94\n18810 T=1 oascc.ZkStateReader.updateCloudState Manual update of cluster state initiated\n18811 T=1 oascc.ZkStateReader.updateCloudState Updating cloud state from ZooKeeper... \n18855 T=99 C1 REQ /select {distrib=false&wt=javabin&q=*:*&version=2} hits=190 status=0 QTime=35 \n18864 T=100 C3 REQ /select {distrib=false&wt=javabin&q=*:*&version=2} hits=189 status=0 QTime=1 \n18868 T=101 C2 REQ /select {distrib=false&wt=javabin&q=*:*&version=2} hits=180 status=0 QTime=1 \n\n\n\n\n\tfirst number is milliseconds since the start of the test.  Makes it easy to sort by the first number or subtract to get elapsed time, and is more relevant to a short running test.\n\tT=101 is the thread ID... this will be useful for any multi-threaded test.\n\tC2 is the core number.  we don't use core name since there can be multiple core containers with the same name (like \"\") in these distributed tests.\n\tpackage names just use the first letters catenated together for brevity\n\taliases for common log output are implemented (REQ and UPDATE)\n\tI got rid of the double logging for updates\n\tsingle line format is easier to read and  easier to grep and do things with scripts\n\tthe first time a core is seen (or whenever it's cloudstate changes) that is output.  This allows correlation of C2 with URLs.\nFor example, if we want to know about core C2, we search back in the logs for C2_STATE and see\n\nASYNC  NEW_CORE C2 name= org.apache.solr.core.SolrCore@22e38fca url=http://127.0.0.1:58141/solr/ node=127.0.0.1:58141_solr C2_STATE=coll:collection1 core: props:{num_shards=3, shard=shard3, state=active, core=, collection=collection1, node_name=127.0.0.1:58141_solr, base_url=http://127.0.0.1:58141/solr}\n\n\n\n\n\nWe can only currently do core / container correlation when SolrRequestInfo is set (i.e. request handler requests).  I tried setting a ThreadGroup for the jetty instances we spin up, but they didn't stick (request threads were still part of the main thread group).  Still, I think this is moving in the right direction. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13217256",
            "date": "2012-02-27T16:21:40+0000",
            "content": "I tried setting a ThreadGroup for the jetty instances we spin up, but they didn't stick (request threads were still part of the main thread group).  Still, I think this is moving in the right direction.\n\nInteresting. I've been playing with that randomizedrunner of mine in the background an jetty connection pool threads surely do leak out of tests (and cause their failure), which would suggest they do inherit their parent thread's thread group.\n\nCan you send me a patch where you tried to enforce a threadgroup for them? I'd like to take a look. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13217265",
            "date": "2012-02-27T16:41:16+0000",
            "content": "Can you send me a patch where you tried to enforce a threadgroup for them?\n\nSaved by intellij's local history! (I had scrapped it since it wasn't working).\n\nThis represents my last try and is prob more complex than needed, but I was taking shots in the dark (keeping the launching thread around forever in case that made a difference, etc).\n\nI experimented in SolrLogFormatter.main with thread groups first, and it seemed to work fine.  Very disappointing that I couldn't get it to stick with jetty. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13217275",
            "date": "2012-02-27T16:51:04+0000",
            "content": "Committed (since this is just for tests now).  We can incrementally improve... ideas welcome!\nYou can disable by commenting out setupLogging here:\n\npublic abstract class SolrTestCaseJ4 extends LuceneTestCase {\n  @BeforeClass\n  public static void beforeClassSolrTestCase() throws Exception {\n    setupLogging();\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13217284",
            "date": "2012-02-27T16:58:04+0000",
            "content": "Regarding jetty: note that we use a SocketConnector (and hence there is no associated visible thread pool we can do anything with).  We don't use the NIO connector since it was causing intermittent errors in the tests. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13218398",
            "date": "2012-02-28T17:52:18+0000",
            "content": "Yonik: your changes in r1294212 break the SolrCore.execute log format conventions we've had in place since SOLR-267, which breaks some log processing code i have (and since the whole point of SOLR-267 was to make it easy for people to write log parses, i'm guessing i'm not the only one)\n\nNotably:\n\n\tyou changed the \"path\" and \"params\" key=val pairs so they no longer include the key, just the val \u2013 this doesn't really make sense to me since the whole point of those log lines is that they are suppose to be consistent and easy to parse.\n\tyou removed the webapp key=val pair completely (comment says \"multiple webaps are no longer best practise\" but that doesn't mean people don't use them or that we should just suddenly stop logging them.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13218704",
            "date": "2012-02-28T23:40:33+0000",
            "content": "Log format changes seem a lot less important than actual request/response formats?\nIMO, it's actually higher importance that we have better logging for ourselves so we can more easily debug our tests.\n\nMaybe there's a way I can log different things when using the test formatter and restore the production log format to it's former glory. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13218816",
            "date": "2012-02-29T01:41:43+0000",
            "content": "\nIMO, it's actually higher importance that we have better logging for ourselves so we can more easily debug our tests.\n\nagreed ... but we shouldn't break the log format of the most important line Solr logs if we can avoid it (particularly since the format was chosen specifically to be easy to parse).\n\ni also don't understand why you think those changes to SolrCore.execute's \"info\" log make anything better? your change removed really useful info and made the messages harder to parse because it removed the consistent key=val pattern for the path & param vals.\n\n\nMaybe there's a way I can log different things when using the test formatter and restore the production log format to it's former glory.\n\nI don't understand why the structure of the string used in this one info message has anything to do with your goal of better test logging using the SolrLogFormatter?  why can't that string format stay exactly identical regardless of whether it's in a test (and the record gets formated with all of your new thread and meatdata goodness) or not ?\n\nas things stand now (with your latest commit #1294911) these messages are still broken compared to 3x because they don't include the SolrCore name (the \"logid\" used to init the StringBuilder before you changed it) ... that seems pretty damn important (although i realize now i somehow didn't mention that in my earlier comment)\n\n\n3x example...\n\nFeb 28, 2012 5:38:33 PM org.apache.solr.core.SolrCore execute\nINFO: [core0] webapp=/solr path=/select/ params={q=*:*&sort=score+desc} hits=0 status=0 QTime=11 \n\ntrunk example...\n\nFeb 28, 2012 5:39:02 PM org.apache.solr.core.SolrCore execute\nINFO: webapp=/solr path=/select/ params={q=*:*&sort=score+desc} hits=0 status=0 QTime=40 \n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15503543",
            "date": "2016-09-19T13:49:31+0000",
            "content": "This seems to be committed already, can we close this old issue? "
        }
    ]
}