{
    "id": "SOLR-7055",
    "title": "Java serialization error while operating a mixed mode Solr cluster",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "We are in the process of upgrading Solr cloud from 4.4.0 to 4.10.3. We setup a mixed mode cluster having 1 node of version 4.10.3 and multiple nodes of version 4.4.0. The overseer node was on the older version. \n\nWhen we submitted the request to create a collection, it failed with following exception,\n\n2015-01-27 16:37:46,366 INFO org.apache.solr.servlet.SolrDispatchFilter: [admin] webapp=null path=/admin/collections params=\n{numShards=2&maxShardsPerNode=5&createNodeSet=search-testing-c5-ha-2.vpc.cloudera.com&name=coll_ctl_basic_test&replicationFactor=2&action=CREATE}\nstatus=500 QTime=23 \n2015-01-27 16:37:46,366 ERROR org.apache.solr.servlet.SolrDispatchFilter: null:org.apache.solr.common.SolrException: java.io.InvalidClassException: org.apache.solr.common.SolrException; local class incompatible: stream classdesc serialVersionUID = -3117666575281450216, local class serialVersionUID = 7729548960805930390\nat org.apache.solr.client.solrj.SolrResponse.deserialize(SolrResponse.java:60)\nat org.apache.solr.handler.admin.CollectionsHandler.handleResponse(CollectionsHandler.java:359)\nat org.apache.solr.handler.admin.CollectionsHandler.handleResponse(CollectionsHandler.java:320)\nat org.apache.solr.handler.admin.CollectionsHandler.handleCreateAction(CollectionsHandler.java:486)\nat org.apache.solr.handler.admin.CollectionsHandler.handleRequestBody(CollectionsHandler.java:148)\nat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\nat org.apache.solr.servlet.SolrDispatchFilter.handleAdminRequest(SolrDispatchFilter.java:770)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:271)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:211)\nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n...\nCaused by: java.io.InvalidClassException: org.apache.solr.common.SolrException; local class incompatible: stream classdesc serialVersionUID = -3117666575281450216, local class serialVersionUID = 7729548960805930390\nat java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:617)\nat java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1622)\nat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1517)\nat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1771)\nat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)\nat java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)\nat java.util.ArrayList.readObject(ArrayList.java:771)\nat sun.reflect.GeneratedMethodAccessor426.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:606)\nat java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)\nat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)\nat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)\nat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)\nat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)\nat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)\nat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)\nat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)\nat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)\nat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)\nat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)\nat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)\nat java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)\nat org.apache.solr.client.solrj.SolrResponse.deserialize(SolrResponse.java:58)\n... 30 more \n\nFrom the upgrade perspective, it is important to ensure backward compatibility between the request/response data-types used by Solr cloud.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-28T18:05:48+0000",
            "author": "Hrishikesh Gadre",
            "content": "Should we be using an alternate serialization mechanism (instead of Java serialization)? If someone can provide feedback, I will take a stab at this... ",
            "id": "comment-14295519"
        },
        {
            "date": "2015-01-28T18:15:52+0000",
            "author": "Mark Miller",
            "content": "Ugg ... I'm really surprised to see we are serializing a SolrResponse object with Java serialization and putting it in ZK. We def should be avoiding storing anything serialized with Java serialization anywhere as a general practice - but this is particularly not good IMO.\n\nOf course now we also have to deal with backcompat with this bad practice when addressing it as well though... ",
            "id": "comment-14295549"
        },
        {
            "date": "2015-01-28T18:28:31+0000",
            "author": "Mark Miller",
            "content": "This is my fault. I pulled this in SOLR-4043. The Collections API was super limited and I was pulling in improvements where I could get them. Failed to pull out this Java serialization use during review. ",
            "id": "comment-14295570"
        },
        {
            "date": "2015-01-28T18:48:06+0000",
            "author": "Mark Miller",
            "content": "Anyway, we should be using JavaBin or some text based format like json  ",
            "id": "comment-14295601"
        },
        {
            "date": "2015-01-28T18:52:36+0000",
            "author": "Hrishikesh Gadre",
            "content": "I wonder if we should add 'Usage of Java Serializable' in the forbidden API check ? This will help in future though. For the current situation, what would you suggest? One thought came to my mind is as follows,\n\n1. Replace the Java serialization usage with something else (may be json ?)\n2. Provide a migration script which would read the ZK data using the current classes (before the upgrade), translate it to the intended serialization format and put it back. Obviously during this step Solr cloud would need to be shut-down, upgraded to the latest bits and restarted. Since the ZK data is in correct format, it would work fine. ",
            "id": "comment-14295609"
        },
        {
            "date": "2015-01-28T19:05:56+0000",
            "author": "Mark Miller",
            "content": "Yeah, I think we could offer an upgrade script option, but since these are temporary responses for collection api call responses, I think it's probably okay to toss them as part of the upgrade for most people - if we can't read them, continue on. We would just want to upgrade note a recommendation to not run collections api commands while doing the rolling upgrade (they should still work the same, but you might get an exception rather than a proper response). ",
            "id": "comment-14295630"
        },
        {
            "date": "2015-01-28T19:12:35+0000",
            "author": "Mark Miller",
            "content": "I wonder if we should add 'Usage of Java Serializable' in the forbidden API check ?\n\nWe should look at it - I'm surprised it's not already on the list. ",
            "id": "comment-14295642"
        },
        {
            "date": "2015-01-28T19:12:49+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ok that simplifies the implementation. BTW do you agree on the first part?\n\n>>I wonder if we should add 'Usage of Java Serializable' in the forbidden API check ? ",
            "id": "comment-14295644"
        },
        {
            "date": "2015-01-28T19:13:45+0000",
            "author": "Hrishikesh Gadre",
            "content": "Seems like I missed your earlier comment. ",
            "id": "comment-14295646"
        },
        {
            "date": "2015-01-28T19:49:53+0000",
            "author": "Mark Miller",
            "content": "want to upgrade note a recommendation to not run collections api commands while doing the rolling upgrade\n\nThe more I think about this, the more this makes sense in general, for any rolling upgrades. We should remove this java serialization, but I think creating or modifying a collection across versions is probably never a wonderful idea. We might want to add an easy way to enable / disable such API's even. ",
            "id": "comment-14295709"
        },
        {
            "date": "2015-01-28T20:14:21+0000",
            "author": "Hrishikesh Gadre",
            "content": "Yes make sense. Created a sub-task for this work. ",
            "id": "comment-14295767"
        }
    ]
}