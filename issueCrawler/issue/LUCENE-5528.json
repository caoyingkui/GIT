{
    "id": "LUCENE-5528",
    "title": "Add context to AnalyzingInfixSuggester",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ]
    },
    "description": "Spinoff from LUCENE-5350.",
    "attachments": {
        "LUCENE-5528.patch": "https://issues.apache.org/jira/secure/attachment/12634972/LUCENE-5528.patch",
        "contextInputIteratImpl.patch": "https://issues.apache.org/jira/secure/attachment/12635449/contextInputIteratImpl.patch",
        "LUCENE-5528-1.patch": "https://issues.apache.org/jira/secure/attachment/12635458/LUCENE-5528-1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13937117",
            "author": "Michael McCandless",
            "content": "Patch, I think it's close.\n\nI started from Areek's patch on LUCENE-5350, to add context to InputIterator and LookupResult, and then fixed AnalyzingInfixSuggester to index all contexts as StringField, and add MUST clauses to the BooleanQuery at lookup time.  I also store the contexts using SSDV field, and return them for each LookupResult. ",
            "date": "2014-03-16T12:49:47+0000"
        },
        {
            "id": "comment-13937335",
            "author": "Michael McCandless",
            "content": "New patch, fixing one issue I hit when I was folding this into http://jirasearch.mikemccandless.com, which was the contexts should all be OR'd together not AND'd (ie, if a suggestion has any of the contexts, it's accepted).\n\nI think it's ready. ",
            "date": "2014-03-16T21:10:56+0000"
        },
        {
            "id": "comment-13940038",
            "author": "Areek Zillur",
            "content": "I have a patch with contexts() returning BytesRefIterator rather than Set<BytesRef>, along with implementation for the contexts in all the InputIter implementation (except HighFreqInputIter and FileInputIter). Do you think It would make sense to have the context() return a BytesRefIterator instead? ",
            "date": "2014-03-19T01:03:20+0000"
        },
        {
            "id": "comment-13940039",
            "author": "Areek Zillur",
            "content": "Patch with context() and hasContext() implementations of various InputIterator:\n\n\n\tAdded contexts() [returns BytesRefIterator] and hasContexts() APIs in InputIterator\n\tImplementation of contexts() in DocumentDictionaryIterator, DocumentValueSourceIterator, BufferedInputInterator, SortedInputIteraor and UnSortedInputIterator\n\tAdded tests for context() API in DocumentDictionaryIterator, DocumentDictionaryIterator and SortedInputIterator\n\tDisable all suggesters from accepting InputIterator with contexts\n\n\n\nNOTE: this patch does not add context to AnalyzingInfixSuggester and co! ",
            "date": "2014-03-19T01:06:35+0000"
        },
        {
            "id": "comment-13940076",
            "author": "Areek Zillur",
            "content": "This patch merges the previous patch and the original patch together. It adds support to contexts() in various InputIterator implementation, along with using the contexts in AnalyzingInfixSuggester (original patch by Michael). The patch changes InputIterator's context from Set<BytesRef> to BytesRefIterator. The lookup() API still uses the Set<BytesRef>. Thoughts? ",
            "date": "2014-03-19T02:19:34+0000"
        },
        {
            "id": "comment-13940381",
            "author": "Michael McCandless",
            "content": "Hmm, I think I prefer the simpler Set<BytesRef>?  And e.g. one problem with BytesRefIterator is you can only iterate it once (we'd sort of need a BytesRefIterable I guess), which might be a hassle for some suggesters? ",
            "date": "2014-03-19T10:38:27+0000"
        },
        {
            "id": "comment-13941472",
            "author": "Areek Zillur",
            "content": "That sounds good. I will change the InputIterator contexts() api to return Set<BytesRef> then. Will get a patch up tomorrow. ",
            "date": "2014-03-20T07:10:34+0000"
        },
        {
            "id": "comment-13942929",
            "author": "Michael McCandless",
            "content": "I will change the InputIterator contexts() api to return Set<BytesRef> then. Will get a patch up tomorrow.\n\nThanks Areek! ",
            "date": "2014-03-21T10:07:43+0000"
        },
        {
            "id": "comment-13943713",
            "author": "Areek Zillur",
            "content": "Updated Patch (LUCENE-5528-1.patch):\n\n\tuses Set<BytesRef> to represent contexts in InputInterator\n\n ",
            "date": "2014-03-21T23:12:33+0000"
        },
        {
            "id": "comment-13943982",
            "author": "Michael McCandless",
            "content": "Thanks Areek, new patch looks great!  It's nice that Document/ExpressionDictionary, and the wrapping InputIterators (Sorted/Unsorted) handle contexts as well.  I think it's close.\n\nI noticed a lot of added but unused \"import import org.apache.lucene.util.BytesRefIterator;\" lines.\n\nAlso, AnalyzingInfixSuggester calls InputIterator.contexts() regardless of whether hasContexts return true or false; I think this is actually OK, but can you update InputIterator's javadocs to state that this is allowed, and contexts() is expected to return null even if hasContexts() had returned false?\n\nFinally just a small whitespace issue: instead of:\n\n    if(iterator.hasContexts()) {\n\n\n\nCan you do this:\n\n    if (iterator.hasContexts()) {\n\n\n\n(i.e. just add space between \"if\" and \"(\").  Thanks! ",
            "date": "2014-03-22T09:29:06+0000"
        },
        {
            "id": "comment-13943983",
            "author": "Michael McCandless",
            "content": "BTW I pushed this patch to the jirasearch \"production\" site (http://jirasearch.mikemccandless.com ) and it seems to be working very well!\n\nIf you drill down on a specific project (Lucene, Solr, Tika) then the suggestions you see are only for that project.  This also happens if you type the project name, e.g. \"lucene word\" shows only lucene issues/users containing word*, and \"tika word\" shows only tika issues/users with word*\n\nNice to eat your own dog food ... ",
            "date": "2014-03-22T09:33:27+0000"
        },
        {
            "id": "comment-13944256",
            "author": "Areek Zillur",
            "content": "Updated patch (LUCENE-5528-1.patch):\n\n\tremoved unused imports (my bad!)\n\tupdated InputIteration.context() docs to record that it can return null\n\tminor formatting fixes (as suggested)\n\n\n\nThanks Michael for the review!\nThat is awesome, I played around with the jirasearch to see the functionality for myself. ",
            "date": "2014-03-22T22:10:02+0000"
        },
        {
            "id": "comment-13944415",
            "author": "Michael McCandless",
            "content": "Thanks Areek, this looks great!  I'll commit soon. ",
            "date": "2014-03-23T12:15:36+0000"
        },
        {
            "id": "comment-13944447",
            "author": "ASF subversion and git services",
            "content": "Commit 1580510 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1580510 ]\n\nLUCENE-5528: add contexts to AnalyzingInfixSuggester ",
            "date": "2014-03-23T15:25:45+0000"
        },
        {
            "id": "comment-13944451",
            "author": "ASF subversion and git services",
            "content": "Commit 1580517 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1580517 ]\n\nLUCENE-5528: add contexts to AnalyzingInfixSuggester ",
            "date": "2014-03-23T15:43:11+0000"
        },
        {
            "id": "comment-13944452",
            "author": "ASF subversion and git services",
            "content": "Commit 1580518 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1580518 ]\n\nLUCENE-5528: remove generics ",
            "date": "2014-03-23T15:45:19+0000"
        },
        {
            "id": "comment-13982637",
            "author": "Uwe Schindler",
            "content": "Close issue after release of 4.8.0 ",
            "date": "2014-04-27T23:26:02+0000"
        },
        {
            "id": "comment-14196155",
            "author": "Arcadius Ahouansou",
            "content": "Hello Michael McCandless\nFor the AnalazingInfixSuggester, does it make sens to have a new override for the method lookup() with an additional param allContextsRequired , similar to allTermsRequired\n\n lookup(CharSequence key, Set<BytesRef> contexts, int num, boolean allTermsRequired, boolean doHighlight, boolean allContextsRequired)\n\n\nwhich will make it possible to have an \"AND\" behaviour for the contexts when you have many contexts instead of the default \"OR\"?\n\nThis means that line\nhttps://github.com/apache/lucene-solr/blob/trunk/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java#L486\nwill now use BooleanClause.Occur.SHOULD  or BooleanClause.Occur.MUST depending on the value of the new param allContextsRequired ...\n\nWe currently have a use-case for this.\n\nThanks.\n\nArcadius. ",
            "date": "2014-11-04T14:37:35+0000"
        },
        {
            "id": "comment-14198145",
            "author": "Arcadius Ahouansou",
            "content": "Another alternative may be to have something like Map<BytesRef,Boolean> instead of Set<BytesRef> where the boolean indicates whether the entry is a SHOULD or a MUST ",
            "date": "2014-11-05T10:34:22+0000"
        },
        {
            "id": "comment-14198260",
            "author": "Michael McCandless",
            "content": "Hi Arcadius Ahouansou, I think it makes sense to give more control over how context is applied; could you open a new issue for this? ",
            "date": "2014-11-05T11:30:40+0000"
        },
        {
            "id": "comment-14198545",
            "author": "Arcadius Ahouansou",
            "content": "Hi Michael McCandless.\nThe new issue is LUCENE-6050\nThanks. ",
            "date": "2014-11-05T15:52:02+0000"
        }
    ]
}