{
    "id": "LUCENE-1555",
    "title": "Deadlock while optimize",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Incomplete",
        "status": "Resolved"
    },
    "description": "Sometimes after starting the thread with the indexer, the thread will hang in the following threads.\n\nThread Lucene Merge Thread #0 (Ausgesetzt)\t\n\tIndexWriter.commitMerge(MergePolicy$OneMerge, SegmentMerger, int) Line: 3751\t\n\tIndexWriter.mergeMiddle(MergePolicy$OneMerge) Line: 4240\t\n\tIndexWriter.merge(MergePolicy$OneMerge) Line: 3877\t\n\tConcurrentMergeScheduler.doMerge(MergePolicy$OneMerge) Line: 205\t\n\tConcurrentMergeScheduler$MergeThread.run() Line: 260\t\n\nThread [Indexer] (Ausgesetzt)\t\n\tObject.wait(long) Line: not available [native Methode]\t\n\tIndexWriter.doWait() Line: 4491\t\n\tIndexWriter.optimize(int, boolean) Line: 2268\t\n\tIndexWriter.optimize(boolean) Line: 2203\t\n\tIndexWriter.optimize() Line: 2183\t\n\tIndexer.run() Line: 263\t\n\n\nIf you need more informations, please let me know.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-03-10T11:38:57+0000",
            "content": "Those thread stack traces actually look completely normal.  Were there other threads involved?  Can you post them?\n\nAre you running with assertions enabled?  (The first stack trace is on an assert line, which is interesting).\n\nAlso, if you're on Unix, with modern JREs if you \"kill -QUIT\" the process then it'll give you all threads, and the stacktrace will include details about which locks are held (your stack traces above don't seem to include this).\n\nAre you certain you were in deadlock, vs an optimize that was taking a long time to run?\n\nHow easy is it to reproduce this? ",
            "author": "Michael McCandless",
            "id": "comment-12680441"
        },
        {
            "date": "2009-03-11T08:23:47+0000",
            "content": "It seems that the IndexWriter tries to lock two times. \n\n\"Lucene Merge Thread #0\" daemon prio=1 tid=0x08a7d3c8 nid=0x229a waiting for monitor entry [0x8ae78000..0x8ae78dc0]\n\tat org.apache.lucene.index.IndexWriter.commitMerge(IndexWriter.java:3758)\n\n\twaiting to lock <0x918d4790> (a org.apache.lucene.index.IndexWriter)\n\tat org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:4243)\n\tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3884)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:205)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:260)\n\n\n\n\n\"Indexer\" prio=1 tid=0x08b6a7f0 nid=0x221c waiting on condition [0x8af92000..0x8af92dc0]\n\tat java.lang.Throwable.fillInStackTrace(Native Method)\n\tat java.lang.Throwable.<init>(Throwable.java:181)\n\tat java.lang.Exception.<init>(Exception.java:29)\n\tat java.lang.InterruptedException.<init>(InterruptedException.java:31)\n\tat java.lang.Object.wait(Native Method)\n\tat org.apache.lucene.index.IndexWriter.doWait(IndexWriter.java:4494)\n\n\tlocked <0x918d4790> (a org.apache.lucene.index.IndexWriter)\n\tat org.apache.lucene.index.IndexWriter.finishMerges(IndexWriter.java:2809)\n\tlocked <0x918d4790> (a org.apache.lucene.index.IndexWriter)\n\tat org.apache.lucene.index.IndexWriter.closeInternal(IndexWriter.java:1647)\n\tat org.apache.lucene.index.IndexWriter.close(IndexWriter.java:1602)\n\tat org.apache.lucene.index.IndexWriter.close(IndexWriter.java:1578)\n\tat com.inet.helpdesk.search.Indexer.indiziereBuendel(Indexer.java:542)\n\tat com.inet.helpdesk.search.Indexer.indexBuendel(Indexer.java:353)\n\tat com.inet.helpdesk.search.Indexer.run(Indexer.java:243)\n\n ",
            "author": "Stefan Heidrich",
            "id": "comment-12680795"
        },
        {
            "date": "2009-03-11T12:09:09+0000",
            "content": "\nIt seems that the IndexWriter tries to lock two times.\n\nRight, but the 2nd thread has called wait(), which internally releases\nthe lock, pauses, then tries to reaquire the lock and return.  So this\nstill looks relatively normal to me so far.\n\nIn this case, one thread has called IndexWriter.close.  That thread is\nwaiting for all merges to finish.  Another thread is trying to commit\na merge... but I don't understand why that other thread is blocked\ntrying to acquire the lock.\n\nHave you changed the default settings on IndexWriter at all?  EG\nnumber of merge threads, RAM buffer size, etc.?\n\nCan you answer my other questions above? ",
            "author": "Michael McCandless",
            "id": "comment-12680856"
        },
        {
            "date": "2009-03-11T12:26:46+0000",
            "content": "First of all, I could solve the problem by using IndexWriter.close(true) instead of IndexWriter.close().\n\nThe indexer thread will index new data periodically. But if the indexer threat is started, it will perform an optimize as well. So it could happen that\n\n((ConcurrentMergeScheduler)indexWriter.getMergeScheduler()).sync();\nindexWriter.close(true);\n\nand \n\nindexWriter = new IndexWriter(indexDirectory, analyser , false, MaxFieldLength.UNLIMITED);\nindexWriter.optimize(MAX_MERGED_FILES);\n((ConcurrentMergeScheduler)indexWriter.getMergeScheduler()).sync();\nindexWriter.close(true);\n\nwill be executed one after another. With close() this could result in a lock.\nI've only changed the maxFieldLength of the writer to 50000.\n ",
            "author": "Stefan Heidrich",
            "id": "comment-12680861"
        },
        {
            "date": "2009-03-11T12:55:41+0000",
            "content": "First of all, I could solve the problem by using IndexWriter.close(true) instead of IndexWriter.close().\n\nDid you mean false instead of true?  (waitForMerges=true is what\nclose() does by default).\n\nThis (false) is dangerous to do, always, since it could result in merge\nstarvation whereby long-running merges never have a chance to\ncomplete (I just updated 2.9 javadocs to state this).\n\n\nThe indexer thread will index new data periodically. But if the indexer threat is started, it will perform an optimize as well. So it could happen that\n\n((ConcurrentMergeScheduler)indexWriter.getMergeScheduler()).sync();\nindexWriter.close(true);\n\nand\n\nindexWriter = new IndexWriter(indexDirectory, analyser , false, MaxFieldLength.UNLIMITED);\nindexWriter.optimize(MAX_MERGED_FILES);\n((ConcurrentMergeScheduler)indexWriter.getMergeScheduler()).sync();\nindexWriter.close(true);\n\nwill be executed one after another. With close() this could result in a lock.\n\nI don't really follow what you're saying here.  Are you saying calling\nConcurrentMergeScheduler.sync() leads to the deadlock, or, prevents\nit?\n\nBy indexer thread, do you mean you are launching your own threads to\ndo indexing, or are you talking about ConcurrentMergeScheduler's\nthreads?\n\nAre you doing any external synchronization on IndexWriter yourself?\n\nAre you calling IndexWriter.close() from multiple threads?\n\nCan you post every thread in your thread dump?  (Or, is it really the\ncase that you only have 2 threads?).\n\nI've only changed the maxFieldLength of the writer to 50000.\n\nOK that's fine. ",
            "author": "Michael McCandless",
            "id": "comment-12680864"
        },
        {
            "date": "2009-03-11T14:07:38+0000",
            "content": "I've changed only IndexWriter.close() to IndexWriter.close(true). The true is correct.\n\nAfter some testing we couldn't reproduce the lock anymore. So I think it is solved with this change.\n\nI've expected, that calling ConcurrentMergeScheduler.sync() would prevents the lock, but that was not the case.\n\nI'm not doing any external synchronization on IndexWriter myself. I expect that the IndexWriter is synchronized by itself.\nThe indexer thread is the only thread that uses the IndexWriter and calling IndexWriter.close(). \n\nSure there are  many threads running, but these are the only two threads, that have to do with the indexing. ",
            "author": "Stefan Heidrich",
            "id": "comment-12680873"
        },
        {
            "date": "2009-03-11T15:19:30+0000",
            "content": "\nI've changed only IndexWriter.close() to IndexWriter.close(true). The true is correct.\n\nBut that's identical to IndexWriter.close(), which simply calls close(true).\n\nAfter some testing we couldn't reproduce the lock anymore. So I think it is solved with this change.\n\nI don't see how it's possible calling close(true) resolved the issue;\nit must be after more testing you'll see it's still there.  I'd really\nlike to get to the root cause.\n\nI'm not doing any external synchronization on IndexWriter myself. I expect that the IndexWriter is synchronized by itself.\n\nRight, IndexWriter is fully thread-safe; I wanted to make sure you\ndon't have any of your own code that tries to do\nsynchronized(writer) \n{...}\n.\n\nSure there are many threads running, but these are the only two threads, that have to do with the indexing.\n\nCan you post all of the threads traces?\n\nWhen you hit the deadlock, if you wait a few seconds and get the\nthread traces again, have they changed?\n\nCan you make this happen on a smallish test case? ",
            "author": "Michael McCandless",
            "id": "comment-12680888"
        },
        {
            "date": "2009-03-23T15:58:04+0000",
            "content": "Need more details here. ",
            "author": "Michael McCandless",
            "id": "comment-12688309"
        },
        {
            "date": "2009-03-27T21:08:37+0000",
            "content": "It's possible this is the same issue as LUCENE-1573. ",
            "author": "Michael McCandless",
            "id": "comment-12690101"
        }
    ]
}