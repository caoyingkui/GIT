{
    "id": "SOLR-16",
    "title": "patch to allow the use of a custom query output writer",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.1.0"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This patch allows users to create their own implementation of QueryResponseWriter, and specify that class in solrconfig.xml. The default behavior is to use XMLResponseWriter like before. The class selection code only runs once at servlet init time, so it shouldn't have any measurable effect on performance.",
    "attachments": {
        "custom_writer.patch": "https://issues.apache.org/jira/secure/attachment/12334280/custom_writer.patch",
        "custom_writer_rev2.patch": "https://issues.apache.org/jira/secure/attachment/12334298/custom_writer_rev2.patch",
        "custom_writer_rev3.patch": "https://issues.apache.org/jira/secure/attachment/12334476/custom_writer_rev3.patch",
        "OutputWriterTest.java": "https://issues.apache.org/jira/secure/attachment/12334477/OutputWriterTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12412392",
            "date": "2006-05-19T01:13:10+0000",
            "content": "I would like to see a request time toggle on the writer used, just like the request handler gets decided.  I would like the client to control the format returned.   That shouldn't be a big refactoring - would you mind implementing that instead? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12412393",
            "date": "2006-05-19T01:17:17+0000",
            "content": "> I would like to see a request time toggle on the writer used, just like the request handler gets decided.\n\n+1\n The default could be configured per request-handler and overridden by specific requests. "
        },
        {
            "author": "Mike Baranczak",
            "id": "comment-12412396",
            "date": "2006-05-19T01:40:07+0000",
            "content": "> I would like to see a request time toggle on the writer used, just like the request handler gets decided.\n\nUsing the same selection logic as for the request handlers does make more sense. Shouldn't be too hard to do.\n\n\n> The default could be configured per request-handler and overridden by specific requests.\n\nRight now, the request handler doesn't touch the output writer (the writer is called from SolrServlet) - so trying to associate the writer and the handler could get a wee bit messy. I'd much rather just keep those two aspects of the configuration separate. Simpler for me, and simpler for the people configuring Solr. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12412400",
            "date": "2006-05-19T02:13:14+0000",
            "content": "I'm fine with this configurability going in as is, and then we morph it to allow a request parameter to select the writer  as well, of course using the configured default so no client has to change or specify a writer unless they want something special (like Ruby code output rather than XML  "
        },
        {
            "author": "Mike Baranczak",
            "id": "comment-12412443",
            "date": "2006-05-19T06:14:57+0000",
            "content": "Revised patch enclosed.\n\nMultiple writers may be specified in solrconfig.xml. The syntax is pretty much the same as for specifying rewuest handlers; see example/solr/conf/solrconfig.xml for example. Writers may be selected by adding the parameter \"wt\" (writer type) to the request. XMLResponseWriter is the default. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12412595",
            "date": "2006-05-20T04:57:55+0000",
            "content": "I just read through the patch \u2013 didn't have a chance to try it out yet \u2013 and both the functionality and the implimentation look great!\n\nCan i ask for one smal favor before it gets applied: some test cases showing requests work with and with out the param specified when there are multiple options in the config?\n\nleaving src/test/test-files/solr/conf/solrconfig.xml as is will test the default situation where no writers are lsted ... you can modify src/test/test-files/solr/crazy-path-to-config.xml to include both the default and some new writer and then clone the SampleTest and add some test methods to check that you get the output you expected from various writters.\n\nYou don't even need to provide a usefull writer ... even something that just outputs some static text would work, just put it in src/test so people know it's not a \"production\" writer.\n\nmost of the helper methods in AbstractSolrTestCase try to validate that the responses are wellformed XML, but if you want to test a writer that isn't XML, it can still be done using the TerstHarness directly ... BasicFunctionalityTest.testMultipleUpdatesPerAdd shows an example. "
        },
        {
            "author": "Mike Baranczak",
            "id": "comment-12412597",
            "date": "2006-05-20T05:08:53+0000",
            "content": "Yeah, I can write a test. I can't do it right now, but I'll probably get to it sometime early next week. "
        },
        {
            "author": "Mike Baranczak",
            "id": "comment-12413033",
            "date": "2006-05-24T06:50:38+0000",
            "content": "OK, I tried writing a test case like Hoss suggested and it kept failing when I tried to select a custom writer. I eventually figured out that this is because TestHarness is hard-coded to use XMLResponseWriter. Which made perfect sense with the old set-up, but now...\n\nI could patch TestHarness so that it honors the queryResponseWriter settings, but this wouldn't make a very useful test, since it would completely bypass the code that actually does the work of selecting the writer (in SolrServlet). And if we actually wanted to test SolrServlet, we'd have to completely rewrite the test framework. \n\nAny thoughts?  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12413045",
            "date": "2006-05-24T08:21:12+0000",
            "content": "I think the right solution is to refactor the writer selection logic you added to the SolrServlet into a method in SolrCore...\n\n  public QueryResponseWriter getQueryResponseWriter(String handlerName)\n\n...i would also suggest adding another new method that calls that one...\n\n  public QueryResponseWriter getQueryResponseWriter(SolrQueryRequest)\n\n...and put the query param checking and default writer fallback logic in there.\n\nThen change SolrServlet and the TestHarness to call that.\n\nHow does that sound?\n\n\n(One other small thing now that I'm looking at the patch a little more closely: when handling exceptions,  SolrException.logOnce is probably a better choice then ex.printStackTrace() \u2013 that way the logging information goes wherever the ServletContainer has it's logging configured to instead of just STDERR) "
        },
        {
            "author": "Mike Baranczak",
            "id": "comment-12413056",
            "date": "2006-05-24T10:23:27+0000",
            "content": "I've incorporated all of of Hoss' suggestions. All the units tests are passing, and everything else looks good. \n\nI do like the idea of passing init parameters to the writer, but I unfortunately don't  have time to work on it right now.\n\n(custom_writer_rev3.patch and OutputWriterTest.java should be applied together - disregard all other files attached to this issue.) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12413366",
            "date": "2006-05-26T12:31:06+0000",
            "content": "patch looks very good .. i'm making a few tweaks and then I'll apply. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12413367",
            "date": "2006-05-26T12:45:07+0000",
            "content": "I did a little refactoring in initWriters to take advantage of some existing utility methods and commited this.\n\nThanks for the patch Mike. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12413368",
            "date": "2006-05-26T12:51:54+0000",
            "content": "Mike - thank you for your patience in refactoring what was already working for you into something more generalizable than you needed for the benefit of the community.  I personally will be experimenting with this new feature.\n\nThank you Hoss for applying the patches and following through on making this fit the current Solr architecture.\n\nOpen source development at its finest! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589340",
            "date": "2008-04-15T23:56:43+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.1\n\n\n\nThe Fix Version for all 38 issues found was set to 1.1, email notification\nwas suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string: 20080415hossman3 "
        }
    ]
}