{
    "id": "LUCENE-5591",
    "title": "ReaderAndUpdates should create a proper IOContext when writing DV updates",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "Today we pass IOContext.DEFAULT. If DV updates are used in conjunction w/ NRTCachingDirectory, it means the latter will attempt to write the entire DV field in its RAMDirectory, which could lead to OOM.\n\nWould be good if we can build our own FlushInfo, estimating the number of bytes we're about to write. I didn't see off hand a quick way to guesstimate that - I thought to use the current DV's sizeInBytes as an approximation, but I don't see a way to get it, not a direct way at least.\n\nMaybe we can use the size of the in-memory updates to guesstimate that amount? Something like sizeOfInMemUpdates * (maxDoc/numUpdatedDocs)? Is it a too wild guess?",
    "attachments": {
        "LUCENE-5591.patch": "https://issues.apache.org/jira/secure/attachment/12642443/LUCENE-5591.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13965403",
            "author": "Michael McCandless",
            "content": "+1, good catch.\n\nI think that guesstimate is a good start?  It likely wildly over-estimates though, since in-RAM structures are usually much more costly than the on-disk format, maybe try it out and see how much it over-estimates? ",
            "date": "2014-04-10T14:42:09+0000"
        },
        {
            "id": "comment-13965405",
            "author": "Shai Erera",
            "content": "I will. I think over estimating is better than under estimating in that case, since worse case the files will be flushed to disk, rather than app hits OOM. ",
            "date": "2014-04-10T14:47:00+0000"
        },
        {
            "id": "comment-13984233",
            "author": "Shai Erera",
            "content": "Patch adds an approximation flush size:\n\n\n\tDocValuesFieldUpdates.avgUpdateSize, implemented by both Numeric and Binary.\n\tReaderAndUpdates creates a FlushInfo w/ the total avgUpdateSize (over all fields) x maxDoc as an approximation. I also approximated the size of the FIS.\n\tAdded two tests to TestNumeric/BinaryDVUpdates using NRTCachingDirectory, making sure that we don't pass IOContext.DEFAULT (ensuring there are no cached files after applying an update).\n\n\n\nI think it's ready. ",
            "date": "2014-04-29T12:16:07+0000"
        },
        {
            "id": "comment-13984234",
            "author": "Shai Erera",
            "content": "BTW, I started by adding ramBytesUsed() to DocValuesFieldUpdates, but that was way over estimated, especially when the number of updates is small. That's due to the buffers used by these classes, e.g. GrowableWriter with pageSize=1024. I don't think that the RAM representation should be used as an estimate, rather the avg-update size is closer to what will eventually be written to disk. ",
            "date": "2014-04-29T12:18:07+0000"
        },
        {
            "id": "comment-13984473",
            "author": "Michael McCandless",
            "content": "Looks great Shai, thanks!\n\nIs avgUpdateSize supposed to be \"bytes per doc\"?  If so, instead of bitsPerValue, shouldn't we return bitsPerValue/8, maybe rounded up to the nearest byte?  Should we rename the method ... maybe ramBytesPerDoc or something?\n\nShouldn't BinaryDocValuesFieldUpdates.avgUpdateSize also include the docs/offsets/lengths RAM used too?\n\nSeparately, I noticed BinaryDocValuesFieldUpdates's add method is doing a BytesRef.append of each added value ... isn't this slowish (O(N^2) where N = number of docs that have been updated)?  BytesRef.append doesn't use ArrayUtil.grow to size the array on overflow... ",
            "date": "2014-04-29T16:35:58+0000"
        },
        {
            "id": "comment-13985394",
            "author": "Shai Erera",
            "content": "Thanks Mike. I modified to ramBytesPerDoc and fixed Numeric to return a proper approximation (I neglected to factor in the values themselves!!). Also, I estimate the amount of RAM per document used by the PagedGrowableWriters.\n\nI don't call BytesRef.append(), but grow() and arraycopy(). I could have used bytesRef.grow() followed by bytesRef.append(), but it double-checks the capacity...\n\nTests pass. ",
            "date": "2014-04-30T11:42:09+0000"
        },
        {
            "id": "comment-13985609",
            "author": "Michael McCandless",
            "content": "Looks good, thanks Shai.\n\nMaybe we can just do floating point math and take ceil in the end?  The ceil2 is sort of confusing... ",
            "date": "2014-04-30T15:14:47+0000"
        },
        {
            "id": "comment-13985793",
            "author": "Shai Erera",
            "content": "OK I moved to Math.ceil(). I thought ceil2() is quite cool . But this isn't a hot code, it's called once per flush and better to have readable code.. ",
            "date": "2014-04-30T17:39:27+0000"
        },
        {
            "id": "comment-13985965",
            "author": "Michael McCandless",
            "content": "+1, thanks Shai! ",
            "date": "2014-04-30T19:38:47+0000"
        },
        {
            "id": "comment-13986012",
            "author": "ASF subversion and git services",
            "content": "Commit 1591469 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1591469 ]\n\nLUCENE-5591: pass proper IOContext when writing DocValues updates ",
            "date": "2014-04-30T20:14:21+0000"
        },
        {
            "id": "comment-13986028",
            "author": "ASF subversion and git services",
            "content": "Commit 1591474 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1591474 ]\n\nLUCENE-5591: pass proper IOContext when writing DocValues updates ",
            "date": "2014-04-30T20:29:18+0000"
        },
        {
            "id": "comment-13986031",
            "author": "Shai Erera",
            "content": "Thanks Mike. Committed to trunk and 4x. ",
            "date": "2014-04-30T20:30:47+0000"
        }
    ]
}