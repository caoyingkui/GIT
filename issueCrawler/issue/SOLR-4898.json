{
    "id": "SOLR-4898",
    "title": "Flesh out the Schema REST API",
    "details": {
        "affect_versions": "4.4",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "As of Solr 4.4, the Solr Schema Rest API provides read access to all schema elements (SOLR-4503, SOLR-4658, SOLR-4537, SOLR-4623), and the ability to dynamically add new fields (SOLR-3251).  See the wiki for documentation: http://wiki.apache.org/solr/SchemaRESTAPI.\n\nThis is an umbrella issue to capture all future additions to the schema REST API, including:\n\n\n\tadding dynamic fields\n\tadding field types\n\tadding copy field directives\n\tenabling wholesale replacement by PUTing a new schema.\n\tmodifying fields, dynamic fields, field types, and copy field directives\n\tremoving fields, dynamic fields, field types, and copy field directives\n\tmodifying all remaining aspects of the schema: Name, Version, Unique Key, Global Similarity, and Default Query Operator\n\n\n\nI think the first three will be the easiest.\n\nThe main use case for further modifications to the Schema API is to offer a new default schema lifecycle to replace the current schema lifecycle (in which users manually edit a local copy of schema.xml, then overwrite the authoritative schema.xml file \u2013 on local disk or in ZooKeeper \u2013 and then reload or restart Solr), to allow for the schema API to perform all schema edit operations.  It's important to note that the current default schema lifecycle will continue to be supported, even after it is no longer the default: people will always be able to directly edit schema.xml, although if they choose to do so, they won't be able to use the Schema API methods that modify the schema.\n\nBefore Solr can switch the default schema configuration to ManagedIndexSchema, which is a prerequisite for all Schema API methods that modify the schema, everything that the current default schema lifecycle supports must be supported by the Schema API.  \n\nThe blocking issue for switching to the default schema configuration to ManagedIndexSchema, minimally, is allowing wholesale schema replacement via the Schema API \u2013 this is essentially support for the current schema lifecycle, with the additional requirement that users go through the Schema API.  The read side of the schema lifecycle, i.e. getting the current live schema, is already implemented.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-13701319",
            "date": "2013-07-06T11:14:06+0000",
            "content": "Steve Rowe What's involved w/ adding copy fields?  Do you have anything under way there? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702051",
            "date": "2013-07-08T15:12:46+0000",
            "content": "Steve Rowe What's involved w/ adding copy fields? Do you have anything under way there?\n\nI see SOLR-5010 is already committed, so you figured some stuff out by yourself .  I had not done any work on this yet.\n\nI'll comment on SOLR-5010. "
        },
        {
            "author": "Javier D Fernandez",
            "id": "comment-14087397",
            "date": "2014-08-06T08:10:53+0000",
            "content": "I'm starting a new project and one of the first requirements was to manage the schema via the REST API. I would really love to see subtasks 4 and 5 working  "
        }
    ]
}