{
    "id": "SOLR-10390",
    "title": "lsof has too many kernel dependencies",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "lsof seems a very \"heavy\" solution for just checking whether a socket is open. In Linux in particular it's problematic because there are kernel options that will break lsof, e.g. CloudLinux's kernel.user_ptrace and kernel.user_ptrace_self options.\n\nIf all that's needed here is a simple connect() to the socket, what about shipping something simple like this:\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n\nvoid _fail() {\n    exit(EXIT_FAILURE);\n}\n\nvoid error(const char *msg) {\n    perror(msg);\n    _fail();\n}\n\nint main(int argc, char *argv[]) {\n    int sockfd, portno, n;\n    struct sockaddr_in serv_addr;\n    struct hostent *server;\n\n    char buffer[256];\n    if (argc < 3) {\n       fprintf(stderr,\"usage %s hostname port\\n\", argv[0]);\n        _fail();\n    }\n\n    portno = atoi(argv[2]);\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        error(\"ERROR opening socket\");\n    }\n\n    server = gethostbyname(argv[1]);\n    if (server == NULL) {\n        fprintf(stderr,\"ERROR: no such host\\n\");\n        _fail();\n    }\n\n    bzero((char *) &serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    bcopy((char *)server->h_addr,\n         (char *)&serv_addr.sin_addr.s_addr,\n         server->h_length);\n    serv_addr.sin_port = htons(portno);\n\n    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) {\n        error(\"ERROR connecting\");\n    }\n\n    fprintf(stdout, \"OK\\n\");\n\n    return EXIT_SUCCESS;\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-29T20:30:43+0000",
            "content": "Alternatively, perl is available almost everywhere:\n\n\nperl -MSocket -e'die \"Need host & port!\" if @ARGV < 2; socket( my $s, AF_INET, SOCK_STREAM, 0) or die $!; connect( $s, sockaddr_in($ARGV[1], inet_aton($ARGV[0])) ) or die $!; print \"OK\\n\"' localhost 8984\n\n ",
            "author": "Felipe Gasper",
            "id": "comment-15947837"
        },
        {
            "date": "2017-03-29T20:41:25+0000",
            "content": "Even the Perl one-liner is also palpably faster than lsof:\n\n\nroot@felipe64 15:40:05 ~\n> time lsof -PniTCP:8984 -sTCP:LISTEN\nCOMMAND   PID       USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME\njava    12700 cpanelsolr  111u  IPv6 17585217      0t0  TCP 127.0.0.1:8984 (LISTEN)\n\nreal\t0m0.056s\nuser\t0m0.007s\nsys\t0m0.050s\n\nOK\nroot@felipe64 15:40:11 ~\n> time perl -MSocket -e'die \"Need host & port!\" if @ARGV < 2; socket( my $s, AF_INET, SOCK_STREAM, 0) or die $!; connect( $s, sockaddr_in($ARGV[1], inet_aton($ARGV[0])) ) or die $!; print \"OK\\n\"' localhost 8984\nOK\n\nreal\t0m0.012s\nuser\t0m0.008s\nsys\t0m0.004s\n\n ",
            "author": "Felipe Gasper",
            "id": "comment-15947849"
        },
        {
            "date": "2017-03-29T20:52:21+0000",
            "content": "In my experience, \"lsof\" is more likely to exist on a \"barebones\" linux system then \"perl\" ... it's also easier to explain/document for users why we depend on \"lsof\" (a relatively small utility) then to convince people they need to install perl in order to run Solr.\n\nIf we want to remove the dependency on lsof, we might as well implement same basic logic as your suggested C/perl code in SolrCLI so that we can use it on windows as well. ",
            "author": "Hoss Man",
            "id": "comment-15947866"
        },
        {
            "date": "2017-03-29T20:57:14+0000",
            "content": "That sounds reasonable. I\u2019d offer to help, but I don\u2019t grok Java. :-/ ",
            "author": "Felipe Gasper",
            "id": "comment-15947869"
        },
        {
            "date": "2017-03-30T02:16:42+0000",
            "content": "I usually prefer to poll ports with 'nc -z', but netcat is not always available, or sometimes the nmap ncat imposter (e.g. centos linux)\n\nThe script already depends on bash though. Using just bash you can redirect to ports (see https://www.gnu.org/software/bash/manual/html_node/Redirections.html) and test the exit code.\n\nI tend to use loops such as the following to test/wait for services:\n\n# await port availability (but only so long)\nfor i in {1..5}; do\n  if (timeout 1 bash -c \"echo > /dev/tcp/localhost/1234\") then\n      break\n  fi\n  sleep 1\ndone\n# ensure we made it\ntimeout 1 bash -c \"echo > /dev/tcp/localhost/1234\"\n\n ",
            "author": "Robert Muir",
            "id": "comment-15948284"
        }
    ]
}