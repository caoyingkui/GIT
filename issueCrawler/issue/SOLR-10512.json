{
    "id": "SOLR-10512",
    "title": "Innerjoin streaming expressions - Invalid JoinStream error",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.4.2,                                            6.5",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "It looks like innerJoin streaming expression do not work as explained in documentation. An invalid JoinStream error occurs.\n\n\ncurl --data-urlencode 'expr=innerJoin(\n                                search(books, \n                                   q=\"*:*\", \n                                   fl=\"id\", \n                                   sort=\"id asc\"),\n                                searchreviews, \n                                   q=\"*:*\", \n                                   fl=\"id_book_s\", \n                                   sort=\"id_book_s asc\"),     \n                                on=\"id=id_books_s\"\n                            )' http://localhost:8983/solr/books/stream\n\t\t\t\t\t\t\t\n{\"result-set\":{\"docs\":[{\"EXCEPTION\":\"Invalid JoinStream - all incoming stream comparators (sort) must be a superset of this stream's equalitor.\",\"EOF\":true}]}}\t\t\t\n\n\n\n\nIt is tottaly similar to the documentation example\n\ufeff\n\ninnerJoin(\n  search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\n  search(pets, q=type:cat, fl=\"ownerId,petName\", sort=\"ownerId asc\"),\n  on=\"personId=ownerId\"\n)\n\n\n\nQueries on each collection give :\n\n\n$ curl --data-urlencode 'expr=search(books, \n                                   q=\"*:*\", \n                                   fl=\"id, title_s, pubyear_i\", \n                                   sort=\"pubyear_i asc\", \n                                   qt=\"/export\")' http://localhost:8983/solr/books/stream\n\n{\n  \"result-set\": {\n    \"docs\": [\n      {\n        \"title_s\": \"Friends\",\n        \"pubyear_i\": 1994,\n        \"id\": \"book2\"\n      },\n      {\n        \"title_s\": \"The Way of Kings\",\n        \"pubyear_i\": 2010,\n        \"id\": \"book1\"\n      },\n      {\n        \"EOF\": true,\n        \"RESPONSE_TIME\": 16\n      }\n    ]\n  }\n}\n\n\n$ curl --data-urlencode 'expr=search(reviews, \n                                   q=\"author_s:d*\", \n                                   fl=\"id, id_book_s, stars_i, review_dt\", \n                                   sort=\"id_book_s asc\", \n                                   qt=\"/export\")' http://localhost:8983/solr/reviews/stream\n\t\t\t\t\t\t\t\t   \n{\n  \"result-set\": {\n    \"docs\": [\n      {\n        \"stars_i\": 3,\n        \"id\": \"book1_c2\",\n        \"id_book_s\": \"book1\",\n        \"review_dt\": \"2014-03-15T12:00:00Z\"\n      },\n      {\n        \"stars_i\": 4,\n        \"id\": \"book1_c3\",\n        \"id_book_s\": \"book1\",\n        \"review_dt\": \"2014-12-15T12:00:00Z\"\n      },\n      {\n        \"stars_i\": 3,\n        \"id\": \"book2_c2\",\n        \"id_book_s\": \"book2\",\n        \"review_dt\": \"1994-03-15T12:00:00Z\"\n      },\n      {\n        \"stars_i\": 4,\n        \"id\": \"book2_c3\",\n        \"id_book_s\": \"book2\",\n        \"review_dt\": \"1994-12-15T12:00:00Z\"\n      },\n      {\n        \"EOF\": true,\n        \"RESPONSE_TIME\": 47\n      }\n    ]\n  }\n}\n\n\n\nAfter more tests, I just had to invert the \"on\" clause to make it work\n\n\ncurl --data-urlencode 'expr=innerJoin(\n                                search(books, \n                                   q=\"*:*\", \n                                   fl=\"id\", \n                                   sort=\"id asc\"),\n                                searchreviews, \n                                   q=\"*:*\", \n                                   fl=\"id_book_s\", \n                                   sort=\"id_book_s asc\"),     \n                                on=\"id_books_s=id\"\n                            )' http://localhost:8983/solr/books/stream\n\n\n\ufeff\n{\n  \"result-set\": {\n    \"docs\": [\n      {\n        \"title_s\": \"The Way of Kings\",\n        \"pubyear_i\": 2010,\n        \"stars_i\": 5,\n        \"id\": \"book1\",\n        \"id_book_s\": \"book1\",\n        \"review_dt\": \"2015-01-03T14:30:00Z\"\n      },\n      {\n        \"title_s\": \"The Way of Kings\",\n        \"pubyear_i\": 2010,\n        \"stars_i\": 3,\n        \"id\": \"book1\",\n        \"id_book_s\": \"book1\",\n        \"review_dt\": \"2014-03-15T12:00:00Z\"\n      },\n      {\n        \"title_s\": \"The Way of Kings\",\n        \"pubyear_i\": 2010,\n        \"stars_i\": 4,\n        \"id\": \"book1\",\n        \"id_book_s\": \"book1\",\n        \"review_dt\": \"2014-12-15T12:00:00Z\"\n      },\n      {\n        \"title_s\": \"Friends\",\n        \"pubyear_i\": 1994,\n        \"stars_i\": 5,\n        \"id\": \"book2\",\n        \"id_book_s\": \"book2\",\n        \"review_dt\": \"1995-01-03T14:30:00Z\"\n      },\n      {\n        \"title_s\": \"Friends\",\n        \"pubyear_i\": 1994,\n        \"stars_i\": 3,\n        \"id\": \"book2\",\n        \"id_book_s\": \"book2\",\n        \"review_dt\": \"1994-03-15T12:00:00Z\"\n      },\n      {\n        \"title_s\": \"Friends\",\n        \"pubyear_i\": 1994,\n        \"stars_i\": 4,\n        \"id\": \"book2\",\n        \"id_book_s\": \"book2\",\n        \"review_dt\": \"1994-12-15T12:00:00Z\"\n      },\n      {\n        \"EOF\": true,\n        \"RESPONSE_TIME\": 35\n      }\n    ]\n  }\n}\n\n\n\nHowever, I don't understand the reason as in debug mode I see the isValidTupleOrder method should return true in both case.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-18T15:28:22+0000",
            "content": "Based on the email thread it sounds like the query works if the 'on' parameter is transposed. The test cases don't cover this exact scenario. ",
            "author": "Joel Bernstein",
            "id": "comment-15972913"
        },
        {
            "date": "2017-04-27T06:10:12+0000",
            "content": "This is clearly a bug as the left field in \n\non=\"fieldA=fieldB\"\n\n\nis the field from the first stream and the right field is the field from the second stream.\n\nI'll take a look. ",
            "author": "Dennis Gove",
            "id": "comment-15986078"
        },
        {
            "date": "2018-03-09T08:07:04+0000",
            "content": "I ran into the same issue on Solr Cloud 7.2.1:\n\ninnerJoin(\n \u00a0 search(A),\n \u00a0 search(B),\n \u00a0 on=\"fieldA=fieldB\"\n )\n\nThis expression leads to zero results.\n\nIf invert the order in \"on\" I get the expected results:\n\ninnerJoin(\n \u00a0 search(A),\n \u00a0 search(B),\n \u00a0 on=\"fieldB=fieldA\"\n )\n\n\u00a0 ",
            "author": "Markus Kalkbrenner",
            "id": "comment-16392556"
        },
        {
            "date": "2018-03-09T12:07:34+0000",
            "content": "I now wrapped the search() expressions in select() expressions and noticed that I got wrong results!\n\nBut if I remove the inversion of fields I get the right results. Maybe someone else can have a look at this but at the moment it look like this for me:\n\n\n\nexpression\nresult\n\n\ninnerJoin(\n \u00a0 search(A),\n \u00a0 search(B),\n \u00a0 on=\"fieldA=fieldB\"\n )\n\u00a0empty result => wrong result\n\n\ninnerJoin(\n \u00a0 search(A),\n \u00a0 search(B),\n \u00a0 on=\"fieldB=fieldA\"\n )\n\u00a0correct result\n\n\ninnerJoin(\n \u00a0 select(search(A)),\n \u00a0 select(search(B)),\n \u00a0 on=\"fieldB=fieldA\"\n )\nwrong result (fieldA and fieldB have different values in the result tuples) \n\n\ninnerJoin(\n \u00a0 select(search(A)),\n \u00a0 select(search(B)),\n \u00a0 on=\"fieldA=fieldB\"\n )\ncorrect result\n\n\n\n ",
            "author": "Markus Kalkbrenner",
            "id": "comment-16392772"
        },
        {
            "date": "2018-03-09T12:59:11+0000",
            "content": "It was certainly designed such that the\u00a0left field in the on clause is the field from the first incoming stream and the\u00a0right field in the on clause is the field from the second incoming stream. If that is not occurring then this is a very clear bug. ",
            "author": "Dennis Gove",
            "id": "comment-16392851"
        },
        {
            "date": "2018-03-09T23:25:11+0000",
            "content": "In fact we had rather sophisticated stuff in stream A and stream B.\n\nMeanwhile I found out what gives us a reliable result. FieldA has to be on the left, fieldB on the right, but you need to ensure that both streams are properly sorted!\n\nSo for whatever is in \"search()\", this works:\n\ninnerJoin(\n \u00a0 sort(search(A), by=\"fieldA\"),\n \u00a0 sort(search(B), by=\"fieldB\"),\n \u00a0 on=\"fieldA=fieldB\"\n )\n\n\u00a0 ",
            "author": "Markus Kalkbrenner",
            "id": "comment-16393766"
        },
        {
            "date": "2018-06-20T08:04:33+0000",
            "content": "We now did a lot of complex streaming expressions. Whenever you \"combine\" two streams (innerJoin, intersect, merge, ...) you have to ensure that both streams are sorted the same way!\nIf one stream isn't sorted the required way you have to wrap it in a sort() command, just like in my last comment.\n\nIn the Solr PHP libraries I maintain we now provide convenience methods that ensure that the two streams are sorted correctly by the fields used in the \"on\" clause.\n\nI think that we can convert this bug report into a documentation task. I can't find the importance of sorts and left/right fields described in the handbook. ",
            "author": "Markus Kalkbrenner",
            "id": "comment-16517895"
        }
    ]
}