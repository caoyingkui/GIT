{
    "id": "SOLR-5584",
    "title": "Update to Guava 15.0",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13858429",
            "date": "2013-12-29T20:06:38+0000",
            "content": "Turns out we are limited in the Guava version we can use by our kite morphlines dependency. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13858458",
            "date": "2013-12-29T21:58:33+0000",
            "content": "What do you mean by kite morphlines, Mark? I remember morfologik has a guava dependency, but this is only for constructing dictionaries, not for using them at runtime.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858464",
            "date": "2013-12-29T22:43:26+0000",
            "content": "https://github.com/kite-sdk/kite/tree/master/kite-morphlines\n\nIt's used for ETL with the new map-reduce contrib module. "
        },
        {
            "author": "wolfgang hoschek",
            "id": "comment-13858699",
            "date": "2013-12-30T10:41:37+0000",
            "content": "What exactly is failing for you? morphlines was designed to run fine with any guava version >= 11.0.2. At least it did last I checked... "
        },
        {
            "author": "wolfgang hoschek",
            "id": "comment-13862273",
            "date": "2014-01-04T11:48:18+0000",
            "content": "As mentioned above, morphlines was designed to run fine with any guava version >= 11.0.2. \n\nBut the hadoop task tracker always puts guava 11.0.2 on the classpath of any MR job that it executes, so solr-mapreduce would need to figure out how to override or reorder that. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-13862971",
            "date": "2014-01-06T13:16:17+0000",
            "content": "in MR2 you can override this ordering by setting mapreduce.job.user.classpath.first=true. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971253",
            "date": "2014-04-16T12:57:34+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14622807",
            "date": "2015-07-10T19:43:57+0000",
            "content": "A user wants to use a library with Solr 4.8.0 that requires Guava 18.  If I upgrade guava in the ivy versions file to 18.0, Solr will no longer compile. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-14624658",
            "date": "2015-07-13T13:46:52+0000",
            "content": "Yeah, that Guava is severely outdated by now. I'll look into it again, see if I can bring it up to date a bit. \n\nFor what it's worth, the user on solr-user wanted to run Lingo3G with Solr and this wouldn't help him anyway because there'd still be clashing HPPC versions... JAR hell. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-14626428",
            "date": "2015-07-14T14:54:59+0000",
            "content": "Ran the test suite and I get various exceptions from HDFS (9 in total).\n\n[15:42:07.466] ERROR   1.41s J0 | TestRecoveryHdfs.testRecoveryMultipleLogs <<<\n   > Caused by: java.lang.IllegalAccessError: tried to access method com.google.common.base.Stopwatch.<init>()V from class org.apache.hadoop.util.JvmPauseMonito\nr$Monitor\n   >    at __randomizedtesting.SeedInfo.seed([531D0647CBD708B2]:0)\n   >    at org.apache.hadoop.util.JvmPauseMonitor$Monitor.run(JvmPauseMonitor.java:175)\n\n  2> 240555 ERROR (SUITE-TestRecoveryHdfs-seed#[531D0647CBD708B2]-worker) [    x:collection1] o.a.h.m.l.MethodMetric Error invoking method getBlocksTotal\n   2> Caused by: java.lang.NullPointerException\n  2>    at org.apache.hadoop.hdfs.server.blockmanagement.BlocksMap.size(BlocksMap.java:198)\n  2>    at org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.getTotalBlocks(BlockManager.java:3291)\n  2>    at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlocksTotal(FSNamesystem.java:6223)\n\n "
        },
        {
            "author": "Mike Drob",
            "id": "comment-14626547",
            "date": "2015-07-14T15:58:11+0000",
            "content": "Yea, this has been a problem for ages. Hadoop uses Guava 11.0.2, which will have compatibility issues with newer versions. HADOOP-11656 exists to try and alleviate the issue, but I don't see that landing soon. Not sure what to suggest for fixing this locally in the meanwhile. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-14626561",
            "date": "2015-07-14T16:08:57+0000",
            "content": "Yup, I found that issue too (linked to it from SOLR-7790). There are some options... using a shaded (repackaged) guava for the core Solr classes would be probably the most simple solution although in the long term I bet there would be two contribs that require two different versions... It'd be ideal to provide classloader separation between contribs and the core, but it looks like a major issue to me (in particular figuring out how to organize the build system around that...).\n\nEh. "
        },
        {
            "author": "Mike Drob",
            "id": "comment-14626577",
            "date": "2015-07-14T16:20:13+0000",
            "content": "The ideal solution is that we don't leak internal dependencies to clients, right? Such that Solr can use whichever version of Guava it needs, and clients can too, and same for all the other dependencies. So we would want our own version of the Hadoop classpath isolation. This isn't a unique problem to solve, nor is it an easy one.\n\nusing a shaded (repackaged) guava for the core Solr classes would be probably the most simple solution although in the long term I bet there would be two contribs that require two different versions\n\nWhy is that an issue? If we shade guava into solr-core, then contrib-1 can use \"real\" guava X and contrib-2 can use \"real\" guava Y. Neither one should be using the shaded internal guava. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-14626605",
            "date": "2015-07-14T16:33:00+0000",
            "content": "The ideal solution is that we don't leak internal dependencies to clients, right\n\nYes, this would be ideal.\n\nThis isn't a unique problem to solve, nor is it an easy one.\n\nSadly, I know. \n\nIf we shade guava into solr-core, then contrib-1 can use \"real\" guava X and contrib-2 can use \"real\" guava Y.\n\nMy initial assessment didn't take into account that hdfs libraries are already part of Solr's lib (and thus common classloader). So there's no easy way to eradicate that old guava unless you repackage all the JARs in WEB-INF/lib. \n\nAlso, there's a single class loader is per core (not per contrib) so any JARs from contribs are loaded into the same class loader. (That's what the code looks like in MemClassLoader and SolrCore... correct me if I'm wrong). "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-15940751",
            "date": "2017-03-24T17:09:29+0000",
            "content": "Now that the kite/morphlines contribs have been removed (SOLR-9221), can this be reconsidered?  Or closed? "
        }
    ]
}