{
    "id": "SOLR-8500",
    "title": "Allow the number of threads ConcurrentUpdateSolrClient StreamingSolrClients configurable by a system property",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Despite the warning in that code, in extremely high throughput situations where there are guaranteed to be no updates to existing documents, it can be useful to have more than one runner.\n\nI envision this as an \"expert\" kind of thing, used only in situations where the a-priori knowledge is that there are no updates to existing documents.",
    "attachments": {
        "SOLR-8500.patch": "https://issues.apache.org/jira/secure/attachment/12780871/SOLR-8500.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-07T01:32:28+0000",
            "author": "Erick Erickson",
            "content": "Here's an extremely simple patch for this. Mostly I'm looking for opinions about whether this is a Good Idea or not. ",
            "id": "comment-15086633"
        },
        {
            "date": "2016-01-08T23:24:38+0000",
            "author": "Mark Miller",
            "content": "I think using more than 1 thread may actually introduce more reordering problems right now. ",
            "id": "comment-15090169"
        },
        {
            "date": "2016-01-19T02:17:43+0000",
            "author": "Erick Erickson",
            "content": "bq: I think using more than 1 thread may actually introduce more reordering problems right now.\n\nDoes it matter in the case that I outlined? That there are no updates to existing documents to contend with so even if docs get reordered it shouldn't have any effects noticeably by the end user.\n\nOr am I missing the boat? ",
            "id": "comment-15106132"
        },
        {
            "date": "2016-01-27T18:19:50+0000",
            "author": "Erick Erickson",
            "content": "Mark Miller So do you oppose this as a \"use at your own risk under very special circumstances\" kind of thing? This isn't theoretical, there are clients who have used a patch in here and are seeing significant benefits. ",
            "id": "comment-15119925"
        },
        {
            "date": "2016-01-27T18:23:49+0000",
            "author": "Mark Miller",
            "content": "No, I don't think we should allow config that we know will break the system, whether it's fast or not. If correctness does not matter, we can make things really fast. \n\nOnce Yonik finishes the peer sync finger print it should no longer be a correctness issue to have these reorders though.  ",
            "id": "comment-15119930"
        },
        {
            "date": "2016-01-27T18:31:36+0000",
            "author": "Mark Miller",
            "content": "In the short term, you can spin up more threads from the client rather than spinning up more threads here.  ",
            "id": "comment-15119939"
        },
        {
            "date": "2016-01-27T21:01:02+0000",
            "author": "Erick Erickson",
            "content": "First let me say I have only the most cursory understanding of \"the reordering problem\". My assumption is that since CUSC is batching up sub-lists of the update set and sending them in parallel that if doc1 is followed by doc2 in the original list, doc2 might get to the indexing node before doc1, be it an update, delete, add, whatever.\n\nThat said, I don't really understand how reordering matters if (as per the original problem statement), it's guaranteed that each document is new and is submitted exactly once ever. I guess another important restriction is that the client doesn't care if docs get  into the index in a different order than they were sent. How would correctness be threatened in that situation?\n\nIf the concern is that this is a too-specialized use-case that allows people to set it and shoot themselves in the foot too easily, that's a point. I just don't get why, in this specific use-case, this is a correctness question.\n\nAll that said, if Yonik's  fingerprint stuff is going in relatively soon, it's probably all moot and we can just wait on this... ",
            "id": "comment-15120152"
        },
        {
            "date": "2016-01-27T23:32:32+0000",
            "author": "Mark Miller",
            "content": "The system as is simply can't correctly deal with these kind of reorders. I wish it wasn't true, but I wish I had a pony too  ",
            "id": "comment-15120410"
        },
        {
            "date": "2016-01-27T23:36:38+0000",
            "author": "Mark Miller",
            "content": "As far as a special case, the only special case that gets around this is if they never have to recover.  ",
            "id": "comment-15120416"
        },
        {
            "date": "2016-02-02T17:42:32+0000",
            "author": "Erick Erickson",
            "content": "Oh, that kind of reorder....\n\nAs it happens, in this case the volume is so high that they...er...well, can't recover a replica if it gets out of sync, they have to wait for the indexing for that time slice to stop and do a full sync.\n\nNone of which matters, I see Yonik is making progress on 8586 so I'll just wait. My reminder entry is tireless in bringing up that I should look at this JIRA.... ",
            "id": "comment-15128647"
        },
        {
            "date": "2016-02-06T16:34:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3e7fe7867f64b254680d462092d01f07858aa7c3 in lucene-solr's branch refs/heads/master from Erick Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3e7fe78 ]\n\nSOLR-8500: Allow the number of threads ConcurrentUpdateSolrClient StreamingSolrClients configurable by a system property ",
            "id": "comment-15135868"
        },
        {
            "date": "2016-02-06T16:46:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 112a2311df50142ec19ec0033133fbc10df223c9 in lucene-solr's branch refs/heads/master from Erick Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=112a231 ]\n\nPut CHANGES entry for SOLR-8500 in the wrong section. ",
            "id": "comment-15135874"
        },
        {
            "date": "2016-02-06T17:34:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 129f7153087b279908d6340e7f8a5b024f0f7cad in lucene-solr's branch refs/heads/branch_5x from Erick Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=129f715 ]\n\nSOLR-8500: Allow the number of threads ConcurrentUpdateSolrClient StreamingSolrClients configurable by a system property\n\n(cherry picked from commit 3e7fe7867f64b254680d462092d01f07858aa7c3)\n\nConflicts:\n\tsolr/CHANGES.txt ",
            "id": "comment-15135895"
        },
        {
            "date": "2016-02-06T17:36:02+0000",
            "author": "Erick Erickson",
            "content": "NOTE: This is an \"expert\" level operation, see the CHANGES.txt entry, reproduced here:\n\nthis is an expert option and can result in more often needing to do full index replication for recovery, the sweet spot for using this is very high volume, leader-only indexing. ",
            "id": "comment-15135896"
        },
        {
            "date": "2016-02-07T03:54:23+0000",
            "author": "Erick Erickson",
            "content": "Forgot to attach patch with CHANGES.\n ",
            "id": "comment-15136126"
        }
    ]
}