{
    "id": "SOLR-856",
    "title": "Support for \"Accept-Encoding : gzip\" in SolrDispatchFilter",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "If the client sends an Accept-Encoding : gzip header then SolrDispatchFilter should respect that and send back data as zipped",
    "attachments": {
        "SOLR-856.patch": "https://issues.apache.org/jira/secure/attachment/12393932/SOLR-856.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12647586",
            "date": "2008-11-14T11:18:16+0000",
            "content": "implemented "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12647589",
            "date": "2008-11-14T11:29:52+0000",
            "content": "I'd rather see this implemented as a separate filter, and not blending this in with SolrDispatchFilter.  Why?  Separation of concerns.  I have ideas of using a custom dispatch filter (for smarter request routing, cleaner URLs), but would still want to benefit from gzip. "
        },
        {
            "author": "Donovan Jimenez",
            "id": "comment-12647612",
            "date": "2008-11-14T14:19:05+0000",
            "content": "Isn't this usually handled as a configuration of the Container rather than at the servlet level?\n\nFor example, in Tomcat, I'd use the compression option on the HTTP connector described in the documentation: http://tomcat.apache.org/tomcat-6.0-doc/config/http.html\n\nI'm sure other containers have similar, already existing, functionality. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12647797",
            "date": "2008-11-15T04:51:18+0000",
            "content": "I'd rather see this implemented as a separate filter, and not blending this in with SolrDispatchFilter.\n\nI considered that option too. But , it means users editing web.xml (which is not a good idea). Then the extra filter means more overhead. I guess we should not do that. \n\nIsn't this usually handled as a configuration of the Container rather than at the servlet level? \n\nI would love to hear that? Bbut can we rely on that and expect that all containers will have this .Consider the fact that a feature relies on this (SOLR-829) for a critical functionality "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12647914",
            "date": "2008-11-16T00:07:10+0000",
            "content": "I don't understand your comment about users having to edit web.xml.  A gzip filter, such as http://sourceforge.net/projects/pjl-comp-filter, could be put into web.xml, filtering all URLs, and always there.  Internally it can control based on headers and settings whether to gzip.  What'd be the harm in that? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12647939",
            "date": "2008-11-16T07:37:24+0000",
            "content": "I don't understand your comment about users having to edit web.xml\nOK . I see the argument of keeping it there always. \n\nThis means adding a new library dependency . We need to now decide on which one to choose. Is it mature ? is it buggy? \n\nMy immediate concern is SOLR-829 . This issue blocks that. We need SOLR-829  for our internal purposes (we do replication across datacenters) and there are other users who need it ASAP. \n\nAny solution is fine \n\nThe patch I submitted is the code taken from ehcache. I did not add extra filter because every request goes through an extra layer .\n\nDo we really need that? Probably we can let the user choose a filter and document that.\n\nDo we have to add this 60KB jar to our distribution? \n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12648025",
            "date": "2008-11-16T20:57:31+0000",
            "content": "As Donovan pointed out, the alternative is to let the servlet container handle it.  Upside is potentially greater speed if it's implemented in native code, and no new Solr dependency, but the downside is more config hassle for the user.  Would it make sense to see how hard it is to configure for the major servlet containers before committing this? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12648038",
            "date": "2008-11-16T22:31:26+0000",
            "content": "For the record, I'm absolutely +1 on this being done by containers if the major ones can do it. \n\nIt'd be interesting if the containers that are doing it would strip the gzip accept header, that way it wouldn't matter if Solr had this in there or not.... but I doubt we're so lucky for that, eh?\n\nAlso worth noting is my take on \"deployment descriptors\".  It was really designed (though not implemented so well) to be tweaked at deploy-time.  So it would really be sufficient to document how to change web.xml to add in a filter if needed, and where to obtain the JAR file... how to repackage a .war.  Yeah, it's a pain, but it does keep something that is obviously a separate concern entirely separate, and not all that difficult to manage the \"hard\" way just described.\n\nSome containers, if I'm not mistaken, have control panels where .war deployment descriptors can be managed, right? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12648081",
            "date": "2008-11-17T04:57:16+0000",
            "content": "here is documentation on how to setup compression for jetty \n\nhttp://docs.codehaus.org/display/JETTY/GZIP+Compression\n\nNow we need to test and find if this works. I guess if we cover Tomcat/Jetty/Resin it should be OK\n\nShould we enable it as a part of our standard configuration ?  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12648512",
            "date": "2008-11-18T06:46:24+0000",
            "content": "We should probably provide a simple means for recognizing and responding appropriately to \"Accept-Encoding: *\" requests out of the box without depending on support from the servlet container \u2013 but we should make sure this is relatively easy to disable in the event that the solr administrator already has a preferred way of dealing with this (ie: a load balancer on the same switch as solr optimized for handling compression)\n\nthe current patch seem lacking to me because disabling the functionality is currently impossible without forcing people to gut the code.  We could add special config options for it, but frankly using a standalone filter seems like the best bet: people who understand HTTP enough to want to disable the default encoding are likely to be comfortable commenting out a filter from the web.xml.\n\nusing an existing, robust, \"supported\", well tested, filter for this found online certainly seems preferable to trying to roll our own.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12648519",
            "date": "2008-11-18T07:18:57+0000",
            "content": "Hoss, Please ignore my patch. It was just a quick suggestion .\n\n\nNow I am more or less convinced that we must not add a filter. We should have enough documentation on how these things are efficiently handled in each of the containers. Tomcat handles it well internally, Jetty has a filter which does it properly. Users like their own container's features or they may even setup an Apache in the front to do that. This is largely an ops preference. In our org we have standard packages of tomcat/apache  which has standard settings for all these. \n\nSo , this is just a matter of documentation\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12649874",
            "date": "2008-11-22T01:18:33+0000",
            "content": "Now I am more or less convinced that we must not add a filter. We should have enough documentation on how these things are efficiently handled in each of the containers.\n\nIf that's the consensus then i'm okay with that, but my personal preference would be to do it in a container agnostic manner (by explicitly using a Filter that does this in the stock web.xml) so that it works well for all users, regardless of container, out of the box.  users who are knowledgeable about java, servlet containers, load balancers, etc... can then comment that filter out of the web.xml (or replace it with something else)\n\npunting on this to the servlet container puts a burden on novice users that seems easily avoidable.\n\nBut it's not really that big of a deal to me \u2013 it's an optimization that's only really useful in low bandwidth situations anyway, so if it's something that's going to make a difference to people, it's probably fine to make them figure out the best way to turn it on in their specific situation.\n\nSo .... is this a \"Won't Fix\" situation? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12649906",
            "date": "2008-11-22T07:59:11+0000",
            "content": "A wiki page is created for this . I have made a humble beginning by documenting what I know. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12650575",
            "date": "2008-11-25T14:27:28+0000",
            "content": "If that's the consensus then i'm okay with that, but my personal preference would be to do it in a container agnostic manner (by explicitly using a Filter that does this in the stock web.xml) so that it works well for all users, regardless of container, out of the box. users who are knowledgeable about java, servlet containers, load balancers, etc... can then comment that filter out of the web.xml (or replace it with something else)\n\nI just committed SOLR-829 which makes it possible to use external compression (i.e. provided by containers) and also internal compression managed by ReplicationHandler itself. By default, compression is not used and it needs to be enabled explicitly on the slave's solconfig.xml so that the slave requests compression from the master. I feel that configuring internal compression is best configured through solrconfig.xml. Changing the web.xml after exploding the war is inconvenient. Also, compression logic is added directly to replication handler (for managing internal compression) because we do not need to compress other Solr responses. It is only the replication handler which needs this feature and that too only for replicating over slow connections (e.g. replicating across data centers).\n\nSo .... is this a \"Won't Fix\" situation?\nI think so. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12677334",
            "date": "2009-02-27T11:56:23+0000",
            "content": "Fix spelling in issue title "
        }
    ]
}