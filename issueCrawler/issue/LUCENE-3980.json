{
    "id": "LUCENE-3980",
    "title": "Word order seems to affect proximity searching",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "It would appear that the order of words within a search query affects a proximity search.\n\nFor instance, for the text \"The proximity operator seems to match differently based on word order\", a match is found for \"proximity order\"~8 but is not found for \"order proximity\"~8. In order for the latter to find a match, it needs to be changed to \"order proximity\"~10.\n\nBoth the text and the query are processed using org.apache.lucene.analysis.standard.StandardAnalyzer.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-13T15:36:57+0000",
            "content": "Have you seen the documentation of slop in phrasequery?\n\n\nThe slop is in fact an edit-distance, where the units correspond to\nmoves of terms in the query phrase out of position.  For example, to switch\nthe order of two words requires two moves (the first move places the words\natop one another), so to permit re-orderings of phrases, the slop must be\nat least two.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13253469"
        },
        {
            "date": "2012-04-13T16:17:27+0000",
            "content": "Thanks, that makes sense now. The challenge is going to be trying to explain this to our users as they want to be able to type in a query and find the same results irrespective of word order. ",
            "author": "Ian Pooley",
            "id": "comment-13253506"
        },
        {
            "date": "2012-04-13T16:23:26+0000",
            "content": "If the word order does not matter, why use a phrase query? A simple BooleanQuery on all terms would be fine. ",
            "author": "Uwe Schindler",
            "id": "comment-13253510"
        },
        {
            "date": "2012-04-13T16:23:26+0000",
            "content": "If the word order does not matter, why use a phrase query? A simple BooleanQuery on all terms would be fine. ",
            "author": "Uwe Schindler",
            "id": "comment-13253511"
        },
        {
            "date": "2012-04-13T17:26:43+0000",
            "content": "The problem is that the queries are generated by a QueryParser from large, complex query strings created by our internal users. Most of these queries return exactly want they expect but, a couple of days ago, one of the users noticed that \"A B\"~5 within one of these queries returned slightly different results from a query that was identical other than the clause that as \"B A\"~5.\n\nNow that I have a better idea as to what is going on under the covers, my challenge is to translate that into non-technical rules that will allow all permutations of \"A B C D E...\"~n to give the desired answer.  ",
            "author": "Ian Pooley",
            "id": "comment-13253558"
        }
    ]
}