{
    "id": "LUCENE-8198",
    "title": "Add ability to persist deletes across merges",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Won't Fix",
        "affect_versions": "7.3,                                            master (8.0)",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "This allows conditionally persist\u00a0deletes on a per document basis to prevent them from being merged away. This expert\u00a0feature is useful to maintain history of documents in the index where otherwise a\u00a0duplicate storage mechanism would be needed. For instance features like CouchDBs\u00a0changes API can be build on top of persistent deletes. While using persistent deletes\u00a0has a considerably small overhead at merge time or when deletes applied to fully deleted\u00a0segments, there is no impact if persistent deletes are unused.",
    "attachments": {
        "LUCENE-8198.patch": "https://issues.apache.org/jira/secure/attachment/12913947/LUCENE-8198.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16394655",
            "date": "2018-03-11T21:13:52+0000",
            "content": "here is a link to the patch on github to link lines or comment directly. ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16394658",
            "date": "2018-03-11T21:19:50+0000",
            "content": "Why wouldn't a user use IndexWriter.updateDocValue for this? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16394662",
            "date": "2018-03-11T21:27:18+0000",
            "content": ">\u00a0Why wouldn't a user use IndexWriter.updateDocValue for this?\n\nI assume you mean handle deletes yourself. I explored this as well and there were several issues about that like the overhead on disk, the problem that such an update is not atomic (I agree we can add additional API to the IW like updateDocument(Term, String field, long docValue, Document doc) and the user needs to handle deletes in the seacher themself which is quite tricky. I agree it's doable. I took this route as an alternative and I found that transparency, simplicity and how contained the change is quite appealing. We basically already has all stuff in the IW needed for this since we reapply deleted docs if a source reader of a merge changes while it's merging and it has 0-impact if you don't use it. ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16394667",
            "date": "2018-03-11T21:45:19+0000",
            "content": "Well the overhead should be... 1 bit per document unless something is wrong? So a user would add something like a \"soft live\" field and then just update it to a 0. I think its easy to filter on such fields in searches already.\n\n\u00a0\n\nThere are some advantages of doing it this way far as performance goes I think. For example, take the extreme case where a user never \"hard\"-deletes at all. They'd still always get bulk merge optimizations from the stored fields writer, etc. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16394669",
            "date": "2018-03-11T21:50:23+0000",
            "content": ">\u00a0There are some advantages of doing it this way far as performance goes I think. For example, take the extreme case where a user never \"hard\"-deletes at all. They'd still always get bulk merge optimizations from the stored fields writer, etc.\n\nthat is a good one. Yet, I think the case where we never had hard deletes are unlikely true for this usecase. It only applies if there are deletes at all at least that is what I was focusing on.\u00a0\n\n>\u00a0Well the overhead should be... 1 bit per document unless something is wrong? So a user would add something like a \"soft live\" field and then just update it to a 0. I think its easy to filter on such fields in searches already.\n\nthere is additonal memory overhead when indexing which can be\u00a0not massive\u00a0for deletes / DV updates but still. I also try to understand how you can use updateable docvalues to do that in an atomic fashion. it must be somehow part of updateDocument which I wonder if it's the right way to go.\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16394671",
            "date": "2018-03-11T21:54:20+0000",
            "content": "The other advantage of the DV field would be at query-time, if it could be incorporated into the index sort.\n\nIf someone has a lot of these documents sticking around that should be filtered out, it would allow segments to be early-terminated based on a maxDocID rather than filtered out one-by-one.\n\nOtherwise i am concerned that searching would just get slower and slower  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16394673",
            "date": "2018-03-11T22:14:04+0000",
            "content": "I agree with you on all that. I also wonder if we can then implement \"undelete\" easily which would be very beneficial. One idea would be to\u00a0change the updateDocument method to this:\u00a0__\n\npublic long updateDocument(Term term, Iterable<? extends IndexableField> doc, Field... dvUpdates)\n\nthis would be 100% bwc and would allow to do this as well. I didn't think of such a simple way of doing it. I think the change would be very simple to implement.\u00a0 ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16394674",
            "date": "2018-03-11T22:22:28+0000",
            "content": "ah nevermind I think we need to add a new method something like this:\n\npublic long addAndUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field... dvUpdates)\n\nwhich is a combination of:\n\naddDocument(Iterable<? extends IndexableField> doc) + updateDocValues(Term term, Field... fields)\n ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16394680",
            "date": "2018-03-11T22:36:10+0000",
            "content": "it looks reasonable. We should think about the name. I think \"soft-delete\" is the only real use-case, but it looks like it can do undelete too (assuming you store the fields etc). softUpdateDocument makes me think of freebsd filesystem stuff...\n\n+1 for multiple fields of updates. If you want to pay the price to keep deletes around longer than usual in the index, you may want to log some additional metadata (e.g. timestamp or user) that deleted it. At least timestamp is important if you want to have a mergepolicy that converts it into a real delete after say, 90 days, to match some retention policy or time-window to correct mistakes.\n\nwith your api, if doc is null it will just issue the delete with no replacement correct? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16394682",
            "date": "2018-03-11T22:40:09+0000",
            "content": "> with your api, if doc is null it will just issue the delete with no replacement correct?\n\nI think you can just use\u00a0the existing\n\npublic long updateDocValues(Term term, Field... updates) throws IOException\n\nfor this? ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16395265",
            "date": "2018-03-12T14:00:42+0000",
            "content": "Robert Muir I opened LUCENE-8200 ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16398219",
            "date": "2018-03-14T08:15:27+0000",
            "content": "Commit ef291c9767640198e1d79132b460a88f93b25456 in lucene-solr's branch refs/heads/master from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ef291c9 ]\n\nLUCENE-8200: Allow doc-values to be updated atomically together with a document\n\nToday we can only update a document by deleting all previously indexed\ndocuments for the given term. In some cases like when deletes are not\n`final` in the way that documents that are marked as deleted should not\nbe merged away a `soft-delete` is needed which is possible when doc-values\nupdatea can be done atomically just like delete and add in updateDocument(s)\n\nThis change introduces such a soft update that reuses all code paths from deletes\nto update all previously updated documents for a given term instead of marking it\nas deleted. This is a spinnoff from LUCENE-8198 ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16398236",
            "date": "2018-03-14T08:23:45+0000",
            "content": "Commit b627fae03215fe52dee70638299e0b7c62b79c99 in lucene-solr's branch refs/heads/branch_7x from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b627fae ]\n\nLUCENE-8200: Allow doc-values to be updated atomically together with a document\n\nToday we can only update a document by deleting all previously indexed\ndocuments for the given term. In some cases like when deletes are not\n`final` in the way that documents that are marked as deleted should not\nbe merged away a `soft-delete` is needed which is possible when doc-values\nupdatea can be done atomically just like delete and add in updateDocument(s)\n\nThis change introduces such a soft update that reuses all code paths from deletes\nto update all previously updated documents for a given term instead of marking it\nas deleted. This is a spinnoff from LUCENE-8198 ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16398241",
            "date": "2018-03-14T08:26:21+0000",
            "content": "closing this in favor of LUCENE-8200 ",
            "author": "Simon Willnauer"
        }
    ]
}