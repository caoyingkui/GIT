{
    "id": "SOLR-7341",
    "title": "xjoin - join data from external sources",
    "details": {
        "components": [
            "search"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "4.10.3",
            "5.3.2",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "XJoin\n\nThe \"xjoin\" SOLR contrib allows external results to be joined with SOLR results in a query and the SOLR result set to be filtered by the results of an external query. Values from the external results are made available in the SOLR results and may also be used to boost the scores of corresponding documents during the search. The contrib consists of the Java classes XJoinSearchComponent, XJoinValueSourceParser and XJoinQParserPlugin (and associated classes), which must be configured in solrconfig.xml, and the interfaces XJoinResultsFactory and XJoinResults, which are implemented by the user to provide the link between SOLR and the external results source (but see below for details of how to use the in-built SimpleXJoinResultsFactory implementation). External results and SOLR documents are matched via a single configurable attribute (the \"join field\").\n\nTo include the XJoin contrib classes, add the following config to solrconfig.xml:\n\n\n<config>\n  ..\n   <!-- XJoin contrib -->\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/xjoin/lib\" regex=\".*\\.jar\" />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-xjoin-\\d.*\\.jar\" />\n  ..\n</config>\n\n\n\nNote that any JARs containing implementations of the XJoinResultsFactory must also be included.\n\nJava classes and interfaces\n\nXJoinResultsFactory\n\nThe user implementation of this interface is responsible for connecting to an external source to perform a query (or otherwise collect results). Parameters with prefix \"<component name>.external.\" are passed from the SOLR query URL to pararameterise the search. The interface has the following methods:\n\n\n\tvoid init(NamedList args) - this is called during SOLR initialisation, and passed parameters from the search component configuration (see below)\n\tXJoinResults getResults(SolrParams params) - this is called during a SOLR search to generate external results, and is passed parameters from the SOLR query URL (as above)\n\n\n\nFor example, the implementation might perform queries of an external source based on the 'q' SOLR query URL parameter (in full, <component name>.external.q).\n\nXJoinResults\nA user implementation of this interface is returned by the getResults() method of the XJoinResultsFactory implementation. It has methods:\n\n\n\tObject getResult(String joinId) - this should return a particular result given the value of the join attribute\n\tIterable<String> getJoinIds() - this should return an ordered (ascending) list of the join attribute values for all results of the external search\n\n\n\nXJoinSearchComponent\n\nThis is the central Java class of the contrib. It is a SOLR search component, configured in solrconfig.xml and included in one or more SOLR request handlers. There is one XJoin search component per external source, and each has two main responsibilities:\n\n\n\tBefore the SOLR search, it connects to the external source and retrieves results, storing them in the SOLR request context\n\tAfter the SOLR search, it matches SOLR document in the results set and external results via the join field, adding attributes from the external results to documents in the SOLR results set\n\n\n\nIt takes the following initialisation parameters:\n\n\n\tfactoryClass - this specifies the user-supplied class implementing XJoinResultsFactory, used to generate external results\n\tjoinField - this specifies the attribute on which to join between SOLR documents and external results\n\texternal - this parameter set is passed to configure the XJoinResultsFactory implementation\n\n\n\nFor example, in solrconfig.xml:\n\n\n<searchComponent name=\"xjoin_test\" class=\"org.apache.solr.search.xjoin.XJoinSearchComponent\">\n  <str name=\"factoryClass\">test.TestXJoinResultsFactory</str>\n  <str name=\"joinField\">id</str>\n  <lst name=\"external\">\n    <str name=\"values\">1,2,3</str>\n  </lst>\n</searchComponent>\n\n\n\nHere, the search component instantiates a new TextXJoinResultsFactory during initialisation, and passes it the \"values\" parameter (1, 2, 3) to configure it. To properly use the XJoinSearchComponent in a request handler, it must be included at the start and end of the component list, and may be configured with the following query parameters:\n\n\n\tresults - a comma-separated list of attributes from the XJoinResults implementation (created by the factory at search time) to be included in the SOLR results\n\tfl - a comma-separated list of attributes from results objects (contained in an XJoinResults implementation) to be included in the SOLR results\n\n\n\nFor example:\n\n<requestHandler name=\"/xjoin\" class=\"solr.SearchHandler\" startup=\"lazy\">\n  <lst name=\"defaults\">\n    ..\n    <bool name=\"xjoin_test\">true</bool>\n    <str name=\"xjoin_test.listParameter\">xx</str>\n    <str name=\"xjoin_test.results\">test_count</str>\n    <str name=\"xjoin_test.fl\">id,value</str>\n  </lst>\n  <arr name=\"first-components\">\n    <str>xjoin_test</str>\n  </arr>\n  <arr name=\"last-components\">\n    <str>xjoin_test</str>\n  </arr>\n</requestHandler>\n\n\n\nNote that, to include the list of join ids returned by the external source in the SOLR results (likely for debug purposes), the value 'join_ids' may be specified in the \"results\" parameter.\n\nXJoinQParserPlugin\n\nThis query parser plugin constructs a query from the results of the external searches, and is based on the TermsQParserPlugin. It takes the following local parameters:\n\n\n\t\ufeffmethod\ufeff - as the TermsQParserPlugin, this specifies how to build the Lucene query based on the join ids contained in external results; one of \ufefftermsFilter, booleanQuery, automaton, \ufeffor \ufeff\ufeffdocValuesTermsFilter\ufeff (defaults to \ufefftermsFilter\ufeff)\n\ufeff* v\ufeff (or as usual with query parsers, specified via the query) - a Boolean combination of XJoin search component names. Supported operators are OR, AND, XOR, and AND NOT\n\n\n\nThe query is a Boolean expression whose terms are XJoin search component names. The resulting set of join ids (obtained from the respective XJoin search components) are formed into a Lucene query. Note that the join field of all the referenced XJoin search components must be identical. Of course, the expression can be a single XJoin search component name in the simplest situation. For example:\n\nq={!xjoin}xjoin_test\nq={!xjoin v=xjoin_test}\nfq={!xjoin method=automaton}xjoin_test1 AND NOT xjoin_test2\n\n\n\nXJoinValueSourceParser\n\nThis class provides a SOLR function that may be used, for example, in a boost function to weight the result score from external values. The function returns an attribute value from the external result with matching join attribute. There are two ways of using the function. Either the XJoin component name is specified in the configuration parameters and the external result attribute is the argument of the function in the query, or vice versa, the attribute is specified in the configuration parameters and the component name is the function argument.\n\nThe parameters for configuration in solrconfig.xml are:\n\n\n\txJoinSearchComponent - the name of an XJoin search component containing external results\n\ufeff* attribute\ufeff - the attribute to use from external results\n\tdefaultValue - if the external result has no such attribute, then this value is returned\n\n\n\nNormally, only one of xJoinSearchComponent \ufeffand attribute \ufeffis configured, but it is possible to specify both (but you must specify at least one).\n\nFor example:\n\n<valueSourceParser name=\"test_fn\" class=\"org.apache.solr.search.xjoin.XJoinValueSourceParser\">\n  <str name=\"xJoinSearchComponent\">xjoin_test</str>\n  <double name=\"defaultValue\">1.0</double>\n</valueSourceParser>\n\n\nwith corresponding query string parameter (for example) bq=test_fn(value)\n\nAlternatively:\n\n<valueSourceParser name=\"test_fn\" class=\"org.apache.solr.search.xjoin.XJoinValueSourceParser\">\n  <str name=\"attribute\">value</str>\n  <double name=\"defaultValue\">1.0</double>\n</valueSourceParser>\n\n\nwith corresponding query string parameter (for example) bq=test_fn(join_test)\n\nMapping between attributes and Java methods\n\nJava method names are converted into attribute (field) names by stripping the initial \"get\" or \"is\" and converting the remainder from CamelCase to lowercase-with-underscores, and vice versa. For example, getScore() converts to \"score\" and getFooBar() converts to \"foo_bar\", and vice versa.\n\nThe field list parameter of XJoinSearchComponent (fl) can be given as *, in which case all methods beginning 'get' or 'is' are converted into fields in the SOLR result for the document.\n\nPutting it together - the SOLR query URL\n\nHere is an example SOLR query URL to perform an xjoin:\n\n\nhttp://solrserver:8983/solr/collection1/xjoin?defType=edismax&q=*:*&xjoin_test.external.q=foobar&fl=id,score&fq={!xjoin}xjoin_test&bf=test_fn(value)\n\n\n\nThis might result in the following SOLR response:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n  <lst name=\"responseHeader\">\n    <int name=\"status\">0</int>\n    <int name=\"QTime\">346</int>\n    <lst name=\"params\">\n      ..\n    </lst>\n  </lst>\n  <result name=\"response\" numFound=\"2\" start=\"0\" maxScore=\"58.60105\">\n    <doc>\n      <str name=\"id\">document1</str>\n      <float name=\"score\">58.60105</float>\n    </doc>\n    <doc>\n      <str name=\"id\">document2</str>\n      <float name=\"score\">14.260552</float>\n    </doc>\n  </result>\n  <lst name=\"xjoin_test\">\n    <int name=\"test_count\">145</int>\n    <arr name=\"external\">\n      <lst>\n        <str name=\"joinId\">document1</str>\n        <lst name=\"doc\">\n          <double name=\"value\">7.4</double>\n        </lst>\n      </lst>\n      <lst name=\"external\">\n        <str name=\"joinId\">document2</str>\n        <lst name=\"doc\">\n          <double name=\"value\">2.3</double>\n        </lst>\n      </lst>\n    </arr>\n  </lst>\n</response>\n\n\n\nNotes:\n\n\tThe actual 'join' is specified by the fq parameter. See XJoinQParserPlugin above.\n\tThe function test_fn is used in the bf score-boost function. Since the argument is value2, that attribute of the external results is used as the score boost.\n\n\n\nMany-to-many joins\n\nXJoin supports many-to-many joins in the following two ways.\n\nJoining against a multi-valued field\n\nThe SOLR field used as the join field may be multi-valued. External join values will match every SOLR document with at least one matching value in the join field. As usual, for every SOLR document in the results set, matching external results are appended. In this case, this includes matching external results with join id values for every value from the multi-valued field. Therefore, there may be many more external results included than the number of SOLR results.\n\nMany external results with the same join id\n\nThe case of many external results having the same join id is supported by returning a Java Iterable from the implementation of XJoinResults.getResult(joinIdStr). In this case, one <lst name=\"doc\"> is added to the corresponding <lst name=\"external\"> per element in the iterable. For the XJoinValueSourceParser, the maximum value is taken from the set of possible values.\n\nJoining results from multiple external sources\n\nThere are (at least) 3 different ways XJoin can be used in conjunction with other SOLR features to combine results from more than one external source.\n\nMultiple filter queries\n\nMultiple filter queries are ANDed together by SOLR, so if this is the desired combination for external result join ids, this is a simple approach. (Note the implications for filter caching.) In this case, the external join fields do not have to be the same.\n\nFor example (assuming two configured XJoin components, xjoin_test and xjoin_other):\n\nhttp://solrserver:8983/solr/collection1/xjoin?q=*:*&xjoin_test.external.q=foobar&xjoin_other.external.q=barfoo&fq={!xjoin}xjoin_test&fq={!xjoin}xjoin_other\n\n\n\nNested queries in the standard SOLR Query Parser\n\nThe nested query syntax of the standard SOLR query parser (see https://wiki.apache.org/solr/SolrQuerySyntax) can be used for more complicated combinations, allowing for \"should\", \"must\" etc. Lucene queries to be built from external join id sets. The external join fields do not have to be the same.\n\nFor example (again, assuming two configured XJoin components, xjoin_test and xjoin_other):\n\nhttp://solrserver:8983/solr/collection1/xjoin?q=*:*&xjoin_test.external.q=foobar&xjoin_other.external.q=barfoo&fq=_query_:\"{!xjoin}xjoin_test\" -_query_:\"{!xjoin}xjoin_other\"\n\n\n\nBoolean expressions with the XJoin Query Parser\n\nTo combine external join id sets directly using a Boolean expression, one can use the XJoinQParserPlugin as detailed above. This allows arbitrary Boolean expressions using the operators AND, OR, XOR and AND NOT.\n\nFor example (again, assuming two configured XJoin components, xjoin_test and xjoin_other):\n\nhttp://solrserver:8983/solr/collection1/xjoin?q=*:*&xjoin_test.external.q=foobar&xjoin_other.external.q=barfoo&fq={!xjoin}xjoin_test XOR xjoin_other\n\n\n\nThe SimpleXJoinResultsFactory implementation\n\nThe XJoin plugins accept java.util.Map returned from the results factory, both for the XJoinResults implementation and for the individual results objects themselves. This fact is made use of by the in-built SimpleXJoinResultsFactory, which is an implementation of XJoinResultsFactory that connects to a URL to collect results in XML or JSON format, and uses XPath/JsonPaths to extract field values. This can often be used instead of writing custom Java code.\n\nThe SimpleXJoinResultsFactory takes the following initialisation parameters:\n\n\n\ttype - either XML or JSON\n\trootUrl - the URL to connect to for external results (can be file:// for testing)\n\tglobalFieldPaths - a list of XPaths or JsonPaths which are used to extract 'global' values (not individual result values)\n\tjoinIdPath - an XPath or JsonPath that should return an array of join ids extracted from the results\n\tjoinIdToken - a token used in resultFieldPaths that will be substituted with each join id, usually the default 'JOINID' will suffice\n\tresultFieldPaths - a list of XPaths or JsonPaths which are used to extract result values\n\n\n\nExample solrconfig.xml snippet:\n\n\n  <searchComponent name=\"xjoin\" class=\"org.apache.solr.search.xjoin.XJoinSearchComponent\">\n    <str name=\"factoryClass\">org.apache.solr.search.xjoin.simple.SimpleXJoinResultsFactory</str>\n    <str name=\"joinField\">id</str>\n    <lst name=\"external\">\n      <str name=\"type\">JSON</str>\n      <str name=\"rootUrl\">http://myserver/endpoint</str>\n      <lst name=\"globalFieldPaths\">\n        <str name=\"count\">$.length()</str>\n      </lst>\n      <str name=\"joinIdPath\">$[*].id</str>\n      <lst name=\"resultFieldPaths\">\n        <str name=\"field\">$[?(@.id == 'JOINID')].field</str>\n        <str name=\"value\">$[?(@.id == 'JOINID')].value</str>\n      </lst>\n    </lst>\n  </searchComponent>\n\n\n\nAny external SolrParams are turned into URL query string parameters, so for example, including \"xjoin.external.q=foo\" in the SOLR URL results in the XJoin component making a request to \"http://myserver/endpoint?q=foo\".",
    "attachments": {
        "SOLR-7341.patch-5_3": "https://issues.apache.org/jira/secure/attachment/12783145/SOLR-7341.patch-5_3",
        "SOLR-7341.patch-4_10": "https://issues.apache.org/jira/secure/attachment/12783144/SOLR-7341.patch-4_10",
        "SOLR-7341.patch-trunk": "https://issues.apache.org/jira/secure/attachment/12783146/SOLR-7341.patch-trunk",
        "SOLR-7341.patch-5.3.2": "https://issues.apache.org/jira/secure/attachment/12789951/SOLR-7341.patch-5.3.2",
        "SOLR-7341.patch-7.2.1": "https://issues.apache.org/jira/secure/attachment/12910383/SOLR-7341.patch-7.2.1",
        "SOLR-7341.patch-4.10.3": "https://issues.apache.org/jira/secure/attachment/12789950/SOLR-7341.patch-4.10.3",
        "SOLR-7341.patch-master": "https://issues.apache.org/jira/secure/attachment/12789952/SOLR-7341.patch-master"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-02T16:24:11+0000",
            "author": "Tom Winch",
            "content": "Patch file on the way. ",
            "id": "comment-14392905"
        },
        {
            "date": "2015-04-08T13:46:49+0000",
            "author": "Tom Winch",
            "content": "Attached 8/4/15 ",
            "id": "comment-14485249"
        },
        {
            "date": "2015-05-06T16:40:06+0000",
            "author": "Tom Winch",
            "content": "Added updated patch with more support for multiple external sources (XJoinQParserPlugin) ",
            "id": "comment-14530847"
        },
        {
            "date": "2015-06-24T14:41:08+0000",
            "author": "Alan Woodward",
            "content": "Hi Tom,\n\nThis looks great!  A couple of questions:\n\n\tThis looks like it's built against 4.x.  Could you make a patch that compiles against trunk?\n\tDo you have any performance numbers for this?\n\n\n\nI'm not sure if we have any kind of general policy about accepting contrib/ patches.  This looks sufficiently generally useful that it would be worth committing though. ",
            "id": "comment-14599507"
        },
        {
            "date": "2015-07-01T13:49:00+0000",
            "author": "Tom Winch",
            "content": "Latest patch (against 4.10.3) with support for grouping ",
            "id": "comment-14610263"
        },
        {
            "date": "2015-07-07T11:08:07+0000",
            "author": "Tom Winch",
            "content": "Minor bug fixes ",
            "id": "comment-14616527"
        },
        {
            "date": "2015-07-07T15:47:21+0000",
            "author": "Tom Winch",
            "content": "Patch against trunk (svn rev 1689652) ",
            "id": "comment-14616884"
        },
        {
            "date": "2015-07-14T14:05:58+0000",
            "author": "Tom Winch",
            "content": "Running against a 'toy' XJoinResultsFactory implementation (that just parrots back join ids), and an index of about 6k documents, a straightforward fq join is executed in <50ms, similarly a Boolean combination. Adding in weights using bf roughly doubles the QTime. I expect in many real world situations the time taken to call out to the external source would dominate. ",
            "id": "comment-14626373"
        },
        {
            "date": "2015-09-16T16:02:29+0000",
            "author": "Tom Winch",
            "content": "Very minor update to exclude 'class' from automatic method choice ",
            "id": "comment-14790610"
        },
        {
            "date": "2015-09-16T16:09:39+0000",
            "author": "Tom Winch",
            "content": "Very minor update to exclude 'class' from automatic method detection ",
            "id": "comment-14790625"
        },
        {
            "date": "2015-10-14T13:59:31+0000",
            "author": "Tom Winch",
            "content": "Many-to-many support ",
            "id": "comment-14956980"
        },
        {
            "date": "2015-10-14T13:59:53+0000",
            "author": "Tom Winch",
            "content": "Many-many support. ",
            "id": "comment-14956982"
        },
        {
            "date": "2015-10-15T21:36:46+0000",
            "author": "Doug Turnbull",
            "content": "I am really looking forward to this patch. It has a lot of potential for joining search with external ranking systems like recommenders or other systems that are more appropriatte for different use cases. ",
            "id": "comment-14959677"
        },
        {
            "date": "2015-12-03T23:12:46+0000",
            "author": "Gopal Patwa",
            "content": "Tom Winch could you make a patch working with 5.x? we are exploring this option but we are on 5.3.1 version ",
            "id": "comment-15038800"
        },
        {
            "date": "2015-12-10T11:21:38+0000",
            "author": "Tom Winch",
            "content": "I can do  -  I presume you tried applying the trunk patch and it didn't work? ",
            "id": "comment-15050619"
        },
        {
            "date": "2015-12-17T14:07:30+0000",
            "author": "Tom Winch",
            "content": "Patch for SOLR 5.3 ",
            "id": "comment-15062076"
        },
        {
            "date": "2015-12-17T14:07:50+0000",
            "author": "Tom Winch",
            "content": "Done ",
            "id": "comment-15062077"
        },
        {
            "date": "2016-01-19T17:27:11+0000",
            "author": "Tom Winch",
            "content": "New patches with slightly improved output format ",
            "id": "comment-15107039"
        },
        {
            "date": "2016-02-09T12:53:36+0000",
            "author": "Tom Winch",
            "content": "trunk patch is for git; others (remain) for svn ",
            "id": "comment-15138902"
        },
        {
            "date": "2016-02-25T16:10:01+0000",
            "author": "Tom Winch",
            "content": "Git patches for 4.10.3, 5.3.2 and master that include the SimpleXJoinResultsFactory ",
            "id": "comment-15167367"
        },
        {
            "date": "2016-03-22T04:03:14+0000",
            "author": "Erick Erickson",
            "content": "See my comment for March 21, 2016 for SOLR-7090. Basically I'd like to be sure that we can't realize this functionality with Streaming Aggregation rather than adding this kind of complexity that we then have to support.\n\nI'd at least like to enumerate the pros and cons of both before anyone commits such a large amount of code. ",
            "id": "comment-15205743"
        },
        {
            "date": "2016-03-23T13:50:07+0000",
            "author": "Tom Winch",
            "content": "XJoin isn't like the joins on SOLR-7090 because it joins against an external data source rather than a SOLR core. In addition it decorates the standard SOLR results which is rather different to how I understand SA would behave. ",
            "id": "comment-15208424"
        },
        {
            "date": "2016-03-23T15:28:36+0000",
            "author": "Erick Erickson",
            "content": "You're right, SA is designed for Solr/Solr connections. That said, there's nothing in SA that precludes either decorating the returns or enriching the Solr stream with information from another source. There are some restrictions, primarily the only data that can be returned is docValues. Plus SA is a SolrJ construct thus not as easy to use.\n\nPlease understand, I'm not against this JIRA, there's obviously been a huge amount of work done for this patch (and even documentation!). I can see where there this would fill a real need and expand Solr's capabilities greatly.\n\nAnd SA may not be incompatible with this JIRA at all, perhaps even a way to realize the Solr/Solr version. All the work on the parsing, syntax etc. could probably be used as-is.\n\nMostly, I'm trying to be sure we're considering whether SA could be used to make things more scalable etc. ",
            "id": "comment-15208598"
        },
        {
            "date": "2016-03-29T12:41:16+0000",
            "author": "Tom Winch",
            "content": "Thanks for your input, Erick!  My feeling is that this JIRA would work independently to SA.  I don't think it is incompatible at all.  However I don't think it would be right to use XJoin for Solr/Solr, that feels like hammer to crack a nut. ",
            "id": "comment-15215950"
        },
        {
            "date": "2016-06-09T21:03:24+0000",
            "author": "Adam Gamble",
            "content": "I would love this feature as well. Is there a chance this will get merged? Or is it dead in the water? ",
            "id": "comment-15323349"
        },
        {
            "date": "2016-07-05T18:24:50+0000",
            "author": "Otis Gospodnetic",
            "content": "Adam Gamble - vote for it  ",
            "id": "comment-15362942"
        },
        {
            "date": "2016-08-16T02:38:39+0000",
            "author": "Saar Carmi",
            "content": "This jira seems to be related to https://issues.apache.org/jira/browse/SOLR-1715 \n(should I add a link?)\n\nAlso discussed here in 2010 - http://goo.gl/ywSQZJ\n\nIn our scenario, the users of our systems are looking to query an external source which may produce a file containing large amount of values and then query Solr against these values. Is the patch optimized for scenario where the external source provides a large amount of values?\t(hundreds of thousands) ",
            "id": "comment-15422078"
        },
        {
            "date": "2017-02-16T19:14:59+0000",
            "author": "Shamik Bandopadhyay",
            "content": "The master or the trunk patch (SOLR-7341.patch-master/SOLR-7341.patch-trunk) doesn't seem to work with 5.5 version onwards. I've tried applying the patch on 5.5/6.0/master source code, but it fails. Is it compatible with the above versions? ",
            "id": "comment-15870538"
        },
        {
            "date": "2017-02-16T21:53:25+0000",
            "author": "Erick Erickson",
            "content": "Shamik:\n\nIn a word no. The \"fix versions\" are suggestions of what was current when the patch was first created. I would guess the last version it was applied to successfully was 4.10.3.\n\nBest,\nErick ",
            "id": "comment-15870756"
        },
        {
            "date": "2018-02-13T12:47:59+0000",
            "author": "Tom Mortimer",
            "content": "Just added a patch for branch_7_2. ",
            "id": "comment-16362240"
        }
    ]
}