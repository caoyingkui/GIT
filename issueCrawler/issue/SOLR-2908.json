{
    "id": "SOLR-2908",
    "title": "To push the terms.limit parameter from the master core to all the shard cores.",
    "details": {
        "affect_versions": "1.4.1",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "priority": "Critical",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When we pass the terms.limit parameter to the master (which has many shard cores), it's not getting pushed down to the individual cores. Instead the default value of -1 is assigned to Terms.limit parameter is assigned in the underlying shard cores. The issue being the time taken by the Master core to return the required limit of terms is higher when we are having more number of underlying shard cores. This affects the performances of the auto suggest feature. \n\nCan thought we can have a parameter to explicitly override the -1 being set to Terms.limit in shards core.\n\nWe saw the source code(TermsComponent.java) and concluded that the same. Please help us in pushing the terms.limit parameter to shard cores. \n\nPFB code snippet.\n\nprivate ShardRequest createShardQuery(SolrParams params) \n{\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\nSolr Version:\nSolr Specification Version: 1.4.0.2010.01.13.08.09.44 \n Solr Implementation Version: 1.5-dev exported - yonik - 2010-01-13 08:09:44 \n Lucene Specification Version: 2.9.1-dev \n Lucene Implementation Version: 2.9.1-dev 888785 - 2009-12-09 18:03:31",
    "attachments": {
        "SOLR-2908.patch": "https://issues.apache.org/jira/secure/attachment/12629092/SOLR-2908.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13717399",
            "date": "2013-07-23T18:48:07+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13901838",
            "date": "2014-02-14T19:38:03+0000",
            "content": "If you limit terms number you'd need to pass at least sorting to shard in order to get most relevant terms (if needed).\nAdded shards.terms.params.override=true parameter, if terms parameters (terms.limit, terms.sort, terms.maxcount, terms.mincount) should be passed to shards.\nUsing this parameter with terms.sort=index (no sorting) is ok, but using shards.terms.params.override with terms.sort=count can lead to inconsistent results with single core.\nSee org.apache.solr.handler.component.DistributedTermsComponentParametersTest. \n\nFor example, we use \n\nshards.terms.params.override=true&terms.limit=5&terms.sort=count\n\nand data\n\n    index(id, 18, \"b_t\", \"snake spider shark snail slug seal\");\n    index(id, 19, \"b_t\", \"snake spider shark snail slug\");\n    index(id, 20, \"b_t\", \"snake spider shark snail\");\n    index(id, 21, \"b_t\", \"snake spider shark\");\n    index(id, 22, \"b_t\", \"snake spider\");\n    index(id, 23, \"b_t\", \"snake\");\n    index(id, 24, \"b_t\", \"ant zebra\");\n    index(id, 25, \"b_t\", \"zebra\");\n\n\n\nWIth single core results will be like \n\nsnake=6 spider=5 shark=4 snail=3 slug=2\n\n\nFor 2shards results will be like\nshard 1:  \n\n snake=3 spider=3 shark=2 snail=2 ant=1 \n\nshard 2: \n\n snake=3 spider=2 shark=2 seal=1 slug=1 \n\n\nCombined result: \n\n snake=6 spider=5 shark=4 snail=2 ant=1 \n\n\nI suggest this parameter override will be useful with sorting and custom routing, in case that same terms located on the same shard, \nsorted and limited there correctly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13903956",
            "date": "2014-02-18T11:18:25+0000",
            "content": "Perhaps incorrect counts are okay sometimes? We have the same problem with the SpellCheckComponent and the FacetComponent. Both of them push a limit to the shards which is slightly higher than the specified limit during distributed search. None of them guarantee accurate values unless you set the limit to -1 (unlimited).\n\nInstead of a 'shards.terms.params.override' parameter, perhaps we can have a 'terms.shard.limit' parameter which can default to a sane limit, say terms.limit * 1.5 + 10 (this formula is used by faceting). If necessary the user can specify a higher value if accuracy is desired. What do you think? "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13905567",
            "date": "2014-02-19T15:41:36+0000",
            "content": "if you want to override only limit passed to shards, other params also should not be passed,\n\nsreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n      sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n      sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n      sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n\n otherwise completely wrong (unsorted) terms will be limited and passed from shard.\nPlease see attached patch illustrating this idea, by adding 'shards.terms.limit' parameter.\nNote that problem with inconsistent results still exists, but this can be minimized with combining terms.limit and shards.terms.limit like in org.apache.solr.handler.component.DistributedTermsComponentParametersTest. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971027",
            "date": "2014-04-16T12:56:56+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}