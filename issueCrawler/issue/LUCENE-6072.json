{
    "id": "LUCENE-6072",
    "title": "Use mock filesystem in tests",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Test"
    },
    "description": "We went through the trouble to convert to NIO.2, but we don't take advantage of it in tests...\n\nSince everything boils down to LuceneTestCase's temp dir (which is just Path), we can wrap the filesystem with useful stuff:\n\n\tdetect file handle leaks (better than mockdir: not just index files)\n\tact like windows (don't delete open files, case-insensitivity, etc)\n\tverbosity (add what is going on to infostream for debugging)\n\n\n\nI prototyped some of this in a patch. Currently it makes a chain like this:\n\n  private FileSystem initializeFileSystem() {\n    FileSystem fs = FileSystems.getDefault();\n    if (LuceneTestCase.VERBOSE) {\n      fs = new VerboseFS(fs,\n                new PrintStreamInfoStream(System.out)).getFileSystem(null);\n    }\n    fs = new LeakFS(fs).getFileSystem(null);\n    fs = new WindowsFS(fs).getFileSystem(null);\n    return fs.provider().getFileSystem(URI.create(\"file:///\"));\n  }\n\n\n\nSome things to figure out:\n\n\tI don't think we want to wrap all the time (worry about hiding bugs)\n\tits currently a bit lenient (e.g. these filesystems allow calling toFile, which can \"escape\" and allow you to do broken things). But only 2 or 3 tests really need File, so we could fix that.\n\tits currently complicated and messy (i blame the jdk api here, but maybe we can simplify it)",
    "attachments": {
        "LUCENE-6072.patch": "https://issues.apache.org/jira/secure/attachment/12683217/LUCENE-6072.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14222389",
            "author": "Robert Muir",
            "date": "2014-11-23T15:27:21+0000",
            "content": "I added a wrapper to disable underlying fsync calls in tests, and added some simple unit tests for these things, randomized the wrapping so we still test against bare filesystem, and use the mockwindows only some of the time, etc. "
        },
        {
            "id": "comment-14222400",
            "author": "Robert Muir",
            "date": "2014-11-23T16:09:39+0000",
            "content": "I added a few more tests, and fixed a bug in mockwindows. "
        },
        {
            "id": "comment-14222467",
            "author": "Ryan Ernst",
            "date": "2014-11-23T19:14:36+0000",
            "content": "This looks great! It would be cool if this could replace the windows virus checker mocking that was done recently?\n\n+1 to the patch. My only thought is to rename \"sop\" in VerboseFS to something like \"log\" or \"notify\". "
        },
        {
            "id": "comment-14222477",
            "author": "Dawid Weiss",
            "date": "2014-11-23T19:49:33+0000",
            "content": "Very cool indeed. There is a (similar delegate-based) PassThroughFileSystem.java in OpenJDK test sources; it seems to have its own separate URI. I didn't look deeply, but if you wanted to lookup how things are (should be?) done there, it's readily available. \n\n Not sure about licensing issues; I assume we can look at OpenJDK code as a reference for custom implementations? "
        },
        {
            "id": "comment-14222480",
            "author": "Robert Muir",
            "date": "2014-11-23T19:56:17+0000",
            "content": "I didnt know about it, i assume its GPL without looking. It is sad, as i spent a ton of time trying to figure out that part \n\nEach of these have their own scheme. Its required parameter for subclasses (e.g. the windows one is windows://).  "
        },
        {
            "id": "comment-14222482",
            "author": "Dawid Weiss",
            "date": "2014-11-23T19:58:37+0000",
            "content": "Sadly, you are correct, it's GPLv2. "
        },
        {
            "id": "comment-14222487",
            "author": "Robert Muir",
            "date": "2014-11-23T20:14:30+0000",
            "content": "Also, not to justify the craziness, but i dont think we can trust the JDK to implement these \"pass thru\" ones.\n\nEvery one they do (FilterInputStream, FilterOutputStream, FilterReader) has horrible performance / delegation bugs.\n\nI found this out because when i initially developed this, i used FilterInputStream and FilterOutputStream, and suddenly like 10% of tests had beating hearts and were taking forever. After profiling tests, its because if you subclass these classes (even to just intercept 'close' or whatever), then suddenly all bytes are being written/read one byte at a time, and i think even boxed inside byte[1]'s and so on.  "
        },
        {
            "id": "comment-14222488",
            "author": "Michael McCandless",
            "date": "2014-11-23T20:17:48+0000",
            "content": "+1, this looks wonderful.  I like the name \"sop\" \n\nI ran tests before/after with the patch (\"ant test -Dtests.seed=0\" in lucene/core) and the times were the same within noise. "
        },
        {
            "id": "comment-14222524",
            "author": "Uwe Schindler",
            "date": "2014-11-23T22:44:05+0000",
            "content": "After profiling tests, its because if you subclass these classes (even to just intercept 'close' or whatever), then suddenly all bytes are being written/read one byte at a time, and i think even boxed inside byte[1]'s and so on.\n\nCommons-IO has ProxyInputStream and ProxyOutputStream to do exactly the 1:1 delegation. In fact we could fix the delegation without implementing a completely new FilterXxxStream. But your solution is also fine, very explicit \n\nOtherwise I like the whole thing! "
        },
        {
            "id": "comment-14222526",
            "author": "Uwe Schindler",
            "date": "2014-11-23T22:48:26+0000",
            "content": "One small thing: Should FilterFSProvider.onClose not be protected instead of public? "
        },
        {
            "id": "comment-14222527",
            "author": "Robert Muir",
            "date": "2014-11-23T22:52:09+0000",
            "content": "Currently, only concrete things are public. Most of the patch is pkg private. I can fix docs and promote to public, with some experimental or internal warning.  "
        },
        {
            "id": "comment-14224648",
            "author": "Robert Muir",
            "date": "2014-11-25T15:07:17+0000",
            "content": "\nOne small thing: Should FilterFSProvider.onClose not be protected instead of public?\n\nYes you are correct here. Since you should not delegate the call. close() has to be handled in this stupid strange way, because the default filesystem throws exception if you try to close it  "
        },
        {
            "id": "comment-14224669",
            "author": "ASF subversion and git services",
            "date": "2014-11-25T15:21:29+0000",
            "content": "Commit 1641632 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1641632 ]\n\nLUCENE-6072: use mockfilesystem in tests "
        },
        {
            "id": "comment-14224670",
            "author": "Robert Muir",
            "date": "2014-11-25T15:21:54+0000",
            "content": "I committed to trunk for now. Ill give some jenkins time before backporting, its not a invasive change. "
        },
        {
            "id": "comment-14226220",
            "author": "ASF subversion and git services",
            "date": "2014-11-26T14:22:28+0000",
            "content": "Commit 1641821 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1641821 ]\n\nLUCENE-6072: add a way to test for too many open files "
        },
        {
            "id": "comment-14226323",
            "author": "ASF subversion and git services",
            "date": "2014-11-26T15:32:03+0000",
            "content": "Commit 1641833 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1641833 ]\n\nLUCENE-6072: use mockfilesystem in tests "
        },
        {
            "id": "comment-14226479",
            "author": "ASF subversion and git services",
            "date": "2014-11-26T17:19:26+0000",
            "content": "Commit 1641861 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1641861 ]\n\nLUCENE-6072: fix delegation of remove method "
        },
        {
            "id": "comment-14226491",
            "author": "ASF subversion and git services",
            "date": "2014-11-26T17:24:12+0000",
            "content": "Commit 1641862 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1641862 ]\n\nLUCENE-6072: fix delegation of remove method "
        }
    ]
}