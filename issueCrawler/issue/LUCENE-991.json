{
    "id": "LUCENE-991",
    "title": "BoostingTermQuery.explain() bugs",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "There are a couple of minor bugs in BoostingTermQuery.explain().\n\n1. The computation of average payload score produces NaN if no payloads were found. It should probably be:\nfloat avgPayloadScore = super.score() * (payloadsSeen > 0 ? (payloadScore / payloadsSeen) : 1);\n\n2. If the average payload score is zero, the value of the explanation is 0:\nresult.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\nIf the query is part of a BooleanClause, this results in:\n\"no match on required clause...\"\n\"failure to meet condition(s) of required/prohibited clause(s)\"\n\nThe average payload score can be zero if the field boost = 0.\n\nI've attached a patch to 'TestBoostingTermQuery.java', however, the test 'testNoPayload' fails in 'SpanScorer.score()' because the doc = -1. It looks like 'setFreqCurrentDoc() should have been called before 'score()'. Maybe someone more knowledgable of spans could investigate this.",
    "attachments": {
        "TestBoostingTermQuery.patch": "https://issues.apache.org/jira/secure/attachment/12364892/TestBoostingTermQuery.patch",
        "TestBoostingTermQuery4.patch": "https://issues.apache.org/jira/secure/attachment/12365353/TestBoostingTermQuery4.patch",
        "TestBoostingTermQuery3.patch": "https://issues.apache.org/jira/secure/attachment/12365347/TestBoostingTermQuery3.patch",
        "TestBoostingTermQuery2.patch": "https://issues.apache.org/jira/secure/attachment/12365346/TestBoostingTermQuery2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-08-31T14:36:08+0000",
            "content": "Added 'testNoPayload' ",
            "author": "Peter Keegan",
            "id": "comment-12524092"
        },
        {
            "date": "2007-09-07T12:21:48+0000",
            "content": "Hi Peter, \n\nCouple comments.  #1 makes sense, except the super.score() part, the score from the other part of the matching is handled by the nonPayloadExpl part.  I do agree it should check for zero on payloadsSeen, though, and have added that.\n\nI don't think I am understanding the issue with #2 above.  I am not sure the test is correct.  The results[0] being passed into the checkHitCollector say you expect Document 0 to be a match, but this can't be since the boost is 0, therefore there are no results.  This can be seen by running the query against the search without the explain, as in:\nTopDocs hits = searcher.search(query, null, 100);\nassertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\nOr, perhaps I am missing something?  I guess I don't see why the boost part needs to be in there?  Can't you have a test that has no payloads? ",
            "author": "Grant Ingersoll",
            "id": "comment-12525695"
        },
        {
            "date": "2007-09-07T12:32:25+0000",
            "content": "but, I agree, there is something wrong here.  Attached is an update of the Test, plus a fix for #1. ",
            "author": "Grant Ingersoll",
            "id": "comment-12525697"
        },
        {
            "date": "2007-09-07T12:49:00+0000",
            "content": "OK, I think I see the problem,\n\nThe issue lies in the fact that the Similarity override for this test sets the tf() to 1, regardless of the frequency coming in.  Thus, for the \"foo\" clause, it \n\nLet me know what you think of this patch. ",
            "author": "Grant Ingersoll",
            "id": "comment-12525699"
        },
        {
            "date": "2007-09-07T13:33:57+0000",
            "content": "\n\nHi Grant,\n\n> TopDocs hits = searcher.search(query, null, 100);\n> assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\nTopDocCollector discards hits with score = 0, so that's not a fair comparison. If you do a similar test with TermQuery (with a field boost = 0) instead of BoostingTermQuery, you'll see the difference. Even terms with 0 weight are included in the explanation. Make sense?\n\nPeter\n ",
            "author": "Peter Keegan",
            "id": "comment-12525709"
        },
        {
            "date": "2007-09-07T13:59:38+0000",
            "content": "OK, I added the setBoost(0) back in, but kept the similarity change and the test passes ",
            "author": "Grant Ingersoll",
            "id": "comment-12525714"
        },
        {
            "date": "2007-09-07T14:51:08+0000",
            "content": "Confirmed - thanks. ",
            "author": "Peter Keegan",
            "id": "comment-12525734"
        },
        {
            "date": "2007-09-08T16:57:59+0000",
            "content": "Committed. ",
            "author": "Grant Ingersoll",
            "id": "comment-12525930"
        },
        {
            "date": "2007-11-03T05:41:58+0000",
            "content": "Hi Grant,\n\nTopDocCollector discards hits with score = 0, so that's not a fair\ncomparison. If you do a similar test with TermQuery (with a field boost = 0)\ninstead of BoostingTermQuery, you'll see the difference. Even terms with 0\nweight are included in the explanation. Make sense?\n\nPeter\n\n ",
            "author": "Peter Keegan",
            "id": "comment-12539789"
        }
    ]
}