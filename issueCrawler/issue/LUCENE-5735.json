{
    "id": "LUCENE-5735",
    "title": "Faceting for DateRangePrefixTree",
    "details": {
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/spatial"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "5.3"
        ]
    },
    "description": "The newly added DateRangePrefixTree (DRPT) encodes terms in a fashion amenable to faceting by meaningful time buckets. The motivation for this feature is to efficiently populate a calendar bar chart or heat-map. It's not hard if you have date instances like many do but it's challenging for date ranges.\n\nInternally this is going to iterate over the terms using seek/next with TermsEnum as appropriate.  It should be quite efficient; it won't need any special caches. I should be able to re-use SPT traversal code in AbstractVisitingPrefixTreeFilter.  If this goes especially well; the underlying implementation will be re-usable for geospatial heat-map faceting.",
    "attachments": {
        "LUCENE-5735__PrefixTreeFacetCounter.patch": "https://issues.apache.org/jira/secure/attachment/12692299/LUCENE-5735__PrefixTreeFacetCounter.patch",
        "LUCENE-5735.patch": "https://issues.apache.org/jira/secure/attachment/12685655/LUCENE-5735.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14237391",
            "author": "David Smiley",
            "content": "Here's the patch, with randomized testing verification of results.  The faceting code doesn't make any date assumptions, and so it should work once a non-date NumberRangePrefixTree subclass comes into existence.\n\nI added a method to NumberRangePrefixTreeStrategy with this signature:\n\npublic Facets calcFacets(IndexReaderContext context, final Bits acceptDocs, Shape facetRange, int level)\n\n\n\nacceptDocs is a filter of documents to count (null to count all docs).  facetRange is a range that will limit the values counted to that provided range (e.g. a start date and end date span).  Get one of those easily via toRangeShape(start,end) method.  'level' is the bottom-most prefix tree level to be counted.  For example, the level corresponding to a 'day'.  There are multiple ways of determining what the level is, namely by lookup given a Calendar field or taking it from an existing Calendar instance.\n\nThe response structure, 'Facets', looks like this:\n\npublic static class Facets {\n    //TODO consider a variable-level structure -- more general purpose.\n\n    public Facets(int detailLevel) {\n      this.detailLevel = detailLevel;\n    }\n\n    /** The bottom-most detail-level counted, as requested. */\n    public final int detailLevel;\n\n    /**\n     * The count of documents with ranges that completely spanned the parents of the detail level. In more technical\n     * terms, this is the count of leaf cells 2 up and higher from the bottom. Usually you only care about counts at\n     * detailLevel, and so you will add this number to all other counts below, including to omitted/implied children\n     * counts of 0. If there are no indexed ranges (just instances, i.e. fully specified dates) then this value will\n     * always be 0.\n     */\n    public int topLeaves;\n\n    /** Holds all the {@link FacetParentVal} instances in order of the key. This is sparse; there won't be an\n     * instance if it's count and children are all 0. The keys are {@link LevelledValue} shapes, which can be\n     * converted back to the original Object (i.e. a Calendar) via {@link #toObject(LevelledValue)}. */\n    public final SortedMap<LevelledValue,FacetParentVal> parents = new TreeMap<>();\n\n    /** Holds a block of detailLevel counts aggregated to their parent level. */\n    public static class FacetParentVal {\n\n      /** The count of ranges that span all of the childCount.  In more technical terms, this is the number of leaf\n       * cells found at this parent.  Treat this like {@link Facets#topLeaves}. */\n      public int parentLeaves;// (parent leaf count) to be added to all descendants (children)\n\n      /** The length of {@link #childCounts}. If childCounts is not null then this is childCounts.length, otherwise it\n       * says how long it would have been if it weren't null. */\n      public int childCountsLen;\n\n      /** The detail level counts. It will be null if there are none, and thus they are assumed 0. Most apps, when\n       * presenting the information, will add {@link #topLeaves} and {@link #parentLeaves} to each count. */\n      public int[] childCounts;//null if there are none.\n      //assert childCountsLen == childCounts.length\n    }\n  }\n\n\n\nI've got a toString() on it with concise output that I found nice to look at during debugging.\n\nThe patch has some small changes to related classes involved that are mostly little refactorings and/or making things visible that the facets code needs that were previously private.  I'd like to make more refactoring/renaming happen around there to make this number/date spatial API a little more friendly. I'm sure it'll be a bit awkward to newcomers.  ",
            "date": "2014-12-08T03:06:20+0000"
        },
        {
            "id": "comment-14238022",
            "author": "Shai Erera",
            "content": "Would it make sense to use the facet/ module Facets and FacetResult? I haven't looked at the patch, but if we can, it will be good since those facets could be used together with other facets (e.g. range faceting on numeric fields). ",
            "date": "2014-12-08T16:25:49+0000"
        },
        {
            "id": "comment-14238045",
            "author": "David Smiley",
            "content": "Hello Shai Erera.  I did take a quick look even before your suggestion now and there isn't much congruency between both.  For one thing, the facet module yields a LabelAndValue for each count yet for the faceting I did, I deliberately avoided computing the label String for each value and instead return a int[] for a higher level bucket.  So if you facet by day, you'll get a month \"parent\" with a label and an int array of size 31 (or sometimes 30 or 28).  Also, I don't know what to make of the \"dim\" and \"path\" stuff.  So it doesn't seem like a good fit, and might erroneously suggest to users some sort of integration with the facets module that doesn't actually exist. ",
            "date": "2014-12-08T16:41:14+0000"
        },
        {
            "id": "comment-14238531",
            "author": "Shai Erera",
            "content": "OK in that case it sounds like it doesn't make much sense then. No need to force anything. ",
            "date": "2014-12-08T22:04:01+0000"
        },
        {
            "id": "comment-14245822",
            "author": "David Smiley",
            "content": "Updated patch to sync with refactors recently committed, and a minor test bug.  I think I may commit this to trunk soonish to get Jenkins beating on it... though Ryan McKinley I'd appreciate a look. ",
            "date": "2014-12-14T05:11:15+0000"
        },
        {
            "id": "comment-14257963",
            "author": "ASF subversion and git services",
            "content": "Commit 1647727 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1647727 ]\n\nLUCENE-5735: number/date range faceting on NumberRangePrefixTreeStrategy ",
            "date": "2014-12-24T04:59:30+0000"
        },
        {
            "id": "comment-14277469",
            "author": "David Smiley",
            "content": "This patch improves on the trunk committed code:\n\n\tRefactors out a PrefixTreeStrategy agnostic \"PrefixTreeFacetCounter\" with a callback/visitor for each count.  NumberRangePrefixFacets is no more, and the NumberRangePrefixTreeStrategy provides a callback to populate the same data structure it did before. It could be slower because of a separation that's here now that wasn't before but I doubt it'd be noticeable.\n\tInstead of filtering docs to be faceted with a Bits, you now provide a Filter. I think this is much better API wise than before.\n\n\n\nThis patch depends on two recent small spatial refactorings, LUCENE-6181 and LUCENE-6182.  I'll commit these issues in a bit and let Jenkins beat on it. ",
            "date": "2015-01-14T19:07:58+0000"
        },
        {
            "id": "comment-14279072",
            "author": "ASF subversion and git services",
            "content": "Commit 1652212 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1652212 ]\n\nLUCENE-5735: spatial PrefixTreeFacetCounter (for faceting on SpatialPrefixTrees) ",
            "date": "2015-01-15T18:33:01+0000"
        },
        {
            "id": "comment-14279192",
            "author": "ASF subversion and git services",
            "content": "Commit 1652254 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1652254 ]\n\nLUCENE-5735: move PrefixTreeFacetCounter up a package ",
            "date": "2015-01-15T19:40:07+0000"
        },
        {
            "id": "comment-14279292",
            "author": "ASF subversion and git services",
            "content": "Commit 1652270 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1652270 ]\n\nLUCENE-5735: don't run test 10,000 times. if this is needed please change back but add Nightly ",
            "date": "2015-01-15T21:11:01+0000"
        },
        {
            "id": "comment-14306666",
            "author": "David Smiley",
            "content": "The PrefixTreeFacetCounter utility is good; if it doesn't get committed to 5x as part of this issue first, it will for the heatmap one.\n\nThere's a bug in NumberRangePrefixTreeStrategy.calcFacets in which all cells above the parent are counted as topLeaves, when really that can only be done if the leaf cell contains the facet range.  I have a fix in-progress in which I detect this and if the cell doesn't contain the facet range then I walk the sub-cells and increment the counters on the parent facet cells.  There's a rare-ish bug I need to debug still.  But thus far there are a few changes pending in my local check-out:\n\n\tMake TreeCellIterator public (lucene.internal, still) and allow the 'cell' to be a cell other than the top world cell.  Probably add a reset() constructor-like method to re-use an instance.\n\tNRCell has an optimization when getting subCells that seems to work fine in the normal code-paths thus far but the updated faceting code in-progress has shown the optimization to be faulty, so I just removed it as I don't think it was worth trying to make it work.\n\tNRCell sometimes can't get subCells if it was initialized from a short length shape/bytes; it should instead always initialize it's array to maxLevels.  Again; this apparently never happen in normal code paths but in some toy test code I triggered it.\n\tRefactor the two main date range tests to share a random calendar utility (RandomCalHelper).\n\n ",
            "date": "2015-02-05T05:33:31+0000"
        },
        {
            "id": "comment-14311747",
            "author": "ASF subversion and git services",
            "content": "Commit 1658300 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1658300 ]\n\nLUCENE-5735: spatial PrefixTreeFacetCounter (for faceting on SpatialPrefixTrees) ",
            "date": "2015-02-09T03:25:24+0000"
        },
        {
            "id": "comment-15174094",
            "author": "David Smiley",
            "content": "After the 6x branch is cut, I'm going to delete this from the 6x branch but leave it in master.  Even though the current test passes; it's too in-progress.  I'll likely get some more time on this to finish it yet but not ATM. ",
            "date": "2016-03-01T17:51:01+0000"
        },
        {
            "id": "comment-15180018",
            "author": "Michael McCandless",
            "content": "David Smiley you can remove this now from both 6.0.x and 6.x branches? ",
            "date": "2016-03-04T15:32:07+0000"
        },
        {
            "id": "comment-15180040",
            "author": "ASF subversion and git services",
            "content": "Commit 0b15fd86364dbafe08abc2939d54749e69bca23f in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0b15fd8 ]\n\nLUCENE-5735: remove NumberRangePrefixTreeStrategy.calcFacets from 6x for now ",
            "date": "2016-03-04T15:51:01+0000"
        },
        {
            "id": "comment-15180045",
            "author": "ASF subversion and git services",
            "content": "Commit 239eb2400754ac5d31ee11f44e38567623ec8557 in lucene-solr's branch refs/heads/branch_6_0 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=239eb24 ]\n\nLUCENE-5735: remove NumberRangePrefixTreeStrategy.calcFacets from 6x for now\n(cherry picked from commit 0b15fd8) ",
            "date": "2016-03-04T15:51:51+0000"
        },
        {
            "id": "comment-16574125",
            "author": "Gavin",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "date": "2018-08-09T01:01:32+0000"
        }
    ]
}