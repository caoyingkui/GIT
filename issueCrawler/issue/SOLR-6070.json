{
    "id": "SOLR-6070",
    "title": "Cannot use multiple highlighting components in a single solrconfig",
    "details": {
        "affect_versions": "4.7.2,                                            4.8",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I'm trying to use both the PostingsHighlighter and the FastVectorHighlighter in the same solrconfig (selection driven by different request handlers), but once I define 2 search components in the config, it always picks the Postings Highlighter (even if I never reference it in any request handler).\n\nI think the culprit is some specific code in SolrCore.loadSearchComponents(), which overwrites the \"highlighting\" component with the contents of the \"postingshighlight\" component - so the components map has 2 entries, but they both point to the same highlighting class (the PostingsHighlighter).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Elaine Cario",
            "id": "comment-13996766",
            "date": "2014-05-13T18:46:06+0000",
            "content": "If I commented out the code in question, it all worked fine.  Was going to submit a patch, but noted there is some complexity around handling the hard-coded internal COMPONENT_NAME, which is static, so patch is delayed while I work through that (unless of course someone who is more familiar than me can work through that - this is my first attempt at changing Solr!). "
        },
        {
            "author": "Luc Vanlerberghe",
            "id": "comment-14358957",
            "date": "2015-03-12T16:50:40+0000",
            "content": "I also tried using different highlighters for two different requestHandlers.\n\nIt turns out that as soon as a HighlightComponent is defined in the solrConfig.xml it is automatically also used as the default HighlightComponent.\ni.e: If you define a highlight component as a searchComponent with name \"customHighlighter\", it will automatically be used for the name \"hightlight\" as well.\nA workaround is to define the default highlighter explicitly after your definition with the default \"highlight\" name like this:\n\n  <searchComponent class=\"solr.HighlightComponent\" name=\"highlight\"/>\n\n\n\nThe culprit is indeed in the loadSearchComponents method in SolrCore.java which special cases components that are instanceof HighlightComponent to automatically register using the \"highlight\" name as well.\n\n\n    for (String name : searchComponents.keySet()) {\n      if (searchComponents.isLoaded(name) && searchComponents.get(name) instanceof HighlightComponent) {\n        if (!HighlightComponent.COMPONENT_NAME.equals(name)) {\n          searchComponents.put(HighlightComponent.COMPONENT_NAME, searchComponents.getRegistry().get(name));\n        }\n        break;\n      }\n    }\n\n\n\nThis code was introduced as part of SOLR-1696 probably to maintain backwards compatibility and still persists today (see the commits for SOLR-7073 where it was updated but not removed)\n\nI would be strongly in favor of removing this special case for HighlighterComponent (perhaps depending on the luceneMatchVersion of the solrconfig.xml file)\nAs a minimum, it should be mentioned in the docs for solrconfig.xml somewhere "
        },
        {
            "author": "David Smiley",
            "id": "comment-16082298",
            "date": "2017-07-11T14:38:33+0000",
            "content": "I'm closing this as Won't-Fix.  I think the UnifiedHighlighter addresses the underlying need here, even though you still can't have multiple highlight components. "
        }
    ]
}