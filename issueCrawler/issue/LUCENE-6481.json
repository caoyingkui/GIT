{
    "id": "LUCENE-6481",
    "title": "Improve GeoPointField type to only visit high precision boundary terms",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "Current GeoPointField LUCENE-6450  computes a set of ranges along the space-filling curve that represent a provided bounding box.  This determines which terms to visit in the terms dictionary and which to skip. This is suboptimal for large bounding boxes as we may end up visiting all terms (which could be quite large). \n\nThis incremental improvement is to improve GeoPointField to only visit high precision terms in boundary ranges and use the postings list for ranges that are completely within the target bounding box.\n\nA separate improvement is to switch over to auto-prefix and build an Automaton representing the bounding box.  That can be tracked in a separate issue.",
    "attachments": {
        "LUCENE-6481.patch": "https://issues.apache.org/jira/secure/attachment/12732676/LUCENE-6481.patch",
        "LUCENE-6481_WIP.patch": "https://issues.apache.org/jira/secure/attachment/12732671/LUCENE-6481_WIP.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14542657",
            "author": "Nicholas Knize",
            "date": "2015-05-13T20:34:51+0000",
            "content": "First cut WIP patch. LuceneUtil benchmark shows false negatives, though, so this is definitely not ready. So far I've been unable to reproduce the false negatives...I put it here for iterating improvements.\n\nGeoPointField\n\nIndex Time:  640.24 sec\nIndex Size: 4.4G\nMean Query Time:  0.02 sec "
        },
        {
            "id": "comment-14542739",
            "author": "Michael McCandless",
            "date": "2015-05-13T21:13:12+0000",
            "content": "New patch, starting from Nicholas Knize's and then folding in the evilish random test I added for LUCENE-6477 ... maybe this can help debug why there are false negatives?\n\nE.g. with this patch when I run:\n\n\nant test -Dtestcase=TestGeoPointQuery -Dtestmethod=testRandomTiny -Dtests.seed=F1E43F53709BFF82 -Dtests.verbose=true\n\n\n\nIt fails with this:\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomTiny -Dtests.seed=F1E43F53709BFF82 -Dtests.locale=en_US -Dtests.timezone=Africa/Lome -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 2.91s | TestGeoPointQuery.testRandomTiny <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: id=0 docID=0 lat=-27.180279388889545 lon=-167.14191331870592 expected true but got: false deleted?=false\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F1E43F53709BFF82:B8A3E1152EBAC72E]:0)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.verify(TestGeoPointQuery.java:301)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.doTestRandom(TestGeoPointQuery.java:203)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.testRandomTiny(TestGeoPointQuery.java:125)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nThe test case should be easy-ish to debug: it only indexes at most a few 10s of points... "
        },
        {
            "id": "comment-14543099",
            "author": "Nicholas Knize",
            "date": "2015-05-14T02:31:55+0000",
            "content": "The test had the lat and lon ordering incorrect for both GeoPointFieldType and the GeoPointInBBoxQuery. I've attached a new patch with the correction.  \n\ntestRandomTiny passes but there is one failure in testRandom with the following:\n\nant test -Dtestcase=TestGeoPointQuery -Dtestmethod=testRandom -Dtests.seed=F1E43F53709BFF82 -Dtests.verbose=true\n\n\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandom -Dtests.seed=F1E43F53709BFF82 -Dtests.slow=true -Dtests.locale=en_US -Dtests.timezone=Africa/Lome -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 1.54s | TestGeoPointQuery.testRandom <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: id=632 docID=613 lat=46.19240875459866 lon=143.92476891121902 expected true but got: false deleted?=false\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F1E43F53709BFF82:83A81A5CC1FB49F1]:0)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.verify(TestGeoPointQuery.java:302)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.doTestRandom(TestGeoPointQuery.java:204)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.testRandom(TestGeoPointQuery.java:130)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nThis should be enough to debug the issue. I expect to have a new patch sometime tomorrow or before weeks end. "
        },
        {
            "id": "comment-14543767",
            "author": "Michael McCandless",
            "date": "2015-05-14T15:02:50+0000",
            "content": "The test had the lat and lon ordering incorrect for both GeoPointFieldType and the GeoPointInBBoxQuery.\n\nOh, woops   Thanks for fixing1 "
        },
        {
            "id": "comment-14544113",
            "author": "Nicholas Knize",
            "date": "2015-05-14T17:54:36+0000",
            "content": "Minor patch update that adds geodesic to geodetic projection / reprojection methods to GeoUtils. "
        },
        {
            "id": "comment-14556942",
            "author": "Nicholas Knize",
            "date": "2015-05-22T22:38:00+0000",
            "content": "Updated patch to fix false negatives. This now improves performance of LUCENE-6450 to 0.02 sec / query by using the postings list instead of visiting every term. "
        },
        {
            "id": "comment-14556943",
            "author": "Nicholas Knize",
            "date": "2015-05-22T22:39:30+0000",
            "content": "This patch is ready to go. In fact, this performance improvement should supersede the existing patch in LUCENE-6450. "
        },
        {
            "id": "comment-14557255",
            "author": "Michael McCandless",
            "date": "2015-05-23T10:04:09+0000",
            "content": "Ooh, awesome progress!  I'll look in more detail, but: I applied the patch and hit this test failure:\n\n\nant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testBBoxQuery -Dtests.seed=FC153607634373BA -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=es -Dtests.timezone=Asia/Jerusalem -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n   [junit4] Started J0 PID(14260@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testBBoxQuery -Dtests.seed=FC153607634373BA -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=es -Dtests.timezone=Asia/Jerusalem -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.09s | TestGeoPointQuery.testBBoxQuery <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: GeoBoundingBoxQuery failed expected:<1> but was:<2>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([FC153607634373BA:5CE7EC6FB0DC9159]:0)\n   [junit4]    > \tat org.apache.lucene.search.TestGeoPointQuery.testBBoxQuery(TestGeoPointQuery.java:113)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /l/nick/lucene/build/sandbox/test/J0/temp/lucene.search.TestGeoPointQuery FC153607634373BA-001\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene50): {geoField=PostingsFormat(name=MockRandom)}, docValues:{}, sim=DefaultSimilarity, locale=es, timezone=Asia/Jerusalem\n   [junit4]   2> NOTE: Linux 3.13.0-46-generic amd64/Oracle Corporation 1.8.0_40 (64-bit)/cpus=8,threads=1,free=385990872,total=504889344\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoPointQuery]\n   [junit4] Completed [1/1] in 0.48s, 1 test, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-14559177",
            "author": "Nicholas Knize",
            "date": "2015-05-26T14:31:55+0000",
            "content": "Thanks Mike! Not sure how I missed my own test.   Trivial fix though, new patch added and all tests are passing on my end. Next iteration ready for review. This should be ready for sandbox commit blessings. "
        },
        {
            "id": "comment-14559269",
            "author": "Michael McCandless",
            "date": "2015-05-26T15:41:11+0000",
            "content": "Thanks Nicholas Knize, tests pass for me now, and I ran the same \"bboxes around London, UK\" perf test and this is much faster than before (= LUCENE-6450): I now see ~17.8 msec avg per query (~2X faster than GeoHashPrefixTree I think).\n\nI'll have a closer look at the patch ... I really want to make a visualization here just like the BKD tree ones (https://plus.google.com/+MichaelMcCandless/posts/Daj9FgYPdtv) to see how the morton-shapes \"work\" in filling in a polygon...\n\nI think there are fun things we can explore (future!) to speed things up further, e.g. if we also index lat/lon into doc values, then we can use that for filtering, freeing us to also use prefix terms on boundary shapes, and also maybe freeing us to use encodings like Hilbert curves which should give better locality / able to use prefix terms more frequently since you would no longer need a fast decode from term -> lat/lon.  But, it would use more disk space... we can also integrate with geo3d so we get shape intersection for faster polygon querying (now it must filter every point?).  Later! "
        },
        {
            "id": "comment-14559294",
            "author": "Michael McCandless",
            "date": "2015-05-26T16:01:44+0000",
            "content": "I was curious about the polygon query performance, so I tweaked the \"bboxes around London, UK\" benchmark to just use a polygon query instead (with 5 points, first and last are the same to the polygon is close), and surprisingly the performance is only a bit slower than the bbox case (19.1 msec vs 17.8 msec) ... I expected much slower because in the polygon case we cannot use the prefix terms, I think? "
        },
        {
            "id": "comment-14559648",
            "author": "Nicholas Knize",
            "date": "2015-05-26T19:11:32+0000",
            "content": "You can use the postings when the cell is wholly contained within the polygon, which wasn't in that last patch.  New patch attached to include this logic.  \n\nBoundary cells are still computed as they relate to the bbox. This could be improved by computing boundary cells as they relate to the shape as long as computing the existence of an intersection of the bbox and shape is fast - this is usually the Achilles heel of spatial relations. "
        },
        {
            "id": "comment-14559677",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T19:25:15+0000",
            "content": "Commit 1681820 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681820 ]\n\nLUCENE-6481: make branch "
        },
        {
            "id": "comment-14559685",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T19:28:07+0000",
            "content": "Commit 1681821 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681821 ]\n\nLUCENE-6481: commit latest patch "
        },
        {
            "id": "comment-14559687",
            "author": "Michael McCandless",
            "date": "2015-05-26T19:29:30+0000",
            "content": "I made a branch so we can iterate a bit: https://svn.apache.org/repos/asf/lucene/dev/branches/LUCENE-6481\n\nI'll make some small fixes to satisfy \"ant precommit\", and fold some of the improvements to the random test from LUCENE-6477 "
        },
        {
            "id": "comment-14559710",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T19:38:16+0000",
            "content": "Commit 1681827 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681827 ]\n\nLUCENE-6481: woops "
        },
        {
            "id": "comment-14559722",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T19:45:44+0000",
            "content": "Commit 1681828 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681828 ]\n\nLUCENE-6481: fix some precommit issues "
        },
        {
            "id": "comment-14559762",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T20:07:14+0000",
            "content": "Commit 1681836 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681836 ]\n\nLUCENE-6481: fix some ant precommit issues; improve test (use threads; randomly test poly query too), but currently disabled; add validation of the incoming lat/lon to poly query; improve query toStrings a bit "
        },
        {
            "id": "comment-14559786",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T20:17:31+0000",
            "content": "Commit 1681842 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681842 ]\n\nLUCENE-6481: make explicit separate methods for the lat vs lon cases "
        },
        {
            "id": "comment-14559805",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T20:29:56+0000",
            "content": "Commit 1681849 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681849 ]\n\nLUCENE-6481: enable threads and random poly query in test "
        },
        {
            "id": "comment-14559808",
            "author": "Michael McCandless",
            "date": "2015-05-26T20:32:22+0000",
            "content": "I made test a bit more evil (use threads, sometimes randomly do poly query), but I hit this:\n\n\n   [junit4] Started J0 PID(12760@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4] OK      0.04s | TestGeoPointQuery.testBBoxQuery\n   [junit4]   2> de maig 26, 2015 3:30:16 PM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T0,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.OutOfMemoryError: Java heap space\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([E57ABD1CCC7F4388]:0)\n   [junit4]   2> \tat java.util.LinkedList.toArray(LinkedList.java:1050)\n   [junit4]   2> \tat java.util.List.sort(List.java:477)\n   [junit4]   2> \tat java.util.Collections.sort(Collections.java:141)\n   [junit4]   2> \tat org.apache.lucene.search.GeoPointInBBoxQuery$GeoBBoxTermsEnum.<init>(GeoPointInBBoxQuery.java:157)\n   [junit4]   2> \tat org.apache.lucene.search.GeoPointInBBoxQuery.getTermsEnum(GeoPointInBBoxQuery.java:86)\n   [junit4]   2> \tat org.apache.lucene.search.MultiTermQuery.getTermsEnum(MultiTermQuery.java:345)\n   [junit4]   2> \tat org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.rewrite(MultiTermQueryConstantScoreWrapper.java:146)\n   [junit4]   2> \tat org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.scorer(MultiTermQueryConstantScoreWrapper.java:212)\n   [junit4]   2> \tat org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.scorer(LRUQueryCache.java:585)\n   [junit4]   2> \tat org.apache.lucene.search.Weight.bulkScorer(Weight.java:137)\n   [junit4]   2> \tat org.apache.lucene.search.AssertingWeight.bulkScorer(AssertingWeight.java:72)\n   [junit4]   2> \tat org.apache.lucene.search.AssertingWeight.bulkScorer(AssertingWeight.java:72)\n   [junit4]   2> \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:560)\n   [junit4]   2> \tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:93)\n   [junit4]   2> \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:367)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:337)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:265)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomTiny -Dtests.seed=E57ABD1CCC7F4388 -Dtests.locale=ca_ES -Dtests.timezone=America/Rankin_Inlet -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   49.3s | TestGeoPointQuery.testRandomTiny <<<\n\n\n\nIt's curious because the testRandomTiny only indexes a few 10s of points... "
        },
        {
            "id": "comment-14559820",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T20:40:00+0000",
            "content": "Commit 1681853 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681853 ]\n\nLUCENE-6481: add back lost GeoPointInPolygonQuery.isWithin override "
        },
        {
            "id": "comment-14559827",
            "author": "ASF subversion and git services",
            "date": "2015-05-26T20:43:28+0000",
            "content": "Commit 1681855 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681855 ]\n\nLUCENE-6481: go back to 1 thread, no poly query, until we track down testRandomTiny failures "
        },
        {
            "id": "comment-14560684",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T09:33:53+0000",
            "content": "Commit 1681941 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681941 ]\n\nLUCENE-6481: sometimes use smallish bbox for random test "
        },
        {
            "id": "comment-14560690",
            "author": "Michael McCandless",
            "date": "2015-05-27T09:37:15+0000",
            "content": "I committed a small improvement to the test, to sometimes test on a smallish random sized bbox, and it hits this new failure:\n\n\n   [junit4] Started J0 PID(15031@localhost).\n   [junit4] Suite: org.apache.lucene.search.TestGeoPointQuery\n   [junit4]   1> smallBBox=true\n   [junit4]   1> T0: iter=1 id=3 docID=3 lat=-90.2957562284163 lon=-179.83102465432302 (bbox: lat=-90.84003988710097 TO -89.86198542441215 lon=-180.5339936365967 TO -179.31722107698667) expected true but got: false deleted?=false query=GeoPointInBBoxQuery: field=geoField: Lower Left: [-180.5339936365967,-90.84003988710097] Upper Right: [-179.31722107698667,-89.86198542441215]\n   [junit4]   2> ??? 27, 2015 12:37:04 PM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T0,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: wrong result\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([5]:0)\n   [junit4]   2> \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:372)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:271)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomTiny -Dtests.seed=5 -Dtests.locale=sr_ME -Dtests.timezone=Europe/Vilnius -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.09s | TestGeoPointQuery.testRandomTiny <<<\n\n\n\nI'm not sure why testRandomTiny is hitting all these problems! "
        },
        {
            "id": "comment-14560693",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T09:39:03+0000",
            "content": "Commit 1681942 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681942 ]\n\nLUCENE-6481: add nocommit "
        },
        {
            "id": "comment-14560702",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T09:46:39+0000",
            "content": "Commit 1681943 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1681943 ]\n\nLUCENE-6481: woops "
        },
        {
            "id": "comment-14560704",
            "author": "Michael McCandless",
            "date": "2015-05-27T09:47:18+0000",
            "content": "I committed a small improvement to the test, to sometimes test on a smallish random sized bbox, and it hits this new failure:\n\nWoops, my bad: test bug.  I committed a fix... "
        },
        {
            "id": "comment-14560985",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T13:48:50+0000",
            "content": "Commit 1682029 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1682029 ]\n\nLUCENE-6481: validate lat/lon passed to the queries "
        },
        {
            "id": "comment-14561044",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T14:14:53+0000",
            "content": "Commit 1682036 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1682036 ]\n\nLUCENE-6481: restrict random test cases to 'smallish' bbox; switch static factory for polygon query to ctor "
        },
        {
            "id": "comment-14561052",
            "author": "Michael McCandless",
            "date": "2015-05-27T14:22:36+0000",
            "content": "I fixed the randomized test case to only test a \"smallish\" global bbox (up to +/- 1.5 in lat and lon directions)... when testing the full space the test runs very very slowly, even testRandomTiny, because it can require 100s of K terms ... I'm not quite sure why  but the query classes do advertise that they should be used on smallish rectangles.\n\nAlso, the test fails because of boundary cases:\n\nT0: iter=57 id=6819 docID=6723 lat=-81.12143028547105 lon=-168.98618510239544 (bbox: lat=-81.22948018485512 TO -80.9313958433031 lon=-168.98618505380117 TO -168.77958782241174) expected true but got: false deleted?=false query=GeoPointInBBoxQuery: field=geoField: Lower Left: [-168.98618505380117,-81.22948018485512] Upper Right: [-168.77958782241174,-80.9313958433031]\nm\u00e1j 27, 2015 2:16:52 PM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\nWARNING: Uncaught exception in thread: Thread[T0,5,TGRP-TestGeoPointQuery]\njava.lang.AssertionError: wrong result\n\tat __randomizedtesting.SeedInfo.seed([4B5245DED09AE592]:0)\n\tat org.junit.Assert.fail(Assert.java:93)\n\tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:380)\n\tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:279)\n\n\n\nIt's odd because in GeoUtils#bboxContains, we do try to take the quantization into account ... "
        },
        {
            "id": "comment-14561056",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T14:25:01+0000",
            "content": "Commit 1682043 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1682043 ]\n\nLUCENE-6481: add nocommit about query slowness for large bboxes; improve javadocs "
        },
        {
            "id": "comment-14563502",
            "author": "Nicholas Knize",
            "date": "2015-05-28T19:11:23+0000",
            "content": "Updates:\n\n\n\tcache ranges across segments\n\tonly add ranges that are either within or cross the boundary of the bbox or polygon\n\n\n\nIn exotic cases this latter fix drastically reduces the number of ranges added since it avoids unnecessary exterior cells that only \"touch\" the boundary. The downside is since the random test doesn't currently use the TOLERANCE criteria it occasionally fails due computation error at 1e-7 precision. This can be tweaked in the next patch. "
        },
        {
            "id": "comment-14563506",
            "author": "Nicholas Knize",
            "date": "2015-05-28T19:14:00+0000",
            "content": "Note: this is a diff off the LUCENE-6481 branch. "
        },
        {
            "id": "comment-14563507",
            "author": "Nicholas Knize",
            "date": "2015-05-28T19:14:10+0000",
            "content": "Note: this is a diff off the LUCENE-6481 branch. "
        },
        {
            "id": "comment-14563508",
            "author": "Nicholas Knize",
            "date": "2015-05-28T19:14:13+0000",
            "content": "Note: this is a diff off the LUCENE-6481 branch. "
        },
        {
            "id": "comment-14564784",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T13:18:05+0000",
            "content": "Commit 1682453 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1682453 ]\n\nLUCENE-6481: Nick's latest patch: create range terms once per query, not per segment; check cell intersection against polygon not its bbox for more restrictive recursing "
        },
        {
            "id": "comment-14573429",
            "author": "ASF subversion and git services",
            "date": "2015-06-04T19:24:08+0000",
            "content": "Commit 1683615 from Michael McCandless in branch 'dev/branches/LUCENE-6481'\n[ https://svn.apache.org/r1683615 ]\n\nLUCENE-6481: merge trunk "
        },
        {
            "id": "comment-14577691",
            "author": "Nicholas Knize",
            "date": "2015-06-08T19:28:20+0000",
            "content": "For some reason a diff with the latest branch introduced a lot of duplicate changes so this is the latest patch off trunk.\n\nThis patch resolves all no commits, including:\n\n\n\trandom polygon testing\n\tthread safety testing\n\tadded tolerance to expectation check in random test\n\tbeast tested w/ 500 iterations\n\n "
        },
        {
            "id": "comment-14577835",
            "author": "Michael McCandless",
            "date": "2015-06-08T20:51:23+0000",
            "content": "For some reason a diff with the latest branch introduced a lot of duplicate changes\n\nOh, sorry ... the branch was supposed to make things easier.  But a trunk patch is fine too.\n\nI like testPacManPolyQuery!\n\nWe can remove that NOTE in GeoPointField javadocs right?\n\nElse, this looks great, I'll commit soon!   Thanks Nicholas Knize. "
        },
        {
            "id": "comment-14577886",
            "author": "ASF subversion and git services",
            "date": "2015-06-08T21:35:50+0000",
            "content": "Commit 1684285 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1684285 ]\n\nLUCENE-6481: add simple API to index geo lat/lon points and search by bounding box or polygon "
        },
        {
            "id": "comment-14577906",
            "author": "ASF subversion and git services",
            "date": "2015-06-08T21:48:56+0000",
            "content": "Commit 1684286 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684286 ]\n\nLUCENE-6481: add simple API to index geo lat/lon points and search by bounding box or polygon "
        },
        {
            "id": "comment-14577907",
            "author": "Michael McCandless",
            "date": "2015-06-08T21:49:22+0000",
            "content": "Thanks Nicholas Knize! "
        },
        {
            "id": "comment-14713321",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:26+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}