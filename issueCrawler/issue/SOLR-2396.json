{
    "id": "SOLR-2396",
    "title": "add [ICU]CollationField",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In LUCENE-2551 collation support was changed to use byte[] keys.\n\nPreviously it encoded sort keys with IndexableBinaryString into char[],\nbut this is wasteful with regards to RAM and disk when terms can be byte.\n\nA better solution would be [ICU]CollationFieldTypes, as this would also allow locale-sensitive range queries.",
    "attachments": {
        "SOLR-2396.patch": "https://issues.apache.org/jira/secure/attachment/12472194/SOLR-2396.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13000352",
            "date": "2011-02-28T15:57:52+0000",
            "content": "patch using the Tokenizer factories, the factory returns KeywordTokenizer with the appropriate AttributeFactory. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13000517",
            "date": "2011-02-28T21:22:07+0000",
            "content": "updated patch, instead adding CollatedField and ICUCollatedField.\n\nthe trick was trying to get this thing to \"use\" my internal analyzer... setting TOKENIZED and changing SolrQueryParser to check isTokenized() instead of 'instanceof TextField' got things going.\n\nstill needs unit tests but locale-sensitive range queries etc are working here. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13000520",
            "date": "2011-02-28T21:23:31+0000",
            "content": "FYI depending on how LUCENE-2943 is resolved, I'll adjust the patch for the ICU \ncase to ensure all the operations are thread-safe... right now its not. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13000937",
            "date": "2011-03-01T16:21:04+0000",
            "content": "Updated patch, with unit tests for the CollationField and ICUCollationField.\n\nI think this is close. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13009518",
            "date": "2011-03-22T02:29:00+0000",
            "content": "editing summary/description to fit "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13009519",
            "date": "2011-03-22T02:30:40+0000",
            "content": "now that the lucene issues are resolved, I think this patch is really close.\n\nIt could use a review though from someone who knows the fieldtype stuff better.  "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13009627",
            "date": "2011-03-22T12:38:49+0000",
            "content": "A rough idea: It seems that ICU Collator Keys are null-terminated. Would it be possible to allow for a key that contained the original String? Something like [collator-bytes][null][term-as-utf-8]? This embedding would make collator-ordered faceting with multiple terms/document much easier. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13009630",
            "date": "2011-03-22T12:55:02+0000",
            "content": "A rough idea: It seems that ICU Collator Keys are null-terminated. \n\nThis isn't always the case, at least at query-time for example if you are using a bound mode (http://icu-project.org/apiref/icu4j/com/ibm/icu/text/CollationKey.BoundMode.html) I think for the UPPER_LONG case it does not exist. \n\nBut, in any case I think we can't rely upon the fact that ICU might currently avoid zero bytes: this isn't really specified anywhere and just an optional impl detail (http://unicode.org/reports/tr10/#Avoiding_Zero_Bytes) "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13009665",
            "date": "2011-03-22T14:42:20+0000",
            "content": "The JavaDoc for CollationKey is very explicit about the null-termination, but I do not know enough about the inner workings to judge whether a concatenation would work in all cases. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13009670",
            "date": "2011-03-22T15:07:18+0000",
            "content": "Well, its something we could be consider?, but on another issue really as its not solr-related... this one just exposes the lucene functionality from LUCENE-2551 and deprecates the old support.\n\nBut really, this is going to be wasteful in most cases versus IDENTICAL strength (which will basically give someone the same functionality from a sort/range-query perspective). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13011646",
            "date": "2011-03-26T15:35:17+0000",
            "content": "I'd like to commit this in a few days if no one objects. The existing encoding is wasteful and I would like to cut solr over to this more efficient one (and enable locale-sensitive range queries).\n\nWe could open future issues for any additional features such as specifying the icu locale as BCP47, etc, etc. (this just implements the lucene 3.1 functionality more efficiently)  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012549",
            "date": "2011-03-29T16:37:35+0000",
            "content": "Committed revision 1086637. "
        }
    ]
}