{
    "id": "SOLR-5555",
    "title": "CloudSolrServer need not declare to throw MalformedURLException",
    "details": {
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently CloudSolrServer declares to throw MalformedURLException for some of its constructors. This does not seem necessary.\n\nDetails based on looking through Solr 4.6 release code:\n\nCloudSolrServer has the following constructor that declares a checked exception MalformedURLException..\n\n \n public CloudSolrServer(String zkHost) throws MalformedURLException {\n \n      this.zkHost = zkHost;\n \n      this.myClient = HttpClientUtil.createClient(null);\n \n      this.lbServer = new LBHttpSolrServer(myClient);\n \n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n \n      this.lbServer.setParser(new BinaryResponseParser());\n \n      this.updatesToLeaders = true;\n \n      shutdownLBHttpSolrServer = true;\n \n  }\n \n\n\n\nThe only thing that seemed capable of throwing MalformedURLException seems to be LBHttpSolrServer\u2019s constructor:\n\n\n  public LBHttpSolrServer(HttpClient httpClient, String... solrServerUrl)\n          throws MalformedURLException {\n    this(httpClient, new BinaryResponseParser(), solrServerUrl);\n  }\n\n\n\nwhich calls ..\n\n\n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s)); \n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n\n\nwhich calls ..\n\n\nprotected HttpSolrServer makeServer(String server) throws MalformedURLException {\n    HttpSolrServer s = new HttpSolrServer(server, httpClient, parser);\n    if (requestWriter != null) {\n      s.setRequestWriter(requestWriter);\n    }\n    if (queryParams != null) {\n      s.setQueryParams(queryParams);\n    }\n    return s;\n  }\n\n\n\nNote that makeServer(String server) above does not need to throw MalformedURLException.. sine the only thing that seems capable of throwing MalformedURLException is HttpSolrServer\u2019s constructor (which does not):\n\n\npublic HttpSolrServer(String baseURL, HttpClient client, ResponseParser parser) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 128);\n      params.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 32);\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      httpClient =  HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n\n\nI see nothing above that\u2019d throw MalformedURLException. It is throwing a RuntimeException when the baseUrl does not match certain pattern, may be that was intended to be a MalformedURLException.\n\nIt seems like an error or oversight that CloudSolrServer declares to throw MalformedURLException for some of its constructors. \n\nThis could be fixed by making LBHttpSolrServer not declare the MalformedURLException, and thus other callers to it do not need to do so.",
    "attachments": {
        "SOLR-5555.patch": "https://issues.apache.org/jira/secure/attachment/12618621/SOLR-5555.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alan Woodward",
            "id": "comment-13847630",
            "date": "2013-12-13T16:32:24+0000",
            "content": "Here's a simple patch. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13847668",
            "date": "2013-12-13T17:15:23+0000",
            "content": "Updated patch with a better CHANGES entry and a couple of compilation fixes.  Will commit in a bit. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13847846",
            "date": "2013-12-13T19:47:07+0000",
            "content": "Commit 1550824 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1550824 ]\n\nSOLR-5555: CloudSolrServer and LBHttpSolrServer shouldn't throw MUE from constructors "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13847849",
            "date": "2013-12-13T19:50:38+0000",
            "content": "Commit 1550826 from Alan Woodward in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1550826 ]\n\nSOLR-5555: CloudSolrServer and LBHttpSolrServer shouldn't throw MUE from constructors "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13847850",
            "date": "2013-12-13T19:51:25+0000",
            "content": "Thanks Sushil! "
        }
    ]
}