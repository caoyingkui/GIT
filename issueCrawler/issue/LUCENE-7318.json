{
    "id": "LUCENE-7318",
    "title": "Graduate StandardAnalyzer out of analyzers module into core",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.2",
            "6.2.1",
            "7.0"
        ],
        "priority": "Blocker",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Spinoff from LUCENE-7314:\n\nStandardAnalyzer has progressed substantially since we broke out the analyzers module ... it now follows a real Unicode standard (UAX #29 Unicode Text Segmentation).  It's also much faster than it used to be, since it switched to JFlex a while back.  Many bug fixes, etc.\n\nI think it would make a good default for most Lucene users, and we should graduate it from the analyzers module into core, and make it the default for IndexWriter.\n\nIt's really quite crazy that users must go digging in the analyzers module to get started with Lucene ... we don't make them dig through the codecs module to find a good default codec ...",
    "attachments": {
        "LUCENE-7318.patch": "https://issues.apache.org/jira/secure/attachment/12809706/LUCENE-7318.patch",
        "LUCENE-7318-backwards.patch": "https://issues.apache.org/jira/secure/attachment/12827934/LUCENE-7318-backwards.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15320432",
            "author": "Robert Muir",
            "date": "2016-06-08T12:14:18+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15326506",
            "author": "Michael McCandless",
            "date": "2016-06-12T16:09:06+0000",
            "content": "Rote patch, moving StandardAnalyzer/Tokenizer, and the utility\nclasses it uses, to core's oal.analysis module.\n\nI left ClassicAnalyzer and UAX29URLEmailTokenizer in the\nanalysis module.\n\n\"ant test\" passes but precommit is still angry about some javadocs\n... I'll iterate.\n\nThe one non-rote change I did was to move the\nENGLISH_STOP_WORDS_SET from StopAnalyzer (still in analyzers\nmodule) to StandardAnalyzer.\n\nI also added \"jflex\" target to core's build.xml, to regenerate the\ntokenizer.\n\nI left ClassicAnalyzer, and the factories, in the analysis/common\nmodule. "
        },
        {
            "id": "comment-15330754",
            "author": "Steve Rowe",
            "date": "2016-06-14T22:20:09+0000",
            "content": "Mike, you marked this as fixed in 6.2, but AFAICT you didn't commit to branch_6x? "
        },
        {
            "id": "comment-15330797",
            "author": "Michael McCandless",
            "date": "2016-06-14T22:42:04+0000",
            "content": "Woops, thanks for catching Steve Rowe! "
        },
        {
            "id": "comment-15330809",
            "author": "ASF subversion and git services",
            "date": "2016-06-14T22:51:17+0000",
            "content": "Commit ba922148307248893bf70d02b28efdec9882f348 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ba92214 ]\n\nLUCENE-7318: graduate StandardAnalyzer and make it the default for IndexWriterConfig "
        },
        {
            "id": "comment-15439004",
            "author": "Michael McCandless",
            "date": "2016-08-26T13:59:42+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        },
        {
            "id": "comment-15442036",
            "author": "David Smiley",
            "date": "2016-08-27T18:37:52+0000",
            "content": "After upgrading an app to 6.2, I noticed that CharArraySet has moved both to a different module and to a different different package.  That happened in this issue.  CharArraySet is not marked lucene.experimental/internal.  I think the CHANGES.txt upgrade nodes could be modified, even though 6.2 is already released?  Also... I think it was worth mentioning in the summary/dialog here. "
        },
        {
            "id": "comment-15451731",
            "author": "Uwe Schindler",
            "date": "2016-08-31T09:31:21+0000",
            "content": "Same issue here: it also affects some of the most important tokenfilters like StopFilter, LowerCaseFilter and their superclasses. This is a really hard and unexpected change, because in a minor update we moved some of the most important classes to other packages.\n\nAt least we should have kept a \"deprecated\" subclass at the old place. This caused lots of trouble for my clients  There was also a question on java-user a minute ago.\n\nI'd suggest to add a 6.2.1 release with the classes moved back at their old package, or alternatively a deprecated subclass without additional functionality. This change breaks binary compatibility of any analysis plugin (and there are tons out there). "
        },
        {
            "id": "comment-15451733",
            "author": "Uwe Schindler",
            "date": "2016-08-31T09:31:59+0000",
            "content": "I reopen this for discussion and maybe a fix in next release (rename classes back to their original name). "
        },
        {
            "id": "comment-15451745",
            "author": "Markus Jelsma",
            "date": "2016-08-31T09:38:50+0000",
            "content": "Yes, i get some cannot fine symbol messages too when compiling:\n\n\n\tLowerCaseFilter\n\tStopFilter\n\tCharArraySet\n\tStopwordAnalyzerBase\n\tCharacterUtils\n\tTokenStreamComponents\n\tWordListLoader\n\n\n\nAnd probably more since compiling just stops after a few errors. "
        },
        {
            "id": "comment-15451754",
            "author": "Markus Jelsma",
            "date": "2016-08-31T09:42:37+0000",
            "content": "By the way, i'm actually fine with this change but now i just have no idea what's happening when upgrading, and this isn't mentioned as API change in CHANGES.txt. Also, this issue description also doesn't clearly state how to deal with this API change  "
        },
        {
            "id": "comment-15451884",
            "author": "Jan H\u00f8ydahl",
            "date": "2016-08-31T10:43:20+0000",
            "content": "There are changes to Solr classes also in this commit, and the need for Solr changes in a LUCENE issue should probably ring an alarm bell that there may be breaking API changes...\n+1 to adding back deprecated versions of the removed classes in 6.2.1 for 6.x "
        },
        {
            "id": "comment-15452196",
            "author": "Michael McCandless",
            "date": "2016-08-31T13:08:51+0000",
            "content": "Sorry everyone, I am +1 to put back deprecated subclasses in the original package. "
        },
        {
            "id": "comment-15452340",
            "author": "Uwe Schindler",
            "date": "2016-08-31T14:11:40+0000",
            "content": "I can look into this later this evening!\n\nIf you want to do it: you need to remove the final modifier from the TokenFilter and add it to incrementToken() to make the assert happy. Then you can subclass. The alternative is to add a wrapper filter. "
        },
        {
            "id": "comment-15452342",
            "author": "Yonik Seeley",
            "date": "2016-08-31T14:12:18+0000",
            "content": "I think it would make a good default for most Lucene users, and we should graduate it from the analyzers module into core, and make it the default for IndexWriter.\n\nThis \"StandardAnalyzer\" is specific to English, as it removes English stopwords.\nThat seems to be an odd choice now for a few reasons:\n\n\tIt was argued in the past (rather vehemently) that Solr should not prefer english in it's default \"text\" field\n\tAFAIK, removing stopwords is no longer considered best practice.\n\n\n\nGiven that removal of english stopwords is the only thing that really makes this analyzer english-centric (and given the negative impact that can have on other languages), it seems like the stopword filter should be removed from StandardAnalyzer. "
        },
        {
            "id": "comment-15452346",
            "author": "Uwe Schindler",
            "date": "2016-08-31T14:13:44+0000",
            "content": "Yonik: good idea. This would at least allow to move back StopFilter and all its super classes back from where they came from! "
        },
        {
            "id": "comment-15468006",
            "author": "Alexandre Rafalovitch",
            "date": "2016-09-06T17:37:06+0000",
            "content": "For Filters specifically, they are now in a different package/module from their own Factories. That's kind of unusual as well. "
        },
        {
            "id": "comment-15479939",
            "author": "Uwe Schindler",
            "date": "2016-09-10T15:06:04+0000",
            "content": "As we plan to release 6.2.1 quite soon, I will for now add back the \"deprecated\" subclasses in the analyzers/common module. The decision if the StopFilter should stay in StandardAnalyzer and the whole base classes in core is a different decision and should be discussed in a separate issue. "
        },
        {
            "id": "comment-15481464",
            "author": "Uwe Schindler",
            "date": "2016-09-11T09:56:15+0000",
            "content": "I opened LUCENE-7444 for a general discussion. I looked into the code. I only see the choice of first reverting everything in this issue and start from scratch in LUCENE-7444. Unfortunately this wouldn't solve the problem for analysis plugins shipped with Solr or Elasticsearch that are affected by classname changes of some of the most important analysis components used in almost any custom analysis plugin out there. "
        },
        {
            "id": "comment-15481780",
            "author": "Michael McCandless",
            "date": "2016-09-11T13:45:42+0000",
            "content": "Hmm, why not leave StopFilter, etc., in core, and put (deprecated) subclasses in the old package names? "
        },
        {
            "id": "comment-15481802",
            "author": "Yonik Seeley",
            "date": "2016-09-11T14:03:18+0000",
            "content": "Or deprecate what was done in this issue instead. Having just one or two analysis components separated out form all the others doesn't make a lot of sense.\nExample: LowerCaseFilter and UpperCaseFilter are now in different packages and different jars?!\nSteering people toward using StopFilter by default isn't necessarily a good idea either. "
        },
        {
            "id": "comment-15481816",
            "author": "Michael McCandless",
            "date": "2016-09-11T14:14:37+0000",
            "content": "Or deprecate what was done in this issue instead\n\nI don't think we should do that: StandardAnalyzer makes a great default, now, finally.  It's based on a Unicode standard (UAX 29).\n\nExample: LowerCaseFilter and UpperCaseFilter are now in different packages and different jars?!\n\nBut I think this reflects typical usage?  UpperCaseFilter is rarely used.\n\nSteering people toward using StopFilter by default isn't necessarily a good idea either.\n\nYes, there are difficult tradeoffs if you filter stop words or not, but for better or worse, many apps do in fact need to filter stop words, and I think it's important we make it easy for apps to use the default analyzer (StandardAnalyzer) with stop words, and we should not remove it from core. "
        },
        {
            "id": "comment-15481905",
            "author": "Uwe Schindler",
            "date": "2016-09-11T15:15:54+0000",
            "content": "Hmm, why not leave StopFilter, etc., in core, and put (deprecated) subclasses in the old package names?\n\nI plan to do this for 6.x and 6.2.1, but I won't deprecate the duplicates for now. So I will just subclass in analyzers/common, although this is still a lot of code duplication (most classes only have ctors that need to be cloned). This would also make it consistent with the Factory classes. Those factory classes should use/instantiate the common variants.\n\nAll other discussion should be placed in LUCENE-7444. Once this is discussed and finalized, we can decide in 6.3, which classes to deprecate (if we do this at all). My personal opinion is:\n\n\tMove StandardTokenizer to core (no package name change, so no backwards layer needed)\n\tMove no-op StandardFilter to core, too, but deprecate from beginning (no package name change, so no backwards layer needed)\n\tAdd all \"original\" classes back in analyzers/common by subclassing, but don't deprecate\n\n\n\nLater-on (LUCENE-7444):\n\n\tRemove StopFilter. For first time users, the decision of Stop words or not should be simple and our recommendation: no stop words please for something thats called \"Standard\"\n\tStopFilter and all its superclasses and utility classes move back into analysis/common. I'd also suggest this for LowercaseFilter and just clone it in core as a package-private class inside oal/analysis/standard.\n\tThe CharacterUtils can stay in core (its @lucene.internal anyways), but moved completely to utils package (I have no strong opinion there)\n\n\n\nPeople that want to have stopwords can always define their own Analyzer using CustomAnalyzer. "
        },
        {
            "id": "comment-15481922",
            "author": "Uwe Schindler",
            "date": "2016-09-11T15:26:46+0000",
            "content": "Example: LowerCaseFilter and UpperCaseFilter are now in different packages and different jars?!\n\nI agree thats not how it should look like. The package structure of Lucene 4 was so great and now we are back at Lucene 1.0! Sorry, no-go for me.\n\nSteering people toward using StopFilter by default isn't necessarily a good idea either.\n\nI fully agree. As said in previous comment. Somebody who want to use a StopFilter can do this very easy using CustomAnalyzer. And thats all part of analysis/common. No need to do this in core.\n\nPeople that have no idea about \"stop words or not\" should not need to deal with it. At least, do not provide English stop words by default for something that is advertised as language neutral.\n\nP.S.: Stop words are empty by default in ES, too! (https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html) "
        },
        {
            "id": "comment-15482045",
            "author": "Michael McCandless",
            "date": "2016-09-11T17:00:08+0000",
            "content": "+1 to subclass deprecated classes back in analyzers common with the original (6.1) package names for this issue for 6.2.1, and defer stop words discussion for LUCENE-7444.  I'll reply to your stop words comments over there.\n\nThe minor code dup is fine as long as the version in analyzers/common is deprecated (gone in 7.0). "
        },
        {
            "id": "comment-15482193",
            "author": "Uwe Schindler",
            "date": "2016-09-11T18:24:26+0000",
            "content": "Here is a patch, restoring the classes in the analysis/common module! I did not deprecate anything for now (for 6.2.1) and also not for branch_6x until LUCENE-7444 is solved.\n\nI did not clone CharacterUtils. WordlistLoader was cloned completely, because you cannot subclass static classes.\n\nThe factories now create the analysis/common's variant, so they are consistent and the tests don't fail (with Mike's change, the factory tests for LowerCase and StopFilter did not even work at all!!!) "
        },
        {
            "id": "comment-15482263",
            "author": "Michael McCandless",
            "date": "2016-09-11T19:23:57+0000",
            "content": "Thanks Uwe, I'll review the patch.  But quickly on:\n\nwith Mike's change, the factory tests for LowerCase and StopFilter did not even work at all!!!\n\nI'm confused, why are tests not failing here? "
        },
        {
            "id": "comment-15482291",
            "author": "Uwe Schindler",
            "date": "2016-09-11T19:46:09+0000",
            "content": "Because the test did not check what it should! It checked that all tokenstream components have corresponding factories. As you moved them to core, the test no longer checked for factory existence, as it was not seeing the classes. Once I added it back in common, it complains because the packages of returned implementation classes mismatched. This is why the factory returns the subclass, which is also more consistent (oal.analysis.core.LowerCaseFilterFactory returns oal.analysis.core.LowerCaseFilter, not oal.analysis.LowerCaseFilter).\n\nI will post a new patch fixing 2 Solr tests soon. Running tests. "
        },
        {
            "id": "comment-15482297",
            "author": "Uwe Schindler",
            "date": "2016-09-11T19:51:23+0000",
            "content": "Patch fixing Solr tests (it actually reverts them). "
        },
        {
            "id": "comment-15483700",
            "author": "Michael McCandless",
            "date": "2016-09-12T10:02:20+0000",
            "content": "Thanks Uwe Schindler, the patch looks good.  I don't really like that the back compat classes are not deprecated, but I guess it's OK while we discuss LUCENE-7444.\n\nThere's a missing w in this comment: // class from core, but LoerCaseFilterFactory creates one from this module. "
        },
        {
            "id": "comment-15483713",
            "author": "Uwe Schindler",
            "date": "2016-09-12T10:07:29+0000",
            "content": "My plan for 6.2.1 and 6.x is to deprecate all backwards classes except StopFilter and LowercaseFilter. Those are actually used by the factory classes and don't really hurt. It also makes the javadocs easier to understand.\n\nIn master I'd like to just add the StopFilter and LowercaseFilter classes for consistency with the factory. The other (deprecated) ones will be left out in master. This is a good way to fix the package naming consistency problems and give users a good overview on all available filters when displaying the analysis/common javadocs.\n\nWhat do you think? "
        },
        {
            "id": "comment-15483724",
            "author": "Michael McCandless",
            "date": "2016-09-12T10:13:24+0000",
            "content": "+1, thanks Uwe Schindler. "
        },
        {
            "id": "comment-15484041",
            "author": "Uwe Schindler",
            "date": "2016-09-12T12:59:16+0000",
            "content": "New patch with all classes deprecated, except StopFilter and LowercaseFilter that stay at their original location for better documentation and consistency with Filter factory. Documentation for this was added.\n\nI will commit this later to 6.x and 6.2 branch, and forward-port the 2 filters to master, so we also get good documentation in master.\n\nThe remaining stuff can be discussed in the other issue, which is now unrelated. "
        },
        {
            "id": "comment-15484049",
            "author": "Uwe Schindler",
            "date": "2016-09-12T13:01:50+0000",
            "content": "I fixed the test comment locally, won't upload new patch! "
        },
        {
            "id": "comment-15484326",
            "author": "Michael McCandless",
            "date": "2016-09-12T14:47:40+0000",
            "content": "+1, thanks Uwe Schindler. "
        },
        {
            "id": "comment-15484766",
            "author": "ASF subversion and git services",
            "date": "2016-09-12T17:47:56+0000",
            "content": "Commit 89f03655e3822226097142b59126e75c89a946f4 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=89f0365 ]\n\nLUCENE-7318: Fix backwards compatibility issues around StandardAnalyzer and its components, introduced with Lucene 6.2.0. The moved classes were restored in their original packages: LowercaseFilter and StopFilter, as well as several utility classes "
        },
        {
            "id": "comment-15484773",
            "author": "ASF subversion and git services",
            "date": "2016-09-12T17:50:28+0000",
            "content": "Commit 5b3e6deb2f19e917792c1b8f4909b9c28b2e7508 in lucene-solr's branch refs/heads/branch_6_2 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5b3e6de ]\n\nLUCENE-7318: Fix backwards compatibility issues around StandardAnalyzer and its components, introduced with Lucene 6.2.0. The moved classes were restored in their original packages: LowercaseFilter and StopFilter, as well as several utility classes\n\n\n\tConflicts:\n\tlucene/CHANGES.txt\n\n "
        },
        {
            "id": "comment-15484860",
            "author": "ASF subversion and git services",
            "date": "2016-09-12T18:16:58+0000",
            "content": "Commit b39fcc12023b978c2d93a9446596729ca0e0e464 in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b39fcc1 ]\n\nLUCENE-7318: Forward port some changes (add StopFilter and LowercaseFilter at their original location) "
        },
        {
            "id": "comment-15484895",
            "author": "Uwe Schindler",
            "date": "2016-09-12T18:28:16+0000",
            "content": "Committed patch. "
        },
        {
            "id": "comment-15484898",
            "author": "Uwe Schindler",
            "date": "2016-09-12T18:29:29+0000",
            "content": "I committed to 6.x and 6.2 (including addition of deprecated classes). I also forward-ported the LowercaseFilter and StopFilter changes to master, so Javadocs of analysis/common module are consistent. "
        },
        {
            "id": "comment-15508556",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-09-21T03:03:32+0000",
            "content": "Closing after 6.2.1 release "
        }
    ]
}