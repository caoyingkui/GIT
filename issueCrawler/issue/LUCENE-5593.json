{
    "id": "LUCENE-5593",
    "title": "javadocs generation in release tasks: painfully slow",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "Something is wrong here in the way this generation works, I see some of the same javadocs being generated over and over and over again. \n\nThe current ant tasks seem to have a O(n!) runtime with respect to how many modules we have: its obnoxiously slow on a non-beast computer. There is a bug here...",
    "attachments": {
        "LUCENE-5593.patch": "https://issues.apache.org/jira/secure/attachment/12657992/LUCENE-5593.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14075368",
            "author": "Robert Muir",
            "content": "Attached is a patch ensuring javadocs are only built if they are out of date. This also ensures they are only built once for each module.\n\nToday imagine the following:\n\n\tA/\n\tB/ depends on A/\n\tC/ depends on B/\n\n\n\nwe currently build A 3 times, B twice, and C once. So we do 6 javadocs builds. With the patch we only build A once, B once, and C once. ",
            "date": "2014-07-26T12:54:16+0000"
        },
        {
            "id": "comment-14075378",
            "author": "Robert Muir",
            "content": "Besides fixing the O(n!) or whatever in release tasks, this is also a nice speedup to just ordinary development like 'ant precommit', because if stuff isn't out of date we won't rebuild for no reason. We currently pass around a lot of properties to try to prevent some of the stuff described above, which today somewhat alleviates the worst case, but those properties don't always work correctly, especially in maven generation in release tasks. And they doesn't save you any time in subsequent builds.\n\nTrunk:\n\nlucene$ ant clean compile-test # 31 seconds\nlucene$ ant documentation-lint # 1st time: 3 minutes 17 seconds\nlucene$ ant documentation-lint # 2nd time: 2 minutes 36 seconds\n\n\n\nPatch:\n\nlucene$ ant clean compile-test # 30 seconds\nlucene$ ant documentation-lint # 1st time: 2 minutes 54 seconds\nlucene$ ant documentation-lint # 2nd time: 1 minute 30 seconds\n\n ",
            "date": "2014-07-26T13:17:52+0000"
        },
        {
            "id": "comment-14075383",
            "author": "Robert Muir",
            "content": "Here is the release building times\n\nTrunk: 13 minutes 47 seconds\n\n$ ant clean\nlucene$ ant prepare-release-no-sign -Dversion=5.0.0 # 5 minutes 6 seconds\nsolr$ ant prepare-release-no-sign -Dversion=5.0.0 # 8 minutes 41 seconds\n\n\n\nPatch: 7 minutes 30 seconds\n\n$ ant clean\nlucene$ ant prepare-release-no-sign -Dversion=5.0.0 # 3 minutes 25 seconds\nsolr$ ant prepare-release-no-sign -Dversion=5.0.0 #  4 minutes 5 seconds\n\n ",
            "date": "2014-07-26T13:51:54+0000"
        },
        {
            "id": "comment-14075488",
            "author": "Steve Rowe",
            "content": "+1, thanks Robert. ",
            "date": "2014-07-26T20:33:19+0000"
        },
        {
            "id": "comment-14075489",
            "author": "Shalin Shekhar Mangar",
            "content": "Anything that speeds up builds is great, thank you Robert. ",
            "date": "2014-07-26T20:36:14+0000"
        },
        {
            "id": "comment-14076310",
            "author": "ASF subversion and git services",
            "content": "Commit 1614058 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1614058 ]\n\nLUCENE-5593: speed up javadocs generation in build ",
            "date": "2014-07-28T15:37:08+0000"
        },
        {
            "id": "comment-14076336",
            "author": "ASF subversion and git services",
            "content": "Commit 1614066 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1614066 ]\n\nLUCENE-5593: speed up javadocs generation in build ",
            "date": "2014-07-28T16:06:52+0000"
        },
        {
            "id": "comment-14076420",
            "author": "Uwe Schindler",
            "content": "Thank you very much!\n\nI am happy that you solved this. It looks like we always generate the JAR file, so we can always rely on it to be eexistent?  ",
            "date": "2014-07-28T17:21:14+0000"
        },
        {
            "id": "comment-14076428",
            "author": "Robert Muir",
            "content": "Yes, today the javadocs macro creates the jar file always. One way to look at it is that this is not ideal to do, as a JAR is only needed for packaging tasks. But for now I thought of that as overoptimizing, so instead of changing that to make things more complex (it would mean uptodate would require a different marker file), I just left it alone and use the jar file as the file to check by uptodate. ",
            "date": "2014-07-28T17:25:22+0000"
        },
        {
            "id": "comment-14076925",
            "author": "Uwe Schindler",
            "content": "Thanks Robert. I was confused, because the \"invoke-javadoc\" macro does not create the JAR file. The JAR file is created by the target in module-build.xml. So it could still happen that we don't create the JAR file, if the build.xml of a specific module is broken  We should clean this up, javadocs creation is still horrible complex. ",
            "date": "2014-07-28T21:35:25+0000"
        },
        {
            "id": "comment-14076951",
            "author": "Robert Muir",
            "content": "It is confusing. In fact i started with the macro there, but then i had to duplicate it in several places because e.g. lucene/core/build.xml does not use module-build.xml. So i put it in common-build to be accessible everywhere. I agree, it should be cleaned up more... but it does work! ",
            "date": "2014-07-28T21:49:10+0000"
        }
    ]
}