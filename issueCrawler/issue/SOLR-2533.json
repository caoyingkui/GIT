{
    "id": "SOLR-2533",
    "title": "Improve API of ValueSource & FunctionQuery SortField weighting",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Started from LUCENE-2883: Support for sorting by ValueSource and FunctionQueries is done through ValueSource#getSort and the ValueSourceSortField.  In order to support VSs containing other Queries, its necessary to allow the Querys to be weighted by an IndexSearcher.  Currently this is handled by having ValueSourceSortField implement SolrSortField.  In Solr's SolrIndexSearcher, SortFields implementing SolrSortField are then weighted before the Sort is used.\n\nSorting by FunctionQuery and ValueSource are invaluable and will become available to all Lucene users in LUCENE-2883.  But in order to do so, we need to remove the coupling of this functionality to Solr, and make it more standard.\n\nAny and all thoughts about how to do this are appreciated.",
    "attachments": {
        "SOLR-2533.patch": "https://issues.apache.org/jira/secure/attachment/12480025/SOLR-2533.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael McCandless",
            "id": "comment-13036978",
            "date": "2011-05-20T18:24:10+0000",
            "content": "Can we add weighting to Lucene's SortField? "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037389",
            "date": "2011-05-21T14:09:01+0000",
            "content": "How would we expose that, through Sort and just directly on SortField? \n\nCurrently Solr iterates over the SortFields in a Sort and weights each of them if necessary.  Weighting then creates new SortFields which are stored in a new Sort.  So essentially the initial Sort is being used as a factory to create this new weighted Sort of weighted SortFields.\n\nSo we could go down a line similar to that of Query/Weight/Scorer and have something like SortField which produce WeightedSortField which then create FieldComparators. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037401",
            "date": "2011-05-21T15:09:33+0000",
            "content": "Or we could just go for something simpler I guess, and basically borrow the same idea and add weight(IndexSearcher) to Sort & SortField which then returns a new Sort if any SortField changes. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037476",
            "date": "2011-05-21T22:34:41+0000",
            "content": "I guess add Sort.weight?  And we should strongly type it, I think?  Ie it returns a WeightedSort?  (So we don't have to do instanceof checks).  But maybe then the SortField within the Sort don't need a new class...?  Not sure.\n\nAnd IndexSearcher, before using the Sort, would weight it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13037488",
            "date": "2011-05-22T00:56:00+0000",
            "content": "The query.rewrite model isn't strongly typed and seems to work fine.  The advantaged is that 99% of the time the SortField will remain unchanged (and the base-class implementation of \"return this\" will be used).  That's much less of an API change too (rather than moving a whole bunch of Sort methods to WeightedSort). "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037518",
            "date": "2011-05-22T07:04:26+0000",
            "content": "I agree with Yonik's thoughts here, we really want to limit the effect on the overall API since currently its just for FunctionQuerys.  I will create a patch along those lines. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037519",
            "date": "2011-05-22T07:11:27+0000",
            "content": "Patch adds weight(IndexSearcher) to both Sort & SortField.  \n\nSort.weight emulates the same algorithm as used to exist in SolrIndexSearcher#getSort, only returning a new Sort if a SortField changes.\n\nSortField.WEIGHTABLE type is added to SortField to prevent SortFields that need to be weighted being used before they have been.\n\nReduces SolrIndexSearch#getSort down.  It can probably be removed.  Cleans out ValueSource of the SolrSortField idea and dummy comparator. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037553",
            "date": "2011-05-22T10:15:54+0000",
            "content": "OK, I agree: let's not make this strongly typed.  So, this 'weighting' is more like Query.rewrite than Query.weight, right?\n\nIe, if it needs to, it returns a new Query that \"compiled in\" something about the top searcher it was passed.  If it doesn't need to, it returns itself?\n\nPatch looks great Chris!  Except I wonder if we should rename \"weight\" to \"rewrite\", or something else... (compile?  compileSearcher?)? "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037558",
            "date": "2011-05-22T10:26:10+0000",
            "content": "So, this 'weighting' is more like Query.rewrite than Query.weight, right?\nExcept I wonder if we should rename \"weight\" to \"rewrite\"\n\nYeah I totally agree.  The fact that ValueSources use to weight inner Queries is actually an implementation detail and even then it does a rewrite too.  I think for consistency with Query, we should go with rewrite.  I'll regenerate the patch. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037560",
            "date": "2011-05-22T10:32:50+0000",
            "content": "Updated patch with the change to rewrite. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037561",
            "date": "2011-05-22T10:38:37+0000",
            "content": "Looks great \u2013 I think it's ready to commit.  Can you add a CHANGES? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037565",
            "date": "2011-05-22T10:47:39+0000",
            "content": "I plan to commit this soon. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13037566",
            "date": "2011-05-22T10:49:07+0000",
            "content": "New Patch including CHANGES.txt changes. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13038266",
            "date": "2011-05-23T21:59:42+0000",
            "content": "Chris now that you are committer you should assign this to yourself and commit it \n\nThen we can keep going on LUCENE-2883! "
        },
        {
            "author": "Chris Male",
            "id": "comment-13051842",
            "date": "2011-06-20T08:02:36+0000",
            "content": "Updated patch to trunk.  I plan to commit shortly. "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13051855",
            "date": "2011-06-20T08:53:32+0000",
            "content": "there seems to be a problem with the CHANGES.txt changes in your patch. Intuitively I would say this needs to go into solr/CHANGES.TXT and it should not remove an existing entry no? "
        },
        {
            "author": "Chris Male",
            "id": "comment-13051859",
            "date": "2011-06-20T09:03:46+0000",
            "content": "Fixed bad merge of CHANGES.txt as pointed out by Simon.\n\nI'm going to leave the changes entry in both CHANGES.txt since overall its a different change to both Solr and Lucene, despite this being a Solr issue. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13051960",
            "date": "2011-06-20T12:50:03+0000",
            "content": "Committed revision 1137612 "
        }
    ]
}