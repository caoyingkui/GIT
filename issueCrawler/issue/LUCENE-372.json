{
    "id": "LUCENE-372",
    "title": "Unmatched right parentheses truncates query",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.2"
        ],
        "affect_versions": "1.4,                                            1.9,                                            2.0.0,                                            2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The query processor truncates a query when right parentheses are unmatched.\nE.g.:\n\n secret AND illegal) AND access:confidential\n\nwill not result in a ParseException instead will run as:\n\n secret AND illegal",
    "attachments": {
        "Lucene-372.patch": "https://issues.apache.org/jira/secure/attachment/12343828/Lucene-372.patch",
        "LUCENE-372.patch.txt": "https://issues.apache.org/jira/secure/attachment/12344120/LUCENE-372.patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-10-28T06:22:53+0000",
            "content": "The reason for this is that the parse() method does not ensure that the entire input string has been consumed. Query() will simply return if it encounters an unexpected token, relying on its caller to consume that token. If the query is nested, the call will throw an exception. But at the top-level, the caller is parse(), and it does not make sure that <EOF> is reached. \n\nA simple fix is to introdice a new nonterminal TopLevelQuery ::= Query <EOF>, and parse() calls TopLevelQuery. I have a patch for this, will post it together with a few new unit test cases for this. \n\nAndreas. ",
            "author": "Andreas Neumann",
            "id": "comment-12445343"
        },
        {
            "date": "2006-10-28T07:17:21+0000",
            "content": "This patch contains 5 files (I was not sure whether to include the JavaCC-generated files, ended up including them):\n\n\tQueryParser.jJ: introduced a new nonterminal TopLevelQuery\n\tQueryParser.java: generated from QueryParser.jj by javaCC\n\tQueryParserTokenManager.java: generated from QueryParser.jj by javaCC\n\tTestQueryParser.java: rewrote testException and added a few more tests.\n\tTestMultiFieldQueryParser.java: fixed testSimple() because it was passing in unbalanced quotation marks. That caused a failure with the new QueryParser.\n\n\n\n\n\tAndreas.\n\n ",
            "author": "Andreas Neumann",
            "id": "comment-12445348"
        },
        {
            "date": "2006-11-01T17:38:58+0000",
            "content": "Somehow the patch got some extra line feeds in some of the javacc created files. This version takes those out. ",
            "author": "Steven Parkes",
            "id": "comment-12446313"
        },
        {
            "date": "2006-11-01T17:40:15+0000",
            "content": "I like it. There are some extra tests that demonstrate where parse exceptions are going to be thrown, which is nice.\n\nIt would be nice if we could, perhaps, be more liberal in what we accept. For example, I've always thought it would be nice if we could add in missing terminators, e.g., quotes, parentheses., in the spirit of \"being liberal in what you accept.\" But I don't see that being too feasible with an automatically generated parser.\n\nI do think completely ignoring terms, which this patch fixes, is the wrong way to be liberal. ",
            "author": "Steven Parkes",
            "id": "comment-12446314"
        },
        {
            "date": "2007-03-08T04:24:14+0000",
            "content": "I just committed this. Thanks, Andreas! ",
            "author": "Michael Busch",
            "id": "comment-12479213"
        }
    ]
}