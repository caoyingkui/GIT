{
    "id": "LUCENE-5699",
    "title": "Lucene classification score calculation normalize and return lists",
    "details": {
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/classification"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "Now the classifiers can return only the \"best matching\" classes. If somebody want it to use more complex tasks he need to modify these classes for get second and third results too. If it is possible to return a list and it is not a lot resource why we dont do that? (We iterate a list so also.)\n\nThe Bayes classifier get too small return values, and there were a bug with the zero floats. It was fixed with logarithmic. It would be nice to scale the class scores sum vlue to one, and then we coud compare two documents return score and relevance. (If we dont do this the wordcount in the test documents affected the result score.)\n\nWith bulletpoints:\n\n\tIn the Bayes classification normalized score values, and return with result lists.\n\tIn the KNN classifier possibility to return a result list.\n\tMake the ClassificationResult Comparable for list sorting.",
    "attachments": {
        "0730.patch": "https://issues.apache.org/jira/secure/attachment/12658607/0730.patch",
        "06-06-5699.patch": "https://issues.apache.org/jira/secure/attachment/12648861/06-06-5699.patch",
        "0810-base.patch": "https://issues.apache.org/jira/secure/attachment/12660845/0810-base.patch",
        "0803-base.patch": "https://issues.apache.org/jira/secure/attachment/12659570/0803-base.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14021160",
            "author": "Gerg\u0151 T\u00f6rcsv\u00e1ri",
            "content": "This patch is including all the mentioned features. It is contains some really ugly modification because of the auto-formating in eclipse and auto organizing imports.\n\nIt also contains the modifications for the online BayesClassifier.\n\nThe main changes:\nInstead of max searching list making and Collections.sort.\nInstead of calculating the docsWithClassSize once, calculate it in every search.\nBecause of the list possible to scale the score sum to 1. (line 180-201 in snbc)\n\nThe \"online\" function is not tested yet, the scaling seems to work. ",
            "date": "2014-06-08T09:18:56+0000"
        },
        {
            "id": "comment-14021231",
            "author": "Shawn Heisey",
            "content": "This patch is including all the mentioned features. It is contains some really ugly modification because of the auto-formating in eclipse and auto organizing imports.\n\nEclipse will not automatically reformat or organize imports unless you have changed its default configuration to turn these options on.  Can you re-do your changes and save without these options turned on?\n\nIt also looks like the some of the new formatting is using a different format specification than the one that comes with Lucene/Solr. The correct specification is automatically used when you run \"ant eclipse\" and import the project into eclipse.  Some of it looks correct, which is very odd. ",
            "date": "2014-06-08T18:09:28+0000"
        },
        {
            "id": "comment-14021278",
            "author": "Shawn Heisey",
            "content": "When I commit LUCENE-5747, Lucene/Solr's project-specific settings will override any configured automatic save actions in Eclipse. ",
            "date": "2014-06-08T19:21:46+0000"
        },
        {
            "id": "comment-14044422",
            "author": "Tommaso Teofili",
            "content": "I get some compile errors when trying to build the classification module (with 'ant clean compile'):\n\ncommon.compile-core:\n    [mkdir] Created dir: /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/build/classification/classes/java\n    [javac] Compiling 6 source files to /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/build/classification/classes/java\n    [javac] /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java:37: error: package org.mockito.internal.listeners does not exist\n    [javac] import org.mockito.internal.listeners.CollectCreatedMocks;\n    [javac]                                      ^\n    [javac] /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/classification/src/java/org/apache/lucene/classification/ClassificationResult.java:24: warning: [rawtypes] found raw type: Comparable\n    [javac] public class ClassificationResult<T> implements Comparable{\n    [javac]                                                 ^\n    [javac]   missing type arguments for generic class Comparable<T>\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in interface Comparable\n    [javac] /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/classification/src/java/org/apache/lucene/classification/ClassificationResult.java:69: warning: [unchecked] unchecked cast\n    [javac]             ClassificationResult<T> b = (ClassificationResult<T>) o;\n    [javac]                                                                   ^\n    [javac]   required: ClassificationResult<T>\n    [javac]   found:    Object\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class ClassificationResult\n    [javac] /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java:132: warning: [unchecked] unchecked method invocation: method sort in class Collections is applied to given types\n    [javac]         Collections.sort(returnList);\n    [javac]                         ^\n    [javac]   required: List<T>\n    [javac]   found: List<ClassificationResult<BytesRef>>\n    [javac]   where T is a type-variable:\n    [javac]     T extends Comparable<? super T> declared in method <T>sort(List<T>)\n    [javac] /Users/tommaso/Documents/workspaces/lucene/trunk/lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java:182: warning: [unchecked] unchecked method invocation: method sort in class Collections is applied to given types\n    [javac]       Collections.sort(dataList);\n    [javac]                       ^\n    [javac]   required: List<T>\n    [javac]   found: List<ClassificationResult<BytesRef>>\n    [javac]   where T is a type-variable:\n    [javac]     T extends Comparable<? super T> declared in method <T>sort(List<T>)\n    [javac] 1 error\n    [javac] 4 warnings\n\n\n\nThe fix for the compile error is trivial, however, apart from the strange import of org.mockito.internal.listeners.CollectCreatedMocks in KNN (which I guess is caused by some \"automatic organize import\" IDE kind of magic, I'm not sure about the suggested approach of creating multiple lists of classification results to manually sort and just select one out of those items, it seems a bit costly. Also I would like to avoid definitions of public methods if they're not needed (they can actually be private). ",
            "date": "2014-06-26T07:36:30+0000"
        },
        {
            "id": "comment-14044506",
            "author": "Gerg\u0151 T\u00f6rcsv\u00e1ri",
            "content": "Yes, the compiler error was something like that, i pressed ctrl+shift+o to organize imports and it vanished in eclipse. (But its build in eclipse without error...) My bad.\n\nIn the KNN there was a maximum search, the list building, sorting and pick the first element is not cost efficient if you have a huge number of classes it's totally true. But if you have a huge number of classes, the list building and Collections.sort will be your last problem in cost calculation  If you have few classes, the list building and the max searching is the same complexity, and the collections.sort is the time what you wasted, buts it will be fast because of the elements number. Thats the reason why I made this, I think the search time not increasing relevantly.\n\nThe public \"not in the Classifier\" functions are there because not all the classifier can return with lists, but thats whose can, that could be a huge usability boost for them. There is 2 way there, add a new function in Classifier, and the not lister classifiers return with a 1 element list, or make an additional interface. As I see, there are only this kind of public functions are there.\n ",
            "date": "2014-06-26T09:23:03+0000"
        },
        {
            "id": "comment-14044549",
            "author": "Gerg\u0151 T\u00f6rcsv\u00e1ri",
            "content": "I done some measure with the lists (results in the readme):\nhttps://github.com/tg44/Java-Short-vs-Max\n\nThe basic max search is approx. 20x faster but I think this is still not comparable loss if you need a KNN search in more then 1000 doc.\n\nIn fact there is a possibility to take back the search only the first functions, or take out the shorting, and do maximum search where one result is needed, or short if list needed. ",
            "date": "2014-06-26T10:31:51+0000"
        },
        {
            "id": "comment-14079003",
            "author": "Gerg\u0151 T\u00f6rcsv\u00e1ri",
            "content": "Lucene format code, maximum search instead of short. new NormalizedList function. Cleaner code + doc. ",
            "date": "2014-07-30T07:05:40+0000"
        },
        {
            "id": "comment-14084775",
            "author": "Gerg\u0151 T\u00f6rcsv\u00e1ri",
            "content": "So why good the normalized and normalizedList functions?\n\nFirst of all, why normalized?\nWhen I first tried to use the Lucene Classification, one of the bigger problem was, that the scores, whats come back means nothing. Basically the classifier returns the class, and a random number. If you have 2 text, and you push them in the classifier, the scores didn't help you  to figure out what result is more trustworthy.\nThe normalized values have that option. If you want to tell the user how sure are you, the normalized values help you out.\n\nSecond, why lists?\nIf you can tell the user, how sure are you, it's not far that you want to tell them whats are the other options. What are the 3 more relevant or 5 more relevant class.\nMost of the classification algorithms have those numbers a prior.\n\nThe problem with the normalization and the lists:\nSadly not all classification algorithm have lists, they just drop classes. So it can't go instantly to the api, because some classification method never have list or score.\n\n\nI have 2 api suggestion:\nThe first where the Classifier interface get those normalized and normalizedList functions, and some of the implementations drop exceptions if somebody want to use them.\nOr, the Classifier interface don't get them, but some classifier can provide these functions. ",
            "date": "2014-08-04T15:34:36+0000"
        },
        {
            "id": "comment-14090443",
            "author": "Tommaso Teofili",
            "content": "thanks Gerg\u0151, the patch looks much better.\n\nWhen I first tried to use the Lucene Classification, one of the bigger problem was, that the scores, whats come back means nothing. Basically the classifier returns the class, and a random number. If you have 2 text, and you push them in the classifier, the scores didn't help you to figure out what result is more trustworthy.\n\nwhile the classification score doesn't of course return a random number, I agree the score should be normalized, between 0 and 1, the higher the better (basically this resumes in a probability measure).\nRegarding the implementation I don't think the API needs to be touched for this, normalized scores should be always returned in ClassificationResults by Classifier#assignClass method implementations.\n\nIf you can tell the user, how sure are you, it's not far that you want to tell them whats are the other options. What are the 3 more relevant or 5 more relevant class.\n\nok, the use case sounds reasonable, however my only concern (which extend to the normalization implementation as it's based on the generation of lists) relates to the fact that the current implementation may not scale well if you have huge number of classes.\n\nRegarding API introduction I would be in favor in introducing something like Classifier#getClasses(String text) returning a List<ClassificationResult> for this use case, in alternative/addition Classifier#getClasses(String text, int max) to filter the maximum number of classes to be returned (as the user is probably interested in the first N classes, rather than the whole list of classes).  ",
            "date": "2014-08-08T07:49:05+0000"
        },
        {
            "id": "comment-14103642",
            "author": "Tommaso Teofili",
            "content": "thanks Gerg\u0151, the latest patch looks good. ",
            "date": "2014-08-20T08:55:08+0000"
        },
        {
            "id": "comment-14103644",
            "author": "ASF subversion and git services",
            "content": "Commit 1619053 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1619053 ]\n\nLUCENE-5699 - patch from Gerg\u0151 T\u00f6rcsv\u00e1ri for normalized score and return lists in classification ",
            "date": "2014-08-20T08:56:43+0000"
        },
        {
            "id": "comment-14106153",
            "author": "Michael McCandless",
            "content": "This commit caused \"ant precommit\" failures on trunk:\n\n\n     [exec] build/docs/classification/org/apache/lucene/classification/SimpleNaiveBayesClassifier.html\n     [exec]   missing Fields: analyzer\n     [exec]   missing Fields: atomicReader\n     [exec]   missing Fields: classFieldName\n     [exec]   missing Fields: indexSearcher\n     [exec]   missing Fields: query\n     [exec]   missing Fields: textFieldNames\n     [exec]   missing Methods: countDocsWithClass()\n     [exec]   missing Methods: tokenizeDoc(java.lang.String)\n     [exec]\n     [exec] Missing javadocs were found!\n\n\n\nAlso, was it intentional that this wasn't backported to 4.x? ",
            "date": "2014-08-21T23:36:14+0000"
        },
        {
            "id": "comment-14106154",
            "author": "Michael McCandless",
            "content": "Reopen to resolve \"ant precommit\" failures and maybe backport question ... ",
            "date": "2014-08-21T23:36:43+0000"
        },
        {
            "id": "comment-14106609",
            "author": "Tommaso Teofili",
            "content": "thanks Michael, I've fixed the missing javadoc. For the question on backporting to 4.0 I'm generally +1 on that, just this introduces a new API which needs better testing (a patch covering it should be available in LUCENE-5698) before merging into the stable branch IMHO. ",
            "date": "2014-08-22T08:00:35+0000"
        },
        {
            "id": "comment-14106611",
            "author": "ASF subversion and git services",
            "content": "Commit 1619699 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1619699 ]\n\nLUCENE-5699 - fixed javadoc ",
            "date": "2014-08-22T08:02:17+0000"
        },
        {
            "id": "comment-14106615",
            "author": "Michael McCandless",
            "content": "OK thanks Tommaso Teofili, I guess we should leave this reopened and set a fix version to remind us to backport it ... ",
            "date": "2014-08-22T08:04:19+0000"
        },
        {
            "id": "comment-14106617",
            "author": "Tommaso Teofili",
            "content": "sure, I've added fix version 4.10  ",
            "date": "2014-08-22T08:08:54+0000"
        },
        {
            "id": "comment-14106619",
            "author": "Michael McCandless",
            "content": "Actually it looks like that train is now leaving the station ... I think we should target next release (4.11)? ",
            "date": "2014-08-22T08:11:10+0000"
        },
        {
            "id": "comment-14107502",
            "author": "ASF subversion and git services",
            "content": "Commit 1619933 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1619933 ]\n\nLUCENE-5699 - fixed javadoc ",
            "date": "2014-08-22T21:16:51+0000"
        },
        {
            "id": "comment-14107986",
            "author": "ASF subversion and git services",
            "content": "Commit 1620022 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1620022 ]\n\nLUCENE-5699 - fixed javadoc ",
            "date": "2014-08-23T12:07:57+0000"
        },
        {
            "id": "comment-14108405",
            "author": "ASF subversion and git services",
            "content": "Commit 1620122 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1620122 ]\n\nLUCENE-5699 - added missing javadoc for atomic reader ",
            "date": "2014-08-24T11:44:31+0000"
        },
        {
            "id": "comment-14207813",
            "author": "ASF subversion and git services",
            "content": "Commit 1638715 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1638715 ]\n\nLUCENE-5699 - normalized score for boolean perceptron classifier ",
            "date": "2014-11-12T08:38:08+0000"
        },
        {
            "id": "comment-14332979",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:55+0000"
        }
    ]
}