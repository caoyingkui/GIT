{
    "id": "LUCENE-7375",
    "title": "Can we allow FSDirectory subclasses to customize whether the ctor does a mkdir?",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Today, just instantiating an FSDirectory always brings the directory into existence, even if you will do no writes (createOutput).\n\nWe have gone back and forth on this, over the ages.  E.g. see LUCENE-16 (only 2 digits there!!), LUCENE-773 (only 3 digits there!!), LUCENE-1464.  At one point we created the directory lazily, on the first write (createOutput) attempt, but now we always create it when you instantiate FSDirectory.\n\nThis causes some hassle for consumers, e.g. in https://github.com/elastic/elasticsearch/pull/19338 ES is forking SimpleFSDirectory in order to have a read-only directory impl.\n\nMaybe we can do the Files.createDirectories in protected method that a subclass could override?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15370752",
            "author": "Robert Muir",
            "date": "2016-07-11T13:32:08+0000",
            "content": "the mkdir is necessary if the Directory will ever be used to perform any writes, otherwise locking is broken.\n\nLucene was broken here forever, because it used getCanonicalPath on a directory that may or may not exist: that would then be used by e.g. NativeFSLock as the key for the in-memory map and so on.\n\nThis was just one of the many ways that locking was broken.\n\nYou can see this by reading the javadocs:\nhttps://docs.oracle.com/javase/7/docs/api/java/io/File.html#getCanonicalPath()\n\n\n Every pathname that denotes an existing file or directory has a unique canonical form. Every pathname that denotes a nonexistent file or directory also has a unique canonical form. The canonical form of the pathname of a nonexistent file or directory may be different from the canonical form of the same pathname after the file or directory is created. Similarly, the canonical form of the pathname of an existing file or directory may be different from the canonical form of the same pathname after the file or directory is deleted.\n\nSo, in order for locking to work, its critical that we create the file. "
        },
        {
            "id": "comment-15370801",
            "author": "Uwe Schindler",
            "date": "2016-07-11T13:52:31+0000",
            "content": "Maybe allow to pass \"read-only\" to FSDirectory ctor and FSDirectory.open()? In the RO case we can fail early if the directory does not exist. In addition, all the write methods fail with UOE. "
        },
        {
            "id": "comment-15370815",
            "author": "Robert Muir",
            "date": "2016-07-11T13:57:41+0000",
            "content": "Well, another option is that NativeFSLockFactory etc already do their own createDirectories + toRealPath (defensively). This came after the move to nio.2, and maybe the one in FSDir can now just be removed.\n\nThis would require a bit of hair though: I think the only clean way to do it, would be to say that the lockfactory is responsible for creating the directory if it doesnt exist. That has implications for NO_LOCK_FACTORY and other crazy options we have  "
        },
        {
            "id": "comment-15370826",
            "author": "Robert Muir",
            "date": "2016-07-11T14:05:07+0000",
            "content": "Also, think about any external use of `getDirectory()` and so on (this is even used by toString). If someone calls this method, e.g. to key into a map of their own, we've brought the old java.io.File trap back \n\nSo the Files.createDirectories isn't useless in that sense either, it returns toRealPath today, which means such traps are impossible. "
        }
    ]
}