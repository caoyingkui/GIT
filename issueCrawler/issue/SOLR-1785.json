{
    "id": "SOLR-1785",
    "title": "Handle +/-Inf, NaN when scoring",
    "details": {
        "affect_versions": "1.4",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Scores of -Inf or NaN being collected can cause exceptions.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12836387",
            "date": "2010-02-21T15:53:28+0000",
            "content": "In Solr 1.3 and before, +-Inf were handled normally, and scores of NaN caused the relative ordering of other documents to be mixed up.\nThe new lucene collectors used in 1.4 can't all handle -Inf and NaN (they can return Integer.MAX_VAL to be returned as a docid), leading to exceptions as seen in SOLR-1778.  Because of this Solr's function queries normalized their output to exclude -Inf and NaN.  Unfortunately, this is not sufficient, because non-infinite scores can combine with a boolean query into an infinite score.  And once you have an infinite score, a simple multiplication by zero will yield a NaN.\n\nexample: http://localhost:8983/solr/select?fl=id,score&q=_val_:\"-3e38\"+val:\"-3e38\"\n\nProperly handing -Inf is an easy fix.  The bigger question is how to handle NaN.\nWe could:\n1) punt and realize that any NaNs will mess up the ordering of all other documents for that request\n2) Move the FunctionQuery normalization that changes -Inf and NaN into -Float.MAX_VALUE to right before collection (probably with a wrapper collector).  This would preserve the ordering of all the other documents, at the cost of a little performance, and information loss (the fact that there was a NaN or -Inf).\n3) Fix -Inf handling, and normalize NaN to -Inf\n4) Completely order NaNs (probably after -Inf)...  This keeps the most information, but would require implementing a custom comparator for score sorting (for anything other than a simple score desc). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872501",
            "date": "2010-05-27T22:06:40+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043683",
            "date": "2011-06-03T16:46:31+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106362",
            "date": "2011-09-16T14:50:45+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13237059",
            "date": "2012-03-23T20:31:37+0000",
            "content": "Bulk changing fixVersion 3.6 to 4.0 for any open issues that are unassigned and have not been updated since March 19.\n\nEmail spam suppressed for this bulk edit; search for hoss20120323nofix36 to identify all issues edited "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13294751",
            "date": "2012-06-14T00:31:22+0000",
            "content": "Removing fix version since this issue hasn't gotten much attention lately and doesn't appear to be a priority for anyone for 4.0.  \n\nAs always: if someone wants to take on this work they are welcome to do so at any time and the target release can be revisited "
        }
    ]
}