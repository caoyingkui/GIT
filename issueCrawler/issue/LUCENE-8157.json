{
    "id": "LUCENE-8157",
    "title": "GeoPolygon factory fails in recognize convex polygon",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.3",
            "master (8.0)"
        ]
    },
    "description": "When a polygon contains three consecutive points which are nearly co-planar, the polygon factory may fail to recognize the concavity/convexity of the polygon. I think the problem is the way the sideness for a polygon edge is calculated. It relies in the position of the next point in respect of the previous polygon edge which fails on the case explained above because of numerical imprecision. The result is that sideness is messed up.",
    "attachments": {
        "LUCENE-8157-plane.patch": "https://issues.apache.org/jira/secure/attachment/12909226/LUCENE-8157-plane.patch",
        "LUCENE-8157-test.patch": "https://issues.apache.org/jira/secure/attachment/12909211/LUCENE-8157-test.patch",
        "LUCENE-8157.patch": "https://issues.apache.org/jira/secure/attachment/12909210/LUCENE-8157.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16352256",
            "date": "2018-02-05T11:11:02+0000",
            "content": "Attached is a random test that reproduces the problem and a static case.\n\n\u00a0\n\nI think the only way to solve this problem is to change the approach on how to calculate sideness. It is possible to compute the bearing angle between two points, and knowing that angle, it is trivial to compute a point on the right side using the method surfacePointOnBearing() in PlanetModel. Attached is an example of this solution.\n\nOf course that might have performance implications as those calculations are iterative, and might require refactoring of the polygon factory.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16352346",
            "date": "2018-02-05T13:02:43+0000",
            "content": "Calculating sidedness in this way is not an option, frankly.\n\n-1 for committing this. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16352351",
            "date": "2018-02-05T13:06:03+0000",
            "content": "I cannot look at this until much later in the week.  Please wait until then before going ahead with any solution.\n\nComputing sidedness is, as you know, trivial when already-constructed planes are involved.  Please explain why precision is a problem when doing that.  A simple example should suffice. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16352403",
            "date": "2018-02-05T13:58:19+0000",
            "content": "Building the example the situation becomes much clear:\n\nWe have three points (A,B,C) that define two planes AB and BC with the following properties:\n\n1) AB does not contain C.\n\n2) AC does not contain B.\n\n3) BC does contain A!!\n\nDoes it mean the three planes need to be checked to assess coplanarity?\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16352416",
            "date": "2018-02-05T14:05:51+0000",
            "content": "Ignacio Vera Maybe.\nCan you provide a pointer into the current master code (or just include a snippet) so I have some context? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16352456",
            "date": "2018-02-05T14:30:29+0000",
            "content": "GeoPolygonFactory, line 1521:\n\n\u00a0\n\nfinal boolean isNewPointWithin = currentEdge.plane.isWithin(newPoint);\n\nfinal GeoPoint pointToPresent = currentEdge.startPoint;\n\nfinal SidedPlane newPlane = new SidedPlane(pointToPresent, isNewPointWithin, pointList.get(startIndex), newPoint);\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16352571",
            "date": "2018-02-05T15:48:58+0000",
            "content": "Hi Ignacio Vera, the full code has this helpful comment:\n\n\n        // Build the new edge\n        // We need to know the sidedness of the new plane.  The point we're going to be presenting to it has\n        // a certain relationship with the sided plane we already have for the current edge.  If the current edge\n        // is colinear with the new edge, then we want to maintain the same relationship.  If the new edge\n        // is not colinear, then we can use the new point's relationship with the current edge as our guide.\n        \n        final boolean isNewPointWithin = currentEdge.plane.isWithin(newPoint);\n        final GeoPoint pointToPresent = currentEdge.startPoint;\n\n        final SidedPlane newPlane = new SidedPlane(pointToPresent, isNewPointWithin, pointList.get(startIndex), newPoint);\n        final Edge newEdge = new Edge(pointList.get(startIndex), pointList.get(endIndex), newPlane, internalEdges.get(startIndex));\n\n\n\nSince the code was already modified to remove colinear points for the polygon, the question is under what circumstances we ever can't determine the sidedness of the plane.  We can determine that condition by adding:\n\n\n  if (currentEdge.plane.evaluateIsZero(pointToPresent)) {\n    throw new IllegalStateException(\"Not expecting point and plane to be colinear!!\");\n  }\n\n\n\nAs I said, I am flat out this week; hopefully later in the week things will look better. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16353456",
            "date": "2018-02-06T06:32:25+0000",
            "content": "So let's look at this test case and see if I understand it:\n\n\n  public void testLUCENE8157() {\n    // These better be three non-colinear points\n    GeoPoint A = new GeoPoint(PlanetModel.SPHERE, 0.281855362988772, -0.7816673189809037);\n    GeoPoint B = new GeoPoint(PlanetModel.SPHERE, 0.28185536309057774, -0.7816673188511931);\n    GeoPoint C = new GeoPoint(PlanetModel.SPHERE, 0.28186535556824205, -0.7816546103463846);\n\n    //check to be sure all points are legal with respect to other points\n    Plane AC = new Plane(A, C);\n    Plane BC = new Plane(B, C);\n    Plane AB = new Plane(A, B);\n    assertFalse(AC.evaluateIsZero(B));\n    assertFalse(BC.evaluateIsZero(A));\n    assertFalse(AB.evaluateIsZero(C));\n\n    SidedPlane AB = new SidedPlane(new GeoPoint(1, 0,0), A, B);\n    assertFalse(AB.evaluateIsZero(C));\n    boolean isConvex = AB.isWithin(C);\n    SidedPlane BC = new SidedPlane(A, isConvex, B, C);\n    //fails here!!\n    assertFalse(BC.evaluateIsZero(A));\n    assertTrue(BC.isWithin(A) == isConvex);\n  }\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16353457",
            "date": "2018-02-06T06:35:52+0000",
            "content": "In my augmented test, it fails here:\n\n\n    assertFalse(BC.evaluateIsZero(A));\n\n\n\nThis shows that the points are indeed not properly filtered.  Maybe we're filtering them only one way and not the other? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16353459",
            "date": "2018-02-06T06:44:12+0000",
            "content": "Just to clarify, coplanarity is not transitive.  Just because you build ONE plane from two of the points, and the third point is not coplanar, it does not imply that if you build a DIFFERENT plane from two other points, then the left-out point will not be coplanar.  So if we are verifying non-coplanarity as we walk around the edges of a polygon, we must check BOTH DIRECTIONS.  It's that simple. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16353498",
            "date": "2018-02-06T07:18:39+0000",
            "content": "I think what we need is a method that checks coplanarity. For example, if we accept that Geo3d coplanarity is defined as coplanar to any of the planes that three points can construct:\n\n\u00a0\n\nstatic boolean pointsCoplanar(GeoPoint A, GeoPoint B, GeoPoint C) {\n  Plane AB = new Plane(A, B);\n  Plane AC = new Plane(A, C);\n  Plane BC = new Plane(B, C);\n  return AB.evaluateIsZero(C) ||  AC.evaluateIsZero(B) || BC.evaluateIsZero(A);\n}\n\n\u00a0\n\nIn this way we encapsulate what is the definition and can be used whenever we check for such a property. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16353772",
            "date": "2018-02-06T11:56:21+0000",
            "content": "Ignacio Vera, that is fine but it creates a lot of objects implemented that way AND those objects get thrown away.\n\nI'll be happy to fix it up later in the week though.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16353862",
            "date": "2018-02-06T13:17:47+0000",
            "content": "Great! Agree the method can and should be implemented more efficiently.\n\nNo hurry, thanks!\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16359085",
            "date": "2018-02-09T23:16:18+0000",
            "content": "Hi Ignacio Vera, I probably will have a bit of time over the weekend to help with this.\n\nIf you have code that insures non-coplanar points walking both ways around the polygon, please attach that to the ticket.   ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16359333",
            "date": "2018-02-10T08:48:21+0000",
            "content": "Attached my version that prevents building polygons with co-planar points. Note that we need to check coplanarity when tiling the polygon as well (attached is a test that fails if you do not do so).\n\nStill the check for coplanarity creates too many objects, so that might need to be improved.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16359402",
            "date": "2018-02-10T12:09:29+0000",
            "content": "Ok, I'm going to make a few modifications for efficiency before committing this.  Stay tuned. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16359417",
            "date": "2018-02-10T12:53:55+0000",
            "content": "Commit 1fe34f1e89f978788dba002c433806bbeb6344a9 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1fe34f1 ]\n\nLUCENE-8157: Do a better job of handling coplanar points in polygon construction.  Thanks to Ignacio Vera for his help on this code. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16359418",
            "date": "2018-02-10T12:54:43+0000",
            "content": "Commit e9cfcd282abb82c2f58d6040de9bfe3828517fe8 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e9cfcd2 ]\n\nLUCENE-8157: Do a better job of handling coplanar points in polygon construction.  Thanks to Ignacio Vera for his help on this code. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16359419",
            "date": "2018-02-10T12:55:21+0000",
            "content": "Commit 98337f9af5075cc60ddcdd0e1751e9c7ab7d8895 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=98337f9 ]\n\nLUCENE-8157: Do a better job of handling coplanar points in polygon construction.  Thanks to Ignacio Vera for his help on this code. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16359448",
            "date": "2018-02-10T14:38:32+0000",
            "content": "Commit 277097cd24f6bce275a0ff8625528a737437f3c0 in lucene-solr's branch refs/heads/master from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=277097c ]\n\nLUCENE-8157: Fixing precommit ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16359449",
            "date": "2018-02-10T14:39:12+0000",
            "content": "Commit c06f56051d010563f77d1be18e15edf3cff1ffe4 in lucene-solr's branch refs/heads/branch_7x from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c06f560 ]\n\nLUCENE-8157: Fixing precommit ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16359463",
            "date": "2018-02-10T15:33:09+0000",
            "content": "Commit d4855a1290a526ba03ae97ca016e04ce6b6a8821 in lucene-solr's branch refs/heads/branch_6x from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d4855a1 ]\n\nLUCENE-8157: Fixing precommit ",
            "author": "ASF subversion and git services"
        }
    ]
}