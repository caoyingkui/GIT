{
    "id": "LUCENE-8306",
    "title": "Allow iteration over the term positions of a Match",
    "details": {
        "components": [],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "For multi-term queries such as phrase queries, the matches API currently just returns information about the span of the whole match.  It would be useful to also expose information about the matching terms within the phrase.  The same would apply to Spans and Interval queries.",
    "attachments": {
        "LUCENE-8306.patch": "https://issues.apache.org/jira/secure/attachment/12922837/LUCENE-8306.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16470358",
            "author": "Alan Woodward",
            "content": "Here's a patch with an outline for an API.  MatchesIterator gets a termMatches() method, returning a list of TermMatch objects.  TermMatch contains the term, payload, position and offsets of each term within the current match. ",
            "date": "2018-05-10T12:59:12+0000"
        },
        {
            "id": "comment-16470627",
            "author": "David Smiley",
            "content": "Aha; so this is the solution highlighters need. \u00a0A good start.\u00a0 Do you think the concrete class vs interface choice matters? \u00a0If it's an interface then in theory you could provide a view into the PostingsEnum's payload & other stuff but the caller doesn't necessarily have to call it. \u00a0This isn't a big deal though. \u00a0If you add getters instead of using public final fields, it'd be easier to change later, and it's more standard style for a public API. ",
            "date": "2018-05-10T16:18:42+0000"
        },
        {
            "id": "comment-16472212",
            "author": "Adrien Grand",
            "content": "I suspect such an API won't be easy to implement eg. on SloppyPhraseMatcher given how it handles repetitions: you would need to record positions, offets and payloads of previous positions?\n\nCan we do without this new API? It doesn't sound bad to me that highlighters highlight phrases as a whole rather than individual terms? Do I miss something? ",
            "date": "2018-05-11T16:29:19+0000"
        },
        {
            "id": "comment-16472216",
            "author": "Adrien Grand",
            "content": "Alternatively could consumers call extractTerms and only consider positions of those terms that intersect with the result of the matches API? ",
            "date": "2018-05-11T16:32:00+0000"
        },
        {
            "id": "comment-16474058",
            "author": "Alan Woodward",
            "content": "Can we do without this new API?\n\nI think it's important, particularly if we're talking about highlighting terms in very large intervals.  Here's an updated patch.  I've changed the API to use a collector interface rather than returning a list, which will make things much easier to implement on Spans and Intervals.  I've also implemented it on exact and sloppy phrases, including a test against a sloppy phrase with repeats.  It's ended up simplifying the SloppyPhraseMatcher slightly, as I was trying to do too much to report the intervals (and getting inaccurate results in certain circumstances, which this API revealed, so it's already been useful!) ",
            "date": "2018-05-14T11:31:51+0000"
        },
        {
            "id": "comment-16474116",
            "author": "Adrien Grand",
            "content": "I think it's important, particularly if we're talking about highlighting terms in very large intervals.\n\nCould we address this need by calling extract terms on the weight, and filtering the positions/offsets of these terms to only keep those that intersect with the returned matches? ",
            "date": "2018-05-14T12:36:53+0000"
        },
        {
            "id": "comment-16474278",
            "author": "David Smiley",
            "content": "Could we address this need by calling extract terms on the weight, and filtering the positions/offsets of these terms to only keep those that intersect with the returned matches?\nNice idea\u00a0but it would be inaccurate, and I think we should\u00a0aim for accurate results with this new API.\n\nFor example, if the query is \"Game of Thrones\" near \"Show\", \u00a0then extracting terms is going to find \"of\" and other words. \u00a0But \"of\" ought to only be a match when it's in the phrase \"Game of Thrones\", not in other places that happen to occur in the larger span near \"Show\". \u00a0Our highlighters have failed this for a long time but only recently was the UnifiedHighlighter\u00a0improved to resolve this by using the SpanCollector API \u2013\u00a0LUCENE-8121 \u00a0(for 7.3, yay). ",
            "date": "2018-05-14T14:35:54+0000"
        },
        {
            "id": "comment-16480394",
            "author": "Adrien Grand",
            "content": "Thanks for the explanation. It still feels a bit wrong to me that we are adding a new API to matches and soon to intervals only to address highlighting on large intervals. ",
            "date": "2018-05-18T09:22:37+0000"
        },
        {
            "id": "comment-16480465",
            "author": "Alan Woodward",
            "content": "I think of it more as adding flexibility.  With this API you can either highlight whole matches, or individual parts of matches, or any combination in between that you like.  And it's a pretty minimal addition - one extra method and a FunctionInterface.  And seeing as the whole point of the Matches API is to help highlighting, I think it's worth it? ",
            "date": "2018-05-18T10:23:01+0000"
        },
        {
            "id": "comment-16482024",
            "author": "David Smiley",
            "content": "I like TermPostingsEnum. \u00a0I wish PostingsEnum simply already had the Term \u2013 I've on multiple occasions had to add extra code (be it just a\u00a0field or\u00a0extra abstractions (classes)) to pair a term with it's PostingsEnum. \u00a0Surely I'm not the only one?\u00a0 I wonder what divorcing them (what we have today) gains us? \u00a0I think the\u00a0TermPostingsEnum implementation could be\u00a0less code by simply extending FilterPostingsEnum. \u00a0Oh I see; that's not possible because PostingsEnum is not an interface. \u00a0If TPE is declared to extend FilterPostingsEnum then it'd work\u00a0though may feel a little iffy. \u00a0Perhaps once upon a time it was reasonable for most of these foundational classes in Lucene to be abstract classes but with Java 8 default methods on interfaces, I question that now.\n\nThe TermMatchCollector interface looks fine to me. \u00a0It gives the implementation more freedom to implement it efficiently and easier implementation, though it does force the caller to fully collect instead of iterating at it's leisure, potentially stopping short. \u00a0I'm fine with that.\n\nAnother way to\u00a0handle the requirement of exposing each match\u00a0is for MatchesIterator itself to be able to iterate two things \u2013 both the spans iteration (what it does now), and the position iteration. \u00a0If it worked this way then I imagine it might as well extend PostingsEnum (or the TermPostingsEnum here). \u00a0That might be quite useful since some MatchesIterator will effectively simply be a wrapped PostingsEnum. \u00a0Another similar alternative is to return the TermPostingsEnum enumeration from a MatchesIterator to better differentiate what is being iterated (span vs position). \u00a0The best benefit to the approach here (vs your two approaches thus far) is that we don't need any new abstraction... albeit TermPostingsEnum which sorta counts but as I said perhaps we can migrate to PostingsEnum exposing the Term? ",
            "date": "2018-05-20T20:10:47+0000"
        },
        {
            "id": "comment-16497764",
            "author": "Jim Ferenczi",
            "content": "We discussed with Alan Woodward about the current status and came to the conclusion that it would be simpler to just add a method inside the MatchesIterator to return the inner matches. It could be another MatchesIterator that explodes the parent matches into the nested matches contained in the current interval. This would simplify the API and we would not need to introduce another collector.\n\nWe also discuss the fact that we don't need to get the individual terms, just getting the inner matches should be fine. However we need a way to distinguish matches coming from different queries so instead of returning the individual terms we could add a label that identifies each matches and link it to the original query. It can be a simple ID, the goal is just to be able to regroup matches generated by the same query.\u00a0 ",
            "date": "2018-06-01T09:11:10+0000"
        },
        {
            "id": "comment-16498024",
            "author": "David Smiley",
            "content": "Sounds very promising. \u00a0I'm looking forward to seeing either some pseudocode to make the idea more concrete or an actual patch. ",
            "date": "2018-06-01T13:56:12+0000"
        },
        {
            "id": "comment-16534564",
            "author": "Alan Woodward",
            "content": "I've been playing around with various options for this API, and I think the one that fits best with highlighters is to add another method to Matches that returns a PostingsEnum across all term matches for a particular field.\u00a0 Highlighters can call Matches.getMatches(field) to get an iterator over intervals, which will allow them to decide how to build passages, and then Matches.getTermMatches(field) to get the individual term matches - this would also allow for exposing term frequencies for scoring, payloads, etc.\n\nI'm not sure yet whether or not to return a TermPostingsEnum or just a plain PostingsEnum - the latter keeps the API surface low, but the former could be useful for passage scoring. ",
            "date": "2018-07-06T08:21:57+0000"
        },
        {
            "id": "comment-16534955",
            "author": "David Smiley",
            "content": "Overall sounds very good!\nWhat is TermPostingsEnum?  No such class exists in Lucene.  Might it be a subclass of PostingsEnum that has a getTerm(), and if so would it vary as you iterate an aggregating PostingsEnum or would this Matches.getTermMatches need to return a collection of these enums? ",
            "date": "2018-07-06T15:06:13+0000"
        },
        {
            "id": "comment-16543985",
            "author": "David Smiley",
            "content": "RE TermPostingsEnum \u2013 haha; I see we discussed it above.  Doh! ",
            "date": "2018-07-14T03:57:23+0000"
        },
        {
            "id": "comment-16545498",
            "author": "Alan Woodward",
            "content": "I ended up back where Jim Ferenczi suggested about a month ago.\u00a0 The attached patch adds two new methods to MatchesIterator:\n\n\tlabel() - allows you to associate the current match with a top-level leaf query\n\tgetSubMatches() - returns another MatchesIterator over the individual term positions within the current match\n\n\n\nThis doesn't expose terms, freqs or payloads.\u00a0 I figure let's try and keep the API as low-surface as possible for now, and see how far we get with highlighting. ",
            "date": "2018-07-16T17:05:47+0000"
        },
        {
            "id": "comment-16546660",
            "author": "David Smiley",
            "content": "I did a little review:\n\n\tShouldn't label() return the associated Query? \u00a0If not then how might a highlighter do anything useful with it? \u00a0The only thing I can imagine is simply recursively count the distinct label as a heuristic a match finding more or less terms than some other match. \u00a0Even if one could also do that with a Query, a Query seems intrinsically more useful rather than some opaque Object.\n\tthe changes to SloppyPhraseMatcher seemed like maybe you fixed bugs too? e.g. startOffset being idempotent, if I'm reading that correctly\n\tIn SloppyPhraseMatcher.getSubMatches, is it really necessary to build up this int[][] submatches = new int[phrasePositions.length][3]; thing vs working on PhrasePositions directly?\n\tShouldn't TermMatchesIterator.getSubMatches return EMPTY? It's already a leaf.\n\n ",
            "date": "2018-07-17T14:05:54+0000"
        },
        {
            "id": "comment-16547693",
            "author": "Alan Woodward",
            "content": "Thanks for the review David!\n\nRe label() : yes, that's a good idea, I'll change it to return the leaf query\n\nRe SloppyPhraseMatcher, you're correct, I found some bugs there.\u00a0 We can't work directly on PhrasePositions because the submatches need to be returned in order, although I suppose it might be simpler to just have a sorted array of ords.\u00a0 I'll work something up.\n\nRe TermMatchesIterator.getSubMatches(), I've gone back and forth on this.\u00a0 One the one hand, yes, it's already a leaf, but on the other I think it will be simpler for consumers to just assume that the top level matches are for intervals and the next level are for terms, so for example you can always call getSubMatches() to find individual terms when highlighting. ",
            "date": "2018-07-18T11:12:14+0000"
        },
        {
            "id": "comment-16548104",
            "author": "Jim Ferenczi",
            "content": "Would it be easier if getSubMatches returns null when matches are already leaves ? I look at this sub matches as a way to split a big interval so it should be possible to split at multiple levels. I don't think we should assume that the first level is a top level and the next level is always for terms, e.g. if the top level matches is already a term, getSubMatches should return null or EMPTY.\u00a0 ",
            "date": "2018-07-18T17:13:59+0000"
        },
        {
            "id": "comment-16548981",
            "author": "Alan Woodward",
            "content": "OK, how about this:\n\n\tgetSubMatches() can be called at multiple levels, and returns null when we're on a leaf\n\tlabel() returns something appropriate at each level: top-level queries at the top level, matching Terms at the lowest level, and a Spans or IntervalIterator object at intermediate levels\n\n\n\nThe other option for label() could be to go back to the idea of returning a BytesRefIterator, so the top level would return all the currently matching terms, and the leaf levels just a singleton iterator over the current term ",
            "date": "2018-07-19T08:21:00+0000"
        },
        {
            "id": "comment-16549163",
            "author": "Alan Woodward",
            "content": "Jim and I discussed this, and came up with the following:\n\n\tmatch iteration only needs two levels: the top level, and the leaf level\n\tat the leaf level, getSubMatches() will return null\n\tphrase matches should be treated\u00a0like term matches, and behave like leaves\n\tspans and intervals will allow subiteration\n\tlabel() should be getQuery(), and will return the parent query at the top level, and a TermQuery for terms at the subiteration level\n\n\n\nI'll work on a patch including Span subiteration and post it here.\u00a0 Interval subiteration will require a bit more work, so I'll open a separate issue for that. ",
            "date": "2018-07-19T11:42:18+0000"
        },
        {
            "id": "comment-16549272",
            "author": "Alan Woodward",
            "content": "A patch implementing the above.\u00a0 Folds in the SpanQuery implementation from LUCENE-8404 ",
            "date": "2018-07-19T13:28:38+0000"
        },
        {
            "id": "comment-16550491",
            "author": "Jim Ferenczi",
            "content": "+1, thanks\u00a0Alan Woodward , the patch looks good.\u00a0 ",
            "date": "2018-07-20T08:28:42+0000"
        },
        {
            "id": "comment-16552165",
            "author": "ASF subversion and git services",
            "content": "Commit 0aa63d4ae4f7cab6f55944e3318d32a3eec44135 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0aa63d4 ]\n\nLUCENE-8306: Allow iteration over submatches ",
            "date": "2018-07-22T21:27:08+0000"
        },
        {
            "id": "comment-16552166",
            "author": "ASF subversion and git services",
            "content": "Commit a8839b7eab122037ed1c1674b2f909666718e331 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a8839b7 ]\n\nLUCENE-8306: Allow iteration over submatches ",
            "date": "2018-07-22T21:27:09+0000"
        },
        {
            "id": "comment-16552167",
            "author": "Alan Woodward",
            "content": "Thanks for the reviews everyone! ",
            "date": "2018-07-22T21:27:58+0000"
        },
        {
            "id": "comment-16552174",
            "author": "ASF subversion and git services",
            "content": "Commit 0e11766330ec099e03ca9a1db91083b5272f0289 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0e11766 ]\n\nRevert \"LUCENE-8306: Allow iteration over submatches\"\n\nIncorrect patch committed in error\n\nThis reverts commit 0aa63d4ae4f7cab6f55944e3318d32a3eec44135. ",
            "date": "2018-07-22T21:37:13+0000"
        },
        {
            "id": "comment-16552175",
            "author": "ASF subversion and git services",
            "content": "Commit 6e3f61f6f9b42cb11f45b0eb97587f07e5198ba4 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6e3f61f ]\n\nRevert \"LUCENE-8306: Allow iteration over submatches\"\n\nIncorrect patch committed in error\n\nThis reverts commit a8839b7eab122037ed1c1674b2f909666718e331. ",
            "date": "2018-07-22T21:37:15+0000"
        },
        {
            "id": "comment-16552176",
            "author": "Alan Woodward",
            "content": "Committed the wrong patch, re-opening while I sort things out ",
            "date": "2018-07-22T21:37:38+0000"
        },
        {
            "id": "comment-16552513",
            "author": "ASF subversion and git services",
            "content": "Commit 2376d7dded3c0c03fa3bb9c75cc7d8c58bfcb319 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2376d7d ]\n\nLUCENE-8306: Allow iteration over submatches\n\nAlso includes LUCENE-8404, adding match iteration to SpanQuery ",
            "date": "2018-07-23T09:02:24+0000"
        },
        {
            "id": "comment-16552515",
            "author": "ASF subversion and git services",
            "content": "Commit 028c86b1fa70faeec4f7705698a59557f58bcbb0 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=028c86b ]\n\nLUCENE-8306: Allow iteration over submatches\n\nAlso includes LUCENE-8404, adding match iteration to SpanQuery ",
            "date": "2018-07-23T09:02:27+0000"
        }
    ]
}