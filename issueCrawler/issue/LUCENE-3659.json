{
    "id": "LUCENE-3659",
    "title": "Allow per-RAMFile buffer sizes based on IOContext and source of data (e.g. copy from another directory)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Spinoff from several dev@lao issues:\n\n\thttp://mail-archives.apache.org/mod_mbox/lucene-dev/201112.mbox/%3C001001ccbf1c%2471845830%24548d0890%24%40thetaphi.de%3E\n\tissue LUCENE-3653\n\n\n\nThe use cases for RAMDirectory are very limited and to prevent users from using it for e.g. loading a 50 Gigabyte index from a file on disk, we should improve the javadocs.",
    "attachments": {
        "LUCENE-3659.patch": "https://issues.apache.org/jira/secure/attachment/12519809/LUCENE-3659.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-20T15:27:14+0000",
            "content": "From the dev list, didn't want to lose this background (or make Uwe type it again <G>)\n\nThe idea was to maybe replace RAMDirectory by a \u201cclone\u201d of MMapDirectory that uses large DirectByteBuffers outside the JVM heap. The current RAMDirectory is very limited (buffersize hardcoded to 8 KB, if you have a 50 Gigabyte Index in this RAMDirectory, your GC simply drives crazy \u2013 we investigated this several times for customers. RAMDirectory was in fact several times slower than a simple disk-based MMapDir). Also the locking on the RAMFile class is horrible, as for large indexes you have to change buffer several times when seeking/reading/\u2026, which does heavily locking. In contrast, MMapDir is completely lock-free!\n\nUntil there is no replacement we will not remove it, but the current RAMDirectory is not useable for large indexes. That\u2019s a limitation and the design of this class does not support anything else. It\u2019s currently unfixable and instead of putting work into fixing it, the time should be spent in working on a new ByteBuffer-based RAMDir with larger blocs/blocs that merge or IOContext helping to calculate the file size before writing it (e.g. when triggering a merge you know the approximate size of the file before, so you can allocate a buffer that\u2019s better than 8 Kilobytes). Also directByteBuffer helps to make GC happy, as the RAMdir is outside JVM heap.....\n\nRAMdir uses more time for switching buffers than reading the data. The problem is that MMapDir does not support writing and that why we plan to improve this. Have you tried MMapDir for read access in comparison to RAMDirectory for a larger index, it outperforms several times (depending on OS and if file data is in FS cache already). The new directory will simply mimic the MMapIndexInput, add MMapIndexOutput, but not based on a mmapped buffer, instead a in-memory (Direct)ByteBuffer (outside or inside JVM heap \u2013 both will be supported). This simplifies code a lot.\n\nThe discussions about the limitations of crappy RAMDirectory were discussed on conferences, sorry. We did *not*decide to remove it (without a patch/replacement). The whole \u201cmessage\u201d on the issue was that RAMDirectory is a bad idea. The recommended approach at the moment to handle large in-ram directories would be to use a tmpfs on Linux/Solaris and use MMapDir on top (for larger indexes). The MMap would then directly map the RAM of the underlying tmpfs..... ",
            "author": "Erick Erickson",
            "id": "comment-13173247"
        },
        {
            "date": "2011-12-20T15:31:44+0000",
            "content": "It's even worse, it uses a buffer size of 1 Kilobyte:\n\n\npublic class RAMOutputStream extends IndexOutput {\n  static final int BUFFER_SIZE = 1024;\n\n\n\nA 50 Gigabyte file means 52428800 byte[] arrays  ",
            "author": "Uwe Schindler",
            "id": "comment-13173252"
        },
        {
            "date": "2011-12-20T15:39:58+0000",
            "content": "I actually think heap versus direct is just an optimization (and ideally would just be an option, in my opinion not the default).\nThe problem is mostly tiny buffers.\n\nI think a good idea is to rename MMapIndexInput to ByteBufferIndexInput, it does not really care if something is mapped or not, it has all the logic for dealing with multiple fixed-size buffers.\n\nAnd RAMDirectory could then just use 1MB shift by default (normal heap array-backed buffers). Sure it wastes at most 1MB for tiny files but the RAMFile is wasteful today too.\n\nDown the road we could optimize this: e.g. add IOContext.METADATA for tiny files (segments.gen, .fnm, segments_N, .per, etc), and RAMDir could use say a 256KB shift there and 4MB otherwise. This iocontext flag could also be used if someone didnt want to MMap tiny-files too. ",
            "author": "Robert Muir",
            "id": "comment-13173255"
        },
        {
            "date": "2011-12-22T18:15:39+0000",
            "content": "Uwe: Hey, have you looked at LUCENE-2292, this can be a good candidate to use to replace RAM directory. I just \"refreshed\" it and it seems to work find (all tests pass). ",
            "author": "Shay Banon",
            "id": "comment-13174946"
        },
        {
            "date": "2012-01-17T21:20:10+0000",
            "content": "should we make this a blocker for 4.0? ",
            "author": "Simon Willnauer",
            "id": "comment-13188008"
        },
        {
            "date": "2012-01-17T23:08:21+0000",
            "content": "If I remember the misinformation about using RAMDir going on, yes, it's a blocker - just look at java-user@lao last week, those mails about people saying \"I want to copy my  20 Gigabyte FSDir to a RAMDir because it's faster as it has the word 'RAM' in it\" looks more like a XY problem than a good reason for using it). MMapDir and even NIOFSDir work mostly from RAM, as the OS will cache for you.\n\nOn the other hand, it's just documentation we can do it always.\n\nFixing the default buffer size to something more suitable for real-world use cases is something that can be done with a one-line-patch. I would prefer 64 Kilobytes buffer size. ",
            "author": "Uwe Schindler",
            "id": "comment-13188111"
        },
        {
            "date": "2012-03-21T21:59:00+0000",
            "content": "I think we should fix at least JavaDocs for 3.6 and maybe raise buffersize. I will provide a patch tomorrow. ",
            "author": "Uwe Schindler",
            "id": "comment-13235083"
        },
        {
            "date": "2012-03-24T17:16:46+0000",
            "content": "I started to work on this, here is just a first step (trunk). This patch removes the BUFFER_SIZE constant and moves it up to RAMDirectory (but for now only as default, see below!). RAMDirectory inherits the default buffersize for now to its RAMFile childs (newRAMFile() method), but this can likely change (see below).\n\nAs every RAMFile has its own buffer size, optimizations are possible:\n\n\twhen you open an IndexOutput, in trunk we get the IOContext, which may contain a Merge/Flush desc containing the complete segment size (unfortunately the complete segment size). But this number can be used as a order of magnitude for specifiing the buffer size.\n\n\n\nThe patch does not yet implement that, but an idea would be to maybe allocate 1/32 of the segment size as buffer size. By that the buffer size does not get too big, but on the other hand the number of slices has an upper limit (approx 32 slices per merged segment). Currently a merged segment with a size of say 32 Gigabytes would have 32 million byte[] arrays, after the change only 32 byte[] arrays with a size of 1 Gigabyte each. This should make GC happy.\n\nWhen backporting to 3.x, the IOContext is not yet available and RAMDirectory always uses the default buffer size (maybe randomize in tests). Rainsing the buffer size should bring improvements here.\n\nWe should still add some warnings into the Javadocs, that for large indexes it is often preferable to use MMapDir, especially when you store it on disk. We should also peple tell that new RAMDirectoty(OtherDirectory) maybe a bad idea...\n\nThe new default buffer size was raised from 1024 to 8192. ",
            "author": "Uwe Schindler",
            "id": "comment-13237605"
        },
        {
            "date": "2012-03-25T16:57:44+0000",
            "content": "Honestly I don't even have the time to review the patch: I'm sure Uwe's changes (as always)\nare very nice and thorough.\n\nI just want to propose the idea of a javadocs-only fix for 3.6: I am afraid of any .store changes,\nexcept serious bugfixes (with serious tests to go with them) this close to release. ",
            "author": "Robert Muir",
            "id": "comment-13237927"
        },
        {
            "date": "2012-03-26T11:12:16+0000",
            "content": "A played a little bit around and implemented the IOContext / filename dependent buffer sizes for RAMFiles.\n\nThe code currently prints out lot's of size infornation (like buffer sizes) on RAMDirectory.close(). This is just for debugging and to show what happens.\n\nTo catually see real-world use cases, execute tests with ant test -Dtests.directory=RAMDirectory -Dtests.nightly=true ",
            "author": "Uwe Schindler",
            "id": "comment-13238274"
        },
        {
            "date": "2012-03-26T11:33:46+0000",
            "content": "More improvements:\n\n\tIf you use new RAMDirectory(existingDir), the RAMFiles in the created RAMDirectory will have the original fileSize (if less then 1L << 30 bytes) as bufferSize, as we know the file size upfront.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13238286"
        },
        {
            "date": "2012-03-26T14:00:20+0000",
            "content": "This looks great Uwe!\n\nI'm a little worried about the tiny file case; you're checking for\nSEGMENTS_* now, but many other files can be much smaller than 1/64th\nof the estimated segment size.\n\nI wonder if we should \"improve\" IOContext to hold the [rough]\nestimated file size (not just overall segment size)... the thing is\nthat's sort of a hassle on codec impls.\n\nOr: maybe, on closing the ROS/RAMFile, we can downsize the final\nbuffer (yes, this means copying the bytes, but that cost is vanishingly\nsmall as the RAMDir grows).  Then tiny files stay tiny, though they\nare still [relatively] costly to create...\n\nI don't this RAMDir.createOutput should publish the RAMFile until the\nROS is closed?  Ie, you are not allowed to openInput on something\nstill opened with createOutput in any Lucene Dir impl..?  This would\nallow us to make RAMFile frozen (eg if ROS holds its own buffers and\nthen creates RAMFile on close), that requires no sync when reading?\n\nI also don't think RAMFile should be public, ie, the only way to make\nchanges to a file stored in a RAMDir is via RAMOutputStream.  We can\ndo this separately...\n\nMaybe we should pursue a growing buffer size...?  Ie, where each newly\nadded buffer is bigger than the one before (like ArrayUtil.oversize's\ngrowth function)... I realize that adds complexity\n(RAMInputStream.seek is more fun), but this would let tiny files use\ntiny RAM and huge files use few buffers.  Ie, RAMDir would scale up\nand scale down well.\n\nSeparately: I noticed we still have IndexOutput.setLength, but, nobody\ncalls it anymore I think?  (In 3.x we call this when creating a CFS).\nMaybe we should remove it... ",
            "author": "Michael McCandless",
            "id": "comment-13238402"
        },
        {
            "date": "2012-03-26T14:04:15+0000",
            "content": "\nI'm a little worried about the tiny file case; you're checking for\nSEGMENTS_* now, but many other files can be much smaller than 1/64th\nof the estimated segment size.\n\nI wonder if we should \"improve\" IOContext to hold the [rough]\nestimated file size (not just overall segment size)... the thing is\nthat's sort of a hassle on codec impls.\n\nMaybe its enough for IOContext to specify that its writing a 'metadata'\nfile? These are all the tiny ones (fieldinfos, segmentinfos, .cfe, etc),\nas opposed to 'real files' like frq or prx that are expected to be possibly huge.\n ",
            "author": "Robert Muir",
            "id": "comment-13238407"
        },
        {
            "date": "2012-03-26T14:45:16+0000",
            "content": "Robert: That was the first idea that came to my mind, too. I think thats a good idea. It especially strange that the segments_xx/segments.gen file (which is not part of the current segment) is written with MERGE/FLUSH context. It should be written with a standard context? Or do I miss something? (This was the reason why I added the file name check). Initially I was expecting that writing the commit is done with a separate IOContext, but it isn't - the noisy debugging helps. ",
            "author": "Uwe Schindler",
            "id": "comment-13238441"
        },
        {
            "date": "2012-03-26T14:55:08+0000",
            "content": "I think if we were to implement it this way, its not a burden on codecs.\nBy default, somewhere in lucene core inits the codec APIs with a context always.\nFor example SegmentInfos.write():\n\ninfosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n\n\n\nand DocFieldProcessor/SegmentMerger for fieldinfos:\n\ninfosWriter.write(state.directory, state.segmentName, state.fieldInfos, IOContext.DEFAULT);\n\n\n\nThese guys would just set this in the IOContext. Most/All codecs just pass this along.\nIf a codec wants to ignore the IOContext and lie about it, thats its own choice.\nSo I think its an easy change. ",
            "author": "Robert Muir",
            "id": "comment-13238448"
        },
        {
            "date": "2012-03-26T14:57:01+0000",
            "content": "I'm torn on the binary \"metadata\" idea... not all files cleanly fall into one category?\n\nEg what about live doc bits?  It can easily be tiny (we write a sparse set sparsely).\n\nIndices w/ immense docs will also start to look like they have tiny files that are not metadata (eg, fdx file, if they don't store fields). ",
            "author": "Michael McCandless",
            "id": "comment-13238451"
        },
        {
            "date": "2012-03-26T14:57:45+0000",
            "content": "But also codecs that write their own private tiny metadata files (like .per from PerFieldPostingsFormat)\nshould set this in the context. ",
            "author": "Robert Muir",
            "id": "comment-13238453"
        },
        {
            "date": "2012-03-26T14:58:58+0000",
            "content": "Live docs aren't a metadata. I think you are conflating 'tiny' with 'metadata'.\n\nI'm saying we should declare its metadata, thats all. This is pretty black and white!\n\nIF a directory wants to, as a heuristic, interpret metadata == tiny, then thats fine,\nbut thats separate. ",
            "author": "Robert Muir",
            "id": "comment-13238454"
        },
        {
            "date": "2012-03-27T12:36:01+0000",
            "content": "\nI also don't think RAMFile should be public, ie, the only way to make\nchanges to a file stored in a RAMDir is via RAMOutputStream. We can\ndo this separately...\n\nRAMFile's public ctor without directory is only used by PrefixCodedTerms, itself used only by FrozenBufferedDeletes. I don't really see the real use case to do this like that. We can maybe replace that using a FST (it is already sorted by BytesRef) or using PagesBytes? Alternatively replace the whole thing with OutputStreamDataOutput(new ByteArrayOutputStream())? ",
            "author": "Uwe Schindler",
            "id": "comment-13239407"
        },
        {
            "date": "2012-03-27T13:54:57+0000",
            "content": "oops: I did that, sorry. \n\nit just wants a thing that combined byte[] slices that you can \nget datainput from, so it seemed like the right thing? ",
            "author": "Robert Muir",
            "id": "comment-13239463"
        },
        {
            "date": "2012-07-19T17:52:42+0000",
            "content": "Hi,\nI will soon work again on that. I have some comments:\n\n\n\tWe can remove the heavy synchronization bottleneck on RAMFile. RAMFile should only have final fields and should be created after the file is written., This should improve performance alltogether. The current synchronization is needed to \"emulate\" real file system behaviour (file is visible in directory with 0 bytes once created). This behaviour is not needed at all by Lucene. We should make the file visible in the ConcurrentHashMap of RAMDirectory once the IndexOutput is closed! We should create the RAMFile instance on this stage not before (so all is final). By this all sync on RAMFile can be removed.\n\tWe should add IOContext.META\n\tMaybe we should rename RAMDirectory in trunk / 4.x to HeapDirectory. So we can have other impls like DirectBufferDirectory or whatever (see Shay Bannon's LUCENE-2292)\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13418498"
        },
        {
            "date": "2012-07-19T18:00:05+0000",
            "content": "There is a patch somewhere to factor out the MMapIndexInput into a general ByteBufferIndexInput if you follow the same rules.\n\nI think we can just use that? you can have a direct and array-backed version (just have some hook to allocate a new ByteBuffer of some size). I think we should just start with the array-backed one for simplicity. Maybe the direct one can avoid some arrays bounds checks, but otherwise its not really\nrelated to the stupidity of current ramdirectory. arrays are fine, its just they shouldnt be so tiny etc. ",
            "author": "Robert Muir",
            "id": "comment-13418509"
        },
        {
            "date": "2012-08-16T11:55:12+0000",
            "content": "Patch updated to trunk. I will work on this soon. ",
            "author": "Uwe Schindler",
            "id": "comment-13435915"
        },
        {
            "date": "2013-07-23T18:44:42+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717029"
        },
        {
            "date": "2014-04-16T12:54:25+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970748"
        },
        {
            "date": "2018-11-09T23:05:15+0000",
            "content": "RAMDirectory is now deprecated and should no longer be used. ",
            "author": "Uwe Schindler",
            "id": "comment-16682048"
        }
    ]
}