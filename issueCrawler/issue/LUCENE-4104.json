{
    "id": "LUCENE-4104",
    "title": "Clearly document the limit for maximum number of documents in a single index",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Although the \"int\" in a number of APIs strongly suggests the approximate limit to the number of documents than can exist in a single Lucene index, it would be useful to have the specific number more clearly documented.\n\nMy reading suggests that the limit is 2^31-2 so that the count of documents, 0 to 2^31-2, will fit in an int as Integer.MAX_VALUE or 2^31-1 or 2,147,483,647.\n\nSymbolic definitions of the maximum document number and maximum number of documents, as well as the first document number should also be provided.\n\nA subsequent issue will be to detect and throw an exception when that limit is exceeded.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-03T21:25:12+0000",
            "content": "I propose to add these constants to IndexWriter:\n\nstatic final int MAX_DOCUMENT_NUMBER = Integer.MAX_VALUE - 1;\nstatic final int MIN_DOCUMENT_NUMBER = 0;\nstatic final int MAX_DOCUMENT_COUNT = MAX_DOCUMENT_NUMBER - MIN_DOCUMENT_NUMBER + 1;\n\nAnd add these to IndexReader for convenience:\n\nstatic final int MAX_DOCUMENT_NUMBER = IndexWriter.MAX_DOCUMENT_NUMBER;\nstatic final int MIN_DOCUMENT_NUMBER = IndexWriter.MIN_DOCUMENT_NUMBER;\nstatic final int MAX_DOCUMENT_COUNT = IndexWriter.MAX_DOCUMENT_COUNT;\n\nAdd to the IndexWriter class javadoc at the class level and in the addDocument, addDocuments, and maybe updateDocuments methods:\n\n\"NOTE: the maximum number of documents in a single Lucene index is defined by MAX_DOCUMENT_COUNT which is 2,147,483,647 in the current implementation, but in practice that number will be reduced by deleted documents and may not be achievable with available memory in the JVM.\" ",
            "author": "Jack Krupansky",
            "id": "comment-13288263"
        }
    ]
}