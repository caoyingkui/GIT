{
    "id": "SOLR-7151",
    "title": "SolrClient.query() methods should throw IOException",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "All the methods on SolrClient are declared as throwing SolrServerException (thrown if there's an error somewhere on the server), and IOException (thrown if there's a communication error), except for the QueryRequest methods.  These swallow up IOException and repackage them in a SolrServerException.\n\nI think these are useful distinctions to make (you might want to retry on an IOException, but not on a SolrServerException), and we should make the query methods fall in line with the others.\n\nI'm not sure if this should go into 5.x as well as trunk, as it's a backwards-breaking change.  I'm leaning towards yes, as it's a sufficiently useful API change that it's worth the break, but I'm not going to insist on it.",
    "attachments": {
        "SOLR-7151.patch": "https://issues.apache.org/jira/secure/attachment/12700477/SOLR-7151.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-24T10:59:19+0000",
            "author": "Alan Woodward",
            "content": "Patch, building on top of the patch on SOLR-7145. ",
            "id": "comment-14334768"
        },
        {
            "date": "2015-02-24T13:54:27+0000",
            "author": "Shawn Heisey",
            "content": "I'm not sure if this should go into 5.x as well as trunk, as it's a backwards-breaking change. I'm leaning towards yes, as it's a sufficiently useful API change that it's worth the break, but I'm not going to insist on it.\n\n+1 to 5x.  I have no idea whether I'm in the minority here.  I fully expect that anytime I update a library (like SolrJ) that my program uses, I may need to fix my code, and at the very least I will need to recompile my programs.  If the change is documented in whatever the package has for a CHANGES file, that's even better.\n\nSo far I've been extraordinarily lucky in that I've only needed to make changes to take advantage of new features, the code has always compiled successfully on SolrJ updates.  It's a bonus that I did not expect; I'm OK with minor changes in the API.  Large scale refactorings in a minor version update might bother me, but only if they do not come with a major advancement in the library's usability or capability.\n\nTo put it another way: If CHANGES.txt informs me that I may not be able to do a drop-in jar replacement with that minor update, that's enough notice for me ... although I would have assumed that anyway. ",
            "id": "comment-14334881"
        },
        {
            "date": "2015-02-24T14:59:06+0000",
            "author": "Mark Miller",
            "content": "I think the tradeoffs have to be weighed pretty carefully. We want to get to the point that you can do rolling upgrades and such, and back compat breaks, while sometimes necessary, especially in the early days of APIs, need to become more and more rare for point releases I think.\n\nI'd like to start a new trend of annotating what API's can be counted on and what not before long. We are great about http, but anything java is a mine field. And soon we would like to support rolling upgrades to some degree. \n\nIn this case, I'm not sure the win is worth the break myself. But it also of the type we have let slide before. ",
            "id": "comment-14334957"
        },
        {
            "date": "2015-02-24T15:06:37+0000",
            "author": "Alan Woodward",
            "content": "We are great about http, but anything java is a mine field. And soon we would like to support rolling upgrades to some degree.\n\nAgreed!  I don't think this will effect rolling upgrades, though?  This just changes how the client handles exceptions - you can still talk to a 5.1 server using a 4.10 client, and vice versa. ",
            "id": "comment-14334980"
        },
        {
            "date": "2015-02-25T11:31:00+0000",
            "author": "Alan Woodward",
            "content": "Mark Miller do you have any objections to me committing this to 5.x? ",
            "id": "comment-14336379"
        },
        {
            "date": "2015-02-27T12:20:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662670 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1662670 ]\n\nSOLR-7151: SolrClient query methods throw IOException ",
            "id": "comment-14340071"
        },
        {
            "date": "2015-02-27T12:22:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662671 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1662671 ]\n\nSOLR-7151: CHANGES.txt attribution ",
            "id": "comment-14340075"
        },
        {
            "date": "2015-02-27T12:33:30+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662672 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662672 ]\n\nSOLR-7151: CHANGES.txt attribution ",
            "id": "comment-14340085"
        },
        {
            "date": "2015-04-15T00:30:28+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495294"
        }
    ]
}