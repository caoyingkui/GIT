{
    "id": "SOLR-6091",
    "title": "Race condition in prioritizeOverseerNodes can trigger extra QUIT operations",
    "details": {
        "affect_versions": "4.7,                                            4.8",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "When using the overseer roles feature, there is a possibility of more than one thread executing the prioritizeOverseerNodes method and extra QUIT commands being inserted into the overseer queue.\n\nAt a minimum, the prioritizeOverseerNodes should be synchronized to avoid a race condition.",
    "attachments": {
        "SOLR-6091.patch": "https://issues.apache.org/jira/secure/attachment/12645572/SOLR-6091.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14001911",
            "date": "2014-05-19T15:44:57+0000",
            "content": "Changes\n\n\tMake prioritizeOverseerNodes synchronized\n\tMake OCP.isClosed volatile\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14003983",
            "date": "2014-05-20T21:18:08+0000",
            "content": "Would it be a good idea to include the overseer leader node name for which the QUIT message is intended? I imagine that it'd help us catch wrong/extra QUITs and race conditions during testing? "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14004008",
            "date": "2014-05-20T21:33:38+0000",
            "content": "I think that's a good idea, and maybe we can go further and include the id in the /overseer/leader file (e.g. 91790253334528928-<host>:8983_solr-n_0000000013) so that the Overseer would only quit if its ID actually matched it completely. It'd be like a CAS--do this operation only if the state I read to make this decision is still valid. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14004036",
            "date": "2014-05-20T21:58:56+0000",
            "content": "maybe we can go further and include the id in the /overseer/leader file (e.g. 91790253334528928-<host>:8983_solr-n_0000000013) so that the Overseer would only quit if its ID actually matched it completely.\n\n+1\n\nI'll work up a patch and try it out. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14004671",
            "date": "2014-05-21T13:44:00+0000",
            "content": "Jessica Cheng Mallet I implemented this and I see the race condition happening in my cluster "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14005264",
            "date": "2014-05-21T21:29:57+0000",
            "content": "Noble Paul Do you mean you still see race condition with this implementation (wrong overseer quitting), or do you mean that you have caught the race condition in your cluster? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14011302",
            "date": "2014-05-28T16:49:46+0000",
            "content": "I have fixed this and I have logged it whenever a race condition occurs. So , the logs say that the race condition occurs . But after a few (10+) restarts I could still end up without an Overseer . SOLR-6095 is another issue I have identified and fixed it for local testing . So these 2 issues together have resolved the problem. I have patches for both and will post them once some tests are added "
        }
    ]
}