{
    "id": "LUCENE-4065",
    "title": "FilteringTokenFilter should never corrupt the tokenstream graph",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently removers like stopfilter have an option (true/false) to enable position increments.\n\nIf its true: it both inserts gaps where necessary AND propagates gaps down the stream.\nIf its false: it does neither, which can totally mess up the tokenstream graph (e.g. move synonyms to another word).\n\nThere are totally valid natural usecases for false, where you don't want gaps because you want phrasequeries to act as if the word was never actually there.\n\nBut 'not inserting gaps' is separate from proper propagation of existing gaps.\n\nSo I think we should provide an option (either fix 'false' or make it an enum), where you still get a legit tokenstream and dont totally screw it up, but you simply omit gaps.\n\nSee LUCENE-3848 for more information (Where we at least fixed this case to not begin the tokenstream with posinc=0)",
    "attachments": {
        "LUCENE-4065_test.patch": "https://issues.apache.org/jira/secure/attachment/12527833/LUCENE-4065_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-17T13:40:30+0000",
            "content": "test case (boiled down from testrandomchains)\n\nA much simpler one could be made. ",
            "author": "Robert Muir",
            "id": "comment-13277802"
        },
        {
            "date": "2012-05-17T13:44:07+0000",
            "content": "Another way to see it:\nimagine i have 'my test case'\nand i have a synonyms set with a single mapping: test=example\n\nSo synonymfilter makes: 'my test/example case'. Example has posinc=0\n\nif we have a stopfilter with posinc=false that has a single stopword (test),\nthen we end out with 'my/example case'.\n\nBut in my opinion this should be 'my example case': e.g. we should propagate\nthe posinc=1 of 'test' to example. We arent introducing a gap though, just preventing\ninsane graph corruption and restacking of synonyms. ",
            "author": "Robert Muir",
            "id": "comment-13277805"
        },
        {
            "date": "2013-01-09T16:34:23+0000",
            "content": "[trunk commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1430939\n\nLUCENE-4065: shitlist these broken ctors so they dont cause false fails ",
            "author": "Commit Tag Bot",
            "id": "comment-13548651"
        },
        {
            "date": "2013-01-09T16:42:51+0000",
            "content": "[branch_4x commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1430944\n\nLUCENE-4065: shitlist these broken ctors so they dont cause false fails ",
            "author": "Commit Tag Bot",
            "id": "comment-13548662"
        },
        {
            "date": "2016-09-03T02:21:31+0000",
            "content": "enable position increments is incredibly useful for shingles filter in ES in particular, ending up with pairs like \"_ _\" is unpractical. thanks. ",
            "author": "Eduard Dudar",
            "id": "comment-15460164"
        },
        {
            "date": "2018-02-21T21:32:24+0000",
            "content": "Robert Muir commented over on https://issues.apache.org/jira/browse/SOLR-11968?focusedCommentId=16370916&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16370916 about this issue:\n\n\nI think the issue is still valid, its a little more complex now because of positionLength (means more buffering when you see posLength > 1, because you'll need to adjust if you remove something in its path), but the idea is the same: give the user a choice between \"insert mode\" and \"replace mode\". But this new \"insert mode\" would actually work correctly, correcting posLengths before and posIncs after as appropriate. similar to how your editor might have to recompute some line breaks/word wrapping and so on.\n\nIf you have baseball (length=2), base(length=1), ball(length=1), and you delete \"base\" in this case, you need to change baseball's length to 1 before you omit it, because you deleted base. Thats the \"buffering before\" that would be required for posLength. And you still need the same buffering described on the issue for posInc=0 that might occur after the fact, so you don't wrongly transfer synonyms to different words entirely.\n\nIt would be slower than \"replace mode\" that we have today, but only because of the buffering, and I think its pretty contained, but I haven't fully thought it thru or tried to write any code.\n\n +1, though I find the nomenclature confusing; in your proposed \"insert mode\", token deletions would not leave any trace of the deleted tokens \u2013 in posinc and poslen \u2013 right?  (I get that you mean \"insert mode\" and \"replace mode\" as a metaphoric for editor operations.)  Isn't the issue just whether to leave gaps (as indicated by posinc and poslen) where deleted tokens were? ",
            "author": "Steve Rowe",
            "id": "comment-16372046"
        },
        {
            "date": "2018-02-21T21:52:26+0000",
            "content": "Yeah, you've got it. I really prefer your enableGaps name. Sorry, the issue is just confusing and I was struggling to try to explain it.\n\nToday enableGaps is always true, which makes deletions pretty simple for FilteringTokenFilter. We just have to track an int variable! \n\nBut I think we can potentially support enableGaps=false, and adjust positionIncrements/positionLengths so that the result is sane. That's the idea of this issue. I think no user really wanted to disable position increments entirely before, nobody wants to move synonyms to the incorrect words or anything like that. They just want control over whether there are gaps or not: it impacts things like phrase queries. ",
            "author": "Robert Muir",
            "id": "comment-16372072"
        },
        {
            "date": "2018-02-22T23:56:30+0000",
            "content": "Based on Jim Ferenczi's comment on SOLR-11968, I created a failing test for StopFilter that shows that StopFilter can (still) corrupt the token stream - the failure message says that \"walking\" gets a posinc of 1 instead of 2, which means that the only way to interpret the \"twd\" token's poslen of 3 is as a trailing gap, which is misplaced:\n\nTestStopFilterFactory.java\n  public void testLeadingStopwordSynonymGraph() throws Exception {\n    SynonymMap.Builder builder = new SynonymMap.Builder(true);\n    builder.add(new CharsRef(\"twd\"), new CharsRef(\"the\\u0000walking\\u0000dead\"), true);\n    final SynonymMap synonymMap = builder.build();\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer();\n        TokenStream stream = new SynonymGraphFilter(tokenizer, synonymMap, true);\n        stream = new StopFilter(stream, CharArraySet.copy(Collections.singleton(\"the\")));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"twd\");\n    assertTokenStreamContents(tokenStream, \n        new String[] { \"twd\", \"walking\", \"dead\" },\n        null, null, \n        new int[]    { 1,     2,         1      },  // posinc\n        new int[]    { 3,     1,         1      },  // poslen\n        null);\n  }\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16373703"
        },
        {
            "date": "2018-02-23T00:19:14+0000",
            "content": "Well, i think thats a separate, \"new\" issue, related to positionLength. Keep in mind this JIRA issue was open before positionLength even existed at all. i think its totally separate from the whole idea of giving the user a gaps option.\n\nThis is what the thing looks like before stopfilter sees it. When you delete \"the\", it just transfers the 1 to twd. It doesn't currently look at positionlength at all.\n\n\nSynonymGraphFilter->term=the,positionIncrement=1,positionLength=1,type=SYNONYM,termFrequency=1\nSynonymGraphFilter->term=twd,positionIncrement=0,positionLength=3,type=word,termFrequency=1\nSynonymGraphFilter->term=walking,positionIncrement=1,positionLength=1,type=SYNONYM,termFrequency=1\nSynonymGraphFilter->term=dead,positionIncrement=1,positionLength=1,type=SYNONYM,termFrequency=1\n\n\n\nTo be honest, its unclear if stopfilter is really the culprit. Its definitely funky the way that SynonymGraphFilter makes the original word \"twd\" a \"synonym\" (posInc=0)... i think if it didn't do that, you wouldn't have that problem in this case. But i don't know if its a general solution to your problem.\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-16373727"
        },
        {
            "date": "2018-02-23T00:50:30+0000",
            "content": "i think its totally separate from the whole idea of giving the user a gaps option.\n\nMaybe change the issue title to that then?  (I was lumping it here because it's a form of token stream corruption)\n ",
            "author": "Steve Rowe",
            "id": "comment-16373746"
        },
        {
            "date": "2018-02-23T00:57:21+0000",
            "content": "Yeah, i mean we should split it up. Its probably more important to figure out what this thing should be doing in the graph case (positionLengths). Because before the stopfilter i've got a total of 3 positions (1 + 0 + 1 + 1). Today the stopfilter deletes \"the\" and transfers the position to \"twd\", so i've still got 3 positions (1 + 1 + 1). \n\nBut your testcase argues that this should be 4 positions (1 + 2 + 1). I'm just not convinced thats the correct behavior: its unintuitive to me that a stopfilter would make a document \"longer\" in the sense of actually adding additional positions... (no, it doesn't impact length normalization because this value isn't used for that, but its just really confusing). ",
            "author": "Robert Muir",
            "id": "comment-16373757"
        },
        {
            "date": "2018-02-23T01:13:15+0000",
            "content": "But your testcase argues that this should be 4 positions (1 + 2 + 1). I'm just not convinced thats the correct behavior: its unintuitive to me that a stopfilter would make a document \"longer\" in the sense of actually adding additional positions... (no, it doesn't impact length normalization because this value isn't used for that, but its just really confusing).\n\nYeah I think my testcase is just wrong - StopFilter's behavior actually looks correct here to me (testcase can be fixed by changing the \"walking\" posinc  2 -> 1, which no longer fails).  I guess I misinterpreted Jim's example as graph corruption, which this doesn't look like to me. ",
            "author": "Steve Rowe",
            "id": "comment-16373774"
        }
    ]
}