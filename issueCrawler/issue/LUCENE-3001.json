{
    "id": "LUCENE-3001",
    "title": "Add TrieFieldHelper lucene so we can write solr compatible Trie* fields w/o solr dependency",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "The solr support for numeric fields writes the stored value as binary vs the lucene NumericField\n\nWe should move this logic to a helper class in lucene core so that libraries that do not depend on solr can write TrieFields that solr can read.",
    "attachments": {
        "LUCENE-3001-TrieFieldHelper.patch": "https://issues.apache.org/jira/secure/attachment/12474900/LUCENE-3001-TrieFieldHelper.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-03-29T16:45:14+0000",
            "content": "This patch moves logic from TrieField to a helper class in lucene ",
            "author": "Ryan McKinley",
            "id": "comment-13012551"
        },
        {
            "date": "2011-03-29T17:29:49+0000",
            "content": "This is trivial now that lucene+solr share dev.\n\nI'd will commit soon. ",
            "author": "Ryan McKinley",
            "id": "comment-13012566"
        },
        {
            "date": "2011-03-29T17:46:08+0000",
            "content": "Added to trunk in #1086651\n\nI'll wait for 3.1 release \u2013 and potentially more discussion \u2013 to port to 3.1 ",
            "author": "Ryan McKinley",
            "id": "comment-13012574"
        },
        {
            "date": "2011-03-29T19:46:06+0000",
            "content": "Hi, sorry I saw the commit but this is not in line with current Lucene:\n\n\n\tLucene uses Numeric* not Trie* (trie is only used in solr, historically because there were other numeric fields before)\n\tThis helper is somehow a ugly replacement for NumericField, the encoding should be in NumericField itsself, maybe using a \"binary stored\" type in its ctor.\n\n\n\nSo please revert this and put it into a Solr util! This commit was much too fast and without discussion. ",
            "author": "Uwe Schindler",
            "id": "comment-13012644"
        },
        {
            "date": "2011-03-29T20:06:27+0000",
            "content": "The solr support for numeric fields writes the stored value as binary vs the lucene NumericField\n\nWhy is this done in two different ways? Can we fix it so we only have one numerics encoding? ",
            "author": "Robert Muir",
            "id": "comment-13012660"
        },
        {
            "date": "2011-03-29T20:14:09+0000",
            "content": "I backed this out of lucene for now.\n\nIt would be great to have a way to write numeric fields that are compatible with solr without solr dependencies.  (spatial, etc) ",
            "author": "Ryan McKinley",
            "id": "comment-13012667"
        },
        {
            "date": "2011-03-29T20:28:33+0000",
            "content": "I'd like to keep Solr's binary encoding.\nPerhaps Lucene should switch to that? ",
            "author": "Yonik Seeley",
            "id": "comment-13012671"
        },
        {
            "date": "2011-03-29T20:42:17+0000",
            "content": "The problem with the binary encoding in Lucene is/was: Lucene lacks a schema, so you cannot use the Document.get() methods on the search results to \"easy\" get the field. This is why the NumericField (which is not returned on retrieving search results) was simply encoded as String values. The stored field contents are not really relevant to search, the toString() was only added to NumericField to support an easy to use encoding.\n\nThe problem is again compatibility: Lucene must still support the old encoding and lots of software relies on it (because you can simply use Document.get() on search results). So I propose to extend NumericField to have it's own Field.Store enum (that provides both stored field encodings). The default precisionStep should not be changed (and solr should also switch to 4 as default).\n\nThen somebody can use: new NumericField(precisionStep, NumericField.Store.STRING / NumericField.Store.BINARY,...). Solr can then also return NumericField instances in it getFieldable() method. For decoding search results some wrapper must be provided to Lucene (until we have a schema).\n\nThis is just a starting point for discussion. ",
            "author": "Uwe Schindler",
            "id": "comment-13012680"
        },
        {
            "date": "2011-03-29T20:49:59+0000",
            "content": "With stored fields we are free to store flags w/ each stored field.  Meaning, each doc has its own \"private schema\".\n\nEG we can record that \"this field is a NumericField\" and store it in binary format.\n\nThen, we can also provide a NumericField at search time (instead of \"normal\" field from converting the numeric value from indexing time, to a string).\n\nDoes that help?  Is the binary format better/preferred (because it's more compact)? ",
            "author": "Michael McCandless",
            "id": "comment-13012689"
        },
        {
            "date": "2011-03-29T20:53:56+0000",
            "content": "The default precisionStep should not be changed (and solr should also switch to 4 as default).\n\nI don't see why Solr needs to match Lucene everywhere.  I tested myself, and the size deltas with smaller precision steps were pretty large.  I think Solr's defaults should stay as they are and only lowered when one desires a different tradeoff (faster range queries for larger index size). ",
            "author": "Yonik Seeley",
            "id": "comment-13012694"
        },
        {
            "date": "2011-03-29T21:14:41+0000",
            "content": "I don't see why Solr needs to match Lucene everywhere. I tested myself, and the size deltas with smaller precision steps were pretty large. I think Solr's defaults should stay as they are and only lowered when one desires a different tradeoff (faster range queries for larger index size).\n\nThose comments are contraproductive for this issue. So the correct way to solve this would be: Won't fix. For me as a pure-Lucene user this is of course the only correct fix to solve this  ",
            "author": "Uwe Schindler",
            "id": "comment-13012705"
        },
        {
            "date": "2011-03-29T21:42:15+0000",
            "content": "EG we can record that \"this field is a NumericField\" and store it in binary format.\n\nWe have lots of unused bits in the index format for the type (compressed...). A numeric field is nothing different from a string or binary field in the underlying index format, all are byte[] in trunk. String uses an utf8 decoder to produce a string from byte[], NumericField uses this ByteBuffer.wrap(byte[]).getXxx()-like stuff. FieldsReader can handle this.\n\nI already proposed that in 2.9 but we got strong -1 from some committers. This would make the API clean. I would propose that for 4.0 (maybe when we get codecs for stored fields). ",
            "author": "Uwe Schindler",
            "id": "comment-13012723"
        },
        {
            "date": "2011-03-29T21:44:19+0000",
            "content": "Just to add: Solr can handle this, too: If Document.getField() returns a instanceof NumericField, it uses the value from the NF; if it returns a normal Field it can do what it does now (decode manually). Backwards preserved, no problem. ",
            "author": "Uwe Schindler",
            "id": "comment-13012725"
        },
        {
            "date": "2011-03-29T21:50:00+0000",
            "content": "The default precisionStep should not have to have to be standardized \u2013 solr can always set it in the constructor.\n\nThe real issue is how to deal with binary vs text stored fields.  We could either:\n1. Add a binary option to the constructor so the stored value is either text or binary\n2. Standardize on binary and have easy ways to pull it out directly from lucene\n\nSeems option #1 has the most flexibility and least impact on existing pure lucene NumericField users ",
            "author": "Ryan McKinley",
            "id": "comment-13012727"
        },
        {
            "date": "2011-03-29T22:02:59+0000",
            "content": "The default precisionStep should not have to have to be standardized \u2013 solr can always set it in the constructor.\n\nThats my opinion, too. I was just confused about the initial commit where it was somehow redefined to 8 in Lucene.\n\nThe current ptoblem with NumericField is simply that you don't get one back when you do a Document.getField() on the search results. And this is why we did the toString() variant in 2.9.\n\nMike's proposal is in my opinion the best one, make FieldsReader return a NumericField if the bit is set. Then we can even store it the ByteBuffer-like way (how solr does at the moment). The encoding is then left over to the implementation details in Lucene. Just like the encoding of String fields is internal to the field type.\n\nWhen we change the codec API to also handle stored fields, we maybe should also make the abstract Field API that communicates with the indexer simply pass a BytesRef to the indexer, just like TermToBytesRefAttribute on the indexing side. NumericField would simply implement this API different than StringField or BinaryField (or how we would call them). ",
            "author": "Uwe Schindler",
            "id": "comment-13012737"
        },
        {
            "date": "2011-03-30T09:34:48+0000",
            "content": "\nThe current ptoblem with NumericField is simply that you don't get one back when you do a Document.getField() on the search results. And this is why we did the toString() variant in 2.9.\n\nRight, this is long-standing limitation on our NF impl, so let's just fix it (store the bit); then we can use binary encoding, user can get NF back, etc. ",
            "author": "Michael McCandless",
            "id": "comment-13012895"
        },
        {
            "date": "2011-05-09T22:09:31+0000",
            "content": "This issue is irrelevant with SOLR-2497.\n\nThanks Uwe! ",
            "author": "Ryan McKinley",
            "id": "comment-13030926"
        }
    ]
}