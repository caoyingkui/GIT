{
    "id": "LUCENE-7337",
    "title": "MultiTermQuery are sometimes rewritten into an empty boolean query",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "MultiTermQuery are sometimes rewritten to an empty boolean query (depending on the rewrite method), it can happen when no expansions are found on a fuzzy query for instance.\nIt can be problematic when the multi term query is boosted. \nFor instance consider the following query:\n\n`((title:bar~1)^100 text:bar)`\n\nThis is a boolean query with two optional clauses. The first one is a fuzzy query on the field title with a boost of 100. \nIf there is no expansion for \"title:bar~1\" the query is rewritten into:\n\n`(()^100 text:bar)`\n\n... and when expansions are found:\n\n`((title:bars | title:bar)^100 text:bar)`\n\nThe scoring of those two queries will differ because the normalization factor and the norm for the first query will be equal to 1 (the boost is ignored because the empty boolean query is not taken into account for the computation of the normalization factor) whereas the second query will have a normalization factor of 10,000 (100*100) and a norm equal to 0.01. \n\nThis kind of discrepancy can happen in a single index because the expansions for the fuzzy query are done at the segment level. It can also happen when multiple indices are requested (Solr/ElasticSearch case).\n\nA simple fix would be to replace the empty boolean query produced by the multi term query with a MatchNoDocsQuery but I am not sure that it's the best way to fix. WDYT ?",
    "attachments": {
        "LUCENE-7337.patch": "https://issues.apache.org/jira/secure/attachment/12811578/LUCENE-7337.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15328362",
            "author": "Michael McCandless",
            "date": "2016-06-13T21:44:32+0000",
            "content": "A simple fix would be to replace the empty boolean query produced by the multi term query with a MatchNoDocsQuery but I am not sure that it's the best way to fix. \n\n+1\n\nOr more generally can we have an empty-clause BQ rewrite to MatchNoDocsQuery?  I had folded this into my attempt to fix the world's-hardest-toString-issue (LUCENE-7276) but it was too many changes to try at once, so breaking it out here is great.\n\nHowever, before we can do this, we need to fix MatchNoDocsQuery to not rewrite to an empty BQ else we get a never-terminating rewrite  "
        },
        {
            "id": "comment-15329457",
            "author": "Jim Ferenczi",
            "date": "2016-06-14T12:59:37+0000",
            "content": "A simple fix would be to replace the empty boolean query produced by the multi term query with a MatchNoDocsQuery but I am not sure that it's the best way to fix.\n\nI am not sure of this statement anymore. Conceptually a MatchNoDocsQuery and a BooleanQuery with no clause are similar. Though what I proposed assumed that the value for normalization of the MatchNoDocsQuery is 1. I think that doing this would bring confusion since this value is supposed to reflect the max score that the query can get (which is 0 in this case). Currently a boolean query or a disjunction query with no clause return 0 for the normalization. I think it's the expected behavior even though this breaks the distributed case as explained in my previous comment. \nFor empty queries that are the result of an expansion (multi term query) maybe we could add yet another special query,  something like MatchNoExpansionQuery that would use a ConstantScoreWeight ? I am proposing this because this would make the distinction between a query that match no documents no matter what the context is and a query that match no documents because of the context (useful for the distributed case). "
        },
        {
            "id": "comment-15331466",
            "author": "Michael McCandless",
            "date": "2016-06-15T10:00:27+0000",
            "content": "Really, the max score that MatchNoDocsQuery can return is undefined right, since it returns nothing.  (i.e. max value over an empty set of elements is not defined).\n\nMaybe, instead of adding a new query that also matches no documents, we could just enhance the existing one so you could pass it the norm factor you'd like it to \"use\"?\n\nI do really like your idea of having an empty clause BQ rewrite to MatchNoDocsQuery: I think we should have one, unambiguous query class that's used for this \"matches nothing\" rewrite case, if we can get the scoring to work out correctly! "
        },
        {
            "id": "comment-15337563",
            "author": "David Smiley",
            "date": "2016-06-18T05:32:01+0000",
            "content": "I do really like your idea of having an empty clause BQ rewrite to MatchNoDocsQuery: I think we should have one, unambiguous query class that's used for this \"matches nothing\" rewrite case, if we can get the scoring to work out correctly!\n\n+1 !   Empty BQ is weird. "
        },
        {
            "id": "comment-15337709",
            "author": "Michael McCandless",
            "date": "2016-06-18T09:59:46+0000",
            "content": "OK, here's a patch, giving MatchNoDocsQuery its own Weight\nthat returns 0 for queryNorm, and fixing an empty BooleanQuery\nto rewrite to it.\n\nScoring wise, this behaves the same as an empty-clause boolean query,\nand I think this will make LUCENE-7276 much easier!\n\nIt can also happen when multiple indices are requested (Solr/ElasticSearch case).\n\nI think getting proper distributed queries working is really out of\nscope here: that would really require a distributed rewrite to work\ncorrectly.\n\nI think this patch is a good baby-step. "
        },
        {
            "id": "comment-15339090",
            "author": "Jim Ferenczi",
            "date": "2016-06-20T07:08:36+0000",
            "content": "Wooo thanks Michael McCandless\n\nI think getting proper distributed queries working is really out of scope here: that would really require a distributed rewrite to work correctly.\n\nAgreed. Returning 1 or 0 for the queryNorm would not solve the problem anyway and I think it's more important to make empty-clause boolean query behaves exactly the same as the MatchNoDocsQuery.  "
        },
        {
            "id": "comment-15341973",
            "author": "ASF subversion and git services",
            "date": "2016-06-21T15:26:31+0000",
            "content": "Commit 7b5d7b396254998c0d4d1a6139134639aea1904f in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7b5d7b3 ]\n\nLUCENE-7337: empty boolean query now rewrites to MatchNoDocsQuery instead of vice/versa "
        },
        {
            "id": "comment-15342072",
            "author": "ASF subversion and git services",
            "date": "2016-06-21T16:08:52+0000",
            "content": "Commit a3fc7efbccfa547add864e58268e40960bff571b in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a3fc7ef ]\n\nLUCENE-7337: empty boolean query now rewrites to MatchNoDocsQuery instead of vice/versa "
        },
        {
            "id": "comment-15438959",
            "author": "Michael McCandless",
            "date": "2016-08-26T13:58:51+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        }
    ]
}