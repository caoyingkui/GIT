{
    "id": "LUCENE-7799",
    "title": "Classic query parser should allow autoGeneratePhraseQueries=true when splitOnWhitespace=false",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Bug",
        "components": [
            "core/queryparser"
        ],
        "fix_versions": []
    },
    "description": "LUCENE-7533 disabled the option combination splitOnWhitespace=false/autoGeneratePhraseQueries=true because of how autoGeneratePhraseQueries=true is handled: a query chunk is treated as if it were literally quoted.  When splitOnWhitespace=false, a query chunk can be multiple whitespace-separated words, and auto-quoting multiple terms will produce inappropriate phrase queries.\n\nI have an idea about how to fix this: autoGeneratePhraseQueries=true is supposed to cause phrase queries to be constructed when multiple analyzed terms result from a single query word, e.g. when WordDelimiter(Graph)Filter splits words up.  Maybe this could be re-implemented in terms of offsets, since all terms from the same original term share the same offsets.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15980913",
            "date": "2017-04-24T09:12:35+0000",
            "content": "There is an option called autoGenerateMultiTermSynonymsPhraseQuery which when activated builds phrase query for multi-terms synonyms. The naming is a bit misleading but it can achieve what you're describing. The idea, which should maybe be extended, is to build a phrase query when side paths of different length are encountered inside the query. With a WordDelimiterGraphFilter that preserves original tokens (preserveOriginal) this heuristic works perfectly since each split creates side paths of different length. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15981215",
            "date": "2017-04-24T14:21:39+0000",
            "content": "Thanks Jim, I was aware of autoGenerateMultiTermSynonymsPhraseQuery, but it only applies when graphs are detected, which requires side paths.  When WDGF doesn't preserve original tokens and splits a word, though, graph processing isn't invoked, so that option isn't effective. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-15981973",
            "date": "2017-04-24T21:51:47+0000",
            "content": "Then we should maybe remove autoGenerateMultiTermSynonymsPhraseQuery and make autoGeneratePhraseQueries applicable to graph and non-graph query even when splitOnWhitespace=false. A nice side effect of this change is that it would correctly handle a simple synonym rule like \"ny, new york\". With autoGeneratePhraseQueries=true \"new york\" would be matched as a phrase query with the input query \"ny\" and as a simple disjunction with the input query \"new york\". Of course this should also be true when \"ny\" is preserved in the output (when graph processing is involved) which is why I think it is important to have a single option for graph and non-graph query. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15982027",
            "date": "2017-04-24T22:40:12+0000",
            "content": "I agree that these two options should be collapsed into one. ",
            "author": "Steve Rowe"
        }
    ]
}