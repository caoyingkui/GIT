{
    "id": "SOLR-11684",
    "title": "Solr should not cache cheap filters",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In the past I've seen clients who disabled the filter cache saw better query performance. \nI've never got the chance to investigate this unfortuinately. \n\nI was reading through https://lucidworks.com/2017/11/27/caching-and-filters-and-post-filters/ today and this section is something I wanted to revisit\n\ncache=false \u2013 Tells Solr that we don't need/want this filter to be cached independently for re-use.\n This will allow Solr to evaluate these filters at the same time it's processing the main query\n\n\n\nLucene does optimizations like LUCENE-7680 (I think there are more which I can link later on). Maybe Solr should also consult UsageTrackingQueryCachingPolicy and not cache certain cheap filters?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-27T20:37:05+0000",
            "content": "I suspect that anyone who sees better performance when completely disabling the filterCache is someone who uses many unique filters and rarely has cache hits.  Better performance probably results from one or more of three things:\n\n\n\tno need to populate (or copy) a filter result into the cache.\n\tno need to spend time evicting cache entries\n\tthey can have a smaller heap size and spend less time doing GC\n\n\n\nAside from the elapsed time available after the query has been executed, I don't know that there's any way for Solr to automatically detect that a given filter query is really cheap and decide on the fly not to cache it.  If elapsed time is a good metric to use, or there actually is another way to determine it's cheap, then this does sound like a good idea. ",
            "author": "Shawn Heisey",
            "id": "comment-16267451"
        },
        {
            "date": "2017-11-27T20:48:46+0000",
            "content": "I don't know that there's any way for Solr to automatically detect that a given filter query is really cheap and decide on the fly not to cache it. \n\nLUCENE-7680 adds rules like a term query is always cheap . So don't cache it ",
            "author": "Varun Thacker",
            "id": "comment-16267500"
        },
        {
            "date": "2017-11-28T00:27:07+0000",
            "content": "LUCENE-7680 adds rules like a term query is always cheap . So don't cache it\n\nI'm really not familiar with how likely it is that something a user passes in the fq parameter will ultimately result in a term query, as opposed to some other kind of query.  If that's what happens, then it sounds like we can choose to NOT cache the filter.\n\nI really have no idea what Solr actually does at the Lucene layer, but I do know that some of the filters my servers receive can take double-digit seconds to run, at least until the filter ends up in the cache, at which point it becomes REALLY fast. ",
            "author": "Shawn Heisey",
            "id": "comment-16267860"
        },
        {
            "date": "2017-11-28T18:26:12+0000",
            "content": "LUCENE-7680 adds rules like a term query is always cheap . So don't cache it\n\nNote that the context is different (i.e. lucene looks at caching at every query level, where Solr currently just looks at the top level).\nBenchmarking not caching term queries has been on my TODO list, but I haven't gotten around to it.\nAnother approach is to have the context say when a term query (or other inexpensive query) should or should not be cached.  For example, when code will iterate over many terms in a field, that code should avoid using the filter cache.  There may still be a case for caching term queries in fq params or in other contexts... but we need testing/benchmarking to figure that out. ",
            "author": "Yonik Seeley",
            "id": "comment-16269201"
        }
    ]
}