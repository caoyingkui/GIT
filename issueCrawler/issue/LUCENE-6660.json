{
    "id": "LUCENE-6660",
    "title": "Assertion fails for ToParentBlockJoinQuery$BlockJoinScorer.nextDoc",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.2.1",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "After I enable assertion with \"-ea:org.apache...\" I got the stack trace below. I checked that the parent filter only match parent documents and the child filter only match child documents. Field \"id\" is unique.\n\n16:55:06,269 ERROR [org.apache.solr.servlet.SolrDispatchFilter] (http-127.0.0.1/127.0.0.1:8080-1) null:java.lang.RuntimeException: java.lang.AssertionError\n\tat org.apache.solr.servlet.HttpSolrCall.sendError(HttpSolrCall.java:593)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:465)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:227)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:196)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:246)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:149)\n\tat org.jboss.as.web.security.SecurityContextAssociationValve.invoke(SecurityContextAssociationValve.java:169)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:145)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:97)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:559)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:102)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:336)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:653)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:920)\n\tat java.lang.Thread.run(Thread.java:744)\nCaused by: java.lang.AssertionError\n\tat org.apache.lucene.search.join.ToParentBlockJoinQuery$BlockJoinScorer.nextDoc(ToParentBlockJoinQuery.java:278)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:204)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:176)\n\tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:35)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:771)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:485)\n\tat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:202)\n\tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1666)\n\tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1485)\n\tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:561)\n\tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:518)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:255)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2064)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:654)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:450)\n\t... 16 more\n\nWithout assertions enabled:\n17:21:39,008 ERROR [org.apache.solr.servlet.SolrDispatchFilter] (http-127.0.0.1/127.0.0.1:8080-1) null:java.lang.IllegalStateException: child query must only match non-parent docs, but parent docID=2147483647 matched childScorer=class org.apache.lucene.search.ConjunctionScorer\n\tat org.apache.lucene.search.join.ToParentBlockJoinQuery$BlockJoinScorer.nextDoc(ToParentBlockJoinQuery.java:334)",
    "attachments": {
        "index.zip": "https://issues.apache.org/jira/secure/attachment/12743946/index.zip",
        "LUCENE-6660.patch": "https://issues.apache.org/jira/secure/attachment/12744955/LUCENE-6660.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14615198",
            "author": "Adrien Grand",
            "date": "2015-07-06T15:47:33+0000",
            "content": "Looking at the failed assertion, it suggests that you have orphan children documents in your index. Children and parents are supposed to be indexed in a contiguous block with the parent in the end, and ToParentBlockJoinQuery found a matching child document so that none of the documents after this child doc are a parent document.\n\nMaybe you indexed some blocks of documents without a parent, or deleted a parent document without deleting all its children at the same time? "
        },
        {
            "id": "comment-14616398",
            "author": "Christian Danninger",
            "date": "2015-07-07T09:12:46+0000",
            "content": "I double checked it. And everything should be fine with the index.\nThe index is fresh without deletions and child documents are added to parents by the API:\n\n\tSolrInputDocument child = new SolrInputDocument();\n\tchild.addField(\"parent\", false);\n        child.addField(\"id\", ++childId);\n        parent.addChildDocument(child);\n\n\n\nI wrote an algorithm to check the index:\n\npackage test;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Collections;\nimport java.util.HashSet;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.store.FSDirectory;\nimport org.apache.lucene.store.MMapDirectory;\nimport org.apache.lucene.store.NRTCachingDirectory;\n\npublic class ParentChild {\n\t\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tHashSet<String> unique = new HashSet<String>();\n\t\tHashSet<String> parents = new HashSet<String>();\n\t\tHashSet<String> children = new HashSet<String>();\n\t\tHashSet<String> roots = new HashSet<String>();\n\t\t\n\t\tPath path = Paths.get(args[0]);\n\t\t\n\t\tFSDirectory directory = MMapDirectory.open(path);\n\t\tNRTCachingDirectory nrtCachingDirectory = new NRTCachingDirectory(directory, 48.0, 48.0);\n\t\tDirectoryReader reader = DirectoryReader.open(nrtCachingDirectory);\n\t\t\n\t\tboolean wasChild = false;\n\t\tString parentId = null;\n\t\t\n\t\tfor (int docID=0; docID<reader.maxDoc(); docID++) {\n\t\t\tfinal Document document = reader.document(docID);\n\t\t\tfinal String parent = document.get(\"parent\");\n\t\t\tfinal boolean isChild = parent.equals(\"F\");\n\t\t\tfinal boolean isParent = parent.equals(\"T\");\n\t\t\tfinal String root = document.get(\"_root_\");\n\t\t\tfinal String id = document.get(\"id\");\n\t\t\t\n\t\t\t// unique id ?\n\t\t\tif (unique.contains(id)) {\n\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t}\n\t\t\tif (root != null) {\n\t\t\t\troots.add(root);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tif (isChild) {\n\t\t\t\t// parent after its children?\n\t\t\t\tif (parents.contains(root)) {\n\t\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// correct parent ?\n\t\t\t\tif (parentId != null && !parentId.equals(root)) {\n\t\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tchildren.add(id);\n\t\t\t\tparentId = root;\n\t\t\t} else {\n\t\t\t\tif (wasChild) {\n\t\t\t\t\t// children belong to parent ?\n\t\t\t\t\tif (!id.equals(parentId)) {\n\t\t\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t\t\t}\n\t\t\t\t\t// ids matching ?\n\t\t\t\t\tif (!id.equals(root)) {\n\t\t\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// parent without child\n\t\t\t\t\tif (root != null) {\n\t\t\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isParent) {\n\t\t\t\t\tthrow new IllegalArgumentException();\n\t\t\t\t}\n\t\t\t\tparents.add(id);\n\t\t\t\tparentId = null;\n\t\t\t}\n\t\t\tunique.add(id);\n\n\t\t\twasChild = isChild;\n\t\t}\n\t\t\n\t\tSystem.out.println(\"docs:     \" + reader.maxDoc());\n\t\tSystem.out.println(\"total:    \" + unique.size());\n\t\tSystem.out.println(\"children: \" + children.size());\n\t\tSystem.out.println(\"parents:  \" + parents.size());\n\t\tSystem.out.println(\"roots:    \" + roots.size());\n\t\t\n\t\tSystem.out.println(Collections.disjoint(children, parents));\n\t\tSystem.out.println(Collections.disjoint(children, roots));\n\t\tSystem.out.println(parents.containsAll(roots));\n\t\tSystem.out.println(reader.hasDeletions());\n\t\tSystem.out.println(reader.isCurrent());\n\t\t\n\t\treader.close();\n\t\tdirectory.close();\n\t\t\n\t}\n\t\n}\n\n\n\nOutput:\n\ndocs:     573397\ntotal:    573397\nchildren: 485949\nparents:  87448\nroots:    40342\ntrue\ntrue\ntrue\nfalse\ntrue\n\n "
        },
        {
            "id": "comment-14616400",
            "author": "Michael McCandless",
            "date": "2015-07-07T09:15:39+0000",
            "content": "Would CheckJoinIndex (LUCENE-6589) catch this? "
        },
        {
            "id": "comment-14616500",
            "author": "Mikhail Khludnev",
            "date": "2015-07-07T10:41:43+0000",
            "content": "pls post request parameters here, then show result of intersection:  +childQuery +parentFilter "
        },
        {
            "id": "comment-14616564",
            "author": "Adrien Grand",
            "date": "2015-07-07T11:43:48+0000",
            "content": "Would CheckJoinIndex (LUCENE-6589) catch this?\n\nYes, it's exactly its purpose. But in that case it looks like Christian's index might be sane so I'm looking forward to seeing the queries to better understand what happened. "
        },
        {
            "id": "comment-14616575",
            "author": "Christian Danninger",
            "date": "2015-07-07T11:57:37+0000",
            "content": "small index "
        },
        {
            "id": "comment-14616589",
            "author": "Adrien Grand",
            "date": "2015-07-07T12:17:19+0000",
            "content": "Christian, can you also share what child query and parent filter you used? "
        },
        {
            "id": "comment-14616613",
            "author": "Christian Danninger",
            "date": "2015-07-07T12:43:50+0000",
            "content": "CheckJoinIndex dosn't found an issue of my attached index as well as the original one.\nJust try the Solr query: \n{!parent which='region_id: 33'}\n  duration:3 or use the code below.\nregion_id belongs to parent documents, duration to child documents only.\n\n\n\t\tPath path = Paths.get(args[0]);\n\t\t\n\t\tFSDirectory directory = MMapDirectory.open(path);\n\t\tNRTCachingDirectory nrtCachingDirectory = new NRTCachingDirectory(directory, 48.0, 48.0);\n\t\tDirectoryReader reader = DirectoryReader.open(nrtCachingDirectory);\n\t\t\n\t\t{\n\t\t\tIndexSearcher indexSearcher = new IndexSearcher(reader);\n\t\t\tBitDocIdSetCachingWrapperFilter parentFilter = new BitDocIdSetCachingWrapperFilter( new QueryWrapperFilter(new TermQuery(new Term(\"region_id\", new BytesRef(new byte[]{0x60, 0x8, 0, 0, 0, 0x21})))));\n\t\t\t\t\n\t\t\tQuery p = new ToParentBlockJoinQuery(new TermQuery(new Term(\"duration\", new BytesRef(new byte[]{0x60, 0x8, 0, 0, 0, 0x3}))), \n\t\t\t\t\tparentFilter,\n\t\t\t\t\tScoreMode.None);\n\t\t\t\n\t\t\tTopDocs search = indexSearcher.search(p, 1000);\n\t\t\tScoreDoc scoreDoc = search.scoreDocs[0];\n\t\t}\n\n\n\nOutcome:\n\nException in thread \"main\" java.lang.IllegalStateException: child query must only match non-parent docs, but parent docID=2147483647 matched childScorer=class org.apache.lucene.search.TermScorer\n\tat org.apache.lucene.search.join.ToParentBlockJoinQuery$BlockJoinScorer.nextDoc(ToParentBlockJoinQuery.java:334)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:204)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:176)\n\tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:35)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:771)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:485)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:694)\n\tat org.apache.lucene.search.IndexSearcher.searchAfter(IndexSearcher.java:410)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:439)\n\tat test.ParentChild.main(ParentChild.java:60)\n\n "
        },
        {
            "id": "comment-14616681",
            "author": "Mikhail Khludnev",
            "date": "2015-07-07T13:23:09+0000",
            "content": "would you mind to make sure that intersection yields no results? \n\nnew BooleanQuery(){{\nadd(new TermQuery(new Term(\"region_id\", new BytesRef(new byte[]{0x60, 0x8, 0, 0, 0, 0x21})),MUST);\nadd(new TermQuery(new Term(\"duration\", new BytesRef(new byte[]{0x60, 0x8, 0, 0, 0, 0x3})));\n}};\n\n\n\n{!parent which='region_id: 33'}\n  seems like no.2 mistake with bjq. I might get it wrong, but the regular approach is \n\nq=+region_id:33 +{!parent which='parent:T'}duration:3\n\n \n\nnote http://blog.griddynamics.com/2013/09/solr-block-join-support.html \n\n Local parameter \u2018which\u2019 provides a filter which distinguishes parent documents from children ones. Keep in mind two important things about it:\n\n    it should not match any children documents;\n    it should always match all parent documents.\n "
        },
        {
            "id": "comment-14616685",
            "author": "Adrien Grand",
            "date": "2015-07-07T13:25:30+0000",
            "content": "I think you are right Mikhail, I was going to make the same comment. "
        },
        {
            "id": "comment-14618156",
            "author": "Christian Danninger",
            "date": "2015-07-08T07:45:41+0000",
            "content": "You are definitly right. Thanks a lot. \nMaybe you can modify the error message a bit to be more precise and to cover these case too.\nI will make a comment here: https://cwiki.apache.org/confluence/display/solr/Other+Parsers#OtherParsers-BlockJoinQueryParsers\n\nBtw. no intersection for the boolean query above. "
        },
        {
            "id": "comment-14620395",
            "author": "Mikhail Khludnev",
            "date": "2015-07-09T12:08:08+0000",
            "content": "got it. It's worth put it as:\nwhen user supplies a wrong parent filter ie. it doesn't match the last doc in a segment (ignoring acceptedDocs), BJS should throw exception suggestion to verify the filter.\n\nI bake the patch with test coverage soon. Christian Danninger thanks for raising it, I didn't realize this trap.  "
        },
        {
            "id": "comment-14623971",
            "author": "Mikhail Khludnev",
            "date": "2015-07-12T19:49:16+0000",
            "content": "Colleagues, I propose to improve bjq usability by letting users know if they supply a wrong filter by throwing: \njava.lang.IllegalStateException: the given parent filter: QueryBitSetProducer(+parent:* -id:29) doesn't matches the last document in the segment: LeafReaderContext(_2(6.0.0):c60 docBase=120 ord=2)      \n\nHere is the patch which checks the parent filter bit is set at the last doc of the segment.\nThis check occurs before scorer creation. testAbsentLastParentInSegment() covers ToParentBJQ, and ToChildBJQ and also the filtered cases. \nIt also slightly polishes exception message in ToParentBJQ(): now it reports meaningful (global) docID and a causing child query, eg:\njava.lang.IllegalStateException: child query must only match non-parent docs, but parent docID=18011 is matched by child:3 id:31   "
        },
        {
            "id": "comment-14728606",
            "author": "Mikhail Khludnev",
            "date": "2015-09-03T07:18:44+0000",
            "content": "here is the snippet to verify block join\n\nDirectoryReader reader = DirectoryReader.open(\n        FSDirectory.open(\n                FileSystems.getDefault().\n                getPath(\"/Users/mkhl/Downloads/solr-5.3.0/example/techproducts/solr/techproducts/data\",\"index.20150902131555025\")));\nCheckJoinIndex.check(reader,\n        new QueryBitSetProducer(\n                new TermQuery(\n                        new Term(\"title\",\"product\"))));\nreader.close(); \n\n\nit throws\n\njava.lang.IllegalStateException: The last document of a segment must always be a parent, but _72(5.2.2):C29375 has a child as a last doc\n    at org.apache.lucene.search.join.CheckJoinIndex.check(CheckJoinIndex.java:48)\n    at CodeSnippet_4.run(CodeSnippet_4.java:15)\n\n "
        },
        {
            "id": "comment-14994216",
            "author": "Mikhail Khludnev",
            "date": "2015-11-06T18:57:49+0000",
            "content": "updated the ref guide\nLet me know if anything else should be done here. \nThere is a hotter one filled by Uwe, hunting for it now.    "
        }
    ]
}