{
    "id": "LUCENE-276",
    "title": "Memory leak when sorting",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This is the same post I sended two days before to the Lucene user's list. This \nbug seems to have something in common with bug no. 30628 but that bug is closed \nas invalid.\n\nI'm sending test code that everyone can try. The code is singular, don't say \nthere is no sense in reopening the same index. I can only show, that reopening \nleaks memory. The index is filled by pseudo-real data, they aren't significant \nand the process of index creation as well. \n\nThe problem must be in field caching code used by sort.\n\nAffected versions of Lucene:\n1.4.1\nCVS 1.5-rc1-dev\n\nThis code survives only few first iterations if you run java with -Xmx5m. With \nLucene 1.4-final ends regulary.\n\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Searcher;\nimport org.apache.lucene.search.Sort;\nimport org.apache.lucene.search.SortField;\nimport org.apache.lucene.search.TermQuery;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.RAMDirectory;\n\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\n/**\n\n\tRun this test with Lucene 1.4.1 and -Xmx5m\n */\npublic class ReopenTest\n{\n    private static long mem_last = 0;\n\n\n\n    public static void main(String[] args) throws IOException\n    {\n        Directory directory = create_index();\n\n        for (int i = 1; i < 100; i++) \n{\n            System.err.println(\"loop \" + i + \", index version: \" + IndexReader.\ngetCurrentVersion(directory));\n            search_index(directory);\n            add_to_index(directory, i);\n        }\n    }\n\n    private static void add_to_index(Directory directory, int i) throws \nIOException\n    {\n        IndexWriter writer = new IndexWriter(directory, new StandardAnalyzer(), \nfalse);\n\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Document doc = new Document();\n\n        doc.add(Field.Keyword(\"date\", \n          df.format(new Date(System.currentTimeMillis()))));\n        doc.add(Field.Keyword(\"id\", \"CD\" + String.valueOf(i)));\n        doc.add(Field.Text(\"text\", \"Tohle neni text \" + i));\n        writer.addDocument(doc);\n\n        System.err.println(\"index size: \" + writer.docCount());\n        writer.close();\n    }\n\n    private static void search_index(Directory directory) throws IOException\n    {\n        IndexReader reader = IndexReader.open(directory);\n        Searcher searcher = new IndexSearcher(reader);\n\n        print_mem(\"search 1\");\n        SortField[] fields = new SortField[2];\n        fields[0] = new SortField(\"date\", SortField.STRING, true);\n        fields[1] = new SortField(\"id\", SortField.STRING, false);\n        Sort sort = new Sort(fields);\n        TermQuery query = new TermQuery(new Term(\"text\", \"\\\"text 5\\\"\"));\n\n        print_mem(\"search 2\");\n        Hits hits = searcher.search(query, sort);\n        print_mem(\"search 3\");\n\n        for (int i = 0; i < hits.length(); i++) \n{\n            Document doc = hits.doc(i);\n            System.out.println(\"doc \" + i + \": \" + doc.toString());\n        }\n        print_mem(\"search 4\");\n        searcher.close();\n        reader.close();\n    }\n\n    private static void print_mem(String log)\n    {\n        long mem_free = Runtime.getRuntime().freeMemory();\n        long mem_total = Runtime.getRuntime().totalMemory();\n        long mem_max = Runtime.getRuntime().maxMemory();\n\n        long delta = (mem_last - mem_free) * -1;\n\n        System.out.println(log + \"= delta: \" + delta + \", free: \" + mem_free + \n\", used: \" + (mem_total-mem_free) + \", total: \" + mem_total + \", max: \" + \nmem_max);\n\n        mem_last = mem_free;\n    }\n\n    private static Directory create_index() throws IOException\n    {\n        print_mem(\"create 1\");\n        Directory directory = new RAMDirectory();\n\n        Calendar c = Calendar.getInstance();\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n        IndexWriter writer = new IndexWriter(directory, new StandardAnalyzer(), \ntrue);\n        for (int i = 0; i < 365 * 15; i++) \n{\n            Document doc = new Document();\n\n            doc.add(Field.Keyword(\"date\", \n               df.format(new Date(c.getTimeInMillis()))));\n            doc.add(Field.Keyword(\"id\", \"AB\" + String.valueOf(i)));\n            doc.add(Field.Text(\"text\", \"Tohle je text \" + i));\n            writer.addDocument(doc);\n\n            doc = new Document();\n\n            doc.add(Field.Keyword(\"date\", \n               df.format(new Date(c.getTimeInMillis()))));\n            doc.add(Field.Keyword(\"id\", \"ef\" + String.valueOf(i)));\n            doc.add(Field.Text(\"text\", \"Je tohle text \" + i));\n            writer.addDocument(doc);\n\n            c.add(Calendar.DAY_OF_YEAR, 1);\n        }\n        writer.optimize();\n        System.err.println(\"index size: \" + writer.docCount());\n        writer.close();\n\n        print_mem(\"create 2\");\n        return directory;\n    }\n}",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--lucene-31240-1.4.1.diff": "https://issues.apache.org/jira/secure/attachment/12312390/ASF.LICENSE.NOT.GRANTED--lucene-31240-1.4.1.diff",
        "ASF.LICENSE.NOT.GRANTED--lucene-31240-29092004.diff": "https://issues.apache.org/jira/secure/attachment/12312389/ASF.LICENSE.NOT.GRANTED--lucene-31240-29092004.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2004-09-16T05:16:42+0000",
            "content": "See here for some analysis: \nhttp://www.mail-archive.com/lucene-user%40jakarta.apache.org/msg09462.html  ",
            "author": "Daniel Naber",
            "id": "comment-12321900"
        },
        {
            "date": "2004-09-27T20:26:51+0000",
            "content": "We also see this bug in Lucene 1.4.1, but NOT in 1.4.1 RC3. ",
            "author": "Spencer W. Thomas",
            "id": "comment-12321901"
        },
        {
            "date": "2004-09-27T20:58:41+0000",
            "content": "Never mind.  We had internal confusion about version numbering.  I was looking\nat 1.4RC3. ",
            "author": "Spencer W. Thomas",
            "id": "comment-12321902"
        },
        {
            "date": "2004-09-29T18:33:37+0000",
            "content": "Created an attachment (id=12890)\npatch that fixes the problem made against CVS HEAD as of September 29th ",
            "author": "Rafal Krzewski",
            "id": "comment-12321903"
        },
        {
            "date": "2004-09-29T18:34:39+0000",
            "content": "Created an attachment (id=12891)\npatch that fixes the problem made against 1.4.1 release ",
            "author": "Rafal Krzewski",
            "id": "comment-12321904"
        },
        {
            "date": "2004-09-29T18:41:07+0000",
            "content": "Comparator cache entries couldn't ever go away because IndexReader objects used\nas weak referenced keys were strong-references by the very same\nWeakHashMap$Entry object. This was because IndexReader was referenced from an\ninstance variable of the Comparator objects - an implicit one because final\nIndexReader reader argument of comparator* method is used inside Comparator\nobject initialization. Moving initialization of the fieldOrder/index variables\noutside object initialization eliminates the implicit reader field, thus\nallowing IndexReader object's to be GCd correctly. ",
            "author": "Rafal Krzewski",
            "id": "comment-12321905"
        },
        {
            "date": "2004-09-29T22:18:21+0000",
            "content": "Thanks for the patch. I did not verify whether it solves the memory leak problem.\nHowever, I committed the changes (and did an analog chance in\nSortComparator.java) since they definitely cannot do any harm. Daniel agreed to\nmake some tests soon.\nIf positive, he will close the bug.\n\nChristoph ",
            "author": "Christoph Goller",
            "id": "comment-12321906"
        },
        {
            "date": "2004-09-30T02:47:57+0000",
            "content": "Thanks, the patch works, i.e. the test case doesn't throw out of memory \nanymore. The patch has been applied to CVS (HEAD branch).  ",
            "author": "Daniel Naber",
            "id": "comment-12321907"
        }
    ]
}