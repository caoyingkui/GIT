{
    "id": "LUCENE-6494",
    "title": "Make PayloadSpanUtil apply to other postings information",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2"
        ],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "With the addition of SpanCollectors, we can now get arbitrary postings information from SpanQueries.  PayloadSpanUtil does some rewriting to convert non-span queries into SpanQueries so that it can collect payloads.  It would be good to make this more generic, so that we can collect any postings information from any query (without having to make invasive changes to already optimized Scorers, etc).",
    "attachments": {
        "LUCENE-6494.patch": "https://issues.apache.org/jira/secure/attachment/12734410/LUCENE-6494.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14554087",
            "author": "Alan Woodward",
            "date": "2015-05-21T10:45:39+0000",
            "content": "Here is a patch.\n\nSpanCollector is changed from an interface to a concrete implementation, parametrized by a MatchData data type defining the type of postings information to collect.  The no-op implementation is a specialised subclass.\n\nMost of the functionality from PayloadSpanUtil is moved to MatchDataCollector.  This will take an arbitrary query, convert it to a Span query, run it over any document in a searcher, and return a MatchDataIterator<> that iterates over the matches for that query within that doc.  This ignores things like SpanNot exclusions and Boolean MUST_NOT clauses, so you should make sure that you already know a document is a match before passing it in.  PayloadSpanUtil retains its existing methods and constructor for backwards compatibility.\n\nMatchData implementations for positions, offsets and payloads are all provided, although at the moment you can only collect one of these at a time - a composite collector is something I want to look at in another issue.\n\nThe MatchDataIterator<T> interface is a bit clunky at the moment.  I might look at moving the field information directly into MatchData and changing this to look more like other iterators (either lucene ones or Java ones).\n\nThere are still lots of javadocs to add, and I'm writing more tests, but I thought I'd put this up for comment.  It should allow things like luwak's exact-match highlighter to work without requiring all the low-level changes in LUCENE-2878. "
        },
        {
            "id": "comment-14554115",
            "author": "Robert Muir",
            "date": "2015-05-21T11:08:29+0000",
            "content": "Can we reduce the number of classes here for this api?\n\nI see:\n\n\tSpanCollector\n\tSpanCollectorFactory\n\tBufferedSpanCollector\n\tMatchData\n\tMatchDataCollector\n\tMatchDataIterator\n\tMatchOffset\n\tMatchPosition\n\tMatchPayload\n\n\n\nA great number of these have complex generics, is this really required?\n\nFinally, a good number of methods are unnatural, like this:\n\npublic int requiredPositions()\n\n\n\nPlease use regular names like get() and set(). I know such \"fluent\" names are fashionable, but they are bullshit , because you cannot tell based on any convention if they are simply returning stuff or changing mutable state or what. "
        },
        {
            "id": "comment-14554133",
            "author": "Alan Woodward",
            "date": "2015-05-21T11:25:42+0000",
            "content": "Please use regular names like get() and set()\n\nSure, that's easy enough.\n\nOn the number of classes and generics, maybe it would fit more in with the rest of the lucene API if there was just a single MatchData class taking an int saying what to collect? "
        },
        {
            "id": "comment-14554227",
            "author": "Alan Woodward",
            "date": "2015-05-21T12:50:31+0000",
            "content": "This patch makes MatchData concrete and package-private, and removes all the generics.  SpanCollectorFactory is also gone.\n\nI'll see if I can fold BufferedSpanCollector entirely into NearSpansOrdered, as that's the only class that actually makes use of it. "
        },
        {
            "id": "comment-14554285",
            "author": "Alan Woodward",
            "date": "2015-05-21T13:45:08+0000",
            "content": "BufferedSpanCollector is now a private class in NearSpansOrdered, and buffer() and bufferedCollector() are removed from SpanCollector.\n\nSo the public API is now:\n\n\tSpanCollector (for collecting data from Spans, for generic use in queries)\n\tMatchDataCollector (for collecting data from a specific document and query)\n\tMatchDataIterator (for iterating over the results of a MatchDataCollector)\n\n "
        },
        {
            "id": "comment-14554491",
            "author": "Alan Woodward",
            "date": "2015-05-21T15:11:00+0000",
            "content": "Removing the generics and integrating the buffered collector directly into NearSpansOrdered also allows a bunch of other cleanups.  So now:\n\n\tSpanWeight.getSpans() looks exactly like Weight.scorer()\n\tSpanPositionCheckQuery.accept() doesn't need to take a collector any more\n\n "
        },
        {
            "id": "comment-14554547",
            "author": "David Smiley",
            "date": "2015-05-21T15:47:19+0000",
            "content": "I'm looking over your latest patch, with an eye for it's suitability for accurate highlighting (aka \"query debugging\").  Ultimately, the \"term\" needs to be collected, and it isn't done so by MatchData/SpanCollector now.  It seems an approach would involve a custom SpanCollector subclass that captures the term \u2013 at least it's passed in already.  But SpanCollector is instantiated internally by PayloadTermSpanScorer, SpanPayloadCheckQuery, and SpanNearPayloadCheckQuery.  I was hoping there would be some way to pass in a custom one into SpanWeight from the outside; that is/was the case but this API change removes that.  I do think this looks/feels nicer though; but it loses a capability \u2013 albeit one it only had for a couple days now.   What do you think Alan? "
        },
        {
            "id": "comment-14554587",
            "author": "Alan Woodward",
            "date": "2015-05-21T16:13:46+0000",
            "content": "We could add a Collection<Term> to MatchData as well, to collect all terms from a Spans.  I'm not sure I see why you need the Term for highlighting though - can't you just use offsets? "
        },
        {
            "id": "comment-14554735",
            "author": "David Smiley",
            "date": "2015-05-21T17:53:26+0000",
            "content": "We could add a Collection<Term> to MatchData as well, to collect all terms from a Spans.   I'm not sure I see why you need the Term for highlighting though - can't you just use offsets?\n\nYou may be right about not needing the Term.  I should retract my concerns about this for now, as it pertains to accurate highlights.  I need to build a POC to understand what's really needed.  Once I saw the SpanCollector, it seemed very promising but I'm having second thoughts now.  When I last thought about this problem, I ended up wanting a Spans.getChildren() of sorts \u2013 just like Scorers do.  I still think that would most likely be more elegant.  The tricky part of doing such a thing, I think, would be handling the buffered case of NearSpansOrdered such that if I get the child spans, then it would return cached child spans for where it matched, not where the current state of the child spans may have advanced to.  Alternatively SpanCollector is somewhat similar but it's MatchData, as written, doesn't capture each leaf state separately \u2013 instead it expands the bounds.  This means currently I can't get the offsets of each underlying SpanTermQuery offset match, but only the aggregate start/end offset span which could cover a ton of text \u2013 I don't want to highlight everything in-between. "
        },
        {
            "id": "comment-14554756",
            "author": "Alan Woodward",
            "date": "2015-05-21T18:03:52+0000",
            "content": "Yeah, it's NearSpansOrdered that makes everything complicated, because by the time you call collect() its child Spans have moved on.  So you need to either have just a generic collector type, or pass the collector type to the NearSpansOrdered constructor and have a way of creating a buffered collector from that, which leads to the overcomplicated generics that Robert didn't like.\n\nThere might be a way of doing this by passing a SpanCollector to the SpanWeight somehow?  And just doing some ugly brute-force casting in replay(), risking the ire of the Generics Policeman.  But in the meantime, please do try this API out - feedback from people other than me who are using it will be very useful! "
        },
        {
            "id": "comment-14555162",
            "author": "Robert Muir",
            "date": "2015-05-21T22:25:28+0000",
            "content": "First of all: thank you very much for simplifying the APIs like you did!\n\nAnd the idea is good, for many reasons. I still think our Collection<byte[]>-collecting payload queries should get out of town and be moved to sandbox. This is a good step towards allowing some of the crazier stuff to be e.g. refactored out of lucene-core and I really like that. And i like a different api for the \"expert stuff\" (payloads and offsets) because it still gives us a chance to look at cleanly integrating spans with other queries in the future. \n\nI am just super-worried about timing and stability.\n\nThere is a lot to do it seems, when i look at it, can we please mark this issue a blocker? Timing is not good here because Anshum Gupta is planning to build a release.\n\n\n\tTermSpans still has commented out payload handling code.\n\tIn NearSpansOrdered, I don't understand why we are doing various calculations, when you are not using the API (The no-op buffered stuff). Why not just have a null-check instead of that?\n\tThere should be javadocs (e.g. explaining various integer parameters like requiredPostings)\n\tShould MatchDataIterator and MatchDataCollector really need to be in core lucene? (fwiw, i dont know how that PayloadSpanUtil survived so long).\n\tWhat is the semantics of Spans.collect(SpanCollector) in terms of lifecycle? I mean, i assume it shouldnt be called when doc = NO_MORE_DOCS, or when doc = -1, and so forth. And I also assume it shouldnt be called when position = -1 or position = NO_MORE_POSITIONS.  Ideally these rules are not just in the javadoc but also encoded in the state machine of AssertingSpans.\n\tI don't like 'requiredPostings' as the way this API is \"enabled\" in createWeight. There are two use-cases, expert payload use-cases, and retrieving offsets for e.g. highlighting. But as you see from NearSpansOrdered, these use cases can interfere with scoring algorithms. So I think its important that the use of this API is explicit, up-front, so it won't hinder scoring algorithms. Can we have a boolean instead that is more explicit (\"expert proximity mode\" or whatever we can come up with)? Alternatively a different-named method instead of createWeight, like createDebuggingWeight or whatever you want. Basically its kinda like explain() to me, except its still a per-segment search and not dog slow.\n\n "
        },
        {
            "id": "comment-14555198",
            "author": "Anshum Gupta",
            "date": "2015-05-21T22:50:29+0000",
            "content": "I didn't really look at the patch but it seems a rather big patch that evolved in a few hours. I personally think it makes sense for this to not be a blocker for 5.2 and shipping this with 5.3 instead. Do you think that makes sense? "
        },
        {
            "id": "comment-14555205",
            "author": "Robert Muir",
            "date": "2015-05-21T22:53:39+0000",
            "content": "From my perspective that would be ideal, because it would give time to evolve the api properly. \n\nSo to me that just means backing out LUCENE-6371 and LUCENE-6490 from 5.2 (because everything is already completely rewritten and better here, and this has all been all right-before-a-release IMO). "
        },
        {
            "id": "comment-14555220",
            "author": "Anshum Gupta",
            "date": "2015-05-21T23:03:29+0000",
            "content": "From my perspective that would be ideal, because it would give time to evolve the api properly.\nHold it back and release it with 5.3? If you think it's invasive and needs time, that should be the case. To me it looks like that but I'd let you take a call on that as you understand it better. "
        },
        {
            "id": "comment-14555229",
            "author": "Robert Muir",
            "date": "2015-05-21T23:07:28+0000",
            "content": "I think what is in branch_5x (LUCENE-6371 and LUCENE-6490) should not be released in its current state. \n\nAll of this was added in the last 2 days and I think its too close to the release.\n\nIMO this patch simplifies things a lot. But this patch needs maybe 2 or 3 days work, and a few weeks baking (maybe with followup issues/improvements) and it would be really good. \n\nA 5.3 doesn't have to be months after a 5.2...\n\nedit: trunk->branch_5x because we can just iterate from trunk (we have a patch here doing just exactly that), my concerns are only about the release. "
        },
        {
            "id": "comment-14555234",
            "author": "Michael McCandless",
            "date": "2015-05-21T23:10:50+0000",
            "content": "+1 to make the recent span improvements in 5.3 instead! "
        },
        {
            "id": "comment-14555236",
            "author": "Alan Woodward",
            "date": "2015-05-21T23:11:26+0000",
            "content": "I personally think it makes sense for this to not be a blocker for 5.2 and shipping this with 5.3 instead. Do you think that makes sense?\n+1\n\nI'm not sure I'll have svn access for the next couple of days, will you be able to back this out of the 5.2 branch Anshum?  If not, I can probably get to it on Monday UK time (so before the release).\n\nRegarding Rob's concerns:\n\n\tjavadocs and commented out code I can sort out asap, the API sort of kept changing every time I typed this afternoon so I didn't get round to getting this into precommit-passing shape.\n\tI'll replace the no-op collector with null checks, that's a leftover from the generics stuff\n\tMatchDataIterator and MatchDataCollector can be moved to the highlighter package, I think (or sandbox initially, but the idea is to eventually build a highlighter from them)\n\tI'll add stuff to AssertingSpans to enforce the contracts\n\tI think the boolean works best ('enablePositionCollection' maybe?) - will see what works\n\n\n\nSorry about the timing here, I don't want to mess the release of 5.2 up! "
        },
        {
            "id": "comment-14555276",
            "author": "Anshum Gupta",
            "date": "2015-05-21T23:31:16+0000",
            "content": "Sure, I can revert this. Shouldn't we just revert it from 5x instead and iterate on trunk instead? "
        },
        {
            "id": "comment-14555278",
            "author": "Robert Muir",
            "date": "2015-05-21T23:33:07+0000",
            "content": "yes, lets leave trunk alone and work out the kinks here. "
        },
        {
            "id": "comment-14555338",
            "author": "Anshum Gupta",
            "date": "2015-05-22T00:19:45+0000",
            "content": "Seems like we'd also need to revert LUCENE-6466. "
        },
        {
            "id": "comment-14555355",
            "author": "Anshum Gupta",
            "date": "2015-05-22T00:32:15+0000",
            "content": "Robert Muir if you have time, can you handle reverting the changes? If not, I'll do it. "
        },
        {
            "id": "comment-14555406",
            "author": "Robert Muir",
            "date": "2015-05-22T01:10:49+0000",
            "content": "OK with me, give me some time and I'll straighten it out. "
        },
        {
            "id": "comment-14555414",
            "author": "Robert Muir",
            "date": "2015-05-22T01:18:32+0000",
            "content": "Possibly related: https://issues.apache.org/jira/browse/LUCENE-6495\n\nI want to get tests stable here too so I will investigate. "
        },
        {
            "id": "comment-14555424",
            "author": "Robert Muir",
            "date": "2015-05-22T01:36:02+0000",
            "content": "here is my proposed command:\n\nbranch_5x# svn merge -c -1680607 -c -1680604 -c -1680569 -c -1680514 -c -1680208 -c -1680220 .\n\nTests and both failing seeds from LUCENE-6495 pass after this.\n\nAfter Anshum Gupta creates a 5.2 branch and switches branch_5x to 5.3, we can use one command to restore everything. But i would prefer if we do not actually commit that until LUCENE-6495 has been looked into. Something is not right that scoring has changed. "
        },
        {
            "id": "comment-14555430",
            "author": "Anshum Gupta",
            "date": "2015-05-22T01:43:09+0000",
            "content": "Thanks Robert Muir. Looks good to me. I'll be creating the branch and bumping the revision late tonight. "
        },
        {
            "id": "comment-14555466",
            "author": "ASF subversion and git services",
            "date": "2015-05-22T02:15:38+0000",
            "content": "Commit 1680978 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680978 ]\n\nLUCENE-6371, LUCENE-6466: back out from 5.2, see https://issues.apache.org/jira/browse/LUCENE-6494 "
        },
        {
            "id": "comment-14555468",
            "author": "Robert Muir",
            "date": "2015-05-22T02:16:39+0000",
            "content": "I beasted spans tests 100 times with the change after doing the usual checks.\n\nHere is the command to restore that code to branch_5x (e.g. to make it easy to commit changes here):\nbranch_5x# svn merge -c -1680978 . "
        },
        {
            "id": "comment-14558370",
            "author": "Alan Woodward",
            "date": "2015-05-25T16:21:23+0000",
            "content": "Thanks for dealing with this guys.  I've tried to address some of the comments on the general shape of the API over on LUCENE-6371, and then we can keep this issue for PayloadSpanUtil itself. "
        },
        {
            "id": "comment-14587664",
            "author": "Alan Woodward",
            "date": "2015-06-16T08:24:35+0000",
            "content": "Here's another go at this:\n\n\tSpanQueryWrapper takes a query and a searcher, and translates the query into a spanquery equivalent\n\tSQW.advanceTo(doc) returns a Spans object (that will only support iteration over Span positions, not .nextDoc() or .advance()), which can be used to collect information via a SpanCollector\n\tPayloadSpanUtil is rewritten to use SQW under the hood\n\n\n\nI'm not overly keen on SpanQueryWrapper as a name, but other than that I think this API is reasonable? "
        },
        {
            "id": "comment-14587881",
            "author": "Robert Muir",
            "date": "2015-06-16T11:14:23+0000",
            "content": "Again do we really need this stuff in core? Id rather it be somewhere like sandbox. where we can even e.g. break the compile if we must.\n\nThe problem is that this stuff is pretty confusing and messy. PayloadSpanUtil never belonged in core to begin with. Now its getting bigger and expanding to more classes and I don't think we should go that way. "
        },
        {
            "id": "comment-14587921",
            "author": "Alan Woodward",
            "date": "2015-06-16T11:56:10+0000",
            "content": "No reason it can't go in sandbox.  I think we need to commit LUCENE-6489 first though? "
        }
    ]
}