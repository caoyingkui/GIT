{
    "id": "LUCENE-7354",
    "title": "MoreLikeThis incorrectly does toString on Field object",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.5.1,                                            6.0.1,                                            7.0",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "In MoreLikeThis.java, circa line 763, when calling addTermFrequencies on a Field object, we are incorrectly calling toString on the Field object, which puts the Field attributes (indexed, stored, et. al) into the String that is returned.\n\nI'll put up a patch/fix shortly.",
    "attachments": {
        "LUCENE-7354-mlt-fix": "https://issues.apache.org/jira/secure/attachment/12813362/LUCENE-7354-mlt-fix"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15348848",
            "author": "Grant Ingersoll",
            "date": "2016-06-24T23:14:26+0000",
            "content": "In looking at this code, it seems a bit more broken than I first thought.  AFAICT, in retrieveTerms (circa line 760) we loop over the MLT configured fields, then we loop over the filteredDocument entries, but we don't actually check that the values in the filtered document are the ones configured on the MLT object. "
        },
        {
            "id": "comment-15349595",
            "author": "Grant Ingersoll",
            "date": "2016-06-25T10:46:51+0000",
            "content": "This is also a Solr issue.  I'm not a big fan of the API for the like call in this particular case: \ncode}}public Query like(Map<String, Collection<Object>> filteredDocument) throws IOException {{code is just asking for trouble, even if that saves a few operations in Solr.  \n\nMy proposal:\n\n\tChange that signature, which is only used by Solr in CloudMLTQParser, to take Map<String, Collection<String>>, thus forcing some type safety\n\tFix the retrieveTerms to check the fields line up.\n\tWrite some tests for the code path in question.\n\n "
        },
        {
            "id": "comment-15349635",
            "author": "Grant Ingersoll",
            "date": "2016-06-25T12:45:35+0000",
            "content": "Mostly complete, but sharing early, as it's been a while since I've last patched Lucene/Solr.  Not thrilled about the instanceof in CloudMLTQParser, but not much choice.\n\nStill need to wait on the full test suite to pass and to remove no commits and TODOs. "
        },
        {
            "id": "comment-15353400",
            "author": "Steve Rowe",
            "date": "2016-06-28T17:17:10+0000",
            "content": "\nIn MoreLikeThis.java, circa line 763, when calling addTermFrequencies on a Field object, we are incorrectly calling toString on the Field object, which puts the Field attributes (indexed, stored, et. al) into the String that is returned.\n\nI don't see this - when I run CloudMLTQParserTest without your patch, and I look at MoreLikeThis.retrieveTerms() where String.valueOf(fieldValue) is called (by pulling the value of that expression out into a variable and breaking there in the debugger), I only see the actual field values - no indexed stored et al.\n\nIndexed, stored, et al. are Field*Type* attributes, not Field attributes, right?  \n\nIn CloudMLTQParser.parse() where the filtered doc is composed, in your patch you have a nocommit (the only one I see in your patch) - Field.stringValue() returns value.toString(), but only if it's a String or a Number, and otherwise null, so it's definitely possible to not have a string value for binary fields or geo fields - I guess the question is whether people want to use non-text/non-scalar fields for MLT?:\n\n\n    for (String field : fieldNames) {\n      Collection<Object> fieldValues = doc.getFieldValues(field);\n      if (fieldValues != null) {\n        Collection<String> strings = new ArrayList<>(fieldValues.size());\n        for (Object value : fieldValues) {\n          if (value instanceof Field){\n            String sv = ((Field) value).stringValue();\n            if (sv != null) {\n              strings.add(sv);\n            }//TODO: nocommit: what to do when we don't have StringValue? I don't think it is possible in this case, but need to check on this\n          } else {\n            strings.add(value.toString());\n          }\n        }\n        filteredDocument.put(field, strings);\n      }\n    }\n\n "
        },
        {
            "id": "comment-15354907",
            "author": "Grant Ingersoll",
            "date": "2016-06-29T10:02:57+0000",
            "content": "I don't see this - when I run CloudMLTQParserTest without your patch, and I look at MoreLikeThis.retrieveTerms() where String.valueOf(fieldValue) is called (by pulling the value of that expression out into a variable and breaking there in the debugger), I only see the actual field values - no indexed stored et al.\n\nI'll check again, Steve Rowe.  I was doing the same thing you describe.  Could be a version issue.  I am on Solr 5.5.1. "
        },
        {
            "id": "comment-15359145",
            "author": "Grant Ingersoll",
            "date": "2016-07-01T15:41:05+0000",
            "content": "I'm certain this is occurring on 5.5.1 at a minimum. "
        },
        {
            "id": "comment-15359212",
            "author": "Grant Ingersoll",
            "date": "2016-07-01T16:24:25+0000",
            "content": "And also still seeing it on master, but the plot thickens:\n\n\n\tWhen you debug via the test, it is as Steve Rowe says above\n\tWhen you stand up solr (bin/solr) and issue an MLT query from curl (or the like), I see the Field objects\n\n\n\n "
        },
        {
            "id": "comment-15359266",
            "author": "Grant Ingersoll",
            "date": "2016-07-01T16:55:59+0000",
            "content": "I think the culprit is in RealTimeGetComponent.java, circa lines 278:\n\nif (ids ==  null && allIds.length <= 1) {\n     // if the doc was not found, then use a value of null.\n     rsp.add(\"doc\", docList.size() > 0 ? docList.get(0) : null);\n   } else {\n     docList.setNumFound(docList.size());\n     rsp.addResponse(docList);\n   }\n\n\n\nWhen debugging the test class (CloudMLTQParserTest), we end up in the else clause.  When connecting to standalone via curl (e.g. http://localhost:8983/solr/mlt/select?indent=on&q=\n{!mlt%20qf=resourcename}\nID&wt=json)), we end up in the if clause.\n\nStill debugging what is causing ids and allIds to be set in the former case and not in the latter, as the query parameter looks almost identical. "
        },
        {
            "id": "comment-15359572",
            "author": "Grant Ingersoll",
            "date": "2016-07-01T20:18:58+0000",
            "content": "OK, more detail:\n\nIn my standalone server, I have a collection that has a single shard (I created it using bin/solr create_collection).  The test has 2 shards, which then invokes RealTimeGetComponent.createSubRequests() which then adds an \"ids\" params, which is what then causes the the else clause cited above to get invoked.\n\nYonik Seeley can you provide some insight?  (Most of the code was written by you) "
        }
    ]
}