{
    "id": "SOLR-7203",
    "title": "NoHttpResponseException handling in HttpSolrClient is wrong",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.1"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "We've got logic in HttpSolrClient to catch NoHttpResponseException and retry.  However, this logic appears to be in the wrong place - it's in the createMethod function, which doesn't actually execute any http requests at all.  It ought to be in executeMethod.\n\nFixing this might help sort out the persistent Jenkins failures as well.",
    "attachments": {
        "SOLR-7203.patch": "https://issues.apache.org/jira/secure/attachment/12703061/SOLR-7203.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-06T14:33:30+0000",
            "author": "Alan Woodward",
            "content": "Quick n dirty patch moving the retry logic.  Would be good to get some more eyes on this though. ",
            "id": "comment-14350380"
        },
        {
            "date": "2015-03-06T17:34:40+0000",
            "author": "Mark Miller",
            "content": "We have to be careful here - we can't auto retry on NoHttpResponseException with updates - it means you don't know if the update was accepted or not. ",
            "id": "comment-14350607"
        },
        {
            "date": "2015-03-07T20:35:36+0000",
            "author": "Alan Woodward",
            "content": "we can't auto retry on NoHttpResponseException with updates\n\nI was thinking about this - I'm not sure this is actually true.  Updates in Solr are idempotent, aren't they?  If you add a document twice, then the second addition just overwrites the first.  And if you delete a document twice, then the second deletion just has no effect.  So automatically retrying is actually fine. ",
            "id": "comment-14351785"
        },
        {
            "date": "2015-03-07T21:16:19+0000",
            "author": "Alan Woodward",
            "content": "Better patch, with a test.  I've refactored executeMethod into two parts, executeMethod and parseResponse, mainly to make testing easier.\n\nI've noticed some other problems here, like the fact that we're wrapping IOExceptions in SolrServerExceptions, which sort of defeats the point of the SolrClient.request() contract, but that can be dealt with separately, I think. ",
            "id": "comment-14351805"
        },
        {
            "date": "2015-03-07T23:58:23+0000",
            "author": "Greg Solovyev",
            "content": "This is practically a duplicate of https://issues.apache.org/jira/browse/SOLR-6724 ",
            "id": "comment-14351841"
        },
        {
            "date": "2015-03-08T00:06:27+0000",
            "author": "Mark Miller",
            "content": "No there will be races and chaos monkey test runs will fail. At most it can be an option that defaults to false.  ",
            "id": "comment-14351842"
        },
        {
            "date": "2015-03-08T09:12:43+0000",
            "author": "Alan Woodward",
            "content": "maxRetries is set to 0 by default, so it does default to false (at the moment).  I'm still not clear on where the races are though - can you give an example of a failure that this could cause?\n\nGreg Solovyev hah, synchronicity!  I'll merge your patch into this one, thanks. ",
            "id": "comment-14351979"
        },
        {
            "date": "2015-03-08T12:19:12+0000",
            "author": "Alan Woodward",
            "content": "OK, I've had a closer look at the partition tests that are failing, and they already try and handle these errors with custom retry logic.  Which suggests that the HttpClient persists in using dead connections even for retries.\n\nWhat I think we need to do is to call ClientConnectionManager.closeExpiredConnections() when we hit a NoHttpResponseException.  That way the retry should be guaranteed not to use a dead connection. ",
            "id": "comment-14352022"
        },
        {
            "date": "2015-03-08T17:59:27+0000",
            "author": "Mark Miller",
            "content": "can you give an example of a failure that this could cause?\n\nYou can't have requests retrying in the background between nodes, into nodes, whatever when there is more than one client, unless you can guarantee the behavior of the clients. That's why this must be on the user.\n\nAnd even if we default to it false and allow one to turn it on, it must come with the warning that the user must guarantee this or else risk inconsistency and data loss. ",
            "id": "comment-14352165"
        },
        {
            "date": "2015-03-08T18:00:29+0000",
            "author": "Mark Miller",
            "content": "and they already try and handle these errors with custom retry logic\n\nYes, in the user code! Where it needs to be. ",
            "id": "comment-14352166"
        },
        {
            "date": "2015-03-08T18:01:12+0000",
            "author": "Mark Miller",
            "content": "(at the moment). \n\nI'd have to -1 anything else since it breaks the system  ",
            "id": "comment-14352167"
        },
        {
            "date": "2015-03-08T20:14:06+0000",
            "author": "Alan Woodward",
            "content": "I'd have to -1 anything else since it breaks the system \n\nFussy, fussy.\n\nThe patch as it stands just moves the retry logic to the right place, and leaves the default number of retries as 0.  I think that should be OK to go in? ",
            "id": "comment-14352228"
        },
        {
            "date": "2015-03-08T20:38:45+0000",
            "author": "Mark Miller",
            "content": "I'm just not okay with introducing data loss  It's kind of a big deal in the hardening of SolrCloud. If that is fussy, sue me. Especially when it's an issue that has already been fixed.\n\nI think that should be OK to go in?\n\nI think it's fine to have as an option that defaults to false - for many users, a simple retry is the option they will pick -  but I'm going to add javadoc to it that explains using it is not safe unless you can gaurantee your clients won't fight each other.\n\nLeaving it off by default will also ensure inter node communication doesn't use it, which is important to avoid replica inconsistency (which is the same as data loss). ",
            "id": "comment-14352240"
        },
        {
            "date": "2015-03-08T20:40:16+0000",
            "author": "Mark Miller",
            "content": "Also, as I said, if the default was not off, random legit chaos monkey tests will fail - also a no no. ",
            "id": "comment-14352241"
        },
        {
            "date": "2015-03-08T20:46:34+0000",
            "author": "Mark Miller",
            "content": "To define what I mean by data loss:\n\nThis means that data you added to the system and got an ack for goes away. It means we can lie to the user and they can't trust important data to our system. The only way that should happen is if a user says it's okay or if there is a bug. ",
            "id": "comment-14352244"
        },
        {
            "date": "2015-03-08T20:51:25+0000",
            "author": "Alan Woodward",
            "content": "Sorry, British sense of humour not coming across in text there.  I agree with everything you've said. ",
            "id": "comment-14352247"
        },
        {
            "date": "2015-03-08T21:05:43+0000",
            "author": "Mark Miller",
            "content": "I took it as, mention -1, dont be a dick  Not a lot of text there to go on.\n\nIn either case, I meant it as, \"i'm really positive this is a problem!\" ",
            "id": "comment-14352259"
        },
        {
            "date": "2015-03-08T23:11:32+0000",
            "author": "Mark Miller",
            "content": "Since we seem to have gotten past that, moving on:\n\nIn some cases, if we can properly detect certain things, we do want an auto retry. On read only operations, this makes complete sense. I also think, if its an update or a delete and optimistic locking is being used, that may be okay too. The part with holes is when a new doc comes in, some other client doing periodic updates to docs that match a certain criteria updates it, and then retry number 3 hits and undoes the update that was acked against a doc that was already part of the system according to client 2. If you do that type of auto retry on internode communication, it may also vary replica to replica which update survives - and once a replica gets out of sync, unless you have a very simple add only system, fixing the issue without data loss is almost impossible in all cases.\n\nFinally, overall, we probably want the retry behavior centered in one spot - the retryhandler used by the HttpClient. Having retry logic there and at a higher level gets confusing. ",
            "id": "comment-14352332"
        },
        {
            "date": "2015-03-09T19:44:38+0000",
            "author": "Alan Woodward",
            "content": "Maybe the best way forward here then is to just remove the broken code, and deprecate setMaxRetries() on HttpSolrClient (seeing as it doesn't do anything now anyway)? ",
            "id": "comment-14353469"
        },
        {
            "date": "2015-03-09T20:03:45+0000",
            "author": "Greg Solovyev",
            "content": "+1 ",
            "id": "comment-14353494"
        },
        {
            "date": "2015-03-09T21:12:11+0000",
            "author": "Shawn Heisey",
            "content": "and deprecate setMaxRetries() on HttpSolrClient (seeing as it doesn't do anything now anyway)\n\nI admit that my grasp of the code may not be very good, but in both branch_5x and trunk, maxRetries does seem to be used to control a while loop that contains the http request.  When I read this, it looks to me like setMaxRetries does do something, so what am I missing? ",
            "id": "comment-14353613"
        },
        {
            "date": "2015-03-09T21:35:27+0000",
            "author": "Alan Woodward",
            "content": "Patch removing the dead code and deprecating setMaxRetries().\n\nShawn: the retry logic is wrapping code that creates an Http method, but it doesn't actually execute it.  So it's essentially a no-op. ",
            "id": "comment-14353663"
        },
        {
            "date": "2015-03-09T21:36:32+0000",
            "author": "Greg Solovyev",
            "content": "Shawn, if you look closely at what is happening in the while loop, you will see that the request object is being created in it, but is not actually being sent. The request is being sent in HttpSolrClient::executeMethod and maxRetries is being used in createMethod. FWIF, there isn't anything in that while look that can throw NoHttpResponseException  ",
            "id": "comment-14353667"
        },
        {
            "date": "2015-03-09T22:10:24+0000",
            "author": "Shawn Heisey",
            "content": "Thanks for the explanation.  I did not grok it fully, because I'm only familiar with HttpClient on a very shallow basis.  I should remedy that, but there's never enough time to learn everything. ",
            "id": "comment-14353742"
        },
        {
            "date": "2015-03-26T10:42:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1669313 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1669313 ]\n\nSOLR-7203: Remove buggy no-op retries in HttpSolrClient ",
            "id": "comment-14381682"
        },
        {
            "date": "2015-03-26T10:54:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1669316 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1669316 ]\n\nSOLR-7203: Remove buggy no-op retries in HttpSolrClient ",
            "id": "comment-14381697"
        },
        {
            "date": "2015-04-15T00:30:24+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495282"
        }
    ]
}