{
    "id": "LUCENE-4649",
    "title": "kill ThreadInterruptedException",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "the way we currently do this is bogus.\n\nFor example in FSDirectory's fsync, i think we should instead:\n\n\n} catch (InterruptedException ie) {\n- throw new ThreadInterruptedException(ie);\n+ Thread.currentThread().interrupt(); // restore status\n+ IOException e = new java.io.InterruptedIOException(\"fsync() interrupted\");\n+ e.initCause(ie);\n+ throw e;\n\n\n\nand crazy code in IndexWriter etc that catches ThreadInterruptedExc just to restore status should be removed. \n\nInstead the guy doing the catch (InterruptedException) should do the right thing.",
    "attachments": {
        "LUCENE-4649_broken.patch": "https://issues.apache.org/jira/secure/attachment/12562911/LUCENE-4649_broken.patch",
        "LUCENE-4649.patch": "https://issues.apache.org/jira/secure/attachment/12562913/LUCENE-4649.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-28T17:01:44+0000",
            "content": "+1\n\nThe ThreadInterruptedException is a large problem with multithreaded code, as it fails to communicate the root cause and is not checked! The InterruptedException is checked in the JDK because you have to do something.\n\nIf you want to remove the checked InterruptedException and make it a unchecked or IOException subclass, you have to restore interrupted status, otherwise it can happen that your threads hang, because your code does not recognize the interruption. It is good that we \"now marked all critical codepaths\" with this useless runtime ex, we can no look at each code part when removing it and fix it to restore interrupted status.\n\nA major problem is also to catch Throwable or Exception and wrap it by another exception, because it also looses the interrupt status. E.g. IOUtils.close...() must also not suppress this (unless it is rethrown as original InterruptedException). <-- this is not the case, IOUtils is fine, because it can never catch InterruptedException, as Closeable.close may not throw it (Closeable allows only the checked IOException). ",
            "author": "Uwe Schindler",
            "id": "comment-13540516"
        },
        {
            "date": "2012-12-28T17:09:24+0000",
            "content": "\nA major problem is also to catch Throwable or Exception and wrap it by another exception, because it also looses the interrupt status. E.g. IOUtils.close...() must also not suppress this (unless it is rethrown as original InterruptedException).\n\nActually this one is fine. because Closeable cannot throw the checked InterruptedException.\n\nIts only the code catching shit around methods like sleep/wait/etc that throw checked InterruptedExceptions that need to be fixed to do the right thing. ",
            "author": "Robert Muir",
            "id": "comment-13540521"
        },
        {
            "date": "2012-12-28T17:09:55+0000",
            "content": "+1 ",
            "author": "Mark Miller",
            "id": "comment-13540523"
        },
        {
            "date": "2012-12-30T12:17:50+0000",
            "content": "So e.g. we would fix IW methods to throw the [checked] InterruptedException, or would they also wrap it under an IOException?  Why should should FSDir.sync pretend this was an IOException not an interrupt?\n\nThe problem here is using Thread.interrupt is dangerous if you use MMapDir or NIOFSDir, ie the interrupt may close file handles and make the IR unusable (and eg lose a flushed segment if it's IW).  So advertising that tons of methods now throw the checked InterruptedException might make users think these methods are in fact safely interruptible when they are not ... ",
            "author": "Michael McCandless",
            "id": "comment-13541072"
        },
        {
            "date": "2012-12-30T13:05:41+0000",
            "content": "No no no. I thought my example was pretty good. I guess not.\n\nThis is unrelated to mmap etc. This is about guys catching interruptedexc from thread.sleep and so on. An example of this is given above in the description of this issue, that's fsdirectorys sync impl. It sleeps sometimes. If its interrupted during sleep, we should:\n1. Restore status\n2. Throw non crazy exc.\n\nWe don't need to change method Signatures. Interested users can check interrupt status and it will now actually work the way it should in a java program. Threadinterruptedexc is not that. The current scheme is senseless and broken.  ",
            "author": "Robert Muir",
            "id": "comment-13541076"
        },
        {
            "date": "2013-01-01T12:05:59+0000",
            "content": "OK I see, so the big problem is we are throwing our own exc (ThreadInterruptedException) but failing to set the interrupt bit?  Ie this is a violation of the protocol (we can only clear the interrupt status if we throw the true, checked InterruptedException).  I agree with that.\n\nBut, I don't see why we should pretend that you hit an IOException when in fact we were interrupted?  That seems worse than throwing ThreadInterruptedExc. ",
            "author": "Michael McCandless",
            "id": "comment-13541625"
        },
        {
            "date": "2013-01-01T12:40:50+0000",
            "content": "OK I see, so the big problem is we are throwing our own exc (ThreadInterruptedException) but failing to set the interrupt bit?\n\nYes, thats problem #1, the serious part.\n\nBut, I don't see why we should pretend that you hit an IOException when in fact we were interrupted? That seems worse than throwing ThreadInterruptedExc.\n\nI disagree. The official documentation explicitely mention that IO-related code that gets interrupted must throw java.io.InterruptedIOException which is exactly defined as we use it.\n\nThe second big problem of our own custom exception is that interrupts must be checked Exceptions, so the caller is forced to handle it! The whole InterruptedException stuff is broken in Java, theoretically InterruptedException should be a fourth type of Throwable and not an Exception, so you cannot catch them accientally when doing: catch (Exception e) { ignore }: Exception (checked), RuntimException (unchecked), Error (checked) and InterruptedException (as 4th type).\n\nIf you disagree with InterruptedIOException, the only possible and most clean way would be to make InterruptedException part of all throws clauses clearing interrupted bit, sorry. ",
            "author": "Uwe Schindler",
            "id": "comment-13541628"
        },
        {
            "date": "2013-01-02T15:08:57+0000",
            "content": "This is also related (in my opinion a big part of the problem) to LUCENE-4638.\n\nThe problem is that indexwriter relies upon certain types of exceptions (e.g. ThreadInterruptedException) instead of checking interrupt status?\n\nso if we fix this correctly, then in close() when trying to shut down merges and so on it would handle ClosedByInterruptException correctly too.\n ",
            "author": "Robert Muir",
            "id": "comment-13542162"
        },
        {
            "date": "2013-01-02T15:10:28+0000",
            "content": "This patch still isnt quite right: (so i suffixed it with _broken).\n\nIn general I need to think more about the  crazy logic in IndexWriter.java...\n\nI just wanted to hopefully get things moving ",
            "author": "Robert Muir",
            "id": "comment-13542164"
        },
        {
            "date": "2013-01-02T15:11:45+0000",
            "content": "Really as part of this issue we should re-enable mmap/niofs for TestIndexWriter.testThreadInterruptDeadlock() ?\n\nIts like if we havent fixed that case (LUCENE-4638), then we havent fixed this issue correctly... ",
            "author": "Robert Muir",
            "id": "comment-13542168"
        },
        {
            "date": "2013-01-02T15:19:52+0000",
            "content": "another iteration: i fixed some bugs in the last patch, and re-enabled mmap/niofs for the interrupt test, but i think there are still some bugs. ",
            "author": "Robert Muir",
            "id": "comment-13542173"
        },
        {
            "date": "2013-01-02T15:25:42+0000",
            "content": "the main bug in the current patch is how we swallow things in IndexWriter.close\n\nthis whole thing should act like IOUtils.close() and have a 'Exception priorException'.\nWe can check the interrupt bit to determine that we should not wait when calling finishMerges(), but thats it!\n\nwe should try to close everything down and ensure that prior exception (ClosedByInterrupt, InterruptedIO, Runtime, whatever the hell it is) gets thrown too. ",
            "author": "Robert Muir",
            "id": "comment-13542178"
        },
        {
            "date": "2013-01-02T21:06:27+0000",
            "content": "The official documentation explicitely mention that IO-related code that gets interrupted must throw java.io.InterruptedIOException which is exactly defined as we use it.\n\nInterruptedIOException sounds great!\n\nThe problem is that indexwriter relies upon certain types of exceptions (e.g. ThreadInterruptedException) instead of checking interrupt status?\n\n+1 to just check the interrupted bit.\n\nReally as part of this issue we should re-enable mmap/niofs for TestIndexWriter.testThreadInterruptDeadlock() ?\n\n+1\n\nthis whole thing should act like IOUtils.close() and have a 'Exception priorException'.\n\n+1\n\nWe can check the interrupt bit to determine that we should not wait when calling finishMerges(), but thats it!\n\n+1\n\nI looked at the patch ... I don't like how we throw RuntimeException\non interrupt (I think that's worse than throwing\nThreadInterruptedException).  Maybe in those places we should instead add\n\"throws InterruptedException\" to the method (eg NRTManager.close)? ",
            "author": "Michael McCandless",
            "id": "comment-13542404"
        },
        {
            "date": "2013-01-02T21:12:35+0000",
            "content": "This popped up on the hotspot-dev mailing list recently, thought you may want to be careful with loops checking the interrupted bit \n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8003135 ",
            "author": "Dawid Weiss",
            "id": "comment-13542409"
        }
    ]
}