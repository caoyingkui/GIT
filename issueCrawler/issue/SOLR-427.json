{
    "id": "SOLR-427",
    "title": "Allow IndexSchema to load from an InputStream, not just a file system file",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "IndexSchema is currently tied to reading a file system schema.xml file.   In order to more dynamically load a schema from in-memory configuration this needs to be adjusted.",
    "attachments": {
        "patch.txt": "https://issues.apache.org/jira/secure/attachment/12371126/patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12549028",
            "date": "2007-12-06T13:27:05+0000",
            "content": "Attached is a patch that allows IndexSchema to load from an InputStream.  This deprecates the getInputStream() method  as that didn't seem a viable method to keep - suggestions welcome on that.   It also deprecates the original constructor, though that might be unnecessary. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12549029",
            "date": "2007-12-06T13:28:39+0000",
            "content": "Ultimately what I want to do is affect an in-memory schema and then load a new SolrCore with it, without having to futz with XML.  This gets some of the way there in the simplest way possible.  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12549680",
            "date": "2007-12-08T10:46:00+0000",
            "content": "committed.   I left the deprecations of the file constructor and the getInputStream() method.   The file constructor can easily be refactored out.  As for getInputStream() - the only way this could be viable with an IndexSchema constructed by an InputStream would be if the schema bytes were tucked away when loaded so they could be regurgitated back - which perhaps makes sense?!   Something to consider when we eventually get around to cleaning up all the deprecations we have lying around. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12551141",
            "date": "2007-12-12T22:50:40+0000",
            "content": "Hymmm.  I'm just now looking at this in the context of multi-core support....\n\nDeprecating IndexSchema(SolrConfig solrConfig, String schemaFile) isn't good because it gives up RELOAD \u2013 the schema no longer knows where it came from.  Also, the changes you make set the filename to \"schema.xml\" regardless of what is actually used.\n\nBut maybe it is ok.  everything we have is hardcoded to instanceDir+\"/conf/schema.xml\" anyway.\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12551218",
            "date": "2007-12-13T05:24:25+0000",
            "content": "I was following the precedent set by SolrConfig (i.e. public SolrConfig(String instanceDir, String file, InputStream is)) a bit with this patch.   Why is \"file\" in that constructor? \n\nIt is highly desirable and useful to have these things configurable outside the scope of a file system file, or even XML for that matter (but that can be hacked with an InputStream that hides the XML nature of it at this point).   \n\nI concur that it would be great for these configuration pieces to be able to reload themselves - perhaps what we do is simply tuck the bytes read from the InputStream away internally so they can be reloaded or dumped back out.\n\nI'm fine with undeprecating that constructor, though, at least until we come up with something better. "
        }
    ]
}