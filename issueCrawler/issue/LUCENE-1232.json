{
    "id": "LUCENE-1232",
    "title": "Use segments generation instead of version",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.1,                                            2.2,                                            2.3,                                            2.3.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Right now the segments file stores generation, a long starting with 0\nthat increments by 1 with each commit, and version, a long starting\nwith System.currentTimeMillis() that also increments by 1 with each\ncommit.\n\nI think they are redundant so we can replace all methods/uses of\nversion with generation instead.\n\nSpinoff from LUCENE-1228.",
    "attachments": {
        "LUCENE-1232.dc.patch": "https://issues.apache.org/jira/secure/attachment/12377937/LUCENE-1232.dc.patch",
        "check.version.vs.gen.diff": "https://issues.apache.org/jira/secure/attachment/12377929/check.version.vs.gen.diff",
        "LUCENE-1232.patch": "https://issues.apache.org/jira/secure/attachment/12377888/LUCENE-1232.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-14T10:30:37+0000",
            "content": "Attached patch.  I plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12578675"
        },
        {
            "date": "2008-03-14T17:01:21+0000",
            "content": "To test this I added to SegmentInfos a comparison of current_generation to \nversionGap where the latter is defined as current_version - first_vald_version. \nThe values are compared at writing the segmentInfos, which is where both are updated.\nNote: this path is applied on svn head - i.e. before/without the patch that gets rid of version.\nAll core tests pass except one: \nTestIndexWriter.testAddIndexOnDiskFull()\n    [junit] ------------- Standard Output ---------------\n    [junit] At write (segments_4) ver=1205513263760 verGap=3 gen=4   WRONG !!!!!!!!!!!!!!\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testAddIndexOnDiskFull(org.apache.lucene.index.TestIndexWriter):  Caused an ERROR\n    [junit] At write (segments_4) ver=1205513263760 verGap=3 gen=4   WRONG !!!!!!!!!!!!!!\n    [junit] java.lang.RuntimeException: At write (segments_4) ver=1205513263760 verGap=3 gen=4   WRONG !!!!!!!!!!!!!!\n    [junit]     at org.apache.lucene.index.SegmentInfos.compareVersionAndGeneration(SegmentInfos.java:360)\n    [junit]     at org.apache.lucene.index.SegmentInfos.write(SegmentInfos.java:348)\n    [junit]     at org.apache.lucene.index.SegmentInfos.commit(SegmentInfos.java:767)\n    [junit]     at org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:4194)\n    [junit]     at org.apache.lucene.index.IndexWriter.commitTransaction(IndexWriter.java:2530)\n    [junit]     at org.apache.lucene.index.IndexWriter.addIndexes(IndexWriter.java:3000)\n    [junit]     at org.apache.lucene.index.TestIndexWriter.testAddIndexOnDiskFull(TestIndexWriter.java:294)\n    [junit]\n    [junit]\n    [junit] Test org.apache.lucene.index.TestIndexWriter FAILED\n\n\nMike, since all tests passed for you when disabling version I assume this failure is just related \nto deliberately hitting that full disk error, but I thought perhaps you'd like to take a look at that to make sure. ",
            "author": "Doron Cohen",
            "id": "comment-12578854"
        },
        {
            "date": "2008-03-14T17:38:01+0000",
            "content": "I think this is OK: it looks like that test hit a disk full after\ngeneration was incremented but before version was incremented, in\nSegmentInfos.write. ",
            "author": "Michael McCandless",
            "id": "comment-12578866"
        },
        {
            "date": "2008-03-14T17:56:47+0000",
            "content": "Yes you're right, thanks. ",
            "author": "Doron Cohen",
            "id": "comment-12578870"
        },
        {
            "date": "2008-03-14T18:00:35+0000",
            "content": "if i'm understanding this correctly: we're removing the concept of \"version\" from SegmentsInfo and leaving the concept of \"generation\" but in IndexReader we are preserving the term \"version\" but making it an alias for the current generation.\n\nunless i'm missing something, a side affect of this will be that after upgrading modifying an existing index could result in reader.getVersion() and IndexReader.getCurrentVersion(Directory) returning lower numbers then before \u2013 but \nthe contract for getCurrentVersion has always suggested that version numbers will only ever increase\n\nthis doesn't really hurt me personally in anyway, but i can imagine some situations where this could screw people over (ie: code that tests if one version of an index is \"newer\" then another by having a higher version#)\n\ni don't fully understand the relationship between \"version\" and \"generation\" in SegmentInfos (if this patch is making SegmentInfos.getVersion() return getGeneration then shouldn't is also remove/modify the reading/writing of \"version\" from the segments file?) but perhaps one way to prevent potential problems like the one mentioned above is if we define IndexReader \"version\" as the sum of the SegmentsInfos \"version\" and SegmentsInfos \"generation\"  ",
            "author": "Hoss Man",
            "id": "comment-12578871"
        },
        {
            "date": "2008-03-14T18:35:32+0000",
            "content": "\nHoss, you're right: if an app has stored away the previous result from\nIndexReader.getVersion() of their index, does an upgrade to 2.4, and\nthen uses that previously stored version to compare with\nIndexReader.getVersion(), the version would have gone backwards.\n\nI think I can modify the patch such that only a newly created segments\nfile would switch to using generation as version, but a previously\nopened and then newly committed segments file would retain the old\nversion.  Though ... I don't really like that approach because I don't\nthink we could ever remove that back-compatible code (a single index\ncan stay alive indefinitely).\n\nMaybe it's best not to make any change here and live with the\n[minor] redundancy?\n ",
            "author": "Michael McCandless",
            "id": "comment-12578886"
        },
        {
            "date": "2008-03-14T18:44:40+0000",
            "content": "I otoh liked this side effect of this change, i.e. that index version values \nwill no longer be very large numbers, millis, but rather very readable \nnumbers starting from 1.  But I didn't think of the problem Hoss pointed.\n\nAnyhow I think that SegmentsInfo can be made a bit simpler by getting rid\nof more 'version' related code - attached LUCENE-1232.dc.patch does this.\nTo prevent backwards compatibility issues it still writes and reads 0 (zero) for that version.\nAll tests pass. ",
            "author": "Doron Cohen",
            "id": "comment-12578890"
        },
        {
            "date": "2008-03-14T19:01:47+0000",
            "content": "\nAnyhow I think that SegmentsInfo can be made a bit simpler by getting rid f more 'version' related code\n\nI mean assuming the redundancy is removed. ",
            "author": "Doron Cohen",
            "id": "comment-12578894"
        },
        {
            "date": "2008-03-14T19:21:36+0000",
            "content": "I like your new patch Doron.\n\nBut we still have the \"backwards compatibility when someone saves the index version across an upgrade to 2.4\" problem.  In theory someone could call getVersion(), store this into a database (say), upgrade, restart their app, pull the old version from the database, and compare it to the new getVersion() result.\n\nThough, I think this would happen extremely rarely in practice?  I would expect the version is almost always only saved within the JVM, and not persisted, and is used to decide when to reopen a reader.  And since you'd have to shut down all readers & your writer in order to do an upgrade to 2.4, you will have re-opened the readers already. ",
            "author": "Michael McCandless",
            "id": "comment-12578897"
        },
        {
            "date": "2008-03-14T19:42:44+0000",
            "content": "A nice thing about version is that it has relatively high uniqueness.\nIf we use generation for version, one could blow away an index, rebuild it with slight changes, and get the same version number.... so version becomes less useful. ",
            "author": "Yonik Seeley",
            "id": "comment-12578904"
        },
        {
            "date": "2008-03-14T19:59:20+0000",
            "content": "That's a good point; because version seeds with System.currentTimeMillis() it increases even when you create a new index.\n\nOK I think we should just leave version as is for now. ",
            "author": "Michael McCandless",
            "id": "comment-12578912"
        }
    ]
}