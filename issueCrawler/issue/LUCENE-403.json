{
    "id": "LUCENE-403",
    "title": "Alternate Lucene Query Highlighter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/highlighter"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I created a lucene query highlighter (borrowing some code from the one in\nthe sandbox) that my company is using.  It better handles phrase queries,\ndoesn't break HTML entities, and has the ability to either highlight terms\nin an entire document or to highlight fragments from the document.  I would \nlike to make it available to anyone who wants it.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--QueryHighlighter.java": "https://issues.apache.org/jira/secure/attachment/12312651/ASF.LICENSE.NOT.GRANTED--QueryHighlighter.java",
        "ASF.LICENSE.NOT.GRANTED--QuerySpansExtractor.java": "https://issues.apache.org/jira/secure/attachment/12312654/ASF.LICENSE.NOT.GRANTED--QuerySpansExtractor.java",
        "ASF.LICENSE.NOT.GRANTED--HighlighterTest.java": "https://issues.apache.org/jira/secure/attachment/12312652/ASF.LICENSE.NOT.GRANTED--HighlighterTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-06-28T02:32:14+0000",
            "content": "Created an attachment (id=15538)\nThis is the code for the query highlighter. ",
            "author": "David Bohl",
            "id": "comment-12322459"
        },
        {
            "date": "2005-06-28T03:56:56+0000",
            "content": "Thanks! Is it possible to contribute it under the Apache Software License, \nwith the copyright statement pointing to Apache, like this? \n\n/** \n\n\tCopyright 2005 The Apache Software Foundation\n\t\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\tyou may not use this file except in compliance with the License.\n\tYou may obtain a copy of the License at\n\t\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\t\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n */ \n\n\n\nThis would make it easier to integrate it in our SVN repository. \n ",
            "author": "Daniel Naber",
            "id": "comment-12322460"
        },
        {
            "date": "2005-06-28T07:46:14+0000",
            "content": "Created an attachment (id=15541)\nJUnit test\n\nHi David,\nThanks for this. I've still not taken the time to add proper phrase/span query\nsupport to the current sandbox highlighter so this will definitely be useful to\nfolks.\nI've adapted portions of the existing highlighter's Junit test to work on your\nhighlighter code and have attached it here. There are some issues I've noted on\na first pass over the code and these are illustrated in the Junit tests. Some\nof them may be deliberate design choices (eg no slop factor support) but others\nI'd rate as real issues eg lack of fieldname for use with analyzers.\nGoing forward I think it would be useful to try retain some of the features of\nthe existing highlighter (eg IDF weighted fragment scoring, fragSizes defined\nin bytes) and merge with your phrase-highlighting features.Adding span query\nsupport would be good too. What I'm less clear on right now is how this is best\nachieved.\n\nThanks again,\nMark ",
            "author": "Mark Harwood",
            "id": "comment-12322461"
        },
        {
            "date": "2005-06-28T16:20:59+0000",
            "content": "(In reply to comment #3) \n... \n> Going forward I think it would be useful to try retain some of the features \nof \n> the existing highlighter (eg IDF weighted fragment scoring, fragSizes defined \n> in bytes) and merge with your phrase-highlighting features.Adding span query \n> support would be good too. What I'm less clear on right now is how this is \nbest \n> achieved. \n\nGiven the possibility of nested span queries, it might be best \ndo this is by reindexing the field to be highlighted in ram, reuse \nthe span query on it for collecting the Spans (via getSpans()) \nand use the beginnings and the ends from this spans as \nthe basis for highlighting. \nFor efficiency during reindexing the analyzer used to assemble \nthe lucene document could ignore all tokens that will not match, \nexcept for their positions. \n\nRegards, \nPaul Elschot \n ",
            "author": "Paul Elschot",
            "id": "comment-12322462"
        },
        {
            "date": "2005-06-28T19:26:49+0000",
            "content": "(In reply to comment #4)\n> Given the possibility of nested span queries, it might be best \n> do this is by reindexing the field to be highlighted in ram, reuse \n> the span query on it for collecting the Spans (via getSpans()) \n\nNice. The MemoryIndex contribution would be a fast way of doing this. I've just\nadapted the LIA SpanQueryTest JUnit test to work with MemoryIndex and all seems\nwell doing Spans against MemoryIndex. I had to expose a getReader() method on\nMemoryIndex to do this.\n\nDo you know if it is possible to rewrite a Phrase query as a SpanQuery and\npreserve all the behaviour eg slop factor? For the purposes of simplifying the\nhighlighter code it may be easier to rewrite PhraseQuerys to Spans and then call\ngetSpans as you suggest. ",
            "author": "Mark Harwood",
            "id": "comment-12322463"
        },
        {
            "date": "2005-06-29T00:21:58+0000",
            "content": "Mark,\n\nNote that improvements I've made to the MemoryIndex haven't been commited in a while. There's a \nsmall bug fix for TermEnum and some performance and documentation improvements.  One of them \nrequires a Term.createTerm() addition, as outlined in the MemoryIndex bugzilla issue. http://\nissues.apache.org/bugzilla/show_bug.cgi?id=34585\n\nNo idea why these things have never been considered. So I'm shipping the source and binary in the Nux \nXQuery library. If you're interested you can get it from there.\n\nI'm ok with exposing a getReader method or similar. See the comments related to safety in the relevant \nmethods. You've probably also seen the constructor that enables term offset indexing, currently private \nuntil the highlighter package matures.\n\nWolfgang. ",
            "author": "hoschek",
            "id": "comment-12322464"
        },
        {
            "date": "2005-06-29T04:03:58+0000",
            "content": "(In reply to comment #5) \n... \n>  \n> Do you know if it is possible to rewrite a Phrase query as a SpanQuery and \n> preserve all the behaviour eg slop factor? For the purposes of simplifying \nthe \n> highlighter code it may be easier to rewrite PhraseQuerys to Spans and then \ncall \n> getSpans as you suggest. \n\nI'd expect a one to one mapping of PhraseQuery to an ordered SpanNearQuery over \nSpanTermQueries, but I've never done this myself. \n\nRegards, \nPaul Elschot  ",
            "author": "Paul Elschot",
            "id": "comment-12322465"
        },
        {
            "date": "2005-07-01T00:50:37+0000",
            "content": "Created an attachment (id=15563)\nUpdated version\n\nI had already made an update to this to handle phrase queries with a slop set\n(we had a user report this as an error on our site).  If there is a slop it\njust highlights individual terms in the phrase (and doesn't check if they are\nnear each other). ",
            "author": "David Bohl",
            "id": "comment-12322466"
        },
        {
            "date": "2005-07-01T00:58:26+0000",
            "content": "> Thanks! Is it possible to contribute it under the Apache Software License,\n> with the copyright statement pointing to Apache, like this?\n\nYes, my company has given me permission to give this away.  You can change it \nany way you want. ",
            "author": "David Bohl",
            "id": "comment-12322467"
        },
        {
            "date": "2005-07-01T05:30:51+0000",
            "content": "Created an attachment (id=15568)\nSpansExtractor\n\nSpans looks like a reasonable way of defining the areas of interest in a doc.\nHeres a class that converts any query (term/phrase/spanNear..) into an array of\nSpans for use in highlighting. ",
            "author": "Mark Harwood",
            "id": "comment-12322468"
        },
        {
            "date": "2005-07-05T00:34:48+0000",
            "content": "Created an attachment (id=15587)\nAdded a fieldName in case a custom Analyser is passed in arguments ",
            "author": "Sven Duzont",
            "id": "comment-12322469"
        },
        {
            "date": "2005-07-05T00:35:31+0000",
            "content": "Created an attachment (id=15588)\nA patch to the JUnit test ",
            "author": "Sven Duzont",
            "id": "comment-12322470"
        },
        {
            "date": "2007-05-19T11:31:22+0000",
            "content": "fix title ",
            "author": "Daniel Naber",
            "id": "comment-12497147"
        },
        {
            "date": "2008-05-17T01:53:33+0000",
            "content": "Mark M || Mark H:\n\nDo you think you could check out this 3 years old contribution?  You did the most work around Highlighter and will be able to see if there is anything to be salvaged here or whether all functionality in this contribution already made it into contrib/highlighter.  Thanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12597684"
        },
        {
            "date": "2008-05-25T12:07:20+0000",
            "content": "I would say we do have all of the functionality of this patch +. I have not checked how well this handles all of the corner cases, but it looks like Mark H did a bit of that. I would say it currently offers no functional value though...but it may be faster than what we have for PhraseQuery's (it does not support Spans). The patch uses the offsets from the TokenStream for highlighting and just makes sure PhraseQuery's terms are next to each other (not sure how exact this emulates slop), so this can be rather fast on larger docs.\n\nI analyzed all of the old Highlight code in JIRA when considering how best to do the SpanScorer, and passed on them for one reason or another. The main pass on this was the lack of Span support, loss of current highlighter features/api, pseudo duplicating Lucene phrase query searching in the Highlighter code. I think a solution that doesn't duplicate Query code is much cleaner.\n\nSo I don't think this is very useful in regards to the general Highlighter. The idea of using Token offset info to do the Highlighting was also tried in Ronnie's JIRA issue (though in that case it was done through TermVectors and not from the TokenStream), and while it proves to be faster on large documents, it doesn't appear easy to retain the speed when working with Spans, and it doesn't fit well with the old API.\n\nShould we ditch the old API some day though, I have been playing around with this technique with my LargeDocHighlighter, and I still have hope that will go somewhere. I just don't see the old token scoring API being thrown away in the near future.\n ",
            "author": "Mark Miller",
            "id": "comment-12599678"
        },
        {
            "date": "2011-01-25T17:39:37+0000",
            "content": "Mark Miller: What do you think, is this issue still relevant?\n\nIf not, we should close it and say: resolved by FastVectorHighlighter or because recent improvements in standard highlighter? ",
            "author": "Uwe Schindler",
            "id": "comment-12986542"
        },
        {
            "date": "2011-01-25T17:44:17+0000",
            "content": "Yeah - I would totally close this. This work has been superseded - and it looks like highlighting may be able to take another leap forward soon.  ",
            "author": "Mark Miller",
            "id": "comment-12986544"
        },
        {
            "date": "2011-01-25T17:45:40+0000",
            "content": "Some of this work moved into other issues. Some of it just too old now. I think this issue has served it's purpose. ",
            "author": "Mark Miller",
            "id": "comment-12986545"
        }
    ]
}