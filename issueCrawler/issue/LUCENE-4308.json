{
    "id": "LUCENE-4308",
    "title": "Check what's wrong with reporting unclosed directories with previous errors",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "-Dtests.seed=75DBD696A5D72F04\n-Dtestcase=TestFailIfDirectoryNotClosed\n\n\nWindows.",
    "attachments": {
        "LUCENE-4308.patch": "https://issues.apache.org/jira/secure/attachment/12541116/LUCENE-4308.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-15T14:21:36+0000",
            "content": "Ok, I know what the problem is with the test framework. I don't know why this seed passes on any 1.6 (IBM or Oracle) and fails on 1.7 (IBM, Oracle).  ",
            "author": "Dawid Weiss",
            "id": "comment-13435145"
        },
        {
            "date": "2012-08-15T18:58:35+0000",
            "content": "Everything is fine with the test framework. Note the exceptions:\n\njava.lang.RuntimeException: MockDirectoryWrapper: cannot close: there are still open locks: [write.lock]\n\tat __randomizedtesting.SeedInfo.seed([75DBD696A5D72F04:B243B645B01DCC9]:0)\n\tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:562)\n\tat org.apache.lucene.util.junitcompat.TestFailIfDirectoryNotClosed$Nested2.testDummy(TestFailIfDirectoryNotClosed.java:58)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)\n\tat java.lang.reflect.Method.invoke(Method.java:612)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:32)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:345)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:769)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:429)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:38)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:40)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:345)\n\tat java.lang.Thread.run(Thread.java:735)\n\ncom.carrotsearch.randomizedtesting.ResourceDisposalError: Resource in scope SUITE failed to close. Resource was registered from thread Thread[id=16, name=TEST-TestFailIfDirectoryNotClosed$Nested2.testDummy-seed#[75DBD696A5D72F04], state=RUNNABLE, group=TGRP-TestFailIfDirectoryNotClosed$Nested2], registration stack trace below.\n\tat __randomizedtesting.SeedInfo.seed([75DBD696A5D72F04]:0)\n\tat java.lang.Thread.getStackTraceImpl(Native Method)\n\tat java.lang.Thread.getStackTrace(Thread.java:1039)\n\tat com.carrotsearch.randomizedtesting.RandomizedContext.closeAtEnd(RandomizedContext.java:150)\n\tat org.apache.lucene.util.LuceneTestCase.closeAfterSuite(LuceneTestCase.java:487)\n\tat org.apache.lucene.util._TestUtil.getTempDir(_TestUtil.java:97)\n\tat org.apache.lucene.util.LuceneTestCase.newDirectoryImpl(LuceneTestCase.java:1049)\n\tat org.apache.lucene.util.LuceneTestCase.newMockDirectory(LuceneTestCase.java:846)\n\tat org.apache.lucene.util.LuceneTestCase.newMockDirectory(LuceneTestCase.java:842)\n\tat org.apache.lucene.util.junitcompat.TestFailIfDirectoryNotClosed$Nested2.testDummy(TestFailIfDirectoryNotClosed.java:55)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)\n\tat java.lang.reflect.Method.invoke(Method.java:612)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:32)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:345)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:769)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:429)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:38)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:40)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:345)\n\tat java.lang.Thread.run(Thread.java:735)\nCaused by: java.io.IOException: Could not remove: C:\\Users\\dweiss\\AppData\\Local\\Temp\\index2055520555tmp\n\tat org.apache.lucene.util.CloseableFile.close(CloseableFile.java:43)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2$1.apply(RandomizedRunner.java:602)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2$1.apply(RandomizedRunner.java:599)\n\tat com.carrotsearch.randomizedtesting.RandomizedContext.closeResources(RandomizedContext.java:167)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.afterAlways(RandomizedRunner.java:615)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:43)\n\t... 2 more\n\n\n\nIndeed, the first one is the intended unclosed-writer exception. The second exception signals that the directory couldn't be removed from disk (which is an after-suite enforced cleanup). The \"unclosed directory\" is not raised. I'll fix the test. ",
            "author": "Dawid Weiss",
            "id": "comment-13435415"
        },
        {
            "date": "2012-08-15T19:27:15+0000",
            "content": "So the problems here are twofold. We should clean up after those unclosed index writers. The behavior here is correct (two exceptions) because the second exception is a message indicating the temporary folder (for the unclosed directory) could not be removed. Not being able to remove a temporary folder is a bad thing especially on windows where this may affect things down the execution chain.\n\nThe second problem is that the behavior of this loop in _testUtil:\n\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n\n\nis different under windows and 1.6/1.7 (J9 and hotspot) \u2013 when a directory with the given \"result\" filename already exists 1.6 throws an occasional IOException and 1.7 returns false.\n\nException in thread \"main\" java.io.IOException: Access is denied\n\tat java.io.WinNTFileSystem.createFileExclusively(Native Method)\n\tat java.io.File.createNewFile(File.java:883)\n\tat org.apache.lucene.Clazz.main(Clazz.java:25)\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13435440"
        },
        {
            "date": "2012-08-15T19:54:30+0000",
            "content": "\nThe behavior here is correct (two exceptions) because the second exception is a message indicating the temporary folder (for the unclosed directory) could not be removed. Not being able to remove a temporary folder is a bad thing especially on windows where this may affect things down the execution chain.\n\nI (strongly) don't agree with this. If a test failed, we shouldnt be deleting its index directory.\nIf we arent going to change this, then ill open an issue to never delete directories at all, because this is really bad and I've been frustrated with it for a while.\n\nI already have to edit every test and change it to make indexes in /tmp/myIndex if a test fails so I can debug it: this is really horrible.\n\nSecondly, we cannot remove the files if we cannot remove the Directory, otherwise ridiculous exceptions from other threads are going to happen, absurdly confusing ones that could send people off into hours of debugging that they shouldnt be doing. ",
            "author": "Robert Muir",
            "id": "comment-13435454"
        },
        {
            "date": "2012-08-15T20:08:13+0000",
            "content": "Ok, I get it. If so, then a patch is needed to remove this from the current codebase because it's in there. I'll update tomorrow. ",
            "author": "Dawid Weiss",
            "id": "comment-13435466"
        },
        {
            "date": "2012-08-15T20:14:19+0000",
            "content": "I can work on it, and sorry for being frustrated  \n\nI spent some time with Mark last night trying to help him debug \nsome test problems and let me just say I think it was enlightening.\n\nThat's why i actually committed the test that even caused this problem:\nanything we can do to throw the correct exceptions instead of scary ones\ncould save hours or days of debugging crazy things.\n\nI'll see if i can make a patch here. ",
            "author": "Robert Muir",
            "id": "comment-13435480"
        },
        {
            "date": "2012-08-15T20:19:49+0000",
            "content": "That's all right, I see the point of doing this and I remember that I added it at some point so it should be easy to weed out.\n\nanything we can do to throw the correct exceptions instead of scary ones could save hours or days of debugging crazy things.\n\nI'm more of a \"log all exceptions and leave the interpretation to whoever reads the logs\" guy. It's clear that you should be looking at the exceptions top-to-bottom because there can be causal dependencies among them. I've had my share of cases where the first exception wasn't actually the problem though so I wouldn't want to hide exceptions that happened later on from view if that's what you meant.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13435484"
        },
        {
            "date": "2012-08-15T20:31:04+0000",
            "content": "here's a patch (no tests for it yet).\n\nI think we should treat CloseableFile just like CloseableDirectory? \n\nso we don't do anything if the test already failed. ",
            "author": "Robert Muir",
            "id": "comment-13435495"
        },
        {
            "date": "2012-08-15T20:53:23+0000",
            "content": "added a testcase ",
            "author": "Robert Muir",
            "id": "comment-13435515"
        },
        {
            "date": "2012-08-15T20:59:26+0000",
            "content": "And the test-the-tester test should delete its file when its done  ",
            "author": "Robert Muir",
            "id": "comment-13435520"
        },
        {
            "date": "2012-08-16T06:41:46+0000",
            "content": "Your patch looks good to me, Robert. I know it took quite some time and nerves to locale and obscured other issues \u2013 really sorry about it, hard to predict all the side-effects in a codebase as complex as this one. ",
            "author": "Dawid Weiss",
            "id": "comment-13435795"
        },
        {
            "date": "2012-08-16T12:26:35+0000",
            "content": "Not your fault: \n\nthis one probably hasnt obscured too much: The MockDirectoryWrapper problem was the worst I think.\n\nI'll commit this now. ",
            "author": "Robert Muir",
            "id": "comment-13435925"
        },
        {
            "date": "2013-05-10T10:32:45+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653711"
        }
    ]
}