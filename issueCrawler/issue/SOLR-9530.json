{
    "id": "SOLR-9530",
    "title": "Add an Atomic Update Processor",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "I'd like to explore the idea of adding a new update processor to help ingest partial updates.\n\nExample use-case - There are two datasets with a common id field. How can I merge both of them at index time?\n\n\nSo the first JSON dump could be ingested against http://localhost:8983/solr/gettingstarted/update/json\n\nAnd then the second JSON could be ingested against\nhttp://localhost:8983/solr/gettingstarted/update/json?processor=atomic\n\nThe Atomic Update Processor could support all the atomic update operations currently supported.",
    "attachments": {
        "assertU(...)-works.png": "https://issues.apache.org/jira/secure/attachment/12865169/assertU%28...%29-works.png",
        "commit()-doesn't-work.png": "https://issues.apache.org/jira/secure/attachment/12865170/commit%28%29-doesn%27t-work.png",
        "SOLR-9530.patch": "https://issues.apache.org/jira/secure/attachment/12852495/SOLR-9530.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-18T23:34:35+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I am not sure i understand the description. What will the second operation actually do? Convert a submitted document into an Update document against the first document?  ",
            "id": "comment-15501827"
        },
        {
            "date": "2016-09-19T05:20:36+0000",
            "author": "Varun Thacker",
            "content": "Hi Alexandre,\n\nThe AtomicUpdateProcessorFactory update job would be to take the document and all the fields , but convert the request into an atomic update. \n\nSo lets say the first JSON is like this:\n\n\n {\"id\":\"1\" , \"brand\" : \"apple\" } \n\n\nThis will be indexed . Now say the second json file has documents in this format\n\n\n {\"id\":\"1\" , \"price\" : 1} \n\n\nThis can be indexed against the atomic update processor chain.\n\nSo the final document in the index should be \n\n\n {\"id\": \"1\" , \"price\" : 1 , \"brand\" : \"apple\" } \n ",
            "id": "comment-15502326"
        },
        {
            "date": "2016-09-19T10:54:28+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Ok, that makes sense. And if this URP is defined as a standalone item, it could be triggered as a pre-processor in a request parameter for the second call. This would simplify output formats for 3rd parties.\n\n+1 ",
            "id": "comment-15503083"
        },
        {
            "date": "2016-09-19T12:29:27+0000",
            "author": "Noble Paul",
            "content": "Adding to Alexandre Rafalovitch I would say all URPs should be able to optionally accept request params and they must be available all the time. This will free up users from unnecessarily mucking up with solrconfig.xml\n\nexample:\n\n /update?preprocessor=atomic&field=my_new_field \n\n ",
            "id": "comment-15503269"
        },
        {
            "date": "2017-02-14T05:33:59+0000",
            "author": "Amrit Sarkar",
            "content": "Hi Varun, Alexandre, Noble,\n\nSOLR-9530.patch uploaded for a new update processor - AtomicUpdateProcessor which which will accept conventional key-value update document and convert them into atomic update document for the fields specified in the processor definition. Fields which are not specified in the processor parameters will be updated in conventional manner.\n\nFiles specified in the patch:\n1. AtomicUpdateProcessorFactory.java\n2. AtomicUpdateProcessorFactoryTest.java (test class for AtomicUpdateProcessorFactory)\n3. solrconfig-atomic-update-processor.xml (sample solrconfig for AtomicUpdateProcessorFactoryTest test cases)\n\nAs Alexandre mentioned, it will work as a standalone processor doing the conversion and updated document will passed onto next processor defined.\nNoble, this patch right now doesn't support accepting request params as it is difficult to assign atomic operation to the respective field.\n\nI will request you to review the patch and your feedback will be deeply appreciated.\n\nThanks\nAmrit Sarkar ",
            "id": "comment-15865096"
        },
        {
            "date": "2017-02-14T14:13:44+0000",
            "author": "Noble Paul",
            "content": "Don't we already support partial updates? Ishan Chattopadhyaya ? What is new in this? \n\nThe configuration is not serving any real purpose. It is better to not accept any initial configuration and just support request params.   The URP is one of the most complex configuration Solr has and most of the times they could be just avoided ",
            "id": "comment-15865822"
        },
        {
            "date": "2017-02-14T15:12:48+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "As far as I understand, this update processor is only for updates (if document pre-exists). I see this as useful in cases where we're ingesting CSV files with disjoint information about a document in different files. As an example:\n\n\n\n\nid\ncountry\n\n\n1\n Japan \n\n\n2\n Russia \n\n\n\n\n\n\n\n\nid\ncapital\n\n\n1\n Tokyo \n\n\n2\n Moscow \n\n\n\n\n\nNeeds to be both ingested, and hence if both these are ingested through this Update Processor, we would end up with 2 documents with 3 fields each (id, country, capital).\n\nDid I understand the motivation correctly? ",
            "id": "comment-15865923"
        },
        {
            "date": "2017-02-14T15:39:21+0000",
            "author": "Varun Thacker",
            "content": "Ishan - Exactly.. That was my motivation behind creating this Jira. ",
            "id": "comment-15865972"
        },
        {
            "date": "2017-02-14T15:46:26+0000",
            "author": "Noble Paul",
            "content": "IIUC , you can use this URP and keep calling ADD instead of SET and achieve the same ? ",
            "id": "comment-15865992"
        },
        {
            "date": "2017-02-14T16:27:03+0000",
            "author": "Noble Paul",
            "content": "The description is not clear. This is relevant when the user does not have the choice of using a SET command . for example /update/csv or /update/json/docs . \n\nThe patch is not thread-safe. What if multiple threads try to update the same document in parallel? ",
            "id": "comment-15866064"
        },
        {
            "date": "2017-02-15T03:22:11+0000",
            "author": "Amrit Sarkar",
            "content": "Noble Paul Ishan Chattopadhyaya Varun,\nthank you for looking into the patch.\n\nNoble Paul, the patch is not thread safe as the processor is thread-specific and is mutually independent of other threads. This processor is somehow doing in-place conversion of documents (more like a plugin) and will be passed ultimately to DistributedUpdateProcessor (which is thread-safe), where the actual \"atomic\" update to the documents in index takes place. \n\nIf multiple threads try to update the same document in parallel via AtomicUpdateProcessor, that case will be similar to multiple threads carrying \"atomic-style\" update of same document, which is already happening in our latest Solr. DistributedUpdateProcessor, being thread-safe, handles the resources well and don't let the versions conflict each other. ",
            "id": "comment-15867142"
        },
        {
            "date": "2017-02-15T03:42:44+0000",
            "author": "Amrit Sarkar",
            "content": "Meanwhile as Noble Paul mentioned, if two threads try to update the same SolrInputDocument via AtomicUpdateProcessor, it may fail or give abrupt results. Allow me some time to review this, test it out and make thread-safe if deem necessary. Thank you. ",
            "id": "comment-15867163"
        },
        {
            "date": "2017-02-15T04:48:38+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "To solve the problem of multiple clients concurrently updating the same document, I think the URP should add the current version to the updated document. If two or more such documents hit DUP with the same version on update, all except the first one will fail with a version conflict and the client could retry that document. Only doing so, i.e. leveraging the optimistic concurrency for atomic updates, would make this URP a truly \"atomic\" update processor. ",
            "id": "comment-15867251"
        },
        {
            "date": "2017-02-15T18:04:48+0000",
            "author": "Amrit Sarkar",
            "content": "Updated Patch:\n\n403 Forbidden error will be thrown if the URP receives atomic-type document with fields specified in processor definition. Test cases are added for the same. ",
            "id": "comment-15868273"
        },
        {
            "date": "2017-02-16T08:49:24+0000",
            "author": "Amrit Sarkar",
            "content": "Updated Patch: SOLR-9530.patch\n\nTo comply multiple threads executing Atomic URP don't make incoming doc inconsistent which will eventually end up in DUP, necessary changes are done as follows:\n\n1. Earlier only conventional updates are allowed through this URP, now atomic updates can be passed.\n2. If the incoming doc contains fields with atomic update and those particular fields are not part of Atomic URP definition, they will be sent as it as to next processor\n3. If the incoming doc contains fields with atomic update and those particular fields are part of Atomic URP definition:\n    a. if the atomic-op on field in incoming doc matches with atomic-op in processor definition, pass as it is to the next processor.\n    b. if the atomic-op on field in incoming doc doesn't matches with atomic-op in processor definition, throw SolrException (403 Forbidden).\n\nIn case of multiple threads try to update the incoming doc to atomic-type update doc, all the threads will end up forming same atomic-type update doc (as same set of operations will be performed by 'SET' field).\n\nNoble Paul kindly verify if the above changes satisfies the parallel execution of this URP by multiple threads.\n\nIshan Chattopadhyaya regarding including the updated current version of the doc in Atomic URP, DUP itself is performing the same on its end for every atomic update doc, including current version in the doc. If multiple threads executes the update chain (includes the Atomic URP), once it reaches the DUP, it performs exactly the same you have specified i.e all except the first one will fail with a version conflict and the client could retry that document. Kindly review and let me know if my understanding is correct and adding version info in Atomic URP will make any significant difference in this regard. ",
            "id": "comment-15869552"
        },
        {
            "date": "2017-02-23T06:51:30+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "In case of multiple threads try to update the incoming doc to atomic-type update doc, all the threads will end up forming same atomic-type update doc (as same set of operations will be performed by 'SET' field).\nThe problem is with \"inc\" operations. When two clients see the value to be, say 100, and want to increase by 50, they can supply the document version along with \"inc\":50. One of them would be executed first, and the second one would be rejected since the document version is no longer the same as what this client saw. Without optimistic concurrency, the value will end up being 200, but intended value was 150.\n\nAlso, do consider the cases when one client is indexing without this URP, but another client is using this URP, both in parallel. ",
            "id": "comment-15879998"
        },
        {
            "date": "2017-02-23T07:06:24+0000",
            "author": "Noble Paul",
            "content": "Let's get rid of any URP configuration from solrconfig.xml. Let's move everything to parameters and define what is required.  The problem is , the config API does not support URP chain and it does not plan to do so. So, let's keep it as simple parameters\n\naccept params as follows and nuke all the configuration required\n\nprocessor=Atomic&Atomic.my_newfield=add&Atomic.subject=set&Atomic.count_i=inc\n\n ",
            "id": "comment-15880016"
        },
        {
            "date": "2017-02-23T09:27:37+0000",
            "author": "Amrit Sarkar",
            "content": "Ishan and Noble, the comments are spot-on and thank you for correcting me out.\n\nI will update the description on not touching solrconfig for this URP and use in-line parameters like Noble mentioned, this makes much more sense. Also suitable examples on what we are trying to achieve here.\n\nRegarding the optimistic concurrency, I will add the _version_ field in the incoming document which will make sure the second request fails if two updates for a same doc is received via different threads. My doubt is how to deal with the failure, Noble mentioned to retry so that it gets ingested(with latest version info) and the updates get reflected. Ishan mentioned just throw 409 version conflict for the doc and let the user decide whether to ingest again or not for those particular doc-ids.\n\nAgain, I am thankful to both of you for the pointers. ",
            "id": "comment-15880169"
        },
        {
            "date": "2017-02-24T06:43:32+0000",
            "author": "Noble Paul",
            "content": "I'm not sure if the second request must fail\n\nimagine a doc already exists with \n\n{id: 1}\n\n\n\nsubsequently the user sends 2 parallel requests\n\n\n{id:1, firstName: Tom}\n{id:1, lastName: Cruise}\n\n\n\nafter these two operations are performed the final doc should be\n\n\n{id:1, firstName:Tom, lastName:Cruise}\n\n\n\nThe system should handle race conditions gracefully\n\nThe URP can fetch the _version_ before sending the appropriate atomic operation  using optimistic concurrency. if the request fails , it can reload the _version_ and retry ",
            "id": "comment-15882079"
        },
        {
            "date": "2017-02-24T07:53:44+0000",
            "author": "Hamso",
            "content": "I have a question.\nWhat is if we have:\n\ndoc1 \n\n{id: 1, Street: xyz}\n\n\n\nand doc2\n\n{id: 1, firstName: Tom, lastName: Cruise}\n{id: 1, firstName: Max, lastName: Mueller}\n\n\n\nHow will the final doc look like? ",
            "id": "comment-15882167"
        },
        {
            "date": "2017-02-24T08:15:11+0000",
            "author": "Amrit Sarkar",
            "content": "Hamso\n\nDepending on what atomic operation you are applying on doc2:\n\nif \"add\" for both fields, considering firstName and lastName are multiValued:\n\n{id: 1, Street: xyz, firstName: [Tom,Max], lastName: [Cruise,Mueller]}\n\n\nif not, it will throw error, multiple values not supported for single-valued fields\n\nif \"set\" for both fields or any one of them,\n\n{id: 1, Street: xyz, firstName: Max, lastName: Mueller}\n\n\nIt will be considered as atomic-update document at DUP. ",
            "id": "comment-15882190"
        },
        {
            "date": "2017-02-27T15:43:13+0000",
            "author": "Amrit Sarkar",
            "content": "As discussed, the system will handle race conditions gracefully. The URP will fetch the version before sending the appropriate atomic operation using optimistic concurrency. if the request fails , it with retry with updated version.\n\nWorking on the latest developments. ",
            "id": "comment-15885992"
        },
        {
            "date": "2017-03-01T02:53:14+0000",
            "author": "Amrit Sarkar",
            "content": "Considering Noble's and Ishan's suggestions, cooked up a new patch with the following:\n\n1. No solrconfig parameter(s) required for this URP now.\n\n2. The URP will take inline parameters exactly as Noble mentioned:\n\nprocessor=Atomic&Atomic.my_newfield=add&Atomic.subject=set&Atomic.count_i=inc\n\n\n3. Both atomic and conventional updates as incoming documents to the URP are allowed.\n   a. for atomic updates, the atomic operation in incoming doc should match with the parameters specified in processor call.\n   e.g. {\"id\":\"1\",\"title\":{\"set\":\"A\"}}  ||  processor=Atomic&Atomic.title=set\n\n4. After the conversion to atomic-style, latest version will be added in the updated doc. If version, not present, send as it is.\n\n5. if the update faces version conflict, retry by fetching latest version from index, updating the SolrInputDoc. Maximum retries set to 5, hardcoded.\n\n6. If the parameters are not sufficient to convert incoming document to atomic-style, abort the update.\n   e.g \n{\"id\":\"1\",\"title\":\"A\"}\n  ||  processor=Atomic&Atomic.subject=set\nthere is no point sending this document for update via URP\n\n\nnew file:   solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.java\nnew file:   solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest.java\n\n\n\nTried to write a test case for multiple threads executing URP simultaneously, but was not able to replicate the scenario exactly. The test-method is commented out in the patch. ",
            "id": "comment-15889400"
        },
        {
            "date": "2017-03-08T14:57:33+0000",
            "author": "Amrit Sarkar",
            "content": "As per discussion with Noble,\n\nRefactored the code to optimise and remove unwanted elements. ",
            "id": "comment-15901376"
        },
        {
            "date": "2017-03-13T15:16:33+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated the patch with formatting fixes:\nPlease always use braces around if/else/for blocks, even if they are one-liners.\n\nI think a test should be added to validate the retry logic. The test should use parallel threads to update different fields of the same document and assert that both updates are made to the document finally. ",
            "id": "comment-15907639"
        },
        {
            "date": "2017-03-20T13:03:26+0000",
            "author": "Amrit Sarkar",
            "content": "Considering Noble's and Ishan's feedback again, \n\nremoved all unwanted checks, reused elements and introduced multithreaded thread (I have used the most basic example for this, can be better). I have included two checks, for fieldName and atomicOperation passed in parameters, both will be verified later in DUP, but to me it made a lot of sense sending along a directed error message from this URP itself before processing any document altogether. ",
            "id": "comment-15932602"
        },
        {
            "date": "2017-03-30T12:04:20+0000",
            "author": "Amrit Sarkar",
            "content": "Updated patch as per Noble's suggestions. ",
            "id": "comment-15948934"
        },
        {
            "date": "2017-04-06T07:53:08+0000",
            "author": "Noble Paul",
            "content": "added some optimizations to the patch  ",
            "id": "comment-15958494"
        },
        {
            "date": "2017-04-25T10:54:20+0000",
            "author": "Amrit Sarkar",
            "content": "Been a while posted a patch with the updates.\n\nFollowing up with Noble's patch, corrected test methodsl\n\nSmall concern:\nI have a \"nocommit\" in one of the test methods where we need to issue explicit commit. I don't know how to do that via SolrTestCaseJ4. the \"commit()\" method doesn't work. ",
            "id": "comment-15982704"
        },
        {
            "date": "2017-04-25T16:09:20+0000",
            "author": "Erick Erickson",
            "content": "Amrit:\n\nPossibly SOLR-10562? The commit should work, but apparently there's a weird interaction with reload. Why does the test use reload() rather than just a commit()? I didn't really look the patch over, but that shouldn't be necessary when just updating documents.\n\n1> Simplest (and not what I recommend) is just to put a sleep in FOR TESTING ONLY to see if this the same or similar problem.\n\n2> Put in a retry loop something like this until we get to the bottom of 10562:\n\ncommit()\nfor (int idx = 0; idx < 100; idx++) {\n   if (test succeeds ) { // do not assert\n      break; \n   }\n   sleep(100);\n}\n// This assert will fail the test if we make it through 10 seconds of sleep/test cycles above.\nassertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n ",
            "id": "comment-15983125"
        },
        {
            "date": "2017-04-26T10:26:26+0000",
            "author": "Amrit Sarkar",
            "content": "Thank you Erick for the above suggestions,\n\nI digged more and used commitWithin set it to 1 ms and put a sleep of 500 ms and I am passing through the tests without reload. This is obviously not a good manner to write a test as it will be machine subjective. Seeking suggestions if there is a better way or should I replace with above suggestion.\n\nNew patch uploaded. ",
            "id": "comment-15984543"
        },
        {
            "date": "2017-04-26T15:20:42+0000",
            "author": "Erick Erickson",
            "content": "1 ms is much too short. I'd just issue the commit() when done sending docs then the wait.\n\nThe question is did your change work? As in prevent errors? If so let's try the loop above as a stop-gap. ",
            "id": "comment-15984985"
        },
        {
            "date": "2017-04-26T15:52:57+0000",
            "author": "Amrit Sarkar",
            "content": "Yeah it worked. If I put commitwithin anything > 0 say X, and put sleep for Y >> X, I don't need to reload or issue commit() and it is working as expected.\n\nWell I also put ModifiableSolrParam, \"commit\", \"true\" like we do in a curl update. That too is not getting picked for explicit commit by the test.\n\n\n AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n        new ModifiableSolrParams()\n            .add(\"processor\", \"Atomic\")\n            .add(\"Atomic.cat\", \"delete\")\n            .add(\"commit\",\"true\")\n    ));\n\n\n\nfactory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n\n\n\nI like the stop-gap loop, retries are better, will incorporate this. Thank you. ",
            "id": "comment-15985035"
        },
        {
            "date": "2017-04-26T16:22:09+0000",
            "author": "Amrit Sarkar",
            "content": "Figured out. commit() itself doesn't work but assertU(commit()).\n\nI have attached screenshots for the same, looked into assertU(..) implementation, don't know what special is there. Thank you Erick for looking into it.\n\nUpdated patch, Noble I think we got everything correct this time. Kindly review whenever you get time. ",
            "id": "comment-15985084"
        },
        {
            "date": "2017-05-04T22:11:02+0000",
            "author": "Noble Paul",
            "content": "Amrit Sarkar going through the patch. I like the clever multithreaded test ",
            "id": "comment-15997517"
        },
        {
            "date": "2017-05-05T01:18:08+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dfe41f1e1e838d974ddb64297ca3d65d6c097ead in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dfe41f1 ]\n\nSOLR-9530: An Update Processor to convert normal update operation to an atomic operations such as add, set,inc, remove ,set, removeregex ",
            "id": "comment-15997689"
        },
        {
            "date": "2017-05-05T01:19:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit faa74ec7dcddb9fccf240e81a36b21f90336726c in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=faa74ec ]\n\nSOLR-9530: An Update Processor to convert normal update operation to an atomic operations such as add, set,inc, remove ,set, removeregex ",
            "id": "comment-15997691"
        },
        {
            "date": "2017-05-05T14:37:20+0000",
            "author": "Steve Rowe",
            "content": "UpdateRequestProcessorFactoryTest.testRequestTimeUrp() is failing regularly in Jenkins after this commit, e.g. from https://jenkins.thetaphi.de/job/Lucene-Solr-6.x-MacOSX/850/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=UpdateRequestProcessorFactoryTest -Dtests.method=testRequestTimeUrp -Dtests.seed=34D1B16033B852CD -Dtests.slow=true -Dtests.locale=ga -Dtests.timezone=PRT -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J0 | UpdateRequestProcessorFactoryTest.testRequestTimeUrp <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: No such processor Template\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([34D1B16033B852CD:9163F1A895F69B39]:0)\n   [junit4]    > \tat org.apache.solr.update.processor.UpdateRequestProcessorChain.getReqProcessors(UpdateRequestProcessorChain.java:286)\n   [junit4]    > \tat org.apache.solr.update.processor.UpdateRequestProcessorChain.constructChain(UpdateRequestProcessorChain.java:235)\n   [junit4]    > \tat org.apache.solr.core.SolrCore.getUpdateProcessorChain(SolrCore.java:1413)\n   [junit4]    > \tat org.apache.solr.update.processor.UpdateRequestProcessorFactoryTest.testRequestTimeUrp(UpdateRequestProcessorFactoryTest.java:53)\n\n\n\nThis test fails for me without a seed. ",
            "id": "comment-15998413"
        },
        {
            "date": "2017-05-05T15:00:02+0000",
            "author": "Amrit Sarkar",
            "content": "Ah! That's fault at my part. We made some changes in URPFactory to make all URPs SolrCoreAware which essentially needs Solr to start with system property \"enable.runtime.lib=true\".\n\nI have set it explicitly in beforeClass in URPFactoryTest and all the test cases are passing successfully now. Sorry for the hiccup. ",
            "id": "comment-15998441"
        },
        {
            "date": "2017-05-05T20:29:06+0000",
            "author": "Steve Rowe",
            "content": "My Jenkins found a reproducing seed for several AtomicUpdateProcessorFactoryTest failures:\n\n\nChecking out Revision 52b252cc6eddd7bcb71bdf2f9c533332fe228b0e (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testBasics -Dtests.seed=9F9128B8E3E8FAA7 -Dtests.slow=true -Dtests.locale=th-TH -Dtests.timezone=US/Samoa -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.01s J11 | AtomicUpdateProcessorFactoryTest.testBasics <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Atomic document updates are not supported unless <updateLog/> is configured\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9F9128B8E3E8FAA7:A2498694DB06A4D7]:0)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactory.getInstance(AtomicUpdateProcessorFactory.java:88)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testBasics(AtomicUpdateProcessorFactoryTest.java:106)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testWrongAtomicOpPassed -Dtests.seed=9F9128B8E3E8FAA7 -Dtests.slow=true -Dtests.locale=th-TH -Dtests.timezone=US/Samoa -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.00s J11 | AtomicUpdateProcessorFactoryTest.testWrongAtomicOpPassed <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: expected:<[Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: 'delete']> but was:<[Atomic document updates are not supported unless <updateLog/> is configured]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9F9128B8E3E8FAA7:4E887D44E42A13F4]:0)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testWrongAtomicOpPassed(AtomicUpdateProcessorFactoryTest.java:57)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testMultipleThreads -Dtests.seed=9F9128B8E3E8FAA7 -Dtests.slow=true -Dtests.locale=th-TH -Dtests.timezone=US/Samoa -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.01s J11 | AtomicUpdateProcessorFactoryTest.testMultipleThreads <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Atomic document updates are not supported unless <updateLog/> is configured\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9F9128B8E3E8FAA7:B3A35F356F2C8C23]:0)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactory.getInstance(AtomicUpdateProcessorFactory.java:88)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest$1.run(AtomicUpdateProcessorFactoryTest.java:233)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testMultipleThreads(AtomicUpdateProcessorFactoryTest.java:240)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testNoUniqueIdPassed -Dtests.seed=9F9128B8E3E8FAA7 -Dtests.slow=true -Dtests.locale=th-TH -Dtests.timezone=US/Samoa -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.00s J11 | AtomicUpdateProcessorFactoryTest.testNoUniqueIdPassed <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: expected:<[Document passed with no unique field: 'id']> but was:<[Atomic document updates are not supported unless <updateLog/> is configured]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9F9128B8E3E8FAA7:62C4243917AB64F1]:0)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testNoUniqueIdPassed(AtomicUpdateProcessorFactoryTest.java:79)\n[...]\n   [junit4]   2> NOTE: test params are: codec=FastDecompressionCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=FAST_DECOMPRESSION, chunkSize=10, maxDocsPerChunk=8, blockSize=5), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=FAST_DECOMPRESSION, chunkSize=10, blockSize=5)), sim=RandomSimilarity(queryNorm=true): {}, locale=th-TH, timezone=US/Samoa\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_77 (64-bit)/cpus=16,threads=1,free=238618688,total=523239424\n\n ",
            "id": "comment-15998909"
        },
        {
            "date": "2017-05-05T20:31:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 468d479b5f90d6bf3d1ae5f62019956b76fa2a25 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=468d479 ]\n\nSOLR-9530: fixing test error ",
            "id": "comment-15998914"
        },
        {
            "date": "2017-05-05T21:01:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1f39b5175122735e3012f6400244e8b3a9481a3f in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1f39b51 ]\n\nSOLR-9530: fixing test error ",
            "id": "comment-15998948"
        },
        {
            "date": "2017-05-05T21:26:32+0000",
            "author": "Amrit Sarkar",
            "content": "The solrconfig used in the test has updateLog setting as:\n\n\n    <updateLog enable=\"${enable.update.log:true}\">\n      <str name=\"dir\">${solr.ulog.dir:}</str>\n    </updateLog> \n\n\n\nSo the seed 9F9128B8E3E8FAA7 setting the \"enable.update.log=false\" making all the test methods break. Rightfully!\n\nAgain explicitly set \"enable.update.log=true\" in beforeClass of AUPTest in current patch, as it is must. ",
            "id": "comment-15998978"
        },
        {
            "date": "2017-05-05T22:24:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 58837104abf9efda84a2969557046dc02e7fffb1 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5883710 ]\n\nSOLR-9530: addressing test failures with seed 9F9128B8E3E8FAA7 ",
            "id": "comment-15999054"
        },
        {
            "date": "2017-05-05T22:27:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f4d204650b467aabe37f49b94813dc1576747fc1 in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f4d2046 ]\n\nSOLR-9530: addressing test failures with seed 9F9128B8E3E8FAA7 ",
            "id": "comment-15999060"
        },
        {
            "date": "2017-05-19T18:24:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fa76171a63cca0b42f81213f4cf1284bdaab6b63 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fa76171 ]\n\nRef Guide: add AtomicUpdateRequestProcessorFactory from SOLR-9530 ",
            "id": "comment-16017796"
        },
        {
            "date": "2017-05-23T16:06:11+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 31e02e93a5712d8fa2cafff3b13ce329563c6579 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=31e02e9 ]\n\nRef Guide: fix note for atomic updates after SOLR-9530 ",
            "id": "comment-16021392"
        },
        {
            "date": "2017-06-08T06:29:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ce5b184b17fb000f9d3469807872df30e1550397 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ce5b184 ]\n\nSOLR-9530: documentation added ",
            "id": "comment-16042276"
        }
    ]
}