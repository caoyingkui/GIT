{
    "id": "LUCENE-7924",
    "title": "dynamic infobox on javadocs/tutorials/ref-guide html pages when URL doesn't match \"latest\" version",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Wish",
        "components": [
            "general/website"
        ],
        "fix_versions": []
    },
    "description": "Spinning this idea out of some comments/concerns in SOLR-10595...\n\nIt would be nice if all the various \"version specific\" pages we have (ie: javadocs, tutorials, solr ref-guide) could include some standard snippet of text drawing users attention to the fact that they are looking at docs for an \"older\" version of lucene/solr \u2013 ideally with a link to the current version. ala...\n\n\nThis page is part of the documentation refers to Lucene 5.4.0. The current version of Lucene is 6.6.0.\n\n\nThe details of how this could work aren't clear cut \u2013 particularly since for any arbitrary URL the \"latest\" version of those docs may not contain the exact same path/file (ie: deprecated/moved classes in future releases, etc...) but ideally it would be some very generic mod_include / javascript directive that could be included in all generated HTML, that would only \"activate\" when the page was loaded from lucene.apache.org and would only inject the \"warning\" into the page based on the version number in the URL compared to some server side configured version number (ex: the way we already have the \"latest\" version# hardcoded in our .htaccess file for redirects)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16120323",
            "date": "2017-08-09T17:35:02+0000",
            "content": "Rough (untested) sketch of how this might work...\n\n\n\tGenerated HTML documents can be tweaked to start including something like <!--#include virtual=\"../../../latest-warning.html\" --> in all pages \u2013 where the relative path ../../../ is based on how deep the generated HTML doc is in it's \"set\" of docs (ie: relative to the 'root' of the javadocs for this version, or the 'root' of this version of the ref-guide)\n\t\n\t\tthe generated docs can/should include an empty latest-warning.html file at that path, so external users who host their own copy don't get mod_include errors for a missing file\n\t\n\t\n\tthe .htaccess file(s) used on lucene.apache.org can use mod_rewrite rules to route any request for latest-warning.html to a new CGI, preserving the (resolved) path from the mod_include request as a \"request param\" for the CGI to use\n\tthe CGI can look at the version# in the path and compare it to the \"latest\" version (which we can start setting in an .htaccess SetEnv variable), outputing HTML as needed if they don't match\n\t\n\t\tthe generate HTML can use the original (resolved) path from the request for latest-warning.html to know where to link people to.\n\t\n\t\n\tonce this is setup and working, it could be backported as far back as we want to go, and the hosted javadocs/ref-guides could be regenerated & re-published.\n\n\n\n\n\nSo for example: \n\n\n\thttps://lucene.apache.org/core/5_2_0/queries/org/apache/lucene/queries/TermsQuery.html\n\t\n\t\t<!--#include virtual=\"../../../../../latest-warning.html\" -->\n\t\n\t\n\t.htaccess rewrites https://lucene.apache.org/core/5_2_0/latest-warning.html to something like https://lucene.apache.org/latest-warning.cgi?path=core/5_2_0/\n\tlatest-warning.cgi extracts \"5_2_0\" from $path and compares it to some env variable (currently) set to \"6_6_0\" and decides to output a warning\n\t\n\t\tin that generated warning HTML, the URL to link to is built by replacing \"5_2_0\" with \"6_6_0\" \u2013 ie: https://lucene.apache.org/core/6_6_0/\n\t\n\t\n\tif the $path already matches the latest version, then the CGI generates blank output\n\n\n ",
            "author": "Hoss Man"
        }
    ]
}