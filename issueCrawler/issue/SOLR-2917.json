{
    "id": "SOLR-2917",
    "title": "Support for field-specific tokenizers, token- and character filters in search results clustering",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "contrib - Clustering"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Currently, Carrot2 search results clustering component creates clusters based on the raw text of a field. The reason for this is that Carrot2 aims to create meaningful cluster labels by using sequences of words taken directly from the documents' text (including stop words: Development of Lucene and Solr is more readable than Development Lucene Solr). The easiest way of providing input for such a process was feeding Carrot2 with raw (stored) document content.\n\nIt is, however, possible to take into account some of the field's filters during clustering. Because Carrot2 does not currently expose an API for feeding pre-tokenized input, the clustering component would need to: \n\n1. get raw text of the field, \n2. run it through the field's char filters, tokenizers and selected token filters (omitting e.g. stop words filter and stemmers, Carrot2 needs the original words to produce readable cluster labels), \n3. glue the output back into a string and feed to Carrot2 for clustering. \n\nIn the future, to eliminate step 3, we could modify Carrot2 to accept pre-tokenized content.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13157040",
            "date": "2011-11-25T09:11:22+0000",
            "content": "By eliminating step 3, carrot could also be fed by term vectors with crazy Highlighter's TVTokenStream? "
        },
        {
            "author": "Stanislaw Osinski",
            "id": "comment-13157045",
            "date": "2011-11-25T09:23:17+0000",
            "content": "Would a typical TVTokenStream contain stop words, original (unstemmed) forms and sentence separators? If not, the human-readability of cluster labels would suffer quite a bit. On the other hand, the schema could define a parallel field with certain filters disabled, clustering should work nicely with such a stream. Is there any other solution to this? "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13157046",
            "date": "2011-11-25T09:23:50+0000",
            "content": "Step 3 is necessary because we have a different tokenization pipeline in C2... but it would be a step forward to more compact integration for sure. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157047",
            "date": "2011-11-25T09:28:45+0000",
            "content": "On the other hand, the schema could define a parallel field with certain filters disabled, clustering should work nicely with such a stream.\n\nThat was the idea behind the suggestion. Highlighter works a litle bit different so it does not need this: it uses the TermVectors only for finding the highlighting offsets but marks the highligts in the original text (from a stored field). It just spares to reanalyze again, which can be expensive if you e.g. use BASIS or whatever heavy analysis. "
        },
        {
            "author": "Stanislaw Osinski",
            "id": "comment-13157054",
            "date": "2011-11-25T09:38:58+0000",
            "content": "That was the idea behind the suggestion. Highlighter works a litle bit different so it does not need this: it uses the TermVectors only for finding the highlighting offsets but marks the highligts in the original text (from a stored field). It just spares to reanalyze again, which can be expensive if you e.g. use BASIS or whatever heavy analysis.\n\nYeah, it's a bit different indeed because clustering would need the original text of the tokens instead of just the start offset and length. Ultimately, the choice between storing two different token streams and doing the analysis at runtime is a trade-off between storage size (doubled?) and slower runtime performance. Once we get Carrot2 to support pre-tokenized input (not hard conceptually, but tricky in terms of the API), both solutions would be possible. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412113",
            "date": "2012-07-11T22:26:03+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429780",
            "date": "2012-08-07T03:42:57+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13445487",
            "date": "2012-08-31T00:13:33+0000",
            "content": "There is no indication that anyone is actively working on this issue, and it has no current patch, so removing 4.0 from the fixVersion. "
        }
    ]
}