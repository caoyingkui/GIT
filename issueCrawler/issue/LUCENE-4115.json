{
    "id": "LUCENE-4115",
    "title": "JAR resolution/ cleanup should be done automatically for ant clean/ eclipse/ resolve.",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I think we should add the following target deps:\n\nant clean [depends on] clean-jars\nant resolve [depends on] clean-jars\nant eclipse [depends on] resolve, clean-jars\nant idea [depends on] resolve, clean-jars\n\nThis eliminates the need to remember about cleaning up stale jars which users complain about (and I think they're right about it). The overhead will be minimal since resolve is only going to copy jars from cache. Eclipse won't have a problem with updated JARs if they end up at the same location.\n\nIf there are no objections I will fix this in a few hours.",
    "attachments": {
        "LUCENE-4115.patch": "https://issues.apache.org/jira/secure/attachment/12533458/LUCENE-4115.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-05T20:08:52+0000",
            "content": "+1\n\n(possibly ant idea too?)\n\nI think ant idea too should depend on clean-jars resolve, if for no other reason than to immediately fail on attempting to link to stale jars when the idea config is out of sync. ",
            "author": "Steve Rowe",
            "id": "comment-13289677"
        },
        {
            "date": "2012-06-05T20:20:08+0000",
            "content": "\nant eclipse [depends on] resolve, clean-jars\nant idea [depends on] resolve, clean-jars\n\nShouldn't the order be clean-jars,resolve ? (Maybe I'm missing something...) ",
            "author": "Steve Rowe",
            "id": "comment-13289685"
        },
        {
            "date": "2012-06-05T20:26:47+0000",
            "content": "This doesn't matter, it'll sort topologically anyway (if resolve depends on clean-jars).  But you're right \u2013 I was just being intentionally sloppy  ",
            "author": "Dawid Weiss",
            "id": "comment-13289692"
        },
        {
            "date": "2012-06-05T20:28:45+0000",
            "content": "The other case I was interested in is if I do \"ant clean test\", it is smart enough to go and fetch the new jars, but I have to manually do the resolve. And it would be nice if ant eclipse was triggered in that case as well. In other words, anything that caused jars to be updated should do resolve and eclipse.\n ",
            "author": "Jack Krupansky",
            "id": "comment-13289697"
        },
        {
            "date": "2012-06-05T20:34:09+0000",
            "content": "In other words, anything that caused jars to be updated should do resolve and eclipse.\n\n-1\n\nant eclipse, ant idea, etc. should never be called by the standard build.\n\nWhy?  I don't use eclipse.  I don't want it cluttering my build dir/slowing down my build.\n(Your version: \"I don't use IntelliJ.  I don't want it cluttering my build dir/slowing down my build.\") ",
            "author": "Steve Rowe",
            "id": "comment-13289700"
        },
        {
            "date": "2012-06-05T20:38:51+0000",
            "content": "If you invoke 'ant clean test' this will fetch new jars after this patch. It will not prepare any IDE settings (because of what Steve mentioned). ",
            "author": "Dawid Weiss",
            "id": "comment-13289702"
        },
        {
            "date": "2012-06-05T21:00:50+0000",
            "content": "Sounds good. Just to be sure I followed it all, if I do \"ant clean eclipse test\" after \"svn co\", all of the jar processing should happen as desired. ",
            "author": "Jack Krupansky",
            "id": "comment-13289715"
        },
        {
            "date": "2012-06-05T21:29:54+0000",
            "content": "Yep (and you only need to call ant eclipse if the JARs change; you'll see when they change because Eclipse won't be able to find the required library JARs and will show a configuration/ build error). ",
            "author": "Dawid Weiss",
            "id": "comment-13289744"
        },
        {
            "date": "2012-06-05T21:40:57+0000",
            "content": "Suggested patch. Note jar resync in 'ant resolve' for any submodule. This is intentional and will prevent stale jars even if somebody works on a submodule only. ",
            "author": "Dawid Weiss",
            "id": "comment-13289752"
        },
        {
            "date": "2012-06-07T13:38:15+0000",
            "content": "Looks like Windows does not like this one.\n\nBUILD FAILED\nC:\\Jenkins\\workspace\\Lucene-Solr-4.x-Windows-Java7-64\\build.xml:29: The following error occurred while executing this line:\nC:\\Jenkins\\workspace\\Lucene-Solr-4.x-Windows-Java7-64\\lucene\\build.xml:448: The following error occurred while executing this line:\nC:\\Jenkins\\workspace\\Lucene-Solr-4.x-Windows-Java7-64\\lucene\\common-build.xml:618: The following error occurred while executing this line:\nC:\\Jenkins\\workspace\\Lucene-Solr-4.x-Windows-Java7-64\\lucene\\common-build.xml:286: Unable to delete file C:\\Jenkins\\workspace\\Lucene-Solr-4.x-Windows-Java7-64\\lucene\\test-framework\\lib\\junit4-ant-1.5.0.jar ",
            "author": "Mark Miller",
            "id": "comment-13290997"
        },
        {
            "date": "2012-06-07T19:53:19+0000",
            "content": "Can you check what's causing the JAR file to be locked?\n\n\n\twhat target did you issue (it can be that ant's own url class loader holds a lock)?\n\twas Eclipse/IntelliJ running in the background?\n\twas there any executing test/ other class in the background (these would all hold a lock)?\n\n\n\nWe can always add failonerror=false to delete but not able to delete that jar signals a problem and it'd be nice to know where it comes from. ",
            "author": "Dawid Weiss",
            "id": "comment-13291258"
        },
        {
            "date": "2012-06-07T19:58:51+0000",
            "content": "This is creating a lot of noise. Can we back it out until there is a solution that works on windows? ",
            "author": "Robert Muir",
            "id": "comment-13291262"
        },
        {
            "date": "2012-06-07T20:02:28+0000",
            "content": "Sorry \u2013 I'm on mobile and couldn't check properly (didn't know it fails on jenkins). Robert will revert this commit and I'll see what the problem is tomorrow. Quite likely a class loader holds a lock on a jar file. I don't know why yet. ",
            "author": "Dawid Weiss",
            "id": "comment-13291268"
        },
        {
            "date": "2012-06-07T20:03:06+0000",
            "content": "what target did you issue \n\nI'm getting this from Uwe's jenkins emails to the devs list rather than my own machine. I don't think there is any IDE involved there.\n\nA quick test in my vm shows it happening at the end of running ant test though. ",
            "author": "Mark Miller",
            "id": "comment-13291269"
        },
        {
            "date": "2012-06-07T20:08:47+0000",
            "content": "Yeah, sorry Mark \u2013 didn't check it thoroughly, I'm on mobile. ",
            "author": "Dawid Weiss",
            "id": "comment-13291272"
        },
        {
            "date": "2012-06-08T10:28:37+0000",
            "content": "Another possibility (didnt investigate if it has options that would work for us) is the sync=true option for retrieve:\n\nhttp://ant.apache.org/ivy/history/trunk/use/retrieve.html\n\nJust at a glance there could be some problems: sha1/license/notice files, and solr/lib which is 'shared' across solrj and core dependencies. \n\nBut maybe we could still utilize this... ",
            "author": "Robert Muir",
            "id": "comment-13291670"
        },
        {
            "date": "2012-06-08T10:53:14+0000",
            "content": "I've checked that \u2013 sync on retrieve deletes everything from a folder (there is no exclusion pattern to be applied). Besides it won't solve the locking problem on windows (assuming something keeps a lock on a jar to be deleted it'd fail anyway).\n\nA true nice solution would be to revisit the issue where classpaths are constructed to ivy cache directly (they're always correct then) and just use copying for packaging. ",
            "author": "Dawid Weiss",
            "id": "comment-13291681"
        },
        {
            "date": "2012-06-08T20:44:46+0000",
            "content": "A true nice solution would be to revisit the issue where classpaths are constructed to ivy cache directly (they're always correct then) and just use copying for packaging.\n\nseems like that might introduce some risk of the classpath(s) used by developers/jenkins for running tests deviating from the ones people would get if they use the binary distributions (particularly solr users who don't know/understand java classpaths and just copy the example & lib dirs as a starting point). ",
            "author": "Hoss Man",
            "id": "comment-13291980"
        },
        {
            "date": "2012-06-08T21:04:03+0000",
            "content": "Why would this be so? I mean \u2013 the risk of users messing up their classpath with lib/*.jar is pretty much the same compared to an ivy classpath from cache + ivy classpath from cache copied to lib/ at distribution time? ",
            "author": "Dawid Weiss",
            "id": "comment-13291989"
        },
        {
            "date": "2012-06-08T21:33:25+0000",
            "content": "I'm not sure i'm following you.\n\nright now, we know that when you run \"ant test\" (or \"java -jar start.jar\" in solr) you getting the exact same classpath and set of jars as someone who downloads a binary dist you might build from your checkout \u2013 because the classpath you are using comes from the lib dirs, built by ivy.  there is only one places jars are \"copied\" from the ivy cache to the lib dir(s).\n\nif instead we have ant <classpath/> declarations that use ivy features to build up classpaths pointed directly at jars in the ivy cache, and independently we have <copy> directives building up the lib/ dirs that make it into the binary dists, then isn't there a risk that (overtime) those will diverge in a way we might not notice because all the testing will only be done with the ivy generated classpaths?\n\n(maybe i'm wrong ... maybe the ivy classpath stuff works diff then i understand ... i'm just raising it as a potential concern) ",
            "author": "Hoss Man",
            "id": "comment-13292004"
        },
        {
            "date": "2012-06-08T21:40:14+0000",
            "content": "I know why the jars are locked - it's because junit4-ant* is taskdef'ed from ant and url jar loader will keep it open. Makes sense. A workaround is to ignore failed deletes (I don't see a cleaner solution other than the one mentioned above \u2013 construct the classpath from ivy cache directly).\n\nI'll post a patch but I'm away most of the time until Sunday so if somebody is willing to commit and monitor jenkins for sanity \u2013 feel free to do so. ",
            "author": "Dawid Weiss",
            "id": "comment-13292006"
        },
        {
            "date": "2012-06-08T21:41:41+0000",
            "content": "Corrected patch, checked the build on windows, didn't fail for me.  ",
            "author": "Dawid Weiss",
            "id": "comment-13292010"
        },
        {
            "date": "2012-06-08T21:46:56+0000",
            "content": "Hoss \u2013 I've been doing some experiments with ivy (and I know very little about it) but it seems that you can use ivy to build both <path> elements and <fileset> elements from the same configuration. This means you would construct an identical path for any java invocation/ taskdef, etc. and a fileset for <copy> to lib/.\n\nI agree with you 100% that we shouldn't be doing any copying or filtering manually \u2013 it has to be the same fileset.\n\nhttp://ant.apache.org/ivy/history/trunk/use/cachepath.html\nhttp://ant.apache.org/ivy/history/trunk/use/cachefileset.html\n\nWe could even use the fileset only and just put it under a custom <path id=\"...\"> element. \n\nNote that at the moment this isn't consistent either \u2013 if there is a jar dependency upgrade people are left with unused jars under lib/* and this can (and does) cause headaches until you realize you need to clean up that folder (which is a reason for this issue, actually). ",
            "author": "Dawid Weiss",
            "id": "comment-13292016"
        },
        {
            "date": "2012-06-08T21:48:37+0000",
            "content": "One thing I didn't know how to work around with direct ivy caches was jar checksums \u2013 I think it is a good idea to keep these but then I don't know how they could be verified if we use ivy caches directly. ",
            "author": "Dawid Weiss",
            "id": "comment-13292020"
        },
        {
            "date": "2012-06-08T23:09:44+0000",
            "content": "I agree with you 100% that we shouldn't be doing any copying or filtering manually \u2013 it has to be the same fileset. \n\nRight ... that's the crux of my concern.\n\nNote that at the moment this isn't consistent either \u2013 if there is a jar dependency upgrade people are left with unused jars under lib/* and this can (and does) cause headaches until you realize you need to clean up that folder (which is a reason for this issue, actually).\n\nbut our checksum validation warns you of that .. the reason for this issue was not that people didn't know they had bad jars (the build already told them that) the point was to try and make dealing with it automatic. \n\nOne thing I didn't know how to work around with direct ivy caches was jar checksums \u2013 I think it is a good idea to keep these but then I don't know how they could be verified if we use ivy caches directly.\n\nyeah ... the checksum validation is really huge ... we definitely should sacrifice that.\n\n\n\nWhich leads me to a strawman suggestion: what if instead of making all these ant targets depend on \"ant clean-jars\" we add an optional build property that tells the checksum validation code to try to remove any jar that doesn't have a checksum file?  values for the property could indicate:\n\n\tdon't try to delete but warn of existence\n\tdon't try to delete and fail because of existence (current behavior)\n\ttry to delete, fail if delete fails (new default)\n\ttry to delete, warn & don't fail if delete fails (new default if windows)\n...in the cases where deletion failure is non-fatal, the code could still register a deleteOnExit() for the files as a fallback (which should work on windows right? by that point windows will have closed the file handle for the jar?)\n\n\n\nif we did that, then (i think) the worst case scenario for windows dev/jenkins users after ivy config changes would be that the first build attempt might fail because of a jar that couldn't be deleted (because it was in use), but that file should be deleted when the JVM exists, and after that the build should start working.\n\nright?\n ",
            "author": "Hoss Man",
            "id": "comment-13292079"
        },
        {
            "date": "2012-06-09T12:42:38+0000",
            "content": "One thing I didn't know how to work around with direct ivy caches was jar checksums \u2013 I think it is a good idea to keep these but then I don't know how they could be verified if we use ivy caches directly.\n\nYou can get the ivy:cachefileset and iterate it using a hand-written <script> task or similar? ",
            "author": "Uwe Schindler",
            "id": "comment-13292325"
        },
        {
            "date": "2012-06-09T12:47:38+0000",
            "content": "I know why the jars are locked - it's because junit4-ant* is taskdef'ed from ant and url jar loader will keep it open. Makes sense. A workaround is to ignore failed deletes (I don't see a cleaner solution other than the one mentioned above \u2013 construct the classpath from ivy cache directly).\n\nI thought all taskdefs are using ivy:cachepath? I changed (or I hope to have changed) at least all those everywhere. Everything ANT needs to build with custom tasks should come from ivy directly. Those JARs never need to be in any binary distribution. ",
            "author": "Uwe Schindler",
            "id": "comment-13292327"
        },
        {
            "date": "2012-06-09T12:49:47+0000",
            "content": "For examples see classpath of generate-webpage, cpp-tasks,... Those are all tasks I created during the migration. ",
            "author": "Uwe Schindler",
            "id": "comment-13292328"
        },
        {
            "date": "2012-06-09T17:55:21+0000",
            "content": "Good point, Uwe \u2013 the problematic jars are junit4 and randomized runner \u2013 these are required for tests though... so I think it's in the gray area somewhere because they will need to be distributed (if tests are distributed) and at the same time they could be loaded from ivy cache? \n\nWhat's your opinion on this? ",
            "author": "Dawid Weiss",
            "id": "comment-13292393"
        },
        {
            "date": "2012-06-09T18:12:52+0000",
            "content": "I'm not sure we should really go to the trouble for this issue.\n\nwhy can't developers just 'ant clean-jars' after they svn update? Really we are just talking about committers etc tracking development branches here: they should be subscribed to the commits@ list and watching what is happening. Jar upgrades should be no surprise.\n\nThe problem with doing all this automagic stuff is it makes things too automagic: what if i just want to plop in a jar today to test it before dealing with maven etc? This works completely fine today: but if we start rm'ing jars in 'resolve' then this becomes impossible.\n\nif anything gets done on this issue, then personally i want it triggered by a property that is completely defaulted to 'off'. If you want it on, put it in your ~/build.properties etc. ",
            "author": "Robert Muir",
            "id": "comment-13292397"
        },
        {
            "date": "2012-06-09T18:26:29+0000",
            "content": "I don't agree \u2013 the current situation in which you need to remember about cleaning up jars and resolving again is confusing. It should be syncing automatically with respect to the contents of ivy files. If you need a temporary jar, oh well, modify the ivy file. Given the tradeoff between the two situations I'm opting for having an automagic sync that the need to remember to do cleanups manually every time.\n\nCurrently we 'ant resolve' on ant test anyway so it's half-way to full syncing to me.\n\nA middle ground would be to have ant clean/eclipse/idea resync everything and 'ant test' and 'ant resolve' not do anything special, but like I said \u2013 I think it should be consistent with ivy files. For better or worse, that's the reason we have them \u2013 to specify dependencies.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13292402"
        },
        {
            "date": "2012-06-09T19:33:12+0000",
            "content": "\nFor better or worse, that's the reason we have them \u2013 to specify dependencies.\n\nNot exactly true. in the current build, what is in lib/ specifies the dependencies.\n\nivy files are just being used as jar-downloaders. ",
            "author": "Robert Muir",
            "id": "comment-13292419"
        },
        {
            "date": "2012-06-10T17:20:13+0000",
            "content": "Hmm... I don't think the use of ivy should stop at being just a jar-downloader. I have mixed feelings about transitive dependency management (this applies to both ivy and maven) so I'm not suggesting we jump into it full time, but the current build system would really benefit (time and I/O wise) if we used direct ivy cache references instead of copying jars to lib/ folders. And I don't share your concerns about it \u2013 I don't think it makes things more complicated or more magical. ",
            "author": "Dawid Weiss",
            "id": "comment-13292545"
        },
        {
            "date": "2012-06-26T10:15:50+0000",
            "content": "A new version of this patch that doesn't attempt to delete *.jar files on per-module resolve (does it from the top-level resolve once). \n\nJUnit4 dependency is picked from ivy cache now. There is no redundancy as the same ivy module config is used and this will prevent jar locking. ",
            "author": "Dawid Weiss",
            "id": "comment-13401281"
        },
        {
            "date": "2012-06-26T11:48:07+0000",
            "content": "I've committed this one in (checked on Windows and Linux, doesn't seem to be causing any problems anymore).\n\nIt isn't ideal but better than what's currently in. ",
            "author": "Dawid Weiss",
            "id": "comment-13401321"
        },
        {
            "date": "2012-07-11T23:15:33+0000",
            "content": "hoss20120711-manual-post-40alpha-change ",
            "author": "Hoss Man",
            "id": "comment-13412341"
        }
    ]
}