{
    "id": "SOLR-1711",
    "title": "Race condition in org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java",
    "details": {
        "affect_versions": "1.4,                                            1.5",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "While inserting a large pile of documents using StreamingUpdateSolrServer there is a race condition as all Runner instances stop processing while the blocking queue is full. With a high performance client this could happen quite often, there is no way to recover from it at the client side.\n\nIn StreamingUpdateSolrServer there is a BlockingQueue called queue to store UpdateRequests, there are up to threadCount number of workers threads from StreamingUpdateSolrServer.Runner to read that queue and push requests to a Solr instance. If at one point the BlockingQueue is empty all workers stop processing it and pushing the collected content to Solr which could be a time consuming process, sometimes all worker threads are waiting for Solr. If at this time the client fills the BlockingQueue to full all worker threads will quit without processing any further and the main thread will block forever.\n\nThere is a simple, well tested patch attached to handle this situation.",
    "attachments": {
        "SOLR-1711.patch": "https://issues.apache.org/jira/secure/attachment/12471097/SOLR-1711.patch",
        "StreamingUpdateSolrServer.patch": "https://issues.apache.org/jira/secure/attachment/12429747/StreamingUpdateSolrServer.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Attila Babo",
            "id": "comment-12798007",
            "date": "2010-01-08T13:21:24+0000",
            "content": "Patch 1, 2:\nInside the Runner.run method I've added a do while loop to prevent the Runner to quit while there are new requests, this handles the problem of new requests added while Runner is sending the previous batch.\n\nPatch 3\nValidity check of method variable is not strictly necessary, just a code clean up.\n\nPatch 4\nThe last part of the patch is to move synchronized outside of conditional to avoid a situation where runners change while evaluating it.\n\nTo minify the patch all indentation has been removed. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12805109",
            "date": "2010-01-26T17:34:29+0000",
            "content": "Thanks Attila!  I just committed this. "
        },
        {
            "author": "Luke Forehand",
            "id": "comment-12849865",
            "date": "2010-03-25T19:29:33+0000",
            "content": "This is a very serious problem for us.  We have multiple threads adding to the StreamingUpdateSolrServer's BlockingQueue, and if I bump the thread count high enough (around 10 for my process) I can reproduce this problem every time.  I'd say this bug is critical enough to warrant a SOLR bug-fix release. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872790",
            "date": "2010-05-28T03:02:39+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12873376",
            "date": "2010-05-30T04:43:24+0000",
            "content": "Committed revision 949473.\n\nmerged to branch-1.4 for 1.4.1 "
        },
        {
            "author": "Johannes",
            "id": "comment-12978559",
            "date": "2011-01-06T23:05:28+0000",
            "content": "We are still seeing the same issue with Solr1.4.1\n\nWe get into this situation when all the runner threads die due to a broken pipe, while the BlockingQueue is still full. All of the producer threads are all blocked on the BlockingQueue.put() method. Since the runners are spawned by the producers, which are all blocked, runner threads never get created to drain the queue.\n\nHere's a potential fix. In the runner code, replace these lines:\n\n        // remove it from the list of running things...\n        synchronized (runners) \n{\n          runners.remove( this );\n        }\n\nwith these lines:\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) \n{\n            // keep this runner alive\n            scheduler.execute(this);\n          }\n else \n{\n            runners.remove( this );\n          }\n        } "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12987223",
            "date": "2011-01-26T21:18:21+0000",
            "content": "Thanks Johannes, the fix does look correct, and I've committed to 3x and trunk.\nIf we have another release of 1.4, we should backport this. "
        },
        {
            "author": "Aakarsh Nair",
            "id": "comment-12992224",
            "date": "2011-02-08T23:10:55+0000",
            "content": "We are still seeing this issue even after using Johannes fix. All runners are exiting  and the main producer thread hangs on line 196 queue.put . I am thinking it may be because queue is getting drained and filled fast (queue size 50 , number of threads 20) . So there might be a race condition on the queue capacity check.Queue appears to be below capacity to the last runner  \nthen  fills up by simultaneous calls to put . I still see the issue after backporting  what is in 3.x branch for testing it with solr 1.4.1. I guess a solution may be to use larger queue capacities for now but the race conditions still seem to be present. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12994562",
            "date": "2011-02-14T23:36:31+0000",
            "content": "So there might be a race condition on the queue capacity check.\n\nYeah.  What about moving the queue.put() inside the synchronized(runners) block to fix this? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12994903",
            "date": "2011-02-15T17:58:54+0000",
            "content": "What about moving the queue.put() inside the synchronized(runners) block to fix this?\n\nOn second thought, that looks like a pretty bad idea \nLooks like a recipe for deadlock since the runners lock will be held if put then blocks.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12994934",
            "date": "2011-02-15T19:08:20+0000",
            "content": "Here's a patch that uses offer instead of put in a retry loop. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12995018",
            "date": "2011-02-15T21:39:54+0000",
            "content": "Committed the latest patch - hopefully that finally fixes this issue! "
        },
        {
            "author": "Christian Goeller",
            "id": "comment-13006352",
            "date": "2011-03-14T08:51:32+0000",
            "content": "I tried out the comitted patch with SOLR 1.4.1 (built SOLR on my own). Unfortunately I still have an issue when having the following scenario:\n\nServer: Runs SOLR servlet\nClient: Adds documents to the index using the StreamingUpdateSolrServer in several threads.\n\nIf the server crashes or becomes unreachable for the client, the StreamingUpdateSolrServer on the client will end up in an infinite loop, trying to send requests to the server.\nIt should be possible to stop/shutdown/dispose the StreamingUpdateSolrServer somehow from another thread. \n\nClearing the queue and stopping the executor service from outside stopps the infinite loop. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013174",
            "date": "2011-03-30T15:45:46+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}