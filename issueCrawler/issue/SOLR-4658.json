{
    "id": "SOLR-4658",
    "title": "In preparation for dynamic schema modification via REST API, add a \"managed\" schema facility",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Sub-task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The idea is to have a set of configuration items in solrconfig.xml:\n\n\n<schema managed=\"true\" mutable=\"true\" managedSchemaResourceName=\"managed-schema\"/>\n\n \n\nIt will be a precondition for future dynamic schema modification APIs that mutable=\"true\".  solrconfig.xml parsing will fail if mutable=\"true\" but managed=\"false\".\n\nWhen managed=\"true\", and the resource named in managedSchemaResourceName doesn't exist, Solr will automatically upgrade the schema to \"managed\": the non-managed schema resource (typically schema.xml) is parsed and then persisted at managedSchemaResourceName under $solrHome/$collectionOrCore/conf/, or on ZooKeeper at /configs/$configName/, and the non-managed schema resource is renamed by appending .bak, e.g. schema.xml.bak.\n\nOnce the upgrade has taken place, users can get the full schema from the /schema?wt=schema.xml REST API, and can use this as the basis for modifications which can then be used to manually downgrade back to non-managed schema: put the schema.xml in place, then add <schema managed=\"false\"/> to solrconfig.xml (or remove the whole <schema/> element, since managed=\"false\" is the default).\n\nIf users take no action, then Solr behaves the same as always: the example solrconfig.xml will include <schema managed=\"false\" ...>.\n\nFor a discussion of rationale for this feature, see Chris Hostetter (Unused)'s post to the solr-user mailing list in the thread \"Dynamic schema design: feedback requested\" http://markmail.org/message/76zj24dru2gkop7b:\n\n\nIgnoring for a moment what format is used to persist schema information, I \nthink it's important to have a conceptual distinction between \"data\" that \nis managed by applications and manipulated by a REST API, and \"config\" \nthat is managed by the user and loaded by solr on init \u2013 or via an \nexplicit \"reload config\" REST API.\n\nPast experience with how users percieve(d) solr.xml has heavily reinforced \nthis opinion: on one hand, it's a place users must specify some config \ninformation \u2013 so people wnat to be able to keep it in version control \nwith other config files.  On the other hand it's a \"live\" data file that \nis rewritten by solr when cores are added.  (God help you if you want do a \nrolling deploy a new version of solr.xml where you've edited some of the \nconfig values while simultenously clients are creating new SolrCores)\n\nAs we move forward towards having REST APIs that treat schema information \nas \"data\" that can be manipulated, I anticipate the same types of \nconfusion, missunderstanding, and grumblings if we try to use the same \npattern of treating the existing schema.xml (or some new schema.json) as a \nhybrid configs & data file.  \"Edit it by hand if you want, the /schema/* \nREST API will too!\"  ... Even assuming we don't make any of the same \ntechnical mistakes that have caused problems with solr.xml round tripping \nin hte past (ie: losing comments, reading new config options that we \nforget to write back out, etc...) i'm fairly certain there is still going \nto be a lot of things that will loook weird and confusing to people.\n\n(XML may bave been designed to be both \"human readable & writable\" and \n\"machine readable & writable\", but practically speaking it's hard have a \nsingle XML file be \"machine and human readable & writable\")\n\nI think it would make a lot of sense \u2013 not just in terms of \nimplementation but also for end user clarity \u2013 to have some simple, \nstraightforward to understand caveats about maintaining schema \ninformation...\n\n1) If you want to keep schema information in an authoritative config file \nthat you can manually edit, then the /schema REST API will be read only. \n\n2) If you wish to use the /schema REST API for read and write operations, \nthen schema information will be persisted under the covers in a data store \nwhose format is an implementation detail just like the index file format.\n\n3) If you are using a schema config file and you wish to switch to using \nthe /schema REST API for managing schema information, there is a \ntool/command/API you can run to so.\n\n4) if you are using the /schema REST API for managing schema information, \nand you wish to switch to using a schema config file, there is a \ntool/command/API you can run to export the schema info if a config file \nformat.\n\n\n...wether of not the \"under the covers in a data store\" used by the REST \nAPI is JSON, or some binary data, or an XML file just schema.xml w/o \nwhitespace/comments should be an implementation detail.  Likewise is the \nquestion of wether some new config file formats are added \u2013 it shouldn't \nmatter.\n\nIf it's config it's config and the user owns it.\nIf it's data it's data and the system owns it.\n\n: is the risk they take if they want to manually edit it - it's no \n: different than today when you edit the file and do a Core reload or \n: something. I think we can improve some validation stuff around that, but \n: it doesn't seem like a show stopper to me.\n\nThe new risk is multiple \"actors\" (both the user, and Solr) editing the \nfile concurrently, and info that might be lost due to Solr reading the \nfile, manpulating internal state, and then writing the file back out.  \n\nEg: User hand edits may be lost if they happen on disk during Solr's \ninternal manpulation of data.  API edits may be reflected in the internal \nstate, but lost if the User writes the file directly and then does a core \nreload, etc....\n\n: At a minimum, I think the user should be able to start with a hand \n: modified file. Many people heavily modify the example schema to fit \n: their use case. If you have to start doing that by making 50 rest API \n: calls, that's pretty rough. Once you get your schema nice and happy, you \n: might script out those rest calls, but initially, it's much \n: faster/easier to whack the schema into place in a text editor IMO.\n\nI don't think there is any disagreement about that.  The ability to say \n\"my schema is a config file and i own it\" should always exist (remove \nit over my dead body) \n\nThe question is what trade offs to expect/require for people who would \nrather use an API to manipulate these things \u2013 i don't think it's \nunreasable to say \"if you would like to manipulate the schema using an \nAPI, then you give up the ability to manipulate it as a config file on \ndisk\"\n\n(\"if you want the /schema API to drive your car, you have to take your \nfoot of hte pedals and let go of the steering wheel\")",
    "attachments": {
        "SOLR-4658.patch": "https://issues.apache.org/jira/secure/attachment/12576330/SOLR-4658.patch",
        "SOLR-4658-fix-serialization.patch": "https://issues.apache.org/jira/secure/attachment/12578097/SOLR-4658-fix-serialization.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13618586",
            "date": "2013-04-01T03:47:22+0000",
            "content": "Patch implementing the idea.\n\nThis makes the IndexSchema constructor private, and adds a factory method named create(), which manages the upgrade-to-managed-schema process when necessary.\n\nThe persistence format is kept as XML.  A comment at the top says:\n\n\n<!-- Solr managed schema - automatically generated - DO NOT EDIT -->\n\n\n\nThis patch also add a method to core.Config to test for unexpected element attributes when parsing solrconfig.xml: complainAboutUnknownAttributes().  I'm only using it for the <schema/> tag at this point, but it should be useful for any other config elements that have a known fixed set of attributes.\n\nTests added for SolrCloud and standalone modes.\n\nI think it's ready to go. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13618599",
            "date": "2013-04-01T04:11:44+0000",
            "content": "It seems a little wierd to tie in all this zookeeper etc stuff into indexschema, and i'm still trying to figure out the mutable/managed stuff. \n\nIf the goal is to have multiple implementations of indexschema (immutable ones backed by human edited files, mutable ones saved to some opaque \"database\" that can be edited by REST), then why not make IndexSchema abstract and pluggable from solrconfig.xml like anything else? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13618654",
            "date": "2013-04-01T06:31:22+0000",
            "content": "It seems a little wierd to tie in all this zookeeper etc stuff into indexschema\n\nWell, since it's only used by IndexSchema, it seemed like the logical location.  Do you have an alternative suggestion?\n\nIf the goal is to have multiple implementations of indexschema (immutable ones backed by human edited files, mutable ones saved to some opaque \"database\" that can be edited by REST), then why not make IndexSchema abstract and pluggable from solrconfig.xml like anything else?\n\nI imagine you're thinking of a hierarchy like:\n\n\n\tIndexSchema\n\t\n\t\tMutableIndexSchema\n\t\t\n\t\t\tMutableZooKeeperIndexSchema\n\t\t\tMutableLocalIndexSchema\n\t\t\tMutable<Whatever>IndexSchema\n\t\t\t...\n\t\t\n\t\t\n\t\tImmutableIndexSchema\n\t\t\n\t\t\tImmutableZooKeeperIndexSchema\n\t\t\tImmutableLocalIndexSchema\n\t\t\tMutable<Whatever>IndexSchema\n\t\t\t...\n\t\t\n\t\t\n\t\n\t\n\n\n\nIs that right?\n\nThen solrconfig.xml config could be something like\n\n<schema managed=\"true|false\" storage=\"local|zookeeper|whatever\" mutable=\"true|false\" managedSchemaResourceName=\"...\"/>\n\nAnd the implementation could be chosen using SPI or something like it.\n\nOne problem I see with this: the decision about the storage location for configs is made elsewhere - it would definitely be an issue if people chose e.g. managed=\"true\" storage=\"local\" in SolrCloud mode.\n\nOr maybe I've misrepresented what you had in mind, Robert? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13618743",
            "date": "2013-04-01T11:25:22+0000",
            "content": "yeah I think i didnt communicate it well enough.\n\nI guess i was thinking:\n\n<schema class=\"FooSchema\" someOptionThatMightOnlyMakeSenseToFoo=\"true\"/>\n\n\n\nSo IndexSchema becomes abstract and loaded just like other plugins, versus being a \"wonder-do-it-all\" class. It would also\nhave the advantage of not having a bunch of options that have illegal combinations (e.g. managed+mutable)\n\nFinally it makes it extensible: if someone wants to make their own impl that is powered by microsoft access .MDB files then\nthey can do so.\n\n(Also i think it would make backwards compatibility possible in case something changes in drastic ways). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13618745",
            "date": "2013-04-01T11:33:24+0000",
            "content": "And maybe its not that the whole class need be abstract, just the implicit factory thats currently done with static methods.\n\nSo it could have load/save or something simple like that. The default one today wouldnt have any options at all and would throw UOE on save(). "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13618746",
            "date": "2013-04-01T11:34:23+0000",
            "content": "So is my class hierarchy what you were thinking of?  If not, what would FooSchema be to support the current functionality?\n\nI was thinking that requiring the user to know the class name for the combination of options they want would be a bit much.  In particular, it might be useful to switch between mutable and immutable without changing anything else, and making the user change the class name for this seems like overkill. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13618749",
            "date": "2013-04-01T11:48:29+0000",
            "content": "Robert, making your suggestions concrete, if the factory stuff is pulled out of IndexSchema, then config could be:\n\n\n<schemaFactory class=\"ClassicIndexSchemaFactory\"/> <!-- current behavior -->\n<schemaFactory class=\"ManagedIndexSchemaFactory\" mutable=\"true|false\" managedSchemaResourceName=\"managed-schema\"/>\n<schemaFactory class=\"MSAccessIndexSchemaFactory\" whatever=\"...\"/>\n...\n\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13618750",
            "date": "2013-04-01T11:55:13+0000",
            "content": "\nRobert, making your suggestions concrete, if the factory stuff is pulled out of IndexSchema, then config could be:\n\nSteve: thats exactly what i was thinking of! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13618751",
            "date": "2013-04-01T11:58:49+0000",
            "content": "and it would also be a bonus in the future if somehow the backwards cruft existing in various FieldType etc \napis (e.g. defaults and so on) were factored into the Classic guy to keep those apis simpler... "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13618826",
            "date": "2013-04-01T15:23:10+0000",
            "content": "This patch converts the IndexSchema config in solrconfig.xml to be plugin-based, and moves the static factory methods out of IndexSchema into classes ClassicIndexSchemaFactory and ManagedIndexSchemaFactory.  Here's the new config for managed schema:\n\n\n<schemaFactory class=\"ManagedIndexSchemaFactory\">\n  <bool name=\"mutable\">true</bool>\n  <str name=\"managedSchemaResourceName\">managed-schema</str>\n</schemaFactory>\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13618829",
            "date": "2013-04-01T15:30:49+0000",
            "content": "I like it much better! I think this will be more flexible for the future.\n\nCan we keep IndexSchema's ctor public so that its possible to really make one of these plugins? \n\n\n-  public IndexSchema(SolrConfig solrConfig, String name, InputSource is) {\n+  IndexSchema(SolrConfig solrConfig, String name, InputSource is) {\n\n\n\nThanks Steve! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13618831",
            "date": "2013-04-01T15:32:45+0000",
            "content": "Can we keep IndexSchema's ctor public so that its possible to really make one of these plugins?\n\nYes, I'll do that. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13618883",
            "date": "2013-04-01T16:32:15+0000",
            "content": "Committed to trunk r1463182 and branch_4x r1463193.\n\nThanks Robert! "
        },
        {
            "author": "jefferyyuan",
            "id": "comment-13627022",
            "date": "2013-04-09T20:08:48+0000",
            "content": "Steve, Thanks for your excellent work.\nI met one small issue when use this feature: in our schema, we define one fieldtype, it has one tokenizer: MyPathHierarchyTokenizerFactory which in the package org.apache.lucene.analysis. \u2013 This is not good, but the factory class is in the package a long time ago.\n\n \n<fieldType name=\"text_path\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n\t<analyzer>\n\t\t<tokenizer class=\"org.apache.lucene.analysis.MyPathHierarchyTokenizerFactory\" delimiter=\"\\\" replace=\"/\"/>\n\t</analyzer>\n</fieldType>\n\n \n\nAfter upgrade, it shorten the name to solr.MyPathHierarchyTokenizerFactory due to org.apache.solr.schema.FieldType.getShortName(String).\nprivate static final Pattern SHORTENABLE_PACKAGE_PATTERN = Pattern.compile(\"org\\\\.apache\\\\.(?:lucene\\\\.analysis(?=.).*|solr\\\\.(?:analysis|schema)).([^.]+)$\");\n\nThen later it will fail with follwing error when I restart my solr server, \nCaused by: org.apache.solr.common.SolrException: Error loading class 'solr.MyPathHierarchyTokenizerFactory'\n        at org.apache.solr.core.SolrResourceLoader.findClass(SolrResourceLoader.java:440)\n\nThis is because in SolrResourceLoader.findClass, it will try to load the class in sub packages of org.apache.solr. Can't find it, so throw ClassNotFoundException.\nbase=\"org.apache.solr\";\nString name = base + '.' + subpackage + newName;\nreturn clazz = Class.forName(name,true,classLoader).asSubclass(expectedType);\n\nI think maybe we can SHORTENABLE_PACKAGE_PATTERN: Pattern.compile(\"org\\\\.apache\\\\.(?:solr\\\\.(?:analysis|schema)).([^.]+)$\");\nAfter change SHORTENABLE_PACKAGE_PATTERN like above, it works for me now. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13627026",
            "date": "2013-04-09T20:12:43+0000",
            "content": "I mentioned this same bug as it applies to similarities on the dev list a week or so ago! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13627087",
            "date": "2013-04-09T20:48:47+0000",
            "content": "Hi yuanyun,\n\nThanks for the bug report.\n\nThe problem isn't that SHORTENABLE_PACKAGE_PATTERN includes factories under org.apache.lucene.analysis - most of the shared Lucene/Solr analysis factories live there now - but rather that users can use the same package for their own code, which is what you've done.\n\nThe issue is serialization: as currently written, the user's class=\"whatever\" is lost, and the serialization code attempts to reconstitute it on output.  I think the fix is to stop guessing what it should be, and just reuse the exact string supplied by the user in the original file when persisting the schema.\n\nI'll make a patch. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13628366",
            "date": "2013-04-10T22:27:10+0000",
            "content": "I mentioned this same bug as it applies to similarities on the dev list a week or so ago!\n\nYes, Robert Muir, you did, and my fix at the time was insufficient, since it still didn't properly handle third-party Similarity implementations located under org.apache.lucene or org.apache.solr.\n\nThe attached patch fixes class name shortening issues, for SimilarityFactory's, FieldType's, and analysis factories, and includes tests making sure that names are preserved in both shortened and fully qualified original forms.\n\nThere is a similar/related issue with luceneMatchVersion args on analysis factories, where the serialized form explicitly includes default match version in cases where it was not specified on the original form.  The patch fixes this to only serialize the luceneMatchVersion when it's explicitly present on the original, and includes tests checking that present and absent args are kept as-is.  (Persisting the default match version will be a problem when the default match version changes, because the persisted version(s) will no longer track the default version.)\n\nAlso part of this patch is a factory for MockTokenFilter.\n\nI'll commit shortly. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13628375",
            "date": "2013-04-10T22:36:21+0000",
            "content": "[trunk commit] sarowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1466720\n\nSOLR-4658:\n\n\tFix class name shortening issues, for SimilarityFactory's, FieldType's, and analysis factories: persisted class names' original forms are preserved in both shortened form (e.g. 'solr.TextField') and fully qualified form (e.g. 'org.apache.solr.schema.TextField')\n\tluceneMatchVersion on analysis factories is now persisted only when explicitly specified in the original; previously the default value was persisted when it was absent in the original\n\tAdd MockTokenFilterFactory\n\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13628399",
            "date": "2013-04-10T22:57:58+0000",
            "content": "[branch_4x commit] sarowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1466724\n\nSOLR-4658:\n\n\tFix class name shortening issues, for SimilarityFactory's, FieldType's, and analysis factories: persisted class names' original forms are preserved in both shortened form (e.g. 'solr.TextField') and fully qualified form (e.g. 'org.apache.solr.schema.TextField')\n\tluceneMatchVersion on analysis factories is now persisted only when explicitly specified in the original; previously the default value was persisted when it was absent in the original\n\tAdd MockTokenFilterFactory\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653835",
            "date": "2013-05-10T10:33:07+0000",
            "content": "Closed after release. "
        }
    ]
}