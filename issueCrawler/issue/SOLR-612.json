{
    "id": "SOLR-612",
    "title": "solrj should (optionally?) use POST for queries",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Can we make solrj always send post queries (or have it be an init-able option)? \n\nJetty has some \"problems\" (in quotes because I don't know if it's really a problem) with long queries over GET:\n\nhttp://www.mail-archive.com/solr-user@lucene.apache.org/msg09457.html\nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/200804.mbox/%3C47F50996.80705@umich.edu%3E\n\nTiny patch attached that changes it and doesn't cause an exception on long queries in Jetty w/ solrj.",
    "attachments": {
        "SOLR-612.patch": "https://issues.apache.org/jira/secure/attachment/12385829/SOLR-612.patch",
        "solrj-post.diff": "https://issues.apache.org/jira/secure/attachment/12384894/solrj-post.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Brian Whitman",
            "id": "comment-12609034",
            "date": "2008-06-28T18:58:35+0000",
            "content": "patch "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12609418",
            "date": "2008-07-01T01:27:37+0000",
            "content": "Linking this issue to SOLR-443 as changing from GET to POST has some rather nasty implications with regards to charsets. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12612555",
            "date": "2008-07-10T16:17:01+0000",
            "content": "There are a number of advantages to GET I think... you can see the URLs in the servlet container logs, it's explicitly read-only, etc.\nPeople can already use POST by setting the method on SolrRequest object.\nShould we really change the default? "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12612560",
            "date": "2008-07-10T16:32:44+0000",
            "content": "Well then maybe I just don't understand how to do it right \u2013 how do I tell solrj to use post, for this example:\n\nSolrServer s = new CommonsHttpSolrServer(\"http://localhost:8983/solr\");\nSolrQuery q = new SolrQuery();\nq.setQuery(\"type:dog\");\nQueryResponse qr = s.query(q);\n\nWhere in there would I set SolrRequest to use POST?\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12612563",
            "date": "2008-07-10T16:44:35+0000",
            "content": "Hmmm, I guess with .query() you can't.  I was looking at .request() which takes a SolrRequest which has a setMethod() on it.\n\nPerhaps we should add a setter on CommonsHttpSolrServer that can override the \"GET\" of any SolrRequest and change it to \"POST\"? "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12612747",
            "date": "2008-07-11T04:07:05+0000",
            "content": "IMHO the request method is a property of the request, not the server. Unfortunately it's not really feasible to add the method as an attribute to the request, as it's a subclass of SolrParams.\n\nI'm attaching a patch which adds a second query() method to SolrServer which takes the request method as the second argument. This way the method can be switched per call to query(), without having to change query or server object. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12612869",
            "date": "2008-07-11T13:24:27+0000",
            "content": "I'm attaching a patch which adds a second query() method to SolrServer which takes the request method as the second argument.\n\nShouldn't that be specific to an HTTP server? "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12612871",
            "date": "2008-07-11T13:38:17+0000",
            "content": "Ah, good point. Yes, this should probably be moved to the http server implementation. SolrServer just occured to me as the most obvious place since the query() method is defined there.\n\nIncidentally, would it make sense to keep the second query method there but generalise the request method? Something to specify non-solr parameters with a request in general. "
        },
        {
            "author": "Lars Kotthoff",
            "id": "comment-12613523",
            "date": "2008-07-15T04:49:10+0000",
            "content": "After having had a closer look at the code, I don't think that the query method which takes a METHOD as an argument should be specific to the HTTP server implementation \u2013 METHOD is defined in SolrRequest, i.e. it's not specific to HTTP requests. It looks like METHOD was really meant to provide a general way of passing non-solr parameters to requests.\n\nIf we decided that the METHOD is really just HTTP specific and shouldn't be in the general request class \u2013 it's used nowhere but in the HTTP server \u2013 then a significant amount of refactoring will be necessary to implement everything properly. One way to do this would be to introduce a new interface, HttpParameters, and have a subclass for each type of request implement that interface. Then change the HTTP server implementation to only work with requests which implement that interface. This is probably big enough to be handled in a different issue though.\n\nAlternatively the METHOD could be moved to the HTTP server implementation, making it a property of the server and not of the request. I don't like that option though because different requests have different defaults for the METHOD (e.g. update requests POST, query requests GET) and moving this information requires the server to know how to handle which type of request. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12615457",
            "date": "2008-07-21T22:57:02+0000",
            "content": "Lars, I've committed your version.\nThanks guys! "
        }
    ]
}