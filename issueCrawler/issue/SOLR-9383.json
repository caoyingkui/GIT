{
    "id": "SOLR-9383",
    "title": "New Admin UI Dashboard page doesn't show system info and args on IBM JVM",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.4,                                            5.5,                                            6.0,                                            6.0.1,                                            6.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "This has the same symptoms as SOLR-7686  (grey boxes for Swap Space, JVM-Memory and no Args) but was not fixed by it when using the IBM JVM on Windows and Linux.\n\nChrome shows this:\n\nangular.js:11617 TypeError: Cannot read property 'match' of undefined\nat parse_memory_value (index.js:78)\nat index.js:34\nat angular-resource.min.js:33\nat processQueue (angular.js:13193)\nat angular.js:13209\nat Scope.$eval (angular.js:14406)\nat Scope.$digest (angular.js:14222)\nat Scope.$apply (angular.js:14511)\nat done (angular.js:9669)\nat completeRequest (angular.js:9859)\n\nWhich appears to be because the IBM JVM is returning totalPhysicalMemory rather than totalPhysicalMemorySize as the Oracle JVM does in the system response.",
    "attachments": {
        "index_ibm.har": "https://issues.apache.org/jira/secure/attachment/12822095/index_ibm.har"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-08-04T15:32:57+0000",
            "author": "Colvin Cowie",
            "content": "HAR of failing request attached ",
            "id": "comment-15407945"
        },
        {
            "date": "2016-08-13T23:28:57+0000",
            "author": "Alexandre Rafalovitch",
            "content": "So, the root cause here is SystemInfoHandler that looks for various optional system MBeans and populates them into the property map as is.\n\nSo, we can see that IBM MBean has a different set of property names from the generic and Unix one directly from Sun/Oracle. (Javadoc references are just samples, but representative).\n\nThe question is: do we normalize this naming discrepancy on the server side so any call for that (and other similar) naming mismatches only need to know about Sun naming version (e.g. API client). Or do we handle it only when we process it for display purposes on the Admin UI side? ",
            "id": "comment-15420120"
        },
        {
            "date": "2016-08-26T09:57:35+0000",
            "author": "Colvin Cowie",
            "content": "IMO, since the \"system\" block on the response doesn't specify the JVM that is being used (though it is identified in \"jvm\") I think it makes sense to normalize it on the server side, since \"system\" is describing the system and not the JVM. ",
            "id": "comment-15438740"
        }
    ]
}