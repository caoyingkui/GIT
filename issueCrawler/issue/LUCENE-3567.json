{
    "id": "LUCENE-3567",
    "title": "NPE from SegmentTermDocs.<init> from SegmentReader.termDocs",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Occasionally NetBeans IDE users receive an NPE from Lucene 3.0.3 inside Maven Indexer (currently 4.1.2) code:\n\n\njava.lang.NullPointerException\n\tat org.apache.lucene.index.SegmentTermDocs.<init>(SegmentTermDocs.java:52)\n\tat org.apache.lucene.index.SegmentReader.termDocs(SegmentReader.java:963)\n\tat org.apache.lucene.index.IndexReader.termDocs(IndexReader.java:813)\n\tat org.apache.lucene.index.SegmentReader.termDocs(SegmentReader.java:956)\n\tat org.apache.lucene.search.TermQuery$TermWeight.scorer(TermQuery.java:74)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:210)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:170)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:98)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:108)\n\tat org.apache.maven.index.DefaultIndexerEngine.getOldDocument(DefaultIndexerEngine.java:158)\n        ....\n\n\n\nWorking backwards, parent.core.getTermsReader() is null, which means SegmentReaders.CoreReaders.decRef was called, which means SegmentReader.doClose was called, which means IndexReader.doClose was called, which I suppose means something called IndexReader.decRef prematurely. But plenty of things can call IndexReader.decRef and it is not clear how to track down the root cause.\n\nNote that SegmentReader.termDocs first calls ensureOpen(), which is presumably supposed to ensure that decRef had not been called too many times; perhaps this assertion did not work?\n\nDownstream bug, for reference: https://netbeans.org/bugzilla/show_bug.cgi?id=201057",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-07T18:11:47+0000",
            "content": "Hmm try to double check all places that close/decRef the reader; most likely the IR is over-decRef'd, or...\n\nAre there threads involved?  If so, it could be one thread closes the IR while another thread is still using it (which could explain why SR.termDocs call to ensureOpen didn't catch that the reader was closed, ie the close happened in the tiny window after ensureOpen and before STD.init called .getTermsReader()).\n\nLucene 3.5.0 will have the SearcherManager class to handle correctly sharing a searcher across threads with reopens... probably back-porting to work on 3.0.x wouldn't be so bad?  I described it here: http://blog.mikemccandless.com/2011/09/lucenes-searchermanager-simplifies.html ",
            "author": "Michael McCandless",
            "id": "comment-13145665"
        },
        {
            "date": "2011-11-15T17:38:26+0000",
            "content": "Various application threads could call Maven Indexer methods but they should in all cases be using an exclusive lock to prevent race conditions. I do not believe Maven Indexer itself would be accessing Lucene from multiple threads. In other words, the application is not intentionally using multithreaded index access. It is possible that it is doing so accidentally. Unfortunately the low-level NullPointerException produced deep in the Lucene stack does not indicate whether this or something else is the problem, nor does the stack trace point toward a clear diagnosis since the searcher might have been rendered invalid earlier. It would be nice to have more thorough assertions in Lucene code, for example verifying in entry points like Searcher.search that all related objects are in a valid state, or even tracking which Thread is actively mutating state so that definitely inappropriate calls fail early and reproducibly. Assuming Java assert is used, this would add no runtime overhead for production code. ",
            "author": "Jesse Glick",
            "id": "comment-13150624"
        }
    ]
}