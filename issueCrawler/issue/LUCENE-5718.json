{
    "id": "LUCENE-5718",
    "title": "More flexible compound queries (containing mtq) support in postings highlighter",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/highlighter"
        ],
        "affect_versions": "4.8.1",
        "status": "Open",
        "fix_versions": []
    },
    "description": "The postings highlighter currently pulls the automata from multi term queries and doesn't require calling rewrite to make highlighting work. In order to do so it also needs to check whether the query is a compound one and eventually extract its subqueries. This is currently done in the MultiTermHighlighting class and works well but has two potential problems:\n\n1) not all the possible compound queries are necessarily supported as we need to go over each of them one by one (see LUCENE-5717) and this requires keeping the \"switch\" up-to-date if new queries gets added to lucene\n2) it doesn't support custom compound queries but only the set of queries available out-of-the-box\n\nI've been thinking about how this can be improved and one of the ideas I came up with is to introduce a generic way to retrieve the subqueries from compound queries, like for instance have a new abstract base class with a getLeaves or getSubQueries method and have all the compound queries extend it. What this method would do is return a flat array of all the leaf queries that the compound query is made of. \n\nNot sure whether this would be needed in other places in lucene, but it doesn't seem like a small change and it would definitely affect (or benefit?) more than just the postings highlighter support for multi term queries.\n\nIn particular the second problem (custom queries) seems hard to solve without a way to expose this info directly from the query though, unless we want to make the MultiTermHighlighting#extractAutomata method extensible in some way.\n\nWould like to hear what people think and work on this as soon as we identified which direction we want to take.",
    "attachments": {
        "LUCENE-5718.patch": "https://issues.apache.org/jira/secure/attachment/12647816/LUCENE-5718.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14014278",
            "author": "Robert Muir",
            "content": "For the actual multitermqueries themselves, we could consider a method to get an automaton representation of what they do. on one hand, its specific to highlighting, on the other, i dont know a better way that avoids a very expensive rewrite against the entire index.\n\nAs far as punching through the query structure, we have a similar thing (extractTerms) geared at highlighting-type things. it avoids MUST_NOT clauses for example. We could consider an extractQueries... maybe there is a cleaner solution. ",
            "date": "2014-05-30T22:05:03+0000"
        },
        {
            "id": "comment-14014993",
            "author": "Luca Cavanna",
            "content": "I like your extractQueries idea. I gave it a shot, patch attached.\n\nThe main difference compared to extractTerms is that it adds the query itself to the list by default instead of throwing UnsupportedOperationException. Also, I think this one doesn't necessarily require calling rewrite (not totally sure though). I overrode the extractQueries method for all the queries that contain one or more sub-queries, let's see if that's too many of if I missed any...you tell me  ",
            "date": "2014-06-01T14:40:42+0000"
        },
        {
            "id": "comment-14014994",
            "author": "Luca Cavanna",
            "content": "Also worth mentioning that my patch addresses only the compound queries usecase. It leaves the automaton related work for the different multi term queries as it is (in MultiTermHighlighting). ",
            "date": "2014-06-01T14:42:07+0000"
        },
        {
            "id": "comment-14546095",
            "author": "Luca Cavanna",
            "content": "Was wondering if there is interest around this patch, or maybe there are better solutions by now for the custom compound queries usecase? I can revive the patch if needed, lemme know what you think. ",
            "date": "2015-05-15T19:58:48+0000"
        },
        {
            "id": "comment-14548404",
            "author": "David Smiley",
            "content": "Arguably, the place for this discussion is LUCENE-3041 as it's a universal one; not specific to any one highlighter. ",
            "date": "2015-05-18T17:53:05+0000"
        }
    ]
}