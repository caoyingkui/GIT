{
    "id": "LUCENE-2688",
    "title": "NativeFSLockFactory throws an exception on Android 2.2 platform as java.lang.management package is not available on android.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.4",
            "3.0.3",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0,                                            3.0.1,                                            3.0.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "NativeFSLockFactory throws an exception on Android 2.2 platform as java.lang.management package is not available on android.\n   Looks like FSDirectory defaults to NativeFSLockFactory, and this class refers to java.lang.management package to generate a unique lock. java.lang.management is not available in Android 2.2 and hence a runtime exception is raised. The workaround is to use another custom LockFactory or SimpleFSLockFactory, but Fixing NativeFSLockFactroy will help.\n\nThanks,\nSurinder",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-10-05T09:50:12+0000",
            "content": "I agree we should fix this.  We want portability.  This is only used to try to create a unique lock name...\n\nCan we somehow load this dynamically?  Such that on JVMs that do not have it, we fallback? ",
            "author": "Michael McCandless",
            "id": "comment-12917925"
        },
        {
            "date": "2010-10-05T11:44:53+0000",
            "content": "I don't think this is a bug.\n\nWe are talking about android... its not actually Java... ",
            "author": "Robert Muir",
            "id": "comment-12917945"
        },
        {
            "date": "2010-10-05T12:20:13+0000",
            "content": "Isn't it part of Java 5? Is Android using a different JDK? I agree w/ Robert on one hand, but adding a try-catch and fallback seems reasonable in this case.\n\nI'd only like to understand how is it that java.lang.management does not exist on Android, because that might indicate other classes don't exist as well, and thus fixing NativeFSLockFactory won't solve the real problem of running Lucene 3.x on Android. ",
            "author": "Shai Erera",
            "id": "comment-12917951"
        },
        {
            "date": "2010-10-05T12:26:34+0000",
            "content": "I'd only like to understand how is it that java.lang.management does not exist on Android, because that might indicate other classes don't exist as well, and thus fixing NativeFSLockFactory won't solve the real problem of running Lucene 3.x on Android.\n\nexactly my point!\n\nandroid doesn't have all the java apis (only a subset: http://developer.android.com/reference/packages.html)\nits not actually java...\n\neither we want lucene to fully work on it (which means we intentionally limit ourselves to the intersection of the \njava apis and the android apis, install a simulator on hudson, ensure ant test passes, etc), or we don't.\n\nbut i don't think we should degrade anything for it, in other words we shouldn't limit ourselves to its subset\nif the damn thing isn't going to work anyway. ",
            "author": "Robert Muir",
            "id": "comment-12917952"
        },
        {
            "date": "2010-10-05T12:34:31+0000",
            "content": "\nI don't think this is a bug.\n\nWe are talking about android... its not actually Java...\n\nI agree!\n\nThis is not a bug, and we do not support Android (there\nare many things besides this usage of j.l.management that cause\nproblems for Lucene on Android, right?).\n\nBut, separately, I think when possible Lucene should use simpler code,\nfewer APIs, etc., to minimize the risk of problems.\n\nThis usage of j.l.management seems frivolous?  Can't we simply do a\nbetter job seeding Random (eg with System.nanoTime()), instead?\n\nOr, make the usage of j.l.management dynamic?\n\nNote that this was added for LUCENE-2421, which was only to make\nsure our tests don't make conflicting locks.  It seems very unlikely\na \"real\" app would hit this (the lock files live in the index dir).  Maybe\nwe can fix it for tests only (eg swap in different impl when tests are\nrunning...)? ",
            "author": "Michael McCandless",
            "id": "comment-12917953"
        },
        {
            "date": "2010-10-05T12:37:45+0000",
            "content": "Maybe we can fix it for tests only (eg swap in different impl when tests are running...)?\n\nI think the actual tests should use our real code, as for LuceneJUnitResultFormatter, yes, i think you are right. ",
            "author": "Robert Muir",
            "id": "comment-12917954"
        },
        {
            "date": "2010-10-05T13:08:41+0000",
            "content": "I don't understand why does an Android app need to lock the index at all, and even if \u2013 can't SimpleFS work?\n\njava.lang.management is perfectly legit, and is not an external dependency or anything. Luckily Android includes java.util.concurrent \u2013 what if it didn't? Would we attempt to fix Lucene too (IndexReader wouldn't work, for example).\n\nI personally don't mind if we fix it though, to use nanoTime() or wrap with try-catch and fallback to using nanoTime() there.\n\nIt's just a question of what do we want to say about Android support. ",
            "author": "Shai Erera",
            "id": "comment-12917962"
        },
        {
            "date": "2010-10-05T13:23:08+0000",
            "content": "+1, it's java.lang.management, which is even in the basic \"lang\" package. If Android does not have it, its a killer. On android, you can work around with SimpleFSLock. If we start to supply workarounds, we will get into a hell of supporting abstruse environments. ",
            "author": "Uwe Schindler",
            "id": "comment-12917966"
        },
        {
            "date": "2010-10-05T13:32:51+0000",
            "content": "Luckily Android includes java.util.concurrent - what if it didn't? Would we attempt to fix Lucene too (IndexReader wouldn't work, for example).\n\nI think it goes much deeper than this, besides having the APIs, do they actually work ?\n\nFor example, with apache harmony (android uses its classlib!) \nthere was/is some work to actually make tests pass: HARMONY-6640, HARMONY-6648, HARMONY-6649, HARMONY-6650\n\nfortunately the harmony developers were very helpful in getting things moving, \nbut my point is that unless the tests pass, its pointless to waste time looking at the APIs ",
            "author": "Robert Muir",
            "id": "comment-12917973"
        },
        {
            "date": "2010-10-05T14:41:41+0000",
            "content": "I'm not talking about Android support \u2013 that's a much larger (and\nmore challenging) question.\n\nI'm talking about relying on as few dependencies (including java APIs)\nas possible, to reduce the chance of problems.  This philosophy\napplies all across lucene sources, but especially to our very low\nlevel APIs like locking.\n\nSo... is/was j.l.management really the only way to solve this problem?\nWouldn't seeding with System.nanoTime also suffice?\n\nHmm... maybe a better solution is to stop acquiring a test lock\naltogether?  Only NativeFSLockFactory does this..., and it's actually\nrather silly, because we acquireTestLock when .makeLock is called,\nyet, the caller who called .makeLock will presumably shortly\nthereafter call .obtain on that lock and will at that point see an\nexception if there are issues with native locks on the current\nfilesystem.\n\nNote that we are only trying to generate a unique name for the test\nlock that the lock factory acquires to verify locking will work.  As\nfar as I know, no app has ever hard a problem with this, ie, this is a\ntest-only problem.  In fact, even reading through LUCENE-2421 again, I\ndon't get why our tests are running simultaneous tests sharing the\nsame lock directory?  Shai do you remember which specific tests cause\nproblems?  And if the test lock was a problem, why then was the real\nlock not a problem? ",
            "author": "Michael McCandless",
            "id": "comment-12918000"
        },
        {
            "date": "2010-10-07T09:13:21+0000",
            "content": "This issue was fixed, as a side effect of fixing LUCENE-2689, which removed the acquireTestLock method (the only thing using j.l.management.*) entirely. ",
            "author": "Michael McCandless",
            "id": "comment-12918848"
        }
    ]
}