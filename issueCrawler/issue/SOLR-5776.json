{
    "id": "SOLR-5776",
    "title": "Look at speeding up using SSL with tests.",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Test",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We have to disable SSL on a bunch of tests now because it appears to sometime be ridiculously slow - especially in slow envs (I never see timeouts on my machine).\n\nI was talking to Robert about this, and he mentioned that there might be some settings we could change to speed it up.",
    "attachments": {
        "SOLR-5776.patch": "https://issues.apache.org/jira/secure/attachment/12640020/SOLR-5776.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13913200",
            "date": "2014-02-26T17:29:44+0000",
            "content": "Just spawn not so many threads and jetties? To test distributed stuff with SSL, you need 2 or 3 jetties, but not 50! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13913201",
            "date": "2014-02-26T17:30:56+0000",
            "content": "My first thought is: ensure jettysolrunner connectors/threadpools are setup correctly for ssl.\n\nSecond thought is: examine SSL settings. We don't need to be using military grade stuff here like 4096bit RSA or whatever, for tests we should use \"low grade\" crypto. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13913205",
            "date": "2014-02-26T17:32:50+0000",
            "content": "Just spawn not so many threads and jetties? To test distributed stuff with SSL, you need 2 or 3 jetties\n\nThe tests that fail spawn like 1-4 jetties, so that won't help. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13913544",
            "date": "2014-02-26T21:38:49+0000",
            "content": "Commit 1572275 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1572275 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13913593",
            "date": "2014-02-26T22:08:48+0000",
            "content": "Commit 1572295 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1572295 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13913913",
            "date": "2014-02-27T01:52:56+0000",
            "content": "Commit 1572391 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1572391 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13913916",
            "date": "2014-02-27T01:53:36+0000",
            "content": "Commit 1572393 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1572393 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13913948",
            "date": "2014-02-27T02:23:22+0000",
            "content": "Commit 1572408 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1572408 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13913949",
            "date": "2014-02-27T02:24:47+0000",
            "content": "Commit 1572410 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1572410 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13915890",
            "date": "2014-02-28T15:44:15+0000",
            "content": "Commit 1572974 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1572974 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13915892",
            "date": "2014-02-28T15:45:01+0000",
            "content": "Commit 1572976 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1572976 ]\n\nSOLR-5776: Suppress SSL "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13967945",
            "date": "2014-04-13T21:14:06+0000",
            "content": "On a tip from Robert, I started looking at SecureRandom as the source of this problem.\n\nIt seems that at least on Linux, the default SecureRandom algorithm will get data from /dev/random, which can block once it exhausts entropy.\n\nSome testing with a custom java.security.egd file seems to bear this out as the problem.\n\nI'm still trying to work out the best solution. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13968065",
            "date": "2014-04-14T04:30:14+0000",
            "content": "Attached patch appears to be a working workaround. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13968077",
            "date": "2014-04-14T04:52:33+0000",
            "content": "Bah, it seems to be much less frequent, but it can still happen. I think the issue is that if you don't specify the seed, it will still read from /dev/random for that.\n\nI had looked into a custom SecureRandom via SPI, but it's my first foray into SPI, and while it seems relatively straightforward, I have not yet figured out how to plug in a custom SecureRandomSPI class in tests. Even when that's done, the impl is not so straightforward - from what I can tell, you cannot extend the standard SecureRandom to fix this and the open jdk code is Oracle GPL and the Harmony code is fairly different and would require some hacking to get in. Otherwise we would need to come up with a clean room impl that was still about as decent as Random. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13968676",
            "date": "2014-04-14T18:56:39+0000",
            "content": "Random uniformed comment from someone whose only knowledge of this is googling things i saw in your patch:  did you also try setting \"securerandom.source\" to \"file:/dev/./urandom\" in the security manager settings?\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13968959",
            "date": "2014-04-14T22:50:20+0000",
            "content": "Supposedly, java.security.egd is the system property that overrides securerandom.source. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13969078",
            "date": "2014-04-15T00:39:48+0000",
            "content": "Supposedly, java.security.egd is the system property that overrides securerandom.source.\n\nHmmm, yeah ....\n\nI just spent a bit of time reading this: http://moi.vonos.net/java/securerandom/ before i realized that apparently i died and am now in hell. If, for the sake of argument, we assume i'm wrong \u2013 that i really am alive, and this is not hell \u2013 then from what i can tell:\n\n\n\tThe only way to guarantee that arbitrary code using a SecureRandom (maybe just calling \"new\" maybe calling \"generateSeed\" - who knows it's arbitrary and out of our control) won't block indefinitely is to ensure that we are using the SHA1PRNG algorithm with ThreadedSeedGenerator\n\tthe way to ensure that you get the SHA1PRNG algorithm with ThreadedSeedGenerator is to ensure that the effective value of \"securerandom.source\" is unset.\n\t\"securerandom.source\" is explicitly configured in the \"java.security\" file that ships with the JRE/JDK\n\tthe \"java.security.egd\" system property can be used at runtime to to override the \"securerandom.source\" value configured in \"java.security\"\n\tit is apparently not possible to unset the value of \"securerandom.source\" just by using a system property - not even using -Djava.security.egd=\"\" (which seems to just be ignored and you still get \"NativePRNG\")\n\n\n\nOne thing i didn't see discussed in that article is what happens if you use: -Djava.security.egd=\"/bogus/file/that/does/not/exist\" \u2013 that clearly triggers the use of SHA1PRNG, but it's not clear what happens when the URLSeedGenerator can't open the file.  \n\nMy gut tells me that it may then be defaulting to the (guaranteed to never block) ThreadedSeedGenerator because it definitely behaves differently on my machine using the code below \u2013 in particularly, it's a bit slow to seed, and I theorize it's because it's running the ThreadedSeedGenerator (but i can't figure out how to ask the SecureRandom and/or Provider which SeedGenerator is in use)...\n\n\nimport java.security.SecureRandom;\npublic final class Random {\n  public static final void main(String[] args) {\n    for (int i= 0; i< 10; i++) {\n      SecureRandom r = new SecureRandom();\n      System.out.println( r.getAlgorithm() + \"::\" + r.getProvider().toString() + \"::\" + r.nextInt());\n    }\n  }\n}\n\n\n\n\nhossman@frisbee:~/tmp$ javac Random.java && java -Djava.security.egd=\"\" Random \nNativePRNG::SUN version 1.7::-197797452\n...\nhossman@frisbee:~/tmp$ javac Random.java && java -Djava.security.egd=\"/does/not/exist\" Random \nSHA1PRNG::SUN version 1.7::-926688095\n...\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13969105",
            "date": "2014-04-15T01:07:40+0000",
            "content": "it is apparently not possible to unset the value of \"securerandom.source\" just by using a system property \n\nYeah, I spent a fair amount of time trying to do that - fun times.\n\nbut it's not clear what happens when the URLSeedGenerator can't open the file.\n\nI had a fair amount of runs with this just by accident - I'm pretty sure I still saw issues, but I suppose I can give it another whirl. I tried a lot of things based on various google reading.\n\nBut yeah, I've been running down a similar set of items and some others - it was a sad and unproductive bunch of hours with a fair amount of SOL (swear out loud?) moments. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13970474",
            "date": "2014-04-16T06:08:20+0000",
            "content": "Attached a patch that tells Jetty to use the SHA1PRNG secure random algorithm for tests. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13971400",
            "date": "2014-04-16T13:35:35+0000",
            "content": "Nice - did not know we could actually set the secure random jetty will use. I'm not sure if setting it to SAH1PRNG is enough - pretty sure I tried that a fair amount by system property - does that also give us the ThreadedSeedGenerator? "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13971458",
            "date": "2014-04-16T14:25:35+0000",
            "content": "Jetty allows you to set the algorithm name but if further customization is necessary you can set the SSLContext (which Jetty will then ignore all of the set truststores/keystores/etc as that is configured in the SSLCotnext). The SSLContext Builder (see SSLTestConfig) allows you to set your own SecureRandom object - this will give you the hooks to provide your own SecureRandomSpi implementation which is used to generate the random value (we can probably just create a simple noop implementation). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13971479",
            "date": "2014-04-16T14:37:19+0000",
            "content": "Yeah, this seems like a very promising development. I'll try and run some tests later today or tomorrow. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13973557",
            "date": "2014-04-17T23:20:28+0000",
            "content": "Commit 1588388 from markrmiller@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1588388 ]\n\nSOLR-5776: Enabled SSL tests can easily exhaust random generator entropy and block. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13973567",
            "date": "2014-04-17T23:36:36+0000",
            "content": "Looks like there are a few issues with the previous checkin:\n\n1) SolrTestCase4j has hard coded \"trySsl = true\" vice the random boolean value\n2) JettySolrRunner is trying to configure the SecureRandomAlgorithm but that value isn't set in the SSLTestConfig thus that algorithm isn't actually being set in Jetty. You may want to make the buildSSLContext method Public and set the Jetty SSLContext with the return value which will then use the NullSecureRandom.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973569",
            "date": "2014-04-17T23:45:33+0000",
            "content": "Thanks for reviewing!\n\n1) Yeah, I'll flip that back when I commit to 4x - I want to see how all the various jenkins jobs handle full SSL for a few runs first.\n\n2) Yeah, I kept the support for setting the algorithm in JettySolrRunner - it seems like a nice addition. But I don't set it in SSLTestConfig because we don't need to set it for tests? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13973573",
            "date": "2014-04-17T23:48:50+0000",
            "content": "Mark Miller...\n\n1) I don't think you need to override nextBytes with a No-Op method .. as long as you override generateSeed we should be fine\n2) there's a potential AIOOB error with your implementation of generateSeed \u2013 the contract says that the byte[] returned will have whatever length was specified in the argument, so this could break spectacularly in a future version of jetty/java\n3) I'm not sure that you need NullSecureRandom at all \u2013 if you go back to Steve's patch, and just ensure that you call setSeed(new byte[] {'f','u'}) on the result of SecureRandom.getInstance(\"SHA1PRNG\") beore letting jetty have it, then generateSeed should never, ever be called.\n\nEDIT: mid-air-collision, deleted things miller addressed in his previous comment "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973586",
            "date": "2014-04-17T23:57:00+0000",
            "content": "1, 3) Since we need no security with SSL, doesn't it make sense to have all this just be a no op and have the best performance? Is there any benefit to running more code.\n\n2) Thanks, I'll address. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13973601",
            "date": "2014-04-18T00:08:44+0000",
            "content": "Since we need no security with SSL, doesn't it make sense to have all this just be a no op and have the best performance?\n\nI don't think so?  \n\nWe still want some psuedo-randomness in the SSL, otherwise we might encounter some bug where it doesn't work, but we don't know because the SSL layer is always going down a certain code path that bypasses the bug because it's (Null)SecureRandom is always returning 0/NUL/false from getInt/getBytes/getBoolean\n\nWe want to bypass the expensive entropy step, but we shouldn't bypass the inherient psuedo-randomness of SSL ... otherwise why not bypass all of the lucene randomization framework?\n\n(if anything, SSLTestConfig should probably seed SecureRandom.getInstance(\"SHA1PRNG\") with bytes it gets from LuceneTestFramework.random()) "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13973610",
            "date": "2014-04-18T00:18:18+0000",
            "content": "It is important to note that the SSLTestConfig buildSSLContext is currently only being used in the context of building HttpClient on the client side, not on the Jetty side. So you will still be susceptible to the NativePRNG SecureRandom instance on the server side (and thus the long pauses). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973640",
            "date": "2014-04-18T00:42:37+0000",
            "content": "We will see how the jenkins cluster takes it - in my testing, I went from common failures when ssl was fully true to no failures after many, many, runs (I've been running it locally all day). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973644",
            "date": "2014-04-18T00:44:51+0000",
            "content": "We still want some psuedo-randomness in the SSL, otherwise we might encounter some bug where it doesn't work\n\nBut we are not really interested in testing SSL at that level are we? All I'm really concerned about is that we are using https and http in the right places and rough communication can take place - how jetty SSL behaves with a securerandom vs no random seems beyond what we should care about testing for proper SSL support? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973666",
            "date": "2014-04-18T01:18:44+0000",
            "content": "So you will still be susceptible to the NativePRNG SecureRandom\n\nJust to be clear, I ran into the same issues when specifying \"SHA1PRNG\" on the server side - though perhaps because I was not taking care of the issue on the client side - which seems to be where the real trouble point is?\n\nI'll bring back setting \"SHA1PRNG\" on the server side, since at a minimum, it should be better than NativePRNG. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13973684",
            "date": "2014-04-18T01:35:03+0000",
            "content": "...perhaps because I was not taking care of the issue on the client side - which seems to be where the real trouble point is?\n\nThat seems strange, I thought it should be a problem on both sides, though I'm definitely not an expert on this subject, nor have I come across the problem of trying to generate a SecureRandom value out in the wild. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973704",
            "date": "2014-04-18T02:06:28+0000",
            "content": "And the first jenkins fail pops right away  Of course. I'll try adding \"SHA1PRNG\" on server side. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973717",
            "date": "2014-04-18T02:25:26+0000",
            "content": "Tagged that wrong:\n\nCommit 1588402 from markrmiller@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1588402 ]\nSOLR-5980: Set the server side to SHA1PRNG as in Steve's original patch.\n\nThat should leave us still getting some urandom, but perhaps it minimizes things to something reasonable. I'm not super optimistic. Beyond that, I'm not sure what we can do other than use spi. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13973723",
            "date": "2014-04-18T02:42:52+0000",
            "content": "Bah, just saw a local fail after all that even with the SHA1PRNG change \n\nI'll revert for now - I can't spend more time on this near term. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13973734",
            "date": "2014-04-18T02:58:04+0000",
            "content": "Commit 1588406 from markrmiller@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1588406 ]\n\nSOLR-5776: sigh Revert this for now. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14054882",
            "date": "2014-07-08T12:23:09+0000",
            "content": "According to the following StackOverflow discussion, setting System.setProperty(\"java.security.egd\", \"file:/dev/./urandom\"); (notice the extra dot) seems to fool the JVM and use the SHA generator. My local testing seems to confirm this as well. We should add this in the test base class.\n\nhttp://stackoverflow.com/questions/137212/how-to-solve-performance-problem-with-java-securerandom "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14054888",
            "date": "2014-07-08T12:34:36+0000",
            "content": "I tried that too - like many things I tried locally, felt like it worked locally, but just ended up being some random luck and it still was a problem. \n\nFeel free to try again like the fsync issue though  You might have some better luck.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14054894",
            "date": "2014-07-08T12:42:38+0000",
            "content": "Not sure how your twisting by the way, but the best way is to turn on all the disabled ssl tests and then turn off random ssl and just have all of them use ssl - I have enough local random entropy to have that work as is sometimes, but it will fail more often at least. Our Jenkins machines seem to have much less entropy and fail much, much easier.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14054898",
            "date": "2014-07-08T12:48:28+0000",
            "content": "Yeah, I have been running tests manually but I'm thinking of setting up jenkins on an old and slow box that I have lying around. Do you have a jenkins config that I can copy? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14055091",
            "date": "2014-07-08T16:20:42+0000",
            "content": "I run a variety of jobs - nightly, chaosmonkey, only, etc, but here is the basic config I'm using for a std trunk job. https://paste.apache.org/4mOT "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14055112",
            "date": "2014-07-08T16:42:19+0000",
            "content": "Shalin Shekhar Mangar: I can assign a password to your policeman jenkins account, so you can look into the jobs. Basically it is very simple: Freestyle build with: checkout using Subversion plugin and then Ant builder plugin, advanced options, set target to execute and build properties (-D parameters) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14055377",
            "date": "2014-07-08T19:39:12+0000",
            "content": "Thanks Mark and Uwe!\n\nUwe Schindler - Access to policeman jenkins will be a huge help. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14065480",
            "date": "2014-07-17T20:06:44+0000",
            "content": "Haveged is designed to solve the problem of low-entropy hosts (e.g. headless servers), though it appears  to be Linux-only. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14074632",
            "date": "2014-07-25T17:31:26+0000",
            "content": "One of the comments steve made when opening SOLR-6254...\n\n\nI found some info about /dev/random problems on FreeBSD here: https://wiki.freebsd.org/201308DevSummit/Security/DevRandom, which lead me to /etc/rc.d/iinitrandom, which gets around the limited entropy by cat'ing a bunch of shit to /dev/random:\n...\nI think we should try the same strategy in a crontab every X minutes, to see if that addresses the test failures.\n\nmiller's response to that specific suggestion...\n\nI think it's fine as a short term workaround, but not a great solution. We probably should just disable SSL unless we can address it in a portable way.\n\nHere's my straw man counter proposal:\n\n\n\tupdate the solr tests so that:\n\t\n\t\tSSL randomization only happens if a \"tests.randomssl\" sys prop is set - default is false\n\t\t\n\t\t\tNOTE: would mean updates to the \"reproduce with\" line formatting\n\t\t\tshould be updated in test-help as well\n\t\t\tcould be used in lucene/replicator module as well \u2013 it already has a \"tests.jettySSL\"  (doh! ... not included in the reproduce line!)\n\t\t\n\t\t\n\t\tsanity check that we have at least some basic coverage of Solr w/SSL that is not randomized (ie: SSLMigrationTest and at least one new test that always uses SSL to bring up a few nodes, index a few docs, do a query, and shuts down)\n\t\tremove most of the @SuppressSSL annotations currently in place (should only be used for tests that truly needs to supress SSL because of the nature of the test: ie explicitly veryfing something about non-ssl mode)\n\t\n\t\n\tupdate the jenkins boxes to:\n\t\n\t\thave cron like steve suggests\n\t\tset \"tests.randomssl\" to true when running builds\n\t\n\t\n\n\n\nThe end result, if everything works properly should be:\n\n\n\tno matter who runs the tests, some basic sanity checking of SSL is done\n\ton our jenkins builds, we do extensive randomized testing of SSL with all the cloud (and lucene/replicator) functionality\n\tusers who have enough entropy on their system can run -Dtests.randomssl=true if they choose.\n\n\n\nObviously though, before putting any work into the tests framework to support something like \"tests.randomssl\" as a first class sysprop,  the first baby step to see if this plan is even viable would be the cron steve mentioned to create lots of entropy \u2013 if that doesn't work, then the whole plan is moot.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14076341",
            "date": "2014-07-28T16:13:25+0000",
            "content": "+1, sounds good to me. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14077207",
            "date": "2014-07-29T00:41:12+0000",
            "content": "edit: prepended /sbin/ to sysctl and dmesg in the crontab, since /sbin/ isn't in the PATH under cron\n\nI logged into ASF FreeBSD Jenkins's lucene.zones.apache.org and ran sudo su - hudson and crontab -e to put in place a cron job to run every minute.  Here's the result (from user hudson's crontab -l):\n\n\n# Stolen from /etc/rc.d/initrandom to unblock /dev/random\n* * * * * ( ps -fauxww; /sbin/sysctl -a; date; df -ib; /sbin/dmesg; ps -fauxww ; cat /bin/ls ) | dd of=/dev/random bs=8k 2>/dev/null\n\n \n\nWhen I time the above command, it takes about 0.2 seconds to run, so running this every minute shouldn't overwhelm the system.  Maybe it doesn't need to run every minute, I don't know, we can try dialling it back if this works.\n\nI'll re-enable SSL for a couple tests on trunk that previously failed regularly on ASF FreeBSD Jenkins, to see if this change allows those to pass. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14077245",
            "date": "2014-07-29T01:26:55+0000",
            "content": "I'll re-enable SSL for a couple tests on trunk that previously failed regularly on ASF FreeBSD Jenkins, to see if this change allows those to pass.\n\nHmm, I didn't do this, because looking back at failures for TestCloudSchemaless before I added the @SuppressSSL annotation, they were all on Policeman Jenkins' MacOSX VM, not on ASF Jenkins.... Uwe Schindler, can you add a similar cron job (or whatever the equivalent is for launchd/launchctl, never used it myself)? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14077497",
            "date": "2014-07-29T08:01:36+0000",
            "content": "Use account \"steve_rowe\" instead: I have no idea what the cron-job is doing!  Can somebody explain and why this helps?\n\nYou can log into MacOSX jenkins (if its running): ssh jenkins@jenkins-mac.thetaphi.de (has IPv4 and IPv6 address), for the password send me a note. You can try out whatever you want. Please note, that the virtual machine gets reset to \"clean and empty state\" on every update, so once you found a good cron-job, I can persist it on the VM snapshot.\n\nIs there anything to change in Windows or the Linux Jenkins?\n\nDo I really need such a cronjob? I can also explicitely pass tests.randomssl=false in the jenkins config? I don't like such crazy stuff going on the machines. I am also not sure about good randomness on virtual machines... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14078098",
            "date": "2014-07-29T18:12:23+0000",
            "content": "Do I really need such a cronjob? I can also explicitely pass tests.randomssl=false in the jenkins config?...\n\nthe goal was to do some experiments with such a cron in place to see if it helped out the situation \u2013 if it did, then we could move forward with teh work to add support to the test framework for a general \"tests.randomssl\" (that would be included in the reproduce line, etc...) so that by default SSL randomization isn't used, but on jenkins boxes that have enough entropy to really hammer it the prop would be available.\n\nie: we wanted to see if the cron would even help on these low entropy machines before putting in a bunch of work on the test framework to enable this sys prop. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14080005",
            "date": "2014-07-30T21:28:57+0000",
            "content": "Commit 1614774 from Use account \"steve_rowe\" instead in branch 'dev/trunk'\n[ https://svn.apache.org/r1614774 ]\n\nSOLR-5776: Re-enable SSL for this test, to see if attempts to increase the entropy pool on ASF FreeBSD Jenkins and Policeman MacOSX Jenkins are helping at all. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14080007",
            "date": "2014-07-30T21:30:16+0000",
            "content": "Commit 1614775 from Use account \"steve_rowe\" instead in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1614775 ]\n\nSOLR-5776: Re-enable SSL for this test, to see if attempts to increase the entropy pool on ASF FreeBSD Jenkins and Policeman MacOSX Jenkins are helping at all. (merged trunk r1614774) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14080010",
            "date": "2014-07-30T21:31:04+0000",
            "content": "Steve Rowe: I have no idea what the cron-job is doing!  Can somebody explain and why this helps?\n\nThe cron job is feeding the entropy pool by writing to /dev/random, which should unblock reads from /dev/random, assuming there is some randomness in what gets fed in, and/or that side-effect I/O timings feed the pool.\n\nI don't know much about this stuff, but here's some things I've read recently about it:\n\n\n\thttps://we.riseup.net/debian/entropy (Linux random entropy, some Debian specifics, with a discussion of other OSs)\n\thttp://security.stackexchange.com/questions/42952/how-can-i-measure-and-increase-entropy-on-mac-os-x (Q/A about OS X entropy)\n\thttp://en.wikipedia.org/wiki/Entropy_(computing) (Brief coverage of various OSs' handling of entropy)\n\thttp://en.wikipedia.org/?title=/dev/random (random number generation on various OSs)\n\thttps://wiki.freebsd.org/201308DevSummit/Security/DevRandom (FreeBSD /dev/random design discussion)\n\n\n\nIs there anything to change in Windows or the Linux Jenkins?\n\nI don't know; as Hoss says above, we want to run some experiments to see if re-enabling SSL in tests that have had trouble in the past will cause trouble again.  So we should know in short order if these need changes.\n\n\nYou can log into MacOSX jenkins (if its running): ssh jenkins@jenkins-mac.thetaphi.de (has IPv4 and IPv6 address), for the password send me a note. You can try out whatever you want. Please note, that the virtual machine gets reset to \"clean and empty state\" on every update, so once you found a good cron-job, I can persist it on the VM snapshot.\n\nDone - I only did two things: sudo touch /etc/crontab to enable cron (apparently on OSX cron doesn't do anything unless this file exists, and it doesn't exist until you create it); and added a crontab for the jenkins user via crontab -e - here's the result (via crontab -l):\n\n\n# Stolen from FreeBSD's /etc/rc.d/initrandom to unblock /dev/random\n* * * * * ( ps -faxww ; /usr/sbin/sysctl -a ; date ; df -ib ; ps -faxww ; cat /bin/ls ) | dd of=/dev/random bs=8k 2>/dev/null\n\n\n\nI re-enabled SSL on TestCloudSchemaless, and I'll monitor Jenkins to see if it starts failing.  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14108495",
            "date": "2014-08-24T19:01:07+0000",
            "content": "I re-enabled SSL on TestCloudSchemaless, and I'll monitor Jenkins to see if it starts failing.\n\nIt's definitely started failing.\n\nAFAICT, the experiment to feed the entropy pool using a regularly-run cron job to write to /dev/random has failed: TestCloudSchemaless fails regularly on the two VMs I set up the cron job (ASF FreeBSD and Policeman OS X).\n\nI'll go disable SSL for this test now. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14108498",
            "date": "2014-08-24T19:12:28+0000",
            "content": "Commit 1620176 from Use account \"steve_rowe\" instead in branch 'dev/trunk'\n[ https://svn.apache.org/r1620176 ]\n\nSOLR-5776: suppress ssl for this test "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14108501",
            "date": "2014-08-24T19:14:09+0000",
            "content": "Commit 1620177 from Use account \"steve_rowe\" instead in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1620177 ]\n\nSOLR-5776: suppress ssl for this test (merged trunk r1620176) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14108507",
            "date": "2014-08-24T19:37:48+0000",
            "content": "AFAICT, the experiment to feed the entropy pool using a regularly-run cron job to write to /dev/random has failed: TestCloudSchemaless fails regularly on the two VMs I set up the cron job (ASF FreeBSD and Policeman OS X).\n\nI think the crons are already disabled:\n\n\tMacOSX was reverted to VM snapshot, so the crontab was disabled\n\tFreeBSD: The user name was changed Hudson -> Jenkins, so I think the crontab got lost, too.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14255177",
            "date": "2014-12-21T14:55:03+0000",
            "content": "Commit 1647147 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1647147 ]\n\nSOLR-5776: Use less SSL in a test run. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14255178",
            "date": "2014-12-21T14:58:06+0000",
            "content": "Commit 1647148 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1647148 ]\n\nSOLR-5776: Use less SSL in a test run. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14942427",
            "date": "2015-10-03T19:45:44+0000",
            "content": "FYI - the above commit seems to have mostly resolved this. We use SSL in tests far less. The root problem remains though. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15269151",
            "date": "2016-05-03T17:31:05+0000",
            "content": "Having spent the past week+ looking into bugs in the SSL test setup, and getting a lot more familiar with the various Java SSL APIs, I started rethinking about this overall issue.  Knowing what i know now, I went back and re-read every comment, and re-reviewed the commits, here's a few things i noticed...\n\n\n\tNullSecureRandom was only ever used in the SSLContext registered with clients ...\n\t\n\t\tJetty instances were configured to use an SslContextFactory using the string \"SHA1PRNG\"\n\t\t\n\t\t\tSHA1PRNG is suppose to be faster then NativePRNG on linux, but (IIUC) still requires true entropy for seeding\n\t\t\tIt is however possible to initialize jetty with an explicit SSLContext object such that it should never even attempt to initialize it's own SecureRandom.  So just like with the client code path, we can provide the explicit (Null)SecureRandom object for jetty to use.\n\t\t\n\t\t\n\t\n\t\n\tNullSecureRandom implemented some methods as No-Op but...\n\t\n\t\tit had no constructor, meaning it implicitly use SecureRandom()\n\t\t\n\t\t\tThis means the Platform default RNG Provider was loaded, and it may have it's own entropy blocking code on init\n\t\t\tif we define our own NullSecureRandom constructor that explicitly calls super(SecureRandomSpi,Provider) we should be able to bypass the loading of the system default (and any init it entails) and use our own NullSecureRandomSpi\n\t\t\n\t\t\n\t\tit overrode setSeed(byte[] seed) but not setSeed(long seed)\n\t\t\n\t\t\tif any caller code (in jetty, or in the JVM) tried using setSeed(long that also could have resulted in using some entropy blocking method in the default (super class) RNG provider\n\t\t\n\t\t\n\t\n\t\n\n\n\nWith this in mind, I set out to see if I could revive the old patch w/improvements, which i'm now attaching.\n\n\nI was never personally able to reproduce any of the \"Tests take so long they crash because of lack of entroy\" type problems that seemd to plague the jetty machines, but I did do some rough timings on my laptop that seem to suggest that this patch definitely reduces the overhead/time of the tests...\n\n\n\n\tw/o patch...\n\nant jar && cd solr/core && ant test -Dtests.seed=DEADBEEF\n...\nTotal time: 33 minutes 15 seconds\n\n\n\tw/ patch...\n\nant jar && cd solr/core && ant test -Dtests.seed=DEADBEEF\n...\nTotal time: 20 minutes 39 seconds\n\n\n\tw/patch + override SSL randomization to always use SSL+clientAuth...\n\n// log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n// return new SSLTestConfig(trySsl, trySslClientAuth);\nlog.info(\"nocommit: forcing SSL on test that does not have @SuppressSSL\");\nreturn new SSLTestConfig(true, true);\n\n\n\nant jar && cd solr/core && ant test -Dtests.seed=DEADBEEF\n...\nTotal time: 34 minutes 39 seconds\n\n\n\n\n\n...admitedly there were two (reproducible) OOMs in that last case (when forcing SSL+clientAuth) that i'm still looking into, but I suspect these may just be be because the responses are very large, and the SSL overhead pushes them over the edge - I've definitely seen the TestDistributedSearch OOM from jenkins not too long ago when it randomly selected SSL+clientAuth...\n\n\n   [junit4] Tests with failures [seed: DEADBEEF]:\n   [junit4]   - org.apache.solr.handler.component.TestDistributedStatsComponentCardinality.test\n   [junit4]   - org.apache.solr.TestDistributedSearch.test\n\n\n\n\n...in any case, this patch definitely seems like it helps in terms of test performance.  Even if we don't want to increase therandomization factors, this sems like it would help. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-15269429",
            "date": "2016-05-03T19:40:24+0000",
            "content": "Nice, thanks for looking into this! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-15269437",
            "date": "2016-05-03T19:42:58+0000",
            "content": "I was never personally able to reproduce any of the \"Tests take so long they crash because of lack of entroy\" type problems that seemd to plague the jetty machines\n\nIt often took me running the tests many times in a row before I started seeing issues locally. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15269742",
            "date": "2016-05-03T22:32:29+0000",
            "content": "Commit 98b0da47ad3ec8c8ecaa8b1a121d3a89c22684a6 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=98b0da4 ]\n\nSOLR-5776: refactor SSLConfig so that SSLTestConfig can provide SSLContexts using a NullSecureRandom to prevent SSL tests from blocking on entropy starved machines\n\n(cherry picked from commit f45bd03ca2cc301dcec4e68c49d961c306d8f434)\n\nConflicts:\n\tsolr/test-framework/src/java/org/apache/solr/util/SSLTestConfig.java "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15269746",
            "date": "2016-05-03T22:32:34+0000",
            "content": "Commit 9677e2c54bbc66283f3f4341a4e1166006069fc3 in lucene-solr's branch refs/heads/master from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9677e2c ]\n\nSOLR-5776: refactor SSLConfig so that SSLTestConfig can provide SSLContexts using a NullSecureRandom to prevent SSL tests from blocking on entropy starved machines "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15269913",
            "date": "2016-05-04T00:25:29+0000",
            "content": "It often took me running the tests many times in a row before I started seeing issues locally.\n\nHmm, ok . well - At this point i'm not even sure what to look for.\n\nFor now my changes are on master & 6x, we should see jenkins jobs start to take significantly less time in total, i'll leave it up to you if you want to start removing any of the @SuppressSSL annotations you added to tests in the past.\n\n\n\nAt some point in the future, after all this soaks, we should consider increasing the odds of using SSL \u2013 perhaps even add a new annotation (or replace @SupressSSL) with a param to help control the odds of using SSL / clientAuth on a per-class basis, ie...\n\n\n  @UseSSL(false) // same as @SupressSSL\n  @UseSSL() //  same as default if no annotation: SolrTestCaseJ4 picks SSL / clientAuth using LuceneTestCase.rarely\n  @UseSSL(ssl=0.75,clientAuth=0.25) // fine control of odds of using ssl & clientauth\n\n\n\n...some tests, like TestSSLRandomization should ideally have much higher odds of using SSL then other tests, and if we had an easy way to say \"these handful of simple cloud tests should use SSL very frequently\" then it wouldn't matter so much if the odds of other really 'expensive' tests only use SSL once in a blue moon. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15269988",
            "date": "2016-05-04T01:37:22+0000",
            "content": "Commit f1ed73de114991758b52a3b10df45ea451dc1c80 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f1ed73d ]\n\nSOLR-5776: javadoc typo\n\n(cherry picked from commit c0a287cb7601d691a33f9f0e155578e1575ab454) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15269989",
            "date": "2016-05-04T01:37:24+0000",
            "content": "Commit c0a287cb7601d691a33f9f0e155578e1575ab454 in lucene-solr's branch refs/heads/master from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c0a287c ]\n\nSOLR-5776: javadoc typo "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15271125",
            "date": "2016-05-04T18:17:40+0000",
            "content": "Note: create a subtask to look into some (apparently solarais specific) failures since NullSecureRandom was committed: SOLR-9068 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15274852",
            "date": "2016-05-06T22:32:52+0000",
            "content": "Commit 7e2f9f506dd3a94c9df0514bf0e22624a8cb0f92 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7e2f9f5 ]\n\nSOLR-9068 / SOLR-5776: Alternate (psuedo random) NullSecureRandom for Constants.SUN_OS\n\n(cherry picked from commit a5586d29b23f7d032e6d8f0cf8758e56b09e0208)\n\nConflicts:\n\tsolr/test-framework/src/java/org/apache/solr/util/SSLTestConfig.java "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15274855",
            "date": "2016-05-06T22:32:55+0000",
            "content": "Commit a5586d29b23f7d032e6d8f0cf8758e56b09e0208 in lucene-solr's branch refs/heads/master from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a5586d2 ]\n\nSOLR-9068 / SOLR-5776: Alternate (psuedo random) NullSecureRandom for Constants.SUN_OS "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15275112",
            "date": "2016-05-07T05:58:00+0000",
            "content": "Commit 7144984e164e10a6ba2a7c89ffa748af1310cc50 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7144984 ]\n\nSOLR-9068 / SOLR-5776: replace NullSecureRandom w/ NotSecurePsuedoRandom\n\n(cherry picked from commit ac0e73a521a66fc37638e884ab386b0173f79b0f) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15275114",
            "date": "2016-05-07T05:58:03+0000",
            "content": "Commit ac0e73a521a66fc37638e884ab386b0173f79b0f in lucene-solr's branch refs/heads/master from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ac0e73a ]\n\nSOLR-9068 / SOLR-5776: replace NullSecureRandom w/ NotSecurePsuedoRandom "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15295205",
            "date": "2016-05-21T19:07:44+0000",
            "content": "Commit a81e3cf04692bf372edf098bbead17c315a9a755 in lucene-solr's branch refs/heads/branch_6_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a81e3cf ]\n\nSOLR-5776: refactor SSLConfig so that SSLTestConfig can provide SSLContexts using a NullSecureRandom to prevent SSL tests from blocking on entropy starved machines\n\n(cherry picked from commit f45bd03ca2cc301dcec4e68c49d961c306d8f434)\n\nConflicts:\n\tsolr/test-framework/src/java/org/apache/solr/util/SSLTestConfig.java "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15295206",
            "date": "2016-05-21T19:07:45+0000",
            "content": "Commit afbb0f5d08ec998c18903f84ac297f2ed7fd561b in lucene-solr's branch refs/heads/branch_6_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=afbb0f5 ]\n\nSOLR-5776: javadoc typo\n\n(cherry picked from commit c0a287cb7601d691a33f9f0e155578e1575ab454) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15295208",
            "date": "2016-05-21T19:07:48+0000",
            "content": "Commit d866ae79db42c28c99aa7efd58848418b9d2e6a6 in lucene-solr's branch refs/heads/branch_6_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d866ae7 ]\n\nSOLR-9068 / SOLR-5776: Alternate (psuedo random) NullSecureRandom for Constants.SUN_OS\n\n(cherry picked from commit a5586d29b23f7d032e6d8f0cf8758e56b09e0208)\n\nConflicts:\n\tsolr/test-framework/src/java/org/apache/solr/util/SSLTestConfig.java "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15295210",
            "date": "2016-05-21T19:07:50+0000",
            "content": "Commit fb9b7dcfbdb1ecf57cb0dfc3d2d722a96b471874 in lucene-solr's branch refs/heads/branch_6_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fb9b7dc ]\n\nSOLR-9068 / SOLR-5776: replace NullSecureRandom w/ NotSecurePsuedoRandom\n\n(cherry picked from commit ac0e73a521a66fc37638e884ab386b0173f79b0f) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15314583",
            "date": "2016-06-03T18:43:01+0000",
            "content": "At some point in the future, after all this soaks, we should consider increasing the odds of using SSL \u2013 perhaps even add a new annotation (or replace @SupressSSL) with a param to help control the odds of using SSL / clientAuth on a per-class basis, ie...\n\nI guess i forgot to mention it here, but that idea was spun out into SOLR-9107 which has landed on master & branch_6x.\n\n\n\nFWIW: I'm not sure what else, if anything, should be done to consider this issue \"resolved\"\n\nThere are a bunch of tests still annotated with @SuppressSSL pointed back at this issue from before we started using the new secure random instance \u2013 but i don't know if they should all be removed, or if they may have other problems.  I feel like that's a question really best left to the people who put those annotations on those tests?\n\npersonally: i'm setting this issue aside and not planning on working on any more SSL related stuff anytime soon. "
        },
        {
            "author": "Mihaly Toth",
            "id": "comment-15935901",
            "date": "2017-03-22T08:12:40+0000",
            "content": "I could not resist the temptation to play around this topic. \n\nAccording to my experiments setting java.security.egd to file:/dev/./urandom does have an effect on the algorithm and on the blocking nature of SecureRandom. I spin off  a new subtask for more focused trackability. (created: SOLR-10338) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16332862",
            "date": "2018-01-19T20:20:36+0000",
            "content": "FWIW: I'm not sure what else, if anything, should be done to consider this issue \"resolved\"\n\nResolving for now. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16664797",
            "date": "2018-10-26T07:36:46+0000",
            "content": "If this is fixed, we should be able to remove the annotations\n\n@SupressSSL (bugUrl = \"https://issues.apache.org/jira/browse/SOLR-5776\")\n\n\nfrom a lot of test classes? "
        }
    ]
}