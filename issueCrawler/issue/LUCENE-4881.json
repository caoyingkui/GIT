{
    "id": "LUCENE-4881",
    "title": "Add a set iterator to SentinelIntSet",
    "details": {
        "components": [],
        "fix_versions": [
            "4.3"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I'm working on code that needs a hash based int Set.  It will need to iterate over the values, but SentinalIntSet doesn't have this utility feature.  It should be pretty easy to add.\n\nFYI this is an out-growth of a question I posed to the dev list, examining 3 different int hash sets out there: SentinalIntSet, IntHashSet (in Lucene facet module) and the 3rd party IntOpenHashSet (HPPC) \u2013 see http://lucene.472066.n3.nabble.com/IntHashSet-SentinelIntSet-SortedIntDocSet-td4037516.html  I decided to go for SentinalIntSet because it's already in Lucene-core, adding the method I need should be easy, and it has a nice lean implementation.",
    "attachments": {
        "LUCENE-4881_SentinalIntSet_int_iterator.patch": "https://issues.apache.org/jira/secure/attachment/12576023/LUCENE-4881_SentinalIntSet_int_iterator.patch",
        "SentinelIntSet_docs.patch": "https://issues.apache.org/jira/secure/attachment/12576236/SentinelIntSet_docs.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-29T05:23:03+0000",
            "content": "Attached a patch that adds an inner class IntIterator that is consistent with the contract of a java.util.Iterator but next() returns a primitive int.  I tested basic expected usage.\n\nI figured being close to a standard iterator would be more familiar/friendly, although if it worked similar to DocIdSetIterator it would be faster since the caller would check for the sentinal value instead of calling hasNext() (which wouldn't exist). ",
            "author": "David Smiley",
            "id": "comment-13617088"
        },
        {
            "date": "2013-03-29T05:29:20+0000",
            "content": "I forgot to make the methods public, which I'll fix when it gets committed. ",
            "author": "David Smiley",
            "id": "comment-13617091"
        },
        {
            "date": "2013-03-29T10:42:31+0000",
            "content": "I don't think we need to mimic java's Iterator?  Ie, it's fine to have only next()...\n\nAlso, the iterator is wrong if a rehash happens right?  Can you add to the javadocs that the set should not be modified while the iterator is in use, except using the iterator's remove method (like Java's HashMap)? ",
            "author": "Michael McCandless",
            "id": "comment-13617240"
        },
        {
            "date": "2013-03-29T13:06:40+0000",
            "content": "Mike: sounds good.\n\nBut you know what?  Iteration by the client code on this data structure is actually so darned easy; maybe this set iterator isn't really needed after all, or could be supplied with a comment so it's clear how to do it.\n\nSentinalIntSet set = ...\nfor (int v : set.keys) {\n  if (v == set.emptyVal)\n    continue;\n  //use v...\n}\n\n\n\npiece-o-cake ",
            "author": "David Smiley",
            "id": "comment-13617319"
        },
        {
            "date": "2013-03-30T13:28:13+0000",
            "content": "maybe this set iterator isn't really needed after all\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-13618074"
        },
        {
            "date": "2013-03-30T15:36:45+0000",
            "content": "So instead of adding to the API I decided to enhance the documentation to make it more clear how to use this class.  (attached)\n\nOf note I added a warning of the potential unsuitability of the lack of hashing of the key. ",
            "author": "David Smiley",
            "id": "comment-13618103"
        },
        {
            "date": "2013-04-02T15:10:06+0000",
            "content": "I committed better javadocs, including sample code to iterate the values.\n\nClosing issue as won't fix (for now). If at some point we want an iterator, the patch is here and it can be re-considered. ",
            "author": "David Smiley",
            "id": "comment-13619909"
        },
        {
            "date": "2013-05-10T10:32:56+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653770"
        }
    ]
}