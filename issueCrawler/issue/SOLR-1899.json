{
    "id": "SOLR-1899",
    "title": "dates prior to 1000AD are not formatted properly in responses",
    "details": {
        "affect_versions": "1.1.0,                                            1.2,                                            1.3,                                            1.4",
        "status": "Closed",
        "fix_versions": [
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As noted on the mailing list, if a document is added to solr with a date field such as \"0001-01-01T00:00:00Z\" then when that document is returned by a search the year will be improperly formated as \"1-01-01T00:00:00Z\"",
    "attachments": {
        "SOLR-1899.patch": "https://issues.apache.org/jira/secure/attachment/12478018/SOLR-1899.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12862960",
            "date": "2010-05-01T01:28:19+0000",
            "content": "I believe the problem is in both XMLWriter.writeDate and JSONWriter.writeDate ... those methods seem to be cut/psate and should also be refactored.\n\nin general they should probably just be reusing something from DateField.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12971835",
            "date": "2010-12-15T21:02:41+0000",
            "content": "A question on the solr-user mailing list from Matthias Agethle also points out a problem with negative years \u2013 this also seems to be because of the GregorianCalendar usage in those two classes when formatting dates (they aren't checking GregorianCalendar.ERA)\n\nbefore resolving this issue, whatever fix is put in place should make sure that tests for negative years is included and if that problem is unrelated, a new bug should be filed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13027989",
            "date": "2011-05-03T02:00:33+0000",
            "content": "his came up again on the mailing list today, so i started looking into it.\n\nthe previously mentioned cut/paste code has since been refactored to TestResponseWriter.\n\nthis patch eliminates it completely in place of using the existing thread safe methods in DateField (which this patch makes public/static so they can be used by other classes besides just subclasses)\n\nthis patch includes tests demonstrating that a parse+format roundtrip of years between 0001 and 1000 works fine \u2013 but there is still a problem with negative years (something sublte in SimpleDateFormat that i don't understand yet)\n\nWhile working on this, i also noticed a class i was previously unfamiliar with: o.a.s.c.u.DateUtils ... which seems to have yet another cut/paste copy of the broken date formatting code, as well as cut/paste copies of the thread save parsing/formatting code from DateField (except at first glance the DateUtils version is even more broken and doesn't deal with miliseconds properly) ... need to research WTF this is, when it was added (did we release it already?), and if anyone is calling it.\n\nit should be trivial to make these broken DateUtil parse/format into deprecated proxies to their counterparts in DateField ... or vice versa if people think it makes more sense to have them in a separate util class (although that may complicate SOLR-2357 even further) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13030272",
            "date": "2011-05-07T04:32:49+0000",
            "content": "Status update.\n\nAfter doing some more research: \n\n\n\tit seems pretty clear that SimpleDateFormat is fundamentally incapable of formatting negative years (other then using an Era string).\n\n\n\n\n\tthe parseDateTime/printDateTime methods in javax.xml.bind.DatatypeConverter should be the perfect solution \u2013 they specifically exist for dealing with XSD dates.  But in testing they seem to be completely broken as far as the milliseconds and the requirement that \"The fractional second string, if present, must not end in '0';\"\n\n\n\n\n\tbased on all the recommendations I found online, i started investigated JodaTime.  It has an ISODateTimeFormat factory class that looked promising, but it doesn't seem to support any implementations that are designed for dealing with the canonical form, nor did i have much look using the JodaTime DateTimeFormatterBuilder API to construct one.  details are here: https://sourceforge.net/projects/joda-time/forums/forum/337835/topic/4519752\n\n\n\nAt this point, barring some really awesome insights from anyone else or the JodaTime forum, I'm thinking that (as much as i hate it) hand rolled date parsing/formatting code may be the way to go once and for all.\n\nugh.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13106613",
            "date": "2011-09-16T17:26:14+0000",
            "content": "as Nicklas pointed out on the solr-user mailing list, there are really 3 distinct problems here, and there is no reason to get bogged down in a trying to find one hollistic solution for all of them when we can make incremental progress on fixing them individually.\n\nso i've spun this off into 3 sub issues. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835701",
            "date": "2013-11-30T13:21:06+0000",
            "content": "2013 Old JIRA cleanup "
        },
        {
            "author": "David Smiley",
            "id": "comment-15218617",
            "date": "2016-03-30T19:03:52+0000",
            "content": "Closing; fixed by SOLR-8904 (using Java 8 time APIs).  There are tests now for these dates. "
        }
    ]
}