{
    "id": "LUCENE-748",
    "title": "Exception during IndexWriter.close() prevents release of the write.lock",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "1.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "After encountering a case of index corruption - see http://issues.apache.org/jira/browse/LUCENE-140 - when the close() method encounters an exception in the flushRamSegments() method, the index write.lock is not released (ie. it is not really closed).\n\nThe writelock is only released when the IndexWriter is GC'd and finalize() is called.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2006-12-18T17:53:06+0000",
            "content": "\nI think this (not releasing write lock on hitting an exception) is\nactually by design.  It's because the writer still has pending changes\nto commit to disk.\n\nAnd, with the fix for LUCENE-702 (just committed), if we hit an\nexception during IndexWriter.close(), the IndexWriter is left in a\nconsistent state (this is not quite the case pre-2.1).\n\nMeaning, if you caught that exception, fixed the root cause (say freed\nup disk space), and called close again (successfully), you would not\nhave lost any documents, and the write lock will be released.\n\nI can also see that if we did release the write lock on exception,\nthis could dangerously / easily mask the fact that there was an\nexception.  Ie, if the IOException is caught and ignored (or writes a\nmessage but nobody sees it), and the write lock was released, then you\ncould go for quite a while before discovering eg that new docs weren't\nvisible in the index.  Whereas, keeping the write lock held on\nexception will cause much faster discovery of the problem (eg when the\nnext writer tries to instantiate).\n\nI think this is the right exception semantics to aim for?  Ie if the\nclose did not succeed we should not release the write lock (because we\nstill have pending changes).\n\nThen, if you want to force releasing of the write lock, you can still\ndo something like this:\n\n  try \n{\n    writer.close();\n  }\n finally {\n    if (IndexReader.isLocked(directory)) \n{\n      IndexReader.unlock(directory);\n    }\n  }\n ",
            "author": "Michael McCandless",
            "id": "comment-12459419"
        },
        {
            "date": "2006-12-18T22:21:52+0000",
            "content": "given the changes made in LUCENE-702, i concur with your assesment Michael: keeping the lock open so that the caller can attempt to deal with the problem then retry makes sense.\n\neven if we decided that the consistent state of the IndexWriter isn't an invarient that the user can rely on, asking users to forcably unlock in the event of an exception on close seems like a more reasonable expectation then to forcably unlock for them automatically. ",
            "author": "Hoss Man",
            "id": "comment-12459483"
        },
        {
            "date": "2006-12-18T22:57:09+0000",
            "content": "I guess, particularly in light of LUCENE-702 that this behavior is OK - and the IndexReader.unlock(dir) is a good suggestion. My real problem was that the finalize() method does eventually remove the write lock. \n\nFor me then the suggestion would be to document the exceptional behavior of the close() method (ie. it means that changes haven't been written and the write lock is still held) and link to the IndexReader.unlock(Directory) method. ",
            "author": "Jed Wesley-Smith",
            "id": "comment-12459489"
        },
        {
            "date": "2006-12-18T23:00:08+0000",
            "content": "OK I will update the javadoc for IndexWriter.close to make this clear.  Thanks! ",
            "author": "Michael McCandless",
            "id": "comment-12459491"
        },
        {
            "date": "2006-12-19T00:36:19+0000",
            "content": "Awesome, thanks! ",
            "author": "Jed Wesley-Smith",
            "id": "comment-12459502"
        },
        {
            "date": "2006-12-19T11:34:52+0000",
            "content": "OK I just commited the fix to the javadoc.  Thanks Jed! ",
            "author": "Michael McCandless",
            "id": "comment-12459602"
        },
        {
            "date": "2007-02-27T18:10:36+0000",
            "content": "Closing all issues that were resolved for 2.1. ",
            "author": "Michael McCandless",
            "id": "comment-12476276"
        }
    ]
}