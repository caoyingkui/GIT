{
    "id": "LUCENE-3292",
    "title": "IOContext should be part of the SegmentReader cache key",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Once IOContext (LUCENE-2793) is landed the IOContext should be part of the key used to cache that reader in the pool",
    "attachments": {
        "LUCENE-3292.patch": "https://issues.apache.org/jira/secure/attachment/12485790/LUCENE-3292.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-08T14:30:43+0000",
            "content": "I am not quite sure on how to start with this. \n\nIn SegmentReader#get something like this is required :\n\n    if (readOnly) {\n      assert context != IOContext.DEFAULT;\n      //assert context.context == IOContext.Context.READ;\n      // Using the second assert checks for both READ and READONCE\n    }\n\n\n\nAnd what do I need to do in IndexWriter.ReaderPool#get so that context should be part of the key used to cache that reader in the pool? ",
            "author": "Varun Thacker",
            "id": "comment-13061982"
        },
        {
            "date": "2011-07-08T19:11:32+0000",
            "content": "Right now the ReaderPool.readerMap is a Map<SegmentInfo,SegmentReader>.\n\nI think we just need to change that to Map<SegmentInfoAndIOContext,SegmentReader> instead, where SegmentInfoAndIOContext is a new struct holding SegmentInfo and IOContext.Context and implementing hashCode/equals by delegating to the SegmentInfo and IOContext.Context. ",
            "author": "Michael McCandless",
            "id": "comment-13062119"
        },
        {
            "date": "2011-07-08T22:13:23+0000",
            "content": "Initial patch. There might have been a few methods inside ReaderPool where I have added a IOContext which might not be correct. ",
            "author": "Varun Thacker",
            "id": "comment-13062226"
        },
        {
            "date": "2011-07-09T16:37:06+0000",
            "content": "I am still not sure on 2 things:\n\nIn SegmentReader#get the assert statement. \n\nIn IW.ReaderPool.SegmentCacheKey the equals() method - Does it need to call .equals on the SegmetnInfo and context? Since we are just including IOContext.Context only won't this be wrong ? ",
            "author": "Varun Thacker",
            "id": "comment-13062581"
        },
        {
            "date": "2011-07-10T21:22:45+0000",
            "content": "SegmentCacheKey.equals needs { } around the single-statement ifs.\n\nMake sure you remove the TODO in ReaderPool.get since this issue is fixing it.\n\n\nI am still not sure on 2 things:\n\nIn SegmentReader#get the assert statement.\nHmm... why are we adding this assert again?\n\nIn IW.ReaderPool.SegmentCacheKey the equals() method - Does it need to call .equals on the SegmetnInfo and context? Since we are just including IOContext.Context only won't this be wrong ?\n\nYes, it should && the .equals of its two member.  It's not wrong \u2013 we only must ensure that the SegmentReader for merging is shared during merging, and for searching during searching; we don't want t open a new SegmentReader for every new IOContext.\n\nActually: why do we have IOContext.equals/hashCode...?  Who relies on these methods today?\n\nReaderPool.commit should pass IOContext.READ.\n\nI think we should add a ReaderPool.getIfExists that does not take an IOContext and tries both READ and MERGE and returns the SegmentReader if it's found; likewise for release. ",
            "author": "Michael McCandless",
            "id": "comment-13062809"
        },
        {
            "date": "2011-07-10T23:24:52+0000",
            "content": "Made the changes suggested. ",
            "author": "Varun Thacker",
            "id": "comment-13062828"
        },
        {
            "date": "2011-07-12T08:48:18+0000",
            "content": "Hey varun, patch looks good here are some comments:\n\n\n\tSegmentCacheKey should only have final members\n\tSegmentCacheKey should be final and the ctor visibility should be package private\n\tyou can omit \"this\" and \"== true\" in SegmentCacheKey#equals and simply return the comparison result\n\tin IndexWriter#drop(SegmentInfo, IOContext) you can simply call if ((sr = readerMap.remove(new SegmentCacheKey(info, context))) != null) that way you only do the lookup only once instead of getting the instance first and then look it up a second time to remove it. this applies to more places in that method as far as I can see.\n\tI try to understand what you are doing in  getIfExists(SegmentInfo info) it seems you are probing if there is a reader for this segment with two different IOContext. Maybe it would make more sense to pass in the context here too OR don't put the IOContext in the cache key and hold two distinct maps one for read one for merge? The try catch here doesn't make sense to me at all.\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-13063775"
        },
        {
            "date": "2011-07-15T19:31:15+0000",
            "content": "I made changes to it as suggested. I get some assert errors and a few others and will work on it now. ",
            "author": "Varun Thacker",
            "id": "comment-13066151"
        },
        {
            "date": "2011-07-18T10:55:56+0000",
            "content": "Attached patch, passing all tests. I think it's ready to commit.\n\nThis was trickier than I thought, because we had to take care to\nensure the deletions are applied only against readers pulled in a READ\ncontext, and then pull the latest deletions from the READ context when\nmerging.  So I started with Varun's patch and iterated from there...\n\nAlso, there was a great simplification that fell out of this: we no\nlonger need that scary SR.loadTermsIndex method to load a terms index\nafter SR had already been created.  We only needed this for the case\nwhere an SR opened for merging was then shared with an NRT reader, but\nthis is no longer possible. ",
            "author": "Michael McCandless",
            "id": "comment-13066886"
        },
        {
            "date": "2011-07-20T20:54:44+0000",
            "content": "Thanks Varun! ",
            "author": "Michael McCandless",
            "id": "comment-13068630"
        }
    ]
}