{
    "id": "SOLR-6243",
    "title": "eDisMax hidden change - no longer applies disjunction max to \"pf\" query",
    "details": {
        "affect_versions": "4.8.1",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "At some point after Solr 3.5 a bug was introduced into eDisMax (Extended DisMax Query parser) that is still there as of Solr 4.8.1.  The \"pf\" part of the query (full phrase query) no longer is applied as a disjunction max query - instead all the matching field scores are simply added to the total score.  I.e. they are just added together as opposed to the max being taken + tie-breaker times the sum of the other match scores.\n\nThis changes the scores and the rankings significantly.  When upgrading from Solr 3.5, one of our relevance test measures showed target results dropping over a full rank due to this bug.  On key result went from being at rank 7 to past rank 40.  I do not see any easy workaround for this.\n\nThe following is a comparison between query results for Solr 3.5 and Solr 4.8, for one query, showing the \"pf\" parts of the query and scores.\n\nTurning debug query on, the results are the following,  They clearly show that that max is used with the tiebreaker in 3.5 but not 4.8 for pf: \n\nquery (3.5): \nboost(+(((inlink_text:edg^1.2 | body:edg^0.5 | title:edg^1.2 | meta_description:edg^0.5 | url_path:edg^1.2 | file_name:edg^1.2 | primary_header:edg^1.2 | secondary_header:edg^0.5)~0.17 (inlink_text:detect^1.2 | body:detect^0.5 | title:detect^1.2 | meta_description:detect^0.5 | url_path:detect^1.2 | file_name:detect^1.2 | primary_header:detect^1.2 | secondary_header:detect^0.5)~0.17)~2) (inlink_text:\"edg detect\"~100^1.2 | body:\"edg detect\"~100^0.5 | title:\"edg detect\"~100^1.2 | meta_description:\"edg detect\"~100^0.5 | url_path:\"edg detect\"~100^1.2 | file_name:\"edg detect\"~100^1.2 | primary_header:\"edg detect\"~100^1.2 | secondary_header:\"edg detect\"~100^0.5)~0.17,product(float(hier_score),pow(float(link_score),const(0.25)))) \n\nI.e., the \"pf\" part of the query has the following disjunction max form:\n(inlink_text:\"edg detect\"~100^1.2 | body:\"edg detect\"~100^0.5 | ... | secondary_header:\"edg detect\"~100^0.5)~0.17\n\npf results for one (3.5): \n<lst>\n<bool name=\"match\">true</bool>\n<float name=\"value\">1.5689207</float>\n<str name=\"description\">max plus 0.17 times others of:</str>\n<arr name=\"details\">\n<lst>\n<bool name=\"match\">true</bool>\n<float name=\"value\">1.5596248</float>\n<str name=\"description\">...</str>\n<arr name=\"details\">...</arr>\n</lst>\n<lst>\n<bool name=\"match\">true</bool>\n<float name=\"value\">0.054681662</float>\n<str name=\"description\">...</str>\n<arr name=\"details\">...</arr>\n</lst>\n</arr>\n\n\nHowever, in 4.8, \"max\" and the tie-breaker are nowhere to be seen for the pf part of the query: \nquery (4.8): \nboost(+(((inlink_text:edg^1.2 | body:edg^0.5 | title:edg^1.2 | meta_description:edg^0.5 | url_path:edg^1.2 | file_name:edg^1.2 | primary_header:edg^1.2 | secondary_header:edg^0.5)~0.17 (inlink_text:detect^1.2 | body:detect^0.5 | title:detect^1.2 | meta_description:detect^0.5 | url_path:detect^1.2 | file_name:detect^1.2 | primary_header:detect^1.2 | secondary_header:detect^0.5)~0.17)~2) body:\"edg detect\"~100^0.5 title:\"edg detect\"~100^1.2 url_path:\"edg detect\"~100^1.2 file_name:\"edg detect\"~100^1.2 primary_header:\"edg detect\"~100^1.2 secondary_header:\"edg detect\"~100^0.5 meta_description:\"edg detect\"~100^0.5 inlink_text:\"edg detect\"~100^1.2,product(float(hier_score),pow(float(link_score),const(0.25)))) \n\nI.e., the \"pf\" part of the query does NOT have the disjunction max form:\nbody:\"edg detect\"~100^0.5 title:\"edg detect\"~100^1.2 ... inlink_text:\"edg detect\"~100^1.2,\n\npf results for one (4.8) (no max, both values are just listed under the \"sum of\" element: \n<lst>\n<bool name=\"match\">true</bool>\n<float name=\"value\">0.03554287</float>\n<str name=\"description\">...</str>\n<arr name=\"details\">...</arr>\n</lst>\n<lst>\n<bool name=\"match\">true</bool>\n<float name=\"value\">1.0933692</float>\n<str name=\"description\">...</str>\n<arr name=\"details\">...</arr>\n</lst>\n\n\n\nThe Solr 4 handler used is the following - it's also the same as the 3.5 one: \n <requestHandler class=\"solr.SearchHandler\" name=\"/sitewide\">\n\n     <lst name=\"defaults\">\n       <str name=\"defType\">edismax</str>\n       <str name=\"echoParams\">explicit</str>\n        <float name=\"tie\">0.17</float>\n         <str name=\"qf\">\n           body^0.5 title^1.2 url_path^1.2 file_name^1.2 primary_header^1.2 secondary_header^0.5 meta_description^0.5 inlink_text^1.2 \n         </str>\n         <str name=\"pf\">\n           body^0.5 title^1.2 url_path^1.2 file_name^1.2 primary_header^1.2 secondary_header^0.5 meta_description^0.5 inlink_text^1.2 \n         </str>\n         <int name=\"ps\">100</int>\n     <str name=\"boost\">\n       hier_score \n     </str>\n     <str name=\"boost\">\n       pow(link_score,0.25) \n     </str>\n     </lst>\n     <lst name=\"spellchecker\">\n\n      <str name=\"spellcheck.onlyMorePopular\">false</str>\n\n      <str name=\"spellcheck.extendedResults\">true</str>\n\n      <str name=\"spellcheck.count\">3</str>\n      <str name=\"buildOnCommit\">true</str>\n     </lst>\n     <arr name=\"last-components\">\n       <str>spellcheck</str>\n     </arr>\n  </requestHandler>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Brian",
            "id": "comment-14060983",
            "date": "2014-07-14T18:24:45+0000",
            "content": "Looking at the 3.5 vs. 4.8.1 src:\n\nOriginally the code was like this:\n\n        // full phrase...\n        addShingledPhraseQueries(query, normalClauses, phraseFields, 0, \n                                 tiebreaker, pslop);\n        // shingles...\n        addShingledPhraseQueries(query, normalClauses, phraseFields2, 2,  \n                                 tiebreaker, pslop);\n        addShingledPhraseQueries(query, normalClauses, phraseFields3, 3,\n                                 tiebreaker, pslop);\n\n-I.e., the whole set of phrases fields was passed to addShingledPhraseQueries.\n\nIn 4.8.1, it was changed so that all individual phrase fields are returned and added (ExtendedDismaxConfiguration builds this by calling \"addAll\" for each pf list - so all the fields are included in this.  Now it calls \"addShingledPhraseQueries\" individually for each field, instead of the set of fields - which is why it is built incorrectly:\n\nList<FieldParams> allPhraseFields = config.getAllPhraseFields();  //(gets ALL INDIVIDUAL fields... \n...\n//now each individual field is added - this is incorrect\n for (FieldParams phraseField: allPhraseFields) \n{\n        Map<String,Float> pf = new HashMap<>(1);\n        pf.put(phraseField.getField(),phraseField.getBoost());\n        addShingledPhraseQueries(query, normalClauses, pf,   \n            phraseField.getWordGrams(),config.tiebreaker, phraseField.getSlop());\n      }\n\nProbably the mistake is that  config.getAllPhraseFields(); should return a list of lists - the fields for each of pf, pf2, and pf3, instead, of a list of all the fields included in those.  Perhaps when the original code was re-factored and split into separate classes this functionality was misinterpreted.  I'm surprised this has gone unnoticed for so long - no one else noticed incorrect queries?  Also this code is very ugly and difficult to read  - what happened to clean code and code reviews? "
        },
        {
            "author": "Brian",
            "id": "comment-14114274",
            "date": "2014-08-28T20:17:48+0000",
            "content": "Started fixing this when I saw the latest 4.X source was already changed to resolve the issue, "
        }
    ]
}