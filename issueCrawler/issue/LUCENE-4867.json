{
    "id": "LUCENE-4867",
    "title": "SorterTemplate.merge is slow",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "SorterTemplate.mergeSort/timSort can be very slow. For example, I ran a quick benchmark that sorts an Integer[] array of 50M elements, and mergeSort was almost 4x slower than quickSort (~12.8s for quickSort, ~46.5s for mergeSort). This is even worse when the cost of a swap is higher (e.g. parallel arrays).\n\nThis is due to SorterTemplate.merge. I first feared that this method might not be linear, but it is, so the slowness is due to the fact that this method needs to swap lots of values in order not to require extra memory. Could we make it faster?\n\nFor reference, I hacked a SorterTemplate instance to use the usual merge routine (that requires n/2 elements in memory), and it was much faster: ~17s on average, so there is room for improvement.",
    "attachments": {
        "SortBench.java": "https://issues.apache.org/jira/secure/attachment/12574794/SortBench.java",
        "LUCENE-4867.patch": "https://issues.apache.org/jira/secure/attachment/12574800/LUCENE-4867.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-21T13:21:20+0000",
            "content": "Here is the program I used for testing. ",
            "author": "Adrien Grand",
            "id": "comment-13608911"
        },
        {
            "date": "2013-03-21T13:35:24+0000",
            "content": "The main problem is: The universal possinility to use SorterTemplate is the fact that you only have to define the swap operation and nothing more. If you need an additional array to buffer the merging, the API gets much more complex, as you would need to define the whole merge process for your \"custom buffer implementation\", the easy \"compare-and-swap-with-pivot\" would be gone.\n\nSorterTemplate is something in the middle: Its not using the fastest merge, but it is in-place and has a very limited set of operations to implement. If you want a faster algorithm, you have to move a way from in-place. All the fast merge/timsort/quicksort algoth are working with arrays only and SorterTemplate wants to work around this in a simple generic way. ",
            "author": "Uwe Schindler",
            "id": "comment-13608923"
        },
        {
            "date": "2013-03-21T14:30:52+0000",
            "content": "If you want a faster algorithm, you have to move away from in-place.\n\nIn that case, could we make SorterTemplate.merge overridable (protected) so that custom templates can use extra memory to merge? The attached patch modifies ArrayUtil to show how it could be used to implement a faster merge, which makes mergeSort more than 2x faster (~21s on average on my 50M array) although it only requires 1% of additional memory. What do you think? ",
            "author": "Adrien Grand",
            "id": "comment-13608981"
        },
        {
            "date": "2013-03-21T15:01:46+0000",
            "content": "Making the merge method protected would offer the possibility to speed up merging. If you dont implement a custom merge, the code works only with swap and/or setPivot.\n\nWhy do we need a seperate getSorter() in ArrayUtils? Could the default SorterTemplate used also for quicksort not simply provide the faster merge? Or did you implement it separate to not allocate the extra array, if only quicksort is called?\n\nOtherwise I am fine with doing it that way, if we do not enforce users to implement the merge code. ",
            "author": "Uwe Schindler",
            "id": "comment-13609011"
        },
        {
            "date": "2013-03-21T15:04:31+0000",
            "content": "Or did you implement it separate to not allocate the extra array, if only quicksort is called?\n\nExactly. ",
            "author": "Adrien Grand",
            "id": "comment-13609014"
        },
        {
            "date": "2013-03-21T15:13:14+0000",
            "content": "Otherwise I am fine with doing it that way, if we do not enforce users to implement the merge code.\n\nOK. I'll update the patch to port the same behavior to CollectionUtil. ",
            "author": "Adrien Grand",
            "id": "comment-13609024"
        },
        {
            "date": "2013-03-21T16:01:57+0000",
            "content": "Patch that makes SorterTemplate.merge protected and makes ArrayUtil and CollectionUtil use specialized SorterTemplate instances that use up to 1% extra memory for faster merge-based sorts.\n\nI'll open a separate issue to use the same optimizations for the sorter API's timsorts. ",
            "author": "Adrien Grand",
            "id": "comment-13609061"
        },
        {
            "date": "2013-03-22T16:21:06+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1459853\n\nLUCENE-4867: Allow custom SorterTemplates to override merge (merged from r1459851).\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13610608"
        },
        {
            "date": "2013-03-22T16:21:15+0000",
            "content": "[trunk commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1459851\n\nLUCENE-4867: Allow custom SorterTemplates to override merge.\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13610611"
        }
    ]
}