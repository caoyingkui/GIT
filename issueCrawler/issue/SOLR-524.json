{
    "id": "SOLR-524",
    "title": "snappuller has limitation w/r/t/ handling multiple web apps",
    "details": {
        "affect_versions": "1.2",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "replication (scripts)"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "The snappuller has a limitation which makes it hard to use for replicating the indices for multiple webapps.  In particular, by changing:\n\n\n\trsync over files that have changed\nrsync -Wa${verbose}${compress} --delete ${sizeonly} \\\n${stats} rsync://${master_host}:${rsyncd_port}/solr/${name}/ ${data_dir}/${name}-wip\n\n\n\nto: \n\n\n\trsync over files that have changed\nrsync -Wa${verbose}${compress} --delete ${sizeonly} \\\n${stats} rsync://${master_host}:${rsyncd_port}/${rsync_module_path}/${name}/ ${data_dir}/${name}-wip\n\n\n\nand adding an rsync_module_path variable to scripts.conf, plus giving it a default value of \"solr\" before the 'unset' commands at the top of the snappuller script, I've worked around the issue.  Still, it seems better to not hard-code the module name ([solr]) and also to allow some flexibility in the location of the data files under that module.  This is req'd for multiple webapps since they won't share a data folder.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Bill Au",
            "id": "comment-12584150",
            "date": "2008-04-01T14:27:29+0000",
            "content": "In the command line in question:\n\nrsync -Wa${verbose}${compress} --delete ${sizeonly} \\\n${stats} rsync://${master_host}:${rsyncd_port}/solr/${name}/ ${data_dir}/${name}-wip\n\nThe string \"solr\" IS NOT the webapp name.  II is the name used by rsyncd to map to a file system path.\n\nHere is the content of rsyncd.conf, which is generated by rsyncd-start dynamically:\n\nuid = $(whoami)\ngid = $(whoami)\nuse chroot = no\nlist = no\npid file = ${solr_root}/logs/rsyncd.pid\nlog file = ${solr_root}/logs/rsyncd.log\n[solr]\n    path = ${data_dir}\n    comment = Solr\n "
        },
        {
            "author": "Ezra Epstein",
            "id": "comment-12584298",
            "date": "2008-04-01T20:43:05+0000",
            "content": "I see that I didn't explain the issue very well.  The situation is that we have multiple indices, hence, in 1.2, multiple web-apps.  We also have replication, so we need to pull snapshots of the index/data files for each webapp/index.  The snappuller script has no way to do this.  The rsyncd-start script creates a single rsyncd MODULE (not webapp), named \"solr\".  The snappuller script always pulls directly from this modules fixed path - there's no way to extend from that module root in the snappuller script.  Thus: if ${data_dir} is /opt/solr/data snappuller will pull a snapshot from that folder.  But with multiple webapps we'll have:\n\n/opt/solr/webapp1/data\n/opt/solr/webapp2/data\n\nand the current solr scripts seem to let us start rsyncd pointing at one folder or the other, but not both.  So either we can:\n+ start a new instance of rsyncd - though we'd need a different module name since [solr] is taken by the first instance - though, I guess we could have it listen on a different port, which is potentially confusing (like running 2 instances of tomcat just to host 2 webapps)\n+ not use rsynd and just use rsync directly (via ssh)\n+ change rsyncd-start to allow multiple module names: [webapp1], [webapp2], etc - ok, but then its hard to add new webapps/indices\n+ start rsyncd so that the [solr] module points to a root folder, e.g., /opt/solr in the above example, and then allow a variable in snappuller - set via the scripts.conf in the slaves - that specifies the path within this single module.  Thus we have the first path as /solr/webapp1/data and the second path (in the second webapp) as /solr/webapp2/data\n\nMore succinctly, I don't see how to use the scripts to support replication of multiple indices/webapps.  This approach allows a way that seems to scale and work well - with one caveat, the data dirs for the various indices must all be under a common root folder (though that could be \"/\". so it's a minor constraint).  So, if not the above, what is the recommended way to replicate multiple indices? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12584307",
            "date": "2008-04-01T20:59:43+0000",
            "content": "The scripts are currently designed with the assumption that each index (regardless of whether it is from a separate core or a separate webapp) be replicated using a distinct instance of rsyncd (with a distinct port number)\n\nthere are a few advantages to this approach: notably that it's easy to disable replication for a single index while you do maintenance on the master.\n\nThat said: there are are plenty of compelling reasons to simplify and/or add alternate mechanisms for replicating multiple indexes ... but we already have an issue tracking this (SOLR-433) So i'm going to resolve this asa dup.\n\nEzra: please take a look at SOLR-433 and the approaches being taken in that issue. "
        }
    ]
}