{
    "id": "LUCENE-763",
    "title": "LuceneDictionary skips first word in enumeration",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.2"
        ],
        "affect_versions": "2.0.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The current code for LuceneDictionary will always skip the first word of the TermEnum. The reason is that it doesn't initially retrieve TermEnum.term - its first call is to TermEnum.next, which moves it past the first term (line 76).\nTo see this problem cause a failure, add this test to TestSpellChecker:\nsimilar = spellChecker.suggestSimilar(\"eihgt\",2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"eight\");\n\nBecause \"eight\" is the first word in the index, it will fail.",
    "attachments": {
        "TestLuceneDictionary.java": "https://issues.apache.org/jira/secure/attachment/12358605/TestLuceneDictionary.java",
        "LuceneDictionary.java": "https://issues.apache.org/jira/secure/attachment/12358606/LuceneDictionary.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-01-03T19:49:14+0000",
            "content": "I was wondering about something very similar just recently: to call TermEnum.next() or not to call TermEnum.next() to get the first term. However, in my case I use terms() rather than terms( Term ) and there's the rub.\n\nAfter looking through things, there looks to be an inconsistency between the two cases. terms( Term ) seeks such that the new TermEnum object is ready. On the other hand, terms() leaves the enum state \"before\" the first term: you need to call next() first and calling term() earlier will return null.\n\nI've only tried this against SegmentReader#terms(...).\n\nThis difference of behaviour isn't mentioned in the documentation.\n\nIt would seem like it would be nice to have the same behaviour between the two calls but I'm a little worried that half the existing code would break. Should we just document the existing behaviour?\n\nIn that case, the spell checker does just need to get rid of the extra next() call.\n\nWhile investigating, I noticed there are several other issues around the spell checker now, both the functional code and test code. It plays a bit fast and loose with when index readers and writers are opened. Perhaps it used to work, depending on when things got flushed to disk, but it doesn't work for me now under the trunk. ",
            "author": "Steven Parkes",
            "id": "comment-12462042"
        },
        {
            "date": "2007-01-03T21:00:39+0000",
            "content": "Ah, that makes sense. So the one basically behaves like ResultSet - the marker is before the first entry when initialized.  Unfortunately SpellChecker uses the other.   ",
            "author": "Dan Ertman",
            "id": "comment-12462054"
        },
        {
            "date": "2007-05-30T07:28:27+0000",
            "content": "This is a fixed LuceneDictionary. ",
            "author": "Christian Mallwitz",
            "id": "comment-12500049"
        },
        {
            "date": "2007-05-30T07:29:48+0000",
            "content": "This a unit test case for LuceneDictionary making sure it doesn't skip any of the words in the original index. ",
            "author": "Christian Mallwitz",
            "id": "comment-12500050"
        },
        {
            "date": "2007-05-30T07:32:37+0000",
            "content": "I have added a fixed LuceneDictionary.java and a unit test case for it which should go to \n   contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.java\nand\n   contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java\nrespectively.\n\nThis is on top of the current lucene-trunk.\n\nCheers\nChristian ",
            "author": "Christian Mallwitz",
            "id": "comment-12500051"
        },
        {
            "date": "2007-05-30T20:39:06+0000",
            "content": "Thanks for your patch. I think there's a problem with the iterator which might not occur often, but it should be fixed nonetheless: calling next() only has an effect if hasNext() has been called before. You can see that by commenting out \"assertTrue(\"Second element doesn't exist.\", it.hasNext());\" in the test case: the test will then fail, although, to my understanding, hasNext() should have no side effects. Could you change you patch accordingly? ",
            "author": "Daniel Naber",
            "id": "comment-12500230"
        },
        {
            "date": "2007-05-31T10:32:41+0000",
            "content": "New extended unit test case for class LuceneDictionary ",
            "author": "Christian Mallwitz",
            "id": "comment-12500345"
        },
        {
            "date": "2007-05-31T11:03:06+0000",
            "content": "Fixed class LuceneDictionary ",
            "author": "Christian Mallwitz",
            "id": "comment-12500351"
        },
        {
            "date": "2007-05-31T19:14:31+0000",
            "content": "Thanks, patch applied. ",
            "author": "Daniel Naber",
            "id": "comment-12500454"
        },
        {
            "date": "2007-05-31T23:13:58+0000",
            "content": "Can we also update the javadocs to reflect the different semantics between terms() and terms(term)? Here's some possible verbage. (Also tweaks the \"after the given term\" which I think isn't correct?) \n\n\n \nIndex: src/java/org/apache/lucene/index/IndexReader.java\n===================================================================\n--- src/java/org/apache/lucene/index/IndexReader.java   (revision 543284)\n+++ src/java/org/apache/lucene/index/IndexReader.java   (working copy)\n@@ -539,16 +539,21 @@\n     setNorm(doc, field, Similarity.encodeNorm(value));\n   }\n \n-  /** Returns an enumeration of all the terms in the index.\n-   * The enumeration is ordered by Term.compareTo().  Each term\n-   * is greater than all that precede it in the enumeration.\n+  /** Returns an enumeration of all the terms in the index.  The\n+   * enumeration is ordered by Term.compareTo().  Each term is greater\n+   * than all that precede it in the enumeration.  Note that after\n+   * calling {@link #terms()}, {@link TermEnum#next()} must be called\n+   * on the resulting enumeration before calling other methods such as\n+   * {@link TermEnum#term()}.\n    * @throws IOException if there is a low-level IO error\n    */\n   public abstract TermEnum terms() throws IOException;\n \n-  /** Returns an enumeration of all terms after a given term.\n-   * The enumeration is ordered by Term.compareTo().  Each term\n-   * is greater than all that precede it in the enumeration.\n+  /** Returns an enumeration of all terms starting at a given term. If\n+   * the given term does not exist, the enumeration is positioned a the\n+   * first term greater than the supplied therm.  The enumeration is\n+   * ordered by Term.compareTo().  Each term is greater than all that\n+   * precede it in the enumeration.\n    * @throws IOException if there is a low-level IO error\n    */\n   public abstract TermEnum terms(Term t) throws IOException;\n\n  ",
            "author": "Steven Parkes",
            "id": "comment-12500521"
        },
        {
            "date": "2007-06-01T21:20:06+0000",
            "content": "Thanks, Steven. Your javadoc changes have also been committed now. ",
            "author": "Daniel Naber",
            "id": "comment-12500863"
        }
    ]
}