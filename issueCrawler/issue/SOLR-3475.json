{
    "id": "SOLR-3475",
    "title": "Performance hit due to unnecessary syncronization",
    "details": {
        "affect_versions": "4.1",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Method org.apache.solr.request.UnInvertedField.getUnInvertedField unnecessary syncronize agiant cache object. The SolrCache implementations should them selves be thread safe. For example FastLRUCache uses ConcurrentLRUCache which in turn use java.util.concurrency structs to make the implementation threadsafe.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Shabino",
            "id": "comment-15193227",
            "date": "2016-03-14T12:55:30+0000",
            "content": "I believe the synchronization exists so that multiple, concurrent requests for the same cache key do not cause redundant construction of the (likely expensive) cached value. This ought to be a feature of the cache, as done by Guava or Caffeine via their LoadingCache interfaces. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-15193449",
            "date": "2016-03-14T15:09:22+0000",
            "content": "This has long since been fixed. "
        }
    ]
}