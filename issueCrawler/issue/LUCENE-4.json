{
    "id": "LUCENE-4",
    "title": "QueryParser does not recognized negative numbers...",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "The TermQuery allows .setBost to set a float multiplier.  The boost is entered \nvia a '^'<NUMBER> format in the String query, however, while .setBoost will \ntake a negative number, the parser does not allow negative numbers due to the \nlimited description of the <NUMBER> token (QueryParser.jj):\n\n\n\n\n <NUMBER:     (<_NUM_CHAR>)+ \".\" (<_NUM_CHAR>)+ >\n\n\n\n\n\nThe solution is to allow + or - as in:\n\n\n\n\n <NUMBER:    ([\"+\",\"-\"])? (<_NUM_CHAR>)+ \".\" (<_NUM_CHAR>)+ >\n\n\n\n\n\nThis works correctly, properly reading negative numbers.  \n\nI have done some simple tests, and negative boost seems to work as expected, by \nmoving the entry to the end of the list.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--QueryParser.jj-1.29.diff": "https://issues.apache.org/jira/secure/attachment/12312181/ASF.LICENSE.NOT.GRANTED--QueryParser.jj-1.29.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2001-10-24T18:45:11+0000",
            "content": "The way boosts are currently implemented, I actually don't think that this will \nwork.  The boosts are squared in TermQuery.sumOfSquaredWeights(), which loses \ntheir negativeness, no?\n\nAnd as you've reported separately, zeroed weights don't do what you want either.\n\nCan you try changing that method so that boosts are not multiplied in until \nafter the query is normalized?  Tell me if that makes things work any better \nfor you.\n\n   final float sumOfSquaredWeights(Searcher searcher) throws IOException \n{\n-    idf = Similarity.idf(term, searcher);\n-    weight = idf * boost;\n+    weight = idf = Similarity.idf(term, searcher);\n     return weight * weight;\t\t\t  // square term weights\n   }\n\n   final void normalize(float norm) \n{\n     weight *= norm;\t\t\t\t  // normalize for query\n     weight *= idf;\t\t\t\t  // factor from document\n+    weight *= boost;                              // boost query\n   } ",
            "author": "cutting@apache.org",
            "id": "comment-12320969"
        },
        {
            "date": "2002-04-04T00:17:30+0000",
            "content": "Has anyone tried Doug's suggestion for this or confirmed that Alex's query\nparser modification indeed works properly, despite Doug's doubt?\n\nI'd just like to close this bug, if possible.\nThanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320970"
        },
        {
            "date": "2003-05-12T03:20:47+0000",
            "content": "This bug is over a year old, and we have not heard from the original bug\nreporter, so I'm closing it.\nOne thing that we may want to do is throw IllegalArgumentException in\nsetBoost(Float) if the method param is <=0.\n\nDoes anyone mind this? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320971"
        },
        {
            "date": "2003-05-12T03:29:31+0000",
            "content": "Created an attachment (id=6318)\nDiff against QueryParser.jj revision 1.29 ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320972"
        }
    ]
}