{
    "id": "LUCENE-3420",
    "title": "assertion derived class modifier from parent class silently breaks backward compatibility",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.3",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "after upgrading to lucene 3.1+, I see this in my log:\n\n\njava.lang.AssertionError: TokenStream implementation classes or at least their incrementToken() implementation must be final\n        at org.apache.lucene.analysis.TokenStream.assertFinal(TokenStream.java:117)\n        at org.apache.lucene.analysis.TokenStream.<init>(TokenStream.java:92)\n\n\nTurns out I derived TokenStream and my class was not declared final.\n\nThis silently breaks backward compatibility via reflection, scary...\n\nI think doing this sort of check is fine, but throwing an java.lang.AssertionError in this case is too stringent. \n\nThis is a style check against lucene clients, a error log would be fine, but throwing an Error is too much.\n\nSee constructor implementation for: http://svn.apache.org/viewvc/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/analysis/TokenStream.java?view=markup",
    "attachments": {
        "LUCENE-3420.patch": "https://issues.apache.org/jira/secure/attachment/12493504/LUCENE-3420.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-07T19:08:41+0000",
            "content": "Hmmm, yeah.  Perhaps this assert should have only been for token streams in our namespace? ",
            "author": "Yonik Seeley",
            "id": "comment-13099227"
        },
        {
            "date": "2011-09-07T19:23:52+0000",
            "content": "\nThis silently breaks backward compatibility via reflection, scary...\n\nThis is not true, there is nothing silent about it. It was listed in the backwards compatibility breaks section of 3.1:\n\n  Analyzer and TokenStream base classes now have an assertion in their ctor,\n  that check subclasses to be final or at least have final implementations\n  of incrementToken(), tokenStream(), and reusableTokenStream().\n\n ",
            "author": "Robert Muir",
            "id": "comment-13099241"
        },
        {
            "date": "2011-09-07T20:49:05+0000",
            "content": "The problem behind the checks is that they are done by the class TokenStream, so even if you disable assertions for your own class this will still fail as soon as you enable assertions for the lucene package.\n\nIf you want to enable assertions for Lucene but disable assertions in your own code, the ctor should check the actual assertion status of the subclass using Class.desiredAssertionStatus() and not throw AssertionFailedError, as this would affect a class for which assertions are not enabled. Patch is easy.\n\nThe same applies for Analyzer.\n\nIn another issue (sorry, I don't find it, the JIRA search is dumb - oh f*ck it's Lucene! - maybe it was on mailing list), Shai Erea suggested to do the assertion check only for org.apache.lucene and org.apache.solr packages. There is already a patch somewhere - if I could find the issue. ",
            "author": "Uwe Schindler",
            "id": "comment-13099298"
        },
        {
            "date": "2011-09-07T20:58:58+0000",
            "content": "Maybe it is just my lack of understanding why the assert is needed. My ignorance tells me it is for code styling. I am sure there is something deeper. Can someone enlighten me? ",
            "author": "John Wang",
            "id": "comment-13099306"
        },
        {
            "date": "2011-09-07T21:08:14+0000",
            "content": "Most of this is explained in the related issues to LUCENE-2389.\n\nFor analyzers enforcing finalness prevents errors in handling the two different tokenStream() methods (for reuse and not reuse). Also the problems in Lucene 2.9 to make the new TokenStream API backwards compatible (the famous \"sophisticated backwards layer\") lead to enforcing finalness for this API using the decorator pattern. With this assertion we found lots of bugs even in Lucene code that were caused by overriding methods to change behaviour that should never be done in that way for decorator APIs.\n\nAnd this is NOT a HARD error. No production system is broken by that, as assertions are generally only enabled for testing. So the assertion failure simply tells your test system that you have to fix your code. In production without assertions, your code will still work. So where is the problem?\n\nIf you enable assertions on a production system you will see significant performance problems!!! ",
            "author": "Uwe Schindler",
            "id": "comment-13099317"
        },
        {
            "date": "2011-09-07T21:19:52+0000",
            "content": "Here a patch that the assertion status of the actual class is used. If you disable assertions for your own code, but leave assertions in Lucene enabled, the failure will not trigger. This is the more correct approach. The reflection check should use the subclass' assertion status to enable/disable the check. ",
            "author": "Uwe Schindler",
            "id": "comment-13099566"
        },
        {
            "date": "2011-09-13T17:31:24+0000",
            "content": "Hi, any comments? I would like to commit the \"change\" (it's not a fix as nothing is borken!) to trunk and 3.x, ",
            "author": "Uwe Schindler",
            "id": "comment-13103800"
        },
        {
            "date": "2011-09-18T09:02:06+0000",
            "content": "Committed change to trunk revision: 1172227; 3.x revision: 1172228 ",
            "author": "Uwe Schindler",
            "id": "comment-13107399"
        },
        {
            "date": "2011-09-18T09:02:47+0000",
            "content": "This is not a problem, as this change was announced in the backwards compatibility section of Lucene version 3.1 ",
            "author": "Uwe Schindler",
            "id": "comment-13107400"
        }
    ]
}