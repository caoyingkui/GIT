{
    "id": "SOLR-10742",
    "title": "SolrCores.getNamesForCore is quite inefficient and blocks other core operations",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "SolrCores.getNamesForCore iterates through all the cores to find all the aliases to this core. It does this in a synchronized block which blocks other core operations.\n\nFor installations with many cores this can be a performance issue. I'm not sure it makes sense to do it this way anyway, perhaps SolrCore should have a list of its current aliases and we can be more efficient about this? Or otherwise get this information in a less heavy-weight fashion?\n\nI'm assigning this to myself to keep track of it, but anyone who wants to grab it please feel free.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-13T19:28:34+0000",
            "content": "Since this is a r/o iteration of the lists, and since the central problem is that other core operations cannot proceed due to the synchronization, one suggestion is to take this traversal out of the synchronized block and either retry on ConcurrentModificationExceptions or just return whatever list has been accumulated to date. \n\nOpinions? ",
            "author": "Erick Erickson",
            "id": "comment-16086268"
        },
        {
            "date": "2017-07-13T21:03:36+0000",
            "content": "I think catching ConcurrentModificationExceptions is a bad idea; I'm at least very weary! \n\nIdeally, SolrCores.cores could become a ConcurrentHashMap and then any pure-read operations needn't mess with explicit locks.  However this might not be possible depending on if there are any mutations of the map that require a set of operations to appear atomically.  For example the swap operation may be an issue or not; hard to say.  Is it okay if we momentarily have one of the cores to be swapped be inaccessible while the other core is accessble from both names?  Perhaps I guess.  But I see we also have a parallel map of core descriptors \"residentDesciptors\" var .  If so then yuck...\n\nFailing that, use ReentrantReadWriteLock.  At least this way we only block writes.  The read overhead won't' be as cheap as ConcurrentHashMap but it should be fine.\n\nAs an aside I'm suspicious and confused of the relationship between CoreContainer and SolrCores, and CoreDescriptors too.  CC is doing multiple operations on SolrCores (e.g. remove then add for a rename core) that seems odd to me \u2013 like maybe SolrCores should have this method so it's atomic? ",
            "author": "David Smiley",
            "id": "comment-16086403"
        }
    ]
}