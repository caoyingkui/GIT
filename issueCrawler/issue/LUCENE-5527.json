{
    "id": "LUCENE-5527",
    "title": "Make the Collector API work per-segment",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "Spin-off of LUCENE-5299.\n\nLUCENE-5229 proposes different changes, some of them being controversial, but there is one of them that I really really like that consists in refactoring the Collector API in order to have a different Collector per segment.\n\nThe idea is, instead of having a single Collector object that needs to be able to take care of all segments, to have a top-level Collector:\n\npublic interface Collector {\n\n  AtomicCollector setNextReader(AtomicReaderContext context) throws IOException;\n  \n}\n\n\n\nand a per-AtomicReaderContext collector:\n\n\npublic interface AtomicCollector {\n\n  void setScorer(Scorer scorer) throws IOException;\n\n  void collect(int doc) throws IOException;\n\n  boolean acceptsDocsOutOfOrder();\n\n}\n\n\n\nI think it makes the API clearer since it is now obious setScorer and acceptDocsOutOfOrder need to be called after setNextReader which is otherwise unclear.\n\nIt also makes things more flexible. For example, a collector could much more easily decide to use different strategies on different segments. In particular, it makes the early-termination collector much cleaner since it can return different atomic collectors implementations depending on whether the current segment is sorted or not.\n\nEven if we have lots of collectors all over the place, we could make it easier to migrate by having a Collector that would implement both Collector and AtomicCollector, return this in setNextReader and make current concrete Collector implementations extend this class instead of directly extending Collector.",
    "attachments": {
        "LUCENE-5527.patch": "https://issues.apache.org/jira/secure/attachment/12638488/LUCENE-5527.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13936426",
            "author": "David Smiley",
            "content": "+1 I like it! ",
            "date": "2014-03-16T04:25:09+0000"
        },
        {
            "id": "comment-13936430",
            "author": "Shai Erera",
            "content": "Maybe we can get rid of setScorer, passing Scorer to setNextReader(AtomicReaderContext,Scorer)? ",
            "date": "2014-03-16T04:41:42+0000"
        },
        {
            "id": "comment-13958863",
            "author": "Adrien Grand",
            "content": "Here is a patch, all tests pass.\n\nAs much as possible, I tried to only change the API, not implementations so top-docs collectors, etc. still work exactly the same way. The helper SimpleCollector implements both Collector and AtomicCollector and returns itself in setNextReader. It is useful for collectors that don't need to change their behavior based on the current reader context such as TotalHitCountCollector, but it is also quite handy for the migration since migrating a Collector to the new API is just a matter of extending SimpleCollector instead of Collector and renaming setNextReader to doSetNextReader.\n\nI had initially thought about doing this change for 5.0 only but since the migration ends up being easy and since Collector is an experimental API, we could also have it for 4.8.\n\nFeedback is highly welcome!\n\nMaybe we can get rid of setScorer, passing Scorer to setNextReader(AtomicReaderContext,Scorer)?\n\nThis can't be done today because there is a circular dependency between the Collector and the Scorer. If you look at IndexSearcher.searchsearch(List<AtomicReaderContext>, Weight, Collector), it needs to know whether the collector supports out-of-order collection in order to know which BulkScorer to instantiate, and then the BulkScorer needs to let the Collector know about the Scorer that is being used. ",
            "date": "2014-04-03T14:45:03+0000"
        },
        {
            "id": "comment-13958871",
            "author": "Robert Muir",
            "content": "In my opinion we should rethink the naming here.\n\nCollector now no longer actually collects anything, and there is no 'atomic' property about AtomicCollector...\n ",
            "date": "2014-04-03T15:00:55+0000"
        },
        {
            "id": "comment-13958891",
            "author": "Adrien Grand",
            "content": "I chose these names to make it clear what these classes relate to:\n\n\tIndexReader -> Collector\n\tAtomicReader -> AtomicCollector\n\n\n\nBut I'm totally open to better names! ",
            "date": "2014-04-03T15:37:10+0000"
        },
        {
            "id": "comment-13958894",
            "author": "Robert Muir",
            "content": "That makes sense. Honestly I think my issue is not specific to Collector, but more general.\n\nI guess I wish AtomicReader were named LeafReader.\n\nSo maybe we shouldnt try to tackle that on this issue. ",
            "date": "2014-04-03T15:40:22+0000"
        },
        {
            "id": "comment-13958984",
            "author": "Ryan Ernst",
            "content": "\nI guess I wish AtomicReader were named LeafReader.\nSo maybe we shouldnt try to tackle that on this issue.\nI agree 'atomic' is a bad name.  Why not name this LeafCollector now, since it makes more sense on its own? ",
            "date": "2014-04-03T17:11:38+0000"
        },
        {
            "id": "comment-13959030",
            "author": "Adrien Grand",
            "content": "I like LeafCollector better too. So let's name it this way now and open an issue to rename AtomicReader to LeafReader in 5.0? ",
            "date": "2014-04-03T17:48:33+0000"
        },
        {
            "id": "comment-13959036",
            "author": "Ryan Ernst",
            "content": "+1 ",
            "date": "2014-04-03T17:57:57+0000"
        },
        {
            "id": "comment-13959075",
            "author": "Adrien Grand",
            "content": "I opened LUCENE-5569 to discuss the renaming. ",
            "date": "2014-04-03T18:39:43+0000"
        },
        {
            "id": "comment-13959078",
            "author": "Michael McCandless",
            "content": "+1 for LeafCollector and the patch.\n\nI tested if there are search performance impacts from this:\n\n\nReport after iter 10:\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                 Respell       49.44      (3.3%)       48.10      (3.7%)   -2.7% (  -9% -    4%)\n                  Fuzzy2       46.74      (3.2%)       45.73      (3.1%)   -2.2% (  -8% -    4%)\n                  Fuzzy1       59.25      (3.7%)       58.08      (3.5%)   -2.0% (  -8% -    5%)\n                  IntNRQ        3.42      (3.8%)        3.40      (3.8%)   -0.7% (  -7% -    7%)\n                 Prefix3       86.67      (2.6%)       86.17      (2.6%)   -0.6% (  -5% -    4%)\n         LowSloppyPhrase       44.44      (2.3%)       44.42      (2.5%)   -0.1% (  -4% -    4%)\n                Wildcard       19.08      (3.5%)       19.07      (3.0%)   -0.1% (  -6% -    6%)\n              AndHighMed       34.38      (1.0%)       34.38      (1.0%)   -0.0% (  -2% -    2%)\n             LowSpanNear       10.41      (3.1%)       10.41      (2.3%)    0.0% (  -5% -    5%)\n        HighSloppyPhrase        3.49      (7.9%)        3.49      (6.6%)    0.1% ( -13% -   15%)\n             AndHighHigh       28.35      (1.1%)       28.39      (1.0%)    0.1% (  -1% -    2%)\n             MedSpanNear       31.06      (2.8%)       31.12      (2.7%)    0.2% (  -5% -    5%)\n              AndHighLow      391.44      (2.9%)      392.73      (2.6%)    0.3% (  -5% -    6%)\n         MedSloppyPhrase        3.54      (5.2%)        3.56      (4.6%)    0.4% (  -8% -   10%)\n               OrHighMed       26.51      (4.0%)       26.66      (5.7%)    0.6% (  -8% -   10%)\n            OrHighNotLow       24.84      (4.1%)       24.98      (5.8%)    0.6% (  -9% -   10%)\n               LowPhrase       13.19      (1.6%)       13.27      (2.3%)    0.6% (  -3% -    4%)\n               OrHighLow       18.78      (4.1%)       18.91      (5.8%)    0.7% (  -8% -   11%)\n           OrNotHighHigh        8.87      (4.5%)        8.93      (6.0%)    0.7% (  -9% -   11%)\n            OrHighNotMed       30.63      (4.1%)       30.85      (5.5%)    0.7% (  -8% -   10%)\n              OrHighHigh        8.21      (4.1%)        8.27      (5.8%)    0.7% (  -8% -   11%)\n               MedPhrase      203.10      (6.6%)      204.77      (6.3%)    0.8% ( -11% -   14%)\n           OrHighNotHigh       11.09      (4.5%)       11.18      (5.9%)    0.8% (  -9% -   11%)\n                 LowTerm      322.74      (5.6%)      325.67      (5.6%)    0.9% (  -9% -   12%)\n                HighTerm       63.88     (12.8%)       64.55     (12.2%)    1.1% ( -21% -   29%)\n                 MedTerm      100.19      (9.8%)      101.31      (9.5%)    1.1% ( -16% -   22%)\n            HighSpanNear        8.09      (4.0%)        8.18      (4.9%)    1.1% (  -7% -   10%)\n              HighPhrase        4.27      (7.1%)        4.32      (6.5%)    1.2% ( -11% -   15%)\n            OrNotHighMed       19.00      (7.0%)       19.30      (7.6%)    1.6% ( -12% -   17%)\n            OrNotHighLow       19.63      (7.4%)       19.96      (8.0%)    1.7% ( -12% -   18%)\n\n\n\nLooks like just noise! ",
            "date": "2014-04-03T18:48:41+0000"
        },
        {
            "id": "comment-13959080",
            "author": "Hoss Man",
            "content": "This isn't an area of Lucene i tend to think much about, but if we're talking about changing the API, i have a few questions i wanted to put out there for discussion:\n\n\n\tis setNextReader really an appropriate name anymore? or should it be something like getLeafCollector(AtomicReaderContext)\n\tShould we bite the bullet and make LeafCollector and Collector extend Closable ?\n\t\n\t\tI believe this was discussed at one point before, and it was considered an obnoxious interface change with minimal gain - but if we're going to change the interface API now anyway, it may be worth reconsidering\n\t\tSolr works around this by always using DelegatingCollector which has a finish() method - i can't imagine other lucene apps don't have similar wishes for close() like this.\n\t\n\t\n\tShould we go ahead and think about if/how this API should be tweaked (now or in the future) to allow a Collector to indicate that it's LeafCollectors  can be used to collect documents from different segments in parallel threads? If we think a marker interface would be the best way to go, so we can easily add that later \u2013 but i wanted to ask the question\n\t\n\t\tOne possibility that just occurred to me: Document right now that LeafCollectors may be processed in parallel, and that if you want to force single threaded collection you should implement Collector.getLeafCollector(AtomicReaderContext) such that it blocks until the previously returned LeafCollector has been closed (which should be easy enough to do in things like SimpleCollector using a basic sync lock, right?)\n\t\n\t\n\n\n\n(I have no strong feelings about most of this) ",
            "date": "2014-04-03T18:49:30+0000"
        },
        {
            "id": "comment-13959092",
            "author": "Adrien Grand",
            "content": "is setNextReader really an appropriate name anymore? or should it be something like getLeafCollector(AtomicReaderContext)\n\nI think this name is better indeed!\n\nShould we bite the bullet and make LeafCollector and Collector extend Closable ?\n\nI would like having such callbacks too. LUCENE-4370 discusses such a change and the challenges.\n\nShould we go ahead and think about if/how this API should be tweaked (now or in the future) to allow a Collector to indicate that it's LeafCollectors can be used to collect documents from different segments in parallel threads\n\nThis was the main point of LUCENE-5299 that I forked this issue/patch from. But I think this is more controversial: I think that in general, it is a better idea to shard the index (even locally) and merge per-shard results using something like TopDocs.merge than trying to collect segments concurrently because it allows to have individual tasks of equal cost. ",
            "date": "2014-04-03T19:06:14+0000"
        },
        {
            "id": "comment-13959101",
            "author": "Shikhar Bhushan",
            "content": "Thanks for picking this up Adrien! I always wanted to push forward at least the API refactoring but did not get the chance to do so.\n\n+1 on adding a method like LeafCollector.done()  / finish() or such, and making that part of the usage contract.\n\nIt's not just Solr with DelegatingCollector that has something like this, I think I remember seeing this pattern even in ES.\n\nLUCENE-5299 had this as a SubCollector.done() method and it led to a lot of code-cleanup at various places where we were trying to detect a transition to the next segment based on a call to setNextReader(). In some cases, the result finalization was being done lazily when result retrieval methods are being called, because there is no other good way of knowing that the last segment has been processed. ",
            "date": "2014-04-03T19:13:49+0000"
        },
        {
            "id": "comment-13959109",
            "author": "Adrien Grand",
            "content": "Thanks for picking this up Adrien! I always wanted to push forward at least the API refactoring but did not get the chance to do so.\n\nYou're welcome. \n\nIt's not just Solr with DelegatingCollector that has something like this, I think I remember seeing this pattern even in ES.\n\nIndeed there is! I think it would be nice to have it in Lucene, I would just like to keep this issue contained in order to make it easier to make progress. We can iterate on LUCENE-4370 once this one is in! ",
            "date": "2014-04-03T19:21:48+0000"
        },
        {
            "id": "comment-13959116",
            "author": "Hoss Man",
            "content": "Indeed there is! I think it would be nice to have it in Lucene, I would just like to keep this issue contained in order to make it easier to make progress. \n\nUnderstood \u2013 but my point is that already in this issue:\n\n\tLeafCollector is completely new, so it can have whatever methods we think it needs \u2013 if it should have close() let's give it close.\n\twe're discussing major changes to both the api and the functional semantics of Collector \u2013 so if the semantics are on the table, and we think having close() is an appropriate semantic for Collector to have (in it's new context as a think that returns LeafCollectors) then lets make sure that's on the table as well.\n\n ",
            "date": "2014-04-03T19:30:23+0000"
        },
        {
            "id": "comment-13959218",
            "author": "Adrien Grand",
            "content": "The patch only moves 3 methods of the Collector class into a new LeafCollector class that gets instantiated per-segment. It doesn't add any functionnality but just changes the way documents are collected.\n\nI think having callbacks upon collection completion would be useful and help clean up code as Shikhar Bhushan mentionned. But this LeafCollector refactoring has already been stalled in LUCENE-5299 because LUCENE-5299 also discussed parallelizing collection so I would like to keep this change as small as possible and get it in. ",
            "date": "2014-04-03T21:06:42+0000"
        },
        {
            "id": "comment-13959225",
            "author": "Yonik Seeley",
            "content": "I had initially thought about doing this change for 5.0 only but since the migration ends up being easy and since Collector is an experimental API, we could also have it for 4.8.\n\nThat surprised me that it was marked as \"experimental\"!  It's been around in it's current form for 3 years, and anyone doing anything \"interesting\" with Lucene would most likely be using it.  Perhaps this change should only be targeted toward trunk (5.0)? ",
            "date": "2014-04-03T21:12:28+0000"
        },
        {
            "id": "comment-13959246",
            "author": "Uwe Schindler",
            "content": "That surprised me that it was marked as \"experimental\"! It's been around in it's current form for 3 years, and anyone doing anything \"interesting\" with Lucene would most likely be using it. Perhaps this change should only be targeted toward trunk (5.0)?\n\n+1 - Yes, please. This would make upgrading a pain for lot of people. Like the renaming issue, I would only ever do this for 5.0. Why should we do it before 5.0? It is mainly a refactoring. ",
            "date": "2014-04-03T21:26:48+0000"
        },
        {
            "id": "comment-13959252",
            "author": "Adrien Grand",
            "content": "Uwe, are you talking about the LeafReader or the LeafCollector renaming? ",
            "date": "2014-04-03T21:31:02+0000"
        },
        {
            "id": "comment-13959254",
            "author": "Hoss Man",
            "content": "The patch only moves 3 methods of the Collector class into a new LeafCollector class that gets instantiated per-segment. It doesn't add any functionnality but just changes the way documents are collected.\n\nsure ... but \"in for a penny in for a pound\" ... this change is going to require every existing implementation of \"Collector\" to change, so if we're already going to require that of all existing classes, why not also add a close() method (that can easily be a No-Op for most existing implementations) at the same time?\n\nI think having callbacks upon collection completion would be useful and help clean up code as Shikhar Bhushan mentionned. But this LeafCollector refactoring has already been stalled in LUCENE-5299 because LUCENE-5299 also discussed parallelizing collection so I would like to keep this change as small as possible and get it in.\n\nFair enough \u2013 as i said, i don't have strong opinions about any of this, i just wanted to raise the question.  But personally i think that adding Closable here and now as part of this API change issue makes sense (since it's about the \"life cycle\" of the Collector/LeafCollector) independent of any question of parallelization.,  Even if parallelization is controversial, adding close() doesn't seem to be, so why not do all of the known desirable, non-controversial, Collector API changes at once?\n\nIf i'm wrong, and there is some dissent about whether close() makes sense on these classes, then by all means yes: ignore the suggestion and focus purely on what you've got in the current patch. ",
            "date": "2014-04-03T21:31:38+0000"
        },
        {
            "id": "comment-13959280",
            "author": "Adrien Grand",
            "content": "I think there are things to discuss regarding proper wrapping and how to deal with exceptions that are thrown during collection: should close/finish be called in case an exception is thrown during collection (do we want to do the same in case of an IOException or a TimeExceededException)? ",
            "date": "2014-04-03T21:48:01+0000"
        },
        {
            "id": "comment-13959300",
            "author": "Robert Muir",
            "content": "\n Even if parallelization is controversial, adding close() doesn't seem to be, so why not do all of the known desirable, non-controversial, Collector API changes at once?\n\nIts controversial. Its going to be some work to do it correctly, and its arguably completely unnecessary (after IS.search returns, you are done with the collector).\n\nI described these problems here: LUCENE-4370\n\nIf we can add close() in a way thats consistent, fine. But adding this \"lifecycle\" stuff in a way that is inconsistent is very bad. We need semantics that can be relied upon. ",
            "date": "2014-04-03T21:57:07+0000"
        },
        {
            "id": "comment-13959324",
            "author": "Hoss Man",
            "content": "Its controversial. ...\n\nFair enough, i retract the suggestion.\n\nOff my list of questions, that just leaves...\n\nis setNextReader really an appropriate name anymore? or should it be something like getLeafCollector(AtomicReaderContext)\n\n...which Adrien seemed to be on board with.  Any other concerns? ",
            "date": "2014-04-03T22:14:51+0000"
        },
        {
            "id": "comment-13959326",
            "author": "Robert Muir",
            "content": "I dont think we have to \"give up\" on the close() idea. it just has its own issue and its own set of problems. probably a more annoying/larger issue than this one to get right. I think its ok to just tackle it there... ",
            "date": "2014-04-03T22:17:01+0000"
        },
        {
            "id": "comment-13959340",
            "author": "Hoss Man",
            "content": "I dont think we have to \"give up\" on the close() idea.\n\nWell, I only brought it up because i didn't realize the full context of existing discussion that already took place in LUCENE-5299 and it seemed like an \"easy\" win if we were already going to change the api/lifecycle of Collector \u2013 but i don't want to derail Adrien's current goal.  \n\nIf, as you say, ...\n\n...it (adding Closable) just has its own issue and its own set of problems....\n\n...that seems like good grounds for it to be tackled in it's own Jira, and let this one (splitting out LeafCollector) move forward first.\n\n(Adrien: sorry for stiring up so much shit  ) ",
            "date": "2014-04-03T22:23:37+0000"
        },
        {
            "id": "comment-13959419",
            "author": "Adrien Grand",
            "content": "Chris Hostetter (Unused) no worries!\n\nMichael McCandless Thanks for running this benchmark!\n\nHere is an updated patch:\n\n\tAtomicCollector has been renamed to LeafCollector\n\tCollector.setNextReader has been renamed to Collector.getLeafCollector.\n\n\n\nprecommit and all tests pass. I plan to commit this patch to 5.0 only for the reasons that Yonik and Uwe mentioned. ",
            "date": "2014-04-03T23:22:09+0000"
        },
        {
            "id": "comment-13960055",
            "author": "ASF subversion and git services",
            "content": "Commit 1584747 from jpountz@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1584747 ]\n\nLUCENE-5527: Refactor Collector API to use a dedicated Collector per leaf. ",
            "date": "2014-04-04T15:31:02+0000"
        },
        {
            "id": "comment-13960089",
            "author": "Adrien Grand",
            "content": "Thanks everyone! ",
            "date": "2014-04-04T16:17:21+0000"
        },
        {
            "id": "comment-14332903",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:32+0000"
        }
    ]
}