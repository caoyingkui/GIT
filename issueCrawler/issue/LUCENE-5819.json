{
    "id": "LUCENE-5819",
    "title": "Add block tree postings format that supports term ords",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/other"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "BlockTree is our default terms dictionary today, but it doesn't\nsupport term ords, which is an optional API in the postings format to\nretrieve the ordinal for the currently seek'd term, and also later\nseek by that ordinal e.g. to lookup the term.\n\nThis can possibly be useful for e.g. faceting, and maybe at some point\nwe can share the postings terms dict with the one used by sorted/set\nDV for cases when app wants to invert and facet on a given field.\n\nThe older (3.x) block terms dict can easily support ords, and we have\na Lucene41OrdsPF in test-framework, but it's not as fast / compact as\nblock-tree, and doesn't (can't easily) implement an optimized\nintersect, but it could be for fields we'd want to facet on, these\ntradeoffs don't matter.  It's nice to have options...",
    "attachments": {
        "LUCENE-5819.patch": "https://issues.apache.org/jira/secure/attachment/12655542/LUCENE-5819.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14060646",
            "author": "Michael McCandless",
            "content": "Patch.\n\nI put the new terms dict in lucene/codecs, tied it into MockRandomPF,\nand improved BasePostingsFormatTestCase to test terms ords when they\nare supported.  Tests seem to be passing, even test-core with -Dtests.pf=OrdsLucene41.\n\nI also made a change to CheckIndex, which may be controversial, to\nhave a \"fail fast\" option so it just throws the first exception it\nhits.  I found this really useful when debugging because I could\nimmediately see the exception causing a failure vs. the default\nbehavior of CheckIndex to keep trying on the next segment.  If people\ndisagree w/ this I can separate it out / revert it..\n\nAlso I realized no classes in the new IDVPF are in fact public\n(woops!); I'll commit that separately. ",
            "date": "2014-07-14T13:43:12+0000"
        },
        {
            "id": "comment-14062020",
            "author": "Michael McCandless",
            "content": "I ran a quick perf test of Lucene41 vs OrdsLucene41, on wikimediumall:\n\nReport after iter 19:\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                PKLookup      153.33      (8.7%)      131.17      (8.5%)  -14.4% ( -29% -    3%)\n                 Respell       35.40      (5.4%)       31.41      (7.9%)  -11.3% ( -23% -    2%)\n              AndHighLow      241.05      (3.3%)      224.00     (14.7%)   -7.1% ( -24% -   11%)\n                  Fuzzy2       69.73      (6.3%)       65.30      (5.5%)   -6.3% ( -17% -    5%)\n                  Fuzzy1       44.32      (9.4%)       41.90     (11.8%)   -5.5% ( -24% -   17%)\n                 LowTerm      313.68      (2.4%)      296.93     (10.8%)   -5.3% ( -18% -    8%)\n                Wildcard       39.40      (5.7%)       37.35      (9.7%)   -5.2% ( -19% -   10%)\n                  IntNRQ        3.57      (9.3%)        3.41     (14.5%)   -4.6% ( -26% -   21%)\n         MedSloppyPhrase        4.98      (3.3%)        4.76     (12.7%)   -4.4% ( -19% -   12%)\n               MedPhrase        6.18      (3.8%)        5.95     (13.1%)   -3.7% ( -19% -   13%)\n                HighTerm       27.78      (5.8%)       26.75     (10.1%)   -3.7% ( -18% -   12%)\n             AndHighHigh       13.51      (2.0%)       13.02      (9.9%)   -3.6% ( -15% -    8%)\n         LowSloppyPhrase      134.71      (3.3%)      130.50     (12.1%)   -3.1% ( -17% -   12%)\n                 Prefix3        8.88      (9.7%)        8.65     (15.6%)   -2.7% ( -25% -   25%)\n               LowPhrase       49.67      (3.1%)       48.38     (11.4%)   -2.6% ( -16% -   12%)\n                 MedTerm      117.97      (4.5%)      115.01      (6.9%)   -2.5% ( -13% -    9%)\n              HighPhrase        7.87      (6.0%)        7.73     (13.3%)   -1.8% ( -19% -   18%)\n            HighSpanNear        4.68      (6.6%)        4.61     (14.7%)   -1.4% ( -21% -   21%)\n              AndHighMed       49.48      (1.6%)       48.95      (5.0%)   -1.1% (  -7% -    5%)\n             LowSpanNear       23.70      (4.6%)       23.55     (10.4%)   -0.7% ( -14% -   15%)\n        HighSloppyPhrase        5.90      (4.4%)        5.87     (11.2%)   -0.5% ( -15% -   15%)\n            OrNotHighLow       36.90     (12.3%)       37.07     (12.9%)    0.5% ( -22% -   29%)\n              OrHighHigh        4.16     (15.2%)        4.19     (16.7%)    0.8% ( -27% -   38%)\n           OrHighNotHigh       11.86     (13.8%)       11.98     (18.4%)    0.9% ( -27% -   38%)\n             MedSpanNear        4.32      (5.3%)        4.39     (10.7%)    1.5% ( -13% -   18%)\n            OrHighNotMed       26.10     (14.7%)       26.60     (12.8%)    1.9% ( -22% -   34%)\n            OrHighNotLow       19.61     (15.8%)       20.08     (13.9%)    2.4% ( -23% -   38%)\n            OrNotHighMed       13.84     (15.9%)       14.19     (16.7%)    2.6% ( -25% -   41%)\n               OrHighMed       27.09     (18.5%)       27.87     (19.4%)    2.9% ( -29% -   50%)\n               OrHighLow       36.24     (15.4%)       37.42     (15.3%)    3.2% ( -23% -   40%)\n           OrNotHighHigh        9.70     (16.6%)       10.11     (15.5%)    4.2% ( -23% -   43%)\n\n\n\nNet/net the terms-dict heavy operations (PKLookup, respell, fuzzy,\nmaybe IntNRQ) take some hit, since there is added cost to decode\nordinals from the FST; I think the other changes are likely noise.\n\nAlso, the net terms index (size of FSTs that are loaded into RAM,\n*.tip/*.tipo) grew from 31M to 46M (~48% larger)... ",
            "date": "2014-07-15T13:02:35+0000"
        },
        {
            "id": "comment-14062177",
            "author": "Michael McCandless",
            "content": "New patch, fixes last nocommit, fixes ant precommit ... I think it's ready. ",
            "date": "2014-07-15T15:03:08+0000"
        },
        {
            "id": "comment-14062343",
            "author": "Michael McCandless",
            "content": "The gist of the change here is that the terms index FST, via a new\ncustom Outputs impl FSTOrdsOutputs, now also stores the start and end\nord range for each block.  The end ord is also necessary because the\nterms don't neatly fall into just the leaf blocks: \"straggler\" terms\ncan easily fall inside inner blocks, and in this case we need the end\nord of the lower blocks to realize the term is a \"straggler\".\n\nThe on-disk blocks themselves are nearly the same; the only difference\nis when a block writes a pointer to a sub-block, it now also writes\n(vlong) how many terms are in that sub-block.  This way when we are\nseeking by ord and skip that sub-block we know how many ords were just\nskipped.\n\nI made a custom getByOutput to handle the ranges, falling back to the\nlast range that included the target ord while recursing.\n\nOtherwise the terms dict is basically the same as the normal block\ntree, including optimized intersect (w/o ord() implemented: not sure\nwe need it), except all seek/next operations also compute the term\nord.  Floor blocks also store the term ord each one starts on. ",
            "date": "2014-07-15T17:17:21+0000"
        },
        {
            "id": "comment-14064820",
            "author": "Robert Muir",
            "content": "Why is FSTOrdsOutput just treating the rest of the output as a byte array? Wont this be ineffective here (e.g. we have pointer to block in terms dict, what else is in there?) Do we really need a generic solution or should this just have its own output geared at what it does? ",
            "date": "2014-07-17T11:04:40+0000"
        },
        {
            "id": "comment-14064886",
            "author": "Michael McCandless",
            "content": "Do we really need a generic solution or should this just have its own output geared at what it does?\n\nWell, really I just preserved that from the current block tree impl.  That byte[] has the pointer to the block, plus a couple flags (isLeafBlock/isFloorBlock) and then any \"floor block\" index data (file pointer offsets to get to the floor blocks).  I agree at Outputs impl that broke these things out would be nicer ... but I think this should probably be done separately. ",
            "date": "2014-07-17T13:03:27+0000"
        },
        {
            "id": "comment-14067902",
            "author": "ASF subversion and git services",
            "content": "Commit 1612080 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1612080 ]\n\nLUCENE-5819: add terms dict and postings format that implement term ordinals ",
            "date": "2014-07-20T12:08:45+0000"
        },
        {
            "id": "comment-14068341",
            "author": "ASF subversion and git services",
            "content": "Commit 1612213 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1612213 ]\n\nLUCENE-5819: add terms dict and postings format that implement term ordinals ",
            "date": "2014-07-21T09:24:37+0000"
        },
        {
            "id": "comment-14068355",
            "author": "ASF subversion and git services",
            "content": "Commit 1612217 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1612217 ]\n\nLUCENE-5819: fix ord bug; add test case; remove dead code ",
            "date": "2014-07-21T09:42:04+0000"
        }
    ]
}