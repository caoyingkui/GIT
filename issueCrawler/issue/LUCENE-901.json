{
    "id": "LUCENE-901",
    "title": "DefaultSimilarity.queryNorm() should never return Infinity",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.1"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently DefaultSimilarity.queryNorm() returns Infinity if sumOfSquaredWeights=0.\nThis can result in a score of NaN (e. g. in TermScorer) if boost=0.0f.\n\nA simple fix would be to return 1.0f in case zero is passed in.\n\nSee LUCENE-698 for discussions about this.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-06-01T05:31:49+0000",
            "content": "I'm not sure if i agree with this concept. Do we really want the curve of values from queryNorm to have a step drop down from really huge values when sumOfSquaredWeights is \"near\" zero to \"1\" when sumOfSquaredWeights becomes so close to zero it can only be represented as 0.0f ?\n\nFloat.MAX_VALUE seems like a better choice then 1, but I haven't really thought through wether or not that will still trigger NaN scores. ",
            "author": "Hoss Man",
            "id": "comment-12500576"
        },
        {
            "date": "2007-06-01T14:22:45+0000",
            "content": "From a scoring perspective, it's a multiplier that's only used at the top level, so the scores produced will be zero anyway.  How else might Similarity.queryNorm() be used?\n\nIf the user uses a boost of zero, It doesn't make sense to try and normalize that upwards though.  Returning 0 could also make sense.\n ",
            "author": "Yonik Seeley",
            "id": "comment-12500722"
        },
        {
            "date": "2007-06-01T16:37:38+0000",
            "content": "> Float.MAX_VALUE seems like a better choice then 1, but I haven't really \n> thought through wether or not that will still trigger NaN scores.\n\nFloat.MAX_VALUE * 0.0f = 0.0f. It would not result in NaN. ",
            "author": "Michael Busch",
            "id": "comment-12500756"
        },
        {
            "date": "2007-06-01T17:47:32+0000",
            "content": "Float.MAX_VALUE seems like a better choice then 1 [ ... ]\n\nWith nested queries, could Float.MAX_VALUE trigger overflow back to Infinity? ",
            "author": "Doug Cutting",
            "id": "comment-12500779"
        },
        {
            "date": "2007-06-01T17:52:01+0000",
            "content": "> From a scoring perspective, it's a multiplier that's only used at the top level, so the scores produced will be zero anyway. \n\nhuh?  queryNorm is passed down by BooleanWeight to all of the sub clauses ... am i miss understanding something?  ",
            "author": "Hoss Man",
            "id": "comment-12500782"
        },
        {
            "date": "2007-06-01T19:09:27+0000",
            "content": "> huh? queryNorm is passed down by BooleanWeight to all of the sub clauses ... am i miss understanding something?\n\nSorry, I meant Similarity.queryNorm() is only called at the top level.\n\n> With nested queries, could Float.MAX_VALUE trigger overflow back to Infinity? \n\nI don't think so... BooleanWeight multiplies the queryNorm by it's boost before calling normalize on the nested weights (hence if the top-level boost is zero, it will call normalize(0.0f) on the subweights).\nSpanWeight doesn't seem to do nested normalization at all.\nNot sure if all the explain implementations would handle it correctly though. ",
            "author": "Yonik Seeley",
            "id": "comment-12500814"
        },
        {
            "date": "2011-01-25T13:22:44+0000",
            "content": "This one is fixed (there is a Nan/Inf check in queryNorm added fairly recently) ",
            "author": "Robert Muir",
            "id": "comment-12986374"
        },
        {
            "date": "2011-03-30T15:50:32+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013516"
        }
    ]
}