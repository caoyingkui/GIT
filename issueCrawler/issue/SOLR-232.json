{
    "id": "SOLR-232",
    "title": "let Solr set request headers (for logging)",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I need the ability to log certain information about a request so that I can feed it into performance and capacity monitoring systems.\n\nI would like to know things like\n\n\thow long the request took\n\thow many rows were fetched and returned\n\twhat handler was called.\n\n\n\nper request.\n\nthe following patch is 1 way to implement this, I'm sure there are better ways.",
    "attachments": {
        "SOLR-232.patch": "https://issues.apache.org/jira/secure/attachment/12477249/SOLR-232.patch",
        "meta.patch": "https://issues.apache.org/jira/secure/attachment/12357013/meta.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ian Holsman",
            "id": "comment-12494643",
            "date": "2007-05-10T06:38:33+0000",
            "content": "attachment more of a proof of concept/strawman to illustrate how i thought it might work "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12494899",
            "date": "2007-05-10T23:11:33+0000",
            "content": "Interesting.  Does it have a UI piece?  Do you need that \"start\" variable?  Looks like you could just use \"i\".  Keeping track of \"ERR\" is useful, but it may be more useful to keep track of the actual errors.  Maybe something as simple as e.getMessage()? "
        },
        {
            "author": "Ian Holsman",
            "id": "comment-12494918",
            "date": "2007-05-10T23:58:43+0000",
            "content": "Hi Otis.\n\nThe UI would be a generic monitoring tool similar to http://pyro.holsman.net:8000/ganglia/?m=atomics_rows_mean&c=atomics.\nand yes.. putting a error message would be much more helpful. The code was more to show how it could be done. there needs to be some more meta values added.\n\n\nother uses I was planning on are:\n\n\tlog file reply for performance testing\n\ttop N queries\n\ttop N errors\n\tcapacity planning / finding poorly performing queries etc etc\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12495077",
            "date": "2007-05-11T15:41:00+0000",
            "content": "What's the effect of req.setAttribute() and how is it better/different from the logging Solr already does?\n\nI don't even see the setAttribute method... is this Tomcat only, or am I looking in the wrong spot?\n\nAlso, rather than adding new methods to SolrQueryResponse, you might consider using SolrQueryRequest.getContext() "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12495084",
            "date": "2007-05-11T15:48:34+0000",
            "content": "Ahh, I found setAttribute() (inherited from ServletRequest) "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-13024649",
            "date": "2011-04-24T16:28:00+0000",
            "content": "Looks like the title needs to change?  From looking at the Solr 1.4 code, it seems this issue is now about setting RESPONSE headers?\n\nThat's certainly the use case I have in mind, and what seems to be commented out in the Solr 1.4 code:\nhttps://svn.apache.org/repos/asf/lucene/solr/branches/branch-1.4/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java\n\n\n              // add info to http headers\n              //TODO: See SOLR-232 and SOLR-267.  \n                /*try {\n                  NamedList solrRspHeader = solrRsp.getResponseHeader();\n                 for (int i=0; i<solrRspHeader.size(); i++) {\n                   ((javax.servlet.http.HttpServletResponse) response).addHeader((\"Solr-\" + solrRspHeader.getName(i)), String.valueOf(solrRspHeader.getVal(i)));\n                 }\n                } catch (ClassCastException cce) {\n                  log.log(Level.WARNING, \"exception adding response header log information\", cce);\n                }*/\n\n\n\nHowever, the things currently sent in the response header seem to be missing the # of matches (logged as \"hits\"), and I'm not sure I'd want all the params sent back as headers by default.\n\nSo, maybe we need a method like solrRsp.getHttpResponseHeader(); instead of using solrRsp.getResponseHeader();\n and corresponding setters? "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-13024651",
            "date": "2011-04-24T16:32:14+0000",
            "content": "In addition, or instead, we could make it so that which elements from the responseHeader are set as http response headers is configurable in solrconfig.xml for each request handler? "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-13024655",
            "date": "2011-04-24T17:06:21+0000",
            "content": "Here's a patch against Solr 3.1 just as a proof of concept that adds the hits as a response header X-Solr-Hits\n\nApparently this code has been commented out so long that the log call and other things changed. "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-13024657",
            "date": "2011-04-24T17:50:47+0000",
            "content": "Hmm, that check isn't quite right - the ping handler ends up getting:\n\nX-Solr-Hits: null\n\nSince String.valuOf(Object object) has the behavior that if the argument is null, then a string equal to \"null\";\n\nThis better POC patch checks for null in the right place. Deleted the old one. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16595595",
            "date": "2018-08-28T20:58:18+0000",
            "content": "Closing ancient issue - we already have all of this in the logs. "
        }
    ]
}