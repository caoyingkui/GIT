{
    "id": "LUCENE-1342",
    "title": "64bit JVM crashes on Linux",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Whilst running lucene in our QA environment we received the following exception. This problem was also reported here : http://confluence.atlassian.com/display/KB/JSP-20240+-+POSSIBLE+64+bit+JDK+1.6+update+4+may+have+HotSpot+problems.\n\nIs this a JVM problem or a problem in Lucene.\n\n#\n\n\tAn unexpected error has been detected by Java Runtime Environment:\n#\n\tSIGSEGV (0xb) at pc=0x00002aaaaadb9e3f, pid=2275, tid=1085356352\n#\n\tJava VM: Java HotSpot(TM) 64-Bit Server VM (10.0-b19 mixed mode linux-amd64)\n\tProblematic frame:\n\tV  [libjvm.so+0x1fce3f]\n#\n\tIf you would like to submit a bug report, please visit:\n\thttp://java.sun.com/webapps/bugreport/crash.jsp\n#\n\n\n\n---------------  T H R E A D  ---------------\n\nCurrent thread (0x00002aab0007f000):  JavaThread \"CompilerThread0\" daemon [_thread_in_vm, id=2301, stack(0x0000000040a13000,0x0000000040b14000)]\n\nsiginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x0000000000000000\n\nRegisters:\nRAX=0x0000000000000000, RBX=0x00002aab0007f000, RCX=0x0000000000000000, RDX=0x00002aab00309aa0\nRSP=0x0000000040b10f60, RBP=0x0000000040b10fb0, RSI=0x00002aaab37d1ce8, RDI=0x00002aaaaaaad000\nR8 =0x00002aaaab40cd88, R9 =0x0000000000000ffc, R10=0x00002aaaab40cd90, R11=0x00002aaaab410810\nR12=0x00002aab00ae60b0, R13=0x00002aab0a19cc30, R14=0x0000000040b112f0, R15=0x00002aab00ae60b0\nRIP=0x00002aaaaadb9e3f, EFL=0x0000000000010246, CSGSFS=0x0000000000000033, ERR=0x0000000000000004\n  TRAPNO=0x000000000000000e\n\nTop of Stack: (sp=0x0000000040b10f60)\n0x0000000040b10f60:   00002aab0007f000 0000000000000000\n0x0000000040b10f70:   00002aab0a19cc30 0000000000000001\n0x0000000040b10f80:   00002aab0007f000 0000000000000000\n0x0000000040b10f90:   0000000040b10fe0 00002aab0a19cc30\n0x0000000040b10fa0:   00002aab0a19cc30 00002aab00ae60b0\n0x0000000040b10fb0:   0000000040b10fe0 00002aaaaae9c2e4\n0x0000000040b10fc0:   00002aaaab413210 00002aaaab413350\n0x0000000040b10fd0:   0000000040b112f0 00002aab09796260\n0x0000000040b10fe0:   0000000040b110e0 00002aaaaae9d7d8\n0x0000000040b10ff0:   00002aaaab40f3d0 00002aab08c2a4c8\n0x0000000040b11000:   0000000040b11940 00002aab09796260\n0x0000000040b11010:   00002aab09795b28 0000000000000000\n0x0000000040b11020:   00002aab08c2a4c8 00002aab009b9750\n0x0000000040b11030:   00002aab09796260 0000000040b11940\n0x0000000040b11040:   00002aaaab40f3d0 0000000000002023\n0x0000000040b11050:   0000000040b11940 00002aab09796260\n0x0000000040b11060:   0000000040b11090 00002aaaab0f199e\n0x0000000040b11070:   0000000040b11978 00002aab08c2a458\n0x0000000040b11080:   00002aaaab413210 0000000000002023\n0x0000000040b11090:   0000000040b110e0 00002aaaab0f1fcf\n0x0000000040b110a0:   0000000000002023 00002aab09796260\n0x0000000040b110b0:   00002aab08c2a3c8 0000000040b123b0\n0x0000000040b110c0:   00002aab08c2a458 0000000040b112f0\n0x0000000040b110d0:   00002aaaab40f3d0 00002aab00043670\n0x0000000040b110e0:   0000000040b11160 00002aaaab0e808d\n0x0000000040b110f0:   00002aab000417c0 00002aab009b66a8\n0x0000000040b11100:   0000000000000000 00002aab009b9750\n0x0000000040b11110:   0000000040b112f0 00002aab009bb360\n0x0000000040b11120:   0000000000000003 0000000040b113d0\n0x0000000040b11130:   01002aab0052d0c0 0000000040b113d0\n0x0000000040b11140:   00000000000000b3 0000000040b112f0\n0x0000000040b11150:   0000000040b113d0 00002aab08c2a108 \n\nInstructions: (pc=0x00002aaaaadb9e3f)\n0x00002aaaaadb9e2f:   48 89 5d b0 49 8b 55 08 49 8b 4c 24 08 48 8b 32\n0x00002aaaaadb9e3f:   4c 8b 21 8b 4e 1c 49 8d 7c 24 10 89 cb 4a 39 34 \n\nStack: [0x0000000040a13000,0x0000000040b14000],  sp=0x0000000040b10f60,  free space=1015k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [libjvm.so+0x1fce3f]\nV  [libjvm.so+0x2df2e4]\nV  [libjvm.so+0x2e07d8]\nV  [libjvm.so+0x52b08d]\nV  [libjvm.so+0x524914]\nV  [libjvm.so+0x51c0ea]\nV  [libjvm.so+0x519f77]\nV  [libjvm.so+0x519e7c]\nV  [libjvm.so+0x519ad5]\nV  [libjvm.so+0x1e0cf4]\nV  [libjvm.so+0x2a0bc0]\nV  [libjvm.so+0x528e03]\nV  [libjvm.so+0x51c0ea]\nV  [libjvm.so+0x519f77]\nV  [libjvm.so+0x519e7c]\nV  [libjvm.so+0x519ad5]\nV  [libjvm.so+0x1e0cf4]\nV  [libjvm.so+0x240eba]\nV  [libjvm.so+0x1e05c7]\nV  [libjvm.so+0x248ec8]\nV  [libjvm.so+0x248866]\nV  [libjvm.so+0x62a3f9]\nV  [libjvm.so+0x6246a1]\nV  [libjvm.so+0x505eea]\n\n\nCurrent CompileTask:\nC2:2408  !   org.apache.lucene.index.DocumentWriter.invertDocument(Lorg/apache/lucene/document/Document;)V (482 bytes)",
    "attachments": {
        "hs_err_pid13693.log": "https://issues.apache.org/jira/secure/attachment/12422005/hs_err_pid13693.log",
        "hs_err_pid21301.log": "https://issues.apache.org/jira/secure/attachment/12394517/hs_err_pid21301.log",
        "jvmerror.log": "https://issues.apache.org/jira/secure/attachment/12418030/jvmerror.log",
        "hs_err_pid27882.log": "https://issues.apache.org/jira/secure/attachment/12394518/hs_err_pid27882.log",
        "hs_err_pid10565.log": "https://issues.apache.org/jira/secure/attachment/12394461/hs_err_pid10565.log"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-07-22T15:02:45+0000",
            "content": "Have you tried the latest Java6 JVM to see if this issue has been fixed?\n ",
            "author": "Yonik Seeley",
            "id": "comment-12615638"
        },
        {
            "date": "2008-07-22T16:49:45+0000",
            "content": "I've looked in the release notes for recent patches but there's nothing obviously in that direction. We can certainly try updating the JVM - but I was hoping for some feedback from a Lucene expert who might be able to go - 'Ah yeah that's because of xyz'. \n\nThe problem is not reliable - we've had it fail once with this error since we changed our scheduled re-indexing to run hourly. ",
            "author": "Kevin Richards",
            "id": "comment-12615671"
        },
        {
            "date": "2008-07-22T17:06:36+0000",
            "content": "It looks like this is <= version 2.2 of Lucene?\n\nThere's at least one other known JRE bug affecting Lucene (LUCENE-1282), also JRE versions 1.6.0_04 and _05, but only on version 2.3+ of Lucene. ",
            "author": "Michael McCandless",
            "id": "comment-12615674"
        },
        {
            "date": "2008-09-22T17:51:18+0000",
            "content": "This is a JRE bug. ",
            "author": "Michael McCandless",
            "id": "comment-12633397"
        },
        {
            "date": "2008-09-23T02:23:18+0000",
            "content": "Do you have a number or link for the JRE bug? Do you know what versions it applies to?\n\nThanks! ",
            "author": "Rick Masters",
            "id": "comment-12633596"
        },
        {
            "date": "2008-09-23T08:32:37+0000",
            "content": "Sorry \u2013 I don't know which specific JRE bug this is.  It'd be good to test if it's the same JRE bug behind LUCENE-1282 and if not, try to further isolate/characterize it (after upgrading to the lastest JRE 1.6 release). ",
            "author": "Michael McCandless",
            "id": "comment-12633653"
        },
        {
            "date": "2008-10-22T05:27:13+0000",
            "content": "We have hit this issue in our QA environment as well, running Lucene 2.2 and Java SE 1.6.0_4 in -server mode.  We will be upgrading to update 10 to see if it is solved (as with LUCENE-1282). ",
            "author": "Alison Winters",
            "id": "comment-12641717"
        },
        {
            "date": "2008-10-22T09:08:41+0000",
            "content": "Please post back on whether Java 6 update 10 resolves this for you.  If not, we need to try to boil your case down to a compact test case to open an issue with Sun.  That's how the issue behind LUCENE-1282 was found & fixed. ",
            "author": "Michael McCandless",
            "id": "comment-12641743"
        },
        {
            "date": "2008-11-07T02:23:49+0000",
            "content": "We have not been able to trigger this on 1.6.0_10.  That said, we have run a few more tests on 1.6.0_4 and couldn't trigger it again there either - it must be a pretty obscure case.  We are going to go with _10 in production because at least that hasn't failed yet. ",
            "author": "Alison Winters",
            "id": "comment-12645672"
        },
        {
            "date": "2008-11-14T05:20:44+0000",
            "content": "Just for everyone's information, we have since managed to reproduce this twice on 1.6.0_10, so this is still an active bug. I have raised the issue with Sun, and will link to the Sun Bug DB when the bug is accepted. I have linked without a test case, obviously if someone has the expertise to distil it into something easily reproducible that would be a huge help. I'll have a go and report back. It's hard because it occurs so rarely for us (but commong enough that we're scared about going live) ",
            "author": "Paul Cowan",
            "id": "comment-12647522"
        },
        {
            "date": "2008-11-18T20:54:13+0000",
            "content": "Just to confirm, it was at least b28 of 1.6.0_10 (or, now, the released version of 1.6.0_10) that you see the bug happen?\n\nPaul can you describe how your app uses Lucene?  Are you changing any of the default settings (RAM buffer size, mergeFactor etc)?\n\nA few things to try might be using a single thread for indexing (if you're using multiple threads now), switching back to SerialMergeScheduler, switching between autoCommit false vs true, very small or very large ram buffer sizes, etc.  If one of these changes stops the bug or makes it more frequent then it's at least some progress towards narrowing it down. ",
            "author": "Michael McCandless",
            "id": "comment-12648748"
        },
        {
            "date": "2008-11-18T21:33:31+0000",
            "content": "java version \"1.6.0_10\"\nJava(TM) SE Runtime Environment (build 1.6.0_10-b33)\nJava HotSpot(TM) 64-Bit Server VM (build 11.0-b15, mixed mode)\n\nFor clarity, there's 2 Paul's, myself included, and Alison here on the discussion thread, all from Aconex (we're all talking about the same problem at the same company, but are sharing in the discussion based on different analysis we're doing.\n\nWe've recently upgraded to using Lucene 2.2 from 2.0 (yes, way behind, but we're cautious here..), and about 4 days from going into production with it.  \n\nFirst off, an observation.  The original bug report here was reported against Lucene 2.0, which we've been using in production for nearly 2 years against a few different JVM's (Java 1.5, plus a few builds of Java 1.6 up to and including 1.6.04).  We've never encountered this in production or in our load test area using Lucene 2.0.  However as soon as we switched to Lucene 2.2, using the same JRE as production (1.6.04), we started seeing these problems.  After reviewing another HotSpot crash bug (LUCENE-1282) we decided to see if JRE 1.6.010 made a difference.  Initially it did, we didn't find a problem with several load testing runs and we thought we were fine.  Then a few weeks later, we started to see it occurring more frequently, yet none of the code changes in our application since the initial 1.6.010 switch could logically be connected to the indexing system at all (our application is spilt between an App, and an Index/Search server, and the SVN diff between the load testing tag runs didn't have any code change that was Indexer/Search related).\n\nAt the same time we had a strange network problem going on in the load testing area that was causing problems with the App talking to the Indexer, which was caused by a local DNS problem.  Inexplicably the JRE crash hasn't happened that I'm aware of; how that is related to the JRE hotspot compilation of Lucene byte-code, I have no idea.. BUT, since we had several weeks of stability and then several crashes, this is purely anecdotal/coincidental.  I'm still rubbing my rabbits foot here.  I need to chat with Alison & Paul Cowan about this to get more specific details about if/when the crash has occurred since the DNS problem was resolved, because it could purely be a statistical anomaly (we simply may not have done many runs to flush it out), and frankly I could be mistaken in the # crashes in the load testing env.\n\nFor incremental indexing (which is what is happening during the load test that crashes) we are using compound file format, merge factor =default(10), minMergeDocs=200, maxMergeDocs=Default(MAX_INT). it's pretty vanilla really.. (the reason for a low mergeFactor is that we have several hundred indexes open at the same time for different projects, so open file handles becomes a problem).\n\nI'll let Alison/Paul Cowan comment further, this is just my 5 Aussie cents worth.\n ",
            "author": "Paul Smith",
            "id": "comment-12648768"
        },
        {
            "date": "2008-11-21T16:57:38+0000",
            "content": "We are seeing the same issue on 32 bit OS and JVM. Our lucene version is 2.0 and JVM info is:\n\njava version \"1.6.0_10\"\nJava(TM) SE Runtime Environment (build 1.6.0_10-b33)\nJava HotSpot(TM) Server VM (build 11.0-b15, mixed mode)\n\nWe have run on this version with Java 1.5 for about 2 years now without any issues.\n\nThe problem seems to happen only on the server that updates the index incrementally. We have not had any DNS issues either.  ",
            "author": "Manish Dubey",
            "id": "comment-12649706"
        },
        {
            "date": "2008-11-21T20:45:56+0000",
            "content": "Can you attach the JRE's crash log? ",
            "author": "Michael McCandless",
            "id": "comment-12649790"
        },
        {
            "date": "2008-11-21T22:56:48+0000",
            "content": "Log of jvm segv. ",
            "author": "Manish Dubey",
            "id": "comment-12649839"
        },
        {
            "date": "2008-11-23T20:11:43+0000",
            "content": "2 crash dumps attached. ",
            "author": "Paul Smith",
            "id": "comment-12650049"
        },
        {
            "date": "2008-11-23T20:57:21+0000",
            "content": "These 3 crashes happen while compiling DocumentWriter.invertDocument.  It must be a bug in Sun's hotspot compiler.  Has anyone opened an issue at http://bugs.sun.com yet?\n\nThat method, which inverts a single document, was replaced with new code starting with 2.3, so it's possible you can workaround the bug by upgrading to 2.3 or 2.4.  But it'd still be nice to get the actual hotspot bug fixed. ",
            "author": "Michael McCandless",
            "id": "comment-12650050"
        },
        {
            "date": "2008-11-23T21:01:37+0000",
            "content": "yeah, it's definitely a Sun bug, not a Lucene one, but like the other recent JVM crash issue it sort of 'affects' Lucene specifically.  Must be something about that byte code.  No idea why it does/does not trigger it.\n\nWe've raised a Sun bug, but it hasn't 'appeared' online yet (Paul Cowan raised it).  Will post the cross link to it once we have confirmation that Sun has deemed it 'worthy' to accept it.\n ",
            "author": "Paul Smith",
            "id": "comment-12650051"
        },
        {
            "date": "2009-06-26T08:07:54+0000",
            "content": "We've just run into this bug with Lucene 2.1.0 and jdk 1.6.0_07-b06. \n\nAre there any news on this issue? Sun can't ignore a HotSpot compiler bug, can they? I can contribute a crash log if desired. ",
            "author": "Michael B\u00f6ckling",
            "id": "comment-12724422"
        },
        {
            "date": "2009-06-26T09:11:00+0000",
            "content": "Sun can't ignore a HotSpot compiler bug, can they? \nThey are safely ignoring CMS collector bugs on 64bit archs. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12724441"
        },
        {
            "date": "2009-08-28T22:32:59+0000",
            "content": "Here's the JVM error I'm seeing on Amazon EC2:\n\njava version \"1.6.0_07\"\nJava(TM) SE Runtime Environment (build 1.6.0_07-b06)\nJava HotSpot(TM) 64-Bit Server VM (build 10.0-b23, mixed mode)\n\n#\n\n\tAn unexpected error has been detected by Java Runtime Environment:\n#\n\tSIGSEGV (0xb) at pc=0x00002aaaab852a01, pid=2747, tid=1077070160\n#\n\tJava VM: Java HotSpot(TM) 64-Bit Server VM (10.0-b23 mixed mode linux-amd64)\n\tProblematic frame:\n\tV  [libjvm.so+0x2faa01]\n#\n\tAn error report file with more information is saved as:\n\t/mnt/solr/conf/hs_err_pid2747.log\n#\n\tIf you would like to submit a bug report, please visit:\n\thttp://java.sun.com/webapps/bugreport/crash.jsp\n#\n\n ",
            "author": "Jason Rutherglen",
            "id": "comment-12749010"
        },
        {
            "date": "2009-10-13T18:22:08+0000",
            "content": "I just encountered this error in our own QA environment. The last 3 days our JVM has been dying around 3AM with this bug and I am running 1.6.0_12. What OS/hardware environments are causing problems? I am running CentOS 5.2 and I'll attach my crash dump too.\n\nHas anyone seen any info on the Sun lists about this? I perused the change logs from 13-16 and didn't see anything specific to this unless it was listed as something else. ",
            "author": "Amit Nithian",
            "id": "comment-12765180"
        }
    ]
}