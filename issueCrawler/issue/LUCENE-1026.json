{
    "id": "LUCENE-1026",
    "title": "Provide a simple way to concurrently access a Lucene index from multiple threads",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index",
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "For building interactive indexes accessed through a network/internet (multiple threads).\n\nThis builds upon the LuceneIndexAccessor patch. That patch was not very newbie friendly and did not properly handle MultiSearchers (or at the least made it easy to get into trouble).\n\nThis patch simplifies things and provides out of the box support for sharing the IndexAccessors across threads. There is also a simple test class and example SearchServer to get you started.\n\nFuture revisions will be zipped.\n\nWorks pretty solid as is, but could use the ability to warm new Searchers.",
    "attachments": {
        "IndexAccessor.04032008.zip": "https://issues.apache.org/jira/secure/attachment/12379337/IndexAccessor.04032008.zip",
        "IndexAccessor.java": "https://issues.apache.org/jira/secure/attachment/12367524/IndexAccessor.java",
        "TestIndexAccessor.java": "https://issues.apache.org/jira/secure/attachment/12367529/TestIndexAccessor.java",
        "IndexAccessor-02.07.2008.zip": "https://issues.apache.org/jira/secure/attachment/12374964/IndexAccessor-02.07.2008.zip",
        "DefaultMultiIndexAccessor.java": "https://issues.apache.org/jira/secure/attachment/12367523/DefaultMultiIndexAccessor.java",
        "IndexAccessor-1.26.2008.zip": "https://issues.apache.org/jira/secure/attachment/12374122/IndexAccessor-1.26.2008.zip",
        "shai-IndexAccessor.zip": "https://issues.apache.org/jira/secure/attachment/12370422/shai-IndexAccessor.zip",
        "shai-IndexAccessor3.zip": "https://issues.apache.org/jira/secure/attachment/12370527/shai-IndexAccessor3.zip",
        "IndexAccessor-02.04.2008.zip": "https://issues.apache.org/jira/secure/attachment/12374729/IndexAccessor-02.04.2008.zip",
        "IndexAccessorFactory.java": "https://issues.apache.org/jira/secure/attachment/12367525/IndexAccessorFactory.java",
        "MultiIndexAccessor.java": "https://issues.apache.org/jira/secure/attachment/12367526/MultiIndexAccessor.java",
        "DefaultIndexAccessor.java": "https://issues.apache.org/jira/secure/attachment/12367522/DefaultIndexAccessor.java",
        "StopWatch.java": "https://issues.apache.org/jira/secure/attachment/12367528/StopWatch.java",
        "shai-IndexAccessor-2.zip": "https://issues.apache.org/jira/secure/attachment/12370507/shai-IndexAccessor-2.zip",
        "IndexAccessor.zip": "https://issues.apache.org/jira/secure/attachment/12370552/IndexAccessor.zip",
        "IndexAccessor-02.28.2008.zip": "https://issues.apache.org/jira/secure/attachment/12376789/IndexAccessor-02.28.2008.zip",
        "SimpleSearchServer.java": "https://issues.apache.org/jira/secure/attachment/12367527/SimpleSearchServer.java",
        "IndexAccessor-2.15.2008.zip": "https://issues.apache.org/jira/secure/attachment/12375741/IndexAccessor-2.15.2008.zip",
        "IndexAccessor-05.27.2008.zip": "https://issues.apache.org/jira/secure/attachment/12382896/IndexAccessor-05.27.2008.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-11-28T16:07:18+0000",
            "content": "Hi\nI've downloaded the code and tried to run the tests, but I think there are some problems:\n1. The delete() method in the test attempts to delete the directory, and not the underlying files. So in effect it does not do anything.\n2. Some of the tests that start new threads don't wait for them (by calling join()). That of course causes some Accessors to be removed (after you call closeAllAccessors()), while those threads are sill running.\nI've fixed those issues in the test. I'd appreciate if you can take a look.\n\nAlso, in IndexAccessorFactory I've found some issues:\n1. I guess you wanted to have it as a Singleton - so I defined a private default constructor to prevent applications from instantiating it.\n2. I modified the code of createAccessor to first lookup if an accessor for that directory already exists. It should save the allocation of DefaultIndexAccessor.\n3. I modified the implementation of other methods to access the HashMap of accessors more efficiently.\n\nI'd appreciate if you can review my fixes. I'll attach them separately. ",
            "author": "Shai Erera",
            "id": "comment-12546288"
        },
        {
            "date": "2007-11-28T17:08:20+0000",
            "content": "Hey Shai,\n\nThese fixes are great and I will incorporate them all.\n\nI worked this up very quickly based on other less general code I am using. While I have not yet used this code for a project, it will be the framework that I migrate to for future projects. It should see much more development then. I am very eager to add some Searcher warming for one. Also, the tests where whipped together quite quickly. I appreciate your efforts at cleaning them up.\n\nBuffing up the SearchServer code to production level will also be on my list.\n\nThanks for your improvements \u2013 if you do any more work, keep me posted.\n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12546304"
        },
        {
            "date": "2007-11-29T08:01:20+0000",
            "content": "Hey Mark, few more questions:\n1. Why is StopWatch needed? it seems like the only thing it does is count the time of execution of the code. That can be easily achieved by writing this:\nlong time = System.currentTimeMillis();\n<code>\nwrite any code here\n</code>\ntime = System.currentTimeMillis() - time;\nSystem.out.println('time: \" + time + \" ms\");\n\nAm I missing something?\n\n2. In DefaultIndexAccessor there's this code:\n  public int writersOut() {\n    int writers;\n\n    synchronized (this) \n{\n      writers = this.writerUseCount;\n    }\n\n    return writers;\n  }\n\nI think it should be replaced with:\n  public int writersOut() \n{\n    return writerUseCount;\n  }\nNo need to synchronize on this since you're only returning the value, not performing any modifications to it. The same goes for writingReadersOut, activeSearchers, isOpen.\nWhat do you think?\n\n3. open() \u2013 is there a real need to throw an exception if someone called the accessor.open() twice?\n\nI'll attach the modified test and DefaultIndexAccessor files for your review. I'd apprecite if you can answer the questions. ",
            "author": "Shai Erera",
            "id": "comment-12546592"
        },
        {
            "date": "2007-11-29T08:02:36+0000",
            "content": "Includes the changes to the files based on the comments I've recently posted ",
            "author": "Shai Erera",
            "id": "comment-12546593"
        },
        {
            "date": "2007-11-29T12:22:33+0000",
            "content": "Hey Mark,\nI've cleaned up the code, added javadoc and organized the tests. Can you please review the changes - I think the code is even more simpler now.\n\n1. I think we should remove StopWatch. Unless I'm missing something, it looks like it's doing nothing important, inefficiently .\n2. What is the SimpleSearchServer? Is this like a sample program? ",
            "author": "Shai Erera",
            "id": "comment-12546694"
        },
        {
            "date": "2007-11-29T12:23:46+0000",
            "content": "Based on my previous comments. ",
            "author": "Shai Erera",
            "id": "comment-12546695"
        },
        {
            "date": "2007-11-29T12:42:15+0000",
            "content": "Hey Mark, few more questions:\n1. Why is StopWatch needed? \n\nStopWatch could certainly be taken out. I simply used it for timing...to show someone else that it doesn't take that long to get an accessor. I have no problem with removing it.\n\n2. No need to synchronize on this since you're only returning the value, not performing any modifications to it. \n\nIts possible this could be taken out. I doubt there would be any noticeable trouble if you tried to read that value while another thread was updating it.\n\n3. open() - is there a real need to throw an exception if someone called the accessor.open() twice?\n\nNo real need I suppose. I believe this came in from the original code. I have no objections to taking it out.\n\n\nSimpleSearchServer is an attempt to give an example that shows how this code can be used to create a very simple class that allows multi-threaded access to a Lucene index. I whipped it out extremely quickly, but its something I would like to build on. It can be nice to hide the IndexAccessor code behind a simple to use class that hides Lucene and a lot of complexity.\n\nThanks for your work on this! \n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12546702"
        },
        {
            "date": "2007-11-29T13:25:02+0000",
            "content": "Quick comment:\n\nYou have the MultiSearcher closing its own IndexAccessor's now. Maybe I messed up copying in your changes, but this causes an Exception in the tests as the IndexFactory also closes all of the IndexAccessor's. (Really, it owns them)\n\nIt's probably a good idea for the MultiSearcher to have a close (clearing the two caches is not a bad idea), but I don't think the MultiSearcher should close IndexAccessors. It does not own those Accessors and other threads may be using them from the Factory. They are only kept around in the MultiSearcher so that it can release them later, back to the Factory.\n\nAlso, probably the Factory.close method should call the MultiSearcher close rather than having to get the MuliSearcher and call close separately?\n\nThoughts?\n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12546719"
        },
        {
            "date": "2008-01-26T18:22:24+0000",
            "content": "Updated to use the new reopen method on IndexReader. ",
            "author": "Mark Miller",
            "id": "comment-12562897"
        },
        {
            "date": "2008-02-03T14:03:33+0000",
            "content": "The last ZIP has an incomplete Reading IndexReader reopen method. Clerical error while zipping.\n\nNew ZIP in the next couple days rectifying that, as well as:\n\nAbility to warm Searchers before putting them into rotation.\nRemoved sync blocks around getting an IndexAccessor by using a ConcurrentHashMap. Nice contention relief.\n\nBTW, code relies on min Java 1.5 ",
            "author": "Mark Miller",
            "id": "comment-12565174"
        },
        {
            "date": "2008-02-05T00:23:27+0000",
            "content": "Putting up a new rev and hoping for some feedback.\n\nCertainly usable, but there are still some things I would like to fine tune and improve.\n\nThis is a big improvement over the last patch.\n\n\n\tWhen creating an IndexAccessor you can now optionally pass a query and sort fields to warm new Readers before they are put into production.\n\tReleasing a Writer never blocks for a reopen now - so after adding a doc it may be a second or two before its visible to new Searchers\n\tRemoved sync blocks around IndexAccessor retrievals makes getting an accessor much faster.\n\tFixed the Reading Reader reopen method.\n\n ",
            "author": "Mark Miller",
            "id": "comment-12565616"
        },
        {
            "date": "2008-02-16T01:57:30+0000",
            "content": "Fixes a bug caused by threads sharing a Map when using a MultiIndexAccessor. Each thread now has its own Map. MultiIndexAccessor is no longer considered thread safe. It was only considered to be a thread safe class before because it did MultiSearcher caching. Now that only sub Searchers are cached, there is no reason to share this class across threads. This change fixes the bug. Be sure to release a MutliSearcher with the same MultiIndexAccessor that created it.  ",
            "author": "Mark Miller",
            "id": "comment-12569487"
        },
        {
            "date": "2008-02-29T03:07:43+0000",
            "content": "Previous change made it so that you cannot reopen a closed IndexAccessor. This release makes reopen possible again. ",
            "author": "Mark Miller",
            "id": "comment-12573574"
        },
        {
            "date": "2008-03-10T04:50:19+0000",
            "content": "Is there any specific reason why this indexaccessor is limited to FSDirectory based indexes? I see FSDirectory.getFile() is used as a unique key in the list of IndexAccessors in the factory. However, it seems more natural to use dir.getLockID() for this purpose. Then it would be possible to use a generic Directory rather than the file-system specific FSDirectory. ",
            "author": "Asgeir Frimannsson",
            "id": "comment-12576858"
        },
        {
            "date": "2008-04-03T23:54:47+0000",
            "content": "Various tiny tweaks and now provides indexes based on Directory rather than File. This lets you use any Directory imp rather than just FSDirectory.\n\nSVN at: http://myhardshadow.com/indexaccessor/trunk/\n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12585350"
        },
        {
            "date": "2008-05-27T16:10:11+0000",
            "content": "Just checked out the source from the svn link above.  I've got a few questions about the code\n\n1 - why use ReentrantLock rather than synchronized blocks?  The advice I have come across is to use the standard mechanism unless you need the extra functionality.  Can't see anywhere in the code that needs this e.g. obtaining and releasing the lock in different methods or using more than one condition.\n\n2 - why call logger.isLoggable all the time for simple log statements?\n\n3 - In getWriter(boolean) the parameter is ignored if a write already exists.\n\n4 - Why is condition.signalAll() called from getReadingReader()?\n\n ",
            "author": "John Patterson",
            "id": "comment-12600169"
        },
        {
            "date": "2008-05-27T20:38:38+0000",
            "content": "Bunch of new code coming on this tonight or tomorrow...I consider it basically the 1.0 version.\n\n1. In my testing the ReentrantLock is much faster than the sync blocks under contention.\n2. Logger.isLoggable is supposed to be faster than logging at a level thats not turned on.\n3. The param is not for create, but for autoCommit. Create is called when you ask for an accessor that doesnt exist yet.\n4. Why do you ask? I can't remember at the moment, but at first glance it looks like its unnecessary. It may have been done just because its done in getSearcher (where it is needed - or where it was needed before switching to reopen...need to double check this now). Ill investigate further and possibly take it out. The new code fixes a bunch of issues with the Reader handling. The Searcher handling works great though.  ",
            "author": "Mark Miller",
            "id": "comment-12600266"
        },
        {
            "date": "2008-05-27T20:55:23+0000",
            "content": "2. Logger.isLoggable is supposed to be faster than logging at a level thats not turned on.\n\nThat is certainly true if you are creating a string from an object, or concatenating strings.  I don't believe that is true for static strings.\n\nE.g., \n\nlogger.fine(\"closing cached reading reader\");\n\n you might as well skip the Logger.isLoggable.  In the case \n\nlogger.fine(\"closing cached searchers (\" + cachedSearchers.size() + \")\");\n\n it is certainly better to check the log level first. ",
            "author": "Sean Timm",
            "id": "comment-12600274"
        },
        {
            "date": "2008-05-28T02:10:34+0000",
            "content": "Well I changed too much tonight to consider it a 1.0 type code dump (beyond a bunch of changes that I was waiting to release). Every time I look at this thing I feel the need to gut more of the original LuceneIndexAccessor stuff.\n\nI think all of the similarity stuff is actually totally unnecessary, which means no more searcherCache. Also, no real need for a Searcher reader and a Reading reader. So I have stripped things down a bit to just a little more than you'd need (still nice to be able to work by Searcher if you want to).\n\nFeedback most welcome. ",
            "author": "Mark Miller",
            "id": "comment-12600343"
        },
        {
            "date": "2008-12-07T23:21:53+0000",
            "content": "Anyone use this? I think its convenient myself, but these IndexAccessor patches have never seemed very popular in terms of making it into Lucene. I'd like to get to the point of either dropping the idea and closing the two issues that deal with it, or moving something to contrib. Any thoughts / preferences? ",
            "author": "Mark Miller",
            "id": "comment-12654258"
        },
        {
            "date": "2008-12-11T05:46:23+0000",
            "content": "My impression was that this didn't stick, so I'd drop it. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12655525"
        }
    ]
}