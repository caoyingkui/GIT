{
    "id": "SOLR-4478",
    "title": "Allow cores to specify a named config set in non-SolrCloud mode",
    "details": {
        "affect_versions": "4.2,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Part of moving forward to \"the new way\", after SOLR-4196 etc... I propose an additional parameter specified on the <core> node in solr.xml or as a parameter in the \"discovery\" mode core.properties file, call it configSet, where the value provided is a path to a directory, either absolute or relative. Really, this is as though you copied the conf directory somewhere to be used by more than one core.\n\nStraw-man: There will be a directory <solr_home>/configsets which will be the default. If the configSet parameter is, say, \"myconf\", then I'd expect a directory named \"myconf\" to exist in <solr_home>/configsets, which would look something like\n<solr_home>/configsets/myconf/schema.xml\n                              solrconfig.xml\n                              stopwords.txt\n                              velocity\n                              velocity/query.vm\n\netc.\n\nIf multiple cores used the same configSet, schema, solrconfig etc. would all be shared (i.e. shareSchema=\"true\" would be assumed). I don't see a good use-case for not sharing schemas, so I don't propose to allow this to be turned off. Hmmm, what if shareSchema is explicitly set to false in the solr.xml or properties file? I'd guess it should be honored but maybe log a warning?\n\nMostly I'm putting this up for comments. I know that there are already thoughts about how this all should work floating around, so before I start any work on this I thought I'd at least get an idea of whether this is the way people are thinking about going.\n\nConfigset can be either a relative or absolute path, if relative it's assumed to be relative to <solr_home>.\n\nThoughts?",
    "attachments": {
        "solr.log": "https://issues.apache.org/jira/secure/attachment/12637413/solr.log",
        "SOLR-4478.patch": "https://issues.apache.org/jira/secure/attachment/12581794/SOLR-4478.patch",
        "SOLR-4478-take2.patch": "https://issues.apache.org/jira/secure/attachment/12618614/SOLR-4478-take2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13597347",
            "date": "2013-03-08T18:00:25+0000",
            "content": "Erick, this is specifically for multicore, and not SolrCloud, right?  I ask because this idea seems very much like the named configurations used per collection in SolrCloud.  \n\nI have no idea if the two ideas could be unified, but if so, it might be worth exploring. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13597404",
            "date": "2013-03-08T19:03:41+0000",
            "content": "Steve:\n\nActually, it's the other way 'round. The idea of config sets for multcore had its origins in SolrCloud and this is being implemented (rather than some other options that were discussed several months ago) exactly to unify the two going forward....... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13597424",
            "date": "2013-03-08T19:22:02+0000",
            "content": "The idea of config sets for multcore had its origins in SolrCloud\n\nRight, it would probably to make the most sense to name \"configsets\" as \"configs\" to match the layout in ZK. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13597430",
            "date": "2013-03-08T19:26:58+0000",
            "content": "Actually, it's the other way 'round. The idea of config sets for multcore had its origins in SolrCloud and this is being implemented (rather than some other options that were discussed several months ago) exactly to unify the two going forward.......\n\nCool!  Sorry for the Solr newb question  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13597440",
            "date": "2013-03-08T19:33:44+0000",
            "content": "@Steve:\nNP, there was a lot of discussion around all this, I'm just glad someone's paying attention...\n\n@Yonik:\nNoted. Glad you're paying attention too <G>.. I'm about to start working on this, so nothing's set in stone. So:\n1> directory is <solr_home>/configs. How deep does this go? Say I have a configuration named erick. Is the tree <solr_home>/configs/erick/conf/schema.xmlandaltherest or <solr_home>/configs/erick/schema.xmlandaltherest?\n2> property in core.properties is configName? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13603565",
            "date": "2013-03-15T17:36:42+0000",
            "content": "Starting on this finally, couple of points for discussion:\n\nWhat do we do with each of these if we find a configSet entry in the core.properties file?\n > instanceDir - nothing to do here except we don't look here for configuration files\n > dataDir     - again, nothing. The meaning remains unchanged.\n > config      - check that it exists in the config set and blow up if we don't find it.\n > schema      - treat as config.\n\nfor config and schema, it hurts my head to think of resolving relative paths, absolute paths, the relationship to solr_home, the relationship of referenced files ( stopwords, etc). At least for the first cut I want to allow the config and schema files to be a different name, but that's it. And require that they live in the configSet directory. Unless all of this just automagically happens through the resource loader.\n\nThe properties entry in the core.properties file (doesn't depend on configSet) - does it make sense to have it any more at all? I propose we deprecate it.\n\nIs there a convenient place in the SolrCloud code that I can rip off? I'll look but I don't want to re-invent the wheel if I miss it.... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13620064",
            "date": "2013-04-02T17:55:55+0000",
            "content": "2> property in core.properties is configName?\n\nYes, we need to align this with solr cloud config as much as possible.\nHaving configSet in some places and configName in other places isn't so hot  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13649077",
            "date": "2013-05-04T12:37:19+0000",
            "content": "Preliminary patch if anyone's interested, nocommits and all. I think it's not too far from ready, although the core reload bit is kind of a hack... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13649405",
            "date": "2013-05-05T19:53:37+0000",
            "content": "Updated patch with a problem. First I had the bright idea to interleave the configset-style and new-style core.properties files so we'd get some added testing done in OpenCloseCoreStressTest. Tests passed first time! Except for the stack traces, turns out I was eating an exception in the test that I shouldn't have been. Fortunately it seems to be a stack trace only thrown by the new code. NOTE: There's a nocommit in OpenCloseCoreStressTest that forces all cores to be configset only for easier debugging on this issue.\n\nBut looking at the stack trace, there's an NPE at SearchHandler.180 or so, this line:\nShardHandler shardHandler1 = shardHandlerFactory.getShardHandler();\n\nOf course the shardHandlerFactory is null here.\n\nSo two things:\n\n1> Does it even make sense to share the SolrConfig object? I can imagine all sorts of threading issues here, but don't know the underlying code well enough to know whether to be terrified or not.\n\n2> Any clue why the shardHandlerFactory would be null? Near as I can tell, the SolrResourceLoader.inform method is where the problem starts, it sets the \"live\" member variable and later the NPE happens since the \"live\" member var aborts processing in the newInstance method.\n\nAnd if it's as simple as giving each core a new ResourceLoader, is there any point or is the work required at that point enough that sharing the solrconfig isn't worth the effort.\n\nOf course it may just be a sequencing issue, but I'm a little lost today, any wisdom gratefully received. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13710994",
            "date": "2013-07-17T11:45:13+0000",
            "content": "If anyone has some spare cycles to work on this, please let me know. It's not that I'm stymied, I'm just having a really hard time finding the cycles to work on it. I can get this patch compiling again (after Alan and Mark and I did some reorganizing of all the persistence stuff, this is probably in kind of poor shape).\n\nOtherwise I'll get to it when I can, but I've been in that state for a couple of months now. I'm not looking to pass this off to someone completely, unless someone really wants it all for themselves, just looking for some extra energy.  "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13711053",
            "date": "2013-07-17T13:10:05+0000",
            "content": "SolrConfig should be immutable, so I think that's safe to share.  The thing that worries me slightly here is the interaction between shared configsets and mutable schemas.  If two cores are sharing a config set with a managed schema, and someone makes changes to the schema under one of them, does the other core pick up the changes as well?  Or does each core create it's own resourceloader, schema, etc from the shared config?\n\nI think we definitely want to combine this with the ZK loading code.  There are already a bunch of places that have 'if (zk) doThis else doThat' spaghetti in them.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13711085",
            "date": "2013-07-17T13:52:35+0000",
            "content": "If two cores are sharing a config set with a managed schema, and someone makes changes to the schema under one of them, does the other core pick up the changes as well?\n\nI think it should...  It's one logical schema, just as if you changed it on disk and reloaded/restarted the cores.  One physical schema == one logical schema.  It also already effectively works this way in Cloud mode. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13711098",
            "date": "2013-07-17T14:03:34+0000",
            "content": "OK, how about this for an idea?  Configsets are always shared, and so changes in one schema are reflected in all of them.  But we add an option at core creation time to use the configset as a template, rather than sharing it, which copies the configset contents into the new core's config directory (whether on the filesystem or in Zk).  Maybe add a command that will do this after core creation as well.  So you can share all your config, but if you later decide that one core needs to diverge, then you split it off with it's own setup. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13711122",
            "date": "2013-07-17T14:13:38+0000",
            "content": "bq: we add an option at core creation time to use the configset as a template, rather than sharing it, which copies the configset contents into the new core's config directory\n\n-1 as an initial reaction as stated. I really don't want to have a command that creates a mixed set of config sets and local-to-core configurations, if they want that control they can do it manually. And the +1 below keeps things more congruent with SolrCloud.\n\n+1 if we change it slightly. Use a template, but copy it to the config set directory with a new name and use that.\n\nBTW, the tentative directory structure is \n<solr_home>/configs/configset1\n<solr_home>/configs/configset2\nand so on, so copying from one to another should be straight-forward.\n\nIn fact it's an open question (at least to me) whether we support local-to-core configurations in 5.0 or require config sets. We could support both, which is used is controlled by the presence/absence of a \"configName\" parameter in the core definition (<core now, but configName in core.properties) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13711135",
            "date": "2013-07-17T14:33:51+0000",
            "content": "\nIf two cores are sharing a config set with a managed schema, and someone makes changes to the schema under one of them, does the other core pick up the changes as well?\n\nI think it should... It's one logical schema, just as if you changed it on disk and reloaded/restarted the cores. One physical schema == one logical schema. It also already effectively works this way in Cloud mode.\n\n+1\n\nIn my original commit for SOLR-3251, I had code to handle shared + mutable schemas, but it wasn't all hooked up properly or tested, and with named config sets in play, I haven't pursued it.\n\nFor local shared + mutable schema, I think we have two choices:\n\n\n\tEach named config set has a single shared in-memory representation, in addition to a single shared persisted representation.\n\tEach core has its own private in-memory representation, updated when the shared persisted representation is updated.\n\n\n\n#2 nullifies the utility of shared schemas, so it's not really an option, IMHO. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13712195",
            "date": "2013-07-18T10:20:05+0000",
            "content": "Have found another problem here - what to do with core-specific properties?  Core properties are passed to the SolrConfig object at construction, so there's no way at present to use a new set of properties with an existing configset.  Same with IndexSchema, which re-uses the resource loader from SolrConfig. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13712432",
            "date": "2013-07-18T15:58:34+0000",
            "content": "OK, reconstructing an chat exchange:\n\nSharing the underlying solrconfig objects looks like it's more difficult than I thought, with some interesting corner cases that would be difficult, i.e  ${} substitutions, resource loader being shared, etc. Also, the individual core properties are embedded in the Config object, so keeping these separate is another source of getting code wrong.\n\nNot to mention that the code changes would be more extensive than anyone had hoped.\n\nAt lest the use-case of opening a core and actively using it for a while then moving on is handled by the lazy/transient core opportunities.\n\nThere is historical evidence that a significant amount of CPU resources are consumed by opening/closing cores 100s of times a second, so that scenario is still out there.\n\nThe net-net is that it's probably not worth the effort right now to really share the underlying solrConfig object across cores, too many ways to go wrong. The refactoring that's been done should make this easier if we decide to do it in the future.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13712436",
            "date": "2013-07-18T16:01:53+0000",
            "content": "I just had a bright idea, so I'll put it out there so someone can shoot it down. It seems like sharing the underlying solrConfig object is fraught with problems, but could we get an easy win by just sharing the parsed DOM object in each config set (really, same for schema object?) I don't have any measurements for what percentage of loading the schema object is spent in raw XML parsing, so I can't really say how much of a win this would be. But if it's easy/safe it might be worth considering. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13715250",
            "date": "2013-07-22T14:41:38+0000",
            "content": "handling the ${} substitutions are more work. But a lot of users who need sharing of solrconfig would be happy to sacrifice that feature. if there are ${} is solrconfig.xml and shareConfig=true we can just fail.\n\nLonger term we can support that too but will need some more changes the way properties are read  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13754089",
            "date": "2013-08-29T21:36:38+0000",
            "content": "I got to thinking about this and trying to take it out of mothballs and I'm starting to think it's a terrible idea for 4.x and should be postponed or abandoned unless and until we do something like what has been discussed elsewhere; having there be \"one source of truth\" (ZooKeeper has been discussed for instance). So I'll list out the issues I've thought about and if there are straightforward answers to them I'll be happy to reconsider.\n\nEach issue is probably technically do-able, but the sum (and ones I haven't seen yet) totally scare me.\n\n1> Traditional master/slave architectures. Let's say we change the schema (it'd have to be on the master?). How to get that to the slaves? Currently the confFiles directive has an explicit test and will not copy a directory. I'm not convinced it'd even work with relative paths and listing every file in the configset dir would be kludgy at best. And I think the confFiles directive doesn't work outside the \"conf\" directory for the core it's replicating anyway. I suppose the user could copy the configset directory to all the nodes in the farm, but....\n\n2> The new REST API for modifying the schema. In non-SolrCloud mode, how does that work? Is it only allowed on the master (assuming we can solve <1>)? How to enforce?\n\n3> Sharing the solrConfig object is also fraught with issues as discussed above. There's already the \"share schema\" option, so at least it's possible to have one shared schema.\n\n4> How to get any changes reloaded in a master/slave environment for all the affected cores on all the machines? You'd need some kind of manual process of going to each one and issuing a new command \"ReloadAllCores\" or build in some kind of notification system. Or we'd need to require the user to keep a list of all the nodes and all the cores and script reloading them all. Nobody should be re-inventing ZooKeeper.\n\n5> How to get any changes reloaded in even the non master/slave environment for all the affected cores? A new command? Periodic polling? Check every query/update request?\n\n6> Sticky wickets I haven't thought of yet, I'm afraid, very afraid... Each of these is solvable, but considering the effort involved it doesn't seem like it's worth pursuing right now, at least my interest is disappearing.\n\nAnd wrapped around this is that SolrCloud already handles most of the things I'm worried about, especially getting changes propagated to all the right places in the cluster. SolrCloud already has a way to reload all the nodes that take part in a collection. SolrCloud already has the notifications of changes to the config set built in (at least I think, if not it will). \n\nMy feeling at this point is that supporting this well would turn into a huge amount of work that would then be thrown away if we go to a \"one source of truth\" model in Solr5 (or even 6). And that actually using the capability would be fragile and complex. So unless I can be convinced otherwise, I'm going to assign this back to nobody and forget about it. "
        },
        {
            "author": "Trey Grainger",
            "id": "comment-13787277",
            "date": "2013-10-05T17:31:56+0000",
            "content": "(moving this from my previous e-mail to the solr-dev mailing list)\n\nThere are two use-cases that appear broken with the new core auto-discovery mechanism:\n\n1) The Core Admin Handler's CREATE command no longer works to create brand new cores \n(unless you have logged on the box and created the core's directory structure manually, which largely defeats the purpose of the \"CREATE\" command).  With the old Solr.xml format, we could spin up as many cores as we wanted to dynamically with the following command:\nhttp://localhost:8983/solr/admin/cores?action=CREATE&name=newCore1&instanceDir=collection1&dataDir=newCore1/data\n...\nhttp://localhost:8983/solr/admin/cores?action=CREATE&name=newCoreN&instanceDir=collection1&dataDir=newCoreN/data\n\nIn the new core discovery mode, this exception is now thrown:\nError CREATEing SolrCore 'newCore1': Could not create a new core in solr/collection1/as another core is already defined there\n\nThe exception is being intentionally thrown in CorePropertiesLocator.java because a core.properties file already exists in solr/collection1 (and only one can exist per directory).\n\n\n2) Having a shared configuration directory (instanceDir) across many cores no longer works.  \nEvery core has to have it's own conf/ directory, and this doesn't seem to be overridable any longer.  Previously, it was possible to have many cores share the same instanceDir (and just override their dataDir for obvious reasons).  Now, it is necessary to copy and paste identical config files for each Solr core.\n\n\nI don't know if there's already a current roadmap for fixing this.  I saw https://issues.apache.org/jira/browse/SOLR-4478, which suggested replacing instanceDir with the ability to specify a named configSet.  This solves problem 2, but not problem1 (since you still can't have multiple core.properties files in the same folder).  Based on Erick's comments in the JIRA ticket, it also sounds like this ticket is also dead at the moment.\n\nThere is definitely a need to have a shared config directory - whether that is through a configSet or an explicit indexDir doesn't matter to me.  There's also a need to be able to dynamically create Solr cores from external systems.  I currently can't upgrade to core auto discovery because it doesn't allow dynamic core creation.  Does anyone have some thoughts on how to best get these features working again under core autodiscovery?  Adding instanceDir to core.properties seems like an easy solution, but there must be a desire not to do that or it would probably have already been done.\n\nI'm happy to contribute some time to resolving this if there is agreed upon path forward. "
        },
        {
            "author": "Trey Grainger",
            "id": "comment-13787278",
            "date": "2013-10-05T17:34:56+0000",
            "content": "(Erick's response to my post)\n\nRight, let's move this discussion to SOLR-4779. There's some history\nhere. Sharing named config sets got a bit wrapped up in sharing the\nunderlying solrconfig object. This latter has been taken off the\ntable, but we should discuss fixing Trey's issues up. Here's what the\nthinking was:\nThere would be a directory like <solr_home>/configs/configset1,\n<solr_home>/configs/configset2, etc. Then a new parameter for\ncore.properties or create or whatever like \"configset=configset1\" that\nwould be smart enough to look in <solr_home>/configs for an entire\nconf directory named \"configste1\".\n\nTrey:\nDoes that work for your case? If so, please add your comments to 4779\nand we can take it from there. FWIW, I don't think this is especially\nhard, but time is always at a premium. "
        },
        {
            "author": "Trey Grainger",
            "id": "comment-13787282",
            "date": "2013-10-05T17:49:16+0000",
            "content": "Hi Erick,\n\nYes, that resolves the hardest of the two problems.  The other issue is that since a dedicated folder is now required per-core (to hold the core.properties file), the core CREATE command needs to now also be able to create the folder for the new core if it doesn't exist.  Something like:\nhttp://localhost:8983/solr/admin/cores?action=CREATE&name=newCore& coreDir=cores/newCore &configset=sharedconfig\n\nAlternatively, instanceDir could continue to serve that function (instead of being deprecated):\nhttp://localhost:8983/solr/admin/cores?action=CREATE&name=newCore& instanceDir=cores/newCore &configset=sharedconfig\n\nI think the combination of adding configSet and adding the ability for the CREATE command to actually create the new folder to hold core.properties should handle the use case. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13847605",
            "date": "2013-12-13T16:14:00+0000",
            "content": "I got some spare cycles, and had another stab at this.\n\n\n\tnew ConfigSet object that contains a SolrConfig and IndexSchema\n\tConfigSet loading and discovery is dealt with by a ConfigSetService, which comes in Cloud, Default and SchemaCaching varieties.\n\tConfig sets are kept in solrhome/configsets by default, but this can be configured in solr.xml\n\tThe actual schema and config objects are not shared between cores, unless the share schema flag is switched on.\n\tConcurrency in schema sharing is dealt with by using a loading cache from Guava.\n\n\n\nThis ends up tidying up some of the zookeeper/not zookeeper logic in CoreContainer as well, which is nice.  Tests are passing so far... "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13871271",
            "date": "2014-01-14T22:11:06+0000",
            "content": "@erickerickson do you have any comments on the latest patch?  I'd like to add some initial tests for the SnapPuller, but because this does everything via the SolrResourceLoader I think replication should just work.\n\nThis should also make writing tests a lot easier, as you can just point to a configset rather than having to copy files around when spinning up test cores. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13871297",
            "date": "2014-01-14T22:29:50+0000",
            "content": "Oh, man! I spent all of December sailing from the Canary Islands to Antigua. And now we're selling our house (closing 17-Jan) and driving to California. So I haven't looked at much of anything lately.....\n\nGlad you prompted me. We'll be driving out to CA over the next couple of weeks, so I should be able to spend some time looking at this, but not before Sunday.....\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13894682",
            "date": "2014-02-07T16:20:44+0000",
            "content": "Alan has some cycles for this and wants to work on it.... "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13894993",
            "date": "2014-02-07T20:31:21+0000",
            "content": "Patch updated to trunk.\n\nSnapPuller is still giving me pause here.  It allows you to define a list of config files that you want to replicate, and is hardcoded to store them under the core instancedir.  Maybe the thing to do is to add a writeConfigFile() method to SolrResourceLoader, and throw UOE on the ZkSolrResourceLoader implementation?  That way the replicated file is always written to the write place (instancedir or configset). "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13895029",
            "date": "2014-02-07T20:59:16+0000",
            "content": "I tell a lie, the SnapPuller actually writes to the dir specified by SolrCore.getResourceLoader().getConfigDir(), so it should work properly here.  Will try and write a test that exercises it properly though. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13938252",
            "date": "2014-03-17T19:24:48+0000",
            "content": "Patch updated to trunk.\n\nThe replicationhandler tests don't actually test anything in separate corecontainers at the moment, and it looks like it will be a bit of work to get that done, so I'd like to open a separate JIRA for that, and commit this asap.  I've tested this locally with a standalone setup and replication deals with this without any problems that I've found.\n\nI'll commit this patch tomorrow if there are no objections. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13939429",
            "date": "2014-03-18T16:08:16+0000",
            "content": "New patch, adding CoreAdminHandler and solrj integration. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944917",
            "date": "2014-03-24T10:54:54+0000",
            "content": "Commit 1580814 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1580814 ]\n\nSOLR-4478: Allow cores to use configurations specified outside their instance directory "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944930",
            "date": "2014-03-24T11:17:36+0000",
            "content": "Commit 1580817 from Alan Woodward in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1580817 ]\n\nSOLR-4478: Allow cores to use configurations specified outside their instance directory "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13944931",
            "date": "2014-03-24T11:18:54+0000",
            "content": "OK, so \"tomorrow\" turned into \"next week\", but there we go.  I'll hold the JIRA open until I've written something for the reference guide. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944951",
            "date": "2014-03-24T12:05:34+0000",
            "content": "Thanks! I think this'll be cool.\n\nI can hardly complain, I didn't get around to this for a year ..\n\nProbably should have an entry in the new CWiki form of the documentation too? I'm finding it extremely helpful to be able to download all that in PDF, have a single place to search the current docs (rather than Google and get something from Solr 1.4) etc.... many kudos to Cassandra & Co. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944996",
            "date": "2014-03-24T13:20:26+0000",
            "content": "Commit 1580839 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1580839 ]\n\nSOLR-4478: Test fix for Windows filepaths "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944998",
            "date": "2014-03-24T13:21:13+0000",
            "content": "Commit 1580841 from Alan Woodward in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1580841 ]\n\nSOLR-4478: Test fix for Windows filepaths "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13945160",
            "date": "2014-03-24T14:29:02+0000",
            "content": "There's a few follow up things I'd like to do as well, like managing configsets via a RestManager.\n\nI'm not sure if I've got the right permissions to edit the CWiki yet though?  (have just created a login under 'romseygeek'). "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-13946549",
            "date": "2014-03-25T13:55:33+0000",
            "content": "Alan Woodward\n\nI'm not sure if I've got the right permissions to edit the CWiki yet though? \n\nYou're a committer, so you can get the permissions. One of the PMC guys need to give them to you though, so email your Confluence account name to the PMC (private@lucene) requesting Confluence edit permissions. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13946601",
            "date": "2014-03-25T14:27:28+0000",
            "content": "Thanks Cassandra, have emailed. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13950689",
            "date": "2014-03-28T13:32:07+0000",
            "content": "I'm not sure but I think this is causing problems in SolrCloud mode. In both trunk and branch_4x, a simple SolrCloud cluster fails to start with:\n\n\n\tcd solr\n\tant example\n\tjava -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=myconf -DzkRun -DnumShards=1 -jar start.jar\n\n4392 [searcherExecutor-5-thread-1] INFO  org.apache.solr.core.SolrCore  \u2013 QuerySenderListener sending requests to Searcher@1ad91a94[collection1] main\nUnknown macro: {StandardDirectoryReader(segments_1} \n4395 [searcherExecutor-5-thread-1] ERROR org.apache.solr.core.SolrCore  \u2013 java.lang.NullPointerException\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:194)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1952)\n\tat org.apache.solr.core.QuerySenderListener.newSearcher(QuerySenderListener.java:64)\n\tat org.apache.solr.core.SolrCore$5.call(SolrCore.java:1724)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n\nThe lucene_solr_4_7 branch does not have this problem. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13950756",
            "date": "2014-03-28T14:14:45+0000",
            "content": "The shardhandlerfactory isn't getting set, which implies that inform() isn't being called for some reason.  I'll dig... "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13950773",
            "date": "2014-03-28T14:26:37+0000",
            "content": "I can't reproduce this on trunk - are you doing this on a fresh checkout Shalin? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13950805",
            "date": "2014-03-28T14:48:56+0000",
            "content": "I can't reproduce this on trunk - are you doing this on a fresh checkout Shalin?\n\nYes, I did an svn update on both branch_4x and trunk again. ant check-svn-working-copy was successful. I can reproduce it on two different machines (mac and linux) on both trunk and branch_4x. I think it is timing specific because out of four tries, one started up successfully and three failed. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13950809",
            "date": "2014-03-28T14:52:47+0000",
            "content": "I also have this in the logs:\n\n\n4243 [coreLoadExecutor-4-thread-1] ERROR org.apache.solr.core.CoreContainer  \u2013 null:org.apache.solr.common.SolrException: Unable to create core: collection1\n\tat org.apache.solr.core.CoreContainer.recordAndThrow(CoreContainer.java:911)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:568)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:261)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:253)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\nCaused by: org.apache.solr.common.SolrException: Error initializing QueryElevationComponent.\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:845)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:631)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:556)\n\t... 8 more\nCaused by: org.apache.solr.common.SolrException: Error initializing QueryElevationComponent.\n\tat org.apache.solr.handler.component.QueryElevationComponent.inform(QueryElevationComponent.java:243)\n\tat org.apache.solr.core.SolrResourceLoader.inform(SolrResourceLoader.java:631)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:836)\n\t... 10 more\nCaused by: org.apache.solr.common.SolrException: Error loading config name for collection collection1\n\tat org.apache.solr.common.cloud.ZkStateReader.readConfigName(ZkStateReader.java:167)\n\tat org.apache.solr.handler.component.QueryElevationComponent.inform(QueryElevationComponent.java:213)\n\t... 12 more\nCaused by: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /collections/collection1\n\tat org.apache.zookeeper.KeeperException.create(KeeperException.java:111)\n\tat org.apache.zookeeper.KeeperException.create(KeeperException.java:51)\n\tat org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1155)\n\tat org.apache.solr.common.cloud.SolrZkClient$7.execute(SolrZkClient.java:276)\n\tat org.apache.solr.common.cloud.SolrZkClient$7.execute(SolrZkClient.java:273)\n\tat org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkCmdExecutor.java:73)\n\tat org.apache.solr.common.cloud.SolrZkClient.getData(SolrZkClient.java:273)\n\tat org.apache.solr.common.cloud.ZkStateReader.readConfigName(ZkStateReader.java:147)\n\t... 13 more\n "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13950810",
            "date": "2014-03-28T14:53:47+0000",
            "content": "Huh, I can't reproduce it all on MacOS.  Could you attach the whole log output? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13950828",
            "date": "2014-03-28T15:00:33+0000",
            "content": "Attaching solr.log from trunk on mac. Run command was:\njava -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=myconf -DzkRun -DnumShards=1 -jar start.jar "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13950975",
            "date": "2014-03-28T16:26:27+0000",
            "content": "Aha, now I can reproduce.  I wasn't running from a clean checkout, and had an old zk data directory hanging about.  Apologies.\n\nSo the root error is the core starting up and trying to find a collection called collection1 to attach the core to, but not finding it because it hasn't been created yet.  I'm slightly confused as to why it is working in 4.7 though.  Will keep looking.\n "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13951005",
            "date": "2014-03-28T16:43:56+0000",
            "content": "OK, so the previous behaviour was to automatically create the collection in ZK if it doesn't exist for a given core.  I'd missed transferring that part to the CloudConfigSetService.  Working up a patch now. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13951062",
            "date": "2014-03-28T17:15:28+0000",
            "content": "Got it.  ConfigSolr.createConfigSetService() checks the zkHost parameter to see if we're in cloud mode, and if we are, then returns a CloudConfigSetService.  But in this case we're not passing a zkHost sysprop, we're passing zkRun instead.  So it picks a default service instead, and uses a SolrResourceLoader based on the standard config, which means that the collection node never gets created. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13951090",
            "date": "2014-03-28T17:28:38+0000",
            "content": "Commit 1582839 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1582839 ]\n\nSOLR-4478: Use CloudConfigSetService with embedded zk server "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13951093",
            "date": "2014-03-28T17:29:40+0000",
            "content": "Commit 1582840 from Alan Woodward in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1582840 ]\n\nSOLR-4478: Use CloudConfigSetService with embedded zk server "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13954567",
            "date": "2014-03-30T04:16:27+0000",
            "content": "Thanks Alan!\n\nI guess the one time it succeeded for me was because I hadn't cleared my zookeeper directory  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13967906",
            "date": "2014-04-13T18:28:08+0000",
            "content": "Alan Woodward Can this be closed then? I'm also thinking that SOLR-4779 should just be closed as \"won't fix\" since I don't see a good reason to deprecate shareSchema. The hope was that we could share everything in a config set, but as I remember sharing solrconfig was \"fraught\". It seems to me that if we want to go farther down the sharing route thing, we need to use some other sharing model than piecemeal....\n\nThoughts? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971089",
            "date": "2014-04-16T12:57:07+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13975960",
            "date": "2014-04-21T19:58:48+0000",
            "content": "This can be marked as resolved for 4.8, was keeping it open until I had managed to document it.  Which I now have! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13980548",
            "date": "2014-04-25T00:32:24+0000",
            "content": "Does anyone have a simple working example they could share?  I've been manually testing new 4.8 features and have been stumped by this feature so far...\n\n\n/heliosearch/solr/example$ mkdir -p solr/configsets/generic/conf/\n/heliosearch/solr/example$ cp -r solr/collection1/conf/* solr/configsets/generic/conf/\n/heliosearch/solr/example$ curl 'http://localhost:8983/solr/admin/cores?action=CREATE&name=books&configset=generic'\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">400</int><int name=\"QTime\">20</int></lst><lst name=\"error\"><str name=\"msg\">Error CREATEing SolrCore 'books': Unable to create core: books Caused by: Can't find resource 'solrconfig.xml' in classpath or '/heliosearch/solr/example/solr/books/conf'</str><int name=\"code\">400</int></lst>\n</response>\n\n/heliosearch/solr/example$ find solr -name solrconfig.xml\nsolr/collection1/conf/solrconfig.xml\nsolr/configsets/generic/conf/solrconfig.xml\n\n\n/heliosearch/solr/example$ cat solr/books/core.properties \n#Written by CorePropertiesLocator\n#Thu Apr 24 20:23:51 EDT 2014\nname=books\n\n\n\nSo, it's interesting that the written core.properties contains no reference to the configset.\nAnyway, I haven't dug into any code as I assume I'm just not interpreting the existing documentation correctly.\n\nedit: OK, I finally gave up and consulted the code rather than the documentation.\nIt's \"configSet\" and not \"configset\".  That's extra confusing since the default directory \"configsets\" is not camel cased. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13980787",
            "date": "2014-04-25T08:09:56+0000",
            "content": "Good catch!  I'll update the documentation, but really we ought not to care about casing. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982531",
            "date": "2014-04-27T23:25:38+0000",
            "content": "Close issue after release of 4.8.0 "
        }
    ]
}