{
    "id": "LUCENE-998",
    "title": "BooleanQuery.setMaxClauseCount(int) is static",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "BooleanQuery.setMaxClauseCount(int) is static. It does not allow searching in multiple indices from different threads using different settings. This setting should be probably moved in to the IndexSearcher.",
    "attachments": {
        "lucene-998.patch": "https://issues.apache.org/jira/secure/attachment/12401886/lucene-998.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-09-15T00:33:33+0000",
            "content": "One of the reasons this is static is so that any when any query rewrites itself to a BooleanQuery the max clause count can take effect \u2013 this is really the only situation where the max clause count is important \u2013 if BooleanQueries were only ever being constructed by client code, the clinet could stop when they want.\n\nadding this is a setting on an IndexSearcher wouldn't work \u2013 the IndexSearcher is ot involved in rewriting ... i suppose it could be moved to the IndexReader class (which is involved in rewriting) but frankly if someone was going to bother changing this, it might make more sense if the various classes that rewrite to BooleanQuery all had their own seperate setter for this (so when a new WildCardQuery is constructed, you tell thta object how big it's allowed to get when it rewrites itself) ",
            "author": "Hoss Man",
            "id": "comment-12527665"
        },
        {
            "date": "2007-09-17T07:18:12+0000",
            "content": "Please also do not forget about QueryParser. ",
            "author": "Tim Lebedkov",
            "id": "comment-12527964"
        },
        {
            "date": "2008-02-17T08:20:13+0000",
            "content": "This one doesn't look like it's happening.  Shall we close this? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12569654"
        },
        {
            "date": "2008-08-10T00:41:35+0000",
            "content": "Why not? It can always be reopened, and it doesn't look like a reasonable change near term. ",
            "author": "Mark Miller",
            "id": "comment-12621200"
        },
        {
            "date": "2009-03-10T00:42:16+0000",
            "content": "I'd like to reopen discussion on this issue and, hopefully, see it resolved. Our motivation for this is http://jira.atlassian.com/browse/JRA-13884\n\nThe single, global value for max clauses makes it difficult to use BooleanQueries in different contexts effectively. In JIRA we might want \"Find Issues\" to have a large max clause (especially because we need to add permission clauses to the query) but for an AJAXy widget that helps you autocomplete issues you want a much smaller max clauses: it would be better to have the PrefixQuery fail in this context (at least, until more characters have been typed in) than to use hundreds of megabytes of memory creating an O(number of issues) BooleanQuery.\n\nI don't follow Hoss Man's argument about why the method is static. I would change this as follows:\n\n\n\tadd a private non-static int queryMaxClauses to BooleanQuery. At construction time it is set to the static maxClauses. setters and getters would be provided to change it from the default. One problem with this approach that may impact existing code is that changing the static maxClauses would no longer affect already-created queries. I have a hard time imaging many people actually use that behaviour but what do I know?\n\n\n\n\n\tchange MultiTermQuery so there is some way to specify a new queryMaxClauses. The subclasses Fuzzy and Range queries already have a profusion of constructor arguments so I'd probably opt for another setter to avoid doubling the number of those.\n\n\n\n\n\tfind some way to actually make use of that queryMaxClauses. Right now the abstract base class MultiTermQuery creates the BooleanQuery and doesn't provide any easy way to inject the new queryMaxClauses should of overriding rewrite() and duplicating 99% of the code. That probably means I'd put the queryMaxClauses on MultiTermQuery directly.\n\n\n\nI have patches to this effect locally but wanted to try to solicit some feedback on the general approach before bothering to attach them.\n\nDownsides that I can see to this approach:\n\n\n\tThe aforementioned change regarding pre-existing queries not being affected by changing the static value of maxClauseCount.\n\tTwo or three extra function calls during query creation to fetch values. I don't imagine this would affect performance in any substantial way for people who don't use this functionality.\n\tA more complicated interface in MultiTermQuery for functionality that (obviously) most Lucene users don't care about.\n\tThere are places outside of MultiTermQuery that create BooleanQueries but won't have a way for clients to modify the underlying BooleanQuery's maxClauseCount.\n\n ",
            "author": "Justus Pendleton",
            "id": "comment-12680339"
        },
        {
            "date": "2009-03-11T01:33:50+0000",
            "content": "Patch implementing changes I proposed. ",
            "author": "Justus Pendleton",
            "id": "comment-12680722"
        },
        {
            "date": "2009-03-11T02:23:22+0000",
            "content": "One opinion:\n\nThe boolean rewrite is a fairly poor method for multi-term queries. It just doesn't scale well. I think a focus on the constant score rewrite makes more sense and constant score rewrite will be available for all of the multi-term queries in the next release. In that vein, I don't personally have a lot of interest in mucking with how you set the max clause limit. Its a pretty poor limitation to have to deal with, and I wouldn't be sad to move away from it longer term.\n\nOthers might feel differently though. ",
            "author": "Mark Miller",
            "id": "comment-12680733"
        },
        {
            "date": "2009-03-11T10:22:22+0000",
            "content": "\nThe boolean rewrite is a fairly poor method for multi-term queries. It just doesn't scale well.\n\nI agree, though I'm unsure how much better constant-score-rewrite mode\nscales.  Has anyone tested this?  (Both enumerate N TermDocs, one in\nparallel and the other serially).\n\nI think in 3.0 we should make constant-score rewrite the default?\nI'll open a separate issue for this.\n\nBut, I'm not sure constant-score rewrite helps with the use case\nJustus raised: with constant-score rewrite, there's no way to say\n\"abort the query if it hits too many terms\", which the max clause\ncount would enable. ",
            "author": "Michael McCandless",
            "id": "comment-12680830"
        },
        {
            "date": "2009-03-11T11:06:26+0000",
            "content": "Ive seen and seen reported, that the constant score version scales much better. Which makes me think the enumeration is not the main problem - on a pretty large index, I've seen the difference as fairly dramatic - say the boolean version was in the 10-20 seconds range, the constant score version a couple seconds type of thing.\n\nI do think constant score should be the default eventually.\n\nLonger term, I would hope you never have to limit the number of terms it can hit - perhaps just use the timeout collector? I have no real argument against this patch, just a string I am not interested in tugging myself. ",
            "author": "Mark Miller",
            "id": "comment-12680838"
        },
        {
            "date": "2009-03-11T11:41:09+0000",
            "content": "Timeout collector is an interesting approach, though it's not great because you will have spent XXX cpu only to determine you shouldn't have attempted the query in the first place.  Whereas the maxClauseCount spends less CPU deciding to abort, though it is spooky that multi term queries, when rewriting, use MutiReader.terms(), which in LUCENE-1483 we found to be disastrously slow in certain, not fully understood situations. ",
            "author": "Michael McCandless",
            "id": "comment-12680846"
        },
        {
            "date": "2009-03-11T12:08:29+0000",
            "content": "I think it was understood - it made field cache loading slow because we attempted to enumerate every unique term for all segments from every individual segment. Because term/seg drops log, it was incredibly wasteful. You could try 5,000 terms against each of 5 segments when segments 2-5 may have had 3 terms a piece in them. So I don't think it will be an issue here - we should get a bit better performance with LUCENE-1483 though, because each multi-term query will rewrite against each segment - so you won't have huge boolean queries hitting small segments like before - each multi-term query will 'fit' each segment, rather than one query hits all. ",
            "author": "Mark Miller",
            "id": "comment-12680854"
        },
        {
            "date": "2009-03-11T12:18:37+0000",
            "content": "we should get a bit better performance with LUCENE-1483 though, because each multi-term query will rewrite against each segment\n\nAlas, that was my initial thought too, but it's unfortunately false when you are not using constant-score rewrite mode.\n\nThe rewrite happens in Query.weight(Searcher), which we call once, on the top level searcher.  We then execute the rewritten query per-segment.\n\nI think for a MultiTermQuery that needs to enumerate alot of terms, we are probably looking at the same problem we saw in LUCENE-1483 with FieldCache (though of course that enumeration was for all terms).\n\nWith constant-score rewrite, we create a filter, and then the filter is only materialized per-reader.\n\nSo, with 2.9, this is another sizable performance benefit/reason to use constant score rewrite. ",
            "author": "Michael McCandless",
            "id": "comment-12680858"
        },
        {
            "date": "2009-03-11T12:25:55+0000",
            "content": "Ah, right - bummer indeed. ",
            "author": "Mark Miller",
            "id": "comment-12680860"
        },
        {
            "date": "2009-03-11T15:44:24+0000",
            "content": "Justus, do you have a sense of whether constant-score-rewrite for PrefixQuery (in Lucene 2.9 once released) and/or the TimeLimitedCollector would work for your situation? ",
            "author": "Michael McCandless",
            "id": "comment-12680893"
        },
        {
            "date": "2009-03-11T16:34:09+0000",
            "content": "BooleanQueries can be nested in a tree. In that case a single max clause count should be used for the whole tree.\n\nFor the contrib/surround query language a single factory for the leaf TermQueries (and SpanTermQueries) is used for a complete query tree. This factory throws an exception when more than a maximum number of leaf queries is requested.\n\nWouldn't it be better to have something similar for BooleanQuery? ",
            "author": "Paul Elschot",
            "id": "comment-12680912"
        },
        {
            "date": "2009-03-11T23:16:47+0000",
            "content": "In our case, we are more concerned about the memory usage \u2013 with queries being rewritten to Boolean queries with over a hundred thousand clauses \u2013 than the query execution time (though, obviously the execution time is also likely to be a factor at some point when trying to keep a UI responsive and not have hundreds of threads gathering massive result sets that are no longer relevant).\n\nWe had a similar problem in the past with range queries and the introduction of the constant range query solved that problem for us, so a constant score rewrite should also work in this situation. ",
            "author": "Justus Pendleton",
            "id": "comment-12681088"
        },
        {
            "date": "2017-01-03T02:58:49+0000",
            "content": "Won't fix? I was about to file this one. \n\nI don't think this setting should be static, because we have another library on our classpath which uses Lucene, and we hit a situation where we were calling it but they were setting it back to something else. So now we have to call it after they call it, but are you fricking serious? That is not a solution, and people who introduce mutable static fields should feel bad for what they have done. ",
            "author": "Trejkaz",
            "id": "comment-15793976"
        }
    ]
}