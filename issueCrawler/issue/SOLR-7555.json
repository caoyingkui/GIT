{
    "id": "SOLR-7555",
    "title": "Display total space and available space in Admin",
    "details": {
        "components": [
            "Admin UI"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "5.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Frequently I have access to the Solr Admin console, but not the underlying server, and I'm curious how much space remains available.   This little patch exposes total Volume size as well as the usable space remaining:\n\n\n\nI'm not sure if this is the best place to put this, as every shard will share the same data, so maybe it should be on the top level Dashboard?  Also not sure what to call the fields!",
    "attachments": {
        "SOLR-7555-display_disk_space_v2.patch": "https://issues.apache.org/jira/secure/attachment/12735652/SOLR-7555-display_disk_space_v2.patch",
        "SOLR-7555-display_disk_space.patch": "https://issues.apache.org/jira/secure/attachment/12735333/SOLR-7555-display_disk_space.patch",
        "SOLR-7555.patch": "https://issues.apache.org/jira/secure/attachment/12734812/SOLR-7555.patch",
        "SOLR-7555-display_disk_space_v4.patch": "https://issues.apache.org/jira/secure/attachment/12736661/SOLR-7555-display_disk_space_v4.patch",
        "SOLR-7555-display_disk_space_v5.patch": "https://issues.apache.org/jira/secure/attachment/12738169/SOLR-7555-display_disk_space_v5.patch",
        "DiskSpaceAwareDirectory.java": "https://issues.apache.org/jira/secure/attachment/12736388/DiskSpaceAwareDirectory.java",
        "SOLR-7555-display_disk_space_v3.patch": "https://issues.apache.org/jira/secure/attachment/12736387/SOLR-7555-display_disk_space_v3.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-22T12:46:03+0000",
            "author": "Marius Grama",
            "content": "In case this functionality is needed, here is a patch for it for both classic and angular UI versions. ",
            "id": "comment-14556103"
        },
        {
            "date": "2015-05-22T13:45:08+0000",
            "author": "Upayavira",
            "content": "The question here is whether we should report the disk usage on a per core basis, or on the main index page. I can see an argument for both. It would be good to have a little graph on the right hand side of the main page showing how much space is left.\n\nPatch looks fine to me! ",
            "id": "comment-14556154"
        },
        {
            "date": "2015-05-22T15:38:44+0000",
            "author": "Erik Hatcher",
            "content": "How's this play out if the index is stored in HDFS?    I see it using java.nio's Files and Paths API, which concerns me that this might break when the index is on a different kind of beast.   I'll await feedback that this scenario is ok before committing this patch - but good idea!   ",
            "id": "comment-14556336"
        },
        {
            "date": "2015-05-26T05:04:32+0000",
            "author": "Marius Grama",
            "content": "Another patch already exists in SOLR-7556. It also doesn't take into account the situation when the Solr instance runs on top of hdfs ",
            "id": "comment-14558692"
        },
        {
            "date": "2015-05-26T14:36:05+0000",
            "author": "Eric Pugh",
            "content": "I am re-attaching this patch from SOLR-7556, and closing SOLR-7556.  Tonight I will try it out with Solr running on HDFS to see what happens, and thought that would be an issue. ",
            "id": "comment-14559182"
        },
        {
            "date": "2015-05-26T14:38:14+0000",
            "author": "Eric Pugh",
            "content": "I had the same question.    I like the \"little graph\", and that was why I was providing both the total size, and free available in both bytes and human friendly.   bytes for the scaling on the graph.\n\nIf you only have a single drive, then having it at the top level makes sense.  But if you have multiple drives, then you would need to show all of them, or jsut have it at the core level...? ",
            "id": "comment-14559187"
        },
        {
            "date": "2015-05-26T15:08:11+0000",
            "author": "Upayavira",
            "content": "What seems reasonable to me is to, on the main screen, show whichever partition SOLR_HOME exists on, on the core pages, show the partitions that the cores exist on. They may be the same, they may not. ",
            "id": "comment-14559217"
        },
        {
            "date": "2015-05-26T23:33:10+0000",
            "author": "Eric Pugh",
            "content": "Great!     So, if that is the direction, then it seems like a different variable should be populated?  Cause I am explicitly looking at Data Dir at the core level... ",
            "id": "comment-14560122"
        },
        {
            "date": "2015-05-26T23:38:18+0000",
            "author": "Eric Pugh",
            "content": "So Erik Hatcher and Marius Grama, it looks like there is a method on the Directory.java called fileLength, that is implemented by FSDirectory and HDFSDirectory separately.  \n\nI'm now thinking that I add a method called availableSpace and totalSpace to Directory.java, and then implement those separately?    \n ",
            "id": "comment-14560127"
        },
        {
            "date": "2015-05-27T04:44:48+0000",
            "author": "Marius Grama",
            "content": "Eric Pugh maybe this information could be of help when trying to get the file system statistics in hdfs : \n\n\n\thttps://hadoop.apache.org/docs/current/api/org/apache/hadoop/fs/FsStatus.html\n\thttps://hadoop.apache.org/docs/current/api/org/apache/hadoop/fs/FileSystem.html#getStatus%28org.apache.hadoop.fs.Path%29\n\n ",
            "id": "comment-14560398"
        },
        {
            "date": "2015-05-27T18:28:04+0000",
            "author": "Eric Pugh",
            "content": "Here is an updated patch.  I moved the method spaceAvailable and spaceTotal  to the abstract Directory class, and then implemented it for the various classes that extended it.   I don't love that this change touches the Lucene package, as I've never really gone deep there before, and it feels rather invasive!   \n\nI also changed the format of the response to mimic the how the memory hands back both human formatted and raw data. ",
            "id": "comment-14561438"
        },
        {
            "date": "2015-05-27T18:28:30+0000",
            "author": "Eric Pugh",
            "content": "Marius Gramathis was perfect! ",
            "id": "comment-14561441"
        },
        {
            "date": "2015-05-27T19:19:43+0000",
            "author": "Upayavira",
            "content": "Extending the Directory class seems like a pretty major step - one that should get far wider coverage in its own ticket, I'd say.\n\nHowever, a simpler way to do it would be to have a DiskSpaceAwareDirectory interface that provides the necessary methods. Then, the API can only offer disk usage values from Directory objects that implement that interface.\n\nDunno if that pattern is used at all in Lucene/Solr though. ",
            "id": "comment-14561545"
        },
        {
            "date": "2015-05-27T19:36:40+0000",
            "author": "Eric Pugh",
            "content": "Humm...   You know, I saw that RAMDirectory implemented a interface called Accountable that was for tracking memory usage.    So we could modify the HdfsDirectory and FSDirectory to implement that. \n\nThen in SystemInfoHandler we do a instanceof check, and then pull that data?\n\nErik Hatcher Marius Grama what do you guys think? ",
            "id": "comment-14561575"
        },
        {
            "date": "2015-05-27T19:51:43+0000",
            "author": "Uwe Schindler",
            "content": "Please use another interface for this kind of stuff. Accountable is solely for heap usage. There is still a lot of stuff missing to make that information properly availabe in Solr. You can check with it, e.g. how much heap the term dictionary or the norms take in an index.\n\nbut disk space should be handled differently. ",
            "id": "comment-14561597"
        },
        {
            "date": "2015-05-31T01:54:13+0000",
            "author": "Eric Pugh",
            "content": "Makes sense.   I am working on another patch that based on the above DiskSpaceAwareDirectory interface suggestion. ",
            "id": "comment-14566295"
        },
        {
            "date": "2015-05-31T02:33:05+0000",
            "author": "Eric Pugh",
            "content": "Here is a patch that implements the DiskSpaceAwareDirectory interface.  The actual .java class is attached separately. ",
            "id": "comment-14566306"
        },
        {
            "date": "2015-06-01T14:36:24+0000",
            "author": "Erik Hatcher",
            "content": "Eric Pugh I think the DiskSpaceAwareDirectory addition should be a LUCENE JIRA to get that in first, as I imagine that might be a debatable addition at the Lucene level.   Personally, though, I think the logic for how/if to get the disk info should be in SystemInfoHandler itself, as there already is an instanceof check in the patch already - building upon that to include only the Directory implementations supported for this information. ",
            "id": "comment-14567365"
        },
        {
            "date": "2015-06-01T14:47:47+0000",
            "author": "Eric Pugh",
            "content": "Ugh..   So this is getting rather more complex then I expected.    Sigh.    So, are you suggesting that instead of adding DiskSpaceAwareDirectory as an interface, I just add a instanceOf check for HdfsDirectory and FSDirectory, and then call the method?\n\n\nif (directory instanceOf HdfsDirectory) {\n  totalSpace = ((HdfsDirectory)directory).getTotalSpace()\nelseif (directory instanceOf FSDirectory) {\n  totalSpace = ((FSDirectory)directory).getTotalSpace()\n\n\n\nWould that approach be acceptable, and then I don't add a new interface, and the changes are localized to FSDirectory and HdfsDirectory.\n\nEric ",
            "id": "comment-14567382"
        },
        {
            "date": "2015-06-01T14:57:16+0000",
            "author": "Erik Hatcher",
            "content": "So this is getting rather more complex then I expected.\n\nActually simpler  since you can keep all the changes Solr-side rather than having to work through modifying Lucene itself.  And maybe you don't even need those additional methods in HdfsDirectory or FSDirectory if you can get at the data you need inside an if/else in SystemInfoHandler. ",
            "id": "comment-14567388"
        },
        {
            "date": "2015-06-01T15:01:18+0000",
            "author": "Alan Woodward",
            "content": "How about adding the methods to DirectoryFactory instead? ",
            "id": "comment-14567394"
        },
        {
            "date": "2015-06-01T15:29:06+0000",
            "author": "Eric Pugh",
            "content": "I see...   So in response to Erik Hatcher, for FSDirectory, the getPath() that I need is public, and for HdfsDirectory, the getFileSystem is public.    So I can put the logic on there if I cast to the actuall Directory class.\n\nIf I add the methods to DirectoryFactory, then that is werid for MockDirectoryFactory and RAMDirectoryFactory.  I could add it to HdfsDirectoryFActory and STandardDirectoryFactory however.  \n\nThoughts?    ",
            "id": "comment-14567433"
        },
        {
            "date": "2015-06-01T15:42:06+0000",
            "author": "Erik Hatcher",
            "content": "Alan Woodward why in the factory?   While in SystemInfoHandler, to get the available/total space data, the factory isn't really in the mix any more.   It seems ok to me to keep all this just in SystemInfoHandler - and just show \"N/A\" if the Directory implementation being used isn't supported. ",
            "id": "comment-14567457"
        },
        {
            "date": "2015-06-01T21:00:26+0000",
            "author": "Eric Pugh",
            "content": "Reworked patch to just change the SystemInfoHandler.java, no changes to various Directory classes... ",
            "id": "comment-14567991"
        },
        {
            "date": "2015-06-01T21:03:12+0000",
            "author": "Eric Pugh",
            "content": "So each version seems to be slightly less intrusive, so v4 has the least amount of change.  It's also the least \"flexible\" from the stand point that any other Directory that is created, that isn't a FsDirectory or HdfsDirectory will require a change in SystemInfoHandler.java as well... ",
            "id": "comment-14567996"
        },
        {
            "date": "2015-06-02T13:51:03+0000",
            "author": "Eric Pugh",
            "content": "Erik Hatcher Upayavira I'd love to here your thoughts on the v4 patch.  I was hoping to get this in for 5.2, though I think I missed the cut... ",
            "id": "comment-14569116"
        },
        {
            "date": "2015-06-02T15:50:14+0000",
            "author": "Erik Hatcher",
            "content": "this patch adds the total/available to the new Angular admin UI too (maybe was in a previous patch and got dropped?) and adjusts the test to always use \"solr.RAMDirectoryFactory\" (without this, I think the randomized testing would have eventually selected a non-RAMDirectoryFactory and failed).\n\nLooks good to me.  I'll let Upayavira and David Eric Pugh double check, and then I'm happy to commit.  \n\nAnd yeah, we missed the 5.2 deadline, sorry. ",
            "id": "comment-14569311"
        },
        {
            "date": "2015-06-02T16:00:05+0000",
            "author": "Erik Hatcher",
            "content": "It's also the least \"flexible\" from the stand point that any other Directory that is created, that isn't a FsDirectory or HdfsDirectory will require a change in SystemInfoHandler.java as well\n\nTrue, but it gets it in for 5.3 at least (and what other Directory implementations are folks using that are missed?).  If you're interested in making it more flexible with the DiskSpaceAware thing, file a LUCENE JIRA and pursue it from that angle and we can refactor the guts of the system info handler once that change is made. ",
            "id": "comment-14569331"
        },
        {
            "date": "2015-06-02T16:47:08+0000",
            "author": "Eric Pugh",
            "content": "Thanks Erik Hatcher for the patch, and the clean up on the RAMDirectory in the unit test, I didn't quite have that worked out!   Looking forward to having this in 5.3! ",
            "id": "comment-14569408"
        },
        {
            "date": "2015-06-03T02:32:10+0000",
            "author": "Erik Hatcher",
            "content": "I hit a problem in testing.  Attaching the latest patch (note code commented out in SystemInfoHandler to isolate the test failure).  \n\nThis line causes another Directory to be created it appears:\n\nDirectory directory = core.getDirectoryFactory().get(core.getIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n\n\nand the test infrastructure catches it when running `ant test -Dtestcase=SystemInfoHandlerTest` with this:\n\n\n   [junit4]   2> 8008 INFO  (SUITE-SystemInfoHandlerTest-seed#[FF2F1F4755E3E1D4]-worker) [    x:collection1] o.a.s.c.CachingDirectoryFactory Closing RAMDirectoryFactory - 2 directories currently being tracked\n   [junit4]   2> 20450 ERROR (SUITE-SystemInfoHandlerTest-seed#[FF2F1F4755E3E1D4]-worker) [    x:collection1] o.a.s.c.CachingDirectoryFactory Timeout waiting for all directory ref counts to be released - gave up waiting on CachedDir<<refCount=2;path=/Users/erikhatcher/dev/trunk/solr/build/solr-core/test/J0/temp/solr.handler.admin.SystemInfoHandlerTest FF2F1F4755E3E1D4-001/init-core-data-001/index;done=false>>\n   [junit4]   2> 20452 ERROR (SUITE-SystemInfoHandlerTest-seed#[FF2F1F4755E3E1D4]-worker) [    x:collection1] o.a.s.c.CachingDirectoryFactory Error closing directory:org.apache.solr.common.SolrException: Timeout waiting for all directory ref counts to be released - gave up waiting on CachedDir<<refCount=2;path=/Users/erikhatcher/dev/trunk/solr/build/solr-core/test/J0/temp/solr.handler.admin.SystemInfoHandlerTest FF2F1F4755E3E1D4-001/init-core-data-001/index;done=false>>\n\n\n\nPunting back to David Eric Pugh ",
            "id": "comment-14570164"
        },
        {
            "date": "2015-06-04T17:38:31+0000",
            "author": "Erik Hatcher",
            "content": "Eric Pugh I tinkered with this a little more though still didn't have full success, but a call to DirectoryFactory#release(directory) gets the test case passing.  I still had issues with /admin/system working properly though, but maybe you can add in the #release and get it working? ",
            "id": "comment-14573219"
        },
        {
            "date": "2015-06-06T13:19:03+0000",
            "author": "Eric Pugh",
            "content": "So this is a great example why having awesome unit testing framework helps us!  I didn't know about the \"increment/decrement\" of directory objects.   The unit test + your help showed me.   So now it appears to be passing.   I'm updating patch. ",
            "id": "comment-14575717"
        },
        {
            "date": "2015-06-06T14:11:38+0000",
            "author": "Eric Pugh",
            "content": "This version of the patch file incorporates the improvements to the test case that Erik provided, and properly releases the Directory object after it being used, so it passes the tests. ",
            "id": "comment-14575734"
        },
        {
            "date": "2015-06-07T17:18:04+0000",
            "author": "Erik Hatcher",
            "content": "The one remaining question I have is about the release, as the directory released may not be the one gotten from the core (when the directory is instanceof FilterDirectory).  I think there might need to be another variable in the mix to hold on to the original and release that one instead.  \n\nEric Pugh - maybe one more round on seeing if we can get another test case in there to test an actual directory instance that is also an instance of FilterDirectory?   (sorry, but yeah good thing the tests catch these things!) ",
            "id": "comment-14576346"
        },
        {
            "date": "2015-06-29T16:24:17+0000",
            "author": "Erik Hatcher",
            "content": "Eric Pugh - ping - happy to get this committed after resolving the issue in my last comment.   ",
            "id": "comment-14605846"
        },
        {
            "date": "2015-08-03T16:00:40+0000",
            "author": "Eric Pugh",
            "content": "Will submit update tonight! ",
            "id": "comment-14652028"
        },
        {
            "date": "2015-11-25T16:09:16+0000",
            "author": "Erik Hatcher",
            "content": "Eric Pugh been a long night   pushing to post-5.4 ",
            "id": "comment-15027008"
        },
        {
            "date": "2016-02-17T20:50:32+0000",
            "author": "Jack Krupansky",
            "content": "I recently noticed that quite a few of the Amazon EC2 instance types have two or more local SSD storage devices. Should Solr display \"total space\" across all available local devices or just for the storage device on which Solr appears to be configured? If the instance supports EBS-only, I presume it would be total for EBS that the instance type supports. ",
            "id": "comment-15151147"
        }
    ]
}