{
    "id": "SOLR-7967",
    "title": "AddSchemaFieldsUpdateProcessorFactory does not check if the ConfigSet is immutable",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "5.3,                                            6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "SOLR-7742 introduced Immutable ConfigSets.  There are checks added to SolrConfigHandler and SchemaHandler so that if a user tries to modify the SolrConfig or the Schema via either of these interfaces an error is returned if the ConfigSet is defined to be immutable.\n\nUpdates to the schema made via the AddSchemaFieldsUpdateProcessorFactory are not checked in this way.  I'm not certain this should be considered a bug.  A ConfigSet is defined by {SolrConfig, Schema, ConfigSetProperties}.  On one hand, you can argue that you are modifying the Schema, which is part of the ConfigSet, so the immutable check should apply. On the other hand, the SolrConfig (which defines the AddSchema...Factory} defines that it wants the Config to be updated, so if you view the ConfigSet in totality you could argue nothing is really changing. I'd slightly lean towards adding the check, but could go either way.\n\nOther opinions?",
    "attachments": {
        "SOLR-7967.patch": "https://issues.apache.org/jira/secure/attachment/12765267/SOLR-7967.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-25T17:57:44+0000",
            "author": "Hoss Man",
            "content": "...so if you view the ConfigSet in totality you could argue nothing is really changing. I'd slightly lean towards adding the check, but could go either way.\n\nI'm not all that familiar with how Immutable ConfigSets work internally, or what the \"designed\" usecase / usage patterns are, but i think the right questions to ask are:\n\n\n\twhat might users reasonably want to do to in conjunction with (Immutable) ConfigSets and a data driven schema?\n\twhat, logically, should be the default behavior of (Immutable) ConfigSets and a data driven schema?\n\n\n\nThe answer(s) to the first question should all be possible even if they require special configuration \u2013 and or: if some conbinations of options XYZ give you errors telling you that the combination is invalid and needs to be changed to either XQZ or XYP to make sense and be usable.\n\nThe answer to the second question should be the default behavior, w/o any special config. ",
            "id": "comment-14711686"
        },
        {
            "date": "2015-08-25T18:53:04+0000",
            "author": "Gregory Chanan",
            "content": "Thanks for the discussion Hoss Man, those questions were very helpful.\n\nAt a high level, the use case is to provide an immutable configuration as a \"template\" for others to build their own configuration on top of.  This could be generic templates e.g. in a distribution or as a company/use case specific template.  In SolrCloud mode, this allows an administrator to provide these templates and in combination with a \"ConfigSet\" API (SOLR-7789), a collection administrator can create their own configuration without writing directly to ZooKeeper (which is problematic from a security perspective).\n\nGiven that use case, I believe the answers to your questions are:\nwhat, logically, should be the default behavior of (Immutable) ConfigSets and a data driven schema?\nAttempts to modify an immutable ConfigSet via a data driven schema should result in an error, since it is an attempt to modify an immutable / company sanctioned template.\n\nwhat might users reasonably want to do to in conjunction with (Immutable) ConfigSets and a data driven schema?\nUsers may want to base their configuration on a template and use a data driven schema to update their own configuration.  They can do this by creating their own non-immutable ConfigSet using the API (SOLR-7789) and using the data driven schema based on that template. ",
            "id": "comment-14711776"
        },
        {
            "date": "2015-10-06T21:43:43+0000",
            "author": "Gregory Chanan",
            "content": "Here's a patch.  It only does the immutable ConfigSet check if it's planning to actually add a new field.  Interestingly, that differs from the existing mutable schema check, which checks before looking at the existing fields.  So, if you had a not-mutable schema and an AddSchemaFieldsUpdateProcessorFactory you wouldn't be able to index any data, even data with all existing fields.  That's probably a pre-existing bug, but seems really minor. ",
            "id": "comment-14945883"
        },
        {
            "date": "2015-10-06T21:46:25+0000",
            "author": "Gregory Chanan",
            "content": "SOLR-8134 for the mutable schema bug. ",
            "id": "comment-14945888"
        },
        {
            "date": "2015-10-07T01:23:15+0000",
            "author": "Gregory Chanan",
            "content": "Patch with some extra null checking to get the more invasive tests to pass. ",
            "id": "comment-14946113"
        },
        {
            "date": "2015-10-08T00:14:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1707423 from gchanan@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1707423 ]\n\nSOLR-7967: AddSchemaFieldsUpdateProcessorFactory does not check if the ConfigSet is immutable ",
            "id": "comment-14947849"
        },
        {
            "date": "2015-10-08T00:14:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1707424 from gchanan@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1707424 ]\n\nSOLR-7967: AddSchemaFieldsUpdateProcessorFactory does not check if the ConfigSet is immutable ",
            "id": "comment-14947850"
        }
    ]
}