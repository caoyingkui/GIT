{
    "id": "LUCENE-4218",
    "title": "contrary to documentation Document.get(field) on numeric field returns null",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "A call to Numeric num = indexableField.numericValue() comes up with a correct value, whereas Document.get(field) yields null.",
    "attachments": {
        "LUCENE-4218.patch": "https://issues.apache.org/jira/secure/attachment/12543712/LUCENE-4218.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-27T01:25:05+0000",
            "content": "4.0.0-APHA docs for Document.get say (emphasis mine)...\n\nReturns the string value of the field with the given name if any exist in this document, or null. If multiple fields exist with this name, this method returns the first value added. If only binary fields with this name exist, returns null. For IntField, LongField, FloatField and DoubleField it returns the string value of the number. If you want the actual numeric field instance back, use getField(java.lang.String).\n\n...not sure if the problem is the docs, or if the method is broken, but either way we should fix ",
            "author": "Hoss Man",
            "id": "comment-13423618"
        },
        {
            "date": "2012-07-27T08:08:11+0000",
            "content": "Before 4.0, this was exactly the case like documented. So we should either fix the docs or let it return string representation. I prefer the latter, as Document.get() is a very generic name. ",
            "author": "Uwe Schindler",
            "id": "comment-13423729"
        },
        {
            "date": "2012-08-07T03:41:28+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429711"
        },
        {
            "date": "2012-09-04T17:04:10+0000",
            "content": "This just confused me too writing a simple test. we need to decide which way to go. If nobody speaks up, I will proceed with making a patch\nthat fixes the code to match the docs. ",
            "author": "Robert Muir",
            "id": "comment-13447816"
        },
        {
            "date": "2012-09-04T17:06:46+0000",
            "content": "+1 to return string-ified number. ",
            "author": "Michael McCandless",
            "id": "comment-13447817"
        },
        {
            "date": "2012-09-04T17:30:12+0000",
            "content": "I complained already, because in 3.x (3.2+ when i added native numeric values) it behaves exactly like that and I did this with backwards-compatibility in mind! This may not be true anymore in 4.x, but should still be supported.\n\nOh, I commented that already on that issue  ",
            "author": "Uwe Schindler",
            "id": "comment-13447832"
        },
        {
            "date": "2012-09-04T17:39:51+0000",
            "content": "simple patch ",
            "author": "Robert Muir",
            "id": "comment-13447839"
        },
        {
            "date": "2012-09-04T17:47:39+0000",
            "content": "I think this patch should be fine, but its much more stupid than 3.x. In 3.x the stringValue() method was also implemented for NumericField, and that one returned the stringfied value. This was changed in 4/5, so breaking this. We might think about this and think of changing to stringValue() on Field handle this. By the way, stringValue() on 3.x was simply returning fieldsData.toString() -> very generic ",
            "author": "Uwe Schindler",
            "id": "comment-13447848"
        },
        {
            "date": "2012-09-04T17:48:10+0000",
            "content": "The next question: should the fix really be in Document.java or Field.java:\n\nIn 3.x, the stringValue() of a numeric field returned its string representation.\nin trunk/4.x, this isnt true: and it makes some things confusing, like the javadocs\nof stringValue itself (clearly bogus)\n\n\n  /**\n   * The value of the field as a String, or null. If null, the Reader value or\n   * binary value is used. Exactly one of stringValue(), readerValue(), and\n   * getBinaryValue() must be set.\n   */\n  public String stringValue() {\n    return fieldsData instanceof String ? (String) fieldsData : null;\n  }\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-13447850"
        },
        {
            "date": "2012-09-04T18:16:33+0000",
            "content": "Revised patch fixing Field.java, so it acts like 3.x\n\nI think this is better. ",
            "author": "Robert Muir",
            "id": "comment-13447881"
        },
        {
            "date": "2012-09-04T18:31:01+0000",
            "content": "I like that better, too! This is the way how 3.x worked since addition of numeric fields. ",
            "author": "Uwe Schindler",
            "id": "comment-13447909"
        },
        {
            "date": "2012-09-04T18:55:05+0000",
            "content": "+1 to fix Field. ",
            "author": "Michael McCandless",
            "id": "comment-13447944"
        },
        {
            "date": "2012-09-04T19:19:27+0000",
            "content": "Thanks for reporting this Jamie! Sorry it took so long! ",
            "author": "Robert Muir",
            "id": "comment-13447972"
        },
        {
            "date": "2013-05-10T10:34:00+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654093"
        }
    ]
}