{
    "id": "LUCENE-1698",
    "title": "Change backwards-compatibility policy",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Task",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "These proposed changes might still change slightly:\n\nI'll call X.Y -> X+1.0 a 'major release', X.Y -> X.Y+1 a\n'minor release' and X.Y.Z -> X.Y.Z+1 a 'bugfix release'. (we can later\nuse different names; just for convenience here...)\n\n1. The file format backwards-compatiblity policy will remain unchanged;\n   i.e. Lucene X.Y supports reading all indexes written with Lucene\n   X-1.Y. That means Lucene 4.0 will not have to be able to read 2.x\n   indexes.\n\n2. Deprecated public and protected APIs can be removed if they have\n   been released in at least one major or minor release. E.g. an 3.1\n   API can be released as deprecated in 3.2 and removed in 3.3 or 4.0\n   (if 4.0 comes after 3.2).\n\n3. No public or protected APIs are changed in a bugfix release; except\n   if a severe bug can't be changed otherwise.\n\n4. Each release will have release notes with a new section\n   \"Incompatible changes\", which lists, as the names says, all changes that\n   break backwards compatibility. The list should also have information\n   about how to convert to the new API. I think the eclipse releases\n   have such a release notes section. Furthermore, the Deprecation tag \n   comment will state the minimum version when this API is to be removed,  e.g.\n   @deprecated See #fooBar().  Will be removed in 3.3 \n   or\n   @deprecated See #fooBar().  Will be removed in 3.3 or later.\n\n\nI'd suggest to treat a runtime change like an API change (unless it's fixing a bug of course),\ni.e. giving a warning, providing a switch, switching the default behavior only after a major \nor minor release was around that had the warning/switch.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-07-02T17:48:57+0000",
            "content": "\n\n\n\n-0\n\n(Note: this proposal is remeniscent of Grant's suggestion a while back...\nhttp://www.nabble.com/Back-Compatibility-to14918202.html )\n\nThe concern I have with an approach like this (as compared to the current policy) is that it removes information from the version number.  Under the current policy, you can look at any new version Y and be confident about whether it is backwards compatible with some version X you are currently using \u2013 if the version numbers are different enough then you may need to make changes to use the new version; but if the numbers are similar enough then you definitely should be able to upgrade without changing code.\n\nFor people who upgrade regularly (or semi-regularly), it gives them a clear indication of how much work should be involved in any given upgrade...\n\n\t4.5.1 -> 4.5.4 ... bug fixes, drop in replacement\n\t4.5.1 -> 4.7.0 ... new features/api, should take a look at them, and be on the lookout for new deprecations to save time later.\n\t4.5.1 -> 5.0.0 ... major API changes are likely, probably need to modify code, definitely need to modify code if you haven't been keeping up with the deprecation warnings.\n\n\n\nBecause of point #2 in the new policy being proposed, users of some version Y will have no indication whatsoever of how likely it is that they can upgrade to version Z unless they have been religiously updating to every new minor release and eliminating the use of deprecated methods in their code.\n\nThis could have the adverse effect of discouraging users from upgrading if they haven't been keeping up with the bleeding edge of releases.\n\n\u2014\n\nThis loss of information that would come from allowing deprecated methods to be removed in minor releases is one of the reasons that i (half heartedly) suggested moving to a 4 part version numbers as a way to maintain information in the version number about API compatibility without conveying any implications of index format incompatibility or scaring people with \"major\" version number changes...\n\nhttp://www.nabble.com/Re%3A-Back-Compatibility-p15032881.html\n\nBut I don't think that's really necessary: Ultimately there isn't anything about this proposal that would actually change how easy/hard it is to remove APIs or change functionality between one release and the next \u2013 it just alters what naming convention would be allowed when such changes take place.  \n\nCurrently, users can be (for lack of a better word) \"wary\" of major version changes (ie: 4.5.1 -> 5.0.0) because they sound like really big releases that might change things in a way that break their apps.  Consequently, developers are wary of having major releases too often and instead we try to have lots of minor releases and leave bad/broken APIs deprecated for a long time and then \"batch\" up their removal in major releases.  Switching to a policy where we remove deprecated methods (or change runtime behavior) during minor releases is likely just going to make any users who have been wary of major releases in the past wary of minor releases in the future.\n\nWe could accomplish the same underlying goal (increase the flexibility in developing Lucene internals by allowing faster removal of deprecated/broken APIs/functionality that may be in the way) without changing our current policy (and without losing any compatibility info in the version numbers) by getting past whatever hangups we may have about what it means to have a \"major\" release and start increment the \"major\" version number whenever necessary to get the job done.  \n\nIf 4.1.0 has run time behavior that we want to change ASAP, then make the next release 5.0.0 \u2013 even if it's only 2 months later.  If 5.0.0 has an API that we realize is completely hamstringing our ability to make some amazing performance improvements to the internals, then make the next release be 6.0.0.\n\nRethinking how we use the use the current compatibility policy can accomplish the same goals as changing it without impacting our users in any way beyond how tis proposal would impact them \u2013 the releases would still come out at the same time and have the same changes \u2013 the only difference would be in what we call them, and those names would actually convey useful information.\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-12726575"
        },
        {
            "date": "2009-07-02T18:01:55+0000",
            "content": "I agree. I think we have the tools we need, we just need to accelerate our releases if we want to deprecate faster. We could have made 2.4 2.9. We could have released faster with fewer issues.\n\nI also think that its confusing that you could drop in 4.2 over 4.1, but try 4.4 and your out of luck. Major number bumps and nice and intuitive.\n\nI was behind a change in back compat (though I had no idea what change - was waiting for the right one  ), basically for the case of defaults for new users - out of the box performance/experience. The version stuff Mike came up with appears to fix that rather nicely without tweaking back compat versioning schemes though. We can just jump numbers faster. ",
            "author": "Mark Miller",
            "id": "comment-12726590"
        },
        {
            "date": "2009-10-05T19:46:01+0000",
            "content": "Now that 2.9 is out and 3.0 is close, I'd like to get back to this one to get to a conclusion.\n\nWe had several informal +1s on javadev and a -0 here from Hoss and Mark. So no -1 yet.\n\nI think the final decision should be made with an official vote on java-dev. How does everyone feel about this? Shall we have a vote right away? I think it might be a good idea to get some feedback about this proposal on java-user first? Or we could even wait a month and bring it up in Oakland at the Lucene BOF? ",
            "author": "Michael Busch",
            "id": "comment-12762329"
        },
        {
            "date": "2009-11-16T08:41:29+0000",
            "content": "This is the last issue blocking 3.0 somehow. Should I remove the fix version, or do we already have some \"official\" backwards document available somewhere to resolve this? ",
            "author": "Uwe Schindler",
            "id": "comment-12778262"
        },
        {
            "date": "2009-11-16T08:57:19+0000",
            "content": "This doesn't need to block 3.0.\n\nWe discussed this on ApacheCon and I was going to write up a new proposal soon. ",
            "author": "Michael Busch",
            "id": "comment-12778268"
        },
        {
            "date": "2010-04-14T21:28:24+0000",
            "content": " ",
            "author": "Michael Busch",
            "id": "comment-12857103"
        },
        {
            "date": "2010-06-25T17:13:25+0000",
            "content": "Is that issue still relevant? In light of the current policy? ",
            "author": "Shai Erera",
            "id": "comment-12882641"
        },
        {
            "date": "2013-07-23T18:44:35+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716996"
        },
        {
            "date": "2014-04-16T12:54:43+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970854"
        }
    ]
}