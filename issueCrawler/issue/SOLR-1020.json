{
    "id": "SOLR-1020",
    "title": "PreAnalyzed field analyzer",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "An Analyzer that produce a TokenStream based on XML input that contains a marshalled TokenStream. Also contains static TokenStream XML marshaller.\n\nI kind of pulled this out of my pocket without testing it in a real environment in order to get some comments on the solution before I add it to my project. So cosider it a beta-patch.\n\nIt use JSR173 XMLStream API available in Java 1.6, compatible with Java 1.5 and downloadable from https://sjsxp.dev.java.net/\n\nXSD:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\"\n           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n    <xs:element name=\"tokens\" type=\"tokensType\"/>\n    <xs:complexType name=\"tokensType\">\n        <xs:sequence>\n            <xs:element type=\"tokenType\" name=\"token\"/>\n        </xs:sequence>\n    </xs:complexType>\n    <xs:complexType name=\"tokenType\">\n        <xs:sequence>\n            <xs:element type=\"xs:int\" name=\"positionIncrement\" maxOccurs=\"1\"/>\n            <xs:element type=\"xs:string\" name=\"term\" minOccurs=\"1\" maxOccurs=\"1\"/>\n            <xs:element type=\"xs:string\" name=\"type\" maxOccurs=\"1\"/>\n            <xs:element type=\"xs:int\" name=\"startOffset\" maxOccurs=\"1\"/>\n            <xs:element type=\"xs:int\" name=\"endOffset\" maxOccurs=\"1\"/>\n            <xs:element type=\"xs:int\" name=\"flags\" maxOccurs=\"1\"/>\n            <xs:element type=\"payloadType\" name=\"payload\" maxOccurs=\"1\"/>\n        </xs:sequence>\n    </xs:complexType>\n    <xs:complexType name=\"payloadType\">\n        <xs:choice maxOccurs=\"1\" minOccurs=\"1\">\n            <xs:element type=\"bytesType\" name=\"bytes\"/>\n            <xs:element type=\"xs:string\" name=\"hex\"/>\n            <xs:element type=\"xs:string\" name=\"base64\"/>\n        </xs:choice>\n    </xs:complexType>\n    <xs:complexType name=\"bytesType\">\n        <xs:sequence>\n            <xs:element type=\"xs:byte\" name=\"byte\" maxOccurs=\"unbounded\" minOccurs=\"1\"/>\n        </xs:sequence>\n    </xs:complexType>\n</xs:schema>\n\n\n\nEven though I've added a couple of variants to how to handle a Payload in the XSD only <hex> is supported.\n\nExample XML:\n\n<tokens>\n  <token>\n    <positionIncrement>1</positionIncrement>\n    <term>term</term>\n    <type>type</type>\n    <startOffset>0</startOffset>\n    <endOffset>3</endOffset>\n    <flags>65535</flags>\n    <payload><hex>fffefd</hex></payload>\n  </token>\n</tokens>",
    "attachments": {
        "SOLR-1020.txt": "https://issues.apache.org/jira/secure/attachment/12400234/SOLR-1020.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karl Wettin",
            "id": "comment-12673544",
            "date": "2009-02-14T20:25:56+0000",
            "content": "Missed out on telling you that I'm also looking at a binary solution for Solrj.. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12673570",
            "date": "2009-02-15T07:33:10+0000",
            "content": "Karl, would it make sense to use the NamedList format instead of a custom XML one? That way, you can use most of the existing parsing code. Thoughts? "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-12673581",
            "date": "2009-02-15T09:39:48+0000",
            "content": "Karl, would it make sense to use the NamedList format instead of a custom XML one? That way, you can use most of the existing parsing code. \n\nI don't know, would it? \n\nThoughts?\n\nThe reason I choose JSR173 is that it allows for unmarshalling one token at the time rather than all at once. I.e. I want to reuse the token instance in the TokenStream the Analyzer produce rather than unmarshall all of the data at once. My first thought was to parse the XML using a lexer but some simple tests showed that the overhead of JSR173 was very small compared to jflex. I am however considering jflex for the binary format.\n\nI came up with this patch because I have a rather elaborate tokenization scheme using ShingleMatrixFilter. The current solution of mine is to pass a base64 encoded serialized object as field value and use a custom Analyzer that assemble and tokenize the entity object passed down in the field value. However the tokenization is rather expensive (especially during initial bulk import of my zillions of documents)  so I'd rather do this on my clients as I've got plenty of those but only one Solr. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13604366",
            "date": "2013-03-16T18:57:36+0000",
            "content": "SPRING_CLEANING_2013 we can reopen if necessary.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13604370",
            "date": "2013-03-16T19:00:52+0000",
            "content": "SPRING_CLEANING_2013 we can reopen if necessary.  "
        }
    ]
}