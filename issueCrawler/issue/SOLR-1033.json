{
    "id": "SOLR-1033",
    "title": "DIH transformers should be able to access current entity's namespace",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It can be very useful to reuse the output from a DIH template in other templates and or regex transformers. Currently this cannot be done. The resolver is initialized at the start of the transformer run with what ever values exist for a column name at that instant. As the transformer executes it may define new values for column names. My change is intended to update the hash used by the resolver after each successful transformation.\n\nThis only applies to the template and regex transformers.",
    "attachments": {
        "SOLR-1033.patch": "https://issues.apache.org/jira/secure/attachment/12400766/SOLR-1033.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675560",
            "date": "2009-02-21T13:43:20+0000",
            "content": "A patch to address the issue.\n\nYet again, I cannot get one of unit tests to work. I am hoping that folk better than me can point out where I am going wrong! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12675564",
            "date": "2009-02-21T15:06:30+0000",
            "content": "the output of one transformer can be consumed from other. \nexample\n\n\n<entity transformer=\"TemplateTransformer,RegexTransformer\">\n  <field column=\"a\" template=\"hello\"/>\n  <field column=\"b\" regex=\"(.*)\" sourceColName=\"a\"/>\n</entity> \n\n\nin this case , the output of TemplateTransformer goes to 'a' . The RegexTransformer can read from column 'a' and it can be put into column 'b' . It is still possible to have another transformer which reads from 'b' and puts the value into 'c'\n\nIs this the usecase? or am I missing something? "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675580",
            "date": "2009-02-21T17:06:06+0000",
            "content": "Sorry. I was not as clear as I could have been. No the use case is more\n\n  <entity name=\"e\" transformer=\"TemplateTransformer,RegexTransformer\">\n    <field column=\"a\" template=\"hello\"/>\n    <field column=\"c\" template=\"hello world\"/>\n    <field column=\"b\" regex=\"${e.a}(.*)\" sourceColName=\"c\"/>\n    </entity>\n\n "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675720",
            "date": "2009-02-22T22:11:29+0000",
            "content": "Following on from Noble's comments I realised that the test case for regex was not testing or highlighting the use case at all. This patch contains a new working regexp junit test case. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12675753",
            "date": "2009-02-23T03:52:32+0000",
            "content": "Fergus, the changes required for TemplateTransformer was clear and your fix is right. \n Can you give the usecase for RegexTranformer also? "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675801",
            "date": "2009-02-23T07:55:06+0000",
            "content": "Noble,\n\nSure. However I need a little help. What is it I need to do?\n\n  1) reference the examples I posted to solr-user in JIRA?\n\n  2) simplify/clarify what was posted to solr-user?\n\n  3) include a snippet in JIRA?\n\n  4) add example explicitly showing reuse of regex output in another regex?\n\n  5) or details of the problem I am trying to solve right now?\n\nI had thought the general case included below was sufficient!\n\nRegards Fergus.\n\n\n\u2013 \n\n===============================================================\nFergus McMenemie               Email:fergus@twig.me.uk\nTechmore Ltd                   Phone:(UK) 07721 376021\n\nUnix/Mac/Intranets             Analyst Programmer\n=============================================================== "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12675808",
            "date": "2009-02-23T08:04:45+0000",
            "content": "Sure. However I need a little help. What is it I need to do?\nA simple usecase with an example which demonstrates the feature .\n\nThe TemplateTransformer example you provided was self explanatory. If you can give a similar one that is more than sufficient. "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675856",
            "date": "2009-02-23T11:32:37+0000",
            "content": "OK here goes. My document contains references to embeded imagery. For each image there is the image itself along with a thumbnail and caption. The source document contains:-\n\n  <mediaObject vurl=\"1043130\" imageType=\"graphic\"/>\n\nI have a search application that searches only the captions associated with a given image. It would be nice to populate solr fields with the correct relative path to each image and thumbnails at index time. Problem arises in that although the thumbnail is:\n\n   s${e.vurl}.jpg\n\nThe name of the image itself varies depending on the first letter of the image type imageType! It could be one of 'picture' 'graphic' 'lineDrawing' or 'map'. ie:-\n\n   p${e.vurl}.jpg\n   g${e.vurl}.jpg\n   l${e.vurl}.jpg\n   m${e.vurl}.jpg\n\nMy patch would allow the following sort of thing to be added to a data-config. I feel this considerably increases its power and usefulness.\n\n\n<entity name=\"x\" .... transformer=\"TemplateTransformer,RegexTransformer\">\n  <field column=\"fileWebPath\"            template=\"${jc.fileAbsolutePath}\" regex=\"${dataimporter.request.contentdir}(.*)\" replaceWith=\"/ford$1\" />\n  <field column=\"vurl\"                          xpath=\"/record/mediaBlock/mediaObject/@vurl\" />\n  <field column=\"imagetype\"               xpath=\"/record/mediaBlock/mediaObject/@imageType\" regex=\"^(\\w).*\"/>\n  <field column=\"imgWebPathICON\"  regex=\"(.*)/.*\" replaceWith=\"$1/imagery/s${x.vurl}.jpg\" sourceColName=\"fileWebPath\"/>\n  <field column=\"imgWebPathFULL\"  regex=\"(.*)/.*\" replaceWith=\"$1/imagery/${x.imagetype}${x.vurl}.jpg\"  sourceColName=\"fileWebPath\"/>\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12675860",
            "date": "2009-02-23T11:57:50+0000",
            "content": "If I am not wrong the output of one transformation in Regextransformer is available in the next transformation , becaus ethe value is added to the same row object . So it should be working if the TemplateTransformer is fixed "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675902",
            "date": "2009-02-23T14:01:47+0000",
            "content": "Not sure I am following what you say. If I number the different steps in my example entity as follows:-\n\n\n<entity name=\"x\" .... transformer=\"TemplateTransformer,RegexTransformer\">\n1  <field column=\"fileWebPath\"     template=\"${jc.fileAbsolutePath}\" regex=\"${dataimporter.request.contentdir}(.*)\" replaceWith=\"/ford$1\" />\n2  <field column=\"vurl\"            xpath=\"/record/mediaBlock/mediaObject/@vurl\" />\n3  <field column=\"imagetype\"       xpath=\"/record/mediaBlock/mediaObject/@imageType\" regex=\"^(\\w).*\"/>\n4  <field column=\"imgWebPathICON\"  regex=\"(.*)/.*\" replaceWith=\"$1/imagery/s${x.vurl}.jpg\" sourceColName=\"fileWebPath\"/>\n5  <field column=\"imgWebPathFULL\"  regex=\"(.*)/.*\" replaceWith=\"$1/imagery/${x.imagetype}${x.vurl}.jpg\"  sourceColName=\"fileWebPath\"/>\n\n\n\nWe see that column 5 involves a regex which in turn involves columns 3 and 2. Column 3 is itself a regex. We therefore have the output from one regex being used within another regex. So as far as I can see we need the fix made to both the TemplateTransformer and the RegexTransformer.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12675953",
            "date": "2009-02-23T15:50:38+0000",
            "content": "OK , I see your point. you are constructing the regex replacements themselves with templates. I missed that\n\nI am wondering , if the system can be modified to have the current entities rows be available always to all transformers. It can be done as a simple change in the EntityprocessorBase#applyTransformers "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12675961",
            "date": "2009-02-23T16:08:59+0000",
            "content": "This should help all other transformers implicitly support templating "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12675969",
            "date": "2009-02-23T16:44:26+0000",
            "content": "Your comment about modifying the system \"to have the current entities rows be available always to all transformers\" is good and will produce the fastest most efficient code. \n\nBut I need to sure we are not using the term \"template\" twice in different ways. You say \"you are constructing the regex replacements themselves with templates\" by which you mean using the ${XXX} syntax and not the output from a templatetransformer?\n\nAnyway I have backed out my patch and applied yours. Everything seems fine, but I am still testing.\n\nThanks very much. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12676165",
            "date": "2009-02-24T03:34:25+0000",
            "content": "You say \"you are constructing the regex replacements themselves with templates\" by which you mean using the ${XXX} syntax and not the output from a templatetransformer?\n\nwhen I said 'template' I mean any string with ${xxx} content. the 'template' attribute is the only value Templatetransformer is interested in.\n\nAny attribute value in DIH is potentially a template .Some are honoured and some are not. I hope we can consistently make it work across all.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12676177",
            "date": "2009-02-24T04:16:56+0000",
            "content": "the complete patch. XPathEntityprocessor needed some rework "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12676222",
            "date": "2009-02-24T09:10:10+0000",
            "content": "Hmmm, some  thoughts and an enhanced patch for your consideration.\n\nSurely the test cases should still be revised to test the new functionality.\n\nAlso as the XPathEntityProcessor has been revised, I felt this might be the best time to sort some formating typo's within the error messages. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12676498",
            "date": "2009-02-25T04:17:16+0000",
            "content": "Fergus, \nLooks good. Thanks "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12676509",
            "date": "2009-02-25T05:26:47+0000",
            "content": "Updating issue title per the final resolution.\n\nPatch looks good, I'll commit shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12676511",
            "date": "2009-02-25T05:28:05+0000",
            "content": "Committed revision 747664.\n\nThanks Fergus and Noble! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775668",
            "date": "2009-11-10T15:51:58+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}