{
    "id": "LUCENE-3564",
    "title": "rename IndexWriter.rollback to .rollbackAndClose",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Spinoff from LUCENE-3454, where Shai noticed that rollback is trappy since it [unexpected] closes the IW.\n\nI think we should rename it to rollbackAndClose.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-06T16:23:05+0000",
            "content": "Is there a way to rollback without closing?  That would seem far more useful. ",
            "author": "Yonik Seeley",
            "id": "comment-13145033"
        },
        {
            "date": "2011-11-06T17:07:29+0000",
            "content": "My personal preference for this API is the current simple and short name rollback(). ",
            "author": "Doron Cohen",
            "id": "comment-13145045"
        },
        {
            "date": "2011-11-06T19:08:39+0000",
            "content": "Oh no, what have I done !? \n\nI too agree we should not rename rollback to rollbackAndClose. And I second Yonik's question - why do we have to close when we rollback?\n\nI personally think that we're going overboard with these methods rename (including IR.openIfChanged !), but if we're at \"renaming methods with unexpected outcome\", how about renaming addDocument to addDocumentButIfYouHitOOMYouShouldClose?  ",
            "author": "Shai Erera",
            "id": "comment-13145081"
        },
        {
            "date": "2011-11-06T20:59:02+0000",
            "content": "Is there a way to rollback without closing? That would seem far more useful.\n\nFor a little while in one of my updatehandler patches I added code to open back up the IndexWriter after it closed in rollback - not sure if you could just not close super simply or not, so I just hacked around it - nice when you don't want to sync around the indexwriter and someone calls rollback - I didn't want to replace the IndexWriter with a new one after the rollback. Eventually I just went another route above Lucene though. ",
            "author": "Mark Miller",
            "id": "comment-13145104"
        },
        {
            "date": "2011-11-06T21:00:52+0000",
            "content": "My personal preference for this API is the current simple and short name rollback().\n\n+1 ",
            "author": "Mark Miller",
            "id": "comment-13145106"
        },
        {
            "date": "2011-11-07T04:40:43+0000",
            "content": "I briefly looked at rollback impl, and found this comment:\n\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n\n\n\nBut if this instance of IndexWriter is closed, this comment has no meaning right? Does it mean that once rollback() didn't close IW? ",
            "author": "Shai Erera",
            "id": "comment-13145225"
        },
        {
            "date": "2011-11-07T18:18:09+0000",
            "content": "\nI personally think that we're going overboard with these methods rename (including IR.openIfChanged !)\n\nActually I think the \"traps\" you've been pointing out have been\nexcellent examples of poorly named methods.  Please keep pointing them\nout!\n\nAPI design/naming is not easy, and generally developers are unable to\nname things properly because we are too familiar with the code to see\nwhat traps users.\n\nThe old IR.reopen has trapped users (two separate traps).  I think the\nchange in semantics (return null if there is no change), and rename\nand cutover to static method, are important steps forward (addressed\nthe traps).\n\nWe can't anticipate all traps when we name our APIs but if users show\nus over time that they are trappy we should try to address them when\npossible.\n\nIs there a way to rollback without closing? That would seem far more useful.\n\nThere isn't today... I agree this would be useful.  I don't remember\noff hand why the current one has to close after rollback...\n\nThough, it's not so bad having to open a new writer afterwards?\n\nIe, unlike the commit case (before we had the commit method), where\nhaving to do IW.close() to \"commit\" was bad because you may block\nwaiting for long merge(s) to complete, rollback() is fast since it\naborts all running merges.\n\nMy personal preference for this API is the current simple and short name rollback().\n\nI like short names too, but not if they are misleading/surprising (as\nShai pointed out, this one really is).\n\nI guess it's OK to leave rollback as \"short but misleading\"; it's a\nfairly expert API.  Also, it quickly becomes obvious to the user that\nthe IW was closed, so it's \"fail fast\" and the damage is not nearly as\nbad as what we see when users don't understand the cost of optimize. ",
            "author": "Michael McCandless",
            "id": "comment-13145668"
        },
        {
            "date": "2011-11-08T00:20:29+0000",
            "content": " API design/naming is not easy, and generally developers are unable to\nname things properly because we are too familiar with the code to see\nwhat traps users. \n\nI don't fully buy that. I think it generally makes us better at naming and that the supposed traps are generally a small percentage of the users running into problems because our javadoc has often sucked.\n\nI guess it's OK to leave rollback as \"short but misleading\"; \n\nIt's not misleading if the javadoc explains the indexwriter is closed. Ive said it before, but its worth saying again - trying to design API's for those that doesn't read the javadoc is a poor move. Most of the problems we see can be traced back to not having javadoc that fully explains things, not poorly named methods.\n\nusers don't understand the cost of optimize.\n\nUsers didn't understand the cost of optimize because the javadoc never explained the cost in the past. It simply said this makes things better. The method name was never the problem if you ask me. People read javadoc because only morons program by method name. Often our javadoc has not explained the problems that have been brought up well in the past. ",
            "author": "Mark Miller",
            "id": "comment-13145988"
        },
        {
            "date": "2011-11-08T06:28:14+0000",
            "content": "\nThe old IR.reopen has trapped users (two separate traps). I think the\nchange in semantics (return null if there is no change), and rename\nand cutover to static method, are important steps forward (addressed\nthe traps).\n\nI fully agree with the change in semantics of the API, but why did we have to add the 'IfNeeded' part? What's wrong with just reopen() (as static)? BTW, when I call an .open() API, I expect it to do it, and not 'IfNeeded', so I don't like it. We still have time to fix it before we release 3.5. ",
            "author": "Shai Erera",
            "id": "comment-13146103"
        },
        {
            "date": "2011-11-08T23:54:25+0000",
            "content": "I fully agree with the change in semantics of the API, but why did we have to add the 'IfNeeded' part?\n\nActually it's 'ifChanged' not 'ifNeeded'.\n\nWhat's wrong with just reopen() (as static)?\n\nBecause reopen implies it's reopening the reader in-place, when it's\nnot (this tripped up some users).  It's opening a new reader, sharing\nwhat it can with the old one.\n\nBTW, when I call an .open() API, I expect it to do it, and not 'IfNeeded', so I don't like it. We still have time to fix it before we release 3.5.\n\nRight, and that's why we didn't name it just '.open'... the\n'ifChanged' is conveying that no opening will take place if there has\nbeen no change to the index. ",
            "author": "Michael McCandless",
            "id": "comment-13146667"
        },
        {
            "date": "2011-11-09T08:16:32+0000",
            "content": "Sorry, I was confused with the IfNeeded from LUCENE-3454. But I don't like 'IfChanged' too . I think that should be part of the javadocs.\n\nHere's a proposal \u2013 if we think our users find these names confusing, why don't we do a poll on java-user and get people to vote on whether they find these names confusing? Because it looks to me like it's a flavor thing - some of us prefer to read javadocs while others prefer methods names that tell us what they do, without reading javadocs.\n\nI don't find that openIfChanged saves me from reading the javadocs, because I still need to read them in order to know what will be returned if the reader hasn't changed. ",
            "author": "Shai Erera",
            "id": "comment-13146841"
        },
        {
            "date": "2011-11-10T00:31:35+0000",
            "content": "\nSorry, I was confused with the IfNeeded from LUCENE-3454. But I don't like 'IfChanged' too . I think that should be part of the javadocs.\n\nIt sounds like we disagree on what's important/salient enough to\nwarrant inclusion in the name.\n\nI think principle of least surprise applies here: it's surprising that\nthis API can return null, so the \"ifChanged\" conveys that there is\nsomething conditional about it.\n\nIf anything is off I think it's that the current name (openIfChanged)\nfails to convey the \"sharing\" that happens, ie, that this is a fast\noperation because it shares sub-readers with the incoming reader.  But\ntrying to work that into the name (openSharedIfChanged?) is\nawkward... any ideas?\n\nHere's a proposal \u2013 if we think our users find these names confusing, why don't we do a poll on java-user and get people to vote on whether they find these names confusing? Because it looks to me like it's a flavor thing - some of us prefer to read javadocs while others prefer methods names that tell us what they do, without reading javadocs.\n\nWe can certainly do this but I don't think the results will be very\nuseful (they will naturally suffer badly from sampling bias).  Ie, the\nusers who respond are the active ones, the more expert ones, ones\nalready familiar with the old naming, etc.  The more normal users, the\nones more likely to be trapped, rarely read the list.\n\nI think user polls / focus groups / etc. are rarely useful.\n\nSo you're free to send such a poll; the results could be interesting,\nbut I don't think it's a good way for us to name methods in general.\n\nI don't find that openIfChanged saves me from reading the javadocs, because I still need to read them in order to know what will be returned if the reader hasn't changed.\n\nRemember code is written only once and the\nread/copied/refactored/shared many more times; the initial writing is\nmuch less important than subsequent readability. ",
            "author": "Michael McCandless",
            "id": "comment-13147388"
        },
        {
            "date": "2011-11-10T09:21:11+0000",
            "content": "Ok, I think the API looks bad that way. If you don't want to do a poll on java-user, then perhaps we should let people vote on dev@ on the principle of naming. I don't suggest to call out a vote whenever we want to rename something. I feel that the way we're going will only make the API ugly-er. It's a style thing, so you and I can debate on it forever , but I think that we both agree that it's important. ",
            "author": "Shai Erera",
            "id": "comment-13147576"
        },
        {
            "date": "2011-11-16T08:26:23+0000",
            "content": "Just a note: whatever we do here, we should also do to TwoPhaseCommit. This will happen automatically since IW implements it, but I thought to point it out since the change to TPC will also affect the facet's DirectoryTaxonmyWriter.\n\nAlso, let's not hold up this issue. Go on with the change. ",
            "author": "Shai Erera",
            "id": "comment-13151083"
        },
        {
            "date": "2012-09-18T16:56:36+0000",
            "content": "\nI guess it's OK to leave rollback as \"short but misleading\"; it's a\nfairly expert API. Also, it quickly becomes obvious to the user that\nthe IW was closed, so it's \"fail fast\" and the damage is not nearly as\nbad as what we see when users don't understand the cost of optimize.\n\nMike, should this issue be resolved as \"won't fix\"? ",
            "author": "Steve Rowe",
            "id": "comment-13457950"
        },
        {
            "date": "2012-09-18T17:52:11+0000",
            "content": "Yeah I think so.  Naming is the hardest part  ",
            "author": "Michael McCandless",
            "id": "comment-13457995"
        },
        {
            "date": "2013-05-10T10:33:39+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653985"
        }
    ]
}