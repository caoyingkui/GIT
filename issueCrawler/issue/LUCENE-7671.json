{
    "id": "LUCENE-7671",
    "title": "Enhance UpgradeIndexMergePolicy with additional options",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "Enhance UpgradeIndexMergePolicy to be a MergePolicy that can be used outside the scope the IndexUpgrader.\n\nThe enhancement aims to allow the UpgradeIndexMergePolicy to:\n\n1) Delegate normal force merges to the underlying merge policy\n2) Enable a flag that will explicitly tell UpgradeIndexMergePolicy when it should start looking for upgrades.\n3) Allow new segments to be considered to be merged with old segments, depending on underlying MergePolicy.\n4) Be configurable for backwards compatibility such that only segments needing an upgrade would be considered when merging, no explicit upgrades.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15847163",
            "date": "2017-01-31T17:27:40+0000",
            "content": "GitHub user kelaban opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/151\n\n    LUCENE-7671 - Enhance UpgradeIndexMergePolicy with additional options\n\n    Also updates Backwards compatibility tests\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/kelaban/lucene-solr jira/master/LUCENE-7671/upgrading-merge-policy\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/151.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #151\n\n\ncommit c0120745617cbd50a920338cb83e751b9a26963e\nAuthor: Keith Laban <klaban1@bloomberg.net>\nDate:   2017-01-25T17:08:22Z\n\n    LUCENE-7671 - Enhance UpgradeIndexMergePolicy with additional options\n\n ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-15852299",
            "date": "2017-02-03T23:10:34+0000",
            "content": "Can you describe the overall goal/use case here?  E.g. is the goal to reshape UpgradeIndexMergePolicy so that you can use it indefinitely as the merge policy for your IndexWriter? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15852346",
            "date": "2017-02-03T23:47:01+0000",
            "content": "Yes, in a nutshell that is my goal. Ultimately I'd like to build a request handler in solr that can enable a core to upgrade it's segments without first taking it offline or reconfiguring the index writer. When not engaged it should have no effect, and when it is engaged it should do minimal work at a time.\n\nThe additional bells and whistles of this PR are for backwards compatibility. \n\nPrevious the behavior was:\n1) Determine all old segments\n2) Ask wrapping merge policy what to do with the old segments\n3) Merge segments specified by wrapped merge policy\n4) Merge the remaining old segments into a single new segment\n\nMeaning, if you were to upgrade an old index using TierdMergePolicy or similar as the wrapped MP and said w.forceMerge(Integer.MAX_INT), the TMP would say nothing to do, but the UpgradeIndexMergePolicy would then take it upon itself to merge everything down into a single segment.\n\nIdeally if max number of segments > number of segments and the wrapped MP is happy, the UIMP should not take it upon itself make any merge decisions and only upgrade segments needing upgrade by rewritting each segment.\n\nAn additional decision to rely on cascading calls from the IW was chosen so that if this was being used as the default MP and an upgrade was in progress, old segments could still be candidates for merges issued during a commit.\n\nThe idea is loosely based on elasticsearch's ElasticsearchMergePolicy.\n\nThere should probably also be support for a Predicate to be passed for determining whether the segment should be upgraded (rewritten), then this MP can be used for things such as deciding to rewrite segments with a different codec. ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15925000",
            "date": "2017-03-14T21:06:48+0000",
            "content": "Rebased with master to keep up-to-date. Michael McCandless did you ever have an opportunity to review my previous post? ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15925030",
            "date": "2017-03-14T21:20:30+0000",
            "content": "Because i've added some oldSingleSegmentNames with this commit, TestBackwardsCompatibility.testUpgradeOldSingleSegmentIndexWithAdditions now fails after rebasing LUCENE-7703 because of this line https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java#L2657 \n\nPrior to this commit this test effectively does nothing as there were no old single segment test files. This failure should be addressed outside the scope of this ticket. ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15925361",
            "date": "2017-03-15T01:03:18+0000",
            "content": "Hi Keith Laban, sorry, I changed jobs and got super busy but I will try to have a look at this again soon \n\nNet/net I think it's reasonable to make it easier to upgrade an index w/o having to close and open a new IndexWriter to set a new merge policy ... ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15925894",
            "date": "2017-03-15T10:53:27+0000",
            "content": "I think, given the added complexity here, we should make a whole new\nmerge policy, and leave the existing UpgradeIndexMergePolicy.java\nas is?\n\nCan you also add getters when you add a setter (e.g. setMaxUpgradesAtATime?\n\nInstead of two booleans setUpgradeInProgress and\nsetRequireExplicitUpgrades, can't we just have one (i.e., it's\nalways explicit)?  Maybe rename it to setEnableUpgrades?  The CLI\ntool would just enable that.\n\nIf ignoreNewSegments is true, and requireExplicitUpgrades\nis true but upgradeInProgress is false, it looks like with this\npatch we will fail to carry out the wrap'd MP's force merge request?\n\nTypo in the javadocs for setMaxUpgradesAtATime: natrually -> naturally ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15930202",
            "date": "2017-03-17T15:58:22+0000",
            "content": "How would you feel about removing some of the complexity if we are going to split it out into a separate merge policy? A lot of added complexity here was to make it compatible with the previous version. E.g. ignoreNewSegments will conform to the old behavior of only considering segments needing upgrade as merge candidates.\n\nIdeally this merge policy will have the options:\n\n\n\tsetEnableUpgrades\n\tsetMaxUpgradesAtATime\n\n\n\n\nAnd the behavior should be:\n\n\n\tDelegate to the wrapped MP UNLESS enableUpgrades is set\n\tWhen enabledUpgrades is set first delegate to wrap'd MP then rewrite (no merge) old segments in new format\n\n ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15930822",
            "date": "2017-03-17T22:13:12+0000",
            "content": "A lot of added complexity here was to make it compatible with the previous version.\n\nRight, I think as a separate merge policy things can be much cleaner. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15933483",
            "date": "2017-03-20T20:29:57+0000",
            "content": "Pushed a new version that breaks out the behavior outlined above into a new class called LiveUpgradeIndexMergePolicy. The name indicates that a different IndexWriter need not be used.\n\nAdditionally, because the new MP does not have an option to ignore new segments, I've changed the IndexUpgrader script to accept an additional parameter telling it to \"include-new-segments\" allowing the switch between the old behavior and new behavior. \n\nThe test are randomized between old/new behavior for coverage.  ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15935511",
            "date": "2017-03-21T23:07:23+0000",
            "content": "Thanks Keith Laban; I'll have a look. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15942474",
            "date": "2017-03-26T22:41:04+0000",
            "content": "Hi Keith Laban, the latest PR looks great!  I found only a couple minor things:\n\nTypo in this test case:\n\ntestUpgradeWithExcplicitUpgrades\n\n(the first c should be removed).\n\nIn the IndexUpgrader usage output can you explain what the -include-new-segments does? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15949261",
            "date": "2017-03-30T15:14:20+0000",
            "content": "Michael McCandless I updated PR with some extra changes:\n\n\n\tFixed typo in testUpgradeWithExcplicitUpgrades\n\tAdded usage for -include-new-segments options\n\tAlso added -num-segments option for IndexUpgrader and usage\n\tAdded random toggle for new options to be added in tests\n\n\n\nStill outstanding: See my earlier comment about the failing test.\n ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15952832",
            "date": "2017-04-02T19:51:58+0000",
            "content": "Hi Keith Laban, thank you.  To fix the failing test, can you change it to use the version of IndexWriter.addIndexes that takes CodecReader[] instead?  This should have the same effect (some old, some new segments in one index). ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15957388",
            "date": "2017-04-05T18:29:27+0000",
            "content": "The test now passes using the CodeReader interface. I also renamed the class to LiveUpgradeSegmentsMergePolicy because it upgrades on a segment by segment basis verse the UpgradeIndexMergePolicy which tries to ugprade all segments. \n\nIt looks like someone has been touching  TestBackwardCompatibility class and this no longer cleanly lands on master. I'll take a look at catching it up later ",
            "author": "Keith Laban"
        },
        {
            "id": "comment-15961212",
            "date": "2017-04-07T18:12:01+0000",
            "content": "Michael McCandless, I pushed an update which at the moment cleanly applies.\n\nHowever is looks like LUCENE-7756 break addIndexes again because of this check which was added: \n\n+  private void validateMergeReader(CodecReader leaf) {\n+    LeafMetaData segmentMeta = leaf.getMetaData();\n+    if (segmentInfos.getIndexCreatedVersionMajor() != segmentMeta.getCreatedVersionMajor()) {\n+      throw new IllegalArgumentException(\"Cannot merge a segment that has been created with major version \"\n+          + segmentMeta.getCreatedVersionMajor() + \" into this index which has been created by major version \"\n+          + segmentInfos.getIndexCreatedVersionMajor());\n+    }\n+\n+    if (segmentInfos.getIndexCreatedVersionMajor() >= 7 && segmentMeta.getMinVersion() == null) {\n+      throw new IllegalStateException(\"Indexes created on or after Lucene 7 must record the created version major, but \" + leaf + \" hides it\");\n+    }\n+\n+    Sort leafIndexSort = segmentMeta.getSort();\n+    if (config.getIndexSort() != null && leafIndexSort != null\n+        && config.getIndexSort().equals(leafIndexSort) == false) {\n+      throw new IllegalArgumentException(\"cannot change index sort from \" + leafIndexSort + \" to \" + config.getIndexSort());\n+    }\n+  }\n\n\n\nIs this mergepolicy working against future goals of lucene such that it will be impossible to upgrade major versions without reIndexing? ",
            "author": "Keith Laban"
        }
    ]
}