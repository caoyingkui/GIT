{
    "id": "SOLR-10011",
    "title": "Refactor PointField & TrieField to share common code",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We should eliminate PointTypes and TrieTypes enum to have a common enum for both. That would enable us to share a lot of code between the two field types.\n\nIn the process, fix the bug:\nPointFields with indexed=false, docValues=true seem to be using (Int|Double|Float|Long)Point.newRangeQuery() for performing exact matches and range queries. However, they should instead be using DocValues based range query.",
    "attachments": {
        "SOLR-10011.patch": "https://issues.apache.org/jira/secure/attachment/12848512/SOLR-10011.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-20T10:49:20+0000",
            "content": "Here's a patch that introduces a new abstract method, getPointRangeQuery(). The getRangeQuery() method either delegates to this getPointRangeQuery method, i.e. in case of indexed=true or docValues=false, or delegates to another method for create a DocValuesRangeQuery. Modified the tests to check for the correctness of such fields.\n\nFWIW, this was necessary while working on SOLR-5944, since for fields where indexed=false, stored=false, docValues=true, the updates can do in-place modification to the docValues, but current code would've ignored the docValues altogether and performed queries on the points field.\n\nTom\u00e1s Fern\u00e1ndez L\u00f6bbe, can you please review? ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15831535"
        },
        {
            "date": "2017-01-20T14:20:58+0000",
            "content": "Updating patch to master (after LUCENE-7643 commit).\nWe might need to refactor a bit, either now or later, to better re-use DV code between TrieField and PointField classes. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15831805"
        },
        {
            "date": "2017-01-20T17:54:49+0000",
            "content": "LGTM.\nWe might need to refactor a bit, either now or later, to better re-use DV code between TrieField and PointField classes.\nEither way is fine with me. I was thinking in may make sense to remove PointField.PointTypes and TrieField.TrieTypes and have a NumericField.Type that can be shared with both implementations. That would help this refactor, but may need to be master-only ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15832180"
        },
        {
            "date": "2017-01-21T00:59:16+0000",
            "content": "Here's a stab at refactoring, by introducing a new common base class NumericFieldType.\n\nThe tests pass after this refactoring. Tom\u00e1s Fern\u00e1ndez L\u00f6bbe, can you please review?\n\nThat would help this refactor, but may need to be master-only\nI think the refactoring in this patch is backwards compatible. Had an offline discussion with Hoss Man, who suggested that such an approach (introducing a new base class on top of TrieField) is backwards compatible. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15832691"
        },
        {
            "date": "2017-01-21T17:14:48+0000",
            "content": "I like the refactor.\nI think the refactoring in this patch is backwards compatible. \nKind of... Anyone using TrieFields.TrieTypes, TrieTypes.getType() or TrieTypes.type will have their code failing. So I don't know if we consider those kind of internal, or if we are OK with the change anyway since it's easy to fix. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15833065"
        },
        {
            "date": "2017-01-21T22:20:51+0000",
            "content": "Kind of... Anyone using TrieFields.TrieTypes, TrieTypes.getType() or TrieTypes.type will have their code failing. So I don't know if we consider those kind of internal, or if we are OK with the change anyway since it's easy to fix.\n\nAFAIR, we've cared about such internal changes only on a best effort basis. Since it should be fairly apparent to a developer as to why their plugin fails, I suggest we go ahead with the refactoring even for 6x. But I shall defer to your judgement. Hoss Man, do you have any opinion? ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15833175"
        },
        {
            "date": "2017-01-21T22:59:01+0000",
            "content": "Commit 285a1013ad04dd1cd5e5e41ffa93a87fe862c152 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=285a101 ]\n\nSOLR-10011: Refactor PointField & TrieField to now have a common base class, NumericFieldType.\n\n  The TrieField.TrieTypes and PointField.PointTypes are now consolidated to NumericFieldType.NumberType. This\n  refactoring also fixes a bug whereby PointFields were not using DocValues for range queries for\n  indexed=false, docValues=true fields. ",
            "author": "ASF subversion and git services",
            "id": "comment-15833182"
        },
        {
            "date": "2017-01-21T23:22:40+0000",
            "content": "Commit 0f7990b2c8590d169add59354cc2678260f94e03 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0f7990b ]\n\nSOLR-10011: Fix exception log message ",
            "author": "ASF subversion and git services",
            "id": "comment-15833188"
        },
        {
            "date": "2017-01-24T03:33:09+0000",
            "content": "Commit 285a1013ad04dd1cd5e5e41ffa93a87fe862c152 in lucene-solr's branch refs/heads/apiv2 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=285a101 ]\n\nSOLR-10011: Refactor PointField & TrieField to now have a common base class, NumericFieldType.\n\n  The TrieField.TrieTypes and PointField.PointTypes are now consolidated to NumericFieldType.NumberType. This\n  refactoring also fixes a bug whereby PointFields were not using DocValues for range queries for\n  indexed=false, docValues=true fields. ",
            "author": "ASF subversion and git services",
            "id": "comment-15835598"
        },
        {
            "date": "2017-01-24T03:33:11+0000",
            "content": "Commit 0f7990b2c8590d169add59354cc2678260f94e03 in lucene-solr's branch refs/heads/apiv2 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0f7990b ]\n\nSOLR-10011: Fix exception log message ",
            "author": "ASF subversion and git services",
            "id": "comment-15835599"
        },
        {
            "date": "2017-01-26T19:31:05+0000",
            "content": "Ishan Chattopadhyaya as part of this refactor, what do you think about:\ndeprecating (and removing in master)\nFieldType.java\n  public LegacyNumericType getNumericType() {\n    return null;\n  }\n\n\nand replacing it with\nFieldType.java\n public NumericFieldType.NumberType getNumberType() {\n    return null;\n  }\n\n\n...also replacing the newly added\nNumericFieldType.java\n  final public NumberType getType() {\n    return type;\n  }\n\n\nwith\nNumericFieldType.java\n  @Override\n final public NumericFieldType.NumberType getNumberType() {\n    return type;\n  }\n\n\nThat way clients don't need to cast to NumericFieldType for getting the actual type. Also, if we do it, we should probably move NumberType out of NumericFieldType and make it top level ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15840279"
        },
        {
            "date": "2017-01-26T20:58:23+0000",
            "content": "+1. \n\nI was myself wondering what to do about LegacyNumericType getType() and deprecating it sounds good, since LegacyNumericType is deprecated. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15840446"
        },
        {
            "date": "2017-01-27T17:31:30+0000",
            "content": "I'll upload a patch for this shortly ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15843153"
        },
        {
            "date": "2017-02-02T02:47:38+0000",
            "content": "Sorry for the delay, here is the patch. I replaced all the uses of FieldType.getNumericType() with FieldType.getNumberType(). Note that since NumberType has a DATE value, TrieDateField.getNumberType() returns DATE (instead of LONG, like TrieDateField.getNumericType()). Let me know what you think Ishan Chattopadhyaya ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15849315"
        },
        {
            "date": "2017-02-06T21:34:55+0000",
            "content": "+1, LGTM! Sorry for the delay in reviewing; I missed your comment completely. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15854793"
        },
        {
            "date": "2017-02-07T18:38:40+0000",
            "content": "Commit 59c41e2a6c685dd9ac943c69d12e9bfe2a7d380e in lucene-solr's branch refs/heads/master from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=59c41e2 ]\n\nSOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n\nModify references to getNumericType() to use the new getNumberType(). NumberType is shared for the different numeric implementations supported in Solr (TrieFields and PointFields).\nCC SOLR-8396 ",
            "author": "ASF subversion and git services",
            "id": "comment-15856513"
        },
        {
            "date": "2017-02-13T21:18:27+0000",
            "content": "Commit 6a97952a6173298f457aebe869a53ba130512f6f in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6a97952 ]\n\nSOLR-10011: Refactor PointField & TrieField to now have a common base class, NumericFieldType.\n\n  The TrieField.TrieTypes and PointField.PointTypes are now consolidated to NumericFieldType.NumberType. This\n  refactoring also fixes a bug whereby PointFields were not using DocValues for range queries for\n  indexed=false, docValues=true fields. ",
            "author": "ASF subversion and git services",
            "id": "comment-15864450"
        },
        {
            "date": "2017-02-13T21:18:31+0000",
            "content": "Commit 5a7cdd89756baed3a7d49d923fa9f66cb2baff98 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5a7cdd8 ]\n\nSOLR-10011: Fix exception log message ",
            "author": "ASF subversion and git services",
            "id": "comment-15864451"
        },
        {
            "date": "2017-02-13T21:18:34+0000",
            "content": "Commit c27880e332722e992294e05749b63300d3eaab44 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c27880e ]\n\nSOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n\nModify references to getNumericType() to use the new getNumberType(). NumberType is shared for the different numeric implementations supported in Solr (TrieFields and PointFields).\nCC SOLR-8396 ",
            "author": "ASF subversion and git services",
            "id": "comment-15864452"
        },
        {
            "date": "2017-02-13T21:18:57+0000",
            "content": "Commit 81b4288a2133dce87e0ac92da5f6e37dc28176f6 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81b4288 ]\n\nSOLR-8396, SOLR-9987, SOLR-10011: Move CHANGES entries from 7.0 to 6.5 ",
            "author": "ASF subversion and git services",
            "id": "comment-15864459"
        },
        {
            "date": "2017-02-14T18:12:33+0000",
            "content": "Backported the changes. resolving ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15866301"
        }
    ]
}