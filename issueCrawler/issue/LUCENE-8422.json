{
    "id": "LUCENE-8422",
    "title": "Add Matches iteration to interval queries",
    "details": {
        "components": [],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "Follow up to LUCENE-8404, we can now add Matches iteration to interval queries in the sandbox.",
    "attachments": {
        "LUCENE-8422.patch": "https://issues.apache.org/jira/secure/attachment/12932681/LUCENE-8422.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16552585",
            "author": "Alan Woodward",
            "content": "Here is a patch that adds a collection interface to IntervalIterators, and uses that to drive Matches iteration and sub-iteration.\u00a0 There's a lot of shared code with Spans here, so I've extracted the common parts out into an InnerMatchesIterator in core.\n\nSome intervals (ordered and unordered) eagerly advance the first sub-interval within a match to ensure that matches are minimal, which means we need to cache the collected intervals.\u00a0 Because this might be expensive, I've added a new boolean to IntervalsSource.intervals() which tells the iterator up-front whether or not it needs to use a cache.\u00a0 This is checked using assertions at the moment, but it might be better to throw IllegalStateException if collect() is called on an iterator generated without a cache. ",
            "date": "2018-07-23T10:07:24+0000"
        },
        {
            "id": "comment-16559870",
            "author": "Adrien Grand",
            "content": "I'm curious whether you considered adding eg. IntervalsSource#matches instead of IntervalIterator#collect, which would be more aligned with how things work on regular queries? ",
            "date": "2018-07-27T15:01:36+0000"
        },
        {
            "id": "comment-16587714",
            "author": "Alan Woodward",
            "content": "If we didn't need to worry about submatches, then IntervalsSource#matches would work fine.\u00a0 But where submatches appears differs from iterator to iterator, and IntervalsSource implementations mostly delegate how iterators are generated to a function of some kind, so putting the logic directly in IntervalIterator seemed to make the most sense. ",
            "date": "2018-08-21T16:42:21+0000"
        },
        {
            "id": "comment-16591393",
            "author": "Adrien Grand",
            "content": "I see how putting the logic in IntervalIterator makes matches easier to implement, but I like it less in terms of API. For instance I wish that we wouldn't need to add a new parameter to IntervalsSource#intervals and new methods to IntervalIterator to implement this change. I haven't though about it much but since intervals seems to be a subset of MatchesIterator, I'm wondering that we might be able to pull matches iterators from sub clauses and wrap them as intervals in order to be able to reuse the function that selects matches? ",
            "date": "2018-08-24T09:31:44+0000"
        },
        {
            "id": "comment-16598475",
            "author": "Alan Woodward",
            "content": "Here's a patch that adds IntervalsSource#matches instead.\u00a0 The IntervalIterator API is unchanged.\n\nA\u00a0few things to note:\n\n1) Conjunction intervals that eagerly advance in order to minimize themselves have been moved to a specialized class that caches Matches.\u00a0 This wraps things up nicely, and doesn't touch the classes used for searching.\n\n2) The MatchesIterator returned from Intervals.containedBy() has the unusual property that\u00a0its positions and offsets don't quite match up - the positions are taken from the internal interval, while the offsets are from the containing interval.\u00a0 This means that the MatchesIterator can be passed back up and used as an Iterator in a containing MatchesIterator, but that highlighters (which operate only on offsets) can correctly highlight the whole block.\n\n3)\u00a0All sources return null from MatchesIterator#getQuery().\u00a0 IntervalQuery#matches()\u00a0then substitutes in the top-level query.\u00a0 ",
            "date": "2018-08-31T09:24:00+0000"
        },
        {
            "id": "comment-16602118",
            "author": "Adrien Grand",
            "content": "+1 to the patch in general, only two minor comments:\n\n\tMaybe we should put some of the helpers that you are adding like IntervalIterator#wrapMatches or MatchesIterator#disjunction to separate classes to keep IntervalIterator and MatchesIterator only about consuming iterators/matches? I think that would make the API easier to digest.\n\tShould IntervalIterator#wrapMatches return an iterator whose doc ID is initially -1? Also #docID() should return NO_MORE_DOCS after nextDoc/advance returned NO_MORE_DOCS.\n\n\n\nFYI precommit complains about unused imports. ",
            "date": "2018-09-03T12:48:35+0000"
        },
        {
            "id": "comment-16602123",
            "author": "Adrien Grand",
            "content": "All sources return null from MatchesIterator#getQuery()\n\nShould we throw an UnsupportedOperation instead? The assumption seems to be that it should never get called? ",
            "date": "2018-09-03T12:52:38+0000"
        },
        {
            "id": "comment-16602173",
            "author": "Alan Woodward",
            "content": "MatchesIterator#disjunction could move to Matches, maybe?\u00a0 It needs to stay in core.search as DisjunctionMatchesIterator is package-private.\u00a0 IntervalIterator#wrapMatches can definitely move. ",
            "date": "2018-09-03T13:30:49+0000"
        },
        {
            "id": "comment-16602180",
            "author": "Adrien Grand",
            "content": "I was thinking of something like having a MatchesUtils class with javadocs that are explicit about the fact that these methods are only useful to implement Matches (as opposed to consuming them). Keeping it in core is ok with me, the goal would be for the APIs on Matches/MatchesIterator (and similarly for IntervalsSource/IntervalsIterator) to be minimal and not confuse users with functions that are implementation helpers. ",
            "date": "2018-09-03T13:40:37+0000"
        },
        {
            "id": "comment-16602199",
            "author": "Alan Woodward",
            "content": "+1 to MatchesUtils, there are a couple of static functions on Matches itself that could move there as well and tidy up the API surface. ",
            "date": "2018-09-03T14:01:29+0000"
        },
        {
            "id": "comment-16602241",
            "author": "Alan Woodward",
            "content": "Updated patch, moving the various helper functions to MatchesUtils (in core) and IntervalMatches (in intervals).\u00a0 I added a note to CHANGES about the Matches helper functions moving, but I think we're fine doing this in a point release given that the API is marked as experimental. ",
            "date": "2018-09-03T14:46:20+0000"
        },
        {
            "id": "comment-16602273",
            "author": "Adrien Grand",
            "content": "+1 ",
            "date": "2018-09-03T15:19:45+0000"
        },
        {
            "id": "comment-16602432",
            "author": "ASF subversion and git services",
            "content": "Commit 9c0075be562b323942c52026bf89265e6ba2543e in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9c0075b ]\n\nLUCENE-8422: Add matches to IntervalQuery ",
            "date": "2018-09-03T20:12:11+0000"
        },
        {
            "id": "comment-16602433",
            "author": "ASF subversion and git services",
            "content": "Commit 1acfca5ebcc4eb8600fe0fc0def160f610866f72 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1acfca5 ]\n\nLUCENE-8422: Add matches to IntervalQuery ",
            "date": "2018-09-03T20:12:12+0000"
        }
    ]
}