{
    "id": "SOLR-11711",
    "title": "distributed pivot & field facets can processes excessive docs unneccessarily due to internal mincount=0",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "faceting"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "master (8.0)",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently while sending pivot facet requests to each shard, the facet.pivot.mincount is set to 0 if the facet is sorted by count with a specified limit > 0. However with a mincount of 0, the pivot facet will use exponentially more wasted memory for every pivot field added. This is because there will be a total of limit^(# of pivots) pivot values created in memory, even though the vast majority of them will have counts of 0, and are therefore useless.\n\nImagine the scenario of a pivot facet with 3 levels, and facet.limit=1000. There will be a billion pivot values created, and there will almost definitely be nowhere near a billion pivot values with counts > 0.\n\nThis likely due to the reasoning mentioned in this comment in the original distributed pivot facet ticket. Basically it was thought that the refinement code would need to know that a count was 0 for a shard so that a refinement request wasn't sent to that shard. However this is checked in the code, in this part of the refinement candidate checking. Therefore if the pivot.mincount was set to 1, the non-existent values would either:\n\n\tNot be known, because the facet.limit was smaller than the number of facet values with positive counts. This isn't an issue, because they wouldn't have been returned with pivot.mincount set to 0.\n\tWould be known, because the facet.limit would be larger than the number of facet values returned. therefore this conditional would return false (since we are only talking about pivot facets sorted by count).\n\n\n\nThe solution, is to use the same pivot mincount as would be used if no limit was specified. \n\nThis also relates to a similar problem in field faceting that was \"fixed\" in SOLR-8988. The solution was to add a flag, facet.distrib.mco, which would enable not choosing a mincount of 0 when unnessesary. Since this flag can only increase performance, and doesn't break any queries I have removed it as an option and replaced the code to use the feature always. \nThere was one code change necessary to fix the MCO option, since the refinement candidate selection logic had a bug. The bug only occured with a minCount > 0 and limit > 0 specified. When a shard replied with less than the limit requested, it would assume the next maximum count on that shard was the mincount, where it would actually be the mincount-1 (because a facet value with a count of mincount would have been returned). Therefore the MCO didn't cause any errors, but with a mincount of 1 the refinement logic always assumed that the shard had more values with a count of 1.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-30T21:30:53+0000",
            "content": "GitHub user HoustonPutman opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/279\n\n    SOLR-11711: Improved memory usage for distributed field and pivot facets.\n\n    Removed the FACET_DISTRIB_MCO option, since the behavior is now built in.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/HoustonPutman/lucene-solr pivot_facet_memory_fix\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/279.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #279\n\n\ncommit 8b7ef286100730e26a9bdc8875fce31a5b47b59a\nAuthor: Houston Putman <hputman1@bloomberg.net>\nDate:   2017-11-30T21:10:50Z\n\n    Removed FACET_DISTRIB_MCO option, improved memory usage for distributed field and pivot facets.\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16273492"
        },
        {
            "date": "2017-12-06T19:00:08+0000",
            "content": "Hey Hoss Man, any thoughts on this patch? Particularly the field facet part. You mentioned in this comment why you would be wary of changing the behavior due to the comment in the code. Keith Laban and I believe that the fixing the last = Math.max(0, initialMincount - 1); line will address why anyone was seeing performance degredation with the facet.distrib.mco option given. And we can't find another reason why additional refinement would be needed. ",
            "author": "Houston Putman",
            "id": "comment-16280669"
        },
        {
            "date": "2017-12-08T19:05:38+0000",
            "content": "I think you assessment makes sense (and thank you for all the due dilligence and back linking to the relevant comments/jiras!) ... I'm hammering on the randomized tests now just to sanity check that we're not missing something obvious, but overall i'm +1 to the patch.\n\nMy one objection is to the immediate removal of the FACET_DISTRIB_MCO constant from FacetParams.java.  The patch we commit & backport to 7x should only deprecate that param and remove it's usage in existing code, that way users who upgrade will get a deprecation warning when compiling their solrj code, but not a compilation failure.  once the backport is done we can do a separate commit to remove it from master.\n\nif you feel inclined to revise your patch/pr to deal with the deprecation i'll aim for committing/backporting monday baring test failures \u2013 but if you don't have time no worries: it's a trivial thing for me to make myself locally before committing ",
            "author": "Hoss Man",
            "id": "comment-16284045"
        },
        {
            "date": "2017-12-08T19:49:01+0000",
            "content": "Thanks for taking a look and running those tests!\n\nI'll add back in the FACET_DISTRIB_MCO option and deprecate it for 7x.\n\nWhat are your thoughts to backporting this fix to 6x and 5x? ",
            "author": "Houston Putman",
            "id": "comment-16284126"
        },
        {
            "date": "2017-12-08T19:58:37+0000",
            "content": "The deprecation fix is in now. ",
            "author": "Houston Putman",
            "id": "comment-16284136"
        },
        {
            "date": "2017-12-09T00:42:20+0000",
            "content": "What are your thoughts to backporting this fix to 6x and 5x?\n\nat this point the only thing that might get backported/released on 5x would be a heinous security issue \u2013 even for 6x i can't magine any sort of backporting/releasing for non-security related bugs.  (The bar gets much higher as the age of the release branch gets older, because the type of user still using those older versions tends to be very concerned about the risk of unneccessary changes for bugs they may not have even encountered)\n\nI'm not actually clear on why you classified this as a \"Bug\" and updated the summary to say \"Fix minCount bug\" ?\n\nAFAICT, from an end user standpoint, this only improves the efficiency ...  I don't see any way that the \"refinement candidate selection logic had a bug\" you mentioned would have resulted in incorrect results being returned to clients \u2013 it simply ment that solr was doing more work then needed to refine counts that it should have recognized in advance we're definitely not viable candidates for the final results.\n\nThis fix essentially seems tantamount to \"removing unnecessary computation\" \u2013 which would be classified as an optimization, not a bug fix. (In which case i definitely don't think it makes sense to backport this to 6x)\n\nAm I misunderstanding your changes? is there some situation in which the current code can produce incorrect results? If so we should definitely be adding a test case for that to insure against regression. ",
            "author": "Hoss Man",
            "id": "comment-16284475"
        },
        {
            "date": "2017-12-11T15:02:11+0000",
            "content": "Oh sorry, I guess I misunderstood the implications of the word \"Bug\". It is just an inefficiency. I can change it back if you think it's misleading.\n\nAnd I understand your issues with backporting further than 7x.  ",
            "author": "Houston Putman",
            "id": "comment-16286011"
        },
        {
            "date": "2017-12-11T17:23:51+0000",
            "content": "no worries, it's definitely an eye of the beholder type situation \u2013 personally i try to ensure that i put myself in the shoes of an end user skimming CHANGES/jira and wondering \"how badly does this hurt me?\" ",
            "author": "Hoss Man",
            "id": "comment-16286289"
        },
        {
            "date": "2017-12-11T17:39:16+0000",
            "content": "Commit 41113ecbb62694e7e07bd236ecd0b5169bd62547 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=41113ec ]\n\nSOLR-11711: Fixed distributed processing of facet.field/facet.pivot sub requests to prevent requesting unneccessary and excessive '0' count terms from each shard\n\n(cherry picked from commit efc2f32ea05029edff9144f163d0619d091d1ba3) ",
            "author": "ASF subversion and git services",
            "id": "comment-16286315"
        },
        {
            "date": "2017-12-11T17:39:18+0000",
            "content": "Commit efc2f32ea05029edff9144f163d0619d091d1ba3 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=efc2f32 ]\n\nSOLR-11711: Fixed distributed processing of facet.field/facet.pivot sub requests to prevent requesting unneccessary and excessive '0' count terms from each shard ",
            "author": "ASF subversion and git services",
            "id": "comment-16286316"
        },
        {
            "date": "2017-12-11T17:41:58+0000",
            "content": "Thanks Houston Putman !\n\n(and thanks Keith Laban for the initial work in SOLR-8988 ... sorry i didn't fully grasp it enough at the time) ",
            "author": "Hoss Man",
            "id": "comment-16286324"
        },
        {
            "date": "2017-12-12T18:04:41+0000",
            "content": "Github user HoustonPutman closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/279 ",
            "author": "ASF GitHub Bot",
            "id": "comment-16287988"
        }
    ]
}