{
    "id": "SOLR-6638",
    "title": "Create an off-heap implementation of Solr caches",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "There are various implementations of off-heap implementations of cache. One such is using sun.misc.Unsafe .The cache implementations are pluggable in Solr anyway",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-21T13:35:23+0000",
            "author": "Tommaso Teofili",
            "content": "for the record there's a quite old one (based on Solr 3.6.2) in Apache DirectMemory (see http://svn.apache.org/viewvc/directmemory/trunk/integrations/solr/src/main/java/org/apache/directmemory/solr/SolrOffHeapCache.java?view=markup) ",
            "id": "comment-14178391"
        },
        {
            "date": "2014-10-21T13:46:01+0000",
            "author": "Uwe Schindler",
            "content": "Please don't use unsafe! Use ByteBuffer.allocateDirect(). This is enough to serve a cache. In Java 7 and Java 8 the ByteBuffer overhead is minimal (look at the assembler code generated by Hotspot). ",
            "id": "comment-14178403"
        },
        {
            "date": "2014-10-21T13:49:08+0000",
            "author": "Yonik Seeley",
            "content": "For those who will be at Lucene Revolution in a couple of weeks, I have a talk about this in the \"internals\" track:\n\nNative Code and Off-Heap Data Structures for Solr\nPresented by Yonik Seeley, Heliosearch\n\nOff-heap data structures and native code performance improvements for Apache Solr are being developed as part of the Heliosearch project. This presentation will cover the reasons behind these features, implementation details, and performance impacts. Recently developed features will also be covered. ",
            "id": "comment-14178409"
        },
        {
            "date": "2014-10-21T14:35:08+0000",
            "author": "Noble Paul",
            "content": "Uwe Schindler , I was going through Cassandra codebase and found them using sun.misc.Unsafe to do malloc/dealloc memory. I will explore  ByteBuffer.allocateDirect() . Is there any project using that ?\n\n Yonik Seeley , sure . I'll look forward to that ",
            "id": "comment-14178456"
        },
        {
            "date": "2014-10-21T14:37:22+0000",
            "author": "Noble Paul",
            "content": "Tommaso Teofili Is that code relevant in this new age?  ",
            "id": "comment-14178459"
        },
        {
            "date": "2014-10-21T14:43:09+0000",
            "author": "Tommaso Teofili",
            "content": "Is that code relevant in this new age?\n\nit would have to be updated to be used with Solr 4.x, but it shouldn't be too hard. If you plan to run some tests/benchmarks I could update that so that you can try (the interesting thing there is also that serialization would be pluggable, e.g. via Kryo or others). ",
            "id": "comment-14178467"
        },
        {
            "date": "2014-10-21T18:22:12+0000",
            "author": "Shinichiro Abe",
            "content": "FYI, Apache DirectMemory uses ByteBuffer.allocateDirect(). 1 years ago, I tried to upgrade to Solr 4.4. A very small patch is on DIRECTMEMORY-134. ",
            "id": "comment-14178784"
        },
        {
            "date": "2016-07-27T13:39:44+0000",
            "author": "Alexander Block",
            "content": "Did anyone try to use MapDB for an off-heap cache implementation? ",
            "id": "comment-15395693"
        }
    ]
}