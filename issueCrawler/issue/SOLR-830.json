{
    "id": "SOLR-830",
    "title": "snappuller picks bad snapshot name",
    "details": {
        "affect_versions": "1.2,                                            1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "replication (scripts)"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "as mentioned on the mailing list...\n\nhttp://www.nabble.com/FileNotFoundException-on-slave-after-replication---script-bug--to20111313.html#a20111313\n\nWe're seeing strange behavior on one of our slave nodes after replication. \nWhen the new searcher is created we see FileNotFoundExceptions in the log\nand the index is strangely invalid/corrupted.\n\nWe may have identified the root cause but wanted to run it by the community. \nWe figure there is a bug in the snappuller shell script, line 181:\n\nsnap_name=`ssh -o StrictHostKeyChecking=no ${master_host} \"ls\n${master_data_dir}|grep 'snapshot\\.'|grep -v wip|sort -r|head -1\"` \n\nThis line determines the directory name of the latest snapshot to download\nto the slave from the master.  Problem with this line is that it grab the\ntemporary work directory of a snapshot in progress.  Those temporary\ndirectories are prefixed with  \"temp\" and as far as I can tell should never\nget pulled from the master so its easy to disambiguate.  It seems that this\ntemp directory, if it exists will be the newest one so if present it will be\nthe one replicated: FAIL.",
    "attachments": {
        "solr-830.patch": "https://issues.apache.org/jira/secure/attachment/12394089/solr-830.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12643512",
            "date": "2008-10-29T15:19:40+0000",
            "content": "while i haven't noticed this bug myself, and i'm not very \"shell script smart\", it does seem like it would be a problem ... prior to r529471 snappuller used a find command that required the filenames start with \"snapshot.\" where as the current grep just requires that it contain \"snapshot.\"\n\nthe original poster had the following suggested fix...\n\n\nWe've tweaked the line to exclude any directories starting with \"temp\":\nsnap_name=`ssh -o StrictHostKeyChecking=no ${master_host} \"ls\n${master_data_dir}|grep 'snapshot\\.'|grep -v wip|grep -v temp|sort -r|head\n-1\"` \n\n\n\n...my first reaction would be to change the grep to use an anchored regex, but i'm not sure how portable that is - so perhaps the \"grep -v temp\" is the way to go.  I'll leave it to people who understand shell scripts better. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12644004",
            "date": "2008-10-30T15:48:48+0000",
            "content": "\nI think we should use a regular expression and match against the naming convention of the snapshot (snapshot.YYYYmmddHHMMss).  Here is what I propose:\n\nsnap_name=`ssh -o StrictHostKeyChecking=no ${master_host} \"ls\n${master_data_dir}|egrep '^snapshot\\.[123456789][0-9]\n{13}\n$'|sort -r|head\n-1\"` "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12644011",
            "date": "2008-10-30T16:09:09+0000",
            "content": "that's kind of what i thinking, but i wasn't sure how portable egrep is. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12644037",
            "date": "2008-10-30T16:59:39+0000",
            "content": "From the egrep(1) man page:\n\n\nTraditional egrep did not support the { metacharacter, and some egrep\nimplementations  support \\{ instead, so portable scripts should avoid {\nin egrep patterns and should use [{] to match a literal {.\n\n\n\nPerl is pretty portable, and has a stable regex language - how about (untested):\n\n\nsnap_name=`ssh -o StrictHostKeyChecking=no ${master_host} \\\n\"perl -e 'chdir q/${master_data_dir}/; print ((sort grep {/^snapshot[.][1-9][0-9]{13}\\$/} <*>)[-1])'\"`\n\n "
        },
        {
            "author": "Bill Au",
            "id": "comment-12647331",
            "date": "2008-11-13T16:43:59+0000",
            "content": "Steve, thanks for the perl code.  I need to get rid of the \"\\\" before the \"$\" in order to get it to work for me:\n\nperl -e 'chdir q/${master_data_dir}/; print ((sort grep {/^snapshot[.][1-9][0-9]\n{13}\n$/} <*>)[-1])'\n\n\nI have tested this on Linux and FreeBSD.  I will test on Mac OS X tonight.  It will be good if someone can do a quick test on Solaris.  You really don't need a full brown Solr installation to test it.  Just create some dummy directory with various names like:\n\nsnapshot.00080527124131\nsnapshot.20080527124131\nsnapshot.20080527124131-wip\nsnapshot.20080527140518\nsnapshot.20080527140610\nsnapshot.20081113113700\nsnapshot.2080527124131\ntemp-snapshot.20080527124131\n\nand then run the perl command to make sure the right one is returned.  With the data set above, you should get:\n\nsnapshot.20081113113700 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12647345",
            "date": "2008-11-13T17:42:28+0000",
            "content": "Bill, I ran the following script on a Linux box against a remote Solaris 2.8 box, with Perl 5.8.0 installed, on which I created the set of empty directories you listed:\n\n\nmaster_host=remotesolaris\nmaster_data_dir=/tmp/solrtest\nsnap_name=`ssh -o StrictHostKeyChecking=no ${master_host} \\\n\"perl -e 'chdir q|${master_data_dir}|; print ((sort grep {/^snapshot[.][1-9][0-9]{13}$/} <*>)[-1])'\"`\necho ${snap_name}\n\n\n\nN.B.: I had to change the quoting boundary character around ${master_data_dir}, from '/' to '|', since ${master_data_dir} contains '/' characters \u2013 I think '|' is really unlikely to be a pathname component.\n\nIt worked for me both with and without the '\\' before the '$' \u2013 I get the following output from the script:\n\nsnapshot.20081113113700 "
        },
        {
            "author": "Bill Au",
            "id": "comment-12647384",
            "date": "2008-11-13T20:20:26+0000",
            "content": "Steven, thanks for testing on Solaris.  It looks like on Linux and FreeBSD that the '\\' in front of '$' escape the special meaning of '$' so it is trying to match against the literal '$' after all the digits (ie snapshot.20080527124131$).  Unless this does not work on Mac OS X, I will go with perl without the '\\' before the '$'.  I will attach a patch here after I test on my Mac tonight. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12648260",
            "date": "2008-11-17T19:12:14+0000",
            "content": "It works on Mac OS X. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12648261",
            "date": "2008-11-17T19:13:27+0000",
            "content": "patch to use perl regular expression to improve accuracy in finding latest snapshot. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12649375",
            "date": "2008-11-20T14:14:28+0000",
            "content": "Patch committed:\n\nSending        CHANGES.txt\nSending        src/scripts/snappuller\nTransmitting file data ..\nCommitted revision 719233. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775562",
            "date": "2009-11-10T15:51:50+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}