{
    "id": "LUCENE-5551",
    "title": "Fix warnings in the ant build",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "general/build"
        ],
        "affect_versions": "4.8",
        "status": "Open",
        "fix_versions": [
            "6.0"
        ]
    },
    "description": "The build produces a lot of warnings.  LUCENE-5130 aims to fail the build on certain warnings, but until we actually eliminate those warnings from the code, failing the build is premature.\n\nThis issue is concerned with fixing or suppressing warnings reported by the ant build, anything further than that may need one or more separate issues.",
    "attachments": {
        "LUCENE-5551-fix-fallthrough.patch": "https://issues.apache.org/jira/secure/attachment/12636195/LUCENE-5551-fix-fallthrough.patch",
        "LUCENE-5551-redundant-casts.patch": "https://issues.apache.org/jira/secure/attachment/12636197/LUCENE-5551-redundant-casts.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13944002",
            "author": "Shawn Heisey",
            "content": "For the fallthrough patch:\n\nHTMLStripCharFilter and UAX29URLEmailTokenizerImpl had applicable warnings, but they are generated from jflex.  I removed the changes for these classes from the patch, but here's a summary:\n\nIn HTMLStripCharFilter, I suppressed fallthrough on the nextChar() method.  In UAX29URLEmailTokenizerImpl, I suppressed several \"unused\" warnings (not really necessary) and added break statements to a couple of cases. ",
            "date": "2014-03-22T10:53:09+0000"
        },
        {
            "id": "comment-13944006",
            "author": "Shawn Heisey",
            "content": "The redundant casts patch is quite large. All tests passed when I ran them.  I think the patch is good, but another pair of eyes would be greatly appreciated.\n\nFor the int/long -> float/double casts that Eclipse claimed were redundant, I double checked that Eclipse wasn't smoking crack before making changes. ",
            "date": "2014-03-22T11:01:54+0000"
        },
        {
            "id": "comment-13944033",
            "author": "Michael McCandless",
            "content": "+1, thanks Shawn! ",
            "date": "2014-03-22T11:41:41+0000"
        },
        {
            "id": "comment-13944040",
            "author": "Uwe Schindler",
            "content": "Hi,\n\nwe should craefull check all this. E.g., I have a problem with the following:\n\n\n-      final long base = minValues[block] + (long) (averages[block] * (long) element);\n+      final long base = minValues[block] + (long) (averages[block] * element);\n\n\n\nThe brackets are strange, because I dont know the data types are correct and if the multiplication may overflow.\n So please be careful! ",
            "date": "2014-03-22T12:30:11+0000"
        },
        {
            "id": "comment-13944041",
            "author": "Uwe Schindler",
            "content": "in my opinion this should look like this:\n\n\nfinal long base = minValues[block] + ((long) averages[block] * element);\n\n ",
            "date": "2014-03-22T12:39:03+0000"
        },
        {
            "id": "comment-13944045",
            "author": "Uwe Schindler",
            "content": "FYI, I generally prefer to add a suppress warnings for those cases and don't change code, because in many cases like this the person who wrote the code had some intention to have the casts like that. Esspecially when I wrote the code, I want it explicitly be sure and I have some things to express with my style of coding.\n\nThis is why I don't like Eclipse: it wants to teach me how to code, but I have my own style of coding. Especially with casts. So I would prefer to let the long/int casts as they are. Especially if they are explicit. This is not a bug or warning, its just a different style. So -1 to change int/long casts. ",
            "date": "2014-03-22T12:47:49+0000"
        },
        {
            "id": "comment-13944148",
            "author": "Shawn Heisey",
            "content": "I had wondered whether that was going too far.  Your preferred form makes sense to me, so I'll make another pass at those warnings. ",
            "date": "2014-03-22T17:13:36+0000"
        },
        {
            "id": "comment-13944152",
            "author": "Uwe Schindler",
            "content": "Thanks!\nOne additional thing: In most cases for maximum compatibility we need both @SuppressWarnings: rawtypes and unchecked. The problem is eclipse's compiler differs from Java 7's and (this was the problem earlier: Java 7's differed significantly from Java 6's). So we had both.\n\nAs we are now only on Java 7, we can check this again: Try it with all available compilers (including Java 8). For maximum safety, we should have both (\"rawtypes\", \"unchecked\" - although Eclipse complains on useless SuppressWarnings).\n\nAs mentioned before: suppress warnings for redundant casts and keep them as they are - I prefer to have them, code is better readable. Some of them are fine in your patch (like the char -> int casts), but the int -> long ones are too risky (because tests won't catch the bugs, as we don't have such large indexes,...). There is a reason why Oracle's javac does not complain about redundatnt casts (not even in Java 8). They are useful to clarify the intentions of the coder - so suppress them if eclipse complains. Ideally we should disable this warning in the eclipse configuration file generated by ant eclipse. ",
            "date": "2014-03-22T17:27:27+0000"
        },
        {
            "id": "comment-13944157",
            "author": "Shawn Heisey",
            "content": "This specific example needs suppressing, because your preferred form will change the result.  Reducing the specific multiplication example you provided from MonotonicAppendingLongBuffer to a compact test case:\n\n\n  int i = 5;\n  float f = 3.4F;\n\n  final long long1 = (long) (f * (long) i); // original\n  final long long2 = (long) (f * i); // what Eclipse wants\n  final long long3 = ((long) f * i); // Your form\n  System.out.println(long1); // prints 17\n  System.out.println(long2); // prints 17\n  System.out.println(long3); // prints 15\n\n\n\nI think the chance of these warnings pointing to existing subtle bugs is very small, but it's possible.  My thought at this point is that I should just suppress almost all of them that involve primitive types, and probably those involving things objects like Float as well.  I will review each one again and ask questions if it becomes ambiguous. ",
            "date": "2014-03-22T17:38:24+0000"
        },
        {
            "id": "comment-13944161",
            "author": "Uwe Schindler",
            "content": "Sorry, I did not know that averages[block] or f in your example was a float - I was expecting that it is an int, too! This makes it more crazy. We should be really careful!\n\nThis just confirms my problem: The coder had an idea why he casted like that  Redundant casting is not really a warning, it doesn't hide bugs, it makes it explicit what was intended, so it is there for clarification. Just because javac automatically casts something according to java standards, it does not mean we should really take it as it is. I prefer explicit casts around primitive types! It is like putting stress on words while having a talk.\n\nI would suggest to disable the warning in the eclipse config file in dev-tools/eclipse! ",
            "date": "2014-03-22T17:47:10+0000"
        },
        {
            "id": "comment-13944216",
            "author": "Shawn Heisey",
            "content": "New version of the redundant casts patch.  It's a lot smaller because I suppressed quite a lot this time.\n\nI did make some changes where the cast seemed completely unnecessary.  A lot of those were casts from a parameterized type to same parameterized type, but some of them were for primitive types where there seemed to be no danger of ambiguity.\n\nThere are three classes that I know of where the warnings remain.  All of them are generated code.  These are two instances of QueryParserTokenManager (one in classic, one in surround) and StandardSyntaxParserTokenManager.\n\nAs always, feel free to object to any of the changes and request that they be suppressed instead. ",
            "date": "2014-03-22T20:17:16+0000"
        },
        {
            "id": "comment-13944269",
            "author": "Shawn Heisey",
            "content": "I would suggest to disable the warning in the eclipse config file in dev-tools/eclipse!\n\nEclipse actually does ignore redundant casts by default.  The ant build generates warnings.  In order to find them I had to switch the eclipse setting from 'ignore' to 'error' which produced over 300 errors.  I opened all those files, and after supressing or fixing, I changed it to warning to see what I missed. ",
            "date": "2014-03-22T23:18:06+0000"
        },
        {
            "id": "comment-13944445",
            "author": "Uwe Schindler",
            "content": "Hi Shawn,\n\nyes, javac also warns about redundant casts, but not so noisy. E.g. in your patch you are fixing lots of warnings in luecen/core (e.g. PriorityQueue, packed ints), but for me javac 1.7 passes without any warning (because I generally fix them with heavy committing whenever new warnings pop up).\n\njavac just prints cast warnings for very stupid cases and those not needed because of generics, but it never ever complains about stuff like long/int casts, because those are as I said, maybe redundant, but they are needed explicitely express intentions behind the code.\n\nBecause of that I think we should not enable the useless cast warnings in Eclipse. But of yourse you can use them to fix some warnings produced by javac, although there are only few of them in Lucene. ",
            "date": "2014-03-23T15:18:17+0000"
        }
    ]
}