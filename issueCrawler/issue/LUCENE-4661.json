{
    "id": "LUCENE-4661",
    "title": "Reduce default maxMerge/ThreadCount for ConcurrentMergeScheduler",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I think our current defaults (maxThreadCount=#cores/2,\nmaxMergeCount=maxThreadCount+2) are too high ... I've frequently found\nmerges falling behind and then slowing each other down when I index on\na spinning-magnets drive.\n\nAs a test, I indexed all of English Wikipedia with term-vectors (=\nheavy on merging), using 6 threads ... at the defaults\n(maxThreadCount=3, maxMergeCount=5, for my machine) it took 5288 sec\nto index & wait for merges & commit.  When I changed to\nmaxThreadCount=1, maxMergeCount=2, indexing time sped up to 2902\nseconds (45% faster).  This is on a spinning-magnets disk... basically\nspinning-magnets disk don't handle the concurrent IO well.\n\nThen I tested an OCZ Vertex 3 SSD: at the current defaults it took\n1494 seconds and at maxThreadCount=1, maxMergeCount=2 it took 1795 sec\n(20% slower).  Net/net the SSD can handle merge concurrency just fine.\n\nI think we should change the defaults: spinning magnet drives are hurt\nby the current defaults more than SSDs are helped ... apps that know\ntheir IO system is fast can always increase the merge concurrency.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-06T23:56:17+0000",
            "content": "[trunk commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1429616\n\nLUCENE-4661: lower default maxThread/MergeCount in CMS ",
            "author": "Commit Tag Bot",
            "id": "comment-13545528"
        },
        {
            "date": "2013-01-07T00:01:29+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1429617\n\nLUCENE-4661: lower default maxThread/MergeCount in CMS ",
            "author": "Commit Tag Bot",
            "id": "comment-13545529"
        },
        {
            "date": "2013-01-07T02:50:17+0000",
            "content": "when you change default to 1\nso it can't be change any more, because setMaxMergeCount/setMaxThreadCount depends on each other.\n\npublic void setMaxMergeCount(int count) {\n    if (count < 1) \n{\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    }\n    if (count < maxThreadCount) {\n      throw new IllegalArgumentException(\"count should be >= maxThreadCount (= \" + maxThreadCount + \")\");\n    }\n    maxMergeCount = count;\n  }\n\n  public void setMaxThreadCount(int count) {\n    if (count < 1) {      throw new IllegalArgumentException(\"count should be at least 1\");    }\n    if (count > maxMergeCount) \n{\n      throw new IllegalArgumentException(\"count should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    maxThreadCount = count;\n  } ",
            "author": "Littlestar",
            "id": "comment-13545592"
        },
        {
            "date": "2013-01-07T11:48:24+0000",
            "content": "You can change the values, just be sure to first increase maxMergeCount and then maxThreadCount, in that order. ",
            "author": "Michael McCandless",
            "id": "comment-13545824"
        },
        {
            "date": "2013-01-07T12:15:11+0000",
            "content": "Is there maybe the possibility to find out if a disk is an SSD or rotating? With some IOCTLs in C you can do this, but from Java? ",
            "author": "Uwe Schindler",
            "id": "comment-13545839"
        },
        {
            "date": "2013-01-08T14:25:45+0000",
            "content": "I have a question about this - both for myself and for a message on the solr-user mailing list today.\n\nIf you are importing millions of records from MySQL (or another DB) with DIH, eventually you'll reach a point where you've got multiple merge levels happening at the same time, which will stop indexing of new data long enough that the JDBC connection to the DB will time out.\n\nIs it enough in that situation to increase maxMergeCount, or do you also have to increase maxThreadCount?  I have changed both, but if I only need to increase maxMergeCount and thus get the benefit of this issue, that would be awesome:\n\n\n  <mergeScheduler class=\"org.apache.lucene.index.ConcurrentMergeScheduler\">\n    <int name=\"maxThreadCount\">4</int>\n    <int name=\"maxMergeCount\">4</int>\n  </mergeScheduler>\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-13546915"
        },
        {
            "date": "2013-01-08T14:31:34+0000",
            "content": "You should only increase maxMergeCount (unless you're on an SSD, in which case you should increase maxThreadCount too!); this will allow a larger back-log of merges while stil only running one merge thread at a time.\n\nBut note that this means \"close()\" can take a super long time while it works through the backlog of merges. ",
            "author": "Michael McCandless",
            "id": "comment-13546918"
        },
        {
            "date": "2013-01-08T14:41:57+0000",
            "content": "We're on SSD's but have two CPU cores in each box. According to the old default this would lead to:\n      <int name=\"maxMergeCount\">3</int>\n      <int name=\"maxThreadCount\">1</int>\n\nWould you suggest to increase the to:\n      <int name=\"maxMergeCount\">4</int>\n      <int name=\"maxThreadCount\">2</int>\n\n? ",
            "author": "Markus Jelsma",
            "id": "comment-13546923"
        },
        {
            "date": "2013-01-08T14:43:53+0000",
            "content": "You should only increase maxMergeCount (unless you're on an SSD, in which case you should increase maxThreadCount too!); this will allow a larger back-log of merges while stil only running one merge thread at a time.\n\nA clarification question - Will it always keep running the 'index new content' thread while it merges with one thread in the background as long as the total of background merges plus one doesn't exceed maxMergeCount?  That's the crux of the problem.  If you aren't sure without a test, that's OK - I will be testing later today, because I'd really like the benefit you have described from decreasing to one thread. ",
            "author": "Shawn Heisey",
            "id": "comment-13546924"
        },
        {
            "date": "2013-01-08T14:53:11+0000",
            "content": "Marcus, I would stick with 3/1 ... but best would be to run experiments and see \n\nShawn, CMS will accept up to maxMergeCount merges, but then if another merge wants to kick off, CMS will pause the thread that \"caused\" this merge to be kicked off (ie, pause the producers of segments).  So if maxMergeCount=4, then 4 merges will be queued up (with one of them actually running, if maxThreadCount=1), but if your indexing thread(s) produce so many segments that a 5th merge now wants to run, they will then be paused at that point, until 1 merge finishes and we are back to 4 queued merges. ",
            "author": "Michael McCandless",
            "id": "comment-13546927"
        },
        {
            "date": "2013-01-08T15:14:33+0000",
            "content": "Thanks. Hope to do some experiments. Will report back if i can finish it up. ",
            "author": "Markus Jelsma",
            "id": "comment-13546937"
        },
        {
            "date": "2013-01-08T22:48:55+0000",
            "content": "Might be good to experiment with Linux block device read-ahead settings (/sbin/blockdev --setra) and ensure using a file system that does write behind (e.g. ext4 or xfs). Larger buffer sizes typically allow for more concurrent seq streams even on spindles. ",
            "author": "wolfgang hoschek",
            "id": "comment-13547367"
        }
    ]
}