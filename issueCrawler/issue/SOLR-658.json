{
    "id": "SOLR-658",
    "title": "Allow Solr to load index from arbitrary directory in dataDir",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This is a requirement for java based Solr replication \n\nUsecase for arbitrary index directory:\nif the slave has a corrupted index and the filesystem does not allow overwriting files in use (NTFS) replication will fail. The solution is to copy the index from master to an alternate directory on slave and load indexreader/indexwriter from this alternate directory.",
    "attachments": {
        "SOLR-658-reopen-windows-fix.patch": "https://issues.apache.org/jira/secure/attachment/12403847/SOLR-658-reopen-windows-fix.patch",
        "SOLR-658.patch": "https://issues.apache.org/jira/secure/attachment/12388980/SOLR-658.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12616801",
            "date": "2008-07-25T08:35:25+0000",
            "content": "Implementation \n\n\n\tkeep a file index.properties in the data dir\n\tHave an entry index=<new.index> in that file\n\tThis file may also keep version\n\tWhen a new indexsearcher/writer is loaded, read this property and try to load the index from that folder\n\tif it is absent , default to the hardcoded value for index and latest commitpoint\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625986",
            "date": "2008-08-27T06:50:34+0000",
            "content": "This is cut out of the SOLR-561 patch supports loading index from an arbitrary directory.\n\nChanges\n\n\tA new method SolrCore#getNewIndexDir() is introduced which tries to read the latest indexDir from index.properties file. If that file is not present the default value (dataDir + \"index/\")\n\tSolrIndexSearcher now stores the path (indexDir) on which it is opened and has a getter for it.\n\tWhen SolrCore#getIndexDir() is called, it gives the current searcher's index directory, failing which the default value is given\n\tSolrIndexSearcher is always created with getNewIndexDir() and UpdateHandler also uses getNewIndexDir() to open IndexWriter instances.\n\n\n\nTODO:\n\n\tAdd a test\n\tAdd feature for loading arbitrary commit point.\n\n "
        },
        {
            "author": "Akshay K. Ukey",
            "id": "comment-12634083",
            "date": "2008-09-24T09:50:48+0000",
            "content": "Patch in sync with trunk and with a test case (loading arbitrary commit point feature not supported in this patch). "
        },
        {
            "author": "Akshay K. Ukey",
            "id": "comment-12637081",
            "date": "2008-10-06T11:12:36+0000",
            "content": "Patch in sync with the trunk. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12637830",
            "date": "2008-10-08T08:21:52+0000",
            "content": "Thanks Akshay.\n\nUpdated patch which calls getNewIndexDir before calling IndexReader#reopen so that if the new index directory is different from the old index directory, we always create a new SolrIndexSearcher with the new index directory.\n\nI'd like to commit this in the next two or three days if there are no objections. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12638732",
            "date": "2008-10-11T09:06:36+0000",
            "content": "Updated with a bug fix:\n\nif (result != null && result.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n\n\nshould be:\n\nif (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n\n\n\nI'll commit shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12638980",
            "date": "2008-10-13T09:05:15+0000",
            "content": "Instead of comparing path strings, we should compare the corresponding File objects to handle relative and absolute paths correctly.\n\nPatch to cover the above case. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12638983",
            "date": "2008-10-13T09:07:12+0000",
            "content": "Removing reference to rollbacks and commit points which is being handled in SOLR-670 "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12638984",
            "date": "2008-10-13T09:13:16+0000",
            "content": "Committed revision 703981.\n\nThanks Noble and Akshay! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12669010",
            "date": "2009-01-30T20:26:00+0000",
            "content": "This causes reopen() to never be used on Windows because the following condition comes up false:\n\n     if(new File(getIndexDir()).equals(new File(newIndexDir)))  {\n\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12670088",
            "date": "2009-02-03T20:02:41+0000",
            "content": "Copying over from the solr-dev thread on failing tests:\n\nThe first problem is that File.equals compares only the path and not the absolute path. A work around is to compare absolute path ourselves. But a bigger problem is with the canonical paths where long directory names is uppercased and shortened into 8 character names (e.g. \"C:\\Documents and Settings\" becomes \"C:\\DOCUME~1\").\n\nThe test fails because we use java.io.tmpdir which defaults to user's home directory (shortened and canonicalized) on windows and comparison on this path fails. What I'm not able to figure out yet is why does Slave Jetty, running on this canonical path, returns the full path of the index directory.\n\nSlave's SolrCore.getIndexDir gives:\nC:\\Documents and Settings\\shalinsmangar\\Local Settings\\Temp\\org.apache.solr.handler.TestReplicationHandler$SolrInstance-1233681533000master\\data\\index\n\nThe value written by TestReplicationHandler is:\nC:\\DOCUME~1\\SHALIN~1\\LOCALS~1\\Temp\\org.apache.solr.handler.TestReplicationHandler$SolrInstance-1233681533000master\\data\\index "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12690122",
            "date": "2009-03-27T21:49:43+0000",
            "content": "I should read javadocs more. This patch compares the index directories using their canonical paths This fixes the problem on windows. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12693525",
            "date": "2009-03-29T06:22:39+0000",
            "content": "Committed revision 759641. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775518",
            "date": "2009-11-10T15:51:43+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}