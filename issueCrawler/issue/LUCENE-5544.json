{
    "id": "LUCENE-5544",
    "title": "exceptions during IW.rollback can leak files and locks",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7.1",
            "4.8",
            "6.0"
        ]
    },
    "description": "Today, rollback() doesn't always succeed: if it does, it closes the writer nicely. otherwise, if it hits exception, it leaves you with a half-broken writer, still potentially holding file handles and write lock.\n\nThis is especially bad if you use Native locks, because you are kind of hosed, the static map prevents you from forcefully unlocking (e.g. IndexWriter.unlock) so you have no real course of action to try to recover.\n\nIf rollback() hits exception, it should still deliver the exception, but release things (e.g. like IOUtils.close).",
    "attachments": {
        "LUCENE-5544.patch": "https://issues.apache.org/jira/secure/attachment/12635954/LUCENE-5544.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13942761",
            "author": "Robert Muir",
            "content": "Here's the start to a patch. Really the current rollback code is too crazy, there is no need for it to call the super-scary closeInternal(false, false) at the end, when in this case all that huge complicated piece of code is doing, is just calling close() on IndexFileDeleter and releasing write.lock. ",
            "date": "2014-03-21T04:07:07+0000"
        },
        {
            "id": "comment-13942789",
            "author": "Shai Erera",
            "content": "Patch looks good. So basically with this patch, the state of IW after rollback() is it's always closed() and doesn't leak any important resources like write.lock and pooled readers. And there's no way to continue using this instance - app must create a new IW instance. We can still end up w/ a segments_N file in the directory though (if its delete failed), but I guess IW will detect it's corrupt and use the one from the previous commit.\n\nAbout the test, maybe instead of asserting that IW.isLocked == false, try to open a new IW? I guess it will fail if you remove the stuff that you added to the finally clause? That will guarantee that we test what the app is likely to do after calling rollback().\n\nAnd also, do you think it's better to use MDW.failOn to randomly fail if we're somewhere in rollback() stack? Cause currently the test fails only in one of two places. Just thinking about making the test more evil. ",
            "date": "2014-03-21T05:02:26+0000"
        },
        {
            "id": "comment-13942795",
            "author": "Robert Muir",
            "content": "\nAbout the test, maybe instead of asserting that IW.isLocked == false, try to open a new IW? I guess it will fail if you remove the stuff that you added to the finally clause? That will guarantee that we test what the app is likely to do after calling rollback().\n\nWell the current test doesnt even need that assert: its just for clarity. we dont need an assert for this stuff at all: the last line of directory.close() (MDW) will fail if there are open locks or files!\n\n\nAnd also, do you think it's better to use MDW.failOn to randomly fail if we're somewhere in rollback() stack? Cause currently the test fails only in one of two places. Just thinking about making the test more evil.\n\nThis is a good idea.  ",
            "date": "2014-03-21T05:09:01+0000"
        },
        {
            "id": "comment-13942802",
            "author": "Shai Erera",
            "content": "Just thinking about making the test more evil.\n\nThough if the exception happens from Lock.close(), the lock will still exist and the test will fail asserting that the writer isn't locked. It's a valid exception but nothing we can do about it while calling rollback(). So maybe exclude it from the list of allowed places to fail.\n\nDo you think it's better to not swallow the exceptions in the finally part, but add them as suppressed to any original exception? Because if e.g. lock.close() fails, app won't be able to open a new writer, yet all it has as info is the original exception that happened during rollback(), and no info that the lock couldn't be released either. ",
            "date": "2014-03-21T05:13:16+0000"
        },
        {
            "id": "comment-13942805",
            "author": "Robert Muir",
            "content": "You can definitely call it multiple times, and some tests in fact do just that. Thats why IOUtils.close() is used, which does nothing on a null parameter. ",
            "date": "2014-03-21T05:18:20+0000"
        },
        {
            "id": "comment-13942922",
            "author": "Michael McCandless",
            "content": "+1\n\nMaybe add @Override to DocumentsWriter.close since it implements\nCloseable now? ",
            "date": "2014-03-21T09:49:35+0000"
        },
        {
            "id": "comment-13943057",
            "author": "Simon Willnauer",
            "content": "I think the patch looks awesome.. yet here are a couple of comments:\n\nIn rollback we should notify with a try / finally since processEvents could throw an exception:\n\n  try {\n    processEvents(false, true);\n  } finally {\n    notifyAll();\n  }\n\n\n\nI am not 100% sure about this but I think we need / should refresh the delete after processing events since it can publish pending flushes etc?\n\n\n         deleter.refresh();\n \n         lastCommitChangeCount = changeCount;\n\n         processEvents(false, true);\n         deleter.refresh();  // refresh here again after processing events?\n         deleter.close();\n\n \n\nmaybe the exception message should be \"BOOM!\" \n\nthanks for doing this ",
            "date": "2014-03-21T13:43:04+0000"
        },
        {
            "id": "comment-13943195",
            "author": "Robert Muir",
            "content": "Updated patch incorporating feedback: adding a 2nd test to produce random exceptions where we do i/o, addressing simon's bugs (thanks), and adding missing override.\n\nWe can actually still assert the same things in the new 2nd test, because MDW doesn't throw deterministic exceptions from lock release (This would probably wreak havoc on the test framework if you think about it).\n\nWill commit shortly. ",
            "date": "2014-03-21T16:17:34+0000"
        },
        {
            "id": "comment-13943217",
            "author": "ASF subversion and git services",
            "content": "Commit 1579975 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1579975 ]\n\nLUCENE-5544: Exceptions during IW.rollback can leak files and locks ",
            "date": "2014-03-21T16:31:41+0000"
        },
        {
            "id": "comment-13943229",
            "author": "ASF subversion and git services",
            "content": "Commit 1579978 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1579978 ]\n\nLUCENE-5544: Exceptions during IW.rollback can leak files and locks ",
            "date": "2014-03-21T16:51:31+0000"
        },
        {
            "id": "comment-13943249",
            "author": "ASF subversion and git services",
            "content": "Commit 1579983 from Robert Muir in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1579983 ]\n\nLUCENE-5544: Exceptions during IW.rollback can leak files and locks ",
            "date": "2014-03-21T17:06:15+0000"
        },
        {
            "id": "comment-13955639",
            "author": "ASF subversion and git services",
            "content": "Commit 1583439 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1583439 ]\n\nLUCENE-5544: disregard leftover events after rollback has finished ",
            "date": "2014-03-31T20:16:43+0000"
        },
        {
            "id": "comment-13955647",
            "author": "ASF subversion and git services",
            "content": "Commit 1583440 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1583440 ]\n\nLUCENE-5544: disregard leftover events after rollback has finished ",
            "date": "2014-03-31T20:19:33+0000"
        },
        {
            "id": "comment-13957754",
            "author": "Steve Rowe",
            "content": "Bulk close 4.7.1 issues ",
            "date": "2014-04-02T15:04:52+0000"
        }
    ]
}