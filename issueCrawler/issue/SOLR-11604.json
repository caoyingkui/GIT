{
    "id": "LUCENE-8036",
    "title": "ShingleFilter should have an option to skip filler tokens (e.g. stop words)",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "7.1",
        "resolution": "Unresolved",
        "status": "Patch Available"
    },
    "description": "ShingleFilterFactory should have an option to ignore filler tokens in the total shingle size. \nFor instance (adapted from https://stackoverflow.com/questions/33193144/solr-stemming-stop-words-and-shingles-not-giving-expected-outputs), consider the text \"A brown fox quickly jumps over the lazy dog\". When we remove stopwords and execute the ShingleFilter (shingle size = 3), it gives us the following result:\n\n1. _ brown fox\n2. brown fox quickly\n3. fox quickly jump\n4. quickly jump _\n5. jump _ _\n6. _ _ lazy\n7. _ lazy dog\n\nWe can clearly see that the filler token \"_\" occupies one token in the shingle.\nI suppose the returned shingles should be:\n1. brown fox quickly\n2. fox quickly jump\n3. quickly jump lazy\n4. jump lazy dog\n\nTo maintain backward compatibility, i suggest the creation of an option called \"skipFillerTokens\" to implement this behavior (note that this is different than using fillerTokens=\"\", since the empty string occupies one token in the shingle)\n\nI've attached a patch for the ShingleFilter class (getNextToken() method), ShingleFilterFactory and ShingleFilterTest clases.",
    "attachments": {
        "SOLR-11604.patch": "https://issues.apache.org/jira/secure/attachment/12896084/SOLR-11604.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-04T18:49:23+0000",
            "content": "Created patch for ShingleFilter, ShingleFilterFactory and ShingleFilterTest. ",
            "author": "Edans Sandes",
            "id": "comment-16239156"
        },
        {
            "date": "2017-11-04T19:29:01+0000",
            "content": "Patch is attached (SOLR-11604.patch) ",
            "author": "Edans Sandes",
            "id": "comment-16239182"
        },
        {
            "date": "2017-11-20T17:50:52+0000",
            "content": "I dislike a bit the fact that this option would mean that term queries on shingles no longer have the same matches as a phrase query with a slop of zero.\n\nIf you want to do this, ideally you should use a tokenizer that does not emit stop words. We used to have options in StopFilter to remove positions of stop words but this happened to break token streams (eg. in case of multi-word synonyms where one of the sub words is a stop word). ",
            "author": "Adrien Grand",
            "id": "comment-16259555"
        },
        {
            "date": "2017-11-29T05:42:45+0000",
            "content": "It isn't clear to me why the setPreservePositionIncrements=false option was removed (in LUCENE-4963 without a reason) but that seems to be water under the bridge now.  I remember folks complaining.  The ramification of it's absence is that any down-stream consumer needs an option to toggle it, like org.apache.lucene.util.QueryBuilder#setEnablePositionIncrements and org.apache.lucene.search.suggest.analyzing.FuzzySuggester's constructor and org.apache.lucene.search.suggest.document.CompletionAnalyzer's constructor, and perhaps elsewhere.  Now apparently shingle could use it too :-/.  Perhaps a compromise to the absence of the old boolean on StopFilter might be a new filter that sets posInc to 1?  But even that begs the question of why wouldn't such a thing be native to StopFilter.  Your suggestion of \"a tokenizer that does not emit stop words\" seems inflexible as it requires a custom tokenizer and wouldn't allow the flexibility of putting the StopFilter at the right spot in the chain (e.g. after WordDelimiterFilter). ",
            "author": "David Smiley",
            "id": "comment-16270188"
        }
    ]
}