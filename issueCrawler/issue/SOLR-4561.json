{
    "id": "SOLR-4561",
    "title": "CachedSqlEntityProcessor with parametarized query is broken",
    "details": {
        "affect_versions": "4.1",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "When child entities are created and the child entity is provided with a parametrized query as below, \n\n \n<entity name=\"x\" query=\"select * from x\">\n    <entity name=\"y\" query=\"select * from y where xid=${x.id}\" processor=\"CachedSqlEntityProcessor\">\n    </entity>\n<entity>\n\n \n\nthe Entity Processor always return the result from the fist query even though the parameter is changed, It is happening because, EntityProcessorBase.getNext() method doesn't reset the query and rowIterator after calling DIHCacheSupport.getCacheData() method.\n\nThis can be fixed by changing the else block in getNext() method of EntityProcessorBase from\n\n\n \nelse  {\n      return cacheSupport.getCacheData(context, query, rowIterator);\n      \n}\n\n \n\nto the code mentioned below:\n\n\n \nelse  {\n      Map<String,Object> cacheData = cacheSupport.getCacheData(context, query, rowIterator);\n      query = null;\n      rowIterator = null;\n      return cacheData;\n    }\n\n   \n\nUpdate: But then, the caching doesn't seem to be working...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Ahmet Arslan",
            "id": "comment-13599868",
            "date": "2013-03-12T09:47:44+0000",
            "content": "I ran into this bug too. "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-13599872",
            "date": "2013-03-12T09:56:19+0000",
            "content": "It seems that it was reported before by James in SOLR-3857 "
        },
        {
            "author": "Sudheer Prem",
            "id": "comment-13600078",
            "date": "2013-03-12T14:49:32+0000",
            "content": "I have a scenario where table A contain 5 million rows and table B contain more than a million rows. The join condition matches for only a couple of thousands of records. I had been using this feature in earlier version of Solr. Suddenly due to this change, it took the wrong join (one which matches the first condition) and populate that value to all documents.\n\nAfter debugging, my thought for the fix is like this:\n\nThis is happening because, in the method SqlEntityProcessor.nextRow(), the query is initialized and loaded only if the the rowIterator is null. Actually, the query can be initialized if the query is different than the previous query. If the logic is changed in that way, i think this issue will be fixed.\nTo apply this logic, change the SqlEntityProcessor.nextRow() method from \n\n\nif (rowIterator == null) {\n      String q = getQuery();\n      initQuery(context.replaceTokens(q));\n}\n\n\n\nto the code mentioned below:\n\n\n    String q = context.replaceTokens(getQuery());\n    if(!q.equals(this.query)){\n      initQuery(q);\n    }\n\n\n\nInitial testing shows that, it seems working as expected. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13603522",
            "date": "2013-03-15T17:01:21+0000",
            "content": "This is the same as SOLR-3857. "
        }
    ]
}