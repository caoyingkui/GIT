{
    "id": "LUCENE-5396",
    "title": "SpanNearQuery returns single term spans",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "core/search"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "Let's assume we have an index with two documents:\n\n1. contents: \"test bunga bunga test\"\n2. contents: \"test bunga test\"\n\nWe run two SpanNearQueries against this index:\n\n1. spanNear([contents:bunga, contents:bunga], 0, true)\n2. spanNear([contents:bunga, contents:bunga], 0, false)\n\nFor the first query we get 1 hit. The first document in the example above gets matched and the second one doesn't. This make sense, because we want the term \"bunga\" followed by another \"bunga\" here.\n\nHowever, both documents get matched by the second query. This is also problematic in cases where we have duplicate terms in longer (unordered) spannear queries, e. g.: unordered 'A B A' will match spans such as 'A B' or 'B A'.\n\n\nA complete example follows. \n\n---------\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.TextField;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.search.spans.SpanNearQuery;\nimport org.apache.lucene.search.spans.SpanQuery;\nimport org.apache.lucene.search.spans.SpanTermQuery;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport org.apache.lucene.store.RAMDirectory;\nimport org.apache.lucene.util.Version;\nimport java.io.StringReader;\nimport static org.junit.Assert.assertEquals;\n\nclass SpansBug {\n\n    public static void main(String [] args) throws Exception {\n\n        Directory dir = new RAMDirectory();\n        Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_45);\n        IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_45, analyzer);\n\n        IndexWriter writer = new IndexWriter(dir, iwc);\n        String contents = \"contents\";\n        Document doc1 = new Document();\n        doc1.add(new TextField(contents, new StringReader(\"test bunga bunga test\")));\n        Document doc2 = new Document();\n        doc2.add(new TextField(contents, new StringReader(\"test bunga test\")));\n\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\n        writer.commit();\n\n        IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(dir));\n\n        SpanQuery stq1 = new SpanTermQuery(new Term(contents,\"bunga\"));\n        SpanQuery stq2 = new SpanTermQuery(new Term(contents,\"bunga\"));\n        SpanQuery [] spqa = new SpanQuery[]\n{stq1,stq2}\n;\n\n        SpanNearQuery spanQ1 = new SpanNearQuery(spqa,0, true);\n        SpanNearQuery spanQ2 = new SpanNearQuery(spqa,0, false);\n\n        System.out.println(spanQ1);\n\n        TopDocs tdocs1 = searcher.search(spanQ1,10);\n        assertEquals(tdocs1.totalHits ,1);\n\n        System.out.println(spanQ2);\n\n        TopDocs tdocs2 = searcher.search(spanQ2,10);\n        //I'd expect one hit here:\n        assertEquals(tdocs2.totalHits ,1); // Assertion fails\n\n\n    }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15458572",
            "author": "Tim Allison",
            "content": "Same behavior still in trunk.  Happy to submit failing test that works on trunk if anyone wants it. ",
            "date": "2016-09-02T13:47:33+0000"
        },
        {
            "id": "comment-15464535",
            "author": "Christoph Goller",
            "content": "Is this a bug or desired bahavior?\n\nFor me it is at least an acceptable behavior. I like the behavior of unordered SpanNearQuery to match if clauses overlap or match at the same position. and it would be quite difficult to find out if two clauses match at the same index term or only at the same position.\n\nbackground: I am using a component for word decomposition. This might be a very rare case for English but it is a much more common phenomen for German and Dutch. The two compound parts of \"wallpaper\" (wall and paper) go into the same index position as wallpaper. I am using  spanNear([wall, paper], 0, false) to search for wallpaper and expect matches for \"wallpaper\" as well as for \"wall paper\". \n\nSo far we do not have a proper definition of what SpanQueries should do and the only way to find out what they currently do is to look into the code. I think the current behavior is not very consistent. I will present some of my  insights and ideas in LUCENE-7398. ",
            "date": "2016-09-05T09:13:08+0000"
        },
        {
            "id": "comment-15467803",
            "author": "Tim Allison",
            "content": "and it would be quite difficult to find out if two clauses match at the same index term or only at the same position.\n\nSo far we do not have a proper definition of what SpanQueries should do \n\nI agree.  From my perspective, this is a bug \u2013 I'd expect the same behavior from ordered and unordered.  Your use case raises an important point.  I don't have any solutions.  ",
            "date": "2016-09-06T16:19:22+0000"
        }
    ]
}