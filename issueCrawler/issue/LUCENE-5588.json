{
    "id": "LUCENE-5588",
    "title": "We should also fsync the directory when committing",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/store"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ]
    },
    "description": "Since we are on Java 7 now and we already fixed FSDir.sync to use FileChannel (LUCENE-5570), we can also fsync the directory (at least try to do it). Unlike RandomAccessFile, which must be a regular file, FileChannel.open() can also open a directory: http://stackoverflow.com/questions/7694307/using-filechannel-to-fsync-a-directory-with-nio-2",
    "attachments": {
        "LUCENE-5588.patch": "https://issues.apache.org/jira/secure/attachment/12639474/LUCENE-5588.patch",
        "LUCENE-5588-nonexistfix.patch": "https://issues.apache.org/jira/secure/attachment/12639669/LUCENE-5588-nonexistfix.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13964699",
            "author": "Uwe Schindler",
            "content": "I tried it out: On Windows opening a FileChannel on a directory does not work (java.nio.file.AccessDeniedException), if there is still a file open inside the directory.\n\nThis means we should \"try to fsync\" on the directory, but don't fail if it does not work. ",
            "date": "2014-04-09T21:42:20+0000"
        },
        {
            "id": "comment-13964729",
            "author": "Uwe Schindler",
            "content": "In fact. it also does not work on Linux, see http://permalink.gmane.org/gmane.comp.standards.posix.austin.general/6952\n\nYou have to open the file for read and then call fsync. I will think about a patch. ",
            "date": "2014-04-09T22:07:48+0000"
        },
        {
            "id": "comment-13964733",
            "author": "Michael McCandless",
            "content": "I agree we should fsync the directory if we can; we rely on Directory.listAll() to locate all index commits (though, we do fallback to segments.gen, which we also fsync on commit, if the dir listing fails). ",
            "date": "2014-04-09T22:11:34+0000"
        },
        {
            "id": "comment-13964738",
            "author": "Uwe Schindler",
            "content": "Here is my idea about a patch. For directories IOUtils.fsync(file, true) it is lenient, so it does not throw IOEx if it does not work (it is just \"best guess\").\n\nOn Windows syncing on files is disabled alltogether, to not spend time in the for-loop.\n\nI have no yet completely debugged it, but this should bring more safety. I will delay 4.8 release branch creation a bit, to discuss if we want to have that as extra safety in Lucene 4.8. ",
            "date": "2014-04-09T22:21:25+0000"
        },
        {
            "id": "comment-13964767",
            "author": "Uwe Schindler",
            "content": "Improved patch:\n\n\tAdd documentation and link to the POSIX mailing list\n\tBe still lenient in production, but when running tests we assert that at least Linux does not throw IOException when fsyncing a directory. Maybe somebody can test on OSX, too. Just change the assert to also check Constants.MAC_OSX.\n\n ",
            "date": "2014-04-09T22:53:19+0000"
        },
        {
            "id": "comment-13965185",
            "author": "Adrien Grand",
            "content": "In fact. it also does not work on Linux, see http://permalink.gmane.org/gmane.comp.standards.posix.austin.general/6952\n\nFYI, the same person who reported this bug wrote an interesting blog post about fsync at http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/ ",
            "date": "2014-04-10T09:55:38+0000"
        },
        {
            "id": "comment-13965208",
            "author": "Uwe Schindler",
            "content": "Cool, thanks. Nice blog post! In fact our current patch should be fine then?\n\nShould we commit it to trunk and branch_4x? I will also check MacOSX on my VM to validate if it also works on OSX, so i can modify the assert to check that the sync succeeds on OSX. Currently it only asserts on Linux that no errors occurred.\n\nAccording to the blog post, windows does not work at all, so we are fine with the \"optimization\" (early exit). ",
            "date": "2014-04-10T10:37:19+0000"
        },
        {
            "id": "comment-13965292",
            "author": "Uwe Schindler",
            "content": "I cleaned up the patch:\n\n\tReversed the loop (FileChannel is opened one time outside the loop and then fsync is tried 5 times). This makes the extra check for windows obsolete. This also goes in line what Michael McCandless plans on LUCENE-3237 (repeating only the fsync on an already open IndexOutput.\n\tTested MacOSX -> works and added assert.\n\n\n\nUwe ",
            "date": "2014-04-10T12:44:23+0000"
        },
        {
            "id": "comment-13965354",
            "author": "Michael McCandless",
            "content": "+1, looks great!  Thanks Uwe. ",
            "date": "2014-04-10T13:38:14+0000"
        },
        {
            "id": "comment-13965681",
            "author": "ASF subversion and git services",
            "content": "Commit 1586407 from uschindler@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1586407 ]\n\nLUCENE-5588: Lucene now calls fsync() on the index directory, ensuring that all file metadata is persisted on disk in case of power failure. ",
            "date": "2014-04-10T18:46:35+0000"
        },
        {
            "id": "comment-13965684",
            "author": "ASF subversion and git services",
            "content": "Commit 1586410 from uschindler@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1586410 ]\n\nMerged revision(s) 1586407 from lucene/dev/trunk:\nLUCENE-5588: Lucene now calls fsync() on the index directory, ensuring that all file metadata is persisted on disk in case of power failure. ",
            "date": "2014-04-10T18:48:35+0000"
        },
        {
            "id": "comment-13965900",
            "author": "Uwe Schindler",
            "content": "There is a problem in Solr: Solr sometimes tries to call FSDirectory.sync on a directory that doe snot even exits. This seems to happen when the index is empty and NRTCachingDirectory is used. In that case IndexWriter syncs with an empty file list.\n\nThe fix is to only sync the directory itsself if any file inside it was synced before. Otherwise it is not needed to sync at all.\n\nWe should fix this behaviour in the future. Maybe the directory should be created before so it always exists? ",
            "date": "2014-04-10T21:48:48+0000"
        },
        {
            "id": "comment-13965903",
            "author": "Uwe Schindler",
            "content": "Here a fix for the failures. ",
            "date": "2014-04-10T21:49:59+0000"
        },
        {
            "id": "comment-13965908",
            "author": "ASF subversion and git services",
            "content": "Commit 1586475 from uschindler@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1586475 ]\n\nLUCENE-5588: Workaround for fsyncing non-existing directory ",
            "date": "2014-04-10T21:53:56+0000"
        },
        {
            "id": "comment-13965909",
            "author": "ASF subversion and git services",
            "content": "Commit 1586476 from uschindler@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1586476 ]\n\nMerged revision(s) 1586475 from lucene/dev/trunk:\nLUCENE-5588: Workaround for fsyncing non-existing directory ",
            "date": "2014-04-10T21:55:11+0000"
        },
        {
            "id": "comment-13982576",
            "author": "Uwe Schindler",
            "content": "Close issue after release of 4.8.0 ",
            "date": "2014-04-27T23:25:48+0000"
        },
        {
            "id": "comment-14265251",
            "author": "ASF GitHub Bot",
            "content": "GitHub user laimis opened a pull request:\n\n    https://github.com/apache/lucenenet/pull/43\n\n    IOUtils fsync for directory fix\n\n    UnauthorizedAccessException is being thrown when FSDirectory uses fsync for files and then tries to fsync a directory. The current implementation does not work for directories, and it is not entirely clear what to do in those cases in a way that works across all platforms.\n\n    It seems like Lucene version is failing for directories as well and they are handing it by capturing IOException (which won't work with UnauthorizedAccessException):\n    https://issues.apache.org/jira/browse/LUCENE-5588\n\n    The discussion is still on going on the mailing list, checking this in and will adjust based on feedback received.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/laimis/lucenenet IOUtils_fix\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucenenet/pull/43.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #43\n\n\ncommit 7b8256c61f195c73a9ef071a3ac30a40f148daac\nAuthor: Laimonas Simutis <laimis@gmail.com>\nDate:   2015-01-05T02:59:02Z\n\n    fsync for directories on windows does not make sense\n\ncommit 1c1fc88ce879610f4efa5788c74281bf739563f9\nAuthor: Laimonas Simutis <laimis@gmail.com>\nDate:   2015-01-05T22:21:58Z\n\n    ignore fsync for directory completely\n\ncommit c299699801ff2abfb932997075c6addf1a5cb05a\nAuthor: Laimonas Simutis <laimis@gmail.com>\nDate:   2015-01-05T22:23:58Z\n\n    Merge https://github.com/apache/lucenenet into IOUtils_fix\n\n ",
            "date": "2015-01-05T22:36:59+0000"
        },
        {
            "id": "comment-14266074",
            "author": "Uwe Schindler",
            "content": "Hi,\n\nThis is about LUCENE.NET, has nothing to do with Lucene Java. In Java, syncing directories with Java 7 works on Linux (and that\u2019s documented and tested).\nPlease don't refer to LUCENE JIRA issues from pull requests to other projects, because this leads to confusion.\n\nUwe\n\n\nUwe Schindler\nH.-H.-Meier-Allee 63, D-28213 Bremen\nhttp://www.thetaphi.de\neMail: uwe@thetaphi.de\n\n ",
            "date": "2015-01-06T13:16:40+0000"
        },
        {
            "id": "comment-14266088",
            "author": "ASF GitHub Bot",
            "content": "Github user asfgit closed the pull request at:\n\n    https://github.com/apache/lucenenet/pull/43 ",
            "date": "2015-01-06T13:24:59+0000"
        },
        {
            "id": "comment-14266103",
            "author": "Uwe Schindler",
            "content": "UnauthorizedAccessException is being thrown when FSDirectory uses fsync for files and then tries to fsync a directory. The current implementation does not work for directories, and it is not entirely clear what to do in those cases in a way that works across all platforms.\nIt seems like Lucene version is failing for directories as well and they are handing it by capturing IOException (which won't work with UnauthorizedAccessException):\n\nIn Java, the .NET UnauthorizedAccessException extends IOException in Java (see http://docs.oracle.com/javase/8/docs/api/java/nio/file/AccessDeniedException.html) so it works in Windows. Windows is the only platform where fsync on directories does not work, but we still try  We know for sure that it works in MacOSX and Linux, so we assert on that, but we don't check it in production, because later/earlier versions of those operating systems may not implement it. So the whole thing is \"the best we can do\". ",
            "date": "2015-01-06T13:38:28+0000"
        }
    ]
}