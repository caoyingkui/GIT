{
    "id": "LUCENE-8041",
    "title": "All Fields.terms(fld) impls should be O(1) not O(log(N))",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "I've seen apps that have a good number of fields \u2013 hundreds.  The O(log(N)) of TreeMap definitely shows up in a profiler; sometimes 20% of search time, if I recall.  There are many Field implementations that are impacted... in part because Fields is the base class of FieldsProducer.  \n\nAs an aside, I hope Fields to go away some day; FieldsProducer should be TermsProducer and not have an iterator of fields. If DocValuesProducer doesn't have this then why should the terms index part of our API have it?  If we did this then the issue here would be a simple transition to a HashMap.\n\nOr maybe we can switch to HashMap and relax the definition of Fields.iterator to not necessarily be sorted?\n\nPerhaps the fix can be a relatively simple conversion over to LinkedHashMap in many cases if we can assume when we initialize these internal maps that we consume them in sorted order to begin with.",
    "attachments": {
        "LUCENE-8041.patch": "https://issues.apache.org/jira/secure/attachment/12927362/LUCENE-8041.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16240977",
            "date": "2017-11-06T21:59:01+0000",
            "content": "It doesn't need to be all all fields.terms impls. It is enough to optimize the default codec. \n\nTreeMap is a good simple default, all the various alternative terms dicts can continue to use it.\nBut the default codec should optimize for the access behavior that matters: accessing a field randomly.\n\nI don't think we should remove field iteration/Fields unless we remove the ability to change term vectors \"per-doc\". It is currently needed (e.g. by CheckIndex) to know what fields were truly indexed for a specific document with vectors, since that may disagree with FieldInfos. If we fixed that, then it would truly be unnecessary and FieldInfos would be all we need. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16508636",
            "date": "2018-06-11T19:47:01+0000",
            "content": "I submitted a simple patch that replaces TreeMap by HashMap in BlockTreeTermsReader and PerFieldPostingsFormat#FieldsReader.\u00a0Can someone please update the title of the issue? It should be O(1) instead of O(N). Thanks! ",
            "author": "Nhat Nguyen"
        },
        {
            "id": "comment-16508692",
            "date": "2018-06-11T20:30:43+0000",
            "content": "This has the downside that it sorts all fields on every call to iterator(). My concern is mainly that it will introduce performance problems down the line, ones that are difficult to find/debug because of java's syntactic sugar around iterator(). Especially if someone is using MultiFields (slow-wrapper crap), they will be doing a bunch of sorts on each segment, then merging those, and all hidden behind a single call to iterator().\n\nI still feel the best would be to remove this map entirely: then you can be sure there aren't traps. The only thing blocking this is the fact that term-vector options are configurable per-doc, which doesnt make sense anyway. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16508756",
            "date": "2018-06-11T21:10:25+0000",
            "content": "I don't think we should remove field iteration/Fields unless we remove the ability to change term vectors \"per-doc\". It is currently needed (e.g. by CheckIndex) to know what fields were truly indexed for a specific document with vectors, since that may disagree with FieldInfos. If we fixed that, then it would truly be unnecessary and FieldInfos would be all we need.\n\nThat sounds like the cart leading the horse  (allowing how CheckIndex works today prevent us from remaking how we want Lucene to be tomorrow).  Can't we just relax what CheckIndex checks here \u2013 like have it check but report a warning if only some docs have TVs and others not which is generally not normal?  I think that's what you're getting at but I'm not sure.  I've only looked at CheckIndex in passing.\n\nThe only thing blocking this is the fact that term-vector options are configurable per-doc, which doesnt make sense anyway.\n\n+1 I agree; if this feature is a casualty of the refactor then I'm fine with it going away.  I haven't looked close enough to see how much these things are linked (i.e. can we really not have it both ways). ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16509023",
            "date": "2018-06-12T01:03:42+0000",
            "content": "\nThat sounds like the cart leading the horse (allowing how CheckIndex works today prevent us from remaking how we want Lucene to be tomorrow). Can't we just relax what CheckIndex checks here \u2013 like have it check but report a warning if only some docs have TVs and others not which is generally not normal? I think that's what you're getting at but I'm not sure. I've only looked at CheckIndex in passing.\n\nThat's absolutely not the case at all. The user is allowed to do this, hence checkindex must validate it. Please don't make checkindex the bad guy here, its not. The problem is related to indexwriter allowing users to do this. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16510005",
            "date": "2018-06-12T18:39:20+0000",
            "content": "+1 to make term vectors consistent across the index; it has always been strange that Lucene allows this.\u00a0 Maybe open a separate issue for that? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16510047",
            "date": "2018-06-12T19:07:57+0000",
            "content": "+1 to make term vectors consistent across the index; it has always been strange that Lucene allows this.  Maybe open a separate issue for that?\n\n++ \n\nThis has the downside that it sorts all fields on every call to iterator(). My concern is mainly that it will introduce performance problems down the line, ones that are difficult to find/debug because of java's syntactic sugar around iterator(). Especially if someone is using MultiFields (slow-wrapper crap), they will be doing a bunch of sorts on each segment, then merging those, and all hidden behind a single call to iterator().\n\nI do wonder if an intermediate step would be to have a map + a Iterable<String> so we don't need to do this sorting over and over again? ",
            "author": "Simon Willnauer"
        },
        {
            "id": "comment-16510092",
            "date": "2018-06-12T19:45:46+0000",
            "content": "I do wonder if an intermediate step would be to have a map + a Iterable<String> so we don't need to do this sorting over and over again?\n\nAbsolutely; there's no need to re-sort.  I'm working with Yannis Hector who came up with this tidy solution.  In BlockTreeTermsReader, the \"fields\" field becomes a HashMap.  Then, in the constructor after it's populated, there's a few lines to build up the list:\n\nArrayList<String> fieldsNames = new ArrayList<String>(fields.keySet());\nCollections.sort(fieldsNames);\nfieldsNamesIterable = Collections.unmodifiableCollection(fieldsNames);\n\n\nfieldsNamesIterable is a new declared field.\nVery similar logic goes in PerFieldsPostingsFormat.\n\nI think it's possible to avoid the sort() in BlockTreeTermsReader if you know you're reading data written pre-sorted. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16510220",
            "date": "2018-06-12T21:17:28+0000",
            "content": "\n+1 to make term vectors consistent across the index; it has always been strange that Lucene allows this.  Maybe open a separate issue for that?\n\nThis issue specifically asks why there is an iterator at all in the description, thats why i explained it.\n\nBut i also am concerned about this issue because i don't think its a real bottleneck for anyone. I don't want us doing anything risky that could potentially hurt ordinary users for some esoteric abuse case with a million fields: it would be better to just stay with treemap.\n\nIt is fine to sort a list in the constructor, or use a linkedhashmap. This won't hurt ordinary users, it will just cost more ram for abuse cases, so I am fine. I really don't want to see sneaky optimizations trying to avoid sorts or any of that, it does not belong here, this needs to be simple, clear, and safe. Instead any serious effort should go into trying to remove the problematic api (term vectors stuff), then it can even simpler since we won't need two data structures. ",
            "author": "Robert Muir"
        }
    ]
}