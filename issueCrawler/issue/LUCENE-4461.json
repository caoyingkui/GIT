{
    "id": "LUCENE-4461",
    "title": "Multiple FacetRequest with the same path creates inconsistent results",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "3.6",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Multiple FacetRequest are getting merged into one creating wrong results in this case:\n\nFacetSearchParams facetSearchParams = new FacetSearchParams();\n\t\tfacetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"author\"), 10));\n\t\tfacetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"author\"), 10));\n\nProblem can be fixed by defining hashcode and equals in certain way that Lucene recognize we are talking about different requests.\n\n\nAttached test case.",
    "attachments": {
        "LUCENE-4461.patch": "https://issues.apache.org/jira/secure/attachment/12560435/LUCENE-4461.patch",
        "LuceneFacetTest.java": "https://issues.apache.org/jira/secure/attachment/12547994/LuceneFacetTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-09T06:03:15+0000",
            "content": "Nice catch!\n\nTook a while to pinpoint the reason - lines 173-181 of StandardFacetsAccumulator.\nIn the mentioned lines, a 'merge' is performed over categories which matched the request, but reside on different partitions. \n\nPartitions are an optimization which limit the RAM requirements per query to a constant, rather than linear to the taxonomy size (could be millions of categories). The taxonomy is virtually \"splitted\" into partitions of constant size, a top-k is heaped from each partition, and all those top-k results are being merged to a global top-k list\n\nThe proposed solution of changing the hashCode and equals so that the same request will have two hashCodes and will not be equal to itself is very likely to break other parts of the code.\n\nPerhaps such cases could be prevented all together? e.g throwing an exception when the (exact) same request is added twice. \nIs that a reasonable solution? Are there cases where it is necessary to request the same path twice? \nPlease note that a different count, depth, path etc - makes a different request, so requesting \"author\" with count 10 and count 11 makes different requests - which are handled simultaneously correctly in current versions.  ",
            "author": "Gilad Barkai",
            "id": "comment-13472164"
        },
        {
            "date": "2012-10-09T11:42:27+0000",
            "content": "In my case the final user can specify his/her default query to show once he/she is logged into the system. This issue came up when somebody define the same facet request using one as filter and the other only as a pure count request.\n\nI did not find a clean way to fix it looking through the code, but i'm trying the current \"ugly\" solution where \"counter\" is the request index.\n\n\npublic class CustomCountFacetRequest extends CountFacetRequest {\n\n\tprivate int hashCode;\n\n\tpublic CustomCountFacetRequest(CategoryPath path, int num) {\n\t\tthis(path, num, 0);\n\t}\n\n\tpublic CustomCountFacetRequest(CategoryPath path, int num, int counter) {\n\t\tsuper(path, num);\n\t\thashCode = super.hashCode() * counter;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn hashCode;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o instanceof CustomCountFacetRequest) {\n\t\t\tCustomCountFacetRequest that = (CustomCountFacetRequest) o;\n\t\t\treturn that.hashCode == this.hashCode && super.equals(o);\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\n\n\nI didn't find collateral effects on this solution yet, however i'm worried with your comments about breaking other parts of the code.\n\nI'm not sure if throwing an exception is the best solution, but at least the response will be consistent. ",
            "author": "Rodrigo Vega",
            "id": "comment-13472280"
        },
        {
            "date": "2012-10-09T14:16:31+0000",
            "content": "The same category can be set as a filter and as a request without them colliding - a filter is not correlated or dependent on a facet request. \nfacets filters are done at the query level which affects the result set, while the facetRequest defines which categories to retrieve out of the result set.\nI probably miss something here \n ",
            "author": "Gilad Barkai",
            "id": "comment-13472416"
        },
        {
            "date": "2012-10-09T14:38:13+0000",
            "content": "Yes, I know that but i need a generic way to handle the facet requests during search preparation stage. For that reason I have a FacetParams object with the following properties: int limit, String[] path, boolean filter\n\nThen I can have some peace of code like this:\n\n\n// Query is a bean that wraps a lucene query just to make easy the integration with our UI. REal lucene query is // handle by \"q\"\nif (query.isFaceted())\n\tfor (FacetParams facet : query.getFacet()) {\n\n\t\tCategoryPath c = new CategoryPath(facet.getPath());\n\t\tfacetSearchParams.addFacetRequest(new CountFacetRequest(c, facet.getLimit()));\n\n\t\tif (facet.isFilter())\n\t\t\tq = DrillDown.query(q, c);\n\n\t}\n... preapre collectors and finally search\n\n\n\nThis is because the user can create its own query using some kind of wizard. So I have two options:\n\n\tSupport this feature\n\tAvoid configurations with this kind of cases.\n\n\n\nIt is not a really big problem it is mostly about how to keep my code as neat as I can  . I can't ask you to solve my code issues  ",
            "author": "Rodrigo Vega",
            "id": "comment-13472429"
        },
        {
            "date": "2012-10-09T14:48:19+0000",
            "content": "Well solve you code issues no  But the current code is indeed broken by the issue you raised - and that should be fixed.\nI re examined the code, and I think the different hashcode you presented will work - though please note it will consume some extra CPU, as the same request will be handled twice (that's the heap to figure out the top-k of the request) to create separate FacetResults for each request.\n ",
            "author": "Gilad Barkai",
            "id": "comment-13472437"
        },
        {
            "date": "2012-10-09T14:58:35+0000",
            "content": "I though there is any kind of cache to avoid doing same work twice or at least some part of it. However I think that is a different issue/feature/discussion. Thanks for your time. ",
            "author": "Rodrigo Vega",
            "id": "comment-13472443"
        },
        {
            "date": "2012-12-11T19:54:27+0000",
            "content": "Proposed fix - In StandardFacetsAccumulator, guard against handling and merging the same request more than once.\nAlso a matching test is introduced, inspired by previous patch.\n\nThanks Rodrigo! ",
            "author": "Gilad Barkai",
            "id": "comment-13529277"
        },
        {
            "date": "2012-12-16T19:15:55+0000",
            "content": "Thanks for the fix Gilad. I did the following:\n\n\n\tFixed a couple of typos.\n\tUpdated the patch following the recent changes to FacetSearchParams (no addRequest anymore).\n\tMade the test assert that the results.toString() match, rather than just numValidDecendants.\n\tAdded a CHANGES entry.\n\n\n\nCommitted to trunk and 4x. ",
            "author": "Shai Erera",
            "id": "comment-13533481"
        },
        {
            "date": "2012-12-16T19:23:08+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1422671\n\nLUCENE-4461: adding same FacetRequest more than once yielded inconsistent results ",
            "author": "Commit Tag Bot",
            "id": "comment-13533485"
        },
        {
            "date": "2012-12-16T19:23:16+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1422670\n\nLUCENE-4461: adding same FacetRequest more than once yielded inconsistent results ",
            "author": "Commit Tag Bot",
            "id": "comment-13533486"
        }
    ]
}