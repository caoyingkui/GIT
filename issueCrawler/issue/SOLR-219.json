{
    "id": "SOLR-219",
    "title": "Determine if prefix, wildcard, fuzzy queries should be lowercased",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr should be able to \"do the right thing\" when doing prefix/wildcard/fuzzy queries on fields with respect to lowercasing or not.",
    "attachments": {
        "lowercase_prefix.patch": "https://issues.apache.org/jira/secure/attachment/12356442/lowercase_prefix.patch",
        "wildcardlowercase.patch": "https://issues.apache.org/jira/secure/attachment/12442593/wildcardlowercase.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12492436",
            "date": "2007-04-28T04:57:55+0000",
            "content": "Here's a demo patch that optionally lowercases prefix query by testing the analyzer for the fieldType.  No tests, no wildcard/fuzzy implementation yet.  This is for evaluation of approach.\n\nI delegated complete query construction to the fieldType (as opposed to just lowercasing the term) because I'm thinking ahead to more efficiently supporting other types of wildcard queries in the future based on the field type.  As an example, foo could be turned into a simple term query if the field contained the right ngram filter. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12492751",
            "date": "2007-04-30T18:57:45+0000",
            "content": "I'm not opposed to an approach like this ... but it seems like a slippery slope to go down, with hard coded test strings, and assumptions about how analyzers will behave in all cases beased on one test case.\n\nperhaps a simpler approach that requires less guess work would be adding the ability for Fields and FieldTypes to container arbitrary key/val pair options that can be accessed as a map, and document that SolrQueryParser looks at some of these to make query parsing decisions?\n\n    <fieldType name=\"text_ws\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n      </analyzer>\n      <option name=\"lowerCaseForPrefix\">false</option>\n    </fieldType>\n "
        },
        {
            "author": "Michael Pelz-Sherman",
            "id": "comment-12492779",
            "date": "2007-04-30T20:27:07+0000",
            "content": "IMHO, if this is implemented, it should be optional (via schema configuration) and NOT the default behavior. I personally much prefer having direct control over query case sensitivity on a per-field basis, thanks! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12494623",
            "date": "2007-05-10T03:25:25+0000",
            "content": "> I personally much prefer having direct control over query case sensitivity on a per-field basis, thanks!\n\nSure, if Solr is going to get it incorrect.\n\nI'm inclined to wait until someone comes up with an analyzer where we can't figure out if it's case insensitive or not before adding more configuration complexity... for the sake of both solr developers and users. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12592553",
            "date": "2008-04-26T05:32:25+0000",
            "content": "I'm totally with you Yonik.  I was surprised today to see that my prefix queries (part of an auto-complete feature I'm adding to my app) were turning up nothing because I was using upper case characters.  It's silly because Solr is otherwise smart enough in other basic queries yet not in this case. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12670778",
            "date": "2009-02-05T15:10:10+0000",
            "content": "Marking for 1.5 "
        },
        {
            "author": "Claus Brod",
            "id": "comment-12859903",
            "date": "2010-04-22T17:07:04+0000",
            "content": "We also needed lowercase query support. We extended Yonik's patch to wildcard queries. Seems to work well in our environment. I added the patch as wildcardlowercase.patch; it's probably most useful for illustration purposes than for an industrial-strength final solution, but maybe it's useful for somebody.\n\nNeedless to say we'd love to see official support for case-insensitive searches in 1.5 \n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872502",
            "date": "2010-05-27T22:06:41+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Patrick Allaert",
            "id": "comment-13015333",
            "date": "2011-04-04T09:43:03+0000",
            "content": "Any plan to implement this? "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-13016769",
            "date": "2011-04-07T08:47:10+0000",
            "content": "Case Insensitive Search for Wildcard Queries "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043732",
            "date": "2011-06-03T16:46:48+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Gunnar Wagenknecht",
            "id": "comment-13050404",
            "date": "2011-06-16T13:18:56+0000",
            "content": "Any progress on the issue? We are also hit by this issue. Ideally, it would be nice if I could configure the analyzers to run for wildcard queries. For example, I still want to do lowercasing and character normalization (umlauts) for wildcard queries. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13050645",
            "date": "2011-06-16T18:52:09+0000",
            "content": "Is there a reason this issue can't be dealt with by including an appropriate MappingCharFilter in the field definition? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13050705",
            "date": "2011-06-16T20:20:12+0000",
            "content": "Agree with Gunnar that the problem is wider than lowercasing. How hard would it be to let each filter choose whether to work on prefix terms or not, and run them through analysis?\n\nA use case is for the Nordic characters \u00e6\u00f8\u00e5\u00e4\u00f6. A Norwegian name \"\u00d8yvind\" would typically be normalized and indexed as \"oeyvind\", and when a swede searches for \"\u00d6yvin*\", he'd get match if at least the mappingCharFilter and LowercaseFilter were allowed to run and turn the query into \"oeyvin*\". "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13050708",
            "date": "2011-06-16T20:31:56+0000",
            "content": "a lot of analysis things like stemming are not prepared to deal with wildcard characters in the term, and returning multiple tokens (because a tokenizer splits on a * or whatever) makes no sense either\n\nin my opinion, a good solution here is to allow you to specify in your schema: this is the analysis chain for these multitermqueries, so it would be a different chain rather than \"query\" or \"index\" (similar to SOLR-2477 where I propose allowing you to specify one for \"phrase\"). The QP would use this chain for things like wildcards, and throw an exception if the analyzer returns more than one token from a wildcard term.\n\nThis way you can use KeywordTokenizer + lowercase/fold characters or whatever, but in general doing things like WDF or synonyms makes no sense here.  If you want to do things like stemming, thats fine, you can shoot yourself in the foot this way and we won't stop you.\n\nBut in no case should we try to magically apply the analysis chain... too ambiguous what would happen. "
        },
        {
            "author": "Gunnar Wagenknecht",
            "id": "comment-13050714",
            "date": "2011-06-16T20:37:04+0000",
            "content": "\nBut in no case should we try to magically apply the analysis chain... too ambiguous what would happen.\n\nAgreed. I just need a way in the schema when configuring fields to say which analyzers should run for wildcard and/or prefix queries. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13050728",
            "date": "2011-06-16T21:00:32+0000",
            "content": "I like your idea @Robert. It's explicit and backwards compat, and would allow us to shoot our issues as well as our feet  "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13051355",
            "date": "2011-06-17T22:10:59+0000",
            "content": "I wonder whether there should be some kind of explicit mapping from analysis \"type\" to query.  If I write some new kind of query (say AnagramQuery - I'll post a patch if anyone wants it  ), how do I specify whether its terms are analyzed with the wildcard chain or the phrase chain, or the default query chain?  Can I make up my own new analysis type and map it to my query type? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13051752",
            "date": "2011-06-20T01:01:31+0000",
            "content": "Mike I don't totally understand the question: in general there are only several categories of queries supported by the queryparser:\n\n\tCore queries like Term, Phrase, SloppyPhrase, MultiPhrase: these go thru the analyzer.\n\tMultiTermQueries like WildcardQuery, PrefixQuery, FuzzyQuery, RegexpQuery, which are patterns that rewrite against the term index into some simpler form (e.g. into TermQueries)\n\n\n\nIf you were to write an AnagramQuery, you would first have to add queryparser support anyway to it. But, if you want anagrams you could just write an anagram tokenfilter that sorts the characters in the termbuffer: then you wouldn't need to write a custom query, nor custom queryparser integration, and it would be fast. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13051789",
            "date": "2011-06-20T04:02:21+0000",
            "content": "Yes, I've implemented anagram querying as you indicated, by sorting the letters, but the query I have in mind would allow some wildcards as well.  An example comes up in scrabble with the blanks, and we've been asked to implement this for some dictionary sites.  I was wondering if that could be implemented in Lucene as an FST: I suspect it could, but my brain went numb trying to come up with a regex as a way to get there, and then I ended up building using a direct hand-coded term scanning approach.\n\nRe: the question of mapping queries, I may very well be missing something here.  Maybe I've misunderstood your plan: isn't it that Phrase-type queries go through the phrase-analyzer, TermQuery goes through the regular (query) analyzer, and MultiTermQueries go through the wildcard-analyzer?\n\nIt just seemed to me that there might be new Queries written in the future that might not easily be categorized into one of those classes, or that it might not be obvious how to indicate which class is thr right one, and it could be handy to have a way to associate them with an analysis chain in the way you've described. Although it seems that my one example probably falls into the MTQ category and I guess  would just pick up the wildcard analysis chain, which is probably the right thing.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13051801",
            "date": "2011-06-20T05:13:03+0000",
            "content": "\nIt just seemed to me that there might be new Queries written in the future that might not easily be categorized into one of those classes\n\nI'm not worried about this to be honest... an inverted index has terms and positions so there are really only so many possibilities.\nI think its enough to say, here is the analysis chain for terms, for positions, and for multitermqueries that rewrite to these.\n\nEven if there were 200,000 new queries about to be added, it doesn't make sense to worry about that here, because first they would need queryparser support. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13051965",
            "date": "2011-06-20T13:00:05+0000",
            "content": "Fair enough - And by the way +1 on all this - I hated having to hack QueryParser just to prevent stop words getting stripped from phrases.  \"The the\" and \"The who\" were problematic   "
        },
        {
            "author": "Yongtao Liu",
            "id": "comment-13068475",
            "date": "2011-07-20T16:26:28+0000",
            "content": "Is it possible each filed can check whether LowerCaseFilterFactory filter used for this field? If so, each file can implement their own getPrefixQuery/getWildcardQuery to convert/not convert to low case. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106442",
            "date": "2011-09-16T14:51:07+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13157255",
            "date": "2011-11-25T17:25:51+0000",
            "content": "I'm pretty sure this is taken care of by SOLR-2438, so marking closed. "
        }
    ]
}