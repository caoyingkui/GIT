{
    "id": "LUCENE-850",
    "title": "Easily create queries that transform subquery scores arbitrarily",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Refactor DisMaxQuery into SubQuery(Query|Scorer) that admits easy subclassing.  An example is given for multiplicatively combining scores.\n\nNote: patch is not clean; for demonstration purposes only.",
    "attachments": {
        "CustomBoostQuery.java": "https://issues.apache.org/jira/secure/attachment/12364649/CustomBoostQuery.java",
        "prodscorer.patch.diff": "https://issues.apache.org/jira/secure/attachment/12354246/prodscorer.patch.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-03-26T19:16:11+0000",
            "content": "Generify the subquery handling logic of DisMax to make it easy to build subquery scorers.\n\nThis patch is demonstrative only.  There are no tests, and I'm pretty sure the query norm calculation isn't correct in general. ",
            "author": "Mike Klaas",
            "id": "comment-12484198"
        },
        {
            "date": "2007-05-03T03:36:36+0000",
            "content": "The ability to transform doc scores obtained by a query is now part of LUCENE-446\n\nI think that to a certain extent, the patch in this issue went farther than that of LUCENE-446. Here it seems that\nscores of any set of queries can be combined. But in 446, the score transformation is applied on 2 or 3 scores: \n\n  1. score of a single sub-query (any query).\n  2. docid\n  3. score of a single, optional, sub-field-score-query. \n\nThe latter is optional. The latter is the one that assigns a score equals to the value of an indexed field.\n\nFor this reason I hesitated to mark this issue as a duplicate of LUCENE-446. \n\nBut I did not want to basically re-implement BooleanQuery for a multi-queries score transformation. \nAnd, for the use cases that I can think of the 3-way approach in LUCENE-446 is sufficiently flexible.\n\nThoughts? ",
            "author": "Doron Cohen",
            "id": "comment-12493269"
        },
        {
            "date": "2007-06-05T17:23:00+0000",
            "content": "Mike,\n\nIf I understood it correctly your patch can be described as:\n\n\tturn DisMaxQuery into a private case of a new generalized \"CustomizableOrQuery\"\n\tdemostrates this customizability with a new ProductQuery.\n\tDisMax(OR)Query logic is as before = max =f scob-scores plus tie breaker.\n\tProduct(OR)Query logic is: score = multiplication of scores of sub-scorers.\n\n\n\nThe regular Bolean Or could probably be phrased this way as Sum(OR)Qurey.\n\nNow in LUCENE-446 I added CustomScoreQuery, which is simpler: \n\n\tscore = f (score(q), score(vq))\nwhere \n\tf() is overridable,\n\tq is any query\n\tvq is optional, and it is a value-source-query, likely based on (cached) field values.\n\n\n\nSo it currently doesn't support your comment\n   \"I've often wanted to multiply the scores of two queries\".\n\nWhen first writing CustomScoreQuery I looked at combining any two or N subqueries, but wasn't sure how to do this. How to normalize. How to calculate the weights. But now I think that we could  perhaps follow your approach closer: call it CustomOrQuery, go for any N subqueries, and define f() accordingly. \n\nBut is this really required / useful?  \nWhat are the use cases for this general/arbiterary combining of scores (beyond current capabilities of o.a.l.search.function)?\n\nThanks,\nDoron ",
            "author": "Doron Cohen",
            "id": "comment-12501620"
        },
        {
            "date": "2007-07-03T19:31:45+0000",
            "content": "I just asked for a product scored BooleanQuery on java-users and Mike pointed me in the direction of this bug. My use case is to get the non-phrase query \"John Bush\" to rank \"John Bush\" higher than \"George Bush\" or \"John Kerry\". I believe this is a common use case (I have 3 or 4 bugs filed against search quality internally that boil down to this issue.)\n ",
            "author": "Tim Sturge",
            "id": "comment-12509993"
        },
        {
            "date": "2007-07-03T21:05:24+0000",
            "content": "Hi Doron,\n\nThe main use case is the same as for documents (and to a lesser extent, field-) boosts: the ability to weight a document by a certain amount (rather than adding an additive boost, as adding an additional subclause to the query would entail).\n\nThe function query capability works for many situations, as you can store the various types of boosts in a FieldCache and use your approach.  But this doesn't scale when there are tons of possible boost fields (which would usually be sparsely-populated).  SparseFieldCache, anyone?\n\nI decided to move away from ProductQueries for the time being, so that is no longer the main use case of this patch.  Primarily the patch stems from developer frustration of implementing something like ProductQuery.  ISTM that the subquery-handling logic (present in BooleanQuery and slightly different in DisMaxQuery) needn't be so tightly coupled with a choice of scoring function.\n\nFor the record, DisMax is actually a ( x*Max + (1-x)*Sum ) Query, so it is both Sum and Max.  Perhaps if we add Prod to the options, there are no more useful subquery combinators? ",
            "author": "Mike Klaas",
            "id": "comment-12509998"
        },
        {
            "date": "2007-07-03T21:08:20+0000",
            "content": "Tim:  That is typically done by adding an optional implicit phrase query:\n\njohn bush -> +(john bush) \"john bush\"~1000\n\nThis works very well for two term queries, but less well when there is more than that.  See also DisjunctionMaxQuery if there are multiple fields ",
            "author": "Mike Klaas",
            "id": "comment-12510001"
        },
        {
            "date": "2007-07-16T23:58:29+0000",
            "content": "> The function query capability works for many situations, as you \n> can store the various types of boosts in a FieldCache and use \n> your approach. But this doesn't scale when there are tons of \n> possible boost fields (which would usually be sparsely-populated). \n> SparseFieldCache, anyone? \n\nFor large collections loading would indeed take long. \nQuoting Michael, payloads will be more efficient for this case. Two options actually:\n\n\tfaster reading values into a cache\n\tvalue-source that feeds on the fly from payloads.\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12513103"
        },
        {
            "date": "2007-08-27T22:54:28+0000",
            "content": "Here's an approach I think will work.\n\nRename CustomScoreQuery to CustomBoostQuery, and remove the ValueSource-specific logic.  Really there is no reason to limit the logic to ValueSource queries: the only important criterion is that we don't expect the docs matches against the boosting query only to be returned (the doc set is unchanged relative to the original query).\n\nI'm not sure what will happen if the boost query doesn't match the document being boosted, however.  Perhaps there should be a default value?\n\nDoes this still belong in the function package? ",
            "author": "Mike Klaas",
            "id": "comment-12523122"
        },
        {
            "date": "2007-08-31T01:57:51+0000",
            "content": "Do address the issue above, the following needs to be added:\n===================================================================\n\u2014 build-src/java/solr/org/apache/lucene/search/CustomBoostQuery.java  (revision 9312)\n+++ build-src/java/solr/org/apache/lucene/search/CustomBoostQuery.java  (working copy)\n@@ -280,7 +280,7 @@\n\n     /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n     public float score() throws IOException \n{\n-      float boostScore = (boostScorer==null ? 1 : boostScorer.score());\n+      float boostScore = (boostScorer==null || subQueryScorer.doc() != boostScorer.doc() ? 1 : boos\ntScorer.score());\n       return qWeight * customScore(subQueryScorer.doc(), subQueryScorer.score(), boostScore);\n     }\n\n@@ -300,7 +300,8 @@\n         return subQueryExpl;\n       }\n       // match\n\n\tExplanation boostExpl = boostScorer==null ? null : boostScorer.explain(doc);\n+      Explanation boostExpl = boostScorer==null ? null : \n+         weight.qStrict ? boostScorer.explain(doc) : weight.boostWeight.explain(reader,doc);\n       Explanation customExp = customExplain(doc,subQueryExpl,boostExpl);\n       float sc = qWeight * customExp.getValue();\n       Explanation res = new ComplexExplanation(\n\n ",
            "author": "Mike Klaas",
            "id": "comment-12523979"
        },
        {
            "date": "2013-03-10T13:20:05+0000",
            "content": "SPRING_CLEANING_2013 We can reopen if necessary. Think this code has been extensively re-worked anyway. ",
            "author": "Erick Erickson",
            "id": "comment-13598234"
        }
    ]
}