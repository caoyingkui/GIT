{
    "id": "SOLR-7631",
    "title": "RandomCodec can cause Faceting on multivalued Trie fields with precisionStep != 0 can produce bogus value=\"0\" in some test seeds",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Working through SOLR-7605, I've confirmed that the underlying problem exists for regular field.facet situations, regardless of distrib mode, for Trie fields that have a non-zero precisionStep. this has only been reproduced when the RandomCodec was in use\n\nThe problem, when it manifests, is that faceting on a TrieIntField, using facet.mincount=0, causes the facet results to include three instances of facet the value \"0\" listed with a count of \"0\" \u2013 even though no document in the index contains this value at all...\n\n\n   [junit4]    >   <lst name=\"facet_fields\">\n   [junit4]    >     <lst name=\"foo_ti\">\n   [junit4]    >       <int name=\"20\">32</int>\n...\n   [junit4]    >       <int name=\"50\">21</int>\n   [junit4]    >       <int name=\"0\">0</int>\n   [junit4]    >       <int name=\"0\">0</int>\n   [junit4]    >       <int name=\"0\">0</int>\n\n\n\nThis is concerning for a few reasons:\n\n\n\tIn the case of PivotFaceting, getting duplicate values back from a single shard like this triggers an assert in distributed queries and the request fails \u2013 even if asserts aren't enabled, the bogus \"0\" value can be propogated to clients if they ask for facet.pivot.mincount=0\n\tClient code expecting a single (value,count) pair for each value may equally be confused/broken by this response where the same \"value\" is returned multiple times\n\tw/o knowing the root cause, It seems very possible that other nonsense values may be getting returned \u2013 ie: if the error only happens with fields utilizing precisionStep, then it's likely related to the synthetic values used for faster range queries, and other synthetic values may be getting included with bogus counts\n\n\n\nA Patch with a simple test that can demonstrate the bug fairly easily will be attached shortly",
    "attachments": {
        "SOLR-7631_test.patch": "https://issues.apache.org/jira/secure/attachment/12737442/SOLR-7631_test.patch",
        "log.tgz": "https://issues.apache.org/jira/secure/attachment/12737443/log.tgz"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-04T02:46:19+0000",
            "author": "Hoss Man",
            "content": "The attached patch contains a simple test case that failed 7 out of 100 times when i ran with...\n\n\nfor i in {1..100}; do ant test -Dtestcase=TestTrieFacet -Dtests.verbose=true; done | tee log.txt\n\n\n\nAlso attached is the log.txt showing all the success and failures.  Note that all failures come from testMultiValuedTrie \u2013 aparently this bug doesn't affect single valued Trie fields.\n\nAs you can see, i used \"-Dtests.verbose=true\" when running these tests, hoping I could find some pattern in both the success and failures realted to the the codecs \u2013 but nothing jumps out at me.\n ",
            "id": "comment-14572016"
        },
        {
            "date": "2015-06-04T22:11:17+0000",
            "author": "Hoss Man",
            "content": "Updated patch...\n\n\n\ttests some precisionStep=0 fields as well to demonstrate that they never exhibit the failure\n\ttests all possible facet.method values to demonstrate that the multivalued precisionStep=8 fields fail regardless of what method is requested\n\tfix the NUM_DOCS and MergePolicy used to reduce the number of variables\n\t\n\t\tNOTE: some observation indicated that low number of docs in the index was less likely to fail \u2013 suggesting that the bug is related to either num segments, or segment size, or posting list size .. but with NUM_DOCS == 1000 there are still plenty of seeds that fail reliably.\n\t\n\t\n\n\n\nWith these changes, the only pattern i'm seeing is that all of the failures seem to involve the RandomCodec \u2013 which reports itself in the \"test params\" output as...\n\nNOTE: test params are: codec=Asserting(Lucene50): { ... ranodmized posting formats here ...}, docValues:{ ...randomized docValues here ...}, sim=etc, locale=etc, timezone=etc\n\n...but i haven't found any pattern in the PostingFormat reported for the field in question (foo_ti) \u2013 and spot checks using -Dtests.codec=AssertingCodec and -Dtests.codec=Lucene50 codec directly haven't failed, leading me to believe it must either be some other aspect of how RandomCodec does it's wrapping, or some nuance in the PostingFormat selected.\n\nI'm currently beasting this test using every possible -Dtests.codec option to sanity check that it only ever fails with \"random\" ... once that's done, i guess i'll start doing the same thing with -Dtests.postingformat unless anyone spots the problem first.  ",
            "id": "comment-14573680"
        },
        {
            "date": "2015-06-05T18:04:06+0000",
            "author": "Hoss Man",
            "content": "\n(long update due to jira being down last night, so i just kept a stream of concious buffer which i'm now posting)\n\nWith the last patch, i ran this bash script...\n\n\n# .. The current classpath supports the following names: [Asserting, CheapBastard, FastCompressingStoredFields, FastDecompressionCompressingStoredFields, HighCompressionCompressingStoredFields, DummyCompressingStoredFields, SimpleText, Lucene50]\n\ncodecs=(Asserting CheapBastard FastCompressingStoredFields FastDecompressionCompressingStoredFields HighCompressionCompressingStoredFields DummyCompressingStoredFields SimpleText Lucene50 random)\n\nfor c in \"${codecs[@]}\"\ndo\n    echo $c\n    for i in {1..50}; do ant test -Dtestcase=TestTrieFacet -Dtests.verbose=true -Dtests.codec=$c; done | tee $c.log.txt  \ndone\n\n\n\nthe only codec with failures was \"random\"...\n\n\n$ grep -c \"reproduce with\" *.log.txt\nAsserting.log.txt:0\nCheapBastard.log.txt:0\nDummyCompressingStoredFields.log.txt:0\nFastCompressingStoredFields.log.txt:0\nFastDecompressionCompressingStoredFields.log.txt:0\nHighCompressionCompressingStoredFields.log.txt:0\nLucene50.log.txt:0\nrandom.log.txt:9\nSimpleText.log.txt:0\n\n\n\nThose 9 failures...\n\n\n$ egrep \"reproduce with|test params\" *.log.txt | grep -A 1 \"reproduce with\"\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_enum -Dtests.seed=FA4AA4357AB98B18 -Dtests.slow=true -Dtests.locale=ar_MA -Dtests.timezone=America/Bogota -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fc -Dtests.seed=FA4AA4357AB98B18 -Dtests.slow=true -Dtests.locale=ar_MA -Dtests.timezone=America/Bogota -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fcs -Dtests.seed=FA4AA4357AB98B18 -Dtests.slow=true -Dtests.locale=ar_MA -Dtests.timezone=America/Bogota -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\nrandom.log.txt:   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene50): {foo_ti=PostingsFormat(name=MockRandom), foo_i=Lucene50(blocksize=128), range_facet_l_dv=PostingsFormat(name=Asserting), _version_=PostingsFormat(name=MockRandom), multiDefault=Lucene50(blocksize=128), intDefault=PostingsFormat(name=MockRandom), id=PostingsFormat(name=SimpleText), range_facet_i_dv=PostingsFormat(name=MockRandom), foo_ti1=PostingsFormat(name=Asserting), foo_i1=PostingsFormat(name=Asserting), range_facet_l=PostingsFormat(name=MockRandom), timestamp=PostingsFormat(name=MockRandom)}, docValues:{range_facet_l_dv=DocValuesFormat(name=Direct), range_facet_i_dv=DocValuesFormat(name=Lucene50), timestamp=DocValuesFormat(name=Lucene50)}, sim=DefaultSimilarity, locale=ar_MA, timezone=America/Bogota\n--\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fcs -Dtests.seed=7CE0E739965D7ECD -Dtests.slow=true -Dtests.locale=mt_MT -Dtests.timezone=Pacific/Bougainville -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_enum -Dtests.seed=7CE0E739965D7ECD -Dtests.slow=true -Dtests.locale=mt_MT -Dtests.timezone=Pacific/Bougainville -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fc -Dtests.seed=7CE0E739965D7ECD -Dtests.slow=true -Dtests.locale=mt_MT -Dtests.timezone=Pacific/Bougainville -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\nrandom.log.txt:   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene50): {foo_ti=BlockTreeOrds(blocksize=128), foo_i=PostingsFormat(name=LuceneFixedGap), range_facet_l_dv=FSTOrd50, _version_=BlockTreeOrds(blocksize=128), multiDefault=PostingsFormat(name=LuceneFixedGap), intDefault=BlockTreeOrds(blocksize=128), id=FSTOrd50, range_facet_i_dv=BlockTreeOrds(blocksize=128), foo_ti1=PostingsFormat(name=Memory doPackFST= false), foo_i1=FSTOrd50, range_facet_l=BlockTreeOrds(blocksize=128), timestamp=BlockTreeOrds(blocksize=128)}, docValues:{range_facet_l_dv=DocValuesFormat(name=Memory), range_facet_i_dv=DocValuesFormat(name=Asserting), timestamp=DocValuesFormat(name=Asserting)}, sim=RandomSimilarityProvider(queryNorm=false,coord=yes): {}, locale=mt_MT, timezone=Pacific/Bougainville\n--\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fcs -Dtests.seed=2A1E7082CBAD1C7C -Dtests.slow=true -Dtests.locale=sr_BA -Dtests.timezone=Indian/Kerguelen -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fc -Dtests.seed=2A1E7082CBAD1C7C -Dtests.slow=true -Dtests.locale=sr_BA -Dtests.timezone=Indian/Kerguelen -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\nrandom.log.txt:   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_enum -Dtests.seed=2A1E7082CBAD1C7C -Dtests.slow=true -Dtests.locale=sr_BA -Dtests.timezone=Indian/Kerguelen -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\nrandom.log.txt:   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene50): {foo_ti=PostingsFormat(name=MockRandom), foo_i=PostingsFormat(name=MockRandom), range_facet_l_dv=PostingsFormat(name=Memory doPackFST= true), _version_=PostingsFormat(name=MockRandom), multiDefault=PostingsFormat(name=Asserting), intDefault=PostingsFormat(name=MockRandom), id=PostingsFormat(name=Memory doPackFST= true), range_facet_i_dv=PostingsFormat(name=Asserting), foo_ti1=PostingsFormat(name=Memory doPackFST= true), foo_i1=FST50, range_facet_l=PostingsFormat(name=Asserting), timestamp=PostingsFormat(name=Asserting)}, docValues:{range_facet_l_dv=DocValuesFormat(name=Asserting), range_facet_i_dv=DocValuesFormat(name=Memory), timestamp=DocValuesFormat(name=Memory)}, sim=RandomSimilarityProvider(queryNorm=false,coord=no): {}, locale=sr_BA, timezone=Indian/Kerguelen\n\n\n\n...time to start playing with -Dtests.postingformat (using those 3 seeds)...\n\n\n# ... The current classpath supports the following names: [MockRandom, RAMOnly, LuceneFixedGap, LuceneVarGapFixedInterval, LuceneVarGapDocFreqInterval, TestBloomFilteredLucenePostings, Asserting, BlockTreeOrds, BloomFilter, Direct, FSTOrd50, FST50, Memory, SimpleText, AutoPrefix, completion, Lucene50]\n\npostings=(MockRandom RAMOnly LuceneFixedGap LuceneVarGapFixedInterval LuceneVarGapDocFreqInterval TestBloomFilteredLucenePostings Asserting BlockTreeOrds BloomFilter Direct FSTOrd50 FST50 Memory SimpleText AutoPrefix completion Lucene50)\n\nseeds=(2A1E7082CBAD1C7C 7CE0E739965D7ECD FA4AA4357AB98B18)\n\nfor p in \"${postings[@]}\"\ndo\n    for s in \"${seeds[@]}\"\n    do\n\techo $p\n\techo $s\n\tant test -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fcs -Dtests.verbose=true -Dtests.codec=random -Dtests.postingsformat=$p -Dtests.seed=$s | tee $s.$p.log.txt\n    done\ndone\n\n\n\n...and how many of the 3 seeds did each codec fail? ...\n\n\n$ grep -l \"reproduce with\" *.*.log.txt | cut -d . -f 2 | sort | uniq -c | sort -rn\n      3 RAMOnly\n      3 completion\n      3 BloomFilter\n      3 AutoPrefix\n      2 LuceneFixedGap\n      2 Direct\n      2 BlockTreeOrds\n      1 MockRandom\n\n\n\n...and how many passed? ...\n\n\n$ grep -L \"reproduce with\" *.*.log.txt | cut -d . -f 2 | sort | uniq -c | sort -rn\n      3 TestBloomFilteredLucenePostings\n      3 SimpleText\n      3 Memory\n      3 LuceneVarGapFixedInterval\n      3 LuceneVarGapDocFreqInterval\n      3 Lucene50\n      3 FSTOrd50\n      3 FST50\n      3 Asserting\n      2 MockRandom\n      1 LuceneFixedGap\n      1 Direct\n      1 BlockTreeOrds\n\n\n\n...i was hoping for a more clear pattern.  looking closer at the data, a lot of these failures are completely diff from this bug \u2013 and make me thing there are glitches in how the \"-Dtests.postingsformat\" option builds a Codec on the fly.\n\nAn examples of what i mean \u2013 all the RAMOnly failures look like this...\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTrieFacet -Dtests.method=testMultiValuedTrieP8_fcs -Dtests.seed=2A1E7082CBAD1C7C -Dtests.slow=true -Dtests.postingsformat=RAMOnly -Dtests.locale=nl_BE -Dtests.timezone=Europe/Sofia -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.11s | TestTrieFacet.testMultiValuedTrieP8_fcs <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([2A1E7082CBAD1C7C:3E120D851303C7F0]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:770)\n   [junit4]    >        at org.apache.solr.search.TestTrieFacet.doTestNoZeros(TestTrieFacet.java:134)\n   [junit4]    >        at org.apache.solr.search.TestTrieFacet.testMultiValuedTrieP8_fcs(TestTrieFacet.java:194)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n   [junit4]    > Caused by: java.lang.NullPointerException\n   [junit4]    >        at org.apache.lucene.codecs.ramonly.RAMOnlyPostingsFormat$RAMTermsEnum.docFreq(RAMOnlyPostingsFormat.java:464)\n   [junit4]    >        at org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.docFreq(FilterLeafReader.java:210)\n   [junit4]    >        at org.apache.lucene.index.FilteredTermsEnum.docFreq(FilteredTermsEnum.java:141)\n   [junit4]    >        at org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.collectTerms(MultiTermQueryConstantScoreWrapper.java:130)\n   [junit4]    >        at org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.rewrite(MultiTermQueryConstantScoreWrapper.java:152)\n   [junit4]    >        at org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.bulkScorer(MultiTermQueryConstantScoreWrapper.java:198)\n   [junit4]    >        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:560)\n   [junit4]    >        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:367)\n\n\n\nLet's look for the exact XPATH errors we are expecting with these seeds...\n\n\n$ grep -l \"REQUEST FAILED: xpath=\\*\\[count(//lst\\[\\@name='facet_fields'\\]/lst\\[\\@name='foo_ti'\\]/int\\[\\@name='0'\\])=0]\" *.*.log.txt | cut -d . -f 2 | sort | uniq -c | sort -rn\n      2 LuceneFixedGap\n      2 Direct\n      2 BlockTreeOrds\n      1 MockRandom\n\n\n\nStill no obvious pattern \u2013 these postings formats all resulted in the 'value=\"0\"' failure at least once, but also passed at least once (see counts above) ... which makes me question my hypothosis that this is related to the postingsformat \u2013 for MockRandom maybe, it does some additional randomization after it's selected on construction, but the others all use their default constructors when specified this way.\n\n(of course, maybe the cause that i specified -Dtests.postingsformat instead of relying on -Dtests.codec=random to pick one is causing the random consumption to change such that that affects something else ? ... my head hurts) ",
            "id": "comment-14574939"
        },
        {
            "date": "2015-06-05T18:08:38+0000",
            "author": "Hoss Man",
            "content": "re-reading my long comment from last night, i realized i kind of buried the lead, which is: I was not able to reproduce this bug using any explicitly specified -Dtests.codec other then \"random\" ",
            "id": "comment-14574944"
        },
        {
            "date": "2015-06-10T16:26:16+0000",
            "author": "Hoss Man",
            "content": "This should now be fixed on trunk by LUCENE-6529 (which included the test created in this issue).  will be backported after it soaks a bit ",
            "id": "comment-14580744"
        },
        {
            "date": "2015-08-26T13:06:11+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713238"
        }
    ]
}