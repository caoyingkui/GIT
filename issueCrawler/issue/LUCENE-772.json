{
    "id": "LUCENE-772",
    "title": "Index corruption can cause infinite spin loop when Lucene attempts to incorrectly uncompress fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.6.3"
        ],
        "affect_versions": "2.1",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "Unfortunately I don't have a reproducible case of this (yet), but it's happened twice now on our production servers in the past few days, after we switched to the new lockless commits (thanks!). What we're seeing is the search thread running away in the middle of a seemingly ordinary search, after several hundred thousand queries that worked just fine. The search index is NFS mounted, and is updated every minute or so during the day by an indexing process running on a separate server. We do get occasional I/O errors, but we catch and retry and it seems ok after a few seconds.\n\nBut twice now we've had run-away threads; the thread dump in both cases was caught in the middle of java.util.zip.Inflater:\n\n\"http-8080-3\" daemon prio=1 tid=0x08294688 nid=0x1f0d runnable [0x1f17c000..0x1f17e0b0]\n        at java.util.zip.Inflater.inflateBytes(Native Method)\n        at java.util.zip.Inflater.inflate(Inflater.java:215)\n\n\tlocked <0x3d73cba8> (a java.util.zip.Inflater)\n        at java.util.zip.Inflater.inflate(Inflater.java:232)\n        at org.apache.lucene.index.FieldsReader.uncompress(FieldsReader.java:388)\n        at org.apache.lucene.index.FieldsReader.addField(FieldsReader.java:222)\n        at org.apache.lucene.index.FieldsReader.doc(FieldsReader.java:105)\n        at org.apache.lucene.index.SegmentReader.document(SegmentReader.java:324)\n\tlocked <0x3cefbdd8> (a org.apache.lucene.index.SegmentReader)        at org.apache.lucene.index.MultiReader.document(MultiReader.java:108)\n        at org.apache.lucene.index.IndexReader.document(IndexReader.java:360)        at org.apache.lucene.search.IndexSearcher.doc(IndexSearcher.java:84)\n        at org.apache.lucene.search.Hits.doc(Hits.java:104)\n\n\n\n[...]\n\nAny ideas what this could be? Thanks!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-01-12T21:40:10+0000",
            "content": "I had many concurrency problems with java.util.zip and ended up switching to jzlib (www.jcraft.com/jzlib/), which has the benefit of being a pure Java implementation that you can easily debug and modify if necessary.  There were no performance degradations associated with the shift, and jzlib has been solid for me.  This would require that you compress and decompress external to Lucene, but that can be much more efficient anyway (especially with LUCENE-362, although the patch in jira probably won't apply cleanly with current code).\n\nNot sure this helps, but I'd bet your issue is somehow related to concurrency. ",
            "author": "Chuck Williams",
            "id": "comment-12464358"
        },
        {
            "date": "2007-01-12T21:44:43+0000",
            "content": "By the way, this runaway behavior did happen after we caught 1 i/o exception and retried the query (we close the IndexSearcher and open a new one whenever we get an exception, or if isCurrent is false). Unfortunately I don't have details on the i/o exception - I'll try to get that if we can make it happen again.\n\nAfter the i/o exception, the runaway thread was using 100% of the CPU for at least 40 minutes. ",
            "author": "Arthur Smith",
            "id": "comment-12464359"
        },
        {
            "date": "2007-01-12T22:16:55+0000",
            "content": "Chuck - thanks - though IndexSearcher is supposed to be thread safe, so maybe it shouldn't be calling java.util.zip?\n\nBut now that I look again, we shouldn't have any compressed fields in our indexes! This has got to be an index corruption issue - we'll get the latest build out there and see if the recent fixes (LUCENE-140 in particular) help. ",
            "author": "Arthur Smith",
            "id": "comment-12464372"
        },
        {
            "date": "2007-01-18T19:28:22+0000",
            "content": "Ok, running the 1-12-07 nightly build seems to have fixed the problem - we've had no repeats after a couple of days of heavy use. Sounds like we were running into the same issue that was just addressed, thanks! ",
            "author": "Arthur Smith",
            "id": "comment-12465846"
        },
        {
            "date": "2007-02-27T18:10:39+0000",
            "content": "Closing all issues that were resolved for 2.1. ",
            "author": "Michael McCandless",
            "id": "comment-12476282"
        },
        {
            "date": "2009-06-04T10:42:00+0000",
            "content": "I know this sounds silly on a 2y+ old issue, but I have a legacy server running in production on linux with jdk1.5.0_11, tomcat 5.0.28, and lucene-core-2.1.0 on which this very problem has just occured (same symptoms and thread dump).\n\nThis issue has been marked as fixed in 2.1, but with apparently not much evidence that something was explicitly done to fix it?\nI have no idea how to reproduce it, and it has only happened once.\n\nCan I assume that switching to Lucene 2.4.1 will automatically fix the likely index corruption that triggered this or that something else will prevent trying to deflate a non-zipped field? Or is this a wild guess?\n\nI guess I'll have to switch to 2.4.1 anyway before reporting it, but I was wondering if there's a chance this has been explicitly addressed after 2.1.0...\n\nThanks to anyone that would still be reading this...! ",
            "author": "Olivier Dony",
            "id": "comment-12716229"
        },
        {
            "date": "2009-06-04T10:50:57+0000",
            "content": "Corrumptions are not automatically fixed, but in 2.4.1 (end even before) there is a tool called CheckIndex, which you can call with thex path to index. But it cannot really repair issues, but can drop corrupt segments (parts of the index). ",
            "author": "Uwe Schindler",
            "id": "comment-12716233"
        },
        {
            "date": "2009-06-04T10:58:34+0000",
            "content": "Olivier, in your case are you certain you did not add compressed fields, yet Lucene is trying to decompress the fields on loading?\n\nIn which case this sounds like index corruption that unfortunately causes zip to be invoked on invalid data, which it turn can apparently cause zip to enter an infinite loop.\n\nUnfortunately, once an index is corrupt it can cause any number of crazy things to happen.  We need to get to the root cause of the corruption.  So it's not clear on upgrading to 2.4.1 with a still-corrupt index, whether 2.4.1 will behave any differently.  It's still worth a shot: upgrade to 2.4.1 and run CheckIndex with java's assertions enabled, and see what happens? ",
            "author": "Michael McCandless",
            "id": "comment-12716234"
        },
        {
            "date": "2009-06-04T10:59:07+0000",
            "content": "Reopening; nothing was fixed here... ",
            "author": "Michael McCandless",
            "id": "comment-12716235"
        },
        {
            "date": "2009-06-04T11:00:09+0000",
            "content": "Reopened & changed title ",
            "author": "Michael McCandless",
            "id": "comment-12716237"
        },
        {
            "date": "2012-09-18T16:39:35+0000",
            "content": "Changed fix version to 3.6.2, which, if released, will be the final Lucene version that supports reading compressed fields in indexes created by Lucene 2.X.  See LUCENE-1960. ",
            "author": "Steve Rowe",
            "id": "comment-13457932"
        },
        {
            "date": "2012-09-18T21:58:23+0000",
            "content": "I don't think we need to keep this issue open. It is no longer possible to create compressed fields, Lucene 3.x can only read them. If they are corrupt there is nothing we can do to fix it as this is a bug in JDK.\n\nI would close this as won't fix. ",
            "author": "Uwe Schindler",
            "id": "comment-13458231"
        }
    ]
}