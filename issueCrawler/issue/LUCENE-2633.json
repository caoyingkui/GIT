{
    "id": "LUCENE-2633",
    "title": "PackedInts does not support structures above 256MB",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The PackedInts Packed32 and Packed64 fails when the internal structure exceeds 256MB. This is due to a missing cast that results in the bit position calculation being limited by Integer.MAX_VALUE (256MB * 8 = 2GB).",
    "attachments": {
        "LUCENE-2633.patch": "https://issues.apache.org/jira/secure/attachment/12453772/LUCENE-2633.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-03T11:24:31+0000",
            "content": "Bug fixed for Packed32 and Packe64. Unit test added that triggers the bug in the non-patched versions. ",
            "author": "Toke Eskildsen",
            "id": "comment-12905855"
        },
        {
            "date": "2010-09-03T11:26:11+0000",
            "content": "See LUCENE-1990 for discussion of this fix. ",
            "author": "Toke Eskildsen",
            "id": "comment-12905856"
        },
        {
            "date": "2010-09-08T13:39:42+0000",
            "content": "Any objections to at least committing the fix (the casts are clearly needed) while we wait and sort out the test? Appears to be a clear and simple bug, but the test issue is not so clear and simple and looks like it could drag out the fix being applied here - but that doesn't seem necessary? ",
            "author": "Mark Miller",
            "id": "comment-12907211"
        },
        {
            "date": "2010-09-08T13:46:23+0000",
            "content": "+1, if the test is problematic, we can always either comment out the new test, or @Ignore it, and add a note. ",
            "author": "Robert Muir",
            "id": "comment-12907214"
        },
        {
            "date": "2010-09-08T14:24:37+0000",
            "content": "+1, if the test is problematic, we can always either comment out the new test, or @Ignore it, and add a note.\n\n+1 - I thought about something like the Assume#assumeTrue(MAX_HEAP_MEM >= 256); (http://kentbeck.github.com/junit/javadoc/latest/org/junit/Assume.html#assumeTrue(boolean)) which could be set to a certain default value and would exclude the test if not enough memory is available. That would prevent uncommenting the test - I guess @Ignore would work too but maybe we want disable / enable at a central place for tests like that.\n\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12907228"
        },
        {
            "date": "2010-09-09T11:46:39+0000",
            "content": "I have no problems running 'ant test' with this patch/test applied.\n\nas mentioned on LUCENE-1990, ant allows 512MB in our build already.\n\ni mentioned there that it would be nice to reduce this to say 256MB, \nbut its not causing me any problems personally and computers get more\nRAM every day.\n\nI think we should commit with the test enabled.  ",
            "author": "Robert Muir",
            "id": "comment-12907604"
        },
        {
            "date": "2010-09-09T12:44:05+0000",
            "content": "Runs fine for me too \u2013 the test 'only' needs 256 MB so I think it's fine. ",
            "author": "Michael McCandless",
            "id": "comment-12907618"
        },
        {
            "date": "2010-09-09T12:54:52+0000",
            "content": "Thanks Toke! ",
            "author": "Michael McCandless",
            "id": "comment-12907621"
        },
        {
            "date": "2011-11-27T12:29:28+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157768"
        }
    ]
}