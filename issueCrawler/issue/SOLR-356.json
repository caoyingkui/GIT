{
    "id": "SOLR-356",
    "title": "pluggable functions (value sources)",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "allow configuration of new value sources ot be created by the function query parser.",
    "attachments": {
        "pluggableFunctions.patch": "https://issues.apache.org/jira/secure/attachment/12373046/pluggableFunctions.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jon Pierce",
            "id": "comment-12528896",
            "date": "2007-09-19T21:01:42+0000",
            "content": "A related thread on the list:\nhttp://www.mail-archive.com/solr-user@lucene.apache.org/msg06073.html\nhttp://www.nabble.com/pluggable-functions-tf4476995.html "
        },
        {
            "author": "Doug Daniels",
            "id": "comment-12558357",
            "date": "2008-01-13T07:38:05+0000",
            "content": "This is a quick attempt at pluggable functions using the same style as Yonik's QParser plugins.  it takes the path suggested in http://www.nabble.com/forum/ViewPost.jtp?post=12770704&framed=y by letting people register new functions as ValueSourceParser plugins in solrconfig. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12558423",
            "date": "2008-01-13T16:35:01+0000",
            "content": "Thanks for taking a crack at this Doug!\n\nMy initial thought was perhaps to simply have a Map from function name to ValueSource class, and the ValueSource could either\n1) take a List<Object> (or NamedList if we want to start supporting named params like python, etc)\n2) specify the argment list so that the function parser could validate the parameters (but on second thought, I think this could get too complex)\n\nBut your use of ValueSourceParser looks to have advantages, as it's essentially a factory and can  act as a virtual constructor, and can be initialized with different static params from config.\n\nOne question would be if we really want to expose StrParser to the ValueSourceParser.\nStrParser is a really quick hack I threw together (that's grown) and I could see it changing in the future (esp if we eventually implement an infix parser).  Two ways of isolating the ValueSourceParser from the low level details of parsing I see are:\n1) have a ValueSourceParser.createValueSource(List params), and the function parser would create the list\n   and pass it to the parser\n2) keep the current style, and lock down the public APIs on FunctionQParser.  Remove some of the details of parsing (like reading separators).  So the following code from your patch\n\n    standardValueSourceParsers.put(\"max\", new ValueSourceParser() {\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValSource();\n        fp.getStrParser().expect(\",\");\n        float val = fp.getStrParser().getFloat();\n        return new MaxFloatFunction(source,val);\n      }\n    });\n\n\nWould look something more like\n\n    standardValueSourceParsers.put(\"max\", new ValueSourceParser() {\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.getValSource();\n        float val = fp.getFloat();\n        return new MaxFloatFunction(source,val);\n      }\n    });\n\n "
        },
        {
            "author": "Doug Daniels",
            "id": "comment-12558434",
            "date": "2008-01-13T18:13:51+0000",
            "content": "I agree that the ValueSourceParser should be isolated from the low-level details like grabbing commas between args.\n\nI thought about the first option you suggested, and it seems difficult with recursive functions.  When the ValueSourceParser.createValueSource method expects another ValueSource as an arg, it would need to invoke whatever code created it (presumably from the FunctionQParser).   Alternately, the FunctionQParser could ensure that the innermost functions are run first, passing their completed values out to enclosing functions as params.\n\nIt seems simpler to me to go with the second option though \u2013 locking down the API on FunctionQParser.  The ValueSourceParser would already have access to FunctionQParser, which it could call when it needs to parse a ValueSource argument.\n\nWhat do you think? "
        },
        {
            "author": "Doug Daniels",
            "id": "comment-12558471",
            "date": "2008-01-13T23:55:53+0000",
            "content": "Here's a patch for the second option, hiding the low-level details from ValueSourceParser implementations. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12558525",
            "date": "2008-01-14T07:21:41+0000",
            "content": "I'm not really following this issue, but in skimming the comments i just wanted to toss out the idea that the approach taken by the Lucene-java xml-query-parser contrib might make sense here.\n\nit's got the same basic problem: support parsing and building of nested (query/function) structures where user configuration tells you which (query/function) name maps to which implementation.\n\nthe code may not be reusable in this case, but the pattern may be (not that i remember much about what the pattern was, just that it made a lot of sense when it was being fleshed out) "
        },
        {
            "author": "Doug Daniels",
            "id": "comment-12559075",
            "date": "2008-01-15T15:16:03+0000",
            "content": "I found that thread at http://marc.info/?l=lucene-dev&m=113355526731460&w=2.  It's quite a lengthy thread, but from what I read I agree that it's trying to solve a similar problem (plus a few additional problems that solr has since solved nicely).\n\nPerhaps it's just personal preference, but I find XML description of functions, though powerful and expressive, quite a bit clunky.  I far prefer the functional style for this sort of task.\n\nMaybe I'm missing something from the recommendation though.  Were you recommending using XML to express the functions themselves, or something else about the xml-query-parser? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12559206",
            "date": "2008-01-15T20:03:30+0000",
            "content": "Maybe I'm missing something from the recommendation though. Were you recommending using XML to express the functions themselves, or something else about the xml-query-parser?\n\nI was not suggesting an XML syntax ... just that the approach the xml-query-parser takes to deal with recursively parsing/eval-ing the XML structure using \"user\" configured implementations for each type of XML node seems to map closely to the idea of recusively parsing/eval-ing parenthetical function syntax using \"user\" configured implantations for each function name.\n\nIn both cases the XML/paren parsing is trivial, it's deciding how to let the \"user\" tell you what Java objects to build based on each node/function name that gets interesting.\n\n(like i said, i haven't looked at the xml-query-parser code since it was orriginally being written .. i may be over romanticizing the idea behind it's design and how applicable it could be in this case) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12560207",
            "date": "2008-01-18T03:26:34+0000",
            "content": "Looking good! I think the current API is straight forward and relatively easy to support, even if we changed underlying parsing technologies.\n\nI think all we need now is a test that exercises plugging in a new function from solrconfig.xml... "
        },
        {
            "author": "Doug Daniels",
            "id": "comment-12564494",
            "date": "2008-01-31T20:45:37+0000",
            "content": "Added a sample ValueSourceParser plugin and some tests for it in TestFunctionQuery.  The sample plugin is for an \"nvl\" function that replaces a null value in a doc with a parameter float value. It works much like the oracle SQL function of the same name.  It also takes in an initialization parameter to test that functionality out.\n\nI also made TestFunctionQuery use a new copy of solrconfig.xml (in solrconfig-functionquery.xml) to avoid polluting the standard one with plugins. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12573293",
            "date": "2008-02-28T14:11:09+0000",
            "content": "I just committed this.  Thanks Doug! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12579143",
            "date": "2008-03-16T03:23:52+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked \"Resolved\" and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.3 as of today 2008-03-15\n\n\n\nThe Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1\n "
        }
    ]
}