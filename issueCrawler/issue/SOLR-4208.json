{
    "id": "SOLR-4208",
    "title": "Refactor edismax query parser",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "With successive changes, the edismax query parser has become more complex. It would be nice to refactor it to reduce code complexity, also to allow better extension and code reuse.",
    "attachments": {
        "qParserDiff.txt": "https://issues.apache.org/jira/secure/attachment/12562417/qParserDiff.txt",
        "SOLR-4208.patch": "https://issues.apache.org/jira/secure/attachment/12561368/SOLR-4208.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13534392",
            "date": "2012-12-17T22:46:16+0000",
            "content": "A possible refactor:\n\n\tI separated the ExtendedDismaxQParser so it can be extended.\n\tI broke the \"parse\" method into smaller methods, easier to read.\n\tSeparated the configuration (parsing and all the actual fields) to a different class. DismaxQParser has too many configuration options, I think it's going to be clear if we keep those separately.\n\tUsing factory methods for the configuration and the ExtendedSolrQueryParser so that an extending class could change the implementation of those classes.\n\tother minor changes.\n\n\n\nThoughts? "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13534780",
            "date": "2012-12-18T09:22:56+0000",
            "content": "This is a very welcome change.The unit test TestExtendedDismaxParser.testAliasingBoost fails but also fails without your patch.\n+1  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13534883",
            "date": "2012-12-18T13:29:34+0000",
            "content": "Does it fail with an assertion or an exception? It runs OK to me, with or without the patch. I'm running on Mac OS X and Java 6 on trunk. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13534888",
            "date": "2012-12-18T13:38:36+0000",
            "content": "I am on trunk too. I get some exceptions like:\n\n\n[junit4:junit4]   2> 5475 T10 C0 oasc.SolrException.log SEVERE org.apache.solr.common.SolrException: org.apache.solr.search.SyntaxError: Field aliases lead to a cycle\n...\n\n\n\nand,\n\n\n[junit4:junit4]   2> 6288 T10 oasc.SolrException.log SEVERE java.lang.NullPointerException\n[junit4:junit4]   2>            at org.apache.solr.handler.component.HttpShardHandlerFactory.close(HttpShardHandlerFactory.java:170)\n\n\n\nBut they don't fail the unit test. The testAliasingBoost is marked as failed:\n\n\n[junit4:junit4] Tests with failures:\n[junit4:junit4]   - org.apache.solr.search.TestExtendedDismaxParser.testAliasingBoost\n\n\n\n\n   <testcase classname=\"org.apache.solr.search.TestExtendedDismaxParser\" name=\"testAliasingBoost\" time=\"0.189\">\n      <error message=\"Exception during query\" type=\"java.lang.RuntimeException\">java.lang.RuntimeException: Exception during query\n        at __randomizedtesting.SeedInfo.seed([9B33524C2584B3F3:57A2A7EB2388F581]:0)\n        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:515)\n        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:482)\n        at org.apache.solr.search.TestExtendedDismaxParser.testAliasingBoost(TestExtendedDismaxParser.java:507)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n        at com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n        at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n        at org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n        at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n        at com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n        at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n        at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n        at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n        at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n        at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n        at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n        at com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n        at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n        at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n        at com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n        at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n        at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n        at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n        at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n        at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n        at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n        at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n        at java.lang.Thread.run(Thread.java:662)\nCaused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//result/doc[1]/str[@name=&apos;id&apos;]=42\n        xml response was: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;response&gt;\n&lt;lst name=&quot;responseHeader&quot;&gt;&lt;int name=&quot;status&quot;&gt;0&lt;/int&gt;&lt;int name=&quot;QTime&quot;&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;result name=&quot;response&quot; numFound=&quot;2&quot; start=&quot;0&quot;&gt;&lt;doc&gt;&lt;str name=&quot;id&quot;&gt;47&lt;/str&gt;&lt;arr name=&quot;trait_ss&quot;&gt;&lt;str&gt;Pig&lt;/str&gt;&lt;/arr&gt;&lt;/doc&gt;&lt;doc&gt;&lt;str name=&quot;id&quot;&gt;42&lt;/str&gt;&lt;arr name=&quot;trait_ss&quot;&gt;&lt;str&gt;Tool&lt;/str&gt;&lt;str&gt;Obnoxious&lt;/str&gt;&lt;/arr&gt;&lt;str name=&quot;name&quot;&gt;Zapp Brannigan&lt;/str&gt;&lt;/doc&gt;&lt;/result&gt;\n&lt;/response&gt;\n\n        request was:f.myalias.qf=name+trait_ss^0.5&amp;q=Zapp+Pig&amp;qf=myalias&amp;defType=edismax\n        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:508)\n        ... 42 more\n</error>\n   </testcase>\n\n\n\nI'm not sure what's going. This is a clean trunk check out. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13534979",
            "date": "2012-12-18T15:40:42+0000",
            "content": "I can see the \"Field aliases lead to a cycle\" exceptions. Those are being generated by the test testCyclicAliasing() and are expected exceptions (maybe the bad thing is that those are being logged)\nI also see the NPE, that seems to be generated when finishing the whole test, when shutting down the core. \nI can't see yet the failure with the testAliasingBoost yet, even trying with your seed.\n\nI'll continue looking into this. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13535930",
            "date": "2012-12-19T13:10:14+0000",
            "content": "I also see the NPE, that seems to be generated when finishing the whole test, when shutting down the core. \nI saw this with other tests too, It looks like it may happen with all tests that extend SolrTestCaseJ4. I created SOLR-4218 "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13536254",
            "date": "2012-12-19T18:32:35+0000",
            "content": "Markus I have run the test on different environments and it keeps passing. Could you give me more details about your environment? \nIf the same tests fails without the patch, maybe we should open a new Jira issue for it. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13536927",
            "date": "2012-12-20T10:36:11+0000",
            "content": "Must have been my build again! A new check out passes completely. My own build still won't pass, even after i restored modified files and completely recompiled. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13537617",
            "date": "2012-12-21T02:10:38+0000",
            "content": "Thoughts?\n\n+1 to the idea, no question.\n\nCould you make the patch such that it's not an entire file replacement so we can more easily see what's changed exactly?\n\nPerhaps rather (or in conjunction with) making the parser easier/cleaner to \"extends\", we could make it open to Solr-style \"plugins\", where the edismax parser itself is still used directly, but various overrides/extensions can be plugged in (and perhaps made query-time changeable[!] by name lookup Solr-plugin-style; see HighlightComponent for example) "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13539735",
            "date": "2012-12-26T22:55:43+0000",
            "content": "Could you make the patch such that it's not an entire file replacement so we can more easily see what's changed exactly?\nI think moving the parser to a different file is a good part of the refactor. I'm attaching the file \"qParserDiff.txt\" to show how the parser changed with the refactor, but I'm keeping it separately on SOLR-4208.patch.\n\nPerhaps rather (or in conjunction with) making the parser easier/cleaner to \"extends\", we could make it open to Solr-style \"plugins\", where the edismax parser itself is still used directly, but various overrides/extensions can be plugged in (and perhaps made query-time changeable[!] by name lookup Solr-plugin-style; see HighlightComponent for example)\n\nThis is a good idea. When I started to work on my use case I initially thought on having something like the UpdateRequestProcessorChain at query time that would end with the EdismaxQParser itself (maybe a QParser that would add this component chain and use the EdismaxQParser as part of it), but that wouldn't give me enough points to extend, because the \"parse()\" method was going to be executed by the EdismaxQParser and there was no way of modifying its behavior. Maybe there is another way of add a \"plugin style\" that allows more customization?\n\nIn the meantime I'm attaching a new patch with some more minor changes and some tests "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13540071",
            "date": "2012-12-27T17:45:20+0000",
            "content": "Tomas - regarding the idea of using Solr plugin points into the edismax parser - on second thought it might be premature to put a plugin system in there at this point.  Given the couple of examples you've added to the test cases, doing it with a subclass or an extension still requires Java coding and plugging in something, so again it's probably overkill to consider the plugin thing.  But here's how it'd work (using the HighlighterComponent, such as formatter and encoders) where a plugin was responsible for the multi-lingual field logic of overriding the configuration object in your example, or a different plugin that was used to plug in a response to getFieldQuery for your other example.  But I think leaving it how you've got it set up for subclassing works fine for now.  +1 "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13546226",
            "date": "2013-01-07T20:14:53+0000",
            "content": "Other minor change, the decision on whether to use the stopwords filter or not is extracted to a new method so that it can be overridden.   "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13546242",
            "date": "2013-01-07T20:34:29+0000",
            "content": "Very nice +1 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13546403",
            "date": "2013-01-07T23:25:24+0000",
            "content": "reading through things, i think this is definitely an improvement over what we have currently in terms of making things extensible in subclasses, and the test look great.  adding sub-plugins seems like overkill at this point, probably best left for a future issue.\n\ni've improved tomas's latest patch slightly, by moving the ASL to the top of ExtendedDismaxQParser.java and setting up proper exception ignoring for those expected \"Field aliases lead to a cycle\" errors that were getting logged (the test already trie to make them ignored by using the \"ignored_exception\" magic string in the query, but these errors don't include the \"q\" in the exception message so it wasn't doing anything.\n\nI'm running tests & precommit now ... but the one thing i'd really like to do before committing is make sure all of these new/existing methods have decent javadocs ... if we're making these changes to make subclassing easier, we should make sure the jdocs are their for people who write subclasses so they understand what each method does.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13546405",
            "date": "2013-01-07T23:25:45+0000",
            "content": "going to try to get this into 4.1. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13546471",
            "date": "2013-01-08T01:02:53+0000",
            "content": "updated patch:\n\n\n\tfixed test to not use forbidden api (\"new String(byte[])\" is a no-no and wasn't needed anyway)\n\tadded some javadocs to a few methods based on stuff that was obvious to me\n\n\n\ntomas & folks: can you take a look at the javadocs in the patch and let me know if i made in obvious mistakes or if you have suggestions for additional javadoc improvements? "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13547042",
            "date": "2013-01-08T17:36:24+0000",
            "content": "[trunk commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1430399\n\nSOLR-4208: ExtendedDismaxQParserPlugin has been refactored to make subclassing easier "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13547071",
            "date": "2013-01-08T18:12:18+0000",
            "content": "I've committed what we have so far to help move things forward in 4.1.  We can always consider additional javadocs and other refactorings in future issues\n\nCommitted revision 1430399.\nCommitted revision 1430426.\n\nthanks tomas. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13547077",
            "date": "2013-01-08T18:16:12+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1430426\n\nSOLR-4208: ExtendedDismaxQParserPlugin has been refactored to make subclassing easier (merge r1430399) "
        }
    ]
}