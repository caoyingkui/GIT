{
    "id": "SOLR-7054",
    "title": "a pure REST interface for all operations in Solr",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "It would be a single handler say /docs\n\nGET would do a query\n\nGET /docs is equivalent to /select/q=:\nGET /docs?q=a:b will be equivalent to /select?q=a:b\nGET /docs/docId will be equivalent to /select?q=id:docId\n\nPUT/POST /docs is equivalent to /update and the default format for json would be that of /update/json/docs\n\nDELETE /docs/id will do a delete by id\n\nDELETE /docs?q=x:val is delete by query\n\nWe can think of implementing this as a new RequestHandler without changing anything in Solr. Itcan be configured as follows\n\n<requestHandler name=\"/docs\" class=\"RestRequestHandler\">\n  <str name=\"GET\">/select</str> <!--This will just use the /select handler to handle http GET -->\n  <str name=\"GET-single\">/get</str> <!-- all GET requests to /docs/id will be handed by /get request handler . Please suggest a better name-->\n  <str name=\"POST\">/update/json/docs</str> <!-- All POST requests will use the handler configured at /update/json/docs -->\n  <str name=\"PUT\">/update/json/docs\"</str> <!-- PUT requests will use same as POST -->\n  <str name=\"DELETE\">/update\"</str> <!-- DELETE requests will use /update as well --> \n</requestHandler>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-28T18:48:26+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Some questions to guide this idea:\n\n1. Commit. How do you express that?\n2. Default, etc. parameters? UpdateRequestChains? Do they just apply universally? \n3. What happens with custom end-points? Or is /docs just a new end-point and the rest maintain the old syntax? ",
            "id": "comment-14295603"
        },
        {
            "date": "2015-01-29T09:06:12+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "+1 to such a transition! Also for all the Admin stuff.\n\nGET /docs/<docId> should probably map to real-time GET /get?id=<docId> ?\nHEAD /docs/<docId> could do and \"exists\" with HTTP 200 for exists and HTTP 404 for not found (no body)\n\nWe should have an endpoint to support POSTing a JSON DSL as body such as ES' _search. Perhaps some of Yonik Seeley's great work over at http://heliosearch.org/heliosearch-solr-json-request-api/ could be used? ",
            "id": "comment-14296615"
        },
        {
            "date": "2015-01-29T10:45:46+0000",
            "author": "Noble Paul",
            "content": "GET /docs/<docId> should probably map to real-time GET /get?id=<docId> ?\n\nI would prefer /docs/<docId> to be equivalent of /select?q=id:<docId> and /docs/<docId>?realtime=true for realtime get (or some other param) because no other operation in /docs is realtime by default\n\nbqWe should have an endpoint to support POSTing a JSON DSL as body such as\nYes we should add a DSL. JSON is harder to type . How about hocon? ",
            "id": "comment-14296685"
        },
        {
            "date": "2015-01-29T14:50:03+0000",
            "author": "Yonik Seeley",
            "content": "We should have an endpoint to support POSTing a JSON DSL as body\n\nWe can consider the request handlers as those endpoints... simply send a JSON body (GET or POST) to the existing request handlers like /select or /query or whatever (that's how I did it in heliosearch). ",
            "id": "comment-14296956"
        },
        {
            "date": "2015-04-06T03:13:03+0000",
            "author": "Noble Paul",
            "content": "The objective is to have a single endpoint that normal REST users will understand. Once we define the behavior the handler  we can think of implementing them as we wish  ",
            "id": "comment-14480874"
        }
    ]
}