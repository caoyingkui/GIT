{
    "id": "SOLR-9264",
    "title": "Optimize ZkController.publishAndWaitForDownStates",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "ZkController.publishAndWaitForDownStates keeps looping over all collections in the cluster state to ensure that every replica hosted on the current node has been marked as down. This is wasteful when you have a large number of collections because each access to a non-watched collection gets data from ZK. Instead, we can watch the interesting collections (i.e. which have replicas hosted locally) and wait till we see the required state.",
    "attachments": {
        "SOLR-9264.patch": "https://issues.apache.org/jira/secure/attachment/12814961/SOLR-9264.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-29T21:11:41+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Patch which uses ZkStateReader's registerCollectionStateWatcher to wait until all replicas are in 'down' state. ",
            "id": "comment-15355781"
        },
        {
            "date": "2016-06-29T21:58:32+0000",
            "author": "Hrishikesh Gadre",
            "content": "[~ shalinmangar]  I think the patch looks good. Only couple of minor comments,\n\n\n\tCan we rename the \"interestingCollections\" and \"interestingCollection\" variable to something like \"collectionsWithLocalReplica\" and \"collectionWithLocalReplica\" ? It is a little difficult to understand what \"interesting\" means in this context without reading the JIRA description...\n\tIs it possible for the callback to be delivered more than once? If yes then we should probably add some defensive check before invoking the countDown method on the latch.\n\n ",
            "id": "comment-15355865"
        },
        {
            "date": "2016-06-30T05:26:02+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Hrishikesh. This patch incorporates both of your review comments. I'll commit this shortly. ",
            "id": "comment-15356541"
        },
        {
            "date": "2016-06-30T06:24:46+0000",
            "author": "Hrishikesh Gadre",
            "content": "[~ shalinmangar] Thanks for the updated patch. \n\nIt seems to me that the logic based on AtomicBoolean is probably not sufficient if the callback is invoked multiple times sequentially for the same collection since this variable is in the local scope. Is it a possibility? I think instead of AtomicBoolean we should use a concurrent hashmap (outside the scope of the lambda expression). This map should be pre-populated with the collection names before registering the callback. We can even reuse the collectionsWithLocalReplica variable for this purpose (i.e. instead of Set, we will use ConcurrentHashMap type).\n\nInside the callback we can use the remove method in a similar fashion to compareAndSet.\n\ni.e. instead of  counted.compareAndSet(false, true)\ndo  collectionsWithLocalReplica.remove(collectionName) != null\n\nWhat do you think? ",
            "id": "comment-15356595"
        },
        {
            "date": "2016-06-30T06:28:13+0000",
            "author": "Hrishikesh Gadre",
            "content": "since this variable is in the local scope.\n\nOK my bad. I see that the AtomicBoolean is indeed outside the scope of lambda expression. Now I don't quite understand how does this fix the concurrency issue. Don't we need separate AtomicBoolean per collection ? ",
            "id": "comment-15356600"
        },
        {
            "date": "2016-06-30T07:40:36+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Now I don't quite understand how does this fix the concurrency issue. Don't we need separate AtomicBoolean per collection ?\n\nMy last patch did have separate AtomicBoolean per collection because they were created inside the loop. However, I can see how this seems more complicated so I have changed the collectionsWithLocalReplica to be a concurrent hash set and we remove the collection from it to ensure that the latch isn't counted down more than once for the same collection. ",
            "id": "comment-15356676"
        },
        {
            "date": "2016-06-30T09:52:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 015e0fc1cf1d581c9657cd8f5588062c02588793 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=015e0fc ]\n\nSOLR-9264: Optimize ZkController.publishAndWaitForDownStates to not read all collection states and watch relevant collections instead ",
            "id": "comment-15356835"
        },
        {
            "date": "2016-06-30T09:54:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8cb37842ec531a84469607971024336b68c6ed50 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8cb3784 ]\n\nSOLR-9264: Optimize ZkController.publishAndWaitForDownStates to not read all collection states and watch relevant collections instead\n(cherry picked from commit 015e0fc) ",
            "id": "comment-15356837"
        },
        {
            "date": "2016-06-30T10:01:44+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for the review Hrishikesh! ",
            "id": "comment-15356847"
        },
        {
            "date": "2016-06-30T12:49:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 74c86063cf94dcc4dc022776bba31ae278686b42 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=74c8606 ]\n\nSOLR-9264: Remove unused imports ",
            "id": "comment-15357028"
        },
        {
            "date": "2016-06-30T12:50:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1ce09b482e9370649e9a7421b4961a67e744e46f in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ce09b4 ]\n\nSOLR-9264: Remove unused imports\n(cherry picked from commit 74c8606) ",
            "id": "comment-15357029"
        },
        {
            "date": "2016-08-26T13:59:05+0000",
            "author": "Michael McCandless",
            "content": "Bulk close resolved issues after 6.2.0 release. ",
            "id": "comment-15438970"
        }
    ]
}