{
    "id": "SOLR-4048",
    "title": "Add a \"findRecursive\" method to NamedList",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Most of the time when accessing data from a NamedList, what you'll be doing is using get() to retrieve another NamedList, and doing so over and over until you reach the final level, where you'll actually retrieve the value you want.\n\nI propose adding a method to NamedList which would do all that heavy lifting for you.  I created the following method for my own code.  It could be adapted fairly easily for inclusion into NamedList itself.  The only reason I did not include it as a patch is because I figure you'll want to ensure it meets all your particular coding guidelines, and that the JavaDoc is much better than I have done here:\n\n\n\t/**\n\t * Recursively parse a NamedList and return the value at the last level,\n\t * assuming that the object found at each level is also a NamedList. For\n\t * example, if \"response\" is the NamedList response from the Solr4 mbean\n\t * handler, the following code makes sense:\n\t * \n\t * String coreName = (String) getRecursiveFromResponse(response, new\n\t * String[] { \"solr-mbeans\", \"CORE\", \"core\", \"stats\", \"coreName\" });\n\t * \n\t * \n\t * @param namedList the NamedList to parse\n\t * @param args A list of values to recursively request\n\t * @return the object at the last level.\n\t * @throws SolrServerException\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprivate final Object getRecursiveFromResponse(\n\t\t\tNamedList<Object> namedList, String[] args)\n\t\t\tthrows SolrServerException\n\t{\n\n\t\tNamedList<Object> list = null;\n\t\tObject value = null;\n\t\ttry\n\t\t{\n\t\t\tfor (String key : args)\n\t\t\t{\n\t\t\t\tif (list == null)\n\t\t\t\t{\n\t\t\t\t\tlist = namedList;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlist = (NamedList<Object>) value;\n\t\t\t\t}\n\t\t\t\tvalue = list.get(key);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new SolrServerException(\n\t\t\t\t\t\"Failed to recursively parse NamedList\", e);\n\t\t}\n\t}",
    "attachments": {
        "SOLR-4048-cleanup.patch": "https://issues.apache.org/jira/secure/attachment/12583780/SOLR-4048-cleanup.patch",
        "SOLR-4048.patch": "https://issues.apache.org/jira/secure/attachment/12553083/SOLR-4048.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13492441",
            "date": "2012-11-07T15:52:58+0000",
            "content": "Had to edit that.  I have my own Exception type, I forgot to change one of the lines to SolrServerException. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13495123",
            "date": "2012-11-12T06:59:45+0000",
            "content": "Patch with new method and a unit test. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13495126",
            "date": "2012-11-12T07:06:20+0000",
            "content": "New patch.  The method that I copied over from my own code was synchronized.  I forgot to remove that. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13495127",
            "date": "2012-11-12T07:07:30+0000",
            "content": "This patch is against branch_4x.  I have not checked to see whether it applies as-is against trunk. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13499595",
            "date": "2012-11-18T03:18:50+0000",
            "content": "New patch using String... instead of String[]. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13504170",
            "date": "2012-11-26T22:01:08+0000",
            "content": "The javadoc for this new method probably should say \"One or more\" instead of \"An array of\" for the args parameter.\n\nI am curious about whether this can be considered for inclusion in Solr. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13527591",
            "date": "2012-12-09T19:19:32+0000",
            "content": "New patch with improved javadoc.  Patch is against trunk, but applies cleanly to branch_4x as well. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13527614",
            "date": "2012-12-09T20:12:00+0000",
            "content": "Previous patch was susceptible to ClassCastExceptions when sent invalid information.  Fixed and updated tests. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13636739",
            "date": "2013-04-19T19:05:36+0000",
            "content": "If there is no objection, I will clean this patch up and commit.  I'll put it in for 4.4, not 4.3. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13636819",
            "date": "2013-04-19T20:06:38+0000",
            "content": "Maybe name the method 'findRecursive' due to its runtime? \n\nI really wish the existing get() was named 'find' for the same reason. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13658722",
            "date": "2013-05-15T20:02:33+0000",
            "content": "Updated patch following advice from Robert Muir and improving the javadoc. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13658724",
            "date": "2013-05-15T20:03:21+0000",
            "content": "Adding find and deprecating get seems reasonable to me, though it would be a new issue. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13660903",
            "date": "2013-05-17T17:51:45+0000",
            "content": "I'm going to add at least one more test - to validate what happens with some different object types.\n\nAfter updating the patch for that, I'm planning to commit this in the next few hours unless there's a reasonable objection.  Even if I did something wrong in the new method, the patch won't break anything.  Due to the test additions, I'm reasonably confident that the coding is correct. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661041",
            "date": "2013-05-17T20:53:11+0000",
            "content": "new patch.  CHANGES.txt and a little more verbose testing. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661384",
            "date": "2013-05-18T16:18:21+0000",
            "content": "Committed to trunk (r1484135) and branch_4x (r1484137). "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661433",
            "date": "2013-05-18T21:26:23+0000",
            "content": "Test errors on 4x - 1.6 compliance doesn't like what I did with int/Integer, so jenkins blew up.\n\nAdrien Grand has questions about whether it should use Object and <?> instead of generics.  This is an area where my understanding isn't enough to know the right path. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13661435",
            "date": "2013-05-18T21:38:08+0000",
            "content": "Indeed I think the return type of the method is wrong since the return type of the method cannot be known at compile time. For example a NamedList<NamedList<Integer>> would return NamedList<NamedList<Integer>> if the array length is 0, NamedList<Integer> if the array length is 1 and Integer if the array length is 2. There is a similar problem for intermediate NamedLists which are all casted to a NamedList<T> although it's not their type. So the return type should probably be Object and the intermediate NamedLists should be casted to NamedList<?> instead of NamedList<T>. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661437",
            "date": "2013-05-18T21:53:56+0000",
            "content": "Uwe Schindler I appreciate your assist on the 4x build failure from my commit.  I'd like to commit a slightly different fix in trunk and have the same code in 4x, but I don't feel comfortable with the idea of reverting your commit, especially without your permission.  Could you do that?  I'll be watching, I'm ready with my trunk commit. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13661438",
            "date": "2013-05-18T22:08:19+0000",
            "content": "Just merge it after you committed to trunk, no need to revert. I just wanted to fix the compile failure. You can revert it locally in your checkout and then merge it with your trunk commit and finally commit both changes in one op.\n\nThe test with Integer and int is somehow not really useful, because it does not test NamedList, it just tests autoboxing and the java compiler. I would reduce it to one integer test and use (Integer) as cast. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661648",
            "date": "2013-05-19T20:51:04+0000",
            "content": "On advice from Adrien and Uwe, I have refactored the new method to use an Object return type and <?> instead of generics.  I tried to create a version that uses position data like get(String,int), but that didn't work out as expected, so I gave up on it.\n\nAttaching a cleanup patch against current trunk.  This time everything is fine in 4x as well.  Could I get a fine-tooth-comb review before committing this time? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661653",
            "date": "2013-05-19T21:06:55+0000",
            "content": "The cleanup patch also fixes all warnings at the 1.7 compliance level in trunk.  I don't think the ant build showed any warnings, but they were showing up in Eclipse. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13661682",
            "date": "2013-05-19T22:14:18+0000",
            "content": "Looks much better! The return type seems to be correct. The instanceof check was also fixed to be effective. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13661683",
            "date": "2013-05-19T22:15:05+0000",
            "content": "The cleanup patch also fixes all warnings at the 1.7 compliance level in trunk.\n\nWarnings are disabled in Solr's ANT build because whole Solr is a huge warning  "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661832",
            "date": "2013-05-20T07:41:38+0000",
            "content": "Trunk commit r1484386 to improve and clean up new method.  All tests and precommit passed.  Will run tests and precommit on 4x before backporting tomorrow. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13661883",
            "date": "2013-05-20T10:14:11+0000",
            "content": "All fine now! "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13662225",
            "date": "2013-05-20T18:09:38+0000",
            "content": "On 4x, two solr-core tests failed with 500 server errors during shard splitting.  I've seen this over and over in Jenkins, so I'm pretty sure it's not my changes.  All solr-solrj tests pass fine, and precommit passes.  The branch_4x commit is r1484548. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716800",
            "date": "2013-07-23T18:38:37+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}