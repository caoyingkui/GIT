{
    "id": "SOLR-8583",
    "title": "Apply highlighting to hl.alternateField",
    "details": {
        "components": [
            "highlighter"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "affect_versions": "5.4",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Today, you can configure hl.alternateField for highlighter to display if no snippets were produced from original field. But the contents of the fallback field is output without highlighting the original query terms.\n\nThis issue will cause alternate field to be highlighted with no snippet generation, and still respect max length. You can turn it off using new param hl.highlightAlternate=false. Supported highlighters: Simple, FVH",
    "attachments": {
        "SOLR-8583.patch": "https://issues.apache.org/jira/secure/attachment/12805871/SOLR-8583.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-24T13:39:49+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Attaching a first working patch.\n\nThere is a new param hl.highlightAlternate=true which when enabled will apply the standard highlighter on the alternate field.\n\nWe do this by calling doHighlightingByHighlighter() again on the alternate field, but with some hardcoded parameters: hl.snippets=1&hl.fragsize=Int.MAX. We also set hl.maxAnalyzedChars equal to hl.maxAlternateFieldLength if applicable.\n\nThere is one TODO. To be able to override these params, I needed to clone the SolrParams object on the request and replace it with a ModifialbleSolrParams, and then put back the old. Might not be thread safe... Perhaps a better way is to add a new params argument to doHighlightingByHighlighter?\n\nAlso, I have not tested what happens if people use some other highlighter like FVH. I suspect that other highlighters may not respect hl.pre?\n\nAlso, PostingsHighlighter does not support hl.alternateField at all, and FVH users specify pre and post using hl.tag.pre while Simple highlighter uses hl.simple.pre, so hardcoding which highlighter to use for the fallback field would cause problems with these settings not being in sync.\n\nWhy cannot all highlighters use the same hl.tag.pre/post params?  ",
            "id": "comment-15298178"
        },
        {
            "date": "2016-05-24T14:00:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Perhaps SolrHighlighter abstract class should provide a new method String alternateField(String fieldName) and another abstract String[] alternateText(doc, fieldName, req), so all implementations must relate to the same alternate fallback API? ",
            "id": "comment-15298205"
        },
        {
            "date": "2016-05-24T14:06:24+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "David Smiley you know the code, any guidance on this? ",
            "id": "comment-15298218"
        },
        {
            "date": "2016-05-24T15:25:35+0000",
            "author": "David Smiley",
            "content": "Hi Jan H\u00f8ydahl, thanks for requesting my input.\n\nOverall this looks good.  I do wonder if we want to introduce new options to the most overly configurable component there is when we could change the existing behavior, and perhaps nobody would notice.  In particular only if hl.requireFieldMatch=true (which is normally false) would this make sense, and then we could just simply do it without some new option.  \n\nI think swapping in and out the SolrParams on the request is fine, albeit unfortunate.  Maybe do in try-finally.  And maybe instead of loading up a new ModifiableSolrParams with all of the existing ones, this could be done with SolrParams.wrapDefault?  Or just leave it; it works.\n\nInstead of schema.getFieldOrNull for the alternate field, I think it should just call getField since it should be erroneous to refer to a non-existent field.\n\nWhy cannot all highlighters use the same hl.tag.pre/post params?\n\nI feel your pain!  And now we are stuck with it forever (sarcasm).  Expect to see a new highlighter announced this year, and with it I will propose a bit of unification on the Solr side. ",
            "id": "comment-15298350"
        },
        {
            "date": "2016-05-25T09:28:24+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I do wonder if we want to introduce new options [...]\nAgree. Think I'll keep the param but make it default to true, so people can turn it off to get old behavior\n\nI think swapping in and out the SolrParams on the request is fine, albeit unfortunate. Maybe do in try-finally. And maybe instead of loading up a new ModifiableSolrParams with all of the existing ones, this could be done with SolrParams.wrapDefault? Or just leave it; it works.\nFound a way to avoid swapping. Instead the doHighlightingByXXX() methods take a new argument invariantParams which is then combined with wrapDefault. it works well and is less hacky.\n\nInstead of schema.getFieldOrNull for the alternate field, I think it should just call getField since it should be erroneous to refer to a non-existent field.\nThis caused test failure in existing tests. So I'm keeping old behavior that if fallbackField does not exist, nothing is output at all.\n\nExpect to see a new highlighter announced this year, and with it I will propose a bit of unification on the Solr side.\nLooking forward to that! ",
            "id": "comment-15299739"
        },
        {
            "date": "2016-05-25T09:34:53+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch:\n\n\tAvoid swapping in/out solrParams on the request\n\tUse FVH on the alternate if that is what user has configured\n\tSupport field overrides f.fieldname.hl.* across the board\n\tAdd tests with/without fieldLength\n\tAdd tests with custom pre/post for both simple and fvh\n\tNow enabled by default, have to set hl.highlightAlternate=false to turn off\n\n\n\nStill no support for PostingsHighlighter ",
            "id": "comment-15299747"
        },
        {
            "date": "2016-05-26T06:39:07+0000",
            "author": "David Smiley",
            "content": "Shouldn't this new logic be integrated with alternateField()'s logic?  It's confusing that it's separate, and makes this long method longer with a bit of dejavu logic.  Perhaps this is confounded by the awkwardness induced by the lazy init of re-using fvh & fvhFieldQuery?   Hmmm; maybe we should populate that eagerly if we detect FVH?  That ought to allow to move the code to not repeat our logic... maybe by extracting a method on the majority of the content of the field highlighting loop so we can invoke it for alternate field highlighting.  But again that's currently blocked by the lazy init.\n\nRE passing SolrParams to the doHighlighting* methods, I think the caller should use SolrParams.wrapDefaults instead of making the callee do this.  In this way, the parameter is simply \"params\" without any reference to \"invariant\" terminology/semantics.  BTW I was fine with you calling req.setParams as you had it before \u2013 less gotchas.  As it is, doHighlightingByHighlighter calls methods like getHighlighter and getPhraseHighlighter that don't have this overridden params.  It might not matter but it's problematic in principle at least. ",
            "id": "comment-15301624"
        },
        {
            "date": "2016-05-26T10:40:41+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch incorporating David Smiley's comments more or less:\n\n\n\tWent back to swapping req.params with a wrapDefaults version.\n\tNew method doHighlightingOfField() which gets rid of duplication of code\n\tLazy FVH init by passing around new inner class FvhContainer with members fvh and fieldQuery which can then be altered by methods\n\tMoved highlighting of alternate into method alternateField() to gather all logic in same place\n\tFIeldname loop now looks like this: \n\n// Highlight per-field\nfor (String fieldName : fieldNames) {\n  SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n  Object fieldHighlights; // object type allows flexibility for subclassers\n  fieldHighlights = doHighlightingOfField(schemaField, params, fvhContainer, doc, docId, query, reader, req);\n\n  if (fieldHighlights == null) {\n    fieldHighlights = alternateField(doc, fieldName, req, docId, query, reader, schema, fvhContainer);\n  }\n\n  if (fieldHighlights != null) {\n    docHighlights.add(fieldName, fieldHighlights);\n  }\n} // for each field\n\n\n\n\n\nWhat puzzles me is that the changes should be pure code structure, no functionality change, yet one of the tests started failing. It was the first test of testAlternateSummaryWithHighlighting() setting maxAlternateFieldLength=18. Earlier it returned <simplepre>keyword</simplepost> is only here, but with the last patch I had to change it into <simplepre>keyword</simplepost> is only.\n\nCurrently I'm not able to debug tests in my IntelliJ 16, so I just changed the assert instead of digging further. ",
            "id": "comment-15301927"
        },
        {
            "date": "2016-05-26T11:58:33+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The reason for difference in length is probably in how the fragmenters work. Tried out some more sizes and it changes, although not at the limits I expected for Simple highlighter.\n\nHere's a new patch using only FRAGSIZE in limiting maxAlternateFieldLength, instead of also using MAX_CHARS, as it did not add any value. ",
            "id": "comment-15301976"
        },
        {
            "date": "2016-05-26T14:41:53+0000",
            "author": "David Smiley",
            "content": "This is looking much better \u2013 nice job Jan!  That FvhContainer is perfect; I'm kicking myself for not thinking of that already.\n\nThe test exhibits a problem related to not using hl.requireFieldMatch.  Looking at the test, I see we have a query on tv_text yet we're asking to highlight t_text (falling back on tv_text as alternate).  What we assert is sensible based on these args, but this is an unnatural example.  A more natural example is that the query is on t_text \u2013 the same field that is highlighted.  What should then happen?  Well, we could try and make it work by setting hl.requireFieldMatch=false or we could demand that this be set as a prerequisite to highlighting alternate fields.  Or we could leave the logic be and document that you most likely need to set this to false (what I'm kinda leaning to but I have no conviction).  Note that FVH doesn't support per-field overrides of that setting, so if we try to set that ourselves, then it won't work with FVH.  How to handle this is debatable. In any case, the tests should be expanded to query based on t_text in addition to what it tests now which is good to test too.\n\nMinor quibbles:\n\n\tcan you order the parameters to doHighlightingOfField to have more consistency with the other methods that take much of the same parameters: doc, docId, schemaField, fvhContainer, query, reader, req\n\n ",
            "id": "comment-15302172"
        },
        {
            "date": "2016-05-27T10:32:44+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch incorporating Davids comments:\n\n\tChanged order of params for doHighlightingOfField() and alternateField()\n\tAdded test for hl.requireFieldMatch=true, searching a new field other_t:keyword\n\tAdded test that proves that we get highlighting of fallback field even if there was no match in the field when hl.requireFieldMatch=false\n\n\n\nA more natural example is that the query is on t_text \u2013 the same field that is highlighted. What should then happen?\nIf you search \"keyword\" on t_text you will not get any hits \n\nTo me it looks like the requireFieldMatch works as expected, at least with the default highlighter, so I have not changed any logic. Since it behaves exactly the same way for alternate field as for the main highlight field I'm not sure if we need to document anything here either.\n\nThink this is getting close to committable? ",
            "id": "comment-15303905"
        },
        {
            "date": "2016-05-27T11:34:44+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Added a suggested RefGuide documentation to https://cwiki.apache.org/confluence/display/solr/Standard+Highlighter ",
            "id": "comment-15303954"
        },
        {
            "date": "2016-05-27T14:16:47+0000",
            "author": "David Smiley",
            "content": "This is certainly committable; I think you can commit it as-is if you want, or make further tweaks based on my remaining minor comments.  \n\nYou could move this line (that already existed) higher up so that you needn't re-pull it out in the highlighting alternate code\n\n\tint alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH, 0);\n\twhy the max(18,altFieldLen) ?  18 seems like a magic number.... if someone sets the alt field length to some silly low number then it's there prerogative to do so?\n\n\n\nIf you search \"keyword\" on t_text you will not get any hits \n\nhehe, well, consider dismax with multiple fields.\n\nDocs looks good, basically. I'll correct a small grammatical error. ",
            "id": "comment-15304104"
        },
        {
            "date": "2016-05-28T22:38:53+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "You could move this line (that already existed) higher up so that you needn't re-pull it out in the highlighting alternate code\nDone\n\nwhy the max(18,altFieldLen) ? 18 seems like a magic number....\nFVH requires FRAGSIZE to be at least 18, else there will be an exception. So I just set that as the lower limit. Added a comment line in the code: \n\n// Enforce maxAlternateFieldLength by FRAGSIZE. Minimum 18 due to FVH limitations\n\n\n\nAlso added David Smiley as contributor in CHANGES, thanks for all the feedback!\n\nWill go ahead and commit latest patch now. ",
            "id": "comment-15305667"
        },
        {
            "date": "2016-05-29T08:10:37+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Documentation added to RefGuide. ",
            "id": "comment-15305822"
        },
        {
            "date": "2016-05-30T08:24:36+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 05ce40a0b9da5989613a20f985f9796ed533a8c4 in lucene-solr's branch refs/heads/master from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=05ce40a ]\n\nSOLR-8583: Do not attempt highlight of alternate if it is same as original hl field ",
            "id": "comment-15306393"
        },
        {
            "date": "2016-05-30T08:26:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a460addd2f9511432da7684bd2ee6598025389ea in lucene-solr's branch refs/heads/branch_6x from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a460add ]\n\nSOLR-8583: Do not attempt highlight of alternate if it is same as original hl field\n(cherry picked from commit 05ce40a) ",
            "id": "comment-15306395"
        },
        {
            "date": "2016-05-30T08:27:30+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Yey, commit bot actually started working for me again, after changing my JIRA email address to my @apache.org addr. Looks like there is a bug in the py script that skips commenting if user is not found in JIRA? ",
            "id": "comment-15306396"
        }
    ]
}