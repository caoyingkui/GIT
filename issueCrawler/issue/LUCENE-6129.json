{
    "id": "LUCENE-6129",
    "title": "Assert that terms enums, docs enums and doc values are not leaked across threads",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Terms enums, docs enums and doc values should only be consumed in the thread that they have been acquired in. We could add checks to Asserting* to make sure they never leak?",
    "attachments": {
        "LUCENE-6129.patch": "https://issues.apache.org/jira/secure/attachment/12688655/LUCENE-6129.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14255883",
            "author": "Robert Muir",
            "date": "2014-12-22T16:11:03+0000",
            "content": "+1, this is great. "
        },
        {
            "id": "comment-14255894",
            "author": "Uwe Schindler",
            "date": "2014-12-22T16:33:55+0000",
            "content": "+1 Cool. We could extend this to other stuff in the future, too!\n\nOne small thing: creationThread.getId() != Thread.currentThread().getId() \nI think, the getId() is not really needed. Identtfy of the thread instance itsself is fine, too: creationThread != Thread.currentThread()\nOr was there a reason to handle it like that? "
        },
        {
            "id": "comment-14255905",
            "author": "Adrien Grand",
            "date": "2014-12-22T16:39:45+0000",
            "content": "Thanks for raising this point, I wasn't sure what the appropriate way to compare threads was and forgot to add a nocommit. I'll switch to an identity comparison as suggested. "
        },
        {
            "id": "comment-14255948",
            "author": "Dawid Weiss",
            "date": "2014-12-22T17:19:34+0000",
            "content": "Comparing by reference is enough; no two threads will have the same reference. "
        },
        {
            "id": "comment-14255952",
            "author": "Dawid Weiss",
            "date": "2014-12-22T17:22:21+0000",
            "content": "Btw. this is something that fits ideally with aspectj... You just create a pointcut on any constructor of a given class, add a field to it, and a before pointcut on any public method... It's really a pity it's still a niche technology. "
        },
        {
            "id": "comment-14255976",
            "author": "Uwe Schindler",
            "date": "2014-12-22T17:51:40+0000",
            "content": "Comparing by reference is enough; no two threads will have the same reference.\n\nI think the problem, Adrien was unsure about, was more the inverse: One thread will never have multiple Thread instances, so it is a singleton instance per thread. This is similar to the fact that you can compare Class instances by reference, too.\n\nThe problem with Thread.getId() is that it returns something that may be reused by different thread. So another thread, starting later, may have the same long id. This is unlikely to happen here, but who knows... "
        },
        {
            "id": "comment-14255994",
            "author": "Dawid Weiss",
            "date": "2014-12-22T18:14:27+0000",
            "content": "Yeah, my wording wasn't too accurate. Each thread will have an associated unique instance of the Thread class and this instance is always returned for currentThread(). I actually took some time to look up where this is stated in the jls... and couldn't find any explicit reference. The only one I did find is this one, which I think is equivalent.\n\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html\n\n\"Threads are represented by the Thread class. The only way for a user to create a thread is to create an object of this class; each thread is associated with such an object.\" "
        },
        {
            "id": "comment-14258129",
            "author": "ASF subversion and git services",
            "date": "2014-12-24T09:16:59+0000",
            "content": "Commit 1647750 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1647750 ]\n\nLUCENE-6129: Assert that enums and dv are not leaked across threads. "
        },
        {
            "id": "comment-14258136",
            "author": "ASF subversion and git services",
            "date": "2014-12-24T09:24:30+0000",
            "content": "Commit 1647752 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1647752 ]\n\nLUCENE-6129: Assert that enums and dv are not leaked across threads. "
        },
        {
            "id": "comment-14258137",
            "author": "Adrien Grand",
            "date": "2014-12-24T09:25:38+0000",
            "content": "Committed, thanks all for the help! "
        },
        {
            "id": "comment-14332765",
            "author": "Anshum Gupta",
            "date": "2015-02-23T05:01:48+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}