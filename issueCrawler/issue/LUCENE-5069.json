{
    "id": "LUCENE-5069",
    "title": "Can/should we store NumericField's precisionStep in the index?",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I was just helping a user (buzzkills) on IRC on why NumericRangeQuery was failing to hit the expected docs ... and it was because s/he had indexed with precStep=4 but searched with precStep=1.\n\nThen we wondered if it'd be possible to somehow catch this, e.g. we could maybe store precStep in FieldInfo, and then fail at search time if you use a \"non-matching\" precStep?\n\nI think you can index fine and then search on a multiple of that?  E.g., I can index with precStep=2 but search with precStep=8?  But indexing with precStep=4 and searching precStep=1 won't work ...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-19T19:28:00+0000",
            "content": "I think we can do this.  I had the same in mind, but lots of people were against for schema reasons (you know, no schema info in index). If we save precision step we should also save type like we do for stored fields.\n\nThe search works with multiple of original precision step is correct, btw\n\nWhile indexing, adding a new item with different step should also fail.  The check on searching would be done in the TermsEnum initialization of mtq's getTermsEnum(). ",
            "author": "Uwe Schindler",
            "id": "comment-13688346"
        },
        {
            "date": "2013-06-19T19:36:20+0000",
            "content": "While indexing, adding a new item with different step should also fail.\n\n+1 This motivation is enough to me to store the precision step in the field info. ",
            "author": "Adrien Grand",
            "id": "comment-13688355"
        },
        {
            "date": "2013-06-19T19:42:58+0000",
            "content": "With this info in FieldInfo we could automatically select the right precision step for each atomic reader processed while the query runs.  ",
            "author": "Uwe Schindler",
            "id": "comment-13688359"
        },
        {
            "date": "2013-06-19T20:22:01+0000",
            "content": "\n I had the same in mind, but lots of people were against for schema reasons (you know, no schema info in index). If we save precision step we should also save type like we do for stored fields.\n\nCount me as one of those: I'm worried how the issue has already jumped to this. ",
            "author": "Robert Muir",
            "id": "comment-13688393"
        },
        {
            "date": "2013-06-19T20:25:28+0000",
            "content": "\nWith this info in FieldInfo we could automatically select the right precision step for each atomic reader processed while the query runs. \n\nThe problem is its too late: QueryParser/Query are independent of readers: so they dont know to generate the correct query (e.g. NumericRangeQuery instead of TermRangeQuery) in the first place!\n\nSo this issue misses the forest for the trees, sorry, -1 to a halfass schema that brings all of the problems of a schema and none of the benefits! ",
            "author": "Robert Muir",
            "id": "comment-13688405"
        },
        {
            "date": "2013-06-19T22:50:09+0000",
            "content": "Couldn't the standard flexible query parser be used for that? I know you can configure numeric fields in it before parsing a query. I think there is a wiki about it, just can't find it, maybe Uwe remembers where it is. For now you can take a look at TestNumericQueryParser. ",
            "author": "Adriano Crestani",
            "id": "comment-13688589"
        },
        {
            "date": "2013-06-19T23:25:02+0000",
            "content": "Sure but then you basically have 2 schemas \n\nAlternatively we could argue numericrangequery is something that a QP should never generate anyway: instead maybe QP's should only worry about user intent and generate \"RangeQuery\", which rewrite()s to the correct type...\n\nMy point is we should just think these things thru without introducing additional schema-like things into lucene, since we already have enough of them (Analyzer configuration for example, is a form of schema, maintained by the user). ",
            "author": "Robert Muir",
            "id": "comment-13688631"
        },
        {
            "date": "2017-03-11T12:00:46+0000",
            "content": "We moved to dimensional points for storing inverted numeric values in Lucene. ",
            "author": "Michael McCandless",
            "id": "comment-15906177"
        }
    ]
}