{
    "id": "LUCENE-6744",
    "title": "equals methods should compare classes directly, not use instanceof",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "from a 2015-07-12 email to the dev list from Fuxiang Chen...\n\n\nWe have found some inconsistencies in the overriding of the equals() method\nin some files with respect to the conforming to the contract structure\nbased on the Java Specification.\n\nAffected files:\n1) ConstValueSource.java\n2) DoubleConstValueSource.java\n3) FixedBitSet.java\n4) GeohashFunction.java\n5) LongBitSet.java\n6) SpanNearQuery.java\n7) StringDistanceFunction.java\n8) ValueSourceRangeFilter.java\n9) VectorDistanceFunction.java\n\nThe above files all uses instanceof in the overridden equals() method in\ncomparing two objects.\n\nAccording to the Java Specification, the equals() method must be reflexive,\nsymmetric, transitive and consistent. In the case of symmetric, it is\nstated that x.equals(y) should return true if and only if y.equals(x)\nreturns true. Using instanceof is asymmetric and is not a valid symmetric\ncontract.\n\nA more preferred way will be to compare the classes instead. i.e. if\n(this.getClass() != o.getClass()).\n\nHowever, if compiling the source code using JDK 7 and above, and if\ndevelopers still prefer to use instanceof, you can make use of the static\nmethods of Objects such as Objects.equals(this.id, that.id). (Making use of\nthe static methods of Objects is currently absent in the methods.) It will\nbe easier to override the equals() method and will ensure that the\noverridden equals() method will fulfill the contract rules.",
    "attachments": {
        "LUCENE-6744.patch": "https://issues.apache.org/jira/secure/attachment/12773767/LUCENE-6744.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14701688",
            "author": "Edward Ribeiro",
            "date": "2015-08-18T17:51:10+0000",
            "content": "My two cents: I have always preferred to use instanceof, but was unaware of the potential problems and inconsistencies of using it.  So, for stir up a little bit of discussion, I would like let you with two SO links that discuss this issue in depth:\n\nhttp://stackoverflow.com/questions/596462/any-reason-to-prefer-getclass-over-instanceof-when-generating-equals\n\nhttp://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java/32223#32223\n\nBest,\neddie "
        },
        {
            "id": "comment-14947564",
            "author": "Scott Stults",
            "date": "2015-10-07T20:57:37+0000",
            "content": "Java 7 is the documented minimum language level for Solr, so I think it's okay to use the  Objects class for its static equals(Object a, Object b) method. (While we're at it we might even consider using its hash(Object...) function.)\n\nThat would make ConstValueSource.equals look something like this:\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ConstValueSource that = (ConstValueSource) o;\n    return Objects.equals(constant, that.constant) &&\n        Objects.equals(dv, that.dv);\n  }\n\n\n\nMoreover, if we want to jump into Objects usage with both feet we can change hashCode to this:\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(constant, dv);\n  }\n\n "
        },
        {
            "id": "comment-14948993",
            "author": "Paul Elschot",
            "date": "2015-10-08T17:05:32+0000",
            "content": "There is also LUCENE-6467, perhaps that can be merged here. "
        },
        {
            "id": "comment-15020631",
            "author": "Sachin Rajendra",
            "date": "2015-11-21T19:23:01+0000",
            "content": "Newdev here. Wanted to know if I can do this. Kindly let me know.\nThanks! "
        },
        {
            "id": "comment-15020656",
            "author": "Erick Erickson",
            "date": "2015-11-21T19:57:29+0000",
            "content": "Sure, just make a patch and add it to the JIRA .\n\nHere's the page for getting code, making patches etc.\nhttps://wiki.apache.org/solr/HowToContribute\n\nBefore changing the code, I'd just get to the point where I could run 'ant precommit' and 'ant test' on the checked-out code.\n\nNote, assuming you have things like Java and ant installed, checking out the code and getting the above two commands to run should be just a few minutes. Actually running the precommit or test targets will take quite a whie longer, but you can just watch..... "
        },
        {
            "id": "comment-15021497",
            "author": "Sachin Rajendra",
            "date": "2015-11-23T04:11:06+0000",
            "content": "I have attached the patch. From the above stackoverflow links and comments it seemed getClass is a better option. So I have replaced instanceOf in all the said classes other than SpanNearQuery (which already seemed to be doing the correct thing). \n\nant test and ant precommit have passed. Also I am using the git repo to do this, kindly let me know if that will be any problem.\n\nThanks! "
        },
        {
            "id": "comment-15030393",
            "author": "Sachin Rajendra",
            "date": "2015-11-28T05:41:56+0000",
            "content": "Erick Erickson A gentle reminder to kindly take a look at this. "
        },
        {
            "id": "comment-15030614",
            "author": "Erick Erickson",
            "date": "2015-11-28T18:24:45+0000",
            "content": "Well, a few things:\n\n> I didn't offer to shepherd it through and commit it, just answered a question on how to get the ball rolling.\n\n> There are no tests that unexpectedly fail with the old code and succeed with the new code.\n\n> Most importantly, I'm not a fan of changing behavior to conform to abstract principle without there being a demonstrable problem. In this case the argument is that using instanceof is incorrect and we should switch to getClass() because it's \"more correct\" and \"honors the contract\". This will change behavior and nobody has shown that this current behavior is unintended. And rather than change to getClass(), an alternative is to make either the equals method in the superclass final (OK, this won't work for ValueSource-derived classes) or the entire class that uses instanceof in the equals method final. Are either of those more appropriate? This latter is true for both Bitset classes for instance.\n\nFor example, looking at the history for ConstValueSource.java, Yonik Seeley committed the original code and the equals method used getClass. Then as part of SOLR-1568 he changed it to use instanceof. I don't know why, but I'm not about to undo an intentional change on his part without asking about it.\n\nThe two Bitset classes are final classes, and according to a quote in one of the links mentioned it's OK to use instanceof in the equals method in that case. Perhaps using getClass wouldn't be appropriate here, but I'd like Shai Erera to weigh in.\n\nSo you see where this is going. I want the authors of the code, or at least people who've done maintenance on them to weigh in on why instanceof was used before changing code:\n\nYonik Seeley for\nConstValueSource.java\nDoubleConstValueSource.java\nValueSourceRangeFilter.java\n\nShai Erera for (although these are final classes so it's probably OK but does it matter?) \nFixedBitSet.java\nLongBitSet.java\n\nGrant Ingersoll for\nGeohashFunction.java\nStringDistanceFunction.java\nVectorDistanceFunction.java\n\nI've made too many gratuitous changes that weren't actually fixing something to go down that road without checking \n\nNow, all that  notwithstanding, the patch passes precommit and test so at least it didn't break any explicit tests that depended on the behavior of instanceof and I can argue that if instanceof is intentionally used in preference to getClass then there should be tests that fail if we use getClass.... \n\nAnd don't get me wrong. Assuming the authors of the code are OK, with it I'm perfectly happy to commit this patch... "
        },
        {
            "id": "comment-15033065",
            "author": "Sachin Rajendra",
            "date": "2015-12-01T04:42:18+0000",
            "content": "Hi Erick Erickson,\n\nThanks for the detailed analysis. Good points. I will wait for the authors/maintainers of the respective classes to weigh in then.\n\nThanks! "
        }
    ]
}