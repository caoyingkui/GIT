{
    "id": "SOLR-6667",
    "title": "Dynamic copy fields are considering all dynamic fields, causing a significant performance impact on indexing documents",
    "details": {
        "components": [
            "Schema and Analysis",
            "update"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.8",
        "status": "Closed",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "Result:\nAfter applying a fix for this issue, tests which we conducted show more than 40 percent improvement on our insertion performance.\n\nExplanation:\n\nUsing JVM profiler, we found a CPU \"bottleneck\" during Solr indexing process. This bottleneck can be found at org.apache.solr.schema.IndexSchema, in the following method, \"getCopyFieldsList()\":\n\ngetCopyFieldsList()\nfinal List<CopyField> result = new ArrayList<>();\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.matches(sourceField)) {\n        result.add(new CopyField(getField(sourceField), dynamicCopy.getTargetField(sourceField), dynamicCopy.maxChars));\n      }\n    }\n    List<CopyField> fixedCopyFields = copyFieldsMap.get(sourceField);\n    if (null != fixedCopyFields) {\n      result.addAll(fixedCopyFields);\n    }\n\n\n\nThis function tries to find for an input source field all its copyFields (All its destinations which Solr need to move this field). \nAs you can probably note, the first part of the procedure is the procedure most \u201cexpensive\u201d step (takes O( n ) time while N is the size of the \"dynamicCopyFields\" group).\nThe next part is just a simple \"hash\" extraction, which takes O(1) time. \n\nOur schema contains over then 500 copyFields but only 70 of then are \"indexed\" fields. \nWe also have one dynamic field with  a wildcard ( * ), which \"catches\" the rest of the document fields. \nAs you can conclude, we have more than 400 copyFields that are based on this dynamicField but all, except one, are fixed (i.e. does not contain any wildcard).\n\nFrom some reason, the copyFields registration procedure defines those 400 fields as \"DynamicCopyField \" and then store them in the \u201cdynamicCopyFields\u201d array, \nThis step makes getCopyFieldsList() very expensive (in CPU terms) without any justification: All of those 400 copyFields are not glob and therefore do not need any complex pattern matching to the input field. They all can be store at the \"fixedCopyFields\".\nOnly copyFields with asterisks need this \"special\" treatment and they are (especially on our case) pretty rare.  \n\nTherefore, we created a patch which fix this problem by changing the registerCopyField() procedure.\nTest which we conducted show that there is no change in the Indexing results. Moreover, the fix still successfully passes the class unit tests (i.e. IndexSchemaTest.java).",
    "attachments": {
        "SOLR-6667.patch": "https://issues.apache.org/jira/secure/attachment/12677862/SOLR-6667.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-29T14:49:50+0000",
            "author": "Liram Vardi",
            "content": "Duplicate of SOLR-6666 ",
            "id": "comment-14188410"
        }
    ]
}