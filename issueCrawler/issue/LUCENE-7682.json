{
    "id": "LUCENE-7682",
    "title": "UnifiedHighlighter not highlighting all terms relevant in SpanNearQuery",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Bug",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": []
    },
    "description": "Original text: \"Something for protecting wildlife feed in a feed thing.\"\nQuery is:\n   SpanNearQuery with Slop 9 - in order - \n      1. SpanTermQuery(wildlife)\n      2. SpanTermQuery(feed)\n\nThis should highlight both instances of \"feed\" since they are both within slop of 9 of \"wildlife\". However, only the first instance is highlighted. This occurs with unordered SpanNearQuery as well.  Test below replicates. Affects both the current 6.x line and master.\n\nTest that fits within TestUnifiedHighlighterMTQ:\n\n\n  public void testOrderedSpanNearQueryWithDupeTerms() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"Something for protecting wildlife feed in a feed thing.\", fieldType));\n    doc.add(newTextField(\"id\", \"id\", Field.Store.YES));\n\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    int docID = searcher.search(new TermQuery(new Term(\"id\", \"id\")), 1).scoreDocs[0].doc;\n\n    SpanTermQuery termOne = new SpanTermQuery(new Term(\"body\", \"wildlife\"));\n    SpanTermQuery termTwo = new SpanTermQuery(new Term(\"body\", \"feed\"));\n    SpanNearQuery topQuery = new SpanNearQuery.Builder(\"body\", true)\n        .setSlop(9)\n        .addClause(termOne)\n        .addClause(termTwo)\n        .build();\n\n    int[] docIds = new int[] {docID};\n\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, topQuery, docIds, new int[] {2}).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"Something for protecting <b>wildlife</b> <b>feed</b> in a <b>feed</b> thing.\", snippets[0]);\n    ir.close();\n  }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15860002",
            "date": "2017-02-09T18:59:53+0000",
            "content": "I think I know why some of this is going on - in NearSpansOrdered stretchToOrder handles figuring out the effective position length it needs to search over and advances each spans to the relevant distance for a match. The second span is advanced just enough so the first instance of 'feed' matches (which satisfies the query), and matchEnd is set to that \"feed\" occurrence's end position (and matchWidth updated as well), and it stops after that, so NearSpansOrdered effectively does not see that last occurrence of feed when twoPhaseCurrentDocMatches() is called (from getTermToSpans in PhraseHelper).  This first end position of the first \"feed\" occurrence is what's used instead of the last end position within the slop. ",
            "author": "Michael Braun"
        },
        {
            "id": "comment-15884292",
            "date": "2017-02-25T15:58:40+0000",
            "content": "Are you saying then that there seems to be a bug in NearSpansOrdered (and not any highlighter)?  Presumably the original Highlighter WSTE would be affected as well?  Can we test this?  If we can get to the bottom of this ASAP then we have a chance of getting a fix into v6.4.2. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15884727",
            "date": "2017-02-26T12:08:51+0000",
            "content": "For queries requiring t1 near t2 with enough slop, t1 t1 t2 matches twice, but t1 t2 t2 matches only once. This behaviour was introduced with the lazy iteration, see:\nhttps://issues.apache.org/jira/browse/LUCENE-6537?focusedCommentId=14579537&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14579537\n\nThis is also a problem for LUCENE-7580 where matching term occurrences are scored: there the second occurrence of t2 will not influence the score because it is never reported as a match.\n\nLUCENE-7398 is probably also of interest here.\n\nTo improve highlighting and scoring, we will probably have to rethink how matches of span queries are reported.\nOne way could be to report all occurrences in the matching window, and forward all the sub-spans to after the matching window.\nWould that be feasible? ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15891101",
            "date": "2017-03-01T21:34:47+0000",
            "content": "Should this be marked as a bug for a module other than the highlighter then since it also affects scoring?  ",
            "author": "Michael Braun"
        },
        {
            "id": "comment-15891492",
            "date": "2017-03-02T02:21:00+0000",
            "content": "Michael, don't worry about how you filed it; this happens often \u2013 report the bug and then dig deeper and see it's indirectly caused by something else.  Here, it's not clear is LUCENE-7398 or LUCENE-7580 will fix it; I've been following these issues; we'll see.   Paul Elschot I'm glad you noticed this issue; this is in your area of interest  ",
            "author": "David Smiley"
        }
    ]
}