{
    "id": "LUCENE-4003",
    "title": "FieldCacheRewriteMethod.java is in tests",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I believe FieldCacheRewriteMethod was accidentally moved to the wrong place in r1158697 and should be src/main and not in src/test.\n\nOr is it something that you don't want people to use?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-20T11:10:37+0000",
            "content": "this was added mainly to have a test for doctermsindex's termenum,\nso i think src/test is the correct place. ",
            "author": "Robert Muir",
            "id": "comment-13258144"
        },
        {
            "date": "2012-04-20T11:12:11+0000",
            "content": "I found it because i was looking for a query equivalent to FieldCacheRangeFilter ",
            "author": "selckin",
            "id": "comment-13258145"
        },
        {
            "date": "2012-04-20T11:17:36+0000",
            "content": "Thats a nice point... why do we have fieldcacherangefilter and fieldcachetermsfilter,\nthat only work with certain queries?!\n\nThis is a more general version, that works with any multitermquery...\n ",
            "author": "Robert Muir",
            "id": "comment-13258149"
        },
        {
            "date": "2012-04-20T11:57:16+0000",
            "content": "I like this idea, too.\n\nI would like to move this rewrite method (a little bit refactored, using FixedBitSet instead OpenBitSet) to core, factor out the inner Filter impl to be something like MTQWrapperFilter (maybe include the code in MTQWrapperFilter and only set a boolean in ctor). The rewrite mode would then be similar to FilterRewrite, just with another boolean.\n\nWe can remove FieldCacheRangeFilter.newStringRange() [or at least rewrite it to use this rewrite method], which would be elegant, too. FieldCacheTermsFilter and also the TermsFilter in contrib can go away and we should instead use the sorted terms automaton (I always forget the name, Dawid, sorry) as a new AtomatonQuery subclass. ",
            "author": "Uwe Schindler",
            "id": "comment-13258164"
        },
        {
            "date": "2012-04-20T12:22:20+0000",
            "content": "Feel free to take this one Uwe! \n\n\nFieldCacheTermsFilter and also the TermsFilter in contrib can go away and we should instead use the sorted terms automaton (I always forget the name, Dawid, sorry) as a new AtomatonQuery subclass.\n\nThat one should maybe be separated out... i could help some. Looking at the description of the thing, i think\nin some situations it could be a speedup (imagine some of the terms dont exist at all, etc).\n\nAlso i wonder about the API, it could still have the current add() api, and do the sorting->automaton at the\nend (e.g. rewrite), but imo thats wasteful since the automaton is independent of the reader, so instead maybe it \ncould take Term[] up front.\n\nFinally, a new expert ctor (maybe just protected) should be exposed to AutomatonQuery:\ncurrently you have:\n\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton);\n  }\n\n\n\nBut I would add AutomatonQuery(Term, Automaton, CompiledAutomaton), so that a subclass\ncould pass an already-compiled automaton. This TermsFilter-query would use the alternative\nCompiledAutomaton ctor, passing true for finite, and false for simplify, since we know\nits finite and probably large (so simplification in general would hurt). ",
            "author": "Robert Muir",
            "id": "comment-13258178"
        }
    ]
}