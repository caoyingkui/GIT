{
    "id": "LUCENE-2689",
    "title": "remove NativeFSLockFactory's attempt to acquire a test lock",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.9.4",
            "3.0.3",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "NativeFSLockFactory tries to acquire a test lock the first time a lock is created.  It's the only LF to do this, and, it's caused us hassle (LUCENE-2421,  LUCENE-2688).\n\nI think we should just remove it.  The caller of .makeLock will presumably immediately thereafter acquire the lock and at the point hit any exception that acquireTestLock would've hit.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-10-05T15:53:40+0000",
            "content": "All tests passed for me.\n\nBTW, according to the code, this method was added due to NFS cache issues, but I agree that it's useless to call makeLock just to call obtain() some time later on.  It's almost as if we should make makeLock obtain the lock right away. Is there a reason why we don't do it? Is it essential to separate it into two calls? ",
            "author": "Shai Erera",
            "id": "comment-12918036"
        },
        {
            "date": "2010-10-05T16:27:36+0000",
            "content": "BTW, according to the code, this method was added due to NFS cache issues,\n\nYeah, but, we now recommend SimpleFSLockFactory for NFS... so I think it's OK to remove this, now.\n\nI think the makeLock/obtain/release separation is OK?  Ie a Lock is stateful (eg can have an open file) so it makes sense that we return a real object... ",
            "author": "Michael McCandless",
            "id": "comment-12918059"
        },
        {
            "date": "2010-10-05T16:33:35+0000",
            "content": "Oh sure, we should return an Object upon makeLock. I was just asking whether makeLock should return an already obtained lock. Instead of just \"return new Lock()\", we do \"Lock l = new Lock(); l.obtain();\". That way, if obtain fails, makeLock fails as well. That's sort of what acquireTestLock attempted to achieve, no?\n\nAt any rate, today you can call makeLock, succeed in obtaining the test lock, but later fail on obtaining the real lock. Hence, if we attempt to obtain on makeLock (removing obtain from the API?), we guarantee to the user that this lock is valid and should later be released.\n\nI don't mind if we stay w/ the current API as well. ",
            "author": "Shai Erera",
            "id": "comment-12918061"
        },
        {
            "date": "2010-10-07T08:12:23+0000",
            "content": "Mike - are you going to commit this?\n\nBTW, shouldn't we have handled it as part of LUCENE-2688? One of them is a duplicate of the other I think? ",
            "author": "Shai Erera",
            "id": "comment-12918823"
        },
        {
            "date": "2010-10-07T08:40:11+0000",
            "content": "Sorry yeah I'll commit this shortly.\n\nI'll resolve LUCENE-2688 after I resolve this one... ",
            "author": "Michael McCandless",
            "id": "comment-12918833"
        }
    ]
}