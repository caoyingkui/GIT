{
    "id": "LUCENE-3828",
    "title": "Impossible to delete doc by docId, undeleteAll or setNorm(docId..)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "It appears that there is a major regression in the trunk API. It's no longer possible to:\n1. delete document by internal id (even though you can iterate and retrieve docs by internal ids)\n2. undelete all deleted (but not yet reclaimed) documents\n3. set norm value on a specific document (by internal id)\n\nThe lack of #1 means that you have to use delete by term or by query, which in turn means that now we require that documents have a unique primary key (otherwise you won't be able to delete a particular document that shares terms with other docs). IMHO this item is critical and should be fixed.\n\nThe lack of #2 might not be critical but it still comes handy in some situations.\n\nThe lack of #3 means that you have to update the whole doc if you just want to correct one field, which might be ok for the time being - it's a special case of not having updateable fields in general. But it's quite inconvenient if all you want to do is to adjust a weight of doc without reindexing, something that is possible with 3.x.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-27T17:04:47+0000",
            "content": "Hi Andrzej,\n\n\tI agree with point (1), because it might be handy to delete documents by internal docId. I am not sure why this would not be possible through IndexWriter, but the problem here is the background-merging/merging at all, so with TieredMergePolicy even with a open IndexWriter the docIds can change suddenly. The only way to get stable docIds would be some mode to freeze IndexWriter's merging, get an NRT reader, delete documents using the integer ID on IndexWriter, then unfreeze and commit. IndexReader should of course stay read-only.\n\tThe undeleteAll is in my opinion no longer really needed in trunk, as you can undelete all docs in Lucene 4.0 by simply ignoring liveDocs when executing Querys (e.g. by a FilterAtomicReader that returns null for getLiveDocs()). If we want to readd something like that, it should be on IndexWriter, I think that should be easily possible to undelete from IndexWriter. IndexReader should of course stay read-only.\n\tThe last point is already explained in the other issues related to that: Norms are in 4.0 just DocValues so once we get updateable DocValues we could handle that (of course not via IndexReader). In all cases you can change scoring by changing similarity which is much more flexible in trunk, you can even use a custom docvalues field as norm containing a float instead of the byte. Changing norm values on disk is not really the way to go anymore. And finally again: IndexReader should of course stay read-only.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13217296"
        },
        {
            "date": "2012-02-27T17:15:19+0000",
            "content": "I agree with point (1), because it might be handy to delete documents by internal docId. I am not sure why this would not be possible through IndexWriter, but the problem here is the background-merging/merging at all, so with TieredMergePolicy even with a open IndexWriter the docIds can change suddenly. The only way to get stable docIds would be some mode to freeze IndexWriter's merging, get an NRT reader, delete documents using the integer ID on IndexWriter, then unfreeze and commit. IndexReader should of course stay read-only.\n\nSeems like the best way to deleteByDocId in the IndexWriter is to somehow express it as a custom Query (rather than trying to freeze IndexWriter). ",
            "author": "Yonik Seeley",
            "id": "comment-13217304"
        },
        {
            "date": "2012-02-27T17:40:14+0000",
            "content": "Seems like the best way to deleteByDocId in the IndexWriter is to somehow express it as a custom Query (rather than trying to freeze IndexWriter).\n\nThe problem is IndexWriter executes query deletes per segment (unfortunately with AtomicReaderContext.docBase==0). I wanted to fix that already, but thats not easy with IW. ",
            "author": "Uwe Schindler",
            "id": "comment-13217317"
        },
        {
            "date": "2012-02-27T17:45:48+0000",
            "content": "The problem is IndexWriter executes query deletes per segment (unfortunately with AtomicReaderContext.docBase==0).\n\nAhhhh, so no way to get a true top-level reader for anything that needs to be cross-segment (like joins, grouping, etc.)  Bummer. ",
            "author": "Yonik Seeley",
            "id": "comment-13217324"
        }
    ]
}