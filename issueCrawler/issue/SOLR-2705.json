{
    "id": "SOLR-2705",
    "title": "On reload, IndexWriterProvider holds onto the initial SolrCore it was created with",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "dug up by Yury Kats in SOLR-2326\n\nThe IWP needs to be updated to ref the new core on reload - else if some settings have changed (eg newIndexDir change caused by replication), the IndexWriter will be incorrectly reopened.\n\nThis should really only be an issue when replication and core reloads are involved for the most part.",
    "attachments": {
        "SOLR-2705.patch": "https://issues.apache.org/jira/secure/attachment/12490021/SOLR-2705.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13082531",
            "date": "2011-08-10T18:25:12+0000",
            "content": "Test case + fix "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082538",
            "date": "2011-08-10T18:29:10+0000",
            "content": "The problem is reproducible on the stock multicore example\n\n\n\tconfigure multicore's ReplicationHandler to replicate after startup and commit\n\tlaunch multicore example\n\tindex some example docs\n\task for commits: http://localhost:8983/solr/core0/replication?command=commits\n\treload core0: http://localhost:8983/solr/admin/cores?action=RELOAD&core=core0\n\task for commits again: http://localhost:8983/solr/core0/replication?command=commits\n\tobserve no commits being returned after reload.\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082545",
            "date": "2011-08-10T18:34:07+0000",
            "content": "I'm going to pop this one in now. Ugly little bug. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082547",
            "date": "2011-08-10T18:35:15+0000",
            "content": "Committed - Yury, can you confirm this works for you use case now? "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082549",
            "date": "2011-08-10T18:37:25+0000",
            "content": "Thanks, I will try. \nLooking at the patch, it's not clear to me whether the reloaded core would return proper Commits right after it's been reloaded, or only after the subsequent commit. \nCan Junit check for indexversion/commits to be same right before and right after coreReload? "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082567",
            "date": "2011-08-10T19:06:10+0000",
            "content": "First quick test looks good! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082578",
            "date": "2011-08-10T19:14:01+0000",
            "content": "Sure, likely easy enough to add.\n\nThe current test fails without the fix because the SolrCore is changed on the reload, and replication will sometimes kick off the creation of a new index writer. If it does this using the old SolrCore's settings/fields, as was happening, it might not even be writing to the right index! And it's DeletionPolicy will be the incorrect instance from the old core, and... When the new writer is made, it needs it's info to come from the new SolrCore of course. This bug was nasty - unfortunately we didn't have a test that could tickle it.\n\nSo in this test, after the reload, if you add any further documents, they won't show up in any searches, even after commit.\n\nSo the test adds 10 docs, ensures they are in the index, then adds 2 more docs, and ensures 12 docs are in the index - without the fix it would find 10 rather than 12 - until you restart the server. "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082589",
            "date": "2011-08-10T19:24:45+0000",
            "content": "Tested some more, all is well. Thanks a lot, Mark. This is outstanding support and turn around time from a committer. Hats off!\n\nI saw in the patch that you've added getIndexversion and getCommits, but haven't used them. Would be a shame not to put them to work. It would also ensure that replication works right after a RELOAD, which can be a case in my app, so I'm in favor of testing that angle as well.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082597",
            "date": "2011-08-10T19:29:39+0000",
            "content": "Hmm...so that improved things, but it's not quite the right fix. If multiple SolrCores are going to share the IndexWriterProvider for any length of time, it cannot hold a ref to a SolrCore. It's rare to have multiple reloaded SolrCores up at the same time with a Writer (I know because it wasn't even possible a short time ago without running into IndexLock exceptions), but this should now be fine to do. So a better solution is to pass the SolrCore to the methods of IndexWriterProver. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082860",
            "date": "2011-08-11T02:01:13+0000",
            "content": "I saw in the patch that you've added getIndexversion and getCommits, but haven't used them.\n\nRight - they where good for debugging and I figured I would use them to investigate SOLR-2326.\n\nCan Junit check for indexversion/commits to be same right before and right after coreReload?\n\nI've committed this check. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082861",
            "date": "2011-08-11T02:01:21+0000",
            "content": "Thanks Yury! "
        }
    ]
}