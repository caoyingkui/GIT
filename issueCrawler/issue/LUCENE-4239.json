{
    "id": "LUCENE-4239",
    "title": "Provide access to PackedInts' low-level blocks <-> values conversion methods",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In LUCENE-4161 we started to make the PackedInts API more flexible so that codecs could use it whenever they need to (un)pack integers. There are two posting formats in progress (For and PFor, LUCENE-3892) that perform a lot of integer (un)packing but the current API still has limits :\n\n\tit only works with long[] arrays, whereas these codecs need to manipulate int[] arrays,\n\tthe packed reader iterators work great for unpacking long sequences of integers, but they would probably cause a lot of overhead to decode lots of short integer sequences such as the ones that can be generated by For and PFor.\n\n\n\nI've been looking at the For/PFor branch and it has a PackedIntsDecompress class (http://svn.apache.org/repos/asf/lucene/dev/branches/pforcodec_3892/lucene/core/src/java/org/apache/lucene/codecs/pfor/PackedIntsDecompress.java) which is very similar to oal.util.packed.BulkOperation (package-private), so maybe we should find a way to expose this class so that the For/PFor branch can directly use it.",
    "attachments": {
        "LUCENE-4239.patch": "https://issues.apache.org/jira/secure/attachment/12537270/LUCENE-4239.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-20T00:13:16+0000",
            "content": "First shot. I created two interfaces PackedInts.Decoder and PackedInts.Encoder that expose the BulkOperation methods. Similarly to PackedIntsDecompress, I used java.nio buffers to leverage the byte/int/long buffer conversions (ByteBuffer.asIntBuffer, ...). This is not ready to commit, I still need to run tests to see whether it hurts performance... ",
            "author": "Adrien Grand",
            "id": "comment-13418824"
        },
        {
            "date": "2012-07-20T15:55:08+0000",
            "content": "Thank you Adrien! We'll work easier with this Decoder/Encoder interface.\n\nHowever, This patch isn't passing ant-compile under latest trunk, seems that encoder/decoder methods for Packed64SingleBlockBulkOperation32 are missing? Anyway, we're not using docId up to 32 bits currently, I'll test the performance later.\n\n\n\tWe're still using IntBuffer just because IndexInput/Ouput don't provide a read/writeInts() method . Since we still have to handle IndexInput/Output at upper level, we prefer to use direct int[] rather than IntBuffer now. Actually, we had a patch making PackedIntsDecompress handle int[] instead, you can have a glance at it: http://pastebin.com/euvtBD8P. Performance test show little difference between these two versions, and we should choose a clean & simple impl right?\n\n\n\n\n\tAs for PFor, we may have to encode another small block of ints with packed format when blockSize<128 and blockSize%32 != 0. Current impl will use numBits=8,16,32 to simplify decoder. However, we may consider to use other numBits in near future, I'm afraid this will be a bottleneck when decoder is not hardcoded.\n\n\n\n\nSo... as a second shot, maybe you can provide us methods like: encode(int[] values, long[] blocks, int iterations), decode(long[] blocks, int[] values, int iterations)? \n ",
            "author": "Han Jiang",
            "id": "comment-13419283"
        },
        {
            "date": "2012-07-20T18:31:36+0000",
            "content": "I think we should just commit this current patch onto the block PF branch (https://svn.apache.org/repos/asf/lucene/dev/branches/pforcodec_3892 )?  Then we can iterate on it, from both ends... ",
            "author": "Michael McCandless",
            "id": "comment-13419415"
        },
        {
            "date": "2012-07-20T18:48:55+0000",
            "content": "I think we should just commit this current patch onto the block PF branch ...\n+1, but shall we wait Adrien to fix the missing methods first? ",
            "author": "Han Jiang",
            "id": "comment-13419430"
        },
        {
            "date": "2012-07-21T17:45:40+0000",
            "content": "Han, perhaps the patch didn't apply well on your computer. I just tried to re-apply it and I've had no problem with Packed64SingleBlockBulkOperation32. I'll commit shortly on the pfor branch... ",
            "author": "Adrien Grand",
            "id": "comment-13419893"
        },
        {
            "date": "2012-07-21T18:33:46+0000",
            "content": "Hi Adrien, you're right! There is something wrong with my subversion. I see the codes in your patch, but cannot get that method fully patched. I'll wait for your commit! ",
            "author": "Han Jiang",
            "id": "comment-13419902"
        },
        {
            "date": "2012-07-21T19:44:35+0000",
            "content": "I just committed. Let's see how we can improve it! ",
            "author": "Adrien Grand",
            "id": "comment-13419917"
        },
        {
            "date": "2012-08-07T03:41:22+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429700"
        },
        {
            "date": "2012-08-21T12:07:50+0000",
            "content": "Done as part of LUCENE-3892 which was just merged to trunk (r1375486). ",
            "author": "Adrien Grand",
            "id": "comment-13438635"
        },
        {
            "date": "2013-05-10T10:34:43+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654305"
        }
    ]
}