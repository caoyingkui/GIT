{
    "id": "LUCENE-2100",
    "title": "Make contrib analyzers final",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "1.9,                                            2.0.0,                                            2.1,                                            2.2,                                            2.3,                                            2.3.1,                                            2.3.2,                                            2.4,                                            2.4.1,                                            (3)2.9,                                            2.9.1,                                            3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The analyzers in contrib/analyzers should all be marked final. None of the Analyzers should ever be subclassed - users should build their own analyzers if a different combination of filters and Tokenizers is desired.",
    "attachments": {
        "LUCENE-2100.patch": "https://issues.apache.org/jira/secure/attachment/12427069/LUCENE-2100.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-04T20:03:43+0000",
            "content": "In my opinion this applies to StandardAnalyzer also (or other non-final analyzers in core)\nOtherwise we can never remove the deprecated setOverridesTokenStreamMethod method. ",
            "author": "Robert Muir",
            "id": "comment-12786120"
        },
        {
            "date": "2009-12-04T20:06:42+0000",
            "content": "In my opinion this applies to StandardAnalyzer also (or other non-final analyzers in core)\nI would +1 this! Yet is is still a BW-Compat break and I doubt that we can do this in 3.1. ",
            "author": "Simon Willnauer",
            "id": "comment-12786123"
        },
        {
            "date": "2009-12-04T20:09:05+0000",
            "content": "Simon what do you suggest? Instead of breaking in 3.1, should we add a warning 'this will become final in X.Y, please do not subclass it, because it is not a good idea' ???\n\nUwe did some similar thing with making all the TokenStreams final before but I don't remember what the approach was (maybe just a break) ",
            "author": "Robert Muir",
            "id": "comment-12786125"
        },
        {
            "date": "2009-12-05T20:55:59+0000",
            "content": "Simon what do you suggest? Instead of breaking in 3.1\nI suggest to move the core analyzer into a separate issue and link those. That way we can make progress here as the bw policy is not that strict or people do not care that much than they do for core analyzers. I doubt that many people have subclassed StandardAnalyzer and if they do they might do something wrong though. Lets have two issues so we can drive the discussion independently from contrib.\nMy personal feeling is that we should break it in 3.1 lets see what the other devs object. ",
            "author": "Simon Willnauer",
            "id": "comment-12786499"
        },
        {
            "date": "2009-12-05T21:20:18+0000",
            "content": "This patch marks all analyzers in contrib as final and removes the backwards compat tests checking if subclasses implement reusableTokenStream. ",
            "author": "Simon Willnauer",
            "id": "comment-12786507"
        },
        {
            "date": "2009-12-05T21:40:47+0000",
            "content": "Hi Simon, this sounds good to me if we clean up contrib first. There are not many analyzers in core anyway (is it just StandardAnalyzer that is not final?)\n\nMy motivation for those was so we could get rid of the deprecated setOverridesTokenStreamMethod method. ",
            "author": "Robert Muir",
            "id": "comment-12786512"
        },
        {
            "date": "2009-12-05T21:45:13+0000",
            "content": "There are not many analyzers in core anyway (is it just StandardAnalyzer that is not final?) \nThree of them:\n\n\tStandardAnalyzer\n\tKeywordAnalyzer\n\tPerFieldAnalyzerWrapper\n\n\n\nMy motivation for those was so we could get rid of the deprecated setOverridesTokenStreamMethod method.\n+1 this make me mad each time I look at those analyzers ",
            "author": "Simon Willnauer",
            "id": "comment-12786514"
        },
        {
            "date": "2009-12-07T09:40:39+0000",
            "content": "I plan to commit this until 12/09/09 if nobody objects ",
            "author": "Simon Willnauer",
            "id": "comment-12786838"
        },
        {
            "date": "2009-12-08T18:39:52+0000",
            "content": "will commit this tomorrow if nobody objects ",
            "author": "Simon Willnauer",
            "id": "comment-12787636"
        },
        {
            "date": "2009-12-08T18:51:02+0000",
            "content": "+1 \n\n(just my nitpick of s/TokenStreamsm/TokenStreams/ typo in CHANGES...)\n\nThanks! ",
            "author": "Robert Muir",
            "id": "comment-12787648"
        },
        {
            "date": "2009-12-08T19:17:24+0000",
            "content": "Simon, if you want I will take care of contrib/collation tomorrow. This might make things simpler because  I plan on moving it around if no one objects to the patch: LUCENE-2124 has details. ",
            "author": "Robert Muir",
            "id": "comment-12787675"
        },
        {
            "date": "2009-12-09T13:26:12+0000",
            "content": "Updated to latest trunk ",
            "author": "Simon Willnauer",
            "id": "comment-12788083"
        },
        {
            "date": "2009-12-09T13:31:29+0000",
            "content": "patch looks good to me! ",
            "author": "Robert Muir",
            "id": "comment-12788084"
        },
        {
            "date": "2009-12-09T13:32:55+0000",
            "content": "committed in revision 888799\n\nthanks robert for review ",
            "author": "Simon Willnauer",
            "id": "comment-12788085"
        },
        {
            "date": "2011-05-17T03:44:55+0000",
            "content": "Did somebody implement this for 3.1.0? StandardAnalyzer became final between 3.0.3 and 3.1.0. This is not acceptable. Binary compatibility must be preserved and to be frank I do not give a good goddam how ugly the code inside looks compared to this requirement. ",
            "author": "Esmond Pitt",
            "id": "comment-13034530"
        },
        {
            "date": "2011-05-17T04:13:45+0000",
            "content": "Hi Esmond,\n\nTake a look at the source code for StandardAnalyzer.  Fewer than 50 lines of code there, if you take out the comments.  Copy/paste suddenly seems doable.  Lucene's Analyzers are best thought of as examples.\n\nSteve ",
            "author": "Steve Rowe",
            "id": "comment-13034540"
        },
        {
            "date": "2011-05-17T04:27:47+0000",
            "content": "Steve\n\nThanks. Maybe you could have a look at this. How do you suggest I recode it?\nI wrote this 7 years ago and cannot now remember anything about it. Quite\npossibly the entire thing is now obsolete, but I've been carting it around\nsince before Lucene was even at Apache. All I've ever done is adjust the\nversion number.\n\n==========================================================\npublic class PorterStemAnalyzer extends StandardAnalyzer\n{\n\t/**\n\n\tConstruct a new instance of PorterStemAnalyzer.\n\t */\n\tpublic PorterStemAnalyzer()\n\t{\n\t\tsuper(Version.LUCENE_30);\n\t}\n\n\n\n\t@Override\n\tpublic final TokenStream tokenStream(String fieldName, Reader\nreader)\n\t{\n\t\treturn new PorterStemFilter(super.tokenStream(fieldName,\nreader));\n\t}\n}\n============================================================\n\nEJP\n ",
            "author": "Esmond Pitt",
            "id": "comment-13034544"
        },
        {
            "date": "2011-05-17T04:37:25+0000",
            "content": "Esmond: hi, what you are doing here is exactly the reason why we made it final.\n\nBy subclassing StandardAnalyzer in this way, the indexer is no longer able to reuse tokenstreams, making analysis very slow and inefficient.\n\nThe easiest way to get your PorterStemAnalyzer is to just use EnglishAnalyzer, which does just this.\n\nOtherwise if you really want to do it yourself, do it like this:\n\nAnalyzer analyzer = new ReusableAnalyzerBase() {\n  protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    Tokenizer tokenizer = new StandardTokenizer(...);\n    TokenStream filteredStream = new StandardFilter(tokenizer, ...);\n    filteredStream = new LowerCaseFilterFilter(filteredStream, ...);\n    filteredStream = new StopFilterFilter(filteredStream, ...);\n    filteredStream = new PorterStemFilter(filteredStream, ...);\n    return new TokenStreamComponents(tokenizer, filteredStream);\n  }\n};\n\n\n\nPlease see LUCENE-3055 for more examples and a more thorough explanation.\n\nThe good news is if you implement your analyzer like this, you will see performance improvements! ",
            "author": "Robert Muir",
            "id": "comment-13034549"
        },
        {
            "date": "2011-05-17T04:47:47+0000",
            "content": "Many thanks. \n ",
            "author": "Esmond Pitt",
            "id": "comment-13034555"
        },
        {
            "date": "2013-02-28T14:23:57+0000",
            "content": "A little comment from me, because I just need to use this.\n\nI'm wondering why people in opensource projects so much like to complicate simple things and like to break the rules of OOP, making a lot obstacles for users, like package visibility, almost everything private, and making final classes or methods. This just prevents to quick use the existing code, override class and make anything you want with this the existing code.\n\nIt looks that this is because we should only use existing code, but not to change it any way, right?\n\nI want to use PolishAnalyzer, which is already implemented, and add a simple improvement to this class, but I cannot do it now. I need to copy all existing class to my package and write there the extension.\n\nGreat \"improvement\" for me in this ticket. ",
            "author": "l0co",
            "id": "comment-13589556"
        }
    ]
}