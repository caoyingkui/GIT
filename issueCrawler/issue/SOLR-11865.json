{
    "id": "SOLR-11865",
    "title": "Refactor QueryElevationComponent to prepare query subset matching",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "master (8.0)",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The goal is to prepare a second improvement to support query terms subset matching or query elevation rules.\n\nBefore that, we need to refactor the QueryElevationComponent. We make it extendible. We introduce the ElevationProvider interface which will be implemented later in a second patch to support subset matching. The current full-query match policy becomes a default simple MapElevationProvider.\n\n\n\tAdd overridable methods to handle exceptions during the component initialization.\n\tAdd overridable methods to provide the default values for config properties.\n\tNo functional change beyond refactoring.\n\tAdapt unit test.",
    "attachments": {
        "SOLR-11865.patch": "https://issues.apache.org/jira/secure/attachment/12917652/SOLR-11865.patch",
        "0003-Remove-exception-handlers-and-refactor-getBoostDocs.patch": "https://issues.apache.org/jira/secure/attachment/12917651/0003-Remove-exception-handlers-and-refactor-getBoostDocs.patch",
        "0001-Refactor-QueryElevationComponent-to-introduce-Elevat.patch": "https://issues.apache.org/jira/secure/attachment/12917031/0001-Refactor-QueryElevationComponent-to-introduce-Elevat.patch",
        "0002-Refactor-QueryElevationComponent-after-review.patch": "https://issues.apache.org/jira/secure/attachment/12917032/0002-Refactor-QueryElevationComponent-after-review.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-12T16:40:43+0000",
            "content": "Thanks Bruno.\n\nIt seems there is some\u00a0new/changed behavior (and that's fine):\n\n\n\tcan define the same query more than once and it'll get merged; no longer an exception\n*\u00a0new keepElevationPriority parameter\n\n\n\nComments:\n\n\tI'm a little skeptical about the need for InitializationExceptionHandler, LoadingExceptionHandler, and related complexities.  Maybe you can provide some insight as to why this is needed?\n\tIMO it's unfortunate that ElevationProvider is mutable and has the makeImmutable method.\u00a0 How about createElevationProvider accept the elevationBuilderMap?\u00a0 And does ElevationProvider.size need to be there either? And does getElevationForQuery need to throw an IOException? With such simplifications, we could then simply use JDK Function<String,Elevation>.\u00a0 Not that using the JDK one is a big deal (and it's debatable too) but my point is more about simplifying.\n\tthe indentation around line ~671 (contents of the for loop) is messed up; it made me misinterpret the intent of the the logic\n\tMy preference is to not have javadoc comments like \"<p>Can be overridden by extending this class.</p>\" because \"protected\" access implies this, thus it's redundant.\n\tsuggest change comparator docVal (~line 1318) to use getOrDefault\u00a0\n\tsuggest to use localBoosts.addAll(boosted.keySet()); at line ~661 instead of manual looping  (IntelliJ helpfully pointed this out)\n\tin parseExcludedMarkerFieldName and parseEditorialMarkerFieldName\u00a0 I see initArgs.get being called with a default value, yet it's followed up with a check for null to then use the default value.\u00a0 This seems quite redundant since the two-arg SolrParams.get already does that.\u00a0 I don't like the empty string check (this is for a config file, not a request parameter where a better argument could be made for it) \u2013 I'd much prefer something tighter/simpler.\u00a0 It appears SOLR-2037 introduced this but it was a minor detail that wasn't discussed in the comments.\u00a0 Removing this would technically be a back-compat break but it's minor enough and so easy for someone to fix that I think it's fine.\n\tInstead of IndexedValueProvider, which we don't even expose, lets just use a UnaryOperator<String>?  and then use a Java 8 method reference when needed instead of declaring QueryElevationComponent.indexedValueProvider ?\n\tMaybe make the constructor of ElevatingQuery protected so it could be subclassed.  Likewise for Elevation.\n\n\n\nBTW this code pattern\u00a0 seen.contains(id) == false is often written as-such deliberately instead of\u00a0!seen.contains(id) because it reads clearer (and takes no additional lines of code).  Bugs have been missed then found because of that style.  There is no code standard for it in Lucene or Solr but I recommend against modifying existing lines that made one choice or the other as part this cleanup. ",
            "author": "David Smiley",
            "id": "comment-16395483"
        },
        {
            "date": "2018-03-12T16:46:50+0000",
            "content": "BTW one thing that I'm not sure about is if it might make sense to move the subsetMatch flag from the ElevatingQuery to Elevation; and then we don't need an ElevatingQuery (just use the query String as before).  But I'm not sure.  The current design allows to elevate a query with and without subsetMatch with separate rules... I think?  If that's pertinent then nevermind. ",
            "author": "David Smiley",
            "id": "comment-16395493"
        },
        {
            "date": "2018-03-30T08:15:15+0000",
            "content": "1-\u00a0InitializationExceptionHandler & LoadingExceptionHandler:\n\nAt Salesforce (i.e. in a multi-tenant context) we\u00a0allow each organization admin to update the list of elevation rules dynamically.\u00a0When\u00a0some rules are updated, the core corresponding to the organization is updated to reload the elevation rules XML. It is important to note that the organization admin - the person who defines the elevation rules - is not a Solr admin expert. He needs to get clear feedback on any error that may prevent the rules to be loaded. The XML rules are more considered as dynamic config rather than static config.\n\nIn its original version, the QueryElevationComponent simply throws an exception.\n\nIn this new version, it differentiates the error cause and lets an extending class (e.g. specific Salesforce extension) override the loading exception and take appropriate actions (logging, warning, etc) instead of simply throwing the Solr exception. ",
            "author": "Bruno Roustant",
            "id": "comment-16420272"
        },
        {
            "date": "2018-03-30T08:57:14+0000",
            "content": "2- ElevationProvider\u00a0should\u00a0be immutable and simplified:\n\nGood point. createElevationProvider() accepts the elevationBuilderMap. getElevationForQuery() does not throw IOException.\n\nElevationProvider.size is used by tests to verify the number of parsed rules. I added @VisibleForTesting annotation. ",
            "author": "Bruno Roustant",
            "id": "comment-16420300"
        },
        {
            "date": "2018-03-30T09:00:19+0000",
            "content": "3- The indentation around line ~671 (contents of the for loop) is messed up.\n\nI didn't change that part. I'll try to fix the indentation. ",
            "author": "Bruno Roustant",
            "id": "comment-16420301"
        },
        {
            "date": "2018-03-30T09:00:51+0000",
            "content": "4- No \"<p>Can be overridden by extending this class\".\n\nSure. Removed. ",
            "author": "Bruno Roustant",
            "id": "comment-16420302"
        },
        {
            "date": "2018-03-30T09:05:53+0000",
            "content": "5- Change comparator docVal (~line 1318) to use getOrDefault.\n\nI didn't change that. Fixed. ",
            "author": "Bruno Roustant",
            "id": "comment-16420308"
        },
        {
            "date": "2018-03-30T09:12:38+0000",
            "content": "6- Use\u00a0localBoosts.addAll(boosted.keySet());\u00a0at line ~661 instead of manual looping.\n\nAgain, I didn't change that (and I didn't want to touch existing code without reason).\n\nI fixed by directly removing localBoosts which was an exact copy of boosts.keySet() (boots parameter is a map). ",
            "author": "Bruno Roustant",
            "id": "comment-16420311"
        },
        {
            "date": "2018-03-30T09:16:11+0000",
            "content": "7- In parseExcludedMarkerFieldName and parseEditorialMarkerFieldName.\n\nRemoved the if () block. ",
            "author": "Bruno Roustant",
            "id": "comment-16420313"
        },
        {
            "date": "2018-03-30T09:23:04+0000",
            "content": "8- Use a UnaryOperator<String> instead of\u00a0IndexedValueProvider.\n\nGood point. It is still clear with less code. ",
            "author": "Bruno Roustant",
            "id": "comment-16420317"
        },
        {
            "date": "2018-03-30T09:24:12+0000",
            "content": "9- Make the constructor of ElevatingQuery protected.\n\nDone. ",
            "author": "Bruno Roustant",
            "id": "comment-16420319"
        },
        {
            "date": "2018-03-30T09:27:40+0000",
            "content": "10-\u00a0seen.contains(id) == false.\n\nI didn't know this Lucene practice. It explains why I see this strange construct.\n\n\"I recommend against modifying existing lines\" - that's what I tried (see points 3,5,6 above) and I thought this \"!seen.contains(id)\" was tiny and harmless. And that's a warning highlighted by IntelliJ by the way  ",
            "author": "Bruno Roustant",
            "id": "comment-16420322"
        },
        {
            "date": "2018-03-30T09:40:22+0000",
            "content": "11-\u00a0subsetMatch flag\u00a0in\u00a0ElevatingQuery.\n\nYes, the idea is to support some queries with subset match, and other without. This will be supported by the next ElevationProvider in the next patch. ",
            "author": "Bruno Roustant",
            "id": "comment-16420329"
        },
        {
            "date": "2018-03-30T15:21:40+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n -1 \n  patch  \n   0m  4s \n  SOLR-11865 does not apply to master. Rebase required? Wrong Branch? See https://wiki.apache.org/solr/HowToContribute#Creating_the_patch_file for help.  \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11865 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12917017/0002-Refactor-QueryElevationComponent-after-review.patch \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/29/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16420604"
        },
        {
            "date": "2018-03-30T15:32:43+0000",
            "content": "David Smiley I uploaded a new patch. Is it better now? ",
            "author": "Bruno Roustant",
            "id": "comment-16420620"
        },
        {
            "date": "2018-03-30T19:34:05+0000",
            "content": "Thanks for the update; it's looking nicer.  The delta patch was helpful (thanks!) but \"Yetus\" didn't know what to make of it.  The SOLR-XXXX.patch file should be a standard diff or git formap-patch.  The one I see right now is definitely not that; it's only 2 lines.\n\n(getBoostDocs):\n6- Use localBoosts.addAll(boosted.keySet()); at line ~661 instead of manual looping.\n\nI believe the \"localBoosts\" var is a copy intentionally because the algorithm that follows will remove items to reduce the lookups in 1/2.  See iter.remove().  In your recent change, you're manipulating the incoming argument from the parameter (not good).\n\nI propose the following rewrite of this method.  Whoever first wrote it didn't know about SolrIndexSearcher.lookupId(...).\n\n\npublic static IntIntHashMap getBoostDocs(SolrIndexSearcher indexSearcher, Map<BytesRef, Integer>boosted, Map context) throws IOException {\n\n    IntIntHashMap boostDocs = null;\n\n    if(boosted != null) {\n\n      //First see if it's already in the request context. Could have been put there\n      //by another caller.\n      if(context != null) {\n        boostDocs = (IntIntHashMap) context.get(BOOSTED_DOCIDS);\n      }\n\n      if(boostDocs != null) {\n        return boostDocs;\n      }\n\n      //Not in the context yet so load it.\n      boostDocs = new IntIntHashMap(boosted.size()); // docId to boost\n      for (Map.Entry<BytesRef,Integer> keyAndBoostPair : boosted.entrySet()) {\n        final BytesRef uniqueKey = keyAndBoostPair.getKey();\n        long segAndId = indexSearcher.lookupId(uniqueKey); // higher 32 bits == segment ID, low 32 bits == doc ID\n        if (segAndId == -1) { // not found\n          continue;\n        }\n        int seg = (int) (segAndId >> 32);\n        int localDocId = (int) segAndId;\n        final IndexReaderContext indexReaderContext = indexSearcher.getTopReaderContext().children().get(seg);\n        int docId = indexReaderContext.docBaseInParent + localDocId;\n        boostDocs.put(docId, keyAndBoostPair.getValue());\n      }\n    }\n\n    if(context != null) {\n      //noinspection unchecked\n      context.put(BOOSTED_DOCIDS, boostDocs);\n    }\n\n    return boostDocs;\n  }\n\n\n\nI'll respond to the other parts in another comment. ",
            "author": "David Smiley",
            "id": "comment-16420858"
        },
        {
            "date": "2018-03-30T20:49:34+0000",
            "content": "Thanks by the way for entertaining some further improvements to the code that aren't essential. I'm aware some of my feedback is to code you didn't write. It's spring-cleaning time \n\n\tsplitQueryTermsWithAnalyzer: Could be improved to use try-with-resources style since TokenStream is Closeable\n\n\n\n\n\tRE == false vs \"!\", \"And that's a warning highlighted by IntelliJ by the way\": I know; IntelliJ has a ton of things it warns about in its default configuration. It goes a bit far IMO; a default config should be very conservative. I've tweaked my warning settings a lot (some on, some off).\n\n\n\n\n\tRE exceptions: I get that you want to expose more insight into what went wrong. I'm just wondering if the stock QueryElevationComponent could be a bit simpler complexity-wise and still accommodate your needs via another mechanism. I like trying to simplify where possible. What if we do away with this LoadingExceptionHandler as a separate class and instead have protected methods directly on QueryElevationComponent?\n\n\n\nAnd that's it. ",
            "author": "David Smiley",
            "id": "comment-16420920"
        },
        {
            "date": "2018-03-30T23:35:40+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n -1 \n  patch  \n   0m 11s \n  SOLR-11865 does not apply to master. Rebase required? Wrong Branch? See https://wiki.apache.org/solr/HowToContribute#Creating_the_patch_file for help.  \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11865 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12917033/SOLR-11865.patch \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/30/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16421062"
        },
        {
            "date": "2018-04-05T07:44:15+0000",
            "content": "New delta patch with the modifications mentioned.\n\nEventually I'll squash the commits to produce a single patch that should be supported by \"Yetus\" (currently I simply use git format-patch and it produces three separate patch files for three commits). ",
            "author": "Bruno Roustant",
            "id": "comment-16426589"
        },
        {
            "date": "2018-04-05T12:41:32+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n -1 \n  patch  \n   0m  4s \n  SOLR-11865 does not apply to master. Rebase required? Wrong Branch? See https://wiki.apache.org/solr/HowToContribute#Creating_the_patch_file for help.  \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11865 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12917652/SOLR-11865.patch \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/37/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16426847"
        },
        {
            "date": "2018-04-05T21:34:33+0000",
            "content": "This is looking very good Bruno.  You even hid InitializationException.  I think I can take it from here but would like some input.  I can throw up another patch.  I've already tweaked some formatting locally (e.g. bad or wrong indentation).\n\n\tWhy make it possible for a subclass to change the default values of settings?  I'm looking at the getters you added referring to some constants and it seems needless.  These are just defaults after all; can't you simply be explicit if the default doesn't suit you?\n\tRE keepElevationPriority, I saw you added it to QueryElevationParams but realized you're not actually using it as a parameter, you're using it as a config file setting name (which we don't call parameters in Solr as it's ambiguous).  Therefore it goes to a constant in QEC.\n\t\n\t\tI want to ensure I understand this setting better.  I did read the docs you put on the constant definition.  So it requires forceElevation.  If this is configured to false, will the sort order of the elevated documents be not only at the top but then sorted by the sort parameter coming into Solr?  And if true it's in config-order?  Maybe this could be named forceElevationWithConfigOrder?  This way it's name suggests a more clear relationship with forceElevation.\n\t\n\t\n\n\n\nBTW I'm going to add a bit of docs to the ref guide (file the-query-elevation-component.adoc) here.   ",
            "author": "David Smiley",
            "id": "comment-16427637"
        },
        {
            "date": "2018-04-24T15:30:08+0000",
            "content": "Sorry for the delay.\n\nYes, if you can take it from here, that would be awesome!\n\n\tGetters for defaults: you're right, there is no need. Please remove them.\n\tkeepElevationPriority as a constant in QEC: good point.\n\tkeepElevationPriority meaning:\n Actually the comment is not right, maybe the sorting has changed since the time I wrote this comment. I don't think it is linked anymore\u00a0to forceElevation since the ElevationComparatorSource can be added as a SortField even if\u00a0forceElevation=false when one sorts by score.\n The point is\n\n\n\n\n\twith\u00a0keepElevationPriority=true, the behavior is unchanged, the elevated documents (on top) are sorted by the order of the elevation rules and elevated ids in the config file.\n\twith\u00a0keepElevationPriority=false, the behavior changes,\u00a0the elevated documents (still on top) are in any order (this will allow the use of the efficient but unsorted TrieSubsetMatcher in the other patch), and they may be re-ordered by other sort fields\u00a0\n\n ",
            "author": "Bruno Roustant",
            "id": "comment-16450065"
        },
        {
            "date": "2018-04-25T18:47:36+0000",
            "content": "Ok if keepElevationPriority works that way, I think there could be a clearer name. \u00a0Perhaps allowElevatedDocsToBeResorted\u00a0or sortElevatedDocs ?  (defaults to false; current behavior),\nor useConfiguredElevatedOrder (default to true)?\n\nI'm going to add a test for this behavior.  It seems like a useful feature, especially with forceElevation. ",
            "author": "David Smiley",
            "id": "comment-16452868"
        },
        {
            "date": "2018-04-27T13:52:47+0000",
            "content": "Actually the TrieSubsetMatcher introduced by the next patch does not support keepElevationPriority. If\u00a0keepElevationPriority=true, this matcher is replaced by another, which keeps the order but which is less efficient. And this is done at component initialization time, in the inform() method (in loadElevationProvider()).\n\nSo I think it cannot be a query param because it is fixed in the data structure at initialization time. ",
            "author": "Bruno Roustant",
            "id": "comment-16456470"
        },
        {
            "date": "2018-04-27T15:12:33+0000",
            "content": "I deleted my previous comment as I did it from an old/wrong account accidentally.\u00a0\n\nI said:\nMaybe we should make it a query param, which is more convenient & useful. The spots that load the config that examine this boolean could track the order (e.g. using LinkedHashSet) even if ultimately the order might not be needed? It seems like not a big deal to track the order potentially needlessly but you might have a better sense of this.\nYou said:\nActually the TrieSubsetMatcher introduced by the next patch does not support keepElevationPriority.\u00a0\nWell I think it's okay to have another parameter that is ignored if another parameter is set. \u00a0This would still be the case even if it wasn't a runtime parameter! \u00a0(it's just a matter of where it's specified)\n\nIn general, Solr has been trying to use more runtime parameters where possible & appropriate to\u00a0avoid the requirement to modify configs. \u00a0It's good for experimentation, and makes tests easier to write (no new config file to put in the tests). ",
            "author": "David Smiley",
            "id": "comment-16456587"
        },
        {
            "date": "2018-05-04T22:04:28+0000",
            "content": "Patch still in progress but want to mention some things.\n\n\tNew name useConfiguredOrderForElevations. \u00a0Documentation language: \"When multiple docs are elevated, should their relative order be the order in the configuration file or should\u00a0they be subject to whatever the sort criteria is? True by default.\"\n\tFound a way to entirely skip using ElevationComparatorSource if the Elevation obj\u00a0has no elevations (maybe just has exclusions)\n\tI was looking in detail at ElevationComparatorSource that led me to some observations that I'd like your input on:\n\t\n\t\tBytesRef[] termValues is the \"value half of the map\". \u00a0It's the BytesRef version of the ID values aligned with ordSet (doc ID) slots. \u00a0But the reader of these (docVal()) has to do additional work to look it up in elevation.priorities to get an int. \u00a0I think this could be replaced with an int[] populated with the pertinent int priorities when doSetNextReader is called (which is where ordSet & termValues is init'ed right now). \u00a0This int[] would be named simply priorities.\n\t\tElevation.elevatedIds could be a Map<String,Integer> that maps directly to the priority from the uniqueKey val (thus removing the need for a separate \"priorities\" map), and then in doSetNextReader we can iterate on the Map.Entry and needn't do another lookup.\n\t\tI wonder if the String IDs in Elevation, both elevated and excluded, ought to be BytesRefs to clarify that they are raw indexed form\u00a0IDs? \u00a0(consider when uniqueKey is a long) \u00a0The current String form is suggestive that they are the surface form IDs, yet they aren't since they've already been mapped with FieldType.readableToIndexed. \u00a0Or alternatively keep the surface form IDs and translate them at a later time. \u00a0I think we might as well do them eagerly as it saves work during search, even if it's easy work, and again it clarifies the type.\n\t\t\n\t\t\tFieldType.readableToIndexed(String) ought to be deprecated in lieu of readableToIndexed(CharSequence, BytesRefBuilder).\n\t\t\n\t\t\n\t\tI guess it's debatable where to actually apply the key String => indexed form (String of BytesRef)... we're doing it in Elevation's constructor with a passed in UnaryOperator thingy but it could just as easily be done very late in, say, ElevationComparatorSource.doSetNextReader, or perhaps very early right after we read it from the XML. I suppose it's fine as-is.\n\t\n\t\n\n ",
            "author": "David Smiley",
            "id": "comment-16464442"
        },
        {
            "date": "2018-05-15T15:42:39+0000",
            "content": "Great! I agree with all your points David Smiley.\n\nIndeed the\u00a0String IDs in Elevation would be clearer as BytesRefs. And I vote to apply the\u00a0key String => indexed form as early as possible, if the code remains small. ",
            "author": "Bruno Roustant",
            "id": "comment-16476032"
        },
        {
            "date": "2018-05-17T21:28:18+0000",
            "content": "Bruno, can you please use a GitHub PR (referencing this issue in the title so that it auto-links) to push your commits/patches? \u00a0It's way easier to do back & forth code review using GitHub. \u00a0I have a new patch but I'd rather apply it to a feature-branch/PR where you (and anyone else) can see the deltas more easily. ",
            "author": "David Smiley",
            "id": "comment-16479751"
        },
        {
            "date": "2018-05-17T21:35:07+0000",
            "content": "BTW random comment; it seems inconsistent that MapElevationProvider.buildElevationMap will throw an exception of the elevation is duplicated, yet earlier we merge elevations. \u00a0Is there a rhyme/reason to the disparity? \u00a0It could be merged here again, as is done earlier. ",
            "author": "David Smiley",
            "id": "comment-16479764"
        },
        {
            "date": "2018-05-31T16:13:48+0000",
            "content": "You're right\u00a0MapElevationProvider.buildElevationMap should merge in this case (which indeed should not happen since they have been merged earlier).\n\nI have created the GitHub PR (https://github.com/apache/lucene-solr/pull/390),\u00a0to be enhanced with all your improvements. ",
            "author": "Bruno Roustant",
            "id": "comment-16496788"
        },
        {
            "date": "2018-06-05T15:57:43+0000",
            "content": "Here's our final patch. My CHANGES.txt will be as follows:\n\nNew Features:\n\n\tThe QueryElevationComponent now has a useConfiguredElevatedOrder setting. When multiple docs are elevated, this specifies wether their relative order should be the order in the configuration file or if not then should they be subject to whatever the sort criteria is.\n\n\n\nOther:\n\n\tExtensive refactoring of internals of the QueryElevationComponent to allow for better customization. Affects tie-ins with CollapseQParser & marker doc transformers\u00a0that honor QEC's adjustments.\n\n ",
            "author": "David Smiley",
            "id": "comment-16502002"
        },
        {
            "date": "2018-06-06T11:33:39+0000",
            "content": "David Smiley can you change those private members to protected in QueryElevationComponent? All those members such as initArgs and queryAnalyzer but also the methods should be extendible.  ",
            "author": "Markus Jelsma",
            "id": "comment-16503164"
        },
        {
            "date": "2018-06-06T14:17:50+0000",
            "content": "Okay Markus... though I hesitate to make every member protected/public so I'll upload something and you can tell me if it meets your purposes.\n\nBruno Roustant while looking at analyzeQuery/getAnalyzedQuery I noticed a change in behavior.  First I was wondering what we changed, and then I saw what seems to me a pointless method extraction splitQueryTermsWithAnalyzer so I inlined it (it's not like analyzeQuery was so long as to warrant that).  Then I thought I liked the older code here better \u2013 no need to build up the query terms into an ArrayList; the StringBuilder was totally fine.  Then I looked closer at the \"QUERY_EXACT_JOINER\" and saw it joins by a space.  Well the current code does not do this.  I think this will result in a change of behavior.  The current QueryElevationComponent behavior will look at two queries, \"foo bar\" and \"foobar\" and come up with the same result for both.  If there are two configured elevated queries this way, I think this will result in an error; which I don't care about to retain either way.  More importantly, at search time, a query for \"foo bar\" could match a configured elevated query \"foobar\".  Your change here will not do this.  Right?  So I think we can keep the current code/behavior and make protected so you can subclass as you need to. ",
            "author": "David Smiley",
            "id": "comment-16503360"
        },
        {
            "date": "2018-06-06T15:11:16+0000",
            "content": "Updated patch with more visibility.  I reverted some of analyzeQuery logic to behave as before.  Interestingly this added space was reflected in a test but I had not caught it before.  I removed the static from this method (to be like before) and made MapElevationProvider non-static so it could access the outer analyzeQuery instance method (which can be overridden, unlike a static method). ",
            "author": "David Smiley",
            "id": "comment-16503428"
        },
        {
            "date": "2018-06-06T15:34:07+0000",
            "content": "I am not sure this will work for me right away, but maybe i can get things to work via new API's. So i am fine with this for now. Thanks! ",
            "author": "Markus Jelsma",
            "id": "comment-16503459"
        },
        {
            "date": "2018-06-09T15:32:34+0000",
            "content": "Commit a06256ccee8742eaf47ac1f2c12ec8e68a70a163 in lucene-solr's branch refs/heads/master from broustant\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a06256c ]\n\nSOLR-11865: QueryElevationComponent changes\n\n\tnew useConfiguredElevatedOrder setting\n\tmore extensible (customizable via subclass)\n\t\n\t\tElevationProvider\n\t\thandleInitializationException with cause enum\n\t\n\t\n\tuse BytesRef for uniqueKey ID pervasively instead of String.\n\tElevatorComparatorSource now reuses getBoostedDocs logic\n\tsetSort will short-circuit if there are no elevated Ids\n\textensive refactoring and affects some interrelated components\n\n ",
            "author": "ASF subversion and git services",
            "id": "comment-16507037"
        },
        {
            "date": "2018-06-09T15:34:26+0000",
            "content": "Commit 62d1fc3eef6c4c4bf278e592deb0521602f1f248 in lucene-solr's branch refs/heads/branch_7x from broustant\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=62d1fc3 ]\n\nSOLR-11865: QueryElevationComponent changes\n\n\tnew useConfiguredElevatedOrder setting\n\tmore extensible (customizable via subclass)\n\t\n\t\tElevationProvider\n\t\thandleInitializationException with cause enum\n\t\n\t\n\tuse BytesRef for uniqueKey ID pervasively instead of String.\n\tElevatorComparatorSource now reuses getBoostedDocs logic\n\tsetSort will short-circuit if there are no elevated Ids\n\textensive refactoring and affects some interrelated components\n\n\n\nCloses #390\n(cherry picked from commit a06256c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16507042"
        },
        {
            "date": "2018-06-09T15:51:14+0000",
            "content": "Thanks for the contribution Bruno!\nYou can close the PR now; it seems I can't do that. ",
            "author": "David Smiley",
            "id": "comment-16507052"
        },
        {
            "date": "2018-06-19T15:47:53+0000",
            "content": "Thanks for your incredible help David Smiley!\n\nClosing this PR. ",
            "author": "Bruno Roustant",
            "id": "comment-16517247"
        },
        {
            "date": "2018-06-19T15:48:21+0000",
            "content": "Work done ",
            "author": "Bruno Roustant",
            "id": "comment-16517249"
        },
        {
            "date": "2018-06-20T19:02:16+0000",
            "content": "To clarify, the \"PR\" (GitHub) is what I cannot \"close\"... albeit I can indirectly if I put the magic words into a commit message but it's easy to forget that and I forgot.\u00a0 I can change the workflow state of Jira (which is not referred to as a PR)\u00a0and I did.\u00a0 Issues go to \"Resolved\" state\u00a0upon a completion\u00a0(not closed).\u00a0 Closure happens when the issue is released to the next version, performed upon a release in bulk (without issue/Jira notification)\u00a0by the release manager.\u00a0 They shouldn't be closed beforehand, which you did but I simply put it back to Resolved state just now \u2013 no big deal \u2013 I don't think there's any consequence. ",
            "author": "David Smiley",
            "id": "comment-16518497"
        }
    ]
}