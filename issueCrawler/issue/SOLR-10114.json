{
    "id": "SOLR-10114",
    "title": "Reordered delete-by-query can delete or omit child documents",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "4.5",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "It looks like when a block of documents is indexed, child documents get no _version_ field.  This means (among other potential issues) that a delete-by-query that is reordered will cause matching child documents to be deleted.  DBQ normally prevents deleting newer docs by including a restriction on _version_, which doesn't work for anything lacking that field.  Re-ordered delete-by-term of any child docs would also be affected (although it should be a much rarer issue.)\n\nThe leading candidate for a fix is to use the exact same _version_ for all child docs.",
    "attachments": {
        "SOLR-10114.patch": "https://issues.apache.org/jira/secure/attachment/12852617/SOLR-10114.patch",
        "SOLR-10114-2.patch": "https://issues.apache.org/jira/secure/attachment/12853050/SOLR-10114-2.patch",
        "SOLR-10114-test-cleanup.patch": "https://issues.apache.org/jira/secure/attachment/12853032/SOLR-10114-test-cleanup.patch",
        "SOLR-10114-validation.patch": "https://issues.apache.org/jira/secure/attachment/12852577/SOLR-10114-validation.patch",
        "SOLR-10114-3.patch": "https://issues.apache.org/jira/secure/attachment/12853120/SOLR-10114-3.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-10T15:04:57+0000",
            "content": "Yonik Seeley, confirmed by running parallel insert/updates and deletes of documents with child documents. Replication gets out of sync eventually.  ",
            "author": "Mano Kovacs",
            "id": "comment-15861377"
        },
        {
            "date": "2017-02-10T19:50:56+0000",
            "content": "Great!\nA simple non-concurrent way to reproduce would be to fake reordering (by faking updates from a leader).\nLowest level examples of this are in TestRecovery.testLogReplayWithReorderedDBQ\nor at slightly higher levels in PeerSyncTest and others (look for users of DistribPhase.FROMLEADER for more examples) ",
            "author": "Yonik Seeley",
            "id": "comment-15861763"
        },
        {
            "date": "2017-02-13T17:06:22+0000",
            "content": "Yonik Seeley, thanks for the hints, makes it much easier to test it. I am preparing the tests first, then make them pass with a fix. I was wondering, if the fix is to store the version with the child docs, it requires reindexing to resolve the issue. I was thinking of adding another iteration to fetch parent version for childdocs without version. It might have significant performance impact on DBQ, though. ",
            "author": "Mano Kovacs",
            "id": "comment-15863988"
        },
        {
            "date": "2017-02-13T17:34:25+0000",
            "content": "if the fix is to store the version with the child docs, it requires reindexing to resolve the issue.\n\nRight, this won't fix old indexes.\n\nI was thinking of adding another iteration to fetch parent version for childdocs without version. \n\nThat seems difficult, unless we just assume that any doc w/o a version is a child doc.\nAlso, another thing to watch out for is that the version field is technically not mandatory for non-solrcloud.  The presence of a _root_ field could be used to further determine if a doc is a child doc, but that may be expensive too.  ",
            "author": "Yonik Seeley",
            "id": "comment-15864038"
        },
        {
            "date": "2017-02-13T17:55:53+0000",
            "content": "I think it makes sense to split the fix into two parts - one patch to take care of future indices and a separate fix to look at existing indices. Especially if one half of that is much easier and can be done significantly faster. ",
            "author": "Mike Drob",
            "id": "comment-15864086"
        },
        {
            "date": "2017-02-14T08:57:27+0000",
            "content": "Make sense, thank you. I'll go with the new index fix now. ",
            "author": "Mano Kovacs",
            "id": "comment-15865388"
        },
        {
            "date": "2017-02-14T14:22:13+0000",
            "content": "It seems like childnodes are not being inserted at all if there is any reordered DBQ. In case of reordering, the neither the insertion for children documents, nor the delete for previous child during update are being execute. Created new test cases for those too. Is that ok if I add the fixes altogether and we extend the title of this jira? Suggesting \"Reordered delete-by-query cause inconsistency in child documents\". ",
            "author": "Mano Kovacs",
            "id": "comment-15865831"
        },
        {
            "date": "2017-02-14T14:28:55+0000",
            "content": "Adding SOLR-10114-validation.patch with 4 new tests, 3 of them are failing currently. This is not the actual patch, just to reproduce incorrect behaviors. Uploading fix shortly. ",
            "author": "Mano Kovacs",
            "id": "comment-15865840"
        },
        {
            "date": "2017-02-14T17:53:30+0000",
            "content": "Adding patch with\n\n\tfix by adding version for childdocs if there is\n\tfix by using same insert-or-update logic when handling reordered DBQ\n\trecovery and peersync tests.\n\n ",
            "author": "Mano Kovacs",
            "id": "comment-15866241"
        },
        {
            "date": "2017-02-15T16:14:44+0000",
            "content": "Use existing ThrowingRunnable instead of new RunnableWithException\n\nWe might possibly want to hide this new functionality behind a version check? Does the patch apply relatively easily to 6.5 as well?\n\n\nCan you help me understand the full scope of the problem here - child docs are only in danger of spurious delete until the next commit point, right? So if they make it to disk, even though they don't have versions, they are still safe from disappearing in the future. ",
            "author": "Mike Drob",
            "id": "comment-15868106"
        },
        {
            "date": "2017-02-15T17:06:01+0000",
            "content": "Thank you, Mike Drob, I did not know about ThworingRunnable.\n\nWe might possibly want to hide this new functionality behind a version check? Does the patch apply relatively easily to 6.5 as well?\nThe patch relies on some changes of SOLR-5944, which is AFAIK will be backported too, however, I can create a 6.x patch too.\n\nCan you help me understand the full scope of the problem here - child docs are only in danger of spurious delete until the next commit point, right?\nSo the reordered DBQ could happen if an update with an earlier version arrives after a DBQ with a later version to the replicas, or vica-versa. Solr handles the two cases the following:\n\n\tIf a DBQ arrives that has lower version than the latest updates, the DBQ gets an additional version filter to protect documents added earlier, with higher version.\n\t\n\t\tIf the DBQ is not by ID (or something limiting), but for example range or any, it will delete child-docs added with higher versioned parent doc. This is what the jira is originally about and testLogReplayWithReorderedDBQByAsterixAndChildDocs tests the case.\n\t\n\t\n\tIf an update arrives that has lower version than the latest DBQs, the DirectUpdateHandler2 goes on an add-and-delete path, where the earlier DBQs with higher versions are replayed after the update.\n\n\n\nNow, the doNormalUpdate(cmd) was checking if the document is block document (has children) and does two main differences based on that:\n\n\tCalls updateDocuments (plural) that accepts an Iterable and inserts every child document\n\tBuilds idTerm by _root_ field, instead of id-field, so before adding the document, lucene would delete the parent AND the child documents as well.\n\n\n\nOn the other hand, addAndDelete() did not do any differentiation for block docs, resulting the child-nodes ignored during the inserts and overwrites.\nSo basically any reordered DBQ caused:\n\n\tLosing child-docs when new document was inserted (testLogReplayWithReorderedDBQInsertingChildnodes)\n\tMaking the child-docs untouched on update. This caused replica numDocs inconsistency when the update contained different count of child-docs. (testLogReplayWithReorderedDBQUpdateWithDifferentChildCount)\n\n\n\nSo basically, any child-docs replication was dropped if there was a reordered DBQ.\n\nSo if they make it to disk, even though they don't have versions, they are still safe from disappearing in the future.\n\nAFAIK, the reordering cannot happen on the leader, this does not affects leader version, only replicas. I assume any peersync would fail due to fingerprint check, and would eventually replicate the correct index. Yonik Seeley, could you, please, verify my assumption? ",
            "author": "Mano Kovacs",
            "id": "comment-15868183"
        },
        {
            "date": "2017-02-15T17:16:45+0000",
            "content": "Using ThrowingRunnable in tests. ",
            "author": "Mano Kovacs",
            "id": "comment-15868197"
        },
        {
            "date": "2017-02-15T22:13:05+0000",
            "content": "On the other hand, addAndDelete() did not do any differentiation for block docs\n\nNice catch!  Looks like that oversight has been there since the original block-join patch.\n\nAFAIK, the reordering cannot happen on the leader, this does not affects leader version, only replicas. I assume any peersync would fail due to fingerprint check, and would eventually replicate the correct index.\n\nYeah, sounds right. ",
            "author": "Yonik Seeley",
            "id": "comment-15868667"
        },
        {
            "date": "2017-02-16T03:51:29+0000",
            "content": "Commit 99188ae00c0c46d9af47b9773d492de40de4aa83 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=99188ae ]\n\nSOLR-10114: add version field to child documents, fix reordered-dbq to not drop child docs ",
            "author": "ASF subversion and git services",
            "id": "comment-15869098"
        },
        {
            "date": "2017-02-16T03:52:13+0000",
            "content": "Committed. Thanks! ",
            "author": "Yonik Seeley",
            "id": "comment-15869099"
        },
        {
            "date": "2017-02-16T11:19:03+0000",
            "content": "Failed to upload the latest patch yesterday, attaching cleanup patch. ",
            "author": "Mano Kovacs",
            "id": "comment-15869755"
        },
        {
            "date": "2017-02-16T13:40:02+0000",
            "content": "Attaching second patch with more tests. First patch was missing a commit. Includes additional tests in PeerSyncTest.java, also made every branch of the test running, instead of randomization.\n\nThis includes the test-cleanup patch too. ",
            "author": "Mano Kovacs",
            "id": "comment-15869929"
        },
        {
            "date": "2017-02-16T17:45:44+0000",
            "content": "Commit d49edabf8992c2b2f9e2583e289cc58a4e71fd31 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d49edab ]\n\nSOLR-10114: test cleanup ",
            "author": "ASF subversion and git services",
            "id": "comment-15870353"
        },
        {
            "date": "2017-02-16T17:53:19+0000",
            "content": "git bisect points the finger at the 99188ae00c0c46d9af47b9773d492de40de4aa83 commit under this issue for reproducing TestRecovery failures - all three succeed just before this commit and fail after it.  I had to remove the -Dtests.method=testCorruptLog cmdline param to get these to reproduce, so maybe there's some method order dependence here?:\n\nhttps://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/18975/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestRecovery -Dtests.method=testCorruptLog -Dtests.seed=87E0BD7E2E527DCE -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=sah-RU -Dtests.timezone=America/North_Dakota/Center -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   1.29s J1 | TestRecovery.testCorruptLog <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: mismatch: '3'!='0' @ response/numFound\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([87E0BD7E2E527DCE:753D09ADD46A2C12]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:1006)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:953)\n   [junit4]    > \tat org.apache.solr.search.TestRecovery.testCorruptLog(TestRecovery.java:1274)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:543)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {val_i=Lucene50(blocksize=128), _root_=PostingsFormat(name=Direct), id=Lucene50(blocksize=128)}, docValues:{_version_=DocValuesFormat(name=Lucene70), val_i_dvo=DocValuesFormat(name=Lucene70)}, maxPointsInLeafNode=1693, maxMBSortInHeap=6.736398983719205, sim=RandomSimilarity(queryNorm=true): {}, locale=sah-RU, timezone=America/North_Dakota/Center\n   [junit4]   2> NOTE: Linux 4.4.0-53-generic i386/Oracle Corporation 9-ea (32-bit)/cpus=12,threads=1,free=183244888,total=536870912\n\n\n\nhttps://jenkins.thetaphi.de/job/Lucene-Solr-master-Solaris/1136/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestRecovery -Dtests.method=testCorruptLog -Dtests.seed=79A0B057C8C8D5DB -Dtests.slow=true -Dtests.locale=ar-OM -Dtests.timezone=Asia/Krasnoyarsk -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   0.45s J1 | TestRecovery.testCorruptLog <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: mismatch: '3'!='0' @ response/numFound\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([79A0B057C8C8D5DB:8B7D048432F08407]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:1006)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:953)\n   [junit4]    > \tat org.apache.solr.search.TestRecovery.testCorruptLog(TestRecovery.java:1274)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {val_i=BlockTreeOrds(blocksize=128), _root_=PostingsFormat(name=LuceneFixedGap), id=BlockTreeOrds(blocksize=128)}, docValues:{_version_=DocValuesFormat(name=Memory), val_i_dvo=DocValuesFormat(name=Direct)}, maxPointsInLeafNode=586, maxMBSortInHeap=6.1661193810062755, sim=RandomSimilarity(queryNorm=false): {}, locale=ar-OM, timezone=Asia/Krasnoyarsk\n   [junit4]   2> NOTE: SunOS 5.11 amd64/Oracle Corporation 1.8.0_121 (64-bit)/cpus=3,threads=1,free=163066016,total=536870912\n\n\n\nhttps://jenkins.thetaphi.de/job/Lucene-Solr-master-MacOSX/3836/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestRecovery -Dtests.method=testCorruptLog -Dtests.seed=A33AFB76746001BE -Dtests.slow=true -Dtests.locale=ar -Dtests.timezone=Universal -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   0.66s J1 | TestRecovery.testCorruptLog <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: mismatch: '3'!='0' @ response/numFound\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([A33AFB76746001BE:51E74FA58E585062]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:1006)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:953)\n   [junit4]    > \tat org.apache.solr.search.TestRecovery.testCorruptLog(TestRecovery.java:1274)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {val_i=BlockTreeOrds(blocksize=128), _root_=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128))), id=BlockTreeOrds(blocksize=128)}, docValues:{_version_=DocValuesFormat(name=Direct), val_i_dvo=DocValuesFormat(name=Memory)}, maxPointsInLeafNode=1861, maxMBSortInHeap=5.220105645523462, sim=RandomSimilarity(queryNorm=false): {}, locale=ar, timezone=Universal\n   [junit4]   2> NOTE: Mac OS X 10.11.6 x86_64/Oracle Corporation 1.8.0_121 (64-bit)/cpus=3,threads=1,free=171695816,total=536870912\n\n ",
            "author": "Steve Rowe",
            "id": "comment-15870367"
        },
        {
            "date": "2017-02-16T18:08:32+0000",
            "content": "FYI all three repro lines above still reproduce after commit d49edabf8992c2b2f9e2583e289cc58a4e71fd31. ",
            "author": "Steve Rowe",
            "id": "comment-15870419"
        },
        {
            "date": "2017-02-16T18:13:07+0000",
            "content": "Steve Rowe, thanks for pointing it out. I just noticed that too locally. Its some interdependency between the tests that I am trying to work out. ",
            "author": "Mano Kovacs",
            "id": "comment-15870430"
        },
        {
            "date": "2017-02-16T18:55:31+0000",
            "content": "Yeah, conflict between tests.\n\n26292 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.u.DirectUpdateHandler2 Reordered DBQs detected.  Update=add{_version_=104,id=G4} DBQs=[DBQ{version=1017,q=id:*}]\n26331 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.s.SolrIndexSearcher Opening [Searcher@26c39adc[collection1] realtime]\n26331 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={update.distrib=FROMLEADER&wt=json&indent=true}{add=[G4 (104)]} 0 40\n26332 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.u.DirectUpdateHandler2 Reordered DBQs detected.  Update=add{_version_=105,id=G5} DBQs=[DBQ{version=1017,q=id:*}]\n26349 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.s.SolrIndexSearcher Opening [Searcher@17fd92d4[collection1] realtime]\n26349 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={update.distrib=FROMLEADER&wt=json&indent=true}{add=[G5 (105)]} 0 17\n26350 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.u.DirectUpdateHandler2 Reordered DBQs detected.  Update=add{_version_=106,id=G6} DBQs=[DBQ{version=1017,q=id:*}]\n26374 INFO  (TEST-TestRecovery.testCorruptLog-seed#[BC979C5AA13AC6F7]) [    ] o.a.s.s.SolrIndexSearcher Opening [Searcher@6453c66a[collection1] realtime]\n\n\n\nThe id:* is from the newly added tests. SOLR-9941 was supposed to resolve this, but it does not, I am trying to work it out but any idea is welcome. ",
            "author": "Mano Kovacs",
            "id": "comment-15870509"
        },
        {
            "date": "2017-02-16T19:11:40+0000",
            "content": "Test methods of a test class are run in a randomized order.  Transaction log tests are tricky since tests can see what the previous tests left behind in the transaction logs.  This is why I used different ID spaces for some of these tests (id:A1,A2,... for one test, id:B1,B2, etc for another test).\n\nPerhaps try making any delete-by-queries test-specific? ",
            "author": "Yonik Seeley",
            "id": "comment-15870532"
        },
        {
            "date": "2017-02-16T19:29:11+0000",
            "content": "Yeah, that could be simple solution, but saying that we cannot test id:* for that reason is not too robust. I am thinking of creating an only incrementing version counter, so tests could not insert future deletes for each other. It would be a future-proof solution, I guess. ",
            "author": "Mano Kovacs",
            "id": "comment-15870563"
        },
        {
            "date": "2017-02-16T20:04:06+0000",
            "content": "Adding test fix \nI went with namespacing, as monotonic counter would be a bigger change (added jira for that SOLR-10151).\nI changed the id:* to delete by id and by root, since the purpose of the test was to validate that DBQ replayed version filter protects child-docs as well.\n\nSorry for the inconvenience. ",
            "author": "Mano Kovacs",
            "id": "comment-15870611"
        },
        {
            "date": "2017-02-16T20:12:57+0000",
            "content": "Commit 7a45f1015e73bc4f793a63be6b7414d53e008e05 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7a45f10 ]\n\nSOLR-10114: fix flakey TestRecovery ",
            "author": "ASF subversion and git services",
            "id": "comment-15870625"
        },
        {
            "date": "2017-02-19T08:35:12+0000",
            "content": "Commit ad9195d757c298a241ef2488b4b17623a44afdd7 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ad9195d ]\n\nSOLR-10114: add version field to child documents, fix reordered-dbq to not drop child docs ",
            "author": "ASF subversion and git services",
            "id": "comment-15873550"
        },
        {
            "date": "2017-02-19T08:35:15+0000",
            "content": "Commit 5c76710f08225d6909c96e584888bb6f036b4cfe in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5c76710 ]\n\nSOLR-10114: test cleanup ",
            "author": "ASF subversion and git services",
            "id": "comment-15873551"
        },
        {
            "date": "2017-02-19T08:35:19+0000",
            "content": "Commit 98133b21961c7c9672bcd85d2a2713e46f3242db in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=98133b2 ]\n\nSOLR-10114: fix flakey TestRecovery ",
            "author": "ASF subversion and git services",
            "id": "comment-15873552"
        },
        {
            "date": "2017-02-19T09:00:55+0000",
            "content": "Commit ea19bf5101817bae5b7b133a7d9d40ab41aac6ec in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ea19bf5 ]\n\nMove solr/CHANGES.txt entries to appropriate sections after backporting SOLR-5944 and SOLR-10114 ",
            "author": "ASF subversion and git services",
            "id": "comment-15873576"
        }
    ]
}