{
    "id": "LUCENE-7500",
    "title": "Remove LeafReader.fields()",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Fields seems like a pointless intermediary between the LeafReader and Terms. Why not have LeafReader.getTerms(fieldName) instead? One loses the ability to get the count and iterate over indexed fields, but it's not clear what real use-cases are for that and such rare needs could figure that out with FieldInfos.\n\nMichael McCandless pointed out that we'd probably need to re-introduce a TermVectors class since TV's are row-oriented not column-oriented.  IMO they should be column-oriented but that'd be a separate issue.\n\n(p.s. I'm lacking time to do this w/i the next couple months so if someone else wants to tackle it then great)",
    "attachments": {
        "LUCENE_7500_avoid_leafReader_fields.patch": "https://issues.apache.org/jira/secure/attachment/12871758/LUCENE_7500_avoid_leafReader_fields.patch",
        "LUCENE_7500_Remove_LeafReader_fields.patch": "https://issues.apache.org/jira/secure/attachment/12871759/LUCENE_7500_Remove_LeafReader_fields.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15582426",
            "author": "Adrien Grand",
            "date": "2016-10-17T14:32:23+0000",
            "content": "I just looked again at how Fields are used, and I'd be tempted to just remove LeafReader.fields(). Consumers would have to call LeafReader.terms(String) instead. Fields would still be useful in CodecReader.getPostingsReader() (consistently with getNormsReader, getPointsReader, getDocValuesReader which all deal with all fields at once) and LeafReader.getTermVectors(int) for term vectors.\n "
        },
        {
            "id": "comment-15582614",
            "author": "David Smiley",
            "date": "2016-10-17T16:01:05+0000",
            "content": "Yeah; that would be the simplest change to get the biggest benefit on the part of the API closer to the surface (granted all this is fairly low-level). "
        },
        {
            "id": "comment-16037382",
            "author": "David Smiley",
            "date": "2017-06-05T18:51:38+0000",
            "content": "Adrien Grand as 7.0 is approaching, I'd like to make some progress on this if you don't have the time. I like your suggestion of simply removing LeafReader.fields().  Perhaps a 6.7 could even mark this as deprecated, although it is marked abstract so any 6.x LeafReader subclasses must by necessity implement the deprecated method. "
        },
        {
            "id": "comment-16037535",
            "author": "Adrien Grand",
            "date": "2017-06-05T20:30:08+0000",
            "content": "Sorry if my wording seemed to imply I would be working on this, it was not my intention. Please go ahead! "
        },
        {
            "id": "comment-16040120",
            "author": "David Smiley",
            "date": "2017-06-07T03:50:06+0000",
            "content": "I've attached 2 patches to make this easier to review:\n\nThe \"avoid leafReader fields\" one is the most straight-forward \u2013 it finds existing callers of LeafReader.fields() that can easily be avoided by going directly to terms(field) with a little less code almost every time.  I should probably commit this to 6.x to minimize differences between 7x and 6x.\n\nThe \"remove LeafReader fields\" patch is the real substance of this issue. Some LeafReaders subclasses barely changed, some got a little simpler depending on what they were doing as they didn't need a Field intermediary.  Some other details:\n\n\tMultiFields uses a new private inner class to expose a Fields view on a LeafReader.  I needed to add some similar logic to SlowCodecReaderWrapper.readerToFieldsProducer; I'm not sure if it's worth consolidating the ~7 lines of code.\n\tI made more than wrote changes to ParallelReader since it's logic was a bit confusing to me and I feel it's now a little more straight-forward.\n\n\n\nI should enhance the docs a bit on Fields to clarify it's use.  Such as:\nProvides a {@link Terms} index for fields that have it, and lists which fields do.  This is primarily an internal/experimental API (see {@link FieldsProducer}), although it is also used to expose the set of term vectors per document.\n\nIMO, \"FieldProducer\" should really be named \"TermsProducer\" and instead of subclassing Fields, it can simply have those methods.  But perhaps that can be a follow-up (which I don't have time for right now).  Also, \"MultiFields\" might not be such a great name; maybe MultiTerms. And of course the final move, a \"TermVector\" class, then perhaps no need for a \"Fields\" class; in some cases just a Map<String,Terms> will do, like most existing callers of MultiFields.getFields for example. "
        },
        {
            "id": "comment-16042198",
            "author": "David Smiley",
            "date": "2017-06-08T04:49:00+0000",
            "content": "I updated both patches.  I expanded the \"avoid\" patch to also avoid calling MultiFields.getFields(IndexReader when there's an obvious replacement for MultiFields.getTerms(IndexReader,String).  I also updated a few places in Solr that could use the pre-existing instance of MultiFields indirectly via Solr's SlowCompositeReaderWrapper.\n\n  The main \"remove\" patch has additional changes:\n\n\tEnhanced MultiFields.getTerms(IndexReader,String) to do its job directly instead of being implemented as getFields(r).terms(field). In addition to avoiding getFields, this should be faster for any callers as there's no iteration of FieldInfos for each leaf going on.\n\tWeightedSpanTermExtractor has an inner class DelegatingLeafReader that explicitly overrode getFieldInfos to throw an UnsupportedOperationException.  This is problematic (tripped TestSurroundQueryParser failure); I think it's fine to let it delegate.  This failure was identified before this round of changes but the exact circumstances will probably not occur now that SrndTermQuery's calling of MultiFields.getTerms no longer relies on getFields and thus no longer will actually examine FieldInfos. Nonetheless I think simply delegating getFieldInfos is best.\n\n "
        },
        {
            "id": "comment-16042605",
            "author": "David Smiley",
            "date": "2017-06-08T12:11:29+0000",
            "content": "What do you think of this Adrien Grand and Michael McCandless?  I'll commit this over the weekend if there's no further feedback. "
        },
        {
            "id": "comment-16044056",
            "author": "Adrien Grand",
            "date": "2017-06-09T07:05:23+0000",
            "content": "I looked at the \"remove\" patch, it seems to make things simpler which I like. Regarding WeigthedSpanTermExtractor, why does it fail now? I'm afraid exposing field infos that are inconsistent with terms could lead to weird bugs? "
        },
        {
            "id": "comment-16044427",
            "author": "David Smiley",
            "date": "2017-06-09T13:19:35+0000",
            "content": "WeigthedSpanTermExtractor\n\nIt's kinda complicated.  So... See SrndTermQuery.visitMatchingTerms (part of the surround query parser). It calls MultiFields.getTerms(reader,fieldName) which works in terms of MultiFields.getFields(reader) \u2013 at least it does today without the patch.  And MultiFields.getFields today gets the Fields off the LeafReader.  With that gone, in the patch getField needs to consult FieldInfos to see which fields have terms.  In the latest patch (2nd iteration), I improved MultiFields.getTerms to not go through getFields first, which is a nice optimization in its own right.  So it's no longer pertinent for the surround query parser wether the highlighter's phrase handling has a leaf reader that implements getFieldInfos or not (I could put that UnsupportedOperationException back in).  It's hard to say for sure what very advanced queries I've never seen before might require... but the highlighters throwing an exception here guarantees queries that use getFieldInfos won't work whereas letting getFieldInfos through allows for it to might work.  I think until such use cases present themselves, we should just let getFieldInfos delegate.  Perhaps the best most correct option is to synthesize a FieldInfos that properly \"looks\" like what this filtered leaf reader is exposing.  It's dubious wether we should bother writing this code though. "
        },
        {
            "id": "comment-16044476",
            "author": "Adrien Grand",
            "date": "2017-06-09T14:13:31+0000",
            "content": "Eh, no more French word in the title. \n\nbut the highlighters throwing an exception here guarantees queries that use getFieldInfos won't work whereas letting getFieldInfos through allows for it to might work\n\nSorry but I'd rather not add this leniency. If my understanding is correct, this is actually unrelated to the removal of Fields and we already have this issue in both master and 6.x today, the change only made us figure out this could be an issue? "
        },
        {
            "id": "comment-16044520",
            "author": "David Smiley",
            "date": "2017-06-09T14:57:04+0000",
            "content": "Sorry but I'd rather not add this leniency. If my understanding is correct, this is actually unrelated to the removal of Fields and we already have this issue in both master and 6.x today, the change only made us figure out this could be an issue?\n\nFair point; I'll leave it be.  With the MultiFields.getTerms(...) optimization in this patch, throwing the UOE is fine.\n\nI'd like to create a separate issue for applying the \"avoid\" patch which will be to v6.x & v7, whereas this issue can be about the \"removal\" only for v7. "
        },
        {
            "id": "comment-16044579",
            "author": "Michael McCandless",
            "date": "2017-06-09T15:56:56+0000",
            "content": "+1, this is a nice simplification!\n\nMaybe we can move most of the static methods from MultiFields to ReaderUtil or maybe a new MultiReaderUtil, and then can we remove MultiFields entirely?  Who still uses it (instantiates it as a Fields instance)? (But we can do that separately).\n\nCan you add a comment here (PhraseHelper.java) explaining why the incoming field is ignored?\n\n\n+    public Terms terms(String field) throws IOException {\n+      return super.terms(fieldName);\n+    }\n\n\n\nThis change in ParallelReader seems a little dangerous:\n\n\n@@ -130,9 +131,12 @@\n         if (!fieldToReader.containsKey(fieldInfo.name)) {\n           builder.add(fieldInfo);\n           fieldToReader.put(fieldInfo.name, reader);\n-          if (fieldInfo.hasVectors()) {\n-            tvFieldToReader.put(fieldInfo.name, reader);\n-          }\n+        }\n+        if (fieldInfo.getIndexOptions() != IndexOptions.NONE) {\n+          indexFieldToReader.putIfAbsent(fieldInfo.name, reader);\n+        }\n+        if (fieldInfo.hasVectors()) {\n+          tvFieldToReader.putIfAbsent(fieldInfo.name, reader);\n         }\n       }\n     }\n\n\n\nbecause the two putIfAbsent are not inside the if (!fieldToReader.containsKey(fieldInfo.name)).  This could lead to cases where the FieldInfos returned by ParallelReader disagrees with what the terms(String) and term vectors APIs provide? "
        },
        {
            "id": "comment-16044668",
            "author": "David Smiley",
            "date": "2017-06-09T16:46:05+0000",
            "content": "Maybe we can move most of the static methods from MultiFields to ReaderUtil or maybe a new MultiReaderUtil, and then can we remove MultiFields entirely? Who still uses it (instantiates it as a Fields instance)? (But we can do that separately).\n\nYes I've had the same thought in terms of MultiFields being a bad name now (particularly for the \"Fields\" part of the name).  I didn't notice ReaderUtil specifically; perhaps that makes sense.  The problem with \"MultiReaderUtil\" is that it suggests a relationship to MultiReader, which exists, yet there isn't a relationship.  MultiReader might have been a good/consistent name for what SlowCompositeReaderWrapper actually is, but as you know that guy isn't in Lucene anymore.  I filed LUCENE-7875 to keep the scope of this current issue more manageable.\n\nCan you add a comment here (PhraseHelper.java) explaining why the incoming field is ignored?\n\nThe inner class SingleFieldFilterLeafReader has documentation and a decent name; perhaps RedirectFieldLeafReader might be a better name?  All methods to LeafReader that accept a field name are deliberately ignored so that it can use another configured name instead. (The terms method in particular is no exception). I propose I add a sentence to this class's documentation to say \"This is needed to support the ability to highlight a query irrespective of the field a query refers to (aka requireFieldMatch=false).\"   BTW This class is nearly the same as WeightedSpanTermExtractor.DelegatingLeafReader and exists for the same purpose.\n\nThis change in ParallelReader seems a little dangerous\n\nMy change is not purely identical in behavior, yes.  I believe it is bugginess/edge cases in the original behavior that were not thought out well originally.  For example, notice that tvFieldToReader was only populated on the first occurrence of the field name in a reader.  Why limit it so... shouldn't it be whichever reader first has term vectors for that field?  That might not be the first one.  Imagine the first reader has fieldA with only a terms index and another reader for fieldA just has term vectors.  The original code wouldn't notice the term vectors because it wasn't the first.  Ultimately the tests passed; I didn't look at ParallelReader's tests in close detail to see how well (or not) it's documented.  If you think we need to be extremely risk averse in this patch for ParallelReader (bug for bug compatible , then I can try and redo my work on ParallelReader to make it as bare minimum in changes as possible. "
        },
        {
            "id": "comment-16044990",
            "author": "Michael McCandless",
            "date": "2017-06-09T20:38:40+0000",
            "content": "I filed LUCENE-7875 to keep the scope of this current issue more manageable.\n\nThanks.\n\nThe inner class SingleFieldFilterLeafReader has documentation and a decent name; \n\nOh, sorry, that documentation looks great ... I was just reading the patch out of context.\n\nMy change is not purely identical in behavior, yes.\n\nI think we shouldn't change ParallelLeafReader's behavior on this issue; let this issue focus on the task at hand?  Maybe open a follow-on issue to make this change.  I don't like ParallelLeafReader's leniency ... the fields users pass to it should be orthogonal across sub-readers and we really should enforce that. "
        },
        {
            "id": "comment-16045383",
            "author": "David Smiley",
            "date": "2017-06-10T04:37:13+0000",
            "content": "New patch:\n\n\tUnifiedHighlighter: has the new clarifying sentence in PhraseHelper\n\tUH & Original Highlighter: reverted the getFieldInfos call; thus continue to throw UnsupportedOperationException\n\tParallelLeafReader: redid the changes so that it's functionality identical. I added TODOs for possible improvements.  The removal of LeafReader.fields to this class does make this class a little simpler than before.\n\n "
        },
        {
            "id": "comment-16045385",
            "author": "David Smiley",
            "date": "2017-06-10T04:44:14+0000",
            "content": "I moved the \"avoid\" patch to LUCENE-7876 which should naturally be committed first. "
        },
        {
            "id": "comment-16048640",
            "author": "David Smiley",
            "date": "2017-06-14T02:50:27+0000",
            "content": "If there are no further comments then I'll commit the patch tomorrow. "
        },
        {
            "id": "comment-16049991",
            "author": "ASF subversion and git services",
            "date": "2017-06-15T04:59:11+0000",
            "content": "Commit abc393dbfdb805361747ef651393332968851f3d in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=abc393d ]\n\nLUCENE-7500: Remove LeafReader.fields in lieu of LeafReader.terms.\nOptimized MultiFields.getTerms. "
        },
        {
            "id": "comment-16049992",
            "author": "David Smiley",
            "date": "2017-06-15T05:02:09+0000",
            "content": "Thanks for the code review Michael McCandless and for your input earlier Adrien Grand. "
        },
        {
            "id": "comment-16050697",
            "author": "ASF subversion and git services",
            "date": "2017-06-15T16:16:10+0000",
            "content": "Commit abc393dbfdb805361747ef651393332968851f3d in lucene-solr's branch refs/heads/jira/SOLR-10834 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=abc393d ]\n\nLUCENE-7500: Remove LeafReader.fields in lieu of LeafReader.terms.\nOptimized MultiFields.getTerms. "
        }
    ]
}