{
    "id": "LUCENE-3179",
    "title": "OpenBitSet.prevSetBit()",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.3",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Find a previous set bit in an OpenBitSet.\nUseful for parent testing in nested document query execution LUCENE-2454 .",
    "attachments": {
        "LUCENE-3179.patch": "https://issues.apache.org/jira/secure/attachment/12481733/LUCENE-3179.patch",
        "TestOpenBitSet.patch": "https://issues.apache.org/jira/secure/attachment/12483728/TestOpenBitSet.patch",
        "LUCENE-3179-long-ntz.patch": "https://issues.apache.org/jira/secure/attachment/12483857/LUCENE-3179-long-ntz.patch",
        "LUCENE-3179-fix.patch": "https://issues.apache.org/jira/secure/attachment/12483750/LUCENE-3179-fix.patch",
        "TestBitUtil.java": "https://issues.apache.org/jira/secure/attachment/12481849/TestBitUtil.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-07T18:16:08+0000",
            "content": "Add prevSetBit() and tests. Also moves some test code from TestOpenBitSet to TestBitUtil. ",
            "author": "Paul Elschot",
            "id": "comment-13045567"
        },
        {
            "date": "2011-06-07T18:30:38+0000",
            "content": "Hey Paul, did you try this implementation against Long.numberOfLeadingZeros?\nThe later Oracle Java6 implementations have instrinsified this method, so it might be faster: \nhttp://bugs.sun.com/view_bug.do?bug_id=6823354 ",
            "author": "Yonik Seeley",
            "id": "comment-13045576"
        },
        {
            "date": "2011-06-07T18:37:18+0000",
            "content": "Correct the issue number in the patch, and remove a superfluous javadoc comment. ",
            "author": "Paul Elschot",
            "id": "comment-13045583"
        },
        {
            "date": "2011-06-07T18:38:37+0000",
            "content": "Correct the issue number in the patch, remove a superfluous javadoc comment, and grant licence ... ",
            "author": "Paul Elschot",
            "id": "comment-13045584"
        },
        {
            "date": "2011-06-07T18:45:45+0000",
            "content": "I did not try this against Long.numberOfLeadingZeros, but in case that is faster we should use that of course. ",
            "author": "Paul Elschot",
            "id": "comment-13045587"
        },
        {
            "date": "2011-06-07T22:04:51+0000",
            "content": "If it's faster, should we not replace it completely in Lucene? The impl in Java 5 (Sun JDK) is identical to ours from BitUtils, so why replicate? If it gets intrinsic, it can only get faster. I assume its a relict from pre-Java-1.5 times like Lucene 2.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13045655"
        },
        {
            "date": "2011-06-07T22:05:13+0000",
            "content": "With the previous comment I also refer to nextSetBit(). ",
            "author": "Uwe Schindler",
            "id": "comment-13045656"
        },
        {
            "date": "2011-06-07T22:07:12+0000",
            "content": "I posted the benchmarks of intrinsic vs. manual (OpenBitSet) performance of nlz and pop (bitcount) methods a while ago \u2013 they should still be around JIRA somewhere. If I recall right, the difference was significant, although not like an order of magnitude or  something... and on CPUs without intrinsic instructions the implementation handcrafted by Yonik was actually faster than the one in the standard library. Of course these days most CPUs will have popcnt/ nlz instructions, so it makes sense to switch. ",
            "author": "Dawid Weiss",
            "id": "comment-13045659"
        },
        {
            "date": "2011-06-07T22:11:17+0000",
            "content": "I think it's the 1.6 that adds these intrinsics \u2013 I don't know if they've been backported to updates to 1.5, but this should be relatively easy to verify empirically. ",
            "author": "Dawid Weiss",
            "id": "comment-13045662"
        },
        {
            "date": "2011-06-07T22:12:49+0000",
            "content": "That's strange, the last time I looked into the code from the src.jar standard library it was 1:1 identical (there was even the same reference to the same Hacker's delight article). So I am just confused... ",
            "author": "Uwe Schindler",
            "id": "comment-13045663"
        },
        {
            "date": "2011-06-07T22:16:02+0000",
            "content": "Intrinsics are implemented/added at the hotspot (jit) level, you won't see them in src.jar \u2013 all calls to specific methods in Long.* or Integer.* are replaced by handcrafted assembly (usually process-specific instructions that do what a given method should do).\n\nIf you're interested, check out openjdk code of hotspot and scan for intrinsics (or popcnt). ",
            "author": "Dawid Weiss",
            "id": "comment-13045667"
        },
        {
            "date": "2011-06-07T22:20:35+0000",
            "content": "You misunderstood me, i know what intrinsics are. My confusion was related to that:\n\nand on CPUs without intrinsic instructions the implementation handcrafted by Yonik was actually faster than the one in the standard library\n\nAnd the so called hand crafted method is identical in src.jar and Yonik's code. So without intrinsics, the standard library and Yoniks code should be identical in performance, as it was same code, the last time I looked into it. ",
            "author": "Uwe Schindler",
            "id": "comment-13045669"
        },
        {
            "date": "2011-06-07T22:26:46+0000",
            "content": "And the so called hand crafted method is identical in src.jar and Yonik's code.\n\nFor pop, yes. But not for ntz or pop_array and friends.\n\nBitUtil.pop exists because this was originally written to work with java1.4 which didn't have Long.bitCount()\nhttp://markmail.org/message/5ay4m2thsvsahk3c ",
            "author": "Yonik Seeley",
            "id": "comment-13045674"
        },
        {
            "date": "2011-06-07T22:27:13+0000",
            "content": "The micro benchmarks for ntz() and pop() are at LUCENE-2221 ",
            "author": "Paul Elschot",
            "id": "comment-13045676"
        },
        {
            "date": "2011-06-07T22:29:21+0000",
            "content": "Oh, ok \u2013 clear. So, my comment was related to the various methods of doing bitcounts and other bit-fiddling on arrays of long values (for example pop_array) \u2013 these are HD derived implementations; I compared them to naive loops using intrinsics and naive loops on cpus (and jvms) without intrinsics \u2013 in that case simple loops with intrinsics was faster than Lucene's code, but Lucene's code was faster than simple loops without intrinsics (effectively using whatever was in the std. library). ",
            "author": "Dawid Weiss",
            "id": "comment-13045679"
        },
        {
            "date": "2011-06-07T22:34:59+0000",
            "content": "OK, so we can sefely remove BitUtil.pop and replace by the Java 5 method (maybe review again the code in src.jar also for ntz). And if this one is an intrinsic in Java 6 its even faster.\n\nNow we talk the same language  ",
            "author": "Uwe Schindler",
            "id": "comment-13045682"
        },
        {
            "date": "2011-06-07T22:36:29+0000",
            "content": "As to the performance, the current patch at LUCENE-2454 has a bitwise linear search to do this. ",
            "author": "Paul Elschot",
            "id": "comment-13045685"
        },
        {
            "date": "2011-06-08T19:12:26+0000",
            "content": "I did a bit of performance testing (sun java 1.6.0_xx, not the very latest one).\n\nThis is a typical output on my machine (the dummy can be ignored, it is only there to make sure that nothing is optimized away):\n\nBitUtil nlz time: 5664 picosec/call, dummy: 11572915728\nLong    nlz time: 8464 picosec/call, dummy: 7715277152\n\n\n\nThat means that the nlz code in the patch is definitely faster than Long.numberOfLeadingZeros for the test arguments used.\nThe test arguments are divided roughly evenly for the possible numbers of leading zero bits. ",
            "author": "Paul Elschot",
            "id": "comment-13046140"
        },
        {
            "date": "2011-06-08T19:14:57+0000",
            "content": "TestBitUtil.java as in the patch and extended with a testPerfNlz method that gave the output above. ",
            "author": "Paul Elschot",
            "id": "comment-13046141"
        },
        {
            "date": "2011-06-08T19:51:18+0000",
            "content": "You're not providing the required contex \u2013 what exact JVM and what exact processor did you test on? I've just ran your test on my machine with the following result:\n\nBitUtil nlz time: 3109 picosec/call, dummy: 20252602524\nLong    nlz time: 1279 picosec/call, dummy: 48220482200\n\nI'm guessing yours didn't use the intrinsic inline at all (for whatever reason). My machine is a fairly old Intel I7 860 running 64-Bit server hotspot 1.6.0_24-b07.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13046169"
        },
        {
            "date": "2011-06-08T21:15:32+0000",
            "content": "The java.vm.version value 1.6.0_03-b05, java.vm.info value is mixed mode.\nThe processor is an Athlon II X3 450 at 800 MHz.\n\nSince the Long time is about 2.5 times faster than the BitUtil with a 64 bit processor, I'll change the patch to use Long. When the hardware allows better performance, it should be used. ",
            "author": "Paul Elschot",
            "id": "comment-13046227"
        },
        {
            "date": "2011-06-08T21:30:45+0000",
            "content": "BitUtil.nlz() and the performance test method (renamed to tstPerfNlz()) are still in the patch, even though they are not used.\n\nI think committing this could wait until LUCENE-2454 is committed, and then that code can be changed to use prevSetBit() together with this. ",
            "author": "Paul Elschot",
            "id": "comment-13046239"
        },
        {
            "date": "2011-06-08T21:34:13+0000",
            "content": "Corrected mixing up the digits of the issue number. ",
            "author": "Paul Elschot",
            "id": "comment-13046243"
        },
        {
            "date": "2011-06-09T16:00:39+0000",
            "content": "I think we should just commit this?  It's a useful API.\n\nLUCENE-3171 (alternative nested docs impl w/ single pass collector) also could use this. ",
            "author": "Michael McCandless",
            "id": "comment-13046641"
        },
        {
            "date": "2011-06-17T15:34:36+0000",
            "content": "Patch, just fixes some whitespace issues and adds CHANGES entry. I think it's ready to commit! ",
            "author": "Michael McCandless",
            "id": "comment-13051141"
        },
        {
            "date": "2011-06-17T22:30:27+0000",
            "content": "Thanks Paul! ",
            "author": "Michael McCandless",
            "id": "comment-13051366"
        },
        {
            "date": "2011-06-24T16:17:09+0000",
            "content": "The testcase for prevSetBit has a bug, that was found by testing with java 5. It assumes that the allocation strategy for BitSet and OpenBitSet is identical, which it is not. E.g. Java 5's new BitSet(0) allocates still one word, while OpenBitSet does not.\n\nThe attached patch fixes the issue. ",
            "author": "Uwe Schindler",
            "id": "comment-13054521"
        },
        {
            "date": "2011-06-24T17:40:57+0000",
            "content": "Yonik mentioned on mailing list that prevSetBit is broken for size==0 and also indexes >= size. In that case you always get AIOOBE or even wrong results. In the case of an index >= the length of the bitset, the scanning must start at the last possible bit, so subIndex must be 0x3f and not simply the anded bits.\n\nThis is my naive fix. Tests pass (I added a extra check to the test that start beyond end of bitset to check prevSetBit). ",
            "author": "Uwe Schindler",
            "id": "comment-13054573"
        },
        {
            "date": "2011-06-24T17:53:09+0000",
            "content": "The check for negative indexes must be done to make the following loop work (which is standard to iterate backwards from \"startBit\" on all bits):\n\n\nfor (int i = bs.prevSetBit(startBit); i >= 0; i = bs.prevSetBit(i-1)) {\n     // operate on index i here\n}\n\n\n\nThis would fail with AIOOBE when i=0 on the last iteration (happens if 0th bit is set), because bs.prevSetBit(i-1) has negative parameter. The exit condition is checked later, so -1 must be allowed. ",
            "author": "Uwe Schindler",
            "id": "comment-13054578"
        },
        {
            "date": "2011-06-24T18:06:13+0000",
            "content": "Modified patch. I moved the assignment to the \"word\" variable to also inside the if/else branch, as for the beyond-last-bit case we can optimize to not shift at all. ",
            "author": "Uwe Schindler",
            "id": "comment-13054589"
        },
        {
            "date": "2011-06-24T18:21:38+0000",
            "content": "The 3179-fix patch looks good to me.\nI remember I had some doubts about which bit was actually the last one, and stopped worrying about it when the tests passed.\nThis patch makes it very clear what the last bit is. ",
            "author": "Paul Elschot",
            "id": "comment-13054606"
        },
        {
            "date": "2011-06-24T18:23:15+0000",
            "content": "+1, patch looks good Uwe. ",
            "author": "Yonik Seeley",
            "id": "comment-13054607"
        },
        {
            "date": "2011-06-24T20:45:29+0000",
            "content": "Committed 3.x branch revision: 1139430\nCommitted trunk revision: 1139431\nCommitted 3.3 branch revision: 1139433\n\nThanks Yonik! ",
            "author": "Uwe Schindler",
            "id": "comment-13054669"
        },
        {
            "date": "2011-06-24T21:20:46+0000",
            "content": "One more comment: When working on the code, the symmetry all other methods have between long and int is broken here. For consistency we should add the long method, too. I just don't like the missing consistency.\n\nAlso: OpenBitSet.nextSetBit() does not use Long.numberOfTrailingZeroes() but the new prevSetBit() does. As both methods have intrinsics, why only use one of them? Yonik?\n\nAny comments? ",
            "author": "Uwe Schindler",
            "id": "comment-13054681"
        },
        {
            "date": "2011-06-26T12:41:03+0000",
            "content": "Thanks for fixing these Uwe!\n\nI actually don't like how \"generic\" OBS has become... ie, that all methods have an int and long version, that the OBS doesn't \"know\" how many bits it holds (I added this field recently, but only for assertions), that some methods \"grow\" the number of bits and others don't, some methods accept out-of-bounds indices (negative and > numBits), etc.  I think it's grown to accommodate too many users.... but I'm not sure what we should do to fix this.  Maybe factor out (yet another) bit set impl that doesn't grow, knows its number of bits, has these fast getNext/getPrev set bit methods, operates only on int indices, etc. ",
            "author": "Michael McCandless",
            "id": "comment-13055063"
        },
        {
            "date": "2011-06-26T12:43:01+0000",
            "content": "One more comment: When working on the code, the symmetry all other methods have between long and int is broken here. For consistency we should add the long method, too. I just don't like the missing consistency.\n\nI think we should add the long version, for consistency.\n\nAlso: OpenBitSet.nextSetBit() does not use Long.numberOfTrailingZeroes() but the new prevSetBit() does. As both methods have intrinsics, why only use one of them? Yonik?\n\nGood question!  In testing on this issue, above, Dawid and Paul found the intrinsics were faster on modern JREs... seems like nextSetBit should cutover too? ",
            "author": "Michael McCandless",
            "id": "comment-13055064"
        },
        {
            "date": "2011-06-26T16:55:51+0000",
            "content": "Here the patch with the long version and Long.numberOfTrailingZeroes() instead of BitUtils.ntz().\n\nPath was already available on my checkout. We should only also test the long versions (according to Clover all of them are not really tested). ",
            "author": "Uwe Schindler",
            "id": "comment-13055118"
        },
        {
            "date": "2011-06-26T18:05:25+0000",
            "content": "New patch that also improves tests to check all uncovered long methods (of course the indexes are still < Integer.MAX_VALUE(. ",
            "author": "Uwe Schindler",
            "id": "comment-13055134"
        },
        {
            "date": "2011-06-27T12:41:47+0000",
            "content": "Patch looks good Uwe \u2013 thanks! ",
            "author": "Michael McCandless",
            "id": "comment-13055506"
        },
        {
            "date": "2011-06-30T18:46:17+0000",
            "content": "Any other comments/microbenchmarks from other committers? Dawid and Paul?\n\nI would like to commit this if nobody objects! What should we do with the then obsolete BitUtils methods? ",
            "author": "Uwe Schindler",
            "id": "comment-13057980"
        },
        {
            "date": "2011-07-02T02:40:14+0000",
            "content": "bulk close for 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13058924"
        },
        {
            "date": "2011-07-06T20:49:08+0000",
            "content": "Committed long versions and additional tests: rev 1143558 (trunk), rev 1143560 (3.x).\n\nI did not commit the cutover to Long.numberOfLeadingZeroes, because it was not performance tested. Also from the use-case, on machines without intrinsics, the JDK-given methods are slower (see comments in BitUtils.ntz, as in most cases the bits are shifted away (in nextSetBit), so the faster algorithm is to inverse the algorithm when calculating ntz. ",
            "author": "Uwe Schindler",
            "id": "comment-13060829"
        }
    ]
}