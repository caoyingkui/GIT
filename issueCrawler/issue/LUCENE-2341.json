{
    "id": "LUCENE-2341",
    "title": "explore morfologik integration",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Dawid Weiss mentioned on LUCENE-2298 that there is another Polish stemmer available:\nhttp://sourceforge.net/projects/morfologik/\n\nThis works differently than LUCENE-2298, and ideally would be another option for users.",
    "attachments": {
        "morfologik-fsa-1.5.2.jar": "https://issues.apache.org/jira/secure/attachment/12484001/morfologik-fsa-1.5.2.jar",
        "LUCENE-2341.diff": "https://issues.apache.org/jira/secure/attachment/12483213/LUCENE-2341.diff",
        "morfologik-polish-1.5.2.jar": "https://issues.apache.org/jira/secure/attachment/12484003/morfologik-polish-1.5.2.jar",
        "LUCENE-2341.patch": "https://issues.apache.org/jira/secure/attachment/12484418/LUCENE-2341.patch",
        "morfologik-stemming-1.5.2.jar": "https://issues.apache.org/jira/secure/attachment/12484002/morfologik-stemming-1.5.2.jar"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-23T10:44:50+0000",
            "content": "Robert, should I wait for Stempel patch first and then model this one after you? I'm thinking we can reuse most of the code; these stemmers have nearly identical APIs anyway. ",
            "author": "Dawid Weiss",
            "id": "comment-12848649"
        },
        {
            "date": "2010-03-23T12:26:22+0000",
            "content": "Dawid, sounds good. I had a few questions, admittedly not having time to look at the code much:\n\n\tDoes it support generation as well?\n\tDoes it expose any morph attributes (e.g. POS) ?\n\n ",
            "author": "Robert Muir",
            "id": "comment-12848672"
        },
        {
            "date": "2010-03-23T12:29:37+0000",
            "content": "oh yeah, and also, what about cases with multiple solutions? does it emit multiple stems? ",
            "author": "Robert Muir",
            "id": "comment-12848674"
        },
        {
            "date": "2010-03-24T09:15:46+0000",
            "content": "Oh, I forgot about this \u2013 yes, you're right, it can emit multiple lemmas (including their morphology). An example from the test case:\n\n\n\t\tfinal IStemmer s = new PolishStemmer();\n\n\t\tfinal String word = \"liga\";\n\t\tfinal List<WordData> response = s.lookup(word);\n\n\t\tfinal HashSet<String> stems = new HashSet<String>();\n\t\tfinal HashSet<String> tags = new HashSet<String>();\n\n\t\tfor (WordData wd : response) {\n\t\t\tstems.add(wd.getStem().toString());\n\t\t\ttags.add(wd.getTag().toString());\n\t\t\tassertSame(word, wd.getWord());\n\t\t}\n\n\t\tassertTrue(stems.contains(\"liga\u0107\"));\n\t\tassertTrue(stems.contains(\"liga\"));\n\t\tassertTrue(tags.contains(\"subst:sg:nom:f\"));\n\t\tassertTrue(tags.contains(\"verb:fin:sg:ter:imperf\"));\n\n\n\nThis raises the question how we want to handle multiple stems... should they be indexed on overlapping positions? ",
            "author": "Dawid Weiss",
            "id": "comment-12849114"
        },
        {
            "date": "2010-03-24T14:23:11+0000",
            "content": "I think overlapping positions makes sense. \nBut this can cause funky scoring for homographs,\nEven if the analysis is legitimately different, tf is wrong.\n\nMaybe solr's removeduplicatesfilter should be recommended\ndown the chain... ",
            "author": "Robert Muir",
            "id": "comment-12849198"
        },
        {
            "date": "2010-03-24T14:33:32+0000",
            "content": "When indexing multiple stems/lemmas (or synonyms in general) at the same positions, in most cases users should also set the Similarity.discoutOverlaps to avoid skewing the lengthNorm-s. I think that it should be mentioned somewhere in the javadocs. ",
            "author": "Andrzej Bialecki",
            "id": "comment-12849203"
        },
        {
            "date": "2010-03-24T14:47:26+0000",
            "content": "Andrzej,\nBy the way, this is now on by default on trunk. ",
            "author": "Robert Muir",
            "id": "comment-12849208"
        },
        {
            "date": "2011-06-20T21:48:38+0000",
            "content": "Hi\n\nThis patch introduces stemming filter and analyzer, that use Morfologik library, developed by Dawid Weiss and Marcin Mi\u0142kowski.\nTokens are stemmed by Morfologik with a dictionary, and current distribution provides a dictionary for polish language.\n\nThe MorfologikFilter yields one or more terms for each token. Each of those terms is given the same position in the index.\n\nI'm attaching a binary distribution of the library (morfologik-stemming-1.5.0.jar), that needs to be placed in modules/analysis/morfologik/lib/ subdirectory.\nIt is also available as a Maven artifact.\n\nThe library is BSD-licensed and a dictionary uses data from Polish dictionary for aspell/ispell/myspell (SJP.PL), which is licensed under GPL, LGPL, MPL and CC SA licenses.\n\nThis is my first contribution to the Lucene project, so please be forgiving \nThanks to Dawid for help.\n\nRegards,\n  Micha\u0142 ",
            "author": "Micha\u0142 Dybizba\u0144ski",
            "id": "comment-13052239"
        },
        {
            "date": "2011-06-20T22:15:11+0000",
            "content": "Hi Micha\u0142,\n\nThis patch looks great!\n\nI took a quick glance, here are a couple suggestions:\n\n\tIn the MorfologikFilter, I think we should implement reset(), first calling the superclass reset(), then clearing the stemsAcc list. This ensures that all of the filter's state is cleared before it is reused. Under normal operations, this should not be necessary, but some consumers in Lucene (e.g. LimitTokenCountFilter, and some similar code in the Highlighter), will only partially consume up to some point, then suddenly stop. By clearing this list in reset() we ensure that there is no chance any leftover stems will appear in the next stream.\n\tbecause the data is licensed under MPL, I think we should explicitly list a hyperlink if possible to the source code used in the NOTICE.txt. I saw you included some wordage in LICENSE.txt but I think this should only say 'XYZ data is under this license, with the actual MPL license text. In the NOTICE.txt we should link to the source code I think... there is some more information on this under the section Category B: Reciprocal Licenses at http://www.apache.org/legal/3party.html\n\n ",
            "author": "Robert Muir",
            "id": "comment-13052246"
        },
        {
            "date": "2011-06-20T22:31:07+0000",
            "content": "Sorry, about my second comment i was confusing this with the stuff you have for the morfologik jar itself, which is correct \n\nWhat i should have said was, I think we should include this information in the top-level modules/analysis/LICENSE.txt and modules/analysis/NOTICE.txt\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-13052251"
        },
        {
            "date": "2011-06-21T06:49:38+0000",
            "content": "Thanks for the contribution, Micha\u0142. \n\nRobert: the dictionary is licensed under MPL or CC-SA (to be selected by the user depending on one's needs). Do you know which one is preferable over another?\n\nMicha\u0142: there is also another (much larger) dictionary that has been released recently and comes from the Morfeusz project. http://sgjp.pl/morfeusz/dopobrania.html This dictionary is actually licensed under BSD license, so no legal worries at all. Both dictionaries are nearly identical (they differ slightly in their convention of morphosyntactic annotations) and Morfeusz's dictionary could be compiled into an automaton for use with Morfologik.\n\nWhich way should we go? What do you think? ",
            "author": "Dawid Weiss",
            "id": "comment-13052376"
        },
        {
            "date": "2011-06-21T06:55:21+0000",
            "content": "I'll take a look at the differences between Morfologik and Morfeusz right now, actually. I'll post the results once I have something. ",
            "author": "Dawid Weiss",
            "id": "comment-13052380"
        },
        {
            "date": "2011-06-21T08:21:12+0000",
            "content": "I did some analyses on both dictionaries.\n\nNumber of lines (distict surface forms):\n\n  3.662.366 morfologik.utf8\n  5.086.141 sgjp.utf8\n\nDistinct words (not in both):\n\n  2.729.334 unique.utf8\n\n  - upper/lower case (morfologik has upper case forms, morfeusz only lower case surface forms)\n    \n    acerze\n    Acerze\n\n  - very rare or jargon;\n\n    abszminka\n    abszytowa\u0142em\n    acetobakteria\n    acetarsolowi\n    niebombiasto\n    hakatystce\n    hakatystyczno\u015bciach\n    warz\u017ce\n\n  - differences in spelling;\n\n    abelard\n    ab\u00e9lard\n\n  - acronyms and super-short stuff\n\n    aap\n    aar\n\nDictinct normalized (lowercase):\n\n  2.564.366 lowered.utf8\n\n  Most of these are very infrequent words or inflection forms. There are minor differences or\n  missing surface forms in both dictionaries, as in here (mz - morfeusz, mk - morfologik):\n\nmz> hakersko\nmz> hakersko\u015b\u0107\nmz> hakersko\u015bci\nmz> hakersko\u015bci\u0105\nmz> hakersko\u015bciach\nmz> hakersko\u015bciami\nmz> hakersko\u015bciom\nmk> hakerstw\nmk> hakerstwa\n...\nmk> hakowa\u0142y\u015bmy\nmk> hakowa\u0144\nmk> hakowaniach\nmk> hakowaniami\nmk> hakowaniom\nmz> hakowato\u015b\u0107\nmz> hakowato\u015bci\nmz> hakowato\u015bci\u0105\nmz> hakowato\u015bciach\nmz> hakowato\u015bciami\nmz> hakowato\u015bciom\n\n\n\nSo... the conclusion is pretty consistent with Zipf's law: both dictionaries have a fairly different coverage, even if they're quite large. We don't have a frequency dictionary for Polish, but I assume most of these surface forms are purely theoretical and occur super-rarely in practice. This said, I think we should use BOTH dictionaries \u2013 after all there's no harm done if we overdo the lemmatization process a little bit, is there?\n\nSo... my proposal would be this: I'll integrate Morfeusz's dictionary in Morfologik (as an alternative dictionary one can load and use). \n\nEventually it would be probably sensible to limit the automaton for use in Lucene to store surface forms and lemmas only (no POS tags) and merge both dictionaries into a single automaton... but this can  be a future improvement.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13052421"
        },
        {
            "date": "2011-06-21T08:30:26+0000",
            "content": "One note wrt patch: I would use an explicit pointer over a list of returned WordData entries instead of adding them to a local list:\n\nprivate List<WordData> stemsAcc = new ArrayList<WordData>();\n\nRight now you're shifting the internal array on each call unnecessarily (just increase an int ptr instead):\n\n+      termAtt.setEmpty().append(stemsAcc.remove(0).getStem().toString());\n\ngetStem() should also be enough since it's a CharSequence, right? No need for an intermediate String. ",
            "author": "Dawid Weiss",
            "id": "comment-13052423"
        },
        {
            "date": "2011-06-21T10:00:09+0000",
            "content": "\nEventually it would be probably sensible to limit the automaton for use in Lucene to store surface forms and lemmas only (no POS tags) and merge both dictionaries into a single automaton... but this can be a future improvement.\n\nor alternatively, you can expose the POS tags for each stem to lucene right, easiest way would be to put it into TypeAttribute (a string), but you could make your own strongly-typed one if thats a better fit.\n\nthis could be useful for downstream processing. ",
            "author": "Robert Muir",
            "id": "comment-13052451"
        },
        {
            "date": "2011-06-21T11:16:43+0000",
            "content": "I've just published morfologik 1.5.2, Micha\u0142. This comes with two dictionaries (morfologik and morfeusz) that can be used as one (fallback for missing words) or separately, but I would stick to using morfologik as the default dictionary (possibly with an option of using morfeusz?). POS tags have a different notation in these two resources, so mixing both is probably not a good idea.\n\nWill you update the patch? Thanks. ",
            "author": "Dawid Weiss",
            "id": "comment-13052483"
        },
        {
            "date": "2011-06-21T21:16:09+0000",
            "content": "Thank you guys for suggestions \n\nI've changed the diff to include them:\n\n1. Implemented MorfologikFilter.reset that resets the stemsAcc, and added a test case that would fail in the absence of that implementation, which exhibits the behaviour mentioned by Robert.\n\n2. Updated modules/analysis/NOTICE.txt and modules/analysis/LICENSE.txt - Robert, is that what you meant, or do they need to include more information ?\n\n3. MorfologikFilter now uses an explicit pointer to not modify the stemsAcc on each pass - Dawid, do you think it's reasonable to optimize further and use directly a list returned by IStemmer.lookup (instead of copying with addAll) ? My concern is that (at least in current DictionaryLookup implementation) that list seems to be shared by distinct invocations of the lookup method, which would make the use of a specific IStemmer not applicable in thread-safe code.\n\n4. Removed explicit call to getStem().toString().\n\n\nAs for the new Morfologik version, I've been thinking it would be better to alter the constructors of MorfologikAnalyzer and MorfologikFilter to accept concrete IStemmer implementations, instead of a languageCode String as they do now. This way, org.apache.lucene.analysis.morfologik package wouldn't depend on current implementations of IStemmer (only on the interface), and also allowed future ones to be used without changing the package. What do you think ?\n\nThat could also solve the case of a custom attribute for POS tags (MorfologikPOSAttribute ?) : since a client would instantiate their IStemmer explicitly, they would know the meaning of the attribute's value. That doesn't take into account the DICTIONARY.COMBINED stemmer, but the same seems to apply to the Morfologik library itself (I mean, for a specific WordData from IStemmer.lookup there is no information on which of the internal concrete DictionaryLookup it comes from). Dawid - what do you think of that issue ? ",
            "author": "Micha\u0142 Dybizba\u0144ski",
            "id": "comment-13052841"
        },
        {
            "date": "2011-06-22T06:56:38+0000",
            "content": "Dawid, do you think it's reasonable to optimize further and use directly a list returned by IStemmer.lookup (instead of copying with addAll) ? My concern is that (at least in current DictionaryLookup implementation) that list seems to be shared by distinct invocations of the lookup method, which would make the use of a specific IStemmer not applicable in thread-safe code.\n\nIStemmer implementations are not thread safe anyway, so there is no problem in reusing that list. In fact, the returned WordData objects are reused internally as well, so you can't store them either (this is done to avoid GC overhead). \n\nSo yes: I missed that, but you'll need to ensure IStemmer instances are not shared. This can be done in various ways (thread local, etc), but I think the simplest way to do it would be to instantiate PolishStemmer at the MorfologikFilter level. This is cheap (the dictionary is loaded once anyway). \n\nYou can then create two constructors in the analyzer \u2013 one with PolishStemmer.DICTIONARY and one with the default (I'd suggest MORFOLOGIK). Exposing IStemmer constructor will do more harm than good \u2013 thinking ahead is good, but in this case I don't think there'll be this many people interested in subclassing IStemmer (if anything, they'll plug into Lucene's infrastructure directly).\n\nA simple test case spawning 5 or 10 threads in a parallel executor and crunching stems on the same analyzer would also be nice to ensure we have everything correct wrt multithreading, but it's not that crucial if you don't have the time to write it.\n\nThanks! ",
            "author": "Dawid Weiss",
            "id": "comment-13053079"
        },
        {
            "date": "2011-06-27T20:18:51+0000",
            "content": "Dawid, as you suggested, I've changed the interface to MorfologikAnalyzer and MorfologikFilter to account for the changes in Morfologik 1.5.2, namely the multiple dictionaries.\nBoth those classes' constructors now accept a PolishStemmer.DICTIONARY (instead of languageCode String as in previous patch). A PolishStemmer object is instantiated by MorfologikFilter, so each invocation of MorfologikAnalyzer.createComponents (which instantiates MorfologikFilter) is coupled with an individual instance of PolishStemmer.\nThis way, sharing a MorfologikAnalyzer by separate threads is safe (even though MorfologikFilter itself isn't thread-safe) provided each thread obtains its own TokenStreamComponents through ReusableAnalyzerBase.createComponents (is this always the case ? looking at other filters, thay don't look thread-safe neither ..) ",
            "author": "Micha\u0142 Dybizba\u0144ski",
            "id": "comment-13055729"
        },
        {
            "date": "2011-06-28T02:49:37+0000",
            "content": "\nprovided each thread obtains its own TokenStreamComponents through ReusableAnalyzerBase.createComponents (is this always the case ? looking at other filters, thay don't look thread-safe neither ..)\n\nyes, its the case that Analyzer/ReusableAnalyzerBase take care of this with a threadlocal, as long as each thread only needs to use one tokenstream at a time (which is true for all lucene consumers), see:\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/src/java/org/apache/lucene/analysis/Analyzer.java ",
            "author": "Robert Muir",
            "id": "comment-13056261"
        },
        {
            "date": "2011-06-28T10:16:05+0000",
            "content": "Working on the integration, will provide a final patch before committing. Thanks Micha\u0142. ",
            "author": "Dawid Weiss",
            "id": "comment-13056430"
        },
        {
            "date": "2011-06-28T10:45:23+0000",
            "content": "Updated patch. A few minor corrections and performance considerations (no intermediate strings). Updated eclipse classpath template. ",
            "author": "Dawid Weiss",
            "id": "comment-13056441"
        },
        {
            "date": "2011-06-28T10:50:09+0000",
            "content": "I've cleaned up the patch, but I'd still address the two TODOs that I left in the code:\n\n\n\tlowercasing should be done not at the external filter level, but inside the filter as a fallback IF AND ONLY IF the original sequence is not found in the dictionary. Morfeusz and Morfologik do have uppercase surface forms and do treat them differently (returning uppercase lemmas, for example). A test for this would be nice as well. An example of an uppercase/mixed surface form: AGD, Aaron, Poznania.\n\n\n\n\n\tI'd expose another attribute with morphosyntactic annotations \u2013 this is something that is there anyway, so why not expose it.\n\n\n\nI attached a git diff, but it should apply with patch -p1 < ... too. Micha\u0142, will you have the time to polish this off? ",
            "author": "Dawid Weiss",
            "id": "comment-13056442"
        },
        {
            "date": "2011-06-28T21:30:29+0000",
            "content": "Dawid, I'm attaching a patch with the suggested changes:\n\n1. MorfologikAnalyzer now doesn't use a LowerCaseFilter. When IStemmer.lookup returns an empty list for an originally cased token, another lookup is made for lowercased one. I hope the test case reflects your intentions.\n\n2. I've added MorfologikPOSAttributeImpl class that provides information about morphosyntactic annotations for each lemma, obtained with WordData.getTag(). A test provides a short insight for potential users. Two notes here:\n  a) Since MorfologikPOSAttribute might be unused, I've implemented it in terms of CharSequence (and not String), to not convert prematurely each POS tag to String.\n  b) Currently a default POS (for a nonlemmatized token) is an empty String, however null value might be more distinctive if empty POS tags for lemma were allowed.\n\nBTW, the patch deletes one line from dev-tools/eclipse/dot.classpath (<classpathentry kind=\"src\" path=\"modules/queries/src/test\"/>) - was that intentional ? ",
            "author": "Micha\u0142 Dybizba\u0144ski",
            "id": "comment-13056801"
        },
        {
            "date": "2011-06-29T06:47:04+0000",
            "content": "Thanks Micha\u0142. I'll review it later today and commit in if there are no objections. As for the deleted line \u2013 yes, it was intentional; we'll piggyback in this patch unless somebody fixes it earlier, no problem.\n\nDawid ",
            "author": "Dawid Weiss",
            "id": "comment-13057034"
        },
        {
            "date": "2011-06-29T09:25:13+0000",
            "content": "You do like those pesky .toString() calls, don't you?  I replaced the code slightly to keep char. sequences only; no need to create new objects. I also changed the impl. a bit to go from the start of the returned list -> theoretically, lemmas should be ordered by probability (in practice it's not the case, but may be in the future).\n\nAll looks good, committed in. Thanks! ",
            "author": "Dawid Weiss",
            "id": "comment-13057119"
        },
        {
            "date": "2011-06-29T09:58:58+0000",
            "content": "Needs to wait for official support for 1.6 on the trunk. ",
            "author": "Dawid Weiss",
            "id": "comment-13057132"
        },
        {
            "date": "2011-06-29T10:02:44+0000",
            "content": "Final patch for this issue. Needs to wait for 1.6 support. ",
            "author": "Dawid Weiss",
            "id": "comment-13057134"
        },
        {
            "date": "2011-06-30T19:16:46+0000",
            "content": "In trunk. Long live 1.6 support. ",
            "author": "Dawid Weiss",
            "id": "comment-13058007"
        },
        {
            "date": "2011-07-02T22:37:16+0000",
            "content": "Thanks  ",
            "author": "Micha\u0142 Dybizba\u0144ski",
            "id": "comment-13059139"
        }
    ]
}