{
    "id": "LUCENE-5288",
    "title": "Add ProxBooleanTermQuery, like BooleanQuery but boosting when term occur \"close\" together (in proximity) in each document",
    "details": {
        "components": [],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "New Feature",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "This is very much a work in progress, tons of nocommits...  It adds two classes:\n\n\n\tProxBooleanTermQuery: like BooleanQuery (currently, all clauses\n    must be TermQuery, and only Occur.SHOULD is supported), which is\n    essentially a BooleanQuery (same matching/scoring) except for each\n    matching docs the positions are merge-sorted and scored to \"boost\"\n    the document's score\n\n\n\n\n\tQueryRescorer: simple API to re-score top hits using a different\n    query.  Because ProxBooleanTermQuery is so costly, apps would\n    normally run an \"ordinary\" BooleanQuery across the full index, to\n    get the top few hundred hits, and then rescore using the more\n    costly ProxBooleanTermQuery (or other costly queries).\n\n\n\nI'm not sure how to actually compute the appropriate prox boost (this\nis the hard part!!) and I've completely punted on that in the current\npatch (it's just a hack now), but the patch does all the \"mechanics\"\nto merge/visit all the positions in order per hit.\n\nMaybe we could do the similar scoring that SpanNearQuery or sloppy\nPhraseQuery would do, or maybe this paper:\n\n  http://plg.uwaterloo.ca/~claclark/sigir2006_term_proximity.pdf\n\nwhich Rob also used in LUCENE-4909 to add proximity scoring to\nPostingsHighlighter.  Maybe we need to make it (how the prox boost is\ncomputed/folded in) somehow pluggable ...",
    "attachments": {
        "LUCENE-5288.patch": "https://issues.apache.org/jira/secure/attachment/12608716/LUCENE-5288.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-16T16:24:47+0000",
            "content": "\nMaybe we could do the similar scoring that SpanNearQuery or sloppy PhraseQuery would do\n\nPlease do not do this. If someone wants that, then they can simply use those queries. they already exist.\n\nI do not think we should be adding more scorers that score in the crazy ways these queries do: its 2013. ",
            "author": "Robert Muir",
            "id": "comment-13796939"
        },
        {
            "date": "2013-10-16T16:41:52+0000",
            "content": "Can we avoid the 'disableCoord'? I dont think we should add negatives like omitXXX or disableXXX anymore. Why does the one in BQ need to be protected?\n\nWhy is the heap modification code manually inlined into proxscorer? Is this for some performance gain? If so, what is the improvement?\n\nWhy does proxscorer score as S + P (where P is some proximity boost) if QueryRescorer is already scoring as S + (W*S2)? This seems to make the entire query unnecessary: its booleanness is not needed, in fact, not wanted as it will just double-count normal scoring. and we just need something more like a phrase query with different scoring? ",
            "author": "Robert Muir",
            "id": "comment-13796958"
        },
        {
            "date": "2013-10-16T18:09:23+0000",
            "content": "\n\nMaybe we could do the similar scoring that SpanNearQuery or sloppy PhraseQuery would do\n\nPlease do not do this. If someone wants that, then they can simply use those queries. they already exist.\n\nHonestly I have no idea how to properly \"boost\" for proximity; this is\nall one big nocommit now.\n\nMatching how SpanNear and sloppy PhraseQuery score would at least be\n\"familiar\" (though I don't think it'd match exactly).  I think this\nimpl should be faster than using N SpanNearQuery though ... have to\ntest.\n\nI do not think we should be adding more scorers that score in the crazy ways these queries do: its 2013.\n\nOK fair enough.  It was just an idea... I just don't know what to do\nwith the scoring side of this.\n\nCan we avoid the 'disableCoord'? Can we avoid the 'disableCoord'? I dont think we should add negatives like omitXXX or disableXXX anymore.\n\nYou mean name it enableCoord instead?  Or don't even expose the\noption?\n\nWhy does the one in BQ need to be protected?\n\nHmm, it doesn't, I'll fix.  At one point I had tried subclassing BQ...\n\nWhy is the heap modification code manually inlined into proxscorer? Is this for some performance gain? If so, what is the improvement?\n\nNo good reason... I'll add a nocommit to subclass PQ \"properly\".\n\nWhy does proxscorer score as S + P (where P is some proximity boost) if QueryRescorer is already scoring as S + (W*S2)?\n\nThe S+P is a total hack now; I have no idea what the \"right\" way is.\n\nThis seems to make the entire query unnecessary: its booleanness is not needed, in fact, not wanted as it will just double-count normal scoring. and we just need something more like a phrase query with different scoring?\n\nWell, I think we should leave open the option to run this query on the\nentire index?  (And to also be able to use it only for rescoring\ntopN).\n\nI agree the double-boolean-scoring is messed up ... not sure how to\nfix.\n\nMaybe in QueryRescorer we need to change the formula to W1*S1 + W2*S2,\nthen you could set W1=0... not sure ...\n\nBut that is a neat idea to do rescoring with a PhraseQuery... or with\nSpanNearQuery, etc.  Maybe we should break out QueryRescorer into its\nown issue? ",
            "author": "Michael McCandless",
            "id": "comment-13797072"
        },
        {
            "date": "2013-10-17T18:30:32+0000",
            "content": "New patch, folding in Rob's feedback and then some:\n\n\n\tUpdated after committing LUCENE-5292\n\n\n\n\n\tInverted disableCoord -> enableCoord (default true)\n\n\n\n\n\tIt now handles MUST case as well (subclass ConjunctionScorer)\n\n\n\n\n\tSubclasses PriorityQueue\n\n\n\n\n\tSome more tests\n\n\n\n\n\tI abstracted out how the proximity actually \"scores\" into a static\n    ProxScorer class, and made a (nocommit!!) DefaultProxScorer; this\n    gives flexibility on how the overall boost is accumulated based on\n    the actual positions, and how the boost is then combined with the\n    original query score\n\n\n\n\n\tAdded @lucene.experimental: I expect many APIs here will need to\n    change over time ...\n\n\n\nStill a few nocommits (the biggest one is what default prox scoring\ncan we do?; I'm concerned because the papers out there (e.g. \"Term\nProximity Scoring for Ad-Hoc Retrieval on Very Large Text\nCollections\") seem tied to the similarity impl), needs more tests, etc. ",
            "author": "Michael McCandless",
            "id": "comment-13798242"
        },
        {
            "date": "2013-10-17T18:35:33+0000",
            "content": "\nWell, I think we should leave open the option to run this query on the\nentire index? (And to also be able to use it only for rescoring\ntopN).\n\nThis doesnt make much sense: people can already do this today with other mechanisms... \n\nI think for this one we should pull the boolean-ness out of this and make a pure proximity scorer (so there is no double-scoring and all the other issues here). ",
            "author": "Robert Muir",
            "id": "comment-13798254"
        },
        {
            "date": "2013-10-17T22:08:08+0000",
            "content": "I think for this one we should pull the boolean-ness out of this and make a pure proximity scorer (so there is no double-scoring and all the other issues here).\n\nI guess there are two very different use cases here:\n\n\n\tProx-aware query that runs across the entire index; we already\n    have things like sloppy PhraseQuery, Span*Query, and this\n    ProxBooleanTermQuery would just be another in that same category.\n\n\n\n\n\tResort top results from first pass query\n\n\n\nI was hoping we could share code for these two use cases, by having\nQueryRescorer that takes a Query to do the 2nd pass scoring.  This way\nyou can rescore based on any costly query (e.g., I liked the rescoring\nby PhraseQuery).\n\nBut I agree that's sort of awkward, and it sounds you are strongly\nagainst that ... so  solving both cases with shared code is too\noptimistic now / for starters.\n\nI'd like to focus this issue on just adding another prox-aware query, and I guess\njust remove QueryRescorer for now.  We can explore it in a\nseparate/future issue. ",
            "author": "Michael McCandless",
            "id": "comment-13798504"
        },
        {
            "date": "2013-10-18T10:26:37+0000",
            "content": "OK, here's a totally new patch, trying out a different approach, that\ndoes rescoring during collection, and uses Scorer.getChildren to\nlocate all proximity aware term queries.\n\nA big advantage of this approach is it's now query agnostic: any Query\ncan add in prox boosting.  In order to do so, it must use\nProxTermQuery wherever it previously used TermQuery, and then use\nRescoringCollector passing ProximityRescorer.\n\nAnother big advantage is this approach can short-circuit the prox\nboosting by realizing that even after prox boosting a given hit cannot\ncompete, and avoid visiting any positions for that it.  I haven't\nimplemented that yet, but the hooks are there to do so ... this should\ntypical result in big gains over the dedicated ProxBooleanTermQuery.\n\nHowever, one big downside of this approach is, because it's more\ndivorced from how the actual query did its scoring, it can be much\nslower in some cases because for every hit it must visit ALL terms to\nsee if they are \"on\" the current doc, so there's now an automatic\nO(N) cost per collect, where N = number of prox terms.\n\nAnother downside is this approach has bigger API surface area, but\nanother possible advantage is maybe we can share APIs with the\n\"collect top N and resort TopDocs\" use case.\n\nNot sure which is better... ",
            "author": "Michael McCandless",
            "id": "comment-13798985"
        },
        {
            "date": "2013-10-18T11:02:19+0000",
            "content": "Most of these algorithms work pairwise on query-terms. \n\nThe scorer.getChildren/ProxTermQuery stuff doesnt make any sense to me there.\n\nI think it would be far better to start with an API that takes Term[] optionally, but can compute it itself with Query.extractTerms(LinkedHashSet), which will work in many cases. ",
            "author": "Robert Muir",
            "id": "comment-13799011"
        },
        {
            "date": "2013-10-18T19:42:49+0000",
            "content": "I think it would be far better to start with an API that takes Term[] optionally, but can compute it itself with Query.extractTerms(LinkedHashSet), which will work in many cases.\n\nOK, here's a new patch that uses Query.extractTerms to get the terms, and then it creates separate DocsAndPositionsEnums.\n\nI don't like that this means we are pulling two enums per term (one for the TermQuery and one for the prox scoring) vs the previous patches, but hopefully this turns out to be in the noise, once we work out the short-circuit opto.\n\nTons of nocommits still. ",
            "author": "Michael McCandless",
            "id": "comment-13799441"
        },
        {
            "date": "2014-04-16T12:54:51+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970908"
        }
    ]
}