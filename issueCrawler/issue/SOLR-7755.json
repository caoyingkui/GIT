{
    "id": "SOLR-7755",
    "title": "An API to edit the Basic Auth security params",
    "details": {
        "components": [
            "security"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "example: authentication commands\n\ncurl http://localhost:8983/solr/admin/authentication  -d '{\n    \"set-user\": {\"tom\":\"TomIsCool\"},\n    \"set-user\":{ \"tom\":\"TomIsUberCool\"}\n    }'\n\n\nexample : authorization commands\n\ncurl http://localhost:8983/solr/admin/authorization  -d '{\n    {\"set-user-role\": { \"tom\": [\"admin\",\"dev\"]},\n    \"set-permission\":{\"name\": \"security-edit\",\n    \"path\": [\"/admin/authentication\",\"/admin/authorization\"],\n    \"role\": \"admin\"\n    },\n    \"set-permission\":{\"name\":\"some-permission\",\n    \"collection\":\"acoll\",\n    \"path\":\"/nonexistentpath\",\n    \"role\":\"guest\",\n    \"before\":\"security-admin\"\n    }\n    }'\n\n\n\nPlease note that the set of parameters required for a basic ZK based impl will be completely different from that of a Kerberos implementation. However the framework would remain the same. The end point will remain the same, though",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-06T15:21:45+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Why does this need to be an endpoint in Solr? Can't all this be a wrapper around the /security.json in ZK and made available as a command line tool similar to zkcli?\nThe reason I think this shouldn't be an endpoint in Solr is that an admin might want to plan and setup security parameters in a cluster even before starting Solr. Also, authc/authz plugins in an already started up Solr cluster can add watches to the /security.json in ZK to monitor changes made through such a command line tool. That way, this API or \"framework\" wouldn't need to know what all to expect (i.e. \"create-permission\" or \"add-user\" or anything plugin specific). \n\nAnother challenge, that comes to mind, with having an endpoint like this: how would we secure this endpoint itself?\n\nThoughts, Anshum Gupta? ",
            "id": "comment-14615159"
        },
        {
            "date": "2015-07-06T15:29:54+0000",
            "author": "Noble Paul",
            "content": "Can't all this be a wrapper around the /security.json in ZK and made available as a command line tool similar to zkcli?\nI don't think exposing ZK to users is a good/safe practice\n\nadmin might want to plan and setup security parameters in a cluster even before starting Solr\n\nThat is pretty simple , You start with a standard no-edit permission security.json. it will be a part of this ticket . Which gives the admin user the privilege to edit the security parameters\n\nAlso, authc/authz plugins in an already started up Solr cluster can add watches to the /security.json in ZK to monitor changes made through such a command line tool\n\nNO. We want the the authc/authz plugins to just deal with security instead of screwing up/editing ZK nodes\n\nthat way, this API or \"framework\" wouldn't need to know what all to expect (i.e. \"create-permission\" or \"add-user\" or anything plugin specific).\n\nThe framework has no idea of what is create-permission it is the plugin's responsibility to interpret this stuff. Wait for the first patch to see how it is done\n\nAnother challenge, that comes to mind, with having an endpoint like this: how would we secure this endpoint itself?\nIsn't the same way it is done in all data stores?  They give admin privileges to to the admin and he can do further edits ",
            "id": "comment-14615176"
        },
        {
            "date": "2015-07-06T16:00:34+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I don't think exposing ZK to users is a good/safe practice\nSure not, but this kind of an interface should only be exposed to an admin, not a regular \"user\".\n\nThat is pretty simple , You start with a standard no-edit permission security.json. it will be a part of this ticket . Which gives the admin user the privilege to edit the security parameters\nIn that case, do you propose that the system assumed a default/preconfigured admin user principal?\n\n\n\n>>    Also, authc/authz plugins in an already started up Solr cluster can add watches to the /security.json in \n>> ZK to monitor changes made through such a command line tool\n> NO. We want the the authc/authz plugins to just deal with security instead of screwing up/editing ZK nodes\n\n\nI meant that a plugin can just add a watch to observe changed values and not actually changing anything in ZK. IoW, no plugin should be able to change ZK, but if the admin changes something from the commandline tool, these plugins can pick things up from the changes in security.json. \n\nIsn't the same way it is done in all data stores? They give admin privileges to to the admin and he can do further edits\nBut in that case, most datastores (MySQL, Oracle comes to mind) have their own built-in user management. In case of Solr, most likely the user principals would already be configured using LDAP or kerberos or some external system (in the special case of a particular plugin, they can be in ZK too). Each plugin would support different operations. Instead of trying to cater to them all in a unified endpoint/framework, isn't it cleaner to ask the admin to edit /security.json (directly or using any commandline tool)? That way, the plugins wouldn't need to hook itself into this API endpoint trying to parse out things thrown at it, and instead just know how to the config section passed into it through the /security.json. Wdyt? ",
            "id": "comment-14615233"
        },
        {
            "date": "2015-07-06T16:05:55+0000",
            "author": "Noble Paul",
            "content": "Sure not, but this kind of an interface should only be exposed to an admin, not a regular \"user\".\nAdmin is a human being. I mean it should be exposed only to a well tested program ..\n\nIn that case, do you propose that the system assumed a default/preconfigured admin user principal?\n\nNO. The system will always start with an empty /security.json . In that case no security is enabled. We will provide users with standard tested startup security.json for each scheme . That will contain a user and role\n\nBut in that case, most datastores (MySQL, Oracle comes to mind) have their own built-in user management\n\nYES. Solr will have ability to mange users . if you use the BasicAuth/ZKBasedAuthc pair. If you want to use other plugins , it will be uptto the plugin to decide what is editable and what is not ",
            "id": "comment-14615243"
        },
        {
            "date": "2015-08-26T13:06:13+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713254"
        }
    ]
}