{
    "id": "SOLR-8324",
    "title": "Logger Untanglement",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Done",
        "priority": "Major"
    },
    "description": "I propose that we do a thorough examination of how we use loggers over the whole project. There are many instances of loggers being shared between classes that make troubleshooting difficult, and we can probably clean up some of the usage that has accumulated over numerous code moves and refactorings.\n\nBecause this has the potential to scope wildly out of control, I would like to break the work down into several subtasks.\n\n\n\tLoggers should be declared all three of private static final when possible. This both helps avoid the situations described in later bullets, and might provide a very minor performance improvement.\n\tDistinct classes should not use loggers from other classes, unless they are explicitly delegated to do so.\n\tSubclasses should declare their own loggers instead of relying on loggers from parent classes.\n\tExamine if forbidden-api or some other tool(s) can help maintain this, once we reach a desired state.\n\n\n\nEach bullet might turn into one or more tasks, depending on how invasive individual changes become.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-20T18:35:51+0000",
            "author": "Shawn Heisey",
            "content": "Regarding task #2, making loggers private is one aspect of not using loggers from other classes, but I don't think there's any way to prevent one class from creating a logger within itself that is tied to another class.  This discussion leads into something I've been trying to do for a while: Declare a logger with identical code in every class.\n\nThis code works, but creates a logger for each instance of the class, which is less than ideal, especially for very large installs:\n\n\n\tprivate final Logger log = LoggerFactory.getLogger(this.getClass());\n\n\n\nEvery idea I've come up with for creating a static logger without needing the class name has failed. ",
            "id": "comment-15018480"
        },
        {
            "date": "2015-11-20T18:42:32+0000",
            "author": "Mike Drob",
            "content": "I believe that in Java 8 you can do something like...\n\n\nprivate static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().getClass());\n\n\n\nBut I have no idea how efficient that construction is. ",
            "id": "comment-15018492"
        },
        {
            "date": "2015-11-20T18:58:25+0000",
            "author": "Shawn Heisey",
            "content": "I found something that seems to work, and I think will work in both Java 7 and 8:\n\n\n  private static final Logger log = LoggerFactory\n    .getLogger(Thread.currentThread().getStackTrace()[1].getClass());\n\n ",
            "id": "comment-15018530"
        },
        {
            "date": "2015-11-20T19:03:50+0000",
            "author": "Mike Drob",
            "content": "What specifically are we trying to solve by doing it that way? Prevent copy-paste errors? I think it would be more intuitive to figure out a static analysis rule to catch bad usage and keep things idiomatic rather than trying to find workarounds on JVM limitations. ",
            "id": "comment-15018543"
        },
        {
            "date": "2015-11-20T19:04:30+0000",
            "author": "Shawn Heisey",
            "content": "A static method could be added to a utility class, using the Thread call that I found.  A call to that method can be used in every class that needs a logger.\n\n\n  private static final log = SomeUtilClass.getDefaultLogger();\n\n ",
            "id": "comment-15018547"
        },
        {
            "date": "2015-11-20T19:11:27+0000",
            "author": "Shawn Heisey",
            "content": "Yes, copy/paste errors are a possible source of problems with loggers.  Having identical code would eliminate that as a problem.  Because the code I quoted above is somewhat verbose, a utility method would make it a little safer. ",
            "id": "comment-15018567"
        },
        {
            "date": "2015-11-20T19:58:22+0000",
            "author": "Mike Drob",
            "content": "Using a utility method still wouldn't enforce that the Logger is declared private static final, which is the bigger issue, I think.\n\nHow does it work with subclassing? I imagine that it still returns a logger for the base class, but I'm not 100% sure on that.\n\nI'm currently hesitant about replacing all of the Logger declarations with a snippet like this because I'd like to give the benefit of the doubt to the existing code. There might be some reason that a few classes currently share loggers, and I'd feel more comfortable looking at each of those in turn, rather than replacing everything at once. ",
            "id": "comment-15018677"
        },
        {
            "date": "2015-11-20T22:16:58+0000",
            "author": "Shawn Heisey",
            "content": "If there is a legitimate reason to share loggers, then there's no reason that the logger can't be created as it is now with the class name, but the majority of classes could use the utility method.  We wouldn't necessarily need to use the utility for them all, but it would be a helpful pattern to use for the general case.\n\nYes, devs will still have to self-enforce the use of \"private static final\" for the logger objects.  I don't think there's anything that can be done to require it. ",
            "id": "comment-15018913"
        },
        {
            "date": "2015-11-20T23:08:47+0000",
            "author": "Mark Miller",
            "content": "Personally, I would not worry about a legit reason for sharing loggers. I don't believe it exists. ",
            "id": "comment-15019014"
        },
        {
            "date": "2015-11-20T23:36:59+0000",
            "author": "Yonik Seeley",
            "content": "I guess it depends on how one views loggers.\nClasses can be implementation details.  Different loggers (and logger configuration) are more interface than anything else.  Hence if one does a little code refactoring (an implementation change... say pulling something out into a private utility class), does it always make sense to change the logger?  My gut says no.\n\nBut as I said in the email thread, the majority of the sharing cases may be due to laziness. ",
            "id": "comment-15019070"
        },
        {
            "date": "2015-11-20T23:47:01+0000",
            "author": "Shawn Heisey",
            "content": "That [1] will probably need to be changed to [2] if the code is placed in a utility class, like I saw here:\nhttp://jira.qos.ch/browse/SLF4J-296 ",
            "id": "comment-15019086"
        },
        {
            "date": "2015-11-20T23:48:41+0000",
            "author": "Mark Miller",
            "content": "Much simpler to just give each class it's own logger. I don't think it matters either way, which is why I never worry about these changes.  ",
            "id": "comment-15019092"
        },
        {
            "date": "2015-11-20T23:58:25+0000",
            "author": "Uwe Schindler",
            "content": "You can do this since Java 7, I now use this anywhere. The code uses a \"trick\". You need a so-called caller-sensitive method (marked @CallerSensitive) and somehow get the class it detected. Since Java 7 you can use MethodHandles.lookup(). This returns a lookup for the class that called the Lookup factory. The lookup has the class it was created for - and voil\u00e1 you can use it \n\n\nimport java.lang.invoke.MethodHandles;\n//...\nprivate static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n\n\nI use that pattern everywhere in my code now. Thanks also to the following blog post: http://marxsoftware.blogspot.de/2013/01/portable-logger-names-with-java7.html ",
            "id": "comment-15019122"
        },
        {
            "date": "2015-11-21T00:00:57+0000",
            "author": "Uwe Schindler",
            "content": "I would not do this. Creating a stack trace for every class is slow and not helpful if Hotspot optimized stack traces away (may happen!).\n\nThe following code fragment is copypaste safe and works since Java 7 (and fast like hell because it uses the @CallerSensitive internal annotation in Java).\n\nThe code uses a \"trick\": Since Java 7 you can use MethodHandles.lookup(). This returns a lookup for the class that called the Lookup factory. The lookup has the class it was created for - and voil\u00e1 you can use it \n\n\nimport java.lang.invoke.MethodHandles;\n//...\nprivate static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n\n\nI use that pattern everywhere in my code now. Thanks also to the following blog post: http://marxsoftware.blogspot.de/2013/01/portable-logger-names-with-java7.html ",
            "id": "comment-15019131"
        },
        {
            "date": "2015-11-21T00:03:24+0000",
            "author": "Uwe Schindler",
            "content": "Works also in Java 7. And its fast like hell. Stack traces are slow. Also your code example is wrong. getClass() -> lookupClass() ",
            "id": "comment-15019136"
        },
        {
            "date": "2015-11-21T00:04:34+0000",
            "author": "Uwe Schindler",
            "content": "Much simpler to just give each class it's own logger. I don't think it matters either way, which is why I never worry about these changes.\n\n+1 ",
            "id": "comment-15019140"
        },
        {
            "date": "2015-11-21T00:08:54+0000",
            "author": "Uwe Schindler",
            "content": "FYI: Forbiddenapis cannot check for static/nonstatic logging patterns. You need to use something else. But you can use the Java 7+ MethodHandles trick to make a copypaste-safe template (that we may add to our Eclipse rules when creating new classes in Solr). ",
            "id": "comment-15019143"
        },
        {
            "date": "2015-11-21T07:37:58+0000",
            "author": "Shawn Heisey",
            "content": "Thanks, Uwe!\n\nI did try and use MethodHandles when Mike mentioned it, but eclipse didn't offer me the option to import the class when I pasted that code in, so I thought Java 7 didn't have the option.  Your code example included the import, so I pasted that into my test code first, and now it looks good.\n\nThat code is compact enough that using a copy of it in every class doesn't worry me.  The code using Thread and Stacktrace is quite verbose, and I get nervous when I see really long method chains and retrieval of specific array elements.  Hearing that the code is slow is another reason to avoid it. ",
            "id": "comment-15020305"
        },
        {
            "date": "2015-11-21T08:21:07+0000",
            "author": "Uwe Schindler",
            "content": "I did try and use MethodHandles when Mike mentioned it, but eclipse didn't offer me the option to import the class when I pasted that code in, so I thought Java 7 didn't have the option.\n\nEclipse is sometimes not good to work with copypasted code. If you cklick on class names it used it is ery bad to resolve them correctly. If you type in the code char by char it works quite fine. If you type \"MethodHandles.\" then it offers you the lookup() method asap (which imports while selecting it). It is indeed strange.\n\nAnother pattern for logging I see very often is importless loggers. Because the logging code and its imports (for this pattern actually 3 imports: factory, logger, method handles) clutters the imports with stuff nowhere used in the class; many people declare their loggers with a single line using class names including packages. By this you dont need imports and its friendly for copypaste:\n\n\nprivate static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(java.lang.invoke.MethodHandles.lookup().lookupClass());\n\n ",
            "id": "comment-15020323"
        },
        {
            "date": "2015-11-23T15:14:09+0000",
            "author": "Mike Drob",
            "content": "Ah, missed the lookupClass. Thanks for corroborating this. ",
            "id": "comment-15022234"
        },
        {
            "date": "2015-11-23T15:15:06+0000",
            "author": "Mike Drob",
            "content": "I'll work on putting together a patch that uses the MethodHandles approach. ",
            "id": "comment-15022237"
        },
        {
            "date": "2015-11-23T17:12:37+0000",
            "author": "Jason Gerlowski",
            "content": "Hey Mike, just an FYI- I've got a patch almost finished that uses the MethodHandles approach.  There was a little bit of back and forth about it on SOLR-8330 (\"Remove shared loggers\" subtask), but I guess I should've mentioned that I'd started on it here as well.  My bad.\n\nYou're welcome to take it if you've also already started.  Just wanted to let you know so we're not duplicating effort here. ",
            "id": "comment-15022487"
        },
        {
            "date": "2015-11-23T18:14:45+0000",
            "author": "Mike Drob",
            "content": "I hadn't had a chance to start on the MethodHandles patch, feel free to continue on SOLR-8330. My progress is up on SOLR-8325, it might save you some effort to build on top of that. ",
            "id": "comment-15022633"
        },
        {
            "date": "2015-12-10T00:42:41+0000",
            "author": "Mike Drob",
            "content": "Closing this out since it looks like all of the child tasks are completed and there is no work left. ",
            "id": "comment-15049738"
        }
    ]
}