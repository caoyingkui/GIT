{
    "id": "LUCENE-2684",
    "title": "it's not possible to access sub-query's freq information if BooleanScorer is use",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "LUCENE-2590 added an advanced feature, allowing an app to gather all sub-scorers for any Query.\n\nThis is powerful because then, during collection, the app can get some details about how each sub-query \"participated\" in the overall match for the given document.\n\nHowever, I think this is completely broken if the BooleanQuery uses BooleanScorer, because that scorer is not doc-at-once.  Instead, it batch processes chunks of 2048 sequential docIDs per scorer.  This is a big performance gain, but it means that the sub scorers will all be positioned to the end of the 2048 doc chunk while the docs that matched within that chunk are collected.\n\nI don't think we can easily fix this... likely the \"fix\" is to make it easy(ier) to force BQ to use BooleanScorer2 (which is doc-at-once)?  It is actually possible to force this, today, by having your collector return false from acceptDocsOutOfOrder...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-23T13:39:47+0000",
            "content": "Clearing 3.1 fix version... it's not clear how we can fix this w/o drastic API changes... ",
            "author": "Michael McCandless",
            "id": "comment-12985322"
        },
        {
            "date": "2012-09-11T17:24:30+0000",
            "content": "\nIt is actually possible to force this, today, by having your collector return false from acceptDocsOutOfOrder...\n\nWell you are using a custom collector anyway if you are doing this, so can't we just add a sentence to that\nmethod's javadocs indicating that you should return false if you want to use the scorer navigation apis? ",
            "author": "Robert Muir",
            "id": "comment-13453199"
        },
        {
            "date": "2012-09-11T17:41:29+0000",
            "content": "I think this issue is fixed already? VisitSubScorers works in 3.6.2 (if it gets released, Robert backported) and in 4.0 its working, too?\n\nAs you need a custom collector anyway to make use of Scorer.getChildren(), we should maybe make BS1 throw UOE on getChildren() in 4.0 (explaining that you need inOrder) and visitSubScorers in 3.6.2? ",
            "author": "Uwe Schindler",
            "id": "comment-13453218"
        },
        {
            "date": "2012-09-11T17:43:50+0000",
            "content": "\nAs you need a custom collector anyway to make use of Scorer.getChildren(), we should maybe make BS1 throw UOE on getChildren() in 4.0 (explaining that you need inOrder) and visitSubScorers in 3.6.2?\n\n+1, i think for freq() and getChildren() we should throw UOE with text like this. But we can also do the javadocs too.\n\nThen i think there would be a lot less surprises. ",
            "author": "Robert Muir",
            "id": "comment-13453223"
        },
        {
            "date": "2012-09-11T18:07:17+0000",
            "content": "+1\n\nBut we should word it as a \"workaround\" ... ie, it's sort of strange that returning false from this unrelated method means suddenly scorer.freq() works: that's really an implementation detail.  EG someday we could make BS1 score docs in order (it is possible, just not sure it'd be performant), and then this workaround no longer works. ",
            "author": "Michael McCandless",
            "id": "comment-13453238"
        },
        {
            "date": "2012-09-11T18:13:58+0000",
            "content": "It does not only affect freq(). In my case it was \"retrieving the subquery score\"...\n\nEG someday we could make BS1 score docs in order (it is possible, just not sure it'd be performant), and then this workaround no longer works.\n\nBut with in-order scoring we are in all cases use correctly positioned scorers, otherwise it is a bug (like the DisjunctionSumScorer bug in 3.6 and 4.0 we fixed recently). So returning \"false\" works around the issue currently, but it would not hurt if somebody would return false, although our new BS1 can handle in order. But on the other hand, if BS1 would score in order, but not position sub-scorers correctly it is clearly a bug! ",
            "author": "Uwe Schindler",
            "id": "comment-13453245"
        },
        {
            "date": "2012-09-11T18:14:05+0000",
            "content": "\nBut we should word it as a \"workaround\" ... ie, it's sort of strange that returning false from this unrelated method means suddenly scorer.freq() works: that's really an implementation detail. EG someday we could make BS1 score docs in order (it is possible, just not sure it'd be performant), and then this workaround no longer works.\n\nI don't agree: the strangeness is the two booleans toplevelScorer and scoreDocsInOrder. If we wanted to do this in the future, we could just rename scoreDocsInOrder\nto needsNavigation. \n\nOr we could just fold both the booleans into 'BS1 is ok' ... are they used anywhere else?  ",
            "author": "Robert Muir",
            "id": "comment-13453246"
        },
        {
            "date": "2012-09-11T18:25:49+0000",
            "content": "An idea (separate issue!) would be:\nBS1 completely violates the scorer interface, the only method you can call is the one taking a Collector. In my opinion, BS1 should not implement the Scorer interface, that the whole bug! It should maybe some separate class like OutOfOrderDocIdReporter (name is just an example) that only implements collect(Collector). And the navigation api (advance, next) should be separated from score() and freq() - a simple java interface Scorer. So the current in-order scorer would be a simple DocIdSetIterator that additionally implements the Scorer interface (to provide score() and freq()) and current out-of-order scorers would implement only the OutOfOrderDocIdReporter API and pass a inlined Scorer interface (without advance and next) to the setScorer() method (like BucketScorer currently). ",
            "author": "Uwe Schindler",
            "id": "comment-13453259"
        },
        {
            "date": "2012-09-11T18:26:58+0000",
            "content": "Collectible... (not serious) ",
            "author": "Robert Muir",
            "id": "comment-13453261"
        },
        {
            "date": "2012-09-11T18:28:00+0000",
            "content": "The problem is that \"scoresDocsInOrder\" doesn't really capture what's necessary here (yes, it works today, but, not necessarily tomorrow....).\n\nI agree Uwe: if we add a Collector.needsNavigation() then even a \"fixed\" BS1 that sorted the docIDs before collection would not be usable since the subs will not be \"on\" the doc during collect().\n\nAnd I agree Robert: the current booleans \"topLevelScorer\" and \"scoreDocsInOrder\", and then a new \"needsNavigation\", will make things rather confusing.  Really I think topLevelScorer should be strongly typed: the intent is to declare whether you will call Scorer.score(Collector) or whether you will call .nextDoc()/.score() ... they really should be different classes.\n\nIf we don't think any other future scorer would want to score docs NOT in order ... then maybe we should simple rename scoreDocsInOrder to needsNavigation?  (Or scoreDocAtOnce, scoreDocAtATime, something else...). ",
            "author": "Michael McCandless",
            "id": "comment-13453262"
        },
        {
            "date": "2012-09-11T18:32:27+0000",
            "content": "\nIf we don't think any other future scorer would want to score docs NOT in order ... then maybe we should simple rename scoreDocsInOrder to needsNavigation? (Or scoreDocAtOnce, scoreDocAtATime, something else...).\n\nI actually just remembered the query-time join i think does this too?\n\nBut yeah, if we are going to have booleans, i would prefer something more along the lines of document-at-a-time since its less confusing than\nscoreDocsInOrder (its standard IR terminology and less confusing). ",
            "author": "Robert Muir",
            "id": "comment-13453269"
        },
        {
            "date": "2012-09-11T18:37:10+0000",
            "content": "BS1 completely violates the scorer interface, the only method you can call is the one taking a Collector. In my opinion, BS1 should not implement the Scorer interface, that the whole bug!\n\nWell let's remember that the \"must have doc-at-once scoring, for all subs too\" is a very rare use-case.\n\nThe vast majority of users just need a fast .score(Collector) interface.\n\nBut yeah I agree: it should be strongly typed, and BS1 should only implement the .score(Collector) interface.  The ScoresDocAtOnce interface can easily implement the .score(Collector) interface (as Scorer does today...). ",
            "author": "Michael McCandless",
            "id": "comment-13453274"
        },
        {
            "date": "2013-07-23T18:44:31+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716974"
        },
        {
            "date": "2014-04-16T12:54:44+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970864"
        }
    ]
}