{
    "id": "LUCENE-3622",
    "title": "separate IndexDocValues interface from implementation",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently the o.a.l.index.values contains both the abstract apis and Lucene40's current implementation.\n\nI think we should move the implementation underneath Lucene40Codec, leaving only the abstract apis.\n\nFor example, simpletext might have a different implementation, and we might make a int8 implementation\nunderneath preflexcodec to support norms.",
    "attachments": {
        "LUCENE-3622.patch": "https://issues.apache.org/jira/secure/attachment/12506335/LUCENE-3622.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-06T23:33:32+0000",
            "content": "patch, will look kinda wierd due to svn moves (thats all i did).\n\nDirectSource, IndexDocValues, MultiIndexDocValues, PerDocFieldValues, SourceCache, TypePromoter, and ValueType stayed as the 'abstract' api and everything else moved to Lucene40Codec. ",
            "author": "Robert Muir",
            "id": "comment-13163971"
        },
        {
            "date": "2011-12-07T07:52:23+0000",
            "content": "+1 go for it ",
            "author": "Simon Willnauer",
            "id": "comment-13164220"
        },
        {
            "date": "2011-12-09T15:32:17+0000",
            "content": "robert, while you are on it I think we should rename IndexDocValues to DocValues. I think the confusion with \norg.apache.lucene.queries.function.DocValues doesn't exist anymore since its now in modules. The Core class should be a the first class citizen here. ",
            "author": "Simon Willnauer",
            "id": "comment-13166241"
        },
        {
            "date": "2011-12-09T16:32:40+0000",
            "content": "Does that really remove the confusion? Not sure I agree with that. It does kind of suck we have this clash...I don't know that IndexDocValues even makes it much better. ",
            "author": "Mark Miller",
            "id": "comment-13166289"
        },
        {
            "date": "2011-12-09T16:40:14+0000",
            "content": "I think it does: we need to use the simplest naming possible within the core api (especially for core index features).\n\nJust like we have Field (and there is java.lang.reflect.Field) and Document (and there is org.w3c.dom.Document) and we use Term and other short names. ",
            "author": "Robert Muir",
            "id": "comment-13166290"
        },
        {
            "date": "2011-12-09T16:44:37+0000",
            "content": "I agree with Robert and Simon, we should have simpliest name (DocValues). The function stuff is in my opinion already named wrongly, I hate e.g. ValueSource, this name should die, die, die - and this one creates confusion everywhere  ",
            "author": "Uwe Schindler",
            "id": "comment-13166296"
        },
        {
            "date": "2011-12-09T16:51:48+0000",
            "content": "Its two different points:\n\n1. Does it remove the confusion - I don't agree that it does.\n2. Should the core api get the simplest name. ",
            "author": "Mark Miller",
            "id": "comment-13166303"
        },
        {
            "date": "2011-12-09T16:52:31+0000",
            "content": "+! To the function naming being completely off.  That's the naming that should change. ",
            "author": "Jason Rutherglen",
            "id": "comment-13166305"
        },
        {
            "date": "2011-12-09T16:52:49+0000",
            "content": "And as I said, calling it IndexDocValues doesn't really help the confusion matter IMO. ",
            "author": "Mark Miller",
            "id": "comment-13166306"
        },
        {
            "date": "2011-12-09T16:56:50+0000",
            "content": "I think it does: we need to use the simplest naming possible within the core api (especially for core index features).\n\nHeh - thats not an argument that it removes the confusion just because its now part of a module. Thats an argument that we should name it DocValues regardless. ",
            "author": "Mark Miller",
            "id": "comment-13166310"
        },
        {
            "date": "2011-12-09T16:58:31+0000",
            "content": "And as I said, calling it IndexDocValues doesn't really help the confusion matter IMO.\na bit of history I hope I recall correctly... we had some arguments when merging from the docvalues branch into trunk that the name is easy to be confused with DocValues in the function package since they are both in core. This is where my statement comes from.  ",
            "author": "Simon Willnauer",
            "id": "comment-13166311"
        },
        {
            "date": "2011-12-09T16:59:01+0000",
            "content": "For now in the branch (https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3622), i renamed/shuffled in r1212506.\n\nYou can take a look and see what you think... we can/should always be thinking of naming and how it can be simpler.\n\nWith separating out the abstract api, its small enough I moved it out of .values to just org.apache.lucene.index \n(which makes IndexDocValues seem awefully redundant).\n\nAdditionally PerDocValues was moved out of the codecs package, as you get it from IndexReader and it doesnt make \nsense under .codecs.\n\nFinally ValueType is DocValues.Type (just like DocValues.Source, etc), and TypePromoter is now pkg-private, as its\njust an implementation detail of SegmentMerger. ",
            "author": "Robert Muir",
            "id": "comment-13166312"
        },
        {
            "date": "2011-12-09T17:02:46+0000",
            "content": "we had some arguments when merging from the docvalues branch into trunk that the name is easy to be confused with DocValues in the function package since they are both in core. This is where my statement comes from.\n\nYeah, I got that. I wasn't involved in that discussion, but if I was, I would have argued that calling it IndexDocValues didn't help the situation much and we should have just kept it as DocValues anyway. I just don't think because a class moves to another lucene 'component' that it helps the situation any. I still consider modules first class.\n\nI'd also have argued that in 4 we should rename the function DocValues class to something else. It's advanced to mess in that area, and people can handle a change in a move to 4. ",
            "author": "Mark Miller",
            "id": "comment-13166315"
        },
        {
            "date": "2011-12-09T17:12:30+0000",
            "content": "\nI'd also have argued that in 4 we should rename the function DocValues class to something else. It's advanced to mess in that area, and people can handle a change in a move to 4.\n\nShould we try this out in the branch here? what would be a better name? FunctionValues?  ",
            "author": "Robert Muir",
            "id": "comment-13166319"
        },
        {
            "date": "2011-12-09T17:19:47+0000",
            "content": "+1 for FunctionValues ",
            "author": "Ryan McKinley",
            "id": "comment-13166327"
        },
        {
            "date": "2011-12-09T17:21:56+0000",
            "content": "+1 ",
            "author": "Mark Miller",
            "id": "comment-13166328"
        },
        {
            "date": "2011-12-12T20:46:54+0000",
            "content": "There is more to be done here, but I'd like to merge the work so far to trunk to make maintenance easier.\n\nthe following classes are renamed:\n\n\tIndexDocValues -> DocValues\n\tValueType -> DocValues.Type\n\tPerDocFieldValues -> DocValue\n\tfunction's DocValues -> FunctionValues\n\n\n\nDocValues classes are no longer in o.a.l.index.values, instead the 'general' classes (only 4 or so) are in o.a.l.index.\n\nThe lucene40-implementation dependent classes are now underneath lucene40 codec.\n\nPerDocValues is only held by the core and not exposed to IndexReader. Its renamed to PerDocProducer (consistent with PerDocConsumer).\n\nIndexReader only has DocValues docValues(String field) as its api. MultiPerDocValues is removed as its not exposed and there is only MultiDocValues. \n\nSortedSource doesn't require that you exposed a packed-ints reader, you might not implement things that way. Instead it has a hasPacked* method so that sorting can optimize in case you do have it.\n\nFieldInfo no longer has a transactional API for setting term vectors or docvalues information: the problem was that we could end out with extra files if there was an exception and only that document needed them. Instead of a commit/revert thing it just sets them after it successfully indexes.\n\nType promotion is moved from the codec implementation to SegmentMerger. Because of this, SegmentMerger no longer lies to other codec components about the fieldinfos, with DocValues changing them behind the scenes, instead it computes fieldinfos up front, writes them to disk, and codecs see \"the real fieldinfos\". This also means like merging of other lucene type information, our 'type promotion' across incompatible docvalues types is well-defined instead of being implementation-dependent.\n\nSome unused/unnecessary/dead methods/code in the abstract apis are removed. \n\nCheckIndex has lots more checking for docvalues (and norms too).\n ",
            "author": "Robert Muir",
            "id": "comment-13167789"
        }
    ]
}