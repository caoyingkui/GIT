{
    "id": "LUCENE-1613",
    "title": "TermEnum.docFreq() is not updated with there are deletes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "TermEnum.docFreq is used in many places, especially scoring. However, if there are deletes in the index and it is not yet merged, this value is not updated.\n\nAttached is a test case.",
    "attachments": {
        "TestDeleteAndDocFreq.java": "https://issues.apache.org/jira/secure/attachment/12406415/TestDeleteAndDocFreq.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-25T03:15:08+0000",
            "content": "Test showing docFreq not updated when there are deletes. ",
            "author": "John Wang",
            "id": "comment-12702648"
        },
        {
            "date": "2009-04-25T03:23:54+0000",
            "content": "I understand this is a rather difficult problem to fix. I thought keeping a jira ticket would still be good for tracking purposes. Will let the committers decide on the urgency on this issue. ",
            "author": "John Wang",
            "id": "comment-12702649"
        },
        {
            "date": "2009-04-25T10:05:57+0000",
            "content": "John, do you have cases in practice where this is causing problems?\n\nI understand the problem, and it's certainly real, and is not easy to fix \"automatically\", but I'm wondering in practice whether the difference in the resulting scores is ever significant.\n\nI suppose we could make a \"fixTermCounts()\" method, which takes a looong time as it iterates through the postings for each term to compute the actual count, and then writes a new terms dict.  The app would have to manually call this method. ",
            "author": "Michael McCandless",
            "id": "comment-12702674"
        },
        {
            "date": "2009-04-25T13:14:33+0000",
            "content": "Michael: We ran into this actually in facet search. When there is a null search, instead of counting on results on a MatchAllDocsQuery, we were just using docFreq() method to avoid facet counting. The problem came with there were updates. We did get around it, but was rather cumbersome.\n\nI agree the fix is non-trivial, just wanted to open up an issue for tracking purposes incase we think of some thing. ",
            "author": "John Wang",
            "id": "comment-12702691"
        },
        {
            "date": "2009-04-27T20:10:43+0000",
            "content": "Given how fundamental the issue is w.r.t. how Lucene stores the index, it's unlikely to ever be fixed. (A clean, performant fix other than simply merging the segments would be a pretty incredible revelation.) As an outside observer I would argue against keeping the bug open forever for correctness sake.\n ",
            "author": "Matt Chaput",
            "id": "comment-12703333"
        },
        {
            "date": "2009-04-27T20:15:34+0000",
            "content": "This is a dupe I believe, but for the life of me, I cannot find the original to link them. ",
            "author": "Mark Miller",
            "id": "comment-12703338"
        },
        {
            "date": "2009-12-06T20:28:08+0000",
            "content": "As an outside observer I would argue against keeping the bug open forever for correctness sake.\n\nI agree - its not really a bug. Its by design.\n\nI suppose we could make a \"fixTermCounts()\" method, which takes a looong time as it iterates through the postings for each term to compute the actual count,\n\nJust call expungeDeletes?\n\n+1 on closing. ",
            "author": "Mark Miller",
            "id": "comment-12786697"
        },
        {
            "date": "2009-12-07T01:13:48+0000",
            "content": "Maybe to just add a javadoc comment on the call to explain the behavior in this case?\n\nMany times calling docFreq happens in a readonly context, calling expungeDeletes in that context is not a good idea.\n\nI agree it is not trivial to fix while keeping the performance. I don't mind closing the bug either. ",
            "author": "John Wang",
            "id": "comment-12786750"
        },
        {
            "date": "2013-02-22T10:54:49+0000",
            "content": "Just changing resolution to wontfix ... ",
            "author": "Michael McCandless",
            "id": "comment-13584184"
        }
    ]
}