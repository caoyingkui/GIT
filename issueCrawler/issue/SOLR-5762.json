{
    "id": "SOLR-5762",
    "title": "SOLR-5658 broke backward compatibility of Javabin format",
    "details": {
        "affect_versions": "4.6.1,                                            4.7",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "4.8",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In SOLR-5658 the docsMap entry was changed from a Map to List<Map> this broke  back compat of older clients with 4.6.1 and later\n\n\nERROR - 2014-02-20 21:28:36.332; org.apache.solr.common.SolrException; java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to java.util.List\n        at org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.unmarshal(JavaBinUpdateRequestCodec.java:188)\n        at org.apache.solr.handler.loader.JavabinLoader.parseAndLoadDocs(JavabinLoader.java:106)\n        at org.apache.solr.handler.loader.JavabinLoader.load(JavabinLoader.java:58)\n        at org.apache.solr.handler.UpdateRequestHandler$1.load(UpdateRequestHandler.java:92)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:74)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1859)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:721)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:417)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:201)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n        at org.eclipse.jetty.server.Server.handle(Server.java:368)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\n        at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:953)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1014)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:953)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\n        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n        at java.lang.Thread.run(Thread.java:744)",
    "attachments": {
        "SOLR-5762-test.patch": "https://issues.apache.org/jira/secure/attachment/12630458/SOLR-5762-test.patch",
        "updateReq_4_5.bin": "https://issues.apache.org/jira/secure/attachment/12630459/updateReq_4_5.bin",
        "SOLR-5672.patch": "https://issues.apache.org/jira/secure/attachment/12630264/SOLR-5672.patch",
        "SOLR-5762.patch": "https://issues.apache.org/jira/secure/attachment/12630464/SOLR-5762.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-13908019",
            "date": "2014-02-21T06:26:27+0000",
            "content": "Ideally there should be a type check and cast should be done appropriately "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13908031",
            "date": "2014-02-21T06:36:53+0000",
            "content": "untested patch "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13909253",
            "date": "2014-02-22T05:25:47+0000",
            "content": "testcases "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13909261",
            "date": "2014-02-22T06:10:17+0000",
            "content": "full patch "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13909263",
            "date": "2014-02-22T06:19:19+0000",
            "content": "Commit 1570793 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1570793 ]\n\nSOLR-5762 broke backward compatibility of Javabin format "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13909269",
            "date": "2014-02-22T06:42:24+0000",
            "content": "Commit 1570795 from Noble Paul in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1570795 ]\n\nSOLR-5762 broke backward compatibility of Javabin format "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13909270",
            "date": "2014-02-22T06:46:42+0000",
            "content": "Commit 1570796 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1570796 ]\n\nSOLR-5762 broke backward compatibility of Javabin format "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13909277",
            "date": "2014-02-22T07:02:13+0000",
            "content": "resolved "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13914197",
            "date": "2014-02-27T08:11:31+0000",
            "content": "Just adding a comment to indicate that this bug fixes problems with clients that say Unknown type 19 in the error message.  It's mentioned in SOLR-5658 by Yonik.  This will help users who search the Jira project for this error message. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13920469",
            "date": "2014-03-05T04:13:31+0000",
            "content": "I don't know if it's the same problem or a new problem, but the \"Unknown type 19\" error is still there connecting SolrJ 4.7.0 to Solr 4.5.1.\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201403.mbox/%3C531570D4.2020308@uni-jena.de%3E "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13920482",
            "date": "2014-03-05T04:34:18+0000",
            "content": "It's the same issue as mentioned in SOLR-5658:\n\nexception in JavaBinCodec complaining about \"Unknown type 19\"\n\nI hadn't considered going the other way - new client to old.\nThat's a bummer. Sucks this was implemented wrong first.\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13920560",
            "date": "2014-03-05T06:03:36+0000",
            "content": "The way out of this problem is enabling versioning of the format\n\non the response side I should be able to request the version. example wt=javabin&wtv=2\n\n\nThere was a version added to the payload as the first byte. But devs forgot to increment the version when they added new types. We should atleast have the option of forcing the client to write the request in an older version at the API level.\n\n\ncodec = new JavaBinUpdateRequestCodec();\ncodec.forceVersion(1);\ncodec.marshal(theObject);\n\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13920577",
            "date": "2014-03-05T06:34:47+0000",
            "content": "Rather than create a whole new version parameter, could we just bump the various existing codec version numbers?  I think that would mean that javabin goes to 2.1, xml to 2.3, and so on.  This might be an absolutely terrible idea ... I'm operating on very little sleep right this moment. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13920628",
            "date": "2014-03-05T08:00:18+0000",
            "content": "Shawn Heisey I didn't quite get it "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13920652",
            "date": "2014-03-05T08:39:14+0000",
            "content": "I didn't quite get it\n\nRight now the javabin version is 2, the xml version is 2.2, and I don't know what the json version is.\n\nYou could create a new versions of these transports - version 2.1 of javabin would mean that the actual content of the request is in the new version.  The javabin format itself would not be changing.  That way we don't need to introduce a whole new parameter that indicates the payload/content version.\n\nAs I said, this might be a terrible idea. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13920785",
            "date": "2014-03-05T12:12:18+0000",
            "content": "How about using the Solr version itself?\n\nI can say version=4.5 or 4.6 or 4.0  And we do an internal mapping of different solr versions Vs format versions\n\nsay solr 4.0 to 4.6 javabin=2, xml =2.2 etc. That way the user does not need to think about the format. SolrJ can always send its version (I mean Lecene/Solr version) for update/query . The server can make an appropriate decision looking at the req param. Users of older SolrJ/non-solrj can add the client version param along with the request "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13921022",
            "date": "2014-03-05T16:34:05+0000",
            "content": "SolrJ can always send its version (I mean Lecene/Solr version) for update/query\n\nThat's an interesting notion.  It does mean that we are still talking about adding another parameter, but in this case, there is a beneficial side effect: By looking at logs, it would be clear what SolrJ version is being used, both to the user and to those who are trying to help that user.\n\nThere would need to be a way to tell SolrJ to use the old format.  I don't know if we're headed for a situation where ANY unknown parameter on a query will throw an error, but if we are, we'd also need a way to suppress sending the new version parameter. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13921028",
            "date": "2014-03-05T16:44:41+0000",
            "content": "I don't know if we're headed for a situation where ANY unknown parameter on a query will throw an error, but if we are, we'd also need a way to suppress sending the new version parameter.\n\nAfter further thought, I realized that throwing an error on an unknown parameter could only happen in a future Solr version.  That future version would support the new parameter.  Obviously I'm still not firing on all cylinders even after a night of sleep. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13921060",
            "date": "2014-03-05T17:23:10+0000",
            "content": "There would need to be a way to tell SolrJ to use the old format.\n\nThis means devs will have to start preserving old behaviors in the code and honor it when asked to serialize in a given version\n\nI don't know if we're headed for a situation where ANY unknown parameter \n\nThis will never happen . Why would it be required? "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13924861",
            "date": "2014-03-08T13:43:21+0000",
            "content": "When I use a Solrj version greater than 4.5.1 and use deleteById via CloudSolrServer for my SolrCloud 4.5.1 I get an error. I think that this bug is still exists. On the other hand I want to ask a question about applied patch. What is it for because docMap is not used at anywhere else? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13924961",
            "date": "2014-03-08T18:32:22+0000",
            "content": "\nI don't know if we're headed for a situation where ANY unknown parameter \n\nThis will never happen . Why would it be required?\n\nFor a commit, the waitFlush parameter was deprecated sometime before 4.0 was released.  In 4.x, we removed it entirely, and using waitFlush now results in an error.  That broke some of the third-party APIs, the ones for PHP in particular.\n\nThis, combined with the fact that Solr is becoming more strict about unknown settings in carious config files, has led me to believe that eventually we will fail when any unknown parameter is supplied on a query.  Doing so would alert users to incorrect usage, but probably also violates the principle of least surprise. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13925563",
            "date": "2014-03-10T08:38:19+0000",
            "content": "When I use a Solrj version greater than 4.5.1 and use deleteById via CloudSolrServer for my SolrCloud 4.5.1 I get an error.\n\nIf this is true please open a ticket "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13925564",
            "date": "2014-03-10T08:41:17+0000",
            "content": "Solr behaves a lot like a web container where the various components determine the parameters accepted. In any given request various components can participate in fulfilling the request. Erroring out for unexpected params means that we will have to keep a database of all parameters from all components. It is going to cause a lot of problems for us devs as well as the users "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13925623",
            "date": "2014-03-10T10:17:03+0000",
            "content": "If this is true please open a ticket\n\nYes of course, it can be easily tested. I will open a Jira issue for it.  "
        }
    ]
}