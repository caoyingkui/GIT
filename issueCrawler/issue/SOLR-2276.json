{
    "id": "SOLR-2276",
    "title": "Support for cologne phonetic",
    "details": {
        "affect_versions": "1.4.1",
        "status": "Closed",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As soon as Apache Commons Codec 1.5 is released, support new encoder \"ColognePhonetic\" please.\nSee JIRA for CODEC-106.\n\nIt is fundamental for phonetic searches if you are indexing german names. Other indexers are optimizied for english (words).",
    "attachments": {
        "ColognePhonetic-patch-with-reflection.txt": "https://issues.apache.org/jira/secure/attachment/12476034/ColognePhonetic-patch-with-reflection.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Marc Pompl",
            "id": "comment-12969710",
            "date": "2010-12-09T12:11:18+0000",
            "content": "Patch for solr trunk (4.0). Binary modifications are not included.\nSeems ColognePhonetic will be supported in Apache Commons Codec 1.4.1.\n\nBesides, do you think it is a good idea to allow a fully qualified class name as \"encoder\" in PhoneticFilterFactory? Extending solr by a custom phonetic filter could be much easier for developers.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12975510",
            "date": "2010-12-28T14:53:54+0000",
            "content": "Seems ColognePhonetic will be supported in Apache Commons Codec 1.4.1.\n\nThanks for your patch Marc. Has there been any discussion on a tentative release date for 1.4.1?\nWhen this happens I'll be happy to add it.\n\n\nBesides, do you think it is a good idea to allow a fully qualified class name as \"encoder\" in PhoneticFilterFactory? Extending solr by a custom phonetic filter could be much easier for developers.\n\nI think the reason its not done with reflection might be historical, before all tokenstreams were reused?\nBut I still think its a good idea to avoid reflection when possible, so I think we should keep the statically built map.\n\nHowever, if you supply a string thats not in this map, I don't think it would hurt to try to reflect the name\nbefore throwing an exception, as in this case you would only get an exception anyway. "
        },
        {
            "author": "Marc Pompl",
            "id": "comment-12985458",
            "date": "2011-01-23T23:23:15+0000",
            "content": "Hi Robert,\n\nI wasn't able to find any release date for Apache Commons Codec 1.4.1 or 1.5.\n\nI agree with your concept of supporting a static map and--if a not supported string is identified--a fallback via reflection, additionally. "
        },
        {
            "author": "Marc Pompl",
            "id": "comment-13018153",
            "date": "2011-04-10T21:25:59+0000",
            "content": "Hi Robert,\n\nat last I've found some time to implement your suggestion. The modified patch is attached.\nJUnit tests are updated and included.\n\nOh, by the way, Apache Commons Codec 1.5 has been released on March, 29th. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13018217",
            "date": "2011-04-11T06:42:44+0000",
            "content": "Hi Marc,\nto remove the unneeded cast leading to an unchecked warning, also calling static methods on instances is a no-go:\nReplace:\n\nclazz = (Class<? extends Encoder>) this.getClass().forName(name);\n\n\nBy:\n\nclazz = Class.forName(name).asSubclass(Encoder.class);\n\n\n\nAditionally, maybe the reflection should try twice:\n\n\tFirst try by prepending the package name (\"org.apache.commons.codec.language.\"), as the user expects the encoder in this package. With your code, the user has to add the full class name.\n\tUse name param as \"full class name\".\n\n\n\nThe only problem with the reflection code is that it is case sensitive, so this is different from the \"registry\" map. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13018326",
            "date": "2011-04-11T12:48:45+0000",
            "content": "hi Marc, thanks for notifying us of the commons codec release.\n\nUwe: I agree with your suggestions, I just want to mention i think we should still keep the registry map, because for example Caverphone is deprecated in the 1.5 release (and there is Caverphone1 and Caverphone2). So the map is useful for us to shield our users from changes (we can map Caverphone to Caverphone2 or whichever one is equivalent). Even if this one is removed in commons codec 1.6 this string value can still work.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13018330",
            "date": "2011-04-11T12:58:04+0000",
            "content": "One addition about the registry: The registry is not synchronized, but now it is lazy updated as soon as a new encoder class occurs - registry.put() could be called from different threads and break the HashMap. "
        },
        {
            "author": "Marc Pompl",
            "id": "comment-13018504",
            "date": "2011-04-11T18:51:59+0000",
            "content": "Thanks for the useful hints. Java's API always has some nifty news, even for experienced developers. \nCode was modified.\nBesides, the exception handling is really ugly, in order to fulfill the requirement to do reflection twice.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13139510",
            "date": "2011-10-30T01:05:15+0000",
            "content": "Thanks Marc! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157833",
            "date": "2011-11-27T12:36:02+0000",
            "content": "Bulk close after 3.5 is released "
        }
    ]
}