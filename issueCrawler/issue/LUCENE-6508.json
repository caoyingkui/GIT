{
    "id": "LUCENE-6508",
    "title": "Simplify Directory/lock api",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "See LUCENE-6507 for some background. In general it would be great if you can just acquire an immutable lock (or you get a failure) and then you close that to release it.\n\nToday the API might be too much for what is needed by IW.",
    "attachments": {
        "LUCENE-6508-deadcode1.patch": "https://issues.apache.org/jira/secure/attachment/12736000/LUCENE-6508-deadcode1.patch",
        "LUCENE-6508.patch": "https://issues.apache.org/jira/secure/attachment/12736036/LUCENE-6508.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14563118",
            "author": "Uwe Schindler",
            "date": "2015-05-28T15:43:41+0000",
            "content": "Thanks Robert for opening that issue. This was my initial idea about Simon's issue. And I was already looking into fixing that.\n\nI will take care of this issue after or while buzzwords. Then I can discuss with Simon Willnauer in person about sleeping horses and locks  "
        },
        {
            "id": "comment-14563131",
            "author": "Michael McCandless",
            "date": "2015-05-28T15:52:13+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14563326",
            "author": "Robert Muir",
            "date": "2015-05-28T17:44:43+0000",
            "content": "Random ideas to make this better:\n\n\tremove timeouts\n\tremove Lock.isLocked(), Lock.obtain(), IndexWriter.isLocked(Dir), etc\n\tjust have Directory.obtain() which either succeeds and gives you Closeable or gives IOException\n\tobtain() should return an immutable thing, that will simplify a lot here.\n\tmaybe Directory should \"know\" of the lock and check on each createOutput, delete, rename, etc. This would give more safety.\n\tmaybe add method Lock.isValid(). For network filesystems, things like disconnected nodes can cause locks to be \"lost\". look into things like FileLock.isValid and see if they are useful. (SimpleFS can implement with Files.exists).\n\n "
        },
        {
            "id": "comment-14563469",
            "author": "Michael McCandless",
            "date": "2015-05-28T18:55:46+0000",
            "content": "+1 to this plan "
        },
        {
            "id": "comment-14563793",
            "author": "Uwe Schindler",
            "date": "2015-05-28T22:23:59+0000",
            "content": "In LockFactory we need the following: BasDirectory.makeLock() currently delegates directly to the LockFactory (its a final method). So we should rename this method in LockFactory, too and make it return a lock only after aquire. Therefore, the LockFactory would do what Robert proposed. Otherwise I like the proposal. I will work the next days on it (I already started to rename some stuff).\n\nThe lock cannot be completely immutable. Because the Closeable interface should still be implemented correctly: close() must be idempotent, so we still need the state. But it is immutable in that sense that you cannot re-obtain the lock. "
        },
        {
            "id": "comment-14563797",
            "author": "Uwe Schindler",
            "date": "2015-05-28T22:25:23+0000",
            "content": "In any case, we should not hurry this. We should iterate the API several times. I hope more people look into this this time. Last year when I refactored this for the first time, the interest was quite low. "
        },
        {
            "id": "comment-14563816",
            "author": "Robert Muir",
            "date": "2015-05-28T22:45:11+0000",
            "content": "There is no hurry. I will prototype some stuff and see where I get.\n\nThis is exactly why i moved this out of LUCENE-6507, so we can take our time and make this work better in the future. And that is separate from fixing completely broken bugs like LUCENE-6507 which are really release blockers  "
        },
        {
            "id": "comment-14563830",
            "author": "Uwe Schindler",
            "date": "2015-05-28T22:57:46+0000",
            "content": "I may have been to aggressive, sorry for that. I am fine with the given proposals, my intent is just to have it better this time - it was a large step forward last September to remove the ability to have LockFactory and Directory work on different directories at all. I already removed lots of outdated APIs like forcefully unlocking.\n\nAlso in this issue, I still want to keep the LockFactory and Directory separation alive, because it allows to configure this much better. But I know we agree on this \n\nI will help on that issue, maybe we should open a branch? I knew from last time that this was a horrible amount of code to touch... "
        },
        {
            "id": "comment-14563862",
            "author": "Robert Muir",
            "date": "2015-05-28T23:12:03+0000",
            "content": "Agreed, I will make a branch, it will take time. I still want to improve tests around this as well.\n\nSome new tests from LUCENE-6507 are better, but to me its still not ideal. I think we should move to a kind of BaseLFTestCase like our other important classes and each impl has a subclass with additional tests for its own pecularities.\n "
        },
        {
            "id": "comment-14563926",
            "author": "Uwe Schindler",
            "date": "2015-05-28T23:47:57+0000",
            "content": "Just for record, so we don't forget:\n\n\n\tthe inner class oal.store.Lock.With is obsolete, it is no longer used anywhere. Can be removed ASAP. It was just there before the famous Java 7 try-with-resources was added. As Lock is closeable now, you can do:\n\n\n\n\ntry (Lock lock = directory.obtainLock(name)) {\n  // do stuff\n}\n\n\n\nSo the class is obsolete. "
        },
        {
            "id": "comment-14563930",
            "author": "Uwe Schindler",
            "date": "2015-05-28T23:52:00+0000",
            "content": "First patch removing this dead code. "
        },
        {
            "id": "comment-14563953",
            "author": "Robert Muir",
            "date": "2015-05-29T00:10:10+0000",
            "content": "Hi Uwe, I propose something like the following. \n\nI like the example usage actually and think we should keep it.\n\nI think javadocs need improvement on the semantics of close(), i dont think we should use specialized exceptions but just deliver any exact exception that happens.\n\nI also want to set things up for impls to improve safety (best-effort) in some cases. For example its dangerous for SimpleFSLockFactory to delete the lock file, if someone removed the file and something else has it.  It just contributes to chaos, when a file creation time check could easily detect it.\n\n\n/** An interprocess mutex lock.\n * <p>Typical use might look like:<pre class=\"prettyprint\">\n *   try (Lock lock = directory.obtainLock(\"my.lock\")) {\n *     public Object doBody() {\n *       <i>... code to execute while locked ...</i>\n *     }\n *   }.run();\n * </pre>\n *\n * @see Directory#obtainLock(String)\n *\n * @lucene.internal\n */\npublic abstract class Lock implements Closeable {\n\n  /** \n   * Releases exclusive access.\n   * <p>\n   * Note that exceptions thrown from close may require\n   * human intervention, as it may mean the lock was no\n   * longer valid, or that fs permissions prevent removal\n   * of the lock file, or other reasons.\n   * <p>\n   * {@inheritDoc} \n   */\n  public abstract void close() throws IOException;\n  \n  /** \n   * Best effort check that this lock is still valid. Locks\n   * could become invalidated externally for a number of reasons,\n   * for example if a user deletes the lock file manually or\n   * when a network filesystem is in use. \n   * @throws IOException if the lock is no longer valid.\n   */\n  public abstract void ensureValid() throws IOException;\n}\n\n "
        },
        {
            "id": "comment-14564135",
            "author": "Robert Muir",
            "date": "2015-05-29T03:12:10+0000",
            "content": "Here is a prototype patch (does not compile, just for looking).\n\nImplements Lock as described above. Directory.obtainLock looks like this:\n\n  /** \n   * Returns an obtained {@link Lock}.\n   * @param name the name of the lock file\n   * @throws IOException if the lock could not be obtained\n   */\n  public abstract Lock obtainLock(String name) throws IOException;\n\n\n\nIndexWriter wraps the directory with a simple DirectoryWrapper, that calls isValid() on the write.lock before any major destructive operation (e.g. createOutput, delete, rename) for best-effort safety.\n\nSimpleFS isValid() is mainly implemented by a ctime check. This LockFactory is interesting because its close() method could potentially release someone else's lock if stuff has gone wrong. It calls isValid() as best effort detection and informs the user if the lock file cannot be safely deleted and doesn't try to delete it. It also informs when things seem ok, but it is unable to delete the file for some reason.\n\nNativeFS checks all necessary components in isValid(): map entry, lock, filechannel, os file descriptor, and underlying file ctime. It doesn't need the careful logic of SimpleFS in close, because nothing external can cause it to release someone else's lock.\n\nIn both cases i tried to improve exception messages and toStrings.\n\nobtain timeout, dangerous loops and discarding exceptions are all removed. There were two justifications for this:\n\n\tclaimed sporatic permission denied on mac os X for NativeFSLock\n\tclaimed sporatic access denied on windows for SimpleFSLock\n\n\n\nEither these were bugs in our previous locking, or real bugs/crazy behavior in the JDK or OS. If its the former, we dont need the timeout ever. If its the latter, lets get specific exceptions and cases and try to dig into what is wrong. Worst case, we should make Windows/OS X versions of LockFactory for any wierd stuff like that, and let them take timeout as their own parameter (user must deal with it). But this should be a LockFactory impl detail. Maybe someone even wants to make a LockFactory that blocks for some crazy reason (uses fc.lock instead of .tryLock)\n\nI didnt try cutting over tests yet or other things, that is more work.\n "
        },
        {
            "id": "comment-14564431",
            "author": "Uwe Schindler",
            "date": "2015-05-29T08:49:41+0000",
            "content": "I like your proposal. I already worked with it and implemented the lock factory tester:\n\nant test-lock-factory passes successfully.\n\nI also changed the javadocs a bit and renamed the ValidatingDirectoryWrapper to LockValidatingDirectoryWrapper. We have way too many validating wrappers, so we should have the term \"Lock\" in the name \n\nWhile implementing the lock stress tester, I noticed that it is now very hard to differentiate between an conventional I/O error and failure to obtain the lock. Maybe we should still \"preserve\" LockObtainFailed Exception. I am not so happy with having no Exception anymore that clearly states that the lock was not successfully obtained (also for users). "
        },
        {
            "id": "comment-14564604",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T11:30:15+0000",
            "content": "Commit 1682421 from Uwe Schindler in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682421 ]\n\nLUCENE-6508: Create branch "
        },
        {
            "id": "comment-14564606",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T11:31:42+0000",
            "content": "Commit 1682422 from Uwe Schindler in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682422 ]\n\nLUCENE-6508: Initial commit of Robert's and Uwe's code "
        },
        {
            "id": "comment-14564849",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T13:59:01+0000",
            "content": "Commit 1682471 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682471 ]\n\nLUCENE-6508: fix some tests/test-framework and fix stupid bug "
        },
        {
            "id": "comment-14564850",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T14:01:40+0000",
            "content": "Commit 1682474 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682474 ]\n\nLUCENE-6508: remove double-obtain tests, no longer possible "
        },
        {
            "id": "comment-14565121",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T17:42:09+0000",
            "content": "Commit 1682520 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682520 ]\n\nLUCENE-6508: fix tests and cleanup "
        },
        {
            "id": "comment-14565141",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T17:52:02+0000",
            "content": "Commit 1682523 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682523 ]\n\nLUCENE-6508: add back LockObtainFailedException but in a simpler way "
        },
        {
            "id": "comment-14565144",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T17:53:44+0000",
            "content": "Commit 1682525 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682525 ]\n\nLUCENE-6508: add back LockObtainFailedException for SingleInstance too "
        },
        {
            "id": "comment-14565158",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T18:03:43+0000",
            "content": "Commit 1682526 from Uwe Schindler in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682526 ]\n\nLUCENE-6508: Make the lock stress tester use new Exception; add Windows-specific Exception to SimpleFSLockFactory "
        },
        {
            "id": "comment-14565827",
            "author": "ASF subversion and git services",
            "date": "2015-05-30T04:34:19+0000",
            "content": "Commit 1682574 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682574 ]\n\nLUCENE-6508: get tests passing "
        },
        {
            "id": "comment-14565846",
            "author": "ASF subversion and git services",
            "date": "2015-05-30T06:00:59+0000",
            "content": "Commit 1682579 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682579 ]\n\nLUCENE-6508: some steps towards back compat and tests "
        },
        {
            "id": "comment-14565858",
            "author": "ASF subversion and git services",
            "date": "2015-05-30T06:36:59+0000",
            "content": "Commit 1682584 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682584 ]\n\nLUCENE-6508: more test reorganization "
        },
        {
            "id": "comment-14565870",
            "author": "ASF subversion and git services",
            "date": "2015-05-30T07:19:41+0000",
            "content": "Commit 1682585 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682585 ]\n\nLUCENE-6508: add more tests "
        },
        {
            "id": "comment-14566441",
            "author": "ASF subversion and git services",
            "date": "2015-05-31T08:05:56+0000",
            "content": "Commit 1682691 from Michael McCandless in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682691 ]\n\nLUCENE-6508: fix 'mock directory not closed' test bugs "
        },
        {
            "id": "comment-14566455",
            "author": "ASF subversion and git services",
            "date": "2015-05-31T08:41:47+0000",
            "content": "Commit 1682697 from Michael McCandless in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682697 ]\n\nLUCENE-6508: also verify lock on fsync "
        },
        {
            "id": "comment-14566456",
            "author": "ASF subversion and git services",
            "date": "2015-05-31T08:42:08+0000",
            "content": "Commit 1682698 from Michael McCandless in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682698 ]\n\nLUCENE-6508: remove sop "
        },
        {
            "id": "comment-14566458",
            "author": "Michael McCandless",
            "date": "2015-05-31T08:43:10+0000",
            "content": "These tests are now angry:\n\nmike@haswell:/l/simplelocks$ mike@haswell:/l/simplelocks$    [junit4] Suite: org.apache.lucene.store.TestMockDirectoryWrapper\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestMockDirectoryWrapper -Dtests.method=testFailIfIndexWriterNotClosed -Dtests.seed=F3213EF45EAF8F1D -Dtests.locale=ar_KW -Dtests.timezone=Asia/Chita -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.11s J2 | TestMockDirectoryWrapper.testFailIfIndexWriterNotClosed <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F3213EF45EAF8F1D:4472AAC3A3E2A5E8]:0)\n   [junit4]    > \tat org.apache.lucene.store.TestMockDirectoryWrapper.testFailIfIndexWriterNotClosed(TestMockDirectoryWrapper.java:55)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestMockDirectoryWrapper -Dtests.method=testFailIfIndexWriterNotClosedChangeLockFactory -Dtests.seed=F3213EF45EAF8F1D -Dtests.locale=ar_KW -Dtests.timezone=Asia/Chita -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.02s J2 | TestMockDirectoryWrapper.testFailIfIndexWriterNotClosedChangeLockFactory <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F3213EF45EAF8F1D:1980EAD08BE28029]:0)\n   [junit4]    > \tat org.apache.lucene.store.TestMockDirectoryWrapper.testFailIfIndexWriterNotClosedChangeLockFactory(TestMockDirectoryWrapper.java:68)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nWe are not tracking openLocks anymore in MDW? "
        },
        {
            "id": "comment-14566460",
            "author": "Michael McCandless",
            "date": "2015-05-31T08:43:46+0000",
            "content": "I love the \"changed by an external force\" exception!\n\nNice javadocs catch about now anciently wrong \"IndexReader holding a write lock\"!\n\nI wonder if we even need to pass a lock name anymore?  Maybe it can\njust be Directory.obtainWriteLock()?\n\nI love how you implemented the lock timeout (wrapping with a sleeper,\nwith awesome \"This is not a good idea.\" javadocs) but I really think\nwe should just remove the timeout: I don't see a valid use case\n... but we can do this separately.\n\nThe new BaseLockFactoryTestCase refactoring is awesome.\n\nI also love the LockValidatingDirectoryWrapper approach; hopefully the\nadditional IO ops per desctructive op is not too costly on\nindexing/NRT reopen latency. "
        },
        {
            "id": "comment-14566535",
            "author": "Robert Muir",
            "date": "2015-05-31T12:31:54+0000",
            "content": "\nWe are not tracking openLocks anymore in MDW?\n\nRight, the AssertingLock in there was horrible. Its gone. We don't need sketchy mocking layers that will hide bugs. Start simple with the minimal stuff is the idea here.\n\n\nI love how you implemented the lock timeout (wrapping with a sleeper,\nwith awesome \"This is not a good idea.\" javadocs) but I really think\nwe should just remove the timeout: I don't see a valid use case\n... but we can do this separately.\n\nI don't want complaints about how i broke back compat behavior here, that happened the last time i fixed bugs in locks. Thats why you get a sleeper by default: I know how solr loves its sleeps! "
        },
        {
            "id": "comment-14566544",
            "author": "Uwe Schindler",
            "date": "2015-05-31T13:00:42+0000",
            "content": "I started fixing HdfsLockFactory and Solr:\n\n\tI just need to fix tests for Hdfs, the impl is already there - will commit once I am ready\n\tHDFS ensureValid() is not yet implemented, but I will more or less copyPaste from SimpleFS.\n\tI had to remove the enforcing unlocker in Solr. I also removed the setting from SolrConfig. With NativeFSLockFactory it cannot happen anymore. Those using SimpleFS or HdFS need to manually unlock by deleting the file. I added a message about that to the SolrException on core startup.\n\n "
        },
        {
            "id": "comment-14566545",
            "author": "ASF subversion and git services",
            "date": "2015-05-31T13:15:58+0000",
            "content": "Commit 1682732 from Uwe Schindler in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682732 ]\n\nLUCENE-6508: First try to fix Solr and HDFS (completely untested, because I am on Windows) "
        },
        {
            "id": "comment-14566743",
            "author": "Robert Muir",
            "date": "2015-05-31T21:28:38+0000",
            "content": "\nI wonder if we even need to pass a lock name anymore? Maybe it can\njust be Directory.obtainWriteLock()?\n\nI thought about this too, but for a number of reasons I dislike it:\n\n\tleave the possibility of other locks for other purposes if we need them.\n\tmajor conceptual \"break\" for any code using it today.\n\tmakes backwards compat/5.x impossible.\n\n\n\nOn the other hand, with the current situation, i could see this stuff in a 5.3 release. The breaks are contained, locking is marked lucene.internal already anyway. And we could even add more back compat if we really really need it (e.g. add back Dir.makeLock deprecated with some wrapper over the now simpler api).\n\nI think its important that if make this kind of thing better, we get it out there... I made a lot of compromises to do this! I added back the specialized exceptions, I added sleepinglockfactory, added back IWconfig timeout, even enabled that by default (we can discuss somewhere). I even added back the horrible IndexWriter.isLocked, with big scary warnings:\n\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  public static boolean isLocked(Directory directory) throws IOException {\n\n\nTo me its worth the trouble... "
        },
        {
            "id": "comment-14567130",
            "author": "ASF subversion and git services",
            "date": "2015-06-01T10:18:06+0000",
            "content": "Commit 1682861 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682861 ]\n\nLUCENE-6508: add back lock validation, correctly, modulo PSDP... "
        },
        {
            "id": "comment-14567137",
            "author": "Michael McCandless",
            "date": "2015-06-01T10:29:00+0000",
            "content": "I thought about this too, but for a number of reasons I dislike it:\n\nBut locking is already an internal API, so we are free to do this simplification on 5.x?\n\nWe are a search engine not a generic locking platform.\n\nIt doesn't make sense that our locking impl be generic beyond what we need internally (\"only one thing can write to a directory at a time\").\n\nOr, maybe:\n\nleave the possibility of other locks for other purposes if we need them.\n\n...you could shed light on what future locking needs Lucene might have?  I feel like we should design for today, especially on a part of Lucene that has had so much trouble/bugs.\n\nMaybe as a compromise we could fix the API to refuse to make any lock that's not named IndexWriter.WRITE_LOCK_NAME.\n\nAnyway, I'm OK with leaving the API \"generic\" (pass any lock name you want) here... this branch already has enough great improvements.  We should wrap it up and commit... "
        },
        {
            "id": "comment-14567138",
            "author": "ASF subversion and git services",
            "date": "2015-06-01T10:29:04+0000",
            "content": "Commit 1682867 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682867 ]\n\nLUCENE-6508: fix IFD to use unwrapped dir for commit points, all tests pass... "
        },
        {
            "id": "comment-14567155",
            "author": "Robert Muir",
            "date": "2015-06-01T10:45:29+0000",
            "content": "\n...you could shed light on what future locking needs Lucene might have? I feel like we should design for today, especially on a part of Lucene that has had so much trouble/bugs.\n\nWell for example, we could have a commit lock again. I'm not pushing for it at all, I'm just saying its a valid option.\n\nAs I explained, I went for the path of least resistance: you know adding some deprecated methods and even keeping defaults the same (like timeout stuff). \n\nI think this makes the change easier to digest, and as followups to this issue i'd propose:\n\n\tre-evaluate default lock timeout in IWC (this could even be a version-based change or whatever we want to do, but i like a default of zero).\n\teradicate any usage of stuff like IndexWriter.isLocked, which IMO is generally a bug.\n\tsee if we can add back an AssertingLock and/or add lock mocking to mockfs, but one that doesn't suck or hide bugs.\n\n "
        },
        {
            "id": "comment-14567169",
            "author": "ASF subversion and git services",
            "date": "2015-06-01T11:02:46+0000",
            "content": "Commit 1682870 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682870 ]\n\nLUCENE-6508: AssertingLock is gone "
        },
        {
            "id": "comment-14567232",
            "author": "ASF subversion and git services",
            "date": "2015-06-01T12:19:14+0000",
            "content": "Commit 1682882 from Robert Muir in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1682882 ]\n\nLUCENE-6508: don't make this code scary... "
        },
        {
            "id": "comment-14567256",
            "author": "Robert Muir",
            "date": "2015-06-01T12:37:58+0000",
            "content": "I made a patch from the branch changes here. (I removed some whitespace noise and added a CHANGES.txt message). I've done testing on linux, windows, and mac. "
        },
        {
            "id": "comment-14567293",
            "author": "Michael McCandless",
            "date": "2015-06-01T13:39:02+0000",
            "content": "+1, patch looks great, thanks Rob. "
        },
        {
            "id": "comment-14568928",
            "author": "ASF subversion and git services",
            "date": "2015-06-02T10:51:06+0000",
            "content": "Commit 1683073 from Uwe Schindler in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1683073 ]\n\nLUCENE-6508: Add a note that Solr no longer supports unlockOnStartup. Also remove from example configs. "
        },
        {
            "id": "comment-14568931",
            "author": "Uwe Schindler",
            "date": "2015-06-02T10:54:54+0000",
            "content": "I just committed some Solr changes (removing unlocking on startup from config files). I also changes the error message that is displayed if index is locked on startup.\n\nCan you merge that into your patch. I have not seen your changes.txt in the branch. Should I add the Solr part to Solr's changes.txt?\n\nOtherwise I will review the patch after my talk later after buzzwords. "
        },
        {
            "id": "comment-14568958",
            "author": "Robert Muir",
            "date": "2015-06-02T11:17:12+0000",
            "content": "\n I have not seen your changes.txt in the branch.\n\nThat is because I added it to the patch (and removed silly whitespace noise). Don't worry, I will take care of this.\n\n\n Should I add the Solr part to Solr's changes.txt?\n\nplease!\n "
        },
        {
            "id": "comment-14569044",
            "author": "ASF subversion and git services",
            "date": "2015-06-02T12:48:44+0000",
            "content": "Commit 1683088 from Uwe Schindler in branch 'dev/branches/lucene6508'\n[ https://svn.apache.org/r1683088 ]\n\nLUCENE-6508: Add changes text for Lucene and Solr "
        },
        {
            "id": "comment-14569045",
            "author": "Uwe Schindler",
            "date": "2015-06-02T12:49:39+0000",
            "content": "Hi Robert, I added the changes entries. I also copied the changes extry for lucene from your patch and committed. "
        },
        {
            "id": "comment-14569058",
            "author": "Uwe Schindler",
            "date": "2015-06-02T12:59:53+0000",
            "content": "Patch looks OK for me. I did not ran test on windows (only battery power).\n\nI am not sure if the SleepingLockFactory should be public: What happens if somebody sets lock timeouts in IndexWriterConfig but also wraps the directory...  "
        },
        {
            "id": "comment-14569067",
            "author": "Robert Muir",
            "date": "2015-06-02T13:06:57+0000",
            "content": "I can't argue with this. I forgot to make it un-public. My original intention was to remove the timeout stuff in IndexWriterConfig and you just use this Sleeping factory if you want sleeping and retrying.\n\nBut I think a better path is to first look at changing the IndexWriterConfig default to be zero and deprecating it. If someone wants sleeping, we can just have that factory (and it has tests already). But i want all that under a separate issue from this one. "
        },
        {
            "id": "comment-14569071",
            "author": "Uwe Schindler",
            "date": "2015-06-02T13:11:20+0000",
            "content": "Ok. That would be my proposal, too. I just had this in mind after I clicked the comment button.\n\nso +1 to a separate issue and deprecating it in IndexWriterConfig. "
        },
        {
            "id": "comment-14572743",
            "author": "Robert Muir",
            "date": "2015-06-04T13:26:42+0000",
            "content": "Updated patch with Uwe's changes and making SleepingLockFactory package-private. "
        },
        {
            "id": "comment-14572774",
            "author": "Uwe Schindler",
            "date": "2015-06-04T13:47:06+0000",
            "content": "+1 LGTM "
        },
        {
            "id": "comment-14573314",
            "author": "ASF subversion and git services",
            "date": "2015-06-04T18:20:46+0000",
            "content": "Commit 1683606 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1683606 ]\n\nLUCENE-6508: Simplify directory/lock API "
        },
        {
            "id": "comment-14573369",
            "author": "ASF subversion and git services",
            "date": "2015-06-04T18:46:36+0000",
            "content": "Commit 1683609 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1683609 ]\n\nLUCENE-6508: Simplify directory/lock API "
        },
        {
            "id": "comment-14713159",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:56+0000",
            "content": "Bulk close for 5.3.0 release "
        },
        {
            "id": "comment-14717130",
            "author": "ASF subversion and git services",
            "date": "2015-08-27T17:35:43+0000",
            "content": "Commit 1698200 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1698200 ]\n\nSOLR-7942: Previously removed unlockOnStartup option (LUCENE-6508) now logs warning if configured, will be an error in 6.0.  Also improved error msg if an index is locked on startup "
        },
        {
            "id": "comment-14717203",
            "author": "ASF subversion and git services",
            "date": "2015-08-27T18:12:13+0000",
            "content": "Commit 1698203 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1698203 ]\n\nSOLR-7942: Previously removed unlockOnStartup option (LUCENE-6508) now logs warning if configured, will be an error in 6.0.  Also improved error msg if an index is locked on startup (merge r1698200) "
        }
    ]
}