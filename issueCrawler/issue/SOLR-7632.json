{
    "id": "SOLR-7632",
    "title": "Change the ExtractingRequestHandler to use Tika-Server",
    "details": {
        "components": [
            "contrib - Solr Cell (Tika extraction)"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Reopened",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "It's a pain to upgrade Tika's jars all the times when we release, and if Tika fails it messes up the ExtractingRequestHandler (e.g., the document type caused Tika to fail, etc). A more reliable way and also separated, and easier to deploy version of the ExtractingRequestHandler would make a network call to the Tika JAXRS server, and then call Tika on the Solr server side, get the results and then index the information that way. I have a patch in the works from the DARPA Memex project and I hope to post it soon.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-04T04:29:59+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I think it would make sense to first test this as a separate handler for those who want it. Tika is used in multiple places anyway (DIH), so you can't just rip it out for multiple reasons.\n\nBut having Tika-Server as an option in a separate handler would be nice.\n\nP.s. \"Fixed in 5.0.1\" does not look right. This is not done yet and we are already locked down for 5.2.  ",
            "id": "comment-14572108"
        },
        {
            "date": "2015-06-04T04:33:30+0000",
            "author": "Chris A. Mattmann",
            "content": "Hi,\n\nI wasn't going to rip anything out. I was just going to update SolrCell to do this. That was my approach. It doesn't rip Tika out it simply removes the build dependencies for SolrCell on Tika, and then adds a single dependency to Apache CXF.\n\nAdding a new handler doesn't make sense to me - people recognize SolrCell - and use it including myself. Why wouldn't this just be an upgrade to SolrCell.\n\nRE: the version - sorry I just picked the next lowest unreleased version. I untagged the version on it now. ",
            "id": "comment-14572114"
        },
        {
            "date": "2015-06-04T04:37:01+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Not everybody will want to run a network server. Most people will probably just prefer the ease of use of whatever Tika ships with Solr. So, it would have to be either switch (bundled or server) and additional options for server location. \n\nSo, I felt that a separate handler for server option might make more sense.  That's my reasoning anyway. ",
            "id": "comment-14572117"
        },
        {
            "date": "2015-06-04T04:37:54+0000",
            "author": "Chris A. Mattmann",
            "content": "OK, no problem. I'll go ahead and resolve this then, and just put it up on Github. Thanks. ",
            "id": "comment-14572119"
        },
        {
            "date": "2015-06-04T13:10:50+0000",
            "author": "Erik Hatcher",
            "content": "Chris A. Mattmann wait, don't close \"won't fix\" so fast!   I think this would be a nice addition, but as an option such that /update/extract would use Tika embedded by default or when configured to do so, send the documents to Tika-Server. \n\nOut of curiosity, can Tika-Server forward it's processed output instead of sending back to the posting client?   If so, then one could put Tika-Server between a client and Solr without the client having to send to Tika-Server, get the results, package them up, and send to Solr. ",
            "id": "comment-14572729"
        },
        {
            "date": "2015-06-05T02:52:44+0000",
            "author": "Chris A. Mattmann",
            "content": "Hi Erik Hatcher thanks. On the forwarding end, good question. We did implement CORS in Tika Server, so this may allow it to do that, but am not totally positive. I think having this as an option in Solr would be useful too, as part of the /update/extract of course. I'll post what I have soon. ",
            "id": "comment-14573972"
        },
        {
            "date": "2015-07-06T20:06:45+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Just wanted to follow-up on this. What's the Github repo for this? It is a good idea, so would be nice not to loose the track of it. ",
            "id": "comment-14615556"
        },
        {
            "date": "2015-07-06T20:08:31+0000",
            "author": "Chris A. Mattmann",
            "content": "Thanks I haven't lost track - I was just thinking of this today! \n\nHopefully will have a PR that I can submit in the next few days. ",
            "id": "comment-14615559"
        },
        {
            "date": "2016-06-20T13:48:45+0000",
            "author": "Tim Allison",
            "content": "Given the effort that Uwe Schindler and Lewis John McGibbney just went through to upgrade to Tika 1.13...I think we might want to pick up work on this issue again.\n\nTo carry out Erik Hatcher's recommendation...I don't know if we'd need CORS for this or not, but it might be neat to modify Tika's server to allow users to inject their own resources=endpoints via a config file and an extra jar.  Within the Solr project, we'd just have to implement a resource that takes an input stream, runs Tika and then adds a SolrInputDocument.\n\nFor simplicity, it will take some effort on the Solr devs' side to figure out how to start and stop at least one tika-server seamlessly so that the \"getting started\" user doesn't have to do a thing.\n\nFor scaling, one could imagine users configuring multiple tika-servers, and the handler randomly selecting which tika-server to hit (I'm sure there are better strategies, but random selection could get us started).\n\nI'm more than happy to contribute on the Tika side and on some of the integration with Solr side.  Any takers among the Solr devs? \n\nOverall, is this the right direction?  Is this worth the effort given the number of other options for ETL into Solr? ",
            "id": "comment-15339513"
        },
        {
            "date": "2016-06-20T14:03:59+0000",
            "author": "Chris A. Mattmann",
            "content": "Tim, I had started working on this on the MEMEX project and have a start at it. I decided to simply not reuse any of the contrib/extraction code and just started a new plugin. I'll put it up on GitHub soon. ",
            "id": "comment-15339531"
        },
        {
            "date": "2016-06-20T14:08:07+0000",
            "author": "Tim Allison",
            "content": "Great! Y, that makes sense. ",
            "id": "comment-15339536"
        },
        {
            "date": "2017-12-04T14:50:54+0000",
            "author": "Tim Allison",
            "content": "To carry out Erik Hatcher's recommendation...I don't know if we'd need CORS for this or not, but it might be neat to modify Tika's server to allow users to inject their own resources=endpoints via a config file and an extra jar. Within the Solr project, we'd just have to implement a resource that takes an input stream, runs Tika and then adds a SolrInputDocument.\n\nGiuseppe Totaro has proposed allowing users to configure a custom ContentHandler in tika-server.  This could enable Solr to create its own content handler that tika-server could use to send the extracted text to Solr on endDocument(). ",
            "id": "comment-16276888"
        }
    ]
}