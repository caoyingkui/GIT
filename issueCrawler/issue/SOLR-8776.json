{
    "id": "SOLR-8776",
    "title": "Support RankQuery in grouping",
    "details": {
        "components": [
            "search"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Currently it is not possible to use RankQuery [1] and Grouping [2] together (see also [3]). In some situations Grouping can be replaced by Collapse and Expand Results [4] (that supports reranking), but i) collapse cannot guarantee that at least a minimum number of groups will be returned for a query, and ii) in the Solr Cloud setting you will have constraints on how to partition the documents among the shards.\n\nI'm going to start working on supporting RankQuery in grouping. I'll start attaching a patch with a test that fails because grouping does not support the rank query and then I'll try to fix the problem, starting from the non distributed setting (GroupingSearch).\n\nMy feeling is that since grouping is mostly performed by Lucene, RankQuery should be refactored and moved (or partially moved) there. \n\nAny feedback is welcome.\n\n[1] https://cwiki.apache.org/confluence/display/solr/RankQuery+API \n[2] https://cwiki.apache.org/confluence/display/solr/Result+Grouping\n[3] http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201507.mbox/%3CCAHM-LpuvsPEsT-Sw63_8a6gt-wOr6dS_T_Nb2rOpe93e4+sTNQ@mail.gmail.com%3E\n[4] https://cwiki.apache.org/confluence/display/solr/Collapse+and+Expand+Results",
    "attachments": {
        "0001-SOLR-8776-Support-RankQuery-in-grouping.patch": "https://issues.apache.org/jira/secure/attachment/12790970/0001-SOLR-8776-Support-RankQuery-in-grouping.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-02T15:46:15+0000",
            "author": "Joel Bernstein",
            "content": "Moving the RankQuery into Lucene is a showstopper I believe because of the MergeStrategy which is very specific to how Solr merges documents from the shards.\n\nThere are portions of the grouping code in Solr. It might be best to first start looking to see if you can get the RankQuery added on the Solr side. ",
            "id": "comment-15175817"
        },
        {
            "date": "2016-03-02T17:30:41+0000",
            "author": "Diego Ceccarelli",
            "content": "add a unit test that fails since grouping ignores the RankQuery ",
            "id": "comment-15176038"
        },
        {
            "date": "2016-03-10T17:06:47+0000",
            "author": "Diego Ceccarelli",
            "content": "Joel Bernstein thanks for pointing out about the MergeStrategy. I uploaded a new patch with a first step. I agree that merge strategy must stay there, that's why I wrote \"partially moved\"    as well as there's IndexSearcher and SolrIndexSearcher, I moved RankQuery into Lucene and created SolrRankQuery.  The reason is that the RankQuery works by manipulating the collector, through this method:\n\n\npublic abstract TopDocsCollector getTopDocsCollector(int len, QueryCommand cmd, IndexSearcher searcher) throws IOException;\n\n\n\nAt the moment  in SolrIndexSearcher there's a special case if a query is a RankQuery,\n\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n    ..\n\n\n\nInstead of creating a top collector using the TopScoreDocCollector.create, we wrap a topScoreCollector into a 'RankQuery collector'.\n\nLet me remind that grouping works in two separate stages:\n\n\tin the first stage, we iterate on the documents scoring them and keep a map <group -> score> where score is the highest score of a document in the group (the map contains only the TOP-k groups with the highest scores);\n\tfor each group,  the documents in the group are ranked and TOP-n documents for each group are returned.\n\n\n\nThis logic is mainly implemented into Abstract(First|Second)PassGroupingCollector (within Lucene). \n\nWe should probably discuss what means reranking for groups: in my opinion we should keep in mind that the idea behind RankQuery is that you don't want to apply the query to all the documents in the collection, so \"group-reranking\" should: \n\n\tin the first stage, iterate on the documents scoring them as usual and keep a map <group -> score>;\n\tfor each group, apply RankQuery to the top documents in the group;\n\trerank the groups according to the new scores.\n\n\n\nIn this patch, I'm able to perform 2. I had to move RankQuery into Lucene, because what happens in the AbstractSecondPassGroupingCollector is that for each group a collector is created: \n\n\n for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n    ...\n\n\n\n... so no way to 'inject' the RankQuery collector from Solr. Moving the RankQuery into lucene I modified the code in: \n\n\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n        if (query != null && query instanceof RankQuery){\n          collector = ((RankQuery)query).getTopDocsCollector(collector, null, searcher);\n        }\n\n\n\nand now documents in groups are reranked based on the RankQuery scores. I'll work now on 3. i.e., reordering the groups based on the new RankQuery score (I added a new test that fails at the moment). \nHappy to discuss about this first change, if you have comments.\n\nMinor notes: \n\n\tAt the moment SolrRankQuery doesn't extend ExtendedQueryBase, I have to check if it is a problem. Otherwise RankQuery could become an interface maybe.\n\tI did some changes to the interface of RankQuery.getTopDocsCollector: QueryCommand was in Solr but used only for getting Sort, len was never used. I added in input the previous collector, instead of creating a new TopDocScore collector inside RankQuery.\n\tPlease keep in mind that, as starting point, I'm trying to solve the issue in the non distributed setting and if we're grouping on a field.\n\n ",
            "id": "comment-15189552"
        },
        {
            "date": "2016-03-11T12:36:47+0000",
            "author": "Diego Ceccarelli",
            "content": "I uploaded a new patch, now groups are reranked according to the reranking max scores, in the finish() method of the grouping CommandField I added: \n\n\nif (result != null && query instanceof RankQuery && groupSort == Sort.RELEVANCE){\n        // if we are sorting for relevance and query is a RankQuery, it may be that\n        // the order of the groups changed, we need to reorder\n        GroupDocs[] groups = result.groups;\n        Arrays.sort(groups, new Comparator<GroupDocs>() {\n          @Override\n          public int compare(GroupDocs o1, GroupDocs o2) {\n              if (o1.maxScore > o2.maxScore) return -1;\n              if (o1.maxScore < o2.maxScore) return 1; \n              return 0;\n          }});\n      }\n\n\n\nThis will reorder the groups if we re-rank the documents with the rank query. The second test succeeds. \n\nI'm still thinking what it should be the correct semantic to implement reranking + grouping: \n\nWhen you apply a query q and then a rank-query rq , you first score all the documents and then rescore top-N documents with the rank-query. The problem with grouping is that in order to get the top-groups you first need to score the collection: you may have a document that scored really low with q but got a high score with rq, but the only way to find it is to rerank the whole collection (impracticable). There are two possible solutions then:\n\n\tif we want to apply rq on the top 1000 documents, we can collect the groups in the top-1000 documents, and they will be the same obtained scoring directly with rq, but in a different order;\n\twe can collect more groups than what we need, and then rerank the top documents in each group - I would call this solution: *Group Reranking*.\n\n\n\nIn my opinion group reranking is a better solution: imagine we have a group containing the top-1000 documents ranked with q we will rerank them maybe just to return one document. I guess the best would be, assuming that we want to apply rerank query to N documents and return the top K groups you can retrieve top K*y groups and then rerank N/(K*y) documents in each group.\n ",
            "id": "comment-15190864"
        },
        {
            "date": "2016-03-14T18:55:24+0000",
            "author": "Diego Ceccarelli",
            "content": "Update: I found a way to change the behavior of the collectors without moving RankQuery into Lucene. This new patch performs the group reranking without changing Lucene. The only difference is that if the Query is a RankQuery instead of using TermSecondPassGroupingCollector I'll use a RerankTermSecondPassGroupingCollector. The new collector will scan the groups collectors and wrap them in 'rerank collectors': \n\nfor (SearchGroup<BytesRef> group : groups) {\nif (query != null) {\n          collector = groupMap.get(group.groupValue).collector;\n          collector = query.getTopDocsCollector(collector, groupSort, searcher);\n          groupMap.put(group.groupValue, new SearchGroupDocs<BytesRef>(group.groupValue, collector));\n        }\n}\n\n\n\n ",
            "id": "comment-15193892"
        },
        {
            "date": "2016-05-26T09:30:40+0000",
            "author": "Ahmet Anil Pala",
            "content": "Hi,\n\nWhich branch is this patch compatible with? I've tried branch_6x and branch_6_0. Although, the patch was successfully applied, it prevented the source from compiling. ",
            "id": "comment-15301877"
        },
        {
            "date": "2016-05-26T14:59:07+0000",
            "author": "Diego Ceccarelli",
            "content": "Thanks Ahmet Anil Pala, a file was missing in the patch, I just submitted a new patch with the missing file, and I tested it on the latest upstream version (last commit 268da5be4), please do not hesitate to contact me if you have comments   ",
            "id": "comment-15302188"
        },
        {
            "date": "2017-02-28T17:16:09+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user diegoceccarelli opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/162\n\n    SOLR-8776: Support RankQuery in grouping\n\n    Update SOLR-8776 to current master\n\n\tReranking and grouping work together in non-distributed setting when grouping is done by field\n\tStill have to fix for distribute setting and for grouping based on the unique values of a function query.\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bloomberg/lucene-solr master-solr-8776\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/162.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #162\n\n\ncommit cd33172184c3889dfe95c631e7c30729f1c752a3\nAuthor: diego <diego.ceccarelli@gmail.com>\nDate:   2017-02-28T10:28:32Z\n\n    SOLR-8776: Support RankQuery in grouping\n\n ",
            "id": "comment-15888478"
        },
        {
            "date": "2017-04-03T14:42:33+0000",
            "author": "Diego Ceccarelli",
            "content": "Hi all, I updated the PR (https://github.com/apache/lucene-solr/pull/162) now it supports reranking by field and by function query, and reranking by field in distribute setting - I have working tests for all the use cases. \nThere are still some details to fix:\n\n\n\tI had to remove final from GroupDocs::maxScore and GroupDocs::score (I can easily fix this I think)\n\tRerank(Function|Group)SecondPassGroupingCollector have the number of documents to rerank hardcoded in the class because RankQuery doesn't expose that value (I think it should)\n\n\n\nJoel Bernstein, Martijn van Groningen, Alan Woodward any feedback?  ",
            "id": "comment-15953586"
        },
        {
            "date": "2017-05-10T17:20:49+0000",
            "author": "Diego Ceccarelli",
            "content": "Hi all, I updated the PR (https://github.com/apache/lucene-solr/pull/162), highlights: \n\nAlan Woodward,Martijn van Groningen now the patch relies on the new grouping code  I had to add a new protected constructor to TopGroupsCollector to inject my own GroupReducer. Could you please take a look at let me know if it makes sense? also in SecondPassGroupingCollector#L54 \nSecondPassGroupingCollector.java\npublic SecondPassGroupingCollector(GroupSelector<T> groupSelector, Collection<SearchGroup<T>> groups, GroupReducer<T, ?> reducer) {\n\n    //System.out.println(\"SP init\");\n    //Do we want to check if groups is null here? instead of checking at line 62?\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groupSelector = Objects.requireNonNull(groupSelector);\n    this.groupSelector.setGroups(groups);\n    this.groups = Objects.requireNonNull(groups);\n\n\n\nI would check if groups != null before groups.isEmpty().\n\n2.  I changed the logic to rerank groups and not only documents: for example if a user ask to rerank the top 100 documents: q=greetings&rows=10&rq={!rerank reRankQuery=$rqq reRankDocs=100 reRankWeight=3}&rqq=(hi+hello+hey+hiya):\n\n\tthe top 100 groups matching greeting are retrieved;\n\ttop 100 groups are reranked by rqq;\n\tfinally the top 10 reranked groups are returned;\n\tinside each group documents will be reranked as well.\n(it's worth to note that for simplicity, in distribute mode first pass will retrieve the top 100 groups from all the shards, the federator will compute the top 100 groups and send them to the shards to get the reranking scores, and finally the federator will return the top 10) \n\n\n\nIMO the patch is now complete and I've working unit tests. Please, can someone review it? \n\n ",
            "id": "comment-16005060"
        },
        {
            "date": "2017-05-22T15:23:55+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user romseygeek commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/162#discussion_r117773779\n\n    \u2014 Diff: lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector.java \u2014\n    @@ -39,6 +39,14 @@\n       private final Sort withinGroupSort;\n       private final int maxDocsPerGroup;\n\n    +  protected TopGroupsCollector(GroupReducer<T, TopDocsCollector<?>> groupReducer, GroupSelector<T> groupSelector, Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n    +                            int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields) {\n    +    super(groupSelector, groups, groupReducer);\n    \u2014 End diff \u2013\n\n    You can remove a few of these parameters now, I think?  They're for the Reducer, and as such don't need to be passed separately. ",
            "id": "comment-16019698"
        },
        {
            "date": "2018-05-31T09:03:02+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi all, I am quite interested in this Jira,\nany update on this ?\nI believe it would quite handy to have the Learning To Rank module working with grouping ! ",
            "id": "comment-16496289"
        }
    ]
}