{
    "id": "LUCENE-5886",
    "title": "current ecj-javadoc-lint crashes on SharedFSAutoReplicaFailoverUtilsTest / update build to work with Java 9",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "It seems the version we are using has bugs that are tripped by this test.\nWe are using 3.7.2, I think we should upgrade to 4.4?\nIt seems to solve the issue for me.\n\nWe should also update our build files to make ecj also be executed on Java 8, but not on Java 9.\n\nSo we need to add checks for Java 9.",
    "attachments": {
        "LUCENE-5886.patch": "https://issues.apache.org/jira/secure/attachment/12661714/LUCENE-5886.patch",
        "java9detection.patch": "https://issues.apache.org/jira/secure/attachment/12662043/java9detection.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14096981",
            "author": "Robert Muir",
            "content": "Attached is a patch upgrading the version.\n\n'ant precommit' passes with it, whereas in trunk right now it fails with the bug:\n\n-ecj-javadoc-lint-tests:\n [ecj-lint] Compiling 466 source files\n [ecj-lint] org.eclipse.jdt.internal.compiler.problem.AbortMethod: \n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.SingleNameReference.generatePostIncrement(SingleNameReference.java:748)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.PostfixExpression.generateCode(PostfixExpression.java:40)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.Expression.generateOptimizedStringConcatenation(Expression.java:726)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.codegen.CodeStream.generateStringConcatenationAppend(CodeStream.java:2352)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.BinaryExpression.generateCode(BinaryExpression.java:127)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.generateCode(LocalDeclaration.java:133)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.SwitchStatement.generateCodeForStringSwitch(SwitchStatement.java:268)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.SwitchStatement.generateCode(SwitchStatement.java:307)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.Block.generateCode(Block.java:51)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.WhileStatement.generateCode(WhileStatement.java:227)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:237)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:182)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:543)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:612)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:360)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:774)\n [ecj-lint] \tat org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)\n [ecj-lint] \tat java.lang.Thread.run(Thread.java:745)\n [ecj-lint] invalid Class-Path header in manifest of jar file: /home/rmuir/workspace/trunk-termsdict/solr/core/lib/org.restlet-2.1.1.jar\n [ecj-lint] invalid Class-Path header in manifest of jar file: /home/rmuir/workspace/trunk-termsdict/solr/core/lib/org.restlet.ext.servlet-2.1.1.jar\n [ecj-lint] ----------\n [ecj-lint] 1. ERROR in /home/rmuir/workspace/trunk-termsdict/solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest.java (at line 0)\n [ecj-lint] \tpackage org.apache.solr.cloud;\n [ecj-lint] \t^\n [ecj-lint] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null at org.eclipse.jdt.internal.compiler.codegen.StackMapFrame.addStackItem(StackMapFrame.java:81)\n [ecj-lint] ----------\n [ecj-lint] info cannot be null\n\nBUILD FAILED\n/home/rmuir/workspace/trunk-termsdict/build.xml:63: The following error occurred while executing this line:\n\n ",
            "date": "2014-08-14T14:06:49+0000"
        },
        {
            "id": "comment-14096983",
            "author": "Uwe Schindler",
            "content": "If 4.4 works I am happy. I tried to upgrade it several times and it caused issues with Java 8 and so on. ",
            "date": "2014-08-14T14:10:14+0000"
        },
        {
            "id": "comment-14096985",
            "author": "Robert Muir",
            "content": "give me a moment to run precommit with java8 as well: I will test it. ",
            "date": "2014-08-14T14:11:51+0000"
        },
        {
            "id": "comment-14096992",
            "author": "Michael McCandless",
            "content": "I'm seeing this too... ",
            "date": "2014-08-14T14:16:06+0000"
        },
        {
            "id": "comment-14096993",
            "author": "Robert Muir",
            "content": "Currently this is not even run with java8 (i am testing precommit anyway).\n\n  <condition property=\"ecj-javadoc-lint.supported\">\n    <not><equals arg1=\"${build.java.runtime}\" arg2=\"1.8\"/></not>\n  </condition>\n\n\n\nFirst i want to unbreak the build. Later we can see if its possible to remove this check. ",
            "date": "2014-08-14T14:16:53+0000"
        },
        {
            "id": "comment-14096994",
            "author": "Uwe Schindler",
            "content": "+1 to commit. Remove the check later! I think we should keep the condition as template for Java 9, but make it <true/> by default  ",
            "date": "2014-08-14T14:20:16+0000"
        },
        {
            "id": "comment-14096998",
            "author": "ASF subversion and git services",
            "content": "Commit 1617955 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1617955 ]\n\nLUCENE-5886: upgrade ecj to workaround compiler bug in precommit ",
            "date": "2014-08-14T14:21:56+0000"
        },
        {
            "id": "comment-14097000",
            "author": "Mark Miller",
            "content": "Thanks Robert! ",
            "date": "2014-08-14T14:24:19+0000"
        },
        {
            "id": "comment-14097009",
            "author": "ASF subversion and git services",
            "content": "Commit 1617957 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1617957 ]\n\nLUCENE-5886: upgrade ecj to workaround compiler bug in precommit ",
            "date": "2014-08-14T14:29:15+0000"
        },
        {
            "id": "comment-14097015",
            "author": "Robert Muir",
            "content": "I will leave the issue open, in case we can fix the java 8 check.  At some point I think we want to support java 8 in ant tasks like this.\nThis also prevents annoyances for developers if they accidentally run precommit with java8...\n\nI made the following change and can confirm this new version works fine with a java8 compiler set:\n\nIndex: common-build.xml\n===================================================================\n--- common-build.xml\t(revision 1617955)\n+++ common-build.xml\t(working copy)\n@@ -1798,7 +1798,7 @@\n   <!-- ECJ Javadoc linting: -->\n   \n   <condition property=\"ecj-javadoc-lint.supported\">\n-    <not><equals arg1=\"${build.java.runtime}\" arg2=\"1.8\"/></not>\n+    <not><equals arg1=\"${build.java.runtime}\" arg2=\"1.9\"/></not>\n   </condition>\n \n   <condition property=\"ecj-javadoc-lint-tests.supported\">\n\n\n\n\n\nBut I think Uwe is right, we should ideally not disable the check like this, but instead change this to a check for 1.9 (but I don't know how to check for existence of java 9, we need a new method). ",
            "date": "2014-08-14T14:41:16+0000"
        },
        {
            "id": "comment-14097019",
            "author": "Uwe Schindler",
            "content": "+1 I will take care of the check ",
            "date": "2014-08-14T14:44:03+0000"
        },
        {
            "id": "comment-14097021",
            "author": "ASF subversion and git services",
            "content": "Commit 1617959 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1617959 ]\n\nLUCENE-5886: allow precommit to be run with java8. still TODO: we need to be able to actually detect 1.9 ",
            "date": "2014-08-14T14:45:22+0000"
        },
        {
            "id": "comment-14097022",
            "author": "ASF subversion and git services",
            "content": "Commit 1617960 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1617960 ]\n\nLUCENE-5886: allow precommit to be run with java8. still TODO: we need to be able to actually detect 1.9 ",
            "date": "2014-08-14T14:46:02+0000"
        },
        {
            "id": "comment-14097036",
            "author": "Robert Muir",
            "content": "Actually I think we can just pull \"java.specification.version\" to populate this property instead of checking for existence of methods? ",
            "date": "2014-08-14T14:51:28+0000"
        },
        {
            "id": "comment-14097070",
            "author": "Uwe Schindler",
            "content": "Sounds fine. I will investigate: I just have to check if other JVMs like J9 respect this format. ",
            "date": "2014-08-14T15:27:19+0000"
        },
        {
            "id": "comment-14098482",
            "author": "Uwe Schindler",
            "content": "Here is a patch detecting Java 9 the \"conventional way\" (method lookup).\n\nRoberts suggestion with java.specification.version is also good to investigate, but has some problem:\nRyan Ernst removed StringUtils.versionComparator, so its not easy to do \"minimal\" checks in Constants.java. People say that you should use Double.parseDouble(), but this is broken after Java 10! In Constants we use JRE_IS_MINIMUM_JAVA9, so it should be true for Java 10, too.\n\nIn common-build, we could theoretically hardly assign java.spec.version, but this has the problem, that we then have to fix all <equals/> tasks around there to support all later possible versions, which is impossible. Unfortunately ANT has no version comparator as \"task\", so you always need a large \"<or>\" with all possibilities. We could fix this with a groovy taskdef, providing a version comparator (to be investigated).\n\nThis patch just adds a new entry to our ANT \"enumeration\": 1.9, which is detected by java.lang.Process#getPid() -> cool method for junit4, maybe Dawid Weiss can use it if available via reflection in the test runner! Be sure to use latest Java 9 build to test, because the very early broken ones did not have it (was recently added).\n\nI also fixed the remaining ant euquals checks to respect the new value.\n\nIn the near term, to use java.specification.version, we would need a good ANT-based version comparator, too. ",
            "date": "2014-08-15T11:48:21+0000"
        },
        {
            "id": "comment-14098489",
            "author": "Robert Muir",
            "content": "I don't understand why we need a fancy comparator when it returns a value like \"1.7\", \"1.8\", \"1.9\" ? ",
            "date": "2014-08-15T12:02:10+0000"
        },
        {
            "id": "comment-14098498",
            "author": "Robert Muir",
            "content": "Here is my alternative patch for Constants. I think we should use the sysprop. ",
            "date": "2014-08-15T12:21:19+0000"
        },
        {
            "id": "comment-14098499",
            "author": "Robert Muir",
            "content": "Fix stupid bug in case there is java 2  ",
            "date": "2014-08-15T12:23:03+0000"
        },
        {
            "id": "comment-14098500",
            "author": "Uwe Schindler",
            "content": "But if it returns suddenly 1.10, we have a problem. Because our stuff always is something like \"minimum java X\" -> then do something. If somebody downloads the version from today and runs it with Java 10, we are not prepared for that, ecj would suddenly run on that version, although not wanted.\nWith this patch. we simply say, everything >=1.9 is up to now detected as minimum java 9.\n\nAnother idea I had would be: we should assign \"unknown\" to the property, if the version is not in our list of expected ones (1.7, 1.8, 1.9): so we could say: ecj never runs on systems with version=\"1.9\" or \"unknown\". ",
            "date": "2014-08-15T12:23:58+0000"
        },
        {
            "id": "comment-14098501",
            "author": "Robert Muir",
            "content": "There is no problem here Uwe. please look at the patch  ",
            "date": "2014-08-15T12:24:40+0000"
        },
        {
            "id": "comment-14098506",
            "author": "Uwe Schindler",
            "content": "Ah you are only talking about Constants.java \n\nSorry, I was discussing about common-build.xml which is the larger issue, because we have no nice comparators there. This is my proposal about. I am thinking about making this easier. For now I would leave common-build.xml as it is, so we can detect everythoing >=9 as Java 9, so we would not run ecj on Java 10.\n\nI am now working on makint the common-build-detector assign \"unknown\" to everything which is not in our expected list of JVMs. I will work on that later! ",
            "date": "2014-08-15T12:38:43+0000"
        },
        {
            "id": "comment-14098731",
            "author": "Uwe Schindler",
            "content": "Updated patch:\n\n\tuses Robert's mods to Constants.java. I agree, this is much better!\n\n\n\nFor common-build I used a similar approach:\n\n\tWe fail, as before for Java < 7. This is a hard fail like before using the <hasmethod\" check (this is easiest).\n\tjava.specification.version is cleaned up like in constants.java, so it contains only x.y, any additional stuff after it is removed (so be prepared with JVMs that suddenly add lower versions. We had this in the past, e.g. with 1.4.1. The cleaned up version is put to temporary property\n\tThe public property build.java.runtime is then defined as strict enum (because we have no version comparison magic in ant, so we can just do equals checks). We therefore detect 3 versions: \"1.7\", \"1.8\", \"1.9\". Everything else is detected as \"unknown\". This allow to define conditions, so e.g. disallow not-yet-known build environments for specific targets/tasks.\n\tI changed some more conditions, like the ecj one. I prefer them to be positive, so ecj is now only run if version is in \"1.7\" or \"1.8\", everything else is not supported\n\tFor javadoc generation, i pass -Xdoclint:none for every JVM>1.7 (we still need to fix our javadocs to be HTML4 and not XHTML)\n\n ",
            "date": "2014-08-15T16:32:01+0000"
        },
        {
            "id": "comment-14098738",
            "author": "Uwe Schindler",
            "content": "By the way: Java 9 b26 passes analysis-common tests (the lowercasing bug was fixed in b25). We may now add a new Policeman Jenkins JVM to the list - I will do some more thorough testing! ",
            "date": "2014-08-15T16:40:55+0000"
        },
        {
            "id": "comment-14099172",
            "author": "ASF subversion and git services",
            "content": "Commit 1618278 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1618278 ]\n\nLUCENE-5886: Improve Java version detection in Constants.java and common-build.xml, add Java 9 support ",
            "date": "2014-08-15T21:31:28+0000"
        },
        {
            "id": "comment-14099183",
            "author": "ASF subversion and git services",
            "content": "Commit 1618280 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1618280 ]\n\nMerged revision(s) 1618278 from lucene/dev/trunk:\nLUCENE-5886: Improve Java version detection in Constants.java and common-build.xml, add Java 9 support ",
            "date": "2014-08-15T21:35:58+0000"
        }
    ]
}