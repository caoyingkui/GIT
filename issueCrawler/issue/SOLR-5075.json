{
    "id": "SOLR-5075",
    "title": "SolrCloud commit process is too time consuming, even if documents are light",
    "details": {
        "affect_versions": "4.1",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis",
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "We are having a client with business model that requires indexing each month billion rows into solr from mysql in a small time-frame. The documents are very light, but the number is very high and we need to achieve speeds of around 80-100k/s. The built in solr indexer goes to 40-50k tops, but after some hours ( ~12 ) it crashes and the speed slows down as hours go by.\n\nTherefore we have developed a custom java importer that connects directly to mysql and solrcloud via zookeeper, grabs data from mysql, creates documents and then imports into solr. This helps because we are opening ~50 threads and the indexing process speeds up. We have optimized the mysql queries ( mysql was the initial bottleneck ) and the speeds we get now are over 100k/s, but as index number gets bigger, solr stays very long on adding documents. I assume it needs to be something from solrconfig that makes solr stay and even block after 100 mil documents indexed.\n\nHere is the java code that creates documents and then adds to solr server:\n\npublic void createDocuments() throws SQLException, SolrServerException, IOException\n\t{\n\t\tApp.logger.write(\"Creating documents..\");\n\t\tthis.docs = new ArrayList<SolrInputDocument>();\n\t\tApp.logger.incrementNumberOfRows(this.size);\n\t\twhile(this.results.next())\n\t\t{\n\t\t\t   this.docs.add(this.getDocumentFromResultSet(this.results));\n\n\t\t}\n\t\tthis.statement.close();\n\t\tthis.results.close();\n\t}\n\n\tpublic void commitDocuments() throws SolrServerException, IOException\n\t{\n\t\tApp.logger.write(\"Committing..\");\n\t\tApp.solrServer.add(this.docs); // here it stays very long and then blocks\n\t\tApp.logger.incrementNumberOfRows(this.docs.size());\n\t\tthis.docs.clear();\n\t}\n\nI am also pasting solrconfig.xml parameters that make sense to this discussion:\n<maxIndexingThreads>128</maxIndexingThreads>\n<useCompoundFile>false</useCompoundFile>\n<ramBufferSizeMB>10000</ramBufferSizeMB>\n<maxBufferedDocs>1000000</maxBufferedDocs>\n<mergePolicy class=\"org.apache.lucene.index.TieredMergePolicy\">\n          <int name=\"maxMergeAtOnce\">20000</int>\n          <int name=\"segmentsPerTier\">1000000</int>\n          <int name=\"maxMergeAtOnceExplicit\">10000</int>\n</mergePolicy>\n<mergeFactor>100</mergeFactor>\n<termIndexInterval>1024</termIndexInterval>\n<autoCommit> \n       <maxTime>15000</maxTime> \n       <maxDocs>1000000</maxDocs>\n       <openSearcher>false</openSearcher> \n     </autoCommit>\n<autoSoftCommit> \n         <maxTime>2000000</maxTime> \n       </autoSoftCommit>\n\nThanks a lot for any answers and excuse my long text, I'm new to this JIRA. If there's any other info needed please let me know.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13719527",
            "date": "2013-07-25T11:36:42+0000",
            "content": "Radu Ghita you should close this issue and ask on the solr-user mailing list. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13719537",
            "date": "2013-07-25T11:49:28+0000",
            "content": "FWIW, I was about to say the same thing, but had one comment.\n\nSOLR-4816 (not in 4.4, but soon) should add some efficiencies to SolrJ updating, I'd love to see what the effects in your situation are.\n\nOne thing, it looks like you're accumulating all the docs from the select in one huge batch and indexing them all at once. If that's true, try submitting them, say, 1,000 at a time. I suspect that will not hang, but I also suspect that will slow your initial ingest rate because you'll actually be sending docs to Solr rather than just accumulating them all locally. "
        }
    ]
}