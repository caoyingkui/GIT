{
    "id": "SOLR-11517",
    "title": "ToParentBlockJoinQuery fails when the parents/child fall in to different segments",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.6.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We have a system where all the documents in the collections are nested child documents. We also have 'autoCommit' enabled for the collection. We also get huge number of document updates. We found a scenario, where 'child' documents were indexed in one segment, while 'parent' document got indexed in the other segment. Here are the docid looks like\n\n\n0 = 95638\n1 = 95639\n2 = 95640\n3 = 272190 {parent}\n\nNow if the solr request has been made using \"parent\" query parser like the following\n\n\n{!parent which=parent:true score=max}(...)\n\n\n\nToParentBlockJoinQuery which handles the request wont be able to find the parent for the searched child documents. But if we trigger `optimize` for the same index which forces to merge all the segments to single index, the above request will be able to fetch the results.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-22T02:05:51+0000",
            "content": "By \"document updates\" do you mean typical document replacement or do you mean updatable numeric docValues?  If the former then you must take care to update the entire parent/child set together.  If the latter... I doubt that's supported with block-join (parent-child) Ishan Chattopadhyaya do you know? ",
            "author": "David Smiley",
            "id": "comment-16214151"
        },
        {
            "date": "2017-10-22T17:56:35+0000",
            "content": "I was referring to the document replacement. It is automated to replace the complete product(product-child). But what happens is, whenever the `autoCommit` is triggered at the time of document update, the parent goes to a new segment, while child document goes to stays in the old segment. \n\nIn this scenario, If you search with Dismax(or any simple) Query, you will be able to fetch both parent and child. But, if you search with ToParentBockJoinQuery, It does not fetch any result for only that product which is affected by the other scenario(Other documents which are updated works as expected).\n\nMeanwhile, if you perform `optimize` then it will be able to fetch all the documents as expected. ",
            "author": "ananthesh",
            "id": "comment-16214397"
        },
        {
            "date": "2017-10-23T02:43:12+0000",
            "content": "I was referring to the document replacement. It is automated to replace the complete product(product-child). But what happens is, whenever the `autoCommit` is triggered at the time of document update, the parent goes to a new segment, while child document goes to stays in the old segment.\n\nIf that's actually true then it sounds like a Lucene bug.  Solr passes the parent-children set as one group to Lucene.  A commit shouldn't break that grouping down the middle.  IndexWriter.addDocuments is what is called and the very first word of it's javadocs no less is \"Atomically\".  Perhaps you aren't truly passing the product-child set correctly even though that's your intention?  If you're using SolrJ, then SolrInputDocument has addChildDocument.  There's XML & JSON equivalents.\n\nPer chance are you doing index sorting?  That feature is incompatible with this. ",
            "author": "David Smiley",
            "id": "comment-16214553"
        },
        {
            "date": "2017-10-23T16:13:29+0000",
            "content": "I appreciate David, for showing the interest in this JIRA \n\nYes, we do use addChildDocument feature of the SolrJ library to add the document. And also, we didn't configure any `mergepolicy`, we use the default settings. So we don't have the index sorting configured. ",
            "author": "ananthesh",
            "id": "comment-16215364"
        },
        {
            "date": "2017-10-23T16:30:39+0000",
            "content": "I just checked the possibility of a commit getting interleaved with IndexWriter.addDocuments (which is what is used for parent child blocks), and seems to me that it cannot happen. Maybe I can write a stress test around it to verify to be sure.\n\nthe parent goes to a new segment, while child document goes to stays in the old segment. \n\nI thought about this and have a wild hypothesis (I can look into code/write tests to figure out if this is a possibility): P1 had children C1, C2, C3 in S1 segment initially. Then, upon an update, P1 had children C1, C2 in S2 segment were added, but the C3 remains a live document (and seemingly without a parent). And, this C3 is confusing ToParentBlockJoinQuery somehow. And somehow, upon an optimize/forcemerge, the C3 document gets expunged. Do you see this as a possibility ananthesh, David Smiley, Mikhail Khludnev? ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16215403"
        },
        {
            "date": "2017-10-23T17:18:28+0000",
            "content": "That is a strong hypothesis Ishan, But let's relook into my observation again(as per the description). The child document has one set of consecutive `docid` while only the parent `docid` was different. This means the parent document has moved to the different segment. (I haven't analyzed the Lucene segment, I can do it if you insist as I have the snapshot of the index for the above issue).  What could be explaining that?  ",
            "author": "ananthesh",
            "id": "comment-16215476"
        },
        {
            "date": "2017-10-24T06:56:41+0000",
            "content": "Ishan Chattopadhyaya, in this case early block C1,C2,C3,P1 will be nuked by deleteTerm root:P1. \nananthesh, it seems to me that second time parent was sent without children that's well know issue. Workaround is to append a child doc without any fields just to mark doc as parent.  {{IW.addDocuments()} is protected from any intermediate commits (at least until now). fwiw there is Lucene utility CheckJoinIndex, but it looks like you already know the corrupted block. \nIt would be great to create DirectUpdateHandler2 which treats all docs as parents always that fixes this issue.   ",
            "author": "Mikhail Khludnev",
            "id": "comment-16216420"
        },
        {
            "date": "2017-10-25T19:12:53+0000",
            "content": "Mikhail Khludnev Makes sense. We should be looking into this. Speaking about the indexing, we make sure childDocuments are always present\n\nThere is one more issue which we have found, which is reported here SOLR-11550. Not sure, both of them are related. We still need to debug on these issues ",
            "author": "ananthesh",
            "id": "comment-16219312"
        }
    ]
}