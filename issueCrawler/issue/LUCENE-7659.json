{
    "id": "LUCENE-7659",
    "title": "IndexWriter should expose field names",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "6.5",
            "7.0"
        ]
    },
    "description": "While working on SOLR-5944, I needed a way to know whether applying an update to a DV is possible (i.e. the DV exists or not), while deciding upon whether or not to apply the update as an in-place update or a regular full document update. This information is present at the IndexWriter in a FieldInfos instance, and can be exposed.",
    "attachments": {
        "LUCENE-7659.patch": "https://issues.apache.org/jira/secure/attachment/12849297/LUCENE-7659.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15837810",
            "date": "2017-01-25T14:29:25+0000",
            "content": "Here's the patch for the change. For context, please see the SOLR-5944 patch (which includes this change at the moment). ",
            "author": "Ishan Chattopadhyaya"
        },
        {
            "id": "comment-15837862",
            "date": "2017-01-25T15:00:11+0000",
            "content": "It should not be necessary to know the list of the current field names. If I understand the Solr issue correctly, your use-case is to check whether an update can be applied using dv-updates only, or whether it requires an regular update. Do I get it right? If I do then maybe a better way to address this use-case would be to either try the dv-only update and fallback to a regular update if it failed (which should be fine since dv updates are atomic), or change the semantics of dv updates to create fields if they did not exist already (then the only thing the Solr code should check is whether any of the fields is already used for index sorting)? Note that I am not very familiar with IndexWriter, hopefully others can comment about whether that makes any sense. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15838422",
            "date": "2017-01-25T19:39:43+0000",
            "content": "Thanks Adrien Grand for looking into this.\n\nIf I understand the Solr issue correctly, your use-case is to check whether an update can be applied using dv-updates only, or whether it requires an regular update. Do I get it right?\nYes, exactly.\n\nmaybe a better way to address this use-case would be to either try the dv-only update and fallback to a regular update if it failed\nThere are few issues with that approach: 1. When a user's command comes in, it has operations like (\"set\": 3), or (\"inc\": 5). At the UpdateProcessor, we resolve it to a merged document (either partial document, or a regular full document) by pulling the last document from the index (or transaction log) to merge the command with that document. We then send the \"resolved\" document (partial or full) to the DirectUpdateHandler, which performs the IW update. However, by this time, if the IW were to throw an exception for a partial update from the IW.updateDocValues() method, we have already lost the information about the original operation (\"set\", \"inc\" etc.), but instead just have the merged values.\n2. The second problem is that if we wish to handle the exception for IW.updateDocValues() and decide to fallback on regular update, we could now potentially be merging against a different previous document than the one that was merged with in the failed attempt. 3. The performance cost of a regular update would increase due to merging twice against the previously indexed document.\n\nchange the semantics of dv updates to create fields if they did not exist already\nI agree that this is the cleanest way forward. From the IndexWriter's API standpoint, I think it would certainly be cleanest if updateDocValues() method were to create non-existent DVs. Till the time we have such functionality in the updateDocValues() method, do you think we could expose the field names through a method marked as internal and/or experimental, with the intention of phasing it out after we have such functionality in IW's updateDocValues()? I think it would be suitable (interim) workaround for applications who find themselves in such a situation. ",
            "author": "Ishan Chattopadhyaya"
        },
        {
            "id": "comment-15838453",
            "date": "2017-01-25T19:48:12+0000",
            "content": "Adding @lucene.internal and @lucene.experimental annotations to the method. ",
            "author": "Ishan Chattopadhyaya"
        },
        {
            "id": "comment-15838757",
            "date": "2017-01-25T22:56:05+0000",
            "content": "I'm confused here: doesn't Solr know, from its schema, whether a field was indexed as doc values or not? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15838776",
            "date": "2017-01-25T23:15:58+0000",
            "content": "I'm confused here: doesn't Solr know, from its schema, whether a field was indexed as doc values or not?\nFields that have DVs enabled and have not been indexed before cannot be used for DV updates. Dynamic fields are examples. We know that *_l_dvo are docValues fields. But if someone tries to update a field for that pattern, say price_l_dvo, it wouldn't exist as a DV field in the index. ",
            "author": "Ishan Chattopadhyaya"
        },
        {
            "id": "comment-15838804",
            "date": "2017-01-25T23:30:25+0000",
            "content": "OK I see, tricky.  I think it's OK to add this (experimental) method to IW, and I agree it would be cleaner if IW could just bring a new DV field into existence on update.\n\nSuch a thing used to be terrifying, because you were in fact bringing an entire column into existence, but in 7.0 we've fixed sparse doc values to be written sparsely.\n\nThe patch wraps in Collections.unmodifiableSet twice now ... maybe remove the one in IW and add a comment saying FieldInfos already did so? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15838861",
            "date": "2017-01-26T00:02:12+0000",
            "content": "I think this change is not thread-safe? It currently returns a view (Map.keySet()) of the field numbers map which may be written to at any time by IndexWriter, I think it should rather take a snapshot under the lock? Ie. something like this:\n\n+    synchronized Set<String> getFieldNames() {\n+      return Collections.unmodifiableSet(new HashSet<>(nameToNumber.keySet()));\n+    }\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15838865",
            "date": "2017-01-26T00:08:14+0000",
            "content": "Thanks Michael McCandless and Adrien Grand for your reviews. I've updated the patch here based on your reviews. ",
            "author": "Ishan Chattopadhyaya"
        },
        {
            "id": "comment-15838904",
            "date": "2017-01-26T00:38:24+0000",
            "content": "Commit 733060121dc6f5cbc1b0e0e1412e396a3241240b in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7330601 ]\n\nLUCENE-7659: Added IndexWriter#getFieldNames() to return all visible field names ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15838930",
            "date": "2017-01-26T00:54:25+0000",
            "content": "Commit aa467e39f04a5592e97c11c15fc936be60ad2f10 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa467e3 ]\n\nLUCENE-7659: Added IndexWriter#getFieldNames() to return all visible field names ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15839374",
            "date": "2017-01-26T07:34:35+0000",
            "content": "Commit 733060121dc6f5cbc1b0e0e1412e396a3241240b in lucene-solr's branch refs/heads/apiv2 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7330601 ]\n\nLUCENE-7659: Added IndexWriter#getFieldNames() to return all visible field names ",
            "author": "ASF subversion and git services"
        }
    ]
}