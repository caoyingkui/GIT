{
    "id": "LUCENE-4575",
    "title": "Allow IndexWriter to commit, even just commitData",
    "details": {
        "components": [
            "core/index"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from here http://lucene.472066.n3.nabble.com/commit-with-only-commitData-td4022155.html.\n\nIn some cases, it is valuable to be able to commit changes to the index, even if the changes are just commitData. Such data is sometimes used by applications to register in the index some global application information/state.\n\nThe proposal is:\n\n\n\tAdd a setCommitData() API and separate it from commit() and prepareCommit() (simplify their API)\n\n\n\n\n\tWhen that API is called, flip on the dirty/changes bit, so that this gets committed even if no other changes were made to the index.\n\n\n\nI will work on a patch a post.",
    "attachments": {
        "LUCENE-4575.patch": "https://issues.apache.org/jira/secure/attachment/12555337/LUCENE-4575.patch",
        "LUCENE-4575-testcase.patch": "https://issues.apache.org/jira/secure/attachment/12555673/LUCENE-4575-testcase.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-29T10:39:31+0000",
            "content": "Patch adds setCommitData to IndexWriter and increase changeCount as well as sets that commitData on segmentInfos. It also adds a test to verify the behavior.\n\nRegarding back-compat - I prefer to nuke commit(data) and prepcommit(data), in exchange for this API, for both trunk and 4.x.\n\nThis patch however supports the old commit/prepcommit(data) API, but I think that it will be simpler if we just nuke these API. The migration to the new API is a no-brainer, just call setCommitData before your commit().\n\nI don't intend to commit it yet, depending on how we decide to handle back-compat. If we decide to keep the back-compat support, I want to move the commit(data) and prepCommit(data) impls to their respective no-data versions, and then have these API deprecated and call setCommitData() followed by the respective no-data version. ",
            "author": "Shai Erera",
            "id": "comment-13506377"
        },
        {
            "date": "2012-11-29T12:21:10+0000",
            "content": "+1 to do a hard break; this is expert. ",
            "author": "Michael McCandless",
            "id": "comment-13506432"
        },
        {
            "date": "2012-11-29T13:32:27+0000",
            "content": "Thanks. I forgot to mention two things about the changes in the patch, which I wasn't sure about:\n\n\n\tI currently copy the commitData map on setCommitData. It seems safe to do it, and I don't think commitData are huge. Any objections?\n\tI set pass the copied map directly to segmentInfos, rather than saving it in a member in IW. Do you see any issues with it? (I'm thinking about rollback, even though we have another copy of the segmentInfos for rollback purposes ...)\n\n ",
            "author": "Shai Erera",
            "id": "comment-13506468"
        },
        {
            "date": "2012-11-29T14:20:44+0000",
            "content": "I currently copy the commitData map on setCommitData. It seems safe to do it, and I don't think commitData are huge. Any objections?\n\nDo any users care about order (i.e. they pass in a LinkedHashMap)?  If would be trivial to preserve if it added value for some. ",
            "author": "Yonik Seeley",
            "id": "comment-13506492"
        },
        {
            "date": "2012-11-29T15:16:06+0000",
            "content": "We use commitData extensively but we don't care about the order. We store key/value pairs.\n\nI don't think though that it's trivial to support. Currently the user can pass any Map, but IndexReader returns in practice a HashMap (DataInput.readStringStringMap initializes a HashMap). Therefore, if we want to preserve the type of the Map, we'd need to change DataInput/Output code. I'm not sure it's worth the hassle, but let's discuss that anyway on a separate issue? It's not really related to how the map is set. ",
            "author": "Shai Erera",
            "id": "comment-13506526"
        },
        {
            "date": "2012-11-29T15:20:32+0000",
            "content": "The API returns Map<String,String>, so we make no garanties about order. ",
            "author": "Uwe Schindler",
            "id": "comment-13506528"
        },
        {
            "date": "2012-11-29T15:21:42+0000",
            "content": "I don't think though that it's trivial to support. Currently the user can pass any Map, but IndexReader returns in practice a HashMap (DataInput.readStringStringMap initializes a HashMap). \n\nIf a user cared about order, then they would pass a LinkedHashMap.  Then the only thing that would need to change is DataInput.readStringStringMap: s/HashMap/LinkedHashMap.\n\nit's not really related to how the map is set.\n\nIt is... if you make a copy of the map and we want to preserve order, it's new LinkedHashMap instead of HashMap.\n\nIt's a minor enough point I don't think it does deserve it's own issue.  I don't personally care about preserving order - but I did think it was worth at least bringing up. ",
            "author": "Yonik Seeley",
            "id": "comment-13506530"
        },
        {
            "date": "2012-11-29T15:35:59+0000",
            "content": "Then the only thing that would need to change is DataInput.readStringStringMap: s/HashMap/LinkedHashMap.\n\nSo you propose that the code will always initialize LHM in DataInput, that way preserving order whether required or not? Yes, I guess that we can do that. But I wonder if we should? We didn't so far, and nobody complained. And since it's an internal change, we can always make that change in the future if somebody asks? ",
            "author": "Shai Erera",
            "id": "comment-13506540"
        },
        {
            "date": "2012-12-02T06:40:36+0000",
            "content": "Patch removes commit/prepCommit(commitData) versions and modifies code that used it (mostly tests code) to call setCommit beforehand.\n\nI also added a CHANGES entry under back-compat section.\n\nAll tests pass. I'll wait for some review before I commit it. ",
            "author": "Shai Erera",
            "id": "comment-13508179"
        },
        {
            "date": "2012-12-02T11:53:09+0000",
            "content": "I thought we were going to rename ensureOpen's confusing boolean param?\n\nIW.setCommitData should be sync'd I think, eg to ensure visibility\nacross threads of the changes to sis.userData?\n\nHmm ... I think there's a thread hazard here, during commit; I think\nif pendingCommit is not null you should also call\npendingCommit.setUserData?  Else, a commit can finish and \"undo\" the\nuser's change to the commit data (see finishCommit, where it calls\n.setUserData).  Maybe we need a thread safety test\nhere ... ",
            "author": "Michael McCandless",
            "id": "comment-13508245"
        },
        {
            "date": "2012-12-02T12:43:09+0000",
            "content": "Actually I think we should just remove that .setUserData inside finishCommit?\n\nAlso, should we add an IW.getCommitData? ",
            "author": "Michael McCandless",
            "id": "comment-13508251"
        },
        {
            "date": "2012-12-02T12:58:02+0000",
            "content": "I thought we were going to rename ensureOpen's confusing boolean param?\n\nRight, but for some reason I thought that you're going to do that . I'll do it in the next patch.\n\nIW.setCommitData should be sync'd I think, eg to ensure visibility across threads of the changes to sis.userData?\n\nOk\n\nHmm ... I think there's a thread hazard here, during commit\n\nI think you're right. Not sure how practical, because I believe that usually the commit thread will also be the one that calls setCommitData, but it is possible.\nI agree that calling that setCommitData in finishCommit is redundant, but perhaps we can solve it more elegantly by either:\n\n\n\tNot storing the setCommitData in infos, but rather in a private IW member. Then in startCommit set it on the cloned infos. It's essentially how it's done today, only now the commit data will be copied from a member.\n\tStick w/ current API commit(commitData) and prepareCommit(commitData), and just make sure that commit goes through even if changeCount == previousChangeCount, but commitUserData != null.\n\n\n\nOption #2 means that there's no API break, no synchronization is needed on setCommitData and practically everything remains the same. We can still remove the redundant .setCommitData in finishCommit regadless.\n\nshould we add an IW.getCommitData?\n\nI think that that'd be great ! Today the only way to do it is if you refresh a reader (expensive). I think that the code in finishCommit ensures that we can always pull the commitData from segmentInfos? ",
            "author": "Shai Erera",
            "id": "comment-13508254"
        },
        {
            "date": "2012-12-02T13:36:18+0000",
            "content": "\nI agree that calling that setCommitData in finishCommit is redundant, but perhaps we can solve it more elegantly by either:\n\n\tNot storing the setCommitData in infos, but rather in a private IW member. Then in startCommit set it on the cloned infos. It's essentially how it's done today, only now the commit data will be copied from a member.\n\tStick w/ current API commit(commitData) and prepareCommit(commitData), and just make sure that commit goes through even if changeCount == previousChangeCount, but commitUserData != null.\n\n\n\nHmm, I'd rather not store the member inside IW and inside SIS; just seems safer to have a single clear place where this is tracked.\n\nAlso, I like the new API so I'd rather not do #2?\n\nI think just removing that line in finishCommit should fix the bug ... but first we need a test exposing it.\n\nI think that the code in finishCommit ensures that we can always pull the commitData from segmentInfos?\n\nYes. ",
            "author": "Michael McCandless",
            "id": "comment-13508267"
        },
        {
            "date": "2012-12-02T13:50:55+0000",
            "content": "I'll make the changes, and also it seems like you were suggesting that earlier \u2013 allow setCommitData to affect the pendingCommit too. I think that's valuable because you can e.g. call prerCommit() -> setCommitData() -> commit() \u2013 the setCD() in the middle lets you create a commitData that will pertain to the state of the index after the commit.\n\nI'll make all the changes and post a new patch, probably tomorrow. ",
            "author": "Shai Erera",
            "id": "comment-13508268"
        },
        {
            "date": "2012-12-02T14:08:04+0000",
            "content": "I'll make a test exposing the bug ... ",
            "author": "Michael McCandless",
            "id": "comment-13508275"
        },
        {
            "date": "2012-12-02T16:00:38+0000",
            "content": "Simple test showing that commit data is lost ... I didn't need to use threads; just call .setCommitData after prepareCommit and before commit. ",
            "author": "Michael McCandless",
            "id": "comment-13508299"
        },
        {
            "date": "2012-12-02T18:40:48+0000",
            "content": "The test isn't exactly accurate, because it tests a scenario that is currently not supported. I.e., after calling prepareCommit(), nothing that you do on IW will be committed. Rather, to expose the bug it should be modified as follows:\n\n\niw.setCommitData(data1);\niw.prepareCommit();\niw.setCommitData(data2); // that will be ignored by follow-on commit\niw.commit();\ncheckCommitData(); // will see data1\niw.commit(); // that 'should' commit data2\ncheckCommitData(); // that will see data1 again, because of the copy that happens in finishCommit()\n\n\n\nI'll modify the test like so and include it in my next patch. ",
            "author": "Shai Erera",
            "id": "comment-13508319"
        },
        {
            "date": "2012-12-02T19:13:40+0000",
            "content": "Hmmm ... setting the commitData on pendingCommit cannot work, b/c the commitData is written to segnOutput on prepareCommit(). Following commit() merely calls infos.finishCommit() which writes the checksum and closes the output.\n\nCan we modify segmentInfos.write() to not write the commitData, but move it to finishCommit()? Not sure that I like this approach, because it means that finishCommit() will do slightly more work, which increases the chance of getting an IOException during commit() after prepareCommit() successfully returned, but on the other hand it's the gains might be worth it? Being able to write commitData after you know all your document additions/deletions/updates are 'safe' might prove valuable. And finishCommit() already does I/O, writing checksum ...\n\nWhat do you think? ",
            "author": "Shai Erera",
            "id": "comment-13508327"
        },
        {
            "date": "2012-12-02T20:42:59+0000",
            "content": "Hmmm ... setting the commitData on pendingCommit cannot work, b/c the commitData is written to segnOutput on prepareCommit().\n\nOh yeah ... I forgot about that \n\nHmm ... I don't think we should move writing the commit data to finishCommit?  Is it really so hard for the app to provide the commit data before calling prepareCommit? ",
            "author": "Michael McCandless",
            "id": "comment-13508356"
        },
        {
            "date": "2012-12-02T21:03:30+0000",
            "content": "I don't think that we should add more work to finishCommit() either. Being able to setCommitData after prep() is just a bonus. It didn't work before, and it will continue to not work now. And I can't think of a good usecase for why an app would not be able to set commitData prior to prep(). If it comes up, we can discuss a solution again. At least we know that moving commitData write to finishCommit will solve it.\n\nI'll make sure the test exposes the bug you reported in IW.finishCommit(). ",
            "author": "Shai Erera",
            "id": "comment-13508363"
        },
        {
            "date": "2012-12-02T21:41:43+0000",
            "content": "Patch addresses the bug that Mike reported and adds a test for it. Also adds IW.getCommitData(). ",
            "author": "Shai Erera",
            "id": "comment-13508373"
        },
        {
            "date": "2012-12-02T21:53:11+0000",
            "content": "+1, looks great.  Thanks Shai! ",
            "author": "Michael McCandless",
            "id": "comment-13508375"
        },
        {
            "date": "2012-12-03T07:24:23+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1416361\n\nLUCENE-4575: add IndexWriter.setCommitData\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13508524"
        },
        {
            "date": "2012-12-03T07:36:50+0000",
            "content": "Committed to trunk and 4x. Thanks Mike ! ",
            "author": "Shai Erera",
            "id": "comment-13508547"
        },
        {
            "date": "2012-12-03T07:42:24+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1416367\n\nLUCENE-4575: add IndexWriter.setCommitData\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13508551"
        },
        {
            "date": "2013-03-22T16:12:08+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1416367\n\nLUCENE-4575: add IndexWriter.setCommitData ",
            "author": "Commit Tag Bot",
            "id": "comment-13610472"
        }
    ]
}