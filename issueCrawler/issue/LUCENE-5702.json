{
    "id": "LUCENE-5702",
    "title": "Per-segment comparator API",
    "details": {
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "As a next step of LUCENE-5527, it would be nice to have per-segment comparators, and maybe even change the default behavior of our top* comparators so that they merge top hits in the end.",
    "attachments": {
        "LUCENE-5702.patch": "https://issues.apache.org/jira/secure/attachment/12680193/LUCENE-5702.patch",
        "SortBench.java": "https://issues.apache.org/jira/secure/attachment/12689796/SortBench.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14007733",
            "author": "Michael McCandless",
            "content": "+1, it would be great to massively simplify the scary FieldComparator API that we have today. ",
            "date": "2014-05-23T21:30:13+0000"
        },
        {
            "id": "comment-14202185",
            "author": "Adrien Grand",
            "content": "Here is a patch. It splits the FieldComparator API into FieldComparator and LeafFieldComparator (like Collector and LeafCollector).\n\nAs a consequence our TopDocsCollectors do not extend SimpleCollector anymore and return a new LeafCollector instance per leaf.\n\nTopFieldCollector was a bit of a pain to migrate because of all the specialization, so I replaced the OneComparator/MultiComparator specialization with some wrapping of the LeafFieldComparator API so that it always seems like there is a single comparator to the TopFieldCollector (only the leaf comparators are wrapped, not the top-level ones so that the situation is not weird because of the value(int slot) method that can return a single value). This helped remove a significant amount of code (7 collectors instead of 13).\n\nSome grouping/join collectors were a bit hard to migrate so for now they still extend SimpleCollector and keep a reference to the currently wrapped leaf comparator/collector. I think this can be addressed later?\n\nFor now the patch only changes the API but we could imagine doing funny things now that the top docs collectors and comparators are fully per-segment, like only counting hits on segments that are not competitive (because of their min/max value or because they don't have a value for a given field \u2013 if we removed the constraint that TopDocsCollector needs to return the total hit count, we could even completely skip such segments) or not worrying about the reader generation of the first segment when using ordinals to sort. ",
            "date": "2014-11-07T15:59:52+0000"
        },
        {
            "id": "comment-14202544",
            "author": "David Smiley",
            "content": "+1, it would be great to massively simplify the scary FieldComparator API that we have today.\n\n+1 to per-segment.  I took a quick look at the patch.  I don't see a simplification, which is not a complaint but just wondering why you feel things are simpler Mike.\n\nI had to implement my own FieldComparator yesterday and it was a bit of a pain, particularly because of the primitive type'ing inhibits a generic useful base class, and so I had to write my own.  It would be nice if there was an int, long, float, and double set of base classes.  There is kind of a set of these but they assume they fetch from DocValues.  I think with some simple changes they could be generic, and only one abstract method to fetch the primitive value for the current document. ",
            "date": "2014-11-07T19:49:48+0000"
        },
        {
            "id": "comment-14202675",
            "author": "Adrien Grand",
            "content": "I don't see a simplification, which is not a complaint but just wondering why you feel things are simpler Mike.\n\nIndeed there is no real simplification here, it just splits the API into two classes.\n\nI had to implement my own FieldComparator yesterday and it was a bit of a pain, particularly because of the primitive type'ing inhibits a generic useful base class, and so I had to write my own. It would be nice if there was an int, long, float, and double set of base classes. There is kind of a set of these but they assume they fetch from DocValues. I think with some simple changes they could be generic, and only one abstract method to fetch the primitive value for the current document.\n\nMaybe you could extend an existing FieldComparator to pull a NumericDocValues instance differently (or IntValues/LongValues/... on 4.x) like SortedNumericSortField does? ",
            "date": "2014-11-07T21:05:20+0000"
        },
        {
            "id": "comment-14202739",
            "author": "David Smiley",
            "content": "Maybe you could extend an existing FieldComparator to pull a NumericDocValues instance differently (or IntValues/LongValues/... on 4.x) like SortedNumericSortField does?\n\nI considered that but FieldComparator.LongComparator's constructor is package private, so that's a deal-breaker.  In trunk (and 5x?) it's public.\n\nIn addition, to handle a more generic case, it's problematic because there's a FieldCache/DV lookup and a Bits docsWithField lookup (and this logic is annoyingly repeated several times).  See the snippet below.  In my case, I'm sorting indirectly by looking up values in another document and so I need to map the current doc id to a target id.  I certainly don't want that to happen twice for the same document (both the FieldCache/DV lookup and the docsWithField call).  The following logic could be extracted into a method that a subclass could override, like hypothetical method getValue(doc):\n\n      long v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n\n\nTwo examples of a FieldComparator instances in Lucene that could benefit from some re-usable base classes are ExpressionComparator and ValueSourceComparator.  There are probably others. ",
            "date": "2014-11-07T21:38:08+0000"
        },
        {
            "id": "comment-14204622",
            "author": "Adrien Grand",
            "content": "I considered that but FieldComparator.LongComparator's constructor is package private\n\nWhat version are you using? It seems to be public in the latest release.\n\nI'm sorting indirectly by looking up values in another document\n\nElasticsearch does something similar by allowing to sort eg. by the minimum value of all documents contained in a given block, maybe there is some logic you can reuse? https://github.com/elasticsearch/elasticsearch/blob/1.4/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java#L64\n\nTwo examples of a FieldComparator instances in Lucene that could benefit from some re-usable base classes are ExpressionComparator and ValueSourceComparator. There are probably others.\n\n+1 to improve code reuse across comparators! ",
            "date": "2014-11-10T10:41:52+0000"
        },
        {
            "id": "comment-14204986",
            "author": "David Smiley",
            "content": "What version are you using? It seems to be public in the latest release.\n\n4.8.1.  I see it's now public in 4.10, perhaps it was 4.9.\n\nElasticsearch does something similar by allowing to sort eg. by the minimum value of all documents contained in a given block, maybe there is some logic you can reuse? https://github.com/elasticsearch/elasticsearch/blob/1.4/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java#L64\n\nThanks for the pointer.  But my situation can't assume a given block and must look in other segments.  I realize it could be much faster if it looked within the block but that would require re-indexing all documents in a parent-child set when any change, and I'd rather not make that trade-off for this app.\n\n+1 to improve code reuse across comparators!\n\nOk, maybe I'll add something when I get time.  Time... the ultimate luxury! ",
            "date": "2014-11-10T16:59:01+0000"
        },
        {
            "id": "comment-14262941",
            "author": "Adrien Grand",
            "content": "Updated patch to current trunk. I also did some benchmarking and the removal of the one-comparator specialization had a bad impact on performance so I added it back, we could discuss the over-specialization of top-field collectors in a different issue...\n\nYou can find attached the (dummy) benchmark that I used to check the performance impact of this patch. Times are in milliseconds (the smaller the better).\n\n\n\n\n sort \n trunk \n patch \n difference \n\n\n long asc \n 100 \n 108 \n +8% \n\n\n long desc \n 101 \n 110 \n +9% \n\n\n double asc \n 107 \n 114 \n +7% \n\n\n double desc \n 113 \n 118 \n +4% \n\n\n string asc \n 119 \n 123 \n +3% \n\n\n string desc \n 120 \n 124 \n +3% \n\n\n long asc, double asc \n 98 \n 87 \n -11% \n\n\n long desc, double desc \n 102 \n 89 \n -13% \n\n\n\n\n\nSome cases are slightly faster, others are slightly slower. This benchmark only runs a sort to find the top 50 hits on a MatchAllDocsQuery, so differences would be even smaller if you run an actual query and/or have other collectors (eg. if you also want to compute facets).\n\nThis patch is *only* about API. It just splits FieldComparator into\n\n\tFieldComparator:\n\t\n\t\tcompare(int slot1, int slot2)\n\t\tvoid setTopValue(T value)\n\t\tT value(int slot)\n\t\tLeafFieldComparator getLeafComparator(LeafReaderContext context)\n\t\n\t\n\tand LeafFieldComparator:\n\t\n\t\tint compareBottom(int doc)\n\t\tint compareTop(int doc)\n\t\tvoid copy(int slot, int doc)\n\t\tvoid setScorer(Scorer scorer)\n\t\n\t\n\n\n\nAll the logic about top-field collection is left unchanged. So there is still a single top-level priority queue that all leaf collectors update. I think changing the API is important for several reasons:\n\n\tit makes the FieldComparator API aligned with the Collector API (LeafCollector <-> LeafFieldComparator)\n\tit makes the workflow easier to understand: you need to get a LeafFieldComparator before you can call setScorer\n\tEven if the patch does not contain any optimization, it would make per-segment optimizations easier. For instance, if all documents in a segment have the same value, we could ignore this sort field in comparisons. Or if an index has a single segment, we could decide to only use ordinals for comparisons and avoid copying values on each competitive hit.\n\n ",
            "date": "2015-01-02T15:19:32+0000"
        },
        {
            "id": "comment-14266216",
            "author": "ASF subversion and git services",
            "content": "Commit 1649818 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1649818 ]\n\nLUCENE-5702: Move comparators to a per-leaf API. ",
            "date": "2015-01-06T15:03:21+0000"
        },
        {
            "id": "comment-14266239",
            "author": "ASF subversion and git services",
            "content": "Commit 1649824 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1649824 ]\n\nLUCENE-5702: Move comparators to a per-leaf API. ",
            "date": "2015-01-06T15:15:43+0000"
        },
        {
            "id": "comment-14332832",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:10+0000"
        }
    ]
}