{
    "id": "SOLR-6485",
    "title": "ReplicationHandler should have an option to throttle the speed of replication",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The ReplicationHandler should have an option to throttle the speed of replication.\n\nIt is useful for people who want bring up nodes in their SolrCloud cluster or when have a backup-restore API and not eat up all their network bandwidth while replicating.\n\nI am writing a test case and will attach a patch shortly.",
    "attachments": {
        "SOLR-6485.patch": "https://issues.apache.org/jira/secure/attachment/12666984/SOLR-6485.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Varun Thacker",
            "id": "comment-14124287",
            "date": "2014-09-06T03:27:42+0000",
            "content": "Patch which adds throttling to the ReplicationHandler along with a test "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14126505",
            "date": "2014-09-09T02:58:34+0000",
            "content": "New patch. The previous approach was wrong. Now I am using SimpleRateLimiter.\n\nDebugging as to why it's not throttling correctly. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14126813",
            "date": "2014-09-09T10:06:41+0000",
            "content": "Any reason why you could not reuse the DirectoryFileInputStream class? I see a lot of code being duplicated  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14127068",
            "date": "2014-09-09T15:03:45+0000",
            "content": "Good issue overall. I have not looked so closely, but I had the same initial worry about some code duplication.\n\nMinor cleanup nits: rateLimiiter variable is misspelled, there is a System.out left in. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14128150",
            "date": "2014-09-10T06:50:39+0000",
            "content": "Doesn't commit reserve duration have to account for the time taken by the pauses? As it stands currently, you run the risk of replication failing if ypu are throttling fairly highly. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14133323",
            "date": "2014-09-14T18:20:39+0000",
            "content": "Thanks everyone for reviewing!\n\nNew patch which does the following - \n\n\tRefactored the DirectoryFileStream and LocalFsFileStream to reuse code. The throttling logic is folded in DirectoryFileStream instead of having a separate implementation\n\tThe init pause is needed for the future pause timings to work correctly. Check TestRateLimiter.testPause() which does the same thing. Test fails when removing the init in testPause() method. We should fix this in another Jira I guess.\n\tTest case and some small refactoring in TestReplicationHandler\n\n\n\nAbout reserving index commit points, currently we extend it by 10s for every 5 reads of 1MB ( default ) packet sizes. If one throttles a lot this could trip like Ramkumar pointed out.\n\nSo we could take two approaches - \n1. Instead of the hardcoded 10 seconds look at the throttle speed and estimate how much time should the reserve point be extended for.\n2. Add functionality to the RateLimiter that actually returns the time it needs to pause before actually pausing. We could split the current pause method into 3 methods - \npreparePause()- would return the pauseNS value. \npause(int pauseNS) - Pause for the specified time duration.\npause() - calls preparePause() and then pause(pauseNs) . This makes sure that we are not breaking the public api.\n\nWe could then take the time it needs to pause for and add it to the default 10 seconds. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14133408",
            "date": "2014-09-14T21:48:56+0000",
            "content": "Could rate limiter expose a 'dry-run' version of pause, I.e. something which tells you how much it would pause if pause(N) was done? I think it's still cleaner to call pause(N), but an additional checkPauseTime(N) would give us an idea of how much to reserve for.. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14133582",
            "date": "2014-09-15T04:53:32+0000",
            "content": "Ramkumar Aiyengar I didn't quite understand the 'dry run' thing, I guess it should be taken up as a separate issue instead of mixing with this "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14133593",
            "date": "2014-09-15T05:20:45+0000",
            "content": "I was responding to Varun's two proposals for fixing the issue with commit reservations the current patch for this ticket has. In particular, I was suggesting a variant of his second proposal. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14133822",
            "date": "2014-09-15T12:04:16+0000",
            "content": "Well I think the best approach would be to use saveCommitPoint() and releaseCommitPoint() methods. Running tests now.\n\nAlso I created LUCENE-5948 to fix the init issue in the RateLimiter. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14133857",
            "date": "2014-09-15T12:53:29+0000",
            "content": "New patch:\n\n\n\tRemoves a couple of unused variables\n\tUses saveCommitPoint() and releaseCommitPoint() methods instead of the time duration methods.\n\n "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14133866",
            "date": "2014-09-15T13:03:24+0000",
            "content": "You still need the 10s commit reservation. The reason being, replication happens like this:\n\n\n\tReplica gets list of files from leader\n\tFor each file, replica fetches the file from leader\n\n\n\nAfter the first step happens, you need to keep the commit alive for the entire duration of the second step which involves many, many requests. So you need to keep extending the commit reservation between requests. I think the save/release is clean for the duration of the write, you probably still need the older release at the end of it.. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14133955",
            "date": "2014-09-15T14:34:07+0000",
            "content": "Yeah ,\nthere is a need to save the commit point between two requests . I don't see a reason to make it configurable though.\n\nSo , after the file is completely written out , reserve it for some time say 10 secs "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14134092",
            "date": "2014-09-15T16:35:05+0000",
            "content": "\nYou still need the 10s commit reservation. The reason being, replication happens like this:\nReplica gets list of files from leader\nFor each file, replica fetches the file from leader\n\nRight nice catch! \nSo this is what the new patch does -\n1. Saves the commit point for the duration of the write. We will not loose the commit point no matter how much the user throttles.\n2. At the end of the write it extends it by 10s so that the commit point is reserved across file fetches\n3. Added an extra condition to the test case - I add extra docs to the master after I call replicate. These docs should not be reflected in the slave server. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14134482",
            "date": "2014-09-15T21:08:42+0000",
            "content": "Looks about right. I haven't checked fully, but shouldn't the reserve and release in finally be swapped? Otherwise you have a race.. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14135078",
            "date": "2014-09-16T07:14:13+0000",
            "content": "added documentation and refactored a bit "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14135306",
            "date": "2014-09-16T11:28:22+0000",
            "content": "Builds on Noble's patch. 3 small changes -\n1. Removes the initial pause needed in the DirectoryFileStream ctor\n2. Does a searcher decref() in the finally block like it originally did. I should not have removed it in the first place\n3. Changes the RateLimiter class and initializes the lastNS variable. This is needed for the test to pass.\n\nWe should commit this only after LUCENE-5948 is committed. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14146385",
            "date": "2014-09-24T14:47:39+0000",
            "content": "Commit 1627340 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1627340 ]\n\nSOLR-6485 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14146389",
            "date": "2014-09-24T14:50:47+0000",
            "content": "Commit 1627341 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1627341 ]\n\nSOLR-6485 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169354",
            "date": "2014-10-13T14:48:05+0000",
            "content": "Commit 1631426 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1631426 ]\n\nSOLR-6485 added javadocs "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169355",
            "date": "2014-10-13T14:49:05+0000",
            "content": "Commit 1631429 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1631429 ]\n\nSOLR-6485 added javadocs "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14169992",
            "date": "2014-10-13T21:16:34+0000",
            "content": "Commit 1631554 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1631554 ]\n\nSOLR-6485: remove useless javadocs that are broken and violate precommit "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14170017",
            "date": "2014-10-13T21:30:19+0000",
            "content": "Commit 1631559 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1631559 ]\n\nSOLR-6485: remove useless javadocs that are broken and violate precommit (merge r1631554) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332849",
            "date": "2015-02-23T05:02:15+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}