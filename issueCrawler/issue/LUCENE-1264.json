{
    "id": "LUCENE-1264",
    "title": "Use of IOException in analysis component method signatures leads to poor error management",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.3.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Methods such as 'next' and 'reset' are defined to throw only IOException.\n\nIOException, as one of the older and dustier Java exceptions, lacks a constructor over a 'cause' exception.\n\nSo, if a Tokenizer (for example) uses some complex underlying facility that throws arbitrary exceptions, the coder has two bad choices: wrap an IOException around some string derived from the real problem, or throw an unchecked wrapper.\n\nPlease consider adding a new checked exception to the signature of these methods  that implements the 'cause' pattern.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-04-17T04:16:18+0000",
            "content": "while i don't disagree that it would be nice to have some more domain specific checked exceptions in future iterations of the Lucene API, i would like to point out that this comment is irrelevant...\n\n\nIOException, as one of the older and dustier Java exceptions, lacks a constructor over a 'cause' exception.\n\nSo, if a Tokenizer (for example) uses some complex underlying facility that throws arbitrary exceptions, the coder has two bad choices: wrap an IOException around some string derived from the real problem, or throw an unchecked wrapper.\n\nIOException does not have a constructor that takes a \"cause\" arg, but like all Exceptions it does support initCause(Throwable cause) as part of the Throwable contract.\n\n\ntry {\n  throw new RuntimeException(\"foo\");\n} catch (Exception e) {\n  throw (IOException)(new IOException(\"problem\")).initCause(e);\n}\n\n ",
            "author": "Hoss Man",
            "id": "comment-12589826"
        },
        {
            "date": "2011-01-25T17:50:33+0000",
            "content": "This issue is quite old and no response was given to Hoss' comment. In general this is not an issue, as you can also always throw RuntimeExceptions. IOException is only listed in throws there because it is unfortunately checked and needed by Tokenizer as it works on java.io.Reader. ",
            "author": "Uwe Schindler",
            "id": "comment-12986550"
        }
    ]
}