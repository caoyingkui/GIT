{
    "id": "LUCENE-6764",
    "title": "Payloads should be compressed",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "I think we should at least try to do something simple, eg. deduplicate or apply simple LZ77 compression. For instance if you use enclosing html tags to give different weights to individual terms, there might be lots of repetitions as there are not that many unique html tags.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14716681",
            "author": "Robert Muir",
            "date": "2015-08-27T13:45:31+0000",
            "content": "I disagree. Payloads should be something small like a byte or two. I dont even think they should be variable length: its a trap that adds additional per position noise. We should not encourage putting the contents of moby dick per position nor should we suffer the complexity hassles. "
        },
        {
            "id": "comment-14720355",
            "author": "Paul Elschot",
            "date": "2015-08-28T18:16:26+0000",
            "content": "Alternatively the html structure could be indexed, see LUCENE-5627.\nThen one can query the structure and add the weights to the query. "
        },
        {
            "id": "comment-14724976",
            "author": "Adrien Grand",
            "date": "2015-09-01T08:33:01+0000",
            "content": "Payloads should be something small like a byte or two. I dont even think they should be variable length: its a trap that adds additional per position noise. We should not encourage putting the contents of moby dick per position nor should we suffer the complexity hassles.\n\nOf course you want payloads to be small. My point was that there is likely a very finite set of unique payloads and so we could likely store these payloads on a couple of bits instead of one or two entire bytes. "
        },
        {
            "id": "comment-14725582",
            "author": "Paul Elschot",
            "date": "2015-09-01T15:40:00+0000",
            "content": "store these payloads on a couple of bits\n\nAn EliasFanoSequence can do just that and is indexable by position.\nThe sequence is normally non decreasing, so for random (small) numbers one should encode their cumulative sums.\n\nAn Elias-Fano encoding uses at most 2 + ceil(log(upperBound/numValues))\nbits per encoded number.\n\nHere numValues is the number of positions with payloads, and upperBound is the sum of the payloads.\n\nThe EliasFanoBytes can be used as a single payload per document (as currently at LUCENE-5627), or maybe better as a docvalue.\n\nFor now this is only efficiently indexable by value (to implement advancing in a DocIdSet).\nEfficient indexing by position (index in the sequence) can be easily added.\nThese indexes have one entry per 256 values, so their size overhead is quite small. "
        },
        {
            "id": "comment-14725788",
            "author": "Paul Elschot",
            "date": "2015-09-01T17:57:51+0000",
            "content": "An easier implementation would be to store the n bits per payload contiguously in a bytesref docvalue.\nWhen that docvalue becomes too big to be completely loaded per document, it can be made seekable.\n\nA seekable docvalue (or payload) would also be better than the sometimes large payloads now used at LUCENE-5627. "
        },
        {
            "id": "comment-14726917",
            "author": "Adrien Grand",
            "date": "2015-09-02T07:36:54+0000",
            "content": "Actually I was thinking of something simpler... The current postings format encodes everything into blocks of 128 values, so we could do dictionnary encoding independently on each block. "
        },
        {
            "id": "comment-14728092",
            "author": "Paul Elschot",
            "date": "2015-09-02T21:50:11+0000",
            "content": "That should work, too. Plenty of implementation options though, and I have no idea how much time can be spent on compression during indexing. "
        }
    ]
}