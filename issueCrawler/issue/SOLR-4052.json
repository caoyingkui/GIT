{
    "id": "SOLR-4052",
    "title": "Upload files to ZooKeeper from Solr Admin interface",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "It would be nice if you could add files to ZooKeeper through the solr admin tool instead of having to use the zkCli.  Steffan and I talked about this at ApacheCon Euro, and he suggested that if I put the java code in place, he'll put in the pretty GUI aspects!  This patch is based around using a tool like http://blueimp.github.com/jQuery-File-Upload/ to upload to a java servlet.  I hung this code off the ZookeeperInfoServlet doPost method mostly b/c I didn't have a better sense of where it should go.   A very annoying thing is that it seems like from the browser side you can't select a directory of files and upload it, which would make loading a new solr core configuration split across many directory VERY annoying.   Also, this doesn't really feel like a solid solution to just pulling up a file in the ZK tree browser webpage, editing it (maybe via a big text box) and then posting the contents back.",
    "attachments": {
        "zookeeper_edit.patch": "https://issues.apache.org/jira/secure/attachment/12552732/zookeeper_edit.patch",
        "ZookeeperInfoServletTest.java": "https://issues.apache.org/jira/secure/attachment/12552733/ZookeeperInfoServletTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Eric Pugh",
            "id": "comment-13493590",
            "date": "2012-11-08T23:02:42+0000",
            "content": "A patch for the existing ZookeeperInfoServlet and my new unit test. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13496295",
            "date": "2012-11-13T16:21:33+0000",
            "content": "Maybe taking a zip/tar file? It may also be useful to have a way to download a zip/tar file of a collection from the UI. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13564672",
            "date": "2013-01-28T20:56:57+0000",
            "content": "Yeah, I think you have to use flash or something to select a directory. Pretty annoying.\n\nA tar/zip file is not a terrible compromise.\n\nThis would be a good feature I think - it complements SOLR-4193 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16466325",
            "date": "2018-05-07T18:57:05+0000",
            "content": "Is this still wanted even now when we have config set API and \"bin/solr zk cp\" capabilities? "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-16466415",
            "date": "2018-05-07T20:08:48+0000",
            "content": "Is this still wanted even now when we have config set API and \"bin/solr zk cp\" capabilities?\n\nI think if we want to minimize the user need to interact with ZK directly, we should instead think about how to make UIs that use our existing APIs (Configset API, Config API, Parameters API, etc.) and where we still have gaps to fill with new APIs. Implementing those would be a better use of our collective time and efforts, IMO. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-16467136",
            "date": "2018-05-08T09:20:57+0000",
            "content": "APIs that can upload full configurations are a potential security risk.  We had the ability to edit configs in the admin UI at one point.  Redhat filed a security bug, and it was removed.\n\nNo matter how often we tell people that they shouldn't expose Solr to people they can't trust, especially the open Internet, there are still people who do it.\n\nI'm not opposed to having APIs (other than ZK itself for SolrCloud) that can upload configurations, or even the ability to edit configs directly in the admin UI.  But those capabilities should not be turned on by default.  It should require explicit configuration to enable it. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16467206",
            "date": "2018-05-08T10:19:16+0000",
            "content": "We already have APIs for most things you need to do in ZK on a daily basis:\n\n\tUpload config sets\n\tModify schema and config\n\tModify security settings (perhaps except the initial upload of security.json)\n\n\n\nI think it is acceptable that typical install actions such as changing urlScheme or bootstrapping security.json\u00a0must happen directly to ZK.\n\nQuestion is whether we want Admin UI support for\u00a0uploading config sets?\n\nI'd rather see improved support for managed components so you never need to upload elevate.xml, currencies.xml\u00a0etc and thus can create a collection with a default config set and start configuring through APIs. What if we compile list of components that today require some text file in config-set, and then create JIRAs for each of them to make a\u00a0Managed counterpart, and finally deprecate the non managed ones?\n\nOr is the Config API / Schema API (which are newer than the Managed REST APIs) a better way of configuring these components? What if an Authentication Plugin requires a huge config file, should it just be embedded in security.json? "
        }
    ]
}