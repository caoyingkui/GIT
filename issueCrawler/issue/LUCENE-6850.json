{
    "id": "LUCENE-6850",
    "title": "BooleanWeight should not use BS1 when there is a single non-null clause",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "When a disjunction has a single non-null scorer, we still use BS1 for bulk-scoring, which first collects matches into a bit set and then calls the collector. This is inefficient: we should just call the inner bulk scorer directly and wrap the scorer to apply the coord factor (like BooleanTopLevelScorers.BoostedScorer does).",
    "attachments": {
        "LUCENE-6850.patch": "https://issues.apache.org/jira/secure/attachment/12767645/LUCENE-6850.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14965568",
            "author": "Adrien Grand",
            "date": "2015-10-20T19:11:29+0000",
            "content": "Here is a patch. BooleanWeight.bulkScorer now has the same optimization as BooleanWeight.scorer in the case that only one of the optional clauses creates a non-null scorer. "
        },
        {
            "id": "comment-14966516",
            "author": "Adrien Grand",
            "date": "2015-10-21T09:17:46+0000",
            "content": "I iterated on the previous patch in order to also optimize the case when all clauses return a non-null BulkScorer, but some windows of 2048 documents only contain matches for one of the sub scorers: in that case we can call the collector directly instead of going through a bitset and replaying. luceneutil on wikimedium10m shows a nice speedup for OrHighLow:\n\n\n                    TaskQPS baseline      StdDev   QPS patch      StdDev                Pct diff\n                  Fuzzy2       54.93     (13.3%)       51.19     (16.9%)   -6.8% ( -32% -   26%)\n              OrHighHigh       37.94      (9.1%)       35.76      (7.0%)   -5.7% ( -20% -   11%)\n               OrHighMed       76.23      (9.0%)       73.41      (6.3%)   -3.7% ( -17% -   12%)\n            OrNotHighLow     1684.73      (4.6%)     1648.87      (6.6%)   -2.1% ( -12% -    9%)\n                  IntNRQ       13.63      (4.0%)       13.49      (4.8%)   -1.0% (  -9% -    8%)\n              AndHighLow      731.68      (2.6%)      726.44      (3.6%)   -0.7% (  -6% -    5%)\n                 Respell       61.24      (3.0%)       60.84      (3.7%)   -0.7% (  -7% -    6%)\n            HighSpanNear       22.89      (3.7%)       22.82      (4.0%)   -0.3% (  -7% -    7%)\n                HighTerm      136.93      (2.8%)      136.57      (3.1%)   -0.3% (  -5% -    5%)\n             MedSpanNear       72.54      (3.1%)       72.36      (3.5%)   -0.2% (  -6% -    6%)\n               MedPhrase       30.70      (1.9%)       30.63      (1.8%)   -0.2% (  -3% -    3%)\n              HighPhrase       35.13      (3.8%)       35.12      (3.5%)   -0.1% (  -7% -    7%)\n                 MedTerm      184.28      (3.1%)      184.23      (2.5%)   -0.0% (  -5% -    5%)\n             AndHighHigh       16.74      (1.4%)       16.76      (1.4%)    0.1% (  -2% -    2%)\n             LowSpanNear       39.03      (1.8%)       39.08      (2.3%)    0.1% (  -3% -    4%)\n                Wildcard       43.57      (2.6%)       43.66      (2.9%)    0.2% (  -5% -    5%)\n              AndHighMed      178.28      (1.5%)      178.78      (2.1%)    0.3% (  -3% -    3%)\n            OrHighNotMed       71.53      (4.7%)       71.79      (2.8%)    0.4% (  -6% -    8%)\n            OrNotHighMed       79.22      (2.6%)       79.65      (2.0%)    0.5% (  -3% -    5%)\n           OrNotHighHigh       61.27      (3.0%)       61.61      (2.0%)    0.6% (  -4% -    5%)\n                 LowTerm      818.90      (5.9%)      823.47      (4.3%)    0.6% (  -9% -   11%)\n                 Prefix3      176.52      (2.9%)      177.57      (3.2%)    0.6% (  -5% -    6%)\n               LowPhrase      380.46      (3.4%)      383.13      (3.4%)    0.7% (  -5% -    7%)\n         MedSloppyPhrase      155.97      (3.5%)      157.16      (2.8%)    0.8% (  -5% -    7%)\n           OrHighNotHigh       45.73      (3.1%)       46.09      (1.9%)    0.8% (  -4% -    5%)\n         LowSloppyPhrase       65.95      (2.0%)       66.59      (1.6%)    1.0% (  -2% -    4%)\n            OrHighNotLow       97.93      (4.8%)       99.02      (2.4%)    1.1% (  -5% -    8%)\n                  Fuzzy1       49.26      (6.6%)       50.06      (6.7%)    1.6% ( -10% -   16%)\n        HighSloppyPhrase       24.74      (4.2%)       25.65      (5.8%)    3.7% (  -6% -   14%)\n               OrHighLow       84.42      (7.7%)      107.15      (8.4%)   26.9% (  10% -   46%)\n\n "
        },
        {
            "id": "comment-14966710",
            "author": "Alan Woodward",
            "date": "2015-10-21T12:11:32+0000",
            "content": "+1\n\nAnother possible optimization here is to check the number of docs in the segment, and if it's below a certain size then don't use the bulk scorer.  For example, big disjunctions run against a MemoryIndex currently allocate int[2048] for each node even though there's only a single doc in there. "
        },
        {
            "id": "comment-14969098",
            "author": "Adrien Grand",
            "date": "2015-10-22T12:32:50+0000",
            "content": "Another possible optimization here is to check the number of docs in the segment, and if it's below a certain size then don't use the bulk scorer.\n\nI like the idea and I was just going to try it out but I'm a bit concerned we would lose significant test coverage of BS1. So I'd rather experiment with this idea in a different issue where we also make sure to keep good coverage for BS1. "
        },
        {
            "id": "comment-14974175",
            "author": "ASF subversion and git services",
            "date": "2015-10-26T13:10:02+0000",
            "content": "Commit 1710591 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1710591 ]\n\nLUCENE-6850: Optimize BooleanScorer for sparse clauses. "
        },
        {
            "id": "comment-14974241",
            "author": "ASF subversion and git services",
            "date": "2015-10-26T14:10:13+0000",
            "content": "Commit 1710604 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1710604 ]\n\nLUCENE-6850: Optimize BooleanScorer for sparse clauses. "
        }
    ]
}