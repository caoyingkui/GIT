{
    "id": "LUCENE-4114",
    "title": "Large docID / docvalue size combination produces arithmetic overflow",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/codecs"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA,                                            6.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "My test case has run across an arithmetic bug in FixedStraightBytesImpl - specifically in the @Override on position(int). The combination of size=32 and docID = 70M produces a negative integer and causes a stacktrace in MMapDirectory.seek(long) which I will post below.  I would imagine that this hasn't been hit before because most index shards have less than 70M documents.\n\nThat is to say, when asking for the docvalue in a FixedStraightBytes field where the size of values are 32 and the docID can be sufficiently high, an arithmetic overflow occurs in line 359 of FixedStraightBytesImpl.java, causing the method to return a negative value when operating on the first (0th) shard with a baseOffset of 0.  This produces an IllegalArgumentException:\n\nCaused by: java.lang.IllegalArgumentException: Seeking to negative position: MMapIndexInput(_7_5_dv.dat in path=\"/.../_7_dv.cfs\" slice=5:2562955684)\n        at org.apache.lucene.store.MMapDirectory$MMapIndexInput.seek(MMapDirectory.java:396)\n        at org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.position(FixedStraightBytesImpl.java:359)\n        at org.apache.lucene.codecs.lucene40.values.DirectSource.getBytes(DirectSource.java:60)\n        at org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getBytes(FixedStraightBytesImpl.java:349)\n        ...",
    "attachments": {
        "LUCENE-4114.patch": "https://issues.apache.org/jira/secure/attachment/12531037/LUCENE-4114.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-05T21:40:18+0000",
            "content": "Followup: I built my own version of lucene-core with this line corrected (I cast docID to long) and ran my tests successfully. ",
            "author": "Walt Elder",
            "id": "comment-13289751"
        },
        {
            "date": "2012-06-05T22:06:39+0000",
            "content": "There may be a similar bug at line 345:\n\n      return data.fillSlice(bytesRef, docID * size, size);\n\nAnd at line 340 in Lucene40StoredFieldsReader:\n\nindexStream.seek(HEADER_LENGTH_IDX + docID * 8L); ",
            "author": "Jack Krupansky",
            "id": "comment-13289772"
        },
        {
            "date": "2012-06-05T22:09:45+0000",
            "content": "Sorry, the latter case is probably okay due to the \"L\" on \"8L\". BUt the former case is just int * int. ",
            "author": "Jack Krupansky",
            "id": "comment-13289775"
        },
        {
            "date": "2012-06-05T23:00:19+0000",
            "content": "Thanks Walt, nice find!\n\nI attached patch w/ 3 places that could overflow ... can anyone find any others in the DocValues sources...? ",
            "author": "Michael McCandless",
            "id": "comment-13289827"
        },
        {
            "date": "2012-06-06T17:00:36+0000",
            "content": "Thanks Walt! ",
            "author": "Michael McCandless",
            "id": "comment-13290268"
        },
        {
            "date": "2012-06-06T17:44:25+0000",
            "content": "Awesome. Thanks all. ",
            "author": "Walt Elder",
            "id": "comment-13290293"
        },
        {
            "date": "2012-06-07T08:09:23+0000",
            "content": "thanks mike! ",
            "author": "Simon Willnauer",
            "id": "comment-13290878"
        }
    ]
}