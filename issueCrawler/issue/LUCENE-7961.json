{
    "id": "LUCENE-7961",
    "title": "SimpleFSLockFactory should catch+box IOException (not FileAlreadyExistsException | AccessDeniedException)",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "SimpleFSLockFactory will only convert FileAlreadyExistsException | AccessDeniedException from Files.createFile() into LockObtainFailedException. Neither of these are guaranteed from the API, only IOException.\n\nI think SimpleFSLockFactory should box any IOException from Files.createFile() into a LockObtainFailedException instead of just these two optional ones. It is simpler and more consistent behavior, even if its just theoretical problem for some FileSystem impl that doesn't throw these.",
    "attachments": {
        "LUCENE-7961.patch": "https://issues.apache.org/jira/secure/attachment/12886229/LUCENE-7961.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16156116",
            "date": "2017-09-06T22:21:06+0000",
            "content": "And to prevent confusion I think the exception should change slightly from:\n\nthrow new LockObtainFailedException(\"Lock held elsewhere: \" + lockFile, e);\n\n\n\nto:\n\n\nthrow new LockObtainFailedException(\"Lock held elsewhere or inaccessible: \" + lockFile, e);\n\n\n\nLet SimpleFSLockFactory not try to determine what happened, you can determine that from the caused-by. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16159784",
            "date": "2017-09-09T06:31:34+0000",
            "content": "Here's a patch. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16159786",
            "date": "2017-09-09T06:36:45+0000",
            "content": "We can of course add a test like LUCENE-7959, but I think its overkill. \n\nThe point is a filesystem can legally throw IOException(\"file already there\") from this method and the lockfactory will never deliver a LockObtainedFailedException. Also its confusing today that we catch AccessDenied to handle the sporatic windows case, and deliver \"lock held elsewhere\" (even though we chain the exception). it could just be a permissions error. And it can always be the case its just a leftover file. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16159790",
            "date": "2017-09-09T06:44:14+0000",
            "content": "I fixed a bug in my comment and clarified that windows case. ",
            "author": "Robert Muir"
        }
    ]
}