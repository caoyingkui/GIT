{
    "id": "LUCENE-2421",
    "title": "Hardening of NativeFSLock",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9.3",
            "3.0.2",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "NativeFSLock create a test lock file which its name might collide w/ another JVM that is running. Very unlikely, but still it happened a couple of times already, since the tests were parallelized. This may result in a false exception thrown from release(), when the lock file's delete() is called and returns false, because the file does not exist (deleted by another JVM already). In addition, release() should give a second attempt to delete() if it fails, since the file may be held temporarily by another process (like AntiVirus) before it fails. The proposed changes are:\n\n1) Use ManagementFactory.getRuntimeMXBean().getName() as part of the test lock name (should include the process Id)\n2) In release(), if delete() fails, check if the file indeed exists. If it is, let's attempt a re-delete() few ms later.\n3) If (3) still fails, throw an exception. Alternatively, we can attempt a deleteOnExit.\n\nI'll post a patch later today.",
    "attachments": {
        "LUCENE-2421.patch": "https://issues.apache.org/jira/secure/attachment/12443288/LUCENE-2421.patch",
        "LUCENE-2421-2.patch": "https://issues.apache.org/jira/secure/attachment/12448958/LUCENE-2421-2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-30T12:55:37+0000",
            "content": "Patch w/ the proposed changes and a fallback to deleteOnExit in acquireTestLock, if deleting the test lock fails still.\n\nBTW, I've used 100ms for the re-delete attempt delay. Do you think that's enough, or should I use a lower value, or perhaps IndexWriterConfig.getDefaultWriteLockTimeout (which is 1s unless changed)? ",
            "author": "Shai Erera",
            "id": "comment-12862660"
        },
        {
            "date": "2010-04-30T13:24:27+0000",
            "content": "I'm having second thoughts about using MXBean, since the name returned includes invalid filename characters such as @. Will need to check that next time I'm infront of the code, but perhaps w/ all the other changes that might not be necessary ... ",
            "author": "Shai Erera",
            "id": "comment-12862666"
        },
        {
            "date": "2010-04-30T15:11:06+0000",
            "content": "I think 100 msec is way too long \u2013 I was thinking more like 10 msec \n ",
            "author": "Michael McCandless",
            "id": "comment-12862706"
        },
        {
            "date": "2010-04-30T15:56:53+0000",
            "content": "Well ... we are talking about a fallback, last chance code, that should hardly ever be executed (i.e., I'm pretty sure the delete() failed b/c the file wasn't there anymore). So if we've reached that situation, I think we should give a reasonable \"last chance\"? So that if the file can't be deleted since it's locked by AntiVirus, we should be on the safe side?\n\nBut I don't have any strong feelings for it - if you think 10 ms are enough, I'll change it. ",
            "author": "Shai Erera",
            "id": "comment-12862725"
        },
        {
            "date": "2010-04-30T16:21:41+0000",
            "content": "I guess since it's a last resort \"we think will very rarely happen in practice\" thing... we can leave it @ 100 msec.  Just makes me nervous   Libraries shouldn't be doing things like sleeping on you (for so long)...\n\nHmm \u2013 after that sleep, we still throw LockReleaseFailedException if we are still unable to delete it?  Isn't it \"harmless\" if we can't delete it?\n\nAlso, rather than swallowing the InterruptedException, you should immediately throw ThreadInterruptedException \u2013 we fixed Lucene a while back to not swallow this exception (LUCENE-2053). ",
            "author": "Michael McCandless",
            "id": "comment-12862735"
        },
        {
            "date": "2010-04-30T18:56:51+0000",
            "content": "Libraries shouldn't be doing things like sleeping on you (for so long)...\n\nWell ... I think they'd appreciate the sleep instead of the immediate exception. Previuosly, I've been asked by customers to do that in other places. A 100ms sleep is barely noticeable (being so rare), but an exception definitely is! \n\nIsn't it \"harmless\" if we can't delete it?\n\nNo it isn't. I distinguish between two cases: the regular and test lock. For the regular lock, we've already agreed we cannot leave it behind as it will prevent future locking. For the test lock I catch the exception in acquireTestLock and call deleteOnExit() suppressing the exception.\n\nyou should immediately throw ThreadInterruptedException\n\nok, thought it'd be harmless here to ignore it since I'm only doing last resort actions. But if that's common practice now, I will throw the exception.\n\nThanks for the comments ! ",
            "author": "Shai Erera",
            "id": "comment-12862805"
        },
        {
            "date": "2010-04-30T19:53:24+0000",
            "content": "Well ... I think they'd appreciate the sleep instead of the immediate exception. Previuosly, I've been asked by customers to do that in other places. A 100ms sleep is barely noticeable (being so rare), but an exception definitely is\n\nYeah I agree we should try to be robust to the \"diverse\" installations out there, like AVs that tie up our files.\n\nFor the regular lock, we've already agreed we cannot leave it behind as it will prevent future locking\n\nWait, how come?  (SimpleFSLF does this, but native gets a \"real\" lock).\n\nFor the test lock I catch the exception in acquireTestLock and call deleteOnExit() suppressing the exception.\n\nOK. ",
            "author": "Michael McCandless",
            "id": "comment-12862834"
        },
        {
            "date": "2010-04-30T19:56:48+0000",
            "content": "Wait, how come? (SimpleFSLF does this, but native gets a \"real\" lock).\n\nYeah, this doesn't make sense to me either - native file locks don't care if the file is preexisting or not. It shouldnt matter if the file is already there or needs to be created. Its just a dummy file to get the lock on - even you start Lucene and the file exists, there will be no lock on it, so it won't matter. ",
            "author": "Mark Miller",
            "id": "comment-12862835"
        },
        {
            "date": "2010-05-01T04:03:37+0000",
            "content": "I guess that you've missed that on the thread: \"It is possible that two JVMs will attempt to lock the same Directory, one w/ Native and the other w/ Simple. If we won't check in obtain() whether the file exists, it might obtain a native lock, while the Directory is actually locked by another JVM using Simple\". Uwe also mentioned Native was fixed to use the same lock file name in 2.9 because of that.\n\nAnother thing why we cannot leave the lock file behind is because if you e.g. switch from Native to Simple you won't be able to obtain a lock.\n\nAnd personally I prefer that if the Directory is not locked then the file won't be there - even if just for clarity, or because how we've all become used to treat the existence of the lock file by now. And I'd also hate to add another line to bw section  ",
            "author": "Shai Erera",
            "id": "comment-12862967"
        },
        {
            "date": "2010-05-01T04:26:41+0000",
            "content": "Patch adds throwin ThreadInterruptedException.\n\nAbout using MXBean name, I wrote this code:\n\nString name = \"d:/temp/file-\" + ManagementFactory.getRuntimeMXBean().getName();\nnew File(name).createNewFile();\nSystem.out.println(new File(name).exists());\n\n\n\nThe file created included the @ character, which is valid on Windows (and also verified on Linux). But I'm still not sure about using it, because if a system returns a character that is not a valid file character, we may not get the same file name we think ... so maybe if we still want to use it, we should move it to the end of the string, so that the name includes the random number for sure ... what do you think? ",
            "author": "Shai Erera",
            "id": "comment-12862968"
        },
        {
            "date": "2010-05-01T04:27:38+0000",
            "content": "I guess that you've missed that on the thread\n\nNo, just havn't seen a good reason yet...\n\n \"It is possible that two JVMs will attempt to lock the same Directory, one w/ Native and the other w/ Simple. If we won't check in obtain() whether the file exists, it might obtain a native lock, while the Directory is actually locked by another JVM using Simple\". Uwe also mentioned Native was fixed to use the same lock file name in 2.9 because of that.\n\nLock factories do not have to work with all other lock factories...you need to use the same lock factory across all process'.\n\nAnother thing why we cannot leave the lock file behind is because if you e.g. switch from Native to Simple you won't be able to obtain a lock.\n\nNot true - there is no reason both simple and native need to use the same lock file - or even that the native lock feel needs to be in the same dir (eg it could be in a tmp dir)\n\nAnd personally I prefer that if the Directory is not locked then the file won't be there \n\nYou cannot guarantee this in any case. If they cannot be deleted, it cannot be deleted - but cleanliness is no reason to throw an exception in an event that is not actually a failure situation.\n\neven if just for clarity, or because how we've all become used to treat the existence of the lock file by now.\n\nI don't find that persuasive myself...\n\nAnd I'd also hate to add another line to bw section\n\nbut its not a back compat break ... ",
            "author": "Mark Miller",
            "id": "comment-12862969"
        },
        {
            "date": "2010-05-01T04:54:05+0000",
            "content": "Lock factories do not have to work with all other lock factories...you need to use the same lock factory across all process'.\n\nI agree, but I've grown accustomed here that we try to protect users from their own mistakes. I.e., if the factory is a parameter to the application, this can certainly happen, w/o any of the application owners even realize that ... so it just seems dangerous to me, and I think that the alternative of keeping the file there and failing elsewhere is not good.\n\nAnother scenario - one application opens the index on a local file system (which is shared) and uses Native, while the other, for safety reason, opens the index using Simple lock because it reads the index from a remote share ... does not make a lot of sense - but possible.\n\nor even that the native lock feel needs to be in the same dir (eg it could be in a tmp dir)\n\nGood point - but it's irrelevant to that issue - one can already shoot himself in the leg today by doing that. That's something I don't think we can protect from ... but allowing two lock files in the same directory - that just seems like a bug. Still, one could impl MyOwnNativeFSLock and create \"my.lock.file\" ... but we cannot protect from that either. So at least, and that's my own opinion, the core factories that are provided w/ Lucene should behave well.\n\nSo Mark - I agreed w/ you before on that, until Uwe brought up the reason why NativeFSLock was fixed in 2.9 to use the same lock file as Simple ... it seems like a good catch to me, and I think if it was fixed once already, do we really want to break that fix? That will certainly be a bw break, because now NativeFSLock could obtain a lock if a lock file is there (I'm not sure if we have tests that cover that scenario, but I have a feeling some will fail if we change that).\n\nIf the result of that discussion is that we should not fail if the lock file cannot be deleted, then I think we should rename it too, so that Native and Simple use different files and it is clear that you're using two different LFs, which is not supported? ",
            "author": "Shai Erera",
            "id": "comment-12862973"
        },
        {
            "date": "2010-05-01T07:29:15+0000",
            "content": "The file created included the @ character, which is valid on Windows (and also verified on Linux). But I'm still not sure about using it, because if a system returns a character that is not a valid file character, we may not get the same file name we think ... so maybe if we still want to use it, we should move it to the end of the string, so that the name includes the random number for sure ... what do you think?\n\nI suggested on IRC to take the output of getName() and do a regexp replace and replace all non ACSII-digit chars:\n\nManagementFactory.getRuntimeMXBean().getName().replaceAll(\"[^a..zA..Z0..9]+\",\"\")\n\n\nOr alternatively simply use the hashCode of that String (but that is less unique). ",
            "author": "Uwe Schindler",
            "id": "comment-12862994"
        },
        {
            "date": "2010-05-01T12:08:16+0000",
            "content": "I'm still confused on the native/simple working together thing - I don't see where native will respect simple's lock? Am I missing something?\n\nAlso, its almost more confusing that simple will respect the native lock file, when that file is not even native's actual lock - just its medium for a lock. If they could really work together, why even have a native lock? ",
            "author": "Mark Miller",
            "id": "comment-12863011"
        },
        {
            "date": "2010-05-02T07:44:47+0000",
            "content": "You're right Mark ! I did not do a thorough check on NativeFSLock.obtain(). In the beginning of the method, it calls lockExists() and I assumed it checks for the existence of the file. But it actually checks whether the FileLock is not null. So that means:\n\n\tIf one obtains a Native lock and later a Simple lock obtain is attempted - it will fail.\n\tIf one obtains a Simple lock and later a Native lock obtain is attempted - it will succeed.\n\n\n\nI wrote the following code to demonstrate that:\n\nSimpleFSLockFactory simple = new SimpleFSLockFactory(dir);\nNativeFSLockFactory nativel = new NativeFSLockFactory(dir);\nSystem.out.println(nativel.makeLock(\"test\").obtain());\nSystem.out.println(simple.makeLock(\"test\").obtain());\n\n\n\nThis prints \"true\" and \"false\" while if you move the simple.makeLock line above the native, it prints \"true\" twice.\n\nI don't know if that's a problem or not because it all boils down to whether we want to be nice if the user has made a mistake and used two lock factories in two different places of the code.\n\nGiven that, if we are ok to declare this is unsupported in the sense that the code won't play nice, then I'm ok w/ not failing if the lock file deletion fails, for both the regular and test lock. I think it makes sense to decide the code doesn't play nice, because someone can anyway extend LF and do such silly mistakes ... ",
            "author": "Shai Erera",
            "id": "comment-12863099"
        },
        {
            "date": "2010-05-03T09:33:10+0000",
            "content": "Patch includes:\n\n\tNot throwing exception if the delete() fails\n\tAdded test case to TestLockFactory\n\tRecord in Runtime Behavior in CHANGES\n\n ",
            "author": "Shai Erera",
            "id": "comment-12863281"
        },
        {
            "date": "2010-05-03T09:41:42+0000",
            "content": "Hmm so if failure to delete is no longer a serious issue (ie we are not going to throw an exception), do we really need to sleep for a long time & retry the deletion any more?\n\nThis is all based on a hypothetical situation right (\"we may fail to delete the test file we just created, and it still exists\")?  Maybe we should wait until this is really an issue (ie, a user actually hits it), before implementing this workaround code? ",
            "author": "Michael McCandless",
            "id": "comment-12863284"
        },
        {
            "date": "2010-05-03T09:51:56+0000",
            "content": "That's just so that we \"behave nicely\" with the application and not leave behind the lock file. I'm thinking that if you see a write.lock file in the directory, it makes you wonder why it's there, and if the index was closed properly or not etc. The existence of the file does not tell you anything about which LF is used (Native or Simple) and so you cannot know for sure what went wrong. Going the extra mile, even if it's only in rare cases, seems harmless, no?\n\nI don't think it's critical, but I also don't think the code complicates matters? ",
            "author": "Shai Erera",
            "id": "comment-12863288"
        },
        {
            "date": "2010-05-03T10:22:31+0000",
            "content": "Well sleeping for so long isn't necessarily harmless \n\nAnd it's code to fix a problem that's only theoretical at this point \u2013 we've never seen this actually happen \u2013 so this violates 'design for today'.  Why fix something that may not even be an actual problem...\n\nAlso the lock file name has \"-test\" in it, which is a strong hint to the future hypothetical user that hits this. ",
            "author": "Michael McCandless",
            "id": "comment-12863299"
        },
        {
            "date": "2010-05-03T11:22:07+0000",
            "content": "Ok, I'm convinced - let's design for today. Removed the \"last chance\" code. ",
            "author": "Shai Erera",
            "id": "comment-12863310"
        },
        {
            "date": "2010-05-03T11:42:34+0000",
            "content": "Looks good! ",
            "author": "Uwe Schindler",
            "id": "comment-12863316"
        },
        {
            "date": "2010-05-03T12:32:31+0000",
            "content": "Thanks Shai \u2013 this looks great! ",
            "author": "Michael McCandless",
            "id": "comment-12863323"
        },
        {
            "date": "2010-05-04T05:29:13+0000",
            "content": "Committed revision 940730. ",
            "author": "Shai Erera",
            "id": "comment-12863672"
        },
        {
            "date": "2010-05-05T15:42:12+0000",
            "content": "Back-port to 3.1 as well ",
            "author": "Shai Erera",
            "id": "comment-12864369"
        },
        {
            "date": "2010-05-05T16:09:54+0000",
            "content": "Committed revision 941361 (backport to 3x). ",
            "author": "Shai Erera",
            "id": "comment-12864383"
        },
        {
            "date": "2010-05-30T14:35:24+0000",
            "content": "backport ",
            "author": "Michael McCandless",
            "id": "comment-12873436"
        },
        {
            "date": "2010-07-08T06:42:09+0000",
            "content": "Reopening to handle clearLock. Patch will be posted soon. ",
            "author": "Shai Erera",
            "id": "comment-12886259"
        },
        {
            "date": "2010-07-08T07:10:13+0000",
            "content": "Patch fixes clearLock to first release the lock and then delete it. If the release fails, it means another process is holding the lock and therefore we shouldn't fail. If the delete fails, it ignores it.\n\nI plan to commit shortly. ",
            "author": "Shai Erera",
            "id": "comment-12886264"
        },
        {
            "date": "2010-07-08T08:03:32+0000",
            "content": "Fixed on 3x and trunk ",
            "author": "Shai Erera",
            "id": "comment-12886279"
        },
        {
            "date": "2010-10-05T15:16:18+0000",
            "content": "So, I'm confused on how/why the test lock name would get a conflict\nwith multiple JREs running our unit tests.\n\nIe, each JRE runs tests in certain index directories.  And the test\nlock is acquired in the index directory.  So, if tests running in\ndifferent JREs are sharing the same index directory, then more serious\nproblems will ensue.\n\nI think it must have only been the test output formatter\n(LuceneJUnitResultFormatter) that was conflicting on the test lock\nname.  Because this is the only locking usage that'd be sharing the\nsame lock dir across JREs... ",
            "author": "Michael McCandless",
            "id": "comment-12918019"
        },
        {
            "date": "2010-10-05T15:21:31+0000",
            "content": "From what I remember, it was due to LuceneJUnitResultFormatter, yes.\n\nI don't mind if we stop using j.l.management and move to either:\n\n\tSeed the Random w/ System.nanoTime() or\n\tDon't acquire a test lock.\n\n\n\nI don't remember if I ever tried the first approach. Your comment on LUCENE-2688 about not acquiring the test lock makes sense to me, but some testing would be required to confirm that I guess. ",
            "author": "Shai Erera",
            "id": "comment-12918020"
        },
        {
            "date": "2010-10-05T15:39:07+0000",
            "content": "I'll open a new issue, to remove acquireTestLock... all tests pass with it removed. ",
            "author": "Michael McCandless",
            "id": "comment-12918030"
        },
        {
            "date": "2011-03-30T15:50:25+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013473"
        }
    ]
}