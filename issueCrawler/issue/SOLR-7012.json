{
    "id": "SOLR-7012",
    "title": "add an ant target to package a plugin into a jar",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Now it is extremely hard to create  plugin because the user do not know about the exact dependencies and their poms\nwe will add a target to solr/build.xml called plugin-jar\ninvoke it as follows\n\n\nant -Dplugin.package=my.package -Djar.location=/tmp/my.jar plugin-jar",
    "attachments": {
        "SOLR-7012-sdk.patch": "https://issues.apache.org/jira/secure/attachment/12695331/SOLR-7012-sdk.patch",
        "SOLR-7012.patch": "https://issues.apache.org/jira/secure/attachment/12694759/SOLR-7012.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-27T10:11:14+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Added a patch which creates a plugin jar for a user, provided his plugin code resides in the solr/core/src/java folder.\n\nExample:\n    ant -Dplugin.package=com.my.plugin -Djar.location=abcd.jar plugin-jar ",
            "id": "comment-14293283"
        },
        {
            "date": "2015-01-27T10:50:22+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated the patch to use javascript to do the string replacement instead of the macrodef used in previous patch. ",
            "id": "comment-14293340"
        },
        {
            "date": "2015-01-27T11:27:23+0000",
            "author": "Noble Paul",
            "content": "use assert to ensure that those properties are set\n http://ant-contrib.sourceforge.net/tasks/tasks/assert_task.html\n\nwhy was that <script> required?\n ",
            "id": "comment-14293385"
        },
        {
            "date": "2015-01-27T11:43:42+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Assert would need ant-contrib jars, and a base ant installation wouldn't work. <fail unless=... should suffice.\nThe <script> was to convert something like \"my.plugin.pkg\" to \"my/plugin/pkg\" (replace dot with slash) so that it can be used in the fileset path for the jar. Alternative to using that script is to use <propertyregex> tag, but, for that too, the ant-contrib jars are needed. ",
            "id": "comment-14293393"
        },
        {
            "date": "2015-01-27T15:43:28+0000",
            "author": "Erik Hatcher",
            "content": "IMO, this \"SDK\" of sorts needs to be separate from Solr's own build.  But connected in that it needs to leverage the common-build infrastructure.  I've done this sort of thing like this https://gist.github.com/erikhatcher/3aa0b40a6a3547d5405c - I've morphed it slightly and pasted here:\n\n<?xml version=\"1.0\"?>\n\n<project name=\"solr-development-kit\" default=\"default\">\n  <description>\n     Solr Development Kit\n  </description>\n  \n  <property name=\"lucene.root\" location=\"lucene-solr-5.0.0\"/>\n  <property name=\"solr.root\" location=\"${lucene.root}/solr\"/>\n  \n  <property name=\"build.dir\" location=\"build\"/>\n\n  <import file=\"${solr.root}/contrib/contrib-build.xml\"/>\n  \n</project>\n\n\n\nA developer could have their own work directory with this build file, and benefit from \"ant test\", and all the other ant targets that we provide for the contrib/ modules built into Solr.\n\nI envision us shipping in future Solr distros an \"sdk\" directory that has just the build file infrastructure used by Lucene/Solr itself, including whatever it takes like this type of build file, to easily enable a developer to build plugins.\n\nFurther, the SDK build infrastructure could extend to uploading the built plugin to a running Solr cluster even too. ",
            "id": "comment-14293697"
        },
        {
            "date": "2015-01-27T20:06:46+0000",
            "author": "Noble Paul",
            "content": "what would be the steps involved to write and package user's code?\n\nwill it be easier than the patch submitted by ishan? ",
            "id": "comment-14294099"
        },
        {
            "date": "2015-01-29T15:28:12+0000",
            "author": "Erik Hatcher",
            "content": "what would be the steps involved to write and package user's code? will it be easier than the patch submitted by ishan?\n\nDeveloper would create a directory structure (anywhere they like, ideally outside of the Lucene/Solr source tree) the same as any of our contrib/ modules, put this build.xml file there, and make sure the pointer to the root of the Lucene source tree (or plugin SDK tree) is right.  We could automate this a bit with an \"SDK\" directory in our distro that would generate a skeleton project directory for them.\n\nLooks like the patch here requires the plugin to be in the Lucene source tree, which is not ideal.  Developers would want to have their own custom code in their own managed code directories/systems. ",
            "id": "comment-14297014"
        },
        {
            "date": "2015-01-29T19:04:59+0000",
            "author": "Erik Hatcher",
            "content": "Here's a strawman patch.  (from the 5.0 release branch, just where I'm working these days, also note patch rooted from solr/).  See the README.txt for details.  There is a standalone directory called example_plugin that has a request handler.  The Lucene/Solr contrib build infrastructure provide the magic, and there's no doubt some work to be done to tease all the bits apart to have this work from a binary distro.   ",
            "id": "comment-14297352"
        },
        {
            "date": "2015-05-06T07:53:35+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I propose that we piggy back on maven's archetype support and have Solr publish its own solr-plugin archetype. Then anybody who wants to write a solr plugin can execute e.g.\n\nmvn archetype:generate -DgroupId=com.my.solrplugin -DartifactId=my-solr-plugin\n\t-DarchetypeGroupId=org.apache.solr -DarchetypeArtifactId=solr-plugin -DinteractiveMode=false\n\n\n\nThis will create project structure with a custom pom.xml with appropriate defaults that we (Solr) can control.\n\nSee http://maven.apache.org/guides/mini/guide-creating-archetypes.html ",
            "id": "comment-14530111"
        },
        {
            "date": "2016-11-18T22:43:00+0000",
            "author": "Cassandra Targett",
            "content": "Changed this from being a sub-task of SOLR-5200, since it doesn't seem directly related to a Config API and all the other sub-tasks there are completed. ",
            "id": "comment-15677995"
        }
    ]
}