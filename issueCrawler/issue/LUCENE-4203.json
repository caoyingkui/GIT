{
    "id": "LUCENE-4203",
    "title": "Add IndexWriter.tryDeleteDocument, to delete by document id when possible",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from LUCENE-4069.\n\nIn that use case, where the app needs to first lookup a document, then\ncall updateDocument, it's wasteful today because the relatively costly\nlookup (by a primary key field, eg \"id\") is done twice.\n\nBut, since you already resolved the PK to docID on the first lookup,\nit would be nice to then delete by that docID and then you can call\naddDocument instead.\n\nSo I worked out a rough start at this, by adding\nIndexWriter.tryDeleteDocument.  It'd be a very expert API: it takes a\nSegmentInfo (referencing the segment that contains the docID), and as\nlong as that segment hasn't yet been merged away, it will mark the\ndocument for deletion and return true (success).  If it has been\nmerged away it returns false and the app must then delete-by-term.  It\nonly works if the writer is in NRT mode (ie you've opened an NRT\nreader).\n\nIn LUCENE-4069 using tryDeleteDocument gave a ~20% net speedup.\n\nI think tryDeleteDocument would also be useful when Solr \"updates\" a\ndocument by loading all stored fields, changing them, and calling\nupdateDocument.",
    "attachments": {
        "LUCENE-4203.patch": "https://issues.apache.org/jira/secure/attachment/12535726/LUCENE-4203.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-09T19:26:03+0000",
            "content": "Initial rough patch ... not ready to commit and needs a good random test. ",
            "author": "Michael McCandless",
            "id": "comment-13409761"
        },
        {
            "date": "2012-07-09T19:31:15+0000",
            "content": "Whats the advantage of passing the SIPC here? Wouldnt it be cleaner to just take SegmentReader and steal it from there? ",
            "author": "Robert Muir",
            "id": "comment-13409768"
        },
        {
            "date": "2012-07-09T20:18:26+0000",
            "content": "Whats the advantage of passing the SIPC here? Wouldnt it be cleaner to just take SegmentReader and steal it from there?\n\nOh, no advantage ... I agree passing SR would be better (then we can leave SR.getSI() as package private).  It shouldn't be any hardship either because you should use an NRT reader from IW anyway to even find the docID to delete. ",
            "author": "Michael McCandless",
            "id": "comment-13409807"
        },
        {
            "date": "2012-07-09T20:22:58+0000",
            "content": "\nIt shouldn't be any hardship either because you should use an NRT reader from IW anyway to even find the docID to delete.\n\nShould we consider splitting out NRTSegmentReader and just make it type-safe?\n\nSegmentReader is already simplified, as long as its an AtomicReader nothing in Lucene should care, and\nwe could factor out the NRT-only ctor etc in SR today...\n\nJust an idea, not sure about it myself  ",
            "author": "Robert Muir",
            "id": "comment-13409811"
        },
        {
            "date": "2012-07-09T20:48:29+0000",
            "content": "Should we consider splitting out NRTSegmentReader and just make it type-safe?\n\nHmm interesting...\n\nI think we shouldn't: the only reason why IW must be in NRT mode (pooling readers) is because of a limitation of IW: it cannot buffer pending deleted docIDs against already-flushed segments unless it has a pooled reader for that segment.\n\nWe could (should?) someday fix this limitation, so I don't think the API sig should lock it down today.\n\nI also don't want users to think there may be salient differences b/w an NRT reader and a \"normal\" reader.  The only difference is how the reader got the list of segments it should open ... otherwise an NRT reader and non-NRT reader are identical now. ",
            "author": "Michael McCandless",
            "id": "comment-13409832"
        },
        {
            "date": "2012-07-10T17:06:48+0000",
            "content": "Hi Mike,\n\nthe user does not see any impl class (we should actually hide SegmentReader again), user only sees AtomicReader. NRT should subclass (the internal) SegmentReader and after that the code can simply check the incoming Reader if it is NRTReader. If not it say \"I cannot delete documents by id with non-NRT IndexWriter\". Nothing more, plain simple. Please do not make anything of these crazy internal classes public!\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-13410547"
        },
        {
            "date": "2012-07-11T15:41:35+0000",
            "content": "OK I'll use AtomicReader, though it really must be a SegmentReader (we can cast it) since we need the SegmentInfoPerCommit instance from it.\n\nHmm I suppose it could also be a CompositeReader (nrt DirectoryReader), and then the method would have to resolve to the AtomicReader (SegmentReader) / sub-docID. ",
            "author": "Michael McCandless",
            "id": "comment-13411640"
        },
        {
            "date": "2012-07-30T18:39:26+0000",
            "content": "New patch, allowing any IndexReader, adding javadocs, and updating TestRollingUpdates to use tryDeleteDocument.  I think it's ready! ",
            "author": "Michael McCandless",
            "id": "comment-13425115"
        }
    ]
}