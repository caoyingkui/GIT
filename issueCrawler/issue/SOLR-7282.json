{
    "id": "SOLR-7282",
    "title": "Cache config or index schema objects by configset and share them across cores",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Sharing schema and config objects has been known to improve startup performance when a large number of cores are on the same box (See http://wiki.apache.org/solr/LotsOfCores).Damien also saw improvements to cluster startup speed upon caching the index schema in SOLR-7191.\n\nNow that SolrCloud configuration is based on config sets in ZK, we should explore how we can minimize config/schema parsing for each core in a way that is compatible with the recent/planned changes in the config and schema APIs.",
    "attachments": {
        "SOLR-7282.patch": "https://issues.apache.org/jira/secure/attachment/12751954/SOLR-7282.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-24T02:26:45+0000",
            "author": "Damien Kamerman",
            "content": "Cache cloud schemas by name ",
            "id": "comment-14708692"
        },
        {
            "date": "2015-10-02T00:50:00+0000",
            "author": "Shawn Heisey",
            "content": "Something to think about, and this might affect the existing non-cloud feature \"shareSchema\" too:\n\nIf the actual Java object is shared, we need to be careful about behavior on reload.  Users expect that updating the config in zookeeper will not cause immediate usage of that config, that they will have to do a reload before it will take effect.  Say that one machine, updated with a Solr version that has a fix for this issue, hosts ten cores that are replicas for various shards from Collection A.  Those ten cores are all sharing Java objects for config and schema.\n\nWhen the user updates the config in zookeeper that for collection A, here's how I think everything should play out:\n\n\n\tThe objects that those ten cores are sharing will NOT be updated by the change to zookeeper \u2013 they will still contain info from the config before modification.\n\tWhen one of those cores is reloaded, it should create new objects holding the new information in zookeeper, but the other cores for that collection will still have the old objects with the old config.\n\tWhen a second and subsequent cores are reloaded, they should share the objects created during the first core reload.\n\n\n\nThe coding challenge will be to figure out when the existing set of config objects (probably at the CoreContainer level) need to be thrown away (but still held by existing cores) and replaced with a new set of objects.  I'm guessing that the config znode in zookeeper contains some info that will only change when the config is updated, that info could probably be used. ",
            "id": "comment-14940653"
        },
        {
            "date": "2016-06-22T12:12:15+0000",
            "author": "Noble Paul",
            "content": "Looked at the patch. It's broken. \n\nThe way you cache things assume that schema is immutable. it is not. IndexSchema can change all the time. So, the cache must be aware of the znode version from where the schema is loaded. \n\nThere are two ways we can cache.\n\n\tCache the schema file content and avoid reloading from ZK. This is low impact and cheaper to implement but less beneficial. The cost of parsing the XML is high. If we can pre-parse the XML and store them as Java objects and share this java object it is faster.\n\tCache the IndexSchema object. This would mean, we need to carefully look  at the lifecycle of components in IndexSchema. We will also have to keep in mind that eventually we will have to support dynamic loading of components in schema. I would say this is a risky path to take\n\n\n\n ",
            "id": "comment-15344197"
        },
        {
            "date": "2016-07-13T02:07:04+0000",
            "author": "damien kamerman",
            "content": "What about caching the IndexSchema object only when the schemaFactory is the (immutable) ClassicIndexSchemaFactory? ",
            "id": "comment-15374179"
        },
        {
            "date": "2016-07-13T08:11:46+0000",
            "author": "Noble Paul",
            "content": "I have opened a ticket more comprehensively address these requirements SOLR-9273 ",
            "id": "comment-15374572"
        },
        {
            "date": "2016-11-30T01:24:05+0000",
            "author": "Scott Blum",
            "content": "Could we cache by content hash?  Then even collections that physically don't share the same configset but whose contents are identical could share config. ",
            "id": "comment-15707159"
        },
        {
            "date": "2016-11-30T04:20:08+0000",
            "author": "Noble Paul",
            "content": "How do we compute the hash w/o downloading the content? Doesn't it mean that we have to fetch the whole file every time? The only savings that we get, in that case, is the cost of parsing ",
            "id": "comment-15707482"
        },
        {
            "date": "2016-11-30T04:20:19+0000",
            "author": "Noble Paul",
            "content": "How do we compute the hash w/o downloading the content? Doesn't it mean that we have to fetch the whole file every time? The only savings that we get, in that case, is the cost of parsing ",
            "id": "comment-15707484"
        },
        {
            "date": "2016-11-30T04:35:54+0000",
            "author": "Scott Blum",
            "content": "Keep a separate map of znode + version -> content hash? ",
            "id": "comment-15707512"
        },
        {
            "date": "2016-11-30T04:50:34+0000",
            "author": "Erick Erickson",
            "content": "The idea of sharing collections that are named differently but happen to be exactly the same strikes me as added complexity for very little gain. And tracking down errors in that world would be...interesting. \n\n+1 to reusing the same objects if possible for configsets that have the same znode (assuming it handles the mutable issue)\n-1 to using a configset other than the one specified by the user when the collection was created because we think it's the same based on the hash.\n ",
            "id": "comment-15707531"
        },
        {
            "date": "2016-11-30T17:42:01+0000",
            "author": "Scott Blum",
            "content": "I mean, content hashing is a pretty ubiquitous technique.  Git is fundamentally built on it.\n\nThe reason I personally care is that our cluster is so old I'm not even sure if configsets were a thing when we started.  So we have 4000 collections with 4000 identical configurations.\n\nIs there even a way to change an existing collection to use a configset? ",
            "id": "comment-15709228"
        },
        {
            "date": "2016-11-30T18:46:20+0000",
            "author": "Erick Erickson",
            "content": "Scott:\n\nMy concern has nothing to do with technical capabilities/correctness and everything to do with surprising the users and, as an aside, introducing the possibilities for error. Introducing such code to support an old version of Solr is even less appealing, this sounds like a local patch if you think it's worth it. And I'm a little puzzled. You mention \"collections\", which have always had the notion of configsets. Or are you dealing with stand-alone?\n\nIf you're really thinking cores and working with stand-alone, if/when you upgrade to a Solr that does respect configsets, you should be able to change your core.properties files and add the configSet parameter, see: https://cwiki.apache.org/confluence/display/solr/Defining+core.properties and point them all at the same configset. Then the normal processing we're talking about here should work without deciding to reuse based on hashing rather than the user's express intent. Changing 4,000 properties files while inelegant seems like a lot less work than coding/debugging/maintaining some kind of \"you said to use X but we're ignoring that because we know better\"\n\nReusing the same internal object based on identical specifications (i.e. the user named a particular configset) seems like a fine idea. Doing something other than what the user specified because we think we know better to support an edge case that there should be other ways of addressing seems unnecessary.\n\nIMO of course.\n ",
            "id": "comment-15709391"
        },
        {
            "date": "2016-11-30T19:04:34+0000",
            "author": "Scott Blum",
            "content": "Erick, apologies, I'm sick so I'm not explaining this well.\n\nI'm not talking about doing anything contrary to what the user asked for.  I am only talking about a memory-saving implementation detail.  If the internal object representing a configset is in fact immutable and sharable, then there is no user-facing difference as to whether two configsets with identical content are internally represented by the same immutable sharable object or two different but indistinguishable identical objects.\n\nTo answer your other questions we're not on an old solr, we're in solrcloud.  core.properties doesn't apply the config is in ZK.  The problem is we have one configset per collection.  4000 collections, 4000 configsets, all content identical.  Does MODIFYCOLLECTION actually allow you to change the configset a particular collection points to?  I swear last time I looked at that doc, collection.configName wasn't in the list of things you could mutate. ",
            "id": "comment-15709440"
        },
        {
            "date": "2016-11-30T19:19:08+0000",
            "author": "Kevin Risden",
            "content": "Scott Blum - Not sure if its in the COLLECTIONS API, but there is a linkconfig operation on the zkcli.sh script. Look under \"Link a collection to a configuration set\" on this page: https://cwiki.apache.org/confluence/display/solr/Command+Line+Utilities ",
            "id": "comment-15709484"
        },
        {
            "date": "2016-11-30T19:26:07+0000",
            "author": "Shawn Heisey",
            "content": "The way that I was always aware of for changing this in cloud mode is zkcli, using the linkconfig command.  Followed of course by a collection reload.\n\nI wasn't even really aware of MODIFYCOLLECTION until just now ... the docs do say that you can update collection.configName.  SOLR-5132 (which implemented MODIFYCOLLECTION) says that the intent was to automatcially a reload in the event the configname was modified.  I don't know if the automatic reload was implemented.\n\nhttps://cwiki.apache.org/confluence/display/solr/Collections+API#CollectionsAPI-modifycoll ",
            "id": "comment-15709514"
        },
        {
            "date": "2016-11-30T19:32:42+0000",
            "author": "Scott Blum",
            "content": "OH, it was just added in 6.2\n\nhttps://issues.apache.org/jira/browse/SOLR-9216 ",
            "id": "comment-15709533"
        },
        {
            "date": "2016-11-30T19:33:12+0000",
            "author": "Scott Blum",
            "content": "Thanks Kevin, we'll use that. ",
            "id": "comment-15709534"
        }
    ]
}