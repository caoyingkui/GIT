{
    "id": "LUCENE-7261",
    "title": "Speed up LSBRadixSorter",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Currently it always does 4 passes over the data (one per byte, since ints have 4 bytes). However, most of the time, we know maxDoc, so we can use this information to do fewer passes when they are not necessary. For instance, if maxDoc is less than or equal to 2^24, we only need 3 passes, and if maxDoc is less than or equals to 2^16, we only need two passes.",
    "attachments": {
        "MSBRadixSorter.java": "https://issues.apache.org/jira/secure/attachment/12805870/MSBRadixSorter.java",
        "LUCENE-7261.patch": "https://issues.apache.org/jira/secure/attachment/12801231/LUCENE-7261.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15262103",
            "author": "Adrien Grand",
            "date": "2016-04-28T13:09:23+0000",
            "content": "Here is a patch. It also removes the offset parameter since we always use 0 in practice. This makes the code much easier to follow. "
        },
        {
            "id": "comment-15262186",
            "author": "Yonik Seeley",
            "date": "2016-04-28T14:03:54+0000",
            "content": "+1\n\nAs an aside, I was looking at this stuff a while ago and had decided on trying an MSB sort first (before you added LSB).\n\n\tcan be in-place\n\tsince all buckets are sorted relative to each other, can delegate to a different sorting algorithm when buckets become small\n\n\n "
        },
        {
            "id": "comment-15262369",
            "author": "Adrien Grand",
            "date": "2016-04-28T15:45:37+0000",
            "content": "I implemented LSB because it is very easy to implement. But +1 to explore whether we can make things faster or generate less garbage with MSB sort first. "
        },
        {
            "id": "comment-15262411",
            "author": "Yonik Seeley",
            "date": "2016-04-28T16:11:42+0000",
            "content": "I had prev implemented MSD for integers and I was grepping for that code this morning... can't seem to find it  "
        },
        {
            "id": "comment-15262446",
            "author": "ASF subversion and git services",
            "date": "2016-04-28T16:30:06+0000",
            "content": "Commit 8ca6f6651ede19bfaee9051e9b87927685cb9be0 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8ca6f66 ]\n\nLUCENE-7261: Speed up LSBRadixSorter. "
        },
        {
            "id": "comment-15262447",
            "author": "ASF subversion and git services",
            "date": "2016-04-28T16:30:07+0000",
            "content": "Commit ef45d4b2e1f9c967b62340acb027f50888a00ba2 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ef45d4b ]\n\nLUCENE-7261: Speed up LSBRadixSorter. "
        },
        {
            "id": "comment-15277164",
            "author": "Hoss Man",
            "date": "2016-05-09T22:10:06+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        },
        {
            "id": "comment-15298175",
            "author": "Adrien Grand",
            "date": "2016-05-24T13:37:32+0000",
            "content": "Yonik Seeley FYI I played with MSB radix sort to see how it compares with LSB in terms of performance but LSB outperformed it by about 2x. I am attaching the code here in case you want to have a look, it is totally possible that the implementation is not optimal... "
        },
        {
            "id": "comment-15298281",
            "author": "Yonik Seeley",
            "date": "2016-05-24T14:44:54+0000",
            "content": "Thanks Adrien, interesting.  Definitely not the results I expected (but I never tested against anything else).  IIRC I think reorder looked a bit different in my implementation. When I get some time, I'll take a crack at it just for the fun of it  "
        }
    ]
}