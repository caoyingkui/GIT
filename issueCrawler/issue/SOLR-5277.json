{
    "id": "SOLR-5277",
    "title": "Stamp core names on log entries for certain classes",
    "details": {
        "affect_versions": "4.3.1,                                            4.4,                                            4.5",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search",
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "It is handy that certain Java classes stamp a [coreName] on a log entry. It would be useful for multicore setup if more classes would stamp this information.\n\nIn particular we came accross a situaion with commits coming in a quick succession to the same multicore shard and found it to be hard time figuring out was it the same core or different cores.\n\nThe classes in question with log sample output:\n\no.a.s.c.SolrCore\n\n06:57:53.577 [qtp1640764503-13617] INFO  org.apache.solr.core.SolrCore - SolrDeletionPolicy.onCommit: commits:num=2\n\n11:53:19.056 [coreLoadExecutor-3-thread-1] INFO  org.apache.solr.core.SolrCore - Soft AutoCommit: if uncommited for 1000ms;\n\n\n\no.a.s.u.UpdateHandler\n\n14:45:24.447 [commitScheduler-9-thread-1] INFO  org.apache.solr.update.UpdateHandler - start commit\n{,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=true,prepareCommit=false}\n\n06:57:53.591 [qtp1640764503-13617] INFO  org.apache.solr.update.UpdateHandler - end_commit_flush\n\n\n\no.a.s.s.SolrIndexSearcher\n\n14:45:24.553 [commitScheduler-7-thread-1] INFO  org.apache.solr.search.SolrIndexSearcher - Opening Searcher@1067e5a9 main\n\n\nThe original question was posted on #solr and on SO:\n\nhttp://stackoverflow.com/questions/19026577/how-to-output-solr-core-name-with-log4j",
    "attachments": {
        "SOLR-5277.patch": "https://issues.apache.org/jira/secure/attachment/12605992/SOLR-5277.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13782370",
            "date": "2013-09-30T22:48:18+0000",
            "content": "\n06:57:53.577 [qtp1640764503-13617] INFO org.apache.solr.core.SolrCore - SolrDeletionPolicy.onCommit: commits:num=2\n\nThis one is in SolrDeletionPolicy.onCommit.  The logger for this class uses SolrCore.class ... is this correct, or should the logging correctly refer to the actual class?  I can't see a way to get the core name for this particular log entry.  Because of the way that onCommit gets called, I don't even know where the call is happening.\n\n\n11:53:19.056 [coreLoadExecutor-3-thread-1] INFO org.apache.solr.core.SolrCore - Soft AutoCommit: if uncommited for 1000ms;\n\nThis is in CommitTracker.java.  Similar to the previous one, I can't see how I could get the core name.\n\n\n14:45:24.447 [commitScheduler-9-thread-1] INFO org.apache.solr.update.UpdateHandler - start commit\nUnknown macro: {,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=true,prepareCommit=false} \n\n06:57:53.591 [qtp1640764503-13617] INFO org.apache.solr.update.UpdateHandler - end_commit_flush\n\n14:45:24.553 [commitScheduler-7-thread-1] INFO org.apache.solr.search.SolrIndexSearcher - Opening Searcher@1067e5a9 main\n\nI found these ones.  Patch coming soon. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13782371",
            "date": "2013-09-30T22:49:20+0000",
            "content": "Patch adding [core] to logging in some places where it is easily obtained. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13782421",
            "date": "2013-09-30T23:29:46+0000",
            "content": "Is it really necessary to do it this way, or can the threads (which are already printed) simply be named better? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13782464",
            "date": "2013-10-01T00:12:10+0000",
            "content": "I'm pretty much a beginner at this.  I had a few programming classes a long time ago, and started teaching myself java about two years ago.   This is the only idea I have right now about how to do it.\n\nBetter thread names sounds pretty good to me!  I'm willing to give it a try if you can point me in the right direction.\n\nIt looks like the thread name is included in the example log4j.properties, but I don't think I included it in mine that I built myself.  If that's how we want to tackle this, the logging docs should probably mention that a lot of useful information can only be obtained from the thread names. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13782485",
            "date": "2013-10-01T00:34:25+0000",
            "content": "I think for the query case you get a jetty thread name.. i mean im not really sure who names it, but i just suspect that (e.g. qtp1640764503-13617). But the update cases seem like something is created by solr (e.g. commitScheduler-7-thread-1). \n\nIf either or both of these when created, could include the name of the core, then the logging classes wouldn't have to concern themselves with adding the core's name and it would just be in one place. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13782490",
            "date": "2013-10-01T00:43:38+0000",
            "content": "I will dig around and see what I can do with thread names.\n\nIf you already know where to look because of your familiarity with the code, I'm perfectly willing to accept help! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13782497",
            "date": "2013-10-01T00:53:23+0000",
            "content": "I searched with eclipse for \"commitScheduler\" and found it here.\n\nSo here is an untested example of what i mean:\n\n\nIndex: solr/core/src/java/org/apache/solr/update/CommitTracker.java\n===================================================================\n--- solr/core/src/java/org/apache/solr/update/CommitTracker.java\t(revision 1527836)\n+++ solr/core/src/java/org/apache/solr/update/CommitTracker.java\t(working copy)\n@@ -53,8 +53,7 @@\n   private int docsUpperBound;\n   private long timeUpperBound;\n   \n-  private final ScheduledExecutorService scheduler = \n-      Executors.newScheduledThreadPool(1, new DefaultSolrThreadFactory(\"commitScheduler\"));\n+  private final ScheduledExecutorService scheduler;\n   private ScheduledFuture pending;\n   \n   // state\n@@ -72,6 +71,7 @@\n   public CommitTracker(String name, SolrCore core, int docsUpperBound, int timeUpperBound, boolean openSearcher, boolean softCommit) {\n     this.core = core;\n     this.name = name;\n+    scheduler = Executors.newScheduledThreadPool(1, new DefaultSolrThreadFactory(\"commitScheduler-\" + core.getName()));\n     pending = null;\n     \n     this.docsUpperBound = docsUpperBound;\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13782498",
            "date": "2013-10-01T00:55:22+0000",
            "content": "If there's anywhere I should look (code, docs, or both) for an overview of thread management in Solr, please let me know. I'm updating from my phone on the train, but I will be on IRC later this evening, mountain US timezone. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13782506",
            "date": "2013-10-01T01:01:01+0000",
            "content": "As far as the query shit, i have no idea if solrdispatchfilter or whatever could/should do Thread.currentThread().setName or whatever (and maybe restore after).\n\nI'm just saying there is the possibility to keep everything simple and be more consistent. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13783115",
            "date": "2013-10-01T16:50:57+0000",
            "content": "How about we use MDC?  http://www.slf4j.org/api/org/slf4j/MDC.html "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13783116",
            "date": "2013-10-01T16:53:47+0000",
            "content": "Erik: +1 "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13786728",
            "date": "2013-10-04T23:05:10+0000",
            "content": "I've been trying to learn about MDC.  It's supported by what I think represent the top three slf4j binding choices.  The docs say it works on a per-thread basis.\n\nFor requests, I think this makes things pretty simple.  At the earliest point where the request enters Solr, we clear the MDC and put what we want in there.  As the request dives further down, it's likely to continue being run by the same thread.  If more info that we want to log is available at lower levels, we add to the MDC at each relevant point.\n\nFor other things that happen, especially things that don't happen because of a request like core initialization, is there a direct correlation between a particular thread and a core, or does one thread handle multiple cores or random cores?  Please feel free to point me at particular classes where I can start my research. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13786734",
            "date": "2013-10-04T23:12:14+0000",
            "content": "Some 'thinking out loud': The fact that newly spawned threads inherit the MDC is awesome.  It can be fairly minimal or really verbose if we add to it based on whether certain logging levels are enabled. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13793720",
            "date": "2013-10-13T17:29:00+0000",
            "content": "Initial exploratory foray into using MDC.  This doesn't include changes to log4j.properties.  I sitll need to put this on my dev server and try it out. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13793878",
            "date": "2013-10-14T02:01:17+0000",
            "content": "Just an FYI, also see SolrLogFormatter, which we use for tests. It tries to make it easier to identify log lines by core when it can, as well as thread and port for SolrCloud. It's an approach to take a look at anyway. "
        },
        {
            "author": "Daniel Collins",
            "id": "comment-13831416",
            "date": "2013-11-25T12:33:27+0000",
            "content": "Seems to me that several approaches have merit. \n\n1) At a basic level, we should be naming the Solr threads with core-name if it is available. wherever we use DefaultSolrThreadFactory or anything derived from that, we should try to include a core-name.\n2) Something like MDC could help for those classes that don't have direct access to the core, but presumably that is more work that option 1) but can be done at a slower pace? "
        },
        {
            "author": "Mike Drob",
            "id": "comment-15995717",
            "date": "2017-05-03T21:29:28+0000",
            "content": "MDC work was committed over several other issues, so I think this is taken care of. "
        }
    ]
}