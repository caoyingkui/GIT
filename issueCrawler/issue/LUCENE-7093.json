{
    "id": "LUCENE-7093",
    "title": "MemoryIndex does not support points",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "I realized this glancing at LUCENE-7091.\n\nI think this should have points support or else people cannot move off of the deprecated LegacyXXX encodings?",
    "attachments": {
        "LUCENE-7093.patch": "https://issues.apache.org/jira/secure/attachment/12793285/LUCENE-7093.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15193030",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T10:11:00+0000",
            "content": "Attached a patch that adds point values support for the memory index.\nThis patch is based on LUCENE-7091, which will need to get merged first before this one.  "
        },
        {
            "id": "comment-15193181",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T12:31:30+0000",
            "content": "Synched patch with LUCENE-7091 and removed the an added constructor to BytesRefArray (after realising that BytesRefArray can only work with its own privately constructed byte pool) . "
        },
        {
            "id": "comment-15193907",
            "author": "Michael McCandless",
            "date": "2016-03-14T19:00:08+0000",
            "content": "Thanks Martijn van Groningen, this is nice!\n\nYou don't have to box the point dimensionCount/numBytes up from int to Integer: 0 can safely mean \"this field has no points\".\n\nIn addField you return right away if the field had point values, but this is dangerous because the field could also have e.g. doc values: (LatLonPoint just recently started doing this), maybe we can add a test case for that?\n\nInstead of making BytesRefArray.sort fully public, can we make a version that always sorts by natural order public?  This class's entire existence scares me so I like to minimize what methods we make public, even for internal usage.\n\nOr maybe MemoryIndex should just use BytesRef[], instead of BytesRefArray, and sort that?  The vast majority of the time we are looking at a single point value for the fields here?  Your visit function could be simplified too: just call the compare only once, and if it crosses, visit all points (with doc and value); if the cell is inside the query, visit with just doc; else, do nothing? "
        },
        {
            "id": "comment-15194150",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T21:17:47+0000",
            "content": "In addField you return right away if the field had point values, but this is dangerous because the field could also have e.g. doc values: (LatLonPoint just recently started doing this), maybe we can add a test case for that?\n\nGood point. I'll add a test for this.\n\nOr maybe MemoryIndex should just use BytesRef[], instead of BytesRefArray, and sort that?\n\n+1, lets simplify here. MemoryIndex only exists for a short amount of time and then it is tossed away, so we shouldn't spend to0 much effort in space efficient data structures here.\n\nYour visit function could be simplified too: just call the compare only once, and if it crosses, visit all points (with doc and value); \n\nIf we there many values (lets say a couple of hundred values) for a single field, wouldn't the current visit method be better. (because less comparisons will need to happen). I have seen cases where fields had relatively a large number of terms. "
        },
        {
            "id": "comment-15194210",
            "author": "Michael McCandless",
            "date": "2016-03-14T21:46:09+0000",
            "content": "If we there many values (lets say a couple of hundred values) for a single field, wouldn't the current visit method be better\n\nIt's hard to say ... it invokes compare more than the normal BKD tree would, and the compare can be more costly than filtering a single value?\n\nAlso, I think the visit method only works in the 1D case ... for e.g. the 2D case, I think it may be buggy because the byte[] values were sorted only by the first dimension?\n\nI feel like it's best to get a simple, correct, implementation in at first, and then worry about optimizing for the \"many points in a single document\" case later? "
        },
        {
            "id": "comment-15194230",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T21:56:42+0000",
            "content": "Also, I think the visit method only works in the 1D case ... for e.g. the 2D case, I think it may be buggy because the byte[] values were sorted only by the first dimension?\n\nI didn't realize that this was buggy in 2d case. I assumed that I was sorting the values correctly for any dimension, because LongPoint and friends pack multiple dimensions into a single BytesRef. Just curious, how would the sort then work?\n\nI feel like it's best to get a simple, correct, implementation in at first, and then worry about optimizing for the \"many points in a single document\" case later?\n\n+1. I'll simplify the visitor method. "
        },
        {
            "id": "comment-15195138",
            "author": "Martijn van Groningen",
            "date": "2016-03-15T11:41:29+0000",
            "content": "Added a new patch:\n\n\tRemoved the unnecessary boxing of the dimensionCount and numBytes.\n\tUndo the changes made to BytesRefArray and simply use ByteRef[]\n\tThe MemoryIndexPointValues#intersect(...) was broken for anything with more than 1 dimension. This was caused by how the terms were sorted, anything beyond the first dimension was ignored, because the values were sorted by natural order. So removed the sorting and instead  the memory index now only picks the lowest and highest packed value. The intersect() method now simple visits all points. This makes >2d cases work and is good enough for now.\n\tIf there are points in a field, don't stop indexing, so that if doc values is enabled, these get stored too.\n\n "
        },
        {
            "id": "comment-15195145",
            "author": "Michael McCandless",
            "date": "2016-03-15T11:48:06+0000",
            "content": "+1, thanks Martijn van Groningen! "
        },
        {
            "id": "comment-15195178",
            "author": "ASF subversion and git services",
            "date": "2016-03-15T12:15:21+0000",
            "content": "Commit fe58313de027b454395af2d8d13d18393fa7e2e0 in lucene-solr's branch refs/heads/branch_6_0 from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fe58313 ]\n\nLUCENE-7093: Added point values support to the memory index "
        },
        {
            "id": "comment-15195179",
            "author": "ASF subversion and git services",
            "date": "2016-03-15T12:15:22+0000",
            "content": "Commit d4fe0c3849d9e1140e5d6cd5d7b4d0e0495d9ea5 in lucene-solr's branch refs/heads/branch_6x from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d4fe0c3 ]\n\nLUCENE-7093: Added point values support to the memory index "
        },
        {
            "id": "comment-15195180",
            "author": "ASF subversion and git services",
            "date": "2016-03-15T12:15:33+0000",
            "content": "Commit c1dfeb8ef85be924f17f8aece46d008382d538e9 in lucene-solr's branch refs/heads/master from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c1dfeb8 ]\n\nLUCENE-7093: Added point values support to the memory index "
        },
        {
            "id": "comment-15195181",
            "author": "Martijn van Groningen",
            "date": "2016-03-15T12:16:20+0000",
            "content": "pushed to branch_6_0, branch_6x and master "
        },
        {
            "id": "comment-15195330",
            "author": "David Smiley",
            "date": "2016-03-15T13:59:54+0000",
            "content": "Mike, just curious, what scares you about BytesRefArray?  (I make no objection to any of your feedback above) "
        },
        {
            "id": "comment-15195339",
            "author": "Michael McCandless",
            "date": "2016-03-15T14:09:02+0000",
            "content": "Assignee: David Smiley  (was: Martijn van Groningen)\n\nHmm David Smiley, why do you assign Martijn van Groningen's recent MemoryIndex issues to yourself?  This confuses me, e.g. this one is already pushed.\n\nI think you did the same for his recent issue adding doc values.\n\nMike, just curious, what scares you about BytesRefArray? (I make no objection to any of your feedback above)\n\nIt's a very very expert internal class, it has scary package-private methods, we should not be making it more public.\n\nIt also duplicates various other \"append byte[] to big pool of byte[] blocks\" that Lucene has and we should at some point consolidate, yet they all have small but important differences in their behavior. "
        },
        {
            "id": "comment-15195489",
            "author": "David Smiley",
            "date": "2016-03-15T15:35:17+0000",
            "content": "Assignee: David Smiley (was: Martijn van Groningen)\n\nThat is so weird; I did not intend to do that!  I'm fixing it now.  Perhaps I hit some keys accidentally that changed it; I don't know.  Very disconcerting! "
        }
    ]
}