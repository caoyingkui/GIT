{
    "id": "LUCENE-6308",
    "title": "Spans to extend DocIdSetIterator; was: SpansEnum, deprecate Spans",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "An alternative for Spans that looks more like PositionsEnum and adds two phase doc id iteration",
    "attachments": {
        "LUCENE-6308.patch": "https://issues.apache.org/jira/secure/attachment/12701434/LUCENE-6308.patch",
        "LUCENE-6308-changeapi.patch": "https://issues.apache.org/jira/secure/attachment/12706465/LUCENE-6308-changeapi.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14340706",
            "author": "Paul Elschot",
            "date": "2015-02-27T19:49:31+0000",
            "content": "This avoids the problem of Spans going to the next document while at the end of scoring the current doc, for LUCENE-6250.\n\nI tried to do this by adding the method Spans.nextAtCurrentDoc, but that was too invasive.\n\nThe current patch is incomplete, it adds SpansEnum as a subclass of DocIdSetIterator with methods nextStartPosition and endPosition.\nIt reimplements TermSpans as TermSpansEnum, and also adds SpansEnumScorer, SpansEnumWeight etc.\nThe real work is in NearSpans, still to be done.\n\nThe patch also deprecates Spans, SpanScorer, SpanWeight and SpanTermQuery, all in favour of added ...SpansEnum... counterparts.\n\nSince SpansEnum inherits from DocIdSetIterator, just like Scorer, the SpansEnumScorer is actually simpler than SpanScorer. "
        },
        {
            "id": "comment-14340708",
            "author": "Paul Elschot",
            "date": "2015-02-27T19:50:33+0000",
            "content": "TermSpansEnum only. "
        },
        {
            "id": "comment-14340719",
            "author": "Paul Elschot",
            "date": "2015-02-27T19:56:04+0000",
            "content": "This could also be an alternative for LUCENE-2878 "
        },
        {
            "id": "comment-14340763",
            "author": "Robert Muir",
            "date": "2015-02-27T20:30:44+0000",
            "content": "I really like the idea of bringing spans \"up to speed\" to support approximations and other features.\n\nI think this approach could fix performance issues with spans, because e.g. then they are able to intersect with nextDoc()/advance() without implicitly reading position(s). \n\nThis could be a really nice step. if we get it in shape, we could consider just \"fixing\" the spans classes to use it, with api breaks. These wouldnt really impact most users, only people writing custom queries. And those people probably want to do it \"the fast way\"... "
        },
        {
            "id": "comment-14341463",
            "author": "Paul Elschot",
            "date": "2015-02-28T11:18:32+0000",
            "content": "if we get it in shape\n\nThe idea was to have this ready, including two phase iteration, for 6.0, but I did not yet find the possibility to indicate that in jira.\n\nwith api breaks\n\nDeveloping it this way has the advantage that nothing breaks, and that testing is easy by duplicating the test code and then renaming the tested queries.\nThe disadvantage is that to see the actual code changes one needs a diff over a rename.\n\nI have positional join (custom) queries at LUCENE-5627 and these would also benefit. I would prefer to have a deprecation time window to use SpansEnum there.\nAlso renaming is simple enough to take the advantage.\n\nAnyway, once this is ready we can still decide to use the existing names and break the api. "
        },
        {
            "id": "comment-14341479",
            "author": "Paul Elschot",
            "date": "2015-02-28T11:38:46+0000",
            "content": "I just had a quick look at the latest patch at LUCENE-2878, \"aka. nuke spans\".\nThere is a lot more going on there so this maybe a small step, but this is not an alternative as I said earlier. "
        },
        {
            "id": "comment-14347695",
            "author": "Paul Elschot",
            "date": "2015-03-04T22:31:17+0000",
            "content": "Patch of 20150304.\n\nAdds SpansEnumNotQuery, SpansEnumOrQuery, SpansEnumMultiTermQueryWrapper and test cases. Still fails a test in TestBasics for SpansEnumNot.\n\nIncludes LUCENE-6338. "
        },
        {
            "id": "comment-14347702",
            "author": "Paul Elschot",
            "date": "2015-03-04T22:35:02+0000",
            "content": "Still to do: FieldMaskingSpanQuery, SpanNearQuery with NearSpansOrdered/Unordered, SpanFirstQuery, SpanPositionRangeQuery, and SpanPayloadCheckQuery. "
        },
        {
            "id": "comment-14349636",
            "author": "Paul Elschot",
            "date": "2015-03-05T23:42:40+0000",
            "content": "Even though this has another goal (avoiding use of positions as much as possible in spans), the SpansEnum here really is very similar to the PositionInterval iterator at LUCENE-2878. The main difference is that there is some state (begin/end positions) at LUCENE-2878, which is only available in iterating/access methods in SpansEnum here:\n\n  /**\n   * Returns the next start position for the current doc.\n   * There is always at least one start/end position per doc.\n   * After the last start/end position at the current doc this returns {@link NO_MORE_POSITIONS}.\n   */\n  public abstract int nextStartPosition() throws IOException;\n\n  /** Returns the end position for the current begin position. */\n  public abstract int endPosition();\n \n\n\n\nSince the code here is still very young and has this similarity, I would prefer the code here to somehow converge to LUCENE-2878.\nHowever, the state of the begin/end positions in LUCENE-2878 does not seem to allow convergence. Any suggestions? "
        },
        {
            "id": "comment-14355828",
            "author": "Paul Elschot",
            "date": "2015-03-10T22:17:47+0000",
            "content": "Patch of 10 March 2015. Same as previous one, but this one passes ant test -Dtestcase=TestBasics and Test*Spans*. "
        },
        {
            "id": "comment-14362005",
            "author": "Paul Elschot",
            "date": "2015-03-14T20:18:50+0000",
            "content": "I'm slowly progressing with this.\nThere is one change in the test code in TestSpans that nicely shows in a few lines what this is all about.\nIt is the code for counting Spans and for counting SpansEnum (which inherits from DocIdSetIterator).\nBoth are produced by a Span Not query:\n\n\n  private int spanCount(String include, String exclude, int pre, int post) throws IOException {\n    SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n    SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n    SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n    Spans spans = getSpansFromQuery(snq);\n    \n    int i = 0;\n    while (spans.next()){\n      i++;\n    }\n    return i;\n  }\n  \n  private int spansEnumCount(String include, String exclude, int pre, int post) throws IOException {\n    SpansEnumTermQuery iq = new SpansEnumTermQuery(new Term(field, include));\n    SpansEnumTermQuery eq = new SpansEnumTermQuery(new Term(field, exclude));\n    SpansEnumNotQuery senq = new SpansEnumNotQuery(iq, eq, pre, post);\n    SpansEnum spans = getSpansEnumFromQuery(senq);\n    \n    int i = 0;\n    if (spans != null) {\n      while (spans.nextDoc() != SpansEnum.NO_MORE_DOCS){\n        while (spans.nextStartPosition() != SpansEnum.NO_MORE_POSITIONS) {\n          i++;\n        }\n      }\n    }\n    return i;\n  }\n\n "
        },
        {
            "id": "comment-14368124",
            "author": "Paul Elschot",
            "date": "2015-03-18T23:23:26+0000",
            "content": "Patch of 19 March 2015, passes all tests.\n\nThere is a lot of almost duplicated code, especially the new tests for SpansEnum that were basically copied and converted from the Spans tests. However, this was worthwhile, because these tests caught a few subtle bugs in the SpansEnum implementations.\n\nThis uses ConjunctionDISI for SpansEnum near queries, so two phase should be doable.\n\nRenamed TestBasics to TestSpanBasics for easier testing.\n\nAlso deprecates MultiSpansWrapper in favour of TestSpans.getSpansEnumForQuery which has a smaller implementation. "
        },
        {
            "id": "comment-14373004",
            "author": "Paul Elschot",
            "date": "2015-03-21T20:34:44+0000",
            "content": "Patch of 21 March 2015, adds two phase doc id set iteration.\nAlso add SpansEnum test in TestPositionIncrement. "
        },
        {
            "id": "comment-14374946",
            "author": "Paul Elschot",
            "date": "2015-03-22T14:04:05+0000",
            "content": "The patch of 21 March 2015 does not have a SpansEnum version of PayloadNearQuery, it does contain PayloadSpansEnumUtil. "
        },
        {
            "id": "comment-14375174",
            "author": "Paul Elschot",
            "date": "2015-03-22T21:11:38+0000",
            "content": "Patch of 22 March 2015. Compared to previous patch, this also covers the search.payloads package and has better javadocs.\n\nThis passes ant precommit.\n\nThe two phase doc id iteration in here could be good but I'm not sure.\nIt is in the NearSpansEnum and ConjunctionDISI classes.\nCould someone take a look at these to check?\n\nThe payload loading really needs improvement, especially for the ordered near case, but that is another issue. "
        },
        {
            "id": "comment-14375484",
            "author": "Robert Muir",
            "date": "2015-03-23T07:22:19+0000",
            "content": "I really like this patch, it means spans have real cost() support, two-phase iteration, etc.\n\nI created an alternative version of it, where we just break the low level Spans api with your changes and we don't have to deprecate all the spans (since you have replacements for every query).\n\nSo this version is less invasive and just \"fixes\" spans with your new code.\n\nI think this is ok? The classes are documented expert, and for most users, just using the queries we have, there are no changes that will impact them (its all internals). Queries will just get faster. Otherwise they have to change parsers and so on to generate the new queries.\n "
        },
        {
            "id": "comment-14375496",
            "author": "Robert Muir",
            "date": "2015-03-23T07:45:19+0000",
            "content": "By the way, at least i think this exercise may have found a bug. Now that new span logic is used everywhere, I hit some test failures in lucene/queryparser that look like this:\n\n   [junit4] Suite: org.apache.lucene.queryparser.surround.query.Test03Distance\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=Test03Distance -Dtests.method=test3Example01 -Dtests.seed=87854C52BC77D8E3 -Dtests.locale=mt -Dtests.timezone=PRC -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.09s J2 | Test03Distance.test3Example01 <<<\n   [junit4]    > Throwable #1: java.lang.NullPointerException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([87854C52BC77D8E3:7DCE4F0323A56FA5]:0)\n   [junit4]    > \tat org.apache.lucene.search.spans.NearSpansUnordered.startPosition(NearSpansUnordered.java:213)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery$SpanQueue.lessThan(SpanOrQuery.java:155)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery$SpanQueue.lessThan(SpanOrQuery.java:147)\n   [junit4]    > \tat org.apache.lucene.util.PriorityQueue.upHeap(PriorityQueue.java:258)\n   [junit4]    > \tat org.apache.lucene.util.PriorityQueue.add(PriorityQueue.java:135)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery.getSpans(SpanOrQuery.java:187)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanNearQuery.getSpans(SpanNearQuery.java:128)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanNearQuery.getSpans(SpanNearQuery.java:128)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanWeight.scorer(SpanWeight.java:92)\n   [junit4]    > \tat org.apache.lucene.search.Weight.bulkScorer(Weight.java:127)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:540)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:347)\n   [junit4]    > \tat org.apache.lucene.queryparser.surround.query.BooleanQueryTst.doTest(BooleanQueryTst.java:127)\n   [junit4]    > \tat org.apache.lucene.queryparser.surround.query.Test03Distance.distanceTst(Test03Distance.java:76)\n   [junit4]    > \tat org.apache.lucene.queryparser.surround.query.Test03Distance.distanceTest3(Test03Distance.java:242)\n   [junit4]    > \tat org.apache.lucene.queryparser.surround.query.Test03Distance.test3Example01(Test03Distance.java:247)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n "
        },
        {
            "id": "comment-14375566",
            "author": "Alan Woodward",
            "date": "2015-03-23T08:32:11+0000",
            "content": "Should NO_MORE_POSITIONS be something other than MAX_INTEGER here?  On LUCENE-2878 we tried using -1 instead because of possible clashes with documents that genuinely have a position of that value, but that's being used for 'unpositioned' in this patch. "
        },
        {
            "id": "comment-14376134",
            "author": "Paul Elschot",
            "date": "2015-03-23T16:28:01+0000",
            "content": "I took a quick look at the changeapi patch. It looks good to me, and just comparing the size with the size of the patch of 22 March is enough to see that it is ok to change the Spans api for this.\nBut the -1 value for unpositioned needs to be CHANGES.txt for this, as there are users that use -1 now for other reasons. Another value for unpositioned might still be possible.\n\nI tested the patch of patch of 22 March also with Integer.MAX_VALUE - 1 for NO_MORE_POSITIONS to verify that it is not mixed up with NO_MORE_DOCS.\n\nOne minor point: there are still a few SpansEnum tests left in the patch.\n\nAs to the failing test in the queryparser: probably this is caused by an empty spans being null and/or the changed initialization of the SpanOr queue.\nAn empty spans used to be a special object, but the iterator here needs a bit of its own state even when it is empty, so I changed to using null for an empty Spans.\nWith the sentinel values for docs (-1 no doc yet) and positions (-1 unpositioned) the SpanOr queue initialization is also done earlier in the patch of 22 March.\n\nI'll try the changeapi patch of 23 March to check my guess about the SpanOr queue. "
        },
        {
            "id": "comment-14376249",
            "author": "Robert Muir",
            "date": "2015-03-23T17:41:12+0000",
            "content": "Also, I ran very quick and dirty benchmarks, there are no performance regressions here. I saw small (5-10%) improvements when i benchmarked. I also tried benchmarking when using filters, but saw the same 5-10% in that case.\n\nI can try to look into it more, maybe something is not yet optimal about the two-phase iteration (improvements were much higher for phrase/sloppy when a filter was involved). It could also easily be the fact that our benchmarking support for spans is very limited. "
        },
        {
            "id": "comment-14376490",
            "author": "Paul Elschot",
            "date": "2015-03-23T19:45:11+0000",
            "content": "This 2nd changeapi patch fixes a bug in NearSpansUnordered that is in the 1st changeapi patch.\n\nIt also removes a superfluous SpansEnum test method.\nThe TestSpansEnum class is still there, it can be renamed to for example TestSpans2. "
        },
        {
            "id": "comment-14376505",
            "author": "Paul Elschot",
            "date": "2015-03-23T19:56:32+0000",
            "content": "Nice to see that Test03Distance.test3Example01 test case again \n\nOn the performance: I'd expect 10-20% on larger docs, so 5-10% is ok.\nSpans.skipTo() did work nicely with filters already it seems.\n\nFor two-phase iteration I'd expect a bigger impact on nested SpanNear queries with a mix of frequent and infrequent terms over the subqueries.\nI don't know wether there are test cases for that. "
        },
        {
            "id": "comment-14376859",
            "author": "David Smiley",
            "date": "2015-03-23T23:01:59+0000",
            "content": "Can you please use ReviewBoard? "
        },
        {
            "id": "comment-14377436",
            "author": "Paul Elschot",
            "date": "2015-03-24T07:34:42+0000",
            "content": "changeapi patch of 24 March, compared to previous changeapi patch:\nMore efficient queue init in NearSpansUnordered.\nImprove constructor for NearSpansOrdered.\nBoth are for nested span near queries. "
        },
        {
            "id": "comment-14377438",
            "author": "Paul Elschot",
            "date": "2015-03-24T07:36:22+0000",
            "content": "Where is the ReviewBoard? "
        },
        {
            "id": "comment-14377799",
            "author": "David Smiley",
            "date": "2015-03-24T12:59:04+0000",
            "content": "https://reviews.apache.org/dashboard/\nIt's ideal for cases where there are going to be multiple patch updates with peer review. "
        },
        {
            "id": "comment-14377831",
            "author": "Robert Muir",
            "date": "2015-03-24T13:24:25+0000",
            "content": "reviewboard sucks, ive used it at a previous job.\n\nplease, lets not bikeshed this here, here we are working on spans. \n\nthis can be discussed somewhere else. "
        },
        {
            "id": "comment-14377885",
            "author": "Alan Woodward",
            "date": "2015-03-24T13:49:13+0000",
            "content": "Sorry, I wasn't clear - you can't use Integer.MAX_VALUE as a marker for 'positions are exhausted', because it's a perfectly valid (if unlikely) value for a position to hold.  That's why I ended up returning a boolean from nextInterval() on LUCENE-6226.  Does that work here? "
        },
        {
            "id": "comment-14377972",
            "author": "David Smiley",
            "date": "2015-03-24T14:52:40+0000",
            "content": "If we can't use Integer.MAX_VALUE as NO_MORE_POSITIONS then I propose we at least pave the way for this to become the case for a future Lucene version.  It would be nice to have this for API consistency.  In some of my work I have abused positions to hold data but in doing so I didn't assume negative values or Integer.MAX_VALUE would work.  If I did and if it did work (I guess it would?), I wouldn't expect that kind of usage abuse to necessarily be compatible between minor Lucene releases as I already know I'm abusing something outside of its intended use. "
        },
        {
            "id": "comment-14378250",
            "author": "David Smiley",
            "date": "2015-03-24T17:45:46+0000",
            "content": "Without the benefit of a code review tool; I'll put my comments here:\n\nNearSpans:\n\n\tWhy 3x in cost()?  SpanNotQuery has 2x cost. Hmmm.\n\n\n\nNearSpansOrdered:\n\n\tThe payload collection in shrinkToAfterShortestMatch seems suspect.  I think the loop over prevSpans should only assign a new ArrayList to possiblePayload if it was previously null, and otherwise should call clear.  And this should happen wether or not prevSpans.isPayloadAvailable().  possiblePayload should be pluralized to more clearly indicate it\u2019s a collection of payloads, and a comment could clarify we declare it out of the loop to re-use the instance.  Heck; maybe it should be declared as a field of this spans along with possibleMatchPayloads set for re-use, and then always initialize them so long as collectPayloads==true.  And, related, I think matchPayload should be an ArrayList not LinkedList \u2014 I\u2019ve seen payload iteration code that optimized for RandomAccess so lets return one.\n\tThanks to ConjunctionDISI, it\u2019s nice to see a net reduction in code in NearSpans* \n\tNice use of FilterSpans for NearSpansUnordered.SpansCell and elsewhere\n\n\n\nSpanPositionCheckQuery\n\n\thashCode & equals should be defined.  Then it\u2019s subclasses (some of which you have modified) can call super.equals & super.hashCode.  Furthermore, as of March 4th, we needn\u2019t add getClass().hashCode as Query.hashCode will do that.\n\tPositionCheckSpans does not implement asTwoPhaseIterator. Might this be a problem? If the caller gets the TPI, then it's positions won't be filtered by acceptPosition().  Perhaps FilterSpans shouldn't delegate asTwoPhaseIterator because of subtle bugs like this.\n\n\n\nSpanNearQuery\n\n\tgetSpans: why the removal of the 1-clause and 0-clause optimized cases?  And I noticed you didn\u2019t propagate collectPayloads to NearSpansOrdered.  (The Unordered case doesn\u2019t need a boolean).\n\n\n\nSpanOrQuery \n\n\tSpans.cost(): why not pre-compute as it was?  cost() could get called a bunch during sorting of queries.\n\n\n\nSpanNotQuery\n\n\tis asTwoPhraseIterator a TODO?  I think there's value in it here.\n\n\n\nSpanScorer:\n\n\tshouldn\u2019t this be implementing asTwoPhaseIterator to delegate to the spans?\n\n\n\nOverall, this is clearly going to bring some great speed-ups to complex span queries.  Nice job Paul!  Longer term, I hope LUCENE-2878 (nuke Spans) comes to fruition so that we still don't have the Query dichotomy. "
        },
        {
            "id": "comment-14378515",
            "author": "Paul Elschot",
            "date": "2015-03-24T20:23:04+0000",
            "content": "For the NO_MORE_POSITIONS: personally I actually slightly prefer to have a boolean method, however for consistency with the doc id iteration I implemented it as Integer.MAX_VALUE.\nSo I'm fine with both solutions.\n\nAbout cost(): we need a good overall view for that, I did not try that for now.\nI changed OrSpans cost() because I suspected an initalization problem, I'll change that to precomputed again.\n\nThe payload collection in NearSpansOrdered needs work. I'd prefer to leave that to a subclass for the ordered case.\nFor now I'll check the collectPayloads passing in SpanNearQuery.\n\nSpanPositionCheckQuery hashCode and equals are indeed needed, iirc these were already lacking.\n\nSpanNear: when the subSpans are initialized and one of them is null, null is returned for the NearSpans... .\nI think SpanNear should have at least two subqueries, I did not expect that to break backward compatibility.\nThe single subquery case could be restored, but is it really needed? When this happens the caller should be aware that the slop is going to be ignored, and in the ordered case there should be no match at all because the subSpans should not overlap then.\n\nSpanNotQuery and SpanScorer: as I understood there is no need for these two implement TwoPhaseIterator because that is only needed when there is some form of conjunction. SpanScorer only takes a single Spans, and for SpanNot advance() on the excluded spans only is good enough.\n\nRemoving Spans/intervals completely is not an option: with (nested) proximity queries there is no way to avoid iterating over intervals/spans. We can make the scoring consistent between Spans and PhraseQuery, and PhraseQuery with getSpans() would also be good for performance of common cases. "
        },
        {
            "id": "comment-14378727",
            "author": "Paul Elschot",
            "date": "2015-03-24T21:54:57+0000",
            "content": "2nd changeapi patch of 24 March 2015. Compared to the earlier one:\n\nUse cost() only once on subSpans in SpanOr.\n\nAdd equals/hashCode to SpanPositionCheckQuery.\n\nSplit NearSpansPayloadOrdered from NearSpansOrdered, use collectPayloads in SpanNearQuery.\nNearSpansOrdered now throws UOE for span collecting methods.\n\nTests for core and queryparser modules pass. "
        },
        {
            "id": "comment-14378744",
            "author": "Paul Elschot",
            "date": "2015-03-24T22:02:40+0000",
            "content": "we needn\u2019t add getClass().hashCode as Query.hashCode will do that.\n\nSorry, I missed that, and I also did not add equals/hashCode to the subclasses of SpanPositionCheckQuery. "
        },
        {
            "id": "comment-14379227",
            "author": "David Smiley",
            "date": "2015-03-25T03:27:41+0000",
            "content": "The pain of not using any review tool (no matter how imperfect any might be) is quite apparent to me with these patch updates and multi-user interaction.  Let the pain continue?  Rob; you could ignore the RB if so long as if the patches are here for you to do the perf testing.  I don't mean to suggest we should use a review tool for every JIRA issue.\n\nSpanNear: when the subSpans are initialized and one of them is null, null is returned for the NearSpans... .  I think SpanNear should have at least two subqueries, I did not expect that to break backward compatibility.  The single subquery case could be restored, but is it really needed? When this happens the caller should be aware that the slop is going to be ignored, and in the ordered case there should be no match at all because the subSpans should not overlap then.\n\nI simply recognized it as a difference and wondered why.  If some thing \"should\" not happen (you claim SpanNear should have at least 2 sub-queries) then an assertion or comment to that effect would be good.  As to the particulars of this case, I'm not sure at the moment without further inspection.\n\nSpanNotQuery and SpanScorer: as I understood there is no need for these two implement TwoPhaseIterator because that is only needed when there is some form of conjunction. SpanScorer only takes a single Spans, and for SpanNot advance() on the excluded spans only is good enough.\n\nI believe it's useful for any aggregation, even over one so that the TPI benefits percolate across parent/child queries in aggregate.  Adrien Grand please check me on this.  Having said this I don't know why TPIs aren't propagated more generally; maybe a TODO?.  \n\nOn to my example:  If any Query that wraps another Query (technically a Scorer wrapping another Scorer, or Span wrapping another Span here) fails to propagate the TwoPhaseIterator, then the benefit of the TPI is only localized to the nodes that directly support it (e.g. BooleanQuery & SpanNearQuery).  Consider the case of a top level BooleanQuery wrapping two MUST clauses, one clause with a medium-frequency term, and the other clause being a SpanNearQuery between some other SpanQuery derivatives which include a low frequency term.  With your patch's SpanScorer not supporting TPI, the top level BQ won't see a TPI so it will drive the query by the low-cost SpanQuery which will force it to visit positions for documents that could have been filtered by the top level term query's document list.\n\nRemoving Spans/intervals completely is not an option: with (nested) proximity queries there is no way to avoid iterating over intervals/spans. We can make the scoring consistent between Spans and PhraseQuery, and PhraseQuery with getSpans() would also be good for performance of common cases.\n\nI could have been clearer.  I simply mean I look forward to the dichotomy being gone or made easier.  That is, today, a SpanNearQuery only accepts SpanQueries, which forces us to convert other queries to them (even TermQuery), which is a pain.  Any way, that discussion should be left to LUCENE-2878 so I shouldn't have brought it up here. "
        },
        {
            "id": "comment-14382229",
            "author": "Paul Elschot",
            "date": "2015-03-26T17:01:58+0000",
            "content": "I created some spinoff issues from this to allow easier progress here: LUCENE-6371, LUCENE-6372 and LUCENE-6373.\nThat leaves Spans.cost(), the minimum number of subqueries for SpanNear, and NO_MORE_POSITIONS to be resolved here, "
        },
        {
            "id": "comment-14382812",
            "author": "Paul Elschot",
            "date": "2015-03-26T22:20:50+0000",
            "content": "changeapi patch of 26 March 2015. Compared to previous changeapi patch:\n\ncost() functions return expected number of matching docs.\n\nDocuments that SpanNearQuery should have at least 2 clauses.\n\nLeaves NO_MORE_POSITIONS at Integer.MAX_VALUE. "
        },
        {
            "id": "comment-14383521",
            "author": "Michael McCandless",
            "date": "2015-03-27T08:38:12+0000",
            "content": "+1 to the latest patch: it's a great step forward for spans.  We can\niterate more in the follow-on issues... I think we should commit what\nwe have here now?\n\nThe patch just needs a minor fix to NearSpans' TwoPhaseIterator now\nthat the approximation is passed to the ctor.\n\nIt's wonderful that Spans now extends DISI, just adding the position\niteration API, and I like adopting the same -1 / Integer.MAX_VALUE\nsentinels we use for docs iteration. "
        },
        {
            "id": "comment-14383736",
            "author": "Alan Woodward",
            "date": "2015-03-27T12:09:01+0000",
            "content": "I don't think Integer.MAX_VALUE works though?  What if you have a term that's indexed at that position?  SpanTermQuery won't find it.  I think we have to use a boolean here (or a different value like -2, but that makes comparisons between positions more complicated). "
        },
        {
            "id": "comment-14383772",
            "author": "Michael McCandless",
            "date": "2015-03-27T12:41:22+0000",
            "content": "What if you have a term that's indexed at that position? \n\nYou cannot: it's a reserved value.  Just like no doc id can be Integer.MAX_VALUE.\n\nAnd if you have 2.1B tokens in one document you are going to have other problems...\n\nWe should fix indexing to detect if this happens and reject the document, but that should be a separate issue and I don't think it should block this one... "
        },
        {
            "id": "comment-14384013",
            "author": "Robert Muir",
            "date": "2015-03-27T15:37:43+0000",
            "content": "Alan is correct. Mike, the issue is you don't need 2.1B tokens to hit this. And I don't know where \"its a reserved value\" comes from. At least nothing is reserving it, in indexwriter or elsewhere. Instead we just check for negatives/overflow.\n\nI've seen people use large posInc gaps between fields. This can make huge position numbers. Also if someone forgets clearAttributes the positions grow exponentially. Sure its bad, but for small docs i bet plenty of people have HUGE positions and don't realize it.\n\nCan we just change the constant to -2? Then the problem is solved. "
        },
        {
            "id": "comment-14384124",
            "author": "Paul Elschot",
            "date": "2015-03-27T16:45:27+0000",
            "content": "From the current TermSpans.java:\n\n  public int end() {\n    return position + 1;\n  }\n\n\nFor position == Integer.MAX_VALUE that has never behaved well. "
        },
        {
            "id": "comment-14384267",
            "author": "Paul Elschot",
            "date": "2015-03-27T18:08:47+0000",
            "content": "The patch just needs a minor fix to NearSpans' TwoPhaseIterator now that the approximation is passed to the ctor.\n\nThe git mirrors are a little behind again, see INFRA-9182. "
        },
        {
            "id": "comment-14384276",
            "author": "Michael McCandless",
            "date": "2015-03-27T18:13:23+0000",
            "content": "I've seen people use large posInc gaps between fields. This can make huge position numbers. Also if someone forgets clearAttributes the positions grow exponentially. Sure its bad, but for small docs i bet plenty of people have HUGE positions and don't realize it.\n\nI think such examples are really abuse cases?  We shouldn't design\nfor abuse cases...\n\nAlso such users (jumping by enormous position increments each time)\nare unlikely to precisely hit Integer.MAX_VALUE ... they are more\nlikely to overflow it.\n\nWhat I find compelling about Integer.MAX_VALUE is it makes priority\nqueues that are merge-sorting N position iterators work \"naturally\",\nso they can simply compare by position, and only once all iterators\nare \"on\" a position must they check whether that position is\nInteger.MAX_VALUE.  But if we use -2, then every time we .nextPosition\neach iterator we must check if it's ended.\n\nI do agree we should fix IW to detect this during indexing, and\nCheckIndex to detect it.\n\nI also like the consistency with NO_MORE_DOCS. "
        },
        {
            "id": "comment-14384283",
            "author": "Michael McCandless",
            "date": "2015-03-27T18:16:35+0000",
            "content": "From the current TermSpans.java:\n\nHmm so if your index has a position = Integer.MAX_VALUE, things already won't work for SpanTermQuery... I wonder whether PhraseQuery works today when position is Integer.MAX_VALUE. "
        },
        {
            "id": "comment-14385318",
            "author": "Paul Elschot",
            "date": "2015-03-28T14:00:31+0000",
            "content": "changeapi patch of 28 March 2015. Compared to the previous patch:\n\nFix the javadocs to mention that Spans should not be used for terms indexed at position Integer.MAX_VALUE.\n\nUse the TwoPhaseIterator constructor from LUCENE-6198.\n\nReplace some asserts in constructors by Objects.requireNonNull, and  simplify some hashCode/equals methods to no more test for null.\n\nRemove unused variable possibleMatchPayloads in NearSpansOrdered. "
        },
        {
            "id": "comment-14386058",
            "author": "Michael McCandless",
            "date": "2015-03-30T01:07:47+0000",
            "content": "Thanks Paul Elschot patch looks great, +1 to commit... "
        },
        {
            "id": "comment-14386317",
            "author": "Michael McCandless",
            "date": "2015-03-30T07:36:25+0000",
            "content": "If there are no objections, I'll commit this in a day or two ... thanks Paul Elschot! "
        },
        {
            "id": "comment-14386389",
            "author": "Adrien Grand",
            "date": "2015-03-30T08:29:56+0000",
            "content": "+1 to commit "
        },
        {
            "id": "comment-14386629",
            "author": "David Smiley",
            "date": "2015-03-30T12:31:27+0000",
            "content": "+1 to commit, thanks Paul!\n\nAdrien Grand would you mind commenting on my example above \u2013 right below where I mentioned you to get your input? "
        },
        {
            "id": "comment-14386902",
            "author": "Adrien Grand",
            "date": "2015-03-30T16:04:00+0000",
            "content": "David Smiley You are right that spans should propagate two-phase approximations so that they can be used when intersected with another query (eg. a boolean FILTER clause). I believe LUCENE-6373 has been open for that reason, maybe we should be more explicit about the remaining work that we need to do. As far as I am concerned, I'm very happy to see spans becoming lazy, which was imo the greatest challenge to get two-phase iteration working on spans. "
        },
        {
            "id": "comment-14388232",
            "author": "ASF subversion and git services",
            "date": "2015-03-31T08:27:48+0000",
            "content": "Commit 1670272 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1670272 ]\n\nLUCENE-6308: cutover Spans to DISI, reuse ConjunctionDISI, use two-phased iteration "
        },
        {
            "id": "comment-14388253",
            "author": "ASF subversion and git services",
            "date": "2015-03-31T08:48:31+0000",
            "content": "Commit 1670273 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1670273 ]\n\nLUCENE-6308: cutover Spans to DISI, reuse ConjunctionDISI, use two-phased iteration "
        },
        {
            "id": "comment-14388256",
            "author": "Michael McCandless",
            "date": "2015-03-31T08:49:17+0000",
            "content": "Thanks Paul Elschot.\n\nI'll open a follow-on issue for IW/CheckIndex to detect the now illegal position=Int.MAX_VALUE going forward... "
        },
        {
            "id": "comment-14388270",
            "author": "ASF subversion and git services",
            "date": "2015-03-31T09:00:11+0000",
            "content": "Commit 1670278 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1670278 ]\n\nLUCENE-6308: fix test bug "
        },
        {
            "id": "comment-14388271",
            "author": "ASF subversion and git services",
            "date": "2015-03-31T09:01:24+0000",
            "content": "Commit 1670279 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1670279 ]\n\nLUCENE-6308: woops: revert "
        },
        {
            "id": "comment-14388274",
            "author": "ASF subversion and git services",
            "date": "2015-03-31T09:01:41+0000",
            "content": "Commit 1670280 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1670280 ]\n\nLUCENE-6308: fix test bug "
        },
        {
            "id": "comment-14388276",
            "author": "ASF subversion and git services",
            "date": "2015-03-31T09:02:10+0000",
            "content": "Commit 1670281 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1670281 ]\n\nLUCENE-6308: fix test bug "
        },
        {
            "id": "comment-14388736",
            "author": "Paul Elschot",
            "date": "2015-03-31T15:49:27+0000",
            "content": "My pleasure.\nI'll share the thanks with Robert Muir, who provided the first changeapi patch. "
        },
        {
            "id": "comment-14586822",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:43:00+0000",
            "content": "Bulk close for 5.2.0. "
        }
    ]
}