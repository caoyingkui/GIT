{
    "id": "LUCENE-158",
    "title": "[PATCH] MultiFieldQueryParser, can't change default search operator",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [
            "1.9"
        ],
        "affect_versions": "1.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Bug detected by Bernhard, submitted via Christoph\n\nbug occured with 1.3 rc2\n\njust played around with the MultiFieldQueryParser and didn't find a working way\nto change the \"operator\" value.\n\nThe problem is that MultiFieldQueryParser is implementing two public static\nmethods \"parse\" only. Calling one of those, in the extended superclass, the\nstatic method implementation for \"parse\" is called. Due to the fact that the\nQueryParser class creates a new Instance for each call thru the static method,\nthe \"operator\" flag is simply ignored.\n\nThere would be a simple fix within MultiFieldQueryParser class without touching\nthe rest of the system. One have to add a new non static method \"parse\" which\ncould look like this:\n\n/***********************************************************/\npublic Query parse(String query, String[] fields) throws ParseException {\n       BooleanQuery bQuery = new BooleanQuery();\n\n       for (int i = 0; i < fields.length; i++)\n       {\n           QueryParser parser = new QueryParser(fields[i], analyzer);\n           parser.setOperator(getOperator());\n           Query q = parser.parse(query);\n           bQuery.add(q, false, false);\n       }\n       return bQuery;\n     }\n/***********************************************************/\n\n\nTo test the new implementation, following code fragment can be used:\n\n/***********************************************************/\n           Directory directory = FSDirectory.getDirectory(\"/tmp/idx-test\", false);\n           Analyzer analyzer = new SimpleAnalyzer();\n           Searcher searcher = new IndexSearcher(directory);\n           Hits hits = null;\n                     String[] fields = \n{ \"contents\", \"title\" }\n;\n           MultiFieldQueryParser parser = new MultiFieldQueryParser(\"britney\nspears\", analyzer);\n                     parser.setOperator(QueryParser.DEFAULT_OPERATOR_AND);\n                             Query query = parser.parse(\"britney spears\", fields);\n                     System.out.println(\"Query: \" + query.toString());\n                     hits = searcher.search(query);\n\n           System.out.println (\"Results: \" + hits.length());\n                     searcher.close();\n/***********************************************************/\n\n\nbest regards\n\nBernhard",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--multiFieldPatch.txt": "https://issues.apache.org/jira/secure/attachment/12312277/ASF.LICENSE.NOT.GRANTED--multiFieldPatch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2004-08-06T23:22:17+0000",
            "content": "Created an attachment (id=12354)\nPatch file to solve the operator problem ",
            "author": "Grant Ingersoll",
            "id": "comment-12321437"
        },
        {
            "date": "2006-03-22T06:45:11+0000",
            "content": "This isn't an issue anymore in Lucene 1.9. ",
            "author": "Daniel Naber",
            "id": "comment-12371324"
        }
    ]
}