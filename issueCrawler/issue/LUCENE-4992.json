{
    "id": "LUCENE-4992",
    "title": "ArrayOutOfBoundsException in BooleanScorer2",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "affect_versions": "4.1",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Seeing following exception in BooleanScorer2 in our production system:\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 2147483647\n\tat org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:312)\n\tat org.apache.lucene.queries.CustomScoreQuery$CustomScorer.score(CustomScoreQuery.java:324)\n\tat org.apache.lucene.search.DisjunctionMaxScorer.score(DisjunctionMaxScorer.java:84)\n\tat org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.collect(TopScoreDocCollector.java:47)\n\tat org.apache.lucene.search.Scorer.score(Scorer.java:64)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:605)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:482)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:438)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:281)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:269)",
    "attachments": {
        "patch.diff": "https://issues.apache.org/jira/secure/attachment/12582496/patch.diff",
        "LUCENE-4992.patch": "https://issues.apache.org/jira/secure/attachment/12582797/LUCENE-4992.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-05-09T19:23:06+0000",
            "content": "in DisjunctionSumScorer, line 96:\n\nprivate void afterNext() throws IOException \n{\nfinal Scorer sub = subScorers[0];\ndoc = sub.docID();\nif (doc == NO_MORE_DOCS)\n{ nrMatchers = Integer.MAX_VALUE; // stop looping <--- this is set }\n\nelse\n{ score = sub.score(); nrMatchers = 1; countMatches(1); countMatches(2); }\n\n}\n\nand in BooleanScorer2, line 167:\ncoordinator.nrMatchers += super.nrMatchers;\n\nand then it breaks on line 312.\n\nAttached is a patch.  ",
            "author": "John Wang",
            "id": "comment-13653074"
        },
        {
            "date": "2013-05-09T19:27:16+0000",
            "content": "Do you have a test John? its not clear that the maybe the problem is calling score() on a scorer that already returned NO_MORE_DOCS (which is undefined) ",
            "author": "Robert Muir",
            "id": "comment-13653079"
        },
        {
            "date": "2013-05-09T19:34:01+0000",
            "content": "Hi Rob:\n\n   I do have a test that reproduces this and with the patch it is fixed. (I also made sure all tests pass in lucene)\n\n   Unfortunately this is very difficult to reproduce. I was only able to reproduce it with our in house query builder and data corpus.\n\n-John ",
            "author": "John Wang",
            "id": "comment-13653083"
        },
        {
            "date": "2013-05-09T19:34:40+0000",
            "content": "re: its not clear that the maybe the problem is calling score() on a scorer that already returned NO_MORE_DOCS (which is undefined)\n\nI stepped thru my test program and that is exactly what is happening. ",
            "author": "John Wang",
            "id": "comment-13653084"
        },
        {
            "date": "2013-05-09T19:45:49+0000",
            "content": "Rob, I dug into the code a little more, seems like the better fix would be in CustomScoreQuery, line 309:\n\nvalSrcScorer.advance(doc);\n\nwhat I am finding is that valSrcScorer impl when advance is called, can set the inner docid to NO_MORE_DOCS but that is not retrieved, and instead the doc returned previously from subQueryScorer is used.\n\nBy changing the line to:\ndoc = valSrcScorer.advance(doc);\n\nalso fixes the problem. I am not sure if that is the right thing to do though.\n\n-John ",
            "author": "John Wang",
            "id": "comment-13653096"
        },
        {
            "date": "2013-05-09T19:47:18+0000",
            "content": "Forgot to mention, in my test, the valSrcScorer is an instance of BooleanScorer2.\n\n-John ",
            "author": "John Wang",
            "id": "comment-13653099"
        },
        {
            "date": "2013-05-09T19:51:27+0000",
            "content": "I'll review CustomScoreQuery and see if its doing the right thing: its definitely possible its doing the wrong thing. Thanks for reporting this. ",
            "author": "Robert Muir",
            "id": "comment-13653107"
        },
        {
            "date": "2013-05-10T19:13:51+0000",
            "content": "John I see: so I think the whole design of this thing doesnt work today for your use case (where valSrcScorer is BooleanScorer2).\n\nIt seems implicit in this CustomScoreQuery's implementation that the value source scorers will match all documents, yet nothing about the API enforces this, instead it takes arbitrary Query (but won't actually work correctly today with arbitrary queries!):\n\n\n  public CustomScoreQuery(Query subQuery, Query... scoringQueries) {\n\n\n\nI feel like one of three things should happen:\n1. Change behavior of CustomScoreQuery to act more conjunction-like as you suggest. Though this means this query would be doing a significantly different thing than its current javadocs describe.\n2. Keep the behavior of today, except add NO_MORE_DOCS checks. But this can be confusing too, e.g. what would vScores[i] contain for an exhausted valSrcScorer? \n2. Current behavior, but scoringQueries changed to FunctionQuery to be type-safe.\n\nAny ideas? ",
            "author": "Robert Muir",
            "id": "comment-13654749"
        },
        {
            "date": "2013-05-10T20:53:19+0000",
            "content": "Thanks Rob for following up!\nI think the right thing to do would be the third option, that is the least intrusive while keeping the functionality consistent. And you are absolutely right, by doing the hacks I am suggesting would provide unexpected behavior, which would be worse.\nI will follow up on my end to make sure we would be ok with this change.\n\n-John ",
            "author": "John Wang",
            "id": "comment-13654822"
        },
        {
            "date": "2013-05-10T21:07:54+0000",
            "content": "Another nice thing about the last approach (actually, you can do it today to fix your bug), is that you can always pass an arbitrary query anyway:\n\nnew FunctionQuery(new QueryValueSource(MyBooleanQueryOrWhatever, 5.0f))\n\nThe QueryValueSource has that additional argument that lets you specify what the score (in this example: 5.0f) should be for documents that don't match, so it removes any ambiguity. ",
            "author": "Robert Muir",
            "id": "comment-13654837"
        },
        {
            "date": "2013-05-10T21:21:11+0000",
            "content": "Oh! that's nice!\nWe will just do that!\n\nThanks! ",
            "author": "John Wang",
            "id": "comment-13654857"
        },
        {
            "date": "2013-05-10T22:31:45+0000",
            "content": "Hey Rob:\n\n    Just verified your suggestion works in our env.\n\n    Feel free to resolve this.\n\n-john ",
            "author": "John Wang",
            "id": "comment-13654940"
        },
        {
            "date": "2013-05-11T17:29:44+0000",
            "content": "Here's a patch to change the signature to FunctionQuery to prevent the trap. ",
            "author": "Robert Muir",
            "id": "comment-13655320"
        },
        {
            "date": "2013-05-12T04:25:59+0000",
            "content": "Thanks Rob for the patch!\nThis makes the api much safer.\n\nI am inclined to think option 2) above with the NO_MORE_DOCS check is a still good thing to do for BooleanScorer2 (unrelated to CustomScoreQuery).\n\nWhat do you think?\n\n=John ",
            "author": "John Wang",
            "id": "comment-13655463"
        },
        {
            "date": "2013-05-12T05:47:48+0000",
            "content": "I dont think we should add this check (because only broken consumers would trigger it).\n\nMaybe an assert is ok though. ",
            "author": "Robert Muir",
            "id": "comment-13655473"
        },
        {
            "date": "2013-05-12T06:25:36+0000",
            "content": "makes senses, agreed. ",
            "author": "John Wang",
            "id": "comment-13655478"
        },
        {
            "date": "2013-05-22T03:35:22+0000",
            "content": "[trunk commit] rmuir\nhttp://svn.apache.org/viewvc?view=revision&revision=1485040\n\nLUCENE-4992: CustomScoreQuery does not work with arbitrary queries: scoringQueries must match every document ",
            "author": "Commit Tag Bot",
            "id": "comment-13663726"
        },
        {
            "date": "2013-05-22T03:37:59+0000",
            "content": "[branch_4x commit] rmuir\nhttp://svn.apache.org/viewvc?view=revision&revision=1485041\n\nLUCENE-4992: CustomScoreQuery does not work with arbitrary queries: scoringQueries must match every document ",
            "author": "Commit Tag Bot",
            "id": "comment-13663727"
        },
        {
            "date": "2013-05-22T03:38:38+0000",
            "content": "I committed this: thanks for reporting this John! ",
            "author": "Robert Muir",
            "id": "comment-13663728"
        },
        {
            "date": "2013-07-23T18:37:01+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716718"
        }
    ]
}