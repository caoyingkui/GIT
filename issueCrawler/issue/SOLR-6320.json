{
    "id": "SOLR-6320",
    "title": "ExtendedDismaxQParser (edismax) parser fails on some queries",
    "details": {
        "affect_versions": "4.5",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When querying for some specific attributes parsing fails and it falls back to use the default search field aggregatefield.\n\nThis works as expected\ndebug\n\"rawquerystring\": \"*:* AND org_name_html:military AND affiliateorganizationid:\\\"0087\\\" AND volunteersslots:[1 TO *]\",\n\"querystring\": \"*:* AND org_name_html:military AND affiliateorganizationid:\\\"0087\\\" AND volunteersslots:[1 TO *]\",\n\"parsedquery\": \"(+(+MatchAllDocsQuery(*:*) +org_name_html:militari +affiliateorganizationid:0087 +volunteersslots:[1 TO *]))/no_coord\",\n    \"parsedquery_toString\": \"+(+*:* +org_name_html:militari +affiliateorganizationid:0087 +volunteersslots:[1 TO *])\",\n    \"explain\": {\n      \"71f3083d53e356b810cf31224f5de00e\": \"\n5.118334 = (MATCH) sum of:\n  0.08731608 = (MATCH) MatchAllDocsQuery, product of:\n    0.08731608 = queryNorm\n  2.1114364 = (MATCH) weight(org_name_html:militari in 34264) [DefaultSimilarity], result of:\n    2.1114364 = score(doc=34264,freq=1.0 = termFreq=1.0\n), product of:\n      0.85874873 = queryWeight, product of:\n        9.834944 = idf(docFreq=17, maxDocs=123663)\n        0.08731608 = queryNorm\n      2.458736 = fieldWeight in 34264, product of:\n        1.0 = tf(freq=1.0), with freq of:\n          1.0 = termFreq=1.0\n        9.834944 = idf(docFreq=17, maxDocs=123663)\n        0.25 = fieldNorm(doc=34264)\n  2.8322654 = (MATCH) weight(affiliateorganizationid:0087 in 34264) [DefaultSimilarity], result of:\n    2.8322654 = score(doc=34264,freq=1.0 = termFreq=1.0\n), product of:\n      0.497295 = queryWeight, product of:\n        5.6953425 = idf(docFreq=1129, maxDocs=123663)\n        0.08731608 = queryNorm\n      5.6953425 = fieldWeight in 34264, product of:\n        1.0 = tf(freq=1.0), with freq of:\n          1.0 = termFreq=1.0\n        5.6953425 = idf(docFreq=1129, maxDocs=123663)\n        1.0 = fieldNorm(doc=34264)\n  0.08731608 = (MATCH) ConstantScore(volunteersslots:[1 TO *]), product of:\n    1.0 = boost\n    0.08731608 = queryNorm\n\",\n      \"b36156ebd7204985f752f1c191ea4d18\": \"\n5.118334 = (MATCH) sum of:\n  0.08731608 = (MATCH) MatchAllDocsQuery, product of:\n    0.08731608 = queryNorm\n  2.1114364 = (MATCH) weight(org_name_html:militari in 34265) [DefaultSimilarity], result of:\n    2.1114364 = score(doc=34265,freq=1.0 = termFreq=1.0\n), product of:\n      0.85874873 = queryWeight, product of:\n        9.834944 = idf(docFreq=17, maxDocs=123663)\n        0.08731608 = queryNorm\n      2.458736 = fieldWeight in 34265, product of:\n        1.0 = tf(freq=1.0), with freq of:\n          1.0 = termFreq=1.0\n        9.834944 = idf(docFreq=17, maxDocs=123663)\n        0.25 = fieldNorm(doc=34265)\n  2.8322654 = (MATCH) weight(affiliateorganizationid:0087 in 34265) [DefaultSimilarity], result of:\n    2.8322654 = score(doc=34265,freq=1.0 = termFreq=1.0\n), product of:\n      0.497295 = queryWeight, product of:\n        5.6953425 = idf(docFreq=1129, maxDocs=123663)\n        0.08731608 = queryNorm\n      5.6953425 = fieldWeight in 34265, product of:\n        1.0 = tf(freq=1.0), with freq of:\n          1.0 = termFreq=1.0\n        5.6953425 = idf(docFreq=1129, maxDocs=123663)\n        1.0 = fieldNorm(doc=34265)\n  0.08731608 = (MATCH) ConstantScore(volunteersslots:[1 TO *]), product of:\n    1.0 = boost\n    0.08731608 = queryNorm\n\"\n    },\n    \"QParser\": \"ExtendedDismaxQParser\",\n    \"altquerystring\": null,\n    \"boost_queries\": null,\n    \"parsed_boost_queries\": [],\n    \"boostfuncs\": null,\n\n\n\nWhen adding additional conditions to org_name_html it fails\ndebug\n\"rawquerystring\": \"*:* AND affiliateorganizationid:\\\"0087\\\" AND org_name_html:( military AND veterans AND museum AND and AND education AND center ) AND volunteersslots:[1 TO *]\",\n\"querystring\": \"*:* AND affiliateorganizationid:\\\"0087\\\" AND org_name_html:( military AND veterans AND museum AND and AND education AND center ) AND volunteersslots:[1 TO *]\",\n\"parsedquery\": \"(+((affiliateorganizationid:0087 DisjunctionMaxQuery((aggregatefield:militari)) DisjunctionMaxQuery((aggregatefield:veteran)) DisjunctionMaxQuery((aggregatefield:museum)) DisjunctionMaxQuery((aggregatefield:educ)) DisjunctionMaxQuery((aggregatefield:center)) DisjunctionMaxQuery((aggregatefield:to)))~7))/no_coord\",\n\"parsedquery_toString\": \"+((affiliateorganizationid:0087 (aggregatefield:militari) (aggregatefield:veteran) (aggregatefield:museum) (aggregatefield:educ) (aggregatefield:center) (aggregatefield:to))~7)\",\n\"explain\": {},\n\"QParser\": \"ExtendedDismaxQParser\",\n\"altquerystring\": null,\n\"boost_queries\": null,\n\"parsed_boost_queries\": [],\n\"boostfuncs\": null,",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Esteban D",
            "id": "comment-14085491",
            "date": "2014-08-04T23:29:16+0000",
            "content": "Maybe this is not a bug I noticed that the and is declared twice. The logic tokenizes a sentences into words concatenated with AND . In this case it causes: and AND\n\nThis breaks:\n\norg_name_html:( military AND veterans AND museum AND and AND education AND center )\n\n\nThis works:\n\norg_name_html:( military AND veterans AND museum AND education AND center )\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14088950",
            "date": "2014-08-07T07:27:32+0000",
            "content": "If lowercaseOperators is set to true (which is the default setting), I would expect \"x AND and AND y\" to fail, because it would effectively become \"x AND AND AND y\" \u2013 which is invalid syntax.\n\nChanging the default setting for lowercaseOperators would likely cause lots of installs to suddenly seem broken to their users, but I really think that it should default to false. "
        }
    ]
}