{
    "id": "SOLR-2993",
    "title": "Integrate WordBreakSpellChecker with Solr",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A SpellCheckComponent enhancement, leveraging the WordBreakSpellChecker from LUCENE-3523:\n\n\n\tDetect spelling errors resulting from misplaced whitespace without the use of shingle-based dictionaries.\n\tSeamlessly integrate word-break suggestions with single-word spelling corrections from the existing FileBased-, IndexBased- or Direct- spell checkers.\n\tProvide collation support for word-break errors including cases where the user has a mix of single-word spelling errors and word-break errors in the same query.\n\tProvide shard support.",
    "attachments": {
        "SOLR-2993-fixes.patch": "https://issues.apache.org/jira/secure/attachment/12530987/SOLR-2993-fixes.patch",
        "SOLR-2993.patch": "https://issues.apache.org/jira/secure/attachment/12508865/SOLR-2993.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "James Dyer",
            "id": "comment-13177291",
            "date": "2011-12-29T17:58:27+0000",
            "content": "Patch adds features described in this issue.  Users can create a Dictionary configuration in solrconfig.xml like this:\n\n\n<lst name=\"spellchecker\">\n <str name=\"name\">wordbreak</str>\n <str name=\"classname\">solr.WordBreakSolrSpellChecker</str>      \n <str name=\"field\">lowerfilt</str>\n <str name=\"combineWords\">true</str>\n <str name=\"breakWords\">true</str>\n <int name=\"maxChanges\">10</int>\n</lst>\n\n\n\nUsers can also specify multiple \"spellcheck.dictionary\" parameters.  All specified dictionaries are consulted and results are interleaved. (this is handled by the new ConjunctionSolrSpellChecker) Collations are created with combinations from the different spellcheckers, with care taken that mutliple overlapping corrections do not occur in the same collation.\n\n\n<requestHandler name=\"spellCheckWithWordbreak\" class=\"org.apache.solr.handler.component.SearchHandler\">\n <lst name=\"defaults\">\n  <str name=\"spellcheck.dictionary\">default</str>\n  <str name=\"spellcheck.dictionary\">wordbreak</str>\n  <str name=\"spellcheck.count\">20</str>\n </lst>\n <arr name=\"last-components\">\n  <str>spellcheck</str>\n </arr>\n</requestHandler>\n\n\n\nA future enhancement (outside the scope of this issue) would be to extend ConjunctionSolrSpellChecker to allow arbitrary dictionary combinations.  For instance, if a user wanted to query two fields and have two separate dictionaries consulted for each field, etc.  With this patch, however, ConjunctionSolrSpellChecker is intended to be used to add Word-Break suggestions in with Single-Word suggestions. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13177295",
            "date": "2011-12-29T18:05:09+0000",
            "content": "Also included with the patch are several new unit tests, including one distributed/shard test scenario. "
        },
        {
            "author": "Okke Klein",
            "id": "comment-13178397",
            "date": "2012-01-02T13:58:54+0000",
            "content": "I'm having some trouble combining this patch with your other patch in https://issues.apache.org/jira/browse/SOLR-2585. Could you make a patch with both features if possible?  "
        },
        {
            "author": "James Dyer",
            "id": "comment-13178775",
            "date": "2012-01-03T15:26:09+0000",
            "content": "Okke,\n\nThanks for your interest.  For now you may need to evaluate the features separately.  Possibly you could vote for your favorite one.  Should either issue get committed, I will sync the other issue to the updated state of Trunk.  Then we can have both at the same time.  If there isn't any movement on these 2 for a long time maybe I'd consider merging the patches but that seems like an unnecessary step.  It would be nice if one of the first 4.x releases included both of these features...  "
        },
        {
            "author": "Okke Klein",
            "id": "comment-13182013",
            "date": "2012-01-07T16:09:51+0000",
            "content": "If I am not mistaken the functionality from https://issues.apache.org/jira/browse/SOLR-2585 can also be achieved in DirectSolrSpellChecker with thresholdTokenFrequency parameter. So I patched trunk with this patch and the corresponding Lucene patch and did some experimenting.\n\nThe misplaced whitespaces were fixed and proper suggestions were returned. However if both word parts resulted in suggestions, the collation made no sense.\n\nHypothetical example:\n\"spe llcheck\" would give suggestions \"spa\" and \"spellcheck\" and collate this into \"spa spellcheck\"\n\nIn my use case I never got any results back when one of the parts had a typo. So \"spe llchek\" would not give any suggestions.\n\nFor my use case it would also be handy if \"spell check\" would result in the suggestion \"spellcheck\".\n\nOr is this already possible? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13182577",
            "date": "2012-01-09T15:58:54+0000",
            "content": "Okke,\n\nThanks for looking at this patch.  Here are a few comments:\n\n\nif both word parts resulted in suggestions, the collation made no sense.\nThis is a problem with collations in general:  By default, it simply mashes the top corrections together, often resulting in nonsense.  The solution is to set \"spellcheck.maxCollationTries\" to a non-zero value.  Doing so will cause the spellchecker to vet the collation possibilities against the index, resulting in collations that are guaranteed to generate hits.\n\n\n\"spe llcheck\" would give suggestions \"spa\" and \"spellcheck\" and collate this into \"spa spellcheck\"\nThis is surprising to me and might indicate a bug.  This patch is designed to carefully ensure that when building collations, the corrections do not overlap one another.  For instance if \"q=spe llcheck\" and it gives corrections of \"spe>spa\" and \"spe llcheck>spellcheck\", it should not collate these to \"q=spa spellcheck\" because \"spe\" overlaps with \"spe llcheck\".  So if you can describe in detail what you're indexing and querying (maybe paste the resulting xml), it would be help me figure out what's going on.  Better yet, if you can write a failing unit test and post a patch...\n\n\nI never got any results back when one of the parts had a typo. So \"spe llchek\" would not give any suggestions.\nThis patch does not have the ability to first correct a word fragment and then combine it with another fragment to make a corrected word.  Possibly this would be a good next step after what we've got here already gets worked out.\n\n\nit would also be handy if \"spell check\" would result in the suggestion \"spellcheck\".  Or is this already possible?\nThis is the core of what this issue (really LUCENE-3523) is all about, provided that \"spellcheck\" is in the dictionary&index you're using. "
        },
        {
            "author": "Okke Klein",
            "id": "comment-13182767",
            "date": "2012-01-09T20:27:12+0000",
            "content": "\nThis is a problem with collations in general: By default, it simply mashes the top corrections together, often resulting in nonsense. The solution is to set \"spellcheck.maxCollationTries\" to a non-zero value. Doing so will cause the spellchecker to vet the collation possibilities against the index, resulting in collations that are guaranteed to generate hits.\n\nIf wordbreak gives back a suggestion of a combined word, a suggestion with a word fragment with more hits is still ranked higher in the collation.\n\nSo \"spa llcheck\" is preferred over \"spellcheck\" if spa has more hits then spellcheck.\n\n\nit would also be handy if \"spell check\" would result in the suggestion \"spellcheck\". Or is this already possible?\n\nThis is the core of what this issue (really LUCENE-3523) is all about, provided that \"spellcheck\" is in the dictionary&index you're using.\n\nNever got this working as no suggestions were given when both word fragments were spelled correctly and the combined word was in the index. (when making typo in combined word the word was returned as suggestion) "
        },
        {
            "author": "James Dyer",
            "id": "comment-13182790",
            "date": "2012-01-09T20:54:57+0000",
            "content": "\nSo \"spa llcheck\" is preferred over \"spellcheck\" if spa has more hits then spellcheck.\nI honestly didn't try this much with queries having all optional terms.  I see what you mean, though that you might prefer it just leave the misspelled word in there if its an optional term anyhow.  But wouldn't the query, in addition to giving spelling suggestions, also return some results because it would ignore the optional & misspelled query terms?  If that's the case, your app can look at the results you got back and compare that to the collation options and determine what to do from there.\n\n\nno suggestions were given when both word fragments were spelled correctly\nAs discussed in SOLR-2585, you can't get suggestions for terms that are in the index, unless you specify \"spellcheck.onlyMorePopular=true\".  Of course \"onlyMorePopular\" can have its own unintended consequences.  Hopefully someday in the not too distant future we'll be in a state where we can have both this issue and SOLR-2585 working together. "
        },
        {
            "author": "Okke Klein",
            "id": "comment-13182925",
            "date": "2012-01-09T23:27:32+0000",
            "content": "\nI honestly didn't try this much with queries having all optional terms.\n\nSetting mm to 100% gave me the result I expected. \n\nIm confused:\n \"This is the core of what this issue (really LUCENE-3523) is all about, provided that \"spellcheck\" is in the dictionary&index you're using\".\nand then\n\nAs discussed in SOLR-2585, you can't get suggestions for terms that are in the index, unless you specify \"spellcheck.onlyMorePopular=true\". Of course \"onlyMorePopular\" can have its own unintended consequences. Hopefully someday in the not too distant future we'll be in a state where we can have both this issue and SOLR-2585 working together.\n\nSo should it be possible to get the suggestion \"spellcheck\" from \"spell check\", or not?\n\nNote: I do get suggestions for terms that are in the index. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13183339",
            "date": "2012-01-10T15:47:31+0000",
            "content": "\nSo should it be possible to get the suggestion \"spellcheck\" from \"spell check\", or not?  Note: I do get suggestions for terms that are in the index.\n\nWhen combining words, it will require that at least one of the original terms be not in the index.  \n\nSo to use your example, WordBreakSpellChecker will combine \"spell check\" to \"spellcheck\" provided that:\n1. \"spellcheck\" is in the index.\n2. either:\n\n\t\"spell\" is NOT in the index.\n   OR\n\t\"check\" is NOT in the index\"\n   OR\n\tboth \"spell\" and \"check\" are NOT in the index.\n\n\n\nBut if both \"spell\" and \"check\" are in the index, then you won't get \"spellcheck\" as a suggestion.  You can override this behavior if:\n1. You specify \"onlyMorePopular\".  This works if \"spellcheck\" has a document frequency that is greater or equal than the highest document frequency between \"spell\" and \"check\".\n2. You apply SOLR-2585 (theoretically...not possible yet) and set \"spellcheck.alternativeTermCount\" greater than zero.  This would tell it to generate alternative term suggestions for indexed terms.\n\nIf this is not consistent with what you're experiencing then there is a possible bug in the WordBreakSpellChecker.  In that case, please provide as many details as possible (or write a failing unit test) and I can look into it further. "
        },
        {
            "author": "Okke Klein",
            "id": "comment-13183456",
            "date": "2012-01-10T18:42:57+0000",
            "content": "Thanks for the explanation. I experimented with onlyMorePopular and it worked a few times. Unfortunately it also showed unwanted behavior as expected. So https://issues.apache.org/jira/browse/SOLR-2585 would be a next step to see if it provides the behavior I'm looking for.\n\nFor the English language this feature might not be very important, but for languages like Dutch and German that have a lot of compounded words, a spellchecker that also combines word parts even if one of them has a typo (like Google does) would be extremely useful.\n\nUnfortunately I'm not a programmer, but I'll gladly test anything you throw at me  "
        },
        {
            "author": "James Dyer",
            "id": "comment-13285161",
            "date": "2012-05-29T21:50:10+0000",
            "content": "Updated patch.  Still some TODO's but for the most part this works well. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13286104",
            "date": "2012-05-30T21:52:38+0000",
            "content": "New patch.  Clean things up, fix bugs, etc.  This is getting close... "
        },
        {
            "author": "James Dyer",
            "id": "comment-13287659",
            "date": "2012-06-01T20:55:36+0000",
            "content": "Here is a new patch that can better handle collations involving mixed required/prohibited/optional terms and also boolean operators (AND/OR/NOT).\n\nWhen combining words, we do not want to combine an optional term with a prohibited one, etc.  We also do not want to combine words that belong to different boolean clauses or those that were \"NOT\"ed to one another.\n\nLikewise, when splitting a term into multiples, we want to ensure all the resulting terms are required if the original one was required, etc.  Also, if the query contains boolean operators (AND/OR/NOT), this version ANDs the split terms together.\n\nIn the case of Boolean operators, SpellingQueryConverter can only make a guess as to the best action.  It doesn't know the actual query parser used, the default \"q.op\" or \"mm\" setting, etc.  All this does is make a reasonable guess as to the best way to re-write the query if corrections involved combining and/or splitting words.\n\nSee WordBreakSpellCheckerTest#testCollate and SpellingQueryConverterTest#testRequiredOrProhibitedFlags for examples of how this works.\n\nUnless there are other issues, I plan to commit this in a few days. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13288759",
            "date": "2012-06-04T18:07:50+0000",
            "content": "Committed...Trunk r1346058, branch_4x r1346069\n\nThis commit includes updates to the Solr Example spellcheck config to use some of the newer SpellCheckComponent features, including this one. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13288809",
            "date": "2012-06-04T18:59:15+0000",
            "content": "Some of the spellcheck related tests just started failing:\nhttps://builds.apache.org/job/Lucene-Solr-tests-only-trunk/14566/\nProb related to this issue? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13288837",
            "date": "2012-06-04T19:25:35+0000",
            "content": "This was my mistake.  I ran tests, then changed the Solr Example config, forgetting that some tests depend on the Example config.  I committed a quick test fix that hopefully will stop the failures for now.  But one of the failures might be an actual problem.  I am looking into it now. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13289045",
            "date": "2012-06-05T01:11:05+0000",
            "content": "Re-open to figure out if failure with \"testSpellCheckResponse\" with WordBreakSolrSpellChecker added in is a valid failure.  My original fix for this caused DistributedSpellCheckComponentTest to fail, so I'll need to investigate more thoroughly tomorrow.  For now the offending tests are disabled.  (Sorry for the stormy weather on Jenkins!) "
        },
        {
            "author": "James Dyer",
            "id": "comment-13289571",
            "date": "2012-06-05T17:41:09+0000",
            "content": "Here is a patch that re-activates the previously-failing tests and fixes all the problems.  All tests pass and I checked the solr example also.  Here's a summary of the problems:\n\n\n\tTestSpellCheckResponse had a test bug in that data wasn't being cleaned from the index between tests.  Bug did not mainfest until I made solr example changes.\n\tSome asserts in TestSpellCheckResponse needed modifying to conform to changes in the solr example (test relies on example config).\n\tConjunctionSolrSpellChecker was not preverving the original token doc freq's from the child spellcheckers.  Bug wasn't being properly tested for before, but showed up once TestSpellCheckResponse was fixed.\n\tWordBreakSolrSpellChecker was not generating original token doc freq's.  Bug wasn't being properly tested for before, but showed up once TestSpellCheckResponse was fixed.\n\n\n\nI will commit shortly. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13289599",
            "date": "2012-06-05T18:06:44+0000",
            "content": "Committed fixes...Trunk: r1346489, branch_4x: r1346499 "
        }
    ]
}