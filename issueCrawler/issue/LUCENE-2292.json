{
    "id": "LUCENE-2292",
    "title": "ByteBuffer Directory - allowing to store the index outside the heap",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Implemented",
        "status": "Resolved"
    },
    "description": "A byte buffer based directory with the benefit of being able to create direct byte buffer thus storing the index outside the JVM heap.",
    "attachments": {
        "LUCENE-2292.patch": "https://issues.apache.org/jira/secure/attachment/12437654/LUCENE-2292.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-02T22:57:59+0000",
            "content": "Hi,\nlooks interesting as a replacement for RAMDirectory.\n\nYour patch uses a \"sun.\" internal package. If you want to do something similar to MMapDirectory to release the buffer without waiting for GC, do it in the same way using reflection like in MMapDirectory. ",
            "author": "Uwe Schindler",
            "id": "comment-12840373"
        },
        {
            "date": "2010-03-02T23:18:05+0000",
            "content": "Hi,\n\n>> looks interesting as a replacement for RAMDirectory.\n\nThis class uses ByteBuffer, which has its overhead over simple byte[], though using the same logic (if you verify it) can be used to improve the concurrency in RAMDirectory (just use byte[[).\n\n>> Your patch uses a \"sun.\" internal package. If you want to do something similar to MMapDirectory to release the buffer without waiting for GC, do it in the same way using reflection like in MMapDirectory.\n\nFrom what I know, it was there in all JDKs I worked with (its like sun.misc.Unsafe). Have you seen otherwise? If so, its a simple change (though I am not sure about the access control thingy in MMapDirectory, its a performance killer, and caching of the Method(s) make sense).\n\n ",
            "author": "Shay Banon",
            "id": "comment-12840379"
        },
        {
            "date": "2010-03-02T23:25:55+0000",
            "content": "There are also other non Sun JREs on the market (IBM, Harmony,...). And e.g. the forceful unmap of MMap dirs is not working on all of them. It is simply hack. Performance is no problem for Directory as close() is seldom called, so there is no method cache in MMapDirectory. ",
            "author": "Uwe Schindler",
            "id": "comment-12840382"
        },
        {
            "date": "2010-03-02T23:53:38+0000",
            "content": "Attached new patch, does not use sun.* package. I still cache Method since cleaning a buffer is not only done on close of the directory. ",
            "author": "Shay Banon",
            "id": "comment-12840392"
        },
        {
            "date": "2010-03-02T23:59:25+0000",
            "content": "By the way, an implementation note. I thought about preallocating a large direct buffer and then splicing it into chunks, but currently I think that the complexity (and overhead in maintaining splicing locations) is not really needed and the current caching should do the trick (with the ability to control both the buffer size and the cache size). ",
            "author": "Shay Banon",
            "id": "comment-12840394"
        },
        {
            "date": "2010-12-23T20:20:09+0000",
            "content": "A fixed path that now passes all tests using the byte buffer directory.\n\nAlso, includes refactoring into a different package (store.bytebuffer), and includes a custom ByteBufferAllocator interface that can control how buffers are allocated, including plain and caching implementations. ",
            "author": "Shay Banon",
            "id": "comment-12974722"
        },
        {
            "date": "2010-12-23T23:33:11+0000",
            "content": "This class uses ByteBuffer, which has its overhead over simple byte[],\n\nIn my experience ByteBuffer has basically no performance overhead over byte[] if you construct it by wrapping a byte[].  The JVM seems smart enough to figure out that there's a good old array behind the ByteBuffer.\n\nBut if I allocated the BB in any other way it was 2-4x slower in my simple tests on a mac with a sun JVM.\n\nSo it might be the right thing to put these changes into RAMDirectory and have it by default wrap a byte[] and add an (expert) API to allow allocating the BB in other ways. ",
            "author": "Michael Busch",
            "id": "comment-12974788"
        },
        {
            "date": "2011-12-22T18:12:41+0000",
            "content": "Attaching another round of the patch, with improved ref counting on cloned index input and better EOF failures (similar to RAM one). All tests pass.\n\nbtw. Some tests close the same index input instance several times, so I had to protect from it. ",
            "author": "Shay Banon",
            "id": "comment-13174943"
        },
        {
            "date": "2011-12-22T18:20:38+0000",
            "content": "make files protected since they might be needed in classes that extend the directory (I need it in my case) ",
            "author": "Shay Banon",
            "id": "comment-13174950"
        },
        {
            "date": "2011-12-31T18:36:01+0000",
            "content": "Add sizeInBytes to directory ",
            "author": "Shay Banon",
            "id": "comment-13178061"
        },
        {
            "date": "2014-10-30T18:54:50+0000",
            "content": "This looks like a good feature in Lucene. Why is it not included in a release? ",
            "author": "Lakshmanan",
            "id": "comment-14190608"
        },
        {
            "date": "2018-09-25T12:39:50+0000",
            "content": "This is now doable via LUCENE-8468 by providing custom allocation/reuse functions for byte buffers (it allocates on heap by default and doesn't reuse). ",
            "author": "Adrien Grand",
            "id": "comment-16627272"
        }
    ]
}