{
    "id": "SOLR-5833",
    "title": "OVERSEEROP aka ZkController.forceOverSeer doesn't work: old overser keeps running",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "While working on SOLR-5823, i tried to write a test using ZkController.forceOverSeer() to force the overseer to change from one node to another (to prove my code could properly detect the new overseer)\n\nThe test failed spectacuarly, because after calling forceOverSeer() the end result was that Overseer obejcts on both ZkControllers wound up being active.\n\nI'm not well versed on the leader/overseer election stuff \u2013 but from what i can tell poking arround in the code of forceOverSeer(), compared to the code involved in OversearchElectionContext, it seems like forceOverSeer() doesn't relaly do anything to ensure that the \"old\" overseer ever \"stops\".  miller's comments in SOLR-5823 seem to re-affirm that.\n\nWe should make forceOverSeer() work safely, or we should eliminate it.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13924503",
            "date": "2014-03-07T23:46:53+0000",
            "content": "If I remember right, the reason the old one should stop is that we are overwriting who the overseer is in ZK - so the old Oveerseer should have the while loops in it's threads fail - eventually - when it checks zk and realizes its not the registered leader. The problem is, there is no promise when and lots of room for overlap - as test fails have shown and you have seen.\n\nI also don't really like the 'clever' abuse of the election system - it all checks out, but it's not very straight forward and I worry about adding a lot of stuff like that and what it will mean to build on this stuff in the future.\n\nI really don't like counting on this at all - it's not very good for future Overseer extensibility and it's not really possible to harden fully. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924510",
            "date": "2014-03-07T23:51:07+0000",
            "content": "I've been meaning to finish SOLR-5699: \"Add test assert to ensure a cluster never starts two Overseers at the same time.\"\n\nBut I hadn't knocked it out yet. The plan was to use it to prevent code like that from being introduced. I want to simply add some static stuff that ensures it with asserts. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13924764",
            "date": "2014-03-08T07:51:06+0000",
            "content": "In the current system , the two overseers are likely to run  but not process the queue simultaneously\n\nHowever ,there is a small chance of that happening ig a message processing takes more than 1500+100 milliseconds. It is not probably but definitely possible. \n\nThis feature is only used currently when an overseer designate is added (ADDROLE command) for the first time to the cluster (a one time activity for the cluster lifetime)  . We should warn against using this for any routine process in the system till we make this hardened "
        }
    ]
}