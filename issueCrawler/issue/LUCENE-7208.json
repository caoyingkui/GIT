{
    "id": "LUCENE-7208",
    "title": "Expose Automaton getter on RunAutomaton",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "components": [
            "core/FSTs"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "RunAutomaton is (of course) built from an Automaton and it stores it on a field, package-private.  It would be convenient to expose it via a getter.  In fact CompiledAutomaton wants it.\n\nWhile we're at it, lets mark all the fields private and ensure that the only classes using its state (currently its 2 subclasses) use the getters that already exist for what they need.  Those getters are already final so I don't expect a performance impact.",
    "attachments": {
        "LUCENE_7208.patch": "https://issues.apache.org/jira/secure/attachment/12798301/LUCENE_7208.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15237435",
            "author": "Robert Muir",
            "date": "2016-04-12T15:58:02+0000",
            "content": "Actually i think the two things should be decoupled: RunAutomaton should not hang on to this... "
        },
        {
            "id": "comment-15237449",
            "author": "David Smiley",
            "date": "2016-04-12T16:04:46+0000",
            "content": "There's an argument to be said for that \u2013 I understand.  I have no compelling reason to say it should stay coupled.  I happen to be using it in some code that has multiple CharRunAutomaton instances, and it would like to merge/union them as an optimization instead of looping over them for matching a char[].  The simplest thing is to expose the automaton, then union them, then build a new CharRunAutomaton.  Another option would be to somehow actually merge the compiled/determinized automata, although the state isn't exposed to do that.  Any way, it's not a big deal. "
        },
        {
            "id": "comment-15237453",
            "author": "Dawid Weiss",
            "date": "2016-04-12T16:06:51+0000",
            "content": "Actually i think the two things should be decoupled: RunAutomaton should not hang on to this...\n\nThey in fact are decoupled in Anders's original implementation. "
        },
        {
            "id": "comment-15238887",
            "author": "Robert Muir",
            "date": "2016-04-13T08:56:28+0000",
            "content": "\nThey in fact are decoupled in Anders's original implementation.\n\nI know, and this is better. \n\n\nThere's an argument to be said for that \u2013 I understand. I have no compelling reason to say it should stay coupled. I happen to be using it in some code that has multiple CharRunAutomaton instances, and it would like to merge/union them as an optimization instead of looping over them for matching a char[]. The simplest thing is to expose the automaton, then union them, then build a new CharRunAutomaton. Another option would be to somehow actually merge the compiled/determinized automata, although the state isn't exposed to do that. Any way, it's not a big deal.\n\nI don't see it that way. Instead i see no argument for this getter, other than your code is buggy and you should have multiple Automaton in your api instead of these. "
        },
        {
            "id": "comment-15238902",
            "author": "Dawid Weiss",
            "date": "2016-04-13T09:02:31+0000",
            "content": "Not to heat the discussion, but think of Automaton as the \"source code\" and RunAutomaton as the \"binary, executable\" version of this source code, David. RunAutomaton is essentially optimized for execution, it's not meant to link or carry the \"source\" with it \u2013 that's one of the reasons it's decoupled from Automaton in Brics. "
        },
        {
            "id": "comment-15239332",
            "author": "David Smiley",
            "date": "2016-04-13T14:27:28+0000",
            "content": "I don't see it that way. Instead i see no argument for this getter, other than your code is buggy and you should have multiple Automaton in your api instead of these.\n\nI think it's needlessly inflammatory to tell me my code is buggy, even though no code yet has been written to do what I suggest.  I hate the suspenseful feeling I get seeing your communication to find out what your mood is.  Ironically what code has been written related to my inquiry  is MultiTiermHighlighting.java which you wrote, and could conceivably be rewritten to benefit from what I'm talking about (at the expense of loosing connection to the original query, but few highlighting apps need/care about that).\n\nAny way, this is a design issue (not a bug).  RunAutomaton's should be created as late as possible over the Automaton if there is a question of possibly needing the original Automaton.  RunAutomaton needn't have a getter; I think it shouldn't have the Automaton either if it's not going to have a getter.  I'm closing the issue. "
        }
    ]
}