{
    "id": "SOLR-8831",
    "title": "allow _version_ field to be retrievable via docValues",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Right now, one is prohibited from having an unstored version field, even if docValues are enabled.",
    "attachments": {
        "SOLR-8831.patch": "https://issues.apache.org/jira/secure/attachment/12792638/SOLR-8831.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-11T02:08:53+0000",
            "author": "Yonik Seeley",
            "content": "simple patch attached. ",
            "id": "comment-15190357"
        },
        {
            "date": "2016-03-11T06:24:07+0000",
            "author": "David Smiley",
            "content": "+1 ",
            "id": "comment-15190516"
        },
        {
            "date": "2016-03-11T11:27:38+0000",
            "author": "Varun Thacker",
            "content": "Hi Yonik,\n\nWas this committed as part in SOLR-5670 ? ",
            "id": "comment-15190821"
        },
        {
            "date": "2016-03-11T11:38:25+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "+1, this is much needed. I used to keep something like this in my patch for SOLR-5944 (https://github.com/chatman/lucene-solr/commit/627b9ac9b46796f20be78b04ebbdfa4299b96ab7#diff-040ec312b12294ee52a94eac00766ea7L77). ",
            "id": "comment-15190825"
        },
        {
            "date": "2016-03-11T15:46:30+0000",
            "author": "Jack Krupansky",
            "content": "Can we come up with a nice clean term for \"stored or docValues are enabled\"?\n\nI mean, the issue title here is misleading, as the description then indicates - \"if docValues are enabled.\" So, it should be \"allow version field to be unstored if docValues are enabled.\"\n\nTraditional database nomenclature is no help here since the concept of non-stored data is meaningless in a true database.\n\nPersonally, I'd be happier if Solr hid a lot of the byzantine complexity of Lucene, including this odd distinction between stored and docValues. I mean, to me they are just two different implementations of the logical concept of storing data for later retreival - how the data is stored rather than whether it is stored.\n\nI'll offer two suggested simple terms to be used at the Solr level even if Lucene insists on remaining byzantine: \"xstored\" or \"retrievable\", both meaning that the field attributes make it possible for Solr to retrieve data after indexing, either because the field is stored or has docValues enabled. This is not a proposal for a feature, but simply terminology to be used to talk about fields which are... \"either stored or have docValues enabled.\" (If I wanted a feature, it might be to have a new attribute like retrieval_storage=\"{by_field|by_document|none}\" or... stored=\"{yes|no|docValues|fieldValues}\".)\n\nI'm not proposing any feature here since that would be out of the scope of the issue, but since this issue needs doc, I am just proposing new terminology for that doc.\n\nAgain, to summarize more briefly, I am proposed that the terminology of \"retrievable\" be used to refer to fields that are either stored or have docValues enabled. ",
            "id": "comment-15191075"
        },
        {
            "date": "2016-03-11T15:59:44+0000",
            "author": "Yonik Seeley",
            "content": "they are just two different implementations of the logical concept of storing data for later retreival \n\nI agree - I've been occasionally using the term \"row stored\" and \"column stored\".\nWhile we won't be able to totally squash the terms \"stored\" or \"docValues\"  (too much history), in certain contexts it will certainly be easier to use an all encompassing term like \"retrievable\".  I'll update this patch to reflect that unless someone comes up with a better word for it. ",
            "id": "comment-15191090"
        },
        {
            "date": "2016-03-11T19:13:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ff8cedcb11638ee52f91bf81bad2ee01f3c3d59a in lucene-solr's branch refs/heads/branch_6_0 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff8cedc ]\n\nSOLR-8831: allow version field to be retrievable via docValues ",
            "id": "comment-15191397"
        },
        {
            "date": "2016-03-11T19:16:46+0000",
            "author": "Yonik Seeley",
            "content": "I think that was for searchability purposes... it allowed indexed OR docValues (and said nothing about stored) ",
            "id": "comment-15191403"
        },
        {
            "date": "2016-03-11T21:07:04+0000",
            "author": "Jack Krupansky",
            "content": "Now that docValues is supported for version, the question arises as to which is preferred (faster, less memory), stored or docValues. IOW, which should be the default. I presume it should be docValues, but I have no real clue.\n\nAlso, the doc for Atomic Update has this example as a Power Tip, that has BOTH stored and docValues set:\n\n\n<field name=\"_version_\" type=\"long\" indexed=\"false\" stored=\"true\" required=\"true\" docValues=\"true\"/>\n\n\n\nSee:\nhttps://cwiki.apache.org/confluence/display/solr/Updating+Parts+of+Documents\n\nShould that be changed to stored=\"false\"? Or, is there actually some aditional hidden benefit to store=\"true\" AND docValues=\"true\"? ",
            "id": "comment-15191504"
        }
    ]
}