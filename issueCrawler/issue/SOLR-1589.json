{
    "id": "SOLR-1589",
    "title": "Make FieldType#toInternal throw explicit Exceptions when Field values don't validate",
    "details": {
        "affect_versions": "1.4",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "As discussed on the mailing list: \n\nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-dev/200911.mbox/%3C85641490-9E70-41B3-A32E-22935B6887B4@apache.org%3E\n\nI think we can do a better job of having explicit Exceptions when there is a problem creating the internal representation of a Field, as defined by FieldType#toInternal. Instead of throwing obscure RuntimeExceptions, let's create a FieldValidationException explicit type, and make o.a.solr.schema.FieldType#toInternal throw this Exception as part of its signature.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12781256",
            "date": "2009-11-22T23:42:23+0000",
            "content": "In general, we use SolrException, which keeps track of if it has been already logged, and contains an HTTP-type error code.\nMany places in the code catch unexpected exceptions and wrap them in a SolrException.\n\nWhat would you have FieldValidationException inherit from? "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781260",
            "date": "2009-11-22T23:52:13+0000",
            "content": "What would you have FieldValidationException inherit from?\n\nHey Yonik, well, now that you point that out, maybe SolrException is a good one to have it inherit from, setting a particular HTTP-type response code for the provided field value that's outside of the expected value range. Looking at the Solr error codes:\n\nhttp://lucene.apache.org/solr/api/org/apache/solr/common/SolrException.ErrorCode.html\n\nMaybe we should introduce an INVALID_VALUE constant, and then just make FieldValidationException extends SolrException, and make it call super(INVALID_VALUE...). Thoughts? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12781267",
            "date": "2009-11-23T01:01:48+0000",
            "content": "This only makes sense if callers can catch the exception and handle it differently than they would other exceptions (I could see this possibly being used in the future though).  If there's a specific type of exception (like FieldValidationException) then a specific error code isn't needed - 400 will do.  We would need to map to a standard HTTP error code before passing it back to the client anyway. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781268",
            "date": "2009-11-23T01:24:36+0000",
            "content": "This only makes sense if callers can catch the exception and handle it differently than they would other exceptions (I could see this possibly being used in the future though).\n\nThat's the whole point of having this issue. Why catch a RuntimeException, or (generic) SolrException, when I can catch an explicit exception type? I'd rather have more information as a client than less. Right now, I see what you've done with SolrException and the whole error code process. The alternative to that is to have explicit SolrException types, e.g., BadRequestException or ForbiddenException. Better yet, a hybrid of the two would also be great. Something like:\n\n\npublic class BadRequestException extends SolrException{\n\n  // ...\n   public BadRequestException(String msg){\n      super(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n // ...\n}\n\n\n\nI'm proposing something like this type of exception for FieldValidation for the #toInternal method. This way, we design for the future in case someone thinks of new places that FieldType#toIternal should be called. The reason I'm proposing adding an explicit SolrException.ErrorCode constant is that I'm not sure that FieldValidation fits into any of the \n{BAD_REQUEST, FORBIDDEN, NOT_FOUND, SERVER_ERROR, SERVICE_UNAVAILABLE, UNAUTHORIZED, UNKNOWN}\n set...  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12781273",
            "date": "2009-11-23T01:54:37+0000",
            "content": "I'm not sure that FieldValidation fits into any of the {BAD_REQUEST, FORBIDDEN, NOT_FOUND, SERVER_ERROR, SERVICE_UNAVAILABLE, UNAUTHORIZED, UNKNOWN} set...\n\nMany / most servlet containers limit what error codes you can pass back. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781280",
            "date": "2009-11-23T02:08:41+0000",
            "content": "But SolrException != HttpRequestException, right? More, it's not a ServletContainerException. It's a SolrException. So why should we limit ourselves to only those exceptions that ServletContainers allow? I understand it from a client perspective (in terms of sending exceptions over the wire on the RPC request/reply interaction and that fact that SOLR is built on top of HTTP/REST, so we're limited to its exceptions), but I don't understand it from a I'm coding entirely on the server side and I'd like to throw an Exception that's catchable on the server-side perspective (w/o having to transfer the Exception over the wire). I think SOLR needs a mechanism of defining such Exceptions since people may write code that's an entirely server side or entirely client side operation.  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12781282",
            "date": "2009-11-23T02:22:05+0000",
            "content": "\n\n\n But SolrException != HttpRequestException, right? More, it's not a ServletContainerException. It's a SolrException\n\n\n\n\n\n+1, I think it would be good to have some more descriptive exceptions then just the HTTP ones.\n\nBut I think any new exception classes should extend SolrException with a reasonable code.  That is, \"InvalidFieldException extends SolrException( BAD_REQUEST )\"  or something like that.\n\nThis way HTTP error codes will get passed correctly, OR the exception can be caught and dealt with.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12781283",
            "date": "2009-11-23T02:25:14+0000",
            "content": "but I don't understand it from a I'm coding entirely on the server side and I'd like to throw an Exception that's catchable on the server-side perspective\n\nThis is getting a bit abstract...\n\nFor an invalid field value, I assume the error going back to the remote client needs to boil down to a 400.\nIf internal code needs to cache and deal with an invalid field value in a different manner than they would other 400 errors, then subclassing SolrException and thus allowing server-side code to explicitly catch it seems like a fine idea.  No new error codes are needed for this - the class serves to define the type of exception. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781286",
            "date": "2009-11-23T02:48:25+0000",
            "content": "I'm looking to come up with a solution that covers both non-RPC interactions, as well as non-client/server, framework-related interactions, regardless. I guess the whole idea is whether or not you are in code:\n\n\n//some SOLR class that deals with FieldTypes\n// FieldType: myFieldType\ntry{\n  myFieldType.toInternal(//some string)\n}\ncatch(InvalidFieldException e){\n//something..\n}\n\n\n\nversus being in an RPC interaction:\n\n\ncurl $URL --data-binary @myFile.xml f -H 'Content-type:text/xml; charset=utf-8'\norg.apache.solr.InvalidFieldException: Some brilliant message....\nsome stacktrace...\n\n\n\nI think we should let the caller know it's a org.apache.solr.InvalidFieldException. That's my whole point. So, +1 for that. SolrException is probably a good candidate either way, since SolrException codes, whether sent across the wire, or used internally, should be mapped to HttpResponse codes, and not treated as equivalent, IMHO.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872569",
            "date": "2010-05-27T22:08:02+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043859",
            "date": "2011-06-03T16:47:25+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106295",
            "date": "2011-09-16T14:50:26+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234719",
            "date": "2012-03-21T18:09:00+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717390",
            "date": "2013-07-23T18:48:05+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971102",
            "date": "2014-04-16T12:57:10+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}