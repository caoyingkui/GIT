{
    "id": "LUCENE-3054",
    "title": "SorterTemplate.quickSort stack overflows on broken comparators that produce only few disticnt values in large arrays",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "3.2",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Looking at Otis's sort problem on the mailing list, he said:\n\n* looked for other places where this call is made - found it in\nMultiPhraseQuery$MultiPhraseWeight and changed that call from\nArrayUtil.quickSort to ArrayUtil.mergeSort\n* now we no longer see SorterTemplate.quickSort in deep recursion when we do a\nthread dump\n\n\n\nI thought this was interesting because PostingsAndFreq's comparator\nlooks like it needs a tiebreaker.\n\nI think in our sorts we should add some asserts to try to catch some of these broken comparators.",
    "attachments": {
        "LUCENE-3054-stackoverflow.patch": "https://issues.apache.org/jira/secure/attachment/12477947/LUCENE-3054-stackoverflow.patch",
        "LUCENE-3054-dynamic.patch": "https://issues.apache.org/jira/secure/attachment/12478006/LUCENE-3054-dynamic.patch",
        "LUCENE-3054.patch": "https://issues.apache.org/jira/secure/attachment/12477819/LUCENE-3054.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-04-29T17:46:41+0000",
            "content": "really ugly prototype... i expect the generics/sort policeman will want to jump in here anyway \n\nbut it does catch that problem:\n\n    [junit] Testsuite: org.apache.lucene.index.TestCodecs\n    [junit] Testcase: testSepPositionAfterMerge(org.apache.lucene.index.TestCodecs):    FAILED\n    [junit] insane comparator for: org.apache.lucene.search.PhraseQuery$PostingsAndFreq\n\n ",
            "author": "Robert Muir",
            "id": "comment-13027099"
        },
        {
            "date": "2011-04-29T18:29:37+0000",
            "content": "Btw. this is with Lucene 3.1\nFor full thread: http://search-lucene.com/m/ytANA59Q9G1 ",
            "author": "Otis Gospodnetic",
            "id": "comment-13027119"
        },
        {
            "date": "2011-04-29T18:32:05+0000",
            "content": "i expanded the patch to all the sorts, just to find all the wierd sorting/comparators going on.\n\nit also finds some false positives, ones that are documented as inconsistent with equals, ones in tests, etc.\n\nbut we can at least look into the ones it finds. ",
            "author": "Robert Muir",
            "id": "comment-13027123"
        },
        {
            "date": "2011-05-02T13:02:26+0000",
            "content": "I investigated what happens here:\n\nThe problem is indeed quickSort, but not undernormal circumstances. The problem with quickSort (just google for stack overflow and quicksort) is that it only works fine for arrays with many values. Once you only have few distinct values and a large array, depending on the oreder it may happen that it splits into two subarrays for next iteration, where one is very large and the other only contains few items.\n\nAttached is a patch, that shows the problem. It almost every time stack overflows. Also quicksort is very slow for this case.\n\nThis is exactly what happens on PhraseQuery: we only have very few distinct items and possibly a very huge array. To fix this, we should change PhraseQuery to use mergeSort instead. Mergesort is also much faster in this case, as it always splits the array in the center. So the number of iterations is limited.\n\nFor TermsHash/BytesRefHash its mostly also not a problem, as the values (the terms are 100% distict, as only the hash is sorted).\n\nBut there may still be the slight chance this messes up. I propose to change SorterTemplate to fall back to mergeSort once it checks that number of iterations grows e.g. > 20 (have to test a little bit).\n\nI will change that issue to higher priority and we also need to backport to 3.1. ",
            "author": "Uwe Schindler",
            "id": "comment-13027639"
        },
        {
            "date": "2011-05-02T13:07:54+0000",
            "content": "\nI propose to change SorterTemplate to fall back to mergeSort once it checks that number of iterations grows e.g. > 20 (have to test a little bit).\n\nI like the idea of some \"guard\" here to prevent the stack overflow, and hopefully keep the quickSort performance for the places where we know its better than mergesort. ",
            "author": "Robert Muir",
            "id": "comment-13027640"
        },
        {
            "date": "2011-05-02T13:09:16+0000",
            "content": "Patch that shows the issue. ",
            "author": "Uwe Schindler",
            "id": "comment-13027641"
        },
        {
            "date": "2011-05-02T13:18:22+0000",
            "content": "As quicksort gets insanely slow when these type of data gets sorted, this also explains Otis' slowdown. ",
            "author": "Uwe Schindler",
            "id": "comment-13027643"
        },
        {
            "date": "2011-05-02T13:58:06+0000",
            "content": "Due to the realtime merge (LUCENE-3023), suddenly DocFieldProcessor got a reincarnation of quicksort again... will remove, too ",
            "author": "Uwe Schindler",
            "id": "comment-13027662"
        },
        {
            "date": "2011-05-02T14:44:32+0000",
            "content": "Here the patch that combines Robert's optimization for PhraseQuery (term with lower docFreq will also have less positions) and the safety for quickSort at all. ",
            "author": "Uwe Schindler",
            "id": "comment-13027677"
        },
        {
            "date": "2011-05-02T14:46:05+0000",
            "content": "Set fix versions (also backport to 3.1.1, as its serious for some large PhraseQueries and a serious slowdown then). ",
            "author": "Uwe Schindler",
            "id": "comment-13027678"
        },
        {
            "date": "2011-05-02T14:51:57+0000",
            "content": "Sorry, the safety net is only needed at 40 (from my tests), before it may affect BytesRefHash performance.\n\nI will commit later! ",
            "author": "Uwe Schindler",
            "id": "comment-13027679"
        },
        {
            "date": "2011-05-02T15:04:55+0000",
            "content": "Better test that fails faster in case of quickSort bug ",
            "author": "Uwe Schindler",
            "id": "comment-13027684"
        },
        {
            "date": "2011-05-02T15:46:10+0000",
            "content": "Final patch.\n\nAfter some discussion with robert: The use of QuickSort is fine after the comparator was fixed to not only sort by docFreq. ",
            "author": "Uwe Schindler",
            "id": "comment-13027699"
        },
        {
            "date": "2011-05-02T15:50:06+0000",
            "content": "Committed trunk revision: 1098633\n\nNow merging... ",
            "author": "Uwe Schindler",
            "id": "comment-13027702"
        },
        {
            "date": "2011-05-02T16:11:42+0000",
            "content": "Merged 3.x revision: 1098639\nMerged 3.1 revision: 1098641 ",
            "author": "Uwe Schindler",
            "id": "comment-13027707"
        },
        {
            "date": "2011-05-02T16:51:49+0000",
            "content": "Reopening so we can discuss things further...:\n\nQuickSort is dangerous!  Yet, it's definitely faster than MergeSort\nfor some cases (~20% faster when sorting terms for writing segment, in\nquick test I ran on Wikipedia content).\n\nSo the core issue is we should not use QS when there's a risk of any\nties, because in that case it can run really slowly or hit infinite\nrecursion.\n\nAnd we (well, Otis; thank you!) found one such place today (where\nMultiPhraseQuery sorts its terms) where we could have many ties and\nthus run very slowly / hit stack overflow.\n\nI appreciate the motivation for the \"safety net\", but, it makes me\nnervous... because, say we had done this a few months back... then\nOtis likely would not have reported the issue?  Ie, the\nMultiPhraseQuery would run slowly... which could evade detection\n(people may just think it's slow).\n\nI prefer brittle fails over silent slowdowns because the brittle fail\ngets your attention and you get a real fix in.  Silent slowdowns evade\ndetection.  Sort of like the difference between a virus and\nspyware...\n\nAlso, what's preventing us from accidentally using QS somewhere in the\nfuture, where we shouldn't?  What's going to catch us?\n\nRobert's first patch would catch this and protect us going forward?\n\nOr, maybe we could strengthen that approach and \"assert cmp != 0\"\ninside QS (ie, no ties are allowed to be passed to QS)?\n\nThough, using asserts only is risky, because it could be the\ncomparator may return 0, but it's just that none of our test cases\ntickled it.\n\nMaybe instead we could do this in a type-safe way: make a new\nNoTiesComparator whose compare method can only return LESS_THAN or\nGREATER_THAN?  And then QS would require NoTiesComparator.  Could that\nwork? ",
            "author": "Michael McCandless",
            "id": "comment-13027722"
        },
        {
            "date": "2011-05-02T17:21:12+0000",
            "content": "Also, I think PQ.PostingsAndFreq.compare is still able to return ties, if the app puts the same term at the same position (which is a silly thing to do... but, still possible).\n\nI think instead of disambiguating by Term, we should disambiguate by ord (ie, position of this term in the array of the query itself), since that can never be the same for entries in the array? ",
            "author": "Michael McCandless",
            "id": "comment-13027730"
        },
        {
            "date": "2011-05-02T18:58:43+0000",
            "content": "I'm sure many of you know this, but there is a new implementation of mergesort in java.util.Collections \u2013 it is based on a few clever heuristics (so it is a merge sort, only a finely tuned one) and has been ported/ partially inspired by the sort in Python as far as I recall.\n\nMaybe it'd be sensible to compare against this and see what happens. I know Lucene/Solr would rather have its own implementation so that it doesn't rely on the standard library, but in my benchmarks the implementation in Collections.sort() was hard to beat... ",
            "author": "Dawid Weiss",
            "id": "comment-13027772"
        },
        {
            "date": "2011-05-02T19:06:39+0000",
            "content": "Dawid:\nThere are two problems we have seen with native sort:\n\n\tit copies the array/collection always first, this caused slowdown for lots of places especiall in automaton - so it never sorts in plcace\n\twe sometimes need to sort multiple arrays in parallel, one as sort \"key\" -> especially in TermsHash/BytesRefHash. This is where SorterTemplate comes into the game: it supports separate swap(i,j) and compare(i,j) operations.\n\n\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-13027774"
        },
        {
            "date": "2011-05-02T19:12:45+0000",
            "content": "Thanks Uwe, I didn't know about it. Still, the algorithm folks developing OpenJDK have implemented is public, so an improvement can be filed \u2013 maybe somebody will find the time to implement it in a version suitable for Lucene.\n\nhttp://en.wikipedia.org/wiki/Timsort ",
            "author": "Dawid Weiss",
            "id": "comment-13027780"
        },
        {
            "date": "2011-05-02T20:00:22+0000",
            "content": "So, there are two known improvements to our QS, to try to avoid the O(N^2)\nworst-case, both from Robert Sedgewick.\n\nFirst, it's better to select median of low/mid/high as the pivot\n(http://en.wikipedia.org/wiki/Quicksort#Choice_of_pivot).  Second, we\nshould handle \"equal\" values better\n(http://www.angelfire.com/pq/jamesbarbetti/articles/sorting/001_QuicksortIsBroken.htm#Duplicates).\n\nSee also Lucy's nice QS impl:\n\n  http://svn.apache.org/viewvc/incubator/lucy/trunk/core/Lucy/Util/SortUtils.c?revision=1098445&view=markup#l331\n\nwhich I think addresses the above two issues, and goes even further\n(eq-to-pivot values are explicitly \"moved to the middle\" and then not\nrecursed on).\n\nThe thing is, fixing these will make our QS more \"general\", at the\nexpense of some added cost for the cases we know work fine today (eg\nsorting terms before flushing a segment).\n\nMaybe we leave our QS as is (except, changing the 40 to be dynamic\ndepending on input length), noting that you should not use it if your\ncomparator does not break ties, and even if it does there are still\nrisks because of potentially bad pivot selection?\n\nOr, maybe we remove QS always use MS?  Yes, there's a hit to the sort\nwhen flushing the segment, but this is a tiny cost compared to the\nrest of segment flushing...\n\nSeparately we can look into whether the tool timsort is faster for\nsorting terms for flush.... ",
            "author": "Michael McCandless",
            "id": "comment-13027808"
        },
        {
            "date": "2011-05-02T22:44:38+0000",
            "content": "\nMaybe we leave our QS as is (except, changing the 40 to be dynamic\ndepending on input length), noting that you should not use it if your\ncomparator does not break ties, and even if it does there are still\nrisks because of potentially bad pivot selection?\n\nThat looks like this: http://en.wikipedia.org/wiki/Introsort\n\nWe only need a good recursion depth where to switch! ",
            "author": "Uwe Schindler",
            "id": "comment-13027892"
        },
        {
            "date": "2011-05-02T23:25:32+0000",
            "content": "Here a patch which implements what introsort does: if the depth of recursion is >75% of log2, switch to mergeSort.\n\nAlso this patch moves all remaining quickSort calls to mergeSort on search side, where the comparators are not good. A few remaining ones in indexer keep alive, but those are all unique sets of terms or field names (needs some more review tomorrow).\n\nMike: What do you think, maybe you can do some benchmarking? ",
            "author": "Uwe Schindler",
            "id": "comment-13027918"
        },
        {
            "date": "2011-05-03T00:18:16+0000",
            "content": "Studying the C++ STL code showed that they use 2 * log2 as depth limit. I implemented that. It showed that for the most cases in Lucene (BytesRefHash), it uses quicksort (so no change to performance). The other cases use already mergeSort and the \"bad\" test in TestArrayUtil switches sucessfully to mergeSort. ",
            "author": "Uwe Schindler",
            "id": "comment-13027948"
        },
        {
            "date": "2011-05-03T09:34:31+0000",
            "content": "Patch looks good!  I like the 2*log_2(N) dynamic cutover; this means we can tolerate somewhat lopsided QS recursion and remain using QS. ",
            "author": "Michael McCandless",
            "id": "comment-13028125"
        },
        {
            "date": "2011-05-03T13:19:20+0000",
            "content": "Committed trunk revision: 1099041\nMerged 3.x revision: 1099045\nMerged 3.1 revision: 1099046 ",
            "author": "Uwe Schindler",
            "id": "comment-13028212"
        },
        {
            "date": "2011-06-03T16:37:14+0000",
            "content": "Bulk closing for 3.2 ",
            "author": "Robert Muir",
            "id": "comment-13043485"
        }
    ]
}