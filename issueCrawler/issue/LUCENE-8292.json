{
    "id": "LUCENE-8292",
    "title": "Fix FilterLeafReader.FilterTermsEnum to delegate all seekExact methods",
    "details": {
        "components": [
            "core/index"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [
            "trunk"
        ],
        "affect_versions": "7.2.1",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "FilterLeafReader#FilterTermsEnum wraps another TermsEnum and delegates many methods.\n\nIt misses some seekExact() methods, thus it is not possible to the delegate to override these methods to have specific behavior (unlike the TermsEnum API which allows that).\n\nThe fix is straightforward: simply override these seekExact() methods and delegate.",
    "attachments": {
        "LUCENE-8292.patch": "https://issues.apache.org/jira/secure/attachment/12921731/LUCENE-8292.patch",
        "0001-Fix-FilterLeafReader.FilterTermsEnum-to-delegate-see.patch": "https://issues.apache.org/jira/secure/attachment/12921730/0001-Fix-FilterLeafReader.FilterTermsEnum-to-delegate-see.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16462356",
            "author": "Adrien Grand",
            "content": "This may be a bit trappy: if someone writes a FilterTermsEnum that hides some terms, now they have 2 more methods to override for their impl to be correct. I don't understand why you are saying that it is not possible to override the behavior of these methods without your change, can you clarify? ",
            "date": "2018-05-03T12:20:03+0000"
        },
        {
            "id": "comment-16462368",
            "author": "Bruno Roustant",
            "content": "1- \"Not possible to override\": I was not clear. It is still possible for a delegate TermsEnum to override the seekExact() method. But it will never be called since the FilterTermsEnum above always calls seekCeil().\n\n2- \"Two more methods to override\": You're right. Although normally the same code should be reusable, it should not be tedious. I see the trappy point. ",
            "date": "2018-05-03T12:42:08+0000"
        },
        {
            "id": "comment-16462378",
            "author": "Adrien Grand",
            "content": "Indeed these methods need to be overridden explicitly if you want them to be used.\n\nIn general, we do not delegate methods that have a default implementation because the default implementation is correct regardless of what the wrapper class does. Overriding these methods in FilterTermsEnum to delegate to the wrapped instance would make room for bugs by requiring more methods to be overridden for the wrapper to be correct. ",
            "date": "2018-05-03T12:51:46+0000"
        },
        {
            "id": "comment-16462394",
            "author": "Bruno Roustant",
            "content": "When looking at TermsEnum API, what I understand is that seekExact() defaults to calling seekCeil(), but if needed (not for correctness but for performance consideration) we can override it to have a specialized seek that searches only the exact term and does not have to position to the next term if not found.\n\nThis may have an impact for some TermsEnum\u00a0extensions (a really noticeable impact in\u00a0my case, that's why I noticed this issue). To me the current behavior of FilterTermsEnum is not correct with regard to TermsEnum API. (And I noticed that AssertingLeafReader overrides seekExact()).\n\nAdding\u00a0these two methods in\u00a0FilterTermsEnum fixes correctness, even if I agree it makes more room for bugs. ",
            "date": "2018-05-03T13:03:00+0000"
        },
        {
            "id": "comment-16462409",
            "author": "Bruno Roustant",
            "content": "Another option would be to modify the TermsEnum.seekExact() method and make it final, or have the javadoc be explicit that it should not be overridden. (though I don't like this option) ",
            "date": "2018-05-03T13:08:17+0000"
        },
        {
            "id": "comment-16462501",
            "author": "David Smiley",
            "content": "Any use of a delegating wrapper is arguably \"trappy\" in the sense that you need to be mindful of what you should and should not override to do whatever it is you are doing. \u00a0So I think we might as well delegate everything \u2013 at least at the time of creating the subclass you can look at the FilterTermsEnum and observe the methods to potentially override yourself. \u00a0Today you need to know there are some \"hidden\" ones further below in the hierarchy.\n\nSidenote: if we were all using Kotlin, we probably would not bother to have such Filter/delegate classes in Lucene because Kotlin makes it trivial to auto-delegate all members. \u00a0You still need to be mindful of what you need to override to do whatever it is you need to do. ",
            "date": "2018-05-03T14:14:08+0000"
        },
        {
            "id": "comment-16465767",
            "author": "Bruno Roustant",
            "content": "I just realized that the current no-default-override behavior is actually enforced by a test TestFilterLeafReader.testOverrideMethods.\n\nI still think all methods should be overridden, but I understand that this may not be the expected behavior currently. ",
            "date": "2018-05-07T10:44:02+0000"
        },
        {
            "id": "comment-16465875",
            "author": "David Smiley",
            "content": "Maybe it would be helpful if we simply add a comment to FilterTermsEnum of the methods it does not override but could still be by subclasses that wish to? \u00a0e.g.:\n\n\n//inherited methods with default impls that could still be overridden:\n// public AttributeSource attributes()\n// public boolean seekExact(BytesRef text) throws IOException\n// public void seekExact(BytesRef term, TermState state) throws IOException\n// public TermState termState() throws IOException\n\n\n\nThe main down-side is that it could be easy to forget to maintain this comment as changes happen over time.  WDYT Adrien Grand? ",
            "date": "2018-05-07T12:55:03+0000"
        },
        {
            "id": "comment-16465887",
            "author": "Bruno Roustant",
            "content": "David Smiley, if I create a subclass of FilterTermsEnum to override seekExact, how can I make other classes in Lucene create this subclass instead of FilterTermsEnum? Would I have to also override other classes or other factories? ",
            "date": "2018-05-07T13:05:01+0000"
        },
        {
            "id": "comment-16465914",
            "author": "David Smiley",
            "content": "Yes, you'd need to modify the other classes to override to get whatever behavior you want. ",
            "date": "2018-05-07T13:34:05+0000"
        },
        {
            "id": "comment-16475579",
            "author": "Bruno Roustant",
            "content": "Actually there is also another related issue with this FilterLeafReader#FilterTermsEnum delegate pattern.\n\nIt does not delegate termState() nor seekExact(ByteRef, TermState) methods. Which means the termState is never used, so the term queries repeat twice the same seek (seekCeil) instead of using the termState to improve performance (normally the termState is kept by TermContext#build()).\n\nPractical example: When one configures a timeout for queries, internally an ExitableDirectoryReader is created. And its ExitableTermsEnum, which extends FilterTermsEnum, makes all term queries repeat twice the same seekCeil(). ",
            "date": "2018-05-15T09:56:33+0000"
        },
        {
            "id": "comment-16480093",
            "author": "David Smiley",
            "content": "Great example! \u00a0I was playing around with TestExitableDirectoryReader and there's definitely a loss of passing the term state. \u00a0I set a breakpoint here https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/TermQuery.java#L136\u00a0then ran in a debugger (after increasing the test timeout and removing the Ignore annotation) then stepped in to the default implementation of seekExact(term,state) for TestTermsEnum \u2013\u00a0which doesn't delegate. \u00a0I manually added delegation of this method there. \u00a0Then again ran into the default implementation for ExtiableDirectoryReader's ExitableTermsEnum. \u00a0In this one little adventure, I\u00a0his this thing twice.\n\nThere's certainly a bug here. \u00a0Either FilterTermsEnum should delegate everything, or these two subclasses of TermsEnum mentioned above ought\u00a0to delegate these methods but I bet there are more out there if we look closer. \u00a0I appreciate\u00a0modifying the delegation policy of\u00a0FilterTermsEnum is not a decision to be taken lightly and would probably not happen until a major release. ",
            "date": "2018-05-18T03:35:24+0000"
        }
    ]
}