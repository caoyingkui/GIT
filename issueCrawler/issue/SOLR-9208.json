{
    "id": "SOLR-9208",
    "title": "ConcurrentModificationException on SolrCore.close() resulting in abnormal CPU consumption",
    "details": {
        "components": [
            "multicore",
            "Server"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "In our use case we swap two cores and close the old one. We started seeing the below error from time to time (it's completely random, we are unable to reproduce it). Moreover we have noticed that when this Exception is thrown the CPU consumption goes pretty high (80-100%).\n\nError Message:\njava.util.ConcurrentModificationException: java.util.ConcurrentModificationException\n\nStackTrace:\njava.util.ArrayList$Itr.checkForComodification (ArrayList.java:901)\njava.util.ArrayList$Itr.next (ArrayList.java:851)\norg.apache.solr.core.SolrCore.close (SolrCore.java:1134)\norg.apache.solr.servlet.HttpSolrCall.destroy (HttpSolrCall.java:513)\norg.apache.solr.servlet.SolrDispatchFilter.doFilter (SolrDispatchFilter.java:242)\norg.apache.solr.servlet.SolrDispatchFilter.doFilter (SolrDispatchFilter.java:184)\n\u2026ipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)\norg.eclipse.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:581)\norg.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:143)\norg.eclipse.jetty.security.SecurityHandler.handle (SecurityHandler.java:548)\n\u2026g.eclipse.jetty.server.session.SessionHandler.doHandle (SessionHandler.java:226)\n\u2026g.eclipse.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1160)\norg.eclipse.jetty.servlet.ServletHandler.doScope (ServletHandler.java:511)\norg.eclipse.jetty.server.session.SessionHandler.doScope (SessionHandler.java:185)\norg.eclipse.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1092)\norg.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:141)\n\u2026e.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:213)\n\u2026.eclipse.jetty.server.handler.HandlerCollection.handle (HandlerCollection.java:119)\norg.eclipse.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:134)\norg.eclipse.jetty.server.Server.handle (Server.java:518)\norg.eclipse.jetty.server.HttpChannel.handle (HttpChannel.java:308)\norg.eclipse.jetty.server.HttpConnection.onFillable (HttpConnection.java:244)\n\u2026pse.jetty.io.AbstractConnection$ReadCallback.succeeded (AbstractConnection.java:273)\norg.eclipse.jetty.io.FillInterest.fillable (FillInterest.java:95)\norg.eclipse.jetty.io.SelectChannelEndPoint$2.run (SelectChannelEndPoint.java:93)\n\u2026il.thread.strategy.ExecuteProduceConsume.produceAndRun (ExecuteProduceConsume.java:246)\n\u2026e.jetty.util.thread.strategy.ExecuteProduceConsume.run (ExecuteProduceConsume.java:156)\norg.eclipse.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:654)\norg.eclipse.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:572)\njava.lang.Thread.run (Thread.java:745)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-14T13:16:52+0000",
            "author": "Lev Priima",
            "content": "\"thread-safe\" init and modification example:\n\nhttps://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/core/SolrCore.java#L1272 ",
            "id": "comment-15329478"
        },
        {
            "date": "2016-07-03T19:21:08+0000",
            "author": "Mikhail Khludnev",
            "content": "Fabrizio Fortino, what do you mean in closing the old one? Is it UNLOAD via core admin handler? ",
            "id": "comment-15360647"
        },
        {
            "date": "2016-07-03T19:36:02+0000",
            "author": "Fabrizio Fortino",
            "content": "Mikhail Khludnev yes. The exception is thrown when I try to unload the core from CoreAdminHandler. ",
            "id": "comment-15360653"
        },
        {
            "date": "2016-07-05T19:35:36+0000",
            "author": "Mikhail Khludnev",
            "content": "Colleagues, \nSolrCore.addCloseHook() seems obviously not safe. Ok. It's easy just to add a proper collection there. But how to reproduce it with the test? I tried to reproduce it with unloading core concurrently, but it did git CME or anything like that.\n\nAm I right that SolrCore.addCloseHook() is called by handlers&components while core is loaded by coreLoadExecutor, and only after that synchronously it handles requests and can be unloaded? \nOr how to reproduce this issue beside of dumb and brave concurrent call addCloseHook() and UNLOAD? \n\nFabrizio Fortino, could it somehow happen that you unload the core until it's loaded? I'm sorry for asking.  ",
            "id": "comment-15363090"
        },
        {
            "date": "2016-07-13T09:39:57+0000",
            "author": "Fabrizio Fortino",
            "content": "Mikhail Khludnev I am pretty sure this can't happen.\n\nLet me give some additional details of what I am trying to do.\n\nI have created a Solr CoreAdminHandler extension with the goal to swap two cores and remove the old one.\nMy code looks like this:\n\n\nSolrCore core = coreContainer.create(\"newcore\", coreProps)\ncoreContainer.swap(\"newcore\", \"livecore\")\n// the old livecore is now newcore, so unload it and remove all the related dirs\ncoreContainer.unload(\"newcore\", true, true, true)\n\n\n\nThis unfortunately does not work. I have opened an issue but I got no answers so far (details here https://issues.apache.org/jira/browse/SOLR-8757).\n\nAs a workaround, I am \"manually\" closing the references to the core I want to unload before unloading it. The code now looks like:\n\n\nSolrCore core = coreContainer.create(\"newcore\", coreProps)\ncoreContainer.swap(\"newcore\", \"livecore\")\n\n// the old livecore is now newcore, so unload it and remove all the related dirs\nSolrCore oldCore = coreContainer.getCore(\"newCore\")\nwhile (oldCore.getOpenCount > 1) {\n  oldCore.close()\n}\ncoreContainer.unload(\"newcore\", true, true, true)\n\n ",
            "id": "comment-15374718"
        },
        {
            "date": "2016-07-15T21:31:42+0000",
            "author": "Mikhail Khludnev",
            "content": "Fabrizio Fortino, I'm afraid it's not an issue, but a topic to discuss in mailing list. Attaching a test case and the brief code makes a lot of sense.  ",
            "id": "comment-15380153"
        },
        {
            "date": "2016-07-18T10:02:22+0000",
            "author": "Fabrizio Fortino",
            "content": "Mikhail Khludnev Thanks for replying back to me. But I am not agree about the fact that this is not an issue. If using the solr java API causes this kind of problems I think it's an issue that should be addressed.\n\nAnother explanation could be that I am using the API in a bad way. So far I haven't had any hint about it though. ",
            "id": "comment-15382026"
        }
    ]
}