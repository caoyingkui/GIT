{
    "id": "LUCENE-4537",
    "title": "Move RateLimiter up to Directory and make it IOContext aware",
    "details": {
        "components": [
            "core/store"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "4.0",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently the RateLimiter only applies to FSDirectory which is fine in general but always requires casts and other dir. impls (custom ones could benefit from this too.) We are also only able to rate limit merge operations which limits the functionality here a lot. Since we have the context information what the IndexOutput is used for we can use that for rate limiting.",
    "attachments": {
        "LUCENE-4537.patch": "https://issues.apache.org/jira/secure/attachment/12552088/LUCENE-4537.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-05T11:21:57+0000",
            "content": "here is a patch ",
            "author": "Simon Willnauer",
            "id": "comment-13490577"
        },
        {
            "date": "2012-11-05T12:12:33+0000",
            "content": "you can't put nulls into concurrenthashmaps. ",
            "author": "Robert Muir",
            "id": "comment-13490590"
        },
        {
            "date": "2012-11-05T12:14:34+0000",
            "content": "Lets make it a hashmap: CHM is entirely wasteful here (on space etc).\n\nThere is no need for concurrency: its a setter. ",
            "author": "Robert Muir",
            "id": "comment-13490591"
        },
        {
            "date": "2012-11-05T12:40:37+0000",
            "content": "Actually I don't think we should do this: here's my line of reasoning.\n\nInstead of dictacting data structures and maps in this abstract class,\nreally, we should just have abstract methods.\n\nBut we already have these! they are createOutput/openInput!\n\nAnything else is unnecessary bloat here. ",
            "author": "Robert Muir",
            "id": "comment-13490599"
        },
        {
            "date": "2012-11-05T12:48:16+0000",
            "content": "new patch simplifying this datastructure to a straight array indexed by Context#ordinal(). no real overhead to what we had before. ",
            "author": "Simon Willnauer",
            "id": "comment-13490601"
        },
        {
            "date": "2012-11-05T12:49:53+0000",
            "content": "But we already have these! they are createOutput/openInput!\nyou mean for each directory I want this in I need to subclass the dir an pass it in? That doesn't seem reasonable. Another way would be to have this per-context stuff in the RateLimiter though which I don't like that much to be honest.  ",
            "author": "Simon Willnauer",
            "id": "comment-13490603"
        },
        {
            "date": "2012-11-05T12:55:04+0000",
            "content": "Its absolutely reasonable. Otherwise the APIs are broken here.\n\nputting this concrete map on an abstract class that does nothing with it: thats not going to happen here.\n\nLets fix the real bug: that rate limiting isnt just wrapping with a different IO impl! Then the original\ndirectory factory apis work fine with it: if you want a concurrent map you can manage this all yourself.\n\nIf we want a sugar \"RateLimitingDirectoryWrapper\" thats fine. But its bogus this shit is in FSDir today. ",
            "author": "Robert Muir",
            "id": "comment-13490604"
        },
        {
            "date": "2012-11-05T13:25:21+0000",
            "content": "here is another option just for the record. I removed all public API of RateLimiter from Directory & FSDirectory and made an overloaded createOutput method that can be called from a wrapper dir. I mean this is not 100% detached from dir but much cleaner than what we had before. I don't think we can simply have a rate limited IndexOutput since it will not play nice with BufferedIndexOutput. progress over perfection though... ",
            "author": "Simon Willnauer",
            "id": "comment-13490614"
        },
        {
            "date": "2012-11-05T13:52:16+0000",
            "content": "I don't think ratelimiter should be in Directory at all: then its a bug if XYZdir doesnt implement it.\n\nScrew that: lets divorce this from directory completely as I suggested. Then it works with all directories,\nand they are totally unaware of it.\n\n\nI don't think we can simply have a rate limited IndexOutput since it will not play nice with BufferedIndexOutput. \n\nI think this is some premature optimization.\n\nAPIs come first here! ",
            "author": "Robert Muir",
            "id": "comment-13490634"
        },
        {
            "date": "2012-11-06T09:39:45+0000",
            "content": "I think this is some premature optimization.\nI am not sure if that is premature. But I do agree it would be great if we could just wrap the IndexOutput to do this kind of stuff entirely outside of Directory. Maybe we can have a flush callback on BufferedIndexOutput we can hook into the flush call. This would also enable us to do some flush statistics which is independent of this issue. This could be an impl detail of BufferedIndexOutput but it would enable us to 1. do the opto we do today 2. divorce the rate limiting entirely from Dir. ",
            "author": "Simon Willnauer",
            "id": "comment-13491345"
        },
        {
            "date": "2012-11-06T11:12:00+0000",
            "content": "I think rate limiting merge IO is important functionality: merges\neasily kill search performance if you index/search on one box (NRT\napp).\n\nBut I agree: Directory is abstract and minimal and we should keep it\nthat way.\n\nA generic wrapper around any IO would be great ... but I'm not sure\nhow we'd do it?  EG, would we have to tally up our own bytes in every\nwrite method (writeInt/Long/VInt/VLong/etc.)?  Maybe that's acceptable?\nIt's only for writing ...\n\nOr maybe we only make RateLimitingBufferedIO subclass?  Though I had\nwanted to try this with RAMDirectory too (playing with Zing)... I\nguess we could make a RateLimitingRAMOutputStream ... ",
            "author": "Michael McCandless",
            "id": "comment-13491390"
        },
        {
            "date": "2012-11-06T12:30:34+0000",
            "content": "I didn't say it wasn't important.\n\nI guess, if its really important, then we'll invest the time to \nfigure out clean APIs to support it. Otherwise we can remove it  ",
            "author": "Robert Muir",
            "id": "comment-13491413"
        },
        {
            "date": "2012-11-08T13:47:59+0000",
            "content": "here is a new patch detaching RateLimiting entirely from Directory and it's subclasses. RateLimitingDirectoryWrapper creates an IndexOutput wrapper if it knows of a Ratelimiter for the IOContext the IndexOutput is created for. RateLimitingIndexOutput subclasses BufferedIndexOutput and forwards / pauses on flush to the underlying IndexOutput. I also added an optimiztion for a Wrapped BufferedIndexOutput so FSDir uses will have the same experience as they had before just in a cleaner way API wise. ",
            "author": "Simon Willnauer",
            "id": "comment-13493175"
        },
        {
            "date": "2012-11-08T13:54:36+0000",
            "content": "+1 to this approach!!!! ",
            "author": "Robert Muir",
            "id": "comment-13493177"
        },
        {
            "date": "2012-11-08T14:29:42+0000",
            "content": "+1, this is a very clean solution!\n\nThanks Simon. ",
            "author": "Michael McCandless",
            "id": "comment-13493217"
        },
        {
            "date": "2012-11-08T21:32:43+0000",
            "content": "thanks guys!\n\ncommitted to trunk in rev. 1407268\n\nbackported to 4x in rev. 1407271 ",
            "author": "Simon Willnauer",
            "id": "comment-13493512"
        },
        {
            "date": "2013-03-22T16:18:23+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1407288\n\nLUCENE-4537: Separate RateLimiter from Directory ",
            "author": "Commit Tag Bot",
            "id": "comment-13610574"
        },
        {
            "date": "2013-03-22T16:18:31+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1407271\n\nLUCENE-4537: Separate RateLimiter from Directory ",
            "author": "Commit Tag Bot",
            "id": "comment-13610575"
        }
    ]
}