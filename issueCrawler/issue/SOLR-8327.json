{
    "id": "SOLR-8327",
    "title": "SolrDispatchFilter is not caching new state format, which results in live fetch from ZK per request if node does not contain core from collection",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "5.3",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "While perf testing with non-solrj client (request can be sent to any solr node), we noticed a huge amount of data from Zookeeper in our tcpdump (~1G for 20 second dump). From the thread dump, we noticed this:\n\njava.lang.Object.wait (Native Method)\njava.lang.Object.wait (Object.java:503)\norg.apache.zookeeper.ClientCnxn.submitRequest (ClientCnxn.java:1309)\norg.apache.zookeeper.ZooKeeper.getData (ZooKeeper.java:1152)\norg.apache.solr.common.cloud.SolrZkClient$7.execute (SolrZkClient.java:345)\norg.apache.solr.common.cloud.SolrZkClient$7.execute (SolrZkClient.java:342)\norg.apache.solr.common.cloud.ZkCmdExecutor.retryOperation (ZkCmdExecutor.java:61)\norg.apache.solr.common.cloud.SolrZkClient.getData (SolrZkClient.java:342)\norg.apache.solr.common.cloud.ZkStateReader.getCollectionLive (ZkStateReader.java:841)\norg.apache.solr.common.cloud.ZkStateReader$7.get (ZkStateReader.java:515)\norg.apache.solr.common.cloud.ClusterState.getCollectionOrNull (ClusterState.java:175)\norg.apache.solr.common.cloud.ClusterState.getLeader (ClusterState.java:98)\norg.apache.solr.servlet.HttpSolrCall.getCoreByCollection (HttpSolrCall.java:784)\norg.apache.solr.servlet.HttpSolrCall.init (HttpSolrCall.java:272)\norg.apache.solr.servlet.HttpSolrCall.call (HttpSolrCall.java:417)\norg.apache.solr.servlet.SolrDispatchFilter.doFilter (SolrDispatchFilter.java:210)\norg.apache.solr.servlet.SolrDispatchFilter.doFilter (SolrDispatchFilter.java:179)\norg.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1652)\norg.eclipse.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:585)\norg.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:143)\norg.eclipse.jetty.security.SecurityHandler.handle (SecurityHandler.java:577)\norg.eclipse.jetty.server.session.SessionHandler.doHandle (SessionHandler.java:223)\norg.eclipse.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1127)\norg.eclipse.jetty.servlet.ServletHandler.doScope (ServletHandler.java:515)\norg.eclipse.jetty.server.session.SessionHandler.doScope (SessionHandler.java:185)\norg.eclipse.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1061)\norg.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:141)\norg.eclipse.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:215)\norg.eclipse.jetty.server.handler.HandlerCollection.handle (HandlerCollection.java:110)\norg.eclipse.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:97)\norg.eclipse.jetty.server.Server.handle (Server.java:499)\norg.eclipse.jetty.server.HttpChannel.handle (HttpChannel.java:310)\norg.eclipse.jetty.server.HttpConnection.onFillable (HttpConnection.java:257)\norg.eclipse.jetty.io.AbstractConnection$2.run (AbstractConnection.java:540)\norg.eclipse.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:635)\norg.eclipse.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:555)\njava.lang.Thread.run (Thread.java:745)\n\nLooks like SolrDispatchFilter doesn't have caching similar to the collectionStateCache in CloudSolrClient, so if the node doesn't know about a collection in the new state format, it just live-fetch it from Zookeeper on every request.",
    "attachments": {
        "SOLR-8327.patch": "https://issues.apache.org/jira/secure/attachment/12799709/SOLR-8327.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-22T18:48:00+0000",
            "author": "Scott Blum",
            "content": "There's a TODO in LazyCollectionRef:\n\n// TODO: consider limited caching\n\nI think the right answer here is that LazyCollectionRef would need to keep the last version fetched in memory, and probably set a watch in case the data changes.  The watch would simply invalidate the cache without refetching the data.  Thoughts?  I could take this one. ",
            "id": "comment-15207019"
        },
        {
            "date": "2016-03-22T18:55:15+0000",
            "author": "Noble Paul",
            "content": "I don't think adding a watch for lazy collection ref is a good idea. We needed to minimize the number of watches for achieving scalability. The solution employed in solrj is very efficient. We can replicate the same logic here as well ",
            "id": "comment-15207038"
        },
        {
            "date": "2016-03-22T19:12:41+0000",
            "author": "Scott Blum",
            "content": "What does solrj do? How do you know when the cached data is stale? ",
            "id": "comment-15207072"
        },
        {
            "date": "2016-03-22T19:19:43+0000",
            "author": "Varun Thacker",
            "content": "Hi Scott,\n\nThis is what I understand what CloudSolrClient does for caching -\n\nThere is a in memory map {[Map<String, ExpiringCachedDocCollection> collectionStateCache}} . Now on every request it attaches the state versions from this cached map ( the collections that were referenced in the request )  by passing the STATE_VERSION param. This code is in the CloudSolrClient#requestWithRetryOnStaleState method.\n\nThe server in the response will send back state versions if it does not match the one sent by the client. So the client will update it's local copy based on this information.  ",
            "id": "comment-15207083"
        },
        {
            "date": "2016-03-22T19:21:54+0000",
            "author": "Noble Paul",
            "content": "Scott Blum Please refer to SOLR-5474 & SOLR-7130 ",
            "id": "comment-15207085"
        },
        {
            "date": "2016-03-22T19:34:04+0000",
            "author": "Scott Blum",
            "content": "Thanks for the extra context.  So it looks like this falls outside the scope of what ZkStateReader wants to do, since you want context-sensitive caching. ",
            "id": "comment-15207112"
        },
        {
            "date": "2016-03-22T19:37:11+0000",
            "author": "Noble Paul",
            "content": "Smart caching work flow is as follows\n\n\n\ta request for a collection comes to solrj\n\tlook up in local cache . If not available read from ZK and populate local cache\n\tmake a request to the server optimistically assuming that the data in cache is latest. But send extra information as a request parameter (_stateVer_=<coll-name>:<zk-version-of-state.json-in-cache>)\n\tat server. if this parameter is present, check locally if the version is correct . If this node serves this collection, it always has the latest state. So no ZK lookup is necessary\n\tIf the version at server is newer send the latest version of the state as a part of the payload\n\tsolrj looks for this  extra info in the payload. If there is no extra info, the state it has is the latest. nothing needs to be done. If the payload contains versions of the state, it means that the local version is stale, invalidate the cache\n\n ",
            "id": "comment-15207115"
        },
        {
            "date": "2016-03-22T19:37:54+0000",
            "author": "Noble Paul",
            "content": "you are right. It is not in the scope of ZkStateReader ",
            "id": "comment-15207116"
        },
        {
            "date": "2016-04-20T09:16:04+0000",
            "author": "Varun Thacker",
            "content": "Patch which is still a work in progress.\n\nWhat is solves:\n1. Caches the state when solr is hit directly and not queried via SolrJ\n2. Caches when the &collection=collection1,collection2 param is used\n\nTODO\n1. Cache invalidation when then  &collection=collection1,collection2 param is used . With this patch it would never invalidate it even if it has stale data\n2. Tests\n ",
            "id": "comment-15249540"
        },
        {
            "date": "2016-04-20T17:55:21+0000",
            "author": "Varun Thacker",
            "content": "Also the DistributedUpdateProcessor makes many calls to zkController.getClusterState().getCollection . So for non-solrJ users I guess we need to cache at the DitributedUpdateProcessor as well so that update requests don't make multiple calls to ZK  ",
            "id": "comment-15250374"
        },
        {
            "date": "2016-04-20T18:00:38+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Varun, I am auditing all usages of ClusterState methods to ensure we don't end up going to ZK needlessly. See SOLR-9014 ",
            "id": "comment-15250384"
        },
        {
            "date": "2016-11-17T01:57:12+0000",
            "author": "Erick Erickson",
            "content": "Shalin Shekhar Mangar Does SOLR-9014 being fixed mean we can close this JIRA? I just happened across this while looking at something else and wondered. ",
            "id": "comment-15672391"
        },
        {
            "date": "2016-11-17T07:01:28+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "No, this is still very relevant. SOLR-9014 was about ensuring that we don't repeatedly fetch the collection state from ZK in the context of the same request \u2013 and admittedly, we're not quite there but better than before. This issue is about not going to ZK to fetch collection state for different requests because SolrDispatchFilter has no caching for collection states like the SolrJ client does. ",
            "id": "comment-15672990"
        },
        {
            "date": "2017-12-19T18:54:46+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I tested this today (dockerized Solr + TCPDump on ZK container) and confirm this still is still an open issue; I think Noble's proposal for \"smart caching\" (as used in CloudSolrClient) is the right solution here. ",
            "id": "comment-16297255"
        },
        {
            "date": "2017-12-19T20:18:28+0000",
            "author": "Scott Blum",
            "content": "https://github.com/apache/lucene-solr/pull/294 ",
            "id": "comment-16297371"
        },
        {
            "date": "2017-12-19T20:19:41+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dragonsinth commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/294\n\n    This approach seems fine to me.  Remind me why we use nanoTime vs. normal clock?  I'm sure you're right I just want to refresh my brain. ",
            "id": "comment-16297372"
        },
        {
            "date": "2017-12-19T20:51:18+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user elyograg commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/294\n\n    Java programs are migrating to nanoTime instead of currentTimeMillis for elapsed time because many people have found that the latter will go backwards on occasion.  It is not monotonic.\n\n    Using nanoTime should be far less likely to go backwards.  That undesirable behavior has been observed in the wild, but should be rare.  Supposedly nanoTime is monotonic if the OS properly supports a monotonic clock.  There's a lot of info out there about it:\n\n    https://www.google.com/search?q=java+nanotime+monotonic\n\n    The fact that nanoTime might produce elapsed times with greater accuracy than one millisecond is a bonus. ",
            "id": "comment-16297410"
        },
        {
            "date": "2017-12-19T21:20:56+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "This approach seems fine to me. \nMy only concern with that solution is that within those 2 seconds (cache expiry time), the support for cache invalidation (in case of replicas being moved away from a node for example) is not there. I'm not sure yet if that might lead to potentially failed queries/updates. With a \"smart caching\" [0], request re-tries (and subsequent cache refresh) can be built into the routing logic in case our-version-of-collection-state thinks the collection should be on a node, but it isn't. The other benefit with \"smart caching\" is that it doesn't rely on nodes to keep fetching the state from ZK every two seconds.\n\n[0] - https://issues.apache.org/jira/browse/SOLR-8327?focusedCommentId=15207115&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15207115 ",
            "id": "comment-16297445"
        },
        {
            "date": "2017-12-19T21:58:26+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user chatman commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/294\n\n    Seems like there are some test failures due to this change:\n\n       [junit4] Tests with failures [seed: DE1D5337E38D2C32]:\n       [junit4]   - org.apache.solr.cloud.TestPullReplica.testRemoveAllWriterReplicas\n       [junit4]   - org.apache.solr.cloud.TestPullReplica.testAddRemovePullReplica\n       [junit4]   - org.apache.solr.cloud.CollectionTooManyReplicasTest.testAddTooManyReplicas\n       [junit4]   - org.apache.solr.cloud.CollectionsAPIDistributedZkTest.addReplicaTest\n       [junit4]   - org.apache.solr.cloud.DeleteShardTest.testDirectoryCleanupAfterDeleteShard\n       [junit4]   - org.apache.solr.cloud.TestCloudRecovery.corruptedLogTest\n       [junit4]   - org.apache.solr.cloud.TestCloudRecovery.leaderRecoverFromLogOnStartupTest\n       [junit4]   - org.apache.solr.cloud.TestUtilizeNode.test\n       [junit4]   - org.apache.solr.cloud.TestTlogReplica.testAddRemoveTlogReplica\n\n    Haven't looked into them yet, though. ",
            "id": "comment-16297495"
        },
        {
            "date": "2017-12-20T00:17:49+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user slackhappy commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/294\n\n    I'll look into the test failures.  I actually didn't mean to create the PR yet \ud83d\ude33  ",
            "id": "comment-16297686"
        },
        {
            "date": "2017-12-20T20:52:06+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user slackhappy commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/294\n\n    I updated my PR to target SOLR-8327 more specifically, and got the tests to pass.  I think a smarter approach like that used by CloudSolrClient would be great. My understanding of the change in SOLR-10524 is that even the smartest/fastest updates of zookeeper data won't match the real-world state of the cluster in many situations, such as replica state changes, because those will be batched, but certainly a smarter approach would narrow that gap as much as possible, in addition to reducing the amount of state fetching. ",
            "id": "comment-16299071"
        },
        {
            "date": "2018-01-16T19:12:56+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I plan to commit this shortly, unless there are any objections. We can open a follow up Jira to tackle the smart caching here, which will be an improvement over this. ",
            "id": "comment-16327615"
        },
        {
            "date": "2018-01-17T00:48:22+0000",
            "author": "Varun Thacker",
            "content": "So after this patch we will make one request every 2 seconds to ZK if a query comes in for a collection that has no replicas hosted locally?\n\nThis seems much better than what we have currently .\n\nWe seem to be inventing our own caching even though we can set ZK watches. What are the downsides if we actually set a watch on these znodes lazily? Is there a practical limitation to the number of watches that we could set? Scott Blum\u00a0/\u00a0Noble Paul\u00a0any thoughts on this? ",
            "id": "comment-16328071"
        },
        {
            "date": "2018-01-17T05:35:46+0000",
            "author": "Noble Paul",
            "content": "Varun Thacker We really can't let every node listen to, get notified and update the state of every single collection if we want to scale to 10000's of collections. So, this was a deliberate design choice\n\n\u00a0\n\nIshan Chattopadhyaya\n\nThe following code snippet would fetch the state and parse it irrespective of whether the state is updated.  It should download the changed state  only if the znode version is changed\n\n@Override\npublic synchronized DocCollection get() {\n gets.incrementAndGet();\n if (lastUpdateTime < 0 || System.nanoTime() - lastUpdateTime > LAZY_CACHE_TIME) {\n cachedDocCollection = getCollectionLive(ZkStateReader.this, collName);\n lastUpdateTime = System.nanoTime();\n }\n return cachedDocCollection;\n}\n\n ",
            "id": "comment-16328289"
        },
        {
            "date": "2018-01-23T17:12:30+0000",
            "author": "John Gallagher",
            "content": "Noble Paul I'm happy to try to make that change, if you can guide me!\n\n1) I looked into whether the child watch on collections would help me know the version without asking zk, but I didn't see a way that it could for collections that are lazy.\n\n2)\u00a0If I have to make a Zookeeper request, it isn't clear to me that getting the Stat to check the version (say, via exists), followed by getting the data if it differs is more efficient than just getting the data, and also increases the size of this change.\n\nIt would be my preference to first decouple the number of getCollectionLive's from the number of requests, then try to optimize the getCollectionLive, we already saw a 100x\u00a0decrease in zk traffic with the above patch.\u00a0 However, I'll defer to your judgment.\u00a0 How would you like me to check the version without getting the data?\u00a0\u00a0 ",
            "id": "comment-16336092"
        },
        {
            "date": "2018-01-26T17:01:49+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The following code snippet would fetch the state and parse it irrespective of whether the state is updated. It should download the changed state only if the znode version is changed\nI couldn't find a way to do this without two calls to ZK. Noble/John, unless there's an easy optimization that can be done here, do you think we should just go with the current patch and optimize later (say, using the smart caching technique)? ",
            "id": "comment-16341284"
        },
        {
            "date": "2018-01-27T21:36:05+0000",
            "author": "Noble Paul",
            "content": "Most of the times the state is downloaded unnecessarily because it is not changed. So, essentially, only one call is made ",
            "id": "comment-16342325"
        },
        {
            "date": "2018-01-27T21:38:53+0000",
            "author": "John Gallagher",
            "content": "What call are you proposing? `exists` ? ",
            "id": "comment-16342326"
        },
        {
            "date": "2018-02-12T06:00:51+0000",
            "author": "Noble Paul",
            "content": "Yes, use the zkClient.exists() call which gives a  Stat instance.\n ",
            "id": "comment-16360329"
        },
        {
            "date": "2018-02-13T12:42:57+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated John's patch to use a lookup for version before fetching. John Gallagher, Noble Paul, can you please review? ",
            "id": "comment-16362235"
        },
        {
            "date": "2018-02-18T20:42:44+0000",
            "author": "John Gallagher",
            "content": "Ishan Chattopadhyaya that update looks good to me! ",
            "id": "comment-16368669"
        },
        {
            "date": "2018-02-18T21:37:40+0000",
            "author": "Noble Paul",
            "content": "LGTM ",
            "id": "comment-16368682"
        },
        {
            "date": "2018-02-25T06:24:47+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b212f2e9b7b5d20ab8d6168b5ddcb164f536d1af in lucene-solr's branch refs/heads/master from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b212f2e ]\n\nSOLR-8327: Cluster state caching for nodes not hosting the collection ",
            "id": "comment-16375957"
        },
        {
            "date": "2018-02-25T06:25:44+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 72f23c89ec0a845d25129be2462c79147f6ff0e5 in lucene-solr's branch refs/heads/branch_7x from Ishan Khanna\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=72f23c8 ]\n\nSOLR-8327: Cluster state caching for nodes not hosting the collection ",
            "id": "comment-16375958"
        },
        {
            "date": "2018-02-25T06:28:51+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks John Gallagher! ",
            "id": "comment-16375960"
        }
    ]
}