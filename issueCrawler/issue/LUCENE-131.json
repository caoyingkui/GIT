{
    "id": "LUCENE-131",
    "title": "QueryParser not working on trivial query",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "This happens with lucene-20030906.\n\nRunning \n\n  java LucQuery /dir/to/index 'FNID:200'\n\nI get not output. Enhancing this to\n\n  java LucQuery /dir/to/index 'FNID:200*'\n\nI get the following output:\n\nDocument<Keyword<FNID:200> Keyword<filename:/some/filename>>\n\nThe output is generated by this:\n\npublic class LucQuery {\n  public static void main(String[] argv) throws IOException,ParseException {\n    IndexSearcher search = new IndexSearcher(argv[0]);\n    Query p = QueryParser.parse(argv[1], \"body\", new SimpleAnalyzer());\n    Hits h = search.search(p);\n    for(int i=0; i<h.length(); i++) \n{\n      System.out.println(h.doc(i));\n    }\n  }      \n}\n\nGiven the output produced, I would expect the\nfirst query to result in that same output.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-09-11T02:15:32+0000",
            "content": "Can you please provide a complete, self-contained example of the problem? ",
            "author": "cutting@apache.org",
            "id": "comment-12321353"
        },
        {
            "date": "2003-09-11T17:43:08+0000",
            "content": "An example is pasted in below. To see\nthe different behaviours, run as:\n\n  java LucBug ID:123\n  java LucBug 'ID:123*'\n\nBy now I learned that SimpleAnalyzer drops numbers. It\nwas obviously not a good idea to use a SimpleAnalyzer.\nNevertheless I would expect consistent behaviour.\n\n  Harald.\n\nimport org.apache.lucene.queryParser.*;\nimport org.apache.lucene.search.*;\nimport org.apache.lucene.analysis.SimpleAnalyzer;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.document.*;\nimport org.apache.lucene.index.*;\nimport java.io.IOException;\n\npublic class LucBug {\n  public static void main(String[] argv) \n    throws IOException, ParseException {\n    String indexDir = \"idnex\";\n\n    IndexWriter w = new IndexWriter(indexDir, new SimpleAnalyzer(), true);\n    Document d = new Document();\n\n    Field f = new Field(\"ID\", \"123\", true, true, false);\n    d.add(f);\n    w.addDocument(d);\n    w.close();\n\n    Query q = QueryParser.parse(argv[0], \"ID\", new SimpleAnalyzer());\n    IndexSearcher search = new IndexSearcher(indexDir);\n    Hits h = search.search(q);\n    for(int i=0; i<h.length(); i++) \n{\n      System.out.println(h.doc(i));\n    }\n  }\n} ",
            "author": "Harald Kirsch",
            "id": "comment-12321354"
        },
        {
            "date": "2003-10-03T09:28:14+0000",
            "content": "This is not a bug. SimpleAnalyzer is a subclass of LetterTokenizer which filters\nout all non-letter characters:\n\n  /** Collects only characters which satisfy\n\n\t{@link Character#isLetter(char)}\n.*/\n  protected boolean isTokenChar(char c) \n{\n    return Character.isLetter(c);\n  }\n\n\n\nThe wildcard query with * is not processed by the analyzer and succeeds while\nthe non-wildcard query is processed as a term query and is processed by the\nanalyzer.\n\nTry using a different analyzer that doesn't eliminate your query terms. ",
            "author": "Eric Isakson",
            "id": "comment-12321355"
        }
    ]
}