{
    "id": "SOLR-7027",
    "title": "ExtractingRequestHandler indiscriminantly dumps all source HTML attributes into the catch-all field when captureAttr=false, but it should be more selective, something like only href, title, alt, etc. attributes",
    "details": {
        "components": [
            "contrib - Solr Cell (Tika extraction)"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "5.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "On line 283 in SolrContentHandler, the catch-all field gets all source HTML attribute values dumped into it:\n\n\n270:  @Override\n271:  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n272:    StringBuilder theBldr = fieldBuilders.get(localName);\n273:    if (theBldr != null) {\n274:      //we need to switch the currentBuilder\n275:      bldrStack.add(theBldr);\n276:    }\n277:    if (captureAttribs == true) {\n278:      for (int i = 0; i < attributes.getLength(); i++) {\n279:        addField(localName, attributes.getValue(i), null);\n280:      }\n281:    } else {\n282:      for (int i = 0; i < attributes.getLength(); i++) {\n283:        bldrStack.getLast().append(' ').append(attributes.getValue(i));\n284:      }\n285:    }\n286:    bldrStack.getLast().append(' ');\n287:  }\n\n\n\nBut this will contains lots of unwanted cruft: class and style tags, etc.\n\nIt would be much better if only attribute values containing addresses or tooltip text, etc. were dumped into the catch-all field.  Here are a couple of places where this kind of attribute are described:\n\nhttp://jericho.htmlparser.net/docs/javadoc/net/htmlparser/jericho/TextExtractor.html#includeAttribute(net.htmlparser.jericho.StartTag,%20net.htmlparser.jericho.Attribute)\n\nFrom Tika's HtmlHandler class:\n\n\n    // List of attributes that need to be resolved.\n    private static final Set<String> URI_ATTRIBUTES =\n        new HashSet<String>(Arrays.asList(\"src\", \"href\", \"longdesc\", \"cite\"));",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-24T11:19:00+0000",
            "author": "Uwe Schindler",
            "content": "Hi we should think about refactoring the SolrContentHandler class more. There are major problems. The absove URL shows how it should be done: http://jericho.htmlparser.net/docs/javadoc/net/htmlparser/jericho/TextExtractor.html#includeAttribute(net.htmlparser.jericho.StartTag,%20net.htmlparser.jericho.Attribute\n\nIn fact if you have some HTML like <div><b>W</b>orld <b>D</b>ata <b>S</b>ystem (WDS)</div> the problem is that this is converted with too much whitespace: it will insert whitespace in the catch all field in a non-approp way: \"W orld D ata S ystem (WDS)\". If there are attributes involved it gests even worse: <div><span class=\"abbrev\">W<span>orld <span class=\"abbrev\">D<span>ata <span class=\"abbrev\">S<span>ystem (WDS)</div>, causes \"abbrev W orld abbrev D ata abbrev S ystem (WDS)\". The Jerico parser has a better approach on that because it handles the HTML tags more careful and not just inserts Whitespace between them\n\nThe official HTML to Text converter provided by TIKA is also correct: It internally handles inline tags (like span, b) different than block tags (div, p,...). It only inserts a newline after block tags, but never any whitespace between inline tags. Of course it swallows attributes. But in my personal opinion, the \"qualified\" attributes like \"abbrev\", \" href\",... should be collected and only inserted at the end of the corresponding block tag. Solr should not insert whitespace between inline tags. ",
            "id": "comment-14290547"
        },
        {
            "date": "2015-01-24T11:25:36+0000",
            "author": "Uwe Schindler",
            "content": "In fact an alternative approch could be: We should allow the user to insert the pure HTML into the solr field (just as option). In that case it would be able to display the results in formatted way and for indexing one can setup HTMLStripCharFilter on the indexing side.\n\nSo we should provide at least the option to just insert the HTML unchanged into string fields - Hoss Man already mentioned that yesterday. I think this might be another issue (this is brainstorming only...). ",
            "id": "comment-14290549"
        },
        {
            "date": "2016-12-21T01:08:15+0000",
            "author": "Ole J\u00f8rgen Br\u00f8nner",
            "content": "A semi-related issue that caught me off guard is that it doesn't seem to be possible to capture both attribute values (captureAttr) and content (capture=h1) and be able to distinguish between the content and attributes?\n\nWithout captureAttr the content captured in the h1 field will be very low quality since h1 tags commonly contain eg. class attributes, but with captureAttr the attribute values will be stored in the same field. (it doesn't seem possible to map the attributes and the content to different fields). They will be stored as different values in the multivalued field, but I don't think that helps much.\n\nThe documentation also says that when capturing elements (capture=h1) the content should also be present in the catch-all content field, but that doesn't align with my observations. ",
            "id": "comment-15765748"
        }
    ]
}