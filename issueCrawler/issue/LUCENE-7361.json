{
    "id": "LUCENE-7361",
    "title": "Terms.toStringDebug",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "While fixing LUCENE-7340, MemoryIndex.toString(), I thought MemoryIndex shouldn't need it's own debug toString() impl for its Terms when there could be a generic one.  So here I propose that we create a Terms.toStringDebug(Appendable result, int charLimit, String indent) or some-such but probably not override toString() for obvious reasons.  Maybe also have this on Fields() that simply loops and calls out to the one on Terms.\n\nThe format is debatable.",
    "attachments": {
        "MemoryIndexToString.java": "https://issues.apache.org/jira/secure/attachment/12814180/MemoryIndexToString.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15353640",
            "author": "David Smiley",
            "date": "2016-06-28T20:18:11+0000",
            "content": "Attached is some WIP on MemoryIndex's impl that I started to make generic.  Again, the format is debatable but it'd be nice to hear that this is a good idea and what the API would be before continuing. "
        },
        {
            "id": "comment-15353730",
            "author": "Robert Muir",
            "date": "2016-06-28T21:14:04+0000",
            "content": "I don't really think the two are comparable. For memoryindex maybe it is ok to loop over things like fields or terms, but this is not ok for a real index. Can't memoryindex just do this stuff itself? "
        },
        {
            "id": "comment-15354281",
            "author": "David Smiley",
            "date": "2016-06-29T02:14:14+0000",
            "content": "MemoryIndex is doing this itself.  And if not this issue then in a separate issue I think we should improve it (using the WIP code attached here as a straw-man) so that it simply uses the Lucene public Terms/TermsEnum/PostingsEnum APIs rather than needlessly using its internal implementation data which led to a bug.  Terms is Terms... why should MemoryIndex be different?  The only thing different I see is that MemoryIndex is going to be not as huge as a main index (in general) so, subjectively, it can sorta get away with overriding toString vs some other method.  I'd actually rather it didn't \u2013 leaving term & position details be on another method to avoid toString() getting humungous.  Where I'm coming at this is that it'd be a shame if this debugging utility only existed on MemoryIndex since the code doesn't really care about MemoryIndex specifics; MI has no specifics \u2013 it's an index, albeit a small one.\n\nAt times I've wished to view an index I'm debugging that I'm writing tests for, which has a small amount of data as it's the unit/test data.  SimpleTextCodec is one option but it's very inconvenient to switch to and switch to a non-RAM directory vs. a hypothetical diagnostic method on Fields / Terms when I'm already in the debugger poking around.  Doesn't that seem useful to you too? "
        },
        {
            "id": "comment-15355204",
            "author": "Robert Muir",
            "date": "2016-06-29T13:08:05+0000",
            "content": "No, I am against this. Its only a matter of time before a debugging message in infostream becomes a horrible performance bug or similar. sorry.\n\nMemoryIndex is a 1 document toy, it can do whatever it wants. "
        },
        {
            "id": "comment-15355259",
            "author": "Alan Woodward",
            "date": "2016-06-29T13:47:57+0000",
            "content": "I agree with Robert here - toString() is used in things like IDE debugging windows, what happens if I run a debugging session on a 2Gb index?\n\nHaving some kind of introspector on an index could be useful, though, so maybe instead of adding .toString() implementations, we have a special class in misc/ that prints this information out?  And then MemoryIndex.toString() can just include some top-level stats, and users get pointed to the introspector for more detailed debugging info. "
        },
        {
            "id": "comment-15356285",
            "author": "David Smiley",
            "date": "2016-06-30T01:19:07+0000",
            "content": "Lets just remove toString() from MemoryIndex; I think it could be dangerously large and I've certainly put a ton of data in MemoryIndex before.  But this issue isn't about MemoryIndex.toString(), it's about a hypothetical Terms.toStringDebug(Appendable) that wouldn't be called by Lucene itself (thus won't be in InfoStream), just a user if they want to (likely in a debug session passing System.out).\n\nHaving some kind of introspector on an index could be useful, though, so maybe instead of adding .toString() implementations, we have a special class in misc/ that prints this information out? And then MemoryIndex.toString() can just include some top-level stats, and users get pointed to the introspector for more detailed debugging info.\n\n+1 This issue can be retitled to reflect this change in location of the code.  What do you think of the name IndexPrettyPrinter?  Does this strategy sound good Robert Muir?  I would prefer a Terms.toStringDebug though a utility class in misc/ is almost as good to me. "
        }
    ]
}