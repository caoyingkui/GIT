{
    "id": "LUCENE-7722",
    "title": "Remove BoostedQuery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Task",
        "components": [],
        "fix_versions": []
    },
    "description": "We already  have FunctionScoreQuery, which is more flexible than BoostedQuery as it can combine scores in arbitrary ways and only requests scores on the underlying scorer if they are needed. So let's remove BoostedQuery?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15890339",
            "date": "2017-03-01T15:09:57+0000",
            "content": "+1\n\nI think this also applies to FunctionQuery and CustomScoreQuery? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15890344",
            "date": "2017-03-01T15:12:11+0000",
            "content": "BoostedQuery vs. BoostQuery is confusing anyways! ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15890358",
            "date": "2017-03-01T15:17:06+0000",
            "content": "BoostedQuery vs. BoostQuery is confusing anyways!\n\nDon't forget BoostingQuery!  Which I think we may be able to remove as well, by creating a DoubleValuesSource that wraps a Weight and returns scores as values.  There's a bit of an interface mismatch here, though, as DoubleValuesSource is always IndexReader-independant, so you need to make sure that the passed in Weight was generated against the same IndexReader as the FunctionScoreQuery is being run against. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15890466",
            "date": "2017-03-01T16:16:56+0000",
            "content": "There's a bit of an interface mismatch here, though, as DoubleValuesSource is always IndexReader-independant, so you need to make sure that the passed in Weight was generated against the same IndexReader as the FunctionScoreQuery is being run against.\n\nI don't think that would be much of an issue if it is documented properly? It's appealing that it would allow us to remove all these custom-score queries. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15891495",
            "date": "2017-03-02T02:23:17+0000",
            "content": "It's wonderful to see some cleanup in the works of these confusingly similar queries  ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15897692",
            "date": "2017-03-06T17:25:10+0000",
            "content": "Looking closer at BoostingQuery, I think the same effect could be had by using a BooleanQuery and wrapping the 'suppressing' subquery with a negative-valued BoostQuery?  In addition, BoostingQuery has no tests that actually run the query...\n\nOn reader-dependent DoubleValuesSource implementations, I think we need to add something like a rewrite() function to make the dependancy explicit.  Otherwise you could have odd interactions with things like the QueryCache. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15902416",
            "date": "2017-03-09T03:29:34+0000",
            "content": "Looking closer at BoostingQuery, I think the same effect could be had by using a BooleanQuery and wrapping the 'suppressing' subquery with a negative-valued BoostQuery? In addition, BoostingQuery has no tests that actually run the query...\n\n+1 I think those queries are a bit esoteric so we should not spend to much energy or make the API more complicated just to be sure we keep supporting the same functionality. Recommending negative-boosted queries as a replacement sounds good to me.\n\nOn reader-dependent DoubleValuesSource implementations, I think we need to add something like a rewrite() function to make the dependancy explicit. Otherwise you could have odd interactions with things like the QueryCache.\n\nI'm not sure exactly how you think of that rewrite, but for the record we need to make sure to never end up referencing IndexReader or Weight objects from Query objects, or it could cause similar leaks to LUCENE-7657.\n\nSince this need for per-reader specialization only exists for queries, I'm wondering whether we could make it optional somehow. For instance maybe we could have Function<IndexSearcher,DoubleValuesSource> DoubleValuesSource.fromQuery(Query) and add a new constructor FunctionScoreQuery(Query,Function<IndexReader,DoubleValuesSource>) which would be used by values sources that need per-index-reader specialization while simple (and common) usage of this API that only need reader-independant values sources could keep using the current API (which I like for its simplicity)? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15902838",
            "date": "2017-03-09T10:16:41+0000",
            "content": "Rewriting is a bit academic for now anyway, let's punt that to another issue and just remove the custom scoring queries here. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16295097",
            "date": "2017-12-18T15:05:44+0000",
            "content": "Think this can be resolved as a duplicate of LUCENE-8099 ",
            "author": "Alan Woodward"
        }
    ]
}