{
    "id": "SOLR-11954",
    "title": "Search behavior depends on kind of synonym mappings",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.2.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "For field with such type\n\n<fieldtype name=\"fulltext_en\" class=\"solr.TextField\" autoGeneratePhraseQueries=\"true\">\n\u00a0 \u00a0<analyzer type=\"index\">\n\u00a0 \u00a0 \u00a0 <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n\u00a0 \u00a0 \u00a0 <filter class=\"solr.WordDelimiterGraphFilterFactory\"\ngenerateWordParts=\"1\" generateNumberParts=\"1\" splitOnNumerics=\"1\"\ncatenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"0\" preserveOriginal=\"1\" protected=\"protwords_en.txt\"/>\n\u00a0 \u00a0 \u00a0 <filter class=\"solr.FlattenGraphFilterFactory\"/>\n\u00a0 \u00a0</analyzer>\n\u00a0 \u00a0<analyzer type=\"query\">\n\u00a0 \u00a0 \u00a0 <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n\u00a0 \u00a0 \u00a0 <filter class=\"solr.WordDelimiterGraphFilterFactory\"\ngenerateWordParts=\"1\" generateNumberParts=\"1\" splitOnNumerics=\"1\"\ncatenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"0\" preserveOriginal=\"1\" protected=\"protwords_en.txt\"/>\n\u00a0 \u00a0 \u00a0 <filter class=\"solr.LowerCaseFilterFactory\"/>\n\u00a0 \u00a0 \u00a0 <filter class=\"solr.SynonymFilterFactory\"\nsynonyms=\"synonyms_en.txt\" ignoreCase=\"true\" expand=\"true\"/>\n\u00a0 \u00a0</analyzer>\n</fieldtype>\n\n\u00a0If synonyms configured in next way\n\nb=>b,boron\n2=>ii,2\n\nThen for query \"my_field:b2\" parsedQuery looks so \"my_field:b2 Synonym(my_field:2 my_field:ii)\"\n\nBut when synonyms configured in such way\n\nb,boron\nii,2\n\nThen for query \"my_field:b2\" parsedQuery looks so \"my_field:b2 my_field:\\\"b 2\\\" my_field:\\\"b ii\\\" my_field:\\\"boron 2\\\" my_field:\\\"boron ii\\\")\"\n\nThe second query is correct (it uses synonyms for two parts after word split).\u00a0\n\nSearch behavior should not depends on kind of synonym mappings.\n\nThis issue also has been\u00a0discussed in solr\u00a0user mailing list\n http://lucene.472066.n3.nabble.com/SynonymGraphFilterFactory-with-WordDelimiterGraphFilterFactory-usage-td4373974.html\n\nIt reproduced for me for Solr\u00a07.1.0, but it also can be reproduced for 7.2.1 version",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-07T01:19:20+0000",
            "content": "There is a very subtle difference in how the analysis works with the different synonym definition.\n\nEither way, the query terms produced are b2, b, boron, ii, and 2.  But with the second definition, the \"b\" and \"2\" terms have the type \"word\" whereas \"boron\" and \"ii\" are tagged as SYNONYM.  With the first definition, all of the terms other than b2 are tagged as SYNONYM.  I think this is expected, because of how the => definition in synonyms works.\n\nWhat's not expected is what the query parser does with it \u2013 for the first definition two of the five terms that analysis produces are lost. Something like this is probably what the first definition SHOULD have produced:\n\n\nmy_field:b2 my_field:b my_field:2 Synonym(my_field:boron my_field:ii)\n\n\n\nOr maybe:\n\n\nmy_field:b2 my_field:b Synonym(my_field:boron) my_field:2 Synonym(my_field:ii)\n\n\n\nI don't think it can possibly produce an identical parsedQuery, but what it IS doing does look wrong. ",
            "author": "Shawn Heisey",
            "id": "comment-16388838"
        }
    ]
}