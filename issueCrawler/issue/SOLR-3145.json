{
    "id": "SOLR-3145",
    "title": "Velocity \"/browse\" config should set mm=100% to behave as in 3.x",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Admin UI"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "After SOLR-1889 was committed, the default for DisMax \"mm\" parameter changes depending on q.op. Since defaultOperator=OR in example schema.xml, and no \"mm\" parameter is specified in the \"/browse\" request handler, DisMax will fallback to mm=0%. To be consistent with 3.x behavior, we should add mm=100% for \"/browse\" config.",
    "attachments": {
        "SOLR-3145.patch": "https://issues.apache.org/jira/secure/attachment/12518198/SOLR-3145.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13211776",
            "date": "2012-02-20T11:01:37+0000",
            "content": "Two options\n\nA) Change schema.xml defaultOperator from OR to AND. That's what the majority of people want anyway isn't it?\n\nB) Add a mm=100% to the requestHandler config of \"browse\"\n\nWhat do you prefer? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211807",
            "date": "2012-02-20T12:26:46+0000",
            "content": "B) Add a mm=100% to the requestHandler config of \"browse\"\n\n+1 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13228343",
            "date": "2012-03-13T12:00:53+0000",
            "content": "Other optinions? If not, I'll prepare a patch changing \"/browse\" to default to mm=100% "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228354",
            "date": "2012-03-13T12:23:13+0000",
            "content": "I think defaulting to AND is very dangerous: especially with more minimal stopword lists\nlike Lucene's. Then shorter documents that happen to be missing some useless pronoun\ndon't show up in results at all.\n\nAny problems that this would \"Fix\" are really problems with Lucene's Similarity: the term\nfrequency normalization function grows too fast, etc.\n\nWhy not fix the real problem instead: either default to a Similarity with a stronger coord() \nimplementation, or a stronger ranking algorithm all together. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13228357",
            "date": "2012-03-13T12:46:38+0000",
            "content": "Robert, I don't get your comment - what does this have to do with stopwords or Similarity? It sounds more like a general opinion that you like OR better than AND, the more hits the better...\n\nWhat this is about is letting the example \"/browse\" GUI stick to its previous mm=100% behavior so 3.x \"/browse\" users will have a consistent experience. If people want \"OR\" they can change it. Personally I'd prefer changing defaultOperator in example schema to \"AND\", but I'm fine with OR there if /browse gets fixed. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228361",
            "date": "2012-03-13T12:55:22+0000",
            "content": "\nRobert, I don't get your comment - what does this have to do with stopwords or Similarity? It sounds more like a general opinion that you like OR better than AND, the more hits the better...\n\nIts not a general opinion. I dont care how many 'totalHits' are returned. I care about the relevance of the top N.\n\nAnd when good results are discarded simply because the query contained a useless word like 'his', thats bad news.\n\nPeople are too quick to jump to AND without debugging the real problem. The problem is that they see results that don't contain all of their query terms\nranked above results that do: this is a direct result of lucene's sqrt() tf normalization function (which it tries to make up for with coord): as opposed \nto other alternatives that are less aggressive and are known to perform better.\n\nBy forcing everything to AND, it then means the ranking system extremely fragile in cases like stopwords, but this is applying a hammer,\nits not the right default. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13228370",
            "date": "2012-03-13T13:06:42+0000",
            "content": "Robert, we don't disagree on the fact that search is more difficult than a simple OR or AND. People need to invest in designing a good search experience, taking these factors as well as many other into consideration. There is no silver bullet to recall or relevancy, nor is an advice to use \"OR\". I have been involved in more than 100 enterprise search installations world wide and in perhaps 2 or three of them we chose \"OR\" as default. Most often it's a matter of \"AND\" as default plus a lot of careful design in order to increase recall without sacrificing too much precision. Another key point is that people expect AND-ish behavior from the large public search engines, and are puzzled if they keep getting more results the more words they enter in the search box.\n\nFeel free to open new JIRAs for the other shortcomings you mentioned, like better Similarity defaults - I'm a big fan of that as well! "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13228371",
            "date": "2012-03-13T13:16:37+0000",
            "content": "Another thing - ALL applications that want to do sorting should care about the precision of their search. If there are 100 relevant docs for a given query, say q=sports car, and your result set returns 1000 docs since you use q.op=OR, then you may very well get the best sports cars on top, but try sorting by date, price, popularity or anything other than \"score\" and your results are crap because you only paid attention to search recall, not to precision. It's like a scale - gain one and you lose the other. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228382",
            "date": "2012-03-13T13:37:27+0000",
            "content": "\nAnother thing - ALL applications that want to do sorting should care about the precision of their search.\n\nThats not searching, thats matching. I think we should default to good behavior for search. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228385",
            "date": "2012-03-13T13:41:58+0000",
            "content": "\nFeel free to open new JIRAs for the other shortcomings you mentioned, like better Similarity defaults - I'm a big fan of that as well!\n\nThe problem is 4.x must still be able to read 3.x indexes and return good results, but 3.x indexes don't have the statistics we need\nto e.g. default to BM25 or something else. So I was hoping to bring this up for 5.0, it seems for 4.0 we should take the conservative\napproach and keep what we have: so that any migrating users don't have bad performance (yes all those Sims will work in degraded mode\nfor preflex indexes but i don't like that). "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13228404",
            "date": "2012-03-13T14:13:47+0000",
            "content": "\nAnother thing - ALL applications that want to do sorting should care about the precision of their search.\n\nThats not searching, thats matching. I think we should default to good behavior for search.\n\nCome again? Are you saying people don't build search driven applications these days? If so, you're just missing out on a big trend in the market... Our customers tend to request a seamless mix of advanced full-text search, navigation and metadata filtering/sorting. Forcing people into either strict metadata matching OR free-text search is artificial.\n\nAnyway, this is a side track. This issue is about NOT changing the \"/browse\" behaviour from 3.x to 4.x "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228405",
            "date": "2012-03-13T14:19:02+0000",
            "content": "I guess I'm not very trendy.\n\nI can run tests comparing AND and OR for you on standard test collections if you want, I already know the answers.\nFor defaults, we should take the conservative approach. Trendy people can change the defaults. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13228495",
            "date": "2012-03-13T16:28:24+0000",
            "content": "It is no surprise that you get better recall with OR - and thus find certain documents related to one of the terms which do not contain all terms. That's ABC and you don't need to prove that. But that is not the same as assuming that most Solr users prefer OR over AND. People seem to have been happy with \"/browse\" being AND for the past years, so why change now? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228508",
            "date": "2012-03-13T16:41:29+0000",
            "content": "Because I think SOLR-1889 was the correct change: the default Lucene queryparser is OR, and there are many good\nreasons for this. \n\nChanging the queryparser default to AND is very bad for isolating languages. I strongly disagree with doing this. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13228522",
            "date": "2012-03-13T17:17:22+0000",
            "content": "SOLR-1889 was the correct change [...] Changing the queryparser default to AND is very bad\n\n+1 (but probably for different reasons than you \n\nBut Jan is talking about just changing the default for just an example GUI (/browse), and not any query parsers.  That's pretty minor - not a big deal either way, but I do think that from a \"finished product\" perspective, more people expect all of their query terms to appear in matching documents (and I believe this is how google does it?) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228533",
            "date": "2012-03-13T17:38:57+0000",
            "content": "\nBut Jan is talking about just changing the default for just an example GUI (/browse), and not any query parsers. \n\nI think its pretty important. The problem is that in some languages, someone enters a search query with some useless particle\nor something and misses documents completely only because of grammatical structure.\n\nAlso for a lot of languages (e.g. chinese), tokenization into 'query terms' is not even close to completely accurate!\n\n\nThat's pretty minor - not a big deal either way, but I do think that from a \"finished product\" perspective, more people expect all of their query terms to appear in matching documents (and I believe this is how google does it?\n\nThis is false. Search for 'lucid in imagination' and look for the first result, it does not contain the word 'in'. \nThis is just an illustration of my point (its hard to come up with examples for english), but other examples\nwould be simple things like searching for U.S.A-China relations and missing documents that have U.S.-China relations.\n\nIn general most of the stopwords lists we have are very incomplete and minimal: I think this is good. But if you choose\nto use AND as a default, you need to be much more aggressive about these things.\n\nAlso i'm completely failing to mention use cases that do more natural language searches (e.g. longer queries) would really\nsuffer more here. \n\nAgain I think: don't wire the queryparser to force 100% query-term-importance, lean on the ranking system to do this.\nAs i mentioned, its my opinion there are serious problems with lucene's sqrt() tf normalization (it grows too fast and does\nnot represent the information gain of additional term occurrences well), causing additional occurences of only a few terms\nto blow up the score versus documents that actually do contain all terms: but we shouldn't solve that with a hammer like this.\n\nSo from a 'finished product' I think it should work reasonably well for as many languages and use cases as possible out of box:\nit should be generic. This kind of tuning thats specific to only certain use cases/languages/configurations is well documented \n(its easy to change the default operator) and not tricky to do. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13228557",
            "date": "2012-03-13T18:17:20+0000",
            "content": "> I believe this is how google does it?\nThis is false.\n\nRather strong/blanket statement.  It seems roughly true that adding non-trivial words to a google search lowers the number of matches.\n\nI guess we'll continue to disagree with a \"lowest common denominator\" approach to languages.\nIt's too bad that our example has no stopwords or stemming any more because of this philosophy. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13228584",
            "date": "2012-03-13T18:53:01+0000",
            "content": "Rather strong/blanket statement. It seems roughly true that adding non-trivial words to a google search lowers the number of matches.\n\nThis \"seems\" to be true in lot's of cases. But if you search Google for \"google number of results\" you will see pages from all over the internet discussing this topic. Even Google states in its FAQ that the number of results is just a guess and depends on various factors that appear quite random, there is no relationship in counts regarding adding/removing terms. Even the same search returns largely different counts when you change pages (e.g. going from page 1->2 completely changes the count). The reason for this is of course query preprocessing, different search clusters and user-specific preferences. To get a more solr-like result, use \"wortw\u00f6rtlich\" (German) / \"verbatim\" (English) on the left sidebar.\n\nLot of people simply say: the google count is just arbitrary and useless for any metrics. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13228589",
            "date": "2012-03-13T18:58:35+0000",
            "content": "I agree with Jan about \"and\" is good for some use cases, but only for the case that the user wants to override scoring and just sort e.g. by date, which is bogus for full text search engines alltogether. The first thing a full-text search consultat should do to the company representatives is explaining that explicit sorting is a no-go for most use cases. If the user wants to influence scoring, he can do that e.g. by adding per-document boost factors as DocValues field or by multiplying other score factors like geo distance, but never ever simply sort by distance in geo search (simple example: a \"cocktail bar\" in 2 miles distance might be a better result than a bar called \"cocktail stripper\" in 100 yards for users that entered \"cocktail bar\" into their search engine - just as example). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13228616",
            "date": "2012-03-13T19:14:15+0000",
            "content": "explicit sorting is a no-go for most use cases\n\nHeh.  Seems we live in very different worlds.  Perhaps Lucene is only about full-text search (at least it was in the past), but Solr has always been about much more than that.  Sorting by other things than \"full-text relevance\" is extremely common. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13231750",
            "date": "2012-03-17T00:18:21+0000",
            "content": "Clarified title and description. "
        }
    ]
}