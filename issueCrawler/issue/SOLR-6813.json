{
    "id": "SOLR-6813",
    "title": "distrib.singlePass does not work for expand-request - start/rows included",
    "details": {
        "components": [
            "multicore",
            "search"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Using distrib.singlePass does not work for expand-requests. Even after the fix provided to SOLR-6812, it does not work for requests where you add start and/or rows.",
    "attachments": {
        "test_that_reveals_the_problem.patch": "https://issues.apache.org/jira/secure/attachment/12684636/test_that_reveals_the_problem.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-02T12:50:03+0000",
            "author": "Per Steffensen",
            "content": "Attached patch (branch_5x) that change an existing test to reveal the problem. Apply the patch and run DistributedExpandComponentTest\nProbably not just want to commit the changed test after a fix of the problem, but maybe we want to add the test somewhere else. ",
            "id": "comment-14231422"
        },
        {
            "date": "2014-12-02T12:54:04+0000",
            "author": "Per Steffensen",
            "content": "Unlike for SOLR-6812 (and SOLR-6795 and SOLR-6796) I am not going to provide a fix here, because I really do not know enough about expand-requests to be able to say which response is actually the correct one - controlRsp or rsp in BaseDistributedSearchTestCase.query when doing the modified request from test_that_reveals_the_problem.patch ",
            "id": "comment-14231428"
        },
        {
            "date": "2014-12-13T00:19:05+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I think I'm gonna have to defer this to Joel Bernstein. I am not very familiar with the workings of expand component either. ",
            "id": "comment-14245034"
        },
        {
            "date": "2014-12-14T22:59:19+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I'll take a look.  ",
            "id": "comment-14246182"
        },
        {
            "date": "2014-12-15T23:09:53+0000",
            "author": "Joel Bernstein",
            "content": "My initial thoughts...\n\nIn distrib.singlePass mode the ExpandComponent will be returning more expanded groups then are needed to satisfy the query.\n\nHere is the basic logic:\n\n1) In non-distributed mode: Return expanded groups for all documents in the docList.\n2) In distributed mode: Return expanded groups for all documents referenced in the ID parameter. This ensured that only documents in the current page were expanded.\n\nWith distrib.singlePass mode the ExpandComponent will behave like #1. So if the page size is 10 and there are ten shards, each shard will return 10 expanded groups. So there will be 100 expanded groups in the output. \n\nTo resolve this issue the handleResponses method in the ExpandComponent is going to have to remove expanded groups that are not in the final merged docList. \n\n\n\n\n\n\n\n\n\n\n ",
            "id": "comment-14247399"
        },
        {
            "date": "2014-12-15T23:29:23+0000",
            "author": "Joel Bernstein",
            "content": "Another thought...\n\nWe also appear to have a deep paging issue to consider with distrib.singlePass when the ExpandComponent is in play. \n\nThe ExpandComponent will fetch groups for all documents in the docList when distrib.singlePass is on. With distributed deep paging the docList continues to grow as the user pages deeper into the result set. This means that more expanded groups will be fetched, making the deep paging problems much worse. \n\nIn normal two pass distributed mode, the ExpandComponent uses the ID list to eliminate  the deep paging issue.\n\nSo, in a nutshell we may be slowing things down quite a bit when using distrib.singlePass with the ExpandComponent.\n\nThe ExpandComponent was designed to work very effiiciently with the two pass distributed mode. Perhaps we should consider turning off distrib.singlePass if the ExpandComponent is in use.\n\n ",
            "id": "comment-14247423"
        },
        {
            "date": "2014-12-16T09:17:29+0000",
            "author": "Per Steffensen",
            "content": "I would prefer making it work instead of saying that single-pass in not supported for expand-queries. But I guess that is easy for me to say \n\nIf I understand you explanations correctly, expand-queries ought to (almost) always fail for distributed. Also when rows/start is not set (default start=0 and rows=10). Can you explain why it does not fail in those cases\n\n    query(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+group+\"}\", \"defType\", \"edismax\", \"bf\", \"field(test_ti)\", \"expand\", \"true\", \"fl\",\"*,score\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    query(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+group+\"}\", \"defType\", \"edismax\", \"bf\", \"field(test_ti)\", \"expand\", \"true\", \"expand.sort\", \"test_tl desc\", \"fl\",\"*,score\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    query(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+group+\"}\", \"defType\", \"edismax\", \"bf\", \"field(test_ti)\", \"expand\", \"true\", \"expand.sort\", \"test_tl desc\", \"expand.rows\", \"1\", \"fl\",\"*,score\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    //Test no expand results\n    query(\"q\", \"test_ti:5\", \"fq\", \"{!collapse field=\"+group+\"}\", \"defType\", \"edismax\", \"bf\", \"field(test_ti)\", \"expand\", \"true\", \"expand.sort\", \"test_tl desc\", \"expand.rows\", \"1\", \"fl\",\"*,score\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    //Test zero results\n    query(\"q\", \"test_ti:5434343\", \"fq\", \"{!collapse field=\"+group+\"}\", \"defType\", \"edismax\", \"bf\", \"field(test_ti)\", \"expand\", \"true\", \"expand.sort\", \"test_tl desc\", \"expand.rows\", \"1\", \"fl\",\"*,score\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    //Test page 2\n    query(\"q\", \"*:*\", \"start\",\"1\", \"rows\", \"1\", \"fq\", \"{!collapse field=\"+group+\"}\", \"defType\", \"edismax\", \"bf\", \"field(test_ti)\", \"expand\", \"true\", \"fl\",\"*,score\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n\n\nOnly the last one above fails? ",
            "id": "comment-14247963"
        },
        {
            "date": "2014-12-16T12:36:44+0000",
            "author": "Joel Bernstein",
            "content": "The test will fail when the number of collapsed groups returned by the query is larger then the page size.  For example with start=1 and rows=1 the controlRsp will have one expanded group, while the rsp will have multiple expanded groups. \n\nWith default page size of 10, both the controlRsp and rsp will have four expanded groups so the tests pass.\n\nWe can solve the test failures easily with a change to handleResults to remove groups that are not in the final docList.\n\nThe distributed deep paging problem will continue to exist. The only way I see to resolve that problem is with the two pass model.\n\ndistrib.singlePass is not the most efficient approach for every situation, so we can pick and choose when to apply it.\n\nShalin Shekhar Mangar, how does distrib.singlePass work with standard grouping? I suspect grouping still does multi-pass because it has a different distributed flow. \n\n ",
            "id": "comment-14248200"
        },
        {
            "date": "2014-12-16T16:04:30+0000",
            "author": "Per Steffensen",
            "content": "The distributed deep paging problem will continue to exist\n\nBut isnt that a performance problem only. Functionality-wise it will work doing deep paging, right? If it is just a performance problem, basically \"you should not use distrib.singlePass if you are deep paging\", I guess we should not disallow using it together with deep paging. It is just a bad idea performance-wise to use distrib.singlePass together with deep paging. ",
            "id": "comment-14248410"
        }
    ]
}