{
    "id": "SOLR-10889",
    "title": "Stale zookeper information is used during failover check",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.0",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In OverseerAutoReplicaFailoverThread it goes over each and every replica to check if it needs to be reloaded on a new node. In each such round it reads cluster state just in the beginning. Especially in case of big clusters, cluster state may change during the process of iterating through the replicas. As a result false decisions may be made: restarting a healthy core, or not handling a bad node.\n\nThe code fragment in question:\n\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n\n\n\nThe solution seems rather straightforward, reading the state every time:\n\n            int goodReplicas = findDownReplicasInSlice(zkStateReader.getClusterState(), docCollection, slice, downReplicas);\n\n\n\nThe only counter argument that comes into my mind is too frequent reading of the cluster state. We can enhance this naive solution so that re-reading is done only if a bad node is found. But I am not sure if such a read optimization is necessary.\n\nI have done some unit tests around this class, mocking out even the time factor. It runs in a second. I am interested in getting feedback about such an approach. I will upload a patch with this shortly.",
    "attachments": {
        "SOLR-10889.patch": "https://issues.apache.org/jira/secure/attachment/12872996/SOLR-10889.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-14T16:02:16+0000",
            "content": "Here is the unit test and the implementation (first one is bigger)\n\n\tTime is \"mocked\" out: interface introduced for getting nanoseconds. In test it is overwritten.\n\tEach doWork loop is invoked separately from test, forever looping is not used\n\tHamcrest matchers for collection asserts\n\tupdateExecutor basically executes the code in the same Thread context, no problems in waiting for background thread to complete\n\tCore Create Requests are not actually executed, just collected into a list, and verified from test\n\n\n\nComments are welcome. ",
            "author": "Mihaly Toth",
            "id": "comment-16049327"
        },
        {
            "date": "2017-06-21T15:34:24+0000",
            "content": "The only counter argument that comes into my mind is too frequent reading of the cluster state. We can enhance this naive solution so that re-reading is done only if a bad node is found. But I am not sure if such a read optimization is necessary.\nActually, looking into ZkStateReader there is no network activity involved when reading the cluster state. So there is not much counter argument against using the most latest cluster state instead of a stale one. ",
            "author": "Mihaly Toth",
            "id": "comment-16057705"
        },
        {
            "date": "2017-07-18T23:38:14+0000",
            "content": "As I see in Solr 7 this will not be an issue because of SOLR-10397. In this case affects version should be modified to 6.0. And those will not be fixed I guess. ",
            "author": "Mihaly Toth",
            "id": "comment-16092336"
        },
        {
            "date": "2017-10-03T15:33:17+0000",
            "content": "SOLR-10397 has not landed yet - we should probably get the current implementation back into shape, if not just to make sure the current testing is in good shape. ",
            "author": "Mark Miller",
            "id": "comment-16189861"
        }
    ]
}