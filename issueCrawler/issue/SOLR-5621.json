{
    "id": "SOLR-5621",
    "title": "Let Solr use Lucene's SeacherManager",
    "details": {
        "affect_versions": "6.0",
        "status": "Open",
        "fix_versions": [
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "It would be nice if Solr could take advantage of Lucene's SearcherManager and get rid of most of the logic related to managing Searchers in SolrCore. \nI've been taking a look at how possible it is to achieve this, and even if I haven't finish with the changes (there are some use cases that are still not working exactly the same) it looks like it is possible to do.  Some things still could use a lot  of improvement (like the realtime searcher management) and some other not yet implemented, like Searchers on deck or IndexReaderFactory\n\nI'm attaching an initial patch (many TODOs yet).",
    "attachments": {
        "SOLR-5621.patch": "https://issues.apache.org/jira/secure/attachment/12622238/SOLR-5621.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13866962",
            "date": "2014-01-09T19:47:28+0000",
            "content": "Thanks for opening this. This is really a good idea, I had the same idea in the past, but my Solr internals knowledge was to limited to be successful here.  "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13866980",
            "date": "2014-01-09T20:01:54+0000",
            "content": "+1, this would be awesome. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13866983",
            "date": "2014-01-09T20:06:11+0000",
            "content": "It seems like a ton of change, and a lot of risk to.... gain really no additional functionality. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13867007",
            "date": "2014-01-09T20:24:05+0000",
            "content": "That's true, however I think it's good because it allows Solr to reuse Lucene's components instead of duplicate the code. I understand that the SearcherManager was not originally used because it didn't exist by the time Solr was created, but now that it does (and AFAK it's a Lucene best practice for cases like this) we should try to adopt it. \nAlso, I think it would allow Solr to also use Lucene's SearcherLifetimeManager for searcher leases, which I think could allow Solr to use internal docids for distributed search instead of the unique key.  I know leases could be implemented in Solr too without using the SearcherLifetimeManager, but that way we continue duplicating functionality instead of using what's already built.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13867020",
            "date": "2014-01-09T20:33:15+0000",
            "content": "That's true, however I think it's good because it allows Solr to reuse Lucene's components instead of duplicate the code. \n\nThat's not a good enough reason for me.  It would be if one were about to write the Solr code and it already existed in Lucene... but that's not the case.\nLucene did the duplication of code here, and there's no reason Solr should have to move just because duplicated code now exists. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13867053",
            "date": "2014-01-09T21:05:46+0000",
            "content": "I'm not saying that Solr duplicated Lucene code or the other way around, I'm just saying that at this point, the code is duplicated. Lucene can't use Solr code, but Solr can use Lucene's. Making that happen would not only remove from Solr part of the code, but it would also improve the testing in both, Lucene and Solr. Using custom code also causes the need of more custom code (like in my previous example with the SearcherLifetimeManager). I think that as Lucene evolves, Solr should keep up to date with Lucene's changes and best practices, after all, it's the same Apache project, right? I do think these are good reasons.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13867062",
            "date": "2014-01-09T21:11:07+0000",
            "content": "it's the same Apache project, right?\n\nIt was supposed to be.  Hasn't exactly worked out well IMO. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13867147",
            "date": "2014-01-09T22:07:19+0000",
            "content": "Hi Yonik,\n\nplease don't be unfair to Tom\u00e1s: You might be right, that this is too risky for the stable branch, but we have still LuSolr trunk, so I see no problem committing this (once its done) to Solr trunk. It can then bake for long time, until Solr 5.0 is released. You have to recognize that he opened this issue with affects/fix version 5.0.\n\nAs Tom\u00e1s describes:\n\nAlso, I think it would allow Solr to also use Lucene's SearcherLifetimeManager for searcher leases, which I think could allow Solr to use internal docids for distributed search instead of the unique key. \n\nThis is a perfect use-case, although I am not sure if this would be easy. But a Job for another followup issue for Solr 5.0.\n\nIt was supposed to be. Hasn't exactly worked out well IMO.\n\nYou are the only one that uses this statement. In my opinion the \"same Apache project\" worked perfectly:\n\n\n\tWe got a lot of additional per-segment stuff in Solr.\n\tI helped a lot to get lot's of API changes in Lucene into Solr, e.g. the refactoring of Document, IndexReader. Others helped with TermsEnum,...\n\tBetter Analyzer support in Solr. Users don't need to write factories for stuff that's already in Lucene. Just plugin e.g. lucene-analysis-kuromoji.jar into your lib/ folder and it automatically works thanks to SPI. If we would still have factories solely in Solr, one would have to write factories for all Lucene modules or we would need to ship with them with Solr Core (so dependiing on stuff like kuromoji the user don't needs).\n\tAll codec support was mostly written by (originally) Lucene committers.\n\n\n\nWith your statement, you are the only person who fights against working together even more! Some examples:\n\n\tThe Facet module improved so much, why not allow to use it from Solr? To me it looks like you are against. Just because you would need to configure in the schema which fields you want facet on! The current Solr facetting uninverting all stuff is a disaster performance- and memory wise\n\tExtracting factories from Solr: No you were against, because your enemy ES could use it - But we did it anyhow. That's good! And ES did not yet completely took over your code, so where is the problem?\n\n\n\nWith the given possibilities for improvements and better maintainability of this code we are on the right path. I am sure with the new code maybe the crazy Solr failures hitting us all the time from Solr tests maybe get better (you know, the damnful: java.lang.AssertionError: ERROR: SolrIndexSearcher opens=59 closes=58).\n\nUwe "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13867172",
            "date": "2014-01-09T22:22:30+0000",
            "content": "There's boatloads of FUD in your response Uwe, but I'm too tired of the politics to respond to them all.  Solr support for lucene faceting doesn't exist because no one has developed a patch yet. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13867218",
            "date": "2014-01-09T22:48:43+0000",
            "content": "+1 to do this in trunk, and give it time to bake.\n\nA future cutover to SearcherLifetimeManager makes sense too; then Solr doesn't need to load stored documents to get the \"id\" field to reference documents anymore.  Just use the searcher version + docID.\n\nRefactoring code is a healthy and ongoing process in good open-source projects, like ours.  Yes, there is short-term risk of instability, but over time this trades off for a stronger long-term design for Solr.\n\nSolr should also be [more] per-segment, use Lucene Filters, etc. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13867226",
            "date": "2014-01-09T22:54:33+0000",
            "content": "Solr support for lucene faceting doesn't exist because no one has developed a patch yet.\n\nIn fact, cutting over to SearcherManager is a good step towards adding Lucene facets to Solr: the jump from SearcherManager (a ReferenceManager<IS>) to SearcherTaxonomyManager (a ReferenceManager<IS + TaxoReader) is easy. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13867272",
            "date": "2014-01-09T23:24:35+0000",
            "content": "> Refactoring code is a healthy and ongoing process in good open-source projects, like ours. Yes, there is short-term risk of instability, but over time this trades off for a stronger long-term design for Solr.\n\n+1 for trunk "
        },
        {
            "author": "Chris Male",
            "id": "comment-13867291",
            "date": "2014-01-09T23:38:09+0000",
            "content": "+1 for trunk "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13867327",
            "date": "2014-01-10T00:20:48+0000",
            "content": "I don't think we can flat out reject refactoring or code contributions because they might destabilize code thats been around for a while. If we do that, Solr will not evolve properly.\n\nI sympathize with the idea that we don't want to add a lot of instability - I'm fighting that battle with SolrCloud while it's still in it's hardening phase. However, it's an argument that can easily be carried too far.\n\nHonestly, I wouldn't be that happy to have such a big change in 5 that is not in 4 - it starts making development and back porting a major pain. But the sad fact is, this is exactly what 5.0 is for and all about.\n\nI have not read the patch, so I don't know if I am for or against this, but simply sharing code with Lucene adds to the contributors to the code, so flat out, there are certainly some advantages. Perhaps some disadvantages too, but without a doubt, advantages.\n\nAnyway, I think we need to judge this on the technical merits of the final patch. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13867331",
            "date": "2014-01-10T00:24:14+0000",
            "content": "One way to make such a refactoring a bit more palatable IMO, is to add a lot to the testing around this rather than just relying on the existing tests... "
        },
        {
            "author": "Shai Erera",
            "id": "comment-13867499",
            "date": "2014-01-10T04:48:26+0000",
            "content": "+1 for using SearcherManager. In fact, I think that Solr should make every attempt to reuse whatever modules are in Lucene (including facet and replicator for example). Duplicating code is useless and splits efforts of maintaining the duplicates instead of concentrating on making one best module/code. I'd +1 any such attempt in the future too.\n\nAs for code instability, this work can happen on a branch if we're so worried it will make Solr that unstable. Maybe if it's a big feature it should be developed in a branch anyway. I support Mark's statement - I prefer such big changes to also release on the stable branch - but this is only my opinion, I now some might argue that it's worth doing on the unstable branch only. A branch lets us stabilize the change before they are merged to trunk and we can then decide if they're worth porting to the stable branch as well or not. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13881906",
            "date": "2014-01-25T14:33:44+0000",
            "content": "+1 for less code duplication.  This is good work, Tomas.  Let's get it on trunk and let it bake. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13887491",
            "date": "2014-01-31T05:30:52+0000",
            "content": "I'm uploading a patch with some changes. I added a test for SolrSearcherFacrtory. There are still some use cases missing:\nnewReaderCreator: My understanding is that, during a core reload, Solr uses the reader from the old core to warm the first searcher of the new core. Right now I'm not doing that after these changes.\nsearchersOnDeck/maxWarmingSearchers is also not implemented. Right now there can be 0 or 1 searcher warming, but no more than that. All searchers except for the first one created are warmed inside the SolrSearcherFactory, and immediately after that \"registered\". the SearcherManager won't try to create more than one Searcher at a time.\nIndexReaderFactory is not implemented\n\nThere are still some tests failing intermittently, I'm looking into that. \nI think I should be able to do a much better job managing the \"realtime searcher\" vs the regular searcher, but I didn't focus on that yet. \nI'm using this github repository: https://github.com/tflobbe/lucene-solr "
        }
    ]
}