{
    "id": "LUCENE-6083",
    "title": "Span containing/contained queries",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "SpanContainingQuery reducing a spans to where it is containing another spans.\nSpanContainedQuery reducing a spans to where it is contained in another spans.",
    "attachments": {
        "LUCENE-6083.patch": "https://issues.apache.org/jira/secure/attachment/12684321/LUCENE-6083.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14229267",
            "author": "Paul Elschot",
            "date": "2014-11-30T22:59:59+0000",
            "content": "This is for use with the positional joins module LUCENE-5627, but it is general enough for core. "
        },
        {
            "id": "comment-14233159",
            "author": "Jason Gerlowski",
            "date": "2014-12-03T16:21:56+0000",
            "content": "Hi Paul.\n\nLooks like a neat addition.  I have a few comments/suggestions.  Please take with a grain of salt.\n\n1) There's some logic in ContainSpans that assigns one of the provided Spans to a 'sourceSpans' instance variable.  Calls to ContainSpans.start(), .end(), .doc(), etc. then just call the associated method on 'sourceSpans'.  This looks like it might be a good use case for FilterSpans (https://issues.apache.org/jira/browse/LUCENE-5933), which I think is available in trunk and 4x.  Using FilterSpans might help get rid of some of the boilerplate here.\n\n2) It would be nice if there was a way to customize/change what it means for one Span to be \"contained\" in another.  Personally, I agree with the definition of \"containing\" laid out in ContainSpans.toContained(), but I can definitely see how other people might have different ideas of what being \"contained\" means.\n\nDifferent potential semantics include:\n  a) the current behavior: (container.start <= contained.start && contained.end <= container.end)\n  b) no sharing start/end points: (container.start < contained.start && contained.end < container.end)\n  c) spans can be partially-contained/overlapping: ((contained.start > container.start && contained.start < container.end) || (contained.end > container.start && contained.end < container.end))\n\nI think it'd be a good idea to allow support for any of the semantics above.  Letting people choose (or even define) the \"containing\" semantics they want would make your patch even more flexible/powerful!\n\n(a) and (b) above could probably be supported by just adding a boolean option to the constructor for *Query.  If being even more flexible makes sense, (a), (b), and (c) could probably all be supported by moving the ContainSpans.toContained() logic into a separate class that can get passed into *Query as a constructor arg.  This would allow arbitrary \"contained\" semantics, as people can subclass the ContainedSpanMatchFinder (or whatever it would be called.).\n\nThoughts? "
        },
        {
            "id": "comment-14233428",
            "author": "Paul Elschot",
            "date": "2014-12-03T19:48:35+0000",
            "content": "Jason,\n\n1) About FilterSpans: I actually started this from SpanNotQuery, so there may be even more boilerplate to get rid of.\n\n2) b) can also be had by manipulating one of the input spans, and SpanNotQuery allows passing pre/post offsets to be added before the comparisons. Maybe it is better to allow some offsets like SpanNotQuery.\n2) c), or something close that can be had now by using SpanNearQuery, and negative pre/post offsets also go in this direction.\nContainedSpanMatchFinder would also work.\nI'm not sure in which direction to generalize.\n\nIn the current patch the toContained() and toContaining() methods only use skipTo() on one of the input spans. It is more efficient to also use skipTo() on the other one, so I'll add that first. "
        },
        {
            "id": "comment-14233523",
            "author": "Paul Elschot",
            "date": "2014-12-03T21:11:07+0000",
            "content": "Skip on both container spans and contained spans "
        },
        {
            "id": "comment-14394415",
            "author": "Paul Elschot",
            "date": "2015-04-03T13:22:03+0000",
            "content": "Patch of 3 April 2015. \nThis introduces a package private class ConjunctionSpans as a common superclass for NearSpans and ContainSpans, that also does the basic work for two phase doc id iteration.\n\nThe -1 and Integer.MAX_VALUE positions have a special meaning now, so adding offsets would have added some complexity, and I avoided that for now.\n "
        },
        {
            "id": "comment-14394418",
            "author": "Robert Muir",
            "date": "2015-04-03T13:27:14+0000",
            "content": "I'll take a look Paul, thanks. I like the idea of factoring out the ConjunctionSpans. \n\nOne idea: not really any logic is left in NearSpans after the patch. Maybe we should remove the abstraction and just store slop/query in Ordered/UnOrdered? "
        },
        {
            "id": "comment-14394672",
            "author": "Paul Elschot",
            "date": "2015-04-03T16:47:12+0000",
            "content": "not really any logic is left in NearSpans after the patch. Maybe we should remove the abstraction and just store slop/query in Ordered/UnOrdered?\n\nIn case that improves performance or might reduce future maintenance, then yes.\nOtherwise the NearSpans here nicely shows what it is: a conjunction of spans for a query with an allowed slop. "
        },
        {
            "id": "comment-14395689",
            "author": "Paul Elschot",
            "date": "2015-04-04T11:00:19+0000",
            "content": "Patch of 4 April 2015. Resolves conflict after LUCENE-6388.\n\nAside: in NearSpans*Ordered int lastEnd was removed, but it is still mentioned in a few comments. "
        },
        {
            "id": "comment-14395917",
            "author": "Paul Elschot",
            "date": "2015-04-04T20:15:37+0000",
            "content": "The patch of 4 April 2015 has unintended recursion between nextDoc() and toMatchDoc() in ContainSpans: toMatchDoc() there should call conjunction.nextDoc() instead. "
        },
        {
            "id": "comment-14396374",
            "author": "Robert Muir",
            "date": "2015-04-05T20:12:26+0000",
            "content": "In SpanContainQuery.prepareConjunction I think the second null check should be:\n\n\n    if (containedSpans == null) {\n      return null;\n    }\n\n\n\nI'm having a tough time understanding the difference between SpanContainedQuery(x, y) and SpanContainingQuery(y, x). What am I missing? "
        },
        {
            "id": "comment-14407410",
            "author": "Paul Elschot",
            "date": "2015-04-05T21:17:54+0000",
            "content": "The check for containment is the same.\nThe spans of SpanContained query is reduced to only those contained in the containing spans.\nThe spans of SpanContainingQuery is reduced to only those containing the contained spans.\n\nThe constructor arguments to both queries have the same order (container, contained), so I avoided using (x, y) and (y, x) above.\n\nI'll try and get my head around the defer trick in LUCENE-6393   "
        },
        {
            "id": "comment-14440880",
            "author": "Robert Muir",
            "date": "2015-04-06T00:38:42+0000",
            "content": "\nThe check for containment is the same.\nThe spans of SpanContained query is reduced to only those contained in the containing spans.\nThe spans of SpanContainingQuery is reduced to only those containing the contained spans.\n\nThe constructor arguments to both queries have the same order (container, contained), so I avoided using (x, y) and (y, x) above.\n\nOK, I'm just wondering if we need both ways to specify it. If we really do, could one just be a sugar implementation that works via Query.rewrite()?\n\nI'll try and get my head around the defer trick in LUCENE-6393 \n\nYeah the sneaky part is TermSpans. it doesnt implement the two-phase api (returns null). We might want to change this for consistency, just to make this stuff easier to reason about.\n\nBut today if we are intersecting SpanFirstQuery(SpanTermQuery(\"foo\"), 20) with a filter, we don't want the SpanFirstQuery logic to read any positions during the conjunction logic, until absolutely needed when matches() is called. This is safe because SpanPositionCheck(X) is always a subset of X, so we can just use X as our approximation. "
        },
        {
            "id": "comment-14481173",
            "author": "Paul Elschot",
            "date": "2015-04-06T12:32:40+0000",
            "content": "I'm just wondering if we need both ways to specify it. If we really do, could one just be a sugar implementation that works via Query.rewrite()?\n\nThat can be done by merging SpanContainingQuery and SpanContainedQuery into SpanContainQuery and adding a flag to the constructor.\nMerging the java code is no problem, but merging the javadocs is not going to be nice I think. "
        },
        {
            "id": "comment-14481177",
            "author": "Paul Elschot",
            "date": "2015-04-06T12:40:11+0000",
            "content": "Patch of 6 April 2015. Compared to the previous patch this:\n\n\n\tmoves the toMatchDoc() method from ContainSpans to ConjunctionSpans, and removes the recursion with nextDoc(),\n\tmoves boost setting to SpanContainQuery class only (prepare a little for query immutability),\n\timproves the constructor of ContainSpans to have a sourceSpans argument instead of a flag indicating which of the two spans to use for start/end positions and payloads,\n\tuses FilterSpans from LUCENE-6393.\n\n "
        },
        {
            "id": "comment-14483707",
            "author": "Paul Elschot",
            "date": "2015-04-07T18:26:45+0000",
            "content": "Patch of 7 April 2015. Compared to previous patch this removes toMatchDoc() in NearSpansOrdered and NearSpansUnordered. "
        },
        {
            "id": "comment-14517078",
            "author": "Robert Muir",
            "date": "2015-04-28T14:16:42+0000",
            "content": "Updated patch to trunk. I added a few tests and tried my hand at some renames:\n\nThe two queries are currently named SpanWithinQuery vs SpanContainingQuery in the patch. I think this makes it easier to differentiate (vs Containing/Contained).\n\nI also changed parameters to be \"big\" and \"little\" instead of contained and containing. "
        },
        {
            "id": "comment-14517828",
            "author": "Paul Elschot",
            "date": "2015-04-28T19:21:53+0000",
            "content": "Patch of 28 April 2015.\n\nThis starts from Robert's patch, removes getContainer/getContained methods in SpanContainQuery, and renames the arguments to the SpanWithinQuery constructor from container/contained to big/little. "
        },
        {
            "id": "comment-14517850",
            "author": "Robert Muir",
            "date": "2015-04-28T19:29:27+0000",
            "content": "Thanks Paul, I think this one is ready to go. I'll wait a bit before committing. "
        },
        {
            "id": "comment-14519173",
            "author": "ASF subversion and git services",
            "date": "2015-04-29T11:42:13+0000",
            "content": "Commit 1676716 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1676716 ]\n\nLUCENE-6083: SpanWithinQuery and SpanContainingQuery "
        },
        {
            "id": "comment-14519190",
            "author": "ASF subversion and git services",
            "date": "2015-04-29T11:58:39+0000",
            "content": "Commit 1676723 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1676723 ]\n\nLUCENE-6083: SpanWithinQuery and SpanContainingQuery "
        },
        {
            "id": "comment-14519217",
            "author": "Robert Muir",
            "date": "2015-04-29T12:06:50+0000",
            "content": "Paul, thank you for the work here!  "
        }
    ]
}