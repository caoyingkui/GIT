{
    "id": "LUCENE-170",
    "title": "IndexWriter problem when create set to false",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Upon creating a new IndexWriter with a String, Analyzer and false as the \nboolean, if the indexes have never been written, then a FileNotFoundException \nis thrown.\nI would have expected it to have created the files a fresh if there are none, \notherwise use the existing files.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-03-04T21:23:39+0000",
            "content": "I don't think this is a bug (unless I misunderstood the problem). If an IndexWriter is \nsupposed to use an existing index, you create the IndexWriter with \"false\". Now if \nthere's a typo in the String argument for some reason (e.g. user-supplied directory \nname) it would be very confusing if there was no Exception. \n\nSo I think this bug report can be closed. \n ",
            "author": "Daniel Naber",
            "id": "comment-12321474"
        },
        {
            "date": "2004-03-04T22:03:40+0000",
            "content": "Thanks for your input Daniel.\n\nI'd like to use a constructor where I don't care if the indexes have been \nwritten before or not, but that if they have been written before then I can \nspecify not to start with a fresh slate.  E.g.\n\nIn my code, I'd like to write something like:\nIndexWriter writer = new IndexWriter( indexpath, new StandardAnalyzer(), \nfalse );\n\nInstead, because the files may not yet have been written, I have to do \nsomething like:\n\nIndexWriter writer = null;\ntry\n{\n    writer = new IndexWriter( indexpath, new StandardAnalyzer(), false );\n}\ncatch( FileNotFoundException e )\n{\n    writer = new IndexWriter( indexpath, new StandardAnalyzer(), true );\n}\n\nThis is not an elegant way to write code.  Therefore, I suggest that either an \nadditional constructor is written to avoid the throwing of exceptions when the \nrecovery is so obvious, or rectify the current constructor. ",
            "author": "Nick West",
            "id": "comment-12321475"
        },
        {
            "date": "2004-03-04T22:31:28+0000",
            "content": "Yes, the current behaviour is fine, it just needs to be documented in\nIndexWriter's Javadocs.  I'd rather get an exception, than have Lucene create an\nindex in some weird place.\nIt is easy to check for existence of the directory before calling IndexWriter,\nand 'mkdirs()-ing' it.\n\nStack trace, for the record:\n\nException in thread \"main\" java.io.IOException: /tmp/wrong not a directory\n        at org.apache.lucene.store.FSDirectory.<init>(FSDirectory.java:154)\n        at org.apache.lucene.store.FSDirectory.getDirectory(FSDirectory.java:132)\n        at org.apache.lucene.store.FSDirectory.getDirectory(FSDirectory.java:113)\n        at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:151)\n        at IWTest.main(IWTest.java:8)\n\n\nYou don't need and should not be catching the exception.  Instead, proactively\nand explicitly check for the existence of the directory.  You could even inline\nthe check in the call to IndexWriter constructor:\n\n.... = new IW(path, analyzer, !file.exists()) ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321476"
        },
        {
            "date": "2004-03-04T22:34:25+0000",
            "content": "But the directory did exist, just the files that don't! ",
            "author": "Nick West",
            "id": "comment-12321477"
        },
        {
            "date": "2004-03-04T22:37:50+0000",
            "content": "You could then use IndexReader to check, and use that in IndexWriter ctor:\nhttp://jakarta.apache.org/lucene/docs/api/org/apache/lucene/index/IndexReader.html#indexExists(java.lang.String)\n\nIf that doesn't do what you need, please re-open the bug. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321478"
        },
        {
            "date": "2004-03-04T22:43:00+0000",
            "content": "Sorry, mabybe I'm not making myself clear.\n\nIf I have a directory \"C:indexes\" and have configured this to contain my \nindex files, then I'd expect the constructor to create the files there if not \nalready in existance, or at least an option to enforce this.  I would hope \nthat in the initial setup the same constructor would be used as that for \nfuture constructions.\nI agree that if the directory does not exist, then yes a FileNotFoundException \nshould be thrown, but as it's the actual index files I don't see the problem \nwith automating the creation.  If there is a logical reason for throwing this \nexception, then I'll be happy, if not, then I see the most logical answer to \ncreate the files Lucene needs to unless the actual directory is wrong.\n\nDoes that kind of make any more sense? ",
            "author": "Nick West",
            "id": "comment-12321479"
        },
        {
            "date": "2004-03-05T01:13:40+0000",
            "content": "I read this as a feature request.\n\nYou'd like a \"smart\" constructor that creates the index if it doesn't exist. \nSuch constructors could easily be written:\n\npublic IndexWriter(String d, Analyzer a) throws IOException {\n  this(d, a, !IndexReader.indexExists(d));\n}\n\npublic IndexWriter(File d, Analyzer a) throws IOException {\n  this(d, a, !IndexReader.indexExists(d));\n}\n\npublic IndexWriter(Directory d, Analyzer a) throws IOException {\n  this(d, a, !IndexReader.indexExists(d));\n}\n\nIs this what you're after?  Is it worth adding these when they're so simple that\ndoing without them doesn't even require another line of code?  Perhaps. ",
            "author": "cutting@apache.org",
            "id": "comment-12321480"
        },
        {
            "date": "2004-03-05T01:38:06+0000",
            "content": "Thank you Doug, you've almost hit the nail on the head, and I say almost \nbecause the boolean currently passed in does something subtly different to \nwhat the name suggests.  May I suggest the name is changed to reflect what it \nactually does \"refresh\".  I say this because the method is implemented as \nfollows:\n\npublic IndexWriter(String d, Analyzer a, boolean create) throws IOException {\n    if( create )\n    {\n        // if the directory doesn't exist, throw an FileNotFoundException\n        // if the files are there, delete them and start again\n    }\n    else\n    {\n        // if the directory doesn't exist, throw an FileNotFoundException\n        // if the files arn't there, then throw an exception, otherwise work \nwith them\n    }\n    ...\n}\n\n... Other constructors to follow suite\n\n\nWhat I'm suggesting is:\n\n\n\npublic IndexWriter(String d, Analyzer a, boolean refresh) throws IOException {\n    if( refresh )\n    {        // if the directory doesn't exist, throw an FileNotFoundException        // if the files are there, delete them and start again    }\n    else\n    {\n        // if the directory doesn't exist, throw an FileNotFoundException\n        // if the files arn't there, then fine, start a fresh\n    }\n    ...\n}\n\n... Other constructors to follow suite ",
            "author": "Nick West",
            "id": "comment-12321481"
        },
        {
            "date": "2004-03-05T01:52:39+0000",
            "content": "I don't think that is a correct description of current behaviour.  Perhaps this\nis the source of the confusion.  Current behaviour should be:\n\npublic IndexWriter(String d, Analyzer a, boolean create) throws IOException {\n    if (create) \n{\n      // if the directory doesn't exist, create it\n      // if the files are there, delete them and start again\n    }\n else \n{\n      // if the directory doesn't exist, or the files are not there,\n      // throw a FileNotFoundException, else work with what's there\n    }\n }\n\nIs that not what you're seeing?\n\nAlso, for back-compatibility reasons, we cannot change the semantics of\nIndexWriter(String,boolean). ",
            "author": "cutting@apache.org",
            "id": "comment-12321482"
        },
        {
            "date": "2004-03-05T02:06:08+0000",
            "content": "My understanding is now clear, although was not a million miles away before.  \nMaybe the javadocs can be improved to explain the 'create' flag further?\n\nMy point to this is that surely a good java class would at least have an \noption to not care whether the files are there or not, but to just work, and \nthus my beliefe of this as a bug.  Therefore as you have now clarified that \nthis was it's purpose, various solutions could be applied, however as you \npoint out the options are vastly limited for backward compatibility reasons.  \nIf my point can now be understood and the priciples agreed, then I'll gladly \ncome up with some solutions for you if you'd like me to? ",
            "author": "Nick West",
            "id": "comment-12321483"
        },
        {
            "date": "2004-03-05T02:13:19+0000",
            "content": "Please feel free to propose javadoc changes, or additional constructors\n(although I think I already did the latter, above).\n\nIf you wish to propose changes, make a patch file with 'cvs diff -Nu' and open a\nnew bug, attaching your patch. ",
            "author": "cutting@apache.org",
            "id": "comment-12321484"
        },
        {
            "date": "2004-03-05T02:47:47+0000",
            "content": "I'll gladly add some bits here for you Lucene experts to consider.  If you \nchose to use it, then great otherwise that's fine, I just wanted to offer you \nmy two pennies worth \n\nJavaDoc changes to explain the 'create' field:\n------------------------------------------------------------------------------\nConstructs an IndexWriter for the index in d. Text will be analyzed with a. If \ncreate is true, then a new, empty index will be created in d, replacing the \nindex already there, if any.  If create is false, then the existing files will \nbe used.\nThrows FileNotFoundException if the directory does not exist, or if create is \nfalse and the files do not exist.\n------------------------------------------------------------------------------\n\n\nDoug, the suggestions you've made look great to me.  Obviously the JavaDocs \nwould need to explain the difference between these new constructors and the \ncurrent ones.  Alternatively, depricate the current constructors and create \nthree new ones with a constant as the third value.  The constant could be an \ninternal static class with the three current options.  This way you're leaving \nyourself in a good possition to expand upon these options if the need arrises \nin the future.  E.g.\n\n\n/**\n *@depricated please use IndexWriter( String, Analyzer, CreateOption ) instead.\n */\npublic IndexWriter( String path, Analyzer a, boolean create )\n{\n   this( path, a, (create ? CREATE_DATA_FROM_SCRATCH : USE_CURRENT_DATA) );\n}\n\n/** JavaDocs to explain */\npublic IndexWriter( String path, Analyzer a, CreateOption createOption )\n{\n  createOption.runRules();\n  .. rest of work ....\n}\n\n/** JavaDocs to explain further */\npublic static final CreateOption CREATE_DATA_FROM_SCRATCH = new CreateOptions( \n1 );\n/** JavaDocs to explain further */\npublic static final CreateOption USE_CURRENT_DATA = new CreateOptions( 2 );\n/** JavaDocs to explain further */\npublic static final CreateOption USE_CURRENT_OR_CREATE = new CreateOptions( \n3 );\n\n// internal class\npublic static class CreateOption\n{\n    private int option;\n    public CreateOption( int option )\n    {\n        this.option = option;\n    }\n\n\n    public void runRules()\n        throws IOException\n    {\n        switch( option )\n        {\n            case 1 : // if the directory doesn't exist, create it\n                     // if the files are there, delete them and start again\n                     break;\n\n            case 2 : // if the directory doesn't exist, or the files are not\n                     // there, throw a FileNotFoundException, else work with\n                     // what's there\n                     break;\n\n            case 3 : // If directry doesn't exist, throw FileNotFoundException\n                     // If files don't exist, then create new files, \n                     // otherwise use existing\n                     break;\n            default : throw new IOException( \"Create option not known.\" );\n        }\n    }\n}\n\nPlease note : I have not compiled this source.\n\nI hope this is of some use to you guys \n\nRegards,\n\nNick. ",
            "author": "Nick West",
            "id": "comment-12321485"
        },
        {
            "date": "2004-03-05T03:02:46+0000",
            "content": "Your proposed javadoc is not correct.  FileNotFoundException is only thrown when\ncreate is false.  When create is true the directory will be created.\n\nI'm leaving this as WONTFIX unless others weigh in. ",
            "author": "cutting@apache.org",
            "id": "comment-12321486"
        }
    ]
}