{
    "id": "SOLR-4774",
    "title": "Solr support Lucene Facets",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Since facets are now included in Lucene... \n\n1. Solr schema taxonomy glue\n2. Switch query results to use this glue with a new param like facet.lucene=true?\n\nSeems like a great enhancement !",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Krupansky",
            "id": "comment-13664644",
            "date": "2013-05-22T22:59:26+0000",
            "content": "Can a committer please change this from a \"Bug\" to an \"Improvement\" or \"New Feature\"? Thanks. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13664662",
            "date": "2013-05-22T23:16:21+0000",
            "content": "There is probably a lot of good stuff in the lucene faceting module that could be leveraged in Solr, but I think there are two extremelye important factors to keep in mind before anyone tackles trying to integrate it with solr...\n\n1) it's important to understand why/how the lucene faceting module came into existence as an independent module instead of just wholesale refactoring the existing Solr faceting code into a new directory.\n\nnamely the question of caching and how faceting code integrates with the schema.\n\nAs i commented in the thread which lead to the creation of the lucene faceting module (LUCENE-3079)...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201105.mbox/%3Calpine.DEB.2.00.1105061307200.5457@bester%3E\n\n\nTo look at \"faceting\" as a concrete example, there are big the reasons faceting works so well in Solr: Solr has total control over the index, knows exactly when the index has changed to rebuild caches, has a strict schema so it can make sense of field types and pick faceting algos accordingly, has multi-phase distributed search approach to get exact counts efficiently across multiple shards, etc... (and there are still a lot of additional enhancements and improvements that can be made to take even more advantage of knowledge solr has because it \"owns\" the index that we no one has had time to tackle)\n\nI find it really hard to picture a way that this code could be refactored into a reusable module in such a way that it could have an API that would be easily usable outside of Solr \u2013 and when i do get a glimmer of an inkling of what that might look like, that vision scares me because of how that API might then \"hobble\" Solr's ability to leverage it's total control of the underlying index to add additional performance/features. \n\n\n2) Yonik hit the nail on the head in another thread (that i can't find now) which asked about integrating lucene faceting in solr: it's important to think about new Solr functionality from the perspective of the user, not just \"here's a lucene module that looks cool, lets drop it into solr.\"\n\nThe approach should be to say \"by configuring W and then indexing documents X, and specifying Y at request time, results Z should come out\" and then the values of W,X,Y and Z will help us understand what needs to be done under the hood.  That may be some simple glue code on top of the facet module, or it may mean refactoring/enhancing the facet module APIs to let Solr inject info based on the schema/request, or perhaps even some completely new algorithms that are very Solr specific because of the data available, and distributed processing, etc....  The focus needs to be on what the value add and API are for the users, not what jars are used where "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13664750",
            "date": "2013-05-23T00:45:50+0000",
            "content": "Some blog post about the lucene faceting module which may highlight some of the potential benefits/pitfalls: \n\nhttp://blog.mikemccandless.com/2012/12/fun-with-lucenes-faceted-search-module.html\nhttp://blog.mikemccandless.com/2013/02/drill-sideways-faceting-with-lucene.html\nhttp://blog.mikemccandless.com/2013/05/dynamic-faceting-with-lucene.html "
        },
        {
            "author": "David Smiley",
            "id": "comment-13667448",
            "date": "2013-05-27T03:25:32+0000",
            "content": "The addition of hierarchical faceting is certainly a new feature users would appreciate.\n\nI wonder how the performance compares to Solr's approach for equivalent features, e.g. typical field-value faceting.  The Lucene faceting module does more index time preparation to make faceting faster than doing it dynamically, and Solr's approach is roughly equivalent to Lucene's notion of dynamic faceting.  I learned these things thanks to Michael McCandless's blog.  But who knows how things will play out in practice. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13702850",
            "date": "2013-07-09T03:43:57+0000",
            "content": "Maybe Hoss was referring to this thread: http://search-lucene.com/m/Xqt9l2C5C8x1\n\nThe focus needs to be on what the value add and API are for the users, not what jars are used where\n\nYes, though one could also argue the user will win if more developers are focused on making one faceting impl better than if half worked on one, and half on the other impl and they never competed or peaked at each other's code... "
        }
    ]
}