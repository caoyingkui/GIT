{
    "id": "LUCENE-3753",
    "title": "Restructure the Lucene build system",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/build"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Split out separate core/, test-framework/, and tools/ modules, each with its own build.xml, under the lucene/ directory, similar to the Solr restructuring done in SOLR-2452.",
    "attachments": {
        "LUCENE-3753.patch": "https://issues.apache.org/jira/secure/attachment/12513369/LUCENE-3753.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-05T21:22:38+0000",
            "content": "Patch implementing the idea, along with a script to fix existing patches against the old structure to be against the new structure.\n\nRun this svn move script before applying the patch:\n\n\nsvn mv --parents lucene/src/java lucene/core/src/java\nsvn mv --parents lucene/src/test lucene/core/src/test\nsvn mv --parents lucene/src/resources lucene/core/src/resources\nsvn mv lucene/src/site lucene/site\nsvn mv --parents lucene/src/test-framework/java lucene/test-framework/src/java\nsvn mv --parents lucene/src/test-framework/resources lucene/test-framework/src/resources\nsvn mv --parents lucene/src/tools/java lucene/tools/src/java\nsvn mv --parents lucene/src/tools/javadoc lucene/tools/javadoc\nsvn mv --parents lucene/src/tools/prettify lucene/tools/prettify\nsvn rm lucene/src\nsvn mv --parents dev-tools/maven/lucene/src/pom.xml.template dev-tools/maven/lucene/core/pom.xml.template\nsvn mv --parents dev-tools/maven/lucene/src/test-framework/pom.xml.template dev-tools/maven/lucene/test-framework/pom.xml.template\nsvn rm dev-tools/maven/lucene/src\n\n\n\nI think this is ready to go. ",
            "author": "Steve Rowe",
            "id": "comment-13200905"
        },
        {
            "date": "2012-02-06T14:42:58+0000",
            "content": "Can't say I object to the patch if it has a script to fix old patches, will go back to 3x too, and if it will speed up the build system?\n\n(Note: I didn't dig into LUCENE-3754, but its my impression that it would?)\n\nMy only suggestions (more like personal requests actually):\n\n\tcan 'ant test-core' be an alias for 'test' inside lucene/core? And same with javadocs-core? It might work\n  already in the patch (I didnt test), but I noticed this trips me up for solr as well... just used to typing it i guess.\n\tcan we give a heads up to the list first? i know i have a bunch of old checkouts where if i ran 'svn up'\n  i'd have to deal with a hellacious merge conflict, but dumping out to a patch, upgrading that patch with the tool,\n  and then applying that to a new checkout with patch --merge would probably be easier (I'd only have to deal with \n  the \"real\" conflicts then)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13201317"
        },
        {
            "date": "2012-02-06T15:57:39+0000",
            "content": "Can't say I object to the patch if it has a script to fix old patches\n\nYes.\n\nwill go back to 3x too\n\nThat's my plan, yes.\n\nand if it will speed up the build system? (Note: I didn't dig into LUCENE-3754, but its my impression that it would?)\n\nI don't know.  I figured it would be about the same speed, but I'll check to be sure.  (I think ant build-contrib in lucene/ is the right thing to use for this.)  LUCENE-3754 will speed up the Solr build, since it depends on lucene-core jar, but a lot (all?) of the Lucene build depends on un-jarred build outputs, and so won't be affected, AFAIK.\n\ncan 'ant test-core' be an alias for 'test' inside lucene/core? And same with javadocs-core? It might work already in the patch (I didnt test), but I noticed this trips me up for solr as well... just used to typing it i guess.\n\nI'll add them if they don't already work (not sure).\n\ncan we give a heads up to the list first? i know i have a bunch of old checkouts where if i ran 'svn up' i'd have to deal with a hellacious merge conflict, but dumping out to a patch, upgrading that patch with the tool, and then applying that to a new checkout with patch --merge would probably be easier (I'd only have to deal with the \"real\" conflicts then)\n\nYes, I agree a heads-up to the dev list first would be good - I was planning on giving 24 hours notice before committing. ",
            "author": "Steve Rowe",
            "id": "comment-13201356"
        },
        {
            "date": "2012-02-06T16:24:26+0000",
            "content": "I ran ant build-contrib from lucene/, both with and without running ant clean first (the timings below exclude ant clean) - these timings are best of 5 runs each:\n\n\n\n\nant clean?\nPre-patch\nPost-patch\n\n\nYes\n49s\n44s\n\n\nNo\n18s\n19s\n\n\n\n\n\nSo, slightly faster for the from-scratch case, and slightly slower from the already-built case - I think this slight slowdown is okay.\n\nI'll run similar tests from modules/ and solr/ and report back. ",
            "author": "Steve Rowe",
            "id": "comment-13201371"
        },
        {
            "date": "2012-02-06T17:35:23+0000",
            "content": "I ran ant compile-test from modules/ and solr/, both with and without running ant clean from the top level first (the timings below exclude ant clean) - these timings are best of 5 runs each:\n\n\n\n\nfrom modules/\n\n\nant clean?\nPre-patch\nPost-patch\n\n\nYes\n80s\n80s\n\n\nNo\n33s\n33s\n\n\n\n\n\n\n\n\nfrom solr/\n\n\nant clean?\nPre-patch\nPost-patch\n\n\nYes\n155s\n155s\n\n\nNo\n55s\n54s\n\n\n\n\n\nThese are basically unchanged. ",
            "author": "Steve Rowe",
            "id": "comment-13201417"
        },
        {
            "date": "2012-02-06T18:28:45+0000",
            "content": "This version of the patch adds:\n\n\talias targets test-core and javadocs-core to lucene/core/build.xml;\n\talias target javadocs-core to lucene/test-framework/build.xml; and\n\ta new target compile-test to lucene/build.xml, which compiles all modules' non-test and test sources (the existing target build-contrib also builds contribs' jars).\n\n\n\nAlso, I added mkdir ${build.dir} to the javadocs targets in lucene/core/ and lucene/test-framework/, to make sure the target dir for the javadocs jars exists. (This isn't necessary in the current setup because the target dir is lucene/build/, which gets created when ${javadoc.dir} is created by these targets.) ",
            "author": "Steve Rowe",
            "id": "comment-13201450"
        },
        {
            "date": "2012-02-06T20:07:07+0000",
            "content": "Final version of the patch:\n\n\n\tspeeds up ant test from lucene/ by making test-contrib depend on compile-test instead of build-contrib (jars don't need to be built for testing.)\n\tincludes more *.compiled property handling to avoid recompiling lucene-core and lucene-test-framework.\n\n\n\nPost-patch ant compile-test times under lucene/ are now 31s after running ant clean, and 7s when already compiled.  \n\nmodules/ and solr/ timings did not change. ",
            "author": "Steve Rowe",
            "id": "comment-13201530"
        },
        {
            "date": "2012-02-06T20:17:41+0000",
            "content": "\nPost-patch ant compile-test times under lucene/ are now 31s after running ant clean, and 7s when already compiled. \n\nGreat! Thanks for doing this refactoring! ",
            "author": "Robert Muir",
            "id": "comment-13201546"
        },
        {
            "date": "2012-02-06T20:24:36+0000",
            "content": "Steve, are you going to merge running the tests somehow too? I ask because I have a backlog of trying to integrate automatically load-balancing parallel tests; if we had a single test task this would mean one could pattern-scope the tests to be executed and (if not restricted) all of the tests would run in a single balancing scope (Mike pointed out that currently a lot of time is spent on waiting for the last test in each spawned).\n\nJust asking, no obligations to change anything. ",
            "author": "Dawid Weiss",
            "id": "comment-13201553"
        },
        {
            "date": "2012-02-06T20:32:51+0000",
            "content": "Hi Dawid,\n\nSteve, are you going to merge running the tests somehow too?\n\nNo, my patch doesn't do that.  Sounds really cool though.  I think Mike M.'s python test runner does this? ",
            "author": "Steve Rowe",
            "id": "comment-13201558"
        },
        {
            "date": "2012-02-06T20:32:54+0000",
            "content": "\nif we had a single test task this would mean one could pattern-scope the tests to be executed and (if not restricted) all of the tests would run in a single balancing scope (Mike pointed out that currently a lot of time is spent on waiting for the last test in each spawned).\n\nYes, but this doesn't really test any dependencies that different contribs/modules might have right? Or maybe i misunderstand what you are suggesting.\n\nI think Mike's python runner \"cheats\" and makes a huge classpath... sure its faster, but, it loses test coverage because modules could have\nbogus dependencies and we would never know. ",
            "author": "Robert Muir",
            "id": "comment-13201559"
        },
        {
            "date": "2012-02-06T20:54:38+0000",
            "content": "Yes, this is what Mike's python magic does \u2013 puts a fraction of all tests on each slave, then assigns on-demand. I reimplemented this in Java and it works quite nice as it can even consume precomputed statistics to make better estimates. The problem is as always in details (which I won't trouble you with at the moment). Robert is also right that re-running with different parameters/ JVM settings/ classpath will require multiple runs... for a moment I had a hope to neglect this \n\nThe speedups aren't dramatic, especially after Robert worked on the longest tests, so this is not a huge priority. Interestingly, Maven's latest release of surefire also includes an option to do balanced parallel tests (on separate vms). Didn't experiment with it yet. ",
            "author": "Dawid Weiss",
            "id": "comment-13201575"
        },
        {
            "date": "2012-02-06T21:02:19+0000",
            "content": "Maven's latest release of surefire also includes an option to do balanced parallel tests (on separate vms).\n\nI'm not sure that's exactly true?  SUREFIRE-799 includes a discussion of some limitations of the new capabilities. ",
            "author": "Steve Rowe",
            "id": "comment-13201579"
        },
        {
            "date": "2012-02-06T21:04:01+0000",
            "content": "\nThe speedups aren't dramatic, especially after Robert worked on the longest tests, so this is not a huge priority.\n\nWell, from time to time we try to clean up the tests... but i think it only takes a few weeks for us to 'lose' all the benefits.\nI'm not trying to say our tests get crappier, a lot of the reasons for the slowdown is really just more test coverage...!\n\nBasically, I don't think we can view speeding up slow tests as one-off tasks... its gotta be a continuous maintenance thing.\n\nFor this reason, its important to speed up the other parts of the build (like rebuilding jars over and over again \nsuch as this issue), and also to integrate the nice random test framework work etc you did... these are more 'permanent'\nwins.\n\nHowever, I'm just concerned about adopting mike's cheating, because I like the idea of 'ant test' being a total pain\nto catch broken stuff. New modules, etc are added often, the build system is refactored, dependencies upgraded, etc etc,\nand I'm concerned we would somehow screw ourselves up and release stuff with bogus dependencies. ",
            "author": "Robert Muir",
            "id": "comment-13201580"
        },
        {
            "date": "2012-02-06T21:17:47+0000",
            "content": "@Robert. You're right, dependencies (and their order) may screw up things. I was tinkering with an idea that testing could be a multi-pass process, then it would be possible to collect all the \"specs\" in one pass and then run everything in another pass... but it temporarily exceeds my time limits to actually implement this \n\n@Steven. That was my impression from reading the release notes and from looking at the code:\n\nSurefire 2.12 now supports parallel forks, which can also be run\nin runOrder=\"balanced\", which is a nice feature for long-running\ntests.\nAh, I see \u2013 I didn't mean \"balanced\" in the sense of dynamic balancing, the tests are statically assigned, but they do run in separate concurrent slave JVMs and that's still something ",
            "author": "Dawid Weiss",
            "id": "comment-13201600"
        },
        {
            "date": "2012-02-06T21:21:29+0000",
            "content": "I meant to end with a \"?\" \u2013 do you know if my understanding is correct, Steve?  ",
            "author": "Dawid Weiss",
            "id": "comment-13201604"
        },
        {
            "date": "2012-02-06T21:26:43+0000",
            "content": "Nah, just read the docs \u2013 you're right, this is not multiple-test-per-jvm allocation. I thought it was. Interestingly I did a small surefire replacement for that ant task (with a few incompatibilities) that does run multiple jvms for testing. If you want to check it out and provide feedback, it'd be awesome. An example of use is in this POM:\n\nhttps://github.com/carrotsearch/randomizedtesting/blob/master/integration-maven/junit4-maven-plugin-tests/src/it/01-basic-test/pom.xml\n ",
            "author": "Dawid Weiss",
            "id": "comment-13201613"
        },
        {
            "date": "2012-02-06T21:44:48+0000",
            "content": "Interestingly I did a small surefire replacement for that ant task (with a few incompatibilities) that does run multiple jvms for testing. If you want to check it out and provide feedback, it'd be awesome.\n\nSure, I'll take a look later this week. ",
            "author": "Steve Rowe",
            "id": "comment-13201629"
        },
        {
            "date": "2012-02-06T22:08:59+0000",
            "content": "+1 to commit this change to the build system! That was really needed! ",
            "author": "Uwe Schindler",
            "id": "comment-13201668"
        },
        {
            "date": "2012-02-07T20:00:36+0000",
            "content": "Committed to trunk.\n\nWorking on backport to branch_3x now. ",
            "author": "Steve Rowe",
            "id": "comment-13202709"
        },
        {
            "date": "2012-02-08T01:50:35+0000",
            "content": "Committed to branch_3x.\n\nNow working on fixing broken target generate-maven-artifacts under lucene/ on trunk. ",
            "author": "Steve Rowe",
            "id": "comment-13203123"
        },
        {
            "date": "2012-02-08T02:30:54+0000",
            "content": "Now working on fixing broken target generate-maven-artifacts under lucene/ on trunk.\n\nThis is now fixed - I committed the fix to branch_3x as well, where for some reason generate-maven-artifacts was already functional without the fix....\n\nI'll leave this issue open for a day or two in case more problems crop up. ",
            "author": "Steve Rowe",
            "id": "comment-13203176"
        },
        {
            "date": "2012-02-08T21:41:47+0000",
            "content": "\nNow working on fixing broken target generate-maven-artifacts under lucene/ on trunk.\n\nThis is now fixed - I committed the fix to branch_3x as well, where for some reason generate-maven-artifacts was already functional without the fix....\n\nI understand now why generate-maven-artifacts was functional in branch_3x before I committed the backport: as a result of svn move'ing files, the original directories are retained until svn commit is done.\n\nI've seen this enough times now that I should remember: committing to subversion can change build behavior. ",
            "author": "Steve Rowe",
            "id": "comment-13204024"
        },
        {
            "date": "2012-02-09T17:57:15+0000",
            "content": "The Jenkins builds look stable now.\n\nAny additional problems can be addressed in new issues. ",
            "author": "Steve Rowe",
            "id": "comment-13204691"
        },
        {
            "date": "2012-02-11T09:26:04+0000",
            "content": "Steven: There is still a problem with the clover reports: The directories for generating the reports don't correctly identify \"Tests\", \"Test Results\" and the \"Class files\". The ant task's \"generate-clover-reports\" seems to use the wrong paths. It looks like it only catches some tests, most test classes are listed under\n\nWe need maybe a more \"universal\" fileset for <testsources/> and <testresults/>. Maybe use the first one for contrib somehow globally:\n\n\n<fileset dir=\"contrib\" id=\"clover.contrib.test.src.files\">\n <include name=\"**/test/**/*.java\"/>\n</fileset>\n\n\n\n(e.g. using dir=\".\"). Same for test-results, this is also wrong:\n\n\n<fileset dir=\"${build.dir}\" id=\"clover.test.result.files\">\n <include name=\"**/test/TEST-*.xml\" />\n <!-- do not include BW tests -->\n <exclude name=\"backwards/**\"/>\n</fileset>\n\n\n\nAffects both 3.x and trunk. I don't want to fix it, you know better where al those different build dirs could live.\n\nAh, here are the reports: https://builds.apache.org/job/Lucene-trunk/clover/ (you can see the bugs when you look on the left frame and switch between the tabs \"Classes\", \"Tests\", \"Results\". Most tests are now listed at \"Classes\", which is wrong. ",
            "author": "Uwe Schindler",
            "id": "comment-13206065"
        },
        {
            "date": "2012-02-11T15:43:59+0000",
            "content": "Hi Uwe, I'm looking into it. ",
            "author": "Steve Rowe",
            "id": "comment-13206153"
        },
        {
            "date": "2012-02-12T17:06:14+0000",
            "content": "I committed clover test source pattern changes to trunk and branch_3x, but I haven't been able to access Jenkins since (service unavailable/proxy errors), so I'm not sure if they were effective.  I'll keep checking. ",
            "author": "Steve Rowe",
            "id": "comment-13206451"
        }
    ]
}