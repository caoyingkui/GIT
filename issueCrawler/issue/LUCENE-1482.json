{
    "id": "LUCENE-1482",
    "title": "Replace infoSteram by a logging framework (SLF4J)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Lucene makes use of infoStream to output messages in its indexing code only. For debugging purposes, when the search application is run on the customer side, getting messages from other code flows, like search, query parsing, analysis etc can be extremely useful.\nThere are two main problems with infoStream today:\n1. It is owned by IndexWriter, so if I want to add logging capabilities to other classes I need to either expose an API or propagate infoStream to all classes (see for example DocumentsWriter, which receives its infoStream instance from IndexWriter).\n2. I can either turn debugging on or off, for the entire code.\n\nIntroducing a logging framework can allow each class to control its logging independently, and more importantly, allows the application to turn on logging for only specific areas in the code (i.e., org.apache.lucene.index.*).\n\nI've investigated SLF4J (stands for Simple Logging Facade for Java) which is, as it names states, a facade over different logging frameworks. As such, you can include the slf4j.jar in your application, and it recognizes at deploy time what is the actual logging framework you'd like to use. SLF4J comes with several adapters for Java logging, Log4j and others. If you know your application uses Java logging, simply drop slf4j.jar and slf4j-jdk14.jar in your classpath, and your logging statements will use Java logging underneath the covers.\n\nThis makes the logging code very simple. For a class A the logger will be instantiated like this:\npublic class A {\n  private static final logger = LoggerFactory.getLogger(A.class);\n}\n\nAnd will later be used like this:\npublic class A {\n  private static final logger = LoggerFactory.getLogger(A.class);\n\n  public void foo() {\n    if (logger.isDebugEnabled()) \n{\n      logger.debug(\"message\");\n    }\n  }\n}\n\nThat's all !\n\nChecking for isDebugEnabled is very quick, at least using the JDK14 adapter (but I assume it's fast also over other logging frameworks).\n\nThe important thing is, every class controls its own logger. Not all classes have to output logging messages, and we can improve Lucene's logging gradually, w/o changing the API, by adding more logging messages to interesting classes.\n\nI will submit a patch shortly",
    "attachments": {
        "slf4j-nop-1.5.6.jar": "https://issues.apache.org/jira/secure/attachment/12395633/slf4j-nop-1.5.6.jar",
        "slf4j-api-1.5.6.jar": "https://issues.apache.org/jira/secure/attachment/12395632/slf4j-api-1.5.6.jar",
        "LUCENE-1482.patch": "https://issues.apache.org/jira/secure/attachment/12395646/LUCENE-1482.patch",
        "LUCENE-1482-2.patch": "https://issues.apache.org/jira/secure/attachment/12395719/LUCENE-1482-2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-12-08T14:24:39+0000",
            "content": "This patch covers:\n\n\tUsing SLF4J in all the classes that used infoStream\n\tA test which uses the JDK14 adapter to make sure it works, as well as fixing few tests which relied on some messages\n\tDeprecation of setInfoStream(), getInfoStream() etc. in several classes who exposed this API.\n\n\n\nFew notes:\n\n\tAs in many customer environments I know of the INFO level is usually turned on, and we were forbidden to output any message in the INFO level, unless it's really INFO, WARNING or SEVERE, I assumed Lucene logging messages should be in the DEBUG level (which is one less than TRACE).\n\n\n\n\n\tI wasn't sure what to do with the set/get infoStream methods, so I just deprecated them and do nothing (i.e., setInfoStream does nothing and getInfoStream always returns a null).\nNot sure how's that align with Lucene's back-compat policy, but on the other hand I didn't think I should keep both infoStream and SLF4J logging in the code.\n\n\n\n\n\tShould I attach the slf4j jars separately?\n\n\n\n\n\tI didn't go as far as measuring performance because:\n1. The code uses isDebugEnabled everywhere, which is at least judging by the JDK14 adapter very fast (just checks a member on the actual logger instance) and is almost equivalent to infoStream != null check.\n2. It really depends on the adapter that's being used. I used JDK14, but perhaps some other adapter will perform worse on these calls, although I expect these calls to be executed quickly, if not even being inlined by the compiler.\n\n ",
            "author": "Shai Erera",
            "id": "comment-12654426"
        },
        {
            "date": "2008-12-08T19:44:12+0000",
            "content": "> Should I attach the slf4j jars separately?\n\nIf we go with SLF4J, we'd want to include the -api jar in Lucene for sure, along with a single implementation.  My vote would be for the -nop implementation.  Then, folks who want logging can include the implementation they like. ",
            "author": "Doug Cutting",
            "id": "comment-12654545"
        },
        {
            "date": "2008-12-09T11:50:26+0000",
            "content": "Thanks Doug,\n\nI've replaced the JDK14 jar with the NOP jar and deleted the logging test I added (since NOP does not log anything). ",
            "author": "Shai Erera",
            "id": "comment-12654772"
        },
        {
            "date": "2008-12-09T13:11:14+0000",
            "content": "Forgot to clean up some code in tests which made use of JDK logging. ",
            "author": "Shai Erera",
            "id": "comment-12654792"
        },
        {
            "date": "2008-12-09T18:15:33+0000",
            "content": "safeDebugMsg is protected in a public class, which means it will appear in the javadoc, which it should not.  Also, logging the thread ID should be done by the logging system, not by Lucene.  So that method should just be removed, no?\n\nAlso, you've added braces to all of the log statements.  This is in conformance with our style guidelines, but I prefer that logging add a minimum of vertical space, so that more real logic is visible at once.  I suggest you not make this style change in this patch, but propose it separately, if at all. ",
            "author": "Doug Cutting",
            "id": "comment-12654875"
        },
        {
            "date": "2008-12-10T06:48:46+0000",
            "content": "I kept safeDebugMsg because it was used by a class which extended IndexWriter and relied on that method to be called. However, I fixed the class by overriding testPoint instead. So I can now remove safeDebugMsg.\n\nAs for the output format, I agree that it should be handled by the logging system, but wanted to confirm that with other members before I change it. I'm glad that you agree to that too.\n\nAttached is a new patch which removes the method. ",
            "author": "Shai Erera",
            "id": "comment-12655116"
        },
        {
            "date": "2008-12-14T12:15:08+0000",
            "content": "Is there anything else I can do in order to help drive this issue forward? ",
            "author": "Shai Erera",
            "id": "comment-12656382"
        },
        {
            "date": "2008-12-15T20:29:18+0000",
            "content": "In the mail thread, Yonik said (http://lucene.markmail.org/message/j3r53azx2tmljijg?q=Java+Logging+in+Lucene):\n\nI'm leery of going down this logging road because people may add\nlogging statements in inappropriate places, believing that\nisLoggable() is about the same as infoStream != null\n\nThey seem roughly equivalent because of the context in which they are\ntested: coarse grained logging where the surrounding operations\neclipse the logging check.\n\nisLoggable() involves volatile reads, which prevent optimizations and\ninstruction reordering across the read.  On current x86 platforms, no\nmemory barrier instructions are needed for a volatile read, but that's\nnot true of other architectures.\n\nThoughts on how to address this?  Have you done any performance testing of this patch versus the current system, both w/ infoStream == null and infoStream != null.\n\nI also think it is important to address Yonik's point about \"inappropriate\" places.  In other words, we need guidelines about where and when to using logging and committers need to be on the lookout for logging uses.  I realize that is as much a community policing problem as a patch problem, but, we should address them before we adopt logging.  ",
            "author": "Grant Ingersoll",
            "id": "comment-12656739"
        },
        {
            "date": "2008-12-15T20:30:05+0000",
            "content": "While the patch itself is likely minor, the implications of applying the patch are significant, IMO ",
            "author": "Grant Ingersoll",
            "id": "comment-12656740"
        },
        {
            "date": "2008-12-15T20:37:25+0000",
            "content": "I haven't done any performance test since after following Doug's proposal, I switched to using the NOP logger which all of its isLoggable()-like calls return false. That means that OOtB calling isDebugEnabled returns immediately w/ false, w/o doing any checks. This may even be inlined by the compiler.\n\nIf someone decides to drop the slf4j-jdk14.jar (for example), then that means that someone already uses Java logging in other places in his/her application (not necessarily the search parts only) and therefore the overhead of checking whether logging is enabled is already been taken into consideration.\nHowever, I don't think it's the Lucene's community's responsibility to take care of these situations, because like I wrote before, someone might extend SLF4J and provide a very inefficient isDebugEnabled() implementation, and it wouldn't (and shouldn't) be the community's responsibility.\n\nWhat's important is that Lucene uses the NOP adapter, which really does nothing.\n\nIf you insist, I can run some performance tests, but I really don't think it's necessary. ",
            "author": "Shai Erera",
            "id": "comment-12656741"
        },
        {
            "date": "2009-01-08T17:02:18+0000",
            "content": "Grant, given what I wrote below, having Lucene use NOP adapter, are you still worried w.r.t. the performance implications?\n\nIf there is a general reluctance to add a dependency on SLF4J, can we review the other options I suggested - using infoStream as a class with static methods? That at least will allow adding more prints from other classes, w/o changing their API.\n\nI prefer SLF4J because IMO logging is important, but having infoStream as a service class is better than what exists today (and I don't believe someone can argue that calling a static method has any significant, if at all, performance implications).\n\nIf the committers want to drop that issue, please let me know and I'll close it. I don't like to nag  ",
            "author": "Shai Erera",
            "id": "comment-12662039"
        },
        {
            "date": "2009-01-08T17:19:06+0000",
            "content": "It seems we should take into consideration the performance of a real logger (not the NOP logger) because real applications that already use SLF4J can't use NOP adapter.  Solr just switched to SLF4J for example. ",
            "author": "Yonik Seeley",
            "id": "comment-12662044"
        },
        {
            "date": "2009-01-09T17:55:29+0000",
            "content": "Like I wrote before, I believe that if someone will use a real logger, it's most probably because his application already uses such a logger in other places of the code, not necessarily just the search parts. Therefore, the performance implications of using a logger is not important, IMO.\nFor the sake of argument, what if some writes his own adapter, which performs really bad on isDebugEnabled() (for example) - is that the concern of the Lucene community?\nThe way I view it - this patch gives those who want to control Lucene logging, better control of it. The fact that Lucene ships with the NOP adapter means it will not be affected by the logger's isDebugEnabled() calls. If you want to always output the log messages, drop an adapter which always returns true.\n\nI wonder if there is a general reluctance to use SLF4J at all, and that's why you continue to raise the performance implications. Because I seriously don't understand why you think that checking if debug is enabled can pose any performance hit, even when used with a real logger.\nIf performance measurement is what's keeping this patch from being committed, I'll run one of the indexing algoirhtms w/ and w/o the patch. I'll use the NOP adapter and the Java logger adapter so we'll have 3 measurements.\nHowever, if performance is not what's blocking that issue, please let me know now, so I won't spend test cycles for nothing.\n\nAnd ... I also proposed another alternative, which is not as good as logging IMO, but still better than what we have today - offer an InfoStream class with static methods verbose() and message(). It can be used by all Lucene classes, w/o changing their API and thus allows adding more messages gradually w/o being concerned w/ API backward compatibility.\n\nI prefer SLF4J, but if the committers are against it, then this one should be considered also.\n\nShai ",
            "author": "Shai Erera",
            "id": "comment-12662448"
        },
        {
            "date": "2009-01-09T19:05:54+0000",
            "content": "I'm not arguing for or against SLF4J at this point, but simply pointing out that I didn't think it was appropriate to base any analysis on the NOP adapter, which can't be used for any project already using SLF4J.\n\nI think using a logger to replace the infostream stuff is probably acceptable.  What I personally don't want to see happen is instrumentation creep/bloat, where debugging statements slowly make their way all throughout Lucene.\n\nBecause I seriously don't understand why you think that checking if debug is enabled can pose any performance hit, even when used with a real logger.\n\nI've tried to explain - these calls can be costly if used in the wrong place, esp on the wrong processor architectures.  What appears in inner loop will vary widely by application, and there are a ton of lucene users out there using it in all sorts of ways we can't imagine.  For example, I'd rather not see debugging in Query/Weight/Scorer classes - for most applications, query and weight construction won't be a bottleneck, but there are some where it could be (running thousands of stored queries against each incoming document via memoryindex for example). ",
            "author": "Yonik Seeley",
            "id": "comment-12662476"
        },
        {
            "date": "2009-01-11T06:51:29+0000",
            "content": "{bq}\nI think using a logger to replace the infostream stuff is probably acceptable. What I personally don't want to see happen is instrumentation creep/bloat, where debugging statements slowly make their way all throughout Lucene.{bq}\n\nGrant wrote a few posts back:\n\"I also think it is important to address Yonik's point about \"inappropriate\" places. In other words, we need guidelines about where and when to using logging and committers need to be on the lookout for logging uses. I realize that is as much a community policing problem as a patch problem, but, we should address them before we adopt logging.\"\n\nIMO, adding logging messages to outer classes, like QueryParser, is unnecessary since the application can achieve the same thing by itself (logging the input query text, used Analyzer and the output Query object). But logging internal places, like merging, is very important, because you usually can't reproduce it in your dev env. (it requires the exact settings to IndexWriter, the exact stream of documents and the exact operations (add/remove)).\nLike I said, logging in Lucene is mostly important when you're trying to debug an application which is out of your hands. Customers are rarely willing to share their content. Also, community-wise, being able to ask someone to drop a log of operations that has happened and caused a certain problem is valuable. Today you can ask it only on IndexWriter output, which may not be enough.\n\n{bq}\nI've tried to explain - these calls can be costly if used in the wrong place, esp on the wrong processor architectures. What appears in inner loop will vary widely by application, and there are a ton of lucene users out there using it in all sorts of ways we can't imagine. For example, I'd rather not see debugging in Query/Weight/Scorer classes - for most applications, query and weight construction won't be a bottleneck, but there are some where it could be (running thousands of stored queries against each incoming document via memoryindex for example).{bq}\n\nI'm sorry, but I don't buy this (or I'm still missing something). What's the difference between logger.isDebugEnabled to indexOutput.writeInt? Both are method calls on a different object. Why is the latter acceptable and the former not?\nI'm not saying that we should drop any OO design and programming, but just pointing out that Lucene's code is already filled with many method calls on different objects, inside as well as outside of loops.\nThe only way I think you could claim the two are different is because indexOutput.writeInt is essential for Lucene's operation, while logger.isDebugEnabled is not. But I believe logging in Lucene is as much important (and valuable) as encoding its data structures. ",
            "author": "Shai Erera",
            "id": "comment-12662733"
        },
        {
            "date": "2009-06-11T00:33:18+0000",
            "content": "I'm going to go out on a limb and say this one is too contentious to make 2.9.\n\nIf you strongly disagree, please do feel free to flip it back. ",
            "author": "Mark Miller",
            "id": "comment-12718263"
        },
        {
            "date": "2009-06-11T07:21:57+0000",
            "content": "I'm not even sure if this issue should be kept around, given the responses I got to it. The question is - do we think logging should be improved in Lucene or not? If YES, then let's keep the issue around and come back in 3.0. If NO, then let's cancel it. It hasn't been commented on for ~6 months, so there's no point to keep it around unless we think it should be resolved at some point ",
            "author": "Shai Erera",
            "id": "comment-12718327"
        },
        {
            "date": "2009-11-17T20:15:18+0000",
            "content": "So who is in favor of this? Personally, I'm not - Shai put up the call for support months ago - one more chance I guess - without, I will close this soon. ",
            "author": "Mark Miller",
            "id": "comment-12779097"
        },
        {
            "date": "2010-03-23T06:36:07+0000",
            "content": "Well ... since Mark hasn't closed it yet (thanks Mark ), I thought to try once more. Perhaps w/ the merge of Lucene/Solr this will look more reasonable now? I personally feel that just setting InfoStream on IW is not enough. I don't think we need to control logging per level either. I think it's important to introduce this in at least one of the following modes:\n\n\tWe add SLF4J and allow the application to control logging per package(s), but the logging level won't matter - as long as it's not OFF, we log.\n\tWe add a static factory LuceneLogger or something, which turns logging on/off, in which case all components/packages either log or not.\n\n\n\nI think (1) gives us greater flexibility (us as in the apps developers), but (2) is also acceptable. As long as we can introduce logging messages from more components w/o passing infoStream around ... On LUCENE-2339 for example, a closeSafely method was added which suppresses IOExceptions that may be caused by io.close(). You cannot print the stacktrace because that would be unacceptable w/ products that are not allowed to print anything unless logging has been enabled, but on the other hand suppressing the exception is not good either ... in this case, a LuceneLogger could have helped because you could print the stacktrace if logging was enabled. ",
            "author": "Shai Erera",
            "id": "comment-12848571"
        },
        {
            "date": "2010-04-08T12:48:40+0000",
            "content": "We use SLF4J in Jackrabbit, and having logs from the embedded Lucene index available through the same mechanism would be quite useful in some situations.\n\nBTW, using isDebugEnabled() is often not necessary with SLF4J, see http://www.slf4j.org/faq.html#logging_performance ",
            "author": "Jukka Zitting",
            "id": "comment-12854919"
        },
        {
            "date": "2010-04-08T13:00:34+0000",
            "content": "I still think that calling isDebugEnabled is better, because the message formatting stuff may do unnecessary things like casting, autoboxing etc. IMO, if logging is enabled, evaluating it twice is not a big deal ... it's a simple check.\n\nI'm glad someone here thinks logging will be useful though . I wish there will be quorum here to proceed w/ that.\n\nNote that I also offered to not create any dependency on SLF4J, but rather extract infoStream to a static InfoStream class, which will avoid passing it around everywhere, and give the flexibility to output stuff from other classes which don't have an infoStream at hand. ",
            "author": "Shai Erera",
            "id": "comment-12854920"
        },
        {
            "date": "2010-05-31T18:18:35+0000",
            "content": "Closing this one as we clearly don't reach a consensus about it. And it introduces a static variable to each class that is interested in logging, which is a problem if Lucene is used inside the same JVM by several instances - turning the logging on for one application will affect all the rest as well.\n\nAnyway, it's been open for too long and I don't see that we're anywhere near a consensus (perhaps rightfully), so no point keeping it open. ",
            "author": "Shai Erera",
            "id": "comment-12873742"
        }
    ]
}