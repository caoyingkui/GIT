{
    "id": "LUCENE-4950",
    "title": "AssertingIndexSearcher isn't wrapping the Collector to AssertingCollector",
    "details": {
        "components": [],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "",
    "attachments": {
        "LUCENE-4950.patch": "https://issues.apache.org/jira/secure/attachment/12579912/LUCENE-4950.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-22T21:53:10+0000",
            "content": "Current patch ... but some tests still failing, e.g. this fun one:\n\n\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestNumericRangeQuery32 -Dtests.method=testOneMatchQuery -Dtests.seed=CFA55692AE54C388 -Dtests.slow=true -Dtests.locale=sr_BA_#Latn -Dtests.timezone=US/Alaska -Dtests.file.encoding=ISO-8859-1\n[junit4:junit4] FAILURE 0.08s | TestNumericRangeQuery32.testOneMatchQuery <<<\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: class org.apache.lucene.search.ConstantScoreQuery$ConstantScorer: invalid initial doc id: 5\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([CFA55692AE54C388:C04896C672DCE5CB]:0)\n[junit4:junit4]    > \tat org.apache.lucene.index.AssertingAtomicReader$AssertingDocsEnum.<init>(AssertingAtomicReader.java:240)\n[junit4:junit4]    > \tat org.apache.lucene.search.AssertingScorer.<init>(AssertingScorer.java:90)\n[junit4:junit4]    > \tat org.apache.lucene.search.AssertingScorer.getAssertingScorer(AssertingScorer.java:71)\n[junit4:junit4]    > \tat org.apache.lucene.search.AssertingCollector.setScorer(AssertingCollector.java:48)\n[junit4:junit4]    > \tat org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.setScorer(ConstantScoreQuery.java:220)\n[junit4:junit4]    > \tat org.apache.lucene.search.Scorer.score(Scorer.java:85)\n[junit4:junit4]    > \tat org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score(ConstantScoreQuery.java:254)\n[junit4:junit4]    > \tat org.apache.lucene.search.AssertingScorer.score(AssertingScorer.java:125)\n[junit4:junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:616)\n[junit4:junit4]    > \tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:93)\n[junit4:junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:480)\n[junit4:junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:436)\n[junit4:junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:273)\n[junit4:junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:261)\n[junit4:junit4]    > \tat org.apache.lucene.search.TestNumericRangeQuery32.testOneMatchQuery(TestNumericRangeQuery32.java:215)\n[junit4:junit4]    > \tat java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]   2> NOTE: test params are: codec=Lucene42: {field4=PostingsFormat(name=TestBloomFilteredLucene41Postings), field2147483647=PostingsFormat(name=TestBloomFilteredLucene41Postings), field2=PostingsFormat(name=SimpleText), ascfield8=MockVariableIntBlock(baseBlockSize=109), field8=PostingsFormat(name=TestBloomFilteredLucene41Postings), ascfield2=PostingsFormat(name=Memory doPackFST= false), ascfield4=MockVariableIntBlock(baseBlockSize=109)}, docValues:{}, sim=DefaultSimilarity, locale=sr_BA_#Latn, timezone=US/Alaska\n[junit4:junit4]   2> NOTE: Linux 3.5.0-23-generic amd64/Oracle Corporation 1.7.0_06 (64-bit)/cpus=8,threads=1,free=210356704,total=247463936\n[junit4:junit4]   2> NOTE: All tests run in this JVM: [TestNumericRangeQuery32]\n\n\n\nI think it's because of the sneakiness that ConstantScoreQuery does to enable out-of-order scoring ... ",
            "author": "Michael McCandless",
            "id": "comment-13638475"
        },
        {
            "date": "2013-04-22T22:03:01+0000",
            "content": "It looks like all the core test failures are due to ConstantScoreQuery ... but I'm at a loss how to fix it! ",
            "author": "Michael McCandless",
            "id": "comment-13638487"
        },
        {
            "date": "2013-04-23T14:22:23+0000",
            "content": "How about this:\n\nIndex: lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java\n===================================================================\n--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java\t(revision 1470976)\n+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java\t(working copy)\n@@ -87,10 +87,10 @@\n     this.in = in;\n     this.topScorer = topScorer;\n     this.inOrder = inOrder;\n-    this.docsEnumIn = new AssertingAtomicReader.AssertingDocsEnum(in, topScorer == TopScorer.NO);\n     this.canCallNextDoc = topScorer != TopScorer.YES // not a top scorer\n       || !SCORE_COLLECTOR_RANGE.isOverriddenAsOf(in.getClass()) // the default impl relies upon nextDoc()\n       || !SCORE_COLLECTOR.isOverriddenAsOf(in.getClass()); // the default impl relies upon nextDoc()\n+    this.docsEnumIn = new AssertingAtomicReader.AssertingDocsEnum(in, canCallNextDoc);\n   }\n \n\n ",
            "author": "Robert Muir",
            "id": "comment-13639098"
        },
        {
            "date": "2013-04-23T14:39:09+0000",
            "content": "Hmm I'm still seeing exceptions in TestNumericRangeQuery32 even with that fix ...\n\nMaybe there's a real bug in NumericRangeQuery or ConstantScoreQuery? ",
            "author": "Michael McCandless",
            "id": "comment-13639111"
        },
        {
            "date": "2013-04-23T14:45:18+0000",
            "content": "Huch?\nThe sneakiness in ConstantScoreQuery could cause this. I have to rethink whats happening there. The idea is to enable the inner scorer's out of order. The sneakiness is there to allow out-of order scoring when wrapping BS1, otherwise CSQ would strip the scores but with the cost of turning it in-order.\nNRQ is out of scope here, because query is already rewritten. ",
            "author": "Uwe Schindler",
            "id": "comment-13639121"
        },
        {
            "date": "2013-04-23T15:06:18+0000",
            "content": "I think the bug is in ConstantScoreQuery. it wraps in setScorer() but also wraps in score().\n\nMaybe it would be easier, if it had two implementations: one where its a Scorer+OutOfOrder, and another more general DISI+InOrder. this could remove the extra wrapping. ",
            "author": "Robert Muir",
            "id": "comment-13639138"
        },
        {
            "date": "2013-07-23T18:44:19+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716914"
        },
        {
            "date": "2014-04-16T12:54:28+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970767"
        }
    ]
}