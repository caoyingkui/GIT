{
    "id": "LUCENE-4825",
    "title": "PostingsHighlighter support for positional queries",
    "details": {
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [],
        "affect_versions": "4.2",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I've been playing around with the brand new PostingsHighlighter. I'm really happy with the result in terms of quality of the snippets and performance.\nOn the other hand, I noticed it doesn't support positional queries. If you make a span query, for example, all the single terms will be highlighted, even though they haven't contributed to the match. That reminds me of the difference between the QueryTermScorer and the QueryScorer (using the standard Highlighter).\n\nI've been trying to adapt what the QueryScorer does, especially the extraction of the query terms together with their positions (what WeightedSpanTermExtractor does). Next step would be to take that information into account within the formatter and highlight only the terms that actually contributed to the match. I'm not quite ready yet with a patch to contribute this back, but I certainly intend to do so. That's why I opened the issue and in the meantime I would like to hear what you guys think about it and  discuss how best we can fix it. I think it would be a big improvement for this new highlighter, which is already great!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-12T20:00:54+0000",
            "content": "I think it supports positional queries, just in a different way. \n\nI don't really like the way the standardhighlighter does this myself. I would prefer if we avoided the slow stuff\nthose things do in this highlighter (because we already have other ones that do that). This one instead puts more effort\non trying to summarize the document with respect to the query terms (which is faster, and for some cases, better use of cpu time).\n\nI think a good improvement would be to letting the proximity of terms within passages influence the scoring. Its not necessary to actually gather anything about the query to do this and wouldnt be confusing and would still support all queries that support extractTerms().\n\nOn the other hand we can always create variants of this highlighter that do as you suggest, so that it leaves the user with more choices. But I just would prefer we don't try to force PostingsHighlighter work like the other highlighters for the reasons i mentioned. ",
            "author": "Robert Muir",
            "id": "comment-13600404"
        },
        {
            "date": "2013-03-12T20:52:34+0000",
            "content": "Also I think the most efficient way to add this (though its all in a branch i think?) would be to add a \"IntervalHighlighter\".\n\nThis would work with all queries i think, without the current complexity of rewriting things and so on. ",
            "author": "Robert Muir",
            "id": "comment-13600459"
        },
        {
            "date": "2013-03-12T22:14:07+0000",
            "content": "That's sort of where I've been aiming at on LUCENE-2878, although it's half-finished at the moment, and I keep getting pulled away from it.  The idea is that you expose positions directly on the Scorer, and then you can have a HighlightingCollector that extracts matching positions in its collect() method. ",
            "author": "Alan Woodward",
            "id": "comment-13600549"
        },
        {
            "date": "2013-03-12T22:33:12+0000",
            "content": "Thanks for your inputs Robert!\n\nI see your point, even though from a user perspective I'd rather see only the complete phrase highlighted if I make a phrase query, not every single term. I think we can currently achieve this only like the old highlighter does, am I right? \nMaybe we can make this pluggable and have different implementations?\n\n ",
            "author": "Luca Cavanna",
            "id": "comment-13600572"
        },
        {
            "date": "2013-03-13T00:42:47+0000",
            "content": "I think making this pluggable for that is more like making an apple subclassable to be an orange. Thats why i recommend just a different highlighter with a design to fit. This one focuses on summarizing the document relevant to the individual query terms and the API reflects that.\n\nWe dont need to have a one-size-fits-all solution, we can have choices. ",
            "author": "Robert Muir",
            "id": "comment-13600667"
        },
        {
            "date": "2013-03-13T07:34:11+0000",
            "content": "Hey Robert,\nsorry but I don't quite understand why it would become an orange? \n\nI mean, the PostingsHighlighter does (among others) two great things:\n1) reads offsets from the postings list, as its name says\n2) summarizes the content giving nice sentences as output\n\nI think the two above features are a great improvement and pretty much what everybody would like to have!\n\nI'm proposing to add support for positional queries, as a third optional feature. We would need to read the spans from the positional queries in order to highlight only the proper terms, otherwise the output is wrong from a user perspective. Would this make it that slower? I don't mean to reanalyze the text...\n\nDon't get me wrong you must be right but I would like to understand more. \n\nYou're saying that instead of adding 3) to 2) and 1) we should have another highlighter that does 1) 2) and 3)?\n\n\n ",
            "author": "Luca Cavanna",
            "id": "comment-13600918"
        },
        {
            "date": "2013-03-13T10:44:26+0000",
            "content": "I dont see this highlighter as doing that I guess.\n\nI see it as taking query terms (not matches!!!!) and intersecting them with a breakiterator in increasing offset order, ranking these passages as it goes.\n\n\nWe would need to read the spans from the positional queries in order to highlight only the proper terms, otherwise the output is wrong from a user perspective.\n\nThen the user is wrong, and should use another highlighter. This one is about good document summarization with respect to the query terms. Its not about visualizing exact matches to lucene queries.\n\nIf the user doesnt care about 'search' but about 'matching' at the expense of everything else, they already have 2 other highlighters in lucene that focus on this (making wrong tradeoffs in my opinion)! ",
            "author": "Robert Muir",
            "id": "comment-13601017"
        },
        {
            "date": "2016-11-25T14:57:57+0000",
            "content": "I'm closing this issue.  The PostingsHighlighter effectively evolved into the UnifiedHighlighter ( LUCENE-7438 ) which supports this feature.  It's optional.  The feature is isolated pretty well into PhraseHelper.  YMMV but my benchmarks found phrase highlighting to actually increase performance.  I believe it's because there are fewer actual passage candidates as they are filtered before-hand, and this means fewer invocations of the BreakIterator.  The JDK's BreakIterator impls seem to be a large cost of highlighting. ",
            "author": "David Smiley",
            "id": "comment-15696044"
        }
    ]
}