{
    "id": "SOLR-3395",
    "title": "FieldStreamDataSource should handle null fields",
    "details": {
        "affect_versions": "3.5",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The FieldStreamDataSource currently throws a DataImportHandlerException if a field value is null.\nIMHO this is not appropriate: It is legal for field values to be null (like no Blob exists in a particular row).\nI suggest to return an empty InputStream rather than throwing a DataImportHandlerException.\n\n\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n//better: return new ByteArrayInputStream(new byte[0]);\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n\n\nMaybe the best implementation would be to distinguish between a none-existing field and a null or empty field.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}