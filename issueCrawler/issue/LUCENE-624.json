{
    "id": "LUCENE-624",
    "title": "Segment size limit for compound files",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Hello everyone,\n\nI implemented an improvement targeting compound file usage. Compound files are used to decrease the number of index files, because operating systems can't handle too many open file descriptors. On the other hand, a disadvantage of compound file format is the worse performance compared to multi-file indexes:\n\nhttp://www.gossamer-threads.com/lists/lucene/java-user/8950\n\nIn the book \"Lucene in Action\" it's said that compound file format is about 5-10% slower than multi-file format.\n\n\nThe patch I'm proposing here adds the ability to the IndexWriter to use compound format only for segments, that do not contain more documents than a specific limit \"CompoundFileSegmentSizeLimit\", which the user can set.\n\nDue to the exponential merges, a lucene index usually contains only a few very big segments, but much more small segments. The best performance is actually just needed for the big segments, whereas a slighly worse performance for small segments shouldn't play a big role in the overall search performance.\n\n\nConsider the following example:\nIndex Size:                            1,500,000\nMerge factor:                        10\nMax buffered docs:             100\nNumber of indexed fields: 10\nMax. OS file descriptors:    1024\n\nin the worst case a not-optimized index could contain the following amount of segments:\n1 x 1,000,000\n9 x   100,000\n9 x    10,000\n9 x     1,000\n9 x       100\n\nThat's 37 segments. A multi-file format index would have:\n37 segments * (7 files per segment + 10 files for indexed fields) = 629 files ==> only about 2 open indexes per machine could be handled by the operating system\n\nA compound-file format index would have:\n37 segments * 1 cfs file = 37 files ==> about 27 open indexes could be handled by the operating system, but performance would be 5-10% worse.\n\nA compound-file format index with CompoundFileSegmentSizeLimit = 1,000,000 would have:\n36 segments * 1 cfs file + 1 segment * (7 + 10 files) = 53 ==> about 20 open indexes could be handled by the OS\n\n\nThe OS can handle now 20 instead of just 2 open indexes, while maintaining the multi-file format performance.\n\nI'm going to create diffs on the current HEAD and will attach the patch files soon. Please let me know what you think about this improvement.",
    "attachments": {
        "cfs_seg_size_limit.patch": "https://issues.apache.org/jira/secure/attachment/12337603/cfs_seg_size_limit.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-07-26T22:16:51+0000",
            "content": "I attach the patch file for this improvement.\n\nThis patch adds two new methods to the API of IndexWriter and IndexModifier:\n  /** Get the current value of the compound file segment size limit.\n\n\tNote that this just returns the value you set with setCompoundFileSegmentSizeLimit(int)\n\tor the default. You cannot use this to query the status of an existing index.\n\t@see #setCompoundFileSegmentSizeLimit(int)\n   */\n  public int getCompoundFileSegmentSizeLimit();\n\n\n\n  /** Sets the limit of documents a segment can have, so that\n\n\tcompound format is being used for that segment. A high\n\tlimit will decrease the number of files per index, whereas\n\ta lower limit will improve search performance but\n\tincrease the number of files.\n   */\n  public void setCompoundFileSegmentSizeLimit(int value);\n\n\n\nFurthermore I added a constant to IndexWriter:\npublic final static int DEFAULT_COMPOUND_FILE_SEGMENT_SIZE_LIMIT = Integer.MAX_VALUE;\n\nSince the default value is set to Integer.MAX_VALUE, the behavior of IndexWriter/IndexModifier only changes if the user uses setCompoundFileSegmentSizeLimit(int) to change the value explicitly.  ",
            "author": "Michael Busch",
            "id": "comment-12423726"
        },
        {
            "date": "2006-12-04T11:07:01+0000",
            "content": "I'm closing this issue, because:\n\n\tno votes or comments for almost half a year\n\tonly indexing performance benefits slightly from this feature\n\tanother config parameter in IndexWriter will probably confuse users more than help them\n\n ",
            "author": "Michael Busch",
            "id": "comment-12455274"
        }
    ]
}