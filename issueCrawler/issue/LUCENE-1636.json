{
    "id": "LUCENE-1636",
    "title": "TokenFilters with a null value in the constructor fail",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "While migrating from 2.4.x to 2.9-dev I found a lot of failing unittests.\nOne problem is with TokenFilters that do a super(null) in the constructor.\nI fixed it by changing the constructor to super(new EmptyTokenStream())\nThis will cause problems and frustration to others while migrating to 2.9.",
    "attachments": {
        "LUCENE-1636.patch": "https://issues.apache.org/jira/secure/attachment/12408127/LUCENE-1636.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-05-14T10:22:31+0000",
            "content": "Hmm... that's no good.\n\nCan you give some more specifics here?  Which TokenFilter(s) are doing super(null)?\n\nWhat other unit tests are failing? ",
            "author": "Michael McCandless",
            "id": "comment-12709348"
        },
        {
            "date": "2009-05-14T10:45:42+0000",
            "content": "My own filters and my own tests.\nIt is just that the behaviour of Lucene has changed in such cases. ",
            "author": "Wouter Heijke",
            "id": "comment-12709353"
        },
        {
            "date": "2009-05-14T11:34:05+0000",
            "content": "Hi Wouter,\nI tend to say, this is Won't fix:\n\n\tYou use TokenFilter in an undocumented way. I suspect, that you set the delegate stream later, correct? To prevent this, the protected \"input\" member should normally be \"final\", as this is not possible (but worked with old analyzers) - ok, this was an error, to not make the delegate strean final (but we shoudl fix this now)\n\tThe main problem of changing the non-final delegate stream later lies in the fact, that with 2.9 a new TokenStream API (setUseNewAPI()) was added. This new API does not use the Token class anymore, but uses Attributes. The stream's attributes list must be reused in the TokenFilters. If you initialize a TokenFilter with a specific delegate, the attribute instances are copied. If you change the delegate stream later, the filter still uses the attributes of the original stream and will update the wrong ones, it will not work anymore.\n\n\n\nSo we cannot support this wrong behaviour of TokenFilter anymore. But we should fix the final accessor of \"input\", I will attach a patch. ",
            "author": "Uwe Schindler",
            "id": "comment-12709369"
        },
        {
            "date": "2009-05-14T11:34:42+0000",
            "content": "This patch prevents changing the delegate stream. ",
            "author": "Uwe Schindler",
            "id": "comment-12709370"
        },
        {
            "date": "2009-05-14T11:37:27+0000",
            "content": "Here's an example\nbefore: \nprivate MyFilter myFilter = new MyFilter(null);\n\nafter:\nprivate MyFilter myFilter = new MyFilter(new EmptyTokenStream()); ",
            "author": "Wouter Heijke",
            "id": "comment-12709371"
        },
        {
            "date": "2009-05-14T11:40:35+0000",
            "content": "Whatever cause it was, it was behaving this way for a long time, changing it to the new way in 3.0 seems more acceptable to me then in 2.9 to me. ",
            "author": "Wouter Heijke",
            "id": "comment-12709372"
        },
        {
            "date": "2009-05-14T11:40:54+0000",
            "content": "If you do not use a delegate TokenStream, extend TokenStream instead of TokenFilter. If you want to later set the delegate, see my comment (and patch to prevent this incorrect usage) above. ",
            "author": "Uwe Schindler",
            "id": "comment-12709374"
        },
        {
            "date": "2009-05-14T11:42:33+0000",
            "content": "What do you want to do with an filter without a delegate? Calling next() would simply NPE, too! ",
            "author": "Uwe Schindler",
            "id": "comment-12709375"
        },
        {
            "date": "2009-05-21T17:21:48+0000",
            "content": "I think we should change this in 2.9, for the reasons Uwe pointed out, to disallow changing the delegate after construction. ",
            "author": "Michael McCandless",
            "id": "comment-12711704"
        },
        {
            "date": "2009-05-22T01:27:55+0000",
            "content": "I only hope users will understand this and they realize that 2.9 is not backwards compatible to previous versions! This code in our codebase was added by knowledgeable Lucene developers! ",
            "author": "Wouter Heijke",
            "id": "comment-12711915"
        },
        {
            "date": "2009-05-22T01:47:41+0000",
            "content": "Hi Wouter,\nI still want to find out, what you are trying to do with a TokenFilter without a delegate! Can you explain, why you want to initialize with super(null)?\nIf it is because you want to change it later to something non-null, it will not work anymore (this is why I want to make the delgate stream final). So please explain! ",
            "author": "Uwe Schindler",
            "id": "comment-12711919"
        },
        {
            "date": "2009-05-22T01:50:46+0000",
            "content": "Mike:\nWould this affect backwards compatibility? If we make it final and nobody changes the stream, everything is ok. Is this also the case, when using lucene.jar as a dropin-replacement without recompilation? Will changing a final variable from code, compiled before finalization, be detected by the JVM? Is the compiled code with final still binary compatible to code compiled againt non-final members?\nI think, we should try this out before committing! ",
            "author": "Uwe Schindler",
            "id": "comment-12711920"
        },
        {
            "date": "2009-05-22T02:45:10+0000",
            "content": "I'm on holiday now, but as far as I recollect (as I was not the author of the code) it was done on some filters that would be used in another situation (similar to a filter) to use the filter's functionality. Also it was used with filters that could not be extended, so a new filter was created, also here the orignal filter's public methods would be called.\n\nIn a way it doesn't matter, it could be done with the api without any problems with the latest few releases that i know of.\n\nA more elegant way if one would like to introduce this new behaviour is to at least log some kind of error message in the 2.9 release so users would be alarmed that they use the Lucene api in a way that is not supported anymore. ",
            "author": "Wouter Heijke",
            "id": "comment-12711933"
        },
        {
            "date": "2009-05-22T09:52:03+0000",
            "content": "Good questions Uwe!\n\nI tested the back-compat by adding this to TestAnalyzers temporarily\nin my local checkout:\n\n\nprivate class TestFilter extends TokenFilter {\n  public TestFilter() {\n    super(new WhitespaceTokenizer(null));\n  }\n}\n\npublic void testChangeTokenFilterInput() {\n  TokenFilter tf = new TestFilter();\n  System.out.println(\"tf.input = \" + tf.input);\n  tf.input = null;\n}\n\n\n\nThen, ant test-tag -Dtestcase=TestAnalyzers results in:\n\n[junit] ------------- Standard Output ---------------\n[junit] tf.input = (start=0,end=0,term=)\n[junit] ------------- ---------------- ---------------\n[junit] Testcase: testChangeTokenFilterInput(org.apache.lucene.analysis.TestAnalyzers):\tCaused an ERROR\n[junit] null\n[junit] java.lang.IllegalAccessError\n[junit] \tat org.apache.lucene.analysis.TestAnalyzers.testChangeTokenFilterInput(TestAnalyzers.java:143)\n\n\n\nSo, 1) it doesn't break JAR drop-in-abilility when one references\ninput, and 2) indeed at runtime final-ness is enforced by the JRE.  So\nI think we should proceed with the change?  It is a back-compat break\nfor those users who change input after creating a TokenFilter, but\nsuch a use case was not legal usage of the API, and will specifically\nnot work like it did in the past (so back-compat was already broken,\njust in a much more sneaky manner). ",
            "author": "Michael McCandless",
            "id": "comment-12712008"
        },
        {
            "date": "2009-05-22T10:47:27+0000",
            "content": "Thanks, I am still in Japan and had no time to check this out myself. So it seems good. I would suggest to add this to changes.txt with a warning about the change in backwards compatibility.\nThe issue itsself should be closed as wont-fix, as the usage of Filters with a null delegate is not specified in API and is not correct.\nThe case, Wouter explained, is just a workaround for incorrect usage of filters. He wants to reuse some methods of the filter somewhere else and wants to construct a \"dummy\" instance for that. He should not do this and better move the code accessible outside of the TokenFilter to a separate class.\nMaybe we should add a special ==null test to the constructor, that early throws a NPE with a short notice, that this usage is no longer supported. ",
            "author": "Uwe Schindler",
            "id": "comment-12712021"
        },
        {
            "date": "2009-05-22T11:02:55+0000",
            "content": "Oh, you already committed this  ",
            "author": "Uwe Schindler",
            "id": "comment-12712025"
        },
        {
            "date": "2009-05-22T13:05:48+0000",
            "content": "OK I'll add a null check in AttributeSource's ctor. ",
            "author": "Michael McCandless",
            "id": "comment-12712076"
        },
        {
            "date": "2009-05-25T08:45:30+0000",
            "content": "A good example of this 'abuse' is in ShingleMatrixFilter.java in one of it's constructors.\nHere also the input is not used and replaced by an EmptyTokenStream:\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n\n ",
            "author": "Wouter Heijke",
            "id": "comment-12712660"
        },
        {
            "date": "2009-05-25T09:33:22+0000",
            "content": "A good example of this 'abuse' is in ShingleMatrixFilter.java in one of it's constructors.\n\nThis class extends TokenStream not TokenFilter! As the input instance member of TokenFilter is now final, it would not even compile. Please note, this is one of the contrib packages, not yet using the new API, so with useNewApi set to true, this TokenStream would fail (see LUCENE-1460). The change, you have the problem with, is caused by the new TokenStream API, and so NULL delegates are not possible! ",
            "author": "Uwe Schindler",
            "id": "comment-12712671"
        },
        {
            "date": "2009-10-05T18:04:04+0000",
            "content": "(trouble posting, forgive if duplicate)\nThis change also broke the Japanese morphological SEN / Lucene integration code in lucene-ja.  Since Solr 1.4 is based on Lucene 2.9, this will also effectively break SEN for Solr users who upgrade to 1.4.\n\nI'm not complaining.  Reading the above comments, the change was probably the \"right\" thing to do.  I've contacted the author of lucene-ja, and I hope to work on a rewrite to address this.\n\nI would be interested in any comments you folks might have about the lucene-ja code.\n\nClass org.apache.lucene.analysis.ja.POSFilter\nExtends org.apache.lucene.analysis.TokenFilter\n\nOffending code in lucene-ja's POSFilter\n    public POSFilter(TokenStream in, Hashtable posTable) \n{\n        super(in);\n        input = in; // <<==== this is a member field of parent TokenFilter\n        table = posTable;\n    }\nThis is done in several classes. ",
            "author": "Mark Bennett",
            "id": "comment-12762281"
        },
        {
            "date": "2009-10-05T21:24:05+0000",
            "content": "This change is also noted in the backwards compatibility section of Lucene 2.9.\n\nThe assignment of filter in the ctor is totally useless, as the super ctor does it already, so it the problem of this third party software that used the API in an undocumented way. I am sorry for your problems, but the author of lucene-ja should provide a fix, if you have the source code available, it is a less important problem, if it is closed source, you have to ask the author to fix it soon. ",
            "author": "Uwe Schindler",
            "id": "comment-12762387"
        },
        {
            "date": "2009-10-07T23:29:22+0000",
            "content": "Uwe,\n\nYour comments were a home run, thanks!\n\nThere are 6 places in the code where constructors needlessly try to assign that.  Commenting them all out fixes that problem.\n\nThere's some other stuff to clean up and I'm chatting with the author.\n\nThanks again,\nMark ",
            "author": "Mark Bennett",
            "id": "comment-12763303"
        }
    ]
}