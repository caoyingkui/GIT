{
    "id": "SOLR-4623",
    "title": "Add REST API methods to get all remaining schema information, and also to return the full live schema in json, xml, and schema.xml formats",
    "details": {
        "affect_versions": "4.2",
        "status": "Closed",
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Sub-task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Each remaining schema component (after field types, fields, dynamic fields, copy fields were added by SOLR-4503) should be available from the schema REST API: name, version, default query operator, similarity, default search field, and unique key.\n\nIt should be possible to get the entire live schema back with a single request, and schema.xml format should be one of the supported response formats.",
    "attachments": {
        "XMLResponseWriter.output.xml": "https://issues.apache.org/jira/secure/attachment/12574874/XMLResponseWriter.output.xml",
        "SOLR-4623.patch": "https://issues.apache.org/jira/secure/attachment/12574872/SOLR-4623.patch",
        "JSONResponseWriter.output.json": "https://issues.apache.org/jira/secure/attachment/12574873/JSONResponseWriter.output.json",
        "SchemaXmlResponseWriter.output.xml": "https://issues.apache.org/jira/secure/attachment/12574875/SchemaXmlResponseWriter.output.xml",
        "SOLR-4623-fix-classname-shortening-part-deux.patch": "https://issues.apache.org/jira/secure/attachment/12575654/SOLR-4623-fix-classname-shortening-part-deux.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13609424",
            "date": "2013-03-21T20:25:27+0000",
            "content": "Patch.\n\nThe full schema is available via the \"/schema\" path, e.g. http://localhost:8983/solr/collection1/schema.  \"?wt=json\" and \"?wt=xml\" produce the expected output formats.  SchemaXmlResponseWriter is added to provide output in schema.xml format, available via \"?wt=schema.xml\".  Samples attached.\n\nAlso moves schema REST API methods from package org.apache.solr.rest to org.apache.solr.rest.schema, and renames base functionality REST API classes to remove the current schema focus, to prepare for other non-schema REST APIs.\n\nAlso changes output path for copyFields and dynamicFields from \"copyfields\" and \"dynamicfields\" (all lowercase) to \"copyFields\" and \"dynamicFields\", respectively, to mirror all other REST API outputs, which use camel-case.\n\nI think this is ready to go. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13609435",
            "date": "2013-03-21T20:31:23+0000",
            "content": "Also changes output path for copyFields and dynamicFields from \"copyfields\" and \"dynamicfields\" (all lowercase) to \"copyFields\" and \"dynamicFields\", respectively, to mirror all other REST API outputs, which use camel-case.\n\nI want to point out a design choice I've made with the REST API URLs: I followed what appears to me to be a pattern in Solr's URLs: all paths elements in lowercase, and query params either in camel-case or dots.separating.words formats. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13612384",
            "date": "2013-03-25T04:48:15+0000",
            "content": "Committed:\n\n\n\ttrunk r1460519\n\tbranch_4x r1460521\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13612888",
            "date": "2013-03-25T17:38:08+0000",
            "content": "Reopening to ensure my comments are taken seriously "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13612993",
            "date": "2013-03-25T19:06:26+0000",
            "content": "Robert, I replied to you on the mailing list, and I tried to contact you on #lucene IRC.\n\nYou haven't responded in any meaningful way.\n\nSo please help me understand what you don't like and how you think it ought to be fixed. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13614669",
            "date": "2013-03-26T23:19:22+0000",
            "content": "Robert's comment from the mailing list - I'll commit the patch shortly, as I agree about the bugs it fixes - thanks Robert:\n\n\nWell there are several bugs, resulting from the over-aggressive\nnormalization combined with normalizing always despite this comment:\n\n     // Only normalize factory names\n\nSo consider the case someone has\n<similarity class=\"org.apache.lucene.search.similarities.BM25Similarity\"/>\n\nwhich is allowed (it uses the anonymous factory). In this case its\nbogusly normalized to \"solr.BM25Similarity\" which is invalid and won't\nbe loaded by IndexSchema, since it only looks for solr.xxxx in\norg.apache.solr.search.similarities.\n\nI think a patch like the following is a good start, but we should\nreview the other uses of the same code-dup'ed function in IndexSchema\nand ensure there are not similar bugs:\n\nI'm sorry if i came off terse or as a haiku, its not a big deal, I\njust want it to work correctly.\n\n\nIndex: solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java\n===================================================================\n--- solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java\t(revision 1460952)\n+++ solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java\t(working copy)\n@@ -51,9 +51,9 @@\n  public abstract Similarity getSimilarity();\n\n\n-  private static String normalizeSPIname(String fullyQualifiedName) {\n-    if (fullyQualifiedName.startsWith(\"org.apache.lucene.\") || fullyQualifiedName.startsWith(\"org.apache.solr.\")) {\n-      return \"solr\" + fullyQualifiedName.substring(fullyQualifiedName.lastIndexOf('.'));\n+  private static String normalizeName(String fullyQualifiedName) {\n+    if (fullyQualifiedName.startsWith(\"org.apache.solr.search.similarities.\")) {\n+      return \"solr\" + fullyQualifiedName.substring(\"org.apache.solr.search.similarities\".length());\n    }\n    return fullyQualifiedName;\n  }\n@@ -66,10 +66,10 @@\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only normalize factory names\n-      className = normalizeSPIname(className);\n+      className = normalizeName(className);\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n-    props.add(CLASS_NAME, normalizeSPIname(className));\n+    props.add(CLASS_NAME, className);\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13614722",
            "date": "2013-03-27T00:19:36+0000",
            "content": "Robert's comment from the mailing list - I'll commit the patch shortly, as I agree about the bugs it fixes - thanks Robert: [...]\n\nPatch committed to trunk and branch_4x. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13614918",
            "date": "2013-03-27T04:41:09+0000",
            "content": "we should review the other uses of the same code-dup'ed function in IndexSchema and ensure there are not similar bugs\n\nThe code-dup'ed function is in FieldType, not IndexSchema, and right now it's used to convert fully qualified class names of analyzers, and analysis components, to short name \"solr.<SimpleClassName>\".\n\nLooking at SolrResourceLoader.findClass(), where analysis component references of the form \"solr.<SimpleClassName>\" are converted to Class references, I see that this is inappropriate for analyzer classes, since Lucene SPI doesn't cover them.  I'll stop shortening analyzer classnames.\n\nI looked up the currently defined analysis factories in trunk, and all of them are under org.apache.lucene.analysis.** and org.apache.solr.analysis.**.  Lucene analysis component factories are loaded via SPI, and Solr analysis factories are discovered by iteratively attempting Class.forName() using a fixed set of package prefixes, including \"org.apache.solr.analysis.\".\n\nI'll change the acceptable prefixes to \"org.apache.lucene.analysis.\" and \"org.apache.solr.analysis.\".  \n\nSince SPI isn't used for Solr factories, I'll change the method name from normalizeSPIname() to getShortName(), since \"shortname\"/\"short name\" seems to be what \"solr.<SimpleClassName>\" instances are called.  I would change SimilarityFactory.normalizeName() to getShortName() too, but I see it's only called the one time, so I'll inline it and get rid of the method. \n\nPatch coming shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13614923",
            "date": "2013-03-27T04:48:13+0000",
            "content": "Patch with the fixes.\n\nCommitting shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13614946",
            "date": "2013-03-27T05:18:44+0000",
            "content": "Oops, last patch didn't cover shortening of names of FieldType subclasses, which live under package org.apache.solr.schema, another member of the package prefix set that SolrResourceLoader.findClass() checks for.  Fortunately a couple schema REST API tests caught this problem.\n\nThis patch converts the qualification tests in getShortName() to a regex accepting prefixes \"org.apache.lucene.analysis.(whatever)\", \"org.apache.solr.analysis.\", and \"org.apache.solr.schema.\"\n\nCommitting shortly.  For reals this time. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13614959",
            "date": "2013-03-27T05:35:27+0000",
            "content": "Committed to trunk and branch_4x. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654031",
            "date": "2013-05-10T10:33:47+0000",
            "content": "Closed after release. "
        }
    ]
}