{
    "id": "LUCENE-2868",
    "title": "It should be easy to make use of TermState; rewritten queries should be shared automatically",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/query/scoring"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "When you have the same query in a query hierarchy multiple times, tremendous savings can now be had if the user knows enough to share the rewritten queries in the hierarchy, due to the TermState addition.  But this is clumsy and requires a lot of coding by the user to take advantage of.  Lucene should be smart enough to share the rewritten queries automatically.\n\nThis can be most readily (and powerfully) done by introducing a new method to Query.java:\n\nQuery rewriteUsingCache(IndexReader indexReader)\n\n... and including a caching implementation right in Query.java which would then work for all.  Of course, all callers would want to use this new method rather than the current rewrite().",
    "attachments": {
        "query-rewriter.patch": "https://issues.apache.org/jira/secure/attachment/12468371/query-rewriter.patch",
        "LUCENE-2868.patch": "https://issues.apache.org/jira/secure/attachment/12473991/LUCENE-2868.patch",
        "lucene-2868.patch": "https://issues.apache.org/jira/secure/attachment/12469187/lucene-2868.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-14T08:55:39+0000",
            "content": "\nWhen you have the same query in a query hierarchy multiple times, tremendous savings can now be had if the user knows enough to share the rewritten queries in the hierarchy, due to the TermCache addition. But this is clumsy and requires a lot of coding by the user to take advantage of. Lucene should be smart enough to share the rewritten queries automatically.\n\nFirst of all, I get nervous when it gets to stuff like this! Hence, I can see when this could be useful, for instance if you have one and the same FuzzyQuery / RegexpQuery which has a rather large setup cost in more than one clause in a boolean query then this would absolutely help. For other queryies like TermQuery the TermState cache in TermsEnum already helps you a lot so for those this wouldn't make a big difference though. \n\nQuery rewriteUsingCache(IndexReader indexReader)\nI think one major issue here is how would you clear a cache here. WeakReferences would work but I would't  to put any cache into any query. In general we shouldn't make any query heavy weight or \"somewhate stateful\" at all. Yet, if we would pass a RewriteCache into Query#rewrite(IR, RC) that has a per IS#search lifetime this could actually work. This would also be easy to implement Query#rewrite(IR, RC) would just forward to Query#rewrite(IR) for by default and combining (BooleanQuery) queries could override the new one. Eventually, MultiTermQuery can provide such an impl and check the cache if it needs to rewrite itself or return an already rewritten version. ",
            "author": "Simon Willnauer",
            "id": "comment-12981682"
        },
        {
            "date": "2011-01-14T09:12:47+0000",
            "content": "Fine by me if you have a better way of doing it!\n\nWho would create the RewriteCache object?  The IndexSearcher?\n ",
            "author": "Karl Wright",
            "id": "comment-12981685"
        },
        {
            "date": "2011-01-14T09:14:13+0000",
            "content": "Who would create the RewriteCache object? The IndexSearcher?\nit could.. or just be an overloaded IS.search method ",
            "author": "Simon Willnauer",
            "id": "comment-12981686"
        },
        {
            "date": "2011-01-14T10:28:52+0000",
            "content": "Actually, I think we need to clarify the description of this issue. This has nothing todo with TermCache at all. It actually reads very scary though since caches are really tricky and this one is mainly about rewrite cost in MTQ. This said, adding a method to Query just for the sake of MTQ rewrite seems kind of odd though. We should rather optimize the query structure somehow instead of caching a rewrite method. \n ",
            "author": "Simon Willnauer",
            "id": "comment-12981706"
        },
        {
            "date": "2011-01-14T13:05:30+0000",
            "content": "I reworded the description.\n\nI think the word \"cache\" is correct, but what we really need is simply a cache that has the lifetime of a top-level rewrite.  I agree that putting the data in the query object itself would not have this characteristic, but on the other hand a second Query method that is cache aware seems reasonable.  For example:\n\nQuery rewriteMinimal(RewriteCache rc, IndexReader ir)\n\n... where RewriteCache was an object that had a lifetime consistent with the highest-level rewrite operation done on the query graph.  The rewriteMinimal() method would look for the rewrite of the the current query in the RewriteCache, and if found, would return that, otherwise would call plain old rewrite() and then save the result.\n\nSo the patch would include:\n(a) the change as specified to Query.java\n(b) an implementation of RewriteCache, which could just be simplified to Map<Query,Query>\n(c) changes to the callers of rewrite(), so that the minimal rewrite was called instead.\n\nThoughts? ",
            "author": "Karl Wright",
            "id": "comment-12981746"
        },
        {
            "date": "2011-01-14T14:07:48+0000",
            "content": "I just sketched out what I have in mind could solve this problem and create the infrastructure to do way more than just caching a  query#rewrite.\nThis patch (which is just a sketch to show what I have in mind) adds a QueryRewriter class that walks the Query \"AST\" and rewrites each query \"node\" in the tree. The default implementation does nothing special, it just forwards to the queryies rewrite method but there seems to be a whole lot of potential in such a tree-walker / visitor.  For instance could we subclass it to optimize certain queries if we fix the coord problem. Yet another usecase is to decouple MTQ rewriter entirely from MTQ (not sure if we want that though) or somebody wants to wrap a query during rewrite. \n\nEven further somebody could rewrite against fieldcache? Maybe this can be even more general and just be a QueryVisitor so folks can easily walk the tree.\n\nI think this is really something that should be solved in general AND in a different issue.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12981764"
        },
        {
            "date": "2011-01-14T14:43:38+0000",
            "content": "We here use an intermediate query AST, with a number of walkers that do synonym substitution, optimization, caching, rewriting for multiple fields, and finally - generating a tree of Lucene Queries.\n\nI can share a generic reflection-based visitor that's somewhat more handy than default visitor pattern in java.\nUsage looks roughly like: \n\nclass ToStringWalker extends DispatchingVisitor<String> { // String here stands for the type of walk result\n  String visit(TermQuery q) {\n    return \"{term: \" + q.getTerm() + \"}\";\n  }\n\n  String visit(BooleanQuery q) {\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"{boolean: \");\n    for (BooleanQuery.Clause clause: q.clauses()) {\n      buf.append(dispatch(clause.getQuery()).append(\", \"); // Here we \n    }\n    buf.append(\"}\");\n    return buf.toString();\n  }\n\n  String visit(SpanQuery q) { // Runs for all SpanQueries\n    .....\n  }\n\n  String visit(Query q) { // Runs for all Queries not covered by a more exact visit() method \n    ......\n  }\n}\n\nQuery query = ...;\nString stringRepresentation = new ToStringWalker().dispatch(query);\n\n\n\ndispatch() checks its parameter runtime type, picks a visit()'s most close overload (according to java rules for compile-time overloaded method resolution), and invokes it. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12981774"
        },
        {
            "date": "2011-01-14T14:50:00+0000",
            "content": "I can share a generic reflection-based visitor that's somewhat more handy than default visitor pattern in java.\nEarwin - I think we should make a new issue and get something like that implemented in there which is more general than what I just sketched out. If you could share your code that would be awesome! ",
            "author": "Simon Willnauer",
            "id": "comment-12981778"
        },
        {
            "date": "2011-01-24T19:30:45+0000",
            "content": "Here's my take on the patch, including ability to cache weight objects.\n ",
            "author": "Karl Wright",
            "id": "comment-12985928"
        },
        {
            "date": "2011-01-25T06:33:36+0000",
            "content": "It occurs to me that the name of the common class that gets created in IndexSearcher and passed around should probably be named something more appropriate, like QueryContext.  That way people will feel free to extend it to hold all sorts of query-local data, in time.  Thoughts? ",
            "author": "Karl Wright",
            "id": "comment-12986248"
        },
        {
            "date": "2011-01-25T09:04:59+0000",
            "content": "Here's my take on the patch, including ability to cache weight objects.\nI have a couple of comments here - first I can not apply your patch to the current trunk can you update it?\n\n\n\tyou keep a cache per IndexSeacher (btw. QueryDataCache is missing in the patch) which is used to cache several things across searches. This is very dangerous! While I don't know how it is implemented I would guess you need to synchronized access to it so it would slow down searches ey?\n\n\n\n\n\tCaching Scorers is going to break since Scorers are stateful and might be advanced to different documents. Yet, I can see what you are trying to do here since doing work in a scorer is costly so common TermQueries for instance should not need to load the same posting list twice. There are two things which come to my mind right away. 1. Postinglist caching - should be done on a codec level IMO 2. Building PerReaderTermState only once for a common TermQuery. While caching PostingLists is going to be tricky and quite a task reusing PerReaderTermState could work fine as far as I can see if you are in the same searcher.\n\n\n\n\n\tCaching Weights is kind of weird - what is the reason for this again? The only thing you really save here is setup costs which are generally very low.\n\n\n\nOverall I don' t like that this way you tightly couple  something to Weight / Query etc. for a single purpose what could be solved with some kind of query optimization phase similar to what I had in my last patch and Earwin has proposed. I think we should not tight couple things like that into lucene. This is really extremely application dependent in the most cases and we should only provide the infrastructure to do it. \n\nEarwin - I think we should make a new issue and get something like that implemented in there which is more general than what I just sketched out. If you could share your code that would be awesome!\nEarwin, any new on this - shall I open an issue for that?\n\nIt occurs to me that the name of the common class that gets created in IndexSearcher and passed around should probably be named something more appropriate, like QueryContext. That way people will feel free to extend it to hold all sorts of query-local data, in time. Thoughts?\nYou refer to ScorerContext? This class was actually not intended to be expendable its public final until now. I am not sure if we should open that up though.  ",
            "author": "Simon Willnauer",
            "id": "comment-12986281"
        },
        {
            "date": "2011-01-25T11:58:16+0000",
            "content": "Oops, forgot to add a key file.\nSeriously, the weight caching is of minor utility.  The scorer caching is not enabled.  So all that this patch does differently is try to define a broader concept of query context, rather than the narrow fix Simon proposes. ",
            "author": "Karl Wright",
            "id": "comment-12986354"
        },
        {
            "date": "2011-03-18T13:23:24+0000",
            "content": "Simon's patch, updated to latest trunk ",
            "author": "Karl Wright",
            "id": "comment-13008426"
        },
        {
            "date": "2011-03-18T15:13:57+0000",
            "content": "Missed a file in the patch ",
            "author": "Karl Wright",
            "id": "comment-13008470"
        },
        {
            "date": "2011-04-22T14:12:21+0000",
            "content": "I've opened LUCENE-3041 to work on the suggestions made by Earwin. ",
            "author": "Chris Male",
            "id": "comment-13023224"
        },
        {
            "date": "2011-04-23T08:08:50+0000",
            "content": "LUCENE-3041 has been opened as a follow-up on this issue. ",
            "author": "Simon Willnauer",
            "id": "comment-13023525"
        },
        {
            "date": "2011-06-08T08:07:51+0000",
            "content": "Updated for latest trunk ",
            "author": "Karl Wright",
            "id": "comment-13045829"
        }
    ]
}