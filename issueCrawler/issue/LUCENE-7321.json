{
    "id": "LUCENE-7321",
    "title": "Character Mapping",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.6.1,                                            5.4.1,                                            6.0,                                            6.0.1",
        "components": [
            "modules/analysis"
        ],
        "labels": "",
        "fix_versions": [
            "6.0.1"
        ],
        "priority": "Minor",
        "status": "Open",
        "type": "New Feature"
    },
    "description": "One of the challenges in search is recall of an item with a common typing variant.  These cases can be as simple as lower/upper case in most languages, accented characters, or more complex morphological phenomena like prefix omitting, or constructing a character with some combining mark.  This component addresses the cases, which are not covered by ASCII folding component, or more complex to design with other tools.  The idea is that a linguist could provide the mappings in a tab-delimited file, which then can be directly used by Solr.\n\nThe mappings are maintained in the tab-delimited file, which could be just a copy paste from Excel spreadsheet.  This gives the linguists the opportunity to create the mappings, then for the developer to include them in Solr configuration.  There are a few cases, when the mappings grow complex, where some additional debugging may be required.  The mappings can contain any sequence of characters to any other sequence of characters.\n\nSome of the cases I discuss in detail document are handling the voiced vowels for Japanese; common typing substitutions for Korean, Russian, Polish; transliteration for Polish, Arabic; prefix removal for Arabic; suffix folding for Japanese.  In the appendix, I give an example of implementing a Russian light weight stemmer using this component.",
    "attachments": {
        "LUCENE-7321.patch": "https://issues.apache.org/jira/secure/attachment/12808982/LUCENE-7321.patch",
        "CharacterMappingComponent.pdf": "https://issues.apache.org/jira/secure/attachment/12808989/CharacterMappingComponent.pdf"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15321045",
            "author": "Ivan Provalov",
            "date": "2016-06-08T17:46:29+0000",
            "content": "Initial patch. "
        },
        {
            "id": "comment-15321081",
            "author": "Ivan Provalov",
            "date": "2016-06-08T18:00:01+0000",
            "content": "Detail component description. "
        },
        {
            "id": "comment-15321858",
            "author": "Koji Sekiguchi",
            "date": "2016-06-09T04:25:16+0000",
            "content": "What is the advantage of this compared to MappingCharFilter? "
        },
        {
            "id": "comment-15321865",
            "author": "Ivan Provalov",
            "date": "2016-06-09T04:32:43+0000",
            "content": "Koji, this one works on a token level, allowing do things like prefix/suffix manipulations.  Graph generator and collapser also makes it user friendly when dealing with a lot of mappings (please see the attached description file). "
        },
        {
            "id": "comment-16424132",
            "author": "Alexey Ponomarenko",
            "date": "2018-04-03T14:54:09+0000",
            "content": "Hi is an any plan to integrate it to the Lucene\\Solr?\u00a0 "
        },
        {
            "id": "comment-16593101",
            "author": "Nick Chervov",
            "date": "2018-08-27T01:30:24+0000",
            "content": "Hi everyone! Is there any chance to get better Russian\u00a0support in future releases of\u00a0Solr? "
        },
        {
            "id": "comment-16593170",
            "author": "Erick Erickson",
            "date": "2018-08-27T03:45:06+0000",
            "content": "There's a great chance if someone submits a patch and it gets committed. It's only because people step up and volunteer to improve things that language support improves... "
        },
        {
            "id": "comment-16593779",
            "author": "Ivan Provalov",
            "date": "2018-08-27T14:51:52+0000",
            "content": "Erik Eriksson, any progress on committing this patch?\n\nThanks,\n\nIvan "
        },
        {
            "id": "comment-16593854",
            "author": "Erick Erickson",
            "date": "2018-08-27T15:47:37+0000",
            "content": "Ivan Provalov Ohhh, you would have to skewer me wouldn't you? I have no idea about the merits of this patch, this isn't something I work with.\u00a0\n\nDoes it apply to master? and what does it do? "
        },
        {
            "id": "comment-16593976",
            "author": "Ivan Provalov",
            "date": "2018-08-27T17:19:29+0000",
            "content": "Erick Erickson,\u00a0\n\nGood questions:\u00a0\n\n1. I just ran the tests in the patch against the master, they passed.\u00a0\n\n2. It allows you\u00a0to configure/modify morphological analysis with externalized mapping files.\u00a0 I attached a description and a reference implementation of the Russian stemmer using this filter.\n\nThanks,\n\nIvan\n\n\u00a0\u00a0 "
        },
        {
            "id": "comment-16594099",
            "author": "Alexandre Rafalovitch",
            "date": "2018-08-27T18:56:08+0000",
            "content": "This feels a little bit like too many use-cases folded into one piece of code. Arabic, Japanese, Korean names special handling, Russian already covered by the stemmer.\n\nI am not sure what the clean use-case is here. Especially with say PatternReplaceCharFilterFactory\u00a0being there to\u00a0cover possible special use-case\u00a0gaps (at a lower performance perhaps). And with ICU4J possibly covering others. "
        },
        {
            "id": "comment-16594154",
            "author": "Ivan Provalov",
            "date": "2018-08-27T19:42:03+0000",
            "content": "Alexandre Rafalovitch, the clean use case is for this filter is to externalize the morphological modifications rules.\u00a0 Most stemmers have hard-coded rules.\u00a0 With this one, the rules are expressed in the flat mapping files and configurations.\u00a0 Originally, it was developed to extend a few cases for some languages listed here and\u00a0a few other languages, as well as to visualize these rules which would help the linguists involved in the project to understand the modification rules for more complex scenarios.\u00a0 I added the Russian stemmer implementation as a general reference just to show how one can configure the entire stemmer implementation without hard-coded rules.\u00a0 We have not seen any performance issues with this so far.\u00a0 Hope this helps. "
        }
    ]
}