{
    "id": "LUCENE-1877",
    "title": "Use NativeFSLockFactory as default for new API (direct ctors & FSDir.open)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/javadocs"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "A user requested we add a note in IndexWriter alerting the availability of NativeFSLockFactory (allowing you to avoid retaining locks on abnormal jvm exit). Seems reasonable to me - we want users to be able to easily stumble upon this class. The below code looks like a good spot to add a note - could also improve whats there a bit - opening an IndexWriter does not necessarily create a lock file - that would depend on the LockFactory used.\n\n\n\n  <p>Opening an <code>IndexWriter</code> creates a lock file for the directory in use. Trying to open\n  another <code>IndexWriter</code> on the same directory will lead to a\n  {@link LockObtainFailedException}. The {@link LockObtainFailedException}\n  is also thrown if an IndexReader on the same directory is used to delete documents\n  from the index.</p>\n\n\nAnyone remember why NativeFSLockFactory is not the default over SimpleFSLockFactory?",
    "attachments": {
        "LUCENE-1877.patch": "https://issues.apache.org/jira/secure/attachment/12418129/LUCENE-1877.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-30T18:34:04+0000",
            "content": "For IndexWriter/IndexReader this hint is no longer needed (in Lucene 2.9), as all methods taking String/File instead of Directory are deprecated and users should create directory instances and then will automatically get to the place where the LockFactory can be supplied.\n\nThe note should be added to FSDirectory instead. ",
            "author": "Uwe Schindler",
            "id": "comment-12749301"
        },
        {
            "date": "2009-08-30T18:51:06+0000",
            "content": "My initial thought was also that it didn't really belong in IndexWriter - but I sold myself on the fact that IndexWriter talks about locking and offers the force unlock method - so it seems fine to me to mention how to use the optimal locking factory (and generally avoid using the force unlock at all - as an aside I just saw a guy trying to use that the other day as regular code so that they could use two IndexWriters with just commit rather than close - ugg).\n\nI'm not sold either way though - I'd go with whatever. My preference would really be to make it the default (though of course not for 2.9). ",
            "author": "Mark Miller",
            "id": "comment-12749303"
        },
        {
            "date": "2009-08-30T20:24:26+0000",
            "content": "Anyone remember why NativeFSLockFactory is not the default over SimpleFSLockFactory?\n\nIn my testing (long ago) over NFS, I actually found \"native\" locks didn't work as well as \"simple\" locks.  I was also a bit nervous on how well supported \"native\" locks are across different OSs. \n\nMy preference would really be to make it the default (though of course not for 2.9).\n\n+1, I think it's the better default.\n\nPeople who use Lucene over NFS already have to do special things (eg make a custom deletion policy), and far too many users hit the \"leftover lock file\" problem.  We could state in the javadocs that this default will change in 3.0?\n\nMaybe just add one sentence in that IndexWriter locking section, referencing the discussion in NativeFSLockFactory's javadocs about not having the \"leftover lock file\" problem? ",
            "author": "Michael McCandless",
            "id": "comment-12749322"
        },
        {
            "date": "2009-08-30T20:30:43+0000",
            "content": "Let's do it in the following way:\n\n\tdeprecated FSDir.getDirectory() methods return the SimpleLockFactory, as it was before.\n\tThe new FSDir.open() methods and also the direct ctors of SimpleFSDir, MMapFSDir, NIOFSDir default to NativeLocakFactory (these ctors/methods are all new in 2.9)\n\n\n\nBecause of this we have no BW problem. ",
            "author": "Uwe Schindler",
            "id": "comment-12749324"
        },
        {
            "date": "2009-08-30T21:31:14+0000",
            "content": "> Anyone remember why NativeFSLockFactory is not the default over \n> SimpleFSLockFactory?\n\nWasn't it because native locking is somethings implemented with Fcntl, and\nFcntl locking blows chunks?  Especially for a library rather than an\napplication.\n\nFrom the BSD manpage on Fcntl:\n\n\nThis interface follows the completely stupid semantics of System V and IEEE\nStd 1003.1-1988 (``POSIX.1'') that require that all locks associated with a\nfile for a given process are removed when any file descriptor for that file is\nclosed by that process.  This semantic means that applications must be aware\nof any files that a subroutine library may access.  For example if an\napplication for updating the password file locks the password file database\nwhile making the update, and then calls getpwname(3) to retrieve a record, the\nlock will be lost because getpwname(3) opens, reads, and closes the password\ndatabase.  The database close will release all locks that the process has\nassociated with the database, even if the library routine never requested a\nlock on the database.  Another minor semantic problem with this interface is\nthat locks are not inherited by a child process created using the fork(2)\nfunction.  The flock(2) interface has much more rational last close\nsemantics and allows locks to be inherited by child processes.  Flock(2) is\nrecommended for applications that want to ensure the integrity of their locks\nwhen using library routines or wish to pass locks to their children...\n\nThe lockfile may be annoying, but at least it's guaranteed safe on all non-shared\nvolumes when the OS implements atomic file opening.\n\nAre you folks at least able to clean up orphaned lockfiles if the PID it was created\nunder is no longer active? ",
            "author": "Marvin Humphrey",
            "id": "comment-12749330"
        },
        {
            "date": "2009-08-30T21:48:57+0000",
            "content": "This interface follows the completely stupid semantics of System V and IEEE\nStd 1003.1-1988 (``POSIX.1'') that require that all locks associated with a\nfile for a given process are removed when any file descriptor for that file is\nclosed by that process. This semantic means that applications must be aware\nof any files that a subroutine library may access. For example if an\napplication for updating the password file locks the password file database\nwhile making the update, and then calls getpwname(3) to retrieve a record, the\nlock will be lost because getpwname(3) opens, reads, and closes the password\ndatabase. The database close will release all locks that the process has\nassociated with the database, even if the library routine never requested a\nlock on the database. Another minor semantic problem with this interface is\nthat locks are not inherited by a child process created using the fork(2)\nfunction. The flock(2) interface has much more rational last close\nsemantics and allows locks to be inherited by child processes. Flock(2) is\nrecommended for applications that want to ensure the integrity of their locks\nwhen using library routines or wish to pass locks to their children... \n\nI can see how this is not ideal, but I'm not seeing how any of the mentioned issues apply to our simple lock usage ... ",
            "author": "Mark Miller",
            "id": "comment-12749334"
        },
        {
            "date": "2009-08-30T22:22:10+0000",
            "content": "People who use Lucene over NFS already have to do special things (eg make a custom deletion policy), and far too many users hit the \"leftover lock file\" problem. We could state in the javadocs that this default will change in 3.0?\n\n+1 from me - if it made things work out of the box with NFS, I'd vote to keep as is, but the points you mention were in my head too.\n\nMy only worry is current users counting on this default for NFS - but if we put it in the back compat break section (a break in regards to NFS anyway), that should be sufficient warning? ",
            "author": "Mark Miller",
            "id": "comment-12749336"
        },
        {
            "date": "2009-08-31T03:25:19+0000",
            "content": "> I can see how this is not ideal, but I'm not seeing how any of the \n> mentioned issues apply to our simple lock usage ...\n\n\"Simple lock usage\"?!  You must have a bigger brain than me...\n\nAs a matter of fact, I think you're right.   Fcntl locks have two major\ndrawbacks, and upon review I think NativeFSLockFactory avoids both of them.\n\nThe first is that opening and closing a file releases all locks for the entire\nprocess.  Even if you never request a lock on the second filehandle, or if you\nrequest a lock and the request is denied, closing the filehandle releases the\nlock on the first filehandle.  But NativeFSLockFactory avoids that problem by\nkeeping the HashSet of filepaths and ensuring that the same file is never\nopened twice.  Furthermore, since the lockfiles are private to Lucene, you can\nassume that nobody else is going to open them and inadvertently spoil the lock.\n\nThe second is that child processes spawned via fork() do not inherit locks\nfrom the parent process.  If you assume that nobody's ever going to fork a\nJava process, that's not relevant.  (Too bad that won't work for Lucy... we\nhave to support fork().)\n\nI think you're probably safe with Fcntl locks on all non-shared volumes. ",
            "author": "Marvin Humphrey",
            "id": "comment-12749363"
        },
        {
            "date": "2009-08-31T07:37:34+0000",
            "content": "My brain has never been as large as I'd like it to be, but that's  \nnever concerned me too greatly - it's my ego that I have the trouble  \nwith.\n\n\n\tMark\n\n\n\nhttp://www.lucidimagination.com (mobile)\n\nOn Aug 30, 2009, at 11:25 PM, \"Marvin Humphrey (JIRA)\"  \n ",
            "author": "Mark Miller",
            "id": "comment-12749404"
        },
        {
            "date": "2009-08-31T08:13:04+0000",
            "content": "\nLet's do it in the following way:\n\n\tdeprecated FSDir.getDirectory() methods return the SimpleLockFactory, as it was before.\n\tThe new FSDir.open() methods and also the direct ctors of SimpleFSDir, MMapFSDir, NIOFSDir default to NativeLocakFactory (these ctors/methods are all new in 2.9)\n\n\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-12749417"
        },
        {
            "date": "2009-08-31T09:53:05+0000",
            "content": "Here is a patch, that changes the default for ctor-based / open() based instantiations to use NativeFSLockFactory (in fact, if the supplied param to ctor is NULL). Also change javadocs.\n\nIt also deprecates the static FSDirectory.setDisableLocks() [which we should have done already]. One should simple use a ctor/open with NoLockFactory as param to do that.\n\nCurrently only TestIndexReader fails here on windows because of some strange lockfile-delete opeartions. Maybe the testcase must be updated. I will look into this.\n\nIf we want to go this way, we have to put this in 2.9. ",
            "author": "Uwe Schindler",
            "id": "comment-12749448"
        },
        {
            "date": "2009-08-31T09:54:59+0000",
            "content": "I will be happy when 3.0 removes all this FSDirectory deprecated stuff. Its a hell to maintain! ",
            "author": "Uwe Schindler",
            "id": "comment-12749449"
        },
        {
            "date": "2009-08-31T10:49:53+0000",
            "content": "I think we should also fix NativeLockFactory so that if the write lock is in the index dir it doesn't generate the large digest in the file name.  That digest is problematic when two different machines access the same physical dir via different mount names, since that results in different lock file names. ",
            "author": "Michael McCandless",
            "id": "comment-12749459"
        },
        {
            "date": "2009-08-31T12:13:26+0000",
            "content": "With the above patch some more tests are failing, mostly because of the strange lock file names. I think we should fix the tests, at least hardcode the simplelock factory, when it should be tested.\n\nThe backwards-tests seem to pass, as they only use FSDir.getDirectory() which defaults to old standard. That's good. ",
            "author": "Uwe Schindler",
            "id": "comment-12749475"
        },
        {
            "date": "2009-08-31T14:03:03+0000",
            "content": "If we want to go this way, we have to put this in 2.9.\n\nI'd personally be a little (to a lot) afraid to change the default to native during freeze - ",
            "author": "Mark Miller",
            "id": "comment-12749502"
        },
        {
            "date": "2009-08-31T14:10:19+0000",
            "content": "It's only the default for new code, clearly documented; deprecated code stays as it is.\n\nIf we will not get this into 2.9, 3.0 will remove the deprecated parts and the new code (new in 2.9) will change its defaults. ",
            "author": "Uwe Schindler",
            "id": "comment-12749505"
        },
        {
            "date": "2009-08-31T14:14:20+0000",
            "content": "Oh, okay, cool - that makes me feel a little better.\n\nThough new users seeing it as the default now - thats not the worst situation, but I would almost prefer the change go through a dev cycle as the default.\n\nIf others are not feeling as cautious, I wouldn't vote against. ",
            "author": "Mark Miller",
            "id": "comment-12749506"
        },
        {
            "date": "2009-09-01T21:39:25+0000",
            "content": "As nobody else objects, I will update the tests tomorrow and switch to NativeFSLockFactory for the new ctors and FSDir.open(). The old and deprectated API is unchanged.\n\nI will also remove the unneeded lock prefix and use the same lock file name as SimpleFSLockFactory. This would also help users mixing both lock factories together (by using deprecated code defaulting to Simple and new code defaulting to Native). The SimpleLockFactory would also detect a lock, if the NativeFSLockFactory created it (because file has same name). The tests will then also pass (which depended on file name).\n\nWill go to bed now. ",
            "author": "Uwe Schindler",
            "id": "comment-12750117"
        },
        {
            "date": "2009-09-02T13:10:03+0000",
            "content": "I think we should also fix NativeLockFactory so that if the write lock is in the index dir it doesn't generate the large digest in the file name. That digest is problematic when two different machines access the same physical dir via different mount names, since that results in different lock file names. \n\nThe digest problem is not easy to solve: It happens for all LockFactories if they are not automatically created (when LockFactory==null). As soon as you call FSDir.open(..., new SimpleLockFactory(...)) you also get this prefix. It does not appear, when the FSDir is created by FSDir.getDirectory(), as the init() method cleans the lockPrefix directly after setting the lockfactory (the lock factory setter sets the prefix).\n\nThe prefix is only important, if the lock is not placed inside the index directory. The best would be that FSDir would simply return null in getLockId(), when the LockFactory uses the same path as the Directory. For that to work, the LockFactory should have a getter for the fs path.\n\nI will try some possibilities and post a patch. ",
            "author": "Uwe Schindler",
            "id": "comment-12750425"
        },
        {
            "date": "2009-09-02T17:28:00+0000",
            "content": "Here is the patch:\n\n\tSimpleFSLockFactory and NativeFSLockFactory now have the same abstract superclass providing setLockDir and getLockDir. Using this method, it is possible for directory instances to detect, if the locks reside in the directory itsself and so a lock prefix is switched off.\n\tThe isLocked() bug in NativeFSLockFactory (LUCENE-1885) is solved by implementing what was described in this issue.\n\taquireTestLock in NativeFSLockFactory was removed from ctor and only called for the first makeLock() call. This prevents the LockFactory from creating the directory when not needed (e.g. opening non-existent index).\n\n\n\nI have one idea (which is  a new feature): How about providing a ctor to NativeFSLockFactory and SimpleFSLockFactory without param. When this LF is added to a FSDir, it would default to set the LockDir to itsself (if lf.getLockDir()==null) lf.setLockDir(this.directory)). This would prevent users from always giving the directory twice? Any thoughts, I would like to have that.\n\nBecause of the missing lockPrefix for locks inside the directory itsself one backwards test (TestLockFactory) must be changed in backwards-branch, too. ",
            "author": "Uwe Schindler",
            "id": "comment-12750549"
        },
        {
            "date": "2009-09-02T17:38:51+0000",
            "content": "Any thoughts, I would like to have that.\n\n+1 - def a good idea.\n\nI'd kind of like to deprecate the sys property to set the lock dir as well - we have done a good job of moving away from that stuff elsewhere. ",
            "author": "Mark Miller",
            "id": "comment-12750552"
        },
        {
            "date": "2009-09-02T17:47:03+0000",
            "content": "I'd kind of like to deprecate the sys property to set the lock dir as well - we have done a good job of moving away from that stuff elsewhere.\n\nIt is already deprecated and even not used anymore:\n\n  /**\n   * Directory specified by <code>org.apache.lucene.lockDir</code>\n   * or <code>java.io.tmpdir</code> system property.\n\n   * @deprecated As of 2.1, <code>LOCK_DIR</code> is unused\n   * because the write.lock is now stored by default in the\n   * index directory.  If you really want to store locks\n   * elsewhere you can create your own {@link\n   * SimpleFSLockFactory} (or {@link NativeFSLockFactory},\n   * etc.) passing in your preferred lock directory.  Then,\n   * pass this <code>LockFactory</code> instance to one of\n   * the <code>getDirectory</code> methods that take a\n   * <code>lockFactory</code> (for example, {@link #getDirectory(String, LockFactory)}).\n   */\n  public static final String LOCK_DIR = System.getProperty(\"org.apache.lucene.lockDir\",\n                                                           System.getProperty(\"java.io.tmpdir\"));\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12750560"
        },
        {
            "date": "2009-09-02T17:52:42+0000",
            "content": "heh - my jetlag is full effect - I wasn't looking at the lockdir, I was looking at:\n\n\n    String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n\n\n*edit\n\nI'm too tired to be emailing - how about deprecating this one though? ",
            "author": "Mark Miller",
            "id": "comment-12750563"
        },
        {
            "date": "2009-09-02T18:08:01+0000",
            "content": "It is indirectly deprecated, as it is only used, when FSDir.getDirectory() is used. In all other cases NativeFSLockFactory is used or the given one. Maybe we should add a note somewhere in javadocs. The same with the default FSDir class property (its also indirectly deprecated.\n\nI know the code is very ugly, but this is how it works  ",
            "author": "Uwe Schindler",
            "id": "comment-12750573"
        },
        {
            "date": "2009-09-02T18:16:57+0000",
            "content": "Interesting - yeah, its hard to follow it all  I havn't had a chance to apply and look at your patch either.\n\nMy main issue with it is that there a bunch of places where it says you can set the lock factory that way (not in deprecated javadoc sections). We should prob remove all those. ",
            "author": "Mark Miller",
            "id": "comment-12750581"
        },
        {
            "date": "2009-09-02T18:25:40+0000",
            "content": "Patch looks good!  I like the deprecation of FSDir.set/getDisableLocks and the new FSLockFactory approach.\n\nMaybe we should add a note somewhere in javadocs. The same with the default FSDir class property (its also indirectly deprecated\n\n+1, I think we should deprecate these global system properties. ",
            "author": "Michael McCandless",
            "id": "comment-12750588"
        },
        {
            "date": "2009-09-02T19:51:45+0000",
            "content": "Final patch.\n\nI implemented additional:\n\n\tall FS-based lock factories use the same prefix encoding. They are now (mostly) compatible. E.g. a lock obtained with NativeFSLockFactory would also be seen as locked with SimpleFSLockFactory.\n\tAdded LockFactory ctors with no param. The FSDir will set the lockdir to itsself in this case.\n\tAdded test for LUCENE-1885\n\tAdded note about deprecation of all FSDir related system properties, fixed some docs\n\n\n\nPlease test this extensively! I hope, I found all problems. ",
            "author": "Uwe Schindler",
            "id": "comment-12750632"
        },
        {
            "date": "2009-09-02T20:26:16+0000",
            "content": "E.g. a lock obtained with NativeFSLockFactory would also be seen as locked with SimpleFSLockFactory.\n\nThis is neat, but I don't think we should advertise it?\n\nIe, it's unsupported to mix different LockFactory impls.  EG, in this case, the reverse is not true, right? ",
            "author": "Michael McCandless",
            "id": "comment-12750646"
        },
        {
            "date": "2009-09-02T20:37:15+0000",
            "content": "This is neat, but I don't think we should advertise it?\n\nDefinitely not.\n\nb.q. Ie, it's unsupported to mix different LockFactory impls. EG, in this case, the reverse is not true, right?\n\nExactly. ",
            "author": "Uwe Schindler",
            "id": "comment-12750650"
        },
        {
            "date": "2009-09-02T20:46:57+0000",
            "content": "Patch looks good!  Don't forget to fix back compat tests. ",
            "author": "Michael McCandless",
            "id": "comment-12750655"
        },
        {
            "date": "2009-09-02T21:04:07+0000",
            "content": "Yes, I already prepared the BW test change (i simply disabled this test with the lock prefix).\n\n\nall FS-based lock factories use the same prefix encoding. They are now (mostly) compatible. E.g. a lock obtained with NativeFSLockFactory would also be seen as locked with SimpleFSLockFactory\n\nIe, it's unsupported to mix different LockFactory impls. \n\nOne important fact, because I enabled this: The deprecated methods in IndexWriter/IndexReader taking String/File args and FSDirectory.getDirectory() still use the SimpleFSLockFactory per default (or the system property). If some use mixes these deprecated calls with e.g. FSDir.open() he has still a chance to get locking work. But it is unsupported. I also added a extra note in the CHANGES.txt now, that warns because of this trap. ",
            "author": "Uwe Schindler",
            "id": "comment-12750664"
        },
        {
            "date": "2009-09-03T06:15:20+0000",
            "content": "Formatting changes in CHANGES.txt and some minor tweaks.\n\nAlso changed the isLocked() method for LUCENE-1885 to shortcut, if no lock file is present. In this case, without a lockfile it may also be not locked. This prevent NativeFSLock for creating the lock short time without really using it.\n\nIt would be good, if somebody could also test this with strange file systems. I only tested Windows and Solaris ",
            "author": "Uwe Schindler",
            "id": "comment-12750839"
        },
        {
            "date": "2009-09-03T22:05:39+0000",
            "content": "I will commit soon! ",
            "author": "Uwe Schindler",
            "id": "comment-12751190"
        },
        {
            "date": "2009-09-03T22:18:07+0000",
            "content": "Committed revision: 811157 ",
            "author": "Uwe Schindler",
            "id": "comment-12751195"
        },
        {
            "date": "2009-11-20T13:01:30+0000",
            "content": "FYI: other Java projects also implement exclusive locking, and automatic removal of such a file. \n\nApache Jackrabbit uses FileChannel.lock() by default, but there are problems with some NFS implementations (some don't release the lock after restart, some don't support locks at all). Also, some operating systems / file systems allow multiple write locks within the same process (possibly in different class loaders). Jackrabbit works around that by (mis-)using a system property. See http://wiki.apache.org/jackrabbit/RepositoryLock\n\nFor the H2 Database Engine I implemented a cooperative locking mechanism: http://www.h2database.com/html/advanced.html#file_locking_protocols - I have also ported that to Apache Jackrabbit (\"Cooperative File Lock Mechanism\"). It always works, but needs a background thread. H2 also supports a mechanism based on a server socket (open a server socket and write the IP address and port to the file) - but this is problematic if the network is misconfigured (localhost not bound to 127.0.0.1 and such) which does happen in practice. ",
            "author": "Thomas Mueller",
            "id": "comment-12780540"
        },
        {
            "date": "2009-11-20T16:55:18+0000",
            "content": "> http://www.h2database.com/html/advanced.html#file_locking_protocols\n\nI'm a little concerned about the suitability of the polling approach for a\nlow-level library like Lucene \u2013 shouldn't active code like that live in the\napplication layer?  Is it possible to exceed the polling interval for a low\npriority process on a system under heavy load?  What happens when the app\nsleeps?\n\nFor removing stale lock files, another technique is to incorporate the host\nname and the pid.  So long as you can determine that the lock file belongs to\nyour machine and that the PID is not active, you can safely zap it.\n\nThen tricky bit is how you get that information into the lock file.  If you\ntry to write that info to the lock file itself after an O_EXCL open, creating\na fully valid lock file is no longer an atomic operation.  \n\nThe approach suggested by the creat(2) man page and endorsed in the Linux NFS\nFAQ involves hard links:\n\n\n    The solution for performing atomic file locking using a lockfile\n    is to create a unique file on the same file system (e.g.,\n    incorporating hostname and pid), use link(2) to make a link to the\n    lockfile. If link() returns 0, the lock is successful. Otherwise,\n    use stat(2) on the unique file to check if its link count has\n    increased to 2, in which case the lock is also successful. \n\n\n\nThis approach should also work on Windows for NTFS file systems since Windows\n2000 thanks to the CreateHardLink() function.  (Samba file shares, you're out\nof luck.)  However, I'm not sure about the state of support for hard links in\nJava.\n\nIf you're interested in continuing this discussion, we should probably take it\nsomewhere other than this closed issue. ",
            "author": "Marvin Humphrey",
            "id": "comment-12780647"
        },
        {
            "date": "2009-11-22T10:35:49+0000",
            "content": "> take it somewhere other than this closed issue.\n\nYes, where?\n\n> shouldn't active code like that live in the application layer?\n\nWhy?\n\n> exceed the polling interval for a low priority process on a system under heavy load?\n\nThe watchdog thread runs with high priority (see the H2 docs). It's still possible the thread isn't run at all, but highly unlikely. High priority threads are quite reliable. I wrote a MP3 player in Java (mp3transform) which I used a lot, I never heard any gaps. If the thread can be avoided, that would be great of course. I'm just trying to say that in theory, the thread is problematic, but in practice it isn't. While file locking is not a problem in theory, but in practice.\n\n> What happens when the app sleeps?\n\nGood question! Standby / hibernate are not supported. I didn't think about that. Is there a way to detect the wakeup?\n\n> host name and the pid\n\nYes. It is not so easy to get the PID in Java, I found: http://stackoverflow.com/questions/35842/process-id-in-java \"ManagementFactory.getRuntimeMXBean().getName()\". What do you do if the lock was generated by another machine? I tried with using a server socket, so you need the IP address, but unfortunately, sometimes the network is not configured correctly (but maybe it's possible to detect that). Maybe the two machines can't access each other over TCP/IP.\n\n> hard links\n\nYes, but it looks like this doesn't work always.\n ",
            "author": "Thomas Mueller",
            "id": "comment-12781111"
        },
        {
            "date": "2009-11-22T10:38:51+0000",
            "content": "> detect the wakeup / polling interval exceeded\n\nAn obvious solution is to use System.currentTimeMillis() and compare with the expected delay. And then stop writing and throw a exception. ",
            "author": "Thomas Mueller",
            "id": "comment-12781113"
        },
        {
            "date": "2009-11-23T18:40:13+0000",
            "content": ">> take it somewhere other than this closed issue.\n>\n> Yes, where?\n\nThe java-dev list: http://markmail.org/message/ivdgmxrivs3jzhfe ",
            "author": "Marvin Humphrey",
            "id": "comment-12781531"
        },
        {
            "date": "2011-05-05T15:33:42+0000",
            "content": "A previous comment read: \"My only worry is current users counting on this default for NFS - but if we put it in the back compat break section (a break in regards to NFS anyway), that should be sufficient warning?\"\n\nWe use NFS with Lucene 2.9.4, and we have just noticed the change to NativeFSLockFactory in 2.9. Despite the above comment, it was missing from the 2.9.0 changes.txt. Unfortunately using it has led to index corruptions on several occasions.\n\nPlease can everyone ensure that changes like this make the changes.txt file so that users can properly impact assess upgrades to new versions. ",
            "author": "Greg Tarr",
            "id": "comment-13029373"
        },
        {
            "date": "2011-05-05T16:55:21+0000",
            "content": "Uggggggh, sorry about that Greg.  Somehow this obviously very important note was lost in this issue.\n\nCan you describe how you use NFS and Lucene?  Is there a single machine writing to the NFS dir, or more than one? ",
            "author": "Michael McCandless",
            "id": "comment-13029430"
        },
        {
            "date": "2011-05-05T21:54:03+0000",
            "content": "Instances of lucene run on machines with the indexes hosted remotely on a SAN with access through a fileserver. We've now changed our implementation to SimpleFSLockFactory in the hope this will lead to the write.lock files behaving properly. ",
            "author": "Greg Tarr",
            "id": "comment-13029599"
        },
        {
            "date": "2011-05-05T23:38:12+0000",
            "content": "But multiple machines are able to write to the same index on the SAN?  (And must therefore rely on write.lock to protect the index from two writers at once).\n\nWhat corruption are you seeing...? ",
            "author": "Michael McCandless",
            "id": "comment-13029654"
        },
        {
            "date": "2011-05-19T12:17:00+0000",
            "content": "Yes, we have multiple machines being able to write to the same index on the SAN.  ",
            "author": "Greg Tarr",
            "id": "comment-13036142"
        },
        {
            "date": "2011-05-19T16:47:11+0000",
            "content": "OK.  I would strongly recommend using the lock stress test (LockStressTest/LockVerifyServer) in Lucene to verify whichever locking you're trying is in fact working properly. ",
            "author": "Michael McCandless",
            "id": "comment-13036289"
        },
        {
            "date": "2011-09-10T23:35:09+0000",
            "content": "Dear JIRA jira@apache.org,\n\nPlease fix the embedding code of your Nabble application \"[jira] Commented: (LUCENE-1877) Use NativeFSLockFactory as default for new API (direct ctors & FSDir.open)\" as soon as possible because Nabble will stop supporting that code in a few days. Here is the code you should use in your HTML page:\n\n<a id=\"nabblelink\" href=\"http://lucene.472066.n3.nabble.com/jira-Created-LUCENE-1877-Improve-IndexWriter-javadoc-on-locking-tp574303p574326.html\">[jira] Commented: (LUCENE-1877) Use NativeFSLockFactory as default for new API (direct ctors & FSDir.open)</a>\n<script src=\"http://http://lucene.472066.n3.nabble.com/embed/f574326\"></script>\n\nHere is the link to your application:\nhttp://lucene.472066.n3.nabble.com/jira-Created-LUCENE-1877-Improve-IndexWriter-javadoc-on-locking-tp574303p574326.html\n\nIf you don't update your HTML page, the embedded application will stop working. Note that we won't send more emails about this issue and we apologize for the inconvenience.\n\nSincerely,\nThe Nabble team\n ",
            "author": "Nabble",
            "id": "comment-13102178"
        }
    ]
}