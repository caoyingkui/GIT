{
    "id": "LUCENE-4132",
    "title": "IndexWriterConfig live settings",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "A while ago there was a discussion about making some IW settings \"live\" and I remember that RAM buffer size was one of them. Judging from IW code, I see that RAM buffer can be changed \"live\" as IW never caches it.\n\nHowever, I don't remember which other settings were decided to be \"live\" and I don't see any documentation in IW nor IWC for that. IW.getConfig mentions:\n\n\n* <b>NOTE:</b> some settings may be changed on the\n* returned {@link IndexWriterConfig}, and will take\n* effect in the current IndexWriter instance.  See the\n* javadocs for the specific setters in {@link\n* IndexWriterConfig} for details.\n\n\n\nBut there's no text on e.g. IWC.setRAMBuffer mentioning that.\n\nI think that it'd be good if we make it easier for users to tell which of the settings are \"live\" ones. There are few possible ways to do it:\n\n\n\tIntroduce a custom @live.setting tag on the relevant IWC.set methods, and add special text for them in build.xml\n\t\n\t\tOr, drop the tag and just document it clearly.\n\t\n\t\n\n\n\n\n\tSeparate IWC to two interfaces, LiveConfig and OneTimeConfig (name proposals are welcome !), have IWC impl both, and introduce another IW.getLiveConfig which will return that interface, thereby clearly letting the user know which of the settings are \"live\".\n\n\n\nIt'd be good if IWC itself could only expose setXYZ methods for the \"live\" settings though. So perhaps, off the top of my head, we can do something like this:\n\n\tIntroduce a Config object, which is essentially what IWC is today, and pass it to IW.\n\tIW will create a different object, IWC from that Config and IW.getConfig will return IWC.\n\tIWC itself will only have setXYZ methods for the \"live\" settings.\n\n\n\nIt adds another object, but user code doesn't change - it still creates a Config object when initializing IW, and need to handle a different type if it ever calls IW.getConfig.\n\nMaybe that's not such a bad idea?",
    "attachments": {
        "LUCENE-4132.patch": "https://issues.apache.org/jira/secure/attachment/12531843/LUCENE-4132.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-11T12:51:33+0000",
            "content": "I don't think we should add another Config object, making things complicated for such a very very expert use case.\nEven ordinary users need to use IWC, and 99% of them don't care about changing things live.\n\nI'm also nervous about documenting which things can/cannot be changed live unless there are unit tests for each one.\nIf we want to refactor indexwriter in some way that really cleans it up, but makes something \"un-live\", then I think\nthats totally fair game and we should be able to do it, but the docs shouldnt be wrong. ",
            "author": "Robert Muir",
            "id": "comment-13292786"
        },
        {
            "date": "2012-06-11T13:00:19+0000",
            "content": "\nI don't think we should add another Config object, making things complicated for such a very very expert use case.\nEven ordinary users need to use IWC, and 99% of them don't care about changing things live.\n\nI'm not proposing to complicate matters for 99.9% of the users. On the contrary \u2013 users will still do:\n\n\nIndexWriterConfig config = new IndexWriterConfig(...);\n// configure it\nIndexWriter writer = new IndexWriter(dir, config);\n\n\n\nOnly the expert users who will want to change some settings \"live\", will do:\n\nConfig conf = writer.getConfig(); // NOTE: it's a different type\nconf.setSomething();\n\n\n\nConfig can be an IW internal type and most users won't even be aware of it. Today we document that the given IWC to IW ctor is cloned and it will remain as such. Only instead of being cloned to an IWC type, it will be cloned to a Config (or LiveConfig) type.\n\nIWC documentation isn't changed, IW.getConfig changes by removing that NOTE, and if you care about \"lively\" configure IW, you can do so through LiveConfig. And we can test that type too ! ",
            "author": "Shai Erera",
            "id": "comment-13292788"
        },
        {
            "date": "2012-06-11T13:03:58+0000",
            "content": "Right, but i suppose changing live settings isnt necessarily the only use case for writer.getConfig() ?\n\nToday someone can take the config off of there and set it on another writer (it will be privately cloned).\nso i think if we want to do it this way, we could just keep getConfig as is, and add getLiveConfig which \nactually returns the same object, just cast through that interface. ",
            "author": "Robert Muir",
            "id": "comment-13292789"
        },
        {
            "date": "2012-06-11T13:06:41+0000",
            "content": "ok actually i was partially wrong, one can no longer actually use the IWC from a writer since its marked as \"owned\".\nBut they can still grab it and look at stuff like getIndexDeletionPolicy, even though thats not live.\n\nI guess to be less confusing we should add getLiveConfig and just remove getConfig completely? ",
            "author": "Robert Muir",
            "id": "comment-13292792"
        },
        {
            "date": "2012-06-11T13:10:06+0000",
            "content": "Today someone can take the config off of there and set it on another writer (it will be privately cloned)\n\nTrue, but I'm not aware of such use, and still someone can cache the IWC himself and pass it to multiple writers?\n\nIf getConfig() returns an IWC which has setters(), that'll confuse the user for sure, because those settings won't take effect.\n\nI prefer that getConfig return the new LiveConfig type, with few setters and all getters (i.e. all getXYZ from IWC), and let whoever want to pass the same IWC instance to other writers handle it himself.\n\nAlternatively, we can add another ctor which takes a LiveConfig object, that is returned from getConfig(), but I prefer to avoid that until someone actually tells us that he shares the same IWC with other writers, and he cannot cache it himself? ",
            "author": "Shai Erera",
            "id": "comment-13292793"
        },
        {
            "date": "2012-06-11T13:10:27+0000",
            "content": "sorry, instead of nuking getConfig make it pkg-private. Things like RandomIndexWriter want to peek into some\nun-live settings (like codec), I think we should still be able to look at these things for tests  ",
            "author": "Robert Muir",
            "id": "comment-13292794"
        },
        {
            "date": "2012-06-11T13:11:32+0000",
            "content": "I guess to be less confusing we should add getLiveConfig and just remove getConfig completely?\n\nYes that's the proposal - either getConfig or getLiveConfig, but return a LiveConfig object with all the getters of IWC, and only the setters that we want to support. ",
            "author": "Shai Erera",
            "id": "comment-13292795"
        },
        {
            "date": "2012-06-11T13:12:13+0000",
            "content": "\nTrue, but I'm not aware of such use, and still someone can cache the IWC himself and pass it to multiple writers?\n\nI'm just talking about the general issue that IW.getConfig is not only used to change settings live.\nToday our tests use this to peek at the settings on the IW (see my RandomIndexWriter example)... ",
            "author": "Robert Muir",
            "id": "comment-13292797"
        },
        {
            "date": "2012-06-12T16:12:37+0000",
            "content": "Phew, that was tricky, but here's the end result \u2013 refactored IndexWriterConfig into the following class hierarchy:\n\n\n\tReadOnlyConfig\n\t\n\t\tAbstractLiveConfig\n\t\t\n\t\t\tLiveConfig\n\t\t\tIndexWriterConfig\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tIndexWriter now takes ReadOnlyConfig, which is an abstract class with all abstract getters.\n\n\n\n\n\tLiveConfig is returned from IndexWriter.getConfig(), and is initialized with the ReadOnlyConfig given to IW. It overrides all getters to delegate the call to the given (cloned) config. It is public but with a package-private ctor.\n\n\n\n\n\tIndexWriterConfig is still the entry object for users to initialize an IndexWriter, and adds its own setters for the non-live settings.\n\n\n\n\n\tThe AbstractLiveConfig in the middle is used for generics and keeping the builder pattern. That way, LiveConfig.set1() and IndexWriterConfig.set1() return the proper type (LiveConfig or IndexWriterConfig respectively).\n\n\n\nI would have liked IW to keep getting IWC in its ctor, but there's one test that prevents it: TestIndexWriterConfig.testIWCInvalidReuse, which initializes an IW, call getConfig and passes it to another IW (which is invalid). I don't know why it's invalid, as IW clones the given IWC, but that is one reason why I had to factor the getters out to a shared ReadOnlyConfig.\n\nROC is not that bad though \u2013 it kind of protects against IW changing the given config ...\n\nAt least, no user code should change following these changes, except from changing the variable type used to cache IW.getConfig() to LiveConfig, which is what we want. ",
            "author": "Shai Erera",
            "id": "comment-13293725"
        },
        {
            "date": "2012-06-12T17:20:29+0000",
            "content": "I had a brief chat about IWC.usedByIW with Mike (was introduced in LUCENE-4084), and we both agree it's not needed anymore, as now with IW.getConfig() returning LiveConfig and IW taking IWC in its ctor, no one can pass the same instance returned from getConfig to a new IW, and so the relevant test can be nuked, together with that AtomicBoolean.\n\nI'll nuke them then, and absorb ReadOnlyConfig into AbstractLiveConfig and stick with just two concrete clases: LiveConfig returned from IW.getConfig and IWC given to its ctor.\n\nI'll post a patch probably tomorrow. ",
            "author": "Shai Erera",
            "id": "comment-13293781"
        },
        {
            "date": "2012-06-12T17:22:13+0000",
            "content": "I think the class hierarchy/generics are too tricky.\nWhy do we need generics? ",
            "author": "Robert Muir",
            "id": "comment-13293783"
        },
        {
            "date": "2012-06-12T17:24:23+0000",
            "content": "That's certified and suggested by the generics policeman. The generics are needed to make the builder API work correct (compare Enum<T extends Enum<T>>) ",
            "author": "Uwe Schindler",
            "id": "comment-13293784"
        },
        {
            "date": "2012-06-12T17:26:17+0000",
            "content": "Its not certified by me. Its too confusing for a class everyone must use.\n\nI dont care about the builder pattern, builder pattern simply isnt worth it for confusing generics on a config class. ",
            "author": "Robert Muir",
            "id": "comment-13293788"
        },
        {
            "date": "2012-06-12T17:28:14+0000",
            "content": "If we remove IWC's chained setters (return void), can we simplify this? ",
            "author": "Michael McCandless",
            "id": "comment-13293791"
        },
        {
            "date": "2012-06-12T17:29:50+0000",
            "content": "We could, I am against, I love IndexWriterConfig! ",
            "author": "Uwe Schindler",
            "id": "comment-13293792"
        },
        {
            "date": "2012-06-12T18:57:34+0000",
            "content": "I love it too, and the changes would be too horrible. We use this builder pattern everywhere. Remember, the changes in this issue are to not confuse people, that's it. They don't cause users to change their code almost at all.\n\nI don't quite understand what's the issue with the generics. If you don't look at IWC / LC code, it's not visible at all. I mean, in your application code, you won't see any generics. ",
            "author": "Shai Erera",
            "id": "comment-13293844"
        },
        {
            "date": "2012-06-12T19:27:19+0000",
            "content": "The generics is because I wanted to not duplicate code between LiveConfig and IWC, so that the live settings share the same setXYZ code. First I thought to write a separate LiveConfig class, but then the setter methods need to be duplicated. I'll take another look \u2013 perhaps IWC.setRAMBuffer for instance can just delegate to a private LiveConfig instance.setter. That will keep the APIs without generics, with perhaps so jdoc duplication ...\n\nI can take a stab at something like that, or if you have another proposal. I don't want to let go of the builder pattern though. ",
            "author": "Shai Erera",
            "id": "comment-13293868"
        },
        {
            "date": "2012-06-12T20:01:09+0000",
            "content": "I think the generics here are not very complicated and also not really user facing. its only a tool here to make things nice for the user I think that justifies it. so I think this looks good though. ",
            "author": "Simon Willnauer",
            "id": "comment-13293885"
        },
        {
            "date": "2012-06-13T12:58:36+0000",
            "content": "I dislike chaining (\"return this\" from setters) since it's so easily and often abused.  Here's an example from Lucene's tests:\n\n\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE)\n             .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxThreadStates))\n             .setReaderPooling(doReaderPooling).setMergePolicy(newLogMergePolicy()));\n\n\n\nI don't quite understand what's the issue with the generics. If you don't look at IWC / LC code, it's not visible at all. I mean, in your application code, you won't see any generics.\n\nIt's also important to keep our non-user-facing sources simple too, so\nour source code is approachable to new users.\n\nHaving 4 classes, plus generics, for what ought to be a simple\nconfiguration class, is too much in my opinion.  I'd rather stick with\njavadocs explaining what can and cannot be changed live.  This (wanting\nto change live seettings) is expert usage...\n\nHopefully, we can simplify the approach here. ",
            "author": "Michael McCandless",
            "id": "comment-13294427"
        },
        {
            "date": "2012-06-13T13:31:10+0000",
            "content": "Patch removes ReadOnlyConfig and the tests from TestIWC that ensure that the same IWC instance isn't shared between IWs. This is no longer needed, since now IW takes IWC and returns LiveConfig, so it cannot be passed to another IW, simply because the compiler won't allow it.\n\nThis is a better solution IMO than maintaining an AtomicBoolean + tests that enforce that + RuntimeException that is known only during testing, or worse.\n\nI don't think we should disable the Builder pattern - our tests use it, and I bet users use it too (my code does). If it bothers anyone, he can separately change all our tests to call the setters one per line.\n\nThe generics, as Simon said, are just a tool to save code duplication and make sure that IWC and LC have the same getter signatures, and share the live setters.\n\nThe fact is, no user code will change by that change, and really, no Lucene developer should be affected by it either \u2013 this is just a configuration class, adding set/get methods to it will be as easy as they were before. But now compile-wise, we don't let even expert users change non-live settings. ",
            "author": "Shai Erera",
            "id": "comment-13294447"
        },
        {
            "date": "2012-06-13T18:06:54+0000",
            "content": "If there are no objections, I'd like to commit this by tomorrow. ",
            "author": "Shai Erera",
            "id": "comment-13294596"
        },
        {
            "date": "2012-06-13T19:32:07+0000",
            "content": "I still feel the same way as before. I'm sorry you don't agree with me, but please don't shove the change in. ",
            "author": "Robert Muir",
            "id": "comment-13294626"
        },
        {
            "date": "2012-06-13T19:51:58+0000",
            "content": "Please don't rush this Shai.\n\nI still don't like the added complexity of the current patch.  I do\nthink compile-time checking of live configuration would be neat/nice to\nhave (for expert users) but not at the cost of the added complexity\n(abstract classes, generics) of the current patch.\n\nThis is too much for what should be (is, today) a simple configuration\nclass.  I'd rather keep what we have today.\n\nMaybe we can somehow simplify the patch while enabling strong type\nchecking of what's live and what isn't?  Or, we can enable the type\nchecking, but dynamically at runtime; this way at least you'd get an\nexception if you tried to change something.  Or, stop chainging (return\nvoid from all setters)... then the subclassing is straightforward.  Or,\nwe simply improve javadocs.  All of these options would be an\nimprovement.\n\nOr, we just keep what we have today... changing live settings is an\nexpert use case.  We shouldn't make our code more complex for it.\n\nYou've already done the hardest part here (figuring out what is live and\nwhat isn't)! ",
            "author": "Michael McCandless",
            "id": "comment-13294632"
        },
        {
            "date": "2012-06-14T07:26:47+0000",
            "content": "Sorry if it came across like that, but I don't mean to rush or shove this issue in. I'm usually after consensus and I appreciate your feedback.\n\nI took another look at this, and found a solution without generics. Funny thing is, that's the first solution that came to my mind, but I guess at the time it didn't picture well enough, so I discarded it .\n\nNow we have only LiveConfig and IndexWriterConfig, where IWC extends LC and overrides all setter methods. The \"live\" setters are overridden just to return IWC type, and call super.setXYZ(). So we don't have code dup, and whoever has IWC type at hand, will receive IWC back from all set() methods.\n\nLC is public class but with package-private ctors, one that takes IWC (used by IndexWriter) and one that takes Analyzer+Version, to match IWC's. It contains all \"live\" members as private, and the others as protected, so that IWC can set them. Since it cannot be sub-classed outside the package, this is 'safe'.\n\nThe only thing that bothers me, and I'm not sure if it can be fixed, but this is not critical either, is TestIWC.testSettersChaining(). For some reason, even though I override the setters from LC in IWC, and set their return type to IWC, reflection still returns their return type as LiveConfig. This only affects the test, since if I do:\n\nIndexWriterConfig conf;\nconf.setMaxBufferedDocs(); // or any other set from LC\n\n\nthe return type is IWC.\n\nIf anyone knows how to solve it, please let me know, otherwise we'll just have to live with the modification to the test, and the chance that future \"live\" setters may be incorrectly overridden by IWC to not return IWC type That is not an error, just a convenience.\n\nBesides that, and if I follow your comments and concerns properly, I think this is now ready to commit \u2013 there's no extra complexity (generics, 3 classes etc.), and with better compile time protection against misuse. ",
            "author": "Shai Erera",
            "id": "comment-13294859"
        },
        {
            "date": "2012-06-14T07:44:30+0000",
            "content": "Hi Shai,\n\nignore all methods with isSynthetic() set (that are covariant overrides compatibility methods, access$xx() methods for access to private fields/ctors/...). ",
            "author": "Uwe Schindler",
            "id": "comment-13294867"
        },
        {
            "date": "2012-06-14T07:53:24+0000",
            "content": "Thanks Uwe. The test is now fixed by saving all 'synthetic' methods and all 'setter' methods and verifying in the end that all of them were received from IWC too. ",
            "author": "Shai Erera",
            "id": "comment-13294877"
        },
        {
            "date": "2012-06-14T10:20:18+0000",
            "content": "Can we override all methods so the javadocs aren't confusing.\n\nI don't want the methods split in the javadocs between IWC and LiveConfig: LiveConfig is expert and should be a subset, not a portion. ",
            "author": "Robert Muir",
            "id": "comment-13294939"
        },
        {
            "date": "2012-06-14T12:22:36+0000",
            "content": "Also can we rename it to LiveIndexWriterConfig?  LiveConfig is too generic I think... ",
            "author": "Michael McCandless",
            "id": "comment-13294989"
        },
        {
            "date": "2012-06-14T12:54:43+0000",
            "content": "Can we override all methods so the javadocs aren't confusing.\n\nGood idea! Done\n\nAlso can we rename it to LiveIndexWriterConfig?\n\nDone ",
            "author": "Shai Erera",
            "id": "comment-13295002"
        },
        {
            "date": "2012-06-14T18:39:24+0000",
            "content": "thanks, +1 ",
            "author": "Robert Muir",
            "id": "comment-13295220"
        },
        {
            "date": "2012-06-14T19:48:55+0000",
            "content": "Thanks Robert. I'll wait until Sunday and commit it. ",
            "author": "Shai Erera",
            "id": "comment-13295269"
        },
        {
            "date": "2012-06-15T00:07:00+0000",
            "content": "Hmm we are no longer cloning the IWC passed into IW?  Maybe we shouldn't remove testReuse? ",
            "author": "Michael McCandless",
            "id": "comment-13295394"
        },
        {
            "date": "2012-06-15T04:58:18+0000",
            "content": "Good catch Mike ! It went away in the last changes. I re-added testReuse, with asserting that e.g. the MP instances returned from LiveIWC are not the same. ",
            "author": "Shai Erera",
            "id": "comment-13295458"
        },
        {
            "date": "2012-06-15T11:31:34+0000",
            "content": "I re-added testReuse, with asserting that e.g. the MP instances returned from LiveIWC are not the same.\n\nThanks!\n\nShouldn't clone() be protected in LiveIndexWriterConfig and public only in IndexWriterConfig?\n\nIe, users should never have any reason to clone the live config? ",
            "author": "Michael McCandless",
            "id": "comment-13295598"
        },
        {
            "date": "2012-06-15T12:51:07+0000",
            "content": "Shouldn't clone() be protected in LiveIndexWriterConfig and public only in IndexWriterConfig?\n\nI guess you're right. In fact, I think that LiveIWC should not even be Cloneable, only IWC should? I'll take a look later when I'm near the code. ",
            "author": "Shai Erera",
            "id": "comment-13295634"
        },
        {
            "date": "2012-06-17T11:19:33+0000",
            "content": "Patch removes Cloenable from LiveIWC. Now only IWC is Cloenable. ",
            "author": "Shai Erera",
            "id": "comment-13393528"
        },
        {
            "date": "2012-06-18T08:25:54+0000",
            "content": "Committed revision 1351225 (trunk) and revision 1351229 (4x).\n\nThanks all for your comments ! ",
            "author": "Shai Erera",
            "id": "comment-13395477"
        },
        {
            "date": "2012-06-18T12:05:02+0000",
            "content": "CHANGES.txt is mangled ",
            "author": "Robert Muir",
            "id": "comment-13395844"
        },
        {
            "date": "2012-06-18T12:10:48+0000",
            "content": "The 4.x commit also breaks the builds, looks like duplicate merges to same file. ",
            "author": "Uwe Schindler",
            "id": "comment-13395846"
        },
        {
            "date": "2012-06-18T20:42:08+0000",
            "content": "The 4.x commit also breaks the builds, looks like duplicate merges to same file.\n\nThis was solved by cleaning workspace on Apache's Jenkins. Must have been a SVN problem. ",
            "author": "Uwe Schindler",
            "id": "comment-13396233"
        },
        {
            "date": "2012-07-11T23:03:44+0000",
            "content": "bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment ",
            "author": "Hoss Man",
            "id": "comment-13412297"
        },
        {
            "date": "2012-07-26T20:11:33+0000",
            "content": "This should have been changed back to 'resolved' a long time ago. I guess I missed it. ",
            "author": "Shai Erera",
            "id": "comment-13423414"
        }
    ]
}