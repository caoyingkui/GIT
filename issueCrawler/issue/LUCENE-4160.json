{
    "id": "LUCENE-4160",
    "title": "Bring back the functional equivalent of tests.iters.min",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "general/test"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "What is needed is effectively saying: \"repeat this test N times, but stop once you hit a failure\".\n\nPreviously it was \"tests.iters.min=X\" which is (still) kind of confusing to me because I don't understand how \"X\" is related to the original question.\n\nI propose to implement a boolean \"tests.fastfail\" which would ignore any tests running on the same JVM after the first failure has been hit.\n\nThose with fond memories of \"tests.iters.min\" speak up, please.",
    "attachments": {
        "LUCENE-4160.patch": "https://issues.apache.org/jira/secure/attachment/12533805/LUCENE-4160.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-21T12:07:22+0000",
            "content": "I propose to implement a boolean \"tests.fastfail\"\n\n+1, I think that's a nice simplification over tests.iters.min. ",
            "author": "Michael McCandless",
            "id": "comment-13398370"
        },
        {
            "date": "2012-06-25T16:56:43+0000",
            "content": "\"tests.iters.min=X\" which is (still) kind of confusing to me because I don't understand how \"X\" is related to the original question.\n\ni think maybe you simplified the statement of the original question?\n\nWith tests.iters.min=X tests.iters=Y you were saying \"attempt to run this test Y times, and even if it fails, run it a minimum of X times.\" (at least, that was the theory as i understood it, maybe it never actually worked that way).\n\nI propose to implement a boolean \"tests.fastfail\"\n\n...the key here being that tests.iters today already repeats the test the specified number of times, even if it fails \u2013 and a new tests.fastfail\" would default to \"false\" but if it was true then you could have the old behavior of tests.iters.min=1.\n\nseems fine to me ... i think hte main motivation of tests.iters.min isn't really applicable anymore since the default logic for running multiple iterations is basically the reverse of what it use to be. \n\nan alternative way to think about it would be to add a \"tests.iters.max\", since tests.iters already behaves similar to what tests.iters.min use to do.\n\nOr just say to hell with it, and people who want the X,Y equivilent from before can run...\n\n\nant -Dtestcase=... -Dtestmethod=... -Dtests.iters=X \\\n&& \\\nant -Dtestcase=... -Dtestmethod=... -Dtests.failfast -Dtests.iters=${Y-X}\n\n ",
            "author": "Hoss Man",
            "id": "comment-13400644"
        },
        {
            "date": "2012-06-28T09:29:57+0000",
            "content": "Thanks for the clarification, Hoss. We could also do:\n\n\n-Dtests.iters=X -Dtests.minfailures=Y\n\n\n\nWhat this would do is repeat everything X times but ignore anything after the first Y failures... So if you'd like to quickly abort after the first failure, you'd do:\n\n\n-Dtests.iters=X -Dtests.minfailures=1\n\n\n\nand if you wanted more (for whatever reason) you could wait for more, but still abort earlier than X. I'll just provide a patch for this and we'll see how it turns out in practice. ",
            "author": "Dawid Weiss",
            "id": "comment-13402952"
        },
        {
            "date": "2012-06-28T09:30:50+0000",
            "content": "Now that I think of it minfailures or maxfailures depends on how you look at the problem  ",
            "author": "Dawid Weiss",
            "id": "comment-13402953"
        },
        {
            "date": "2012-06-28T10:56:56+0000",
            "content": "Patch against trunk.\n\nant -Dtests.maxfailures=M\n\n\n\nwill cause any test after the first M failures to be assumption-ignored. Example:\n\n\n   [junit4] IGNOR/A 0.03s | TestBuhu.testFailSometimes {#96 seed=[15604D6381DA415B:BE5164F081683030]}\n   [junit4]    > Assumption #1: Ignored, failures limit reached (1 >= 1).\n   [junit4] IGNOR/A 0.01s | TestBuhu.testFailSometimes {#97 seed=[15604D6381DA415B:E515E49B8D52E84E]}\n   [junit4]    > Assumption #1: Ignored, failures limit reached (1 >= 1).\n   [junit4] IGNOR/A 0.02s | TestBuhu.testFailSometimes {#98 seed=[15604D6381DA415B:2128D6F71D04F74D]}\n   [junit4]    > Assumption #1: Ignored, failures limit reached (1 >= 1).\n   [junit4] IGNOR/A 0.01s | TestBuhu.testFailSometimes {#99 seed=[15604D6381DA415B:EBBC938E1A402A5E]}\n   [junit4]    > Assumption #1: Ignored, failures limit reached (1 >= 1).\n   [junit4]    > (@AfterClass output)\n   [junit4]   2> NOTE: test params are: codec=Lucene40: {}, sim=RandomSimilarityProvider(queryNorm=false,coord=true): {}, locale=hu, timezone=US/Arizona\n   [junit4]   2> NOTE: Linux 3.0.0-21-generic amd64/Oracle Corporation 1.7.0 (64-bit)/cpus=2,threads=1,free=50888552,total=78512128\n   [junit4]   2> NOTE: All tests run in this JVM: [TestBuhu]\n   [junit4]   2> \n   [junit4] Completed in 1.44s, 100 tests, 1 failure, 91 skipped <<< FAILURES!\n   [junit4]  \n   [junit4] JVM J0:     0.70 ..     3.16 =     2.47s\n   [junit4] Execution time total: 3.21 sec.\n   [junit4] Tests summary: 1 suite, 100 tests, 1 failure, 91 ignored (91 assumptions)\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13402998"
        },
        {
            "date": "2012-06-28T10:59:03+0000",
            "content": "One note \u2013 this property is per-jvm-global in the sense that you don't need -Dtests.iters, you can wait for M failures in general, so for example:\n\nant test-core -Dtests.maxfailures=1\n\n\nwill ignore any remaining tests after the first failure. This applies per-JVM though, so if you're running with > 1 fork ed JVM then only that JVM's tests will be ignored.  ",
            "author": "Dawid Weiss",
            "id": "comment-13402999"
        },
        {
            "date": "2012-06-28T11:02:10+0000",
            "content": "What is the use case of the min/maxfailures (besides just your idea of a fastfail boolean, which I liked) ",
            "author": "Robert Muir",
            "id": "comment-13403004"
        },
        {
            "date": "2012-06-28T11:11:37+0000",
            "content": "Maybe somebody would want to wait for 5 failures instead of 1 to get a bunch of stack traces? A boolean can be emulated at ant level, it's basically -Dtests.maxfailures=1... Don't know, really \u2013 I admit I don't need this so I'm shooting at the dark here, it seemed to be useful for folks. To me it can be a boolean as well. ",
            "author": "Dawid Weiss",
            "id": "comment-13403008"
        },
        {
            "date": "2012-06-28T11:16:16+0000",
            "content": "I think i originally caused the complexity by wanting to still have a way to run a test like 1000 times and look at the failure rate. This is occasionally useful: e.g. this test fails 2% of the time and I improved the test to fail 10% of the time or whatever \n\nBut really I think its more useful in general to have 'fastfail' on by default... especially now that in general tests are reproducing a lot better than before... ",
            "author": "Robert Muir",
            "id": "comment-13403012"
        },
        {
            "date": "2012-06-28T16:08:50+0000",
            "content": "I think i originally caused the complexity by wanting to still have a way to run a test like 1000 times and look at the failure rate.\n\nright, the original driving usecase is already possible with the way tests.iters works now; it just so happened that the way it worked before you could not only say \"run this test at least 1000 times, even if it fails, so i can compute a pass/fail rate and look for patterns\" you could say \"try to run this test at least 1000 times, even if it fails, so i can compute a pass/fail rate and look for patterns \u2013 but if it doesn't fail, just keep on trying up to 5000 times for good measure.  I'm going to lunch anyway.\"\n\nif tests.maxfailures is just as easy to implement as tests.fastfail (and already implemented in this patch) then i say go with that.\n\nwe can always add ant sugar so that -Dtests.failfast=true sets tests.maxfailures=1 ",
            "author": "Hoss Man",
            "id": "comment-13403187"
        },
        {
            "date": "2012-06-28T17:33:29+0000",
            "content": "Yes, this patch is already working. I'll make it an alias so that -Dtests.failfast=[on/true/yes] will also work and commit it in. ",
            "author": "Dawid Weiss",
            "id": "comment-13403259"
        },
        {
            "date": "2012-07-11T23:15:01+0000",
            "content": "hoss20120711-manual-post-40alpha-change ",
            "author": "Hoss Man",
            "id": "comment-13412340"
        }
    ]
}