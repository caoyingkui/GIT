{
    "id": "SOLR-5201",
    "title": "UIMAUpdateRequestProcessor should reuse the AnalysisEngine",
    "details": {
        "affect_versions": "4.4",
        "status": "Closed",
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "components": [
            "contrib - UIMA"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As reported in http://markmail.org/thread/2psiyl4ukaejl4fx UIMAUpdateRequestProcessor instantiates an AnalysisEngine for each request which is bad for performance therefore it'd be nice if such AEs could be reused whenever that's possible.",
    "attachments": {
        "SOLR-5201-ae-cache-only-single-request_branch_4x.patch": "https://issues.apache.org/jira/secure/attachment/12600779/SOLR-5201-ae-cache-only-single-request_branch_4x.patch",
        "SOLR-5201-ae-cache-every-request_branch_4x.patch": "https://issues.apache.org/jira/secure/attachment/12600780/SOLR-5201-ae-cache-every-request_branch_4x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tommaso Teofili",
            "id": "comment-13753475",
            "date": "2013-08-29T09:56:04+0000",
            "content": "ok, now I recall why the caching logic was put in the AEProvider. Basically an UpdateRequestProcessor is instantiated on each update request (it's not reused) and therefore caching it locally wouldn't help. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13753823",
            "date": "2013-08-29T17:16:19+0000",
            "content": "Tommaso Teofili: I'm not sure what kind of state the AnalysisEngine maintains that might be reused/pollute subsequent requests, but there are two things you could do to \"cache\" an AnalysisEngine for various durations depending on what you're looking for...\n\n\n\tyou could create & cache the engine in the UIAMAUpdateRequestProcessor object and then it will be re-used for each document included in a single update request\n\tyou could create & cache the engine in the UIAMAUpdateRequestProcessorFactory, passing it to each UIAMAUpdateRequestProcessor it creates, and then it will be re-used for every document included in every request.\n\n "
        },
        {
            "author": "Jun Ohtani",
            "id": "comment-13754683",
            "date": "2013-08-30T13:28:07+0000",
            "content": "I try to write a patch that  UIMAUpdateRequestProcessor reuse the AnalysisEngine only single update request\nSorry, this patch is based on branch_4x and I write a simple test only.\nMaybe this patch that improved a little... "
        },
        {
            "author": "Jun Ohtani",
            "id": "comment-13754688",
            "date": "2013-08-30T13:35:37+0000",
            "content": "I try to write second patch that AnalysisEngine is created in UIMAUpdateRequestProcessorFactory.getInstance() and is re-used every update request.\nThis patch is based on branch_4x too.\n\nBut this code is dirty\u2026\nPlease, check and refactor this patch. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-13755939",
            "date": "2013-09-02T07:21:44+0000",
            "content": "Thanks Hoss Man for your hints and [~johtani] for your patches.\n\nThe first option of reusing an AnalysisEngine in each UpdateRequestProcessor instance for reuse in \"batch\" update requests (first option/patch) is surely the easiest solution but the performance improvement depends on the no. of docs that are sent together in each update request.\nThe second option sounds nice but I wonder if that would cause a problem with multiple configurations (2 update chains with 2 different configurations of UIMAUpdateRequestProcessorFactory), I'll do some testing on this scenario using John's patch so that we can decide which design it's better to support. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13756769",
            "date": "2013-09-03T16:45:19+0000",
            "content": "The second option sounds nice but I wonder if that would cause a problem with multiple configurations (2 update chains with 2 different configurations of UIMAUpdateRequestProcessorFactory),\n\nIt depends on what kinds or problems you are worried about ... each UIMAUpdateRequestProcessorFactory instance (ie: one instance per chain) should each have it's own AnalysisEngine using it's own configuration ... unless the AnalysisEngine constructor/factory/provider does something special to keep track of them, they won't know anything about eachother.\n\nIf you want them to know about eachother (ie: to share an AnalysisEngine  between chains, or between chains in different SolrCores) then something a lot more special case would need to be done. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-13757487",
            "date": "2013-09-04T06:10:51+0000",
            "content": "unless the AnalysisEngine constructor/factory/provider does something special to keep track of them, they won't know anything about eachother\n\nok, so I think we can go with the second option of having the UIMAUpdateRequestProcessorFactory serve the AnalysisEngine to UIMAUpdateRequestProcessors.\nI'll post a patch later today. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-13757536",
            "date": "2013-09-04T08:04:10+0000",
            "content": "here's a draft patch: https://github.com/tteofili/lucene-solr/compare/apache:trunk...solr-5201.patch\n\nAnalysisEngines are initialized inside UIMAUpdateRequestProcessorFactories together with a JCasPool to better handle multiple concurrent requests.\nMy benchmarks (ran 'ant clean test -Dtests.multiplier=100' with and without the above patch) show execution of UIMAUpdateRequestProcessorTest#testMultiplierProcessing is ~10 times faster and less memory consumptive (~240MB saved over ~650MB heap) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13758841",
            "date": "2013-09-05T07:12:11+0000",
            "content": "Commit 1520239 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1520239 ]\n\nSOLR-5201 - AnalysisEngines are now created in the factory and passed to the processors with a JCas pool "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-13758842",
            "date": "2013-09-05T07:12:52+0000",
            "content": "I've committed the above patch to trunk in r1520239 "
        },
        {
            "author": "Jun Ohtani",
            "id": "comment-13760038",
            "date": "2013-09-06T07:59:59+0000",
            "content": "Thanks Tommaso.\n\nSorry, I misunderstood about the relationship between UIMAUpdateRequestProcessorFactory and AnalysisEngine.\nMy co-woker use this patch, it work without problems.\n\nDo you commit the above patch to branch_4x?\n "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-13761259",
            "date": "2013-09-08T12:09:47+0000",
            "content": "ok good, thanks. I'll merge it to branch_4x too. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13761260",
            "date": "2013-09-08T12:21:56+0000",
            "content": "Commit 1520859 from Tommaso Teofili in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1520859 ]\n\nSOLR-5201 - patch backported to branch_4x "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13786997",
            "date": "2013-10-05T10:18:38+0000",
            "content": "4.5 release -> bulk close "
        }
    ]
}