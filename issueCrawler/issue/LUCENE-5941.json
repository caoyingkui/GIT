{
    "id": "LUCENE-5941",
    "title": "IndexWriter.forceMerge documentation error",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "IndexWriter.forceMerge documents that it requires up to 3X FREE space in order to run successfully. We even go further with it and test it in TestIWForceMerge.testForceMergeTempSpaceUsage(). But I think that's wrong. I cannot think of a situation where we consume 3X additional space during merge:\n\n\n\t1X - that's the source segments to be merged\n\t2X - that's the result non-CFS merged segment\n\t3X - that's the CFS creation\n\n\n\nAt no point do we publish the non-CFS merged segment, therefore the merge, as I understand it, only consumes up to 2X additional space during that merge.\n\nAnd anyway, we only require 2X of additional space of the largest merge (or total batch of running merges, depends on your MergeScheduler), not the whole index size. This is an important observation, since if you e.g. have a 500GB index, users shouldn't think they need to reserve an additional 1TB for merging, since most of their big segments won't be merged by default anyway (TieredMP defaults to 5GB largest segment).\n\nI'll post a patch which fixes the documentation and the test. If anyone can think of a scenario where we consume up to 3X additional space, please chime, and I'll only modify IW.forceMerge documentation to explain that.",
    "attachments": {
        "LUCENE-5941.patch": "https://issues.apache.org/jira/secure/attachment/12668279/LUCENE-5941.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14130293",
            "author": "Shai Erera",
            "content": "Correction about the largest merge. That's true for maybeMerge, but since this is forceMerge, the comment is correct. I'll clarify this a bit though.  ",
            "date": "2014-09-11T17:00:19+0000"
        },
        {
            "id": "comment-14131150",
            "author": "Shai Erera",
            "content": "Patch modifies the test to assert up to 3X disk usage. I beasted and it fails with this:\n\n\n  [beaster]   2> NOTE: reproduce with: ant test  -Dtestcase=TestIndexWriterForceMerge -Dtests.method=testForceMergeTempSpaceUsage -Dtests.seed=AEA68CE694BB7732 -Dtests.slow=true -Dtests.locale=ru_RU -Dtests.timezone=US/Pacific-New -Dtests.file.encoding=Cp1255\n  [beaster] [09:05:02.935] FAILURE 1.52s | TestIndexWriterForceMerge.testForceMergeTempSpaceUsage <<<\n  [beaster]    > Throwable #1: java.lang.AssertionError: forceMerge used too much temporary space: starting usage was 385138 bytes; max temp usage was 1216310 but should have been 1155414 (= 3X starting usage)\n  [beaster]    >        at __randomizedtesting.SeedInfo.seed([AEA68CE694BB7732:B4644F15FAAB94F5]:0)\n  [beaster]    >        at org.junit.Assert.fail(Assert.java:93)\n  [beaster]    >        at org.junit.Assert.assertTrue(Assert.java:43)\n  [beaster]    >        at org.apache.lucene.index.TestIndexWriterForceMerge.testForceMergeTempSpaceUsage(TestIndexWriterForceMerge.java:162)\n\n\n\nI still haven't dug into this, will do so later. But if anyone has an explanation to why we may consume up to 4X the starting disk usage, please post here. ",
            "date": "2014-09-12T06:13:29+0000"
        },
        {
            "id": "comment-14131154",
            "author": "Shai Erera",
            "content": "BTW, Lucene beaster (ant beast) failed pretty quickly, but luceneutil's repeatLuceneTest.py ran for 700 iterations without a failure until I killed it... ",
            "date": "2014-09-12T06:16:16+0000"
        },
        {
            "id": "comment-14131335",
            "author": "Robert Muir",
            "content": "Did you disable the virus scanner in the test? Not being able to delete files in windows because you have open readers against them is probably realistic though. ",
            "date": "2014-09-12T09:52:20+0000"
        },
        {
            "id": "comment-14131356",
            "author": "Shai Erera",
            "content": "Did you disable the virus scanner in the test?\n\nOh good point. I'll do that anyway.\n\nNot being able to delete files in windows because you have open readers against them is probably realistic though.\n\nTrue, but it's unrelated to the comment in forceMerge. That's a general statement about deleting index files while virus scanning holds them open. The point is how much space Lucene requires to do a forceMerge.\n\nAnd BTW I don't think this is related to Windows. Even on unix, if you have a process which keeps the index files opened, that that it appears that the file is deleted has nothing to do with the space that the file still occupies, until that process releases the file handle, right? ",
            "date": "2014-09-12T10:26:54+0000"
        },
        {
            "id": "comment-14131561",
            "author": "Shai Erera",
            "content": "I added dir.setEnableVirusScanner(false);, but the test still fails (and I verify that before the failure virus scanner is indeed disabled.. I will disable virus scanner for this test anyway though, because it asserts disk usage and we don't want any surprises. ",
            "date": "2014-09-12T14:04:19+0000"
        },
        {
            "id": "comment-14131611",
            "author": "Robert Muir",
            "content": "Well i think its related to windows. for example if we can't delete the temporary files we made in CFS creation... ",
            "date": "2014-09-12T14:38:31+0000"
        },
        {
            "id": "comment-14132554",
            "author": "Shai Erera",
            "content": "Well i think its related to windows.\n\nThe only thing that's related to Windows is the inability to delete a file, i.e. you get an exception. But even on Unix, that deleted file still consumes disk space until the last process that holds it open releases it. And that's true not just for merges, even for newly flushed segments - they're first flushed non-CFS'd, then we pack then in CFS. We can fail to delete these temp files there too.\n\nI try to distinguish between when Lucene consumes more disk space deliberately, vs when your OS/app does. Your app can hold open a Reader on every commit point and never close them, and therefore we will always fail to delete the files. We don't care about that.\n\nBut when does Lucene consume 2/3/4X disk space on purpose?? I get the 3X: existing segments + temp non-CFS merged segment + CFS merged segment. But I don't get the 4X ... and consequently still didn't figure out why the test fails. ",
            "date": "2014-09-13T05:28:32+0000"
        },
        {
            "id": "comment-14132616",
            "author": "Robert Muir",
            "content": "Thats just not true Shai. I think you shoudl look at the CFS building code.\n\nOn unix, it will always be deleted. ",
            "date": "2014-09-13T09:34:05+0000"
        },
        {
            "id": "comment-14142433",
            "author": "Shai Erera",
            "content": "Patch fixes the test bug \u2013 we cannot assume that a merged index's size is always <= the starting index size (e.g. if compression is affected, or the Codec changes etc.). With the seed above, what happened is that the MemoryPF created a merged segment that was slightly bigger than the sum of all input .ram files (I don't know why). That caused the test to fail, because of this math:\n\n\nstartIndexSize = 380K\nfinalIndexSize = 416K\n\n380 * 3 < 380 (source) + 416 (final) + [380 TO 416] (temp files)\n\n\n\nThe assertion message also proves that in that we don't require up to 3X additional free space (and comparing to 4X total space used), as we only used 3.15X than the starting index size.\n\nI've changed the test to assert on the maximum size before and after the merge, and compare maxUsedSizeInBytes to 3X that size. This also allows the current test behavior, which changes the codec after indexing is done, and before the merge is executed. In fact, unless I'm missing something, we might just have been lucky thus far not tripping the test, if e.g. the default codec was switched to SimpleText just before the merge... ",
            "date": "2014-09-21T12:02:57+0000"
        },
        {
            "id": "comment-14142465",
            "author": "Shai Erera",
            "content": "Clarify IW.forceMerge jdocs a bit. So far beasting seems happy. I think it's ready. ",
            "date": "2014-09-21T14:46:44+0000"
        },
        {
            "id": "comment-14142530",
            "author": "Michael McCandless",
            "content": "+1, looks great.  Thanks Shai. ",
            "date": "2014-09-21T17:50:11+0000"
        },
        {
            "id": "comment-14142949",
            "author": "ASF subversion and git services",
            "content": "Commit 1626675 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1626675 ]\n\nLUCENE-5941: IndexWriter.forceMerge documentation improvements ",
            "date": "2014-09-22T06:48:13+0000"
        },
        {
            "id": "comment-14142950",
            "author": "ASF subversion and git services",
            "content": "Commit 1626676 from Shai Erera in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1626676 ]\n\nLUCENE-5941: IndexWriter.forceMerge documentation improvements ",
            "date": "2014-09-22T06:50:09+0000"
        },
        {
            "id": "comment-14142955",
            "author": "Shai Erera",
            "content": "Committed to trunk and 5x. ",
            "date": "2014-09-22T06:51:15+0000"
        },
        {
            "id": "comment-14332541",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:34+0000"
        },
        {
            "id": "comment-14391174",
            "author": "Michael McCandless",
            "content": "I think this change was incorrect ... I think forceMerge really can require up to 3X free spare space in the worst case (LUCENE-6386 hit this). ",
            "date": "2015-04-01T18:37:27+0000"
        },
        {
            "id": "comment-14391520",
            "author": "Michael McCandless",
            "content": "I think we should fix this for 5.1.0 ",
            "date": "2015-04-01T21:40:08+0000"
        },
        {
            "id": "comment-14391599",
            "author": "Michael McCandless",
            "content": "I'll leave this issue unchanged (issues once released should be write once), and fix this under LUCENE-6386. ",
            "date": "2015-04-01T22:18:01+0000"
        }
    ]
}