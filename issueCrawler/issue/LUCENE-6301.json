{
    "id": "LUCENE-6301",
    "title": "Deprecate Filter",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Task"
    },
    "description": "It will still take time to completely remove Filter, but I think we should start deprecating it now to state our intention and encourage users to move to queries as soon as possible?",
    "attachments": {
        "LUCENE-6301.patch": "https://issues.apache.org/jira/secure/attachment/12702759/LUCENE-6301.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14338217",
            "author": "Adrien Grand",
            "date": "2015-02-26T10:44:16+0000",
            "content": "My plan would be to deprecate:\n\n\tFilter\n\tFilteredQuery\n\tCachingWrapperFilter\n\n\n\nAnd in these 3 cases recommend to use BooleanQuery with filter clauses instead. "
        },
        {
            "id": "comment-14340510",
            "author": "Adrien Grand",
            "date": "2015-02-27T18:25:42+0000",
            "content": "We are getting closer: QueryWrapperFilter is now the last Filter impl in lucene/core. Filter would be hard to remove from trunk because there are lots of module that implement or consume filters, but we should be able to remove FilteredQuery by using a BooleanQuery with a FILTER clause instead. I will give it a try soon. "
        },
        {
            "id": "comment-14348464",
            "author": "Adrien Grand",
            "date": "2015-03-05T09:25:32+0000",
            "content": "Here is a patch:\n\n\tFilter, QueryWrapperFilter and FilteredQuery are deprecated\n\tlucene/core is Filter-free (the only last occurrences are in tests to make sure the deprecated classes still work)\n\n\n\nThe only thing that prevents us from removing FilteredQuery is lucene/spatial which has filters that only support random-access:\n\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n\n\nBut it should be possible to migrate it to two-phase approximations and having FilteredQuery deprecated in the meantime will help ensure no new code is using it. I don't think it should hold this issue as having filters removed from the core is already a good step towards removing filters entirely? "
        },
        {
            "id": "comment-14348799",
            "author": "David Smiley",
            "date": "2015-03-05T14:43:44+0000",
            "content": "Hi Adrien.  \n\nBut it should be possible to migrate it to two-phase approximations and having FilteredQuery deprecated in the meantime will help ensure no new code is using it. I don't think it should hold this issue as having filters removed from the core is already a good step towards removing filters entirely?\n\n+1.  I think migrating it would be a separate JIRA issue to be created.  Can it still throw an exception if you use it in such a way as to iterate?  This is to prevent people from mis-using it.  Do you know of a similar scorer I can look at?\n\nAnother API change to deprecate filters is modifying the SpatialStrategy abstraction.  It has a makeQuery and makeFilter pair of methods, which are effectively the same thing except for the return type.  I think makeFilter should become deprecated now (as part of this issue). "
        },
        {
            "id": "comment-14348893",
            "author": "Adrien Grand",
            "date": "2015-03-05T15:32:38+0000",
            "content": "Can it still throw an exception if you use it in such a way as to iterate? This is to prevent people from mis-using it. Do you know of a similar scorer I can look at?\n\nYou could do the equivalent of what these filters are currently doing by making the scorer throw an exception when calling nextDoc() or advance(). This would prevent these queries from being used directly and force consumers to use the approximation for intersections (which BooleanQuery with MUST/FILTER clauses will happily do). However beware that while the approximation will be used for advancing the iterator, score() and freq() will still be called on the scorer.\n\nDo you know of a similar scorer I can look at?\n\nDocValuesTermsQuery should be similar. It cannot advance at all so it returns an iterator that matches all documents as an approximation and its matches() impl checks doc values.\n\nI think makeFilter should become deprecated now (as part of this issue).\n\nOK, I'll have a look at it. "
        },
        {
            "id": "comment-14348988",
            "author": "Adrien Grand",
            "date": "2015-03-05T16:04:05+0000",
            "content": "Also I forgot to mention: the patch also fixes a bug in TermAutomatonScorer.advance. Since it was always tested with a filter with random access and a high cost, the filtered query used the filter randomly and never advanced the query. "
        },
        {
            "id": "comment-14946637",
            "author": "Adrien Grand",
            "date": "2015-10-07T10:27:01+0000",
            "content": "We made quite some progress since this issue was last updated, FilteredQuery has been removed already and Lucene now almost doesn't rely on Filter anymore (by the way, thanks to those who helped me, in particular David). Here is a patch that:\n\n\tremoves remaining usage of Filter in Lucene (mostly tests)\n\tmoves Filter, QueryWrapperFilter, FilteredDocIdSet and BitsFilteredDocIdSet to Solr. When backporting, this would stay in Lucene but with an \"@Deprecated\" annotation.\n\n\n\nIt would be nice to make Solr not use Filter anymore as well but Filter is still an important abstraction in Solr because of how it's integrated into DocSet and SolrConstantScoreQuery. I can help here but can't do it alone. In addition, I don't think it should hold the removal of Filter from Lucene?  "
        },
        {
            "id": "comment-14950164",
            "author": "Adrien Grand",
            "date": "2015-10-09T10:11:01+0000",
            "content": "I plan to commit next week if there are no objections. "
        },
        {
            "id": "comment-14950415",
            "author": "David Smiley",
            "date": "2015-10-09T13:53:33+0000",
            "content": "+1   Nice Adrien!  Looks like this was a fair amount of work.  I agree on moving the abstractions to Solr.  Wether or not it remains in Solr shouldn't hold up this. "
        },
        {
            "id": "comment-14953047",
            "author": "ASF subversion and git services",
            "date": "2015-10-12T12:15:10+0000",
            "content": "Commit 1708097 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1708097 ]\n\nLUCENE-6301: Removal of org.apache.lucene.Filter.\n\nFrom a Lucene perspective Filter is gone. However it was still used for things\nlike DocSet and SolrConstantScoreQuery in Solr, so it has been moved to\nthe oas.search package for now, even though in the long term it would be nice\nfor Solr to move to the Query API entirely as well. "
        },
        {
            "id": "comment-14953084",
            "author": "Jack Krupansky",
            "date": "2015-10-12T12:58:17+0000",
            "content": "I know this change has been in progress for awhile, but it just kind of sunk for me finally and now I'm wondering what the impact on Solr will be. I mean, wasn't Filter supposed to be a big performance win over a Query since it eliminates the performance impact of scoring? If that was the case, is Lucene proving some alternate method of achieving a similar performance improvement? I think it is, but... not stated quite so explicitly. An example of the expected migration would help a lot. I think the example should be in the Lucene Javadoc - \"To filter documents without the performance overhead of scoring, use the following technique...\" If I understand properly, one would simply wrap the query in a BooleanQuery with a single clause that uses BooleanQuery.Clause.FILTER and that would have exactly the same effect (and performance gain) as the old Filter class. Is that statement 100% accurate? If so, it would be good to make it explicit here in Jira, in the deprecation comment in the the Filter class, and in BooleanQuery as well. Thanks! "
        },
        {
            "id": "comment-14953124",
            "author": "Adrien Grand",
            "date": "2015-10-12T13:34:58+0000",
            "content": "wasn't Filter supposed to be a big performance win over a Query since it eliminates the performance impact of scoring? If that was the case, is Lucene proving some alternate method of achieving a similar performance improvement?\n\nOver the past releases, we progressively improved to Query/Collector API so that queries can detect whether scores are needed and optimize in case scores are not needed in order to eg. avoid to read frequencies or stop after the first occurence is found in the case of phrase queries (LUCENE-6218). Everything is detected automatically now, for instance if you wrap a query in a ConstantScoreQuery, it will automatically notice that scores are not needed. If you sort by the value of a field and don't request scores, then again it will notice that scores are not needed and optimize query execution.\n\nSomething else that Filters provided but not queries was random-access support. But it was a bit incomplete since Filters had no way to tell FilteredQuery if they should rather be consumed using iteration or random-access and making the wrong decision could sometimes result in super slow queries that would try to call advance() on a DocValuesRangeQuery which doesn't use an index and needs to perform a linear scan in order to locate the next match. So we added two-phase iteration support to queries (LUCENE-6198) which allows us to dissert queries into a fast approximation and a slow verification phase. For instance, a phrase query \"A B\" would return the conjunction (+A +B) as an approximation and check if it can find the two terms at consecutive positions as a verification phase.\n\nthat would have exactly the same effect (and performance gain) as the old Filter class. Is that statement 100% accurate?\n\nIf you use a query that provides an efficient approximation (such as phrase queries) as a filter, things could be considerably faster. Otherwise, things will mostly work the same way as before and you could have slight speedups or slowdowns given that we use different code paths that hotspot might optimize differently.\n\nI will look into the deprecation comments for Filter. "
        },
        {
            "id": "comment-14953147",
            "author": "ASF subversion and git services",
            "date": "2015-10-12T13:59:53+0000",
            "content": "Commit 1708121 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1708121 ]\n\nLUCENE-6301: Deprecate Filter. "
        },
        {
            "id": "comment-14953148",
            "author": "Adrien Grand",
            "date": "2015-10-12T14:01:01+0000",
            "content": "Jack, I just backported to 5.x. Feel free to review and suggest improvements if you feel that the migration path is not clear enough. "
        },
        {
            "id": "comment-14953174",
            "author": "Jack Krupansky",
            "date": "2015-10-12T14:22:34+0000",
            "content": "Thanks! LGTM. Now let's see if the Solr guys pick up on this. "
        }
    ]
}