{
    "id": "SOLR-12882",
    "title": "Eliminate excessive lambda allocation in FacetFieldProcessorByHashDV.collectValFirstPhase",
    "details": {
        "type": "Bug",
        "status": "Resolved",
        "labels": "",
        "fix_versions": [
            "7.6"
        ],
        "components": [
            "Facet Module"
        ],
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "7.5"
    },
    "description": "The FacetFieldProcessorByHashDV.collectValFirstPhase method looks like this:\n\nprivate void collectValFirstPhase(int segDoc, long val) throws IOException {\n int slot = table.add(val); // this can trigger a rehash\n\n // Our countAcc is virtual, so this is not needed:\n // countAcc.incrementCount(slot, 1);\n\nsuper.collectFirstPhase(segDoc, slot, slotNum ->\n\n{ Comparable value = calc.bitsToValue(val); return new SlotContext(sf.getType().getFieldQuery(null, sf, calc.formatValue(value))); }\n\n);\n}\n\n\n\u00a0\n\nFor each value that is being iterated over there is a lambda allocation that is passed as the slotContext argument to the super.collectFirstPhase method. The lambda can be factored out such that there is only a single instance per FacetFieldProcessorByHashDV instance.\u00a0\n\nThe only tradeoff being that the value needs to be looked up from the table in the lambda.\u00a0 However looking the value up in the table is going to be less expensive than a memory allocation and also the slotContext lambda is only used in\u00a0RelatednessAgg and not for any of the field faceting or metrics.\n\n\u00a0\n\nprivate void collectValFirstPhase(int segDoc, long val) throws IOException {\n  int slot = table.add(val); // this can trigger a rehash\n\n  // Our countAcc is virtual, so this is not needed:\n  // countAcc.incrementCount(slot, 1);\n\n  super.collectFirstPhase(segDoc, slot, slotContext);\n}\n\n/**\n * SlotContext to use during all {@link SlotAcc} collection.\n *\n * This avoids a memory allocation for each invocation of collectValFirstPhase.\n */\nprivate IntFunction<SlotContext> slotContext = (slotNum) -> {\n  long val = table.vals[slotNum];\n  Comparable value = calc.bitsToValue(val);\n  return new SlotContext(sf.getType().getFieldQuery(null, sf, calc.formatValue(value)));\n};\n\n\n\u00a0\n\nFacetFieldProcessorByArray already follows this same pattern",
    "attachments": {
        "start-2018-10-31_snapshot___Users_tim_Snapshots__-_YourKit_Java_Profiler_2017_02-b75_-_64-bit.png": "https://issues.apache.org/jira/secure/attachment/12946330/start-2018-10-31_snapshot___Users_tim_Snapshots__-_YourKit_Java_Profiler_2017_02-b75_-_64-bit.png",
        "start_-_YourKit_Java_Profiler_2017_02-b75_-_64-bit.png": "https://issues.apache.org/jira/secure/attachment/12946329/start_-_YourKit_Java_Profiler_2017_02-b75_-_64-bit.png"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16654258",
            "content": "Pull request here:\u00a0https://github.com/apache/lucene-solr/pull/476 ",
            "author": "Tim Underwood",
            "date": "2018-10-17T21:49:46+0000"
        },
        {
            "id": "comment-16666424",
            "content": "From 2018-10-24 on the #solr-dev IRC channel:\n\n\n12:22 < tpunder> I have a few Solr Issues I'd like to get reviewed/merged (SOLR-12875, SOLR-12878, SOLR-12882, SOLR-12880).  What's the best way to go about doing that?\n\n\n\nThese issues look very compelling, especially SOLR-12878.  We've been fighting facet performance regression for a while now.  If I had even a sliver of understanding of the code you're working on, I would help you.  You might want to ping the dev list to raise visibility. ",
            "author": "Shawn Heisey",
            "date": "2018-10-28T14:54:10+0000"
        },
        {
            "id": "comment-16668664",
            "content": "+1\n\nI wonder how much this helps? \u00a0Did you do benchmarking? ",
            "author": "David Smiley",
            "date": "2018-10-30T12:57:14+0000"
        },
        {
            "id": "comment-16669586",
            "content": "It's not a huge improvement but I noticed it showing up in YourKit memory allocation profiling:\n\n\n\nhttps://issues.apache.org/jira/secure/attachment/12946329/start_-_YourKit_Java_Profiler_2017_02-b75_-_64-bit.png\n\n\n\n\u00a0https://issues.apache.org/jira/secure/attachment/12946330/start-2018-10-31_snapshot___Users_tim_Snapshots__-_YourKit_Java_Profiler_2017_02-b75_-_64-bit.png\n\nMy informal benchmarking (I should really setup JMH for this stuff) for one of my facet heavy queries went from ~270-275 requests/second to ~285-293 requests/second for my setup.\n\nSo it's a very minor improvement. ",
            "author": "Tim Underwood",
            "date": "2018-10-31T04:33:56+0000"
        },
        {
            "id": "comment-16672030",
            "content": "Commit cf445ba54998710466a7c6cb489d3162d20d127a in lucene-solr's branch refs/heads/master from Tim Underwood\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cf445ba ]\n\nSOLR-12882: Eliminate excessive lambda allocation in json facet FacetFieldProcessorByHashDV.collectValFirstPhase ",
            "author": "ASF subversion and git services",
            "date": "2018-11-01T19:05:25+0000"
        },
        {
            "id": "comment-16672041",
            "content": "Commit 1320db356833a6e4823e29416c388593b027948b in lucene-solr's branch refs/heads/branch_7x from Tim Underwood\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1320db3 ]\n\nSOLR-12882: Eliminate excessive lambda allocation in json facet FacetFieldProcessorByHashDV.collectValFirstPhase\n\n(cherry picked from commit cf445ba54998710466a7c6cb489d3162d20d127a) ",
            "author": "ASF subversion and git services",
            "date": "2018-11-01T19:08:32+0000"
        },
        {
            "id": "comment-16672050",
            "content": "Thanks Tim.  It's also nice to see this change is consistent with some of the other classes in this module that do the same thing. ",
            "author": "David Smiley",
            "date": "2018-11-01T19:10:08+0000"
        },
        {
            "id": "comment-16673298",
            "content": "Thanks for merging! ",
            "author": "Tim Underwood",
            "date": "2018-11-02T15:48:12+0000"
        }
    ]
}