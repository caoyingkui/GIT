{
    "id": "SOLR-2379",
    "title": "Improve documentation of Analyzers and Tokenizers",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "documentation"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "See thread http://search-lucene.com/m/S7l5XMQ8iA1\n\nThe Wiki page http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters as well as http://wiki.apache.org/solr/LanguageAnalysis are not up to date with current state.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12998929",
            "date": "2011-02-24T16:52:46+0000",
            "content": "We have two choices, suggested by Yonik:\n\n\tupdate the wiki with the missing analysis components or\n\tthink about switching strategies to pointing at generated javadoc\n\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12999205",
            "date": "2011-02-25T03:47:23+0000",
            "content": "Whatever we choose, let's stick to DRY.  I think that may imply the javadoc approach (maybe with just an easily findable pointer from the Wiki?) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12999268",
            "date": "2011-02-25T08:56:26+0000",
            "content": "Agree. That has the benefit of improving JavaDoc quality as well for a lot of classes.\nAn example of excellent JavaDoc is the Similarity class: http://lucene.apache.org/java/3_0_3/api/core/org/apache/lucene/search/Similarity.html\nBrowsing through the analyzers, they are very sparse on javadoc \n\nASIDE: And what about finally making the move to the Confluence Wiki as well (https://cwiki.apache.org/SOLRxSITE/). Then we could simply include Javadoc inline in pages through the javadoc plugin https://plugins.atlassian.com/plugin/details/11120, and also get auto linking to Jira issues. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999342",
            "date": "2011-02-25T12:54:38+0000",
            "content": "Browsing through the analyzers, they are very sparse on javadoc\n\nWhich analyzers are you referring to? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12999358",
            "date": "2011-02-25T13:44:14+0000",
            "content": "Few of the TokenFilterFactories are documented at all. Some of them have a simple XML config snippet example. Take the StandardTokenFilterFactory. It had no class JavaDoc until two days ago, when Koji and yourself added an xml snippet.\n\nBut should the documentation be on the Factory or on the Filter? The WordDelimiterFilterFactory is not documented but the Filter itself is (although it is not correctly HTML formatted so it looks broken in the browser).\n\nI think a reasonable goal, at least for these plugin type of classes, is to use the JavaDoc as the official main doc and point from Wiki to there. But then the Class-level JavaDoc must give a short introduction to what the filter does, when it is typically used along with a list of all valid parameters and their values. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999360",
            "date": "2011-02-25T14:01:11+0000",
            "content": "\nFew of the TokenFilterFactories are documented at all. Some of them have a simple XML config snippet example. Take the StandardTokenFilterFactory. It had no class JavaDoc until two days ago, when Koji and yourself added an xml snippet.\n\nThats not really correct: typically they have a link to the tokenfilter, for example here is ThaiWordFilterFactory.\n(Factory for \n{@link ThaiWordFilter}\n). if they take arguments, then typically they describe what those arguments do.\n\nThis is enough, because someone can click the ThaiWordFilter and get all the details there. \n\nThe javadocs for the factory need only document the factory.\n\n\nI think a reasonable goal, at least for these plugin type of classes, is to use the JavaDoc as the official main doc and point from Wiki to there. But then the Class-level JavaDoc must give a short introduction to what the filter does, when it is typically used along with a list of all valid parameters and their values.\n\nI really don't think we should duplicate documentation from any Tokenizers/Filters into the factories. The factory should just have a javadoc ref to what it produces, and explain its various parameters. In other words, it need only document itself. \n\nAny other documentation is actually redundant and problematic, as long as this javadoc exists it increases the maintenance load around here with no benefits to the user at all.\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12999367",
            "date": "2011-02-25T14:25:23+0000",
            "content": "About where to document, that was a question. Linking from Factory to Filter is a good practice.\n\nLooks like there is a lot of JavaDoc improvements with 3.1, so once that's out the door, it should be possible to rework and slim down the analysis wiki page quite much. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999379",
            "date": "2011-02-25T14:40:32+0000",
            "content": "I agree, if you find factories in trunk/branch_3x that do not @link the filter/tokenizer they create, and don't describe how to use the factory (e.g. set parameters), I think we should fix those.\n\nI did a quick check for the former, and I think all factories link to the filter/tokenizer they create.\n\nIn general I think its best if any parameters/options are described in the filters themselves too, so that lucene users see this documentation, and so we can very verbosely describe what these parameters do all in one place (to reduce confusion). \n\nThen any factories can simply link to the original documentation for the parameter values, too. Here's an example: http://svn.apache.org/repos/asf/lucene/dev/trunk/solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-12999744",
            "date": "2011-02-26T08:34:38+0000",
            "content": "I realize such things are a revolutionary refactoring, but in the light of this perhaps it would be beneficial to switch from JavaDoc to Google's Doclava. Among other things it includes embedding real-code snippets, so you get a consistent javadoc.\n\nNote: I haven't used it yet, I just know it supports such things, see @sample tag here:\nhttp://code.google.com/p/doclava/wiki/JavadocTags "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12999800",
            "date": "2011-02-26T15:34:09+0000",
            "content": "ASIDE: And what about finally making the move to the Confluence Wiki as well\n\nUnfortunately, it looks like confluence is going away at the ASF:\nhttp://www.apache.org/dev/cms.html\n\nscore 1 for procrastination  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12999801",
            "date": "2011-02-26T15:43:35+0000",
            "content": "That almost looks like it could be going away for project main website stuff ... but that is separate from the wiki is it not?\n\nIt seems like we would stick to real wiki software for the wiki portion of the site at Apache?\n\nIn which case, I think Confluence is nice improvement over MoinMoin.\n\nOur website and wiki look ancient as another aside. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12999803",
            "date": "2011-02-26T15:50:30+0000",
            "content": "Re-reading the link, I think you're right - it's only support for confluence backed sites that is being phased out.\nI've long been in favor of a move to confluence, but no real time to do it myself. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13000068",
            "date": "2011-02-28T00:20:53+0000",
            "content": "this renewed interest in adding more focus and attention to the javadocs as user visible documentation has be thinking that maybe the time has come to revive SOLR-555.\n\nI lost steam on it back in the day because I was having trouble drumming up interest from other people to help get the javadocs of all the various plugin instances to the state where the output would be useful for non java users (most people seemed content to just use the wiki) and it seemed better to ship no docs then ship bad docs. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13187422",
            "date": "2012-01-17T03:52:11+0000",
            "content": "Closing old issue, fixed well enough, focusing on improving JavaDocs rather than having Wiki being complete. "
        }
    ]
}