{
    "id": "SOLR-4224",
    "title": "refactor JavaBinCodec input stream definition to enhance reuse",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "JavaBinCodec currently requires use of the concrete \"FastInputStream\" when unmarshalling a record. A JavaBinCodec API that takes an interface or abstract implementation would allow greater reuse.\n\nIn my particular case I am trying to use JavaBinCodec to marshal/unmarshal from an data source that doesn't allow buffering. The semantics are such that I can read only a single record from the input source. The buffering in FastInputStream is reading information contained in the second record. No state other than the input data source itself is available to \"cache\" the FastInputStream between calls. As a result I'm losing the second record. I would like to provide an InputStream/DataInput that doesn't do any buffering.",
    "attachments": {
        "SOLR-4224.patch": "https://issues.apache.org/jira/secure/attachment/12561948/SOLR-4224.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Patrick Hunt",
            "id": "comment-13537206",
            "date": "2012-12-20T18:00:53+0000",
            "content": "The attached patch implements a refactoring that allows an arbitrary InputStream/DataInput implementation to be used. I've taken an approach that minimizes impact of the changes. It's pretty mechanical - replace FastInputStream in the JavaBinCodec API definition with an abstract specification. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13599219",
            "date": "2013-03-11T20:21:22+0000",
            "content": "This seems like a good change to me. I'll take this for 4.3. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13679521",
            "date": "2013-06-10T14:10:27+0000",
            "content": "[trunk commit] markrmiller\nhttp://svn.apache.org/viewvc?view=revision&revision=1491459\n\nSOLR-4224: Refactor JavaBinCodec input stream definition to enhance reuse. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13679522",
            "date": "2013-06-10T14:12:54+0000",
            "content": "[branch_4x commit] markrmiller\nhttp://svn.apache.org/viewvc?view=revision&revision=1491461\n\nSOLR-4224: Refactor JavaBinCodec input stream definition to enhance reuse. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13679523",
            "date": "2013-06-10T14:13:06+0000",
            "content": "Thanks Patrick! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13679534",
            "date": "2013-06-10T14:30:55+0000",
            "content": "Is this not fixed in trunk? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13680943",
            "date": "2013-06-12T04:53:48+0000",
            "content": "Is this not fixed in trunk?\n\nIt is. See the comment by the commit tag bot. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716792",
            "date": "2013-07-23T18:38:36+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}