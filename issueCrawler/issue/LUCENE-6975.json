{
    "id": "LUCENE-6975",
    "title": "Add dimensional \"equals\" query to match docs containing precisely a given value",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Today, you can make a dimensional range query using e.g. DimensionalRangeQuery.new1DIntRange, etc., plus a direct ctor for \"expert\" (2D, 3D, etc.) usages, but matching a single value is awkward and users ask about it from time to time.\n\nWe could maybe rename DimensionalRangeQuery to DimensionalQuery and add new \"factories\" like newIntEqualsQuery or something.\n\nOr, we could make new classes, DimensionalIntEqualsQuery etc., and you get to use ordinary constructors?\n\nOr something else?",
    "attachments": {
        "LUCENE-6975.patch": "https://issues.apache.org/jira/secure/attachment/12783540/LUCENE-6975.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15096493",
            "author": "Michael McCandless",
            "date": "2016-01-13T16:35:00+0000",
            "content": "I have no patch here for now ... need to hash out the design first ... "
        },
        {
            "id": "comment-15096508",
            "author": "David Smiley",
            "date": "2016-01-13T16:46:15+0000",
            "content": "I like your idea of renaming DimensionalRangeQuery to DimensionalQuery and adding factory methods. "
        },
        {
            "id": "comment-15105083",
            "author": "Robert Muir",
            "date": "2016-01-18T10:38:12+0000",
            "content": "To me its the word \"Dimensional\" in these names that is the scary one.\n\nBut we need to break here, we can't name things e.g. FloatField or there is a big risk of users mixing the two things. We've also got FloatDocValuesField that we don't want to cause confusion with. And somehow it needs to be clear that e.g. you need DimensionalQuery to use it, TermQuery won't work. To me thats a difference vs a regular Field.\n\nOne idea is the part \"Field\" could be something different. For example instead of FloatDocValuesField we could have \"FloatColumn\", you add that to your document, and then we have ColumnRangeQuery that goes with it, instead of DocValuesRangeQuery. In that case, i feel like the different term really helps you think about what is going on vs Field.\n\nBut what to use for Dim values? FloatValue wouldn't be totally horrible, but I feel like \"value\" is overloaded too much, is there a better term we can use? "
        },
        {
            "id": "comment-15105093",
            "author": "Alan Woodward",
            "date": "2016-01-18T10:46:44+0000",
            "content": "But what to use for Dim values? FloatValue wouldn't be totally horrible, but I feel like \"value\" is overloaded too much, is there a better term we can use?\n\nHow about PointValue?  And then we have PointRangeQuery. "
        },
        {
            "id": "comment-15105112",
            "author": "Robert Muir",
            "date": "2016-01-18T10:59:18+0000",
            "content": "Well I do think we should avoid \"Value\" unless it adds some additional meaning. Thats one problem with doc values, its basically a name that says nothing!\n\nDo you mean something like IntPointValue etc? Why not just IntPoint? Point isn't bad at all, since it does represent what is happening. \n\nOn the other hand, if i just have 'int age' in my document and i want to do range queries on it, its hard to know if that would be the intuitive thing to look into, you'd have to think \"oh, i need to treat it like a 1-dimensional point\". "
        },
        {
            "id": "comment-15105121",
            "author": "Robert Muir",
            "date": "2016-01-18T11:07:53+0000",
            "content": "i do like your idea, those are just some devil's advocate ideas. At least point seems way more intuitive than what we have in trunk and i dont have anything better. It definitely seems better than dimensional and doesn't make me think about mad scientists or time travel.\n\nJust the general idea is something to think about, simple names like fields, columns, and points could help people use the right datastructure for the job. "
        },
        {
            "id": "comment-15106497",
            "author": "Michael McCandless",
            "date": "2016-01-19T09:38:18+0000",
            "content": "I like `IntPoint` and `PointRangeQuery` (and maybe `ExactPointQuery`?) ... I'll try this out. "
        },
        {
            "id": "comment-15110285",
            "author": "Michael McCandless",
            "date": "2016-01-21T08:45:37+0000",
            "content": "Here's a patch, renaming dimensional -> point across the board, and adding a new ExactPointQuery. "
        },
        {
            "id": "comment-15110300",
            "author": "Robert Muir",
            "date": "2016-01-21T09:05:01+0000",
            "content": "+1! "
        },
        {
            "id": "comment-15110318",
            "author": "Alan Woodward",
            "date": "2016-01-21T09:18:03+0000",
            "content": "+1, nice!\n\nRegarding Robert's point about having to think of simple numeric queries as being points, maybe it's worth adding some sugar classes?  So SingleIntField extends IntPoint and takes a single value, similarly ExactNumericQuery is an extension of ExactPointQuery. "
        },
        {
            "id": "comment-15110322",
            "author": "Robert Muir",
            "date": "2016-01-21T09:21:40+0000",
            "content": "Well I agree we need to make the 1D case simpler. I'm not sure if separate classes really does that, or if we just have to improve the apis of what we have. I think we have a couple of choices.\n\nFor sure though, Point is better than Dimensional. I do think we should make the additional tweak here, of \"escape from Field\", meaning PointLatLonField -> LatLonPoint and so on. It can be a followup though. "
        },
        {
            "id": "comment-15110372",
            "author": "Michael McCandless",
            "date": "2016-01-21T10:06:26+0000",
            "content": "Good idea Robert Muir, here's a new patch with LatLonPoint. "
        },
        {
            "id": "comment-15110823",
            "author": "ASF subversion and git services",
            "date": "2016-01-21T15:58:12+0000",
            "content": "Commit 1725998 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1725998 ]\n\nLUCENE-6975: rename dimensional values to points; add ExactPointQuery to match documents containing exactly an indexed point "
        }
    ]
}