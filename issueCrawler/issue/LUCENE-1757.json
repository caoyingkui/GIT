{
    "id": "LUCENE-1757",
    "title": "Support adding a \"stored\" field via a Reader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "All current constructors for Field() that take a Reader explicitly say they will not be stored.\n\nIt would be highly desirable to support adding a stored field to a Document using a Reader (or some special interface that can go direct to the source data)\n\nThis could greatly reduce memory required for adding very large stored fields (if used efficiently by IndexWriter)\n\nThis will support two primary use cases:\n\n1. can create stored field from arbitrary CharSequence \n\nI may internally use a MutableString type class during document processing to conserve memory, however, i would currently have to convert this to a String() prior to adding it as a stored field. If i could just pass a Reader for this mutable string/char sequence indexing could be smart enough to not require allocating double the space.\n\n2. can create a stored field from a file on disk\n\nIf adding large stored fields, the actual value may be on disk to reduce memory use during indexing. In order to support using this as a Stored Field, it would currently have to be entirely loaded into memory as a String/byte[] in order to be added to a Field() (this could be quite large and provoke OutOfMemory error)\n\n\nDocument retrieval considerations:\n\nIt would then also be ideal if when fetching a Document from the index, you could specify a \"max string size\" for the returned stored field\nif the field was larger than this cutoff, a Reader going directly to disk would be returned instead of a String/byte[]  This would again allow smart applications to save memory during document retrieval (this would be especially be nice for highlighting as the source data could be streamed right into the highlighter)\n\n\nIt would also be acceptable if some new interface would be accepted instead of Reader\nthis could be some form of \"sized\" input stream that will return the number of bytes/chars that will be produced in total\nex:\n\npublic interface FieldSource {\n  /** Size of stored field value (in bytes if isBinary() is true, in chars if isBinary() is false) */\n  public int size();\n\n  /** if true, use getInputStream(), if false, use getReader() */\n  public boolean isBinary();\n\n  /** Get the input stream for pulling this from its source (null if isBinary() is false) */\n  public InputStream getInputStream();\n\n  /** Get the reader for reading character data (null if isBinary() is true) */\n  public Reader getReader();\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-13T21:13:48+0000",
            "content": "SPRING_CLEANING_2013 JIRAS. I think this has been long since changed. ",
            "author": "Erick Erickson",
            "id": "comment-13631165"
        }
    ]
}