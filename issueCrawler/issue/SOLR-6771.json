{
    "id": "SOLR-6771",
    "title": "Sending DIH request to non-leader can result in different number of successful documents",
    "details": {
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Basically if you send a DIH request to the non-leader the following set of circumstances can occur:\n1) If there are errors in some of the documents the request itself is rejected by the leader (try making a required field null with some documents to make sure there are rejections). \n2) This causes all documents on that request to appear to fail. The number of documents that a follower is able to update DIH with appears variable. \n3) You need to use a large number of documents it appears to see the anomaly. \n\nThis results in the following error on the follower:\n2014-11-20 12:06:16.470; 34054 [Thread-18] WARN  org.apache.solr.update.processor.DistributedUpdateProcessor  \u2013 Error sending update\norg.apache.solr.common.SolrException: Bad Request\n\n\n\nrequest: http://10.0.2.15:8983/solr/collection1/update?update.distrib=TOLEADER&distrib.from=http%3A%2F%2F10.0.2.15%3A8982%2Fsolr%2Fcollection1%2F&wt=javabin&version=2\n        at org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer$Runner.run(ConcurrentUpdateSolrServer.java:240)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:722)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-08-05T11:25:42+0000",
            "author": "Steen Manniche",
            "content": "We have had the same problem with a solr 5.1.1 installation. Our setup has five servers, each with five shards, and a replication factor of 2.\n\nThe error in our case was caused by a replica that tries to push a received invalid document to a shard leader or vice versa. The invalidity of the documents in question was that it contained fields that we had not defined in the schema.\n\nEven though we are using a managed schema, the solrconfig.xml contained the following lines\n\n\n<schemaFactory class=\"ManagedIndexSchemaFactory\">\n    <bool name=\"mutable\">false</bool>\n    <str name=\"managedSchemaResourceName\">managed-schema</str>\n</schemaFactory>\n\n\n\nThe boolean value in mutable would disallow API indexing operations to mutate the schema, even though it allowed for the creation of the fields on the schema through the Schema API.\n\nFor reasons yet to be completely clarified, the solr process would try to replicate the document before writing to the local solr directory. This would throw the exception listed above before the exception showing that the document contained a field which could not be created with the indexing operation.\n\n\"Unlocking\" the managed schema by setting mutable to true and restarting the entire cluster made it possible for the solr process to write the pending replication updates and then the server was able to tell about fields not defined in the schema but present in the documents. ",
            "id": "comment-15409338"
        }
    ]
}