{
    "id": "LUCENE-5640",
    "title": "Cleanup & deprecate Token class / Improve default AttributeFactory to no longer use reflection",
    "details": {
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "We should remove code duplication in the Token class:\n\n\tcopy constructors\n\treinit() shit\n\tnon-default clone()\n\n\n\nThis is too bugy. Most of the methods can be simply removed.\n\nThis issue will also factor out the basic attributes to a separate implementation class (without the Token extra stuff). Token then just extends this class (in the tokenattributes package) and adds the additional stuff not needed for an Attribute. Token itsself will get deprecated.\n\nAlso part of the slowdown in the parent issue is caused by ineffective DefaultAttributeFactory, which uses reflection to instantiate new attributes. As we are on Java 7 now, we can use MethodHandle to do this. MethodHandle does access checks only once on creating the factory or when the attribute is seen first. Later invocations are done without any result type conversions and parameter conversions as a statically linked constructor call. This greatly improves performance with Java 8, Java 7 is approx as fast, unless its completely static.",
    "attachments": {
        "LUCENE-5640.patch": "https://issues.apache.org/jira/secure/attachment/12643262/LUCENE-5640.patch",
        "LUCENE-5640-4x.patch": "https://issues.apache.org/jira/secure/attachment/12643666/LUCENE-5640-4x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13988963",
            "author": "Robert Muir",
            "content": "The start to a patch. Don't worry about tests, i will clean those up on LUCENE-5642 first. ",
            "date": "2014-05-04T11:56:09+0000"
        },
        {
            "id": "comment-13988996",
            "author": "Uwe Schindler",
            "content": "I think we should factor out the attribute stuff \"non-token\" from Token class and move it as class inbetween: o.a.l.analysis.tokenattributes.CombinedTokenAttributeImpl\n\nToken is the just a subclass of this one and add the highlighter-needed crazy stuff. The basic impl is clean and straight-forward. Also we should remove FlagsAttribute from it and let only implement it in Token only (or nuke the whole attribute completely). ",
            "date": "2014-05-04T14:33:20+0000"
        },
        {
            "id": "comment-13988999",
            "author": "Robert Muir",
            "content": "That sounds great: though Token is pretty minimal here already, its just one ctor taking CharSequence,int,int that is used? ",
            "date": "2014-05-04T14:37:56+0000"
        },
        {
            "id": "comment-13989001",
            "author": "Uwe Schindler",
            "content": "Yeah, it is more cosmetic. I just want the impl and AttributeFactory part of the tokenattributes package - and look like a attributeImpl: *Impl + only public no-arg ctor. ",
            "date": "2014-05-04T14:43:12+0000"
        },
        {
            "id": "comment-13989029",
            "author": "Uwe Schindler",
            "content": "Hi Robert: Do you think we need PayloadAttribute in the default set.\n\nI started to prepare a patch (based on your's) that refactors the basic impls away into a separate Impl class. I removed FlagsAttribute already, but PayloadAttribute is a different thing to look at. I don't think it should be in the default attributes! ",
            "date": "2014-05-04T16:11:41+0000"
        },
        {
            "id": "comment-13989036",
            "author": "Robert Muir",
            "content": "I really think it should, because the indexer must look for it for every token, for fields with positions enabled. ",
            "date": "2014-05-04T16:39:41+0000"
        },
        {
            "id": "comment-13989038",
            "author": "Robert Muir",
            "content": "OK I think i may be wrong, the indexer does this:\n\n\npayloadAttribute = attributeSource.getAttribute(PayloadAttribute.class);\n\n\n\nSo this will not do anything right? its just a hashmap lookup? ",
            "date": "2014-05-04T16:42:10+0000"
        },
        {
            "id": "comment-13989069",
            "author": "Uwe Schindler",
            "content": "Yes! ",
            "date": "2014-05-04T18:02:06+0000"
        },
        {
            "id": "comment-13989125",
            "author": "Uwe Schindler",
            "content": "Here is a (quite large) patch that refactors a bit more:\n\n\tMove AttributeSource.AttributeFactory to a top-level class (this makes most of the patch)\n\tAdd a special AttributeFactory that can be used to implement factories that return a specific class instance for a set of attributes.\n\tIn AttrbuteFactory cache the constructor instances of all AttributeImpls. This spares looking up the constructor in addAttribute(). The trick with SoftReference was inspired by the JDK. Theoretically, the reference may not be needed at all if impl and attribute are from same classloader..\n\tFactored out the basic attributes to PackedTokenAttributeImpl (no flags and payloads)\n\tToken got deprecated (yippee) and additionally implements FlagsAttribute and PayloadAttribute\n\n ",
            "date": "2014-05-04T20:20:27+0000"
        },
        {
            "id": "comment-13989203",
            "author": "Robert Muir",
            "content": "This patch has the same performance as trunk according to luceneutil's TestAnalyzerPerf. ",
            "date": "2014-05-04T23:53:44+0000"
        },
        {
            "id": "comment-13989211",
            "author": "Uwe Schindler",
            "content": "New patch, which also improves the AttributeFactory: it no longer uses reflection to create the instances, instead Java 7 precompiled MethodHandles which are compiled to bytecode by the JVM.\n\nThis one adds rethrow() again, because it is needed for MethodHandles to not loose Exceptions. The given implementation of rethrow() is private to AttributeSource, but works without instantiating (its same trick, but shorter and more elegant). ",
            "date": "2014-05-05T00:26:03+0000"
        },
        {
            "id": "comment-13989223",
            "author": "Robert Muir",
            "content": "I benchmarked this against trunk, by hacking both checkouts to have a NoReuseStrategy... this patch is significantly (like 30-50%) slower than trunk.\n\nI think this java7 methodhandles stuff is very slow, it totally dominates the cpu...\n\n\nCPU SAMPLES BEGIN (total = 30511) Sun May  4 21:01:17 2014\nrank   self  accum   count trace method\n   1 66.09% 66.09%   20164 300743 java.lang.invoke.MethodHandleNatives.init\n   2  6.73% 72.81%    2052 300808 java.lang.Object.notifyAll\n   3  6.44% 79.25%    1965 300823 java.lang.invoke.MethodHandleNatives.init\n   4  0.95% 80.20%     289 300863 org.apache.lucene.codecs.compressing.LZ4.compress\n   5  0.88% 81.08%     269 301196 org.apache.lucene.index.FreqProxFields$FreqProxDocsAndPositionsEnum.reset\n\n\n\non the other hand with trunk, its of course slower than when we are reusing by far, but you dont see this stuff:\n\nCPU SAMPLES BEGIN (total = 23623) Sun May  4 21:05:15 2014\nrank   self  accum   count trace method\n   1 13.48% 13.48%    3184 300667 java.lang.Object.notifyAll\n   2 13.23% 26.71%    3125 300741 org.apache.lucene.analysis.core.LowerCaseFilter.<init>\n   3  4.06% 30.77%     959 300768 java.util.LinkedHashMap.addEntry\n   4  1.98% 32.75%     468 300767 org.apache.lucene.util.AttributeSource.addAttributeImpl\n   5  1.60% 34.35%     379 300810 org.apache.lucene.util.BytesRefHash.add\n   6  1.46% 35.81%     345 300763 org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzRefill\n   7  1.35% 37.17%     320 300812 org.apache.lucene.util.packed.AbstractAppendingLongBuffer.size\n\n\n\n\"just say no to MethodHandle\"... good to know  ",
            "date": "2014-05-05T01:06:35+0000"
        },
        {
            "id": "comment-13989230",
            "author": "Uwe Schindler",
            "content": "New patch using invokeExact. ",
            "date": "2014-05-05T01:28:48+0000"
        },
        {
            "id": "comment-13989237",
            "author": "Robert Muir",
            "content": "Now very close to trunk (only something like 2-3% difference, but doesnt look like noise).\n\nNo strange stuff in profiler anymore. Also maybe it is someting else in the patch, i did not test the previous reflection-based one in this way yet, I am only comparing to trunk. ",
            "date": "2014-05-05T01:41:00+0000"
        },
        {
            "id": "comment-13989304",
            "author": "Uwe Schindler",
            "content": "Hi Robert, I think the small difference is explained:\n\nIn trunk we currently use Token class and the TokenAttributeFactory is creating it with new Token() after the isAssignableFrom() so there is no overhead at all. The latest patch is using a more generic factory with invokeExact. FYI, isAssignableFrom() is iintrinsic.\n\nIf you compare the reflection-based patch (not trunk) with this one, you should see a large improvement; if you compare trunk with this, maybe a small degradion (which is what you see) because of extra invokeExact overhead. This code is now similar to Java 8's closures that use the \"::\" operator.\n\nIn any case, as we reuse TokenStreams this was just a hard check of what happens if you don't reuse, so the latest patch is a huge improvement. ",
            "date": "2014-05-05T06:08:29+0000"
        },
        {
            "id": "comment-13989321",
            "author": "Uwe Schindler",
            "content": "In addition, the code we now have is like LambdaMetaFactory in Java 8: The code used by the Token attribute factory or the PackedAttributeFactory is now:\n\n\npublic static final AttributeFactory DEFAULT_TOKEN_ATTRIBUTE_FACTORY =\n  AttributeFactory.getStaticImplementation(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, PackedTokenAttributeImpl.class);\n\n\n\nwhose abstract newInstance() method does the same like a closure with PackedTokenAttributeImpl::new in Java 8. The trick here is to get the constructor non-reflective and call it with dynamic linking. So this is really the correct way to do this.\n\nThis will improve also the speed with other addAttributes() where we don't have the combined factory, like in FuzzyQuery or whenever we add single attributes.\n\nThe small overhead in the example (I don't see it in Java 8) that Robert measured could be removed by replacing the above code snippet with:\n\n\npublic static final AttributeFactory DEFAULT_TOKEN_ATTRIBUTE_FACTORY =\n  new AttributeFactory.StaticImplementationAttributeFactory<>(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, PackedTokenAttributeImpl.class) {\n  @Override\n  public PackedTokenAttributeImpl newInstance() { return new PackedTokenAttributeImpl(); }\n};\n\n\n\nBut this makes code less readable, especially when we add new packed attribute impls (we could think of providing them for various other combinations). As said, the very small lambda overhead is neglectible, because we reuse.\n\nIt would also be interesting to compare the good old non-packed AttributeImpl with that approach! I think we have an improvement here, too, but packing is still better (we spare the reflective call, but we still have to populate the maps). ",
            "date": "2014-05-05T07:12:50+0000"
        },
        {
            "id": "comment-13989377",
            "author": "Uwe Schindler",
            "content": "Cleanups:\n\n\tfix javadoc error\n\timprove documentation\n\timprove MockUTF16TermAttributeImpl (including use of StandardCharsets)\n\n\n\nI think this is ready, if Robert agrees with my explanation I did before.\n\nWhile running tests, TestRandomChains also failed for me with PathTokenizer, but this also happened to jenkins, so its unrelated to the changes here. ",
            "date": "2014-05-05T09:25:29+0000"
        },
        {
            "id": "comment-13989382",
            "author": "Robert Muir",
            "content": "\nBut this makes code less readable\n\nBut prevents things from being slower! Can we please retain the \"POJO\" construction of Token? Doesn't it also impact things like save/restoreState and cloning?  ",
            "date": "2014-05-05T09:44:08+0000"
        },
        {
            "id": "comment-13989383",
            "author": "Uwe Schindler",
            "content": "Doesn't it also impact things like save/restoreState and cloning?\n\nNo. Save/restore state does not add/remove attributes. cloneAttributes() creates a deep clone of the internal maps, so it just copies what is already there. AttributeFactory is not used.\n\nThis code only affects addAttribute - so constructing new TokenStreams, if the attribute is not already there. And this is only done on construction. This patch largely improves adding non-common attributes like KeywordAttribute or PayloadAttribute. The PackedAttributeImpl is the same as before, we can still talk about the explicit new, although I disagree here.\n\nThis is like other discussions: Code duplication is not good just to win 1% of performance in a micro-benchmark. This is what you always telling Mike, too. ",
            "date": "2014-05-05T09:48:09+0000"
        },
        {
            "id": "comment-13989400",
            "author": "Robert Muir",
            "content": "This is not really code duplication though, its the difference between doing something basic (like creating a new POJO in the old-fashioned way), and doing something complicated (like new untested MethodHandle/invokedynamic/etc/etc). One of these has been around for a while and we know how it behaves, the other has not.\n\nThe attributes are thousands of lines of very complicated code: WeakHashMaps/SoftReferences/Reflection,etc. I'm only saying, if you can add those 3 lines so we don't get slower, that seems like a no brainer. ",
            "date": "2014-05-05T10:17:46+0000"
        },
        {
            "id": "comment-13989403",
            "author": "Michael McCandless",
            "content": "I haven't looked closely here, but why does simplifying Token.java required new hairy things like MethodHandle / getConstructorForInterface / etc.? ",
            "date": "2014-05-05T10:26:36+0000"
        },
        {
            "id": "comment-13989404",
            "author": "Uwe Schindler",
            "content": "The MethodHandle code is also used to create the attributes in the DEFAULT_ATTRIBUTE_FACTORY. And this improves a lot in comparison to the old reflection based approach.\n\nI am sorry for the first patch yesterday to be slower. In fact it was unfair, was just to late in the evening (4 am in the morning):\n\n\tI did not use invokeExact and because of that, unter the hood it used the similar code like reflection.\n\tThe unfair part was that the stupid bug I had was to implicit use reflection to create the Token instance, and this was bad.\n\tWith invokeExact its now identical to all code around for sorting and lists of Java 8. All code there uses the exact same pattern, generated by the javac compiler.\n\tInvokedynamic is not involved at all. Invokedynamic is something else, here we have hard linked ctor calls.\n\n\n\nYou standpoint is like forbidding this syntax in Java 8: Arrays.sort(array, Integer::compare); - this is heavily tested and as fast as Arrays.sort(array, new Comparator() { ... };  This is just some hotspot noise.\n\nIt would be really nice (instead of complaining here about nonsense, sorry), if we could check the performance of this with non-packed AttributeImpls. E.g. for TokenStreams adding KeywordAttribute or PayloadAttribute or JapaneseFoobarAttribute. Here we should see a large improvement in contrast to old code. Or create a lot of FuzzyTermsEnums! ",
            "date": "2014-05-05T10:29:53+0000"
        },
        {
            "id": "comment-13989409",
            "author": "Robert Muir",
            "content": "OK, ill benchmark it (against both packed and unpacked). I ran several iterations when i benchmarked the patch last night to explicitly eliminate noise. I can do more so that we know if something is noise or if it is not  ",
            "date": "2014-05-05T10:40:32+0000"
        },
        {
            "id": "comment-13989428",
            "author": "Uwe Schindler",
            "content": "How about this:\n\n\tI wait for your additional benchmark: I changed the code already to be more effective, maybe that makes it. It wozuld also be good to one time compare the combined case with Java 8 instead Java 7. Maybe there are improvements in Java 8 not yet in Java 7 regarding MethodHandle. In that case your argument is of course correct and it may be to early to change the default packed attribute imp\n\tIf the benchmark shows a neglectible slowdown (I don't accept 1% or 2% or like that - if you change the JDK version this 1% is easily reached and is in most cases just the happyness of Hotspot), I will change the default attribute factory for Token using PackedTokenAttributeImpl to have the explicit ctor call.\n\tThe others like the deprecated Token#TokenAttributeFactory and the mayn test-ones can use the dynamic code. In trunk I would like to let the non-explicit one in trunk, so I would commit the explicit new PackedTokenAttributeImpl() in 4.x. Is this a deal? Trunk will go to Java 8 at some time, so we are on the right path.\n\tMethodHandles instead of Constrcutor instances should really be used for the DEFAULT_ATTRIBUTE_FACTORY because there should be a huge improvement (I did quick Mircobench: Class#newInstance() slower than Constructor#newInstance muuuuch slower than MethodHandle#invokeExact. This is the case, because all the access checks and type conversions are done one time and not on every instantiation.\n\n ",
            "date": "2014-05-05T11:28:26+0000"
        },
        {
            "id": "comment-13989454",
            "author": "Robert Muir",
            "content": "I ran the benchmark 10 times for trunk and patch (indexing with reuse disabled, time in milliseconds, StandardAnalyzer)\n\nTrunk\nmean: 24386.1\nmedian: 24377.0\nstddev: 189.4\n\nPatch\nmean: 25047.6\nmedian: 25076.5\nstddev: 151.8\n\nI tried with JapaneseAnalyzer, thinking the patch would be faster in this case (has a lot of non-standard attributes). But its actually slower\n\nTrunk\nmean: 45059.3\nmedian: 45065\nstddev: 629.5\n\nPatch:\nmean: 51382.7\nmedian: 51496\nstddev: 196.3\n\nSo something is up I think. ",
            "date": "2014-05-05T12:15:51+0000"
        },
        {
            "id": "comment-13989460",
            "author": "Robert Muir",
            "content": "With java8, the performance is the exact opposite! so the patch is 10% faster with japanese where it was 10% slower with java7. And its slightly faster for standard where it was slghtly slower with java7.  ",
            "date": "2014-05-05T12:29:53+0000"
        },
        {
            "id": "comment-13989467",
            "author": "Robert Muir",
            "content": "and with update 55 (my previous benchmarks were update 25), it seems to be more or less the same (any difference appears to be noise). So i will not complain about that performance anymore.  ",
            "date": "2014-05-05T12:38:59+0000"
        },
        {
            "id": "comment-13989504",
            "author": "Uwe Schindler",
            "content": "I haven't looked closely here, but why does simplifying Token.java required new hairy things like MethodHandle / getConstructorForInterface / etc.?\n\nThat's unrelated. This should improve the reflective default AttributeFactory (because it no longer uses refection, only initially to look up the instance). Whenever addAttribute() has to create a new attribute implementation it can create the instance without any overhead, almost as fast as \"new SomethingImpl()\". Before it was using reflection on every call with access checks, security manager,... Now its doing the reflective access only one time and then does a hard-linked invocation using the method handle. Its no hairy trick, its just Java 7 as documented. We were just not able to do this before. So this is a general improvement,\n\ngetConstructorForInterface \n\n... was already there before the change we just moved the impl to a new class. In the old code this was just using reflection to get the constructor. The method was renamed from {getClassForInterface}} to getConstructorForInterface to make it more typesafe - so no reflective access is needed.\n\nThis is only partly related to Token, its just a general refactoring to have a packed attribute for the default attributes. This is just one big patch, sorry. ",
            "date": "2014-05-05T13:26:30+0000"
        },
        {
            "id": "comment-13990637",
            "author": "Uwe Schindler",
            "content": "New patch:\n\n\tI improved the AttributeSource to no longer use a LinkedList for the implemented interfaces of an Impl\n\tI am not really happy about this, but SoftReference was also wrong. After thinking more than 24 hrs about it, I have no good solution to prevent the static map from sitting on classes forever. The fix here is: We use MethodHandles only for attributes that were loaded by Lucene's own classloader. Really foreign ones (e.g. from Solr plugins) will solely use reflective mode to create new instances of attributes.\n\n\n\nHere the explanation:\nThe problem is that we originally had a map Attribute -> AttributeImpl, which was weak for keys and values. By this the classloader can safely remove loaded classes, because we don't strongly reference the attributes nor the implementations. The values must be weak, too, otherwise the impl class indirectly strong references the interface (because its class object implements the interface). As Weak maps rely on the fact that the key get GCed, this will never happen, because of the strong value reference.\n\nThis all went fine with the pure reflective approach. But when using method handles, we can no longer put them as Weak values into the map. Because nothing has a strong reference to the MethodHandle, its cleaned up asap. So we have the reflective access again and again. If we make the MethodHanlde a strong reference, we have the same problem like above: MethodHandle refers to its class (the AttributeImpl) and that one refers to the interface -> the key can never GCed.\n\nThe workaround here is: The cache handles both cases (MethodHandles and reflective). The MethodHandles are strong references and are only used for Lucene's own classloader. So we cannot sit on foreign classes from plugins. Foreign interface implementations are handled like before.\n\nThe fast path in createAttributeInstance() is now:\n\n\tcheck cache\n\tif cache contains MethodHandle invoke it directly (this is faster than before, because no wek ref dereferring)\n\tif cache contains a Reference object (pointing to our the impl class), we use reflective: Class#newInstance() [same as in earlier Lucene versions]\n\tif the cache does not have an entry, we load the class as always\n\tif classloader is our own, we resolve the method handle and store it as hard reference in the weak map and execute it\n\totherwise we put a WeakReference to the class for later reflective access into the map.\n\n\n\nWe have a test: newAttributeImpl in BaseTokenStreamTestcase chooses between all 4 AttributeFactories: DEFAULT (MethodHandles and Reflective), Reflective only, the packed impl, and Token's attribute factory. ",
            "date": "2014-05-06T13:36:36+0000"
        },
        {
            "id": "comment-13991241",
            "author": "Uwe Schindler",
            "content": "Added some tests.\n\nWill commit this in a moment. ",
            "date": "2014-05-06T22:20:35+0000"
        },
        {
            "id": "comment-13991246",
            "author": "ASF subversion and git services",
            "content": "Commit 1592914 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1592914 ]\n\nLUCENE-5640: Refactor Token, add new PackedTokenAttributeImpl, make use of Java 7 MethodHandles in DEFAULT_ATTRIBUTE_FACTORY ",
            "date": "2014-05-06T22:24:59+0000"
        },
        {
            "id": "comment-13991424",
            "author": "Uwe Schindler",
            "content": "Patch after merge to 4.x. ",
            "date": "2014-05-07T00:58:26+0000"
        },
        {
            "id": "comment-13991429",
            "author": "ASF subversion and git services",
            "content": "Commit 1592929 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1592929 ]\n\nMerged revision(s) 1592914 from lucene/dev/trunk:\nLUCENE-5640: Refactor Token, add new PackedTokenAttributeImpl, make use of Java 7 MethodHandles in DEFAULT_ATTRIBUTE_FACTORY ",
            "date": "2014-05-07T01:02:37+0000"
        },
        {
            "id": "comment-13991432",
            "author": "ASF subversion and git services",
            "content": "Commit 1592930 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1592930 ]\n\nLUCENE-5640: Remove deprecated stuff ",
            "date": "2014-05-07T01:04:40+0000"
        }
    ]
}