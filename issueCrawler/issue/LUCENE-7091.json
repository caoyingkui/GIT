{
    "id": "LUCENE-7091",
    "title": "Add doc values support to MemoryIndex",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Sometimes queries executed via the MemoryIndex require certain things to be stored as doc values. Today this isn't possible because the memory index doesn't support this and these queries silently return no results.",
    "attachments": {
        "LUCENE-7091.patch": "https://issues.apache.org/jira/secure/attachment/12792478/LUCENE-7091.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15188976",
            "author": "Martijn van Groningen",
            "date": "2016-03-10T09:45:51+0000",
            "content": "Added a test that adds simple doc values support for doc values. Nothing fancy here, but should just work. "
        },
        {
            "id": "comment-15188994",
            "author": "Alan Woodward",
            "date": "2016-03-10T10:03:54+0000",
            "content": "+1, nice!\n\nIs there any reason for DocValuesHolder to be package-private? "
        },
        {
            "id": "comment-15189014",
            "author": "Martijn van Groningen",
            "date": "2016-03-10T10:18:11+0000",
            "content": "Is there any reason for DocValuesHolder to be package-private?\n\nNo, nothing outside MemoryIndex uses it. I can change the visibility to private. "
        },
        {
            "id": "comment-15189525",
            "author": "Martijn van Groningen",
            "date": "2016-03-10T16:48:55+0000",
            "content": "Updated the patch:\n\n\tMade sure the sorted set doc values doesn't have duplicate values.\n\tAdded extra test to verify that unsupported usage fails.\n\tChanged DocValuesHolder class' visibility to private .\n\n "
        },
        {
            "id": "comment-15189769",
            "author": "David Smiley",
            "date": "2016-03-10T19:12:46+0000",
            "content": "Cool.\n\nInstead of DocValuesHolder, how about actually having one implementation class per DocValues type that holds the value.  So, a MemoryNumericDocValues for example.  In your patch you do an anonymous class for each one but I think it would be clearer to not do that and eliminate the DocValuesHolder which is holding for multiple types of values at once which is a little confusing.  Note SortedDocValues extends BinaryDocValues so that eliminates an implementation.  I wish Lucene's DocValue abstractions were interfaces and not abstract classes since it prevents collapsing some other similar implementations into fewer concrete classes.\n\nCould you move fields() above MemoryFields so it reads more naturally?\n\nWhy is there a different sorting approach to sorted numeric vs BytesRef DV types?  The former you add to an array and sort eventually, and the latter you use a TreeSet.  They could both be handled consistently \u2013 array first then sort later.\n\nI noticed the BytesRefs DV data isn't copied; we retain a reference.  Is that allowed? I suspect not; seems very risky.  Notice that the term index data uses BytesRefHash wrapped around the shared ByteBlockPool.  Perhaps we should do similarly using the same ByteBlockPool. "
        },
        {
            "id": "comment-15190743",
            "author": "Martijn van Groningen",
            "date": "2016-03-11T10:00:23+0000",
            "content": "Thanks for looking at this! I'll try to split this DocValuesHolder class into separate classes per DV type.\n\nIn your patch you do an anonymous class for each one but I think it would be clearer to not do that and eliminate the DocValuesHolder which is holding for multiple types of values at once which is a little confusing.\n\nMemoryIndex is supposed to be thread safe after the freeze() method has been invoked. (this is describe in the jdocs) Returning the same doc values instance for binary, sorted, number and sorted number doc values is fine, but not for sorted set doc values. That implementation keeps state in order to iterate over the values. So for sorted set doc values we always need to return a new instance and in order to be consistent with the other doc values types I did they same thing there too. I think this isn't a big of deal.\n\nCould you move fields() above MemoryFields so it reads more naturally?\n\nSure, will do\n\nWhy is there a different sorting approach to sorted numeric vs BytesRef DV types? The former you add to an array and sort eventually, and the latter you use a TreeSet. They could both be handled consistently \u2013 array first then sort later.\n\nThat is what I thought initially too, but the difference between the two is that sorted numeric DV can hold duplicates while sort set DV doesn't hold duplicates. This is why I took the approach of using treeset during the building phase for any binary DV.\n\nI noticed the BytesRefs DV data isn't copied; we retain a reference. Is that allowed?\n\nGood point, let me fix this. "
        },
        {
            "id": "comment-15190828",
            "author": "Martijn van Groningen",
            "date": "2016-03-11T11:43:42+0000",
            "content": "I've updated the patch based on David's comments.\n\nI did not split `DocValuesHolder` up in a class per DV type, but instead I've split it up in a class for the binary based DV and a class for the numeric based DV. So that the actual storage (long[] and BytesRefHash) is shared amongst the different DV impls. For all DV type but sorted set DV the patch now returns a pre set DV class. "
        },
        {
            "id": "comment-15191098",
            "author": "David Smiley",
            "date": "2016-03-11T16:09:44+0000",
            "content": "Returning the same doc values instance for binary, sorted, number and sorted number doc values is fine, but not for sorted set doc values. \n\nGood point.\n\nSome comments:\n\n\n\taddField: unfortunately this method is very long and it's difficult to follow.  I understand that it's not easy to split it up because of the number of local variables.  One thing that would help is renaming \"longValues\" and \"bytesValuesSet\" to make them clearly associated with doc-values.  I suggest \"dvLongValues\" and \"dvBytesValuesSet\" and add a comment to the former //NOT a set.  Another thing that would help is comments to declare the different phases of this method... like definitely before the switch(docValuesType) and at other junctures.  But I already see some code duplication in how numericProducer & binaryProducer are initialized.  Here's an idea:  Maybe Info could be changed to hold this state mutably.  Then, there wouldn't be a long stage of pulling out each var from the info only to put it all back again.  If this idea is successful, there would be much fewer local variables, and then you could easily extract a method to handle the DV stuff and a separate method for the Terms stuff.  What do you think?\n\n\n\n\n\tinstead of freeze() knowing to call both getNormDocValues & prepareDocValues (and to sort terms), I suggest that freeze be implemented on each Info where those methods can be called there.  I think that's easier to maintain.\n\n\n\n... to be continued; I didn't finish reviewing ... "
        },
        {
            "id": "comment-15191669",
            "author": "Martijn van Groningen",
            "date": "2016-03-11T23:17:55+0000",
            "content": "Good idea, changing the state to be mutable in the Info class allowed for splitting this big method up into 2 smaller methods. \n\nI updated the patch. This looks much better now. "
        },
        {
            "id": "comment-15191675",
            "author": "Martijn van Groningen",
            "date": "2016-03-11T23:27:48+0000",
            "content": "Good idea, changing the state to be mutable in the Info class allowed for splitting this big method up into 2 smaller methods. \n\nI updated the patch. This looks much better now. "
        },
        {
            "id": "comment-15192549",
            "author": "Martijn van Groningen",
            "date": "2016-03-13T22:11:47+0000",
            "content": "Small update:\n\n\tMoved the doc values prepare state to Info class\n\tUse spare BytesRef in BinaryDocValuesProducer to fetch binary / sorted / sorted set DV.\n\n "
        },
        {
            "id": "comment-15192781",
            "author": "David Smiley",
            "date": "2016-03-14T05:57:12+0000",
            "content": "I really like how this refactor has turned out of making Info mutable.  \n\n\n\tI think the javadocs sentence you added to addField meant to use \"if\" not \"is\".\n\tIn getInfoForExpectedDocValuesType(), the two checks using (info.fieldInfo.getDocValuesType() read a little weird/confusing to me but I get the gist of the intent.  Couldn't the first condition simply check expectedType == DocValuesType.NONE to return null?  That's logically the same I think and could even be checked at the very front of the method.\n\tgetSortedSetDocValues's impl ought to reset index to 0 on setDocument().\n\tgetDocsWithField doesn't need to actually implement a bits, it can use return new Bits.MatchAllBits(1);\n\tI think there's a bug in addField's positionIncrementGap & offsetGap handling.  If fields are added to MemoryIndex that are DV then terms data, the posInc & offset will get incremented when it shouldn't be.  This could be corrected by checking info.numTokens.  Please modify or add a test for this.  The boost should be applied conditionally as well (only when storeTerms is invoked).\n\tstoreDocValues(): for SORTED_NUMERIC I'm concerned about that growing algorithim... it's O(N^2) as it creates a new array each time that is just one larger.  Ouch.  Maybe use a straight-forward array doubling algorithm and keep track of the number of values?\n\tIt's a shame that SORTED & BINARY use a BytesRefHash (adds overhead) and ultimately get sorted when, really, it's not necessary of course.  The ByteBlockPool could be used directly to store it (see BytesRefArray for examples) with a little bit of code.  This isn't a blocker but it would sure be nice.\n\ttestDocValues() should test non-set behavior of sorted numerics, and set behavior of sorted set DV.  Could be done easily by changing or adding a couple lines of code.  Add term text here too, and under same field names as DV ones at that.\n\n "
        },
        {
            "id": "comment-15193153",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T12:00:45+0000",
            "content": "Updated the patch with the good points that you've raised.\n\nIt's a shame that SORTED & BINARY use a BytesRefHash (adds overhead) and ultimately get sorted when, really, it's not necessary of course. The ByteBlockPool could be used directly to store it (see BytesRefArray for examples) with a little bit of code. This isn't a blocker but it would sure be nice.\n\nAgreed, that would be nicer. I think we should do this in a follow up issue.\n\nAdd term text here too, and under same field names as DV ones at that.\n\nI think this is covered in TestMemoryIndexAgainstRAMDir#testDocValuesMemoryIndexVsNormalIndex() test, in this test regular fields are randomilly added. "
        },
        {
            "id": "comment-15193364",
            "author": "David Smiley",
            "date": "2016-03-14T14:26:44+0000",
            "content": "Almost there...\n\n\n\t(still applies to the other addField): I think the javadocs sentence you added to addField meant to use \"if\" not \"is\".\n\tAt first I thought there might have been a bug for double-applying the boost since I see you're still passing \"boost\" as a constructor argument to Info.  But now I see you only apply when numTokens > 0.  I think it would be much clearer (and simpler) to remove boost from the constructor to Info, and simply apply it in storeTerms (no matter what numTokens is).  It's hard to judge the testDocValuesDoNotAffectBoostPositionsOrOffset for this problem... it'd get encoded in the norm and I have no idea what norm it should be; your test asserts -127.  Hmmmm.  Perhaps simply leave a check of that nature to the test that asserts parity with the real index in RAMDirectory\n\tin storeDocValues() SORTED_NUMERIC: you call ArrayUtil.grow with only the array.  This results in the same O(N^2) we're trying to avoid!  Pass in a second argument of the desired length.\n\n "
        },
        {
            "id": "comment-15193486",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T15:33:16+0000",
            "content": "> in storeDocValues() SORTED_NUMERIC: you call ArrayUtil.grow with only the array. This results in the same O(N^2) we're trying to avoid! Pass in a second argument of the desired length.\n\nMaybe I was a bit concerned about the size of these arrays. ArrayUtil.grow(array) grows an array by an 1/8th and at least adds 3 additional slots, I thought that would be enough, since we don't know upfront how many new values are going to be added. I can change it double the array instead. "
        },
        {
            "id": "comment-15193500",
            "author": "David Smiley",
            "date": "2016-03-14T15:42:01+0000",
            "content": "My main concern is that it not be O(N^2).  Personally I'm not too concerned with ArrayUtil.grow's algorithm.  You might also pick an initial size of something like '4' for the SORTED_NUMERIC case (since it implies the intent to add more than 1).  With MemoryIndex I think speed is generally more important than memory size any way. "
        },
        {
            "id": "comment-15193519",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T16:00:02+0000",
            "content": "Right, speed over memory, I'll change it to the doubling logic you initially suggested. "
        },
        {
            "id": "comment-15193533",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T16:08:55+0000",
            "content": "Updated the patch.\n\n(still applies to the other addField): I think the javadocs sentence you added to addField meant to use \"if\" not \"is\".\n\nChanged. \n\nAt first I thought there might have been a bug for double-applying the boost since I see you're still passing \"boost\" as a constructor argument to Info. But now I see you only apply when numTokens > 0. I think it would be much clearer (and simpler) to remove boost from the constructor to Info, and simply apply it in storeTerms (no matter what numTokens is). It's hard to judge the testDocValuesDoNotAffectBoostPositionsOrOffset for this problem... it'd get encoded in the norm and I have no idea what norm it should be; your test asserts -127. Hmmmm. Perhaps simply leave a check of that nature to the test that asserts parity with the real index in RAMDirectory\n\nRemoved the boost constructor parameter and added a dedicated test for this in TestMemoryIndexAgainstRAMDir.\n\nin storeDocValues() SORTED_NUMERIC: you call ArrayUtil.grow with only the array. This results in the same O(N^2) we're trying to avoid! Pass in a second argument of the desired length.\n\nChanged, the size is array doubled when growing is necessary. "
        },
        {
            "id": "comment-15193749",
            "author": "David Smiley",
            "date": "2016-03-14T17:53:06+0000",
            "content": "Eh, the grow algorithm/code still isn't right.  The code in the patch will double the size even though it's likely plenty big to add the current long trying to get added.  This is what I mean:\n\n      case SORTED_NUMERIC:\n        if (info.numericProducer.dvLongValues == null) {\n          info.numericProducer.dvLongValues = new long[4];\n        }\n        info.numericProducer.dvLongValues = ArrayUtil.grow(info.numericProducer.dvLongValues, info.numericProducer.count + 1);\n        info.numericProducer.dvLongValues[info.numericProducer.count++] = (long) docValuesValue;\n        break;\n\n\n\nEverything else is good.  Assuming you agree with this code snippet above, +1 from me to commit. "
        },
        {
            "id": "comment-15194093",
            "author": "Martijn van Groningen",
            "date": "2016-03-14T20:45:55+0000",
            "content": "Ah, that makes more sense. I misunderstood what you meant earlier. I've updated the patch. Thank you for this thorough review!  "
        },
        {
            "id": "comment-15194938",
            "author": "Martijn van Groningen",
            "date": "2016-03-15T08:44:30+0000",
            "content": "I'll backport this change to 6.0 and 6.x branches. Otherwise LUCENE-7093 can't be backported and that would be bad as simple queries on numeric fields wouldn't work anymore, since numerics have moved to use points instead.\n\nBecause of this I'll backport LUCENE-7087 to 6.0 too. "
        },
        {
            "id": "comment-15194959",
            "author": "ASF subversion and git services",
            "date": "2016-03-15T09:02:18+0000",
            "content": "Commit bd0803fd41c68297c54201529c2c14ad50cda48e in lucene-solr's branch refs/heads/branch_6_0 from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bd0803f ]\n\nLUCENE-7091: Added doc values support to memory index "
        },
        {
            "id": "comment-15194960",
            "author": "ASF subversion and git services",
            "date": "2016-03-15T09:02:19+0000",
            "content": "Commit 559432fcdcd828864a800072cf144e1f5c96647e in lucene-solr's branch refs/heads/branch_6x from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=559432f ]\n\nLUCENE-7091: Added doc values support to memory index "
        },
        {
            "id": "comment-15194961",
            "author": "ASF subversion and git services",
            "date": "2016-03-15T09:02:20+0000",
            "content": "Commit cf3eea26406692306505d2606d7ff73ee3634c30 in lucene-solr's branch refs/heads/master from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cf3eea2 ]\n\nLUCENE-7091: Added doc values support to memory index "
        },
        {
            "id": "comment-15194962",
            "author": "Martijn van Groningen",
            "date": "2016-03-15T09:03:05+0000",
            "content": "Pushed to master, branch_6x and branch_6_0 branches. "
        }
    ]
}