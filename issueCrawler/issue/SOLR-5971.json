{
    "id": "SOLR-5971",
    "title": "'Illegal character in query' when proxying request",
    "details": {
        "affect_versions": "4.7.1",
        "status": "Closed",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "My cluster contains 3 Solr instances. I have a collection consisting of one shard with 2 replica's. So one node in the cluster does not have a replicate of the shard.\n\nThe following query works when I query one of the two replica nodes:\n\nhttp://X.X.X.X:8080/solr/collection/select/?facet=true&facet.field=\n{!ex%3Dfilters,filter1340+key%3Dfacet1340Values}string_months_month&facet=true&q=:\n\nBut when I query the node without the replica, I get;\n\n{msg=Illegal character in query at index 78: http://X.X.X.X:8080/solr/collection/select/?facet=true&facet.field={!ex%3Dfilters,filter1340+key%3Dfacet1340Values}\nstring_months_month&facet=true&q=:,trace=java.lang.IllegalArgumentException\n\tat java.net.URI.create(URI.java:842)\n\tat org.apache.http.client.methods.HttpGet.<init>(HttpGet.java:69)\n\tat org.apache.solr.servlet.SolrDispatchFilter.remoteQuery(SolrDispatchFilter.java:527)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:340)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:217)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:368)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\n\tat org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n\tat java.lang.Thread.run(Thread.java:662)\n\nWithout the facet.field attribute, it works fine on all the nodes.\nIs this some kind of double escaping when proxying the request?",
    "attachments": {
        "SOLR-5971.patch": "https://issues.apache.org/jira/secure/attachment/12773504/SOLR-5971.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13963323",
            "date": "2014-04-08T19:17:46+0000",
            "content": "I think \"index 78\" may correspond to the right curly brace character for the localparams on your facet.field.  What happens if you replace { with %7B and } with %7D in your URL?  Right now, I consider this a troubleshooting step, not necessarily a workaround. "
        },
        {
            "author": "Eric Bus",
            "id": "comment-13963968",
            "date": "2014-04-09T09:28:12+0000",
            "content": "Unfortunately, that does not change the error. After encoding the braces, the same error is reported on the node without the replica. The results on the other nodes is the same. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14256887",
            "date": "2014-12-23T11:36:58+0000",
            "content": "Another user reports what looks to be the same bug:\nhttp://markmail.org/message/v4vkkd2tqwq4uier\n\n\nHi All,\n\nI am using SolrCloud 4.10.1 and I have 3 shards with replication factor of\n2 , i.e is 6 nodes altogether.\n\nWhen I query the server1 out of 6 nodes in the cluster with the below query\n, it works fine , but any other node in the cluster when queried with the\nsame query results in a *HTTP Status 500 - {msg=Illegal character in query\nat index 181:*\nerror.\n\nThe character at index 181 is the boost character ^. I have see a Jira\nSOLR-5971 <https://issues.apache.org/jira/browse/SOLR-5971> for a similar\nissue , how can I overcome this issue.\n\nThe query I use is below. Thanks in Advance!\n\nhttp://xxxxxx2.xxxxxxxx.com:8081/solr/dyCollection1_shard2_replica1/xxxxxxxx?q=xxxxx+xxxxx+xxxxxx&sort=score+desc&wt=json&indent=true&debugQuery=true&defType=edismax&qf=productName\n^1.5+productDescription&mm=1&pf=productName+productDescription&ps=1&pf2=productName+productDescription&pf3=productName+productDescription&stopwords=true&lowercaseOperators=true "
        },
        {
            "author": "Garth Grimm",
            "id": "comment-15014290",
            "date": "2015-11-19T20:22:40+0000",
            "content": "Another customer with the same issue (running 5.3).  When the query is initially directed to a node with a core from the collection things work correctly.  When directed to a node without a core from the collection, an error is throwing showing the URL parsing error from one of the nodes WITH the proper core.\n\nSo a query like this would work (node has the core on it):\nhttp://machine1:8983/solr/someCollection/select?q=id:something^2\n\nBut this query (node doesn't have the core on it):\nhttp://machine3:8983/solr/someCollection/select?q=id:something^2\n\nWill yield an error message like:\nIllegal character in query at index XX: http://machine1:8983/solr/someCollection/select?q=id:something^2\n\nSo it appears that the proxy code on machine3 is mangling the URL that is being passed to machine1?\n\nAlso, by URL-encoding the ^ character in the query, the issue can be avoided.  So this query would work fine against any node:\nhttp://machine3:8983/solr/someCollection/select?q=id:something%5E2\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-15014306",
            "date": "2015-11-19T20:41:25+0000",
            "content": "Looks like this slipped off everybody's radar.\nSince it seems serious, I'll mark it as a blocker for the next release. "
        },
        {
            "author": "Suraj Phanindar Reddy",
            "id": "comment-15015046",
            "date": "2015-11-20T02:19:58+0000",
            "content": "This is critical for proper functioning of Solr Cloud. Thank you Garth for updating this case. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15015261",
            "date": "2015-11-20T05:48:52+0000",
            "content": "I've been able to reproduce this locally (starting a two node cluster manually, not through a test yet). I'm working on a fix for this and shall post a patch for this, unless someone else beats me to it. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15017832",
            "date": "2015-11-20T13:01:33+0000",
            "content": "While performing a remote query at HttpSolrCall, the original query request string is passed along as is to the httpclient to make the forward query. The problem is (maybe a newly introduced one, due to some HttpClient regression?) that httpclient throws exception for urls that contain certain special characters like ^ or { or }.\n\nAdded a patch which recreates another query string by URL encoding every query parameter.\n\nThe reason why we missed this in our testing is that all our tests use the SolrQuery and a SolrClient to make the queries, and that uses url encoding internally. For testing this, I couldn't use an httpclient to query with such special characters in the url, since httpclient doesn't allow this in the first place. Resorted to using a java.net.URL.openStream() with the url containing weird characters to test this; added a new test suite altogether as I couldn't find out an appropriate test suite that exists right now.\n\nCan someone please review the patch? Thanks. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15017999",
            "date": "2015-11-20T13:08:41+0000",
            "content": "You must also pass the key name through the encoder! Its unlikely that Solr contains key names which violate the spec, but better safe than fail again in the future. forms encoding requires that both key and value is encoded. Also use the correct constants for UTF-8. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018005",
            "date": "2015-11-20T13:14:52+0000",
            "content": "Thanks Uwe for looking at it. Encoded the key as well to be safe.\nRunning the full suite of tests now (it passed for me last time, apart from the ones that fail frequently at Jenkins anyway). "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018015",
            "date": "2015-11-20T13:28:39+0000",
            "content": "Also use the correct constants for UTF-8.\nUpdated the patch to use StandardCharsets.UTF_8.name(). There are several other instances of the use of \"UTF-8\" constant. \n\nBtw, should we change all of those to StandardCharsets.UTF_8.name() in a separate JIRA issue? I've included one such change in this patch, i.e. ClientUtils. That method in the ClientUtils is very similar to what we're doing here in this patch. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018019",
            "date": "2015-11-20T13:31:18+0000",
            "content": "Shall we mark this as a blocker for 5.4 instead of 5.5? "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018052",
            "date": "2015-11-20T13:58:51+0000",
            "content": "All tests pass for me after applying this patch (some fail intermittently, and seem like unrelated and non-reproducible failures. All the usual culprits from Jenkins over past few days.). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15018152",
            "date": "2015-11-20T15:29:03+0000",
            "content": "One thing: Maybe we can use a HttpClient method to build the query string? How do we do that in SolrJ generally? "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018164",
            "date": "2015-11-20T15:37:37+0000",
            "content": "We use the ClientUtils.toQueryString().\n\n\n  public static String toQueryString( SolrParams params, boolean xml ) {\n    StringBuilder sb = new StringBuilder(128);\n    try {\n      String amp = xml ? \"&amp;\" : \"&\";\n      boolean first=true;\n      Iterator<String> names = params.getParameterNamesIterator();\n      while( names.hasNext() ) {\n        String key = names.next();\n        String[] valarr = params.getParams( key );\n        if( valarr == null ) {\n          sb.append( first?\"?\":amp );\n          sb.append(key);\n          first=false;\n        }\n        else {\n          for (String val : valarr) {\n            sb.append( first? \"?\":amp );\n            sb.append(key);\n            if( val != null ) {\n              sb.append('=');\n              sb.append( URLEncoder.encode( val, StandardCharsets.UTF_8.name() ) );\n            }\n            first=false;\n          }\n        }\n      }\n    }\n    catch (IOException e) {throw new RuntimeException(e);}  // can't happen\n    return sb.toString();\n  }\n\n\n\nDo you know how to use the HttpClient to build the query string? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15018173",
            "date": "2015-11-20T15:42:38+0000",
            "content": "OK. So your patch is fine. I am just confused why you put the utility method into RequestUtils, which is part of the json package. This seems \"wrong\" (the json package). Otherwise looks fine.\n\nI general I don't think this is a bug in SOLR, it is just \"wrong\" to accept the incoming URL anyways, so Jetty should have refused it already  But that is a different discussion! We just workaround on broken users violating the UR spec. So I am fine with that. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018192",
            "date": "2015-11-20T15:55:26+0000",
            "content": "I couldn't think of the right place to put this. \"RequestUtil\" sounded the least wrong place to put this in (but the json part seemed bad). I was also thinking of ClientUtils (which is in a solrj package), because there is a very functionally similar method there by the same name already. Maybe I should've kept it in HttpSolrCall itself.\nI'll raise a patch to put this in HttpSolrCall. Does it sound fine? "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018199",
            "date": "2015-11-20T15:58:43+0000",
            "content": "Here goes the patch with the method in HttpSolrCall itself. Uwe, if you can think of a better place to put it in than this, please feel free to move it during the commit. Thanks. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15018552",
            "date": "2015-11-20T19:06:03+0000",
            "content": "Hi this patch does not pass the forbiddenapis check, because it uses HttpServletRequest.getParameterMap() & co. Calling these methods is forbidden in any solr code because it breaks with wrongly-configured servlet containers and is slow on Jetty. SolrRequestDispatcher's parameter parsing correctly parsers parameters into a SolrRequest. Why can't we use the SolrRequest? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15018568",
            "date": "2015-11-20T19:11:29+0000",
            "content": "So it is better to use the already decoded parameters: this.queryParams and use those!\nYour code also has the problem that it cannot handle multiple identical keys (like multiple \"fq=\" parameters).\n\nI will post a new patch later so you can check it. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018608",
            "date": "2015-11-20T19:30:08+0000",
            "content": "Ouch, I didn't check the precommit! The multiple parameters with same key not being handled was really bad; apologies... "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018659",
            "date": "2015-11-20T19:53:46+0000",
            "content": "Such mistakes, although would've been caught by (and eventually was) precommit/forbidden apis, perhaps also shows the need for us to bolster the unit tests around request forwarding a bit more. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15018830",
            "date": "2015-11-20T21:21:25+0000",
            "content": "Updated patch. I added a new method to the SolrParams class: toQueryString()\n\nThis is most clean way. This allows to be used anywhere else, too (e.g. in SolrJ for building the query). This change is something for a new issue. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15018852",
            "date": "2015-11-20T21:32:15+0000",
            "content": "+1, LGTM. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15019040",
            "date": "2015-11-20T23:25:01+0000",
            "content": "New patch. I cleaned up lots of code duplication. Now SolrJ everywhere uses the SolrParams-provided method to encode query strings. So it is completely consistent.\n\nI also cleaned up the toString() used for logging query params (simplified URL encoding as documented).\n\nAll core + solrj tests pass, rest is running now. If nobody objects I will commit this to trunk and 5.x branch, so it gets included in 5.4. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15020914",
            "date": "2015-11-22T09:56:24+0000",
            "content": "Commit 1715615 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1715615 ]\n\nSOLR-5971: Fix error 'Illegal character in query' when proxying request "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15020924",
            "date": "2015-11-22T10:11:29+0000",
            "content": "Commit 1715616 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1715616 ]\n\nMerged revision(s) 1715615 from lucene/dev/trunk:\nSOLR-5971: Fix error 'Illegal character in query' when proxying request "
        }
    ]
}