{
    "id": "SOLR-969",
    "title": "Context#FULL_DUMP, DELTA_DUMP, FIND_DELTA as an enum",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Context # FULL_DUMP,  DELTA_DUMP, FIND_DELTA made type-safe as an enum.",
    "attachments": {
        "SOLR-969.patch": "https://issues.apache.org/jira/secure/attachment/12398251/SOLR-969.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karthik K",
            "id": "comment-12665185",
            "date": "2009-01-19T18:37:00+0000",
            "content": "New enum value called IMPORT_INVALID for corner cases.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12665326",
            "date": "2009-01-20T04:12:26+0000",
            "content": "It was not made an enum because I wamted them to be used in non-java languages (like javascript) "
        },
        {
            "author": "Karthik K",
            "id": "comment-12665466",
            "date": "2009-01-20T16:48:21+0000",
            "content": "Are there any unit test cases for the scenario that you are mentioning about. Also Context has EntityProcessor / DataSource / VariableResolver as return types .What would be the right way to serialize the Java objects to the JavaSCript realm .  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12665699",
            "date": "2009-01-21T04:33:01+0000",
            "content": "All the Objects can be consumed directly from JS , just the way we use it in java .\nexample\n\n<dataConfig>\n        <script><![CDATA[\n                function f1(row, context)        {\n                    var cmd =  context.getVariableResolver().replaceTokens('${dataimporter.request.command}');\n                    if(cmd == 'full-import')\n                        row.put('message', 'The command is full-import');\n                    return row;\n                }\n        ]]></script>\n        <document>\n                <entity name=\"e\" pk=\"id\" transformer=\"script:f1\" query=\"select * from X\">\n                ....\n                </entity>\n        </document>\n</dataConfig>\n\n\n\nCurrently only a Transformer can be written in JS and that is the most common extension point. \n\nIt is hard to write a DataSource/EntityProcessor in JS . I'm interested in having an Entityprocessor written in non-java. but there has not been much interest in it.\n\n an Eventlistener can be easily written in JS (but not yet implemented)\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12665876",
            "date": "2009-01-21T16:36:18+0000",
            "content": "\n\n\n It was not made an enum because I wamted them to be used in non-java languages (like javascript)\n\n\n\n\n\nGoing back to the original issue - I am sure there would be some way to map the enum objects in java to javascript when it comes to porting the same. Until then ignoring type-safety seems to be ripe for errors ( A good number of test cases seem to pass a 0, as of today in place of ImportProcess in the ContextImpl ctor. when 0 makes no sense at all and another piece of code uses a -1 to check if it is an invalid process i.e. other than full import, delta import, find delta etc. ).   "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12666059",
            "date": "2009-01-22T05:46:54+0000",
            "content": "I wished it had been String . But, it was already exposed in the API so I did not want to break it. (It may not be so widely used)\n\nStrings are portable across languages. \n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12666203",
            "date": "2009-01-22T16:36:00+0000",
            "content": "I agree String-s are portable. But choosing an enum would still be orthogonal to Strings thanks to the Enum.valueOf(String) method - We can still regenerate the enum from the String representation (in case of non-Java languages). \n\nIn any case - Context seems to be restricted to DIH and seems to be available since 1.3  only . So making the change now might be more intuitive to the developer instead of misusing with integers not meant to be passed as an argument in the first place.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12683776",
            "date": "2009-03-20T07:13:17+0000",
            "content": "I see no advantage in maintaining an enum as well as a string. I agree that an integer is not intuitive and should be replaced by a string. It might be OK to break compatibility. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12683781",
            "date": "2009-03-20T07:32:02+0000",
            "content": "Patch to change integer to strings. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12699567",
            "date": "2009-04-16T07:44:37+0000",
            "content": "Patch in sync with trunk.\n\nI'll commit this shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12699574",
            "date": "2009-04-16T08:02:23+0000",
            "content": "Committed revision 765499.\n\nI changed the javadocs of Context.currentProcess to reflect the changes. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775462",
            "date": "2009-11-10T15:50:34+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}