{
    "id": "SOLR-3026",
    "title": "eDismax: Locking down which fields can be explicitly queried (user fields aka uf)",
    "details": {
        "affect_versions": "3.1,                                            3.2,                                            3.3,                                            3.4,                                            3.5",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We need a way to specify exactly what fields should be available to the end user as fielded search.\n\nIn the original SOLR-1553, there's a patch implementing \"user fields\", but it was never committed even if that issue was closed.",
    "attachments": {
        "SOLR-3026-3x.patch": "https://issues.apache.org/jira/secure/attachment/12518017/SOLR-3026-3x.patch",
        "SOLR-3026.patch": "https://issues.apache.org/jira/secure/attachment/12510659/SOLR-3026.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13186656",
            "date": "2012-01-16T02:23:45+0000",
            "content": "I've worked with HossMan patch from SOLR-1553 and made it work with trunk. It's still a bit hacky I think, as I don't fully understand all the parsing stuff in there, but it works  Here's how to use it:\n\n\nq=id:123               => HIT, default for empty \"uf\" is allowing all fields, as today\nq=id:123&uf=*          => HIT, explicitly allowing all fields\nq=id:123&uf=id         => HIT, explicitly allowing only field \"id\"\nq=id:123&uf=id^2       => HIT, using the boost from uf\nq=id:123&uf=*^3 -name  => HIT, allowing all fields except \"name\", using boost from \"*\"\nq=id:123&uf=-*         => NO HIT, disallowing all fields\nq=id:123&uf=* -id      => NO HIT, allowing all fields except \"id\"\n\n\n\nWhat happens when you query disallowed fields is that the \":\" gets escaped so that the whole clause is searched as a literal.\n\nIt feels a bit dirty to modify the \"clause.raw\" string in order to escape colon, and to add \"^\" boost etc. Don't know if this has other side effects. But it's a start. Please test it and comment on better ways of doing things. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13186662",
            "date": "2012-01-16T02:33:38+0000",
            "content": "One think I constantly get wrong whenever I try to query more than one field w/ dismax is the space separated lists... I naturally use commas.\nIf it's not already there, should we allow comma separated lists for fieldnames as we do in other places? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13186808",
            "date": "2012-01-16T09:31:31+0000",
            "content": "@yonik: It's a one-byte change to the split regex and it would work for qf,pf,uf... I'm not against it, but since it's not directly related to this issue, I propose a new JIRA for that change. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13187577",
            "date": "2012-01-17T10:28:20+0000",
            "content": "@Hoss, this is based on your work, is it inline with what you envisioned back then? I chose to let the default match the current default, so you explicitly have to specify uf to lock things down.\n\nOne feature I'd also like is field name aliasing, and I think it might fit well as an extension of uf. Imagine our schema has a field \"searchable_title_t\" which we want our Norwegian users to be able to query as \"tittel\". We could then specify a mapping, say\n\n\n&uf=tittel:searchable_title_t\n\n \n\nCould the \"aliasing\" feature of dismax be used for this or should we code it from scratch? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13190304",
            "date": "2012-01-21T03:43:49+0000",
            "content": "It's been so long, i don't really remember what i envisioned.\n\nI haven't had a chance to review the patches, but your description of the usecases looks great \u2013 my personal preference would be for an empty uf to default to not allowing any explicit fields, but i know i'm in the minority on that opinion, and your \"-*\" exclusion syntax makes it so easy to do i have absolutely no complaints.\n\nas for field name aliasing / virtual fields (ie: SOLR-3045) ... as i remember it, the underling \"Alias\" feature of the DisjunctionMaxQueryParser (i think that's what it's called) should work well for that \u2013 assuming the edismax usage of that underlying QueryParser doesn't circumvent it too much.\n\nAs far as user syntax goes, i would suggest that the \"per-field override\" param syntax on the \"qf\" param would probably make the most sense here instead of using colons (and wouldn't require the special comma syntax you suggest in SOLR-3045 to specify multiple fields, which would prevent the general change yonik seems to want)\n\nie...\n\n\n   q=elephant title:dumbo who:george\n  &qf=title^3 firstname lastname^2 description^2 catchall\n  &uf=title^5 who^2 *\n  &f.who.qf=firstname lastname^10\n\n\n\n...would cause \"elephant\" to be searched in all the \"qf\" fields with the specified boosts; \"dumbo\" to be searched only against the title field (with a boost of 5 since the user asked for that field explicitly); and \"george\" will get a DisjunctionMaxQuery with a boost of 2, containing two clauses: firstname (default boost of 1) and lastname (boost of 10).\n\nBasically: when parsing the \"uf\" look for a \"f.${uf}.qf\" param, and if it exists parse it and add the appropriate Alias. (fingers crossed it will be that easy: if it isn't, it's probably a feature!) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13190369",
            "date": "2012-01-21T11:13:58+0000",
            "content": "I like the f.who.qf style. And the fact that you then can boost the whole DMQ clause as a whole.. I'll add that to SOLR-3045 as a suggestion.\n\nBut it's a bit overkill to spin a DMQ for simple single-field-aliasing, i.e. my example &uf=title:searchable_title_t.\nIdeally such a simple field name aliasing should be supported on the Lucene parser level.\nAlternatively it could be another per-field param\n\n&f.title.fmap=searchable_title_t\n\n\n\nI'm still not sure how to use the built-in aliasing to implement this "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13191284",
            "date": "2012-01-23T17:40:03+0000",
            "content": "New patch implementing the field specific override \"f.who.qf=\" syntax for aliasing.\n\nIt adds the aliases to the top level Edismax queryparser, so you can do stuff like\n\n\n&q=who:george&f.who.qf=firstname^2 middlename lastname^3\n&q=title:(breaking news)&f.title.qf=indexed_title_t\n\n\n\nWhat does NOT yet work is aliasing the fields referenced in qf param, so that you could use &qf=who where what. Have not found the correct hook for that. Anyone? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13192238",
            "date": "2012-01-24T16:09:37+0000",
            "content": "I think this is a good enough first step for user fields and aliasing feature. Then if we want to take it further such as recursive aliasing from inside qf params, we'll open new issues.\n\nNot sure I got full test coverage for all combinations of fields, default boosts etc. \n\nAnyone wants to review it? There's bound to be some bugs with such string manipulations... "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13192250",
            "date": "2012-01-24T16:20:27+0000",
            "content": "One more thing we should probably fix. For schemas relying heavily on <dynamicField>s, it could be handy to allow/deny wildcard field names. Imagine:\n\n <dynamicField name=\"*name\" type=\"string\" />\n <dynamicField name=\"secret*\" type=\"string\" />\n\nWith today's patch you'd have to explicitly allow and disallow full field names:\n &uf=firstname middlename lastname companyname -secrettext -secretsalary -secretfoo ....\n\nBetter would be:\n &uf=*name -secret*\n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13192731",
            "date": "2012-01-25T00:50:29+0000",
            "content": "New patch adding \"dynamic field\" wildcard support to \"uf\". New test cases for these, and tests for verifying correct boosts applied from user fields. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13192998",
            "date": "2012-01-25T12:23:05+0000",
            "content": "Refactored the UserFields functionality into a separate inner class, for better readability and object orientation  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13195107",
            "date": "2012-01-27T21:19:02+0000",
            "content": "Jan, I have a patch that fixes an issue with this implementation and adds some more test cases. It also addresses SOLR-3045, should I add it here or should I try to separate both patches? What I did for SOLR-3045 strongly depends in your code for this issue.\nThe issue is for a case like:\nmyalias:(Zapp Obnoxious)\nThis query is parsed as \nmyalias:Zapp default_field:Obnoxious\ninstead of\nmyalias:Zapp myalias:Obnoxious\n\nthe specific tests I added are:\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"), oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13195257",
            "date": "2012-01-28T00:10:05+0000",
            "content": "Hi Tom\u00e1s. Thanks for the involvement!\n\nI have a feeling that we'll close SOLR-3045 and do everything in this issue.\n\nPlease upload your improvements here, with same patch name, and we'll continue from there. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13196097",
            "date": "2012-01-30T13:00:04+0000",
            "content": "Still TBD: how to deal with infinite loop of aliasing. Right now this leads to stack overflow error. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13196516",
            "date": "2012-01-30T23:01:49+0000",
            "content": "Hi, could you re-upload your patch without unrelated changes? Your patch includes severalwhite space/indenting/reformatting changes which is unrelated. This makes it hard to read the patch and see what's new.\n\nSee http://wiki.apache.org/solr/HowToContribute#Creating_the_patch_file under \"Please do not\".\n\nHow do you trigger an infinite loop? "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13197011",
            "date": "2012-01-31T16:47:25+0000",
            "content": "Sorry about that. This is the patch with the indentation changes. \nI also removed some lines that are now useless with the changes introduced to the parser. \n\nWith infinite loops I mean cyclic aliasing. Something like:\n...&qf=who&f.who.qf=name&f.name.qf=who\n\nThis is probably due to an error and the solution is probably throw an exception, but right now this is not considered and will lead to a stack overflow error. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13198187",
            "date": "2012-02-01T21:52:41+0000",
            "content": "Added cyclic aliasing validation "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13199240",
            "date": "2012-02-02T21:27:57+0000",
            "content": "Super duper. I tested it and it works great! Strange, I could not get aliasing for qf fields to work before now. Now it works like a charm.\n\nA possible optimization would be to detect if the f.who.qf= contains just a single field, and create a simple TermQuery instead of a DisMaxQuery in that case. But it might not be important for performance..\n\nAnother thing to re-consider is whether the default should be uf=* or uf=-*. If we aim to let edismax replace dismax, people may want it to behave like dismax out of the box. But if it won't replace dismax it's better to stick with the current defaults which people already are used to. Note that since eDismax is still @lucene.experimental we should not be afraid to change defaults. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13199636",
            "date": "2012-02-03T10:51:44+0000",
            "content": "I think the default should be uf=*, otherwise it will be confusing. I think \"field\" search together with \"dismax\" search will be one of the main reasons why people will move from other QP to edismax, and with uf=-* they will not get that behavior until they explicitly change it. I bet that if we use uf=-* we'll get many questions related to this in the mailing list.\n\nAbout the optimization, I think its a good idea, however it should be a different Jira. The optimization could be applied to f.who.qf as well as to qf= right? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13200067",
            "date": "2012-02-03T21:33:28+0000",
            "content": "If we aim to let edismax replace dismax, people may want it to behave like dismax out of the box\n\nI don't think that should be the goal.  plenty of people are using \"edismax\" already because they like the fact that it is a super set of the dismax & lucene features, and the defaults for \"edismax\" should embrace that.  \n\nif/when EDisMaxQParser reaches the point that it can be configured to work exactly the same as DisMaxQParser, then it may be worth considering defaulting \"dismax\" => an EDisMaxQParser instance configured that way, but that doesn't mean \"edismax\" shouldn't expose all of it's bells and whistles by default.\n\nuf=* as a default should be fine \u2013 the only reason to question it would be if it was hard to disable, but the \"-*\" syntax is so easy it's not worth worrying about it. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13207137",
            "date": "2012-02-13T19:50:49+0000",
            "content": "Is there anything else to do in order to get this committed? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13226804",
            "date": "2012-03-10T09:32:41+0000",
            "content": "Just some minor polishings. Will commit this to trunk now. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13226806",
            "date": "2012-03-10T09:43:30+0000",
            "content": "Committed to trunk. Starting to backport "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13227466",
            "date": "2012-03-12T12:46:17+0000",
            "content": "Attaching patch for branch_3x. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13227496",
            "date": "2012-03-12T13:15:13+0000",
            "content": "Committed in branch_3x "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13227541",
            "date": "2012-03-12T14:00:50+0000",
            "content": "Created documentation page for eDisMax: http://wiki.apache.org/solr/ExtendedDisMax "
        }
    ]
}