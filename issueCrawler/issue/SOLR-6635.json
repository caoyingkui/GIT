{
    "id": "SOLR-6635",
    "title": "Cursormark should support skipping/goto functionality",
    "details": {
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Deep pagination is possible with the cursormark.\nWe have discovered a need to be able to 'skip' a number of results.\nUsing the cursormark it should be possible to define a request with a skip parameter, allowing the cursormark to simple skip a number of articles, kinda like a goto, and then return results from that point in the resultset.",
    "attachments": {
        "SOLR-6635.patch": "https://issues.apache.org/jira/secure/attachment/12694436/SOLR-6635.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-20T17:46:46+0000",
            "author": "Hoss Man",
            "content": "this should be fairly straight forward, all of the Plubming is there in the Searcher methods to take in both a start offset & sortField array (what gets serialized by the cursork mark) currently the solr code just prevents you from doing this because the semantics of what it should mean and how it should work weren't well defined from a user perspective (and of course: not test to prove those semantics were correct)\n\nwhat would probably make the most sense would be:\n\n1) start & cursorMark can be combined and if both are specified are propogated down to the appropriate methods.\n2) when start > 0 & cursorMark=*, it is functionally equivilent to no cursorMark being specified at all (ie: regular pagination) except that the use of the cursorMark param indicates to Solr that the client wnats the nextCursorMark to be computed.\n\nthis should make the most obvious usecase fairly trivial:\n\n1) user does normal search with start=0&rows=X\n2) user goes to page#2 using start=X&rows=X\n3) user keeps iterating for a few pages increasing start each time\n4) at some threshold (start=N), client decides that if user wants to keep going, they are goin to  stop using regular pagination and switch to cursor, so they specify start=N&rows=X&cursorMark=*\n5) this gets them the same logical \"next\" page of results, based on a cursor starting at the begining of the result set, and the \"start\" offset - the nextCursorMark returned is also correct for the end of the current page.\n6) from this point on, the client switches to sending start=0, and only modifying the cursorMark on each request.\n\nit also supports the less likely, but still somewhat interesting usecase of using cursorts to iterate, but then wanting to \"peek\" ahead of the current cursor by incrementing start (and ignorning the nextCursorMark returned)\n\n\u2014\n\nthe real devil in the details of this change will be in ensuring that the existing logic for knowing when it's neccessary to avoid the queryResultCache because of the start vs cursorMark usage is still correct once both are allowed. ",
            "id": "comment-14284098"
        },
        {
            "date": "2015-01-21T10:06:45+0000",
            "author": "TLogik",
            "content": "I might be misunderstanding Hoss Mans proposed solution, in the case of a client providing an existing cursormark and then skipping results.\nI can agree on all of Hoss Mans usecases but for clarity i add one more.\n\n7) User has a cursormark and wishes to skip a number (N) of articles: start=0&rows=X&cursormark=abc123&cursormarkskip=N\nThis could also be achieved using start as the defining factor for skipping. ex: start=N&rows=X&cursormark=abc123\nbut then start becomes a multipurpose property, and i cannot decide if that is acceptable. Using cursormarkskip it would be an explicit command with an expected behaviour. ",
            "id": "comment-14285444"
        },
        {
            "date": "2015-01-25T18:17:25+0000",
            "author": "Vitaliy Zhovtyuk",
            "content": "As i understood skip case its about using skip to calculate next cursor mark, so this is pure cursor functionality. org.apache.solr.CursorPagingTest#testSkip illustrate the idea. This will require changes in TopDocs length calculation taking into account skip value for next cursor mark calculation. Also this code need to be refactored to remove duplicates. \nAnother approach could be serialization for skip parameter  and with sort values in Cursor and use skip value in offset for next call. ",
            "id": "comment-14291210"
        },
        {
            "date": "2016-12-16T18:07:42+0000",
            "author": "Michael Gibney",
            "content": "It's possible that a more general approach to cursorMark could answer this and many other use cases. A couple of observations here, the first two probably obvious:\n1. The cursorMark param defines a relative (contextual, as opposed to absolute-offset) insertion point into a sorted list of documents\n2. The start param defines an offset of returned results relative to the list index/insertion point defined by the cursorMark param\n3. When used in conjunction with cursorMark, in principle there's no reason why the start param must be non-negative. \n\nThe current implementation of cursorMark/nextCursorMark is stateless on the server-side, but as far as I can tell it only directly supports serial, forward-only paging. In order for the current implementation to support backward paging in a client application, state must be maintained in the client application (e.g., a stack of cursorMarks by way of which the most recent request was navigated to). \n\nIf the current cursorMark implementation were tweaked to allow start/offset param to be negative, and to generate and return a totem for the last and first (and possibly for each) document in a result window, this would introduce the possibility of bidirectional paging that is entirely stateless (client-side as well as server-side). It would also enable re-alignment of results, returning target totems in context, and overlapping over-requesting to allow a client application to \"preview\" whether it has reached the end (or beginning, for backward paging) of paged results. With some further tweaking, this approach could be extended to support arbitrary (\"skip to the 'R's\") or universal (\"skip to the 'last' page of results\") totems. \n\nAs a point of reference, I've been involved in implementing a related approach (leveraging the facet component) that supports goto/paging through arbitrary windows of index-sorted terms (using slightly different parameter syntax: target, offset, limit, and an extra response field specifying the actual target_offset).\n\nAs Hoss Man says, \"when start > 0 & cursorMark=*, it is functionally equivilent to no cursorMark being specified at all (ie: regular pagination) except that the use of the cursorMark param indicates to Solr that the client wnats the nextCursorMark to be computed.\" cursorMark is great, and I'd love to use it; I definitely think the introduction of this skipping/goto/offset functionality (esp. with direct support for fully stateless bidirectional paging) would facilitate the backward-compatible migration of client applications to cursorMark-based implementations. ",
            "id": "comment-15755112"
        }
    ]
}