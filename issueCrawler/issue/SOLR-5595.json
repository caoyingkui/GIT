{
    "id": "SOLR-5595",
    "title": "Distributed Sort: potential performance improvements & code readabiliity",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A lot of the work solr currently does for dealing with distributed sorting was built based on older limitations in Lucene that no longer exist.  There are opportunities to simplify the code significantly, which should result in a speed up \u2013 the biggest blocker at this point is some caching related questions.\n\nI'll post my specific thoughts in a comment\n\n(This is inspired by some things I noticed working on SOLR-5463 - I didn't want to convolute that issue with these performance improvement ideas which could be dealt with separately)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13859610",
            "date": "2013-12-31T18:39:38+0000",
            "content": "Based on my understanding of the code, there are 3 major (overlapping) changes that could be made to help improve/clarify solr's distributed sorting code:\n\n\n\n1) leveraging \"fillFields\"\n\nThe basic premise behind all of the work done in QueryComponent's \"doFieldSortValues\" method is summarized in this comment at the top of the method...\n\n\n// The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n// currently have an option to return sort field values.  Because of this, we\n// take the documents given and re-derive the sort values.\n\n\n\nWhile the query cache issue is certainly still true, improvements at the IndexSearcher level now make it possible to request that the TopDocCollector also record the sort values for each doc it collects \u2013 these are available in the FieldDoc objects returned.\n\nSOLR-5463 is already taking avantage of this feature for cursor based searching \u2013 but that also bypasses the cache (for a variety of reasons).  if we enhance the query reesult cache to also preserve the sort values for each doc in the DocList, then the same \"fillFields\" feature could be used to pull back all of the sort values.\n\nThis would pretty much completely eliminate the need for 90% of the work currently done in doFieldSortValues \u2013 and should be much faster since we'll be re-using the sort values already generated during the actual sorting, we won't need to hit the index again to re-derive them.\n\n\n\n2) Let \"fillFields\" provide the score if needed for sorting\n\nAssuming we start using IndexSearcher's \"fillField\" option, then we could probably simplify some of the logic in QueryComponent regarding sorting by score.  doFieldSortValues currently can't generate the score, so the coordinator has to ask for it explicitly in the fl so it can be used with merging.  These special edge cases could probably be removed, and the scores would come back along with the other sort values.\n\n\n\n3) eliminate ShardDoc.sortFieldValues and use FieldDoc.fields\n\nWhen a node is coordinating a distributed request, QueryComponent.mergeIds collects the docs returned by each shard into \"ShardDoc\" objects which have a sortFieldValues property containing the full list of all sort values (of all docs returned by that shard) tacked on to it in a convoluted nested structure that makes very little sense when looking at the code.  But ShardDoc already extends FieldDoc which has a \"fields\" array designed to store the sort fields.  If mergeIds just populated the \"fields\" of each ShardDoc based on the sort_values returned from the shard, then the mergeIds method could be a lot simplier and the code would be a lot clearer to read.  It should also be possible to eliminate most/all of ShardFieldSortedHitQueue and instead leverage the logic in FieldValueHitQueue directly. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13859611",
            "date": "2013-12-31T18:40:23+0000",
            "content": "\nThe initial change that would be needed to explore any of these ideas is addressing the issue of the query result cache.  It seems like adding a FieldDoc[] onto the DocSlice should be fairly straight forward, even when dealing with the subset and cache window stuff \u2013 but for non trivial sorts it would likely result in a significant change to the memory foot print, which could be very annoying if you aren't using distributed sorting.\n\nmy off the cuff suggestion would be:\n\n\n\tchange the code to include the FieldDoc (sort values) in the (cached) DocSlices\n\tadd an explicit option to disable caching of the sort values (for single node users)\n\tmake distributed searching fail hard if that explicit option is set\n\t\n\t\tfail hard on SolrCore init in cloud mode\n\t\tfail hard at request time if it's an older style \"shards=...\" distributed request.\n\t\n\t\n\n "
        }
    ]
}