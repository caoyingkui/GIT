{
    "id": "SOLR-1101",
    "title": "expose extra statistics like slow queries",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "Admin UI"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Solr Objects may want to expose extra information for diagnostics etc. These information can be large and we may not wish to show it in the stats page which can make it unwieldly. I propose an extension of the stats itself which can be shown separately. \n\nI wish to implement slow queries as a part of this.  There is a new interface which can be implemented by components\n\n\npublic interface StatsDetails {\n\npublic interface StatsDetails {\n\n  /**The details info is a Map of details name versus description. The details name must\n   * return the details when the getDetails() method is invoked on the same object.\n   * @return a map of details name vs the description. the description may be used in a link text\n   */\n  public Map<String ,String> getDetailsInfo();\n\n  /**The details key should be known for this Object . \n   * This key will may be obj=tained by invoking getDetailsInfo() \n   * \n   * @param detailsCommand\n   * @return\n   */\n  public NamedList getDetails(String detailsCommand);\n\n\n}\n\n\n\nThe stats.jsp can be enhanced to show these extra links .",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12696851",
            "date": "2009-04-08T00:45:01+0000",
            "content": "Noble: I presume by \"There is a new interface which can be implemented by components\" you're suggesting that this StatsDetails could be a marker interface implemented by things that already implement SolrInfoMBean, and if stats.jsp noticed something implementing this interface, then it would call getDetailsInfo() and for each name returned include a link to a future call of something like \"stats.jsp?obj=foo&detail=name\" which would call getDetails(name)\n\nis that what you had in mind?\n\nAnother thing to consider is that stats has always displayed the toString() of the values in the getStatistics() NamedList ... perhaps a marker interface could be added to those objects, indicating when the toString behavior should be overridden and replaced with the ability to drill down...\n\n\npublic interface DetailedStats {\n   public String getSummary();\n   public NamedList getDetails();\n}\npublic class DetailedStatsNamedList extends NamedList implements DetailedStats {\n   public DetailedStatsNamedList(String summary) { this.summary = summary; }\n   public NamedList getDetails() return this;\n   // ... hashCode & equals & toString\n}\n...\n// stats.jsp would print getSummary() as a link to unwrapping getDetails()\n...\n\n\n\nThis would have the advantage of allowing deeper and deeper levels of details to be exposed if the stats.jsp code was written generally enough. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12696875",
            "date": "2009-04-08T04:08:20+0000",
            "content": "is that what you had in mind?\n\nYes. The understanding is correct.  Just that the detailed stats may be rendered by a separate jsp say extrastats.jsp?obj=foo&detail=name\n\nThe XSL based rendering is a problem for the current stats.jsp . XSL is too cumbersome for any advanced UI\n\nThe default stats.jsp can provide links with this information so that users can navigate from there and the current stats.jsp can be a entry point for further drill down. But it should also be possible to hit the extrastats.jsp directly which can just provide the links to all the objects with extra statistics\n\nAnother thing to consider is that stats has always displayed the toString() of the values in the getStatistics() NamedList \n\nThe concern here is that, the extra stats will be like mini apps which will give options to view and mine  tons of data, \neg:\n\n\tcontents of my queryResultCache\n\t\n\t\thits for some items etc\n\t\n\t\n\tall the queries which took more than 100 ms\n\t\n\t\tor the ones where this 'fq' is appplied\n*etc etc\n\t\n\t\n\n\n\nThese things would need features like faceted drill down, pagination etc. A simple string may not be quite sufficient\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12696897",
            "date": "2009-04-08T05:53:51+0000",
            "content": "A simple string may not be quite sufficient\n\nsure ... no disagreement.\n\nmy point is that instead of a marker interface that the components implement (which would only allow one level of drill down) the marker interface could be on new objects put into the NamedList returned by the existing getStatistics() method \u2013 when that interface is detected, show getLabel(), otherwise show toString().\n\nthe extended display (extrastats.jsp if you want, or some new option on stats.jsp) would be able to getDetails() on the object ... and any of those details might themselves implement StatsDetails to allow further drilldown.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12696904",
            "date": "2009-04-08T06:20:35+0000",
            "content": "Hi Hoss ,\nyou are right. It has no means to drill down further\n\nHow about this. \n\npublic interface StatsDetails {\n\n  /**The details info is a Map of details name versus description. The details name must\n   * return the details when the getDetails() method is invoked on the same object.\n   * @return a map of details name vs the description. the description may be used in a link text\n   */\n  public Map<String ,String> getDetailsInfo();\n\n  /**The details key should be known for this Object . \n   * This key can be obtained by invoking getDetailsInfo() \n   * \n   * @param detailsCommand\n   * @param params Any extra parameters which the command may understand. can be null also. \n   * @return\n   */\n  public NamedList getDetails(String detailsCommand, SolrParams params);\n\n}\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872647",
            "date": "2010-05-27T22:09:53+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043641",
            "date": "2011-06-03T16:46:16+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106240",
            "date": "2011-09-16T14:50:12+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234689",
            "date": "2012-03-21T18:08:53+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717171",
            "date": "2013-07-23T18:47:21+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971041",
            "date": "2014-04-16T12:56:58+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}