{
    "id": "LUCENE-2265",
    "title": "improve automaton performance by running on byte[]",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently, when enumerating terms, automaton must convert entire terms from flex's native utf-8 byte[] to char[] first, then step each char thru the state machine.\n\nwe can make this more efficient, by allowing the state machine to run on byte[], so it can return true/false faster.",
    "attachments": {
        "LUCENE-2265_pare.patch": "https://issues.apache.org/jira/secure/attachment/12440744/LUCENE-2265_pare.patch",
        "LUCENE-2265.patch": "https://issues.apache.org/jira/secure/attachment/12435822/LUCENE-2265.patch",
        "LUCENE-2265_utf32.patch": "https://issues.apache.org/jira/secure/attachment/12440795/LUCENE-2265_utf32.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-02-14T14:49:51+0000",
            "content": "attached is a patch. at most it only improves performance around 10% for Latin-1 text.\nI haven't benchmarked non-Latin test yet.\n\nEven if its better, I am not sure we want to do this (is the performance worth the complexity?), but all the tests pass. ",
            "author": "Robert Muir",
            "id": "comment-12833574"
        },
        {
            "date": "2010-02-14T15:31:45+0000",
            "content": "I tested this with Hindi text as well, it gives no benefit there. So it only helps english, will leave the patch out here in case someone has a better idea  ",
            "author": "Robert Muir",
            "id": "comment-12833580"
        },
        {
            "date": "2010-04-02T18:05:30+0000",
            "content": "I discussed this situation with Mike McCandless and I think we might have something of a plan.\n\nFor reference, here is the problem: \n\n\tIn flex the terms are byte[] (typically UTF-8)\n\tAutomaton transitions work on UTF-16 intervals (char)\n\tRunAutomaton is an array-compiled form that also works on UTF-16 (char[])\n\tBecause of this, we have a lot of unicode conversion overhead between byte[] and char[] hurting performance.\n\n\n\nHere is the current idea:\n\n\tSwitch Automaton to work on UTF-32 intervals (int)\n\tCreate a method to convert a UTF-32 Automaton to an equivalent UTF-8 Automaton.\n\tCreate a UTF-8 RunAutomaton that works on byte[]\n\tWe could also create a UTF-32 RunAutomaton that works on codepoints, for use in analysis, etc.\n\n\n\nThis would have some nice benefits besides performance, \nfor example a wildcard operator of \"?\" or regex operator of \".\" would match a real unicode codepoint, \nnot a single code unit like it always has. So if somehow we can make this work, we would have better\nperformance and better unicode support.\n\nThe trick is to do this UTF-32 DFA -> UTF-8 DFA conversion efficiently, especially keeping determinism,\nand not causing some nasty explosion ",
            "author": "Robert Muir",
            "id": "comment-12852896"
        },
        {
            "date": "2010-04-02T23:25:49+0000",
            "content": "I probably missed something.\n\nWhy can't you create UTF-8 Automaton from the get go? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12852998"
        },
        {
            "date": "2010-04-02T23:30:37+0000",
            "content": "Why can't you create UTF-8 Automaton from the get go?\n\nBecause high-level, users want automaton transitions to represent real characters \n(eg regular expressions, wildcards, etc) and do not much care about bytes!\n\nSo the utf-16 Automaton/RunAutomaton pair makes sense for the library...\n\nBut utf-32 is still easy to work with high-level (we just represent codepoint intervals instead of codeunit),\nand utf-8 is faster for working with lucene. ",
            "author": "Robert Muir",
            "id": "comment-12853002"
        },
        {
            "date": "2010-04-02T23:40:48+0000",
            "content": "So? You aren't making some generic automaton library, are you?\nGet these user regexes/wildcards/etc, convert them to utf-8, build utf-8 automaton, run it against lucene data. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12853005"
        },
        {
            "date": "2010-04-02T23:44:14+0000",
            "content": "I mean, high-level, users don't care about your automaton at all, much less transitions. They want their regexes and wildcards to work. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12853006"
        },
        {
            "date": "2010-04-02T23:45:34+0000",
            "content": "\nSo? You aren't making some generic automaton library, are you?\nGet these user regexes/wildcards/etc, convert them to utf-8, build utf-8 automaton, run it against lucene data. \n\nThis just pushes the complexity into the parsers. and yes, it makes sense to support high-level (char[]) operations\nwith automaton too, such as analysis.\n\nI encourage you to take a look at the existing code. In general a lot of parsers (see wildcard and regex) are implemented \nwith primitive automata like 'makeAnyChar'. 'makeAnyByte' makes no sense.\n\nSo its generic in the sense that fuzzy, regex, wildcard, all of our users are defined on unicode characters. high\nlevel operations such as parsing, intersection, and union belong in utf16 or utf32 space, not with bytes.\n\nbytes is an implementation detail, and we shouldnt operate on UTF-8 except behind the scenes. ",
            "author": "Robert Muir",
            "id": "comment-12853007"
        },
        {
            "date": "2010-04-02T23:47:20+0000",
            "content": "I mean, high-level, users don't care about your automaton at all, much less transitions. They want their regexes and wildcards to work.\n\nbut you have it backwards. users want their regexes and wildcards to work. they want wildcard \"?\" or regex \".\" to match unicode\ncharacters, not bytes. no one cares about bytes. ",
            "author": "Robert Muir",
            "id": "comment-12853008"
        },
        {
            "date": "2010-04-02T23:52:41+0000",
            "content": "Hmmmmm.\n\nI'd say that your highlevel operations like intersection and union remain exactly the same regardless of the alphabet you're operating on.\nThe primitive automata, like AnyChar will have to cease being so primitive and generate a pair of states instead of one, but that's essentially it - after primitive automatas are fixed to recognize utf-8 bytes, you don't even have to change parsing code that much.\n\nThe only true problem I see is that you lose the ability to operate on char[]. But then, I ask that again, do you write a generic library, or you borrowed automata code from one with a single aim of having fast lucene queries? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12853010"
        },
        {
            "date": "2010-04-03T00:01:42+0000",
            "content": "\nHmmmmm.\n\nI'd say that your highlevel operations like intersection and union remain exactly the same regardless of the alphabet you're operating on.\nThe primitive automata, like AnyChar will have to cease being so primitive and generate a pair of states instead of one, but that's essentially it - after primitive automatas are fixed to recognize utf-8 bytes, you don't even have to change parsing code that much.\n\nThe only true problem I see is that you lose the ability to operate on char[]. But then, I ask that again, do you write a generic library, or you borrowed automata code from one with a single aim of having fast lucene queries?\n\nWell this is a borrowed library, but that doesnt really matter. The trick is that UTF-16 and UTF-32 are much more efficient for the kind of processing the high-level component needs: doing things like NFA->DFA conversion and minimization. Its much better to do some of these quadratic algorithms on high-level unicode instead of byte, and get a minimal DFA. At the same time the intervals represent real things, so its debuggable, etc.\n\nSo to me it makes perfect sense to change the transition's min/max from 'char' to 'int', which is trivial and won't require me to rewrite all the primitive automata. Things like NFA-DFA conversion will be actually faster, never slower for some text.\n\nThis gives us the opportunity to 'compile' to UTF-8 or UTF-32 RunAutomata (although for the latter we cannot use the classmap trick since the alphabet will be large). This way, it can be used effectively at both a high and low level, and the code is easy to maintain.\n\nI can debug the code now with things like toString and toDot, I certainly cannot do this if the high-level code is changed to byte/UTF-8. It would be completely unmaintainable, and most likely slower overall due to doing quadratic things like determinism on exploded UTF-8 automata. ",
            "author": "Robert Muir",
            "id": "comment-12853013"
        },
        {
            "date": "2010-04-05T12:07:14+0000",
            "content": "as i looked at this, i noticed some unused functionality (numeric fractions and the like).\n\nattached is a patch to remove it. I plan to commit soon. ",
            "author": "Robert Muir",
            "id": "comment-12853354"
        },
        {
            "date": "2010-04-05T19:46:50+0000",
            "content": "Attached patch for first cut at APIs to convert a UTF32 automaton to UTF8.\n\nThere's a test case that verifies the conversion is working correctly.  It seems to be working.\n\nThis patch is just the low level API, ie, converting one edge containing a UTF32 range.  I still need to fix it to convert an entire UTF32 DFA... should be straightforward.\n\nAlso, I need to merge with Robert's int (UTF32) cutover and a UTF8RunAutomaton. ",
            "author": "Michael McCandless",
            "id": "comment-12853506"
        },
        {
            "date": "2010-04-05T21:43:54+0000",
            "content": "attached is a totally scary patch to convert the entire automaton lib to utf-32...\n(i didnt mess with any search code and obviously it wont even compile with this patch) ",
            "author": "Robert Muir",
            "id": "comment-12853551"
        },
        {
            "date": "2010-04-05T21:57:54+0000",
            "content": "Patch w/ first cut at method to cutover whole UTF32 DFA -> UTF8 DFA (and... call determinize on it  ). ",
            "author": "Michael McCandless",
            "id": "comment-12853555"
        },
        {
            "date": "2010-04-06T02:54:38+0000",
            "content": "this is mike's patch + my patch + quick hack attempt... most but not all tests are passing  ",
            "author": "Robert Muir",
            "id": "comment-12853708"
        },
        {
            "date": "2010-04-06T04:31:05+0000",
            "content": "ok I think i made some serious progress here, but i did find a bug in the utf32 -> utf8 dfa convertor.\nThe problem is it does not handle at least the case where the initial state is an accept state.\nI created a testcase for this (TestUTF32SpecialCase), and included the python code back, as i figure you will probably fix it there first.\n\nI deleted the surrogate-seeking tests, like other nuances, if we switch to byte[] these won't behave the same, as these regexps \nare no longer defined.\n\nremaining is to switch the slow fuzzy to use codepoint calculations (to be consistent with the fast one).\nby the way, its really silly we have to unicode-convert just to get length in chars for that score calculation... ugh! ",
            "author": "Robert Muir",
            "id": "comment-12853737"
        },
        {
            "date": "2010-04-06T09:25:11+0000",
            "content": "The problem is it does not handle at least the case where the initial state is an accept state.\n\nOK this is a simple fix in the UTF32ToUTF8.convert method \u2013 I didn't set isAccept on the initial state \u2013 new patch attached that fixes this. ",
            "author": "Michael McCandless",
            "id": "comment-12853820"
        },
        {
            "date": "2010-04-23T13:09:55+0000",
            "content": "Checkpointing progress from Robert & I on this issue...\n\nThe conversion is now done in Java. ",
            "author": "Michael McCandless",
            "id": "comment-12860243"
        },
        {
            "date": "2010-04-23T15:35:18+0000",
            "content": "Last patch was a bit stale \u2013 this one is current, and all tests pass. ",
            "author": "Michael McCandless",
            "id": "comment-12860281"
        },
        {
            "date": "2010-04-23T15:57:28+0000",
            "content": "So here are the advantages of the current patch:\n\n\tfull unicode support (Regular Expression, Wildcard, Fuzzy). for example, wildcard ? means codepoint, not code unit.\n\tsupport for matching all unicode forms easily (utf8, utf16, utf32).\n\teasy to support both native utf8 terms sort order, but also utf8-in-utf16 like we have now. this is not feasible with the existing utf16 representation.\n\teasy to safely do dfa operations on Automaton. this is because there are no surrogates anymore. for example we can safely reverse any automaton to take advantage of Solr's leading wildcard support (e.g. support \"leading\" regexps, too)\n\tbetter compatibility with lucene, because automaton is in sync with the terms format (byte). This could lead to future optimizations like TermsEnum exposing the 'shared prefix' of a term with the previous enumerated term.\n\n\n\nUnfortunately, there are currently a few disadvantages with the patch, but I think we can resolve these:\n\n\tThe linear fuzzy terms enum, from the old code, needs to be fixed and consistent and use utf32 calculations, too.\n\tfor huge dfas (eg fuzzy) there is some cost to the conversion, around 5ms one-time cost on my machine for very long strings. perhaps we can optimize some code here, its not blowing up though.\n\n\n\nSo in my opinion, the first thing should be resolved before committing, and the second is nice-to-have and shouldn't block the improvement. ",
            "author": "Robert Muir",
            "id": "comment-12860295"
        },
        {
            "date": "2010-04-30T21:32:27+0000",
            "content": "New patch (from Robert & I) \u2013 I think this one is ready to commit!\n\nThe rest of FuzzyQuery (eg LinearFuzzyTermsEnum) is now cutover to\ncode points (not UTF16 code units), and we've optimized various\nmethods in the automaton package (especially det).  Performance of\nautomaton/fuzzy queries looks on par or a bit faster, compared to\ntrunk. ",
            "author": "Michael McCandless",
            "id": "comment-12862880"
        },
        {
            "date": "2010-04-30T21:34:24+0000",
            "content": "New patch (from Robert & I) \u2013 I think this one is ready to commit!\n\nThe rest of FuzzyQuery (eg LinearFuzzyTermsEnum) is now cutover to\ncode points (not UTF16 code units), and we've optimized various\nmethods in the automaton package (especially det).  Performance of\nautomaton/fuzzy queries looks on par or a bit faster, compared to\ntrunk. ",
            "author": "Michael McCandless",
            "id": "comment-12862881"
        },
        {
            "date": "2010-05-02T13:38:15+0000",
            "content": "Latest patch (from Robert!) \u2013 strengthens tests, fixes one but in how common suffix was created for AutomatonTermsEnum, cleanup. ",
            "author": "Michael McCandless",
            "id": "comment-12863134"
        },
        {
            "date": "2010-05-02T22:14:10+0000",
            "content": "I think we are good to go here... we should look at getting this in soon, as it will then allow us to cutover to UTF-8 sort order. ",
            "author": "Robert Muir",
            "id": "comment-12863205"
        },
        {
            "date": "2010-05-04T06:41:26+0000",
            "content": "The Generics-Police and Java-5-Police fixed compilation errors/warnings in revision 940743. ",
            "author": "Uwe Schindler",
            "id": "comment-12863695"
        }
    ]
}