{
    "id": "SOLR-11581",
    "title": "NoMergeScheduler ctor should be public for allowing instantiation from SOLR",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There are scenarios where a SOLR user may want to use NoMergeScheduler. However, it is not possible to use it today, since its constructor is private and solrconfig.xml requires a Scheduler with public constructor.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-31T07:15:25+0000",
            "content": "Nawab Zada Asad iqbal,\n\nYou can achieve the same \"no merge\" by NoMergePolicy too right? Are you looking forward to saving time and resources doing bulk indexing or something like that? ",
            "author": "Amrit Sarkar",
            "id": "comment-16226380"
        },
        {
            "date": "2017-10-31T14:33:37+0000",
            "content": "Exactly. During bulk indexing scenario, we would like to save the Indexer from useless processing. I don't have any stats on the impact on efficiency but if Lucene is doing it, then probably there is some impact.  ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16226882"
        },
        {
            "date": "2017-10-31T14:57:44+0000",
            "content": "I just thought, that my proposed fix (making constructor public) is in Lucene. Should i have opened a Lucene bug? ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16226940"
        },
        {
            "date": "2017-10-31T17:06:54+0000",
            "content": "Nawab,\n\nWe, at my workplace, tried to get some relevant numbers testing various scenarios to summarise what works and what not with optimising resources at bulk indexing. We will share the article in public very soon.\n\nMeanwhile, please try out this particular combination:\n1. \"NoMergePolicy\" instead of default TieredMergePolicy; I don't think you need NoMergeSchedular for achieving no merges. ConcurrentMergeSchedular will execute barely some portion of code before bouncing back.\n2. \"useCompoundFile\" in <indexConfig> so that optimised segments are written over.\n3.  Increase ramBufferSize (default 100MB) to a higher number, how much, that is machine specific, so that segments gets only written when the threshold \"ramBufferSize\" tips over.\n\nSee more about this official guide: https://lucene.apache.org/solr/guide/6_6/indexconfig-in-solrconfig.html ",
            "author": "Amrit Sarkar",
            "id": "comment-16227120"
        },
        {
            "date": "2017-11-01T10:26:13+0000",
            "content": "NoMergeScheduler is designed to be a singleton class \u2013 its ctor is private because you are supposed to simply use its static INSTANCE value.  Can we modify Solr's merge scheduler parsing code to just use the singleton?\n\nAlso, it's not a good idea to defer all merging until the end: Lucene will at that point (when you finally turn on merging) have to do all the merges it would have been doing all along, so you're not saving any work overall.\n\nBut increasing IW's RAM buffer, and using fewer threads (it's diminishing returns on indexing throughput as you increase thread count), will decrease the merge pressure. ",
            "author": "Michael McCandless",
            "id": "comment-16233891"
        },
        {
            "date": "2017-11-01T17:51:32+0000",
            "content": "Thanks Amrit, and Michael. \n\nI am already doing most of what you are recommending. I want to write a blog on it, once I successfully upgrade to solr 7 and also look forward to your Amrit's article. -Though, we don't use \"useCompondFile\" for the sake of better query performance. -  (EDIT, I later found that this perception of 'useCompoundFile' is wrong)\n\nMichael: In our current design, we bulk index all the accumulated documents, then merge explicitly to an optimal number of segments (10 or so). Only then we start live indexing and query traffic to the servers (there are some intermediate steps to replace solrconfig and also index for the time taken during bulk indexing). In earlier experiments with older Solr versions, keeping merging ON while bulk indexing slowed down the whole process. \n ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16234474"
        },
        {
            "date": "2017-11-03T13:47:10+0000",
            "content": "Nawab,\n\n> Though, we don't use \"useCompondFile\" for the sake of better query performance.\n\nCan you share a brief explanation or resource on how \"compound file segments\" deteriorates query performance. We did some test son our own at workplace and didn't find any reason for not using \"compound file segments\". ",
            "author": "Amrit Sarkar",
            "id": "comment-16237611"
        },
        {
            "date": "2017-11-03T15:14:31+0000",
            "content": "Amrit, \n\nAfter reading your question, I am now realizing that `compoundFile` is not what i understood it to be; and it is a temporary file during indexing. My perception was based on this comment in  a `solrconfig` which comes out of the box. \n\n\n\n    <!-- Expert: Enabling compound file will use less files for the index, \n         using fewer file descriptors on the expense of performance decrease. \n         Default in Lucene is \"true\". Default in Solr is \"false\" (since 3.6)\n         -->\n\n\n ",
            "author": "Nawab Zada Asad iqbal",
            "id": "comment-16237732"
        }
    ]
}