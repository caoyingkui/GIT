{
    "id": "LUCENE-7585",
    "title": "Interface for common parameters used across analysis factories",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "6.3",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/analysis"
        ],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "Certain parameters (String constants) are same/common for multiple analysis factories. Some examples are ignoreCase, dictionary, and preserveOriginal. These string constants are handled inconsistently in different factories. This is an effort to define most common constants in (CommonAnalysisFactoryParams) interface and reuse them.",
    "attachments": {
        "LUCENE-7585.patch": "https://issues.apache.org/jira/secure/attachment/12842294/LUCENE-7585.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15732930",
            "date": "2016-12-08T18:06:54+0000",
            "content": "+1 LGTM.  The only thing I'd change is \"LUCENE_MATCH_VERSION_PARAM\" to \"LUCENE_MATCH_VERSION\".  \n\nIf there are no further comments then I'll commit this later this weekend. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15733334",
            "date": "2016-12-08T20:36:02+0000",
            "content": "The patch appears to be against a non-existent version of CommonAnalysisFactoryParams.java, so doesn't apply properly.  Manual repair worked for me (saving the patch as the target file, trimming to include just the target file contents, removing - lines, and deleting + prefixes from lines).\n\nIt'd be nice to alphabetize the constants.\n\nOtherwise, +1. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-15736474",
            "date": "2016-12-09T22:07:09+0000",
            "content": "Properly created patch that includes proposed changes (alphabetisation and lucene_match_version). Ant documentation-lint complains about factories  of icu. Any pointer how to fix it? ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15736501",
            "date": "2016-12-09T22:18:10+0000",
            "content": "Thank you for looking into this. Initially, I was planning to move all existing parameters to a common interface.\nI figured that the interface will grow very large since certain factories have many specific parameters. \nI moved the most common parameters to the interface. However, there still remains a lot in the codebase.\nFor example, ngram package has \"minGramSize\" and \"maxGramSize\" in common. Phonetic module has \"maxCodeLength\" and \"inject.\"\n\nWhat could be the preferred course of action here?\n\n\n\tHandle packages and modules locally? If yes how?\n\tMove all parameters to the interface unconditionally.\n\tDevise an algorithm: Move if a parameter is shared by at least two package or module.\n\t?\n\n ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15737593",
            "date": "2016-12-10T09:48:34+0000",
            "content": "Here is an excerpt from documentation-lint\n\n\n  [exec] build/docs/analyzers-icu/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory.html\n     [exec]   missing Fields: CONSUME_ALL_TOKENS\n     [exec]   missing Fields: DELIMITER\n     [exec]   missing Fields: DICTIONARY\n     [exec]   missing Fields: ENCODER\n     [exec]   missing Fields: FORMAT\n     [exec]   missing Fields: IGNORE_CASE\n     [exec]   missing Fields: LUCENE_MATCH_VERSION\n     [exec]   missing Fields: MAX\n     [exec]   missing Fields: MAX_TOKEN_LENGTH\n     [exec]   missing Fields: MIN\n     [exec]   missing Fields: PATTERN\n     [exec]   missing Fields: PRESERVE_ORIGINAL\n     [exec]   missing Fields: PROTECTED\n     [exec]   missing Fields: TYPES\n     [exec]   missing Fields: WORDS\n     [exec] \n     [exec] Missing javadocs were found!\n\n ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15739000",
            "date": "2016-12-11T03:59:24+0000",
            "content": "RE documentation-lint: It appears they need javadocs then.\n\n(quoting from your description)\nThese string constants are handled inconsistently in different factories\n\nCan you give an example of how the same parameter is handled differently?  AFAICT This patch doesn't address that.  Such inconsistencies, if they exist, would be more important to resolve than moving Strings constants to an interface IMO.\n\nI think limiting the scope of this patch to common parameters is well enough.  In doing so, they can be documented in one place (please do that).  I'm not sure what value/point there is in doing anything more with other parameters (used by one class), or trying to overcome any inter-package complications.  So minGramSize etc. could just be defined in the same common one.  At least that's my opinion; it's kind of a bike-shed issue of taste. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15749577",
            "date": "2016-12-14T21:43:30+0000",
            "content": "By saying inconsistency, I mean the strategy to retrieve those parameters from the arg map. Some use inline string constant e.g. getBoolean(args, \"reverse\"); others define private or public static final String for the key. ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15749703",
            "date": "2016-12-14T22:26:40+0000",
            "content": "a few more refactoring including the overlooked code point filter factory. ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15758938",
            "date": "2016-12-18T14:50:21+0000",
            "content": "I tried adding javadocs to fields in the interface, but it did not solve the missing javadocs problem.\ndocumentation-lint complains/fails for the lucene/analysis/modules, which are explicitly defined with the level of method in lucene/build.xml\n\n\n    <check-missing-javadocs dir=\"build/docs/analyzers-icu\" level=\"method\"/>\n    <check-missing-javadocs dir=\"build/docs/analyzers-morfologik\" level=\"method\"/>\n    <check-missing-javadocs dir=\"build/docs/analyzers-phonetic\" level=\"method\"/>\n    <check-missing-javadocs dir=\"build/docs/analyzers-stempel\" level=\"method\"/>\n    <check-missing-javadocs dir=\"build/docs/suggest\" level=\"method\"/>\n\n\n\nI figured that this method=(level|class|none) thing is about checkJavaDocs.py.\nAny pointer how to document interface fields so that level=\"method\" passes in checkJavaDocs.py?\n\nOr, can we remove above xml fragment from build.xml? ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15765171",
            "date": "2016-12-20T20:29:29+0000",
            "content": "Patch that adds javadocs. ant documentation-lint still fails for some reason that I cannot figure out. ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15968100",
            "date": "2017-04-13T19:13:38+0000",
            "content": "bring the patch to master.  ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15968230",
            "date": "2017-04-13T21:24:06+0000",
            "content": "Finally ant precommit passes with this patch. It checks missing javadocs using level=package for icu, morfologik, phonetic, and suggest. ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15981103",
            "date": "2017-04-24T12:40:29+0000",
            "content": "I'm looking over this patch again.\n\n\tCONSUME_ALL_TOKENS is only used by LimitTokenCountFilterFactory thus shouldn't be in CommonAnalysisFactoryParams?\n\tCan you please try and say a little something about a parameter in the javadoc other than simply repeating the name (which isn't helpful).  For example \"dictionary\" refers to a file \u2013 that's helpful.  Perhaps not for min/max or any other intuitive param.\n\tI see you chose to use these constants in the tests.  I recall Yonik Seeley once recommending that Solr tests should not refer to Solr parameter constants because doing so may make it easier to introduce a back-compat break.  That makes sense to me and the concept applies here to.\n\n\n\nBTW nice attention to detail in some classes.... I noticed you corrected some javadocs and added some value set constraints. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16072966",
            "date": "2017-07-03T23:05:58+0000",
            "content": "Sorry for the huge delay. This patch addresses the issues raised by David.\n\n\n\tconsumeAllTokens is used by LimitTokenOffset and LimitTokenPosition too.\n\tapplies Yonik's concept\n\timproved javadoc. Some arguments are difficult since they have different meanings in different components.\n\tcovers a few more overlooked analysis factories\n\tspotted a copy-paste mistake\n\n\n\nAny feedback is appreciated. ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-16073131",
            "date": "2017-07-04T05:45:27+0000",
            "content": "Fix TestStopFilterFactory and TestSuggestStopFilterFactory failure ",
            "author": "Ahmet Arslan"
        }
    ]
}