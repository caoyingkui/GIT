{
    "id": "SOLR-2963",
    "title": "Improving the performance of group.ngroups=true when there are a lot of unique groups",
    "details": {
        "affect_versions": "3.5",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The performance of computing the total number of groups (by setting group.ngroups=true) degrades badly when there are many unique groups.\nIt would be very useful to have an adequate number of groups to provide good means for paging through the results etc.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mickael Magniez",
            "id": "comment-13553626",
            "date": "2013-01-15T10:12:46+0000",
            "content": "Hi,\n\nAny chance to see this issue resolved soon? We plan to migrate our ecommerce website (3M documents) to Solr, but we need field collapsing, with decent performances when retrieving groupcount.\n\nSome facts about our performance : \n1M document (700MB), 2CPU/8GB machine (2GB jvm)\nFor a query matching 100k documents, 700ms with ngoups=true vs 70ms with ngroups=false\n\nI have a workaround for grouping on single field : i ask a facet on the field used for grouping, with facet.limit=-1 and count values. I don't know if the same trick could be used internally in Solr? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13553927",
            "date": "2013-01-15T16:00:34+0000",
            "content": "FYI- your workaround is similar to the approach on SOLR-2242.  In this case, it counts the unique facet values internally and just returns you the count so you do not need to send all that data over the wire to your application.  \n\nAre you finding that using faceting for the total # of groups performs better than \"nGroups\"?  I was under the impression that \"nGroups\" was designed to perform better than the faceting workaround and in fact am in the process of converting an application to use \"nGroups\" from the current SOLR-2242-based implementation.  I'm assuming though that \"nGroups\" will scale better, but your comment here makes me wonder if it indeed is worse? "
        },
        {
            "author": "Mickael Magniez",
            "id": "comment-13553954",
            "date": "2013-01-15T16:25:20+0000",
            "content": "In my use case, the faceting workaround is far better than ngroups.\n\nIf i make empty query (returning 1.2M docs and 800k groups), it take 200ms for faceting, and 6s for ngroups "
        },
        {
            "author": "James Dyer",
            "id": "comment-13553989",
            "date": "2013-01-15T16:47:19+0000",
            "content": "I was just going through the notes on SOLR-2564 and am wondering if the grouping module's cache would help performance in your case.  Have you tried setting \"group.cache.percent\" to a value > than the % of documents in the index your poor-performing queries return?  I haven't looked at the grouping module code so I'm not sure if it speeds up \"nGroups\" or not. "
        },
        {
            "author": "Mickael Magniez",
            "id": "comment-13554832",
            "date": "2013-01-16T08:15:32+0000",
            "content": "I try various values, no performance improvement with any percent value "
        }
    ]
}