{
    "id": "SOLR-8556",
    "title": "Add ConcatOperation to be used with the SelectStream",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "Now that we have the UpdateStream it would be nice to support the use case of sending rolled up aggregates for storage in another SolrCloud collection. To support this we'll need to create id's for the aggregate records.\n\nThe ConcatOperation would allows us to concatenate the bucket values into a unique id. For example:\n\n\nupdate(\n            select( \n                         rollup(search(q=\"*:*, fl=\"a,b,c\", ...)), \n                         concat(fields=\"a,b,c\", delim=\"_\",  as=\"id\")))",
    "attachments": {
        "SOLR-8556.patch": "https://issues.apache.org/jira/secure/attachment/12783113/SOLR-8556.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-19T15:02:39+0000",
            "author": "Joel Bernstein",
            "content": "First pass at the implementation tests are needed ",
            "id": "comment-15106841"
        },
        {
            "date": "2016-01-19T15:13:03+0000",
            "author": "Joel Bernstein",
            "content": "This ticket is important for supporting background aggregations with the DaemonStream. Example:\n\n\ndaemon(parallel(update(select(concat(fields=\"month,day,year\", delim=\"-\", as=\"id\"), rollup(search())))))\n\n\n\nThe select above would concatenate buckets into a unique id so that each time the parallel rollup ran the new aggregate values would update old values in the Solr index being updated.\n ",
            "id": "comment-15106857"
        },
        {
            "date": "2016-01-19T16:19:03+0000",
            "author": "Dennis Gove",
            "content": "\nexpression.addParameter(new StreamExpressionNamedParameter(\"fields\",fieldsStr));\n\n\n\nIf the ConcatOperation was created using the non-expression constructor then fieldsStr will be unset and as such this won't produce the expected result. Instead, I'd iterate over the fields array and create a comma-separated list. This would allow the removal of the global fieldsStr. ",
            "id": "comment-15106932"
        },
        {
            "date": "2016-01-19T16:28:49+0000",
            "author": "Dennis Gove",
            "content": "\nbuf.append(field);\n\n\n\nThis concatenates the fields together instead of the values of the fields together. ",
            "id": "comment-15106941"
        },
        {
            "date": "2016-01-19T16:29:06+0000",
            "author": "Dennis Gove",
            "content": "I'm going through and creating tests so I'll correct these issues as I go. ",
            "id": "comment-15106944"
        },
        {
            "date": "2016-01-19T16:35:05+0000",
            "author": "Joel Bernstein",
            "content": "Great thanks! ",
            "id": "comment-15106958"
        },
        {
            "date": "2016-01-19T16:53:27+0000",
            "author": "Dennis Gove",
            "content": "Adds ConcatOperation specific tests. Corrects the issues mentioned above. Would still like to add a test showing the usage of this inside a SelectStream. For example, there is a difference between these two clauses\n\nselect(a,b,c, search(....), replace(a,null,withValue=0f), concat(fields=\"a,b\", as=\"ab\", delim=\"-\"))\n\n\n\nselect(a,b,c, search(....), concat(fields=\"a,b\", as=\"ab\", delim=\"-\"), replace(a,null,withValue=0f))\n\n\n\nIn the first one a null value in field a will first be replaced with 0 and then concatenated with b whereas in the second one a and b will be concatenated first and then a null value in a would be replaced with 0. Ie, the order of operations matters.\n\nAlso note, I added a feature which, for null values, will concatenate the string \"null\". If one wants to replace null with a different value then one can use the replace operation in conjunction with the concat operation. ",
            "id": "comment-15106998"
        },
        {
            "date": "2016-01-19T16:56:09+0000",
            "author": "Joel Bernstein",
            "content": "The ConcatOperation will be pretty easy to wire into the SQLHandler once it's committed. I'll create a ticket for that.\n\nselect a,b, concat('a,b', '-') as c from tablex\n\n ",
            "id": "comment-15107002"
        },
        {
            "date": "2016-01-19T20:20:47+0000",
            "author": "Dennis Gove",
            "content": "Adds additional tests. I think this is good to go. ",
            "id": "comment-15107362"
        },
        {
            "date": "2016-01-19T21:15:30+0000",
            "author": "Joel Bernstein",
            "content": "Looks great. \n\n+1 to commit. ",
            "id": "comment-15107450"
        },
        {
            "date": "2016-01-20T15:37:07+0000",
            "author": "Dennis Gove",
            "content": "Added \"concat\" to StreamHandler so it is a default operation. ",
            "id": "comment-15108750"
        },
        {
            "date": "2016-01-20T18:08:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1725769 from dpgove@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1725769 ]\n\nSOLR-8556: Add ConcatOperation to be used with the SelectStream ",
            "id": "comment-15109049"
        }
    ]
}