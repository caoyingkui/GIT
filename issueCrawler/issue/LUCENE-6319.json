{
    "id": "LUCENE-6319",
    "title": "Delegating OneMerge",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "In trying to integrate SortingMergePolicy into ElasticSearch, I ran into an issue where the custom merge logic was being stripped out by IndexUpgraderMergeSpecification.  Related issue here:\n\nhttps://github.com/elasticsearch/elasticsearch/issues/9731\n\nIn an endeavor to fix this, I attempted to create a DelegatingOneMerge that could be used to chain the different MergePolicies together.  I quickly discovered this to be impossible, due to the direct member variable access of OneMerge by IndexWriter and other classes.  It would be great if this variable access could be privatized and the consuming classes modified to use the appropriate getters and setters.  Here's an example DelegatingOneMerge and modified OneMerge.\n\nhttps://gist.github.com/ebradshaw/e0b74e9e8d4976ab9e0a\nhttps://gist.github.com/ebradshaw/d72116a014f226076303\n\nThe downside here is that this would require an API change, as there are three public variables in OneMerge: estimatedMergeBytes, segments and totalDocCount.  These would have to be moved behind public getters.\n\nWithout this change, I'm not sure how we could get the SortingMergePolicy working in ES, but if anyone has any other suggestions I'm all ears!  Thanks!",
    "attachments": {
        "SOLR-6319.patch": "https://issues.apache.org/jira/secure/attachment/12724715/SOLR-6319.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14350737",
            "author": "Elliott Bradshaw",
            "date": "2015-03-06T19:09:15+0000",
            "content": "No thoughts on this?  I'll admit, I'm a bit new to the Index API, so if for some reason this wouldn't work I totally understand. "
        },
        {
            "id": "comment-14350875",
            "author": "Ryan Ernst",
            "date": "2015-03-06T20:51:28+0000",
            "content": "Elliott Bradshaw Sorry I haven't had time to look. I plan to take a look over the next week or 2.   "
        },
        {
            "id": "comment-14490665",
            "author": "Elliott Bradshaw",
            "date": "2015-04-11T01:03:00+0000",
            "content": "Ryan, no worries.  I figured that this might not be the top of the priority list.  Here's my shot at a patch.\n\nI added two new classes, AbstractOneMerge and DelegatingOneMerge.  \n\nI didn't want to overclutter OneMerge with a ton of getters and setters, so I moved most of that logic to AbstractOneMerge.  DelegatingOneMerge could extend AbstractOneMerge instead of OneMerge, but that would require clients to change their references from OneMerge to AbstractOneMerge.  I figured this was a decent compromise, but any other opinions would be appreciated.\n\nSortingOneMerge has been modified to extend DelegatingOneMerge.\n\nAlmost all of the changes are internal and have been applied to IndexWriter, etc.  The only public API changes are the moving of OneMerge.segments, rateLimiter and totalMaxDoc behind public getter methods. "
        },
        {
            "id": "comment-14542945",
            "author": "Elliott Bradshaw",
            "date": "2015-05-14T00:02:05+0000",
            "content": "Just thought I'd ping on this.  Any thoughts?  Greatest patch ever?  Seriously though, I know this touches a lot of hardcore internal classes, so I get it if people are wary.  If anyone has any suggestions of a different route, I'm more than happy to explore it. "
        }
    ]
}