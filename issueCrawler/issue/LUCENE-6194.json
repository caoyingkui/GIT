{
    "id": "LUCENE-6194",
    "title": "Reproduce with should include -Dtests.iters=N",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [
            "modules/test-framework"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "I was playing with the patch on LUCENE-6066, and hit a test failure, but then the \"Reproduce with: \" failed to reproduce, which threw me for a bit of a loop, until I realized it was missing the -Dtests.iters=N.\n\nTo see this, apply the patch on LUCENE-6066 to trunk and then run this:\n\n\nant test  -Dtestcase=TestPriorityQueue -Dtests.method=testRemovalsAndInsertions* -Dtests.seed=2576D26D551748E5 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt -Dtests.locale=ru_RU -Dtests.timezone=Europe/Paris -Dtests.asserts=true -Dtests.file.encoding=UTF-8 -Dtests.iters=10\n\n\n\n(or just insert a random test failure into e.g. TestDemo or something).\n\nIt should fail, but the \"Reproduce with: ...\" line does not include -Dtests.iters=10.  I think it should?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14287196",
            "author": "Dawid Weiss",
            "date": "2015-01-22T10:16:44+0000",
            "content": "If reiterations are independent then the failure reproduce-with message should point you at the failing iteration, without the need to loop through any previous seeds... At least in an ideal world this should be the case? "
        },
        {
            "id": "comment-14287202",
            "author": "Michael McCandless",
            "date": "2015-01-22T10:24:45+0000",
            "content": "At least in an ideal world this should be the case?\n\nI agree, hrmph.  Here's the failure I see:\n\n\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestPriorityQueue -Dtests.method=testRemovalsAndInsertions -Dtests.seed=2576D26D551748E5 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt -Dtests.locale=ru_RU -Dtests.timezone=Europe/Paris -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.13s | TestPriorityQueue.testRemovalsAndInsertions <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: parent=69258832 child=69258832\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([2576D26D551748E5:379377B96F92B34E]:0)\n   [junit4]    > \tat org.apache.lucene.util.TestPriorityQueue$IntegerQueue.checkValidity(TestPriorityQueue.java:41)\n   [junit4]    > \tat org.apache.lucene.util.TestPriorityQueue.testRemovalsAndInsertions(TestPriorityQueue.java:171)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nI think the bug is that the 2nd part of the seed is not included in the repro line?  Because if I use that seed instead, i.e.:\n\n\nant test  -Dtestcase=TestPriorityQueue -Dtests.method=testRemovalsAndInsertions* -Dtests.seed=2576D26D551748E5:379377B96F92B34E -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt -Dtests.locale=ru_RU -Dtests.timezone=Europe/Paris -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\nTHEN the failure does reproduce with only 1 iteration. "
        },
        {
            "id": "comment-14287212",
            "author": "Dawid Weiss",
            "date": "2015-01-22T10:31:59+0000",
            "content": "Yes, this is correct behavior. The \"second\" part of the seed is derived from (the first part + iteration number). Note, however, that if you provide both parts and run multiple iterations then all of the iterations will be repeated with exactly the same randomness.\n\nThis behavior is useful to detect non-deterministic tests. Note the difference \u2013 if your test fails some iterations with:\n\n\n-Dtests.seed=dead -Dtests.iters=100\n\n\n\nit means for \"certain\" seeds (at certain iterations) the code is failing, while if your test case fails intermittently on:\n\n\n-Dtests.seed=dead:beef -Dtests.iters=100\n\n\n\nthen there is something non-related to the randomness that is causing the failure for a particular seed (dead:beef).\n\nTechnically the first segment applies to static context (randomness) and the second segment applies to any instance-level context (randomness). "
        },
        {
            "id": "comment-14287429",
            "author": "Michael McCandless",
            "date": "2015-01-22T13:51:47+0000",
            "content": "Thanks for the explanation Dawid.\n\nBut if it's the correct behavior, why does the \"Reproduce with: \" not in fact reproduce the failure?  Somewhere something somehow seems wrong \n\nI don't see any non-determinism in the test (no threads involved, random() is alway used, etc.).\n\nIt seems like either we need the -Dtests.iters=100 in the repro line, or, the repro line should include the \"per-iter seed\" so it does in fact reproduce... "
        },
        {
            "id": "comment-14287710",
            "author": "Dawid Weiss",
            "date": "2015-01-22T16:51:25+0000",
            "content": "Well, I guess that's what I was trying to say \u2013 some understanding of how it works should be present, there is no single \"reproduce with\" set of steps, at least if you want to really get to the bottom of the problem.\n\nThe \"safer\" bet for \"reproduce with\" would be to emit the master seed and -Dtests.iters=X if X>1. The full seed will be typically present in stack traces and all other messages anyway, so it can be always typed-in explicitly. "
        },
        {
            "id": "comment-14288019",
            "author": "Michael McCandless",
            "date": "2015-01-22T19:11:33+0000",
            "content": "Can we just add the 2nd part of the seed when test.iters > 1?  That's a more efficient \"repro\" than putting only the master seed in and adding -Dtests.iters=N? "
        },
        {
            "id": "comment-14288354",
            "author": "Dawid Weiss",
            "date": "2015-01-22T22:39:41+0000",
            "content": "You could, but if a given test does have iteration-related dependencies (for example leaks memory and only fails after N iterations) then you would have a misleading message as well... There is no \"right\" scenario to cover all possible situations I think. The understanding of what these \"components\" of the random seed are (in correlation with test reiterations) is crucial; no single \"reproduce with\" message is going to be helpful in all situations.\n\nThe best way to signal an error would be to display this...\n\ntest seed: x:y\ntest iterations: z\nsee explanation of how randomization and repeated tests work: [here]\n\n\n\nAnother way to say it is that you can change the message any way you like, in the end somebody will be confused by the \"reproduce with\" message.  "
        },
        {
            "id": "comment-14288381",
            "author": "Ryan Ernst",
            "date": "2015-01-22T22:55:01+0000",
            "content": "While there might not be one single \"right\" reproduce message, there are certainly ones that are better than others? What we have now doesn't seem to work, since the reproduce line will currently only run the first iteration if there were multiple.  Could we output both repro lines, the first one with the child seed, and the second with -Dtests.iters? "
        },
        {
            "id": "comment-14288394",
            "author": "Dawid Weiss",
            "date": "2015-01-22T23:00:02+0000",
            "content": "Up to you, really. To me full seed + the number of iterations is sufficient, but I have an understanding of what each of these component does. "
        },
        {
            "id": "comment-14288418",
            "author": "Hoss Man",
            "date": "2015-01-22T23:14:31+0000",
            "content": "Note, however, that if you provide both parts and run multiple iterations then all of the iterations will be repeated with exactly the same randomness.\n\nyes, but then it would be doing exactly what you asked it too - it's doing many iterations with both a fixed master seed and a fixed iteration seed.\n\n\nThis behavior is useful to detect non-deterministic tests. Note the difference \u2013 if your test fails some iterations with:\n\n-Dtests.seed=dead -Dtests.iters=100\n\nit means for \"certain\" seeds (at certain iterations) the code is failing, while if your test case fails intermittently on:\n\n-Dtests.seed=dead:beef -Dtests.iters=100\n\nthen there is something non-related to the randomness that is causing the failure for a particular seed (dead:beef).\n\n...i think the best course of action is to assume the test is deterministic, and include the full seed since that's the fastest way to \"reproduce\" a failure in code that was triggered by the randomly generated \"input\"\n\nif it doesn't reproduce, then the user (who must already be relatively familiar with teh test framework if he was even trying test.iters in hte first place) will have a good indication that hte test is flawed.\n\n\u2014\n\nto me, including the full seed seems like th best course of action for hte reproduce line, in particular because of how the reproduce lines (plural) are reported when you use test.iters in the first place.\n\nconsider this diff...\n\n\nIndex: core/src/test/org/apache/lucene/TestSearch.java\n===================================================================\n--- core/src/test/org/apache/lucene/TestSearch.java\t(revision 1654092)\n+++ core/src/test/org/apache/lucene/TestSearch.java\t(working copy)\n@@ -34,6 +34,11 @@\n /** JUnit adaptation of an older test case SearchTest. */\n public class TestSearch extends LuceneTestCase {\n \n+  public void testReproduceLine() throws Exception { // nocommit\n+    assertTrue(0 < random().nextInt(100)); // will fail on '0'\n+  }\n+\n+\n   public void testNegativeQueryBoost() throws Exception {\n     Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n     q.setBoost(-42f);\n\n\n\n...and this output...\n\n\nhossman@frisbee:~/lucene/dev/lucene/core$ ant test -Dtestcase=TestSearch -Dtests.method=testReproduceLine\\* -Dtests.iters=500\nBuildfile: /home/hossman/lucene/dev/lucene/core/build.xml\n\n   [junit4] <JUnit4> says \u05e9\u05dc\u05d5\u05dd! Master seed: 6DAA9E4F7FABD6FC\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(16679@frisbee).\n   [junit4] Suite: org.apache.lucene.TestSearch\n   [junit4] OK      0.08s | TestSearch.testReproduceLine {#0 seed=[6DAA9E4F7FABD6FC:F8FFD9389F6A3705]}\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#1 seed=[6DAA9E4F7FABD6FC:4CA965C4ABA8FC29]}\n   [junit4] OK      0.01s | TestSearch.testReproduceLine {#2 seed=[6DAA9E4F7FABD6FC:C240F318FA6CB4E2]}\n   [junit4] OK      0.01s | TestSearch.testReproduceLine {#3 seed=[6DAA9E4F7FABD6FC:F3AE58FD9692EFCB]}\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#4 seed=[6DAA9E4F7FABD6FC:BF6FDD50379A2F70]}\n   [junit4] OK      0.01s | TestSearch.testReproduceLine {#5 seed=[6DAA9E4F7FABD6FC:2E950E0F4A266270]}\n...\n   [junit4] OK      0.01s | TestSearch.testReproduceLine {#190 seed=[6DAA9E4F7FABD6FC:245CC0506485B2F4]}\n   [junit4] OK      0.01s | TestSearch.testReproduceLine {#191 seed=[6DAA9E4F7FABD6FC:A72F9FDAAB585D2E]}\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSearch -Dtests.method=testReproduceLine -Dtests.seed=6DAA9E4F7FABD6FC -Dtests.slow=true -Dtests.locale=lt_LT -Dtests.timezone=America/Cuiaba -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.14s | TestSearch.testReproduceLine {#192 seed=[6DAA9E4F7FABD6FC:E53D5B74EA5CDF58]} <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([6DAA9E4F7FABD6FC:E53D5B74EA5CDF58]:0)\n   [junit4]    > \tat org.apache.lucene.TestSearch.testReproduceLine(TestSearch.java:38)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#193 seed=[6DAA9E4F7FABD6FC:B1832CB6030655C9]}\n...\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#225 seed=[6DAA9E4F7FABD6FC:676822DBF04739BE]}\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSearch -Dtests.method=testReproduceLine -Dtests.seed=6DAA9E4F7FABD6FC -Dtests.slow=true -Dtests.locale=lt_LT -Dtests.timezone=America/Cuiaba -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.01s | TestSearch.testReproduceLine {#226 seed=[6DAA9E4F7FABD6FC:1C72A218C788A63A]} <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([6DAA9E4F7FABD6FC:1C72A218C788A63A]:0)\n   [junit4]    > \tat org.apache.lucene.TestSearch.testReproduceLine(TestSearch.java:38)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#227 seed=[6DAA9E4F7FABD6FC:E7C00D558B908387]}\n...\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#311 seed=[6DAA9E4F7FABD6FC:4A8C6A00C2513040]}\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSearch -Dtests.method=testReproduceLine -Dtests.seed=6DAA9E4F7FABD6FC -Dtests.slow=true -Dtests.locale=lt_LT -Dtests.timezone=America/Cuiaba -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.02s | TestSearch.testReproduceLine {#312 seed=[6DAA9E4F7FABD6FC:4357B0D76C4DC156]} <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([6DAA9E4F7FABD6FC:4357B0D76C4DC156]:0)\n   [junit4]    > \tat org.apache.lucene.TestSearch.testReproduceLine(TestSearch.java:38)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4] OK      0.00s | TestSearch.testReproduceLine {#313 seed=[6DAA9E4F7FABD6FC:427ED3795B660F]}\n...\n\n\n\n...what's the point of including the reproduce line for every individual failure if they are all identicle and don't actually include enough context to reproduce?  Adding -Dtests.iters=N to the reproduce line seems like it would be a lot less helpful then adding the full seed so that i have several individual commands to try and reproduce \u2013 and as long as those several commands reproduce reliably, i can post then in jira/email for diagnosing the problem with the code ... if they don't reproduce, then my original execuction line with -Dtests.iters=N is going to be very useful for getting to the bottom of how/why the test is broken "
        },
        {
            "id": "comment-14288428",
            "author": "Ryan Ernst",
            "date": "2015-01-22T23:19:57+0000",
            "content": "+1 to what hoss said. That is a good point about how spitting back out the original line multiple times seems kind of silly in context. "
        },
        {
            "id": "comment-14288470",
            "author": "Robert Muir",
            "date": "2015-01-22T23:47:39+0000",
            "content": "Can we just remove tests.iters already now that we have 'ant beast'?\n\ntests.iters is a huge trap trap, someone runs it with n=10000 then commits their code and wonders why jenkins fails. The reason is, our test framework includes a lot of class-level randomness and when you use test.iters it does not exhaust those possibilities. This makes it useless.\n\nOn the other hand 'ant beast' is the same thing as actually running the test many times and you can be confident that it is able to explore the entire search space. We've also done work to make it nicer and more friendly, e.g. setting better junit4 options for 'beast' so it only includes relevant output and minimal noise for each iteration.\n\nYou can beast with tests.verbose and everything works as you expect.\n\nFor seeds that don't reproduce well, you can pass -Dtests.dups to ant beast and hammer the problematic seed with multiple threads. (it currently gives an annoying warning from junit for every iteration that am i currently unable to remove since i dont know how to set the ignore, but it works (separate issue): \"junit4 Duplicate suite name used with XML reports: org.apache.lucene.TestDemo. This may confuse tools that process XML reports. Set 'ignoreDuplicateSuites' to true to skip this message.\"\n\nSo yeah, please, kill tests.iters  "
        },
        {
            "id": "comment-14288932",
            "author": "Dawid Weiss",
            "date": "2015-01-23T07:46:25+0000",
            "content": "Good points, Hoss.\n\n> This makes it useless\n\nThis is true for Lucene which indeed does use a lot of static-level randomness. In general static fixtures are a not such a great idea because they are effectively reused across different tests... Lucene only uses this because it speeds up tests.\n\n> Set 'ignoreDuplicateSuites' to true to skip this message\n\nIt tells you exactly what to do \n\n\n                <!-- ANT-compatible XMLs for jenkins records etc. -->\n-                <junit4:report-ant-xml dir=\"@{junit.output.dir}\" outputStreams=\"no\" />\n+                <junit4:report-ant-xml dir=\"@{junit.output.dir}\" outputStreams=\"no\" ignoreDuplicateSuites=\"true\" />\n\n\n "
        },
        {
            "id": "comment-14289233",
            "author": "Robert Muir",
            "date": "2015-01-23T13:24:52+0000",
            "content": "\nThis is true for Lucene which indeed does use a lot of static-level randomness. In general static fixtures are a not such a great idea because they are effectively reused across different tests... Lucene only uses this because it speeds up tests.\n\nRight but this is lucene we are talking about  So I think we should remove tests.iters and just simplify the whole situation.\n\nAgain: my problem is the trap. Whenever i see people using this, i know they will cause jenkins build failures.\n\n\nIt tells you exactly what to do \n\nThanks, I did try this. I wasnt able to silence this thing, will try it again...  "
        },
        {
            "id": "comment-14289241",
            "author": "Dawid Weiss",
            "date": "2015-01-23T13:29:17+0000",
            "content": "> Thanks, I did try this. I wasnt able to silence this thing, will try it again...\n\nPerhaps you've added it to junit4 task; it needs to go to the reporter node (because they're fairly independent components). "
        },
        {
            "id": "comment-14289309",
            "author": "Michael McCandless",
            "date": "2015-01-23T14:48:27+0000",
            "content": "Can we just remove tests.iters already now that we have 'ant beast'?\n\n+1 "
        },
        {
            "id": "comment-14289576",
            "author": "Hoss Man",
            "date": "2015-01-23T17:40:39+0000",
            "content": "Can we just remove tests.iters already now that we have 'ant beast'?\n\n-0\n\nIf you understand what you are doing, tests.iters can be really handy \u2013 particularly in cases where you have already figured out that a test failure only happens with certain master seeds, but the failures are timing/threading related and you want to do a lot of iterations.  using tests.iters lets you re-use the static initialization of the test and only loop over the test method itself.\n\nyes you can still re-run the same master seed over and over with beast, but you're doing a lot more teardown/setup and it takes a lot longer to do the same number of iterations.\n\nif folks want to remove tests.iters, i suggest bring that up for discussion in it's own issue \u2013 independent of if/when that is done, i still think the crux of this issue is relevant: there is no down side to includin the full seed in the reproduce line. "
        }
    ]
}