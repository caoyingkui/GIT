{
    "id": "SOLR-8075",
    "title": "Leader Initiated Recovery should not stop a leader that participated in an election with all of it's replicas from becoming a valid leader.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Currently, because of SOLR-8069, all the replicas in a shard can be put into LIR.\n\nIf you restart such a shard, the valid leader will will win the election and sync with the shard and then be blocked from registering as ACTIVE because it is in LIR.\n\nI think that is a little wonky because I don't think it even tries another candidate because the leader that cannot publish ACTIVE does not have it's election canceled.\n\nWhile SOLR-8069 should prevent this situation, we should add logic to allow a leader that can sync with it's full shard to become leader and publish ACTIVE regardless of LIR.",
    "attachments": {
        "SOLR-8075.patch": "https://issues.apache.org/jira/secure/attachment/12761334/SOLR-8075.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-20T15:07:34+0000",
            "author": "Mark Miller",
            "content": "Patch with some initial exploration. ",
            "id": "comment-14899964"
        },
        {
            "date": "2015-09-22T13:01:24+0000",
            "author": "Mark Miller",
            "content": "Okay, with this patch, if the proper leader still somehow ends up in LIR, on restart of the shard, if all replicas participate in an election, it will still become leader.\n\nI'll open another issue into why this test prevents leadership using a safety catch in publish. My worry with that is that it won't cancel the election, but that is a separate issue. ",
            "id": "comment-14902551"
        },
        {
            "date": "2015-09-23T13:39:56+0000",
            "author": "Mark Miller",
            "content": "New patch - last one missed my new test. ",
            "id": "comment-14904519"
        },
        {
            "date": "2015-09-23T13:47:03+0000",
            "author": "Mark Miller",
            "content": "One more, updated to trunk and cleaned up a bit. ",
            "id": "comment-14904531"
        },
        {
            "date": "2015-09-23T16:13:20+0000",
            "author": "Mark Miller",
            "content": "Patch getting ready for commit - adds a comment and only clears LIR if the leader is in LIR. ",
            "id": "comment-14904732"
        },
        {
            "date": "2015-09-24T20:35:00+0000",
            "author": "Mike Drob",
            "content": "Patch LGTM.\n\nOn commit, can you add a comment to waitForReplicasToComeUp explaining what the return value means? It makes sense now, but in six months I'm pretty sure I won't have a clue. ",
            "id": "comment-14906959"
        },
        {
            "date": "2015-10-03T19:41:54+0000",
            "author": "Mark Miller",
            "content": "I'll commit this shortly. ",
            "id": "comment-14942424"
        },
        {
            "date": "2015-10-04T04:38:57+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "+1 LGTM ",
            "id": "comment-14942551"
        },
        {
            "date": "2015-10-04T16:49:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1706699 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1706699 ]\n\nSOLR-8075: Leader Initiated Recovery should not stop a leader that participated in an election with all of it's replicas from becoming a valid leader. ",
            "id": "comment-14942712"
        },
        {
            "date": "2015-10-04T16:55:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1706701 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1706701 ]\n\nSOLR-8075: Leader Initiated Recovery should not stop a leader that participated in an election with all of it's replicas from becoming a valid leader. ",
            "id": "comment-14942715"
        },
        {
            "date": "2015-10-04T16:56:08+0000",
            "author": "Mark Miller",
            "content": "Thanks for taking a look guys. ",
            "id": "comment-14942716"
        },
        {
            "date": "2015-11-11T14:12:22+0000",
            "author": "Mark Miller",
            "content": "There appears to be some race or something here. We need to turn off LIR before we try and publish ACTIVE upon becoming the leader. The test must only pass because somehow the check beats the ACTIVE publish or something. ",
            "id": "comment-15000409"
        },
        {
            "date": "2015-11-11T14:26:35+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "How can I investigate / reproduce this? Is the LeaderInitiatedRecoveryOnShardRestartTest failing under certain circumstances? ",
            "id": "comment-15000428"
        },
        {
            "date": "2015-11-11T14:49:33+0000",
            "author": "Mark Miller",
            "content": "Patch with fix.\n\nHow can I investigate / reproduce this?\n\nDon't know. Saw it not working on a real cluster.\n\nI also saw the shard get stuck with no proper leader still due to the proper leader being in LIR. It seems LIR is still a little buggy. Fixing this should be one step towards alleviating that.\n\nI'm going to work on a test that indexes while restarting the whole cluster and see if I can reproduce some of those bugs. ",
            "id": "comment-15000452"
        },
        {
            "date": "2015-11-11T14:57:05+0000",
            "author": "Mark Miller",
            "content": "Hmm...this still needs a little tweaking I think. ",
            "id": "comment-15000465"
        },
        {
            "date": "2015-11-11T16:30:12+0000",
            "author": "Mark Miller",
            "content": "New patch. ",
            "id": "comment-15000604"
        },
        {
            "date": "2015-11-11T17:02:11+0000",
            "author": "Mark Miller",
            "content": "The latest patch also fixes LIR handling a bit. The way things worked were a little off.\n\nIf you were the first replica to attempt to be leader, LIR would never stop you early. Instead, things would fail when publish ACTIVE was attempted. That is not good, because it will probably prevent the next leader from trying to take over.\n\nSo I have moved all the LIR checking code in ElectionContext to a new spot. It's always checked, first attempted leader or not. And not until we see if the replica could be leader and if all the replicas participated in that election or not. ",
            "id": "comment-15000683"
        },
        {
            "date": "2015-11-12T20:33:36+0000",
            "author": "Mike Drob",
            "content": "Update looks good to me. I know you expanded the comments in checkLIR, but can you add a one-line note before the method is called with something to the effect of \"needs to happen synchronously before setLeader(true) to avoid rejection?\" ",
            "id": "comment-15002875"
        },
        {
            "date": "2015-11-12T20:42:41+0000",
            "author": "Mark Miller",
            "content": "It's not that it needs to happen before setLeader. The pertinent move it putting it above the super. call. ",
            "id": "comment-15002892"
        },
        {
            "date": "2015-11-12T20:49:55+0000",
            "author": "Mark Miller",
            "content": "Also, the logic here is changed. We now do LIR prevention checks in checkLIR as well. I think it clearly has to come before we declare being the leader. Previously, it was not a checkLIR call - it was logic to just possibly turn LIR off for that replica. ",
            "id": "comment-15002901"
        },
        {
            "date": "2015-11-12T20:51:41+0000",
            "author": "Mark Miller",
            "content": "I'll add a little comment above checkLIR: we must check LIR before registering as leader ",
            "id": "comment-15002905"
        },
        {
            "date": "2015-11-12T22:52:28+0000",
            "author": "Gregory Chanan",
            "content": "Patch looks good, thanks Mark!\n\nA comment outside the scope of this JIRA (I know this is pre-existing logic), but which I can't find a better place for:\n\n+          // We can do this before registering as leader because only setting DOWN requires that\n+          // we are leader, and here we are setting ACTIVE\n+          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n+              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n\n\n\nThis seems difficult to reason about given that there are multiple non-commutative writers potentially racing here: a leader setting DOWN and this node setting ACTIVE.  It would be easier to reason about if there were two states:\n1) leaders view of the world\n2) replicas view of the world (i.e. telling the Overseer I know the leader thinks I'm in LIR but I know some special information and I'm telling you for this election # I'm OK).  That could go in the ZKNodeProps sent to the Overseer (or a separate znode) and the Overseer could do the correct logic with it.\n\nAnyway, outside of the scope of the jira, just wanted to jot my thoughts down.  if you think this is a valid improvement I can file a jira for it. ",
            "id": "comment-15003133"
        },
        {
            "date": "2015-11-12T23:18:32+0000",
            "author": "Mark Miller",
            "content": "This node has to be the leader in the zk election line at this place it sets active - so there cannot be another valid leader. ",
            "id": "comment-15003174"
        },
        {
            "date": "2015-11-12T23:32:16+0000",
            "author": "Mark Miller",
            "content": "I'd file a JIRA issue to track the idea. It wouldn't be bad to tighten this up. ",
            "id": "comment-15003197"
        },
        {
            "date": "2015-11-12T23:39:55+0000",
            "author": "Gregory Chanan",
            "content": "This node has to be the leader in the zk election line at this place it sets active - so there cannot be another valid leader.\n\nAgreed, my point is just:\n1) that's true now, maybe not always true\n2) that's more to reason about, better to keep things as simple as possible, at least where state is concerned\n\nI'd file a JIRA issue to track the idea. It wouldn't be bad to tighten this up.\n\nWill do, thanks. ",
            "id": "comment-15003209"
        },
        {
            "date": "2015-11-13T13:40:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1714204 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1714204 ]\n\nSOLR-8075: Fix faulty implementation. ",
            "id": "comment-15003992"
        },
        {
            "date": "2015-11-13T13:45:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1714205 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1714205 ]\n\nSOLR-8075: Fix faulty implementation. ",
            "id": "comment-15003997"
        },
        {
            "date": "2015-12-09T16:03:45+0000",
            "author": "Mark Miller",
            "content": "Note that this needs SOLR-8367 to be complete. ",
            "id": "comment-15048886"
        }
    ]
}