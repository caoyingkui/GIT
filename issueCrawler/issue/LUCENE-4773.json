{
    "id": "LUCENE-4773",
    "title": "QueryParserBase should not throw ParseException in getPrefixQuery when termStr starts with *",
    "details": {
        "components": [
            "core/queryparser"
        ],
        "fix_versions": [],
        "affect_versions": "4.0,                                            4.1",
        "priority": "Minor",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The method getPrefixQuery of org.apache.lucene.queryparser.classic.QueryParserBase checks for leading *-wildcards:\n\n\nprotected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (!allowLeadingWildcard && termStr.startsWith(\"*\"))\n      throw new ParseException(\"'*' not allowed as first character in PrefixQuery\");\n    ...\n  }\n\n\n\nHowever, the passed termStr is already unescaped in handleBareTokenQuery(...):\n\n q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n\n\n\nTherefore, a search query like this one results in a ParseException, even though the first wildcard is escaped:\n\ntitle:\\*a*\n\n\n\nI don't think there is any sense in checking for leading wildcards in getPrefixQuery, as the passed termStr is already used literally, without paying attention to special characters at all.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}