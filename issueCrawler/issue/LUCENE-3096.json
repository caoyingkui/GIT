{
    "id": "LUCENE-3096",
    "title": "MultiSearcher does not work correctly with Not on NumericRange",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.1"
        ],
        "affect_versions": "3.0.2",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "Hi, Keith\n\nMy colleague xiaoyang and I just confirmed that this is actually due to a lucene bug on Multisearcher. In particular,\n\nIf we search with Not on NumericRange and we use MultiSearcher, we\nwill wrong search results (However, if we use IndexSearcher, the\nresult is correct).  Basically the NotOfNumericRange does not have\nimpact on multisearcher. We suspect it is because the createWeight()\nfunction in MultiSearcher and hope you can help us to fix this bug of\nlucene. I attached the code to reproduce this case. Please check it\nout.\n\nIn the attached code, I have two separate functions :\n\n(1) testNumericRangeSingleSearcher(Query query)\n    where I create 6 documents, with a field called \"id\"= 1,2,3,4,5,6\nrespectively . Then I search by the query which is\n    +MatchAllDocs -NumericRange(3,3). The expected result then should\nbe 5 hits since the document 3 is MUST_NOT.\n\n(2) testNumericRangeMultiSearcher(Query query)\n    where i create 2 RamDirectory(), each of which has 3 documents,\n1,2,3; and 4,5,6. Then I search by the same query as above using\nmultiSearcher. The expected result should also be 5 hits.\n\nHowever, from (1), we get 5 hits = expected results, while in (2) we\nget 6 hits != expected results.\n\nWe also experimented this with our zoie/bobo open source tools and get\nthe same results because our multi-bobo-browser is built on\nmulti-searcher in lucene.\n\n\nI already emailed the lucene community group. Hopefully we can get some feedback soon.\nIf you have any further concern, pls let me know! \n\nThank you very much!\n\n\nCode:  (based on lucene 3.0.x)\n\n\n\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.text.DecimalFormat;\n\nimport org.apache.lucene.analysis.WhitespaceAnalyzer;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.NumericField;\nimport org.apache.lucene.index.CorruptIndexException;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.Term;\n\nimport org.apache.lucene.search.BooleanQuery;\nimport org.apache.lucene.search.FieldCache;\nimport org.apache.lucene.search.IndexSearcher;\n\nimport org.apache.lucene.search.MatchAllDocsQuery;\nimport org.apache.lucene.search.MultiSearcher;\n\nimport org.apache.lucene.search.NumericRangeQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.Searchable;\nimport org.apache.lucene.search.Sort;\nimport org.apache.lucene.search.SortField;\nimport org.apache.lucene.search.TermQuery;\nimport org.apache.lucene.search.TopDocs;\n\nimport org.apache.lucene.search.BooleanClause.Occur;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.LockObtainFailedException;\n\nimport org.apache.lucene.store.RAMDirectory;\n\nimport com.convertlucene.ConvertFrom2To3;\n\npublic class TestNumericRange\n{\n public final static void main(String[] args)\n {\n   try\n\n   {\n     BooleanQuery query = new  BooleanQuery();\n     query.add(NumericRangeQuery.newIntRange(\"numId\", 3, 3, true,\ntrue), Occur.MUST_NOT);\n     query.add(new MatchAllDocsQuery(), Occur.MUST);\n\n     testNumericRangeSingleSearcher(query);\n     testNumericRangeMultiSearcher(query);\n\n   }\n   catch(Exception e)\n   {\n     e.printStackTrace();\n   }\n }\n\n\n\n public static void testNumericRangeSingleSearcher(Query query)\nthrows CorruptIndexException, LockObtainFailedException, IOException\n {\n    String[] ids = \n{\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"}\n;\n\n\n   Directory directory = new RAMDirectory();\n\n   IndexWriter writer = new IndexWriter(directory, new\nWhitespaceAnalyzer(),  IndexWriter.MaxFieldLength.UNLIMITED);\n\n   for (int i = 0; i < ids.length; i++)\n   {\n     Document doc = new Document();\n     doc.add(new Field(\"id\", ids[i],\n                       Field.Store.YES,\n                       Field.Index.NOT_ANALYZED));\n     doc.add(new NumericField(\"numId\").setIntValue(Integer.valueOf(ids[i])));\n     writer.addDocument(doc);\n   }\n   writer.close();\n\n\n   IndexSearcher searcher = new IndexSearcher(directory);\n\n   TopDocs docs = searcher.search(query, 10);\n   System.out.println(\"SingleSearcher: testNumericRange: hitNum: \" +\ndocs.totalHits);\n   for(ScoreDoc doc : docs.scoreDocs)\n   {\n     System.out.println(searcher.explain(query, doc.doc));\n   }\n   searcher.close();\n\n   directory.close();\n }\n\n public static void testNumericRangeMultiSearcher(Query query) throws\nCorruptIndexException, LockObtainFailedException, IOException\n {\n    String[] ids1 = \n{\"1\", \"2\", \"3\"}\n;\n   Directory directory1 = new RAMDirectory();\n   IndexWriter writer1 = new IndexWriter(directory1, new\nWhitespaceAnalyzer(),  IndexWriter.MaxFieldLength.UNLIMITED);\n   for (int i = 0; i < ids1.length; i++)\n   {\n     Document doc = new Document();\n     doc.add(new Field(\"id\", ids1[i],\n\n                       Field.Store.YES,\n                       Field.Index.NOT_ANALYZED));\n     doc.add(new NumericField(\"numId\").setIntValue(Integer.valueOf(ids1[i])));\n     writer1.addDocument(doc);\n   }\n   writer1.close();\n\n   String[] ids2 = \n{\"4\", \"5\", \"6\"}\n;\n   Directory directory2 = new RAMDirectory();\n   IndexWriter writer2 = new IndexWriter(directory2, new\nWhitespaceAnalyzer(),  IndexWriter.MaxFieldLength.UNLIMITED);\n   for (int i = 0; i < ids2.length; i++)\n   {\n     Document doc = new Document();\n     doc.add(new Field(\"id\", ids2[i],\n\n                       Field.Store.YES,\n                       Field.Index.NOT_ANALYZED));\n     doc.add(new NumericField(\"numId\").setIntValue(Integer.valueOf(ids2[i])));\n     writer2.addDocument(doc);\n   }\n   writer2.close();\n\n   IndexSearcher[] searchers = new IndexSearcher[2];\n   searchers[0] = new IndexSearcher(directory1);\n   searchers[1] = new IndexSearcher(directory2);\n   MultiSearcher multiSearcher = new MultiSearcher(searchers);\n   TopDocs docs = multiSearcher.search(query, 10);\n   System.out.println(\"MultiSearcher: testNumericRange: hitNum: \" +\ndocs.totalHits);\n   for(ScoreDoc doc : docs.scoreDocs)\n   {\n     System.out.println(multiSearcher.explain(query, doc.doc));\n   }\n   multiSearcher.close();\n\n   directory1.close();\n   directory2.close();\n }\n\n\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-14T07:21:09+0000",
            "content": "This is a well-known bug (LUCENE-2756), which is unfixable (query rewrite across different searchers is wrong) without totally changing the way how queries are rewritten.\n\nTo fix the bug, you should use a MultiReader on your IndexReaders and use a simple IndexSearcher on top of that MultiReader:\n\n\nIndexReader[] readers;\nreaders[0] = IndexReader.open(directory);\nreaders[1] = IndexReader.open(otherdirectory);\n...\nIndexSearcher searcher = new IndexSearcher(new MultiReader(readers));\n\n\n\nMultiSearcher and ParallelMultiSearcher were deprecated in 3.1 because of this and disappear in coming Lucene 4.0. ParallelMultiSearcher functionality is now available through IndexSearcher in 3.1 (it parallelizes across index segments, LUCENE-2837).\n\nI will close this as won't fix if nobody objects. ",
            "author": "Uwe Schindler",
            "id": "comment-13033478"
        },
        {
            "date": "2011-05-14T07:24:39+0000",
            "content": "This was also already reported and answered on the java-user@lao list: http://www.gossamer-threads.com/lists/lucene/java-user/123996 ",
            "author": "Uwe Schindler",
            "id": "comment-13033479"
        },
        {
            "date": "2011-05-14T11:30:54+0000",
            "content": "This is a duplicate of LUCENE-2756 and fixed by deprecating (3.1) and removing (4.0) broken (Parallel)MultiSearcher in favour of IndexSearcher on top of MultiReader. ",
            "author": "Uwe Schindler",
            "id": "comment-13033503"
        },
        {
            "date": "2011-05-14T11:34:12+0000",
            "content": "An alternative way to bypass this in 3.0 (without giving up to use MultiSearcher) is to set the rewrite mode of MultiTermQueries (like NumericRangeQuery) to CONSTANT_SCORE_REWRITE. But this only fixes the bug for those queries (as no BooleanQuery is used during rewrite).\n\nAlltogether, negative queries in MultiSearcher are broken and it depends on index contents if the bug actually affects search results. ",
            "author": "Uwe Schindler",
            "id": "comment-13033504"
        },
        {
            "date": "2011-05-16T05:20:23+0000",
            "content": "Thank you very much!\n\nXiaoyang ",
            "author": "Xiaoyang Gu",
            "id": "comment-13033878"
        },
        {
            "date": "2011-05-16T20:34:05+0000",
            "content": "Thanks! Uwe!\n ",
            "author": "hao yan",
            "id": "comment-13034289"
        },
        {
            "date": "2011-11-27T12:34:00+0000",
            "content": "Bulk close after release of 3.1 ",
            "author": "Uwe Schindler",
            "id": "comment-13157824"
        }
    ]
}