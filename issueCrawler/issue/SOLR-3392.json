{
    "id": "SOLR-3392",
    "title": "searcher leak when openSearcher=false",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It appears we have a searcher leak where SolrIndexSearcher instances are sometimes not being closed.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Dawid Weiss",
            "id": "comment-13258916",
            "date": "2012-04-21T18:51:03+0000",
            "content": "Are you talking about the \"searchers opened: N, closed: N - Y\" errors? This has been relatively frequent but I couldn't reproduce. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13258919",
            "date": "2012-04-21T18:55:48+0000",
            "content": "While trying to reproduce the file descriptor leak that Sami and others have reported, I went to\nhttp://localhost:8983/solr/#/singlecore/plugins/core\nand noticed that I had 4 open SolrIndexSearcher instances - which means we have a searcher leak somehow.\n\nI'm still trying to track down exactly what's causing it, and why none of our tests catch it (and all of our tests check the number of opens/closes of SolrIndexSearcher instances) "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13258920",
            "date": "2012-04-21T18:59:50+0000",
            "content": "and why none of our tests catch it \n\nBut they do? There were a number of failures when the number of closes/opens mismatched and failed the build. Maybe I don't understand what you mean. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13258924",
            "date": "2012-04-21T19:02:29+0000",
            "content": "This one is quite old, I just found it first \u2013 \n\nbuild\t14-Apr-2012 06:17:47\t    [junit] 149810 T1 oas.SolrTestCaseJ4.endTrackingSearchers SEVERE ERROR: SolrIndexSearcher opens=70 closes=69\n\n\n\nI always assumed this is something to worry about but never could reproduce it with the same seed. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13258929",
            "date": "2012-04-21T19:08:38+0000",
            "content": "But they do? There were a number of failures when the number of closes/opens mismatched and failed the build.\n\nThose normally don't fail on my box - just our Jenkins box which is really slow + has weird stuff like blackhole configured.  Talking to Mark, it sounds like the cause of those open/close searcher mismatches are because another thread is still running (like a recovery/replication thread) and still has a searcher open (hence it doesn't look like a searcher management bug).\n\nThe type of bug I'm looking at would be a searcher management bug not related to thread safety and should be 100% reproducible. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13258932",
            "date": "2012-04-21T19:13:27+0000",
            "content": "Those normally don't fail on my box - just our Jenkins box which is really slow +\n\nOk, thanks for clarification. Those I mentioned happened on our server where I was running Lucene tests for some time too (and that isn't slow). But maybe they were side effects of something else. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13259089",
            "date": "2012-04-22T15:08:46+0000",
            "content": "I just committed a fix - it was a really simple silly bug. When openSearcher=false, we requested a new searcher but then never decremented it when we were done.  Although the getSearcher() code itself had good test coverage (that's the more complicated code I was worried about), the caller in this specific case (DirectUpdateHandler2) did not. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13259159",
            "date": "2012-04-22T16:01:55+0000",
            "content": "https://builds.apache.org/job/Lucene-Solr-tests-only-trunk/13383/consoleText\n\nJust a note \u2013 a recent build with \"SolrIndexSearcher opens=74 closes=73\" mismatch (suite level). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13259164",
            "date": "2012-04-22T16:21:46+0000",
            "content": "\n   [junit4]    > (@AfterClass output)\n   [junit4]   2> 35484 T1048 oash.SnapPuller.fetchLatestIndex SEVERE Master at: http://localhost:40685/solr/replication is not available. Index fetch failed. Exception: Connect to localhost:40685 timed out\n   [junit4]   2> 153931 T846 oas.SolrTestCaseJ4.endTrackingSearchers SEVERE ERROR: SolrIndexSearcher opens=74 closes=73\n\n\n\nIt's often the case that an earlier failure can cause tests to abort in such ways that not everything is cleaned up and you'll also see a searcher mismatch error.\n\nPerhaps there's a way to tell if a test has already failed, then this open/closed searcher test can be skipped? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13259165",
            "date": "2012-04-22T16:26:22+0000",
            "content": "I think LuceneTestCase.testsFailed boolean variable should work?\n\nLuceneTestCase.afterClass uses this logic too, for the same reason. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13259174",
            "date": "2012-04-22T16:40:01+0000",
            "content": "Perhaps there's a way to tell if a test has already failed, then this open/closed searcher test can be skipped?\n\nWhat Robert pointed to is ok. The \"nicest\" way to cleanup-on-success only is to write a test rule and cleanup/ make assertions if the sub-statement passes without throwing an exception. @Before*/After* hooks are always executed, regardless of the test output (failure or no failure).\n\nI realize the number of nested stack entries from rules can bother some, but it is really a clean separation of concerns and the ordering is then explicit (both in the code and at runtime) which is nice.\n\nI'm not asking you to fix this \u2013 I will be biting into LuceneTestCase at some point (have some urgent stuff piled up right now) and I will try to clean up @Before/@After* hooks as well so that they're not a single blob of various checks and things. "
        }
    ]
}