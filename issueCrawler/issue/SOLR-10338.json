{
    "id": "SOLR-10338",
    "title": "Configure SecureRandom non blocking for tests.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It would be best if SecureRandom could be made non blocking. In that case we could get rid of random entropy exhaustion issue related to all usages of SecureRandom.",
    "attachments": {
        "SOLR-10338.patch": "https://issues.apache.org/jira/secure/attachment/12859898/SOLR-10338.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-22T08:36:42+0000",
            "content": "I experienced that setting java.security.egd to file:/dev/./urandom removes the blocking nature of SecureRandom. It changes the default secure random generator algorithm to SHA1PRNG. It also makes NativePRNG being fed from /dev/urandom instead of /dev/random. \n\nUnfortunately all this is done once, when Sun security provider is loaded. So running code 1 and 2 below (in itself) will result SHA1PRNG and NativePRNG respectively. \n\ncode 1\n\nSystem.setProperty(\"java.security.egd\",\"file:/dev/./urandom\");\nSecureRandom secureRandom = new SecureRandom();\nprintln(secureRandom.getAlgorithm());\n\u2028\n\n\ncode 2\n\nnew SecureRandom();\nSystem.setProperty(\"java.security.egd\",\"file:/dev/./urandom\");\nSecureRandom secureRandom = new SecureRandom();\nprintln(secureRandom.getAlgorithm());\u2028\n\n\n\nBecause of the above, setting the system property from code may not prevent from other code parts (that precedes this setting in execution) to initialize Sun provider as a side effect. More reliable ways to bootstrap Sun provider with our system property is that if we already do it when starting the JVM. I have attached a patch that does this for all unit tests executed from ant. I have also included a test that reads a bigger chunk of random data from SecureRandom and that it returns in a timely fashion. In addition it checks if the default algorithm is SHA1PRNG. This may be a questionable assert but for the time being we could set it up to make sure all the executions are made non-blocking.\n\nI have also experienced that setting the above system property will indeed change the blocking nature of even NativePRNG as it really reads from /dev/urandom. So no code relies on the default algorithm or even on NativePRNG should not experience any blocking.\n\nI have also attached a \u201ctool\u201d with which I could experiment on a machine with limited entropy. It is a simple java application that gets a SecureRandom instance and invokes a function on it where the algorithm, the function and the amount of data are program arguments. Here are my invocations:\n\n\n[root@misi tmp]# for i in {0..100000}; do echo round $i; date +%X; java -cp \".\" -Djava.security.egd=file:/dev/./urandom SecureRandomAlgorithmTesterApp default seed 1000; done >>seed.log &\n[root@misi tmp]# for i in {0..100000}; do echo round $i; date +%X; java -cp \".\" -Djava.security.egd=file:/dev/./urandom SecureRandomAlgorithmTesterApp default bytes 1000; done >>bytes.log &\n[root@misi tmp]# for i in {0..100000}; do echo round $i; date +%X; java -cp \".\" SecureRandomAlgorithmTesterApp default seed 100; done >>seed-no-sysprop.log &\n[root@misi tmp]# for i in {0..100000}; do echo round $i; date +%X; java -cp \".\" -Djava.security.egd=file:/dev/./urandom SecureRandomAlgorithmTesterApp NativePRNG seed 1000; done >>seed-nativeprng.log &\n[root@misi tmp]# for i in {0..100000}; do echo round $i; date +%X; java -cp \".\" SecureRandomAlgorithmTesterApp NativePRNG seed 1000; done >>seed-nativeprng-no-sysprop.log &\n\n\n\nI could see in the *-no-sysprop.log files that the requested random functionality was blocked. All the rest just generated random data very fast. Based on this I could conclude that entropy got exhausted on the machine but with the property set random number and seed could still be generated.\n\nPlease let me know your thoughts on this. ",
            "author": "Mihaly Toth",
            "id": "comment-15935919"
        },
        {
            "date": "2017-03-22T09:40:56+0000",
            "content": "Fixed patch format ",
            "author": "Mihaly Toth",
            "id": "comment-15935994"
        },
        {
            "date": "2017-03-23T15:22:09+0000",
            "content": "Should we change the usage of UUID.randomUUID() to StringHelper.randomId() (and possibly add UUID.randomUUID() to forbidden API)? \n\nReference: https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/util/StringHelper.java#L313-L315 ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15938559"
        },
        {
            "date": "2017-03-23T17:41:51+0000",
            "content": "I have attached a patch that does this for all unit tests executed from ant. \n\nIs there a similar change we can make to help people running tests from maven? (and the IDEs that we have project starter files for in dev-tools?)\n\nIn addition it checks if the default algorithm is SHA1PRNG. This may be a questionable assert but for the time being we could set it up to make sure all the executions are made non-blocking.\n\nFor testing purposes asserting that \"SHA1PRNG\" is always used by the JVM (for example: in a SolrTestCaseJ4 @BeforeClass method) seems like an idea worth considering ... if for no other reason then it should help improve randomized seed reproducibility across diff JVMs ... we could always have support for something like a test.solr.allow.any.securerandom=true sys prop that users could set to override this assert.\n\nShould we change the usage of UUID.randomUUID() to StringHelper.randomId() (and possibly add UUID.randomUUID() to forbidden API)? \n\nforbidding the use of UUID.randomUUID() in test code might be worth considering for the reasons outlined in StringHelper.randomId() javadocs \u2013 but i don't think it should be forbidden in all solr code ... in production you want things like UUIDField and UUIDUpdateProcessorFactory to actaully produce \"good\" UUID values. ",
            "author": "Hoss Man",
            "id": "comment-15938874"
        },
        {
            "date": "2017-03-23T17:56:13+0000",
            "content": "forbidding the use of UUID.randomUUID() in test code might be worth considering for the reasons outlined in StringHelper.randomId() javadocs \u2013 but i don't think it should be forbidden in all solr code ... in production you want things like UUIDField and UUIDUpdateProcessorFactory to actaully produce \"good\" UUID values.\n\nAgreed.\n\nMaybe, this is off-topic (and we can open a separate issue for dealing with this) \u2013 How about adding a warning in the startup script for Linux, if the output of the following is below a certain threshold? The warning could indicate that features like UUIDField, SSL etc. might not work properly (or be slow). As a hint, we could then suggest the user to configure a non blocking SecureRandom (or install rng-tools, haveged etc.).\n\n\ncat /proc/sys/kernel/random/entropy_avail\n\n\n\nOn my laptop, the output was 3308, but on a VPS, it was 134.\n ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15938904"
        },
        {
            "date": "2017-03-23T18:01:04+0000",
            "content": "Maybe, this is off-topic (and we can open a separate issue for dealing with this) \u2013 How about adding a warning...\n\ndefinitely seems worth discussing (in a new issue) ... I imagine there are lots of things like that we could put into a sanity check script/command line option (or new UI dashboard screen) ",
            "author": "Hoss Man",
            "id": "comment-15938914"
        },
        {
            "date": "2017-03-23T18:22:19+0000",
            "content": "Added SOLR-10352. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15938955"
        },
        {
            "date": "2017-03-23T18:55:37+0000",
            "content": "Is there a similar change we can make to help people running tests from maven? (and the IDEs that we have project starter files for in dev-tools?)\n\nGood point, thank you. Those files just avoided my attention. Yes, I guess we should update them too. In maven we can add a system property to the surefire and the failsafe plugin in the lucene-solr-grandparent pom template, like:\n\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>2.17</version>\n        <configuration>\n          ...\n          <systemPropertyVariables>\n            <java.security.egd>file:/dev/./urandom</java.security.egd>\n            ...\n          </systemPropertyVariables>\n        </configuration>\n      </plugin>\n\n\n\nAs far as the IDEs concerned, we could also do that. Probably this is not that much of a pain as the ant setting, because on your desktop you usually have just enough entropy and you run only parts of the test suite at once. Anyway, I will have a look at it tomorrow how to update Eclipse and Idea templates.\n\nFor testing purposes asserting that \"SHA1PRNG\" is always used by the JVM (for example: in a SolrTestCaseJ4 @BeforeClass method) seems like an idea worth considering ... if for no other reason then it should help improve randomized seed reproducibility across diff JVMs ... we could always have support for something like a test.solr.allow.any.securerandom=true sys prop that users could set to override this assert.\n\nThat @BeforeClass approach is much stricter. This would mean that if the flag is not set, all Solr tests fail, and the output of the test run will become useless. Maybe a single test is just enough as an indicator test. Or are you thinking of failing the tests fast and to prevent false negative tests?\n\nHow about adding a warning in the startup script for Linux\n\nThis sounds like a good idea to me too. Let me give some comments on this in SOLR-10352. ",
            "author": "Mihaly Toth",
            "id": "comment-15939025"
        },
        {
            "date": "2017-03-23T19:08:33+0000",
            "content": "As far as the IDEs concerned, we could also do that. Probably this is not that much of a pain as the ant setting, because on your desktop you usually have just enough entropy and you run only parts of the test suite at once. \n\nThat @BeforeClass approach is much stricter. This would mean that if the flag is not set, all Solr tests fail, and the output of the test run will become useless. Maybe a single test is just enough as an indicator test. Or are you thinking of failing the tests fast and to prevent false negative tests?\n\nIn both cases i am specifically thinking about failing fast \u2013 regardless of how the tests are run \u2013 to help ensure that we don't get false negatives from tests because people don't have enough entroy AND are somehow running the test in a way that avoids our efforts at \"reproducibility\" in what the source of entropy is. (so that there should always be enough entroy) ",
            "author": "Hoss Man",
            "id": "comment-15939047"
        },
        {
            "date": "2017-03-23T19:13:17+0000",
            "content": "I am convinced. ",
            "author": "Mihaly Toth",
            "id": "comment-15939055"
        },
        {
            "date": "2017-03-24T19:17:00+0000",
            "content": "Good discussion on this, I don't have much to add at the moment. Hoss Man or Ishan Chattopadhyaya, feel free to grab this issue. Otherwise I'll wait and take a look at the next patch. ",
            "author": "Mark Miller",
            "id": "comment-15940974"
        },
        {
            "date": "2017-03-27T17:52:53+0000",
            "content": "Mihaly Toth, can you prepare a new patch with these additional changes? If it makes sense, we can just roll SOLR-10352 into this issue as well. ",
            "author": "Mark Miller",
            "id": "comment-15943724"
        },
        {
            "date": "2017-03-27T21:19:29+0000",
            "content": "Sure, Mark Miller. I was testing my changes in dev-tools. I believe the most important part is done, I have added it to maven. Idea config is also done. For Eclipse, I could not find a single place where I could add it. For Netbeans, it is \"background scanning\" the application, and it seems like it takes ages... ",
            "author": "Mihaly Toth",
            "id": "comment-15944063"
        },
        {
            "date": "2017-03-28T00:10:32+0000",
            "content": "If we are using a non-blocking source for the random number generator, I don't think we need to check entropy or warn about it.  It seems that people who really understand what's going on say that the non-blocking source is preferred over the blocking source for all production usage, and only hardcore crypto researchers are likely to need the blocking source.\n\nIn my own development efforts outside of Solr, I have seen that when a Tomcat server starts up, configuring \"/dev/./urandom\" for the java random source can reduce the startup by ten to fifteen seconds. ",
            "author": "Shawn Heisey",
            "id": "comment-15944277"
        },
        {
            "date": "2017-03-28T14:22:24+0000",
            "content": "Shawn Heisey, I tend to agree with this approach. Your comment seems to be more related to SOLR-10352. That one is already closed, so I am a bit unsure how to continue (new Jira, mailing list discussion ?). Mark Miller, Hoss Man, Ishan Chattopadhyaya can you please advise here? Actually, I see 3 alternatives on the startup:\n\n\tWarning in case of shortage of entropy\n\tFixed /dev/urandom, no warning\n\tOverwritable default /dev/urandom with warning if configured source is short of entropy (in case some user disagree with our thinking and would like to use /dev/random)\n\n\n\nAnyway, no matter what the startup script does the unit tests are not started with it. So the changes in the patch are required here... Actually I forgot to explicitly mention in my previous comment that I have uploaded a new patch with the changes mentioned. ",
            "author": "Mihaly Toth",
            "id": "comment-15945251"
        },
        {
            "date": "2017-03-28T15:47:19+0000",
            "content": "so I am a bit unsure how to continue\n\nIf you already have support from someone for an idea, I'd just create a new JIRA issue and link it to the old one. Unless the old JIRA has not been released, in those cases you will generally reopen it. If you have no one discussing with you, and you question what you want to do, perhaps a dev list discussion, but I don't think that is needed here.\n\nsay that the non-blocking source is preferred over the blocking source for all production usage\n\nIs that true? Don't we want the real deal for production SSL? ",
            "author": "Mark Miller",
            "id": "comment-15945420"
        },
        {
            "date": "2017-03-28T16:20:08+0000",
            "content": "\nA read from the /dev/urandom device will not block waiting for more entropy.  If there is not sufficient  entropy,  a  pseudorandom  number generator  is  used to create the requested bytes.  As a result, in this case the returned values are theoretically vulnerable to a crypto\u2010graphic attack on the algorithms used by the driver.\n\n\nHere's an excerpt from the man random page in GNU/Linux. Given this, I'd be reluctant to make the /dev/urandom as the default. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15945467"
        },
        {
            "date": "2017-03-28T16:44:49+0000",
            "content": "\nIf we are using a non-blocking source for the random number generator, I don't think we need to check entropy or warn about it. It seems that people who really understand what's going on say that the non-blocking source is preferred over the blocking source for all production usage, and only hardcore crypto researchers are likely to need the blocking source.\n\nIn my own development efforts outside of Solr, I have seen that when a Tomcat server starts up, configuring \"/dev/./urandom\" for the java random source can reduce the startup by ten to fifteen seconds.\n\nshawn: i feel like you are convoluting 3 distinct questions/ideas...\n\n\n\toverriding SecureRandom in tests ... which is what this current issue is about.  In a test situation, there is no downside (that i can think of) in forcing a particular source of \"randomness\" \u2013 and in most cases forcing a \"consistent\" use of randomness is a good idea to improve reproducibility.  In general in our unit tests, we're also already specifically not concerned with having truly \"secure\" randomness (see SSL parent issue SOLR-5776)\n\toverriding SecureRandom in production code ... this is a much sensitive situation.  we should be very careful about arbitrarily deciding that bin/solr should override the source of secure randomness since that could cause security holes in SSL and security features that rely on encryption.\n\twarning the user about low entropy ... regardless of what entropy source is being used, which is what the (original) point of SOLR-10352 was.\n\n\n\nWe should keep these issues/discussions isolated and discrete.  Choices we make regarding our test scaffolding (which may be fundamentally insecure, but helpful for speed) are not necessarily the same choices we want to make in our end user production scripts. ",
            "author": "Hoss Man",
            "id": "comment-15945523"
        },
        {
            "date": "2017-03-29T13:10:18+0000",
            "content": "Hoss Man, sounds like an excellent categorization of decisions/implementations to be made. That means case 1, 3 has already a Jira already associated (case 1 is this issue). I have created SOLR-10385 for case 2 but feel free to propose to reject it or move it to a discussion thread instead if you feel so. ",
            "author": "Mihaly Toth",
            "id": "comment-15947078"
        },
        {
            "date": "2017-03-29T13:13:47+0000",
            "content": "As far as the tests concerned, here is an updated patch where the check is moved to the beginning of SolrTestCaseJ4 as discussed above. ",
            "author": "Mihaly Toth",
            "id": "comment-15947085"
        },
        {
            "date": "2017-03-29T19:49:39+0000",
            "content": "Looks pretty good to me. I poked around for an eclipse option as well but also did not see anything good. If there are no objections I'll commit this soon. ",
            "author": "Mark Miller",
            "id": "comment-15947783"
        },
        {
            "date": "2017-03-31T14:53:29+0000",
            "content": "Commit 0445f8200e0630e1bb8b7117f200529ed1259747 in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0445f82 ]\n\nSOLR-10338: Configure SecureRandom non blocking for tests. ",
            "author": "ASF subversion and git services",
            "id": "comment-15951056"
        },
        {
            "date": "2017-03-31T15:01:25+0000",
            "content": "Commit d37570cdc67d08e6c1e3b4ec00a67971846a86bd in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d37570c ]\n\nSOLR-10338: Configure SecureRandom non blocking for tests. ",
            "author": "ASF subversion and git services",
            "id": "comment-15951080"
        },
        {
            "date": "2017-03-31T15:02:17+0000",
            "content": "Thanks everyone! ",
            "author": "Mark Miller",
            "id": "comment-15951083"
        },
        {
            "date": "2017-04-03T17:41:09+0000",
            "content": "Jekinks JDK9 builds are freaking out over this change...\n\n\n765 tests failed.\nFAILED:  junit.framework.TestSuite.org.apache.solr.analysis.TestFoldingMultitermExtrasQuery\n\nError Message:\nexpected:<[SHA1PRN]G> but was:<[DRB]G>\n\nStack Trace:\norg.junit.ComparisonFailure: expected:<[SHA1PRN]G> but was:<[DRB]G>\n        at __randomizedtesting.SeedInfo.seed([C3B5A016F8A4D7E1]:0)\n        at org.junit.Assert.assertEquals(Assert.java:125)\n        at org.junit.Assert.assertEquals(Assert.java:147)\n        at org.apache.solr.SolrTestCaseJ4.assertNonBlockingRandomGeneratorAvailable(SolrTestCaseJ4.java:2440)\n\n\n\nMark Miller - i think we need to roll this back and re-consider? (i suspect we just need to tweak the assert to accept some new options, but rollback seem appropriate until we have time for more testing) ",
            "author": "Hoss Man",
            "id": "comment-15953893"
        },
        {
            "date": "2017-04-03T19:13:41+0000",
            "content": "Yup, sorry away for the weekend. I'll take a look.  ",
            "author": "Mark Miller",
            "id": "comment-15954030"
        },
        {
            "date": "2017-04-04T01:00:31+0000",
            "content": "Commit 0bf7a5ff335d2825a014862f5d04e70a7f5c016e in lucene-solr's branch refs/heads/master from Mark Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0bf7a5f ]\n\nSOLR-10338: Revert configure SecureRandom non blocking for tests. (reverted from commit 0445f8200e0630e1bb8b7117f200529ed1259747) ",
            "author": "ASF subversion and git services",
            "id": "comment-15954428"
        },
        {
            "date": "2017-04-04T01:02:35+0000",
            "content": "Commit 4f028dfb47afe3ea30bf52b3baf792c9e10364f8 in lucene-solr's branch refs/heads/branch_6x from Mark Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4f028df ]\n\nSOLR-10338: Revert configure SecureRandom non blocking for tests. (reverted from commit 0445f8200e0630e1bb8b7117f200529ed1259747) ",
            "author": "ASF subversion and git services",
            "id": "comment-15954430"
        },
        {
            "date": "2017-04-04T01:05:18+0000",
            "content": "In the interim, it is possible to increase the Jenkins boxes' entropy by installing rng-tools or haveged to speed up the SSL tests. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15954436"
        },
        {
            "date": "2017-04-04T09:13:10+0000",
            "content": "Sorry, next time I will have a closer look on the test failures ...\n\nThe assert is not very perfect indeed. In its current state it is sensitive for changes and not really for failure. And now that a new recommendation is implemented in JDK 9 the assert failed without a real bug.\n\nThe real test is that there is enough random available within reasonable time. I am now testing a fix locally that takes 100 bytes seed and 500 random bytes and checks that the result is available within a few seconds. On my local machine this takes 0.3-0.4 seconds, which can be considered negligible compared to the overall execution time of a test case. And on low entropy servers this assert will hit if ran in blocking mode.\n\nAn alternative would be to change the assert that the algorithm is not NativePRNG. That would be fast but would still not test the real need. ",
            "author": "Mihaly Toth",
            "id": "comment-15954874"
        },
        {
            "date": "2017-04-04T09:14:18+0000",
            "content": "Until the tests get fixed I reopen the issue. ",
            "author": "Mihaly Toth",
            "id": "comment-15954876"
        },
        {
            "date": "2017-04-04T14:06:10+0000",
            "content": "How about such a fix? In case randomness is blocking Solr tests will time out. ",
            "author": "Mihaly Toth",
            "id": "comment-15955170"
        },
        {
            "date": "2017-04-04T15:02:24+0000",
            "content": "Don't sweat it Mihaly Toth, things like Java 9 issues are what we have Jenkins to catch at this point in time.  ",
            "author": "Mark Miller",
            "id": "comment-15955224"
        },
        {
            "date": "2017-04-05T10:20:28+0000",
            "content": "Ok, Mark Miller \n\nJust noticed that the new patch I uploaded was not linked with my previous comment. So please note that there is a new patch with a proposed fix. ",
            "author": "Mihaly Toth",
            "id": "comment-15956629"
        },
        {
            "date": "2017-04-14T13:48:34+0000",
            "content": "Thanks Mihaly Toth, let me see about getting Java 9 installed so I can test. ",
            "author": "Mark Miller",
            "id": "comment-15969060"
        },
        {
            "date": "2017-04-17T16:41:38+0000",
            "content": "Well, this works with Java9 for me. I'll spend just a bit more time with it before I commit. ",
            "author": "Mark Miller",
            "id": "comment-15971318"
        },
        {
            "date": "2017-04-17T18:08:38+0000",
            "content": "Hmm, I seem to see more flakey fails with Java 9, but initially doesn't look related to https. ",
            "author": "Mark Miller",
            "id": "comment-15971426"
        },
        {
            "date": "2017-04-17T19:27:44+0000",
            "content": "Thanks Mark Miller. Let me know if there is anything I should investigate further. ",
            "author": "Mihaly Toth",
            "id": "comment-15971526"
        },
        {
            "date": "2017-04-19T00:21:03+0000",
            "content": "I don't think we should have tests that assert something happens \"fast enough\" ... past experience shows that leads nothing but pain.\n\nI think for a check like this, it's fine to just be more permissive about the expected types of non-blocking algorithms we might encounter \u2013 as long as there's an easy work around for people on a the bleeding edge of new/alternative JVMs.\n\nhow about something like ...\n\n\n    final String egdfile = System.getProperty(\"java.security.egd\");\n    final String allowed = System.getProperty(\"test.solr.allowed.securerandom\");\n    \n    // NOTE: we're checking egdfile *BEFORE* we init a SecureRandom, since we want this check to\n    // be as fast as possible, and if it's not correct, the SecureRandom constructor might block and slow us down\n    if (null == allowed) {\n      assertEquals(\"Solr tests expect a non-blocking SecureRandom to be configured. \" +\n                   \"Use -Djava.security.egd=file:/dev/./urandom as a JVM option when running tests to bypass this check.\",\n                   \"file:/dev/./urandom\", egdfile);\n    }\n\n    final String actual = (new SecureRandom()).getAlgorithm();\n    \n    if (null != allowed) {\n      assertEquals(\"SecureRandom algorithm does not match the specified -Dtest.solr.allowed.securerandom=\" + allowed + \" JVM option. \" +\n                   \"Set -Djava.security.egd=... accordingly, or remove the test.solr.allowed.securerandom option\",\n                   allowed, actual);\n    } else {\n      assertTrue(\"SecureRandom algorithm '\"+actual+\"' is in use by your JVM, \" +\n                 \"but does not match any of the known non-blocking algorithms that are expected. \" +\n                 \"Please report the details of this failure (and your JVM vendor/version) to solr-user@lucene.apache.org. \" +\n                 \"You can bypass this check in the meantime by specifying -Dtest.solr.allowed.securerandom=\" +\n                 actual + \" as a JVM option when running tests.\",\n                 // be permissive in our checks to try and account for future variations\n                 (actual.contains(\"NonBlocking\") || actual.contains(\"SHA\") || actual.contains(\"DRBG\")));\n    }\n\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-15973787"
        },
        {
            "date": "2017-04-20T07:34:12+0000",
            "content": "Even though generating a random number is pretty fast in case it is nonblocking... but I agree that the tests would be more deterministic with just checking the algorithm, and less prone to timing issues. So lets do that.\n\nAn additional enhancement proposed by Mano Kovacs is to try to set java.security.egd if it is unset. This would try to set the algorithm to non blocking on a best effort basis. Like:\n\n    if (null == allowed) {\n      if(egdfile == null)\n        System.setProperty(\"java.security.egd\", \"file:/dev/./urandom\");\n      else\n        assertEquals(\"Solr tests expect a non-blocking SecureRandom to be configured. \" +\n                     \"Use -Djava.security.egd=file:/dev/./urandom as a JVM option when running tests to bypass this check.\",\n            \"file:/dev/./urandom\", egdfile);\n    }\n\n\n\nWhat do you think? ",
            "author": "Mihaly Toth",
            "id": "comment-15976243"
        },
        {
            "date": "2017-04-24T23:46:12+0000",
            "content": "... try to set java.security.egd if it is unset. ...\n\noff the top of my head, I suspect that won't work at all because IIRC the java.security.* sysprops are all read on JVM startup as part of initializing the SecurityManager.  So it most likely won't have any effect other then to confuse any subsequent Solr test-framework specific code that may try to read that sysprop to sanity check things.\n(And even if it does work today, I don't know that the JVM spec guarantees it will work with future versions of the JVM tomorrow.)\n\nIf any part of the spec does guarantee that it can/will work, then we should should use only that approach to set \"java.security.egd\" on test startup (via a static block somewhere) and skip all the changes to our build.xml, eclipse/IDEA configs, etc... ",
            "author": "Hoss Man",
            "id": "comment-15982128"
        },
        {
            "date": "2017-05-01T21:05:31+0000",
            "content": "I also was a little skeptical of the timed checking but was focusing on whether the patch worked alright first.\n\nHave another iteration Mihaly Toth? ",
            "author": "Mark Miller",
            "id": "comment-15991522"
        },
        {
            "date": "2017-05-02T20:09:36+0000",
            "content": "Yes, let me try again. \n\nHoss Man Let me do some testing around that tomorrow. ",
            "author": "Mihaly Toth",
            "id": "comment-15993634"
        },
        {
            "date": "2017-05-03T17:40:26+0000",
            "content": "I tried again setting java.security.egd from a class itself. It is possible to set it, and it does have an effect on the algorithm selected given that the Sun security provider is loaded after that. Please see my opening comment on this Jira for code snippets.\n\nSo I believe it is possible. The other question is if it is needed. The only motivation now are other projects that are depending on SolrTestCaseJ4. With setting the property if it is unset, there is a chance that those projects are not broken.\n\nIn Solr test however I would not rely solely on this solution because this is not bullet proof. If any other test not subclassing SolrTestCaseJ4 AND using directly or indirectly SecureRandom would run before SolrTestCaseJ4 subclassed tests then all these later tests would fail. This is because the algorithm is decided on first usage of SecureRandom. I did a test run having only setting the property in setup and I have got couple of failures.\n\nThe attached patch uses test.solr.allow.any.securerandom system property to allow validation of the algorithm defaulting to true. In case of algorithm verification I blacklisted NativePRNG and NativePRNGBlocking. According to https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SUNProvider those are the algorithms using /dev/random in one way or another. \n\nRegarding the question on how stable it is to overwrite this property from code I found no mentioning of any limitation where the property could be set. Among other page I read the javadoc of https://github.com/frohoff/jdk8u-jdk/blob/master/src/solaris/classes/sun/security/provider/NativePRNG.java . So I do not think this behaviour would change in any future versions of Java 8. NativePRNG in Java 9 is only a skeleton implementation. And we have the test suite as a last resort to tell if such unexpected event occured. ",
            "author": "Mihaly Toth",
            "id": "comment-15995288"
        },
        {
            "date": "2017-05-05T11:22:21+0000",
            "content": "Hoss Man, Mark Miller do you have any comments, feedback, thoughts on this comment or on the proposed change? ",
            "author": "Mihaly Toth",
            "id": "comment-15998182"
        },
        {
            "date": "2017-05-16T17:09:31+0000",
            "content": "Sorry, been on vacation. Have a ton to catch up on, but I'll keep this high on my priority list. ",
            "author": "Mark Miller",
            "id": "comment-16012739"
        },
        {
            "date": "2017-05-22T15:51:01+0000",
            "content": "I'm looking at the latest here again today. ",
            "author": "Mark Miller",
            "id": "comment-16019725"
        },
        {
            "date": "2017-05-23T17:18:25+0000",
            "content": "I like this approach. I have to finish testing it, mostly with Java 9, but I like this. Any concerns Hoss Man? ",
            "author": "Mark Miller",
            "id": "comment-16021502"
        },
        {
            "date": "2017-05-23T18:01:46+0000",
            "content": "no major concerns.\n\nminor concerns...\n\n\n\tthe log.info about java.security.egd being null should probably be a warning\n\t\n\t\tshouldn't there also be a warning if java.security.egd is non-null but not equals to \"file:/dev/./urandom\" ?\n\t\n\t\n\tshouldn't the very first thing in the assertion failure message be a suggestion to try setting  -Djava.security.egd=file:/dev/./urandom and only if that doesn't work use the test.solr.... property to disable these checks?\n\tI'd feel more comfortable with something like the final String allowed = System.getProperty(\"test.solr.allowed.securerandom\"); and associated validation/logging in the snipped i suggested above (instead of a simple Boolean.parseBoolean(System.getProperty(\"test.solr.allow.any.securerandom\",\"false\"))\n\t\n\t\tsame amount of work from an end user to bypass the checks (add 1 sys prop they cut and past from failure msg)\n\t\twould help ensure that if/when they do bypass with that system property, they'll get an error to revisit that decision if/when something happens to change the SecureRandom in the future (ie: perhaps later upgrade their JVM, or change how they run the tests such that our attempts at setting \"java.security.egd\" start working)\n\t\tie: i'd rather they get a nice error that they said they expect to be running algortihm=foo, but it's not so maybe they should remove the \"test.solr.allowed.securerandom\" and try setting \"java.security.egd\" again then just silently be using a blocking SecureRandom forever.\n\t\n\t\n\teven if nothing else changes, the quick return if the user has disabled these checks (with whatever test.solr.... sysprop we use) should probably log something about bypassing the non-blocking SecureRandom checks.\n\n ",
            "author": "Hoss Man",
            "id": "comment-16021555"
        },
        {
            "date": "2017-05-24T13:41:18+0000",
            "content": "I tried to keep it simple, that is why I used only a flag to skip this part. On the other hand, I can accept that this way the users have multiple options without the need to touch the code. Also adjusted the logging as you asked for. I have uploaded a new patch for these. ",
            "author": "Mihaly Toth",
            "id": "comment-16022906"
        },
        {
            "date": "2017-05-24T19:19:25+0000",
            "content": "Mihaly: my concern with your latest patch (other then a small missues of securityEgdValue instead of algorithm in the final assert) is that it doesn't check the \"test.solr.allowed.securerandom\" sys property until AFTER calling System.setProperty(\"java.security.egd\",...) ... if the user has gone out of their way to say \"let me use the secure random i want\" then we shouldn't be mucking with their source of randomness at all.\n\nAttached patch reorders things a bit ... i've only done cursory testing but i think it's correct.\n\nwhat do you think? ",
            "author": "Hoss Man",
            "id": "comment-16023486"
        },
        {
            "date": "2017-05-24T19:25:47+0000",
            "content": "Whoops ... forgot i wanted to tweak the log.info in my last patch ",
            "author": "Hoss Man",
            "id": "comment-16023502"
        },
        {
            "date": "2017-06-01T18:32:09+0000",
            "content": "I've been checking out the latest patch in the background over the past week. Will try and wrap this up relatively soon. ",
            "author": "Mark Miller",
            "id": "comment-16033456"
        },
        {
            "date": "2017-06-13T08:44:12+0000",
            "content": "I looked into the your latest patch Hoss Man. I have tested with the different properties set/unset. That version looks good to me. ",
            "author": "Mihaly Toth",
            "id": "comment-16047581"
        },
        {
            "date": "2017-06-16T15:37:35+0000",
            "content": "It tested out well for me as well, just got stuck in some other things. I need to review the patch once more, but I'll try and finally wrap this up soon. Thanks for sticking with it Mihaly Toth! Between this and it's parent issue, far too much time has been spent on this  Fun issue to dig into in many ways as well though. ",
            "author": "Mark Miller",
            "id": "comment-16052038"
        },
        {
            "date": "2017-07-18T23:15:17+0000",
            "content": "Well, this is my first issue to which I contributed, and I have to learn a lot. For example not to let attention fade away.  And to answer promptly to questions myself.\n\nMark Miller, though I know you are always busy ... could we wrap this up eventually? ",
            "author": "Mihaly Toth",
            "id": "comment-16092317"
        },
        {
            "date": "2017-07-18T23:40:35+0000",
            "content": "Sure thing. Sorry this  had to drag on so long  I've been on a bit of a downswing lately on this type of thing. I'll get it in by tomorrow if all goes well.  ",
            "author": "Mark Miller",
            "id": "comment-16092340"
        },
        {
            "date": "2017-07-18T23:44:21+0000",
            "content": "Great, thank you. I will check the status tomorrow then.  ",
            "author": "Mihaly Toth",
            "id": "comment-16092351"
        },
        {
            "date": "2017-07-20T00:57:09+0000",
            "content": "Alright, this seems alright to go - I'm headed out for a bit tonight though, so I'll commit in the morning. ",
            "author": "Mark Miller",
            "id": "comment-16094033"
        },
        {
            "date": "2017-07-20T17:42:06+0000",
            "content": "Commit ffd76a69773196813271f4372052d07481d602cb in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ffd76a6 ]\n\nSOLR-10338: Configure SecureRandom non blocking for tests. ",
            "author": "ASF subversion and git services",
            "id": "comment-16095057"
        },
        {
            "date": "2017-07-20T17:57:30+0000",
            "content": "Commit ad24f53018c5aee8c9ff322ab756b1556be7171c in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ad24f53 ]\n\nSOLR-10338: Fix CHANGES entry ",
            "author": "ASF subversion and git services",
            "id": "comment-16095083"
        },
        {
            "date": "2017-07-21T05:59:48+0000",
            "content": "Commit edce911f9bda44f8e318ab0e967361226cb75d8c in lucene-solr's branch refs/heads/branch_7x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edce911 ]\n\nSOLR-10338: Configure SecureRandom non blocking for tests. ",
            "author": "ASF subversion and git services",
            "id": "comment-16095823"
        },
        {
            "date": "2017-07-21T05:59:50+0000",
            "content": "Commit 9566c1bf6ad589e4ddbbce5d8cc215f4dd920849 in lucene-solr's branch refs/heads/branch_7x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9566c1b ]\n\nSOLR-10338: Fix CHANGES entry ",
            "author": "ASF subversion and git services",
            "id": "comment-16095824"
        },
        {
            "date": "2017-10-17T11:03:32+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207329"
        },
        {
            "date": "2018-02-12T16:26:21+0000",
            "content": "Commit 3019913c8536b728d02fdeb94243bcddd597d263 in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3019913 ]\n\nSOLR-10338: Remove test class / command line program that was only used during development ",
            "author": "ASF subversion and git services",
            "id": "comment-16361003"
        },
        {
            "date": "2018-02-12T16:27:29+0000",
            "content": "Commit cda002d9e3ea3ce1da0669065be11ef2c1889a32 in lucene-solr's branch refs/heads/branch_7x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cda002d ]\n\nSOLR-10338: Remove test class / command line program that was only used during development ",
            "author": "ASF subversion and git services",
            "id": "comment-16361014"
        },
        {
            "date": "2018-03-23T21:34:54+0000",
            "content": "I don't think the Solr plugin ecosystem was considered in the choice to throw an AssertionError here (vs. perhaps a warning or make no \u00a0fuss). \u00a0IMO a Solr plugin that doesn't care about encryption\u00a0at all should not have to concern itself with SSL/entropy. \u00a0Or am I being naive? \u00a0 ",
            "author": "David Smiley",
            "id": "comment-16412118"
        },
        {
            "date": "2018-03-23T21:59:08+0000",
            "content": "I'm not sure i follow your concern David: Even if you think your plugin doesn't care about encryption, the test baseclass still randomizes it and wants to ensure that it's going to work \u2013 so that when your custom plugin tests are run you can verify that your plugin doesn't fail if the user enables encryption.\n\nAnd besides: doesn't the assertion failure message make it very clear what you can do if you really don't care about testing this? ",
            "author": "Hoss Man",
            "id": "comment-16412163"
        },
        {
            "date": "2018-03-26T21:10:37+0000",
            "content": "I think SolrTestCaseJ4's insistence on this is a bit of an over-reach for\u00a0external projects that want to use solr-test-framework. \u00a0It's well intentioned but creates an annoying hassle that randomly occurs. \u00a0When it happens, yes the exception is helpful but then I have to go modify my build to pass the system property both in a pom.xml (or equivalent to other build tools) and my IDE config.\n\nI can see that Solr itself wants this, but solr-test-framework not only serves testing Solr itself but external players.\n\nCurious: do you know what\u00a0randomized situation causes this to trip? \u00a0It's not clear; I have a reproducible seed but I don't know (without lots of digging) why usually it won't trip. \u00a0FWIW I run on a Mac with Java 8. ",
            "author": "David Smiley",
            "id": "comment-16414571"
        },
        {
            "date": "2018-03-26T21:35:50+0000",
            "content": "I think SolrTestCaseJ4's insistence on this is a bit of an over-reach for external projects that want to use solr-test-framework.  It's well intentioned but creates an annoying hassle that randomly occurs. \n\nI'm no longer convinced i even understand what \"this\" is in the context of our current discussion, since the changes made SOLR-10338 do not involve SolrTestCaseJ4 do not involve anything that should \"randomly occur\" ... any assertion from the code committed in this issue should occur reliably 100% of the time assuming they are re-run on the same JVM.\n\nI think this dicussion should be moved to a new jira, with a new subject, and a detailed description of exactly what error message you are seeing, and what your test code looks like, and the specifics of your JVM. ",
            "author": "Hoss Man",
            "id": "comment-16414597"
        },
        {
            "date": "2018-03-27T15:21:33+0000",
            "content": "Sorry for ambiguity but the \"this\" I refer to is the following assertion:\n\n    assertFalse(\"SecureRandom algorithm '\" + algorithm + \"' is in use by your JVM, \" +\n                \"which is a potentially blocking algorithm on some environments. \" +\n                \"Please report the details of this failure (and your JVM vendor/version) to solr-user@lucene.apache.org. \" +\n                \"You can try to run your tests with -D\"+EGD+\"=\"+URANDOM+\" or bypass this check using \" +\n                \"-Dtest.solr.allowed.securerandom=\"+ algorithm +\" as a JVM option when running tests.\",\n                // be permissive in our checks and blacklist only algorithms \n                // that are known to be blocking under some circumstances\n                algorithm.equals(\"NativePRNG\") || algorithm.equals(\"NativePRNGBlocking\"));\n\n\n\nPlease hear me out one one point:\n\nthe changes made SOLR-10338 do not involve SolrTestCaseJ4 do not involve anything that should \"randomly occur\" ... any assertion from the code committed in this issue should occur reliably 100% of the time assuming they are re-run on the same JVM.\n\nI can imagine this may come as a surprise but I can reliably reproduce a situation in which this Assertion gets thrown randomly \u2013 thus your claim is false. I've dug into the root cause.  The first use of SecureRandom in the JVM is the only time at which the java.security.egd system property is considered.  SolrTestCaseJ4.assertNonBlockingRandomGeneratorAvailable will set this property.  Nothing new here; anyone reading this thread knows that.  But Solr won't necessarily be able to do this first.  For example, if there are other tests that don't extend SolrTestCaseJ4 that use SecureRandom then this won't happen.  And the order of test execution can be randomized.  Note that SecureRandom is used for, of all things, creating a temp file in Java, and lots of code directly or indirectly will do that \u2013 especially in tests. ",
            "author": "David Smiley",
            "id": "comment-16415793"
        },
        {
            "date": "2018-03-27T16:31:57+0000",
            "content": "And the order of test execution can be randomized.\nI now have a better understanding of what you ment by \"randomly occurs\" \u2013 the inference i drew from your earlier comments was that you were frustrated by some \"randomized situation\" that was deliberately random()-ized.\n\nHowever, this increased understanding does not fundamentally change my primary concern: If you feel like a change should be made, then this conversation should be moved to a new (linked) jira, with a specific example of situations where the current code is problematic, ideally with a proposed change.\n\nI don't feel that the comments of an issue resolved almost a year ago (that's already been in 3 released versions of Solr) is the appropriate place to discuss improvements to how it works. ",
            "author": "Hoss Man",
            "id": "comment-16415881"
        }
    ]
}