{
    "id": "SOLR-6496",
    "title": "LBHttpSolrClient should stop server retries after the timeAllowed threshold is met",
    "details": {
        "affect_versions": "4.9",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The LBHttpSolrServer will continue to perform retries for each server it was given without honoring the timeAllowed request parameter. Once the threshold has been met, you should no longer perform retries and allow the exception to bubble up and allow the request to either error out or return partial results per the shards.tolerant request parameter.\n\nFor a little more context on how this is can be extremely problematic please see the comment here: https://issues.apache.org/jira/browse/SOLR-5986?focusedCommentId=14100991&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14100991 (#2)",
    "attachments": {
        "SOLR-6496.patch": "https://issues.apache.org/jira/secure/attachment/12667529/SOLR-6496.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Davids",
            "id": "comment-14127750",
            "date": "2014-09-09T23:08:04+0000",
            "content": "Initial patch that honors the timeAllowed request parameter. There aren't any tests included \u2013 is there any objections to perhaps using a mocking library, it sure would make it much easier to perform unit testing on these negative cases. Mockito is my personal preference and is currently being used in Morphlines, but it will need to be included in the SolrJ test dependencies. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-14127870",
            "date": "2014-09-10T00:48:00+0000",
            "content": "Fixed patch for null safe SolrParams check. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14128168",
            "date": "2014-09-10T07:17:33+0000",
            "content": "Thanks for creating this JIRA and providing a patch Steve Davids.\n\nHere are a few changes that I'd recommend:\n\n\tUse System.nanoTime() for calculating elapsed time. SOLR-5734 was recently an attempt at standardizing the same.\n\tTests are always helpful for confirming that the change works as expected . I'm personally against mocking unless there's no other way out as it generally has led to code that is difficult to understand for newer developers when they want to change something.\n\n "
        },
        {
            "author": "Steve Davids",
            "id": "comment-14142325",
            "date": "2014-09-21T04:14:28+0000",
            "content": "Updated patch to use nano time. Still thinking of some potential tricks to not use mocks, are there any tests out there that may screw with the jetty server to make the socket connection arbitrarily long then somehow throw an exception and verify that the next request isn't made?\n\nOn the mocking front I would do something like (note: redundant static Mockito.* accessors only showed for demonstrative purposes):\n\n  @Test\n  public void testNoRetryOnTimeout() throws Exception {\n    LBHttpSolrServer testServer = Mockito.spy(new LBHttpSolrServer(\"http://test1\", \"http://test2\"));\n    Mockito.doAnswer(new Answer<Exception>() {\n      @Override\n      public Exception answer(InvocationOnMock invocation) throws Throwable {\n        Thread.sleep(1);\n        return new SolrServerException(\"Mock error.\");\n      }}).when(testServer).doRequest(Mockito.any(HttpSolrServer.class), Mockito.any(Req.class), Mockito.any(Rsp.class), Mockito.anyBoolean(), Mockito.anyBoolean(), Mockito.anyString());\n    testServer.query(SolrTestCaseJ4.params(CommonParams.Q, \"test\", CommonParams.TIME_ALLOWED, \"1\"));\n    Mockito.verify(testServer, Mockito.times(1)).doRequest(Mockito.any(HttpSolrServer.class), Mockito.any(Req.class), Mockito.any(Rsp.class), Mockito.anyBoolean(), Mockito.anyBoolean(), Mockito.anyString());\n  }\n\n\n\nThis test actually showed some strange behavior that there are multiple implemented methods trying to do the same thing. See LBHttpSolrServer's:\n\n\tpublic Rsp request(Req req) throws SolrServerException, IOException\n\tpublic NamedList<Object> request(final SolrRequest request) throws SolrServerException, IOException\n\n\n\nSo, depending on if you are using the CloudSolrServer or the HttpShardHandlerFactory you are going to get different request behavior. We should probably try to refactor this code to provide consistent behavior perhaps in a different ticket.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14142332",
            "date": "2014-09-21T04:45:33+0000",
            "content": "are there any tests out there that may screw with the jetty server to make the socket connection arbitrarily long then somehow throw an exception and verify that the next request isn't made?\n\nThere's a SocketProxy class which can be used to disallow connections to a jetty server but there's no rate limiting in there. See HttpPartitionTest for an example. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14270120",
            "date": "2015-01-08T22:11:28+0000",
            "content": "This is an important one to get into 5 - we should get it committed even if we have to a make a new JIRA to work on testing in this area. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14270659",
            "date": "2015-01-09T06:53:37+0000",
            "content": "Patch updated to be in sync with LBHttpSolrServer -> LBHttpSolrClient changes. Will just run a few more rounds of tests and commit.\nWill also create another issue for adding tests. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14270661",
            "date": "2015-01-09T06:55:37+0000",
            "content": "The correct attachment. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14270712",
            "date": "2015-01-09T07:48:33+0000",
            "content": "Working on fixing a failing test. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14270747",
            "date": "2015-01-09T08:19:19+0000",
            "content": "Fixed a failing test. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-14270996",
            "date": "2015-01-09T13:19:48+0000",
            "content": "The LB Client has duplicate implementations defined in both:\n\n1. public Rsp request(Req req) throws SolrServerException, IOException\n2. public NamedList<Object> request(final SolrRequest request) throws SolrServerException, IOException\n\nThe original patch was only dealing with one of the two, we need to either a) copy the same code into the other or b) refactor the methods to have a single implementation that both methods call. Option B is my personal preference, though we might want to just do that in a separate ticket and go with option A to get it in as soon as possible. I can work on either tonight after I get back from work if anyone has a route they would like to go. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14271776",
            "date": "2015-01-09T19:47:50+0000",
            "content": "You're right. I'll let you get to it as I'm not sure if I'd get time to work on it today.\nIf you're unable to get to it, I'll try handling it over the weekend.\n\nAbout the approaches, ideally, it'd be good to refactor but that certainly is more invasive. With the rc a week away, I'd like it to be less invasive at this point and work on refactoring (and adding tests) separately with the next release. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-14272303",
            "date": "2015-01-10T03:16:58+0000",
            "content": "Updated the patch to provide the same exiting functionality in the duplicate request implementation. I created SOLR-6949 to capture the refactoring that should be done to consolidate the two implementations. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14273732",
            "date": "2015-01-12T16:19:27+0000",
            "content": "Thanks Steve. I'll commit this later today.\nI'll just change the logic to compute timeOutTime = System.nanoTime() + timeOutNano once and use it to compare and exit. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14274427",
            "date": "2015-01-12T23:52:12+0000",
            "content": "Commit 1651236 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1651236 ]\n\nSOLR-6496: LBHttpSolrClient stops retrying after the timeAllowed threshold is met "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14274429",
            "date": "2015-01-12T23:53:02+0000",
            "content": "Commit 1651237 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1651237 ]\n\nSOLR-6496: LBHttpSolrClient stops retrying after the timeAllowed threshold is met (merge from trunk) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332672",
            "date": "2015-02-23T05:01:15+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}