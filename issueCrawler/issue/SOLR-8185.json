{
    "id": "SOLR-8185",
    "title": "Add operations support to streaming metrics",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Won't Fix",
        "priority": "Minor"
    },
    "description": "Adds support for operations on stream metrics.\n\nWith this feature one can modify tuple values before applying to the computed metric. There are a lot of use-cases I can see with this - I'll describe one here.\n\nImagine you have a RollupStream which is computing the average over some field but you cannot be sure that all documents have a value for that field, ie the value is null. When the value is null you want to treat it as a 0. With this feature you can accomplish that like this\n\n\nrollup(\n  search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\n  over=\\\"a_s\\\",\n  avg(a_i, replace(null, withValue=0)),\n  count(*),\n)\n\n\n\nThe operations are applied to the tuple for each metric in the stream which means you perform different operations on different metrics without being impacted by operations on other metrics. \n\nAdding to our previous example, imagine you want to also get the min of a field but do not consider null values.\n\n\nrollup(\n  search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\n  over=\\\"a_s\\\",\n  avg(a_i, replace(null, withValue=0)),\n  min(a_i),\n  count(*),\n)\n\n\n\nAlso, the tuple is not modified for streams that might wrap this one. Ie, the only thing that sees the applied operation is that particular metric. If you want to apply operations for wrapping streams you can still achieve that with the SelectStream (SOLR-7669).\n\nOne feature I'm investigating but this patch DOES NOT add is the ability to assign names to the resulting metric value. For example, to allow for something like this\n\n\nrollup(\n  search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\n  over=\\\"a_s\\\",\n  avg(a_i, replace(null, withValue=0), as=\"avg_a_i_null_as_0\"),\n  avg(a_i),\n  count(*, as=\"totalCount\"),\n)\n\n\n\nRight now that isn't possible because the identifier for each metric would be the same \"avg_a_i\" and as such both couldn't be returned. It's relatively easy to add but I have to investigate its impact on the SQL and FacetStream areas.\n\nDepends on SOLR-7669 (SelectStream)",
    "attachments": {
        "SOLR-8185.patch": "https://issues.apache.org/jira/secure/attachment/12767939/SOLR-8185.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-22T01:59:20+0000",
            "author": "Dennis Gove",
            "content": "Full patch.  ",
            "id": "comment-14968357"
        },
        {
            "date": "2015-11-13T01:49:44+0000",
            "author": "Dennis Gove",
            "content": "Running into some issues turning the expression into something that would perform the expected .equals()\n\n\n avg(a_f, replace(10, withValue=0))\n\n\nIn this example, what type is 10? Is it a long or a float or a double? The field is a float (as noted by the _f) so one would expect 10 to be a float as well. However, in converting 10 to some Object that we can call .equals(...) on we are not sure what the type is. This has been a persistent problem with this patch.\n\nBut I think I've come up with something that puts some of the decision making in the hands of the expression writer.\n\n\n avg(a_f, replace(10f, withValue=0f))\n\n\nIn this case the value can only be converted to a float so it will be created as a float object.\n\nHowever, to add this new requirement on the expression creator I want to take a deeper look at what this might impact and make sure the documentation is very clear. If a user doesn't do the correct thing (gives us 10 instead of 10f) and the value in the tuple is a float then float.equals(long) == false every single time.\n\nAnyway, this note is somewhat of a rant.  ",
            "id": "comment-15003390"
        },
        {
            "date": "2017-03-06T20:17:32+0000",
            "author": "Joel Bernstein",
            "content": "I think this ticket has been superseded by the stream Evaluators work. Shall we close this ticket out? ",
            "id": "comment-15897995"
        },
        {
            "date": "2017-03-06T21:21:27+0000",
            "author": "Dennis Gove",
            "content": "I agree - Evaluators take care of this feature. ",
            "id": "comment-15898133"
        },
        {
            "date": "2017-03-06T21:25:07+0000",
            "author": "Dennis Gove",
            "content": "This work is superceded by SOLR-9916. ",
            "id": "comment-15898140"
        }
    ]
}