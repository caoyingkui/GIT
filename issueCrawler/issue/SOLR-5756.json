{
    "id": "SOLR-5756",
    "title": "A utility API to move collections from stateFormat=1 to stateFormat=2",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SOLR-5473 allows creation of collection with state stored outside of clusterstate.json. We would need an API to  move existing 'internal' collections outside",
    "attachments": {
        "SOLR-5756-part2.patch": "https://issues.apache.org/jira/secure/attachment/12748905/SOLR-5756-part2.patch",
        "CollectionStateFormat2Test-failure.log": "https://issues.apache.org/jira/secure/attachment/12750357/CollectionStateFormat2Test-failure.log",
        "SOLR-5756-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12748868/SOLR-5756-trunk.patch",
        "SOLR-5756-fix.patch-failure.log": "https://issues.apache.org/jira/secure/attachment/12750383/SOLR-5756-fix.patch-failure.log",
        "CollectionStateFormat2Test-passed-r1695176.log": "https://issues.apache.org/jira/secure/attachment/12750366/CollectionStateFormat2Test-passed-r1695176.log",
        "CollectionStateFormat2Test-failure-r1695176.log": "https://issues.apache.org/jira/secure/attachment/12750365/CollectionStateFormat2Test-failure-r1695176.log",
        "SOLR-5756-fix.patch": "https://issues.apache.org/jira/secure/attachment/12750380/SOLR-5756-fix.patch",
        "SOLR-5756.patch": "https://issues.apache.org/jira/secure/attachment/12749077/SOLR-5756.patch",
        "sarowe-jenkins-Lucene-Solr-tests-trunk-1522-CollectionStateFormat2-failure.txt": "https://issues.apache.org/jira/secure/attachment/12750369/sarowe-jenkins-Lucene-Solr-tests-trunk-1522-CollectionStateFormat2-failure.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Scott Blum",
            "id": "comment-14618875",
            "date": "2015-07-08T16:30:07+0000",
            "content": "Hi, has any work started on this issue?  We have a deployment with a very large clusterstate.json (most of our collections are there).  New collections added since our last upgrade have their own split state.json, but we still have an enormous number of collections using the shared file.  We are suspicious that the large degree of contention on clusterstate.json is affecting the stability of our cluster, so we'd like to split it apart to see if things improve.\n\nA few questions:\n\n1) Do you think it would be safe to do this manually on a running cluster?  I've only spent a few hours looking at the overseer code, but I got the impression that I might just be able to populate all the state.json nodes manually, followed by emptying clusterstate.json.  That last step should tickle all the running servers, forcing a reload which will get all servers into the right separated state.  At least, that's my theory.  Does that sound right to you?\n\n2) Suppose I wanted to try to write a patch for this issue to help solve it for everyone, is that a reasonable thing to attempt for someone with a lot of ZK knowledge but pretty new to Solr?  Or are there a lot of subtleties?\n\n3) Can you opine on the specifics of having an API to move the state out vs. a forced migration?  From what I read on SOLR-5473, it sounds like eventually we'd just want to force everyone into split state.  Is it too \"soon\" to do that?\n\n(Unrelated to this specific issue, I'm actually a committer on Apache Curator, and I have a general interest in understanding and possibly helping improve overseer's ZK interactions.   Are there any docs outside of the code itself you might recommend for me to read?) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14618910",
            "date": "2015-07-08T16:48:49+0000",
            "content": "Do you think it would be safe to do this manually on a running cluster?\n\nIt is never fully safe , There are intermediate state changes which you may lose\n\nSuppose I wanted to try to write a patch for this issue to help solve it for everyone, is that a reasonable thing to attempt for someone with a lot of ZK knowledge but pretty new to Solr? \n\nIs it too \"soon\" to do that?\n\nIt is not too soon. 5.0 is out for a while\n\nA lot of ZK knowledge is not required to do this. You need to know how overseer updates state  and how states are updated by ZkStateReader.createClusterStateWatchersAndUpdate  in each node\n\nCan you opine on the specifics of having an API to move the state out vs. a forced migration?\n\nI shall do a follow up comment of what are the steps involved in actually doing this\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14620564",
            "date": "2015-07-09T14:21:04+0000",
            "content": "The steps to migrate state from main clusterstate.\n\n\n\tAdd support to ZKStateReader to lookup the /collections/<collection-name>state.json if a collection is suddenly missing from the main clusterstate.json . If the state.json is found add a listener to that if that requires to be watched\n\tAdd a collection-admin command to migrate the state outside\n\n\n\nA user should first upgrade all servers to a new version and then execute the command "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14621500",
            "date": "2015-07-10T00:16:05+0000",
            "content": "That sounds great.  I will get on this in the next couple days.  One clarifying questions:\n\nSuppose on read/reload, data exists in both the collection's `state.json` and the shared `clusterstate.json` on load, which one should it prefer, and it should any corrective action happen to de-dup?  I would presume that it should prefer `state.json` (and eagerly remove the entry from `clusterstate.json`?) in this case, since it indicates someone successfully wrote out the new one but failed to delete the old one. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14648097",
            "date": "2015-07-30T18:35:19+0000",
            "content": "Noble Paul Shalin Shekhar Mangar do either of you ever hang out on #solr-dev?  I have a few questions that I think would greatly benefit from a real time chat. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14648469",
            "date": "2015-07-30T23:21:55+0000",
            "content": "Also, what branch should I be working against?  I have something in a basically working state I'd like feedback on. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14648608",
            "date": "2015-07-31T01:49:37+0000",
            "content": "Scott Blum people generally work on trunk and then merge/backport it to branch_5x. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14648794",
            "date": "2015-07-31T06:02:35+0000",
            "content": "always prefer 'state.json' . "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14648849",
            "date": "2015-07-31T07:07:49+0000",
            "content": "Scott Blum - I am 'shalin' on irc "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14649474",
            "date": "2015-07-31T16:59:46+0000",
            "content": "Initial stab at something working, based on 5.2.1.  Haven't run through test suite yet. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14649508",
            "date": "2015-07-31T17:28:04+0000",
            "content": "(couple of comments and fixed one thing) "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14649572",
            "date": "2015-07-31T18:07:44+0000",
            "content": "(more bugfixes... will tests pass?) "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14649704",
            "date": "2015-07-31T19:34:36+0000",
            "content": "I think the tests are actually passing now. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14652342",
            "date": "2015-08-03T19:33:57+0000",
            "content": "Thanks Scott Blum. This approach looks promising. A few comments on the patch:\n\n\n\tThe return value of updateFromSharedClusterState(clusterState.getLiveNodes(), null); in ZkStateReader.updateClusterState is discarded. How is the cluster state updated in that case?\n\tPerhaps rename StateWatcher.refresh to refreshAndAddWatch to make it more clear?\n\tAll collections (whether in clusterstate.json or in individual state.json) having local cores are added to interestingCollections and therefore a StateWatcher is created even if the collection was in clusterstate.json (as a result one useless zk call is made?)\n\tZkStateReader.removeZKWatch should not remove the collection from the cluster state just because all local cores belonging to that collection have been removed. A proper updateClusterState should be called in this case.\n\n\n\nThis patch has a lot of changes to the way synchronization is done so I will review it in more detail. But before that, can you please rebase the patch to trunk? "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14652366",
            "date": "2015-08-03T19:50:44+0000",
            "content": "1) Great catch, totally missed that.\n\n2) Sure, not a problem.  I thought it was kind of implied by the classname (StateWatcher / ClusterStateWatcher) but explicit methods are always good.\n\n3) Yes, but in the 99% case (no external state exists) the getData call fails, no watcher is left on the node, and everything should just clean itself up.  I don't think this adds much additional overhead considering that getStateFormat2CollectionNames() checks existence on every collection for a state.json, even ones that are not \"interesting\", and this happens on every update, not just on startup which is where the initial set of StateWatchers get created.  So I think lower-hanging fruit would be to optimize the updateFromSharedClusterState -> getStateFormat2CollectionNames() code path.  I would love to talk more about how/why the rest of the system relies on the lazy-loading bits.\n\n4) I don't think I quite follow, let's discuss on IRC. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14652401",
            "date": "2015-08-03T20:09:34+0000",
            "content": "Okay, per discussion on IRC let me summarize the big glaring problem with the existing patch:\n\nI'm trying to use clusterState to do two very different things:\n1) Serve as an in-memory copy of the contents of clusterstate.json\n2) Serve as the \"amalgam\" result of combining shared clusterstate.json with all of the non-shared state.json.\n\nI need to explicitly break this apart into two different fields. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14652917",
            "date": "2015-08-04T01:30:36+0000",
            "content": "Try this.  I haven't run tests all the way through, but most of the way. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14653962",
            "date": "2015-08-04T16:54:59+0000",
            "content": "Thanks Scott. A few more comments:\n\n\n\tNeed a null check for \"children\" in ZkStateReader.refreshLazyCollections()\n\tI don't see where the clusterState object in ZkStateReader is initialized? The createClusterStateWatchersAndUpdate() method just calls constructState(new HashSet<>(liveNodes)); but doesn't set its return value to the clusterState variable.\n\tNit-pick: It looks like the code for updating live nodes in ZkStateReader.createClusterStateWatchersAndUpdate() can use updateLiveNodes() directly (with a watcher)?\n\tNit-pick: There was a lot of controversy on naming collections as \"external\" when this was originally implemented in SOLR-5473. In the interest of avoiding controversy and bike-shedding, can you rename \"external\" to \"stateFormat2\" wherever possible? e.g. \"externalCollectionExists\" to \"isStateFormat2()\" etc.\n\n\n\nI think now we are in a position to write a test which:\n\n\tCreates a collection in shared cluster state\n\tCreates a state.json for the same collection\n\tMutates state in shared cluster state and asserts that those changes are not visible in ZkStateReader\n\tDeletes old cluster state and ensures that everything still works fine.\n\n "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14653993",
            "date": "2015-08-04T17:14:09+0000",
            "content": "1) I don't understand.  `if (children == null || children.isEmpty()) {` isn't that the null check?\n\n2) constructState() actually updates the field as a side effect, and it's the ONLY place I'm ever writing to the field.  I put it inside the method because I was just having to do clusterState = constructState() at every call site.  I can outline it if you think it's unclear, or I can rename the method.  I was just sticking with the old name, but maybe that doesn't make sense now.  \"updateView\" maybe?\n\n3) I actually intentionally left the live node and alias code alone, even though I have the strong urge to refactor it to match the new patterns I'm creating, since it wasn't directly related to the change.  That said, I would be totally happy to create a LiveNodeWatcher along the lines of StateWatcher (which would enable shared code) if you think I should go ahead with that!\n\n4) Awesome, I was hoping for some guidance on this.  For \"shared\" clusterstate, should I use \"shared\" or \"legacyFormat\"?\n\nAs far as testing goes, I'll hit you up on IRC for some pointers on writing this.  Ideally, if you could point me at an existing test I could start from? "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14654274",
            "date": "2015-08-04T20:06:06+0000",
            "content": "With the changes we discussed!  Tests passing. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14654326",
            "date": "2015-08-04T20:49:34+0000",
            "content": "Now with 100% more testing. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14658388",
            "date": "2015-08-05T15:36:43+0000",
            "content": "Now includes fix for SOLR-7870 "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14658728",
            "date": "2015-08-05T19:29:47+0000",
            "content": "Part 2 of the patch, adds a MIGRATESTATEFORMAT collection command.  Bikeshedding on name is welcome. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14660054",
            "date": "2015-08-06T14:07:30+0000",
            "content": "Combined patch. Tests and precommit pass. I'll commit this shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14661480",
            "date": "2015-08-07T08:12:08+0000",
            "content": "Patch updated to trunk. I'm running tests and precommit now. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14661685",
            "date": "2015-08-07T11:31:29+0000",
            "content": "\n\tI changed the Collection API from using \"name\" to \"collection\" which, to me, seems much more clear.\n\tI added a end-to-end test in TestCollectionAPI to migrate state format using the new collection API.\n\tAdded SolrJ support (CollectionAdminRequest.MigrateStateFormat)\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14661870",
            "date": "2015-08-07T14:07:22+0000",
            "content": "Commit 1694692 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1694692 ]\n\nSOLR-5756: A utility Collection API to move a collection from stateFormat=1 to stateFormat=2\nSOLR-7870: Write a test which asserts that requests to stateFormat=2 collection succeed on a node even after all local replicas of that collection have been removed "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14662114",
            "date": "2015-08-07T17:24:08+0000",
            "content": "There are a few conflicts on branch_5x because SOLR-7855 hasn't been backported yet. I'll wait for it to be complete. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14662162",
            "date": "2015-08-07T18:02:28+0000",
            "content": "Awesome, thanks!  I presume there won't be a backport to 5.3?  (I'm planning to backport it myself to 5.2.1, which is what we're running in prod) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14662182",
            "date": "2015-08-07T18:11:26+0000",
            "content": "Thank you! No, this won't make it to 5.3 because the release branch has already been created. Furthermore, this is too risky a change to sneak in at the last minute. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14662183",
            "date": "2015-08-07T18:12:26+0000",
            "content": "nit: CollectionAdminRequest.java has a copy-pasted comment that needs an update "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14662202",
            "date": "2015-08-07T18:20:04+0000",
            "content": "Commit 1694718 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1694718 ]\n\nSOLR-5756: Fix copy/paste mistake in comment "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14662209",
            "date": "2015-08-07T18:23:29+0000",
            "content": "nit: CollectionAdminRequest.java has a copy-pasted comment that needs an update\n\nOops, thanks! "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14679979",
            "date": "2015-08-10T11:45:24+0000",
            "content": "Commit 1695026 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695026 ]\n\nSOLR-5756: A utility Collection API to move a collection from stateFormat=1 to stateFormat=2\nSOLR-7870: Write a test which asserts that requests to stateFormat=2 collection succeed on a node even after all local replicas of that collection have been removed "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14679985",
            "date": "2015-08-10T11:48:59+0000",
            "content": "Thanks Scott! "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14695785",
            "date": "2015-08-13T19:12:54+0000",
            "content": "I am seeing frequent failures in CollectionStateFormat2Test since this was committed.\n\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-5.x-MacOSX/2561/\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-5.x-Linux/13599/\n\nA typical failure looks like:\n\n  2> NOTE: reproduce with: ant test  -Dtestcase=CollectionStateFormat2Test -Dtests.method=test -Dtests.seed=B21128F51A7A37B8 -Dtests.slow=true -Dtests.locale=fr -Dtests.timezone=GB -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n[00:27:20.744] ERROR   58.6s J1 | CollectionStateFormat2Test.test <<<\n   > Throwable #1: org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://127.0.0.1:41444/w_b/w: Could not find collection : myExternColl\n   >    at __randomizedtesting.SeedInfo.seed([B21128F51A7A37B8:3A45172FB4865A40]:0)\n   >    at org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:560)\n   >    at org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:234)\n   >    at org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:226)\n   >    at org.apache.solr.client.solrj.impl.LBHttpSolrClient.doRequest(LBHttpSolrClient.java:376)\n   >    at org.apache.solr.client.solrj.impl.LBHttpSolrClient.request(LBHttpSolrClient.java:328)\n   >    at org.apache.solr.client.solrj.impl.CloudSolrClient.sendRequest(CloudSolrClient.java:1085)\n   >    at org.apache.solr.client.solrj.impl.CloudSolrClient.requestWithRetryOnStaleState(CloudSolrClient.java:856)\n   >    at org.apache.solr.client.solrj.impl.CloudSolrClient.request(CloudSolrClient.java:799)\n   >    at org.apache.solr.client.solrj.SolrClient.request(SolrClient.java:1220)\n   >    at org.apache.solr.cloud.CollectionStateFormat2Test.testZkNodeLocation(CollectionStateFormat2Test.java:84)\n   >    at org.apache.solr.cloud.CollectionStateFormat2Test.test(CollectionStateFormat2Test.java:40)\n   >    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14695786",
            "date": "2015-08-13T19:13:15+0000",
            "content": "Full test log attached. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14695793",
            "date": "2015-08-13T19:16:34+0000",
            "content": "The problem is that the ZkStateReader automatically deletes a collection from cluster state once it sees that the state node no longer exists but some times the actual core unload command reaches the node after said state.json is deleted and the node replies by saying that it could not find such a core. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14695857",
            "date": "2015-08-13T20:09:01+0000",
            "content": "Here are two more logs of the same test against the same revision with the same seed etc:\n\n\tCollectionStateFormat2Test-passed-r1695176.log\n\tCollectionStateFormat2Test-failure-r1695176.log\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14695866",
            "date": "2015-08-13T20:14:18+0000",
            "content": "Attaching the CollectionStateFormat2 log excerpted from tests-failures.txt from the most recent trunk failure on my (Linux) Jenkins: http://jenkins.sarowe.net/job/Lucene-Solr-tests-trunk/1522/. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14695983",
            "date": "2015-08-13T21:33:46+0000",
            "content": "Based on discussion with Scott on irc, this may be a potential fix. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14695993",
            "date": "2015-08-13T21:39:13+0000",
            "content": "I beasted with Shalin's SOLR-5756-fix.patch applied to trunk - attaching the log. "
        },
        {
            "author": "Scott Blum",
            "id": "comment-14700085",
            "date": "2015-08-17T19:28:09+0000",
            "content": "A real fix, I'm pretty sure.  I found the race condition that was causing the flakiness. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14700174",
            "date": "2015-08-17T20:34:59+0000",
            "content": "Commit 1696335 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1696335 ]\n\nSOLR-5756: Fix for race condition between unwatch and watcher fire event "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14700178",
            "date": "2015-08-17T20:36:09+0000",
            "content": "Commit 1696336 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1696336 ]\n\nSOLR-5756: Fix for race condition between unwatch and watcher fire event "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14704969",
            "date": "2015-08-20T14:11:09+0000",
            "content": "That fix seems to have solved the problem. Good sleuthing, Scott! "
        }
    ]
}