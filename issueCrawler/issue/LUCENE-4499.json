{
    "id": "LUCENE-4499",
    "title": "Multi-word synonym filter (synonym expansion)",
    "details": {
        "components": [
            "core/other"
        ],
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "4.1,                                            6.0",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "I apologize for bringing the multi-token synonym expansion up again. There is an old, unresolved issue at LUCENE-1622 [1]\n\nWhile solving the problem for our needs [2], I discovered that the current SolrSynonym parser (and the wonderful FTS) have almost everything to satisfactorily handle both the query and index time synonym expansion. It seems that people often need to use the synonym filter slightly differently at indexing and query time.\n\nIn our case, we must do different things during indexing and querying.\n\nExample sentence: Mirrors of the Hubble space telescope pointed at XA5\n\nThis is what we need (comma marks position bump):\n\n\nindexing: mirrors,hubble|hubble space telescope|hst,space,telescope,pointed,xa5|astroobject#5\nquerying: +mirrors +(hubble space telescope | hst) +pointed +(xa5|astroboject#5)\n\n\nThis translated to following needs:\n\n\n  indexing time: \n    single-token synonyms => return only synonyms\n    multi-token synonyms => return original tokens AND the synonyms\n\n  query time:\n    single-token: return only synonyms (but preserve case)\n    multi-token: return only synonyms\n\nWe need the original tokens for the proximity queries, if we indexed 'hubble space telescope'\nas one token, we cannot search for 'hubble NEAR telescope'\n\n\n\nYou may (not) be surprised, but Lucene already supports ALL of these requirements. The patch is an attempt to state the problem differently. I am not sure if it is the best option, however it works perfectly for our needs and it seems it could work for general public too. Especially if the SynonymFilterFactory had a preconfigured sets of SynonymMapBuilders - and people would just choose what situation they use. Please look at the unittest.\n\n\nlinks:\n[1] https://issues.apache.org/jira/browse/LUCENE-1622\n[2] http://labs.adsabs.harvard.edu/trac/ads-invenio/ticket/158\n[3] seems to have similar request: http://lucene.472066.n3.nabble.com/Proposal-Full-support-for-multi-word-synonyms-at-query-time-td4000522.html",
    "attachments": {
        "LUCENE-4499.patch": "https://issues.apache.org/jira/secure/attachment/12550300/LUCENE-4499.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-22T15:15:40+0000",
            "content": "patch against latest trunk, i am seeing some unrelated unittests failing ",
            "author": "Roman Chyla",
            "id": "comment-13481429"
        },
        {
            "date": "2012-11-30T10:18:50+0000",
            "content": "I had similar problems with multi-word synonyms, and I largely resolved them by moving all the synonym expansion logic into the query parser.  I have a description of it on my blog [1] and some open-source code on GitHub [2].\n\nIn terms of changes to Solr/Lucene, all my code adds is an extension to the EDismaxQueryParserPlugin, so it's easy to install.\n\nAnd at the very least, with my code you would be able to query \"hubble NEAR telescope\" as in your example, and it would work because the index tokens have not been changed at all.  \"HST\" would also work.\n\nIt's not exactly like your solution, but I think mine could be an interesting addition to Solr, and could help folks out who have run into similar issues with multi-word synonyms.\n\nLinks:\n[1] http://nolanlawson.com/2012/10/31/better-synonym-handling-in-solr/\n[2] https://github.com/healthonnet/hon-lucene-synonyms#readme ",
            "author": "Nolan Lawson",
            "id": "comment-13507243"
        },
        {
            "date": "2012-11-30T13:01:05+0000",
            "content": "Hi Nolan: \n\nThere is a mistake in your blog post:\n\n\nFinally, and most seriously, the SynonymFilterFactory will simply not match multi-word synonyms in user queries if you do any kind of tokenization. This is because the tokenizer breaks up the input before the SynonymFilterFactory can transform it.\n\nThis is not true. There is nothing wrong with SynonymFilter here. The bug is actually in the lucene queryparser (LUCENE-2605). ",
            "author": "Robert Muir",
            "id": "comment-13507307"
        },
        {
            "date": "2012-11-30T16:50:02+0000",
            "content": "Hi Nolan, your case seems to confirm a need for some solution. You have decided to make a seaprate query parser, I have put the expanding logic into a query parser as well.\n\nSee this for the working example:\nhttps://github.com/romanchyla/montysolr/blob/master/contrib/adsabs/src/test/org/apache/solr/analysis/TestAdsabsTypeFulltextParsing.java\n\nAnd its config\nhttps://github.com/romanchyla/montysolr/blob/master/contrib/examples/adsabs/solr/collection1/conf/schema.xml#L325\n\nI see two added benefits (besides not needing a query parser plugin - in our case, it must be plugged into our qparser):\n\n 1. you can use the filter at index/query time inside a standard query parser\n 2. special configuration for synonym expansion (for example, we have found it very useful to be able to search for multi-tokens in case-insensitive manner, but recognize single tokens only case-sensitively; or expand with multi-token synonyms only for multi-word originals and output also the original words, otherwise eat them (replace them))\n\nNice blog post, I wish I could write as instructively as well  ",
            "author": "Roman Chyla",
            "id": "comment-13507440"
        },
        {
            "date": "2012-12-02T17:45:56+0000",
            "content": "@Robert: Thanks for the clarification.  I've corrected my blog post.\n\n@Roman: Yes, I think it's a very common use case.  Especially considering that your query expander seems to be doing the same thing as ours!\n\nMy idea with the custom QueryParserPlugin was just to have a self-contained solution that didn't mess with the core Lucene/Solr logic too much.  And I think it's still configurable enough that it can handle your case-insensitivity tweaks (which I totally understand - \"MIT\" is not the same thing as \"mit\").  You'd just have to have some pretty fancy XML in the \"synonymAnalyzers\" section.  ",
            "author": "Nolan Lawson",
            "id": "comment-13508304"
        },
        {
            "date": "2012-12-04T20:31:57+0000",
            "content": "A new patch, as the old version was extending wrong class (which cause web tests to fail) ",
            "author": "Roman Chyla",
            "id": "comment-13510000"
        },
        {
            "date": "2013-03-05T18:43:23+0000",
            "content": "Hello.\nWe are currently being hit by this multi-word synonym bug.\nI have noticed that this issue and SOLR-4381 have a very low priority.\n\nIs it possible we raise the priority so that we can get this in?\n\nThis is a major issue in my opinion.\n\nThanks. ",
            "author": "Arcadius Ahouansou",
            "id": "comment-13593740"
        },
        {
            "date": "2016-06-08T03:42:22+0000",
            "content": "Has this been fixed in Solr 6.0? \nThis seems to be a major issue. ",
            "author": "Edwin Yeo Zheng Lin",
            "id": "comment-15319937"
        },
        {
            "date": "2016-06-08T14:19:08+0000",
            "content": "LUCENE-6664 fixes the multi-term synonym problems \"correctly\", meaning the synonym filter produces a correct graph, which e.g. a query parser could then do the right thing with ... but the patch proved controversial so it won't be committed any time soon.\n\nBut it's quite standalone in the patch (just another TokenFilter) so you could maybe plug it into Solr and try it out. ",
            "author": "Michael McCandless",
            "id": "comment-15320619"
        },
        {
            "date": "2017-01-03T10:50:13+0000",
            "content": "This has finally been fixed by LUCENE-6664 and LUCENE-7603. ",
            "author": "Michael McCandless",
            "id": "comment-15794764"
        }
    ]
}