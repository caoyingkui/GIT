{
    "id": "LUCENE-4647",
    "title": "Simplify CategoryDocumentBuilder",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "CategoryDocumentBuilder is used to add facet fields to a document. Today the usage is not so straightforward, and I'd like to simplify it. First, to improve usage but also to make cutover to DocValues easier.\n\nThis clsas does two operations: (1) adds drill-down terms and (2) creates the fulltree payload. Today, since it does it all on terms, there's a hairy TokenStream which does both these operations in one go. For simplicity, I'd like to break this into two steps:\n\n\n\tWrite a TokenStream which adds the drill-down terms\n\t\n\t\tFor no associations, terms should be indexed w/ DOCS_ONLY (see LUCENE-4623).\n\t\tWith associations, drill-down terms have payload too.\n\t\tSo EnhancementsDocumentBuilder should be able to extend this stream.\n\t\n\t\n\tWrite some API which can be used to build the fulltree payload (i.e. populate a byte[]). Currently that byte[] will be written to a payload and later to DV.\n\n\n\nHopefully, I'd like to have FacetsDocumentBuilder (maybe just FacetsBuilder?) which only handles things with no associations, and EnhancementsDocBuilder which extends whatever is needed to add associations.",
    "attachments": {
        "LUCENE-4647.patch": "https://issues.apache.org/jira/secure/attachment/12562851/LUCENE-4647.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-01T18:05:56+0000",
            "content": "Attached patch kinda overhauls how facets are indexed. The concept stays the same, but I sort of rewrote it all. Here's how the code in the patch works:\n\n\n\tFacetFields (previously CategoryDocumentBuilder) takes an Iterable<CategoryPath> and indexes them in two steps:\n\t\n\t\tDrillDownStream indexes the drill-down tokens, e.g. $facets:Author, $facets:Author/Bob\n\t\tCategoryListBuilder encodes the category ordinals into a Map<String,BytesRef> (more on this later), which is later set as the payload of $facets:$fulltree$\n\t\n\t\n\t\tBoth these steps work per CategoryListParams (in case the application wishes to index groups of facets in different category lists)\n\t\n\t\n\n\n\n\n\tAssociationsFacetFields (previously EnhancementsDocumentBuilder) extends FacetFields and takes a CategoryAssociationsContainer (which implements Iterable<CategoryPath>) and holds a mapping from a CategoryPath to CategoryAssociation\n\t\n\t\tAssociationsDrillDownStream extends DrillDownStream and adds association values to the drill-down tokens' payloads\n\t\tAssociationsCategoryListBuilder extends CategoryListBuilder and encodes <category,association-value> pairs into their own BytesRef\n\t\n\t\n\n\n\n\n\tCategoryAssociation replaces CategoryEnhancement and simplifies the usage (end-user wise) a lot !\n\t\n\t\tTwo implementations CategoryIntAssociation and CategoryFloatAssociation support the previously AssociationEnhancement + AssociationInt/FloatProperty and allow associating an int/float value with a category\n\t\tEvery CategoryAssociation impl is responsible for serialization of its value to a ByteArrayDataOutput (and de-serialize from ByteArrayDataInput)\n\t\tEvery implementation needs to specify its categoryListID, since it determines the term payload under which the association values are encoded\n\t\tThe two FacetRequests, AssociationIntSumFacetRequest and AssociationFloatSumFacetRequest, work with CategoryAssociation rather than the enhancement\n\t\tEnhancementsIndexingParams were removed, and togeher with them all the 'attributes', 'enhancements' and 'streaming' packages\n\t\n\t\n\n\n\n\n\tThe Map<String,BytesRef> easily supports partitions and associations:\n\t\n\t\tWhen simple categories are indexed, no partitions, a single entry exists in the map\n\t\tWhen simple categories are indexed with partitions, an entry per partition exists in the map, e.g. $facets:$fulltree$1, $facets:$fulltree$2 etc.\n\t\tWhen associations are indexed, the map contains the ordinals list (as described above) and the association values per CategoryAssociation.getCategoryListID(), so e.g. an int association is encoded into a different BytesRef than a float one\n\t\n\t\n\n\n\nI chose to implement it all from scratch because the code was very intertwined and complicated, much because of a very complicated desing for enhancements. At least to me, the code is now much simpler. Migrating facets from this code to DocValues should be an easy task - all that needs to be done is to write the output of CategoryListBuilder to a DocValues field, rather than a TokenStream payload.\n\nThe patch is huge, but mostly because of all the code that's been removed. When you review it, focus on the classes mentioned above.\n\nNOTE: the new associations code breaks backwards compatibility with old indexes:\n\n\tPreviously both the int and float associations were written to the same associations list as integers, and the float one used Float.intBitsToFloat and vice versa. Now they are written to two separate lists\n\tPreviously the code supported multiple enhancements which affected how they were encoded (e.g. #ENHANCEMENTS, #ENH_LENGTHS, #ENH_BYTES). But we always had only one enhancement (AssociationEnhancement), so that encoding was really redundant.\n\tIn order to support multiple CategoryAssociations per CategoryPath, one can easily write a CompoundAssociation and take care of its serialization.\n\n\n\nSince enhancements/associations are quite an advanced feature, I think this break makes sense. We can always add a backwards layer later if someone complains (and cannot reindex). Keeping the previous code, which was prepared to handle multiple CategoryEnhancement types, while only one enhancement was available to our users did not make sense to me. ",
            "author": "Shai Erera",
            "id": "comment-13541894"
        },
        {
            "date": "2013-01-02T21:27:55+0000",
            "content": "As the author of most of the code being removed by this patch I think the new API is much better than the previous  ",
            "author": "Sivan Yogev",
            "id": "comment-13542430"
        },
        {
            "date": "2013-01-02T23:09:00+0000",
            "content": "This looks awesome Shai!\n\nI like the new name (FacetFields.addFields(..)), and I like how\nFacetFields is now stateless (ie you can use a single instance across\nthreads adding documents), and this is a great first step to make the\nDocValues cutover easier. ",
            "author": "Michael McCandless",
            "id": "comment-13542526"
        },
        {
            "date": "2013-01-03T08:04:49+0000",
            "content": "I like how FacetFields is now stateless (ie you can use a single instance across threads adding documents)\n\nNotice that I put a TODO to make this class reusable. I.e. currently it just allocates a new TokenStream and Field instances on every addFields (like CategoryDocumentBuilder did before).\nIf we'll do that, it will have state, but will be reusable per-thread.\n\nWith those warming comments, I will commit these changes . ",
            "author": "Shai Erera",
            "id": "comment-13542791"
        },
        {
            "date": "2013-01-03T13:12:28+0000",
            "content": "Committed changes to trunk and 4x. I'm sure there will be more improvements / simplifications to that API, we can do them incrementally. ",
            "author": "Shai Erera",
            "id": "comment-13542911"
        },
        {
            "date": "2013-01-05T20:27:59+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1428324\n\nLUCENE-4647: Simplify CategoryDocumentBuilder ",
            "author": "Commit Tag Bot",
            "id": "comment-13544839"
        },
        {
            "date": "2013-01-05T20:28:29+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1428320\n\nLUCENE-4647: Simplify CategoryDocumentBuilder ",
            "author": "Commit Tag Bot",
            "id": "comment-13544870"
        }
    ]
}