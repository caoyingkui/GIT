{
    "id": "SOLR-4591",
    "title": "Add NamedList.getDefault to get values or use a defaulted value",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I seem to be putting a fair amount of code in my components to support having default values for keys that may not be specified in the solrconfig.xml \n\nAdd a function to NamedList that supports getting a value with the option of using a default.",
    "attachments": {
        "SOLR-4591.patch": "https://issues.apache.org/jira/secure/attachment/12573968/SOLR-4591.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Andrew Lundgren",
            "id": "comment-13603966",
            "date": "2013-03-15T23:11:34+0000",
            "content": "Originally I had hoped to use just get for the function name, but using the syntax get(key, defaultValue) would conflict with the get(key,index).   Mine is called getDefault(String name, U default) where U is a generic that isn't the T with which the NamedList is created.\n\nThe patch was made against solr4x "
        },
        {
            "author": "Andrew Lundgren",
            "id": "comment-13603972",
            "date": "2013-03-15T23:20:26+0000",
            "content": "Added line to changes.txt. Clarified javadoc. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13604063",
            "date": "2013-03-16T00:58:27+0000",
            "content": "What about using DefaultSolrParams and #toNamedList instead? "
        },
        {
            "author": "Andrew Lundgren",
            "id": "comment-13605365",
            "date": "2013-03-18T17:12:19+0000",
            "content": "I might be mistaken here, but the usage seems like it would be more difficult to use this, then just the method to the NamedList.  \n\nThe specific use case I am targeting is the init call in a component derived from a SearchComponent.  It passes in a NamedList.  The component code I have seen, (as well as mine) extracts the configuration parameters directly from the NamedList.  \n\nOne way I have seen this handled is some code like this for each value:\n\n// Default initialized as member\nString neededConfig=defaultStringValue;\n\nObject obj= args.get(\"key\");\nif(obj!=null) {\n  try{\n    String value=(String)obj;\n    if(value.empty()) \n{\n      neededConfig=value;\n    }\n  } catch (ClassCastException) \n{\n    // deal with it as appropriate\n  }\n\n\n}\n\nThe update I added allows you to do it like this:\nSting neededConfig;\ntry{\n  neededConfig=args.getDefault(\"key\",defaultStringValue);\n} catch (ClassCastException) {\n// deal with it as appropriate\n}\n\n\nAs I said, I might be mistaken but I think that using the DefaultSolrParams here would not save you much, if any code.  (Though I admit, I haven't seen this used any other Component's init methods, and doing a grep across the solr code didn't show many any.)\n\n\n\n "
        }
    ]
}