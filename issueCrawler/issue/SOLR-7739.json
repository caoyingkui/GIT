{
    "id": "SOLR-7739",
    "title": "Lucene Classification Integration - UpdateRequestProcessor",
    "details": {
        "components": [
            "update"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "It would be nice to have an UpdateRequestProcessor to interact with the Lucene Classification Module and provide an easy way of auto classifying Solr Documents on indexing.\n\nDocumentation will be provided with the patch\nA first design will be provided soon.",
    "attachments": {
        "SOLR-7739.1.patch": "https://issues.apache.org/jira/secure/attachment/12787914/SOLR-7739.1.patch",
        "SOLR-7739.patch": "https://issues.apache.org/jira/secure/attachment/12744943/SOLR-7739.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-30T11:38:15+0000",
            "author": "Alessandro Benedetti",
            "content": "The Design of the Solution of this issue will require  features from the linked issue. ",
            "id": "comment-14608154"
        },
        {
            "date": "2015-07-01T16:27:52+0000",
            "author": "Alessandro Benedetti",
            "content": "Will follow documentation and the patch during the week end. ",
            "id": "comment-14610596"
        },
        {
            "date": "2015-07-04T19:14:20+0000",
            "author": "Alessandro Benedetti",
            "content": "First patch attached, it contains :\n\n\tthe implementation for the Update Request Processor, the Factory.\n\ta Unit Test\n\tSolr Test configuration for the Test\n\tThe Lucene Classification Dependency for the Solr build\n\n ",
            "id": "comment-14614012"
        },
        {
            "date": "2015-07-04T19:14:57+0000",
            "author": "Alessandro Benedetti",
            "content": "http://alexbenedetti.blogspot.co.uk/2015/07/solr-document-classification-part-1.html\n\nDocumentation in the blog post, hopefully it is exhaustive. ",
            "id": "comment-14614014"
        },
        {
            "date": "2015-07-12T17:36:25+0000",
            "author": "Alessandro Benedetti",
            "content": "Java docs fixed ",
            "id": "comment-14623917"
        },
        {
            "date": "2015-07-30T15:05:52+0000",
            "author": "Alessandro Benedetti",
            "content": "Any feedback guys ? ",
            "id": "comment-14647752"
        },
        {
            "date": "2015-07-30T15:12:27+0000",
            "author": "Tommaso Teofili",
            "content": "Alessandro, thanks for your patch, I'll take a look and let you know shortly. ",
            "id": "comment-14647768"
        },
        {
            "date": "2015-09-16T16:23:18+0000",
            "author": "Alessandro Benedetti",
            "content": "Any news on this ?\nCheers ",
            "id": "comment-14790655"
        },
        {
            "date": "2015-10-14T13:46:04+0000",
            "author": "Alessandro Benedetti",
            "content": "After the update of the related patch , applying this patch is straightforward.\nLet me know for any feedback!\n\nCheers ",
            "id": "comment-14956968"
        },
        {
            "date": "2015-12-29T15:45:54+0000",
            "author": "David de Kleer",
            "content": "An easy way to classify text from within SOLR would be a very nice feature! Could you please take another look at this? I have tried to implement this patch but didn't succeed, because the patch underlying this patch (6631) got changed/updated in the meantime. ",
            "id": "comment-15074008"
        },
        {
            "date": "2015-12-29T15:55:56+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi David,\ntomorrow I will update this patch.\nAnd ping the committers for having a feedback !\nThe lucene side has already been officially integrated !\n\nCheers ",
            "id": "comment-15074019"
        },
        {
            "date": "2015-12-29T17:32:54+0000",
            "author": "David de Kleer",
            "content": "Hi Alessandro,\nThank you for your quick response, that's nice! \nWith kind regards,\nDavid ",
            "id": "comment-15074100"
        },
        {
            "date": "2015-12-31T08:34:06+0000",
            "author": "David de Kleer",
            "content": "By the way, wouldn't it be useful to provide confidence values/scores for classifications, so you're able to see how much confidence a classifier has in its predictions?\n\nDavid ",
            "id": "comment-15075844"
        },
        {
            "date": "2016-01-08T19:57:21+0000",
            "author": "David de Kleer",
            "content": "Any updates on your update? \n\nDavid ",
            "id": "comment-15089837"
        },
        {
            "date": "2016-01-11T16:21:22+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi David,\nI quickly took a look and the problem was in the method signature not compliant.\nI will upload a quick fix soon.\n\nRelated the confidence.\nThe classifier already return a confidence score, this is something I plan to return with the Classification Request handler.\nThe update processor is meant to work without human interaction, so it was not indexing any confidence score.\nOf course you are free to customise it!\n\nCheers ",
            "id": "comment-15092211"
        },
        {
            "date": "2016-01-11T16:37:31+0000",
            "author": "Alessandro Benedetti",
            "content": "Method signature updattest solrconfig updated ",
            "id": "comment-15092238"
        },
        {
            "date": "2016-01-11T16:41:12+0000",
            "author": "David de Kleer",
            "content": "Awesome! I will test it soon! :-D\n\nDavid ",
            "id": "comment-15092250"
        },
        {
            "date": "2016-01-12T15:04:26+0000",
            "author": "David de Kleer",
            "content": "Hi Alessandro,\n\nAll right, I've managed to build SOLR from the Github mirror, with your patch applied. I thought you could use it like this?\n\n\n<!-- classification -->\n<updateRequestProcessorChain name=\"classification\">\n    <processor class=\"solr.ClassificationUpdateProcessorFactory\">\n        <str name=\"inputFields\">q_website</str>\n        <str name=\"classField\">labels</str>\n        <str name=\"algorithm\">bayes</str>\n    </processor>\n    <processor class=\"solr.LogUpdateProcessorFactory\"/>\n    <processor class=\"solr.RunUpdateProcessorFactory\"/>\n</updateRequestProcessorChain>\n\n<requestHandler name=\"/update\" class=\"solr.UpdateRequestHandler\">\n    <lst name=\"defaults\">\n        <str name=\"update.chain\">classification</str>\n    </lst>\n</requestHandler>\n\n\n\nBut how is it possible to train a model? I can't trace any activity of the classification updateRequestProcessorChain on an update (labels is a multivalued string btw, don't know if that is a problem). Or am I doing something wrong?\n\nWith kind regards,\n\nDavid ",
            "id": "comment-15094020"
        },
        {
            "date": "2016-01-12T15:26:53+0000",
            "author": "Alessandro Benedetti",
            "content": "David,\ntake a look to the documentation :\n\nhttp://alexbenedetti.blogspot.co.uk/2015/07/solr-document-classification-part-1.html\n\nYou don't need to train any model.\nThe index is your trained model.\nThe multi valued thing should not be a problem.\n\nCheers ",
            "id": "comment-15094051"
        },
        {
            "date": "2016-01-12T16:50:54+0000",
            "author": "David de Kleer",
            "content": "Thank you for your response! Your blogpost has already been my guidance for my adaptations of solrconfig.xml (and the reason I found out about this patch  ) But it could be that I'm missing something.\n\nWith kind regards,\n\nDavid ",
            "id": "comment-15094247"
        },
        {
            "date": "2016-01-12T19:31:39+0000",
            "author": "David de Kleer",
            "content": "Never mind, I added a custom field labels_auto to put the labels in and a print statement to be able to see the labels that were added. Now it's working!  Or well, I can see that it works xD\n\nDavid ",
            "id": "comment-15094597"
        },
        {
            "date": "2016-01-14T12:12:48+0000",
            "author": "Alessandro Benedetti",
            "content": "mmmm David, can you explain why it was not working and what was your difficulty ?\nThe processor is going to assign the class to the document and set the field in the Solr document.\nThe field set is the classField name configured in the solrconfig.\nIt is a pretty simple configuration, could you explain what went wrong ?\nIn this way we can improve the documentation.\n\nCheers ",
            "id": "comment-15098040"
        },
        {
            "date": "2016-01-14T18:34:50+0000",
            "author": "David de Kleer",
            "content": "Hi Alessandro,\n\nIt turned out there was no problem at all, it was more that I didn't see that labels were being added (or not) in SOLR's output/the web interface. That's why I added a print statement and a slight modification to the ClassificationUpdateProcessor, something like\n\n\n...\nscore = classificationResult.getScore();\nSystem.out.println(\"(ClassificationUpdateProcessor) Found class \" + assignedClass + \" with score \" + score + \" for this document.\");\ndoc.addField(\"label_\" + assignedClass, score);\n...\n\n\n\nfor example. The print statement and the searchable score (below 1) gave me an indication that labels were really being added. So again, it turned out it wasn't really a problem. And thanks again for updating the patch! \n\nEDIT: In fact, all of this means that I just wanted to make the distinction between annotations and automatically added labels/categories a bit more clear.\n\nWith kind regards,\n\nDavid ",
            "id": "comment-15098609"
        },
        {
            "date": "2016-02-11T13:42:55+0000",
            "author": "Alessandro Benedetti",
            "content": "Perfect ! Still I have no feedback from the community, it could be useful to get any feedback to improve the component.\nOr trying to understand why it is not good to have it included in Solr ... ",
            "id": "comment-15142743"
        },
        {
            "date": "2016-02-11T14:13:38+0000",
            "author": "Joel Bernstein",
            "content": "I've been interested in this ticket, I just haven't had time to review it yet. I do think this is good feature for Solr and the company I work for, Alfresco, would also find this useful. I hope to carve out some time to review following the 6.0 release. ",
            "id": "comment-15142777"
        },
        {
            "date": "2016-02-11T14:15:56+0000",
            "author": "Alessandro Benedetti",
            "content": "Joel, thank you very much.\nAs you will see, it is a very simple contribution.\nBut I am really curious to have some feedback to improve it and make it more suitable for real cases \nLet me know when you have time,\n\nCheers ",
            "id": "comment-15142783"
        },
        {
            "date": "2016-02-11T14:38:29+0000",
            "author": "Joel Bernstein",
            "content": "I'm also curious about whether LUCENE-6968 can be used with this ticket. ",
            "id": "comment-15142811"
        },
        {
            "date": "2016-02-11T14:49:10+0000",
            "author": "Alessandro Benedetti",
            "content": "Actually the algorithm is a parameter for the Solr Classification Update processor!\nWe could design and develop a DocumentClassifier ( Lucene side) to use the LSH approach.\nThen simply switch to that algorithm in the solrconfig for the use cases we want!\nPotentially we could ask the author to contribute a DocumentClassifier based on that approach OR we could design and develop one.\nI agree it is interesting!\n\nCao Manh Dat what do you think ? ",
            "id": "comment-15142830"
        },
        {
            "date": "2016-02-11T16:23:05+0000",
            "author": "Tommaso Teofili",
            "content": "my bad not having had time to include Alessandro's patch so far.\nI plan to review it by the end of the week, if anyone has some spare cycle to overtake this of course feel free  ",
            "id": "comment-15142968"
        },
        {
            "date": "2016-02-11T16:43:35+0000",
            "author": "Alessandro Benedetti",
            "content": "No worries Tommaso \nTake your time, any feedback is welcome to improve the patch !\n\nCheers ",
            "id": "comment-15143002"
        },
        {
            "date": "2016-02-14T08:37:54+0000",
            "author": "Tommaso Teofili",
            "content": "I managed to have a brief look and I think this probably deserves either a separate module or anyway not to be in core as to me this sounds more like an extension that some Solr installations may or may not want to use e.g. like SolrCell, SolrUIMA, etc.\nAlso the ant build fails as it seems the Lucene Classification module is not correctly imported il Solr Core module, I'll have a second look later today. ",
            "id": "comment-15146449"
        },
        {
            "date": "2016-02-14T13:46:52+0000",
            "author": "Alessandro Benedetti",
            "content": "Hey Tommaso, thanks for the review !\nReally weird the build fails, pretty sure the only addition is the dependency to the lucene classification module in the commons-build.xml !\nI will check tomorrow why is not building anymore !\n\nRelated the module location feel free to identify the proper location!\nAlthough I think this case is different from SolrUIMA as it is not an integration with an external framework, it is still only using an internal Lucene module !\n\nCheers ",
            "id": "comment-15146549"
        },
        {
            "date": "2016-02-14T15:02:52+0000",
            "author": "Joel Bernstein",
            "content": "I haven't done a review yet, but it sounds like it would make sense in core. The patch seems fairly small and the functionality could be considered core to Solr's central use cases. ",
            "id": "comment-15146603"
        },
        {
            "date": "2016-02-14T15:17:05+0000",
            "author": "Joel Bernstein",
            "content": "I mentioned the LSH work in another comment, but I'm also interested in Logistic Regression classification (SOLR-8492), for use cases like fraud detection. This also ties in with the TopicStream (SOLR-8588) work, where topics can be created based on document classifications. ",
            "id": "comment-15146608"
        },
        {
            "date": "2016-02-15T10:17:39+0000",
            "author": "Alessandro Benedetti",
            "content": "Joel, very interesting topics ! I will read more about them as soon as I have time, from the related patches.\n\nRelated the Classification Processor, as you will notice is a very simple piece.\nI definitely would like to spend some time to improve it.\n\n ",
            "id": "comment-15147166"
        },
        {
            "date": "2016-02-15T10:42:03+0000",
            "author": "Tommaso Teofili",
            "content": "good points Joel Bernstein, I've attached Alessandro Benedetti's patch with a few changes in order to make the build (compile and test) succeed (keeping ClassificationUpdateProcessor\u00a0in solr-core).  \nant documentation and ant documentation-lint also succeed.\nant idea doesn't correctly set the dependencies for solr-core so that one has to manually add lucene-classification to the classpath and maybe it's the same for ant eclipse ",
            "id": "comment-15147189"
        },
        {
            "date": "2016-02-16T09:39:02+0000",
            "author": "Tommaso Teofili",
            "content": "After having had a closer look at the code I think it generally looks good.\nOne thing I noticed is that the Query parameter to build Classifiers\u00a0that use a subset of the index is missing, while it's ok for a first implementation I think that may be good to have, also maybe in the future we may want to decouple the field that is used as the target classification value (e.g. used for \"training\") from the field where we put the actual classification value assigned by the Classifier to the document.\nHowever I'm generally fine with the current state, but it'd be good if we could fix the ant idea and ant eclipse targets to correctly set Lucene Classification jar into Solr's classpath otherwise no one will be able to e.g. run tests from IDE anymore after this patch has been committed. ",
            "id": "comment-15148344"
        },
        {
            "date": "2016-02-16T09:55:59+0000",
            "author": "Alessandro Benedetti",
            "content": "Thanks Tommaso ! Only one clarification, in the patch you attached I see :\n\n     + jar-misc, jar-spatial, jar-grouping, jar-queries, jar-queryparser, jar-join, jar-sandbox, jar-classification\">\n\nAs the only difference, as the other 2 lines modified seem to be already in the original patch.\nAm I right ?\nThanks anyway to point me that  ",
            "id": "comment-15148372"
        },
        {
            "date": "2016-02-16T09:57:41+0000",
            "author": "Tommaso Teofili",
            "content": "yes Alessandro Benedetti, that's what I had to add in order to make it possible for solr-core to compile correctly. ",
            "id": "comment-15148375"
        },
        {
            "date": "2016-02-22T08:18:20+0000",
            "author": "Tommaso Teofili",
            "content": "Alessandro Benedetti is there any chance you can provide a new version of the patch that fixes the classpaths for ant idea and ant eclipse? ",
            "id": "comment-15156608"
        },
        {
            "date": "2016-03-07T11:37:45+0000",
            "author": "Alessandro Benedetti",
            "content": "Tommaso Teofili I ws on Holidays, I take a look when I am back , in a couple of days !\nThanks ! ",
            "id": "comment-15182906"
        },
        {
            "date": "2016-03-10T17:22:05+0000",
            "author": "Alessandro Benedetti",
            "content": "ant idea has been fixed, eclipse should work.\nAny feedback from eclipse users ?\nI run ant build and it seems ok as well.\nI agree 100% with your suggested improvements Tommaso Teofili , but I think we can add them later ! ",
            "id": "comment-15189580"
        },
        {
            "date": "2016-03-15T08:12:24+0000",
            "author": "Tommaso Teofili",
            "content": "Any feedback from eclipse users ?\n\nAlessandro Benedetti did you try yourself with eclipse ? ",
            "id": "comment-15194900"
        },
        {
            "date": "2016-03-15T08:57:24+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi Tommaso,\nI didn't because I don't have Eclipse installed at the minute, and I don't use it since few years ago!\n\nMy assumption that it should work is because I took a look to :\n\ndev-tools/eclipse/dot.classpath.xsl\n\nAnd it seems to not contain specific libraries like the IntelliJ Idea does.\nAny Eclipse User feedback could be beneficial.\nIf we get nothing, I will eventually install Eclipse on my own and try! ",
            "id": "comment-15194953"
        },
        {
            "date": "2016-03-15T10:46:48+0000",
            "author": "Tommaso Teofili",
            "content": "Alessandro, I also use IntelliJ, however I wanted to make sure that we do not break other devs' setups just because they use a different IDE.\nUsually this is not needed but since we observed that we needed to adjust the classpaths for IntelliJ to work it was mandatory to check that also Eclipse setup doesn't get screwed up.\nAnyway, installing and checking with ant eclipse was a ~10 minutes thing:\n\n\tdownload eclipse 5m\n\tant eclipse 1m\n\timport lucene-solr into eclipse 1m\n\tcheck setup is clean (e.g. check code compiles, run a test, etc.) 1m\n\tclose and delete eclipse 1m\nSince everything seemed to work I'll proceed with committing this patch.\n\n ",
            "id": "comment-15195090"
        },
        {
            "date": "2016-03-15T11:29:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5801caab6c5fb881a590e06401096ea04111d905 in lucene-solr's branch refs/heads/master from Tommaso Teofili\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5801caa ]\n\nSOLR-7739 - applied patch from Alessandro Benedetti for integrating Lucene classification into Solr ",
            "id": "comment-15195124"
        },
        {
            "date": "2016-03-15T11:48:00+0000",
            "author": "Tommaso Teofili",
            "content": "Alessandro Benedetti would it be possible for you to create a documentation page on our wiki ? ",
            "id": "comment-15195144"
        },
        {
            "date": "2016-03-15T12:30:31+0000",
            "author": "Alessandro Benedetti",
            "content": "Absolutely, As soon as I have time I will do that, is necessary to obtain the permission in some way ? \nI will check later with Cassandra ( she's the responsible if I remember well) or in the mailing list.\nThanks !\n\nCheers ",
            "id": "comment-15195208"
        },
        {
            "date": "2016-03-15T13:01:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 15fdfd3caa54c1e6d8cf3435ded285c3b65bea8c in lucene-solr's branch refs/heads/branch_6x from Tommaso Teofili\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=15fdfd3 ]\n\nSOLR-7739 - applied patch from Alessandro Benedetti for integrating Lucene classification into Solr\n(cherry picked from commit 5801caa) ",
            "id": "comment-15195259"
        },
        {
            "date": "2016-05-10T22:09:29+0000",
            "author": "Hoss Man",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 ",
            "id": "comment-15279083"
        },
        {
            "date": "2016-05-31T13:21:11+0000",
            "author": "Tomas Ramanauskas",
            "content": "Hello, I tried this feature few days ago, but I couldn't get it to work. I left couple of comments on this Blog site with my examples:\n\nhttps://alexbenedetti.blogspot.co.uk/2015/07/solr-document-classification-part-1.html\n\nMay someone who was able to get this feature to work, share some query examples?  ",
            "id": "comment-15307712"
        },
        {
            "date": "2016-06-20T09:45:23+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi Tomas, the best place for this questions I would say it is the Solr mailing list.\nI would suggest you to write an email with your :\n\n1) Solr Version\n2) Solr Configuration\n3) Solr Index you built\n\nAnd then I can give you an extensive response  ",
            "id": "comment-15339255"
        },
        {
            "date": "2016-06-20T10:00:26+0000",
            "author": "Alessandro Benedetti",
            "content": "Gents,\nis this included in the 6.1 release Adrien Grand Hoss Man ?\nBecause from the code perspective and the \"Fix Version\" Jira field, I can say yes, but it is not in the release notes ...\nAm I missing anything ?\n\nCheers ",
            "id": "comment-15339266"
        },
        {
            "date": "2016-06-20T10:09:19+0000",
            "author": "Tomas Ramanauskas",
            "content": ">> Solr Version:\n6.1.0-68\n\n>> Solr Configuration\n\nI will attach solrconfig.xml\n\n>> I build in index using this command:\n./solr create -c demo \n\nWhat else shall I provide? ",
            "id": "comment-15339277"
        },
        {
            "date": "2016-06-20T10:13:08+0000",
            "author": "Tomas Ramanauskas",
            "content": "Not sure, I can attach the file here. \n\nThis is the configuration file:\n./server/solr/demo/conf/solrconfig.xml\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!--\n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The ASF licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<!-- \n     For more details about configurations options that may appear in\n     this file, see http://wiki.apache.org/solr/SolrConfigXml. \n-->\n<config>\n  <!-- In all configuration below, a prefix of \"solr.\" for class names\n       is an alias that causes solr to search appropriate packages,\n       including org.apache.solr.(search|update|request|core|analysis)\n\n       You may also specify a fully qualified Java classname if you\n       have your own custom plugins.\n    -->\n\n  <!-- Controls what version of Lucene various components of Solr\n       adhere to.  Generally, you want to use the latest version to\n       get all bug fixes and improvements. It is highly recommended\n       that you fully re-index after changing this setting as it can\n       affect both how text is indexed and queried.\n  -->\n  <luceneMatchVersion>6.1.0</luceneMatchVersion>\n\n  <!-- <lib/> directives can be used to instruct Solr to load any Jars\n       identified and use them to resolve any \"plugins\" specified in\n       your solrconfig.xml or schema.xml (ie: Analyzers, Request\n       Handlers, etc...).\n\n       All directories and paths are resolved relative to the\n       instanceDir.\n\n       Please note that <lib/> directives are processed in the order\n       that they appear in your solrconfig.xml file, and are \"stacked\" \n       on top of each other when building a ClassLoader - so if you have \n       plugin jars with dependencies on other jars, the \"lower level\" \n       dependency jars should be loaded first.\n\n       If a \"./lib\" directory exists in your instanceDir, all files\n       found in it are included as if you had used the following\n       syntax...\n       \n              <lib dir=\"./lib\" />\n    -->\n\n  <!-- A 'dir' option by itself adds any files found in the directory \n       to the classpath, this is useful for including all jars in a\n       directory.\n\n       When a 'regex' is specified in addition to a 'dir', only the\n       files in that directory which completely match the regex\n       (anchored on both ends) will be included.\n\n       If a 'dir' option (with or without a regex) is used and nothing\n       is found that matches, a warning will be logged.\n\n       The examples below can be used to load some solr-contribs along \n       with their external dependencies.\n    -->\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/extraction/lib\" regex=\".*\\.jar\" />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-cell-\\d.*\\.jar\" />\n\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/clustering/lib/\" regex=\".*\\.jar\" />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-clustering-\\d.*\\.jar\" />\n\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/langid/lib/\" regex=\".*\\.jar\" />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-langid-\\d.*\\.jar\" />\n\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/velocity/lib\" regex=\".*\\.jar\" />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-velocity-\\d.*\\.jar\" />\n  <!-- an exact 'path' can be used instead of a 'dir' to specify a \n       specific jar file.  This will cause a serious error to be logged \n       if it can't be loaded.\n    -->\n  <!--\n     <lib path=\"../a-jar-that-does-not-exist.jar\" /> \n  -->\n\n  <!-- Data Directory\n\n       Used to specify an alternate directory to hold all index data\n       other than the default ./data under the Solr home.  If\n       replication is in use, this should match the replication\n       configuration.\n    -->\n  <dataDir>${solr.data.dir:}</dataDir>\n\n\n  <!-- The DirectoryFactory to use for indexes.\n       \n       solr.StandardDirectoryFactory is filesystem\n       based and tries to pick the best implementation for the current\n       JVM and platform.  solr.NRTCachingDirectoryFactory, the default,\n       wraps solr.StandardDirectoryFactory and caches small files in memory\n       for better NRT performance.\n\n       One can force a particular implementation via solr.MMapDirectoryFactory,\n       solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.\n\n       solr.RAMDirectoryFactory is memory based, not\n       persistent, and doesn't work with replication.\n    -->\n  <directoryFactory name=\"DirectoryFactory\"\n                    class=\"${solr.directoryFactory:solr.NRTCachingDirectoryFactory}\"/>\n\n  <!-- The CodecFactory for defining the format of the inverted index.\n       The default implementation is SchemaCodecFactory, which is the official Lucene\n       index format, but hooks into the schema to provide per-field customization of\n       the postings lists and per-document values in the fieldType element\n       (postingsFormat/docValuesFormat). Note that most of the alternative implementations\n       are experimental, so if you choose to customize the index format, it's a good\n       idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)\n       before upgrading to a newer version to avoid unnecessary reindexing.\n       A \"compressionMode\" string element can be added to <codecFactory> to choose \n       between the existing compression modes in the default codec: \"BEST_SPEED\" (default)\n       or \"BEST_COMPRESSION\".\n  -->\n  <codecFactory class=\"solr.SchemaCodecFactory\"/>\n\n  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n       Index Config - These settings control low-level behavior of indexing\n       Most example settings here show the default value, but are commented\n       out, to more easily see where customizations have been made.\n       \n       Note: This replaces <indexDefaults> and <mainIndex> from older versions\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n  <indexConfig>\n    <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a \n         LimitTokenCountFilterFactory in your fieldType definition. E.g. \n     <filter class=\"solr.LimitTokenCountFilterFactory\" maxTokenCount=\"10000\"/>\n    -->\n    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->\n    <!-- <writeLockTimeout>1000</writeLockTimeout>  -->\n\n    <!-- Expert: Enabling compound file will use less files for the index, \n         using fewer file descriptors on the expense of performance decrease. \n         Default in Lucene is \"true\". Default in Solr is \"false\" (since 3.6) -->\n    <!-- <useCompoundFile>false</useCompoundFile> -->\n\n    <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene\n         indexing for buffering added documents and deletions before they are\n         flushed to the Directory.\n         maxBufferedDocs sets a limit on the number of documents buffered\n         before flushing.\n         If both ramBufferSizeMB and maxBufferedDocs is set, then\n         Lucene will flush based on whichever limit is hit first.  -->\n    <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->\n    <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->\n\n    <!-- Expert: Merge Policy \n         The Merge Policy in Lucene controls how merging of segments is done.\n         The default since Solr/Lucene 3.3 is TieredMergePolicy.\n         The default since Lucene 2.3 was the LogByteSizeMergePolicy,\n         Even older versions of Lucene used LogDocMergePolicy.\n      -->\n    <!--\n        <mergePolicyFactory class=\"org.apache.solr.index.TieredMergePolicyFactory\">\n          <int name=\"maxMergeAtOnce\">10</int>\n          <int name=\"segmentsPerTier\">10</int>\n          <double name=\"noCFSRatio\">0.1</double>\n        </mergePolicyFactory>\n      -->\n\n    <!-- Expert: Merge Scheduler\n         The Merge Scheduler in Lucene controls how merges are\n         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)\n         can perform merges in the background using separate threads.\n         The SerialMergeScheduler (Lucene 2.2 default) does not.\n     -->\n    <!-- \n       <mergeScheduler class=\"org.apache.lucene.index.ConcurrentMergeScheduler\"/>\n       -->\n\n    <!-- LockFactory \n\n         This option specifies which Lucene LockFactory implementation\n         to use.\n      \n         single = SingleInstanceLockFactory - suggested for a\n                  read-only index or when there is no possibility of\n                  another process trying to modify the index.\n         native = NativeFSLockFactory - uses OS native file locking.\n                  Do not use when multiple solr webapps in the same\n                  JVM are attempting to share a single index.\n         simple = SimpleFSLockFactory  - uses a plain file for locking\n\n         Defaults: 'native' is default for Solr3.6 and later, otherwise\n                   'simple' is the default\n\n         More details on the nuances of each LockFactory...\n         http://wiki.apache.org/lucene-java/AvailableLockFactories\n    -->\n    <lockType>${solr.lock.type:native}</lockType>\n\n    <!-- Commit Deletion Policy\n         Custom deletion policies can be specified here. The class must\n         implement org.apache.lucene.index.IndexDeletionPolicy.\n\n         The default Solr IndexDeletionPolicy implementation supports\n         deleting index commit points on number of commits, age of\n         commit point and optimized status.\n         \n         The latest commit point should always be preserved regardless\n         of the criteria.\n    -->\n    <!-- \n    <deletionPolicy class=\"solr.SolrDeletionPolicy\">\n    -->\n    <!-- The number of commit points to be kept -->\n    <!-- <str name=\"maxCommitsToKeep\">1</str> -->\n    <!-- The number of optimized commit points to be kept -->\n    <!-- <str name=\"maxOptimizedCommitsToKeep\">0</str> -->\n    <!--\n        Delete all commit points once they have reached the given age.\n        Supports DateMathParser syntax e.g.\n      -->\n    <!--\n       <str name=\"maxCommitAge\">30MINUTES</str>\n       <str name=\"maxCommitAge\">1DAY</str>\n    -->\n    <!-- \n    </deletionPolicy>\n    -->\n\n    <!-- Lucene Infostream\n       \n         To aid in advanced debugging, Lucene provides an \"InfoStream\"\n         of detailed information when indexing.\n\n         Setting The value to true will instruct the underlying Lucene\n         IndexWriter to write its debugging info the specified file\n      -->\n    <!-- <infoStream file=\"INFOSTREAM.txt\">false</infoStream> -->\n  </indexConfig>\n\n\n  <!-- JMX\n       \n       This example enables JMX if and only if an existing MBeanServer\n       is found, use this if you want to configure JMX through JVM\n       parameters. Remove this to disable exposing Solr configuration\n       and statistics to JMX.\n\n       For more details see http://wiki.apache.org/solr/SolrJmx\n    -->\n  <jmx />\n  <!-- If you want to connect to a particular server, specify the\n       agentId \n    -->\n  <!-- <jmx agentId=\"myAgent\" /> -->\n  <!-- If you want to start a new MBeanServer, specify the serviceUrl -->\n  <!-- <jmx serviceUrl=\"service:jmx:rmi:///jndi/rmi://localhost:9999/solr\"/>\n    -->\n\n  <!-- The default high-performance update handler -->\n  <updateHandler class=\"solr.DirectUpdateHandler2\">\n\n    <!-- Enables a transaction log, used for real-time get, durability, and\n         and solr cloud replica recovery.  The log can grow as big as\n         uncommitted changes to the index, so use of a hard autoCommit\n         is recommended (see below).\n         \"dir\" - the target directory for transaction logs, defaults to the\n                solr data directory.\n         \"numVersionBuckets\" - sets the number of buckets used to keep\n                track of max version values when checking for re-ordered\n                updates; increase this value to reduce the cost of\n                synchronizing access to version buckets during high-volume\n                indexing, this requires 8 bytes (long) * numVersionBuckets\n                of heap space per Solr core.\n    -->\n    <updateLog>\n      <str name=\"dir\">${solr.ulog.dir:}</str>\n      <int name=\"numVersionBuckets\">${solr.ulog.numVersionBuckets:65536}</int>\n    </updateLog>\n\n    <!-- AutoCommit\n\n         Perform a hard commit automatically under certain conditions.\n         Instead of enabling autoCommit, consider using \"commitWithin\"\n         when adding documents. \n\n         http://wiki.apache.org/solr/UpdateXmlMessages\n\n         maxDocs - Maximum number of documents to add since the last\n                   commit before automatically triggering a new commit.\n\n         maxTime - Maximum amount of time in ms that is allowed to pass\n                   since a document was added before automatically\n                   triggering a new commit. \n         openSearcher - if false, the commit causes recent index changes\n           to be flushed to stable storage, but does not cause a new\n           searcher to be opened to make those changes visible.\n\n         If the updateLog is enabled, then it's highly recommended to\n         have some sort of hard autoCommit to limit the log size.\n      -->\n    <autoCommit>\n      <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>\n      <openSearcher>false</openSearcher>\n    </autoCommit>\n\n    <!-- softAutoCommit is like autoCommit except it causes a\n         'soft' commit which only ensures that changes are visible\n         but does not ensure that data is synced to disk.  This is\n         faster and more near-realtime friendly than a hard commit.\n      -->\n\n    <autoSoftCommit>\n      <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>\n    </autoSoftCommit>\n\n    <!-- Update Related Event Listeners\n         \n         Various IndexWriter related events can trigger Listeners to\n         take actions.\n\n         postCommit - fired after every commit or optimize command\n         postOptimize - fired after every optimize command\n      -->\n    <!-- The RunExecutableListener executes an external command from a\n         hook such as postCommit or postOptimize.\n         \n         exe - the name of the executable to run\n         dir - dir to use as the current working directory. (default=\".\")\n         wait - the calling thread waits until the executable returns. \n                (default=\"true\")\n         args - the arguments to pass to the program.  (default is none)\n         env - environment variables to set.  (default is none)\n      -->\n    <!-- This example shows how RunExecutableListener could be used\n         with the script based replication...\n         http://wiki.apache.org/solr/CollectionDistribution\n      -->\n    <!--\n       <listener event=\"postCommit\" class=\"solr.RunExecutableListener\">\n         <str name=\"exe\">solr/bin/snapshooter</str>\n         <str name=\"dir\">.</str>\n         <bool name=\"wait\">true</bool>\n         <arr name=\"args\"> <str>arg1</str> <str>arg2</str> </arr>\n         <arr name=\"env\"> <str>MYVAR=val1</str> </arr>\n       </listener>\n      -->\n\n  </updateHandler>\n\n  <!-- IndexReaderFactory\n\n       Use the following format to specify a custom IndexReaderFactory,\n       which allows for alternate IndexReader implementations.\n\n       ** Experimental Feature **\n\n       Please note - Using a custom IndexReaderFactory may prevent\n       certain other features from working. The API to\n       IndexReaderFactory may change without warning or may even be\n       removed from future releases if the problems cannot be\n       resolved.\n\n\n       ** Features that may not work with custom IndexReaderFactory **\n\n       The ReplicationHandler assumes a disk-resident index. Using a\n       custom IndexReader implementation may cause incompatibility\n       with ReplicationHandler and may cause replication to not work\n       correctly. See SOLR-1366 for details.\n\n    -->\n  <!--\n  <indexReaderFactory name=\"IndexReaderFactory\" class=\"package.class\">\n    <str name=\"someArg\">Some Value</str>\n  </indexReaderFactory >\n  -->\n\n  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n       Query section - these settings control query time things like caches\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n  <query>\n    <!-- Max Boolean Clauses\n\n         Maximum number of clauses in each BooleanQuery,  an exception\n         is thrown if exceeded.\n\n         ** WARNING **\n         \n         This option actually modifies a global Lucene property that\n         will affect all SolrCores.  If multiple solrconfig.xml files\n         disagree on this property, the value at any given moment will\n         be based on the last SolrCore to be initialized.\n         \n      -->\n    <maxBooleanClauses>1024</maxBooleanClauses>\n\n\n    <!-- Solr Internal Query Caches\n\n         There are two implementations of cache available for Solr,\n         LRUCache, based on a synchronized LinkedHashMap, and\n         FastLRUCache, based on a ConcurrentHashMap.  \n\n         FastLRUCache has faster gets and slower puts in single\n         threaded operation and thus is generally faster than LRUCache\n         when the hit ratio of the cache is high (> 75%), and may be\n         faster under other scenarios on multi-cpu systems.\n    -->\n\n    <!-- Filter Cache\n\n         Cache used by SolrIndexSearcher for filters (DocSets),\n         unordered sets of *all* documents that match a query.  When a\n         new searcher is opened, its caches may be prepopulated or\n         \"autowarmed\" using data from caches in the old searcher.\n         autowarmCount is the number of items to prepopulate.  For\n         LRUCache, the autowarmed items will be the most recently\n         accessed items.\n\n         Parameters:\n           class - the SolrCache implementation LRUCache or\n               (LRUCache or FastLRUCache)\n           size - the maximum number of entries in the cache\n           initialSize - the initial capacity (number of entries) of\n               the cache.  (see java.util.HashMap)\n           autowarmCount - the number of entries to prepopulate from\n               and old cache.\n      -->\n    <filterCache class=\"solr.FastLRUCache\"\n                 size=\"512\"\n                 initialSize=\"512\"\n                 autowarmCount=\"0\"/>\n\n    <!-- Query Result Cache\n         \n         Caches results of searches - ordered lists of document ids\n         (DocList) based on a query, a sort, and the range of documents requested.\n         Additional supported parameter by LRUCache:\n            maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed\n                       to occupy\n      -->\n    <queryResultCache class=\"solr.LRUCache\"\n                      size=\"512\"\n                      initialSize=\"512\"\n                      autowarmCount=\"0\"/>\n\n    <!-- Document Cache\n\n         Caches Lucene Document objects (the stored fields for each\n         document).  Since Lucene internal document ids are transient,\n         this cache will not be autowarmed.\n      -->\n    <documentCache class=\"solr.LRUCache\"\n                   size=\"512\"\n                   initialSize=\"512\"\n                   autowarmCount=\"0\"/>\n\n    <!-- custom cache currently used by block join -->\n    <cache name=\"perSegFilter\"\n           class=\"solr.search.LRUCache\"\n           size=\"10\"\n           initialSize=\"0\"\n           autowarmCount=\"10\"\n           regenerator=\"solr.NoOpRegenerator\" />\n\n    <!-- Field Value Cache\n         \n         Cache used to hold field values that are quickly accessible\n         by document id.  The fieldValueCache is created by default\n         even if not configured here.\n      -->\n    <!--\n       <fieldValueCache class=\"solr.FastLRUCache\"\n                        size=\"512\"\n                        autowarmCount=\"128\"\n                        showItems=\"32\" />\n      -->\n\n    <!-- Custom Cache\n\n         Example of a generic cache.  These caches may be accessed by\n         name through SolrIndexSearcher.getCache(),cacheLookup(), and\n         cacheInsert().  The purpose is to enable easy caching of\n         user/application level data.  The regenerator argument should\n         be specified as an implementation of solr.CacheRegenerator \n         if autowarming is desired.  \n      -->\n    <!--\n       <cache name=\"myUserCache\"\n              class=\"solr.LRUCache\"\n              size=\"4096\"\n              initialSize=\"1024\"\n              autowarmCount=\"1024\"\n              regenerator=\"com.mycompany.MyRegenerator\"\n              />\n      -->\n\n\n    <!-- Lazy Field Loading\n\n         If true, stored fields that are not requested will be loaded\n         lazily.  This can result in a significant speed improvement\n         if the usual case is to not load all stored fields,\n         especially if the skipped fields are large compressed text\n         fields.\n    -->\n    <enableLazyFieldLoading>true</enableLazyFieldLoading>\n\n    <!-- Use Filter For Sorted Query\n \n         A possible optimization that attempts to use a filter to\n         satisfy a search.  If the requested sort does not include\n         score, then the filterCache will be checked for a filter\n         matching the query. If found, the filter will be used as the\n         source of document ids, and then the sort will be applied to\n         that.\n \n         For most situations, this will not be useful unless you\n         frequently get the same search repeatedly with different sort\n         options, and none of them ever use \"score\"\n      -->\n    <!--\n       <useFilterForSortedQuery>true</useFilterForSortedQuery>\n      -->\n\n    <!-- Result Window Size\n \n         An optimization for use with the queryResultCache.  When a search\n         is requested, a superset of the requested number of document ids\n         are collected.  For example, if a search for a particular query\n         requests matching documents 10 through 19, and queryWindowSize is 50,\n         then documents 0 through 49 will be collected and cached.  Any further\n         requests in that range can be satisfied via the cache.  \n      -->\n    <queryResultWindowSize>20</queryResultWindowSize>\n\n    <!-- Maximum number of documents to cache for any entry in the\n         queryResultCache. \n      -->\n    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>\n\n    <!-- Query Related Event Listeners\n \n         Various IndexSearcher related events can trigger Listeners to\n         take actions.\n \n         newSearcher - fired whenever a new searcher is being prepared\n         and there is a current searcher handling requests (aka\n         registered).  It can be used to prime certain caches to\n         prevent long request times for certain requests.\n \n         firstSearcher - fired whenever a new searcher is being\n         prepared but there is no current registered searcher to handle\n         requests or to gain autowarming data from.\n \n         \n      -->\n    <!-- QuerySenderListener takes an array of NamedList and executes a\n         local query request for each NamedList in sequence. \n      -->\n    <listener event=\"newSearcher\" class=\"solr.QuerySenderListener\">\n      <arr name=\"queries\">\n        <!--\n           <lst><str name=\"q\">solr</str><str name=\"sort\">price asc</str></lst>\n           <lst><str name=\"q\">rocks</str><str name=\"sort\">weight asc</str></lst>\n          -->\n      </arr>\n    </listener>\n    <listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\">\n      <arr name=\"queries\">\n        <!--\n        <lst>\n          <str name=\"q\">static firstSearcher warming in solrconfig.xml</str>\n        </lst>\n        -->\n      </arr>\n    </listener>\n\n    <!-- Use Cold Searcher\n\n         If a search request comes in and there is no current\n         registered searcher, then immediately register the still\n         warming searcher and use it.  If \"false\" then all requests\n         will block until the first searcher is done warming.\n      -->\n    <useColdSearcher>false</useColdSearcher>\n\n    <!-- Max Warming Searchers\n         \n         Maximum number of searchers that may be warming in the\n         background concurrently.  An error is returned if this limit\n         is exceeded.\n\n         Recommend values of 1-2 for read-only slaves, higher for\n         masters w/o cache warming.\n      -->\n    <maxWarmingSearchers>2</maxWarmingSearchers>\n\n  </query>\n\n\n  <!-- Request Dispatcher\n\n       This section contains instructions for how the SolrDispatchFilter\n       should behave when processing requests for this SolrCore.\n\n       handleSelect is a legacy option that affects the behavior of requests\n       such as /select?qt=XXX\n\n       handleSelect=\"true\" will cause the SolrDispatchFilter to process\n       the request and dispatch the query to a handler specified by the \n       \"qt\" param, assuming \"/select\" isn't already registered.\n\n       handleSelect=\"false\" will cause the SolrDispatchFilter to\n       ignore \"/select\" requests, resulting in a 404 unless a handler\n       is explicitly registered with the name \"/select\"\n\n       handleSelect=\"true\" is not recommended for new users, but is the default\n       for backwards compatibility\n    -->\n  <requestDispatcher handleSelect=\"false\" >\n    <!-- Request Parsing\n\n         These settings indicate how Solr Requests may be parsed, and\n         what restrictions may be placed on the ContentStreams from\n         those requests\n\n         enableRemoteStreaming - enables use of the stream.file\n         and stream.url parameters for specifying remote streams.\n\n         multipartUploadLimitInKB - specifies the max size (in KiB) of\n         Multipart File Uploads that Solr will allow in a Request.\n         \n         formdataUploadLimitInKB - specifies the max size (in KiB) of\n         form data (application/x-www-form-urlencoded) sent via\n         POST. You can use POST to pass request parameters not\n         fitting into the URL.\n         \n         addHttpRequestToContext - if set to true, it will instruct\n         the requestParsers to include the original HttpServletRequest\n         object in the context map of the SolrQueryRequest under the \n         key \"httpRequest\". It will not be used by any of the existing\n         Solr components, but may be useful when developing custom \n         plugins.\n         \n         *** WARNING ***\n         The settings below authorize Solr to fetch remote files, You\n         should make sure your system has some authentication before\n         using enableRemoteStreaming=\"true\"\n\n      -->\n    <requestParsers enableRemoteStreaming=\"true\"\n                    multipartUploadLimitInKB=\"2048000\"\n                    formdataUploadLimitInKB=\"2048\"\n                    addHttpRequestToContext=\"false\"/>\n\n    <!-- HTTP Caching\n\n         Set HTTP caching related parameters (for proxy caches and clients).\n\n         The options below instruct Solr not to output any HTTP Caching\n         related headers\n      -->\n    <httpCaching never304=\"true\" />\n    <!-- If you include a <cacheControl> directive, it will be used to\n         generate a Cache-Control header (as well as an Expires header\n         if the value contains \"max-age=\")\n         \n         By default, no Cache-Control header is generated.\n         \n         You can use the <cacheControl> option even if you have set\n         never304=\"true\"\n      -->\n    <!--\n       <httpCaching never304=\"true\" >\n         <cacheControl>max-age=30, public</cacheControl> \n       </httpCaching>\n      -->\n    <!-- To enable Solr to respond with automatically generated HTTP\n         Caching headers, and to response to Cache Validation requests\n         correctly, set the value of never304=\"false\"\n         \n         This will cause Solr to generate Last-Modified and ETag\n         headers based on the properties of the Index.\n\n         The following options can also be specified to affect the\n         values of these headers...\n\n         lastModFrom - the default value is \"openTime\" which means the\n         Last-Modified value (and validation against If-Modified-Since\n         requests) will all be relative to when the current Searcher\n         was opened.  You can change it to lastModFrom=\"dirLastMod\" if\n         you want the value to exactly correspond to when the physical\n         index was last modified.\n\n         etagSeed=\"...\" is an option you can change to force the ETag\n         header (and validation against If-None-Match requests) to be\n         different even if the index has not changed (ie: when making\n         significant changes to your config file)\n\n         (lastModifiedFrom and etagSeed are both ignored if you use\n         the never304=\"true\" option)\n      -->\n    <!--\n       <httpCaching lastModifiedFrom=\"openTime\"\n                    etagSeed=\"Solr\">\n         <cacheControl>max-age=30, public</cacheControl> \n       </httpCaching>\n      -->\n  </requestDispatcher>\n\n  <!-- Request Handlers \n\n       http://wiki.apache.org/solr/SolrRequestHandler\n\n       Incoming queries will be dispatched to a specific handler by name\n       based on the path specified in the request.\n\n       Legacy behavior: If the request path uses \"/select\" but no Request\n       Handler has that name, and if handleSelect=\"true\" has been specified in\n       the requestDispatcher, then the Request Handler is dispatched based on\n       the qt parameter.  Handlers without a leading '/' are accessed this way\n       like so: http://host/app/[core/]select?qt=name  If no qt is\n       given, then the requestHandler that declares default=\"true\" will be\n       used or the one named \"standard\".\n\n       If a Request Handler is declared with startup=\"lazy\", then it will\n       not be initialized until the first request that uses it.\n\n    -->\n  <!-- SearchHandler\n\n       http://wiki.apache.org/solr/SearchHandler\n\n       For processing Search Queries, the primary Request Handler\n       provided with Solr is \"SearchHandler\" It delegates to a sequent\n       of SearchComponents (see below) and supports distributed\n       queries across multiple shards\n    -->\n  <requestHandler name=\"/select\" class=\"solr.SearchHandler\">\n    <!-- default values for query parameters can be specified, these\n         will be overridden by parameters in the request\n      -->\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n      <int name=\"rows\">10</int>\n      <!-- <str name=\"df\">text</str> -->\n    </lst>\n    <!-- In addition to defaults, \"appends\" params can be specified\n         to identify values which should be appended to the list of\n         multi-val params from the query (or the existing \"defaults\").\n      -->\n    <!-- In this example, the param \"fq=instock:true\" would be appended to\n         any query time fq params the user may specify, as a mechanism for\n         partitioning the index, independent of any user selected filtering\n         that may also be desired (perhaps as a result of faceted searching).\n\n         NOTE: there is *absolutely* nothing a client can do to prevent these\n         \"appends\" values from being used, so don't use this mechanism\n         unless you are sure you always want it.\n      -->\n    <!--\n       <lst name=\"appends\">\n         <str name=\"fq\">inStock:true</str>\n       </lst>\n      -->\n    <!-- \"invariants\" are a way of letting the Solr maintainer lock down\n         the options available to Solr clients.  Any params values\n         specified here are used regardless of what values may be specified\n         in either the query, the \"defaults\", or the \"appends\" params.\n\n         In this example, the facet.field and facet.query params would\n         be fixed, limiting the facets clients can use.  Faceting is\n         not turned on by default - but if the client does specify\n         facet=true in the request, these are the only facets they\n         will be able to see counts for; regardless of what other\n         facet.field or facet.query params they may specify.\n\n         NOTE: there is *absolutely* nothing a client can do to prevent these\n         \"invariants\" values from being used, so don't use this mechanism\n         unless you are sure you always want it.\n      -->\n    <!--\n       <lst name=\"invariants\">\n         <str name=\"facet.field\">cat</str>\n         <str name=\"facet.field\">manu_exact</str>\n         <str name=\"facet.query\">price:[* TO 500]</str>\n         <str name=\"facet.query\">price:[500 TO *]</str>\n       </lst>\n      -->\n    <!-- If the default list of SearchComponents is not desired, that\n         list can either be overridden completely, or components can be\n         prepended or appended to the default list.  (see below)\n      -->\n    <!--\n       <arr name=\"components\">\n         <str>nameOfCustomComponent1</str>\n         <str>nameOfCustomComponent2</str>\n       </arr>\n      -->\n  </requestHandler>\n\n  <!-- A request handler that returns indented JSON by default -->\n  <requestHandler name=\"/query\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n      <str name=\"wt\">json</str>\n      <str name=\"indent\">true</str>\n    </lst>\n  </requestHandler>\n\n\n  <!-- A Robust Example\n       \n       This example SearchHandler declaration shows off usage of the\n       SearchHandler with many defaults declared\n\n       Note that multiple instances of the same Request Handler\n       (SearchHandler) can be registered multiple times with different\n       names (and different init parameters)\n    -->\n  <requestHandler name=\"/browse\" class=\"solr.SearchHandler\" useParams=\"query,facets,velocity,browse\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n  </requestHandler>\n\n  <initParams path=\"/update/**,/query,/select,/tvrh,/elevate,/spell,/browse\">\n    <lst name=\"defaults\">\n      <str name=\"df\">_text_</str>\n    </lst>\n  </initParams>\n\n  <initParams path=\"/update/**\">\n    <lst name=\"defaults\">\n      <str name=\"update.chain\">add-unknown-fields-to-the-schema</str>\n    </lst>\n  </initParams>\n\n  <!-- Solr Cell Update Request Handler\n\n       http://wiki.apache.org/solr/ExtractingRequestHandler \n\n    -->\n  <requestHandler name=\"/update/extract\"\n                  startup=\"lazy\"\n                  class=\"solr.extraction.ExtractingRequestHandler\" >\n    <lst name=\"defaults\">\n      <str name=\"lowernames\">true</str>\n      <str name=\"fmap.meta\">ignored_</str>\n      <str name=\"fmap.content\">_text_</str>\n    </lst>\n  </requestHandler>\n\n  <!-- Field Analysis Request Handler\n\n       RequestHandler that provides much the same functionality as\n       analysis.jsp. Provides the ability to specify multiple field\n       types and field names in the same request and outputs\n       index-time and query-time analysis for each of them.\n\n       Request parameters are:\n       analysis.fieldname - field name whose analyzers are to be used\n\n       analysis.fieldtype - field type whose analyzers are to be used\n       analysis.fieldvalue - text for index-time analysis\n       q (or analysis.q) - text for query time analysis\n       analysis.showmatch (true|false) - When set to true and when\n           query analysis is performed, the produced tokens of the\n           field value analysis will be marked as \"matched\" for every\n           token that is produces by the query analysis\n   -->\n  <requestHandler name=\"/analysis/field\"\n                  startup=\"lazy\"\n                  class=\"solr.FieldAnalysisRequestHandler\" />\n\n\n  <!-- Document Analysis Handler\n\n       http://wiki.apache.org/solr/AnalysisRequestHandler\n\n       An analysis handler that provides a breakdown of the analysis\n       process of provided documents. This handler expects a (single)\n       content stream with the following format:\n\n       <docs>\n         <doc>\n           <field name=\"id\">1</field>\n           <field name=\"name\">The Name</field>\n           <field name=\"text\">The Text Value</field>\n         </doc>\n         <doc>...</doc>\n         <doc>...</doc>\n         ...\n       </docs>\n\n    Note: Each document must contain a field which serves as the\n    unique key. This key is used in the returned response to associate\n    an analysis breakdown to the analyzed document.\n\n    Like the FieldAnalysisRequestHandler, this handler also supports\n    query analysis by sending either an \"analysis.query\" or \"q\"\n    request parameter that holds the query text to be analyzed. It\n    also supports the \"analysis.showmatch\" parameter which when set to\n    true, all field tokens that match the query tokens will be marked\n    as a \"match\". \n  -->\n  <requestHandler name=\"/analysis/document\"\n                  class=\"solr.DocumentAnalysisRequestHandler\"\n                  startup=\"lazy\" />\n\n  <!-- Echo the request contents back to the client -->\n  <requestHandler name=\"/debug/dump\" class=\"solr.DumpRequestHandler\" >\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n      <str name=\"echoHandler\">true</str>\n    </lst>\n  </requestHandler>\n\n  <!-- Search Components\n\n       Search components are registered to SolrCore and used by \n       instances of SearchHandler (which can access them by name)\n       \n       By default, the following components are available:\n       \n       <searchComponent name=\"query\"     class=\"solr.QueryComponent\" />\n       <searchComponent name=\"facet\"     class=\"solr.FacetComponent\" />\n       <searchComponent name=\"mlt\"       class=\"solr.MoreLikeThisComponent\" />\n       <searchComponent name=\"highlight\" class=\"solr.HighlightComponent\" />\n       <searchComponent name=\"stats\"     class=\"solr.StatsComponent\" />\n       <searchComponent name=\"debug\"     class=\"solr.DebugComponent\" />\n   \n       Default configuration in a requestHandler would look like:\n\n       <arr name=\"components\">\n         <str>query</str>\n         <str>facet</str>\n         <str>mlt</str>\n         <str>highlight</str>\n         <str>stats</str>\n         <str>debug</str>\n       </arr>\n\n       If you register a searchComponent to one of the standard names, \n       that will be used instead of the default.\n\n       To insert components before or after the 'standard' components, use:\n    \n       <arr name=\"first-components\">\n         <str>myFirstComponentName</str>\n       </arr>\n    \n       <arr name=\"last-components\">\n         <str>myLastComponentName</str>\n       </arr>\n\n       NOTE: The component registered with the name \"debug\" will\n       always be executed after the \"last-components\" \n       \n     -->\n\n  <!-- Spell Check\n\n       The spell check component can return a list of alternative spelling\n       suggestions.  \n\n       http://wiki.apache.org/solr/SpellCheckComponent\n    -->\n  <searchComponent name=\"spellcheck\" class=\"solr.SpellCheckComponent\">\n\n    <str name=\"queryAnalyzerFieldType\">text_general</str>\n\n    <!-- Multiple \"Spell Checkers\" can be declared and used by this\n         component\n      -->\n\n    <!-- a spellchecker built from a field of the main index -->\n    <lst name=\"spellchecker\">\n      <str name=\"name\">default</str>\n      <str name=\"field\">_text_</str>\n      <str name=\"classname\">solr.DirectSolrSpellChecker</str>\n      <!-- the spellcheck distance measure used, the default is the internal levenshtein -->\n      <str name=\"distanceMeasure\">internal</str>\n      <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->\n      <float name=\"accuracy\">0.5</float>\n      <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->\n      <int name=\"maxEdits\">2</int>\n      <!-- the minimum shared prefix when enumerating terms -->\n      <int name=\"minPrefix\">1</int>\n      <!-- maximum number of inspections per result. -->\n      <int name=\"maxInspections\">5</int>\n      <!-- minimum length of a query term to be considered for correction -->\n      <int name=\"minQueryLength\">4</int>\n      <!-- maximum threshold of documents a query term can appear to be considered for correction -->\n      <float name=\"maxQueryFrequency\">0.01</float>\n      <!-- uncomment this to require suggestions to occur in 1% of the documents\n        <float name=\"thresholdTokenFrequency\">.01</float>\n      -->\n    </lst>\n\n    <!-- a spellchecker that can break or combine words.  See \"/spell\" handler below for usage -->\n    <!--\n    <lst name=\"spellchecker\">\n      <str name=\"name\">wordbreak</str>\n      <str name=\"classname\">solr.WordBreakSolrSpellChecker</str>\n      <str name=\"field\">name</str>\n      <str name=\"combineWords\">true</str>\n      <str name=\"breakWords\">true</str>\n      <int name=\"maxChanges\">10</int>\n    </lst>\n    -->\n  </searchComponent>\n\n  <!-- A request handler for demonstrating the spellcheck component.  \n\n       NOTE: This is purely as an example.  The whole purpose of the\n       SpellCheckComponent is to hook it into the request handler that\n       handles your normal user queries so that a separate request is\n       not needed to get suggestions.\n\n       IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS\n       NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!\n       \n       See http://wiki.apache.org/solr/SpellCheckComponent for details\n       on the request parameters.\n    -->\n  <requestHandler name=\"/spell\" class=\"solr.SearchHandler\" startup=\"lazy\">\n    <lst name=\"defaults\">\n      <!-- Solr will use suggestions from both the 'default' spellchecker\n           and from the 'wordbreak' spellchecker and combine them.\n           collations (re-written queries) can include a combination of\n           corrections from both spellcheckers -->\n      <str name=\"spellcheck.dictionary\">default</str>\n      <str name=\"spellcheck\">on</str>\n      <str name=\"spellcheck.extendedResults\">true</str>\n      <str name=\"spellcheck.count\">10</str>\n      <str name=\"spellcheck.alternativeTermCount\">5</str>\n      <str name=\"spellcheck.maxResultsForSuggest\">5</str>\n      <str name=\"spellcheck.collate\">true</str>\n      <str name=\"spellcheck.collateExtendedResults\">true</str>\n      <str name=\"spellcheck.maxCollationTries\">10</str>\n      <str name=\"spellcheck.maxCollations\">5</str>\n    </lst>\n    <arr name=\"last-components\">\n      <str>spellcheck</str>\n    </arr>\n  </requestHandler>\n\n  <!-- Term Vector Component\n\n       http://wiki.apache.org/solr/TermVectorComponent\n    -->\n  <searchComponent name=\"tvComponent\" class=\"solr.TermVectorComponent\"/>\n\n  <!-- A request handler for demonstrating the term vector component\n\n       This is purely as an example.\n\n       In reality you will likely want to add the component to your \n       already specified request handlers. \n    -->\n  <requestHandler name=\"/tvrh\" class=\"solr.SearchHandler\" startup=\"lazy\">\n    <lst name=\"defaults\">\n      <bool name=\"tv\">true</bool>\n    </lst>\n    <arr name=\"last-components\">\n      <str>tvComponent</str>\n    </arr>\n  </requestHandler>\n\n  <!-- Clustering Component. (Omitted here. See the default Solr example for a typical configuration.) -->\n\n  <!-- Terms Component\n\n       http://wiki.apache.org/solr/TermsComponent\n\n       A component to return terms and document frequency of those\n       terms\n    -->\n  <searchComponent name=\"terms\" class=\"solr.TermsComponent\"/>\n\n  <!-- A request handler for demonstrating the terms component -->\n  <requestHandler name=\"/terms\" class=\"solr.SearchHandler\" startup=\"lazy\">\n    <lst name=\"defaults\">\n      <bool name=\"terms\">true</bool>\n      <bool name=\"distrib\">false</bool>\n    </lst>\n    <arr name=\"components\">\n      <str>terms</str>\n    </arr>\n  </requestHandler>\n\n\n  <!-- Query Elevation Component\n\n       http://wiki.apache.org/solr/QueryElevationComponent\n\n       a search component that enables you to configure the top\n       results for a given query regardless of the normal lucene\n       scoring.\n    -->\n  <searchComponent name=\"elevator\" class=\"solr.QueryElevationComponent\" >\n    <!-- pick a fieldType to analyze queries -->\n    <str name=\"queryFieldType\">string</str>\n    <str name=\"config-file\">elevate.xml</str>\n  </searchComponent>\n\n  <!-- A request handler for demonstrating the elevator component -->\n  <requestHandler name=\"/elevate\" class=\"solr.SearchHandler\" startup=\"lazy\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n    <arr name=\"last-components\">\n      <str>elevator</str>\n    </arr>\n  </requestHandler>\n\n  <!-- Highlighting Component\n\n       http://wiki.apache.org/solr/HighlightingParameters\n    -->\n  <searchComponent class=\"solr.HighlightComponent\" name=\"highlight\">\n    <highlighting>\n      <!-- Configure the standard fragmenter -->\n      <!-- This could most likely be commented out in the \"default\" case -->\n      <fragmenter name=\"gap\"\n                  default=\"true\"\n                  class=\"solr.highlight.GapFragmenter\">\n        <lst name=\"defaults\">\n          <int name=\"hl.fragsize\">100</int>\n        </lst>\n      </fragmenter>\n\n      <!-- A regular-expression-based fragmenter \n           (for sentence extraction) \n        -->\n      <fragmenter name=\"regex\"\n                  class=\"solr.highlight.RegexFragmenter\">\n        <lst name=\"defaults\">\n          <!-- slightly smaller fragsizes work better because of slop -->\n          <int name=\"hl.fragsize\">70</int>\n          <!-- allow 50% slop on fragment sizes -->\n          <float name=\"hl.regex.slop\">0.5</float>\n          <!-- a basic sentence pattern -->\n          <str name=\"hl.regex.pattern\">[-\\w ,/\\n\\&quot;&apos;]{20,200}</str>\n        </lst>\n      </fragmenter>\n\n      <!-- Configure the standard formatter -->\n      <formatter name=\"html\"\n                 default=\"true\"\n                 class=\"solr.highlight.HtmlFormatter\">\n        <lst name=\"defaults\">\n          <str name=\"hl.simple.pre\"><![CDATA[<em>]]></str>\n          <str name=\"hl.simple.post\"><![CDATA[</em>]]></str>\n        </lst>\n      </formatter>\n\n      <!-- Configure the standard encoder -->\n      <encoder name=\"html\"\n               class=\"solr.highlight.HtmlEncoder\" />\n\n      <!-- Configure the standard fragListBuilder -->\n      <fragListBuilder name=\"simple\"\n                       class=\"solr.highlight.SimpleFragListBuilder\"/>\n\n      <!-- Configure the single fragListBuilder -->\n      <fragListBuilder name=\"single\"\n                       class=\"solr.highlight.SingleFragListBuilder\"/>\n\n      <!-- Configure the weighted fragListBuilder -->\n      <fragListBuilder name=\"weighted\"\n                       default=\"true\"\n                       class=\"solr.highlight.WeightedFragListBuilder\"/>\n\n      <!-- default tag FragmentsBuilder -->\n      <fragmentsBuilder name=\"default\"\n                        default=\"true\"\n                        class=\"solr.highlight.ScoreOrderFragmentsBuilder\">\n        <!-- \n        <lst name=\"defaults\">\n          <str name=\"hl.multiValuedSeparatorChar\">/</str>\n        </lst>\n        -->\n      </fragmentsBuilder>\n\n      <!-- multi-colored tag FragmentsBuilder -->\n      <fragmentsBuilder name=\"colored\"\n                        class=\"solr.highlight.ScoreOrderFragmentsBuilder\">\n        <lst name=\"defaults\">\n          <str name=\"hl.tag.pre\"><![CDATA[\n               <b style=\"background:yellow\">,<b style=\"background:lawgreen\">,\n               <b style=\"background:aquamarine\">,<b style=\"background:magenta\">,\n               <b style=\"background:palegreen\">,<b style=\"background:coral\">,\n               <b style=\"background:wheat\">,<b style=\"background:khaki\">,\n               <b style=\"background:lime\">,<b style=\"background:deepskyblue\">]]></str>\n          <str name=\"hl.tag.post\"><![CDATA[</b>]]></str>\n        </lst>\n      </fragmentsBuilder>\n\n      <boundaryScanner name=\"default\"\n                       default=\"true\"\n                       class=\"solr.highlight.SimpleBoundaryScanner\">\n        <lst name=\"defaults\">\n          <str name=\"hl.bs.maxScan\">10</str>\n          <str name=\"hl.bs.chars\">.,!? &#9;&#10;&#13;</str>\n        </lst>\n      </boundaryScanner>\n\n      <boundaryScanner name=\"breakIterator\"\n                       class=\"solr.highlight.BreakIteratorBoundaryScanner\">\n        <lst name=\"defaults\">\n          <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->\n          <str name=\"hl.bs.type\">WORD</str>\n          <!-- language and country are used when constructing Locale object.  -->\n          <!-- And the Locale object will be used when getting instance of BreakIterator -->\n          <str name=\"hl.bs.language\">en</str>\n          <str name=\"hl.bs.country\">US</str>\n        </lst>\n      </boundaryScanner>\n    </highlighting>\n  </searchComponent>\n\n  <!-- Update Processors\n\n       Chains of Update Processor Factories for dealing with Update\n       Requests can be declared, and then used by name in Update\n       Request Processors\n\n       http://wiki.apache.org/solr/UpdateRequestProcessor\n\n    -->\n  \n  <!-- Add unknown fields to the schema \n  \n       An example field type guessing update processor that will\n       attempt to parse string-typed field values as Booleans, Longs,\n       Doubles, or Dates, and then add schema fields with the guessed\n       field types.  \n       \n       This requires that the schema is both managed and mutable, by\n       declaring schemaFactory as ManagedIndexSchemaFactory, with\n       mutable specified as true. \n       \n       See http://wiki.apache.org/solr/GuessingFieldTypes\n    -->\n  <updateRequestProcessorChain name=\"add-unknown-fields-to-the-schema\">\n    <!-- UUIDUpdateProcessorFactory will generate an id if none is present in the incoming document -->\n    <processor class=\"solr.UUIDUpdateProcessorFactory\" />\n\n    <processor class=\"solr.LogUpdateProcessorFactory\"/>\n    <processor class=\"solr.DistributedUpdateProcessorFactory\"/>\n    <processor class=\"solr.RemoveBlankFieldUpdateProcessorFactory\"/>\n    <processor class=\"solr.FieldNameMutatingUpdateProcessorFactory\">\n      <str name=\"pattern\">[^\\w-\\.]</str>\n      <str name=\"replacement\">_</str>\n    </processor>\n    <processor class=\"solr.ParseBooleanFieldUpdateProcessorFactory\"/>\n    <processor class=\"solr.ParseLongFieldUpdateProcessorFactory\"/>\n    <processor class=\"solr.ParseDoubleFieldUpdateProcessorFactory\"/>\n    <processor class=\"solr.ParseDateFieldUpdateProcessorFactory\">\n      <arr name=\"format\">\n        <str>yyyy-MM-dd'T'HH:mm:ss.SSSZ</str>\n        <str>yyyy-MM-dd'T'HH:mm:ss,SSSZ</str>\n        <str>yyyy-MM-dd'T'HH:mm:ss.SSS</str>\n        <str>yyyy-MM-dd'T'HH:mm:ss,SSS</str>\n        <str>yyyy-MM-dd'T'HH:mm:ssZ</str>\n        <str>yyyy-MM-dd'T'HH:mm:ss</str>\n        <str>yyyy-MM-dd'T'HH:mmZ</str>\n        <str>yyyy-MM-dd'T'HH:mm</str>\n        <str>yyyy-MM-dd HH:mm:ss.SSSZ</str>\n        <str>yyyy-MM-dd HH:mm:ss,SSSZ</str>\n        <str>yyyy-MM-dd HH:mm:ss.SSS</str>\n        <str>yyyy-MM-dd HH:mm:ss,SSS</str>\n        <str>yyyy-MM-dd HH:mm:ssZ</str>\n        <str>yyyy-MM-dd HH:mm:ss</str>\n        <str>yyyy-MM-dd HH:mmZ</str>\n        <str>yyyy-MM-dd HH:mm</str>\n        <str>yyyy-MM-dd</str>\n      </arr>\n    </processor>\n    <processor class=\"solr.AddSchemaFieldsUpdateProcessorFactory\">\n      <str name=\"defaultFieldType\">strings</str>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.Boolean</str>\n        <str name=\"fieldType\">booleans</str>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.util.Date</str>\n        <str name=\"fieldType\">tdates</str>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.Long</str>\n        <str name=\"valueClass\">java.lang.Integer</str>\n        <str name=\"fieldType\">tlongs</str>\n      </lst>\n      <lst name=\"typeMapping\">\n        <str name=\"valueClass\">java.lang.Number</str>\n        <str name=\"fieldType\">tdoubles</str>\n      </lst>\n    </processor>\n    <processor class=\"solr.RunUpdateProcessorFactory\"/>\n  </updateRequestProcessorChain>\n\n  <updateRequestProcessorChain name=\"classification\">\n    <processor class=\"solr.ClassificationUpdateProcessorFactory\">\n      <str name=\"inputFields\">title_t^1.5,author_s</str>\n      <str name=\"classField\">cat_s</str>\n      <str name=\"algorithm\">bayes</str>\n    </processor>\n  </updateRequestProcessorChain>\n\n  <!-- Deduplication\n\n       An example dedup update processor that creates the \"id\" field\n       on the fly based on the hash code of some other fields.  This\n       example has overwriteDupes set to false since we are using the\n       id field as the signatureField and Solr will maintain\n       uniqueness based on that anyway.  \n       \n    -->\n  <!--\n     <updateRequestProcessorChain name=\"dedupe\">\n       <processor class=\"solr.processor.SignatureUpdateProcessorFactory\">\n         <bool name=\"enabled\">true</bool>\n         <str name=\"signatureField\">id</str>\n         <bool name=\"overwriteDupes\">false</bool>\n         <str name=\"fields\">name,features,cat</str>\n         <str name=\"signatureClass\">solr.processor.Lookup3Signature</str>\n       </processor>\n       <processor class=\"solr.LogUpdateProcessorFactory\" />\n       <processor class=\"solr.RunUpdateProcessorFactory\" />\n     </updateRequestProcessorChain>\n    -->\n\n  <!-- Language identification\n\n       This example update chain identifies the language of the incoming\n       documents using the langid contrib. The detected language is\n       written to field language_s. No field name mapping is done.\n       The fields used for detection are text, title, subject and description,\n       making this example suitable for detecting languages form full-text\n       rich documents injected via ExtractingRequestHandler.\n       See more about langId at http://wiki.apache.org/solr/LanguageDetection\n    -->\n  <!--\n   <updateRequestProcessorChain name=\"langid\">\n     <processor class=\"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory\">\n       <str name=\"langid.fl\">text,title,subject,description</str>\n       <str name=\"langid.langField\">language_s</str>\n       <str name=\"langid.fallback\">en</str>\n     </processor>\n     <processor class=\"solr.LogUpdateProcessorFactory\" />\n     <processor class=\"solr.RunUpdateProcessorFactory\" />\n   </updateRequestProcessorChain>\n  -->\n\n  <!-- Script update processor\n\n    This example hooks in an update processor implemented using JavaScript.\n\n    See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor\n  -->\n  <!--\n    <updateRequestProcessorChain name=\"script\">\n      <processor class=\"solr.StatelessScriptUpdateProcessorFactory\">\n        <str name=\"script\">update-script.js</str>\n        <lst name=\"params\">\n          <str name=\"config_param\">example config parameter</str>\n        </lst>\n      </processor>\n      <processor class=\"solr.RunUpdateProcessorFactory\" />\n    </updateRequestProcessorChain>\n  -->\n\n  <!-- Response Writers\n\n       http://wiki.apache.org/solr/QueryResponseWriter\n\n       Request responses will be written using the writer specified by\n       the 'wt' request parameter matching the name of a registered\n       writer.\n\n       The \"default\" writer is the default and will be used if 'wt' is\n       not specified in the request.\n    -->\n  <!-- The following response writers are implicitly configured unless\n       overridden...\n    -->\n  <!--\n     <queryResponseWriter name=\"xml\" \n                          default=\"true\"\n                          class=\"solr.XMLResponseWriter\" />\n     <queryResponseWriter name=\"json\" class=\"solr.JSONResponseWriter\"/>\n     <queryResponseWriter name=\"python\" class=\"solr.PythonResponseWriter\"/>\n     <queryResponseWriter name=\"ruby\" class=\"solr.RubyResponseWriter\"/>\n     <queryResponseWriter name=\"php\" class=\"solr.PHPResponseWriter\"/>\n     <queryResponseWriter name=\"phps\" class=\"solr.PHPSerializedResponseWriter\"/>\n     <queryResponseWriter name=\"csv\" class=\"solr.CSVResponseWriter\"/>\n     <queryResponseWriter name=\"schema.xml\" class=\"solr.SchemaXmlResponseWriter\"/>\n    -->\n\n  <queryResponseWriter name=\"json\" class=\"solr.JSONResponseWriter\">\n    <!-- For the purposes of the tutorial, JSON responses are written as\n     plain text so that they are easy to read in *any* browser.\n     If you expect a MIME type of \"application/json\" just remove this override.\n    -->\n    <str name=\"content-type\">text/plain; charset=UTF-8</str>\n  </queryResponseWriter>\n\n  <!--\n     Custom response writers can be declared as needed...\n    -->\n  <queryResponseWriter name=\"velocity\" class=\"solr.VelocityResponseWriter\" startup=\"lazy\">\n    <str name=\"template.base.dir\">${velocity.template.base.dir:}</str>\n    <str name=\"solr.resource.loader.enabled\">${velocity.solr.resource.loader.enabled:true}</str>\n    <str name=\"params.resource.loader.enabled\">${velocity.params.resource.loader.enabled:false}</str>\n  </queryResponseWriter>\n\n  <!-- XSLT response writer transforms the XML output by any xslt file found\n       in Solr's conf/xslt directory.  Changes to xslt files are checked for\n       every xsltCacheLifetimeSeconds.  \n    -->\n  <queryResponseWriter name=\"xslt\" class=\"solr.XSLTResponseWriter\">\n    <int name=\"xsltCacheLifetimeSeconds\">5</int>\n  </queryResponseWriter>\n\n  <!-- Query Parsers\n\n       https://cwiki.apache.org/confluence/display/solr/Query+Syntax+and+Parsing\n\n       Multiple QParserPlugins can be registered by name, and then\n       used in either the \"defType\" param for the QueryComponent (used\n       by SearchHandler) or in LocalParams\n    -->\n  <!-- example of registering a query parser -->\n  <!--\n     <queryParser name=\"myparser\" class=\"com.mycompany.MyQParserPlugin\"/>\n    -->\n\n  <!-- Function Parsers\n\n       http://wiki.apache.org/solr/FunctionQuery\n\n       Multiple ValueSourceParsers can be registered by name, and then\n       used as function names when using the \"func\" QParser.\n    -->\n  <!-- example of registering a custom function parser  -->\n  <!--\n     <valueSourceParser name=\"myfunc\" \n                        class=\"com.mycompany.MyValueSourceParser\" />\n    -->\n\n\n  <!-- Document Transformers\n       http://wiki.apache.org/solr/DocTransformers\n    -->\n  <!--\n     Could be something like:\n     <transformer name=\"db\" class=\"com.mycompany.LoadFromDatabaseTransformer\" >\n       <int name=\"connection\">jdbc://....</int>\n     </transformer>\n     \n     To add a constant value to all docs, use:\n     <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n       <int name=\"value\">5</int>\n     </transformer>\n     \n     If you want the user to still be able to change it with _value:something_ use this:\n     <transformer name=\"mytrans3\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n       <double name=\"defaultValue\">5</double>\n     </transformer>\n\n      If you are using the QueryElevationComponent, you may wish to mark documents that get boosted.  The\n      EditorialMarkerFactory will do exactly that:\n     <transformer name=\"qecBooster\" class=\"org.apache.solr.response.transform.EditorialMarkerFactory\" />\n    -->\n</config>\n\n ",
            "id": "comment-15339281"
        },
        {
            "date": "2016-06-20T10:15:46+0000",
            "author": "Adrien Grand",
            "content": "Yes it is included, the reason why it is not in the changelog is that the commit 15fdfd3caa54c1e6d8cf3435ded285c3b65bea8c on branch_6x did not add anything to solr/CHANGES.txt. ",
            "id": "comment-15339291"
        },
        {
            "date": "2016-06-20T14:56:05+0000",
            "author": "Alessandro Benedetti",
            "content": "Thanks Adrien for the prompt response!\nI was thinking the release note was generated automatically from Jira, but now it is clear.\nI guess now we are in a sort of inconsistency and adding to the solr/CHANGES.txt will not help.\n\nWhat about the cwiki ? Should we add the committer involved in that, in the conversation ?\nI created the documentation draft in the old wiki, but I have no priviledge to add it to the new cwiki.\n\nCheers ",
            "id": "comment-15339642"
        },
        {
            "date": "2016-06-20T15:04:40+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi Tomas,\nas specified , I would prefer to move this to the Solr-user mailing list.\nThis ticket was for the development, not for the usage \n\nAnyway I saw that you are using :\n\n<initParams path=\"/update/**\">\n    <lst name=\"defaults\">\n      <str name=\"update.chain\">add-unknown-fields-to-the-schema</str>\n    </lst>\n  </initParams>\n\nWhich is not using the classification UpdateRequestProcessor.\n\nCheers ",
            "id": "comment-15339663"
        },
        {
            "date": "2016-06-20T15:11:35+0000",
            "author": "Adrien Grand",
            "content": "I guess now we are in a sort of inconsistency and adding to the solr/CHANGES.txt will not help.\n\nI can add it now, this way a user upgrading to 6.2 will see that it was added in 6.1. I'll do it now.\n\nWhat about the cwiki ? Should we add the committer involved in that, in the conversation ?\n\nHmm good question, I am not too familiar with the cwiki. Maybe someone else can help here? ",
            "id": "comment-15339675"
        },
        {
            "date": "2016-06-20T15:20:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 85020a555cb3fd934d3123f48dcd57e5f7679c88 in lucene-solr's branch refs/heads/branch_6_1 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85020a5 ]\n\nSOLR-7739: Add CHANGES entry. ",
            "id": "comment-15339694"
        },
        {
            "date": "2016-06-20T15:20:47+0000",
            "author": "ASF subversion and git services",
            "content": "Commit aaddefe80e950433a0d615bcc743552ab6079f5c in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aaddefe ]\n\nSOLR-7739: Add CHANGES entry. ",
            "id": "comment-15339695"
        },
        {
            "date": "2016-06-20T15:20:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 97b6c5b8fd581f53f8d8d3fa74cde50ab6df7484 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=97b6c5b ]\n\nSOLR-7739: Add CHANGES entry. ",
            "id": "comment-15339696"
        },
        {
            "date": "2016-06-21T22:26:27+0000",
            "author": "Alessandro Benedetti",
            "content": "Thanks again Adrien!\nit sounds good !\n\nFor the wiki let's try with Cassandra Targett, can you help us ? ",
            "id": "comment-15342902"
        },
        {
            "date": "2016-06-22T11:36:15+0000",
            "author": "Tomas Ramanauskas",
            "content": "Thanks, Alessandro. I fixed the config and I think the code for this feature is now being executed, however it's still not working. So I'll send an e-mail to Solr-user mailing list. ",
            "id": "comment-15344150"
        },
        {
            "date": "2016-06-22T15:44:37+0000",
            "author": "Cassandra Targett",
            "content": "We can add this to the Ref Guide, but it's too late for the 6.1 version. The existing documentation to be added to the Solr Ref Guide is in the above-referenced blog post? Even though it's too late for 6.1, I can put this in the draft area to be included for the next release in 6.2; people would be able to access it online until formal publication in the PDF. ",
            "id": "comment-15344553"
        },
        {
            "date": "2016-06-27T08:02:21+0000",
            "author": "Alessandro Benedetti",
            "content": "Hi Cassandra Targett ,\nI already edited a little bit the documentation and published in here :\n\nhttps://wiki.apache.org/solr/SolrClassification\n\nFeel free to add any comment/ suggestion / editing !\n\nCheers ",
            "id": "comment-15350549"
        },
        {
            "date": "2016-12-29T21:05:27+0000",
            "author": "Cassandra Targett",
            "content": "I'm really far behind on this Alessandro Benedetti, my apologies. I added a reference to this URP to the Ref Guide page https://cwiki.apache.org/confluence/display/solr/Update+Request+Processors. None of the update processors are described very well there, so it would be strange to suddenly have a long section for just one, although we'd like someday to give full descriptions for all of them. For now, though, I linked to the Wiki page, and will work through some edits on that soon. ",
            "id": "comment-15786133"
        },
        {
            "date": "2017-06-06T07:03:13+0000",
            "author": "sridhar bandlamudi",
            "content": "hi Alessandro Benedetti \ni had gone through your post. have a question on indexing the training data into solr.\ncan you give me simple demo on how to index the training documents.\nhow should i label documents in to different classed and how can i make sure solr point to those labelled classes.\nshould i add field called classField in my schema.xml\n\nps:i'm news to solr may be i'm dumb at understanding few things ",
            "id": "comment-16038290"
        }
    ]
}