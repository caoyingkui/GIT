{
    "id": "LUCENE-4098",
    "title": "Efficient bulk operations for packed integer arrays",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "There are some places in Lucene code that \n{iterate over,set}\n ranges of values of a packed integer array. Because bit-packing implementations (Packed*) tend be slower than direct implementations, this can take a lot of time.\n\nFor example, under some scenarii, GrowableWriter can take most of its (averaged) set time in resizing operations.\n\nHowever, some bit-packing schemes, such as the one that is used by Packed64SingleBlock*, allow to implement efficient bulk operations such as get/set/fill. Implementing these bulk operations in {{PackedInts.\n{Reader,Mutable}\n}} and using them across other components instead of their single-value counterpart could help improve performance.",
    "attachments": {
        "LUCENE-4098.patch": "https://issues.apache.org/jira/secure/attachment/12530546/LUCENE-4098.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-31T17:57:51+0000",
            "content": "Here is the patch for the proposed modifications. All Mutable implementations have a new efficient fill method and Packed64SingleBlock* classes also have efficient bulk get and set.\n\nFor example, the execution time of the following (unrealistic) microbenchmark is more than twice better with the patch applied on my computer thanks to the use of PackedInts.copy instead of naive copy (see GrowableWriter#ensureCapacity).\n\n\nfor (int k = 0; k < 50; ++k) {\n    long start = System.nanoTime();\n    GrowableWriter wrt = new GrowableWriter(1, 1 << 22, PackedInts.DEFAULT);\n    for (int i = 0; i < 1 << 22; ++i) {\n        wrt.set(i,i);\n    }\n    long end = System.nanoTime();\n    System.out.println((end - start) / 1000000);\n    long sum = 0;\n    for (int i = 0; i < wrt.size(); ++i) {\n        sum += wrt.get(i);\n    }\n    System.out.println(sum);\n}\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13286781"
        },
        {
            "date": "2012-06-01T13:24:34+0000",
            "content": "Slightly updated patch that fixes the computation of maxValue in GrowableWriter and uses | instead of Math.max to compute the max value when performing a bulk set (since GrowableWriter only works with unsigned integers).\n\nAs a side note, the reason why I didn't write bulk get and set methods for Packed64 is that I didn't find how to do it efficiently (= with less instructions and no conditional) without writing specialized methods for every bitsPerValue. ",
            "author": "Adrien Grand",
            "id": "comment-13287388"
        },
        {
            "date": "2012-06-01T17:34:19+0000",
            "content": "The patch looks great!\n\nI wrote a new random test (in attached patch) that just randomly bulk copies a bunch of slices from one packed ints array to another and then asserts the values are correct ... but it's failing.  I'm not sure why yet, and it's entirely possible it's a test bug!  If you run with -Dtests.verbose=true it prints details... ",
            "author": "Michael McCandless",
            "id": "comment-13287553"
        },
        {
            "date": "2012-06-01T18:23:30+0000",
            "content": "The bulk get and set are not guaranteed to return/set exactly len longs (so that they can stay at a block boundary to make the subsequent reads/writes faster). So I think\n\nint got = packed1.get(start, buffer, offset, len);\nassertTrue(got <= len);\nint sot = packed2.set(start, buffer, offset, len);\nassertTrue(sot <= len);\n\n\nshould be replaced with\n\nint got = packed1.get(start, buffer, offset, len);\nassertTrue(got <= len);\nint sot = packed2.set(start, buffer, offset, got);\nassertTrue(sot <= got);\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13287581"
        },
        {
            "date": "2012-06-01T18:30:35+0000",
            "content": "Aha, phew!  A bug in the test ... with that change the test looks like it's passing so far ... I'll beast it for a while.  Thanks Adrien. ",
            "author": "Michael McCandless",
            "id": "comment-13287584"
        },
        {
            "date": "2012-06-01T18:54:13+0000",
            "content": "Patch, w/ the fix for the new random test (now passes).\n\nI also tweaked the random test to sometimes use the PackedInts.copy method.\n\nFinally, I changed PackedInts.copy to alloc a long[] of size min(capacity, len) so we don't over-allocate if the incoming mem is larger than it needs to be.\n\nI think it's ready!  Thanks Adrien. ",
            "author": "Michael McCandless",
            "id": "comment-13287600"
        },
        {
            "date": "2012-06-02T18:36:55+0000",
            "content": "Thanks Adrien! ",
            "author": "Michael McCandless",
            "id": "comment-13287996"
        }
    ]
}