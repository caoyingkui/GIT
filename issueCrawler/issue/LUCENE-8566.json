{
    "id": "LUCENE-8566",
    "title": "Deprecate methods in CustomAnalyzer.Builder which take factory classes",
    "details": {
        "components": [
            "modules/analysis"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "CustomAnalyzer.Builder has methods which take implementation classes as follows.\n\n\twithTokenizer(Class<? extends TokenizerFactory> factory, String... params)\n\twithTokenizer(Class<? extends TokenizerFactory> factory, Map<String,String> params)\n\taddTokenFilter(Class<? extends TokenFilterFactory> factory, String... params)\n\taddTokenFilter(Class<? extends TokenFilterFactory> factory, Map<String,String> params)\n\taddCharFilter(Class<? extends CharFilterFactory> factory, String... params)\n\taddCharFilter(Class<? extends CharFilterFactory> factory, Map<String,String> params)\n\n\n\nSince the builder also has methods which take service names, it seems like that above methods are unnecessary and a little bit misleading. Giving symbolic names is preferable to implementation factory classes, but for now, users can write code depending on implementation classes.\n\nWhat do you think about deprecating those methods (adding @Deprecated annotations) and deleting them in the future releases? Those are called by only test cases so deleting them should have no impact on current lucene/solr codebase.\n\nIf this proposal gains your consent, I will create a patch. (Let me know if I missed some point. I'll close it.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16692515",
            "author": "Tomoko Uchida",
            "content": "Are there any feedbacks? \n\nI will try to explain some background. (I'm not a fluent English speaker. Excuse me if I make mistakes.)\nI have recently learned about the concept of Service Provider Interface and Java9's Module System utilizes this to decouple the interfaces and implementations (though it seems Lucene does not use the JDK's ServiceLoader but its own special loader class.) I did not know well about service providers until quite recently, but I like the essential concept and feel like that it's a good idea to limit the way to look up the factories, those are often provided from third party jars, only via names.\n\nI think Lucene users and also Solr should use service names to instantiate the factories in the future, but first Lucene itself should use only the names and force to its users to use them. So I am considering this is a small step to unify the use of the factories.\n\nJust for information, my studies and thoughts was staretd from a comment in this issue: https://issues.apache.org/jira/browse/LUCENE-8453\n\nWe should also document the SPI name of each factory.\n\n\nBut I do not want to mess up the issue board (may be because of my lack of understanding for the details or priorities,) I will close this in a few weeks if there are no comments here.\n\n\u00a0 ",
            "date": "2018-11-20T01:14:53+0000"
        },
        {
            "id": "comment-16692820",
            "author": "Adrien Grand",
            "content": "Uwe Schindler What do you think about this change? ",
            "date": "2018-11-20T08:17:52+0000"
        },
        {
            "id": "comment-16692863",
            "author": "Uwe Schindler",
            "content": "Hi,\noriginally the whole analyzer was only using the SPI names. That's as Tomoko says \"the correct way\". The factory methods were added on request by many users who wanted to have compile-time safety. I agree with that, so we added the factory builder methods. Indeed this allows to have at least compile checks on the names, which makes it easier (for example) to write quick tests.\n\nA second problem of the SPI names is currently that they are documented nowhere. To figure them out, you have to know how they are derived from the factory class name. Before doing anything like that here, we should:\n\n\tOfficially document the SPI names\n\tDon't derive the SPI names from class name anymore (we should put them into the classes as static final constants). By that you can add compile time safety again (user can do FooBarFactory.NAME).\n\tReplace the solr examples in javadocs by generic ones that use SPI names\n\tChange Solr to allow \"name=....\" instead of \"class=...\" for analyzer configs.\n\n\n\nSo I am -1 to remove them again. ",
            "date": "2018-11-20T08:46:03+0000"
        },
        {
            "id": "comment-16692866",
            "author": "Uwe Schindler",
            "content": "Here is more background: LUCENE-6958 ",
            "date": "2018-11-20T08:49:36+0000"
        },
        {
            "id": "comment-16693019",
            "author": "Tomoko Uchida",
            "content": "Thank you for your feedback. \n\nI understand that I dug up the old discussion, and it clearly seems that an umbrella issue is needed to cope with the situation.\n\nNow I am not certain about whether we should carry on or not.\nIs there practical value in continuing and taking our (of course I mean contributors' and reviewers') time for it, or should we simply close this issue as Won't Fix and work for more important things/issues? ",
            "date": "2018-11-20T10:32:35+0000"
        },
        {
            "id": "comment-16693221",
            "author": "Tomoko Uchida",
            "content": "I'm not sure if I can complete the whole to-do list, but getting one or two things done should still be good for users and for this project. \n I will create the patch for each task (one by one) and let you know.\n\n\tOfficially document the SPI names\n\tDon't derive the SPI names from class name anymore (we should put them into the classes as static final constants). By that you can add compile time safety again (user can do FooBarFactory.NAME).\n\tReplace the solr examples in javadocs by generic ones that use SPI names\n\tChange Solr to allow \"name=....\" instead of \"class=...\" for analyzer configs.\n\n\n\u00a0 ",
            "date": "2018-11-20T13:21:59+0000"
        },
        {
            "id": "comment-16712318",
            "author": "Tomoko Uchida",
            "content": "Uwe Schindler\u00a0I have encountered a subtle question.\nDon't derive the SPI names from class name anymore (we should put them into the classes as static final constants). By that you can add compile time safety again (user can do FooBarFactory.NAME).\nI feel like that factory classes' static final fields are somewhat \"implementation details.\" (Java interfaces can have static final fields, but current factories are not based on interfaces.) Is there a major difference between the calls of these two builder methods.\n\n// by name\nCustomAnalyzer.builder().withTokenizer(FooBarFactory.NAME)\n\n// by class \nCustomAnalyzer.builder().withTokenizer(FooBarFactory.class)\n\n\nCould you help me to clarify what we will achieve by this modification? ",
            "date": "2018-12-07T04:04:57+0000"
        },
        {
            "id": "comment-16712767",
            "author": "Uwe Schindler",
            "content": "Hi, in fact there is no difference between the two calls. Yes, the clas sname is an implementation details if you purely see it from the standpoint of somebody using \"configuration\" files. But those people get an error message on startup of the server.\n\nFor people building a custom analyzer from source code, using class names or constants help them when using their IDE's autocompletion. To them it does not matter if they write \".class\" or \".NAME\" or just use a \"string\" as is.\n\nAbout the implementation - My proposal would be:\n\n\tAdd a \"NAME\" static public final String field to all factories (similar like Elasticsearch is doing this).\n\tIn the SPI code, we use reflection to lookup the static field named \"NAME\" for every class we discovered. We use the found name to register the factory class for lookup in \"Factory.forName()\".\n\n ",
            "date": "2018-12-07T12:18:10+0000"
        },
        {
            "id": "comment-16713006",
            "author": "Tomoko Uchida",
            "content": "Thanks for the comment. I'd like to start from this,\n\n\tAdd a \"NAME\" static public final String field to all factories\n\n\nand document the SPI names in all factories' Javadoc.\n\nAlso we might need some code validator, which can be called from the precommit\u00a0build task, to make sure that each factory has the \"NAME\" static field. ",
            "date": "2018-12-07T15:50:15+0000"
        }
    ]
}