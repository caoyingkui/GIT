{
    "id": "LUCENE-7951",
    "title": "New wrapper classes for Geo3d",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [
            "modules/spatial-extras"
        ],
        "fix_versions": [
            "7.1"
        ]
    },
    "description": "Hi,\n\nAfter the latest developments in the Geo3d library, in particular:\n\nhttps://issues.apache.org/jira/browse/LUCENE-7906 : Spatial relationships between GeoShapes\nhttps://issues.apache.org/jira/browse/LUCENE-7936: Serialization of GeoShapes.\n\nI propose a new set of wrapper classes which can be for example linked to Solr as they implement their own SpatialContextFactory. It provides the capability of indexing shapes with \n spherical geometry.\n\nThanks!",
    "attachments": {
        "LUCENE_7951_build.patch": "https://issues.apache.org/jira/secure/attachment/12885878/LUCENE_7951_build.patch",
        "LUCENE-7951.patch": "https://issues.apache.org/jira/secure/attachment/12885192/LUCENE-7951.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16152161",
            "date": "2017-09-04T06:14:27+0000",
            "content": "Attached is the patch. A few considerations:\n\nLINESTRING: This shape is mapped to Geo3d GeoPath but it does not support paths with cutoff angles equal to 0. Therfore I am setting that value to 1e-10.\n\nBUFFER: The Satial4j buffer extension is partially supported.\n\nIn addition the DistanceCalculator needs to be reviewed.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16152635",
            "date": "2017-09-04T13:57:32+0000",
            "content": "Thanks for contributing this Ignacio!\n\nGeo3dSpatialContextFactory:\n\n\tthis should override init() in order to populate the planet model.  See the SCF impl to see how this is done for other settings.  On the Solr side, the field type settings will be read using init().\n\tmake planetModel field public and not final.  This is to be consistent with SCF.  I know it's a bit unusual.\n\toverride initCalculator() to see if the value is something like \"geo3d\" and if so then set distCalc that way, let the superclass handle it.\n\n\n\nI was a little surprised to see you didn't subclass SpatialContext with a Geo3d one but it's cool that you didn't have to, actually.\n\nGeo3dShapeFactory:\n\n\tConstructor: Should not reference PlanetModel.WGS84 explicitly but instead reference a proposed Geo3dSpatialContextFactory.DEFAULT_PLANET_MODEL ?  Or instead, just assume Geo3dSpatialContextFactory is in use and fail with the ClassCastException if it isn't?  I like the simplicity of the latter; either work for me.\n\tShould probably have the \"normWrapLongitude\" logic that can be seen in ShapeFactoryImpl.  Likewise the lat/lon bounds verification.  You can probably have the verify logic assume decimal degrees here (-/+ 180 etc.) since Geo3d assumes this.\n\tinner classes: the default constructors found in this class are superfluous; they can be removed. Also these classes can be made private.\n\n\n\nGeo3dPointShape:\n\n\tconsider removing \"Shape\" suffix; the Circle, Rectangle ones don't have this.  Or maybe they should have them?  I don't care; just be consistent.\n\tminor: typo in javadoc for Geo3dAreShape.  I prefer to use {{\n{@link ... }\n}} in general as the IDE helps keep this right.\n\n\n\nGeo3dDistanceCalculator:\n\n\tIt appears this is only necessary when the planet model isn't a sphere, as Spatial4j's default dist calculator is for spherical.  I suggest letting the distance calculator default.  I worry that Geo3d's impl is too slow; it sure looks slow!\n\n\n\nI'll review more of this code later. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16152660",
            "date": "2017-09-04T14:21:57+0000",
            "content": "Ignacio Vera, David Smiley, the distance calculator Ignacio wrote is designed to work with all planet models, not just spheres, and to compute surface distance, not arc distance.  Unfortunately, it's an expensive iterative calculation, and there's no better way to do it if you want true surface distance.\n\nI don't know what Ignacio's use case is, or whether spatial4j has any particular meaning assigned to the \"distance\" so computed, but if you just want reasonably fast distances and do not need surface distance, you could use any one of the geo3d's distance metrics, e.g. arc distance or linear distance.  The latter would be the cheapest but is only useful for distances less than halfway around the globe. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16152709",
            "date": "2017-09-04T15:15:11+0000",
            "content": "Thanks for the comments!  please feel free to add more as tomorrow I will have a couple of hours tomorrow to put as many as possible together.\n\nRegarding the shape suffix for points: It is there for two reasons: 1) There is already a Geo3DPoint in spatial3d package and I didn't like the class to have a similar name 2) There is always a conflic between a point being a component of  shape (~ GeoPoint) and a point behaving like a shape. I thought in this case it stress the functionality of the class. But if you feel that it is better to remove the suffix I do not feel so strong about it.\n\nRegarding the distance calculator: I implemented this way because I felt it should work for any planet model. In my particular use case, I am using an external function because I need point-shape distance which is supported in Geo3d but not in Spatial4j. I am ok letting the default one although still exact calculations might be useful regardless the performance penalty for some users.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16152845",
            "date": "2017-09-04T18:23:20+0000",
            "content": "Lets then add \"Shape\" suffix to those classes here implementing Shape.\n\nRE DistanceCalculator \u2013 okay.  Accurate by default then.   ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16153158",
            "date": "2017-09-05T06:36:06+0000",
            "content": "Attached a new patch with the proposed improvements.\n\n\n\tClean up javadoc\n\tGeo3dBinaryCodec & Geo3dShapeFactory assume always a Geo3dSpatialContextFactory\n\tRemove unnecessary constructors in inner classes and made them private\n\tOverride init() method in  Geo3dSpatialContextFactory. Currently only sphere and wsg84 planet models supported. What is the preferred syntax for a user defined planet model?\n\tMake GeoDistanceCalculator default but it can be override.\n\tDefault planet model in factory: Sphere\n\tAdded Shape suffix to all shapes\n\n\n\n\nOn another subject, Karl Wright, would it make sense to add a new GeoShape for degenerated paths (cutoff angle < MINIMUM_RESOLUTION)? \n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16153177",
            "date": "2017-09-05T06:58:13+0000",
            "content": "\nwould it make sense to add a new GeoShape for degenerated paths (cutoff angle < MINIMUM_RESOLUTION)\n\nIt might, if you define such a shape as consisting of points exactly on the path.  There would be no need for endpoint circles either, obviously, so the implementation would be easy.  If you need such a thing, please create a new ticket for it though. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16153199",
            "date": "2017-09-05T07:20:54+0000",
            "content": "David Smiley, I think that since this is mainly a spatial4j extension, you probably ought to be the one to take charge of landing it on master etc.  If that's OK with you, can you assign this ticket to yourself?  Thanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16156438",
            "date": "2017-09-07T04:27:40+0000",
            "content": "Ignacio Vera I'd prefer a GitHub Pull Request if we make further changes.  You need need to reference this LUCENE-7951 in the PR title.  But if that's inconvenient for you then we can continue with patch files nonetheless.  Locally I've modified a couple things a bit; if we go the PR route it's easier for me to retain them as we go.\n\nWhy the distinction between Geo3dAreaShape & Geo3dShape?  I doubt we need both but maybe I'm missing something.\n\nRandomGeoShapeGenerator\n\n\tI love it.  Did you extract this from Geo3dRptTest?  Maybe this ought to live in spatial-3d test area and simply referenced here?  What do you think Karl Wright?\n\tI think the \"Geo\" should be \"Geo3d\" in its name for clarity.\n\n\n ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16156445",
            "date": "2017-09-07T04:36:50+0000",
            "content": "David Smiley I'm fine if you want to cut down on code duplication by putting random shape generation in spatial-3d.\nI agree that Geo->Geo3d.\nThe distinction between an \"area shape\" and a \"shape\" is that one implements GeoArea and the other does not.  Some shapes are not amenable to implementing this geo3d interface. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16156557",
            "date": "2017-09-07T06:33:26+0000",
            "content": "David Smiley, I am ok with the pull request but I have never done it so I am trying to figure out how to do it. \n\nGeoAreaShapes know how to relate spatially with other shapes, Geoshape do not need to. Current generated shapes from Spatial4j can relate spatially. The question here is if we are keeping the current Geo3dShape implementation or we override it with this new version.\n\nRandomGeoShapeGenerator was originally developed to test spatial relationships between GeoAreaShapes. There is currently two versions, one in spatial-3d test and one in spatial-extras-test. I don't know if I am missing something but I had to copy the class or precommit will complain. Unfortunately, there are now slightly difference but I think we should only have one class that can be referenced. \n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16156657",
            "date": "2017-09-07T08:10:06+0000",
            "content": "GitHub user iverase opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/246\n\n    LUCENE-7951: New wrapper classes for Geo3d\n\n    Create a pull request for LUCENE-7951\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/iverase/lucene-solr origin/LUCENE-7951\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/246.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #246\n\n\ncommit 3ba3dad6b7169b73f3340f518f151511f149e266\nAuthor: ivera <ivera@eso.org>\nDate:   2017-09-07T08:05:18Z\n\n    LUCENE-7951: first version\n\ncommit ea31e5ce0f377fe23f2d4446fccb5a8e8c52690d\nAuthor: ivera <ivera@eso.org>\nDate:   2017-09-07T08:09:07Z\n\n    LUCENE-7951: first version\n\n ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16156949",
            "date": "2017-09-07T13:33:02+0000",
            "content": "I think Geo3d randomized shape generation should exist in one place, in it's test classpath somewhere.  Now is a great time to do that.   If precommit or the build otherwise complains, we can probably figure that out; I'll look closer at such possible errors if you move it there.\n\nPerhaps the Spatial4j integration should imply \"GeoArea\".  I don't think we need two base shape implementations.  Likewise, perhaps just one test, merging in the tests from the one you developed and the existing one.  The ability to \"intersect\" two Shapes is fundamental to the assumptions of Spatial4j, and thus Geo3d's \"GeoAreaShape\" is required, I think. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16156980",
            "date": "2017-09-07T13:58:53+0000",
            "content": "The following error is thrown by precommit if you try to use the random generator in spatial-3d:\n\nerror: cannot find symbol\n    [javac] import org.apache.lucene.spatial3d.geom.RandomGeoShapeGenerator;\n    [javac]                                        ^\n    [javac]   symbol:   class RandomGeoShapeGenerator\n    [javac]   location: package org.apache.lucene.spatial3d.geom\n    [javac] 1 error\n\nBUILD FAILED\n\nIt  seems you cannot share classes inside different test packages.\n\nRegarding GeoArea: Do you mean that this implementation will replace the current one? e.g. rename Geo3dAreaShape to Geo3dShape. That was my original idea as current implementation is very limited and now we can really make a full integration. Spatial relationship resolution was the first milestone to be able to complete this integration. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16157449",
            "date": "2017-09-07T19:02:14+0000",
            "content": "The attached build patch file I developed modifies spatial-extras's build.xml to include the test classpath of spatial3d.  This seems to work; I'm even doing the maven based build and it's working. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16157460",
            "date": "2017-09-07T19:07:29+0000",
            "content": "I propose the contents of the Geo3dSpatialContextFactory class look like this:\n\n  public static final PlanetModel DEFAULT_PLANET_MODEL = PlanetModel.SPHERE;\n\n  public PlanetModel planetModel = DEFAULT_PLANET_MODEL;\n\n  public Geo3dSpatialContextFactory() {\n    this.binaryCodecClass = Geo3dBinaryCodec.class;\n    this.shapeFactoryClass = Geo3dShapeFactory.class;\n    this.distCalc = new Geo3dDistanceCalculator(planetModel);\n  }\n\n  @Override\n  protected void init(Map<String, String> args, ClassLoader classLoader) {\n    super.init(args, classLoader);\n    initPlanetModel(args);\n  }\n\n  protected void initPlanetModel(Map<String, String> args) {\n    String planetModel = args.get(\"planetModel\");\n    if (planetModel != null) {\n      if (planetModel.equalsIgnoreCase(\"sphere\")) {\n        this.planetModel = PlanetModel.SPHERE;\n      } else if (planetModel.equalsIgnoreCase(\"wgs84\")) {\n        this.planetModel = PlanetModel.WGS84;\n      } else {\n        throw new RuntimeException(\"Unknown planet model: \" + planetModel);\n      }\n    }\n  }\n\n  @Override\n  protected void initCalculator() {\n    String calcStr = this.args.get(\"distCalculator\");\n    if (calcStr == null || calcStr.equals(\"geo3d\")) {\n      return;// we already have Geo3d\n    }\n    super.initCalculator(); // some other distance calculator\n  }\n\n\n\nNotice that you don't have to even call init(args).  Some tests (in Spatial4j) and some here create the factory, manually set some fields directly, and then finally called newSpatialContext() while never calling init(args).  init(args) is optional, designed for when you have name-value pair based configuration, e.g. Solr field type. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16158156",
            "date": "2017-09-08T05:50:06+0000",
            "content": "Hi David Smiley,\n\nUpdating the configuration files makes precommit happy indeed.\n\nI updated Geo3dSpatialContextFactory accordingly but note that:\n\n\n\tinitPlanetModel(args) must be called first so generated objects get the right planet model.\n\tWe must always construct the calculator if initCalculator() is called as the planet model can be different.\n\n\n\nIf you agree I can relce current Geo3dShape with the new one and migrate the test.\n\nBTW, is the pull request I created correct? ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16158617",
            "date": "2017-09-08T13:15:02+0000",
            "content": "We must always construct the calculator if initCalculator() is called as the planet model can be different.\n\nOh I see. Instead I suggest letting the planet model and calculator fields be null initially.  Overriding factory.newSpatialContext will allow us to do these checks.  This way, init(map) is still optional \u2013 consistent with the other SpatialContextFactory impls.  There is a similar situation for \"worldBounds\".  In that case, the default SpatialContext impl knows checks and has defaulting logic  Since we don't have a custom SpatialContext impl for Geo3D, we could just as easily override factory.newSpatialContext.\n\nThe PR looks good; I'll make further comments there. Thanks for doing a PR. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16158689",
            "date": "2017-09-08T14:14:32+0000",
            "content": "I put a new version where planetModel and distanceCalculator are initially null, but  factory.newSpatialContext sets the defaults if init(map) is not called.\n\nThe issue with worldBounds is a bit nastier. I cannot really override it and it is currently building one that is not a Geo3dShape. The issue is that to build a shape I need the SpatialContext and the SpatialContext needs the Shape to set the  worldBounds. Therefore it uses the default mechanism which does not use the ShapeFactory but creates a Spatial4j RectangleImpl.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16158834",
            "date": "2017-09-08T15:57:43+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/246#discussion_r137825324\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dAreaRptTest.java \u2014\n    @@ -40,10 +41,10 @@\n\n       SpatialContext ctx;\n       Geo3dSpatialContextFactory factory;\n\n\tRandomGeoShapeGenerator shapeGenerator = new RandomGeoShapeGenerator();\n    +  RandomGeo3dShapeGenerator shapeGenerator = new RandomGeo3dShapeGenerator();\n\n\n\n       private void setupGeohashGrid() {\n\n\tString planetModel = shapeGenerator.randomPlanetModel();\n    +    String planetModel = shapeGenerator.randomStringPlanetModel();\n         factory = new Geo3dSpatialContextFactory();\n         Map<String, String>  args = new HashMap<>();\n         args.put(\"planetModel\", planetModel);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I suggest not calling init(); just set the factory.planetModel directly ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16158835",
            "date": "2017-09-08T15:57:43+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/246#discussion_r137824698\n\n    \u2014 Diff: lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.java \u2014\n    @@ -149,6 +150,26 @@ public PlanetModel randomPlanetModel() {\n       }\n\n       /**\n    +   * Method that returns a random generated Planet model as string from the supported\n    \u2014 End diff \u2013\n\n    I don't think you need this method.  I think you are using it only for init(map) when the test using it could instead simply do randomBoolean() to directly set the planet model on the factory. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16159296",
            "date": "2017-09-08T20:41:21+0000",
            "content": "Github user iverase commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/246\n\n    I have added the possibility to relate no geo3d rectangles. I was trying to avoid that but I see that for the time being it is necessary.\n\n    I did the changes on the test as well so I am setting the planet model directly to the factory. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16164316",
            "date": "2017-09-13T08:32:42+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/246#discussion_r138555768\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShape.java \u2014\n    @@ -96,45 +95,25 @@ else if (relationship == GeoArea.DISJOINT)\n       }\n\n       protected SpatialRelation relate(Point p) {\n\n\t// Create a GeoPoint\n\tGeoPoint point = new GeoPoint(planetModel, p.getY()* DistanceUtils.DEGREES_TO_RADIANS, p.getX()* DistanceUtils.DEGREES_TO_RADIANS);\n    +    GeoPoint point = new GeoPoint(shape.getPlanetModel(), p.getY()* DistanceUtils.DEGREES_TO_RADIANS, p.getX()* DistanceUtils.DEGREES_TO_RADIANS);\n         if (shape.isWithin(point)) \n{\n    -      // Point within shape\n           return SpatialRelation.CONTAINS;\n         }\n         return SpatialRelation.DISJOINT;\n       }\n\n\n\n    -\n    -\n       @Override\n       public Rectangle getBoundingBox() {\n         Rectangle bbox = this.boundingBox;//volatile read once\n         if (bbox == null) {\n           LatLonBounds bounds = new LatLonBounds();\n           shape.getBounds(bounds);\n\n\tdouble leftLon;\n\tdouble rightLon;\n\tif (bounds.checkNoLongitudeBound()) \n{\n    -        leftLon = -180.0;\n    -        rightLon = 180.0;\n    -      }\n else \n{\n    -        leftLon = bounds.getLeftLongitude().doubleValue() * DistanceUtils.RADIANS_TO_DEGREES;\n    -        rightLon = bounds.getRightLongitude().doubleValue() * DistanceUtils.RADIANS_TO_DEGREES;\n    -      }\n\tdouble minLat;\n\tif (bounds.checkNoBottomLatitudeBound()) \n{\n    -        minLat = -90.0;\n    -      }\n else \n{\n    -        minLat = bounds.getMinLatitude().doubleValue() * DistanceUtils.RADIANS_TO_DEGREES;\n    -      }\n\tdouble maxLat;\n\tif (bounds.checkNoTopLatitudeBound()) \n{\n    -        maxLat = 90.0;\n    -      }\n else \n{\n    -        maxLat = bounds.getMaxLatitude().doubleValue() * DistanceUtils.RADIANS_TO_DEGREES;\n    -      }\n\tbbox = new RectangleImpl(leftLon, rightLon, minLat, maxLat, ctx).getBuffered(ROUNDOFF_ADJUSTMENT, ctx);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Yes, it seems not necessary. Not sure what was needed before but I am glad that we can hopefully get rid of that. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16164318",
            "date": "2017-09-13T08:34:02+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/246#discussion_r138556038\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dDistanceCalculator.java \u2014\n    @@ -70,7 +71,22 @@ public boolean within(Point from, double toX, double toY, double distance) {\n\n       @Override\n       public Point pointOnBearing(Point from, double distDEG, double bearingDEG, SpatialContext ctx, Point reuse) {\n\n\tthrow new UnsupportedOperationException();\n    +    double dist = DistanceUtils.DEGREES_TO_RADIANS * distDEG;\n    +    double bearing = DistanceUtils.DEGREES_TO_RADIANS * bearingDEG;\n    +    Geo3dPointShape geoFrom = (Geo3dPointShape) from;\n    +    GeoPoint point = (GeoPoint)geoFrom.shape;\n    +\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I have changes the formula to use vincenty's formulae. Slower as it is iterative but It taken into account the planet model. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16164335",
            "date": "2017-09-13T08:50:28+0000",
            "content": "Now all test are green. Note what I have to do with the circles as for WGS84 I was having problems.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16165907",
            "date": "2017-09-14T07:46:54+0000",
            "content": "Hi David Smiley,\n\nI would like to share some thoughts of the current solution as there might be room from improvement. From the original classes I had to do two changes that mcan be improve to be able to pass the tests:\n\n1) Geo3dCircleShape.relate(Shape other): Currently circles in WGS84 gives false positives and false negatives close to the edge. The current solution is not optimal because the behavior of points and other shapes will be different. I had a look how the circles are build in Geo3d and I think there is room from improvement. The solution is not perfect but it will remove the false positives and we could probably remove this method. I will open a ticket to Karl Wright to consider a new way of building circle planes. \n\n2) New constructor in Geo3dRectangleShape: This has been added because Geo3d wide rectangles (extension > PI) are unable to compute longitude bounds. I would like to investigate if this is possible and therefore having a unique way to compute bounds in the wrapper.\n\nCheers,\n\nI.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16171100",
            "date": "2017-09-19T04:27:03+0000",
            "content": "(I'm back from travel)\nThe current state is looking pretty nice.  I think you can now merge Geo3dAreaRptTest into Geo3dRptTest?   Keep the specific tests for bugs that were found.  Use the new random shape generator instead of the manual code.\n\nGeo3dCircleShape.relate\n\nWhile I don't pretend to know the details of the algorithms for both world models, I do find the override of the method here a bit suspicious.  Shouldn't GeoStandardCircle look at the PlanetModel and do the right thing?\n\nNew constructor in Geo3dRectangleShape\n\nOk. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16172931",
            "date": "2017-09-20T09:05:02+0000",
            "content": "I have merge the Geo3dAreaRptTest into Geo3dRptTest.\n\nUnfortunately, the current implementation of Geo3dStandardCircle is an approximation and it shows up when trying to build shapes using circles with bearing points. Therefore the test in Geo3dShapeWGS84ModelRectRelationTest fail as some points are declared to be outside of the circle. \n\nThe case of circles on spheroids is hard and you need to eventually use brute force (calculate the distance between the point/shape to center of the circle) if you want to be precise. I have an idea how to minimize the impact but it is on the limits of my maths capabilities. I opened a ticket (LUCENE-7970) to address the problem. \n\nMeanwhile the WGS84ModelRectRelationTest will fail when removing the doggy relate function. Note that it works for the sphere.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16173036",
            "date": "2017-09-20T11:24:24+0000",
            "content": "Ignacio Vera I am curious as to why the GeoStandardCircle causes relationship failure in the wrapper environment.  It's a shape like any other, albeit not exactly a circle, so unless there's some logic that checks that it behaves exactly like a circle, then the wrapper and test logic shouldn't care.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16173045",
            "date": "2017-09-20T11:35:22+0000",
            "content": "The test generates points of a shape by creating a circle and generating points using a distance (lower than the radius) and bearing angle from the center of the circle. After creating the point it checks that the generated point is inside the circle and if it doesn't it fails. \n\nThat is exactly what fails, sometimes the points are not inside the GeoCircle.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16173076",
            "date": "2017-09-20T12:09:56+0000",
            "content": "I'm inclined to commit this branch despite the override in Geo3dCircleShape.relate which I think I'll add a comment that this is a hack and referencing JIRA LUCENE-7970.  It would be helpful in LUCENE-7970 to provide specific circle coordinates and sample point within a unit test that tests the relationship to illustrate the failure; otherwise the discussion is theoretical.\n\nI may include a tweak to a Solr spatial test to show that this seems to work there.\n\nThanks for all your efforts here Ignacio! ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16173086",
            "date": "2017-09-20T12:20:16+0000",
            "content": "sure, I will add a test for this particular feature.\n\nI think all the goodies that brings Geo3d are worthy. My thanks are to Karl Wright for the support and awesome Geo3d library. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16173092",
            "date": "2017-09-20T12:25:15+0000",
            "content": "Actually there is already a test: In Geo3dShapeWGS84ModelRectRelationTest.pointBearingTest() ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16173118",
            "date": "2017-09-20T12:54:57+0000",
            "content": "\nThe test generates points of a shape by creating a circle and generating points using a distance (lower than the radius) and bearing angle from the center of the circle. After creating the point it checks that the generated point is inside the circle and if it doesn't it fails.\n\nIgnacio Vera It sounds like the test should expect deviation within a certain (computed) error range from a true circle.  I think it's possible to compute the actual error by the following process:\n(1) From the center, with the Vincenti formula compute the \"actual\" top latitude of the circle, the bottom latitude of the circle, and either the left or right latitude of the circle.\n(2) Compute the lat/lon bounds of the comparable GeoStandardCircle\n(3) Compute the difference between those bounds and the Vincenti-computed bounds\n\nAs for what the theoretical error is, I will have to do some math and get back to you on that.  But we would want the error to at least be reasonably symmetrical (that is, not significantly larger at the top of the circle than at the bottom), etc.  What do you think? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16173178",
            "date": "2017-09-20T13:30:46+0000",
            "content": "The problem is that in the test you do not have information of the circle, you are just ask to create a point with a distance to another point at a bearing angle. \n\nI understand that the Geo3dShape is an ellipse as similar as possible to the circle. I wonder if you consider that the distance is the circle to consider, is possible to compute the error for the angle?  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16173861",
            "date": "2017-09-20T21:29:34+0000",
            "content": "Uploading the patch I intend to commit later tonight.  I made more than trivial changes:\n\n\n\tReverted QueryEqualsHashCodeTest as it has nothing to do with Geo3d and the additions duplicated many test lines\n\tRemoved the redundant test lines in SpatialArgsTest so that it simply randomly picked the spatial context (potentially Geo3d).\n\tGeo3dShapeFactory polygon / hole building wasn't quite right; the endHole method is supposed to return the PolygonBuilder of the parent / containing polygon, not some new builder.  Admittedly the Spatial4j javadocs should have clarified that.  I fixed this and made simplifications.\n\tGeo3dShapeFactory addPoint; removed the points.contains(point) check on each input point as it's both not necessary (Geo3d internally has a filterPoints method/functionality) and expensive (O(N^2)).\n\tModified the Geo3dRptTest to not have the factory be a field of the test.  The factory is supposed to be a very temporary thing only used to create the context.\n\tAuto-formatted most of these source files.\n\tRemoved Geo3dDistanceCalculator.pointOnBearing2 as it was unused\n\tGeo3dDistanceCalculator.distance: made both variants support Point subclasses that aren't Geo3dPointShape\n\n\n\nIn at least one of these cases the problem was discovered by using it with some Solr tests.  I intend to file a separate issue for Solr since it's both a test + convenience (spatialContextFactory=\"geo3d\") + documentation ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16174177",
            "date": "2017-09-21T03:10:13+0000",
            "content": "Commit 035523ba7a86773500c053129f65c9a6dc4fd384 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=035523b ]\n\nLUCENE-7951: Spatial4j implementations using Geo3d ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16174182",
            "date": "2017-09-21T03:11:25+0000",
            "content": "Commit 85491401d54c59e1593a5c9f13dca7bfcdda31a2 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8549140 ]\n\nLUCENE-7951: Spatial4j implementations using Geo3d\n\n(cherry picked from commit 035523b) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16185783",
            "date": "2017-09-29T12:58:47+0000",
            "content": "Github user iverase closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/246 ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16198039",
            "date": "2017-10-10T02:24:28+0000",
            "content": "Commit 0673c57ecf42a43cda9789cc9a649fd26e311770 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0673c57 ]\n\nLUCENE-7951: add back Geo3dShape.toString ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16198044",
            "date": "2017-10-10T02:26:03+0000",
            "content": "Commit 7f76509c91b68253cb65ae2ca0d5e4a5435c719d in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7f76509 ]\n\nLUCENE-7951: add back Geo3dShape.toString\n\n(cherry picked from commit 0673c57) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16198047",
            "date": "2017-10-10T02:27:16+0000",
            "content": "Commit c995e02bf5db1ecb46006c488c3138901f08651b in lucene-solr's branch refs/heads/branch_7_1 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c995e02 ]\n\nLUCENE-7951: add back Geo3dShape.toString\n\n(cherry picked from commit 0673c57) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16207389",
            "date": "2017-10-17T11:03:53+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar"
        }
    ]
}