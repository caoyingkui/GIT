{
    "id": "LUCENE-7974",
    "title": "Add N-dimensional FloatPoint K-nearest-neighbor implementation",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [
            "modules/sandbox"
        ],
        "fix_versions": [
            "7.1",
            "master (8.0)"
        ]
    },
    "description": "From LUCENE-7069:\n\n\nKD trees (used by Lucene's new dimensional points) excel at finding \"nearest neighbors\" to a given query point ... I think we should add this to Lucene's sandbox\n\n[...]\n\nIt could also be generalized to more than 2 dimensions, but for now I'm making the class package private in sandbox for just the geo2d (lat/lon) use case.\n\nThis issue is to generalize LatLonPoint.nearest() to more than 2 dimensions.",
    "attachments": {
        "LUCENE-7974.patch": "https://issues.apache.org/jira/secure/attachment/12888333/LUCENE-7974.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16175102",
            "date": "2017-09-21T17:01:25+0000",
            "content": "Patch implementing the idea.  Reviews welcome.\n\nSome implementation notes:\n\n\n\tMost of the implementation was directly stolen from NearestNeighbor, which should incidentally be renamed to indicate that it's specific to LatLonPoint; this patch doesn't do that.\n\tThe new test was also mostly directly stolen from TestNearest.  I removed testing of sorting multi-dimensional points by distance from a given point, though, since AFAICT FloatPoint doesn't have this functionality (see LUCENE-7099 for the LatLonPoint impl).\n\tMost comparisons are of distance squared rather than distance, to avoid Math.sqrt() calls.  There are a couple of (non-squared) distance-based optimizations though to disqualify cells and individual point values that are beyond the search radius in one dimension.\n\tI tried to switch the (bounded) hit queue from Java's PriorityQueue to Lucene's implementation (as mentioned in a TODO in the LatLonPoint impl), but it was much much slower (like an order of magnitude-ish).  I didn't look into why, but I reverted back to the Java impl.\n\tSince this is targetted at the sandbox module, I didn't want to modify FloatPoint to include a nearest() method (as was done on LatLonPoint in LUCENE-7069), so that method is instead included directly on FloatPointNearestNeighbor.  If this gets committed and then eventually moved to core, the public nearest() method should be moved to FloatPoint.\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16179061",
            "date": "2017-09-25T14:03:15+0000",
            "content": "+1 to add this feature to the sandbox\n\nI'm wondering whether the use of getMinDelta could be replaced with Math.nextUp/Math.nextDown? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16180245",
            "date": "2017-09-26T04:48:55+0000",
            "content": "I'm wondering whether the use of getMinDelta could be replaced with Math.nextUp/Math.nextDown?\n\nThese do different things, and I'm not sure how to express one in terms of the other.  Suggestions welcome .\n\ngetMinDelta calculates a fudge factor from the distance exponent reduced by (at most) 23, the number of bits in a float mantissa.  This is necessary when the result of subtracting/adding the distance in a single dimension has an exponent that differs significantly from that of the distance value.  Without this fudge factor (i.e. only subtracting/adding the distance), cells and values can be inappropriately judged as outside the search radius.\n\nBy contrast, Math.nextUp/Math.nextDown produce adjacent values (i.e. the equivalent of incrementing/decrementing the mantissa value by one).  ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16180346",
            "date": "2017-09-26T06:57:40+0000",
            "content": "OK, I see now. I (wrongly) thought it was only a way to make sure that the float cast did not round down. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16187564",
            "date": "2017-10-01T22:50:46+0000",
            "content": "Commit cbcf7c094c7165335209103e9ca931d580c45935 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cbcf7c0 ]\n\nLUCENE-7974: Add N-dimensional FloatPoint K-nearest-neighbor implementation ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16187565",
            "date": "2017-10-01T22:51:16+0000",
            "content": "Commit d52564c079bb7ca842a1041bc8baff468e1938d4 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d52564c ]\n\nLUCENE-7974: Add N-dimensional FloatPoint K-nearest-neighbor implementation ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16187568",
            "date": "2017-10-01T22:55:45+0000",
            "content": "\nI'm wondering whether the use of getMinDelta could be replaced with Math.nextUp/Math.nextDown?\n\ngetMinDelta calculates a fudge factor from the distance exponent [...]\n\nOK, I see now. I (wrongly) thought it was only a way to make sure that the float cast did not round down.\n\nThanks Adrien.  I committed the patch with a slightly edited version of my explanation above added to the getMinDelta() javadocs. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16187877",
            "date": "2017-10-02T11:19:45+0000",
            "content": "Hi Steve Rowe,\n\n\"ant precommit\" build seems to be failing for me on a -document-lint step. \nThe line that seems suspicious: FloatPointNearestNeighbor.java#206\n\nhttps://jenkins.thetaphi.de/job/Lucene-Solr-7.x-Linux/532/console\n\nfailure message\n-documentation-lint:\n     [echo] checking for broken html...\n    [jtidy] Checking for broken html (such as invalid tags)...\n   [delete] Deleting directory ~/dev/src/lucene-solr/lucene/build/jtidy_tmp\n     [echo] Checking for broken links...\n     [exec]\n     [exec] Crawl/parse...\n     [exec]\n     [exec] Verify...\n     [exec]\n     [exec] file:///build/docs/sandbox/org/apache/lucene/document/FloatPointNearestNeighbor.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/document/FloatPointNearestNeighbor.NearestHit.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/document/FloatPointNearestNeighbor.NearestHit.html\n     [exec]\n     [exec] Broken javadocs links were found! Common root causes:\n     [exec] * A typo of some sort for manually created links.\n     [exec] * Public methods referencing non-public classes in their signature.\n\nBUILD FAILED\n\n ",
            "author": "Peter Szantai-Kis"
        },
        {
            "id": "comment-16188040",
            "date": "2017-10-02T13:42:31+0000",
            "content": "Commit 73f3403381b95a908543cf859b2f43f28cb9a34a in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=73f3403 ]\n\nLUCENE-7974: make NearestHit public, and add javadocs, to make precommit happy ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16188042",
            "date": "2017-10-02T13:43:24+0000",
            "content": "Commit b1d4c01568cf2b965bc2e97dc5edb274755ab72e in lucene-solr's branch refs/heads/branch_7x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b1d4c01 ]\n\nLUCENE-7974: make NearestHit public, and add javadocs, to make precommit happy ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16188049",
            "date": "2017-10-02T13:48:14+0000",
            "content": "Hi Michael McCandless, thanks for the fix, but I was about to commit a different one: making private the nearest() method returning NearestHit, since it's only going to be used by the (intentionally) public nearest() method that returns TopFieldDocs.  OK with you if I un-re-fix? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16188199",
            "date": "2017-10-02T14:39:50+0000",
            "content": "Oh yes that makes sense Steve Rowe, thanks! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16188213",
            "date": "2017-10-02T14:44:43+0000",
            "content": "Commit f33ed4ba12aaf215628d010daaa0e271b8ab3d1f in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f33ed4b ]\n\nLUCENE-7974: nearest() method returning NearestHit should be private, and NearestHit class should be package private ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16188214",
            "date": "2017-10-02T14:44:45+0000",
            "content": "Commit 74050a3f159eca393ccb8e0b28c4fc4f974f6d5e in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=74050a3 ]\n\nLUCENE-7974: nearest() method returning NearestHit should be private, and NearestHit class should be package private ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16207318",
            "date": "2017-10-17T11:03:27+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar"
        }
    ]
}