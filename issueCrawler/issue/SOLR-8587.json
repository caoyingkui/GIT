{
    "id": "SOLR-8587",
    "title": "Add segments file information to core admin status",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Having the index's segments file name returned by CoreAdminHandler STATUS can be useful. The info I'm thinking about is the segments file name and its size. If you record that from time to time, in a case of crisis, when u need to restore the index and may not be sure which copy you need to restore, this tiny piece of info can be very useful, as the segmentsN file records the commit point, and therefore what you core reported and what you see at hand can help you make a safer decision.\n\nI also think it's useful info in general, e.g. probably even more than 'version', and it doesn't add much complexity to the handler or the response.",
    "attachments": {
        "SOLR-8587.patch": "https://issues.apache.org/jira/secure/attachment/12783886/SOLR-8587.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-22T19:26:31+0000",
            "author": "Shai Erera",
            "content": "Simple patch. I didn't find tests that cover this stuff, not directly at least, so if someone knows of a test that asserts existence of attributes in returned status, I'll go and add that there. ",
            "id": "comment-15112921"
        },
        {
            "date": "2016-01-23T18:56:59+0000",
            "author": "Shai Erera",
            "content": "Patch updated to the GIT clone. ",
            "id": "comment-15113900"
        },
        {
            "date": "2016-01-23T20:50:46+0000",
            "author": "Anshum Gupta",
            "content": "+1\nI think this makes sense, specially until we have backup/restore for SolrCloud in place. ",
            "id": "comment-15113961"
        },
        {
            "date": "2016-01-25T14:09:07+0000",
            "author": "Shai Erera",
            "content": "Naming the local Git branch after this issue, I forgot to put the issue number also in the commit message. The two commits are: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/d5ec561d and http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/087ebf66. ",
            "id": "comment-15115237"
        },
        {
            "date": "2016-01-25T14:11:16+0000",
            "author": "Uwe Schindler",
            "content": "Naming the local Git branch after this issue, I forgot to put the issue number also in the commit message.\n\nThis does not yet work. Commits with issue number do not make it into JIRA at the moment. I try to contact INFRA about that, but it was hard over the weekend. ",
            "id": "comment-15115240"
        },
        {
            "date": "2016-01-25T14:15:00+0000",
            "author": "Shai Erera",
            "content": "Oh . But the plan is still that if the commit message starts w/ LUCENE/SOLR-XXXX, it will be linked to the issue, right? ",
            "id": "comment-15115246"
        },
        {
            "date": "2016-03-02T19:37:33+0000",
            "author": "Alexey Serba",
            "content": "I recently upgraded my Solr version to 5.5 and noticed that /solr/admin/cores API stopped working with the following exception:\n\n\nERROR org.apache.solr.handler.RequestHandlerBase - org.apache.solr.common.SolrException: Error handling 'status' action\n    at org.apache.solr.handler.admin.CoreAdminOperation$4.call(CoreAdminOperation.java:192)\n    at org.apache.solr.handler.admin.CoreAdminHandler$CallInfo.call(CoreAdminHandler.java:354)\n    at org.apache.solr.handler.admin.CoreAdminHandler.handleRequestBody(CoreAdminHandler.java:153)\n    at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n...\nCaused by: java.nio.file.NoSuchFileException: solr-cloud-1/collection1_shard2_replica1/data/index/segments_1\n    at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n    at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n    at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n    at java.nio.file.Files.readAttributes(Files.java:1737)\n    at java.nio.file.Files.size(Files.java:2332)\n    at org.apache.lucene.store.FSDirectory.fileLength(FSDirectory.java:210)\n    at org.apache.lucene.store.NRTCachingDirectory.fileLength(NRTCachingDirectory.java:127)\n    at org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(LukeRequestHandler.java:592)\n    at org.apache.solr.handler.admin.CoreAdminOperation.getCoreStatus(CoreAdminOperation.java:886)\n\n\n\nIf I go to file system - I see there is segments_2 file, then segments_3, but core admin still tries to check segments_1 file (even if you try to reload /solr/admin/cores)\n\nLukeRequestHandler does\n\n    IndexCommit indexCommit = reader.getIndexCommit();\n    String segmentsFileName = indexCommit.getSegmentsFileName();\n\n\nbut apparently that file is gone at that point.\n\nThere's a similar report of this problem in SOLR-4146\n\nI'm wondering if it is possible to fix or revert 087ebf6 in 5.5.1? ",
            "id": "comment-15176313"
        },
        {
            "date": "2016-03-06T12:58:55+0000",
            "author": "Richard Coggins",
            "content": "\nSame as previous comment, I just upgraded Solr to 5.5 and noticed that /solr/admin/cores API stopped working with the following exception:\n\n3/6/2016, 7:36:57 AM ERROR null RequestHandlerBase java.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n3/6/2016, 7:36:57 AM ERROR null HttpSolrCall null:java.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n3/6/2016, 7:37:02 AM ERROR null RequestHandlerBase java.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n3/6/2016, 7:37:02 AM ERROR null HttpSolrCall null:java.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n\njava.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n\tat sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n\tat sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\n\tat java.nio.file.Files.readAttributes(Files.java:1737)\n\tat java.nio.file.Files.size(Files.java:2332)\n\tat org.apache.lucene.store.FSDirectory.fileLength(FSDirectory.java:210)\n\tat org.apache.lucene.store.NRTCachingDirectory.fileLength(NRTCachingDirectory.java:127)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(LukeRequestHandler.java:592)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.handleRequestBody(LukeRequestHandler.java:137)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2082)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:670)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:458)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:225)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:183)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\n\nnull:java.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n\tat sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n\tat sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\n\tat java.nio.file.Files.readAttributes(Files.java:1737)\n\tat java.nio.file.Files.size(Files.java:2332)\n\tat org.apache.lucene.store.FSDirectory.fileLength(FSDirectory.java:210)\n\tat org.apache.lucene.store.NRTCachingDirectory.fileLength(NRTCachingDirectory.java:127)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(LukeRequestHandler.java:592)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.handleRequestBody(LukeRequestHandler.java:137)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2082)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:670)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:458)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:225)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:183)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\n\njava.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n\tat sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n\tat sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\n\tat java.nio.file.Files.readAttributes(Files.java:1737)\n\tat java.nio.file.Files.size(Files.java:2332)\n\tat org.apache.lucene.store.FSDirectory.fileLength(FSDirectory.java:210)\n\tat org.apache.lucene.store.NRTCachingDirectory.fileLength(NRTCachingDirectory.java:127)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(LukeRequestHandler.java:592)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.handleRequestBody(LukeRequestHandler.java:137)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2082)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:670)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:458)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:225)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:183)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\n\nnull:java.nio.file.NoSuchFileException: /solr/solr-data/data/expiredDomains/data/index/segments_fknc\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n\tat sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n\tat sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\n\tat java.nio.file.Files.readAttributes(Files.java:1737)\n\tat java.nio.file.Files.size(Files.java:2332)\n\tat org.apache.lucene.store.FSDirectory.fileLength(FSDirectory.java:210)\n\tat org.apache.lucene.store.NRTCachingDirectory.fileLength(NRTCachingDirectory.java:127)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(LukeRequestHandler.java:592)\n\tat org.apache.solr.handler.admin.LukeRequestHandler.handleRequestBody(LukeRequestHandler.java:137)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:155)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2082)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:670)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:458)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:225)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:183)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745) ",
            "id": "comment-15182144"
        },
        {
            "date": "2016-03-06T14:51:49+0000",
            "author": "Shai Erera",
            "content": "I've just tried that on 5.5.0 and it seems to work without any problems. I did use bin/solr start -e cloud and not on a \"real\" Solr box though (haven't upgraded them to 5.5 yet), but I don't see how this exception is possible. The code uses an instance of IndexReader to get all that information, and that instance must have read the segments_N to read the commit point. Could there be some other process on that may delete this file? ",
            "id": "comment-15182185"
        },
        {
            "date": "2016-03-06T14:56:49+0000",
            "author": "Yonik Seeley",
            "content": "I don't see how this exception is possible.\n\nA changing index (i.e. new segments files are written, old ones are removed).\nEither the exception needs to be swallowed, or we should skip retrieving the size of the segments file (is it ever important?) ",
            "id": "comment-15182189"
        },
        {
            "date": "2016-03-06T15:21:57+0000",
            "author": "Shai Erera",
            "content": "How can a changing index affect the code here. The code uses an IndexReader instance, and Lucene doesn't delete index files until the last reader is closed (within the same process). Also, if that IR instance says its commit point references a certain segments_N file, and some other process then goes and deletes index files, how can that IR instance work afterwards? I guess I'm missing something here.\n\nAlso, CoreAdminHandler.getCoreStatus() computes the size of the directory immediately after, although it doesn't use an IR instance to do that, but still, can't it fail while listing the directory and then attempt to compute file lengths? How is that different then computing the file length of the segments_N?\n\nThe length is important so that you can make some comparisons to e.g. one segments_37 vs another (in a backup maybe), to know if one may be corrupt. Maybe not the best use case, but I think that it's an important piece of information. Before we remove it I'd like to get to the bottom of the exception, to ensure we don't miss something here, or there's a potential bug lurking in the code, and removing that particular code will just hide it again.\n\nIf my assumptions are incorrect, and however that LukeRequestHandler works is not the usual workflow with Lucene's IndexWriter/Reader, I don't mind catching the exception and reporting size 0 for that file. But I think it's unhealthy if the system can have an IR which references files that may be deleted ... ",
            "id": "comment-15182197"
        },
        {
            "date": "2016-03-06T16:21:48+0000",
            "author": "Uwe Schindler",
            "content": "How can a changing index affect the code here. The code uses an IndexReader instance, and Lucene doesn't delete index files until the last reader is closed (within the same process).\n\nLucene deletes the files no longer referenced by an index (through any commit) so they disappear on the directory listing. IndexReaders still having them open on older index state are not affected (\"delete on last close\" POSIX semantics) - the inode is still existing, just the directory entry is gone. The inode is deleted if nothing refers to it anymore. This is different on Windows under some circumstances (MMapDirectory). ",
            "id": "comment-15182215"
        },
        {
            "date": "2016-03-06T16:28:17+0000",
            "author": "Yonik Seeley",
            "content": "How can a changing index affect the code here. The code uses an IndexReader instance, and Lucene doesn't delete index files until the last reader is closed\n\nOn the contrary, lucene has pretty much always deleted (or tried to delete) files that are not part of the most recent commit (i.e. not referenced by the latest segments_N).  In UNIX, we count on the fact that any files that are still open are still usable (even if they are no longer reachable from the directory).\n\nIt's easy to reproduce this...  follow the first few steps in the tutorial http://yonik.com/solr-tutorial/\nthrough the first document add.  Then wait >15sec for the auto hard commit to kick in.  Then check /solr/admin/cores and the exception will appear because the index files from the currently open reader will no longer be in the directory. ",
            "id": "comment-15182217"
        },
        {
            "date": "2016-03-07T06:16:50+0000",
            "author": "Shai Erera",
            "content": "OK yea you're right, I was confused. The file can be read by the open IR, but won't appear in directory listing. I opened SOLR-8793 to fix this, sorry for that!\n\nIs there a workaround until the fix is released? Refresh the searcher maybe? ",
            "id": "comment-15182640"
        },
        {
            "date": "2016-10-26T18:05:17+0000",
            "author": "Hrishikesh Gadre",
            "content": "Shai Erera I ran into a similar problem (NoSuchFileException for the segments file) while working on Solr backup/restore. This problem can be avoided by using the following trick implemented in ReplicationHandler.\n\nhttps://github.com/apache/lucene-solr/blob/7794fbd13f1a0edfff8f121fb1c6a01075eeef6a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java#L537-L542\n\nI see that LukeRequestHandler is not implementing similar strategy. \nhttps://github.com/apache/lucene-solr/blob/7794fbd13f1a0edfff8f121fb1c6a01075eeef6a/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java#L583\n\nMy guess is that if we change LukeRequestHandler to implement a strategy similar to ReplicationHandler, it should fix the problem. Although I don't fully understand why is that the case. Yonik Seeley Uwe Schindler you have any idea? ",
            "id": "comment-15609199"
        },
        {
            "date": "2016-10-26T19:20:14+0000",
            "author": "Hrishikesh Gadre",
            "content": "Yonik Seeley Shai Erera Ok I confirmed that the above mentioned approach fixes the NoSuchFileException for the segments file. Please refer to this quick patch,\n\nhttps://github.com/hgadre/lucene-solr/commit/e780f63d4ce79b30f3379df3eb59021394080cc8\n\nOne open question at this point,\n\nIf we fetch the IndexCommit via solrCore.getDeletionPoplicy().getLatestCommit() API, then should we be using the corresponding IndexReader instance (instead of IndexSearcher.getIndexReader()) ?. Otherwise we may get inconsistent results. But after reviewing the code, it looks like IndexCommit.getReader() method may return null value. So I am not sure if we can rely on it. Any thoughts on this? ",
            "id": "comment-15609397"
        }
    ]
}