{
    "id": "SOLR-9721",
    "title": "Create a javabin parser for streaming end point",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "",
    "attachments": {
        "SOLR-9721.patch": "https://issues.apache.org/jira/secure/attachment/12836900/SOLR-9721.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-11-04T14:51:29+0000",
            "author": "Yonik Seeley",
            "content": "It seems like it would be cleaner / easier (and avoid adding other endpoints) to just do it like /select.  Have \"wt\" control the desired output format.\n\nAlso, the new javabin.json format stuff still seems like overkill.  It seems like it would be much less code to map it on the client side as desired.\nI think we're only talking about SolrDocument and SolrDocumentList?  Those can both be mapped by the client if it cares and we don't need all these new classes. ",
            "id": "comment-15636553"
        },
        {
            "date": "2016-11-04T16:20:03+0000",
            "author": "Noble Paul",
            "content": "My preference is to have the type information preserved for primitive types and get rid of all the extra container objects and just have map and list\n\nIn the future, I would like to limit the types to far fewer than what we have today. it makes no sense to a user/developer when he sees a Map in JSON and the payload may contain Map/NamedList/SimpleOrderedMap/SolrDocument etc. it's not a good idea to convert any of these objects to Map just in time at client side , it is just leads to unnecessary object creation\n\n\n ",
            "id": "comment-15636872"
        },
        {
            "date": "2016-11-04T16:26:20+0000",
            "author": "Yonik Seeley",
            "content": "I agree there is value to presenting standard containers only (esp for libraries that want to re-encode as JSON or something).\nBut I think from an implementation point of view, the simplest way by far is to have the decoder (optionally) do it.  No extra classes necessary.\n\nWe should also avoid conflating this with \"JSON\".  Using Map for NamedList, SolrDocument and SolrDocumentList does not mean that JSON will be able to represent everything that is sent over binary... it still can't (dates get transformed to a string, +-Infinity can't be represented, etc).\n\nit's not a good idea to convert any of these objects to Map just in time at client side , it is just leads to unnecessary object creation\n\nNo it doesn't... that's an implementation detail. ",
            "id": "comment-15636891"
        },
        {
            "date": "2016-11-04T16:28:56+0000",
            "author": "Noble Paul",
            "content": "The extra class is pretty simple and it reduces the actual cost of new Object creation at client side. It is not a lot of code. So, it's worth it ",
            "id": "comment-15636899"
        },
        {
            "date": "2016-11-04T16:32:47+0000",
            "author": "Yonik Seeley",
            "content": "You're creating another response writer (JsonJavabinWriter) that extends JSONWriter.  That's going to be more to maintain, plus it's confusing.\nJust make the decoder optionally create a Map when it sees a SolrDocument (for example).  No need to create any new classes (or endpoints) on the server side at all! ",
            "id": "comment-15636917"
        },
        {
            "date": "2016-11-04T16:33:22+0000",
            "author": "Noble Paul",
            "content": "I'm all for preserving all primitives (like date, int, float etc)\n\nNo it doesn't... that's an implementation detail.\n\nWhen a user/developer invokes Map<String,Object>next() the code internally has to create the maps. The entire Streaming code is written with this API ",
            "id": "comment-15636920"
        },
        {
            "date": "2016-11-04T16:41:23+0000",
            "author": "Noble Paul",
            "content": "Actually, I tried doing this. It was extremely hard and much more complex to make it work with the streaming code. It breaks at so many places\n\nThat's going to be more to maintain, plus it's confusing.\n\nI wouldn't have wanted to go down that path. But , looking at JavabinCodec, it looks like a kitchen sink and it begs to be replaced with something saner. It's much more complex than it should be. \n\nI would like to know what is useful in using NamedList/SimpleOrderedmap/NamedList/SolrDocument compared to what JSON does today. JSON output looks much cleaner and the javabin looks awkward and confusing. There is a lot of value in having a 1:1 mapping between binary/json ",
            "id": "comment-15636938"
        },
        {
            "date": "2016-11-04T20:35:40+0000",
            "author": "Yonik Seeley",
            "content": "It was extremely hard and much more complex to make it work with the streaming code.\n\nAh... I was coming from the perspective of a normal client that would say \"deserialize this into an object hierarchy for me\".\nI think this is the crux of the confusion... I think you're coming at this from \"how do I replace JSON with binary\" in the streaming API.\nDo you have a pointer into the streaming code that causes issues?  I looked at SortingResponseWriter and it looks like it does the JSON encoding itself, so this patch won't affect that?\n\nBut , looking at JavabinCodec, it looks like a kitchen sink and it begs to be replaced with something saner. \n\nThis patch doesn't seem to do that though... (replace JavaBinCodec), it only adds to that complexity of the code.\n\nI would like to know what is useful in using NamedList/SimpleOrderedmap/NamedList/SolrDocument compared to what JSON does today.\n\nThat seems like a different discussion... I already agreed \"there is value to presenting standard containers only\".  This patch doesn't remove any of those things from the code base anyway.  We're talking about the mechanism by which one can get standard java.util containers.\n\nThere is a lot of value in having a 1:1 mapping between binary/json\n\nWe just got done talking about the fact that it won't actually be a 1:1 mapping because binary can represent things that JSON can't.  Round-tripping will fail.\n\nAnd really, if we're looking at a new binary format, there are a lot of things I'd like to clean up... ",
            "id": "comment-15637596"
        },
        {
            "date": "2016-11-05T02:00:30+0000",
            "author": "Noble Paul",
            "content": "I started with writing a shim parser which converts types on the fly (converts javabin object types to json type Objects and primitives). The complexity came from the fact that the parser has to be a streaming pull parser to achieve the efficiency. I could not simply override certain methods on javabinCodec .  It was proving to be much harder than I initially thought. However, I shall take another stab at that.  ",
            "id": "comment-15638345"
        },
        {
            "date": "2016-11-15T09:18:39+0000",
            "author": "Noble Paul",
            "content": "Yonik Seeley The parsing is done with a shim parser ",
            "id": "comment-15666613"
        },
        {
            "date": "2016-11-24T03:30:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 41d7b245749bb02ed46a5fed7c4ee3b7b58e8266 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=41d7b24 ]\n\nSOLR-9721: javabin Tuple parser for streaming and other end points ",
            "id": "comment-15692068"
        },
        {
            "date": "2016-11-24T03:37:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 28fd42bf4ab47c130d814e1abd3e318f29ea66d7 in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=28fd42b ]\n\nSOLR-9721: javabin Tuple parser for streaming and other end points ",
            "id": "comment-15692084"
        }
    ]
}