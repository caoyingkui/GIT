{
    "id": "SOLR-6730",
    "title": "select?replicaAffinity=(node|host) and replicaAffinity.hostPriorities support",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "If no shards parameter is supplied with a select request then sub-requests will go to a random selection of live solr nodes hosting shards for the collection of interest. All sub-requests must complete before results can be collated i.e. the slowest sub-request determines how fast the search completes.\n\nUse of optional replicaAffinity can reduce the number of JVMs hit by a given search (the more JVMs are hit, the higher the chance of hitting a garbage collection pause in one of many JVMs). Preferentially directing requests to certain areas of the cloud can also be useful for debugging or when some replicas reside on 'faster' machines.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-11T17:04:24+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user cpoerschke opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/104\n\n    select?replicaAffinity=(node|host) and replicaAffinity.hostPriorities support\n\n    https://issues.apache.org/jira/i#browse/SOLR-6730\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bloomberg/lucene-solr trunk-replica-affinity-feature\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/104.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #104\n\n\ncommit 66b56265bdefec7eb814bfb533c0ff19bb1dcdff\nAuthor: Christine Poerschke <cpoerschke@bloomberg.net>\nDate:   2014-08-12T10:32:57Z\n\n    solr: select?replicaAffinity=(node|host) and replicaAffinity.hostPriorities support\n\n    This commit also includes changes to reduce SearchHandler's overall use of ShardHandler objects.\n\n    ---------\n\n    solr: select?replicaAffinity=(node|host) support, select?replicaAffinity=host&replicaAffinity.hostPriorities=hostA,hostB=1,hostC=2,hostD=2,hostE=3 prioritisation support\n\n    illustration: `4-hosts-x-2-ports=8-instances 8-shards 2-replica system`\n\n      http://host1:port1/solr/collection1_shard1_replicaA/\n      http://host1:port1/solr/collection1_shard3_replicaA/\n\n      http://host1:port2/solr/collection1_shard5_replicaA/\n      http://host1:port2/solr/collection1_shard7_replicaA/\n\n      http://host2:port1/solr/collection1_shard2_replicaA/\n      http://host2:port1/solr/collection1_shard4_replicaA/\n\n      http://host2:port2/solr/collection1_shard6_replicaA/\n      http://host2:port2/solr/collection1_shard8_replicaA/\n\n      http://host3:port1/solr/collection1_shard1_replicaB/\n      http://host3:port1/solr/collection1_shard3_replicaB/\n\n      http://host3:port2/solr/collection1_shard5_replicaB/\n      http://host3:port2/solr/collection1_shard7_replicaB/\n\n      http://host4:port1/solr/collection1_shard2_replicaB/\n      http://host4:port1/solr/collection1_shard4_replicaB/\n\n      http://host4:port2/solr/collection1_shard6_replicaB/\n      http://host4:port2/solr/collection1_shard8_replicaB/\n\n    `.../select` plain will route sub-requests to a random selection of solr cores and so could potentially use all 8 JVM instances\n\n      http://host1:port1/solr/collection1_shard1_replicaA/\n      http://host4:port1/solr/collection1_shard2_replicaB/\n      http://host3:port1/solr/collection1_shard3_replicaB/\n      http://host2:port1/solr/collection1_shard4_replicaA/\n      http://host1:port2/solr/collection1_shard5_replicaA/\n      http://host4:port2/solr/collection1_shard6_replicaB/\n      http://host3:port2/solr/collection1_shard7_replicaB/\n      http://host2:port2/solr/collection1_shard8_replicaA/\n\n    `.../select?replicaAffinity=node` will route sub-requests to a random selection of solr cores whilst maintaining node affinity i.e. sub-requests that can go to the same solr instance will go to the same solr instance e.g.\n\n      http://host1:port1/solr/collection1_shard1_replicaA/\n      http://host4:port1/solr/collection1_shard2_replicaB/\n      http://host1:port1/solr/collection1_shard3_replicaA/\n      http://host4:port1/solr/collection1_shard4_replicaB/\n      http://host3:port2/solr/collection1_shard5_replicaB/\n      http://host2:port2/solr/collection1_shard6_replicaA/\n      http://host3:port2/solr/collection1_shard7_replicaB/\n      http://host2:port2/solr/collection1_shard8_replicaA/\n\n    `.../select?replicaAffinity=host` will route sub-requests to a random selection of solr cores whilst maintaining host affinity i.e. sub-requests that can go to the same host machine will go to the same host machine e.g.\n\n      http://host1:port1/solr/collection1_shard1_replicaA/\n      http://host2:port1/solr/collection1_shard2_replicaA/\n      http://host1:port1/solr/collection1_shard3_replicaA/\n      http://host2:port1/solr/collection1_shard4_replicaA/\n      http://host1:port2/solr/collection1_shard5_replicaA/\n      http://host2:port2/solr/collection1_shard6_replicaA/\n      http://host1:port2/solr/collection1_shard7_replicaA/\n      http://host2:port2/solr/collection1_shard8_replicaA/\n\n    `.../select?replicaAffinity=host&replicaAffinity=node` will route sub-requests to a random selection of solr cores whilst maintaining first host affinity and secondly node affinity (the latter clearly only applies if multiple JVMs on a given machine contain the same shard).\n\n    If `replicaAffinity=host` is requested then optional `replicaAffinity.hostPriorities` are supported:\n\n    `.../select?replicaAffinity=host&replicaAffinity.hostPriorities=hostX=2,hostY=2,hostZ=1` will route sub-requests to hostZ (priority 1) for shards that are available on that host, to randomly either hostX or hostY (both priority 2) for shards available on those two hosts but not available on a priority 1 host.\n\n    `replicaAffinity.hostPriorities=hostZ` and `replicaAffinity.hostPriorities=hostZ=1` are equivalent.\n\n    If host priorities are supplied they can be just a subset of all hosts, preference will be given to live nodes on the prioritised hosts and random selections will be made for the remaining sub-requests.\n\n    ---------\n\n    solr: reduce SearchHandler's overall use of ShardHandler objects (from N+1+x to just 1)\n\n    before:\n\n\tA search request to an N-shard system constructs N+1+x ShardHandler objects in total:\n\t1 object in the receiving solr instance\n\t1 object in each of the N shards that receive an initial sub-request (for top ids or top group ids)\n\t1 object in each of x shards that receive a subsequent sub-request (for top ids within group or to get fields)\n\n\n\n    after:\n\n\tA search request to an N-shard systems constructs 1 ShardHandler object in the receiving solr instance only.\n\n\n\n    summary of change:\n\n\tmove non-distrib related code fragments from HttpShardHandler.checkDistrib to SearchHandler\n\trename ShardHandler.checkDistrib to ShardHandler.prepDistrib (to be called for distributed requests only)\n\tSearchHandler constructs ShardHandler object only for distributed requests\n\n\n\n ",
            "id": "comment-14206629"
        },
        {
            "date": "2015-01-13T17:22:34+0000",
            "author": "Mark Miller",
            "content": "Cool - I like it. I think a feature like this needs at least some basic tests added though. Any volunteers? ",
            "id": "comment-14275569"
        },
        {
            "date": "2015-01-14T16:35:36+0000",
            "author": "Christine Poerschke",
            "content": "Am happy to give basic tests for this a go. ",
            "id": "comment-14277183"
        },
        {
            "date": "2016-09-29T11:29:43+0000",
            "author": "Noble Paul",
            "content": "Christine Poerschke pls take a look at SOLR-8146\nit's a more comprehensive strategy for replica affinity ",
            "id": "comment-15532530"
        },
        {
            "date": "2016-10-17T18:57:23+0000",
            "author": "Christine Poerschke",
            "content": "Noble and I discussed offline re: SOLR-6730 and SOLR-8146 overlaps and differences. I will try to summarise here as bullet points, Noble Paul please add or correct if i missed or misunderstood something.\n\n\n\tThe use case and motivation for the select?replicaAffinity=(node|host) part of SOLR-6730 was to reduce the number of JVMs hit by a given search since the more JVMs are hit, the higher the chance of hitting a garbage collection pause in one of many JVMs.\n\n\n\n\n\tThe use case and motivation for the replicaAffinity.hostPriorities=... part of SOLR-6730 was to preferentially direct requests from the same user/source to certain areas of the cloud.\n\t\n\t\tThe implementation of the replicaAffinity.hostPriorities=... approach requires configuration somewhere i.e. a list of which hosts to prioritise.\n\t\tNo matter where it is stored, maintaining configuration can be cumbersome as collections and hosts change over time.\n\t\n\t\n\n\n\n\n\tThe objective of directing requests from the same user/source to certain areas of the cloud can be achieved without configuration, and the objective of reducing the number of JVMs hit by a search can pretty much be achieved that way also.\n\t\n\t\tApproach outline:\n\t\t\n\t\t\tTwo numeric parameters ('seed' and 'mod') are optionally added to each request.\n\t\t\tThe two parameters 'place' the requests within the cloud, e.g. for mod=9 any seed between 0 and 8 would be valid and seed=6 would 'place' the request with the 7th of 9 replicas, or more realistically the 3rd of 3 replicas.\n\t\t\tseed-plus-mod placement automatically adjusts when the number of replicas changes i.e. (seed=2,mod=6) would be 3rd-of-6 or 2nd-of-4 or 2nd-of-3 or 1st-of-2 placement.\n\t\t\tSOLR-6730 here would likely be abandoned in favour of the approach outlined.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tWhat is common to SOLR-6730 and SOLR-8146:\n\t\n\t\toptional parameters would support changing of the existing behaviour\n\t\texisting behaviour is maintained if the optional parameters are not supplied\n\t\n\t\n\n\n\n\n\tWhat is different between SOLR-6730 and SOLR-8146:\n\t\n\t\tpoint-of-use of the optional parameter is HttpShardHandler[Factory] for SOLR-6730\n\t\tpoint-of-use of the optional parameter is CloudSolrClient (and HttpShardHandler[Factory]?) for SOLR-8146\n\t\n\t\n\n\n\n\n\tNext steps:\n1. SOLR-8332 to factor HttpShardHandler[Factory]'s url shuffling out into a ReplicaListTransformer class\n2. creation of additional ReplicaListTransformer implementations corresponding to the approach outlined above\n\n ",
            "id": "comment-15583110"
        }
    ]
}