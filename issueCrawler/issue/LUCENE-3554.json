{
    "id": "LUCENE-3554",
    "title": "AbstractField / Field / NumericField do not override equals and hashcode methods",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Field, NumericField and AbstractField implementations of Fieldable do not override equals and hashcode methods and cannot be compared as such.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-02T18:55:05+0000",
            "content": "Is there any special reason which prevent these classes to override the equals/hashcode methods? If not, would a patch be welcome? ",
            "author": "Alexandre Dupriez",
            "id": "comment-13142411"
        },
        {
            "date": "2011-11-02T18:57:45+0000",
            "content": "How would equals work if you use public Field(String name, TokenStream tokenStream) ? ",
            "author": "Robert Muir",
            "id": "comment-13142413"
        },
        {
            "date": "2011-11-02T21:33:30+0000",
            "content": "Could the equals method of Field rely on the equals implementation of AttributeSource, which TokenStream inherits from? ",
            "author": "Alexandre Dupriez",
            "id": "comment-13142570"
        },
        {
            "date": "2011-11-02T21:45:06+0000",
            "content": "The problem is you would have to consume the entire stream (analyze the potentially large document) to compute this... \nI think its better to just return Object.equals/hashcode than to have such a costly implementation ",
            "author": "Robert Muir",
            "id": "comment-13142582"
        },
        {
            "date": "2011-11-03T17:51:35+0000",
            "content": "The problem is you would have to consume the entire stream (analyze the potentially large document) to compute this\n\n...but TokenStream (via AttributeSource) already has equals+hashCode methods that aren't just inherited from Object \u2013 are they doing this stream consumption?\n\nif they are, that seems like a bug (TokenStream should probably override AttributeSource to use \"==\" and System.identiyHashCode, right?)\n\nThat seems like an orthogonal issue to whether AbstractField/Field/NumericField could have useful equals/hashCode methods \u2013 it seems like those classes should be able to compose the equals/hashCodes of their parts, and if in some cases one of those parts is a TokenStream (which uses Object.equals) so be it \u2013 but in other cases (ie: NumericField, or other user implemented subclasses of AbstractField) it might be very useful. ",
            "author": "Hoss Man",
            "id": "comment-13143382"
        },
        {
            "date": "2011-11-03T18:00:28+0000",
            "content": "\n...but TokenStream (via AttributeSource) already has equals+hashCode methods that aren't just inherited from Object \u2013 are they doing this stream consumption?\n\nOnly at that 'state' in time. You would have to walk the tokenstreams in parallel, verifying equals() along the way, and ensure # of tokens is the same to verify that two tokenstreams are 'equal'.\n\n\nif they are, that seems like a bug (TokenStream should probably override AttributeSource to use \"==\" and System.identiyHashCode, right?)\n\nNo, because it works fine for that stream at that moment in time.\n\n\nThat seems like an orthogonal issue to whether AbstractField/Field/NumericField could have useful equals/hashCode methods \n\nNot at all, because fields can be set by tokenstreams, equals/hashcode would be broken if we did this.\n\nbroken != useful.\n ",
            "author": "Robert Muir",
            "id": "comment-13143389"
        }
    ]
}