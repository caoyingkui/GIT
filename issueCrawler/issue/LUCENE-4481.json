{
    "id": "LUCENE-4481",
    "title": "AnalyzingSuggester may fail to return correct topN suggestions",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I hit this when working on LUCENE-4480.\n\nBecause AnalyzingSuggester may prune some of the topN paths found by FST's Util.TopNSearcher, this means the queue size limit of topN makes the overall search inadmissible, ie it may incorrectly prune paths that would have lead to a competitive path.\n\nHowever, such pruning is rare: it happens only for graph token streams, and even then only when competitive analyzed forms share the same surface forms.\n\nThe simplest way to fix this is to make the queue unbounded but this is likely a sizable performance hit ... I haven't tested yet.  It's even possible the way the dups happen (always at the \"end\" of the suggestion, because we tack on 0 byte followed by ord dedup byte) prevent this bug from even occurring and so this could all be a false alarm!  I have to try to make a test case showing it ...\n\nA cop-out solution would be to expose a separate queueSize or queueMultiplier (over the topN) so that if users are affected by this they could crank up the queue size or multiplier.",
    "attachments": {
        "LUCENE-4481.patch": "https://issues.apache.org/jira/secure/attachment/12550018/LUCENE-4481.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-19T17:51:09+0000",
            "content": "Patch, fixing one of the cases, where exactFirst=true may cause one too few paths to be returned. ",
            "author": "Michael McCandless",
            "id": "comment-13480178"
        },
        {
            "date": "2012-10-19T17:52:22+0000",
            "content": "There are still two other cases:\n\n\n\tDuplicate paths (where same surface form had more than one analyzed form)\n\n\n\n\n\tAn opto that sets queue to null for the last path\n\n\n\nI'll first get test cases showing these bugs ... ",
            "author": "Michael McCandless",
            "id": "comment-13480180"
        },
        {
            "date": "2012-10-19T18:15:29+0000",
            "content": "New patch w/ test case showing the 2nd bug (setting queue to null for last path).  To fix this I just commented out that nulling (it's just an opto) and left a TODO to re-instate it if we can make it admissible. ",
            "author": "Michael McCandless",
            "id": "comment-13480206"
        },
        {
            "date": "2012-10-19T19:18:26+0000",
            "content": "New patch, with test for the third bug and simplest fix (unbounded\nqueue).  All tests pass ... so this is the starting point, and we can\nnow (separately) try to add back the optimizations.\n\nHere's LookupBenchmarkTest with the patch:\n\n\n[junit4:junit4] Suite: org.apache.lucene.search.suggest.LookupBenchmarkTest\n[junit4:junit4]   2> -- construction time\n[junit4:junit4]   2> JaspellLookup   input: 50001, time[ms]: 23 [+- 4.29]\n[junit4:junit4]   2> TSTLookup       input: 50001, time[ms]: 71 [+- 5.10]\n[junit4:junit4]   2> FSTCompletionLookup input: 50001, time[ms]: 121 [+- 7.23]\n[junit4:junit4]   2> WFSTCompletionLookup input: 50001, time[ms]: 89 [+- 4.90]\n[junit4:junit4]   2> AnalyzingSuggester input: 50001, time[ms]: 237 [+- 27.55]\n[junit4:junit4] OK      11.9s | LookupBenchmarkTest.testConstructionTime\n[junit4:junit4]   2> -- prefixes: 2-4, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 271 [+- 3.83], ~kQPS: 185\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 732 [+- 8.97], ~kQPS: 68\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 121 [+- 4.34], ~kQPS: 413\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 338 [+- 4.64], ~kQPS: 148\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 791 [+- 7.66], ~kQPS: 63\n[junit4:junit4] OK      46.1s | LookupBenchmarkTest.testPerformanceOnPrefixes2_4\n[junit4:junit4]   2> -- prefixes: 6-9, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 101 [+- 3.26], ~kQPS: 496\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 88 [+- 2.78], ~kQPS: 568\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 151 [+- 3.36], ~kQPS: 332\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 77 [+- 3.45], ~kQPS: 646\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 272 [+- 3.87], ~kQPS: 184\n[junit4:junit4] OK      14.4s | LookupBenchmarkTest.testPerformanceOnPrefixes6_9\n[junit4:junit4]   2> -- RAM consumption\n[junit4:junit4]   2> JaspellLookup   size[B]:    9,815,152\n[junit4:junit4]   2> TSTLookup       size[B]:    9,858,792\n[junit4:junit4]   2> FSTCompletionLookup size[B]:      466,520\n[junit4:junit4]   2> WFSTCompletionLookup size[B]:      507,640\n[junit4:junit4]   2> AnalyzingSuggester size[B]:      889,138\n[junit4:junit4] OK      0.74s | LookupBenchmarkTest.testStorageNeeds\n[junit4:junit4]   2> -- prefixes: 100-200, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 71 [+- 3.14], ~kQPS: 702\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 32 [+- 0.74], ~kQPS: 1561\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 145 [+- 3.60], ~kQPS: 344\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 49 [+- 4.97], ~kQPS: 1029\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 235 [+- 3.52], ~kQPS: 212\n[junit4:junit4] OK      11.3s | LookupBenchmarkTest.testPerformanceOnFullHits\n[junit4:junit4] Completed in 84.81s, 5 tests\n\n\n\nAnd on trunk:\n\n\n[junit4:junit4] <JUnit4> says ol\u00e1! Master seed: 827F8DD5C0F3472D\n[junit4:junit4] Executing 1 suite with 1 JVM.\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.lucene.search.suggest.LookupBenchmarkTest\n[junit4:junit4]   2> -- prefixes: 6-9, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 114 [+- 2.83], ~kQPS: 439\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 66 [+- 2.06], ~kQPS: 762\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 138 [+- 2.13], ~kQPS: 362\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 69 [+- 4.75], ~kQPS: 725\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 260 [+- 5.00], ~kQPS: 192\n[junit4:junit4] OK      15.0s | LookupBenchmarkTest.testPerformanceOnPrefixes6_9\n[junit4:junit4]   2> -- construction time\n[junit4:junit4]   2> JaspellLookup   input: 50001, time[ms]: 22 [+- 3.19]\n[junit4:junit4]   2> TSTLookup       input: 50001, time[ms]: 64 [+- 2.32]\n[junit4:junit4]   2> FSTCompletionLookup input: 50001, time[ms]: 120 [+- 2.99]\n[junit4:junit4]   2> WFSTCompletionLookup input: 50001, time[ms]: 86 [+- 1.40]\n[junit4:junit4]   2> AnalyzingSuggester input: 50001, time[ms]: 232 [+- 3.98]\n[junit4:junit4] OK      10.7s | LookupBenchmarkTest.testConstructionTime\n[junit4:junit4]   2> -- prefixes: 100-200, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 72 [+- 2.92], ~kQPS: 694\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 32 [+- 3.12], ~kQPS: 1556\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 140 [+- 1.21], ~kQPS: 356\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 45 [+- 1.74], ~kQPS: 1102\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 233 [+- 9.29], ~kQPS: 215\n[junit4:junit4] OK      11.0s | LookupBenchmarkTest.testPerformanceOnFullHits\n[junit4:junit4]   2> -- prefixes: 2-4, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 257 [+- 3.21], ~kQPS: 194\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 510 [+- 5.35], ~kQPS: 98\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 119 [+- 3.17], ~kQPS: 421\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 240 [+- 5.40], ~kQPS: 208\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 595 [+- 8.07], ~kQPS: 84\n[junit4:junit4] OK      35.1s | LookupBenchmarkTest.testPerformanceOnPrefixes2_4\n[junit4:junit4]   2> -- RAM consumption\n[junit4:junit4]   2> JaspellLookup   size[B]:    9,815,152\n[junit4:junit4]   2> TSTLookup       size[B]:    9,858,792\n[junit4:junit4]   2> FSTCompletionLookup size[B]:      466,520\n[junit4:junit4]   2> WFSTCompletionLookup size[B]:      507,640\n[junit4:junit4]   2> AnalyzingSuggester size[B]:      889,138\n[junit4:junit4] OK      0.86s | LookupBenchmarkTest.testStorageNeeds\n[junit4:junit4] Completed in 72.97s, 5 tests\n\n\n\nSo the lookup is definitely slower .. WFSTCompletionLookup is most\nheavily affected. ",
            "author": "Michael McCandless",
            "id": "comment-13480287"
        },
        {
            "date": "2012-10-19T19:57:04+0000",
            "content": "Though this is a pretty big hit (i look at prefixes 2-4), lets commit the fix \nfor the bug first and then go back around to optimizations.  ",
            "author": "Robert Muir",
            "id": "comment-13480327"
        },
        {
            "date": "2012-10-19T20:31:33+0000",
            "content": "OK, new patch, this time adding back some optos:\n\n\n[junit4:junit4] Suite: org.apache.lucene.search.suggest.LookupBenchmarkTest\n[junit4:junit4]   2> -- RAM consumption\n[junit4:junit4]   2> JaspellLookup   size[B]:    9,815,152\n[junit4:junit4]   2> TSTLookup       size[B]:    9,858,792\n[junit4:junit4]   2> FSTCompletionLookup size[B]:      466,520\n[junit4:junit4]   2> WFSTCompletionLookup size[B]:      507,640\n[junit4:junit4]   2> AnalyzingSuggester size[B]:      889,138\n[junit4:junit4] OK      1.67s | LookupBenchmarkTest.testStorageNeeds\n[junit4:junit4]   2> -- prefixes: 6-9, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 108 [+- 8.81], ~kQPS: 464\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 79 [+- 1.07], ~kQPS: 631\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 148 [+- 2.54], ~kQPS: 339\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 67 [+- 2.78], ~kQPS: 745\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 260 [+- 3.92], ~kQPS: 192\n[junit4:junit4] OK      14.6s | LookupBenchmarkTest.testPerformanceOnPrefixes6_9\n[junit4:junit4]   2> -- prefixes: 2-4, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 262 [+- 5.16], ~kQPS: 191\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 641 [+- 6.46], ~kQPS: 78\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 118 [+- 2.95], ~kQPS: 424\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 239 [+- 4.84], ~kQPS: 210\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 660 [+- 7.39], ~kQPS: 76\n[junit4:junit4] OK      39.0s | LookupBenchmarkTest.testPerformanceOnPrefixes2_4\n[junit4:junit4]   2> -- construction time\n[junit4:junit4]   2> JaspellLookup   input: 50001, time[ms]: 23 [+- 4.20]\n[junit4:junit4]   2> TSTLookup       input: 50001, time[ms]: 64 [+- 2.06]\n[junit4:junit4]   2> FSTCompletionLookup input: 50001, time[ms]: 120 [+- 2.11]\n[junit4:junit4]   2> WFSTCompletionLookup input: 50001, time[ms]: 88 [+- 1.09]\n[junit4:junit4]   2> AnalyzingSuggester input: 50001, time[ms]: 245 [+- 27.85]\n[junit4:junit4] OK      10.9s | LookupBenchmarkTest.testConstructionTime\n[junit4:junit4]   2> -- prefixes: 100-200, num: 7, onlyMorePopular: true\n[junit4:junit4]   2> JaspellLookup   queries: 50001, time[ms]: 68 [+- 1.17], ~kQPS: 731\n[junit4:junit4]   2> TSTLookup       queries: 50001, time[ms]: 31 [+- 2.82], ~kQPS: 1617\n[junit4:junit4]   2> FSTCompletionLookup queries: 50001, time[ms]: 141 [+- 1.97], ~kQPS: 354\n[junit4:junit4]   2> WFSTCompletionLookup queries: 50001, time[ms]: 45 [+- 3.37], ~kQPS: 1099\n[junit4:junit4]   2> AnalyzingSuggester queries: 50001, time[ms]: 233 [+- 4.02], ~kQPS: 215\n[junit4:junit4] OK      11.1s | LookupBenchmarkTest.testPerformanceOnFullHits\n[junit4:junit4] Completed in 77.54s, 5 tests\n\n\n\nI added 2nd param (maxQueueDepth) to TopNSearcher, and fixed\nWFSTSuggester to pass topN for that (should get back most of its\nperf).  I also fixed AnalyzingSuggester: we can bound how big a queue\nwe need by the worst case number of analyzed forms for a single\nsurface form.  This is nice because if the analyzed doesn't create a\ngraph then we should have close to same perf as before. ",
            "author": "Michael McCandless",
            "id": "comment-13480361"
        },
        {
            "date": "2012-10-19T20:36:28+0000",
            "content": "\nThough this is a pretty big hit (i look at prefixes 2-4), lets commit the fix \nfor the bug first and then go back around to optimizations.\n\nI agree \u2013 I'll make two commits here: first fixing the bugs, then adding some optos back.  The optos don't fully recover the perf loss but they get much of it back ... ",
            "author": "Michael McCandless",
            "id": "comment-13480366"
        },
        {
            "date": "2012-10-19T21:55:29+0000",
            "content": "I've been following the discussion but I  don't get the original problem \u2013 could you provide an example of a token sequence (graph) for which the problem occurs? Is it in the patch somewhere (I looked at it but missed it somehow)? ",
            "author": "Dawid Weiss",
            "id": "comment-13480428"
        },
        {
            "date": "2012-10-19T22:27:44+0000",
            "content": "I think the general issue is the fact that one suggestion is stored in the fst multiple times if there is a graph at index time.\n\nSo imagine a synonyms of dog=puppy, and a suggestion of hairy dog is stored twice in the fst, hairy dog->hairy dog but also hairy puppy->hairy dog.\n\nWe don't want to return duplicate entries but also want a correct top n of unique suggestions ",
            "author": "Robert Muir",
            "id": "comment-13480459"
        },
        {
            "date": "2012-10-20T06:42:09+0000",
            "content": "Ok, get it. Bounding the priority queue is crucial to get good performance here so like Mike mentioned \u2013 it should probably be something adjustable with a sensible default so that extreme cases require manual tuning but it works fast for the average case. This could be solved by replacing synonym sets with a unique token but the number of such sets can grow exponentially so it's trading one beast for another \u2013 not worth the effort I think. ",
            "author": "Dawid Weiss",
            "id": "comment-13480665"
        },
        {
            "date": "2012-10-20T10:37:22+0000",
            "content": "The core problem is that the TopNSearcher assumes that every partial\npath will lead to at least one final path, but with the AnalyzingSuggester\nthis is in general false because of token stream graphs.\n\nSo as a first step I've turned off all queue pruning ... this fixes\nthe bugs.\n\nBut note that for WFSTCompletionLookup (why is this not WFSTSuggester?\n ) it's still true, so the solution is simple there: keep pruning\nthe queue like before.\n\nFor AnalyzingSuggsester my current solution is to bound the queue\nusing topN * M where M is the max number of analyzed forms we ever saw\nfor any surface form.  So this means if you never make graphs we keep\ndoing the same aggressive pruning as before. ",
            "author": "Michael McCandless",
            "id": "comment-13480687"
        },
        {
            "date": "2012-10-20T11:03:59+0000",
            "content": "OK this is the optimizations patch ... I added maxQueueDepth to TopNSearcher and passed appropriate values from WFSTCompletionLookup and AnalyzingSuggester.\n\nI also fixed AnalyzingSuggester store/load to save the maxAnalyzedPathsForOneInput ... but in general these methods make me nervous: how come they don't take Directory or DataInput/Output like our other store APIs, they don't seem well tested, they don't write a header (I know we don't promise back-compat here but it'd at least be nice to get a clear exc)... ",
            "author": "Michael McCandless",
            "id": "comment-13480697"
        },
        {
            "date": "2012-10-20T11:06:40+0000",
            "content": "Another possible fix for AnalyzingSuggester would be to \"guess\" an appropriate maxQueueDepth, run the search, and if the pruning becomes inadmissible (you can easily detect this by counting how many dup paths were actually rejected), then re-run the search with a larger guess, and iterate until you succeed.\n\nFor syn-heavy (or otherwise graph-heavy) analyzers this could be a win over the current patch.\n\nThough if the analyzer is doing so much expansion presumably the app would have set the limit on max expansions which would then make the current patch fast(er) again.\n\nBut I think we should separately explore that ... ",
            "author": "Michael McCandless",
            "id": "comment-13480698"
        },
        {
            "date": "2013-03-22T16:24:32+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1400635\n\nLUCENE-4481: add back some optos ",
            "author": "Commit Tag Bot",
            "id": "comment-13610654"
        },
        {
            "date": "2013-03-22T16:24:52+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1400417\n\nLUCENE-4481: turn off queue pruning (it's not in general admissible) ",
            "author": "Commit Tag Bot",
            "id": "comment-13610658"
        }
    ]
}