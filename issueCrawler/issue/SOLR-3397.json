{
    "id": "SOLR-3397",
    "title": "Insure that Replication and Solr Cloud are compatible",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "components": [
            "replication (java)",
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There has been at least one report of an early-adopter having replication (as in master/slave) configured with SolrCloud and having very odd results. Experienced Solr users could reasonably try this (or just have their configurations from 3.x Solr installations hanging around). Since SolrCloud takes this functionality over completely, it seems like replication needs to be made smart enough to disable itself if running under SolrCloud.",
    "attachments": {
        "SOLR-3397.patch": "https://issues.apache.org/jira/secure/attachment/12613260/SOLR-3397.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13259574",
            "date": "2012-04-23T12:40:26+0000",
            "content": "Since SolrCloud takes this functionality over completely, it seems like replication needs to be made smart enough to disable itself if running under SolrCloud.\n\nSolrCloud does not take this functionality over - it uses it. The example replication handler given in the example solrconfig.xml is sufficient. Some other config might make sense (say you want to enable basic auth or compression), while others should be left alone - eg you don't want to configure a node as a slave most likely.\n\nSolrCloud takes advantage of the existing replication functionality and pass parameters about who to poll from and when - you can't disable it - we might just do some conf checks and print warnings and or fail depending on config that is found - but in some cases their might be legit reasons to alter config in ways we don't anticipate depending on what you might be trying to setup. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13259581",
            "date": "2012-04-23T12:55:11+0000",
            "content": "I phrased it poorly, I'm aware that SolrCloud uses replication as needed.\n\nMy base question here is are we sure that if a user has a classic master/slave setup and is running SolrCloud, do they play nice together? So a slave polls the master, and new segments are moved to the slave (classic). Meanwhile, the master may or may not be the leader. The updates may have been received already via the leader forwarding the requests. Does this all behave well?\n\nAnd if the leader goes down, a new leader is elected and classic replication does what?\n\nIt seems like the replication handler polling should just be disabled in the SolrCloud world or is this all \"just handled\" today?\n\nWe've seen problems in the past where people configure a classic master/slave setup then merrily index to both machines, replication can get all confused. I'm making sure this has been handled or at least is flagged as something to check.\n\nAnd, yes, \"they shouldn't do that\". If we can put in a low-cost way to insure this it might save people grief. And people will no doubt be upgrading from 3.x at some point, moving their solrconfig files if nothing else....\n\nBut as I said, I may be seeing something that's not there in which case we can close this as \"silly boy is hallucinating again\"... "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13619222",
            "date": "2013-04-01T21:56:24+0000",
            "content": "I was planning to file a feature request for something that the Gluster project calls geo-replication.  Would that fall under this issue, or should it be a new one?\n\nWith this feature, you would have two semi-independent SolrCloud setups, one of which would replicate from the other.  Ideally, there would be no master or slave - either the replication would work in both directions, or a higher-level leader election would take place.\n\nThe driving force behind this feature is a user that wants to have a SolrCloud setup that is fully redundant between two data centers and can remain operational in the event of an entire data center going down.  I'm not aware of a way to build a zookeeper ensemble in two locations that can always guarantee a working cluster without split-brain.  Also, there is the fact that each update must be sent to all shards/replicas at the same time, which can be problematic when half of them are on a connection with high latency.  If synchronizing the two clouds happens on a longer interval than the indexing, latency is less of a problem.\n\nI'm sure there are a ton of technical challenges to this idea.  Perhaps this is a good candidate for GSoC? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13619232",
            "date": "2013-04-01T22:00:10+0000",
            "content": "The primary issue with a 'two-DC' solution is zookeeper.  A 'three-DC' solution with one zookeeper at each DC would work great, except for possible latency problems. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13619489",
            "date": "2013-04-02T03:48:45+0000",
            "content": "I would look at HBase replication.  HBase also relies on ZK, yet people use HBase replication across DCs.  Not bidirectional I believe, though. http://hbase.apache.org/replication.html . {Mark Miller's colleague, JD, is the main person responsible for HBase replication existence, so Mark can probably poke him for some tips. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13776264",
            "date": "2013-09-24T12:55:33+0000",
            "content": "Comments from dev list discussion:\n\nErick: \n\nLet's say a configuration is running SolrCloud and has <lst\nname=\"master\"> or  <lst name=\"slave\"> bits defined in the replication\nhandler. Is it valid? Taken care of? Is it worth a JIRA to barf if we\ndetect that condition?\n\nBecause it strikes me as something that's at worst undefined behavior,\nat best ignored and somewhere in the middle does replications as well\nas peer synchs as well as distributed updates.\n\nUnder any circumstances it doesn't seem like the user is doing the right thing.\n\nShawn:\n\nInitial thought: Yes, detect and explode.\n\nSecond thought: Allowing replication config for the expert user (possibly for backup purposes) might be useful.\n\nThird thought: Yes, detect and explode.  If someone wanted to write an application that used the handler as a direct API rather than through solrconfig.xml configuration, that would work with no problem. SolrCloud basically requires that the /replication handler be enabled, but not configured.\n\nIs the replication API fully documented anywhere?  It might be nice to provide a skeletal example java application that talks to the replication API for simple index backup purposes.  It would be particularly nice if it used CloudSolrServer (or the ZK client classes) and showed how to back up and restore multiple shards.  If I had any idea how to write such an application, I would have already gotten started on it. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13819589",
            "date": "2013-11-11T23:27:50+0000",
            "content": "Commit 1540881 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1540881 ]\n\nSOLR-3397: Insure that replication and SolrCloud are compatible. Actually, just log a warning if SolrCloud is detected and master or slave is configured in solrconfig.xml "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13819593",
            "date": "2013-11-11T23:29:58+0000",
            "content": "Patch that logs a warning if master or slave is configured and a zkController is detected. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13819769",
            "date": "2013-11-12T03:01:58+0000",
            "content": "Commit 1540930 from Erick Erickson in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1540930 ]\n\nSOLR-3397: Insure that replication and SolrCloud are compatible. Actually, just log a warning if SolrCloud is detected and master or slave is configured in solrconfig.xml "
        }
    ]
}