{
    "id": "SOLR-407",
    "title": "Uncached filter query parameters",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "Add a fq.nocache parameter (that may be specified multiple times) that adds filter clauses to the query which are not cached.  Further, these filters are embedded directly into the BooleanQuery, which should be more efficient when filters are\u00a0not reused.",
    "attachments": {
        "fq.nocache.patch": "https://issues.apache.org/jira/secure/attachment/12369067/fq.nocache.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Klaas",
            "id": "comment-12540638",
            "date": "2007-11-07T00:43:32+0000",
            "content": "To implement I exposed one method of QueryUtils (getAbs) so that negative filters can be added as prohibited clauses. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12541078",
            "date": "2007-11-08T16:45:08+0000",
            "content": "Mike: one thing that's not clear to me from a quick glance at your patch is wether or not this case works...\n\n   q= -foo & fq.nocache=bar\n\n...i think that in your patch, a boolean query containing one negative foo clause gets added to a new \"target\" query as a mandatory clause along with the fq.nocache ... and the SolrIndexSearcher code for detecting a pure negative query and finding the inverse doesn't get tripped. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12541129",
            "date": "2007-11-08T20:37:47+0000",
            "content": "Good catch!  This can be fixed in standard request handler as follows:\n\nif(null != ncFilters) {\n        BooleanQuery target;\n        if(query instanceof BooleanQuery) \n{\n          target = (BooleanQuery)query;\n        }\n else \n{\n          target = new BooleanQuery(true);\n          target.add(query, BooleanClause.Occur.MUST);\n        }\n        U.addFilters(ncFilters, target);\n        query = target;\n      }\n\nDisMax I don't think is a problem since it is adding to the top-level boolean query (can the dismax parser produce pure negative queries anyway?)\n\nI've fixed this with a test in my local copy.  If we pursue this any further, I'll post a patch (also incorporating Yonik's localParams suggestion). "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12777855",
            "date": "2009-11-14T09:44:04+0000",
            "content": "on my wishlist, targeting this for 1.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872565",
            "date": "2010-05-27T22:07:57+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043659",
            "date": "2011-06-03T16:46:23+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106276",
            "date": "2011-09-16T14:50:21+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13217061",
            "date": "2012-02-27T06:25:22+0000",
            "content": "Looks like it's been implemented as local parameter \n{!cache=false}\n. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13217062",
            "date": "2012-02-27T06:27:58+0000",
            "content": "It's SOLR-2429. Resolved as duplicate. "
        }
    ]
}