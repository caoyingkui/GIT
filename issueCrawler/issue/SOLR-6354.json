{
    "id": "SOLR-6354",
    "title": "Support stats over functions",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The majority of the logic in StatsValuesFactory for dealing with stats over fields just uses the ValueSource API.  There's very little reason we can't generalize this to support computing aggregate stats over any arbitrary function (or the scores from an arbitrary query).\n\nExample...\n\nstats.field={!func key=mean_rating mean=true}prod(user_rating,pow(editor_rating,2))\n\n\n\n...would mean that we can compute a conceptual \"rating\" for each doc by multiplying the user_rating field by the square of the editor_rating field, and then we'd compute the mean of that \"rating\" across all docs in the set and return it as \"mean_rating\"",
    "attachments": {
        "TstStatsComponent.java": "https://issues.apache.org/jira/secure/attachment/12662761/TstStatsComponent.java",
        "SOLR-6354.patch": "https://issues.apache.org/jira/secure/attachment/12668953/SOLR-6354.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14091545",
            "date": "2014-08-09T01:23:07+0000",
            "content": "\nProposed implementation...\n\n\n\tSimpleStats should check the local params of each stats.field for a \"type\" param\n\t\n\t\ttype is already treated special in local param parsing as as way to specify the parser type for the body of the string, ie: {!foo}... is just an alias for {!type=foo}...\n\t\n\t\n\tif \"type\" param doesn't exist, or is the empty string, treat the param value as a regular field name and get it's value source (just like is done today)\n\tif \"type\" does exist, do normal QParserPlugin lookup to parse the param value\n\t\n\t\tif the resulting Query is instanceof FunctionQuery, cast it and pull out it's ValueSource\n\t\telse: wrap the Query in a QueryValueSource\n\t\n\t\n\tadd a new subclass of NumericStatsValues that can be constructed directly with a ValueSource\n\n\n "
        },
        {
            "author": "Crawdaddy",
            "id": "comment-14101118",
            "date": "2014-08-18T19:17:59+0000",
            "content": "Hey Hoss, I think you mean StatsInfo should do the check you propose?  At least, that's where I found I needed to start intercepting this.\n\nI have all but the last line in your proposal implemented in StatsInfo.parse in a custom copy of StatsComponent, but having a little trouble seeing how to go from ValueSource -> StatsValues.  Can you provide a couple more pointers here?  \n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14101414",
            "date": "2014-08-18T22:17:25+0000",
            "content": "Hey Hoss, I think you mean StatsInfo should do the check you propose? At least, that's where I found I needed to start intercepting this.\n\nHmmm... i guess there's two code paths here that have to be considered?  I think i was looking at SimpleStats because that's where the individual stats.field values are parsed into the \"localParams\" variable \u2013 so we definitely need to check for a type there, and then do the right thing as far as dealing with the NumericStatsValues in terms of methods like SimpleStats.getStatsFields() and/or SimpleStats.getFieldCacheStats()\n\nBut i think you're right about StatsInfo ... looks like we need to account for it there as well ... i'd need to look over this more closely to understand what's going on there and why....\n\n...having a little trouble seeing how to go from ValueSource -> StatsValues. Can you provide a couple more pointers here? \n\nIf you look at StatsValuesFactory.createStatsValues and the existing AbstractStatsValues you'll see that it maintains references to the SchemaField/FieldType of the associated field \u2013 but the meat of the logic is in asking the FieldType for it's ValueSource to then accumulate values from.  So what i had in mind was  refactoring \"field\" specific bits of AbstractStatsValues as needed so that a (new) subclass could be completely field agnostic, and just do the accumulation directly from a VlaueSource passed in (based on the FunctionQParser in most cases)\n\nI have all but the last line in your proposal implemented...\n\nFYI: no need to \"hold back\" changes until they are \"done\" ... yonik's law of patches...\n\nA half-baked patch in Jira, with no documentation, no tests and no backwards compatibility is better than no patch at all.\n "
        },
        {
            "author": "Crawdaddy",
            "id": "comment-14101572",
            "date": "2014-08-19T00:11:46+0000",
            "content": "I did manage to get something working, but it has some problems.  I see what you mean on the StatsValuesFactory refactor.  Because I was experimenting with this in a copy of StatsComponent (which by the way, is not easy to do!), I ended up not modifying StatsValuesFactory at all.  Instead, I wrote a couple inner classes extending NumericStatsValues and FieldType that take a ValueSource as input.  In SimpleStats.getStatsFields() and SimpleStats.getFieldCacheStats(), I catch the exception to schema.getField() that is thrown when trying to look up non-existent function fields, and return my custom NSV/FT-based classes - stored in rb._statsInfo - instead.  This seems to have broken stat faceting, however, I think since other calls to StatsValuesFactory.createStatsValues outside StatsComponent don't use the same logic.  No doubt yours is the better road to travel - I was shooting for quick-n-dirty to see if this was a useful approach to a stats problem.\n\nAlso, regarding changing the output key: either this was either broken already, or I broke it somehow.\n\nWould it be useful for me to upload what I have as a reference point for you or someone else to implement more coherently?  I'm not sure I have the bandwidth to pull down a virgin Solr and migrate the changes at this time.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14101604",
            "date": "2014-08-19T00:25:30+0000",
            "content": "Would it be useful for me to upload what I have as a reference point for you or someone else to implement more coherently?\n\nYes, absolutely ... didn't you see my last comment?\n\nA half-baked patch in Jira, with no documentation, no tests and no backwards compatibility is better than no patch at all. "
        },
        {
            "author": "Crawdaddy",
            "id": "comment-14102248",
            "date": "2014-08-19T14:37:47+0000",
            "content": "Here's my start at this.  \n\nIf desired, this can be built as a replacement Stats Component by putting it's JAR in /webapp/WEB-INF/lib so it can access ResponseBuilder's package private _statsInfo.\n\nI added a few \"// SOLR-6354\" comments around my changes. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14130901",
            "date": "2014-09-12T00:08:32+0000",
            "content": "Also, regarding changing the output key: either this was either broken already, or I broke it somehow.\n\nYeah, beyond the initial problem you pointed out about code duplication dealing with where/how the StatsValues instances are constructed, theres also inconsistencies in when/how/if the localparams are parsed.  I'm tackling that in SOLR-6507 first. "
        },
        {
            "author": "Crawdaddy",
            "id": "comment-14131587",
            "date": "2014-09-12T14:13:05+0000",
            "content": "Excellent - thanks Hoss.  Maybe crosstalk, but do you think some of this work would make it easier for us to do stats on scores?  Scores mean something in my application and I want to use them in the Stats component. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14134844",
            "date": "2014-09-16T02:28:00+0000",
            "content": "\nFirst start at a patch along the lines of the original idea i outlined (now that SOLR-6507 has cleaned up the duplicate/broken localparams code).\n\nIn this patch, you can see the logic for figuring out if/when we're dealing with field faceting vs query/function faceting.  In the test changes, you can see it being smart about requests to facet over a function that really just normalizes away to being a single field\n\n\nThe next steps from here are labeled with nocommits \u2013 start propogating the StatsField instance directly to the various classes that deal with StatsValuesFactory so it can see if/when we need a schema based StatsValue instance, and when it should return a (new) StatsValue class that deals directly with a ValueSource\n\n\n\ndo you think some of this work would make it easier for us to do stats on scores? Scores mean something in my application and I want to use them in the Stats component.\n\nin the same sense that you can use {!frange} to filter on the scores of an arbitrary query, we should ultimately be able to compute stats on the scores of an arbitrary query \u2013 but done in a second pass, regardless of wether or not hte specified query is the same as the \"main\" query.   \n\nie, something like this should work....\n\n\n          q = foo bar^34 baz\n      stats = true\nstats.field = {!query key=score_stats v=$q}\n\n\n\n...just as well as something like this...\n\n\n          q = foo bar^3.4 +baz\n      stats = true\nstats.field = {!lucene key=some_other_query_score_stats}yak^1.2 +zazz\n\n\n\n...but the first won't be doing anything special to compute the stats \"on the fly\" as documents are collected. "
        },
        {
            "author": "Crawdaddy",
            "id": "comment-14135528",
            "date": "2014-09-16T14:34:43+0000",
            "content": "Nice work Hoss - thank you very much for the patch and the reminder about frange.  Will give this a try.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14139742",
            "date": "2014-09-18T23:44:25+0000",
            "content": "\nMuch progress \u2013 now actually supports stats over arbitrary functions.\n\n\n\tpromoted StatsField to a top level public class\n\t\n\t\tadded accessors for the SchemaField, ValueSource, and calcDistinct props\n\t\n\t\n\tchanged the API for StastValueFactory.createStatsValues to take in the StatsField directly\n\t\n\t\taffected callers: DocValuesStats, UnInvertedField.getStats, FieldFacetStats\n\t\tpropogate StatsField all the way down to the StatsValues constructors\n\t\n\t\n\tchanged AbstractStatsValues.accumulate(BytesRef) & setNextReader to conditionally check wether we have a FieldType or not\n\t\n\t\tthis seemed more straight forwrad and less complicated to understand then my initial idea of refactoring out new base classes due to some of the code duplication that would be needed in both the concrete leaf level classes (ie: NumericValueSourceStatsValues & NumericSchemaFieldStatsValues) which would need to have differnet parents (AbstractSchemaFieldStatsValues vs AbstractStatsValues) but would still collect the same types of stats in largely the same way.\n\t\n\t\n\tmore progress on tests\n\n\n\nStill some more nocommits, but their mostly just around some more robust test coverage and adding javadocs to some simple methods\n\nmight be ready to commit tomorow.\n\n\n\nCrawdaddy - would love to hear any feedback you have if you get a chance to try this out. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14141666",
            "date": "2014-09-20T01:45:26+0000",
            "content": "\n\nUpdated patch, all tests & javadocs written - no more nocommits.\n\nOther then tests, there's really only one code change between this patch and the last one \u2013 and that was fixing AbstractStatsValues.setNextReader to call ValueSource.newContext() instead of using Collections.emptyMap() \u2013 it's never really been a problem before, but it was problematic now if you tried to do stats over a QueryValueSource.\n\n\nI'm hoping to get this committed on monday unless anyone sees any problems. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14143512",
            "date": "2014-09-22T17:45:55+0000",
            "content": "Commit 1626856 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1626856 ]\n\nSOLR-6354: stats.field can now be used to generate stats over the numeric results of arbitrary functions "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14143660",
            "date": "2014-09-22T19:25:54+0000",
            "content": "Commit 1626875 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1626875 ]\n\nSOLR-6354: stats.field can now be used to generate stats over the numeric results of arbitrary functions (merge r1626856) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332592",
            "date": "2015-02-23T05:00:51+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}