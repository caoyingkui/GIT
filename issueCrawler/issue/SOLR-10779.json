{
    "id": "SOLR-10779",
    "title": "JavaBinCodec should use close consistently rather than having marshal() and close() call finish() (which closes the underlying stream)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Having the marshal() code call finish which in turn calls close() is trappy. The marshal code is not robust anyway since if there's an exception before the try loop, it will not close the resource.\n\nSub task of SOLR-10778",
    "attachments": {
        "SOLR-10779.patch": "https://issues.apache.org/jira/secure/attachment/12870627/SOLR-10779.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-31T19:28:07+0000",
            "content": "First cut at a patch so people can see what kinds of effort it might take. ",
            "author": "Erick Erickson",
            "id": "comment-16031802"
        },
        {
            "date": "2017-06-04T22:01:13+0000",
            "content": "Passes precommit without any warnings relating to JavaBinCodec.\n\nAll tests pass.\n\nI'll commit this soon unless there are objections ",
            "author": "Erick Erickson",
            "id": "comment-16036405"
        },
        {
            "date": "2017-06-04T23:02:24+0000",
            "content": "Hi Erick,\n\nI am trying to understand the design of JavaBinCodec here and have a few doubts:\n\nThe alreadyMarshalled/alreadyUnmarshalled variable:\nAfter a marshal operation we set alreadyMarshalled = true;\nDuring the initWrite method we assert this assert !alreadyMarshalled;\n\nDoes this mean that we can't call marshal twice with the same object? If so should we make marshal and unmarshal static ? Would that have back-compat issues ?\n\nSecondly do we need to closed variable? ",
            "author": "Varun Thacker",
            "id": "comment-16036418"
        },
        {
            "date": "2017-06-04T23:41:59+0000",
            "content": "Having the marshal() code call finish which in turn calls close() is trappy.\n\n\"trappy\" is often not a great descriptor (without further explanation \nfinish doesn't seem to call close either... it's the reverse.  close calls finish if it hasn't been called already.\nIt does seem like finish could just be removed, and that code moved to close()\n\nSecondly do we need to closed variable?\nDoesn't seem like it.  No harm in calling flush more than once in an exceptional case.\n\nDoes this mean that we can't call marshal twice with the same object?\nalreadyMarshalled seems to be implemented in SOLR-7516\nI think it's probably more related to the fact that JavaBinCodec object can't safely be reused to encode different messages (shared strings, etc). ",
            "author": "Yonik Seeley",
            "id": "comment-16036431"
        },
        {
            "date": "2017-06-19T01:56:35+0000",
            "content": "bq: \"trappy\" is often not a great descriptor\n\nWell, I knew what I meant ...\n\nSo the pattern of having \"marshal\" call \"finsh\" which closes the object is just waiting for abuse when the class implements Closeable. We should use close then. \n\nThere are lots of usages like:\nJavBinCodec jbc = new JavaBinCodec(...)\njbc.marshal().\n\nrelying on the marshal code to close the (through the \"finish\" method). There's no corresponding call in unmarshal however, leading that pattern to be repeated incorrectly as:\n\nJavBinCodec jbc = new JavaBinCodec(...)\njbc.unmarshal().\n\nwhich leaves the object open.\n\nVarun Thacker Heck, I didn't write it, just discovered it when looking at precommit lint warning  But the goal here is to get rid of precommit warnings, changing the class to make those two methods static seems too intrusive at this point. Both methods \"do stuff\" with the FastOutputStream member variable which is used in various other methods. Whether a thorough review of this entire class would lead to a better design I'll leave for a later battle.\n\nI'll leave the alreadyMarshalled/unMarshalled variables in as they are just asserts for debugging.\n\nI'll remove the close variable.\n\nI see no great reason to backport any of this precommit cleanup to the 6x code line. ",
            "author": "Erick Erickson",
            "id": "comment-16053397"
        },
        {
            "date": "2017-06-19T05:50:16+0000",
            "content": "Final patch with CHANGES.txt and incorporating comments. ",
            "author": "Erick Erickson",
            "id": "comment-16053495"
        },
        {
            "date": "2017-06-19T05:50:28+0000",
            "content": "Commit 64093d6df10a426551a0aeb4c157f9e05e5bf7bf in lucene-solr's branch refs/heads/master from Erick\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=64093d6 ]\n\nSOLR:10779: JavaBinCodec should use close consistently rather than having marshal() and close() call finish() (which closes the underlying stream)\n\ncommit b31178e0c33dbfe81fbc1aec705b3dae3cc895ad\nAuthor: Erick <erick@apache.org>\nDate:   Sun Jun 18 22:34:21 2017 -0700\n\n    SOLR-10779: JavaBinCodec should use close consistently rather than having marshal() and close() call finish() (which closes the underlying stream) ",
            "author": "ASF subversion and git services",
            "id": "comment-16053496"
        },
        {
            "date": "2017-06-19T05:51:25+0000",
            "content": "Not backporting to 6x ",
            "author": "Erick Erickson",
            "id": "comment-16053497"
        },
        {
            "date": "2017-06-19T16:25:37+0000",
            "content": "Nice cleanup; thanks. ",
            "author": "David Smiley",
            "id": "comment-16054279"
        }
    ]
}