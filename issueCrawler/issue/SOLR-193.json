{
    "id": "SOLR-193",
    "title": "General SolrDocument interface to manage field values.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In an effort to make SOLR-139 (the \"modify\" command) more manageable, i extracted out a large chunk.  This patch adds a general SolrDocument interface and includes a concrete implementation (SimpleSolrDoc)\n\nSOLR-139 needs some way to transport document values independent of the lucene Document.  This is required for the INCREMENT command and useful for modifying documents.  SolrDocument is also generally useful for SOLR-20\n\n\n\t- - - - -\n\n\n\nThe one (potentially) controversial part is that I added a function to FieldType:\n\n public Object toExternalValue(Fieldable f);\n\nThis asks each field type to convert its Fieldable into its real type, for example IntField.java has:\n\n public Integer toExternalValue(Fieldable f) \n{\n   return Integer.valueOf( toExternal(f) );\n }\n\nBy default, it returns a string value.  If this addition is too much, there are other (less clean) ways to handle the INCREMENT command.  My real motivation for this addition is that it makes it possible to implement an embeddable SOLR-20 client that does not need an HTTP connection. \n\n\n\t- - -\n\n\n\nThe SimpleSolrDoc implementation was written for SOLR-20.  It needs to play nice with EL, so it implements a few extra map function that may not seem necessary:\n\n ${doc.values['name']]} gets a collection\n ${doc.valueMap['name']]} gets a single value for the field\n\n\n\t- - -\n\n\n\nThe tests cover all \"toExternalValue\" changes in schema.*  \nSimpleSolrDoc and DocumentBuilder have 100% test coverage.",
    "attachments": {
        "SOLR-193-SimpleSolrDocument.patch": "https://issues.apache.org/jira/secure/attachment/12359563/SOLR-193-SimpleSolrDocument.patch",
        "SOLR-193-SolrDocument.patch": "https://issues.apache.org/jira/secure/attachment/12353714/SOLR-193-SolrDocument.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12482321",
            "date": "2007-03-20T07:20:42+0000",
            "content": "One other note: \n the \"id\" field in the test schema.xml was a multiValued field.  I changed it to single valued. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12482438",
            "date": "2007-03-20T16:43:03+0000",
            "content": "> toExternalValue(Fieldable f) \n\n\"external\" value sort of already means the human-readable serialized textual representation.\n\nWhat about something like toObject() which would return the appropriate Java object (such as Integer, Long, Date, etc)? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12482563",
            "date": "2007-03-20T22:17:29+0000",
            "content": "yes:\n Object  toObject( Fieldable );\nis better. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12489092",
            "date": "2007-04-16T12:11:58+0000",
            "content": "The latest patch has a typo: \n\n    public Document bulid....\n\nshould be \"build\".\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12489674",
            "date": "2007-04-18T09:57:12+0000",
            "content": "Damn dyslexia!  I can hardly see the difference even when its pointed out.\n\nthanks eric. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492610",
            "date": "2007-04-30T00:19:41+0000",
            "content": "applies cleanly with trunk "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12501088",
            "date": "2007-06-04T04:16:40+0000",
            "content": "applies with trunk, fixed some spelling... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12504052",
            "date": "2007-06-13T00:02:59+0000",
            "content": "i'm not sure that i understand a lot of what's going on here ... the basic API for SolrDocument makes sense to me, but i'm not sure that i understand some of the methods in SimpleSolrDoc ... what is setDistinctByDefault, or setDistinctOrderMatters ?\n\nAlso, what is the purpose/use of DocumentBuilder.build and DocumentBuilder.loadStoredFields ... neither seems to be used anywhere ... if they are not intended for use by existing clients of DocumentBuilder, but new client code not year written that won't care about any of the existing stateful methods in DocumentBuilder,  perhaps they (the two new methods) should live in a separate class?\n\nThe spirit of DocumentBuilder.build makes sense to me in the context of the issue title \u2013 but loadStoredFields on the other hand really doesn't make sense to me at all...\n  1) DocumentBuilder is only involved in in building Lucene Document objects to index ... so why have a method in it for converting from a Lucene Document object to something else?\n  2) I thought the SolrDocument API was for incoming documents ... why a method for adding values to it from an existing Lucene Document, or special logic for looking at stored fields?\n  3) if the goal is for SolrDocument to be general enough to handle pre-indexing or post-searching Document representation, then we should not attempt to model boosts in it ... those should only live in a subclass used for indexing purposes (Lucene made this mistake early on, and it's caused countless amounts of confusion to this date) ... the loadStoredFields seems to suffer from this confusion by trying to access the field boosts of a Lucene Document that (appears to be) the result of a search \u2014 they don't exist in those instances of Lucene Documents.\n\nIf these methods are not intended for use by existing clients of DocumentBuilder, but new client code not year written that doesn't care about any of the existing stateful methods in DocumentBuilder,  perhaps they (the two new methods) should live in a separate class?)\n\nHmmm... rereading the issue summary and the comments about playing nice with EL i see the goal is for a generic representation both in a java client sending docs to and reading docs back from Solr, as well as internally within Solr (or embedded Solr contexts) ... I think it's a mistake to try and have one single Interface for all three.  At the very least there should be a seperate API for the indexing side and the query side (because of the boost issue) which can be subclass/superclass relationships.\n\nI ranted about this in a related Lucene Jira issue (note also the email discussion linked to from one of my comments in that issue) ...\n\nhttps://issues.apache.org/jira/browse/LUCENE-778 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12504095",
            "date": "2007-06-13T02:16:21+0000",
            "content": "\nFor background.  This class has functionality used for other issues including SOLR-104, SOLR-139.  For a while i tried keeping the functionality in different patches, but it became too much of a nightmare to maintain.  Perhaps it would be better to leave out the edge cases and just focus on the SolrDocument interface now...\n\n\n> what is setDistinctByDefault, or setDistinctOrderMatters ?\n> \n\nThese options let you say if the field values should be backed by a Map<String> or a List<String>, the DistinctOrderMatters says if it should be Map<String> or LinkedHashMap<String>\n\nThese were useful for SOLR-104 when you SQL join a table and may get duplicate rows, but only want the distinct values to keep fields.\n\nNow that you point it out, (and there is a good chance it will be in trunk soon) It would make more sense to implement these features as different subclasses of SimpleSolrDocument.\n\n\n> Also, what is the purpose/use of DocumentBuilder.build and DocumentBuilder.loadStoredFields \n\nThis is for SOLR-139.  to 'modify' a document, you load the existing Document - change it - then store it back.\n\nThese two functions can happily live in a new class, and could be attached to SOLR-139.\n\n\n>   2) I thought the SolrDocument API was for incoming documents ... \n\nI hope it is also useful for modifying existing Documents and transforming incoming/outgoing documents (but I'll raise that issue later \n\n\n> I think it's a mistake to try and have one single Interface for all three. ... At the very least there should be a seperate API for the indexing side and the query side (because of the boost issue) which can be  subclass/superclass relationships.\n> \n\nThis sounds fine.  We should defiantly solve any know problems with the Lucene document interface.  Just using an interface (rather then a concrete class) will be a huge help.\n\nIs the only difference between the input Document and output Document that it has boosts?\n\nShould we have:\n SolrDocument\n   + BoostedSolrDocument\n\n or\n\n SolrDocument\n   + IndexSolrDocument\n\nAny thoughts on the common use case where I want to pull a document out of the index (no boosts) change it, then put it back?  Do i need to make a new class and copy all the fields?  Should SOLR-20 be able to index a SolrDocument (no boosts) as well as a BoostedSolrDocument?  I think so...\n\n\nThanks for looking at this!   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12504100",
            "date": "2007-06-13T02:36:38+0000",
            "content": "> This sounds fine. We should defiantly solve any know problems with the Lucene document interface.\n>  Just using an interface (rather then a concrete class) will be a huge help. \n\nI know this runs contrary to common java OO wisdom, but interfaces can really suck.\nThey don't hurt the consumer of a class, but cause major headaches for the provider, trying to evolve an interface and still provide backward compatibility (it's pretty much impossible).\n\nIn Lucene, where we have had a class (like Analyzer), it was trivial adding new functionality like getPositionIncrement().  If it had been an interface, it would have been impossible without breaking all the custom analyzers out there.  Where we have had interfaces, and added a new method, we simply broke some peoples code.\n\nSo if it's something that a customer might possibly subclass, a class used as an interface is a much better option.\nIf it's internal, or package projected, or something where you really need multiple inheritance, then an interface is fine. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12504107",
            "date": "2007-06-13T02:56:15+0000",
            "content": "Here is a much much smaller patch that only adds the SolrDocument class and BoostableSolrDocument subclass.\n\nWe can work through the other bits later, but this would be sufficient for SOLR-20\n\nIt is a quick eclipes refactoring, so the comments may not make sense.  I'll check that over in better detail after you all get a chance to look at it... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12504132",
            "date": "2007-06-13T06:15:02+0000",
            "content": "these comments are very happhazard, and in the best order i can think of (not hte order i wrote them)\n\n> Perhaps it would be better to leave out the edge cases and just focus on the SolrDocument \n\n...i don't mind big patches that have a lot of things ... it's just weird when there is a big patch with a lot of stuff and it's not clear what it's for  ... i was mainly looking for someplace where an UpdateHandler was making a SolrDocument and then calling build on it.\n\n> Is the only difference between the input Document and output Document that it has boosts?\n\nthere is some more complexity in Lucene docs because of things like the Fieldable options but i don't think those really impact a SolrDocument API since that info is abstracted into the schema and can't be set on a per document basis.\n\n> Should we have:\n>  SolrDocument\n>   + BoostedSolrDocument\n\nBoostedSolrDocument seems to specific to the methods added, and not to the purpose of the class ... i would call it a \"SolrInputDocument\" (IndexSolrDocument is too vague since the term \"index\" is used so much in the code base)\n\nThe basic structure in the new patch looks fine by the way, no real concerns from me once the comments are cleaned up (one question: should SolrDocument implement Map<String,Collection<Object>> ??)\n\n> This is for SOLR-139. to 'modify' a document, you load the existing Document - change it - \n> then store it back.\n> \n> These two functions can happily live in a new class, and could be attached to SOLR-139.\n\n...oh, right, i forgot about the \"update in place\" patch .... yeah i don't think those methods should live in DocumentBuilder (am i alone in thinking DocumentBuilder should probably be deprecated completely once this stuff is commited? ... or ... hmmm ... it could probably be subclassed by one that supports adding a whole SolrInputDocument at once, or one that can start with an older Document and update it with a new SolrInputDocument ... but we can worry about that later)\n\n\"updating\" is a direct example of the type of thing i refered to in LUCENE-778 about why a single Lucene Document class is bad.  to support updating you should have  an explicitly means of composing the output class into the input class ... but in that case you're dealing directly with Lucene Documents \u2013 i can understand why we would need to modify a Lucene document into a SolrInputDocument ... but i don't think we really need to worry about the SolrDocument => SolrInputDocument case right?\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12504154",
            "date": "2007-06-13T08:01:27+0000",
            "content": "Thanks for your feedback Hoss.\n\nI think this one is good to go.   "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12504342",
            "date": "2007-06-13T17:28:28+0000",
            "content": "> The basic structure in the new patch looks fine by the way, no real concerns from me once the comments are cleaned up (one question: should SolrDocument implement Map<String,Collection<Object>> ??) \n\nIf the class implements Map, JSTL treats it differently \u2013 for example, ${doc.fieldNames}  does not call:\n Collection<String> getFieldNames();\nit calls: Map.get( \"fieldNames\" );\n\nthis is really annoying!  Essentially any real function you add is hidden (unless i'm incompetent in JSTL land...)\n\nThis is why I had:\n\n+  ///////////////////////////////////////////////////////////////////\n+  // Utility functions to help JSTL (map interface to single field\n+  ///////////////////////////////////////////////////////////////////\n+\n+  public Map<String,Collection<Object>> getValuesMap()\n+  \n{\n+    return _fields;\n+  }\n+  \n+  public Map<String,Object> getValueMap() {\n+    return new Map<String,Object>() {\n+      // The only reason we are implementing map!\n+      public Object get(Object key) \n{ \n+        return getFieldValue( (String)key); \n+      }\n+\n+      // Easily Supported methods\n+      public boolean containsKey(Object key) \n{ return _fields.containsKey( key ); }\n+      public Set<String>  keySet()           \n{ return _fields.keySet();  }\n+      public int          size()             \n{ return _fields.size();    }\n+      public boolean      isEmpty()          \n{ return _fields.isEmpty(); }\n+\n+      // Unsupported operations.  These are not necessary for JSTL\n+      public void clear() \n{ throw new UnsupportedOperationException(); }\n+      public boolean containsValue(Object value) \n{throw new UnsupportedOperationException();}\n+      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n+      public Object put(String key, Object value) \n{throw new UnsupportedOperationException();}\n+      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n+      public Object remove(Object key) \n{throw new UnsupportedOperationException();}\n+      public Collection<Object> values() {throw new UnsupportedOperationException();}\n+    };\n+  }\n\n\nI would still like to include these in the API.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12504462",
            "date": "2007-06-13T22:32:04+0000",
            "content": "moved DocumentBuilder issues to SOLR-262 "
        }
    ]
}