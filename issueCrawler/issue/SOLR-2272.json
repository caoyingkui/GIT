{
    "id": "SOLR-2272",
    "title": "Join",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Limited join functionality for Solr, mapping one set of IDs matching a query to another set of IDs, based on the indexed tokens of the fields.\nExample:\nfq=\n{!join  from=parent_ptr to:parent_id}\nchild_doc:query",
    "attachments": {
        "SOLR-2272.patch": "https://issues.apache.org/jira/secure/attachment/12465770/SOLR-2272.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12969128",
            "date": "2010-12-08T01:35:01+0000",
            "content": "Here's a patch with tests that implements the first algorithm for joining (just as in faceting, there will be multiple going forward).\n\nThis implements a many-to-many join - documents are mapped based on matching terms in index fields.  It's all on the fly, so nothing to declare up front.  You can look at the tests for examples on how to use this.\n\nAnother example: to find the parents of all blue-eyed children, simply do\n  fq=\n{!join from=parent to=name}\neyes:blue\nOr,  you can join in the reverse direction to find the children of all blue eyed parents\n  fq=\n{!join from=name to=parent}\neyes:blue\nOr you can even do a self-join to find everyone with the same eye color as johnny, without knowing what that is\n  fq=\n{!join from=eyes to=eyes}\nname:johnny\n\nThis current algorithm is like facet.method=enum - it's more efficient when there are fewer terms in the fields being joined. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12969195",
            "date": "2010-12-08T05:53:00+0000",
            "content": "Yonik, can we expose to lucene users too?\n\nThere was already some discussion on parent-child relationships in lucene, and I don't see any reason stuff like this should be added to Solr-only. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12969323",
            "date": "2010-12-08T14:21:31+0000",
            "content": "This was done for a customer, and it's being contributed back now.\n\nThere was already some discussion on parent-child relationships in lucene\n\nYeah, I think that work should continue!  It would be great to get some index-level support for relationships. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12969334",
            "date": "2010-12-08T14:51:10+0000",
            "content": "This was done for a customer, and it's being contributed back now.\n\nBut we can contribute this to the right place. Things like queries and queryparsers don't need to be added to Solr-only.\nIts easier to do this up-front, than after the fact. I felt that it was pulling teeth with the analyzers, etc. "
        },
        {
            "author": "Tanguy Moal",
            "id": "comment-12970906",
            "date": "2010-12-13T17:26:47+0000",
            "content": "Yonik, that feature is pretty interesting, but sounds more like a mapping or replacement than a join to me...\n\nI have a use case were my documents have some fields getting updated frequently, and others don't. By the way those fields which aren't updated frequently, occur to be common from times to times with other documents. When I saw that issue, I decided to give it a try. I decided to split my old documents in new documents, using two documents to represent one old document, plus a common \"pivot\" field.\n\nAt first a simple substitution occured, because of children not having the same \"from\" field value, I worked around that easily. I now have twice more documents, as expected. Unfortunatelly, I thought I'd be able to perform search restrictions on the union produced by the join, but I wasn't able to do so... Did I miss something somewhere ?\n\nLittle example :\n\nfields : \n\n\ttitle : text\n\tprice : sint\n\tid : string\n\tpivot : string\n\n\n\nI push : doc 1 : \"id\", \"1\", \"price\", \"150\", \"pivot\", \"pivot1\" and  doc 2 : \"id\", \"2\",  \"title\", \"great title\", \"pivot\", \"pivot1\"\n\nI search  :\n\n\tq=\n{!join from=pivot to=pivot}title:great => got 2 docs, perfect\n* q={!join from=pivot to=pivot}\nprice:[* TO 200] => got 2 docs, so far so good\n\tq=\n{!join from=pivot to=pivot}\nprice:[* TO 200]+AND+title:great => no result found. Of course that makes sense, no such a document match this conjunction, but I thought that by \"joining\" I'd be able to do so...\n\n\n\nWhat's your point of view ?\n\nThanks in advance "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-12971059",
            "date": "2010-12-13T22:38:45+0000",
            "content": "\nBut we can contribute this to the right place. Things like queries and queryparsers don't need to be added to Solr-only.\nIts easier to do this up-front, than after the fact. I felt that it was pulling teeth with the analyzers, etc.\n\nI 100% agree with robert, I think we should not make the same mistakes we did with faceting (at that time solr & lucene where two projects I know - so don't get me wrong!!) stuff like that should be available for all users solr is just the sugar on top and there are many usecases where folks use something in between. \n\nsimon "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12971070",
            "date": "2010-12-13T23:09:56+0000",
            "content": "Yonik, that feature is pretty interesting, but sounds more like a mapping or replacement than a join to me... \n\nYeah, I agree.. it's closer to a semi-join http://en.wikipedia.org/wiki/Hash_join#Hash_semi-join\nI experimented with calling it pivot or map, but I think this type of semantic is realistically the closest we'll get to a join.\n\nUnfortunatelly, I thought I'd be able to perform search restrictions on the union produced by the join, but I wasn't able to do so\n\nThis is mapping from one id space to another, so you need to filter in the appropriate space.\nYou're doing a self-join here, so it's a more complex example to figure out.\nWhat about something like:\nq=\n{!join from=pivot to=pivot}\nprice:[* TO 200]&fq=title:great\n? "
        },
        {
            "author": "Tanguy Moal",
            "id": "comment-12971194",
            "date": "2010-12-14T08:23:24+0000",
            "content": "Thanks Yonik, indeed I wasn't aware of that space for filtering (or scope or whatever  )\n\nThat did the trick, thank you very much. I'll continue my experiment, sounds very good! "
        },
        {
            "author": "Bojan Smid",
            "id": "comment-12994762",
            "date": "2011-02-15T11:53:04+0000",
            "content": "Very nice patch Yonik. However, it doesn't apply on current trunk any more. Does anyone, by any chance, have a fresh version of this patch? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12994978",
            "date": "2011-02-15T20:15:50+0000",
            "content": "However, it doesn't apply on current trunk any more.\n\nHere's a refresh. "
        },
        {
            "author": "Bojan Smid",
            "id": "comment-12994984",
            "date": "2011-02-15T20:28:02+0000",
            "content": "Great, thx a lot Yonik . "
        },
        {
            "author": "Briggs Thompson",
            "id": "comment-12999014",
            "date": "2011-02-24T20:00:12+0000",
            "content": "From the examples provided it doesn't look like this is possible but I just want to confirm with you guys. It looks like all of the examples are joins on fields within the same schema, but I am interested in joining on fields of a different schema (multiple core join).\n\nI haven't played around with the join yet, but would the following be possible?\n\nCore1\ndocId: int\nbody : text\n\n\nCore2\nid: int\ndocId : int\n\n\nq=\n{!join from=Core1.docId to=Core2.docId}\nCore1.body:\"super\" AND Core2.ID:[1 TO 10]\n\nWe have a similar use case to Tanguy Moal's example with one document type needs updating more often than the other. I know we could store the Core2 ids in an array of integers in Core1, but every time that ID mappings change we would have to re-index (with a potential of constant re-indexing of nearly the same data).\n\nThanks for your help,\nBriggs "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12999068",
            "date": "2011-02-24T21:38:46+0000",
            "content": "I am interested in joining on fields of a different schema (multiple core join).\n\nNo, it's not currently possible, but it's an interesting idea, and seems doable provided the cores are in the same solr JVM.\n\nThe workaround today would be to just add both document types to the same core (merge the schemas so one schema can support both document types). "
        },
        {
            "author": "Jonathan Rochkind",
            "id": "comment-12999072",
            "date": "2011-02-24T21:52:38+0000",
            "content": "Even if the core's aren't in the same JVM, one could imagine a weird \ncross-host join where Solr actually connected to the external Solr, \nissued a query (perhaps using Solr binary format for efficiency, SolrJ \nstyle), got the list of values returned for a particular stored field, \nand used that as a filter on the current query.\n\nThis is in fact similar to something that's come up (not sure if it's in \na different ticket or just on listserv) about doing a similar thing with \nan external SQL query, where the result of some single-column SQL \nagainst an external database is used as a filter in the current query.  \nReally the exact same problem, just a question of whether the external \nquery is to SQL via JDBC or what have you, or instead to another core \nvia SolrJ style connection.  Either way do an external query, end up \nwith a list of values, and want to use that as efficiently as possible \n(ie, NOT using lucene 'or' with hundreds or thousands of clauses!) as a \nfilter on a particular solr indexed field for the current query.\n\nBut clearly that enhancement would be a different ticket/patch \u2013 if the \n'join' patch as currently spec'd were to make it into Solr as is (same \ncore join only) I'd be overjoyed, it would be awfully useful just as it \nis, so do not suggest that it's scope be increased thus raising the bar \nfor the feature as is.\n "
        },
        {
            "author": "Briggs Thompson",
            "id": "comment-12999467",
            "date": "2011-02-25T18:46:07+0000",
            "content": "\n\n\"The workaround today would be to just add both document types to the same core (merge the schemas so one schema can support both document types).\"\n\nI don't think that would really work if it is a one to many relationship but thank you for your response! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12999485",
            "date": "2011-02-25T19:21:50+0000",
            "content": "I don't think that would really work if it is a one to many relationship but thank you for your response!\n\nI don't see why not... the disadvantages of having everything in a single index are:\n\n\tyou can't use the same field name for different things, they must be the same type\n\tefficiency and sparse fields - sorting on a field takes some memory for every document in the index, regardless of how many documents have that field\n\n\n\nPerhaps you could give a small example of how something could work in 2 indexes but not 1? "
        },
        {
            "author": "Briggs Thompson",
            "id": "comment-12999524",
            "date": "2011-02-25T20:08:24+0000",
            "content": "I was thinking more of the case where two indexes have completely different schema's; each with multiple fields that have a one to many relationship. For example, the below schema1 maybe have 100 schema2 documents associated to it. \n\nSchema1:\ndocumentId : int (unique key)\nfield1\nfield2\nfield3 ...\n\nSchema2\nproductId : int  (unique key)\ndocumentId : int\nfield1 \nfield2\nfield3 ...\n\nI guess what would be necessary to do this within a single index schema is implement a custom class (solr.product), then have a multivalued field of a type with your custom class. Are there examples where something similar is implemented? I would also have to get rid of the unique key (or create a copy field or something along those lines) \n\nYou mentioned sorting checked every document regardless if the document contains a value for the field. Is the same true for querying? I am worried that even if the above would work the performance would be impacted substantially considering you are turning an index with X documents to an index with 2X documents, plus the join (don't know what kind of performance impact that has).\n\nThanks for your help Yonik!\nBriggs "
        },
        {
            "author": "Briggs Thompson",
            "id": "comment-12999526",
            "date": "2011-02-25T20:09:27+0000",
            "content": "As I write this I found https://issues.apache.org/jira/browse/SOLR-1131 so I guess you can have a field type that has multiple nested field types! That is pretty cool - I will have to play around with that.  "
        },
        {
            "author": "Gerd Bremer",
            "id": "comment-13022805",
            "date": "2011-04-21T16:05:13+0000",
            "content": "Is it possible to sort the join query result?\n\n// first class of documents with refid and pagecount fields; \n// a refid field maps to an id field in the second class of documents (1->100, 2->101)\ndoc1:\n\nid:1\nrefid:100\npagecount:35\n\ndoc2:\n\nid:2\nrefid:101\npagecount:45\n\n// second class of documents with text field\ndoc100:\n------\nid:100\ntext:hello world\n\ndoc101:\n------\nid:101\ntext: goodbye\n\nNow I would like to select the documents from the first class with field pagecount sorted descandant, that is \n{doc2, doc1}\n and return the mapped documents with text in the same order that is \n{doc101,doc100}\n. Is this possible with join? I'm looking for an alternative to partial update and this join looks promising if I can sort and get the mapped result in the same order. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13024918",
            "date": "2011-04-25T19:27:08+0000",
            "content": "Here's a new patch updated for trunk, that also adds the cross-core join.\n\nExample:\n{!join from=fromField to=toField fromIndex=fromCoreName}\nfromQuery\n\nI think this is ready to commit! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13024979",
            "date": "2011-04-25T21:57:44+0000",
            "content": "Committed.  I'll leave the issue open until some docs get added to the wiki. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025198",
            "date": "2011-04-26T12:49:26+0000",
            "content": "So you just totally ignore 2 objections from other committers and commit anyway?\n\nPlease revert. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025212",
            "date": "2011-04-26T13:16:49+0000",
            "content": "Great - that's the path you want to take on this?\n\nWhen Lucene/Solr become about blocking legitimate features rather than submitting patches along the direction you want, I'm out of here. \n\nFinal location of code is not a good or valid reason to block commits IMO. That can be improved over time, when people back up there fricken wants with some code rather than road blocks. This is a political revert request - though I'm sure you will now try and twist it to some technical BS.\n\nAwesome - just awesome.\n\n "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13025230",
            "date": "2011-04-26T14:03:31+0000",
            "content": "\nFinal location of code is not a good or valid reason to block commits IMO. That can be improved over time, when people back up there fricken wants with some code rather than road blocks. This is a political revert request - though I'm sure you will now try and twist it to some technical BS.\n\nare you really thinking this is gonna happen...\n\nPlease revert.\nI agree, this is not how it works here IMO so it has nothing todo with politics... But honestly I am so sick of this discussion.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025238",
            "date": "2011-04-26T14:13:18+0000",
            "content": "are you really thinking this is gonna happen...\n\noh, yes, I do.\n\n "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13025242",
            "date": "2011-04-26T14:19:44+0000",
            "content": "oh, yes, I do.\ngo ahead I wanna see it  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025248",
            "date": "2011-04-26T14:29:02+0000",
            "content": "I suspected, and now think more strongly, that there is a language confusion issue between us and the last few comments. That is, I don't think we both think \"this\" and \"it\" are the same thing in our respective responses...\n\nI'm referring to the 'twist'. It sounds like you are talking about a fist fight  ?\n\nI suppose this comes down to the fact that:\nare you really thinking this is gonna happen...\nis somewhat ambiguous. But seems as good a guess as any that you are talking about the 'twist' and not something that you want to see me do.\n\nNow that you have thrown down the gauntlet, I do want to rise to the challenge, but I don't know what it is! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025254",
            "date": "2011-04-26T14:35:29+0000",
            "content": "I've reverted until there is consensus on this issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025259",
            "date": "2011-04-26T14:48:56+0000",
            "content": "Hey Robert,\n\nA revert is historically considered a big deal. You should really officially -1 the commit and give your valid technical reason for doing so before being too over zealous about a quick revert.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025278",
            "date": "2011-04-26T15:26:46+0000",
            "content": "Hi Mark, my objections (Simon also voiced concerns) are raised earlier on this issue, if you scroll up. My reasons are technical, in that code is not committed to the right place.\n\nAll we need to do here is discuss a solution that achieves consensus. I'll be more than happy to engage in more details, but at the moment I am trying to calm my anger from being accused of a 'political revert'.\n\nIf you really think I have some ulterior/political motive, then voice it. This is a really big deal. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025280",
            "date": "2011-04-26T15:30:32+0000",
            "content": "You misunderstand. Because a revert is a big deal, what I'm saying is that you are supposed to be formal about it.\n\nFor example:\n\n-1. Here is my technical reason.\n\nJust pointing to two non concrete comments about whether this should be a Lucene feature way up in the issue is not sufficient. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025287",
            "date": "2011-04-26T15:40:40+0000",
            "content": "My reasons are technical, in that code is not committed to the right place.\n\nI think Apache thinking tends to lean against this as a technical veto - that's what I've gathered based on fallout discussion over the lucene-solr merge threads. But we can argue about that once you actually make a proper veto. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025310",
            "date": "2011-04-26T16:31:56+0000",
            "content": "ok, here is my formal veto:\n\n-1: The way in which we integrate features like this is important, because it defines the architecture of Lucene/Solr. On this issue two people voiced concerns that this feature is not being added at the correct \"level\", that it is a low-level search feature that belongs in the search engine library (Lucene). Lucene users have previously voiced desires for features like this, you can see some previous mailing list discussion by searching mail archives (http://www.lucidimagination.com/search/?q=join) and looking at the Lucene facet.\n\nIf you think my veto is not valid, please be aware I'm not going to get into a shouting match with you about it. Instead, I would encourage you to raise your objection with the Lucene PMC and call a vote. At least this way we have the discussion. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025333",
            "date": "2011-04-26T17:18:14+0000",
            "content": "And so I will argue that your veto is invalid. I don't believe you have voiced a valid technical concern. You said that a couple committers think this could instead be integrated at the lucene level, and that some lucene users have voiced an interest in join. IMO, neither of this are either good reasons to revert this feature, nor valid technical reasons for a code veto. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025340",
            "date": "2011-04-26T17:29:50+0000",
            "content": "Instead, I would encourage you to raise your objection with the Lucene PMC and call a vote. At least this way we have the discussion.\n\nThat's okay - I'll just voice my opinion. Your interactions with other committers and conduct over time speaks for itself - I'm not going to code battle you - I'm just going to express my opinion. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13025342",
            "date": "2011-04-26T17:34:17+0000",
            "content": "Now that you have thrown down the gauntlet, I do want to rise to the challenge, but I don't know what it is!\n\n+1 this is hilarious   Nomatter what the gauntlet is, let's all rise to the occassion!\n\nFinal location of code is not a good or valid reason to block commits IMO. That can be improved over time, when people back up there fricken wants with some code rather than road blocks. This is a political revert request - though I'm sure you will now try and twist it to some technical BS.\n\nI generally agree with this, ie, for healthy Apache projects, where\ncode can be freely refactored over time, it doesn't matter much where\nthe initial commit goes.  Progress not perfection...\n\nBut it has become evident, recently, that efforts to refactor\nLucene/Solr sources to their natural places are in fact strongly\nresisted (eg, Yonik has now vetoed LUCENE-2995, which looked like a\ngreat example of such a refactoring; LUCENE-2883 also met with\nresistance).\n\nIe it now seems like we should try hard(er) to put new code in the\nright place, up front, because we are in fact not really free to later\nrefactor it.\n\nSo... here's an idea: how about if someone volunteered to take Yonik's\nlatest patch here and make it a shared module, before committing?\nYonik (and everyone else), would you be OK with that?  (I'm not sure\nanyone would volunteer now, but, it seems like this would be a way out\nof this \"impasse\"...). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13025346",
            "date": "2011-04-26T18:02:45+0000",
            "content": "Sorry, I can't entertain this nonsense.\nLucene and Solr merged as equal projects.  The domain of neither project shrunk.  There is no \"right place\" for this code.  People could have done the work with their lucene hat on or their solr hat on.\n\nThe history behind this particular patch is that it was for a customer using Solr - and I scoped the time based on that.\n\nIt's simply preposterous that an improvement to Solr be blocked because some might want a lucene-usable module too.  It's just as preposterous to block a lucene improvement because solr can't use it yet.  If someone wants to do something for lucene users, fine.  But that currently has no bearing on this patch. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13025357",
            "date": "2011-04-26T18:16:15+0000",
            "content": "Mike M. wrote:\nfor healthy Apache projects, where code can be freely refactored over time, it doesn't matter much where the initial commit goes. Progress not perfection...\n\n+1\n\nBut it has become evident, recently, that efforts to refactor Lucene/Solr sources to their natural places are in fact strongly resisted\n\nI think Simon nailed it on the head: Lucene & Solr a one-way street?.  I find it difficult to defend this relationship, which was supposed to be symbiotic (benefitting both Solr and Lucene), but which increasingly looks parasitic (i.e. most benefits accrue to Solr, and most costs are borne by Lucene).\n\nI agree with Mark: Robert's veto is political, in that it is based solely on a question of policy.  I believe that Robert means to directly force re-examination of the Solr/Lucene merger, and vetoing this issue is a means to that end.\n\nYonik wrote: \nIt's simply preposterous that an improvement to Solr be blocked because some might want a lucene-usable module too.\n\n+1\n\nBut if this is true, then it must also be true that refactoring is possible, and not just in theory. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13025367",
            "date": "2011-04-26T18:34:31+0000",
            "content": "But if this is true, then it must also be true that refactoring is possible, and not just in theory.\n\nExactly.\n\nSo, Yonik: will you allow this Join code to be refactored to a shared Lucene/Solr module in the future? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13025379",
            "date": "2011-04-26T18:57:19+0000",
            "content": "Robert reverted my last commit again.\nThis is intolerable.\n\nI've called a vote to spin of Solr to it's own TLP on general@l.a.o "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025413",
            "date": "2011-04-26T20:28:44+0000",
            "content": "You guys need to fix yourself. And I'm not sure the Board is going to simply create a new TLP because you guys don't know how to operate correctly. That's just pushing around the deck chairs. The same fundamental \"doesn't play with others\" will not have been fixed. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025417",
            "date": "2011-04-26T20:33:38+0000",
            "content": "You guys need to fix yourself.\n\nThats some useful advice right there... "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025420",
            "date": "2011-04-26T20:39:22+0000",
            "content": "(stupid thing ended that comment early)\n\nFirst: you should not be allowed to veto a feature addition. There is no problem with that. If you don't like the location, then apply further patches t move it. But you don't stop it a prior I.\n\nSecond: you never, NEVER revert somebody else's commit. You only do that if they drop off the face of the earth. A veto on a commit is the beginning of a discussion, and a bkocker for release. You have until then to reach consensus. The committee may realize his commit was bad for the side, and revert it himself. Or the group will find a solution, and the right (additional) patches will be applied. But you NEVER take matters into your own hands, unilaterally. If somebody repeated that action, I would ask the PMC to remove their commit rights, and the PMC damned well better recognize the anto-social and anti-project view of that committee and remove the rights. As a Director, I would absolutely support such action.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025425",
            "date": "2011-04-26T20:50:54+0000",
            "content": "Ah - i jumped the gun on you. That is useful advice (call me biased if you'd like).\n\nHonestly, there is no way around this issue - of course we must discuss and come to some solution regarding Lucene/Solr at this point. This whole thing is very distressing to me. I think we all know it just sucks. In the past, I have enjoyed working with everyone here. My personal beef in this issue is not with that though - I simply am very offended by heavy handed reverts and such. I feel the same way about JIRA. Words before action in my book - many words - hard as that can be for all of us sometimes. This has been the history of Lucene and the thing about the project that I admired most - heavy hands where checked at the door. I'm no angel, and I'm not perfect about this myself. But I still try and police it because I think its important. "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025430",
            "date": "2011-04-26T21:03:56+0000",
            "content": "Personally, without my Director's hat on, I would recommend the project consider moving to Commit-Then-Review. Right now, you spend all this effort in posting patches to JIRA, discussing it ad nauseum, and the project just sits there. If... instead... you trust the committers to move the project forward, then let them commit. WHEN a problem comes up then, you discuss it. RTC implicitly says \"we don't trust you\", and I don't think it is a good model for project development. I've seen lots of people say \"but the code is really tricky, so we need to review changes to ensure stability\", but I think that is just a sham for people wanting control. You can always review what has been committed and apply further patches to fix stability \u2013 it doesn't have to come before the original commit with an updated patch. Release branches are typically in RTC, and the stability over an open trunk can be regained before release time. (of course, you would also hope test and regression suites will everything stable during the open trunk) "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-13025432",
            "date": "2011-04-26T21:08:22+0000",
            "content": "Big +1 on CTR - if you're a commiter you've earned the trust. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025434",
            "date": "2011-04-26T21:10:25+0000",
            "content": "Greg -\n\nActually, we are officially Commit-Then-Review FWIW. However, Lucene has a history of being non agressive here - and giving time for others to review patches. I think in general we have a great system for that. It's the more heated non technical issues that would likely boil up regardless of CTR or RTC that cause issue. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-13025435",
            "date": "2011-04-26T21:15:48+0000",
            "content": "\"Offically\" Lucene/Solr may be CTR but not in practice. One need only look at field collapsing as evidence of this. Others have also noticed this over the years. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025440",
            "date": "2011-04-26T21:21:27+0000",
            "content": "I think you are confused - it's CTR for committers not contributors. You must have a committer willing to commit the code for you. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-13025442",
            "date": "2011-04-26T21:24:18+0000",
            "content": "Actually no it's the opposite. Your community includes contributors not simply those with the commit bit. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025448",
            "date": "2011-04-26T21:31:15+0000",
            "content": "lets agree to be confused you mean? "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025458",
            "date": "2011-04-26T21:48:20+0000",
            "content": "How about getting back to the issue at hand: improper vetoes (the implied ones here, and the Bad one that was attempted in LUCENE-2995), and unilateral reverts. The PMC needs to take action to fix the way this community operates.\n\nI will also state this for the record, since I've heard it from numerous people: the PMC should also ensure that this project is not controlled by any special business interests. If this friction is because of undue commercial influence, then the Board is going to be very reticent to take actions such as splitting it up. Board actions for bad PMC operation is, shall we say, a LOT more drastic. "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025462",
            "date": "2011-04-26T21:58:41+0000",
            "content": "Rather than discuss this in JIRA, I've started a thread to the PMC and the Board. "
        },
        {
            "author": "Jonathan Rochkind",
            "id": "comment-13025479",
            "date": "2011-04-26T22:20:03+0000",
            "content": "This is a feature that would be very useful to me, thus I've had a watch \non the ticket.\n\nI am not a solr committer and have never even contributed a patch, just \na user. But this is a feature I've been wanting for a while, and would \nbe excited to see it in Solr.  On the one hand I see the argument that \nit would ideally go at the lucene layer; on the other hand, if someone \nhas working, tested, well-written code that is is ready at the Solr \nlayer, as a user, I'd really like to see it go in there, to be \nrefactored to lucene at a later date when/if someone else has \ntime/interest \u2013 rather than delaying working code indefinitely for \nhypothetical future (potentially time-consuming) refactoring at a \ndifferent layer by yet-to-be-volunteered labor.\n\nI put this in only to make clear that there are users in the general \npopulation who would like to see this feature get into Solr sooner \nrather than later, delaying it does matter to 'ordinary' users. (I am \nneither a Solr contractor nor a customer of a Solr contracter, I don't \nhave any such 'business interests', I am just an in-house developer who \nwrites (open source) software on top of Solr. Not that there's anything \nwrong with being a Solr contractor, it's a fine way to fund open source \ndevelopment and I think it's odd to imply there's something wrong with \nit; I'm just saying I'm not one.)\n\nHopefully you committers can work it out amongst yourself in a way that \nbalances the codebase's architectural health with the need to get \nworking code out there. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025486",
            "date": "2011-04-26T22:30:17+0000",
            "content": "Thanks Jonathan - very useful feedback. Appreciate your well thought out response and Solr user perspective on this particular issue. Sorry we have to air our dirty laundry all over the place. Transparency is what it is  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025544",
            "date": "2011-04-27T01:33:11+0000",
            "content": "\nI'd really like to see it go in there, to be \nrefactored to lucene at a later date when/if someone else has \ntime/interest\n\nJonathan: as would I, but this is currently impossible, as refactoring from solr to lucene is \"not allowed\".\n\nI'm sorry that you aren't able to view these discussions (nearly a month ago), because the people dictating these things refused to send them to a public mailing list, but the fact is, currently once the code goes in it cannot be moved.\n\nAll this being said, I have no choice but to retract my objection (as Greg pointed out, its completely incorrect). But I really do not like the fact that major decisions for this project are being dictated on private emails like this and nobody is doing anything about it. "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025552",
            "date": "2011-04-27T01:47:06+0000",
            "content": "The PMC should have stood up at that time and shut down those private conversations. That is a failing of the PMC.\n\nRefactorings should be quite allowed, as all the code is under the purview of the PMC. It isn't \"Lucene\" and \"Solr\" ... it is lucene.apache.org. The PMC is responsible for the whole thing. If somebody takes issue with a refactoring, then they better have a damned good TECHNICAL reason to attempt a veto of it. And the PMC should be slapping down people who make repeated bullshit vetoes (again: remove their PMC membership and commit rights until they've learned to work with others).\n\nIf you're not satisfied with the operation of the PMC, then raise it to the Board. That is what we are here for: to fix the PMC when it is broken. And as I've said: our fixes are usually pretty extreme, so you better try and work it out yourself first. Get your policy reset on those kinds of changes. Start an explicit conversation IN PUBLIC, rather than allowing yourself to be driven by crappy private bullshit. Shine a light on this stuff, or you're going to be stuck. And it'll be your own fault. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13025559",
            "date": "2011-04-27T01:58:02+0000",
            "content": "There are technical reasons, and they aren't necessarily bullshit, it's just that not everyone agrees on them.  If you would like, we can link all the back issues.  As Yonik has pointed out many times, factoring these things out makes it harder on some parts of the code and while others have pointed out it makes it better for other parts.  While I believe it is a net positive despite the downsides, it isn't always cut and dried.  \n\nAs for the private conversations, not all of us are privy to them, so how does the PMC shut them down?  Besides, people who live in glass houses, shouldn't throw stones. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13025561",
            "date": "2011-04-27T01:59:58+0000",
            "content": "Some background:\n\nThe PMC should have stood up at that time and shut down those private conversations. That is a failing of the PMC.\n\nThe PMC uniformly responded (those who responded) that they would not discuss off list. A couple committers sent emails in response saying they would like to be heard but where not on the PMC list. That was actually settled about as nicely as you could ask IMO. It's then up to any of the individuals to move the discussion to public mailings lists. This is not a new discussion - it's not something I personally was going to open up again - its really up to those with larger stakes in the game to make this move - if someone is ready and willing to discuss, lets go - but the emails where not there until now.\n\nAlso, no one has ever banned refactorings. The idea is absurd. I have heard yonik more than once suggest that we stop merge issues until we figure this out. This is not a declaration on what you can do Robert - and when you get one of those emails asking for your bank password, I wouldn't listen to it either. You are a PMC member - you know the Apache way - don't play these games about being banned - the closest I have seen to that kind of nonesense is this revert war! "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025564",
            "date": "2011-04-27T02:08:03+0000",
            "content": "Grant: what glass house am I in? And when did this conversation become about me?\n\nI am hearing opposing things here. How can I tell who is telling the truth, who is shading the truth, and who is outright lying? Answer: I can't. So instead, I say \"you have a problem, and you need to get it fixed.\" If conversations reach this kind of rancor, then you have a problem. Simple as that. "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025567",
            "date": "2011-04-27T02:10:22+0000",
            "content": "Oh, and as for \"bullshit vetoes\". Yeah. Look at Yonik's in LUCENE-2995 and Richard's in this issue. I call both of those bullshit. (and then Robert stepped way over the line with his double-revert) ... Those were clearly bullshit rather than a simple disagreement. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025569",
            "date": "2011-04-27T02:14:52+0000",
            "content": "Hi Mark, there is at least one other comment on the general@ \"vote\" thread that feels the project is somehow dominated by one person: there are at least more people (than just me) that feel its not a balanced community.\n\nAs far as refactorings go, its not very sexy stuff and we have to move past battling over it constantly. Theoretically refactorings are the kinds of things that newer contributors could be helping with but currently you have to put on a full suit of body armor and prepare to do \"battle\". "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13025571",
            "date": "2011-04-27T02:25:24+0000",
            "content": "Theoretically refactorings are the kinds of things that newer contributors could be helping with but currently you have to put on a full suit of body armor and prepare to do \"battle\".\n\nThere are hypothetical scenarios which you imagine like that... and then\nthere are real scenarios where you discourage contributions to Solr that\ndo not directly benefit Lucene.\n\nhttp://markmail.org/message/hpvkrqe5ap3vjuci\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13025573",
            "date": "2011-04-27T02:32:43+0000",
            "content": "Its the same argument we have here, all over again. If we could actually freely refactor stuff from solr into lucene (e.g. spatial search functionality, which seems like some lucene users MIGHT just want), then it really doesn't matter where it goes.\n\nSure its \"ideal\" if the patch puts the core functionality in lucene and the solr bits in solr, but it would still be \"great\" even if the patch starts totally solr, and there is at least the hope in the future of refactoring (if someone is willing to do the work). "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13025574",
            "date": "2011-04-27T02:49:03+0000",
            "content": "I'm not saying it was right to revert etc but I do believe both Yonik and Robert had technical reasons for what they did, even if the solution they arrived at was too drastic. \n\n "
        },
        {
            "author": "Greg Stein",
            "id": "comment-13025577",
            "date": "2011-04-27T02:59:28+0000",
            "content": "The only technical reason to revert somebody else's commit is if it break's the build, and there is no obvious fix to make it build again (ie. the revert re-enables the project to move forward). There is absolutely NO possible technical reason to perform a revert of somebody's commit which merely adds a feature. If you think there is, then I have serious concerns about your idea of how things should operate here at the Foundation. (Robert may object to a change... totally fine, especially if there are technical concerns, and he may work to see it backed out or fixed or altered... but he should never unilaterally revert it himself just because he disagrees or vetoes; the original committer should say \"I see your veto, and I don't see us reaching any compromise, so I'll back it out now\") "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13109242",
            "date": "2011-09-21T03:42:05+0000",
            "content": "IS this committed yes or no?\n\nIf yes, can we make it work for 3.x ? "
        },
        {
            "author": "C S",
            "id": "comment-13126477",
            "date": "2011-10-13T10:40:32+0000",
            "content": "Is there a chance that this will make it into the 3.x branch? "
        },
        {
            "author": "Christopher Ball",
            "id": "comment-13442481",
            "date": "2012-08-27T15:42:40+0000",
            "content": "This does not appear to support use with a delete query . . .\n\nFor example, the following does not work: \n\nhttp://localhost:8984/solr/myMusic/update?stream.body=<delete><query>\n{!join from=artist_name to=artist_name fromIndex=MusicBrainz}\n:</query></delete>&commit=true\n "
        },
        {
            "author": "Suryansh Purwar",
            "id": "comment-13644363",
            "date": "2013-04-29T08:35:54+0000",
            "content": "I'm not getting expected results. Will it be a problem if number of results returned from \"from\" query are too many?\nsomething around 1000 let's say. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14255525",
            "date": "2014-12-22T07:42:19+0000",
            "content": "fwiw, cross-core join test coverage exists only in SOLR-6234 patch. "
        }
    ]
}