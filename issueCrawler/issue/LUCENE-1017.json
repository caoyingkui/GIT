{
    "id": "LUCENE-1017",
    "title": "BoostingTermQuery performance",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I have been experimenting with payloads and BoostingTermQuery, which I think are excellent additions to Lucene core. Currently, BoostingTermQuery extends SpanQuery. I would suggest changing this class to extend TermQuery and refactor the current version to something like 'BoostingSpanQuery'.\n\nThe reason is rooted in performance. In my testing, I compared query throughput using TermQuery against 2 versions of BoostingTermQuery - the current one that extends SpanQuery and one that extends TermQuery (which I've included, below). Here are the results (qps = queries per second):\n\nTermQuery:    200 qps\nBoostingTermQuery (extends SpanQuery): 97 qps\nBoostingTermQuery (extends TermQuery): 130 qps\n\nHere is a version of BoostingTermQuery that extends TermQuery. I had to modify TermQuery and TermScorer to make them public. A code review would be in order, and I would appreciate your comments on this suggestion.\n\nPeter",
    "attachments": {
        "termquery.patch": "https://issues.apache.org/jira/secure/attachment/12366968/termquery.patch",
        "BoostingTermQuery.java": "https://issues.apache.org/jira/secure/attachment/12366967/BoostingTermQuery.java",
        "BoostingTermQuery.patch": "https://issues.apache.org/jira/secure/attachment/12367094/BoostingTermQuery.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-10-03T00:08:57+0000",
            "content": "Suggested change to BoostingTermQuery to extend TermQuery ",
            "author": "Peter Keegan",
            "id": "comment-12531967"
        },
        {
            "date": "2007-10-03T00:09:52+0000",
            "content": "Changes to TermQuery and TermScorer for previous patch ",
            "author": "Peter Keegan",
            "id": "comment-12531968"
        },
        {
            "date": "2007-10-03T00:49:02+0000",
            "content": "Can you do the BoostingTermQuery as a patch too, that way it will be easy to compare it against the current one?  I don't recall seeing a package on the java file.  Can you put it in the source tree and svn add it and then do svn diff.\n\nAlso, I notice you commented out setFreqCurrentDoc(), how is it that you are handling multiple payloads per document (that bit me the first time)?\n ",
            "author": "Grant Ingersoll",
            "id": "comment-12531974"
        },
        {
            "date": "2007-10-03T13:22:04+0000",
            "content": "Grant,\n\nYou are right about it not handling multiple payloads per document. In fact, I don't think it's even reading the payloads for all the hits. I'll see what I can do, but feel free to step in and help me get this right. I won't touch svn for now.\n\nPeter ",
            "author": "Peter Keegan",
            "id": "comment-12532094"
        },
        {
            "date": "2007-10-03T13:39:04+0000",
            "content": "You will have to look at what setFreqCurrentDoc() does.  I have a feeling, though, that there really isn't anyway around what the current version does and that the performance difference is due to it not checking all the positions on a document.  At any rate, the Span stuff needs more scrutiny performance wise, so it is worth another look.  \n\nThere should be a unit test in the code that checks multiple payloads per document, etc.  Have a look at that and try it out.   ",
            "author": "Grant Ingersoll",
            "id": "comment-12532107"
        },
        {
            "date": "2007-10-04T17:23:31+0000",
            "content": "Here is new version that traverses the term positions properly, I believe. It's only about 5% faster than the spans version, though. It's quite possible that this could be improved. I'm using TermScorer to get me to the current doc and then setting TermPositions to the same doc. Do you see any inefficiencies with the 'next' and 'skipTo' calls, particularly in 'getPayloads'? ",
            "author": "Peter Keegan",
            "id": "comment-12532485"
        },
        {
            "date": "2007-12-10T21:29:56+0000",
            "content": "Peter,\n\nCan you share your test for measuring this?  Ideally as a contrib/benchmark alg file.  I am not sure why a skipTo would be faster, since is just iterating the TermPositions object as well, so I'd like to investigate further.\n\nThanks,\nGrant ",
            "author": "Grant Ingersoll",
            "id": "comment-12550198"
        },
        {
            "date": "2007-12-10T21:46:30+0000",
            "content": "Grant,\n\nUnfortunately, my performance test bed isn't suitable for contrib/benchmark because it's designed to simulate real queries from our log files. These are multi-threaded queries sent at a very high rate to stress test the Lucene server, which runs on an 8 cpu system. \n\nGiven the somewhat dynamic nature of the test bed, I don't think the 5% performance increase that I reported is statistically significant. You're probably right that skipTo is not likely any faster. I still think it would be nice to have BoostingTermQuery that extends TermQuery, though.\n\nPeter ",
            "author": "Peter Keegan",
            "id": "comment-12550203"
        },
        {
            "date": "2007-12-10T21:56:45+0000",
            "content": "\nI still think it would be nice to have BoostingTermQuery that extends TermQuery, though.\n\nWhat's the use case?  Is there something that isn't possible with it as is?   ",
            "author": "Grant Ingersoll",
            "id": "comment-12550207"
        },
        {
            "date": "2007-12-10T23:53:32+0000",
            "content": "> What's the use case? Is there something that isn't possible with it as is?\n\nI would say \"no\", if we can conclude that there is no significant difference in performance between the 2 implementations. \n\nAs a developer, when I see queries based on SpanQuery or PhraseQuery, this a tip that there is a potential performance impact. On the plus side, renaming the current implementation to 'BoostingSpanQuery' might give the developer a better hint of the methods of its superclass, too.\n\nWould you expect the cost of traversing the postings to be higher than reading the payload?\n\nPeter ",
            "author": "Peter Keegan",
            "id": "comment-12550238"
        },
        {
            "date": "2011-01-25T19:35:29+0000",
            "content": "BoostingTermQuery was removed with Lucene 3.0. If this also applies to PayloadTermQuery, please open another issue with a new patch. ",
            "author": "Uwe Schindler",
            "id": "comment-12986640"
        }
    ]
}