{
    "id": "LUCENE-3593",
    "title": "Add a filter returning all document without a value in a field",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In some situations it would be useful to have a Filter that simply returns all document that either have at least one or no value in a certain field. We don't have something like that out of the box and adding it seems straight forward.",
    "attachments": {
        "LUCENE-3593.patch": "https://issues.apache.org/jira/secure/attachment/12505040/LUCENE-3593.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-24T21:50:09+0000",
            "content": "here is an initial patch. maybe somebody more familiar with our new filter hierarchy etc. can review this. There is still a nocommit in there since I am not sure if that is the best way of doing this. Uwe had some ideas I think.. ",
            "author": "Simon Willnauer",
            "id": "comment-13156910"
        },
        {
            "date": "2011-11-24T22:22:35+0000",
            "content": "Hi Simon,\n\nthe first patch looks exactly like I said in our first ideas-exchange!\n\nThere are smaller problems (but solveable) and one optimization... (a trick one...): FieldCacheDocIdSet has some special cases which work with the implementation here, but are unclean and should violate some assertions - and should be fixed...:\n\n\n\tFieldCacheDocIdSet excepts that the match() method throws ArrayIndexOutOfBoundsException when the FieldCacheArray is out of bounds. With the FixedBitSet behind that implementation of the FieldCache this basically works, but should violate some code assertions added by MikeMcCandless (not sure why the testcase does not hit this - doesn't it - I assume it does not because the trunk bits() on DocIdSet will intercept this as our filter is not sparse -> it switches to random access)\n\tThe FieldCacheDocIdSet should maybe made un-private and refactored out of the FieldCacheRangeFilter.\n\tThe positive case could be optimized: A instanceof check in the getDocIdSet() method could check for the positive case that the FieldCacheImpl itsself returns a FixedBitSet/DocIdSet already and return this directly:\n\n\n\n\nfinal Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(context.reader, field);\nif (negate && docsWithField instanceof DocIdSet) // this is always the case for our current impl - but who knows :-)\n  return (DocIdSet) docsWithField;\n\n\n\nIn general the other cases can be easily done by the default stupid (stupid in the case that its slowly iterating by doc++ and in trunk directly uses the Bits) impl like you did, but once factoring out the FieldCacheRangeFilter.FieldCacheDocIdSet we could optimize this and maybe have a better negation.\n\nIn all cases I dont like double negation of this Filter.\n\nI'll work on the problems and make this filter work better. Should I take this issue and solve the problems first? I also want to backport the FieldCacheTermsFilter code-duplication removal in trunk to 3.x, so some cleanup is really needed!\n\nI will come with a patch adressing those problems later or tomorrow. ",
            "author": "Uwe Schindler",
            "id": "comment-13156917"
        },
        {
            "date": "2011-11-24T22:30:12+0000",
            "content": "Hello,\n\nI think rather than having NoFieldValueFilter with boolean negate, we should instead use a positive name for the filter, to avoid requiring double negations.\n\nSo the name would something positive like FieldValueFilter instead. ",
            "author": "Robert Muir",
            "id": "comment-13156918"
        },
        {
            "date": "2011-11-24T22:34:43+0000",
            "content": "Robert: I already said that. The Filter could also live of the shortcuts, if getDocsWithField returns MatchAllBits it could shortcut to MatchAllDocsQuery/Filter or return null (depending on negation or not). In all cases this Filter could in all cases do some shortcuts \n\nI will provide a patch later adressing also the stupid \"rely on ArrayIndexOutOfBoundsException\". I am not even sure that FieldCacheTermsFilter works correct in trunk... I would prefer to add the \"< maxDoc\" check in the iterator impl beyond FieldCacheDocIdSet. ",
            "author": "Uwe Schindler",
            "id": "comment-13156920"
        },
        {
            "date": "2011-11-24T22:55:49+0000",
            "content": "guys thanks for the comments! I incorporated uwes shortcut and fixed the name to FieldValueFilter. I extened the testcase to also use deletions. Uwe, whatever you want to do feel free to upload a new patch. I already added a changes.txt entry for this too... ",
            "author": "Simon Willnauer",
            "id": "comment-13156925"
        },
        {
            "date": "2011-11-24T23:05:23+0000",
            "content": "Patch looks good, except the AIOOBE requirement - which is a broken API. I will fix this now by always doing (doc < maxDoc) check in the iterator and also factor out the abstract class from FCRF. Also 3.x has a bug in FCRF with respecting deletions (I already discussed with Mike several weeks ago). ",
            "author": "Uwe Schindler",
            "id": "comment-13156929"
        },
        {
            "date": "2011-11-24T23:18:12+0000",
            "content": "next iteration. I added a AIOOBE to all the match methods to make the interface happy. I think we should fix this as uwe mentioned. Uwe, can you create a subtask / issue to fix this.. I think you already on it no? I added some more optimizations if the Bits is instanceof MatchNoBits / MatchAllBits respectively I return null instead of the DocIdSetIterator when appropriate. all test pass.. \n\nI think it's ready.. ",
            "author": "Simon Willnauer",
            "id": "comment-13156932"
        },
        {
            "date": "2011-11-24T23:22:22+0000",
            "content": "+1 looks fine. Cool heavy fast ping-pong \n\nI will open new issue and fix the TODO, especially as I dont know if trunk really likes e.g. on FieldCacheTermsFilter that getOrd() is called with doc id out of range... Maybe it throws AIOOBE, but thats ugly. ",
            "author": "Uwe Schindler",
            "id": "comment-13156933"
        },
        {
            "date": "2011-11-24T23:32:24+0000",
            "content": "Opened LUCENE-3595. ",
            "author": "Uwe Schindler",
            "id": "comment-13156934"
        },
        {
            "date": "2011-11-24T23:45:42+0000",
            "content": "Opened LUCENE-3595.\n\nthanks! I committed this to trunk and backported to 3.x \n\nnice iterations..  heavy committing  ",
            "author": "Simon Willnauer",
            "id": "comment-13156940"
        },
        {
            "date": "2011-11-25T02:14:31+0000",
            "content": "Hi Simon, I fixed the TODO for the DocIdSet special case (@UweSays) to resepect deletions (with fixes from LUCENE-3595). Code needed for Lucene 3.x was copied from CachingWrapperFilter. ",
            "author": "Uwe Schindler",
            "id": "comment-13156962"
        }
    ]
}