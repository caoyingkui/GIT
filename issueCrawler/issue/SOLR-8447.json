{
    "id": "SOLR-8447",
    "title": "Nightly fail in org.apache.solr.handler.TestReplicationHandler: ObjectTracker found 9 object(s) that were not released!!! [NRTCachingDirectory, ...",
    "details": {
        "components": [],
        "type": "Test",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Build: https://builds.apache.org/job/Lucene-Solr-NightlyTests-trunk/886/",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-19T22:32:43+0000",
            "author": "Mark Miller",
            "content": "\n [junit4]   2> org.apache.solr.common.util.ObjectReleaseTracker$ObjectTrackerException\n   [junit4]   2> \tat org.apache.solr.common.util.ObjectReleaseTracker.track(ObjectReleaseTracker.java:43)\n   [junit4]   2> \tat org.apache.solr.core.CachingDirectoryFactory.get(CachingDirectoryFactory.java:352)\n   [junit4]   2> \tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:386)\n   [junit4]   2> \tat org.apache.solr.handler.IndexFetcher.fetchLatestIndex(IndexFetcher.java:270)\n   [junit4]   2> \tat org.apache.solr.handler.ReplicationHandler.doFetch(ReplicationHandler.java:387)\n   [junit4]   2> \tat org.apache.solr.handler.ReplicationHandler$1.run(ReplicationHandler.java:275)\n\n ",
            "id": "comment-15065551"
        },
        {
            "date": "2015-12-19T22:42:58+0000",
            "author": "Mark Miller",
            "content": "This is reproducible - it's doTestStressReplication on Nightly. By code inspection, I have not yet spotted how it can happen. Still digging. ",
            "id": "comment-15065557"
        },
        {
            "date": "2015-12-19T23:09:10+0000",
            "author": "Mark Miller",
            "content": "Seems to be perhaps from SOLR-4506. If I don't do that clean up on core reload in SolrCore#initIndex, the leak does not happen. ",
            "id": "comment-15065566"
        },
        {
            "date": "2015-12-19T23:12:32+0000",
            "author": "Mark Miller",
            "content": "I suspect that SOLR-4506 is not really implemented correctly. It seems to have a new SolrCore on a reload blow away the directory of the previous SolrCore, and that SolrCore may actually still be in use. On first look, that seems a little off. ",
            "id": "comment-15065567"
        },
        {
            "date": "2016-03-08T10:19:18+0000",
            "author": "Markus Jelsma",
            "content": "Hi - i got this too sometimes in certain unit tests of an UpdateProcessor. Our other UpdateProcessors don't show this behaviour. \n\n\nObjectTracker found 3 object(s) that were not released!!! [SolrCore, MockDirectoryWrapper, MockDirectoryWrapper]\n\n\n\nThis specific UpdateProcessor implements processCommit() and has some SolrIndexSearcher logic when running in non-cloud mode. This specific UpdateProcessor has a reference to a SolrCore, which it got from its Factory.\n\nDoes something come to mind? ",
            "id": "comment-15184745"
        },
        {
            "date": "2016-03-08T10:56:12+0000",
            "author": "Markus Jelsma",
            "content": "Allright, i know what causes it, it is retrieving an IndexSearcher from the core.\n\n\n  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n    if (next != null) {\n      next.processCommit(cmd);\n    }\n    SolrIndexSearcher searcher = core.getRealtimeSearcher().get();\n  }\n\n\n\nI am not allowed to do this in an UpdateProcessor. Do i have to call close on RefCount after i'm done with my logic? Does that also close the IndexSearcher? It is protected so i cannot call close on RefCount. ",
            "id": "comment-15184775"
        },
        {
            "date": "2016-03-08T11:11:33+0000",
            "author": "Markus Jelsma",
            "content": "Ok, for whoever has this issue too:\n\n\n  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n    if (next != null) {\n      next.processCommit(cmd);\n    }\n    \n    RefCounted<SolrIndexSearcher> searcher = core.getRealtimeSearcher();\n    searcher.decref();\n\n\n\nThe API-doc for getRealtimeSearcher doesn't mention that the decRef must be decremented and i didn't notice the docs for getRegisteredSearcher and getSearcher.\n\nThanks for letting me monologue my way out of this  ",
            "id": "comment-15184795"
        }
    ]
}