{
    "id": "SOLR-3099",
    "title": "Add query operator, index structure, and analyzer for \"exact match\" searching",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A project I'm working on requires exact match searching with stemming turned off. The users are accostomed to Sphinx search, and thus expect a query like [ =runs ] to return only documents that contain the exact term, \"runs\", and not the stemmed word \"run\".\n\nIn SOLR-2866, there is similar work, but I believe it is different because it uses a huge-synonym file rather than storing the original terms directly in the index. \n\nWhat I'd like instead is two things:\n1. An analyzer that says, \"store the original form of all words in the index along with the stemmed variations.\" If necessary, it's fine if this is simply an unstemmed field, but that seems cumbersome schema-wise and performance-wise.\n2. An operator in edismax that allows users to query the exact form of the word. Sphinx uses the equals sign (=), and that makes sense logically to me.\n\nThis issue is part of a meta issue, SOLR-3028, that is requesting two other operators in edismax (quorum search and word order).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251527",
            "date": "2012-04-11T13:14:45+0000",
            "content": "This is wanted. Scheduling for 4.x. I think for this to work we need some better metadata support in analysis? Currently you can tag a token with a TOKENTYPE, so the stemmer could add the stemmed token on same position with tokentype=stem. However, we'd need a way to convey from the query that [=foo] should NOT match the \"stem\" token types?\n\nAlso, could we not simply adopt Google's syntax, i.e. if a single token is quoted, it is searched verbatim, e.g. foo \"bar\". "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13251533",
            "date": "2012-04-11T13:20:10+0000",
            "content": "\nCurrently you can tag a token with a TOKENTYPE, so the stemmer could add the stemmed token on same position with tokentype=stem.\n\nThis is not the way to go, for many reasons, its been brought up many times before.\n\nThis feature already works. Just use a separate field. Stacking tokens on top of each other\nwill be about the same size in the index anyway, since its an inverted index.\n\nstemmedBody = stemmed field\nexactBody = unstemmed field.\n\nNow i have an exact operator, \"exactBody:stuff\" that works. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251844",
            "date": "2012-04-11T19:00:52+0000",
            "content": "The duplicate field trick is well known. This issue is specifically about exploring native support in the original field for this. A native solution will save space, be easier to understand/use, be more performant, support more query features (such as spans) etc. This is a community; please let's try to contribute towards a improving the design instead of dismissing it as \"not the way to go\". "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13251852",
            "date": "2012-04-11T19:03:33+0000",
            "content": "How will it save space? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13251854",
            "date": "2012-04-11T19:08:28+0000",
            "content": "And i totally disagree this is 'wanted', you already have this, its called separate fields in lucene.\n\nits inverted, so its basically the same postings either way, whether you duplicate these inside the same\nfield or use a different one:\n\n\n\tit won't save space\n\tit won't be more performant (it will be slower)\n\tit won't give you more query features (all of lucene's queries support 'field' parameter already)\n\n\n\nOn the other hand, doing this will only make the analyzers more complicated. Currently I've spent \nthe first part of this week tracking down and fixing bugs in the analyzers.\n\nBottom line: we can't make the analyzers more complicated because people are afraid that using an\nextra field costs more than 'injecting' additional terms: it doesn't. The analyzers are already\ntoo complicated.\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251930",
            "date": "2012-04-11T21:19:16+0000",
            "content": "The stored part will be duplicated, and to support highlighting for a multiple field solution you need to do extra programming to merge the highlights from each field. It won't give more query features, but will work more nicely together with existing features. I'm working towards support for stuff like foo ONEAR/10 \"bar\", a span query between the two terms where \"bar\" should then be matched literally - spans would not work across words in different fields.\n\nInstead of assuming that we'd complicate analysis as you're afraid of, we should work on simplifying and refactoring analysis to make it more flexible and easier to work with, implementing features like this. Other stuff that could be useful in analysis is a graph structure instead of the current linear one to be able to overlay \"New York\" as a synonym for \"NY\" on the same position offset even if they have different number of tokens; or to attach metadata to field input e.g. to signify that the input is pre-tokenized.\n\nAlso note that at this stage of this issue we're just discussing possible ways forward, any implementation details are still left to decide... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13251933",
            "date": "2012-04-11T21:24:41+0000",
            "content": "\nThe stored part will be duplicated, and to support highlighting for a multiple field solution you need to do extra programming to merge the highlights from each field.\n\nWait, why would you duplicate that? just store it once.\n\nif the highlighter cannot deal with the fact that foo_unstemmed and foo_stemmed have the same stored content only in one field (called whatever, i dont care), then thats a highlighter problem.\n\nIts not something to be worked around by making analyzers more complicated or screwing up scoring by injecting things.\n\n\nInstead of assuming that we'd complicate analysis as you're afraid of, we should work on simplifying and refactoring analysis to make it more flexible and easier to work with, implementing features like this. Other stuff that could be useful in analysis is a graph structure instead of the current linear one to be able to overlay \"New York\" as a synonym for \"NY\" on the same position offset even if they have different number of tokens\n\nWho is doing the assumptions? this has already happened: its called PositionLengthAttribute and is already in 3.6 and trunk... "
        },
        {
            "author": "Mike Lissner",
            "id": "comment-13252185",
            "date": "2012-04-12T04:11:49+0000",
            "content": "From my perspective as the OP, my goals for this feature are simple:\n\n\tI want my users to have an exact match operator\n\tI want my users to have it work in an identical fashion to regular terms\n\tI want highlighting to work without a bunch of extra coding effort\n\n\n\nI just drew out various ways to make up the index structures, and performance-wise I think agree with Robert that it makes most sense to not change the way we index things, and to instead ask people to just have a stemmed and an unstemmed index that they can query against. The arguments against that are (1) if we introduce a query operator for exact match (which I think is vital for this request), it'd be awkward to have an operator determine which index is queried. (2), I can't imagine how highlighting would work with such a configuration.\n\nAlso, I don't think we can ask users to do queries like [ unstemmedBody:foo ]. Two reasons:\n 1. That sucks, and users probably won't use it.\n 2. Highlighting will break. \n\nAnyway, hopefully this is helpful...maybe you guys have already thought through this. But from my perspective, we have two options for implementing this:\n 1. Don't change index structures at the risk of having a query operator change which index a query goes against, probably breaking highlighting; or\n 2. Change the index structures so they can have the unstemmed tokens at the risk of added complexity in the index and a possible performance impact.\n\nAs far as the analyzer goes, I don't have a horse in the race, provided it works. Seems like adding an exact match operator to it shouldn't be terribly hard, but I haven't delved into it myself.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412131",
            "date": "2012-07-11T22:26:06+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429747",
            "date": "2012-08-07T03:42:40+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451083",
            "date": "2012-09-07T22:32:53+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward)\n "
        }
    ]
}