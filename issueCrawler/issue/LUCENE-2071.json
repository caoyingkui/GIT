{
    "id": "LUCENE-2071",
    "title": "Allow updating of IndexWriter SegmentReaders",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "2.9.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "This discussion kind of started in LUCENE-2047.  Basically, we'll allow users to perform delete document, and norms updates on SegmentReaders that are handled by IndexWriter.",
    "attachments": {
        "LUCENE-2071.patch": "https://issues.apache.org/jira/secure/attachment/12425117/LUCENE-2071.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-11-16T19:24:52+0000",
            "content": "Added an IW updateReaders method that accepts a Readers callback\nclass. The current segment readers are passed into the callback\nand may be updated safely because we're in a sync block. The\nreader pooling is transparent to the user. ",
            "author": "Jason Rutherglen",
            "id": "comment-12778464"
        },
        {
            "date": "2009-11-16T22:58:12+0000",
            "content": "I would rather not open up such an advanced API now.  What's the\nspecific driver (that can't be achieved throw IW's already exposed\nAPIs)?\n\nOr, at least, take this up in the larger context of the refactoring of\nIW / allowing custom subclasses of SR to be used by apps / etc. ",
            "author": "Michael McCandless",
            "id": "comment-12778624"
        },
        {
            "date": "2009-11-16T23:19:38+0000",
            "content": "I suspect there's apps out in the wild that could use this (I\nrecall some of the LinkedIn code could find this useful,\nsomething like Zoie that already has deletes calculated in a doc\nset, and I doubt it's the only installation with this use case).\nSolr has pre-calculated docsets which could operate on exposed\nSRs as well. If we offer this sooner rather than later, then we\nneedn't worry about users writing crazy workarounds later (i.e.\npopping docsets into a filter query) just to perform deletes\nwhen using Lucene NRT.\n\nI'd rather not limit people's using NRT/getReader because they rely\non per doc deletes, which as it turns out is really trivial to\nsupport (when LUCENE-1516 was written, I wasn't fully aware of\nhow deletes work, now that I know it's all synced on IW, I don't\nthink it's a big deal). \n\nI guess we should map out what the worst case scenarios are\n(i.e. what is the worst thing the user can do with the mutable\nSR access?). Then we can specifically limit it?\n\nI'm not sure how the worst case scenario will change when we\nrefactor the IW APIs? Meaning the user will still need to be\nadvanced (probably more advanced after offering pluggable IW\nAPIs). They could still break things (unless we limit what's\nbreakable), and we'd still basically be offering SR access? ",
            "author": "Jason Rutherglen",
            "id": "comment-12778641"
        },
        {
            "date": "2010-03-30T13:11:11+0000",
            "content": "+1\n\nI have a special subclassed IndexSearcher that certain special queries require, so IndexWriter's delete by query will fail as an IndexSearcher is passed in\n\nWith this added method, i would be able to construct my own Searcher over the readers and then apply deletes properly\n\nThis would also allow counting the deletes as they occur as well (which is commonly desired when deleting by query)\n\n\nIt would be nice if this method would also work with non-pooled readers\n\nso my desired method signature would be:\nvoid updateReaders(Readers callback, boolean pooled)\n\nif the readers were already pooled, this would have no effect, otherwise it would just open the segment readers just like the non-pooled delete readers are opened ",
            "author": "Tim Smith",
            "id": "comment-12851388"
        },
        {
            "date": "2010-03-30T19:32:11+0000",
            "content": "found a couple of small issues with the patch attached to this ticket:\n\n1. applyDeletes issue\n\nsaw this was in another ticket\n\nthink the flush should be flush(true, true, false)\nand applyDeletes() should be called in the synchronized block\n\n\n2. IndexWriter.changeCount not updated\n\nthe call() method does not return a boolean indicating if there were any changes that would need to be committed\n\nas a result, if no other changes are made to the indexwriter, the commit will be skipped, even though deletes/norm updates were sent in\nIndexReader.reopen() will then return the \"old\" reader without the deletes/norms\n ",
            "author": "Tim Smith",
            "id": "comment-12851528"
        },
        {
            "date": "2011-01-24T21:12:14+0000",
            "content": "Sorry if this spam's things, however it's unlikely that I'll work on these. ",
            "author": "Jason Rutherglen",
            "id": "comment-12985990"
        }
    ]
}