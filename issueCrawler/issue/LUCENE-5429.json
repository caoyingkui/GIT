{
    "id": "LUCENE-5429",
    "title": "Run one search across multiple scorers/collectors",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "I'm looking into the possibility of running the same search across many scorers, so that decoding postings lists / doing union and intersect are done once, but scoring via Similarity can be done multiple times for each it (and the results collected into separate collectors).",
    "attachments": {
        "LUCENE-5429.patch": "https://issues.apache.org/jira/secure/attachment/12626498/LUCENE-5429.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13888759",
            "author": "Michael McCandless",
            "content": "Patch, making a Similarity that switches between sub-Sims, and a custom collector that uses that switching and calls .score() and then collects into multiple sub-Collectors.\n\nWhile this works for TermQuery, and all-MUST BooleanQuery, the test fails on all-SHOULD BooleanQuery because DisjunctionSum/MaxScorer pre-compute the score during matching.  I know they do this for performance reasons (single pass recursion through the PQ to find the sub-scorers that matched)... so I think the only way this feature can work in general is with a custom BQ that doesn't do this opto. ",
            "date": "2014-02-01T21:58:24+0000"
        },
        {
            "id": "comment-13888793",
            "author": "Robert Muir",
            "content": "I don't think this approach is thread-safe? If the same indexsearcher is used by multiple threads concurrently, 'scorerIndex' will be changing back and forth.\n\nMaybe an alternative approach would be, score a higher top-N with a single sim (like BM25) and re-rank with multiple ones (ideally with support for some of the more common schemes of doing this, some of which are heavy)? if we were to provide some APIs to do this kind of thing, i think it would be very useful for many applications. ",
            "date": "2014-02-02T01:58:56+0000"
        },
        {
            "id": "comment-13888894",
            "author": "Michael McCandless",
            "content": "I don't think this approach is thread-safe?  If the same indexsearcher is used by multiple threads concurrently, 'scorerIndex' will be changing back and forth.\n\nRight, scorerIndex changes for each request.  The javadocs explain this (you must make a new IndexSearcher per-request).\n\n\nMaybe an alternative approach would be, score a higher top-N with a single sim (like BM25) and re-rank with multiple ones (ideally with support for some of the more common schemes of doing this, some of which are heavy)? if we were to provide some APIs to do this kind of thing, i think it would be very useful for many applications.\n\nYeah, I guess that's the more traditional way to achieve this?  Rather than running multiple first-pass searches, just run a single one with a big topN and then rescore after.\n\nIn one of the many patches on LUCENE-5288 I had created a small and simple static rescore method: it just took the docs from the first pass search and turned them into a filter and then ran a second search.  Maybe that's a start.... ",
            "date": "2014-02-02T10:55:03+0000"
        },
        {
            "id": "comment-13920984",
            "author": "Michael McCandless",
            "content": "Here's a new patch, fixing DisjunctionSum/MaxScorer to not score during matching.\n\nI sort of think this is something we should separately explore ... e.g. if you do a Filter with one of these queries, they are scoring unnecessarily.  Queries really shouldn't score during matching.\n\nFor this issue, the test now passes, so you can run matching once and scoring N times to N collectors, for disjunctions. ",
            "date": "2014-03-05T15:50:41+0000"
        },
        {
            "id": "comment-13931966",
            "author": "Michael McCandless",
            "content": "This is a patch against 4.3.1 (small changes were required because SimScorer API changes); it also includes the QueryRescorer (LUCENE-5489). ",
            "date": "2014-03-12T16:45:43+0000"
        }
    ]
}