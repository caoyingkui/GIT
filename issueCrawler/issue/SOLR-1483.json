{
    "id": "SOLR-1483",
    "title": "Example schema is confusing with int, tint and pint fields",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "documentation"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Example schema defines int (TrieIntField), tint (TrieIntField) and pint (IntField) which is confusing. In particular, the comments for int fields tell users to use tint types (which is the same thing).\n\nLet us remove tint, tlong, tdouble, tdate types from example schemas and fix the comments - carefully noting the things trie fields do not work with.",
    "attachments": {
        "SOLR-1483.patch": "https://issues.apache.org/jira/secure/attachment/12421285/SOLR-1483.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12761569",
            "date": "2009-10-02T13:12:08+0000",
            "content": "I'm not following.  What comments are you referring to?  The comments on the various field types for int, tint and pint are pretty clear to me. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12761578",
            "date": "2009-10-02T13:50:36+0000",
            "content": "What comments are you referring to?\n\nThe comments just before int, float, long, double say \"For faster range queries, consider the tint/tfloat/tlong/tdouble types.\" But tint/tfloat/tlong/tdouble are actually the same as int/float/long/double with precisionStep being different.\n\nThe example schema has 4 types of numeric fields - int/tint/pint/sint. I think we should have only one trie field else we should clearly document why using int is better/different than sint/pint. Without that it would be pretty confusing to a new Solr user who starts off with 1.4 "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12761612",
            "date": "2009-10-02T15:14:17+0000",
            "content": "int says:\n\nDefault numeric field types.  For faster range queries, consider the tint/tfloat/tlong/tdouble types.\n      Note: the statistics component does not yet work with these field types.\n\ntint says:\n\nNumeric field types that index each value at various levels of precision\n     to accelerate range queries when the number of values between the range\n     endpoints is large. See the javadoc for NumericRangeQuery for internal\n     implementation details.\n\n     Smaller precisionStep values (specified in bits) will lead to more tokens\n     indexed per value, slightly larger index size, and faster range queries.\n\n     Note: faceting does not currently work for these fields.\n\nI guess I'd add that in the int case, you could add some \"why\" to it, but otherwise, I think both comments explain the case for each one.  One gives faster range queries than the other. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12762177",
            "date": "2009-10-05T13:56:40+0000",
            "content": "Noting Grant's comments from the mailing list:\n\n\nIt seems like we should have tint4, tint8 instead of just 8, no?  My impression of the Lucene javadocs is that a step of 4 for ints/floats was more appropriate.\n\nAlso, StatsComponent does work with int/float/long/double/tdate types against the comment on the fields in schema. It does not work with the tint/tfloat/tlong/tdouble/tdate fields. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12762180",
            "date": "2009-10-05T14:06:01+0000",
            "content": "It seems to me that we should use precisionStep 6 for tlong/tdouble fields just like we are doing for tdate? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12762181",
            "date": "2009-10-05T14:06:26+0000",
            "content": "Attaching that javadoc from Lucene:\n\n\n\t<p>Good values for <code>precisionStep</code> are depending on usage and data type:\n\t<ul>\n\t<li>The default for all data types is <b>4</b>, which is used, when no <code>precisionStep</code> is given.\n\t<li>Ideal value in most cases for <em>64 bit</em> data types <em>(long, double)</em> is <b>6</b> or <b>8</b>.\n\t<li>Ideal value in most cases for <em>32 bit</em> data types <em>(int, float)</em> is <b>4</b>.\n\t<li>For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is\n\tfair to use \n{@link Integer#MAX_VALUE}\n (see below).\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12762183",
            "date": "2009-10-05T14:21:23+0000",
            "content": "Clearly state:\n\n\tTrie field types are new in Solr 1.4.0\n\tSupported features\n\tFeatures that don't work\n\tpint/sint etc are for compatibility and should not be used if possible\n\tCopied descriptions for pint/sint from pre-trie example schema (is there a need to remove them?)\n\n\n\nI haven't changed the precisionSteps. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12762206",
            "date": "2009-10-05T15:08:35+0000",
            "content": "On changing the precisionSteps... it feels like working in the dark a bit... I still haven't seen any good analysis on the size penalty that goes along with the performance increase. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12762238",
            "date": "2009-10-05T16:17:38+0000",
            "content": "On changing the precisionSteps... it feels like working in the dark a bit... I still haven't seen any good analysis on the size penalty that goes along with the performance increase.\n\nI agree. Anyways, it is not related to this issue.\n\nShould I commit this patch? Anything that needs to be added or clarified? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12762242",
            "date": "2009-10-05T16:28:58+0000",
            "content": "I think the patch is way to verbose...\nSolr is growing up - we shouldn't have a numeric field and say \"hey, it supports sorting as a feature!\"  Wouldn't one expect you could do sorting, range queries, faceting, function queries, etc?  We should really only need to call out what doesn't work.\n\nI also don't see why we want to call out that Trie fields are new in the schema - seems like more noise.\n\nI'll try and revisit / review your other points (#4 and #5) soon. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12762779",
            "date": "2009-10-06T21:14:34+0000",
            "content": "Updated patch to take SOLR-1492 into account.\n\nI've removed the note about trie being a new feature but I've kept the descriptions of pint/sint fields as they were in the pre-trie era. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12763150",
            "date": "2009-10-07T17:38:43+0000",
            "content": "Can I go ahead and commit this? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12763221",
            "date": "2009-10-07T19:47:27+0000",
            "content": "Please commit the big comment at the end, but please retain the existing comments about how faceting does not yet work. \n\nIt was painful enough learning Solr 1.2 from the existing mosaic of documentation and oral tradition; please don't recommend new features without warning of their problems. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12763225",
            "date": "2009-10-07T19:50:22+0000",
            "content": "Please commit the big comment at the end, but please retain the existing comments about how faceting does not yet work. \n\nLance, support for faceting on trie fields with precisionSteps has been added by Yonik. See SOLR-1492. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12763229",
            "date": "2009-10-07T19:52:42+0000",
            "content": "The latest patch seems to duplicate docs for \"sortMissingLast\", etc? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12763239",
            "date": "2009-10-07T20:13:47+0000",
            "content": "Removing duplicate documentation on sortMissingFirst/Last and adding pint/pfloat/plong/pdouble to the list of types which support this feature. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12763243",
            "date": "2009-10-07T20:21:30+0000",
            "content": "Removing duplicate documentation on sortMissingFirst/Last and adding pint/pfloat/plong/pdouble to the list of types which support this feature. \n\nI left pint and friends off for a reason... if you try using sortMissingFirst with them, it will double your fieldCache size.\npint uses a native int[] for the fieldcache entry and the comparator that implements sortMissingFirst asks for the StringIndex. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12763248",
            "date": "2009-10-07T20:28:36+0000",
            "content": "\nI left pint and friends off for a reason... if you try using sortMissingFirst with them, it will double your fieldCache size.\npint uses a native int[] for the fieldcache entry and the comparator that implements sortMissingFirst asks for the StringIndex.\n\nThis full of gotchas! Things like this should be noted in CHANGES.txt in the upgrading section as well as on the wiki in the SchemaXml page. A user is very likely to keep using sortMissingFirst with his old schema in a new 1.4 installation. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12763257",
            "date": "2009-10-07T20:43:36+0000",
            "content": "A user is very likely to keep using sortMissingFirst with his old schema in a new 1.4 installation.\n\nThe doubling fieldCache behavior for sortMissingLast with pint isn't new, so that part at least should still work as it did before.\nBut yes, there are other fieldCache issues that we will need to call out. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12763264",
            "date": "2009-10-07T21:00:48+0000",
            "content": "The doubling fieldCache behavior for sortMissingLast with pint isn't new, so that part at least should still work as it did before.\n\nFine. I'll remove the p-types and commit the other changes (which aren't many). The doubling memory issue for p-types should still be noted somewhere though. Should I remove pdate too (which already existed in that note)? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12763266",
            "date": "2009-10-07T21:10:20+0000",
            "content": "The doubling memory issue for p-types should still be noted somewhere though.\n\nI had just always considered it as unsupported.  Actually, sortMissingLast should probably work on trie based fields with precisionStep==0, again at the cost of doubling the fieldCache.  Less confusing to tell people that it's not supported.\n\nShould I remove pdate too (which already existed in that note)?\n\nNope - pdate (DateField) uses StringIndex by default, so no increased memory usage. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12763371",
            "date": "2009-10-08T05:35:15+0000",
            "content": "Committed revision 823025. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12763487",
            "date": "2009-10-08T13:11:44+0000",
            "content": "The doubling memory issue for p-types should still be noted somewhere though\n\nAgreed - if you can do it, considering it unsupported without saying such is not very helpful to a user... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12763657",
            "date": "2009-10-08T19:50:08+0000",
            "content": "considering it unsupported without saying such is not very helpful to a user...\n\nWe currently list exactly the types that support sortMissingLast... that's good enough, right? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12763665",
            "date": "2009-10-08T20:06:22+0000",
            "content": "Yeah - I was basing my comment purely on the conversation with Shalin - hadn't looked. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775900",
            "date": "2009-11-10T15:52:17+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}