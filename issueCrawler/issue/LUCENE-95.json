{
    "id": "LUCENE-95",
    "title": "[PATCH] Term Vector support",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "general/website"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Moved from todo.xml:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-\ndev@jakarta.apache.org&msgNo=273 \nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-\ndev@jakarta.apache.org&msgNo=272 \n\nI don't know enough about the lucene internals to know if this was implemented \nin 1.3 so I'm adding it here as an open enhancement.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--vector.patch.gz": "https://issues.apache.org/jira/secure/attachment/12312220/ASF.LICENSE.NOT.GRANTED--vector.patch.gz",
        "queryTermPositionVector.patch.tar.gz": "https://issues.apache.org/jira/secure/attachment/12314765/queryTermPositionVector.patch.tar.gz",
        "ASF.LICENSE.NOT.GRANTED--termVectorPatch-1.3-2.zip": "https://issues.apache.org/jira/secure/attachment/12312219/ASF.LICENSE.NOT.GRANTED--termVectorPatch-1.3-2.zip",
        "ASF.LICENSE.NOT.GRANTED--IndexReader.patch": "https://issues.apache.org/jira/secure/attachment/12312222/ASF.LICENSE.NOT.GRANTED--IndexReader.patch",
        "ASF.LICENSE.NOT.GRANTED--patch-TermVectorPosOffset.txt": "https://issues.apache.org/jira/secure/attachment/12312223/ASF.LICENSE.NOT.GRANTED--patch-TermVectorPosOffset.txt",
        "ASF.LICENSE.NOT.GRANTED--TermFreqVector.patch": "https://issues.apache.org/jira/secure/attachment/12312221/ASF.LICENSE.NOT.GRANTED--TermFreqVector.patch",
        "ASF.LICENSE.NOT.GRANTED--src.zip": "https://issues.apache.org/jira/secure/attachment/12312224/ASF.LICENSE.NOT.GRANTED--src.zip",
        "ASF.LICENSE.NOT.GRANTED--termVectorPatch1.3.zip": "https://issues.apache.org/jira/secure/attachment/12312218/ASF.LICENSE.NOT.GRANTED--termVectorPatch1.3.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2003-04-11T23:38:27+0000",
            "content": "No, this has not yet been implemented.  Dmitry posted a nearly-complete\nimplementation over a year ago, but Lucene has changed a lot since then, so it\nwould need some work to be updated. ",
            "author": "cutting@apache.org",
            "id": "comment-12321237"
        },
        {
            "date": "2003-04-22T20:25:18+0000",
            "content": "A few more relevant messages from Dmitry:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-dev@jakarta.apache.org&msgId=114748\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-dev@jakarta.apache.org&msgId=114861\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-dev@jakarta.apache.org&msgId=114862\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-dev@jakarta.apache.org&msgId=433778 ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321238"
        },
        {
            "date": "2004-02-07T00:52:10+0000",
            "content": "Created an attachment (id=10254)\nContains the new files, the patch and implementation notes ",
            "author": "Grant Ingersoll",
            "id": "comment-12321239"
        },
        {
            "date": "2004-02-07T00:55:13+0000",
            "content": "Attached is Dmitry's code updated for 1.3.  Here are my notes on the \nimplementation (which are also included in the attachment)\n\nThe patch is in the zip and is named termVector1.3Patch.txt and\nwas generate using cvs diff -Nu at the root of the tree.\n\nIf there are any questions, I would be more than happy to help via the mailing\nlist.\n\n-----------------------------------------------\nNotes on the re-implemenation of Dmitry's Term Vector enhancements for Lucene \n1.3.\n\nPlease see http://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-\ndev@jakarta.apache.org&msgId=114748\nfor the original patch.\n\nGeneral Notes\n-----------------------\n\nI used Dmitry's code as a template by getting it working against 1.2 and then \ngoing through by hand \nand applying it against the HEAD.  Thanks to Dmitry's great notes, it was \nrelatively painless.  All of \nthe tests against HEAD pass.\n\nDifferences from 1.2 Version\n----------------------------  \n\nThe most significant change I had to make is that in the \nTermFreqVector interface the getTermNumbers() method has been replaced by a \ngetTerms() method which\nreturns an array of Strings.  These strings are the equivalent of Term.text() \nand store the unique string\nthat has been indexed.  While the numbering schema worked to save space it \npresented a problem in 1.3 when\nit comes to merging because the 1.3 code could support up to Long.MAX_LONG \npositions (see TermEnum and \nSegmentTermEnum) versus Integer.MAX_INTEGER in 1.2 (at least in my \nunderstanding).  This prevented me from\nusing the termMaps array technique used in 1.2 for remapping the term numbers \nfrom the old segment to the new\nsegment.  To solve this, we needed some globally unique identifier for a term.  \nFor this, I use the term\ntext plus the field number that the terms came from (which is why there is a \nnew accessor methods\non TermFreqVector called get/setFieldNum).\n\nThe side benefit of this is that merging is much simpler, as we can just \niterate over the readers and \nvectors add the terms from the old TermVector to the new TermVectorWriter, we \ndon't have to do any\nremapping.  The down side to this is the term vector files are going to take up \nmore space on the disk.\n\nI believe I have overcome the limitation that you can only retrieve term \nvectors on optimized indices.\nThe SegmentsReader, which previously through runtime exceptions for the \ngetTermVector methods now properly\nimplements them.\n\nCompatibility\n----------------------\nSimilar to Dmitry's, I believe the index files should be backward compatible.\n\nPerformance\n----------------------\nHave not run thorough performance tests, but I did do the following runs, one \nwith term vectors and one \nwithout term vectors:\n\nIndex Size: 12598 documents with 88362 terms. The documents in question are XML \nfiles where all of the TEXT\nwas extracted and indexed.\n\nWithout TVs: \nDrive Space Used: 42 MB\nTime to index: 5 minutes, 30 seconds\n\nWith TVs:\nDrive Space Used: 71.3 MB\nTime to index: 6 minutes, 2 seconds\n\nYour mileage may vary.\n\nLimitations\n------------------------\nNot sure what they are yet.  I am sure there are places that could be \noptimized.  The numbering scheme\ncould probably be reinstituted by using some type of Paging Array or array of \narrays scheme that allows you \nto store really large number of values.\n\nFilterIndexReader throws an UnsupportedOperationException for the new Term \nVector methods.\n\nI did not test with compound files.  Do not know if they are compatible.\n\nOther limitations are probably those of omission.  That is, are the new methods \nsufficient for doing what\npeople need to do?  I can think of a few:\n1. Since only terms and frequencies are stored, something to quickly calculate \nthe actual weight of the term\nas it was scored for the query.  I looked into this, but, frankly, I am fairly \nconfused by the whole \nScorer/Similarity interactions, especially when it comes to nested queries.\n\n2. Perhaps the Document object itself should have a method similar to those on \nIndexReader.\n\nNew File Notes\n----------------------------------\nsrc/java/org/apache/lucene/index/SegmentTermVector.java\n  Implementation of TermFreqVector and TermPositionVector.\n\nsrc/java/org/apache/lucene/index/TermFreqVector.java\n  Interface for describing a Document term vector.  See notes above for what \nwas changed from 1.2\n\nsrc/java/org/apache/lucene/index/TermPositionVector.java\n  No change from 1.2 version.\n\nsrc/java/org/apache/lucene/index/TermVectorsReader.java\n  Changed get methods to return TermFreqVector interface instead of explicit \nSegmentTermVector.\n  Added getTermPositions method to retrieve TermPositionVector(s).\n  Changed reading in slightly to match the writing of a the Term text instead \nof the term number.\n\nsrc/java/org/apache/lucene/index/TermVectorsWriter.java\n  Added documentation\n  Changed the writing to write the term string instead of the term number\n  Would be nice if there was a way to turn on or off the writing of positional \ninformation.  \n  See the TODO comment.\n\nsrc/test/org/apache/lucene/index/DocHelper.java\n  Package local Class to help setup documents for testing.\n\nsrc/test/org/apache/lucene/index/TestDocumentWriter.java\n  New test class for the DocumentWriter object.  Probably needs to be fleshed \nout more to fully test.\n\nsrc/test/org/apache/lucene/index/TestFieldInfos.java\n  Test for the new FieldInfos return values, etc.\n\nsrc/test/org/apache/lucene/index/TestFieldsReader.java\n  Basic test for FieldsReader.  Needs to be expanded to fully test \nfunctionality.\n\nsrc/test/org/apache/lucene/index/TestSegmentMerger.java\n  Setups up two segments, including term vectors then merges them and asserts \nthat items were properly\n  merged.\n\nsrc/test/org/apache/lucene/index/TestSegmentReader.java\n  Various tests for the SegmentReader.  Tests retrieving a document, deleting a \ndocument, \n  retrieving field names and retrieving terms.  Has a placeholder for \nretrieving norms,\n  but I did not implement, as I didn't fully understand how norms worked.\n\nsrc/test/org/apache/lucene/index/TestSegmentsReader.java\n  Setups up a SegmentsReader made up of two Segments and does various tests on \nthem.  Needs\n  to be filled in more completely.\n\nsrc/test/org/apache/lucene/index/TestSegmentTermDocs.java\n  Has positive and negative tests for the SegmentTermDocs.\n\nsrc/test/org/apache/lucene/index/TestTermVectorsReader.java\n  Writes out some term vectors and then asserts that they can be read back in\n\nsrc/test/org/apache/lucene/index/TestTermVectorsWriter.java\n  Writes out some term vectors and then asserts that the proper files were \ncreated w/ the proper\n  information in them.\n\nsrc/test/org/apache/lucene/search/TestTermVectors.java\n  Searches over an indexed set of documents and then retrieves the term vectors \nfor the documents.\n  Also sets up a small collection of documents and maps containing term and \nfrequency information\n  and calculates that the term vectors are properly constructed.  This is a \nfairly decent example\n  of end to end use of the vectors.\n\nExisting File Changes:\n----------------------------------\norg/apache/lucene/analysis/PorterStemmer.java:\n  Made public.\n  Please, please, please apply this patch!  I think several people have \nsubmitted this one and I vote for it\n  as well!  I use the implementation in other parts of my code and it is \nannoying to have to change it in\n  my local copy every time there is a new release.\n\norg/apache/lucene/document/Document.java\n  Added a getNumFields() method that will return the number of fields that a \ndocument has.\n\norg/apache/lucene/document/Field.java\n  Same as 1.2 patch.\n\norg/apache/lucene/index/DocumentWriter.java\n  Same as 1.2 patch.  Updated some formatting.\n\norg/apache/lucene/index/FieldInfo.java\n  Added constructor for indicating the term vector is stored.\n\norg/apache/lucene/index/FieldInfos.java\n  Added support for term vector storage.  Similar to 1.2 patch  \n  The add methods now return a Map of <field name, field number> pairs.\n\norg/apache/lucene/index/FieldsReader.java\n  Added comment.  Now constructs the Field object with the termVector \ninformation\n\norg/apache/lucene/index/FilterIndexReader.java\n  Formatted code.  Added in implementation of Term Vector methods, but they are \nnot implemented.      \n\norg/apache/lucene/index/IndexReader.java\n  Same as 1.2 patch, plus added a getTermVectorReader method which returns the \nTermVectorReader\n  for the IndexReader.  Added new getIndexedFieldNames(boolean) methods which \nretrieve\n  all indexed field names based on whether the field stores term vectors or not.\n  Added a package local method named getFieldInfos which returns the field \ninfos object\n  for the reader.  This is needed in merging. \n  Formatted code.\n\norg/apache/lucene/index/SegmentMerger.java\n  Added comments and a mergeVectors() method that merges the terms in from the \nvarious\n  readers into the new segment.  Formatted code.\n\norg/apache/lucene/index/SegmentReader.java\n  Added new TV files to the list of segments.  Implemented new IndexReader \nmethods for TVS.\n\norg/apache/lucene/index/SegmentTermDocs.java\n  Formatted.  Added in the isValid() method, but is commented out, as I am not \nsure it is needed. \n  It was in 1.2 version.\n\norg/apache/lucene/index/SegmentTermEnum.java\n  Same as 1.2 patch.  Formatted.\n\norg/apache/lucene/index/SegmentTermPositions.java\n  Same as 1.2 patch.\n\norg/apache/lucene/index/SegmentsReader.java\n  Added a fieldInfos variable that is the summation of all of the fieldInfos \nfrom the other segments.\n  This is used to implement the getFieldInfos() method, but is probably not all \nthat useful.\n  Implements the new term vector methods.\n\norg/apache/lucene/index/TermDocs.java\n  Added isValid method per 1.2, but it is commented out as I am not sure we \nneed it.  Formatted code.\n\norg/apache/lucene/index/TermEnum.java\n  Same as 1.2 patch.\n\norg/apache/lucene/index/TermInfosWriter.java\n  Same as 1.2 patch.\n\norg/apache/lucene/search/FilteredTermEnum.java\n  Implements size() method, but throws UnsupportedOperationException.\n\norg/apache/lucene/search/FuzzyTermEnum.java\n  Implements termNumber() and isValid() but both throw \nUnsupportedOperationException.          \n\norg/apache/lucene/search/MultiSearcher.java\n  Implements new count() methods as per 1.2 patch.\n\norg/apache/lucene/search/RemoteSearchable.java\n  Same as MultiSearcher.\n\norg/apache/lucene/search/Searchable.java\n  Added count() methods onto the interface.\n\norg/apache/lucene/search/Searcher.java\n  Added count() methods support.                        \n\norg/apache/lucene/search/WildcardTermEnum.java\n  Implements termNumber() and isValid() but both throw \nUnsupportedOperationException.\n\norg/apache/lucene/index/TestFilterIndexReader.java\n  Implements the necessary TV methods\n\norg/apache/lucene/search/TestBasics.java\n  Tests the count methods for the searcher.         ",
            "author": "Grant Ingersoll",
            "id": "comment-12321240"
        },
        {
            "date": "2004-02-07T05:25:24+0000",
            "content": "Wow!\n\nI think the idea of removing the Term->int mapping is probably a good one, since\nit makes vectors available for all indexes, not just optimized ones, and that's\nreally a requirement.  It makes things bigger and slower (e.g., a vector\ndot-product will have to do string compares) but I think that's probably worth it.\n\nDmitry, others: what do you think of this approach?\n\nNote that, since the vectors are sorted by term text, you can write them in a\nmore compact manner by sharing string prefixes.  See, for example,\nSegmentTermEnum.readTerm() for an example of how this can be done.\n\nIt would be best to include a format version number as the first four bytes of\neach file.  I'm trying to add that as we introduce new files or change the\nformat of existing files.  This will make it much easier to compatibly evolve\nthe file format.\n\nAn description of the new file formats will also be required before we make a\n1.4 release.  Can you draft something up about this?\n\nI haven't actually applied the patch or tried to run this yet.  One thing I\nnote, in glancing at the code, is that it looks like you read the positions even\nwhen they're not asked for.  (Or did I miss something.)  It would be best if\nthis could be avoided as it adds file i/o and increases the in-memory size of\nvectors.  Lots of vector-based computations don't care about positions.\n\nThanks! ",
            "author": "cutting@apache.org",
            "id": "comment-12321241"
        },
        {
            "date": "2004-02-08T01:40:36+0000",
            "content": "Yeah, the term text was a trade-off, but the only other way I saw of doing it \nwas some type of large list object that allowed you to address an array using \nlongs (for merging).  \nI thought about doing the prefix string thing like in the main index file, but \nwanted to keep it simple for the first go around.\n\nI can provide file formats.\n\nThere is a TODO tag in the TermVectorWriter marking where we would need to \nhandle the option of writing position information.  Currently they are always \nwritten\nand always read in, per the original code.  As above, I wanted to do the first \npass as simple as possible. ",
            "author": "Grant Ingersoll",
            "id": "comment-12321242"
        },
        {
            "date": "2004-02-10T00:16:29+0000",
            "content": "Below is the diff produced on the File Formats XML file located in xdocs, as \npromised.  I trust it will be checked for accuracy.  Let me know if there are \nany mistakes and I will fix them.\n\ncvs diff -Nu fileformats.xml\n\nIndex: fileformats.xml\n===================================================================\nRCS file: /home/cvspublic/jakarta-lucene/xdocs/fileformats.xml,v\nretrieving revision 1.6\ndiff -u -r1.6 fileformats.xml\n\u2014 fileformats.xml\t13 Oct 2003 13:53:08 -0000\t1.6\n+++ fileformats.xml\t9 Feb 2004 16:08:57 -0000\n@@ -224,7 +224,11 @@\n                         multiplied into the score for hits on that field.\n                     </p>\n                 </li>\n-\n+                <li><p>Term Vectors.  For each field in each document, the \nterm vector\n+                       (sometimes called document vector) is stored.  A term \nvector consists\n+                       of the term text, term frequency and term position.\n+                    </p>\n+                </li>              \n                 <li><p>Deleted documents.\n                         An optional file indicating which documents are \ndeleted.\n                     </p>\n@@ -804,9 +808,10 @@\n                 </p>\n\n                 <p>\n\n\tCurrently only the low-order bit is used of FieldBits is\nused.  It is\n\tone for\n\tindexed fields, and zero for non-indexed fields.\n+                    The low-order bit is one for\n+                    indexed fields, and zero for non-indexed fields.  The \nsecond lowest-order\n+                    bit is one for fields that have term vectors stored, and \nzero for fields\n+                    without term vectors.\n                 </p>\n\n\n\n                 <p>\n@@ -1112,6 +1117,57 @@\n                     </li>\n                 </ol>\n\n+            </subsection>\n+            <subsection name=\"Term Vectors\">\n+              Term Vector support is an optional on a field by field basis.  \nIt consists of 4\n+              files.\n+              <ol>\n+                <li>\n+                  <p>The Document Index or .tvx file.</p>\n+                  <p>This contains, for each document, a pointer to the \ndocument data in the Document \n+                    (.tvd) file.\n+                  </p>\n+                  <p>DocumentIndex (.tvx) --> \n<DocumentPosition><sup>NumDocs</sup></p>\n+                  <p>DocumentPosition   --> UInt64</p>\n+                  <p>This is used to find the position of the Document in \nthe .tvd file.</p>\n+                </li>\n+                <li>\n+                  <p>The Document or .tvd file.</p>\n+                  <p>This contains, for each document, the number of fields, a \nlist of the fields with\n+                  term vector info and finally a list of pointers to the field \ninformation in the .tvf \n+                  (Term Vector Fields) file.</p>\n+                  <p>\n+                    Document (.tvd) --> <NumFields, FieldNums, \nFieldPositions,><sup>NumDocs</sup>\n+                  </p>\n+                  <p>NumFields --> VInt</p>\n+                  <p>FieldNums --> \n<FieldNumDelta><sup>NumFields</sup></p>\n+                  <p>FieldNumDelta --> VInt</p>\n+                  <p>FieldPositions --> \n<FieldPosition><sup>NumFields</sup></p>\n+                  <p>FieldPosition --> VLong</p>\n+                  <p>The .tvd file is used to map out the fields that have \nterm vectors stored and\n+                  where the field information is in the .tvf file.</p>\n+                </li>\n+                <li>\n+                  <p>The Field or .tvf file.</p>\n+                  <p>This file contains, for each field that has a term vector \nstored, a list of\n+                  the terms and their frequencies.</p>\n+                  <p>Field (.tvf) --> <NumTerms, NumDistinct, TermFreqs, \nTermPositionPointerDelta><sup>NumFields</sup></p>\n+                  <p>NumTerms --> VInt</p>\n+                  <p>NumDistinct --> VInt \u2013 Future Use</p>\n+                  <p>TermFreqs --> <TermText, \nTermFreq><sup>NumTerms</sup></p>\n+                  <p>TermText --> String</p>\n+                  <p>TermFreq --> VInt</p>\n+                  <p>TermPositionPointerDelta --> VLong</p>\n+                  <p></p>\n+                </li>\n+                <li>\n+                  <p>The Positions or .tvp file.</p>\n+                  <p>This contains, for each term in the Field and Document, \nthe positional information for\n+                  each term in the document. </p>\n+                  <p>Positions (.tvp) --> \n<PositionDelta><sup>NumPositions</sup></p>\n+                  <p>PositionDelta --> VInt</p>\n+                </li>\n+              </ol>\n             </subsection>\n\n             <subsection name=\"Deleted Documents\"> ",
            "author": "Grant Ingersoll",
            "id": "comment-12321243"
        },
        {
            "date": "2004-02-19T02:13:17+0000",
            "content": "Created an attachment (id=10415)\nTerm Vector support, part 2.  See the notes.txt file in the attachment. ",
            "author": "Grant Ingersoll",
            "id": "comment-12321244"
        },
        {
            "date": "2004-02-20T06:08:01+0000",
            "content": "Created an attachment (id=10443)\nvector patch file ",
            "author": "cutting@apache.org",
            "id": "comment-12321245"
        },
        {
            "date": "2004-02-20T06:08:30+0000",
            "content": "Phew!  This was a fair bit of work to apply!  I ended up making lots of changes,\nmostly removing stuff that wasn't used and/or shouldn't be public.\n\nCan folks try applying this to the CVS head and seeing that everything still\nworks?  I'll check it in soon, if no one reports any problems. ",
            "author": "cutting@apache.org",
            "id": "comment-12321246"
        },
        {
            "date": "2004-02-24T06:25:36+0000",
            "content": "I committed this a few days ago. ",
            "author": "cutting@apache.org",
            "id": "comment-12321247"
        },
        {
            "date": "2004-02-25T02:54:29+0000",
            "content": "Created an attachment (id=10522)\nDiff to fix a small documentation bug in the TermFreqVector class. ",
            "author": "Bruce Ritchie",
            "id": "comment-12321248"
        },
        {
            "date": "2004-02-25T04:06:16+0000",
            "content": "Created an attachment (id=10523)\nAnother small patch to term vector documentation. ",
            "author": "Bruce Ritchie",
            "id": "comment-12321249"
        },
        {
            "date": "2004-08-19T19:10:09+0000",
            "content": "Term Vector support now has optional support for storing \nToken.getPositionIncrement() and Token.startOffset() and Token.endOffset() \ninformation.  Control of this is done through the standard Field creation \nmethods.  All options are backward compatible (position and offset information \nwill not be stored by default).  Added many new test cases to demonstrate \nfunctionality.  There are two new files needed: SegmentTermPositionVector and \nTermVectorOffsetInfo.  All tests pass as of 8/19/04 in the AM.\n\nAttached should be 1 patch file plus a zip containing 2 new files.\n\nWhat is this info good for?\n1.  I think the highlighter could use this info (offset) instead of reparsing \nevery document at runtime\n2. Many IR algorithms need character position, etc.\n3. Others??\n\nRemember, the values stored are based on what values you set when running the \nAnalyzer (i.e. Token.startOffset and Token.endOffset and \nToken.positionIncrement).  These values are controlled by the application \nauthor and can vary by application. ",
            "author": "Grant Ingersoll",
            "id": "comment-12321250"
        },
        {
            "date": "2004-08-19T19:10:56+0000",
            "content": "Created an attachment (id=12484)\nPatch file for new TermVector options ",
            "author": "Grant Ingersoll",
            "id": "comment-12321251"
        },
        {
            "date": "2004-08-19T19:11:34+0000",
            "content": "Created an attachment (id=12485)\nTwo new files needed for new TermVector position and offset support ",
            "author": "Grant Ingersoll",
            "id": "comment-12321252"
        },
        {
            "date": "2004-09-02T04:05:08+0000",
            "content": "Unfortunately your patch won't apply anymore, as the Field class has been \nmodified. We know take enumerations instead of booleans and this patch should \nprobably be adapted accordingly. \n ",
            "author": "Daniel Naber",
            "id": "comment-12321253"
        },
        {
            "date": "2004-09-02T04:42:52+0000",
            "content": "How would you recommend I fix it?  Is there a preferred way of adding these?  \nSeems like the Field class is going to be overwhelmed with inner classes if we \ntake this approach everytime we want to add some new feature to Field. ",
            "author": "Grant Ingersoll",
            "id": "comment-12321254"
        },
        {
            "date": "2004-09-02T04:54:13+0000",
            "content": "On the mailing list it has been suggested to add enumerations to \nField.TermVector, e.g. maybe Field.TermVector.WITH_POSITIONS. Do you see any \nproblem with the use of static inner classes?  ",
            "author": "Daniel Naber",
            "id": "comment-12321255"
        },
        {
            "date": "2004-09-08T21:57:24+0000",
            "content": "Created an attachment (id=12671)\nNew Patch that incorporates the new Field.TermVector parameters ",
            "author": "Grant Ingersoll",
            "id": "comment-12321256"
        },
        {
            "date": "2004-09-08T21:59:55+0000",
            "content": "The latest patch provides an upgrade to the previous Term Vector patch (dated \n8/19/04 12:10) that added support for storing offset and position \ninformation.  The attachment containing the 2 new files (dated 8/19/04 12:11) \nARE still needed for this new patch.\n\nCheers,\nGrant ",
            "author": "Grant Ingersoll",
            "id": "comment-12321257"
        },
        {
            "date": "2004-10-06T01:08:13+0000",
            "content": "Hi Grant,\n\nThank you very much for this huge patch \nI applied it with some changes. I would highly appreciate\nif you could review these changes briefly.\n\nChristoph ",
            "author": "Christoph Goller",
            "id": "comment-12321258"
        },
        {
            "date": "2005-10-07T23:04:03+0000",
            "content": "Attached is an implementation of TermPositionVector for queries.  It simply extends QueryTermVector and provides position and offset information for a query.\n\nI implemented it for the sake of completeness (there is a similar functionality on the Document side) and b/c I need it for my ApacheCon Lucene talk in December .  \n\nI also modified some items in QueryTermVector to make some private members protected and added some documentation.  \n\nContents:\npatch.txt \u2013 The svn diff patch to QueryTermVector\nnewFiles.tar \u2013 The new files for QueryTermPositionVector\n\nThanks,\nGrant ",
            "author": "Grant Ingersoll",
            "id": "comment-12331595"
        }
    ]
}