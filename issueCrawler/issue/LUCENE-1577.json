{
    "id": "LUCENE-1577",
    "title": "Benchmark of different in RAM realtime techniques",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "2.4.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "A place to post code that benchmarks the differences in the speed of indexing and searching using different realtime techniques.",
    "attachments": {
        "LUCENE-1577.patch": "https://issues.apache.org/jira/secure/attachment/12403837/LUCENE-1577.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-03-27T20:03:36+0000",
            "content": "This patch performs a benchmark of 3 different techniques for RAM based realtime indexing where after an update, the new document is searchable.  It performs multiple rounds of indexing and calculates the percentage difference with fastest of each of the 3 techniques.  The document source is the Wikipedia English XML used by contrib/benchmark.\n\n\n\tRealtimeWriter uses InstantiatedIndex\n\tLuceneWriter adds documents to an IndexWriter\n\tLuceneRealtimeWriter creates a RAMDirectory, opens an IndexWriter, adds a document, then closes the writer.\n\n\n\nI found it odd that RealtimeWriter is faster than LuceneWriter and so perhaps the benchmark is incorrect somehow.  Otherwise the results look highly promising in that we can implement realtime search with no impact to existing indexing performance.  \n\nSummary of the results:\n\nnumRounds:3 docs indexed:50000\nlowest of each, percent compared with lowest\nRealtimeWriter:7597 dif:0% \nLuceneWriter:12940 dif:70%\nLuceneRealtimeWriter:25882 dif:241% ",
            "author": "Jason Rutherglen",
            "id": "comment-12690027"
        },
        {
            "date": "2009-03-28T09:05:30+0000",
            "content": "Are these tests measuring adding a single doc, then searching on it?  What are the numbers you measure in the results (eg 25882 for LuceneRealtimeWriter)?\n\nI think we need a more realistic test for near real-time search, but I'm not sure exactly what that is.\n\nIn LUCENE-1516 I've added a benchmark task to periodically open a new near real-time reader from the writer, and then tested it while doing bulk indexing.  But that's not a typical test, I think (normally bulk indexing is done up front, and only a \"trickle\" of updates to doc are then done for near real-time search).  Maybe we just need an updateDocument task, which randomly picks a doc (identified by a primary-key \"docid\" field) and replaces it.  Then, benchmark already has the ability to rate-limit how frequently docs are updated. ",
            "author": "Michael McCandless",
            "id": "comment-12693414"
        },
        {
            "date": "2009-06-10T20:12:55+0000",
            "content": "Moving out. ",
            "author": "Michael McCandless",
            "id": "comment-12718180"
        },
        {
            "date": "2009-08-11T21:58:15+0000",
            "content": "We need a benchmark that simply measures the indexing of\n1,5,10,100,1000 docs + (reopen + query). The first benchmark can\nuse IW.getReader as is (meaning the newly created segments are\nwritten to disk), the other LUCENE-1313 (which stores newly\ncreated segments in RAM). This way we can accurately say which\nmethod works best and in what situation. The use case\nLUCENE-1313 is designed for is sub 100 document updates. \n\nI'll update LUCENE-1313, and give this a try.  ",
            "author": "Jason Rutherglen",
            "id": "comment-12742084"
        },
        {
            "date": "2009-08-11T22:29:50+0000",
            "content": "normally bulk indexing is done up front, and only a \"trickle\" of updates to doc are then done for near real-time search\n\nReally depends though I think - I would bet that many users that want real time are dealing with a huge amount of updates at given times, and that type of thing seems likely to grow. A lot of times its I think it could be much more than a trickle.\n\nA lot of installations I have seen have certain times when a lot of documents are coming in (certain times, certain days). Social Networking type sites likely see a constant stream of updates at most times. Press releases have hotspots for release - newspaper data all comes in at once in the morning - etc. ",
            "author": "Mark Miller",
            "id": "comment-12742101"
        },
        {
            "date": "2011-01-24T21:12:10+0000",
            "content": "Sorry if this spam's things, however it's unlikely that I'll work on these. ",
            "author": "Jason Rutherglen",
            "id": "comment-12985981"
        }
    ]
}