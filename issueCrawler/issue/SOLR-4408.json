{
    "id": "SOLR-4408",
    "title": "Server hanging on startup",
    "details": {
        "affect_versions": "4.1",
        "status": "Reopened",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "While starting, the server hangs indefinitely. Everything works fine when I first start the server with no index created yet but if I fill the index then stop and start the server, it hangs. Could it be a lock that is never released?\n\nHere is what I get in a full thread dump:\n\n2013-02-06 16:28:52\nFull thread dump OpenJDK 64-Bit Server VM (23.2-b09 mixed mode):\n\n\"searcherExecutor-4-thread-1\" prio=10 tid=0x00007fbdfc16a800 nid=0x42c6 in Object.wait() [0x00007fbe0ab10000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\n\twaiting on <0x00000000c34c1c48> (a java.lang.Object)\n\tat java.lang.Object.wait(Object.java:503)\n\tat org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1492)\n\tlocked <0x00000000c34c1c48> (a java.lang.Object)\n\tat org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1312)\n\tat org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1247)\n\tat org.apache.solr.request.SolrQueryRequestBase.getSearcher(SolrQueryRequestBase.java:94)\n\tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:213)\n\tat org.apache.solr.spelling.SpellCheckCollator.collate(SpellCheckCollator.java:112)\n\tat org.apache.solr.handler.component.SpellCheckComponent.addCollationsToResponse(SpellCheckComponent.java:203)\n\tat org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:180)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:208)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1816)\n\tat org.apache.solr.core.QuerySenderListener.newSearcher(QuerySenderListener.java:64)\n\tat org.apache.solr.core.SolrCore$5.call(SolrCore.java:1594)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\n\n\n\"coreLoadExecutor-3-thread-1\" prio=10 tid=0x00007fbe04194000 nid=0x42c5 in Object.wait() [0x00007fbe0ac11000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\n\twaiting on <0x00000000c34c1c48> (a java.lang.Object)\n\tat java.lang.Object.wait(Object.java:503)\n\tat org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1492)\n\tlocked <0x00000000c34c1c48> (a java.lang.Object)\n\tat org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1312)\n\tat org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1247)\n\tat org.apache.solr.handler.ReplicationHandler.getIndexVersion(ReplicationHandler.java:495)\n\tat org.apache.solr.handler.ReplicationHandler.getStatistics(ReplicationHandler.java:518)\n\tat org.apache.solr.core.JmxMonitoredMap$SolrDynamicMBean.getMBeanInfo(JmxMonitoredMap.java:232)\n\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getNewMBeanClassName(DefaultMBeanServerInterceptor.java:333)\n\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:319)\n\tat com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:512)\n\tat org.apache.solr.core.JmxMonitoredMap.put(JmxMonitoredMap.java:140)\n\tat org.apache.solr.core.JmxMonitoredMap.put(JmxMonitoredMap.java:51)\n\tat org.apache.solr.core.SolrResourceLoader.inform(SolrResourceLoader.java:636)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:809)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:607)\n\tat org.apache.solr.core.CoreContainer.createFromLocal(CoreContainer.java:1003)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:1033)\n\tat org.apache.solr.core.CoreContainer$3.call(CoreContainer.java:629)\n\tat org.apache.solr.core.CoreContainer$3.call(CoreContainer.java:624)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\n\n\n\"Thread-3\" daemon prio=10 tid=0x00007fbe40742800 nid=0x42c2 waiting on condition [0x00007fbe0ad42000]\n   java.lang.Thread.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\n\tparking to wait for  <0x00000000ef8e6a08> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n\tat java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n\tat java.util.concurrent.ExecutorCompletionService.take(ExecutorCompletionService.java:193)\n\tat org.apache.solr.core.CoreContainer.load(CoreContainer.java:662)\n\tat org.apache.solr.core.CoreContainer$Initializer.initialize(CoreContainer.java:340)\n\tat org.apache.solr.servlet.SolrDispatchFilter.init(SolrDispatchFilter.java:98)\n\tat org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:273)\n\tat org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:254)\n\tat org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(ApplicationFilterConfig.java:372)\n\tat org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:98)\n\tat org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4461)\n\tlocked <0x00000000c2e916f8> (a java.util.HashMap)\n\tat org.apache.catalina.core.StandardContext$2.call(StandardContext.java:5133)\n\tat org.apache.catalina.core.StandardContext$2.call(StandardContext.java:5128)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\n\n\n\"GC Daemon\" daemon prio=10 tid=0x00007fbe405af800 nid=0x42bf in Object.wait() [0x00007fbe383c6000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\n\twaiting on <0x00000000c2e46c30> (a sun.misc.GC$LatencyLock)\n\tat sun.misc.GC$Daemon.run(GC.java:117)\n\tlocked <0x00000000c2e46c30> (a sun.misc.GC$LatencyLock)\n\n\n\n\"Service Thread\" daemon prio=10 tid=0x00007fbe4010c000 nid=0x42bb runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread1\" daemon prio=10 tid=0x00007fbe4010a000 nid=0x42ba waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" daemon prio=10 tid=0x00007fbe40107000 nid=0x42b9 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Signal Dispatcher\" daemon prio=10 tid=0x00007fbe40104800 nid=0x42b8 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Finalizer\" daemon prio=10 tid=0x00007fbe400ad800 nid=0x42b7 in Object.wait() [0x00007fbe444d0000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\n\twaiting on <0x00000000c2e46ea8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)\n\tlocked <0x00000000c2e46ea8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:177)\n\n\n\n\"Reference Handler\" daemon prio=10 tid=0x00007fbe400ab800 nid=0x42b6 in Object.wait() [0x00007fbe445d1000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\n\twaiting on <0x00000000c2e46c10> (a java.lang.ref.Reference$Lock)\n\tat java.lang.Object.wait(Object.java:503)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)\n\tlocked <0x00000000c2e46c10> (a java.lang.ref.Reference$Lock)\n\n\n\n\"main\" prio=10 tid=0x00007fbe40009800 nid=0x42b1 waiting on condition [0x00007fbe49487000]\n   java.lang.Thread.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\n\tparking to wait for  <0x00000000c34bdc68> (a java.util.concurrent.FutureTask$Sync)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:994)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1303)\n\tat java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:248)\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:111)\n\tat org.apache.tomcat.util.threads.DedicatedThreadExecutor.execute(DedicatedThreadExecutor.java:56)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5127)\n\tlocked <0x00000000c2e90d70> (a org.apache.catalina.core.StandardContext)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\n\tlocked <0x00000000c2e90d70> (a org.apache.catalina.core.StandardContext)\n\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1035)\n\tlocked <0x00000000c2e90a08> (a org.apache.catalina.core.StandardHost)\n\tat org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774)\n\tlocked <0x00000000c2e90a08> (a org.apache.catalina.core.StandardHost)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\n\tlocked <0x00000000c2e90a08> (a org.apache.catalina.core.StandardHost)\n\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1035)\n\tlocked <0x00000000c2e90850> (a org.apache.catalina.core.StandardEngine)\n\tat org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291)\n\tlocked <0x00000000c2e90850> (a org.apache.catalina.core.StandardEngine)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\n\tlocked <0x00000000c2e90850> (a org.apache.catalina.core.StandardEngine)\n\tat org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)\n\tlocked <0x00000000c2e90850> (a org.apache.catalina.core.StandardEngine)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\n\tlocked <0x00000000c2e8f640> (a org.apache.catalina.core.StandardService)\n\tat org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:724)\n\tlocked <0x00000000c2e8f628> (a [Lorg.apache.catalina.Service\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\n\tlocked <0x00000000c2e471c0> (a org.apache.catalina.core.StandardServer)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:620)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:304)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)\n\n\n\n\"VM Thread\" prio=10 tid=0x00007fbe400a3000 nid=0x42b5 runnable \n\n\"GC task thread#0 (ParallelGC)\" prio=10 tid=0x00007fbe40017000 nid=0x42b3 runnable \n\n\"GC task thread#1 (ParallelGC)\" prio=10 tid=0x00007fbe40019000 nid=0x42b4 runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0x00007fbe40116800 nid=0x42bc waiting on condition \n\nJNI global references: 189\n\nHeap\n PSYoungGen      total 65280K, used 48438K [0x00000000eba00000, 0x00000000f3980000, 0x0000000100000000)\n  eden space 62720K, 73% used [0x00000000eba00000,0x00000000ee6d19b8,0x00000000ef740000)\n  from space 2560K, 99% used [0x00000000ef740000,0x00000000ef9bc010,0x00000000ef9c0000)\n  to   space 2560K, 0% used [0x00000000f3700000,0x00000000f3700000,0x00000000f3980000)\n ParOldGen       total 41728K, used 9077K [0x00000000c2e00000, 0x00000000c56c0000, 0x00000000eba00000)\n  object space 41728K, 21% used [0x00000000c2e00000,0x00000000c36dd478,0x00000000c56c0000)\n PSPermGen       total 25280K, used 25218K [0x00000000b8800000, 0x00000000ba0b0000, 0x00000000c2e00000)\n  object space 25280K, 99% used [0x00000000b8800000,0x00000000ba0a0b50,0x00000000ba0b0000)",
    "attachments": {
        "patch-4408.txt": "https://issues.apache.org/jira/secure/attachment/12569667/patch-4408.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13573735",
            "date": "2013-02-07T18:14:06+0000",
            "content": "Does this happen every time or is it intermittent? I think there's some chance this is related to SOLR-4400, I'll link it just in case..... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13573738",
            "date": "2013-02-07T18:15:34+0000",
            "content": "Not at all sure this is the identical issue, but if one of these gets fixed it sure makes sense to test the other one. "
        },
        {
            "author": "Francois-Xavier Bonnet",
            "id": "comment-13573984",
            "date": "2013-02-07T22:06:01+0000",
            "content": "For me it happens every time when the index is filled (about 6000 documents). But with a fresh empty index, no problem. "
        },
        {
            "author": "Francois-Xavier Bonnet",
            "id": "comment-13574549",
            "date": "2013-02-08T15:28:31+0000",
            "content": "I did some debug. It looks like at startup there are 2 threads that use method org.apache.solr.core.SolrCore.getSearcher(boolean, boolean, Future[], boolean) concurrently and need a lock on searcherLock.\nOne has to do with JMX and the other one with firstSearcher.\n\nI removed the queries from the firstSearcher in my solrconfig.xml file and now the server works.\n\nI hope this helps. "
        },
        {
            "author": "Francois-Xavier Bonnet",
            "id": "comment-13574562",
            "date": "2013-02-08T15:55:16+0000",
            "content": "I made some more tests. I had set spellCheck with collate in /select requestHandler, if I remove it everything works fine.\nMaybe it is the spellCheck that causes the problem with the firstSearcher. "
        },
        {
            "author": "Raintung Li",
            "id": "comment-13579698",
            "date": "2013-02-16T03:49:32+0000",
            "content": "The major problem searchExecutor is only one thread executor, if any listener method wait thread will block the registerSearcher() that cause can't notifyAll the wait object. Servlet can't initialize success. \nIt is bug. \nBTW, If you want avoid this, you can set useColdSearcher=true in the solrconfig.xml. "
        },
        {
            "author": "Raintung Li",
            "id": "comment-13579758",
            "date": "2013-02-16T08:40:51+0000",
            "content": "Update to fix it.  "
        },
        {
            "author": "Raintung Li",
            "id": "comment-13579760",
            "date": "2013-02-16T08:45:53+0000",
            "content": "It is short fix, the main issue listener only one thread execute. If any listener method is blocked, the notify method registerSearch() will blocked. How about the other thread execute the method registerSearcher()? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13579797",
            "date": "2013-02-16T14:31:37+0000",
            "content": "It is short fix, the main issue listener only one thread execute.\n\nOther code currently depends on a single threaded executor.\n "
        },
        {
            "author": "Raintung Li",
            "id": "comment-13580112",
            "date": "2013-02-17T03:00:04+0000",
            "content": "If SolrIndexSearcher can be used only finish execute the listeners one by one, all listener can't block the thread. Otherwise can define the other thread to monitor the execute complete then notify wait for getSearch method that easy to troubleshooting.  If the listeners don't need execute order sequence necessary, the multiple threads concurrent handle the listeners to improve the start efficiency.   "
        },
        {
            "author": "Francois-Xavier Bonnet",
            "id": "comment-13580505",
            "date": "2013-02-18T09:13:27+0000",
            "content": "I just tested the fix. It works for me. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13620438",
            "date": "2013-04-03T00:20:35+0000",
            "content": "I'm a little confused as to the status of this. Francios-Xavier says the he just tested the fix, but I'm not clear whether it's SOLR-4400 or the patch that Raintung put up. If it was SOLR-4400 then I'll close this JIRA.\n\nThanks,\nErick "
        },
        {
            "author": "Raintung Li",
            "id": "comment-13633638",
            "date": "2013-04-17T01:18:15+0000",
            "content": "It is different bug with SOLR-4400. Can remove the link. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13633956",
            "date": "2013-04-17T11:09:05+0000",
            "content": "Raintung:\n\nThanks for the clarifying... "
        },
        {
            "author": "beishuihan",
            "id": "comment-13693803",
            "date": "2013-06-26T07:33:18+0000",
            "content": "I also found this bug, and which causes tomcat startup slowly\n\nServer startup in 426785 ms "
        },
        {
            "author": "Brendan Grainger",
            "id": "comment-13716626",
            "date": "2013-07-23T17:19:28+0000",
            "content": "Having the same issue here. Solr 4.3.1 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717108",
            "date": "2013-07-23T18:47:09+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13744929",
            "date": "2013-08-20T12:42:46+0000",
            "content": "OK, I can't apply this patch cleanly to trunk, the underlying code has changed, see SOLR-5122.\n\nWhich leads me to ask whether this has been addressed by the other changes to SpellCheckCollator. Can anyone who can reproduce this try with a recent 4.x checkout but WITHOUT applying this patch?\n\nIf it's still a problem, I'd appreciate it if someone could update the patch and I promise I'll get to it this week/weekend. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13747473",
            "date": "2013-08-22T12:29:56+0000",
            "content": "Since this is so out-of-date and I haven't seen any recent reports like this I'm going to close this. We can re-open if necessary. "
        },
        {
            "author": "Ronny N\u00e6ss",
            "id": "comment-13932215",
            "date": "2014-03-12T19:09:48+0000",
            "content": "I have experienced my Tomcat instance to get stuck when deploying solr.war after Tomcat restart. \nINFO: Deploying web application archive /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/solr.war\n\nThe Tomcat startet and deployed Solr after setting spellcheck.collate=false\nSetting useColdSearcher=true also works. Tomcat starts up in blazing 4 secs when not doing the warm up. Normally it starts in 40-50 seconds as long as it is not stuck.\n\nI am running on OSX Mavricks, JDK 1.7, Tomat 7.0.52 and Solr 4.7 "
        },
        {
            "author": "simpleliving",
            "id": "comment-14018168",
            "date": "2014-06-04T20:59:12+0000",
            "content": "I am facing the same exact issue as reported by the reporter of this ticket and I am using Solr 4.7 . If there is not index the server starts , if there is an index present it hangs and does not start and I am using the spellcheckers and I can confirm that using spellcheckers cause this issue. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14020895",
            "date": "2014-06-07T18:05:06+0000",
            "content": "Re-opening because it seems to be a valid bug based on the latest solr-user thread:\nhttp://osdir.com/ml/solr-user.lucene.apache.org/2014-06/msg00168.html "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14184710",
            "date": "2014-10-26T23:42:53+0000",
            "content": "I'm not going to get to this in the foreseeable future, so if somebody else wants to pick this up, feel free. "
        },
        {
            "author": "Daniel Davis",
            "id": "comment-14271629",
            "date": "2015-01-09T18:09:38+0000",
            "content": "Francois's comment matches the hang I observed, also correlated with spellcheckers.\n\nI made some more tests. I had set spellCheck with collate in /select requestHandler, if I remove it everything works fine.\nMaybe it is the spellCheck that causes the problem with the firstSearcher.\n\nI am fairly new to Solr, so I had to do some reading before coming to try things.   I tried removing killing JVM, removing write.lock, and restarting JVM.   That did not work - the searchHandler again dead-locked.   I tried editing core.properties to use a new, empty data directory, this worked fine.   I tried restarting with the spellchecker commented out with the original directory.   This also worked fine.\n\nRunning 4.10.2 "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14272658",
            "date": "2015-01-10T19:35:48+0000",
            "content": "Daniel Davis, could you paste your spellchecker configuration? "
        },
        {
            "author": "Michael Wilken",
            "id": "comment-14345716",
            "date": "2015-03-03T20:57:25+0000",
            "content": "I am seeing this issue with Solr 4.10.2.  Having collate set to 'true' in the /select requestHandler causes Solr to hang when starting up.  Removing the collate option returns everything to normal.  My entire spellchecking config:\n\n\n      <str name=\"spellcheck\">on</str>\n      <str name=\"spellcheck.extendedResults\">true</str>\n      <str name=\"spellcheck.count\">5</str>\n      <str name=\"spellcheck.alternativeTermCount\">2</str>\n      <str name=\"spellcheck.maxResultsForSuggest\">100</str>\n      <str name=\"spellcheck.collate\">true</str>\n      <str name=\"spellcheck.collateExtendedResults\">true</str>\n      <str name=\"spellcheck.maxCollationTries\">5</str>\n      <str name=\"spellcheck.maxCollations\">3</str>\n      <str name=\"spellcheck.onlyMorePopular\">true</str>\n\n\n\nWhen running in a single machine, we see normal behavior.  We only see the 'hangs at startup' behavior when running in a 'SolrCloud' setup with 1 shard replicated across 3 servers. "
        },
        {
            "author": "Michael Wilken",
            "id": "comment-14345967",
            "date": "2015-03-03T23:10:36+0000",
            "content": "Turning spellcheck off in the 'firstSearcher' listener seems to solve my above issue. "
        }
    ]
}