{
    "id": "LUCENE-5870",
    "title": "Simplify StoredFieldsVisitor",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "StoredFieldVisitor has a visitor method for 4 numeric types: int, long, float and double. We should remove this specialization and just have a method that takes a java.lang.Number.",
    "attachments": {
        "LUCENE-5870.patch": "https://issues.apache.org/jira/secure/attachment/12659861/LUCENE-5870.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14085991",
            "author": "Adrien Grand",
            "content": "Here is a patch. ",
            "date": "2014-08-05T08:25:11+0000"
        },
        {
            "id": "comment-14085997",
            "author": "Adrien Grand",
            "content": "To give more context, a consequence of this change is that stored fields could store both ints and longs using a zlong without having to record whether it was an int or a long. ",
            "date": "2014-08-05T08:29:54+0000"
        },
        {
            "id": "comment-14086313",
            "author": "Ryan Ernst",
            "content": "+1 ",
            "date": "2014-08-05T14:30:31+0000"
        },
        {
            "id": "comment-14086433",
            "author": "Uwe Schindler",
            "content": "+1\n\nIn my opinion, I would use methods of Double/Float/... that directly return an instance, like Double.valueOf() instead of autoboxing Double.parseDouble() and so on.\n\nIn 4.x we may still need some special case, because we have a backwards layer for early 3.x indexes there (like 3.2 or so). ",
            "date": "2014-08-05T16:03:38+0000"
        },
        {
            "id": "comment-14086463",
            "author": "Robert Muir",
            "content": "I am a little concerned about this, since it results in loss of information.\n\nits similar to the parallel of removing TOKENIZED bit from stored fields before but yet still keeping StringField. This caused a lot of confusion for users.\n\nToday, the Analyzer doesn't know have \"full picture\" because of StringField/IntField/FloatField and company \"bypassing it\". This causes a lot of pain, for example, you cannot even do a simple numeric range query with lucene without subclassing things with your \"own additional schema\".\n\nIn my opinion this stuff makes lucene too hard to use, because its too hard to reconstruct the doc from stored fields to e.g. perform an update to it and pass it back to indexwriter. Instead it tries to force people to either write/maintain a separate schema and subclass many things or force them to use some server that does this, which should not be necessary.\n\nAn alternative would be, if we removed StringField/IntField/LongField etc and these were instead just KeywordAnalyzer/IntAnalyzer whatever in the analysis chain, then queryparser could form range queries without subclassing, queries on string fields would just work, and the \"schema\" needed to search would be implicit all in one place (the users Analyzer), making lucene a lot easier to use. ",
            "date": "2014-08-05T16:30:20+0000"
        }
    ]
}