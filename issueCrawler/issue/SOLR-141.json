{
    "id": "SOLR-141",
    "title": "Errors/Exceptions should be formated by ResponseWriter",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Wish",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Whenever possible, the Solr Dispatcher should to let the ResponseWriter format Exceptions using the format the user expects \u2013 this should in no way change the fact that Exceptions currently generate non 200 HTTP status codes, nor should it prevent the Dispatcher from using the exception message as the HTTP status message \u2013 but clients that want the full details of the error should be able to parse them in the format they expected based on the request.\n\nthis would also give RequestHandlers the oportunity to return \"partial\" results - by adding both whatever results they have to the Response as well as the Exception they encountered.\n\nsituations where this can't happen are obviously:\n\n\tException thrown by ResponseWriter\n\tException thrown so early in the request thta the DIspather doesn't know which ResposneWriter the client wanted.\n...in those cases, plain text is a wise choice.\n\n\n\nthing that would probably need to be done to make this work:\n1) if the Dispatcher catches an exception, it should call SolrQueryResponse.setException, set the HTTP status code/message as it currently does, but then hand off to the ResponseWriter.\n2) Dispatcher needs to check SolrQueryResponse.getException and set the HTTP status code/message just like if it caught the exception itself.\n3) all of the ResponseWriters should start looking at SolrQueryResponse.getException if they aren't already, and formatting it in a usefull way.\n4) if the ResponseWriter throws an exception, Dispatcher needs to return a nice plain text error page\n\nextension to this idea... add a new method to ResponseWriter to generate a generic error message in the appropriate format that Dispatcher can use if the ResponseWriter throws an exception (as a backup before resorting to plain text)",
    "attachments": {
        "solr-exception-writer-solr-1.2.diff": "https://issues.apache.org/jira/secure/attachment/12367212/solr-exception-writer-solr-1.2.diff",
        "SOLR-141-sendError.patch": "https://issues.apache.org/jira/secure/attachment/12447575/SOLR-141-sendError.patch",
        "solr-exception-writer-v3.diff": "https://issues.apache.org/jira/secure/attachment/12368090/solr-exception-writer-v3.diff",
        "SOLR-141-3.x-Backport.patch": "https://issues.apache.org/jira/secure/attachment/12535287/SOLR-141-3.x-Backport.patch",
        "error-response.patch": "https://issues.apache.org/jira/secure/attachment/12479981/error-response.patch",
        "solr-exception-writer-v2.diff": "https://issues.apache.org/jira/secure/attachment/12367216/solr-exception-writer-v2.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Daniel Naber",
            "id": "comment-12532965",
            "date": "2007-10-07T14:05:07+0000",
            "content": "almost the same patch but for Solr 1.2.0, just for reference "
        },
        {
            "author": "Daniel Naber",
            "id": "comment-12532967",
            "date": "2007-10-07T14:18:41+0000",
            "content": "I've attached a patch that adds an ErrorResponseWriter, similar to QueryResponseWriter. The default behaviour is unmodified, i.e. the error is returned with an http error code and text. It's now possible, however, to configure the new XMLErrorResponseWriter so that the error is returned as an XML page (http code 200, the original error code is in the XML).\n\nI didn't modify SolrServlet because it's deprecated anyway. There's a FIXME because the XML doesn't contain the stacktrace yet.\n\nThe patch against 1.2 is attached just in case someone might find it useful (SolrServlet is modified in this version). "
        },
        {
            "author": "Daniel Naber",
            "id": "comment-12532975",
            "date": "2007-10-07T15:57:17+0000",
            "content": "same as before, but now also shows stacktrace "
        },
        {
            "author": "Daniel Naber",
            "id": "comment-12536472",
            "date": "2007-10-20T22:03:15+0000",
            "content": "New version with two differences: includes an example in solrconfig.xml (commented out); sets the http status code according to the exception or 500 if it's not a SolrException. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12689572",
            "date": "2009-03-26T17:49:12+0000",
            "content": "Jogged by an email today, i took a quick glance at this patch and wanted to post some brief notes for anyone who might be interested.\n\non the whole this looks good, the few things that seem to be missing to me are...\n\n1) more smarts in SolrCore.getErrorResponseWriter to be able to deal with the possibility that the ResponseWriter is also an ErrorResponseWriter \u2013 that way people wouldn't have to register a dual purpose impl twice\n2) giving the ErrorResponseWRiter's access to the SolrQueryResponse in case they want to try and output \"partial\" results along with the error message\n3) the RepestDispatcher should still be using the status code from the Exception \u2013 or at the very least asking the ErrorResponseWriter which status code to use.\n4) i don't see the Content-Type getting specified anywhere\n5) test cases. "
        },
        {
            "author": "Frank Wesemann",
            "id": "comment-12854690",
            "date": "2010-04-07T20:29:57+0000",
            "content": "\n1) more smarts in SolrCore.getErrorResponseWriter to be able to deal with the possibility that the ResponseWriter is also an ErrorResponseWriter - that way people wouldn't have to register a dual purpose impl twice\nwouldn't it be sufficient to extend the interface QueryResponseWriter with a writeError(Writer, HttpServletResponse, SolrResponse, SolrRequest) Method?\n\nThe DispatchFilter may set the last caught exception on SolrResponse and call it in the sendError() method.\nThe ResponseWriter impl may than do something like:\n\npublic void  writeError(Writer out, HttpServletResponse res, SolrResponse solrRes, SolrRequest solrReq) {\n  Throwable th = solrRes.getException();\n  res.setStatus(code);\n  res.setContentType( getContentType() );\n  myTextResponseWriterImpl.writeInt( code );\n  myTextResponseWriterImpl.writeStr( th.getMessage );\n  if ( ! th instanceof QueryResponseWritingExecption ) {\n    try {\n       myTextResponseWriterImpl.writeResponse();\n    } catch ( Exception e) {\n       myTextResonseWriterIml.writeStr(\"an additionalError in writing the result occured: \" + e.getMessage() );\n    }\n  }\n //... do what else you need to.\n}\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872573",
            "date": "2010-05-27T22:08:05+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Rich Cariens",
            "id": "comment-12879120",
            "date": "2010-06-15T21:12:14+0000",
            "content": "If Solr is a JEE webapp, why not just have SolrServlet use HttpServletResponse.sendError(int, String) when an exception is raised?  That way the user can register custom error documents for 500's, 400's, etc in web.xml.\n\nOr is there some other rationale for not using this container feature? "
        },
        {
            "author": "Rich Cariens",
            "id": "comment-12880703",
            "date": "2010-06-21T01:45:12+0000",
            "content": "Patches SolrServlet.sendErr() to use HttpServletResponse.sendError(rc, msg).  This allows the user to hook into custom error documents via web.xml. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12920692",
            "date": "2010-10-13T17:56:19+0000",
            "content": "Frank:\n\nwouldn't it be sufficient to extend the interface QueryResponseWriter with a writeError(Writer, HttpServletResponse, SolrResponse, SolrRequest) Method?\n\n1) that would break back compat for anyone who already had QueryResponseWriter impl (unfortunately it's an interface not an abstract class).\n2) we don't want to introduce direct dependencies on javax.servlet.* into the core solr code (ie: QueryResponseWriter) ... only the org.apache.solr.servlet code in Solr should have those dependencies.\n\nRich:\n\nIf Solr is a JEE webapp, why not just have SolrServlet use HttpServletResponse.sendError(int, String) \n\nSolrServlet has been deprecated for quite some time, it's error handling is attrocious, but was been left that way for back compat (at this point we should just remove it)\n\nThe issue here is SolrDispatchFilter which already does use HttpServletResponse.sendError ... that's the entire problem, and the goal of this issue is to change that.  By using sendError we give hte servlet container the authority of formatting hte response, but that undermines the users ability to select the format using the \"wt\" param.  SolrDispatchFilter needs to take responsibility for formatting the response document directly in order to ensure we can always give the user the response in the format they want. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13037258",
            "date": "2011-05-21T03:38:17+0000",
            "content": "In this patch, SolrDispatchFilter.sendError() uses the ResponseWriter to format an error response.\n\nWhen the ResponseWriter is a BinaryResponseWriter, the response is written directly to the servlet's output stream.\n\nThe error text is included in the response with key=\"error\". Error responses come back with HTTP status=200, although the status code in the SolrResponse is as expected.  I added a test to SolrExampleTests that shows this.  \n\nIt would be a trivial change to set the proper HTTP status codes, but a corresponding change in CommonsHttpSolrServer.request() would be needed so as to return a usable response in that case, as the issue describes.  For my part, I think raising an exception might be better than returning a response that seems to indicate success, but happens to include an error message.  However this goes against the idea of including partial data in a response, which was mentioned as a goal, so I just made a minimal change.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043694",
            "date": "2011-06-03T16:46:34+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106461",
            "date": "2011-09-16T14:51:11+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Matthew Simoneau",
            "id": "comment-13191370",
            "date": "2012-01-23T19:23:58+0000",
            "content": "This would be extremely helpful to me. I'm doing a cross-domain JSONP request and there aren't good ways to detect that the call has failed with a 400 response code. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13223692",
            "date": "2012-03-06T21:48:50+0000",
            "content": "This patch uses the responeWriter to output the error.  It also updates Solrj parsing to read this error\n\nThere are enough API changes, that I am reluctant to port to 3.x "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13223704",
            "date": "2012-03-06T22:00:17+0000",
            "content": "Added in revision: 1297749 "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13223963",
            "date": "2012-03-07T04:21:58+0000",
            "content": "Thank you!  This is a little step that will make a huge difference.\n\n-Mike\n\n "
        },
        {
            "author": "Greg Bowyer",
            "id": "comment-13407599",
            "date": "2012-07-05T23:30:26+0000",
            "content": "Backport of SOLR-141 to 3.x  "
        }
    ]
}