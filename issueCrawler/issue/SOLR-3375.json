{
    "id": "SOLR-3375",
    "title": "Charset problem using HttpSolrServer instead of CommonsHttpSolrServer",
    "details": {
        "affect_versions": "3.6",
        "status": "Closed",
        "fix_versions": [
            "3.6.1"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I've written an application which sends PDF files to Solr for indexing, but I also need to index some meta-data which isn't contained inside the PDF.\nI recently upgraded to 3.6.0 and when recompiling my app, I got some deprecated messages which mainly was to switch from CommonsHttpSolrServer to HttpSolrServer.\n\nThe problem I've noticed since doing this, is that all extra fields which I add is sent to the Solr server as ASCII only, i.e UTF-8/ISO-8859-1 doesn't matter, anything above char 127 is sent as '?'. This was not the behaviour of CommonsHttpSolrServer.\n\n\nI've tracked it down to a line (271 in 3.6.0) in HttpSolrServer.java which is:\n  entity.addPart(name, new StringBody(value));\n\nThe problem is that StringBody(String text) maps to \n  StringBody(text, \"text/plain\", null);\nand in \n  StringBody(String text, String mimeType, Charset charset)\nwe have this piece of code:\n  if (charset == null) \n{\n     charset = Charset.forName(\"US-ASCII\");\n  }\n  this.content = text.getBytes(charset.name());\n  this.charset = charset;\nSo unless charset is set everything is converted to US-ASCII.\n\n\nOn the other hand, in CommonsHttpSolrServer.java (line 310 in 3.6.0) there is this line\n  parts.add(new StringPart(p, v, \"UTF-8\"));\nwhich adds everything as UTF-8.\n\n\nThe simple solution would be to change the faulty line in HttpSolrServer.java to\n  entity.addPart(name, new StringBody(value,Charset.forName(\"UTF-8\")));\n\nHowever, this doesn't work either since my tests have shown that neither Jetty or Tomcat recognizes the strings as UTF-8 but interprets them as 8-bit (8859-1 I guess).\n\nSo changing HttpSolrServer.java to\n  entity.addPart(name, new StringBody(value,Charset.forName(\"ISO-8859-1\")));\nactually gives me the same result as using CommonsHttpSolrServer.\n\n\nBut my investigations have shown that there is a difference in how Commons-HttpClient and HttpClient-4.x works.\nCommons-HttpClient sends all parameters as regular POST parameters but URLEncoded (/update/extract?param1=value&param2=value2) while\nHttpClient-4.x sends them as multipart/form-data messages and I think that the problem is that each multipart-message should have its own charset parameter.\n\nI.e HttpClient-4.x sends \n-----------------------------------------------------------------------------------\n--jNljZ3jE1sHG529HrzSjZWYEad-6Wu\nContent-Disposition: form-data; name=\"literal.string_txt\"\n\n\u00c3\u00a5\u00c3\u00a4\u00c3\u00b6\n-----------------------------------------------------------------------------------\n\nBut it should probably send something like this\n\n-----------------------------------------------------------------------------------\n--jNljZ3jE1sHG529HrzSjZWYEad-6Wu\nContent-Disposition: form-data; name=\"literal.string_txt\"\nContent-Type: text/plain; charset=utf-8\n\n\u00c3\u00a5\u00c3\u00a4\u00c3\u00b6\n-----------------------------------------------------------------------------------",
    "attachments": {
        "httpsolrserver-dump.txt": "https://issues.apache.org/jira/secure/attachment/12523276/httpsolrserver-dump.txt",
        "commonshttpsolrserver-dump.txt": "https://issues.apache.org/jira/secure/attachment/12523275/commonshttpsolrserver-dump.txt",
        "SolrTest.java": "https://issues.apache.org/jira/secure/attachment/12523238/SolrTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Roger H\u00e5kansson",
            "id": "comment-13256837",
            "date": "2012-04-18T19:02:40+0000",
            "content": "Test program to show the problem.\nPass a URL to a Solr server as first arg and a PDF file as second.\n\nThen search for id 1234567890 and 1234567891 and see the difference in string_txt/string2_txt between the documents "
        },
        {
            "author": "Roger H\u00e5kansson",
            "id": "comment-13257080",
            "date": "2012-04-18T23:25:25+0000",
            "content": "After having to go through a ton of code back an forth, I've come to this conclusion.\n\nFirst, the reason for the initial problem is that CommonsHttpSolrServer will make the client send an ContentStreamUpdateRequest as a POST with all parameters in the URL plus the file data. HttpSolrServer on the other hand sends everything as different parts in a multipart-post, one part for each parameter.\n\nRegarding fixing HttpSolrServer, I've tested the two solutions I previously described and both seems to work but might have totally different implications.\n\nFirst solution is to change HttpSolrServer.java so \n\n \nentity.addPart(name, new StringBody(value));\n\n \nis changed to\n\n \nentity.addPart(name, new StringBody(value, \"text/plain\", Charset.forName(\"ISO-8859-1\")));\n\n \nWhat implications this might have I'm not sure, it might be wrong according to some standard to assume 8859-1 and it doesn't solve this problem universally. But both the dist-Jetty and my Tomcat(7.0.22) work with this fix.\n\n\nSecond solution is a more generic fix.\nThis involves the same change as the previous, except the charset is \"UTF-8\".\n\n \nentity.addPart(name, new StringBody(value, \"text/plain\", Charset.forName(\"UTF-8\")));\n\n \nBut it also involves getting the guys developing HttpClient to make a change.\nCurrently their code looks like this\nHttpMultiPart.java\n  String filename = part.getBody().getFilename();\n  if (filename != null) {\n    MinimalField ct = part.getHeader().getField(MIME.CONTENT_TYPE);\n    writeField(ct, this.charset, out);\n  }\n\n\nIf they would change their code to not only add Content-Type when there is a filename, but always do it.\nTogether with the fix in HttpSolrServer.java that would make sure that UTF-8 encoded strings always would be sent to the server.\nBut this requires them to make a change...\n\n\nA third option would be to get HttpClient to post just like Commons-HttpClient did, i.e no multipart posting, but what that might require in terms of work I have no idea "
        },
        {
            "author": "Roger H\u00e5kansson",
            "id": "comment-13257081",
            "date": "2012-04-18T23:27:05+0000",
            "content": "Uploaded network dumps which shows difference between CommonsHttpSolrServer and HttpSolrServer "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13257305",
            "date": "2012-04-19T06:47:21+0000",
            "content": "Thanks Roger for the detailed report. I already fixed some bugs in trunk that I introduced in SOLR-2020 and I believe that this problem should be fixed there (r1327635). \n\nI will leave this issue open so that if there will be a 3.6.1 release this fix must be backported. In the meanwhile on 3.x the only workaround is to use the CommonsHttpSolrServer. "
        },
        {
            "author": "Roger H\u00e5kansson",
            "id": "comment-13257400",
            "date": "2012-04-19T09:48:01+0000",
            "content": "I've downloaded HttpSolrServer.java from trunk and recompiled the 3.6 tree and verified that the fix solves the problem. "
        },
        {
            "author": "Oleg Kalnichevski",
            "id": "comment-13258424",
            "date": "2012-04-20T17:59:38+0000",
            "content": "@Roger\n\n> But it also involves getting the guys developing HttpClient to make a change\n\nHttpClient supports two modes for multipart MIME messages: strict and browser compatible. The code snippet you have pasted above is executed in the compatibility mode only. Common browsers include a Content-Type field in body parts that represent a file upload.\n\nOleg "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13263515",
            "date": "2012-04-27T08:56:44+0000",
            "content": "the fix is now committed to 3.6 branch "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13420213",
            "date": "2012-07-22T16:05:40+0000",
            "content": "Bulk close for 3.6.1 "
        }
    ]
}