{
    "id": "SOLR-10008",
    "title": "Move the reference to CoreContainer from CoreDescriptor to SolrCore.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "6.4",
        "resolution": "Resolved",
        "status": "Resolved"
    },
    "description": "CoreDescriptor referencing CoreContainer is just weird. If anyplace, the SolrCore should have a reference to CoreContainer.",
    "attachments": {
        "SOLR-10008.patch": "https://issues.apache.org/jira/secure/attachment/12848465/SOLR-10008.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-20T05:05:03+0000",
            "content": "Think of this as a feasibility study. All tests pass, but it does great violence to constructors for SolrCore and CoreDescriptor.getCoreContainer thus breaks back-compat. It's evidence that this is possible, but are there better ways to access CoreContainer across the code?\n\nMost of this patch is just removing the intermediate getCoreDescriptor() from core.getCoreDescriptor().getCoreContainer()....\n ",
            "author": "Erick Erickson",
            "id": "comment-15831192"
        },
        {
            "date": "2017-01-22T09:52:41+0000",
            "content": "+1, I started to have a go at this a couple of years ago.  You can remove CoreContainer from a couple more CD constructors as well, I think? ",
            "author": "Alan Woodward",
            "id": "comment-15833431"
        },
        {
            "date": "2017-01-23T16:48:37+0000",
            "content": "Indeed, I stopped working on the patch when it got to the point CoreDescriptor just ignored the CoreContainer passed in, those other references won't be there for final.\n\nBefore going much further though I wanted to see how the back-compat break issue would be resolved. The current version breaks back-compat. The public constructors for CoreDescriptor and SolrCore are different, CoreDescriptor no longer has a getCoreContainer() method etc. \n\nSo before going there, what's the consensus about whether it's worth trying to support back-compat at all? Or is this one of those breaks that's acceptable? And assuming a back-compat break, should it go in 6.5? Supporting back-compat would be some pretty ugly hacking because we'd still have to get from a CoreDescriptor to a CoreContainer somehow and not doing that is the whole point of the patch.\n\nPersonally I don't think back-compat in this situation is worth doing, it's lots of gyrations to preserve design that's evolved over time and wouldn't be designed that way today.\n\nWhat do people think? ",
            "author": "Erick Erickson",
            "id": "comment-15834862"
        },
        {
            "date": "2017-02-03T04:17:30+0000",
            "content": "I don't think there are any back-compat guarantees for this internal stuff, so it's fine by me.  If it is easy in some way then fine.  \n\n+1 to the patch.\n\nWhile you're doing this clean-up, can you please add some class level javadocs to some of these classes?  e.g. purpose, life-cycle maybe even what class refers to it if applicable.  At least just CoreDescriptor as it's very pertinent to this issue. ",
            "author": "David Smiley",
            "id": "comment-15851042"
        },
        {
            "date": "2017-04-03T22:52:26+0000",
            "content": "Since SOLR-10007 has SOLR-10008 and SOLR-10009 as related, and since I'm doing both 10008 and 10009 at once, I'm moving all the code and patch to 10007 ",
            "author": "Erick Erickson",
            "id": "comment-15954282"
        },
        {
            "date": "2017-04-05T15:37:35+0000",
            "content": "Incorporated in SOLR-10007 ",
            "author": "Erick Erickson",
            "id": "comment-15957045"
        }
    ]
}