{
    "id": "SOLR-6568",
    "title": "Join Discovery Contrib",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "5.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This contribution was commissioned by the NCBI (National Center for Biotechnology Information). \n\nThe Join Discovery Contrib is a set of Solr plugins that support large scale joins and \"join facets\" between Solr cores. \n\nThere are two different Join implementations included in this contribution. Both implementations are designed to work with integer join keys. It is very common in large BioInformatic and Genomic databases to use integer primary and foreign keys. Integer keys allow Bioinformatic and Genomic search engines and discovery tools to perform complex operations on large data sets very efficiently. \n\nThe Join Discovery Contrib provides features that will be applicable to anyone working with the freely available databases from the NCBI and likely a large number of other BioInformatic and Genomic databases. These features are not specific though to Bioinformatics and Genomics, they can be used in any datasets where integer keys are used to define the primary and foreign keys.\n\nWhat is included in this contrib:\n\n1) A new JoinComponent. This component is used instead of the standard QueryComponent. It facilitates very large scale relational joins between two Solr indexes (cores). The join algorithm used in this component is known as a parallel partitioned merge join. This is an algorithm which partitions the results from both sides of the join and then sorts and merges the partitions in parallel. \n\n Below are some of it's features:\n\n\n\tSub-second performance on very large joins. The parallel join algorithm is capable of sub-second performance on joins with tens of millions of records on both sides of the join.\n\tThe JoinComponent returns \"tuples\" with fields from both sides of the join. The initial release returns the primary keys from both sides of the join and the join key.\n\tThe tuples also include, and are ranked by, a combined score from both sides of the join.\n\tSpecial purpose memory-mapped on-disk indexes to support *:* joins. This makes it possible to join an entire index with a sub-set of another index with sub-second performance.\n\tSupport for very fast one-to-one, one-to-many and many-to-many joins. Fast many-to-many joins make it possible to join between indexes on multi-value fields.\n\n\n\n2) A new JoinFacetComponent. This component provides facets for both indexes involved in the join. \n\n3) The BitSetJoinQParserPlugin. A very fast parallel filter join based on bitsets that supports infinite levels of nesting. It can be used as a filter query in combination with the JoinComponent or with the standard query component.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Krupansky",
            "id": "comment-14150589",
            "date": "2014-09-27T13:53:20+0000",
            "content": "This sounds quite interesting, but... it's tagged as \"minor\", so... what's the catch or limitation that prevents this from being a \"major\"?\n\nDoes it work well or at all for indexes that are not 100% memory resident? What about SSD?\n\nDoes it only work with \"integer\" join keys? Is that a restriction that could be relaxed? Or possibly have two parallel components, one that is super fast for integer keys and only reasonably fast for non-integer keys. Might it be possible to build an off-heap map from non-integer key to a temporary integer key? "
        },
        {
            "author": "Tom Winch",
            "id": "comment-14485281",
            "date": "2015-04-08T14:17:04+0000",
            "content": "See also the new external source join, \"xjoin\", at https://issues.apache.org/jira/browse/SOLR-7341 "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-15177046",
            "date": "2016-03-03T02:45:16+0000",
            "content": "Hey Joel Bernstein, has this been superseded by other joins? "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-15178638",
            "date": "2016-03-03T21:15:21+0000",
            "content": "Yes, the distributed joins in the Streaming API have superseded this ticket.  "
        }
    ]
}