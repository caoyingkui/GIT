{
    "id": "LUCENE-1309",
    "title": "Using IndexSearcher in a multithreaded context causes contention",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.3.1,                                            2.3.2",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "The attached code allows to search with a single IndexSearcher across threads or with a single instance per Thread, additionally it allows to deals with String.intern in Field from LUCENE-1308.\n\nReally interesting is the behavior of the current implementation (Field String.intern) The performance improves dramatically.\n\nIs this by design? Because it is usually recommended to reuse the IndexSearcher. How about a version to supports mult-threading much better basically delivering a read-only view?\n\nThe following results have been measured. The [main] part is a single threaded run. The following thread results\n\nField String.intern, Single Searcher\n[main] Search  took: 3453ms\n[Thread-2] Search  took: 17812ms\n[Thread-3] Search  took: 18313ms\n[Thread-1] Search  took: 18234ms\n[Thread-0] Search  took: 18562ms\n\nField WeakHashMap, Single Searcher\n[main] Search  took: 3156ms\n[Thread-3] Search  took: 14953ms\n[Thread-1] Search  took: 15593ms\n[Thread-0] Search  took: 15656ms\n[Thread-2] Search  took: 16188ms\n\nField ConcurrentHashMap, Single Searcher\n[main] Search  took: 2844ms\n[Thread-1] Search  took: 14812ms\n[Thread-0] Search  took: 14890ms\n[Thread-2] Search  took: 15172ms\n[Thread-3] Search  took: 14656ms\n\nField intern, Searcher per Thread\n[main] Search  took: 3687ms\n[Thread-2] Search  took: 10766ms\n[Thread-1] Search  took: 10734ms\n[Thread-0] Search  took: 11047ms\n[Thread-3] Search  took: 10938ms\n\nField Weak, Searcher per Thread\n[main] Search  took: 3187ms\n[Thread-3] Search  took: 11625ms\n[Thread-2] Search  took: 12484ms\n[Thread-1] Search  took: 12609ms\n[Thread-0] Search  took: 12391ms\n\nField Concurrent, Searcher per Thread\n[main] Search  took: 2938ms\n[Thread-3] Search  took: 10203ms\n[Thread-2] Search  took: 10360ms\n[Thread-1] Search  took: 10406ms\n[Thread-0] Search  took: 10719ms",
    "attachments": {
        "yad.zip": "https://issues.apache.org/jira/secure/attachment/12384230/yad.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-06-18T21:02:54+0000",
            "content": "How many threads were used to do this test?\n\nBecause it is usually recommended to reuse the IndexSearcher\nYes (actually the IndexReader is the important part to cache and re-use).\nBecause of memory usage associated with an IndexReader, it would be much better to improve or fix multi-threaded behavior rather than use multiple IndexReaders. ",
            "author": "Yonik Seeley",
            "id": "comment-12606094"
        },
        {
            "date": "2008-06-18T21:06:49+0000",
            "content": "The above results were created running four threads. ",
            "author": "Rene Schwietzke",
            "id": "comment-12606095"
        },
        {
            "date": "2008-11-17T10:29:39+0000",
            "content": "Dup of LUCENE-1329 (readOnly IndexReader) and LUCENE-753 (NIOFSDirectory), at least on non-Windows platforms.\n\nBased on this user report it seems like sharing an IndexReader across multiple threads in fact gives better performance than thread-private IndexReader instances:\n\nhttp://www.nabble.com/IndexSearcher-and-multi-threaded-performance-td20449375.html ",
            "author": "Michael McCandless",
            "id": "comment-12648125"
        }
    ]
}