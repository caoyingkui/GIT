{
    "id": "SOLR-1591",
    "title": "XMLWriter#writeAttr silently ignores null attribute values",
    "details": {
        "affect_versions": "1.1.0",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "Response Writers"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "XMLWriter#writeAttr checks for val == null, and if so, does nothing. Instead of doing nothing, it could leverage its method signature, and throw an IOException declaring that the value provided is null. Patch, attached.",
    "attachments": {
        "SOLR-1591.Mattmann.112209.patch.txt": "https://issues.apache.org/jira/secure/attachment/12425794/SOLR-1591.Mattmann.112209.patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781292",
            "date": "2009-11-23T03:25:17+0000",
            "content": "\n\tleft priority as default (which is Major). Probably a Minor bug.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12781293",
            "date": "2009-11-23T03:35:00+0000",
            "content": "This actually changes the functionality though... one could also think of it as \"null\" being a valid attribute value to pass, and the encoding of that shall be to leave it out entirely.  I don't really know/remember if it's used that way or not, but it's safest to assume that it is. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781294",
            "date": "2009-11-23T03:46:50+0000",
            "content": "I don't get it. If someone passes in a null attribute, this method does nothing. It simply returns. What's the point? You don't get any feedback it's null in that case even and it just wastes a function call? I actually ran into this while trying to write XML output for this georss stuff (accidentally passed in a null ns attr and SOLR was all quiet on the western front...) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12781298",
            "date": "2009-11-23T04:14:55+0000",
            "content": "Implementing a null check in one place can be better than implementing it in many.\n\n\nString fooVal = map.get(\"foo\");\nif (fooVal  != null) {\n  writeAttr(\"foo\", fooVal);\n}\n\nString barVal= map.get(\"bar\");\nif (barVal!= null) {\n  writeAttr(\"bar\", barVal);\n}\n...\n\n\n\nvs\n\n\nwriteAttr(\"foo\", map.get(\"foo\"));\nwriteAttr(\"foo\", map.get(\"bar\"));\n...\n\n\n\nI've added the following javadoc to clarify:\n/** Writes the XML attribute name/val. A null val means that the attribute is missing */ "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12799604",
            "date": "2010-01-13T06:24:38+0000",
            "content": "Hey Yonik:\n\nThanks for your last comment, but I'm still confused. This is a wasted method call. At the very least, the method should log a message saying \"a null attribute was attempted to be written\". Otherwise you have no record that the function was even called at all, which makes it hard to debug and track things down. I'd favor an exception to be thrown and a null check explicitly (at the expense of the additional lines of code) since it's more verbose and explicit rather than implicit.\n\nThoughts? Anyone?\n\nCheers,\nChris "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12799617",
            "date": "2010-01-13T06:45:36+0000",
            "content": "I'd favor an exception to be thrown \n\nnot required. This works as designed.  we just need enough javadocs to tell it clearly.\n "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12799621",
            "date": "2010-01-13T06:48:15+0000",
            "content": "It may work as designed Noble, but as designed, it's a wasted function call. SOLR is all about performance. Why waste a function call here? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12799627",
            "date": "2010-01-13T07:04:35+0000",
            "content": "Why waste a function call here?\n\n\tnull values are rare .optimizing for cornercases is not a good idea\n\tthe cost of a function call is almost zilch. it is not even measurable\n\n "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12799628",
            "date": "2010-01-13T07:11:16+0000",
            "content": "Hey Noble:\n\nHere are the disadvantages:\n\n\n\n\tnull values are rare .optimizing for cornercases is not a good idea\n\n\n\nIt's not a corner case: much of the SOLR XML response calls this function for a null value (e.g., any tag without an explicit \"name\" attribute, which are e.g., all the docs in a result set, which can be large, depending on the start/end row params).\n\n\n\n\tthe cost of a function call is almost zilch. it is not even measurable\n\n\n\ncost(function) > cost(comparison)\n\nCheers,\nChris\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12799779",
            "date": "2010-01-13T15:12:56+0000",
            "content": "Thanks for your last comment, but I'm still confused.\n\nshrugs - the example I gave was meant to show how defining the function to work for \"null\" can simplify code that calls the function.  What didn't you understand about that?\n\nAt the very least, the method should log a message saying \"a null attribute was attempted to be written\". \n\nNo, not if the function is well defined for a null value.\n\nAnd if we moved the null check to the callers, I'd argue that the null check should be entirely left out of writeAttr - skip the extra code and let the NPE happen naturally. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12799784",
            "date": "2010-01-13T15:21:36+0000",
            "content": "\nshrugs - the example I gave was meant to show how defining the function to work for \"null\" can simplify code that calls the function. What didn't you understand about that?\n\nWell I understood your comment I was just confused as to how it's any better I guess. You showed this as a simplification that having the silently ignored null allows:\n\n\nwriteAttr(\"foo\", map.get(\"foo\"));\nwriteAttr(\"foo\", map.get(\"bar\"));\n\n\n\nAgreed, it's a bit prettier than this:\n\n\nString fooVal = map.get(\"foo\");\nif (fooVal  != null) {\n  writeAttr(\"foo\", fooVal);\n}\n\nString barVal= map.get(\"bar\");\nif (barVal!= null) {\n  writeAttr(\"bar\", barVal);\n}\n...\n\n\n\nBut what about this?\n\n\nif(map.get(\"foo\")) != null writeAttr(\"foo\", map.get(\"foo\"));\nif(map.get(\"bar\")) != null writeAttr(\"bar\", map.get(\"bar\"));\n\n\n\n\nNo, not if the function is well defined for a null value.\n\nIt can be as well defined as you'd like but in the end it's a no-op and a waste, and more importantly it's a silent waste, right?\n\n\nAnd if we moved the null check to the callers, I'd argue that the null check should be entirely left out of writeAttr - skip the extra code and let the NPE happen naturally.\n\n+1 to this. What do you think?\n\nCheers,\nChris\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12799787",
            "date": "2010-01-13T15:29:39+0000",
            "content": "\nBut what about this?\n\nif(map.get(\"foo\")) != null writeAttr(\"foo\", map.get(\"foo\"));\nif(map.get(\"bar\")) != null writeAttr(\"bar\", map.get(\"bar\"));\n\nWhy are you arguing performance if you're going to look up the key twice?  It's an order of magnitude more expensive.\n\nThis is such a trivial issue though... we really shouldn't be wasting breath on it. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12799792",
            "date": "2010-01-13T15:37:15+0000",
            "content": "Why are you arguing performance if you're going to look up the key twice? It's an order of magnitude more expensive.\n\nJust copied it through from your example. Your point was to show it was a bit messier to do the check and my point was to show it's all about how you organize that messiness.\n\nThis is such a trivial issue though... we really shouldn't be wasting breath on it.\n\nFantastic point. You threw up a suggestion: \n\n\nAnd if we moved the null check to the callers, I'd argue that the null check should be entirely left out of writeAttr - skip the extra code and let the NPE happen naturally.\n\nThat sounds like a plan, +1 to that. Then, we can stop wasting time on this and move on to (more) interesting stuff... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835702",
            "date": "2013-11-30T13:21:21+0000",
            "content": "2013 Old JIRA cleanup "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15544126",
            "date": "2016-10-04T02:37:05+0000",
            "content": "Case was accidentally reopened but not re-closed back in 2013 "
        }
    ]
}