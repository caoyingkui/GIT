{
    "id": "LUCENE-8296",
    "title": "PendingDeletes shouldn't write to live docs that it shared",
    "details": {
        "components": [],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "PendingDeletes has a markAsShared mechanism that allow to make sure that the latest livedocs are not going to receive more updates. But it is not always used, and I was able to verify that in some cases we end up with readers whose live docs disagree with the number of deletes. Even though this might not be causing bugs, it feels dangerous to me so I think we should consider always marking live docs as shared in #getLiveDocs.",
    "attachments": {
        "LUCENE-8296.patch": "https://issues.apache.org/jira/secure/attachment/12922063/LUCENE-8296.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16464009",
            "author": "Adrien Grand",
            "content": "Here is a patch. ",
            "date": "2018-05-04T15:18:56+0000"
        },
        {
            "id": "comment-16465190",
            "author": "Simon Willnauer",
            "content": "\u00a0I think this is mostly a relict from before I started refactoring ReadersAndUpdates. I would love to even go further and down the road make the returned Bits instance immutable. I think we should have a very very simple base class that FixedBitSet can extend that knows how to read from the array. This way we know nobody ever mutates it. Today you can just cast the liveDocs from a NRT reader and change it's private instance. I am going to look into this unless anybody beats me.\n\nOne thing that I am feel is missing is an explicit test that the returned bits don't change in subsequent modifications.\n\n+1 to the change!\n\n\u00a0\n\n\u00a0 ",
            "date": "2018-05-06T15:03:43+0000"
        },
        {
            "id": "comment-16467842",
            "author": "Adrien Grand",
            "content": "I think we should have a very very simple base class that FixedBitSet can extend that knows how to read from the array.\n\nBecause of LUCENE-4892 I'm interested in giving codecs a way to turn mutable bits into a read-only instance. The live docs impl in LUCENE-4892 wraps a hash set that is upgraded to a bit set when deleted docs become dense, so this would help return the wrapped bits and remove an unnecessary layer. I believe it could help not expose mutable bits with the default codec too.\n\nOne thing that I am feel is missing is an explicit test that the returned bits don't change in subsequent modifications.\n\nThe changes to TestPendingDeletes test this. This test deletes a document, checks that the previously retrieved live docs show the doc as live, then retrieves live docs again and make sure it is deleted. ",
            "date": "2018-05-08T19:17:24+0000"
        },
        {
            "id": "comment-16468516",
            "author": "Simon Willnauer",
            "content": "cool LGTM +1 to commit ",
            "date": "2018-05-09T07:46:52+0000"
        },
        {
            "id": "comment-16468847",
            "author": "ASF subversion and git services",
            "content": "Commit 7873cf845e1d513026b6836769b7cbd4d237c2aa in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7873cf8 ]\n\nLUCENE-8296: PendingDeletes may no longer write to live docs after they are shared. ",
            "date": "2018-05-09T13:40:52+0000"
        },
        {
            "id": "comment-16468878",
            "author": "ASF subversion and git services",
            "content": "Commit 52e72467bb2176c1e7bc9e0d75dd71a8582dc67e in lucene-solr's branch refs/heads/branch_7x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=52e7246 ]\n\nLUCENE-8296: PendingDeletes may no longer write to live docs after they are shared. ",
            "date": "2018-05-09T13:57:14+0000"
        }
    ]
}