{
    "id": "SOLR-8264",
    "title": "Date boosting losing to constant value in min function when date value is null",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "I am following https://wiki.apache.org/solr/FunctionQuery#Date_Boosting for date boosting. This works great except when the date field is non-existent and I attempt to set a maximum value. As I understand it, a non-existent date field will default to the start of the epoch for functions. And so the following boost works even though date_s doesn't exist for the particular record:\n\n\nrecip(ms(NOW/YEAR,date_s),3.16e-11,1,1)\n\n0.021798734 = 1.0/(3.16E-11*float(ms(const(1420070400000),date(date_s)=null))+1.0)\n\n\n\nHowever, when I try to apply a min function, the constant value is always selected whether it is greater or less than the recip calculation: \n\n\nmin(1,recip(ms(NOW/YEAR,date_s),3.16e-11,1,1))\n\n1.0 = min(const(1),1.0/(3.16E-11*float(ms(const(1420070400000),date(date_s)=null))+1.0))\n\n\n\nI am currently getting around the issue by supplying a default value for the field in my schema.xml.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-09T21:21:19+0000",
            "author": "Hoss Man",
            "content": "This sounds like the correct behavior since Lucene/Solr 5.0 fixed bugs in several value sources.\n\nAs noted in the 5.0 upgrade instructions...\n\n\n* Bugs fixed in several ValueSource functions may result in different behavior in \n  situations where some documents do not have values for fields wrapped in other value \n  sources.  Users who want to preserve the previous behavior may need to wrap fields\n  in the \"def()\" function. Example: changing \"fl=sum(fieldA,fieldB)\" to \n  \"fl=sum(def(fieldA,0.0),def(fieldB,0.0))\".  See LUCENE-5961 for more details.\n\n\n\nAnd so the following boost works even though date_s doesn't exist for the particular record:\n\n...that's because when not wrapped in a function like min or max, recip (wrapping ms) gives you a \"fake\" value based on the implicit assumption that a missing value should be treated a certain way ... but the \"exists/missing\" metadata is propagated up, and min/max know to choose \"real\" values when available.\n\nWrapping your \"ms\" in a \"def()\" call with a default of \"0\" should give you what you're looking for. ",
            "id": "comment-14997376"
        }
    ]
}