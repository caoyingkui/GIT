{
    "id": "SOLR-6530",
    "title": "Commits under network partition can put any node in down state",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.10.2",
            "5.0",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Commits are executed by any node in SolrCloud i.e. they're not routed via the leader like other updates. \n\n\n\tSuppose there's 1 collection, 1 shard, 2 replicas (A and B) and A is the leader\n\tSuppose a commit request is made to node B during a time where B cannot talk to A due to a partition for any reason (failing switch, heavy GC, whatever)\n\tB fails to distribute the commit to A (times out) and asks A to recover\n\tThis was okay earlier because a leader just ignores recovery requests but with leader initiated recovery code, B puts A in the \"down\" state and A can never get out of that state.\n\n\n\ntl;dr; During network partitions, if enough commit/optimize requests are sent to the cluster, all the nodes in the cluster will eventually be marked as \"down\".",
    "attachments": {
        "SOLR-6530.patch": "https://issues.apache.org/jira/secure/attachment/12669420/SOLR-6530.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14137386",
            "date": "2014-09-17T15:29:05+0000",
            "content": "A trivial test which demonstrates the problem by partitioning the leader from a replica and sending a commit to the replica which then marks the leader as \"down\". "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14139086",
            "date": "2014-09-18T15:54:44+0000",
            "content": "The fix is trivial. I added checks to make sure that the current core is a leader before LIR code is executed.\n\nThere is an isLeader variable in DUP which I thought about using but it is true by default and not updated for commits. I think the whole leader logic thing is very trappy and it needs some refactoring. I'll try to tackle that later in a separate issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14139107",
            "date": "2014-09-18T16:07:45+0000",
            "content": "Something like this came up in another JIRA issue as well. Cannot remember which. I said it there as well, but beyond this improvement, I don't think it makes a lot of sense for someone to ask for a recover because a commit failed. There should be better / cheaper options. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14139131",
            "date": "2014-09-18T16:18:37+0000",
            "content": "I don't think it makes a lot of sense for someone to ask for a recover because a commit failed. There should be better / cheaper options.\n\nI agree that commits shouldn't force recovery. What do you suggest? Should we specifically disallow commit requests from executing the LIR code? "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14139170",
            "date": "2014-09-18T16:59:06+0000",
            "content": "Think I just came across another version of this:\n\n1. A is leader, and is distributing docs to B\n2. A gets a large GC pause, during which B takes over as leader\n3. A wakes up again, continues to send docs from DistributedUpdateProcessor, but now gets errors in response because B is refusing the updates (as they're marked as FROMLEADER, and B is now the leader)\n4. In DUP.doFinish(), A finds that it has a bunch of errors from B, and so it attempts to put B into recovery, with the same result as point 4 in the issue description "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14139180",
            "date": "2014-09-18T17:08:08+0000",
            "content": "In general, its leader initiated recovery, so if I am not the leader, I shouldn't be doing the logic for any operation. That's probably just commit for now since that's not forwarded to the leader, but if there's any other operation in the future which doesn't have to be coordinated by the leader, that could use the same logic? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14140056",
            "date": "2014-09-19T06:12:35+0000",
            "content": "Here's a better fix which uses the global (ZK) state instead of the local before executing the LIR code. From my reading of the code, the local isLeader variable in CloudDescriptor is not unset in all cases. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14140068",
            "date": "2014-09-19T06:21:14+0000",
            "content": "Alan Woodward - That sounds right. This fix will help to a great extent but it isn't perfect. I think we may need to add some intelligence to the overseer to eliminate invalid state transitions to the cluster state. Also SOLR-6538 can help in resolving such issues e.g. a leader being set to down state isn't aware of it's state and will never try to get out of it.\n\nRamkumar Aiyengar - Yes, you're right that it could happen. We need to refactor this code such that these rules are properly defined and enforced. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14141366",
            "date": "2014-09-19T21:51:42+0000",
            "content": "My last fix was not complete. Checking if I am the leader is not enough because commits are broadcast to the entire collection without caring for the shards. So it is still possible that a core which is a leader of shard2 may run LIR code for a leader/replica of another shard.\n\nI've added a test case to reproduce this. The fix is again simple - we just don't run recovery for commits at all. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14141894",
            "date": "2014-09-20T09:33:47+0000",
            "content": "Should LIR then be checked for: I am a leader and I am the leader for replica X which is not accessible? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14141903",
            "date": "2014-09-20T09:56:23+0000",
            "content": "bq, Should LIR then be checked for: I am a leader and I am the leader for replica X which is not accessible?\n\nThat will be done by the initial fix that I made. But that's not enough for commits because it is sent to all shards. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14141960",
            "date": "2014-09-20T13:07:42+0000",
            "content": "Okay now i got what you are saying.  That's a good idea. I'll fix.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14155051",
            "date": "2014-10-01T16:22:16+0000",
            "content": "Folding in the change suggested by Ramkumar. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14155062",
            "date": "2014-10-01T16:27:23+0000",
            "content": "Patch with the right test. I accidentally included an old version of the test with my last patch. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14156299",
            "date": "2014-10-02T10:23:00+0000",
            "content": "The last patch's test had a bug. It wasn't using the right proxies map. This is fixed now. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14156375",
            "date": "2014-10-02T11:08:25+0000",
            "content": "Here's a better patch which removes the redundant isLeader check and also logs if the error'd node is not in the replica list of the current replica. All tests passed. This is ready. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14156388",
            "date": "2014-10-02T11:31:17+0000",
            "content": "Commit 1628945 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1628945 ]\n\nSOLR-6530: Commits under network partitions can put any node in down state "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14157646",
            "date": "2014-10-03T03:41:02+0000",
            "content": "Commit 1629107 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1629107 ]\n\nSOLR-6530: Reopen the socket proxy after test finishes "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14157648",
            "date": "2014-10-03T03:43:43+0000",
            "content": "Commit 1629108 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1629108 ]\n\nSOLR-6530: Commits under network partitions can put any node in down state "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14173525",
            "date": "2014-10-16T08:24:46+0000",
            "content": "Commit 1632236 from shalin@apache.org in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1632236 ]\n\nSOLR-6530: Commits under network partitions can put any node in down state "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14173527",
            "date": "2014-10-16T08:26:30+0000",
            "content": "This is fixed. Thanks everyone! "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14178012",
            "date": "2014-10-21T06:10:22+0000",
            "content": "Commit 1633276 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1633276 ]\n\nSOLR-6530: Protect against NPE when there are no live replicas "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14178013",
            "date": "2014-10-21T06:11:09+0000",
            "content": "Commit 1633277 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1633277 ]\n\nSOLR-6530: Protect against NPE when there are no live replicas "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14178016",
            "date": "2014-10-21T06:12:18+0000",
            "content": "Commit 1633278 from shalin@apache.org in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1633278 ]\n\nSOLR-6530: Protect against NPE when there are no live replicas "
        }
    ]
}