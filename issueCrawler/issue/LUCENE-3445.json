{
    "id": "LUCENE-3445",
    "title": "Add SearcherManager, to manage IndexSearcher usage across threads and reopens",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This is a simple helper class I wrote for Lucene in Action 2nd ed.\nI'd like to commit under Lucene (contrib/misc).\n\nIt simplifies using & reopening an IndexSearcher across multiple\nthreads, by using IndexReader's ref counts to know when it's safe\nto close the reader.\n\nIn the process I also factored out a test base class for tests that\nwant to make lots of simultaneous indexing and searching threads, and\nfixed TestNRTThreads (core), TestNRTManager (contrib/misc) and the new\nTestSearcherManager (contrib/misc) to use this base class.",
    "attachments": {
        "LUCENE-3445.patch": "https://issues.apache.org/jira/secure/attachment/12495410/LUCENE-3445.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-21T18:43:20+0000",
            "content": "This is great Mike !\n\nI reviewed SearcherManager and have a comment about the TODO on whether or not to call warm in the ctor. If an extending class relies on some internal members to be initialized before warm() can safely be called, then this will lead to exceptions. I think that warm() should not be called in the ctor, or at least add a ctor which accepts a boolean doWarm, while the other ctors call it with 'true'.\n\nCalling warm() in the ctor is useful if one wants to warm the IndexSearcher instance before SearcherManager is ready for use. So perhaps an additional ctor with the boolean gives the most flexibility.\n\nAlso, I remember there was a ctor which took IndexWriter, to allow for an NRT-SearcherManager. What happened to it?  ",
            "author": "Shai Erera",
            "id": "comment-13109768"
        },
        {
            "date": "2011-09-21T20:51:16+0000",
            "content": "Mike, would it be possible to merge the NRT and SearcherManager into one class / manager or that maybe both implement the same interface? ",
            "author": "Simon Willnauer",
            "id": "comment-13109869"
        },
        {
            "date": "2011-09-21T22:51:11+0000",
            "content": "Maybe we just shouldn't ever call warm from the ctor?  Caller can easily call warm themselves... we can just jdoc this.\n\nAlso, I remember there was a ctor which took IndexWriter, to allow for an NRT-SearcherManager. What happened to it?\n\nRight, I removed it because we have NRTManager now.\n\nMike, would it be possible to merge the NRT and SearcherManager into one class / manager or that maybe both implement the same interface?\n\nRight, they used to be merged.... we could consider merging them again?\n\nNRTManager is more feature-full, though, because it offers add/updateDocument(s) APIs that invoke the writer but return a [long] gen, which you can then turnaround and pass to .get() to ensure the returned searcher includes those changes.  SearcherManager doesn't have notion... unless we somehow tie in the IndexReader.getVersion() somehow?  I'm torn... they seem different enough that maybe they should remain separate.  Plus, users usually know quite strongly if they use NRT or not and could pick the right manager accordingly... ",
            "author": "Michael McCandless",
            "id": "comment-13112195"
        },
        {
            "date": "2011-09-22T06:43:24+0000",
            "content": "Caller can easily call warm themselves\n\nwarm() is protected. If you don't want to extend SearcherManager, how would you ensure it's warmed-up after creation?\n\nI removed it because we have NRTManager now\n\nOk, I wasn't aware of that. ",
            "author": "Shai Erera",
            "id": "comment-13112363"
        },
        {
            "date": "2011-09-22T21:07:20+0000",
            "content": "warm() is protected. If you don't want to extend SearcherManager, how would you ensure it's warmed-up after creation?\n\nWell, warm() is a no-op if you don't extend SearcherManager, so, if you extend, you'd impl warm, and then in your ctor you should call warm on the initial searcher if need be.  Definitely trappy so we should jdoc that subclass's ctor must handle warming initial searcher.... ",
            "author": "Michael McCandless",
            "id": "comment-13112910"
        },
        {
            "date": "2011-09-22T21:16:09+0000",
            "content": "Well, warm() is a no-op if you don't extend SearcherManager, so, if you extend, you'd impl warm, and then in your ctor you should call warm on the initial searcher if need be. Definitely trappy so we should jdoc that subclass's ctor must handle warming initial searcher....\n\nit seems pretty trappy to have this in the ctor though. Since this is a noop by default and it requires subclassing to do something with it it might be worth introducing a SearchWarmer interface and simply pass this interface into the ctor ie. have two ctors where by default we pass a noop warmer? ",
            "author": "Simon Willnauer",
            "id": "comment-13112918"
        },
        {
            "date": "2011-09-22T21:32:20+0000",
            "content": "I like that approach; we can then use that same interface for passing to NRTManager.  I'll do that. ",
            "author": "Michael McCandless",
            "id": "comment-13112930"
        },
        {
            "date": "2011-09-23T16:57:45+0000",
            "content": "New patch, adds a SearcherWarmer interface (also in contrib/misc), and switches Searcher/NRTManager to accepting a warmer to their ctors instead of subclassing.\n\nI think it's ready for commit! ",
            "author": "Michael McCandless",
            "id": "comment-13113559"
        },
        {
            "date": "2011-09-27T20:40:42+0000",
            "content": "What are the different use cases for this and NRTManager? ",
            "author": "Greg Steffensen",
            "id": "comment-13115900"
        },
        {
            "date": "2011-09-27T21:39:36+0000",
            "content": "I have a couple of smallish improvements to SearcherManager making the hottest method in SM non-blocking. I added a tryIncRef to index reader that makes is easier to work with IR refcounts in a non-blocking fashion. I also renamed SM#get to SM#acquire which seems to be more clear about what happens here (also kind of stronger than get - so you'd better release it). \n ",
            "author": "Simon Willnauer",
            "id": "comment-13115954"
        },
        {
            "date": "2011-09-27T21:49:06+0000",
            "content": "+1 \u2013 changes look great!  Nice to have .acquire be lock free. ",
            "author": "Michael McCandless",
            "id": "comment-13115957"
        },
        {
            "date": "2011-09-28T08:02:31+0000",
            "content": "Committed the last patch in revision 1176772. Thanks for review mike. ",
            "author": "Simon Willnauer",
            "id": "comment-13116277"
        },
        {
            "date": "2011-09-28T15:52:23+0000",
            "content": "backported to 3.x in rev. 1176933 ",
            "author": "Simon Willnauer",
            "id": "comment-13116560"
        },
        {
            "date": "2011-09-28T17:07:39+0000",
            "content": "Thanks Simon! ",
            "author": "Michael McCandless",
            "id": "comment-13116608"
        },
        {
            "date": "2011-11-27T12:29:29+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157772"
        }
    ]
}