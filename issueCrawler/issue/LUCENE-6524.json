{
    "id": "LUCENE-6524",
    "title": "Create an IndexWriter from an already opened NRT or non-NRT reader",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "I'd like to add a new ctor to IndexWriter, letting you start from an already\nopened NRT or non-NRT DirectoryReader.  I think this is a long missing\nAPI in Lucene today, and we've talked in the past about different ways\nto fix it e.g. factoring out a shared reader pool between writer and reader.\n\nOne use-case, which I hit in LUCENE-5376: if you have a read-only\nindex, so you've opened a non-NRT DirectoryReader to search it, and\nthen you want to \"upgrade\" to a read/write index, we don't handle that\nvery gracefully now because you are forced to open 2X the\nSegmentReaders.\n\nBut with this API, IW populates its reader pool with the incoming\nSegmentReaders so they are shared on any subsequent NRT reopens /\nsegment merging / deletes applying, etc.\n\nAnother (more expert) use case is allowing rollback to an NRT-point.\nToday, you can only rollback to a commit point (segments_N).  But an\nNRT reader also reflects a valid \"point in time\" view of the index (it\njust doesn't have a segments_N file, and its ref'd files are not\nfsync'd), so with this change you can close your old writer, open a\nnew one from this NRT point, and revert all changes that had been done\nafter the NRT reader was opened from the old writer.",
    "attachments": {
        "LUCENE-6524.patch": "https://issues.apache.org/jira/secure/attachment/12737514/LUCENE-6524.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14572423",
            "author": "Michael McCandless",
            "date": "2015-06-04T09:16:42+0000",
            "content": "Initial work-in-progress patch ... a few nocommits, but the core\nidea seems to work!\n\nThis patch also includes the fixes from LUCENE-6523.\n\nI had to add a restriction for the \"open from NRT reader\" case: you\ncan't do this if the last commit this NRT reader sees has been\ndeleted, e.g. if the old IndexWriter had done a commit after the NRT\nreader was opened.  In this case there is no starting commit for\nthe new writer to fall back on, which makes things tricky ... "
        },
        {
            "id": "comment-14572676",
            "author": "Robert Muir",
            "date": "2015-06-04T12:26:51+0000",
            "content": "\nAnother (more expert) use case is allowing rollback to an NRT-point.\n\nThis really needs to be a new method if added at all.\n\nWe should not mess with the semantics of commit/rollback.  "
        },
        {
            "id": "comment-14574530",
            "author": "Michael McCandless",
            "date": "2015-06-05T14:08:37+0000",
            "content": "This really needs to be a new method if added at all.\n\nWait: the only thing I'm adding here is a new constructor for IndexWriter.  I'm not touching IndexWriter.rollback ...\n\nMaybe I should not have used the term \"rollback\" in that use case: it is a loaded term! "
        },
        {
            "id": "comment-14577878",
            "author": "Michael McCandless",
            "date": "2015-06-08T21:28:37+0000",
            "content": "New patch, folding in trunk changes, fixing all nocommits, beefing up the tests... "
        },
        {
            "id": "comment-14580330",
            "author": "Michael McCandless",
            "date": "2015-06-10T09:59:27+0000",
            "content": "I think the last patch is ready! "
        },
        {
            "id": "comment-14580343",
            "author": "Robert Muir",
            "date": "2015-06-10T10:13:57+0000",
            "content": "We don't need lock sleeping in a new ctor. There is nothing to be backwards compatible with. Please remove that! "
        },
        {
            "id": "comment-14580346",
            "author": "Robert Muir",
            "date": "2015-06-10T10:17:11+0000",
            "content": "\npublic IndexWriter(DirectoryReader r, IndexWriterConfig conf) throws IOException {\n    ...\n    if (r instanceof StandardDirectoryReader == false) {\n      throw new IllegalArgumentException(\"the provided DirectoryReader must be a StandardDirectoryReader but got \" + r);\n    }\n\n\n\nno \n\nPlease change the parameter type instead. "
        },
        {
            "id": "comment-14580348",
            "author": "Robert Muir",
            "date": "2015-06-10T10:20:46+0000",
            "content": "Please fix these typos:\n\n\n// Note that you cannot do this if the old writer had done a commiter after this NRT reader was opened.\n...\n// NOTE: this is correct even for an NRT reader becuase\n...\n\n\n\nWhy is there no integration in randomindexwriter? "
        },
        {
            "id": "comment-14580362",
            "author": "Robert Muir",
            "date": "2015-06-10T10:31:28+0000",
            "content": "\nAnother (more expert) use case is allowing rollback to an NRT-point.\nToday, you can only rollback to a commit point (segments_N). But an\nNRT reader also reflects a valid \"point in time\" view of the index (it\njust doesn't have a segments_N file, and its ref'd files are not\nfsync'd), so with this change you can close your old writer, open a\nnew one from this NRT point, and revert all changes that had been done\nafter the NRT reader was opened from the old writer.\n\nI'm still completely hung up on this. I don't think we should offer features that require additional components like transaction logs to be safe, which seems what this is geared at? Its also confusing if you later do a real commit, will we fsync the right stuff? Is that really guaranteed or just a happenchance of how we removed the stale files map?\n\nNet/Net I'm +/- 0 on this patch. I won't block it but I think its the wrong direction. "
        },
        {
            "id": "comment-14580368",
            "author": "Robert Muir",
            "date": "2015-06-10T10:36:30+0000",
            "content": "I am however, against the current implementation of a second IW ctor.\n\nWe already have IWC taking a Commit, that is enough... please deduplicate this mess  "
        },
        {
            "id": "comment-14580377",
            "author": "Robert Muir",
            "date": "2015-06-10T10:47:43+0000",
            "content": "Today, there is only one IW ctor. This has some advantages, at the disadvantage of a totally overengineered IWConfig instead.\n\nPlease choose one, I do not want both.\n\nHaving two ctors is incredibly expensive on this code. This feature is flat out not worth that cost. "
        },
        {
            "id": "comment-14580543",
            "author": "Robert Muir",
            "date": "2015-06-10T13:55:22+0000",
            "content": "Today, NRT readers already return an abstraction of IndexCommit (via StandardDirectoryReader.getIndexCommit). And you can already pass IndexCommit to IndexWriterConfig.setIndexCommit to tell IW to start from there. So I think we just need to fix the NRT case?\n\nMaybe its as simple as adding some package-private methods to IndexCommit, so IW would \"reuse\" StandardDirectoryReader's ReaderCommit (somehow it would return itself). We might need to think about how to force an incRef() too up-front, because of reader pooling. It might be cleaner to move \"get the current fieldinfos\" to this thing as well. \n\nThis would really clean up my concerns about the API and additional IW ctors. Hopefully it would be simpler... "
        },
        {
            "id": "comment-14580935",
            "author": "Michael McCandless",
            "date": "2015-06-10T18:40:06+0000",
            "content": "Thanks Rob, I'll explore that simpler API. "
        },
        {
            "id": "comment-14590725",
            "author": "Michael McCandless",
            "date": "2015-06-17T22:15:46+0000",
            "content": "New patch, cutting over to new package private IWC.getIndexCommit().getReader() API to pass the reader to IW on init. "
        },
        {
            "id": "comment-14590918",
            "author": "Robert Muir",
            "date": "2015-06-18T00:24:36+0000",
            "content": "I think this is much cleaner, thank you for reworking it. "
        },
        {
            "id": "comment-14713347",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:30+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}