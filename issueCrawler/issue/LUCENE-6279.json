{
    "id": "LUCENE-6279",
    "title": "3.x -> 4.x .si upgrade should not be tricked by leftover upgrade marker file",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "4.10.5"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "Today when you do the first IW.commit to a 3.x index from Lucene 4.x, we go\nthrough a per-segment upgrade process when writing the next segments_N\nfile, writing .si files for each segment if we didn't already do so.\n\nHowever, this process can be fooled by a leftover _N_upgraded.si\nfile, in case the app above Lucene wasn't careful and reused a\ndirectory that had leftover files... I think we can make this more\nrobust.",
    "attachments": {
        "LUCENE-6279.patch": "https://issues.apache.org/jira/secure/attachment/12700067/LUCENE-6279.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14331962",
            "author": "Michael McCandless",
            "date": "2015-02-22T00:17:29+0000",
            "content": "Test case showing the issue (applies to 4.10.x); the test fails with this:\n\n\njava.io.FileNotFoundException: _0.si in dir=RAMDirectory@3833bc67 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@69b2486e\n\tat __randomizedtesting.SeedInfo.seed([1598963DC9C89C28:2D64E0AACDD85FF7]:0)\n\tat org.apache.lucene.store.MockDirectoryWrapper.openInput(MockDirectoryWrapper.java:603)\n\tat org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader.read(Lucene3xSegmentInfoReader.java:106)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:358)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:454)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:906)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:752)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:457)\n\tat org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:414)\n\tat org.apache.lucene.util.TestUtil.checkIndex(TestUtil.java:207)\n\tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:724)\n\tat org.apache.lucene.index.TestBackwardsCompatibility3x.testLeftoverUpgradedFile(TestBackwardsCompatibility3x.java:1038)\n\n "
        },
        {
            "id": "comment-14331963",
            "author": "Michael McCandless",
            "date": "2015-02-22T00:21:27+0000",
            "content": "I've thought about a couple ways to fix this.\n\nWe could fix SIS to record on read that it was pre-4.0, and then on write it upgrades any 3.x segments.  This is kinda a big change, though, and I don't get why we do it today on every commit ... is there any way for a 3.x segment to sneak in to a 4.x SIS un-upgraded?  IW.addIndexes(Dir[]) writes upgrades .si ...\n\nA less scary change would be to just check the SI.files() to see whether the .si file is in there; if it is, it was already upgraded.  Then we could remove the marker file entirely.\n\nYet another maybe even less scary option would be to keep writing the marker file, but check if it's already in SI.files() (instead of trying to open it from the filesystem) to see whether we already upgraded... "
        },
        {
            "id": "comment-14332165",
            "author": "Robert Muir",
            "date": "2015-02-22T13:46:54+0000",
            "content": "Hmm this test is obviously abusive? "
        },
        {
            "id": "comment-14332449",
            "author": "Michael McCandless",
            "date": "2015-02-23T00:26:22+0000",
            "content": "Hmm this test is obviously abusive?\n\nIt is abusive: it can happen if the caller restores an index into a \"dirty\" directory already containing these marker files, which is obviously not a good idea.\n\nIt does make me nervous to change this back compat logic, but then again I don't like that it currently relies on a file existence check, when it already has its own more reliable internal state making it clear whether the upgrade was done. "
        },
        {
            "id": "comment-14333311",
            "author": "Robert Muir",
            "date": "2015-02-23T13:39:10+0000",
            "content": "The only real viable solution is for 3.x si to be a per-commit file, or some very invasive change.\n\nI don't think we should change this stuff in this way, in a bugfix release, because of abuse cases. Seems like it would be easier to just fix the abusers. "
        },
        {
            "id": "comment-14333318",
            "author": "Michael McCandless",
            "date": "2015-02-23T13:49:28+0000",
            "content": "OK I agree... "
        },
        {
            "id": "comment-14334084",
            "author": "Michael McCandless",
            "date": "2015-02-23T23:34:33+0000",
            "content": "OK I think I found a nice low-risk change, so we don't rely on File.exists to decide when to write the .si for a 3.x segment: I just inserted an additional check, that we see this marker file name in our si.files() already, and if it's not there, we always write it. "
        },
        {
            "id": "comment-14334094",
            "author": "Robert Muir",
            "date": "2015-02-23T23:43:18+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14335083",
            "author": "ASF subversion and git services",
            "date": "2015-02-24T16:56:47+0000",
            "content": "Commit 1662024 from Michael McCandless in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1662024 ]\n\nLUCENE-6279: don't let a leftover _N_upgraded.si file corrupt a 3.x index on first kiss from 4.x "
        }
    ]
}