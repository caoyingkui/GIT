{
    "id": "SOLR-11000",
    "title": "Changes made via AutoScalingHandler should be atomic",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Currently, AutoScalingHandler writes the result of each command to ZK individually. So if you send 3 commands in a payload, it will write them individually. We really should make it atomic so that the result of all the commands are persisted together or none at all.",
    "attachments": {
        "SOLR-11000.patch": "https://issues.apache.org/jira/secure/attachment/12876822/SOLR-11000.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-12T11:55:05+0000",
            "content": "This patch introduces the following changes:\n\n\tAutoScalingConfig is now immutable, with methods to facilitate creating modified copies. It also better models action configs.\n\tsome enums have been renamed for clarity. Both these and AutoScalingConfig bean have been moved to SolrJ.\n\tAutoScalingHandler now uses only AutoScalingConfig without manipulating JSON maps directly. It also updates ZK only once per request, even if several modifications were specified in the request.\n\ta few other places that directly manipulate JSON map of autoscaling.json have been replaced with AutoScalingConfig, some other still remain...\n\n ",
            "author": "Andrzej Bialecki",
            "id": "comment-16083865"
        },
        {
            "date": "2017-07-12T20:11:02+0000",
            "content": "Updated patch:\n\n\tmoved getAutoScalingConfig() from ZkController to ZkStateReader, and add a version where you can set a Watcher.\n\tconvert a few other uses of JSON maps so that they use AutoScalingConfig.\n\n ",
            "author": "Andrzej Bialecki",
            "id": "comment-16084600"
        },
        {
            "date": "2017-07-13T05:39:05+0000",
            "content": "Thanks Andrzej. I'm glad you got rid of the json maps. Just a few comments on the latest code on the branch:\n\n\tminor nit \u2013 AutoScalingHandler.handleRemoveTrigger \u2013 loop for removing all active listeners can be replaced by listeners.keySet().removeAll(activeListeners)\n\tminor nit - Unused listeners variable in handleSetListener\n\tThe way zkSetAutoScalingConfig is implemented is no longer correct. The loop used to read the latest from ZK, update it with the result of the operation being performed and then try to write the result using compare-and-set. If there is a BadVersionException, all the steps were tried again. Now it will just loop forever on a BadVersionException because the read from ZK part is never tried again. It'd be nice to add a test to exercise this path. I think it wasn't correct earlier too but it was bad in a different way (infinite loop vs incorrect data)\n\tIs the deep copy of jsonMap in the constructor of AutoScalingConfig still necessary? same for the parseInt call for version\n\n ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16085206"
        },
        {
            "date": "2017-07-13T15:41:54+0000",
            "content": "This patch fixes all issues from the review. In particular re. #4 it now loops retrying on BadVersionException - it keeps retrieving the latest config from ZK and re-applying the ops and updating until it succeeds (or other exception pops up).\n\nThanks Shalin for review! I'll merge this shortly with feature/autoscaling. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16085890"
        },
        {
            "date": "2017-07-14T00:40:57+0000",
            "content": "I don't think it is a good idea for the AutoScalingHandler to output intermediate ZK version numbers which are retried. It is just too much internal detail and may be confusing to the user. However, what can be useful is to write out the final ZK version once the write succeeds. Then, perhaps in the future, we can add optimistic concurrency to this API. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16086654"
        },
        {
            "date": "2017-11-08T06:58:41+0000",
            "content": "Commit ddf8b57ad656ee3362ba5392fe4310af06dd60d3 in lucene-solr's branch refs/heads/branch_7x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ddf8b57 ]\n\nSOLR-11000: Adding entry to CHANGES.txt in 7.1 section ",
            "author": "ASF subversion and git services",
            "id": "comment-16243467"
        }
    ]
}