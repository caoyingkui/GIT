{
    "id": "SOLR-10583",
    "title": "Add 'join' as a new type of domain change in JSON Facets",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Add support for a new (query) join option when specifying a domain for a JSON Facet.\n\nSuggested syntax...\n\n\n...\ndomain : { join : { from : field_foo,\n         \t      to : field_bar\n\t\t  }\n\t }",
    "attachments": {
        "SOLR-10583.patch": "https://issues.apache.org/jira/secure/attachment/12865598/SOLR-10583.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-28T18:16:06+0000",
            "content": "\nA while back someone asked me about the \"domain change\" idea in the JSON Facet code.  They had seen some blogs from yonik about use blockParent and blockChildren domain changes to facet on parent/child fields, and were wondering if the same sort of thing could work for a query join.\n\nI wasn't too familiar with any of this code, but poking around it seemed fairly straight forward.  (Except that my randomized test case ran into an interesting bug when the same join query was used in two diff facets: I hacked around this by forcing a non-caching wrapper around the queries, but still haven't gotten to the root cause)\n\n\nThe attached patch includes:\n\n\n\tcomplete code implementing this new domain change option\n\tModifications to TestJsonFacets to test the new join option w/similar data as the existing blockChildren and blockParent tests\n\ta fairly robust TestCloudJSONFacetJoinDomain that does randomized facet queries w/these join (sometimes + filter) domain changes and then verifies the result counts against test queries w/equivilent fq params\n\t\n\t\tcurrently only uses one shard...\n\t\t...and always requests a facet limit greater then the cardinality of the fields so that refinement is not an issue even if/when the test starts using multiple shards\n\t\n\t\n\ta very similar but greatly simplified TestCloudJSONFacet that does similar checks but only using filter domain changes\n\t\n\t\ti hacked this off of TestCloudJSONFacetJoinDomain when i first started getting weird test failures to try see if i could reproduce any weird failures with just the existing domain change code\n\t\n\t\n\n\n\nStill TODO (all pretty well captured in nocommits)...\n\n\n\tget to the bottom of the cache issue\n\t\n\t\tneed to do this first before improving the test to ensure nothing else \"breaks\" our garunteed failure in testBespoke\n\t\tsee nocommits in the code for ideas about possible root causes\n\t\n\t\n\tgenerate better errors if the join is malformed (ie: not a map, doesn't have both from and to specified\n\t\n\t\tor maybe: support the syntax join : \"field_name\" as syntax sugar for...\n\njoin : { from : \"field_name\", to : \"field_name\" }\n\n\n\t\n\t\n\tadd code+tests to ensure joining on numeric fields works\n\tfix the multipleValuesPerDocument logic and enhance the test so some fields are always single valued\n\tcleanup & refactor some of the code that uses JoinUtil\n\t\n\t\tis it as efficient as it can be?\n\t\tis there stuff we can share with ScoreJoinQParserPlugin?\n\t\n\t\n\trefactor the TestCloudJSONFacet & TestCloudJSONFacetJoinDomain duplication and make them use multi-shards\n\t\n\t\tFWIW: join queries might seem like an odd thing to worry about testing with multiple shards \u2013 but the usecases I have in mind can all leverage doc routing to ensure that all docs with identical values in the join field are co-located\n\t\n\t\n\tinvestigate the recent work/tests yonik's been doing on supporting refinement (single level?), and add join to those tests as well.\n\n ",
            "author": "Hoss Man",
            "id": "comment-15989263"
        },
        {
            "date": "2017-04-29T02:13:06+0000",
            "content": "get to the bottom of the cache issue \n\nI tracked this down to LUCENE-7810.\n\nAs i noted in that issue...\n\n\n\n\tAt present, due to some code I don't really understand in how Solr only leverages JoinUtils in rewritten queries, it appears that this bug does not impact current Solr usecases.  ...\n\ti discovered this bug purely by fluke because in my originally POC code for SOLR-10583 I used JoinUtils.createJoinQuery(...) directly instead of refactoring Solr's JoinQParserPlugin code so i could re-use it \u2013 doing that refactoring is my nextstep for that issue ...\n\n\n\n...so once i refactor this patch to use the existing code in JoinQParser, this bug shouldn't impact this patch (fingers crossed)\n ",
            "author": "Hoss Man",
            "id": "comment-15989694"
        },
        {
            "date": "2017-05-02T17:53:07+0000",
            "content": "updated patch...\n\n\treuse code in JoinQParserPlugin\n\t\n\t\tthis resolved the caching problem\n\t\n\t\n\tadded tests for numeric fields\n\tcleaned up parsing code\n\t\n\t\tadded tests for bad input\n\t\n\t\n\n\n\nI think the code is pretty solid \u2013 I beasted a few hundred test runs last night w/o any problems.\n\nStill todo (on my agenda for today):\n\n\tlook into the existing refinement tests and include 'join' there\n\trefactor the duplicate code in the 2 tests i'm added\n\t\n\t\tmost likely i'm just going to delete TestCloudJSONFacet and make TestCloudJSONFacetJoinDomain occasionally use a domain w/'filter' but no 'join' since that's the only code path covered by TestCloudJSONFacet but not TestCloudJSONFacetJoinDomain\n\t\n\t\n\tbeast w/nightly to ensure the test constants aren't too high.\n\n ",
            "author": "Hoss Man",
            "id": "comment-15993394"
        },
        {
            "date": "2017-05-03T01:23:51+0000",
            "content": "Updated patch ... I think this is pretty much good to go, but I'll keep beasting it overnight.\n\nAnyone have any comments/concerns? ",
            "author": "Hoss Man",
            "id": "comment-15994143"
        },
        {
            "date": "2017-05-03T17:30:20+0000",
            "content": "Commit 15e1c5d34f69fa2662b5299dce6fc808854f8ba3 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=15e1c5d ]\n\nSOLR-10583: JSON Faceting now supports a query time 'join' domain change option ",
            "author": "ASF subversion and git services",
            "id": "comment-15995275"
        },
        {
            "date": "2017-05-03T17:41:10+0000",
            "content": "Commit 083051899794e509b1fbd7cf5fc475094c3b452a in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0830518 ]\n\nSOLR-10583: JSON Faceting now supports a query time 'join' domain change option\n\n(cherry picked from commit 15e1c5d34f69fa2662b5299dce6fc808854f8ba3) ",
            "author": "ASF subversion and git services",
            "id": "comment-15995292"
        },
        {
            "date": "2017-07-05T19:13:21+0000",
            "content": "TestCloudJSONFacetJoinDomain, introduced on this issue, has a reproducible failure: SOLR-11016. ",
            "author": "Steve Rowe",
            "id": "comment-16075260"
        }
    ]
}