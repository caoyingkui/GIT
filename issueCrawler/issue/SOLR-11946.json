{
    "id": "SOLR-11946",
    "title": "Move bin/solr arg-parsing logic to Java",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "scripts and tools"
        ],
        "type": "Improvement",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "master (8.0)",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently, there is logic in three different places that parses arguments for the bin/solr scripts.  There is logic in the scripts themselves (bin/solr, bin/solr.cmd), and there is logic in Java to parse the arguments sent by the scripts themselves (SolrCLI.java.\n\nThis creates maintenance burden. It makes it easy for inconsistencies/bugs to creep into the scripts (see SOLR-11840 and SOLR-11441, for a few examples).  It adds work when adding/removing/modifying bin/solr script behavior.  And it forces anyone hoping to improve the scripts to be conversant in both bash and Windows batch scripting.\n\nIt would be a big help if all the argument parsing was done on the Java side, and little or none was done in the scripts themselves.  There are a few situations in which this is difficult, but in no cases is it impossible.\n\nWe should move this logic into Java-land.",
    "attachments": {
        "SOLR-11946.patch": "https://issues.apache.org/jira/secure/attachment/12909179/SOLR-11946.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-05T04:37:25+0000",
            "content": "Attached is a patch that shows what this would look like on Linux.  The attached patch moves most arg-parsing logic to Java land, with some caveats:\n\n\tHaven't touched the \"auth\" tool yet.  That tool is a little more complicated and I needed a bit more time on it.\n\tThe help text is currently generated from the commons-cli Option and CommandLine classes.  It doesn't look much like the current help text.  If this is something we want to preserve as close as possible, this will require a bit more work (but is totally do-able).\n\tNo changes included for the Windows (bin/solr.cmd) script.\n\n\n\nWould love any feedback or suggestions anyone has.  Otherwise, I plan to revise this patch and add Windows support in the coming days. ",
            "author": "Jason Gerlowski",
            "id": "comment-16352028"
        },
        {
            "date": "2018-02-05T18:03:32+0000",
            "content": "Wanted to post some notes I gathered while working on the above patch.  Might be helpful for any potential reviewers.\n\nMost of the difficulties in moving this logic to Java come from working with the functionality that we get OOB with the commons-cli package. However, all of these have workarounds:\n\n\tcommons-cli doesn't have support (AFAICT) for having a single option with more than 1 \"long-option\". For example, the bin/solr create command treats -c, -collection, and -core as the same option. commons-cli's OptionBuilder allows you to accept \"collection\", or \"core\", but not both. This has an easy workaround though: just create two different Option instances that share the same shortopt (-c, in our example).\n\tcommons-cli generates help/usage text from the list of options. But current bin/solr code passes some arguments not provided (directly) by the user. An example of this is the constructed solrUrl parameter that is usually built from default constants, an auto-detected Solr port, etc. If solrUrl (for example) is parsed with the other command line options, it will appear in the help text, which would confuse users. This also has an easy workaround: \"internal\" options can be passed from scripts to SolrCLI as environment variables or Java system-properties, instead of in the command line args.\n\tEven with the ability to \"hide\" some internal options (see above), the commons-cli HelpFormatter usage/help text doesn't quite match the current help text spat out by the scripts. In most cases, this is just a matter of spacing and can probably safely be ignored, though some differences/limitations are harder to work around. I am not sure whether interface-backcompat promises extend to the help text in the bin/solr scripts. If they do, we can ensure we maintain backcompat by copying the help text verbatim in to the Java code. (This still reduces duplication, as the help text currently lives in both the Windows and Linux scripts.). Otherwise, maybe moving to HelpFormatter based help text is acceptable here.\n\n ",
            "author": "Jason Gerlowski",
            "id": "comment-16352704"
        },
        {
            "date": "2018-02-18T00:06:45+0000",
            "content": "I still think this is a really useful/important change for future maintainability, but a lot of the \"scary\" bits of this change are alleviated greatly by the test coverage that will be added in SOLR-11749.\n\nSo this will take a backseat (on my plate at least) until SOLR-11749 finishes up. ",
            "author": "Jason Gerlowski",
            "id": "comment-16368412"
        },
        {
            "date": "2018-03-30T22:49:59+0000",
            "content": "+1 to continue this move. Too much duplication. \n\nHave not looked at your patch but in some of the SolrCLI tools I\u2019ve touched it worked well to just pass args transparently to Java and do the parsing there. Hope to get some time to review some day.. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16421036"
        },
        {
            "date": "2018-03-31T12:29:42+0000",
            "content": "Thanks for the vote Jan.  This is still high on my list, but I've paused it temporarily to get some better tests around the bin/solr scripts, so we can tell if we break anything when this goes in.  But I'm working towards it at least. ",
            "author": "Jason Gerlowski",
            "id": "comment-16421302"
        }
    ]
}