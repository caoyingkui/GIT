{
    "id": "LUCENE-6412",
    "title": "Merge SpanTermQuery into TermQuery",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "5.2,                                            6.0",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Having a separate SpanTermQuery doesn't actually gain us anything now, and it's trivial enough to make TermQuery extend SpanQuery copy the getSpans() and getField() impls over from STQ.",
    "attachments": {
        "LUCENE-6412.patch": "https://issues.apache.org/jira/secure/attachment/12724033/LUCENE-6412.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14486108",
            "author": "Alan Woodward",
            "date": "2015-04-08T21:36:19+0000",
            "content": "Patch moving the functionality into TermQuery and deprecating SpanTermQuery.\n\nThe one wrinkle is that scores from plain TermQueries and SpanTermQueries are different, because STQ uses a SpanWeight/SpanScorer.  I've kept TestSpansAdvanced and TestSpansAdvanced2 using STQ rather than TermQuery so that the tests still pass, but maybe this doesn't matter that much? "
        },
        {
            "id": "comment-14486215",
            "author": "Robert Muir",
            "date": "2015-04-08T22:28:57+0000",
            "content": "I don't think we should make regular queries extend Spans (yet).\n\nSpans still need work and have been neglected for years. We are working on improving them but i do not think we should tie together the APIs at this point. "
        },
        {
            "id": "comment-14486971",
            "author": "Alan Woodward",
            "date": "2015-04-09T08:28:53+0000",
            "content": "But this is pretty non-invasive, though?  It just makes SpanQueries easier to use - progress not perfection, etc, etc... "
        },
        {
            "id": "comment-14487158",
            "author": "Robert Muir",
            "date": "2015-04-09T11:16:35+0000",
            "content": "Progress not perfection is not a motto of mine. I believe in good software design and thinking things through.\n\nMaking TermQuery a SpanQuery doesn't make sense unless we want to adopt the Spans api everywhere.\n\nI don't think we should, at least in their current form. The API is undergoing heavy refactoring and cleanup and we are trying to improve the tests. \n\nmy vote: please keep spans separate. They need a lot of work and it is not clear if / how they should be integrated any better. And core queries like term query need to stay the hell away from spans right now. \n\nThese must work, and must have good performance. people really rely on them. "
        },
        {
            "id": "comment-14487350",
            "author": "Robert Muir",
            "date": "2015-04-09T13:35:23+0000",
            "content": "Lemme expand a little more on what I think is a good path:\n\nWe fix the spans first before committing any major decision decisions with regards to query proximity support. Spans need work but Paul Elschot completely revived them, and there is a base of users already using them. They are already in the nightly benchmark (this should be improved). They already have a test suite of expected behavior and have been around for a long time.\n\nWe try to \"drop\" Spans down to Scorer. This means spans still keep their external API (at first) and we just fix things behind the scenes. This might involve making compromises, like deferring/sandboxing legacy payloads support and keeping it on the old spans API. I think a goal must be that PhraseScorer and SloppyPhraseScorer cutover to the new api without performance regressions before declaring success. \n\nIf i thought things were ready today, I'd be benchmarking removal of Scorer.freq() and addition of Scorer.nextStartPosition()/startPosition()/endPosition(). But we don't have spans \"up to speed\" yet: there are large issues like completion of two-phase support, payloads, test coverage, benchmarking improvements that still remain. We need to do that first before deciding on proximity apis for the core search apis like Scorer, and we now have a good place to do it. "
        },
        {
            "id": "comment-14487605",
            "author": "Michael McCandless",
            "date": "2015-04-09T16:23:44+0000",
            "content": "I love all the progress on span queries lately, but I don't think we should tie together TermQuery and SpanQuery now... "
        },
        {
            "id": "comment-14488022",
            "author": "Paul Elschot",
            "date": "2015-04-09T19:09:15+0000",
            "content": "If we also implement getSpans() on PhraseQuery, it would be much easier to get rid of the scoring differences between phrases and spans. I think that can be done now, the position methods of Spans are stable enough. "
        },
        {
            "id": "comment-14530213",
            "author": "Alan Woodward",
            "date": "2015-05-06T09:19:40+0000",
            "content": "I'll resolve this as Won't Fix, then, for now at least. "
        }
    ]
}