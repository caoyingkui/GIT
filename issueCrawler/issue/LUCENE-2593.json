{
    "id": "LUCENE-2593",
    "title": "disk full can cause index corruption in certain cases",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.4",
            "3.0.3",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Robert uncovered this nasty bug, in adding more randomness to\noal.index tests...\n\nI got a standalone test to show the issue; the corruption path is\nas follows:\n\n\n\tThe merge hits an initial exception (eg disk full when merging the\n    postings).\n\n\n\n\n\tIn handling this exception, IW closes all the sub-readers,\n    suppressing any further exceptions.\n\n\n\n\n\tIf one of these sub-readers has pending deletions, which happens\n    if readers are pooled in IW, it will flush them.  If that flush\n    hits a 2nd exception (eg disk full), then SegmentReader\n    [incorrectly] leaves the SegmentInfo's delGen advanced by 1,\n    referencing a corrupt file, yet the SegmentReader is still\n    forcefully closed.\n\n\n\n\n\tIf enough disk frees up such that a later IW.commit/close\n    succeeds, the resulting segments file will reference an invalid\n    deletions file.",
    "attachments": {
        "LUCENE-2593.patch": "https://issues.apache.org/jira/secure/attachment/12451677/LUCENE-2593.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-08-10T14:58:27+0000",
            "content": "Attached patch; I ended up making a number of defensive fixes on how\nIW/DW/SR handle exceptions:\n\n\n\tGenerally I moved the error recover down lower, eg SegmentReader\n    now restores its SegmentInfo and deletes the partially written\n    file, on hitting an exception writing changed norms or deletes.\n\n\n\n\n\tIW's ReaderPool no longer forcefully drops changes if it hits an\n    exception committing an SR.  The SR now remains pooled, holding\n    onto its changes, in case a future commit is attempted and the SR\n    is able to commit.\n\n\n\n\n\tWe checkpoint with IndexFileDeleter more \"finely\" now, so that as\n    soon as a new file is referenced (eg from writing deletes), IFD\n    knows about it.  This prevents incorrect deletion of a file eg if\n    a merge IncRefs and then DecRefs before we can checkpoint.\n\n\n\nI believe this issues goes back to 2.9, when we added reader pooling\n(for NRT). ",
            "author": "Michael McCandless",
            "id": "comment-12896902"
        },
        {
            "date": "2010-08-11T16:20:43+0000",
            "content": "Yeehaw! This looks very much like a bug I was experiencing, which we earlier attributed to me fiddling with fsync. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12897325"
        }
    ]
}