{
    "id": "LUCENE-7316",
    "title": "Geo3d test failure",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "7.0",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Reproducible on master with:\n\n\nant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=EEA08DD7FAE3C688 -Dtests.multiplier=2 -Dtests.slow=true -Dtests.directory=MMapDirectory -Dtests.locale=es -Dtests.timezone=America/Manaus -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\nNote: I was initially unable to reproduce this, until I pulled up code that Michael McCandless recently committed.  It seems possible that encoding/decoding changes are triggering it.  Of specific concern is the new way maximum/minimum decoded values are computed.",
    "attachments": {
        "LUCENE-7316.patch": "https://issues.apache.org/jira/secure/attachment/12808205/LUCENE-7316.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15315823",
            "author": "Michael McCandless",
            "date": "2016-06-05T09:29:39+0000",
            "content": "I'll dig... thanks Karl Wright. "
        },
        {
            "id": "comment-15315839",
            "author": "Michael McCandless",
            "date": "2016-06-05T10:42:15+0000",
            "content": "OK I improved the test and now the reason for the failure is more clear:\n\n\n   [junit4] Started J0 PID(17141@localhost).\n   [junit4] Suite: org.apache.lucene.spatial3d.TestGeo3DPoint\n   [junit4]   1>     doc=21 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.41518838180529244, lon=3.141592653589793([X=-0.9155623167011844, Y=1.1212404605680407E-16, Z=-0.40359240429408716])]\n   [junit4]   1>       quantized=[X=-0.9155623168963972, Y=2.3309121299774915E-10, Z=-0.40359240449795253]\n   [junit4]   1>     doc=183 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.5046982583730789, lon=3.141592653589793([X=-0.8756101579642801, Y=1.072313177251864E-16, Z=-0.48370339871087736])]\n   [junit4]   1>       quantized=[X=-0.8756101580594321, Y=2.3309121299774915E-10, Z=-0.48370339855625877]\n   [junit4]   1>     doc=369 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6702575972549385, lon=-3.141592653589793([X=-0.7835203289686522, Y=-9.595356629383411E-17, Z=-0.6210758350125567])]\n   [junit4]   1>       quantized=[X=-0.7835203291866281, Y=-2.3309121299774915E-10, Z=-0.6210758350013791]\n   [junit4]   1>     doc=371 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.576436349379447, lon=3.141592653589793([X=-0.8385093930639423, Y=1.0268778442707467E-16, Z=-0.5451040215612037])]\n   [junit4]   1>       quantized=[X=-0.8385093928426902, Y=2.3309121299774915E-10, Z=-0.5451040215586903]\n   [junit4]   1>     doc=572 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.4827449732412347, lon=3.141592653589793([X=-0.8860718131424997, Y=1.0851250097796539E-16, Z=-0.46439449476072314])]\n   [junit4]   1>       quantized=[X=-0.8860718133569058, Y=2.3309121299774915E-10, Z=-0.4643944949512836]\n   [junit4]   1>     doc=664 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.5948705431251465, lon=-3.141592653589793([X=-0.8282716410800726, Y=-1.0143402140732362E-16, Z=-0.5604357694267184])]\n   [junit4]   1>       quantized=[X=-0.8282716412349628, Y=-2.3309121299774915E-10, Z=-0.5604357695134797]\n   [junit4]   1>     doc=733 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.5840980770503603, lon=-3.141592653589793([X=-0.8342886719552387, Y=-1.0217089516748793E-16, Z=-0.5514993593205021])]\n   [junit4]   1>       quantized=[X=-0.8342886717927595, Y=-2.3309121299774915E-10, Z=-0.5514993591551823]\n   [junit4]   1>     doc=739 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6666767650422669, lon=3.141592653589793([X=-0.7857484685439203, Y=9.622643469372469E-17, Z=-0.6182734428700126])]\n   [junit4]   1>       quantized=[X=-0.7857484686037003, Y=2.3309121299774915E-10, Z=-0.6182734427483171]\n   [junit4]   1>     doc=1015 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.5497787143782138, lon=3.141592653589793([X=-0.8528099559953749, Y=1.044390982890731E-16, Z=-0.5226026131675464])]\n   [junit4]   1>       quantized=[X=-0.8528099559933734, Y=2.3309121299774915E-10, Z=-0.5226026130582019]\n   [junit4]   1>     doc=1183 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.46595709210611225, lon=-3.141592653589793([X=-0.8937838166193515, Y=-1.0945694901525938E-16, Z=-0.4494751191235925])]\n   [junit4]   1>       quantized=[X=-0.8937838165515352, Y=-2.3309121299774915E-10, Z=-0.44947511891742187]\n   [junit4]   1>     doc=1192 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6371254865959431, lon=-3.141592653589793([X=-0.8037505125366898, Y=-9.843104924911019E-17, Z=-0.5948439914020472])]\n   [junit4]   1>       quantized=[X=-0.8037505127578689, Y=-2.3309121299774915E-10, Z=-0.5948439913731091]\n   [junit4]   1>     doc=1215 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.7297268846484459, lon=3.141592653589793([X=-0.7450754141928508, Y=9.124542211146631E-17, Z=-0.6664146750087903])]\n   [junit4]   1>       quantized=[X=-0.7450754141206418, Y=2.3309121299774915E-10, Z=-0.6664146748964662]\n   [junit4]   1>     doc=1254 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.7321013816914078, lon=3.141592653589793([X=-0.7434850195598263, Y=9.105065494179485E-17, Z=-0.6681766752338272])]\n   [junit4]   1>       quantized=[X=-0.7434850197212503, Y=2.3309121299774915E-10, Z=-0.6681766752425086]\n   [junit4]   1>     doc=1269 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.46641479437478933, lon=3.141592653589793([X=-0.8935768919847284, Y=1.094316080561138E-16, Z=-0.4498836024609561])]\n   [junit4]   1>       quantized=[X=-0.8935768921581085, Y=2.3309121299774915E-10, Z=-0.44988360241073433]\n   [junit4]   1>     doc=1426 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.724048623200237, lon=3.141592653589793([X=-0.7488616475581544, Y=9.170910196863072E-17, Z=-0.6621857675693065])]\n   [junit4]   1>       quantized=[X=-0.7488616475553557, Y=2.3309121299774915E-10, Z=-0.662185767683135]\n   [junit4]   1>     doc=1438 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6420522462334303, lon=-3.141592653589793([X=-0.8007974133106822, Y=-9.80693988976407E-17, Z=-0.5987871431209347])]\n   [junit4]   1>       quantized=[X=-0.8007974135163135, Y=-2.3309121299774915E-10, Z=-0.5987871432109603]\n   [junit4]   1>     doc=1675 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.366751381622508, lon=3.141592653589793([X=-0.9341369546241536, Y=1.1439878314457262E-16, Z=-0.3588305124909657])]\n   [junit4]   1>       quantized=[X=-0.9341369547433015, Y=2.3309121299774915E-10, Z=-0.35883051243945985]\n   [junit4]   1>     doc=1789 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6865519018293362, lon=3.141592653589793([X=-0.773255387477867, Y=9.469647351982163E-17, Z=-0.6337258294176411])]\n   [junit4]   1>       quantized=[X=-0.7732553874889044, Y=2.3309121299774915E-10, Z=-0.6337258293913056]\n   [junit4]   1>     doc=1797 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6087132388861758, lon=-3.141592653589793([X=-0.8203989514558117, Y=-1.0046989499242045E-16, Z=-0.5718223797682678])]\n   [junit4]   1>       quantized=[X=-0.8203989514846467, Y=-2.3309121299774915E-10, Z=-0.5718223796932832]\n   [junit4]   1>     doc=1873 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6169695856076297, lon=-3.141592653589793([X=-0.8156285724593596, Y=-9.988569205554797E-17, Z=-0.5785611974932218])]\n   [junit4]   1>       quantized=[X=-0.8156285724511568, Y=-2.3309121299774915E-10, Z=-0.5785611977041542]\n   [junit4]   1>     doc=2183 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.39164710754345367, lon=3.141592653589793([X=-0.9248617493352392, Y=1.1326289809772226E-16, Z=-0.381950916774963])]\n   [junit4]   1>       quantized=[X=-0.9248617491040064, Y=2.3309121299774915E-10, Z=-0.3819509165666378]\n   [junit4]   1>     doc=2363 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.6929589419296776, lon=-3.141592653589793([X=-0.7691629782648343, Y=-9.419529793546744E-17, Z=-0.6386535662534785])]\n   [junit4]   1>       quantized=[X=-0.7691629784899047, Y=-2.3309121299774915E-10, Z=-0.6386535664379606]\n   [junit4]   1>     doc=2405 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.5428803140767048, lon=3.141592653589793([X=-0.8564124007944415, Y=1.0488027053830129E-16, Z=-0.516717845575244])]\n   [junit4]   1>       quantized=[X=-0.8564124007360979, Y=2.3309121299774915E-10, Z=-0.5167178454473965]\n   [junit4]   1>   shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=0.0425265613312593, lon=0.0([X=1.0002076326868337, Y=0.0, Z=0.042561051669501374])], [lat=0.8894380320379947, lon=-2.8993466885897496([X=-0.6109015457368775, Y=-0.1509528453728308, Z=0.7760109675775679])], [lat=-0.8298163536994994, lon=-0.1462586594666574([X=0.6673285226073522, Y=-0.09830454048435874, Z=-0.7372817203741138])], [lat=0.0, lon=-1.7156310907312492E-12([X=1.0011188539924791, Y=-1.7175506314267352E-12, Z=0.0])]], internalEdges={3}}, GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=0.0425265613312593, lon=0.0([X=1.0002076326868337, Y=0.0, Z=0.042561051669501374])], [lat=0.0, lon=-1.7156310907312492E-12([X=1.0011188539924791, Y=-1.7175506314267352E-12, Z=0.0])], [lat=-0.7766317703682181, lon=3.141592653589793([X=-0.7128972529667801, Y=8.730473389667082E-17, Z=-0.7005064828988063])]], internalEdges={0}}]}\n   [junit4]   1>   bounds=XYZBounds: [xmin=-0.71289725396678 xmax=1.0011188549924792 ymin=-0.9656813334373919 ymax=1.0000001299807888E-9 zmin=-0.9977622930221052 zmax=0.9806582427397669]\n\n\n\nFor some reason, with this shape, the returned XYZBounds seem to be way off?  E.g. doc=21 has an X of ~ -0.916, yet the bounds has xMin ~ -0.71. "
        },
        {
            "id": "comment-15315871",
            "author": "Karl Wright",
            "date": "2016-06-05T13:11:52+0000",
            "content": "Michael McCandless:  The bounds for the shape is the following:\n\nbounds=XYZBounds: [xmin=-0.71289725396678 xmax=1.0011188549924792 ymin=-0.9656813334373919 ymax=1.0000001299807888E-9 zmin=-0.9977622930221052 zmax=0.9806582427397669]\n\nDoc 21's point values:\n\n\n[junit4]   1>     doc=21 is contained by shape but is outside the returned XYZBounds\n   [junit4]   1>       unquantized=[lat=-0.41518838180529244, lon=3.141592653589793([X=-0.9155623167011844, Y=1.1212404605680407E-16, Z=-0.40359240429408716])]\n   [junit4]   1>       quantized=[X=-0.9155623168963972, Y=2.3309121299774915E-10, Z=-0.40359240449795253]\n\n\n\nThe x value is within range (-0.91 to 1.00), and so is the z value, but the y value is (barely) not:\n\n\n(quantized) Y=2.3309121299774915E-10\nymin=-0.9656813334373919 ymax=1.0000001299807888E-9\n\n\n\nThe question in my mind is, what changed with your latest patch that might cause this?  Is it an accidental discovery, or is there something about the quantization change that might have cause this, e.g. those new hard limits?  The unquantized value is also outside the XYZBounds.  It's suspicious because the longitude value for these points is all essentially -Math.PI.\n "
        },
        {
            "id": "comment-15315876",
            "author": "Michael McCandless",
            "date": "2016-06-05T13:33:19+0000",
            "content": "The x value is within range (-0.91 to 1.00)\n\nWait: the x value for the doc is ~ -0.91, but the range is ~ -0.71 to ~ 1.00?  So it's not in range of the XYZBounds? "
        },
        {
            "id": "comment-15315880",
            "author": "Michael McCandless",
            "date": "2016-06-05T13:42:18+0000",
            "content": "The question in my mind is, what changed with your latest patch that might cause this?\n\nIt's hard to say if that change caused this ... it's true if you revert the change, this seed passes, but that patch shifts the seeds for this test, I think, and so we can't be sure there's a causal connection, though there could definitely be one!\n\nReally all that the previous change (LUCENE-7312) did was to increase by a wee bit the Geo3DUtil.DECODE constant. "
        },
        {
            "id": "comment-15315893",
            "author": "Karl Wright",
            "date": "2016-06-05T14:06:14+0000",
            "content": "Sorry, you are correct.  Yes, that's a major problem.  I'll dig into why this is. "
        },
        {
            "id": "comment-15315905",
            "author": "Karl Wright",
            "date": "2016-06-05T14:47:43+0000",
            "content": "I've cooked up a small test case that demonstrates the bounds issue.  I'll chase it down at earliest opportunity. "
        },
        {
            "id": "comment-15315984",
            "author": "Karl Wright",
            "date": "2016-06-05T18:59:48+0000",
            "content": "Here's the problem.\n\nThe shape in question involves two polygons.  One polygon has the following points:\n\n\n    final GeoPoint p1 = new GeoPoint(PlanetModel.WGS84, 0.0425265613312593, 0.0);\n    final GeoPoint p4 = new GeoPoint(PlanetModel.WGS84, 0.0, -1.7156310907312492E-12);\n    final GeoPoint p5 = new GeoPoint(PlanetModel.WGS84, -0.7766317703682181, 3.141592653589793);\n\n\n\nThat polygon has two planes that are in fact coplanar:\n\n\n   [junit4]   1> Recording XYZBounds for plane [A=1.7156310907312492E-12, B=1.0, C=-4.031825447240733E-11, D=0.0, side=1.0]\n   [junit4]   1> a >= minimum_resolution\n   [junit4]   1> Recording XYZBounds for plane [A=1.7156310907312492E-12, B=1.0, C=-1.7458530603341764E-12, D=0.0, side=1.0]\n   [junit4]   1> a >= minimum_resolution\n   [junit4]   1> Recording XYZBounds for plane [A=5.543375111216114E-18, B=-1.0, C=-1.3027230013345064E-16, D=0.0, side=1.0]\n   [junit4]   1> a >= minimum_resolution\n\n\n\nTherefore, the ability to correctly detect point membership for this part of the polygon is not going to work, so the points it says are within the polygon in fact may not be within it.\n\nThe issue, then, is how we were allowed to construct such a polygon in the first place.  Looking at GeoPolygonFactory next... "
        },
        {
            "id": "comment-15316044",
            "author": "Karl Wright",
            "date": "2016-06-05T22:04:04+0000",
            "content": "What happens is that the logic decides it cannot use only one polygon to represent the shape, so it breaks it into two polygons.  Unfortunately, the dividing plane it uses happens to be coplanar with one of the already existing planes for part of the shape.\n\nDetecting this condition is straightforward, but deciding what to do once it is encountered is a challenge.  The shape that has two identical planes is, in fact, only a triangle, so getting rid of one of the planes would yield a degenerate condition.  If, instead, we simply throw IllegalArgumentException when this situation arises, then many perfectly legitimate shapes will be disallowed. "
        },
        {
            "id": "comment-15316393",
            "author": "Karl Wright",
            "date": "2016-06-06T11:58:36+0000",
            "content": "The code looks for legality in the following way:\n\n\n      // Look for coplanarity; abort if so\n      for (int i = 0; i < points.size(); i++) {\n        final GeoPoint start = points.get(i);\n        final GeoPoint end = points.get(getLegalIndex(i + 1, points.size()));\n        // We have to find the next point that is not on the plane between start and end.\n        // If there is no such point, it's an error.\n        final Plane planeToFind = new Plane(start, end);\n        int endPointIndex = -1;\n        for (int j = 0; j < points.size(); j++) {\n          final int index = getLegalIndex(j + i + 2, points.size());\n          if (!planeToFind.evaluateIsZero(points.get(index))) {\n            endPointIndex = index;\n            break;\n          }\n        }\n        if (endPointIndex == -1) {\n          return false;\n        }\n      }\n\n\n\nThis should have been sufficient to prevent the creation of the degenerate triangle we are seeing.  I will need to figure out why it didn't. "
        },
        {
            "id": "comment-15316639",
            "author": "Karl Wright",
            "date": "2016-06-06T15:24:20+0000",
            "content": "Looks like this is a problem because of minimum resolution.  Here's some debugging output:\n\n\n   [junit4]   1> Looking for coplanar points for: [[lat=0.0425265613312593, lon=0.0([X=1.0002076326868337, Y=0.0, Z=0.042561051669501374])], [lat=0.0, lon=-1.7156310907312492E-12([X=1.0011188539924791, Y=-1.7175506314267352E-12, Z=0.0])], [lat=-0.7766317703682181, lon=3.141592653589793([X=-0.7128972529667801, Y=8.730473389667082E-17, Z=-0.7005064828988063])]]\n   [junit4]   1> planeToFind.evaluate(start) = 0.0\n   [junit4]   1> planeToFind.evaluate(end) = 0.0\n   [junit4]   1>  failing because planeToFind = [A=1.7156310907312492E-12, B=1.0; C=-4.031825447240733E-11; D=0.0] doesn't contain [lat=-0.7766317703682181, lon=3.141592653589793([X=-0.7128972529667801, Y=8.730473389667082E-17, Z=-0.7005064828988063])]; off by 2.7020217250132315E-11\n   [junit4]   1> planeToFind.evaluate(start) = 0.0\n   [junit4]   1> planeToFind.evaluate(end) = -2.0194839173657902E-28\n   [junit4]   1>  failing because planeToFind = [A=1.7156310907312492E-12, B=1.0; C=-1.7458530603341764E-12; D=0.0] doesn't contain [lat=0.0425265613312593, lon=0.0([X=1.0002076326868337, Y=0.0, Z=0.042561051669501374])]; off by 1.6416819695159931E-12\n   [junit4]   1> planeToFind.evaluate(start) = 0.0\n   [junit4]   1> planeToFind.evaluate(end) = -7.703719777548943E-34\n   [junit4]   1>  failing because planeToFind = [A=5.543375111216114E-18, B=-1.0; C=-1.3027230013345064E-16; D=0.0] doesn't contain [lat=0.0, lon=-1.7156310907312492E-12([X=1.0011188539924791, Y=-1.7175506314267352E-12, Z=0.0])]; off by 1.7175561810040737E-12\n   [junit4]   1> ... not coplanar\n\n\n\nNote that the amount it is \"off\" by is just larger than Vector.MINIMUM_RESOLUTION (1e-12).  The triangle is therefore barely not degenerate, but it is close enough to degenerate to make plane sidedness not work well in determining inclusion of a given point.\n\nI solved a similar problem for GeoBBox shapes by computing the bounds of intersections as well as of edges and points.  The only other solution is to create a pair of cutoff planes for each edge of the polygon.  That would be a more accurate solution that we might want to adopt in the future, since acute angles between planes otherwise will allow quite a bit of \"leakage\" of places that shouldn't legitimately be \"in set\", but are, due to the MINIMUM_RESOLUTION value. "
        },
        {
            "id": "comment-15317375",
            "author": "Karl Wright",
            "date": "2016-06-06T22:12:51+0000",
            "content": "Ok, that fix worked.  I have to port it to GeoConcavePolygon as well, but other than that the problem with bounds would appear to be solved. "
        },
        {
            "id": "comment-15318188",
            "author": "Michael McCandless",
            "date": "2016-06-07T09:13:07+0000",
            "content": "Thanks for digging Karl Wright ... seems tricky  "
        },
        {
            "id": "comment-15318295",
            "author": "ASF subversion and git services",
            "date": "2016-06-07T11:11:18+0000",
            "content": "Commit e9e7d0a287ad95e71f02eef61a190b2c02e3b21b in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e9e7d0a ]\n\nLUCENE-7316: Use intersections in bounds computations for GeoConvexPolygon and GeoConcavePolygon. "
        },
        {
            "id": "comment-15318299",
            "author": "ASF subversion and git services",
            "date": "2016-06-07T11:13:18+0000",
            "content": "Commit 3ee694eb866f0850ea70f16b3d5fb1464197738b in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3ee694e ]\n\nLUCENE-7316: Use intersections in bounds computations for GeoConvexPolygon and GeoConcavePolygon. "
        },
        {
            "id": "comment-15318300",
            "author": "Karl Wright",
            "date": "2016-06-07T11:13:56+0000",
            "content": "Michael McCandless: I'm done with this ticket.  Do you want to commit your testing patch before I close it? "
        },
        {
            "id": "comment-15318319",
            "author": "Michael McCandless",
            "date": "2016-06-07T11:31:00+0000",
            "content": "Karl Wright oh yes, I'll commit the test improvements and then close this ... thanks for the reminder. "
        },
        {
            "id": "comment-15318352",
            "author": "ASF subversion and git services",
            "date": "2016-06-07T11:57:07+0000",
            "content": "Commit ff8c42a70dcb82aab34406f643f1e2a599b703ef in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff8c42a ]\n\nLUCENE-7316: improve test "
        },
        {
            "id": "comment-15318353",
            "author": "ASF subversion and git services",
            "date": "2016-06-07T11:58:38+0000",
            "content": "Commit bacac1c333b26a233011546ec4b3fa5e832ab49b in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bacac1c ]\n\nLUCENE-7316: improve test "
        }
    ]
}