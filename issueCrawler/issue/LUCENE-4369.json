{
    "id": "LUCENE-4369",
    "title": "StringFields name is unintuitive and not helpful",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There's a huge difference between TextField and StringField, StringField screws up scoring and bypasses your Analyzer.\n\n(see java-user thread \"Custom Analyzer Not Called When Indexing\" as an example.)\n\nThe name we use here is vital, otherwise people will get bad results.\n\nI think we should rename StringField to MatchOnlyField.",
    "attachments": {
        "LUCENE-4369.patch": "https://issues.apache.org/jira/secure/attachment/12544621/LUCENE-4369.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-09T19:46:07+0000",
            "content": "+1 for MatchOnlyField. ",
            "author": "Michael McCandless",
            "id": "comment-13451668"
        },
        {
            "date": "2012-09-09T23:58:52+0000",
            "content": "+1 ",
            "author": "Adrien Grand",
            "id": "comment-13451710"
        },
        {
            "date": "2012-09-10T01:44:52+0000",
            "content": "I'm +1 for renaming this field (and even considering its long term future) I'm just not sure how MatchOnlyField conveys the fact it bypasses analysis? ",
            "author": "Chris Male",
            "id": "comment-13451730"
        },
        {
            "date": "2012-09-11T10:15:53+0000",
            "content": "Chris: well there is a lot more to convey than the old Field.Index.NOT_ANALYZED:\n\n\n\ttext is treated as if it went thru keywordanalyzer\n\tterm frequencies and positions are omitted\n\tlength normalization and index-time boosts are disabled\n\n\n\nThe idea of \"MatchOnly\" is to describe that the field is really only useful for matching,\nnot searching. The other 2 things this Field does wrt scoring and index options become important\nwhen someone adds multiple instances under the same name: I think its important to convey\nthat its still only 'matching' and they wont have real scoring here.\n\nThe problem I see with \"StringField\" as a name is that it doesn't hint at any of this. The current\nname can lead you to believe you should use it because you happen to have your content as a Java String. ",
            "author": "Robert Muir",
            "id": "comment-13452874"
        },
        {
            "date": "2012-09-11T10:28:19+0000",
            "content": "As I say, I totally support renaming this field to something.  I think calling it anything else will help with distinguishing it from TextField so I'm +1 for MatchOnly.  Perhaps that'll encourage people to read the docs about it not being analyzed. ",
            "author": "Chris Male",
            "id": "comment-13452884"
        },
        {
            "date": "2012-09-11T10:48:45+0000",
            "content": "SingleTermField ?\n\nNot sure \"matching vs searching\" is a commonly understood differentiation. ",
            "author": "Mark Harwood",
            "id": "comment-13452900"
        },
        {
            "date": "2012-09-11T10:48:51+0000",
            "content": "patch: just from a eclipse rename of 'StringField -> MatchOnlyField' and 'LuceneTestCase.newStringField -> LuceneTestCase.newMatchOnlyField' ",
            "author": "Robert Muir",
            "id": "comment-13452901"
        },
        {
            "date": "2012-09-11T10:55:17+0000",
            "content": "Mark: I don't have strong feelings one way or the other. \n\nWe don't need to rush it, I think its fairly contained to change, we don't even have to deal with this for \n4.0 if we aren't happy: we can deprecate StringField just have it extend XXXField in a future 4.x release too.\n\nBut I think the name StringField is not really good at all so its good to get all the ideas out here. ",
            "author": "Robert Muir",
            "id": "comment-13452908"
        },
        {
            "date": "2012-09-11T11:05:29+0000",
            "content": "Agreed on the need for a change - names are important.\n\nI have a problem with using \"match\" on its own because the word is often associated with partial matching e.g. \"best match\" or \"fuzzy match\".\nA quick google suggests \"match\" has more connotations with fuzziness than exactness - there are 162m results for \"best match\" vs only 45m results for \"exact match\".\n\nSo how about \"ExactMatchField\"?\n\n ",
            "author": "Mark Harwood",
            "id": "comment-13452914"
        },
        {
            "date": "2012-09-11T11:10:04+0000",
            "content": "So how about \"ExactMatchField\"?\n\n+1 for that. I was actually going to propose \"MatchExactField\", but I don't mind the order of the words.\n\nAlso, since a way to search for these terms/fields using the regular query syntax would be through a PerFieldAnalyzerWrapper and assigning KeywordAnalyzer to that field (are there other ways), we can also call it KeywordField.\n\nI don't like MatchOnlyField .. i.e. TextField also matches only the words that are indexed in that field. ",
            "author": "Shai Erera",
            "id": "comment-13452920"
        },
        {
            "date": "2012-09-11T11:13:24+0000",
            "content": "I like ExactMatchField too.\n\nI thought about Keyword too, but my concern is that this would get confused with 'search keywords' such as\nthe type used in META section of html documents. We could argue about the best field type for that  but\nI don't think this is it. ",
            "author": "Robert Muir",
            "id": "comment-13452922"
        },
        {
            "date": "2012-09-11T11:16:08+0000",
            "content": "I like ExactMatchField, good suggestion. ",
            "author": "Chris Male",
            "id": "comment-13452924"
        },
        {
            "date": "2012-09-11T11:33:30+0000",
            "content": "ExactMatchField sounds ok, but I don't really like it. On the other hand, we already had Field.KEYWORD(...) static factory in Lucene 1.x (amybe also early 2.x), and that was always fine to me. The term Keyword is only misleading (for my german, library background - \"Schlagw\u00f6rter\" in GER) to me, so I would like to have a good term that tells the user \"this is a field thats taken as-is). In general I also dont really like the name KeywordTokenizer or KeywordAnalyzer, too, but thats given since long time - so coming from this name, KeywordTokenizer -> KeywordField might be a good idea (like NumericTokenStream -> NumericField), but\n\nThe problem with ExactMatch field is: If it is also stored, the name is misleasing again, so KeywordField is better. If we would 100% differentiate between stored and indexed fields while indexing (requiring that the field is also added 2 times, one time as indexed and one time as indexed), I would be fine with \"MatchOnlyField\" and \"StoredStringField\". ",
            "author": "Uwe Schindler",
            "id": "comment-13452933"
        },
        {
            "date": "2012-09-11T11:39:10+0000",
            "content": "Here the good old Lucene 1.9.1 API: http://memex.dsic.upv.es/pbs/Practicas/Lucene/api-1.9.1/org/apache/lucene/document/Field.html (see Field.Keyword, Field.Text, Field.Unstored) ",
            "author": "Uwe Schindler",
            "id": "comment-13452941"
        },
        {
            "date": "2012-09-11T11:47:49+0000",
            "content": "We don't need to rush it, I think its fairly contained to change, we don't even have to deal with this for 4.0 if we aren't happy: we can deprecate StringField just have it extend XXXField in a future 4.x release too.\n\nI am against this, we should change this before Lucene 4.0. We have seen already on user list that many people understand it wrong, so for me this issue is a \"Blocker\" for 4.0. ",
            "author": "Uwe Schindler",
            "id": "comment-13452945"
        },
        {
            "date": "2012-09-11T11:48:44+0000",
            "content": "\nThe problem with ExactMatch field is: If it is also stored, the name is misleasing again, so KeywordField is better.\n\nI dont understand how storing is related. storing is the same always.\n\n\nIf we would 100% differentiate between stored and indexed fields while indexing (requiring that the field is also added 2 times, one time as indexed and one time as indexed), I would be fine with \"MatchOnlyField\" and \"StoredStringField\".\n\nIn my opinion the only thing worse we could do to our .document API than StringField would be to require the user to add the field twice. ",
            "author": "Robert Muir",
            "id": "comment-13452947"
        },
        {
            "date": "2012-09-11T11:56:07+0000",
            "content": "The names \"ExactMatchField\" or \"MatchOnlyField\" both have the problem, that they only refer to the indexing side. I would be fine with that name, if it would be \"unstored\" by default, so you have to turn on storing explicit. If it is automatically stored, people will complain that their index has too many useless garbage, because they expected a ExactMatchField to be used only for \"matching\", so \"storing\" is wrong.\n\nI would prefer: UntokenizedField or UntokenizedStringField ",
            "author": "Uwe Schindler",
            "id": "comment-13452956"
        },
        {
            "date": "2012-09-11T12:00:15+0000",
            "content": "\nI am against this, we should change this before Lucene 4.0. We have seen already on user list that many people understand it wrong, so for me this issue is a \"Blocker\" for 4.0.\n\nI disagree with this. I've watched NOT_ANALYZED pop up on the user list for older releases time after time, its frustrating, but this problem is nothing new.\nIts not introduced with 4.0: I opened this issue because I thought was useful feedback from someone testing the Lucene 4.0 BETA and its really trivial to fix,\nonce we settle on a name.\n\nI don't think we should try to block releases when nobody can even agree on a good name yet.\n\nWe should instead focus on picking a good name: we can implement this for 4.1 or 5.0 or whatever. ",
            "author": "Robert Muir",
            "id": "comment-13452957"
        },
        {
            "date": "2012-09-11T12:11:26+0000",
            "content": "\nThe names \"ExactMatchField\" or \"MatchOnlyField\" both have the problem, that they only refer to the indexing side.\n\nI dont know, I actually like ExactMatchField the best because it specifies exactly what I want it to specify.\n\nMatchOnly is not as good because you can actually do things like sort (the javadocs mention this as one reason\nyou would use this field type), but ExactMatch just refers to the search behavior,\nwhich is what I am really concerned about. It doesn't imply you cannot store it, it just tells you how the search\nbehavior behaves. ",
            "author": "Robert Muir",
            "id": "comment-13452960"
        },
        {
            "date": "2012-09-11T13:18:14+0000",
            "content": "I would suggest \"RawTextField\". Or, \"ExactTextField\". Or, \"UnanalyzedTextField\". I mean, text is text to an average user. Generally, people should use TextField for text, but use StringField when they need the \"exact\", \"raw\" text \"as is\" and without being tokenized or otherwise changed.\n\n\"KeywordTokenizer\" is confusing since it really is \"NoTokenizer\" or \"ExactTextTokenizer\" or \"RawTextTokenizer\".\n\nIs there currently a wiki page that describes the distinction between \"match\" and \"search\"? I would not expect an average user to know the distinction.\n\n ",
            "author": "Jack Krupansky",
            "id": "comment-13452998"
        },
        {
            "date": "2012-09-11T13:43:54+0000",
            "content": "Thanks Jack, that exactly also my opinion, we just need good names. I like your's, too. \"Raw\" is a good term, too. The MatchOnly or ExactMatch terms are in my opinion not very good, sorry. ",
            "author": "Uwe Schindler",
            "id": "comment-13453022"
        },
        {
            "date": "2012-09-11T14:02:50+0000",
            "content": "\n\"Raw\" is a good term, too.\n\n+1, lets think about that. ",
            "author": "Robert Muir",
            "id": "comment-13453036"
        },
        {
            "date": "2012-09-11T14:42:19+0000",
            "content": "AuNaturelTextField ",
            "author": "Steve Rowe",
            "id": "comment-13453066"
        },
        {
            "date": "2012-09-11T16:27:16+0000",
            "content": "Anything with \"Raw\" is good. The problem with \"Keyword\" or \"Untokenized\" or \"Unanalyzed\" in the name is that it rather assumes that the user is familiar with what those terms mean in Lucene. If they're experienced enough to understand that, they're less likely to fall into this error in the first place.\n\nWe could do something that removes it from consideration unless people dig. I understand it's a general field, but how about something like \"Identifier\" (I'm not too keen on that name actually). I'm reaching for something that is \"naturally\" thought of as a type suitable for <uniqueKey> fields but requires one to dig a bit before using it for other fields.\n\nOK, an idea out of left field, why do we have a \"string\" as a type anyway? Does it make any sense to just remove it and have people use KeywordTokenizer when they want this behavior? I'm ready for this idea to be shot down in flames <G>....\n\nI suppose in the Solr world, we could just remove the \"string\" type from schema.xml and provide an example <fieldType> that was only KeyworTokenized and avoid a world of confusion for many users. ",
            "author": "Erick Erickson",
            "id": "comment-13453151"
        },
        {
            "date": "2012-09-11T16:33:49+0000",
            "content": "\nOK, an idea out of left field, why do we have a \"string\" as a type anyway? Does it make any sense to just remove it and have people use KeywordTokenizer when they want this behavior? I'm ready for this idea to be shot down in flames <G>....\n\nI've said the same thing before, but I figure I won't get consensus for that. \n\nI'm happy to just get the name to be anything but String for now \n\nIts still screwed up there are things like setBoost() at all on StringField when it omits norms etc,\nand screwed up that it bypasses the Analyzer (the classic NOT_ANALYZED problem), but\nfixing the name would at least help. ",
            "author": "Robert Muir",
            "id": "comment-13453159"
        },
        {
            "date": "2012-09-11T16:59:27+0000",
            "content": "I think it's useful to have a dedicated sugar field for things like primary keys, URLs, enumerated fields (\"country\", \"state\", \"zip code\"), entitlements fields (ACLs), tags, etc., and when users do this directly today I suspect they often forget to disable norms and index with docs-only.\n\nBut I agree the name is trappy now.\n\n+1 for ExactTextField.  I don't really like \"raw\": it sounds too ... low level.  Like it's not even gonna be indexed or something. ",
            "author": "Michael McCandless",
            "id": "comment-13453174"
        },
        {
            "date": "2012-09-11T19:19:15+0000",
            "content": "Serious suggestion: WholeTextField\n\n(Following the raw/cooked food metaphor used in various computational contexts - \"whole food\" means unprocessed.)\n\nI like ExactTextField too, but it's missing the beginning and end anchors: the intent is \"exactly this search string\", but it doesn't necessarily imply \"and nothing else\".  E.g. would a user armed only with the name assume that an ExactTextField query string \"two three\" would not match an indexed string \"one two three four\"? ",
            "author": "Steve Rowe",
            "id": "comment-13453317"
        },
        {
            "date": "2012-09-12T17:47:25+0000",
            "content": "How about WholeTextField? thats fine with me. Does anyone object? ",
            "author": "Robert Muir",
            "id": "comment-13454167"
        },
        {
            "date": "2012-09-12T17:53:46+0000",
            "content": "ok just a few downsides of 'whole': \n\n\tit seems similar to full, like full-text field. but StringField is not that.\n\tthen what is TextField, only partial?\n\n\n\nGuys i realistically dont think we are going to come up with a perfect name here that everyone likes.\n\nBut I think enough people agree that StringField is bad.\n\nI seriously propose ASDFGHIJField in the interim, we gotta make some incremental progress. ",
            "author": "Robert Muir",
            "id": "comment-13454172"
        },
        {
            "date": "2012-09-12T17:55:20+0000",
            "content": "WholeTextField sounds like Starbucks...\n\nI would like UntokenizedField. ",
            "author": "Uwe Schindler",
            "id": "comment-13454175"
        },
        {
            "date": "2012-09-12T18:09:23+0000",
            "content": "Some more choices: AsIsTextField, IntactTextField, UnSoiledTextField, HalfCaffLatteField ",
            "author": "Steve Rowe",
            "id": "comment-13454186"
        },
        {
            "date": "2012-09-12T18:15:28+0000",
            "content": "I would like UntokenizedField\n\n+1 for that. I don't think we should underestimate Lucene users to the point that they don't understand what an Analyzer is, or tokenization means. When they create IWC, they need to specify an Analyzer. I think, seriously, that Analyzer is as basic as Document. ",
            "author": "Shai Erera",
            "id": "comment-13454194"
        },
        {
            "date": "2012-09-12T18:20:16+0000",
            "content": "I am +1 for UntokenizedField too. This is much more intuitive than StringField! ",
            "author": "Robert Muir",
            "id": "comment-13454200"
        },
        {
            "date": "2012-09-12T18:22:22+0000",
            "content": "Didn't we spcifically get rid of an enums called TOKENIZED and UN_TOKENIZED because they convoluted the concept of tokenization with analysis?  weren't there users who wanted \"keyword\" tokenization combined with other tokenfilters who thought UN_TOKENIZED was what they wanted?\n\nPerhaps TextField should be renamed AnalyzedTextField and StringField should be NonAnalyzedTextField ? ",
            "author": "Hoss Man",
            "id": "comment-13454204"
        },
        {
            "date": "2012-09-12T18:22:48+0000",
            "content": "Great, then do we have a winner?  ",
            "author": "Shai Erera",
            "id": "comment-13454205"
        },
        {
            "date": "2012-09-12T18:23:36+0000",
            "content": "see LUCENE-1366 for the reason we stoped using TOKENIZED and UN_TOKENIZED as Field options ",
            "author": "Hoss Man",
            "id": "comment-13454206"
        },
        {
            "date": "2012-09-12T18:46:09+0000",
            "content": "I never understood the difference and why this was renamed in 2.4. For me the issue explains nothing and the mailing list thread referenced from there is in my opinion unrelated.\n\nI am also fine with replacing tokenized with analyzed.\n\nInert question: why is it called Tokenizer and not Analyzerator? ",
            "author": "Uwe Schindler",
            "id": "comment-13454236"
        },
        {
            "date": "2012-09-12T18:53:46+0000",
            "content": "Shai:\n\nbq: ...I don't think we should underestimate Lucene users to the point that they don't understand what an Analyzer...\n\nI absolutely agree with you about Lucene users, but I disagree when we're talking about Solr users who are just using the schema.xml file. I flat guarantee that they don't always look under the covers. I've seen way more than one site with \"solr rocks\" as the first/newSearchers.....\n\nBut all that said, I'm not doing the work so whatever gets chosen is fine with me. ",
            "author": "Erick Erickson",
            "id": "comment-13454242"
        },
        {
            "date": "2012-09-12T19:03:05+0000",
            "content": "I never understood the difference and why this was renamed in 2.4. For me the issue explains nothing and the mailing list thread referenced from there is in my opinion unrelated.\n\nYeah, no.  Totally related, see e.g. <http://mail-archives.apache.org/mod_mbox/lucene-java-user/200808.mbox/%3C184419B1-6589-41CB-B5D4-3EA9C4215A3B@mikemccandless.com%3E> ",
            "author": "Steve Rowe",
            "id": "comment-13454252"
        },
        {
            "date": "2012-09-12T19:04:35+0000",
            "content": "the mailing list thread referenced from there is in my opinion unrelated.\n\nDid you read the whole thread?  It's littered with comments about confusion between how that UN_TOKENIZED related to the Analyzer configured on the IndexWriter \u2013 some people thought it ment the tokenizer in the Analyzer wouldn't be used, bu the rest of their analyzer would.  It's very representative of lots of other threads i'd seen over the years.\n\nI disagree when we're talking about Solr users who are just using the schema.xml file\n\nI don't think anyone is talking about changing solr.StrField and solr.TextField \u2013 this issue is about the convincient subclasses of oal.document.Field...\n\nhttps://lucene.apache.org/core/4_0_0-BETA/core/org/apache/lucene/document/Field.html\n ",
            "author": "Hoss Man",
            "id": "comment-13454254"
        },
        {
            "date": "2012-09-13T18:52:39+0000",
            "content": "Not just a rename and I don't know if it is viable:\n\nThe idea is: you start thinking about analyzing when adding fields\nfor some purpose, not when creating an IndexWriter. And the mode how to do it is tightened to the field.\n\nHow about to dismiss the Analyzer in IndexWriter/Config\nand add all analyzing information to Field, something like\n\nnew TextField(...) // as keyword\nnew TextField(..., Analyzer, AnalyzingMode) // analyzed\n\nor better\n\nnew TextField(..., AnalyzingMode.AS_IS) // as keyword\nnew TextField(..., new AnalyzingMode(Analyzer, ...)) // analyzed\nnew TextField(..., AnalyzingMode.STANDARD) // sugar\n\nThen in the public API for IndexWriter there may be no need to use\n\n\tPerFieldAnalyzerWrapper\n\tField.Index.NO\n\tKeywordAnalyzer\n\n\n\nThis also answers the not so easy question why and how to construct a\n(field aware) analyzer as a parameter for IndexWriter/Config. ",
            "author": "Stefan Trcek",
            "id": "comment-13455134"
        },
        {
            "date": "2012-09-13T19:07:22+0000",
            "content": "Stefan I dont really like that, because we want to make it easy for users who use\nQueryParser (like some huge % of users) to analyze the same way at query-time.\n\nThe way people have always done this with lucene is to pass the same Analyzer at\nindex-time and query time.\n\nIf they use StringField, it breaks that! Thats why users get confused and thats\nwhy I opened this issue. ",
            "author": "Robert Muir",
            "id": "comment-13455149"
        },
        {
            "date": "2012-09-14T14:32:40+0000",
            "content": "I prefer ExactTextField over Untokenized (or UnAnalyzed) Field,\nbecause that name matches the typical use-case of this field: you want\nto index exactly the text value so you can later retrieve by that\nvalue.\n\nYes, the field is untokenized, but this is something of an\nimplementation detail: that's just how it achieves exact matching.\nAnd it's only one of the things it does (it also turns off norms, sets\nDOCS_ONLY).\n\nIn general I think we should name things according to how they are\nmost likely to be used, not according to how they are implemented.\n\nThe goal here isn't to find a name that everybody loves ... only to\nfind one that nobody hates ... and I think ExactTextField is a big\nimprovement over StringField. ",
            "author": "Michael McCandless",
            "id": "comment-13455825"
        },
        {
            "date": "2012-09-14T15:13:29+0000",
            "content": "At this stage of the discussion, is there any intention that the replacement for \"string\" fields will permit analysis, at least CharFilter analysis? After all, that is one of the main reasons people get confused. I'm okay with \"ExactTextField\" except that character filtering would be really nice and avoid confusion for Solr users. Of course, it would be ironic to call it \"exact text\" when it needs to be filtered.\n\nOTOH, at the Lucene level, especially the Lucene query parser, I can see why you would want the \"string\" field to prevent analysis - because there is no field-specific analysis, just one analyzer for all fields. Hmmm... maybe that should be proposed for the Lucene query parser to side step that particular rationale for wanting strings to be unanalyzed - provide a map of field-specific analyzers.\n\nAt the Solr schema level, we could simply have \"string\" be a TextField with only KeywordTokenizer and then users can copy and/or customize as they wish.\n\nThis begs the question of how or whether the Solr schema side of the house will rename the \"string\" field type, or keep it as string and simply change the StrField class name. ",
            "author": "Jack Krupansky",
            "id": "comment-13455856"
        }
    ]
}