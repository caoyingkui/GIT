{
    "id": "LUCENE-6486",
    "title": "DocumentDictionary entry iterator skips items with optional null payload field",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "4.10.3",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "As denoted in the ticket SOLR-7086 the DocumentDictionary entry iterator shouldn't skip entries from the dictionary having null value for the payload field due to the fact that this field is optional.\nThis behaviour causes inconsistencies in the Solr suggester which simply skips valid documents due to the fact that they don't have values for the payload field.\nAs agreed with Michael McCandless I am attaching a patch to this Lucene issue.",
    "attachments": {
        "LUCENE-6486.patch": "https://issues.apache.org/jira/secure/attachment/12733337/LUCENE-6486.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14546858",
            "author": "Marius Grama",
            "date": "2015-05-16T17:03:31+0000",
            "content": "Patch used to fix this inconsistency.\n\nMichael McCandless could you please have a look on this patch?\nNOTE : As in the class FileDictionary, when the dictionary is configured with hasPayloads field set to true, there will be an empty value instead of null for the field payload when the payload field in the document is null. "
        },
        {
            "id": "comment-14548217",
            "author": "Michael McCandless",
            "date": "2015-05-18T16:10:52+0000",
            "content": "Thanks Marius Grama!\n\nI started from your patched and tweaked javadocs / CHANGES wording, and made a small code style improvement (attached).\n\nCould you add a dedicated test case, e.g. something like \"testPayloadsAreOptional\", just to make it clear we intend this functionality?\n\nAlso, I'm nervous about pretending we saw a 0-byte payload when the payload was in fact missing, and also the empty set when no contexts were specified: we lose information by doing this, e.g. we can no longer distinguish if the document did in fact have a 0-byte payload.\n\nCan we simply return null (in both cases) when there was no payload or no context for a given document? "
        },
        {
            "id": "comment-14548604",
            "author": "Marius Grama",
            "date": "2015-05-18T19:33:52+0000",
            "content": "Attached patch with slightly modified version of DocumentDictionaryTest class to outline the handling of optional payload field. "
        },
        {
            "id": "comment-14549095",
            "author": "Marius Grama",
            "date": "2015-05-18T20:01:30+0000",
            "content": "Also, I'm nervous about pretending we saw a 0-byte payload when the payload was in fact missing, and also the empty set when no contexts were specified: we lose information by doing this, e.g. we can no longer distinguish if the document did in fact have a 0-byte payload.\n\nNOTE : As in the class FileDictionary, when the dictionary is configured with hasPayloads field set to true, there will be an empty value instead of null for the field payload when the payload field in the document is null.\n\nMichael McCandless I would gladly change the behaviour of returning an empty BytesRef instead of null, but I find this task rather difficult because there are several classes having their logic depending on InputIterator#hasPayloads() , InputIterator#hasContexts() methods (SortedInputIterator, BufferedInputIterator, AnalyzingSuggester to name a few).\nI guess that one solution would be to remove the previously mentioned InputIterator methods, but this would mean to rewrite all the classes where these methods are used and also to find other ways to encode null values for payloads.\ne.g. :\nSortedInputIterator(line 88-90)\n\n        if (hasPayloads) {\n          payload = decodePayload(bytes, input);\n        }\n\n\n\nSortedInputIterator (line 240-243)\n\n    if (hasPayloads) {\n      output.writeBytes(payload.bytes, payload.offset, payload.length);\n      output.writeShort((short) payload.length);\n    }\n\n\n\n\nAny ideas how to encode null values for the non-existing payload fields so that there can we differentiate when reading from persistence whether we're dealing with null and not with an empty BytesRef instance? I am thinking of writing -1 for the length of the payload, but I guess there are better solutions at hand than this one.\n\n "
        },
        {
            "id": "comment-14552347",
            "author": "Michael McCandless",
            "date": "2015-05-20T14:02:12+0000",
            "content": "Marius Grama OK thank you for digging, it sounds risky to return \"null\" for payload and contexts since consumers don't expect that ... so let's just \"cast\" missing -> empty for both payloads and contexts, like in your last patch.\n\nOn the new test case, it looks like testBasic just got renamed to testWithOptionalPayload, with a few added checks??  Can you instead put testBasic back and make a new very minimal testWithOptionalPayload?  I was picturing a tiny test case that indexes 1 doc (and does not use generateIndexDocuments) that's missing its payload and then confirms it's an empty BytesRef when iterating ... I think separate single-purpose test cases are nicer than the all-encompassing testBasic seems to be... "
        },
        {
            "id": "comment-14552644",
            "author": "Marius Grama",
            "date": "2015-05-20T16:47:58+0000",
            "content": "Michael McCandless I've attached a patch containing the unit test testWithOptionalPayload. Please let me know if there is something else to be changed. "
        },
        {
            "id": "comment-14552649",
            "author": "Michael McCandless",
            "date": "2015-05-20T16:49:54+0000",
            "content": "Thanks Marius Grama, new test looks great!  I'll commit soon ... thank you. "
        },
        {
            "id": "comment-14552706",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T17:29:28+0000",
            "content": "Commit 1680641 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1680641 ]\n\nLUCENE-6486: make payloads optional in DocumentDictionary "
        },
        {
            "id": "comment-14552804",
            "author": "ASF subversion and git services",
            "date": "2015-05-20T18:11:33+0000",
            "content": "Commit 1680645 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680645 ]\n\nLUCENE-6486: make payloads optional in DocumentDictionary "
        },
        {
            "id": "comment-14552805",
            "author": "Michael McCandless",
            "date": "2015-05-20T18:12:01+0000",
            "content": "Thanks Marius Grama! "
        },
        {
            "id": "comment-14586792",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:42:37+0000",
            "content": "Bulk close for 5.2.0. "
        }
    ]
}