{
    "id": "SOLR-7419",
    "title": "Initial value of thread local in SolrQueryTimeoutImpl overflows a long",
    "details": {
        "components": [
            "search"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "4.10.4,                                            5.1",
        "status": "Closed",
        "resolution": "Not A Problem",
        "priority": "Trivial"
    },
    "description": "Same as the title.\n\n\n /**\n   * The ThreadLocal variable to store the time beyond which, the processing should exit.\n   */\n  public static ThreadLocal<Long> timeoutAt = new ThreadLocal<Long>() {\n    @Override\n    protected Long initialValue() {\n      return nanoTime() + Long.MAX_VALUE;\n    }\n  };",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-20T05:46:08+0000",
            "author": "Steve Rowe",
            "content": "I don't think it's a problem - the timeoutAt value is never directly compared - instead the result of subtracting nanoTime() from it is compared to zero:\n\n\n  public static Long get() {\n    return timeoutAt.get();\n  }\n[...]\n  public boolean shouldExit() {\n    return get() - nanoTime() < 0L;\n  }\n\n\n\nThis little java program tests some of the overflow cases, and passes for me with assertions enabled (Java 8):\n\n\npublic class LongOverflowTest {\n  public static void main(String[] args) {\n    long start = 1L;\n    long future = start + Long.MAX_VALUE;\n    long end = start + 1; \n    assert future - end > 0L;\n    \n    end = Long.MAX_VALUE;\n    assert future - end > 0L;\n\n    ++end;\n    assert future - end == 0L;\n\n   ++end;\n   assert future - end < 0L;\n    \n    start = Long.MAX_VALUE;\n    future = start + Long.MAX_VALUE;\n    end = start + 1;\n    assert future - end > 0L;\n\n    end = (start - 1) + Long.MAX_VALUE;\n    assert future - end > 0L;\n\n    ++end;\n    assert future - end == 0L;\n\n    ++end;\n    assert future - end < 0L;\n  }\n}\n\n ",
            "id": "comment-14502383"
        },
        {
            "date": "2015-04-20T12:56:50+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Steve. Yes, on overflow the JVM circles back to MIN_VALUE so even though it works fine, I don't see a reason for the initialValue to be assigned this way.  ",
            "id": "comment-14502742"
        },
        {
            "date": "2015-04-20T12:58:14+0000",
            "author": "Yonik Seeley",
            "content": "Heh, yeah, this doesn't result in bad behavior since the original overflow is paired with an underflow.  \nBut if something like that is intentional it should certainly be commented.\nIn this case, we should just set the initial value to Long.MAX_VALUE ",
            "id": "comment-14502744"
        },
        {
            "date": "2015-04-20T13:08:48+0000",
            "author": "Steve Rowe",
            "content": "Yes, on overflow the JVM circles back to MIN_VALUE so even though it works fine, I don't see a reason for the initialValue to be assigned this way.\n\nThe idea is to put timeoutAt as far in the future as possible, so that it effectively never happens.\n\nIn this case, we should just set the initial value to Long.MAX_VALUE\n\nI don't think that will work, since nanoTime() values can be anything from Long.MIN_VALUE to Long.MAX_VALUE - that's my interpretation anyway of this from the nanoTime() javadocs:\n\n\nThis method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary origin time (perhaps in the future, so values may be negative). ",
            "id": "comment-14502760"
        },
        {
            "date": "2015-04-20T13:13:54+0000",
            "author": "Yonik Seeley",
            "content": "Right you are, I hadn't realized that \"This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time.\" ",
            "id": "comment-14502764"
        },
        {
            "date": "2015-04-20T13:18:37+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I see. Can you please put a comment to that effect in the code and close this issue? ",
            "id": "comment-14502770"
        },
        {
            "date": "2015-04-20T13:21:03+0000",
            "author": "Steve Rowe",
            "content": "Can you please put a comment to that effect in the code and close this issue?\n\nWill do.  Thanks for bringing it up. ",
            "id": "comment-14502774"
        },
        {
            "date": "2015-04-20T14:25:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1674866 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1674866 ]\n\nSOLR-7419: document intentional overflow in SolrQueryTimeoutImpl thread local ",
            "id": "comment-14502910"
        },
        {
            "date": "2015-04-20T14:27:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1674867 from Steve Rowe in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1674867 ]\n\nSOLR-7419: document intentional overflow in SolrQueryTimeoutImpl thread local (merged trunk r1674866) ",
            "id": "comment-14502911"
        },
        {
            "date": "2015-04-20T14:31:21+0000",
            "author": "Steve Rowe",
            "content": "Here's the comment I added to explain the intentional overflow:\n\n\nIndex: solr/core/src/java/org/apache/solr/search/SolrQueryTimeoutImpl.java\n===================================================================\n--- solr/core/src/java/org/apache/solr/search/SolrQueryTimeoutImpl.java\t(revision 1674843)\n+++ solr/core/src/java/org/apache/solr/search/SolrQueryTimeoutImpl.java\t(working copy)\n@@ -33,6 +33,23 @@\n    * The ThreadLocal variable to store the time beyond which, the processing should exit.\n    */\n   public static ThreadLocal<Long> timeoutAt = new ThreadLocal<Long>() {\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * By default, timeoutAt is set as far in the future as possible, \n+     * so that it effectively never happens.\n+     * <p>\n+     * Since nanoTime() values can be anything from Long.MIN_VALUE to\n+     * Long.MAX_VALUE, adding Long.MAX_VALUE can cause overflow.  That's\n+     * expected and works fine, since in that case the subtraction of a\n+     * future nanoTime() value from timeoutAt (in \n+     * {@link SolrQueryTimeoutImpl#shouldExit}) will result in underflow,\n+     * and checking the sign of the result of that subtraction (via\n+     * comparison to zero) will correctly indicate whether the future\n+     * nanoTime() value has exceeded the timeoutAt value.\n+     * <p> \n+     * See {@link System#nanoTime}\n+     */\n     @Override\n     protected Long initialValue() {\n       return nanoTime() + Long.MAX_VALUE;\n\n ",
            "id": "comment-14502917"
        },
        {
            "date": "2015-04-20T14:32:36+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Steve! ",
            "id": "comment-14502919"
        },
        {
            "date": "2015-06-15T21:43:22+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586845"
        }
    ]
}