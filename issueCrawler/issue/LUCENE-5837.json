{
    "id": "LUCENE-5837",
    "title": "Only check docsWithField when necessary in numeric comparators",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "Our numeric comparators have branches to deal with missing values. However there are some cases when checking docs that have a field is not useful:\n\n\tif all docs have a value\n\tif no docs have a value\n\tif the missing value is 0",
    "attachments": {
        "LUCENE-5837.patch": "https://issues.apache.org/jira/secure/attachment/12656726/LUCENE-5837.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14067530",
            "author": "Adrien Grand",
            "content": "Here is a patch.\n\nDo we have a benchmark that could be used to validate this change? I just checked out luceneutil but it only seems to have tasks for queries, not sorting? ",
            "date": "2014-07-19T14:11:05+0000"
        },
        {
            "id": "comment-14067533",
            "author": "Robert Muir",
            "content": "I dont understand how the MatchNoBits case is safe. ",
            "date": "2014-07-19T14:19:42+0000"
        },
        {
            "id": "comment-14067535",
            "author": "Adrien Grand",
            "content": "If no document has values, then they will all return the missing value? ",
            "date": "2014-07-19T14:34:02+0000"
        },
        {
            "id": "comment-14067536",
            "author": "Adrien Grand",
            "content": "Oops, I understand your question now, I didn't upload the latest version of my patch.  ",
            "date": "2014-07-19T14:35:48+0000"
        },
        {
            "id": "comment-14067543",
            "author": "Robert Muir",
            "content": "i benchmarked the first version of the patch with the little benchmark in luceneutil, but saw no improvement.\n\nI think the current null check is effective? it has to be handled anyway. And personally i would be wary of overspecialization here... ",
            "date": "2014-07-19T14:54:32+0000"
        },
        {
            "id": "comment-14067618",
            "author": "Uwe Schindler",
            "content": "I dont think there is specialization needed.  The null check, Robert mentions, was done like this to optimize missing values.\n\nthe null check has to be done anyways by the jvm, so removing it brings nothing.\n\nsee the original missing values issue for discussion. ",
            "date": "2014-07-19T18:24:56+0000"
        },
        {
            "id": "comment-14067657",
            "author": "Adrien Grand",
            "content": "Uwe, please read the issue again: the goal was not to remove the null check, but the check for missing values.\n\nThe reason why I came up with this issue is that I'm writing a selector in order to sort based on the values of a block of documents. To make it work efficiently I need to write a NumericDocValues instance that already returns the missing value when there are either no child documents in the block or if none of them have a value. So there is no need to check the missing values in the comparator.\n\nI'm surprised that you think of it as a specialization as this is actually making things simpler? The handling of the missing value is done once for all in setNextReader and then the comparator only needs to care about the NumericDocValues instance. And it makes it easier (and potentially more efficient) to write selectors. ",
            "date": "2014-07-19T20:10:56+0000"
        },
        {
            "id": "comment-14067686",
            "author": "Uwe Schindler",
            "content": "Hi Adrien,\n\nit is somehow a specialization - on the docvalues instance. You may be right - you can also see it as simplifcication. In any case you have to take care that the v==0 optimization is still done, which you do (as I see)\n\nWhat happens in case \"missingValue==null\" (which was possible in the old API)? I am not 100% sure if the current code does the right thing - but if tests pass I am fine.\n\nI don't like the crazy API around the missingValue declared as \"long\" in the abstract base class. This is very confusing. Especially because the generics enfore a real type which is removed here. At least make the constructor of the abstract base class hidden - or hide the whole abstract base class (NumericComparator). I am not sure if it needs to be public at all. \n\nIf this does not slow down, go for it!\n\nHow to handle that in Lucene 4.x? The API still uses FieldCache.DEFAULT there and the order of calls for getDocsWithField() is important. ",
            "date": "2014-07-19T21:10:44+0000"
        },
        {
            "id": "comment-14067689",
            "author": "Uwe Schindler",
            "content": "What happens in case \"missingValue==null\" (which was possible in the old API)? I am not 100% sure if the current code does the right thing - but if tests pass I am fine.\n\nYour code does the right thing. You set the long missingValue to 0L and the specialization NumericDocValuesInstance returns missingValue - which is exactly the same as if the missingValue was null in old code (the if check then returned the original value, which was also 0).\n\nOne thing: I would remove the variable assignment in the compareXxx methods and make them one-liners. ",
            "date": "2014-07-19T21:14:28+0000"
        },
        {
            "id": "comment-14067690",
            "author": "Robert Muir",
            "content": "\nI'm surprised that you think of it as a specialization as this is actually making things simpler? The handling of the missing value is done once for all in setNextReader and then the comparator only needs to care about the NumericDocValues instance. And it makes it easier (and potentially more efficient) to write selectors.\n\nIt is a specialization, because instead of a branch for null, you have a branch checking class of the numericdocvalues. and if this one fails, the whole thing gets deoptimized and hotspot goes crazy. ",
            "date": "2014-07-19T21:16:37+0000"
        },
        {
            "id": "comment-14067695",
            "author": "Uwe Schindler",
            "content": "the goal was not to remove the null check, but the check for missing values.\n\nIn fact you are removing the null check, which is the extra branch to check for missing values - just look at the old code (this was my trick). It was done exactly like this to not slow down - hotspot can optimize that away, if it finds out that it is null - it does this very fast. We checked this at the time I added this to Lucene 3.5 or like that. We compared the two implementations - without missing values and the new one with missing values - and they were exactly the same speed. The same that Robert discovered here, too.\n\nIn fact your patch would only work in Lucene trunk, in 4.x this cannot be done like that. ",
            "date": "2014-07-19T21:27:52+0000"
        },
        {
            "id": "comment-14067913",
            "author": "Adrien Grand",
            "content": "It is a specialization, because instead of a branch for null, you have a branch checking class of the numericdocvalues. and if this one fails, the whole thing gets deoptimized and hotspot goes crazy.\n\nDoesn't it happen already if you have two fields that have different compression? ",
            "date": "2014-07-20T12:40:20+0000"
        },
        {
            "id": "comment-14067939",
            "author": "Robert Muir",
            "content": "I didn't see it happening with the currently assembly generated.\n\nI'm ok with the issue if we see a performance increase, just not seeing it. ",
            "date": "2014-07-20T14:16:17+0000"
        },
        {
            "id": "comment-14067958",
            "author": "Adrien Grand",
            "content": "Fair enough ",
            "date": "2014-07-20T15:09:38+0000"
        }
    ]
}