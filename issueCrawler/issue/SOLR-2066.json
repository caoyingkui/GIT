{
    "id": "SOLR-2066",
    "title": "Search Grouping: support distributed search",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Support distributed field collapsing / search grouping.",
    "attachments": {
        "SOLR-2066-3x.patch": "https://issues.apache.org/jira/secure/attachment/12494693/SOLR-2066-3x.patch",
        "SOLR-2066.patch": "https://issues.apache.org/jira/secure/attachment/12459946/SOLR-2066.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Harish Agarwal",
            "id": "comment-12933574",
            "date": "2010-11-18T21:33:25+0000",
            "content": "This is definitely a half-baked patch, I want to see if this is the right track for moving this issue forward.  I created a mergeGroups function to parallel the mergeIds function used to handle 'normal' document responses.  The added test is failing currently (though not raising any exceptions) because of an issue with how documents (and subsequently, groups) are sorted, but I'm stumbling in trying to fix the issue and thought it better to submit the patch and get advice now.\n\nAny feedback is really appreciated, I want to move this issue forward as quickly as possible. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12996682",
            "date": "2011-02-19T01:44:05+0000",
            "content": "Harish - I haven't looked at this patch, but since you are not mentioning SOLR-1682, I'm assuming your patch doesn't build on top of what's in trunk (which is what SOLR-1682 provided)..... although I see it applies to today's trunk.\n\nIf the above is correct, would it be possible for you to make a patch that adds support for distributed search to trunk?\n\nAlso, here's feedback from somebody who applied and tried your patch today:\n\"The patch applied cleanly against the nightly build from last night, but a query resulted in solr hanging, then running out of heap and dumping.\" "
        },
        {
            "author": "Harish Agarwal",
            "id": "comment-13006453",
            "date": "2011-03-14T15:06:18+0000",
            "content": "Hi Otis - Sorry for the late reply, I've been travelling.  I'll have a look at SOLR-1682 and try to build on top of that patch (I did build on top of the trunk originally, but it may be easier to work with the CollapseComponent).  This patch was incomplete, I'd just wanted to get advice on implementation before moving forward with it whole hog. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13080683",
            "date": "2011-08-07T22:12:06+0000",
            "content": "Updated the patch, so that is up to date with the trunk. The code compiles, but the test still fails.\n\nIn order to support distributed grouping properly we need a new distributed stage. This stage uses only the first phase collector and only retrieves the top groups.\n\nAll the top groups from the different shards can be merged with the utilities Lucene grouping module provides (GroupMerger). The groups that survive the merge are send to back to the shard where the came from in the next phase. \n\nAfter the merge the normal query stages kick in. But on the shard side only the second phase collector is used.  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13089281",
            "date": "2011-08-23T05:43:49+0000",
            "content": "Attached a rough initial approach for better distributed grouping. This solves distributed grouping in 3 steps. First round trip for getting top groups, second round trip to group documents inside a top group and a third round trip to get the stored fields. \n\nThe following parameters will never give correct with this approach:\n\n\tgroup.truncate\n\tgroup.ngroups\n\n\n\nSome current issues / todos:\n\n\tThe group.field parameter is now the only supported command.\n\tIn distributed mode group.format=grouped is only the supported format.\n\tThere is some issue with sorting now when a group sort / normal sort has null values.\n\tNeed more tests.\n\tThe code is a bit hacked together now, so there is needs to be cleaned up and restructured.\n\n\n\nOther than that it seems to work. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13089774",
            "date": "2011-08-23T21:24:32+0000",
            "content": "Minor update. Small code cleanup. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13090476",
            "date": "2011-08-24T20:57:30+0000",
            "content": "Fixed the sorting issue with groups and inside groups when a sorting value is null. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13092549",
            "date": "2011-08-28T21:10:22+0000",
            "content": "Updated patch to latest trunk changes.\n\nI think the next steps are to support the following parameters:\n\n\tgroup.query\n\tqroup.main\n\tgroup.formay (simple)\n\n\n\nAfter that commit it and port it back to 3x. The group.func parameter can then be addressed after it ported back, since it is only a 4.0 feature. "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13096930",
            "date": "2011-09-04T19:44:21+0000",
            "content": "Martijn, would it be possible to support group.ngroups for distributed grouping? I noticed that when merging TopGroups it's stated that totalGroupCount cannot be merged, but wouldn't it just be a matter of adding up the numbers (since groups shouldn't overlap across shards)? I'm probably missing something, but having a total number of groups - also across shards - is a tremendous help for paging; despite the performance penalty involved. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13096935",
            "date": "2011-09-04T20:01:49+0000",
            "content": "I noticed that when merging TopGroups it's stated that totalGroupCount cannot be merged, but wouldn't it just be a matter of adding up the numbers (since groups shouldn't overlap across shards)\nIf group.ngroups is specified we can just add the total group count together, but the Solr user is then responsible for making sure that the documents belonging to a group end up in the same shard. If this is not done, then the group counts will be incorrect.\n\nI'm probably missing something, but having a total number of groups - also across shards - is a tremendous help for paging; despite the performance penalty involved.\nAll shards need to send all the unique groups over the wire to the shard the is responsible for the group merging. For indices with a lot a of unique groups this will be very expensive. In the current solution only the top N groups (N being equals to rows param) are sent over the wire from the individual shards to the shard that is responsible for the group merging. "
        },
        {
            "author": "Matt Beaumont",
            "id": "comment-13097855",
            "date": "2011-09-06T09:50:50+0000",
            "content": "Found two issues with this patch:\n1. Using Faceting with the combination of sharding and grouping in our queries an error occurs.\n2. When a shard returns no results and other shards do an error occurs.\n\nThanks\nMatt. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13098249",
            "date": "2011-09-06T18:27:27+0000",
            "content": "Thanks for reporting these issues Matt! I'll update the patch soon. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13098385",
            "date": "2011-09-06T21:38:16+0000",
            "content": "Updated patch.\n\n\tFixes for the errors that Matt reported.\n\tIf group.ngroups is specified the groupCount is also merged. It is important that all documents of one group are in the same shard. Otherwise the groupCount will be incorrect.\n\tA lot of renames and refactorings.\n\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13098878",
            "date": "2011-09-07T12:24:51+0000",
            "content": "The changes to modules/grouping look good...\n\nThere's a small typo in the comment (\"In case groups where indexed...\"\n-> \"In case groups were indexed...\").  Also I wouldn't call this\n\"properly\"?  Ie, it's OK if the same group value appears on more than\none shard?  It just means we can't compute the exact total group count\n(we can compute an upper bound).\n\nCan you update the .merge javadocs?  Now it says it cannot compute\ntotalGroupCount; I think just change that to say that it'll produce\nthe sum of the total group counts, which is an upper bound on the true\nvalue?  And this will be exact if you know the groups are orthogonal\nacross shards?\n\nMaybe, for better readability, change this:\n\n  if (groupValue != null ? !groupValue.equals(that.groupValue) : that.groupValue != null) return false;\n\n\n\nto this:\n\n\n  if (groupValue == null) {\n    if (that.groupValue != null) {\n      return false;\n    }\n  } else if (!groupValue.equals(other.groupValue)) {\n    return false;\n  }\n\n\n\n? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13099153",
            "date": "2011-09-07T17:57:18+0000",
            "content": "Thanks for the review! I'll update the patch.\nThe SearchGroup#equals method was generated, so that is why it isn't very readable.\n\nAnd this will be exact if you know the groups are orthogonal across shards?\nYes, if all the documents of a group reside on the same shard, the groupCount will be correct.\n\nI think just change that to say that it'll produce the sum of the total group counts, which is an upper bound on the true value?\nIf documents of a group do reside on more than one shard then the count will always be higher then it would be if all documents of a group stay on one shard. So it is an upper bound. "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13100372",
            "date": "2011-09-08T14:59:53+0000",
            "content": "Thanks for adding the ngroups feature Martijn - it's really much appreciated; with it I can move forward with some of the functionality that I've been looking to add to a project of mine. The only thing is that I haven't gotten it to work quite yet. When I do:\n\nhttp://localhost:8983/solr/foo/select?wt=xml&rows=2&group=true&group.field=dcterms_source&group.ngroups=true\n\nI get an \"ngroup\"-count along with the \"matches\"-count just fine, but when I then do:\n\nhttp://localhost:8983/solr/foo/select?wt=xml&rows=2&group=true&group.field=dcterms_source&group.ngroups=true&shards=localhost:8383/solr/foo,localhost:8983/solr/bar\n\nIt's not added in. Any thoughts? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13100381",
            "date": "2011-09-08T15:13:39+0000",
            "content": "I noticed this also yesterday. I do merge the group count, but I forgot the add it to the final response...\nI'll update this patch later today. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13100703",
            "date": "2011-09-08T21:12:57+0000",
            "content": "Updated patch.\n\n\tGroup merging works now as expected.\n\tIncluded Micheal's review comments.\n\tUsing group.format=simple also works when in distributed mode.\n\n "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13101113",
            "date": "2011-09-09T10:38:35+0000",
            "content": "Great - ngroups is coming through now! Another thing I noticed is that highlighting doesn't work on account of the resultIds not getting set in the ResponseBuilder. It only happens in combination with distributed grouping - so it works when I do this:\n\nhttp://localhost:8983/solr/foo/select?wt=json&rows=2&group=true&group.field=dcterms_source&group.ngroups=true&hl=true\n\nOr this:\n\nhttp://localhost:8983/solr/foo/select?wt=json&rows=2&shards=localhost:8983/solr/foo,localhost:8983/solr/bar&hl=true\n\nBut not this:\n\nhttp://localhost:8983/solr/foo/select?wt=json&rows=2&group=true&group.field=dcterms_source&group.ngroups=true&shards=localhost:8983/solr/foo,localhost:8983/solr/bar&hl=true\n\nStacktrace:\n\n\nSEVERE: java.lang.NullPointerException\n\tat org.apache.solr.handler.component.HighlightComponent.finishStage(HighlightComponent.java:156)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:298)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1407)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:248)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Thread.java:680)\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13101388",
            "date": "2011-09-09T18:03:54+0000",
            "content": "Good catch Jasper! I've updated the patch that fixes this issue. I also included highlighting + distributed grouping to the tests. "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13102000",
            "date": "2011-09-10T07:02:04+0000",
            "content": "Edit: It is working once there's data in the index!\n\nIt was giving me the following exception on initialization when the collection was still empty, rather:\n\n\njava.lang.NullPointerException at org.apache.solr.search.grouping.firstphase.SearchGroupShardResponseProcessor.process(SearchGroupShardResponseProcessor.java:88)\n  at org.apache.solr.handler.component.QueryComponent.handleGroupedResponses(QueryComponent.java:679)\n  at org.apache.solr.handler.component.QueryComponent.handleResponses(QueryComponent.java:662)\n  at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:292)\n  at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n  at org.apache.solr.core.SolrCore.execute(SolrCore.java:1407)\n  at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n  at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:248)\n  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)\n  at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n  at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)\n  at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n  at java.lang.Thread.run(Thread.java:680)\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13102021",
            "date": "2011-09-10T09:24:38+0000",
            "content": "Thanks for testing the patch Jasper! I've updated the patch that prevents the NPE when querying empty shards and returns an empty response instead. "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13102261",
            "date": "2011-09-11T11:03:26+0000",
            "content": "You're more than welcome! Having distributed grouping will be a great addition to have. As for the patch, could it be that you've modified a previous version rather than the latest one that includes the highlighting fixes? I'm getting the same highlighting-related stacktrace as before. \n\n\nSEVERE: java.lang.NullPointerException\n\tat org.apache.solr.handler.component.HighlightComponent.finishStage(HighlightComponent.java:156)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:298)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1407)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:248)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Thread.java:680)\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13102307",
            "date": "2011-09-11T17:15:30+0000",
            "content": "Jasper, does the exception occur for the same queries? I did add a test for this. Can you run the TestDistributedSearch test? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13102354",
            "date": "2011-09-11T21:32:03+0000",
            "content": "Updated patch\n\n\tgroup.query works in distributed search\n\tgroup.main works in distributed search\n\tMany refactorings\n\n\n\nI think the feature needs to be committed. Maybe besides some jdocs the patch is ready. I'll commit this feature in the coming days. In the mean time I will start working on the patch for the 3x branch. "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13103067",
            "date": "2011-09-12T21:21:14+0000",
            "content": "Martijn, the problem seems to be with highlighting combined with empty result sets. When I modify the TestDistributedGrouping test as follows:\n\n\n// Test distributed grouping with empty indices\nquery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\nquery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n\n\nI can reproduce the exact stacktrace. The exception doesn't occur with a populated index. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13103118",
            "date": "2011-09-12T22:12:38+0000",
            "content": "Thanks Jasper! I added your test case and I also added a bug fix for it. So it shouldn't occur any more! "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13103573",
            "date": "2011-09-13T12:16:03+0000",
            "content": "Apologies for continuing to bring up issues  but it seems that facets also cause problems with empty result sets. Modify the TestDistributedGrouping test as follows and you'll see:\n\n\n// Test distributed grouping with empty indices\nquery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\nquery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\nquery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n\n\nStacktrace:\n\n\n    [junit] Caused by: org.apache.solr.common.SolrException: null  java.lang.NullPointerException\n \tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:409)\n \tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:194)\n \tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n \tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1407)\n \tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n \tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:248)\n \tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)\n \tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)\n \tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n \tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\n \tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n \tat org.mortbay.jetty.Server.handle(Server.java:326)\n \tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\n \tat org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:945)\n \tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756)\n \tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)\n \tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\n \tat org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\n \tat org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)  null  java.lang.NullPointerException\n \tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:409)\n \tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:194)\n \tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n \tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1407)\n \tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n \tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13103961",
            "date": "2011-09-13T20:24:03+0000",
            "content": "NPE and empty results! Thanks for noticing this. Better now then when distributed grouping is released!  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13104917",
            "date": "2011-09-14T21:52:03+0000",
            "content": "I took a quick peek at this, and I see some changes to how distrib search works (ShardRequestFactory).\nCould you give a brief explanation about the need for that and how it works?  Maybe changes like this should be in their own issue so it's easy to tell other refactoring vs what's needed just for grouping. "
        },
        {
            "author": "Jasper van Veghel",
            "id": "comment-13105249",
            "date": "2011-09-15T09:59:29+0000",
            "content": "Martijn, would group.truncate be something that can also be added in with the same restrictions as group.ngroups (documents within the same group must reside on the same shard)? Would this be particularly tricky to add to the patch? It would definitely be nice to have, as people seem to rather care a lot about exact facet counts. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13105460",
            "date": "2011-09-15T16:15:01+0000",
            "content": "\nMartijn, would group.truncate be something that can also be added in with the same restrictions as group.ngroups (documents within the same group must reside on the same shard)? Would this be particularly tricky to add to the patch? It would definitely be nice to have, as people seem to rather care a lot about exact facet counts.\nNo that is not that difficult. I was planning on adding it anyway.\n\n\nI took a quick peek at this, and I see some changes to how distrib search works (ShardRequestFactory).\nCould you give a brief explanation about the need for that and how it works? Maybe changes like this should be in their own issue so it's easy to tell other refactoring vs what's needed just for grouping.\nSure! In the initial versions of the patch most of the code was in the QueryComponent. The class became very large and I found it very difficult to change / maintain. So I decided to move responsibilities to behind interfaces and have different concrete implementations for different behavior. During coding I also noticed that a few concepts (like ShardRequestFactory, ShardResponseProcessor and ShardResultTransformer) are very useable for non grouping distributed search. I chose not to refactor the current regular distributed grouping, because otherwise this patch becomes to large. I think after this is committed that we should refactor the non grouped distributed search to use these concepts or similar.\nCurrently the regular distributed search implementation hasn't changed. \n\nConcepts that can also be used for non grouped distributed searches:\n\n\tShardRequestFactory is responsible for creating requests to shards in the cluster based on the incoming request from the client.\n\tShardResultTransformer. Transforming a NamedList response from the client in for example SearchGroup or TopDocs instance.\n\tShardResponseProcessor. Basically merges the shard responses. The ShardReponseProcessor uses a ShardResultTransformer to transform the shard response into a native structure (SearchGroup / TopGroups).\n\n\n\nGrouping related concepts:\n\n\tEndResultTransformer. Basically form the end result structure. There're three implementations for grouped, simple and main results.\n\tCommand. Same responsibility as in Grouping.Command. Currently more focussed on distributed search.\n\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13105474",
            "date": "2011-09-15T16:31:44+0000",
            "content": "+1 on \"Concepts that can also be used for non grouped distributed searches\" in a separate issue.  The Solr distributed search code is overly complicated. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13105687",
            "date": "2011-09-15T21:11:53+0000",
            "content": "Attached a patch to support distributed grouping for 3x. Changes between trunk are minimal. The most obvious difference is that this patch uses String for groups whereis the trunk uses BytesRef. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13105694",
            "date": "2011-09-15T21:23:38+0000",
            "content": "I chose not to refactor the current regular distributed grouping, because otherwise this patch becomes to large.\n\nAh, ok.  So this currently just looks like an implementation detail for QueryComponent (and only used when grouping now), and not some change to the distrib search architecture. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13105708",
            "date": "2011-09-15T21:38:33+0000",
            "content": "Yes it is an implementation detail of the QueryComponent for grouping. But I think we should open a new issue and look what we can refactor, based on the concepts in this issue.  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13107114",
            "date": "2011-09-17T12:50:11+0000",
            "content": "Committed.\ntrunk: 1171970\n3x branch: 1171968 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157871",
            "date": "2011-11-27T12:36:08+0000",
            "content": "Bulk close after 3.5 is released "
        }
    ]
}