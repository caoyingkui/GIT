{
    "id": "LUCENE-8490",
    "title": "Separate scoring features from Queries",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Won't Fix",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "We currently have two types of 'purely scoring' queries, produced by static methods on FeatureField and more recently on LongPoint (for distance or recency boosting).\u00a0 These don't really make sense as standalone queries, and are designed to be used as supplementary SHOULD clauses in boolean queries.\u00a0 I think these would be easier to use (and would prevent misuses, such as using them in FILTER or MUST clauses) if we designated them as Features instead, with a separate class hierarchy, and add a specific feature() method to BooleanQuery.Builder.",
    "attachments": {
        "LUCENE-8490.patch": "https://issues.apache.org/jira/secure/attachment/12938787/LUCENE-8490.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16606837",
            "author": "Alan Woodward",
            "content": "Here's a preliminary patch outlining the idea.\n\n\tI've called the base class Feature, but maybe something that includes a reference to score or boost might be better?\n\tThis is aimed at lucene 8 and just cuts everything over to the new class hierarchy, but it would be simple enough to add deprecations using a query wrapper if we wanted to get it into the 7x series\n\n ",
            "date": "2018-09-07T08:30:38+0000"
        },
        {
            "id": "comment-16607618",
            "author": "David Smiley",
            "content": "+1 to the overall idea of making a \"purely scoring queries\" a first class citizen. \u00a0\n\nI've been concerned about BooleanQuery doing too much (IMO), and your proposal would make it do yet one more thing. \u00a0Hmmm. \u00a0I'll look at your patch later. \u00a0Peer review will be important on such an impactful change. ",
            "date": "2018-09-07T20:23:01+0000"
        },
        {
            "id": "comment-16609149",
            "author": "David Smiley",
            "content": "Now that I look at the patch,\u00a0I don't really like this idea. \u00a0Feature produces a Weight which produces a Scorer which has a DocIdSetIterator, so we still have something that could theoretically selectively match some documents but not others, which seems wrong to me.\n\nStepping back a bit, perhaps we already have mostly what we need \u2013\u00a0DoubleValuesSource (thanks for adding this to Lucene, by the way). \u00a0Shouldn't LongPoint.newDistanceFeatureQuery and the methods you refer to in FeatureField return a DoubleValuesSource that can then easily be incorporated into another Query? \u00a0\n\nAnd perhaps we should add BooleanQuery.Builder.addScore(DoubleValueSource)? \u00a0Heck, that latter could happen independently of possible changes to LongPoint and FeatureField. \u00a0Although like your patch there is a subtle problem: \u00a0If the query only has some SHOULD clauses then we don't want to call this new method here and suddenly have all documents match\u00a0if we \"just\" wrap the DoubleValueSource in a query. \u00a0Instead we need to wrap the entire built query in something like a FunctionScoreQuery. ",
            "date": "2018-09-10T13:07:12+0000"
        },
        {
            "id": "comment-16614917",
            "author": "Adrien Grand",
            "content": "One thing that annoys me a bit with the patch is that you need a query to create a weight out of a feature, which feels unnecessary.\n\nShouldn't LongPoint.newDistanceFeatureQuery and the methods you refer to in FeatureField return a DoubleValuesSource that can then easily be incorporated into another Query?\n\nUnfortunately it defeats the main benefit of these features today which is that they implement setMinCompetitiveScore/advanceShallow/getMaxScore, allowing block-max logic to efficiently select top matches without visiting all matches. ",
            "date": "2018-09-14T14:24:35+0000"
        },
        {
            "id": "comment-16614918",
            "author": "Adrien Grand",
            "content": "One thing that annoys me a bit with the patch is that you need a query to create a weight out of a feature, which feels unnecessary.\n\nShouldn't LongPoint.newDistanceFeatureQuery and the methods you refer to in FeatureField return a DoubleValuesSource that can then easily be incorporated into another Query?\n\nUnfortunately it defeats the main benefit of these features today which is that they implement setMinCompetitiveScore/advanceShallow/getMaxScore, allowing block-max logic to efficiently select top matches without visiting all matches. ",
            "date": "2018-09-14T14:24:39+0000"
        },
        {
            "id": "comment-16706860",
            "author": "Alan Woodward",
            "content": "I'm still not happy with the API, but I don't think my proposed change here makes things any better so am closing for now. ",
            "date": "2018-12-03T09:15:56+0000"
        }
    ]
}