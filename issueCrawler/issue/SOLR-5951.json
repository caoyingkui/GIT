{
    "id": "SOLR-5951",
    "title": "SolrDispatchFilter no longer displays useful error message on statup when logging jars are missing",
    "details": {
        "affect_versions": "4.7,                                            4.7.1",
        "status": "Closed",
        "fix_versions": [
            "4.7.2",
            "4.8",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We no longer have logging jars in the webapp since SOLR-3706. Because of this we added a extra check in SolrDispatchFilter's ctor to print a nice exception if the logging jars were failing. This check was unfortunately never tests and recently broke:\n\nThe check delays initialization of the Logger instance to inside a try-catch block inside the explicit ctor. If it fails with ClassNotFound, it throws Exception.\n\nRecently we upgraded to a newer HttpClient version. Unfortunately SolrDispatchFliter also has an implicit constructor a few lines before the main constructor:\n\n\n  protected final HttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams()); // <-- this breaks the detection\n  \n  private static final Charset UTF8 = StandardCharsets.UTF_8;\n\n  public SolrDispatchFilter() {\n    try {\n      log = LoggerFactory.getLogger(SolrDispatchFilter.class);\n    } catch (NoClassDefFoundError e) {\n      throw new SolrException(\n          ErrorCode.SERVER_ERROR,\n          \"Could not find necessary SLF4j logging jars. If using Jetty, the SLF4j logging jars need to go in \"\n          +\"the jetty lib/ext directory. For other containers, the corresponding directory should be used. \"\n          +\"For more information, see: http://wiki.apache.org/solr/SolrLogging\",\n          e);\n    }\n  }\n\n\n\nThe first line above HttpClientUtil.createClient(new ModifiableSolrParams()); breaks the whole thing, because it is executed before the declared constructor. The user just sees a ClassNotFoundEx at this line of code, the nice error message is hidden.\n\nBecause this is so easy to break, we should make the whole thing more safe (any maybe test it). 2 options:\n\n\n\tInto the webapp add a fake Servlet (not bound to anything, just loaded first) that does not use any Solr classes at all, nothing only plain java\n\tAlternatively add a Superclass between ServletFilter and SolrDispatchFilter (pkg-private). When the servlet container loads SolrDispatchFilter, it has in any case to first load the superclass. And this superclass does the check and throws ServletException or whatever (no Solr Exception) with the message from the current code.\n\n\n\nI tend to the second approach, because it does not need to modify web-inf. It will also work with other Solr servlets, they must just extend this hidden class. I will provide a patch for that.",
    "attachments": {
        "SOLR-5951.patch": "https://issues.apache.org/jira/secure/attachment/12638342/SOLR-5951.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13958197",
            "date": "2014-04-02T21:30:16+0000",
            "content": "Patch that implements the second approach. The good thing: All user-visible servlets and filters extend those hidden abstract base classes. Because of this the checking code is executed in any case, although maybe some other servlet or filter is loaded before SolrDispatchFilter (e.g., user modified web.xml file).\n\nWhen starting the example with the Jetty ext folder emptied, the following is displayed:\n\n\n2014-04-02 23:21:10.009:WARN:oejuc.AbstractLifeCycle:FAILED SolrRequestFilter: java.lang.NoClassDefFoundError: Failed to initialize\nApache Solr: Could not find necessary SLF4j logging jars. If using Jetty, the SLF4j logging jars need to go in the jetty lib/ext dir\nectory. For other containers, the corresponding directory should be used. For more information, see: http://wiki.apache.org/solr/Sol\nrLogging\njava.lang.NoClassDefFoundError: Failed to initialize Apache Solr: Could not find necessary SLF4j logging jars. If using Jetty, the S\nLF4j logging jars need to go in the jetty lib/ext directory. For other containers, the corresponding directory should be used. For m\nore information, see: http://wiki.apache.org/solr/SolrLogging\n        at org.apache.solr.servlet.CheckLoggingConfiguration.check(CheckLoggingConfiguration.java:28)\n        at org.apache.solr.servlet.BaseSolrFilter.<clinit>(BaseSolrFilter.java:25)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n        at java.lang.Class.newInstance(Class.java:374)\n        at org.eclipse.jetty.servlet.ServletContextHandler$Context.createFilter(ServletContextHandler.java:1053)\n        at org.eclipse.jetty.servlet.FilterHolder.doStart(FilterHolder.java:105)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n        at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:719)\n        at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:265)\n        at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1252)\n        at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:710)\n        at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n        at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:39)\n        at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:186)\n        at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:494)\n        at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:141)\n        at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:145)\n        at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:56)\n        at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:609)\n        at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:540)\n        at org.eclipse.jetty.util.Scanner.scan(Scanner.java:403)\n        at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:337)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n        at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:121)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n        at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:555)\n        at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:230)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n        at org.eclipse.jetty.util.component.AggregateLifeCycle.doStart(AggregateLifeCycle.java:81)\n        at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:58)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:96)\n        at org.eclipse.jetty.server.Server.doStart(Server.java:280)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n        at org.eclipse.jetty.xml.XmlConfiguration$1.run(XmlConfiguration.java:1259)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1182)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.eclipse.jetty.start.Main.invokeMain(Main.java:473)\n        at org.eclipse.jetty.start.Main.start(Main.java:615)\n        at org.eclipse.jetty.start.Main.main(Main.java:96)\n2014-04-02 23:21:10.013:WARN:oejuc.AbstractLifeCycle:FAILED o.e.j.w.WebAppContext{/solr,file:/C:/Users/Uwe%20Schindler/Projects/luce\nne/trunk-lusolr2/solr/example/solr-webapp/webapp/},C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr2\\solr\\example/webapps/solr.wa\nr: java.lang.NoClassDefFoundError: Failed to initialize Apache Solr: Could not find necessary SLF4j logging jars. If using Jetty, th\ne SLF4j logging jars need to go in the jetty lib/ext directory. For other containers, the corresponding directory should be used. Fo\nr more information, see: http://wiki.apache.org/solr/SolrLogging\n\n\n\nI will also backport this to Solr 4.7 branch, if we release another bugfix release. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13958324",
            "date": "2014-04-02T23:24:21+0000",
            "content": "Commit 1584213 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1584213 ]\n\nSOLR-5951: Fixed SolrDispatchFilter to throw useful exception on startup if SLF4j logging jars are missing "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13958326",
            "date": "2014-04-02T23:27:16+0000",
            "content": "Commit 1584214 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1584214 ]\n\nMerged revision(s) 1584213 from lucene/dev/trunk:\nSOLR-5951: Fixed SolrDispatchFilter to throw useful exception on startup if SLF4j logging jars are missing "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13958333",
            "date": "2014-04-02T23:33:27+0000",
            "content": "Commit 1584215 from Uwe Schindler in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1584215 ]\n\nMerged revision(s) 1584214 from lucene/dev/branches/branch_4x:\nMerged revision(s) 1584213 from lucene/dev/trunk:\nSOLR-5951: Fixed SolrDispatchFilter to throw useful exception on startup if SLF4j logging jars are missing "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13958336",
            "date": "2014-04-02T23:34:35+0000",
            "content": "Thanks Chris Hostetter (Unused) and Shawn Heisey for help on IRC! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982622",
            "date": "2014-04-27T23:25:59+0000",
            "content": "Close issue after release of 4.8.0 "
        }
    ]
}