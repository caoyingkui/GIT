{
    "id": "SOLR-4362",
    "title": "edismax, phrase query with slop, pf parameter",
    "details": {
        "affect_versions": "4.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When sloppy phrase query (plus additional term) is used with edismax, slop value is search against fields that are supplied with pf parameter.\n\nExample : With this url &q=\"phrase query\"~10 term&qf=text&pf=text document having \"10 term\" in its text field is boosted.",
    "attachments": {
        "SOLR-4362.patch": "https://issues.apache.org/jira/secure/attachment/12566564/SOLR-4362.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ahmet Arslan",
            "id": "comment-13563075",
            "date": "2013-01-25T21:46:55+0000",
            "content": "http://search-lucene.com/m/RwfwXkbfc "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-13563077",
            "date": "2013-01-25T21:48:00+0000",
            "content": "A failing test case that demonstrates the problem. "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-13563152",
            "date": "2013-01-25T23:20:54+0000",
            "content": "org.apache.solr.search.ExtendedDismaxQParser#splitIntoClauses(\"\\\"phrase query\\\"~10 term\") return 3 Clauses:\n\n field = null rawField = null isPhrase = true val = phrase query raw = \"phrase query\" \n field = null rawField = null isPhrase = false val = \\~10 raw = ~10 \n field = null rawField = null isPhrase = false val = term raw = term\n\n\n\nAnd mainUserQuery becomes : \"phrase query\" ~10 term  "
        },
        {
            "author": "Elizabeth Haubert",
            "id": "comment-16705244",
            "date": "2018-11-30T20:28:03+0000",
            "content": "This is still an issue on the 7_6 branch; the underlying problem is related to https://issues.apache.org/jira/browse/SOLR-12260?filter=-2, where the list of \"normal clauses\" used for generating pf/pf2/pf3 is not correct. Note that it is necessary to have a pf2 set for the problem to occur.\n\nUsing the example query:\n\nhttp://localhost:8983/solr/new_core/select?debugQuery=on&defType=edismax&pf2=text&q=\"phrase query\"~10 term\n\n\nIt will produce:\n\n<str name=\"parsedquery_toString\">+((text:\"phrase query\"~10) (text:term)) (text:\"10 term\")</str>\n\n\nWhen Solr parses the original query string, it generates 3 clauses:\n\n\t\"phrase query\"\n\t~10\n\tterm\n\n\n\nIn the course of parseOriginalQuery, \"phrase query\" is identified as a phrase, and ~10 is correctly identified as the slop associated with that phrase, and removed from clauses in the context of parseOriginalQuery.\n\nThat change is not picked up when control flow returns back to parse(). So when addPhraseQueries goes to look for the shingles to glue together, it starts with\n\n\t\"phrase query\"\n\t~10\n\tterm\n\n\n\nRejects \"phrase query\" as a candidate for shingling because it is a phrase, and is left with\n\n\t~10\n\tterm\n\n\n\nIt then generates a pf2 clause \"10 term\", and tacks that on to the query. If the underlying field tokenization strips off punctuation, \"10 term\" phrases will match accordingly.\n\nUpdated the original unit test to use the same schema field as testPfPs().\n\n\u00a0 "
        }
    ]
}