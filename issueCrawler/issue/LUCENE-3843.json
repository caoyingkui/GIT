{
    "id": "LUCENE-3843",
    "title": "implement PositionLengthAttribute for all tokenstreams where its appropriate",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "LUCENE-3767 introduces PositionLengthAttribute, which extends the tokenstream API\nfrom a sausage to a real graph. \n\nCurrently tokenstreams such as WordDelimiterFilter and SynonymsFilter theoretically\nwork at a graph level, but then serialize themselves to a sausage, for example:\n\nwi-fi with WDF creates:\nwi(posinc=1), fi(posinc=1), wifi(posinc=0)\n\nSo the lossiness is that the 'wifi' is simply stacked ontop of 'fi'\n\nPositionLengthAttribute fixes this by allowing a token to declare how far it \"spans\",\nso we don't lose any information.\n\nWhile the indexer currently can only support sausages anyway (and for performance reasons,\nthis is probably just fine!), other tokenstream consumers such as queryparsers and suggesters\nsuch as LUCENE-3842 can actually make use of this information for better behavior.\n\nSo I think its ideal if the TokenStream API doesn't reflect the lossiness of the index format,\nbut instead keeps all information, and after LUCENE-3767 is committed we should fix tokenstreams\nto preserve this information for consumers that can use it.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-03T22:22:10+0000",
            "content": "We should probably also discuss if a separate attribute is the best here.\n\nIt seems to me, position increment + length might make more sense in a single\nattribute (similar to startOffset + endOffset).\n\nwe can probably do a similar backwards compat thing to TermAttribute/CharTermAttribute?\nIf you used the old PositionIncrementAttribute maybe even the posLenght is hardcoded at 1,\nbut its deprecated for a PositionAttribute or something instead?\n\nIts more work, but for a cleaner API it might be worth it. ",
            "author": "Robert Muir",
            "id": "comment-13221719"
        },
        {
            "date": "2012-03-03T22:30:05+0000",
            "content": "we also shouldnt forget to add basic bounds checks to basetokenstreamtestcase,\nand probably to the attribute itself if it doesnt have them already\n(positionincrementatt at least checks its >= 0, i think this one must be >= 1 always) ",
            "author": "Robert Muir",
            "id": "comment-13221721"
        },
        {
            "date": "2012-03-03T23:53:59+0000",
            "content": "+1 for a new PositionAttribute holding both posInc & posLength. ",
            "author": "Michael McCandless",
            "id": "comment-13221740"
        },
        {
            "date": "2013-07-23T18:44:41+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717027"
        },
        {
            "date": "2014-04-16T12:54:41+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970840"
        }
    ]
}