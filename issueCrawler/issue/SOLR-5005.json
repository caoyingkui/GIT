{
    "id": "SOLR-5005",
    "title": "JavaScriptRequestHandler",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A user customizable script based request handler would be very useful.  It's inspired from the ScriptUpdateRequestProcessor, but on the search end. A user could write a script that submits searches to Solr (in-VM) and can react to the results of one search before making another that is formulated dynamically.  And it can assemble the response data, potentially reducing both the latency and data that would move over the wire if this feature didn't exist.  It could also be used to easily add a user-specifiable search API at the Solr server with request parameters governed by what the user wants to advertise \u2013 especially useful within enterprises.  And, it could be used to enforce security requirements on allowable parameter valuables to Solr, so a javascript based Solr client could be allowed to talk to only a script based request handler which enforces the rules.",
    "attachments": {
        "SOLR-5005_ScriptRequestHandler_take3.patch": "https://issues.apache.org/jira/secure/attachment/12608956/SOLR-5005_ScriptRequestHandler_take3.patch",
        "patch": "https://issues.apache.org/jira/secure/attachment/12591122/patch",
        "SOLR-5005.patch": "https://issues.apache.org/jira/secure/attachment/12591214/SOLR-5005.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karthick Duraisamy Soundararaj",
            "id": "comment-13701553",
            "date": "2013-07-07T11:32:34+0000",
            "content": "Attaching a patch for the initial version. Multiple scripts could be configured with requestHanlder in solrconfig.xml.\n\neg. \n <requestHandler name=\"/select1\" class=\"solr.ScriptSearchHandler\">\n    <str name=\"script\">firstRequest.js</str>\n    <str name=\"script\">secondRequest.js</str>\n  </requestHandler>\n\nEach script should implement preRequest and postRequest hooks. In the preRequest hook presents an opportunity to modify the request parameters and postRequest hook provides an opportunity to play with the response.\n\nUnlike xml response writer, the json response writer would include only one reponse in the result. It needs to be changed. Before getting into the other changes and writing testcases, I would like to get feedback on this design. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13701616",
            "date": "2013-07-07T17:33:43+0000",
            "content": "1. How about supporting \"params\" just as the StatelessScripteUpdateProcessorFactory does?\n2. Is this a stand alone request handler that does nothing other than what is in the script, or does it subclass the search handler? If the latter, where in the query \"lifecycle\" does it hook in? If the former, how exactly does the script invoke the pieces of the traditional query processing lifecycle? Maybe both are needed.\n3. What methods (full JS signature) would a Script RH need to implement? "
        },
        {
            "author": "Karthick Duraisamy Soundararaj",
            "id": "comment-13701647",
            "date": "2013-07-07T19:42:40+0000",
            "content": "Jack,\n2. Is this a stand alone request handler that does nothing other than what is in the script, or does it subclass the search handler? If the latter, where in the query \"lifecycle\" does it hook in? If the former, how exactly does the script invoke the pieces of the traditional query processing lifecycle? Maybe both are needed.\nThis request handler extends search handler. The script has two functions, preRequest & postRequest called before and after making a call to SearchHandler.handleRequest(req,rsp). As an example, for the following configuration, firstRequest's preRequest function will be invoked, then searchHandler's handleRequestBody followed by firstRequest's postRequest method. \n\n<requestHandler name=\"/select1\" class=\"solr.ScriptSearchHandler\">\n  <str name=\"script\">firstRequest.js</str>\n</requestHandler>\n\n1. How about supporting \"params\" just as the StatelessScripteUpdateProcessorFactory does?\nThe preRequest hook can modify/add/remove the params through the reqParams, which is an instance of ModifiableSolrParams. Considering, the main goal of this scriptSearchHandler is to edit the params dynamically, I thought we might not actually need params. \n\n3. What methods (full JS signature) would a Script RH need to implement?\nfunction preRequest() \n{ /* Use the references : reqParams, request, response */}\nfunction postRequest() \n{ /* Use the references : request, response */}\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13701791",
            "date": "2013-07-08T05:33:44+0000",
            "content": "It's great to see you take a first cut at this Karthick.  I reviewed your patch.\n\nI was expecting a single script that has essentially full control of the logic of how to handle a request, and it would unlikely extend SearchHandler to do this.  If it wanted to loop N times and do that many internal searches where N is possibly dependent on the parameters, it could.  If it didn't want to do any searches and simply return \"Hello World\" or add a couple parameters together, it could.  I wish I articulated this vision...\n\nThe approach you've taken here surprises me because it wasn't what I expected.  It is more limited in that it can only \"wrap\" essentially a SearchHandler request by having the opportunity to intercept the parameters beforehand and modify the response afterwards.  And it is a fixed preconfigured stack of searches; it can't do a dynamic number of searches.  Is there some advantage to your approach I'm missing?\n\nIf we agree on the script being in-charge of actually executing the search, I think it should be easier to write simple scripts without the Java API bulk/complexity if there was a helper class exposed to the binding that is used to do the search.  This might be the facade design pattern.  The script shouldn't have to reference LocalSolrQueryRequest and ModifiableSolrParams by name, for example. It might take some time in actually using early iterations of this patch before we know what this facade should look like to make the script code light. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13701995",
            "date": "2013-07-08T13:31:07+0000",
            "content": "\n\n\tOnly JS is supported. We need only one language now. Need to add more only if there is a real pressing need\n\tCan store the scripts in files \"conf/script\" or it can be passed as a request parameter\n\tThis is only intended to query stuff. And there are very simple helpers added to make those things easy\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13701996",
            "date": "2013-07-08T13:35:34+0000",
            "content": "sample script\n\n\nvar requestParameterQuery = param('query'); //or p('query') as a short form\nvar results = q({'qt': '/select','q':requestParameterQuery}); // or inline this as q({'qt': '/select','q':p('query')})\nrsp.add('myfirstscriptresults', results.get('results'));// r is the SolrQueryResponse object\n// you may run more queries .  \n\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13702101",
            "date": "2013-07-08T16:32:21+0000",
            "content": "There are several distinct use cases I am interested in:\n\n1. A simple pre/post-query script to wrap a normal query. I think that's what the initial patch focused on.\n\n2. A replacement for full query processing that has hooks to get at all of the pieces of query processing. This could include multi-query processing.\n\n3. An arbitrary \"script request processor\" that is not tied to either query or update handling. This could be a simple hello world, or could be a combination of query and update. For example, emulate an atomic update with intelligent logic.\n\n4. A long-running, asynchronous version of #3. For example, add a field value to every existing document. One request to start it, a request to check its status, a request to pause/resume/abort it, and some way to send a message to indicate when it completes.\n\nThe script handler configuration should have \"defaults\" to configure the script parameters but also allow overrides on the request. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13702110",
            "date": "2013-07-08T16:47:32+0000",
            "content": "A simple pre/post-query script to wrap a normal query\nIt is possible to do pre/post in-between operations in this patch. In fact it does not differentiate between any of these ops. The query also has to be fired by the script , it just has helper methods to perform those\n\nAn arbitrary \"script request processor\" that is not tied to either query or update handling\n\nI wanted the handler to have more fine grained control , so that operations personnel can determine operations are allowed. a poor man's ACL. \n\nThe first and most basic is query-only. The next level would be query-update and probably a higher level which gives all access which a java RequestHandler gets\n\nA long-running, asynchronous version of #3\n\nI see it. It should be a simple request param to make it async. The only extra thing you would need is a status/kill command\n\n\nAll said and done. I wish to see some real use cases and make it possible in a very simple manner. It should look like a simple recipe for the very common use-cases.  "
        },
        {
            "author": "Karthick Duraisamy Soundararaj",
            "id": "comment-13702244",
            "date": "2013-07-08T18:29:52+0000",
            "content": "David Smiley Yes, I like your idea better. I could modify my code to achieve what you want. But at this point, I think Noble Paul's patch matches your expectation.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13703280",
            "date": "2013-07-09T13:55:01+0000",
            "content": "new methods and changed variable names "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13718105",
            "date": "2013-07-24T08:00:05+0000",
            "content": "Support for Just in time reading fields from SolrDocument. \nmoved to a separate package called 'js'\nsome helper methods for queries "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13780691",
            "date": "2013-09-28T04:57:55+0000",
            "content": "Commit 1527150 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1527150 ]\n\nSOLR-5005: remove accidental inclusion of JavaScriptRequestHandler in r1075960 (SOLR-2397) "
        },
        {
            "author": "David Smiley",
            "id": "comment-13798034",
            "date": "2013-10-17T16:20:18+0000",
            "content": "I took Noble's patch and ran with it a bit.  The attached patch fixed a bunch of bugs, generally improved code I didn't like, renamed the package, class names, parameters, etc. to my liking and for consistency with ScriptUpdateRequestProcessor, and I added support for other scripting languages.  It needs tests still, and some documentation.  This is a good point to get peer-review before continuing further.\n\nNoble, it seems you had some work-in-progress ideas for a DSL-like approach to querying, as evidenced in QueryUtil.  I didn't touch that part as it's not yet clear what your end-vision is going to look like.  If you don't have energy to continue that any time soon, it might better belong as a separate issue, and purge the code from this one.\n\nOh, one thing I wasn't clear on was why Docs.java is what it is \u2013 a ResultContext & Iterator<SolrDocument.  Was this intended as a general utility to exist outside of this scripting support?  It seems so.  In ScriptMethods.query(), I use it to \"materialize\" the ResultContext into a SolrDocumentList which is more usable by scripts. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13798081",
            "date": "2013-10-17T16:50:49+0000",
            "content": "Thanks David Smiley\nI'm not sure we should support many languages now. I know it is easy and tempting. But i shudder at the thought of someone using some esoteric JVM language which I'll find difficult to support. I wish to keep the option limited to 1 or 2 languages and extending the list as and when there is a need. \n\nyes.\nThe Docs.java should be a generic component to stream docs from a ResultContext. It can live as a separate utility\n\nI somehow fee that the DSL is kind of required for completeness. People should have a standard way of doing standard operations and the DSL helps in that. Once the JS thing becomes popular we as people who support users would like to see standard code. But it makes sense to keep it a separate issue "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13831832",
            "date": "2013-11-25T19:43:13+0000",
            "content": "Commit 1545378 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1545378 ]\n\nSOLR-5005: remove accidental inclusion of JavaScriptRequestHandler in r1521563 "
        },
        {
            "author": "David Smiley",
            "id": "comment-13991953",
            "date": "2014-05-07T15:58:33+0000",
            "content": "Here's an updated patch.  Changes:\n\n\tSupport Java 8 (Nashorn JavaScript engine)\n\t\n\t\tthe with($)\n{...}\n wrapper trick is now disabled as Nashorn doesn't like it. The query and param methods must be qualified by \"$.\" prefix.\n\t\n\t\n\tSupport engines that don't implement Compilable\n\tSupport engines that aren't thread-safe like Nashorn by pooling engines\n\tAdded test, including thread-safety of the bindings\n\n "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-14127463",
            "date": "2014-09-09T19:52:30+0000",
            "content": "Here is another use case. We currently do this in client code, but it would be nice to move it to Solr.\n\nWe run a query in \"strict\" mode, with mm=100%. If there are zero results, we run it in \"loose\" mode, with mm=1, and fuzzy matching. "
        },
        {
            "author": "jefferyyuan",
            "id": "comment-15290100",
            "date": "2016-05-18T23:42:35+0000",
            "content": "Very useful feature, this can make easier for developer to extend solr - only need change solrconfig.xml and add one script file. "
        },
        {
            "author": "dhirajforyou",
            "id": "comment-16650074",
            "date": "2018-10-15T11:02:57+0000",
            "content": "Definitely useful feature.\n\nI got in similar situation.\u00a0Can any one tell me is there any alternative to this, as its not yet merged ? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-16650080",
            "date": "2018-10-15T11:07:57+0000",
            "content": "David Smiley I'm not sure what is the status of this. Is it being worked upon?\n\nThis has several security implications. So, it may not be enabled by default.\n\nIf you think it's worth pursuing I can do a code review "
        },
        {
            "author": "David Smiley",
            "id": "comment-16651090",
            "date": "2018-10-16T04:00:29+0000",
            "content": "Thanks for the code review offer! \u00a0This one's on my long list of things to add to Solr \u2013 definitely very useful. \u00a0I haven't touched it in years so that's the status. \u00a0At the moment I'm trying to prioritize stuff that'd be important for 8.0; this is a new feature so isn't something I'm going to take up in the next couple\u00a0months. "
        }
    ]
}