{
    "id": "SOLR-11575",
    "title": "Cleanup Java Snippets in \"Using SolrJ\" ref-guide page",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "master (8.0)",
        "resolution": "Implemented",
        "status": "Closed"
    },
    "description": "Hoss pointed out on SOLR-11032 that some of the Java snippets don't do a great job of looking like\n\n\"real code\" a user might do something with in an app.\n\nParticularly, the snippets show how to obtain certain SolrJ objects, but they don't show readers what they can/should do with those objects.  The snippets might be more useful to readers if they printed information returned in the SolrJ object as a result of each API call.  Hoss specifically suggested setting up a print-asserter, which would appear to be a normal print-statement in the ref-guide snippet, but double as an assertion in the JUnit test where the snippet lives.\n\nThis JIRA involves giving that a shot.  It might make sense to figure this out before pulling more Java snippets into the build (as suggested in SOLR-11574).  On the flip side, extracting more snippets into the build might inform a better, consistent format/pattern for the snippets.  So these stories are related, but maybe not strict dependencies of one another.",
    "attachments": {
        "SOLR-11575.patch": "https://issues.apache.org/jira/secure/attachment/12899201/SOLR-11575.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-24T23:03:47+0000",
            "content": "The attached patch changes many of the tests in UsingSolrJRefGuideExamplesTest.java to use the print-based-assertion approach that Hoss suggested back on SOLR-11032.\n\n\nI switched the assertions over to being fake-print-driven if:\n\n\n\tthe assertion was \"doc-included\" into the ref-guide, OR\n\tdoing so improved the assertion itself (some assertions previously just checked for String non-emptiness, but now check for specific values)\n\n\n\nI put the print-assertion utility functions in the test class itself, which isn't the most re-usable.  We can put it somewhere more re-usable, but to make the best decision there it might be smart to figure out where else we might have these \"doc-included\" Java snippets.  I created SOLR-11574 to see what other ref-guide snippets might be unit-testable earlier, which seems like a good place to do that, if we don't want it blocking this JIRA.  I'm also fine holding up this JIRA until we answer the reuse question. \n\nFYI Hoss Man, as you requested this on 11032 ",
            "author": "Jason Gerlowski",
            "id": "comment-16265550"
        },
        {
            "date": "2017-12-12T00:41:29+0000",
            "content": "Commit 76b7bc3dbe825bac004b04f3baf70a0701194f76 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=76b7bc3 ]\n\nSOLR-11575: Improve ref-guide solrj snippets via mock 'print()' method\n\n(cherry picked from commit 5b2e25f301156fbe5b40e2abb670b985f74456de) ",
            "author": "ASF subversion and git services",
            "id": "comment-16286866"
        },
        {
            "date": "2017-12-12T00:41:32+0000",
            "content": "Commit 5b2e25f301156fbe5b40e2abb670b985f74456de in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5b2e25f ]\n\nSOLR-11575: Improve ref-guide solrj snippets via mock 'print()' method ",
            "author": "ASF subversion and git services",
            "id": "comment-16286867"
        },
        {
            "date": "2017-12-12T00:55:32+0000",
            "content": "Thanks Jason, these edits were great!\n\nFYI, made one addition change...\n\n\n+    expectLine(\"Found \"+NUM_LIVE_NODES+\" live nodes\");\n...\n-    assertEquals(NUM_LIVE_NODES, liveNodes.size());\n+    print(\"Found \" + liveNodes.size() + \" live nodes\");\n\n\n\nI put the print-assertion utility functions in the test class itself, which isn't the most re-usable.  We can put it somewhere more re-usable, ...\n\nIf/when we decide we want the same mock print(String) method in another test class we can consider refactoring it \u2013 but the main thing to remember is that \"print(...)\" is just what semed to make the most sense for these particula asserts.  It could have just as easily been a mock processResults(SolrDocument) method.  Down the road, we might want other snippets that use a mocked out SolrClient that asserts it's given the requests it expects, or a mocked out SolrParams class that asserts it gets the values the test expects.\n\nThe important thing is that we can focus on the snippets making sense in the context of the docs, and mocking whatever parts we need to ensure that the code in the snippets does what hte docs say they do \u2013 even if those mocks are different between different tests.\n ",
            "author": "Hoss Man",
            "id": "comment-16286897"
        }
    ]
}