{
    "id": "SOLR-8234",
    "title": "Federated Search (new) - DJoin",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "4.10.3"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "This issue describes a MergeStrategy implementation (DJoin) to facilitate federated search - that is, distributed search over documents stored in separated instances of SOLR (for example, one server per continent), where a single document (identified by an agreed, common unique id) may be stored in more than one server instance, with (possibly) differing fields and data.\n\nWhen the MergeStrategy is used in a request handler (via the included QParser) in combination with distributed search (shards=), documents having an id that has already been seen are not discarded (as per the default behaviour) but, instead, are collected and returned as a group of documents all with the same id taking a single position in the result set (this is implemented using parent/child documents, with an indicator field in the parent - see example output, below).\n\nDocuments are sorted in the result set based on the highest ranking document with the same id. It is possible for a document ranking high in one shard to rank very low on another shard. As a consequence of this, all shards must be asked to return the fields for every document id in the result set (not just of those documents they returned), so that all the component parts of each document in the search result set are returned.\n\nAs usual, search parameters are passed on to each shard. So that the shards do not need any additional configurations in their definition of the /select request handler, we use the FilterQParserSearchComponent which is configured to filter out the {!djoin} search parameter - otherwise, the target request handler complains about the missing query parser definition. See the example config, below.\n\nThis issue combines with others to provide full federated search support. See also SOLR-8235 and SOLR-8236.\n\nNote that this is part of a new implementation of federated search as opposed to the older issues SOLR-3799 through SOLR-3805.\n\n\u2013\n\nExample request handler configuration:\n\n\n  <searchComponent name=\"filter\" class=\"org.apache.solr.search.federated.FilterDJoinQParserSearchComponent\" />\n  \n  <queryParser name=\"djoin\" class=\"org.apache.solr.search.federated.DJoinQParserPlugin\" />\n\n  <requestHandler name=\"djoin\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str name=\"shards\">http://shard1/solr/core,http://shard2/solr/core,http://shard3/solr/core</str>\n      <bool name=\"shards.tolerant\">true</bool>\n      <str name=\"rq\">{!djoin}</str>\n    </lst>\n    <arr name=\"last-components\">\n      <str>filter</str>\n    </arr>\n  </requestHandler> \n\n\n\nExample output:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n  <lst name=\"responseHeader\">\n    <int name=\"status\">0</int>\n    <int name=\"QTime\">33</int>\n    <lst name=\"params\">\n      <str name=\"q\">*:*</str>\n      <str name=\"shards\">http://shard1/solr/core,http://shard2/solr/core,http://shard3/solr/core</str>\n      <str name=\"shards.tolerant\">true</str>\n      <str name=\"wt\">xml</str>\n      <str name=\"rq\">{!djoin}</str>\n      <str name=\"fl\">*,[shard]</str>\n    </lst>\n  </lst>\n  <result name=\"response\" numFound=\"5\" start=\"0\" maxScore=\"1.0\">\n    <doc>\n      <bool name=\"__merge_parent__\">true</bool>\n      <doc>\n        <int name=\"id\">200</int>\n        <int name=\"value\">1973</int>\n        <str name=\"[shard]\">http://shard2/solr/core</str>\n        <long name=\"_version_\">1515645309629235200</long>\n      </doc>\n      <doc>\n        <int name=\"id\">200</int>\n        <int name=\"value\">2015</int>\n        <str name=\"[shard]\">http://shard1/solr/core</str>\n        <long name=\"_version_\">1515645309682712576</long>\n      </doc>\n    </doc>\n    <doc>\n      <bool name=\"__merge_parent__\">true</bool>\n      <doc>\n        <int name=\"id\">100</int>\n        <int name=\"value\">873</int>\n        <str name=\"[shard]\">http://shard1/solr/core</str>\n        <long name=\"_version_\">1515645309629254124</long>\n      </doc>\n      <doc>\n        <int name=\"id\">100</int>\n        <int name=\"value\">2001</int>\n        <str name=\"[shard]\">http://shard3/solr/core</str>\n        <long name=\"_version_\">1515645309682792852</long>\n      </doc>\n    </doc>\n    <doc>\n      <bool name=\"__merge_parent__\">true</bool>\n      <doc>\n        <int name=\"id\">300</int>\n        <int name=\"value\">1492</int>\n        <str name=\"[shard]\">http://shard2/solr/core</str>\n        <long name=\"_version_\">1515645309629251252</long>\n      </doc>\n    </doc>\n  </result>\n</response>",
    "attachments": {
        "SOLR-8234.patch": "https://issues.apache.org/jira/secure/attachment/12770702/SOLR-8234.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-04T22:43:58+0000",
            "author": "Tom Winch",
            "content": "Patch against 4.10.3 ",
            "id": "comment-14990609"
        },
        {
            "date": "2015-11-18T15:37:15+0000",
            "author": "Tom Winch",
            "content": "Patch including <sortValue> in parent docs and improved unit test ",
            "id": "comment-15011212"
        },
        {
            "date": "2015-11-21T00:13:04+0000",
            "author": "Dennis Gove",
            "content": "Could the use-case here be solved using Streaming Aggregation (SOLR-7082) and in particular the joins added in SOLR-7584? With SA you can perform federated searches across multiple collections (even in other clouds) with joins, merges, uniqueness, ranking (top N), faceting, aggregations (group by). And you can do all of these in parallel across multiple workers like one would do in a map-reduce approach. ",
            "id": "comment-15019153"
        },
        {
            "date": "2015-12-10T14:12:05+0000",
            "author": "Tom Winch",
            "content": "some package renaming ",
            "id": "comment-15051007"
        },
        {
            "date": "2016-02-25T10:17:31+0000",
            "author": "Tom Winch",
            "content": "That would be another approach, I guess.  You'd still have to write the (custom) merge code, and the approach of this JIRA means you get back SOLR results as per usual, and it's a plugin that makes use of the existing distributed search mechanisms for requesting the top N unique ids from each server and merge-ranking them etc. ",
            "id": "comment-15167034"
        }
    ]
}