{
    "id": "LUCENE-448",
    "title": "optional norms",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "For applications with many indexed fields, the norms cause memory problems both during indexing and querying.\nThis patch makes norms optional on a per-field basis, in the same way that term vectors are optional per-field.\n\nOverview of changes:\n\n\tField.omitNorms that defaults to false\n\tbackward compatible lucene file format change: FieldInfos.FieldBits has a bit for omitNorms\n\tIndexReader.hasNorms() method\n\tDuring merging, if any segment includes norms, then norms are included.\n\tmethods to get norms return the equivalent 1.0f array for backward compatibility\n\n\n\nThe patch was designed for backward compatibility:\n\n\tall current unit tests pass w/o any modifications required\n\tcompatible with old indexes since the default is omitNorms=false\n\tcompatible with older/custom subclasses of IndexReader since a default hasNorms() is provided\n\tcompatible with older/custom users of IndexReader such as Weight/Scorer/explain since a norm array is produced on demand, even if norms were not stored\n\n\n\nIf this patch is accepted (or if the direction is acceptable), performance for scoring  could be improved by assuming 1.0f when hasNorms(field)==false.",
    "attachments": {
        "omitNorms.txt": "https://issues.apache.org/jira/secure/attachment/12314776/omitNorms.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-10-27T06:46:50+0000",
            "content": "+1\n\nThis can greatly reduce the amount of memory used by indexes with lots of fields.\n\nIt might be nice to add something like a Field.Index.NO_NORMS, that assumes un-tokenized... ",
            "author": "Doug Cutting",
            "id": "comment-12356017"
        },
        {
            "date": "2005-10-27T10:10:45+0000",
            "content": "> It might be nice to add something like a Field.Index.NO_NORMS, that assumes un-tokenized...\n\nGood idea... un-tokenized fields don't need a lengthNorm anyway.\n\nMinor Q: Should fakeNorms() exist on IndexReader (as is now), or simply be private to both SegmentReader and MultiReader (the only two that need to generate fake norm arrays)?\n\nVery minor Q: Should the getter/setter currently named isOmitNorms()/setOmitNorms() be renamed... I followed the example of isStoreOffsetWithTermVector(), but omitNorms()/omitNorms(boolean)  reads nicer in code. ",
            "author": "Yonik Seeley",
            "id": "comment-12356034"
        },
        {
            "date": "2005-10-28T01:07:37+0000",
            "content": "Un-tokenized fields don't need a lengthNorm, but they can be boosted.  So it should be well documented that disabling norms disables boosting.\n\nI'd hide fakeNorms().  If user code shouldn't call it, then it shouldn't appear in the javadoc.  You could make it package-private.  Or, can you not make MultiReader.norms() rely on SegmentReader.norms() to create fake norms as needed?\n\nAs for naming setter/getters: I don't feel strongly about this.  I sometimes use get/set, even when I might prefer omitting them, simply because it is the fashion and the style police hassle me when I don't. ",
            "author": "Doug Cutting",
            "id": "comment-12356100"
        }
    ]
}