{
    "id": "SOLR-8451",
    "title": "We should not call method.abort in HttpSolrClient and HttpSolrCall#remoteQuery should not close streams.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "",
    "attachments": {
        "SOLR-8451.patch": "https://issues.apache.org/jira/secure/attachment/12779253/SOLR-8451.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-21T17:20:49+0000",
            "author": "Mark Miller",
            "content": "See https://issues.apache.org/jira/browse/SOLR-7339?focusedCommentId=15066701&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15066701\nand\nhttps://issues.apache.org/jira/browse/SOLR-7339?focusedCommentId=15066716&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15066716 ",
            "id": "comment-15066733"
        },
        {
            "date": "2015-12-21T17:29:38+0000",
            "author": "Mark Miller",
            "content": "\"I moved the method abort call out of 'shouldClose' - it doesn't seem like it should be tied up in that.\nI also made it first. I was just kind of guessing on that, but it looks like it should be first according to: https://hc.apache.org/httpcomponents-client-ga/httpclient/examples/org/apache/http/examples/client/ClientAbortMethod.java\" ",
            "id": "comment-15066746"
        },
        {
            "date": "2015-12-21T17:30:04+0000",
            "author": "Mark Miller",
            "content": "\nIndex: solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java\n===================================================================\n--- solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java\t(revision 1720969)\n+++ solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java\t(working copy)\n@@ -589,14 +589,16 @@\n       throw new SolrServerException(\n           \"IOException occured when talking to server at: \" + getBaseURL(), e);\n     } finally {\n-      if (respBody != null && shouldClose) {\n-        try {\n-          respBody.close();\n-        } catch (IOException e) {\n-          log.error(\"\", e);\n-        } finally {\n-          if (!success) {\n-            method.abort();\n+      try {\n+        if (!success) {\n+          method.abort();\n+        }\n+      } finally {\n+        if (respBody != null && shouldClose) {\n+          try {\n+            respBody.close();\n+          } catch (IOException e) {\n+            log.error(\"\", e);\n           }\n         }\n       }\n\n ",
            "id": "comment-15066748"
        },
        {
            "date": "2015-12-23T01:49:15+0000",
            "author": "Mark Miller",
            "content": "I'm evolving this patch in SOLR-8453. Quote from that issue: \n\nI think we overdo method.abort and I think it messes up connection reuse. On a clean server->client exception, we should simply make sure the response entity content is fully consumed and closed like a normal request. ",
            "id": "comment-15069018"
        },
        {
            "date": "2015-12-23T14:40:15+0000",
            "author": "Mark Miller",
            "content": "Okay, I dug into this a bit. Actually, we should not call abort at all. Right now, since we call it after close, it's harmless though.\n\nAlso, ConcurrentUpdateSolrClient very oddly seem to always not read that last 40 or 44 bytes of the server response even on successful requests. That's odd, but should not mess with connection reuse. We only have to ensure we close the content stream, not read it all. ",
            "id": "comment-15069681"
        },
        {
            "date": "2015-12-23T15:35:12+0000",
            "author": "Karl Wright",
            "content": "I don't follow the reasoning here.  AFAICT method.abort should be called whenever there's any chance that the response has not been fully read, which would be the case if an exception was thrown. ",
            "id": "comment-15069751"
        },
        {
            "date": "2015-12-23T15:41:46+0000",
            "author": "Mark Miller",
            "content": "whenever there's any chance that the response has not been fully read\n\nNo documentation I can find says that.\n\nIf you make a little test, you will see that method.abort prevents connection reuse. When Solr throws expected errors for updates, we don't want to poison the connection, we want it to go back to the pool. If we actually had to read the full stream, it would be better to just do that. But again, testing and any documentation I can find shows that we just have to close the stream - we don't have to read it all. And connections are released happily back to the pool for reuse.\n\nThere is no need for abort here. Nor was it even having an affect when it was called after the content stream close (which it always was). ",
            "id": "comment-15069755"
        },
        {
            "date": "2015-12-23T16:15:55+0000",
            "author": "Karl Wright",
            "content": "Hmm, under some circumstances this is definitely not the right thing to do.  http://stackoverflow.com/questions/1565349/cancel-abort-a-connection-from-the-threadsafeclientconnmanager-connection-pool ",
            "id": "comment-15069812"
        },
        {
            "date": "2015-12-25T00:48:16+0000",
            "author": "Mark Miller",
            "content": "It's the right thing to do. I have read the doc, the code, and mailing list info. I have done tests.\n\nAfter you are done using a connection you need to do either two things: abort it or close the content stream. If you abort it, you won't reuse the connection. There is no need to read through the whole inputstream. There is no need to use abort in normal safe code unless you need that as a feature to interrupt a request. All the proper example code shows the pattern to use is to just close the content input stream.\n\nIn the end, it's really simple to test by hand and see what causes connection reuse and what breaks it.\n\nIt was a mistake to add the abort call, but luckily it never had an effect - closing the content stream ended the request first anyway. ",
            "id": "comment-15071304"
        },
        {
            "date": "2016-01-05T21:35:25+0000",
            "author": "Mark Miller",
            "content": "I have a connection reuse test that hits HttpSolrClient, CloudSolrClient, and ConcurrentUpdateSolrClient. Once I polish it up a little, I'll commit it with this issue. ",
            "id": "comment-15083852"
        },
        {
            "date": "2016-01-05T23:27:13+0000",
            "author": "Mark Miller",
            "content": "Patch with connection reuse test attached. This new test won't work until we address the troublesome Jetty upgrade. ",
            "id": "comment-15084045"
        },
        {
            "date": "2016-01-07T19:37:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1723615 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1723615 ]\n\nSOLR-8451: We should not call method.abort in HttpSolrClient or HttpSolrCall#remoteQuery and HttpSolrCall#remoteQuery should not close streams. ",
            "id": "comment-15087953"
        },
        {
            "date": "2016-01-13T22:04:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724516 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724516 ]\n\nSOLR-8451: We should not call method.abort in HttpSolrClient or HttpSolrCall#remoteQuery and HttpSolrCall#remoteQuery should not close streams. ",
            "id": "comment-15097099"
        },
        {
            "date": "2016-01-21T05:40:27+0000",
            "author": "Mark Miller",
            "content": "Okay, I'd like to come back to this and actually add an attempt to make sure we have always consumed the full response inputstream before closing it.\n\nI have read, and testing shows, HttpClient appears to clean up these situations for us. We have fine connection reuse, even under error conditions. However, given Jetty was doing this for us on the server side basically, and then all of a sudden it was only half hearted attempting it (which broke us), I think it's better to put it into our client code explicitly.\n\nJust would make me sleep better, especially considering issues like SOLR-8578 ConcurrentUpdateSolrServer with BinaryResponseParser leaves 40-42 bytes unconsumed from the request response even without errors. ",
            "id": "comment-15110095"
        },
        {
            "date": "2016-01-22T02:29:23+0000",
            "author": "Mark Miller",
            "content": "HttpClient appears to clean up these situations for us.\n\nI have not been able to find it in the code. Perhaps it's java itself actually:\n\nPrior to JDK 6, if an application closes a HTTP InputStream when more than a small amount of data remains to be read, then the connection had to be closed, rather than being cached. Now in JDK 6, the behavior is to read up to 512 Kbytes off the connection in a background thread, thus allowing the connection to be reused. The exact amount of data which may be read is configurable through the http.KeepAlive.remainingData system property.\n\n\n\nAll the more reason to do it right our self if so.\n\nIt may be the case that simply closing the inputstream is all we need to do:\n\nif the response body is long and you are not interested in the rest of it after seeing the beginning, you can close the InputStream. \n\nBut, that may usually work, but not always:\n\nBut you need to be aware that more data could be on its way. Thus the connection may not be cleared for reuse.\n\nSo I see great connection reuse in tests, but this is all hairy stuff. We need to consume these streams just to be sure we are hitting every case. ",
            "id": "comment-15111807"
        },
        {
            "date": "2016-01-28T17:34:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 62c9b6a1724fb466fd767457b7bbdeb24e164036 in lucene-solr's branch refs/heads/master from Mark Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=62c9b6a ]\n\nSOLR-8451: fix randomization in test. ",
            "id": "comment-15121939"
        },
        {
            "date": "2016-01-28T17:40:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 93172e461f76816474c1a1f2be8118c4b5e8538e in lucene-solr's branch refs/heads/branch_5x from Mark Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=93172e4 ]\n\nSOLR-8451: fix randomization in test. ",
            "id": "comment-15121955"
        }
    ]
}