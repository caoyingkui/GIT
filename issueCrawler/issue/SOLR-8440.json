{
    "id": "SOLR-8440",
    "title": "Script support for enabling basic auth",
    "details": {
        "components": [
            "scripts and tools"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Now that BasicAuthPlugin will be able to work without an AuthorizationPlugin (SOLR-8429), it would be sweet to provide a super simple way to \"Password protect Solr\"\u2122 right from the command line:\n\n\nbin/solr basicAuth -adduser -user solr -pass SolrRocks\n\n\n\nIt would take the mystery out of enabling one single password across the board. The command would do something like this\n\n\tCheck if HTTPS is enabled, and if not, print a friendly warning\n\tCheck if /security.json already exists\n\t\n\t\tNO => create one with only plugin class defined\n\t\tYES => Abort if exists but plugin is not BasicAuthPlugin\n\t\n\t\n\tUsing security REST API, add the new user",
    "attachments": {
        "SOLR-8440.patch": "https://issues.apache.org/jira/secure/attachment/12865596/SOLR-8440.patch",
        "SOLR-8840_opt_parsing.patch": "https://issues.apache.org/jira/secure/attachment/12867761/SOLR-8840_opt_parsing.patch",
        "SOLR-8440-follow-up.patch": "https://issues.apache.org/jira/secure/attachment/12867663/SOLR-8440-follow-up.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-24T04:27:04+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I'm planning to work on this soon. ",
            "id": "comment-15881920"
        },
        {
            "date": "2017-02-24T04:40:27+0000",
            "author": "Noble Paul",
            "content": "I guess we must enable RulebasedAuthorization as well. ensure that collection-admin-edit, core-admin-edit,security-edit are protected ",
            "id": "comment-15881936"
        },
        {
            "date": "2017-02-24T04:47:23+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Agreed. ",
            "id": "comment-15881944"
        },
        {
            "date": "2017-02-24T11:34:18+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "For this feature I simply intended to add ONE user which can do everything (blockUnknown=true), and if you don't authenticate you cannot do anything. That's the first, simplest, most logical and most useful step for a random user. We should probably have a usage like this for completeness and future proof:\n\n\nbin/solr auth -type basic <adduser|deluser|setprop|delprop> [-user <user>] [-pass <pass>] [-prop <key>[=value]]\n\n\n\nLet's create another JIRAs for enabling Authorization, defining groups, adding users to groups etc... ",
            "id": "comment-15882489"
        },
        {
            "date": "2017-02-24T15:18:52+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Or perhaps multiple sub commands for the various steps\n\nbin/solr auth enable [-f] -type <basic|kerberos|hadoop>   # -f Force to change from existing?\n# This sets an empty {{authentication}} object with class only in security.json, now you can start using the REST API if you wish\nbin/solr auth [--user=solr:SolrRocks] setuser <user=pass>\nbin/solr auth property [-d] <key=prop>\n\n ",
            "id": "comment-15882863"
        },
        {
            "date": "2017-04-28T18:15:05+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "WIP patch.\n\n\n\tIntroduces the \"auth\" command, e.g. bin/solr auth -enable -type basic -adminuser solr -adminpassword SolrRocks\n\tSupport for optional blocksUnknown (false by default)\n\tTODO: Put the hash of the password. Currently hardcoded to hash of \"SolrRocks\"\n\tTODO: Introduce a separate file and put the admin username/password there for use by the script. If user wants, the bin/solr.in.sh can be used to override this user/pw. Added auth.overlay.sh file, which is applied after solr.in.sh has been applied. This file is created during -enable, and deleted during -disable.\n\tTODO: Do pre-checks before enabling; don't do anything if already enabled.\n\tUploads the following security.json by default (apart from the user/password hash variant.\n\tTODO: Windows script (bin/solr.cmd)\n\n\n\n\n{\n  \"authentication\":{\n   \"blockUnknown\": $blockUnknown\n   \"class\":\"solr.BasicAuthPlugin\",\n   \"credentials\":{$user:$saltedhash_of_password}\n  },\n  \"authorization\":{\n   \"class\":\"solr.RuleBasedAuthorizationPlugin\",\n   \"permissions\":[\n\t{\"name\":\"security-edit\", \"role\":\"admin\"},\n\t{\"name\":\"collection-admin-edit\", \"role\":\"admin\"},\n\t{\"name\":\"core-admin-edit\", \"role\":\"admin\"}\n   ],\n   \"user-role\":{\"$user\":\"admin\"}\n  }\n}\n\n\n\nWith just this in place (after fixing TODOs and nocommits), one can enable basicauth with typical authz configuration. After this, the user can use the REST API for authc/authz, or we can build further support for adding users, roles etc. to the script. ",
            "id": "comment-15989260"
        },
        {
            "date": "2017-04-29T01:09:11+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Another WIP patch. This is functionally complete: -enable and -disable both work. Updating the TODO items in the previous comment. ",
            "id": "comment-15989672"
        },
        {
            "date": "2017-05-05T23:03:50+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch. Fixes the TODOs and nocommits.\nThis seems ready now. Would appreciate if someone can please review.\n\nNote: This issue is for \"enabling basicAuth\", and the attached patch does only that. However, for a full set of capabilities, like adding users, roles, one should be using the HTTP API right now. In a subsequent issue, such support can be baked into the script itself. ",
            "id": "comment-15999088"
        },
        {
            "date": "2017-05-05T23:15:43+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch, minor cleanup. ",
            "id": "comment-15999098"
        },
        {
            "date": "2017-05-07T18:52:41+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "This patch assumes that Auth can only be enabled with SolrCloud. However, we now also support security.json in $SOLR_HOME for standalone.\nPropose to try to replace explicit zkClient logic with using SecurityConfHandler, (SecurityConfHandlerLocal/SecurityConfHandlerZk somehow. They have a nice SecurityConfig abstraction as well as persistConf(SecurityConfig securityConfig) methods. May need to refactor some of these into static methods or something to access from SolrCLI though. ",
            "id": "comment-15999996"
        },
        {
            "date": "2017-05-08T03:23:06+0000",
            "author": "Noble Paul",
            "content": "there is no concept of an admin role in Solr. So it makes no sense to have an argument such as adminuser and adminpassword . Can we have another choice?\n ",
            "id": "comment-16000212"
        },
        {
            "date": "2017-05-08T08:30:29+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I'm not super keen on the new auth.overlay.sh/cmd files. We're trying to get away from platform specific files, such as in SOLR-7871 and moving more stuff to Java space. Can we instead simply print\n\nSolr is now password protected. For continued use of bin/solr, please set these environment variables in your shell or in solr.in.sh/cmd:\nSOLR_AUTH_TYPE = \"basic\"\nSOLR_AUTHENTICATION_OPTS = \"-Dbasicauth=user:pass\"\n\n\nAlternatively, support an option to update solr.in.sh/cmd in-place (not rocket science with SolrCLI.java)\n\nbin/solr auth -enable [...] -persist\n\n\n\nAnother comment to the patch is that if $SOLR_INCLUDE is used when calling bin/solr, e.g. to run multiple instances from same install dir, your patch will fail to select a folder in which to place auth.overlay.sh, since $include will be empty. ",
            "id": "comment-16000434"
        },
        {
            "date": "2017-05-08T09:50:59+0000",
            "author": "Noble Paul",
            "content": "Ishan Chattopadhyaya I would agree with Jan H\u00f8ydahl let's close this issue by printing a message to add a couple of lines to solr.in.sh one extra file to manage is a PITA ",
            "id": "comment-16000522"
        },
        {
            "date": "2017-05-08T12:23:30+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Jan, Noble. I'll modify the patch to print the message. ",
            "id": "comment-16000662"
        },
        {
            "date": "2017-05-08T15:04:19+0000",
            "author": "Hrishikesh Gadre",
            "content": "In general its not a good idea to print the password on command-line or in log files. Can we avoid printing the password? May be replace actual password string with something like \"xxx\" and add a comment to replace \"xxx\" with actual password. What do you think? ",
            "id": "comment-16000871"
        },
        {
            "date": "2017-05-08T15:19:56+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "As long as the user types bin/solr auth ... -adminpassword SolrRocks on the cmdline anyway, does it give any added security in not printing that same password out in the response? It's easier for user to copy/paste for sure \n\nOf course we could wish for some more secure way of sending the password into the script. Guess that letting the OS read the pwd interactively from terminal is more secure, but awkward to script. ",
            "id": "comment-16000894"
        },
        {
            "date": "2017-05-08T15:21:45+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Hrishikesh, given that the credentials are specified by the user in clear text anyway, printing it out doesn't seem any worse.\n\nHowever, if we want the user to put in the credentials himself/herself in solr.in.sh (not very user friendly), we can do the following:\n\n\tThe script/SolrCLI prompts the user for the credentials.\n\tPrints out a message to put the password into the solr.in.sh with redacted credentials.\n\n\n\nPlease note that the credentials are to be present in solr.in.sh file in clear text anyway. ",
            "id": "comment-16000901"
        },
        {
            "date": "2017-05-08T15:50:35+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ishan Chattopadhyaya Jan H\u00f8ydahl Thanks for the comments. I haven't reviewed this patch in detail, but the basic auth mechanism supports specifying a configuration file (which would contain the password). User can set permissions for this config file such that only solr admin can read/modify/delete the file.\n\nhttps://github.com/apache/lucene-solr/blob/07cc043664c4b82c208237b111f698ab2ae0ae07/solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory.java#L51\n\nDoes this address your concerns? If yes, then it may be a good idea to expose this mechanism via the solr shell command instead of exposing passwords on command-line. \n\n\n\n\n ",
            "id": "comment-16000956"
        },
        {
            "date": "2017-05-08T18:04:16+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The steps required by the user to use the basicAuth sysprop (which supplies the credentials) or using the solr.httpclient.config sysprop (which supplies a file which contains the credentials) would be the same (i.e. manually follow printed instructions). In both options, the actual credentials will stay in clear text (either in solr.in.sh or a separate file). I don't see how this improves either security or ease of use.\n\nDue to the awkwardness of the scripting, I think we should avoid the prompt and make it easy to setup (by providing simple copy-paste lines). It will also help ignorant users, who might inadvertently copy the redacted line to the solr.in.sh and nothing will work for him. ",
            "id": "comment-16001215"
        },
        {
            "date": "2017-05-08T18:35:56+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated patch.\n\n\tRenamed -adminusername and -adminpassword to -credentials.\n\t-enable and -disable will print out instructions on editing solr.in.sh (in case of -enable, the exact line that needs to be added).\n\n ",
            "id": "comment-16001296"
        },
        {
            "date": "2017-05-08T18:48:57+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ishan Chattopadhyaya\n\nIn both options, the actual credentials will stay in clear text (either in solr.in.sh or a separate file). I don't see how this improves either security or ease of use.\n\nThe main difference is that the second option allows admins to customize the file permissions upfront such that the config file will be readable only to a set of trusted users on the system. Specifying password on the command-line has number of security related issues \n\nBTW what are the default file-permissions for the solr.in.sh ? Is it world readable?\n\nIt will also help ignorant users, who might inadvertently copy the redacted line to the solr.in.sh and nothing will work for him.\n\nThe second option also helps in this case. Since it just provides a file-system path, it is quite safe to be printed on the command-line. If a malicious user attempt to read this configuration file, he would get file permissions error from the operating system (assuming permissions are setup appropriately). ",
            "id": "comment-16001322"
        },
        {
            "date": "2017-05-08T19:52:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I also vote for keeping it user friendly first and foremost.\n\nHowever, one advantage of solr.httpclient.config is that the plaintext password will not be available as a system property. If it is passed in to Solr as system property it will be visible both in Admin UI and in ps -efwww. So if bin/solr auth.... is able to create the password file inside $SOLR_VAR_DIR for the instance, i.e. next to solr.in.sh and update solr.in.sh accordingly. ",
            "id": "comment-16001435"
        },
        {
            "date": "2017-05-08T20:15:33+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "To be clear, Jan, do you suggest (a) just printing out a message instructing the user to add something to solr.in.sh himself, or (b) updating solr.in.sh through the SolrCLI? In the interest of ease of use, I prefer (b), but I got the impression from comments above (except your last one) that Noble and you prefer (a).\n\nHrishikesh, I'll add support for both a prompt and ability to pass credentials to the script. We can document both options. ",
            "id": "comment-16001455"
        },
        {
            "date": "2017-05-08T20:44:34+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I'm just pointing out that whatever we add to solr.in.sh will in some way end up as Java Properties on the command line when Solr is started, and the \"superuser\" password may therefore leak out to users logged in with a read-only password, say, for search only.\n\nStrictly speaking, is there any reason why the bin/solr start command should need to pass SOLR_AUTHENTICATION_OPTS on the command line? Solr will start without a password, it is only the other CLI commands that need authentication. So if we instead remove these from the start command, there should be no problem having plain-text password in solr.in.sh. Of course, an attacker with access to the server could run ps and reveal the password if there is a long-running bin/solr command being run just then.\n\nBTW what are the default file-permissions for the solr.in.sh ? Is it world readable?\nI checked a Solr installed using install_solr_service.sh and found this to be world readable:\n\n-rw-r--r-- 1 root root 5968 Feb 15 14:55 /etc/default/solr.in.sh\n\n\nFor better security, I guess this should rather have been\n\n-rw-r----- 1 root solr 5968 Feb 15 14:55 /etc/default/solr.in.sh\n\n\nor perhaps rw for 'solr' user, if the start script needs to modify it. ",
            "id": "comment-16001492"
        },
        {
            "date": "2017-05-08T21:33:53+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ishan Chattopadhyaya and Jan H\u00f8ydahl\n\nHrishikesh, I'll add support for both a prompt and ability to pass credentials to the script. We can document both options.\n\nFor better security, I guess this should rather have been\n\n-rw-r----- 1 root solr 5968 Feb 15 14:55 /etc/default/solr.in.sh\n\n\n\n+1 to both the suggestions. Let's not sacrifice security for the sake of usability. Let users decide what works for them depending on their security requirements.\n\n ",
            "id": "comment-16001585"
        },
        {
            "date": "2017-05-08T22:11:25+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Ishan Chattopadhyaya, have you tested the patch with -blockUnknown true?\nIf I'm not mistaken, it will cause Solr to be locked down and not even the admin user will be able to /query or /update \nIs there any way, using same security.json, to just flip blockUnknown and allow the admin user to do everything once authenticated?\n\nOr perhaps we should add support for an optional \"normal\" user right away. We could have three different hardcoded security.json files for these three cases:\nA: Auth always required, but only one user who has all power (implicit blockUnknown and an \"all\" permission for the \"user\" role):\n\nbin/solr auth -enable -type basic -user solr -password normalUser\n\n\nB: Normal query / update activity not protected, but security-edit, collection edit requires admin user (as current patch)\n\nbin/solr auth -enable -type basic -adminuser solr -adminpassword SolrRocks\n\n\nC: Auth always required, the admin user is required for security, collection etc, while an ordinary user can do all the rest (implicit blockUnknown=true):\n\nbin/solr auth -enable -type basic -adminuser solr -adminpassword SolrRocks -user solr -password normalUser\n\n\n\nI think the current assumption that most novice users would be happy with B is not realistic. I don't even know if it makes sense to try to model the full power of the Authorization REST API on the command line - if you need complex stuff you'd probably use REST APIs, but perhaps these three use cases can cover 80% of typical user needs? ",
            "id": "comment-16001649"
        },
        {
            "date": "2017-05-09T05:38:42+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated patch.\n\n\t-enable now accepts -credentials solr:SolrRocks or -prompt\n\tUpdating the solr.in.sh/solr.in.cmd in-place to comment out existing variables and to append necessary variables.\n\n ",
            "id": "comment-16002068"
        },
        {
            "date": "2017-05-09T05:45:51+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Ishan Chattopadhyaya, have you tested the patch with -blockUnknown true? If I'm not mistaken, it will cause Solr to be locked down and not even the admin user will be able to /query or /update\n\nI have tested the blockUnknown functionality here. When used, this locks down Solr to everyone, except the initial user (that was added to the admin role using the -enable). More users can be added using REST API by using that user's credentials.\n\nIs there any way, using same security.json, to just flip blockUnknown and allow the admin user to do everything once authenticated?\nblockUnknown is meant to block out access for those users that are not known to the system. The user that was already added (and given admin role) will continue to have access to do whatever he wants. ",
            "id": "comment-16002079"
        },
        {
            "date": "2017-05-09T06:18:25+0000",
            "author": "Noble Paul",
            "content": "adminpassword is still there ",
            "id": "comment-16002124"
        },
        {
            "date": "2017-05-09T06:48:11+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "adminpassword is still there\nRemnants of the previous patch. Updated to remove it. This is ready, planning to commit shortly. ",
            "id": "comment-16002165"
        },
        {
            "date": "2017-05-09T06:50:24+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "not even the admin user will be able to /query or /update\nI tested that the initial user (with admin role) is able to issue /query and /select, as well as collection-edit operations. All other users are blocked out. ",
            "id": "comment-16002167"
        },
        {
            "date": "2017-05-09T06:52:52+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "It'd probably be safer to read password from the command line using Console.readPassword. See http://docs.oracle.com/javase/7/docs/api/java/io/Console.html#readPassword%28%29 ",
            "id": "comment-16002171"
        },
        {
            "date": "2017-05-09T06:56:35+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "It'd probably be safer to read password from the command line using Console.readPassword. See http://docs.oracle.com/javase/7/docs/api/java/io/Console.html#readPassword%28%29\nIndeed, done exactly that in the patch. This is available for use if -prompt is specified. For users who insist on passing in credentials through command line, -credentials solr:SolrRocks is available. ",
            "id": "comment-16002176"
        },
        {
            "date": "2017-05-09T06:58:36+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Ah sorry I didn't notice. Sorry for the noise. ",
            "id": "comment-16002180"
        },
        {
            "date": "2017-05-09T07:14:16+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c9541c216d57ff816d64beef566990d8754008db in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c9541c2 ]\n\nSOLR-8440: Support for enabling basic authentication using bin/solr|bin/solr.cmd\n\n  Usage:\n    bin/solr auth -enable -prompt\n    bin/solr auth -enable -credentials solr:SolrRocks\n    bin/solr auth -disable ",
            "id": "comment-16002200"
        },
        {
            "date": "2017-05-09T07:21:43+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4dbc3fcb9ed783f8ae3ded22faebde4bcac53745 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4dbc3fc ]\n\nSOLR-8440: Support for enabling basic authentication using bin/solr|bin/solr.cmd\n\n  Usage:\n    bin/solr auth -enable -prompt\n    bin/solr auth -enable -credentials solr:SolrRocks\n    bin/solr auth -disable ",
            "id": "comment-16002205"
        },
        {
            "date": "2017-05-09T07:22:22+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks everyone for valuable inputs! ",
            "id": "comment-16002207"
        },
        {
            "date": "2017-05-09T08:03:03+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I tested that the initial user (with admin role) is able to issue /query and /select, as well as collection-edit operations. All other users are blocked out.\nAh, thanks for testing, that is just perfect  I think you found a good balance between usability and security in this issue, thanks Ishan! ",
            "id": "comment-16002245"
        },
        {
            "date": "2017-05-09T08:38:26+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "A comment on the choice of location for basicAuth.conf. It will be placed next to SOLR_INCLUDE_FILE. Three problems with that:\n\n\tinstall_solr_service.sh defaults to /etc/default as location for solr.in.sh, and that folder is only writable by root, and creation of the new file will fail\n\tWhen installing multiple instances of Solr on same node, the second instance will use e.g. /etc/default/solr2.in.sh, but you're only using a static file name basicAuth.conf which will then overwrite the password for the previous instance already running.\n\tThe generic name basicAuth.conf is bad if the file will reside in a non-solr-specific path such as /etc/default/\n\n\n\nDue to these three issues, should we change the default location of basicAuth.conf to SOLR_VAR_DIR instead, since this folder is guaranteed unique per Solr instance /var/solr, /var/solr2 etc, and the solr user already have write access to it, and it's where we already put PID file.\n\nI think that change can be done by re-opening this issue and doing another commit.\n\nIn addition, we should spin off new JIRAs:\n\n\tTo change default permission of solr.in.sh to writable by Solr user, as discussed above SOLR-10644\n\tTo make solr auth command work in non-cloud mode, as commented a few days ago SOLR-10645\n\tTo modify bin/solr to NOT pass authentication options on cmdline for solr start as also discussed above SOLR-10646\n\n ",
            "id": "comment-16002292"
        },
        {
            "date": "2017-05-09T08:55:54+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The bin/solr script has no notion of SOLR_VAR_DIR. I'm not familiar with the bin/install_solr_service.sh, which has the SOLR_VAR_DIR. Can you please advice how to proceed, or cook up a patch for this? Also, I can look at it myself, but I might miss the 6.6 release branch cutoff. But, maybe, this is fine to fix even after release branch is cut. ",
            "id": "comment-16002316"
        },
        {
            "date": "2017-05-09T08:58:28+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "install_solr_service.sh defaults to /etc/default as location for solr.in.sh, and that folder is only writable by root, and creation of the new file will fail\n\nIn the event that a file is not writeable, I have just printed out the lines which need to be copy-pasted. ",
            "id": "comment-16002322"
        },
        {
            "date": "2017-05-09T09:23:29+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The bin/solr script has no notion of SOLR_VAR_DIR\nI know. The script only knows about SOLR_TIP, SOLR_HOME, SOLR_PID_DIR etc. \n\nSOLR_PID_DIR will default to $SOLR_TIP/bin, but if custom SOLR_HOME is set, then SOLR_PID_DIR will be equal to SOLR_HOME, unless SOLR_PID_DIR is set explicitly, as it is by the installer...\n\nIf we chose SOLR_PID_DIR as location for basicAuth.conf then\n\n\tIn a default unzipp'ed install, it will end up in bin/ next to start script\n\tIn the default linux installer setup it will end up in /var/solr/\n\tIn a custom install it will end up next to PID file which is probably in SOLR_HOME.\n\n\n\nSo perhaps simply SOLR_HOME is as good location as anything, where also solr.xml, zoo.cfg, and security.json for non-cloud already are? You decide... ",
            "id": "comment-16002357"
        },
        {
            "date": "2017-05-09T09:27:42+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "SOLR_HOME sounds good. I'll post a patch shortly. ",
            "id": "comment-16002361"
        },
        {
            "date": "2017-05-09T10:24:18+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The new sub command auth\u00a0is not advertised in help\n\n\nUsage: solr COMMAND OPTIONS\n       where COMMAND is one of: start, stop, restart, status, healthcheck, create, create_core, create_collection, delete, version, zk\n\n ",
            "id": "comment-16002441"
        },
        {
            "date": "2017-05-09T10:30:43+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Running solr auth -enable without starting Solr throws a stack trace instead of printing usage. Do we need to hit localhost HTTP before validating program args?\n\nException in thread \"main\" org.apache.http.conn.HttpHostConnectException: Connect to localhost:80 [localhost/127.0.0.1] failed: Connection refused (Connection refused)\n\tat org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:151)\n\n\n\nIf you move the getZkHost(cli) check to after the credentials check, then it's a bit better.\n\nAlso, can we add an option zkHost to the auth options, so that it is possible to specify -zkHost localhost:2181 and enable auth without a running Solr? This is nice for scripting installers. ",
            "id": "comment-16002449"
        },
        {
            "date": "2017-05-09T10:50:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Ishan Chattopadhyaya did you actually test your patch, copying the two lines into solr.in.sh?\nCause when I try it here, I get nullpointer exception in PreemptiveBasicAuthClientBuilderFactory:\n\nsolr@osboxes:/opt/solr$ bin/solr status\n\nFound 1 Solr nodes: \n\nSolr process 6555 running on port 8983\nException in thread \"main\" java.lang.ExceptionInInitializerError\n\tat org.apache.solr.util.SolrCLI.getHttpClient(SolrCLI.java:567)\n\tat org.apache.solr.util.SolrCLI$StatusTool.getStatus(SolrCLI.java:891)\n\tat org.apache.solr.util.SolrCLI$StatusTool.runImpl(SolrCLI.java:849)\n\tat org.apache.solr.util.SolrCLI$ToolBase.runTool(SolrCLI.java:160)\n\tat org.apache.solr.util.SolrCLI.main(SolrCLI.java:258)\nCaused by: java.lang.NullPointerException\n\tat org.apache.solr.client.solrj.impl.PreemptiveBasicAuthClientBuilderFactory.initHttpClientBuilder(PreemptiveBasicAuthClientBuilderFactory.java:114)\n\tat org.apache.solr.client.solrj.impl.PreemptiveBasicAuthClientBuilderFactory.getHttpClientBuilder(PreemptiveBasicAuthClientBuilderFactory.java:109)\n\tat org.apache.solr.client.solrj.impl.HttpClientUtil.<clinit>(HttpClientUtil.java:142)\n\t... 5 more\n\n\n\nTurns out you have a typo in the instructions, see SolrCLI.java#L3711, it should be -Dbasicauth= without uppercase \"A\".\n\nOther nitpick:\n\n\tMethod updateIncludeFileEnableAuth takes username, password as args but they are never used\n\tWrong code indent in SolrCLI#3629-3671\n\n ",
            "id": "comment-16002475"
        },
        {
            "date": "2017-05-09T10:53:32+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Jan, I'll fix shortly! ",
            "id": "comment-16002480"
        },
        {
            "date": "2017-05-09T11:09:14+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The 6.6 release branch is cut in a few hours. Are you confident that this feature will have good enough quality to go in 6.6? The patch does not contain a single unit test. I would expect it to be possible to cover most of the SolrCLI functionality in with unit tests. bin/solr is harder or course. Is it well tested on Windows? ",
            "id": "comment-16002500"
        },
        {
            "date": "2017-05-09T19:23:01+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "So perhaps simply SOLR_HOME is as good location as anything, where also solr.xml, zoo.cfg, and security.json for non-cloud already are\n\nIt seems that SOLR_HOME is only applicable in the context of a start command, where the home directory is specifically provided by the user. However, for a running Solr instance, it should be possible to query it to know which home directory it started with. But, I'm not sure how to get at the home directory (or what a home directory even means) for a not-yet-started Solr instance (assuming that your motivation behind suggesting a -zkUrl was that a not-yet-started instance could also leverage -enable). Any ideas, Jan H\u00f8ydahl? ",
            "id": "comment-16003359"
        },
        {
            "date": "2017-05-09T21:49:55+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "But, I'm not sure how to get at the home directory\nThe bin/solr script already resolves the SOLR_HOME variable but as you say, only for \"start\" command. Guess we have to move the SOLR_HOME resolution lines higher up in the script\n\nif [ -z \"$SOLR_HOME\" ]; then\n  SOLR_HOME=\"$SOLR_SERVER_DIR/solr\"\nelse\n  if [[ $SOLR_HOME != /* ]] && [[ -d \"$SOLR_SERVER_DIR/$SOLR_HOME\" ]]; then\n    SOLR_HOME=\"$SOLR_SERVER_DIR/$SOLR_HOME\"\n    SOLR_PID_DIR=\"$SOLR_HOME\"\n  elif [[ $SOLR_HOME != /* ]] && [[ -d \"`pwd`/$SOLR_HOME\" ]]; then\n    SOLR_HOME=\"$(pwd)/$SOLR_HOME\"\n  fi\nfi\n\n\n\nIt should then work for both cold and running Solr. If SOLR_HOME is given in ENV or solr.in.sh it will be used, else it will be resolved to server/solr. No need to ask the running Solr where its home dir is, the bin/solr script already knows (unless an instance was started one-off with -s <dir> on the command line. However, let's assume in the first version that SOLR_HOME is either the default or is specified in env or solr.in.sh. So to configure auth for another instance, it could look like\n\nbin/solr auth -enable .... -s /path/to/solrhome -zkHost localhost:2181  # Explicitly point out both home and zk\nSOLR_INCLUDE=/path/to/our/instance/solr.in.sh && bin/solr auth -enable ...  # Pull both SOLR_HOME and ZK_HOST from solr.in\n\n\nIn a later version we could of course also support\n\nbin/solr auth -enable .... -p 8984  # Lookup what home and zk the running solr is using\nbin/solr auth -enable .... -i /path/to/solr.in.sh  # Explicitly point to solr.in.sh instead of setting SOLR_INCLUDE\n\n\nAnother benefit of always knowing where SOLR_HOME is, is that SOLR-10645 will know where to put security.json too  ",
            "id": "comment-16003623"
        },
        {
            "date": "2017-05-11T17:03:10+0000",
            "author": "Hoss Man",
            "content": "NOTE: i posted a longish comment in SOLR-10644 against that change...\n\nFWIW: I'm -0 on the installer making solr.in.sh writable by any user other then the user running the installer (ie: \"root\"). ...\n\nSince that jira seems to have been motivated entirely by this feature, It seems important for me to cross post here a -0 towards the current solution of how the changes script should be able to modify solr.in.sh ... if people feel this goal is important then as i mentioned in SOLR-10644 ...\n\n... the solution to that objective should be error checking and help messages instructing the user that those specific commands need to be run as root via {{sudo bin/solr ... }} ",
            "id": "comment-16006782"
        },
        {
            "date": "2017-05-11T17:40:29+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "if people feel this goal is important then as i mentioned in SOLR-10644 ...\nIn my opinion, it is not necessary. The changes supposed to be made to solr.in.sh in this issue are printed out for the user to put in himself/herself, in case the file is not writeable. ",
            "id": "comment-16006861"
        },
        {
            "date": "2017-05-11T19:59:41+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Hi, sorry for the quick commit on SOLR-10644. I'm willing to revert that any time.\n\nSo if I'm reading you correctly Hoss Man, a safer way for this is to let solr.in.sh still be owned by root, and print the manual instructions as today if we cannot write, but if solr auth... is run by root/sudo, then the solr.in.sh edit will succeed. Alternatively, we could always require root for all auth commands? Whatever we decide should be documentedt in the refGuide and usage. ",
            "id": "comment-16007098"
        },
        {
            "date": "2017-05-11T21:09:59+0000",
            "author": "Hoss Man",
            "content": "... Alternatively, ...\n\nI think fundementally there are 3 distinct points here...\n\n\n\tany bin/solr subcommand that wants to write to a file should always give a clear error message if the current effective UID doesn't have the neccessary permissions\n\tbin/solr should never assume any particular file ownership/permissions just based on the convention/defaults of the installer \u2013 users might change them later, so the checks/warnings/msgs produced by #1 should always account for that possibility.\n\tit may make sense for any auth related subcommands to require that the user running the command be root \u2013 that might be a good check to have independent of whether the current effective UID already has write permissions to whatever files it wants to modify.\n\n\n ",
            "id": "comment-16007203"
        },
        {
            "date": "2017-05-11T22:07:04+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated patch. ",
            "id": "comment-16007285"
        },
        {
            "date": "2017-05-11T22:19:05+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The new sub command auth is not advertised in help\nFixed\n\nRunning solr auth -enable without starting Solr throws a stack trace instead of printing usage.\nDone, printed a message to the effect that Solr should've been started in cloud mode or zkHost should've been provided.\n\nIf you move the getZkHost(cli) check to after the credentials check, then it's a bit better.\nDone\n\nit should be -Dbasicauth= without uppercase \"A\".\nFixed\n\nMethod updateIncludeFileEnableAuth takes username, password as args but they are never used\nFixed.\n\nWrong code indent in SolrCLI#3629-3671\nFixed.\n\nGuess we have to move the SOLR_HOME resolution lines higher up in the script\nI found that using $SOLR_PID_DIR was much simpler than the $SOLR_HOME (which more or less point to the same location). On Windows, used $SOLR_TIP/bin.\n\nAre you confident that this feature will have good enough quality to go in 6.6?\nThis is a new feature. So long as it doesn't trip up any existing parts of Solr, and it works for the cases we've tested manually, I am confident to have it in 6.6. Any bugs, if they escape attention, can be fixed later. Not putting it in 6x would delay the actual adoption by users, who are more likely, in the short term, to upgrade to 6.6 than 7.0.\n\nI would expect it to be possible to cover most of the SolrCLI functionality in with unit tests. \nActually, I found it quite difficult to test the changes I've introduced to SolrCLI without writing some fundamental support to test external systems here. For example, I would've liked to test if the correct security.json is being uploaded to ZK or not. But without significant effort in building such scaffolding in our test framework, I couldn't see a way to test for that. Did I miss something obvious? Can you point me to any existing tests which I can derive any clues from? I didn't find the tests for the Examples very useful.\n\nFor this patch, I have tested manually on Linux, and still testing on Windows.\n ",
            "id": "comment-16007297"
        },
        {
            "date": "2017-05-11T22:56:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Great progress!\n\nI found that using $SOLR_PID_DIR was much simpler than the $SOLR_HOME (which more or less point to the same location). On Windows, used $SOLR_TIP/bin.\n\nProblem with SOLR_PID_DIR and SOLR_TIP/bin is that it does not support an install with multiple instances run from same binaries. Once you set password for the second instance, it will overwrite the $SOLR_TIP/bin/basicAuth.conf which was placed there by any prior auth settings for other instances. $SOLR_PID_DIR works for PID files, since they are unique, containing port name in filename.\n\nSo I would still prefer using $SOLR_HOME for the basicAuth.conf. Alternatively name it basicAuth_$PORT.conf and use that name in the SOLR_AUTHENTICATION_OPTS var; then it could go in SOLR_PID DIR without problems. ",
            "id": "comment-16007337"
        },
        {
            "date": "2017-05-11T23:06:34+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Actually, I found it quite difficult to test the changes I've introduced to SolrCLI\nGuess I was thinking more along the lines of simple unit tests that tests updateIncludeFileEnableAuth(), updateIncludeFileDisableAuth() and perhaps factor out more code in testable methods.\n\nHaven't checked very hard, but it should be possible to add another tests to BasicAuthIntegrationTest that instead of explicitly uploading the hardcoded security.json, programatically instantiates AuthTool and calls enable, then later in the test verify that you need to authenticate. You could then test disable and -blockUnknown afterwards in the same test, and we'd exercise much of the new functionality? ",
            "id": "comment-16007346"
        },
        {
            "date": "2017-05-12T00:56:50+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Problem with SOLR_PID_DIR and SOLR_TIP/bin is that it does not support an install with multiple instances run from same binaries.\n\nIsn't it the case that all of those instances will be part of the same SolrCloud cluster, and hence they should have the same basicAuth.conf? However, when this feature is extended to cover standalone mode, then we could suffix the file with a port (or somehow figure out how to use a SOLR_HOME).\n\nGuess we have to move the SOLR_HOME resolution lines higher up in the script\nTrying to use SOLR_HOME by \"moving\" the logic up the logic would break the resolution of the SOLR_HOME in the case of a \"start\" command. I am trying to do it both higher up as well as where it is currently done, but that also is breaking the \"start\" command. Also, the whole $SOLR_SERVER_DIR block also needs to be copied/moved higher up, since $SOLR_HOME depends on that. Here's that block:\n\n            if [[ \"$2\" == \".\" || \"$2\" == \"./\" || \"$2\" == \"..\" || \"$2\" == \"../\" ]]; then\n              SOLR_SERVER_DIR=\"$(pwd)/$2\"\n            else\n              # see if the arg value is relative to the tip vs full path\n              if [[ \"$2\" != /* ]] && [[ -d \"$SOLR_TIP/$2\" ]]; then\n                SOLR_SERVER_DIR=\"$SOLR_TIP/$2\"\n              else\n                SOLR_SERVER_DIR=\"$2\"\n              fi\n            fi\n\n\n\nNeedless to say, trying to use SOLR_HOME is proving quite tricky. I am still trying, though.. ",
            "id": "comment-16007448"
        },
        {
            "date": "2017-05-12T08:46:14+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Isn't it the case that all of those instances will be part of the same SolrCloud cluster, and hence they should have the same basicAuth.conf? \nNormally, yes, not as you say it won't necessarily be true for standalone.\nQuestion is, how many times should a cloud user need to run solr auth -enable...? Say there are three servers, each with two Solr nodes, totally six nodes in the cluster. To be able to run bin/solr commands from any of the nodes without typing the password every time, the user would need to add the basicAuth.conf file to all three servers, and to point SOLR_AUTHENTICATION_OPTS to that file in each of the six solr.in.sh files. He could do that manually or by running solr auth -enable six times, once for each node... How do you plan to document this in refGuide? And each command would re-upload the json to ZK \n\nAnd what if the user changes his \"admin\" password through REST APIs, he should also find some documentation on how to update all the basicAuth.conf files on all nodes, either manually or through solr auth -changepass\u00a0or something?\n\nPerhaps it would be wiser to split the commands up in an -enable (server-side) command and a -remember (client-side) command?\n\nbin/solr auth -enable -credentials solr:SolrRocks  # takes care of security.json\nSOLR_INCLUDE=/etc/defaults/solr.in.sh ; bin/solr auth -remember -credentials solr:SolrRocks\nSOLR_INCLUDE=/etc/defaults/solr2.in.sh ; bin/solr auth -remember -credentials solr:SolrRocks\nSOLR_INCLUDE=/etc/defaults/solr3.in.sh ; bin/solr auth -remember -credentials solr:SolrRocks\n\n\n\nAnother general comment\nThe bin/solr sub tools, like bin/solr zk do not prefix the commands with a -. I.e. you have bin/solr zk mkdir foo. Could we follow that style here as well, i.e.\n\nUsage: solr auth enable [-type basicAuth] -credentials user:pass [-blockUnknown]\n       solr auth disable\n\n ",
            "id": "comment-16007808"
        },
        {
            "date": "2017-05-12T11:03:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The bin/solr\u00a0usage part does not mention -z option, while the bin/solr.cmd version does.\n\nAttaching a new patch SOLR-8840_opt_parsing.patch which fixes usage print, and improves opt parsing for bin/solr and modifies SolrCLI to accept enable/disable as arguments instead of options. This should work both for linux and windows but not tested on windows. ",
            "id": "comment-16007962"
        },
        {
            "date": "2017-05-14T15:18:27+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Perhaps it would be wiser to split the commands up in an -enable (server-side) command and a -remember (client-side) command?\n\nI like this approach. Alternatively, we could have an option in enable to do this, e.g. bin/solr auth enable --update-include-file-only -credentials solr:abc and bin/solr auth disable --update-include-file-only. This would make it clear that this is still a step needed for enabling authentication, but just that it updates the include file to use the provided credentials, instead of changing the security.json. What do you think? ",
            "id": "comment-16009765"
        },
        {
            "date": "2017-05-14T15:19:59+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "And what if the user changes his \"admin\" password through REST APIs, he should also find some documentation on how to update all the basicAuth.conf files on all nodes, either manually or through solr auth -changepass or something?\nI think we should include support for changing the default credentials, though I think that it can be done in a separate issue and not strictly necessary for 6.6. ",
            "id": "comment-16009767"
        },
        {
            "date": "2017-05-14T19:30:39+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I think we should include support for changing the default credentials, though I think that it can be done in a separate issue and not strictly necessary for 6.6.\nAbsolutely, Currently, disable + enable works well...\n\nMy main point was however that you won't be able to push the basicAuth.conf to all nodes with the -enable command anyway**, so you'd in any case need to run the -enable (or -remember) command locally on each node. Thus, you could just as well de-couple the two and have a unique file per instance, not per node?\n\n** Well, you could of course put the PW file in ZK but that makes no sense as long as ZK is not TLS and ACL protected ",
            "id": "comment-16009828"
        },
        {
            "date": "2017-05-15T08:02:29+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Here's what I'm working on at the moment:\n\n\t./solr auth to accept -d and -s (server dir and home dir), consistent with the start options. They are optional, and influence the effective $SOLR_HOME where the basicAuth.conf file will be kept. (Done with this on bash already, but proving nightmarish on Windows)\n\tTo \"remember\", adding --update-include-file-only (as per this comment https://issues.apache.org/jira/browse/SOLR-8440?focusedCommentId=16009765&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16009765)\n\n\n\nSounds good, Jan H\u00f8ydahl? ",
            "id": "comment-16010131"
        },
        {
            "date": "2017-05-15T08:07:11+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "+1 for me. I sympathize with you having to fight with the totally broken CMD script language  PS: Should we throw away solr.cmd and replace it with solr.ps1 ? ",
            "id": "comment-16010133"
        },
        {
            "date": "2017-05-15T08:31:21+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "PS: Should we throw away solr.cmd and replace it with solr.ps1 ?\nNo idea about powershell either.\n\nIf we make --blockUnknown to be -blockUnknown true and, similarly, -prompt to be -prompt true, then I have a very neat way of parsing arguments in windows. Just the sight of how \"solr.cmd zk\" has done the options parsing and the comment \"REM Clumsy to do the state machine thing for -d and -n, but that's required for back-compat\" is making me nervous in going down that path. WDYT, sounds reasonable for now, as a stopgap? ",
            "id": "comment-16010158"
        },
        {
            "date": "2017-05-15T08:34:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I might even be inclined to release the feature with limited solr.cmd support for now and open a followup jira for it. ",
            "id": "comment-16010159"
        },
        {
            "date": "2017-05-15T12:43:18+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated the patch:\n\n\tChanged -blockUnknown and -prompt to have a true|false argument.\n\tAccepts -s and -d (home and server directory), where basicAuth.conf is kept.\n\tUpdated the Windows script to parse the parameters.\n\tIntroduced -updateIncludeFileOnly true|false parameter, which avoids updating security.json and only updates the solr.in.sh / solr.in.cmd.\n\n\n\nTested manually on GNU/Linux and Windows. Jan H\u00f8ydahl, please review. I'll test a bit more before committing. ",
            "id": "comment-16010428"
        },
        {
            "date": "2017-05-15T13:21:13+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Did a quick visual read-through of the new patch (did not apply and test), and did not spot any red flags... ",
            "id": "comment-16010496"
        },
        {
            "date": "2017-05-15T16:37:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9be68cc3079a320d323e46c570de3e9e883052ed in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9be68cc ]\n\nSOLR-8440: Support for enabling basic authentication using bin/solr|bin/solr.cmd ",
            "id": "comment-16010811"
        },
        {
            "date": "2017-05-15T16:38:30+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 89dc9c5e748fdebfed51ca33c3207233c9983836 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=89dc9c5 ]\n\nSOLR-8440: Support for enabling basic authentication using bin/solr|bin/solr.cmd ",
            "id": "comment-16010815"
        },
        {
            "date": "2017-05-15T17:10:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b30a042bcfbc24db8eac31d65997098ac7c8c2d9 in lucene-solr's branch refs/heads/branch_6_6 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b30a042 ]\n\nSOLR-8440: Support for enabling basic authentication using bin/solr|bin/solr.cmd ",
            "id": "comment-16010917"
        },
        {
            "date": "2017-05-18T20:13:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 606b3bfc62b5b47903d21dac7e0609b6f0aeb6f1 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=606b3bf ]\n\nRef Guide: add auth section for SOLR-8440 ",
            "id": "comment-16016395"
        },
        {
            "date": "2017-05-31T15:01:13+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2d6edc69b365b8bcc0450b647b2facfac6e777c7 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2d6edc6 ]\n\nRef Guide: finish bin/solr auth docs for SOLR-8440 ",
            "id": "comment-16031279"
        },
        {
            "date": "2017-05-31T15:05:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5e8eac780275e030b04f1d158ae54a58fa103dd3 in lucene-solr's branch refs/heads/branch_6x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5e8eac7 ]\n\nRef Guide: backport all bin/solr auth doc changes relating to SOLR-8440 ",
            "id": "comment-16031288"
        },
        {
            "date": "2017-05-31T15:05:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9ea8cafc4679739e2c8f6c87cde00e99de227145 in lucene-solr's branch refs/heads/branch_6_6 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9ea8caf ]\n\nRef Guide: backport all bin/solr auth doc changes relating to SOLR-8440 ",
            "id": "comment-16031289"
        }
    ]
}