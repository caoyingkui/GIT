{
    "id": "LUCENE-178",
    "title": "[PATCH] arbitrary sorting",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "new code to allow search results to be sorted by field contents",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--StringSortedHitQueue_20040223.zip": "https://issues.apache.org/jira/secure/attachment/12312299/ASF.LICENSE.NOT.GRANTED--StringSortedHitQueue_20040223.zip",
        "ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040205.zip": "https://issues.apache.org/jira/secure/attachment/12312294/ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040205.zip",
        "ASF.LICENSE.NOT.GRANTED--search.zip": "https://issues.apache.org/jira/secure/attachment/12312300/ASF.LICENSE.NOT.GRANTED--search.zip",
        "ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040212.zip": "https://issues.apache.org/jira/secure/attachment/12312295/ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040212.zip",
        "ASF.LICENSE.NOT.GRANTED--20040219.zip": "https://issues.apache.org/jira/secure/attachment/12312298/ASF.LICENSE.NOT.GRANTED--20040219.zip",
        "ASF.LICENSE.NOT.GRANTED--20040224.zip": "https://issues.apache.org/jira/secure/attachment/12312301/ASF.LICENSE.NOT.GRANTED--20040224.zip",
        "ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040213.zip": "https://issues.apache.org/jira/secure/attachment/12312296/ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040213.zip",
        "ASF.LICENSE.NOT.GRANTED--sort_03022004.patch": "https://issues.apache.org/jira/secure/attachment/12312302/ASF.LICENSE.NOT.GRANTED--sort_03022004.patch",
        "ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040218.zip": "https://issues.apache.org/jira/secure/attachment/12312297/ASF.LICENSE.NOT.GRANTED--FieldSortedSearching_20040218.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2004-02-06T05:41:01+0000",
            "content": "Created an attachment (id=10243)\ncode to implement Integer, Float, String and multiple field sorting ",
            "author": "tjones",
            "id": "comment-12321513"
        },
        {
            "date": "2004-02-06T19:56:24+0000",
            "content": "Tim, are the following 2 classes just reformatted, or are there any functional\nchanges in them?\n\nM FieldSortedHitQueue.java\nM IntegerSortedSearcher.java ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321514"
        },
        {
            "date": "2004-02-06T23:05:20+0000",
            "content": "yes, there are additional functional changes. ",
            "author": "tjones",
            "id": "comment-12321515"
        },
        {
            "date": "2004-02-07T03:04:36+0000",
            "content": "Overall, it looks good to me, although I haven't tested it.\n\nIt would be better if this worked for arbitrary Searchable's, not just\nIndexReaders.  The Searchable interface is designed to support distributed\nsearch well, in particular, a query should only require a few calls through the\nAPI without huge amounts of data.  In this case, the sort indexes should\nprobably only be created in the remote searchable, which means that the sort\ntype needs to be passed through with the query.  So perhaps the addition of a \n\n  TopDocs search(Query, Filter, int count, String sortField, int sortType)\n\nmethod to Searchable would do the trick.  I think this would be easy to\nimplement for IndexSearcher, MultiSearcher and RemoteSearchable.  Does this make\nsense?\n\nAlso, it's good to try to minimize the number of public classes and interfaces,\nso that Lucene's public API is both easier to understand and support.  All of\nthe classes and interfaces you've added are public.  Do they really need to be?\n In particular, do you think folks will need to directly use the HitQueue and\nComparator classes or could these be made package private?\n\nPerhaps my comments can be combined: if support for this were incorporated into\nthe Searchable interface directly, would any of these need to be public? \nThere's also the issue of HitCollector-based access, which, by design, does not\nwork remotely, so an analagous sort-savvy HitCollector-based method would need\nto be added to Searcher, the locus of local-only search methods.  So, with\nthese, could we hide the sort implementation classes entirely?\n\nWhat do you think?\n\n\n\n ",
            "author": "cutting@apache.org",
            "id": "comment-12321516"
        },
        {
            "date": "2004-02-07T03:47:06+0000",
            "content": "About using Searcher:\n\nI think what you are saying is, rather than having FieldSortedSearcher be a\nsubclass of IndexSearcher, the API of Searchable would be extended.  This would\nrequire any implementations of Searchable to implement the new method provided\nfor doing sorting by field values.  So, IndexSearcher would get a new method,\nbasically with the contents of the current\nFieldSortedSearcher#search(Query,Filter,int).  Also MultiSearcher and\nRemoteSearchable would have to implement the method.  Is this what you mean?\n\nI will let you guys with more experience with the API decide if that's where you\nwant to go (it's ok with me) ... one comment on the suggested API addition is\nthat a little thought needs to be put into how best to handle giving a list of\nfields (see FieldSortedSearcher(IndexReader,String[]).\n\n\nAbout using package private:\n\nThere's no particular reason they are public - it is fine to change them - I\njust didn't think about that issue ... ",
            "author": "tjones",
            "id": "comment-12321517"
        },
        {
            "date": "2004-02-07T05:04:33+0000",
            "content": "That's right.  The design is that all search operations that can be feasably\nimplemented remotely should be performable on any Searchable, and other search\noperations that can only be implemented locally are Searcher methods.  This way\nthe operations are available to the widest possible audience.  As it stands,\nyour new sorted options are only available to folks with a single, local index,\nand not to folks who need to search multiple or remote indexes.  As I outlined\nabove, I don't think it should be too hard to extend them in this way.\n\nAre you willing to implement this?  Result sorting is one of the most frequently\nasked-for features.  Having this fully integrated into the 1.4 release would be\ngreat. ",
            "author": "cutting@apache.org",
            "id": "comment-12321518"
        },
        {
            "date": "2004-02-07T05:33:24+0000",
            "content": "I can look at it next week and see if I can figure how it would integrate with\nSearchable and a MultiSearcher.  One question I have is how the results from\nmultiple Searchable's would be collated into the correct order ...  ",
            "author": "tjones",
            "id": "comment-12321519"
        },
        {
            "date": "2004-02-07T05:44:00+0000",
            "content": "Maybe the ScoreDoc could be, in this case, augmented to include the field value\nthat sorting is based on.  Then the TopDocs from each sub-search could be merged\nbased on that value.  Perhaps the cleanest way to do this would be to, in the\nsorted API, replace ScoreDoc with FieldDoc, that contains just a document and a\nfield value.  Then the result would be the TopFieldDocs or somesuch. ",
            "author": "cutting@apache.org",
            "id": "comment-12321520"
        },
        {
            "date": "2004-02-09T21:20:49+0000",
            "content": "\n\t\n\t\n\t\t\n\t\t\n\t\t\tBug 18929 has been marked as a duplicate of this bug. ***\n\t\t\n\t\t\n\t\n\t\n\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321521"
        },
        {
            "date": "2004-02-10T04:09:13+0000",
            "content": "So I'm thinking something like this:\n\nin Searchable:\n\n   TopFieldDocs search (Query q, Filter f, int n, String[] sort_fields)\n\nwhere: \n\n   TopFieldDocs is like TopDocs\n\n   class FieldDoc \n{\n      int doc;\n      float score;\n      String[] field_values;   // correlates to sort_fields[]\n   }\n\nalthough there's some issues to think about:\n\nSince field_values[] could be either integer, float or string we could make it\nan Object[] array.  But this might not be as efficient as just using the string\nterm values we have already.  On the other hand, the data transport layer isn't\nso efficient because it is converting to and from string values.  So I'm not\nreally sure - any opinions?\n\nSecondly, since we have the document number and relevancy in the structure, in\nthe cases where sort is done by a mixture of field(s) and either relevancy or\ndocument number, the field_values[] array doesn't exactly match the original\nsort_fields[] array.  Or, we could go ahead and put those values in the array as\nstrings (or Object).\n\nThirdly, it means we rely upon pattern matching to detect whether the field\nterms are integers, floats or strings.  This works well enough unless there are\nterms that look like integers or floats but really are strings (assuming we look\nfor integers first, then floats, then assume strings).\n\nFor this last problem what I'm wondering is if we might want to extend the Field\nclass to have IntegerField and FloatField.  This provides error checking on the\ndata on the way into the index, so when we get it back out we can be reasonably\nsure we have clean data (i.e. we don't try to interpret the contents of a field\nas int when really it's not).  Kind of like DateField.\n\nFollowing on to this - is there any place to store and then retrieve what data\ntype a field was given?  Is there someplace in the index to say a field is only\nintegers or only floats?  Then we wouldn't have to rely upon pattern matching. ",
            "author": "tjones",
            "id": "comment-12321522"
        },
        {
            "date": "2004-02-11T04:06:59+0000",
            "content": "after looking into the serialization of String and thinking about how the code\nwould actually flow, I'm thinking an array of Object for FieldDoc might be best:\n\n   class FieldDoc \n{\n      int doc;\n      Object[] field_values;   // correlates to sort_fields[]\n   } ",
            "author": "tjones",
            "id": "comment-12321523"
        },
        {
            "date": "2004-02-11T06:32:53+0000",
            "content": "I don't think we ought to make this contingent on adding typed Fields to\nDocuments.  That's a big change, perhaps one that should eventually be made, but\nI think we can easily make this change without going that far.\n\nSo I'd prefer there be a way to explicitly name the types when making the\nsearch, rather than relying on pattern matching, perhaps something like:\n\n  public abstract class SortField \n{\n    public static final int SCORE = 0;     // sort by score\n    public static final int DOC = 1;       // sort by doc number\n    public static final int AUTO = 2;      // guess type of named field\n    public static final int STRING = 3;    // sort by named field as String\n    public static final int INT = 4;       // sort by named field as int\n    pubilc static final int FLOAT = 5;     // sort by named field as float\n  \n    private String field;\n    private int type = AUTO;\n  }\n\n  TopFieldDocs search (Query q, Filter f, int n, SortField[] sort_fields);\n\nWould that work? ",
            "author": "cutting@apache.org",
            "id": "comment-12321524"
        },
        {
            "date": "2004-02-11T07:48:58+0000",
            "content": "sounds fine.\n\nhow were you thinking a SortField object would be created?  would a user of the\nAPI use them directly?  or would they be hidden and only used inside? ",
            "author": "tjones",
            "id": "comment-12321525"
        },
        {
            "date": "2004-02-11T23:22:59+0000",
            "content": "what do you think about making FieldDoc a subclass of ScoreDoc:\n\n   class FieldDoc extends ScoreDoc {\n      public Object[] fields;\n      public FieldDoc (int doc, float score, Object[] fields) \n{\n         super (doc, score);\n         this.fields = fields;\n      }\n   }\n\nso that TopDocs remains the same, and the signature for the new method in\nSearchable would be:\n\n   TopDocs search (Query q, Filter f, int n, SortField[] sort_fields); ",
            "author": "tjones",
            "id": "comment-12321526"
        },
        {
            "date": "2004-02-12T22:33:50+0000",
            "content": "I've got an initial version I'll post later today ... ",
            "author": "tjones",
            "id": "comment-12321527"
        },
        {
            "date": "2004-02-13T01:45:03+0000",
            "content": "Created an attachment (id=10339)\nnew code which extends Searchable instead of IndexSearcher ",
            "author": "tjones",
            "id": "comment-12321528"
        },
        {
            "date": "2004-02-13T01:55:02+0000",
            "content": "I have posted new code which adds a method definition to Searchable.  If you\nhave unpacked the previous code into your source tree, you should delete all\nthose files.  Also, remove the file ..lucene.search.IntegerSortedSearcher.java\nwhich is in CVS.\n\nThe code still needs to be cleaned up a little (javadocs, etc.) but I wanted to\npost it so everyone could look at the API and see if it looks ok.  A summary:\n\nI created a new class Sort which is used to define the sort criteria to queries\n(if unspecified, hits are returned by relevance score).  So in Searcher there is\na new method:\n\n    public Hits search (Query query, Filter filter, Sort sort)\n\nThe sort criteria can be changed between successive calls to search().\n\nThe Searchable API is as previously discussed:\n\n    TopFieldDocs search (Query q, Filter f, int n, SortField[] fields)\n\nTopFieldDocs is a new object which is like TopDocs, but also contains the sort\ncriteria used.  This is so multisearchers can figure out how to collate results\nfrom several sorted Searchables.\n\nPlease take a look and let me know if like the approach.  If so, I will finish\ncleaning up the code so it can be committed. ",
            "author": "tjones",
            "id": "comment-12321529"
        },
        {
            "date": "2004-02-13T02:31:11+0000",
            "content": "Sorry I haven't had a chance to respond in a couple of days.\n\nThis stuff looks great!\n\nA few minor comments:\n\nIs there a reason why you pass a SortField[] rather than a Sort in\nSearchable#search()?\n\nFor distributed search to work correctly I think you'll need to make Sort and\nSortField implement Serializeable.\n\nIn addition to javadoc for all public classes and methods, we'll need some\nsimple unit tests that, e.g., test each sort type, test each searchable\nimplementation, etc.\n\nThanks again for all your work on this.  I think it will be a very popular\naddition to Lucene. ",
            "author": "cutting@apache.org",
            "id": "comment-12321530"
        },
        {
            "date": "2004-02-13T02:41:59+0000",
            "content": ">Is there a reason why you pass a SortField[] rather than a Sort in\n>Searchable#search()?\n\nI guess I just followed our previous discussion, and didn't add the Sort class\nuntil I was trying to figure out how to make it easier for a user of the API.  The \n\n  TopFieldDocs search (Query q, Filter f, int n, SortField[] fields)\n\nin Searchable is \"lower level\" ... It can go either way, I suppose - I'll look\nat it again.  Is your initial preference to make them the same?\n\nThanks for noting the lack of Serializable.\n\nany other thoughts? ",
            "author": "tjones",
            "id": "comment-12321531"
        },
        {
            "date": "2004-02-13T03:17:51+0000",
            "content": "I think Sort is mildly preferable to SortField[], mostly just for consistency. \nYou're right that folks probably won't ever call this method directly, so it\ndoesn't really matter... ",
            "author": "cutting@apache.org",
            "id": "comment-12321532"
        },
        {
            "date": "2004-02-13T07:19:25+0000",
            "content": "A thought:\n\nShould SortField have another field:\n\n  private boolean isIncreasing = false;\n\n  public void setIncreasing(boolean isIncreasing) \n{ this.isIncreasing =\nisIncreasing; }\n\nNormally each of these sorts results by decreasing values, but, specifying this\nwould cause them to be reversed.  Or, alternately, you could have a natural\nordering for each (decreasing for doc and score, increasing for others) and\nspecify an isReversed flag to reverse things.  One way or the other, we probably\n ought to support reversed results, no? ",
            "author": "cutting@apache.org",
            "id": "comment-12321533"
        },
        {
            "date": "2004-02-13T07:25:17+0000",
            "content": "or we could add flags in SortField to support this:\n\npublic static final int INT_REVERSE = 6;\npublic static final int FLOAT_REVERSE = 7;\npublic static final int STRING_REVERSE = 8; ",
            "author": "tjones",
            "id": "comment-12321534"
        },
        {
            "date": "2004-02-14T05:06:18+0000",
            "content": "I prefer an ascending/descending flag.  It's more concise than _REVERSE types\nand more consistent than a reverse flag (with different types having different\nnatural orderings).  Also, sometimes folks could want ascending document numbers\nor even scores: it really is universally applicable.\n\nWe can always make things simpler by adding utility methods to Sort, like:\n  public void addIncreasingDocument();\n  public void addDecreasingInt(String field);\nand/or by adding static \"constructor\" methods to SortField, like:\n  public static SortField increasing(String field);  // uses AUTO\n  public static SortField increasingFloat(String field);\nThese might make application code more easily readable.\n\nAnother feature (that might be added later) is date sorting.  If a field's\nvalues are parseable by DateFormat then it should be possible to sort results by\nthem.  Internally these could be represented as longs, once parsed.  The AUTO\nfield type could first try to parse with DateFormat too.  What do you think? ",
            "author": "cutting@apache.org",
            "id": "comment-12321535"
        },
        {
            "date": "2004-02-14T06:16:49+0000",
            "content": "re: ascending/descending flag:\nyes, I agree.  I've added it.\n\nre: date sorting\nsounds like a good idea.  I am assuming you are not refering to the existing\nDateField.  one thing that would make these different is the need to specify the\nformat.  I'll let that be a later enhancement ...\n\nre: Sort in Searchable#search()\nI went ahead and changed this to use Sort instead of SortField[].\n\nwill be sending the new code shortly ... ",
            "author": "tjones",
            "id": "comment-12321536"
        },
        {
            "date": "2004-02-14T07:13:13+0000",
            "content": "Created an attachment (id=10357)\nnew version with discussed changes ",
            "author": "tjones",
            "id": "comment-12321537"
        },
        {
            "date": "2004-02-14T07:16:50+0000",
            "content": "Just posted an attachment with new version of code.   The changes discussed\nbelow have been made and all unit tests still pass (no unit tests for sorting\nyet, though).  I will add sort-specific unit tests and post those next week.\n\nFor the existing lucene files which were modified, I also included patch files\nto ease integration.\n\nLet me know if you see any problems adding these files to CVS. ",
            "author": "tjones",
            "id": "comment-12321538"
        },
        {
            "date": "2004-02-18T03:06:07+0000",
            "content": "Okay, I just committed this to CVS!  I added a Searcher#search(Query, Sort)\nconvenience method, a few more javadoc comments, and I reformatted a few files\nthat I edited (Sorry...).\n\nI'll leave this bug open until the unit tests are committed.\n\nThanks again for all the great code! ",
            "author": "cutting@apache.org",
            "id": "comment-12321539"
        },
        {
            "date": "2004-02-19T07:42:00+0000",
            "content": "Doug et al - a question:\n\nIn writing the unit tests I found a problem (imagine that  with the current\nimplementation and multisearchers, and I was wondering how you would prefer to\nhandle it.  \n\nCurrently, when a sort is done by string, all the terms are looked up, sorted,\nand given a numerical index.  Only the numerical index is stored - the strings\nare thrown away.  Then, when a sort is done by the given field, the numerical\nvalues are used to put the hits in order.  This is fast and uses as little\nmemory as possible.\n\nHowever, when using a multisearcher and sorting over the same field, the hits\ncome back from the individual searchers and each one contains its numerical sort\nvalue (not the original strings - remember, they were thrown away).  A problem\noccurs if the individual searchers do not have the same terms in the sort field.\n If index A contains only the terms \"a\", \"b\", and \"c\" (which are given integer\nvalues 1, 2, 3) and index B contains only the terms \"r\", \"s\", \"t\" (which are\nalso given values 1, 2, 3) then when the multisearcher collates them, it comes\nout something like \"a\", \"r\", \"b\", \"s\", \"c\", \"t\".\n\nTo solve this, we either need to:\n\n\n\tkeep all the term values in memory\n  (too much memory)\n\n\n\n\n\tafter getting the list of hits, go back and look up the term values again\n  (not very efficient) \n\n\n\n\n\tnot allow sorting by strings using a multisearcher\n  (not very nice)\n\n\n\nAlso, however we solve it, it will probably need to apply to simple single\nindexes as well as multi/remote indexes, since the API is shared.\n\nAny thoughts or ideas?\n\nI guess I am thinking [2] is the way to go ... ",
            "author": "tjones",
            "id": "comment-12321540"
        },
        {
            "date": "2004-02-20T02:58:24+0000",
            "content": "My preference would be for [1].  I don't see a way to implement [2] without\nre-enumerating terms for each query, which is way slower.  There should be a\nwarning in the doc somewherre that sorting by strings when each doc has a unique\nvalue uses a fair amount of memory.  You might still keep the array of ints to\nmake things faster, with a separate array of strings, indexed by the integer\nvalues in the first array.  The cost of keeping the ints is a small constant\nfactor, but the speedup may be significant.\n\nOne other suggestion: The cache in FieldSortedHitQueye would better be\nimplemented with a WeakHashMap, mapping from IndexReader to a HashTable (which\nin turn maps from field name to comparator).  This way one can efficiently\nsearch and sort multiple indexes.  The clearing of entries would then also be\nhandled by the garbage collector, rather than explicity. ",
            "author": "cutting@apache.org",
            "id": "comment-12321541"
        },
        {
            "date": "2004-02-20T05:28:16+0000",
            "content": "Created an attachment (id=10442)\ninitial unit tests ",
            "author": "tjones",
            "id": "comment-12321542"
        },
        {
            "date": "2004-02-20T05:29:14+0000",
            "content": "attachment contains initial unit tests, an update to FieldDocSortedHitQueue to\nfix a bug found during testing, and a version of Sort with additional javadocs. ",
            "author": "tjones",
            "id": "comment-12321543"
        },
        {
            "date": "2004-02-21T01:35:26+0000",
            "content": "Created an attachment (id=10455)\nfinal unit tests, bug fixes, and additional javadocs ",
            "author": "tjones",
            "id": "comment-12321544"
        },
        {
            "date": "2004-02-21T01:37:01+0000",
            "content": "this attachment (10455) contains the fix to the problem with sorting by string\nvalued terms previously discussed. ",
            "author": "tjones",
            "id": "comment-12321545"
        },
        {
            "date": "2004-02-23T23:47:24+0000",
            "content": "Created an attachment (id=10494)\nimprovements to String sorter so it might not take as much space (overrides version in previous attachment) ",
            "author": "tjones",
            "id": "comment-12321546"
        },
        {
            "date": "2004-02-24T06:24:31+0000",
            "content": "On Linux w/ JDK 1.4.2, your latest version fails with:\n\n    [junit] Testcase: testMultiSort(org.apache.lucene.search.TestSort): FAILED\n    [junit] expected:<DJAIHGFE...> but was:<ADIJHGEF...>\n    [junit] junit.framework.ComparisonFailure: expected:<DJAIHGFE...> but\nwas:<ADIJHGEF...>\n    [junit]     at\norg.apache.lucene.search.TestSort.assertMatches(TestSort.java:296)\n    [junit]     at\norg.apache.lucene.search.TestSort.runMultiSorts(TestSort.java:265)\n    [junit]     at\norg.apache.lucene.search.TestSort.testMultiSort(TestSort.java:228)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit]     at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit]     at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\n\n    [junit] Testcase:\ntestParallelMultiSort(org.apache.lucene.search.TestSort):FAILED\n    [junit] expected:<DJAIHGFE...> but was:<ADIJHGEF...>\n    [junit] junit.framework.ComparisonFailure: expected:<DJAIHGFE...> but\nwas:<ADIJHGEF...>\n    [junit]     at\norg.apache.lucene.search.TestSort.assertMatches(TestSort.java:296)\n    [junit]     at\norg.apache.lucene.search.TestSort.runMultiSorts(TestSort.java:265)\n    [junit]     at\norg.apache.lucene.search.TestSort.testParallelMultiSort(TestSort.java:234)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit]     at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit]     at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\nDoes this work for you? ",
            "author": "cutting@apache.org",
            "id": "comment-12321547"
        },
        {
            "date": "2004-02-24T06:47:00+0000",
            "content": "hmm, that's strange.  yes, it passes here.  on that particular test (line 265 in\nTestSort) one searcher should return \"AIGEC\" and the other \"DJHFB\" (the\ndocuments sorted by string), then the multisearcher should interleave them to\nget \"DJAIHGFEBC\".  From the resulting pattern, it looks like the searchers\nworked right, but the interleave didn't happen correctly.  This would be a\nproblem in FieldDocSortedHitQueue (which does the sorting) or in\nStringSortedHitQueue (which stores the values which are later sorted by).\n\nI'll attach the versions of these files I am using just in case somehow the ones\nI attached earlier weren't correct. ",
            "author": "tjones",
            "id": "comment-12321548"
        },
        {
            "date": "2004-02-24T06:47:34+0000",
            "content": "btw, I'm on Windows XP, java 1.4.1_01 ",
            "author": "tjones",
            "id": "comment-12321549"
        },
        {
            "date": "2004-02-24T06:49:20+0000",
            "content": "Created an attachment (id=10506)\ncopies of FieldDocSortedHitQueue and StringSortedHitQueue to verify against ",
            "author": "tjones",
            "id": "comment-12321550"
        },
        {
            "date": "2004-02-25T04:07:36+0000",
            "content": "Created an attachment (id=10524)\nfixes failing tests (CVS didn't have most recent version of files) ",
            "author": "tjones",
            "id": "comment-12321551"
        },
        {
            "date": "2004-02-25T04:42:28+0000",
            "content": "Okay.  All unit tests pass.  Closing this bug.  Thanks, Tim! ",
            "author": "cutting@apache.org",
            "id": "comment-12321552"
        },
        {
            "date": "2004-03-02T22:39:54+0000",
            "content": "Created an attachment (id=10637)\nPatch File: javadoc improvements (moved some comments to public classes) ",
            "author": "tjones",
            "id": "comment-12321553"
        },
        {
            "date": "2004-03-02T22:55:31+0000",
            "content": "Javadoc patch applied, thanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321554"
        }
    ]
}