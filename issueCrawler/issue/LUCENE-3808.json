{
    "id": "LUCENE-3808",
    "title": "Switch LuceneTestCaseRunner to RandomizedRunner. Enforce Random sharing contracts. Enforce thread leaks.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "general/test"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Dev. branch at: https://github.com/dweiss/lucene_solr/tree/rr\n\nSwitch the runner to RandomizedRunner. Enforce the following:\n\n\t Random sharing will result in a failure/ exception.\n\t Add a validator for testXXX without @Test annotation. (custom test provider added).\n\t Make sure tests are executed with assertions enabled (at least for solr/lucene packages).\n\t Add a validator for static hook shadowing (no-no).\n\t Modify custom execution groups in LTC to be real @Groups.\n\n\n\nFollow up from merging with trunk:\n\n\t rename tests.threadspercpu into tests.jvms (Steve)\n\t align to 80 cols terminals (Robert) - use simple class names and add truncation padding.\n\t the output is emitted twice in case of suite-level errors.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-20T16:23:24+0000",
            "content": "\nAdd a validator for testXXX without @Test annotation.\n\nCan we not require @Test? I think it should be fine to use testXXX without @Test. @Test is useless. ",
            "author": "Robert Muir",
            "id": "comment-13211955"
        },
        {
            "date": "2012-02-20T16:26:39+0000",
            "content": "Dawid: Please let us name our tests like in JUnit3, our old test framework has a good test runner improvement for that, we don't like the verbosity on imports and this annotation. ",
            "author": "Uwe Schindler",
            "id": "comment-13211960"
        },
        {
            "date": "2012-02-20T16:30:33+0000",
            "content": "Can we not require @Test? I think it should be fine to use testXXX without @Test. @Test is useless.\n\n+100000\n\nI was wondering if anyone would ever speak up about this.  @Test is ridiculous.   (so is @Override too, for that matter) - metadata is in the model implicitly. ",
            "author": "Erik Hatcher",
            "id": "comment-13211963"
        },
        {
            "date": "2012-02-20T16:33:05+0000",
            "content": "Ok, ok, ok... I will not enforce @Test, don't kill me. ",
            "author": "Dawid Weiss",
            "id": "comment-13211966"
        },
        {
            "date": "2012-02-20T17:36:55+0000",
            "content": " ",
            "author": "Uwe Schindler",
            "id": "comment-13211999"
        },
        {
            "date": "2012-02-20T17:38:24+0000",
            "content": "I was wondering if anyone would ever speak up about this. @Test is ridiculous. (so is @Override too, for that matter) - metadata is in the model implicitly.\n\n@Override is indeed not really different but makes sense when you refactor classes. The big PRO is: no import required as its in java.lang. Thats the most horrible thing on @Test ",
            "author": "Uwe Schindler",
            "id": "comment-13212001"
        },
        {
            "date": "2012-02-20T17:43:44+0000",
            "content": "\n@Override is indeed not really different but makes sense when you refactor classes.\n\nInterfaces too  ",
            "author": "Robert Muir",
            "id": "comment-13212004"
        },
        {
            "date": "2012-02-20T18:03:23+0000",
            "content": "I like @Override, I even wish it were an explicit keyword like in C# (although I tend to like Java's by-default virtual methods more than C#'s explicit virtuals). ",
            "author": "Dawid Weiss",
            "id": "comment-13212012"
        },
        {
            "date": "2012-02-29T09:16:15+0000",
            "content": "I've hacked a local branch where I substituted LuceneTestCaseRunner for RandomizedRunner. And boy, hell broke loose \n\nSo... the biggest issue I'm facing is indeed with Random sharing across threads. One may argue that sharing a Random instance across threads (with data races) is in fact making it even more random, but this doesn't seem to be the direction consistent with the possibility of consistently re-running the tests given the same starting seed. I know it isn't possible to coordinate threads anyway but I would still like to have Random instances to return identical sequences from within a single thread's perspective.\n\nAfter this lengthy introduction, here comes an example of Random sharing:\n\n   > Caused by: java.lang.RuntimeException: java.lang.IllegalStateException: This Random was created for/by another thread (Thread[RandomizedRunner-SuiteThread-org.apache.lucene.search.TestSearcherManager-seed#[3F1A26A6DA253628],5,RandomizedRunner-SuiteThreadGroup-org.apache.lucene.search.TestSearcherManager]). Random instances must not be shared (acquire per-thread). Current thread: Thread[Thread-53,5,RandomizedRunner-SuiteThreadGroup-org.apache.lucene.search.TestSearcherManager]\n   > \tat __randomizedtesting.SeedInfo.seed([3F1A26A6DA253628]:0)\n   > \tat org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase$1.run(ThreadedIndexingAndSearchingTestCase.java:307)\n   > Caused by: java.lang.IllegalStateException: This Random was created for/by another thread (Thread[RandomizedRunner-SuiteThread-org.apache.lucene.search.TestSearcherManager-seed#[3F1A26A6DA253628],5,RandomizedRunner-SuiteThreadGroup-org.apache.lucene.search.TestSearcherManager]). Random instances must not be shared (acquire per-thread). Current thread: Thread[Thread-53,5,RandomizedRunner-SuiteThreadGroup-org.apache.lucene.search.TestSearcherManager]\n   > \tat com.carrotsearch.randomizedtesting.RandomNoSetSeed.checkValid(RandomNoSetSeed.java:124)\n   > \tat com.carrotsearch.randomizedtesting.RandomNoSetSeed.nextInt(RandomNoSetSeed.java:72)\n   > \tat org.apache.lucene.util.LuceneTestCase.rarely(LuceneTestCase.java:938)\n   > \tat org.apache.lucene.analysis.MockAnalyzer.maybePayload(MockAnalyzer.java:102)\n   > \tat org.apache.lucene.analysis.MockAnalyzer.createComponents(MockAnalyzer.java:95)\n   > \tat org.apache.lucene.analysis.Analyzer.tokenStream(Analyzer.java:83)\n   > \tat org.apache.lucene.document.Field.tokenStream(Field.java:467)\n   > \tat org.apache.lucene.index.DocInverterPerField.processFields(DocInverterPerField.java:86)\n   > \tat org.apache.lucene.index.DocFieldProcessor.processDocument(DocFieldProcessor.java:287)\n   > \tat org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:241)\n   > \tat org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:376)\n   > \tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1533)\n   > \tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1505)\n   > \tat org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.updateDocument(ThreadedIndexingAndSearchingTestCase.java:111)\n   > \tat org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase$1.run(ThreadedIndexingAndSearchingTestCase.java:259)\n   > Caused by: com.carrotsearch.randomizedtesting.NotAnException: Original allocation stack for this Random.\n   > \tat java.lang.Thread.getStackTrace(Thread.java:1479)\n   > \tat com.carrotsearch.randomizedtesting.RandomNoSetSeed.<init>(RandomNoSetSeed.java:26)\n   > \tat com.carrotsearch.randomizedtesting.Randomness.<init>(Randomness.java:20)\n   > \tat com.carrotsearch.randomizedtesting.Randomness.<init>(Randomness.java:24)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.run(RandomizedRunner.java:531)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:551)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$3(RandomizedRunner.java:495)\n   > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:472)\n\n\n\nWhat's happening is that a Random is pushed to MockAnalyzer and then multiple threads access the same instance. I am investigating possible workarounds for this \u2013 Random instances are in fact thread local in RandomizedRunner so it would be possible to just grab your own Random in places like MockAnalyzer, without passing a ready to use instance. \n\nAn ostrich solution is to dodge the issue and simply drop checking if a Random instance is shared or not, but it wouldn't be so much fun then, would it? ",
            "author": "Dawid Weiss",
            "id": "comment-13219016"
        },
        {
            "date": "2012-02-29T09:34:41+0000",
            "content": "I've found this in the code:\n\n    private final Random r;\n    public MockIndexWriter(Random r, Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n\n\nHa!  ",
            "author": "Dawid Weiss",
            "id": "comment-13219024"
        },
        {
            "date": "2012-02-29T11:27:49+0000",
            "content": "So... the biggest issue I'm facing is indeed with Random sharing across threads.\n\nI think we should always (try to!) make a thread-private, consistently seed'd Random instance...\n\nTrue, the scheduling of the threads by the JVM will always be a source of non-determinism, but we shouldn't make that worse.  And, for some bugs, having consistent thread-private Random will make the bug fully reproducible (ie if the bug isn't a thread scheduling issue). ",
            "author": "Michael McCandless",
            "id": "comment-13219111"
        },
        {
            "date": "2012-02-29T11:29:51+0000",
            "content": "I'm working on this on my github branch. This is a good test case for the runner itself. ",
            "author": "Dawid Weiss",
            "id": "comment-13219114"
        },
        {
            "date": "2012-02-29T11:39:44+0000",
            "content": "I've fixed all offending tests under lucene/\nhttps://github.com/dweiss/lucene_solr/commit/1d9a7effd06cfc0b393b7e00b8b7f755bd967700\n\nAll tests pass with RandomizedRunner there and the output from tests that failed was an excellent source to quickly get at the offending place. \n\nThis looks very good to me so far. Solr and modules next. ",
            "author": "Dawid Weiss",
            "id": "comment-13219120"
        },
        {
            "date": "2012-04-14T08:01:38+0000",
            "content": "I'm planning to merge github branched code into trunk this weekend. It's been running in parallel for some time now on my build server and it seems to have the same failure coverage and at the same time is a start to clean up LuceneTestCase and associated test code.\n\nI hope you'll also like the new infrastructure \u2013 will elaborate about this a bit once merged. ",
            "author": "Dawid Weiss",
            "id": "comment-13254054"
        },
        {
            "date": "2012-04-14T12:29:28+0000",
            "content": "Moving remaining bullets to separate issues. ",
            "author": "Dawid Weiss",
            "id": "comment-13254095"
        },
        {
            "date": "2012-04-16T03:13:34+0000",
            "content": "minor spelling nit:\n\n   [junit4] Ignoring seed attribute because it is overriden by user properties.\n\noverriden should be overridden... ",
            "author": "Robert Muir",
            "id": "comment-13254495"
        },
        {
            "date": "2012-04-16T06:50:30+0000",
            "content": "This wasn't a typo, I had it wrong all over the place. Corrected, thanks for pointing this out. ",
            "author": "Dawid Weiss",
            "id": "comment-13254542"
        }
    ]
}