{
    "id": "LUCENE-8358",
    "title": "Asserting trips when IW tries to free ram by writing DV updates",
    "details": {
        "components": [],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.4",
            "7.5",
            "master (8.0)"
        ],
        "affect_versions": "7.4,                                            7.5,                                            master (8.0)",
        "labels": "",
        "priority": "Blocker",
        "type": "Bug"
    },
    "description": "This assertion is pretty new I think we need to relax is since there are chances that this situation is valid ie. if a ReadersAndUpdates instance gets concurrently written and readerpooling is off. That is just fine since this is best effort anyway. I will attach a patch.\n\n\n\n07:35:14    [junit4] Suite: org.apache.lucene.index.TestBinaryDocValuesUpdates\n07:35:14    [junit4] IGNOR/A 0.01s J0 | TestBinaryDocValuesUpdates.testTonsOfUpdates\n07:35:14    [junit4]    > Assumption #1: 'nightly' test group is disabled (@Nightly())\n07:35:14    [junit4]   1> TEST: isNRT=false reader1=StandardDirectoryReader(segments_1:4 _0(7.5.0):c2)\n07:35:14    [junit4]   1> TEST: now reopen\n07:35:14    [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBinaryDocValuesUpdates -Dtests.method=testUpdatesAreFlushed -Dtests.seed=B8D5250C8CAA9010 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=en-IE -Dtests.timezone=SystemV/CST6 -Dtests.asserts=true -Dtests.file.encoding=UTF8\n07:35:14    [junit4] FAILURE 0.04s J0 | TestBinaryDocValuesUpdates.testUpdatesAreFlushed <<<\n07:35:14    [junit4]    > Throwable #1: java.lang.AssertionError: Segment [_2(7.5.0):c1] is not dropped yet\n07:35:14    [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B8D5250C8CAA9010:8228ECC925943F29]:0)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.writeSomeDocValuesUpdates(IndexWriter.java:613)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.FrozenBufferedUpdates.apply(FrozenBufferedUpdates.java:298)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.lambda$publishFrozenUpdates$3(IndexWriter.java:2594)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.processEvents(IndexWriter.java:5064)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.updateBinaryDocValue(IndexWriter.java:1742)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.TestBinaryDocValuesUpdates.testUpdatesAreFlushed(TestBinaryDocValuesUpdates.java:100)\n07:35:14    [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n07:35:14    [junit4]   2> Jun 15, 2018 1:35:14 AM com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n07:35:14    [junit4]   2> WARNING: Uncaught exception in thread: Thread[Lucene Merge Thread #1,5,TGRP-TestBinaryDocValuesUpdates]\n07:35:14    [junit4]   2> org.apache.lucene.index.MergePolicy$MergeException: java.lang.IllegalStateException: this writer hit an unrecoverable error; cannot merge\n07:35:14    [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([B8D5250C8CAA9010]:0)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:704)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:684)\n07:35:14    [junit4]   2> Caused by: java.lang.IllegalStateException: this writer hit an unrecoverable error; cannot merge\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:4222)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:4202)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:4054)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:625)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:662)\n07:35:14    [junit4]   2> Caused by: java.lang.AssertionError: Segment [_2(7.5.0):c1] is not dropped yet\n07:35:14    [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([B8D5250C8CAA9010:8228ECC925943F29]:0)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter.writeSomeDocValuesUpdates(IndexWriter.java:613)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.FrozenBufferedUpdates.apply(FrozenBufferedUpdates.java:298)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter.lambda$publishFrozenUpdates$3(IndexWriter.java:2594)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter.processEvents(IndexWriter.java:5064)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.IndexWriter.updateBinaryDocValue(IndexWriter.java:1742)\n07:35:14    [junit4]   2> \tat org.apache.lucene.index.TestBinaryDocValuesUpdates.testUpdatesAreFlushed(TestBinaryDocValuesUpdates.java:100)\n07:35:14    [junit4]   2> \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n07:35:14    [junit4]   2> \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n07:35:14    [junit4]   2> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n07:35:14    [junit4]   2> \tat java.lang.reflect.Method.invoke(Method.java:498)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1737)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:934)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:970)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:984)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:817)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:468)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:943)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:829)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:879)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:890)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n07:35:14    [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n07:35:14    [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\n07:35:14    [junit4]   2> \tat java.lang.Thread.run(Thread.java:748)\n07:35:14    [junit4]   2> \n07:35:14    [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBinaryDocValuesUpdates -Dtests.method=testUpdateTwoNonexistingTerms -Dtests.seed=B8D5250C8CAA9010 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=en-IE -Dtests.timezone=SystemV/CST6 -Dtests.asserts=true -Dtests.file.encoding=UTF8\n07:35:14    [junit4] ERROR   0.01s J0 | TestBinaryDocValuesUpdates.testUpdateTwoNonexistingTerms <<<\n07:35:14    [junit4]    > Throwable #1: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=806, name=Lucene Merge Thread #1, state=RUNNABLE, group=TGRP-TestBinaryDocValuesUpdates]\n07:35:14    [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B8D5250C8CAA9010:C6CD8D9072E639EE]:0)\n07:35:14    [junit4]    > Caused by: org.apache.lucene.index.MergePolicy$MergeException: java.lang.IllegalStateException: this writer hit an unrecoverable error; cannot merge\n07:35:14    [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B8D5250C8CAA9010]:0)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:704)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:684)\n07:35:14    [junit4]    > Caused by: java.lang.IllegalStateException: this writer hit an unrecoverable error; cannot merge\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:4222)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:4202)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:4054)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:625)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:662)\n07:35:14    [junit4]    > Caused by: java.lang.AssertionError: Segment [_2(7.5.0):c1] is not dropped yet\n07:35:14    [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B8D5250C8CAA9010:8228ECC925943F29]:0)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.writeSomeDocValuesUpdates(IndexWriter.java:613)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.FrozenBufferedUpdates.apply(FrozenBufferedUpdates.java:298)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.lambda$publishFrozenUpdates$3(IndexWriter.java:2594)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.processEvents(IndexWriter.java:5064)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.IndexWriter.updateBinaryDocValue(IndexWriter.java:1742)\n07:35:14    [junit4]    > \tat org.apache.lucene.index.TestBinaryDocValuesUpdates.testUpdatesAreFlushed(TestBinaryDocValuesUpdates.java:100)\n07:35:14    [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n07:35:14    [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {bdv=BlockTreeOrds(blocksize=128), f=PostingsFormat(name=Asserting), k1=PostingsFormat(name=Asserting), foo=PostingsFormat(name=Asserting), dvUpdateKey=PostingsFormat(name=Asserting), k2=Lucene50(blocksize=128), upd=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128))), updKey=BlockTreeOrds(blocksize=128), id=Lucene50(blocksize=128), key=Lucene50(blocksize=128)}, docValues:{val=DocValuesFormat(name=Direct), ndv=DocValuesFormat(name=Lucene70), cf=DocValuesFormat(name=Asserting), ssdv=DocValuesFormat(name=Lucene70), sdv=DocValuesFormat(name=Direct), f=DocValuesFormat(name=Lucene70), control=DocValuesFormat(name=Direct), f0=DocValuesFormat(name=Lucene70), sort=DocValuesFormat(name=Lucene70), f1=DocValuesFormat(name=Asserting), f2=DocValuesFormat(name=Lucene70), cf0=DocValuesFormat(name=Direct), f3=DocValuesFormat(name=Direct), f4=DocValuesFormat(name=Lucene70), bdv2=DocValuesFormat(name=Lucene70), number=DocValuesFormat(name=Direct), bdv1=DocValuesFormat(name=Direct), bdv=DocValuesFormat(name=Lucene70), id=DocValuesFormat(name=Asserting), key=DocValuesFormat(name=Asserting)}, maxPointsInLeafNode=747, maxMBSortInHeap=5.830077125785203, sim=RandomSimilarity(queryNorm=true): {}, locale=en-IE, timezone=SystemV/CST6\n07:35:14    [junit4]   2> NOTE: Linux 4.4.0-1057-aws amd64/Oracle Corporation 1.8.0_171 (64-bit)/cpus=16,threads=1,free=140024800,total=343932928\n07:35:14    [junit4]   2> NOTE: All tests run in this JVM: [TestSimilarityBase, TestMatchAllDocsQuery, TestSortRescorer, TestBagOfPostings, TestNumericUtils, TestThreadedForceMerge, TestLucene50LiveDocsFormat, TestIndexableField, TestIndexWriterThreadsToSegments, TestSnapshotDeletionPolicy, TestFilterDirectoryReader, TestWildcardRandom, TestLongPostings, TestTermScorer, TestFutureObjects, TestLucene70NormsFormat, TestFixedBitDocIdSet, TestParallelLeafReader, TestFieldInfos, TestLazyProxSkipping, TestBoolean2, TermInSetQueryTest, TestExitableDirectoryReader, TestPositiveScoresOnlyCollector, TestMixedCodecs, TestDisjunctionMaxQuery, TestSimpleSearchEquivalence, TestDocValuesQueries, TestSpanMultiTermQueryWrapper, TestMultiset, TestManyFields, TestDocValuesFieldUpdates, TestCustomNorms, TestFloatRangeFieldQueries, TestMultiThreadTermVectors, TestSimpleFSDirectory, TestDateSort, TestRAMDirectory, TestOrdinalMap, TestAxiomaticSimilarity, TestFilterSpans, TestNoMergeScheduler, TestGeoEncodingUtils, TestDateTools, TestFieldType, TestParallelCompositeReader, TestLucene60FieldInfoFormat, TestBufferedIndexInput, TestPrefixQuery, TestIndexWriterWithThreads, TestSpansEnum, TestSynonymQuery, TestIndexWriterExceptions, TestIntroSorter, TestBooleanOr, TestTrackingDirectoryWrapper, Test2BNumericDocValues, TestBinaryDocument, TestStressAdvance, TestReusableStringReader, TestIndexWriter, TestGraphTokenizers, TestShardSearching, TestNRTThreads, TestStandardAnalyzer, TestNeverDelete, TestTieredMergePolicy, TestByteSlices, TestLockFactory, TestPhraseQuery, TestFixedBitSet, TestComplexExplanations, TestRegexpRandom2, TestSegmentReader, TestIndexWriterNRTIsCurrent, TestPagedBytes, TestCrash, TestFieldsReader, TestTermsEnum2, Test2BDocs, TestIndexWriterOnDiskFull, TestFlex, TestFastCompressionMode, TestDeterminism, TestCharTermAttributeImpl, TestOmitTf, TestNearSpansOrdered, TestTermRangeQuery, TestDocumentWriter, TestLiveFieldValues, TestForTooMuchCloning, TestFuzzyQuery, TestTopDocsCollector, TestComplexExplanationsOfNonMatches, TestParallelReaderEmptyIndex, TestTopFieldCollector, TestDirectory, TestCheckIndex, TestPositionIncrement, TestVirtualMethod, TestSetOnce, TestCachingTokenFilter, TestDocCount, TestTotalHitCountCollector, TestSpanFirstQuery, TestNoMergePolicy, TestByteBlockPool, TestRollback, Test4GBStoredFields, TestScoreCachingWrappingScorer, Test2BPositions, TestByteArrayDataInput, TestDelegatingAnalyzerWrapper, TestPackedTokenAttributeImpl, TestLucene50CompoundFormat, TestIndexedDISI, TestBinaryDocValuesUpdates]",
    "attachments": {
        "LUCENE-8358.patch": "https://issues.apache.org/jira/secure/attachment/12927954/LUCENE-8358.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16513537",
            "author": "Simon Willnauer",
            "content": "here is a patch ",
            "date": "2018-06-15T08:46:09+0000"
        },
        {
            "id": "comment-16513544",
            "author": "Simon Willnauer",
            "content": "I also fixed `ReaderPool#getReadersByRam` which could create a PriorityQueue with a size of 0. I simplified it into a sorted list which defines it's order under lock. I think that's cleaner ",
            "date": "2018-06-15T08:50:45+0000"
        },
        {
            "id": "comment-16513551",
            "author": "Adrien Grand",
            "content": "The change makes sense to me. Should we sort outside of the synchronized block in ReaderPool and use a more meaningful variable name than `list`? Otherwise +1. ",
            "date": "2018-06-15T08:56:12+0000"
        },
        {
            "id": "comment-16513563",
            "author": "Simon Willnauer",
            "content": "Adrien Grand I attached a new patch ",
            "date": "2018-06-15T09:03:02+0000"
        },
        {
            "id": "comment-16513567",
            "author": "Adrien Grand",
            "content": "Sorry I just realized my comment about locking does not apply. +1 to the patch ",
            "date": "2018-06-15T09:04:10+0000"
        },
        {
            "id": "comment-16513575",
            "author": "Simon Willnauer",
            "content": "Adrien Grand I think I fixed it now. it was broken before as well since that lock isn't protecting us from concurrent modifications to that value. ",
            "date": "2018-06-15T09:13:02+0000"
        },
        {
            "id": "comment-16513579",
            "author": "Adrien Grand",
            "content": "+1 Let's put a comment to explain why you take a snapshot of the ram usage before pushing? ",
            "date": "2018-06-15T09:17:28+0000"
        },
        {
            "id": "comment-16513627",
            "author": "Simon Willnauer",
            "content": "fixed ",
            "date": "2018-06-15T10:03:47+0000"
        },
        {
            "id": "comment-16513847",
            "author": "Simon Willnauer",
            "content": "commit bot might be behind so I'm adding this manually:\n\n\ncommit 772e171ac6e70c96295f65749d0d15339133b8a6 (HEAD -> master, apache/master)\nAuthor: Simon Willnauer <simonw@apache.org>\nDate:   Fri Jun 15 10:44:26 2018 +0200\n\n    LUCENE-8358: Relax assertion in IW#writeSomeDocValuesUpdates\n    \n    This assertion is too strict since we can see this situation if for instance\n    a ReadersAndUpdates instance gets written to disk concurrently and\n    readerpooling is off. This change also simplifies ReaderPool#getReadersByRam and\n    adds a test for it.\n\n\n\n\n\ncommit 20c1b7a24a8a42e5d266441270629698e35906b1 (apache/branch_7x, branch_7x)\nAuthor: Simon Willnauer <simonw@apache.org>\nDate:   Fri Jun 15 10:44:26 2018 +0200\n\n    LUCENE-8358: Relax assertion in IW#writeSomeDocValuesUpdates\n    \n    This assertion is too strict since we can see this situation if for instance\n    a ReadersAndUpdates instance gets written to disk concurrently and\n    readerpooling is off. This change also simplifies ReaderPool#getReadersByRam and\n    adds a test for it.\n\n\n\n\n\ncommit 97736b827e3fc821fb37f785b82242cc6e47f0ba (apache/branch_7_4, branch_7_4)\nAuthor: Simon Willnauer <simonw@apache.org>\nDate:   Fri Jun 15 10:44:26 2018 +0200\n\n    LUCENE-8358: Relax assertion in IW#writeSomeDocValuesUpdates\n    \n    This assertion is too strict since we can see this situation if for instance\n    a ReadersAndUpdates instance gets written to disk concurrently and\n    readerpooling is off. This change also simplifies ReaderPool#getReadersByRam and\n    adds a test for it.\n\n\n ",
            "date": "2018-06-15T13:57:41+0000"
        }
    ]
}