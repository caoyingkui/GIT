{
    "id": "SOLR-4618",
    "title": "Integrate LucidWorks' Solr Reference Guide with Solr documentation",
    "details": {
        "affect_versions": "4.1",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "documentation"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "LucidWorks would like to donate the \"Apache Solr Reference Guide\", maintained by LucidWorks tech writers, to the Solr community. It was first produced in 2009 as a download-only PDF for Solr 1.4, but since 2011 it has been online at http://docs.lucidworks.com/display/solr/ and updated for Solr 3.x releases and for Solr 4.0 and 4.1.\n\nREVISED: Since the process took a little while, Cassandra kept maintaining hte lucid copy of the doc upto and including Solr 4.3.  it has now been loaded into the ASF CWIKI instance, but there are still other aspects of getting this doc into a maintainable state being tracked in sub-tasks...\n\nhttps://cwiki.apache.org/confluence/display/solr/",
    "attachments": {
        "NewSolrStyle.css": "https://issues.apache.org/jira/secure/attachment/12574595/NewSolrStyle.css",
        "SolrRefGuide4.1-ASF.zip": "https://issues.apache.org/jira/secure/attachment/12574593/SolrRefGuide4.1-ASF.zip",
        "SolrRefGuide.4.3.zip": "https://issues.apache.org/jira/secure/attachment/12585923/SolrRefGuide.4.3.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Cassandra Targett",
            "id": "comment-13607956",
            "date": "2013-03-20T18:24:54+0000",
            "content": "Attach the .xml export of the Solr Ref Guide. "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-13607963",
            "date": "2013-03-20T18:27:58+0000",
            "content": "A few notes about the export:\n\n\n\tI've tried to remove instances of \"LucidWorks\" branding, including the copyright notice that appeared on every page. I might have missed some, so if you find any, I can remove them and re-upload or they can be fixed after importing. I also removed all our old page history from years of page edits.\n\tThe export was made with Confluence 3.4.5, which should be all right to import into 3.4.9 (the version used by Apache). If it won't work, I have a trick to make it work.\n\tI included a relatively quick & dirty stylesheet modeled after the Solr website, which can be easily removed or modified as desired. I'll also attach it to this issue.\n\tThis export has a space key of 'srg41'. If the key isn't changed before import, the Solr Ref Guide for 4.1 will be at http://cwiki.apache.org/confluence/display/srg41, and can't be changed. To maintain a \"4.1\" version, that might be fine. However, if it would be preferred to change the key to \"solr\" or \"solr41\" (or something else), I can do that and re-upload the package.\n\tThere are some Confluence plugins used in the pages that may not be currently installed in the Apache Confluence instance. Rooting all these out would be a huge task and it might be easier if it's imported and then fix what breaks. But, for the record, here are the plugins that I think might cause a problem:\n\t\n\t\tThe Navigation plugin, which provides nav links at the bottom of every page.\n\t\tThe Link Validator plugin, used on one page currently called \"Internal Doc Link Check\". It runs through every page, checks every link, and shows the status of each one.\n\t\tThe Reporting plugin, used to set up the link checking page.\n\t\tThe Content Formatting plugin, which provides some advanced formatting tools.\n\t\tThe Table of Contents plugin, which provides TOCs on many pages. I suspect this is automatically included with Confluence, but I mention it in case it's not (lots of pages will look broken if not).\n\t\tThe Table Plugin, which provides advanced table options, like sorting, row highlighting, etc. There's only one page that uses this, so that could just be fixed after import.\n\t\n\t\n\n "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-13607965",
            "date": "2013-03-20T18:28:40+0000",
            "content": "Attach the styling used in the new Confluence space. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13607968",
            "date": "2013-03-20T18:29:23+0000",
            "content": "+1, sweet! "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13607971",
            "date": "2013-03-20T18:31:23+0000",
            "content": "+1. This is great! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13607973",
            "date": "2013-03-20T18:34:07+0000",
            "content": "+1! "
        },
        {
            "author": "Yago Riveiro",
            "id": "comment-13607976",
            "date": "2013-03-20T18:35:39+0000",
            "content": "+1 "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13607983",
            "date": "2013-03-20T18:40:55+0000",
            "content": "I think one of the keys in importing this is that we setup a versioning structure such that we can copy the guide to a new version and then edit that version for a specific release.  That is, some tree structure:\n\n\t4.1\n\t\n\t\tGuide\n\t\n\t\n\t4.2\n\t\n\t\tGuide\n\t\n\t\n\n\n\n... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607991",
            "date": "2013-03-20T18:48:01+0000",
            "content": "I think one of the keys in importing this is that we setup a versioning structure\n\none possibility is to follow the same model that Lucid has been using, and \"clone\" the confluence space for each release \u2013 but i don't know the details about what's involved with that on the confluence admin side of things, and whether the asf confluence setup would require asfinfra's asistance to do that \u2013 probably not a good idea to move forward with a plan that would require their invovlement for every minor release.\n\nanother possibility would be use the confluence wiki to always represent the \"live\" state of things, and use confluences PDF exporting to generate a PDF copy on each release.\n\ni think a bigger question is dealing with the 4x (5x, 6x, etc...) branches vs the \"trunk\" ... do we have a trunk version of the guide we update when moving changes to trunk, and then copy/paste those into the 4x guide when backporting?  (my first thought was to suggest \"we only have a 4x guide and you update it when backporting\" but then we wind up not having any up to date nad accurate docs when 5.0 comes out) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13608001",
            "date": "2013-03-20T18:52:57+0000",
            "content": "As long as we have versioned docs in some form, I'm on board. I've been on a doc boycott until we solve the version issue.\n\nI also think we want to lock down these docs. I think this is important enough stuff that we should have committers based on documentation merit. It's really just as important as the code. Users should still be able to comment to make suggestions or ask for clarifications or whatever, but I'm not happy with how much misinformation has creeped into our current wiki. I'd rather try and grow a better community around documentation the same way we do code.\n\nI don't know how easy that will be to setup, but that's what I'm personally looking for. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13608008",
            "date": "2013-03-20T18:57:24+0000",
            "content": "\nanother possibility would be use the confluence wiki to always represent the \"live\" state of things, and use confluences PDF exporting to generate a PDF copy on each release.\n\nThis sounds nicest to me.\n\n\ni think a bigger question is dealing with the 4x (5x, 6x, etc...) branches vs the \"trunk\" ... do we have a trunk version of the guide we update when moving changes to trunk, and then copy/paste those into the 4x guide when backporting? (my first thought was to suggest \"we only have a 4x guide and you update it when backporting\" but then we wind up not having any up to date nad accurate docs when 5.0 comes out)\n\nI don't know much about confluence but could we have (separate/isolated):\n\n\tseparate page for minor errata about previous releases (since they would just be PDFs if we go with that strategy).\n\tseparate page for trunk-only changes.\n\n\n\nThis way the thing is targetting our \"release/stable\" branch. Part of using stable is getting fluid and consistent docs \n\nAfter we release 4.5 or 4.9 or whatever is the last minor one, we work on integrating the trunk changes before 5.0 and clear that page for 6.0 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13608014",
            "date": "2013-03-20T18:59:54+0000",
            "content": "\nI also think we want to lock down these docs. I think this is important enough stuff that we should have committers based on documentation merit. It's really just as important as the code. Users should still be able to comment to make suggestions or ask for clarifications or whatever, but I'm not happy with how much misinformation has creeped into our current wiki. I'd rather try and grow a better community around documentation the same way we do code.\n\n+1\n\nAnd i'd say committers can review the comments from users and if user X is consistently making good contributions, then make them documentation committer too. just like code.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13608020",
            "date": "2013-03-20T19:04:16+0000",
            "content": "I also think we want to lock down these docs. I think this is important enough stuff that we should have committers based on documentation merit. It's really just as important as the code. Users should still be able to comment to make suggestions or ask for clarifications or whatever, but I'm not happy with how much misinformation has creeped into our current wiki\n\nCassandra is more of a confluence expert them me, but confluence definitely has the ability for user ACLs and letting all users post comments on a page while a specific subset of users can edit \u2013 from whatever i remember the ASF confluence setup should definitely support this for allowing committer only edit access, because it's neccessary if you want to bundle any confluence edited content as part of a release (the fact tha we aren't doing this in moin moin is why we can't legally bundle up the wiki and ship it as docs in the release)\n\n\n* separate page for minor errata about previous releases (since they would just be PDFs if we go with that strategy).\n\nisn't that just CHANGES.txt?\n\n* separate page for trunk-only changes.\n...\nAfter we release 4.5 or 4.9 or whatever is the last minor one, we work on integrating the trunk changes before 5.0 and clear that page for 6.0\n\nI'm okay with that ... but i'm suprised you're suggesting it \u2013 you're usually the biggest proponent of keeping trunk in a state that it could, in theory, be released as X.0 on a moments notice \u2013 this type of a approach would mean a decent amount of doc work needed to make a bunch of doc changes related to trunk specific features/improvements just before an X.0 release.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13608022",
            "date": "2013-03-20T19:05:00+0000",
            "content": "I'm guessing that to import we will have to open an infra ticket? Grant Ingersoll, you don't have any extra admin powers on confluence do you? I know you made the original request to have the spaces made. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13608052",
            "date": "2013-03-20T19:22:22+0000",
            "content": "\n\n\tseparate page for minor errata about previous releases (since they would just be PDFs if we go with that strategy).\n\n\n\nisn't that just CHANGES.txt?\n\nI was thinking in case we had a horrible documentation bug in 4.2.PDF and we just today realized it, we could have 4.2-Errata which is a list of corrections.\n\n\n    After we release 4.5 or 4.9 or whatever is the last minor one, we work on integrating the trunk changes before 5.0 and clear that page for 6.0\n\nI'm okay with that ... but i'm suprised you're suggesting it \u2013 you're usually the biggest proponent of keeping trunk in a state that it could, in theory, be released as X.0 on a moments notice \u2013 this type of a approach would mean a decent amount of doc work needed to make a bunch of doc changes related to trunk specific features/improvements just before an X.0 release.\n\nUnder this plan we still could? We'd make 5.0.PDF and i'd take the TrunkChanges page and copy it into 5.0-Errata \n\nI'm not recommending we would actually do that: its evil, I'm just saying there would exist a shortest path to make it possible in case we really want to release and no one is willing to do the doc work to make it nice.\n\nMainly I was just trying to suggest a solution that would be simplest to manage since clearly our docs could use improvement. "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-13608084",
            "date": "2013-03-20T19:53:22+0000",
            "content": "one possibility is to follow the same model that Lucid has been using, and \"clone\" the confluence space for each release\n\nI'm pretty sure there's a way to make that happen without needing asfinfra every time. If we can get the Copy Space plugin installed (it may already be there), then all it requires is \"space admin\" rights. System admin rights will be needed to import what I just uploaded, then with space admin rights, a subset of users with admin permissions should be able to copy that to make new spaces for new versions. At Lucid it's more complicated because we have an internal Confluence and an external Confluence; with only instance to work with, the Copy Space plugin should be fine and Atlassian says it only needs space admin privs. Being able to copy spaces is key, so need to figure out the policy on permissions there.\n\nanother possibility would be use the confluence wiki to always represent the \"live\" state of things, and use confluences PDF exporting to generate a PDF copy on each release.\n\nI think opinions will vary about that...we actually have 2 models at Lucid. For the Solr Ref Guide, the latest version was both online and in PDF, while older versions were pdf-only. For the LucidWorks Search product, all the versions doc are online. I can't really tell which is better from a user perspective, but I can tell you which is easier, which is only having one \"live\" state at a time. When you have all the versions online, each one of those versions is a different space, and spaces are pretty much managed as separate entities, you end up after a time with a lot of spaces to manage and a good amount of really duplicated content across them all. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13608167",
            "date": "2013-03-20T20:42:34+0000",
            "content": "Wow   This is wonderful!  +1 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13608235",
            "date": "2013-03-20T21:17:54+0000",
            "content": "I also think we want to lock down these docs. I think this is important enough stuff that we should have committers based on documentation merit.\n\n+1\nWe'll still have the moinmoin wiki for other cases.\n\n[...] letting all users post comments on a page [...]\n\nTo avoid clutter, hopefully these would be either invisible by default or be deletable.  Once comments are handled, they become noise.  We could also take comments on a mailing list.\n\nSyntax highlighting is highly desirable for nice looking docs.  Is this enabled on the ASF hosted confluence instance, or are there other options like client-side highlighting?\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13608301",
            "date": "2013-03-20T22:04:23+0000",
            "content": "We could also take comments on a mailing list.\n\nI really like the comment below model. We can moderate it if necessary, but I've seen this work really well with php and i think spring or hibernate or something. If there was ever anything confusing or missing from the doc, you'd often find it in the comments below. They were done in a way that didn't seem intrusive to the page and where clearly separate. I don't know that we can replicate that, but it's the best doc experience I've had. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13608365",
            "date": "2013-03-20T22:54:39+0000",
            "content": "Sweet kickstart for our new wiki!\n\nWe'll still have the moinmoin wiki for other cases.\n\nLet's kill MoinMoin by making it read-only with big warnings that this is out-of-date. Can't we simply create a separate Confluence Space which is open for editing by whoever?\n\nI really like the comment below model.\n\n+1\n\nAlso +1 to one release-branch version, with frozen PDFs for older releases, and one live errata page per released version. "
        },
        {
            "author": "Yago Riveiro",
            "id": "comment-13608837",
            "date": "2013-03-21T11:11:13+0000",
            "content": "The relevant info posted into the comments will pass to the official doc? Some time read a thread with 200 comments to find the right answer is annoying. The relevant info should will be merge to the doc in future versions of the document\n\nA system voting to the answers like stackoverflow will be great too.\n\nEither way, this great info donated by the lucidworks will be a boost to sorl's doc fantastic.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13608896",
            "date": "2013-03-21T13:09:33+0000",
            "content": "Let's kill MoinMoin by making it read-only with big warnings that this is out-of-date. \n\nThere are a ton of links to Solr wiki pages in the wild.\nOn a page-by-page basis, we should point the old wiki page to the corresponding new documentation page when we are satisfied that the new one reflects everything we want. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13609337",
            "date": "2013-03-21T19:20:20+0000",
            "content": "Have anyone considered storing doc in SVN alongside the code. This enables doc to follow code through branches, merges etc. Whenever you make an official release the corresponding doc can be made available online. Then you will have one doc site per official release. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-13609410",
            "date": "2013-03-21T20:15:49+0000",
            "content": "Interestingly, GitHub pages (where GitHub projects store documentation) are GitHub repositories themselves. Though I don't think one could do a Pull request to it. \n\nBut it could be a thing to consider with Wiki pages stored in GitHub as a standalone project and then generated into static and fast content using something like MiddleMan. Then, the proposed changes become Pull Requests. GitHub very recently added some non-techie interface for doing easy changes+Pull requests. Comments could be a dynamic Javascript add-on then.\n\nAnd Confluence export is XML, easy enough to reformat that into anything, including a set of files. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13638235",
            "date": "2013-04-22T18:02:22+0000",
            "content": "What's the next step here to get this done before it gets out of date? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13658068",
            "date": "2013-05-15T05:23:16+0000",
            "content": "\nI'll take the lead on trying to move forward with importing and setting up a process for maintaining things.\n\nNotes hoss made based on poking arround today\n\n\thttps://cwiki.apache.org/INFRA/cwiki.html\n\tPMC members can be in the confluence admin group\n\t\n\t\ti already am a confluence admin\n\t\twe can define our own groups/users\n\t\twe can specify fine grained control over actions users can take (ie: only committers of a certain group can edit pages, any user can comment, etc...)\n\t\n\t\n\twe can add new spaces as needed, but there is some non trivial overhead associated with adding spaces, not to mention the risk of forking, so sticking with a single space tracking the \"stable\" branch and exporting as PDF on release seems like the simplest path forward\n\tthere is a process for setting up edit notifications to go to the commit list\n\t\n\t\tit involves creating a user using hte commits@lucene mailing address, and setting that user up to \"watch\" pages.\n\t\n\t\n\tapache policy is that projects can't link directly to confluence wiki pages, instead an autoexport plugin is used...\n\t\n\t\tautoexport plugin details\n\t\t\n\t\t\thttps://marketplace.atlassian.com/plugins/com.atlassian.confluence.extra.autoexport\n\t\t\thttps://ecosystem.atlassian.net/browse/AUTOEXP\n\t\t\n\t\t\n\t\tsolr space export compared to raw solr space...\n\t\t\n\t\t\thttps://cwiki.apache.org/SOLR/\n\t\t\thttps://cwiki.apache.org/confluence/display/SOLR/Index\n\t\t\n\t\t\n\t\n\t\n\tnote that the autoexport plugin doesn't display comments by default\n\t\n\t\tit however does support per-space customizable (velocity) templates for the autoexported pages\n\t\tthe atlassian docs on developing templates is like a kafka novel, but even when i did find stuff, it was hard to tell what was applicable since the autoexport plugin does it's own velocity template rendering, and the supported context/functions might not be be the same as in normal confluence templates\n\t\t\n\t\t\ta velocity expert might be able to help figure this out better\n\t\t\n\t\t\n\t\ti took a stab are trying to borrow the \"#renderComments()\" logic i found in other confluence page templates in the autoexport template, but it didn't work 9shocker)\n\t\tworst case scenario, if we can't access the default logic/template for rendering comments, we can evidently re-invent our own wheel using the java methods in our customized template...\n\t\t\n\t\t\thttps://docs.atlassian.com/atlassian-confluence/latest/com/atlassian/confluence/pages/Page.html\n\t\t\thttps://docs.atlassian.com/atlassian-confluence/latest/com/atlassian/confluence/pages/Comment.html\n\t\t\t\n    <div class=\"test\">\n      <h3>Hoss'ss test</h3>\n      <p>trying to access comments in the auto-export template</p>\n      #set ($comments = $page.comments)\n      <ul>\n      #foreach ($comment in $comments)\n        <li class=\"smalltext\"><b>$comment</b> - $comment.displayTitle ($comment.creatorName)<br/>\n          <p>$comment.bodyAsString</p> <!-- doesn't seem to work ... shocker -->\n        </li>\n      #end\n      </ul>\n    </div>\n\n\n\t\t\ti clearly have no idea what i'm doing here, and it probably isn't a good idea to try and build this out and maintain it manually if there really is no way to use the native comment rendering inside our autoexport template, but i figured i'd show what i had.\n\t\t\n\t\t\n\t\n\t\n\teven if we could make hte autoexport pages displya comments in a sane way, the autoexport is only triggered by page edits, not comments - so we would need to cron the autoexport\n\t\n\t\tnot sure how to do that\n\t\tnot sure infra would go for it.\n\t\n\t\n\n\n\nMy instinct is telling me that we should punt on the issue of allowing page comments, and instead i'll move forward with focusing on:\n\n\n\tget the content loaded and looking for plugin errors like Cassandra mentioned might happen\n\tverifying that autoexports seem to work if/when edits are made\n\t\n\t\tso far so good, but i don't know how well the autoexport plugin is going to handle a wiki space this big\n\t\n\t\n\ttest out the PDF export\n\tdocument/automate doing a PDF export so it's easy to do whenever we release\n\tlock down edits & setup confluence permissions for other committers/PMC members\n\ttest & setup edit notifications -> commits@lucene\n\n "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-13658311",
            "date": "2013-05-15T12:40:28+0000",
            "content": "Just some thoughts:\n\n\tApache version of software is a full release behind the latest. They are not planning to move and/or use Solr as a chance to test the latest version?\n\tComments are not terribly big thing on the Solr Wiki. Most of them are more like call to action/bug reports. Maybe integrating external (e.g. Disqus) module is sufficient?\n\tIs the goal to merge content or to replace it? I think Wikis overlap, but I am not sure about one being a superset for another.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13671881",
            "date": "2013-05-31T22:55:13+0000",
            "content": "Ok, well ... i'm not sure what happened, but I definitely had an update for this issue that I wrote up ~week ago which I aparently never hit submit on or something, so i'm going to try to re-create it.  It was mostly responses to specific comments/questions people had asked so far in the issue...\n\nOn the general topic of using Confluence to maintain this documentation\n\nApache version of software is a full release behind the latest. They are not planning to move and/or use Solr as a chance to test the latest version?\n\nASF uses a single confluence istance for all projects, I don't think we should plan/assume/hope for any specific upgrade of confluence in any of our plans \u2013 is there something specific in the latest version of confluence that you had in mind that you are asking about?\n\nHave anyone considered storing doc in SVN alongside the code. \n\nThis is something that's been discussed/tried in the past, but it has proven problematic...\n\n\n\tFor \"user\" documentation like this, keeping the docs along side the code isn't as easy as it is for \"developer\" docs where you leverage tools like javadocs \u2013 the structure of the desired user documentation doesn't neccessarily match the structure of the code\n\tMost of the Solr developers i've heard express an opinion on maintaining docs in svn vs maintaing docs as a wiki UI seem to prefer using a wiki \u2013 the level of conviction on these sorts of opinions tends to increase when you remember that wiki software automatically solves the \"geneating site\" aspects for you; as opposed to something like using docbook, or XSLT transformed xhtml files or what not.\n\tIn particular, it's worth learning from the past: the entire solr website use to be managed by a forrest script that generated HTML from docbook files and was bundled into every release.  It was in fact exactly what you describe: a set of docs along side the source code in svn that could be versioned along with releases \u2013 and yet ... except for the tutorial page it got very little love from committers.  New \"formal\" docs were (almost) never added, instad the wiki was considered a preferable place to document things because it was easier to deal with.  What has been talked about here is essentially the best of both worlds: using hte wiki for easy editing/management of the docs by committers, with the ability to version/release PDF snapshots.\n\n\n\nBut it could be a thing to consider with Wiki pages stored in GitHub as a standalone project and then generated into static and fast content using something like MiddleMan\n\nAn approach like that would not be viable as a method for maintining any documentation we wanted to officially publish and release as an apache project \u2013 the authoritative copy needs to be kept on apache infrastructure.\n\n\nOn comments...\n\nComments are not terribly big thing on the Solr Wiki. Most of them are more like call to action/bug reports. ...\n\n\nI was thinking the same thing about comments not being super important when i wrote my last update, but the key thing to remember (in comparisong to the existing wiki) is that since we plan to publish this doc as part of our release, we need to use a model where only the committers can edit the doc itself.  Moving forward comments become very important as the primary means for users to provide feedback on the document or point out corrections that need to be made.\n\n...Maybe integrating external (e.g. Disqus) module is sufficient?\n\nI also started down the path to looking into a service like Disqus, but I had reservations about depending on an extenal system like that \u2013 then I discovered the ASF INFRA team already offers a similar type service for ASF projects, and based on my reading, I think this looks like it will work great for our usecases...\n\n\n\tInfo: https://comments.apache.org/help.html\n\tExample on the tomcat docs: http://tomcat.apache.org/tomcat-7.0-doc/windows-service-howto.html#comments_section\n\n\n\nThe relevant info posted into the comments will pass to the official doc? Some time read a thread with 200 comments to find the right answer is annoying. The relevant info should will be merge to the doc in future versions of the document\n\nBecause of the licensing rules arround what we as a project \"release\" comments must not be included in the published version of the doc, nor would we want them to be \u2013 as you said, relevent info shold be rolled up into the doc itself, and older comments that are no longer relevant should gradualy be removed.\n\n\nOn cwiki vs moinmoin and the future of wiki.apache.org/solr\n\nIs the goal to merge content or to replace it? I think Wikis overlap, but I am not sure about one being a superset for another.\n\nThere is no strict superset.  In my opinion the original goal for the moinmoin wiki still remains the same as the day it was created: a place for the community as a whole to be able to create and collaborate on free-form content about solr.  It's just that we as developer/scommitters have been abusuing it for years in place of publishing true, formal, official documentation.\n\nThe focus here in this Jira is about getting this refrence guide online as \"official\" documentation.  Once that's done, there is likeley a lot of content in the existing MoinMoin wiki that can be purged, and replaced with links into the new official refrence guide, but that certainly doesn't mean all of MoinMoin content should go away or be migrated into the ref guide\n\nSome concrete examples:  \n\n\tThe ref guide is a great place to list of every configuration option and their valid values, but the community MoinMoin wiki is still a good place for \"tips and tricks\" about combining various config options to solve example problems.\n\tSome pages just flat out would not make sense as part of the Solr refrence guide (ie: PublicServers, NightlyBuilds, CommitterInfo, etc...)\n\tSome pages might make sense in the ref guide, but would probably be better as external community edit pages that are linked to from the ref guide (ie: SolrResources, FAQ, SolrPerformanceData, SolrRelevancyCookbook, etc...)\n\n\n\nLet's kill MoinMoin by making it read-only with big warnings that this is out-of-date. ...\n\nAs yonik mentioned, there are so many existing links, killing the MoinMoin wiki as a whole seems like a bad idea.  Killing entire pages also seems like a bad idea for the same reason.  I think we should instead purge content from pages where it's redundent, linking from MoinMoin to the new ref guide pages on the same topic when doing so, and (where appropriate) keep existing \"tips and tricks\" type content on those MoinMoin pages\n\n... Can't we simply create a separate Confluence Space which is open for editing by whoever?\n\nWe probably could, but that seems like a completley distinct discussion that can happen later.  For now, i really want to focus solely on getting this ref guide content live and in a usable & maintainable state where it can be snapshooted and published with each release.  There still needs to be a community wiki, and if after we get the ref guide live folks would like to push for replacing MoinMoin with Confluence for the community wiki i certainly won't object \u2013 but that should be tracked in a distinct issue.\n\n\n\nOk ... i think that catches me up with what i thought i already posted.\n\nMy new, new, update is that in talking with cassandra, I think I've figured out the steps we need to get the ZIP imported into CWIKI and deal with the ASF specific CWIKI stuff to make it play nice with the autoexporter.  I also learned that cassandra has been maintaining the LucidWorks copy of the ref guide while waiting for progress on this issue, and should soon (or maybe already?) have a 4.3 version she can attach and we can start with that.\n\nSince i'm (clearly) getting lost in this issue as it stands right now, i'm going to open Sub-Tasks to track the concrete actions that need to be taken moving forwrad to help keep them straight, and to help isolate the import steps so i can get the INFRA team to review them and hopefully give their blessing (i don't think that's stricly needed, pretty sure i have all the neccessary confluence perms already, but i'd rather be safe)... "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-13671953",
            "date": "2013-06-01T02:33:46+0000",
            "content": "Just final thought about Git and GitHub:\n\nAn approach like that would not be viable as a method for maintining any documentation we wanted to officially publish and release as an apache project \u2013 the authoritative copy needs to be kept on apache infrastructure.\n\nI think that's one of the big things about Git that any copy is an authoritative copy. So, as long as there was a replica on Apache infrastructure, I think you are covered for the 'officially' part. And GitHub keeps trying to make contributions easier, down to click and edit this file. "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-13673471",
            "date": "2013-06-03T19:34:42+0000",
            "content": "I also learned that cassandra has been maintaining the LucidWorks copy of the ref guide while waiting for progress on this issue, and should soon (or maybe already?) have a 4.3 version she can attach and we can start with that.\n\nI finished those changes on Friday. Here is an update for 4.3 which should be ready to go.\n\nThe space key this time is 'solr', so that should be easier to work with than the previous version for 4.1. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13688623",
            "date": "2013-06-19T23:20:14+0000",
            "content": "FYI: Things have kind of been in a holding pattern for a while now ... first i was waiting for some confirmation from Infra to proceed, then Gavin in Infra said he wanted to do a full backup first and be online during the import, then after playing jira & irc message tag for a bit (Gavin and i are in diametricly opposed timezones) Infra announced that they are upgrading CWIKI to Confluence 5.x.\n\nI think the current plan is to import the data into the current wiki sometime in the next day or so before the upgrade, but it may happen as part of the ugprade, or perhaps after the upgrade ... i really don't know. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13692535",
            "date": "2013-06-24T23:28:56+0000",
            "content": "Status Update:\n\nThe Confluence 5.x upgrade on CWIKI ran into hicups and is still ongoing (see INFRA-6406), but as part of the initial steps Gavin imported the Solr 4.3 ref guide. The content is now live and editable, but there are still some formatting hicups that should be noted (SOLR-4957) but left on hold until the upgraded is finalized since it will likely affect the formatting and plugin compatibility.\n\nthe upgrade has also (apparently) simplified a lot of the concerns about using the autoexport plugin and the standalone commenting system \u2013 so we should be able to just use the built in confluence comments feature.\n\nCommitters should go ahead and follow the process in SOLR-4888 to ensure they have edit permissions for the content, and can proceed with adding/improving the content in anticipation of formally releasing it for Solr 4.4 \u2013 BUT \u2013 as mentioned above, please do not spend a lot of time/energy manually fixing any formatting problems you encounter, just noted them in SOLR-4957\n\n(issue description updated to reflect some of hte current realities) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13706575",
            "date": "2013-07-12T02:17:07+0000",
            "content": "Status Update: Watchers should keep an eye on the various sub-tasks for progress on specific areas.\n\nIn general: from a process standpoint, we are in fairly good shape to release the doc along with 4.4.  The content still needs some edits (see SOLR-5036) but the process seems ready \u2013 all bets are off however if/when the Confluence upgrade to 5.0 is finished, since that may require some process changes (and will hopefully let us deal with SOLR-4887 in a sane way). "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-13944733",
            "date": "2014-03-24T04:24:35+0000",
            "content": "Now that the Reference Guide is a success story - is there any more thinking on what should happen with a MoinMoin WIKI? "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-13945135",
            "date": "2014-03-24T14:09:34+0000",
            "content": "Now that the Reference Guide is a success story - is there any more thinking on what should happen with a MoinMoin WIKI?\n\nThe plan has been to go through the wiki and mark pages where duplicated documentation exists in the Solr Ref Guide and point users to a definitive source. Since the MoinMoin wiki has more flexible permissions for editing (i.e., you don't have to be a committer to make changes), it can transform into a community space where users can share the cool things they're doing or problems they overcame.\n\nA framework has already been proposed for that here:\nhttps://cwiki.apache.org/confluence/display/solr/Internal+-+Maintaining+Documentation#Internal-MaintainingDocumentation-Migrating%22Official%22DocumentationfromMoinMoin\n\nThe first step of that is to remove the duplicated content - the obstacle is really just volunteers who have the time to help out.\n\nAs for this issue, there are a couple sub-tasks from the original setup that I think we still would like to get resolved somehow. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15588899",
            "date": "2016-10-19T14:18:03+0000",
            "content": "Is this (and related issue) still valid given that we are migration OUT of the CWIKI? "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-15589540",
            "date": "2016-10-19T18:56:56+0000",
            "content": "I closed out the last 2 open issues that were hanging open from the original contribution, so this can be closed now too. "
        }
    ]
}