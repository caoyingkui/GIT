{
    "id": "SOLR-6386",
    "title": "make secondary ordering of facet.field values (and facet.pivot?) consistently deterministic",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "as a fluke of how the SOLR-2894 patch evolved, it wound up adding a bit of testing of distributed facet.field on date fields (see r1617789 changes to TestDistributedSearch) ... but this started triggering some random failures due to facet constraints with identical values being sorted differently between the distributed query and the single node control query.\n\nWe should make the facet.field (and facet.pivot) code order constraints with tied counts consistently regardless of whether it's a distrib search or not.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14100035",
            "date": "2014-08-17T18:26:29+0000",
            "content": "FWIW: this is the seed that caused a failure on trunk as of r1618485...\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestDistributedSearch -Dtests.method=testDistribSearch\n-Dtests.seed=5547E29057A024AB -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=de_CH\n-Dtests.timezone=Asia/Saigon -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 14.6s J1 | TestDistributedSearch.testDistribSearch <<<\n   [junit4]    > Throwable #1: junit.framework.AssertionFailedError:\n.facet_counts.facet_fields.a_n_tdt.1970-01-01T00:00:00Z!=2010-04-20T11:00:00Z (unordered or missing)\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([5547E29057A024AB:D4A16C8820FF4497]:0)\n   [junit4]    >        at junit.framework.Assert.fail(Assert.java:50)\n   [junit4]    >        at\norg.apache.solr.BaseDistributedSearchTestCase.compareSolrResponses(BaseDistributedSearchTestCase.java:842)\n   [junit4]    >        at\norg.apache.solr.BaseDistributedSearchTestCase.compareResponses(BaseDistributedSearchTestCase.java:861)\n   [junit4]    >        at\norg.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:562)\n   [junit4]    >        at\norg.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:542)\n   [junit4]    >        at\norg.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:521)\n   [junit4]    >        at org.apache.solr.TestDistributedSearch.doTest(TestDistributedSearch.java:180)\n   [junit4]    >        at\norg.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:875)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n\n\n\nI confirmed that reverting to trunk prior to r1617788 (just prior to SOLR-2894 being committed) and applying only this specific test change still failed (although it wasn't with the exact same master seed \u2013 but it popped up fairly quickly w/beasting) to rule out this inconsistency as a side effect of the pivot changes.  definitely seems to be an older behavior that pre-dates distrib pivots. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14100036",
            "date": "2014-08-17T18:27:43+0000",
            "content": "I think this is a dup of SOLR-6314. I expect to check in a patch today for 6314 and we can see.\n\nI'll test with this seed too... "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14100038",
            "date": "2014-08-17T18:30:34+0000",
            "content": "Commit 1618490 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1618490 ]\n\nSOLR-2894: tweak test to workarround SOLR-6386 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14100042",
            "date": "2014-08-17T18:35:05+0000",
            "content": "Erick: i'm not sure i see how they are related \u2013 but if you think you've fixed this issue, try reverting r1618490 locally and then beasting TestDistributedSearch to confirm. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14100108",
            "date": "2014-08-17T21:05:59+0000",
            "content": "You're probably right. I added some logging at the error to dump the responses being compared\nand pasted them below. Two interesting things:\n1> one response has maxScore and the other does not. Not sure that would be significant or not.\n2> Your workaround is interesting. I think there's another bug here, see the responses for \n2010-05-03T11:00:00Z below. At least one problem is that there are counts of 0 returned in one\ncase but not in the other. Haven't even looked at which one this happens to (expected or actual),\ngot some errands to run.\n\nI'm also looking two other bugs, SOLR-6154 and SOLR-6187 both having to do with mincount\nand distributed search not being respected. Seems ... ummm... at least it's in the vicinity . I'll\nlook some more later.\n\nResponse A\n{responseHeader=\n{status=0,QTime=8}\n,response=\n{numFound=68,start=0,maxScore=1.0,docs=[]}\n,facet_counts={facet_queries={},facet_fields=\n\n{a_n_tdt={2010-05-03T11:00:00Z=2,\n\n2010-04-20T11:00:00Z=1,2010-05-02T11:00:00Z=1,2010-05-05T11:00:00Z=1,1970-01-01T00:00:00Z=0,2009-03-13T13:23:01.248Z=0,2010-04-15T05:45:19.616Z=0,2010-04-20T06:55:27.232Z=0,2010-04-20T10:55:45.152Z=0,2010-04-20T10:59:59.104Z=0,2010-04-27T16:01:01.44Z=0,2010-05-02T07:51:54.624Z=0,2010-05-02T10:59:46.816Z=0,2010-05-02T10:59:59.104Z=0,2010-05-03T07:10:00.704Z=0,2010-05-03T10:57:12.192Z=0,2010-05-03T10:59:56.032Z=0,2010-05-05T10:25:50.08Z=0,2010-05-05T10:56:25.088Z=0,2010-05-05T10:59:58.08Z=0}},facet_dates={},facet_ranges={},facet_intervals={}}}\n\nResponse B\n{responseHeader=\n{status=0,QTime=5}\n,response=\n{numFound=68,start=0,             docs=[]}\n,facet_counts={facet_queries={},facet_fields={a_n_tdt={\n2010-05-03T11:00:00Z=2\n,2010-04-20T11:00:00Z=1,2010-05-02T11:00:00Z=1,2010-05-05T11:00:00Z=1,2010-04-20T11:00:00Z=0,2010-05-02T11:00:00Z=0,\n2010-05-03T11:00:00Z=0,\n\n2010-05-05T11:00:00Z=0,2010-04-20T10:59:59.104Z=0,2010-05-02T10:59:59.104Z=0,2010-05-03T10:59:56.032Z=0,2010-05-05T10:59:58.08Z=0,2010-04-20T10:55:45.152Z=0,2010-05-02T10:59:46.816Z=0,2010-05-03T10:57:12.192Z=0,2010-05-05T10:56:25.088Z=0,2010-04-20T06:55:27.232Z=0,2010-05-02T07:51:54.624Z=0,2010-05-03T07:10:00.704Z=0,2010-05-05T10:25:50.08Z=0,2010-04-15T05:45:19.616Z=0,2010-04-27T16:01:01.44Z=0,2009-03-13T13:23:01.248Z=0,1970-01-01T00:00:00Z=0,1970-01-01T00:00:00Z=0,1970-01-01T00:00:00Z=0,1970-01-01T00:00:00Z=0}},facet_dates={},facet_ranges={},facet_intervals={}}} "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14125694",
            "date": "2014-09-08T16:00:01+0000",
            "content": "Chris Hostetter (Unused) Some things I found out this weekend:\nMark Miller Pinging you on this because I half suspect that there's something weird with the test infrastructure.\n\nFrankly I'm at a loss, but here's the outstanding things I saw. I'm pretty sure my question of whether this would \"just get taken care of\" by the stuff I'm doing for SOLR-6187 is \"no\", so I'm assigning it back to nobody. Adding the facet.limit=1 in the test makes the problem disappear just b/c all the bogus 0 counts that get returned are removed.\n\n> If I optimize the clients and control server in BaseDistributedSearchTestCase.commit, then this test case does NOT fail. But I must optimize both. If I just optimize the control, it fails. If I just optimize the clients it fails. This really weirds me out. I suspected pilot error here frankly, so I just tried it again and I'm pretty sure I'm not hallucinating. I'd expect optimizing the distributed case would fix this up but nooooo. So I wonder if there's something weird here with RAMDirectory which underpins the servers.... Although just for yucks I tried using a disk-based directory and it still seemed to fail although I won't swear that I got it right.\n\n> I set up IntelliJ with the seeds etc. you provided and it's not until the third pass that it fails. But it fails every time on the third pass. Ditto with running the test from the command shell.\n\n> in DocValuesFacet.getCount, around line 200 or so I'm printing out the values added. This is near the bottom of the clause:\nif (sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n... near the end\n} else...\n\nOn the pass that fails, I get these values:\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T11:00:00Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-04-20T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T10:59:56.032Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T10:57:12.192Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-02T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T07:10:00.704Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-05T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-04-27T16:01:01.44Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2009-03-13T13:23:01.248Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 1970-01-01T00:00:00Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 1970-01-01T00:00:00Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 1970-01-01T00:00:00Z 0\n   [junit4]   1> QUERY DUMP 1 Adding string/count 1970-01-01T00:00:00Z 0\n\nNotice the Jan-1, 1970. dates. Sure seems like a zero snuck in there somewhere. If you sum up the non-zero counts, you wind up with the right facet counts.\n\nOn the pass that's optimized, I get this on the third pass which is consistent with what the control server gives back, thus it passes.:\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-04-20T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-03T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-02T11:00:00Z 1\n   [junit4]   1> QUERY DUMP 1 Adding string/count 2010-05-05T11:00:00Z 1\n\nAnyway, this is beyond what I want to deal with just now. Let me know if there's anything else I can provide.  "
        }
    ]
}