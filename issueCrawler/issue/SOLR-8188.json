{
    "id": "SOLR-8188",
    "title": "Add hash style joins to the Streaming API and Streaming Expressions",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Minor"
    },
    "description": "Add HashJoinStream and OuterHashJoinStream to the Streaming API to allow for optimized joining between sub-streams.\n\nHashJoinStream is similar to an InnerJoinStream except that it does not insist on any particular order and will read all values from the stream being hashed (hashStream) when open() is called. During read() it will return the next tuple from the stream not being hashed (fullStream) which has at least one matching record in hashStream. It will return a tuple which is the merge of both tuples. If the tuple from the fullStream matches with more than one tuple from the hashStream then calling read() will return the merge with the next matching tuple. The order of the resulting stream is the order of the fullStream.\n\nOuterHashJoinStream is similar to a HashJoinStream and LeftOuterJoinStream in that a tuple from fullStream will be returned even if it doesn't have a matching record in hashStream. All other pieces are identical.\n\nIn expression form\n\nhashJoin(\n  search(collection1, q=*:*, fl=\"fieldA, fieldB, fieldC\", ...),\n  hashed=search(collection2, q=*:*, fl=\"fieldA, fieldB, fieldE\", ...),\n  on=\"fieldA, fieldB\"\n)\n\n\n\n\nouterHashJoin(\n  search(collection1, q=*:*, fl=\"fieldA, fieldB, fieldC\", ...),\n  hashed=search(collection2, q=*:*, fl=\"fieldA, fieldB, fieldE\", ...),\n  on=\"fieldA, fieldB\"\n)\n\n\n\nAs you can see the hashStream is named parameter which makes it very clear which stream should be hashed.",
    "attachments": {
        "SOLR-8188.patch": "https://issues.apache.org/jira/secure/attachment/12768192/SOLR-8188.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-23T01:45:37+0000",
            "author": "Dennis Gove",
            "content": "All tests pass. ",
            "id": "comment-14970281"
        },
        {
            "date": "2015-10-23T02:43:07+0000",
            "author": "Dennis Gove",
            "content": "Added a field separator to the hash calculation. This is to prevent a situation where two tuples have the same hashed value where they shouldn't.\n\nt1.fieldA = \"foo\"\nt1.fieldB = \"bar\"\n\nt2.fieldA = \"foob\"\nt2.fieldB = \"ar\"\n\nWith this change the hash will be different for t1 and t2. ",
            "id": "comment-14970311"
        },
        {
            "date": "2015-11-12T00:08:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713950 from dpgove@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1713950 ]\n\nSOLR-8188: Adds Hash and OuterHash Joins to the Streaming API and Streaming Expressions ",
            "id": "comment-15001376"
        },
        {
            "date": "2015-11-12T00:21:44+0000",
            "author": "Dennis Gove",
            "content": "Forgot to attach a slightly modified patch file (rebased off trunk). ",
            "id": "comment-15001390"
        },
        {
            "date": "2015-11-12T00:22:41+0000",
            "author": "Dennis Gove",
            "content": "This is the patch that was applied to trunk. ",
            "id": "comment-15001392"
        },
        {
            "date": "2015-11-12T00:22:59+0000",
            "author": "Dennis Gove",
            "content": "Still closed ",
            "id": "comment-15001394"
        }
    ]
}