{
    "id": "LUCENE-522",
    "title": "SpanFuzzyQuery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [
            "3.1"
        ],
        "affect_versions": "1.9",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "This is my SpanFuzzyQuery. It is released under the Apache licensence. Just paste it in.\n\n\npackage se.snigel.lucene;\n\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.*;\nimport org.apache.lucene.search.spans.SpanOrQuery;\nimport org.apache.lucene.search.spans.SpanQuery;\nimport org.apache.lucene.search.spans.SpanTermQuery;\nimport org.apache.lucene.search.spans.Spans;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.LinkedList;\n\n/**\n\n\t@author Karl Wettin <kalle@snigel.net>\n */\npublic class SpanFuzzyQuery extends SpanQuery {\n\n\n\n    public final static float defaultMinSimilarity = 0.7f;\n    public final static int defaultPrefixLength = 0;\n\n    private final Term term;\n    private final float minimumSimilarity;\n    private final int prefixLength;\n\n    private BooleanQuery rewrittenFuzzyQuery;\n\n    public SpanFuzzyQuery(Term term) \n{\n        this(term, defaultMinSimilarity, defaultPrefixLength);\n    }\n\n    public SpanFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n        this.term = term;\n        this.minimumSimilarity = minimumSimilarity;\n        this.prefixLength = prefixLength;\n\n        if (minimumSimilarity >= 1.0f) \n{\n            throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n        }\n else if (minimumSimilarity < 0.0f) \n{\n            throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n        }\n        if (prefixLength < 0) \n{\n            throw new IllegalArgumentException(\"prefixLength < 0\");\n        }\n\n    }\n\n    public Query rewrite(IndexReader reader) throws IOException {\n\n        FuzzyQuery fuzzyQuery = new FuzzyQuery(term, minimumSimilarity, prefixLength);\n\n        rewrittenFuzzyQuery = (BooleanQuery) fuzzyQuery.rewrite(reader);\n        BooleanClause[] clauses = rewrittenFuzzyQuery.getClauses();\n        SpanQuery[] spanQueries = new SpanQuery[clauses.length];\n        for (int i = 0; i < clauses.length; i++) \n{\n            BooleanClause clause = clauses[i];\n\n            TermQuery termQuery = (TermQuery) clause.getQuery();\n\n            spanQueries[i] = new SpanTermQuery(termQuery.getTerm());\n            spanQueries[i].setBoost(termQuery.getBoost());\n        }\n\n        SpanOrQuery query = new SpanOrQuery(spanQueries);\n        query.setBoost(fuzzyQuery.getBoost());\n        return query;\n    }\n\n    /** Expert: Returns the matches for this query in an index.  Used internally\n\n\tto search for spans. */\n    public Spans getSpans(IndexReader reader) throws IOException \n{\n        throw new UnsupportedOperationException(\"Query should have been rewritten\");\n\n    }\n\n\n\n    /** Returns the name of the field matched by this query.*/\n    public String getField() \n{\n        return term.field();\n    }\n\n\n    /** Returns a collection of all terms matched by this query.*/\n    public Collection getTerms() {\n        if (rewrittenFuzzyQuery == null) \n{\n            throw new RuntimeException(\"Query must be rewritten prior to calling getTerms()!\");\n        }\n else {\n            LinkedList<Term> terms = new LinkedList<Term>();\n            BooleanClause[] clauses = rewrittenFuzzyQuery.getClauses();\n            for (int i = 0; i < clauses.length; i++) \n{\n                BooleanClause clause = clauses[i];\n                TermQuery termQuery = (TermQuery) clause.getQuery();\n                terms.add(termQuery.getTerm());\n            }\n            return terms;\n        }\n    }\n\n    /** Prints a query to a string, with <code>field</code> as the default field\n\n\tfor terms.  <p>The representation used is one that is supposed to be readable\n\tby \n{@link org.apache.lucene.queryParser.QueryParser QueryParser}\n. However,\n\tthere are the following limitations:\n\t<ul>\n\t<li>If the query was created by the parser, the printed\n\trepresentation may not be exactly what was parsed. For example,\n\tcharacters that need to be escaped will be represented without\n\tthe required backslash.</li>\n\t<li>Some of the more complicated queries (e.g. span queries)\n\tdon't have a representation that can be parsed by QueryParser.</li>\n\t</ul>\n     */\n    public String toString(String field) \n{\n        return \"spans(\" + rewrittenFuzzyQuery.toString() + \")\";\n    }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2006-03-18T06:10:24+0000",
            "content": "I found some bugs. \n\nIf there are no alternatives it generates a bad query. I'll fix that.\n\nIf the index is empty, it generates an even worse query. Might be a FuzzyQuery problem though.\n\nAlso it throws nullpointer if you do a toString() prior to rewriting the query. Perhaps thats the way it is? Didn't check it out. Just reporting before I forget about it. ",
            "author": "Karl Wettin",
            "id": "comment-12370896"
        },
        {
            "date": "2011-01-25T13:20:16+0000",
            "content": "This is fixed in LUCENE-2754, you can use any multitermquery in spans. ",
            "author": "Robert Muir",
            "id": "comment-12986370"
        },
        {
            "date": "2011-03-30T15:49:54+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013296"
        }
    ]
}