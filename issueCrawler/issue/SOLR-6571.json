{
    "id": "SOLR-6571",
    "title": "Need a znode watcher support class",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "When implementing SOLR-6249, Noble Paul points out that ZkIndexSchemaReader doesn't watch the managed schema znode correctly and should use a strategy similar to what ZkStateReader does so that watchers persist across zk client connection failures:\n\nThe correct example is the constructor of ZkStateReader\n   zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() \n{\n            //implement stuff here\n         }\n        });\nthis ensures that the watchers are persisted across reconnect.\n\nWe need a watch support class to help developers implement watchers correctly instead of having some code do it correctly and other code not.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-09-29T17:25:58+0000",
            "author": "Timothy Potter",
            "content": "Looks like ZkIndexSchemaReader is the only place where this isn't done correctly so there's not really any general problem here. Will fix the schema reader as part of SOLR-6249 ",
            "id": "comment-14151924"
        },
        {
            "date": "2014-09-29T19:59:38+0000",
            "author": "Ramkumar Aiyengar",
            "content": "FWIW, I still think this is an interesting idea. SolrZkClient already wraps all watchers, so probably that should store and fire all watchers on expiry. Most things (except when you use it to do things like trigger recovery) shouldn't really worry about expiry, having such code exposes us to rare edge cases which happen only when some zk misconfiguration or issue happens. ",
            "id": "comment-14152173"
        },
        {
            "date": "2014-09-29T20:32:19+0000",
            "author": "Mark Miller",
            "content": "To note, nothing I said in the issue related to this is meant to mean there are not improvements or helper classes or documentation improvements to be made. It's also not meant to mean this stuff is easy - it's not. You usually learn it properly by burning your fingers off one by one. We have some code that try's to make things better. Things like handling an expired ZooKeeper instance for you (you can't keep using the same one). Handling the common ConnectionLoss retry for you. Etc. There is still a lot we can probably do. Still, to properly code for ZooKeeper you have to understand ConnectionLoss and SessionExpiration pretty well - you can't really count on the code you are writing otherwise - or test it properly. Perhaps there are more javadocs that can be beefed up. The tiny corners around this stuff was not easy to glean from the ZK doc back when I tackled it either. ",
            "id": "comment-14152223"
        },
        {
            "date": "2014-09-29T20:35:21+0000",
            "author": "Mark Miller",
            "content": "One of my favorite subtleties was that some Watcher events don't require that you re-create the Watcher. That's a bid insidious given the API  ",
            "id": "comment-14152232"
        }
    ]
}