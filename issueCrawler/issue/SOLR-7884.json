{
    "id": "SOLR-7884",
    "title": "Omit reverse lookups in SystemInfoHandler",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.2.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The method SystemInfoHandler.init contains this code:\n\n\n  try {\n      InetAddress addr = InetAddress.getLocalHost();\n      hostname = addr.getCanonicalHostName();\n    } catch (UnknownHostException e) {\n      //default to null\n    }\n  }\n\n\n\nThe call to getCanonicalHostName triggers a DNS reverse lookup, that on Mac OSX times out after 30 seconds if the current network setup has a problem with reverse lookup and then returns the IP address as host name. In our product this leads to a hang of 2x30 seconds (one for the SystemInfoHandler of the container and another one for that of the core) during startup under these conditions. Unfortunately I have found no way to make this reproducible by simulating it as it depends on local network config, os and whatever else.\n\nAs Solr is shipped bundled with a desktop application, there is currently no workaround because the user network configuration is beyond our reach.\n\nThe suggested fix for this is to replace the call to getCanonicalHostName by one to getHostName(), which is done for exactly this purpose (obtaining a host string for logging) in the popular Logback framework (see http://logback.qos.ch/xref/ch/qos/logback/core/util/ContextUtil.html, how they do it).\n\nOtherwise Solr has been working perfectly in this setup (bundled with a desktop app) for a long time and it would be great to remove that last obstacle to make it a nicer citizen bundlingwise.",
    "attachments": {
        "SOLR-7884.patch": "https://issues.apache.org/jira/secure/attachment/12749105/SOLR-7884.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-06T18:02:27+0000",
            "author": "Robert Kr\u00fcger",
            "content": "Attached a patch with the proposed fix ",
            "id": "comment-14660513"
        },
        {
            "date": "2015-08-10T20:59:17+0000",
            "author": "Hoss Man",
            "content": "The suggested fix for this is to replace the call to getCanonicalHostName by one to getHostName() ...\n\nHmmm.... I'm not convinced this is a good idea ... Just because that's what other libraries use doesn\u2019t mean it's a good fit in this context.  The intent of this information is to inform clients what the canonical hostname is for communicating with Solr.  If the local hostname/DNS is missconfigured we don't want to lie to the user.\n\nIn my opinion, the approach discussed in SOLR-5043 would be a better method for dealing with this.\n\n(allthough in addition to that, updating SystemInfoHandler.init to pay attention to when the node is operating in cloud mode and use the same \"host\" configuration option from CloudConfig that the rest of Solr uses, and only do getCanonicalHostName as a fallback option.  \u2013 At least that way the only misconfiguration that can lead us to lying to the user is an explicit misconfiguration of Solr, something the user running Solr is guaranteed to have control of)\n\n\n\nAs Solr is shipped bundled with a desktop application, there is currently no workaround because the user network configuration is beyond our reach.\n\nI'm not sure i follow this reasoning \u2013 even if you can't ensure the DNS/network of the machine Solr is being deployed to is reliable, can't you specify SecurityManager settings to prevent the process from doing DNS lookups? (in which case Solr should happily continue to function, with or w/o correctly function DNS, w/o any delays)\n ",
            "id": "comment-14680752"
        },
        {
            "date": "2015-08-17T08:17:53+0000",
            "author": "Robert Kr\u00fcger",
            "content": "\nI'm not sure i follow this reasoning \u2013 even if you can't ensure the DNS/network of the machine Solr is being deployed to is reliable, can't you specify SecurityManager settings to prevent the process from doing DNS lookups? (in which case Solr should happily continue to function, with or w/o correctly function DNS, w/o any delays)\n\nIt's more complicated than this. The problem we encounter is not DNS generally not working but reverse lookup for local VPN addresses in some cases not working. Our application does need DNS lookups in some places, so disabling that does not solve the problem. ",
            "id": "comment-14699162"
        },
        {
            "date": "2015-08-17T10:31:14+0000",
            "author": "Robert Kr\u00fcger",
            "content": "Would, as an alternative solution something like a system property that disables the canonical name retrieval, be OK? ",
            "id": "comment-14699348"
        },
        {
            "date": "2015-08-17T22:45:56+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Robert, I think Hoss' suggestion of using SOLR-5043 works best, as it decouples the functionality which needs the hostname (SystemInfoHandler) from core load. If you need system info to be shown without hanging on hostname, that's something you can discuss as an enhancement to that handler, or you could even write your own handler which avoids these lookups. But in any case, it shouldn't hold up core load.. ",
            "id": "comment-14700370"
        },
        {
            "date": "2015-08-18T06:37:43+0000",
            "author": "Robert Kr\u00fcger",
            "content": "Sorry, my bad. I didn't read SOLR-5043. The first proposed fix with the background thread would work perfectly in my case as I don't care about the system info at all. I am not sure if the second one would work as I do not know under which circumstances the SystemInfoHandler is actually used. Just delaying the hang until after application startup would actually make matters worse for my scenario. Waiting for an app to start up slowly is one thing. Having the app hang unexpectedly after it has started would make it look seriously broken. ",
            "id": "comment-14700800"
        },
        {
            "date": "2015-08-18T16:17:19+0000",
            "author": "Erick Erickson",
            "content": "So can we close this as a duplicate? ",
            "id": "comment-14701510"
        },
        {
            "date": "2015-08-18T16:47:20+0000",
            "author": "Robert Kr\u00fcger",
            "content": "Unless it is fixed as described in the second patch in SOLR-5043, probably yes. It is not quite the same thing because the definition of that issue only describes blocking of core (re)loads as the problem whereas here it is more general and also affects container instantiation but as far as I am concerned, close it as a duplicate and I will complain if the fix for SOLR-5043 does not address this problem as well . ",
            "id": "comment-14701563"
        }
    ]
}