{
    "id": "SOLR-11292",
    "title": "Querying against an alias can lead to incorrect routing",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "collection1 has 2 shards and 1 replica\ncollection2 has 8 shards and 1 replica\n\nI have 8 nodes so collection2 is spread across all 8 , while collection1 is hosted by two nodes\n\nIf we create an alias called \"collection1\" and point it to \"collection2\".\n\nQuerying against the alias \"collection1\" works as expected but what I noticed was the top level queries would only hit 2 out of the 8 JVMs when querying using SolrJ\n\nIt turns out that SolrJ is using the state.json of collection1 ( the actual collection ) and routing queries to only those nodes.\n\nThere are two negatives to this:\n\n\tIf those two nodes are down all queries fail.\n\tTop level queries are only routed to those two nodes thus causing a skew in the top level requests\n\n\n\nThe obvious solution would be to use the state.json file of the underlying collection that the alias is pointing to  . But if we have the alias pointing to multiple collections then this might get tricky?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-13T21:16:30+0000",
            "content": "I think it's bizarre that you can create an alias with a name that is also that of a collection.  It seems ripe for problems.\n\nI'm not sure how this particular issue is happening.  SOLR-11444 maybe fixes it?.  CloudSolrClient.sendRequest should resolve the collection list and aliases to a list of target collections.  Then it should loop over the slices across all of them to build a list of URLs to the nodes it will communicate with.  SOLR-11444 improves the clarity of this logic substantially IMO; I'm not sure if there is a change in behavior with respect to the issue here.  Varun Thacker might you apply SOLR-11444 and see if there is an impact? ",
            "author": "David Smiley",
            "id": "comment-16204203"
        },
        {
            "date": "2017-10-14T20:37:20+0000",
            "content": "Hi David,\n\nLet me apply SOLR-11444 and see the if it fixes the routing ",
            "author": "Varun Thacker",
            "id": "comment-16204813"
        },
        {
            "date": "2017-10-17T21:19:01+0000",
            "content": "Hi David,\n\nI applied SOLR-1144 and I still don't think it's working\n\nHere is how I tested:\n\nBuilt solr from master after applying the patch.\nStarted solr with bin/solr start -e cloud -noprompt\nCreated c1 on node 8983\nCreated c2 on node 7574\nCreated an alias called c1 - admin/collections?action=createalias&name=c1&collections=c2\n\nFrom my IDE which had the patch applied I tried these two snippets and the results were the same\n\n\n    CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(\"localhost:9983\").build();\n\n    for (int i=0; i<10; i++) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      cloudSolrClient.query(\"c1\", params);\n    }\n    cloudSolrClient.close();\n\n\n\n\n    CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(\"localhost:9983\").build();\n    cloudSolrClient.setDefaultCollection(\"c1\");\n\n    for (int i=0; i<10; i++) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      cloudSolrClient.query(params);\n    }\n    cloudSolrClient.close();\n\n\n\nI only see log entries on node1 8983 which was hosting c1 but the top level query should have gone only to node2 in my setup\n\n\nINFO  - 2017-10-17 21:10:28.964; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=28\nINFO  - 2017-10-17 21:10:28.994; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:28.996; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:28.999; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:29.001; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:29.005; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:29.008; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:29.011; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:29.013; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\nINFO  - 2017-10-17 21:10:29.015; [c:c2 s:shard1 r:core_node2 x:c2_shard1_replica_n1] org.apache.solr.core.SolrCore; [c2_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_stateVer_=c1:4&wt=javabin&version=2} hits=0 status=0 QTime=0\n\n\n\nLooking at stateVer=c1 in the request params , it looks like we are still passing the state of c1 only from the client ? ",
            "author": "Varun Thacker",
            "id": "comment-16208347"
        },
        {
            "date": "2017-10-17T21:30:14+0000",
            "content": "I think the logic only fails when we have a collection name and alias with the same name\n\n\n  private LinkedHashSet<String> resolveAliasesAndValidateExistence(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    // validate collections\n    for (String collectionName : inputCollections) {\n      if (stateProvider.getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = stateProvider.getAlias(collectionName);\n        if (aliasedCollections.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n        collectionNames.addAll(aliasedCollections);\n      } else {\n        collectionNames.add(collectionName);\n      }\n    }\n    return collectionNames;\n  }\n\n\n\nWe are first checking if the collection exists. If the collection doesn't exist only then do we resolve it as an alias.\n\nMaybe we should always resolve it as an alias first? ",
            "author": "Varun Thacker",
            "id": "comment-16208425"
        },
        {
            "date": "2017-10-18T03:23:43+0000",
            "content": "I noticed that logic too Varun Thacker while working on SOLR-11444.  Ishan Chattopadhyaya I recall you added the stateProvider stuff.  Would there be a performance problem if CloudSolrClient resolved aliases first, thereby doing an HTTP fetch for aliases that would otherwise have never occurred if you're not even using the aliases?  Probably not a big deal but the thought crossed my mind. ",
            "author": "David Smiley",
            "id": "comment-16208761"
        }
    ]
}