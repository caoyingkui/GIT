{
    "id": "LUCENE-1083",
    "title": "JDiff report of changes between different versions of Lucene",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/javadocs"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I think that a helpful addition to the release process for Lucene would be JDiff reports of the API changes between different versions. I am attaching reports of the differences between 1.9.1 and 2.2.0 and also between 2.1.0 and 2.2.0. The reports could be changed to only show the public methods. The start page is changes.html.\n\nThis is the Ant target I added to the top-level build.xml file in the JDiff directory to produce a report:\n\n\n<target name=\"lucene\" depends=\"dist\">\n  <taskdef name=\"jdiff\" \n           classname=\"jdiff.JDiffAntTask\" \n           classpath=\"${dist.dir}/antjdiff.jar\" />\n  <jdiff destdir=\"${reports.dir}/lucene\" \n         verbose=\"on\"\n         stats=\"on\"\n         docchanges=\"on\">\n    <old name=\"1.9.1\">\n      <dirset dir=\"${examples.dir}/lucene-1.9.1/src/java\" includes=\"org/**\" />\n    </old>\n    <new name=\"2.2.0\">\n      <dirset dir=\"${examples.dir}/lucene-2.2.0/src/java\" includes=\"org/**\" />\n    </new>\n  </jdiff>\n</target>\n\n\n\nDisclaimer: I'm the author of JDiff",
    "attachments": {
        "jdiff_lucene_210_220.zip": "https://issues.apache.org/jira/secure/attachment/12371176/jdiff_lucene_210_220.zip",
        "1083_1.patch": "https://issues.apache.org/jira/secure/attachment/12371626/1083_1.patch",
        "jdiff_lucene_191_220.zip": "https://issues.apache.org/jira/secure/attachment/12371175/jdiff_lucene_191_220.zip",
        "core-jdiff.zip": "https://issues.apache.org/jira/secure/attachment/12371574/core-jdiff.zip",
        "1083_2.patch": "https://issues.apache.org/jira/secure/attachment/12371632/1083_2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-12-07T15:12:52+0000",
            "content": "Thanks, Matt.  I assume the antjdiff.jar needs to be included somewhere?  In order for this to work, you probably need to make it so it checks to see if that library exists  before running it (check out the way the Clover test coverage works) and we can't include the actual JDiff libraries in Lucene b/c of licensing issues (I'm pretty sure, anyway), so ideally, your task would also download the library when executed and install it properly for users. ",
            "author": "Grant Ingersoll",
            "id": "comment-12549429"
        },
        {
            "date": "2007-12-07T17:05:22+0000",
            "content": "Grant,\n\nI was imagining more that the release process for Lucene could be changed so that whoever is creating a release also runs JDiff to produce the HTML reports, which they then post on the website with the usual Javadocs, and possibly include the report in the released package, say in a directory named docs/changes next to where docs/api currently is.\n\nThe Maven javadoc task looks like it should be able to create the reports. I guess I should see if I can come up with a working example of that.\n ",
            "author": "Matt Doar",
            "id": "comment-12549475"
        },
        {
            "date": "2007-12-07T18:15:54+0000",
            "content": "The \"prior release\" is a new concept that needs to be added to the build to support this.  Perhaps a property in common-build.xml that names the subversion tags of the prior major and minor releases, and the jdiff target could use these.  The jdiff target should do nothing if jdiff.home is not defined.  Some links to the jdiff output should be added somewhere in the docs.  Folks who build releases would then be required to install jdiff and to define jdiff.home when they make releases, or else the releases will contain broken links.  This should be documented on the wiki's HowToRelease page. ",
            "author": "Doug Cutting",
            "id": "comment-12549500"
        },
        {
            "date": "2007-12-07T19:19:54+0000",
            "content": "As an aside, Maven repositories in general could usefully be enhanced to\nrecord this kind of information for a project, so that you could query them\nfor \"current release\", \"prior patch release\", \"prior minor release\", \"prior\nmajor release\". For Lucene at 2.2.0, that would give 2.2.0,\n2.1.x(non-existent, so detaults to\n2.1.0?), 2.1.0 and 1.9.1. And then allow users to override what each value\nis for a specific release of a project.\n\n ",
            "author": "Matt Doar",
            "id": "comment-12549526"
        },
        {
            "date": "2007-12-13T01:50:28+0000",
            "content": "Below is an Ant target for the core classes that works in r603799 and supports restricting the report to just protected and public methods (the jdiff ant task doesn't support that). I'll also attach the report of the differences between 2.2.0 and 2.3.0-dev that was generated with this task. The ant target still needs some work to specify where jdiff is located, and to convert the periods in the prev.version string to underscores for the URL to the previous version javadocs.\n\n\n  <target name=\"jdiff-core\" description=\"Generate jdiff for core classes\">\n  \t<sequential>\n      <property name=\"JDIFF_HOME\" value=\"D:/mdoar/jdiff/build/jdiff-1.1.0\" />\n      <property name=\"jdiff.home\" value=\"${JDIFF_HOME}\" />\n      <property name=\"jdiff.reportdir\" value=\"${javadoc.dir}/core-jdiff\" />\n      <property name=\"jdiff.tmpdir\" value=\"${javadoc.dir}/jdiff.tmp\" />\n      <property name=\"prev.version\" value=\"2.2.0\" />\n      <property name=\"prev.src.dir\" value=\"D:/mdoar/jdiff/examples/lucene-${prev.version}\" />\n\n      <mkdir dir=\"${jdiff.reportdir}\"/>\n      <mkdir dir=\"${jdiff.tmpdir}\"/>\n\n      <echo message=\"Generate the XML representing the previous API\" />\n      <javadoc access=\"${javadoc.access}\"\n               encoding=\"${build.encoding}\">\n          <doclet name=\"jdiff.JDiff\"\n                  path=\"${jdiff.home}/jdiff.jar:${jdiff.home}/xerces.jar\">\n            <param name=\"-apidir\" value=\"${jdiff.tmpdir}\" />\n            <param name=\"-excludeclass\" value=\"${javadoc.access}\" />\n            <param name=\"-excludemember\" value=\"${javadoc.access}\" />\n            <param name=\"-apiname\" value=\"${Name} ${prev.version} API\" />\n          </doclet>\n        <packageset dir=\"${prev.src.dir}/src/java\"/>\n        <classpath refid=\"javadoc.classpath\"/>\n      </javadoc>\n\n      <echo message=\"Generate the XML representing the current API\" />\n      <javadoc access=\"${javadoc.access}\"\n               encoding=\"${build.encoding}\">\n          <doclet name=\"jdiff.JDiff\"\n                  path=\"${jdiff.home}/jdiff.jar:${jdiff.home}/xerces.jar\">\n            <param name=\"-apidir\" value=\"${jdiff.tmpdir}\" />\n            <param name=\"-excludeclass\" value=\"${javadoc.access}\" />\n            <param name=\"-excludemember\" value=\"${javadoc.access}\" />\n            <param name=\"-apiname\" value=\"${Name} ${version} API\" />\n          </doclet>\n        <packageset dir=\"src/java\"/>\n        <classpath refid=\"javadoc.classpath\"/>\n      </javadoc>\n\n      <echo message=\"Generate the JDiff report comparing the APIs\" />\n      <javadoc\n          private=\"yes\"\n          sourcepath=\"src/java\"\n          destdir=\"${jdiff.reportdir}\"\n          sourcefiles=\"${jdiff.home}/Null.java\">\n          <doclet name=\"jdiff.JDiff\"\n                  path=\"${jdiff.home}/jdiff.jar:${jdiff.home}/xerces.jar\">\n            <param name=\"-oldapi\" value=\"${Name} ${prev.version} API\" />\n            <param name=\"-newapi\" value=\"${Name} ${version} API\" />\n            <param name=\"-oldapidir\" value=\"${jdiff.tmpdir}\" />\n            <param name=\"-newapidir\" value=\"${jdiff.tmpdir}\" />\n            <param name=\"-javadocnew\" value=\"../../core/\" />\n            <!-- TODO change . to _ in prev.version-->\n            <param name=\"-javadocold\" value=\"http://lucene.apache.org/java/${prev.version}/api/\" /> \n            <param name=\"-docchanges\"/>\n            <param name=\"-stats\"/>\n          </doclet>\n        <classpath refid=\"javadoc.classpath\"/>\n      </javadoc>\n\n    <!-- Copy image files. black.gif is only needed if -stats was used -->\n    <copy file=\"${jdiff.home}/background.gif\" todir=\"${jdiff.reportdir}\" />\n    <copy file=\"${jdiff.home}/black.gif\" todir=\"${jdiff.reportdir}\" />\n    </sequential>\n  </target>\n\n ",
            "author": "Matt Doar",
            "id": "comment-12551191"
        },
        {
            "date": "2007-12-13T01:53:08+0000",
            "content": "The differences between the API  of the core classes of 2.2.0 and 2.3.0-dev as of revision 603799 ",
            "author": "Matt Doar",
            "id": "comment-12551192"
        },
        {
            "date": "2007-12-13T18:09:47+0000",
            "content": "The changes to build.xml should be provided as a patch file.  For details, see:\n\nhttp://wiki.apache.org/lucene-java/HowToContribute\n\nJDIFF_HOME and jdiff.home should be undefined by default, and the target should do nothing when these are not defined, except perhaps print a warning.\n\nThe previous version should be defined as a subversion URL that is checked out somewhere in build/ if it doesn't already exist there, and updated otherwise.  Typically the url would be to a tag.  We might do something like:\n\njdiff.prev.version=\"2.2.0\"\njdiff.prev.url.base=\"http://svn.apache.org/repos/asf/lucene/java/tags/release-\"\njdiff.prev.url=\"${prev.url.base}${jdiff.prev.version}\"\njdiff.prev.dir=\"${build.dir}/jdiff/prev-${jdiff.prev.version}\"\n\nDoes that sound reasonable? ",
            "author": "Doug Cutting",
            "id": "comment-12551566"
        },
        {
            "date": "2007-12-13T21:45:18+0000",
            "content": "The patch as requested by Doug. ",
            "author": "Matt Doar",
            "id": "comment-12551617"
        },
        {
            "date": "2007-12-13T21:48:12+0000",
            "content": "The attached 1083_1.patch file against r604038 does most of what you suggested. The svn task is not in ant core yet, so I couldn't use it to check out the source of the previous version. I had to define the version number as 3 separate numbers because Ant doesn't make string subst easy on properties. All the links in the JDiff reports should work, including the links to the previous and current Javadocs. ",
            "author": "Matt Doar",
            "id": "comment-12551619"
        },
        {
            "date": "2007-12-13T22:14:28+0000",
            "content": "Thanks for updating this!\n\nThe svn task is not in ant core yet.\n\nThen we should use the 'exec' task until it's in broad distribution.\n\n+  <property name=\"jdiff.home\" location=\"D:/mdoar/jdiff/build/jdiff-1.1.0\"/>\n\nThat line should not exist.  Folks will need to define jdiff.home outside of this build file.  That includes you.  Typically it will be done on the command line, with -Djdiff.home=...\n\nI had to define the version number as 3 separate numbers because Ant doesn't make string subst easy on properties.\n\nErik, oh, great Ant wizard, any thoughts?\n ",
            "author": "Doug Cutting",
            "id": "comment-12551625"
        },
        {
            "date": "2007-12-13T22:45:10+0000",
            "content": "Ok, exec it will be, and I'll remove the jdiff.home line. The funny thing is that the \"3 separate numbers\" idea is Erik's suggestion, circa 2004 (http://www.ant-tasks.com/msg/18617.html) ",
            "author": "Matt Doar",
            "id": "comment-12551632"
        },
        {
            "date": "2007-12-13T23:11:12+0000",
            "content": "This patch adds Doug's suggestion to use exec for svn. There is no need to update a source tree based on a tag, but I have added the target in case someone ever wanted to. If the checkout time is too long for developers, we could also make the XML file that represents a release available, and then use that, instead of regenerating it each time. ",
            "author": "Matt Doar",
            "id": "comment-12551642"
        },
        {
            "date": "2013-02-28T13:03:56+0000",
            "content": "This issue has been inactive for more than 4 years. Please close if it's no longer relevant/needed, or bring it up to date if you intend to work on it. SPRING_CLEANING_2013 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13589513"
        },
        {
            "date": "2013-02-28T15:46:11+0000",
            "content": "I think this is pretty relevant. \n\nIts a compelling alternative to backwards compatibility tests that run with a previous version of lucene (which are costly to maintain) ",
            "author": "Robert Muir",
            "id": "comment-13589614"
        }
    ]
}