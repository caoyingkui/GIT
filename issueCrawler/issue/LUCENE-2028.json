{
    "id": "LUCENE-2028",
    "title": "FilteredTermEnum.Java - The first term in the enumeration is skipped.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4.1",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "The Filtered Term Enumeration seems to skip the first term present in the enumerator. \nThe problem lies in the next() function, which moves does not do anything with the first value of currentTerm set by the setEnum() method.\n\nThe setEnum() function sets a value to the currentTerm and returns. An implementation of WildCardTermEnum, for example calls the next() method where the currentTerm is set to null and the enumerator moves to the next value. The first term is not read.\n\nIn my local workspace, I have modified the next()  method as follows:\n\n/** Increments the enumeration to the next element.  True if one exists. */\n    public boolean next() throws IOException {\n        if (actualEnum == null) return false; // the actual enumerator is not initialized!\n        if(currentTerm!=null &&!startedReading) //check if first term read\n        {\n        \tstartedReading=true;\n        \treturn true;\n        }\n        currentTerm = null;\n        while (currentTerm == null) {\n            if (endEnum()) return false;\n            if (actualEnum.next()) {\n                Term term = actualEnum.term();\n                if (termCompare(term)) \n{\n                    currentTerm = term;\n                    return true;\n                }\n            }\n            else return false;\n        }\n        currentTerm = null;\n        return false;\n    }\n\nI have added a boolean variable called startedReading that is a member of the FilteredTermEnum class and is set to false. Once the currentTerm set by setEnum is read, I set this value to true and the code continues as before.\n\nI have run a few of my own test cases and it returns the results  I was looking for which were missing earlier as they happened to be the first term in the enumerator.",
    "attachments": {
        "FilteredTermEnum.java": "https://issues.apache.org/jira/secure/attachment/12424031/FilteredTermEnum.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-11-04T15:18:08+0000",
            "content": "My version of the file. ",
            "author": "Danish Contractor",
            "id": "comment-12773517"
        },
        {
            "date": "2009-11-04T16:25:11+0000",
            "content": "There is nothing wrong with FilteredTermEnum. All TermEnums in Lucene behave like this. After creating them, they point to the first term in the enum and you have to call next() after consuming this term. ",
            "author": "Uwe Schindler",
            "id": "comment-12773550"
        }
    ]
}