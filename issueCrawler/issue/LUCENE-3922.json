{
    "id": "LUCENE-3922",
    "title": "Add Japanese Kanji number normalization to Kuromoji",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Japanese people use Kanji numerals instead of Arabic numerals for writing price, address and so on. i.e 12\u4e074800\u5186(124,800JPY), \u4e8c\u756a\u753a\u4e09\u30ce\u4e8c(3-2 Nibancho) and \u5341\u4e8c\u6708(December).  So, we would like to normalize those Kanji numerals to Arabic numerals (I don't think we need to have a capability to normalize to Kanji numerals).",
    "attachments": {
        "LUCENE-3922.patch": "https://issues.apache.org/jira/secure/attachment/12538490/LUCENE-3922.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-26T11:47:13+0000",
            "content": "Thanks a lot, Kazu.\n\nThis is a good idea to add.  Patches are of course also very welcome!  ",
            "author": "Christian Moen",
            "id": "comment-13238303"
        },
        {
            "date": "2012-03-26T12:17:53+0000",
            "content": "We, RONDHUIT, have done this kind of normalization (and more!). You may be interested in:\n\nhttp://www.rondhuit-demo.com/RCSS/api/overview-summary.html#featured-japanese\n\n\n\n\nSummary\nnormalization sample\n\n\n\u6f22\u6570\u5b57=>\u7b97\u7528\u6570\u5b57\u6b63\u898f\u5316\n\u56db\u4e03=>47, \u56db\u5341\u4e03=>47, \u56db\u62fe\u4e03=>47, \u56db\u3007\u4e03=>407\n\n\n\u548c\u66a6=>\u897f\u66a6\u6b63\u898f\u5316\n\u662d\u548c\u56db\u4e03\u5e74\u3001\u662d\u548c\u56db\u5341\u4e03\u5e74\u3001\u662d\u548c\u56db\u62fe\u4e03\u5e74=>1972\u5e74, \u662d\u548c\u516d\u5341\u56db\u5e74\u3001\u5e73\u6210\u5143\u5e74=>1989\u5e74\n\n\n\n ",
            "author": "Koji Sekiguchi",
            "id": "comment-13238329"
        },
        {
            "date": "2012-03-26T12:33:19+0000",
            "content": "Koji, this is very nice.\n\nDoes the kanji number normalizer (KanjiNumberCharFilter) also deal with combinations of kanji and arabic numbers like Kazu's price example?\n\nIs the above code you refer to something that can go into Lucene or is it non-free software? ",
            "author": "Christian Moen",
            "id": "comment-13238334"
        },
        {
            "date": "2012-03-27T02:30:39+0000",
            "content": "Koji, Thank you for your comment. I am very interested in the normalizer you have mentioned. Is it possible to choose to concatenate suffix/prefix(\u5e74/\u6708/\u5186, etc.) to the Arabic numbers? ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13239122"
        },
        {
            "date": "2012-07-31T03:37:04+0000",
            "content": "I've attached a work-in-progress patch for trunk that implements a CharFilter that normalizes Japanese numbers.\n\nThese are some TODOs and implementation considerations I have that I'd be thankful to get feedback on:\n\n\n\tBuffering the entire input on the first read should be avoided.  The primary reason this is done is because I was thinking to add some regexps before and after kanji numeric strings to qualify their normalization, i.e. to only normalize strings that starts with \uffe5, JPY or ends with \u5186, to only normalize monetary amounts in Japanese yen.  However, this probably isn't necessary as we can probably can use Matcher.requireEnd() and Matcher.hitEnd() to decide if we need to read more input. (Thanks, Robert!)\n\n\n\n\n\tIs qualifying the numbers to be normalized with prefix and suffix regexps useful, i.e. to only normalize monetary amounts?\n\n\n\n\n\tHow do we deal with leading zeros?  Currently, \"007\" and \"\u25ef\u25ef\u4e03\" becomes \"7\" today.  Do we want an option to preserve leading zeros?\n\n\n\n\n\tHow large numbers do we care about supporting?  Some of the larger numbers are surrogates, which complicates implementation, but they're certainly possible.  If we don't care about really large numbers, we can probably be fine working with long instead of BigInteger.\n\n\n\n\n\tPolite numbers and some other variants aren't supported, i.e. \u58f1, \u5f10, \u53c2, etc., but they can easily be added.  We can also add the obsolete variants if that's useful somehow.  Are these useful?  Do we want them available via an option?\n\n\n\n\n\tNumber formats such as \"\uff11\u5104\uff12\uff0c\uff13\uff14\uff15\u4e07\uff16\uff0c\uff17\uff18\uff19\" isn't supported - we don't deal with the comma today, but this can be added.  The same applies to \"\uff11\uff12\u3000\uff13\uff14\uff15\" where there's a space that separates thousands like in French.  Numbers like \"2\u30fb2\u5146\" aren't supported, but can be added.\n\n\n\n\n\tOnly integers are supported today, so we can't parse \"\u3007\u30fb\u4e00\u4e8c\u4e09\u56db\", which becomes \"0\" and \"1234\" as separate tokens instead of \"0.1234\"\n\n\n\nThere are probably other considerations, too, that I doesn't immediately come to mind.\n\nNumbers are fairly complicated and feedback on direction for further implementation is most appreciated.  Thanks. ",
            "author": "Christian Moen",
            "id": "comment-13425488"
        },
        {
            "date": "2012-08-01T05:57:25+0000",
            "content": "Hi Christian,\n\nGreat! I will test your patch and get back to you!!\n\nThanks,\nKazu ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13426340"
        },
        {
            "date": "2012-10-05T00:58:45+0000",
            "content": "Kazuaki, do have any comment on this fix? ",
            "author": "Lance Norskog",
            "id": "comment-13469936"
        },
        {
            "date": "2012-10-06T16:57:28+0000",
            "content": "Sorry for this late reply.\n\nAlthough I have some request to improve capability, this is very helpful and nice charfilter for me.\nThank you! Christian!!\n\nMy requests are the following:\n\nIs it difficult to support numbers with period as the following?\n\uff13\uff0e\uff12\u5146\u5186\n\uff15\uff0e\uff12\u5104\u5186\n\nOn the other hand, I agree with Christian to not preserving leading zeros. So, \"\u25ef\u25ef\u4e03\" doesn't need to become \"007\".\n\nI think It would be helpful that this charfilter supports old Kanji numeric characters (\"KYU-KANJI\" or \"DAIJI\") such as \u58f1, \u58f9 (One), \u5f0c, \u5f10, \u8cb3 (Two), \u5f0d, \u53c2,\u53c3 (Three), or configureable. ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13471068"
        },
        {
            "date": "2012-10-07T00:09:34+0000",
            "content": "On the other hand, I agree with Christian to not preserving leading zeros. So, \"\u25ef\u25ef\u4e03\" doesn't need to become \"007\".\nThis example shows why leading zeros should be preserved \n\nThere are different kinds of text search. Searching for media titles like James Bond movies is a very different thing from searching newspaper articles. You might want to find \"\u25ef\u25ef\u4e03\" as the Japanese-language release and \"007\" as the English-language release. These numbers are brands, not numbers.  ",
            "author": "Lance Norskog",
            "id": "comment-13471117"
        },
        {
            "date": "2012-10-07T00:25:49+0000",
            "content": "Lance, you may be right.  Although I have never seen that Japanese people use Kanji numbers for James Bond movies , I can't say that we never use Kanji for that kind of expression.\n\nChristian, Is it possible to choose preserve leading zeros or not? ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13471123"
        },
        {
            "date": "2012-10-07T01:59:04+0000",
            "content": "\nIs it difficult to support numbers with period as the following?\n\uff13\uff0e\uff12\u5146\u5186\n\uff15\uff0e\uff12\u5104\u5186\n\nSupporting this is no problem and a good idea.\n\n\nI think It would be helpful that this charfilter supports old Kanji numeric characters (\"KYU-KANJI\" or \"DAIJI\") such as \u58f1, \u58f9 (One), \u5f0c, \u5f10, \u8cb3 (Two), \u5f0d, \u53c2,\u53c3 (Three), or configureable.\n\nThis is also easy to support.\n\nAs for making preserving zeros configurable, that's also possible, of course.\n\nIt's great to get more feedback on what sort of functionality we need and what should be configurable options. Hopefully, we can find a good balance without adding too much complexity.\n\nThanks for the feedback. ",
            "author": "Christian Moen",
            "id": "comment-13471132"
        },
        {
            "date": "2012-10-11T14:57:59+0000",
            "content": "The following examples are false positive case:\n\"\u59ff\u4e09\u56db\u90ce\" became \"\u59ff\", \"34\", \"\u90ce\"\n\"\u5c0f\u6797\u4e00\u8336\" became \"\u5c0f\u6797\", \"1\", \"\u8336\"\n\"\u9234\u6728\u4e00\u90ce\" became \"\u9234\u6728\", \"1\", \"\u90ce\"\n\nCan we prevent this behavior? ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13474210"
        },
        {
            "date": "2012-10-11T15:09:53+0000",
            "content": "Thanks, Kazu.\n\nI'm aware of the issue and the thinking is to rework this as a TokenFilter and use anchoring options with surrounding tokens to decide if normalisation should take place, i.e. if the preceding token is \uffe5 or the following token is \u5186 in the case of normalising prices.\n\nIt might also be helpful to look into using POS-info for this to benefit from what we actually know about the token, i.e. to not apply normalisation if the POS tag is a person name.\n\nOther suggestions and ideas are of course most welcome. ",
            "author": "Christian Moen",
            "id": "comment-13474224"
        },
        {
            "date": "2012-10-11T15:56:40+0000",
            "content": "Hi Christian,\n\nThat's what I am thinking. I think TokenFilter would be a good choice to implement that feature. We can use POS tag to recognize what a token is. We can apply normalization if a token is a numeral prefix/suffix with numerals.  ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13474257"
        },
        {
            "date": "2012-10-11T16:06:55+0000",
            "content": "Hi Christian, Kazuaki\n\n+1, TokenFilter implementation.\nAnd I think that it is helpful, this TokenFilter expand token arabic number and kanji number, like a synonym filter feature. ",
            "author": "Jun Ohtani",
            "id": "comment-13474268"
        },
        {
            "date": "2012-10-11T16:25:40+0000",
            "content": "Ohtani-san,\n\nI saw your tweet about this earlier and it sounds like a very good idea.  Thanks.\n\nI will try to set aside some time to work on this. ",
            "author": "Christian Moen",
            "id": "comment-13474287"
        },
        {
            "date": "2012-10-12T14:29:52+0000",
            "content": "It would be nice if we can choose expand them or normalize them.\n\nI have a concern that Solr's query-side synonym expansion doesn't work well if number of tokens are different between original tokens and synonym tokens, especially if we want to do phrase matching with query-side synonym expansion will be a disaster (Of course, reduction or index-side would be better. But, we sometimes need to use TokenFilter that provides such capability in query-side.) So, I would like to choose the configuration that Kanji numerals normalize to Arabic numerals or Arabic numerals store along with Kanji numerals.  ",
            "author": "Kazuaki Hiraga",
            "id": "comment-13475016"
        },
        {
            "date": "2014-08-05T07:09:51+0000",
            "content": "Gaute and myself have been doing some work on this and we have rewritten this as a TokenFilter.\n\nA few comments:\n\n\n\tWe have added support for numbers such as \uff13\uff0e\uff12\u5146\u5186 as you requested, Kazu.\n\tWe could potentially use a POS-tag attribute from Kuromoji to identify number that we are composing, but perhaps not relying on POS-tags makes this filter also useful in the case of n-gramming.\n\tWe haven't implemented any of the anchoring logic discussed above, i.e. if we to restrict normalization to prices, etc. Is this useful to have?\n\tInput such as 1,5 becomes 15 after normalization, which could be undesired. Is this bad input or do we want anchoring to retain these numbers?\n\n\n\nOne thing though, in order to support some of this number parsing, i.e. cases such as \uff13\uff0e\uff12\u5146\u5186, we need to use Kuromoji in a mode that retains punctuation characters.\n\nThere's also an unresolved issue found by checkRandomData that we haven't tracked down and fixed, yet.\n\nThis is a work in progress and feedback is welcome. ",
            "author": "Christian Moen",
            "id": "comment-14085909"
        },
        {
            "date": "2014-10-09T09:35:21+0000",
            "content": "I've attached a new patch.\n\nThe checkRandomData issues were caused by improper handling of token composition for graphs (bug found by Gaute Lambertsen). Tokens preceded by position increment zero token are left untouched and so are stacked/synonym tokens.\n\nWe'll do some more testing and add some documentation before we move forward to commit this. ",
            "author": "Christian Moen",
            "id": "comment-14164954"
        },
        {
            "date": "2014-10-16T09:24:16+0000",
            "content": "Gaute and myself have done testing on real-world data and we've uncovered and fixed a couple of corner-case issues.\n\nOur todo items are as follows:\n\n\n\tDo additional testing and possible add additional number formats\n\tDocument some unsupported cases in unit-tests\n\tAdd class-level javadoc\n\tAdd a Solr factory\n\n\n ",
            "author": "Christian Moen",
            "id": "comment-14173567"
        },
        {
            "date": "2015-01-21T11:18:32+0000",
            "content": "Added factory and wrote javadoc. ",
            "author": "Christian Moen",
            "id": "comment-14285504"
        },
        {
            "date": "2015-01-21T12:31:51+0000",
            "content": "Christian Moen , sounds great! Can I test this feature? If yes, what version should I use? ",
            "author": "Kazuaki Hiraga",
            "id": "comment-14285565"
        },
        {
            "date": "2015-01-29T05:02:13+0000",
            "content": "Please feel free to test it.  Feedback is very welcome.\n\nThe patch is against trunk and this should make it into 5.1. ",
            "author": "Christian Moen",
            "id": "comment-14296379"
        },
        {
            "date": "2015-01-29T05:14:33+0000",
            "content": "New patch with CHANGES.txt and services entry.\n\nWill do some end-to-end testing next. ",
            "author": "Christian Moen",
            "id": "comment-14296386"
        },
        {
            "date": "2015-02-02T12:51:50+0000",
            "content": "Updated patch with decimal number support, additional javadoc and the test code now makes precommit happy.\n\nToken-attributes such as part-of-speech, readings, etc. for the normalized token is currently inherited from the last token used when composing the normalized number. Since these values are likely to be wrong, I'm inclined to set this attributes to null or a reasonable default.\n\nI'm very happy to hear your thoughts on this.\n ",
            "author": "Christian Moen",
            "id": "comment-14301231"
        },
        {
            "date": "2015-02-03T10:34:17+0000",
            "content": "Minor updates to javadoc.\n\nI'll leave reading attributes, etc. unchanged for now and get back to resolving this once we have better mechanisms in place for updating some of the Japanese token attributes downstream. ",
            "author": "Christian Moen",
            "id": "comment-14303055"
        },
        {
            "date": "2015-02-03T10:44:15+0000",
            "content": "Commit 1656670 from Christian Moen in branch 'dev/trunk'\n[ https://svn.apache.org/r1656670 ]\n\nAdded JapaneseNumberFilter (LUCENE-3922) ",
            "author": "ASF subversion and git services",
            "id": "comment-14303062"
        },
        {
            "date": "2015-04-02T10:07:50+0000",
            "content": "Christian Moen, just got interested in this patch.. Any reason this hasn't gone to branch_5x as yet? ",
            "author": "Ramkumar Aiyengar",
            "id": "comment-14392489"
        },
        {
            "date": "2018-08-09T01:01:27+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "author": "Gavin",
            "id": "comment-16574113"
        },
        {
            "date": "2018-10-04T15:09:26+0000",
            "content": "I noticed the changes are available in master/branch_7x ([Test]JapaneseNumberFilter[Factory].java)\n\nShould\u00a0we mark this closed? ",
            "author": "ankush jhalani",
            "id": "comment-16638360"
        },
        {
            "date": "2018-11-16T15:46:34+0000",
            "content": "+1 - this was merged ages ago (2015); would be nice to clean up the Jira so folks looking for interesting projects don't get diverted  ",
            "author": "Mike Sokolov",
            "id": "comment-16689577"
        },
        {
            "date": "2018-11-21T06:15:52+0000",
            "content": "I have confirmed that there are still some normalization issues that incorrectly normalize Kanji numerals. However, implementation itself has been finished and merged into the main branch. Thus, I will close this ticket and file\u00a0another ticket\u00a0to report\u00a0normalization issues and send patches.\u00a0\n\n\u00a0 ",
            "author": "Kazuaki Hiraga",
            "id": "comment-16694286"
        }
    ]
}