{
    "id": "LUCENE-3616",
    "title": "Illegal Field Configurations should throw exceptions",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When working on LUCENE-3615, I came across:\n\n\njava.lang.IllegalArgumentException: field field is stored but does not have binaryValue, stringValue nor numericValue\n\tat org.apache.lucene.index.codecs.DefaultStoredFieldsWriter.writeField(DefaultStoredFieldsWriter.java:177)\n\tat org.apache.lucene.index.StoredFieldsConsumer.finishDocument(StoredFieldsConsumer.java:119)\n\tat org.apache.lucene.index.DocFieldProcessor.finishDocument(DocFieldProcessor.java:295)\n\tat org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:255)\n\tat org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:380)\n\tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1480)\n\tat org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1242)\n\tat org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1223)\n\tat org.apache.lucene.index.Test2BTerms.test2BTerms(Test2BTerms.java:194)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)\n\tat org.apache.lucene.util.LuceneTestCase$3$1.evaluate(LuceneTestCase.java:525)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n\tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:168)\n\tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:47)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:71)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:199)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)\n\nwhich is due to the using Textfield.TYPE_STORED when using a TokenStream.  Since this is an illegal combination, we should throw an exception upon construction of the Field, not later when actually trying to do the indexing.",
    "attachments": {
        "LUCENE-3616.patch": "https://issues.apache.org/jira/secure/attachment/12539089/LUCENE-3616.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-02T19:01:20+0000",
            "content": "+1, we shouldn't rely upon codec assertions/extra safety, they should get IAE immediately.\n\nif you had run Test2BTerms with SimpleText you would have gotten NPE (it did not even have \nthis low-level check until now, i just added it). ",
            "author": "Robert Muir",
            "id": "comment-13161790"
        },
        {
            "date": "2012-01-12T16:21:40+0000",
            "content": "I have a tentative fix for this on the LUCENE-3453 branch... ",
            "author": "Michael McCandless",
            "id": "comment-13185038"
        },
        {
            "date": "2012-08-03T19:38:04+0000",
            "content": "heres some tests and 2 improvements for the pre-supplied types (I didnt mess with custom Field/FieldType, thats more complicated)\n\n\tTextField(Reader, Field.Store) is silly because superclass (Field) will only throw exception if Store = true for a Reader. so I removed the store argument\n\tthrow exception if boost is set for unindexed or omitNorms fields.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13428317"
        },
        {
            "date": "2012-08-03T20:13:12+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13428339"
        },
        {
            "date": "2012-08-03T20:42:40+0000",
            "content": "I committed this patch. But we should still look at Field+FieldType, it \nlooks like its possible for all kinds of wierd things to happen.\n\nThe fact that Field allows this ctor:\n\n  protected Field(String name, FieldType type)\n\n\nmeans it really cannot check against anything. ",
            "author": "Robert Muir",
            "id": "comment-13428358"
        },
        {
            "date": "2012-08-04T08:41:11+0000",
            "content": "With all the various typed XYZField implementations we have now, what do we see as the role of Field? Is it just serving as a parent class to the implementations or do we expect users will be using it too? ",
            "author": "Chris Male",
            "id": "comment-13428583"
        },
        {
            "date": "2012-08-04T09:24:23+0000",
            "content": "Chris: that's a good point.\n\nThe current design seems to be that Field can do \"everything\" and the others are simply sugar on top.\n\nPersonally I think this is confusing and error-prone.\nthats why i wrote such a huge test, but its silly.\n\nIn my opinion if i have a ShortDocValuesField, it shouldnt have a setReader method  ",
            "author": "Robert Muir",
            "id": "comment-13428591"
        },
        {
            "date": "2012-08-04T09:59:30+0000",
            "content": "In my opinion if i have a ShortDocValuesField, it shouldnt have a setReader method\n\nAgreed.  The setABC() methods are extremely confusing and add another level of validation (using your example, we have to validate that you're not setting a Reader on a NumericField).\n\nPerhaps we can re-arrange this a little.  If we genuinely feel there there are use cases out there that we haven't covered with the typed impls and that we don't want to cover, then why not make a GenericField or something, which is abstract and accepts just name, FieldType and maybe an Object value.  We can then emphasis in documentation that it is expert only, should only be subclassed in the extremely rare situations that our typed impls are insufficient, and won't be validated so buyer-beware kind of thing.  \n\nWe can then gut Field down to a very simple abstract class / interface, and promote our typed impls to being 1st class and the recommended entry points for users.\n\nOf course if we feel we have provided adequate support through the typed impls, then we can skip straight to the gutting. ",
            "author": "Chris Male",
            "id": "comment-13428594"
        },
        {
            "date": "2012-08-04T21:32:31+0000",
            "content": "The commit yesterday (1369196) causes the \"Group By\" tab of Solritas to stop working, where we try to group-by a string field.:\n\n\nINFO: [collection1] webapp=/solr path=/browse params={group=true&group.field=manu_exact&queryOpts=group} status=500 QTime=44 \nAug 4, 2012 11:25:40 PM org.apache.solr.common.SolrException log\nSEVERE: null:java.lang.IllegalArgumentException: You cannot set an index-time boost on an unindexed field, or one that omits norms\n\tat org.apache.lucene.document.Field.setBoost(Field.java:382)\n\tat org.apache.solr.schema.FieldType.createField(FieldType.java:277)\n\tat org.apache.solr.schema.FieldType.createField(FieldType.java:263)\n\tat org.apache.solr.schema.SchemaField.createField(SchemaField.java:101)\n\tat org.apache.solr.search.Grouping$CommandField.finish(Grouping.java:790)\n\n\n\nPerhaps the setBoost() in Solr's FieldType should be conditional depending on field type:\nFieldType.java line 275\n  protected IndexableField createField(String name, String val, org.apache.lucene.document.FieldType type, float boost){\n    Field f = new Field(name, val, type);\n    f.setBoost(boost);\n    return f;\n  }\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13428681"
        },
        {
            "date": "2012-08-04T22:27:56+0000",
            "content": "The bug is in grouping, apply a 0.0f boost.\n\n\nPerhaps the setBoost() in Solr's FieldType should be conditional depending on field type:\n\nNo, we should throw exception. Thats the whole point, to not silently discard users boosts when they will have no effect. ",
            "author": "Robert Muir",
            "id": "comment-13428691"
        },
        {
            "date": "2012-08-05T00:09:53+0000",
            "content": "Thanks for fixing that one. Think there may be a few more, untested ones, only did a code search, no testing:\nSearchGroupsResultTransformer # 113,115\nTopGroupsResultTransformer # 255,257\nGroupedEndResultTransformer # 72 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13428705"
        },
        {
            "date": "2012-08-06T02:50:45+0000",
            "content": "Thanks Jan: i fixed these. ",
            "author": "Robert Muir",
            "id": "comment-13428960"
        }
    ]
}