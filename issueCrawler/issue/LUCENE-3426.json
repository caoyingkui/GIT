{
    "id": "LUCENE-3426",
    "title": "optimizer for n-gram PhraseQuery",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "2.9.4,                                            3.0.3,                                            3.1,                                            3.2,                                            3.3,                                            3.4,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If 2-gram is used and the length of query string is 4, for example q=\"ABCD\", QueryParser generates (when autoGeneratePhraseQueries is true) PhraseQuery(\"AB BC CD\") with slop 0. But it can be optimized PhraseQuery(\"AB CD\") with appropriate positions.\n\nThe idea came from the Japanese paper \"N.M-gram: Implementation of Inverted Index Using N-gram with Hash Values\" by Mikio Hirabayashi, et al. (The main theme of the paper is different from the idea that I'm using here, though)",
    "attachments": {
        "LUCENE-3426.patch": "https://issues.apache.org/jira/secure/attachment/12493910/LUCENE-3426.patch",
        "PerfTest.java": "https://issues.apache.org/jira/secure/attachment/12493940/PerfTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-10T14:38:13+0000",
            "content": "First draft. The patch doesn't include test yet.\n\nI added optimizeForNgram() methods in the patch that will remove \"redundant\" terms and positions.\n\nOptimizing PhraseQuery will change score. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102057"
        },
        {
            "date": "2011-09-11T01:19:18+0000",
            "content": "I added test code. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102189"
        },
        {
            "date": "2011-09-11T02:46:46+0000",
            "content": "The result of speed up is:\n\n\n\n\nn-gram/query length\nnormal(ms)\noptimized(ms)\nspeed up\n\n\nbi-gram/4\n21,766\n16,641\n30.8%\n\n\nbi-gram/6\n29,865\n21,518\n38.8%\n\n\ntri-gram/5\n8,188\n6,140\n33.4%\n\n\ntri-gram/6\n9,001\n5,925\n51.9%\n\n\n\n ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102205"
        },
        {
            "date": "2011-09-11T12:58:43+0000",
            "content": "Hi Koji, I wonder if instead it would be cleaner as a subclass of PhraseQuery (NGramPhraseQuery or similar),\nthat rewrites to the (possibly optimized) PhraseQuery in rewrite(). For example, it would build an optimized \nPhraseQuery when slop = 0, and there are enough terms to optimize, otherwise it would build a \"normal\" phrasequery.\n\nThen the optimization would be easy to apply, the user just uses NGramPhraseQuery instead of PhraseQuery.\nfor example, from QueryParser:\n\n  @Override\n  protected PhraseQuery newPhraseQuery() {\n    return new NGramPhraseQuery();\n  }\n\n ",
            "author": "Robert Muir",
            "id": "comment-13102271"
        },
        {
            "date": "2011-09-12T00:47:53+0000",
            "content": "I like the idea of introducing the newly created class! Here is the new patch. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102391"
        },
        {
            "date": "2011-09-12T01:02:24+0000",
            "content": "I think I like it better too... though I wonder if its possible to keep the original NGramPhraseQuery unmodified?\nthis way its not changed by Query.rewrite(), and if a user reuses the query (which we document they can do), they could then call add() again and everything works.\n\nAlso, somewhat related to the issue might be SOLR-2660. We don't have to commit that patch, but we could separate\nout the queryparser refactoring to make it easier for such an optimization to be \"automatic\" in solr, because it allows\nSolrQueryParser to delegate creation of Phrase/MultiPhraseQuery to the FieldType.\n ",
            "author": "Robert Muir",
            "id": "comment-13102393"
        },
        {
            "date": "2011-09-12T01:34:41+0000",
            "content": "\nI think I like it better too... though I wonder if its possible to keep the original NGramPhraseQuery unmodified?\nthis way its not changed by Query.rewrite(), and if a user reuses the query (which we document they can do), they could then call add() again and everything works.\n\nI wonder it that too. Here is the new patch. This time I added assertSame()/NotSame() to check the rewritten Query to test code. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102401"
        },
        {
            "date": "2011-09-12T01:47:56+0000",
            "content": "For automatic in Solr, I wonder if we could move the feature to n-gram tokenizers, and we could have something like:\n\n\n<fieldType name=\"text_cjk\" class=\"solr.TextField\" positionIncrementGap=\"100\"\n           autoGeneratePhraseQueries=\"true\">\n  <analyzer type=\"index\">\n    <tokenizer class=\"solr.CJKTokenizerFactory\"/>\n  </analyzer>\n  <analyzer type=\"query\">\n    <tokenizer class=\"solr.CJKTokenizerFactory\" optimizePhraseQuery=\"true\"/>\n  </analyzer>\n</fieldType>\n\n ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102405"
        },
        {
            "date": "2011-09-12T02:00:02+0000",
            "content": "Well if we apply the refactoring part of SOLR-2660 (we can split out into a separate issue), we could add such a thing as an attribute to the fieldType?\n\nI like the way your patch looks now! A couple more questions:\n\n\tdoesn't the optimization also apply to MultiPhraseQuery? If so, NGramPhraseQuery could extend MultiPhraseQuery and just rewrite to the correct one (MultiPhrase or Phrase depending upon the situation after optimization)\n\twhat about hashCode/equals? Although the same results will be returned, scoring will differ, maybe it NGramPhraseQuery should implement these?\n\n ",
            "author": "Robert Muir",
            "id": "comment-13102406"
        },
        {
            "date": "2011-09-12T02:10:51+0000",
            "content": "I'm not sure it could apply MutiPhraseQuery. Let me take more time.\n\nConsidering hashCode/equals is good point. I'll see. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13102408"
        },
        {
            "date": "2011-09-13T16:38:01+0000",
            "content": "New patch. I added equals/hashCode in the patch.\n\nI think it is too complex to apply optimization to MultiPhraseQuery, so I'd like to stick with PhraseQuery in the patch. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13103737"
        },
        {
            "date": "2011-09-13T16:55:47+0000",
            "content": "I think I agree Koji, the patch looks good.\n\nThough we should be able to keep PhraseQuery's internal members 'private' since NGramPhraseQuery now uses getter methods to access positions, terms, slop ? ",
            "author": "Robert Muir",
            "id": "comment-13103750"
        },
        {
            "date": "2011-09-13T17:16:47+0000",
            "content": "Patch looks great!  What a nice opto  ",
            "author": "Michael McCandless",
            "id": "comment-13103775"
        },
        {
            "date": "2011-09-13T23:11:21+0000",
            "content": "Thank you for your continuous review the patch, Robert! Here is the new patch. Now I don't touch the existing PhraseQuery as I use getter methods.\n\nI think this is ready to commit. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13104071"
        },
        {
            "date": "2011-09-14T13:07:37+0000",
            "content": "trunk: Committed revision 1170586.\n3x: Committed revision 1170593. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13104474"
        },
        {
            "date": "2011-11-27T12:29:24+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157744"
        },
        {
            "date": "2012-01-21T23:03:43+0000",
            "content": "Is this automatic in SOLR? Or do we need to add a feature to support his in SOLR? ",
            "author": "Bill Bell",
            "id": "comment-13190550"
        },
        {
            "date": "2012-01-21T23:57:13+0000",
            "content": "Is this automatic in SOLR?\n\nNo. I've opened SOLR-3055. ",
            "author": "Koji Sekiguchi",
            "id": "comment-13190560"
        }
    ]
}