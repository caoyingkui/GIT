{
    "id": "LUCENE-4371",
    "title": "consider refactoring slicer to indexinput.slice",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "From LUCENE-4364:\n\n\nIn my opinion, we should maybe check, if we can remove the whole Slicer in all Indexinputs? Just make the slice(...) method return the current BufferedIndexInput-based one. This could be another issue, once this is in.",
    "attachments": {
        "LUCENE-4371.patch": "https://issues.apache.org/jira/secure/attachment/12544469/LUCENE-4371.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-10T14:17:50+0000",
            "content": "fyi there are some things i dont like about it, and i didnt look at the directories in misc/.\n\nbut its worth thinking about i guess. ",
            "author": "Robert Muir",
            "id": "comment-13452001"
        },
        {
            "date": "2012-09-10T17:33:23+0000",
            "content": "+1 to rermove the slicer! I was thinking about that the whole time and it really makes it easier.\n\nIn general for 4.0, we should make the slice method abstract and not provide a default implementation. In most cases its as easy to implement like clone(). ",
            "author": "Uwe Schindler",
            "id": "comment-13452166"
        },
        {
            "date": "2012-09-10T17:53:56+0000",
            "content": "Well realistically I'm not sure we have to fix this for 4.0? We could do this one later in a fairly backwards compatible/compatiblish way:\n\nE.g. a good approach might be to make Directory.createSlicer just call clone/slice.\n\nAnother safer alternative might introduce a minor break: by making that deprecation final and having CFS code just use slice() directly,\nlisting it in the backwards break section. this would just be a minor break in expert usage. ",
            "author": "Robert Muir",
            "id": "comment-13452245"
        },
        {
            "date": "2012-09-11T19:09:26+0000",
            "content": "+1\n\nI think having II implement slice is much cleaner than Directory having to implement createSlicer returning an IndexInputSlicer with only one method. ",
            "author": "Michael McCandless",
            "id": "comment-13453310"
        },
        {
            "date": "2012-09-11T19:21:25+0000",
            "content": "I don't think the default impl (SlicedIndexInput) should overrided BII's copyBytes?  Seems ... spooky. ",
            "author": "Michael McCandless",
            "id": "comment-13453320"
        },
        {
            "date": "2012-09-11T19:25:31+0000",
            "content": "I agree Mike, i wanted to remove it... but I'm afraid!\n\nI also dont understand why we have DataOutput.copyBytes(DataInput), and also IndexInput.copyBytes(IndexOutput).\nIs this all really necessary? ",
            "author": "Robert Muir",
            "id": "comment-13453322"
        },
        {
            "date": "2012-09-12T12:54:53+0000",
            "content": "just syncing the patch up to trunk.\n\npart of the funkiness i dont like is e.g. NIOFSIndexInput extends SimpleIndexInput. This is not good. I will see if i can clear that up in a separate issue. ",
            "author": "Robert Muir",
            "id": "comment-13453964"
        },
        {
            "date": "2012-09-14T19:13:26+0000",
            "content": "just an updated patch after LUCENE-4380. still work to be done. ",
            "author": "Robert Muir",
            "id": "comment-13456047"
        },
        {
            "date": "2014-05-17T04:23:40+0000",
            "content": "Cleaned up patch (as trunk has changed much), I think I'm happy with this one:\n\nJust a summary:\n\n\n\tRemove IndexInputSlicer and Directory.createSlicer()\n\tAdd abstract IndexInput.slice(), behaves like clone(), but takes offset and length\n\tMMap, NIOFS, SimpleFS just clone with adjusted offset.\n\tMMap \"slice-of-slice\" assert (cfs within cfs) is removed because Lucene40DocValues does this, and slicing a slice now does what you think (before you got the default buffering impl over mmap...)\n\tthe previous \"Default impl\" is moved to BufferedIndexInput.wrap(). Its only used by RAMdir and a few other wierd ones. This makes it explicit they are using buffering wrapper for CFS.\n\n ",
            "author": "Robert Muir",
            "id": "comment-14000655"
        },
        {
            "date": "2014-05-17T08:04:20+0000",
            "content": "Looks cool.\n\nI was a bit confused about ByteBufferIndexInput, because this one already has slice(...). We should add @Override here, because it now implements abstract method.\n\nI still have to think if close works as expected, but this did not change as before. Maybe this is my misunderstanding, but it is really confusing:\nSlices are always closed by consumer code (not like clones) or not? If yes, all looks fine, but we should document this: clones do not need to be closed, but what about slices? I think we use the same FileDescriptor, so we also don't need to close the slices? ",
            "author": "Uwe Schindler",
            "id": "comment-14000706"
        },
        {
            "date": "2014-05-17T08:48:05+0000",
            "content": "Btw, thanks for hiding and making the concrete FSDirIndexInputs hidden and especially final! Great step. The protected annoyed me for long time, but for backwards compatibility I never removed them (although I am sure nobody was ever able to subclass them correctly!).\n\nIn ByteBufferIndexInput.slice() the return value is a package-protected class, so we should change this to the general IndexInput like in the abstract base class, otherwise the Javadocs will be look broken. This applies to the other classes and their clone(), too. The caller only needs the abstract IndexInput (especially if the impl class is invisible). ",
            "author": "Uwe Schindler",
            "id": "comment-14000715"
        },
        {
            "date": "2014-05-17T09:25:18+0000",
            "content": "+1, this is an awesome simplification! ",
            "author": "Michael McCandless",
            "id": "comment-14000722"
        },
        {
            "date": "2014-05-17T10:53:00+0000",
            "content": "\nWe should add @Override here, because it now implements abstract method.\n\nOh, thanks, I forgot this.\n\n\nI think we use the same FileDescriptor, so we also don't need to close the slices?\n\nSlices are just like clones. So for example CFSDirectory holds an input over the entire .cfs file, and when you ask to open a \"file\" within the cfs it returns a slice (clone) of it. when you close the cfs it closes the real one.\n\n\nIn ByteBufferIndexInput.slice() the return value is a package-protected class, so we should change this to the general IndexInput like in the abstract base class, otherwise the Javadocs will be look broken. \n\nWhat javadocs? This is not a public class  ",
            "author": "Robert Muir",
            "id": "comment-14000737"
        },
        {
            "date": "2014-05-17T11:35:27+0000",
            "content": "What javadocs? This is not a public class \n\nYou are right, because MMapIndexInput is private, too! ",
            "author": "Uwe Schindler",
            "id": "comment-14000748"
        },
        {
            "date": "2014-05-17T12:18:10+0000",
            "content": "Added missing @Override\n\nBy the way, i noticed something when refactoring the code: slicing/cloning currently has no safety (except for MMAP). we should think about this for NIO/Simple too: simple range checks that the slice is in bounds and maybe that the channel.isOpen. CFSDir could check some of this too, because its \"handle\" is now an ordinary input. \n\nBut i didn't want to stir up controversy in this refactor (it is unrelated to this patch). I think there is no performance impact of adding such checks to NIO/Simple because they already must suffer a buffer refill here anyway. So maybe we can just open a followup. ",
            "author": "Robert Muir",
            "id": "comment-14000761"
        },
        {
            "date": "2014-05-17T13:44:15+0000",
            "content": "Commit 1595480 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1595480 ]\n\nLUCENE-4371: Replace IndexInputSlicer with IndexInput.slice ",
            "author": "ASF subversion and git services",
            "id": "comment-14000794"
        },
        {
            "date": "2014-06-02T16:32:14+0000",
            "content": "Reopen for 4.9 backport. ",
            "author": "Robert Muir",
            "id": "comment-14015519"
        },
        {
            "date": "2014-06-02T17:09:11+0000",
            "content": "Thanks! We need this backported for the ByteBufferIndexInput improvements. ",
            "author": "Uwe Schindler",
            "id": "comment-14015580"
        },
        {
            "date": "2014-06-02T17:21:41+0000",
            "content": "Commit 1599274 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1599274 ]\n\nLUCENE-4371: Replace IndexInputSlicer with IndexInput.slice ",
            "author": "ASF subversion and git services",
            "id": "comment-14015598"
        },
        {
            "date": "2014-06-02T17:22:44+0000",
            "content": "Commit 1599275 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1599275 ]\n\nLUCENE-4371: move CHANGES entry ",
            "author": "ASF subversion and git services",
            "id": "comment-14015599"
        },
        {
            "date": "2014-06-02T18:01:29+0000",
            "content": "Commit 1599284 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1599284 ]\n\nLUCENE-4371: remove bogus and bogusly placed assert ",
            "author": "ASF subversion and git services",
            "id": "comment-14015659"
        }
    ]
}