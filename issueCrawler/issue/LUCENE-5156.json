{
    "id": "LUCENE-5156",
    "title": "CompressingTermVectors termsEnum should probably not support seek-by-ord",
    "details": {
        "components": [],
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Just like term vectors before it, it has a O seek-by-term. \n\nBut this one also advertises a seek-by-ord, only this is also O.\n\nThis could cause e.g. checkindex to be very slow, because if termsenum supports ord it does a bunch of seeking tests. (Another solution would be to leave it, and add a boolean so checkindex never does seeking tests for term vectors, only real fields).\n\nHowever, I think its also kinda a trap, in my opinion if seek-by-ord is supported anywhere, you kinda expect it to be faster than linear time...?",
    "attachments": {
        "LUCENE-5156.patch": "https://issues.apache.org/jira/secure/attachment/12596270/LUCENE-5156.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-02T07:18:06+0000",
            "content": "+1 this is trappy ",
            "author": "Adrien Grand",
            "id": "comment-13727443"
        },
        {
            "date": "2013-08-06T11:45:37+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13730673"
        },
        {
            "date": "2013-08-06T12:08:09+0000",
            "content": "Patch looks good, +1 ",
            "author": "Adrien Grand",
            "id": "comment-13730688"
        },
        {
            "date": "2013-08-06T15:50:51+0000",
            "content": "Commit 1511009 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1511009 ]\n\nLUCENE-5156: remove seek-by-ord from CompressingTermVectors ",
            "author": "ASF subversion and git services",
            "id": "comment-13730869"
        },
        {
            "date": "2013-08-06T15:59:23+0000",
            "content": "Commit 1511014 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1511014 ]\n\nLUCENE-5156: remove seek-by-ord from CompressingTermVectors ",
            "author": "ASF subversion and git services",
            "id": "comment-13730880"
        },
        {
            "date": "2013-10-05T10:18:53+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787041"
        },
        {
            "date": "2014-08-01T20:25:02+0000",
            "content": "I can understand why this change was done \u2013 better to not support it than support something optional that should be implemented fast yet not do it fast.  What if it were to be made fast, along with seekCeil() which is also implemented slowly right now too?  For example, say the first time either seekCeil is called or an ord method is called, then build up an array of term start positions by ordinal, which otherwise wouldn't be done.  Then you could do a binary search for seekCeil and a direct lookup for seekExact.  The lazy-created array could also then be shared across repeated invocations to get Terms for the current document.\n\nWhy bother, you might ask?  I'm working on a means of having the Terms from term vectors be directly searched against by the default highlighter instead of re-inverting to MemoryIndex.  I'll post a separate issue for that with code, of course, which \"works\" but isn't as efficient as it could be thanks to the O(N) of seekCeil on term vectors' Terms. ",
            "author": "David Smiley",
            "id": "comment-14082898"
        },
        {
            "date": "2014-08-01T22:00:55+0000",
            "content": "Thats unrelated to term vectors. We shouldnt have such caching in the default codec, it can easily blow up on a large document. ",
            "author": "Robert Muir",
            "id": "comment-14083026"
        },
        {
            "date": "2014-08-01T22:02:50+0000",
            "content": "Personally i would do such a thing with a FilterTerms + FilterReader. you just check if docid == lastDocID and you have your cache thing.\n\nBut i dont think it should be in the default codec. I also happen to think term vectors arent a good datastructure for highlighting anyway. ",
            "author": "Robert Muir",
            "id": "comment-14083029"
        },
        {
            "date": "2014-08-01T22:22:42+0000",
            "content": "I agree on the caching thing \u2013 that is, what I said in which you ask for Terms for the same document again.  Never-mind that part \u2013 as I thought about it I realized I didn't need that after all.\n\nBut i dont think it should be in the default codec. I also happen to think term vectors arent a good datastructure for highlighting anyway.\n\nThe default highlighter fully respects the positions and other aspects of the user's query, unlike the other highlighters.  Some applications demand that a highlight is accurate to the query, even if the query uses custom span queries that do tricks with payloads, etc.  It would be nice if the other highlighters supported accurate highlights for such queries but they don't, so today, this is the applicable one for accurate highlights for complex queries.  The default highlighter requires a Terms instance reflecting the current document \u2013 it currently gets it via a re-inverting into a MemoryIndex but it can be hacked to accept a Terms directly from term vectors.  \n\nSo you don't like the idea of enhancing performance of term vector seekCeil in the default codec?  Is that a -1 or -0?  This change I propose seems harmless \u2013 the code would not create & build up the new offset array if consuming code doesn't call seekCeil or the ord methods. ",
            "author": "David Smiley",
            "id": "comment-14083064"
        },
        {
            "date": "2014-08-01T22:22:44+0000",
            "content": "I also think its ok if we fix the codec to have a faster seekExact (not by copying stuff into a large array on the first call though, just by fixing datastructure / how it access data).\n\nThat would solve the actual problem here you have in a clean way. ",
            "author": "Robert Muir",
            "id": "comment-14083065"
        },
        {
            "date": "2014-08-01T22:25:16+0000",
            "content": "Sorry David, its not about being against speeding something up, its about how you propose implementing it.\n\nCopying all the data from the entire document into another array on the first read for the doc, that's a really trashy thing to do here. Instead, we should just fix it correctly, so that seekCeil() is not linear time.  ",
            "author": "Robert Muir",
            "id": "comment-14083072"
        },
        {
            "date": "2014-08-01T22:29:16+0000",
            "content": "Also, this should be discussed somewhere else than on an unrelated, closed, year-old issue, like on its own issue. (Sorry, its not really related to seek-by-ord, your problem is a more general one, and it wasnt created by this issue, nor even by compressing term vectors but is older than that... this issue is closed) ",
            "author": "Robert Muir",
            "id": "comment-14083079"
        }
    ]
}