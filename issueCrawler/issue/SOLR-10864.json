{
    "id": "SOLR-10864",
    "title": "Add static (test only) boolean to PointField indicating 'precisionStep' should be ignored so we can simplify points randomization in our schemas",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "(I'm spinning this idea out of parent jira SOLR-10807 so that it gets it's own jira# w/ it's own summary for increased visibility/comments)\n\nIn the interest of making it easier & more straight forward to get good randomized test coverage of Points fields, I'd like to add the following to the PointField class...\n\n\n /**\n  * <p>\n  * The Test framework can set this global variable to instruct PointField that\n  * (on init) it should be tollerant of the <code>precisionStep</code> argument used by TrieFields.\n  * This allows for simple randomization of TrieFields and PointFields w/o extensive duplication\n  * of <code>&lt;fieldType/&gt;</code> declarations.\n  * </p>\n  *\n  * <p>NOTE: When {@link TrieField} is removed, this boolean must also be removed</p>\n  *\n  * @lucene.internal\n  * @lucene.experimental\n  */\n public static boolean TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n\n /** \n  * NOTE: This method can be removed completely when\n  * {@link #TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS} is removed \n  */\n @Override\n protected void init(IndexSchema schema, Map<String, String> args) {\n   super.init(schema, args);\n   if (TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS) {\n     args.remove(\"precisionStep\");\n   }\n }\n\n\n\nThen in SolrTestCaseJ4, set PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS on a class by class basis when randomizing Trie/Points (and unset @AfterClass).\n\n(details to follow in comment)",
    "attachments": {
        "SOLR-10864.patch": "https://issues.apache.org/jira/secure/attachment/12873356/SOLR-10864.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-09T22:59:53+0000",
            "content": "The value add here is that it will allow us to much more easily/broadly randomize the testing between Trie & Points fields.  The current Trie/Points randomization happens on a \"<fieldType/> Name\" basis \u2013 ie: int vs pint.  Which means in order to be used as widely as possible...\n\n\tit can only be used in tests schemas where there are numeric types with the expected names int (etc...)\n\tpint (etc...) fieldType declarations must be added to all of the eligable schemas\n\tevery numeric <field/> and <dynamicField/> declaration in those eligable schemas needs modified to use the randomized properties\n\n\n\n...but even then we won't have \"total coverage\" because of existing test schemas that declare multiple variants of Trie fields (ie: int may use precisionStep=\"0\" while the same schema may contain tint using precisionStep=\"4\" and changing all of the Integer fields to use the int type (so it can be randomized as pint) would decrease our test coverage of dealing with Trie fields.\n\nHence this suggestion: Instead of randomizing the type in every numeric <field/> we can randomize the class in every numeric <fieldType/> and have to worry about the unused precisionStep params causing init failures in the tests...\n\n\n\tfewer changes & simpler changes to our tests schema files\n\t\n\t\tonly changing the <fieldType/> definitions, not all the <field/> and <dynamicField/> definitions\n\t\tthe changes can be be a scripted regex replacement of the solr.Trie(.*)Field clss names \u2013 don't need to manually inspect every schema looking for all the diff type names (int, tint, ints, integer, int_mf, etc...)\n\t\n\t\n\twhich also means the <field/> and <dynamicField/> definitions in the test schemas will be easier to read)\n\n\n\nAny objections? ",
            "author": "Hoss Man",
            "id": "comment-16045181"
        },
        {
            "date": "2017-06-13T21:30:07+0000",
            "content": "+1, the idea seems sound to me. ",
            "author": "Steve Rowe",
            "id": "comment-16048430"
        },
        {
            "date": "2017-06-14T17:01:29+0000",
            "content": "thanks steve.\n\nI should have pointed out before: you can see an aproximation of what this will look like in the branch i've been working on for the parent issue: jira/SOLR-10807\n\nIn particular this commit gives the flavor of teh bulk of the change...\n\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c76a79b\n\nUnless their are any objections, i'll assume this choice is ok, and continue moving forwrad with this approach in branch jira/SOLR-10807 (once some other related bugs are fixed on maser) and resolve this issue. ",
            "author": "Hoss Man",
            "id": "comment-16049376"
        },
        {
            "date": "2017-06-15T17:56:10+0000",
            "content": "+1\nOne more issue is with the fact that PointFields don't use FieldCache (mv only since SOLR-10472), and many tests may be using those fields for faceting/stats, etc. Maybe no longer an issue if we do SOLR-10808 first (and update schema version)? Or do you have other plans? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16050864"
        },
        {
            "date": "2017-06-15T21:37:16+0000",
            "content": "Or do you have other plans?\n\nI did not have any specific plans \u2013 I'd kind of forgotten about needing to hack around that on the jira/SOLR-10807 branch.   Thanks for reminding me.\n\nMy 2 strawman suggestions would be:\n\n\tAny tests where it's a problem is a test where we should consider not using randomized class name in the fieldType, and instead test the diff permutations explicitly.\n\tin addition to the randomized classname sysvar used in schema files, we can have a randomized boolean var(s) indicating if the choosen classes are points based, and fields/fieldTypes where \"trie w/fieldcache\" vs \"points w/docvalues\" matter can use that var in their docValues=\"$var\" declaration.\n\n\n\nIn practice, we might want to mix both?  Use #2 in general purpose test schemas, and #1 in purpose build test schemas like what TestPoints or TestTrie use?\n\nEither way:\n\n\ti'm guessing at least 80% of test won't be affected at all\n\twe should have a solution that doesn't depend on wether we do SOLR-10808, because even if that happens first, we're still going to want to be able to have schemas where TrieFields have (effective/explicit) docValues=\"false\" to continue testing that we don't break FieldCache usage for those fieldTypes in 7.x point releases\n\n\n\nthoughts? ",
            "author": "Hoss Man",
            "id": "comment-16051100"
        },
        {
            "date": "2017-06-17T02:46:22+0000",
            "content": "Before diving in completely, here's a starting point patch for discussion to (that's a bit cleaner to follow then everything i've hacked up in the SOLR-10807 branch).\n\nit updates most of the schema files that were using the old points randomization sysprops (i just realized i missed a couple) to use the newer style i was suggesting as well as adding docValues=\"${solr.tests.numeric.points}\" as a demo of what i had in mind regarding Tomas's recent comment (in the SOLR-10807 branch i hacked around this problem a diff way).  One thing didn't spend any time on yet is ripping out some of the explicit points based fields/dynamicFields from these schemas.  Assuming we go forward with this approach, we could then expand it ot cover all the schemas - such that nothing ever defined a solr.TrieIntField\n\nThere are still a bunch of test failures with this patch \u2013 most either because of tests that should be subclassing SOlrTestCaseJ4 but shouldn't for silly reasons (but i didn't put defaults in for the sysprops because i wanted to help shake out bugs) or because of legit problems with points that we know about that we can either update with @SuppressPoints or disable piecemeal with {{assumeFalse(Boolean.getBoolean(\"solr.tests.numeric.points\"))).  The patch includes a handful of examples of this.\n\nHonestly: I'm a little disappointed at how much i had to leverage docValues=\"${solr.tests.numeric.points}\" ... i was hoping that only a handful of facet/stats related schemas would need that, but so many tests relay on the same schema files I worry we''ll essentially have to put it every where, and we'll wind up under testing points fields with docValues=\"false\"\n\nTom\u00e1s Fern\u00e1ndez L\u00f6bbe & Steve Rowe: You guys have spent a lot of time working on/with points randomized tests \u2013 what do you think?   Is this approach \"less bad/cubersome/anoying\" then the current way we randomize in points? ",
            "author": "Hoss Man",
            "id": "comment-16052646"
        },
        {
            "date": "2017-06-17T20:16:35+0000",
            "content": "Honestly: I'm a little disappointed at how much i had to leverage docValues=\"${solr.tests.numeric.points}\" ... i was hoping that only a handful of facet/stats related schemas would need that, but so many tests relay on the same schema files I worry we''ll essentially have to put it every where, and we'll wind up under testing points fields with docValues=\"false\"\n\nHow about introducing a new (independently) randomized sysprop usable as docValues=\"${solr.tests.numeric.docvalues}\"? Tests that need it to be one way or the other can set it in a @BeforeClass-annotated static method.\n\nTom\u00e1s Fern\u00e1ndez L\u00f6bbe & Steve Rowe: You guys have spent a lot of time working on/with points randomized tests \u2013 what do you think? Is this approach \"less bad/cubersome/anoying\" then the current way we randomize in points?\n\n+1, I like how it'll be standardized, simplified (fieldtypes only instead of fields; and fewer fields) and (more) comprehensive than the current setup. ",
            "author": "Steve Rowe",
            "id": "comment-16052991"
        },
        {
            "date": "2017-06-20T05:17:25+0000",
            "content": "\n+1, I like how it'll be standardized, simplified (fieldtypes only instead of fields; and fewer fields) and (more) comprehensive than the current setup.\n\nThanks \u2013 I was second guessing myself and needed outside eyes to tell me if i was over thinking things.\n\nHow about introducing a new (independently) randomized sysprop usable as docValues=\"${solr.tests.numeric.docvalues}\"? Tests that need it to be one way or the other can set it in a @BeforeClass-annotated static method.\n\nThat's a great idea \u2013 but In the attach patch I tried to tweak your idea slightly to \"improve\" it by being docValues=\"${solr.tests.numeric.points.dv}\".  When Triefields are choosen it's always false, when points fields are choosen then it will randomly be selected.  So depending on your test/config...\n\n\n\tAlways need DV regardless of underlying type...\n\t\n\t\tUse docValues=\"true\" in the schema\n\t\n\t\n\tKnow you are doing something that requires DV if the numerics are points...\n\t\n\t\tSystem.setProperty(\"solr.tests.numeric.points.dv\", \"true\"); in your setup\n\t\n\t\n\tKnow that DVs shouldn't matter for your test...\n\t\n\t\tdocValues=\"${solr.tests.numeric.points.dv}\"\n\t\n\t\n\n\n\n...but actually in hindsight, I think your idea is just plain objectively better, because it would keep the usage simpler...\n\n\n\t(almost) every numeric field type should have docValues=\"${solr.tests.numeric.dv}\"\n\tAlways need DV regardless of underlying type...\n\t\n\t\tSystem.setProperty(\"solr.tests.numeric.dv\", \"true\"); in your test setup\n\t\n\t\n\tKnow you are doing something that requires DV if the numerics are points...\n\t\n\t\tin Setup... \n\nif (Boolean.getBoolean(\"solr.tests.numeric.points\") {\n  System.setProperty(\"solr.tests.numeric.dv\", \"true\");\n }\n\n\n\t\n\t\n\tKnow that it shouldn't matter for your test...\n\t\n\t\tDo nothing, baseclass has already randomized\n\t\n\t\n\n\n\nSound Good?\n\n\u2014\n\nAs things stand now, the patch cleans up all tests/schemas to use the (current) variables, with the neccessary fixes / System.setProperty / @SuppressPointFields to tests that had assumptions/expectations about types.\n\nThere's a handful of nocommits, that generally fall into 4 categories...\n\n\tjavadocs in SolrTestCaseJ4\n\tnotes to file/fix (2) independent bugs\n\trandomize the variables that i currently hardcoded for forcing points testing\n\tnotes in schema files to remove explict Point field types and update the affected tests\n\t\n\t\tI'm actually thinking that this should really be done as a distinctly seperate jira after we change the randomization logic\n\t\n\t\n\n\n\none other question I had was about changing the semantics of the current solr.tests.preferPointFields users can set ... it can currently only be used to \"prefer points\" for tests that don't have @SuppressPointFields, but I think it would be better to change that to solr.tests.use.numeric.points such that the semantics are:\n\n\n\tif @SuppressPointFields use trie fields\n\telse: if user set -Dsolr.tests.use.numeric.points=foo\n\t\n\t\tif foo==true force points, else force trie\n\t\n\t\n\telse: randomly pick between trie and points\n\n\n\nany objections?\n\n\n\nMy next steps unless someone has concerns...\n\n\n\tchange the DV sys prop name/usage as mentioned above\n\tfile/fix the two nocommits related to new jiras\n\tcreate a new subtask of SOLR-10807 to deal with auditing/removing most of the hardcoded solr.FooPointFields and related fields (after the randomization work has been rolled out to all schemas and remove those nocommits from these schema files)\n\tfix the jdoc & hardcoded sysprop related nocommits\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-16055162"
        },
        {
            "date": "2017-06-20T15:13:37+0000",
            "content": "...but actually in hindsight, I think your idea is just plain objectively better, because it would keep the usage simpler... (almost) every numeric field type should have docValues=\"${solr.tests.numeric.dv}\" .... Sound Good?\n\n+1\n\none other question I had was about changing the semantics of the current solr.tests.preferPointFields users can set ... it can currently only be used to \"prefer points\" for tests that don't have @SuppressPointFields, but I think it would be better to change that to solr.tests.use.numeric.points .... any objections?\n\n+1 ",
            "author": "Steve Rowe",
            "id": "comment-16055918"
        },
        {
            "date": "2017-06-21T01:22:32+0000",
            "content": "\nOk, here's what i've got.\n\nBeen hammering on the tests, I think I've got all the changes needed to account for both the randomized points and randomized docvalues. (but i also just updated to current master, so maybe i missed something)\n\nStill one nocommit in there to work around SOLR-10929, but I'm going to tackle that next ... then fix the inevitable unused imports and hopefully commit to master soon (tomorow maybe?) ",
            "author": "Hoss Man",
            "id": "comment-16056782"
        },
        {
            "date": "2017-06-21T02:02:29+0000",
            "content": "Still one nocommit in there to work around SOLR-10929, ...\n\nBah! ... 2 patches agao i had a perfectly good workaround for this issue, but I \"simplified\" it in the last patch and broke BadIndexSchemaTest.\n\nUpdate patch fixes my stupidity. ",
            "author": "Hoss Man",
            "id": "comment-16056836"
        },
        {
            "date": "2017-06-21T16:28:56+0000",
            "content": "updated patch to account for SOLR-10929 ... still testing but this should at least apply cleanly against current trunk ",
            "author": "Hoss Man",
            "id": "comment-16057796"
        },
        {
            "date": "2017-06-21T19:08:14+0000",
            "content": "patch updated with all import/jdoc fixes needed to pass precommit ",
            "author": "Hoss Man",
            "id": "comment-16058039"
        },
        {
            "date": "2017-06-22T16:31:44+0000",
            "content": "Commit 38f29b2674c2465057d522e5862b8a32b1637a71 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=38f29b2 ]\n\nSOLR-10864: Simplified how Trie vs Points based numerics are randomized by SolrTestCaseJ4\n\nAdds a static option to PointsField to ignore 'precisionStep' attribute.\n\nThis change also begins to attempt to randomize 'docValues' on numeric field types unless tests explicity enable/disable them ",
            "author": "ASF subversion and git services",
            "id": "comment-16059645"
        },
        {
            "date": "2017-06-22T21:34:04+0000",
            "content": "Commit ae01113472378093462e88b90e6e07a2cd863f8f in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ae01113 ]\n\nremove SuppressPointFields from TestCloudPivotFacet\n\nnow that SOLR-10864 is in place, there's no reason this test can't use points+docValues ",
            "author": "ASF subversion and git services",
            "id": "comment-16060048"
        },
        {
            "date": "2017-06-23T17:13:08+0000",
            "content": "Commit c20d3aff9474be338ccf9fdb138f467435d06f09 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c20d3af ]\n\nSOLR-10177: replace adhoc points randomization with new standard introduced by SOLR-10864 ",
            "author": "ASF subversion and git services",
            "id": "comment-16061238"
        },
        {
            "date": "2017-06-30T03:11:11+0000",
            "content": "Sorry for the late response, I've been taking some time off. One minor comment, I think these changes left TestRandomDVFaceting in a bad state. It was originally intended to compare faceting between dv=true and dv=false. It would also compare with point fields most of the times (see https://github.com/apache/lucene-solr/blob/master/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java#L250-L258 ). After this change, half the time (when randomizeNumericTypesProperties decides to use PointFields) the test just compares dv=true three times. \nFor consistency with other schemas, maybe we want schema-docValuesFaceting.xml to have specific trie fields and use those in this test.  ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16069403"
        },
        {
            "date": "2017-06-30T04:13:25+0000",
            "content": "... I think these changes left TestRandomDVFaceting in a bad state. ...\n\nHmm, ok \u2013 yeah, i see what you mean.\n\nFor consistency with other schemas, maybe we want schema-docValuesFaceting.xml to have specific trie fields and use those in this test. \n\nI'm not sure what you mean by \"consistency with other schemas\", but in general my concern is that schema-docValuesFaceting.xml is already used by (one) other tests \u2013 and there's nothing to stop people from adding new tests that use this schema as well \u2013 so I think it would make more sense to change TestRandomDVFaceting.beforeTests to force  non-points and non-dv via sys prop overrides, so that it can do the comparisons as originally intended (and compare the trie to points you added in 57934ba4)\n\nmake sense? ",
            "author": "Hoss Man",
            "id": "comment-16069442"
        },
        {
            "date": "2017-06-30T04:21:43+0000",
            "content": "I'm not sure what you mean by \"consistency with other schemas\"... and there's nothing to stop people from adding new tests that use this schema as well\nI meant adding fields that are explicitly trie fields, something like \"tint\" or \"int_t\" and modify the test to use those instead of reverting what you did.\n\nforce non-points and non-dv via sys prop overrides\n+1 That makes sense and it's simpler than what I was proposing. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16069450"
        },
        {
            "date": "2017-06-30T18:23:35+0000",
            "content": "Commit f3c851a015e5d8c775f0fb28ffbd8f5725f2f11b in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f3c851a ]\n\nSOLR-10864: Fixup: Restore the DV vs trie vs points intent of TestRandomDVFaceting ",
            "author": "ASF subversion and git services",
            "id": "comment-16070518"
        }
    ]
}