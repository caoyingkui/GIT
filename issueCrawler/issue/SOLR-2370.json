{
    "id": "SOLR-2370",
    "title": "Let some UpdateProcessors be default without explicitly configuring them",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "Problem:\nToday the user needs to make sure that crucial UpdateProcessors like the Log- and Run UpdateProcessors are present when creating a new UpdateRequestProcessorChain. This is error prone, and when introducing a new core UpdateProcessor, like in SOLR-2358, all existing users need to insert the changes into all their pipelines.\n\nA customer made pipeline should not need to care about distributed indexing, logging or anything else, and should be as slim as possible.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12995639",
            "date": "2011-02-17T02:20:01+0000",
            "content": "I'd like to hear from others, but at first blush it seems like a good idea.\n\naside: The description field of a JIRA issue is repeated in every update to the mailing list.  It's probably best to use a few sentences to summarize and put more meat in a comment. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12995822",
            "date": "2011-02-17T14:27:44+0000",
            "content": "(Moving proposal to a comment as per best-practice)\n\nProposal:\nThe proposal is to lend from the <first-components> and <last-components> pattern used in RequestHandler configs. In that way, we could let all core processors be included either first or last by default in all UpdateChains.\n\nTo do this, we need a place to configure the defaults, e.g. by a default=\"true\" param:\n\n<updateRequestProcessorChain name=\"default\" default=\"true\">\n  <first-processors>\n    <processor class=\"solr.DistributedUpdateRequestProcessor\"/>\n  </first-processors>\n  <last-processors>\n    <processor class=\"solr.LogUpdateProcessorFactory\" />\n    <processor class=\"solr.RunUpdateProcessorFactory\" />\n  </last-processors>\n</updateRequestProcessorChain>\n\n\n\nNext, the customer made chain will be only the \"center\" part:\n\n<updateRequestProcessorChain name=\"mychain\">\n  <processor class=\"my.nice.DoSomethingProcessor\"/>\n  <processor class=\"my.nice.DoAnotherThingProcessor\"/>\n</updateRequestProcessorChain>\n\n\n\nTo override the core processors config for a particular chain, you would start a clean chain by parameter reset=\"true\"\n\n<updateRequestProcessorChain name=\"mychain\" reset=\"true\">\n  <processor class=\"my.nice.DoSomethingProcessor\"/>\n  <processor class=\"my.nice.DoAnotherThingProcessor\"/>\n  <processor class=\"solr.RunUpdateProcessorFactory\" />\n</updateRequestProcessorChain>\n\n\n\nIf you only need to make sure that one of your custom processors run at the very beginning or the very end, you could use:\n\n\n<updateRequestProcessorChain name=\"mychain\">\n  <processor class=\"my.nice.DoSomethingProcessor\"/>\n  <processor class=\"my.nice.DoAnotherThingProcessor\"/>\n  <last-processors>\n    <processor class=\"solr.MySpecialDebugProcessor\" />\n  </last-processors>\n</updateRequestProcessorChain>\n\n\n\nThe default should be reset=\"false\", but the example schema could keep the default chain commented out to provide backward compatibility for upgraders. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12998091",
            "date": "2011-02-22T23:09:01+0000",
            "content": "I'm sort of on board this ... peronally i think UpdateProcessors are a complicated enough beast that if you are configuring them you reallY need to configure the whole chain \u2013 but assuming i'm in the minority there, the part i don't understand is the value add in the 'customer made chain will be only the \"center\" part' and reset=\"true\" pieces ... that seems overly complicated.\n\nThe pattern (ultimately) implemented with search components was that:\n\n\tIf first-components was specified, it came before the default list.\n\tIf last-components was specified, it came after the default list, but before debug.\n\tIf a full components list was specified (instead of first/last lists) it overrode the entire default list.\n\n\n\nthe same pattern seems like it would make perfect sense here - substituting RunUpdateProcessorFactory for DebugComponent.  If you specify your own complete chain, then you override the complete chain.  If you specify a list of first-components they come before all the defualt stuff.  if you specify last-components they come after default stuff, but RunUpdateProcessorFactory is still used at the end.\n\nwhat am i missing that necessitates this idea of replacing the \"center\" part of the chain being the default?  \n\n(maybe i'm just missing the point of the examples ... it owuld help to know what the hypothetical default chain is in these scenerios, and then what the final resulting chain would be in each instance) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12998236",
            "date": "2011-02-23T08:35:54+0000",
            "content": "I was assuming that the DistributedUpdateHandler would always want to run first, and then the rest of the processing could happen per shard. That way you get somewhat load balanced processing, compared to running the whole chain before distributing. Thus you have\n\nDistributedUpdateProcessor\nCustomUpdateProcessor\nCustomUpdateProcessor\nLogUpdateProcessor\nRunUpdateProcessor\n\nThus in my head it makes most sense to insert user chains in the middle. A more explicit way to do that could be\n\n<updateRequestProcessorChain name=\"mychain\">\n  <middle-processors>\n    <processor class=\"my.nice.DoSomethingProcessor\"/>\n    <processor class=\"my.nice.DoAnotherThingProcessor\"/>\n  </middle-processors>\n</updateRequestProcessorChain>\n\n\nand let the existing syntax define the whole chain as today. We then only need to find a way to mark the \"middle\" of the default chain. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15082952",
            "date": "2016-01-05T12:20:33+0000",
            "content": "Already implemented in other issues "
        }
    ]
}