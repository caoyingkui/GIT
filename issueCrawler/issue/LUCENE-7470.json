{
    "id": "LUCENE-7470",
    "title": "Ensure Lucene sources don't swallow root cause exceptions",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Robert Muir created a nice tool to look at the Java bytecode to determine whether  e.g. a finally or catch clause may ignore the original root cause exception, here: https://github.com/rmuir/elasticsearch/tree/catchAnalyzer\n\nIt's a fork of ES but I think maybe we can extract it and use it in Lucene.\n\nUnlike Python, Java unfortunately does not seem to have safeguards against exceptionally handling code accidentally losing the original exception.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15533489",
            "author": "Michael McCandless",
            "date": "2016-09-29T17:51:14+0000",
            "content": "I think we can just poach the code from the tools/ directory.\n\nBut probably we would need a new annotation SuppressExceptionHandlingChecks or some such for code that is doing tricky exception handling? "
        },
        {
            "id": "comment-15533675",
            "author": "Hoss Man",
            "date": "2016-09-29T18:48:19+0000",
            "content": "\n@SuppressWarnings(\"ignored-root-exception\") ? "
        },
        {
            "id": "comment-15533765",
            "author": "Robert Muir",
            "date": "2016-09-29T19:16:08+0000",
            "content": "SuppressWarnings cannot be used. it only has Source Retention. This is a bytecode analyzer. "
        },
        {
            "id": "comment-15535508",
            "author": "Dawid Weiss",
            "date": "2016-09-30T09:16:33+0000",
            "content": "Pretty cool tool, Robert. "
        },
        {
            "id": "comment-15535567",
            "author": "Uwe Schindler",
            "date": "2016-09-30T09:48:18+0000",
            "content": "+1\n\nMaybe just reuse SuppressForbidden for this  Otherwise add a new one! "
        },
        {
            "id": "comment-15535934",
            "author": "David Smiley",
            "date": "2016-09-30T13:02:41+0000",
            "content": "This is awesome; nice work Rob!  My pet peeve bug pattern is ignoring/masking root exceptions \u2013 happens all too often.  I wish javac had this built in.\n\nIf this is added to Lucene, I guess SpecialMethod.java with it's static list of known boxing methods etc. would need to load it's list from perhaps a simple file on the classpath?\n\nI wonder if this might go to some place where it would be used more broadly?  e.g. FindBugs  After all... why should only Lucene have all the fun? "
        }
    ]
}