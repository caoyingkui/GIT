{
    "id": "SOLR-9056",
    "title": "Add ZkConnectionListener interface",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0,                                            6.1",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "Zk connection management is currently split among a few classes in not-very-helpful ways.  There's SolrZkClient, which manages general interaction with zookeeper; ZkClientConnectionStrategy, which is a sort-of connection factory, but one that's heavily intertwined with SolrZkClient; and ConnectionManager, which doesn't actually manage connections at all, but instead is a ZK watcher that calls back into SolrZkClient and ZkClientConnectionStrategy.\n\nWe also have a number of classes that need to be notified about ZK session changes - ZkStateReader sets up a bunch of watches for cluster state updates, Overseer and ZkController use ephemeral nodes for elections and service registry, CoreContainer needs to register cores and deal with recoveries, and so on.  At the moment, these are mostly handled via ZkController, which therefore needs to know how about the internals of all these different classes.  There are a few other places where this co-ordination is duplicated, though, for example in CloudSolrClient.  And, as is always the case with duplicated code, things are slightly different in each location.\n\nI'd like to try and rationalize this, by refactoring the connection management and adding a ZkConnectionListener interface.  Any class that needs to be notified when a zk session has expired or a new session has been established can register itself with the SolrZkClient.  And we can remove a whole bunch of abstraction leakage out of ZkController, and back into the classes that actually need to deal with session changes.  Plus, it makes things a lot easier to test.",
    "attachments": {
        "SOLR-9056.patch": "https://issues.apache.org/jira/secure/attachment/12801801/SOLR-9056.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-02T19:19:28+0000",
            "author": "Alan Woodward",
            "content": "Patch.  It's a bit of a biggie, so I can open a pull request if anyone's interested in commenting that way.\n\n\n\tremoves ConnectionManager and ZkClientConnectionStrategy, and replaces them with a ZkConnectionFactory.  This just has a createSolrZookeeper(Watcher watcher) method.\n\tSolrZkClient now exposes a registerConnectionListener() method\n\tWhen a listener is registered, if the client is already connected, it will call the listener's onConnect() method.\n\tSolrZkClient has its own internal zk Watcher which it passes to ZkConnectionFactory.createSolrZookeeper().  This means that SZK can now manage its own connections.\n\tWhen a session expires, SolrZkClient calls the onSessionExpiry() method of all its registered listeners\n\tWhen a session has been re-established, SolrZkClient calls the onConnect() method of all its registered listeners\n\tNetwork hiccups that don't cause session expiry are handled internally, and don't call out to listeners at all.\n\tZkController now implements ZkConnectionListener, and registers itself with its internal client\n\tZkStateReader now implements ZkConnectionListener\n\n\n\nThere are a whole bunch of other things to do in follow-up (Overseer and CoreContainer should be ZkConnectionListeners, migrate the ZkController listeners, etc), but this patch is big enough as it is. ",
            "id": "comment-15267318"
        },
        {
            "date": "2016-05-02T20:05:13+0000",
            "author": "Scott Blum",
            "content": "Interested, but no bandwidth until we finish the other one.  ",
            "id": "comment-15267392"
        },
        {
            "date": "2016-05-02T20:07:29+0000",
            "author": "Alan Woodward",
            "content": "Right, one major internal ZK refactoring at a time... ",
            "id": "comment-15267398"
        },
        {
            "date": "2016-10-18T12:27:58+0000",
            "author": "Alan Woodward",
            "content": "See SOLR-9659 for a different way of solving this. ",
            "id": "comment-15585340"
        },
        {
            "date": "2016-10-18T13:45:49+0000",
            "author": "Keith Laban",
            "content": "It would be great if we could use this for any generic zookeeper state changes. There still a big pain point in trying to get notified for rest managed resources changing, it requires building a zk watcher strategy from scratch. ",
            "id": "comment-15585493"
        },
        {
            "date": "2016-10-18T14:01:29+0000",
            "author": "Alan Woodward",
            "content": "Keith Laban see SOLR-9659! ",
            "id": "comment-15585525"
        }
    ]
}