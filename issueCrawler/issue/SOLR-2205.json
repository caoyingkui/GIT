{
    "id": "SOLR-2205",
    "title": "Grouping performance improvements",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "3.3",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This issue is dedicated to the performance of the grouping functionality.\n\nI've noticed that the code is not really performing on large indexes. Doing a search (q=:) with grouping on an index from around 5M documents took around one second on my local development machine. We had to support grouping on an index that holds around 50M documents per machine, so we made some changes and were able to happily serve that amount of documents. Patch will follow soon.",
    "attachments": {
        "SOLR-2205.patch": "https://issues.apache.org/jira/secure/attachment/12458266/SOLR-2205.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12925890",
            "date": "2010-10-28T18:05:19+0000",
            "content": "Cool!\nAre these a different set of optimizations than those already proposed: SOLR-2069, SOLR-2068,  SOLR-2070, and the rather unspecific SOLR-2071? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12925897",
            "date": "2010-10-28T18:15:39+0000",
            "content": "The code I initially wrote was on the pre-flex code base. So I took that code and made it work for the trunk. So someone should definitely check it out if all the changes I made are the right changes. \n\nI tested this patch out on my local machine and when doing a search (q=:) on an index that holds 10M documents, the searchtime was around 300 ms whereas the same query without the code changes had a searchtime of around 2.8 seconds.  So that is +/- 9 times faster. These numbers are based on a basic search, so no facets or highlighting etc.\n\nI found out that the following piece of code took relatively a lot time to execute (if it was executed millions and millions of times, you started to notice):\n\nfiller.fillValue(doc);\ngroupMap.get(mval);\n\n \n\nThis fragment is used in the TopGroupCollector and Phase2GroupCollector. I put some code in front of it the easily exclude documents that are not competitive.  This code in both classes is cheaper then using the fragment above.\n\nSince I ported the code from pre-flex code I needed to make some changes to it and support  grouping by function. The code I initially wrote only needed to support grouping on a field. Since the trunk also supports grouping by function query, I added two methods to DocValues and implemented these methods in three subclasses. I don't know if this particular change is good, but it works. I think that it would be really helpful is someone can give feedback on this particular change. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12925899",
            "date": "2010-10-28T18:21:06+0000",
            "content": "Are these a different set of optimizations than those already proposed: SOLR-2069, SOLR-2068, SOLR-2070, and the rather unspecific SOLR-2071?\n\nThis patch is more a general improvement fix and I think wouldn't really fit in any of these issue. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12925900",
            "date": "2010-10-28T18:23:17+0000",
            "content": "the searchtime was around 300 ms whereas the same query without the code changes\nBTW this doesn't apply to the first search. The first search is slow, but by configuring query listeners the first user wouldn't notice. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12925921",
            "date": "2010-10-28T19:20:42+0000",
            "content": "Oh, nice - I hadn't thought of checking if a doc is competitive before looking up it's group!\n\nThe ord part is related to SOLR-2068 - I had worked out a per-segment algorithm a few months ago, but haven't had time to implement.  It looks like this one operates at the top-level reader.  That can be better for static indexes (those that don't change much), but isn't as good for NRT.  Also, it looks like this will double memory usage (FieldCache per-segment as the native type, plus FieldCache at the top-level for the ords and string values).  Something like that should be an option?\n\n// I believe that the JVM internally will represent a boolean inside a boolean array as a bit...\n\nNot that I've heard.  It's internally represented as a byte[], so we would be better off using an OpenBitSet - or even better, a sparse set since the number of elements will be very small compared to the possible number of groups. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12925928",
            "date": "2010-10-28T20:09:14+0000",
            "content": "...... values). Something like that should be an option?\nSo we'd have two different implementations of Phase2GroupCollector?\n\nNot that I've heard. It's internally represented as a byte[], so we would be better off using an OpenBitSet - or even better, a sparse set since the....\nThen we should do that. Maybe we should then move that part of the patch to SOLR-2068 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12926160",
            "date": "2010-10-29T03:47:50+0000",
            "content": "I've committed the first part of this patch that compares with the smallest group first (before finding the group of the current doc).  I also committed the addition of the ord methods to DocValues (we need something like that anyway).\n\nHere's an additional patch that removes the second (redundant) comparison with the lowest group (in addition to some other minor tweaks like removing the boolean). "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12926331",
            "date": "2010-10-29T16:25:56+0000",
            "content": "Here's an additional patch that removes the second (redundant) comparison with the lowest group (in addition to some other minor tweaks like removing the boolean).\nNice! Now it's even faster. Average search time is now 250 ms (measured on my test data set).\n\nI also committed the addition of the ord methods to DocValues\nIs see that the changes the DocValues impl in StrField class is not included. Is there a reason for that?\n\nShould I put the rest of my initial patch (changes to Phase2GroupCollector) to SOLR-2068? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12926334",
            "date": "2010-10-29T16:30:48+0000",
            "content": "Is see that the changes the DocValues impl in StrField class is not included. Is there a reason for that?\n\nProbably just user error... I'll check it out.\n\nShould I put the rest of my initial patch (changes to Phase2GroupCollector) to SOLR-2068?\n\nSure! "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12926342",
            "date": "2010-10-29T16:46:22+0000",
            "content": "I think the only thing to do for the issue is to also port the changes made in TopGroupCollector to TopGroupSortCollector. If that is done I think we can close this issue. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12926350",
            "date": "2010-10-29T17:04:52+0000",
            "content": "I think the only thing to do for the issue is to also port the changes made in TopGroupCollector to TopGroupSortCollector.\n\nIs that a valid optimization for TopGroupSortCollector though?  Given that the sorts are different, and the sort between groups is based on the first document by group, a document could not be competitive according to \"sort\", but could pop to the top of an existing group via \"group.sort\" and thus cause that group to move down in the rankings.\n\nThis stuff is tricky enough, we still really need to develop some good random tests to verify any optimizations + corner cases. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12926405",
            "date": "2010-10-29T18:47:36+0000",
            "content": "I wrote that in a hurry, but group.sort should be used. But you've to keep track of the lowest first document of the top x groups in a separate field. If it less competitive then that you can neglect the incoming doc, right? Obviously then you need to update the lowest first document if the incoming doc is more competitive. So the code is different then what is in the TopGroupCollector.\n\nwe still really need to develop some good random tests to verify any optimizations + corner case\nI agree with that, we need more tests that show that the grouping functionality is working properly. Should we put that in this issue or create an separate issue for this? "
        },
        {
            "author": "tom liu",
            "id": "comment-12933335",
            "date": "2010-11-18T06:58:29+0000",
            "content": "Now, group Search do not support distributed query.\n\nanyone else, has already been meet this? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13167494",
            "date": "2011-12-12T13:53:25+0000",
            "content": "Fixed. The proposed changes got into Solr 3x and 4.0-dev. "
        }
    ]
}