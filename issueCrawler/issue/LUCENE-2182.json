{
    "id": "LUCENE-2182",
    "title": "DEFAULT_ATTRIBUTE_FACTORY faills to load implementation class when iterface comes from different classloader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.2",
            "3.0.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "2.9.1,                                            3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This is a followup for http://www.lucidimagination.com/search/document/1724fcb3712bafba/using_the_new_tokenizer_api_from_a_jar_file:\n\nThe DEFAULT_ATTRIBUTE_FACTORY should load the implementation class for a given attribute interface from the same classloader like the attribute interface. The current code loads it from the classloader of the lucene-core.jar file. In solr this fails when the interface is in a JAR file coming from the plugins folder. \n\nThe interface is loaded correctly, because the addAttribute(FooAttribute.class) loads the FooAttribute.class from the plugin code and this with success. But as addAttribute tries to load the class from its local lucene-core.jar classloader it will not find the attribute.\n\nThe fix is to tell Class.forName to use the classloader of the corresponding interface, which is the correct way to handle it, as the impl and the attribute should always be in the same classloader and file.\n\nI hope I can somehow add a test for that.",
    "attachments": {
        "LUCENE-2182.patch": "https://issues.apache.org/jira/secure/attachment/12429010/LUCENE-2182.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-28T09:59:12+0000",
            "content": "The patch.\n\nHello Solr committers: Should we backport this to 2.9 and 3.0 (which is easy)? ",
            "author": "Uwe Schindler",
            "id": "comment-12794791"
        },
        {
            "date": "2009-12-28T10:36:52+0000",
            "content": "In solr this fails when the interface is in a JAR file coming from the plugins folder\n\nWhich interface are we talking about? ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12794797"
        },
        {
            "date": "2009-12-28T10:51:24+0000",
            "content": "Shalin:\n\nIf you use the new AttributeSource API for TokenStreams and define an own attribute (like the person did), you have to define two classes, see:\nhttp://lucene.apache.org/java/3_0_0/api/core/org/apache/lucene/analysis/package-summary.html -> New TokenStream API -> defining own attribute.\n\nYou define an interface for your attribute and also define an implementation class. The TokenStream will call addAttribute(CustomAttribute.class) and the default attribute factory inside Lucene will then load the \"default\" implementation class \"CustomAttributeImpl\". This is done via reflection and Class.forName.\n\nIf the interface is defined in an own Classloader (like the interface and impl is put into the solr plugins folder), the interface itsself is loaded correctly (because instantiated by the plugin's tokenstream code). But the code inside AttributeSource then tries to load the Impl class with forName(attributeClassName + \"Impl\"). As forName per default uses the classloader from the calling class, this fails, because th classloader lucene was loaded with does not know the plugins folder.\n\nTherefore, the implementation class must be loaded with the same classloader as the interface Class<? extends Attribute> object passed into addAttribute().\n\nThats not a failure of Solr, but it the mechanism prevents putting own attribute impls into plugins of solr. They must be in the lib folder where lucene-core.jar is. By this patch it is more consistent and enforces, that the impl class comes from the same source as the base attribute. ",
            "author": "Uwe Schindler",
            "id": "comment-12794799"
        },
        {
            "date": "2009-12-28T10:59:15+0000",
            "content": "I see, thanks for the explanation!\n\nI agree, it would be nice if we can back port this to 2.9 if you have some spare cycles. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12794800"
        },
        {
            "date": "2009-12-28T15:51:36+0000",
            "content": "Looks like a good solution!\n\nThanks for taking care of this, Uwe!\n\n\nShould we backport this to 2.9 and 3.0 (which is easy)?\n\n+1 ",
            "author": "Michael Busch",
            "id": "comment-12794830"
        },
        {
            "date": "2009-12-28T22:21:05+0000",
            "content": "I will commit and backport tomorrow! ",
            "author": "Uwe Schindler",
            "id": "comment-12794949"
        },
        {
            "date": "2009-12-29T11:15:25+0000",
            "content": "Committed trunk revision: 894348\nCommitted Lucene 3.0 revision: 894351\nCommitted Lucene 2.9 revision: 894352 ",
            "author": "Uwe Schindler",
            "id": "comment-12795037"
        }
    ]
}