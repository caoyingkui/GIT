{
    "id": "SOLR-7061",
    "title": "Cross-Entity Variable Resolving and Arguments for ScriptTransformer Functions",
    "details": {
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Script Transformer has been widely used to modify the value of columns of selected rows from targeting data source (such as SQL Database) based on specific logics, before writing to Solr as documents. However, current implementation has the following limitations:\n1. It is not possible to pass constant values or resolved variables (e.g., ${TABLE.COLUMN} ) as arguments to a script function.\n2. Cross-entity row data exchange is not possible as well.\n\nIn our use case, we have complex nested entities and rely heavily on the script functions to transform table rows while doing data import. Sometimes for each single document, we need to get the selected column values from a parent entity into current entity for doing value transformation and applying if-else logics. To achieve this, we need to join with others tables in the SQL of current entity, which is quite resource-consuming, especially for large tables.\n\nTherefore, we have done some improvements to allow us to pass selected column values from entity A to another entity B as its function arguments by utilizing variable resolver.\n\nHere is an example about how it works. Suppose we have the following configuration:\n\n\n<dataConfig>\n    <dataSource name=\"ProductDB\" \n                driver=\"oracle.jdbc.driver.OracleDriver\" \n                url=\"jdbc:oracle:thin:@${dataimporter.request.host}:\n                       ${dataimporter.request.port}/${dataimporter.request.name}\" \n                user=\"${dataimporter.request.user}\" \n                password=\"${dataimporter.request.password}\" \n                autoCommit=\"true\"/>\n    <!-- ScriptTransformer functions -->\n    <script><![CDATA[\n        function processItemRow(row, resolvedVars) {\n            var isOnSale = resolvedVars.get(\"${PRODUCT.IS_ONSALE}\");\n            var discount = resolvedVars.get(\"${PRODUCT.DISCOUNT_RATE}\");\n            var price = row.get(\"PRICE\");\n            \n            if(isOnSale) {\n              row.put(\"PRICE\", price * discount);\n            }\n            else\n              row.put(\"PRICE\", price);\n            \n            return row;\n        }\n        ]]>\n    </script>\n    <document name=\"EC_SHOP\">\n        <entity dataSource=\"ProductDB\" name=\"PRODUCT\" \n                query=\"SELECT PRODUCT_ID, TITLE, IS_ONSALE, DISCOUNT_RATE FROM PRODUCT\">\n            <field column=\"PRODUCT_ID\" name=\"PRODUCT_ID\"/>\n            <field column=\"TITLE\" name=\"TITLE\"/>\n            <field column=\"IS_ONSALE\" name=\"IS_ONSALE\"/>\n            <field column=\"DISCOUNT_RATE\" name=\"DISCOUNT_RATE\"/>               \n            \n            <entity dataSource=\"ProductDB\" name=\"ITEM\" \n                    transformer=\"script:processItemRow(${PRODUCT.IS_ONSALE},${PRODUCT.DISCOUNT_RATE})\"\n                    query=\"SELECT PRICE FROM ITEM WHERE PRODUCT_ID = '${PRODUCT.PRODUCT_ID}'\">\n                <field column=\"PRICE\" name=\"PRICE\"/>\n            </entity>\n        </entity>\n    </document>\n</dataConfig>\n\n\n\n\nAs demonstrated above, now we can get access to the value of column IS_ONSALE and DISCOUNT_RATE of table PRODUCT from the entity of table ITEM by passing ${PRODUCT.IS_ONSALE} and ${PRODUCT.DISCOUNT_RATE} as arguments of the function processItemRow to determine if we should give some discounts for the production price. The signature of function has a secondary argument (named resolvedVars here) for passing the map of column values resolved from other previous entities.\n\nThis improvement gives more flexibility for script functions to exchange row data cross entities (even cross datasource) and do more complex processing for entity rows.",
    "attachments": {
        "SOLR-7061.patch": "https://issues.apache.org/jira/secure/attachment/12695248/SOLR-7061.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-29T12:21:24+0000",
            "author": "Noble Paul",
            "content": "IIRC you can use ctx.setSessionAttribute( name, val,  scope) and scope can be document, entity, global , solrcore ",
            "id": "comment-14296764"
        },
        {
            "date": "2015-01-29T16:23:15+0000",
            "author": "Mark Peng",
            "content": "Noble Paul Yes, the abstract class Context provides setSessionAttribute(name, val, scope) to store row data in different levels. We had tried to utilize this, but found some issues:\nWe want to cache as minimum data as possible for each function. ContextImpl uses a HashMap<String, Object> to store document-level data in DocWrapper for all entities, no matter if they will be used by any function or not, which may cache unnecessary values in memory. \n\nOnly the variables used as function arguments of current ScriptTransformer are required to be cached. Caches are removed right after the end of each document. For example, the above will only cache ${PRODUCT.IS_ONSALE} and ${PRODUCT.DISCOUNT_RATE} used by the function in map.\n\nWe choose a simpler design to keep a dedicated ordered map for each ScriptTransformer, so they can maintain their own mapping of resolved variables and function arguments using minor resource. An isResolved flag is used to avoid resolving same variable multiple times if current entity has multiple rows. The change scope of current implementation is also minimized (only affects ScriptTransformer and EntityProcessorWrapper).\n ",
            "id": "comment-14297082"
        },
        {
            "date": "2015-02-03T10:11:57+0000",
            "author": "Noble Paul",
            "content": "We want to cache as minimum data as possible for each function. ContextImpl uses a HashMap<String, Object> to store document-level data in DocWrapper for all entities, no matter if they will be used by any function or not, which may cache unnecessary values in memory.\n\nI fail to understand this fully. Th context only stores the values you explicitly set. So where are the unnecessary values coming from? ",
            "id": "comment-14303038"
        }
    ]
}