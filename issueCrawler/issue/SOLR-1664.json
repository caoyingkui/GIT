{
    "id": "SOLR-1664",
    "title": "Some Methods in FieldType actually should be in SchemaField",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The following methods are only overridable from FieldType. \n\npublic Field createField(SchemaField field, String externalVal, float boost) ;\nprotected Field.TermVector getFieldTermVec(SchemaField field,String internalVal) ;\nprotected Field.Store getFieldStore(SchemaField field,String internalVal);\nprotected Field.Index getFieldIndex(SchemaField field,String internalVal);\npublic ValueSource getValueSource(SchemaField field, QParser parser);\npublic Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) ;\n\n\nif there is anything specific to be done on a per-field basis it is not possible. if we allow overriding SchemaField it will be more flexible.\n\nI hope this can make it simpler to implement SOLR-1131\n\nSo ,there are two ways of overriding a functionality.\n\n\tOverride Fieldtype#createSchemaField() and provide new implementation of SchemaField\n\tOverride methods from FieldType itself(if the behavior is not per field ) as it is now\n\n\n\nSchemaField is made non-final and Solr only invokes methods on SchemaField and not FieldType directly",
    "attachments": {
        "SOLR-1664.patch": "https://issues.apache.org/jira/secure/attachment/12428280/SOLR-1664.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12791864",
            "date": "2009-12-17T10:06:15+0000",
            "content": "make SchemaField pluggable "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12791884",
            "date": "2009-12-17T11:33:45+0000",
            "content": "createField is already just a pass through to the type.  I'm not so sure about making these changes just yet.  Let's see how SOLR-1131 plays out.  In my testing, the concerns over that field creation are minimal.  It's cheaper than a dynamic field. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12791892",
            "date": "2009-12-17T11:52:07+0000",
            "content": "It's cheaper than a dynamic field.\n\nI cannot see this point. How can it be cheap when you are creating a new String (the syntehtic name)  for each field for each query and insert?\n\nObject creation is usually fast but ends up consuming a lot of memory. This can enable us to have an efficient design "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12791911",
            "date": "2009-12-17T13:09:09+0000",
            "content": "I've got a new patch that reduces the string allocation costs.  These objects are very short lived.  I did some profiling and it barely even measures a blip. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12791927",
            "date": "2009-12-17T13:44:03+0000",
            "content": "I think SchemaField needs to remain final.  I don't think we should be allowing people to extend SchemaField. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12791928",
            "date": "2009-12-17T13:47:33+0000",
            "content": "The questions I have are.\n\nIs this a good enhancement to have? Does it not enable us to have cleaner implementation  of usecases like  SOLR-1131 ?\n\nThese objects are very short lived.\n\nIf we can avoid the creation of Objects that is definitely a better solution. \n\nAre we trying to avoid this because this is not a correct solution?\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12791931",
            "date": "2009-12-17T13:58:39+0000",
            "content": "I think SchemaField needs to remain final. I don't think we should be allowing people to extend SchemaField.\n\nI see no advantage of SchemaField being final.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12791933",
            "date": "2009-12-17T13:59:18+0000",
            "content": "SchemaField is final and very light weight for a reason - dynamic field creation.  All polymorphic behavior goes through the FieldType.\nIt's also the case that it can be safely published to other threads (so we could easily have a cache of dynamic fields if it ever turned out to be a significant cost).\n\nChanging this design for the same of avoiding two string catenations during the creation of a query really doesn't seem to make sense or meet the bar.\n\nIt also doesn't seem to make much sense to split polymorphic behavior between FieldType and SchemaField.  Existing code that used FieldType methods could be getting the wrong implementation.  What could make sense is having a SchemaFieldFactory and a SchemaField, with all of the polymorphic behavior encapsulated in SchemaField.  The factory would just be responsible for argument parsing and SchemaField creation (like our TokenFilterFactory today).  That's a relatively significant change though... not something we could contemplate for 1.5? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12791934",
            "date": "2009-12-17T14:00:25+0000",
            "content": "It is not correct b/c SchemaField should be final.  What does it even mean to change a SchemaField?  Are the results persisted back to the file?  What does it mean to change the name in the middle of indexing?  If you make it public, those are all things people could do. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12791935",
            "date": "2009-12-17T14:04:38+0000",
            "content": "It's also the case that it can be safely published to other threads (so we could easily have a cache of dynamic fields if it ever turned out to be a significant cost).\n\nI guess you are saying SchemaField should be immutable. I agree with that.  As long as any other implementation is immutable it should be just fine. \n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12791937",
            "date": "2009-12-17T14:09:12+0000",
            "content": "Changing this design for the same of avoiding two string catenations during the creation of a query really doesn't seem to make sense or meet the bar.\n\n\nThese catenations are created during indexing.  I'm about to put up a patch that uses a StringBuilder instead and does more work outside of the loop. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12791942",
            "date": "2009-12-17T14:13:46+0000",
            "content": "I agree with that. As long as any other implementation is immutable it should be just fine.\n\nRight, but this isn't about SchemaField being final or non-final, as it only makes sense to make it non-final if you change a bunch of other stuff.  This is about changing the design of FieldType and SchemaField, and it's too big of a change for 1.5, right? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12791946",
            "date": "2009-12-17T14:27:19+0000",
            "content": "it only makes sense to make it non-final if you change a bunch of other stuff.\n\nYes. So if some FieldType needs to change the behavior (such as createField, getFieldQuery) on a per-field basis ,there is no straight way to do it. So far there haven't been any. But SOLR-1131 opens the door for more such usecasee. if we don't do it now , it may come up later.\n\n\nThis is about changing the design of FieldType and SchemaField, and it's too big of a change for 1.5, right?\n\nIt did not make any non-backcompat changes other than making some  public methods protected . So I am not sure if it qualifies as too big a change.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12792041",
            "date": "2009-12-17T18:14:35+0000",
            "content": "It did not make any non-backcompat changes other than making some public methods protected . So I am not sure if it qualifies as too big a change.\n\nIf a SchemaField changes the behavior (via subclassing) then everything must go through SchemaField and not FieldType.  That's a sizeable change. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12792347",
            "date": "2009-12-18T05:18:45+0000",
            "content": "Then everything must go through SchemaField and not FieldType. That's a sizeable change.\n\nyes, But for all the existing components that arrangement can continue to work (by keeping the methods public, though it is not recommended  ) . Only the new components which override SchemaField will have problem. \n\nThe point is , if we wish to go down this path , this is the best opportunity to do that because, SOLR-1131 is introducing wholesale changes to the FieldType API and this can be baked into the API together. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12792498",
            "date": "2009-12-18T14:54:17+0000",
            "content": "The point is , if we wish to go down this path , this is the best opportunity to do that because, SOLR-1131 is introducing wholesale changes to the FieldType API\n\nI'm reviewing/changing SOLR-1131 now to actually limit the public interface changes to two methods: isPolyFIeld() and createFields(). It's not being changed much at all.\n\nI'm not against this change, but I think this issue should stand on it's own and not be linked to SOLR-1131. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12792503",
            "date": "2009-12-18T15:02:35+0000",
            "content": "this issue should stand on it's own and not be linked to SOLR-1131.\n\nagreed. It is just that SOLR-1131 has serendipitously  exposed a shortcoming in the API . "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12792780",
            "date": "2009-12-19T05:03:35+0000",
            "content": "\n\n\tAre we in consensus that this is going in?\n\tAny further changes required for the patch?\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12792855",
            "date": "2009-12-19T15:44:25+0000",
            "content": "I like the direction I think... the current split between SchemaField and FieldType forces one to often use the following pattern:\nschemaField.type().soSomething(schemaField,...)\n\nI do think FieldType should basically become the factory for SchemaField.\nFieldType methods not having to do with parsing parameters and creating SchemaFields should be deprecated and those we want to keep (i.e. not all of them) should be moved to SchemaField.  All creation of SchemaField instances should go through the appropriate FieldType.  All code in Solr that dispatches through FieldType should be changed to dispatch through the SchemaField instance.\n\nThis should lead to slightly cleaner code overall.  The downside is really that it doesn't end up accomplish much at all for the end user of Solr. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12792885",
            "date": "2009-12-19T18:44:55+0000",
            "content": "\nyes. cleaner code is definitely a plus "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12796151",
            "date": "2010-01-04T11:52:25+0000",
            "content": "updated to trunk "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872492",
            "date": "2010-05-27T22:06:29+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043698",
            "date": "2011-06-03T16:46:36+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106326",
            "date": "2011-09-16T14:50:35+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234754",
            "date": "2012-03-21T18:09:12+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717165",
            "date": "2013-07-23T18:47:19+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971292",
            "date": "2014-04-16T12:57:41+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}