{
    "id": "SOLR-1773",
    "title": "Field Collapsing (lightweight version)",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "I'd like to start another approach for field collapsing suggested by Yonik on 19/Dec/09 at SOLR-236. Re-posting the idea:\n\n\n=================== two pass collapsing algorithm for collapse.aggregate=max ====================\nFirst pass: pretend that collapseCount=1\n  - Use a TreeSet as  a priority queue since one can remove and insert entries.\n  - A HashMap<Key,TreeSetEntry> will be used to map from collapse group to top entry in the TreeSet\n  - compare new doc with smallest element in treeset.  If smaller discard and go to the next doc.\n  - If new doc is bigger, look up it's group.  Use the Map to find if the group has been added to the TreeSet and add it if not.\n  - If the new bigger doc is already in the TreeSet, compare with the document in that group.  If bigger, update the node,\n    remove and re-add to the TreeSet to re-sort.\n\nefficiency: the treeset and hashmap are both only the size of the top number of docs we are looking at (10 for instance)\nWe will now have the top 10 documents collapsed by the right field with a collapseCount of 1.  Put another way, we have the top 10 groups.\n\nSecond pass (if collapseCount>1):\n - create a priority queue for each group (10) of size collapseCount\n - re-execute the query (or if the sort within the collapse groups does not involve score, we could just use the docids gathered during phase 1)\n - for each document, find it's appropriate priority queue and insert\n - optimization: we can use the previous info from phase1 to even avoid creating a priority queue if no other items matched.\n\nSo instead of creating collapse groups for every group in the set (as is done now?), we create it for only 10 groups.\nInstead of collecting the score for every document in the set (40MB per request for a 10M doc index is *big*) we re-execute the query if needed.\nWe could optionally store the score as is done now... but I bet aggregate throughput on large indexes would be better by just re-executing.\n\nOther thought: we could also cache the first phase in the query cache which would allow one to quickly move to the 2nd phase for any collapseCount.\n\n\n\nThe restriction is:\n\n\none would not be able to tell the total number of collapsed docs, or the total number of hits (or the DocSet) after collapsing. So only collapse.facet=before would be supported.",
    "attachments": {
        "SOLR-1773.patch": "https://issues.apache.org/jira/secure/attachment/12435795/SOLR-1773.patch",
        "LOADTEST.patch": "https://issues.apache.org/jira/secure/attachment/12435798/LOADTEST.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12833491",
            "date": "2010-02-14T02:09:40+0000",
            "content": "The first draft, untested patch. Use for PoC only. In this patch, I hard-coded sort field by using java.util.Comparator. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12833495",
            "date": "2010-02-14T03:18:12+0000",
            "content": "Random comment on the patch:\n\n\n\tTimeAllowed not supported\n\tcache not supported\n\tdistributed search is not supported\n\tsort field is hard-coded in the patch\n\tcollapse.type=adjacent is not supported\n\tcollapse.aggregate is not supported (but supportable)\n\tnot yet, but collapse.sort can be supported to specify sort criteria in collapse group\n\n\n\nsupported parameters:\n\n\n\n\ncollapse\nset to on to use field collapsing\n\n\ncollapse.field\nfield name to collapse (required)\n\n\ncollapse.limit\nmaximum number of collapsed docs to return in each collapse group. default is 0.\n\n\ncollapse.fl\ncomma- or space- delimited list of fields to return. multiValued field and TrieField are not supported yet\n\n\n\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12833499",
            "date": "2010-02-14T03:26:27+0000",
            "content": "A very rough/simple load test patch attached.\n\nQTime average of 1,000 times random queries were:\n\n\n\n\nnum docs in index\nSOLR-236\nSOLR-1773\n\n\n1M\n321 ms\n185ms\n\n\n10M\n2,914 ms \n1,642 ms\n\n\n\n\n\n I needed to set -Xmx1024m in this case, though 512m for other cases, to avoid OOM.\n\nSOLR-1773 is 43% faster. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12833524",
            "date": "2010-02-14T07:43:20+0000",
            "content": "Koji, have you looked at SOLR-1682? I gave an implementation of the same approach but that too is only a PoC. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12833527",
            "date": "2010-02-14T08:16:23+0000",
            "content": "Oops, I've glanced at SOLR-236 related issues, but I thought it was for finalize response format from Description. I'll look into SOLR-1682. Thanks!  "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12914781",
            "date": "2010-09-25T07:49:23+0000",
            "content": "closed as duplicate of SOLR-236, SOLR-1682. "
        }
    ]
}