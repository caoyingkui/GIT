{
    "id": "LUCENE-1385",
    "title": "IndexReader.isIndexCurrent()==false -> IndexReader.reopen() -> still index not current",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.3.2",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I found a strange error occurring with IndexReader.reopen. It is not always reproduceable, it only happens sometimes, but strangely on all my computers with different platforms at the same time. Maybe has something to to with the timestamp used in index versions.\n\nI have a search server using an IndexReader, that is openend in webapp startup and should stay open. Every half an hour this web application checks, if the index is still current using IndexReader.isCurrent(). When a parallel job that indexes documents (in another virtual machine) and modifies the indexes, isCurrent() return TRUE. The half-hourly cron-job then uses IndexReader.reopen() to reopen the index. But sometimes, directly after reopen() the Index is still not current (and no updates occur). Again calling reopen does not change it, too. Searching on the index shows all new/updated documents, but isCurrent() still return false. The problem with this is, that now the index is reopened all the time, because the detection of a current index does not work any more.\n\nI have now a workaround in my code to handle this: After calling IndexReader.reopen(), I test for IndexReader.isCurrent(), and if not, I close it hard and open a new instance.\n\nMost times IndexReader.reopen works correct, but sometimes this error occurs. Looking into the code of reopen(), I realized, that there is some extra check, if the Index has modifications, and if yes the reopen call returns the original reader (this maybe the problem I have). But the IndexReader is only used for searching, no updates occur.\n\nMy questions: Why is there this check for modifications in reopen()? Why does this happen only at certain times on all my servers with different platforms?\nI want to use reopen, because in future, when the new FieldCache will be reopen-aware and does not everytime rebuild the full cache, it will be very important, to have this fixed. At the moment, I have no problem with the case, that reopen may fail and I have to do a rough reopen.",
    "attachments": {
        "LUCENE-1385.patch": "https://issues.apache.org/jira/secure/attachment/12390120/LUCENE-1385.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-09-12T19:01:58+0000",
            "content": "I forget to mention: When index was modified and is not current and this error occurs, reopen() returns the IndexReader itsself (and this is why isCurrent() still returns false). ",
            "author": "Uwe Schindler",
            "id": "comment-12630658"
        },
        {
            "date": "2008-09-15T12:38:47+0000",
            "content": "\n\nSo it sounds like you get a situation, on many computers, whereby when you call IndexReader.isCurrent on an instance of IndexReader that you have open, it returns false.  Yet when you call reopen, it returns back the same reader?  Is that right?\n\nThat's definitely strange.\n\nAre you certain you are not making any changes with the reader (deletion or setNorm or undeleteAll)?  I can see one case where if you did make changes with the reader instance, and you also forcefully unlock the index (using IndexReader.unlock or IndexWriter.unlock (on trunk)) that you could get yourself into this exact situation.  But if you're not making any changes with the reader I still can't explain it.\n\nWhy is there this check for modifications in reopen()?\n\nThis is because only one \"writer\" is allowed to make changes at a time.  If an IndexReader has made changes (eg deletions or setting norms), which makes it a \"writer\" until it's closed, then, by definition/design it is current because no other process is allowed to make changes to the index at the same time.  So we return the current reader right away from reopen in that case.\n\nHow are you sharing your index (what shared filesystem/OS)?  (you said \"in another virtual machine a parallel job updates the index\")\n\nSearching on the index shows all new/updated documents, but isCurrent() still return false\n\nThis really confuses me: if reopen() had returned the same reader, how can it then also show all the new/updated documents?\n\nDo you know whether the index has 1 or more than 1 segments when this problem is happening?\n\nThe half-hourly cron-job then uses IndexReader.reopen() to reopen the index\n\nHow do you tie in a cron-job into getting the IndexReader in your search server to call reopen? ",
            "author": "Michael McCandless",
            "id": "comment-12631013"
        },
        {
            "date": "2008-09-15T13:41:47+0000",
            "content": "So it sounds like you get a situation, on many computers, whereby when you call IndexReader.isCurrent on an instance of IndexReader that you have open, it returns false. Yet when you call reopen, it returns back the same reader? Is that right?\n\nThat's exactly what happens.\n\nAre you certain you are not making any changes with the reader (deletion or setNorm or undeleteAll)? I can see one case where if you did make changes with the reader instance, and you also forcefully unlock the index (using IndexReader.unlock or IndexWriter.unlock (on trunk)) that you could get yourself into this exact situation. But if you're not making any changes with the reader I still can't explain it.\n\nThe IndexReader is not used for writing. It is used only with an IndexSearcher that does a search with TopDocs and HitCollector without updating anything. Only stored fields are read.\n\nHow are you sharing your index (what shared filesystem/OS)? (you said \"in another virtual machine a parallel job updates the index\")\n\nI have two JVM processes: One web server with web application that does the searches and hits the bug. Another JVM does the index updates. Filesystem is UFS, EXT3 or NTFS (depending on platform). All is local.\n\nThe interesting thing with this bug is:\nThe three machines use different indexes. Windows is my testing machine, Solaris one production and Linux another production server, all using local filesystems for indexes. The interesting thing is, that the bug does not show up very long time, but suddenly it shows up on all three machines (which are independent). This is why I said: Maybe it is the timestamp in the index version that for example wraps around 2^31 or something like that. All three machines are not related to each other, but the bug happens at the same time.\n\nThis really confuses me: if reopen() had returned the same reader, how can it then also show all the new/updated documents? Do you know whether the index has 1 or more than 1 segments when this problem is happening?\n\nSorry, this was wrong. When reopen returns the same reader it is unchanged, you are right! \n\nHow do you tie in a cron-job into getting the IndexReader in your search server to call reopen?\n\nIts not a \"real cronjob\" its just a task in my web application that is executed each half hour: check if IndexReader is current and if not, reopen it. This is what the \"cron job\" is doing (with my fix for the problem):\n\nif (!indexReader.isCurrent()) {\n\tIndexReader n=indexReader.reopen();\n\tif (n!=indexReader) {\n\t\ttry \n{\n\t\t\t// reader was really reopened\n\t\t\tindexReader.close();\n\t\t}\n finally \n{\n\t\t\tindexReader=n;\n\t\t}\n\t} else {\n\t\tlog.warn(\"Index was reopened but is still not up-to-date (maybe a bug in Lucene, we try to investigate this). Doing a hard reopen.\");\n\t\tn=IndexReader.open(....);\n\t\ttry {\n\t\t\tindexReader.close();\n\t\t} finally {\t\t\tindexReader=n;\t\t}\n\t}\n} ",
            "author": "Uwe Schindler",
            "id": "comment-12631023"
        },
        {
            "date": "2008-09-15T16:19:22+0000",
            "content": "The IndexReader is not used for writing\n\nOK.  And also you never use unLock method to forcefully remove the write.lock, right?\n\nThe isCurrent() method loads the version from the latest segments file and returns true if that version != its current segmentInfos version.  That version is initially set to System.currentTimeMillis() when an index is first created, and is then incremented by 1 every time a writer commits a change to the index.  It's stored as a long so it shouldn't be overflowing (so soon .\n\nI'll attach a patch shortly with some added diagnostics. ",
            "author": "Michael McCandless",
            "id": "comment-12631061"
        },
        {
            "date": "2008-09-15T16:20:42+0000",
            "content": "Uwe, this patch just adds a bunch of System.out.println's (you can change to any other kind of logging if needed).  Can you apply this patch to 2.3, build the Lucene JAR, and get the problem to happen, then post the logs? ",
            "author": "Michael McCandless",
            "id": "comment-12631062"
        },
        {
            "date": "2008-09-16T07:48:14+0000",
            "content": "Hi Michael,\nI will patch my 2.3.2 release in the way you told (using commons-logging) and post you the results, as soon, as the error happens again.\n\nBy the way: How about using some logging (like commons-logging) in Lucene to make it configuraeable and not go through stdout. By this it would be possible to have DEBUG messages like this always in Lucene and you can switch them on/off with your logging config in your web container without patching and recompiling, log4j.properties or what else. I know, its an external dependency, but commons-logging is lightweight and may be bundled. Or slf4j, which is very small... E.g. at the moment I capture IndexWriter messages (setInfoStream()) with a PrintStream filter that generates DEBUG-Messages in commons logging: http://www.panfmp.org/apidocs/de/pangaea/metadataportal/utils/LogUtil.html\nHaving these messages in a logging framework would be very nice. The same with CheckIndex. ",
            "author": "Uwe Schindler",
            "id": "comment-12631289"
        },
        {
            "date": "2008-09-16T09:57:47+0000",
            "content": "How about using some logging (like commons-logging) in Lucene to make it configuraeable and not go through stdout\n\nI'm torn on how necessary this is for Lucene at this point.  I think someday Lucene may cutover to a logging framework, but for now, as far as I can tell, people rarely need to turn on logging in Lucene, except when debugging something strange going on (which is what we are doing, here, with temporary additions).  I think fully flexible logging is more important at the application level.  And you seem to have a healthy workaround (deriving a PrintStream interface from commons logging to pass to IndexWriter). ",
            "author": "Michael McCandless",
            "id": "comment-12631316"
        },
        {
            "date": "2008-09-21T17:30:13+0000",
            "content": "I hit the bug yersterday again. Here the log from the reopen() with some comments:\n\n2008-09-20 06:09:19,354 INFO de.pangaea.metadataportal.search.LuceneCache - Reopening index 'datasets-pangaea-iodp'.\n\nHere the function reopen() is called:\n\n2008-09-20 06:09:19,354 DEBUG org.apache.lucene.index.DirectoryIndexReader#org.apache.lucene.store.MMapDirectory@/home/sedis/metadataportal/lucene-store/datasets-pangaea-iodp - isCurrent(): indexVersion=1220348528579 myVersion=1220348528578\n2008-09-20 06:09:19,355 DEBUG org.apache.lucene.index.DirectoryIndexReader#org.apache.lucene.store.MMapDirectory@/home/sedis/metadataportal/lucene-store/datasets-pangaea-iodp - reopen(): do reopen this=org.apache.lucene.index.SegmentReader@44036e4e\n2008-09-20 06:09:19,355 DEBUG org.apache.lucene.index.DirectoryIndexReader#org.apache.lucene.store.MMapDirectory@/home/sedis/metadataportal/lucene-store/datasets-pangaea-iodp - reopen(): segmentsFile=segments_19 version=1220348528579\n2008-09-20 06:09:19,355 DEBUG org.apache.lucene.index.DirectoryIndexReader#org.apache.lucene.store.MMapDirectory@/home/sedis/metadataportal/lucene-store/datasets-pangaea-iodp - reopen(): did not get new reader\n\nHere I test, if Index is current after the reopen():\n\n2008-09-20 06:09:19,355 DEBUG org.apache.lucene.index.DirectoryIndexReader#org.apache.lucene.store.MMapDirectory@/home/sedis/metadataportal/lucene-store/datasets-pangaea-iodp - isCurrent(): indexVersion=1220348528579 myVersion=1220348528578\n2008-09-20 06:09:19,355 WARN de.pangaea.metadataportal.config.SingleIndexConfig - Index 'datasets-pangaea-iodp' was reopened but is still not up-to-date (maybe a bug in Lucene, we try to investigate this). Doing a hard reopen (close & open later). ",
            "author": "Uwe Schindler",
            "id": "comment-12633081"
        },
        {
            "date": "2008-09-21T17:36:02+0000",
            "content": "By the way: The index was optimized after the change by the other process modifying the index, maybe this is the problem. ",
            "author": "Uwe Schindler",
            "id": "comment-12633083"
        },
        {
            "date": "2008-09-21T19:09:23+0000",
            "content": "\nOK I think I found the bug.\n\nFrom those prints above I can see your current IndexReader was opened\nwhen the index had a single segment (so, it's a SegmentReader).  And,\nthe changed index also has a single segment by the same name... so we\ncall SegmentReader.reopenSegment to do the reopening, which has logic\nto return itself if it detects no changes (to norms or deleetions).\nYou are somehow hitting that logic.\n\nThe bug seems to boil down to, somehow, IndexWriter is writing a new\nsegments_N file for a single-segment index yet no actual changes were\nmade to the segment.\n\nThe bug is rather harmless: the reopen call does no real work (just\nreturns your current IndexReader instance), and, it's doing that\nbecause there were in fact no actual changes to the index, just\nsomehow a new segments_N file was written.\n\nI found one case where IndexWriter can do this, which is if you open\nthe writer, call deleteDocuments but no docs actually match the Term,\nthen close the writer.\n\nIs it possible that your indexing job that wakes up and only makes calls\nto deleteDocuments yet no documents matched the deleted terms?  If\nnot... can you capture the details of exactly what your indexing job\ndid just before you hit the reopen failure?  It could be another\n\"no-op\" action in IndexWriter that then writes a segments_N file. ",
            "author": "Michael McCandless",
            "id": "comment-12633089"
        },
        {
            "date": "2008-09-21T19:17:44+0000",
            "content": "I have a test case that shows the above failure.\n\nBut, on 2.4, it does not fail \u2013 the bug was already fixed as a byproduct of LUCENE-1194 (adding delete by query to IndexWriter). ",
            "author": "Michael McCandless",
            "id": "comment-12633091"
        },
        {
            "date": "2008-09-21T21:25:42+0000",
            "content": "Is it possible that your indexing job that wakes up and only makes calls to deleteDocuments yet no documents matched the deleted terms?\n\nI looked into the logs of the indexer: It is doing exactly this. It gets information to delete documents (from an Open Archives Protocol Harvester), but the documents were not in the index. And it does not add new documents, so you are correct.\n\nIt should not happen that the index version changes when no changes (no-op deletes) were done. This is happening rather often in my code. reopen() should check this or better IndexWriter should not change the index version on no-ops.\n\nCurrently I am working on code for the new features in 2.4 and will soon try 2.4 for my project. If LUCENE-1194 solves this, should we then close the bug after I tested my code with 2.4? ",
            "author": "Uwe Schindler",
            "id": "comment-12633096"
        },
        {
            "date": "2008-09-21T21:39:28+0000",
            "content": "\nI looked into the logs of the indexer: It is doing exactly this. \n\nExcellent!  So we have the bug trapped.\n\nor better IndexWriter should not change the index version on no-ops.\n\nRight: in general IndexWriter should not do this.\n\nIf LUCENE-1194 solves this, should we then close the bug after I tested my code with 2.4?\n\nRight.  Please post back after you've tested with 2.4 and then we'll close this as WONTFIX (on 2.3) since it's fixed already in 2.4. ",
            "author": "Michael McCandless",
            "id": "comment-12633097"
        },
        {
            "date": "2008-09-24T14:35:13+0000",
            "content": "I close this bug, as the problem is fixed in Lucene 2.4.\nThanks for investigation, Michael - good work! ",
            "author": "Uwe Schindler",
            "id": "comment-12634153"
        },
        {
            "date": "2008-09-24T14:38:34+0000",
            "content": "Super, thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12634155"
        }
    ]
}