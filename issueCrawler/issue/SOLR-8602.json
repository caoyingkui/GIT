{
    "id": "SOLR-8602",
    "title": "Implement ResultSetImpl.wasNull()",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "ResultSetImpl.wasNull is necessary for SQL clients to display a SQL NULL instead of 0 or false for certain get* commands.",
    "attachments": {
        "SOLR-8602.patch": "https://issues.apache.org/jira/secure/attachment/12784657/SOLR-8602.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-27T15:12:45+0000",
            "author": "Kevin Risden",
            "content": "Implemented wasNull but need to add tests. This will require putting in a new column and null values in the indexr. ",
            "id": "comment-15119412"
        },
        {
            "date": "2016-01-27T21:37:29+0000",
            "author": "Kevin Risden",
            "content": "Improved implementation and added tests ",
            "id": "comment-15120208"
        },
        {
            "date": "2016-01-27T21:44:21+0000",
            "author": "Kevin Risden",
            "content": "Fixed on top of SOLR-8520. ",
            "id": "comment-15120216"
        },
        {
            "date": "2016-01-27T23:24:31+0000",
            "author": "Joel Bernstein",
            "content": "Latest patch is looking good. ",
            "id": "comment-15120391"
        },
        {
            "date": "2016-01-27T23:46:54+0000",
            "author": "Joel Bernstein",
            "content": "I believe in the case of the /export handler numerics will never be null. This is because numerics are read from NumericDocValues which I believe treats nulls as 0. But as you've proven with the test case, the /select handler will return null values for numerics. \n\nI was surprised to see that you could put a null value in an int field and that would behave properly.  I'm assuming the field is not added to the document if the field value is null. ",
            "id": "comment-15120429"
        },
        {
            "date": "2016-01-27T23:56:28+0000",
            "author": "Kevin Risden",
            "content": "I want to add a few more test cases:\n\n\ttesting with facet instead of map_reduce on the connection\n\ttesting with a column that doesn't exist like missingcol and see if that comes back with all nulls (not sure how something like mysql handles this)\n\n ",
            "id": "comment-15120447"
        },
        {
            "date": "2016-01-28T00:05:46+0000",
            "author": "Kevin Risden",
            "content": "Updated complete patch with tests for missing column. ",
            "id": "comment-15120459"
        },
        {
            "date": "2016-01-28T00:08:19+0000",
            "author": "Joel Bernstein",
            "content": "If we want to see how the /export handler behaves in the test case we leave the limit clause off the SQL statement and it will switch to the /export handler. I'm planning on committing the patch as is though so no need to put more work into this now. ",
            "id": "comment-15120467"
        },
        {
            "date": "2016-01-28T00:15:41+0000",
            "author": "Kevin Risden",
            "content": "Looks like with aggregationMode=map_reduce and workers=2 then metadata tuple isn't present. If you want to commit it as is that is fine just need to figure out why this is happening. ",
            "id": "comment-15120480"
        },
        {
            "date": "2016-01-28T00:16:53+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I'll work with the new patch.\n\nThe facet / map_reduce flag will only come into play with Select DISTINCT and GROUP BY aggregations. \n\nI think the thing to do with this is to add a jira ticket called something like \"Beef up Jdbc tests\". In that ticket we can add more tests for aggregations and randomize the facet / map_reduce flag.\n\nThis also something that can be done outside the DBVisualizer work so we can close out SOLR-8502 and declare victory. ",
            "id": "comment-15120482"
        },
        {
            "date": "2016-01-28T00:20:46+0000",
            "author": "Kevin Risden",
            "content": "sounds good to me. The last attached patch 21KB ~6pm works correctly. It has tests for missing column. I'll create a beef up jdbc jira issue and can move the work there. ",
            "id": "comment-15120491"
        },
        {
            "date": "2016-01-28T00:30:12+0000",
            "author": "Kevin Risden",
            "content": "Created SOLR-8608 and linked appropriate JIRAs. ",
            "id": "comment-15120505"
        },
        {
            "date": "2016-01-28T00:43:35+0000",
            "author": "Joel Bernstein",
            "content": "I'm not in a hurry. Let me know if you want me to take a look. ",
            "id": "comment-15120522"
        },
        {
            "date": "2016-01-28T00:47:40+0000",
            "author": "Joel Bernstein",
            "content": "From what I can see the meta data Tuple should work OK in parallel mode. ",
            "id": "comment-15120526"
        },
        {
            "date": "2016-01-28T00:58:29+0000",
            "author": "Kevin Risden",
            "content": "The error is related to numWorkers > 1 and partitionKeys not being set. I set the numWorkers to 1 currently to work around this.\n\nIf limit is not used and there is a missing column then it fails getting the first tuple saying missing column. This only happens when limit is not used. The two tests for not limits are commented out.\n\nThis patch improves the testing by separating out the test method to allow changing connection parameters and sql query. ",
            "id": "comment-15120543"
        },
        {
            "date": "2016-01-28T01:12:39+0000",
            "author": "Joel Bernstein",
            "content": "This sounds like a you've found a bug. The SQLHandler should not be getting tripped up like that.  ",
            "id": "comment-15120559"
        },
        {
            "date": "2016-01-28T01:14:05+0000",
            "author": "Joel Bernstein",
            "content": "This was on a simple select no limit? ",
            "id": "comment-15120561"
        },
        {
            "date": "2016-01-28T01:17:39+0000",
            "author": "Joel Bernstein",
            "content": "Weird from a code review I don't see how you would be getting that bug.\n\nCan you post the exact test that was failing? ",
            "id": "comment-15120565"
        },
        {
            "date": "2016-01-28T01:21:59+0000",
            "author": "Joel Bernstein",
            "content": "I'll take you're last patch and change numWorkers=2 and see what happens. ",
            "id": "comment-15120568"
        },
        {
            "date": "2016-01-28T01:30:01+0000",
            "author": "Joel Bernstein",
            "content": "I've got it reproducing. I'll figure out what the problem is. ",
            "id": "comment-15120578"
        },
        {
            "date": "2016-01-28T01:38:38+0000",
            "author": "Joel Bernstein",
            "content": "Alright I found the bug. I'll work with your latest patch and add the bug fix. We'll fix this bug as part of this ticket.\n\nGood job turning up this bug. ",
            "id": "comment-15120582"
        },
        {
            "date": "2016-01-28T02:12:35+0000",
            "author": "Joel Bernstein",
            "content": "Patch that moves the responsibility for setting the StreamContext to the SQLTupleStreamParser.\n\nThis resolves the bug that Kevin Risden found.\n\nThe test has been changed to numWorkers=2 and now passes and existing SQL tests pass. ",
            "id": "comment-15120607"
        },
        {
            "date": "2016-01-28T02:13:58+0000",
            "author": "Joel Bernstein",
            "content": "Kevin Risden, let me know if you want to work some with this patch or if you think it's ready to go. ",
            "id": "comment-15120608"
        },
        {
            "date": "2016-01-28T04:09:43+0000",
            "author": "Kevin Risden",
            "content": "It looks good except that lines 372 and 373 are commented out. in JdbcTest. Those 2 lines are tests for a sql statement without a limit. \"missingcol\" isn't a real column in the schema, but is part of the select statement. This may or may not be valid SQL, but I thought it was.\n\nIf those tests are run, then the following error occurs at the client:\n\n\njava.sql.SQLException: java.lang.RuntimeException: Couldn't get the first tuple\n\n\tat __randomizedtesting.SeedInfo.seed([26B9AF1BDBAE7536:81FD17BFB615668F]:0)\n\tat org.apache.solr.client.solrj.io.sql.StatementImpl.executeQuery(StatementImpl.java:78)\n\tat org.apache.solr.client.solrj.io.sql.JdbcTest.testJDBCMethods(JdbcTest.java:400)\n\tat org.apache.solr.client.solrj.io.sql.JdbcTest.testDriverMetadata(JdbcTest.java:372)\n\tat org.apache.solr.client.solrj.io.sql.JdbcTest.doTest(JdbcTest.java:353)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\n\tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:965)\n\tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:940)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:57)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:57)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.RuntimeException: Couldn't get the first tuple\n\tat org.apache.solr.client.solrj.io.sql.ResultSetImpl.<init>(ResultSetImpl.java:71)\n\tat org.apache.solr.client.solrj.io.sql.StatementImpl.executeQuery(StatementImpl.java:75)\n\t... 44 more\nCaused by: java.io.IOException: --> http://127.0.0.1:59212/sjm/vx/collection1/:java.util.concurrent.ExecutionException: java.io.IOException: --> http://127.0.0.1:59212/sjm/vx/collection1/:org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.client.solrj.io.stream.SolrStream.read(SolrStream.java:178)\n\tat org.apache.solr.client.solrj.io.stream.PushBackStream.read(PushBackStream.java:83)\n\tat org.apache.solr.client.solrj.io.sql.ResultSetImpl.<init>(ResultSetImpl.java:64)\n\t... 45 more\n\n\n\nThe underlying error from the server is actually this:\n\n\n15540 ERROR (qtp601677615-98) [n:127.0.0.1:59216_sjm%2Fvx c:collection1 s:shard1 r:core_node2 x:collection1] o.a.s.r.SortingResponseWriter java.io.IOException: org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.response.SortingResponseWriter.getFieldWriters(SortingResponseWriter.java:274)\n\tat org.apache.solr.response.SortingResponseWriter.write(SortingResponseWriter.java:133)\n\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:53)\n\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:744)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:468)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:226)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.apache.solr.client.solrj.embedded.JettySolrRunner$DebugFilter.doFilter(JettySolrRunner.java:110)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)\n\tat org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.schema.IndexSchema.getField(IndexSchema.java:1211)\n\tat org.apache.solr.response.SortingResponseWriter.getFieldWriters(SortingResponseWriter.java:272)\n\t... 27 more\n\n15540 ERROR (qtp212013910-69) [n:127.0.0.1:59212_sjm%2Fvx c:collection1 s:shard2 r:core_node1 x:collection1] o.a.s.r.SortingResponseWriter java.io.IOException: org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.response.SortingResponseWriter.getFieldWriters(SortingResponseWriter.java:274)\n\tat org.apache.solr.response.SortingResponseWriter.write(SortingResponseWriter.java:133)\n\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:53)\n\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:744)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:468)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:226)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.apache.solr.client.solrj.embedded.JettySolrRunner$DebugFilter.doFilter(JettySolrRunner.java:110)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)\n\tat org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.schema.IndexSchema.getField(IndexSchema.java:1211)\n\tat org.apache.solr.response.SortingResponseWriter.getFieldWriters(SortingResponseWriter.java:272)\n\t... 27 more\n\n15544 ERROR (qtp212013910-70) [n:127.0.0.1:59212_sjm%2Fvx c:collection1 s:shard2 r:core_node1 x:collection1] o.a.s.c.s.i.s.ExceptionStream java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: --> http://127.0.0.1:59212/sjm/vx/collection1/:org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:356)\n\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.open(CloudSolrStream.java:237)\n\tat org.apache.solr.client.solrj.io.stream.SelectStream.open(SelectStream.java:154)\n\tat org.apache.solr.handler.SQLHandler$MetadataStream.open(SQLHandler.java:1374)\n\tat org.apache.solr.client.solrj.io.stream.ExceptionStream.open(ExceptionStream.java:48)\n\tat org.apache.solr.handler.StreamHandler$TimerStream.open(StreamHandler.java:362)\n\tat org.apache.solr.response.TextResponseWriter.writeTupleStream(TextResponseWriter.java:303)\n\tat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:169)\n\tat org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:184)\n\tat org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:300)\n\tat org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:96)\n\tat org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:61)\n\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:53)\n\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:744)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:468)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:226)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.apache.solr.client.solrj.embedded.JettySolrRunner$DebugFilter.doFilter(JettySolrRunner.java:110)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)\n\tat org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:499)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.util.concurrent.ExecutionException: java.io.IOException: --> http://127.0.0.1:59212/sjm/vx/collection1/:org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:192)\n\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:350)\n\t... 37 more\nCaused by: java.io.IOException: --> http://127.0.0.1:59212/sjm/vx/collection1/:org.apache.solr.common.SolrException: undefined field: \"missingcol\"\n\tat org.apache.solr.client.solrj.io.stream.SolrStream.read(SolrStream.java:178)\n\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$TupleWrapper.next(CloudSolrStream.java:444)\n\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$StreamOpener.call(CloudSolrStream.java:467)\n\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$StreamOpener.call(CloudSolrStream.java:454)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$1.run(ExecutorUtil.java:232)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\t... 1 more\n\n ",
            "id": "comment-15120719"
        },
        {
            "date": "2016-01-28T04:13:35+0000",
            "author": "Kevin Risden",
            "content": "If this is a valid SQL statement then it needs to work for both limit and non limit statements. If it is NOT valid then it needs to not work for both limit and non limit statements. Currently it is handled differently between limit and non limit statements which is weird to me. ",
            "id": "comment-15120721"
        },
        {
            "date": "2016-01-28T12:36:23+0000",
            "author": "Joel Bernstein",
            "content": "There are lot's of inconsistencies between limited and unlimited queries. For example limited queries can return any stored field and unlimited queries can only return docValues fields. The reason these inconsistencies exist is that the /export handler has much tighter restrictions then the /select handler. For the early SQL releases we can just document these inconsistencies. ",
            "id": "comment-15121356"
        },
        {
            "date": "2016-01-28T12:45:47+0000",
            "author": "Joel Bernstein",
            "content": "I was just reviewing the exception handling in ResultSetImpl constructor. It looks ok but wanted to check to make sure the underlying error was being thrown properly in the driver. For example did the DBVisualizer debug panel display the message about the numWorkers error.\n\nThe way this works is that the SolrStream recognizes errors coming from the server through a flag in the Tuple. If it sees this flag it throws an Exception with the message. This should have been thrown on the first call to read() with the numWorker error. ",
            "id": "comment-15121365"
        },
        {
            "date": "2016-01-28T12:57:33+0000",
            "author": "Joel Bernstein",
            "content": "Doing some more review. That particular exception would have been thrown during the open() call on the server. This should have caused the first Tuple read in the jdbc driver to throw an exception with the correct message from the server. ",
            "id": "comment-15121375"
        },
        {
            "date": "2016-01-28T13:25:38+0000",
            "author": "Kevin Risden",
            "content": "The issue was that there was no exception added to the RuntimeException. It was missing the argument after the message. I updated the patch to include adding the exception to the RunTimeException. I am uploading a new patch with the exception handling being better. ",
            "id": "comment-15121417"
        },
        {
            "date": "2016-01-28T13:26:05+0000",
            "author": "Kevin Risden",
            "content": "Improve exception handling so that the underlying exception is thrown where applicable. ",
            "id": "comment-15121418"
        },
        {
            "date": "2016-01-28T13:39:52+0000",
            "author": "Joel Bernstein",
            "content": "What was the change in this patch? ",
            "id": "comment-15121460"
        },
        {
            "date": "2016-01-28T13:42:10+0000",
            "author": "Kevin Risden",
            "content": "changed new RuntimeException(MESSAGE) to new RuntimeException(MESSAGE, ERROR) in ResultSetImpl. This propagates the error up the client instead of swallowing why stream.read failed. ",
            "id": "comment-15121468"
        },
        {
            "date": "2016-01-28T13:52:19+0000",
            "author": "Joel Bernstein",
            "content": "The code I was reviewing already was doing that in the constructor. Was there another place? ",
            "id": "comment-15121489"
        },
        {
            "date": "2016-01-28T13:53:24+0000",
            "author": "Kevin Risden",
            "content": "For reference, on MySQL \"select id, bad from test\" results in an invalid field bad error. This means that limit statements are doing the wrong thing right now. Filed SOLR-8613 for this issue. ",
            "id": "comment-15121492"
        },
        {
            "date": "2016-01-28T13:55:12+0000",
            "author": "Kevin Risden",
            "content": "Hmmmm guess I had changed it already. I also consolidated the try/catch in the constructor so it will throw the same error if either the first tuple or the metadata tuple fails to be read. ",
            "id": "comment-15121497"
        },
        {
            "date": "2016-01-28T14:27:35+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I'll review. ",
            "id": "comment-15121563"
        },
        {
            "date": "2016-01-28T15:17:19+0000",
            "author": "Joel Bernstein",
            "content": "I think the error handling in ResultSetImpl constructor is correct in the latest patch.\n ",
            "id": "comment-15121667"
        },
        {
            "date": "2016-01-28T15:50:00+0000",
            "author": "Joel Bernstein",
            "content": "Currently the result set tests are only testing queries with a limit clause. I'm going to have to leave it that way for now because the the /export handler doesn't handle null values at all currently. There is an open ticket for this (SOLR-8285). When I work on SOLR-8285 I'll rework the JDBC tests to reflect the different null handling behaviors of the /select handler and the /export handler. ",
            "id": "comment-15121754"
        },
        {
            "date": "2016-01-28T16:01:53+0000",
            "author": "Joel Bernstein",
            "content": "Planning on committing this shortly.\n ",
            "id": "comment-15121776"
        },
        {
            "date": "2016-01-28T16:04:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 79e384bac5604fe999bd7293ea568b8ad7a014c7 in lucene-solr's branch refs/heads/master from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79e384b ]\n\nSOLR-8602: Implement ResultSetImpl.wasNull() ",
            "id": "comment-15121784"
        }
    ]
}