{
    "id": "LUCENE-8069",
    "title": "Allow index sorting by field length",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Invalid",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Wish",
        "components": [],
        "fix_versions": []
    },
    "description": "Short documents are more likely to get higher scores, so sorting an index by field length would mean we would be likely to collect best matches first. Depending on the similarity implementation, this might even allow to early terminate collection of top documents on term queries.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16269204",
            "date": "2017-11-28T18:28:18+0000",
            "content": "would sorting by fieldNorm be as useful but easier then looking at the actual field \"length\" (in terms of raw term count)\n\nIIRC the existing index sorting (on a doc values field) should be largely re-usable for field norms correct? (because aren't norms essentially just docvalues these days?) ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16269218",
            "date": "2017-11-28T18:34:21+0000",
            "content": "would sorting by fieldNorm be as useful but easier then looking at the actual field \"length\" (in terms of raw term count)\n\nSorry I wasn't clear but this is what I meant indeed (norms store the field length as of 7.0). ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16269260",
            "date": "2017-11-28T18:51:40+0000",
            "content": "Sorry I wasn't clear but this is what I meant indeed (norms store the field length as of 7.0).\n\nHmmm... that's how the default sim works as of 7.0, but strictly speaking a custom Similarity class could still do anything it wants in computeNorm() ... correct?\n\nI'm not trying to split hairs, i just want to clarify that in terms of the implementation details you're suggesting \"sort by (long) norm value (ascending)\" and in terms of naming/documenting this feature it should be clear that's what it will-do \u2013 that if a user configures some weird sim that computes a weird norm they're not going to get \"sort by doc length\" they're going to get \"sort by your weird norm\"\n ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16269666",
            "date": "2017-11-28T23:14:57+0000",
            "content": "Agreed with what you said. I'm actually not sure how we should implement it. I said \"length\" to remain vague and because assuming that the score will decrease if the length increases is a fair assumption. But there are multiple ways we could do it, and I'm not sure which one is better.\n\nI like the simplicity of sorting by the value of the norm field, but like you say the fact that norms are opaque introduces issues with custom similarities or even pre-7.0 similarities whose norm is inversely correlated with the length.\n\nMaybe we could work around it by involving the similarity and sorting by the value of the score for some fake index statistics and freq=1. But I think it is unsafe if two distinct lengths produce the same score with those fake index stats but not with other stats. Another idea could be to introduce a new API, something like Similarity.newSortField so that the similarity could tell us how to sort documents by decreasing scores assuming a constant freq. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16269976",
            "date": "2017-11-29T02:38:01+0000",
            "content": "Sorry, i don't agree with this issue. In my opinion the whole assumption: \"Short documents are more likely to get higher scores\" is wrong. Its simply not the case at all. with longer documents comes higher expected term frequencies too. If the similarity is biased towards either shorter or longer documents that's a bug, not a desirable quality. So i don't think we should offer this option.\n\nwe can find literature that indicates sorting by the number of unique terms may improve index compression, but thats it, and thats not what we store in the norm, not even for omit TF fields (LUCENE-8031). ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16270392",
            "date": "2017-11-29T08:26:01+0000",
            "content": "OK. Fair enough. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16271171",
            "date": "2017-11-29T17:30:42+0000",
            "content": "FWIW: I think there could be utility in a general purpose SortField that just sorted by the NORM \u2013 whatever that is that could be used for query time sorting, or index sorting.\n\nIf people find it useful in their specific domains, given what they know about their similarity \u2013 so be it. ",
            "author": "Hoss Man"
        }
    ]
}