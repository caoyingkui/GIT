{
    "id": "SOLR-11188",
    "title": "Hi CPU utilization when highlighting mergecontiguous=true",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "A user's list thread indicates that Solr 6.3 has very high CPU utilization with highlighting and mergecontiguous=true. This is a marker to see if we can reproduce. Notes:\n\n1> this was pre-unifiedhighlighter. \n2> unknown whether this is still an issue in more recent Solrs\n\nI'll ask the OP to comment here with additional details.\n\nAssigning to myself to track, I wont do any work on this for quite a while so anyone who wants to please take it.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-03T16:08:22+0000",
            "content": "Just skimming, nothing substantial, was looking into the code of master branch:\n\nDefaultHighlighter :: 331-344\n\n      //merge any contiguous fragments to improve readability\n      if(mergeContiguousFragments)\n      {\n        mergeContiguousFragments(frag);\n        ArrayList<TextFragment> fragTexts = new ArrayList<>();\n        for (int i = 0; i < frag.length; i++)\n        {\n          if ((frag[i] != null) && (frag[i].getScore() > 0))\n          {\n            fragTexts.add(frag[i]);\n          }\n        }\n        frag= fragTexts.toArray(new TextFragment[0]);\n      }\n\n\n\nWhy do we have a boolean and a function with same name, mergeContiguousFragments? \n\nAnyway the function: mergeContiguousFragments(frag ...)\n\nprivate void mergeContiguousFragments(TextFragment[] frag)\n  {\n    boolean mergingStillBeingDone;\n    if (frag.length > 1)\n      do\n      {\n        mergingStillBeingDone = false; //initialise loop control flag\n        //for each fragment, scan other frags looking for contiguous blocks\n        for (int i = 0; i < frag.length; i++)\n        {\n          if (frag[i] == null)\n          {\n            continue;\n          }\n          //merge any contiguous blocks\n          for (int x = 0; x < frag.length; x++)\n          {\n            if (frag[x] == null)\n            {\n              continue;\n            }\n            if (frag[i] == null)\n            {\n              break;\n            }\n            TextFragment frag1 = null;\n            TextFragment frag2 = null;\n            int frag1Num = 0;\n            int frag2Num = 0;\n            int bestScoringFragNum;\n            int worstScoringFragNum;\n            //if blocks are contiguous....\n            if (frag[i].follows(frag[x]))\n            {\n              frag1 = frag[x];\n              frag1Num = x;\n              frag2 = frag[i];\n              frag2Num = i;\n            }\n            else\n              if (frag[x].follows(frag[i]))\n              {\n                frag1 = frag[i];\n                frag1Num = i;\n                frag2 = frag[x];\n                frag2Num = x;\n              }\n            //merging required..\n            if (frag1 != null)\n            {\n              if (frag1.getScore() > frag2.getScore())\n              {\n                bestScoringFragNum = frag1Num;\n                worstScoringFragNum = frag2Num;\n              }\n              else\n              {\n                bestScoringFragNum = frag2Num;\n                worstScoringFragNum = frag1Num;\n              }\n              frag1.merge(frag2);\n              frag[worstScoringFragNum] = null;\n              mergingStillBeingDone = true;\n              frag[bestScoringFragNum] = frag1;\n            }\n          }\n        }\n      }\n      while (mergingStillBeingDone);\n  }\n\n\n\nThere is a valid condition on which the function returns, I don't see unreachable code here. Maybe on earlier versions or pardon me if I am looking at entirely different module / component. ",
            "author": "Amrit Sarkar",
            "id": "comment-16113003"
        }
    ]
}