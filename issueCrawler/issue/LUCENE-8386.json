{
    "id": "LUCENE-8386",
    "title": "Maybe a DocIdSetIterator may implement Bits?",
    "details": {
        "components": [
            "core/search"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "I was looking at ConjunctionDISI and noted the special case logic for DISI's of type BitSetIterator. It seems to only need the more minimal Bits interface though it makes references to BitSet specifically.   BitSetIterator is a concrete class; it would be nice if a DISI could either implement an optional interface to expose a Bits or perhaps implements Bits directly.  This would allow other/custom DISIs that can implement a Bits quickly without being forced to use BitSetIterator specifically.  Even DocIdSetIterator.all(...) could implement this.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16535762",
            "author": "Adrien Grand",
            "content": "Do you have concrete ideas in mind? I see BitSetIterator as an exception, other Bits-based iterators don't perform well and are better implemented with two-phase iterators? ",
            "date": "2018-07-07T13:50:27+0000"
        },
        {
            "id": "comment-16535991",
            "author": "David Smiley",
            "content": "First a disclaimer: I was merely looking at the code; this wasn't driven by any debugging session or profiling.\n\nI see BitSetIterator as an exception, other Bits-based iterators don't perform well\n\nI'm confused.  Why would BitSetIterator specifically be better than some other hypothetical Bits-based iterator?  A hypothetical Bits-based iterator of course would be based on some fast bit set, though through API reasons isn't necessarily a BitSetIterator specifically.\n\nBits-based iterators don't perform well and are better implemented with two-phase iterators\n\nThat surprises me; I would imagine it would depend on the cardinality of the bits since a low-cardinality bit set ought to potentially lead iteration?   For an extremely dense case; I'm not sure how much it'd matter either way since they are cheap to work with. ",
            "date": "2018-07-08T05:12:41+0000"
        },
        {
            "id": "comment-16536402",
            "author": "Adrien Grand",
            "content": "Sorry for introducing some confusion, when I mentioned Bits-based iterators I was thinking of a DocIdSetIterator over a Bits instance that would check bits one by one to find the next match rather than an alternative to BitsetIterator. ",
            "date": "2018-07-08T20:08:41+0000"
        },
        {
            "id": "comment-16536515",
            "author": "David Smiley",
            "content": "I think I see what you're getting\u00a0at due to my first mention of Bits vs\u00a0BitSet; maybe we confused each other \u00a0\n\nI'm\u00a0pointing\u00a0that\u00a0ConjunctionDISI makes a special optimization for any of it's input DISI's of type BitSetIterator, and I think that's a shame since someone might have a similar DISI that is not necessarily a BitSetIterator precisely.\u00a0 From that observation, I hypothesized if a DISI might expose an optional Bits somehow, then ConjunctionDISI could do it's optimization\u00a0more generically. ",
            "date": "2018-07-09T03:39:59+0000"
        }
    ]
}