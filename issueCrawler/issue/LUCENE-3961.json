{
    "id": "LUCENE-3961",
    "title": "don't build and rebuild jar files for dependencies in tests",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/build"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Hossman's comments about when jars are built had me thinking,\nits not really great how dependencies are managed currently.\n\nsay i have contrib/hamburger that depends on contrib/cheese\n\nif I do 'ant test' in contrib/hamburger, you end out with a situation\nwhere you have no hamburger.jar but you have a cheese.jar.\n\nThe reason for this: i think is how we implement the contrib-uptodate,\nvia .jar files. I think instead contrib-uptodate shouldnt use actual\njar files (cheese.jar) but a simple file we 'touch' like cheese.compiled.\n\nThis will make the build faster, especially I think the solr tests\nwhich uses these dependencies across a lot of lucene modules. we won't\nconstantly jar their stuff.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-05T22:33:44+0000",
            "content": "I don't have a strong opinion about this, but there are two counter arguments i've heard from over the years made in favor of always building the jar(s) even though it's a bit slower for the tests...\n\n1) it mean you always test against hte same jars that you ship \u2013 so there is no risk that the classpath you build for testing is subtly different then the files that make it into the jar (ie: maybe contrib/cheeseburger/build.xml copies a cheese_types.xml file into it's classes dir, but it accidentally gets excluded from contrib-cheeses.jar\n\n2) it means less risk that someone accidentally uses an older jar then they thing...\n\na) \"ant something\" ... builds contrib-hamburger.jar and contrib-cheese.jar\nb) you realize it doesn't work the way you want, so you apply a patch (with tests!)\nc) \"ant test\" rebuilds contrib/*/classes and you see your new hamburger test passes\nd) you copy contrib-hamburger.jar and contrib-cheese.jar not realizing they are still left over from #a above, and don't have your patch. ",
            "author": "Hoss Man",
            "id": "comment-13247778"
        },
        {
            "date": "2012-04-05T22:39:13+0000",
            "content": "Hossman: I don't understand your #2: We currently don't generally use jars \nas the actual classpath for testing though, and i strongly disagree that\nwe should. This really REALLY REALLY slow things down.\n\nwe might build them in module/contrib-uptodate, but its just because they \nare a file with a timestamp. Touch is a much faster way to make a file with \na timestamp.\n\nby never creating a jar in the first place your #2 doesn't happen at all really.\nin fact i think whatever we put in build/ is \"private\" implementation details\nof our build. If someone wants to rebuild jar files they should be running\nthe packaging tasks and getting them from dist/ ",
            "author": "Robert Muir",
            "id": "comment-13247785"
        },
        {
            "date": "2012-04-05T22:48:07+0000",
            "content": "Also, if we were to go with your logic, really we should be rebuilding the solr.war everytime\nwe run 'ant test' too.\n\n(I'm just pointing out why i think its infeasible).\n\nI think we need to keep this stuff fast so that compile-test-debug lifecycle is as fast as possible,\nespecially stuff like ant test -Dtestcase ",
            "author": "Robert Muir",
            "id": "comment-13247789"
        },
        {
            "date": "2012-04-05T22:53:43+0000",
            "content": "\na) \"ant something\" ... builds contrib-hamburger.jar and contrib-cheese.jar\nb) you realize it doesn't work the way you want, so you apply a patch (with tests!)\nc) \"ant test\" rebuilds contrib/*/classes and you see your new hamburger test passes\nd) you copy contrib-hamburger.jar and contrib-cheese.jar not realizing they are still left over from #a above, and don't have your patch.\n\nThis also fails if your patch actually fixes contrib-cheese. \n\nGoing with this logic, any time i run ant test -Dtestcase in lucene, i should rebuild the entirety\nof lucene/solr, because this poor user might have out of date jars  ",
            "author": "Robert Muir",
            "id": "comment-13247795"
        },
        {
            "date": "2012-04-05T22:58:25+0000",
            "content": "We currently don't generally use jars as the actual classpath for testing though\n\nunderstood, #1 is just an argument i've seen as to why it would be better to do so \u2013 otherwise we never actually know when testing that our jars are useful \u2013 someone could accidentally put \"excludes=\"*.class\" on a jar task and you'd never notice because all the tests would still pass.\n\nby never creating a jar in the first place your #2 doesn't happen at all really.\n\nnote step #a ... the point is if someone does whatever officially blessed step there is to build the jars (\"ant\", \"ant jar\", \"ant whatever\") and then decides they want to change the behavior of those jars \u2013 they may never run \"ant clean\" and it may not occur to then to  re-run whatever that official way to build jars is and they may not notice that the jar's aren't rebuilt when they do \"ant test\" \u2013 because they can already see the new code was \"compiled\" and running based on the test output.\n\nAlso, if we were to go with your logic, really we should be rebuilding the solr.war everytime\n\ncorrect, a war is just a jar with a special structure\n\n(I'm just pointing out why i think its infeasible). ... I think we need to keep this stuff fast so that compile-test-debug lifecycle is as fast as possible\n\nagreed ... like i said, i don't have a strong opinion about it, but since we're discussing it i just wanted to point out the arguments i've heard over and over when having this discussion in the past on other projects.\n\nI think in an ideal world, devs could run fast tests against ../*/classes/ directories, but jenkins would run all those same tests against fully build jars to ensure they aren't missing anything ... but that would probably be an anoying build.xml to maintain ",
            "author": "Hoss Man",
            "id": "comment-13247801"
        },
        {
            "date": "2012-04-05T23:14:09+0000",
            "content": "\nI think in an ideal world, devs could run fast tests against ../*/classes/ directories, but jenkins would run all those same tests against fully build jars to ensure they aren't missing anything ... but that would probably be an anoying build.xml to maintain\n\nI agree with that, but maybe in the future we could do it without it being so troublesome... ",
            "author": "Robert Muir",
            "id": "comment-13247825"
        },
        {
            "date": "2013-07-23T18:44:25+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716947"
        },
        {
            "date": "2014-04-16T12:54:38+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970821"
        }
    ]
}