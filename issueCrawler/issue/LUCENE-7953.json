{
    "id": "LUCENE-7953",
    "title": "Can we include the expression string in the stack frame for problems evaluating Lucene expressions?",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/expressions"
        ],
        "fix_versions": []
    },
    "description": "I'm working with rather complex expressions to compute relevance, and when there is a problem, I see a stack trace like this:\n\n\nServer error:\njava.lang.IllegalArgumentException: field \"is_prime\" has type bin, which cannot be used in an expression\n        at com.amazon.lucene.Searcher$IndexBindings.getDoubleValuesSource(Searcher.java:373)\n        at com.amazon.lucene.Searcher$QueryBindings.getDoubleValuesSource(Searcher.java:302)\n        at org.apache.lucene.expressions.ExpressionValueSource.<init>(ExpressionValueSource.java:45)\n        at org.apache.lucene.expressions.Expression.getDoubleValuesSource(Expression.java:97)\n        at com.amazon.lucene.Searcher$IndexBindings.getDoubleValuesSource(Searcher.java:378)\n        at com.amazon.lucene.Searcher$QueryBindings.getDoubleValuesSource(Searcher.java:302)\n        at org.apache.lucene.expressions.ExpressionValueSource.<init>(ExpressionValueSource.java:45)\n        at org.apache.lucene.expressions.Expression.getDoubleValuesSource(Expression.java:97)\n        at com.amazon.lucene.Searcher$IndexBindings.getDoubleValuesSource(Searcher.java:378)\n        at com.amazon.lucene.Searcher$QueryBindings.getDoubleValuesSource(Searcher.java:302)\n        at org.apache.lucene.expressions.ExpressionValueSource.<init>(ExpressionValueSource.java:45)\n        at org.apache.lucene.expressions.Expression.getDoubleValuesSource(Expression.java:97)\n        at com.amazon.lucene.Searcher$IndexBindings.getDoubleValuesSource(Searcher.java:378)\n        at com.amazon.lucene.Searcher$QueryBindings.getDoubleValuesSource(Searcher.java:302)\n        at com.amazon.lucene.http.SearchA9Handler.handleInner(SearchA9Handler.java:459)\n        at com.amazon.lucene.http.SearchA9Handler.handle(SearchA9Handler.java:99)\n        at <server>\n\n\n\nIt's my code that's throwing the exception, but it would sure be nice if all the intermediate stack frames in the exception would include the expression text (or maybe some smallish prefix of it, in case it's gigantic), because I think here I have 3 levels of expression, and it'd be nice to know which sub-expressions, sub-sub-expressions, etc., led to the offensive is_prime field.\n\nI don't know how to do this, but e.g. I know our randomizedtesting lib is able to modify stack to insert test seeds, so it seems to be possible.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16153569",
            "date": "2017-09-05T12:34:12+0000",
            "content": "Hi Mike,\nactually, expressions already insert the expression source text into the stack trace. But this only happens when the compiled expression function is part of the stack trace. We also have a test for this:\n\nhttps://github.com/apache/lucene-solr/blob/8b055382d6c88acaed9fe472a038c7ee6b35c016/lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java#L246-L267\n\nThe original expression's source code is presented as the \"filename\" in the stack trace. This is only possible, because we generate the bytecode and it is only visible if the executed code has the expression's generated class somewhere in the trace.\n\nYour example is different: The exception is happening inside the code that does the setup of the expression and its ValueSources. We cannot hook inside that easily (as the code is compiled by Javac). Instead, I would only suggest that any exception thrown by the ExpressionValueSource's ctor maybe preserves the expression as part of the message. The Expression abstract base class has the source code, so we can use it the constructor of the ExpressionValueSource.\n\nLTC is different as it modifies the stack trace after \"catching\" the expression and then rethrows it. But this can only be done by the code that throws an exception. And in that case it's better to preserve the code in the Message. Or use a different sublass of RuntimeException, like ExpressionException. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16154175",
            "date": "2017-09-05T19:39:05+0000",
            "content": "Thanks for the explanation Uwe Schindler!\n\nInstead, I would only suggest that any exception thrown by the ExpressionValueSource's ctor maybe preserves the expression as part of the message.\n\nI like this approach; so maybe in ExpressionValueSource ctor, if there is an exception calling getDoubleValuesSource, we could catch that and throw a new exception with the expression in its message, with the inner exception as its cause, maybe. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16154227",
            "date": "2017-09-05T20:17:58+0000",
            "content": "Actually Java lets you change all details of each StackTraceElement in an exception's stack trace, so we could in theory e.g. append the expression source after the .<init>, but ... it's not so easy to identify which StackTraceElement corresponds to the current expression, i.e. where to append the current expression.  I don't see how to do it reliable ...\n\nAnd, catching and throwing a new exception with the original exception as a cause is going to make a long nested set of causes which is ... quite messy to read I suspect, i.e. worse than what we have now.\n\nSo I don't see how we can accurately get the expression into these exceptions... ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16154463",
            "date": "2017-09-05T22:18:28+0000",
            "content": "Mike, can't you do some magic in your bindings impl where it recurses into a subexpression? E.g. try/catch and insert your fake frame, log some stuff, wrap with another exception, whatever? \n\nSo e.g. right before here in SimpleBindings for example https://github.com/apache/lucene-solr/blob/master/lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings.java#L82\n\nand i think the \"name\" is enough, you dont need the actual sub-expression text there.\nIf you have expressions:\n\ne = f + g\nf = x + y\ng = x + z\n\n\n\nWhen there is some problem with \"x\", you just want to know if it happened in f or g right?\n\nIf you can solve it in the bindings class i think thats best (rather than doing wonky stuff in ExpressionValueSource or whatever), because it allows for customization, e.g. if its too complicated for SimpleBindings maybe we don't do it there, but you could still do it yourself. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16154661",
            "date": "2017-09-06T00:59:33+0000",
            "content": "\nbut ... it's not so easy to identify which StackTraceElement corresponds to the current expression, i.e. where to append the current expression. I don't see how to do it reliable ...\n\nBefore you do a try/catch, can't you just call Thread.dumpStack().length to compute your depth? Otherwise if you have java 9 maybe you can do it more efficiently, and maybe its not too costly for your case? It should only be once per query regardless...\n\n\nAtomicInteger depth = new AtomicInteger(); \nStackWalker.getInstance().forEach(frame -> depth.incrementAndGet());\n\n ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155462",
            "date": "2017-09-06T14:46:06+0000",
            "content": "Thanks for the pointers Robert Muir; yeah, I can try to take this approach w/ my custom bindings impl. and see if it can be done cleanly enough to improve SimpleBindings.  Saving my current stack depth before recursing is a great idea!  That StackWalker looks compelling for Java 9.\n\nI agree, we only need to insert the variable name in the stack trace. ",
            "author": "Michael McCandless"
        }
    ]
}