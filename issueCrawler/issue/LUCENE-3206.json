{
    "id": "LUCENE-3206",
    "title": "FST package API refactoring",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/FSTs"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Later",
        "status": "Resolved"
    },
    "description": "The current API is still marked @experimental, so I think there's still time to fiddle with it. I've been using the current API for some time and I do have some ideas for improvement. This is a placeholder for these \u2013 I'll post a patch once I have a working proof of concept.",
    "attachments": {
        "LUCENE-3206.patch": "https://issues.apache.org/jira/secure/attachment/12482774/LUCENE-3206.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-16T10:54:29+0000",
            "content": "An empty (but compiling and consistent) take at the FST/FSA API. ",
            "author": "Dawid Weiss",
            "id": "comment-13050342"
        },
        {
            "date": "2011-06-16T11:01:08+0000",
            "content": "This is my take at the revamped FST API. My changes are mostly aiming at having a bit clearer code (especially wrt. to loops), but also detach the \"algebra\" of a transition's output from the actual output. This should allow us to create an output algebra that would work directly on mutable integers, for example (to save on autoboxing). I also just like the way it reads after the changes:\n\n      FST<Integer> fst = FSTBuilder.fst(FST.ArcLabel.BYTE2, PositiveInt.class)\n        .add(\"abc\", 10)\n        .add(\"abc, 5)\n        .add(\"def\", 0, 3), 2)\n        .build();\n\n\nor a loop over all arcs of a state:\n\n      Arc<Integer> arc = fst.getRoot();\n      for (Arc<Integer> tmp = arc.copy(); tmp.hasNext(); tmp.next()) {\n        int label = tmp.getLabel();     // transition label here.\n        Integer output = tmp.getOutput();\n      }\n\n\n\nI definitely didn't consider all the use cases that FSTs are used for currently (in particular the \"stop\" bit indicating non-accepted input sequences that are also dead ends), but I think these could be integrated... I think  \n\nArcs now also store the pointer to the FST object, which may seem like an overhead, but I doubt it really will be (it's a single pointer and we buffer arcs whenever we can; a larger waste is having an object on each arc's output, even if it can be a primitive type or reused buffer).\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13050347"
        },
        {
            "date": "2011-06-16T14:37:02+0000",
            "content": "This new FST API looks sweet!  Nice work \n\nSo with this we no longer need static Util methods right?  (Since each\narc can .follow a sequence of inputs).\n\nI like OutputAlgebra ... better matches what this class actually does,\nand if this means we can not create a new Object for every arc transition\nthat would be great (this makes FST lookups costly now).\n\nI don't know if this is possible, but, one thing I don't like about\nthe current API is that the BYTE1/2/4 is an enum and not parameterized\ninto the Builder/FST.  Ie, Builder/FST should really take the input\ntype as a type param too, since really an FST acts like a SortedMap<K,V>.\nBut I fear this could get scary-hairy w/ the required generics... ",
            "author": "Michael McCandless",
            "id": "comment-13050459"
        },
        {
            "date": "2011-06-17T07:11:27+0000",
            "content": "Thanks Mike. I agree it'd be nice to have a flexible label type as well, but I have no idea how to make it efficient (and code-clean) yet. You could do a similar thing as with the outputs (using either a boxed type if you don't care about performance that much or a mutable wrapper if you do care about GC), but how this would affect the API I have no idea right now. There is also the lexicographic order that one would need to consider (a comparator would need to be passed as part of the construction process and then for traversals). It'll get complicated.\n\nI was also thinking of just dropping support for BYTE1/2 and leaving fixed int labels... This would bloat byte-labeled automata a little bit (if they're ASCII they'd v-code into a single byte anyway), but would strip down the ugliness of BYTE1/2/4... All methods accepting BytesRef and CharSequence would still be there, translated on the fly, but the representation of labels would always be an int.\n\nOne more question: can you give me traversal use cases you're using FSTs for now? I'll try to implement them and see how the new API works out in practice. I looked at the FSTEnum and it has next(), seekCeil() and seekFloor().\n\nI'm also a bit terrified by the about of changes this would introduce if we decided to switch the APIs (tests, scattered use cases...). Don't know if I'll have the time to update this all.  ",
            "author": "Dawid Weiss",
            "id": "comment-13050913"
        },
        {
            "date": "2011-06-17T16:25:04+0000",
            "content": "Thanks Mike. I agree it'd be nice to have a flexible label type as well, but I have no idea how to make it efficient (and code-clean) yet. You could do a similar thing as with the outputs (using either a boxed type if you don't care about performance that much or a mutable wrapper if you do care about GC), but how this would affect the API I have no idea right now. There is also the lexicographic order that one would need to consider (a comparator would need to be passed as part of the construction process and then for traversals). It'll get complicated.\n\nYeah this was my fear \n\nI was also thinking of just dropping support for BYTE1/2 and leaving fixed int labels... This would bloat byte-labeled automata a little bit (if they're ASCII they'd v-code into a single byte anyway), but would strip down the ugliness of BYTE1/2/4... All methods accepting BytesRef and CharSequence would still be there, translated on the fly, but the representation of labels would always be an int.\n\nHmm, that makes me nervous \u2013 this could be a non-negligible increase\nin FST size for the non-ascii case I think?\n\nOne more question: can you give me traversal use cases you're using FSTs for now? I'll try to implement them and see how the new API works out in practice. I looked at the FSTEnum and it has next(), seekCeil() and seekFloor().\n\nI think SimpleText codec is a good example?  Also\nVariableGapTermsIndexReader, and MemoryCodec?  Each of these use the\nBytesRefFSTEnum, I believe.\n\nI'm also a bit terrified by the about of changes this would introduce if we decided to switch the APIs (tests, scattered use cases...). Don't know if I'll have the time to update this all.\n\nI think it's still fairly contained at this point?  (Ie the number of\ntests that directly use the FST APIs). ",
            "author": "Michael McCandless",
            "id": "comment-13051170"
        },
        {
            "date": "2011-06-18T08:31:32+0000",
            "content": "this could be a non-negligible increase in FST size for the non-ascii case I think?\n\nI don't know. If the non-ASCII is encoded as UTF8 for the BytesRef, then storing full unicode points on transitions shouldn't really account for much more (in fact it may create fewer states/ transitions because multibyte UTF8 sequences will require multiple transitions)? This we would need to check, of course. And I assume input sequences ARE text, which in general may not be the case... I think I'll leave BYTE1/BYTE4 an option for now and see if I can improve on it once I have a working test suite.\n\nI think SimpleText codec is a good example? Also VariableGapTermsIndexReader, and MemoryCodec? Each of these use the BytesRefFSTEnum, I believe.\n\nI wasn't clear \u2013 I can find the places where they're used, but I wanted to clarify the nature of stored keys and values (are they UTF8 text, utf16, unicode, random bytes)? I can go through the code, but you're probably a faster source of information on this one. Robert, if you're reading this \u2013 anything you envision could be stored as transition labels? ",
            "author": "Dawid Weiss",
            "id": "comment-13051475"
        },
        {
            "date": "2011-06-18T09:57:08+0000",
            "content": "\nthis could be a non-negligible increase in FST size for the non-ascii case I think?\n\nI don't know. If the non-ASCII is encoded as UTF8 for the BytesRef, then storing full unicode points on transitions shouldn't really account for much more (in fact it may create fewer states/ transitions because multibyte UTF8 sequences will require multiple transitions)? This we would need to check, of course. And I assume input sequences ARE text, which in general may not be the case... I think I'll leave BYTE1/BYTE4 an option for now and see if I can improve on it once I have a working test suite.\n\nAhh, yes I agree it'd be a more interesting comparison if you use\nUTF32 instead of UTF8.\n\nThe case I was worried about is if you must use UTF8 (ie because\nTermsEnum speaks only BytesRef), then writing those bytes as a vInt\ninstead of a fixed byte is a penalty to non-ascii.\n\n\nI think SimpleText codec is a good example? Also VariableGapTermsIndexReader, and MemoryCodec? Each of these use the BytesRefFSTEnum, I believe.\n\nI wasn't clear \u2013 I can find the places where they're used, but I wanted to clarify the nature of stored keys and values (are they UTF8 text, utf16, unicode, random bytes)? I can go through the code, but you're probably a faster source of information on this one. Robert, if you're reading this \u2013 anything you envision could be stored as transition labels?\n\nAhh... I think all uses have BytesRef (UTF8 encoded term) as the key,\nand various things as the values.\n\nI don't think we've used FST during analysis yet but we should try;\nthen I suspect we'd use UTF16 labels? ",
            "author": "Michael McCandless",
            "id": "comment-13051491"
        },
        {
            "date": "2011-06-18T10:41:41+0000",
            "content": "I think I know how to compare storing byte[] of UTF8 as compared to vint-encoded codepoints in UTF32 \u2013 I'll encode the wikipedia terms list in both ways and we will see what comes out. Theoretically they should be very, very similar (and full unicode codepoints should generate fewer arcs) because UTF8 uses an encoding scheme with similar overhead to vint encoding... os if something is a single-byte sequence in UTF8, will remain single byte vint. Double-byte UTF8 character will remaing double-byte vint (last double byte codepoint is 0x7ff=2047, whereas the last double byte vint is 2^14=16384. And so on. So for text, vint-encoded UTF32 should be more compact than UTF8... The gain is of course when your \"labels\" are not text, but arbitrary bytes \u2013 then byte[] representation would be nicer.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13051496"
        },
        {
            "date": "2011-06-18T21:37:13+0000",
            "content": "I encoded wikipedia termslist in UTF32 (int4) and UTF8 (int1). Interesting results:\n\n271,461,850 utf32.fst\nArcs:  64.485.082\nNodes: 36.624.613\n\n270,137,939 utf8.fst\nArcs:  66.478.193\nNodes: 38.687.637\n\n\n\nSo... the files are pretty much the same size... UTF32 is slighly bigger, but (as predicted) it has fewer arcs and fewer nodes. I checked and ALL input UTF8 strings are the same or longer than vint-coded UTF32 sequences... So how come UTF32 automaton is larger? I have no clue \u2013 I assume it may be something with the size of v-coded pointers... but I have no clue. In any case, the size gain from using int1 to encode UTF8 is minimal over just using full unicode codepoints and v-coded int4. Performance-wise it may be a hit (because one would need to convert UTF8/UTF16 to full unicode codepoints), but size-wise it seems to be relatively the same. ",
            "author": "Dawid Weiss",
            "id": "comment-13051597"
        },
        {
            "date": "2011-06-18T21:40:06+0000",
            "content": "Oh, a wild guess: with int4 more nodes will be expanded into bsearch arrays (fixed size arcs). This may account for the observed size difference. And it may matter for traversals too (because int4 nodes will have a higher fanout, especially at root and first levels... something to consider). ",
            "author": "Dawid Weiss",
            "id": "comment-13051598"
        },
        {
            "date": "2011-06-19T08:49:45+0000",
            "content": "I confirmed the above, out of sheer curiosity, by compiling without expanded nodes (just linear packing).\n\n261,820,296 utf32-noexp.fst\n271,461,850 utf32.fst\n263,415,558 utf8-noexp.fst\n270,137,939 utf8.fst\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13051658"
        },
        {
            "date": "2011-06-19T13:49:54+0000",
            "content": "OK, these results make sense!  UTF32 (vInt labels) is more compact than UTF8, if you disable array'd arcs.  These wiki terms are from the en export right?  So the differences are due to the smallish number of random terms that are not English... it should be more extreme if we used non-English content.\n\nI wonder how lookup time would compare... I think UTF32 should be faster?\n\nAnd yes for truly binary terms (eg collated fields, and maybe eventually numeric fields but not yet because they still avoid the 8th bit I think) I think we want to keep BYTE1.\n\nWe need some good use cases of FSTs during analysis... there we are free to make the alphabet non-byte (vs the index, where terms are a BytesRef). ",
            "author": "Michael McCandless",
            "id": "comment-13051684"
        },
        {
            "date": "2011-06-19T14:21:08+0000",
            "content": "Just one question: Is sort order for suppl chars in UTF32 compatible to UTF8 or will there be more problems? As we have a special case for UTF16 (surrogates dance), so what happens with a third \"encoding\"? ",
            "author": "Uwe Schindler",
            "id": "comment-13051688"
        },
        {
            "date": "2011-06-19T19:43:47+0000",
            "content": "UTF32 is basically codepoint representation, so there are no surrogates (as in UTF16) and there is no special encoding of higher codepoints (as in UTF8). I don't know what sort order is used inside Lucene (is it UTF8 byte-to-byte values or decoded codepoints?). If it is codepoint order then no problem \u2013 this should be preserved.\n\nI'll stick to BYTE1/BYTE4 inputs then for now and I'll try to push this patch forward in my spare time. ",
            "author": "Dawid Weiss",
            "id": "comment-13051725"
        },
        {
            "date": "2011-06-19T19:59:05+0000",
            "content": "The term index is sorted by utf8 bytes natively. So a FST build on term index must assume that order, because the terms must be presorted for Builder. Lucene internally only works on byte[] and uses per default this order. Also most queries rely on it. ",
            "author": "Uwe Schindler",
            "id": "comment-13051728"
        },
        {
            "date": "2011-06-20T06:54:57+0000",
            "content": "This is fine \u2013 \"Sorting of UTF-8 strings as arrays of unsigned bytes will produce the same results as sorting them based on Unicode code points.\", http://en.wikipedia.org/wiki/UTF-8.\n\nIndeed, when you look at how UTF8 encodes multibyte codepoints the codepoint order will be preserved. ",
            "author": "Dawid Weiss",
            "id": "comment-13051824"
        },
        {
            "date": "2011-06-24T07:29:29+0000",
            "content": "Moving to 3.4, if at all  ",
            "author": "Dawid Weiss",
            "id": "comment-13054284"
        },
        {
            "date": "2011-08-30T15:40:14+0000",
            "content": "I'm looking forward to these FST API improvements. It's a bit obtuse for something that is basically a SortedMap. ",
            "author": "David Smiley",
            "id": "comment-13093830"
        },
        {
            "date": "2011-08-30T16:07:51+0000",
            "content": "I haven't had the time to work on that, sorry. I'll publish what I have on github, if you want to give it a spin. Essentially I wanted to tackle the following issues:\n\n\n\tclean and well defined algebra of operations and input types,\n\tGC efficiency during construction so that we don't create intermediate objects if there's no need to (inherently connected to algebra definition),\n\ta small, lean and clean API for traversals, with utility methods of higher complexity (suffix collectors, matchers, etc.)\n\n\n\nOnly once this is implemented it makes sense to incorporate add-ons Mike worked on (during-the-construction pruning, different arc storage formats). So, even if it's essentially a sortedmap, there is a fair bit of complexity involved if you want to make it efficient  ",
            "author": "Dawid Weiss",
            "id": "comment-13093852"
        },
        {
            "date": "2012-03-06T02:05:40+0000",
            "content": "3.6 pruning: can we push this out to 4.0? ",
            "author": "Robert Muir",
            "id": "comment-13222910"
        },
        {
            "date": "2012-03-06T07:52:45+0000",
            "content": "Absolutely. This is far-future. I wouldn't even schedule it for 4.0 - I simply won't have the time for rewriting all the code that Mike and you created on top of the FST class  ",
            "author": "Dawid Weiss",
            "id": "comment-13223068"
        },
        {
            "date": "2012-04-20T07:16:14+0000",
            "content": "Won't have the time for this in any near future. ",
            "author": "Dawid Weiss",
            "id": "comment-13258062"
        }
    ]
}