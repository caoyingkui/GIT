{
    "id": "LUCENE-8177",
    "title": "BlockMaxConjunctionScorer should compute better lower bounds of the required scores",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "Assuming N scorers, BlockMaxConjunctionScorer computes a lower bound of the sum of scores for scorers 0..i, for any given 0 <= i < N.\n\nFor instance say you are searching for \"quick AND fox\", that a hit needs a score of 4 to be competitive and that \"quick\" contributes at most 3 to the score and \"fox\" 2. This means that for a given hit to be competitive, the sum of scores must be at least 4-maxScore(fox)=4-2=2 after having scored \"quick\" and 4 after having scored \"fox\".\n\nCurrently we have this in BlockMaxConjunctionScorer:\n\n// Also compute the minimum required scores for a hit to be competitive\n// A double that is less than 'score' might still be converted to 'score'\n// when casted to a float, so we go to the previous float to avoid this issue\nminScores[minScores.length - 1] = minScore > 0 ? Math.nextDown(minScore)\n\n\n\nWe currently use Math.minDown(float) to be safe, but we would get a better bound by computing the lowest double that is converted to minScore when casted to a float.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}