{
    "id": "SOLR-6352",
    "title": "Let Stats Hang off of Range Facets",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The same basic idea as the sibling pivot issue: ask the RangeFacet code to compute some stats X for each range it generates.  We can do this with the existing stats.field params, but we'll leverage the tag local param of the stats.field instances to be able to associate which stats we want hanging off of which facet.range instance\n\nExample...\n\nfacet.range={!stats=s1}timestamp\nfacet.range={!stats=s2}bytes_sent\nstats.field={!key=sum_bytes tag=s1 sum=true}bytes_sent\nstats.field={!tag=s1 percentiles=99}request_duration\nstats.field={!tag=s2 mean=true percentiles=99}request_duration\n\n\n\n...with the request above, (hypothetically over an index of web log traffic) each range bucket over the \"timestamp\" field will (in addition to simple facet count) also include the sum of total bytes_sent, and the 99th percentile of request_duration for all docs in that time range; and each range bucket over the \"bytes_sent\" field will (in addition to simple facet count) also include the mean and 99th percentile of request_duration.",
    "attachments": {
        "SOLR-6352.patch": "https://issues.apache.org/jira/secure/attachment/12744785/SOLR-6352.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14091541",
            "date": "2014-08-09T01:21:56+0000",
            "content": "\nIn general there is a lot of overlap here with SOLR-6351 \u2013 see that issue for a breakdown of the StatsComponent changes/refactorings that this task could leverage. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14610926",
            "date": "2015-07-01T20:07:28+0000",
            "content": "An example of the current response format for range facets is as follows:\n\ncurl 'http://localhost:8983/solr/test/select' --data-binary 'q=price:[0 TO 100]&facet=true&facet.range=price&facet.range.start=0&facet.range.end=1000&facet.range.gap=100&wt=json&indent=on&stats=on&stats.field=price&facet.range.other=all'\n\n\n\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{},\n    \"facet_dates\":{},\n    \"facet_ranges\":{\n      \"price\":{\n        \"counts\":[\n          \"0.0\",7,\n          \"100.0\",2,\n          \"200.0\",1,\n          \"300.0\",3,\n          \"400.0\",1,\n          \"500.0\",0,\n          \"600.0\",1,\n          \"700.0\",0,\n          \"800.0\",0,\n          \"900.0\",0],\n        \"gap\":100.0,\n        \"start\":0.0,\n        \"end\":1000.0,\n        \"before\":0,\n        \"after\":1,\n        \"between\":15}},\n    \"facet_intervals\":{},\n    \"facet_heatmaps\":{}},\n  \"stats\":{\n    \"stats_fields\":{\n      \"price\":{\n        \"min\":0.0,\n        \"max\":2199.0,\n        \"count\":16,\n        \"missing\":16,\n        \"sum\":5251.270030975342,\n        \"sumOfSquares\":6038619.175900028,\n        \"mean\":328.20437693595886,\n        \"stddev\":536.3536996709846}}}}\n\n\n\nIn order to hang stats off of range facets, I propose the following response format:\n\ncurl 'http://localhost:8983/solr/test/select' --data-binary 'q=price:[0 TO 100]&facet=true&facet.range={!stats=s1}price&facet.range.start=0&facet.range.end=1000&facet.range.gap=100&wt=json&indent=on&stats=on&stats.field={!tag=s1}price&facet.range.other=all'\n\n\n\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{},\n    \"facet_dates\":{},\n    \"facet_ranges\":{\n      \"price\":{\n        \"counts\":[\n\t\t{\n\t\t\t\"start\" : \"0.0\",\n\t\t\t\"count\" : \"7\"\n\t\t\t\"stats\":{\n\t\t\t\t\"stats_fields\":{\n\t\t\t\t\t\"price\":{\n\t\t\t\t\t\t\"min\":0.0,\n\t\t\t\t\t\t\"max\":92.0,\n\t\t\t\t\t\t\"count\":7,\n\t\t\t\t\t\t\"missing\":0,\n\t\t\t\t\t\t\"sum\":198.43999862670898,\n\t\t\t\t\t\t\"sumOfSquares\":14617.752310049444,\n\t\t\t\t\t\t\"mean\":28.348571232387,\n\t\t\t\t\t\t\"stddev\":38.7131800847063\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"start\" : \"100.0\"\n\t\t\t\"count\" : \"2\"\n\t\t\t\"stats\":{\n\t\t\t\t\"stats_fields\":{\n\t\t\t\t\t\"price\":{\n\t\t\t\t\t\t\"min\":179.99000549316406,\n\t\t\t\t\t\t\"max\":185.0,\n\t\t\t\t\t\t\"count\":2,\n\t\t\t\t\t\t\"missing\":0,\n\t\t\t\t\t\t\"sum\":364.99000549316406,\n\t\t\t\t\t\t\"sumOfSquares\":66621.40207742923,\n\t\t\t\t\t\t\"mean\":182.49500274658203,\n\t\t\t\t\t\t\"stddev\":3.5426010894910442\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t...\n\t],\n        \"gap\":100.0,\n        \"start\":0.0,\n        \"end\":1000.0,\n        \"before\": {\n\t\t\"count\" : \"0\",\n\t\t\"stats\":{\n\t\t\t\"stats_fields\":{\n\t\t\t\t\"price\":{\n\t\t\t\t\t\"min\":0,\n\t\t\t\t\t\"max\":0,\n\t\t\t\t\t\"count\":0,\n\t\t\t\t\t\"missing\":0,\n\t\t\t\t\t\"sum\":0,\n\t\t\t\t\t\"sumOfSquares\":0,\n\t\t\t\t\t\"mean\":0,\n\t\t\t\t\t\"stddev\":0\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n        \"after\":{\n\t\t\"count\" : \"1\",\n\t\t\"stats\":{\n\t\t\t\"stats_fields\":{\n\t\t\t\t\"price\":{\n\t\t\t\t\t\"min\":2199.0,\n\t\t\t\t\t\"max\":2199.0,\n\t\t\t\t\t\"count\":1,\n\t\t\t\t\t\"missing\":0,\n\t\t\t\t\t\"sum\":2199.0,\n\t\t\t\t\t\"sumOfSquares\":4835601.0,\n\t\t\t\t\t\"mean\":2199.0,\n\t\t\t\t\t\"stddev\":0.0\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n        \"between\":{\n\t\t\"count\" : \"15\",\n\t\t\"stats\":{\n\t\t\t\"stats_fields\":{\n\t\t\t\t\"price\":{\n\t\t\t\t        \"min\":0.0,\n\t\t\t\t\t\"max\":649.989990234375,\n\t\t\t\t\t\"count\":15,\n\t\t\t\t\t\"missing\":0,\n\t\t\t\t\t\"sum\":3052.270030975342,\n\t\t\t\t\t\"sumOfSquares\":1203018.175900028,\n\t\t\t\t\t\"mean\":203.48466873168945,\n\t\t\t\t\t\"stddev\":203.8781183115027\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}}},\n    \"facet_intervals\":{},\n    \"facet_heatmaps\":{}},\n  \"stats\":{\n    \"stats_fields\":{\n      \"price\":{\n        \"min\":0.0,\n        \"max\":2199.0,\n        \"count\":16,\n        \"missing\":16,\n        \"sum\":5251.270030975342,\n        \"sumOfSquares\":6038619.175900028,\n        \"mean\":328.20437693595886,\n        \"stddev\":536.3536996709846}}}}\n\n\n\nThoughts? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14622806",
            "date": "2015-07-10T19:43:22+0000",
            "content": "Here's a patch which implements this feature according to the response format described above.\n\nThere are still a few nocommits:\n\n\tSupport for hanging stats is not implemented when facet.range.method=dv\n\tI don't know what to do when group.facet=true. It looks like this option just counts the number of groups when the current facet range is applied as a filter. But there is no DocSet to calculate the filter on except the base DocSet which is the results of the main query. For now, this patch just throws an exception in such a case.\n\n "
        }
    ]
}