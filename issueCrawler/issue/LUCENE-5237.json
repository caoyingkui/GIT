{
    "id": "LUCENE-5237",
    "title": "StemmerUtil.deleteN may delete too many characters",
    "details": {
        "components": [
            "modules/analysis"
        ],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "StemmerUtil.deleteN calls to delete(), but in some cases, it may delete too many characters. E.g. if you execute this code:\n\n\nchar[] buf = \"abcd\".toCharArray();\nint len = StemmerUtil.deleteN(buf, buf.length, buf.length, 3);\nSystem.out.println(new String(buf, 0, len));\n\n\n\nYou get \"a\", even though no character should have been deleted (not according to the javadocs nor common logic).\n\nThe problem is in delete(), which always returns len-1, even if no character is actually deleted.\n\nI'll post a patch that fixes it shortly.",
    "attachments": {
        "LUCENE-5237.patch": "https://issues.apache.org/jira/secure/attachment/12604535/LUCENE-5237.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-09-23T07:43:28+0000",
            "content": "Fixed the bug, I also handled the TODO in deleteN. ",
            "author": "Shai Erera",
            "id": "comment-13774359"
        },
        {
            "date": "2013-09-23T08:40:45+0000",
            "content": "Shouldn't it throw an exception instead when pos + nChars > buf.length? ",
            "author": "Adrien Grand",
            "id": "comment-13774381"
        },
        {
            "date": "2013-09-23T09:05:56+0000",
            "content": "I don't think we should change the semantics of these methods without tests (including relevance tests): lots of algorithms originally designed in e.g. C are using them.\n\nWe can mark the whole class lucene.internal or copy the code of the methods to each class actually using them (thats all ok to me). ",
            "author": "Robert Muir",
            "id": "comment-13774396"
        },
        {
            "date": "2013-09-23T09:35:17+0000",
            "content": "\nThe problem is in delete(), which always returns len-1, even if no character is actually deleted.\n\nThis isn't a bug: if you delete the last character, its all that must happen. ",
            "author": "Robert Muir",
            "id": "comment-13774419"
        },
        {
            "date": "2013-09-23T09:54:04+0000",
            "content": "\nShouldn't it throw an exception instead when pos + nChars > buf.length?\n\nassertion would also be ok I think: the code using this should be passing in length coming from the term buffer and should \"know what its doing\", e.g. this isn't a String class.\n\neither way: I'd rather have some warning that the stemmer is \"broken\" / has some wierdness than for delete(N) to silently not remove a suffix, thats scary to me to just change! ",
            "author": "Robert Muir",
            "id": "comment-13774428"
        },
        {
            "date": "2013-09-23T10:36:02+0000",
            "content": "This isn't a bug: if you delete the last character, its all that must happen.\n\nYou're right. So first, this isn't what happens. If pos=3 and len=4 (delete the last character), it calls System.arraycopy (even in the patch I posted). This could be improved. Second, the problem is that it deletes the last character, even if pos >= length. I.e. you ask to delete the character beyond what is \"valid\" in that buffer. I can't believe there is a TokenFilter that relies on being able to delete characters beyond the length of the buffer as it knows.\n\nShouldn't it throw an exception instead when pos + nChars > buf.length?\n\nMaybe we should ...\n\nWe can mark the whole class lucene.internal or copy the code of the methods to each class actually using them\n\nYou mean inline these methods? ",
            "author": "Shai Erera",
            "id": "comment-13774442"
        },
        {
            "date": "2013-09-23T10:36:53+0000",
            "content": "I'd rather have some warning that the stemmer is \"broken\" / has some wierdness than for delete(N) to silently not remove a suffix, thats scary to me to just change!\n\nIt's not that it does not remove a suffix, but that it removes a suffix you didn't ask for! ",
            "author": "Shai Erera",
            "id": "comment-13774443"
        },
        {
            "date": "2013-09-23T10:38:07+0000",
            "content": "assertion would also be ok I think\n\nok that's better than an exception. ",
            "author": "Shai Erera",
            "id": "comment-13774444"
        },
        {
            "date": "2013-09-23T10:40:23+0000",
            "content": "let me clarify something \u2013 if the code that's using these methods is using them \"properly\", then the code works well. The bug is that it lets you delete characters you didn't intend to. Maybe what we can do is add an assert that pos + nChars < len, and not silently delete less chars than you asked for? Is that better? ",
            "author": "Shai Erera",
            "id": "comment-13774446"
        },
        {
            "date": "2013-09-23T11:07:05+0000",
            "content": "\nIt's not that it does not remove a suffix, but that it removes a suffix you didn't ask for!\n\nYou called delete. By definition, this shortens the string. ",
            "author": "Robert Muir",
            "id": "comment-13774458"
        },
        {
            "date": "2013-09-23T11:18:34+0000",
            "content": "Maybe what we can do is add an assert that pos + nChars < len, and not silently delete less chars than you asked for? Is that better?\n\n+1 for assert pos + nChars <= len; ",
            "author": "Adrien Grand",
            "id": "comment-13774467"
        },
        {
            "date": "2013-09-23T11:49:04+0000",
            "content": "You called delete. By definition, this shortens the string.\n\nYes, but not beyond what I've asked. If you call delete(\"abcd\", pos=2, nChars=3), you get back \"a\". It's like pos is completely ignored.\n\nI'll change the code to only assert that pos and nChars don't go beyond len. ",
            "author": "Shai Erera",
            "id": "comment-13774485"
        },
        {
            "date": "2013-09-23T12:02:10+0000",
            "content": "Added asserts to both methods as well as @lucene.internal. Also added a minor optimization to not call System.arraycopy if asked to delete the last character(s). All analysis tests pass. ",
            "author": "Shai Erera",
            "id": "comment-13774492"
        },
        {
            "date": "2013-09-24T07:49:35+0000",
            "content": "+1 I would just put @lucene.internal on the whole class instead of each method. ",
            "author": "Adrien Grand",
            "id": "comment-13776087"
        },
        {
            "date": "2013-09-24T07:51:41+0000",
            "content": "OK will do. Thanks! ",
            "author": "Shai Erera",
            "id": "comment-13776089"
        },
        {
            "date": "2013-09-24T08:23:39+0000",
            "content": "Commit 1525813 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1525813 ]\n\nLUCENE-5237: assert parameters validity as well as minor improvements ",
            "author": "ASF subversion and git services",
            "id": "comment-13776115"
        },
        {
            "date": "2013-09-24T08:24:46+0000",
            "content": "Commit 1525814 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1525814 ]\n\nLUCENE-5237: assert parameters validity as well as minor improvements ",
            "author": "ASF subversion and git services",
            "id": "comment-13776116"
        },
        {
            "date": "2013-09-24T08:25:08+0000",
            "content": "Committed to trunk and 4x. ",
            "author": "Shai Erera",
            "id": "comment-13776117"
        }
    ]
}