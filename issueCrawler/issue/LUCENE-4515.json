{
    "id": "LUCENE-4515",
    "title": "Make MemoryIndex more memory efficient",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "4.0,                                            4.1,                                            6.0",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently MemoryIndex uses BytesRef objects to represent terms and holds an int[] per term per field to represent postings. For highlighting this creates a ton of objects for each search that 1. need to be GCed and 2. can't be reused.",
    "attachments": {
        "LUCENE-4515.patch": "https://issues.apache.org/jira/secure/attachment/12551527/LUCENE-4515.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-31T11:50:41+0000",
            "content": "I included a fix for LUCENE-3865 along the lines in the upcoming patch. ",
            "author": "Simon Willnauer",
            "id": "comment-13487688"
        },
        {
            "date": "2012-10-31T12:05:18+0000",
            "content": "here is a patch that cuts over MemoryIndex to ByteBlockPool (store terms) / IntBlockPool (store postings) and using BytesRefHash to hold the term dictionary. This patch still has some edges and some nocommits but in general this is what I had in mind. I factored out IntBlockPool out of TermsHash / DWPT and made it more general or useable for slice writing reading. I haven't done any benchmarks yet but I could imagine its even faster than before due to better memory alignment. \n\ncomments welcome. ",
            "author": "Simon Willnauer",
            "id": "comment-13487694"
        },
        {
            "date": "2012-10-31T12:21:12+0000",
            "content": "Are we sure this is the right direction to go for MemoryIndex?\n\nI think its being abused for highlighting: but it has other real use cases and we shouldn't make it worse for its real use cases just because highlighting abuses it.\n\ninstead I think if the concern is garbage then maybe just use term vectors and compute this stuff at index time.\n ",
            "author": "Robert Muir",
            "id": "comment-13487705"
        },
        {
            "date": "2012-10-31T12:49:35+0000",
            "content": "Are we sure this is the right direction to go for MemoryIndex?\nSo we have a couple of options here. Like one would be to have a light weight DWPT (atomic writer however you wanna call it) but our IW has a pretty significant overhead for indexing just one document and execute a search on it so I think unless we have all those refactoring I want to do long term this class should be supported.\n\nI think its being abused for highlighting: but it has other real use cases and we shouldn't make it worse for its real use cases just because highlighting abuses it.\nI couldn't agree more though. Maybe I used this as a bad example. In ElasticSearch we use it for percolation (http://www.elasticsearch.org/guide/reference/java-api/percolate.html) and this works actually pretty well with the MemoryIndex. I had other usecases in the past where this was handy too though. I also see folks on the mailing list opening issues so unless we have a similar lightweight replacement I don't see why we should not improve this impl. The main reason why I improved this here is that we want to reuse the internal buffers and if possible move away from objects.\n\ninstead I think if the concern is garbage then maybe just use term vectors and compute this stuff at index time\n\nthis might work for highlighting I agree. ",
            "author": "Simon Willnauer",
            "id": "comment-13487718"
        },
        {
            "date": "2012-10-31T14:25:09+0000",
            "content": "We use MemoryIndex for monitoring, very similar to the ES percolator, running lots of queries over individual documents in a queue.  We've occasionally had GC issues with this, so anything that makes the garbage collector happier is good for us. ",
            "author": "Alan Woodward",
            "id": "comment-13487817"
        },
        {
            "date": "2012-10-31T14:53:33+0000",
            "content": "Cool!: you used the same slice idea that we use to hold postings in\nRAM in shared byte[]s, but with int[]s instead.  This should be a huge\nreduction on GC load for MemoryIndex.\n\nI agree that DocFieldProcessor.docBoost is unused...\n\nsynchronizedAllocator looks unused?  I guess you added that after\nremoving all sync from RecyclingByteBlockAllocator ... but I think we\ncan just add synchronizedAllocator back later if/when we need it?\nSeparately can you call out that RecyclingByteBlockAllocator is not\nthread safe in its javadocs?\n\n\nint[] start; // nocommit maybe we can safe the end array and just check freq - need to change the SliceReader for this\n\nI think you need the start ... because if you used more than one slice\nyou won't know how to read \"backwards\" to get to the starting slice?\n\n\nintBlockPool = new IntBlockPool(); // nocommit expose allocator and impl a recycling one\n\nIf we do that we have to make sure that allocator clears each int[]\nbefore returning it, in getIntBlock().\n\nThe added MemoryIndex.reset method is sort of ... spooky?  Like, do we\nreally need/want to reuse a MemoryIndex?  (I guess this is because we\nadded passing in an allocator to the ctor ... so you want the byte[]'s\nreturned to it ... but that also makes me nervous: should we really\npass in an external allocator...?). ",
            "author": "Michael McCandless",
            "id": "comment-13487830"
        },
        {
            "date": "2012-10-31T15:00:05+0000",
            "content": "\nI had other usecases in the past where this was handy too though. I also see folks on the mailing list opening issues so unless we have a similar lightweight replacement I don't see why we should not improve this impl.\n\nI think we can separate improving the internal implementation (which is one thing), from passing allocators/byteblockpools into ctors.\n\nTo me, this is not a good API decision because its essentially malloc() and free(). I don't think we should do it. ",
            "author": "Robert Muir",
            "id": "comment-13487835"
        },
        {
            "date": "2012-10-31T20:48:12+0000",
            "content": "\nsynchronizedAllocator looks unused? I guess you added that after\nremoving all sync from RecyclingByteBlockAllocator ... but I think we\ncan just add synchronizedAllocator back later if/when we need it?\nSeparately can you call out that RecyclingByteBlockAllocator is not\nthread safe in its javadocs?\n\nregarding javadocs, I though I did this... will fix. Regardin sync. yeah lets drop it we can still add if needed, trivial though!\n\n\nI think you need the start ... because if you used more than one slice\nyou won't know how to read \"backwards\" to get to the starting slice?\n\nthe comment is on start but it says \"end\" I think given the fact that we know the freq we can read the slice without storing the end but we'd need to change SliceReader for it and I am not sure if that is worth the trouble we could get in. Yet, 4byte per term though.\n\n\nIf we do that we have to make sure that allocator clears each int[]\nbefore returning it, in getIntBlock().\n\nwe really rely on this in ByteBlockPool already so which likely doesn't work at this time but we don't run into since we don't reuse in DWPT? I will add a test.\n\n\n\nThe added MemoryIndex.reset method is sort of ... spooky? Like, do we\nreally need/want to reuse a MemoryIndex? (I guess this is because we\nadded passing in an allocator to the ctor ... so you want the byte[]'s\nreturned to it ... but that also makes me nervous: should we really\npass in an external allocator...?).\nI think reuse is a special usecase and I guess we should allow it. Yet, I totally agree this is risky. I suggest to make this possible if you subclass and expose this stuff via protected API so if you really really wanna do this you can if you subclass? ",
            "author": "Simon Willnauer",
            "id": "comment-13488217"
        },
        {
            "date": "2012-11-01T12:38:11+0000",
            "content": "the comment is on start but it says \"end\" I think given the fact that we know the freq we can read the slice without storing the end but we'd need to change SliceReader for it and I am not sure if that is worth the trouble we could get in. Yet, 4byte per term though.\n\nAhh I see, right!  It's not needed.  You do need the \"end\" per term as you build up the slices, but once done you can rely entirely on freq.\n\nwe really rely on this in ByteBlockPool already so which likely doesn't work at this time but we don't run into since we don't reuse in DWPT? I will add a test.\n\nHmm if we never reuse in DWPT then we don't need to clear...\n\nI think reuse is a special usecase and I guess we should allow it. Yet, I totally agree this is risky. I suggest to make this possible if you subclass and expose this stuff via protected API so if you really really wanna do this you can if you subclass?\n\nI think if we remove reset(), and then have protected ctor that can pass in the allocator ... maybe that's OK?  Still makes me nervous ... we should mark that ctor experimental ... ",
            "author": "Michael McCandless",
            "id": "comment-13488643"
        },
        {
            "date": "2012-11-01T12:38:45+0000",
            "content": "here is a new patch removing all the nocommits (except of the one that says I should move IntBlockPool to o.a.l.util - I will do that before I commit).\n\nI added more tests. Cleaned up *BlockPool and added javadocs to several places. \n\nMemoryIndex now only allows to reset & specify your own allocator if you are in the same package. If you really need to do this you now can but its not public API neither guaranteed in terms of BWCompat (it's module anyway). I think this is a fair compromise here. ",
            "author": "Simon Willnauer",
            "id": "comment-13488644"
        },
        {
            "date": "2012-11-01T12:47:46+0000",
            "content": "\nwe should mark that ctor experimental ...\n\nIt should definitely be experimental. Tomorrow we might decide its cleaner to encode this with RAMFile or something. ",
            "author": "Robert Muir",
            "id": "comment-13488655"
        },
        {
            "date": "2012-11-01T12:50:48+0000",
            "content": "It should definitely be experimental. Tomorrow we might decide its cleaner to encode this with RAMFile or something.\nwait it's package private not protected so no need to annotate this really. We can change as we want.\n ",
            "author": "Simon Willnauer",
            "id": "comment-13488660"
        },
        {
            "date": "2012-11-01T13:05:12+0000",
            "content": "What makes me nervous is the precedent of passing allocators to APIs of our public classes (even if the API is package private) ...\n\nMaybe we should fork off a separate issue to discuss the reuse / allocators?  The rest of this patch looks awesome  ",
            "author": "Michael McCandless",
            "id": "comment-13488673"
        },
        {
            "date": "2012-11-01T13:23:20+0000",
            "content": "I have two concerns:\n1. the passing of allocators to public classes (Mike's concern). Why cant we just have a method like reset()? This is way cleaner, the datastructure is no longer exposed.\n2. the whole idea that this is \"expert\". e.g. highlighting isnt fast unless you use crazy apis that only ES/Solr use. This just makes lucene less useable as a whole. Instead of hacking around the highlighter here with BlockPoolAllocators: we should fix the highlighter to work well by default. e.g. it should have a sugar method like highlight(TopDocs) that uses MemoryIndex.reset() behind the scenes. This would be a simple and easy method for anyone to use.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13488684"
        },
        {
            "date": "2012-11-01T13:42:53+0000",
            "content": "ok I will try to summarize this again. I have 2 issues. \n\n1. reduce the GC load on MemIndex if it is used extensively - that is why I moved to ByteBlockPool / IntBlockPool\n2. control memory consumption / buffering in a very flexible way. When buffers are reused and how many of them. \n\nI don't give a fuck about highlighting at this point. I want to solve the issue with mem index that exists today and if rob wants to solve highlighing ok fine go for it but that is unrelated. I already removed all the changes to WeightedSpanTermExtractor in the latest patch. I really really don't see the big problems here to allow expert users to have more control over it. This patch fixes the 1. problem for everybody and allows folks with problem 2. to make use of allocators yet with lots of effort (subclass + same package). This makes robs 2. concern invalid really. ",
            "author": "Simon Willnauer",
            "id": "comment-13488694"
        },
        {
            "date": "2012-11-01T19:14:50+0000",
            "content": "\n1. reduce the GC load on MemIndex if it is used extensively - that is why I moved to ByteBlockPool / IntBlockPool\n2. control memory consumption / buffering in a very flexible way. When buffers are reused and how many of them.\n\nI think the current patch, minus passing allocator to MemoryIndex, solves #1 very well?\n\nI think we should open a new Jira issue for #2 since it's apparently somewhat controversial.  In that issue I'd really like to understand \"the memory consumption / buffering in a very flexible way / when buffers are reused and how many of them\" use cases.  If it's really an accounting issue (knowing how many bytes a given MemoryIndex is consuming) maybe we can expose that in other ways ... eg .sizeInBytes() method, or app passes in a Counter that MemoryIndex updates w/ how much RAM it thinks it's using, or ... something else? ",
            "author": "Michael McCandless",
            "id": "comment-13488947"
        },
        {
            "date": "2012-11-01T21:34:16+0000",
            "content": "alright guys. Here is a new patch that accepts a long instead of the allocators indicating an upper memory bound for reusing buffers in the pools if reset is called. I think this should make everybody happy and we can move forward here! lemme know what you think! ",
            "author": "Simon Willnauer",
            "id": "comment-13489053"
        },
        {
            "date": "2012-11-01T23:26:45+0000",
            "content": "Maybe rename \"maxBufferedBytes\" to \"maxReusedBytes\"?  (Because it says how many bytes can be retained even after reset is called).\n\nI still don't like bringing allocation issues (even a long maxReusedBytes) into our APIs: this is Java.  But since this is package private I guess it's OK.\n\nCan we default it to 0 not 5 MB?  I think on reset() it's very unexpected that this class would still hold onto 5 MB RAM ...\n\nWhy does reset() pass true for reuseFirst...? ",
            "author": "Michael McCandless",
            "id": "comment-13489138"
        },
        {
            "date": "2012-11-02T09:20:14+0000",
            "content": "new patch\n\n\tadded tests for norms\n\trenamed the buffer parameter\n\tdefault the reuse buffer to 0\n\tset reuseFirst = false - not needed (missed that from prev. patch)\n\n\n\nI think its ready - I will commit in a few hours. ",
            "author": "Simon Willnauer",
            "id": "comment-13489325"
        },
        {
            "date": "2012-11-02T10:36:53+0000",
            "content": "+1, thanks Simon! ",
            "author": "Michael McCandless",
            "id": "comment-13489347"
        },
        {
            "date": "2012-11-02T12:50:11+0000",
            "content": "committed to trunk in rev 1404946\nbackported to 4x in rev 1404955\n\nthanks guys ",
            "author": "Simon Willnauer",
            "id": "comment-13489398"
        },
        {
            "date": "2013-03-22T16:21:04+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1404955\n\nLUCENE-4515: Make MemoryIndex more memory efficient ",
            "author": "Commit Tag Bot",
            "id": "comment-13610607"
        }
    ]
}