{
    "id": "LUCENE-7620",
    "title": "UnifiedHighlighter: add target character width BreakIterator wrapper",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "6.4"
        ]
    },
    "description": "The original Highlighter includes a SimpleFragmenter that delineates fragments (aka Passages) by a character width.  The default is 100 characters.\n\nIt would be great to support something similar for the UnifiedHighlighter.  It's useful in its own right and of course it helps users transition to the UH.  I'd like to do it as a wrapper to another BreakIterator \u2013 perhaps a sentence one.  In this way you get back Passages that are a number of sentences so they will look nice instead of breaking mid-way through a sentence.  And you get some control by specifying a target number of characters.  This BreakIterator wouldn't be a general purpose java.text.BreakIterator since it would assume it's called in a manner exactly as the UnifiedHighlighter uses it.  It would probably be compatible with the PostingsHighlighter too.\n\nI don't propose doing this by default; besides, it's easy enough to pick your BreakIterator config.",
    "attachments": {
        "LUCENE_7620_UH_LengthGoalBreakIterator.patch": "https://issues.apache.org/jira/secure/attachment/12845946/LUCENE_7620_UH_LengthGoalBreakIterator.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15803619",
            "date": "2017-01-06T05:28:55+0000",
            "content": "Here's a patch.  I'm calling it LengthGoalBreakIterator.  In time, perhaps we might add some tweaks like a \"slop\" akin to the LuceneRegexFragmenter (in Solr). \n\nJim Ferenczi I thought you might want to take a peek.  I figure this can get into 6.4; I'll commit it this weekend. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15804338",
            "date": "2017-01-06T11:28:14+0000",
            "content": "It looks good David Smiley ! I've started to work on something similar but got caught into something else \nThough I wonder if we should also break the sentence if it's too long ? Maybe the wrapped breakiterator could always be a sentence one and we could use a WordBreakIterator to cut sentences that are too long ? This way it would produce snippets that are similar to the SimpleFragmenter.\nIt could also be done in another breakiterator on top of this one but this would make things over complicated, I guess.\nFor the implementation can you throw an exception on the method that should not be called ? For instance \n\nnext(n)\n\n cannot be implemented efficiently (you need to start from 0 if you want to know the Nth boundary) but currently it returns the Nth boundary of the wrapped break iterator. I think it's better to throw an exception, this way it is obvious that some methods should not be called. \n\nAdditionally I think that we should have a way to change the start and end of a passage when we know all the match that it contains. This is what the FVH is doing and it should be doable in the UH because the passage are created on the fly in forward manner. This is of course not the purpose of this issue and it should be treated as a new feature but I think it would be great to have the same output than the FVH when the max length of the passage is set. \n\n ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15804800",
            "date": "2017-01-06T15:36:48+0000",
            "content": "Though I wonder if we should also break the sentence if it's too long ? Maybe the wrapped breakiterator could always be a sentence one and we could use a WordBreakIterator to cut sentences that are too long ? This way it would produce snippets that are similar to the SimpleFragmenter.\nIt could also be done in another breakiterator on top of this one but this would make things over complicated, I guess.\n\nBy choosing a lengthGoal on the low side; maybe \"too long\" will tend not to be a problem?  Or see my TODO at the top of the file \u2013 essentially choose the break that is closest to the goal instead of always the first following it.  Maybe I'll add that in my next patch.\n\nI don't think we should try to emulate SimpleFragmenter exactly.  We can do a much better job    I like this implementation as a wrapper BreakIterator.... perhaps we'll add a Regex BI one day and then it would simply fit right in.\n\nFor the implementation can you throw an exception on the method that should not be called ? For instance ...(etc)\n\nYeah I could go either way on that... how about assert false : \"not supported/expected\";?  \n\nAdditionally I think that we should have a way to change the start and end of a passage when we know all the match that it contains. This is what the FVH is doing and it should be doable in the UH because the passage are created on the fly in forward manner. This is of course not the purpose of this issue and it should be treated as a new feature but I think it would be great to have the same output than the FVH when the max length of the passage is set.\n\nDefinitely a separate issue.  It wouldn't fit into the BreakIterator abstraction either.  Maybe some Passage post-processor like thing.  Or maybe simply expose sufficient hooks to allow subclassers to do this.  That keeps the UH simpler. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15805199",
            "date": "2017-01-06T18:19:35+0000",
            "content": "\nBy choosing a lengthGoal on the low side; maybe \"too long\" will tend not to be a problem? Or see my TODO at the top of the file \u2013 essentially choose the break that is closest to the goal instead of always the first following it.\n\nYeah depends how the lengthGoal is perceived. I was looking at it as a boundary mainly to solve \"too long\" fragment. And this issue is more about \"too short\" fragments. Maybe a different issue then but I am just afraid that we'll end up with multiple public break iterator impls that must follow a specific pattern to be used.\nAnyway this patch is a start to get better highlighting through custom break iterator and it solves a real issue. Please push to 6.4 if you think it's ready, we can always discuss the next steps in a follow up. \nRegarding the assertion I prefer an IllegalStateException with a clear message but I am maybe too paranoid.\n\n\n\n ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15805972",
            "date": "2017-01-06T22:17:47+0000",
            "content": "Here's an updated patch.  I added assertions not exceptions because if per chance this circumstance happens in production, it's really okay to return possibly the wrong break and have a passage that isn't quite the ideal size rather than throw some exception.\n\nIt now has 2 modes of operation, with 2 corresponding factory methods to clarify which: createMinLength(...) and createTargetLength(...).  The minLength mode might be useful because it's faster (than target).  I think it's more useful than a MaxLength (which still could be added in the future) because a too-long passage can possibly be trimmed by the client, but the reverse is not true \u2013 you can't lengthen a passage that is too short (if it reaches the client talking to a search server).\n\nI did some benchmarking too; which in addition to observing the overhead also served to help ensure it didn't throw exceptions (at least for the test queries & test data).  That never happened though; I squashed bugs in the test and chose sizes to tease out the edge conditions.  In so doing I found a minor bug with CustomSeparatorBreakIterator but I'll leave that for another time.  Benchmarking showed the minLength is noticeably faster than targetLength, maybe 10% overall.  Also, (something I already knew) I observed a \"cheap\" underlying BreakIterator like CustomSeparatorBreakIterator is ~20% faster than a JDK Sentence one.\n\nI'll commit it this weekend or possibly tonight if you review it in-time positively. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15806094",
            "date": "2017-01-06T23:08:27+0000",
            "content": "Very useful!  I like that it decorates an underlying BreakIterator.  For the following method, does it make sense to return the baseIter if the followingIdx < startIndex?  Maybe throw an exception instead or just have an assert that it's less?\n\nThis is subjective, but I find it's more useful to break out the different tests with methods for each condition.  For example: breakAtGoal, breakLessThanGoal, breakMoreThanGoal, breakGoalPlusRandom,  etc. Similar for the defaultSummary tests.  This helps when coming back to the test and helps tease apart if one piece of functionality is broken vs another. ",
            "author": "Timothy M. Rodriguez"
        },
        {
            "id": "comment-15806121",
            "date": "2017-01-06T23:19:14+0000",
            "content": "I think the two methods to create the break iterator are useful but I wonder if the logic to get the boundary could not be simplified.\nIsn't it possible to always invoke baseIter.preceding(targetIdx) and based on isMinimumSize return current() or baseIter.next() ?  ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15806526",
            "date": "2017-01-07T02:21:18+0000",
            "content": "(Tim) For the following method, does it make sense to return the baseIter if the followingIdx < startIndex? Maybe throw an exception instead or just have an assert that it's less?\n\nIt's already asserting (line 124).  Or I'm not understanding you.\n\n(Tim) This is subjective, but I find it's more useful to break out the different tests with methods for each condition. For example: breakAtGoal, breakLessThanGoal, breakMoreThanGoal, breakGoalPlusRandom, etc. Similar for the defaultSummary tests. This helps when coming back to the test and helps tease apart if one piece of functionality is broken vs another.\n\nFair point.  A better compromise in my mind that is not as verbose as your suggestion is to use the \"message\" parameter of the assert methods.  I will do this and upload a new patch tonight.\n\n(Jim) ... but I wonder if the logic to get the boundary could not be simplified. Isn't it possible to always invoke baseIter.preceding(targetIdx) and based on isMinimumSize return current() or baseIter.next() ?\n\nNo; I don't think so. If one looks at preceding(target), you don't know if it's result is closer to the target than the following break or not.  The \"target\" mode of this BI gets the closest break.  Come to think of it, maybe I should rename createTargetLength to be createClosestToLength.  At least it's javadocs are already clear I think? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15806818",
            "date": "2017-01-07T05:10:41+0000",
            "content": "Here's an update to the patch mostly related to testing to clarify what's being tested. And I did the createClosestToLength rename. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15807423",
            "date": "2017-01-07T12:28:38+0000",
            "content": "That makes sense. The tests looks good, . I think it's ready, thanks for doing this David ! ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15808666",
            "date": "2017-01-08T04:10:55+0000",
            "content": "Commit ea49989524e96563f2b9bdd4256012239907882f in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ea49989 ]\n\nLUCENE-7620: UnifiedHighlighter: new LengthGoalBreakIterator wrapper ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15808672",
            "date": "2017-01-08T04:14:31+0000",
            "content": "Commit ff5fdcde422033d9cbe3dbe11f2abda9ee3a408b in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff5fdcd ]\n\nLUCENE-7620: UnifiedHighlighter: new LengthGoalBreakIterator wrapper\n\n(cherry picked from commit ea49989) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15808683",
            "date": "2017-01-08T04:19:58+0000",
            "content": "Thanks for the review feedback Jim & Tim!   6.4 is going to be a great release for the UnifiedHighlighter.  I hope features like this and other improvements this release get more folks using the UH. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15813306",
            "date": "2017-01-10T00:11:07+0000",
            "content": "Me too! ",
            "author": "Timothy M. Rodriguez"
        }
    ]
}