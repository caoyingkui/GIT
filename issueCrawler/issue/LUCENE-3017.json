{
    "id": "LUCENE-3017",
    "title": "FST should differentiate between final vs non-final stop nodes",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I'm breaking out this one improvement from LUCENE-2948...\n\nCurrently, if a node has no outgoing edges (a \"stop node\") the FST\nforcefully marks this as a final node, but it need not do this.  Ie,\nwhether that node is final or not should be orthogonal to whether it\nhas arcs leaving or not.",
    "attachments": {
        "LUCENE-3017.patch": "https://issues.apache.org/jira/secure/attachment/12475991/LUCENE-3017.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-04-11T10:58:40+0000",
            "content": "Patch. ",
            "author": "Michael McCandless",
            "id": "comment-13018278"
        },
        {
            "date": "2011-04-11T11:08:07+0000",
            "content": "Ehm... an automaton with zero-arc nodes that are not final is no no longer an automaton, but a graph of some sort... I mean \u2013 what is the interpretation of an empty non-final node? \"There is no sequence in the input that corresponds to this path and it is a prefix of some path in the input that you can't get from this automaton\", right? \n\nThis slowly becomes very confusing... the patch looks all right, but I'm thinking if the API overall is still clear. ",
            "author": "Dawid Weiss",
            "id": "comment-13018282"
        },
        {
            "date": "2011-04-11T15:55:14+0000",
            "content": "Well... for LUCENE-2948, I need this to handle term prefixes that are\nin the terms index and are also valid terms.\n\nFor example, I could have term \"foo\", a prefix of many other terms\n(\"foobar\", \"foobaz\", etc), and so the path f-o-o is in the terms index\n(pointing to a block that has all these other terms), ie ending on a\nzero-arc node.\n\nIf that ending zero-arc node is final, I know \"foo\" is a valid term\nand I must seek to the block to load it, but if it's not final, I know\nit cannot exist in the index, and I can fail-fast (return NOT_FOUND\nfrom seek(\"foo\")). ",
            "author": "Michael McCandless",
            "id": "comment-13018401"
        },
        {
            "date": "2011-04-11T19:03:53+0000",
            "content": "I know. I was just pointing out the fact that it does get fairly complex, but I don't have any constructive ideas how to make it simpler, so I'll simply shut up now  ",
            "author": "Dawid Weiss",
            "id": "comment-13018511"
        },
        {
            "date": "2011-04-12T12:55:19+0000",
            "content": "I hear you \n\nI think Lucene's needs put \"pressure\" on the traditional FST bounds... so we need to stretch things a bit. ",
            "author": "Michael McCandless",
            "id": "comment-13018819"
        }
    ]
}