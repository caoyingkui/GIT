{
    "id": "LUCENE-5953",
    "title": "Refactor LockFactory usage in Directory",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/store"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "We should remove the setters for the LockFactory from Directory and make the field final. It is a bug to change the LockFactory after creating a directory, because you may break locking (if locks are currently held).\n\nThe LockFactory should be passed on ctor only.\n\nThe other suggestion: Should LockFactory have a directory at all? We moved away from having the lock separately from the index directory. This is no longer a supported configuration (since approx Lucene 2.9 or 3.0). I would like to remove the directory from LockFactory and make it part of the Directory only.",
    "attachments": {
        "LUCENE-5953.patch": "https://issues.apache.org/jira/secure/attachment/12680398/LUCENE-5953.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14135206",
            "author": "Michael McCandless",
            "content": "+1 ",
            "date": "2014-09-16T09:49:06+0000"
        },
        {
            "id": "comment-14136629",
            "author": "Robert Muir",
            "content": "strong +1.\n\nLets simplify and make this safer. I agree too, the interaction between Directory and LockFactory is confusing. \n\nHow can we make this as simple and error-free as possible? ",
            "date": "2014-09-17T01:23:04+0000"
        },
        {
            "id": "comment-14137942",
            "author": "Uwe Schindler",
            "content": "I am also going to remove \"lockPrefix\" completely, it was there to allow to store locks outside index dir and for that a \"hash\" prefix was calculated (back in 2.9). If some specific lock implementation needs that, it can implement this on itsself. Directory should not have to deal with a prefix on the filename. ",
            "date": "2014-09-17T20:36:08+0000"
        },
        {
            "id": "comment-14137951",
            "author": "Michael McCandless",
            "content": "+1 to remove lock prefix. ",
            "date": "2014-09-17T20:42:34+0000"
        },
        {
            "id": "comment-14137993",
            "author": "Uwe Schindler",
            "content": "clearLock() in directory and lockfactory is obsolete, too. It was previously used to release any possible locks, but it is never used by any code in Lucene. To release a lock, you have to call release() on the lock itsself. This was a nice cleanup.\n\nMy proposal:\nLockFactory only has one method: makeLock(Directory, lockName). By that we dont need to pass the directory path. If a lock factory needs the directory it can use it, if not (singleinstance or nolock) it just ignores (or maybe it can use it to key against directory instance - SingleInstanceLockFactory would be easier to implement).\n\nThe directory keeps as it is, it just passes \"this\" to the lock factory (on lowest level, so FilterDirectory wont do this).\n\nThis also removes instanceof checks, because FSLockFactory would simply deny to work together with RAMDirectory.\n\nI will post a patch for review later or tomorrow - this is just a collection of my ideas... ",
            "date": "2014-09-17T21:10:48+0000"
        },
        {
            "id": "comment-14203495",
            "author": "Uwe Schindler",
            "content": "Sorry that it took a while, I was very busy.\n\nAttached is a patch that refactors LockFactory handling. In addition to the discussion before, this one makes handling of locks much simplier:\n\n\tLockFactory is no longer used or exposed by the Directory implementation it is just some factory class, that can be used by a directory to implement makeLock(name). BaseDirectory is the only place where the lockFactory is actually used, its not part of Directory interface.\n\tIndexWriter and all other components solely use Directory.makeLock(name), which returns a Lock instance\n\tFSDirectory subclasses are no longer allowed to take \"null\" as LockFactory instance. You have to pass one explicit (or use a constructor that is documented to take default).\n\tFSLockFactory.getDefault() can be used to get a default instance for the platform used. Currently this always returns NativeFSLockFactory.INSTANCE.\n\tMost lock factories are now singletons: NativeFSLockFactory.INSTANCE, SimpleFSLockFactory.INSTANCE, NoLockFactory.INSTANCE.\n\n\n\nI also rewrote the broken SnapShooter (the way how it locks) in Solr (but not fix it). As it is documented as \"deprecated\" and no longer used, we should remove it in Solr 5.0. I will open another issue about that.\n\nI would like to commit this asap, because the patch may get out of sync very fast. I will now run all test in a loop with explicit -Dtests.directory=... to check all combinations, because disallowing \"null\" as LockFactory may cause hidden bugs. So we should run this patch for a while on Jenkins  ",
            "date": "2014-11-08T16:42:50+0000"
        },
        {
            "id": "comment-14203525",
            "author": "Uwe Schindler",
            "content": "Patch also passes with explicit SimpleFSDirectory and explicit RAMDirectory.\n\nI was only not able to veryify my changes to HDFS and BlockDir (I'm Windows user). It would be good, if Mark Miller could review this. Thanks. ",
            "date": "2014-11-08T18:16:34+0000"
        },
        {
            "id": "comment-14203536",
            "author": "Uwe Schindler",
            "content": "Small update in patch to simplify MMapDirectory testing. ",
            "date": "2014-11-08T18:47:44+0000"
        },
        {
            "id": "comment-14203557",
            "author": "Uwe Schindler",
            "content": "Removed the UnsupportedLockFactory again, because it was just there to be used in BaseDirectory. This is no longer needed, if compound formats directly implement Directory (no need to extend BaseDirectory). ",
            "date": "2014-11-08T19:35:31+0000"
        },
        {
            "id": "comment-14203607",
            "author": "Uwe Schindler",
            "content": "New patch:\n\n\tClarified how FileSwitchDirectory locks - as expected, the lock file is created in the directory where the lock file's extension belongs to.\n\tJavadoc improvements\n\tCleaned up some import statements\n\tTest cleanups\n\n\n\nI think it's ready, ",
            "date": "2014-11-08T21:38:59+0000"
        },
        {
            "id": "comment-14203638",
            "author": "Uwe Schindler",
            "content": "New patch:\n\n\tHdfsLockFactory is now also a singleton\n\tremoved some useless synchronization (LockFactories are immutable)\n\n ",
            "date": "2014-11-08T22:21:49+0000"
        },
        {
            "id": "comment-14203843",
            "author": "Robert Muir",
            "content": "+1, this is an awesome cleanup! ",
            "date": "2014-11-09T08:13:00+0000"
        },
        {
            "id": "comment-14203897",
            "author": "ASF subversion and git services",
            "content": "Commit 1637665 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1637665 ]\n\nLUCENE-5953: Restructure Directory and LockFactory APIs ",
            "date": "2014-11-09T12:18:06+0000"
        },
        {
            "id": "comment-14203910",
            "author": "ASF subversion and git services",
            "content": "Commit 1637674 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1637674 ]\n\nMerged revision(s) 1637665 from lucene/dev/trunk:\nLUCENE-5953: Restructure Directory and LockFactory APIs ",
            "date": "2014-11-09T13:08:18+0000"
        },
        {
            "id": "comment-14203911",
            "author": "Uwe Schindler",
            "content": "I committed this.\n\nI also noticed that (at least on my windows machine), Snapshooter sometimes fails with a crazy NoSuchFileException when trying to write a snapshot. To me it looks like a multi-threading issue, which may not be related to the changes here. We will see on jenkins.\n\nNevertheless, Snapshooter should be removed (as far as I understand from the comments in the code because it is no longer used). ",
            "date": "2014-11-09T13:11:47+0000"
        },
        {
            "id": "comment-14203960",
            "author": "ASF subversion and git services",
            "content": "Commit 1637688 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1637688 ]\n\nLUCENE-5953: Remove obsolete locking ",
            "date": "2014-11-09T15:31:17+0000"
        },
        {
            "id": "comment-14203961",
            "author": "ASF subversion and git services",
            "content": "Commit 1637689 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1637689 ]\n\nMerged revision(s) 1637688 from lucene/dev/trunk:\nLUCENE-5953: Remove obsolete locking ",
            "date": "2014-11-09T15:32:12+0000"
        },
        {
            "id": "comment-14203966",
            "author": "Uwe Schindler",
            "content": "I checked out: Also without this patch applied, TestReplicationHandlerBackup fails in 30% of all tries on Windows (on my machine). Error is always a NoSuchFileException when opening the IndexOutput for some index file on the snapshot directory - which disappeared in the meantime. This is seems to be caused by some deleting on the snapshot dirs in parallel. Looks like the test has problems:\n\n\n   [junit4]   2> 7139 T27 oash.SnapShooter.createSnapshot Creating backup snapshot...\n   [junit4]   2> 7149 T27 oash.SnapShooter.createSnapshot ERROR Exception while creating snapshot java.nio.file.NoSuchFileException: C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr1\\solr\\build\\solr-core\\test\\J0\\temp\\solr.handler.TestReplicationHandlerBackup-B758CE1D69E0AEC1-001\\solr-instance-001\\collection1\\data\\snapshot.20141109154841694\\_0.tip\n   [junit4]   2>        at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:79)\n   [junit4]   2>        at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)\n   [junit4]   2>        at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)\n   [junit4]   2>        at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:230)\n   [junit4]   2>        at java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:430)\n   [junit4]   2>        at java.nio.file.Files.newOutputStream(Files.java:172)\n   [junit4]   2>        at org.apache.lucene.store.FSDirectory$FSIndexOutput.<init>(FSDirectory.java:285)\n   [junit4]   2>        at org.apache.lucene.store.FSDirectory.createOutput(FSDirectory.java:220)\n   [junit4]   2>        at org.apache.lucene.store.Directory.copy(Directory.java:150)\n   [junit4]   2>        at org.apache.lucene.store.MockDirectoryWrapper.copy(MockDirectoryWrapper.java:1030)\n   [junit4]   2>        at org.apache.solr.handler.SnapShooter.copyFile(SnapShooter.java:234)\n   [junit4]   2>        at org.apache.solr.handler.SnapShooter.copyFiles(SnapShooter.java:229)\n   [junit4]   2>        at org.apache.solr.handler.SnapShooter.createSnapshot(SnapShooter.java:139)\n   [junit4]   2>        at org.apache.solr.handler.SnapShooter$1.run(SnapShooter.java:88)\n   [junit4]   2>\n   [junit4]   2> 7159 T22 C1 oasc.SolrCore.execute [collection1] webapp=/solr path=/replication params={command=details} status=0 QTime=10\n   [junit4]   2> 7159 T12 oas.SolrTestCaseJ4.tearDown ###Ending doTestBackup\n\n\n\nI see this unrelated to changes here - I just fixed the obsolete Locking on SnapShooter.java (it was unused), so I set NoLockFactory.INSTANCE on the Snapshot Directory instance. ",
            "date": "2014-11-09T15:50:21+0000"
        },
        {
            "id": "comment-14203997",
            "author": "Uwe Schindler",
            "content": "SOLR-6151 is already there to track test failures. Another Policeman Jenkins server had a similar failure:\n\n\n   [junit4]   2> 218994 T761 oash.SnapShooter.createSnapshot Creating backup snapshot...\n   [junit4]   2> 218996 T761 oash.SnapShooter.createSnapshot ERROR Exception while creating snapshot java.nio.file.NoSuchFileException: /mnt/ssd/jenkins/workspace/Lucene-Solr-trunk-Linux/solr/build/solr-core/test/J1/temp/solr.handler.TestReplicationHandlerBackup-2B253ACE4326502E-001/solr-instance-001/collection1/data/snapshot.20141109233419686/_0.cfe\n   [junit4]   2> \tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n   [junit4]   2> \tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n   [junit4]   2> \tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n   [junit4]   2> \tat sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)\n   [junit4]   2> \tat java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)\n   [junit4]   2> \tat java.nio.file.Files.newOutputStream(Files.java:216)\n   [junit4]   2> \tat org.apache.lucene.store.FSDirectory$FSIndexOutput.<init>(FSDirectory.java:285)\n   [junit4]   2> \tat org.apache.lucene.store.FSDirectory.createOutput(FSDirectory.java:220)\n   [junit4]   2> \tat org.apache.lucene.store.Directory.copy(Directory.java:150)\n   [junit4]   2> \tat org.apache.lucene.store.MockDirectoryWrapper.copy(MockDirectoryWrapper.java:1030)\n   [junit4]   2> \tat org.apache.solr.handler.SnapShooter.copyFile(SnapShooter.java:234)\n   [junit4]   2> \tat org.apache.solr.handler.SnapShooter.copyFiles(SnapShooter.java:229)\n   [junit4]   2> \tat org.apache.solr.handler.SnapShooter.createSnapshot(SnapShooter.java:139)\n   [junit4]   2> \tat org.apache.solr.handler.SnapShooter$1.run(SnapShooter.java:88)\n   [junit4]   2> \n   [junit4]   2> 219000 T754 C133 oasc.SolrCore.execute [collection1] webapp=/solr path=/replication params={command=details} status=0 QTime=0 \n   [junit4]   2> 219002 T748 oas.SolrTestCaseJ4.tearDown ###Ending doTestBackup\n\n ",
            "date": "2014-11-09T17:10:34+0000"
        },
        {
            "id": "comment-14204014",
            "author": "ASF subversion and git services",
            "content": "Commit 1637701 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1637701 ]\n\nLUCENE-5953: Fix null lock factory ",
            "date": "2014-11-09T17:38:56+0000"
        },
        {
            "id": "comment-14204016",
            "author": "ASF subversion and git services",
            "content": "Commit 1637702 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1637702 ]\n\nMerged revision(s) 1637701 from lucene/dev/trunk:\nLUCENE-5953: Fix null lock factory ",
            "date": "2014-11-09T17:39:47+0000"
        },
        {
            "id": "comment-14204118",
            "author": "ASF subversion and git services",
            "content": "Commit 1637743 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1637743 ]\n\nLUCENE-5953: Revert changes to SnapShooter, just remove useless locking. The tests now pass more often, because snapshot directory does not disappear suddenly (its created explicitely before file copying ",
            "date": "2014-11-09T21:20:16+0000"
        },
        {
            "id": "comment-14204120",
            "author": "ASF subversion and git services",
            "content": "Commit 1637744 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1637744 ]\n\nMerged revision(s) 1637743 from lucene/dev/trunk:\nLUCENE-5953: Revert changes to SnapShooter, just remove useless locking. The tests now pass more often, because snapshot directory does not disappear suddenly (its created explicitely before file copying ",
            "date": "2014-11-09T21:21:42+0000"
        },
        {
            "id": "comment-14332594",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:52+0000"
        }
    ]
}