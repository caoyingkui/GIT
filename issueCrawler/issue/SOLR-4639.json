{
    "id": "SOLR-4639",
    "title": "Payloads are not stored properly",
    "details": {
        "affect_versions": "4.1,                                            4.2",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler",
            "update"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "I'm seeing erratic behavior when attaching payloads to terms since 4.1. This seems to coincide with a change in how payloads were stored within Lucene.\n\nI have a simple dynamic field *_ap that processes the field as a payload field type as defined in the standard schema.xml.\n\nUsing the update handler, if I send up the following documents:\n\n [{\"id\":\"1\",\"foo_ap\":\"bar|50\"}},\n{\"id\":\"2\",\"foo_ap\":\"bar|75\"}\n] \n\nThe payload of \"50\" for term bar is used for BOTH documents.\n\nAdditionally, if I upload the following:\n\n [{\"id\":\"1\",\"foo_ap\":\"bar|50 bar|75 bar|100\"}}]\n\nThe payload of 50 is used in all three cases. I've verified this by creating a custom CountPayloadFunction and SumPayloadFunction which shows that there are indeed 3 payloads but the sum is 150.\n\nI've verified that everything works great in 4.0.\n\nThere's some info about the core lucene change here:\n\nhttp://lucene.472066.n3.nabble.com/PayloadFunctions-don-t-work-the-same-since-4-1-tc4049947.html\n\nI use payloads extensively, so this is a real blocker for me.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jim Musil",
            "id": "comment-13615995",
            "date": "2013-03-28T02:48:39+0000",
            "content": "This turned out to be a simple issue in my custom code. Since 4.1, Payloads must now be scored with the offset.\n\nWhereas, prior to 4.1 I could do this:\n\n    @Override public float scorePayload(int doc, int start, int end, BytesRef payload)\n    {\n        // can ignore length here, because we know it is encoded as 4 bytes\n        return PayloadHelper.decodeFloat(payload.bytes);\n    }\n\nI now must do this:\n\n    @Override public float scorePayload(int doc, int start, int end, BytesRef payload)\n    {\n        // can ignore length here, because we know it is encoded as 4 bytes\n        return PayloadHelper.decodeFloat(payload.bytes, payload.offset);\n    } "
        }
    ]
}