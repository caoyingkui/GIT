{
    "id": "LUCENE-7434",
    "title": "Add minNumberShouldMatch parameter to SpanNearQuery",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "On the user list, Saar Carmi asked about a new type of SpanQuery that would allow for something like BooleanQuery's minimumNumberShouldMatch\n\nGiven a set of search terms (t1, t2, t3, ti), return all documents where in a sequence of x=10 tokens at least c=3 of the search terms appear within the sequence.\n\nI think we can modify SpanNearQuery fairly easily to accommodate this.  I'll submit a PR in the next few days.",
    "attachments": {
        "TestMinShouldMatchSpan.java": "https://issues.apache.org/jira/secure/attachment/12827376/TestMinShouldMatchSpan.java",
        "AllPairsNearSpans20160902.patch": "https://issues.apache.org/jira/secure/attachment/12826792/AllPairsNearSpans20160902.patch",
        "FSA for repeating words.PNG": "https://issues.apache.org/jira/secure/attachment/12827597/FSA%20for%20repeating%20words.PNG",
        "a b c d e f mm=3.PNG": "https://issues.apache.org/jira/secure/attachment/12827377/a%20b%20c%20d%20e%20f%20mm%3D3.PNG"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15456390",
            "author": "ASF GitHub Bot",
            "date": "2016-09-01T19:34:19+0000",
            "content": "GitHub user tballison opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/75\n\n    LUCENE-7434, first draft\n\n    LUCENE-7434, first draft\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/tballison/lucene-solr master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/75.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #75\n\n\ncommit c37f1e0d66f1f28a5c83033d9496cc33c55f265e\nAuthor: tballison <tallison@mitre.org>\nDate:   2016-09-01T19:33:55Z\n\n    LUCENE-7434, first draft\n\n "
        },
        {
            "id": "comment-15456405",
            "author": "Mikhail Khludnev",
            "date": "2016-09-01T19:39:31+0000",
            "content": "But this allow to create Span Disjunction Query, which is considered as a black sheep in Lucene herd. I don't know why exactly, but have an idea.    "
        },
        {
            "id": "comment-15456419",
            "author": "Tim Allison",
            "date": "2016-09-01T19:44:01+0000",
            "content": "Sorry, I've been away from Lucene for too long.  Can you explain a bit more? "
        },
        {
            "id": "comment-15456429",
            "author": "Saar Carmi",
            "date": "2016-09-01T19:48:31+0000",
            "content": "Thanks [~tallison@mitre.org] for creating this issue.\n\nIn order to merge threads, I want to clarify that my original question was about limiting the search window as well as the number of matches.\nThe slop  parameter sets the maximum distance allowed between each of the subspans and I was looking to add another parameter for the maximum window in which multiple the sub spans should appear together - between the beginning of the first, to the beginning/end of the last one. "
        },
        {
            "id": "comment-15457878",
            "author": "Paul Elschot",
            "date": "2016-09-02T08:07:06+0000",
            "content": "As it happens I am in slow progress making something for the case minNumberShouldMatch=2, all pairs.\nIn case there is interest in an early version of that, please let me know.\n\nFor the maximum window there will be similar restrictions as for LUCENE-7398. "
        },
        {
            "id": "comment-15457965",
            "author": "Paul Elschot",
            "date": "2016-09-02T08:46:51+0000",
            "content": "This all pairs thing is useful here anyway, so here it is. \nThere is a nocommit for an unfinished corner.\n\nIt splits off DisjunctionSpans from SpanOr and uses that to determine the matching pairs. "
        },
        {
            "id": "comment-15458383",
            "author": "Tim Allison",
            "date": "2016-09-02T12:25:23+0000",
            "content": "Thank you for the clarification.\n\nFrom Saar Carmi on the user list:\n\nAnyway, looking at the issue created I am not sure the description exactly matches what I had in mind \"Add minNumberShouldMatch parameter to SpanNearQuery\"\n\nMy understanding is that  SpanNearQuery will allow the maximum slop between each of the elements. So we have 10 SpanTermQuery with a slope of 3, it could be that the distance between the first and the last occurrence is 30.\n\nY, you're right, that would make a difference.\n\nWait, no, slop is calculated for the entire match, not between each term.  So if you had 10 SpanTermQueries with a slop of 3, the maximum distance would be 13.\n\nSo, y, there is a slight difference between slop and maxSearchWindow.\n\nThis was the example I had before I read your email. \n\n\"a b c\" with minNumberShouldMatch=2 and slop=2 should match this\n\nx a x b x c x\n\nbut it wouldn't match\n\nx a x x x c x\n\n\nWhereas with a maxSearchWindow=5, there would be a hit on both. "
        },
        {
            "id": "comment-15458401",
            "author": "Tim Allison",
            "date": "2016-09-02T12:31:47+0000",
            "content": "Interesting.  Whoa on LUCENE-7398!  What's the use case for minNumberShouldMatch=2, all pairs?  Apologies for my daftness... "
        },
        {
            "id": "comment-15458939",
            "author": "Paul Elschot",
            "date": "2016-09-02T16:14:04+0000",
            "content": "What's the use case for minNumberShouldMatch=2, all pairs?\n\nThis might generalize to higher values of minNumberShouldMatch, and replacing the slop by a window is easy.\n\nFor higher values of minNumberShouldMatch it would probably be good to reuse the implementation from boolean queries. "
        },
        {
            "id": "comment-15458994",
            "author": "Tim Allison",
            "date": "2016-09-02T16:34:35+0000",
            "content": "Ah, ok.  Thank you.  Is my proposed approach flawed for the minNumberShouldMatch component of Saar Carmi's request? "
        },
        {
            "id": "comment-15459041",
            "author": "Paul Elschot",
            "date": "2016-09-02T16:58:33+0000",
            "content": "Is my proposed approach flawed for the minNumberShouldMatch component ... ?\n\nLooking at the code on github here https://github.com/apache/lucene-solr/pull/75/commits/c37f1e0d66f1f28a5c83033d9496cc33c55f265e\nit uses NearSpansOrdered and NearSpansUnOrdered with all subSpans, as usual, see lines 277/278.\n\nI think that is too strict when more than the required number of subSpans are actually present in the segment.\nThe check for presence of subSpans should be at document level, and even then fewer than present might match for the given slop/window.\n\nThe (untested) all pairs code above tries to do that, but only for pairs of subSpans. "
        },
        {
            "id": "comment-15459221",
            "author": "Tim Allison",
            "date": "2016-09-02T18:16:23+0000",
            "content": "I  think that is too strict when more than the required number of subSpans are actually present in the segment.\n\nY, you're right, of course.  Argh.\n\n\n  public void testMinShouldMatch5() throws Exception {\n    //    \"x l x m x n x o x\"\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanTermQuery(new Term(FIELD, \"l\")), new SpanTermQuery(new Term(FIELD, \"m\")), new SpanTermQuery(new Term(FIELD, \"o\"))\n    }, 3, true, 2);\n    Spans spans = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertFinished(spans);//but there should be a match!\n  }\n\n "
        },
        {
            "id": "comment-15463412",
            "author": "Saar Carmi",
            "date": "2016-09-04T19:49:34+0000",
            "content": "If I get it right, this is a minor difference. For my case it should be fine. "
        },
        {
            "id": "comment-15463419",
            "author": "Saar Carmi",
            "date": "2016-09-04T19:55:27+0000",
            "content": "How would minNumberShouldMatch handles multiple occurances of the same term?\n\nFor instance, will the search \"a b c\" with min=2  and slop = 10 match the this \na a \n\nI prefer it will, but maybe this is not the general case and additional parameter should be added to control it? "
        },
        {
            "id": "comment-15469539",
            "author": "Trejkaz",
            "date": "2016-09-07T04:49:36+0000",
            "content": "Dupe of LUCENE-3369? "
        },
        {
            "id": "comment-15469979",
            "author": "Mikhail Khludnev",
            "date": "2016-09-07T08:20:16+0000",
            "content": "attaching TestMinShouldMatchSpan.java my attempt with TermAutomationQuery. This test matches 3 of \"a b c d\" words as a phrase eg. it matches docs\n\nc a b d\na b d a\nalso, it builds nice graphs like a b c d e f mm=3.PNG. Beware %100 finite state pom inside!\nOpinions ?  "
        },
        {
            "id": "comment-15470902",
            "author": "Tim Allison",
            "date": "2016-09-07T15:20:29+0000",
            "content": "Y. Thank you. "
        },
        {
            "id": "comment-15470909",
            "author": "Tim Allison",
            "date": "2016-09-07T15:22:32+0000",
            "content": "Thanks to Trejkaz for pointing out that LUCENE-7434 is a duplicate of LUCENE-3369. "
        },
        {
            "id": "comment-15470952",
            "author": "Tim Allison",
            "date": "2016-09-07T15:39:11+0000",
            "content": "Very cool.  I've been meaning to look into TermAutomatonQueries for a while.  My two concerns: I'm not sure how this could play nicely with the other SpanQueries, and we'd want to integrate multiterm handling. "
        },
        {
            "id": "comment-15471371",
            "author": "Saar Carmi",
            "date": "2016-09-07T18:08:16+0000",
            "content": "Q: Would it match 3 of \"a b c d\" for the doc?\nx a a a "
        },
        {
            "id": "comment-15471795",
            "author": "Mikhail Khludnev",
            "date": "2016-09-07T21:02:57+0000",
            "content": "I think so, if we blow up the seed sequence to a a a B B B c c c d d d. "
        },
        {
            "id": "comment-15474021",
            "author": "Mikhail Khludnev",
            "date": "2016-09-08T14:34:50+0000",
            "content": "attaching a proof for x a a a and a terrific pic for it "
        },
        {
            "id": "comment-15476173",
            "author": "Mikhail Khludnev",
            "date": "2016-09-09T07:13:41+0000",
            "content": "The most intriguing question about TermAutomatonQuery is its' efficiency. Can it load term positions only for those docs which passed term level minShouldMatch condition? eg if someone can experiment, it would be great to search with this query on a huge index and then compare it to to the same query intersected with minShouldMatch disjunction with plain term queries. Will the later speedups TAQ by faster dragging?    "
        },
        {
            "id": "comment-15476373",
            "author": "Michael McCandless",
            "date": "2016-09-09T08:47:59+0000",
            "content": "The most intriguing question about TermAutomatonQuery is its' efficiency. \n\nI think there's plenty of work to be done here.  E.g. LUCENE-6824 would at least rewrite TAQ to simpler queries when possible. "
        }
    ]
}