{
    "id": "LUCENE-5868",
    "title": "JoinUtil support for NUMERIC docValues fields",
    "details": {
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.5"
        ]
    },
    "description": "while polishing SOLR-6234 I found that JoinUtil can't join int dv fields at least. \nI plan to provide test/patch. It might be important, because Solr's join can do that. Please vote if you care!",
    "attachments": {
        "qtj.diff": "https://issues.apache.org/jira/secure/attachment/12774317/qtj.diff",
        "LUCENE-5868-5x.patch": "https://issues.apache.org/jira/secure/attachment/12776167/LUCENE-5868-5x.patch",
        "LUCENE-5868-lambdarefactoring.patch": "https://issues.apache.org/jira/secure/attachment/12774716/LUCENE-5868-lambdarefactoring.patch",
        "LUCENE-5868.patch": "https://issues.apache.org/jira/secure/attachment/12774360/LUCENE-5868.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14648312",
            "author": "Mikhail Khludnev",
            "content": "It seems nobody cares. Closing so far.  ",
            "date": "2015-07-30T21:12:23+0000"
        },
        {
            "id": "comment-14649363",
            "author": "marc schipperheyn",
            "content": "I'd vote for it.  ",
            "date": "2015-07-31T15:38:24+0000"
        },
        {
            "id": "comment-14649469",
            "author": "Mikhail Khludnev",
            "content": "marc schipperheyn what's your usecase? why you can't use SORTED? do you need to join cross cores? Have you had a look at OrdinalMap join? ",
            "date": "2015-07-31T16:56:05+0000"
        },
        {
            "id": "comment-15026577",
            "author": "Alexey Zelin",
            "content": "Numeric type processing added during join query build for single value case and int values. See attached qty.diff ",
            "date": "2015-11-25T10:34:42+0000"
        },
        {
            "id": "comment-15026769",
            "author": "Mikhail Khludnev",
            "content": "Alexey Zelin the patch make sense please pay attention to the following points: \n\n\thttp://wiki.apache.org/lucene-java/HowToContribute\nand save them into the LUCENE-NNNN.patch file. \nRead the patch file. Make sure it includes ONLY the modifications required to fix a single issue. \n\tI suppose we need to cover all existing cases, ie. the scope of the issue should include:\nTermsCollector.MV, TermsCollector.SV, TermsWithScoreCollector.MV, TermsWithScoreCollector.MV.Avg, TermsWithScoreCollector.SV, TermsWithScoreCollector.SV.Avg,... yepp too many, I see.\n\tas an idea to avoid copy-paste by bridging different DV types. NumericDocValues can be adapted to BinaryDocValues\n\tsuch adapter can reuse BytesRefBuilder (giving that BytesRefHash copies bytes)\n\tthe same approach can be done with adapting SortedNumericDocValues to SortedSetDocValues\n\tI suppose it's ok to keep it lenient: silently allow to shoot legs by having different DV types across segments.\n\tAs I understand, TestJoinUtilInt is just a first scratch. I suppose it's worth to accurately expand existing tests:\n\t\n\t\tI suppose TestJoinUtil.testSimple() testSimpleWithScoring() you can add from_num to_num fields into sample docs, and randomly switch these fields for passing into createJoinQuery()\n\t\tin TestJoinUtilInt you are trying to create numeric DV by setDocValuesType(DocValuesType.NUMERIC);, I don't belive it work, and it's handled by UnInvertingReader in run-time. So, I suggest to add NumericDocValuesField and SortedNumericDocValuesField (as mv case) explicitly. But let's randomly switch to existing approach (just add indexed field and rely on UnInvertingReader) just for smoke testing.\n\t\n\t\n\n\n\nI'll handle as separate issues: \n\n\textending TestScoreJoinQPScore.testSimpleWithScoring() for coverage\n\textending TestJoinUtil.test*ValueRandomJoin() for coverage\n\n\n\nBeside of the patch, for further consideration: if we could provide field types by something like Solr Schema/FieldTypes into JoinUtil. such issue would be autodone.  ",
            "date": "2015-11-25T13:36:25+0000"
        },
        {
            "id": "comment-15026932",
            "author": "Alexey Zelin",
            "content": "Added long values support as well as multi value fields support. ",
            "date": "2015-11-25T15:32:43+0000"
        },
        {
            "id": "comment-15030628",
            "author": "Mikhail Khludnev",
            "content": "I decided to attach a wild lambda refactoring first. There is no change functionally. Martijn van Groningen and all lambda-fans, you are kindly invited to have a look at LUCENE-5868-lambdarefactoring.patch. ",
            "date": "2015-11-28T18:54:49+0000"
        },
        {
            "id": "comment-15030686",
            "author": "Mikhail Khludnev",
            "content": "attaching LUCENE-5868.patch. Glue all stuff together. The significant change is introducing a new signature in JoinUtil, you know why:\n\n  public static Query createJoinQuery(String fromField,\n      boolean multipleValuesPerDocument,\n      String toField, \nNumericType numericType,\n      Query fromQuery,\n      IndexSearcher fromSearcher,\n      ScoreMode scoreMode) throws IOException \n\n \nI added existing test in the patch. Test coverage needs to be improved. \n\nOpinions? ",
            "date": "2015-11-28T22:53:08+0000"
        },
        {
            "id": "comment-15030794",
            "author": "David Smiley",
            "content": "Nice work Mikhail!  I love the lambdas.\n\nSome random comments:\n\n\tcoder() could take the field name so that the IllegalArgumentException can report the field in error\n\tplease put spaces after if and around else. This is the dominant style in our codebase, and I prefer it too, FWIW.\n\tcreateCollectorSV() could have one switch instead of an if and then a switch; no?\n\n ",
            "date": "2015-11-29T04:35:14+0000"
        },
        {
            "id": "comment-15031182",
            "author": "Mikhail Khludnev",
            "content": "Thanks, David Smiley! Do you really think this surgery makes sense? \nI addressed your points above. The curios fact is that joining by numbers takes more heap than strings.\nI tried to provide testRandom..() coverage. so far it fails on comparing score values. \nsee recent LUCENE-5868.patch.  ",
            "date": "2015-11-29T21:48:45+0000"
        },
        {
            "id": "comment-15031323",
            "author": "David Smiley",
            "content": "(I edited your comment to correct your reference to me, not a similarly named person)\n\nI think the surgery makes sense.  It adds a useful feature.  The approach leverages the existing underlying BytesRefHash which may not be as optimal as some sort of LongHash or similar but whatever \u2013 progress not perfection.  Should someone care, such improvements could be made later.\n\nI admit I didn't look at the details of your tests; that would take much more time. I was mostly curious about the implementation side and of the lambdas you made reference to. ",
            "date": "2015-11-30T05:04:10+0000"
        },
        {
            "id": "comment-15031595",
            "author": "Martijn van Groningen",
            "content": "+1 this looks good. One small thing, maybe rename the parameter name in the protected `createJoinQuery(...)` method from `termsWithScoreCollector` to just `collector`? ",
            "date": "2015-11-30T09:55:35+0000"
        },
        {
            "id": "comment-15033691",
            "author": "Mikhail Khludnev",
            "content": "Martijn van Groningen, I renamed parameter, yet locally. \n\nIt turns out that random test fails because SortedSetDV omits duplicate values, but SortedNumberDV doesn't that leads to discrepancy in the scores. I changed TestJoinUtil.createContext(int, boolean, boolean) to deduplicate link values. Score asserts still fail.  ",
            "date": "2015-12-01T13:41:22+0000"
        },
        {
            "id": "comment-15035946",
            "author": "Mikhail Khludnev",
            "content": "LUCENE-5868.patch It's done, after all. I had to tweak TestJoinUtil for random tests. Now it generates values ordered similarly for strings, and numbers. It also dedupes values for from, to fields, because numeric docvalues store duplicates and it impact scoring in tests. Now, there is no \"simple\" test coverage for numeric join. I don't think it's necessary, perhaps I'll cover it in simple Solr case.\nI want to commit it next week into trunk and 5.x to let it out in 5.5. Please let me know if you wish to veto it. Reviews and ideas are welcome as usual!!          ",
            "date": "2015-12-02T15:17:02+0000"
        },
        {
            "id": "comment-15036724",
            "author": "Mikhail Khludnev",
            "content": "even more efficient shuffling in test LUCENE-5868.patch ",
            "date": "2015-12-02T22:00:10+0000"
        },
        {
            "id": "comment-15045428",
            "author": "Mikhail Khludnev",
            "content": "I'm going to commit LUCENE-5868.patch in trunk and 5.x then in couple of hours.\n\n\tapplied all suggested changes\n\tamended CHANGES.txt\n\tchecked precommit and javadocs\n\n ",
            "date": "2015-12-07T18:31:13+0000"
        },
        {
            "id": "comment-15045484",
            "author": "ASF subversion and git services",
            "content": "Commit 1718443 from mkhl@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1718443 ]\n\nLUCENE-5868: query-time join for numerics ",
            "date": "2015-12-07T18:56:48+0000"
        },
        {
            "id": "comment-15045520",
            "author": "Mikhail Khludnev",
            "content": "oh.my... there are no \u03bb-s in 5.x. the patch is gonna missing its' most of beauty ",
            "date": "2015-12-07T19:08:12+0000"
        },
        {
            "id": "comment-15045625",
            "author": "Mikhail Khludnev",
            "content": "moved to java7, got LUCENE-5868-5x.patch  ",
            "date": "2015-12-07T20:17:55+0000"
        },
        {
            "id": "comment-15045716",
            "author": "Mikhail Khludnev",
            "content": "fixed some precommit issues in LUCENE-5868-5x.patch ",
            "date": "2015-12-07T20:58:31+0000"
        },
        {
            "id": "comment-15045775",
            "author": "ASF subversion and git services",
            "content": "Commit 1718473 from mkhl@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1718473 ]\n\nLUCENE-5868: query-time join for numerics ",
            "date": "2015-12-07T21:31:07+0000"
        },
        {
            "id": "comment-15045870",
            "author": "Mikhail Khludnev",
            "content": "it passed https://builds.apache.org/job/Lucene-Solr-NightlyTests-trunk/875/console ",
            "date": "2015-12-07T22:16:33+0000"
        },
        {
            "id": "comment-15046157",
            "author": "Steve Rowe",
            "content": "Compilation is failing on branch_5x: https://builds.apache.org/job/Lucene-Artifacts-5.x/1037/ (java8 constructs on a java7 build I imagine): \n\n\n   [javac] Compiling 6 source files to /x1/jenkins/jenkins-slave/workspace/Lucene-Artifacts-5.x/lucene/build/join/classes/test\n   [javac] /x1/jenkins/jenkins-slave/workspace/Lucene-Artifacts-5.x/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java:954: error: cannot find symbol\n   [javac]         assert nextInt == Integer.parseUnsignedInt(uniqueRandomValue,16);\n   [javac]                                  ^\n   [javac]   symbol:   method parseUnsignedInt(String,int)\n   [javac]   location: class Integer\n   [javac] /x1/jenkins/jenkins-slave/workspace/Lucene-Artifacts-5.x/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java:1206: error: cannot find symbol\n   [javac]     final int linkInt = Integer.parseUnsignedInt(linkValue,16);\n   [javac]                                ^\n   [javac]   symbol:   method parseUnsignedInt(String,int)\n   [javac]   location: class Integer\n   [javac] Note: /x1/jenkins/jenkins-slave/workspace/Lucene-Artifacts-5.x/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java uses or overrides a deprecated API.\n   [javac] Note: Recompile with -Xlint:deprecation for details.\n   [javac] 2 errors\n\n ",
            "date": "2015-12-08T01:54:53+0000"
        },
        {
            "id": "comment-15046506",
            "author": "Mikhail Khludnev",
            "content": "I'm going to fix it ",
            "date": "2015-12-08T07:21:19+0000"
        },
        {
            "id": "comment-15046516",
            "author": "ASF subversion and git services",
            "content": "Commit 1718517 from mkhl@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1718517 ]\n\nLUCENE-5868: removing Java8's parseUnsignedInt ",
            "date": "2015-12-08T07:33:16+0000"
        },
        {
            "id": "comment-15047163",
            "author": "Mikhail Khludnev",
            "content": "Oh. Yeah!! 5.x is fixed\nhttps://builds.apache.org/job/Lucene-Solr-Tests-5.x-Java7/3822/changes ",
            "date": "2015-12-08T18:02:54+0000"
        },
        {
            "id": "comment-15048247",
            "author": "Mikhail Khludnev",
            "content": "Suggestions for javadoc are accepted ",
            "date": "2015-12-09T08:02:01+0000"
        },
        {
            "id": "comment-15048745",
            "author": "Mikhail Khludnev",
            "content": "\nIndex: lucene/common-build.xml\n===================================================================\n--- lucene/common-build.xml\t(revision 1718516)\n+++ lucene/common-build.xml\t(working copy)\n@@ -321,6 +321,12 @@\n     </condition>\n   </fail>\n \n+  <fail message=\"Maximum supported Java version is 1.7.\">\n+    <condition>\n+      <hasmethod classname=\"java.lang.Integer\" method=\"parseUnsignedInt\"/>\n+    </condition>\n+  </fail>\n+\t\n   <!-- temporary for cleanup of java.specification.version, to be in format \"x.y\" -->\n   <loadresource property=\"-cleaned.specification.version\">\n     <propertyresource name=\"java.specification.version\"/>\n\n\nThis amendment will keep me from such mistakes in 5.x. Let me know if there is a more regular approach.    ",
            "date": "2015-12-09T14:37:11+0000"
        },
        {
            "id": "comment-15051466",
            "author": "Mikhail Khludnev",
            "content": "raised SOLR-8395 as Solr enablement  ",
            "date": "2015-12-10T18:59:21+0000"
        }
    ]
}