{
    "id": "LUCENE-426",
    "title": "Creating a new index vs. opening an existing one",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "Currently I have to tell the IndexWriter constructor whether I want a new \nindex created or not. The behaviour I'd like is to open an index if one \nexists, or create a new one if it doesn't exist.\n\nNow I check for a 'segments' file in my code to make the choice:\n\nboolean CreateNew=false;\n\n// Create a new index ONLY if one doesn't exist already. Even then, we first \ntry to open\n// an existing index.\nif (!(new java.io.File(IndexPath+\"segments\")).exists()) {\n\tCreateNew=true;\n}\n\ntry {\n\twriter = new IndexWriter(IndexPath, new StandardAnalyzer(), false);\n}\ncatch (IOException e) {\n\tif (CreateNew) \n{\n\t\twriter = new IndexWriter(IndexPath, new StandardAnalyzer(), \ntrue);\n\t}\n\telse \n{\n\t\tthrow e;\n\t}\n}\n\n\nI believe this logic would make more sense inside Lucene.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-08-18T23:17:05+0000",
            "content": "Closing this issue, as there is already a facility for this.  IndexReader.exists() - if that isn't sufficient for \nyour needs, please discuss your needs on the java-user list. ",
            "author": "Erik Hatcher",
            "id": "comment-12322569"
        }
    ]
}