{
    "id": "LUCENE-4814",
    "title": "PagingFieldCollector fails when sorting by String null fields",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [],
        "affect_versions": "4.1",
        "priority": "Minor",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When performing a paginated search sorted by a STRING field, and documents without this field are present in the resultset, PagingFieldCollector stops collecting documents (or collects all documents, depending on sorting order) when one of the these documents are used as \"after\" element for the pagination.\n\nThe reason i have observed is that:\norg.apache.lucene.search.FieldComparator.TermOrdValComparator.compareDocToValue(int doc, BytesRef value) (line 1160) always returns 1 in that case because value is null (\"after\" document sorting field value) whereas docValue (returned by termsIndex.getTerm) is a 0-length BytesRef for documents without that field.\n\nA simple patch can be performed changing only this method with no (apparently) side-effects:\nCurrent:\nif (docValue == null) {\n        if (value == null) {\nPatched:\nif (docValue == null || docValue.length==0) {\n        if (value == null || value.length==0) {\n\nPlease excuse my lack of rigour, I'll try to attach the patch.\nRegards",
    "attachments": {},
    "issue_links": {},
    "comments": []
}