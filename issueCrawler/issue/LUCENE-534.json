{
    "id": "LUCENE-534",
    "title": "CRUD facade on top of Lucene",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "29 mar 2006 kl. 15.43 Erik Hatcher wrote:\n\nLazy loaded fields will be a nice addition to Lucene.   I'm curious why the flag is set at indexing time rather than it being something that is controlled during retrieval somehow.  I'm not sure what that API would look like, but it seems its a decision to be addressed during searching and reading of an index rather than during indexing itself.\n\nI reply:\n\nLazy is nice. Thumbs up!\n\nBut.\n\nI believe the field text persistency feature foolishly lead people to choose Lucene for persistency. \n\nI would prefer if we had identity safe Document and a CRUD pattern that bound them with an object instance. A standard implementation could act just as the current fields do. \n\nPerhaps this has already been discussed in the past. \nPerhaps I should settle with having a facade around Lucene rather than inside to save a few clock ticks.\nPerhaps everybody is not an OO-fundamentalist.\n\nLucene to me is a set of tokens I can search to find my object instances already residing in memory. I use Prevayler for object persistency.\n\nAs things I wrote required more indices I became sick keeping track of writers, searcher, readers, documents, et.c.. So I wrote a facade on top of Lucene that takes care of all the for me.\n\nIt all comes down to four classes: \n\nfinal IndexHandler - one instance per Directory. Builds the index. \nCRUD<E extends Tokenized > - Create, Read, Update, Delete and searches.\nTokenized<E id class> - Any class that shoud be accessible from a Lucene search.\nHit<E extends Tokenized>\n\nIn the end, I do something like this:\n\nLinkedList<Hit<MyClass>> hits = getCRUD().search(new TermQuery(new Term(\"foo\", \"bar\")), getIndexHandler().getSearcher());\n\nI have put it on the Jira in case anyone is interested. Made a small example.\n\nWith some refactoring the pattern would support other implementations than Lucene.",
    "attachments": {
        "se.snigel.lucene.crud.tar.gz": "https://issues.apache.org/jira/secure/attachment/12324744/se.snigel.lucene.crud.tar.gz"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-03-30T10:54:03+0000",
            "content": "my CRUD pattern ",
            "author": "Karl Wettin",
            "id": "comment-12372360"
        },
        {
            "date": "2006-03-30T14:44:46+0000",
            "content": "updated ",
            "author": "Karl Wettin",
            "id": "comment-12372377"
        },
        {
            "date": "2007-07-28T07:44:23+0000",
            "content": "This is an old ugly peice of code. Now gone. ",
            "author": "Karl Wettin",
            "id": "comment-12516147"
        }
    ]
}