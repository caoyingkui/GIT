{
    "id": "SOLR-9599",
    "title": "DocValues performance regression with new iterator API",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I did a quick performance comparison of faceting indexed fields (i.e. docvalues are not stored) using method=dv before and after the new docvalues iterator went in (LUCENE-7407).\n\n5M document index, 21 segments, single valued string fields w/ no missing values.\n\n\n\n\n field cardinality \n new_time / old_time \n\n\n10\n2.01\n\n\n1000\n2.02\n\n\n10000\n1.85\n\n\n100000\n1.56\n\n\n1000000\n1.31\n\n\n\n\n\nSo unfortunately, often twice as slow.\n\nSee followup messages for tests using real docvalues as well.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-05T00:27:30+0000",
            "author": "Yonik Seeley",
            "content": "Here's the form of the request used (tests were run w/ logging at WARN level of course):\n\n2016-10-05 00:25:24.042 INFO  (qtp110456297-16) [   x:collection1] o.a.s.c.S.Request [collection1]  webapp=/solr path=/select params={q=*:*&json.facet={x:{method:dv,+type:terms,field:s10_s,limit:5}}&rows=0&wt=javabin} hits=4993847 status=0 QTime=174\n\n ",
            "id": "comment-15547177"
        },
        {
            "date": "2016-10-05T01:00:51+0000",
            "author": "Yonik Seeley",
            "content": "A quick test of the same fields in the same index shows hits to sorting and function queries as well.\n\nWith a quick manual test, this was 51% faster previously (before LUCENE-7407) for fieldcache fields, and 37% faster for docvalue fields:\n\nhttp://localhost:8983/solr/collection1/query?q=*:*%20mydate_dt:NOW&fl=id&sort=s10_s%20desc,%20s100_s%20desc,%20s1000_s%20desc\n\n\n\nAnd this was 78% faster for fieldcache, and 29% faster for docvalues:\n\nhttp://localhost:8983/solr/collection1/query?q=*:*%20mydate_dt:NOW%20{!func%20v=$vv}&fl=id&vv=add(exists(s10_s),exists(s100_s),exists(s1000_s))\n\n\n\nInteger field function queries were 75% faster, and docvalues were 50% faster:\n\nhttp://localhost:8983/solr/collection1/query?q=mydate_dt:NOW%20{!func%20v=$vv}&fl=id&vv=add(s10_i,s100_i,s1000_i,s10000_i)\n\n\n ",
            "id": "comment-15547253"
        },
        {
            "date": "2016-10-05T03:55:28+0000",
            "author": "Yonik Seeley",
            "content": "I tried some docValue fields this time instead of the fieldcache:\n\n\n\n\n field cardinality \n new_time / old_time \n\n\n10\n1.29\n\n\n1000\n1.23\n\n\n10000\n1.24\n\n\n100000\n1.34\n\n\n1000000\n1.09\n\n\n\n\n ",
            "id": "comment-15547522"
        },
        {
            "date": "2016-10-18T02:43:44+0000",
            "author": "Yonik Seeley",
            "content": "Another docvalues faceting test, this time including the current lucene/solr code +  lucene70 codec (as of 10/17) \nThis test used 10M documents and single valued string fields with 20% of the values missing (i.e. 80% of docs have a value for any given field).  4 concurrent request threads were used with a 4 core CPU.\nNote that the 9/19 index has 24 segments and the 10/17 index has 23 segments.\n\nThis is a table of new_time/old_time, with old_time being an old docvalues index with old code (as of 9/09) before the docvalues iterator cutover:\n\n\n\nfield cardinality\n9/09 code with 9/09 index\n10/17 code with 9/09 index\n 10/17 code with 10/17 index\n\n\n 10 \n 1.00 \n 1.39 \n 1.41 \n\n\n 100 \n 1.00 \n 1.38 \n 1.46 \n\n\n 1000 \n 1.00 \n 1.39 \n 1.42 \n\n\n 10000 \n 1.00 \n 1.35 \n 1.45 \n\n\n\n\n\nSo it looks like we're currently over 40% slower in general for faceting on single valued docvalue fields that have some values missing. ",
            "id": "comment-15584223"
        },
        {
            "date": "2016-10-18T13:47:34+0000",
            "author": "Yonik Seeley",
            "content": "Here's a more thorough/accurate (not by-hand) sorting test on the same index above (docvalue fields, 10M docs, 80% value density).\nBase query = *:*, 4 query threads, finding top 10 documents.\nRepresentative query: \n\nq={!cache%3Dfalse}*:*&fl=id&sort=s10_i+asc,s1000000_i+desc&rows=10&wt=javabin\n\n\n\nResults below in new_time/old_time:\n\none string sort field (fields have cardinality of 10,100,1000,10000,100000, or 1000000): 1.20 \n2 string sort fields, first has cardinality of 10 or 100: 1.27\n2 integer sort fields, first has cardinality of 10 or 100: 1.46\n\n ",
            "id": "comment-15585495"
        },
        {
            "date": "2016-12-15T21:37:19+0000",
            "author": "Otis Gospodnetic",
            "content": "Yonik Seeley all sub-tasks seem to be done/resolved.... should this then be resolved, too? ",
            "id": "comment-15752588"
        },
        {
            "date": "2016-12-15T23:05:48+0000",
            "author": "Yonik Seeley",
            "content": "No, the list of subtasks isn't comprehensive or anything... I added some as needed so I could commit some progress. ",
            "id": "comment-15752788"
        },
        {
            "date": "2017-02-05T15:15:32+0000",
            "author": "Joel Bernstein",
            "content": "I've started performance testing the new iterator API as part of the Apache Calcite integration. In particular I've been testing the ExportWriter's sort and export performance with String fields. So far the performance numbers have been comparable to the random access API. \n\nThe types of Streaming Expressions I've been running look like this:\n\n\nnull(search(enron, q=\"*:*\", fl=\"to\", sort=\"to desc\", qt=\"/export\"))\n\n\n\nThis will export and sort all the values in the \"to\" field in the enron email data set. The null function simply drops are the tuples so we fully isolate the performance of the /export.\n\nI've been using the Direct doc values format for the test, but I'll reindex with the default docValues format this week. But typically my advice to anyone that wants to maximize streaming performance is to use Direct docValues.\n\nCurrently both the old and  new docValues API's perform this operation in 400 ms.\n\nI'll continue to update this thread as I test numerics and different docValues formats, and also increase the size of indexes.\n\nI'll also be testing the performance of field collapsing. ",
            "id": "comment-15853248"
        }
    ]
}