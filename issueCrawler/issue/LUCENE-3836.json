{
    "id": "LUCENE-3836",
    "title": "Most Codec.*Format().*Reader() methods should use SegmentReadState",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/codecs"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Codec formats API for opening readers is inconsistent - sometimes it uses SegmentReadState, in other cases it uses individual arguments that are already available via SegmentReadState. This complicates extending the API, e.g. if additional per-segment state would need to be passed to the readers.",
    "attachments": {
        "LUCENE-3836.patch": "https://issues.apache.org/jira/secure/attachment/12516673/LUCENE-3836.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-01T12:23:07+0000",
            "content": "Patch that implements the change. If there are no objections I'd like to commit this soon. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13219986"
        },
        {
            "date": "2012-03-01T12:43:25+0000",
            "content": "I think this change is OK: I just want to mention that avoiding SegmentReadState \nwas definitely intentional... well most of my issues are really based on\nSegmentWriteState, but I think the whole concept is broken, see below:\n\nSegmentWriteState is bad news, for many codec APIs\nthey would be underpopulated, or even have bogus data!\n\nFor example, what would be SegmentWriteState.numDocs for StoredFieldsWriter?\n\nI understand that at a glance having foo(A) where A has A.B and A.C and A.D seems simpler than foo(B, C),\nbut I think its confusing to pass \"A\" at all if there is an A.D thats somehow bogus, invalid, etc.\n\nIn that case its actually much clearer to pass B and C directly... personally I think we \nshould revisit these 'argument holder' APIs and likely remove them completely.\n\nBecause of that: for most codec APIs I avoided SegmentWriteState and also SegmentReadState (for symmetry). ",
            "author": "Robert Muir",
            "id": "comment-13220003"
        },
        {
            "date": "2012-03-01T14:05:15+0000",
            "content": "I agree catch-all \"argument holder\" classes are dangerous... they can bloat over time and probably lead to bugs... ",
            "author": "Michael McCandless",
            "id": "comment-13220058"
        },
        {
            "date": "2012-03-01T14:45:11+0000",
            "content": "I hear you .. SegmentWriteState is bad, I agree. But the argument about SegmentWriteState is not really applicable to SegmentReadState - write state is mutable and can change under your feet whereas SegmentReadState is immutable, created once in SegmentReader and used only for initialization of format readers. On the other hand, if we insist that we always pass individual arguments around then providing some additional segment-global context to format readers requires changing method signatures (adding arguments).\n\nThe background for this issue is that I started looking at updateable fields, where updates are put in a segment (or reader) of its own and they provide an \"overlay\" for the main segment, with a special codec magic to pull and remap data from the \"overlay\" as the main data is accessed. However, in order to do that I need to provide this data when format readers are initialized. I can't do this when creating a Codec instance (Codec is automatically instantiated) or when creating Codec.*Format(), because format instances are usually shared as well.\n\nSo the idea I had in mind was to use SegmentReaderState uniformly, and put this overlay data in SegmentReadState so that it's passed down to formats during format readers' creation. I'm open to other ideas...  ",
            "author": "Andrzej Bialecki",
            "id": "comment-13220071"
        },
        {
            "date": "2012-03-01T15:08:30+0000",
            "content": "\nThe background for this issue is that I started looking at updateable fields, where updates are put in a segment (or reader) of its own and they provide an \"overlay\" for the main segment, with a special codec magic to pull and remap data from the \"overlay\" as the main data is accessed. However, in order to do that I need to provide this data when format readers are initialized. I can't do this when creating a Codec instance (Codec is automatically instantiated) or when creating Codec.*Format(), because format instances are usually shared as well.\n\nSweet!\n\nCouldn't the stacking/overlaying live \"above\" codec?  Eg, the codec thinks it's reading 3 segments, but really the code above knows there's 1 base segment and 2 stacked on top? ",
            "author": "Michael McCandless",
            "id": "comment-13220082"
        },
        {
            "date": "2012-03-01T15:20:13+0000",
            "content": "I think this could work, too - I would instantiate the \"overlay\" data in SegmentReader, and then I'd create the \"overlay\" codec's format readers in SegmentReader, using the original format readers plus the overlay data. I'll try this approach ... I'll create a separate issue to discuss this.\n\n(The reason I'm doing this at the codec level is that I wanted to avoid heavy mods to SegmentReader, and it's easier to visualize how this data is re-mapped and stacked at the level of fairly simple codec APIs).\n\nLet's close this as won't fix for now. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13220093"
        },
        {
            "date": "2012-03-01T15:42:31+0000",
            "content": "\n(The reason I'm doing this at the codec level is that I wanted to avoid heavy mods to SegmentReader, and it's easier to visualize how this data is re-mapped and stacked at the level of fairly simple codec APIs).\n\nBut SegmentReader is fairly simple these days, its just basically a pointer to a core (SegmentCoreReaders) + deletes.\n\nMaybe it should stay the same, but instead we could have a StackedReader (perhaps a bad name), that points to multiple cores + deletes + mask files or whatever it needs and returns masked enums over the underlying Enums itself (e.g. combining enums from the underlying impls, passing masks down as Bits, and such). SegmentReader would stay as-is. ",
            "author": "Robert Muir",
            "id": "comment-13220105"
        },
        {
            "date": "2012-03-01T16:44:57+0000",
            "content": "Thanks for the insightful comments - this looks promising. I opened LUCENE-3837 to discuss a broader design for updateable fields. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13220149"
        }
    ]
}