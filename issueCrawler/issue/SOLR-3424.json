{
    "id": "SOLR-3424",
    "title": "PhoneticFilterFactory threadsafety bug",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "PhoneticFilterFactory has a static HashMap registry mapping an encoder name to an implementation. There is a ReentrantLock used when the map is modified (when the encoder config specifies a class name).  However, this map, which can be accessed by multiple indexing threads, isn't guarded on any of the reads, which isn't just the common path but also the error messages which dump the registry into the error message.\n\nI realize the likelihood of a problem is extremely slim, but a bug's a bug.",
    "attachments": {
        "SOLR-3424_PhoneticFilterFactory_threadsafety_bug.patch": "https://issues.apache.org/jira/secure/attachment/12525041/SOLR-3424_PhoneticFilterFactory_threadsafety_bug.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-13264686",
            "date": "2012-04-30T06:30:59+0000",
            "content": "The attached patch fixes the problem by basically \"upgrading\" the code to use Guava's MapMaker which is excellent for caches. I keep 2 distinct registries, the constant builtin one, and the custom class one, because there is a distinction between the two which is the capitalization of the keys.  I couldn't have just one MapMaker map because the key lookup of the computed value should be the original class name uncapitalized. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13264688",
            "date": "2012-04-30T06:32:28+0000",
            "content": "And I also noticed that Commons-Codec's Caverphone.class was deprecated for Caverphone2.class so I made that simple change.  The docs say the deprecated one simply forwards calls, so there should be no side-effects of this change. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13264720",
            "date": "2012-04-30T08:15:36+0000",
            "content": "where is the test for the bug?\n\nwhy does this factory have a cache at all?!  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13264730",
            "date": "2012-04-30T08:33:53+0000",
            "content": "The whole design of this cache is wrong:\n\n\tit should not be static, the resolved class lookups should only be cached per instance\n\tthe cache only caches \"resolves\" not instantiations of encoders, the JVM caches Class.forName() lookups, so why cache it again?\n\tTo fix the orginal issue, a ConcurrentHashMap would also be fine\n\tSolr/Lucene use Analyzers which are now enforced to reuse tokenstreams, so the lookup is only done once when IndexWriter starts and a new indexing thread is created\n\n\n\nThe last point tells me: \"remove this cache\" "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13264741",
            "date": "2012-04-30T08:59:51+0000",
            "content": "One thing to add:\n\nthe cache only caches \"resolves\" not instantiations of encoders, the JVM caches Class.forName() lookups, so why cache it again?\n\nYou may argue, that the lookup may be more expensive, as it uses a try..catch block (first try in expected commons package, later try a full class name). I think the chain of Try...Catch with ClassNoFound should be changed to do it more smart: If the name of encoder contains a period (indexOf('.')>=0), look it up as class name, otherwise prefix it with the commons package name. This way, the JVM cache for loaded classes can be used and the cache is completely useless.\n\n\nI like in your fix, that it also changed the broken uppercasing: It should only do that for the builtins, class names itsself are case sensitive.\n\n+1 to remove the cache and only keep the static builtins (and please: as Collections.unmodifiableMap!!!), lookup non-builtins without try...catch(ClassNotFound). The error message should only list the builtins and mention that otherwise the name should be a full class name. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13264976",
            "date": "2012-04-30T15:30:53+0000",
            "content": "Rob: This is a (minor) thread-safety bug and consequently it's not really feasible to test it without a lot of work and without a guarantee at the end that there is no problem, and so it isn't worth it.  Of course if you want to; go for it \n\nUwe: Thanks very much for your comments.  I wasn't sure what the lifecycle of this class was or if/how it is shared; I looked at the javadocs of TokenFilterFactory just now and I think its clearer.  Given that the Factory's init() method is not going to be called frequently, it seems to me that the class name based lookups need not cache at all.  And I also like your suggestion of improving the fallback lookup by looking for a '.'.  BTW I considered wrapping with unmodifiableMap but didn't bother because it's not exposed outside of this class, which is fairly small too, but I will since it seems to be a big deal to you (three exclamation points).  I'll propose another patch later\n\n~ David "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13264986",
            "date": "2012-04-30T15:39:03+0000",
            "content": "Thanks! Thaks for taking care, as I have no time to provide a patch at the moment \n\nbut I will since it seems to be a big deal to you (three exclamation points)\n\n It's not so important, if it's private to the class! I just don't want public code to expose Collections not intended to be modified in a modifiable way, so i am fine with or without unmodifiable. There are also places in Lucene violating this (or use public arrays, which cannot be protected - like CompositeReader.getSequentialSubReaders()). "
        },
        {
            "author": "David Smiley",
            "id": "comment-13265638",
            "date": "2012-05-01T04:20:02+0000",
            "content": "Here is an updated patch. I enhanced the javadocs too, which have become out of date. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13265696",
            "date": "2012-05-01T07:28:43+0000",
            "content": "Hi David,\n\nlooks good, but there is a bug:\nThe refactoring of the REGISTRY static map was an anonymous inner class before (new HashMap() {{ hashmap ctor code }}; (please note double parens). Now it is assigned to a static field, but the initializer code is an inline ctor of the factory, means the initialization runs on every instantiation.\n\n\n\tadd static before the anonymous ctor:\n\nprivate static final Map<String, Class<? extends Encoder>> registry = new HashMap<String, Class<? extends Encoder>>(6);\nstatic {\n registry.put(...\n\n\n\n\n\n\n\tor leave the initializer as it was before (anonymous HashMap subclass with overridden ctor).\n\n\n\nin resolve encoder maybe remove the clazz variable and directly return the result of forName(). I do't like non-final variables initialized with null because that prevents compilation failures on missing initialization and null could be returned - especially with lots of try-catch blocks. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13265698",
            "date": "2012-05-01T07:44:11+0000",
            "content": "Attached is a patch that fixes the initialization bug and improves the reflection code.\n\nOne thing that came into my mind when I looked at the code of PhoneticFilter: I did not find out if Encoders are threadsafe or not. If they aren't or we are not sure (the documentation states nothing), we should create the Encoder class instance in the TokenStream create() method. TokenStreams itsself are only used per thread (iterator pattern), and the Analyzer reuse ensures that we have a separate instance for each thread. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13265703",
            "date": "2012-05-01T08:02:19+0000",
            "content": "Updated patch, I added a testcase for the reflection without package name:\n\n\tI use \"Caverphone2\" as package less name, which is not in the REGISTRY. The returned class should be Caverphone2\n\tI cross-check with the REGISTRY name \"Caverphone\", which should also return the new Caverphone2 encoder, but without reflection\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13265862",
            "date": "2012-05-01T15:28:43+0000",
            "content": "Uwe: Excellent catch RE my \"static\" bug, and I agree on your improvement RE clazz & null.\n\nI tried to ascertain the thread-safety status of Commons-Codec and unfortunately I don't think we can assume it's thread-safe.  I sent an email to their list about this just now: http://apache-commons.680414.n4.nabble.com/Thread-safety-of-Commons-Codec-Encoder-tt4600956.html\n\nSo I agree that we'll have to insatiate one of these in our create() method instead of caching it. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13266333",
            "date": "2012-05-02T04:26:14+0000",
            "content": "My new patch creates & initializes the encoder per call to create(). The testSpeed() tests seem about the same. I also added a test for the maxCodeLen arg, and i documented it too. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13266617",
            "date": "2012-05-02T15:02:11+0000",
            "content": "I'll commit it in ~24 hours. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13267229",
            "date": "2012-05-03T06:05:07+0000",
            "content": "+1\n\nI wanted to review the stock Lucene Analyzer about thread safety, too. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13267233",
            "date": "2012-05-03T06:08:14+0000",
            "content": "There seems to be no Analyzer in Lucene that uses this class. The phonetic package only contains the plain TokenFilters and those are single-thread only. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13267246",
            "date": "2012-05-03T06:35:39+0000",
            "content": "Hi, I looked again at the code and found the following improvement, attached as new patch:\n\nThe reflection based-method lookup should be done in the initialization. The pointer to the method is then saved in a instance field, so the getEncoder() method only needs to invoke. This removes more than half of the reflection cost.\nThe pointer to the method is null, if no maxLength is set.\nI also did some minor cleanups in Exception handling. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13267264",
            "date": "2012-05-03T07:05:26+0000",
            "content": "So it appears the Commons-Codec Encoders are all thread-safe after all:\nhttp://apache-commons.680414.n4.nabble.com/Thread-safety-of-Commons-Codec-Encoder-tt4600956.html "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13267272",
            "date": "2012-05-03T07:26:10+0000",
            "content": "Hi David,\nI don't really trust that thread so I would really go with the current solution. In Lucene 4.0, reuse of TokenStreams is enforced so there is no cost at all by the reflection and the createInstance. I also improved the reflective method call (which has the side effect of being able to print a useful message when the encoder does not support setMaxLen, the old code throwed unspecified and unhelpful Exception).\n\nIn general, the commons encoders might be thread safe, but we use reflection and use any class the user provides and other classes implementing the abstract Encoder interface may not be thread safe (unless this is explicitely specified in their spec / javadocs - which isn't)\n\nAs it costs us nothing (Class.newInstance() is cheap and only called once a new thread is used and the SolrAnalyzer class has to create new TokenStreamComponents), we should stay with the current code. The thread-safety is then ensured by the Analyzer class (it uses thread-locals to reuse TokenStreams).\n\nWhat do you think about my latest patch? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13268053",
            "date": "2012-05-04T02:46:26+0000",
            "content": "Looks good Uwe.\nOne minor nit is that the URL in the class Javadoc to Commons-Codec's Language package should be this URL:\nhttp://commons.apache.org/codec/apidocs/org/apache/commons/codec/language/package-summary.html   which is the one to 1.6; the existing link is older with fewer classes.  We've got this link in both the FilterFactory & Filter.\n\nFeel free to commit if you want or just leave it to me. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13269064",
            "date": "2012-05-05T21:29:00+0000",
            "content": "Hi David,\njust commit it, I am about to leave for business trips (including Lucene Rev) so have not much time.\nUwe "
        },
        {
            "author": "David Smiley",
            "id": "comment-13269106",
            "date": "2012-05-06T02:26:20+0000",
            "content": "Committed to trunk in 1334544.\n\nI left the commons-coded javadoc url as-is since it was finally updated to the latest version. "
        }
    ]
}