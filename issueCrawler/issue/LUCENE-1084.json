{
    "id": "LUCENE-1084",
    "title": "increase default maxFieldLength?",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "To my understanding, Lucene 2.3 will easily index large documents. So shouldn't we get rid of the 10,000 default limit for the field length? 10,000 isn't that much and as Lucene doesn't have any error logging by default, this is a common problem for users that is difficult to debug if you don't know where to look.\n\nA better new default might be Integer.MAX_VALUE.",
    "attachments": {
        "LUCENE-1084.part2.take2.patch": "https://issues.apache.org/jira/secure/attachment/12374995/LUCENE-1084.part2.take2.patch",
        "LUCENE-1084.patch": "https://issues.apache.org/jira/secure/attachment/12373415/LUCENE-1084.patch",
        "LUCENE-1084.part2.patch": "https://issues.apache.org/jira/secure/attachment/12374990/LUCENE-1084.part2.patch",
        "LUCENE-1084.part3.patch": "https://issues.apache.org/jira/secure/attachment/12375009/LUCENE-1084.part3.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-16T10:52:10+0000",
            "content": "+1\n\nUsers frequently trip up on this one, and the fact that we silently truncate at 10,000 tokens is \"unexpected\".  I think the default should be Integer.MAX_VALUE.\n\nHow about doing this for 2.4? ",
            "author": "Michael McCandless",
            "id": "comment-12559440"
        },
        {
            "date": "2008-01-16T13:30:39+0000",
            "content": "Does this break back-compatibility if we change this in a minor version?  ",
            "author": "Grant Ingersoll",
            "id": "comment-12559490"
        },
        {
            "date": "2008-01-16T15:55:05+0000",
            "content": "\n\nDoes this break back-compatibility if we change this in a minor version?\n\nTechnically it does, but I think (guesssing?) most of the time when\nthis limit kicks in, the application (if they knew about it) would\nconsider it a bug?  Ie, fixing this would almost always improve\napplications?\n\nI think most Lucene users are not aware that this truncation is\noccurring (it's not something you'd expect).\n\nOr, are we thinking that there are quite a few applications where\ntruly enormous documents are indexed and this change is going to cause\nmassive slowdown for such applications? ",
            "author": "Michael McCandless",
            "id": "comment-12559549"
        },
        {
            "date": "2008-01-16T16:59:37+0000",
            "content": "I don't know the answer to those questions, I just know we faced similar issues with changing the StandardTokenizer.  It was clearly doing something wrong (incorrectly marking acronyms), yet we had to do the deprecation dance to handle it b/c there may be applications that rely on that functionality.  This one seems a little  less problematic, I agree.  There may, however, be applications out there that occasionally hit a really large document and don't want it to throw off their indexing, so they truncate it.\n\nI think we ought to have a separate discussion on our back compatibility standards on java-dev, as I, personally, think we have some room for improvement when it comes to these kinds of things.   I will kick it off, as it has been something I have been mulling for a while. ",
            "author": "Grant Ingersoll",
            "id": "comment-12559583"
        },
        {
            "date": "2008-01-16T23:12:44+0000",
            "content": "This kind of limit is common on web search engines.  It prevents really big pages that crawlers find causing indexing and search from blowing up (think a 100MB PDF that claims it is a text file).  So changing it might indeed hurt folks who're indexing uncontrolled web content. ",
            "author": "Doug Cutting",
            "id": "comment-12559730"
        },
        {
            "date": "2008-01-17T00:02:41+0000",
            "content": "An alternative to changing the default setting would be to not have a default - make it a required parameter to the IndexWriter constructor.  That way, there is no silent loss (or gain) of content - the user must specify.  \n\nMaybe the type of this extra parameter could be an enumeration, along the lines of BooleanClause.Occur, e.g. IndexWriter.FieldLength.LIMITED and IndexWriter.FieldLength.UNLIMITED.  LIMITED would set the max to the current default, setMaxFieldLimit() would operate as it does currently, and UNLIMITED would set the max to Integer.MAX_VALUE.\n\nThis solution would definitely be a backward-incompatible change, and would have to wait for the 3.0 release. ",
            "author": "Steve Rowe",
            "id": "comment-12559748"
        },
        {
            "date": "2008-01-17T10:14:37+0000",
            "content": "\nThis kind of limit is common on web search engines. It prevents really big pages that crawlers find causing indexing and search from blowing up (think a 100MB PDF that claims it is a text file). So changing it might indeed hurt folks who're indexing uncontrolled web content.\n\nOK, it seems like it's an important safeguard, and risky to change, so\nlet's wait for 3.0.\n\nMaybe we could increase it from 10K --> 100K to reduce the times when\na legit document is truncated?\n\n\nAn alternative to changing the default setting would be to not have a default - make it a required parameter to the IndexWriter constructor. That way, there is no silent loss (or gain) of content - the user must specify.\n\nI think this is a good idea; it basically forces the user to confront\nthe truncation issue up front. ",
            "author": "Michael McCandless",
            "id": "comment-12559887"
        },
        {
            "date": "2008-01-17T18:35:36+0000",
            "content": "Attaching a patch implementing my suggestion to add an explicit maximum field length parameter to IndexWriter constructors.  I named the inner class MaxFieldLength instead of FieldLength.\n\nThe patch deprecates the pre-existing constructors, and adds a new constructor with the added parameter for each of the pre-existing constructors.  As a result, the patch could be applied to the trunk as soon as 2.3 has been released; the deprecated pre-existing constructors would then be removed as part of the 3.0 release.\n\nThe patch also replaces all IndexWriter constructor calls in the tree with their equivalents taking the explicit max field length parameter.  (I excluded IndexModifier, because it is already scheduled for removal as part of the 3.0 release.)\n\nI see that in o.a.l.demo.IndexHTML.java, the max field length is set significantly above the current default limit:\n\n71:   writer = new IndexWriter(index, new StandardAnalyzer(), create);\n72:   writer.setMaxFieldLength(1000000);\n\nShould the above two lines be replaced with the following? (I did not do this in the attached patch):\n\n   writer = new IndexWriter(index, new StandardAnalyzer(), create, \n       IndexWriter.MaxFieldLength.UNLIMITED);\n\nThat is, should the demo use Integer.MAX_VALUE instead of 1,000,000 for the maximum field length? ",
            "author": "Steve Rowe",
            "id": "comment-12560022"
        },
        {
            "date": "2008-01-20T11:00:29+0000",
            "content": "\nThis patch looks great; thanks Steven!\n\nThis forces users to confront, up front, when creating IndexWriter,\nwhether they want to truncate the fields.\n\nIt deprecates all existing IndexWriter ctors, noting that in 3.0 they\nwill be removed, in favor of the version that adds the MaxFieldLength\nargument.\n\nWe can commit this now, and then removed the deprecated APIs in 3.0.\nI think with this change it's OK to leave the default truncation limit\nat 10,000?\n\nI think we can leave the IndexHTML.java with that current large limit?\n\nI plan to commit in a day or two! ",
            "author": "Michael McCandless",
            "id": "comment-12560792"
        },
        {
            "date": "2008-01-25T10:21:59+0000",
            "content": "I just committed this.  Thanks Daniel for opening it, and thanks Steven for the patch! ",
            "author": "Michael McCandless",
            "id": "comment-12562425"
        },
        {
            "date": "2008-02-07T14:00:00+0000",
            "content": "Sorry for the lateness on this, was just looking at another patch that had the deprecated constructor and was going to replace it...\n\nHow, exactly, is one supposed to specify an alternate value for the MaxFieldLength in the constructor when using the IndexWriter.MaxFieldLength constructor when it is private and not extendable?  Or is it that I pass in a LIMITED or UNLIMITED and then immediately go call indexWriter.setMaxFieldLength()?  That doesn't make sense to me from a user's point of view of trying to understand how to set the maxFieldLength, so I feel like I must be missing something. ",
            "author": "Grant Ingersoll",
            "id": "comment-12566600"
        },
        {
            "date": "2008-02-07T15:08:33+0000",
            "content": "Yeah, the intention here was that you specify LIMITED or UNLIMITED enum parameter on creating the IW, and then change the actual limit using setMaxFieldLength.\n\nBut I agree it'd be cleaner if you could actually just set the limit (once) on construction.\n\nI think if we stopped subclassing from Parameter (we don't really need Serializable here?), and made the ctor public, then you could pass in \"new MaxFieldLength(100000)\" to make your own limit? ",
            "author": "Michael McCandless",
            "id": "comment-12566624"
        },
        {
            "date": "2008-02-07T16:12:50+0000",
            "content": "Reopening to attach a patch to allow for (variable) user specification of maximum field length in IndexWriter constructors. ",
            "author": "Steve Rowe",
            "id": "comment-12566662"
        },
        {
            "date": "2008-02-07T16:14:37+0000",
            "content": "I think if we stopped subclassing from Parameter (we don't really need Serializable here?), and made the ctor public, then you could pass in \"new MaxFieldLength(100000)\" to make your own limit?\n\n+1\n\nAttaching a patch implementing this idea. ",
            "author": "Steve Rowe",
            "id": "comment-12566664"
        },
        {
            "date": "2008-02-07T16:52:02+0000",
            "content": "The javadoc description of the MaxFieldLength parameter (mfl) in the IndexWriter constructors is now \"whether or not to limit field lengths\".  \n\nThis should probably be rewritten in light of the change allowing user specification of values other than LIMITED or UNLIMITED.  How's this?:\n\n\n/** ...\n * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n *   via the MaxFieldLength constructor.\n * ...\n */\n\n\n\nAttaching part2.take2 patch including this javadoc change and the MaxFieldLength extension and constructor changes. ",
            "author": "Steve Rowe",
            "id": "comment-12566685"
        },
        {
            "date": "2008-02-07T18:00:18+0000",
            "content": "This looks good!  Thanks Steven.  I'll commit. ",
            "author": "Michael McCandless",
            "id": "comment-12566717"
        },
        {
            "date": "2008-02-07T18:39:08+0000",
            "content": "Mike, I see you added a test for the user-specified max field length - cool.\n\nIt made me think of the IndexHTML.java usage, which should probably be changed to conform to the new style:\n\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create, \n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxFieldLength(1000000);\n\n\n\nshould be:\n\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n\n\n\nHmm, now that I look, I can see several other new IndexWriter() / setMaxFieldLength() sequences that should be changed ... I'll submit a patch shortly. ",
            "author": "Steve Rowe",
            "id": "comment-12566728"
        },
        {
            "date": "2008-02-07T18:49:32+0000",
            "content": "Patch replacing [IW constructor, MFL setter] sequences with IW constructor taking new'd MFL. ",
            "author": "Steve Rowe",
            "id": "comment-12566739"
        },
        {
            "date": "2008-02-07T20:53:35+0000",
            "content": "Good \u2013 I'll commit.  Thanks! ",
            "author": "Michael McCandless",
            "id": "comment-12566791"
        }
    ]
}