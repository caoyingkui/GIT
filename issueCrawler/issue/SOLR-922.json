{
    "id": "SOLR-922",
    "title": "Solr WebApp wide Executor for better efficient management of threads , separating the logic in the thread from the launch of the same.",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "For a different jira - when we were discussing bringing in parallelism through threads and using Executors - encountered a case of using a webapp wide Executor for reusing thread pools for better use of thread resources , instead of thread.start() .  \n\npros:  Custom Request Handlers and other plugins to the Solr App server can use this Executor API to retrieve the executor and just submit the Runnable / Callable impls to get the job done while getting the benefits of a thread pool . This might be necessary as we continue to write plugins to the core architecture and centralizing the threadpools might make it easy to control / prevent global Executor objects across the codebase / recreating them locally ( as they might be expensive ). \n\n\n$ find . -name *.java | xargs grep -nr 'start()'  | grep \"}\"\n\n\n./contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java:377:    }.start();\n./contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java:368:    }.start();\n./src/java/org/apache/solr/handler/SnapPuller.java:382:    }.start();\n./src/java/org/apache/solr/handler/SnapShooter.java:52:    }.start();\n./src/java/org/apache/solr/handler/ReplicationHandler.java:134:      }.start();\n./src/common/org/apache/solr/common/util/ConcurrentLRUCache.java:112:        }.start();",
    "attachments": {
        "ExecServiceTest.java": "https://issues.apache.org/jira/secure/attachment/12396521/ExecServiceTest.java",
        "SOLR-922.patch": "https://issues.apache.org/jira/secure/attachment/12396520/SOLR-922.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12657141",
            "date": "2008-12-16T20:06:38+0000",
            "content": "I can understand why there might be value add in having each SolrCore maintain an Executor (or more likely and ExecutorService) which the SolrCore is responsible for starting up and shutting down, but It's not clear to me what value add Solr would provide by creating a global Executor for custom plugins to use \u2013 It seems like a very generic (not Solr specific) ServletFilter could accomplish the same goal in webapps, or just a simple Static singleton in non webapp code. "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657162",
            "date": "2008-12-16T21:05:13+0000",
            "content": "Ok - I believe having a SolrCore specific Executor/ ExecutorService might work well fine as I believe plugins that are SolrCoreAware can still make use of the same. \n\nThe motivation is to prevent multiple Executor policies (/static objects especially ) locally at each place where we need to launch threads or worse - not using them at all .  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12657279",
            "date": "2008-12-17T04:07:28+0000",
            "content": "hi Kay \nI am in agreement with the general goal of having a central ExecutorService . But the risk is that we will never know that which consumer is eating up the threads and some other consumers will be starved for threads. These things become hard to debug.\n\n\nleave aside DIH because it almost entirely needs its threads and it uses it 100% . And leave aside the classes in common.util\n\nProbably Snapshooter/Snappuller can use that "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657432",
            "date": "2008-12-17T15:59:13+0000",
            "content": "\n\n\n But the risk is that we will never know that which consumer is eating up the threads and some other consumers will be starved for threads. These things become hard to debug.\n\n\n\n\n\nSure. Suppose - we have multiple plugins to the Solr system and consumers are starved for threads, (assuming a uniform ExecutorService) , we can load the number of threads in the thread pool configurable from a property in the Solr System or change the policy of creation ( FixedSize / CachedPools etc. ) at one point and experiment with the same. \n\nOn the other hand - having local ExecutorServices for modules would mean optimizing the problem locally in that module / creating multiple static thread pools , adding to the global memory usage quickly when in reality they cannot be used interchangeably ( A local ExecutorService in DIH - would probably not be accessible to SnapPuller, say).  Having a central control over the resources might be more beneficial in this case.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12657670",
            "date": "2008-12-18T04:39:00+0000",
            "content": "As I have already mentioned , I am supportive of the idea of having a common pool of threads shared across various services\n\nBut, the problem is that means defining an extra API and may be having an extra configuration in say solrconfig.xml\n\nLet us leave aside the contribs (I mean DIH) .In the core there are a few common usecases .\nYou can go ahead and propose an API and let us see how to use it best "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657677",
            "date": "2008-12-18T05:17:12+0000",
            "content": "\n\n\n But, the problem is that means defining an extra API and may be having an extra configuration in say solrconfig.xml\n\n\n\n\n\nSelecting the number of threads in the thread pools / specifying the queuing policy for an even distribution of tasks , are some of the various customizations  that could be implemented for the ExecutorService implementation.  Since DIH and other parts of the solr application server live in the same jvm process - I am not sure why we would like to exclude the same since that would mean multiple resource managers ( thread pools ) in the same process - that would be hard to change / modify if we encounter an OutOfMemoryError (very much possible when there are multiple ExecutorService impls locally ) etc. \n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12657679",
            "date": "2008-12-18T05:34:15+0000",
            "content": "Kay. Go ahead and give a patch anyway "
        },
        {
            "author": "Karthik K",
            "id": "comment-12658215",
            "date": "2008-12-19T23:15:03+0000",
            "content": "The value add of Solr by providing a single point of  ExecutorService is to essentially have a single place of ExecutorPolicy / performance tuning for thread dump / out of resource issue.   \n\n\n\tSolrCore: I am a bit reluctant on this one especially with the design of multi SolrCore because that would mean managing the ExecutorService member when it is shut down  (close ).  This becomes all the more pronounced when SolrCores are re-registered for the same name. I am bit reluctant to go via this path.\n\n\n\n\n\tServletFilter / Outside the web-app :  This would be the ideal place for this - but ideally if it were a non-Singleton pattern - it would be great. This needs more investigation though.\n\n\n\n\n\tCoreContainer :  Given that CoreContainer is more or less a singleton instance (except when used by non-HTTP filter - when another instance seems to be created ) - this can serve the purpose for most of the cases. (at least 4 of the 6 mentioned to begin with ).\n\n\n\nThis becomes all the more pronounced especially on DataImporter.java , when a new thread is started for a delta-import / full-import commands. For one of our cases - we send frequent delta imports and creating thread objects and launching them seems to be taking a big hit. \n\nAttached here is a profiling program - that shows a ~80% improvement in the launch of concurrent units , using ExecutorService ( FixedThreadPool implementation ) as compared to the raw Thread(). start() . \n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12658217",
            "date": "2008-12-19T23:15:37+0000",
            "content": "ExecutorService in  CoreContainer - reused by other modules to launch threads.  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12658218",
            "date": "2008-12-19T23:17:56+0000",
            "content": "Profiling program comparing ExecutorService against Threads when launching. \n\nApproximately ~80% gain in ExecutorService to launch Thread objects (put them into the queue).  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13604359",
            "date": "2013-03-16T18:47:27+0000",
            "content": "SPRING_CLEANING_2013 we can reopen if necessary.  "
        }
    ]
}