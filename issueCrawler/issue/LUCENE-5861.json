{
    "id": "LUCENE-5861",
    "title": "CachingTokenFilter should use ArrayList not LinkedList",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0"
        ]
    },
    "description": "CachingTokenFilter, to my surprise, puts each new AttributeSource.State onto a LinkedList.  I think it should be an ArrayList.  On large fields that get analyzed, there can be a ton of State objects to cache.\n\nI also observe that State is itself a linked list of other State objects.  Perhaps we could take this one step further and do parallel arrays of AttributeImpl, thereby bypassing State.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14083617",
            "author": "Paul Elschot",
            "content": "TeeSinkTokenFilter.SinkTokenStream in the analysis/common module (package o.a.l.analysis.sinks) uses a LinkedList, too.\n\nI also prefer an ArrayList, but I used a LinkedList in PrefillTokenStream of LUCENE-5687 because the existing code uses it and I don't know of any existing performance tests for this.\n\nTo grow an ArrayList would it be good to use ArrayUtil.oversize() ? ",
            "date": "2014-08-02T16:30:03+0000"
        }
    ]
}