{
    "id": "LUCENE-5214",
    "title": "Add new FreeTextSuggester, to handle \"long tail\" suggestions",
    "details": {
        "components": [
            "modules/spellchecker"
        ],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "The current suggesters are all based on a finite space of possible\nsuggestions, i.e. the ones they were built on, so they can only\nsuggest a full suggestion from that space.\n\nThis means if the current query goes outside of that space then no\nsuggestions will be found.\n\nThe goal of FreeTextSuggester is to address this, by giving\npredictions based on an ngram language model, i.e. using the last few\ntokens from the user's query to predict likely following token.\n\nI got the idea from this blog post about Google's suggest:\nhttp://googleblog.blogspot.com/2011/04/more-predictions-in-autocomplete.html\n\nThis is very much still a work in progress, but it seems to be\nworking.  I've tested it on the AOL query logs, using an interactive\ntool from luceneutil to show the suggestions, and it seems to work well.\nIt's fun to use that tool to explore the word associations...\n\nI don't think this suggester would be used standalone; rather, I think\nit'd be a fallback for times when the primary suggester fails to find\nanything.  You can see this behavior on google.com, if you type \"the\nfast and the \", you see entire queries being suggested, but then if\nthe next word you type is \"burning\" then suddenly you see the\nsuggestions are only based on the last word, not the entire query.\n\nIt uses ShingleFilter under-the-hood to generate the token ngrams;\nonce LUCENE-5180 is in it will be able to properly handle a user query\nthat ends with stop-words (e.g. \"wizard of \"), and then stores the\nngrams in an FST.",
    "attachments": {
        "LUCENE-5214.patch": "https://issues.apache.org/jira/secure/attachment/12603236/LUCENE-5214.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-09-15T13:38:19+0000",
            "content": "Current patch, very much work in progress... ",
            "author": "Michael McCandless",
            "id": "comment-13767798"
        },
        {
            "date": "2013-09-15T15:48:06+0000",
            "content": "This looks awesome: I think LUCENE-5180 will resolve a lot of the TODOs?\n\nI'm glad these corner cases of trailing stopwords etc were fixed properly in the analysis chain.\n\nAnd I like the name... ",
            "author": "Robert Muir",
            "id": "comment-13767820"
        },
        {
            "date": "2013-09-16T20:47:46+0000",
            "content": "I looked through the patch but I didn't get it, too late  I'll give it another shot later.\n\nAnyway, the idea is very interesting though \u2013 I wonder how much left-context (regardless of this implementation) one needs for the right prediction (reminds me of Markov chains and generative poetry  ",
            "author": "Dawid Weiss",
            "id": "comment-13768737"
        },
        {
            "date": "2013-09-17T12:01:51+0000",
            "content": "The build method basically just runs all incoming text through the\nindexAnalyzer, appending ShingleFilter on the end to generate the\nngrams.  To \"aggregate\" the ngrams it simply writes them to the\noffline sorter; this is nice and simple but somewhat inefficient in\nhow much transient disk and CPU it needs to sort all the ngrams, but\nit works (thanks Rob)!  It may be better to have an in-memory hash\nthat holds the frequent ngrams, and periodically flushes the \"long\ntail\" to free up RAM.  But this gets more complex... the current code\nis very simple.\n\nAfter sorting the ngrams, it walks them, counting up how many times\neach gram occurred and then adding that to the FST.  Currently, I do\nnothing with the surface form, i.e. the suggester only suggests the\nanalyzed forms, which may be too ... weird?  Though in playing around,\nI think the analysis you generally want to do should be very \"light\",\nso maybe this is OK.\n\nIt can also save the surface form in the FST (I was doing that before;\nit's commented out now), but ... how to disambiguate?  Currently it\nsaves the shortest one.  This also makes the FST even larger.\n\nAt lookup time I again just run through your analyzer + ShingleFilter,\nand then try first to lookup 3grams, failing that to lookup 2grams,\netc.  I need to improve this to do some sort of smoothing like \"real\"\nngram language models do; it shouldn't be this \"hard\" backoff.\n\nAnyway, it's great fun playing with the suggester live (using the simplistic\ncommand-line tool in luceneutil, freedb/suggest.py) to \"explore\" the\nngram language model.  This is how I discovered LUCENE-5180. ",
            "author": "Michael McCandless",
            "id": "comment-13769459"
        },
        {
            "date": "2013-09-18T06:25:07+0000",
            "content": "Pretty cool, thanks Mike. ",
            "author": "Dawid Weiss",
            "id": "comment-13770487"
        },
        {
            "date": "2013-09-30T20:59:28+0000",
            "content": "New patch, resolving all nocommits.  I think it's ready! ",
            "author": "Michael McCandless",
            "id": "comment-13782238"
        },
        {
            "date": "2013-10-01T18:12:39+0000",
            "content": "+1 ",
            "author": "Robert Muir",
            "id": "comment-13783179"
        },
        {
            "date": "2013-10-02T05:14:26+0000",
            "content": "Hey Michael, had a question for you, this may not be the most relevant place to ask but will do anyways.\n\nI was curious to know why you did not implement the load and store methods for your AnalyzingInfixSuggester rather build the index at the ctor? was it because of the fact that they take a Input/output stream? What are your thoughts on generalizing the interface so that the index can be loaded up and stored as it is done by all the other suggesters? ",
            "author": "Areek Zillur",
            "id": "comment-13783660"
        },
        {
            "date": "2013-10-02T14:20:09+0000",
            "content": "I was curious to know why you did not implement the load and store methods for your AnalyzingInfixSuggester rather build the index at the ctor? \n\nWell ... once you .build() the AnalyzingInfixSuggester, it's already \"stored\" since it's backed by an on-disk index.  So this suggester is somewhat different from others (it's not RAM resident ... hmm unless you provide a RAMDir in getDirectory).\n\nIn the ctor, if there's already a previously built suggester, I just open the searcher there.  I suppose we could move that code into load() instead?\n\nwas it because of the fact that they take a Input/output stream?\n\nThat is sort of weird; I think we have an issue open to change that to Directory or maybe IndexInput/Output or something ...\n\nWhat are your thoughts on generalizing the interface so that the index can be loaded up and stored as it is done by all the other suggesters?\n\n+1 to somehow improve the suggester APIs (I think there's yet another issue opened for that).\n\nDo you mean loaded into a RAMDir?\n\nthis may not be the most relevant place to ask but will do anyways.\n\nThat's fine   Just send an email to dev@ next time ...\n\nyour AnalyzingInfixSuggester \n\nIt's not \"mine\"   Anyone can and should go fix it! ",
            "author": "Michael McCandless",
            "id": "comment-13783998"
        },
        {
            "date": "2013-10-02T15:23:52+0000",
            "content": "Commit 1528517 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1528517 ]\n\nLUCENE-5214: add FreeTextSuggester ",
            "author": "ASF subversion and git services",
            "id": "comment-13784065"
        },
        {
            "date": "2013-10-02T15:30:30+0000",
            "content": "Commit 1528521 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1528521 ]\n\nLUCENE-5214: add FreeTextSuggester ",
            "author": "ASF subversion and git services",
            "id": "comment-13784071"
        },
        {
            "date": "2013-10-02T18:00:20+0000",
            "content": "Commit 1528579 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1528579 ]\n\nLUCENE-5214: remove java-7 only @SafeVarargs ",
            "author": "ASF subversion and git services",
            "id": "comment-13784221"
        }
    ]
}