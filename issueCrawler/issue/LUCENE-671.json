{
    "id": "LUCENE-671",
    "title": "Hashtable based Document",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index",
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.9,                                            2.0.0",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I've attached a Document based on a hashtable and a performance test case. It performs better in most cases (all but enumeration by my measurement), but likely uses a larger memory footprint. The Document testcase will fail since it accesses the \"fields\" variable directly and gets confused when it's not the list it expected it to be. \n\nIf nothing else we would be interested in at least being able to extend Document, which is currently declared final. (Anyone know the performance gains on declaring a class final?) Currently we have to maintain a copy of lucene which has methods and classes definalized and overriden. \n\nThere are other classes as well that could be declared non-final (Fieldable comes to mind) since it's possible to make changes for project specific situations in those aswell but that's off-topic.",
    "attachments": {
        "TestBenchDocuments.java": "https://issues.apache.org/jira/secure/attachment/12340849/TestBenchDocuments.java",
        "HashDocument.java": "https://issues.apache.org/jira/secure/attachment/12340848/HashDocument.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-09-14T18:54:56+0000",
            "content": "After some digging: http://www-128.ibm.com/developerworks/java/library/j-jtp1029.html\n\nIf these classes are declared final for performance, it might be worth reconsidering. I know of at least one other development group that has to maintain their own lucene tree for the same reason. (Both of us have had to make changes in FieldsWriter to store extra information about the field)\n\nre: (Fieldable comes to mind)\nYup I meant field, and I'll look into Abstract Field, thanks Mike.  ",
            "author": "Chris",
            "id": "comment-12434769"
        },
        {
            "date": "2006-09-14T19:27:24+0000",
            "content": "The final declaration is not for performance.  It is to keep folks from thinking, if they subclass Document, that instances of their subclass will be returned to them in search results.  To make Documents fully-subclassible one would need to make their serialization extensible. ",
            "author": "Doug Cutting",
            "id": "comment-12434782"
        },
        {
            "date": "2006-09-14T19:59:00+0000",
            "content": "\nCutting:\n> To make Documents fully-subclassible one would need to make their serialization extensible.\n\nI find this a bit strange considering RAMDirectory was not made serializable until a few months ago.. But then it might just have been something preemptive. Or perhaps people serialize documents without adding them to the index? That too sounds quite fishy.\n\nI'm all for definalizing Term and Document as this is something required for my issue 550 index. ",
            "author": "Karl Wettin",
            "id": "comment-12434791"
        },
        {
            "date": "2006-09-15T12:59:53+0000",
            "content": "> It is to keep folks from thinking, if they subclass Document, that instances of their subclass will be returned to them in search results. To make Documents fully-subclassible one would need to make their serialization extensible.\n\nAhhh, that makes sense to me, and I think providing a method for informing the rest of lucene which versions of various classes to use is probably more trouble than it's worth. We'll just maintain our own tree then.\n\nThanks\n ",
            "author": "Chris",
            "id": "comment-12434958"
        }
    ]
}