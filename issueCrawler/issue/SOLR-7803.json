{
    "id": "SOLR-7803",
    "title": "Classloading deadlock in TrieField => refactor date formatting/parsing to static utility class",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "5.2.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "When starting a test Sol instance, it locks up sometimes. We took a thread dump and all threads are trying to load classes via Class.forName() and are stuck in that method. One of these threads got one step further into the <clinit> of TrieField where it creates an internal static instance of TrieDateField (circular dependency). I don't know why this locks up exactly, but this code smells anyway. So I removed that instance and made the used methods static in TrieDateField.\n\nThis does not completely remove the circular dependency, but at least it is no more in <clinit>. For the future someone may extract a util class to remove the circular dependency.",
    "attachments": {
        "SOLR-7803.patch": "https://issues.apache.org/jira/secure/attachment/12745943/SOLR-7803.patch",
        "TrieField.patch": "https://issues.apache.org/jira/secure/attachment/12745837/TrieField.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-17T12:37:10+0000",
            "author": "Uwe Schindler",
            "content": "One of these the threads got one step further into the <clinit> of TrieField where it creates an internal static instance of TrieDateField (circular dependency).\n\nThere is no deadlock in triefield. What is done there is 100% correct according to JVM requirements (classes are allowed to init subclasses from clinit of the parent class.\n\nEspecially as there is no Class#forName() in this code, this cannot have to do with this. If you see Class#forName() in the stack trace, this is more related to other problems, because forName() only appears in stack traces when the initialization is done from reflection.\n\nCould it be that this issue is related to LUCENE-6482, which was fixed in 5.2.1? ",
            "id": "comment-14631260"
        },
        {
            "date": "2015-07-17T12:44:06+0000",
            "author": "Markus Heiden",
            "content": "This problem looks like LUCENE-5573 ",
            "id": "comment-14631263"
        },
        {
            "date": "2015-07-17T12:47:06+0000",
            "author": "Markus Heiden",
            "content": "Stacktrace showing the TrieField thread. All other threads hang at at java.lang.Class.forName0(Native Method). As mentioned above this looks more like LUCENE-5573 and not like LUCENE-6482. As we are using Solr 5.2.1, we should have the bugfix for LUCENE-6482.\n\n\"coreLoadExecutor-6-thread-20-processing-\n{node_name=localhost:18080_solr}\n\" #480 prio=5 os_prio=31 tid=0x00007f9110653000 nid=0x8f03 in Object.wait() [0x000000012b8f2000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.apache.solr.schema.TrieField.<clinit>(TrieField.java:90)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:348)\n\tat org.apache.solr.core.SolrResourceLoader.findClass(SolrResourceLoader.java:485)\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:560)\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:525)\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:518)\n\tat org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:90)\n\tat org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:52)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:152)\n\tat org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:489)\n\tat org.apache.solr.schema.IndexSchema.<init>(IndexSchema.java:175)\n\tat org.apache.solr.schema.IndexSchemaFactory.create(IndexSchemaFactory.java:55)\n\tat org.apache.solr.schema.IndexSchemaFactory.buildIndexSchema(IndexSchemaFactory.java:69)\n\tat org.apache.solr.core.ConfigSetService.createIndexSchema(ConfigSetService.java:102)\n\tat org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:74)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:635)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:381)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:375)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$1.run(ExecutorUtil.java:148)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745) ",
            "id": "comment-14631265"
        },
        {
            "date": "2015-07-17T13:17:26+0000",
            "author": "Uwe Schindler",
            "content": "OK thanks. I think we can look into this, but the easiest implementation to work around such problems is to do it in a similar way like LUCENE-6482: define a static inner (hidden) class that just have one static field: See the \"Holder\" class in the patch there. Then replace all references to this static field by \"Holder.staticField\". This delays the initialization. This is much easier than your patch.\n\nAlthough, I don't think that this is the reason for the problem. A superclass is always allowed to load and instantiate a subclass, this is specified in the JVM. It only gets worse if you have this type of stuff around three classes. In any case, such Holder instances always prevent such problems.\n\nIn my opinion, the correct fix for the \"bad\" design we have here is (unrelated to the class loading deadlock): Refactor the date parsing stuff to a separate Utility class with solely static methods and don't use a TrieDateField instance from the superclass. Both TrieField and TrieDateField use the same set of static methods. The current design is broken, I agree!\n\nDo you have a testcase to reproduce? ",
            "id": "comment-14631321"
        },
        {
            "date": "2015-07-17T13:50:09+0000",
            "author": "Markus Heiden",
            "content": "Sorry, no. We experience this problem when we running our integrations tests, but it happens just in 50% of all runs. We did not figured out what provokes it.\n\nI think my patch makes the situation better and is small (just making the used methods static and change the callers in TrieField). Maybe I should not have extracted the field source. ",
            "id": "comment-14631363"
        },
        {
            "date": "2015-07-17T14:22:47+0000",
            "author": "Uwe Schindler",
            "content": "Yeah leave the fieldsource where it is, that was also my main complaint. This change has nothing to do with the whole problem. I can work on a patch just factoring out the static methods, if you like! ",
            "id": "comment-14631396"
        },
        {
            "date": "2015-07-17T15:34:58+0000",
            "author": "Markus Heiden",
            "content": "That would be nice. I think the methods somehow belong into DateMathParser but I don't understand the context enough to decide whether to move all code to there or not. Thanks for your effort! ",
            "id": "comment-14631478"
        },
        {
            "date": "2015-07-17T16:46:14+0000",
            "author": "Markus Heiden",
            "content": "I re-did the patch. I just made parseMath() static and used formatExternal() for toExternal(). This is not the optimal solution we talked about, but just my prior patch stripped down to the needed changes. ",
            "id": "comment-14631566"
        },
        {
            "date": "2015-07-18T11:33:04+0000",
            "author": "Uwe Schindler",
            "content": "Attached is a patch that refactors the static methods out to a separate class. It is quite huge, because a lot of places in Solr uses TrieDateField statics, without having to do anything with Trie fields at all. So this cleanup was really required, ",
            "id": "comment-14632389"
        },
        {
            "date": "2015-07-18T12:03:19+0000",
            "author": "Uwe Schindler",
            "content": "When backporting to 5.x, I will leave the old public/protected methods/fields as delegators in TrieDateField for backwards compatibility (deprecated with reference to new static class). ",
            "id": "comment-14632404"
        },
        {
            "date": "2015-07-18T14:20:41+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "+1\n\nThanks Uwe! ",
            "id": "comment-14632447"
        },
        {
            "date": "2015-07-20T08:13:27+0000",
            "author": "Uwe Schindler",
            "content": "I did a bit more refactoring:\n\n\trename DateUtils -> DateFormatUtil (the other name was somehow a confusing duplicate, so Eclipse autocomplete showed too much unspecific stuff).\n\tI removed more formatting methods out of TrieDateField. TrieDateField is now as any other Trie(Long|Int|Double|Float)Field - short and compact.\n\n\n\nI will commit this later and add backwards layer in 5.x. All tests pass. ",
            "id": "comment-14633146"
        },
        {
            "date": "2015-07-20T09:07:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1691893 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1691893 ]\n\nSOLR-7803: Prevent class loading deadlock in TrieDateField; refactor date formatting and parsing out of TrieDateField and move to static utility class DateFormatUtil ",
            "id": "comment-14633205"
        },
        {
            "date": "2015-07-20T09:31:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1691898 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1691898 ]\n\nMerged revision(s) 1691893 from lucene/dev/trunk:\nSOLR-7803: Prevent class loading deadlock in TrieDateField; refactor date formatting and parsing out of TrieDateField and move to static utility class DateFormatUtil (includes bw layer) ",
            "id": "comment-14633219"
        },
        {
            "date": "2015-07-20T09:41:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1691900 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1691900 ]\n\nSOLR-7803: Use Java 8 ThreadLocal ",
            "id": "comment-14633229"
        },
        {
            "date": "2015-07-20T09:45:02+0000",
            "author": "Uwe Schindler",
            "content": "I committed and backported + added backwards layer. In trunk I also removed the custom ThreadLocal, ThreadLocal#withInitial(FORMAT_PROTOTYPE::clone) is much more elegant.\n\nIf you see other class loading deadlocks in Solr startup, those can be caused by concurrent core initialization, which may be broken under certain cases. Please open other issues about that. ",
            "id": "comment-14633239"
        },
        {
            "date": "2015-08-26T13:05:56+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713155"
        }
    ]
}