{
    "id": "SOLR-10425",
    "title": "PointFields ignore indexed=\"false\"",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "6.5.1",
            "6.6",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "(NOTE: description below focuses on IntPointField, but problem seems to affect all PointField subclasses)\n\nThere seems to be a disconnect between PointField.createFields -> IntPointField.createField -> PointField.isFieldUsed that results in an org.apache.lucene.document.IntPoint being created for each field value, even if field is indexed=\"false\"\n\nSteps to reproduce...\n\n\nbin/solr -e techproducts\n...\ncurl -X POST -H 'Content-type:application/json' --data-binary '{\n  \"add-field\":{\n     \"name\":\"hoss_points_check\",\n     \"type\":\"pint\",\n     \"stored\":true,\n     \"docValues\":false,\n     \"indexed\":false}\n}' http://localhost:8983/solr/techproducts/schema\n...\ncurl -X POST -H 'Content-type:application/json' --data-binary '[{\"id\":\"HOSS\",\"hoss_points_check\":42}]' 'http://localhost:8983/solr/techproducts/update/json?commit=true'\n...\ncurl 'http://localhost:8983/solr/techproducts/query?q=id:HOSS'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":3,\n    \"params\":{\n      \"q\":\"id:HOSS\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n      {\n        \"id\":\"HOSS\",\n        \"hoss_points_check\":42,\n        \"_version_\":1563795876337418240}]\n  }}\ncurl 'http://localhost:8983/solr/techproducts/query?q=hoss_points_check:42'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":2,\n    \"params\":{\n      \"q\":\"hoss_points_check:42\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n      {\n        \"id\":\"HOSS\",\n        \"hoss_points_check\":42,\n        \"_version_\":1563795876337418240}]\n  }}\n\n\n\nNote that I can search on the doc using the  \"hoss_points_check\" field even though it is docValues=\"false\" indexed=\"false\"",
    "attachments": {
        "SOLR-10425.patch": "https://issues.apache.org/jira/secure/attachment/12862138/SOLR-10425.patch",
        "SOLR-10425_hoss.patch": "https://issues.apache.org/jira/secure/attachment/12862148/SOLR-10425_hoss.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-05T00:53:14+0000",
            "content": "\nAt first glance, I thought maybe this may have been an intentional design choice that tomas made with the mindset of:\n\n\tusers should not declare a \"Point\" field unless they definitely wanted a BKD Point structure on disk\n\tthe \"indexed\" should only apply to creating the Terms based inverted index files, not the BKD points files\n\n\n\nBut this doesn't jive with the existing test configs (such as schema-point.xml) where many point fields explicitly use indexed=\"true\"\n\nIt's also really important to ensure we have some way to support users who want an \"integer\" type field that is stored=\"true\" but don't care about it being searchable/sortable w/o wasting disk space \u2013 even once/if we deprecate/remove TrieIntField}\n\n\n\n\nI believe the fix here is a pretty straight forward: IntPointField.createField should ignore isFieldUsed() and just check field.indexed() \u2013 allthough some other tweaks/null-checks may be needed in PointField.createFields & obviously we should get a lot more tests of these edge cases to smoke those out.\n\ni'm hoping Tom\u00e1s Fern\u00e1ndez L\u00f6bbe  will chime in with a sanity check that i'm not missing some major reason why things work this way before i go too deep down hte rabit hole of writting new tests. ",
            "author": "Hoss Man",
            "id": "comment-15956133"
        },
        {
            "date": "2017-04-05T01:52:36+0000",
            "content": "This is not intentional. My intention with PointFields was always to make them look exactly the same as TrieFields to the end user, so features should work the same way. This needs to be fixed. \nWhat about moving the isFieldUsed() check to createFields(...), and then just checking if indexed=true before calling createField(...)? That way the fix just goes to the superclass, and createField always creates? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15956174"
        },
        {
            "date": "2017-04-05T19:04:42+0000",
            "content": "This is still WIP. Here is an attempt for fixing this issue and some tests. The new tests pass now after the changes in PointField, but other tests fail because we try to use PointInSet query for DV-only fields.  ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15957452"
        },
        {
            "date": "2017-04-05T20:00:36+0000",
            "content": "This patch fixes the issue with the set query ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15957546"
        },
        {
            "date": "2017-04-05T20:20:17+0000",
            "content": "tomas: per our IRC conversation this morning, here's the (test only) patch i've been working on.\n\nthere's still some nocommits around beefing up the multivalued exact query testing that i'll working on after i grab some lunch, but the 2 other things i wanted to draw your attention to (which we probably want to split out into new jiras?)...\n\n\n\tthe test schema explicitly declares many fields as useDocValuesAsStored=\"true\" but that's actually the default based on the schema version=1.6 \u2013 making me suspicious of tests that are depending on that, or tests assuming that other fields don't have that.\n\twhen i tried to write a testNonReturnable it fails for fields that have docvalues \u2013 even using new fields that i explicitly put useDocValuesAsStored=false on.\n\n ",
            "author": "Hoss Man",
            "id": "comment-15957576"
        },
        {
            "date": "2017-04-05T21:07:15+0000",
            "content": "thanks Hoss. \nthe test schema explicitly declares many fields as useDocValuesAsStored=\"true\" but that's actually the default based on the schema version=1.6 \u2013 making me suspicious of tests that are depending on that, or tests assuming that other fields don't have that.\nGood point. Maybe we can explicitly set useDocValuesAsStored=\"true\" in other fields?\nwhen i tried to write a testNonReturnable it fails for fields that have docvalues \u2013 even using new fields that i explicitly put useDocValuesAsStored=false on.\nI'll take a look. In the testInternals method I just added I included this code:\n\nfor (LeafReaderContext leave : ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i, Collections.singleton(field));\n          if (sf.stored()) {\n            assertNotNull(doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n\n\nThat passes the tests... ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15957686"
        },
        {
            "date": "2017-04-05T22:06:24+0000",
            "content": "Merged patch ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15957846"
        },
        {
            "date": "2017-04-05T22:51:30+0000",
            "content": "tomas: i haven't had a change to look at your latest patch, and i have to go offline for the rest of the day, but FWIW here's the whitebox test i was working on...\n\n\n  public void testWhiteboxCreateFields() throws Exception {\n    // TODO: add a \"coverage\" check that all points based dynamic fields in the schema are accounted for?\n    \n    doWhiteboxCreateFields(\"whitebox_p_i_dv\", IntPoint.class, 42, \"42\");\n    doWhiteboxCreateFields(\"whitebox_p_i_mv\", IntPoint.class, 42, \"42\");\n    \n    doWhiteboxCreateFields(\"whitebox_p_i_ni\", IntPoint.class, 42, \"42\");\n\n    // nocommit: TEST ALL THE FIELDS\n\n    \n  }\n  \n  /** nocommit: jdocs, @see callAndCheckCreateFields, verifies same result for all values (string or type specific)\n   */\n  private void doWhiteboxCreateFields(final String fieldName, final Class pointType, final Object... values) throws Exception {\n    List<IndexableField> firstResult = null;\n    for (Object value : values) {\n      List<IndexableField> result = callAndCheckCreateFields(fieldName, pointType, value);\n      assertNotNull(value + \" => null\", result);\n      if (null == firstResult) {\n        firstResult = result;\n      } else {\n        // nocommit: why doesn't this check pass? are some IndexableFields not implementing equals?\n        // assertEquals(firstResult, result);\n      }\n    }\n  }\n\n  /** nocommit: jdocs, returns the result of createFields after doing some sanity checks */\n  private List<IndexableField> callAndCheckCreateFields(final String fieldName, final Class pointType, final Object value) throws Exception {\n\n    \n    final SchemaField sf = h.getCore().getLatestSchema().getField(fieldName);\n\n    final List<IndexableField> results = sf.createFields(value);\n    final Set<IndexableField> resultSet = new LinkedHashSet<>(results);\n    assertEquals(\"duplicates found in results? \" + results.toString(),\n                 results.size(), resultSet.size());\n\n    final Set<Class> resultClasses = new HashSet<>();\n    for (IndexableField f : results) {\n      resultClasses.add(f.getClass());\n      \n      if ( ! sf.hasDocValues() ) {\n        assertFalse(f.toString(),\n                    (f instanceof NumericDocValuesField) ||\n                    (f instanceof SortedNumericDocValuesField));\n      }\n    }\n\n    assertEquals(\"stored\", sf.stored(), resultClasses.contains(StoredField.class));\n    assertEquals(\"indexed\", sf.indexed(), resultClasses.contains(pointType));\n    if (sf.multiValued()) {\n      assertEquals(\"docvalues\", sf.hasDocValues(), resultClasses.contains(SortedNumericDocValuesField.class));\n    } else {\n      assertEquals(\"docvalues\", sf.hasDocValues(), resultClasses.contains(NumericDocValuesField.class));\n    }\n\n    return results;\n  }\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-15957956"
        },
        {
            "date": "2017-04-06T00:30:08+0000",
            "content": "Added testWhiteboxCreateFields to the patch. Testing all the point dynamic fields ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15958098"
        },
        {
            "date": "2017-04-06T17:42:21+0000",
            "content": "Updated patch...\n\n\n\ttestPointFieldMultiValuedExactQuery now includes a \"searchable\" boolean and has callers that pass false\n\tcleaned up nocommits and related dead (test) code for ideas i had that didn't pan out\n\tcleaned up the test javadocs\n\tspun off SOLR-10437 & SOLR-10438 as distinct issues and cited them as appropriate in comments/@AwaitsFix\n\n ",
            "author": "Hoss Man",
            "id": "comment-15959408"
        },
        {
            "date": "2017-04-06T17:42:47+0000",
            "content": "I'm running precommit & full test suite now ... i'll commit & backport this afternoon unless tomas beats me to it. ",
            "author": "Hoss Man",
            "id": "comment-15959411"
        },
        {
            "date": "2017-04-06T19:40:49+0000",
            "content": "Commit 6e5f6fab53b8c6f4acbebd51c346173829a3247a in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6e5f6fa ]\n\nSOLR-10425: Fix indexed=\"false\" on numeric PointFields ",
            "author": "ASF subversion and git services",
            "id": "comment-15959601"
        },
        {
            "date": "2017-04-06T19:41:40+0000",
            "content": "Commit ac2c2adaeb98fb7cd5048be4d16785ed502ece14 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ac2c2ad ]\n\nSOLR-10425: Fix indexed=\"false\" on numeric PointFields\n\n(cherry picked from commit 6e5f6fab53b8c6f4acbebd51c346173829a3247a)\n\nResolved Conflicts:\n 1) 6x still has boost support in createFields\n 2) 6x doesn't have the an iterator based API for DocValues (used in tests)\n\n\tsolr/core/src/java/org/apache/solr/schema/DatePointField.java\n\tsolr/core/src/java/org/apache/solr/schema/DoublePointField.java\n\tsolr/core/src/java/org/apache/solr/schema/FloatPointField.java\n\tsolr/core/src/java/org/apache/solr/schema/IntPointField.java\n\tsolr/core/src/java/org/apache/solr/schema/LongPointField.java\n\tsolr/core/src/java/org/apache/solr/schema/PointField.java ",
            "author": "ASF subversion and git services",
            "id": "comment-15959602"
        },
        {
            "date": "2017-04-06T19:41:44+0000",
            "content": "Commit cf3fc6dc802c244513fb7a8056f477dbf3e731c3 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cf3fc6d ]\n\nSOLR-10425: Merge remote-tracking branch 'refs/remotes/origin/branch_6x' into branch_6x ",
            "author": "ASF subversion and git services",
            "id": "comment-15959603"
        },
        {
            "date": "2017-04-06T19:43:27+0000",
            "content": "NOTE: the backport to 6x was messy because of other API changes, for thatreason i'm not going to push to branch_6_5 (for 6.5.1) until someone else looks over the 6x changes\n\nTom\u00e1s Fern\u00e1ndez L\u00f6bbe: if you think the changes look ok, feel free to push the 6.5 backport \u2013 no need to wait on me. ",
            "author": "Hoss Man",
            "id": "comment-15959606"
        },
        {
            "date": "2017-04-06T21:05:04+0000",
            "content": "Changes look good to me. The conflicts were, #1 in createFIelds (just add the boost) and #2 only in the tests, right? I cherry-picked the 6.x commit locally and I'm running tests in branch_6_5. I'll push that once tests pass. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15959750"
        },
        {
            "date": "2017-04-06T22:00:37+0000",
            "content": "Commit bfa2d837c4695b96096d03d4349e88042c862423 in lucene-solr's branch refs/heads/branch_6_5 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bfa2d83 ]\n\nSOLR-10425: Fix indexed=\"false\" on numeric PointFields\n\n(cherry picked from commit 6e5f6fab53b8c6f4acbebd51c346173829a3247a)\n\nResolved Conflicts:\n 1) 6x still has boost support in createFields\n 2) 6x doesn't have the an iterator based API for DocValues (used in tests)\n\n\tsolr/core/src/java/org/apache/solr/schema/DatePointField.java\n\tsolr/core/src/java/org/apache/solr/schema/DoublePointField.java\n\tsolr/core/src/java/org/apache/solr/schema/FloatPointField.java\n\tsolr/core/src/java/org/apache/solr/schema/IntPointField.java\n\tsolr/core/src/java/org/apache/solr/schema/LongPointField.java\n\tsolr/core/src/java/org/apache/solr/schema/PointField.java ",
            "author": "ASF subversion and git services",
            "id": "comment-15959846"
        }
    ]
}