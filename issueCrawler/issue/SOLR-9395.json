{
    "id": "SOLR-9395",
    "title": "Add ceil/floor bounding to stats calculations",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "In the pull request to be attached we add optional ceil and floor parameters to a field being computed via the stats component. This bounds the stats calculations to ceil to floor inclusive.\n\nFor example, let's say your searching over all the employees.\n\nstats=true&stats.field=employee_age\n\nBut you want to focus on employees aged 18-60 for whatever reason. You can reissue this query as\n\nstats=true&stats.field=\n{!floor=18 ceil=60}\nemployee_age\n\nThis limits the resulting stats calculations to 18-60 inclusive. This functionality also works on date fields (see test in PR).\n\nNow one question might be, why not do this with a filter query? In many cases you don't necessarily want to filter these documents from the main search results. You just want to eliminate outliers from a specific stats calculation. For example, you search your employee database for \"clerks.\" You still want to see all the clerks, even little 16 year old Timmy. But for this particular calculation you just want to focus on folks of traditional working age for whatever reason.\n\nSome notes\n\n\tfloor/ceil are only supported as local params.\n\tworks for date and numeric values\n\tdate math works!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-08-08T19:56:51+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user softwaredoug opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/64\n\n    SOLR-9395 \u2013 Add ceil/floor to stats component\n\n    This pull request limits stats calculations based on local params floor/ceil calculations. As in the following snippet:\n\n    `stats=true&stats.field=\n{!floor=18 ceil=60}\nemployee_age`\n\n    Limits to 18-60 inclusive.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/o19s/lucene-solr stats-component-fences\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/64.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #64\n\n\ncommit 97f457b4ede6fb34a21fad21214b4e5711f037b8\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-07-07T20:47:05Z\n\n    Adds fences in stats component\n\ncommit 084e8702a04be9c99b271a2fe741f62492022bac\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-07-07T20:53:01Z\n\n    Merge branch 'master' into stats-component-fences\n\ncommit 75ac8854285bae41014de38e073aa42d5f9f39de\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-07-28T20:22:48Z\n\n    Adds a test for fence testing\n\ncommit cbd5414c1db927a321dd0df4339874ba91f1c450\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-07-28T20:26:21Z\n\n    Merge branch 'master' into stats-component-fences\n\ncommit 44763fa6a3b827a68d8c8571b01076824606334c\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-08-02T18:53:58Z\n\n    Change to -MAX_VALUE instead of MIN_VALUE; add \"fenced\" in response\n\ncommit de817bdad4fcb0747f6565ff74593ab04d2ac574\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-08-07T01:45:19Z\n\n    Refactors \"fencing\" to ceil/floor bounding\n\ncommit 02ae7c6ba3f0e22c51d08c3ca3dfe5d469301bc5\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-08-07T02:07:59Z\n\n    Adds test for date bounds\n\ncommit 26084192ff96cee19d632c65a0e93ba6f84b628b\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-08-08T19:41:11Z\n\n    Merge remote-tracking branch 'origin/master' into stats-component-fences\n\ncommit fb6142c998207df022a9cc16fda88fc9aeb8fefb\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2016-08-08T19:42:00Z\n\n    Changes boundables to lambdas\n\n ",
            "id": "comment-15412354"
        },
        {
            "date": "2016-08-08T22:47:42+0000",
            "author": "Hoss Man",
            "content": "misc thoughts...\n\nNow one question might be, why not do this with a filter query? In many cases you don't necessarily want to filter these documents from the main search results. You just want to eliminate outliers from a specific stats calculation.\n\nA different question: Rather then adding a customization to the stats params, would it be more generally useful to implement these as new ValueSource wrappers? (along the lines of the existing \"map\" and \"if\" functions) and use them with the existing support for computing stats over arbitrary functions.\n\nSomething like...\n\nstats.field={!func}upperBound(lowerBound(age,18),60)\n\n\n\nwhere lowerBound and upperBound are implemented such that they return the value they are wrapping, but their exists() method only returns true if the constraint is met.  \n\nOr maybe generalize the idea to add a filter function that can wrap another functions but exists() method only returns true if some 1 or more queries all match the document...\n\n\nfunc.filter.q=age:[18 TO 60]\nstats.field={!func}filter(age, $func.filter.q)\n\n\n\nFor that matter \u2013 if we had a novalue() function such that it's exists() method only returns false regardless of the document, we could also just do...\n\n\nstats.field={!func}if(and(gte(age,18),lte(age,60)),age,novalue())\n\n\n\n...those function based approaches all seem like they would have additional value above and beyond just constraining stats that might make them a better general API for this type of problem.\n\n\n\nHowever...\n\nFrom what i've seen skimming the patch, the new floor/ceil params you're proposing wouldn't work quite the same way as what i'm suggesting, because it looks like what you've implemented doesn't actually cause values out of range to be \"ignored\", they are actually explicitly counted in new outOfBounds stat result value \u2013 if we went the function route that wouldn't be there, these \"out of bounds\" docs would just be counted as missing the same as if they didn't have any value in the specified field.\n\ni'm not sure how i feel about the outOfBounds stat value ... part of me thinks it's handy, but part of me thinks it's kind of niche, and people who care about the distinction between that and missing might just as easily care about the distinction between \"below the lower bound\" and \"above the upper bound\" which I think would be just as easy with a function based approach as with a stats specific based approach...\n\n\nstats.field={!func key=18_to_60 mean=true missing=true}if(and(gte(age,18),lte(age,60)),age,novalue())\nstats.field={!func key=under_18_or_unknown count=true}if(lt(age,18),age,novalue())\nstats.field={!func key=over_60_or_unknown count=true}if(gt(age,60),age,novalue())\n\n\n\nin otherwords: if we think people will actually care about  \"out of bounds\", then it seems like a strong argument to go the function route, so they can get specific details of where/how/why values are out of bounds.\n\n\n\nEither way, one large concern I have is over the proposed API using the terms floor and ceil .... we should definitely not use those terms for this purpose, as in the context of math/stats/numeric values they are largely (universally?) interpreted to refer to mapping a \"real\" number to the nearest  \"integer\" value up/down on the \"real\" number scale ... and that is most certainly not at all what's happening here. ",
            "id": "comment-15412599"
        },
        {
            "date": "2016-08-09T03:42:13+0000",
            "author": "David Smiley",
            "content": "So, correct me if I'm wrong, but it appears this feature is essentially just about changing what the JSON Facets API calls the \"domain\" of the stats?  FWIW the JSON Facet API can do this already by hanging stats off of a facet query see https://cwiki.apache.org/confluence/display/solr/Faceted+Search and search for \"Query Facet\" which has an example of a range query then computing the average of some other field \u2013 though it could have been on the same field as the range query of course. ",
            "id": "comment-15412876"
        },
        {
            "date": "2016-08-09T12:39:54+0000",
            "author": "Doug Turnbull",
            "content": "Thanks Hoss Man and David Smiley\n\nLots of good ideas. I'm going to try with the JSON Facets David Smiley\n\nTo your point Hoss Man, does query return exists false if the query doesn't match? If that's the case, perhaps this could be achieved with combining a query with a filter query with a range? Something like \n\n\nstats.field={!func}query($someRangeFilter) \n\nI hadn't tried that, but I wonder if it would work. I'll have to try it and report back... ",
            "id": "comment-15413459"
        },
        {
            "date": "2016-08-09T18:33:44+0000",
            "author": "Doug Turnbull",
            "content": "Hmm that won't work, nm as you'd do stats over a relevance score :-/ yeah you probably need some way of passing up the exists value and/or declaring something as non existent. I'll have to think on it some more ",
            "id": "comment-15413994"
        },
        {
            "date": "2016-08-09T22:05:14+0000",
            "author": "Hoss Man",
            "content": "So, correct me if I'm wrong, but it appears this feature is essentially just about changing what the JSON Facets API calls the \"domain\" of the stats?\n\nThat's a good point \u2013 with classic distributed facets this sort of thing is possible by hanging stats off of pivot facets, but no one has ever implemented hanging stats off of facet.queries, so you can do something like this...\n\n\nhttp://localhost:8983/solr/techproducts/select?q=*:*&stats=true&stats.field={!key=mean_price%20tag=s1%20mean=true}price&rows=0&facet=true&facet.pivot={!stats=s1}inStock\n\n\n\nbut you can't currently do something like these...\n\n\nhttp://localhost:8983/solr/techproducts/select?q=*:*&stats=true&stats.field={!key=mean_price%20tag=s1%20mean=true}price&rows=0&facet=true&facet.query={!stats=s1}inStock:true\nhttp://localhost:8983/solr/techproducts/select?q=*:*&stats=true&stats.field={!key=mean_price%20tag=s1%20mean=true}price&rows=0&facet=true&facet.query={!stats=s1}price:{0%20TO%20*]\n\n\n\n...adding that would be fairly trivial, the biggest complexity is that it would require a response format change for facet.query to support the nested stats response.\n\n\n\n ",
            "id": "comment-15414317"
        }
    ]
}