{
    "id": "SOLR-2092",
    "title": "Use a native priority queue to order facet results",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Deep paging into facets can be improved via use of a native priority queue.\nComparisons will be faster, and there will be less GC.",
    "attachments": {
        "SOLR-2092.patch": "https://issues.apache.org/jira/secure/attachment/12453199/SOLR-2092.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12903185",
            "date": "2010-08-27T02:06:52+0000",
            "content": "Here's a draft patch with only UnInvertedField converted from using BoundedTreeSet to LongPriorityQueue so far.  I haven't performance tested this yet, but I imagine ord->term lookup will remain the dominant cost of large facet.limit objects.  Still, this should help cut down the maximum memory footprint too.\n\nI also managed to reuse the internal array from the priority queue (so now both arrays used to sort term ords are reused from previously allocated arrays). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12903428",
            "date": "2010-08-27T14:30:32+0000",
            "content": "Here's an update that adds the long pq to the single-valued fc method.\nIt also uses the missing count from calculated like all other counts (from the field cache). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12905938",
            "date": "2010-09-03T15:32:41+0000",
            "content": "Performance results:\n\nFaceting on a single valued field with 100K unique values.\nBase doc set size = 100K docs.\nfacet.limit=10\n8 request threads (CPU = 4 core Phenom II)\nAverage response time was measured externally (i.e. includes all request parsing, response writing, etc)\n\n\n\n\nfacet.offset\nms trunk\nms patch\n\n\n0\n18\n17\n\n\n100\n18\n17\n\n\n1000\n23\n17\n\n\n10000\n70\n20\n\n\n100000\n211\n26\n\n\n\n\n\nSo as expected, most of the performance benefit is when you are paging deep, but there are also slight improvements across the board.\n\nI plan on committing soon. "
        }
    ]
}