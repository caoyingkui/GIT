{
    "id": "SOLR-8288",
    "title": "DistributedUpdateProcessor#doFinish should explicitly check and ensure it does not try to put itself into LIR.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "We have to be careful about this because currently, something like a commit is sent over http even to the local node and if that fails for some reason, the leader might try and LIR itself.",
    "attachments": {
        "SOLR-8288.patch": "https://issues.apache.org/jira/secure/attachment/12772206/SOLR-8288.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-13T14:09:53+0000",
            "author": "Mark Miller",
            "content": "First patch. ",
            "id": "comment-15004019"
        },
        {
            "date": "2015-11-13T16:26:56+0000",
            "author": "Mike Drob",
            "content": "+        if (leaderCoreNodeName != null && cloudDesc.getCoreNodeName().equals(leaderCoreNodeName) // we are still same leader\nThis null check is not necessary.\n\n\nIs it worth adding a test where a node tries to put itself into recovery? Not sure if that's something that is actually possible to stub out. ",
            "id": "comment-15004209"
        },
        {
            "date": "2015-11-13T16:42:48+0000",
            "author": "Mark Miller",
            "content": "This null check is not necessary.\n\nI was originally trying to use leaderCoreNodeName for the identity check, in which case you do need the null check. I switched to using the core url for the check, but I have left this null check in - I find it makes it much more explicit that that variable can be null here, rather than just counting on the fact that the equals method will handle the null how we want.\n\nIs it worth adding a test where a node tries to put itself into recovery?\n\nIf you can add a test for this, it would be nice to have, but I don't see a good way to do it without some invasive ugly code. It should probably spin out into it's own JIRA unless something can be done quickly. ",
            "id": "comment-15004246"
        },
        {
            "date": "2015-11-13T18:29:58+0000",
            "author": "Mike Drob",
            "content": "If you can add a test for this, it would be nice to have, but I don't see a good way to do it without some invasive ugly code. It should probably spin out into it's own JIRA unless something can be done quickly.\n\nYea, I don't see an immediately apparent way to do this. Was hoping you knew something I didn't. Filed SOLR-8289. ",
            "id": "comment-15004456"
        },
        {
            "date": "2015-11-13T22:07:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1714271 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1714271 ]\n\nSOLR-8288: DistributedUpdateProcessor#doFinish should explicitly check and ensure it does not try to put itself into LIR. ",
            "id": "comment-15004792"
        },
        {
            "date": "2015-11-13T22:09:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1714272 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1714272 ]\n\nSOLR-8288: DistributedUpdateProcessor#doFinish should explicitly check and ensure it does not try to put itself into LIR. ",
            "id": "comment-15004795"
        },
        {
            "date": "2015-11-13T22:10:37+0000",
            "author": "Mike Drob",
            "content": "+            && !stdNode.getNodeProps().getCoreUrl().equals(leaderProps.getCoreUrl())) { // we do not want to put ourself into LIR\n\nIf we are comparing URLs, then would it make sense to check against the replicaURL that we saw the error on? \n\nreplicaUrl.equals(leaderProps.getCoreUrl()) instead? ",
            "id": "comment-15004799"
        }
    ]
}