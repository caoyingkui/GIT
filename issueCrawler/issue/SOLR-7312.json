{
    "id": "SOLR-7312",
    "title": "\"REST\" API is not REST",
    "details": {
        "components": [
            "documentation",
            "Server"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The documentation refers to a \"REST\" API over and over, and yet I don't see a REST API. I see an HTTP API but not a REST API. Here are a few things the HTTP API does that are not RESTful:\n\n\n\tOffers RPC verbs instead of resources/nouns. (E.g. schema API has commands like \"add-field\", \"add-copy-field\", etc.)\n\tTunnels non-idempotent requests (like creating a core) through idempotent HTTP verb (GET).\n\tTunnels deletes through HTTP GET.\n\tPUT/POST confusion, POST used to update a named resource, such as the Blob API.\n\tReturns `200 OK` HTTP code even when the command fails. (Try adding a field to your schema that already exists. You get `200 OK` and an error message hidden in the payload. Try calling a collections API when you're using non-cloud mode: `200 OK` and an error message in the payload. Gah.)\n\tDoes not provide link relations.\n\tHTTP status line contains a JSON payload  and no 'Content-Type' header for some failed commands, like `curl -X DELETE http://solr:8983/solr/admin/cores/foo`\n\tContent negotiation is done via query parameter (`wt=json`), instead of `Accept` header.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-26T05:12:31+0000",
            "author": "Noble Paul",
            "content": "Yes, it is not a REST API. May be the doc needs some changes. ",
            "id": "comment-14381378"
        },
        {
            "date": "2015-03-26T07:13:12+0000",
            "author": "Shai Erera",
            "content": "How about changing the API to actually conform to RESTful? \n\nI know it would be a huge change (therefore trunk only I believe), just wondering if there is a reason for the current API, where modifying actions are allowed via GET as well. Is it for convenience reasons only, or is there a deeper one? ",
            "id": "comment-14381484"
        },
        {
            "date": "2015-03-26T16:49:45+0000",
            "author": "Noble Paul",
            "content": "How about changing the API to actually conform to RESTful?\n\nThe choice was deliberate. pure REST was inconvenient and inefficient for those commands . We needed bulk commands\n\n\n\tediting the schema/config would result in core reload and doing one at a time means more reloads\n\tWe need to ensure that the editing process is transactional. If I wish to do 10 operations all 10 must either succeed or fail. Partial success is not useful\n\tUsing REST means different payload for unix, windows , web interface\n\tREST means you are interlacing shell commands in your payload \"curl etc\". Which means someone really has to verify if you are performing anything risky because mostly the ops run commands as su\n\n\n\nTo be honest the REST paradigm is terrible from an ops point of view . We should follow standards only if it helps our users ",
            "id": "comment-14382197"
        },
        {
            "date": "2015-03-26T17:20:43+0000",
            "author": "Mark Haase",
            "content": "Hey Paul, I support the idea of changing the docs. `s/REST API/HTTP API/g` would be a fine start.\n\nI don't want to start an argument about what REST means and whether Solr should have a RESTful interface, but most of your reasons for not having it aren't great reasons.\n\nIt's not a standard. Think of REST as a set of properties for API design (in the abstract, not necessarily just APIs implemented on HTTP). Of course, like any word that doesn't have standardized meaning, REST also means differnet things to different people. Solr isn't the first project to misuse the word by any means. (Many people seem to think REST API is synonymous with HTTP API, but it's not. If it was, that would imply that SOAP-over-HTTP == REST, which is false.)\n\n\n\tYou can certainly have bulk \"commands\", except that \"command\" isn't the right word in a resourceful API. You could post an array of schema fields to the schema collection, and that would be a RESTful way to add multiple fields in a single transaction.\n\tYou can also have RESTful transactions. Instead of thinking of transactions as verbs with statefulness (\"START TRANSACTION\"....\"COMMIT\"), think of the transaction as a resource itself.\n\tI don't understand the comment about \"different payload for unix, windows, web interface.\" Do you mean the request body? Why would that change on different platforms? How does RPC payloads differently than REST?\n\tI also don't know what you mean about \"interlacing shell commands\". That's completely orthogonal to REST vs RPC...\n\n\n\nAgain, I'm not saying \"Solr should do this.\" I realize that Solr/Lucene is a huge project with finite resources and this probably isn't a high priority, otherwise I wouldn't be the first to report it. I just want to correct the misperception that REST isn't practical \"from an ops point of view\". For example, Microsoft Azure has a RESTful API for managing infrastructure: https://msdn.microsoft.com/en-us/library/azure/jj157206.aspx. ",
            "id": "comment-14382264"
        },
        {
            "date": "2015-03-26T17:37:05+0000",
            "author": "Mark Haase",
            "content": "I will argue, though, that this is not a \"wish\" or an \"improvement\".\n\nThe documentation is buggy. It doesn't fail any unit tests or lints like broken code, but the documentation is broken. This is a bug. ",
            "id": "comment-14382293"
        },
        {
            "date": "2015-03-26T18:02:25+0000",
            "author": "Noble Paul",
            "content": "if you are asking if we could bend ourselves backwards and satisfy the REST standard?\nprobably yes . And we will be able to do nothing more than we already do with the current set of APIs. So , the value add is questionable for an average Solr user ",
            "id": "comment-14382348"
        },
        {
            "date": "2015-03-26T18:16:31+0000",
            "author": "Mark Haase",
            "content": "You must not have read my entire message, so let me put this in bold:\n\n\nI'm not saying \"Solr should do this.\" I realize that Solr/Lucene is a huge project with finite resources and this probably isn't a high priority\n\nBut the docs are buggy. They use a term that is incorrect. This is akin to misspelling a word over and over in the documentation and then claiming, \"oh we don't like to use that word anyway.\" Then remove it! \n\nThat's not bending over backwards; that's called decent documentation. ",
            "id": "comment-14382374"
        },
        {
            "date": "2015-03-26T18:22:04+0000",
            "author": "Uwe Schindler",
            "content": "A very funny example why this is also horrible: http://www.thetaphi.de/nukeyoursolrindex.html\n\nThis link will delete/remove your Solr Index (you need 4.x, because this relies on the default \"collection\" if you issue requests without a collection) running on localhost by a GET command, which is a HTML IMG link in the HTML page \n\nI think the reason is just historical. When Solr was developed it was not designed to be REST - I think the term was not even defined at that time. ",
            "id": "comment-14382390"
        },
        {
            "date": "2015-03-26T18:41:44+0000",
            "author": "Mark Haase",
            "content": "It's not just a prank, either, this was a real problem for \"web accelerator\" programs: http://betanews.com/2005/05/06/google-web-accelerator-draws-concern/\n\nGoogle's product has been discontinued, but there are still proxies out there that speculatively prefetch. I hope you don't access your Solr admin panel through a proxy  ",
            "id": "comment-14382421"
        },
        {
            "date": "2015-03-27T03:19:44+0000",
            "author": "Noble Paul",
            "content": "We are not saying the GET for write is good. But conforming to pure REST is much more . We need to make things more secure ",
            "id": "comment-14383278"
        },
        {
            "date": "2015-03-28T11:09:49+0000",
            "author": "Ramkumar Aiyengar",
            "content": "I agree there is at least a documentation bug here. If we have determined that a REST API is not suited for Solr, that's fine, but REST means something and has certain requirements, we shouldn't be misleading users by claiming something is REST when it is not.\n\nThat said, I don't understand any of the objections to REST as well. Noble, could you point us to any discussion on this, or provide us with concrete examples on how a REST API for an operation would have any of the drawbacks you mention, while what Solr has doesn't? ",
            "id": "comment-14385243"
        },
        {
            "date": "2015-03-29T02:35:13+0000",
            "author": "Mark Miller",
            "content": "I've always described Solr as \"REST Like\" with a grin  ",
            "id": "comment-14385609"
        },
        {
            "date": "2015-03-30T22:44:30+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I think we should aim for true REST for all Admin APIs in the future. Users may perhaps need to send more requests to do the same thing but that's a minor problem. Overloading a single POST request with internal command verbs does not feel right. It's not really hard to design the APIs so that there is a way to avoid reload after every request.\n\nPerhaps we should also disallow GET calls to the /update handler by default? ",
            "id": "comment-14387542"
        },
        {
            "date": "2015-03-30T23:29:10+0000",
            "author": "Noble Paul",
            "content": "I think we should aim for true REST for all Admin APIs in the future.\n\nI guess the discussion here was not about admin APIs. This probably was about the schema and config APIs. I have given my reasons why they are done this way.\n\nI believe true \"REST\" or true \"any standard\" is a huge ball and chain. The practitioners of the standard will come to hunt you down the moment we make small deviation.  \n\nPerhaps we should also disallow GET calls to the /update handler by default?\n\n I'm +1 to disallow GET for write APIs. But that is not \"pure REST\" . I don't have the energy or time to modify all our existing APIs to satisfy any standards . But I can spend time for making them easier or more secure\n\n ",
            "id": "comment-14387595"
        },
        {
            "date": "2015-03-31T12:37:57+0000",
            "author": "Shai Erera",
            "content": "I find REST a little bit like AGILE - you take what suits you most. You definitely shouldn't bend the code (or yourself) to be \"truly agile\" and/or \"truly REST\". Therefore I care less about people coming and say \"this isn't pure REST\". REST is a standard and there are many debates about it, e.g. the difference between a PUT and POST.\n\nWe should do whatever we feel is right. One thing I would love to see is not being able to modify any state of Solr via GET calls. That alone would be great progress (just my opinion though).\n\nAlso, I definitely don't think we should change all the API at once. We can do that incrementally, taking care of one segment/area at a time. E.g. the Collections API can certainly look like:\n\n\ncurl -X POST http://localhost:8983/solr/collections/create?name=mycollection&...\ncurl -X DELETE http://localhost:8983/solr/collections/mycollection\n...\n\n\n\nWith that we take out the 'action' parameter and fold it either into the Http method or if we want to use a single method (e.g. POST) for multiple actions, we put the command as part of the URL (/create).\n\nI also don't advocate that we become fanatic about it. If DELETE is not convenient because we want to send additional parameters, we can make it a POST with a /delete path, although I think we shouldn't have problems w/ DELETE specifically. ",
            "id": "comment-14388463"
        },
        {
            "date": "2015-03-31T13:01:21+0000",
            "author": "Noble Paul",
            "content": "As I mentioned earlier, I'm +1 for making all write operations use POST/PUT. Especially the collection API. \n\nWe can make the default setting to be to allow GET and use a flag to disable GET. \n\ncurl -X POST http://localhost:8983/solr/collections/create?name=mycollection&...\n#and\ncurl -X POST http://localhost:8983/solr/collections/delete?name=mycollection\n\n \n\ncan be easily implemented now in a backcompat way\n ",
            "id": "comment-14388484"
        },
        {
            "date": "2015-03-31T15:01:37+0000",
            "author": "Mark Haase",
            "content": "The curmudgeonly bonbon learns a hard lesson from a dilettante. Another clock beyond the stalactite secretly admires a womanly trombone. The gonad for the bicep usually hosts the cigar. A darling hand hibernates, and the pocket defined by a cigar goes to sleep; however, the amour-propre ridiculously plays pinochle with some knowingly self-actualized swamp. ",
            "id": "comment-14388669"
        }
    ]
}