{
    "id": "SOLR-4195",
    "title": "Further restrict security policy of tests to disallow writing to files outside the test's work dir (e.g. disallow writing to build/test-files)",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Until recently, I thought the solr test framework was setup such that every test got it's own copy of the \"test-files/solr\" directory to use as it's Solr Home Dir \u2013 then mark committed r1421543, to fix a problem where that test was writing a file (that would later be removed) to the solr conf dir, which would confuse another currently running test and cause it to fail.\n\nThis made me realize that what i was remembering is that the ant build files copy the src/test-files directories into build/ prior to running the tests \u2013 but all tests (in that module) still share the same copy.\n\nSubsequent discussions with folks on IRC lead me to the following realizations..\n\n\n\tmaking a copy of the test-files dir for each test would help eliminate confusing by reducing non-reproducible failures if tests collide \u2013 but might be slow\n\tmaking a copy of the test-files dir for each test would not help identify situations were code was mistakenly/unexpectedly writing to the solr home dir\n\twhat would probably make the most sense, would be to make the build/test-files directory \"read only\".  that way by default tests would get a read only solr home dir \u2013 triggering failures if the code is broken and tries to write to that dir.  tests that want/need to write to the solr home dir would have to go out of their way to clone the read only test-files/solr directory and use it as their solr home.",
    "attachments": {
        "SOLR-4195.patch": "https://issues.apache.org/jira/secure/attachment/12561078/SOLR-4195.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13532872",
            "date": "2012-12-15T01:38:35+0000",
            "content": "\nHere's a patch i've been experimenting with.  It was not as trivial as i originally thought, because if we make the files read-only, then \"ant clean\" gets more complicated.\n\nIt did in fact uncover a test that was writing to the \"global\" solr home dir, which is also fixed in the patch to make a copy.\n\nWould love to see feedback on this.  my two chief concerns are:\n\n\n\tdid i cover all of the necessary ant paths for when/how this build/... dir might be \"cleaned\" ?\n\tshould we worry more about how/when tests want to copy these files and what the umask is of users running the tests?  specifically: should we add a special utility for cloning the home dir and explicitly setting the props to read+write? (not really sure how likely it is someone would ever have their umask set prevent themselves from writing to new files they create \u2013 i'm guessing lots of other places in our ant build would break long before these tests)\n\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13532972",
            "date": "2012-12-15T09:41:15+0000",
            "content": "Hi Hoss:\n\nUnfortunately I was not able to attend the IRC discussion completely; I just followed it later, but the approsach with chmod will fail horribly with Windows and is not really needed and makes it more complex (you mention ant clean is complicated).\n\nWe have the test-infrastructure already \"enforcing\" this thing - but by copying the test-files to the module's build directory we explicitely allow them to be read/write.\n\nIf you want them read-only, you don't need to copy them to build directory, just leave them where they are. The test framework installs a security manager in Java that disallows writes outside the module's build directory completely. When the test tries to write a file outside build dir, it will fail, very easy.\n\nIf you have time, we should discuss this one more time here, before committing this patch  So my -1 to this solution. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13532973",
            "date": "2012-12-15T09:44:24+0000",
            "content": "Until recently, I thought the solr test framework was setup such that every test got it's own copy of the \"test-files/solr\" directory to use as it's Solr Home Dir \u2013 then mark committed r1421543, to fix a problem where that test was writing a file (that would later be removed) to the solr conf dir, which would confuse another currently running test and cause it to fail.\n\nI think we should simply agree on reverting this, because this commit was done previously to the improvement of the test-framework with a security manager. Tests are no longer able to write outside the module's build dir. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13532976",
            "date": "2012-12-15T09:56:27+0000",
            "content": "The other idea to handle this (without stopping to copy test-files before the build) would be to change the lucene/tools/juni4/tests.policy file to also disallow access to test-files inside the build directory.\n\nThe problem with that is: Java's security framework only allows \"grants\" but no \"denys\", so once you explicitely enabled write access to the build directory, it is no longer possible to disallow for a subdirectory of that granted one. But in LUCENE-4337 the original idea was to more and more harden the policy, so a test can only write to its own \"per-jvm\" working directory in the future (and some other specific directories, the Junit framework itsself needs for inter-process communication). So we could work on this, I can assist with further hardening the test sandbox. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533009",
            "date": "2012-12-15T12:19:37+0000",
            "content": "Hi,\n\nhere is the simpliest patch that solves the issue. As the test framework improved, I further restricted the java policy to the temporrary directory, where the tests run inside: build.dir/test (the one where the randomized-testing frameworks files and per-JVM subdirs are in. Code can no longer write to the build.dir itsself (which includes the test-files of the classpath).\n\nWithout the DIH fix from Hoss' patch, the test fails successfully:\n\n\n[junit4:junit4] ERROR   0.06s | TestNonWritablePersistFile.testNonWritablePersistFile <<<\n[junit4:junit4]    > Throwable #1: java.security.AccessControlException: access denied (java.io.FilePermission C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr3\\solr\\build\\contrib\\solr-dataimporthandler\\test-files\\dih\\solr\\collection1\\conf\\dataimport.properties delete)\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([5B0E701C943CAA2D:ED06EDD3E83314F8]:0)\n[junit4:junit4]    > \tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:374)\n[junit4:junit4]    > \tat java.security.AccessController.checkPermission(AccessController.java:546)\n[junit4:junit4]    > \tat java.lang.SecurityManager.checkPermission(SecurityManager.java:532)\n[junit4:junit4]    > \tat java.lang.SecurityManager.checkDelete(SecurityManager.java:990)\n[junit4:junit4]    > \tat java.io.File.delete(File.java:902)\n[junit4:junit4]    > \tat org.apache.solr.handler.dataimport.TestNonWritablePersistFile.testNonWritablePersistFile(TestNonWritablePersistFile.java:89)\n[junit4:junit4]    > \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[junit4:junit4]    > \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[junit4:junit4]    > \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[junit4:junit4]    > \tat java.lang.reflect.Method.invoke(Method.java:597)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n[junit4:junit4]    > \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n[junit4:junit4]    > \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    > \tat java.lang.Thread.run(Thread.java:662)\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533010",
            "date": "2012-12-15T12:21:00+0000",
            "content": "If somebody has time to fully test solr, please do it, I would like to commit this later. I am out of office for xmas shopping  "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13533011",
            "date": "2012-12-15T12:24:58+0000",
            "content": "While I was initially hesitant about security manager based solution (in favor of applying certain assertions via bytecode injection , I agree with Uwe that it gives more control and is platform-independent. +1 from me. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13533036",
            "date": "2012-12-15T14:43:23+0000",
            "content": "+1 for more sandboxing: this is nice. I'm testing the patch now. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13533038",
            "date": "2012-12-15T14:49:20+0000",
            "content": "Some other tests fail with the patch. lemme see if i can fix! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13533050",
            "date": "2012-12-15T15:12:55+0000",
            "content": "updated patch: all tests pass. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533158",
            "date": "2012-12-15T21:30:37+0000",
            "content": "New patch. The Egothor stemmer compiler and its test had a resource leak, now found by windows (cannot delete open file). Also the fix by Robert had a bug with spaces in filename. The use of URI was obsolete, just get the path from the File object directly (URI.getPath() on a file:-URI object does not return the path of the file, only the URI path, which is different!!!) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533159",
            "date": "2012-12-15T21:31:06+0000",
            "content": "Thanks Robert! I am running tests on Windows, too. If they pass, I will commit. Hoss should be awake, too? Any comments. I hope you are happy with this solution, instead of crazy unix-only chmod and \"ant clean\" not working \n\nIn general I would like to limit the write access further, so only the JVM-specific \"J<number>\" directory is writeable and the directory where the parent-child-communication and log files reside. For this it would be good that the test framework would pass to each child runner:\n\n\tthe directory as absolute path (as sysprop), so the policy file can use this path to limit access to the directory only. It must be a sysprop and it must be absolute in platform specific (File.absolute!) notation.\n\tthe inter process communication files should maybe placed in a separate subdirectory and next to the J0, J1 dirs, because to make the test runner be able to write the log files, I must allow access to this directory, which allows access to all subdirs, too (means all J0, J1,...). So keep the inter-process communication files in separate subfolder and we can limit the write access fully to the test's working dir.\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533164",
            "date": "2012-12-15T21:44:53+0000",
            "content": "OK tests pass, I will commit this. Clover builds should be unaffected. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533165",
            "date": "2012-12-15T21:53:12+0000",
            "content": "Committed trunk revision: 1422368, 4.x revision: 1422369 "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13533166",
            "date": "2012-12-15T21:55:00+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1422368\n\nSOLR-4195: Further restrict security policy of tests to disallow writing to files outside the test's work dir (e.g. disallow writing to build/test-files) "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13533167",
            "date": "2012-12-15T21:55:56+0000",
            "content": "It must be a sysprop and it must be absolute in platform specific (File.absolute!) notation.\n\nI assume you cannot just do new File(\".\").getAbsolutePath()?\n\nthe inter process communication files should maybe placed in a separate subdirectory and next to the J0, J1 dirs, \n\nhttp://labs.carrotsearch.com/download/randomizedtesting/2.0.0/docs/junit4-ant/Tasks/junit4.html\n\nSee the 'tempdir' attribute. If you provide it to <junit4> it'll just use it. Don't know how it's going to handle the restrictive policy though \u2013 never thought it'd run with a security manager, really.\n\nDawid "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13533169",
            "date": "2012-12-15T21:58:35+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1422369\n\nMerged revision(s) 1422368 from lucene/dev/trunk:\nSOLR-4195: Further restrict security policy of tests to disallow writing to files outside the test's work dir (e.g. disallow writing to build/test-files) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533171",
            "date": "2012-12-15T22:05:06+0000",
            "content": "I assume you cannot just do new File(\".\").getAbsolutePath()?\n\nThe policy file uses a sysprop to allow write access (see the common-build.xml and the policy file). The policy file is read by the JVM on JVM startup before any code is run, so you cannot change the system property. Java policy files MUST contain the full path in platform specific notation. Because of this, the JVM working dir must be passed as absolute, platform specific path.\n\nSee the 'tempdir' attribute.\n\nThe current patch uses this. But the tempDir attribute only contains the roor dir, below which are the following files/dirs:\n\n\tone Jxxx for each JVM\n\ta set of files for inter-process communication\n\n\n\nMy problem is now: I can only limit to this tempDir where all above files are in. But I want tests to be limited to a subdirectory (the Jxx one), so I want the runner to pass a sysprop (can be any prop) with the full path of the CWD / working dir of this JVM it has spawned. Also the test runner must be able to write files to its inter-pocess communication folder, so I need this directory too (as sysprop). Then the policy file would give write access to both of these (absolute file) sysprops. I cannot do this with ANT. ANT only gives me tempDir (what it currently uses).\n\nThe reason why i want the inter-process communication files in a separate folder is: the policy gives write access to all subdirs, so also to all Jxx subdirs. By having these logs/other files in a separate dir along with J0, J1,... the 2 sysprops can give the policy file the 2 directorys that can be written to. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533173",
            "date": "2012-12-15T22:09:40+0000",
            "content": "Ah tempdir and dir attribute are different. So i could set tempDir to $dir/temp, while the JVM working dirs are $dir/J0,...? But I still have no chance to get the JVM's own directory from inside the policy file without a sysprop. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13533177",
            "date": "2012-12-15T22:19:40+0000",
            "content": "Yes, tempdir and dir are different. I will patch the runner to provide that cwd property. There is no unique \"absolute\" path (symlinks, hardlinks, etc.); I'll just use whatever getAbsolutePath returns because canonical path resolution comes with its own set of problems. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13533179",
            "date": "2012-12-15T22:21:30+0000",
            "content": "One possibility could be: Is there a sysprop that contains the runner number (J0, J1,...). Then I can put that into the policy file maybe by combining $dir and this sysprop. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13533201",
            "date": "2012-12-15T23:12:51+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1422397\n\nSOLR-4195: Remove unused sysprop from test runner and enforce absolute pathnames by using the file= attribute of sysproperty "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13533204",
            "date": "2012-12-15T23:20:16+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1422407\n\nMerged revision(s) 1422397 from lucene/dev/trunk:\nSOLR-4195: Remove unused sysprop from test runner and enforce absolute pathnames by using the file= attribute of sysproperty "
        }
    ]
}