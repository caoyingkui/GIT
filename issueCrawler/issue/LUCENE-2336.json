{
    "id": "LUCENE-2336",
    "title": "off by one: DisjunctionSumScorer::advance",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Resolved"
    },
    "description": "The bug is:\n\n    if (target <= currentDoc) {\n\nshould be\n\n    if (target < currentDoc) {\n\nbased on the comments for the method as well as the contract for DocIdSetIterator: \"Advances to the first beyond the current\"\n\nIt can be demonstrated by:\n\n \t\tassertEquals(\"advance(1) first match failed\", 1, scorer.advance(1));\n \t\tassertEquals(\"advance(1) second match failed\", n, scorer.advance(1));\n\nif docId: 1 is a hit and n is the next hit.  (Tests all pass if this code change is made.)\n\nI'm not labeling it as major because the class is package-protected and currently passes spec.\n\nRelevant excerpt:\n\n /**\n\n\tAdvances to the first match beyond the current whose document number is\n\tgreater than or equal to a given target. <br>\n\tWhen this method is used the \n{@link #explain(int)}\n method should not be\n\tused. <br>\n\tThe implementation uses the skipTo() method on the subscorers.\n\t\n\t@param target\n\tThe target document number.\n\t@return the document whose number is greater than or equal to the given\n\ttarget, or -1 if none exist.\n   */\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) \n{\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) \n{\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) \n{\n        boolean b = advanceAfterCurrent();\n        return b ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      }\n else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) \nUnknown macro: {        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }      } \n    } while (true);\n  }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-20T05:57:01+0000",
            "content": "Hi Gary\n\nThis has been discussed before (I'm not sure if about DisjunctionSumScorer specifically), and therefore there is also a NOTE in advance() of DISI:\n\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n\n\nNote the may return a different value... part. I remember while working on LUCENE-1614 that this has been discussed and thus we ended up w/ documenting that may return part. See here: https://issues.apache.org/jira/browse/LUCENE-1614?focusedCommentId=12710860&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12710860 and read some above and below to see relevant discussion.\n\nI'll need to refresh my memory though why DisjunctionSumScorer works like that ... perhaps an overlook on my side from 1614, but perhaps there was a reason.\n\nAnyway, about the code example you gave above, why would you want to call advance w/ the same value many times? What's the use case? If you're only dealing w/ one DISI, then unless you really want to skip to a certain document, I don't see any reason for calling advance. The usage is typically if you have 2 or more DISIs, and one's nextDoc or advance returned a value that is greater than the other's doc() ...\n\nAlso, it's risky to write the code you wrote, because some scorers, upon init are already on a certain doc (I think the Disj. ones, but maybe also the Conj. one), and so by calling advance(1), you will actually skip over the first document and miss a hit.\n\nCan you clarify the usage then? ",
            "author": "Shai Erera",
            "id": "comment-12847716"
        },
        {
            "date": "2010-03-20T17:46:22+0000",
            "content": "I don't have a specific use case.  Long story short, I am toying with a BM25 implementation via subclassing a slightly refactored DisjunctionSumScorer, as the published BM25 research implementation doesn't work w/ phrases and is too smelly for my tastes.  I'm attempting to understand how everything works deep in lucene by reading the code and playing with it (maybe I should try to read choice checkin logs too) and discovered this inconsistency in a unit test that I was playing with.\n\nThe advance docs for DISI state that it behaves as written:\n\n int advance(int target) {\n   int doc;\n   while ((doc = nextDoc()) < target) {\n   }\n   return doc;\n }\n\nThis to me implies that advance(0) should be equivalent to calling nextDoc() in all cases.\n(And this is how advance behaves in TermScorer and PhraseScorer.)\n\nHowever the real behavior for DSS is more like:\n\nwhile (docID() < target) {\n  if (!next()) return -1;\n}\nreturn docID();\n\nOn the other hand, the thread you cite states:\n\n> > To me, calling skipTo or advance with the same target multiple times and get different result every time is weird. I'd like to change that semantic\n\n> But I thought we had just agreed that skipTo(doc) is well defined only for doc>current? (see \"bigger question\" point above).\n> If we all agree that , then we don't need to worry about skipTo(10) being called twice in a row.\n\nSo it sounds like I'd be reasonably happy with a resolution of documenting advance in DISI with:\n\"The behavior of calling advance with a target equal to docID() is undefined,\"\n\nand happier with a convincing argument of why this situation never arises within any Lucene scorers in real life.\n\n-Gary ",
            "author": "Gary Yngve",
            "id": "comment-12847797"
        },
        {
            "date": "2017-07-10T10:11:56+0000",
            "content": "Can we either close this as Not a bug or fix some docs? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16080100"
        },
        {
            "date": "2017-07-10T15:28:21+0000",
            "content": "We fixed the docs long time ago to state that the behaviour is undefined if target is <= docID(). ",
            "author": "Adrien Grand",
            "id": "comment-16080502"
        }
    ]
}