{
    "id": "LUCENE-4869",
    "title": "Optimize IsWithin spatial RPT to use a point cache for false-positive removal",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "LUCENE-4644 implemented the \"IsWithin\" predicate for a RecursivePrefixTree based field.  It's slow since it looks across the whole world to ensure it doesn't match docs with data anywhere outside the query shape.  It can be configured to only look outside the query shape using a very small buffer distance, and that will filter out documents spanning the query shape boundary, but not indexed shapes comprised of multiple disjoint parts.  The solution proposed here is to index a point per disjoint part in such a way that it can be easily retrieved (e.g. DocValues) and then a post-process of WithinPrefixTreeFilter would remove false-positives.\n\nThis isn't particularly hard/advanced but it requires some advances in some APIs that aren't quite there yet.  Spatial4j's ShapeCollection (aka WKT GeometryCollection or Multi*) needs to get released, it needs a vertex iterator.  There needs to be code to read and write a set of points to a BinaryDocValues field (1/doc).  And finally of course WithinPrefixTreeFilter needs to have a mode in which it uses the smallest buffer and then in the end checks the DocValues to remove false-postivies.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-21T20:55:45+0000",
            "content": "The Strategy (or somewhere else) could look at a shape about to be indexed and then extract a set of points, one for each disjoint part.  Each point would be the center of it's part, but if that point is not in fact \"in\" the shape (e.g. consider a crescent moon or donut shaped polygon), then it would be the nearest vertex to that point.  These points would be encoded into BinaryDocValues.  At search time, some sort of interface would ideally abstract where the points come from (BinaryDocValues is an implementation detail). ",
            "author": "David Smiley",
            "id": "comment-13609461"
        }
    ]
}