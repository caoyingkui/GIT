{
    "id": "LUCENE-134",
    "title": "[1.3RC1] QueryParser should handle Query.toString()",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I have a QueryParser that generates a TermQuery with the text between pipes\ncharacters (\"|\"), i.e. the text between the pipes is not analyzed.\n\nSo, the query :\nmyfield:|3 or 4 words|\n\n...looks for the string \"3 or 4 words\" in the index. Pretty useful \n\nUnfortunately, the string representation (i.e. the result of a call to \nthe Query.toString() method) of this query is :\nmyfield:3 or 4 words\n\n... or in other terms :\nmyfield:3 default_field:or default_field:4 default_field:words\n\n... which, parsed as is, would give me totally different results... and \nprobably none \n\nI wonder if it would be possible to have a callback between the Query \nobjects and the QueryParser that have constructed them. This Query object \nwould so delegate its text representation to the QueryParser.\n\nThis could be done :\n\n1) By creating a makeStringRepresentation method in the QueryParser class :\npublic String makeStringRepresentation(Query query) {\n  String stringRepresentation = null;\n  if (query == null) return null;\n  else if (query instanceOf MySpecialQuery) \n{\n    ...\n    stringRepresentation = mySpecialRepresentation;\n  }\n  //other custom/non-custom queries\n  else if ...\n  ...\n  //use null to have normal behaviour\n  return stringRepresentation;\n}\n\n2) By passing a reference to the Query constructor : \npublic Query(QueryParser queryParser) {\n  this.queryParser = queryParser;\n}\n\n3) By making a test in the toString() method of the Query classes :\n\npublic String toString(String f) {\n  //callback if the Query object has been constructed by a QueryParser\n  if (this.queryParser != null) \n{\n    String stringRepresentation;\n    stringRepresentation = queryParser.makeStringRepresentation(this);\n    if (stringRepresentation != null) return stringRepresentation;\n  }\n else {\n  ... standard Lucene behaviour\n  ... Query objects can live without a QueryParser \n\nDoes it make sense ?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-09-22T06:00:06+0000",
            "content": "There should not be any dependency on QueryParser by Query classes.  QueryParser in Lucene's \ncodebase is a convenience \"factory\" for a Query, but should not be coupled in the direction you \npropose.\n\nHow about creating a custom TermQuery subclass that has your custom toString method in it, and \nthen use that in your custom QueryParser instead of the builtin TermQuery? ",
            "author": "Erik Hatcher",
            "id": "comment-12321369"
        },
        {
            "date": "2003-09-22T15:30:52+0000",
            "content": ">How about creating a custom TermQuery subclass that has your custom toString \n>method in it, and then use that in your custom QueryParser instead of the \n>builtin TermQuery?\n\nThat's what I actually do. It doesn't really matter when a few classes are\ninvolved ; it does when a lot are \n\n> There should not be any dependency on QueryParser by Query classes.\n\nRather than a dependency on the QueryParser, please consider a dependency on the\nQueryConstructor...\n\n> QueryParser in Lucene's codebase is a convenience \"factory\"\n\n... or, better, on the QueryFactory. \n\nIn my proposed example, the QueryParser would just have to implement a \nQueryFactory interface : a taste of XML\nDocumentBuilder/Document/DOMImplementation.\n\nAnyway, it's just an RFE. I wonder if other people would be interested by this\napproach.\n\np.b.\n\n ",
            "author": "Pierrick Brihaye",
            "id": "comment-12321370"
        },
        {
            "date": "2003-09-22T20:13:23+0000",
            "content": "Rather than touching Query at all.... how about just using your own QueryParser implementation to \nbuild the strings from a Query object.   I currently don't think touching Query to accomodate a \nstring parsable representation is the right approach. ",
            "author": "Erik Hatcher",
            "id": "comment-12321371"
        },
        {
            "date": "2004-03-01T02:09:01+0000",
            "content": "Erik Hatcher wrote :\n\n>How about creating a custom TermQuery subclass \n\nWell, that was the point  In subclassing a TermQuery, the toString() method \nreturns the text representation of this TermQuery, not the text \nrepresentation of the sub-class.\n\nAnyway, embedding a TermQuery in my UnanalyzedTermQuery does the trick.\n\nClosing this bug, thanks.\n\np.b. ",
            "author": "Pierrick Brihaye",
            "id": "comment-12321372"
        }
    ]
}