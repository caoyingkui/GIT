{
    "id": "SOLR-1379",
    "title": "Add RAMDirectoryFactory",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Implement class RAMDirectoryFactory to make possible using RAMDirectory by adding the next configuration in solrconfig.xml:\n\n\n<directoryFactory class=\"org.apache.solr.core.RAMDirectoryFactory\"/>",
    "attachments": {
        "SOLR-1379.patch": "https://issues.apache.org/jira/secure/attachment/12417372/SOLR-1379.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alex Baranau",
            "id": "comment-12746495",
            "date": "2009-08-22T20:34:59+0000",
            "content": "Attached patch with the implemented class.\n\nHowever, the next constraint is present: RAMDirectoryFactory can be used only when the index already present on disk. For example, first, we can start Solr using StandardDirectoryFactory (default) so that Solr creates needed files in dataDir.\n\nIf this constraint is quite normal, please, let me know. To avoid it some changes need to be done in SolrCore and in DirectoryFactory API. \n\nAnyway I'm going to provide an alternative patch later to eliminate the constraint. "
        },
        {
            "author": "Alex Baranau",
            "id": "comment-12746508",
            "date": "2009-08-22T21:24:41+0000",
            "content": "Moreover, with the RAMDirectoryFactory provided by this patch updating documents via Solr doesn't work properly.\n\nExample of the scenario in which this RAMDirectoryFactory is usable is when persistent (on file system) index is created/updated by another application (perhaps using pure luce approach to maintain this) and Solr core is reloaded whenever updates should affect the search. One of the possible reasons to use this scenario is to speed up search with RAMDirectory when index changes rarely on doesn't change at all. "
        },
        {
            "author": "Alex Baranau",
            "id": "comment-12746536",
            "date": "2009-08-23T01:08:41+0000",
            "content": "Attached new patch. It eliminates the previously mentioned constraint. \n\nI managed not to change the existing classes, just new ones were added. But I think that we should look closer at using DirectoryFactory for accessing the Directory instance for the index. I believe re-opening Directory is overused in the current code. It didn't cause any problem because before introducing RAMDirectoryFactory only filesystem-based directories were used, but still it may affect the performance and lead to unwanted defects similar to the mentioned in the previous comment. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12747735",
            "date": "2009-08-26T01:39:39+0000",
            "content": "i can imagine situations where having an index that exists purely in ram would be useful, but i don't really understand the point of a DirectoryFactory that loads an index from disk into a RAMDirectory ... my understanding (from other lucene contributors that spend a lot of time worrying about performance) is that there are very few (and specialized) use cases where this performs better then just using an FSDirectory and letting the OS cache the disk pages.\n\ndo you have some concrete examples of when your patch makes more sense then just using the default? "
        },
        {
            "author": "Alex Baranau",
            "id": "comment-12747747",
            "date": "2009-08-26T03:16:59+0000",
            "content": "The second patch gives ability to have an index which exists purely in RAM. So, this is one example. Actually this is a primary usage scenario.\n\nThe scenario with loading index into the RAM from the disk can be determined by the the combination of all of the next requirements:\n\n\tIndex is updated not through the Solr\n\tIndex is very large (more than 100mil documents, containing more than 50 fields)\n\tIndex updates affect about half of the documents each month.\n\tSearch should be performed extremely fast\nSince updates touch a lot of documents this can affect the user while OS caches are renewed (according to our tests this can result in a lag of 5+ minutes while commit is happening). Also we need to optimize the index after such huge updates which is also causes all caches to be recreated, etc. To avoid the lag we can load the index into a RAM and reload it on a scheduled basis using core reload feature (new index is used only after it is warmed up, etc.).\n\n\n\nIn addition to that, the test results for RAMDirectory and FSDirectory are different if the user load is significant (e.g. 30+ concurrent requests): RAMDirectory is faster. Even when we used mounted RAM disk as a storage for index and used FSDirectory this performed 2.5-3 times worse than RAMDirectory. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12752543",
            "date": "2009-09-08T14:36:01+0000",
            "content": "\nThe scenario with loading index into the RAM from the disk can be determined by the the combination of all of the next requirements:\n\n\n\tIndex is updated not through the Solr\n\tIndex is very large (more than 100mil documents, containing more than 50 fields)\n\tIndex updates affect about half of the documents each month.\n\tSearch should be performed extremely fast\n      Since updates touch a lot of documents this can affect the user while OS caches are renewed (according to our tests this can result in a lag of 5+ minutes while commit is happening). Also we need to optimize the index after such huge updates which is also causes all caches to be recreated, etc. To avoid the lag we can load the index into a RAM and reload it on a scheduled basis using core reload feature (new index is used only after it is warmed up, etc.).\n\n\n\nIn addition to that, the test results for RAMDirectory and FSDirectory are different if the user load is significant (e.g. 30+ concurrent requests): RAMDirectory is faster. Even when we used mounted RAM disk as a storage for index and used FSDirectory this performed 2.5-3 times worse than RAMDirectory.\n\nCan you share your performance tests?  Also, not sure why a very large index is a use case for RAMDirectory implementation.\n\nFinally, storing the Directories in a Map doesn't seem like a good idea.  \n\nI think we should mark this for 1.5, so it can be revisited then. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12846730",
            "date": "2010-03-18T03:40:57+0000",
            "content": "Haha - I just write almost the exact same RAMDirectory implementation for newtrunk - then remembered that there might already be an issue open. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12846732",
            "date": "2010-03-18T04:04:05+0000",
            "content": "Thanks Alex!  I've committed this on branches/newtrunk. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872683",
            "date": "2010-05-27T23:02:56+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013106",
            "date": "2011-03-30T15:45:33+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}