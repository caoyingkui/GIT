{
    "id": "SOLR-8057",
    "title": "Change default Sim to BM25 (w/backcompat config handling)",
    "details": {
        "components": [],
        "type": "Task",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "LUCENE-6789 changed the default similarity for IndexSearcher to BM25 and renamed \"DefaultSimilarity\" to \"ClassicSimilarity\"\n\nSolr needs to be updated accordingly:\n\n\n\ta \"ClassicSimilarityFactory\" should exist w/expected behavior/javadocs\n\tdefault behavior (in 6.0) when no similarity is specified in configs should (ultimately) use BM25 depending on luceneMatchVersion\n\t\n\t\teither by assuming BM25SimilarityFactory or by changing the internal behavior of DefaultSimilarityFactory\n\t\n\t\n\tcomments in sample configs need updated to reflect new default behavior\n\tref guide needs updated anywhere it mentions/implies that a particular similarity is used (or implies TF-IDF is used by default)",
    "attachments": {
        "SOLR-8057.patch": "https://issues.apache.org/jira/secure/attachment/12769380/SOLR-8057.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-28T18:48:15+0000",
            "author": "Hoss Man",
            "content": "really barebones Strawman patch for trunk, still needs a lot of tests for the new conditional behavior...\n\n\n\n\tadds ClassicSimilarityFactory\n\tchanges SweetSpotSimilarityFactory to extend ClassicSimilarityFactory\n\tupdates DefaultSimilarityFactory and SchemaSimilarityFactory to make \"default\" Sim conditional on luceneVersionmatch\n\t\n\t\tcurrently does this by making DefaultSimilarityFactory SolrCoreAware - not sure if this should really be needed, see nocommit related to some dead code in IndexSchema that looks like it was intended to pass luceneMatchVersion to SimilarityFactory.init() ... need to investigate more\n\t\n\t\n\n\n\nThere's a decent number of existing test failures.  Most seem to be based on hardcoded assumptions about exact score values that are diff between ClassicSim and BM25 \u2013 I'll audit those.\n\nOne concerning failure is from BadIndexSchemaTest.testPerFieldtypeSimButNoSchemaSimFactory.  The javadocs say that \"IndexSchema will provide such error checking if a non-SchemaAware instance of SimilarityFactory\" but as soon as i made DefaultSimilarityFactory implement SolrCoreAware (NOT SchemaAware) this seems to have broken ... which seems like a tangentially related bug uncovered by this change. ",
            "id": "comment-14978998"
        },
        {
            "date": "2015-11-04T01:31:11+0000",
            "author": "Hoss Man",
            "content": "\n\nNOTE: Forgot to mention last time, but the previous patch required the following svn copy before it can be applied...\n\n\nsvn cp solr/core/src/java/org/apache/solr/search/similarities/DefaultSimilarityFactory.java solr/core/src/java/org/apache/solr/search/similarities/ClassicSimilarityFactory.java\n\n\n\n\n\nUpdated patch focusing on fixing test failures & improving coverage...\n\n\n\tstraightforward test fixes/improvements to account for new defaults (mostly related to brittle score assumptions)...\n\t\n\t\tTestNonDefinedSimilarityFactory\n\t\tTestExtendedDismaxParser\n\t\tStatsComponentTest\n\t\tQueryElevationComponentTest\n\t\tTestReRankQParserPlugin\n\t\tTestGroupingSearch\n\t\n\t\n\tcloned TestPerFieldSimilarity as TestPerFieldSimilarityClassic\n\t\n\t\tTestPerFieldSimilarityClassic set's older luceneMatchVersion\n\t\tTestPerFieldSimilarity updated to account for new BM25 defaults\n\t\n\t\n\tcloned TestDefaultSimilarityFactory as TestDefaultSimilarityFactoryClassic\n\t\n\t\tTestDefaultSimilarityFactoryClassic set's older luceneMatchVersion\n\t\tTestDefaultSimilarityFactory updated to account for new BM25 defaults\n\t\tboth of these tests currently trip an assert in DefaultSimilarityFactory because apparently nothing is calling SolreCoreAware.inform(SolrCore) on any per-fieldtype SimilarityFactories that implement SolreCoreAware\n\t\n\t\n\tadded some logging to ChangedSchemaMergeTest.testOptimizeDiffSchemas to try and make sense of it's failure\n\n\n\nNOTE: To apply this new patch, you'll first need to copy/move the following files...\n\n\nsvn cp solr/core/src/java/org/apache/solr/search/similarities/DefaultSimilarityFactory.java solr/core/src/java/org/apache/solr/search/similarities/ClassicSimilarityFactory.java\nsvn cp solr/core/src/test/org/apache/solr/search/similarities/TestPerFieldSimilarity.java solr/core/src/test/org/apache/solr/search/similarities/TestPerFieldSimilarityClassic.java\nsvn cp solr/core/src/test/org/apache/solr/search/similarities/TestDefaultSimilarityFactory.java solr/core/src/test/org/apache/solr/search/similarities/TestDefaultSimilarityFactoryClassic.java\nsvn mv solr/core/src/test-files/solr/collection1/conf/schema-tfidf.xml solr/core/src/test-files/solr/collection1/conf/schema-sim-default.xml\n\n\n\nTests still failing with this patch:\n\n\n\tBadIndexSchemaTest.testPerFieldtypeSimButNoSchemaSimFactory\n\t\n\t\tsee previous comment: The javadocs say that \"IndexSchema will provide such error checking if a non-SchemaAware instance of SimilarityFactory\" but as soon as i made DefaultSimilarityFactory implement SolrCoreAware (NOT SchemaAware) this seems to have broken\n\t\tseems like a tangentially related bug uncovered by this change.\n\t\n\t\n\tTestDefaultSimilarityFactoryClassic + TestDefaultSimilarityFactory\n\t\n\t\tBoth of these tests currently trip an asssert in DefaultSimilarityFactory because aparently nothing is calling SolreCoreAware.inform(SolrCore) on any per-fieldtype SimilarityFactories that implement SolreCoreAware\n\t\tbug appears independent of these changes \u2013 any schema specifying a per-fieldtype similarity that is SolrCoreAware should have same problem\n\t\n\t\n\tChangedSchemaMergeTest.testOptimizeDiffSchemas + TestCloudSchemaless (threadleak due to core reload failures)\n\t\n\t\tsomething about the IndexSchemaFactory.buildIndexSchema + SolrCore.setLatestSchema code path isn't properly calling SolrCoreAware.inform(SolrCore) on the default similarity\n\t\tbug appears independent of these changes \u2013 i'm pretty sure any schema specifying a similarity that is SolrCoreAware should have same problem\n\t\n\t\n\n\n ",
            "id": "comment-14988683"
        },
        {
            "date": "2015-11-04T18:15:08+0000",
            "author": "Hoss Man",
            "content": "\nThe more I work on this and think about it, the more I think my current approach of putting luceneMatchVersion conditional logic in DefaultSimFactory is the wrong way to go (independent of the bugs that i seem to have uncovered in making a SimFactories SolrCoreAware - which i'll confirm & file seperately) ...\n\nI'm starting to think that a better long term solution would be to split this up into 3 discrete tasks/ideas...\n\nTask #1 - Deprecate/rename DefaultSimilarityFactory in 5.x\n\n\tclone DefaultSimilarityFactory -> ClassicSimilarityFactory\n\tprune DefaultSimilarityFactory down to a trivial subclass of ClassicSimilarityFactory\n\t\n\t\tmake it log a warning on init\n\t\n\t\n\tchange default behavior of IndexSchema to use ClassicSimilarityFactory directly\n\tmark DefaultSimilarityFactory as deprecated in 5.x, remove from trunk/6.0\n\n\n\nTask #1 would put us in a better position moving forward of having the facotry names directly map to the underlying implementation, leaving less ambiguity when an explicit factory is specified in the schema.xml (either as the main similarity, or as a per field similarity)\n\n\"Task #2 - Make the wrapped per-field default in SchemaSimilarityFactory conditional on luceneMatchVersion\"\n\n\tuse ClassicSimilarity as per-field default when luceneMatchVersion < 6.0\n\tuse BM25Similarity as per-field default when luceneMatchVersion < 6.0\n\n\n\nTask #2 would give us better defaults (via BM25) for people using SchemaSimilarityFactory moving forward, while existing users would have no back compat change.\n\nTask #3 - Change the implicit default Similarity on trunk\n\n\tmake the Similariy init logic in IndexSchema conditional on luceneMatchVersion\n\tuse ClassicSimilarityFactory as default when luceneMatchVersion < 6.0\n\tuse SchemaSimilarityFactory as default when luceneMatchVersion >= 6.0\n\t\n\t\tcombined with Task #2, this would mean the wrapped per-field default would be BM25\n\t\n\t\n\n\n\nTask #3 is where things start to get noticibly diff from the goals i outlined when i originally filed this jira...\n\nAs far as i can tell, the chief reason SchemaSimilarityFactory wasn't made the implicit default in IndexSchema when it was introduced is because of how it differed/differs from DefaultSimilarity/ClassicSimilarity with respect to multi-clause queries \u2013 see SchemaSimilarityFactory's class javadoc notes relating to queryNorm and coord.  Users were expected to think about this trade off when making a concious choice to switch from DefaultSimilarity/ClassicSimilarity to SchemaSimilarityFactory.  But (again, AFAICT) these discrepencies don't exist between SchemaSimilarityFactory's PerFieldSimilarityWrapper and BM25Similiarity.   So if we want to make BM25Similiarity the default when luceneMatchVersion >= 6.0, there doesn't seem to be any downside to actually making SchemaSimilarityFactory (wrapping BM25Similiarity) the default instead.\n\n\n\nTask #1 seems like a no brainer to me, and likeise Task #2 seems like a sensible change balancing new user experience vs backcompat \u2013 so i'm going to go ahead and move forward with individual sub-tasks to tackle those (in that order).\n\nIf there are no concerns/objections to Task #3 by the time I get to that point, and if i haven't changed my mind that it's a good idea, I'll move forward with that as well \u2013 the alternative is to stick with the original plan and make BM25SimilarityFactory (directly) the default when luceneMatchVersion >= 6.0. ",
            "id": "comment-14990072"
        },
        {
            "date": "2015-11-10T17:11:52+0000",
            "author": "Hoss Man",
            "content": "If there are no concerns/objections to Task #3 by the time I get to that point, and if i haven't changed my mind that it's a good idea, I'll move forward with that as well\n\nThinking about it more \u2013 there is very little downside in first switching to BM25 as a default on trunk, and only after that is done using a new issue to discuss/change the default to SchemaSimilarityFactory \u2013 at which point, all existing tests should just pass.\n\nThis also lets us move forward with a better (BM25) default behavior in the common case, even if there are in fact bugs with using a SolrCoreAware SimFactory as the default (which is what it looked like in my early patches)\n\nSo i'll do \"Task #3\" as a new independent jira, and make a subtask for my new \"Task 2.5: Make BM25SimFactory the implicit default in trunk\" ",
            "id": "comment-14998923"
        },
        {
            "date": "2015-11-11T17:49:40+0000",
            "author": "Hoss Man",
            "content": "all subtasks completed ",
            "id": "comment-15000776"
        }
    ]
}