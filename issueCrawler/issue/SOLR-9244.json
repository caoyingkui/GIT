{
    "id": "SOLR-9244",
    "title": "Lots of \"Previous SolrRequestInfo was not closed\" in Solr log",
    "details": {
        "components": [
            "Server"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.3.1"
        ],
        "affect_versions": "5.3.1",
        "status": "Closed",
        "resolution": "Duplicate",
        "priority": "Minor"
    },
    "description": "After upgrading to Solr 5.3.1, we started seeing a lot of \"Previous SolrRequestInfo was not closed\" ERROR level messages in the logs. Upon further inspection, it appears this is a sanity check and not an error that needs attention. It appears that the SolrRequestInfo isn't freed in one particular path (no corresponding call to SolrRequestInfo.clearRequestInfo in HttpSolrCall.call), which often leads to a lot of these messages.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-23T21:24:43+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Probably the same issue as reported in SOLR-8657. If so, we can close this one as duplicate and update the affected versions in SOLR-8657. ",
            "id": "comment-15347229"
        },
        {
            "date": "2016-06-23T22:38:23+0000",
            "author": "Gary Lee",
            "content": "SOLR-8657 appears to detail another path in which the same issue occurs - lots of those errors polluting the logs. In our case it seems that HttpSolrCall.call isn't properly clearing the SolrRequestInfo. See where I added a call to clear the request info below:\n\n  public Action call() throws IOException {\n    MDCLoggingContext.reset();\n    MDCLoggingContext.setNode(cores);\n\n    if (cores == null) {\n      sendError(503, \"Server is shutting down or failed to initialize\");\n      return RETURN;\n    }\n\n    if (solrDispatchFilter.abortErrorMessage != null) {\n      sendError(500, solrDispatchFilter.abortErrorMessage);\n      return RETURN;\n    }\n\n    try {\n      init();\n...\n            SolrRequestInfo.setRequestInfo(new SolrRequestInfo(solrReq, solrRsp));\n            execute(solrRsp);\n            HttpCacheHeaderUtil.checkHttpCachingVeto(solrRsp, resp, reqMethod);\n            Iterator<Map.Entry<String, String>> headers = solrRsp.httpHeaders();\n            while (headers.hasNext()) {\n              Map.Entry<String, String> entry = headers.next();\n              resp.addHeader(entry.getKey(), entry.getValue());\n            }\n            QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n            if (invalidStates != null) solrReq.getContext().put(CloudSolrClient.STATE_VERSION, invalidStates);\n            writeResponse(solrRsp, responseWriter, reqMethod);\n          }\n          return RETURN;\n        default: return action;\n      }\n    } catch (Throwable ex) {\n      sendError(ex);\n      // walk the the entire cause chain to search for an Error\n      Throwable t = ex;\n      while (t != null) {\n        if (t instanceof Error) {\n          if (t != ex) {\n            log.error(\"An Error was wrapped in another exception - please report complete stacktrace on SOLR-6161\", ex);\n          }\n          throw (Error) t;\n        }\n        t = t.getCause();\n      }\n      return RETURN;\n    } finally {\n// I WOULD HAVE EXPECTED SolrRequestInfo.clearRequestInfo(); call here\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n\n\nSo yes appears to be the same issue as SOLR-8657, but this details another code path that needs to be addressed. ",
            "id": "comment-15347349"
        },
        {
            "date": "2016-06-24T23:38:21+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Gary Lee, SolrRequestInfo.clearRequestInfo() is being called on HttpSolrCall.destroy(), which looks like the correct place to me. See SolrDispatchFilter\n\n      try {\n        Action result = call.call();\n        switch (result) {\n          case PASSTHROUGH:\n            chain.doFilter(request, response);\n            break;\n          case RETRY:\n            doFilter(request, response, chain, true);\n            break;\n          case FORWARD:\n            request.getRequestDispatcher(call.getPath()).forward(request, response);\n            break;\n        }\n      } finally {\n        call.destroy();\n        ExecutorUtil.setServerThreadFlag(null);\n      }\n\n\nIs the stack trace you see the same as what was pasted in SOLR-8657? If not, can you provide one? ",
            "id": "comment-15348890"
        },
        {
            "date": "2016-06-25T00:31:07+0000",
            "author": "Gary Lee",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe I don't think I've seen a stack trace - just a lot of these messages in our solr logs:\n\n2016-06-24 23:05:24,173 ERROR org.apache.solr.request.SolrRequestInfo - Previous SolrRequestInfo was not closed!  req=commit=true\n2016-06-24 23:05:24,173 ERROR org.apache.solr.request.SolrRequestInfo - prev == info : false\n\n\n\nWhen I debugged through this one time, I remember it was the HttpSolrCall.call where I saw the error occur, so i was led to believe that this was possibly the point where we do not close, but as you pointed out, the destroy is called, so it is getting cleaned up. In that case, the code path in SOLR-8657 is probably the same one we're hitting. ",
            "id": "comment-15348946"
        },
        {
            "date": "2016-09-28T08:13:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Closing as duplicate ",
            "id": "comment-15528834"
        }
    ]
}