{
    "id": "SOLR-6195",
    "title": "replace updateHandler/indexWriter/closeWaitsForMerges with indexConfig/closeWriterWaitsForMerges",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "SOLR-6125 added a new \"closeWaitsForMerges\" config option, but in my opinion this was done too hastily w/o enough consideration to how/shere the option is configured.\n\n\n\tit's currently \"updateHandler/indexWriter/closeWaitsForMerges\"\n\t\n\t\tthere has never been an \"updateHandler/indexWriter\" section in solrconfig.xml until now\n\t\tthis is the only setting that currently exists in this section\n\t\n\t\n\tthis setting, although used by DirectUpdateHandler2, does not (from a user perspective really fit with the other existing settings in <updateHandler>\n\t\n\t\ti think from a user perspective, it would make much more sense in <indexConfig> along side the other merge related settings.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14041412",
            "date": "2014-06-23T22:25:36+0000",
            "content": "suggestion for moving forward:\n\n\n\tleave most of the code SOLR-6125 added alone, but mark it deprecated\n\tadd new logic for a indexConfig/closeWriterWaitsForMerges Boolean in SolrIndexConfig which defaults to null\n\tadd new logic in DirectUpdateHandler2 to check core.getSolrConfig().indexConfig.closeWriterWaitsForMerges first, and only if null does it look at updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\tadd tests for both config options\n\n "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14042657",
            "date": "2014-06-24T20:46:44+0000",
            "content": "From the point of view of the code I think this still belongs in UpdateHandlerInfo - maybe add a bit of logic to SolrConfig to check both places when building the UpdateHandlerInfo object?\n\nAs far as tests go, this is kind of tricky to test properly.  You'd want to trigger a merge and then close and see if things shut down before the merge goes through.  I'll have a think. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14042792",
            "date": "2014-06-24T22:38:13+0000",
            "content": "From the point of view of the code  I think this still belongs in UpdateHandlerInfo ..\n\nWhy? \n\nPrior to adding this option nothing in UpdateHandlerInfo had anything to do with the IndexWriter or merges \u2013 and yet there are several indexwriter / mergering related settings that already exist in SolrIndexConfig.\n\nIf your point is simply that at the moment the UpdateHandler already fetches the UpdateHandlerInfo from the SolrConfig and you think that's cleaner then having it directly ask for the SolrIndexConfig \u2013 well ... i disagree, but not enough to argue over it that strongly.  I think the setting conceptually makes more sense in indexConfig, and i think it's important to keep these config objects so that they closely model the config concepts \u2013 which means the canonical place to \"store\" this setting should be in SolrIndexConfig.  But i've got no problem adding a convenience method to UpdateHandlerInfo that proxies out the SolrIndexConfig (which SolrConfig can give UpdateHandlerInfo a reference to on construction).\n\nhows that sound?\n\nAs far as tests go, this is kind of tricky to test properly...\n\nIt's one thing to say it's really hard to test that the option does the right thing on shutdown \u2013 my concern is that, as a config option, we don't even have a test that it's parsed correctly and you don't get an NPE or something like that if you try to turn it on.  \n\nI'd be happy with just that - but off the top of my head if you wanted to be sure it worked properly i bet we could mock out a MergePolicy that does nothing untill it sees a semaphore that's triggered by a static metod.  index a doc, commit, index another doc, commit, do an optimize in a background thread, then call close on the core in a thread with a timeout, etc...\n "
        }
    ]
}