{
    "id": "LUCENE-5329",
    "title": "Make DocumentDictionary and co more lenient to dirty documents",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently DocumentDictionary errors out whenever any document does not have value for any relevant stored fields. It would be nice to make it lenient and instead ignore the invalid documents.\n\nAnother \"issue\" with the DocumentDictionary is that it only allows string fields as suggestions and binary fields as payloads. When exposing these dictionaries to solr (via https://issues.apache.org/jira/browse/SOLR-5378), it is inconvenient for the user to ensure that a suggestion field is a string field and a payload field is a binary field. It would be nice to have the dictionary \"just work\" whenever a string/binary field is passed to suggestion/payload field. The patch provides one solution to this problem (by accepting string or binary values), though it would be great if there are any other solution to this, without making the DocumentDictionary \"too flexible\"",
    "attachments": {
        "LUCENE-5329.patch": "https://issues.apache.org/jira/secure/attachment/12612136/LUCENE-5329.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-05T09:06:16+0000",
            "content": "Initial patch:\n\n\tskip documents that have any invalid fields\n\timproved tests to test it\n\tallow suggestion/payload field to accept string/binary values\n\timproved documentation\n\n ",
            "author": "Areek Zillur",
            "id": "comment-13813786"
        },
        {
            "date": "2013-11-05T09:14:22+0000",
            "content": "Hi Areek,\n\nI was asking myself the same question the other day.\n\nI felt making payloads binary values was too restrictive. Also I thought if we don't use binary values you could have multiple payload fields.\n\nA use case where multiple payload fields would be useful:\nYou have product autosuggest in an eCommerce store.\nYou might want back in the suggested document - link, image url, price etc. as payloads making it easier for someone for integrate.\n\nIs there a negative side to making any such changes?  ",
            "author": "Varun Thacker",
            "id": "comment-13813795"
        },
        {
            "date": "2013-11-05T19:50:28+0000",
            "content": "These are my thoughts on this:\n\n\tFrom the Lucene Suggester perspective, it makes perfect sense to have the payload as a binary field. Because the payload is just 'stored' as is and then returned, no processing is done on it, hence it makes sense that the lucene suggester just treats it as binary data.\n\tHaving said that when exposing it from Solr, it would be nice to make it \"just work\", rather than the user having to make sure what field will spit what out, hence the proposed changes\n\tRegarding the use-case with ecommerce store, the payload does not necessarily have  to be a field, it can be the aggregate of other fields or some arbitrary associated data. (though there is no way to do so in Solr now, but I plan to make it possible with the new Solr Suggester (SOLR-5378) .\n\tAs far as I understand, payloads should remain binary in the Lucene Suggesters, but the dilemma is whether the input to the suggester be flexible\n\n ",
            "author": "Areek Zillur",
            "id": "comment-13814197"
        },
        {
            "date": "2013-11-14T09:35:13+0000",
            "content": "Patch Updated:\n\n\tAdded ctor for DocumentExpressionDictionary (can take in ValueSource) [wondering if the name should be more general, as it can now compute weights using ValueSource directly]\n\tAllow DocumentDictionary to use NumericDocValuesField for suggestion weights\n\tUpdated tests to reflect new changes\n\n\n\nNOTE: using ant documenation-lint gives me this error (any advice on fixing this javadoc is greatly appreciated):\n     [exec] file:///build/docs/suggest/org/apache/lucene/search/suggest/DocumentExpressionDictionary.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/queries.function.ValueSource.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/queries.function.ValueSource.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/queries.function.ValueSource.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/queries.function.ValueSource.html ",
            "author": "Areek Zillur",
            "id": "comment-13822275"
        },
        {
            "date": "2013-11-14T19:34:03+0000",
            "content": "Updated patch:\n\n\tfixed documentation-lint issue (added queries javadoc in build)\n\tchanged # of docs generated in tests to make it a little faster\n\n ",
            "author": "Areek Zillur",
            "id": "comment-13822803"
        },
        {
            "date": "2013-11-18T05:28:02+0000",
            "content": "Updated Patch:\n\n\tProperly handle reader with no documents [instead of erroring out, return no suggester inputs]\n\tMinor refactoring of ctor logic\n\tAdded tests for empty readers [DocumentDictionary & DocumentExpressionDictionary]\n\tAdded ValueSource test for DocumentExpressionDictionary\n\n ",
            "author": "Areek Zillur",
            "id": "comment-13825121"
        },
        {
            "date": "2013-11-20T20:03:10+0000",
            "content": "Patch looks good!\n\nWhen you say:\n\n *      if any of the term or (optionally) payload fields supplied\n *      do not have a value for a document, then the document is \n *      rejected by the dictionary\n\n\nDoes that mean the document is silently skipped?  (rejected sounds like it may throw an exception).\n\nWhy did liveDocs need to become non-final?\n\nInstead of trying to pull the NumericDocValues for weight on every getWeight call, could we do it up front in the ctor?  And, just use MultiDocValues (instead of holding leaves, starts and doing the bin search ourselves). ",
            "author": "Michael McCandless",
            "id": "comment-13828053"
        },
        {
            "date": "2013-11-21T22:50:12+0000",
            "content": "Updated Patch:\n\n\tUpdated Document [rejected -> skipped]\n\tUse MultiDocValues for DocumentDictionary\n\tRefactored ctor\n\n ",
            "author": "Areek Zillur",
            "id": "comment-13829433"
        },
        {
            "date": "2013-11-21T22:53:41+0000",
            "content": "Thanks Michael for the review! I have addressed your comments. One question though, I was wondering if we have something similar to MultiDocValues for ValueSource (MultValueSource doesnt seem like what I wanted). I think it would be nice if we can get rid of the leaves and starts logic from the DocExprDict too.  ",
            "author": "Areek Zillur",
            "id": "comment-13829436"
        },
        {
            "date": "2013-11-22T12:56:18+0000",
            "content": "Thanks Areek, patch looks great!   I'll commit soon...\n\nThat's a good question: I don't think we have a MultiValueSource. ",
            "author": "Michael McCandless",
            "id": "comment-13829937"
        },
        {
            "date": "2013-11-22T15:21:32+0000",
            "content": "Commit 1544570 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1544570 ]\n\nLUCENE-5329: Document/ExpressionDictionary are now lenient if a doc is missing term/payload/weight ",
            "author": "ASF subversion and git services",
            "id": "comment-13830036"
        },
        {
            "date": "2013-11-22T15:27:57+0000",
            "content": "Commit 1544572 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1544572 ]\n\nLUCENE-5329: Document/ExpressionDictionary are now lenient if a doc is missing term/payload/weight ",
            "author": "ASF subversion and git services",
            "id": "comment-13830043"
        },
        {
            "date": "2013-11-22T15:28:10+0000",
            "content": "Thanks Areek! ",
            "author": "Michael McCandless",
            "id": "comment-13830045"
        }
    ]
}