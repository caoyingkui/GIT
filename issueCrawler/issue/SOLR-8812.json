{
    "id": "SOLR-8812",
    "title": "ExtendedDismaxQParser (edismax) ignores Boolean OR when q.op=AND and mm is not explicitly set",
    "details": {
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5.2",
            "5.6",
            "6.0.2",
            "6.1",
            "7.0"
        ],
        "affect_versions": "5.5",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The edismax parser ignores Boolean OR in queries when q.op=AND. This behavior is new to Solr 5.5.0 and an unexpected major change.\n\nExample:\n      \"q\": \"id:12345 OR zzzzzzzzzz\",\n      \"defType\": \"edismax\",\n      \"q.op\": \"AND\",\nwhere \"12345\" is a known document ID and \"zzzzzzzzzz\" is a string NOT present in my data\n\nVersion 5.5.0 produces zero results:\n    \"rawquerystring\": \"id:12345 OR zzzzzzzzzz\",\n    \"querystring\": \"id:12345 OR zzzzzzzzzz\",\n    \"parsedquery\": \"(+((id:12345 DisjunctionMaxQuery((text:zzzzzzzzzz)))~2))/no_coord\",\n    \"parsedquery_toString\": \"+((id:12345 (text:zzzzzzzzzz))~2)\",\n    \"explain\": {},\n    \"QParser\": \"ExtendedDismaxQParser\"\n\nVersion 5.4.0 produces one result as expected\n  \"rawquerystring\": \"id:12345 OR zzzzzzzzzz\",\n    \"querystring\": \"id:12345 OR zzzzzzzzzz\",\n    \"parsedquery\": \"(+(id:12345 DisjunctionMaxQuery((text:zzzzzzzzzz))))/no_coord\",\n    \"parsedquery_toString\": \"+(id:12345 (text:zzzzzzzzzz))\"\n    \"explain\": {},\n    \"QParser\": \"ExtendedDismaxQParser\"",
    "attachments": {
        "SOLR-8812-barbie.patch": "https://issues.apache.org/jira/secure/attachment/12796761/SOLR-8812-barbie.patch",
        "SOLR-8812.patch": "https://issues.apache.org/jira/secure/attachment/12794179/SOLR-8812.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-09T22:12:33+0000",
            "author": "Jack Krupansky",
            "content": "The difference in the generated query appears to be the \"))~2\" which indicates a BooleanQuery with a minShouldMatch of 2 which means that both OR/SHOULD terms MUST match, effectively turning SHOULD/OR into MUST/AND.\n\nI'm guessing it was this 5.5 change: SOLR-2649:\n\n\n* SOLR-2649: MM ignored in edismax queries with operators.\n  (Greg Pendlebury, Jan H\u00f8ydahl et. al. via Erick Erickson)\n\n\n\nI think q.op=AND simply sets MM=100%, effectively overriding the explicit OR.\n ",
            "id": "comment-15188158"
        },
        {
            "date": "2016-03-10T01:25:37+0000",
            "author": "Ryan Steinberg",
            "content": "I agree: SOLR-2649 likely introduced this new behavior. I just read through the comments on SOLR-2649 and I'm still not sure this was intended: effectively, explicit OR is no longer possible when q.op=AND, even in the absence of an explicit mm param. After reading this helpful blog post referenced in the ExtendedDismaxQParser unit test, I now understand that AND takes precedence over OR but I'm not sure this is a clearly documented or anticipated consequence of this recent change. ",
            "id": "comment-15188444"
        },
        {
            "date": "2016-03-18T11:53:43+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Attaching patch with a failing test case. It is quite shocking that we apparently did not have test coverage of basic OR with q.op=AND already?? ",
            "id": "comment-15201362"
        },
        {
            "date": "2016-03-18T12:03:34+0000",
            "author": "Jan H\u00f8ydahl",
            "content": " Promoting this bug as Blocker for now, as it directly affects correctness of many edismax queries, and likely to hit a large part of users upgrading to 5.5.0. ",
            "id": "comment-15201372"
        },
        {
            "date": "2016-03-18T12:20:37+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Problem lies in SolrPluginUtils.setMinShouldMatch(BooleanQuery.Builder q, String spec, boolean mmAutoRelax), which before SOLR-2649 was only ever called if the query did not contain explicit OR or NOT, while now it is called always, but is not designed to handle those cases. The failing test has two clauses (text_sw:oil) (text_sw:stock) both of which are SHOULD. But still we return mm=2. ",
            "id": "comment-15201388"
        },
        {
            "date": "2016-03-18T12:36:50+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Also, in SOLR-2649 we have\n\n     public ExtendedSolrQueryParser(QParser parser, String defaultField) {\n       super(parser, defaultField);\n-      // don't trust that our parent class won't ever change its default\n-      setDefaultOperator(QueryParser.Operator.OR);\n+      // Respect the q.op parameter before mm will be applied later\n+      SolrParams defaultParams = SolrParams.wrapDefaults(parser.getLocalParams(), parser.getParams());\n+      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(\n+          parser.getReq().getSchema(), defaultParams.get(QueryParsing.OP));\n+      setDefaultOperator(defaultOp);\n     }\n\n\nThis means the mm calculations may now get REQUIRED clauses as input, while before SOLR-2649 when defaultOperator was forced to OR, all clauses would enter as OPTIONAL. Since minShouldMatch is supposed to be calculated only between optional clauses, this will fail. ",
            "id": "comment-15201408"
        },
        {
            "date": "2016-03-18T14:17:10+0000",
            "author": "Ryan Josal",
            "content": "On the topic of SOLR-2649, I just upgraded to 5.5 yesterday and SOLR-2649 broke one of our test cases which was \"hair ties -barbie\" should return hair ties but not barbie hair ties, and now it matches nothing.  I assume this is intended, but if not, maybe this ticket also addresses it? ",
            "id": "comment-15201525"
        },
        {
            "date": "2016-03-30T12:45:53+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Erick Erickson Should we attempt a fix for 5.5.1 or do you prefer to revert SOLR-2649 until there is a better patch available? ",
            "id": "comment-15217914"
        },
        {
            "date": "2016-03-30T15:06:53+0000",
            "author": "Erick Erickson",
            "content": "Jan H\u00f8ydahl I could go either way on this. As I stated in SOLR-2649, though, I'm out of my depth when dealing with the parsing here, plus I'm kind of slammed for the next while.\n\nSo unless someone volunteers to create a patch, I'll revert SOLR-2649 before any 5.5.1 release. ",
            "id": "comment-15218104"
        },
        {
            "date": "2016-03-30T21:26:33+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Perhaps, after reverting, we could spend some effort adding better test coverage to edismax, to prevent similar regressions in the future.\nThen also add a bunch more tests for SOLR-2649, defining wanted behavior for all kind of corner cases. ",
            "id": "comment-15218894"
        },
        {
            "date": "2016-03-31T00:00:23+0000",
            "author": "Greg Pendlebury",
            "content": "I am happy to take a look at any issues, since I was involved in SOLR-2649. I need to get a new copy of the code first, but in the interim, can someone confirm that explicitly setting mm to 0 does not fix this? I believe mm defaults to 100%, so that may be the real culprit, as opposed to q.op=AND. Before SOLR-2649 was resolved, setting an OR operator would have caused mm to be ignored. Now it will use the default value unless you set it explicitly.\n\nOur production servers are using 5.1 with SOLR-2649 applied, and we have q.op=AND, with perfectly functional OR operators and mm=0%. All of the obvious queries work, including the cases referenced above.\n\nFrom memory there are a lot of subtle cliffs to fall off here, such as making sure we are talking about top level clauses and ultimately remembering that Solr does not use boolean logic... and there are some edge cases where it simply doesn't work the same way as the occurs flags. SHOULD vs OR is the main culprit. ",
            "id": "comment-15219086"
        },
        {
            "date": "2016-03-31T00:29:11+0000",
            "author": "Ryan Steinberg",
            "content": "I tested explicitly setting mm to 0 and all of my tests passed. I also added a mm=0 to the failing test case from Jan H\u00f8ydahl and it passed too.\n\nGreg Pendlebury, I think your suspicion about mm defaulting to 100% is correct. ",
            "id": "comment-15219120"
        },
        {
            "date": "2016-03-31T00:35:15+0000",
            "author": "Greg Pendlebury",
            "content": "Thanks. Hopefully that is ok. I just installed git and started cloning trunk... now to upgrade to Java 8.\n\nI think it is all working as intended, it is just that there is a confusing legacy of not having to worry about what mm was set to for some use cases. SOLR-2649 will force people to check what the parameters are, but all queries are now supported.\n\nIt would be nice if it was less disruptive, but given that pre-patch there was no way to get edismax to do certain queries, no matter what parameters you set, I think it is still an improvement. ",
            "id": "comment-15219133"
        },
        {
            "date": "2016-03-31T02:17:05+0000",
            "author": "Erick Erickson",
            "content": "Thanks to you both for jumping in here. I'll see what I can do to get this into any 5.5.1 and also 6.0 (and trunk of course).\n\nJan H\u00f8ydahl What do you think? We can raise adding tests as a separate JIRA... ",
            "id": "comment-15219210"
        },
        {
            "date": "2016-03-31T11:27:15+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Setting q.op=AND\u00a0or mm=100% should result in exactly the same behavior. The fact that setting mm=0 passes the test could be a coincidence more than a general workaround, perhaps an issue of the order things are done in the code. Would be interesting to see which code path is executed with q.op=AND&mm=0 though...\n\nErick Erickson We can add more general tests in SOLR-8926. ",
            "id": "comment-15219758"
        },
        {
            "date": "2016-03-31T11:40:48+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I think your suspicion about mm defaulting to 100% is correct.\nNot entirely. The method DisMaxQParser#parseMinShouldMatch \"Applies the appropriate default rules for the \"mm\" param based on the effective value of the \"q.op\" param\", i.e. if mm is not explicitly set, it is set i 0 for q.op=OR and 100% for q.op=AND. ",
            "id": "comment-15219765"
        },
        {
            "date": "2016-03-31T18:26:29+0000",
            "author": "Erick Erickson",
            "content": "OK, just to see if we're all on the same page. I can make this not a blocker since we have a work-around (set mm=0 when mixing q.op=AND with OR top-level clauses) and work is ongoing to clarify the interaction between q.op and mm.\n\nThe code Jan pointed out sure makes this confusing. Am I correct in that the OR is honored (without setting mm=0) in a query like  q.op=AND&q=A and (B OR C)? ",
            "id": "comment-15220391"
        },
        {
            "date": "2016-03-31T20:31:22+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I can make this not a blocker since we have a work-around\nIsn't it premature to proclaim a generic workaround, at least without more test coverage to prove so? \nThe majority of edismax users have not upgraded to 5.5.0 yet, and for many of them, existing applications and existing queries will start producing wrong results. If there is a generic workaround to add mm=0 in solrconfig.xml to get back the correct behavior, we can declare a workaround. But we cannot assume it is acceptable for people to write custom logic to conditionally change the request depending on how the user-entered query looks like. \nThat's why I lean towards reverting, since a revert will only affect the very few 5.5.0 users who rely upon the new stuff. And they have a workaround in building a custom Solr version with the patch, or waiting until 5.5.x or 6.x where a proper fix is introduced. ",
            "id": "comment-15220618"
        },
        {
            "date": "2016-03-31T23:25:13+0000",
            "author": "Greg Pendlebury",
            "content": "I don't know that what we are talking about here is a 'workaround' at all. Solr is doing exactly what it is being asked to do. I know it is disrupting an existing user base, so it warrants discussion and maybe even a 'fix'... but the existing user base were leaving a non-configured parameter at its default value (which probably didn't match their use case) and it only worked because the parameter was being ignored by edismax. The fact that parameter was ignored introduced the real bugs in SOLR-2649.\n\nI think there has always been confusion over how this works under the hood, and that still continues. q.op and mm apply to two different parts of the query, and each of them has other factors that come into play.\n\n\tq.op is a boolean operator, which happens pre-parse (or in the very earliest stages of parsing)\n\tmm applies to (top level) clauses which have the SHOULD occur flag after Solr translates all the boolean operators\n\tif mm is not explicitly set, the default value is determined by q.op (? I haven't verified this, but that is Jan's input above). The old doco says it is always 100% default... but I personally have always set it explicitly... no experience.\n\tSolr translates boolean operators into occurs flags differently depending on the value of q.op. In particular q.op=AND causes non-intuitive generation of occurs flags if looked at from a purely boolean perspective.\n\tmm does not make much sense at all if you think about search as a purely boolean query (ie. the result either matches or doesn't) instead of occurs flags (ie. the score of the result is either higher or lower)\n\n\n\nSo now that SOLR-2649 has come along, it slightly muddies the water because:\n\n\tq.op is no longer hard coded to OR. Pre-patch the user could say q.op=AND, but it didn't do anything to the query\n\tThe presence of an operator no longer turns off the mm feature\n\n\n\nMy take on the issue is that users who want to use boolean operators in edismax should pay attention to the mm parameter, and make sure their choice matches their use case. Previously they didn't have to... but the presence of the boolean operators when using edismax was buggy (? debatable... it has been argued that it simply wasn't the use case edismax was first written for).\n\nHaving said that, IF anything was to change, I would simply play subtly with choosing the default value of mm. Maybe something like this:\n\nIF (the query contains a boolean operator) AND (mm has not been explicitly set) THEN (mm = 0%)\n\nIt is a tweak on the work Jan did in SOLR-2649, so that instead of turning off mm in response to a boolean operator being present, we instead influence the default value. We still let users ultimately set up their parameters however they want though. If the user has a use case that includes both boolean parameters and mm logic... have fun. ",
            "id": "comment-15220854"
        },
        {
            "date": "2016-04-01T00:17:55+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Greg Pendlebury looks like you have a good command on the logic and interactions here, so feel free to throw up a patch...\n\nIF (the query contains a boolean operator) AND (mm has not been explicitly set) THEN (mm = 0%)\nIn my experience some users may set mm=100% while others achieved the same with q.op=AND. Advising users to favor the use of only q.op to get boolean operators working makes the distinction hard to explain.\n\nI'm positive to applying a fix that focuses on getting the pure AND/OR 0%/100% case fixed (if that could be achieved with your proposed method), and then worry about other mm's combined with explicit operators later. ",
            "id": "comment-15220908"
        },
        {
            "date": "2016-04-01T00:31:18+0000",
            "author": "Greg Pendlebury",
            "content": "Ok, I will try to find some time over the next week or so. I freely confess it doesn't look great on a Friday afternoon and school holidays begin here after next week. It might be a rough contribution someone else can carry over the line.\n\nWith regards to mixed cases of q.op and mm where users are explicitly setting them, I think they are already covered if you look in the unit test testDefaultOperatorWithMm(). The problem here seems to be the use case where people do not explicitly set mm and fall back to the default. This is treading on some expected behaviour from existing users. ",
            "id": "comment-15220925"
        },
        {
            "date": "2016-04-01T03:16:08+0000",
            "author": "Greg Pendlebury",
            "content": "Attaching possible 'fix' that defaults mm to 0% if the users has declared no explicit mm, but has boolean operators in their query.\n\nFirst time I have generated a patch using git, so hopefully it is ok. ",
            "id": "comment-15221073"
        },
        {
            "date": "2016-04-01T03:19:58+0000",
            "author": "Greg Pendlebury",
            "content": "I also confirmed (for my own sanity) that q.op does indeed influence the default value of mm, as per Jan H\u00f8ydahl. Personally I don't like that, and perhaps it isn't relevant anymore since SOLR-2649... but I left it alone. ",
            "id": "comment-15221079"
        },
        {
            "date": "2016-04-01T09:07:08+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Should we add a test case for Ryan Josal's issue above as well? \n\"hair ties -barbie\" should return hair ties but not barbie hair ties, and now it matches nothing. ",
            "id": "comment-15221407"
        },
        {
            "date": "2016-04-02T03:10:30+0000",
            "author": "Erick Erickson",
            "content": "We've got something of a time problem here. 6.0 is being released (there was an RC1, but it's being re-spun) and this JIRA is marked as a blocker.\n\nI don't think that this should be a blocker for 6.0 since it's already in 5.5. And I'm reluctant to hurry a fix in to 6.0 at this late date given the discussion so far. I suspect that practically 6.0 won't be rushed into production before we get a fix for this issue (6.0.1 or 6.1 or whatever).\n\nWe should fix it ASAP, but not at the expense of holding up 6.0.\n\nThoughts? ",
            "id": "comment-15222676"
        },
        {
            "date": "2016-04-03T12:14:32+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "How about initiating a 5.5.1 and 6.0.1 release immediately after the 6.0 release? ",
            "id": "comment-15223238"
        },
        {
            "date": "2016-04-04T00:35:53+0000",
            "author": "Greg Pendlebury",
            "content": "Adding a 'hair ties -barbie' example to unit tests. Not sure it demonstrates anything new, but it does work as I would expect.\n\nI can't get git to generate a combined patch the way I would have in svn... my git-fu is weak. ",
            "id": "comment-15223568"
        },
        {
            "date": "2016-04-04T00:58:09+0000",
            "author": "Greg Pendlebury",
            "content": "Erick Erickson, personally, I am ambivalent with regards to timing and versions. I am still not convinced there is actually an issue here, but I don't want to be a dick and dismiss it out-of-hand.\n\nThe patches provided are simply about choosing default parameter values that disrupt the least number of users who did not have mm set to an appropriate value. Any user (risky, broad generalisation incoming) who puts a boolean OR operator into an edismax query string would not want mm=100%, but that is what is happening here. ",
            "id": "comment-15223581"
        },
        {
            "date": "2016-04-27T01:07:36+0000",
            "author": "Erick Erickson",
            "content": "Since this hasn't really reached any sort of resolution, and since this behavior is out there in the field already I changed its status. I'll keep it on my back burner.\n\nI suspect that Jan's comments about beefing up the test cases is well taken. When I Get Some Time (tm) I'll see about beefing up the test cases (all volunteers welcome). I think it'll be easier to discuss specific test cases and whether the behavior they're testing is the desired behavior... ",
            "id": "comment-15259298"
        },
        {
            "date": "2016-04-27T06:59:01+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Relevant user@ email thread, confirming the impression that this indeed must be treated as a bug: http://search-lucene.com/m/eHNlru3hR1b74Oz&subj=How+can+I+set+the+defaultOperator+to+be+AND+ ",
            "id": "comment-15259660"
        },
        {
            "date": "2016-05-11T07:47:35+0000",
            "author": "Stephan Lagraulet",
            "content": "Can you remove this issue from version 5.5.1 as this version is packaged without a fix for this issue? ",
            "id": "comment-15279729"
        },
        {
            "date": "2016-06-10T06:26:40+0000",
            "author": "Steve Rowe",
            "content": "Patch combining both of Greg Pendlebury's patches, beefing up the tests, simplifying the change a bit, and putting things back where they were prior to SOLR-2649.\n\nSome of the comment text was skeptical about what's currently supported, so I changed it to more neutral language.  I also tried to regularize the failure text in the tests.\n\nI also added one test to demonstrate that David Smiley's SOLR-9174 mm issue is (still) handled properly.\n\nAll Solr tests and procommit passes.  Committing shortly. ",
            "id": "comment-15323952"
        },
        {
            "date": "2016-06-10T07:01:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5bc34949adc911dacba29c08f1e522de4679aee6 in lucene-solr's branch refs/heads/branch_5_5 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5bc3494 ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15323985"
        },
        {
            "date": "2016-06-10T07:01:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 508f8f83e1ed3bb8c7f8ca37d767e95b5b7b87c3 in lucene-solr's branch refs/heads/branch_5_5 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=508f8f8 ]\n\nSOLR-8812: CHANGES.txt entry ",
            "id": "comment-15323987"
        },
        {
            "date": "2016-06-10T07:01:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e88a64a0490ac2139e0aa55a8ca8b3588ce41395 in lucene-solr's branch refs/heads/branch_5x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e88a64a ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15323988"
        },
        {
            "date": "2016-06-10T07:01:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1dff75c643f17c5447264fecb9b71530e05f017f in lucene-solr's branch refs/heads/branch_5x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1dff75c ]\n\nSOLR-8812: CHANGES.txt entry ",
            "id": "comment-15323990"
        },
        {
            "date": "2016-06-10T07:02:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 202b993335a370be06db02b866c62a876350b01d in lucene-solr's branch refs/heads/branch_6_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=202b993 ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15323991"
        },
        {
            "date": "2016-06-10T07:02:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d5712fea6058ed5fe905f4e157466d117a1f38c0 in lucene-solr's branch refs/heads/branch_6_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d5712fe ]\n\nSOLR-8812: CHANGES.txt entry ",
            "id": "comment-15323993"
        },
        {
            "date": "2016-06-10T07:02:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c2aac7d005424094e129045e834aa6ffb2c7aa82 in lucene-solr's branch refs/heads/branch_6_1 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c2aac7d ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15323994"
        },
        {
            "date": "2016-06-10T07:02:08+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e0c6762de8dd91e02a79a6d12b3164a052bf07ff in lucene-solr's branch refs/heads/branch_6_1 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e0c6762 ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15323996"
        },
        {
            "date": "2016-06-10T07:02:11+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3c789e9d274fb670c53c8eb6eb9dfceace2cd120 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3c789e9 ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15323998"
        },
        {
            "date": "2016-06-10T07:02:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 74d94ec26585d57d6991f99c892f7be1278346f9 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=74d94ec ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15324000"
        },
        {
            "date": "2016-06-10T07:02:16+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 38714399760889d2d7b188a87341aade6139ffef in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3871439 ]\n\nSOLR-8812: edismax: turn off mm processing if no explicit mm spec is provided and there are explicit operators (except for AND) - addresses problems caused by SOLR-2649 ",
            "id": "comment-15324002"
        },
        {
            "date": "2016-06-10T08:24:56+0000",
            "author": "Greg Pendlebury",
            "content": "Sounds (tentatively) ok to me. I was quite concerned when you said it puts things back to pre-SOLR-2649 functionality, but from looking at what got committed it seems that q.op=OR is no longer hardcoded in setDefaultOperator() (which was fixed in SOLR-2649). I haven't executed anything, but this seems like a good step with regards to mm handling. ",
            "id": "comment-15324063"
        },
        {
            "date": "2016-06-10T13:04:48+0000",
            "author": "David Smiley",
            "content": "Thanks so much for getting this done Steve Rowe (and others)! ",
            "id": "comment-15324415"
        },
        {
            "date": "2016-06-10T14:41:31+0000",
            "author": "Erick Erickson",
            "content": "Big thanks Steve! This has been contributing to my \"guilt load\" for a really long time. ",
            "id": "comment-15324542"
        },
        {
            "date": "2016-06-10T15:12:49+0000",
            "author": "Steve Rowe",
            "content": "Sounds (tentatively) ok to me. I was quite concerned when you said it puts things back to pre-SOLR-2649 functionality, but from looking at what got committed it seems that q.op=OR is no longer hardcoded in setDefaultOperator() (which was fixed in SOLR-2649). I haven't executed anything, but this seems like a good step with regards to mm handling.\n\nGreg, what I committed is behaviorally the same as your patch - check the unit tests: I included all of the ones you wrote, but added more to cover all permutations of operator and q.op.  \n\nWhat I meant by \"put things back\" was that I attempted to minimize the diff between what I committed and the pre-SOLR-2649 code, so I put your foundOperators() back in the same location that it was when it was named doMinMatched() - your patch put it in a different location in the source file.\n\nThanks for the work you did on this issue! ",
            "id": "comment-15324602"
        },
        {
            "date": "2016-06-11T01:57:37+0000",
            "author": "Greg Pendlebury",
            "content": "Sounds great. Add my thanks to the those you've already received. ",
            "id": "comment-15325638"
        },
        {
            "date": "2016-06-12T23:43:14+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks Steve for pushing this through! ",
            "id": "comment-15326691"
        }
    ]
}