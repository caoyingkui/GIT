{
    "id": "SOLR-725",
    "title": "CoreContainer/CoreDescriptor/SolrCore cleansing",
    "details": {
        "affect_versions": "1.3",
        "status": "Reopened",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "These 3 classes and the name vs alias handling are somewhat confusing.\nThe recent SOLR-647 & SOLR-716 have created a bit of a flux.\nThis issue attemps to clarify the model and the list of operations. \n\nCoreDescriptor: describes the parameters of a SolrCore\n\nDefinitions\n\n\thas one name\n\t\n\t\tThe CoreDescriptor name may represent multiple aliases; in that case, first alias is the SolrCore name\n\t\n\t\n\thas one instance directory location\n\thas one config & schema name\n\n\n\nOperations\nThe class is only a parameter passing facility\n\nSolrCore: manages a Lucene index\n\nDefinitions\n\n\thas one unique name (in the CoreContainer)\n\t\n\t\tthe name is used in JMX to identify the core\n\t\n\t\n\thas one current set of aliases\n\t\n\t\tthe name is the first alias\n\t\n\t\n\n\n\nName & alias operations\n\n\n\tget name/aliases: obvious\n\talias: adds an alias to this SolrCore\n\tunalias: removes an alias from this SolrCore\n\tname: sets the SolrCore name\n\t\n\t\tpotentially impacts JMX registration\n\t\n\t\n\trename: picks a new name from the SolrCore aliases\n\t\n\t\ttriggered when alias name is already in use\n\t\n\t\n\n\n\n\nCoreContainer: manages all relations between cores & descriptors\n\nDefinitions\n\n\thas a set of aliases (each of them pointing to one core)\n\t\n\t\tensure alias uniqueness.\n\t\n\t\n\n\n\nSolrCore instance operations\n\n\n\tload: makes a SolrCore available for requests\n\t\n\t\tcreates a SolrCore\n\t\tregisters all SolrCore aliases in the aliases set\n\t\t(load = create + register)\n\t\n\t\n\tunload: removes a core idenitified by one of its aliases\n\t\n\t\tstops handling the Lucene index\n\t\tall SolrCore aliases are removed\n\t\n\t\n\treload: recreate the core identified by one of its aliases\n\tcreate: create a core from a CoreDescriptor\n\t\n\t\treadies up the Lucene index\n\t\n\t\n\tregister: registers all aliases of a SolrCore\n\n\n\nSolrCore  alias operations\n\n\n\tswap: swaps 2 aliases\n\t\n\t\tmethod: swap\n\t\n\t\n\talias: creates 1 alias for a core, potentially unaliasing a previously used alias\n\t\n\t\tThe SolrCore name being an alias, this operation might trigger a SolrCore rename\n\t\n\t\n\tunalias: removes 1 alias for a core\n\t\n\t\tThe SolrCore name being an alias, this operation might trigger a SolrCore rename\n\t\n\t\n\trename: renames a core\n\n\n\nCoreAdminHandler: handles CoreContainer operations\n\n\tload/create:  CoreContainer load\n\tunload:  CoreContainer unload\n\treload: CoreContainer reload\n\tswap:  CoreContainer swap\n\talias:  CoreContainer alias\n\tunalias: CoreContainer unalias\n\trename: CoreContainer rename\n\tpersist: CoreContainer persist, writes the solr.xml\n\tstauts: returns the status of all/one SolrCore",
    "attachments": {
        "solr-725.patch": "https://issues.apache.org/jira/secure/attachment/12388834/solr-725.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Henri Biestro",
            "id": "comment-12625285",
            "date": "2008-08-25T09:20:00+0000",
            "content": "The patch solves the 3 issues this relates to.\n\nThe SolrCore handles its name & makes JMX follow potential renames.\nCoreDescriptor does not expose more than necessary (& protects the possibility of SOLR-646 property expression features).\nCoreContainer is refactored to be a bit more efficient wrt cores locking & SolrCore alias/name handling. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625286",
            "date": "2008-08-25T09:21:42+0000",
            "content": "I wish to know a few things.\n\n\tIs anybody using the alias feature?\n\tIf yes , what is the usecase?\n\n\n\nThe alias feature implementation confuses me and the behavior seems to be very inconsistent. \n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625304",
            "date": "2008-08-25T09:52:45+0000",
            "content": "About being inconsistent, this is what this issue attempts to solve.  \n\nAnd, yes, aliasing is a usefull feature: this allows to have one webapp path that's constant for users (or links to persist) and allows to change the index when reindexing is needed (reload is only good enough for non-schema related modifications) without fuss..\n\nSay you have your core declared as:\n\n<core name='version-2.1,public' .../>\n\n\n\nUsers refer to it through its public alias.\nWhen you make schema/indexing changes that necessitate reindexing (hcnage stopwords, stemming, etc):\n\n\tcreate your new core as 'version-3.0,dev'\n\treindex the content\n\tverify your preferred queries do work appropriately\n\talias('public', 'versions-3.0') ; which changes the link to point to the new version and closes the old one (as soon as all queries have finished running)\n\tunalias('dev'); so you are ready for next version\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625309",
            "date": "2008-08-25T10:04:52+0000",
            "content": "When you make schema/indexing changes that necessitate reindexing (hcnage stopwords, stemming, etc):\nWe are already doing this in SOLR-561 . What we do is after we make the necessary changes do a reload. \n\nI see your point of verifying the core . \n\nWhy is it not possible with the following steps?\n\n\n\tcreate('version-3.0,dev')\n\treindex the content\n\tverify your preferred queries do work appropriately\n\tswap ('public', 'versions-3.0')\n\tunload('versions-3.0')\n\n\n\n\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625317",
            "date": "2008-08-25T10:52:30+0000",
            "content": "What we do is after we make the necessary changes do a reload. \n\nYou lost me here; reindexing implies you loaded the core already. Guess you mean that after reindexing, you can replicate & slaves only have to reload?\n\nis it not possible with the following steps?\n\nCorrect, this is another useful way of using aliases to achieve the same. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625326",
            "date": "2008-08-25T11:45:25+0000",
            "content": "What we do is after we make the necessary changes do a reload. \nWe just blindly do a reload assuming everything is fine. So no testing. \n\nCorrect, this is another useful way of using aliases to achieve the same.\n\nThis does not look like a useful way of using aliases. This is one extra step which could have been avoided\n\nAccording to me the alias feature is implemented in a very wrong way.Because of that some commonly used methods have no consistency SolrCore#getName(), CoreDescriptor#getName() etc . \n\nMoreover I am yet to see a valid usecase.  I just wonder why it is there "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625347",
            "date": "2008-08-25T13:09:03+0000",
            "content": "\nbq . This does not look like a useful way of using aliases. This is one extra step which could have been avoided.\n\nYou used aliases in your own example. So I must have missed your point.\n\nWe just blindly do a reload assuming everything is fine. So no testing.\n\nYour operational rules are different than those I'm constrained to.\nI'm merely trying to contribute back the solution to some problems I've encountered.\n\nbq . the alias feature is implemented in a very wrong way\n\nAgain, this is what this issue attempts to address.\nIt's not intended to be confrontational.\n\nI am yet to see a valid usecase.\n\nBesides those already mentioned (& I guess Yonik may have more since he introduced aliasessolving solr-647), there are plenty of  other features that can come out from having a different path to use the same core; security, rendering, etc.\n\nCourtesy aside, I do respect functional needs of others & their implications although I don't understand all of them; I wish this was a community value.\n\n\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12625359",
            "date": "2008-08-25T13:54:26+0000",
            "content": "Paul - I haven't looked at Henri's patch, but like Henri I also don't follow your logic.  You give an example of using core alias (using swap), but then say you don't see a use case for it.  Could you please explain?\n\nAlso, thank you Henri for pushing this forward.  I haven't paid very close attention to all the new Core classes and couldn't tell you which one does what without studying the code and reading a pile of JIRA comments.\n\nDo you think this can wait to be committed after 1.3 is out (i.e. no need to stop working on it, just don't commit so we don't delay 1.3 more). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625363",
            "date": "2008-08-25T14:04:56+0000",
            "content": "Henri \u2013 Can you please attach the relevant parts of this patch to SOLR-723 to fix the JMX issues? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12625365",
            "date": "2008-08-25T14:07:51+0000",
            "content": "According to me the alias feature is implemented in a very wrong way.Because of that some commonly used methods have no consistency SolrCore#getName(), CoreDescriptor#getName() etc .\n\nAnother way to think about it is that a core should be independent of how it is named or accessed (via HTTP, etc)... it has no inherent name, but CoreContainer is a way of allowing access by name, and SolrDispatchFilter allows access by name over HTTP (via CoreContainer's names).  So in this mental model, it's SolrCore#getName() and CoreDescriptor#getName() that don't make sense. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625541",
            "date": "2008-08-25T22:58:16+0000",
            "content": "Otis, this does not hold releasing 1.3; I'm glad solr-724 got solved.\nI just wish it will be easier (& faster) to release 1.3.1. \nShalin, I'll do my best about solr-723; but again, this should not hold releasing 1.3. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625631",
            "date": "2008-08-26T05:35:52+0000",
            "content": "It seems that calling Alias may lead to closing of the old core in the CoreContainer#register method. The old core is closed even if it is aliased to some other name. This is a very dangerous side-effect of Alias and must be remedied. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625635",
            "date": "2008-08-26T05:48:10+0000",
            "content": "Paul - I haven't looked at Henri's patch, but like Henri I also don't follow your logic. You give an example of using core alias\n\nMy example uses SWAP . SWAP is a indeed a useful feature and SWAP does not use ALIAS . The usecase is this. I wish to start core and ensure that it is initialized properly . If it does I wish to replace that with another core .  \n\nMy concern here , \n\n\tWe have added a feature called ALIAS\n\tWhose usecases are not ver clear\n\tBecause of this feature some very useful methods are implemented inconsistently. As Yonik says \"core should be independent of how it is named\" . But as things stand we are removing some commonly useful methods\n\n\n\nOK. Now that we already have ALIAS as a feature I propose the following behavior ,\n\n\n\tlet the getName() methods remain as is.\n\tAn ALIAS must not rename a core. It should just add another mapping in the core container. The only command that should change a core's name should be SWAP\n\tAn ALIAS command must not succeed if the new name is already registered for another core. If a user wish to do so UNLOAD that core , or if it is an alias UNALIAS that name before trying this.\n\tThe solr.xml <core> tag must keep the name as the primary name. We can add an extra attribute 'alias' which can take multiple names. This is already discussed in SOLR-350.\n\tUNALIAS command can be added . It can just remove an ALIAS if it exists . But it must not be able to remove the primary name (use UNLOAD to do that).\n\tSolrQueryRequest should have a method to let handlers know through which alias this request is made\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625805",
            "date": "2008-08-26T17:47:17+0000",
            "content": "Shalin -\nWe decref the counter appropriately (registerNotSynchronized does not do it) or I just dont see the issue so I 'll assume that what bothers you is that unaliasing a core should not have the potential effect of closing it.\nIf we use Yonik's model, there is no reason not to; the model is akin to the inode / hard-link model on Unix. The inode in our case is the Lucene index (the dataDir, managed by the SolrCore) - and the aliases are the hardlinks. If you remove all links (unalias all aliases), the inode (of the Lucene index) goes away. Even if the unlink (unalias) is the side effect of another 'ln' (alias).\n\nA symbolic link model - as Paul proposes - is a different one. \nI don't get yet what the hard-link/Yonik's model problem is which I'd find useful to understand .\n\nPaul -\nBut as things stand we are removing some commonly useful methods\nWhich ones? Is it something that impacts solr-561 somehow?\nBtw, your example started using the alias feature ,( not the alias command), creating a core with name 'version-3.0' and alias 'dev' (*1-create('version-3.0,dev') *); thus the difficulty to get your previous point.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625809",
            "date": "2008-08-26T17:59:27+0000",
            "content": "We decref the counter appropriately (registerNotSynchronized does not do it)\nAh right. I forgot that the core is ref counted. I saw the call to close and assumed it will be closed immediately. Sorry about that. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12625976",
            "date": "2008-08-27T05:28:12+0000",
            "content": "Which ones? Is it something that impacts solr-561 somehow?\nSorry for not being clear. The widely used methods getName() in SolrCore and CoreDescriptor is what I am referring to .\n\n\nThe symlink method is least invasive . The reason being , getName() is far more useful than the alias feature itself (think of JMX cores are identified by name. and there are more places )  . Using this approach we get all the benefits of  alias and we lose nothing. \nMoreover the implementation is easy\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626112",
            "date": "2008-08-27T13:47:48+0000",
            "content": "Paul-\nWe are not removing any of these methods but we do need to clarify CoreDescriptor usage.\nCoreDescriptor.getName() is not used besides when loading a SolrCore which is exactly what it should solely be used for ; CoreDescriptor is only a SolrCore creation parameter, using it for any other purpose is not a good idea.\nWhen you need the SolrCore name (not all its aliases), you should use SolrCore.getName().\nThe SolrCore name is merely the first alias and the one used to identify  the SolrCore to JMX.\nThe hard-link model is implemented with this patch and avoids the functional complexity of added complexity of 'alias/unalias' should not rename, etc; although I don't doubt it's easy to implement the sym-link model, imho we are still missing a compelling reason to do so. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12626136",
            "date": "2008-08-27T14:28:46+0000",
            "content": "I looked at your patch and I'm mostly fine. \n\n\n\n\tAn alias should not be allowed if the name already exists . We do not have to do it\n\tA rename with null is a bad usecase . We should not allow it\n\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626188",
            "date": "2008-08-27T16:55:05+0000",
            "content": "The rename with null can only occur if the core name is going to be used out by another core alias.\nFixing point 1. moots point 2.\nI still don't get the compelling reason to switch to the symlink model but besides being different, there is no compelling advantage to the hardlink model that I can see either.\nSo, assuming symlink would be the choice, the only added constraints to the model are that alias/unalias can not operate or modify a core name.\nBesides Paul & I, any comment ? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12626195",
            "date": "2008-08-27T17:18:07+0000",
            "content": "aliases vs names... they were all \"names\" in my head.  No real difference as far as CoreContainer is concerned... it was just the \"alias\" command (could have been called addNewName, but alias was shorter)\nI didn't put a lot of thought into a core being mapped to multiple names by CoreContainer... it just seemed natural.  If people want to dump it, I won't object too loudly.  I've marked the \"alias\" command as experimental in the wiki.\n\nAn alias should not be allowed if the name already exists\n\nWhy not?  It's like an atomic rename, except you aren't removing the source.  Seems fine to me.\n\nA rename with null is a bad usecase . We should not allow it\n\nAgree, since it seems like it would be a user bug.\n\nAn ALIAS must not rename a core. It should just add another mapping in the core container. The only command that should change a core's name should be SWAP\n\nWhy not?  I could see arguments either way on this one.\n\nUNALIAS command can be added . It can just remove an ALIAS if it exists . But it must not be able to remove the primary name (use UNLOAD to do that).\n\nSounds complex... why the difference? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12626206",
            "date": "2008-08-27T17:43:54+0000",
            "content": "Why not? It's like an atomic rename, except you aren't removing the source. Seems fine to me.\n\nIn reality, why would anyone want to alias to an existing name. It could have been a mistake as well. It is like a rename file to an existing file which is not allowed by an OS. We actually delete an existing one and rename to that.\n\nWhy not? I could see arguments either way on this one.\n\nThe alias is just adding a name to the core . Why should it change the old name?\n\n\nOK. why my arguments on these. \n\n1) Till now we have been assuming that the core always has a name. Just imagine I register a JMX object w/ a name and suddenly it is not more available with that name. It is not a very nice behavior. Actually adding alias to an existing object does not even have to reflect in JMX  because there is only one object. It is just a virtual URL to access a core  (actually this is the only need). \n\n2) For instance if I publish the url of a core to the outside and it does not become valid anymore even though the core is alive. (for replication (SOLR-561) we actually fix the url of the master and assume it will always be there). This change may break that assumption\n\nSo, I am afraid that we are suddenly changing a very well known behavior . And the symlink approach is my middle path to keep old things as it is and make the feature available . The symlink approach may not be the very 'ideal' solution , but it somehow struck to me as the most practical solution. That is it "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626209",
            "date": "2008-08-27T17:49:45+0000",
            "content": "A rename with null is a bad usecase . We should not allow it\n\nrename is a package private method that is called when we unalias a core from its name, asking it to pick a new one from its aliases.\nHowever, is there is no alias to that core, the core has no way to name itself anymore but it may still be serving requests; thus the 'null' to indicate that case.\nI'd expect this to be rare but the case exists nevertheless. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12626216",
            "date": "2008-08-27T18:08:04+0000",
            "content": "In reality, why would anyone want to alias to an existing name. \n\nIt's like a rename, but doesn't remove the source.\n\nWe actually delete an existing one and rename to that.\n\nThat's not atomic... requests that come inbetween can fail.\nRename should be able to overwrite an existing entry (that's independent from the alias issue).\n\nJust imagine I register a JMX object w/ a name and suddenly it is not more available with that name.\n\nIsn't that the desired behavior with rename or swap? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626219",
            "date": "2008-08-27T18:13:31+0000",
            "content": "\nPaul,\nThe core always has a name; if you use that name to point to another core, well, that name will point to something else. Whether its JMX or solr-561.\nI dont see how aliases are different than the name itself; you already can have these problems with swap so these are not new ones. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626254",
            "date": "2008-08-27T18:59:08+0000",
            "content": "updated to include part of solr-731 changes (aka CoreDescriptor.getCoreContainer is not public; ctor does not use a CoreContainer) "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626522",
            "date": "2008-08-28T11:28:51+0000",
            "content": "added remaining operations and their mappings in CoreAdminRequest;\nadded specific tests to check refCount / number of aliases are kept in sync;\nminor modifications so calling close is usually performed outside of the synchronized block on cores (to reduce contention).\nchange:\nunloadCore is now a core operation, it unloads the core (removes all its aliases thus really closes/unloads the core);\nunaliasCore is an alias operation and only removes the alias. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12626530",
            "date": "2008-08-28T11:48:45+0000",
            "content": "It's like a rename, but doesn't remove the source.\n\nIs RENAME really used ? is it useful?\n\nThat's not atomic... requests that come in between can fail.\nPoint taken . \n\nyou already can have these problems with swap\n\nSWAP is a special case . It always ensure that the original name is not gone. The url will remain valid . SWAP is very useful if you wish to test the core before replacing it with an existing core.\n\nBecause Solr is mostly used as a web-app , I feel the url is an important identifier for  an asset (till it is removed). It is OK to make it available by another name (I can always have a fixed url with the name , other names can come and go ). But, the asset remaining alive and the url is invalid makes me think of it as a not so desirable feature. \n\nI dont see how aliases are different than the name itself;\n\nMy proposal wanted to treat them as different. Name is fixed , and aliases are like symlinks. And the core does not even have to be aware of it.\n\nI am just -0 on the hardlink approach. I just made my points against it "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12626841",
            "date": "2008-08-29T04:34:28+0000",
            "content": "We are building a feature as explained in SOLR-727. The idea is to make the replication admin page of master show the details of slaves as well (details like which version of the index is used by each slave etc. etc) instead of going to each slave to know that . So each slave registers itself with the master by providing the url of itself the url will be of this format \nhttp://<host>:<port>/<web-app>/<corename>/replication.\n\nto make this feature work we expect the url to be fixed. If the url  is a moving target it may just not work.(or it will be difficult)\n\nAnother important feature is SOLR-561 itself . The configuration takes the masterUrl . The url has to be fixed for the lifetime of the solr core.If we make the url invalid this again will not work\n\nGoing forward , we will have to see a Solr as a whole network of systems of multiple masters slaves and multiple shards . unlike the current strategy of seeing each instance as an island. We are making the first step in that direction . Assuming that we will be using urls to communicate with each other it is important to have a reliable/fixed url for each core.\n\nhenri .I am yet to see an argument of why the symlink approach will not meet your usecases other than the point that it is not very 'elegant' . I have made my points on why the alias (in the current form and the way you propose) is going to make my usecases difficult . "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12626993",
            "date": "2008-08-29T14:39:29+0000",
            "content": "Paul\nWould it be fair to say that you fear the alias/hardlink feature would allow users to make configuration/manipulation mistakes more easily wrt replication?\n\nAs is, it does not remove any feature nor forces anyone into using them; thus, it's not breaking anything nor does it make your use-cases more difficult. It might be used in a wrong way and I'm not arguing that since it creates possibility and more choices, it can lead to more mistakes. And in that sense, some users could end up not being able to use the feature you contribute. I do believe though that it's better to describe & educate on best practices than constrain usage.\n\nI also understand that for solr-727/solr-561, you need some URLs to be stable (which is what the \"cool uris dont change\" motto advocates and this is a good rule). Allowing more ways to alias a core is an easier path (no pun intended) to this than constraining users into having just one. I can even dedicate a URL to replication that is not something my end-users would ever need to know (since I dont think my deployment constraints or choices should reflect into what they use).\n\nAliasing (the hardlink model) is not adverse to replication usage conventions & needs, it instead does allow to respect them more easily with more flexibility.\nJust a different Solr user & contributor opinion. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12627382",
            "date": "2008-09-01T04:29:23+0000",
            "content": "As is, it does not remove any feature nor forces anyone into using them; thus, it's not breaking anything nor does it make your use-cases more difficult\n\nI understand your argument.But,  when I put in a feature I may have to try to make it work w/ all possible scenarios (ALIAS/RENAME being one of them). Once this is in , it becomes the responsibility of every component writer to do so.\n\nAllowing more ways to alias a core is an easier path (no pun intended) to this than constraining users into having just one.\n\nIt is better to provide a limited set of features which are consistent than providing all the possible features . That makes life easier for all developers (less, simpler code , less documentation/caveats). \n\nIt is fine to do so if that is a very important feature and there are usecases to support that.\n\nI can even dedicate a URL to replication that is not something my end-users\n\nreplication is not special. It is a normal request handler so having a dedicated URL is special treatment to one handler. We must not add special privileges unless  we have to.  "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12650557",
            "date": "2008-11-25T13:11:40+0000",
            "content": "updated for trunk 720487 "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12674119",
            "date": "2009-02-17T07:29:27+0000",
            "content": "Marked for 1.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872466",
            "date": "2010-05-27T22:05:54+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043672",
            "date": "2011-06-03T16:46:27+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106478",
            "date": "2011-09-16T14:51:15+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234632",
            "date": "2012-03-21T18:08:39+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13295371",
            "date": "2012-06-14T23:12:12+0000",
            "content": "Removing fix version since this issue hasn't gotten much attention lately and doesn't appear to be a priority for anyone at the moment. \n\nAs always: if someone wants to take on this work they are welcome to do so at any time and the target release can be revisited "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835723",
            "date": "2013-11-30T13:26:47+0000",
            "content": "2013 Old JIRA cleanup "
        }
    ]
}