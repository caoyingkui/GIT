{
    "id": "LUCENE-3371",
    "title": "Support for a \"SpanAndQuery\" / \"SpanAllNearQuery\"",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I would like to parse queries like this:\n\n\na WITHIN 5 WORDS OF (b AND c)\n\n\n\nThis would match cases where both a b span and a c span are within 5 of the same a span.\n\nThe existing span query classes do not appear to be capable of doing this no matter how they are combined, although replacing the AND with \"WITHIN 10 OF\" (general rule is to double the first number) at least ensures that no hits are lost (it just returns too many.)\n\nI'm not sure how the class would work, but it might be like this:\n\n\n  Query q = new SpanAllNearQuery(a, new SpanQuery[] { b, c }, 5, false);\n\n\n\nThe difference from SpanNearQuery is that SpanNearQuery considers the entire collection of terms as a single set to be found near each other, whereas this query would consider each of the terms in the array relative to the first.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-10T10:51:12+0000",
            "content": "This could be tested by comparing the results against:\n\n\n(a WITHIN 5 WORDS OF b) AND (a WITHIN 5 WORDS OF c)\n\n\nThe above query is a boolean one, and does not provide a Spans.\nWould this SpanAllNearQuery provide a Spans?\nWhen it provides a Spans it can be nested inside other span queries.\n ",
            "author": "Paul Elschot",
            "id": "comment-13082280"
        },
        {
            "date": "2011-08-10T11:15:02+0000",
            "content": "Yeah, it would provide a span much like a normal WITHIN would.\n\nThe subtle difference from the above example is that a plain boolean does not enforce that the same \"a\" span is used in both cases.  For instance, that plain AND query above would match \"b a x x x x x a c\", but \"all within\" would not. ",
            "author": "Trejkaz",
            "id": "comment-13082284"
        },
        {
            "date": "2011-08-10T11:30:08+0000",
            "content": "So the main difference with the current unordered SpanNear(a, b, c) would be that when \"b\" and \"c\" are further apart, the single \"a\" should be in the middle.\n\nIs that enough difference to write program code for? ",
            "author": "Paul Elschot",
            "id": "comment-13082286"
        },
        {
            "date": "2011-08-10T22:08:10+0000",
            "content": "That sounds about right.\n\nI had another thought connected to LUCENE-3370 - if SpanNotNearQuery or an equivalent existed, you could write it like this:\n\n\nnew SpanNotQuery(\n  new SpanTermQuery(new Term(\"text\", \"a\")),\n  new SpanOrQuery(\n    new SpanNotNearQuery(new Term(\"text\", \"a\"), new Term(\"text\", \"b\"), 4, false),\n    new SpanNotNearQuery(new Term(\"text\", \"a\"), new Term(\"text\", \"c\"), 4, false)\n  )\n)\n\n\n\nWhich is to say that once you remove all the instances which aren't near one of the other spans, you end up with the ones which are near all of them. ",
            "author": "Trejkaz",
            "id": "comment-13082710"
        },
        {
            "date": "2016-09-07T05:15:37+0000",
            "content": "To summarise some investigation I did towards using SpanNotQuery with the new pre and post parameters, it turns out that this doesn't work, but I can't immediately see why.\n\nMy rewrite:\n\n\n    @Override\n    public SpanQuery rewrite(IndexReader reader) throws IOException\n    {\n        int nearQueriesCount = nearQueries.size();\n        SpanQuery[] notNearClauses = new SpanQuery[nearQueriesCount];\n        int pre = inOrder ? slop : 0;\n        int post = slop;\n        for (int i = 0; i < nearQueriesCount; i++)\n        {\n            notNearClauses[i] = new SpanNotQuery(mainQuery, nearQueries.get(i), pre, post);\n        }\n        return new SpanNotQuery(mainQuery, new SpanOrQuery(notNearClauses));\n    }\n\n\n\n\ni.e., for each query, create a \"not near\" clause, and then subtract the \"not near\" clauses from the main query clause to get the \"near all\" result.\n\nThis logic is apparently wrong, because this query:\n\n\n  mainQuery = SpanTerm(\"content\", \"a\")\n  nearQueries = [\n    SpanTerm(\"content\", \"b\"),\n    SpanTerm(\"content\", \"c\")\n  ]\n  slop = 2,\n  inOrder = false\n\n\n\nIs expected to match this text:\n\n\na x b c x x x a\n\n\n\nBut instead, it does not match. ",
            "author": "Trejkaz",
            "id": "comment-15469582"
        }
    ]
}