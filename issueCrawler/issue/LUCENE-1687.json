{
    "id": "LUCENE-1687",
    "title": "Remove ExtendedFieldCache by rolling functionality into FieldCache",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It is silly that we have ExtendedFieldCache.  It is a workaround to our supposed back compatibility problem.  This patch will merge the ExtendedFieldCache interface into FieldCache, thereby breaking back compatibility, but creating a much simpler API for FieldCache.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-12T14:03:03+0000",
            "content": "As previously noted, FieldCache.DEFAULT is final because FieldCache is an interface, so no one could have had a different implementation they were using with Lucene, hence it would not have broken back compat in a meaningful way  to add some new methods. ",
            "author": "Yonik Seeley",
            "id": "comment-12718840"
        },
        {
            "date": "2009-06-12T14:14:05+0000",
            "content": "True, but you know how we are about adding methods to an interface! ",
            "author": "Grant Ingersoll",
            "id": "comment-12718845"
        },
        {
            "date": "2009-06-12T14:49:57+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-12718859"
        },
        {
            "date": "2009-06-20T13:36:05+0000",
            "content": "True, but you know how we are about adding methods to an interface! \nYonik said it: Because nobody can change a static variable in an interface (its always final), there is no posibility to change the cache impl, so nobody would ever implement FieldCache. A short notice should be enough.\n\nShould I fix this together with LUCENE-1701? If yes, I would assign myself to this issue and add this to my own patch (which also fixes some issues by making the default parsers public).\n\nI would then only deprecate  ExtendedFieldCache (as sub-interface of FieldCache, without new methods) and merge the two package-private impls behind. ",
            "author": "Uwe Schindler",
            "id": "comment-12722190"
        },
        {
            "date": "2009-06-20T13:42:31+0000",
            "content": "Go for it.  No need to deprecate EFC, just delete it. ",
            "author": "Grant Ingersoll",
            "id": "comment-12722193"
        },
        {
            "date": "2009-06-20T13:59:59+0000",
            "content": "Removing ExtendedFieldCache complete would break backwards compatibility, e.g. when users implemented an own LongParser and so on. And code referring to ExtendedFieldCache.EXT_DEFAULT would also break.\n\nI changed ExtendedFieldCache to only export this really needed and named parts:\n\n\n/**\n * This interface is obsolete, use {@link FieldCache} instead.\n * @deprecated Will be removed in Lucene 3.0\n **/\npublic interface ExtendedFieldCache extends FieldCache {\n  \n  /** @deprecated Use {@link FieldCache#DEFAULT}; this will be removed in Lucene 3.0 */\n  public static ExtendedFieldCache EXT_DEFAULT = (ExtendedFieldCache)FieldCache.DEFAULT;\n  \n  /** @deprecated Use {@link FieldCache.LongParser}, this will be removed in Lucene 3.0 */\n  public interface LongParser extends FieldCache.LongParser {\n  }\n\n  /** @deprecated Use {@link FieldCache.DoubleParser}, will be removed in Lucene 3.0 */\n  public interface DoubleParser extends FieldCache.DoubleParser {\n  }\n\n}\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12722196"
        },
        {
            "date": "2009-06-20T14:06:06+0000",
            "content": "The whole point of this issue is that it breaks back compatibility.  EFC is a pointless class.  Read the description.\n\nBesides the fact that adding methods to FieldCache itself breaks back compatibility since it is an interface, even if no one can implement it. ",
            "author": "Grant Ingersoll",
            "id": "comment-12722197"
        },
        {
            "date": "2009-06-20T14:16:13+0000",
            "content": "It breaks backwards compatibility in the case that somebody implements FieldCache/ExtendedFieldCache. As Yonik pointed out, this is unlikely the case, as there is no possibility to plug this implementation into Lucene, because you cannot change the FieldCache.DEFAULT interface variable (static final). Because of this nobody would ever want to implement this interface, and if he does, it would be nonsense and can break without problems.\n\nSo, removing/changing this interfaces would not be a BW break, as long as we only think of implementing FieldCache/ExtendedFieldCache\n\nBut we would really break backwards compatibility for all who refer to this interface! And because of this, the dummy stub keeps there, that classes still referencing parsers and ExtendedFieldCache.EXT_DEFAULT can still work.\n\nWe should here think about not that this theoretically breaks bw, we should discuss where this break would affect users. ",
            "author": "Uwe Schindler",
            "id": "comment-12722198"
        },
        {
            "date": "2009-06-20T14:21:49+0000",
            "content": "Uwe,\n\nThe ENTIRE point of this issue is to get rid of EFC.  It is purposely breaking backwards compatibility.  It is a stupid class put in for stupid reasons.  If anyone is referring to this class, they can change to use the FieldCache.\n\nIf you're not going to remove it, I will.   ",
            "author": "Grant Ingersoll",
            "id": "comment-12722199"
        },
        {
            "date": "2009-06-20T14:28:01+0000",
            "content": "Uwe is right - EFC has been around since 2.3, we should not delete it, but deprecate it.\nEFC's extra \"stuff\" should be moved to FieldCache. ",
            "author": "Yonik Seeley",
            "id": "comment-12722201"
        },
        {
            "date": "2009-06-20T14:34:42+0000",
            "content": "Why?  \n\nSo much for case-by-case back compatibility. ",
            "author": "Grant Ingersoll",
            "id": "comment-12722202"
        },
        {
            "date": "2009-06-20T14:37:01+0000",
            "content": "And Yonik, if you're argument is b/c Solr uses it, I will change it.  It's like 5 lines of code. ",
            "author": "Grant Ingersoll",
            "id": "comment-12722203"
        },
        {
            "date": "2009-06-20T14:44:20+0000",
            "content": "And Yonik, if you're argument is b/c Solr uses it, I will change it. It's like 5 lines of code. \n\nNot at all the issue - as you say, it's simple to change in Solr and doesn't represent a back compat issue to Solr users.\n\nSo much for case-by-case back compatibility.\n\nThis is entirely case-by-case:\ncase #1: adding methods to FieldCache could technically be viewed as breaking back compat, but in this specific case it's OK since no one implements FieldCache.\ncase #2: removing ExtendedFieldCache breaks all applications that refer to ExtendedFieldCache.  it should be deprecated first. ",
            "author": "Yonik Seeley",
            "id": "comment-12722204"
        },
        {
            "date": "2009-06-20T14:58:00+0000",
            "content": "I implemented it now, when removing EFC completely, a lot of tests from backwards 2.4 fail, especially TestSort and TestDateSort and FunctionQuery tests, because they:\n\n\treference ExtendedFieldCache for parsers\n\treference EXT_DEFAULT\n\n\n\nThere are a lot of projects that use this references, e.g. Compass and many more.\n\nI left over a stub like noted above - and suddenly, all tests pass, only TestExtendedFieldCache, which is obsolete (will be removed from Tag). Nobody is hurted by this stub (it is just an empty declaration), all code is in FieldCache and FieldCacheImpl, as you suggested.\n\nIn 3.0 we remove the stub and voila! ",
            "author": "Uwe Schindler",
            "id": "comment-12722205"
        },
        {
            "date": "2009-06-20T15:04:38+0000",
            "content": "OK ",
            "author": "Grant Ingersoll",
            "id": "comment-12722206"
        },
        {
            "date": "2009-06-20T16:47:20+0000",
            "content": "Patch available in LUCENE-1701!\n\nI close this issue after 1701 is committed. ",
            "author": "Uwe Schindler",
            "id": "comment-12722217"
        },
        {
            "date": "2009-06-23T15:44:43+0000",
            "content": "Committed together with LUCENE-1701 in revision 787723. ",
            "author": "Uwe Schindler",
            "id": "comment-12723138"
        }
    ]
}