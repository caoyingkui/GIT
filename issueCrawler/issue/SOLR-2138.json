{
    "id": "SOLR-2138",
    "title": "Solr 1.4 takes long time to load cores (memory leak?)",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "1. 32 GB total memory, with 16GB allocated to Solr server.\n2. 130 cores, with most cores having 50,000 documents, and 2,3 cores having 1~2.4Million documents (largest core takes about 11GB disk space)\n3. in solr 1.3, there was no problem, it took 5,6 minutes to load up all cores.\n4. just upgrade to solr 1.4, it takes about 45+ minutes to load all 130 cores.\n5. no solrconfig or schema change\n6. autowarmCount=\"0\" for all caches\n\nI have monitored the memory with JConsole. The 'queryConverter' warning in catalina.out file helped me figured out that when about 70 cores were loaded, the memory usage went from 300MB to 16GB, and stay at that level. Rest of the cores are loaded up extremely slow.\n\nI find Yonik's fix note for SOLR-1797: fix ConcurrentModificationException and potential memory\n  leaks in ResourceLoader. (yonik)\n\nWe are in process of upgrading to 1.4.1",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12917581",
            "date": "2010-10-04T12:53:04+0000",
            "content": "Identical JVM? "
        },
        {
            "author": "Renee Sun",
            "id": "comment-12918050",
            "date": "2010-10-05T16:17:42+0000",
            "content": "yes, same JVM, jre1.6.0_21.\n\nBy the way, in solr_user blog, I added more information after more test... I have commented out the newSearcher and firstSearcher in solrconfig.xml, after that it loaded up all 130 cores in 1 minutes. It only took totally 1GB memory, whereas with Solr 1.3, with newSearcher and firstSearcher, it took about 1 minute and 6.5GB on same core. "
        },
        {
            "author": "Renee Sun",
            "id": "comment-12918565",
            "date": "2010-10-06T16:09:01+0000",
            "content": "With Yonik's suggestions, we looked at our solrconfig.xml and there are newSearcher and firstSearcher hook ups:\n\n<listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\"> \n<arr name=\"queries\"> \n<lst> \n<str name=\"q\">type:message</str> \n<str name=\"start\">0</str> \n<str name=\"rows\">10</str> \n<str name=\"sort\">message_date desc</str> \n</lst> \n</arr> \n</listener> \n\nnewSearcher has exactly same query.\n\nAfter we commented these out, the cores were loaded up in 1 minute.\n\nHere is Yonik's post regarding this:\n\n\"The sort field message_date is what will be taking up the memory. \n\nStarting with Lucene 2.9 (which is used in Solr 1.4), searching and \nsorting is per-segment. \nThis is generally beneficial, but in this case I believe it is causing \nthe extra memory usage because the same date value that would have \nbeen shared across all documents in the fieldcache is now repeated in \neach segment it is used in. \n\nOne potential fix (that requires you to reindex) is to use the \"date\" \nfieldType as defined in the new 1.4 schema: \n    <fieldType name=\"date\" class=\"solr.TrieDateField\" omitNorms=\"true\" \nprecisionStep=\"0\" positionIncrementGap=\"0\"/> \n\nThis will use 8 bytes per document in your index, rather than 4 bytes \nper doc + an array of unique string-date values per index. \n\nTrunk (4.0-dev) is also much more efficient at storing string-based \nfields in the FieldCache - but that will only help you if you're \ncomfortable with using development versions. \"\n\nWe can not use the \"solr.TrieDateField\" since re-index is not an option for us. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14043122",
            "date": "2014-06-25T07:14:46+0000",
            "content": "Dead end (1.4) JIRA. Can probably be closed as no longer relevant. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14043407",
            "date": "2014-06-25T12:57:11+0000",
            "content": "A costly sort on a firstSearcher/newSearcher caused the original issue. "
        }
    ]
}