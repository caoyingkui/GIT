{
    "id": "LUCENE-689",
    "title": "NullPointerException thrown by equals method in SpanOrQuery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Part of our code utilizes the equals method in SpanOrQuery and, in certain cases (details to follow, if necessary), a NullPointerException gets thrown as a result of the String \"field\" being null.  After applying the following patch, the problem disappeared:\n\nIndex: src/java/org/apache/lucene/search/spans/SpanOrQuery.java\n===================================================================\n\u2014 src/java/org/apache/lucene/search/spans/SpanOrQuery.java    (revision 465065)\n+++ src/java/org/apache/lucene/search/spans/SpanOrQuery.java    (working copy)\n@@ -121,7 +121,8 @@\n     final SpanOrQuery that = (SpanOrQuery) o;\n\n     if (!clauses.equals(that.clauses)) return false;\n\n\tif (!field.equals(that.field)) return false;\n+    if (field != null && !field.equals(that.field)) return false;\n+    if (field == null && that.field != null) return false;\n\n\n\n     return getBoost() == that.getBoost();\n   }",
    "attachments": {
        "LUCENE-689.txt": "https://issues.apache.org/jira/secure/attachment/12351551/LUCENE-689.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-10-20T07:08:49+0000",
            "content": "Hm, weird.  l peeked at SpanOrQuery.java and it looks like the private field instance var should be set in the ctor, using the field from the first clause, no?  How come your field is null in the first place? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12443726"
        },
        {
            "date": "2006-10-20T10:19:14+0000",
            "content": "Otis, you have an excellent point.  At the time I encountered this error, I was in a hurry to get something shipped out.  I will solve for why that happened, however perhaps coding this more defensively would be ok, too.  So, if the patch suggested above isn't the proper way to deal with it, what about the suggestion that the \"field\" instance variable be required to be non-null when it is set, so the constructor throws a NullPointerException if it is null?  That seems like the correct behavior to me.  This patch could be used to provide that behavior:\n\nIndex: src/java/org/apache/lucene/search/spans/SpanOrQuery.java\n===================================================================\n\u2014 src/java/org/apache/lucene/search/spans/SpanOrQuery.java    (revision 466047)\n+++ src/java/org/apache/lucene/search/spans/SpanOrQuery.java    (working copy)\n@@ -43,6 +43,9 @@\n       SpanQuery clause = clauses[i];\n       if (i == 0) {                               // check field\n         field = clause.getField();\n+        if (field == null) \n{\n+          throw new NullPointerException(\"Field name can not be null.\");\n+        }\n       } else if (!clause.getField().equals(field)) \n{\n         throw new IllegalArgumentException(\"Clauses must have same field.\");\n       }\n\nOn the other hand, if the field name is in fact an interned string, then the portion of the equals method dealing with it could simply compare references, via \"==\".  That sounds simpler all around.  But ensuring the field is non-null may be a good idea, anyhow. ",
            "author": "Michael Goddard",
            "id": "comment-12443776"
        },
        {
            "date": "2006-10-20T16:23:37+0000",
            "content": "I'd personally really want to see how come that field is null to begin with.  If possible, could you try to debug this a bit and see what kind of SpanQueries with null fields you are dealing with.\n\nEven if we check for field == null and throw an exception, you won't get very far, so in the end you'll need to figure out where this null is coming from and why.  This is not to say that throwing an exception in case of null is not a good thing.\n\nThanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12443885"
        },
        {
            "date": "2006-10-31T22:17:35+0000",
            "content": "Otis, I've been working with Mike on this and can explain how field can become null.  When rewrite() is called on a SpanRegexQuery that doesn't have any enumerations in the index (as returned by getEnum() in RegexQuery, called from rewrite() in MultiTermQuery) the SpanOrQuery constructor is called with an array of length 0.  Thus the for loop in the SpanOrQuery ctor is never entered and field is never initialized.  Hope this helps explain the behavior. ",
            "author": "Ryan Ahearn",
            "id": "comment-12446089"
        },
        {
            "date": "2007-02-20T01:36:22+0000",
            "content": "Looks like SpanOrQuery should support an empty SpanQuery. The existing tests even call it, they just never call equals.\n\nAdded a check to avoid the NPE and a test that equals on empties works. ",
            "author": "Steven Parkes",
            "id": "comment-12474330"
        },
        {
            "date": "2008-11-16T23:53:27+0000",
            "content": "This patch is very simple, still applies,  and the issue does need to be fixed. ",
            "author": "Mark Miller",
            "id": "comment-12648049"
        },
        {
            "date": "2008-11-17T18:41:39+0000",
            "content": "Thanks, Otis. Was just gonna remove myself as assignee. ",
            "author": "Steven Parkes",
            "id": "comment-12648240"
        },
        {
            "date": "2009-03-04T14:19:41+0000",
            "content": "thanks all ",
            "author": "Mark Miller",
            "id": "comment-12678739"
        }
    ]
}