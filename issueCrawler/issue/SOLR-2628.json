{
    "id": "SOLR-2628",
    "title": "use of FST for SynonymsFilterFactory and synonyms.txt",
    "details": {
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "Currently the SynonymsFilterFactory builds up a memory based SynonymsMap. \nThis can generate huge maps because of the permutations for synonyms.\n\nNow where FST (finite state transducer) is introduced to lucene this could also be used for synonyms.\nA tool can compile the synoynms.txt file to a binary automaton file which can then be used\nwith SynoynmsFilterFactory.\n\nAdvantage:\n\n\tfaster start of solr, no need to generate SynonymsMap\n\tfaster lookup\n\tmemory saving",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Dawid Weiss",
            "id": "comment-13058241",
            "date": "2011-07-01T07:44:35+0000",
            "content": "I've talked about it a little bit with Bernd and indeed, it seems possible to reduce the size of in-memory data structures by an order of magnitude (or even two orders of magnitude, we shall see). I'm on vacation for the next week and on a business trip for another one after that, but I'll be on it once I come back home. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13058468",
            "date": "2011-07-01T10:30:41+0000",
            "content": "Dawid, have a look at LUCENE-3233 \u2013 we have a [very very rough] start at this. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13058469",
            "date": "2011-07-01T10:37:58+0000",
            "content": "Duplicate of LUCENE-3233 "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13058470",
            "date": "2011-07-01T10:39:24+0000",
            "content": "Yep, this is a duplicate. Thanks Mike. Like I said \u2013 I won't be able to work on this for the next two weeks (I also have that FST refactoring opened up in the background... it's progressing slowly), but it's definitely a low-hanging fruit to pick because it shouldn't be very difficult and the gains huge. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13058475",
            "date": "2011-07-01T10:51:50+0000",
            "content": "I think the reduction of RAM should be huge but lookup speed might be slower (ie the usual tradeoff of FST), since we are going char by char in the FST.  If we go word-by-word (ie FST's labels are word ords and we separately resolve word -> ord via \"normal\" hash lookup) then that might be a good middle ground... but this is all speculation for now! "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13058489",
            "date": "2011-07-01T11:22:54+0000",
            "content": "Yes, this may be the case. It'd need to be investigated because storing words in a hashtable will also bump memory requirements, whereas an FST can at least reuse some prefixes and suffixes. "
        }
    ]
}