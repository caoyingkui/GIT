{
    "id": "LUCENE-4539",
    "title": "DocValues impls should read all headers up-front instead of per-directsource",
    "details": {
        "components": [
            "core/index"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently, when DocValues opens, it just opens files. it doesnt read codec headers etc.\n\nInstead we read these every single time a directsource opens. \n\nI think it should work like PostingsReaders: e.g. the PackedInts impl would read its versioning info and codec headers and creating a new Direct impl should be a IndexInput.clone() + getDirectReaderNoHeader().\n\nToday its much more costly.",
    "attachments": {
        "LUCENE-4539.patch": "https://issues.apache.org/jira/secure/attachment/12552171/LUCENE-4539.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-05T22:20:48+0000",
            "content": "I fixed all the ones here except SortedSource to just read this stuff in up-front. ",
            "author": "Robert Muir",
            "id": "comment-13490983"
        },
        {
            "date": "2012-11-05T22:38:38+0000",
            "content": "except SortedSource\n\nPerhaps we should do what the TODO comment in your patch suggests (the two seeks to read metadata) and upgrade the version number to write all metadata at the beginning of the stream?\n\nSemi-related discussion: the getDirectReaderNoHeader method should probably take an additional long (the start pointer) as an argument so that there is no need to seek to get an instance if the cursor is not at the right place. ",
            "author": "Adrien Grand",
            "id": "comment-13490995"
        },
        {
            "date": "2012-11-05T23:06:48+0000",
            "content": "I think you are probably right... I just got the straightforward ones done.\n\nI wanted to suggest a possibility that maybe we add PackedInts.Header to encapsulate what it stores?\n\nToday we have:\n\n\nReader getReader(DataInput in)\nReader getReaderNoHeader(DataInput in, Format format, int version, int valueCount, int bitsPerValue)\n\n\n\nAnd if you want to read in the header yourself, you are doing:\n\n\nfinal int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\nfinal int bitsPerValue = in.readVInt();\nassert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\nfinal int valueCount = in.readVInt();\nfinal Format format = Format.byId(in.readVInt());\n\n\n\nSo my idea would just be something like:\n\nReader getReader(DataInput in, Header header) {\n  return getReader(in, header.format, header.version, header.valueCount, header.bitsPerValue);\n}\n\n\n\nand maybe\n\nHeader readHeader(DataInput in)\n\n\n\nto encapsulate this stuff. we could still keep the \"raw\" versions around if we wanted too.\n\nI didnt want to overengineer anything, not sure if this would be useful outside of this particular issue. ",
            "author": "Robert Muir",
            "id": "comment-13491020"
        },
        {
            "date": "2012-11-06T00:33:46+0000",
            "content": "Interesting, I had started to work on the exact same API for LUCENE-4536 (because I needed to read the header generated by getWriter to know how long a packed array would be depending on the version) but I finally decided to fix it another way.\n\nnot sure if this would be useful outside of this particular issue\n\nMaybe not but I agree that it would help make the code cleaner, so +1!\n\nRelated discussion: I think the header format is fine when packed ints are in their own file, but when packed ints are nested in another file, they should probably not declare a codec header: the PackedInts codec name check is redundant with the main codec name check. (I was actually thinking of deprecating get\n{Reader,DirectReader,ReaderIterator}\n to force callers to think about the way they should store the valueCount and bitsPerValue, and to discourage from using a standard header when packed ints are not in their own file to prevent from performing redundant checks.) ",
            "author": "Adrien Grand",
            "id": "comment-13491089"
        },
        {
            "date": "2012-11-06T00:47:04+0000",
            "content": "When are packed ints in their own file today? ",
            "author": "Robert Muir",
            "id": "comment-13491097"
        },
        {
            "date": "2012-11-06T13:05:06+0000",
            "content": "Only in tests. This is why I think that writing a full header (including the \"PackedInts\" codec name) is useless most of time if not always. ",
            "author": "Adrien Grand",
            "id": "comment-13491432"
        },
        {
            "date": "2012-11-06T13:51:52+0000",
            "content": "I agree with you its bogus how it writes its header.\n\nBut I see a downside (I hope we can come up with an idea to deal with it rather than keeping the header!)\n\nOne advantage of PackedInts writing its versioning (like FSTs) is that lots of things nest them in their own file.\n\nThe problem with these two things is that they are themselves changing and versioned: they arent like readVint()\nwhich is pretty much fixed in what it does.\n\nSo having them write their own versions etc today to some extent makes back compat management of file formats easier:\ntoday its just DocValues and Term dictionaries using these things, tomorrow (4.1) its also the postings lists: documents,\nfrequencies, and positions, and maybe in the future even stored fields (LUCENE-4527). \n\nWho is keeping up with all the places that must be managed when a packed ints version change needs to happen? Today \nthe header encapsulates in one place: if i backwards break FSTs and it breaks a few suggester impls, i know anyone\nusing those suggesters will get IndexFormatTooOldException without me doing anything. So thats very convenient.\n ",
            "author": "Robert Muir",
            "id": "comment-13491454"
        },
        {
            "date": "2012-11-06T15:22:36+0000",
            "content": "Who is keeping up with all the places that must be managed when a packed ints version change needs to happen?\n\nSorry I was not clear: I didn't mean to remove the version number, just the codec name. I think the Lucene41 postings format is a good example: it never writes \"PackedInts\" in the stream, writes the PackedInts version at the beginning of the stream and may then serialize thousands arrays of 128 values with the number of bits per value as a byte in front of each of them. ",
            "author": "Adrien Grand",
            "id": "comment-13491520"
        }
    ]
}