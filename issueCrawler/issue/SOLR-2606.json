{
    "id": "SOLR-2606",
    "title": "Solr sort no longer works on field names with some punctuation in them",
    "details": {
        "affect_versions": "3.1,                                            3.2,                                            3.3",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We just upgraded from Solr 1.4 to 3.2. For the most part the upgrade went fine, however we discovered that sorting on field names with dashes in them is no longer working properly. For example, the following query used to work:\n\nhttp://[our solr server]/select/?q=computer&sort=static-need-binary+asc\n\nand now it gives this error:\n\n    HTTP Status 400 - undefined field static\n\n    type Status report\n\n    message undefined field static\n\n    description The request sent by the client was syntactically incorrect (undefined field static).\n\nIt appears the parser for sorting has been changed so that it now tokenizes differently, and assumes field names cannot have dashes in them. However, field names clearly can have dashes in them. The exact same query which worked fine for us in 1.4 is now breaking in 3.2. Changing the sort field to use a field name that doesn't have a dash in it works just fine.",
    "attachments": {
        "SOLR-2606.test.only.patch": "https://issues.apache.org/jira/secure/attachment/12488286/SOLR-2606.test.only.patch",
        "SOLR-2606.patch": "https://issues.apache.org/jira/secure/attachment/12488289/SOLR-2606.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13052958",
            "date": "2011-06-22T00:09:01+0000",
            "content": "thanks for reporting this.\n\nAnother user on the mailing list reported a similar bug with 3.1 when trying to sort on a field named \"scores:rails_f\" (giving an error of \"undefined field scores\")\n\nI'm fairly certain this is caused by the enhancements made in SOLR-1297 to add sorting on functions.  \n\nWork was done in that issue to try and ensure that \"eccentric\" field names could still be used in sorts even when the parsing code was changed, but evidently some basic cases involving punctuation still slipped through the cracks. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13053121",
            "date": "2011-06-22T08:29:50+0000",
            "content": "Perhaps a test-class producting randomized (legal) field names of could be of use for this and other tests? "
        },
        {
            "author": "Tor Henning Ueland",
            "id": "comment-13068909",
            "date": "2011-07-21T11:12:17+0000",
            "content": "Confirming this issue for 3.2 (3.2-SNAPSHOT 1133561)\nData can be loaded from fields (fl), the issue only appears when trying to sort on such fields. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13069860",
            "date": "2011-07-23T00:31:58+0000",
            "content": "Perhaps a test-class producting randomized (legal) field names of could be of use for this and other tests?\n\nDefine \"legal\" \nLucene has no limits on fieldnames.  I've long advocated sticking to java identifiers (minus the $) as best practice for a whole bunch of reasons.  Maybe it was a mistake not enforcing it to begin with. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13073128",
            "date": "2011-07-30T04:51:06+0000",
            "content": "Lucene has no limits on fieldnames. I've long advocated sticking to java identifiers (minus the $) as best practice for a whole bunch of reasons. Maybe it was a mistake not enforcing it to begin with.\n\nThat ship has kind of sailed.  At this point it's really a matter of trying to do the best we can with what the users got.\n\nFor those unfamiliar...\n\nHistorically speaking, Solr has never enforced limits on field names except on a feature by feature basis \u2013 so you can have any character you want in field names in your schema.xml, but some characters don't play nice with some features: whitespace or commas in field names have never worked with the \"fl\" param, many punctuation characters would cause you problems with the Lucene query parser, etc...\n\nfor sorting, the only limitation until SOLR-1297 has ever been that you can't sort on a field containing whitespace, and that naming a field \"score\" was going to cause you problems.\n\nWith SOLR-1297 the decision was sorting by function was valuable enough that \"things that look like functions\" should be parsed as functions, even though it's theoretically possible that you might have a field named \"log(price)\" (or a \"*\" dynamicField) in your schema.\n\nbut at the same time, i added logic to try and ensure that if the function parsing approach didn't produce a valid sort, it would fallback to the legacy parsing approach before assuming an error (see \"SOLR-1297.better.field.support.patch\")\n\nApparently there are some combinations that we missed.\n\nAttached patch demonstrates the problem specifically with \":\" and \"-\" in field names.\n\ngiven that rails uses \":\" in field names when using solr, and \"-\" is a pretty common character for people to expect to work in field names, we should definitely try to get to the bottom of this. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13073130",
            "date": "2011-07-30T05:13:16+0000",
            "content": "My money's on this:\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n\nin QueryParsing.parseSort.\n\ngetId() uses isJavaIdentifer() to detect the end of a \"simple\" field name, which I'm sure can't match '-' or ':'. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13073138",
            "date": "2011-07-30T05:33:28+0000",
            "content": "My money's on this:\n\nMike: close, but that's kind of a red herring.\n\nIf you look at SOLR-1297 and the patch I mentioned you'll note that since using java identifier rules for field names is considered the common case, that test is done first as a short circuit (like the comment says) and function parsing is done after it \u2013 but if that fails then the logic i mentioned was suppose to kick in (by catching the exception and then doing the quick \"is what's left a field name?\" check)\n\nafter reviewing it a bit, i realized that I was kind of stupid when i added the \"is what's left a field name?\" backcompat work in SOLR-1297, and overlooked some error cases:\n\n1) Other types of Exceptions can be thrown by the function parsing besides ParseException (notably: SolrException and NumberFormatException in this test)\n2) the \"field\" variable wasn't being reset to null if it was determined that getId(null) had parsed a valid id but that id hadn't used up enough of the sort spec (ie: wasn't followed by whitespace).\n\nAttached patch fixes these oversights and fixes the tests in the previous patch.\n\nit would be nice to have some more tests to be sure i'm still not missing something stupid. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13073243",
            "date": "2011-07-30T21:19:41+0000",
            "content": "updated patch to include some randomized testing of potential esoteric sort field names.\n\nalso tweaked parse logic to use isWhitespace(peekChar()) (instead of just comparing with ' ') to inspect the leftovers after the short circuit getId(null) call since that's more consistent with eastws() (but didn't see an easy way to generate randomized whitespace in the test to really sanity check it) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13073399",
            "date": "2011-07-31T22:09:52+0000",
            "content": "Committed revision 1152653. - trunk\n\nI already know 3x isn't going to be a straight forward merge, at a minimum because of changes in SortField "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13073402",
            "date": "2011-07-31T22:46:42+0000",
            "content": "Committed revision 1152657. - 3x\n\nIf you are using Solr 3.3, you can test out this fix by applying the following patch...\n\nhttp://svn.apache.org/viewvc/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/QueryParsing.java?r1=1152657&r2=1152656&pathrev=1152657&view=patch "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106221",
            "date": "2011-09-16T14:48:53+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}