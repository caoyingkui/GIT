{
    "id": "LUCENE-3300",
    "title": "Type safety in Field.setValue() methods",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "setValue methods in Field and subclasses should introduce type safety, beacuse what is now possible is to instantiate a BinaryField and set a non-binary value, but introduce it in such way to be able to preserve the ability to yield setValue(string) on parent Field class, e.g.: \n\nField b = new BinaryField(); \nb.setValue( ..byte[] value.. );\n\n\nOne idea is to use generics:\n\nField<String> s = new StringField();",
    "attachments": {},
    "issue_links": {},
    "comments": []
}