{
    "id": "SOLR-375",
    "title": "SpellCheckerRequestHandler improvements to handle multiWords and identify if a word is spelled correctly",
    "details": {
        "affect_versions": "1.2",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "The current implementation of SpellCheckerRequestHandler has some limitations:\n\n1. It does not identify if a word is spelled correctly (a match to its index) \n  a. If a word is spelled correctly, the correct spelling is not included in the suggested list, so the suggestions cannot be used to deduce if the word is correct\n  b. If the word does not exist in the index and there are no suggestions, the suggestion list is empty\n2. No support for multiple words\n\nI have made some changes to this class that addresses these limitations:\n1. the key value pair exists=true/false has been added to provide a clear understanding if the word is in the index or not\n2. the key value pair words=words_to_be_checked to identify the original word(s) that was checked and for what the suggestion list is for.  This becomes more important for the support of multiple words.\n3. If a parameter key word on the query string exists with the value of multiWords=true, then support for multiple words is enabled.\n  a. Multiple words are defined by the value of q and are separated by either a space or +\n  b. Each word is has its own entry in a NamedList object so as to group all result attributes back to that word: words=, exist=, and suggestions=\n\nMy intended goals is that these changes should not effect existing implementations of the spell checker within Solr.\n\nThe format of the multiWords support should be easily supported and used within Prototype if the output type is JSon.\n\nI have made the changes.  I still need to do some basic testing to ensure all is working as it is intended, then I will commit to SVN (within 24 hours?).  When I commit, I will also add more JavaDocs to the class, and also try to attach more comments to this JIRA.",
    "attachments": {
        "JIRA_SOLR-375.diff": "https://issues.apache.org/jira/secure/attachment/12367548/JIRA_SOLR-375.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Scott Tabar",
            "id": "comment-12533956",
            "date": "2007-10-11T06:00:16+0000",
            "content": "This patch includes the modifications to the SpellCheckerRequestHandler along with JUnit tests (new) and related configuration files for the support of the JUnit tests.\n\nAll JUnit tests complete successfully and the changes made to the SpellCheckerRequestHandler behaves as expected. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12537776",
            "date": "2007-10-25T23:14:19+0000",
            "content": "I think that the general approach to multiword terms makes sense.  However, I prefer the term frequency display in SOLR-395 to a simple exists/doesn't exist boolean. "
        },
        {
            "author": "Scott Tabar",
            "id": "comment-12537950",
            "date": "2007-10-26T13:02:52+0000",
            "content": "Mike, that is an excellent idea.  I am not sure what the Lucine interface exposes to the handler, but I will see if I cannot take a look in to this and produce the required changes and add the test cases. I hope to have this resolved shortly.  Mike thanks for bringing Mike's idea to my attention. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12539483",
            "date": "2007-11-01T22:41:12+0000",
            "content": "Scott, I worked with Mike to produce a patch that integrates all the new features (frequency, multiwords, thresholding, etc.) into a single patch in SOLR-395. "
        }
    ]
}