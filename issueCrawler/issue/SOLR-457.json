{
    "id": "SOLR-457",
    "title": "A multi threaded implementation for solrJ",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - java"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Provide a multi threaded implementation of CommonsHttpSolrServer\nFor usage with distributed searching in solr-303",
    "attachments": {
        "multithreaded-solrj.patch": "https://issues.apache.org/jira/secure/attachment/12373210/multithreaded-solrj.patch",
        "solrj.patch": "https://issues.apache.org/jira/secure/attachment/12373984/solrj.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "patrick o'leary",
            "id": "comment-12559266",
            "date": "2008-01-15T22:49:21+0000",
            "content": "Provides a multi-threaded implementation of CommonsHttpSolrServer\nfor use with distributed searching.\nExample Usage :\n\n          \n          MultiThreadedHttpSolrServer mtserver = new MultiThreadedHttpSolrServer(\"http://\"+shards[0]);\n          boolean first = true;\n\n          ModifiableSolrParams params = sreq.params;\n          params.remove(\"wt\"); // use default response format (or let SolrJ select)\n          params.remove(\"version\");\n          params.remove(\"shards\");      // not a top-level request\n          params.remove(\"indent\");\n          params.remove(\"echoParams\");\n          params.set(\"isShard\", true);  // a sub (shard) request\n\n          for (String shard : shards) {\n            String url = \"http://\" + shard;\n\n            if (! first){\n            \tmtserver.addSolrServer(\"http://\"+shard);\n            } else {\n            \tfirst = false;\n            }\n\n          }\n          \n          // process all the shards\n          // and retrive the responses\n          \n          QueryResponse[] responses = mtserver.process(params);\n          int sz = responses.length;\n          \n          // Responses are maintained in an array matching \n          // the order they were added to the MultiThreadedSolrServer\n          \n          for (int i = 0; i < sz; i++){\n              ShardResponse srsp = new ShardResponse();\n              srsp.req = sreq;\n              srsp.shard = shards[i];\n              \n              srsp.rsp = responses[i];\n              sreq.responses.add(srsp);\n          }\n \n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12559282",
            "date": "2008-01-15T23:31:19+0000",
            "content": "Is this something that is only used in the distributed search context?  If so, it might make sense to put it in a package (or private class) that is limited to SOLR-303 related functions.\n\nI get a little scared that people would think they need to use \"MultiThreadedHttpSolrServer\" for multi threaded access \u2013 the CommonsHttpSolrServer is mult threaded. "
        },
        {
            "author": "patrick o'leary",
            "id": "comment-12559308",
            "date": "2008-01-16T00:46:05+0000",
            "content": "Not too concerned about which package it's in.\n\nThere is a need to clarify the multi threaded statement. CommonsHttpSolrServer is thread-safe using MultiThreadedHttpConnectionManager which provides pooling.\n\nHowever you still have to implement a thread or runnable class to use it in a threaded manor, otherwise the connections are serial. That's what this implementation does.\n\nCould be used in anything that requires a request to multiple solr instances, not just distributed search.\ne.g.\n\n\tadd / update / delete documents to multiple solr severs\n      e.g real time indexing and not using a master - slave implementation\n\tIf federate search ever gets kicked off, it has possible uses there.\n\tlarge scale monitoring, if you have 100 boxes, it will save you considerable time doing them in a threaded\n   fashion than serially.\n\n "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12559340",
            "date": "2008-01-16T03:14:46+0000",
            "content": "Currently with Solrj, if you want to take advantage of the connection pooling, I think you need to create a single instance of CommonsHttpSolrServer in your application (and if you aren't, you are better off using SimpleHttpConnectionManager).  So, it seems to make sense to make it easier to use in this fashion.  This could be made more general purpose though if process just took a single request and returned a single response and you called it once for each server.  This would abstract out the threading and connection pooling while not constraining the class to something designed primarily for SOLR-303.\n\nA couple of other comments:\n\nThe threads should probably be pooled rather than creating and destroying on each request.  While creating and destroying threads has gotten faster, pooling is usually beneficial.\n\nUnless I'm mistaken, it appears that your connectionManager is different from the _connectionManager in CommonsHttpSolrServer, so the methods that you didn't override will not work correctly, e.g., setConnectionTimeout().\n\nNeither the CommonsHttpSolrServer currently in Solrj nor this patch appear to allow setting of the read timeout: setSoTimeout(int timeout) or the connection manager timeout: setConnectionManagerTimeout(long timeout).  Other HttpClient options such as disabling Nagle's algorithm are probably not as important.  This should probably be opened as a separate JIRA issue (edit: see SOLR-462). "
        },
        {
            "author": "patrick o'leary",
            "id": "comment-12559349",
            "date": "2008-01-16T04:36:40+0000",
            "content": "In terms of reusing threads I used Executors.newCachedThreadPool which should maintain a static pool of threads. Or so it says in the documentation. I'll try profiling it when I get a chance.\n\nThe _connectionManger yep that's a good spot, need to overwrite \n\nprotected HttpClient getHttpConnection() {\n\treturn new HttpClient(getConnectionManager());\n}\n\n\n\nMakes sense to change the CommonsHttpSolrServer setConnectionTimeout, setDefaultMaxConnectionsPerHost, setMaxTotalConnections to call getConnectionManager() instead of using _connectionManager\nunless having a setConnectionManager makes more sense.\n\nAt the moment I've just added a setConnectionManager in the MultiThreadedHttpSolrServer, but that leaves me wondering do I need to abstract the connection manger in the client implementation or is that over kill.\nBecause there will always be something new to set in your connection manager. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12561868",
            "date": "2008-01-23T23:31:41+0000",
            "content": "OK, I'm just getting back to distributed search stuff...\n\nMy first inclination on how to handle this (the SolrJ part) was to\n\n\tadd a constructor to CommonsHttpSolrServer that takes an HttpClient\n\tadd a getHttpClient()\n\tperhaps remove methods that deal with setting connection timeouts, etc... don't duplicate the interface of HttpClient\n\tadd a constructor with common settings (timeout, retry, etc) for when the user doesn't supply the HttpClient\n\n\n\nThen, in distributed search land, we could either create SolrServers on the fly (having them all share a single HttpClient), or if SolrServers are expensive to create, we could cache them per shard.\n\nLooking at this particular patch, I'm not sure it's the right direction.  It maintains a list of solr servers and sends the same request to each.  There are a number of places in SOLR-303 where we need to send different requests to different shards (so we would be unable to re-use a single MultiThreadedHttpSolrServer.\n\nI think we also need to be clear in SolrJ (i.e. in the javadoc) what is thread-safe and what is not. "
        },
        {
            "author": "patrick o'leary",
            "id": "comment-12561924",
            "date": "2008-01-24T02:43:38+0000",
            "content": "An idea I've been thinking about is to change the addSolrServer to also include solr params\nfor each shard. \nDefinitely to get docs by id, it would be cleaner.\n\nThe real purpose of the patch is to execute the individual shard requests as concurrent threads. \nTo give you an idea, an implementation I've tested this on, the patch took a 200ms request down\nto 42ms.\n\nThis may seem overkill to most folks, but is critical for my needs.\n\nFrom load testing, I haven't noticed any significant over head in creating new MultiThreadedHttpSolrServers\nSolrServers creation seem light as well, it's only processing the request that appears to be the main\nwork horse.\n\nI'll make some changes now that SOLR-462 is added, as I don't need the overrides.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12561926",
            "date": "2008-01-24T02:55:16+0000",
            "content": "> This may seem overkill to most folks, but is critical for my needs.\n\nOh, no question that parallel requests is a requirement... distributed search would be a joke without it.\n\nI think for now though, we should put the bare minimum in SolrJ that we think is correct.  Some method of sharing a common connection pool (and perhaps the HttpClient too) is the critical part.  Spinning up threads, or using a thread pool, can be accomplished in the distributed search code for now.\n\nAllowing a user to specify the HttpClient to use for communication seems to be the most powerful option as it doesn't cover up any of the HttpClient API. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12562202",
            "date": "2008-01-24T20:29:44+0000",
            "content": "I'm taking a crack at cleaning up some SolrJ stuff... can someone tell me why the concept of a core is in SolrJ?\nA core is a solr instance... surely one can just create another SolrServer to talk to it? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12562215",
            "date": "2008-01-24T20:54:42+0000",
            "content": "It is there so that multicore reload/swap/etc are all accessible with the same interface for embedded and remote.  If we only had the remote case, it would not be necessary, but the embedded version can get stale references.\n\nAs I try to justify it now, I can think of some other ways to do that \u2013 now that the core is required to be selected in the path.  I'll open a new issue for that and tackle it before 1.3 release.\n\nryan "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12562268",
            "date": "2008-01-24T22:52:37+0000",
            "content": "Here are some proposed updates (see solrj.patch) to SolrJ:\n\n\tchange some interfaces to abstract classes (good to do it now since SolrServer was just changed.... people have to recompile anyway)\n\tallow specification of HttpClient when constructing the SolrServer... this allows the user to choose how to share things... a single HttpClient for all SolrServers, a new HttpClient for each SolrServer all sharing a single connection manager, etc.\n\tadded a method on ResponseParser that takes an InputStream.  Two reasons: often other parsers can do better / faster encoding than InputStreamReader, and there could be binary formats in the future.  XMLResponseParser was changed to use an InputStream if supplied.\n\tThe factory in XMLResponseParser was changed to be static... each parser shouldn't have their own factory.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12562314",
            "date": "2008-01-25T00:34:18+0000",
            "content": "these changes look good to me..  \n\nIf we change SolrRequest to an abstract super class, there is probably no good reason to also have RequestBase.\n\nWhile we are at it, should SolrResponse change to an abstract class?  I can't think of any reason it would need to be an interface.  (I think we should keep SolrResponseBase as is) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12562366",
            "date": "2008-01-25T05:29:11+0000",
            "content": "committed (with recommended changes).\nI'm resolving this bug, as I think the rest of the mult-threadedness that is needed for distributed search belongs there.\n\nThere is more MT support needed in SolrJ, but in the form of performance enhancements when indexing to a single SolrServer I think.  Something that will enable multiple indexing threads without requiring the user write a multi-threaded client.  It should be relatively easy with the Java5 concurrency stuff. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589283",
            "date": "2008-04-15T23:28:41+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tCurrently marked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\t\"Affects Versions\" included 1.3\n\n\n\nThe Fix Version for all 8 issues found was set to 1.3 (1.3 has not yet been released, if an issue is already fixed, and it affected 1.3 then the fix will be in 1.3)\n\nEmail notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string:  20080415hossman1 "
        }
    ]
}