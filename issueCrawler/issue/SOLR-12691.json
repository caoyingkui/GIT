{
    "id": "SOLR-12691",
    "title": "Index corruption when sending updates to multiple cores, if those cores can get unloaded by LotsOfCores",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.4",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When the LotsOfCores setting 'transientCacheSize' results in the unloading of cores that are getting updates, the indexes in one or more of those cores can get corrupted.\n\nHow to reproduce:\n\n\n\tSet the \"transientCacheSize\" to 1\n\tCreate two cores that are both set to transient.\n\tIngest high load to core1 only (no issue at this time)\n\tContinue ingest high load to core1 and start ingest load to core2 simultaneously (core2 immediately corrupted)\n\n\n\nError with stacktrace:\n\n2018-08-16 23:02:31.212 ERROR (qtp225472281-4098) [   x:aggregator-core-be43376de27b1675562841f64c498] o.a.s.u.SolrIndexWriter Error closing IndexWriter\njava.nio.file.NoSuchFileException: /opt/solr/volumes/data1/4cf838d4b9e4675-core-897/index/_2_Lucene50_0.pos\n        at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) ~[?:1.8.0_162]\n        at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) ~[?:1.8.0_162]\n        at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) ~[?:1.8.0_162]\n        at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55) ~[?:1.8.0_162]\n        at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144) ~[?:1.8.0_162]\n        at sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99) ~[?:1.8.0_162]\n        at java.nio.file.Files.readAttributes(Files.java:1737) ~[?:1.8.0_162]\n        at java.nio.file.Files.size(Files.java:2332) ~[?:1.8.0_162]\n        at org.apache.lucene.store.FSDirectory.fileLength(FSDirectory.java:243) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.store.NRTCachingDirectory.fileLength(NRTCachingDirectory.java:128) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.SegmentCommitInfo.sizeInBytes(SegmentCommitInfo.java:217) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.MergePolicy.size(MergePolicy.java:558) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.TieredMergePolicy.getSegmentSizes(TieredMergePolicy.java:279) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.TieredMergePolicy.findMerges(TieredMergePolicy.java:300) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.IndexWriter.updatePendingMerges(IndexWriter.java:2199) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.IndexWriter.maybeMerge(IndexWriter.java:2162) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.IndexWriter.flush(IndexWriter.java:3571) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.IndexWriter.shutdown(IndexWriter.java:1028) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:1071) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n        at org.apache.solr.update.SolrIndexWriter.close(SolrIndexWriter.java:286) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.update.DirectUpdateHandler2.closeWriter(DirectUpdateHandler2.java:917) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.update.DefaultSolrCoreState.closeIndexWriter(DefaultSolrCoreState.java:105) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.update.DefaultSolrCoreState.close(DefaultSolrCoreState.java:399) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.update.SolrCoreState.decrefSolrCoreState(SolrCoreState.java:83) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.core.SolrCore.close(SolrCore.java:1572) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at com.vmware.ops.data.solr.handler.AggregateIngestionHandler.handleRequestBody(AggregateIngestionHandler.java:163) [ops-data-solr-1.0.0-SNAPSHOT.jar:?]\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:199) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2539) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:709) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:515) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:377) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:323) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1634) [jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) [jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) [jetty-security-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) [jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.Server.handle(Server.java:531) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162]\n\n        Suppressed: java.nio.file.NoSuchFileException: /opt/solr/volumes/data1/4cf838d4b9e4675-core-897/index/_2_Lucene50_0.pos\n                at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) ~[?:1.8.0_162]\n                at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) ~[?:1.8.0_162]\n                at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) ~[?:1.8.0_162]\n                at sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:244) ~[?:1.8.0_162]\n                at sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103) ~[?:1.8.0_162]\n                at java.nio.file.Files.delete(Files.java:1126) ~[?:1.8.0_162]\n                at org.apache.lucene.store.FSDirectory.privateDeleteFile(FSDirectory.java:371) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.store.FSDirectory.deleteFile(FSDirectory.java:340) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.store.NRTCachingDirectory.deleteFile(NRTCachingDirectory.java:119) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.store.LockValidatingDirectoryWrapper.deleteFile(LockValidatingDirectoryWrapper.java:38) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexFileDeleter.deleteFile(IndexFileDeleter.java:696) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexFileDeleter.deleteFiles(IndexFileDeleter.java:690) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexFileDeleter.decRef(IndexFileDeleter.java:589) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexFileDeleter.checkpoint(IndexFileDeleter.java:531) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexWriter.rollbackInternalNoCommit(IndexWriter.java:2331) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexWriter.rollbackInternal(IndexWriter.java:2274) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexWriter.shutdown(IndexWriter.java:1035) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:1071) ~[lucene-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:51:45]\n                at org.apache.solr.update.SolrIndexWriter.close(SolrIndexWriter.java:286) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.update.DirectUpdateHandler2.closeWriter(DirectUpdateHandler2.java:917) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.update.DefaultSolrCoreState.closeIndexWriter(DefaultSolrCoreState.java:105) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.update.DefaultSolrCoreState.close(DefaultSolrCoreState.java:399) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.update.SolrCoreState.decrefSolrCoreState(SolrCoreState.java:83) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.core.SolrCore.close(SolrCore.java:1572) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at com.vmware.ops.data.solr.handler.AggregateIngestionHandler.handleRequestBody(AggregateIngestionHandler.java:163) [ops-data-solr-1.0.0-SNAPSHOT.jar:?]\n                at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:199) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.core.SolrCore.execute(SolrCore.java:2539) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:709) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:515) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:377) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:323) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n                at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1634) [jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) [jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) [jetty-security-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) [jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.Server.handle(Server.java:531) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503]\n                at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162]",
    "attachments": {
        "SOLR-12691-test.patch": "https://issues.apache.org/jira/secure/attachment/12937154/SOLR-12691-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-23T01:59:51+0000",
            "content": "Thoughts:\n\nThis is a scenario that was not considered when LotsOfCores functionality was built.  If system resources are too scarce to allow all cores getting updates to be loaded at the same time, this problem is likely.\n\nQueries very likely update a timestamp within the core that marks it as most-recently-used, but do updates do the same?  If not, fixing that might make the issue a lot less likely in the production setup of the user that reported this problem on the mailing list, where they have 75 cores (which will be increasing) and a transientCacheSize of 32.  They have indicated that the majority of their cores are unlikely to see simultaneous updates.  Making sure that the core's most-recently-used information is refreshed by update requests might be an easy win for real-world usage.\n\nFinding the cause of this problem might prove to be very difficult.  Depending on what's found, fixing it might be even harder.  It might never be possible to fix the two-core setup that reproduces this problem. ",
            "author": "Shawn Heisey",
            "id": "comment-16589582"
        },
        {
            "date": "2018-08-23T02:08:34+0000",
            "content": "Making an attempt to check the code, I actually can't see anything that tracks or uses a most-recently-used timestamp.  So I'm wondering how LotsOfCores actually decides which core(s) to close, and whether that might need some work. ",
            "author": "Shawn Heisey",
            "id": "comment-16589589"
        },
        {
            "date": "2018-08-23T02:09:47+0000",
            "content": "Queries very likely update a timestamp within the core that marks it as most-recently-used, but do updates do the same?\nYes. The key is that the transient cache is a :LinkedHashMap with the removeEldestEntry overridden. Any access to that structure moves the accessed core to the end of the list so it's now the last one to be aged out. ",
            "author": "Erick Erickson",
            "id": "comment-16589591"
        },
        {
            "date": "2018-08-24T16:59:02+0000",
            "content": "The person on the mailing list who found the problem asked this on the mailing list:\n\nI see it's marked as minor. Can we bump up the priority please ?\n\nHere is my response:\n\nI don't consider it a high priority item.  It's going to take a lot of effort to actually find the cause and fix it.  So far you're the only person that I've heard of that's tried it and had a failure.  There may of course be others who never said anything, but it is certainly not a common use-case.\n\nErick Erickson is the person who wrote the code here, and this was not a use-case that was ever considered.  So as far as I can tell, in the eyes of the person who created the transient core feature, you're using it incorrectly.  This is another reason for the priority choice.\n\nIf Erick Erickson disagrees with my view, he is free to change the priority and I will not complain. ",
            "author": "Shawn Heisey",
            "id": "comment-16591917"
        },
        {
            "date": "2018-08-24T21:33:44+0000",
            "content": "Shawn is largely correct here, this is the first time I've heard of this issue.\n\nIf you want to dig into the code and see if you can find a way to fix it, I'd be happy to review any patches you'd care to attach to this JIRA. ",
            "author": "Erick Erickson",
            "id": "comment-16592199"
        },
        {
            "date": "2018-08-26T03:23:37+0000",
            "content": "An additional thought:  Even if the problem can be found and fixed so the two-core reproduction scenario works perfectly, I can tell you that the performance will be awful as Solr continually unloads and loads cores.  The same thing might happen in the real-world scenario.  That would likely be preferable to index corruption, though.\n\nErick Erickson, should we have another issue to improve choosing which transient core to unload?  Do it on an LRU basis, instead of load order?  I was looking into request handler code.  A number of request handlers implement SolrCoreAware, but it's done on an individual handler basis, not on RequestHandlerBase.  If the base class were to implement SolrCoreAware and handle updating the timestamp, I think the handler code would be overall cleaner, and we might be in a better position to make LRU unloading happen. ",
            "author": "Shawn Heisey",
            "id": "comment-16592767"
        },
        {
            "date": "2018-08-26T04:16:19+0000",
            "content": "Shawn Heisey\n\nIt is\u00a0an LRU cache. The LinkedHashMap is created as:\n\nLinkedHashMap<String, SolrCore>(Math.min(cacheSize, 1000), 0.75f, true)\n\nFrom the Javadocs:\npublic\u00a0LinkedHashMap(int\u00a0initialCapacity, float\u00a0loadFactor, boolean\u00a0accessOrder)\n Constructs an empty\u00a0LinkedHashMap\u00a0instance with the specified initial capacity, load factor and ordering mode.\n Parameters:\n initialCapacity\u00a0- the initial capacity\n loadFactor\u00a0- the load factor\n accessOrder\u00a0- the ordering mode -\u00a0true\u00a0for access-order,\u00a0false\u00a0for insertion-order\nAlthough the tests don't show that\u00a0explicitly.\u00a0Here's a slight change to TestLazyCores showing that the transient cache is LRU that should be incorporated in any fixes here.\n \u00a0\n\n\u00a0 ",
            "author": "Erick Erickson",
            "id": "comment-16592776"
        },
        {
            "date": "2018-08-26T18:26:59+0000",
            "content": "I did an experiment.  Downloaded 7.4.0.  Created core1 through core25, all transient and not loading on startup.  Set transientCacheSize to 5.\n\nAccessed some cores in this order with the admin UI dropdown:\n\ncore1\ncore10\ncore11\ncore12\ncore13\ncore14\n\nWhen core14 was accessed, Solr unloaded core1, exactly as expected.\n\nWith the admin UI, I did some queries on core10, and submitted an update on core11.  Then I accessed core17 from the admin UI dropdown.\n\nIf the core unloading were LRU in the way that I think it should work, it would have been core12 that got unloaded when core17 was accessed.  It was core10 that was unloaded, because it was the oldest entry in the LinkedHashMap.  The fact that I had made queries on core10 did not make any difference, and I think it should have. ",
            "author": "Shawn Heisey",
            "id": "comment-16592994"
        }
    ]
}