{
    "id": "LUCENE-8267",
    "title": "Remove memory codecs from the codebase",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Fixed",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Task"
    },
    "description": "Memory codecs (MemoryPostings*, MemoryDocValues*) are part of random selection of codecs for tests and cause occasional OOMs when a test with huge data is selected. We don't use those memory codecs anywhere outside of tests, it has been suggested to just remove them to avoid maintenance costs and OOMs in tests. [1]\n\n[1] https://apache.markmail.org/thread/mj53os2ekyldsoy3",
    "attachments": {
        "LUCENE-8267.patch": "https://issues.apache.org/jira/secure/attachment/12922411/LUCENE-8267.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16447751",
            "author": "Adrien Grand",
            "content": "+1 ",
            "date": "2018-04-23T08:32:05+0000"
        },
        {
            "id": "comment-16447787",
            "author": "Simon Willnauer",
            "content": "+1 ",
            "date": "2018-04-23T08:57:44+0000"
        },
        {
            "id": "comment-16448060",
            "author": "Robert Muir",
            "content": "+1 ",
            "date": "2018-04-23T12:32:32+0000"
        },
        {
            "id": "comment-16448123",
            "author": "David Smiley",
            "content": "-1 sorry. I've used the MemoryPostingsFormat\u00a0for a text-tagging use-case where there are intense lookups against the terms dictionary.  It's highly beneficial to have the terms dictionary be entirely memory resident, albeit in a compact FST.  The issue description mentions \"We don't use those memory codecs anywhere outside of tests\" \u2013 this should be no surprise as it's not the default codec.  I'm sure it may be hard to gauge the level of use of something outside of core-Lucene.  When we ponder removing something that Lucene doesn't even need, I propose we raise the issue more openly to the community.  Perhaps the question could be proposed in CHANGES.txt and/or release announcements to solicit community input?\n\nPerhaps BaseRangeFieldQueryTestCase.verify should ascertain if the postings format is a known \"memory\" postings format (of which there are several, to include \"Direct\"), and if so then use JUnit's Assume to bail out?  If this is hard to do, we ought to add a convenience method to make it easier.\n\nSpeaking of memory postings formats, I'm in favor of the Direct postings format going away since it ought to be re-imagined as some sort of read-time FilterCodecReader that does not require an index format.  Credit to Alan for that idea years ago.  Though that's more of a re-orientation of something that exists rather than saying it should go away entirely. ",
            "date": "2018-04-23T13:14:16+0000"
        },
        {
            "id": "comment-16448143",
            "author": "Robert Muir",
            "content": "If we are going to make it harder to remove stuff, I have no problem being the one to make it equally harder to add stuff. ",
            "date": "2018-04-23T13:25:26+0000"
        },
        {
            "id": "comment-16448208",
            "author": "Simon Willnauer",
            "content": "If we are going to make it harder to remove stuff, I have no problem being the one to make it equally harder to add stuff.\n\nI agree this is one of these issues that we have to face. if we put the bar very high to remove stuff that is not mainstream then we will have a super hard time adding stuff. It creates fear driven decisions. It sucks I agree with Robert Muir 100% here.\n \u00a0\n\n-1 sorry. I've used the MemoryPostingsFormat\u00a0for a text-tagging use-case where there are intense lookups against the terms dictionary. It's highly beneficial to have the terms dictionary be entirely memory resident, albeit in a compact FST. The issue description mentions \"We don't use those memory codecs anywhere outside of tests\" \u2013 this should be no surprise as it's not the default codec. I'm sure it may be hard to gauge the level of use of something outside of core-Lucene. When we ponder removing something that Lucene doesn't even\u00a0need, I propose we raise the issue more openly to the community. Perhaps the question could be proposed in CHANGES.txt and/or release announcements to solicit community input?\n\u00a0\n given that you know that you are using your veto here we are already in a terrible position to have any conversation.\u00a0Can you quantify the \"it's nice\"? since there are alternatives that (standard codec) can you go and provide some numbers. We should not use vetos based on non-quantifiable arguments IMO. We can go and ask the community but I don't expect much useful outcome, most of the folks don't know what they are using here and there. Nevertheless, I am happy to send a mail to dev to get this information.\u00a0 ",
            "date": "2018-04-23T14:19:08+0000"
        },
        {
            "id": "comment-16448249",
            "author": "David Smiley",
            "content": "given that you know that you are using your veto here we are already in a terrible position to have any conversation\n\nDo you mean to say I should have said all I said without voting first?  Lets have a conversation!  (we are having a conversation)\n\nwe will have a super hard time adding stuff. It creates fear driven decisions.\n\nI don't understand this point of view; can you please elaborate?  Fear of what?\n\nCan you quantify the \"it's nice\"?\n\nYes, I shall do that.  My preferred route to do this is find an existing user of the \"Solr Text Tagger\" who can experiment with the postingsFormat setting to try a comparison with the default format.  Failing that, I'll create a benchmark using that project. ",
            "date": "2018-04-23T14:44:59+0000"
        },
        {
            "id": "comment-16448272",
            "author": "Robert Muir",
            "content": "There are a lot of other alternatives to putting data in heap memory directly in the postings format.\n\nThe best (IMO) is for the user to use MMapDirectory.preload with the standard index format. This way it doesn't impact their java heap and they use supported index format. Users can also use RAMDirectory/FileSwitchDirectory to load specified files into heap. \n\nFinally, users can use FSTPostingsFormat which will load term dictionary only into heap fst. This is way different than Memory/Direct which load not only terms but also postings lists and positions and stuff all into heap RAM.\n\nSo i don't really see any technical merit for your objection: there are many other ways to have a ram-resident terms dictionary, many of them better than the inefficient Memory/Direct formats. ",
            "date": "2018-04-23T14:57:51+0000"
        },
        {
            "id": "comment-16448287",
            "author": "Simon Willnauer",
            "content": "+1 to what Robert Muir said so many more efficient options\n\nDo you mean to say I should have said all I said without voting first? Lets have a conversation! (we\u00a0are\u00a0having a conversation)\n\nSo I perceive your veto as an aggressive step. To me it's a last resort after we can't find a solution that is good for all of us. The conversation already has a tone that is not appropriate and could have been prevented by formulating objections as questions. like I am using this postings format in X and it's serving well, what are the alternatives. - I am sure you would have got an awesome answer.\n\nI don't understand this point of view; can you please elaborate? Fear of what?\n\nif you can't remove stuff without others jumping in vetoing the reaction will be to prevent additions in the same way due to fear\u00a0 created by the veto. This is a terrible place to be in, we have seen this in the past we should prevent it.\n\n\u00a0 ",
            "date": "2018-04-23T15:15:10+0000"
        },
        {
            "id": "comment-16448748",
            "author": "David Smiley",
            "content": "Ah; I incorrectly assumed the proposal included the FST postings formats but apparently not. It's too bad FSTPulsingFormat is long gone though since in the text-tagging use-case it'd effectively be a substitute for MemoryPostingsFormat. The FSTTermsReader accepts a PostingsReaderBase; maybe it's possible to write an in-memory version of PostingsReaderBase, at least for the \"pulsed\" (single posting) case. Nonetheless lets see how the text tagger performs with these codec options.\n\nThanks for the suggestion to use MMapDirectory.preload, I didn't know about it, but that appears to only help warmup, not sustained performance; right? And I believe even with FileSwitchDirectory, on shutdown files with certain extensions would vanish; right?\nSo I perceive your veto as an aggressive step. To me it's a last resort after we can't find a solution that is good for all of us. The conversation already has a tone that is not appropriate and could have been prevented by formulating objections as questions. like I am using this postings format in X and it's serving well, what are the alternatives. - I am sure you would have got an awesome answer.\nThe \"sorry\" word immediately after my veto was intended to prevent misperceptions about tone; I don't mean to be aggressive \u2013 sorry! \u00a0I agree I could have asked for alternatives up-front; I'll try and remember that next time. I was thinking my early vote could prevent work that someone does in vein to remove these pieces. In retrospect I didn't need to vote yet to accomplish that (e.g. convey disagreement with others). \u00a0In this way I was trying to offer improved communication where from other's I've seen no veto but a confusing cloud of doubt as to wether there would be a veto or not (which in my mind is worse). \u00a0I respect you may feel differently though; just please understand my intended tone is not aggressive.\nif you can't remove stuff without others jumping in vetoing the reaction will be to prevent additions in the same way due to fear\u00a0 created by the veto. This is a terrible place to be in, we have seen this in the past we should prevent it.\nDo you mean\u00a0if we add some\u00a0new thingamajig, we might feel that we have\u00a0to support it indefinitely? \u00a0(I wouldn't use the word \"fear\" for this; maybe I've got your intent wrong still) \u00a0Hmmm; I think it's very situationally dependent. \u00a0For example with queryNorm & coords,\u00a0LUCENE-7347, I had concerns but ultimately understood that maintaining these things were making things awkward for us. \u00a0But the PostingsFormats seem different to me. \u00a0They conform to our APIs; they don't get in the way or tie our hands. \u00a0Yes there is maintenance though. \u00a0I think what I objected to most in the description of this issue was the notion that, because Lucene-core doesn't use something and because there is maintenance to that something, then we should delete that something. \u00a0I get the maintenance aspect\u00a0but we need community input on such decisions to ascertain real-world use. ",
            "date": "2018-04-23T19:29:23+0000"
        },
        {
            "id": "comment-16448771",
            "author": "Dawid Weiss",
            "content": "I get the maintenance aspect but we need community input on such decisions to ascertain real-world use.\n\nI think filing a JIRA issue is kind of soliciting feedback, don't you think? I agree with Simon and Robert that there are classes that, while useful, are not at the forefront of what a broad \"Lucene API\" is... We should have the liberty to adjust or remove such things. I scanned the code of both Lucene and Solr and there were no references (other than in tests) to those classes, so it's not just \"Lucene land\".\n\nAlso, given the size and diversity of the Lucene/Solr user community I'm fairly confident there will always be somebody who finds something very useful, no matter what you'd like to change or remove. Hell, I use a lot of internal Lucene infrastructure in my own projects and sometimes I miss things that go away myself... (and frequently I just grab the latest source of something and copy it over to maintain in my own source tree, that's part of the beauty of open source). ",
            "date": "2018-04-23T19:52:38+0000"
        },
        {
            "id": "comment-16448788",
            "author": "Robert Muir",
            "content": "\nThanks for the suggestion to use MMapDirectory.preload, I didn't know about it, but that appears to only help warmup, not sustained performance; right?\n\nloading stuff into heap memory gives no higher guarantee than doing it this way under pressure, it still depends on vm parameters.\n\n\nI get the maintenance aspect but we need community input on such decisions to ascertain real-world use.\n\nThat is not how it works: this is open source. These memory/direct formats cause excessive maintenance hassle with the tests. I saw Alan and Dawid fighting with them and it seemed clear to me its not worth the trouble. We should remove them: the cost is too high.\n\nSomeone can always pull in the source code themselves for their esoteric use-case: but unless we have maintainers coming up then they need to go: this doesn't come down to a vote by users.\n\nIf you want to make it hard for us to clean up tech debt like this, by -1s and so on, thats your choice. But it is also my choice to make it hard to add things. \n\nTrust me, I will make it equally hard to add code as it is to remove code. It is the only way to make things sustainable. ",
            "date": "2018-04-23T20:04:20+0000"
        },
        {
            "id": "comment-16461588",
            "author": "David Smiley",
            "content": "With the help of others using the SolrTextTagger, we've concluded that the speed difference is negligible. I'm glad we've then reached consensus that the MemoryPostingsFormat will not be missed!\u00a0\n\n+1 to remove MemoryPostingsFormat & DirectPostingsFormat\nI think filing a JIRA issue is kind of soliciting feedback, don't you think?\nNo! At least not beyond our insular world. ",
            "date": "2018-05-02T20:28:04+0000"
        },
        {
            "id": "comment-16463572",
            "author": "Dawid Weiss",
            "content": "I was on short holidays, I'll take care of it soon. ",
            "date": "2018-05-04T08:44:30+0000"
        },
        {
            "id": "comment-16465910",
            "author": "Dawid Weiss",
            "content": "Removed references to memory postings and memory docvalues. An aggregate of changes is here, precommit passes, running tests now.\n\nhttps://github.com/apache/lucene-solr/pull/372 ",
            "date": "2018-05-07T13:28:13+0000"
        },
        {
            "id": "comment-16467064",
            "author": "Dawid Weiss",
            "content": "I ran nightly tests three times, but I can't get past Solr tests failing \u2013 different tests each time, don't seem to be related to the change (cloud, distributed).\n\nI'm committing it in, regardless of those failures. ",
            "date": "2018-05-08T08:29:40+0000"
        },
        {
            "id": "comment-16467065",
            "author": "Dawid Weiss",
            "content": "Patch for completeness. ",
            "date": "2018-05-08T08:31:59+0000"
        },
        {
            "id": "comment-16467071",
            "author": "ASF subversion and git services",
            "content": "Commit 85c00e77efdf53f30da6eaffd38c2b016a7805bc in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85c00e7 ]\n\nLUCENE-8267: removed references to memory codecs. ",
            "date": "2018-05-08T08:34:46+0000"
        },
        {
            "id": "comment-16596879",
            "author": "David Smiley",
            "content": "Dawid Weiss I noticed the solr/CHANGES.txt entry you added recommended users switch to \"Direct\" instead. \u00a0I'm surprised we would recommend that.... (especially given the demise of \"Memory\"). \u00a0Wouldn't FST50 be better? \u00a0I'd like to reword the CHANGES.txt to the following:\n\n* LUCENE-8267: Memory codecs have been removed from the codebase (MemoryPostings,\n  MemoryDocValues). If you used postingsFormat=\"Memory\" switch to \"FST50\" as the next best alternative,\n  or use the default.  If you used docValuesFormat=\"Memory\" then remove it to get the default. (Dawid Weiss)\n ",
            "date": "2018-08-29T21:36:08+0000"
        },
        {
            "id": "comment-16597114",
            "author": "Dawid Weiss",
            "content": "I don't have an opinion on this, really. Hardcoding FST50 seems like binding to a concrete version? You're probably right that Direct is not the best choice though. Perhaps suggest leaving it at the default value like docValues? ",
            "date": "2018-08-30T06:52:59+0000"
        },
        {
            "id": "comment-16597132",
            "author": "Adrien Grand",
            "content": "+1 to recommend defaults ",
            "date": "2018-08-30T07:10:34+0000"
        },
        {
            "id": "comment-16597151",
            "author": "Simon Willnauer",
            "content": "+1 to use defaults as well. ",
            "date": "2018-08-30T07:33:18+0000"
        },
        {
            "id": "comment-16597386",
            "author": "David Smiley",
            "content": "Can someone propose new wording here, or is my proposal fine.  Note my proposal mentions the default twice, both for postingsFormat and docValuesFormat.  We agree that the default codec is an excellent codec.  Remember that someone who chooses another one has done so explicitly and is thus aware of the default codec already and yet chose something else as a better fit for them.  I want the wording to mention FST50 as an option try try; this postingsFormat seems to fly under the radar of people's awareness.  Ultimately the user is going to have to do their own experiments to make the choice for them. ",
            "date": "2018-08-30T12:32:31+0000"
        },
        {
            "id": "comment-16597436",
            "author": "Simon Willnauer",
            "content": "I personally don't think we should put FST50 into this message. The message links to this issue which has all the discussion.  ",
            "date": "2018-08-30T13:18:03+0000"
        },
        {
            "id": "comment-16598335",
            "author": "Dawid Weiss",
            "content": "It'd be ideal if Solr had a migration.txt file, not just changes.txt. It'd be a better fit there. If you insist on having the FST50 mentioned, I'd suggest something like:\n\n* LUCENE-8267: Memory codecs have been removed from the codebase (MemoryPostings,\n  MemoryDocValues). If you used postingsFormat=\"Memory\" or docValuesFormat=\"Memory\", consider\n  using the defaults. For in-memory postings, you can try the \"FST50\" format as an alternative \n  to \"Memory\". (Dawid Weiss)\n\n ",
            "date": "2018-08-31T06:58:30+0000"
        },
        {
            "id": "comment-16598935",
            "author": "David Smiley",
            "content": "\"... consider removing to use the default or experiment with one of the others.\"\n\nOkay Simon?  They will visit this issue and/or dig to see what others exist to make the decision for themselves. ",
            "date": "2018-08-31T15:54:41+0000"
        },
        {
            "id": "comment-16599797",
            "author": "ASF subversion and git services",
            "content": "Commit d93c46ea94dec612aa53e37d119fe34b5e8a828e in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d93c46e ]\n\nLUCENE-8267: adjust CHANGES.txt advise ",
            "date": "2018-09-01T21:24:52+0000"
        }
    ]
}