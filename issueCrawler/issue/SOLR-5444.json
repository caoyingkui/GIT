{
    "id": "SOLR-5444",
    "title": "Slow response on facet search, lots of facets, asking for few facets in response",
    "details": {
        "affect_versions": "4.4",
        "status": "Reopened",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Setup\n\nWe have a 6-Solr-node (release 4.4.0) setup with 12 billion \"small\" documents loaded across 3 collections. The documents have the following fields\n\n\ta_dlng_doc_sto (docvalue long)\n\tb_dlng_doc_sto (docvalue long)\n\tc_dstr_doc_sto (docvalue string)\n\ttimestamp_lng_ind_sto  (indexed long)\n\td_lng_ind_sto (indexed long)\nFrom schema.xml\n\n    <dynamicField name=\"*_dstr_doc_sto\" type=\"dstring\" indexed=\"false\" stored=\"true\" required=\"true\" docValues=\"true\"/>\n    <dynamicField name=\"*_lng_ind_sto\" type=\"long\" indexed=\"true\" stored=\"true\"/>\n    <dynamicField name=\"*_dlng_doc_sto\" type=\"dlng\" indexed=\"false\" stored=\"true\" required=\"true\" docValues=\"true\"/>\n...\n    <fieldType name=\"dstring\" class=\"solr.StrField\" sortMissingLast=\"true\" docValuesFormat=\"Disk\"/>\n    <fieldType name=\"dlng\" class=\"solr.TrieLongField\" precisionStep=\"0\" positionIncrementGap=\"0\" docValuesFormat=\"Disk\"/>\n\n\ntimestamp_lng_ind_sto decides which collection documents go into\n\n\n\nWe execute queries on the following format:\n\n\tq=timestamp_lng_ind_sto:[x TO y] AND d_lng_ind_sto:(a OR b OR ... OR n)\n\tfacet=true&facet.field=a_dlng_doc_sto&facet.zeros=false&facet.mincount=1&facet.limit=<asked-for-facets>&rows=0&start=0\n\n\n\nProblem \n\nWe see very slow response-time when hitting large number of rows, spanning lots of facets, but only ask for \"a few\" of those facets\n\nConcrete example of query to get some concrete numbers to look at\n\nWith x and y plus a, b ... n set to values so that\n\n\tThe timestamp_lng_ind_sto:[x TO y] part of the search-criteria alone hit about 1.7 billion documents (actually all in one (containing 4.5 billion docs) of the three collections - but that is not important)\n\tThe d_lng_ind_sto:(a OR b OR ... OR n) part of the search-criteria alone hit about 500000 documents\n\tThe combined search-criteria (timestamp_lng_ind_sto AND'ed with d_lng_ind_sto) hit about 200000 documents\n\n\n\nThe following graph shows responsetime as a function of <asked-for-facets> (in query)\n\nNote that responsetime is high for \"low\" <asked-for-facets>, and that it increases fast (but linearly) in <asked-for-facets> up until <asked-for-facets> is somewhere inbetween 5000 (where responsetime is close to 1000 secs) and 10000 (where responsetime is about 5 secs). For values of <asked-for-facets> above 10000 responsetime stays \"low\" at between 1-10 secs\n\nLooking at the code and profiling it is clear that the change to better responsetime occurs when SimpleFacets.getFacetFieldCounts changes from using getListedTermCounts to using getTermCounts.\n\nThe following image shows profiling information during a request with <asked-for-facets> at about 2000.\n\nNote that\n\n\tSimpleFacets.getListedTermCounts is used (green box)\n\t91% of the time spent performing the query is spent in DocSetCollector-constructor (red box). During this concrete query 125000 DocSetCollection-objects are created spending 710 secs all in all. Additional investigations show that the time is spent allocating huge int-arrays for the \"scratch\"-int-array. Several thousands of those DocSetCollection-constructors create int-arrays at size above 1 million - that takes time, and also leaves a nice little job of the GC'er afterwards.\n\tThe actual search-part of the query takes only 0.5% (4 secs) of the combined time executing the query (blue box)\n\n\n\nThe following image shows profiling information during a request with <asked-for-facets> at about 10000\n\nNote that\n\n\tSimpleFacets.getTermCounts is used (green box)\n\tThe actual search-part of the query now takes 70% (11 secs) of the combined time executing the query (blue box)\n\n\n\nWhat to do about this?\n\n\n\tI am not sure why there are two paths that SimpleFacets.getFacetFieldCounts can take (getListedTermCounts or getTermCounts) - but I am pretty sure there is a good reason. It seems like getListedTermCounts is used when <asked-for-facets> is noticeable lower than the total number of facets hit (believe it is when <asked-for-facets> * 1.5 + 10 is below actual number of facets hit)\n\tOne solution could be to just drop the getListedTermCounts-path and always go getTermCounts, but that is probably not at good idea, because getListedTermCounts is probably there for a performance reason (in other scenarios)\n\tThe comment above DocSetCollection.scratch says\n\n  // in case there aren't that many hits, we may not want a very sparse\n  // bit array.  Optimistically collect the first few docs in an array\n  // in case there are only a few.\n  final int[] scratch;\n\n\nThe comment seems reasonable. But when we look at what values are used as \"smallSetSize\" for the DocSetCollection-constructor, it is always \"maxDoc >> 6\" (basically dividing by 64) - this value depends on maxDoc and will be high if maxDoc is high. In my case maxDoc is 50+ million a lot of the times resulting in \"smallSetSize\"s of 1+ million (that is not \"a few\"). I am very much in doubt why you want \"smallSetSize\" to increase as maxDoc increase - why not just always a low (fixed or something) value for \"smallSetSize\"? Is it ever a good idea with huge int-arrays for the \"scratch\"-array?\n\tAnother solution would be to never create \"scratch\"-arrays with size above e.g. 50\n\tThere are probably several other potential solutions\n\n\n\nI would really want your opinion on what solution to make, so that I do not unintentionally break good performance-optimizations, just because I missed some points explaining why the code is as it is today!?\n\nNote I have filed this as a 4.4 issues, because that is the platform I use for my tests etc. But I am sure the problem also exists on 4.5.1 (or whatever the latest 4.x release is)",
    "attachments": {
        "Responsetime_func_of_facets_asked_for.png": "https://issues.apache.org/jira/secure/attachment/12614046/Responsetime_func_of_facets_asked_for.png",
        "solr-slow-facet.png": "https://issues.apache.org/jira/secure/attachment/12742665/solr-slow-facet.png",
        "SOLR-5444_ExpandingIntArray_DocSetCollector_4_4_0.patch": "https://issues.apache.org/jira/secure/attachment/12614887/SOLR-5444_ExpandingIntArray_DocSetCollector_4_4_0.patch",
        "Profiiling_SimpleFacets_getListedTermCounts_path.png": "https://issues.apache.org/jira/secure/attachment/12614044/Profiiling_SimpleFacets_getListedTermCounts_path.png",
        "Profiling_SimpleFacets_getTermCounts_path.png": "https://issues.apache.org/jira/secure/attachment/12614045/Profiling_SimpleFacets_getTermCounts_path.png",
        "Responsetime_func_of_facets_asked_for-Simple_DocSetCollector_fix.png": "https://issues.apache.org/jira/secure/attachment/12614071/Responsetime_func_of_facets_asked_for-Simple_DocSetCollector_fix.png",
        "SOLR-5444_simple_DocSetCollector_4_4_0.patch": "https://issues.apache.org/jira/secure/attachment/12614072/SOLR-5444_simple_DocSetCollector_4_4_0.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13823645",
            "date": "2013-11-15T13:23:12+0000",
            "content": "You complained of OOM and slowness with docvalues in 4.4 (which loads everything in RAM).\n\nI told you to use the latest version of lucene/solr: you ignored me and refused to do that: your bad!\n\nNobody is going to waste time on things that have already been fixed. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13823725",
            "date": "2013-11-15T15:20:19+0000",
            "content": "You complained of OOM and slowness with docvalues in 4.4 (which loads everything in RAM).\n\nGuess your are referring to mailing-thread \"DocValue on Strings slow and OOM\" on dev@lucene.apache.org\n\nI complained about OOM and slowness for faceting on STRING docValues in 4.4, yes. In the same mail I said that faceting on LONG docValues in 4.4 works nicely - and FYI everything is NOT loaded into RAM when it comes to faceting on docValue-longs in 4.4. There seem to be no (important) changes from 4.4 to 4.5 in the code related to faceting on docValue-LONGS. I might be wrong about that, but the particular issue I raise here in SOLR-5444 has not been fixed in 4.5.\n\nThe OOM/slowness problem for faceting on STRING docValues in 4.4 might very well be fixed in 4.5, and you are right that no one should work on trying to fix it (in 4.4) before it has been confirmed that issue I raised in the mailing-thread actually still exists in 4.5. But as I said in the mailing-thread I will not go find out, because we are (probably) not going to use it anyway, as we will change the c field (c_dstr_doc_sto) to become a long field instead (c_dlng_doc_sto). So we are only going to facet on docValue-LONGS.\n\nSo to spell it out: This issue SOLR-5444 has nothing to do with what I complained about in the mailing-thread. Actually in the mailing-thread I say the faceting on LONG docValues in 4.4 works nicely. SOLR-5444 is about the fact that it actually does not - under certain circumstances.\n\nI told you to use the latest version of lucene/solr: you ignored me and refused to do that: your bad!\n\nI did not ignore it! Actually I told you that I was not going to spend time on going to 4.5 because the problem I complained about (faceting on STRING docValues in 4.4) was not relevant for us any longer (at least for now). I thought I would help out though, checking if the issues was actually fixed in 4.5 - if I could do that check fast. I would only be able to do it fast, if I could just install a 4.5 on top of the 12 billion documents I had already indexed with 4.4. Therefore I asked in the mailing-thread \"... if we need to reindex the 12billion documents again after upgrading to 4.5, or if we ought to be able to deploy 4.5 on top of the already indexed documents\". I got no answer, so I guess you where not interested in me verifying that the problem was actually fixed in 4.5.\n\nNobody is going to waste time on things that have already been fixed.\n\nIt has not been fixed. You would have had a chance to realize that if you actually read this issue.\n\nI am not asking you to fix this one - I will be capable to doing that myself. But there are several potential fixes, and because I actually work as you are supposed to do in an open-source project, I ask for input about which fix is the best (while laying out a few of the potential fixes). There might be people out there that prefer one fix over another, for reasons that I might not know of. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13823727",
            "date": "2013-11-15T15:26:27+0000",
            "content": "Attached SOLR-5444_simple_DocSetCollector_4_4_0.patch fixes the issue. I am not saying that this is the best fix, but at least it fixes it.\n\nResponsetimes for similar tests on same dataset after the patch\n "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13827660",
            "date": "2013-11-20T13:42:33+0000",
            "content": "Use SOLR-5444_ExpandingIntArray_DocSetCollector_4_4_0.patch instead of SOLR-5444_simple_DocSetCollector_4_4_0.patch.\n\nSOLR-5444_simple_DocSetCollector_4_4_0.patch solved my responsetime problem, but introduced a memory issues in other kinds of searches.\n\nSOLR-5444_ExpandingIntArray_DocSetCollector_4_4_0.patch still solves the responsetime problem, but without introducing memory issues for other kinds of searches "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13885366",
            "date": "2014-01-29T14:16:09+0000",
            "content": "I'm not familiar with this part of the code, but the patch seems to fix a real problem for large installs. Anyone wants to have a look? Yonik Seeley? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971024",
            "date": "2014-04-16T12:56:55+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14162196",
            "date": "2014-10-07T17:56:01+0000",
            "content": "Per Steffensen expanding docset is reasonable - default constants and behavior do not work well for your numbers. \nAs an another workaround, you can try enlarge filter cache, that should avoid these docset collecting. Do all docsets fit into RAM? Then, enabling docvalues should bypass those SimpleFacets hotspots. \n "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-14163309",
            "date": "2014-10-08T10:27:59+0000",
            "content": "Thanks for responding, Mikhail. We are happy with out solution (also provided as a patch here), and do currently not want to look further into it. Thanks again!\n "
        },
        {
            "author": "Arcadius Ahouansou",
            "id": "comment-14605581",
            "date": "2015-06-29T13:06:31+0000",
            "content": "We are having some performance issue on Solr 5.2.1  with slow facets on large data set.\nA lot of time is being spent in \n\n\u2026g.apache.solr.handler.component.FacetComponent.process (FacetComponent.java:116)\n\u2026solr.handler.component.SearchHandler.handleRequestBody (SearchHandler.java:255)\n\u2026g.apache.solr.handler.RequestHandlerBase.handleRequest (RequestHandlerBase.java:143)\n\n\n\nNot sure Robert Muir whether these are related though.\n\n\nArcadius "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14605633",
            "date": "2015-06-29T13:57:03+0000",
            "content": "Arcadius Ahouansou would you mind to share a few next rows in a stacktrace? How often you do (soft)commits? "
        },
        {
            "author": "Arcadius Ahouansou",
            "id": "comment-14606753",
            "date": "2015-06-30T00:44:50+0000",
            "content": "\nHello Mikhail Khludnev\nBelow is the stacktrace from NewRelic.\nAlso attached a screenshot.\nThanks\n\n\u2026g.apache.solr.handler.component.FacetComponent.process (FacetComponent.java:116)\n\u2026solr.handler.component.SearchHandler.handleRequestBody (SearchHandler.java:255)\n\u2026g.apache.solr.handler.RequestHandlerBase.handleRequest (RequestHandlerBase.java:143)\n                  org.apache.solr.core.SolrCore.execute (SolrCore.java:2064)\n           org.apache.solr.servlet.HttpSolrCall.execute (HttpSolrCall.java:654)\n              org.apache.solr.servlet.HttpSolrCall.call (HttpSolrCall.java:450)\n    org.apache.solr.servlet.SolrDispatchFilter.doFilter (SolrDispatchFilter.java:227)\n    org.apache.solr.servlet.SolrDispatchFilter.doFilter (SolrDispatchFilter.java:46)\n\u2026ipse.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1652)\n      org.eclipse.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:585)\n  org.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:143)\n      org.eclipse.jetty.security.SecurityHandler.handle (SecurityHandler.java:577)\n\u2026g.eclipse.jetty.server.session.SessionHandler.doHandle (SessionHandler.java:223)\n\u2026g.eclipse.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1127)\n       org.eclipse.jetty.servlet.ServletHandler.doScope (ServletHandler.java:515)\norg.eclipse.jetty.server.session.SessionHandler.doScope (SessionHandler.java:185)\norg.eclipse.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1061)\n  org.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:141)\n\u2026e.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:215)\n\u2026.eclipse.jetty.server.handler.HandlerCollection.handle (HandlerCollection.java:110)\n org.eclipse.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:97)\n                 org.eclipse.jetty.server.Server.handle (Server.java:497)\n            org.eclipse.jetty.server.HttpChannel.handle (HttpChannel.java:310)\n     org.eclipse.jetty.server.HttpConnection.onFillable (HttpConnection.java:257)\n          org.eclipse.jetty.io.AbstractConnection$2.run (AbstractConnection.java:540)\n  org.eclipse.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:635)\n   org.eclipse.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:555)\n                                   java.lang.Thread.run (Thread.java:745)\n\n "
        },
        {
            "author": "Arcadius Ahouansou",
            "id": "comment-14608017",
            "date": "2015-06-30T09:28:26+0000",
            "content": "About commit:\n\n<autoCommit>\n            <maxTime>${solr.autoCommit.maxTime:300000}</maxTime>\n            <openSearcher>false</openSearcher>\n</autoCommit>\n<autoSoftCommit>\n            <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>\n</autoSoftCommit>\n\n\n\nAnd we have an external Ingester that pushes data to Solr and does softCommit afterward.\nThat Ingester has been stopped during this test, so no softCommit at all.\n\nThanks "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14608134",
            "date": "2015-06-30T11:13:00+0000",
            "content": "Sorry. It's too shallow stacktrace. I can't tell what time consuming it does under facet component. "
        }
    ]
}