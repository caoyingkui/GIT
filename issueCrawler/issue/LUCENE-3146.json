{
    "id": "LUCENE-3146",
    "title": "IndexReader.setNorms is no op if one of the field instances omits norms",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.3",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If I add two documents to an index w/ same field, and one of them omit norms, then IndexReader.setNorms is no-op. I'll attach a patch w/ test case",
    "attachments": {
        "LUCENE-3146.patch": "https://issues.apache.org/jira/secure/attachment/12480520/LUCENE-3146.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-26T08:52:23+0000",
            "content": "Patch w/ test that reproduces the problem. If you uncomment the commit() between addDoc() calls, the test passes. Could be related to recent changes w/ DWPT? ",
            "author": "Shai Erera",
            "id": "comment-13039591"
        },
        {
            "date": "2011-05-26T08:52:55+0000",
            "content": "Forgot to mention that the same test passes on 3x, even w/o the commit() in between addDoc() calls ",
            "author": "Shai Erera",
            "id": "comment-13039592"
        },
        {
            "date": "2011-05-26T09:37:58+0000",
            "content": "I think this behavior, while spooky, is correct.  LUCENE-2846 flipped the norms merging behavior so that omitNorm now \"spreads\", in 4.0 (not 3.x).\n\nBut the javadoc in Field.NOT_ANALYZED_NO_NORMS needs to be fixed, on trunk.\n\nI think, also, SegmentReader.doSetNorm should throw an exc if you attempt to set norm on a field that does not have norms... it's bad that we silently ignore that... makes the app think the call succeeded when in fact nothing happened. ",
            "author": "Michael McCandless",
            "id": "comment-13039611"
        },
        {
            "date": "2011-05-26T09:43:54+0000",
            "content": "Also, in trunk, we now store a separate global field infos file (.fnx), which in theory could be used to catch this case when app attempts to use different omitNorms for different docs.  However, this only tracks field name -> number mapping, not settings in the schema like omitNorms... if we added things like omitNorms, omitTF to this, then we'd have more consistent behavior here, and could fix this trap (if you uncomment the commit in the test case) where app thinks it succeeded in setting a norm but in fact on future merging it did not succeed. ",
            "author": "Michael McCandless",
            "id": "comment-13039614"
        },
        {
            "date": "2011-05-30T16:25:45+0000",
            "content": "Adding that info to .fnx is a good idea. But I'm not sure it will solve the problem demonstrated in the test, only in different order.\n\nSay the app adds field \"a\" w/ omitNorms=false and commit(). Then .fnx records that field \"a\" stores norms and you can call IR.setNorms. Afterwards it adds field \"a\" w/ omitNorms=true \u2013 now what? Do we fail the addDocument() (I think we should)? If we don't, then norms will be merged away, according to trunk's semantics.\n\nSo I think we should fix the jdocs + throw the ex from IR.setNorms in this issue, and open a separate one for tracking norms in .fnx + fixing the scenario I've described above?\n\nDo we have a ready-to-use exception? If not, how about IllegalArgEx (cause the field is an illegal arg, but weak), IllegalStateEx (cause the field does not track norms, but that ex is usually associated w/ Threads' states), IllegalOpEx (is there such ex)? At any rate, we must throw a RuntimeEx (at least in 3x) to not break apps, compile-wise. ",
            "author": "Shai Erera",
            "id": "comment-13041189"
        },
        {
            "date": "2011-05-30T17:51:13+0000",
            "content": "I agree we should first fix IR.setNorm to throw exc today... I like IllegalStateEx.\n\nAnd then open a separate issue; I agree add/updateDocument should fail.  Or, maybe, we allow the case you described (and it means all norms will now be omitted for this field), but the reverse case (you have been omitting norms up until now and suddenly you try to add a doc not omitting norms) we throw exc? ",
            "author": "Michael McCandless",
            "id": "comment-13041213"
        },
        {
            "date": "2011-05-30T19:01:36+0000",
            "content": "maybe, we allow the case you described (and it means all norms will now be omitted for this field)\n\nThough I don't like the idea of someone mistakenly adding a field w/ omitNorms=true, and suddenly all norms disappear, I think we must allow that scenario in order to apps to be able to disable all norms for a field. Basically, I hope that apps don't do crazy things and are consistent . I'll open a separate issue to track that. ",
            "author": "Shai Erera",
            "id": "comment-13041234"
        },
        {
            "date": "2011-05-30T19:39:58+0000",
            "content": "It's true that's a risk but... omitNorms (and omitTF) are effectively today a \"global schema\" because on merge Lucene cannot preserve different settings here, unlike, eg, term vectors or stored fields or the upcoming doc values, where every document is free to have its own \"schema\".\n\nThe fact that apps now see different behavior depending on when Lucene happened to merge segments is awful.\n\nCatching/enforcing this global schema up front, now made possible because we have the fnx file, is cleaner because merge selection would no longer be \"visible\" in the API. ",
            "author": "Michael McCandless",
            "id": "comment-13041252"
        },
        {
            "date": "2011-05-30T20:13:42+0000",
            "content": "Patch against trunk:\n\n\tfixes jdocs\n\tSR.doSetNorms throws IllegalStateEx\n\tCHANGES\n\n ",
            "author": "Shai Erera",
            "id": "comment-13041266"
        },
        {
            "date": "2011-06-01T08:15:46+0000",
            "content": "Committed revision 1130039 (trunk).\nCommitted revision 1130041 (3x).\n\nThanks Mike ! ",
            "author": "Shai Erera",
            "id": "comment-13042037"
        },
        {
            "date": "2011-07-02T02:40:18+0000",
            "content": "bulk close for 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13058942"
        }
    ]
}