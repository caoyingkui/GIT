{
    "id": "SOLR-9783",
    "title": "remove no-longer-needed sortWithinGroup null checks in (Search|Top)Group[s]ShardResponseProcessor",
    "details": {
        "components": [],
        "type": "Task",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Why this, why now? I was looking some more at SOLR-6203 and what the next sub-step after the SOLR-9660 sub-step might be. Revisiting Judith Silverman's SOLR-6203 README file, the step (1) is included in SOLR-9660 and step (2) mentions passing around SortSpecs rather than plain Sorts, with Search and TopGroups ShardResponseProcessor amongst the files affected. In principle the change for those two files should be straightforward i.e.\n\n  ...\n- Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n+ SortSpec sortSpecWithinGroup = rb.getGroupingSpec().getSortSpecWithinGroup();\n  ...\n\n\nexcept that both starting points are\n\n  Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n  if (sortWithinGroup == null) { // TODO prevent it from being null in the first place\n    sortWithinGroup = Sort.RELEVANCE;\n  }\n\n\nand so this ticket here aims to get rid of the two 'TODO' statements. The statements were added as part of LUCENE-6900's https://svn.apache.org/viewvc?view=revision&revision=1716569 in November 2015 and Judith's original SOLR-6203.patch is from October 2015 i.e. slightly before then.\n\nDavid Smiley - do you recall anything re: when/how sortWithinGroup could be null back then? From my reading of the current (master) code the sortWithinGroup would never be null now. solr/core tests pass when the if statements are removed (will attach patch and also run the non-core solr tests) but that could of course just be due to lacking test coverage.\n\nAnd unrelated but noticed whilst in the code area, the patch includes a\n\n+ ... || sort == Sort.RELEVANCE) {\n- ... || sort.equals(Sort.RELEVANCE)) {\n\n\ntweak to QueryCommand.java also.",
    "attachments": {
        "SOLR-9783.patch": "https://issues.apache.org/jira/secure/attachment/12839699/SOLR-9783.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-11-21T03:33:12+0000",
            "author": "David Smiley",
            "content": "do you recall anything re: when/how sortWithinGroup could be null back then? From my reading of the current (master) code the sortWithinGroup would never be null now. solr/core tests pass when the if statements are removed\n\nNo I don't recall if it could be null.  I recall I was trying to be a bit cautious in my changes to Solr as part of that issue... it's possible I felt I needed to add that because the code prior had null checks; I don't remember.  If you don't think it can be null, then I suggest removing them and add asserts. ",
            "id": "comment-15682387"
        },
        {
            "date": "2016-11-29T18:32:30+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 02c687758e904ab92c2b766b2ec837bcb99f484f in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=02c6877 ]\n\nSOLR-9783: (Search|Top)Group[s]ShardResponseProcessor.process: turned sortWithinGroup null check into assert.\nAlso sort.equals tweak in (grouping) QueryCommand.create method. ",
            "id": "comment-15706126"
        },
        {
            "date": "2016-11-29T18:51:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 0ef423674541a6e3c620a8b0029391ee7aca63be in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0ef4236 ]\n\nSOLR-9783: (Search|Top)Group[s]ShardResponseProcessor.process: turned sortWithinGroup null check into assert.\nAlso sort.equals tweak in (grouping) QueryCommand.create method. ",
            "id": "comment-15706178"
        },
        {
            "date": "2016-11-29T20:25:56+0000",
            "author": "Judith Silverman",
            "content": "Hello, is there any context in which we don't want to interpret a null Sort value in a SortSpec as Sort.RELEVANCE? I ask because I just had a test fail because sortWithinGroup was null. (My code is highly experimental, so this failure doesn't prove anything about the master.) My investigation led me to SortSpecParsing's newEmptySortSpec(), which feeds a null Sort value to a SortSpec constructor. I'm wondering whether newEmptySortSpec() could send Sort.RELEVANCE instead and/or the SortSpec constructors could be modified to replace nulls with Sort.RELEVANCE (and to adjust whatever else would need adjusting). Apologies if this idea is impractical or has already been considered and dismissed. ",
            "id": "comment-15706433"
        },
        {
            "date": "2016-11-29T20:51:25+0000",
            "author": "Christine Poerschke",
            "content": "... to interpret a null Sort value in a SortSpec as ...\n\nYes, that's a good question as to if/how/why/when the Sort value in a SortSpec might be null and if it is null, how to interpret that.\n\nWithin this change/ticket here I was just specifically looking at whether or not the sortWithinGroup within a GroupingSpecification could ever be null at the point at which the ...ShardResponseProcessor is using it. From my reading of the code I concluded that it would never be null because of the QueryComponent.java#L249-L269 logic.\n\n... I'm wondering whether newEmptySortSpec() could send Sort.RELEVANCE instead and/or the SortSpec constructors could be modified to replace nulls with Sort.RELEVANCE ...\n\nnewEmptySortSpec() sending Sort.RELEVANCE instead of null sounds an interesting idea. I wonder where else apart from QueryComponent.java#L249-L269 there is \"null means Sort.RELEVANCE\" logic (or indeed \"null means SomethingElse\" logic) that would go away if newEmptySortSpec() stopped sending null.\n ",
            "id": "comment-15706490"
        },
        {
            "date": "2016-11-29T20:52:28+0000",
            "author": "Christine Poerschke",
            "content": "Thanks David for the suggestion to use asserts - that being an alternative to removal of the check had not occurred to me. ",
            "id": "comment-15706492"
        },
        {
            "date": "2016-12-07T10:16:59+0000",
            "author": "Christine Poerschke",
            "content": "\"remove no-longer-needed sortWithinGroup null checks in ...\" here is done, SOLR-9660 and SOLR-6203 continue. ",
            "id": "comment-15728371"
        }
    ]
}