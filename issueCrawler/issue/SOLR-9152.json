{
    "id": "SOLR-9152",
    "title": "Change the default of facet.distrib.mco from false to true",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "SOLR-8988 added a new query option facet.distrib.mco which when set to true would allow the use of facet.mincount=1 in cloud mode. The previous behavior, and current default, is that facet.mincount=0 when in cloud mode. \n\nWhat exactly would be changed?\nThe default of facet.distrib.mco=false would be changed to facet.distrib.mco=true.\n\nWhen is this option effective?\nFrom the documentation,\n\n/**\n * If we are returning facet field counts, are sorting those facets by their count, and the minimum count to return is &gt; 0,\n * then allow the use of facet.mincount = 1 in cloud mode. To enable this use facet.distrib.mco=true.\n *\n * i.e. If the following three conditions are met in cloud mode: facet.sort=count, facet.limit &gt; 0, facet.mincount &gt; 0.\n * Then use facet.mincount=1.\n *\n * Previously and by default facet.mincount will be explicitly set to 0 when in cloud mode for this condition.\n * In SOLR-8599 and SOLR-8988, significant performance increase has been seen when enabling this optimization.\n *\n * Note: enabling this flag has no effect when the conditions above are not met. For those other cases the default behavior is sufficient.\n */\n\n\n\nWhat is the result of turning this option on?\nWhen facet.distrib.mco=true is used, and the conditions above are met, then when Solr is sending requests off to the various shards it will include facet.mincount=1. The result of this is that only terms with a count > 0 will be considered when processing the request for that shard. This can result in a significant performance gain when the field has high cardinality and the matching docset is relatively small because terms with 0 matches will not be considered. \n\nAs shown in SOLR-8988, the runtime of a single query was reduced from 20 seconds to less than 1 second.\n\nCan this change result in worse performance?\nThe current thinking is no, worse performance won't be experienced even under non-optimal scenarios. From the comments in SOLR-8988, \n\nConsider you asked for up to 10 terms from shardA with mincount=1 but you received only 5 terms back. In this case you know, definitively, that a term seen in the response from shardB but not in the response from shardA could have at most a count of 0 in shardA. If it had any other count in shardA then it would have been returned in the response from shardA.\n\nAlso, if you asked for up to 10 terms from shardA with mincount=1 and you get back a response with 10 terms having a count >= 1 then the response is identical to the one you'd have received if mincount=0. \n\nBecause of this, there isn't a scenario where the response would result in more work than would have been required if mincount=0. For this reason, the decrease in required work when mincount=1 is always either a moot point or a net win.\n\nThe belief here is that it is safe to change the default of facet.distrib.mco such that facet.mincount=1 will be used when appropriate. The overall performance gain can be significant and there is no seen performance cost.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-23T20:10:22+0000",
            "author": "Scott Blum",
            "content": "Why is this even an option?  I don't understand why you'd ever need the distributed request to have mincount=0 when the main request has mincount=1. ",
            "id": "comment-15296998"
        },
        {
            "date": "2016-05-23T20:15:46+0000",
            "author": "Dennis Gove",
            "content": "Mainly because there is some concern over a misunderstanding of the line that set it to 0.\n\n-          dff.initialMincount = 0; // TODO: we could change this to 1, but would\n-                                   // then need more refinement for small facet\n-                                   // result sets?\n\n\n\nIs there some case we're missing where setting this value to 1 does in fact cause a problem? If so, and per the discussion in SOLR-8988, we didn't want to just go ahead and change the value without giving a backout option.  ",
            "id": "comment-15297006"
        },
        {
            "date": "2016-05-23T20:16:43+0000",
            "author": "Keith Laban",
            "content": "The original concern in SOLR-8988 was that it would affect refinement. I can't see a reason why it would, additionally in any of the testing I've done I've seen only improvements. ",
            "id": "comment-15297007"
        },
        {
            "date": "2016-05-26T04:49:46+0000",
            "author": "David Smiley",
            "content": "+1 to flip the default! ",
            "id": "comment-15301524"
        }
    ]
}