{
    "id": "LUCENE-6818",
    "title": "Implementing Divergence from Independence (DFI) Term-Weighting for Lucene/Solr",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.3",
        "components": [
            "core/query/scoring"
        ],
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "As explained in the write-up, many state-of-the-art ranking model implementations are added to Apache Lucene. \n\nThis issue aims to include DFI model, which is the non-parametric counterpart of the Divergence from Randomness (DFR) framework.\n\nDFI is both parameter-free and non-parametric:\n\n\n\tparameter-free: it does not require any parameter tuning or training.\n\tnon-parametric: it does not make any assumptions about word frequency distributions on document collections.\n\n\n\nIt is highly recommended not to remove stopwords (very common terms: the, of, and, to, a, in, for, is, on, that, etc) with this similarity.\n\nFor more information see: A nonparametric term weighting method for information retrieval based on measuring the divergence from independence",
    "attachments": {
        "LUCENE-6818.patch": "https://issues.apache.org/jira/secure/attachment/12762605/LUCENE-6818.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14909788",
            "author": "Ahmet Arslan",
            "date": "2015-09-27T16:06:25+0000",
            "content": "Patch for DFI. However, with this one TestSimilarity2#testCrazySpans fails.\nAny pointers how to fix this will be really appreciated.  "
        },
        {
            "id": "comment-14910012",
            "author": "Robert Muir",
            "date": "2015-09-28T04:01:59+0000",
            "content": "It happens when expected = 0, caused by the craziness of how spans score (they will happily score a term that does not exist). In this case totalTermFreq is zero, which makes expected go to zero, and then later the formula produces infinity (which the test checks for)\n\nThe test has this explanation for how spans score terms that don't exist:\n\n\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n\n\n\nThe typical solution is to do something like adjust expected:\n\n\n    final float expected = (1 + stats.getTotalTermFreq()) * docLen / (1 + stats.getNumberOfFieldTokens());\n\n\n\nI have not read the paper, but these are things to deal with when integrating into lucene. Another thing to be careful about is ensuring that integration of lucene's boosting is really safe, index-time boosts work on the norm, by making the document appear shorter or longer, so docLen might have a \"crazy\" value if the user does this. "
        },
        {
            "id": "comment-14910168",
            "author": "Ahmet Arslan",
            "date": "2015-09-28T08:26:05+0000",
            "content": "This patch prevents infinity score by using +1 trick. Now TestSimilarity2#testCrazySpans passes. "
        },
        {
            "id": "comment-14910174",
            "author": "Ahmet Arslan",
            "date": "2015-09-28T08:34:32+0000",
            "content": "The typical solution is to do something like adjust expected:\nThanks Robert for the suggestion and explanation. Used the typical solution, its working now.\n\nI have not read the paper, but these are things to deal with when integrating into lucene.\nFor your information, if you want to look at, Terrier 4.0 source tree has this model in DFIC.java\n\nindex-time boosts work on the norm, by making the document appear shorter or longer, so docLen might have a \"crazy\" value if the user does this.\nI was relying o.a.l.search.similarities.SimilarityBase for this but it looks like all of its subclasses (DFR, IB) have this problem. I included TestSimilarityBase#testNorms method in the new patch to demonstrate the problem. If I am not missing something obvious this is a bug, no? "
        },
        {
            "id": "comment-14933355",
            "author": "Ahmet Arslan",
            "date": "2015-09-28T14:24:13+0000",
            "content": "\n\trenamed failing test to TestSimilarityBase#testIndexTimeBoost\n\trandomized the test method a bit\n\n "
        },
        {
            "id": "comment-14933478",
            "author": "Robert Muir",
            "date": "2015-09-28T15:53:22+0000",
            "content": "It is not a bug, it is just always how the index-time boost in lucene has worked. Boosting a document at index-time is just a way for a user to make it artificially longer or shorter.\n\nI don't think we should change this, it makes it much easier for people to experiment since all of our scoring models do this the same way. It means you do not have to reindex to change the Similarity, for example.\n\nIts easy to understand this as \"at search time, the similarity sees the \"normalized\" document length\". All I am saying is, these scoring models just have to make sure they don't do something totally nuts (like return negative, Infinity, or NaN scores) if the user index-time boosts with extreme values: extreme values that might not make sense relative to e.g. the collection-level statistics for the field. So in my opinion all that is needed, is to add a `testCrazyBoosts` that looks a lot like `testCrazySpans`, and just asserts those things, ideally across all 256 possible norm values. "
        },
        {
            "id": "comment-14934801",
            "author": "Ahmet Arslan",
            "date": "2015-09-29T07:49:29+0000",
            "content": "I tried to implement Robert's suggestion at TestSimilarityBase#testCrazyIndexTimeBoosts\nIt iterates over all possible norm values and 10 different term frequency tf values. NaN, Infinity, Negative values are checked. But I am note sure about the Negative. Some models can return negative scores for certain terms. For example BM25 returns negative scores for common terms.\n\nCurrently only DFI is tested. Because other models make fail the test in its current form.\n\nSome random question:\n\nWhat is the preferred course of action during scoring when term frequency is greater than document length?\n\n\nI think we should simply recommend to use index time boosts only with ClassicSimilarity. I wonder how SweetSpotSimilarity works with index time boosts, where artificially shortening the document length may decrease its rank. "
        },
        {
            "id": "comment-14934878",
            "author": "Adrien Grand",
            "date": "2015-09-29T09:00:37+0000",
            "content": "I think we should simply recommend to use index time boosts only with ClassicSimilarity.\n\nIf we only recommend on using index-time boosts on a Similarity that is not even the default one, maybe we should remove index-time boosts entirely? I opened https://issues.apache.org/jira/browse/LUCENE-6819 "
        },
        {
            "id": "comment-14996557",
            "author": "Ahmet Arslan",
            "date": "2015-11-09T14:00:23+0000",
            "content": "Patch updated to current trunk (revision 1713433) "
        },
        {
            "id": "comment-15104996",
            "author": "ASF subversion and git services",
            "date": "2016-01-18T09:24:24+0000",
            "content": "Commit 1725205 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1725205 ]\n\nLUCENE-6818: Add DFISimilarity implementing the divergence from independence model "
        },
        {
            "id": "comment-15105012",
            "author": "Robert Muir",
            "date": "2016-01-18T09:42:12+0000",
            "content": "Thanks Ahmet Arslan !\n\nThe norms/spans tests were added in LUCENE-6896.\n\nRather than a wildcard import, I moved RandomSimilarityProvider to similarities/RandomSimilarity, so its in the correct package. Its just used by LuceneTestCase.newSearcher.\n\nI ran the test suite a few times to try to find any problems, and did some rudimentary relevance testing of the lucene impl and everything seems ok.\n\nFor the solr factory changes around discountOverlaps, can you make a separate issue for that? I'm concerned that, if the factory is not initialized properly, instead there will be other problems, so maybe that should really be an assertion or something. "
        },
        {
            "id": "comment-15105022",
            "author": "ASF subversion and git services",
            "date": "2016-01-18T09:51:10+0000",
            "content": "Commit 1725210 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1725210 ]\n\nLUCENE-6818: Add DFISimilarity implementing the divergence from independence model "
        },
        {
            "id": "comment-15106999",
            "author": "Ahmet Arslan",
            "date": "2016-01-19T16:53:59+0000",
            "content": "Thanks Robert Muir for taking care of this.\n\nFor the solr factory changes around discountOverlaps, can you make a separate issue for that?\nCreated SOLR-8570 "
        }
    ]
}