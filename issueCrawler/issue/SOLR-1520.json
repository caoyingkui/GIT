{
    "id": "SOLR-1520",
    "title": "QueryElevationComponent does not work when unique key is of type 'sint'",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "Rules",
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "QueryElevationComponent does not work when unique key of the documents is of type 'sint'. I did not try any other combination, but when I looking at the source in QueryElevationComponent.java I doubt it will work with any other type than string.\n\nI propose to either make it work with other data types or at least to post a warning.",
    "attachments": {
        "SOLR-1520.patch": "https://issues.apache.org/jira/secure/attachment/12448453/SOLR-1520.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12768800",
            "date": "2009-10-22T18:18:03+0000",
            "content": "At first glance, this seems like it could be fixed by changing the two \"new TermQuery\" lines to use FIeldType.readableToIndexed() ... but there's also some funky stuff going on in ElevationComparatorSource that makes me think it's probably not that easy ... particularly the use of getStringIndex which suggests that the Trie Fields definitely won't work.\n\nAnyone have any suggestions on a true fix for this, or at least a way to make it fail cleanly with a good error message about the uniqueKey field type expectations that it has? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12884053",
            "date": "2010-06-30T20:30:20+0000",
            "content": "Seems like this should work for any non-analyzed field that is the id field, right? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12884076",
            "date": "2010-06-30T22:15:09+0000",
            "content": "Here's a start on this, but I'm at a loss as to the best way to test it works b/c I'm not up on how to deal with needing multiple schema files (b/c I need to change unique keys) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12884814",
            "date": "2010-07-02T21:28:12+0000",
            "content": "IRC log:\n\ngsingers: I need to test solr w/ multiple unique keys\n[16:48] gsingers: of different field types\n[16:48] gsingers: https://issues.apache.org/jira/browse/SOLR-1520\n[16:48] gsingers: any suggestions?\n[16:49] gsingers: seems like the Solr test case is pretty much one schema per\n[16:49] gsingers: test class\n[17:18] ThetaPh1: gsingers: is getStringIndex otherwise used in this, as Hoss mentioned?\n[17:18] ThetaPh1: because lese it should work also with numeric fields and also sint, tint,...\n[17:21] gsingers: ThetaPh1: I don't think getStringIndex is used anymore\n[17:22] hossman: grant: there's a new JUnit4-esque base class that makes it easier to use differnet configs in each test method ... you just call initCore(...) as needed in each test method\n[17:22] ThetaPh1: or in trunk the replacement...\n[17:22] yonik__: getStringIndex is gone in trunk\n[17:22] gsingers: it does still do FieldCache stuff\n[17:22] ThetaPh1: yonik__: but the bytesref one?\n[17:22] gsingers: but it is just BytesRef\n[17:22] ThetaPh1: that is what i meant\n[17:22] yonik__: gsingers: for schemas, just use schema11.xml - it has a float (actually sfloat) unique key\n[17:23] gsingers: yonik: OK, I can do that.  This should work for any field that is not tokenized, right?\n[17:23] gsingers: as long as it is indexed\n[17:23] yonik__: other code paths test the transformation from indexed to readable and back... it's enough to test a single key that has a readable that is not identical to indexed\n[17:24] yonik__: strictly speaking, tokenized should be fine too\n[17:24] yonik__: or can be fine I should say\n[17:24] gsingers: but what if you get multiple docs back?\n[17:24] markrmiller left the chat room. (Quit: Commit this!)\n[17:24] gsingers: I was debating that\n[17:24] hossman: (FWIW: test like this are also possible with AbstractSolrTestCase \u2013 you just change the value getSchemaFile() returns before calling super.setUp(), but it's more explicit in the new base class)\n[17:25] gsingers: maybe it simply means elevate all those files\n[17:25] yonik__: it's just like sorting\n[17:25] gsingers: but, it is the unique key\n[17:25] yonik__: if you're using the field cache, you won't get more than one doc per value\n[17:25] gsingers: so, there shouldn't be more than one doc anyway\n[17:25] yonik__: right\n[17:25] yonik__: it actually could be tokenized, but should only result in one token\n[17:26] gsingers: true, but that's a bit harder to enforce\n[17:26] ThetaPh1: even when using getstringindex, trunk and 3.x should no longer throw exceptrion\n[17:26] ThetaPh1: 3.0 does, but this was incorrectly fixed \n[17:26] gsingers: and seems like it could cause weird errors for people\n[17:26] yonik__: gsingers: we don't enforce it for the unique key\n[17:26] gsingers: OK\n[17:26] yonik__: I don't believe\n[17:26] ThetaPh1: and if you use tint as unique key, it should also work with stringindex ahm termsindex\n[17:26] yonik__: anyway, if it's enforced anywhere, that would be the place\n[17:26] gsingers: I'm working on a diff. issue, anyone object to me c&p this onto the issue?\n[17:26] gsingers: so that I don't forget it\n[17:27] yonik__: ? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13164817",
            "date": "2011-12-07T23:08:35+0000",
            "content": "Adds in tests for this against schema11.xml.  Should be close to ready to go.  For now, it requires a non-tokenized field for the id. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13168655",
            "date": "2011-12-13T19:51:13+0000",
            "content": "Committed to trunk and branch "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13170422",
            "date": "2011-12-15T19:12:38+0000",
            "content": "This really should work with TrieFields too. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13170430",
            "date": "2011-12-15T19:24:05+0000",
            "content": "The only issue is TrieField returns true for isTokenized() which causes the current approach to fail, but I guess we can just drop the isTokenized() requirement since it's somewhat undefined anyway what an multi-token id field means anyway.  So, I'm just going to drop it and commit it w/ the only requirement being that the unique key exists. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13170607",
            "date": "2011-12-16T00:03:46+0000",
            "content": "Grant: i had to revert r1214937 as it was breaking several tests. example...\n\n\njava.lang.RuntimeException: org.apache.solr.common.SolrException\n\tat org.apache.solr.util.TestHarness.<init>(TestHarness.java:152)\n\tat org.apache.solr.util.TestHarness.<init>(TestHarness.java:135)\n\tat org.apache.solr.util.TestHarness.<init>(TestHarness.java:125)\n\tat org.apache.solr.SolrTestCaseJ4.initCore(SolrTestCaseJ4.java:245)\n\tat org.apache.solr.SolrTestCaseJ4.initCore(SolrTestCaseJ4.java:103)\n\tat org.apache.solr.SolrTestCaseJ4.initCore(SolrTestCaseJ4.java:92)\n\tat org.apache.solr.MinimalSchemaTest.beforeClass(MinimalSchemaTest.java:40)\nCaused by: org.apache.solr.common.SolrException\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:619)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:504)\n\tat org.apache.solr.util.TestHarness$Initializer.initialize(TestHarness.java:216)\n\tat org.apache.solr.util.TestHarness.<init>(TestHarness.java:140)\nCaused by: org.apache.solr.common.SolrException: QueryElevationComponent requires the schema to have a uniqueKeyField.\n\tat org.apache.solr.handler.component.QueryElevationComponent.inform(QueryElevationComponent.java:161)\n\tat org.apache.solr.core.SolrResourceLoader.inform(SolrResourceLoader.java:542)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:614)\n\n\n\nAs i mentioned in email...\n\n\nGrant: at quick skim suggests that your change to \nsolr/core/src/test-files/solr/conf/solrconfig.xml in r1214937 broke \nseveral tests that use that config w/o a uniqueKey field.\n\nAt first glance, it's not even clear why you added that to the (heavily \noverused) solrconfig.xml anyway, since there is already a \nsolrconfig-elevate.xml that is also used already.  (if the problem is \nwanting to use different based types in diff test methods, you could just \ninstantiate multiple instances of QueryElevationComponent in \nsolrconfig-elevate.xml and refer to them by name.\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13171110",
            "date": "2011-12-16T18:07:56+0000",
            "content": "Thanks, Hoss.  Forgot to run the full suite of tests.  The main reason I put it in the main config is that I wanted a trie field unique key and also b/c I want to leverage the existing Solr distributed tests for SOLR-2949 (instead of writing another distributed test that requires spin up/tear down of shards and thus slows down the tests significantly) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13171134",
            "date": "2011-12-16T18:58:29+0000",
            "content": "I want to leverage the existing Solr distributed tests for SOLR-2949 (instead of writing another distributed test that requires spin up/tear down of shards and thus slows down the tests significantly)\n\n+1 to that part.\n\nThe \"test if a trie field works\" doesn't need to be distributed and can go somewhere else. "
        }
    ]
}