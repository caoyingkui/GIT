{
    "id": "LUCENE-6170",
    "title": "MultiDocValues.getSortedValues cause IndexOutOfBoundsException",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.1",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Caused by: java.lang.IndexOutOfBoundsException\n\tat java.nio.Buffer.checkBounds(Buffer.java:567)\n\tat java.nio.DirectByteBuffer.get(DirectByteBuffer.java:265)\n\tat org.apache.lucene.store.ByteBufferIndexInput.readBytes(ByteBufferIndexInput.java:95)\n\tat org.apache.lucene.codecs.lucene410.Lucene410DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.readTerm(Lucene410DocValuesProducer.java:909)\n\tat org.apache.lucene.codecs.lucene410.Lucene410DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.seekExact(Lucene410DocValuesProducer.java:1017)\n\tat org.apache.lucene.codecs.lucene410.Lucene410DocValuesProducer$CompressedBinaryDocValues.get(Lucene410DocValuesProducer.java:815)\n\tat org.apache.lucene.codecs.lucene410.Lucene410DocValuesProducer$LongBinaryDocValues.get(Lucene410DocValuesProducer.java:775)\n\tat org.apache.lucene.codecs.lucene410.Lucene410DocValuesProducer$6.lookupOrd(Lucene410DocValuesProducer.java:513)\n\tat org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.lookupOrd(MultiDocValues.java:670)\n\tat org.apache.lucene.index.SortedDocValues.get(SortedDocValues.java:69)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14270890",
            "author": "Robert Muir",
            "date": "2015-01-09T11:17:04+0000",
            "content": "Can you provide more information? That truncated stack trace will not be enough to reproduce this. "
        },
        {
            "id": "comment-14270895",
            "author": "Robert Muir",
            "date": "2015-01-09T11:25:17+0000",
            "content": "Also, can you provide JVM version? If using G1GC, please, turn it off. "
        },
        {
            "id": "comment-14271080",
            "author": "Littlestar",
            "date": "2015-01-09T14:48:25+0000",
            "content": "java version \"1.7.0_60\" + G1GC.\nG1GC or default CMS has same problem.\n\n "
        },
        {
            "id": "comment-14271081",
            "author": "Robert Muir",
            "date": "2015-01-09T14:50:11+0000",
            "content": "Well, it could be that G1GC caused the corruption. I'm afraid to spend a lot of time on this knowing just how buggy it is. "
        },
        {
            "id": "comment-14271084",
            "author": "Robert Muir",
            "date": "2015-01-09T14:51:54+0000",
            "content": "if you can reproduce it completely from scratch (no G1-created index) with CMS, that would be very useful. "
        },
        {
            "id": "comment-14274656",
            "author": "Littlestar",
            "date": "2015-01-13T03:45:26+0000",
            "content": "I shared the result of MultiDocValues.getBinaryValues | getSortedValues  in some threads, it throw the problem.\nI changed to call MultiDocValues.getBinaryValues in each threads, it works ok but very slow.\nMaby mulithread cause the problem.\n\nhow to use BinaryDocValues in mulithread, thanks.\n\n  /** Returns a BinaryDocValues for a reader's docvalues (potentially merging on-the-fly)\n\n\t<p>\n\tThis is a slow way to access binary values. Instead, access them per-segment\n\twith \n{@link AtomicReader#getBinaryDocValues(String)}\n\t</p>\n   */\n\n\n\nAtomicReader#getBinaryDocValues(String)\nReturns BinaryDocValues for this field, or null if no BinaryDocValues were indexed for this field. The returned instance should only be used by a single thread.  "
        }
    ]
}