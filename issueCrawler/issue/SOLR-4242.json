{
    "id": "SOLR-4242",
    "title": "A better spatial query parser",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "spatial"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I've been thinking about how spatial support is exposed to Solr users. \n\nPresently there's the older Solr 3 stuff, most prominently seen via {!geofilt} and {!bbox} done by Grant Ingersoll (I think). and then there's the Solr 4 fields using a special syntax parsed by Lucene 4 spatial that looks like mygeofield:\"Intersects(Circle(1 2 d=3))\" What's inside the outer parenthesis is parsed by Spatial4j as a shape, and it has a special (non-standard) syntax for points, rects, and circles, and then there's WKT.  I believe this scheme was devised by Ryan McKinley.\n\nI'd like to devise something that is both comprehensive and is aligned with standards to the extent that it's prudent.  The old Solr 3 stuff is not comprehensive and not standardized.  The newer stuff is comprehensive but only a little based on standards. And I think it'd be nicer to implement it as a Solr query parser.  I'll say more in the comments.",
    "attachments": {
        "SOLR-4242.patch": "https://issues.apache.org/jira/secure/attachment/12691671/SOLR-4242.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-13540996",
            "date": "2012-12-29T21:05:25+0000",
            "content": "FYI I've been making progress on introducing a WKT parser native to Spatial4j without it having to rely on JTS's WKT parser.  WKT, being an important spatial standard, should be had without yet another dependency.  Another reason to not use JTS is that JTS's WKT parser isn't extensible.\n\nI've looked at a few specs and APIs out there for commonality:\n\n\tThe SQL realm has an Open Geospatial Consortium (OGC) standard called Simple Feature Access - Part 2: SQL Option. Wikipedia says the latest version is governed by ISO as the \"SQL/MM\" spec (not available freely).  This is well adopted by relational databases and is recognizable by all the \"ST_\" prefixes to the SQL extensions.  Quick example (I may not have this quite right):  \n\nST_WITHIN(myGeomField,ST_POINT(50, 50))\n\n\tThe OGC Filter Encoding spec has additional operators DWithin (within distance, e.g. intersects a circle), Beyond (the opposite of DWithin), and BBOX (intersects a rect).  All 3 address shortcomings in WKT concerning lack of circles and no native rectangle shape.  The spec as a whole isn't applicable as its XML oriented however these operators are welcome; I've seen them in other contexts; and these could be transferrable.\n\tThe spatial predicate portion of Common Query Language created (CQL) by OGC (or ECQL (Extended CQL) as defined by Geoserver)).  Notably has DWITHIN, BBOX, and BEYOND, as well as the usual suspects.\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13543586",
            "date": "2013-01-04T04:12:43+0000",
            "content": "I suppose the biggest pain point usability-wise is getting the distance, sometimes needed for sorting, boosting, and simply displaying to the user.  The spatial query being able to returning the distance as the score is a cute trick but it's awkward when the spatial query isn't directly in 'q'.  It never feels right to put the user's keyword search anywhere but 'q'.  For an example of the awkwardness, see this example in SOLR-4255:\n\nhttp://localhost:8983/solr/collection1/select?\ndefType=edismax\n&q.alt=*:*\n&debugQuery=on\n&fl=*,score,distdeg:query({! score=distance filter=false v=$spatialfilter})\n&boost=query({! score=recipDistance filter=false v=$spatialfilter})\n&fq={! v=$spatialfilter}\n&spatialfilter=geo:\"Intersects(Circle(54.729696,-98.525391 d=10))\"\n\n\n\nThe query({! score=... filter=false v=... }) function query is the ugliest part. Simply by having a named function like \"spatialDist\" would remove the need for 'query' and 'filter', and the default could be distance score so out goes the 'score' part to.  The function's argument could refer to both the field and query shape by parameter reference like how it's doing it now.  Or, the field name \"geo\" could be stored into the \"sfield\" parameter and referenced via 'fq' as a 'df' local-param, leaving the spatial query to just the CQL-ish part that can be parsed directly by SpatialArgsParser.  So end result could be:\n\n\nhttp://localhost:8983/solr/collection1/select?\ndefType=edismax\n&q.alt=*:*\n&debugQuery=on\n&sfield=geo\n&fl=*,score,distdeg:spatialDist($spatialfilter})\n&boost=spatialDist('recipDistance',$spatialfilter)\n&fq={! df=$sfield v=$spatialfilter}\n&spatialfilter=Intersects(Circle(54.729696,-98.525391 d=10))\n\n\n\nIn addition, a query parser named \"spatial\" could simplify the filter portion to fq={!spatial}  with default 'sfield' pointing to the spatial field, the default 'op' (or perhaps 'predicate') being intersects, and the default query shape being in a 'qgeom'.  The spatialDist function could even default to look for those parameters making it even more succinct.  So this would borrow a lot in concept from the Spatial 3 approach. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13631513",
            "date": "2013-04-15T05:32:35+0000",
            "content": "spatialdist() ? \n\nWe really need this. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717469",
            "date": "2013-07-23T18:48:20+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "David Smiley",
            "id": "comment-13859647",
            "date": "2013-12-31T19:57:19+0000",
            "content": "Just a small update to this issue.  Spatial4j 0.4 is nearly done, and it has it's own WKT parser.  That makes it easier to have a Solr spatial query parser that reads WKT without inadvertent dependencies on JTS which isn't (and can't be) shipped with Solr.\n\nMy curent thinking is to simply add a new \"wkt\" param that is read by {!geofilt} & geodist() which they could use in the absence of \"pt\" being specified.  The main annoyance I have with the situation is that the current query parser \"geofilt\" suggest *geo*spatial (i.e. geodetic) and not a Euclidean/Cartesian flat plane model.  So might there be a new {!sfilt} and sdist()?  But \"dist()\" already exists and has strange args.  I wish all these things were thought out in advance before the existing names were chosen because as Solr compatibility goes, it's all on stone tablets for generations to come now.  Something can be worked out though. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13859873",
            "date": "2014-01-01T13:15:35+0000",
            "content": "FWIW, my intent behind SOLR-1578, was a geocoding query parser (i.e. put in addresses, POIs, etc.), not more spatial QP operators.  I'm fine w/ marking it as a duplicate, but at least wanted to capture that the issue was trying to achieve something different than what this is. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971255",
            "date": "2014-04-16T12:57:35+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14262172",
            "date": "2014-12-31T13:42:50+0000",
            "content": "David, what are your thoughts on how we should proceed?\nIf I understood correctly, the path forward could be to:\n\n\tHave a new \n{!sfilt}\n parser that does all that \n{!geofilt} does, but also takes WKT as a local param. And, deprecate the {!geofilt}\n.\n\tHave a spatialDist() or spatialDistance() function that refers to sfield parameter by default for the spatial field, and accepts the query string (predicate and query shape string) as its only parameter. However, here, what if the user wants to combine spatialDist() scores from two different spatial fields, since both would end up refering to sfield param. If this is indeed a problem, how about having spatialDistance() accept both sfield and spatial query string, e.g. spatialDist(\"geo:Intersects(...)\") or something similar?\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-14262270",
            "date": "2014-12-31T15:57:42+0000",
            "content": "For filtering, I suggest following established standards, which means parsers registered under these names:\nst_contains, st_covers, st_intersects, st_equals, st_disjoint, st_within, st_coveredby, st_overlaps, st_crosses.  But there would be just one actual QParser implementation that has the \"SpatialOperation\" instance to differentiate.  'sfield', 'pt', 'd', and 'bbox' can all be the same as they are now, plus 'wkt'. And it needs to support the extra parameters that SpatialArgs has, like distErr and distErrPct. Based on my experience, I think distErrPct should default to 0, not 2.5%.\n\nAlso, register st_dwithin which will use 'd' to buffer either 'pt', 'bbox', or 'wkt' (detect in that order) creating a query shape that is then used with 'WITHIN' SpatialOperation.  As a side note, the RPT Solr field could use a 'pointsOnly' boolean so that it's smart enough to use the faster and equivalent intersects algorithm when all indexed shapes are points. It's there on the Lucene spatial side but not exposed to Solr yet. That optimization flag should be a separate JIRA issue.\n\nFor returning distance, I suggest 'st_distance' as seen in PostGIS and perhaps elsewhere.  But I think  this can simply be an alias, more or less, to geofilt... LatLonType being geo, PointType being not geo, and AbstractSpatialFieldType has a context that has isGeo() boolean. I'd like to move away from the \"geo:Intersects(...)\" syntax and I'm not sure why you brought it up here.  We might add a parameter to st_distance called calc or units that ultimately get passed on to AbstractSpatialFieldType.getValueSourceFromSpatialArgs.  Some refactoring therein may be in order.\n\nRyan McKinley Is this cool with you? (or anyone else for that matter) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-14266665",
            "date": "2015-01-06T20:02:17+0000",
            "content": "so what would a sample URL look like, and how do we get results out (distance, etc)\n\nIn the example:\n\nhttp://localhost:8983/solr/collection1/select?\ndefType=edismax\n&q.alt=*:*\n&debugQuery=on\n&sfield=geo\n&fl=*,score,distdeg:spatialDist($spatialfilter})\n&boost=spatialDist('recipDistance',$spatialfilter)\n&fq={! df=$sfield v=$spatialfilter}\n&spatialfilter=Intersects(Circle(54.729696,-98.525391 d=10))\n\n\n\nFollowing something like:\nhttp://postgis.org/docs/ST_Intersects.html\n\nwould we have multiple argument functions?  or always assume a single spatial field ``&sfield=geo`` is the first arg\n\n&spatialfilter= ST_Intersects(geo, Circle(54.729696,-98.525391 d=10))\n\n\nvs\n\n&spatialfilter= ST_Intersects(Circle(54.729696,-98.525391 d=10))\n\n\n\nThis stuff is always complicated/messy since often want the same value in:\n\n\tfilter\n\tboost\n\treturn values\n\n\n\nI guess the duplication or tagging syntax makes that better, but it still looks ugly\n "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14266704",
            "date": "2015-01-06T20:30:12+0000",
            "content": "Filtering:\nSomething like this, maybe?\nfq=\n{!st_intersects sfield=\"geo\" wkt=\"Circle(54.729696,-98.525391)\" d=10}\n\nReturning distances/boosts:\nNot sure I understood st_distance() being \"alias, more or less, to geofilt\" part.\nDo you mean something like:\nst_distance(operation, sfield, wkt/pt, distanceUnits) ?\n(Wondering if the spatial operation parameter is needed?) "
        },
        {
            "author": "David Smiley",
            "id": "comment-14266738",
            "date": "2015-01-06T20:51:35+0000",
            "content": "Filtering:\n+1 to what Ishan shows...\nBut please don't show the old/deprecated shape syntax (Circle); I'd like to remove it: SOLR-6904 for v5.   To filter indexed points by a point-radius circle, preferably use dwithin:\n\n{!st_dwithin sfield=geo pt=54.72,-98.52 d=10}\n\n\nYou could also use st_intersects with a buffered point in WKT, but st_dwithin should be more idiomatic as it more directly aligns with the intent and doesn't use the 'buffer' custom non-standard Spatial4j extension.\nIf you need to represent a circle in WKT for whatever reason then use BUFFER(POINT(-98.52 54.72),0.089928)  (note buffer distance in wkt is degrees, but 'd' Solr param is what we set our distanceUnits to). "
        },
        {
            "author": "David Smiley",
            "id": "comment-14266784",
            "date": "2015-01-06T21:19:00+0000",
            "content": "Returning distances/boost:\n\nI meant that st_distance could be an alias to geodist().\n\nTo further align with the st_* naming, we could add st_area, st_area2d, and st_recipDistance and furthermore, along with st_distance, add support for referencing the wkt request param.  It'd be nice if in SOLR-6797 we had distanceUnits as a request param since then it'd be easy to use 'km' without having to know what to supply to sphere_radius.  Oh yeah, sphere_radius is purely understood by geofilt.\n\nThe filtering/predicates (e.g. st_dwithin, st_intersects...) could work with the score=... local-param to not only filter but yield the distance as the score.  That will probably just work. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14273768",
            "date": "2015-01-12T16:52:48+0000",
            "content": "Here's a WIP patch that just implements the filtering qparsers.\nDavid, Ryan, am I on the right track with this? (Review https://reviews.apache.org/r/29813/). "
        },
        {
            "author": "David Smiley",
            "id": "comment-14305898",
            "date": "2015-02-04T20:37:59+0000",
            "content": "(I'm copying a comment from the review board that is better served here\n\nI'm thinking instead of a param named 'wkt' we call it 'geom'.  'geom' has a generic sounding name (and familiar in other systems) whereas 'wkt' is clearly for WKT only.  By using 'geom' we can look at the first character and then parse further based on wether it's a letter (WKT) a '[' (box range query style, as seen in my heatmap patch).  Maybe even try and parse as a point.  I'm not asking you to do all this parsing check right now, just want your opinion on naming it 'geom' for the moment and I'll worry about parsing it (I'll add a method to SpatialUtils). "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14317957",
            "date": "2015-02-12T10:26:39+0000",
            "content": "Updated the patch, now has \"modernized\" LatLonType and PointType. Added the \"geom\" parameter (instead of \"wkt\").\nUpdated the review request as well. Thanks. "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-14334754",
            "date": "2015-02-24T10:40:52+0000",
            "content": "Updated the patch with some more refactorings, as per David's suggestions. Updated the review request as well. "
        }
    ]
}