{
    "id": "LUCENE-1724",
    "title": "Analysis package calls Java 1.5 API",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I found compile errors when I tried to compile trunk with 1.4 JVM.\norg.apache.lucene.analysis.NormalizeCharMap\norg.apache.lucene.analysis.MappingCharFilter\n\nuses Character.valueOf() which has been added in 1.5.\nI added a CharacterCache (+ testcase) with a valueOf method as a replacement for that quite useful method.\n\norg.apache.lucene.analysis.BaseTokenTestCase\n\nuses StringBuilder instead of the synchronized version StringBuffer (available in 1.4)\n\nI will attach a patch shortly.",
    "attachments": {
        "CharacterCache.patch": "https://issues.apache.org/jira/secure/attachment/12412149/CharacterCache.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-30T10:51:45+0000",
            "content": "Thanks Simon, I just committed this!  I added a deprecated note to CharacterCache to remind us to move to the 1.5 APIs, and replaced the <= 127 with < cache.length. ",
            "author": "Michael McCandless",
            "id": "comment-12725575"
        },
        {
            "date": "2009-06-30T11:37:44+0000",
            "content": "Michael, I wonder why hudson does still not catch this. Who is the hudson admin? We should change the JVM to a 1.4 VM on hudson if possible. If we need to send a request to infrastructure I could do so.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12725583"
        },
        {
            "date": "2009-06-30T11:44:13+0000",
            "content": "The problem is, some contribs must be build with 1.5. So you need to use at least 1.5 for the whole build. The core and anaylsis javac are parametrized with -source and -target to 1.4 which generates 1.4 java classes out of only 1.4 compatible source code.\n\nThe problem here is, that the java compiler has no possibility to check if a method/class is available in 1.4, as it only knows his own rt.jar (normally it could e.g. use the @since javadoc tag, but this is not includedin the rt.jar and an annotation is not available). This is a well known problem to all java developers. ",
            "author": "Uwe Schindler",
            "id": "comment-12725585"
        },
        {
            "date": "2009-06-30T11:48:25+0000",
            "content": "A possible solution would be LUCENE-718. ",
            "author": "Uwe Schindler",
            "id": "comment-12725586"
        },
        {
            "date": "2009-06-30T11:54:20+0000",
            "content": "A possible solution would be LUCENE-718. \nEither this way (I use setting boot classpath all the time for different rt.jar) or we split the build procedure into two steps. Frist step: build core with 1.4 JDK Second Step: build contrib with 1.5 JDK. That way we need two hudson \"Jobs\" with dependencies to each other. I guess hudson lets you define this quite flexible. \n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12725587"
        },
        {
            "date": "2009-06-30T12:00:44+0000",
            "content": "Second Step: build contrib with 1.5 JDK\n\nOnly those with 1.5, all other contribs  together with core. So add something -Djavac.target to ant, that specifies what to compile and test. If it is 1.4, all 1.5 contribs are left out.\n\nIn my opinion, this is too late to change. After 2.9 will come 3.0 with Java 1.5 support. As noted in the mailing lists before, I would suggest, that the release process should simply include a test-compilation with 1.4 (I think it is noted in the Wiki, that this must be done before packaging the artifacts). ",
            "author": "Uwe Schindler",
            "id": "comment-12725589"
        }
    ]
}