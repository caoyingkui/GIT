{
    "id": "LUCENE-7476",
    "title": "Fix transient failure in JapaneseNumberFilter run from TestFactories",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.2.1",
        "components": [
            "core/other"
        ],
        "labels": "",
        "fix_versions": [
            "6.3",
            "7.0"
        ],
        "priority": "Trivial",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Repeatedly running TestFactories show this test to fail ~10% of the time.\n\nI believe the fix is trivial and related to loosing the state of the underlying input stream when testing some analyzer life cycle flows.",
    "attachments": {
        "LUCENE-7476.patch": "https://issues.apache.org/jira/secure/attachment/12831920/LUCENE-7476.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15551409",
            "author": "Andy Hind",
            "date": "2016-10-06T09:09:15+0000",
            "content": "Patch supplied - TestFactories ran with more then 700 seeds without error. "
        },
        {
            "id": "comment-15555201",
            "author": "Michael McCandless",
            "date": "2016-10-07T14:21:03+0000",
            "content": "Thanks Andy Hind.\n\nDo you have a Reproduce with: ... line showing the test failure?  What's spooky about this is that one should never call incrementToken after it has already returned false, and token filters should not be required / expected to guard against such abuse (this patch), so I'd like to understand who is abusing JapaneseNumberFilter's incrementToken in this test failure. "
        },
        {
            "id": "comment-15561799",
            "author": "Andy Hind",
            "date": "2016-10-10T09:35:21+0000",
            "content": "I spotted this running org.apache.lucene.analysis.core.TestFactories with @Repeat (iterations = 100) from eclipse\nI just got 9 failures running this again. It is odd that I do not see them in the build failures. \n\nI believe the 9 fails are all the same \n\n\njava.lang.IllegalStateException: incrementToken() called while in wrong state: INCREMENT_FALSE\n\tat __randomizedtesting.SeedInfo.seed([18C3960FB72D4F07:2AB7AA6A139D55E3]:0)\n\tat org.apache.lucene.analysis.MockTokenizer.fail(MockTokenizer.java:125)\n\tat org.apache.lucene.analysis.MockTokenizer.incrementToken(MockTokenizer.java:136)\n\tat org.apache.lucene.analysis.ja.JapaneseNumberFilter.incrementToken(JapaneseNumberFilter.java:152)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkAnalysisConsistency(BaseTokenStreamTestCase.java:716)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:627)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:525)\n\tat org.apache.lucene.analysis.core.TestFactories.doTestTokenFilter(TestFactories.java:108)\n\tat org.apache.lucene.analysis.core.TestFactories.test(TestFactories.java:61)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\n\nThe log gives:\n\nTEST FAIL: useCharFilter=false text='1'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=false text='2'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=false text='\\ufe0f\\ufe06\\ufe03\\ufe04\\ufe0c\\ufe0f\\ufe08\\ufe06\\ufe04 7'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=true text='\\u7e08\\uda09\\udd65\\u0cc2= \\u04cd\\u3bc3\\uc780lW 39'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=true text='ell'emendamento n. 8'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=true text='uaoqfm \\ue274\\ud98f\\udce3\\ud771\\ufd82\\ub336 8'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=false text='\\u06c1L 1'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=true text='R\\u06b0\\u4410\\u03a1\\u03d4 205'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nTEST FAIL: useCharFilter=true text='etaan huomenna klo 1'\nNOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=18C3960FB72D4F07 -Dtests.locale=uk -Dtests.timezone=Atlantic/Jan_Mayen -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nNOTE: leaving temporary files on disk at: /tmp/lucene.analysis.core.TestFactories_18C3960FB72D4F07-001\nNOTE: test params are: codec=FastCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=FAST, chunkSize=17439, maxDocsPerChunk=83, blockSize=212), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=FAST, chunkSize=17439, blockSize=212)), sim=ClassicSimilarity, locale=uk, timezone=Atlantic/Jan_Mayen\nNOTE: Linux 4.4.0-38-generic amd64/Oracle Corporation 1.8.0_91 (64-bit)/cpus=4,threads=1,free=34383216,total=359661568\nNOTE: All tests run in this JVM: [TestFactories]\n\n "
        },
        {
            "id": "comment-15561858",
            "author": "Andy Hind",
            "date": "2016-10-10T10:02:36+0000",
            "content": "Running the tests 100 times via ant produces no issue. This seems to be an eclipse configuration issue.\n\nant test  -Dtestcase=TestFactories -Dtests.method=test  -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n "
        },
        {
            "id": "comment-15562471",
            "author": "Michael McCandless",
            "date": "2016-10-10T14:42:05+0000",
            "content": "OK thanks Andy Hind, I think this is in fact a real bug!\n\nThe reason it happens in Eclipse but not ant is because when TestFactories runs from Eclipse, it apparently includes the JapaneseNumberFilter in the CLASSPATH but ant does not, which is annoying.  (There is a TODO about this in TestFactories).\n\nI'm attaching a patch (based on 6.x) that copies TestFactories.java into the kuromoji module, and then I can reproduce this failure:\n\n\n.TEST FAIL: useCharFilter=false text='alari/power.html 301'\nENOTE: reproduce with: ant test  -Dtestcase=TestFactories -Dtests.method=test -Dtests.seed=4139A5350B1C10BE -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=cs -Dtests.timezone=America/Paramaribo -Dtests.asserts=true -Dtests.file.encoding=UTF-8\nNOTE: test params are: codec=FastCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=FAST, chunkSize=6, maxDocsPerChunk=1004, blockSize=452), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=FAST, chunkSize=6, blockSize=452)), sim=ClassicSimilarity, locale=cs, timezone=America/Paramaribo\nNOTE: Linux 4.4.0-38-generic amd64/Oracle Corporation 1.8.0_92 (64-bit)/cpus=8,threads=1,free=415218864,total=514850816\nNOTE: All tests run in this JVM: [TestFactories]\n\nTime: 2.298\nThere was 1 failure:\n1) test(org.apache.lucene.analysis.ja.TestFactories)\njava.lang.IllegalStateException: incrementToken() called while in wrong state: INCREMENT_FALSE\n\tat __randomizedtesting.SeedInfo.seed([4139A5350B1C10BE:C96D9AEFA5E07D46]:0)\n\tat org.apache.lucene.analysis.MockTokenizer.fail(MockTokenizer.java:125)\n\tat org.apache.lucene.analysis.MockTokenizer.incrementToken(MockTokenizer.java:136)\n\tat org.apache.lucene.analysis.ja.JapaneseNumberFilter.incrementToken(JapaneseNumberFilter.java:152)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkAnalysisConsistency(BaseTokenStreamTestCase.java:716)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:627)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:525)\n\tat org.apache.lucene.analysis.ja.TestFactories.doTestTokenFilter(TestFactories.java:104)\n\tat org.apache.lucene.analysis.ja.TestFactories.test(TestFactories.java:57)\n\n "
        },
        {
            "id": "comment-15562489",
            "author": "Michael McCandless",
            "date": "2016-10-10T14:46:55+0000",
            "content": "And your original patch indeed fixes the issue.\n\nThe problems is the incrementToken that JapaneseNumberFilter does lower down (in the while loop): in this case, today, the preceding tokenizer can return false while JapaneseNumberFilter returns true, causing a future call to incrementToken to illegally call incrementToken from the preceding tokenizer.  "
        },
        {
            "id": "comment-15562494",
            "author": "Michael McCandless",
            "date": "2016-10-10T14:48:06+0000",
            "content": "Here's your patch (w/ some small code style edits) combined with my patch (copying over TestFactories.java) ... I think it's ready. "
        },
        {
            "id": "comment-15562607",
            "author": "ASF subversion and git services",
            "date": "2016-10-10T15:37:38+0000",
            "content": "Commit e585c84f244f4b8c8752152e9f232eba192041dc in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e585c84 ]\n\nLUCENE-7476: JapaneseNumberFilter should not invoke incrementToken on its input after it's exhausted "
        },
        {
            "id": "comment-15562617",
            "author": "ASF subversion and git services",
            "date": "2016-10-10T15:41:38+0000",
            "content": "Commit 257ea3423f5b03495e08a8aa4263f9520deb662b in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=257ea34 ]\n\nLUCENE-7476: JapaneseNumberFilter should not invoke incrementToken on its input after it's exhausted "
        },
        {
            "id": "comment-15562620",
            "author": "Michael McCandless",
            "date": "2016-10-10T15:42:11+0000",
            "content": "Thank you Andy Hind! "
        },
        {
            "id": "comment-15650326",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-11-09T08:39:24+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}